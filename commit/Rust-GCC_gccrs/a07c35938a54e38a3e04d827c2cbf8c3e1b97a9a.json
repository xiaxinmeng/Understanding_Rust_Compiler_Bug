{"sha": "a07c35938a54e38a3e04d827c2cbf8c3e1b97a9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA3YzM1OTM4YTU0ZTM4YTNlMDRkODI3YzJjYmY4YzNlMWI5N2E5YQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-04T12:52:38Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-04T12:52:38Z"}, "message": "adaint.c: Refine support for Windows file attributes.\n\n2008-08-04  Pascal Obry  <obry@adacore.com>\n\n\t* adaint.c: Refine support for Windows file attributes.\n\nFrom-SVN: r138620", "tree": {"sha": "544f4111e9742f29bb137945818e234785589ef1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/544f4111e9742f29bb137945818e234785589ef1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a07c35938a54e38a3e04d827c2cbf8c3e1b97a9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a07c35938a54e38a3e04d827c2cbf8c3e1b97a9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a07c35938a54e38a3e04d827c2cbf8c3e1b97a9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a07c35938a54e38a3e04d827c2cbf8c3e1b97a9a/comments", "author": null, "committer": null, "parents": [{"sha": "56a7a3ab67d7ec5c04ba0d784b26ebd9f741001c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56a7a3ab67d7ec5c04ba0d784b26ebd9f741001c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56a7a3ab67d7ec5c04ba0d784b26ebd9f741001c"}], "stats": {"total": 81, "additions": 66, "deletions": 15}, "files": [{"sha": "e49c0cd7510a89bb1dfcf23e91d2e551d23abc61", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a07c35938a54e38a3e04d827c2cbf8c3e1b97a9a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a07c35938a54e38a3e04d827c2cbf8c3e1b97a9a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a07c35938a54e38a3e04d827c2cbf8c3e1b97a9a", "patch": "@@ -1,3 +1,32 @@\n+2008-08-04  Pascal Obry  <obry@adacore.com>\n+\n+\t* adaint.h: Add missing prototype.\n+\n+\t* adaint.c: Refine support for Windows file attributes.\n+\n+2008-08-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_res.adb:\n+\t(Valid_Conversion): Catch case of designated types having different\n+\tsizes, even though they statically match.\n+\n+2008-08-04  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_eval.adb (Subtypes_Statically_Match): Remove superfluous patch\n+\tadded in previous patch to handle access to subprograms.\n+\n+2008-08-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* freeze.adb:\n+\t(Freeze_Entity): Only check No_Default_Initialization restriction for\n+\tconstructs that come from source\n+\n+2008-08-04  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_ch6.adb: Minor comment fix.\n+\n+\t* sem_ch4.adb: Minor reformatting.\n+\n 2008-08-04  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_res.adb: (Large_Storage_Type): Improve previous change."}, {"sha": "20f8d22ea21205544126cf8595d4643a6b49e7e3", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 37, "deletions": 15, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a07c35938a54e38a3e04d827c2cbf8c3e1b97a9a/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a07c35938a54e38a3e04d827c2cbf8c3e1b97a9a/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=a07c35938a54e38a3e04d827c2cbf8c3e1b97a9a", "patch": "@@ -1687,11 +1687,10 @@ __gnat_is_directory (char *name)\n /*  This MingW section contains code to work with ACL. */\n static int\n __gnat_check_OWNER_ACL\n-(char *name,\n+(TCHAR *wname,\n  DWORD CheckAccessDesired,\n  GENERIC_MAPPING CheckGenericMapping)\n {\n-  TCHAR wname [GNAT_MAX_PATH_LEN + 2];\n   DWORD dwAccessDesired, dwAccessAllowed;\n   PRIVILEGE_SET PrivilegeSet;\n   DWORD dwPrivSetSize = sizeof (PRIVILEGE_SET);\n@@ -1700,8 +1699,6 @@ __gnat_check_OWNER_ACL\n   DWORD nLength;\n   SECURITY_DESCRIPTOR* pSD = NULL;\n \n-  S2WSU (wname, name, GNAT_MAX_PATH_LEN + 2);\n-\n   GetFileSecurity\n     (wname, OWNER_SECURITY_INFORMATION |\n      GROUP_SECURITY_INFORMATION | DACL_SECURITY_INFORMATION,\n@@ -1752,7 +1749,7 @@ __gnat_check_OWNER_ACL\n \n static void\n __gnat_set_OWNER_ACL\n-(char *name,\n+(TCHAR *wname,\n  DWORD AccessMode,\n  DWORD AccessPermissions)\n {\n@@ -1763,10 +1760,6 @@ __gnat_set_OWNER_ACL\n   TCHAR username [100];\n   DWORD unsize = 100;\n \n-  TCHAR wname [GNAT_MAX_PATH_LEN + 2];\n-\n-  S2WSU (wname, name, GNAT_MAX_PATH_LEN + 2);\n-\n   HANDLE file = CreateFile\n     (wname, READ_CONTROL | WRITE_DAC, 0, NULL,\n      OPEN_EXISTING, FILE_FLAG_BACKUP_SEMANTICS, NULL);\n@@ -1821,11 +1814,15 @@ int\n __gnat_is_readable_file (char *name)\n {\n #if defined (_WIN32) && !defined (RTX)\n+  TCHAR wname [GNAT_MAX_PATH_LEN + 2];\n   GENERIC_MAPPING GenericMapping;\n+\n+  S2WSU (wname, name, GNAT_MAX_PATH_LEN + 2);\n+\n   ZeroMemory (&GenericMapping, sizeof (GENERIC_MAPPING));\n   GenericMapping.GenericRead = GENERIC_READ;\n \n-  return __gnat_check_OWNER_ACL (name, FILE_READ_DATA, GenericMapping);\n+  return __gnat_check_OWNER_ACL (wname, FILE_READ_DATA, GenericMapping);\n #else\n   int ret;\n   int mode;\n@@ -1841,12 +1838,17 @@ int\n __gnat_is_writable_file (char *name)\n {\n #if defined (_WIN32) && !defined (RTX)\n+  TCHAR wname [GNAT_MAX_PATH_LEN + 2];\n   GENERIC_MAPPING GenericMapping;\n+\n+  S2WSU (wname, name, GNAT_MAX_PATH_LEN + 2);\n+\n   ZeroMemory (&GenericMapping, sizeof (GENERIC_MAPPING));\n   GenericMapping.GenericWrite = GENERIC_WRITE;\n \n   return __gnat_check_OWNER_ACL\n-    (name, FILE_WRITE_DATA | FILE_APPEND_DATA, GenericMapping);\n+    (wname, FILE_WRITE_DATA | FILE_APPEND_DATA, GenericMapping)\n+    && !(GetFileAttributes (wname) & FILE_ATTRIBUTE_READONLY);\n #else\n   int ret;\n   int mode;\n@@ -1862,11 +1864,15 @@ int\n __gnat_is_executable_file (char *name)\n {\n #if defined (_WIN32) && !defined (RTX)\n+  TCHAR wname [GNAT_MAX_PATH_LEN + 2];\n   GENERIC_MAPPING GenericMapping;\n+\n+  S2WSU (wname, name, GNAT_MAX_PATH_LEN + 2);\n+\n   ZeroMemory (&GenericMapping, sizeof (GENERIC_MAPPING));\n   GenericMapping.GenericExecute = GENERIC_EXECUTE;\n \n-  return __gnat_check_OWNER_ACL (name, FILE_EXECUTE, GenericMapping);\n+  return __gnat_check_OWNER_ACL (wname, FILE_EXECUTE, GenericMapping);\n #else\n   int ret;\n   int mode;\n@@ -1882,7 +1888,13 @@ void\n __gnat_set_writable (char *name)\n {\n #if defined (_WIN32) && !defined (RTX)\n-  __gnat_set_OWNER_ACL (name, GRANT_ACCESS, GENERIC_WRITE);\n+  TCHAR wname [GNAT_MAX_PATH_LEN + 2];\n+\n+  S2WSU (wname, name, GNAT_MAX_PATH_LEN + 2);\n+\n+  __gnat_set_OWNER_ACL (wname, GRANT_ACCESS, GENERIC_WRITE);\n+  SetFileAttributes\n+    (wname, GetFileAttributes (wname) & ~FILE_ATTRIBUTE_READONLY);\n #elif ! defined (__vxworks) && ! defined(__nucleus__)\n   struct stat statbuf;\n \n@@ -1898,7 +1910,11 @@ void\n __gnat_set_executable (char *name)\n {\n #if defined (_WIN32) && !defined (RTX)\n-  __gnat_set_OWNER_ACL (name, GRANT_ACCESS, GENERIC_EXECUTE);\n+  TCHAR wname [GNAT_MAX_PATH_LEN + 2];\n+\n+  S2WSU (wname, name, GNAT_MAX_PATH_LEN + 2);\n+\n+  __gnat_set_OWNER_ACL (wname, GRANT_ACCESS, GENERIC_EXECUTE);\n #elif ! defined (__vxworks) && ! defined(__nucleus__)\n   struct stat statbuf;\n \n@@ -1914,7 +1930,13 @@ void\n __gnat_set_readonly (char *name)\n {\n #if defined (_WIN32) && !defined (RTX)\n-  __gnat_set_OWNER_ACL (name, SET_ACCESS, GENERIC_READ);\n+  TCHAR wname [GNAT_MAX_PATH_LEN + 2];\n+\n+  S2WSU (wname, name, GNAT_MAX_PATH_LEN + 2);\n+\n+  __gnat_set_OWNER_ACL (wname, SET_ACCESS, GENERIC_READ);\n+  SetFileAttributes\n+    (wname, GetFileAttributes (wname) | FILE_ATTRIBUTE_READONLY);\n #elif ! defined (__vxworks) && ! defined(__nucleus__)\n   struct stat statbuf;\n "}]}