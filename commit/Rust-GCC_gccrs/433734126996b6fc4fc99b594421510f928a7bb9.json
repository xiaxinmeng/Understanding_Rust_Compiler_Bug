{"sha": "433734126996b6fc4fc99b594421510f928a7bb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDMzNzM0MTI2OTk2YjZmYzRmYzk5YjU5NDQyMTUxMGY5MjhhN2JiOQ==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-07-08T09:14:36Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-09-03T08:10:45Z"}, "message": "Optimize memory broadcast for constant vector under AVX512.\n\nFor constant vector having one duplicated value, there's no need to put\nwhole vector in the constant pool, using embedded broadcast instead.\n\n2020-07-09  Hongtao Liu  <hongtao.liu@intel.com>\n\ngcc/ChangeLog:\n\n\tPR target/87767\n\t* config/i386/i386-features.c\n\t(replace_constant_pool_with_broadcast): New function.\n\t(constant_pool_broadcast): Ditto.\n\t(class pass_constant_pool_broadcast): New pass.\n\t(make_pass_constant_pool_broadcast): Ditto.\n\t(remove_partial_avx_dependency): Call\n\treplace_constant_pool_with_broadcast under TARGET_AVX512F, it\n\twould save compile time when both pass rpad and cpb are\n\tavailable.\n\t(remove_partial_avx_dependency_gate): New function.\n\t(class pass_remove_partial_avx_dependency::gate): Call\n\tremove_partial_avx_dependency_gate.\n\t* config/i386/i386-passes.def: Insert new pass after combine.\n\t* config/i386/i386-protos.h\n\t(make_pass_constant_pool_broadcast): Declare.\n\t* config/i386/sse.md (*avx512dq_mul<mode>3<mask_name>_bcst):\n\tNew define_insn.\n\t(*avx512f_mul<mode>3<mask_name>_bcst): Ditto.\n\t* config/i386/avx512fintrin.h (_mm512_set1_ps,\n\t_mm512_set1_pd,_mm512_set1_epi32, _mm512_set1_epi64): Adjusted.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/87767\n\t* gcc.target/i386/avx2-broadcast-pr87767-1.c: New test.\n\t* gcc.target/i386/avx512f-broadcast-pr87767-1.c: New test.\n\t* gcc.target/i386/avx512f-broadcast-pr87767-2.c: New test.\n\t* gcc.target/i386/avx512f-broadcast-pr87767-3.c: New test.\n\t* gcc.target/i386/avx512f-broadcast-pr87767-4.c: New test.\n\t* gcc.target/i386/avx512f-broadcast-pr87767-5.c: New test.\n\t* gcc.target/i386/avx512f-broadcast-pr87767-6.c: New test.\n\t* gcc.target/i386/avx512f-broadcast-pr87767-7.c: New test.\n\t* gcc.target/i386/avx512vl-broadcast-pr87767-1.c: New test.\n\t* gcc.target/i386/avx512vl-broadcast-pr87767-1.c: New test.\n\t* gcc.target/i386/avx512vl-broadcast-pr87767-2.c: New test.\n\t* gcc.target/i386/avx512vl-broadcast-pr87767-3.c: New test.\n\t* gcc.target/i386/avx512vl-broadcast-pr87767-4.c: New test.\n\t* gcc.target/i386/avx512vl-broadcast-pr87767-5.c: New test.\n\t* gcc.target/i386/avx512vl-broadcast-pr87767-6.c: New test.", "tree": {"sha": "3709ee6cb49463d9a7dc483903d79cba3c2546bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3709ee6cb49463d9a7dc483903d79cba3c2546bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/433734126996b6fc4fc99b594421510f928a7bb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/433734126996b6fc4fc99b594421510f928a7bb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/433734126996b6fc4fc99b594421510f928a7bb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/433734126996b6fc4fc99b594421510f928a7bb9/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bd5530bfa136663f1fa79e9a1d3932b5adf15bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bd5530bfa136663f1fa79e9a1d3932b5adf15bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bd5530bfa136663f1fa79e9a1d3932b5adf15bd"}], "stats": {"total": 871, "additions": 848, "deletions": 23}, "files": [{"sha": "729d5686d6870f0df98079e6df9188f669a1596f", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=433734126996b6fc4fc99b594421510f928a7bb9", "patch": "@@ -239,22 +239,17 @@ extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_set1_pd (double __A)\n {\n-  return (__m512d) __builtin_ia32_broadcastsd512 (__extension__\n-\t\t\t\t\t\t  (__v2df) { __A, },\n-\t\t\t\t\t\t  (__v8df)\n-\t\t\t\t\t\t  _mm512_undefined_pd (),\n-\t\t\t\t\t\t  (__mmask8) -1);\n+  return __extension__ (__m512d)(__v8df)\n+    { __A, __A, __A, __A, __A, __A, __A, __A };\n }\n \n extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_set1_ps (float __A)\n {\n-  return (__m512) __builtin_ia32_broadcastss512 (__extension__\n-\t\t\t\t\t\t (__v4sf) { __A, },\n-\t\t\t\t\t\t (__v16sf)\n-\t\t\t\t\t\t _mm512_undefined_ps (),\n-\t\t\t\t\t\t (__mmask16) -1);\n+  return __extension__ (__m512)(__v16sf)\n+    { __A, __A, __A, __A, __A, __A, __A, __A,\n+      __A, __A, __A, __A, __A, __A, __A, __A };\n }\n \n /* Create the vector [A B C D A B C D A B C D A B C D].  */\n@@ -4072,10 +4067,9 @@ extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_set1_epi32 (int __A)\n {\n-  return (__m512i) __builtin_ia32_pbroadcastd512_gpr_mask (__A,\n-\t\t\t\t\t\t\t   (__v16si)\n-\t\t\t\t\t\t\t   _mm512_undefined_epi32 (),\n-\t\t\t\t\t\t\t   (__mmask16)(-1));\n+  return (__m512i)(__v16si)\n+    { __A, __A, __A, __A, __A, __A, __A, __A,\n+      __A, __A, __A, __A, __A, __A, __A, __A };\n }\n \n extern __inline __m512i\n@@ -4128,10 +4122,7 @@ extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_set1_epi64 (long long __A)\n {\n-  return (__m512i) __builtin_ia32_pbroadcastq512_gpr_mask (__A,\n-\t\t\t\t\t\t\t   (__v8di)\n-\t\t\t\t\t\t\t   _mm512_undefined_epi32 (),\n-\t\t\t\t\t\t\t   (__mmask8)(-1));\n+  return (__m512i)(__v8di) { __A, __A, __A, __A, __A, __A, __A, __A };\n }\n \n extern __inline __m512i"}, {"sha": "620f7f157f453a9f0d02e761e0e57d206d02b215", "filename": "gcc/config/i386/i386-features.c", "status": "modified", "additions": 152, "deletions": 5, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Fconfig%2Fi386%2Fi386-features.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Fconfig%2Fi386%2Fi386-features.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-features.c?ref=433734126996b6fc4fc99b594421510f928a7bb9", "patch": "@@ -2162,6 +2162,81 @@ make_pass_insert_endbr_and_patchable_area (gcc::context *ctxt)\n   return new pass_insert_endbr_and_patchable_area (ctxt);\n }\n \n+/* Replace all one-value const vector that are referenced by SYMBOL_REFs in x\n+   with embedded broadcast. i.e.transform\n+\n+     vpaddq .LC0(%rip), %zmm0, %zmm0\n+     ret\n+  .LC0:\n+    .quad 3\n+    .quad 3\n+    .quad 3\n+    .quad 3\n+    .quad 3\n+    .quad 3\n+    .quad 3\n+    .quad 3\n+\n+    to\n+\n+     vpaddq .LC0(%rip){1to8}, %zmm0, %zmm0\n+     ret\n+  .LC0:\n+    .quad 3  */\n+static void\n+replace_constant_pool_with_broadcast (rtx_insn *insn)\n+{\n+  subrtx_ptr_iterator::array_type array;\n+  FOR_EACH_SUBRTX_PTR (iter, array, &PATTERN (insn), ALL)\n+    {\n+      rtx *loc = *iter;\n+      rtx x = *loc;\n+      rtx broadcast_mem, vec_dup, constant, first;\n+      machine_mode mode;\n+\n+      /* Constant pool.  */\n+      if (!MEM_P (x)\n+\t  || !SYMBOL_REF_P (XEXP (x, 0))\n+\t  || !CONSTANT_POOL_ADDRESS_P (XEXP (x, 0)))\n+\tcontinue;\n+\n+      /* Const vector.  */\n+      mode = GET_MODE (x);\n+      if (!VECTOR_MODE_P (mode))\n+\treturn;\n+      constant = get_pool_constant (XEXP (x, 0));\n+      if (GET_CODE (constant) != CONST_VECTOR)\n+\treturn;\n+\n+      /* There could be some rtx like\n+\t (mem/u/c:V16QI (symbol_ref/u:DI (\"*.LC1\")))\n+\t but with \"*.LC1\" refer to V2DI constant vector.  */\n+      if (GET_MODE (constant) != mode)\n+\t{\n+\t  constant = simplify_subreg (mode, constant, GET_MODE (constant), 0);\n+\t  if (constant == NULL_RTX || GET_CODE (constant) != CONST_VECTOR)\n+\t    return;\n+\t}\n+      first = XVECEXP (constant, 0, 0);\n+\n+      for (int i = 1; i < GET_MODE_NUNITS (mode); ++i)\n+\t{\n+\t  rtx tmp = XVECEXP (constant, 0, i);\n+\t  /* Vector duplicate value.  */\n+\t  if (!rtx_equal_p (tmp, first))\n+\t    return;\n+\t}\n+\n+      /* Replace with embedded broadcast.  */\n+      broadcast_mem = force_const_mem (GET_MODE_INNER (mode), first);\n+      vec_dup = gen_rtx_VEC_DUPLICATE (mode, broadcast_mem);\n+      validate_change (insn, loc, vec_dup, 0);\n+\n+      /* At most 1 memory_operand in an insn.  */\n+      return;\n+    }\n+}\n+\n /* At entry of the nearest common dominator for basic blocks with\n    conversions, generate a single\n \tvxorps %xmmN, %xmmN, %xmmN\n@@ -2197,6 +2272,10 @@ remove_partial_avx_dependency (void)\n \t  if (!NONDEBUG_INSN_P (insn))\n \t    continue;\n \n+\t  /* Handle AVX512 embedded broadcast here to save compile time.  */\n+\t  if (TARGET_AVX512F)\n+\t    replace_constant_pool_with_broadcast (insn);\n+\n \t  set = single_set (insn);\n \t  if (!set)\n \t    continue;\n@@ -2333,6 +2412,16 @@ remove_partial_avx_dependency (void)\n   return 0;\n }\n \n+static bool\n+remove_partial_avx_dependency_gate ()\n+{\n+  return (TARGET_AVX\n+\t  && TARGET_SSE_PARTIAL_REG_DEPENDENCY\n+\t  && TARGET_SSE_MATH\n+\t  && optimize\n+\t  && optimize_function_for_speed_p (cfun));\n+}\n+\n namespace {\n \n const pass_data pass_data_remove_partial_avx_dependency =\n@@ -2358,11 +2447,7 @@ class pass_remove_partial_avx_dependency : public rtl_opt_pass\n   /* opt_pass methods: */\n   virtual bool gate (function *)\n     {\n-      return (TARGET_AVX\n-\t      && TARGET_SSE_PARTIAL_REG_DEPENDENCY\n-\t      && TARGET_SSE_MATH\n-\t      && optimize\n-\t      && optimize_function_for_speed_p (cfun));\n+      return remove_partial_avx_dependency_gate ();\n     }\n \n   virtual unsigned int execute (function *)\n@@ -2379,6 +2464,68 @@ make_pass_remove_partial_avx_dependency (gcc::context *ctxt)\n   return new pass_remove_partial_avx_dependency (ctxt);\n }\n \n+/* For const vector having one duplicated value, there's no need to put\n+   whole vector in the constant pool when target supports embedded broadcast. */\n+static unsigned int\n+constant_pool_broadcast (void)\n+{\n+  timevar_push (TV_MACH_DEP);\n+  rtx_insn *insn;\n+\n+  for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n+    {\n+      if (INSN_P (insn))\n+\treplace_constant_pool_with_broadcast (insn);\n+    }\n+  timevar_pop (TV_MACH_DEP);\n+  return 0;\n+}\n+\n+namespace {\n+\n+const pass_data pass_data_constant_pool_broadcast =\n+{\n+  RTL_PASS, /* type */\n+  \"cpb\", /* name */\n+  OPTGROUP_NONE, /* optinfo_flags */\n+  TV_MACH_DEP, /* tv_id */\n+  0, /* properties_required */\n+  0, /* properties_provided */\n+  0, /* properties_destroyed */\n+  0, /* todo_flags_start */\n+  TODO_df_finish, /* todo_flags_finish */\n+};\n+\n+class pass_constant_pool_broadcast : public rtl_opt_pass\n+{\n+public:\n+  pass_constant_pool_broadcast (gcc::context *ctxt)\n+    : rtl_opt_pass (pass_data_constant_pool_broadcast, ctxt)\n+  {}\n+\n+  /* opt_pass methods: */\n+  virtual bool gate (function *)\n+    {\n+      /* Return false if rpad pass gate is true.\n+\t replace_constant_pool_with_broadcast is called\n+\t from both this pass and rpad pass.  */\n+      return (TARGET_AVX512F && !remove_partial_avx_dependency_gate ());\n+    }\n+\n+  virtual unsigned int execute (function *)\n+    {\n+      return constant_pool_broadcast ();\n+    }\n+}; // class pass_cpb\n+\n+} // anon namespace\n+\n+rtl_opt_pass *\n+make_pass_constant_pool_broadcast (gcc::context *ctxt)\n+{\n+  return new pass_constant_pool_broadcast (ctxt);\n+}\n+\n /* This compares the priority of target features in function DECL1\n    and DECL2.  It returns positive value if DECL1 is higher priority,\n    negative value if DECL2 is higher priority and 0 if they are the"}, {"sha": "07ecf8e790f3093978d73e90755bc9c52c9e0428", "filename": "gcc/config/i386/i386-passes.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Fconfig%2Fi386%2Fi386-passes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Fconfig%2Fi386%2Fi386-passes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-passes.def?ref=433734126996b6fc4fc99b594421510f928a7bb9", "patch": "@@ -33,3 +33,4 @@ along with GCC; see the file COPYING3.  If not see\n   INSERT_PASS_BEFORE (pass_shorten_branches, 1, pass_insert_endbr_and_patchable_area);\n \n   INSERT_PASS_AFTER (pass_combine, 1, pass_remove_partial_avx_dependency);\n+  INSERT_PASS_AFTER (pass_combine, 1, pass_constant_pool_broadcast);"}, {"sha": "c5b700efd0e26beb0e19ee563ba92da8406f58d5", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=433734126996b6fc4fc99b594421510f928a7bb9", "patch": "@@ -386,3 +386,4 @@ extern rtl_opt_pass *make_pass_insert_endbr_and_patchable_area\n   (gcc::context *);\n extern rtl_opt_pass *make_pass_remove_partial_avx_dependency\n   (gcc::context *);\n+extern rtl_opt_pass *make_pass_constant_pool_broadcast (gcc::context *);"}, {"sha": "a728b979f01037174cdf61c97838e87211738ed5", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=433734126996b6fc4fc99b594421510f928a7bb9", "patch": "@@ -12120,6 +12120,18 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"*avx512dq_mul<mode>3<mask_name>_bcst\"\n+  [(set (match_operand:VI8_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(mult:VI8_AVX512VL\n+\t  (vec_duplicate:VI8_AVX512VL\n+\t    (match_operand:<ssescalarmode> 1 \"memory_operand\" \"m\"))\n+\t  (match_operand:VI8_AVX512VL 2 \"register_operand\" \"v\")))]\n+  \"TARGET_AVX512DQ\"\n+  \"vpmullq\\t{%1<avx512bcst>, %2, %0<mask_operand3>|%0<mask_operand3>, %2, %1<avx512bcst>}\"\n+  [(set_attr \"type\" \"sseimul\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_expand \"mul<mode>3<mask_name>\"\n   [(set (match_operand:VI4_AVX512F 0 \"register_operand\")\n \t(mult:VI4_AVX512F\n@@ -12160,6 +12172,18 @@\n    (set_attr \"btver2_decode\" \"vector,vector,vector\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"*avx512f_mul<mode>3<mask_name>_bcst\"\n+  [(set (match_operand:VI4_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(mult:VI4_AVX512VL\n+\t  (vec_duplicate:VI4_AVX512VL\n+\t    (match_operand:<ssescalarmode> 1 \"memory_operand\" \"m\"))\n+\t  (match_operand:VI4_AVX512VL 2 \"register_operand\" \"v\")))]\n+  \"TARGET_AVX512F\"\n+   \"vpmulld\\t{%1<avx512bcst>, %2, %0<mask_operand3>|%0<mask_operand3>, %2, %1<avx512bcst>}\"\n+  [(set_attr \"type\" \"sseimul\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_expand \"mul<mode>3\"\n   [(set (match_operand:VI8_AVX2_AVX512F 0 \"register_operand\")\n \t(mult:VI8_AVX2_AVX512F"}, {"sha": "aee1680ed98477cb41d7f7fea05de8edb87aa34a", "filename": "gcc/testsuite/gcc.target/i386/avx2-broadcast-pr87767-1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-broadcast-pr87767-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-broadcast-pr87767-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-broadcast-pr87767-1.c?ref=433734126996b6fc4fc99b594421510f928a7bb9", "patch": "@@ -0,0 +1,40 @@\n+/* PR target/87767 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx2 -mno-avx512f\" } */\n+/* { dg-final { scan-assembler-not \"\\\\\\{1to\\[248\\]\\\\\\}\" } }  */\n+/* { dg-final { scan-assembler-not \"\\\\\\{1to16\\\\\\}\" } }  */\n+\n+typedef int v4si  __attribute__ ((vector_size (16)));\n+typedef int v8si  __attribute__ ((vector_size (32)));\n+typedef long long v2di  __attribute__ ((vector_size (16)));\n+typedef long long v4di  __attribute__ ((vector_size (32)));\n+typedef float v4sf  __attribute__ ((vector_size (16)));\n+typedef float v8sf  __attribute__ ((vector_size (32)));\n+typedef double v2df  __attribute__ ((vector_size (16)));\n+typedef double v4df  __attribute__ ((vector_size (32)));\n+\n+#define FOO(VTYPE, OP_NAME, OP)\t\t\t\\\n+VTYPE\t\t\t\t\t\t\\\n+ __attribute__ ((noipa))\t\t\t\\\n+foo_##OP_NAME##_##VTYPE (VTYPE a)\t\t\\\n+{\t\t\t\t\t\t\\\n+  return a OP 101;\t\t\t\t\\\n+}\t\t\t\t\t\t\\\n+\n+FOO (v4si, add, +);\n+FOO (v8si, add, +);\n+FOO (v2di, add, +);\n+FOO (v4di, add, +);\n+FOO (v4sf, add, +);\n+FOO (v8sf, add, +);\n+FOO (v2df, add, +);\n+FOO (v4df, add, +);\n+\n+FOO (v4si, mul, *);\n+FOO (v8si, mul, *);\n+FOO (v2di, mul, *);\n+FOO (v4di, mul, *);\n+FOO (v4sf, mul, *);\n+FOO (v8sf, mul, *);\n+FOO (v2df, mul, *);\n+FOO (v4df, mul, *);"}, {"sha": "a8ee5f5faf1081ad88484160f306cd98257e24df", "filename": "gcc/testsuite/gcc.target/i386/avx512f-broadcast-pr87767-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-1.c?ref=433734126996b6fc4fc99b594421510f928a7bb9", "patch": "@@ -0,0 +1,30 @@\n+/* PR target/87767 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f -mavx512dq\" } */\n+/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to8\\\\\\}\" 5 } }  */\n+/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to16\\\\\\}\" 5 } }  */\n+\n+typedef int v16si  __attribute__ ((vector_size (64)));\n+typedef long long v8di  __attribute__ ((vector_size (64)));\n+typedef float v16sf  __attribute__ ((vector_size (64)));\n+typedef double v8df  __attribute__ ((vector_size (64)));\n+\n+#define CONSTANT 101;\n+#define FOO(VTYPE, OP_NAME, OP)\t\t\t\\\n+VTYPE\t\t\t\t\t\t\\\n+ __attribute__ ((noipa))\t\t\t\\\n+foo_##OP_NAME##_##VTYPE (VTYPE a)\t\t\\\n+{\t\t\t\t\t\t\\\n+  return a OP CONSTANT;\t\t\t\t\\\n+}\t\t\t\t\t\t\\\n+\n+FOO (v16si, add, +);\n+FOO (v8di, add, +);\n+FOO (v16sf, add, +);\n+FOO (v8df, add, +);\n+FOO (v16si, sub, -);\n+FOO (v8di, sub, -);\n+FOO (v16si, mul, *);\n+FOO (v8di, mul, *);\n+FOO (v16sf, mul, *);\n+FOO (v8df, mul, *);"}, {"sha": "30cf5809c3d36b23d5e7b732b60fca2238ea76a7", "filename": "gcc/testsuite/gcc.target/i386/avx512f-broadcast-pr87767-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-2.c?ref=433734126996b6fc4fc99b594421510f928a7bb9", "patch": "@@ -0,0 +1,42 @@\n+/* PR target/87767 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f -mavx512dq\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#define AVX512DQ\n+#include \"avx512f-helper.h\"\n+\n+#include \"avx512f-broadcast-pr87767-1.c\"\n+\n+#define RTEST(VTYPE, TYPE, N, OP_NAME, OP)\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      TYPE exp[N], src[N];\t\t\t\t\\\n+      VTYPE res;\t\t\t\t\t\\\n+      for (int i = 0; i < N; i++)\t\t\t\\\n+\tsrc[i] = i * i * 107;\t\t\t\t\\\n+      res = foo_##OP_NAME##_##VTYPE (*(VTYPE*)&src[0]);\t\\\n+      for (int i = 0; i < N; i ++)\t\t\t\\\n+\texp[i] = src[i] OP CONSTANT;\t\t\t\\\n+      for (int j = 0; j < N; j++)\t\t\t\\\n+\t{\t\t\t\t\t\t\\\n+\t  if (res[j] != exp[j])\t\t\t\t\\\n+\t    abort();\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+void\n+test_512 (void)\n+{\n+  RTEST (v16si, int, 16, add, +);\n+  RTEST (v8di, long long, 8, add, +);\n+  RTEST (v16sf, float, 16, add, +);\n+  RTEST (v8df, double, 8, add, +);\n+  RTEST (v16si, int, 16, sub, -);\n+  RTEST (v8di, long long, 8, sub, -);\n+  RTEST (v16si, int, 16, mul, *);\n+  RTEST (v8di, long long, 8, mul, *);\n+  RTEST (v16sf, float, 16, mul, *);\n+  RTEST (v8df, double, 8, mul, *);\n+}"}, {"sha": "c2f22c4ee5a3f81c105d03347613107ee1dd8f70", "filename": "gcc/testsuite/gcc.target/i386/avx512f-broadcast-pr87767-3.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-3.c?ref=433734126996b6fc4fc99b594421510f928a7bb9", "patch": "@@ -0,0 +1,30 @@\n+/* PR target/87767 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to8\\\\\\}\" 4 } }  */\n+/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to16\\\\\\}\" 4 } }  */\n+\n+typedef float v4sf  __attribute__ ((vector_size (16)));\n+typedef float v8sf  __attribute__ ((vector_size (32)));\n+typedef float v16sf  __attribute__ ((vector_size (64)));\n+typedef double v2df  __attribute__ ((vector_size (16)));\n+typedef double v4df  __attribute__ ((vector_size (32)));\n+typedef double v8df  __attribute__ ((vector_size (64)));\n+\n+#define CONSTANT 101;\n+#define FOO(VTYPE, OP_NAME, OP1, OP2)\t\t\\\n+VTYPE\t\t\t\t\t\t\\\n+ __attribute__ ((noipa))\t\t\t\\\n+ foo_##OP_NAME##_##VTYPE (VTYPE a, VTYPE b)\t\\\n+{\t\t\t\t\t\t\\\n+  return (OP1 a * b) OP2 CONSTANT;\t\t\\\n+}\t\t\t\t\t\t\\\n+\n+FOO (v16sf, fma,, +);\n+FOO (v8df, fma,, +);\n+FOO (v16sf, fms,, -);\n+FOO (v8df, fms,, -);\n+FOO (v16sf, fnma, -, +);\n+FOO (v8df, fnma, -, +);\n+FOO (v16sf, fnms, -, -);\n+FOO (v8df, fnms, -, -);"}, {"sha": "dabe91b11c879079bc91118082646470c40df620", "filename": "gcc/testsuite/gcc.target/i386/avx512f-broadcast-pr87767-4.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-4.c?ref=433734126996b6fc4fc99b594421510f928a7bb9", "patch": "@@ -0,0 +1,42 @@\n+/* PR target/87767 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#include \"avx512f-broadcast-pr87767-3.c\"\n+\n+#define RTEST(VTYPE, TYPE, N, OP_NAME, OP1, OP2)\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      TYPE exp[N], src1[N], src2[N];\t\t\t\t\t\\\n+      VTYPE res;\t\t\t\t\t\t\t\\\n+      for (int i = 0; i < N; i++)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  src1[i] = i * i * 107.2f;\t\t\t\t\t\\\n+\t  src2[i] = i * 2.f - 404.f;\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      res = foo_##OP_NAME##_##VTYPE (*(VTYPE*)&src1[0], *(VTYPE*)&src2[0]); \\\n+      for (int i = 0; i < N; i ++)\t\t\t\t\t\\\n+\texp[i] = (OP1 src1[i] * src2[i]) OP2 CONSTANT;\t\t\t\\\n+      for (int j = 0; j < N; j++)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  if (res[j] != exp[j])\t\t\t\t\t\t\\\n+\t    abort();\t\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+void\n+test_512 (void)\n+{\n+  RTEST (v16sf, float, 16, fma,, +);\n+  RTEST (v8df, double, 8, fma,, +);\n+  RTEST (v16sf, float, 16, fms,, -);\n+  RTEST (v8df, double, 8, fms,, -);\n+  RTEST (v16sf, float, 16, fnma,-, +);\n+  RTEST (v8df, double, 8, fnma,-, +);\n+  RTEST (v16sf, float, 16, fnms,-, -);\n+  RTEST (v8df, double, 8, fnms,-, -);\n+}"}, {"sha": "72e1098ccbed194f84a3e3af681a09692c106f7c", "filename": "gcc/testsuite/gcc.target/i386/avx512f-broadcast-pr87767-5.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-5.c?ref=433734126996b6fc4fc99b594421510f928a7bb9", "patch": "@@ -0,0 +1,26 @@\n+/* PR target/87767 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"\\[^n\\n\\]*\\\\\\{1to8\\\\\\}\" 4 } }  */\n+/* { dg-final { scan-assembler-times \"\\[^n\\n\\]*\\\\\\{1to16\\\\\\}\" 4 } }  */\n+\n+typedef int v16si  __attribute__ ((vector_size (64)));\n+typedef long long v8di  __attribute__ ((vector_size (64)));\n+\n+#define CONSTANT 101;\n+#define FOO(VTYPE, OP_NAME, OP1, OP2)\t\t\\\n+VTYPE\t\t\t\t\t\t\\\n+ __attribute__ ((noipa))\t\t\t\\\n+ foo_##OP_NAME##_##VTYPE (VTYPE a)\t\t\\\n+{\t\t\t\t\t\t\\\n+  return (OP1 a) OP2 CONSTANT;\t\t\t\\\n+}\t\t\t\t\t\t\\\n+\n+FOO (v16si, andnot, ~, &);\n+FOO (v8di, andnot, ~, &);\n+FOO (v16si, and,, &);\n+FOO (v8di, and,, &);\n+FOO (v16si, or,, |);\n+FOO (v8di, or,, |);\n+FOO (v16si, xor,, ^);\n+FOO (v8di, xor,, ^);"}, {"sha": "f288f83158cbc7e364bb1c4ea50498e11b2e1088", "filename": "gcc/testsuite/gcc.target/i386/avx512f-broadcast-pr87767-6.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-6.c?ref=433734126996b6fc4fc99b594421510f928a7bb9", "patch": "@@ -0,0 +1,41 @@\n+/* PR target/87767 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f} */\n+\n+#include \"avx512f-helper.h\"\n+\n+#include \"avx512f-broadcast-pr87767-5.c\"\n+\n+#define RTEST(VTYPE, TYPE, N, OP_NAME, OP1, OP2)\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      TYPE exp[N], src[N];\t\t\t\t\t\t\\\n+      VTYPE res;\t\t\t\t\t\t\t\\\n+      for (int i = 0; i < N; i++)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  src[i] = i * i * 107;\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      res = foo_##OP_NAME##_##VTYPE (*(VTYPE*)&src[0]);\t\t\t\\\n+      for (int i = 0; i < N; i ++)\t\t\t\t\t\\\n+\texp[i] = (OP1 src[i]) OP2 CONSTANT;\t\t\t\t\\\n+      for (int j = 0; j < N; j++)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  if (res[j] != exp[j])\t\t\t\t\t\t\\\n+\t    abort();\t\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+void\n+test_512 (void)\n+{\n+  RTEST (v16si, int, 16, andnot, ~, &);\n+  RTEST (v8di, long long, 8, andnot, ~, &);\n+  RTEST (v16si, int, 16, and,, &);\n+  RTEST (v8di, long long, 8, and,, &);\n+  RTEST (v16si, int, 16, or,, |);\n+  RTEST (v8di, long long, 8, or,, |);\n+  RTEST (v16si, int, 16, xor,, ^);\n+  RTEST (v8di, long long, 8, xor,, ^);\n+}"}, {"sha": "a8f145d85896a95dfccff625fda2cec0eb84849a", "filename": "gcc/testsuite/gcc.target/i386/avx512f-broadcast-pr87767-7.c", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-broadcast-pr87767-7.c?ref=433734126996b6fc4fc99b594421510f928a7bb9", "patch": "@@ -0,0 +1,121 @@\n+/* PR target/87767 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f -mavx512vl\" } */\n+/* { dg-final { scan-assembler-times \"vadd\\[^\\n\\]*\\\\\\{1to2\\\\\\}\" 1 } }  */\n+/* { dg-final { scan-assembler-times \"vadd\\[^\\n\\]*\\\\\\{1to4\\\\\\}\" 2 } }  */\n+/* { dg-final { scan-assembler-times \"vadd\\[^\\n\\]*\\\\\\{1to8\\\\\\}\" 2 } }  */\n+/* { dg-final { scan-assembler-times \"vadd\\[^\\n\\]*\\\\\\{1to16\\\\\\}\" 1 } }  */\n+/* { dg-final { scan-assembler-times \"vsub\\[^\\n\\]*\\\\\\{1to2\\\\\\}\" 1 } }  */\n+/* { dg-final { scan-assembler-times \"vsub\\[^\\n\\]*\\\\\\{1to4\\\\\\}\" 2 } }  */\n+/* { dg-final { scan-assembler-times \"vsub\\[^\\n\\]*\\\\\\{1to8\\\\\\}\" 2 } }  */\n+/* { dg-final { scan-assembler-times \"vsub\\[^\\n\\]*\\\\\\{1to16\\\\\\}\" 1 } }  */\n+/* { dg-final { scan-assembler-times \"vmul\\[^\\n\\]*\\\\\\{1to2\\\\\\}\" 1 } }  */\n+/* { dg-final { scan-assembler-times \"vmul\\[^\\n\\]*\\\\\\{1to4\\\\\\}\" 2 } }  */\n+/* { dg-final { scan-assembler-times \"vmul\\[^\\n\\]*\\\\\\{1to8\\\\\\}\" 2 } }  */\n+/* { dg-final { scan-assembler-times \"vmul\\[^\\n\\]*\\\\\\{1to16\\\\\\}\" 1 } }  */\n+/* { dg-final { scan-assembler-times \"vdiv\\[^\\n\\]*\\\\\\{1to2\\\\\\}\" 1 } }  */\n+/* { dg-final { scan-assembler-times \"vdiv\\[^\\n\\]*\\\\\\{1to4\\\\\\}\" 2 } }  */\n+/* { dg-final { scan-assembler-times \"vdiv\\[^\\n\\]*\\\\\\{1to8\\\\\\}\" 2 } }  */\n+/* { dg-final { scan-assembler-times \"vdiv\\[^\\n\\]*\\\\\\{1to16\\\\\\}\" 1 } }  */\n+/* { dg-final { scan-assembler-times \"vfmadd\\[^\\n\\]*\\\\\\{1to2\\\\\\}\" 1 } }  */\n+/* { dg-final { scan-assembler-times \"vfmadd\\[^\\n\\]*\\\\\\{1to4\\\\\\}\" 2 } }  */\n+/* { dg-final { scan-assembler-times \"vfmadd\\[^\\n\\]*\\\\\\{1to8\\\\\\}\" 2 } }  */\n+/* { dg-final { scan-assembler-times \"vfmadd\\[^\\n\\]*\\\\\\{1to16\\\\\\}\" 1 } }  */\n+/* { dg-final { scan-assembler-times \"vfmsub\\[^\\n\\]*\\\\\\{1to2\\\\\\}\" 1 } }  */\n+/* { dg-final { scan-assembler-times \"vfmsub\\[^\\n\\]*\\\\\\{1to4\\\\\\}\" 2 } }  */\n+/* { dg-final { scan-assembler-times \"vfmsub\\[^\\n\\]*\\\\\\{1to8\\\\\\}\" 2 } }  */\n+/* { dg-final { scan-assembler-times \"vfmsub\\[^\\n\\]*\\\\\\{1to16\\\\\\}\" 1 } }  */\n+/* { dg-final { scan-assembler-times \"vfnmadd\\[^\\n\\]*\\\\\\{1to2\\\\\\}\" 1 } }  */\n+/* { dg-final { scan-assembler-times \"vfnmadd\\[^\\n\\]*\\\\\\{1to4\\\\\\}\" 2 } }  */\n+/* { dg-final { scan-assembler-times \"vfnmadd\\[^\\n\\]*\\\\\\{1to8\\\\\\}\" 2 } }  */\n+/* { dg-final { scan-assembler-times \"vfnmadd\\[^\\n\\]*\\\\\\{1to16\\\\\\}\" 1 } }  */\n+/* { dg-final { scan-assembler-times \"vfnmsub\\[^\\n\\]*\\\\\\{1to2\\\\\\}\" 1 } }  */\n+/* { dg-final { scan-assembler-times \"vfnmsub\\[^\\n\\]*\\\\\\{1to4\\\\\\}\" 2 } }  */\n+/* { dg-final { scan-assembler-times \"vfnmsub\\[^\\n\\]*\\\\\\{1to8\\\\\\}\" 2 } }  */\n+/* { dg-final { scan-assembler-times \"vfnmsub\\[^\\n\\]*\\\\\\{1to16\\\\\\}\" 1 } }  */\n+\n+#include<immintrin.h>\n+\n+#define CONSTANT 101\n+\n+#define FOO(VTYPE, OP_NAME, LEN, SUFFIX, MTYPE)\t\t\t\\\n+  VTYPE\t\t\t\t\t\t\t\t\t\\\n+  __attribute__ ((noipa))\t\t\t\t\t\t\\\n+  _mm##LEN##_foo_##OP_NAME##_##SUFFIX (VTYPE dst, VTYPE src, MTYPE m)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    return  _mm##LEN##_mask_##OP_NAME##_##SUFFIX (dst, m, src,\t\t\\\n+\t\t\t\t\t\t  _mm##LEN##_set1_##SUFFIX (CONSTANT)); \\\n+  }\t\t\t\t\t\t\t\t\t\\\n+\n+#define FOOZ(VTYPE, OP_NAME, LEN, SUFFIX, MTYPE)\t\t\t\\\n+  VTYPE\t\t\t\t\t\t\t\t\t\\\n+  __attribute__ ((noipa))\t\t\t\t\t\t\\\n+  _mm##LEN##_fooz_##OP_NAME##_##SUFFIX (VTYPE dst, VTYPE src, MTYPE m)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    return  _mm##LEN##_maskz_##OP_NAME##_##SUFFIX (m, dst, src,\t\t\\\n+\t\t\t\t\t\t  _mm##LEN##_set1_##SUFFIX (CONSTANT)); \\\n+  }\t\t\t\t\t\t\t\t\t\\\n+\n+FOO (__m512, add, 512, ps, __mmask16);\n+FOO (__m256, add, 256, ps, __mmask8);\n+FOO (__m128, add,, ps, __mmask8);\n+\n+FOO (__m512, sub, 512, ps, __mmask16);\n+FOO (__m256, sub, 256, ps, __mmask8);\n+FOO (__m128, sub,, ps, __mmask8);\n+\n+FOO (__m512, mul, 512, ps, __mmask16);\n+FOO (__m256, mul, 256, ps, __mmask8);\n+FOO (__m128, mul,, ps, __mmask8);\n+\n+FOO (__m512, div, 512, ps, __mmask16);\n+FOO (__m256, div, 256, ps, __mmask8);\n+FOO (__m128, div,, ps, __mmask8);\n+\n+FOOZ (__m512, fmadd, 512, ps, __mmask16);\n+FOOZ (__m256, fmadd, 256, ps, __mmask8);\n+FOOZ (__m128, fmadd,, ps, __mmask8);\n+\n+FOOZ (__m512, fmsub, 512, ps, __mmask16);\n+FOOZ (__m256, fmsub, 256, ps, __mmask8);\n+FOOZ (__m128, fmsub,, ps, __mmask8);\n+\n+FOOZ (__m512, fnmadd, 512, ps, __mmask16);\n+FOOZ (__m256, fnmadd, 256, ps, __mmask8);\n+FOOZ (__m128, fnmadd,, ps, __mmask8);\n+\n+FOOZ (__m512, fnmsub, 512, ps, __mmask16);\n+FOOZ (__m256, fnmsub, 256, ps, __mmask8);\n+FOOZ (__m128, fnmsub,, ps, __mmask8);\n+\n+FOO (__m512d, add, 512, pd, __mmask8);\n+FOO (__m256d, add, 256, pd, __mmask8);\n+FOO (__m128d, add,, pd, __mmask8);\n+\n+FOO (__m512d, sub, 512, pd, __mmask8);\n+FOO (__m256d, sub, 256, pd, __mmask8);\n+FOO (__m128d, sub,, pd, __mmask8);\n+\n+FOO (__m512d, mul, 512, pd, __mmask8);\n+FOO (__m256d, mul, 256, pd, __mmask8);\n+FOO (__m128d, mul,, pd, __mmask8);\n+\n+FOO (__m512d, div, 512, pd, __mmask8);\n+FOO (__m256d, div, 256, pd, __mmask8);\n+FOO (__m128d, div,, pd, __mmask8);\n+\n+FOOZ (__m512d, fmadd, 512, pd, __mmask8);\n+FOOZ (__m256d, fmadd, 256, pd, __mmask8);\n+FOOZ (__m128d, fmadd,, pd, __mmask8);\n+\n+FOOZ (__m512d, fmsub, 512, pd, __mmask8);\n+FOOZ (__m256d, fmsub, 256, pd, __mmask8);\n+FOOZ (__m128d, fmsub,, pd, __mmask8);\n+\n+FOOZ (__m512d, fnmadd, 512, pd, __mmask8);\n+FOOZ (__m256d, fnmadd, 256, pd, __mmask8);\n+FOOZ (__m128d, fnmadd,, pd, __mmask8);\n+\n+FOOZ (__m512d, fnmsub, 512, pd, __mmask8);\n+FOOZ (__m256d, fnmsub, 256, pd, __mmask8);\n+FOOZ (__m128d, fnmsub,, pd, __mmask8);"}, {"sha": "397e287134c505d16d8960b5c25d893ac1c699ae", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-broadcast-pr87767-1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-broadcast-pr87767-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-broadcast-pr87767-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-broadcast-pr87767-1.c?ref=433734126996b6fc4fc99b594421510f928a7bb9", "patch": "@@ -0,0 +1,45 @@\n+/* PR target/87767 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f -mavx512vl -mavx512dq\" } */\n+/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to2\\\\\\}\" 5 } }  */\n+/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to4\\\\\\}\" 10 } }  */\n+/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to8\\\\\\}\" 5 } }  */\n+\n+typedef int v4si  __attribute__ ((vector_size (16)));\n+typedef int v8si  __attribute__ ((vector_size (32)));\n+typedef long long v2di  __attribute__ ((vector_size (16)));\n+typedef long long v4di  __attribute__ ((vector_size (32)));\n+typedef float v4sf  __attribute__ ((vector_size (16)));\n+typedef float v8sf  __attribute__ ((vector_size (32)));\n+typedef double v2df  __attribute__ ((vector_size (16)));\n+typedef double v4df  __attribute__ ((vector_size (32)));\n+\n+#define CONSTANT 101;\n+#define FOO(VTYPE, OP_NAME, OP)\t\t\t\\\n+VTYPE\t\t\t\t\t\t\\\n+ __attribute__ ((noipa))\t\t\t\\\n+foo_##OP_NAME##_##VTYPE (VTYPE a)\t\t\\\n+{\t\t\t\t\t\t\\\n+  return a OP CONSTANT;\t\t\t\t\\\n+}\t\t\t\t\t\t\\\n+\n+FOO (v4si, add, +);\n+FOO (v8si, add, +);\n+FOO (v2di, add, +);\n+FOO (v4di, add, +);\n+FOO (v4si, sub, -);\n+FOO (v8si, sub, -);\n+FOO (v2di, sub, -);\n+FOO (v4di, sub, -);\n+FOO (v4sf, add, +);\n+FOO (v8sf, add, +);\n+FOO (v2df, add, +);\n+FOO (v4df, add, +);\n+FOO (v4si, mul, *);\n+FOO (v8si, mul, *);\n+FOO (v2di, mul, *);\n+FOO (v4di, mul, *);\n+FOO (v4sf, mul, *);\n+FOO (v8sf, mul, *);\n+FOO (v2df, mul, *);\n+FOO (v4df, mul, *);"}, {"sha": "9b796ac7124caa6a028d27660fd9a3d7eac2ebde", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-broadcast-pr87767-2.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-broadcast-pr87767-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-broadcast-pr87767-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-broadcast-pr87767-2.c?ref=433734126996b6fc4fc99b594421510f928a7bb9", "patch": "@@ -0,0 +1,59 @@\n+/* PR target/87767 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f -mavx512dq -mavx512vl\" } */\n+/* { dg-require-effective-target avx512dq } */\n+/* { dg-require-effective-target avx512vl } */\n+\n+#define AVX512DQ\n+#define AVX512VL\n+#include \"avx512f-helper.h\"\n+\n+#include \"avx512vl-broadcast-pr87767-1.c\"\n+\n+#define RTEST(VTYPE, TYPE, N, OP_NAME, OP)\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      TYPE exp[N], src[N];\t\t\t\t\\\n+      VTYPE res;\t\t\t\t\t\\\n+      for (int i = 0; i < N; i++)\t\t\t\\\n+\tsrc[i] = i * i * 107;\t\t\t\t\\\n+      res = foo_##OP_NAME##_##VTYPE (*(VTYPE*)&src[0]);\t\\\n+      for (int i = 0; i < N; i ++)\t\t\t\\\n+\texp[i] = src[i] OP CONSTANT;\t\t\t\\\n+      for (int j = 0; j < N; j++)\t\t\t\\\n+\t{\t\t\t\t\t\t\\\n+\t  if (res[j] != exp[j])\t\t\t\t\\\n+\t    abort();\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+void\n+test_256 (void)\n+{\n+  RTEST (v8si, int, 8, add, +);\n+  RTEST (v4di, long long, 4, add, +);\n+  RTEST (v8sf, float, 8, add, +);\n+  RTEST (v4df, double, 4, add, +);\n+  RTEST (v8si, int, 8, sub, -);\n+  RTEST (v4di, long long, 4, sub, -);\n+  RTEST (v8si, int, 8, mul, *);\n+  RTEST (v4di, long long, 4, mul, *);\n+  RTEST (v8sf, float, 8, mul, *);\n+  RTEST (v4df, double, 4, mul, *);\n+}\n+\n+void\n+test_128 (void)\n+{\n+  RTEST (v4si, int, 4, add, +);\n+  RTEST (v2di, long long, 2, add, +);\n+  RTEST (v4sf, float, 4, add, +);\n+  RTEST (v2df, double, 2, add, +);\n+  RTEST (v4si, int, 4, sub, -);\n+  RTEST (v2di, long long, 2, sub, -);\n+  RTEST (v4si, int, 4, mul, *);\n+  RTEST (v2di, long long, 2, mul, *);\n+  RTEST (v4sf, float, 4, mul, *);\n+  RTEST (v2df, double, 2, mul, *);\n+}"}, {"sha": "aedfb16016ef96ba14ee43f7d502603857965441", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-broadcast-pr87767-3.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-broadcast-pr87767-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-broadcast-pr87767-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-broadcast-pr87767-3.c?ref=433734126996b6fc4fc99b594421510f928a7bb9", "patch": "@@ -0,0 +1,37 @@\n+/* PR target/87767 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f -mavx512vl\" } */\n+/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to2\\\\\\}\" 4 } }  */\n+/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to4\\\\\\}\" 8 } }  */\n+/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to8\\\\\\}\" 4 } }  */\n+\n+typedef float v4sf  __attribute__ ((vector_size (16)));\n+typedef float v8sf  __attribute__ ((vector_size (32)));\n+typedef double v2df  __attribute__ ((vector_size (16)));\n+typedef double v4df  __attribute__ ((vector_size (32)));\n+\n+#define CONSTANT 101;\n+#define FOO(VTYPE, OP_NAME, OP1, OP2)\t\t\\\n+VTYPE\t\t\t\t\t\t\\\n+ __attribute__ ((noipa))\t\t\t\\\n+ foo_##OP_NAME##_##VTYPE (VTYPE a, VTYPE b)\t\\\n+{\t\t\t\t\t\t\\\n+  return (OP1 a * b) OP2 CONSTANT;\t\t\\\n+}\t\t\t\t\t\t\\\n+\n+FOO (v4sf, fma,, +);\n+FOO (v8sf, fma,, +);\n+FOO (v2df, fma,, +);\n+FOO (v4df, fma,, +);\n+FOO (v4sf, fms,, -);\n+FOO (v8sf, fms,, -);\n+FOO (v2df, fms,, -);\n+FOO (v4df, fms,, -);\n+FOO (v4sf, fnma, -, +);\n+FOO (v8sf, fnma, -, +);\n+FOO (v2df, fnma, -, +);\n+FOO (v4df, fnma, -, +);\n+FOO (v4sf, fnms, -, -);\n+FOO (v8sf, fnms, -, -);\n+FOO (v2df, fnms, -, -);\n+FOO (v4df, fnms, -, -);"}, {"sha": "40b8eb9929dabe37e890138e97ecdef70e3afbdb", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-broadcast-pr87767-4.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-broadcast-pr87767-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-broadcast-pr87767-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-broadcast-pr87767-4.c?ref=433734126996b6fc4fc99b594421510f928a7bb9", "patch": "@@ -0,0 +1,56 @@\n+/* PR target/87767 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f -mavx512vl\" } */\n+/* { dg-require-effective-target avx512vl } */\n+\n+#define AVX512VL\n+#include \"avx512f-helper.h\"\n+\n+#include \"avx512vl-broadcast-pr87767-3.c\"\n+\n+#define RTEST(VTYPE, TYPE, N, OP_NAME, OP1, OP2)\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      TYPE exp[N], src1[N], src2[N];\t\t\t\t\t\\\n+      VTYPE res;\t\t\t\t\t\t\t\\\n+      for (int i = 0; i < N; i++)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  src1[i] = i * i * 107.2f;\t\t\t\t\t\\\n+\t  src2[i] = i * 2.f - 404.f;\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      res = foo_##OP_NAME##_##VTYPE (*(VTYPE*)&src1[0], *(VTYPE*)&src2[0]); \\\n+      for (int i = 0; i < N; i ++)\t\t\t\t\t\\\n+\texp[i] = (OP1 src1[i] * src2[i]) OP2 CONSTANT;\t\t\t\\\n+      for (int j = 0; j < N; j++)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  if (res[j] != exp[j])\t\t\t\t\t\t\\\n+\t    abort();\t\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+void\n+test_256 (void)\n+{\n+  RTEST (v8sf, float, 8, fma,, +);\n+  RTEST (v4df, double, 4, fma,, +);\n+  RTEST (v8sf, float, 8, fms,, -);\n+  RTEST (v4df, double, 4, fms,, -);\n+  RTEST (v8sf, float, 8, fnma,-, +);\n+  RTEST (v4df, double, 4, fnma,-, +);\n+  RTEST (v8sf, float, 8, fnms,-, -);\n+  RTEST (v4df, double, 4, fnms,-, -);\n+}\n+\n+void\n+test_128 (void)\n+{\n+  RTEST (v4sf, float, 4, fma,, +);\n+  RTEST (v2df, double, 2, fma,, +);\n+  RTEST (v4sf, float, 4, fms,, -);\n+  RTEST (v2df, double, 2, fms,, -);\n+  RTEST (v4sf, float, 4, fnma,-, +);\n+  RTEST (v2df, double, 2, fnma,-, +);\n+  RTEST (v4sf, float, 4, fnms,-, -);\n+  RTEST (v2df, double, 2, fnms,-, -);\n+}"}, {"sha": "1e9460faa9d012e04ebe87448554fdde1ad7c3a1", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-broadcast-pr87767-5.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-broadcast-pr87767-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-broadcast-pr87767-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-broadcast-pr87767-5.c?ref=433734126996b6fc4fc99b594421510f928a7bb9", "patch": "@@ -0,0 +1,37 @@\n+/* PR target/87767 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f -mavx512vl\" } */\n+/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to2\\\\\\}\" 4 } }  */\n+/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to4\\\\\\}\" 8 } }  */\n+/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to8\\\\\\}\" 4 } }  */\n+\n+typedef int v4si  __attribute__ ((vector_size (16)));\n+typedef int v8si  __attribute__ ((vector_size (32)));\n+typedef long long v2di  __attribute__ ((vector_size (16)));\n+typedef long long v4di  __attribute__ ((vector_size (32)));\n+\n+#define CONSTANT 101;\n+#define FOO(VTYPE, OP_NAME, OP1, OP2)\t\t\\\n+VTYPE\t\t\t\t\t\t\\\n+ __attribute__ ((noipa))\t\t\t\\\n+ foo_##OP_NAME##_##VTYPE (VTYPE a)\t\t\\\n+{\t\t\t\t\t\t\\\n+  return (OP1 a) OP2 CONSTANT;\t\t\t\\\n+}\t\t\t\t\t\t\\\n+\n+FOO (v4si, andnot, ~, &);\n+FOO (v8si, andnot, ~, &);\n+FOO (v2di, andnot, ~, &);\n+FOO (v4di, andnot, ~, &);\n+FOO (v4si, and,, &);\n+FOO (v8si, and,, &);\n+FOO (v2di, and,, &);\n+FOO (v4di, and,, &);\n+FOO (v4si, or,, |);\n+FOO (v8si, or,, |);\n+FOO (v2di, or,, |);\n+FOO (v4di, or,, |);\n+FOO (v4si, xor,, ^);\n+FOO (v8si, xor,, ^);\n+FOO (v2di, xor,, ^);\n+FOO (v4di, xor,, ^);"}, {"sha": "493a76f09178e7259f3a505672128a79b45737d2", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-broadcast-pr87767-6.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-broadcast-pr87767-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/433734126996b6fc4fc99b594421510f928a7bb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-broadcast-pr87767-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-broadcast-pr87767-6.c?ref=433734126996b6fc4fc99b594421510f928a7bb9", "patch": "@@ -0,0 +1,55 @@\n+/* PR target/87767 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f -mavx512vl\" } */\n+/* { dg-require-effective-target avx512vl } */\n+\n+#define AVX512VL\n+#include \"avx512f-helper.h\"\n+\n+#include \"avx512vl-broadcast-pr87767-5.c\"\n+\n+#define RTEST(VTYPE, TYPE, N, OP_NAME, OP1, OP2)\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      TYPE exp[N], src[N];\t\t\t\t\t\t\\\n+      VTYPE res;\t\t\t\t\t\t\t\\\n+      for (int i = 0; i < N; i++)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  src[i] = i * i * 107;\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      res = foo_##OP_NAME##_##VTYPE (*(VTYPE*)&src[0]);\t\t\t\\\n+      for (int i = 0; i < N; i ++)\t\t\t\t\t\\\n+\texp[i] = (OP1 src[i]) OP2 CONSTANT;\t\t\t\t\\\n+      for (int j = 0; j < N; j++)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  if (res[j] != exp[j])\t\t\t\t\t\t\\\n+\t    abort();\t\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+void\n+test_256 (void)\n+{\n+  RTEST (v8si, int, 8, andnot, ~, &);\n+  RTEST (v4di, long long, 4, andnot, ~, &);\n+  RTEST (v8si, int, 8, and,, &);\n+  RTEST (v4di, long long, 4, and,, &);\n+  RTEST (v8si, int, 8, or,, |);\n+  RTEST (v4di, long long, 4, or,, |);\n+  RTEST (v8si, int, 8, xor,, ^);\n+  RTEST (v4di, long long, 4, xor,, ^);\n+}\n+\n+void\n+test_128 (void)\n+{\n+  RTEST (v4si, int, 4, andnot, ~, &);\n+  RTEST (v2di, long long, 2, andnot, ~, &);\n+  RTEST (v4si, int, 4, and,, &);\n+  RTEST (v2di, long long, 2, and,, &);\n+  RTEST (v4si, int, 4, or,, |);\n+  RTEST (v2di, long long, 2, or,, |);\n+  RTEST (v4si, int, 4, xor,, ^);\n+  RTEST (v2di, long long, 2, xor,, ^);\n+}"}]}