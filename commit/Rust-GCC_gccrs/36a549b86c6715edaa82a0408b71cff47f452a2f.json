{"sha": "36a549b86c6715edaa82a0408b71cff47f452a2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZhNTQ5Yjg2YzY3MTVlZGFhODJhMDQwOGI3MWNmZjQ3ZjQ1MmEyZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2010-06-01T13:00:50Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-01T13:00:50Z"}, "message": "Make-lang.in (CXX_C_OBJS): Add c-ada-spec.o.\n\n\t* Make-lang.in (CXX_C_OBJS): Add c-ada-spec.o.\n\t* decl2.c: Include langhooks.h and c-ada-spec.h.\n\t(cpp_check, collect_source_refs, collect_ada_namespace,\n\tcollect_all_refs): New functions.\n\t(cp_write_global_declarations): Add handling of -fdump-ada-spec.\n\t* lang-specs.h: Ditto.\n\nCo-Authored-By: Matthew Gingell <gingell@adacore.com>\n\nFrom-SVN: r160103", "tree": {"sha": "470146bbc9214ca527e017d227b62dd71f65fc97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/470146bbc9214ca527e017d227b62dd71f65fc97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36a549b86c6715edaa82a0408b71cff47f452a2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36a549b86c6715edaa82a0408b71cff47f452a2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36a549b86c6715edaa82a0408b71cff47f452a2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36a549b86c6715edaa82a0408b71cff47f452a2f/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0641fa9781e8cd257e0113360bef387bcbfd4b96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0641fa9781e8cd257e0113360bef387bcbfd4b96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0641fa9781e8cd257e0113360bef387bcbfd4b96"}], "stats": {"total": 103, "additions": 99, "deletions": 4}, "files": [{"sha": "b7d3e2d6b0ec28fb5fae5815686dfede55684b1f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a549b86c6715edaa82a0408b71cff47f452a2f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a549b86c6715edaa82a0408b71cff47f452a2f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=36a549b86c6715edaa82a0408b71cff47f452a2f", "patch": "@@ -1,3 +1,13 @@\n+2010-06-01  Arnaud Charlet  <charlet@adacore.com>\n+\t    Matthew Gingell  <gingell@adacore.com>\n+\n+\t* Make-lang.in (CXX_C_OBJS): Add c-ada-spec.o.\n+\t* decl2.c: Include langhooks.h and c-ada-spec.h.\n+\t(cpp_check, collect_source_refs, collect_ada_namespace,\n+\tcollect_all_refs): New functions.\n+\t(cp_write_global_declarations): Add handling of -fdump-ada-spec.\n+\t* lang-specs.h: Ditto.\n+\n 2010-05-29  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* cp-tree.h (cp_build_function_call_nary): Declare."}, {"sha": "d726ead2d8014bd62d899a9195701a7293869f68", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a549b86c6715edaa82a0408b71cff47f452a2f/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a549b86c6715edaa82a0408b71cff47f452a2f/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=36a549b86c6715edaa82a0408b71cff47f452a2f", "patch": "@@ -74,7 +74,7 @@ g++-cross$(exeext): g++$(exeext)\n CXX_C_OBJS = attribs.o c-common.o c-format.o c-pragma.o c-semantics.o c-lex.o \\\n \tc-dump.o $(CXX_TARGET_OBJS) c-pretty-print.o c-opts.o c-pch.o \\\n \tincpath.o c-ppoutput.o c-cppbuiltin.o prefix.o \\\n-\tc-gimplify.o c-omp.o\n+\tc-gimplify.o c-omp.o c-ada-spec.o\n \n # Language-specific object files for C++ and Objective C++.\n CXX_AND_OBJCXX_OBJS = cp/call.o cp/decl.o cp/expr.o cp/pt.o cp/typeck2.o \\\n@@ -260,7 +260,7 @@ cp/decl.o: cp/decl.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) cp/decl.h \\\n cp/decl2.o: cp/decl2.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) cp/decl.h \\\n   output.h $(EXCEPT_H) toplev.h $(C_COMMON_H) gt-cp-decl2.h $(CGRAPH_H) \\\n   $(C_PRAGMA_H) $(TREE_DUMP_H) intl.h $(TARGET_H) $(GIMPLE_H) $(POINTER_SET_H) \\\n-  $(SPLAY_TREE_H)\n+  $(SPLAY_TREE_H) c-ada-spec.h\n cp/cp-objcp-common.o : cp/cp-objcp-common.c $(CONFIG_H) $(SYSTEM_H) \\\n   coretypes.h $(TM_H) $(TREE_H) $(CXX_TREE_H) $(C_COMMON_H) toplev.h \\\n   langhooks.h $(LANGHOOKS_DEF_H) $(DIAGNOSTIC_H) debug.h \\"}, {"sha": "33e0e265819bb05188c4794b69172a837a6d36fa", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 85, "deletions": 1, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a549b86c6715edaa82a0408b71cff47f452a2f/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a549b86c6715edaa82a0408b71cff47f452a2f/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=36a549b86c6715edaa82a0408b71cff47f452a2f", "patch": "@@ -1,6 +1,6 @@\n /* Process declarations and variables for C++ compiler.\n    Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n    Hacked by Michael Tiemann (tiemann@cygnus.com)\n \n@@ -52,6 +52,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple.h\"\n #include \"pointer-set.h\"\n #include \"splay-tree.h\"\n+#include \"langhooks.h\"\n+#include \"c-ada-spec.h\"\n \n extern cpp_reader *parse_in;\n \n@@ -3461,6 +3463,69 @@ build_java_method_aliases (struct pointer_set_t *candidates)\n     }\n }\n \n+/* Return C++ property of T, based on given operation OP.  */\n+\n+static int\n+cpp_check (tree t, cpp_operation op)\n+{\n+  switch (op)\n+    {\n+      case IS_ABSTRACT:\n+\treturn DECL_PURE_VIRTUAL_P (t);\n+      case IS_CONSTRUCTOR:\n+\treturn DECL_CONSTRUCTOR_P (t);\n+      case IS_DESTRUCTOR:\n+\treturn DECL_DESTRUCTOR_P (t);\n+      case IS_COPY_CONSTRUCTOR:\n+\treturn DECL_COPY_CONSTRUCTOR_P (t);\n+      case IS_TEMPLATE:\n+\treturn TREE_CODE (t) == TEMPLATE_DECL;\n+      default:\n+        return 0;\n+    }\n+}\n+\n+/* Collect source file references recursively, starting from NAMESPC.  */\n+\n+static void \n+collect_source_refs (tree namespc) \n+{\n+  tree t;\n+\n+  if (!namespc) \n+    return;\n+\n+  /* Iterate over names in this name space.  */\n+  for (t = NAMESPACE_LEVEL (namespc)->names; t; t = TREE_CHAIN (t))\n+    if (!DECL_IS_BUILTIN (t) )\n+      collect_source_ref (DECL_SOURCE_FILE (t));\n+  \n+  /* Dump siblings, if any */\n+  collect_source_refs (TREE_CHAIN (namespc));\n+\n+  /* Dump children, if any */\n+  collect_source_refs (NAMESPACE_LEVEL (namespc)->namespaces);\n+}\n+\n+/* Collect decls relevant to SOURCE_FILE from all namespaces recursively,\n+   starting from NAMESPC.  */\n+\n+static void\n+collect_ada_namespace (tree namespc, const char *source_file)\n+{\n+  if (!namespc)\n+    return;\n+\n+  /* Collect decls from this namespace */\n+  collect_ada_nodes (NAMESPACE_LEVEL (namespc)->names, source_file);\n+\n+  /* Collect siblings, if any */\n+  collect_ada_namespace (TREE_CHAIN (namespc), source_file);\n+\n+  /* Collect children, if any */\n+  collect_ada_namespace (NAMESPACE_LEVEL (namespc)->namespaces, source_file);\n+}\n+\n /* Returns true iff there is a definition available for variable or\n    function DECL.  */\n \n@@ -3495,6 +3560,14 @@ no_linkage_error (tree decl)\n \t       \"is used but never defined\", decl, t);\n }\n \n+/* Collect declarations from all namespaces relevant to SOURCE_FILE.  */\n+\n+static void\n+collect_all_refs (const char *source_file)\n+{\n+  collect_ada_namespace (global_namespace, source_file);\n+}\n+\n /* This routine is called at the end of compilation.\n    Its job is to create all the code needed to initialize and\n    destroy the global aggregates.  We do the destruction\n@@ -3522,6 +3595,17 @@ cp_write_global_declarations (void)\n   if (pch_file)\n     c_common_write_pch ();\n \n+  /* Handle -fdump-ada-spec[-slim] */\n+  if (dump_enabled_p (TDI_ada))\n+    {\n+      if (get_dump_file_info (TDI_ada)->flags & TDF_SLIM)\n+\tcollect_source_ref (main_input_filename);\n+      else\n+\tcollect_source_refs (global_namespace);\n+\n+      dump_ada_specs (collect_all_refs, cpp_check);\n+    }\n+\n   /* FIXME - huh?  was  input_line -= 1;*/\n \n   /* We now have to write out all the stuff we put off writing out."}, {"sha": "8aa3adf61a7d026b0012a7752da31fc04baa2014", "filename": "gcc/cp/lang-specs.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a549b86c6715edaa82a0408b71cff47f452a2f/gcc%2Fcp%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a549b86c6715edaa82a0408b71cff47f452a2f/gcc%2Fcp%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-specs.h?ref=36a549b86c6715edaa82a0408b71cff47f452a2f", "patch": "@@ -48,7 +48,8 @@ along with GCC; see the file COPYING3.  If not see\n       cc1plus %{save-temps|no-integrated-cpp:-fpreprocessed %{save-temps:%b.ii} %{!save-temps:%g.ii}}\\\n \t      %{!save-temps:%{!no-integrated-cpp:%(cpp_unique_options)}}\\\n \t%(cc1_options) %2 %{+e1*}\\\n-\t%{!fsyntax-only:-o %g.s %{!o*:--output-pch=%i.gch} %W{o*:--output-pch=%*}%V}}}}\",\n+\t%{!fsyntax-only:%{!fdump-ada-spec*:-o %g.s %{!o*:--output-pch=%i.gch}\\\n+        %W{o*:--output-pch=%*}}%V}}}}\",\n      CPLUSPLUS_CPP_SPEC, 0, 0},\n   {\"@c++\",\n     \"%{E|M|MM:cc1plus -E %(cpp_options) %2 %(cpp_debug_options)}\\"}]}