{"sha": "2500add25bd3258a66cc7ae199ab7eae53cc3202", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjUwMGFkZDI1YmQzMjU4YTY2Y2M3YWUxOTlhYjdlYWU1M2NjMzIwMg==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-05T18:26:25Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-05T18:26:25Z"}, "message": "VAX: Use an int iterator to produce individual interlocked branches\n\nWith mode-specific interlocked branch insns already folded into iterated\ntemplates now fold the two templates into one too, observing that the\nonly difference between them is the value of the bit branched on, which\nis of course reflected both in the RTL expression and the instruction\nproduced.  Use an int iterator to iterate over the bit value, making use\nof the newly-added wide integer support, and substituting patterns as\nnecessary to produce equivalent individual insns.  No functional change.\n\n\tgcc/\n\t* config/vax/builtins.md (bit): New int iterator.\n\t(ccss): New int attribute.\n\t(jbbssi<mode>, jbbcci<mode>): Fold insns into...\n\t(jbb<ccss>i<mode>): ... this.", "tree": {"sha": "a3d53972f71ebb193ec0347715bcdd125b7f53b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3d53972f71ebb193ec0347715bcdd125b7f53b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2500add25bd3258a66cc7ae199ab7eae53cc3202", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2500add25bd3258a66cc7ae199ab7eae53cc3202", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2500add25bd3258a66cc7ae199ab7eae53cc3202", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2500add25bd3258a66cc7ae199ab7eae53cc3202/comments", "author": null, "committer": null, "parents": [{"sha": "47d524a636a00be5a7a2c65b1c7dc5beaa9bc1e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47d524a636a00be5a7a2c65b1c7dc5beaa9bc1e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47d524a636a00be5a7a2c65b1c7dc5beaa9bc1e7"}], "stats": {"total": 29, "additions": 7, "deletions": 22}, "files": [{"sha": "8bbcd603d13c4f2ac3d6048b4c007f3fc3be2dff", "filename": "gcc/config/vax/builtins.md", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2500add25bd3258a66cc7ae199ab7eae53cc3202/gcc%2Fconfig%2Fvax%2Fbuiltins.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2500add25bd3258a66cc7ae199ab7eae53cc3202/gcc%2Fconfig%2Fvax%2Fbuiltins.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fbuiltins.md?ref=2500add25bd3258a66cc7ae199ab7eae53cc3202", "patch": "@@ -26,6 +26,9 @@\n \n (define_mode_attr bb_mem [(QI \"m\") (HI \"Q\") (SI \"Q\")])\n \n+(define_int_iterator bit [0 1])\n+(define_int_attr ccss [(0 \"cc\") (1 \"ss\")])\n+\n (define_expand \"ffssi2\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n \t(ffs:SI (match_operand:SI 1 \"general_operand\" \"\")))]\n@@ -75,24 +78,6 @@\n   DONE;\n }\")\n \n-(define_insn \"jbbssi<mode>\"\n-  [(parallel\n-    [(set (pc)\n-\t  (if_then_else\n-\t    (eq (zero_extract:SI\n-\t\t  (match_operand:VAXint 0 \"memory_operand\" \"<bb_mem>\")\n-\t\t  (const_int 1)\n-\t\t  (match_operand:SI 1 \"general_operand\" \"nrmT\"))\n-\t\t(const_int 1))\n-\t    (label_ref (match_operand 2 \"\" \"\"))\n-\t    (pc)))\n-     (set (zero_extract:SI (match_operand:VAXint 3 \"memory_operand\" \"+0\")\n-\t\t\t   (const_int 1)\n-\t\t\t   (match_dup 1))\n-\t  (const_int 1))])]\n-  \"\"\n-  \"jbssi %1,%0,%l2\")\n-\n (define_expand \"sync_lock_release<mode>\"\n   [(set (match_operand:VAXint 0 \"memory_operand\" \"+m\")\n \t(unspec:VAXint [(match_operand:VAXint 1 \"const_int_operand\" \"n\")\n@@ -113,20 +98,20 @@\n   DONE;\n }\")\n \n-(define_insn \"jbbcci<mode>\"\n+(define_insn \"jbb<ccss>i<mode>\"\n   [(parallel\n     [(set (pc)\n \t  (if_then_else\n \t    (eq (zero_extract:SI\n \t\t  (match_operand:VAXint 0 \"memory_operand\" \"<bb_mem>\")\n \t\t  (const_int 1)\n \t\t  (match_operand:SI 1 \"general_operand\" \"nrmT\"))\n-\t\t(const_int 0))\n+\t\t(const_int bit))\n \t    (label_ref (match_operand 2 \"\" \"\"))\n \t    (pc)))\n      (set (zero_extract:SI (match_operand:VAXint 3 \"memory_operand\" \"+0\")\n \t\t\t   (const_int 1)\n \t\t\t   (match_dup 1))\n-\t  (const_int 0))])]\n+\t  (const_int bit))])]\n   \"\"\n-  \"jbcci %1,%0,%l2\")\n+  \"jb<ccss>i %1,%0,%l2\")"}]}