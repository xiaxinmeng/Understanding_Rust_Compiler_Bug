{"sha": "facb3fd7396177cc3848b478b9eb519a35880d17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFjYjNmZDczOTYxNzdjYzM4NDhiNDc4YjllYjUxOWEzNTg4MGQxNw==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2011-10-05T03:25:58Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2011-10-05T03:25:58Z"}, "message": "Add support for more sparc VIS 3.0 instructions.\n\ngcc/\n\n\t* config/sparc/sparc.md (UNSPEC_FHADD, UNSPEC_FHSUB,\n\tUNSPEC_XMUL): New unspecs.\n\t(muldi3_v8plus): Use output_v8plus_mult.\n\t(*naddsf3, *nadddf3, *nmulsf3, *nmuldf3, *nmuldf3_extend):\n\tNew VIS 3.0 combiner patterns.\n\t(fhaddsf_vis, fhadddf_vis, fhsubsf_vis, fhsubdf_vis,\n\tfnhaddsf_vis, fnhaddf_vis, umulxhi_vis, *umulxhi_sp64,\n\tumulxhi_v8plus, xmulx_vis, *xmulx_sp64, xmulx_v8plus,\n\txmulxhi_vis, *xmulxhi_sp64, xmulxhi_v8plus): New VIS 3.0\n\tbuiltins patterns.\n\t* config/sparc/sparc.c (sparc_vis_init_builtins): Emit new\n\tbuiltins.\n\t(output_v8plus_mult): New function.\n\t* config/sparc/sparc-protos.h: Declare it.\n\t* config/sparc/visintrin.h (__vis_fhadds, __vis_fhaddd,\n\t__vis_fhsubs, __vis_fhsubd, __vis_fnhadds, __vis_fnhaddd,\n\t__vis_umulxhi, __vis_xmulx, __vis_xmulxhi): New intrinsics.\n\t* doc/extend.texi: Document new builtins.\n\ngcc/testsuite/\n\n\t* gcc.target/sparc/fhalve.c: New test.\n\t* gcc.target/sparc/fnegop.c: New test.\n\t* gcc.target/sparc/xmul.c: New test.\n\nFrom-SVN: r179535", "tree": {"sha": "f56c0b3f86df653060f61867af4fe2356e877df6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f56c0b3f86df653060f61867af4fe2356e877df6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/facb3fd7396177cc3848b478b9eb519a35880d17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/facb3fd7396177cc3848b478b9eb519a35880d17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/facb3fd7396177cc3848b478b9eb519a35880d17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/facb3fd7396177cc3848b478b9eb519a35880d17/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9a83cdf714fd303af875ee549ad01f75ce32920d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a83cdf714fd303af875ee549ad01f75ce32920d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a83cdf714fd303af875ee549ad01f75ce32920d"}], "stats": {"total": 568, "additions": 542, "deletions": 26}, "files": [{"sha": "b108c01f25e85523f55b576e50b092e8fe9d0d22", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facb3fd7396177cc3848b478b9eb519a35880d17/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facb3fd7396177cc3848b478b9eb519a35880d17/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=facb3fd7396177cc3848b478b9eb519a35880d17", "patch": "@@ -1,3 +1,24 @@\n+2011-10-04  David S. Miller  <davem@davemloft.net>\n+\n+\t* config/sparc/sparc.md (UNSPEC_FHADD, UNSPEC_FHSUB,\n+\tUNSPEC_XMUL): New unspecs.\n+\t(muldi3_v8plus): Use output_v8plus_mult.\n+\t(*naddsf3, *nadddf3, *nmulsf3, *nmuldf3, *nmuldf3_extend):\n+\tNew VIS 3.0 combiner patterns.\n+\t(fhaddsf_vis, fhadddf_vis, fhsubsf_vis, fhsubdf_vis,\n+\tfnhaddsf_vis, fnhaddf_vis, umulxhi_vis, *umulxhi_sp64,\n+\tumulxhi_v8plus, xmulx_vis, *xmulx_sp64, xmulx_v8plus,\n+\txmulxhi_vis, *xmulxhi_sp64, xmulxhi_v8plus): New VIS 3.0\n+\tbuiltins patterns.\n+\t* config/sparc/sparc.c (sparc_vis_init_builtins): Emit new\n+\tbuiltins.\n+\t(output_v8plus_mult): New function.\n+\t* config/sparc/sparc-protos.h: Declare it.\n+\t* config/sparc/visintrin.h (__vis_fhadds, __vis_fhaddd,\n+\t__vis_fhsubs, __vis_fhsubd, __vis_fnhadds, __vis_fnhaddd,\n+\t__vis_umulxhi, __vis_xmulx, __vis_xmulxhi): New intrinsics.\n+\t* doc/extend.texi: Document new builtins.\n+\n 2011-10-04  Richard Henderson  <rth@redhat.com>\n \n \t* c-typeck.c (c_build_vec_shuffle_expr): Fix uninitialized variable."}, {"sha": "f7b563eda9dd33897f6963a21b88c8281c1fe820", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facb3fd7396177cc3848b478b9eb519a35880d17/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facb3fd7396177cc3848b478b9eb519a35880d17/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=facb3fd7396177cc3848b478b9eb519a35880d17", "patch": "@@ -105,6 +105,7 @@ extern int v9_regcmp_p (enum rtx_code);\n extern int sparc_check_64 (rtx, rtx);\n extern rtx gen_df_reg (rtx, int);\n extern void sparc_expand_compare_and_swap_12 (rtx, rtx, rtx, rtx);\n+extern const char *output_v8plus_mult (rtx, rtx *, const char *);\n #endif /* RTX_CODE */\n \n #endif /* __SPARC_PROTOS_H__ */"}, {"sha": "b2cbdd28e039049b1579b3d3446595e20a42e10d", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facb3fd7396177cc3848b478b9eb519a35880d17/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facb3fd7396177cc3848b478b9eb519a35880d17/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=facb3fd7396177cc3848b478b9eb519a35880d17", "patch": "@@ -9236,6 +9236,12 @@ sparc_vis_init_builtins (void)\n \t\t\t\t\t\t void_type_node, 0);\n   tree void_ftype_si = build_function_type_list (void_type_node,\n \t\t\t\t\t\t intSI_type_node, 0);\n+  tree sf_ftype_sf_sf = build_function_type_list (float_type_node,\n+\t\t\t\t\t\t  float_type_node,\n+\t\t\t\t\t\t  float_type_node, 0);\n+  tree df_ftype_df_df = build_function_type_list (double_type_node,\n+\t\t\t\t\t\t  double_type_node,\n+\t\t\t\t\t\t  double_type_node, 0);\n \n   /* Packing and expanding vectors.  */\n   def_builtin (\"__builtin_vis_fpack16\", CODE_FOR_fpack16_vis,\n@@ -9552,6 +9558,26 @@ sparc_vis_init_builtins (void)\n \t  def_builtin_const (\"__builtin_vis_fucmpeq8\", CODE_FOR_fucmpeq8si_vis,\n \t\t\t     si_ftype_v8qi_v8qi);\n \t}\n+\n+      def_builtin_const (\"__builtin_vis_fhadds\", CODE_FOR_fhaddsf_vis,\n+\t\t\t sf_ftype_sf_sf);\n+      def_builtin_const (\"__builtin_vis_fhaddd\", CODE_FOR_fhadddf_vis,\n+\t\t\t df_ftype_df_df);\n+      def_builtin_const (\"__builtin_vis_fhsubs\", CODE_FOR_fhsubsf_vis,\n+\t\t\t sf_ftype_sf_sf);\n+      def_builtin_const (\"__builtin_vis_fhsubd\", CODE_FOR_fhsubdf_vis,\n+\t\t\t df_ftype_df_df);\n+      def_builtin_const (\"__builtin_vis_fnhadds\", CODE_FOR_fnhaddsf_vis,\n+\t\t\t sf_ftype_sf_sf);\n+      def_builtin_const (\"__builtin_vis_fnhaddd\", CODE_FOR_fnhadddf_vis,\n+\t\t\t df_ftype_df_df);\n+\n+      def_builtin_const (\"__builtin_vis_umulxhi\", CODE_FOR_umulxhi_vis,\n+\t\t\t di_ftype_di_di);\n+      def_builtin_const (\"__builtin_vis_xmulx\", CODE_FOR_xmulx_vis,\n+\t\t\t di_ftype_di_di);\n+      def_builtin_const (\"__builtin_vis_xmulxhi\", CODE_FOR_xmulxhi_vis,\n+\t\t\t di_ftype_di_di);\n     }\n }\n \n@@ -10738,4 +10764,77 @@ sparc_preferred_reload_class (rtx x, reg_class_t rclass)\n   return rclass;\n }\n \n+const char *\n+output_v8plus_mult (rtx insn, rtx *operands, const char *name)\n+{\n+  char mulstr[32];\n+\n+  gcc_assert (! TARGET_ARCH64);\n+\n+  if (sparc_check_64 (operands[1], insn) <= 0)\n+    output_asm_insn (\"srl\\t%L1, 0, %L1\", operands);\n+  if (which_alternative == 1)\n+    output_asm_insn (\"sllx\\t%H1, 32, %H1\", operands);\n+  if (GET_CODE (operands[2]) == CONST_INT)\n+    {\n+      if (which_alternative == 1)\n+\t{\n+\t  output_asm_insn (\"or\\t%L1, %H1, %H1\", operands);\n+\t  sprintf (mulstr, \"%s\\t%%H1, %%2, %%L0\", name);\n+\t  output_asm_insn (mulstr, operands);\n+\t  return \"srlx\\t%L0, 32, %H0\";\n+\t}\n+      else\n+\t{\n+\t  output_asm_insn (\"sllx\\t%H1, 32, %3\", operands);\n+          output_asm_insn (\"or\\t%L1, %3, %3\", operands);\n+          sprintf (mulstr, \"%s\\t%%3, %%2, %%3\", name);\n+\t  output_asm_insn (mulstr, operands);\n+\t  output_asm_insn (\"srlx\\t%3, 32, %H0\", operands);\n+          return \"mov\\t%3, %L0\";\n+\t}\n+    }\n+  else if (rtx_equal_p (operands[1], operands[2]))\n+    {\n+      if (which_alternative == 1)\n+\t{\n+\t  output_asm_insn (\"or\\t%L1, %H1, %H1\", operands);\n+          sprintf (mulstr, \"%s\\t%%H1, %%H1, %%L0\", name);\n+\t  output_asm_insn (mulstr, operands);\n+\t  return \"srlx\\t%L0, 32, %H0\";\n+\t}\n+      else\n+\t{\n+\t  output_asm_insn (\"sllx\\t%H1, 32, %3\", operands);\n+          output_asm_insn (\"or\\t%L1, %3, %3\", operands);\n+\t  sprintf (mulstr, \"%s\\t%%3, %%3, %%3\", name);\n+\t  output_asm_insn (mulstr, operands);\n+\t  output_asm_insn (\"srlx\\t%3, 32, %H0\", operands);\n+          return \"mov\\t%3, %L0\";\n+\t}\n+    }\n+  if (sparc_check_64 (operands[2], insn) <= 0)\n+    output_asm_insn (\"srl\\t%L2, 0, %L2\", operands);\n+  if (which_alternative == 1)\n+    {\n+      output_asm_insn (\"or\\t%L1, %H1, %H1\", operands);\n+      output_asm_insn (\"sllx\\t%H2, 32, %L1\", operands);\n+      output_asm_insn (\"or\\t%L2, %L1, %L1\", operands);\n+      sprintf (mulstr, \"%s\\t%%H1, %%L1, %%L0\", name);\n+      output_asm_insn (mulstr, operands);\n+      return \"srlx\\t%L0, 32, %H0\";\n+    }\n+  else\n+    {\n+      output_asm_insn (\"sllx\\t%H1, 32, %3\", operands);\n+      output_asm_insn (\"sllx\\t%H2, 32, %4\", operands);\n+      output_asm_insn (\"or\\t%L1, %3, %3\", operands);\n+      output_asm_insn (\"or\\t%L2, %4, %4\", operands);\n+      sprintf (mulstr, \"%s\\t%%3, %%4, %%3\", name);\n+      output_asm_insn (mulstr, operands);\n+      output_asm_insn (\"srlx\\t%3, 32, %H0\", operands);\n+      return \"mov\\t%3, %L0\";\n+    }\n+}\n+\n #include \"gt-sparc.h\""}, {"sha": "e491aa1f777c002c66dce1dab157b15e364578a3", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 247, "deletions": 26, "changes": 273, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facb3fd7396177cc3848b478b9eb519a35880d17/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facb3fd7396177cc3848b478b9eb519a35880d17/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=facb3fd7396177cc3848b478b9eb519a35880d17", "patch": "@@ -86,6 +86,9 @@\n    (UNSPEC_FCHKSM16\t\t80)\n    (UNSPEC_PDISTN\t\t81)\n    (UNSPEC_FUCMP\t\t82)\n+   (UNSPEC_FHADD\t\t83)\n+   (UNSPEC_FHSUB\t\t84)\n+   (UNSPEC_XMUL\t\t\t85)\n   ])\n \n (define_constants\n@@ -4012,32 +4015,7 @@\n    (clobber (match_scratch:SI 3 \"=&h,X\"))\n    (clobber (match_scratch:SI 4 \"=&h,X\"))]\n   \"TARGET_V8PLUS\"\n-{\n-  if (sparc_check_64 (operands[1], insn) <= 0)\n-    output_asm_insn (\"srl\\t%L1, 0, %L1\", operands);\n-  if (which_alternative == 1)\n-    output_asm_insn (\"sllx\\t%H1, 32, %H1\", operands);\n-  if (GET_CODE (operands[2]) == CONST_INT)\n-    {\n-      if (which_alternative == 1)\n-\treturn \"or\\t%L1, %H1, %H1\\n\\tmulx\\t%H1, %2, %L0\\;srlx\\t%L0, 32, %H0\";\n-      else\n-\treturn \"sllx\\t%H1, 32, %3\\n\\tor\\t%L1, %3, %3\\n\\tmulx\\t%3, %2, %3\\n\\tsrlx\\t%3, 32, %H0\\n\\tmov\\t%3, %L0\";\n-    }\n-  else if (rtx_equal_p (operands[1], operands[2]))\n-    {\n-      if (which_alternative == 1)\n-\treturn \"or\\t%L1, %H1, %H1\\n\\tmulx\\t%H1, %H1, %L0\\;srlx\\t%L0, 32, %H0\";\n-      else\n-\treturn \"sllx\\t%H1, 32, %3\\n\\tor\\t%L1, %3, %3\\n\\tmulx\\t%3, %3, %3\\n\\tsrlx\\t%3, 32, %H0\\n\\tmov\\t%3, %L0\";\n-    }\n-  if (sparc_check_64 (operands[2], insn) <= 0)\n-    output_asm_insn (\"srl\\t%L2, 0, %L2\", operands);\n-  if (which_alternative == 1)\n-    return \"or\\t%L1, %H1, %H1\\n\\tsllx\\t%H2, 32, %L1\\n\\tor\\t%L2, %L1, %L1\\n\\tmulx\\t%H1, %L1, %L0\\;srlx\\t%L0, 32, %H0\";\n-  else\n-    return \"sllx\\t%H1, 32, %3\\n\\tsllx\\t%H2, 32, %4\\n\\tor\\t%L1, %3, %3\\n\\tor\\t%L2, %4, %4\\n\\tmulx\\t%3, %4, %3\\n\\tsrlx\\t%3, 32, %H0\\n\\tmov\\t%3, %L0\";\n-}\n+  \"* return output_v8plus_mult (insn, operands, \\\"mulx\\\");\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"9,8\")])\n \n@@ -8407,4 +8385,247 @@\n   \"TARGET_VIS3\"\n   \"fucmp<code>8\\t%1, %2, %0\")\n \n+(define_insn \"*naddsf3\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+        (neg:SF (plus:SF (match_operand:SF 1 \"register_operand\" \"f\")\n+                         (match_operand:SF 2 \"register_operand\" \"f\"))))]\n+  \"TARGET_VIS3\"\n+  \"fnadds\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"*nadddf3\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n+        (neg:DF (plus:DF (match_operand:DF 1 \"register_operand\" \"e\")\n+                         (match_operand:DF 2 \"register_operand\" \"e\"))))]\n+  \"TARGET_VIS3\"\n+  \"fnaddd\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"fptype\" \"double\")])\n+\n+(define_insn \"*nmulsf3\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+        (mult:SF (neg:SF (match_operand:SF 1 \"register_operand\" \"f\"))\n+                 (match_operand:SF 2 \"register_operand\" \"f\")))]\n+  \"TARGET_VIS3\"\n+  \"fnmuls\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"fpmul\")])\n+\n+(define_insn \"*nmuldf3\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n+        (mult:DF (neg:DF (match_operand:DF 1 \"register_operand\" \"e\"))\n+                 (match_operand:DF 2 \"register_operand\" \"e\")))]\n+  \"TARGET_VIS3\"\n+  \"fnmuld\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"fpmul\")\n+   (set_attr \"fptype\" \"double\")])\n+\n+(define_insn \"*nmuldf3_extend\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n+        (mult:DF (neg:DF (float_extend:DF\n+                           (match_operand:SF 1 \"register_operand\" \"f\")))\n+                 (float_extend:DF\n+                   (match_operand:SF 2 \"register_operand\" \"f\"))))]\n+  \"TARGET_VIS3\"\n+  \"fnsmuld\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"fpmul\")\n+   (set_attr \"fptype\" \"double\")])\n+\n+(define_insn \"fhaddsf_vis\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+        (unspec:SF [(match_operand:SF 1 \"register_operand\" \"f\")\n+                    (match_operand:SF 2 \"register_operand\" \"f\")]\n+                   UNSPEC_FHADD))]\n+  \"TARGET_VIS3\"\n+  \"fhadds\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"fhadddf_vis\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+        (unspec:DF [(match_operand:DF 1 \"register_operand\" \"f\")\n+                    (match_operand:DF 2 \"register_operand\" \"f\")]\n+                   UNSPEC_FHADD))]\n+  \"TARGET_VIS3\"\n+  \"fhaddd\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"fptype\" \"double\")])\n+\n+(define_insn \"fhsubsf_vis\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+        (unspec:SF [(match_operand:SF 1 \"register_operand\" \"f\")\n+                    (match_operand:SF 2 \"register_operand\" \"f\")]\n+                   UNSPEC_FHSUB))]\n+  \"TARGET_VIS3\"\n+  \"fhsubs\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"fhsubdf_vis\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+        (unspec:DF [(match_operand:DF 1 \"register_operand\" \"f\")\n+                    (match_operand:DF 2 \"register_operand\" \"f\")]\n+                   UNSPEC_FHSUB))]\n+  \"TARGET_VIS3\"\n+  \"fhsubd\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"fptype\" \"double\")])\n+\n+(define_insn \"fnhaddsf_vis\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+        (neg:SF (unspec:SF [(match_operand:SF 1 \"register_operand\" \"f\")\n+                            (match_operand:SF 2 \"register_operand\" \"f\")]\n+                           UNSPEC_FHADD)))]\n+  \"TARGET_VIS3\"\n+  \"fnhadds\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"fnhadddf_vis\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+        (neg:DF (unspec:DF [(match_operand:DF 1 \"register_operand\" \"f\")\n+                            (match_operand:DF 2 \"register_operand\" \"f\")]\n+                           UNSPEC_FHADD)))]\n+  \"TARGET_VIS3\"\n+  \"fnhaddd\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"fptype\" \"double\")])\n+\n+(define_expand \"umulxhi_vis\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+        (truncate:DI\n+          (lshiftrt:TI\n+            (mult:TI (zero_extend:TI\n+                       (match_operand:DI 1 \"arith_operand\" \"\"))\n+                     (zero_extend:TI\n+                       (match_operand:DI 2 \"arith_operand\" \"\")))\n+           (const_int 64))))]\n+ \"TARGET_VIS3\"\n+{\n+  if (! TARGET_ARCH64)\n+    {\n+      emit_insn (gen_umulxhi_v8plus (operands[0], operands[1], operands[2]));\n+      DONE;\n+    }\n+})\n+\n+(define_insn \"*umulxhi_sp64\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (truncate:DI\n+          (lshiftrt:TI\n+            (mult:TI (zero_extend:TI\n+                       (match_operand:DI 1 \"arith_operand\" \"%r\"))\n+                     (zero_extend:TI\n+                       (match_operand:DI 2 \"arith_operand\" \"rI\")))\n+           (const_int 64))))]\n+  \"TARGET_VIS3 && TARGET_ARCH64\"\n+  \"umulxhi\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"imul\")])\n+\n+(define_insn \"umulxhi_v8plus\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,h\")\n+        (truncate:DI\n+          (lshiftrt:TI\n+            (mult:TI (zero_extend:TI\n+                       (match_operand:DI 1 \"arith_operand\" \"%r,0\"))\n+                     (zero_extend:TI\n+                       (match_operand:DI 2 \"arith_operand\" \"rI,rI\")))\n+           (const_int 64))))\n+   (clobber (match_scratch:SI 3 \"=&h,X\"))\n+   (clobber (match_scratch:SI 4 \"=&h,X\"))]\n+  \"TARGET_VIS3 && ! TARGET_ARCH64\"\n+  \"* return output_v8plus_mult (insn, operands, \\\"umulxhi\\\");\"\n+  [(set_attr \"type\" \"imul\")\n+   (set_attr \"length\" \"9,8\")])\n+\n+(define_expand \"xmulx_vis\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+        (truncate:DI\n+          (unspec:TI [(zero_extend:TI\n+                        (match_operand:DI 1 \"arith_operand\" \"\"))\n+                      (zero_extend:TI\n+                        (match_operand:DI 2 \"arith_operand\" \"\"))]\n+           UNSPEC_XMUL)))]\n+  \"TARGET_VIS3\"\n+{\n+  if (! TARGET_ARCH64)\n+    {\n+      emit_insn (gen_xmulx_v8plus (operands[0], operands[1], operands[2]));\n+      DONE;\n+    }\n+})\n+\n+(define_insn \"*xmulx_sp64\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (truncate:DI\n+          (unspec:TI [(zero_extend:TI\n+                        (match_operand:DI 1 \"arith_operand\" \"%r\"))\n+                      (zero_extend:TI\n+                        (match_operand:DI 2 \"arith_operand\" \"rI\"))]\n+           UNSPEC_XMUL)))]\n+  \"TARGET_VIS3 && TARGET_ARCH64\"\n+  \"xmulx\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"imul\")])\n+\n+(define_insn \"xmulx_v8plus\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,h\")\n+        (truncate:DI\n+          (unspec:TI [(zero_extend:TI\n+                        (match_operand:DI 1 \"arith_operand\" \"%r,0\"))\n+                      (zero_extend:TI\n+                        (match_operand:DI 2 \"arith_operand\" \"rI,rI\"))]\n+           UNSPEC_XMUL)))\n+   (clobber (match_scratch:SI 3 \"=&h,X\"))\n+   (clobber (match_scratch:SI 4 \"=&h,X\"))]\n+  \"TARGET_VIS3 && ! TARGET_ARCH64\"\n+  \"* return output_v8plus_mult (insn, operands, \\\"xmulx\\\");\"\n+  [(set_attr \"type\" \"imul\")\n+   (set_attr \"length\" \"9,8\")])\n+\n+(define_expand \"xmulxhi_vis\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+        (truncate:DI\n+          (lshiftrt:TI\n+            (unspec:TI [(zero_extend:TI\n+                          (match_operand:DI 1 \"arith_operand\" \"\"))\n+                        (zero_extend:TI\n+                          (match_operand:DI 2 \"arith_operand\" \"\"))]\n+             UNSPEC_XMUL)\n+           (const_int 64))))]\n+  \"TARGET_VIS3\"\n+{\n+  if (! TARGET_ARCH64)\n+    {\n+      emit_insn (gen_xmulxhi_v8plus (operands[0], operands[1], operands[2]));\n+      DONE;\n+    }\n+})\n+\n+(define_insn \"*xmulxhi_sp64\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (truncate:DI\n+          (lshiftrt:TI\n+            (unspec:TI [(zero_extend:TI\n+                          (match_operand:DI 1 \"arith_operand\" \"%r\"))\n+                        (zero_extend:TI\n+                          (match_operand:DI 2 \"arith_operand\" \"rI\"))]\n+             UNSPEC_XMUL)\n+           (const_int 64))))]\n+  \"TARGET_VIS3 && TARGET_ARCH64\"\n+  \"xmulxhi\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"imul\")])\n+\n+(define_insn \"xmulxhi_v8plus\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,h\")\n+        (truncate:DI\n+          (lshiftrt:TI\n+            (unspec:TI [(zero_extend:TI\n+                          (match_operand:DI 1 \"arith_operand\" \"%r,0\"))\n+                        (zero_extend:TI\n+                          (match_operand:DI 2 \"arith_operand\" \"rI,rI\"))]\n+             UNSPEC_XMUL)\n+           (const_int 64))))\n+   (clobber (match_scratch:SI 3 \"=&h,X\"))\n+   (clobber (match_scratch:SI 4 \"=&h,X\"))]\n+  \"TARGET_VIS3 && !TARGET_ARCH64\"\n+  \"* return output_v8plus_mult (insn, operands, \\\"xmulxhi\\\");\"\n+  [(set_attr \"type\" \"imul\")\n+   (set_attr \"length\" \"9,8\")])\n+\n (include \"sync.md\")"}, {"sha": "deb68b4a7243faed6d2e7f2d4a77b6f32ec89c00", "filename": "gcc/config/sparc/visintrin.h", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facb3fd7396177cc3848b478b9eb519a35880d17/gcc%2Fconfig%2Fsparc%2Fvisintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facb3fd7396177cc3848b478b9eb519a35880d17/gcc%2Fconfig%2Fsparc%2Fvisintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fvisintrin.h?ref=facb3fd7396177cc3848b478b9eb519a35880d17", "patch": "@@ -627,4 +627,67 @@ __vis_fucmpeq8 (__v8qi __A, __v8qi __B)\n   return __builtin_vis_fucmpeq8 (__A, __B);\n }\n \n+extern __inline float\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fhadds (float __A, float __B)\n+{\n+  return __builtin_vis_fhadds (__A, __B);\n+}\n+\n+extern __inline double\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fhaddd (double __A, double __B)\n+{\n+  return __builtin_vis_fhaddd (__A, __B);\n+}\n+\n+extern __inline float\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fhsubs (float __A, float __B)\n+{\n+  return __builtin_vis_fhsubs (__A, __B);\n+}\n+\n+extern __inline double\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fhsubd (double __A, double __B)\n+{\n+  return __builtin_vis_fhsubd (__A, __B);\n+}\n+\n+extern __inline float\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fnhadds (float __A, float __B)\n+{\n+  return __builtin_vis_fnhadds (__A, __B);\n+}\n+\n+extern __inline double\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fnhaddd (double __A, double __B)\n+{\n+  return __builtin_vis_fnhaddd (__A, __B);\n+}\n+\n+extern __inline __i64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_umulxhi (__i64 __A, __i64 __B)\n+{\n+  return __builtin_vis_umulxhi (__A, __B);\n+}\n+\n+extern __inline __i64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_xmulx (__i64 __A, __i64 __B)\n+{\n+  return __builtin_vis_xmulx (__A, __B);\n+}\n+\n+extern __inline __i64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_xmulxhi (__i64 __A, __i64 __B)\n+{\n+  return __builtin_vis_xmulxhi (__A, __B);\n+}\n+\n #endif  /* _VISINTRIN_H_INCLUDED */"}, {"sha": "c3ebf095fd0887515b7c75b48b84bae8ec345e5a", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facb3fd7396177cc3848b478b9eb519a35880d17/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facb3fd7396177cc3848b478b9eb519a35880d17/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=facb3fd7396177cc3848b478b9eb519a35880d17", "patch": "@@ -13099,6 +13099,17 @@ long __builtin_vis_fucmple8 (v8qi, v8qi);\n long __builtin_vis_fucmpne8 (v8qi, v8qi);\n long __builtin_vis_fucmpgt8 (v8qi, v8qi);\n long __builtin_vis_fucmpeq8 (v8qi, v8qi);\n+\n+float __builtin_vis_fhadds (float, float);\n+double __builtin_vis_fhaddd (double, double);\n+float __builtin_vis_fhsubs (float, float);\n+double __builtin_vis_fhsubd (double, double);\n+float __builtin_vis_fnhadds (float, float);\n+double __builtin_vis_fnhaddd (double, double);\n+\n+int64_t __builtin_vis_umulxhi (int64_t, int64_t);\n+int64_t __builtin_vis_xmulx (int64_t, int64_t);\n+int64_t __builtin_vis_xmulxhi (int64_t, int64_t);\n @end smallexample\n \n @node SPU Built-in Functions"}, {"sha": "878ff73039fa62c1e3d7b954e696e0110c2991e1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facb3fd7396177cc3848b478b9eb519a35880d17/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facb3fd7396177cc3848b478b9eb519a35880d17/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=facb3fd7396177cc3848b478b9eb519a35880d17", "patch": "@@ -1,3 +1,9 @@\n+2011-10-04  David S. Miller  <davem@davemloft.net>\n+\n+\t* gcc.target/sparc/fhalve.c: New test.\n+\t* gcc.target/sparc/fnegop.c: New test.\n+\t* gcc.target/sparc/xmul.c: New test.\n+\n 2011-10-04  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/35831"}, {"sha": "340b936b8fa82de44b2e8afa46203f809300f883", "filename": "gcc/testsuite/gcc.target/sparc/fhalve.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facb3fd7396177cc3848b478b9eb519a35880d17/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffhalve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facb3fd7396177cc3848b478b9eb519a35880d17/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffhalve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffhalve.c?ref=facb3fd7396177cc3848b478b9eb519a35880d17", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=niagara3 -mvis\" } */\n+\n+float test_fhadds (float x, float y)\n+{\n+  return __builtin_vis_fhadds (x, y);\n+}\n+\n+double test_fhaddd (double x, double y)\n+{\n+  return __builtin_vis_fhaddd (x, y);\n+}\n+\n+float test_fhsubs (float x, float y)\n+{\n+  return __builtin_vis_fhsubs (x, y);\n+}\n+\n+double test_fhsubd (double x, double y)\n+{\n+  return __builtin_vis_fhsubd (x, y);\n+}\n+\n+float test_fnhadds (float x, float y)\n+{\n+  return __builtin_vis_fnhadds (x, y);\n+}\n+\n+double test_fnhaddd (double x, double y)\n+{\n+  return __builtin_vis_fnhaddd (x, y);\n+}\n+\n+/* { dg-final { scan-assembler \"fhadds\\t%\" } } */\n+/* { dg-final { scan-assembler \"fhaddd\\t%\" } } */\n+/* { dg-final { scan-assembler \"fhsubs\\t%\" } } */\n+/* { dg-final { scan-assembler \"fhsubd\\t%\" } } */\n+/* { dg-final { scan-assembler \"fnhadds\\t%\" } } */\n+/* { dg-final { scan-assembler \"fnhaddd\\t%\" } } */"}, {"sha": "25f8c199e2491d3af67f315133708ac88d0ed562", "filename": "gcc/testsuite/gcc.target/sparc/fnegop.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facb3fd7396177cc3848b478b9eb519a35880d17/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffnegop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facb3fd7396177cc3848b478b9eb519a35880d17/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffnegop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffnegop.c?ref=facb3fd7396177cc3848b478b9eb519a35880d17", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mcpu=niagara3 -mvis\" } */\n+\n+float test_fnadds(float x, float y)\n+{\n+  return -(x + y);\n+}\n+\n+double test_fnaddd(double x, double y)\n+{\n+  return -(x + y);\n+}\n+\n+float test_fnmuls(float x, float y)\n+{\n+  return -(x * y);\n+}\n+\n+double test_fnmuld(double x, double y)\n+{\n+  return -(x * y);\n+}\n+\n+double test_fnsmuld(float x, float y)\n+{\n+  return -((double)x * (double)y);\n+}\n+\n+/* { dg-final { scan-assembler \"fnadds\\t%\" } } */\n+/* { dg-final { scan-assembler \"fnaddd\\t%\" } } */\n+/* { dg-final { scan-assembler \"fnmuls\\t%\" } } */\n+/* { dg-final { scan-assembler \"fnmuld\\t%\" } } */\n+/* { dg-final { scan-assembler \"fnsmuld\\t%\" } } */"}, {"sha": "ce80e6cbbe03e7d74b43e45e1bc6b18d30adfb48", "filename": "gcc/testsuite/gcc.target/sparc/xmul.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facb3fd7396177cc3848b478b9eb519a35880d17/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fxmul.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facb3fd7396177cc3848b478b9eb519a35880d17/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fxmul.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fxmul.c?ref=facb3fd7396177cc3848b478b9eb519a35880d17", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=niagara3 -mvis\" } */\n+typedef long long int64_t;\n+\n+int64_t test_umulxhi (int64_t x, int64_t y)\n+{\n+  return __builtin_vis_umulxhi (x, y);\n+}\n+\n+int64_t test_xmulx (int64_t x, int64_t y)\n+{\n+  return __builtin_vis_xmulx (x, y);\n+}\n+\n+int64_t test_xmulxhi (int64_t x, int64_t y)\n+{\n+  return __builtin_vis_xmulxhi (x, y);\n+}\n+\n+/* { dg-final { scan-assembler \"umulxhi\\t%\" } } */\n+/* { dg-final { scan-assembler \"xmulx\\t%\" } } */\n+/* { dg-final { scan-assembler \"xmulxhi\\t%\" } } */"}]}