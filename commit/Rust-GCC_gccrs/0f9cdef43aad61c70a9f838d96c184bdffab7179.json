{"sha": "0f9cdef43aad61c70a9f838d96c184bdffab7179", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY5Y2RlZjQzYWFkNjFjNzBhOWY4MzhkOTZjMTg0YmRmZmFiNzE3OQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2013-07-18T18:55:48Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2013-07-18T18:55:48Z"}, "message": "passes.def: New.\n\n\t* passes.def: New.\n\n\t* passes.c (init_optimization_passes): Move the construction of\n\tthe pass hierarchy into a new passes.def file.\n\n\t* Makefile.in (passes.o): Add dependency on passes.def.\n\nFrom-SVN: r201038", "tree": {"sha": "68b9bcecd6cb499bd7c74748e16d2779c6283e28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68b9bcecd6cb499bd7c74748e16d2779c6283e28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f9cdef43aad61c70a9f838d96c184bdffab7179", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f9cdef43aad61c70a9f838d96c184bdffab7179", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f9cdef43aad61c70a9f838d96c184bdffab7179", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f9cdef43aad61c70a9f838d96c184bdffab7179/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2efa40870b12c4b3a07d35bf3e242e54d03e96dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2efa40870b12c4b3a07d35bf3e242e54d03e96dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2efa40870b12c4b3a07d35bf3e242e54d03e96dc"}], "stats": {"total": 794, "additions": 416, "deletions": 378}, "files": [{"sha": "1486a06ddeb0dc77234f75e980ef7e149f53a61c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f9cdef43aad61c70a9f838d96c184bdffab7179/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f9cdef43aad61c70a9f838d96c184bdffab7179/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f9cdef43aad61c70a9f838d96c184bdffab7179", "patch": "@@ -1,3 +1,12 @@\n+2013-07-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* passes.def: New.\n+\n+\t* passes.c (init_optimization_passes): Move the construction of\n+\tthe pass hierarchy into a new passes.def file.\n+\n+\t* Makefile.in (passes.o): Add dependency on passes.def.\n+\n 2013-07-18  David Malcolm  <dmalcolm@redhat.com>\n \n \t* passes.c (init_optimization_passes): Introduce macros for"}, {"sha": "966c38a061df9fe5321df957bd8a0cb351ef1996", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f9cdef43aad61c70a9f838d96c184bdffab7179/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f9cdef43aad61c70a9f838d96c184bdffab7179/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=0f9cdef43aad61c70a9f838d96c184bdffab7179", "patch": "@@ -2743,7 +2743,7 @@ passes.o : passes.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    hosthooks.h $(CGRAPH_H) $(COVERAGE_H) $(TREE_PASS_H) $(TREE_DUMP_H) \\\n    $(GGC_H) $(OPTS_H) $(TREE_FLOW_H) $(TREE_INLINE_H) \\\n    gt-passes.h $(DF_H) $(PREDICT_H) $(LTO_STREAMER_H) \\\n-   $(PLUGIN_H) $(IPA_UTILS_H)\n+   $(PLUGIN_H) $(IPA_UTILS_H) passes.def\n \n plugin.o : plugin.c $(PLUGIN_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(HASH_TABLE_H) $(DIAGNOSTIC_CORE_H) $(TREE_H) $(TREE_PASS_H) \\"}, {"sha": "94fb58688ca07b03fa9f457d1ede64fbcb0fbfa6", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 377, "changes": 378, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f9cdef43aad61c70a9f838d96c184bdffab7179/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f9cdef43aad61c70a9f838d96c184bdffab7179/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=0f9cdef43aad61c70a9f838d96c184bdffab7179", "patch": "@@ -1297,383 +1297,7 @@ init_optimization_passes (void)\n #define TERMINATE_PASS_LIST() \\\n   *p = NULL;\n \n- /* All passes needed to lower the function into shape optimizers can\n-    operate on.  These passes are always run first on the function, but\n-    backend might produce already lowered functions that are not processed\n-    by these passes.  */\n-  INSERT_PASSES_AFTER (all_lowering_passes)\n-  NEXT_PASS (pass_warn_unused_result);\n-  NEXT_PASS (pass_diagnose_omp_blocks);\n-  NEXT_PASS (pass_diagnose_tm_blocks);\n-  NEXT_PASS (pass_mudflap_1);\n-  NEXT_PASS (pass_lower_omp);\n-  NEXT_PASS (pass_lower_cf);\n-  NEXT_PASS (pass_lower_tm);\n-  NEXT_PASS (pass_refactor_eh);\n-  NEXT_PASS (pass_lower_eh);\n-  NEXT_PASS (pass_build_cfg);\n-  NEXT_PASS (pass_warn_function_return);\n-  NEXT_PASS (pass_expand_omp);\n-  NEXT_PASS (pass_build_cgraph_edges);\n-  TERMINATE_PASS_LIST ()\n-\n-  /* Interprocedural optimization passes.  */\n-  INSERT_PASSES_AFTER (all_small_ipa_passes)\n-  NEXT_PASS (pass_ipa_free_lang_data);\n-  NEXT_PASS (pass_ipa_function_and_variable_visibility);\n-  NEXT_PASS (pass_early_local_passes);\n-  PUSH_INSERT_PASSES_WITHIN (pass_early_local_passes)\n-      NEXT_PASS (pass_fixup_cfg);\n-      NEXT_PASS (pass_init_datastructures);\n-\n-      NEXT_PASS (pass_build_ssa);\n-      NEXT_PASS (pass_early_warn_uninitialized);\n-      NEXT_PASS (pass_rebuild_cgraph_edges);\n-      NEXT_PASS (pass_inline_parameters);\n-      NEXT_PASS (pass_early_inline);\n-      NEXT_PASS (pass_all_early_optimizations);\n-      PUSH_INSERT_PASSES_WITHIN (pass_all_early_optimizations)\n-\t  NEXT_PASS (pass_remove_cgraph_callee_edges);\n-\t  NEXT_PASS (pass_rename_ssa_copies);\n-\t  NEXT_PASS (pass_ccp);\n-\t  /* After CCP we rewrite no longer addressed locals into SSA\n-\t     form if possible.  */\n-\t  NEXT_PASS (pass_forwprop);\n-\t  /* pass_build_ealias is a dummy pass that ensures that we\n-\t     execute TODO_rebuild_alias at this point.  */\n-\t  NEXT_PASS (pass_build_ealias);\n-\t  NEXT_PASS (pass_sra_early);\n-\t  NEXT_PASS (pass_fre);\n-\t  NEXT_PASS (pass_copy_prop);\n-\t  NEXT_PASS (pass_merge_phi);\n-\t  NEXT_PASS (pass_cd_dce);\n-\t  NEXT_PASS (pass_early_ipa_sra);\n-\t  NEXT_PASS (pass_tail_recursion);\n-\t  NEXT_PASS (pass_convert_switch);\n-          NEXT_PASS (pass_cleanup_eh);\n-          NEXT_PASS (pass_profile);\n-          NEXT_PASS (pass_local_pure_const);\n-\t  /* Split functions creates parts that are not run through\n-\t     early optimizations again.  It is thus good idea to do this\n-\t     late.  */\n-          NEXT_PASS (pass_split_functions);\n-      POP_INSERT_PASSES ()\n-      NEXT_PASS (pass_release_ssa_names);\n-      NEXT_PASS (pass_rebuild_cgraph_edges);\n-      NEXT_PASS (pass_inline_parameters);\n-  POP_INSERT_PASSES ()\n-  NEXT_PASS (pass_ipa_free_inline_summary);\n-  NEXT_PASS (pass_ipa_tree_profile);\n-  PUSH_INSERT_PASSES_WITHIN (pass_ipa_tree_profile)\n-      NEXT_PASS (pass_feedback_split_functions);\n-  POP_INSERT_PASSES ()\n-  NEXT_PASS (pass_ipa_increase_alignment);\n-  NEXT_PASS (pass_ipa_tm);\n-  NEXT_PASS (pass_ipa_lower_emutls);\n-  TERMINATE_PASS_LIST ()\n-\n-  INSERT_PASSES_AFTER (all_regular_ipa_passes)\n-  NEXT_PASS (pass_ipa_whole_program_visibility);\n-  NEXT_PASS (pass_ipa_profile);\n-  NEXT_PASS (pass_ipa_cp);\n-  NEXT_PASS (pass_ipa_cdtor_merge);\n-  NEXT_PASS (pass_ipa_inline);\n-  NEXT_PASS (pass_ipa_pure_const);\n-  NEXT_PASS (pass_ipa_reference);\n-  TERMINATE_PASS_LIST ()\n-\n-  INSERT_PASSES_AFTER (all_lto_gen_passes)\n-  NEXT_PASS (pass_ipa_lto_gimple_out);\n-  NEXT_PASS (pass_ipa_lto_finish_out);  /* This must be the last LTO pass.  */\n-  TERMINATE_PASS_LIST ()\n-\n-  /* Simple IPA passes executed after the regular passes.  In WHOPR mode the\n-     passes are executed after partitioning and thus see just parts of the\n-     compiled unit.  */\n-  INSERT_PASSES_AFTER (all_late_ipa_passes)\n-  NEXT_PASS (pass_ipa_pta);\n-  TERMINATE_PASS_LIST ()\n-\n-  /* These passes are run after IPA passes on every function that is being\n-     output to the assembler file.  */\n-  INSERT_PASSES_AFTER (all_passes)\n-  NEXT_PASS (pass_fixup_cfg);\n-  NEXT_PASS (pass_lower_eh_dispatch);\n-  NEXT_PASS (pass_all_optimizations);\n-  PUSH_INSERT_PASSES_WITHIN (pass_all_optimizations)\n-      NEXT_PASS (pass_remove_cgraph_callee_edges);\n-      /* Initial scalar cleanups before alias computation.\n-\t They ensure memory accesses are not indirect wherever possible.  */\n-      NEXT_PASS (pass_strip_predict_hints);\n-      NEXT_PASS (pass_rename_ssa_copies);\n-      NEXT_PASS (pass_copy_prop);\n-      NEXT_PASS (pass_complete_unrolli);\n-      NEXT_PASS (pass_ccp);\n-      /* After CCP we rewrite no longer addressed locals into SSA\n-\t form if possible.  */\n-      NEXT_PASS (pass_phiprop);\n-      NEXT_PASS (pass_forwprop);\n-      /* pass_build_alias is a dummy pass that ensures that we\n-\t execute TODO_rebuild_alias at this point.  */\n-      NEXT_PASS (pass_build_alias);\n-      NEXT_PASS (pass_return_slot);\n-      NEXT_PASS (pass_fre);\n-      NEXT_PASS (pass_copy_prop);\n-      NEXT_PASS (pass_merge_phi);\n-      NEXT_PASS (pass_vrp);\n-      NEXT_PASS (pass_dce);\n-      NEXT_PASS (pass_call_cdce);\n-      NEXT_PASS (pass_cselim);\n-      NEXT_PASS (pass_tree_ifcombine);\n-      NEXT_PASS (pass_phiopt);\n-      NEXT_PASS (pass_tail_recursion);\n-      NEXT_PASS (pass_ch);\n-      NEXT_PASS (pass_stdarg);\n-      NEXT_PASS (pass_lower_complex);\n-      NEXT_PASS (pass_sra);\n-      NEXT_PASS (pass_rename_ssa_copies);\n-      /* The dom pass will also resolve all __builtin_constant_p calls\n-         that are still there to 0.  This has to be done after some\n-\t propagations have already run, but before some more dead code\n-\t is removed, and this place fits nicely.  Remember this when\n-\t trying to move or duplicate pass_dominator somewhere earlier.  */\n-      NEXT_PASS (pass_dominator);\n-      /* The only const/copy propagation opportunities left after\n-\t DOM should be due to degenerate PHI nodes.  So rather than\n-\t run the full propagators, run a specialized pass which\n-\t only examines PHIs to discover const/copy propagation\n-\t opportunities.  */\n-      NEXT_PASS (pass_phi_only_cprop);\n-      NEXT_PASS (pass_dse);\n-      NEXT_PASS (pass_reassoc);\n-      NEXT_PASS (pass_dce);\n-      NEXT_PASS (pass_forwprop);\n-      NEXT_PASS (pass_phiopt);\n-      NEXT_PASS (pass_object_sizes);\n-      NEXT_PASS (pass_strlen);\n-      NEXT_PASS (pass_ccp);\n-      /* After CCP we rewrite no longer addressed locals into SSA\n-\t form if possible.  */\n-      NEXT_PASS (pass_copy_prop);\n-      NEXT_PASS (pass_cse_sincos);\n-      NEXT_PASS (pass_optimize_bswap);\n-      NEXT_PASS (pass_split_crit_edges);\n-      NEXT_PASS (pass_pre);\n-      NEXT_PASS (pass_sink_code);\n-      NEXT_PASS (pass_asan);\n-      NEXT_PASS (pass_tsan);\n-      NEXT_PASS (pass_tree_loop);\n-      PUSH_INSERT_PASSES_WITHIN (pass_tree_loop)\n-\t  NEXT_PASS (pass_tree_loop_init);\n-\t  NEXT_PASS (pass_lim);\n-\t  NEXT_PASS (pass_copy_prop);\n-\t  NEXT_PASS (pass_dce_loop);\n-\t  NEXT_PASS (pass_tree_unswitch);\n-\t  NEXT_PASS (pass_scev_cprop);\n-\t  NEXT_PASS (pass_record_bounds);\n-\t  NEXT_PASS (pass_check_data_deps);\n-\t  NEXT_PASS (pass_loop_distribution);\n-\t  NEXT_PASS (pass_copy_prop);\n-\t  NEXT_PASS (pass_graphite);\n-\t  PUSH_INSERT_PASSES_WITHIN (pass_graphite)\n-\t      NEXT_PASS (pass_graphite_transforms);\n-\t      NEXT_PASS (pass_lim);\n-\t      NEXT_PASS (pass_copy_prop);\n-\t      NEXT_PASS (pass_dce_loop);\n-\t  POP_INSERT_PASSES ()\n-\t  NEXT_PASS (pass_iv_canon);\n-\t  NEXT_PASS (pass_parallelize_loops);\n-\t  NEXT_PASS (pass_if_conversion);\n-\t  NEXT_PASS (pass_vectorize);\n-          PUSH_INSERT_PASSES_WITHIN (pass_vectorize)\n-\t      NEXT_PASS (pass_dce_loop);\n-          POP_INSERT_PASSES ()\n-          NEXT_PASS (pass_predcom);\n-\t  NEXT_PASS (pass_complete_unroll);\n-\t  NEXT_PASS (pass_slp_vectorize);\n-\t  NEXT_PASS (pass_loop_prefetch);\n-\t  NEXT_PASS (pass_iv_optimize);\n-\t  NEXT_PASS (pass_lim);\n-\t  NEXT_PASS (pass_tree_loop_done);\n-      POP_INSERT_PASSES ()\n-      NEXT_PASS (pass_lower_vector_ssa);\n-      NEXT_PASS (pass_cse_reciprocals);\n-      NEXT_PASS (pass_reassoc);\n-      NEXT_PASS (pass_strength_reduction);\n-      NEXT_PASS (pass_dominator);\n-      /* The only const/copy propagation opportunities left after\n-\t DOM should be due to degenerate PHI nodes.  So rather than\n-\t run the full propagators, run a specialized pass which\n-\t only examines PHIs to discover const/copy propagation\n-\t opportunities.  */\n-      NEXT_PASS (pass_phi_only_cprop);\n-      NEXT_PASS (pass_vrp);\n-      NEXT_PASS (pass_cd_dce);\n-      NEXT_PASS (pass_tracer);\n-\n-      /* FIXME: If DCE is not run before checking for uninitialized uses,\n-\t we may get false warnings (e.g., testsuite/gcc.dg/uninit-5.c).\n-\t However, this also causes us to misdiagnose cases that should be\n-\t real warnings (e.g., testsuite/gcc.dg/pr18501.c).\n-\n-\t To fix the false positives in uninit-5.c, we would have to\n-\t account for the predicates protecting the set and the use of each\n-\t variable.  Using a representation like Gated Single Assignment\n-\t may help.  */\n-      NEXT_PASS (pass_late_warn_uninitialized);\n-      NEXT_PASS (pass_dse);\n-      NEXT_PASS (pass_forwprop);\n-      NEXT_PASS (pass_phiopt);\n-      NEXT_PASS (pass_fold_builtins);\n-      NEXT_PASS (pass_optimize_widening_mul);\n-      NEXT_PASS (pass_tail_calls);\n-      NEXT_PASS (pass_rename_ssa_copies);\n-      NEXT_PASS (pass_uncprop);\n-      NEXT_PASS (pass_local_pure_const);\n-  POP_INSERT_PASSES ()\n-  NEXT_PASS (pass_all_optimizations_g);\n-  PUSH_INSERT_PASSES_WITHIN (pass_all_optimizations_g)\n-      NEXT_PASS (pass_remove_cgraph_callee_edges);\n-      NEXT_PASS (pass_strip_predict_hints);\n-      /* Lower remaining pieces of GIMPLE.  */\n-      NEXT_PASS (pass_lower_complex);\n-      NEXT_PASS (pass_lower_vector_ssa);\n-      /* Perform simple scalar cleanup which is constant/copy propagation.  */\n-      NEXT_PASS (pass_ccp);\n-      NEXT_PASS (pass_object_sizes);\n-      /* Fold remaining builtins.  */\n-      NEXT_PASS (pass_fold_builtins);\n-      /* Copy propagation also copy-propagates constants, this is necessary\n-         to forward object-size and builtin folding results properly.  */\n-      NEXT_PASS (pass_copy_prop);\n-      NEXT_PASS (pass_dce);\n-      NEXT_PASS (pass_asan);\n-      NEXT_PASS (pass_tsan);\n-      NEXT_PASS (pass_rename_ssa_copies);\n-      /* ???  We do want some kind of loop invariant motion, but we possibly\n-         need to adjust LIM to be more friendly towards preserving accurate\n-\t debug information here.  */\n-      NEXT_PASS (pass_late_warn_uninitialized);\n-      NEXT_PASS (pass_uncprop);\n-      NEXT_PASS (pass_local_pure_const);\n-  POP_INSERT_PASSES ()\n-  NEXT_PASS (pass_tm_init);\n-  PUSH_INSERT_PASSES_WITHIN (pass_tm_init)\n-      NEXT_PASS (pass_tm_mark);\n-      NEXT_PASS (pass_tm_memopt);\n-      NEXT_PASS (pass_tm_edges);\n-  POP_INSERT_PASSES ()\n-  NEXT_PASS (pass_lower_vector);\n-  NEXT_PASS (pass_lower_complex_O0);\n-  NEXT_PASS (pass_asan_O0);\n-  NEXT_PASS (pass_tsan_O0);\n-  NEXT_PASS (pass_cleanup_eh);\n-  NEXT_PASS (pass_lower_resx);\n-  NEXT_PASS (pass_nrv);\n-  NEXT_PASS (pass_mudflap_2);\n-  NEXT_PASS (pass_cleanup_cfg_post_optimizing);\n-  NEXT_PASS (pass_warn_function_noreturn);\n-\n-  NEXT_PASS (pass_expand);\n-\n-  NEXT_PASS (pass_rest_of_compilation);\n-  PUSH_INSERT_PASSES_WITHIN (pass_rest_of_compilation)\n-      NEXT_PASS (pass_instantiate_virtual_regs);\n-      NEXT_PASS (pass_into_cfg_layout_mode);\n-      NEXT_PASS (pass_jump);\n-      NEXT_PASS (pass_lower_subreg);\n-      NEXT_PASS (pass_df_initialize_opt);\n-      NEXT_PASS (pass_cse);\n-      NEXT_PASS (pass_rtl_fwprop);\n-      NEXT_PASS (pass_rtl_cprop);\n-      NEXT_PASS (pass_rtl_pre);\n-      NEXT_PASS (pass_rtl_hoist);\n-      NEXT_PASS (pass_rtl_cprop);\n-      NEXT_PASS (pass_rtl_store_motion);\n-      NEXT_PASS (pass_cse_after_global_opts);\n-      NEXT_PASS (pass_rtl_ifcvt);\n-      NEXT_PASS (pass_reginfo_init);\n-      /* Perform loop optimizations.  It might be better to do them a bit\n-\t sooner, but we want the profile feedback to work more\n-\t efficiently.  */\n-      NEXT_PASS (pass_loop2);\n-      PUSH_INSERT_PASSES_WITHIN (pass_loop2)\n-\t  NEXT_PASS (pass_rtl_loop_init);\n-\t  NEXT_PASS (pass_rtl_move_loop_invariants);\n-\t  NEXT_PASS (pass_rtl_unswitch);\n-\t  NEXT_PASS (pass_rtl_unroll_and_peel_loops);\n-\t  NEXT_PASS (pass_rtl_doloop);\n-\t  NEXT_PASS (pass_rtl_loop_done);\n-\t  TERMINATE_PASS_LIST ()\n-      POP_INSERT_PASSES ()\n-      NEXT_PASS (pass_web);\n-      NEXT_PASS (pass_rtl_cprop);\n-      NEXT_PASS (pass_cse2);\n-      NEXT_PASS (pass_rtl_dse1);\n-      NEXT_PASS (pass_rtl_fwprop_addr);\n-      NEXT_PASS (pass_inc_dec);\n-      NEXT_PASS (pass_initialize_regs);\n-      NEXT_PASS (pass_ud_rtl_dce);\n-      NEXT_PASS (pass_combine);\n-      NEXT_PASS (pass_if_after_combine);\n-      NEXT_PASS (pass_partition_blocks);\n-      NEXT_PASS (pass_regmove);\n-      NEXT_PASS (pass_outof_cfg_layout_mode);\n-      NEXT_PASS (pass_split_all_insns);\n-      NEXT_PASS (pass_lower_subreg2);\n-      NEXT_PASS (pass_df_initialize_no_opt);\n-      NEXT_PASS (pass_stack_ptr_mod);\n-      NEXT_PASS (pass_mode_switching);\n-      NEXT_PASS (pass_match_asm_constraints);\n-      NEXT_PASS (pass_sms);\n-      NEXT_PASS (pass_sched);\n-      NEXT_PASS (pass_ira);\n-      NEXT_PASS (pass_reload);\n-      NEXT_PASS (pass_postreload);\n-      PUSH_INSERT_PASSES_WITHIN (pass_postreload)\n-\t  NEXT_PASS (pass_postreload_cse);\n-\t  NEXT_PASS (pass_gcse2);\n-\t  NEXT_PASS (pass_split_after_reload);\n-\t  NEXT_PASS (pass_ree);\n-\t  NEXT_PASS (pass_compare_elim_after_reload);\n-\t  NEXT_PASS (pass_branch_target_load_optimize1);\n-\t  NEXT_PASS (pass_thread_prologue_and_epilogue);\n-\t  NEXT_PASS (pass_rtl_dse2);\n-\t  NEXT_PASS (pass_stack_adjustments);\n-\t  NEXT_PASS (pass_jump2);\n-\t  NEXT_PASS (pass_peephole2);\n-\t  NEXT_PASS (pass_if_after_reload);\n-\t  NEXT_PASS (pass_regrename);\n-\t  NEXT_PASS (pass_cprop_hardreg);\n-\t  NEXT_PASS (pass_fast_rtl_dce);\n-\t  NEXT_PASS (pass_reorder_blocks);\n-\t  NEXT_PASS (pass_branch_target_load_optimize2);\n-\t  NEXT_PASS (pass_leaf_regs);\n-\t  NEXT_PASS (pass_split_before_sched2);\n-\t  NEXT_PASS (pass_sched2);\n-\t  NEXT_PASS (pass_stack_regs);\n-\t  PUSH_INSERT_PASSES_WITHIN (pass_stack_regs)\n-\t      NEXT_PASS (pass_split_before_regstack);\n-\t      NEXT_PASS (pass_stack_regs_run);\n-\t  POP_INSERT_PASSES ()\n-\t  NEXT_PASS (pass_compute_alignments);\n-\t  NEXT_PASS (pass_duplicate_computed_gotos);\n-\t  NEXT_PASS (pass_variable_tracking);\n-\t  NEXT_PASS (pass_free_cfg);\n-\t  NEXT_PASS (pass_machine_reorg);\n-\t  NEXT_PASS (pass_cleanup_barriers);\n-\t  NEXT_PASS (pass_delay_slots);\n-\t  NEXT_PASS (pass_split_for_shorten_branches);\n-\t  NEXT_PASS (pass_convert_to_eh_region_ranges);\n-\t  NEXT_PASS (pass_shorten_branches);\n-\t  NEXT_PASS (pass_set_nothrow_function_flags);\n-\t  NEXT_PASS (pass_dwarf2_frame);\n-\t  NEXT_PASS (pass_final);\n-      POP_INSERT_PASSES ()\n-      NEXT_PASS (pass_df_finish);\n-  POP_INSERT_PASSES ()\n-  NEXT_PASS (pass_clean_state);\n-  TERMINATE_PASS_LIST ()\n+#include \"passes.def\"\n \n #undef INSERT_PASSES_AFTER\n #undef PUSH_INSERT_PASSES_WITHIN"}, {"sha": "61cfd9e7e95babec450bed187b7182598ace2d7f", "filename": "gcc/passes.def", "status": "added", "additions": 405, "deletions": 0, "changes": 405, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f9cdef43aad61c70a9f838d96c184bdffab7179/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f9cdef43aad61c70a9f838d96c184bdffab7179/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=0f9cdef43aad61c70a9f838d96c184bdffab7179", "patch": "@@ -0,0 +1,405 @@\n+/* Description of pass structure\n+   Copyright (C) 1987-2013 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/*\n+ Macros that should be defined when using this file:\n+   INSERT_PASSES_AFTER (PASS)\n+   PUSH_INSERT_PASSES_WITHIN (PASS)\n+   POP_INSERT_PASSES ()\n+   NEXT_PASS (PASS)\n+   TERMINATE_PASS_LIST ()\n+ */\n+\n+ /* All passes needed to lower the function into shape optimizers can\n+    operate on.  These passes are always run first on the function, but\n+    backend might produce already lowered functions that are not processed\n+    by these passes.  */\n+  INSERT_PASSES_AFTER (all_lowering_passes)\n+  NEXT_PASS (pass_warn_unused_result);\n+  NEXT_PASS (pass_diagnose_omp_blocks);\n+  NEXT_PASS (pass_diagnose_tm_blocks);\n+  NEXT_PASS (pass_mudflap_1);\n+  NEXT_PASS (pass_lower_omp);\n+  NEXT_PASS (pass_lower_cf);\n+  NEXT_PASS (pass_lower_tm);\n+  NEXT_PASS (pass_refactor_eh);\n+  NEXT_PASS (pass_lower_eh);\n+  NEXT_PASS (pass_build_cfg);\n+  NEXT_PASS (pass_warn_function_return);\n+  NEXT_PASS (pass_expand_omp);\n+  NEXT_PASS (pass_build_cgraph_edges);\n+  TERMINATE_PASS_LIST ()\n+\n+  /* Interprocedural optimization passes.  */\n+  INSERT_PASSES_AFTER (all_small_ipa_passes)\n+  NEXT_PASS (pass_ipa_free_lang_data);\n+  NEXT_PASS (pass_ipa_function_and_variable_visibility);\n+  NEXT_PASS (pass_early_local_passes);\n+  PUSH_INSERT_PASSES_WITHIN (pass_early_local_passes)\n+      NEXT_PASS (pass_fixup_cfg);\n+      NEXT_PASS (pass_init_datastructures);\n+\n+      NEXT_PASS (pass_build_ssa);\n+      NEXT_PASS (pass_early_warn_uninitialized);\n+      NEXT_PASS (pass_rebuild_cgraph_edges);\n+      NEXT_PASS (pass_inline_parameters);\n+      NEXT_PASS (pass_early_inline);\n+      NEXT_PASS (pass_all_early_optimizations);\n+      PUSH_INSERT_PASSES_WITHIN (pass_all_early_optimizations)\n+\t  NEXT_PASS (pass_remove_cgraph_callee_edges);\n+\t  NEXT_PASS (pass_rename_ssa_copies);\n+\t  NEXT_PASS (pass_ccp);\n+\t  /* After CCP we rewrite no longer addressed locals into SSA\n+\t     form if possible.  */\n+\t  NEXT_PASS (pass_forwprop);\n+\t  /* pass_build_ealias is a dummy pass that ensures that we\n+\t     execute TODO_rebuild_alias at this point.  */\n+\t  NEXT_PASS (pass_build_ealias);\n+\t  NEXT_PASS (pass_sra_early);\n+\t  NEXT_PASS (pass_fre);\n+\t  NEXT_PASS (pass_copy_prop);\n+\t  NEXT_PASS (pass_merge_phi);\n+\t  NEXT_PASS (pass_cd_dce);\n+\t  NEXT_PASS (pass_early_ipa_sra);\n+\t  NEXT_PASS (pass_tail_recursion);\n+\t  NEXT_PASS (pass_convert_switch);\n+          NEXT_PASS (pass_cleanup_eh);\n+          NEXT_PASS (pass_profile);\n+          NEXT_PASS (pass_local_pure_const);\n+\t  /* Split functions creates parts that are not run through\n+\t     early optimizations again.  It is thus good idea to do this\n+\t     late.  */\n+          NEXT_PASS (pass_split_functions);\n+      POP_INSERT_PASSES ()\n+      NEXT_PASS (pass_release_ssa_names);\n+      NEXT_PASS (pass_rebuild_cgraph_edges);\n+      NEXT_PASS (pass_inline_parameters);\n+  POP_INSERT_PASSES ()\n+  NEXT_PASS (pass_ipa_free_inline_summary);\n+  NEXT_PASS (pass_ipa_tree_profile);\n+  PUSH_INSERT_PASSES_WITHIN (pass_ipa_tree_profile)\n+      NEXT_PASS (pass_feedback_split_functions);\n+  POP_INSERT_PASSES ()\n+  NEXT_PASS (pass_ipa_increase_alignment);\n+  NEXT_PASS (pass_ipa_tm);\n+  NEXT_PASS (pass_ipa_lower_emutls);\n+  TERMINATE_PASS_LIST ()\n+\n+  INSERT_PASSES_AFTER (all_regular_ipa_passes)\n+  NEXT_PASS (pass_ipa_whole_program_visibility);\n+  NEXT_PASS (pass_ipa_profile);\n+  NEXT_PASS (pass_ipa_cp);\n+  NEXT_PASS (pass_ipa_cdtor_merge);\n+  NEXT_PASS (pass_ipa_inline);\n+  NEXT_PASS (pass_ipa_pure_const);\n+  NEXT_PASS (pass_ipa_reference);\n+  TERMINATE_PASS_LIST ()\n+\n+  INSERT_PASSES_AFTER (all_lto_gen_passes)\n+  NEXT_PASS (pass_ipa_lto_gimple_out);\n+  NEXT_PASS (pass_ipa_lto_finish_out);  /* This must be the last LTO pass.  */\n+  TERMINATE_PASS_LIST ()\n+\n+  /* Simple IPA passes executed after the regular passes.  In WHOPR mode the\n+     passes are executed after partitioning and thus see just parts of the\n+     compiled unit.  */\n+  INSERT_PASSES_AFTER (all_late_ipa_passes)\n+  NEXT_PASS (pass_ipa_pta);\n+  TERMINATE_PASS_LIST ()\n+\n+  /* These passes are run after IPA passes on every function that is being\n+     output to the assembler file.  */\n+  INSERT_PASSES_AFTER (all_passes)\n+  NEXT_PASS (pass_fixup_cfg);\n+  NEXT_PASS (pass_lower_eh_dispatch);\n+  NEXT_PASS (pass_all_optimizations);\n+  PUSH_INSERT_PASSES_WITHIN (pass_all_optimizations)\n+      NEXT_PASS (pass_remove_cgraph_callee_edges);\n+      /* Initial scalar cleanups before alias computation.\n+\t They ensure memory accesses are not indirect wherever possible.  */\n+      NEXT_PASS (pass_strip_predict_hints);\n+      NEXT_PASS (pass_rename_ssa_copies);\n+      NEXT_PASS (pass_copy_prop);\n+      NEXT_PASS (pass_complete_unrolli);\n+      NEXT_PASS (pass_ccp);\n+      /* After CCP we rewrite no longer addressed locals into SSA\n+\t form if possible.  */\n+      NEXT_PASS (pass_phiprop);\n+      NEXT_PASS (pass_forwprop);\n+      /* pass_build_alias is a dummy pass that ensures that we\n+\t execute TODO_rebuild_alias at this point.  */\n+      NEXT_PASS (pass_build_alias);\n+      NEXT_PASS (pass_return_slot);\n+      NEXT_PASS (pass_fre);\n+      NEXT_PASS (pass_copy_prop);\n+      NEXT_PASS (pass_merge_phi);\n+      NEXT_PASS (pass_vrp);\n+      NEXT_PASS (pass_dce);\n+      NEXT_PASS (pass_call_cdce);\n+      NEXT_PASS (pass_cselim);\n+      NEXT_PASS (pass_tree_ifcombine);\n+      NEXT_PASS (pass_phiopt);\n+      NEXT_PASS (pass_tail_recursion);\n+      NEXT_PASS (pass_ch);\n+      NEXT_PASS (pass_stdarg);\n+      NEXT_PASS (pass_lower_complex);\n+      NEXT_PASS (pass_sra);\n+      NEXT_PASS (pass_rename_ssa_copies);\n+      /* The dom pass will also resolve all __builtin_constant_p calls\n+         that are still there to 0.  This has to be done after some\n+\t propagations have already run, but before some more dead code\n+\t is removed, and this place fits nicely.  Remember this when\n+\t trying to move or duplicate pass_dominator somewhere earlier.  */\n+      NEXT_PASS (pass_dominator);\n+      /* The only const/copy propagation opportunities left after\n+\t DOM should be due to degenerate PHI nodes.  So rather than\n+\t run the full propagators, run a specialized pass which\n+\t only examines PHIs to discover const/copy propagation\n+\t opportunities.  */\n+      NEXT_PASS (pass_phi_only_cprop);\n+      NEXT_PASS (pass_dse);\n+      NEXT_PASS (pass_reassoc);\n+      NEXT_PASS (pass_dce);\n+      NEXT_PASS (pass_forwprop);\n+      NEXT_PASS (pass_phiopt);\n+      NEXT_PASS (pass_object_sizes);\n+      NEXT_PASS (pass_strlen);\n+      NEXT_PASS (pass_ccp);\n+      /* After CCP we rewrite no longer addressed locals into SSA\n+\t form if possible.  */\n+      NEXT_PASS (pass_copy_prop);\n+      NEXT_PASS (pass_cse_sincos);\n+      NEXT_PASS (pass_optimize_bswap);\n+      NEXT_PASS (pass_split_crit_edges);\n+      NEXT_PASS (pass_pre);\n+      NEXT_PASS (pass_sink_code);\n+      NEXT_PASS (pass_asan);\n+      NEXT_PASS (pass_tsan);\n+      NEXT_PASS (pass_tree_loop);\n+      PUSH_INSERT_PASSES_WITHIN (pass_tree_loop)\n+\t  NEXT_PASS (pass_tree_loop_init);\n+\t  NEXT_PASS (pass_lim);\n+\t  NEXT_PASS (pass_copy_prop);\n+\t  NEXT_PASS (pass_dce_loop);\n+\t  NEXT_PASS (pass_tree_unswitch);\n+\t  NEXT_PASS (pass_scev_cprop);\n+\t  NEXT_PASS (pass_record_bounds);\n+\t  NEXT_PASS (pass_check_data_deps);\n+\t  NEXT_PASS (pass_loop_distribution);\n+\t  NEXT_PASS (pass_copy_prop);\n+\t  NEXT_PASS (pass_graphite);\n+\t  PUSH_INSERT_PASSES_WITHIN (pass_graphite)\n+\t      NEXT_PASS (pass_graphite_transforms);\n+\t      NEXT_PASS (pass_lim);\n+\t      NEXT_PASS (pass_copy_prop);\n+\t      NEXT_PASS (pass_dce_loop);\n+\t  POP_INSERT_PASSES ()\n+\t  NEXT_PASS (pass_iv_canon);\n+\t  NEXT_PASS (pass_parallelize_loops);\n+\t  NEXT_PASS (pass_if_conversion);\n+\t  NEXT_PASS (pass_vectorize);\n+          PUSH_INSERT_PASSES_WITHIN (pass_vectorize)\n+\t      NEXT_PASS (pass_dce_loop);\n+          POP_INSERT_PASSES ()\n+          NEXT_PASS (pass_predcom);\n+\t  NEXT_PASS (pass_complete_unroll);\n+\t  NEXT_PASS (pass_slp_vectorize);\n+\t  NEXT_PASS (pass_loop_prefetch);\n+\t  NEXT_PASS (pass_iv_optimize);\n+\t  NEXT_PASS (pass_lim);\n+\t  NEXT_PASS (pass_tree_loop_done);\n+      POP_INSERT_PASSES ()\n+      NEXT_PASS (pass_lower_vector_ssa);\n+      NEXT_PASS (pass_cse_reciprocals);\n+      NEXT_PASS (pass_reassoc);\n+      NEXT_PASS (pass_strength_reduction);\n+      NEXT_PASS (pass_dominator);\n+      /* The only const/copy propagation opportunities left after\n+\t DOM should be due to degenerate PHI nodes.  So rather than\n+\t run the full propagators, run a specialized pass which\n+\t only examines PHIs to discover const/copy propagation\n+\t opportunities.  */\n+      NEXT_PASS (pass_phi_only_cprop);\n+      NEXT_PASS (pass_vrp);\n+      NEXT_PASS (pass_cd_dce);\n+      NEXT_PASS (pass_tracer);\n+\n+      /* FIXME: If DCE is not run before checking for uninitialized uses,\n+\t we may get false warnings (e.g., testsuite/gcc.dg/uninit-5.c).\n+\t However, this also causes us to misdiagnose cases that should be\n+\t real warnings (e.g., testsuite/gcc.dg/pr18501.c).\n+\n+\t To fix the false positives in uninit-5.c, we would have to\n+\t account for the predicates protecting the set and the use of each\n+\t variable.  Using a representation like Gated Single Assignment\n+\t may help.  */\n+      NEXT_PASS (pass_late_warn_uninitialized);\n+      NEXT_PASS (pass_dse);\n+      NEXT_PASS (pass_forwprop);\n+      NEXT_PASS (pass_phiopt);\n+      NEXT_PASS (pass_fold_builtins);\n+      NEXT_PASS (pass_optimize_widening_mul);\n+      NEXT_PASS (pass_tail_calls);\n+      NEXT_PASS (pass_rename_ssa_copies);\n+      NEXT_PASS (pass_uncprop);\n+      NEXT_PASS (pass_local_pure_const);\n+  POP_INSERT_PASSES ()\n+  NEXT_PASS (pass_all_optimizations_g);\n+  PUSH_INSERT_PASSES_WITHIN (pass_all_optimizations_g)\n+      NEXT_PASS (pass_remove_cgraph_callee_edges);\n+      NEXT_PASS (pass_strip_predict_hints);\n+      /* Lower remaining pieces of GIMPLE.  */\n+      NEXT_PASS (pass_lower_complex);\n+      NEXT_PASS (pass_lower_vector_ssa);\n+      /* Perform simple scalar cleanup which is constant/copy propagation.  */\n+      NEXT_PASS (pass_ccp);\n+      NEXT_PASS (pass_object_sizes);\n+      /* Fold remaining builtins.  */\n+      NEXT_PASS (pass_fold_builtins);\n+      /* Copy propagation also copy-propagates constants, this is necessary\n+         to forward object-size and builtin folding results properly.  */\n+      NEXT_PASS (pass_copy_prop);\n+      NEXT_PASS (pass_dce);\n+      NEXT_PASS (pass_asan);\n+      NEXT_PASS (pass_tsan);\n+      NEXT_PASS (pass_rename_ssa_copies);\n+      /* ???  We do want some kind of loop invariant motion, but we possibly\n+         need to adjust LIM to be more friendly towards preserving accurate\n+\t debug information here.  */\n+      NEXT_PASS (pass_late_warn_uninitialized);\n+      NEXT_PASS (pass_uncprop);\n+      NEXT_PASS (pass_local_pure_const);\n+  POP_INSERT_PASSES ()\n+  NEXT_PASS (pass_tm_init);\n+  PUSH_INSERT_PASSES_WITHIN (pass_tm_init)\n+      NEXT_PASS (pass_tm_mark);\n+      NEXT_PASS (pass_tm_memopt);\n+      NEXT_PASS (pass_tm_edges);\n+  POP_INSERT_PASSES ()\n+  NEXT_PASS (pass_lower_vector);\n+  NEXT_PASS (pass_lower_complex_O0);\n+  NEXT_PASS (pass_asan_O0);\n+  NEXT_PASS (pass_tsan_O0);\n+  NEXT_PASS (pass_cleanup_eh);\n+  NEXT_PASS (pass_lower_resx);\n+  NEXT_PASS (pass_nrv);\n+  NEXT_PASS (pass_mudflap_2);\n+  NEXT_PASS (pass_cleanup_cfg_post_optimizing);\n+  NEXT_PASS (pass_warn_function_noreturn);\n+\n+  NEXT_PASS (pass_expand);\n+\n+  NEXT_PASS (pass_rest_of_compilation);\n+  PUSH_INSERT_PASSES_WITHIN (pass_rest_of_compilation)\n+      NEXT_PASS (pass_instantiate_virtual_regs);\n+      NEXT_PASS (pass_into_cfg_layout_mode);\n+      NEXT_PASS (pass_jump);\n+      NEXT_PASS (pass_lower_subreg);\n+      NEXT_PASS (pass_df_initialize_opt);\n+      NEXT_PASS (pass_cse);\n+      NEXT_PASS (pass_rtl_fwprop);\n+      NEXT_PASS (pass_rtl_cprop);\n+      NEXT_PASS (pass_rtl_pre);\n+      NEXT_PASS (pass_rtl_hoist);\n+      NEXT_PASS (pass_rtl_cprop);\n+      NEXT_PASS (pass_rtl_store_motion);\n+      NEXT_PASS (pass_cse_after_global_opts);\n+      NEXT_PASS (pass_rtl_ifcvt);\n+      NEXT_PASS (pass_reginfo_init);\n+      /* Perform loop optimizations.  It might be better to do them a bit\n+\t sooner, but we want the profile feedback to work more\n+\t efficiently.  */\n+      NEXT_PASS (pass_loop2);\n+      PUSH_INSERT_PASSES_WITHIN (pass_loop2)\n+\t  NEXT_PASS (pass_rtl_loop_init);\n+\t  NEXT_PASS (pass_rtl_move_loop_invariants);\n+\t  NEXT_PASS (pass_rtl_unswitch);\n+\t  NEXT_PASS (pass_rtl_unroll_and_peel_loops);\n+\t  NEXT_PASS (pass_rtl_doloop);\n+\t  NEXT_PASS (pass_rtl_loop_done);\n+\t  TERMINATE_PASS_LIST ()\n+      POP_INSERT_PASSES ()\n+      NEXT_PASS (pass_web);\n+      NEXT_PASS (pass_rtl_cprop);\n+      NEXT_PASS (pass_cse2);\n+      NEXT_PASS (pass_rtl_dse1);\n+      NEXT_PASS (pass_rtl_fwprop_addr);\n+      NEXT_PASS (pass_inc_dec);\n+      NEXT_PASS (pass_initialize_regs);\n+      NEXT_PASS (pass_ud_rtl_dce);\n+      NEXT_PASS (pass_combine);\n+      NEXT_PASS (pass_if_after_combine);\n+      NEXT_PASS (pass_partition_blocks);\n+      NEXT_PASS (pass_regmove);\n+      NEXT_PASS (pass_outof_cfg_layout_mode);\n+      NEXT_PASS (pass_split_all_insns);\n+      NEXT_PASS (pass_lower_subreg2);\n+      NEXT_PASS (pass_df_initialize_no_opt);\n+      NEXT_PASS (pass_stack_ptr_mod);\n+      NEXT_PASS (pass_mode_switching);\n+      NEXT_PASS (pass_match_asm_constraints);\n+      NEXT_PASS (pass_sms);\n+      NEXT_PASS (pass_sched);\n+      NEXT_PASS (pass_ira);\n+      NEXT_PASS (pass_reload);\n+      NEXT_PASS (pass_postreload);\n+      PUSH_INSERT_PASSES_WITHIN (pass_postreload)\n+\t  NEXT_PASS (pass_postreload_cse);\n+\t  NEXT_PASS (pass_gcse2);\n+\t  NEXT_PASS (pass_split_after_reload);\n+\t  NEXT_PASS (pass_ree);\n+\t  NEXT_PASS (pass_compare_elim_after_reload);\n+\t  NEXT_PASS (pass_branch_target_load_optimize1);\n+\t  NEXT_PASS (pass_thread_prologue_and_epilogue);\n+\t  NEXT_PASS (pass_rtl_dse2);\n+\t  NEXT_PASS (pass_stack_adjustments);\n+\t  NEXT_PASS (pass_jump2);\n+\t  NEXT_PASS (pass_peephole2);\n+\t  NEXT_PASS (pass_if_after_reload);\n+\t  NEXT_PASS (pass_regrename);\n+\t  NEXT_PASS (pass_cprop_hardreg);\n+\t  NEXT_PASS (pass_fast_rtl_dce);\n+\t  NEXT_PASS (pass_reorder_blocks);\n+\t  NEXT_PASS (pass_branch_target_load_optimize2);\n+\t  NEXT_PASS (pass_leaf_regs);\n+\t  NEXT_PASS (pass_split_before_sched2);\n+\t  NEXT_PASS (pass_sched2);\n+\t  NEXT_PASS (pass_stack_regs);\n+\t  PUSH_INSERT_PASSES_WITHIN (pass_stack_regs)\n+\t      NEXT_PASS (pass_split_before_regstack);\n+\t      NEXT_PASS (pass_stack_regs_run);\n+\t  POP_INSERT_PASSES ()\n+\t  NEXT_PASS (pass_compute_alignments);\n+\t  NEXT_PASS (pass_duplicate_computed_gotos);\n+\t  NEXT_PASS (pass_variable_tracking);\n+\t  NEXT_PASS (pass_free_cfg);\n+\t  NEXT_PASS (pass_machine_reorg);\n+\t  NEXT_PASS (pass_cleanup_barriers);\n+\t  NEXT_PASS (pass_delay_slots);\n+\t  NEXT_PASS (pass_split_for_shorten_branches);\n+\t  NEXT_PASS (pass_convert_to_eh_region_ranges);\n+\t  NEXT_PASS (pass_shorten_branches);\n+\t  NEXT_PASS (pass_set_nothrow_function_flags);\n+\t  NEXT_PASS (pass_dwarf2_frame);\n+\t  NEXT_PASS (pass_final);\n+      POP_INSERT_PASSES ()\n+      NEXT_PASS (pass_df_finish);\n+  POP_INSERT_PASSES ()\n+  NEXT_PASS (pass_clean_state);\n+  TERMINATE_PASS_LIST ()"}]}