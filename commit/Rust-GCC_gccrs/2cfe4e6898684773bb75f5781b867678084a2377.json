{"sha": "2cfe4e6898684773bb75f5781b867678084a2377", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNmZTRlNjg5ODY4NDc3M2JiNzVmNTc4MWI4Njc2NzgwODRhMjM3Nw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-06-26T09:55:24Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-06-26T09:55:24Z"}, "message": "Nathan C.\n\n2003-06-26  Paolo Carlini  <pcarlini@unitus.it>\n            Nathan C. Myers  <ncm-nospam@cantrip.org>\n\n\t* include/bits/fstream.tcc (_M_underflow): When the actual\n\tend of file is reached, set 'uncommitted' mode to allow a\n\tnext write without an intervening seek (see C++98 27.8.1.1,2\n\tand C89 7.9.5.3).\n\t* testsuite/27_io/basic_filebuf/underflow/char/2.cc: New.\n\nCo-Authored-By: Nathan C. Myers <ncm-nospam@cantrip.org>\n\nFrom-SVN: r68522", "tree": {"sha": "0db62f96463851b43a272aff26ca99603b2265cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0db62f96463851b43a272aff26ca99603b2265cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cfe4e6898684773bb75f5781b867678084a2377", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cfe4e6898684773bb75f5781b867678084a2377", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cfe4e6898684773bb75f5781b867678084a2377", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cfe4e6898684773bb75f5781b867678084a2377/comments", "author": null, "committer": null, "parents": [{"sha": "1c72f4ef67bd14173d1b4b8f8e187ee9bdfc693e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c72f4ef67bd14173d1b4b8f8e187ee9bdfc693e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c72f4ef67bd14173d1b4b8f8e187ee9bdfc693e"}], "stats": {"total": 69, "additions": 67, "deletions": 2}, "files": [{"sha": "4d244376d974c91803e99a6b59d38d25455faa89", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe4e6898684773bb75f5781b867678084a2377/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe4e6898684773bb75f5781b867678084a2377/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2cfe4e6898684773bb75f5781b867678084a2377", "patch": "@@ -1,3 +1,12 @@\n+2003-06-26  Paolo Carlini  <pcarlini@unitus.it>\n+            Nathan C. Myers  <ncm-nospam@cantrip.org>\n+\n+\t* include/bits/fstream.tcc (_M_underflow): When the actual\n+\tend of file is reached, set 'uncommitted' mode to allow a\n+\tnext write without an intervening seek (see C++98 27.8.1.1,2\n+\tand C89 7.9.5.3).\n+\t* testsuite/27_io/basic_filebuf/underflow/char/2.cc: New.\n+\n 2003-06-25  Nathan C. Myers  <ncm-nospam@cantrip.org>\n \n \t* include/bits/streambuf.tcc (sbumpc, sputbackc, sungetc,"}, {"sha": "1568b6015fee7541e80a71890b7f40b6d9a9b5a2", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe4e6898684773bb75f5781b867678084a2377/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe4e6898684773bb75f5781b867678084a2377/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=2cfe4e6898684773bb75f5781b867678084a2377", "patch": "@@ -215,7 +215,7 @@ namespace std\n \t    {\n \t      char* __buf = static_cast<char*>(__builtin_alloca(__buflen));\n \t      __elen = _M_file.xsgetn(__buf, __buflen);\n-\t      \n+ \n \t      const char* __eend;\n \t      char_type* __iend;\n \t      codecvt_base::result __r;\n@@ -246,7 +246,15 @@ namespace std\n \t      __ret = traits_type::to_int_type(*this->gptr());\n \t      if (__bump)\n \t\tthis->gbump(1);\n-\t    }\t   \t    \n+\t    }\n+\t  else if (__elen == 0)\n+\t    {\n+\t      // If the actual end of file is reached, set 'uncommitted'\n+\t      // mode, thus allowing an immediate write without an \n+\t      // intervening seek.\n+\t      _M_set_buffer(-1);\n+\t      _M_reading = false;\n+\t    }\n \t}\n       _M_last_overflowed = false;\t\n       return __ret;"}, {"sha": "8032a42f6c8472b08c849d9583ffb3ca5d9a472f", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/underflow/char/2.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfe4e6898684773bb75f5781b867678084a2377/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfe4e6898684773bb75f5781b867678084a2377/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fchar%2F2.cc?ref=2cfe4e6898684773bb75f5781b867678084a2377", "patch": "@@ -0,0 +1,48 @@\n+// 2003-06-25 Paolo Carlini <pcarlini@unitus.it>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test = true;\n+  using namespace std;\n+\n+  filebuf fb_out, fb_in_out;\n+  \n+  fb_out.open(\"tmp_underflow.tst\", ios::out);\n+  fb_out.sputc('S');\n+  fb_out.sputc('T');\n+  fb_out.close();\n+\n+  fb_in_out.open(\"tmp_underflow.tst\", ios::in | ios::out);\n+  while (fb_in_out.sbumpc() != filebuf::traits_type::eof());\n+\n+  VERIFY( fb_in_out.sputc('x') == 'x' );\n+  fb_in_out.close();\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}]}