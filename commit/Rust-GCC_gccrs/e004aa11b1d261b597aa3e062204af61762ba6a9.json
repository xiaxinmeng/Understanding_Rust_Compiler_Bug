{"sha": "e004aa11b1d261b597aa3e062204af61762ba6a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTAwNGFhMTFiMWQyNjFiNTk3YWEzZTA2MjIwNGFmNjE3NjJiYTZhOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-06-03T13:10:13Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-06-03T13:10:13Z"}, "message": "tree-vect-data-refs.c (vect_analyze_group_access): Properly compute GROUP_GAP for the first element.\n\n2015-06-03  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-data-refs.c (vect_analyze_group_access): Properly\n\tcompute GROUP_GAP for the first element.\n\t* tree-vect-slp.c (vect_build_slp_tree_1): Remove restriction\n\ton in-group gaps.\n\n\t* gcc.dg/vect/bb-slp-36.c: New testcase.\n\nFrom-SVN: r224077", "tree": {"sha": "a02fed610be6458820ef2510b8d689c0791fa6aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a02fed610be6458820ef2510b8d689c0791fa6aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e004aa11b1d261b597aa3e062204af61762ba6a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e004aa11b1d261b597aa3e062204af61762ba6a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e004aa11b1d261b597aa3e062204af61762ba6a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e004aa11b1d261b597aa3e062204af61762ba6a9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fddde8d3d82bf11fa191d067dcf3ed505224089a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fddde8d3d82bf11fa191d067dcf3ed505224089a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fddde8d3d82bf11fa191d067dcf3ed505224089a"}], "stats": {"total": 106, "additions": 76, "deletions": 30}, "files": [{"sha": "f4d83dbfb6f73abedfd11af62614b2bd18bb7ffe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e004aa11b1d261b597aa3e062204af61762ba6a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e004aa11b1d261b597aa3e062204af61762ba6a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e004aa11b1d261b597aa3e062204af61762ba6a9", "patch": "@@ -1,3 +1,10 @@\n+2015-06-03  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-data-refs.c (vect_analyze_group_access): Properly\n+\tcompute GROUP_GAP for the first element.\n+\t* tree-vect-slp.c (vect_build_slp_tree_1): Remove restriction\n+\ton in-group gaps.\n+\n 2015-06-03  Nick Clifton  <nickc@redhat.com>\n \n \t* config/rl78/rl78-real.md: Add peepholes to avoid a register"}, {"sha": "43604b732dc2dbb3b4bb72cdb8a82e9a201bfb05", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e004aa11b1d261b597aa3e062204af61762ba6a9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e004aa11b1d261b597aa3e062204af61762ba6a9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e004aa11b1d261b597aa3e062204af61762ba6a9", "patch": "@@ -1,3 +1,7 @@\n+2015-06-03  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/bb-slp-36.c: New testcase.\n+\n 2015-06-03  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \t* gcc.dg/lto/chkp-removed-alias_0.c: New."}, {"sha": "f424d12835302e81a681cd8bf18cd653abc28c11", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-36.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e004aa11b1d261b597aa3e062204af61762ba6a9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-36.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e004aa11b1d261b597aa3e062204af61762ba6a9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-36.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-36.c?ref=e004aa11b1d261b597aa3e062204af61762ba6a9", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include \"tree-vect.h\"\n+\n+extern void abort (void);\n+\n+int a[8], b[8];\n+\n+void __attribute__((noinline,noclone))\n+foo(void)\n+{\n+  a[0] = b[0];\n+  a[1] = b[0];\n+  a[2] = b[3];\n+  a[3] = b[3];\n+  a[4] = b[4];\n+  a[5] = b[7];\n+  a[6] = b[4];\n+  a[7] = b[7];\n+}\n+\n+int main()\n+{\n+  int i;\n+  check_vect ();\n+  for (i = 0; i < 8; ++i)\n+    b[i] = i;\n+  foo ();\n+  if (a[0] != 0 || a[1] != 0 || a[2] != 3 || a[3] != 3\n+      || a[4] != 4 || a[5] != 7 || a[6] != 4 || a[7] != 7)\n+    abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"basic block vectorized\" \"slp2\" { target vect_perm } } } */"}, {"sha": "a019dba3ebd81b9f47837ca99a4363367713b865", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e004aa11b1d261b597aa3e062204af61762ba6a9/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e004aa11b1d261b597aa3e062204af61762ba6a9/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=e004aa11b1d261b597aa3e062204af61762ba6a9", "patch": "@@ -2205,29 +2205,33 @@ vect_analyze_group_access (struct data_reference *dr)\n \n       /* Check that the size of the interleaving is equal to count for stores,\n          i.e., that there are no gaps.  */\n-      if (groupsize != count)\n+      if (groupsize != count\n+\t  && !DR_IS_READ (dr))\n         {\n-          if (DR_IS_READ (dr))\n-            {\n-              slp_impossible = true;\n-              /* There is a gap after the last load in the group. This gap is a\n-                 difference between the groupsize and the number of elements.\n-\t\t When there is no gap, this difference should be 0.  */\n-              GROUP_GAP (vinfo_for_stmt (stmt)) = groupsize - count;\n-            }\n-          else\n-            {\n-              if (dump_enabled_p ())\n-                dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-                                 \"interleaved store with gaps\\n\");\n-              return false;\n-            }\n-        }\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t     \"interleaved store with gaps\\n\");\n+\t  return false;\n+\t}\n+\n+      /* If there is a gap after the last load in the group it is the\n+\t difference between the groupsize and the last accessed\n+\t element.\n+\t When there is no gap, this difference should be 0.  */\n+      GROUP_GAP (vinfo_for_stmt (stmt)) = groupsize - last_accessed_element;\n \n       GROUP_SIZE (vinfo_for_stmt (stmt)) = groupsize;\n       if (dump_enabled_p ())\n-        dump_printf_loc (MSG_NOTE, vect_location,\n-                         \"Detected interleaving of size %d\\n\", (int)groupsize);\n+\t{\n+\t  dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t   \"Detected interleaving of size %d starting with \",\n+\t\t\t   (int)groupsize);\n+\t  dump_gimple_stmt (MSG_NOTE, TDF_SLIM, stmt, 0);\n+\t  if (GROUP_GAP (vinfo_for_stmt (stmt)) != 0)\n+\t    dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t     \"There is a gap of %d elements after the group\\n\",\n+\t\t\t     (int)GROUP_GAP (vinfo_for_stmt (stmt)));\n+\t}\n \n       /* SLP: create an SLP data structure for every interleaving group of\n \t stores for further analysis in vect_analyse_slp.  */"}, {"sha": "5fd16352e395eb7c03b3002ece1aed40505ddd3f", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e004aa11b1d261b597aa3e062204af61762ba6a9/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e004aa11b1d261b597aa3e062204af61762ba6a9/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=e004aa11b1d261b597aa3e062204af61762ba6a9", "patch": "@@ -777,17 +777,13 @@ vect_build_slp_tree_1 (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n \t\t    (*max_nunits, group_size) / group_size;\n               /* FORNOW: Check that there is no gap between the loads\n \t\t and no gap between the groups when we need to load\n-\t\t multiple groups at once.\n-\t\t ???  We should enhance this to only disallow gaps\n-\t\t inside vectors.  */\n-              if ((unrolling_factor > 1\n-\t\t   && ((GROUP_FIRST_ELEMENT (vinfo_for_stmt (stmt)) == stmt\n-\t\t\t&& GROUP_GAP (vinfo_for_stmt (stmt)) != 0)\n-\t\t       /* If the group is split up then GROUP_GAP\n-\t\t\t  isn't correct here, nor is GROUP_FIRST_ELEMENT.  */\n-\t\t       || GROUP_SIZE (vinfo_for_stmt (stmt)) > group_size))\n-\t\t  || (GROUP_FIRST_ELEMENT (vinfo_for_stmt (stmt)) != stmt\n-\t\t      && GROUP_GAP (vinfo_for_stmt (stmt)) != 1))\n+\t\t multiple groups at once.  */\n+              if (unrolling_factor > 1\n+\t\t  && ((GROUP_FIRST_ELEMENT (vinfo_for_stmt (stmt)) == stmt\n+\t\t       && GROUP_GAP (vinfo_for_stmt (stmt)) != 0)\n+\t\t      /* If the group is split up then GROUP_GAP\n+\t\t\t isn't correct here, nor is GROUP_FIRST_ELEMENT.  */\n+\t\t      || GROUP_SIZE (vinfo_for_stmt (stmt)) > group_size))\n                 {\n                   if (dump_enabled_p ())\n                     {"}]}