{"sha": "57a4f5e4eacfbbbd0ca5f1e3f946c27d63e2b533", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdhNGY1ZTRlYWNmYmJiZDBjYTVmMWUzZjk0NmMyN2Q2M2UyYjUzMw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-01-14T14:26:19Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-01-14T16:26:30Z"}, "message": "libstdc++: Define function to throw filesystem_error [PR 98471]\n\nFix ordering problem on Windows targets where filesystem_error was used\nbefore being defined.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/98471\n\t* include/bits/fs_path.h (__throw_conversion_error): New\n\tfunction to throw or abort on character conversion errors.\n\t(__wstr_from_utf8): Move definition after filesystem_error has\n\tbeen defined. Use __throw_conversion_error.\n\t(path::_S_convert<_EcharT>): Use __throw_conversion_error.\n\t(path::_S_str_convert<_CharT, _Traits, _Allocator>): Likewise.\n\t(path::u8string): Likewise.", "tree": {"sha": "f30f17d0467bcde9a963eb8537742daceb4ee094", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f30f17d0467bcde9a963eb8537742daceb4ee094"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57a4f5e4eacfbbbd0ca5f1e3f946c27d63e2b533", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57a4f5e4eacfbbbd0ca5f1e3f946c27d63e2b533", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57a4f5e4eacfbbbd0ca5f1e3f946c27d63e2b533", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57a4f5e4eacfbbbd0ca5f1e3f946c27d63e2b533/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa3d33dccb57621b2ab2029dce79208c0c9392c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa3d33dccb57621b2ab2029dce79208c0c9392c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa3d33dccb57621b2ab2029dce79208c0c9392c1"}], "stats": {"total": 61, "additions": 34, "deletions": 27}, "files": [{"sha": "1645c53cf5375cb50cb702d689f588b6c04b2ced", "filename": "libstdc++-v3/include/bits/fs_path.h", "status": "modified", "additions": 34, "deletions": 27, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a4f5e4eacfbbbd0ca5f1e3f946c27d63e2b533/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a4f5e4eacfbbbd0ca5f1e3f946c27d63e2b533/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h?ref=57a4f5e4eacfbbbd0ca5f1e3f946c27d63e2b533", "patch": "@@ -238,24 +238,6 @@ namespace __detail\n \treturn basic_string<_EcharT>(__first, __last);\n     }\n \n-#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n-  template<typename _Tp>\n-    inline std::wstring\n-    __wstr_from_utf8(const _Tp& __str)\n-    {\n-      static_assert(std::is_same_v<typename _Tp::value_type, char>);\n-      std::wstring __wstr;\n-      // XXX This assumes native wide encoding is UTF-16.\n-      std::codecvt_utf8_utf16<wchar_t> __wcvt;\n-      const auto __p = __str.data();\n-      if (!__str_codecvt_in_all(__p, __p + __str.size(), __wstr, __wcvt))\n-\t_GLIBCXX_THROW_OR_ABORT(filesystem_error(\n-\t      \"Cannot convert character sequence\",\n-\t      std::make_error_code(errc::illegal_byte_sequence)));\n-      return __wstr;\n-    }\n-#endif\n-\n } // namespace __detail\n   /// @endcond\n \n@@ -743,6 +725,37 @@ namespace __detail\n     std::__shared_ptr<const _Impl> _M_impl;\n   };\n \n+  /// @cond undocumented\n+namespace __detail\n+{\n+  [[noreturn]] inline void\n+  __throw_conversion_error()\n+  {\n+    _GLIBCXX_THROW_OR_ABORT(filesystem_error(\n+\t \"Cannot convert character sequence\",\n+\t std::make_error_code(errc::illegal_byte_sequence)));\n+  }\n+\n+#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+  template<typename _Tp>\n+    inline std::wstring\n+    __wstr_from_utf8(const _Tp& __str)\n+    {\n+      static_assert(std::is_same_v<typename _Tp::value_type, char>);\n+      std::wstring __wstr;\n+      // XXX This assumes native wide encoding is UTF-16.\n+      std::codecvt_utf8_utf16<wchar_t> __wcvt;\n+      const auto __p = __str.data();\n+      if (!__str_codecvt_in_all(__p, __p + __str.size(), __wstr, __wcvt))\n+\t__detail::__throw_conversion_error();\n+      return __wstr;\n+    }\n+#endif\n+\n+} // namespace __detail\n+  /// @endcond\n+\n+\n   /** Create a path from a UTF-8-encoded sequence of char\n    *\n    * @relates std::filesystem::path\n@@ -846,9 +859,7 @@ namespace __detail\n \t  if (__str_codecvt_out_all(__f, __l, __str, __cvt))\n \t    return __str;\n #endif\n-\t  _GLIBCXX_THROW_OR_ABORT(filesystem_error(\n-\t\t\"Cannot convert character sequence\",\n-\t\tstd::make_error_code(errc::illegal_byte_sequence)));\n+\t  __detail::__throw_conversion_error();\n \t}\n     }\n \n@@ -1058,9 +1069,7 @@ namespace __detail\n #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n       } }\n #endif\n-      _GLIBCXX_THROW_OR_ABORT(filesystem_error(\n-\t    \"Cannot convert character sequence\",\n-\t    std::make_error_code(errc::illegal_byte_sequence)));\n+      __detail::__throw_conversion_error();\n     }\n   /// @endcond\n \n@@ -1097,9 +1106,7 @@ namespace __detail\n     const value_type* __last = __first + _M_pathname.size();\n     if (__str_codecvt_out_all(__first, __last, __str, __cvt))\n       return __str;\n-    _GLIBCXX_THROW_OR_ABORT(filesystem_error(\n-\t  \"Cannot convert character sequence\",\n-\t  std::make_error_code(errc::illegal_byte_sequence)));\n+    __detail::__throw_conversion_error();\n #else\n     return _M_pathname;\n #endif"}]}