{"sha": "b650f41d81612294f0b85f21cd70e0afc0a435e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY1MGY0MWQ4MTYxMjI5NGYwYjg1ZjIxY2Q3MGUwYWZjMGE0MzVlMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-08-29T15:43:07Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-08-29T15:43:07Z"}, "message": "trans.c: Protect < in error msg with quote Replace GCC_ZCX by Back_End_Exceptions.\n\n2005-08-29  Arnaud Charlet  <charlet@adacore.com>\n\t    Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* trans.c: Protect < in error msg with quote\n\tReplace GCC_ZCX by Back_End_Exceptions.\n\t(addressable_p) <COMPONENT_REF>: Also return 1 if the field\n\thas been sufficiently aligned in the record.\n\nFrom-SVN: r103607", "tree": {"sha": "06306f38c9dd2c9fd04f4c22dc74ce5ec981a471", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06306f38c9dd2c9fd04f4c22dc74ce5ec981a471"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b650f41d81612294f0b85f21cd70e0afc0a435e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b650f41d81612294f0b85f21cd70e0afc0a435e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b650f41d81612294f0b85f21cd70e0afc0a435e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b650f41d81612294f0b85f21cd70e0afc0a435e3/comments", "author": null, "committer": null, "parents": [{"sha": "8c1b16bcbc337f5207771e6304632e7454658788", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c1b16bcbc337f5207771e6304632e7454658788", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c1b16bcbc337f5207771e6304632e7454658788"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "fb741a3e03081409cfc78c80de97f7e8d79c0592", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b650f41d81612294f0b85f21cd70e0afc0a435e3/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b650f41d81612294f0b85f21cd70e0afc0a435e3/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=b650f41d81612294f0b85f21cd70e0afc0a435e3", "patch": "@@ -234,7 +234,7 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name,\n #endif\n \n   /* If we are using the GCC exception mechanism, let GCC know.  */\n-  if (Exception_Mechanism == GCC_ZCX)\n+  if (Exception_Mechanism == Back_End_Exceptions)\n     gnat_init_gcc_eh ();\n \n   gcc_assert (Nkind (gnat_root) == N_Compilation_Unit);\n@@ -285,8 +285,6 @@ gnat_init_stmt_group ()\n   /* Enable GNAT stack checking method if needed */\n   if (!Stack_Check_Probes_On_Target)\n     set_stack_check_libfunc (gen_rtx_SYMBOL_REF (Pmode, \"_gnat_stack_check\"));\n-\n-  gcc_assert (Exception_Mechanism != Front_End_ZCX);\n }\n \f\n /* Subroutine of gnat_to_gnu to translate gnat_node, an N_Identifier,\n@@ -2020,7 +2018,7 @@ Handled_Sequence_Of_Statements_to_gnu (Node_Id gnat_node)\n   /* If just annotating, ignore all EH and cleanups.  */\n   bool gcc_zcx = (!type_annotate_only\n \t\t  && Present (Exception_Handlers (gnat_node))\n-\t\t  && Exception_Mechanism == GCC_ZCX);\n+\t\t  && Exception_Mechanism == Back_End_Exceptions);\n   bool setjmp_longjmp\n     = (!type_annotate_only && Present (Exception_Handlers (gnat_node))\n        && Exception_Mechanism == Setjmp_Longjmp);\n@@ -3119,7 +3117,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \n \t  if (align != 0 && align < oalign && !TYPE_ALIGN_OK (gnu_obj_type))\n \t    post_error_ne_tree_2\n-\t      (\"?source alignment (^) < alignment of & (^)\",\n+\t      (\"?source alignment (^) '< alignment of & (^)\",\n \t       gnat_node, Designated_Type (Etype (gnat_node)),\n \t       size_int (align / BITS_PER_UNIT), oalign / BITS_PER_UNIT);\n \t}\n@@ -3800,7 +3798,7 @@ gnat_to_gnu (Node_Id gnat_node)\n     case N_Exception_Handler:\n       if (Exception_Mechanism == Setjmp_Longjmp)\n \tgnu_result = Exception_Handler_to_gnu_sjlj (gnat_node);\n-      else if (Exception_Mechanism == GCC_ZCX)\n+      else if (Exception_Mechanism == Back_End_Exceptions)\n \tgnu_result = Exception_Handler_to_gnu_zcx (gnat_node);\n       else\n \tgcc_unreachable ();\n@@ -5342,9 +5340,8 @@ convert_with_check (Entity_Id gnat_type, tree gnu_expr, bool overflowp,\n }\n \f\n /* Return 1 if GNU_EXPR can be directly addressed.  This is the case unless\n-   it is an expression involving computation or if it involves a bitfield\n-   reference.  This returns the same as gnat_mark_addressable in most\n-   cases.  */\n+   it is an expression involving computation or if it involves a reference\n+   to a bitfield or to a field not sufficiently aligned for its type.  */\n \n static bool\n addressable_p (tree gnu_expr)\n@@ -5368,8 +5365,15 @@ addressable_p (tree gnu_expr)\n \n     case COMPONENT_REF:\n       return (!DECL_BIT_FIELD (TREE_OPERAND (gnu_expr, 1))\n-\t      && !(STRICT_ALIGNMENT\n-\t\t   && DECL_NONADDRESSABLE_P (TREE_OPERAND (gnu_expr, 1)))\n+\t      && (!STRICT_ALIGNMENT\n+\t          /* If the field was marked as \"semantically\" addressable\n+\t\t     in create_field_decl, we are guaranteed that it can\n+\t\t     be directly addressed.  */\n+\t\t  || !DECL_NONADDRESSABLE_P (TREE_OPERAND (gnu_expr, 1))\n+\t\t  /* Otherwise it can nevertheless be directly addressed\n+\t\t     if it has been sufficiently aligned in the record.  */\n+\t\t  || DECL_ALIGN (TREE_OPERAND (gnu_expr, 1))\n+\t\t       >= TYPE_ALIGN (TREE_TYPE (gnu_expr)))\n \t      && addressable_p (TREE_OPERAND (gnu_expr, 0)));\n \n     case ARRAY_REF:  case ARRAY_RANGE_REF:"}]}