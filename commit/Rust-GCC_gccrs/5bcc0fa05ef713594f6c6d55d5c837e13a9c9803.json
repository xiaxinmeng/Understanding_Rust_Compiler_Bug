{"sha": "5bcc0fa05ef713594f6c6d55d5c837e13a9c9803", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJjYzBmYTA1ZWY3MTM1OTRmNmM2ZDU1ZDVjODM3ZTEzYTljOTgwMw==", "commit": {"author": {"name": "Jose E. Marchesi", "email": "jose.marchesi@oracle.com", "date": "2020-09-14T18:35:22Z"}, "committer": {"name": "Jose E. Marchesi", "email": "jose.marchesi@oracle.com", "date": "2020-09-14T18:55:13Z"}, "message": "bpf: use the expected instruction for NOPs\n\nThe BPF ISA doesn't have a no-operation instruction, but in practice\nthe Linux kernel verifier performs some optimizations that rely on\nthese instructions to be encoded in a particular way.  As it turns\nout, we were using the \"wrong\" instruction in GCC.\n\nThis patch makes GCC to generate the expected instruction for NOP (a\n`ja 0') and also adds a test to make sure this is the case.\n\nTested in bpf-unknown-none targets.\n\n2020-09-14  Jose E. Marchesi  <jose.marchesi@oracle.com>\n\ngcc/\n\n\t* config/bpf/bpf.md (\"nop\"): Re-define as `ja 0'.\n\ngcc/testsuite/\n\n\t* gcc.target/bpf/nop-1.c: New test.", "tree": {"sha": "336921426970c02b302f8df7f7e68c5157d364b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/336921426970c02b302f8df7f7e68c5157d364b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bcc0fa05ef713594f6c6d55d5c837e13a9c9803", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bcc0fa05ef713594f6c6d55d5c837e13a9c9803", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bcc0fa05ef713594f6c6d55d5c837e13a9c9803", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bcc0fa05ef713594f6c6d55d5c837e13a9c9803/comments", "author": {"login": "jemarch", "id": 7061875, "node_id": "MDQ6VXNlcjcwNjE4NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7061875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jemarch", "html_url": "https://github.com/jemarch", "followers_url": "https://api.github.com/users/jemarch/followers", "following_url": "https://api.github.com/users/jemarch/following{/other_user}", "gists_url": "https://api.github.com/users/jemarch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jemarch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jemarch/subscriptions", "organizations_url": "https://api.github.com/users/jemarch/orgs", "repos_url": "https://api.github.com/users/jemarch/repos", "events_url": "https://api.github.com/users/jemarch/events{/privacy}", "received_events_url": "https://api.github.com/users/jemarch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jemarch", "id": 7061875, "node_id": "MDQ6VXNlcjcwNjE4NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7061875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jemarch", "html_url": "https://github.com/jemarch", "followers_url": "https://api.github.com/users/jemarch/followers", "following_url": "https://api.github.com/users/jemarch/following{/other_user}", "gists_url": "https://api.github.com/users/jemarch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jemarch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jemarch/subscriptions", "organizations_url": "https://api.github.com/users/jemarch/orgs", "repos_url": "https://api.github.com/users/jemarch/repos", "events_url": "https://api.github.com/users/jemarch/events{/privacy}", "received_events_url": "https://api.github.com/users/jemarch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a3e6e975abd2b19fc12da7e5430e2a05e92ebcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a3e6e975abd2b19fc12da7e5430e2a05e92ebcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a3e6e975abd2b19fc12da7e5430e2a05e92ebcc"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "769d8ea009691c147e7c37f9bf37b6db637da2c4", "filename": "gcc/config/bpf/bpf.md", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bcc0fa05ef713594f6c6d55d5c837e13a9c9803/gcc%2Fconfig%2Fbpf%2Fbpf.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bcc0fa05ef713594f6c6d55d5c837e13a9c9803/gcc%2Fconfig%2Fbpf%2Fbpf.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbpf%2Fbpf.md?ref=5bcc0fa05ef713594f6c6d55d5c837e13a9c9803", "patch": "@@ -82,10 +82,15 @@\n \n ;;;; NOPs\n \n+;; The Linux kernel verifier performs some optimizations that rely on\n+;; nop instructions to be encoded as `ja 0', i.e. a jump to offset 0,\n+;; which actually means to jump to the next instruction, since in BPF\n+;; offsets are expressed in 64-bit words _minus one_.\n+\n (define_insn \"nop\"\n   [(const_int 0)]\n   \"\"\n-  \"mov\\t%%r0,%%r0\"\n+  \"ja\\t0\"\n   [(set_attr \"type\" \"alu\")])\n \n ;;;; Arithmetic/Logical"}, {"sha": "c4d274f6badbd670ddce83a392edca25196dd0b2", "filename": "gcc/testsuite/gcc.target/bpf/nop-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bcc0fa05ef713594f6c6d55d5c837e13a9c9803/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fnop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bcc0fa05ef713594f6c6d55d5c837e13a9c9803/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fnop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fnop-1.c?ref=5bcc0fa05ef713594f6c6d55d5c837e13a9c9803", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 --patchable-function-entry=2,1\" } */\n+\n+/* The purpose of this test is to make sure the right instruction is\n+   generated for NOPs.  See bpf.md for a description on why this is\n+   important.  */\n+\n+int\n+foo ()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"foo:\\n\\t*ja\\t0\" } } */"}]}