{"sha": "0e01499666a5032861459cd9fd07bdb8df149637", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUwMTQ5OTY2NmE1MDMyODYxNDU5Y2Q5ZmQwN2JkYjhkZjE0OTYzNw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-09-18T03:25:06Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-09-18T03:25:06Z"}, "message": "tree-cfg.c (is_ctrl_altering_stmt, [...]): Don't use const_get_call_expr_in.\n\n\t* tree-cfg.c (is_ctrl_altering_stmt, tree_block_ends_with_call_p):\n\tDon't use const_get_call_expr_in.\n\t* tree-gimple.c (const_get_call_expr_in): Delete.\n\t* tree-gimple.h (const_get_call_expr_in): Likewise.\n\nFrom-SVN: r128569", "tree": {"sha": "ec582d552dcb92bb22aaf8ec7640fc36fa032539", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec582d552dcb92bb22aaf8ec7640fc36fa032539"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e01499666a5032861459cd9fd07bdb8df149637", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e01499666a5032861459cd9fd07bdb8df149637", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e01499666a5032861459cd9fd07bdb8df149637", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e01499666a5032861459cd9fd07bdb8df149637/comments", "author": null, "committer": null, "parents": [{"sha": "e49e06d8d0dc95ae92d4601c4731d218459e5dfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e49e06d8d0dc95ae92d4601c4731d218459e5dfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e49e06d8d0dc95ae92d4601c4731d218459e5dfd"}], "stats": {"total": 40, "additions": 18, "deletions": 22}, "files": [{"sha": "d9f37e82e5ad5453186276411ebebdb625333cb0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e01499666a5032861459cd9fd07bdb8df149637/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e01499666a5032861459cd9fd07bdb8df149637/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e01499666a5032861459cd9fd07bdb8df149637", "patch": "@@ -1,3 +1,10 @@\n+2007-09-17  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* tree-cfg.c (is_ctrl_altering_stmt, tree_block_ends_with_call_p):\n+\tDon't use const_get_call_expr_in.\n+\t* tree-gimple.c (const_get_call_expr_in): Delete.\n+\t* tree-gimple.h (const_get_call_expr_in): Likewise.\n+\n 2007-09-18  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \t* df-scan.c (df_notes_rescan): Do nothing if the instruction does"}, {"sha": "fd981f35b0e613b41142081ba7e9fa25a4527c57", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e01499666a5032861459cd9fd07bdb8df149637/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e01499666a5032861459cd9fd07bdb8df149637/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=0e01499666a5032861459cd9fd07bdb8df149637", "patch": "@@ -2459,7 +2459,7 @@ is_ctrl_altering_stmt (const_tree t)\n   const_tree call;\n \n   gcc_assert (t);\n-  call = const_get_call_expr_in (t);\n+  call = get_call_expr_in (CONST_CAST_TREE (t));\n   if (call)\n     {\n       /* A non-pure/const CALL_EXPR alters flow control if the current\n@@ -6244,7 +6244,7 @@ static bool\n tree_block_ends_with_call_p (basic_block bb)\n {\n   block_stmt_iterator bsi = bsi_last (bb);\n-  return const_get_call_expr_in (bsi_stmt (bsi)) != NULL;\n+  return get_call_expr_in (bsi_stmt (bsi)) != NULL;\n }\n \n "}, {"sha": "8e976e201fef594a5ede683c6a4c57c8f058afab", "filename": "gcc/tree-gimple.c", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e01499666a5032861459cd9fd07bdb8df149637/gcc%2Ftree-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e01499666a5032861459cd9fd07bdb8df149637/gcc%2Ftree-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-gimple.c?ref=0e01499666a5032861459cd9fd07bdb8df149637", "patch": "@@ -436,28 +436,18 @@ is_gimple_call_addr (tree t)\n /* If T makes a function call, return the corresponding CALL_EXPR operand.\n    Otherwise, return NULL_TREE.  */\n \n-#define GET_CALL_EXPR_IN_BODY do { \\\n-  /* FIXME tuples: delete the assertion below when conversion complete.  */ \\\n-  gcc_assert (TREE_CODE (t) != MODIFY_EXPR); \\\n-  if (TREE_CODE (t) == GIMPLE_MODIFY_STMT) \\\n-    t = GIMPLE_STMT_OPERAND (t, 1); \\\n-  if (TREE_CODE (t) == WITH_SIZE_EXPR) \\\n-    t = TREE_OPERAND (t, 0); \\\n-  if (TREE_CODE (t) == CALL_EXPR) \\\n-    return t; \\\n-  return NULL_TREE; \\\n-} while (0)\n-\n tree\n get_call_expr_in (tree t)\n {\n-  GET_CALL_EXPR_IN_BODY;\n-}\n-\n-const_tree\n-const_get_call_expr_in (const_tree t)\n-{\n-  GET_CALL_EXPR_IN_BODY;\n+  /* FIXME tuples: delete the assertion below when conversion complete.  */\n+  gcc_assert (TREE_CODE (t) != MODIFY_EXPR);\n+  if (TREE_CODE (t) == GIMPLE_MODIFY_STMT)\n+    t = GIMPLE_STMT_OPERAND (t, 1);\n+  if (TREE_CODE (t) == WITH_SIZE_EXPR)\n+    t = TREE_OPERAND (t, 0);\n+  if (TREE_CODE (t) == CALL_EXPR)\n+    return t;\n+  return NULL_TREE;\n }\n \n /* Given a memory reference expression T, return its base address."}, {"sha": "09182d725cf1b32333b717c153508fd6fc2b6ff9", "filename": "gcc/tree-gimple.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e01499666a5032861459cd9fd07bdb8df149637/gcc%2Ftree-gimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e01499666a5032861459cd9fd07bdb8df149637/gcc%2Ftree-gimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-gimple.h?ref=0e01499666a5032861459cd9fd07bdb8df149637", "patch": "@@ -90,7 +90,6 @@ extern bool is_gimple_non_addressable (tree t);\n extern bool is_gimple_call_addr (tree);\n /* If T makes a function call, returns the CALL_EXPR operand.  */\n extern tree get_call_expr_in (tree t);\n-extern const_tree const_get_call_expr_in (const_tree t);\n \n extern void recalculate_side_effects (tree);\n "}]}