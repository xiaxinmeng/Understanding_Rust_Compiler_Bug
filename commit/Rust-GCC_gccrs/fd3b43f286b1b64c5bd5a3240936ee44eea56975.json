{"sha": "fd3b43f286b1b64c5bd5a3240936ee44eea56975", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQzYjQzZjI4NmIxYjY0YzViZDVhMzI0MDkzNmVlNDRlZWE1Njk3NQ==", "commit": {"author": {"name": "Dale Johannesen", "email": "dalej@apple.com", "date": "2001-12-17T19:11:13Z"}, "committer": {"name": "Dale Johannesen", "email": "dalej@gcc.gnu.org", "date": "2001-12-17T19:11:13Z"}, "message": "rs6000.h: CPP_CPU_SPEC: add mcpu=7400.\n\n         * config/rs6000/rs6000.h:  CPP_CPU_SPEC: add mcpu=7400.\n         ASM_CPU_SPEC: Ditto.\n         RTX_COSTS: Fix timing info for 7450 multiply.\n         * config/rs6000/rs6000.md:  Fix timing info for 7450 imul.\n         Allow floats to be kept in int regs in movsf_low,\n         movsf_low_st (Darwin only)\n\nFrom-SVN: r48117", "tree": {"sha": "83d9a00db66b32b5b094ca4b95ce4fd192b702d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83d9a00db66b32b5b094ca4b95ce4fd192b702d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd3b43f286b1b64c5bd5a3240936ee44eea56975", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd3b43f286b1b64c5bd5a3240936ee44eea56975", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd3b43f286b1b64c5bd5a3240936ee44eea56975", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd3b43f286b1b64c5bd5a3240936ee44eea56975/comments", "author": null, "committer": null, "parents": [{"sha": "9aa86737a8ce13a05302e7f4d1aa6e97fe505bb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aa86737a8ce13a05302e7f4d1aa6e97fe505bb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aa86737a8ce13a05302e7f4d1aa6e97fe505bb6"}], "stats": {"total": 89, "additions": 27, "deletions": 62}, "files": [{"sha": "05ea2a4624e7682812cb923b1772469f57e06d75", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd3b43f286b1b64c5bd5a3240936ee44eea56975/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd3b43f286b1b64c5bd5a3240936ee44eea56975/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd3b43f286b1b64c5bd5a3240936ee44eea56975", "patch": "@@ -1,3 +1,12 @@\n+2001-12-17  Dale Johannesen  <dalej@apple.com>\n+\n+         * config/rs6000/rs6000.h:  CPP_CPU_SPEC: add mcpu=7400.\n+         ASM_CPU_SPEC: Ditto.\n+         RTX_COSTS: Fix timing info for 7450 multiply.\n+         * config/rs6000/rs6000.md:  Fix timing info for 7450 imul.\n+         Allow floats to be kept in int regs in movsf_low,\n+         movsf_low_st (Darwin only)\n+\n 2001-12-17  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* config/rs6000/rs6000.c (vrsave_operation): Recognize SETs in"}, {"sha": "56d7f115840426ae0860f4ead0384c196f45ab9a", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd3b43f286b1b64c5bd5a3240936ee44eea56975/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd3b43f286b1b64c5bd5a3240936ee44eea56975/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=fd3b43f286b1b64c5bd5a3240936ee44eea56975", "patch": "@@ -76,6 +76,7 @@ Boston, MA 02111-1307, USA.  */\n %{mcpu=604e: -D_ARCH_PPC} \\\n %{mcpu=620: -D_ARCH_PPC} \\\n %{mcpu=740: -D_ARCH_PPC} \\\n+%{mcpu=7400: -D_ARCH_PPC} \\\n %{mcpu=7450: -D_ARCH_PPC} \\\n %{mcpu=750: -D_ARCH_PPC} \\\n %{mcpu=801: -D_ARCH_PPC} \\\n@@ -114,6 +115,7 @@ Boston, MA 02111-1307, USA.  */\n %{mcpu=604e: -mppc} \\\n %{mcpu=620: -mppc} \\\n %{mcpu=740: -mppc} \\\n+%{mcpu=7400: -mppc} \\\n %{mcpu=7450: -mppc} \\\n %{mcpu=750: -mppc} \\\n %{mcpu=801: -mppc} \\\n@@ -2073,7 +2075,7 @@ do {\t\t\t\t\t\t\t\t\t     \\\n       push_reload (XEXP (X, 0), NULL_RTX, &XEXP (X, 0), NULL,\t\t     \\\n                    BASE_REG_CLASS, GET_MODE (X), VOIDmode, 0, 0,\t     \\\n                    OPNUM, TYPE);\t\t\t\t\t     \\\n-      goto WIN;\t\t\t\t\t\t\t\t     \\\n+      goto WIN; \t\t\t\t\t\t\t     \\\n     }\t\t\t\t\t\t\t\t\t     \\\n   if (GET_CODE (X) == PLUS\t\t\t\t\t\t     \\\n       && GET_CODE (XEXP (X, 0)) == REG\t\t\t\t\t     \\\n@@ -2326,12 +2328,15 @@ do {\t\t\t\t\t\t\t\t\t     \\\n         return COSTS_N_INSNS (5);\t\t\t\t\t\\\n       case PROCESSOR_PPC603:\t\t\t\t\t\t\\\n       case PROCESSOR_PPC7400:\t\t\t\t\t\t\\\n-      case PROCESSOR_PPC7450:\t\t\t\t\t\t\\\n       case PROCESSOR_PPC750:\t\t\t\t\t\t\\\n         return (GET_CODE (XEXP (X, 1)) != CONST_INT\t\t\t\\\n \t\t? COSTS_N_INSNS (5)\t\t\t\t\t\\\n \t\t: INTVAL (XEXP (X, 1)) >= -256 && INTVAL (XEXP (X, 1)) <= 255 \\\n \t\t? COSTS_N_INSNS (2) : COSTS_N_INSNS (3));\t\t\\\n+      case PROCESSOR_PPC7450:\t\t\t\t\t\t\\\n+        return (GET_CODE (XEXP (X, 1)) != CONST_INT\t\t\t\\\n+\t\t? COSTS_N_INSNS (4)\t\t\t\t\t\\\n+\t\t: COSTS_N_INSNS (3));\t\t\t    \t\t\\\n       case PROCESSOR_PPC403:\t\t\t\t\t\t\\\n       case PROCESSOR_PPC604:\t\t\t\t\t\t\\\n         return COSTS_N_INSNS (4);\t\t\t\t\t\\"}, {"sha": "779fef0f6a8a37c774a16472f985c5c24413c0ce", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 11, "deletions": 60, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd3b43f286b1b64c5bd5a3240936ee44eea56975/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd3b43f286b1b64c5bd5a3240936ee44eea56975/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=fd3b43f286b1b64c5bd5a3240936ee44eea56975", "patch": "@@ -359,7 +359,7 @@\n (define_function_unit \"imuldiv\" 1 0\n   (and (eq_attr \"type\" \"imul\")\n        (eq_attr \"cpu\" \"ppc7450\"))\n-  4 4)\n+  4 2)\n \n (define_function_unit \"imuldiv\" 1 0\n   (and (eq_attr \"type\" \"imul2,imul3\")\n@@ -7608,20 +7608,24 @@\n    (set_attr \"length\" \"4\")])\n \n (define_insn \"movsf_low\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n-        (mem:SF (lo_sum:SI (match_operand:SI 1 \"register_operand\" \"b\")\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f,!r\")\n+        (mem:SF (lo_sum:SI (match_operand:SI 1 \"register_operand\" \"b,b\")\n                            (match_operand 2 \"\" \"\"))))]\n   \"TARGET_MACHO && TARGET_HARD_FLOAT && ! TARGET_64BIT\"\n-  \"lfs %0,lo16(%2)(%1)\"\n+  \"@\n+   lfs %0,lo16(%2)(%1)\n+   {l|lwz} %0,lo16(%2)(%1)\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n \n (define_insn \"movsf_low_st\"\n-  [(set (mem:SF (lo_sum:SI (match_operand:SI 1 \"register_operand\" \"b\")\n+  [(set (mem:SF (lo_sum:SI (match_operand:SI 1 \"register_operand\" \"b,b\")\n                            (match_operand 2 \"\" \"\")))\n-\t(match_operand:SF 0 \"gpc_reg_operand\" \"f\"))]\n+\t(match_operand:SF 0 \"gpc_reg_operand\" \"f,!r\"))]\n   \"TARGET_MACHO && TARGET_HARD_FLOAT && ! TARGET_64BIT\"\n-  \"stfs %0,lo16(%2)(%1)\"\n+  \"@\n+   stfs %0,lo16(%2)(%1)\n+   {st|stw} %0,lo16(%2)(%1)\"\n   [(set_attr \"type\" \"store\")\n    (set_attr \"length\" \"4\")])\n \n@@ -9378,59 +9382,6 @@\n    && ! MEM_VOLATILE_P (operands[0]) && ! MEM_VOLATILE_P (operands[2])\n    && addrs_ok_for_quad_peep (XEXP (operands[0], 0), XEXP (operands[2], 0))\"\n   \"stfq%U0%X0 %1,%0\")\n-;; APPLE LOCAL peephole2 to eliminate unneeded computation of FP const\n-;; address in register.  If lo part of address is reused (i.e. reg0\n-;; is not dead), make the change in the fp load anyway (for scheduling)\n-;; but we switch the instructions in case op0==op1.\n-;; (define_peephole2\n-;;   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-;; \t(lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\") \n-;; \t\t   (match_operand:SI 2 \"\" \"\")))\n-;;    (set (match_operand:DF 3 \"gpc_reg_operand\" \"\")\n-;; \t(mem:DF (match_dup 0)))]\n-;;   \"TARGET_HARD_FLOAT \n-;;     && peep2_reg_dead_p(2, operands[0])\n-;;     && FP_REGNO_P (REGNO (operands[3]))\"\n-;;   [(set (match_dup 3) (mem:DF (lo_sum:SI (match_dup 1) (match_dup 2))))]\n-;;   \"\")\n-\n-;; (define_peephole2\n-;;   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-;; \t(lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\") \n-;; \t\t   (match_operand:SI 2 \"\" \"\")))\n-;;    (set (match_operand:DF 3 \"gpc_reg_operand\" \"\")\n-;; \t(mem:DF (match_dup 0)))]\n-;;   \"TARGET_HARD_FLOAT \n-;;     && !peep2_reg_dead_p(2, operands[0])\n-;;     && FP_REGNO_P (REGNO (operands[3]))\"\n-;;   [(set (match_dup 3) (mem:DF (lo_sum:SI (match_dup 1) (match_dup 2))))\n-;;    (set (match_dup 0) (lo_sum:SI (match_dup 1) (match_dup 2)))]\n-;;   \"\")\n-\n-;; (define_peephole2\n-;;   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-;; \t(lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\") \n-;; \t\t   (match_operand:SI 2 \"\" \"\")))\n-;;    (set (match_operand:SF 3 \"gpc_reg_operand\" \"\")\n-;; \t(mem:SF (match_dup 0)))]\n-;;   \"TARGET_HARD_FLOAT \n-;;     && peep2_reg_dead_p(2, operands[0])\n-;;     && FP_REGNO_P (REGNO (operands[3]))\"\n-;;   [(set (match_dup 3) (mem:SF (lo_sum:SI (match_dup 1) (match_dup 2))))]\n-;;   \"\")\n-\n-;; (define_peephole2\n-;;   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-;; \t(lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\") \n-;; \t\t   (match_operand:SI 2 \"\" \"\")))\n-;;    (set (match_operand:SF 3 \"gpc_reg_operand\" \"\")\n-;; \t(mem:SF (match_dup 0)))]\n-;;   \"TARGET_HARD_FLOAT \n-;;     && !peep2_reg_dead_p(2, operands[0])\n-;;     && FP_REGNO_P (REGNO (operands[3]))\"\n-;;   [(set (match_dup 3) (mem:SF (lo_sum:SI (match_dup 1) (match_dup 2))))\n-;;    (set (match_dup 0) (lo_sum:SI (match_dup 1) (match_dup 2)))]\n-;;   \"\")\n \f\n ;; Next come insns related to the calling sequence.\n ;;"}]}