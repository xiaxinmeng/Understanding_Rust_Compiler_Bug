{"sha": "ea7d7da886911a91831bd45fc56d0aa1e2a55ecc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE3ZDdkYTg4NjkxMWE5MTgzMWJkNDVmYzU2ZDBhYTFlMmE1NWVjYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-03-28T13:57:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-03-28T13:57:43Z"}, "message": "re PR ipa/78644 (ICE: SIGSEGV in is_gimple_reg_type with -Og -fipa-cp)\n\n2017-03-28  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/78644\n\t* tree-ssa-ccp.c (evaluate_stmt): When we may not use the value\n\tof a simplification result we may not use it at all.\n\n\t* gcc.dg/pr78644-1.c: New testcase.\n\t* gcc.dg/pr78644-2.c: Likewise.\n\nFrom-SVN: r246534", "tree": {"sha": "32c6fd2b62e696ad32a428181f47685729b004a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32c6fd2b62e696ad32a428181f47685729b004a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea7d7da886911a91831bd45fc56d0aa1e2a55ecc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea7d7da886911a91831bd45fc56d0aa1e2a55ecc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea7d7da886911a91831bd45fc56d0aa1e2a55ecc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea7d7da886911a91831bd45fc56d0aa1e2a55ecc/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "498173ef330d33ca0df09bfc3481de6d56cfa64c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/498173ef330d33ca0df09bfc3481de6d56cfa64c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/498173ef330d33ca0df09bfc3481de6d56cfa64c"}], "stats": {"total": 75, "additions": 67, "deletions": 8}, "files": [{"sha": "df901592ec97e61908776b521edc91fa4031d8af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7d7da886911a91831bd45fc56d0aa1e2a55ecc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7d7da886911a91831bd45fc56d0aa1e2a55ecc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea7d7da886911a91831bd45fc56d0aa1e2a55ecc", "patch": "@@ -1,3 +1,9 @@\n+2017-03-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/78644\n+\t* tree-ssa-ccp.c (evaluate_stmt): When we may not use the value\n+\tof a simplification result we may not use it at all.\n+\n 2017-03-28  Richard Biener  <rguenther@suse.de>\n \n \tPR ipa/80205"}, {"sha": "0c0281e5f46ab4441c5b46385f89004d2117d4ef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7d7da886911a91831bd45fc56d0aa1e2a55ecc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7d7da886911a91831bd45fc56d0aa1e2a55ecc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ea7d7da886911a91831bd45fc56d0aa1e2a55ecc", "patch": "@@ -1,3 +1,9 @@\n+2017-03-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/78644\n+\t* gcc.dg/pr78644-1.c: New testcase.\n+\t* gcc.dg/pr78644-2.c: Likewise.\n+\n 2017-03-28  Toma Tabacu  <toma.tabacu@imgtec.com>\n \n \t* gcc.dg/pic-3.c: Skip for mips*-*-linux-*."}, {"sha": "d6aafeb7c632a5ded1eae5578e277922a2dce7c4", "filename": "gcc/testsuite/gcc.dg/pr78644-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7d7da886911a91831bd45fc56d0aa1e2a55ecc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78644-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7d7da886911a91831bd45fc56d0aa1e2a55ecc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78644-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78644-1.c?ref=ea7d7da886911a91831bd45fc56d0aa1e2a55ecc", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-Og -fipa-cp -w -Wno-psabi\" } */\n+\n+typedef unsigned __int128 u128;\n+typedef unsigned __int128 V __attribute__ ((vector_size (64)));\n+\n+V x4;\n+\n+static V\n+bar (u128 x2, u128 x3)\n+{\n+  while (x4[0]--)\n+    x2 /= x3 >>= 1;\n+  return x2 + x3 + x4;\n+}\n+\n+void\n+foo (void)\n+{\n+  bar (0, 0);\n+}"}, {"sha": "3395ddee952a37450eae2cf16114a69121e4d6c1", "filename": "gcc/testsuite/gcc.dg/pr78644-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7d7da886911a91831bd45fc56d0aa1e2a55ecc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78644-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7d7da886911a91831bd45fc56d0aa1e2a55ecc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78644-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78644-2.c?ref=ea7d7da886911a91831bd45fc56d0aa1e2a55ecc", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-Og -finline-functions-called-once -w -Wno-psabi\" } */\n+\n+typedef unsigned V __attribute__ ((vector_size (64)));\n+typedef unsigned __int128 U __attribute__ ((vector_size (64)));\n+\n+U\n+bar4 (U u0, U u1)\n+{\n+  if (u1[0])\n+    u1 <<= 1;\n+  return u0 + u1;\n+}\n+\n+V\n+foo (U u, V v)\n+{\n+  v |= (unsigned)bar4(u, (U){})[0];\n+  return v;\n+}"}, {"sha": "23f2adcb9c48b47799019fedf33163dfaf22968b", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7d7da886911a91831bd45fc56d0aa1e2a55ecc/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7d7da886911a91831bd45fc56d0aa1e2a55ecc/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=ea7d7da886911a91831bd45fc56d0aa1e2a55ecc", "patch": "@@ -1749,18 +1749,24 @@ evaluate_stmt (gimple *stmt)\n       fold_defer_overflow_warnings ();\n       simplified = ccp_fold (stmt);\n       if (simplified\n-\t  && TREE_CODE (simplified) == SSA_NAME\n+\t  && TREE_CODE (simplified) == SSA_NAME)\n+\t{\n \t  /* We may not use values of something that may be simulated again,\n \t     see valueize_op_1.  */\n-\t  && (SSA_NAME_IS_DEFAULT_DEF (simplified)\n-\t      || ! prop_simulate_again_p (SSA_NAME_DEF_STMT (simplified))))\n-\t{\n-\t  ccp_prop_value_t *val = get_value (simplified);\n-\t  if (val && val->lattice_val != VARYING)\n+\t  if (SSA_NAME_IS_DEFAULT_DEF (simplified)\n+\t      || ! prop_simulate_again_p (SSA_NAME_DEF_STMT (simplified)))\n \t    {\n-\t      fold_undefer_overflow_warnings (true, stmt, 0);\n-\t      return *val;\n+\t      ccp_prop_value_t *val = get_value (simplified);\n+\t      if (val && val->lattice_val != VARYING)\n+\t\t{\n+\t\t  fold_undefer_overflow_warnings (true, stmt, 0);\n+\t\t  return *val;\n+\t\t}\n \t    }\n+\t  else\n+\t    /* We may also not place a non-valueized copy in the lattice\n+\t       as that might become stale if we never re-visit this stmt.  */\n+\t    simplified = NULL_TREE;\n \t}\n       is_constant = simplified && is_gimple_min_invariant (simplified);\n       fold_undefer_overflow_warnings (is_constant, stmt, 0);"}]}