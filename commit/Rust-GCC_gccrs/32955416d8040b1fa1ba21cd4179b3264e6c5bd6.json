{"sha": "32955416d8040b1fa1ba21cd4179b3264e6c5bd6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI5NTU0MTZkODA0MGIxZmExYmEyMWNkNDE3OWIzMjY0ZTZjNWJkNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-05-03T10:07:58Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-05-03T13:11:03Z"}, "message": "Improve PHI handling in DSE\n\nThis improves handling of PHI defs when walking uses in\ndse_classify_store to track two PHI defs.  This happens\nwhen there are CFG merges and one PHI feeds into another.\nIf we decide to want more then using a sbitmap for this might be\nthe way to go.\n\n2021-05-03  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-dse.c (dse_classify_store): Track two PHI defs.\n\n\t* gcc.dg/tree-ssa/ssa-dse-42.c: New testcase.\n\t* gcc.dg/pr81192.c: Disable DSE.", "tree": {"sha": "12f8a6b4cf1079178105266a7b4ff4a36296899d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12f8a6b4cf1079178105266a7b4ff4a36296899d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32955416d8040b1fa1ba21cd4179b3264e6c5bd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32955416d8040b1fa1ba21cd4179b3264e6c5bd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32955416d8040b1fa1ba21cd4179b3264e6c5bd6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32955416d8040b1fa1ba21cd4179b3264e6c5bd6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed3c43224cc4e378dbab066122bc63536ccb1276", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed3c43224cc4e378dbab066122bc63536ccb1276", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed3c43224cc4e378dbab066122bc63536ccb1276"}], "stats": {"total": 47, "additions": 37, "deletions": 10}, "files": [{"sha": "6cab605655853ba5ed4e1efeff525b11df81dc5f", "filename": "gcc/testsuite/gcc.dg/pr81192.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32955416d8040b1fa1ba21cd4179b3264e6c5bd6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81192.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32955416d8040b1fa1ba21cd4179b3264e6c5bd6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81192.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81192.c?ref=32955416d8040b1fa1ba21cd4179b3264e6c5bd6", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-Os -fdump-tree-pre-details -fdisable-tree-evrp\" } */\n+/* { dg-options \"-Os -fdump-tree-pre-details -fdisable-tree-evrp -fno-tree-dse\" } */\n \n /* Disable tree-evrp because the new version of evrp sees\n <bb 3> :\n@@ -16,6 +16,8 @@ produces\n   # iftmp.2_12 = PHI <2147483647(3), iftmp.2_11(4)> \n which causes the situation being tested to dissapear before we get to PRE.  */\n \n+/* Likewise disable DSE which also elides the tail merging \"opportunity\".  */\n+\n #if __SIZEOF_INT__ == 2\n #define unsigned __UINT32_TYPE__\n #define int __INT32_TYPE__"}, {"sha": "34108c83828730d73fa56eb7578e2b5bdf37b9e9", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dse-42.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32955416d8040b1fa1ba21cd4179b3264e6c5bd6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-42.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32955416d8040b1fa1ba21cd4179b3264e6c5bd6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-42.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-42.c?ref=32955416d8040b1fa1ba21cd4179b3264e6c5bd6", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-dse1\" } */\n+\n+int a[2];\n+void foo(int i, int k, int j)\n+{\n+  a[0] = i;\n+  if (k)\n+    a[0] = a[i] + k;\n+  else\n+    {\n+      if (j)\n+        a[1] = 1;\n+      a[0] = a[i] + 3;\n+    }\n+  a[0] = 0;\n+}\n+\n+/* The last stores to a[0] and a[1] remain.  */\n+/* { dg-final { scan-tree-dump-times \" = \" 2 \"dse1\" } } */"}, {"sha": "dfa6d3147270f31552b07f2366a35bbdffa065eb", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32955416d8040b1fa1ba21cd4179b3264e6c5bd6/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32955416d8040b1fa1ba21cd4179b3264e6c5bd6/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=32955416d8040b1fa1ba21cd4179b3264e6c5bd6", "patch": "@@ -799,7 +799,8 @@ dse_classify_store (ao_ref *ref, gimple *stmt,\n \treturn DSE_STORE_LIVE;\n \n       auto_vec<gimple *, 10> defs;\n-      gimple *phi_def = NULL;\n+      gimple *first_phi_def = NULL;\n+      gimple *last_phi_def = NULL;\n       FOR_EACH_IMM_USE_STMT (use_stmt, ui, defvar)\n \t{\n \t  /* Limit stmt walking.  */\n@@ -825,7 +826,9 @@ dse_classify_store (ao_ref *ref, gimple *stmt,\n \t\t\t\t SSA_NAME_VERSION (PHI_RESULT (use_stmt))))\n \t\t{\n \t\t  defs.safe_push (use_stmt);\n-\t\t  phi_def = use_stmt;\n+\t\t  if (!first_phi_def)\n+\t\t    first_phi_def = use_stmt;\n+\t\t  last_phi_def = use_stmt;\n \t\t}\n \t    }\n \t  /* If the statement is a use the store is not dead.  */\n@@ -889,6 +892,8 @@ dse_classify_store (ao_ref *ref, gimple *stmt,\n \t  gimple *def = defs[i];\n \t  gimple *use_stmt;\n \t  use_operand_p use_p;\n+\t  tree vdef = (gimple_code (def) == GIMPLE_PHI\n+\t\t       ? gimple_phi_result (def) : gimple_vdef (def));\n \t  /* If the path to check starts with a kill we do not need to\n \t     process it further.\n \t     ???  With byte tracking we need only kill the bytes currently\n@@ -901,8 +906,7 @@ dse_classify_store (ao_ref *ref, gimple *stmt,\n \t    }\n \t  /* If the path ends here we do not need to process it further.\n \t     This for example happens with calls to noreturn functions.  */\n-\t  else if (gimple_code (def) != GIMPLE_PHI\n-\t\t   && has_zero_uses (gimple_vdef (def)))\n+\t  else if (has_zero_uses (vdef))\n \t    {\n \t      /* But if the store is to global memory it is definitely\n \t\t not dead.  */\n@@ -912,12 +916,13 @@ dse_classify_store (ao_ref *ref, gimple *stmt,\n \t    }\n \t  /* In addition to kills we can remove defs whose only use\n \t     is another def in defs.  That can only ever be PHIs of which\n-\t     we track a single for simplicity reasons (we fail for multiple\n-\t     PHIs anyways).  We can also ignore defs that feed only into\n+\t     we track two for simplicity reasons, the first and last in\n+\t     {first,last}_phi_def (we fail for multiple PHIs anyways).\n+\t     We can also ignore defs that feed only into\n \t     already visited PHIs.  */\n-\t  else if (gimple_code (def) != GIMPLE_PHI\n-\t\t   && single_imm_use (gimple_vdef (def), &use_p, &use_stmt)\n-\t\t   && (use_stmt == phi_def\n+\t  else if (single_imm_use (vdef, &use_p, &use_stmt)\n+\t\t   && (use_stmt == first_phi_def\n+\t\t       || use_stmt == last_phi_def\n \t\t       || (gimple_code (use_stmt) == GIMPLE_PHI\n \t\t\t   && bitmap_bit_p (visited,\n \t\t\t\t\t    SSA_NAME_VERSION"}]}