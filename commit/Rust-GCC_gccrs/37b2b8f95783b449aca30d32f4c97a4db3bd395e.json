{"sha": "37b2b8f95783b449aca30d32f4c97a4db3bd395e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdiMmI4Zjk1NzgzYjQ0OWFjYTMwZDMyZjRjOTdhNGRiM2JkMzk1ZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-12-20T12:52:12Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-12-20T12:52:12Z"}, "message": "poly_int: TRULY_NOOP_TRUNCATION\n\nThis patch makes TRULY_NOOP_TRUNCATION take the mode sizes as\npoly_uint64s instead of unsigned ints.  The function bodies\ndon't need to change.\n\n2017-12-20  Richard Sandiford  <richard.sandiford@linaro.org>\n            Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* target.def (truly_noop_truncation): Take poly_uint64s instead of\n\tunsigned ints.  Change default to hook_bool_puint64_puint64_true.\n\t* doc/tm.texi: Regenerate.\n\t* hooks.h (hook_bool_uint_uint_true): Delete.\n\t(hook_bool_puint64_puint64_true): Declare.\n\t* hooks.c (hook_bool_uint_uint_true): Delete.\n\t(hook_bool_puint64_puint64_true): New function.\n\t* config/mips/mips.c (mips_truly_noop_truncation): Take poly_uint64s\n\tinstead of unsigned ints.\n\t* config/spu/spu.c (spu_truly_noop_truncation): Likewise.\n\t* config/tilegx/tilegx.c (tilegx_truly_noop_truncation): Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r255866", "tree": {"sha": "f9f4281fcb3cf1bbf777100bf54c33ef1de17cc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9f4281fcb3cf1bbf777100bf54c33ef1de17cc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37b2b8f95783b449aca30d32f4c97a4db3bd395e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37b2b8f95783b449aca30d32f4c97a4db3bd395e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37b2b8f95783b449aca30d32f4c97a4db3bd395e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37b2b8f95783b449aca30d32f4c97a4db3bd395e/comments", "author": null, "committer": null, "parents": [{"sha": "f8832fe1a7611c0458ebf45140c099eb7bf5d0c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8832fe1a7611c0458ebf45140c099eb7bf5d0c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8832fe1a7611c0458ebf45140c099eb7bf5d0c8"}], "stats": {"total": 34, "additions": 25, "deletions": 9}, "files": [{"sha": "e99f20c2ad05e02ab50206538c016a292a197e93", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b2b8f95783b449aca30d32f4c97a4db3bd395e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b2b8f95783b449aca30d32f4c97a4db3bd395e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=37b2b8f95783b449aca30d32f4c97a4db3bd395e", "patch": "@@ -1,3 +1,19 @@\n+2017-12-20  Richard Sandiford  <richard.sandiford@linaro.org>\n+            Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* target.def (truly_noop_truncation): Take poly_uint64s instead of\n+\tunsigned ints.  Change default to hook_bool_puint64_puint64_true.\n+\t* doc/tm.texi: Regenerate.\n+\t* hooks.h (hook_bool_uint_uint_true): Delete.\n+\t(hook_bool_puint64_puint64_true): Declare.\n+\t* hooks.c (hook_bool_uint_uint_true): Delete.\n+\t(hook_bool_puint64_puint64_true): New function.\n+\t* config/mips/mips.c (mips_truly_noop_truncation): Take poly_uint64s\n+\tinstead of unsigned ints.\n+\t* config/spu/spu.c (spu_truly_noop_truncation): Likewise.\n+\t* config/tilegx/tilegx.c (tilegx_truly_noop_truncation): Likewise.\n+\n 2017-12-20  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "f16a67b5e1f8a9473c2a6dd900170df150a19b35", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b2b8f95783b449aca30d32f4c97a4db3bd395e/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b2b8f95783b449aca30d32f4c97a4db3bd395e/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=37b2b8f95783b449aca30d32f4c97a4db3bd395e", "patch": "@@ -22322,7 +22322,7 @@ mips_promote_function_mode (const_tree type ATTRIBUTE_UNUSED,\n /* Implement TARGET_TRULY_NOOP_TRUNCATION.  */\n \n static bool\n-mips_truly_noop_truncation (unsigned int outprec, unsigned int inprec)\n+mips_truly_noop_truncation (poly_uint64 outprec, poly_uint64 inprec)\n {\n   return !TARGET_64BIT || inprec <= 32 || outprec > 32;\n }"}, {"sha": "2800a8f74dd5a0f63f423810cfbb4d3f16aac2b3", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b2b8f95783b449aca30d32f4c97a4db3bd395e/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b2b8f95783b449aca30d32f4c97a4db3bd395e/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=37b2b8f95783b449aca30d32f4c97a4db3bd395e", "patch": "@@ -7185,7 +7185,7 @@ spu_can_change_mode_class (machine_mode from, machine_mode to, reg_class_t)\n /* Implement TARGET_TRULY_NOOP_TRUNCATION.  */\n \n static bool\n-spu_truly_noop_truncation (unsigned int outprec, unsigned int inprec)\n+spu_truly_noop_truncation (poly_uint64 outprec, poly_uint64 inprec)\n {\n   return inprec <= 32 && outprec <= inprec;\n }"}, {"sha": "140cce14ec8d3954e650decbbf0d7219207add2d", "filename": "gcc/config/tilegx/tilegx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b2b8f95783b449aca30d32f4c97a4db3bd395e/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b2b8f95783b449aca30d32f4c97a4db3bd395e/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.c?ref=37b2b8f95783b449aca30d32f4c97a4db3bd395e", "patch": "@@ -5566,7 +5566,7 @@ tilegx_file_end (void)\n    as sign-extended DI values in registers.  */\n \n static bool\n-tilegx_truly_noop_truncation (unsigned int outprec, unsigned int inprec)\n+tilegx_truly_noop_truncation (poly_uint64 outprec, poly_uint64 inprec)\n {\n   return inprec <= 32 || outprec > 32;\n }"}, {"sha": "fc73bb25d5ec989e0cd11657ec4a704a77edcfec", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b2b8f95783b449aca30d32f4c97a4db3bd395e/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b2b8f95783b449aca30d32f4c97a4db3bd395e/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=37b2b8f95783b449aca30d32f4c97a4db3bd395e", "patch": "@@ -10801,7 +10801,7 @@ nevertheless truncate the shift count, you may get better code\n by overriding it.\n @end deftypefn\n \n-@deftypefn {Target Hook} bool TARGET_TRULY_NOOP_TRUNCATION (unsigned int @var{outprec}, unsigned int @var{inprec})\n+@deftypefn {Target Hook} bool TARGET_TRULY_NOOP_TRUNCATION (poly_uint64 @var{outprec}, poly_uint64 @var{inprec})\n This hook returns true if it is safe to ``convert'' a value of\n @var{inprec} bits to one of @var{outprec} bits (where @var{outprec} is\n smaller than @var{inprec}) by merely operating on it as if it had only"}, {"sha": "18a957ed72f0ad9ab1aefc87faedadb9ec35b58a", "filename": "gcc/hooks.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b2b8f95783b449aca30d32f4c97a4db3bd395e/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b2b8f95783b449aca30d32f4c97a4db3bd395e/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=37b2b8f95783b449aca30d32f4c97a4db3bd395e", "patch": "@@ -133,9 +133,9 @@ hook_bool_mode_uhwi_false (machine_mode, unsigned HOST_WIDE_INT)\n   return false;\n }\n \n-/* Generic hook that takes (unsigned int, unsigned int) and returns true.  */\n+/* Generic hook that takes (poly_uint64, poly_uint64) and returns true.  */\n bool\n-hook_bool_uint_uint_true (unsigned int, unsigned int)\n+hook_bool_puint64_puint64_true (poly_uint64, poly_uint64)\n {\n   return true;\n }"}, {"sha": "b0d830ac5096ad5aa3fa3211e4f8ca3765b93204", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b2b8f95783b449aca30d32f4c97a4db3bd395e/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b2b8f95783b449aca30d32f4c97a4db3bd395e/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=37b2b8f95783b449aca30d32f4c97a4db3bd395e", "patch": "@@ -39,7 +39,7 @@ extern bool hook_bool_const_rtx_insn_const_rtx_insn_true (const rtx_insn *,\n \t\t\t\t\t\t\t  const rtx_insn *);\n extern bool hook_bool_mode_uhwi_false (machine_mode,\n \t\t\t\t       unsigned HOST_WIDE_INT);\n-extern bool hook_bool_uint_uint_true (unsigned int, unsigned int);\n+extern bool hook_bool_puint64_puint64_true (poly_uint64, poly_uint64);\n extern bool hook_bool_uint_mode_false (unsigned int, machine_mode);\n extern bool hook_bool_uint_mode_true (unsigned int, machine_mode);\n extern bool hook_bool_tree_false (tree);"}, {"sha": "b1178ca2635ccb02b5244e6e75f9f715cb12812e", "filename": "gcc/target.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b2b8f95783b449aca30d32f4c97a4db3bd395e/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b2b8f95783b449aca30d32f4c97a4db3bd395e/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=37b2b8f95783b449aca30d32f4c97a4db3bd395e", "patch": "@@ -3154,8 +3154,8 @@ is correct for most machines.\\n\\\n If @code{TARGET_MODES_TIEABLE_P} returns false for a pair of modes,\\n\\\n suboptimal code can result if this hook returns true for the corresponding\\n\\\n mode sizes.  Making this hook return false in such cases may improve things.\",\n- bool, (unsigned int outprec, unsigned int inprec),\n- hook_bool_uint_uint_true)\n+ bool, (poly_uint64 outprec, poly_uint64 inprec),\n+ hook_bool_puint64_puint64_true)\n \n /* If the representation of integral MODE is such that values are\n    always sign-extended to a wider mode MODE_REP then return"}]}