{"sha": "1f9e1fc69b80fcc48f4df72fb0a3d9020f802a46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY5ZTFmYzY5YjgwZmNjNDhmNGRmNzJmYjBhM2Q5MDIwZjgwMmE0Ng==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2008-07-14T06:56:46Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2008-07-14T06:56:46Z"}, "message": "re PR target/36745 (ICE in gen_reg_rtx, at emit-rtl.c:868)\n\n2008-07-14  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\tPR target/36745\n\t* config/s390/s390.c: (s390_secondary_reload): Add a secondary\n\treload for symbol refs moved to r0 with -fPIC.\n\t(legitimize_pic_address): Use the target register as temporary\n\treg if possible.\n\t(emit_symbolic_move): Adjust comment.\n\t* config/s390/s390.md (reloadsi_PIC_addr, reloaddi_PIC_addr):\n\tNew expanders.\n\n2008-07-14  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\tPR target/36745\n\t* g++.dg/torture/pr36745.C: New testcase.\n\nFrom-SVN: r137777", "tree": {"sha": "248042c82d6c3e0c548673cd33a0225dc6bfff91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/248042c82d6c3e0c548673cd33a0225dc6bfff91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f9e1fc69b80fcc48f4df72fb0a3d9020f802a46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f9e1fc69b80fcc48f4df72fb0a3d9020f802a46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f9e1fc69b80fcc48f4df72fb0a3d9020f802a46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f9e1fc69b80fcc48f4df72fb0a3d9020f802a46/comments", "author": null, "committer": null, "parents": [{"sha": "5950c3c9a7729687a04f9b008e441959a2d9114d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5950c3c9a7729687a04f9b008e441959a2d9114d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5950c3c9a7729687a04f9b008e441959a2d9114d"}], "stats": {"total": 168, "additions": 165, "deletions": 3}, "files": [{"sha": "00d6661504e0878bf2504fb0acbceaabbe402e6a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9e1fc69b80fcc48f4df72fb0a3d9020f802a46/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9e1fc69b80fcc48f4df72fb0a3d9020f802a46/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f9e1fc69b80fcc48f4df72fb0a3d9020f802a46", "patch": "@@ -1,3 +1,14 @@\n+2008-07-14  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\tPR target/36745\n+\t* config/s390/s390.c: (s390_secondary_reload): Add a secondary\n+\treload for symbol refs moved to r0 with -fPIC.\n+\t(legitimize_pic_address): Use the target register as temporary\n+\treg if possible.\n+\t(emit_symbolic_move): Adjust comment.\n+\t* config/s390/s390.md (reloadsi_PIC_addr, reloaddi_PIC_addr):\n+\tNew expanders.\n+\n 2008-07-14  Ben Elliston  <bje@au.ibm.com>\n \n \t* c-common.h (C_CPP_HASHNODE): New macro."}, {"sha": "936e0a0ead2400abae0b62f41e0aa8d0bc536ce8", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9e1fc69b80fcc48f4df72fb0a3d9020f802a46/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9e1fc69b80fcc48f4df72fb0a3d9020f802a46/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=1f9e1fc69b80fcc48f4df72fb0a3d9020f802a46", "patch": "@@ -3026,6 +3026,14 @@ s390_secondary_reload (bool in_p, rtx x, enum reg_class class,\n \t}\n     }\n \n+  /* A scratch address register is needed when a symbolic constant is\n+     copied to r0 compiling with -fPIC.  In other cases the target\n+     register might be used as temporary (see legitimize_pic_address).  */\n+  if (in_p && SYMBOLIC_CONST (x) && flag_pic == 2 && class != ADDR_REGS)\n+    sri->icode = (TARGET_64BIT ?\n+\t\t  CODE_FOR_reloaddi_PIC_addr :\n+\t\t  CODE_FOR_reloadsi_PIC_addr);\n+\n   /* Either scratch or no register needed.  */\n   return NO_REGS;\n }\n@@ -3272,7 +3280,10 @@ legitimize_pic_address (rtx orig, rtx reg)\n           /* If the GOT offset might be >= 4k, we determine the position\n              of the GOT entry via a PC-relative LARL (@GOTENT).  */\n \n-          rtx temp = gen_reg_rtx (Pmode);\n+          rtx temp = reg ? reg : gen_reg_rtx (Pmode);\n+\n+\t  gcc_assert (REGNO (temp) >= FIRST_PSEUDO_REGISTER\n+\t\t      || REGNO_REG_CLASS (REGNO (temp)) == ADDR_REGS);\n \n           new = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), UNSPEC_GOTENT);\n           new = gen_rtx_CONST (Pmode, new);\n@@ -3287,7 +3298,10 @@ legitimize_pic_address (rtx orig, rtx reg)\n           /* If the GOT offset might be >= 4k, we have to load it\n              from the literal pool (@GOT).  */\n \n-          rtx temp = gen_reg_rtx (Pmode);\n+          rtx temp = reg ? reg : gen_reg_rtx (Pmode);\n+\n+\t  gcc_assert (REGNO (temp) >= FIRST_PSEUDO_REGISTER\n+\t\t      || REGNO_REG_CLASS (REGNO (temp)) == ADDR_REGS);\n \n \t  if (reload_in_progress || reload_completed)\n \t    df_set_regs_ever_live (PIC_OFFSET_TABLE_REGNUM, true);\n@@ -3707,7 +3721,10 @@ legitimize_tls_address (rtx addr, rtx reg)\n   return new;\n }\n \n-/* Emit insns to move operands[1] into operands[0].  */\n+/* Emit insns making the address in operands[1] valid for a standard\n+   move to operands[0].  operands[1] is replaced by an address which\n+   should be used instead of the former RTX to emit the move\n+   pattern.  */\n \n void\n emit_symbolic_move (rtx *operands)"}, {"sha": "ec5b75329775f73492ae757401e12f93c010d7b8", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9e1fc69b80fcc48f4df72fb0a3d9020f802a46/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9e1fc69b80fcc48f4df72fb0a3d9020f802a46/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=1f9e1fc69b80fcc48f4df72fb0a3d9020f802a46", "patch": "@@ -1175,6 +1175,16 @@\n   DONE;\n })\n \n+(define_expand \"reload<mode>_PIC_addr\"\n+  [(parallel [(match_operand   0 \"register_operand\" \"=d\")\n+\t      (match_operand   1 \"larl_operand\"     \"\")\n+\t      (match_operand:P 2 \"register_operand\" \"=a\")])]\n+  \"\"\n+{\n+  rtx new = legitimize_pic_address (operands[1], operands[2]);\n+  emit_move_insn (operands[0], new);\n+})\n+\n ;\n ; movdi instruction pattern(s).\n ;"}, {"sha": "6cd54c634ba266046a6c55f80bca1459d0c47c49", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9e1fc69b80fcc48f4df72fb0a3d9020f802a46/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9e1fc69b80fcc48f4df72fb0a3d9020f802a46/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1f9e1fc69b80fcc48f4df72fb0a3d9020f802a46", "patch": "@@ -1,3 +1,8 @@\n+2008-07-14  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\tPR target/36745\n+\t* g++.dg/torture/pr36745.C: New testcase.\n+\n 2008-07-14  Ben Elliston  <bje@au.ibm.com>\n \n \t* gcc.target/powerpc/altivec-macros.c: New test."}, {"sha": "a304c374e26c09acfbdf60de3f98cd9c12371aaf", "filename": "gcc/testsuite/g++.dg/torture/pr36745.C", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9e1fc69b80fcc48f4df72fb0a3d9020f802a46/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr36745.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9e1fc69b80fcc48f4df72fb0a3d9020f802a46/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr36745.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr36745.C?ref=1f9e1fc69b80fcc48f4df72fb0a3d9020f802a46", "patch": "@@ -0,0 +1,119 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fPIC\" } */\n+/* { dg-require-effective-target fpic } */\n+typedef long unsigned int size_t;\n+class QBasicAtomicInt\n+{\n+public:\n+  int _q_value;\n+  inline bool operator== (int value) const\n+  {\n+  }\n+  bool ref ();\n+  bool deref ();\n+};\n+inline bool\n+QBasicAtomicInt::ref ()\n+{\n+  __asm__ (\"\": \"=m\" (_q_value): :);\n+  return true;\n+}\n+\n+namespace std\n+{\n+  using::size_t;\n+}\n+extern \"C++\"\n+{\n+  inline void *operator new (std::size_t, void *__p)\n+  {\n+    return __p;\n+  }\n+}\n+struct QMapData\n+{\n+  QBasicAtomicInt ref;\n+  static QMapData shared_null;\n+};\n+template < class Key, class T > class QMap\n+{\n+  QMapData *d;\n+public: inline QMap ():d (&QMapData::shared_null)\n+  {\n+  }\n+  inline ~ QMap ()\n+  {\n+    if (!d->ref.deref ())\n+      freeData (d);\n+  }\n+  void freeData (QMapData * d);\n+};\n+struct QVectorData\n+{\n+  static QVectorData shared_null;\n+};\n+template < typename T > struct QVectorTypedData\n+{\n+  QBasicAtomicInt ref;\n+};\n+template < typename T > class QVector\n+{\n+  union\n+  {\n+    QVectorData *p;\n+    QVectorTypedData < T > *d;\n+  };\n+public: inline QVector ():p (&QVectorData::shared_null)\n+  {\n+    d->ref.ref ();\n+  }\n+  inline void detach ()\n+  {\n+    if (d->ref == 1)\n+      detach_helper ();\n+  }\n+  inline T *data ()\n+  {\n+    detach ();\n+  }\n+  T & operator[](int i);\n+  void detach_helper ();\n+  void realloc ();\n+};\n+template < typename T > void QVector < T >::detach_helper ()\n+{\n+  realloc ();\n+}\n+\n+template < typename T > inline T & QVector < T >::operator[](int i)\n+{\n+  return data ()[i];\n+}\n+template < typename T > void QVector < T >::realloc ()\n+{\n+  T *j, *i;\n+  i->~T ();\n+  while (j-- == i)\n+    new (j) T;\n+}\n+\n+void\n+mergeInto (QVector < int >*a)\n+{\n+};\n+struct QRegExpAutomatonState\n+{\n+  QVector < int >outs;\n+  QMap < int, int >reenter;\n+  QMap < int, int >anchors;\n+};\n+class QRegExpEngine\n+{\n+  void addCatTransitions ();\n+  QVector < QRegExpAutomatonState > s;\n+};\n+void\n+QRegExpEngine::addCatTransitions ()\n+{\n+  mergeInto (&s[2].outs);\n+}"}]}