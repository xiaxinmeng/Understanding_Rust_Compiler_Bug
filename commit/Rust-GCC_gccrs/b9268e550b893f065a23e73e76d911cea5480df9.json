{"sha": "b9268e550b893f065a23e73e76d911cea5480df9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkyNjhlNTUwYjg5M2YwNjVhMjNlNzNlNzZkOTExY2VhNTQ4MGRmOQ==", "commit": {"author": {"name": "Tristan Gingold", "email": "gingold@adacore.com", "date": "2012-03-30T08:42:47Z"}, "committer": {"name": "Tristan Gingold", "email": "gingold@gcc.gnu.org", "date": "2012-03-30T08:42:47Z"}, "message": "vms.c (VMS_CRTL_FLOAT32): Rename.\n\n2012-03-30  Tristan Gingold  <gingold@adacore.com>\n\n\t* config/vms/vms.c (VMS_CRTL_FLOAT32): Rename.\n\t(VMS_CRTL_FLOAT64, VMS_CRTL_FLOAT64_VAXD): New.\n\t(VMS_CRTL_FLOAT128, VMS_CRTL_DPML, VMS_CRTL_NODMPL)\n\t(VMS_CRTL_32ONLY, VMS_CRTL_G_MASK, VMS_CRTL_G_NONE)\n\t(VMS_CRTL_GA, VMS_CRTL_GL, VMS_CRTL_FLOATV2): New.\n\t(vms_patch_builtins): Handle new flags\n\t* config/vms/vms-crtlmap.map: Completed using nm on\n\tc and math system libraries.\n\t* config/vms/make-crtlmap.awk: Handle any number of flags.\n\nFrom-SVN: r185993", "tree": {"sha": "9e4b785e479dbdb50081d6d16da7cda4d842d167", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e4b785e479dbdb50081d6d16da7cda4d842d167"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9268e550b893f065a23e73e76d911cea5480df9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9268e550b893f065a23e73e76d911cea5480df9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9268e550b893f065a23e73e76d911cea5480df9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9268e550b893f065a23e73e76d911cea5480df9/comments", "author": {"login": "gingold-adacore", "id": 16334725, "node_id": "MDQ6VXNlcjE2MzM0NzI1", "avatar_url": "https://avatars.githubusercontent.com/u/16334725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gingold-adacore", "html_url": "https://github.com/gingold-adacore", "followers_url": "https://api.github.com/users/gingold-adacore/followers", "following_url": "https://api.github.com/users/gingold-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/gingold-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/gingold-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gingold-adacore/subscriptions", "organizations_url": "https://api.github.com/users/gingold-adacore/orgs", "repos_url": "https://api.github.com/users/gingold-adacore/repos", "events_url": "https://api.github.com/users/gingold-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/gingold-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "50f671c667c35d34b86c1a20ccc775737fceb343", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50f671c667c35d34b86c1a20ccc775737fceb343", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50f671c667c35d34b86c1a20ccc775737fceb343"}], "stats": {"total": 971, "additions": 866, "deletions": 105}, "files": [{"sha": "0a57530d09c3aeefbb660f381837dbe7a1db54e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9268e550b893f065a23e73e76d911cea5480df9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9268e550b893f065a23e73e76d911cea5480df9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9268e550b893f065a23e73e76d911cea5480df9", "patch": "@@ -1,3 +1,15 @@\n+2012-03-30  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* config/vms/vms.c (VMS_CRTL_FLOAT32): Rename.\n+\t(VMS_CRTL_FLOAT64, VMS_CRTL_FLOAT64_VAXD): New.\n+\t(VMS_CRTL_FLOAT128, VMS_CRTL_DPML, VMS_CRTL_NODMPL)\n+\t(VMS_CRTL_32ONLY, VMS_CRTL_G_MASK, VMS_CRTL_G_NONE)\n+\t(VMS_CRTL_GA, VMS_CRTL_GL, VMS_CRTL_FLOATV2): New.\n+\t(vms_patch_builtins): Handle new flags\n+\t* config/vms/vms-crtlmap.map: Completed using nm on\n+\tc and math system libraries.\n+\t* config/vms/make-crtlmap.awk: Handle any number of flags.\n+\n 2012-03-30  Martin Jambor  <mjambor@suse.cz>\n \n \t* tree-ssa-ccp.c (insert_clobbers_for_var): Do not assert that there"}, {"sha": "63be6e708ab9e4be3ece6722549feb32ed0f0f24", "filename": "gcc/config/vms/make-crtlmap.awk", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9268e550b893f065a23e73e76d911cea5480df9/gcc%2Fconfig%2Fvms%2Fmake-crtlmap.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9268e550b893f065a23e73e76d911cea5480df9/gcc%2Fconfig%2Fvms%2Fmake-crtlmap.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fmake-crtlmap.awk?ref=b9268e550b893f065a23e73e76d911cea5480df9", "patch": "@@ -40,13 +40,13 @@ BEGIN {\n     print \"{ \\\"\" $1 \"\\\", \"\n     if (NF == 1)\n         print \"0 }\"\n-    else if (NF == 2)\n-        printf \"VMS_CRTL_\" $2 \" }\"\n-    else if (NF == 3)\n-        printf \"VMS_CRTL_\" $2 \" | VMS_CRTL_\" $3 \" }\"\n     else\n-        # To be fixed.\n-        exit 1\n+    {\n+\tprintf \"VMS_CRTL_\" $2\n+\tfor (i = 3; i <= NF; i++)\n+\t    printf \" | VMS_CRTL_\" $i\n+\tprintf \" }\"\n+    }\n }\n \n END {"}, {"sha": "e80e2afe4935467bd349ffa69d1c4427434519cf", "filename": "gcc/config/vms/vms-crtlmap.map", "status": "modified", "additions": 736, "deletions": 79, "changes": 815, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9268e550b893f065a23e73e76d911cea5480df9/gcc%2Fconfig%2Fvms%2Fvms-crtlmap.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9268e550b893f065a23e73e76d911cea5480df9/gcc%2Fconfig%2Fvms%2Fvms-crtlmap.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms-crtlmap.map?ref=b9268e550b893f065a23e73e76d911cea5480df9", "patch": "@@ -12,130 +12,483 @@\n # - Comment lines start with '#' in the first column.\n # - map lines consist in an identifier optionnaly followed by at most 2\n #   space-separated flags.\n-# Flags are:\n-#  FLOAT: will be prefixed by 't'/'g'/'d'.\n-#  64: There is a 64-bit variant.\n-#  GLOBAL: name will be prefixed by ga_\n-#  BSD44: name will be prefixed by __bsd44__.\n-#  LDBL: a 'x' prefix will be added if 128 bit long doubles are enabled.\n-#  MALLOC: malloc related function.\n+# Flags are described in vms.c (prefixed by VMS_CRTL_).\n #\n # Keep entries alpha-sorted - this is enforced by the awk script.\n #\n+__32_getpwent\n+__32_getpwnam\n+__32_getpwuid\n+__32_sigaction\n __32_signal\n __32_ssignal\n+__64_getpwent\n+__64_getpwnam\n+__64_getpwuid\n+__64_sigaction\n __64_signal\n __64_ssignal\n+__assert\n+__dl__xpv\n+__freeaddrinfo32\n+__freeaddrinfo64\n+__getaddrinfo32\n+__getaddrinfo64\n+__getaddrinfo_compat4332\n+__getaddrinfo_compat4364\n+__getgrent64\n+__getgrgid64\n+__getgrgid_r64\n+__getgrnam64\n+__getgrnam_r64\n+__lgamma\t FLOAT64 FLOATV2\n+__lgammaf\t FLOAT32 FLOATV2\n+__lgammal\t FLOAT64 FLOAT128 FLOATV2\n+__long_gid___32_getpwnam\n+__long_gid___32_getpwuid\n+__long_gid___64_getpwnam\n+__long_gid___64_getpwuid\n+__long_gid_access\n+__long_gid_chmod\n+__long_gid_chown\n+__long_gid_fchmod\n+__long_gid_fchown\n+__long_gid_fstat\n+__long_gid_ftw\n+__long_gid_getegid\n+__long_gid_geteuid\n+__long_gid_getgid\n+__long_gid_getgroups\n+__long_gid_getpwnam\n+__long_gid_getpwnam_r\t 64\n+__long_gid_getpwuid\n+__long_gid_getpwuid_r\t 64\n+__long_gid_getuid\n+__long_gid_lchown\n+__long_gid_lstat\n+__long_gid_setgid\n+__long_gid_setuid\n+__long_gid_stat\n+__non_utc_ftw\n+__nw__xui\n+__off64_fcntl\n+__off64_fseeko\n+__off64_fstat\n+__off64_ftello\n+__off64_ftruncate\n+__off64_ftw\n+__off64_long_gid_fstat\n+__off64_long_gid_ftw\n+__off64_long_gid_lstat\n+__off64_long_gid_stat\n+__off64_lseek\n+__off64_lstat\n+__off64_mmap\t 64\n+__off64_non_utc_ftw\n+__off64_pread\n+__off64_pwrite\n+__off64_stat\n+__off64_truncate\n+__off64_utc_fstat\n+__off64_utc_lstat\n+__off64_utc_stat\n+__pdam_wcsftime\n+__pdam_wcstok\t 64\n __posix__exit\n __posix_exit\n __posix_kill\n __posix_long_gid_kill\n+__posix_system\n+__posix_wait\n+__read_rnd\n+__recvmsg32\t BSD44\n+__recvmsg64\t BSD44\n+__sendmsg32\t BSD44\n+__sendmsg64\t BSD44\n+__short_gid___32_getpwent\n+__short_gid___64_getpwent\n+__short_gid_getpwent\n+__std_fstat\n+__std_ftw\n+__std_lstat\n+__std_stat\n+__unix_geteuid\n __unix_getuid\n+__utc_ctime\n+__utc_ctime_r\n __utc_fstat\n+__utc_ftime\n+__utc_gmtime\n+__utc_gmtime_r\n __utc_localtime\n __utc_localtime_r\n __utc_lstat\n+__utc_mktime\n+__utc_pdam_wcsftime\n __utc_stat\n __utc_strftime\n __utc_time\n+__utc_utime\n+__utc_utimes\n+__utc_wcsftime\n __utctz_gmtime\n+__utctz_gmtime_r\n __utctz_localtime\n __utctz_localtime_r\n+__vms_pclose\n+__vms_wait3\n+__vms_wait4\n+__vms_waitpid\n+__writev32\n+__writev64\n+_exit\n+_fstat\n+a64l\n abort\n abs\n-accept\n+accept\t BSD44\n access\n-acos          FLOAT\n+acos\t FLOAT64 DPML\n+acosd\tFLOAT64_VAXD DPML\n+acosdl\tFLOAT64_VAXD\n+acosh\tFLOAT64_VAXD DPML\n+acoshl\tFLOAT64_VAXD\n+acosl\tFLOAT64_VAXD\n alarm\n asctime\n asctime_r\n-asin          FLOAT\n-atan          FLOAT\n-atan2         FLOAT\n+asin\t FLOAT64 DPML\n+asind\tFLOAT64_VAXD DPML\n+asindl\tFLOAT64_VAXD\n+asinh\tFLOAT64_VAXD DPML\n+asinhl\tFLOAT64_VAXD\n+asinl\tFLOAT64_VAXD\n+atan\t FLOAT64 DPML\n+atan2\t FLOAT64 DPML\n+atan2l\tFLOAT64_VAXD\n+atand\tFLOAT64_VAXD DPML\n+atand2\tFLOAT64_VAXD DPML\n+atand2l\tFLOAT64_VAXD\n+atandl\tFLOAT64_VAXD\n+atanh\tFLOAT64_VAXD DPML\n+atanhl\tFLOAT64_VAXD\n+atanl\tFLOAT64_VAXD\n atexit\n-atof          FLOAT\n+atof\t FLOAT64\n atoi\n atol\n atoll\n atoq\n-basename      64\n+basename\t 64\n bcmp\n bcopy\n-bsearch       64\n+bind\t BSD44\n+box\n+# brk\n+bsd_mh\t GA\n+bsd_waddbytes\n+bsd_waddstr\n+bsearch\t 64\n+btowc\n bzero\n-calloc        64 MALLOC\n-ceil          FLOAT\n+cabs\t FLOAT64 FLOATV2\n+cabsf\t FLOAT32 FLOATV2\n+cabsl\t FLOAT64 FLOAT128 FLOATV2\n+cacos\t DPML\n+cacosh\t DPML\n+calloc\t 64 MALLOC\n+calloc_opt\n+carg\tDPML\n+casin\tDPML\n+casinh\tDPML\n+catan\tDPML\n+catanh\tDPML\n+catclose\n+catgets\t 64\n+catopen\n+cbrt\tFLOAT64_VAXD\n+cbrtl\tFLOAT64_VAXD\n+ccos\tDPML\n+ccosh\tDPML\n+cdiv\tDPML\n+ceil\t FLOAT64 DPML\n+ceill\tFLOAT64_VAXD\n+cexp\tDPML\n+cfree\n+cfree_opt\n chdir\n chmod\n chown\n clearerr\n+clearerr_unlocked\n clock\n+clock_getres\n+clock_gettime\n+clock_settime\n+clog\tDPML\n close\n closedir\n-connect\n-cos           FLOAT\n-ctermid       64\n+cmul\tDPML\n+cols\t GA\n+confstr\n+connect\t BSD44\n+copysign\tFLOAT64_VAXD DPML\n+copysignl\tFLOAT64_VAXD\n+cos\t FLOAT64 DPML\n+cosd\tFLOAT64_VAXD DPML\n+cosdl\tFLOAT64_VAXD\n+cosh\t FLOAT64 DPML\n+coshl\tFLOAT64_VAXD\n+cosl\tFLOAT64_VAXD\n+cot\tFLOAT64_VAXD DPML\n+cotd\tFLOAT64_VAXD DPML\n+cotdl\tFLOAT64_VAXD\n+cotl\tFLOAT64_VAXD\n+cpow\tDPML\n+creat\n+crtl_init\n+crypt\t 64\n+csin\tDPML\n+csinh\tDPML\n+csqrt   DPML\n+ctan\tDPML\n+ctanh\tDPML\n+ctermid\t 64\n ctime\n+ctime_r\n+cuserid\t 64\n+daylight\t GL\n+delete\n+delwin\n+difftime\t FLOAT64\n+dirname\t 64\n+div\n dlclose\n dlerror\n dlopen\n dlsym\n+drand48\t FLOAT64\n+drem\tDPML\n dup\n dup2\n-environ       GLOBAL\n+ecvt\t FLOAT64\n+encrypt\n+endgrent\n+endhostent\n+endnetent\n+endprotoent\n+endpwent\n+endservent\n+endwin\n+environ  GA\n+erand48\t FLOAT64\n+erf\tFLOAT64_VAXD DPML\n+erfc\tFLOAT64_VAXD DPML\n+erfcl\tFLOAT64_VAXD\n+erfl\tFLOAT64_VAXD\n+errno\t GA\n+execl\n+execle\n+execlp\n execv\n execve\n execvp\n exit\n-exp           FLOAT\n-fabs          FLOAT\n+exp\t FLOAT64 DPML\n+expl\tFLOAT64_VAXD\n+expm1\tFLOAT64_VAXD DPML\n+expm1l\tFLOAT64_VAXD\n+fabs\t FLOAT64 DPML\n+fabsl\tFLOAT64_VAXD\n+fchmod\n+fchown\n fclose\n fcntl\n+fcvt\t FLOAT64\n fdopen\n feof\n+feof_unlocked\n ferror\n+ferror_unlocked\n fflush\n ffs\n fgetc\n-fgetname      64 MALLOC\n-fgets         64\n+fgetc_unlocked\n+fgetname\t 64\n+fgetpos\n+fgets\t 64\n+fgetwc\n+fgetws\t 64\n fileno\n-floor         FLOAT\n+finite\tFLOAT64_VAXD DPML\n+finitel\tFLOAT64_VAXD\n+flockfile\n+floor\t FLOAT64 DPML\n+floorl\tFLOAT64_VAXD\n+fmod\t FLOAT64 DPML NODPML FLOATV2\n+fmodf\t FLOAT32 NODPML FLOATV2\n+fmodl\t FLOAT64 FLOAT128 NODPML FLOATV2\n+# fnmatch # Overridden by libiberty.\n fopen\n+fp_class\tFLOAT64_VAXD DPML\n+fp_classl\tFLOAT64_VAXD\n fpathconf\n-fprintf       FLOAT LDBL\n+fprintf\t FLOAT64 FLOAT128\n+fprintf__cf\t FLOAT64 FLOAT128\n fputc\n+fputc_unlocked\n fputs\n+fputwc\n+fputws\n fread\n free\n+free_opt\n+freeaddrinfo\n+freehostent\n freopen\n-frexp        FLOAT\n+frexp\t FLOAT64 DPML\n+frexpl\tFLOAT64_VAXD\n+fscanf\t FLOAT64 FLOAT128\n fseek\n+fseeko\n+fsetpos\n+fstat\n+fstatvfs\n+fsync\n ftell\n+ftello\n+ftime\n+ftruncate\n+ftrylockfile\n+ftw\n+funlockfile\n+fwait\n+fwide\n+fwprintf\t FLOAT64 FLOAT128\n fwrite\n+fwscanf\t FLOAT64 FLOAT128\n+gai_strerror\n+gamma\t FLOAT64 FLOATV2\n+gammaf\t FLOAT32 FLOATV2\n+gammal\t FLOAT64 FLOAT128 FLOATV2\n+gbsd_mvprintw\n+gbsd_mvscanw\n+gbsd_mvwprintw\n+gbsd_mvwscanw\n+gbsd_printw\n+gbsd_scanw\n+gbsd_wprintw\n+gbsd_wscanw\n+gcvt\t FLOAT64 64\n+get_errno_addr\n+get_vms_errno_addr\n+getaddrinfo\n+getaddrinfo_compat43\n getc\n+getc_unlocked\n getchar\n-getcwd        64\n+getchar_unlocked\n+getclock\n+getcwd\t 64\n+getdtablesize\n getegid\n getenv\n geteuid\n getgid\n-gethostbyaddr\n-gethostbyname\n-getname\n+getgrent\n+getgrgid\n+getgrgid_r\n+getgrnam\n+getgrnam_r\n+getgroups\n+gethostaddr\n+gethostbyaddr\t BSD44\n+gethostbyname\t BSD44\n+gethostent\n+gethostname\n+getipnodebyaddr\n+getipnodebyname\n+getitimer\n+getlogin\n+getlogin_r\n+getname\t 64\n+getnameinfo\n+getnetbyaddr\n+getnetbyname\n+getnetent\n+getopt\t32ONLY\n getpagesize\n+getpeername\t BSD44\n+getpgid\n+getpgrp\n getpid\n+getppid\n+getprotobyname\n+getprotobynumber\n+getprotoent\n getpwent\n getpwnam\n+getpwnam_r\t 64\n+getpwuid\n+getpwuid_r\t 64\n+gets\t 64\n getservbyname\n getservbyport\n+getservent\n+getsid\n+getsockname\t BSD44\n getsockopt\n gettimeofday\n getuid\n+getw\n+getwc\n+getwchar\n+glob\t 64\n+globfree\t 64\n gmtime\n+gmtime_r\n+gsignal\n+herror\n+hostalias\n+hstrerror\n+htonl\n htons\n+hypot\t FLOAT64 DPML NODPML FLOATV2\n+hypotf\t FLOAT32 NODPML FLOATV2\n+hypotl\t FLOAT64 FLOAT128 NODPML FLOATV2\n iconv\n-index         64\n+iconv_close\n+iconv_open\n+if_freenameindex\n+if_indextoname\n+if_nameindex\n+if_nametoindex\n+ilogb\tDPML\n+index\t 64\n+inet6_opt_append\n+inet6_opt_find\n+inet6_opt_finish\n+inet6_opt_get_val\n+inet6_opt_init\n+inet6_opt_next\n+inet6_opt_set_val\n+inet6_rth_add\n+inet6_rth_getaddr\n+inet6_rth_init\n+inet6_rth_reverse\n+inet6_rth_segments\n+inet6_rth_space\n+inet_addr\n+inet_aton\n+inet_lnaof\n+inet_makeaddr\n+inet_netof\n+inet_network\n+inet_ntoa\n+inet_ntop\n+inet_pton\n+initscr\n+initstate\n ioctl\n isalnum\n isalpha\n@@ -146,128 +499,432 @@ iscntrl\n isdigit\n isgraph\n islower\n+isnan\tFLOAT64_VAXD DPML\n+isnanl\tFLOAT64_VAXD\n isprint\n ispunct\n isspace\n isupper\n+iswalnum\n+iswalpha\n+iswcntrl\n+iswctype\n+iswdigit\n+iswgraph\n+iswlower\n+iswprint\n+iswpunct\n+iswspace\n+iswupper\n+iswxdigit\n isxdigit\n+j0\tFLOAT64_VAXD DPML\n+j0l\tFLOAT64_VAXD\n+j1\tFLOAT64_VAXD DPML\n+j1l\tFLOAT64_VAXD\n+jn\tFLOAT64_VAXD DPML\n+jnl\tFLOAT64_VAXD\n+jrand48\n kill\n-ldexp         FLOAT\n+l64a\n+l64a_r\n+labs\n+lchown\n+lcong48\n+ldexp\t FLOAT64 DPML\n+ldexpl\tFLOAT64_VAXD\n+ldiv\n+lgamma\t FLOAT64 DPML NODPML FLOATV2\n+lgammaf\t FLOAT32 NODPML FLOATV2\n+lgammal\t FLOAT64 FLOAT128 NODPML FLOATV2\n+lines\t GA\n+link\n+listen\n+llabs\n+lldiv\n locale\n localeconv\n localtime\n localtime_r\n-log           FLOAT\n-log10         FLOAT\n+# ln -> log DPML\n+log\t FLOAT64 FLOATV2\n+log10\t FLOAT64 DPML\n+log10l\tFLOAT64_VAXD\n+log1p\tFLOAT64_VAXD DPML\n+log1pl\tFLOAT64_VAXD\n+log2\tFLOAT64_VAXD DPML\n+log2l\tFLOAT64_VAXD\n+logb\tFLOAT64_VAXD DPML\n+logbl\tFLOAT64_VAXD\n+logf\t FLOAT32 FLOATV2\n+logl\t FLOAT64 FLOAT128 FLOATV2\n longjmp\n+longname 64\n+lrand48\n+lround\t DPML\n lseek\n-malloc        64 MALLOC\n-mbstowcs      64\n-memchr        64\n+lstat\n+lwait\n+malloc\t 64 MALLOC\n+malloc_opt\n+mblen\n+mbrlen\n+mbrtowc\n+mbsinit\n+mbsrtowcs\t 64\n+mbstowcs\n+mbtowc\n+memccpy\t 64\n+memchr\t 64\n memcmp\n-memcpy        64\n-memmove       64\n-memset        64\n+memcpy\t 64\n+memmove\t 64\n+memset\t 64\n mkdir\n mkstemp\n-mktemp        64\n-mmap          64\n+mktemp\t 64\n+mktime\n+mmap\t 64\n+modf\t FLOAT64 DPML\n+modfl\tFLOAT64_VAXD\n+mprotect\n+mrand48\n+msync\n munmap\n+mvwaddstr\n+mvwin\n nanosleep\n+newwin\n+nextafter\tFLOAT64_VAXD DPML\n+nextafterl\tFLOAT64_VAXD\n+nice\n+nint\tFLOAT64_VAXD DPML\n+nintl\tFLOAT64_VAXD\n nl_langinfo\n+nrand48\n+ntohl\n+ntohs\n open\n opendir\n+optarg\t GA\t32ONLY\n+opterr\t GL\t32ONLY\n+optind\t GL\t32ONLY\n+optopt\t GL\t32ONLY\n+overlay\n+overwrite\n pathconf\n+pause\n pclose\n perror\n pipe\n+poll\n popen\n-pow           FLOAT\n-printf        FLOAT LDBL\n+# pow DPML version ???\n+pow\t FLOAT64 FLOATV2\n+powf\t FLOAT32 FLOATV2\n+powl\t FLOAT64 FLOAT128 FLOATV2\n+pread\n+printf\t FLOAT64 FLOAT128\n+printf__cf\t FLOAT64 FLOAT128\n+printw\t FLOAT64 FLOAT128\n putc\n+putc_unlocked\n putchar\n+putchar_unlocked\n putenv\n puts\n-qsort         64\n+putw\n+putwc\n+putwchar\n+pwrite\n+qabs\n+qdiv\n+qsort\t 64\n raise\n+rand\n+rand_r\n random\n read\n readdir\n-realloc       64 MALLOC\n+readdir_r\t 64\n+readlink\n+readv\t 64\n+realloc\t 64 MALLOC\n+realloc_opt\n+realpath\t 64\n+record_read\n recv\n-recvfrom\n-recvmsg       BSD44 64\n+recvfrom\t BSD44\n+recvmsg\t BSD44\n+remainder DPML\n remove\n rename\n rewind\n-rindex        64\n+rewinddir\n+rindex\t 64\n+rint\tFLOAT64_VAXD DPML\n+rintl\tFLOAT64_VAXD\n rmdir\n-scanf         FLOAT LDBL\n+rtl_private\n+# sbrk # Makes libiberty/xmalloc.c fails to build.\n+scalb\tFLOAT64_VAXD DPML\n+scalbl\tFLOAT64_VAXD\n+scanf\t FLOAT64 FLOAT128\n+scanw\t FLOAT64 FLOAT128\n+scroll\n+seed48\n+seekdir\n select\n send\n-sendmsg       BSD44 64\n-sendto\n+sendmsg\t BSD44\n+sendto\t BSD44\n+set_new_handler__xpxv_v\n setbuf\n setenv\n+seteuid\n+setgid\n+setgrent\n+sethostent\n+setitimer\n+setkey\n setlocale\n+setnetent\n+setpgid\n+setpgrp\n+setprotoent\n setpwent\n+setregid\n+setreuid\n+setservent\n+setsid\n setsockopt\n+setstate\n+setuid\n setvbuf\n+shm_open\n+shm_unlink\n+shutdown\n+sigaction\n+sigaddset\n+sigblock\n+sigdelset\n+sigemptyset\n+sigfillset\n+sighold\n+sigignore\n+sigismember\n siglongjmp\n+sigmask\n signal\n+signgam\t GL\n+sigpause\n+sigpending\n+sigprocmask\n+sigrelse\n sigsetjmp\n sigsetmask\n-sin           FLOAT\n+sigstack\n+sigsuspend\n+sigtimedwait\n+sigvec\n+sigwait\n+sigwaitinfo\n+sin\t FLOAT64 DPML\n+sincos  DPML\n+sincosd DPML\n+sind\tFLOAT64_VAXD DPML\n+sindl\tFLOAT64_VAXD\n+sinh\t FLOAT64 DPML\n+sinhcosh DPML\n+sinhl\tFLOAT64_VAXD\n+sinl\tFLOAT64_VAXD\n sleep\n-snprintf      FLOAT LDBL\n+snprintf\t FLOAT64 FLOAT128\n socket\n-sprintf\t      FLOAT LDBL\n-sqrt          FLOAT\n-sscanf        FLOAT LDBL\n+socketpair\n+sprintf\t FLOAT64 FLOAT128\n+sprintf__cf\t FLOAT64 FLOAT128\n+sqrt\t FLOAT64 DPML\n+sqrtl\tFLOAT64_VAXD\n+srand\n+srand48\n+srandom\n+sscanf\t FLOAT64 FLOAT128\n+ssignal\n stat\n+statvfs\n strcasecmp\n-strcat        64\n-strchr        64\n+strcat\t 64\n+strchr\t 64\n strcmp\n-strcpy        64\n+strcoll\n+strcpy\t 64\n strcspn\n-strdup        64 MALLOC\n+strdup\t 64 MALLOC\n strerror\n+strfmon\t FLOAT64\n+strftime\n strlen\n strncasecmp\n-strncat       64\n+strncat\t 64\n strncmp\n-strncpy       64\n-strpbrk       64\n-strrchr       64\n+strncpy\t 64\n+strnlen\n+strpbrk\t 64\n+strptime\t 64\n+strptime_xpg4\n+strrchr\t 64\n+strsep\t 64\n strspn\n-strstr        64\n-strtod        64 FLOAT\n-strtok        64 MALLOC\n-strtok_r      64 MALLOC\n-strtol        64\n-strtoul       64\n+strstr\t 64\n+strtod\t FLOAT64 64\n+strtok\t 64\n+strtok_r\t 64\n+strtol\t 64\n+strtoll\t 64\n+strtoq\t 64\n+strtoul\t 64\n+strtoull\t 64\n+strtouq\t 64\n+strxfrm\n+subwin\n+swab\n+swprintf\t FLOAT64 FLOAT128\n+swscanf\t FLOAT64 FLOAT128\n+symlink\n+sys_errlist\t GA\n+sys_nerr\t GL\n sysconf\n system\n-tan           FLOAT\n+tan\t FLOAT64 DPML\n+tand\tFLOAT64_VAXD DPML\n+tandl\tFLOAT64_VAXD\n+tanh\t FLOAT64 DPML\n+tanhl\tFLOAT64_VAXD\n+tanl\tFLOAT64_VAXD\n+telldir\n tempnam\n+tgamma  DPML\n time\n times\n+timezone\t GL\n tmpfile\n-tmpnam        64\n+tmpnam\t 64\n+toascii\n tolower\n+touchwin\n toupper\n+towctrans\n+towlower\n+towupper\n+trunc\tFLOAT64_VAXD DPML\n+truncate\n+truncl\tFLOAT64_VAXD\n ttyname\n+ttyname_r\n+tzname\t GA\n+tzset\n+ualarm\n umask\n+uname\n ungetc\n+ungetwc\n unlink\n+unordered\tFLOAT64_VAXD DPML\n+unorderedl\tFLOAT64_VAXD\n+unsetenv\n usleep\n utime\n-vfprintf      FLOAT LDBL\n-vprintf       FLOAT LDBL\n-vsnprintf     FLOAT LDBL\n-vsprintf      FLOAT LDBL\n+utimes\n+vaxc$calloc_opt\n+vaxc$cfree_opt\n+vaxc$crtl_init\n+vaxc$errno\t GA\n+vaxc$free_opt\n+vaxc$get_sdc\n+vaxc$malloc_opt\n+vaxc$realloc_opt\n+vfprintf\t FLOAT64 FLOAT128\n+vfscanf\t FLOAT64 FLOAT128\n+vfwprintf\t FLOAT64 FLOAT128\n+vfwscanf\t FLOAT64 FLOAT128\n+vprintf\t FLOAT64 FLOAT128\n+vscanf\t FLOAT64 FLOAT128\n+vsnprintf\t FLOAT64 FLOAT128\n+vsprintf\t FLOAT64 FLOAT128\n+vsscanf\t FLOAT64 FLOAT128\n+vswprintf\t FLOAT64 FLOAT128\n+vswscanf\t FLOAT64 FLOAT128\n+vwprintf\t FLOAT64 FLOAT128\n+vwscanf\t FLOAT64 FLOAT128\n+waddch\n+waddstr\n wait\n+wait3\n+wait4\n waitpid\n+wclear\n+wclrattr\n+wclrtobot\n+wclrtoeol\n+wcrtomb\n+wcscat\t 64\n+wcschr\t 64\n+wcscmp\n+wcscoll\n+wcscpy\t 64\n+wcscspn\n+wcsftime\n+wcslen\n+wcsncat\t 64\n+wcsncmp\n+wcsncpy\t 64\n+wcspbrk\t 64\n+wcsrchr\t 64\n+wcsrtombs\t 64\n+wcsspn\n+wcsstr\t 64\n+wcstod\t FLOAT64 64\n+wcstok\t 64\n+wcstol\t 64\n+wcstombs\n+wcstoul\t 64\n+wcswcs\t 64\n wcswidth\n+wcsxfrm\n+wctob\n+wctomb\n+wctrans\n+wctype\n+wcwidth\n+wdelch\n+wdeleteln\n+werase\n+wgetch\n+wgetstr\n+winch\n+winsch\n+winsertln\n+winsstr\n+wmemchr\t 64\n+wmemcmp\n+wmemcpy\t 64\n+wmemmove\t 64\n+wmemset\t 64\n+wmove\n+wprintf\t FLOAT64 FLOAT128\n+wprintw\t FLOAT64 FLOAT128\n+wrefresh\n write\n+writev\n+wscanf\t FLOAT64 FLOAT128\n+wscanw\t FLOAT64 FLOAT128\n+wsetattr\n+wstandend\n+wstandout\n+y0\tFLOAT64_VAXD DPML\n+y0l\tFLOAT64_VAXD\n+y1\tFLOAT64_VAXD DPML\n+y1l\tFLOAT64_VAXD\n+yn\tFLOAT64_VAXD DPML\n+ynl\tFLOAT64_VAXD"}, {"sha": "d4ebd18730b74a8eb0d041bd5d81c3d47e3491d8", "filename": "gcc/config/vms/vms.c", "status": "modified", "additions": 112, "deletions": 20, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9268e550b893f065a23e73e76d911cea5480df9/gcc%2Fconfig%2Fvms%2Fvms.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9268e550b893f065a23e73e76d911cea5480df9/gcc%2Fconfig%2Fvms%2Fvms.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms.c?ref=b9268e550b893f065a23e73e76d911cea5480df9", "patch": "@@ -26,6 +26,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ggc.h\"\n #include \"target.h\"\n #include \"output.h\"\n+#include \"tm.h\"\n+#include \"dwarf2out.h\"\n \n /* Correlation of standard CRTL names with DECCRTL function names.  */\n \n@@ -36,19 +38,46 @@ along with GCC; see the file COPYING3.  If not see\n /* If long pointer are enabled, use _NAME64 instead.  */\n #define VMS_CRTL_64\t(1 << 1)\n \n-/* Use tNAME instead.  To be applied after the previous rule.  */\n-#define VMS_CRTL_FLOAT  (1 << 2)\n+/* Prepend s/f before the name.  To be applied after the previous rule.\n+   use 's' for S float, 'f' for IEEE 32.  */\n+#define VMS_CRTL_FLOAT32  (1 << 2)\n \n-/* Prepend __bsd44__ before the name.  To be applied after the P64\n-   rule.  */\n-#define VMS_CRTL_BSD44\t(1 << 3)\n+/* Prepend t/g/d before the name.  To be applied after the previous rule.\n+   use 'g' for VAX G float, 'd' for VAX D float, 't' for IEEE 64.  */\n+#define VMS_CRTL_FLOAT64  (1 << 3)\n+\n+/* Prepend d before the name, only if using VAX fp.  */\n+#define VMS_CRTL_FLOAT64_VAXD  (1 << 4)\n \n /* Prepend x before the name for if 128 bit long doubles are enabled.  This\n    concern mostly 'printf'-like functions.  */\n-#define VMS_CRTL_LDBL\t(1 << 4)\n+#define VMS_CRTL_FLOAT128 (1 << 5)\n+\n+/* From xxx, create xxx, xxxf, xxxl using MATH$XXX_T, MATH$XXX_S\n+   and MATH$XXX{_X} if DPML is used.  */\n+#define VMS_CRTL_DPML (1 << 6)\n \n-/* Prepend ga_ for global data.  */\n-#define VMS_CRTL_GLOBAL (1 << 5)\n+/* Together with DPML, it means that all variant (ie xxx, xxxf and xxxl) are\n+   overridden by decc.  Without DPML, it means this is a variant (ie xxxf\n+   or xxxl) of a function.  */\n+#define VMS_CRTL_NODPML (1 << 7)\n+\n+/* Prepend __bsd44_ before the name.  To be applied after the P64\n+   rule.  */\n+#define VMS_CRTL_BSD44\t(1 << 8)\n+\n+/* Define only in 32 bits mode, as this has no 64 bit variants.\n+   Concerns getopt/getarg.  */\n+#define VMS_CRTL_32ONLY (1 << 9)\n+\n+/* GLobal data prefix (ga_, gl_...)  */\n+#define VMS_CRTL_G_MASK (7 << 10)\n+#define VMS_CRTL_G_NONE (0 << 10)\n+#define VMS_CRTL_GA\t(1 << 10)\n+#define VMS_CRTL_GL\t(2 << 10)\n+\n+/* Append '_2'.  Not compatible with 64.  */\n+#define VMS_CRTL_FLOATV2 (1 << 13)\n \n struct vms_crtl_name\n {\n@@ -84,14 +113,14 @@ vms_add_crtl_xlat (const char *name, size_t nlen,\n {\n   tree targ;\n \n+  /* printf (\"vms crtl: %.*s -> %.*s\\n\", nlen, name, id_len, id_str); */\n+\n   targ = get_identifier_with_length (name, nlen);\n   gcc_assert (!IDENTIFIER_TRANSPARENT_ALIAS (targ));\n   IDENTIFIER_TRANSPARENT_ALIAS (targ) = 1;\n   TREE_CHAIN (targ) = get_identifier_with_length (id_str, id_len);\n \n   VEC_safe_push (tree, gc, aliases_id, targ);\n-\n-  /* printf (\"vms: %s (%p) -> %.*s\\n\", name, targ, id_len, id_str); */\n }\n \n /* Do VMS specific stuff on builtins: disable the ones that are not\n@@ -116,35 +145,98 @@ vms_patch_builtins (void)\n       const struct vms_crtl_name *n = &vms_crtl_names[i];\n       char res[VMS_CRTL_MAXLEN + 3 + 9 + 1 + 1];\n       int rlen;\n-      int nlen;\n+      int nlen = strlen (n->name);\n+\n+      /* Discard 32ONLY if using 64 bit pointers.  */\n+      if ((n->flags & VMS_CRTL_32ONLY)\n+\t  && flag_vms_pointer_size == VMS_POINTER_SIZE_64)\n+\tcontinue;\n+\n+      /* Handle DPML unless overridden by decc.  */\n+      if ((n->flags & VMS_CRTL_DPML)\n+\t  && !(n->flags & VMS_CRTL_NODPML))\n+\t{\n+\t  const char *p;\n+          char alt[VMS_CRTL_MAXLEN + 3];\n+\n+\t  memcpy (res, \"MATH$\", 5);\n+\t  rlen = 5;\n+\t  for (p = n->name; *p; p++)\n+\t    res[rlen++] = TOUPPER (*p);\n+\t  res[rlen++] = '_';\n+\t  res[rlen++] = 'T';\n+\n+\t  /* Double version.  */\n+\t  if (!(n->flags & VMS_CRTL_FLOAT64))\n+\t    vms_add_crtl_xlat (n->name, nlen, res, rlen);\n+\n+\t  /* Float version.  */\n+\t  res[rlen - 1] = 'S';\n+\t  memcpy (alt, n->name, nlen);\n+\t  alt[nlen] = 'f';\n+\t  vms_add_crtl_xlat (alt, nlen + 1, res, rlen);\n+\n+\t  /* Long double version.  */\n+\t  res[rlen - 1] = (LONG_DOUBLE_TYPE_SIZE == 128 ? 'X' : 'T');\n+\t  alt[nlen] = 'l';\n+\t  vms_add_crtl_xlat (alt, nlen + 1, res, rlen);\n+\n+\t  if (!(n->flags & (VMS_CRTL_FLOAT32 | VMS_CRTL_FLOAT64)))\n+\t    continue;\n+\t}\n+\n+      if (n->flags & VMS_CRTL_FLOAT64_VAXD)\n+\tcontinue;\n \n       /* Add the dec-c prefix.  */\n       memcpy (res, \"decc$\", 5);\n       rlen = 5;\n \n       if (n->flags & VMS_CRTL_BSD44)\n         {\n-          memcpy (res + rlen, \"__bsd44__\", 9);\n-          rlen += 9;\n+          memcpy (res + rlen, \"__bsd44_\", 8);\n+          rlen += 8;\n         }\n \n-      if (n->flags & VMS_CRTL_GLOBAL)\n+      if ((n->flags & VMS_CRTL_G_MASK) != VMS_CRTL_G_NONE)\n         {\n-          memcpy (res + rlen, \"ga_\", 3);\n-          rlen += 3;\n+\t  res[rlen++] = 'g';\n+\t  switch (n->flags & VMS_CRTL_G_MASK)\n+\t    {\n+\t    case VMS_CRTL_GA:\n+\t      res[rlen++] = 'a';\n+\t      break;\n+\t    case VMS_CRTL_GL:\n+\t      res[rlen++] = 'l';\n+\t      break;\n+\t    default:\n+\t      gcc_unreachable ();\n+\t    }\n+\t  res[rlen++] = '_';\n         }\n \n-      if (n->flags & VMS_CRTL_FLOAT)\n+      if (n->flags & VMS_CRTL_FLOAT32)\n+        res[rlen++] = 'f';\n+\n+      if (n->flags & VMS_CRTL_FLOAT64)\n         res[rlen++] = 't';\n \n-      if (n->flags & VMS_CRTL_LDBL)\n+      if ((n->flags & VMS_CRTL_FLOAT128) && LONG_DOUBLE_TYPE_SIZE == 128)\n         res[rlen++] = 'x';\n \n-      nlen = strlen (n->name);\n       memcpy (res + rlen, n->name, nlen);\n \n       if ((n->flags & VMS_CRTL_64) == 0)\n-        vms_add_crtl_xlat (n->name, nlen, res, rlen + nlen);\n+\t{\n+\t  rlen += nlen;\n+\n+\t  if (n->flags & VMS_CRTL_FLOATV2)\n+\t    {\n+\t      res[rlen++] = '_';\n+\t      res[rlen++] = '2';\n+\t    }\n+\t  vms_add_crtl_xlat (n->name, nlen, res, rlen);\n+\t}\n       else\n         {\n           char alt[VMS_CRTL_MAXLEN + 3];"}]}