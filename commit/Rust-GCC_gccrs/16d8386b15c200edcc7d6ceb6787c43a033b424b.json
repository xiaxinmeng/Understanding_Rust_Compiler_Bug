{"sha": "16d8386b15c200edcc7d6ceb6787c43a033b424b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZkODM4NmIxNWMyMDBlZGNjN2Q2Y2ViNjc4N2M0M2EwMzNiNDI0Yg==", "commit": {"author": {"name": "Jan Beulich", "email": "jbeulich@novell.com", "date": "2005-01-13T07:12:11Z"}, "committer": {"name": "Jan Beulich", "email": "jbeulich@gcc.gnu.org", "date": "2005-01-13T07:12:11Z"}, "message": "ia64.md (ashlti3, [...]): New.\n\ngcc/\n2005-01-13  Jan Beulich  <jbeulich@novell.com>\n\n\t* config/ia64/ia64.md (ashlti3, ashlti3_internal): New.\n\t(ashrti3_internal): Indicate output is early clobber. Generate result\n\tinto output rather than first input. Use move for low word of output\n\tif shift count is exactly 64.\n\t(lshrti3_internal): Likewise.\n\nFrom-SVN: r93596", "tree": {"sha": "c4b096c671ea629b4c92f9043c2826dab5ac33e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4b096c671ea629b4c92f9043c2826dab5ac33e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16d8386b15c200edcc7d6ceb6787c43a033b424b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16d8386b15c200edcc7d6ceb6787c43a033b424b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16d8386b15c200edcc7d6ceb6787c43a033b424b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16d8386b15c200edcc7d6ceb6787c43a033b424b/comments", "author": null, "committer": null, "parents": [{"sha": "0149f412ec522ac2257390a0033ca29941f72858", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0149f412ec522ac2257390a0033ca29941f72858", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0149f412ec522ac2257390a0033ca29941f72858"}], "stats": {"total": 87, "additions": 75, "deletions": 12}, "files": [{"sha": "a514b59501f7ed6988ef267ccc7562039a826e3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16d8386b15c200edcc7d6ceb6787c43a033b424b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16d8386b15c200edcc7d6ceb6787c43a033b424b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16d8386b15c200edcc7d6ceb6787c43a033b424b", "patch": "@@ -1,3 +1,11 @@\n+2005-01-13  Jan Beulich  <jbeulich@novell.com>\n+\n+\t* config/ia64/ia64.md (ashlti3, ashlti3_internal): New.\n+\t(ashrti3_internal): Indicate output is early clobber. Generate result\n+\tinto output rather than first input. Use move for low word of output\n+\tif shift count is exactly 64.\n+\t(lshrti3_internal): Likewise.\n+\n 2005-01-13  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \tPR target/18329"}, {"sha": "c406a797f41a2a0f78479dbafe1400a6a508c964", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 67, "deletions": 12, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16d8386b15c200edcc7d6ceb6787c43a033b424b/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16d8386b15c200edcc7d6ceb6787c43a033b424b/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=16d8386b15c200edcc7d6ceb6787c43a033b424b", "patch": "@@ -4331,6 +4331,49 @@\n ;; ::\n ;; ::::::::::::::::::::\n \n+(define_expand \"ashlti3\"\n+  [(set (match_operand:TI 0 \"gr_register_operand\" \"\")\n+\t(ashift:TI (match_operand:TI 1 \"gr_register_operand\" \"\")\n+\t\t   (match_operand:DI 2 \"nonmemory_operand\" \"\")))]\n+  \"\"\n+{\n+  if (!dshift_count_operand (operands[2], DImode))\n+    FAIL;\n+})\n+\n+(define_insn_and_split \"*ashlti3_internal\"\n+  [(set (match_operand:TI 0 \"gr_register_operand\" \"=&r\")\n+\t(ashift:TI (match_operand:TI 1 \"gr_register_operand\" \"r\")\n+\t\t   (match_operand:DI 2 \"dshift_count_operand\" \"n\")))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(const_int 0)]\n+{\n+  HOST_WIDE_INT shift = INTVAL (operands[2]);\n+  rtx rl = gen_lowpart (DImode, operands[0]);\n+  rtx rh = gen_highpart (DImode, operands[0]);\n+  rtx lo = gen_lowpart (DImode, operands[1]);\n+  rtx shiftlo = GEN_INT (shift & 63);\n+\n+  if (shift & 64)\n+    {\n+      emit_move_insn (rl, const0_rtx);\n+      if (shift & 63)\n+\temit_insn (gen_ashldi3 (rh, lo, shiftlo));\n+      else\n+\temit_move_insn (rh, lo);\n+    }\n+  else\n+    {\n+      rtx hi = gen_highpart (DImode, operands[1]);\n+\n+      emit_insn (gen_shrp (rh, hi, lo, GEN_INT (-shift & 63)));\n+      emit_insn (gen_ashldi3 (rl, lo, shiftlo));\n+    }\n+  DONE;\n+})\n+\n (define_expand \"ashrti3\"\n   [(set (match_operand:TI 0 \"gr_register_operand\" \"\")\n \t(ashiftrt:TI (match_operand:TI 1 \"gr_register_operand\" \"\")\n@@ -4342,7 +4385,7 @@\n })\n \n (define_insn_and_split \"*ashrti3_internal\"\n-  [(set (match_operand:TI 0 \"gr_register_operand\" \"=r\")\n+  [(set (match_operand:TI 0 \"gr_register_operand\" \"=&r\")\n \t(ashiftrt:TI (match_operand:TI 1 \"gr_register_operand\" \"r\")\n \t\t     (match_operand:DI 2 \"dshift_count_operand\" \"n\")))]\n   \"\"\n@@ -4351,19 +4394,25 @@\n   [(const_int 0)]\n {\n   HOST_WIDE_INT shift = INTVAL (operands[2]);\n-  rtx lo = gen_lowpart (DImode, operands[1]);\n+  rtx rl = gen_lowpart (DImode, operands[0]);\n+  rtx rh = gen_highpart (DImode, operands[0]);\n   rtx hi = gen_highpart (DImode, operands[1]);\n   rtx shiftlo = GEN_INT (shift & 63);\n \n   if (shift & 64)\n     {\n-      emit_insn (gen_ashrdi3 (lo, hi, shiftlo));\n-      emit_insn (gen_ashrdi3 (hi, hi, GEN_INT (63)));\n+      if (shift & 63)\n+\temit_insn (gen_ashrdi3 (rl, hi, shiftlo));\n+      else\n+\temit_move_insn (rl, hi);\n+      emit_insn (gen_ashrdi3 (rh, hi, GEN_INT (63)));\n     }\n   else\n     {\n-      emit_insn (gen_shrp (lo, hi, lo, shiftlo));\n-      emit_insn (gen_ashrdi3 (hi, hi, shiftlo));\n+      rtx lo = gen_lowpart (DImode, operands[1]);\n+\n+      emit_insn (gen_shrp (rl, hi, lo, shiftlo));\n+      emit_insn (gen_ashrdi3 (rh, hi, shiftlo));\n     }\n   DONE;\n })\n@@ -4379,7 +4428,7 @@\n }) \n \n (define_insn_and_split \"*lshrti3_internal\"\n-  [(set (match_operand:TI 0 \"gr_register_operand\" \"=r\")\n+  [(set (match_operand:TI 0 \"gr_register_operand\" \"=&r\")\n \t(lshiftrt:TI (match_operand:TI 1 \"gr_register_operand\" \"r\")\n \t\t     (match_operand:DI 2 \"dshift_count_operand\" \"n\")))]\n   \"\"\n@@ -4388,19 +4437,25 @@\n   [(const_int 0)]\n {\n   HOST_WIDE_INT shift = INTVAL (operands[2]);\n-  rtx lo = gen_lowpart (DImode, operands[1]);\n+  rtx rl = gen_lowpart (DImode, operands[0]);\n+  rtx rh = gen_highpart (DImode, operands[0]);\n   rtx hi = gen_highpart (DImode, operands[1]);\n   rtx shiftlo = GEN_INT (shift & 63);\n \n   if (shift & 64)\n     {\n-      emit_insn (gen_lshrdi3 (lo, hi, shiftlo));\n-      emit_move_insn (hi, const0_rtx);\n+      if (shift & 63)\n+\temit_insn (gen_lshrdi3 (rl, hi, shiftlo));\n+      else\n+\temit_move_insn (rl, hi);\n+      emit_move_insn (rh, const0_rtx);\n     }\n   else\n     {\n-      emit_insn (gen_shrp (lo, hi, lo, shiftlo));\n-      emit_insn (gen_lshrdi3 (hi, hi, shiftlo));\n+      rtx lo = gen_lowpart (DImode, operands[1]);\n+\n+      emit_insn (gen_shrp (rl, hi, lo, shiftlo));\n+      emit_insn (gen_lshrdi3 (rh, hi, shiftlo));\n     }\n   DONE;\n })"}]}