{"sha": "83d26d0e1b3625ab6c2d83610a13976b52f63e0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNkMjZkMGUxYjM2MjVhYjZjMmQ4MzYxMGExMzk3NmI1MmY2M2UwYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-27T13:42:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-27T13:42:47Z"}, "message": "veclower: Fix up vec_shl matching of VEC_PERM_EXPR [PR100239]\n\nThe following testcase ICEs at -O0, because lower_vec_perm sees the\n  _1 = { 0, 0, 0, 0, 0, 0, 0, 0 };\n  _2 = VEC_COND_EXPR <_1, { -1, -1, -1, -1, -1, -1, -1, -1 }, { 0, 0, 0, 0, 0, 0, 0, 0 }>;\n  _3 = { 6, 0, 0, 0, 0, 0, 0, 0 };\n  _4 = VEC_PERM_EXPR <{ 0, 0, 0, 0, 0, 0, 0, 0 }, _2, _3>;\nand as the ISA is SSE2, there is no support for the particular permutation\nnor for variable mask permutation.  But, the code to match vec_shl matches\nit, because the permutation has the first operand a zero vector and the\nmask picks all elements randomly from that vector.\nSo, in the end that isn't a vec_shl, but the permutation could be in theory\noptimized into the first argument.  As we keep it as is, it will fail\nduring expansion though, because that for vec_shl correctly requires that\nit actually is a shift:\n      unsigned firstidx = 0;\n      for (unsigned int i = 0; i < nelt; i++)\n        {\n          if (known_eq (sel[i], nelt))\n            {\n              if (i == 0 || firstidx)\n                return NULL_RTX;\n              firstidx = i;\n            }\n          else if (firstidx\n                   ? maybe_ne (sel[i], nelt + i - firstidx)\n                   : maybe_ge (sel[i], nelt))\n            return NULL_RTX;\n        }\n\n      if (firstidx == 0)\n        return NULL_RTX;\n      first = firstidx;\nThe if (firstidx == 0) return NULL; is what is missing a counterpart\non the lower_vec_perm side.\nAs with optimize != 0 we fold it in other spots, I think it is not needed\nto optimize this cornercase in lower_vec_perm (which would mean we'd need\nto recurse on the newly created _4 = { 0, 0, 0, 0, 0, 0, 0, 0 };\nwhether it is supported or not).\n\n2021-04-27  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/100239\n\t* tree-vect-generic.c (lower_vec_perm): Don't accept constant\n\tpermutations with all indices from the first zero element as vec_shl.\n\n\t* gcc.dg/pr100239.c: New test.", "tree": {"sha": "8a5ffbe1f59590ad485a150e098ff30af783e841", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a5ffbe1f59590ad485a150e098ff30af783e841"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83d26d0e1b3625ab6c2d83610a13976b52f63e0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83d26d0e1b3625ab6c2d83610a13976b52f63e0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83d26d0e1b3625ab6c2d83610a13976b52f63e0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83d26d0e1b3625ab6c2d83610a13976b52f63e0a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26690993d0a93656b0a20788b5c3439fbd260da2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26690993d0a93656b0a20788b5c3439fbd260da2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26690993d0a93656b0a20788b5c3439fbd260da2"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "1ade810c52b0550a2c3ca2c5ef9b694912eb561e", "filename": "gcc/testsuite/gcc.dg/pr100239.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83d26d0e1b3625ab6c2d83610a13976b52f63e0a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr100239.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83d26d0e1b3625ab6c2d83610a13976b52f63e0a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr100239.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr100239.c?ref=83d26d0e1b3625ab6c2d83610a13976b52f63e0a", "patch": "@@ -0,0 +1,12 @@\n+/* PR tree-optimization/100239 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0\" } */\n+\n+typedef short __attribute__((__vector_size__ (8 * sizeof (short)))) V;\n+V v, w;\n+\n+void\n+foo (void)\n+{\n+  w = __builtin_shuffle (v != v, 0 < (V) {}, (V) {192} >> 5);\n+}"}, {"sha": "5cc32c406635029a44c39be1aa6de8e9e5c65366", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83d26d0e1b3625ab6c2d83610a13976b52f63e0a/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83d26d0e1b3625ab6c2d83610a13976b52f63e0a/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=83d26d0e1b3625ab6c2d83610a13976b52f63e0a", "patch": "@@ -1563,7 +1563,7 @@ lower_vec_perm (gimple_stmt_iterator *gsi)\n \t\t\t\t\t      elements + i - first)\n \t\t     : maybe_ge (poly_uint64 (indices[i]), elements))\n \t      break;\n-\t  if (i == elements)\n+\t  if (first && i == elements)\n \t    {\n \t      gimple_assign_set_rhs3 (stmt, mask);\n \t      update_stmt (stmt);"}]}