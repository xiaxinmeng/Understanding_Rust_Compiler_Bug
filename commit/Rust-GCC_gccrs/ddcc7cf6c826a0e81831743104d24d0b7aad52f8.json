{"sha": "ddcc7cf6c826a0e81831743104d24d0b7aad52f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRjYzdjZjZjODI2YTBlODE4MzE3NDMxMDRkMjRkMGI3YWFkNTJmOA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2000-01-25T10:56:54Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2000-01-25T10:56:54Z"}, "message": "typeck.c (composite_pointer_type, [...]): Avoid ANSI string concatenation usage.\n\n2000-01-25  Gabriel Dos Reis  <gdr@codesourcery.com>\n\n        * typeck.c (composite_pointer_type, c_sizeof, expr_sizeof,\n        build_binary_op_nodefault, build_unary_op, build_reinterpret_cast,\n        build_const_cast, get_delta_difference, check_return_expr): Avoid\n        ANSI string concatenation usage.\n\nFrom-SVN: r31608", "tree": {"sha": "ebc1ba6f2a23b8843d65d173dd92d0d21c8db629", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ebc1ba6f2a23b8843d65d173dd92d0d21c8db629"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddcc7cf6c826a0e81831743104d24d0b7aad52f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddcc7cf6c826a0e81831743104d24d0b7aad52f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddcc7cf6c826a0e81831743104d24d0b7aad52f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddcc7cf6c826a0e81831743104d24d0b7aad52f8/comments", "author": null, "committer": null, "parents": [{"sha": "ef8288f7deed988dc714fea3b0dc293890a835a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef8288f7deed988dc714fea3b0dc293890a835a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef8288f7deed988dc714fea3b0dc293890a835a6"}], "stats": {"total": 54, "additions": 22, "deletions": 32}, "files": [{"sha": "27353026596e2653e8f63a5357ebda2e54f458c7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddcc7cf6c826a0e81831743104d24d0b7aad52f8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddcc7cf6c826a0e81831743104d24d0b7aad52f8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ddcc7cf6c826a0e81831743104d24d0b7aad52f8", "patch": "@@ -1,3 +1,10 @@\n+2000-01-25  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* typeck.c (composite_pointer_type, c_sizeof, expr_sizeof,\n+\tbuild_binary_op_nodefault, build_unary_op, build_reinterpret_cast,\n+\tbuild_const_cast, get_delta_difference, check_return_expr): Avoid\n+\tANSI string concatenation usage.  \n+\n 2000-01-24  Mark Mitchell  <mark@codesourcery.com>\n \n \t* class.c (layout_class_type): Put the fields required to make a"}, {"sha": "8b1a31c802df844c2f467451b3a55daabdbf0c2d", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 15, "deletions": 32, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddcc7cf6c826a0e81831743104d24d0b7aad52f8/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddcc7cf6c826a0e81831743104d24d0b7aad52f8/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=ddcc7cf6c826a0e81831743104d24d0b7aad52f8", "patch": "@@ -452,15 +452,13 @@ composite_pointer_type (t1, t2, arg1, arg2, location)\n   else if (TYPE_MAIN_VARIANT (TREE_TYPE (t1)) == void_type_node)\n     {\n       if (pedantic && TREE_CODE (t2) == FUNCTION_TYPE)\n-\tpedwarn (\"ISO C++ forbids %s between pointer of type `void *'\"\n-                 \" and pointer-to-function\", location);\n+\tpedwarn (\"ISO C++ forbids %s between pointer of type `void *' and pointer-to-function\", location);\n       result_type = qualify_type (t1, t2);\n     }\n   else if (TYPE_MAIN_VARIANT (TREE_TYPE (t2)) == void_type_node)\n     {\n       if (pedantic && TREE_CODE (t1) == FUNCTION_TYPE)\n-\tpedwarn (\"ISO C++ forbids %s between pointer of type `void *'\"\n-                 \" and pointer-to-function\", location);\n+\tpedwarn (\"ISO C++ forbids %s between pointer of type `void *' and pointer-to-function\", location);\n       result_type = qualify_type (t2, t1);\n     }\n   /* C++ */\n@@ -1560,8 +1558,7 @@ c_sizeof (type)\n   if (code == VOID_TYPE)\n     {\n       if (pedantic || warn_pointer_arith)\n-\tpedwarn (\"ISO C++ forbids applying `sizeof' to type `void' which is\"\n-                 \" an incomplete type\");\n+\tpedwarn (\"ISO C++ forbids applying `sizeof' to type `void' which is an incomplete type\");\n       return size_int (1);\n     }\n   if (code == ERROR_MARK)\n@@ -1606,8 +1603,7 @@ expr_sizeof (e)\n     error (\"sizeof applied to a bit-field\");\n   if (is_overloaded_fn (e))\n     {\n-      pedwarn (\"ISO C++ forbids applying `sizeof' to an expression\"\n-               \" of function type\");\n+      pedwarn (\"ISO C++ forbids applying `sizeof' to an expression of function type\");\n       return size_int (1);\n     }\n   else if (type_unknown_p (e))\n@@ -3997,8 +3993,7 @@ build_binary_op_nodefault (code, orig_op0, orig_op1, error_code)\n \t\t\t\t\t\tsigned_type (result_type)))))\n \t    /* OK */;\n \t  else\n-\t    warning (\"comparison between a signed and an unsigned\"\n-                     \" integer expressions\");\n+\t    warning (\"comparison between a signed and an unsigned integer expressions\");\n \n \t  /* Warn if two unsigned values are being compared in a size\n \t     larger than their original size, and one (and only one) is the\n@@ -4715,13 +4710,9 @@ build_unary_op (code, xarg, noconvert)\n \t      if (current_class_type\n \t\t  && TREE_OPERAND (arg, 0) == current_class_ref)\n \t\t/* An expression like &memfn.  */\n-\t\tcp_pedwarn (\"ISO C++ forbids taking the address of a\"\n-                            \" non-static member function to form a pointer\"\n-                            \" to member function.  Say `&%T::%D'\", base, name);\n+\t\tcp_pedwarn (\"ISO C++ forbids taking the address of a non-static member function to form a pointer to member function.  Say `&%T::%D'\", base, name);\n \t      else\n-\t\tcp_pedwarn (\"ISO C++ forbids taking the address of a bound\"\n-                            \" member function to form a pointer to member\"\n-                            \" function\", base, name);\n+\t\tcp_pedwarn (\"ISO C++ forbids taking the address of a bound member function to form a pointer to member function\", base, name);\n \t    }\n \n \t  arg = build_offset_ref (base, name);\n@@ -4746,8 +4737,7 @@ build_unary_op (code, xarg, noconvert)\n \tcase FIX_ROUND_EXPR:\n \tcase FIX_CEIL_EXPR:\n \t  if (! lvalue_p (arg) && pedantic)\n-\t    pedwarn (\"ISO C++ forbids taking the address of a cast to a \"\n-                     \"non-lvalue expression\");\n+\t    pedwarn (\"ISO C++ forbids taking the address of a cast to a non-lvalue expression\");\n \t  break;\n \t  \n \tdefault:\n@@ -5279,8 +5269,7 @@ build_reinterpret_cast (type, expr)\n     {\n       if (! real_lvalue_p (expr))\n \t{\n-\t  cp_error (\"invalid reinterpret_cast of an rvalue expression of type\"\n-                    \" `%T' to type `%T'\", intype, type);\n+\t  cp_error (\"invalid reinterpret_cast of an rvalue expression of type `%T' to type `%T'\", intype, type);\n \t  return error_mark_node;\n \t}\n       expr = build_unary_op (ADDR_EXPR, expr, 0);\n@@ -5359,12 +5348,10 @@ build_const_cast (type, expr)\n     }\n \n   if (!POINTER_TYPE_P (type))\n-    cp_error (\"invalid use of const_cast with type `%T', which is not a\"\n-              \" pointer, reference, nor a pointer-to-data-member type\", type);\n+    cp_error (\"invalid use of const_cast with type `%T', which is not a pointer, reference, nor a pointer-to-data-member type\", type);\n   else if (TREE_CODE (TREE_TYPE (type)) == FUNCTION_TYPE)\n     {\n-      cp_error (\"invalid use of const_cast with type `%T', which is a pointer\"\n-                \" or reference to a function type\", type);\n+      cp_error (\"invalid use of const_cast with type `%T', which is a pointer or reference to a function type\", type);\n       return error_mark_node;\n     }\n \n@@ -6061,8 +6048,7 @@ get_delta_difference (from, to, force)\n       if (binfo_from_vbase (binfo))\n \t{\n \t  binfo = BINFO_FOR_VBASE (BINFO_TYPE (binfo), from);\n-\t  cp_warning (\"pointer to member cast to virtual base `%T' will only\"\n-                      \" work if you are very careful\", BINFO_TYPE (binfo));\n+\t  cp_warning (\"pointer to member cast to virtual base `%T' will only work if you are very careful\", BINFO_TYPE (binfo));\n \t}\n       delta = BINFO_OFFSET (binfo);\n       delta = cp_convert (ptrdiff_type_node, delta);\n@@ -6076,8 +6062,7 @@ get_delta_difference (from, to, force)\n     {\n       if (force)\n \t{\n-\t  cp_warning (\"pointer to member cast from virtual base `%T' will \"\n-                      \"only wokr if you are very careful\", BINFO_TYPE (binfo));\n+\t  cp_warning (\"pointer to member cast from virtual base `%T' will only wokr if you are very careful\", BINFO_TYPE (binfo));\n \t}\n       else\n \tcp_error (\"pointer to member conversion from virtual base `%T'\",\n@@ -6772,8 +6757,7 @@ check_return_expr (retval)\n      that's supposed to return a value.  */\n   if (!retval && fn_returns_value_p)\n     {\n-      pedwarn (\"return-statement with no value, in function declared with\"\n-               \" a non-void return type\");\n+      pedwarn (\"return-statement with no value, in function declared with a non-void return type\");\n       /* Clear this, so finish_function won't say that we reach the\n \t end of a non-void function (which we don't, we gave a\n \t return!).  */\n@@ -6789,8 +6773,7 @@ check_return_expr (retval)\n \t   its side-effects.  */\n \t  finish_expr_stmt (retval);\n       else\n-\tpedwarn (\"return-statement with a value, in function declared with\"\n-                 \" a void return type\");\n+\tpedwarn (\"return-statement with a value, in function declared with a void return type\");\n \n       current_function_returns_null = 1;\n "}]}