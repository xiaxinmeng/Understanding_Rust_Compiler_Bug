{"sha": "6725add54e55e1208096c2a6838c7843e56c2bda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjcyNWFkZDU0ZTU1ZTEyMDgwOTZjMmE2ODM4Yzc4NDNlNTZjMmJkYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-04-13T10:54:37Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-04-13T10:54:37Z"}, "message": "numeric_traits.h: Do not include <limits>.\n\n2007-04-13  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/ext/numeric_traits.h: Do not include <limits>.\n\t(__numeric_traits_integer::__is_signed, __digits): Add.\n\t(__numeric_traits_floating::__digits10, __max_exponent10): Add.\n\t* src/istream.cc (ignore<char>(streamsize, int_type), operator>>\n\t(basic_istream<char>&, char*), ignore<wchar_t>(streamsize,\n\tint_type)): Use the latter.\n\t* src/compatibility.cc (ignore<char>(streamsize),\n\tignore<wchar_t>(streamsize)): Likewise.\n\t* include/ext/vstring_util.h (__vstring_utility<>::_S_compare):\n\tLikewise.\n\t* include/bits/stl_memory.h (__get_temporary_buffer): Likewise.\n\t* include/bits/stl_algobase.h (lexicographical_compare(const char*,\n\tconst char*, const char*, const char*)): Likewise.\n\t* include/bits/locale_facets.tcc (num_get<>::_M_extract_int(_InIter,\n\t_InIter, ios_base&, ios_base::iostate&, _ValueT&),\n\tnum_put<>::_M_insert_int(_OutIter, ios_base&, _CharT, _ValueT),\n\tnum_put<>::_M_insert_float(_OutIter, ios_base&, _CharT, char,\n\t_ValueT), collate<>::do_hash(const _CharT*, const _CharT*)): Likewise.\n\t* include/bits/basic_string.h (basic_string<>::_S_compare): Likewise.\n\t* include/bits/istream.tcc (operator>>(short&), operator>>(int&),\n\tignore(streamsize), ignore(streamsize, int_type), operator>>\n\t(basic_istream<>&, _CharT*)): Likewise.\n\t* include/bits/stl_bvector.h (vector<bool>::max_size): Likewise.\n\t* include/tr1/functional_hash.h (struct hash<long double>): Likewise.\n\t* include/std/istream: Do not include <limits>.\n\t* include/tr1/cmath: Include <limits>.\n\t* testsuite/23_containers/vector/bool/capacity/29134.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/char/12.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/char/13.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/12.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/13.cc:\n\tLikewise.\n\t* testsuite/27_io/ios_base/storage/2.cc: Likewise.\n\n\t* include/tr1/hashtable: Do not include the whole <iterator>.\n\nFrom-SVN: r123779", "tree": {"sha": "964911b205248c21c697666def199f988fde36c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/964911b205248c21c697666def199f988fde36c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6725add54e55e1208096c2a6838c7843e56c2bda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6725add54e55e1208096c2a6838c7843e56c2bda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6725add54e55e1208096c2a6838c7843e56c2bda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6725add54e55e1208096c2a6838c7843e56c2bda/comments", "author": null, "committer": null, "parents": [{"sha": "9bb6aa43049333736b834b34d3a46816c1997e15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bb6aa43049333736b834b34d3a46816c1997e15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bb6aa43049333736b834b34d3a46816c1997e15"}], "stats": {"total": 244, "additions": 175, "deletions": 69}, "files": [{"sha": "1c78c2e17a01deaf52da3824d7869eaa5e5308ed", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6725add54e55e1208096c2a6838c7843e56c2bda", "patch": "@@ -1,3 +1,44 @@\n+2007-04-13  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/ext/numeric_traits.h: Do not include <limits>.\n+\t(__numeric_traits_integer::__is_signed, __digits): Add.\n+\t(__numeric_traits_floating::__digits10, __max_exponent10): Add.\n+\t* src/istream.cc (ignore<char>(streamsize, int_type), operator>>\n+\t(basic_istream<char>&, char*), ignore<wchar_t>(streamsize,\n+\tint_type)): Use the latter.\n+\t* src/compatibility.cc (ignore<char>(streamsize),\n+\tignore<wchar_t>(streamsize)): Likewise.\n+\t* include/ext/vstring_util.h (__vstring_utility<>::_S_compare):\n+\tLikewise.\n+\t* include/bits/stl_memory.h (__get_temporary_buffer): Likewise.\n+\t* include/bits/stl_algobase.h (lexicographical_compare(const char*,\n+\tconst char*, const char*, const char*)): Likewise.\n+\t* include/bits/locale_facets.tcc (num_get<>::_M_extract_int(_InIter,\n+\t_InIter, ios_base&, ios_base::iostate&, _ValueT&),\n+\tnum_put<>::_M_insert_int(_OutIter, ios_base&, _CharT, _ValueT),\n+\tnum_put<>::_M_insert_float(_OutIter, ios_base&, _CharT, char,\n+\t_ValueT), collate<>::do_hash(const _CharT*, const _CharT*)): Likewise.\n+\t* include/bits/basic_string.h (basic_string<>::_S_compare): Likewise.\n+\t* include/bits/istream.tcc (operator>>(short&), operator>>(int&),\n+\tignore(streamsize), ignore(streamsize, int_type), operator>>\n+\t(basic_istream<>&, _CharT*)): Likewise.\n+\t* include/bits/stl_bvector.h (vector<bool>::max_size): Likewise.\n+\t* include/tr1/functional_hash.h (struct hash<long double>): Likewise.\n+\t* include/std/istream: Do not include <limits>.\n+\t* include/tr1/cmath: Include <limits>.\n+\t* testsuite/23_containers/vector/bool/capacity/29134.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/char/12.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/char/13.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/12.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/13.cc:\n+\tLikewise.\n+\t* testsuite/27_io/ios_base/storage/2.cc: Likewise.\n+\n+\t* include/tr1/hashtable: Do not include the whole <iterator>.\n+\n 2007-04-11  Paolo Carlini  <pcarlini@suse.de>\n \n \t* config/locale/gnu/c_locale.h: Do not include <langinfo.h>"}, {"sha": "a6e3d6dffaa8a8b4e01d89a244ca576b342f456d", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=6725add54e55e1208096c2a6838c7843e56c2bda", "patch": "@@ -395,12 +395,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       {\n \tconst difference_type __d = difference_type(__n1 - __n2);\n \n-\tif (__d > numeric_limits<int>::max())\n-\t  return numeric_limits<int>::max();\n-\telse if (__d < numeric_limits<int>::min())\n-\t  return numeric_limits<int>::min();\n+\tif (__d > __gnu_cxx::__numeric_traits<int>::__max)\n+\t  return __gnu_cxx::__numeric_traits<int>::__max;\n+\telse if (__d < __gnu_cxx::__numeric_traits<int>::__min)\n+\t  return __gnu_cxx::__numeric_traits<int>::__min;\n \telse\n-\t  return int(__d);\t\n+\t  return int(__d);\n       }\n \n       void"}, {"sha": "4588b9c858aaf790ad5fc13f887728c6bff184d7", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=6725add54e55e1208096c2a6838c7843e56c2bda", "patch": "@@ -117,8 +117,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _M_extract(__l);\n       if (!this->fail())\n \t{\n-\t  if (numeric_limits<short>::min() <= __l\n-\t      && __l <= numeric_limits<short>::max())\n+\t  if (__gnu_cxx::__numeric_traits<short>::__min <= __l\n+\t      && __l <= __gnu_cxx::__numeric_traits<short>::__max)\n \t    __n = short(__l);\n \t  else\n \t    this->setstate(ios_base::failbit);\n@@ -137,8 +137,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _M_extract(__l);\n       if (!this->fail())\n \t{\n-\t  if (numeric_limits<int>::min() <= __l\n-\t      && __l <= numeric_limits<int>::max())\n+\t  if (__gnu_cxx::__numeric_traits<int>::__min <= __l\n+\t      && __l <= __gnu_cxx::__numeric_traits<int>::__max)\n \t    __n = int(__l);\n \t  else\n \t    this->setstate(ios_base::failbit);\n@@ -432,18 +432,19 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t      ++_M_gcount;\n \t\t      __c = __sb->snextc();\n \t\t    }\n-\t\t  if (__n == numeric_limits<streamsize>::max()\n+\t\t  if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max\n \t\t      && !traits_type::eq_int_type(__c, __eof))\n \t\t    {\n-\t\t      _M_gcount = numeric_limits<streamsize>::min();\n+\t\t      _M_gcount =\n+\t\t\t__gnu_cxx::__numeric_traits<streamsize>::__min;\n \t\t      __large_ignore = true;\n \t\t    }\n \t\t  else\n \t\t    break;\n \t\t}\n \n \t      if (__large_ignore)\n-\t\t_M_gcount = numeric_limits<streamsize>::max();\n+\t\t_M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;\n \n \t      if (traits_type::eq_int_type(__c, __eof))\n                 __err |= ios_base::eofbit;\n@@ -483,25 +484,27 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t      ++_M_gcount;\n \t\t      __c = __sb->snextc();\n \t\t    }\n-\t\t  if (__n == numeric_limits<streamsize>::max()\n+\t\t  if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max\n \t\t      && !traits_type::eq_int_type(__c, __eof)\n \t\t      && !traits_type::eq_int_type(__c, __delim))\n \t\t    {\n-\t\t      _M_gcount = numeric_limits<streamsize>::min();\n+\t\t      _M_gcount =\n+\t\t\t__gnu_cxx::__numeric_traits<streamsize>::__min;\n \t\t      __large_ignore = true;\n \t\t    }\n \t\t  else\n \t\t    break;\n \t\t}\n \n \t      if (__large_ignore)\n-\t\t_M_gcount = numeric_limits<streamsize>::max();\n+\t\t_M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;\n \n               if (traits_type::eq_int_type(__c, __eof))\n                 __err |= ios_base::eofbit;\n \t      else if (traits_type::eq_int_type(__c, __delim))\n \t\t{\n-\t\t  if (_M_gcount < numeric_limits<streamsize>::max())\n+\t\t  if (_M_gcount\n+\t\t      < __gnu_cxx::__numeric_traits<streamsize>::__max)\n \t\t    ++_M_gcount;\n \t\t  __sb->sbumpc();\n \t\t}\n@@ -800,7 +803,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t      // Figure out how many characters to extract.\n \t      streamsize __num = __in.width();\n \t      if (__num <= 0)\n-\t\t__num = numeric_limits<streamsize>::max();\n+\t\t__num = __gnu_cxx::__numeric_traits<streamsize>::__max;\n \n \t      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());\n "}, {"sha": "42cf1b04ff1821a7641a0bd1a1aa461cbc6a05e0", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=6725add54e55e1208096c2a6838c7843e56c2bda", "patch": "@@ -39,7 +39,7 @@\n \n #pragma GCC system_header\n \n-#include <limits>\t\t// For numeric_limits\n+#include <ext/numeric_traits.h>\n #include <typeinfo>\t\t// For bad_cast.\n #include <bits/streambuf_iterator.h>\n #include <ext/type_traits.h>\n@@ -538,7 +538,7 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n \tif (!__testeof)\n \t  {\n \t    __c = *__beg;\n-\t    if (numeric_limits<_ValueT>::is_signed)\n+\t    if (__gnu_cxx::__numeric_traits<_ValueT>::__is_signed)\n \t      __negative = __c == __lit[__num_base::_S_iminus];\n \t    if ((__negative || __c == __lit[__num_base::_S_iplus])\n \t\t&& !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)\n@@ -607,8 +607,9 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n \tif (__lc->_M_use_grouping)\n \t  __found_grouping.reserve(32);\n \tbool __testfail = false;\n-\tconst __unsigned_type __max = __negative ?\n-\t  -numeric_limits<_ValueT>::min() : numeric_limits<_ValueT>::max();\n+\tconst __unsigned_type __max = __negative\n+\t  ? -__gnu_cxx::__numeric_traits<_ValueT>::__min\n+\t  : __gnu_cxx::__numeric_traits<_ValueT>::__max;\n \tconst __unsigned_type __smax = __max / __base;\n \t__unsigned_type __result = 0;\n \tint __digit = 0;\n@@ -1029,7 +1030,7 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n \t    if (__v > 0)\n \t      {\n \t\tif (__flags & ios_base::showpos\n-\t\t    && numeric_limits<_ValueT>::is_signed)\n+\t\t    && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)\n \t\t  *--__cs = __lit[__num_base::_S_oplus], ++__len;\n \t      }\n \t    else if (__v)\n@@ -1116,7 +1117,8 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n \t// Use default precision if out of range.\n \tconst streamsize __prec = __io.precision() < 0 ? 6 : __io.precision();\n \n-\tconst int __max_digits = numeric_limits<_ValueT>::digits10;\n+\tconst int __max_digits =\n+\t  __gnu_cxx::__numeric_traits<_ValueT>::__digits10;\n \n \t// [22.2.2.2.2] Stage 1, numeric conversion to character.\n \tint __len;\n@@ -1143,7 +1145,8 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n #else\n \t// Consider the possibility of long ios_base::fixed outputs\n \tconst bool __fixed = __io.flags() & ios_base::fixed;\n-\tconst int __max_exp = numeric_limits<_ValueT>::max_exponent10;\n+\tconst int __max_exp =\n+\t  __gnu_cxx::__numeric_traits<_ValueT>::__max_exponent10;\n \n \t// The size of the output string is computed as follows.\n \t// ios_base::fixed outputs may need up to __max_exp + 1 chars\n@@ -1790,7 +1793,8 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n \t}\n #else\n       // max_exponent10 + 1 for the integer part, + 2 for sign and '\\0'.\n-      const int __cs_size = numeric_limits<long double>::max_exponent10 + 3;\n+      const int __cs_size =\n+\t__gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 3;\n       char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n       int __len = std::__convert_from_v(_S_get_c_locale(), __cs, 0, \"%.*Lf\", \n \t\t\t\t\t0, __units);\n@@ -2499,8 +2503,10 @@ _GLIBCXX_END_LDBL_NAMESPACE\n     {\n       unsigned long __val = 0;\n       for (; __lo < __hi; ++__lo)\n-\t__val = *__lo + ((__val << 7) |\n-\t\t       (__val >> (numeric_limits<unsigned long>::digits - 7)));\n+\t__val =\n+\t  *__lo + ((__val << 7)\n+\t\t   | (__val >> (__gnu_cxx::__numeric_traits<unsigned long>::\n+\t\t\t\t__digits - 7)));\n       return static_cast<long>(__val);\n     }\n "}, {"sha": "86fec003de9e63531a96126854631bb308de7900", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=6725add54e55e1208096c2a6838c7843e56c2bda", "patch": "@@ -70,7 +70,7 @@\n #include <bits/stl_pair.h>\n #include <bits/cpp_type_traits.h>\n #include <ext/type_traits.h>\n-#include <limits>\n+#include <ext/numeric_traits.h>\n #include <bits/stl_iterator_base_types.h>\n #include <bits/stl_iterator_base_funcs.h>\n #include <bits/stl_iterator.h>\n@@ -1018,7 +1018,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     __glibcxx_requires_valid_range(__first1, __last1);\n     __glibcxx_requires_valid_range(__first2, __last2);\n \n-    if (std::numeric_limits<char>::is_signed)\n+    if (__gnu_cxx::__numeric_traits<char>::__is_signed)\n       return std::lexicographical_compare((const signed char*) __first1,\n \t\t\t\t\t  (const signed char*) __last1,\n \t\t\t\t\t  (const signed char*) __first2,"}, {"sha": "ba29650831bc017cec00360210669f234e142057", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=6725add54e55e1208096c2a6838c7843e56c2bda", "patch": "@@ -583,7 +583,8 @@ template<typename _Alloc>\n     max_size() const\n     {\n       const size_type __isize =\n-\tstd::numeric_limits<difference_type>::max() - int(_S_word_bit) + 1;\n+\t__gnu_cxx::__numeric_traits<difference_type>::__max\n+\t- int(_S_word_bit) + 1;\n       const size_type __asize = _M_get_Bit_allocator().max_size();\n       return (__asize <= __isize / int(_S_word_bit)\n \t      ? __asize * int(_S_word_bit) : __isize);"}, {"sha": "7dbd32324e4a9b2821fff7b5b2ed2776f642427c", "filename": "libstdc++-v3/include/bits/stl_memory.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_memory.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_memory.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_memory.h?ref=6725add54e55e1208096c2a6838c7843e56c2bda", "patch": "@@ -41,7 +41,6 @@\n #include <bits/stl_uninitialized.h>\n #include <bits/stl_raw_storage_iter.h>\n #include <debug/debug.h>\n-#include <limits>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n@@ -57,7 +56,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     pair<_Tp*, ptrdiff_t>\n     __get_temporary_buffer(ptrdiff_t __len, _Tp*)\n     {\n-      const ptrdiff_t __max = numeric_limits<ptrdiff_t>::max() / sizeof(_Tp);\n+      const ptrdiff_t __max =\n+\t__gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);\n       if (__len > __max)\n \t__len = __max;\n       "}, {"sha": "109e37efc9ed766be78d164df537dc2d12b1d4ab", "filename": "libstdc++-v3/include/ext/numeric_traits.h", "status": "modified", "additions": 46, "deletions": 7, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric_traits.h?ref=6725add54e55e1208096c2a6838c7843e56c2bda", "patch": "@@ -37,7 +37,6 @@\n \n #pragma GCC system_header\n \n-#include <limits>\n #include <bits/cpp_type_traits.h>\n #include <ext/type_traits.h>\n \n@@ -62,6 +61,11 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       // Only integers for initialization of member constant.\n       static const _Value __min = __glibcxx_min(_Value);\n       static const _Value __max = __glibcxx_max(_Value);\n+\n+      // NB: these two also available in std::numeric_limits as compile\n+      // time constants, but <limits> is big and we avoid including it.\n+      static const bool __is_signed = __glibcxx_signed(_Value);\n+      static const int __digits = __glibcxx_digits(_Value);      \n     };\n \n   template<typename _Value>\n@@ -70,17 +74,52 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   template<typename _Value>\n     const _Value __numeric_traits_integer<_Value>::__max;\n \n+  template<typename _Value>\n+    const bool __numeric_traits_integer<_Value>::__is_signed;\n+\n+  template<typename _Value>\n+    const int __numeric_traits_integer<_Value>::__digits;\n+\n+#undef __glibcxx_signed\n+#undef __glibcxx_digits\n+#undef __glibcxx_min\n+#undef __glibcxx_max\n+\n+#define __glibcxx_floating(_Tp, _Fval, _Dval, _LDval) \\\n+  (std::__are_same<_Tp, float>::__value ? _Fval \\\n+   : std::__are_same<_Tp, double>::__value ? _Dval : _LDval)\n+\n+#define __glibcxx_max_digits10(_Tp) \\\n+  (2 + __glibcxx_floating(_Tp, __FLT_MANT_DIG__, __DBL_MANT_DIG__, \\\n+\t\t\t  __LDBL_MANT_DIG__) * 3010 / 10000)\n+\n+#define __glibcxx_digits10(_Tp) \\\n+  __glibcxx_floating(_Tp, __FLT_DIG__, __DBL_DIG__, __LDBL_DIG__)\n+\n+#define __glibcxx_max_exponent10(_Tp) \\\n+  __glibcxx_floating(_Tp, __FLT_MAX_10_EXP__, __DBL_MAX_10_EXP__, \\\n+\t\t     __LDBL_MAX_10_EXP__)\n+\n   template<typename _Value>\n     struct __numeric_traits_floating\n     {\n       // Only floating point types. See N1822. \n-      static const int __max_digits10 =\n-\t2 + std::numeric_limits<_Value>::digits * 3010/10000;\n+      static const int __max_digits10 = __glibcxx_max_digits10(_Value);\n+\n+      // See above comment...\n+      static const int __digits10 = __glibcxx_digits10(_Value);\n+      static const int __max_exponent10 = __glibcxx_max_exponent10(_Value);\n     };\n \n   template<typename _Value>\n     const int __numeric_traits_floating<_Value>::__max_digits10;\n \n+  template<typename _Value>\n+    const int __numeric_traits_floating<_Value>::__digits10;\n+\n+  template<typename _Value>\n+    const int __numeric_traits_floating<_Value>::__max_exponent10;\n+\n   template<typename _Value>\n     struct __numeric_traits\n     : public __conditional_type<std::__is_integer<_Value>::__value,\n@@ -90,9 +129,9 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n _GLIBCXX_END_NAMESPACE\n \n-#undef __glibcxx_signed\n-#undef __glibcxx_min\n-#undef __glibcxx_max\n-#undef __glibcxx_digits\n+#undef __glibcxx_floating\n+#undef __glibcxx_max_digits10\n+#undef __glibcxx_digits10\n+#undef __glibcxx_max_exponent10\n \n #endif "}, {"sha": "390ef37fb3dab76fdf34d585c12480ce35def125", "filename": "libstdc++-v3/include/ext/vstring_util.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_util.h?ref=6725add54e55e1208096c2a6838c7843e56c2bda", "patch": "@@ -165,12 +165,12 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       {\n \tconst difference_type __d = difference_type(__n1 - __n2);\n \n-\tif (__d > std::numeric_limits<int>::max())\n-\t  return std::numeric_limits<int>::max();\n-\telse if (__d < std::numeric_limits<int>::min())\n-\t  return std::numeric_limits<int>::min();\n+\tif (__d > __numeric_traits_integer<int>::__max)\n+\t  return __numeric_traits_integer<int>::__max;\n+\telse if (__d < __numeric_traits_integer<int>::__min)\n+\t  return __numeric_traits_integer<int>::__min;\n \telse\n-\t  return int(__d);\t\n+\t  return int(__d);\n       }\n     };\n "}, {"sha": "9cd2549b0a34281d7e85d404b50ba9272b6deadc", "filename": "libstdc++-v3/include/std/istream", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream?ref=6725add54e55e1208096c2a6838c7843e56c2bda", "patch": "@@ -45,7 +45,6 @@\n #include <ios>\n #include <locale>\n #include <ostream>\n-#include <limits> // For numeric_limits\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n "}, {"sha": "36845bb124f22bf1fc93df7b5d97ee9f08d21de5", "filename": "libstdc++-v3/include/tr1/cmath", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath?ref=6725add54e55e1208096c2a6838c7843e56c2bda", "patch": "@@ -36,6 +36,7 @@\n \n #include <bits/c++config.h>\n #include <bits/stl_algobase.h>\n+#include <limits>\n #include <cmath>\n #include <tr1/common.h>\n "}, {"sha": "f692308e13727a8b2c4d891f8925676d0eaed7b6", "filename": "libstdc++-v3/include/tr1/functional_hash.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_hash.h?ref=6725add54e55e1208096c2a6838c7843e56c2bda", "patch": "@@ -208,7 +208,7 @@ _GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n \t__ldval = __ldval < 0.0l ? -(__ldval + 0.5l) : __ldval;\n \n \tconst long double __mult =\n-\t  std::numeric_limits<std::size_t>::max() + 1.0l;\n+\t  __gnu_cxx::__numeric_traits<std::size_t>::__max + 1.0l;\n \t__ldval *= __mult;\n \n \t// Try to use all the bits of the mantissa (really necessary only\n@@ -217,8 +217,7 @@ _GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n \t__ldval = (__ldval - (long double)__hibits) * __mult;\n \n \tconst std::size_t __coeff =\n-\t  (std::numeric_limits<std::size_t>::max()\n-\t   / std::numeric_limits<long double>::max_exponent);\n+\t  __gnu_cxx::__numeric_traits<std::size_t>::__max / __LDBL_MAX_EXP__;\n \n \t__result = __hibits + (std::size_t)__ldval + __coeff * __exponent;\n "}, {"sha": "526ebf82e27e4b62148dbe037fe05b7a20c6511f", "filename": "libstdc++-v3/include/tr1/hashtable", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable?ref=6725add54e55e1208096c2a6838c7843e56c2bda", "patch": "@@ -53,9 +53,10 @@\n #define _TR1_HASHTABLE 1\n \n #include <utility>\t\t// For std::pair\n-#include <iterator>\n #include <cstddef>\n #include <cmath>\n+#include <bits/stl_iterator_base_types.h>\n+#include <bits/stl_iterator_base_funcs.h>\n #include <bits/allocator.h>\n #include <bits/functexcept.h>\n #include <tr1/type_traits>\t// For true_type and false_type"}, {"sha": "83b20b967063769cfdb1b37f518b36f431193c43", "filename": "libstdc++-v3/src/compatibility.cc", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility.cc?ref=6725add54e55e1208096c2a6838c7843e56c2bda", "patch": "@@ -51,6 +51,7 @@\n #include <fstream>\n #include <sstream>\n #include <cmath>\n+#include <ext/numeric_traits.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n@@ -96,18 +97,19 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t  __c = __sb->snextc();\n \t\t\t} \n \t\t    }\n-\t\t  if (__n == numeric_limits<streamsize>::max()\n+\t\t  if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max\n \t\t      && !traits_type::eq_int_type(__c, __eof))\n \t\t    {\n-\t\t      _M_gcount = numeric_limits<streamsize>::min();\n+\t\t      _M_gcount =\n+\t\t\t__gnu_cxx::__numeric_traits<streamsize>::__min;\n \t\t      __large_ignore = true;\n \t\t    }\n \t\t  else\n \t\t    break;\n \t\t}\n \n \t      if (__large_ignore)\n-\t\t_M_gcount = numeric_limits<streamsize>::max();\n+\t\t_M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;\n \n \t      if (traits_type::eq_int_type(__c, __eof))\n \t\t__err |= ios_base::eofbit;\n@@ -161,18 +163,19 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t  __c = __sb->snextc();\n \t\t\t}\n \t\t    }\n-\t\t  if (__n == numeric_limits<streamsize>::max()\n+\t\t  if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max\n \t\t      && !traits_type::eq_int_type(__c, __eof))\n \t\t    {\n-\t\t      _M_gcount = numeric_limits<streamsize>::min();\n+\t\t      _M_gcount =\n+\t\t\t__gnu_cxx::__numeric_traits<streamsize>::__min;\n \t\t      __large_ignore = true;\n \t\t    }\n \t\t  else\n \t\t    break;\n \t\t}\n \n \t      if (__large_ignore)\n-\t\t_M_gcount = numeric_limits<streamsize>::max();\n+\t\t_M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;\n \n \t      if (traits_type::eq_int_type(__c, __eof))\n \t\t__err |= ios_base::eofbit;"}, {"sha": "0f24340e031b6e3c225f231dff2cbfd194eb9caf", "filename": "libstdc++-v3/src/istream.cc", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc?ref=6725add54e55e1208096c2a6838c7843e56c2bda", "patch": "@@ -152,25 +152,27 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t  __c = __sb->snextc();\n \t\t\t}\n \t\t    }\n-\t\t  if (__n == numeric_limits<streamsize>::max()\n+\t\t  if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max\n \t\t      && !traits_type::eq_int_type(__c, __eof)\n \t\t      && !traits_type::eq_int_type(__c, __delim))\n \t\t    {\n-\t\t      _M_gcount = numeric_limits<streamsize>::min();\n+\t\t      _M_gcount =\n+\t\t\t__gnu_cxx::__numeric_traits<streamsize>::__min;\n \t\t      __large_ignore = true;\n \t\t    }\n \t\t  else\n \t\t    break;\n \t\t}\n \n \t      if (__large_ignore)\n-\t\t_M_gcount = numeric_limits<streamsize>::max();\n+\t\t_M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;\n \n \t      if (traits_type::eq_int_type(__c, __eof))\n \t\t__err |= ios_base::eofbit;\n \t      else if (traits_type::eq_int_type(__c, __delim))\n \t\t{\n-\t\t  if (_M_gcount < numeric_limits<streamsize>::max())\n+\t\t  if (_M_gcount\n+\t\t      < __gnu_cxx::__numeric_traits<streamsize>::__max)\n \t\t    ++_M_gcount;\n \t\t  __sb->sbumpc();\n \t\t}\n@@ -204,7 +206,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t      // Figure out how many characters to extract.\n \t      streamsize __num = __in.width();\n \t      if (__num <= 0)\n-\t\t__num = numeric_limits<streamsize>::max();\n+\t\t__num = __gnu_cxx::__numeric_traits<streamsize>::__max;\n \n \t      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());\n \n@@ -532,25 +534,27 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t  __c = __sb->snextc();\n \t\t\t}\n \t\t    }\n-\t\t  if (__n == numeric_limits<streamsize>::max()\n+\t\t  if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max\n \t\t      && !traits_type::eq_int_type(__c, __eof)\n \t\t      && !traits_type::eq_int_type(__c, __delim))\n \t\t    {\n-\t\t      _M_gcount = numeric_limits<streamsize>::min();\n+\t\t      _M_gcount =\n+\t\t\t__gnu_cxx::__numeric_traits<streamsize>::__min;\n \t\t      __large_ignore = true;\n \t\t    }\n \t\t  else\n \t\t    break;\n \t\t}\n \n \t      if (__large_ignore)\n-\t\t_M_gcount = numeric_limits<streamsize>::max();\n+\t\t_M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;\n \n \t      if (traits_type::eq_int_type(__c, __eof))\n \t\t__err |= ios_base::eofbit;\n \t      else if (traits_type::eq_int_type(__c, __delim))\n \t\t{\n-\t\t  if (_M_gcount < numeric_limits<streamsize>::max())\n+\t\t  if (_M_gcount\n+\t\t      < __gnu_cxx::__numeric_traits<streamsize>::__max)\n \t\t    ++_M_gcount;\n \t\t  __sb->sbumpc();\n \t\t}"}, {"sha": "7ebec611d7269e024e745f8bbe4ad7187d48a255", "filename": "libstdc++-v3/testsuite/23_containers/vector/bool/capacity/29134.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fcapacity%2F29134.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fcapacity%2F29134.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fcapacity%2F29134.cc?ref=6725add54e55e1208096c2a6838c7843e56c2bda", "patch": "@@ -19,6 +19,7 @@\n // 23.2.5 class vector<bool> [lib.vector.bool]\n \n #include <vector>\n+#include <limits>\n #include <testsuite_hooks.h>\n \n // libstdc++/29134"}, {"sha": "a727151c674bfb87eb0e796bfd404ddffc0dcc89", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/char/12.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F12.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F12.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F12.cc?ref=6725add54e55e1208096c2a6838c7843e56c2bda", "patch": "@@ -1,6 +1,7 @@\n // 1999-04-12 bkoz\n \n-// Copyright (C) 1999, 2000, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,6 +28,7 @@\n \n #include <istream>\n #include <sstream>\n+#include <limits>\n #include <testsuite_hooks.h>\n \n // libstdc++/3720"}, {"sha": "ab01a77ab477fb17e488ca1a189525e89a1e25f8", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/char/13.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F13.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F13.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F13.cc?ref=6725add54e55e1208096c2a6838c7843e56c2bda", "patch": "@@ -1,6 +1,7 @@\n // 1999-04-12 bkoz\n \n-// Copyright (C) 1999, 2000, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -23,6 +24,7 @@\n #include <istream>\n #include <sstream>\n #include <locale>\n+#include <limits>\n #include <testsuite_hooks.h>\n \n // libstdc++/3720 part two"}, {"sha": "afe929dda4c64521e781c801614cbcf0c3871a8e", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/12.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F12.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F12.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F12.cc?ref=6725add54e55e1208096c2a6838c7843e56c2bda", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,6 +25,7 @@\n \n #include <istream>\n #include <sstream>\n+#include <limits>\n #include <testsuite_hooks.h>\n \n // libstdc++/3720"}, {"sha": "57c31737f721783541c40757cdc31e0f049cd983", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/13.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F13.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F13.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F13.cc?ref=6725add54e55e1208096c2a6838c7843e56c2bda", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -21,6 +21,7 @@\n #include <istream>\n #include <sstream>\n #include <locale>\n+#include <limits>\n #include <testsuite_hooks.h>\n \n // libstdc++/3720 part two"}, {"sha": "4d25087bcfee60e4b782959c02f0fd725b3339dc", "filename": "libstdc++-v3/testsuite/27_io/ios_base/storage/2.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6725add54e55e1208096c2a6838c7843e56c2bda/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F2.cc?ref=6725add54e55e1208096c2a6838c7843e56c2bda", "patch": "@@ -1,6 +1,7 @@\n // 2000-12-19 bkoz\n \n-// Copyright (C) 2000, 2002, 2003, 2004 Free Software Foundation\n+// Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,6 +33,7 @@\n \n #include <sstream>\n #include <iostream>\n+#include <limits>\n #include <testsuite_hooks.h>\n \n // libstdc++/3129"}]}