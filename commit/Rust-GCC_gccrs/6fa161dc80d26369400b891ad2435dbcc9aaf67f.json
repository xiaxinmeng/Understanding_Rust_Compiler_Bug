{"sha": "6fa161dc80d26369400b891ad2435dbcc9aaf67f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZhMTYxZGM4MGQyNjM2OTQwMGI4OTFhZDI0MzVkYmNjOWFhZjY3Zg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-11-09T12:37:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-11-09T12:37:10Z"}, "message": "common.opt (flag_evaluation_order): Remove.\n\n2016-11-09  Richard Biener  <rguenther@suse.de>\n\n\t* common.opt (flag_evaluation_order): Remove.\n\t* expr.c (expand_operands): Remove code guarded by\n\tflag_evaluation_order.\n\t* fold-const.c (reorder_operands_p): Remove, it always returns\n\ttrue.\n\t(negate_expr_p): Remove calls to reorder_operands_p.\n\t(fold_negate_expr): Likewise.\n\t(tree_swap_operands_p): Likewise.\n\t(fold_binary_loc): Likewise.\n\nFrom-SVN: r241998", "tree": {"sha": "61922d413cef2f81a02f9c9ed118f722c2928ad8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61922d413cef2f81a02f9c9ed118f722c2928ad8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6fa161dc80d26369400b891ad2435dbcc9aaf67f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fa161dc80d26369400b891ad2435dbcc9aaf67f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fa161dc80d26369400b891ad2435dbcc9aaf67f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fa161dc80d26369400b891ad2435dbcc9aaf67f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7b649f796a316d1fd97933cd3a60321b77a2fefa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b649f796a316d1fd97933cd3a60321b77a2fefa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b649f796a316d1fd97933cd3a60321b77a2fefa"}], "stats": {"total": 65, "additions": 20, "deletions": 45}, "files": [{"sha": "cfdf5a5569f5d2146f33ba20ffe5c5025e6b2253", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fa161dc80d26369400b891ad2435dbcc9aaf67f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fa161dc80d26369400b891ad2435dbcc9aaf67f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6fa161dc80d26369400b891ad2435dbcc9aaf67f", "patch": "@@ -1,3 +1,15 @@\n+2016-11-09  Richard Biener  <rguenther@suse.de>\n+\n+\t* common.opt (flag_evaluation_order): Remove.\n+\t* expr.c (expand_operands): Remove code guarded by\n+\tflag_evaluation_order.\n+\t* fold-const.c (reorder_operands_p): Remove, it always returns\n+\ttrue.\n+\t(negate_expr_p): Remove calls to reorder_operands_p.\n+\t(fold_negate_expr): Likewise.\n+\t(tree_swap_operands_p): Likewise.\n+\t(fold_binary_loc): Likewise.\n+\n 2016-11-09  Andreas Schwab  <schwab@suse.de>\n \n \tPR target/78254"}, {"sha": "314145a09d3ddeb07682e45517323f652f5ec058", "filename": "gcc/common.opt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fa161dc80d26369400b891ad2435dbcc9aaf67f/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fa161dc80d26369400b891ad2435dbcc9aaf67f/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=6fa161dc80d26369400b891ad2435dbcc9aaf67f", "patch": "@@ -58,10 +58,6 @@ int flag_incremental_link = 0\n Variable\n int flag_complex_method = 1\n \n-; Nonzero if subexpressions must be evaluated from left-to-right.\n-Variable\n-int flag_evaluation_order = 0\n-\n ; Language specific warning pass for unused results.\n Variable\n bool flag_warn_unused_result = false"}, {"sha": "0b0946de3457051ec848fceafe412ed8a08acc5f", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fa161dc80d26369400b891ad2435dbcc9aaf67f/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fa161dc80d26369400b891ad2435dbcc9aaf67f/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=6fa161dc80d26369400b891ad2435dbcc9aaf67f", "patch": "@@ -7681,10 +7681,6 @@ expand_operands (tree exp0, tree exp1, rtx target, rtx *op0, rtx *op1,\n     }\n   else\n     {\n-      /* If we need to preserve evaluation order, copy exp0 into its own\n-\t temporary variable so that it can't be clobbered by exp1.  */\n-      if (flag_evaluation_order && TREE_SIDE_EFFECTS (exp1))\n-\texp0 = save_expr (exp0);\n       *op0 = expand_expr (exp0, target, VOIDmode, modifier);\n       *op1 = expand_expr (exp1, NULL_RTX, VOIDmode, modifier);\n     }"}, {"sha": "b78b6d855a14836ca327e1b932563d39a13020fb", "filename": "gcc/fold-const.c", "status": "modified", "additions": 8, "deletions": 37, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fa161dc80d26369400b891ad2435dbcc9aaf67f/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fa161dc80d26369400b891ad2435dbcc9aaf67f/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=6fa161dc80d26369400b891ad2435dbcc9aaf67f", "patch": "@@ -133,7 +133,6 @@ static tree fold_binary_op_with_conditional_arg (location_t,\n \t\t\t\t\t\t tree, tree,\n \t\t\t\t\t\t tree, tree, int);\n static tree fold_div_compare (location_t, enum tree_code, tree, tree, tree);\n-static bool reorder_operands_p (const_tree, const_tree);\n static tree fold_negate_const (tree, tree);\n static tree fold_not_const (const_tree, tree);\n static tree fold_relational_const (enum tree_code, tree, tree, tree);\n@@ -435,9 +434,7 @@ negate_expr_p (tree t)\n \t      && ! TYPE_OVERFLOW_WRAPS (type)))\n \treturn false;\n       /* -(A + B) -> (-B) - A.  */\n-      if (negate_expr_p (TREE_OPERAND (t, 1))\n-\t  && reorder_operands_p (TREE_OPERAND (t, 0),\n-\t\t\t\t TREE_OPERAND (t, 1)))\n+      if (negate_expr_p (TREE_OPERAND (t, 1)))\n \treturn true;\n       /* -(A + B) -> (-A) - B.  */\n       return negate_expr_p (TREE_OPERAND (t, 0));\n@@ -447,9 +444,7 @@ negate_expr_p (tree t)\n       return !HONOR_SIGN_DEPENDENT_ROUNDING (element_mode (type))\n \t     && !HONOR_SIGNED_ZEROS (element_mode (type))\n \t     && (! INTEGRAL_TYPE_P (type)\n-\t\t || TYPE_OVERFLOW_WRAPS (type))\n-\t     && reorder_operands_p (TREE_OPERAND (t, 0),\n-\t\t\t\t    TREE_OPERAND (t, 1));\n+\t\t || TYPE_OVERFLOW_WRAPS (type));\n \n     case MULT_EXPR:\n       if (TYPE_UNSIGNED (type))\n@@ -606,9 +601,7 @@ fold_negate_expr (location_t loc, tree t)\n \t  && !HONOR_SIGNED_ZEROS (element_mode (type)))\n \t{\n \t  /* -(A + B) -> (-B) - A.  */\n-\t  if (negate_expr_p (TREE_OPERAND (t, 1))\n-\t      && reorder_operands_p (TREE_OPERAND (t, 0),\n-\t\t\t\t     TREE_OPERAND (t, 1)))\n+\t  if (negate_expr_p (TREE_OPERAND (t, 1)))\n \t    {\n \t      tem = negate_expr (TREE_OPERAND (t, 1));\n \t      return fold_build2_loc (loc, MINUS_EXPR, type,\n@@ -628,8 +621,7 @@ fold_negate_expr (location_t loc, tree t)\n     case MINUS_EXPR:\n       /* - (A - B) -> B - A  */\n       if (!HONOR_SIGN_DEPENDENT_ROUNDING (element_mode (type))\n-\t  && !HONOR_SIGNED_ZEROS (element_mode (type))\n-\t  && reorder_operands_p (TREE_OPERAND (t, 0), TREE_OPERAND (t, 1)))\n+\t  && !HONOR_SIGNED_ZEROS (element_mode (type)))\n \treturn fold_build2_loc (loc, MINUS_EXPR, type,\n \t\t\t    TREE_OPERAND (t, 1), TREE_OPERAND (t, 0));\n       break;\n@@ -6761,27 +6753,12 @@ fold_single_bit_test (location_t loc, enum tree_code code,\n   return NULL_TREE;\n }\n \n-/* Check whether we are allowed to reorder operands arg0 and arg1,\n-   such that the evaluation of arg1 occurs before arg0.  */\n-\n-static bool\n-reorder_operands_p (const_tree arg0, const_tree arg1)\n-{\n-  if (! flag_evaluation_order)\n-      return true;\n-  if (TREE_CONSTANT (arg0) || TREE_CONSTANT (arg1))\n-    return true;\n-  return ! TREE_SIDE_EFFECTS (arg0)\n-\t && ! TREE_SIDE_EFFECTS (arg1);\n-}\n-\n /* Test whether it is preferable two swap two operands, ARG0 and\n    ARG1, for example because ARG0 is an integer constant and ARG1\n-   isn't.  If REORDER is true, only recommend swapping if we can\n-   evaluate the operands in reverse order.  */\n+   isn't.  */\n \n bool\n-tree_swap_operands_p (const_tree arg0, const_tree arg1, bool reorder)\n+tree_swap_operands_p (const_tree arg0, const_tree arg1, bool)\n {\n   if (CONSTANT_CLASS_P (arg1))\n     return 0;\n@@ -6796,10 +6773,6 @@ tree_swap_operands_p (const_tree arg0, const_tree arg1, bool reorder)\n   if (TREE_CONSTANT (arg0))\n     return 1;\n \n-  if (reorder && flag_evaluation_order\n-      && (TREE_SIDE_EFFECTS (arg0) || TREE_SIDE_EFFECTS (arg1)))\n-    return 0;\n-\n   /* It is preferable to swap two SSA_NAME to ensure a canonical form\n      for commutative and comparison operators.  Ensuring a canonical\n      form allows the optimizers to find additional redundancies without\n@@ -9224,8 +9197,7 @@ fold_binary_loc (location_t loc,\n \t  return build2_loc (loc, COMPOUND_EXPR, type, TREE_OPERAND (arg0, 0),\n \t\t\t     tem);\n \t}\n-      if (TREE_CODE (arg1) == COMPOUND_EXPR\n-\t  && reorder_operands_p (arg0, TREE_OPERAND (arg1, 0)))\n+      if (TREE_CODE (arg1) == COMPOUND_EXPR)\n \t{\n \t  tem = fold_build2_loc (loc, code, type, op0,\n \t\t\t     fold_convert_loc (loc, TREE_TYPE (op1),\n@@ -9714,8 +9686,7 @@ fold_binary_loc (location_t loc,\n     case MINUS_EXPR:\n       /* (-A) - B -> (-B) - A  where B is easily negated and we can swap.  */\n       if (TREE_CODE (arg0) == NEGATE_EXPR\n-\t  && negate_expr_p (op1)\n-\t  && reorder_operands_p (arg0, arg1))\n+\t  && negate_expr_p (op1))\n \treturn fold_build2_loc (loc, MINUS_EXPR, type,\n \t\t\t\tnegate_expr (op1),\n \t\t\t\tfold_convert_loc (loc, type,"}]}