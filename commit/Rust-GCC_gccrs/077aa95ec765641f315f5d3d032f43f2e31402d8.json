{"sha": "077aa95ec765641f315f5d3d032f43f2e31402d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc3YWE5NWVjNzY1NjQxZjMxNWY1ZDNkMDMyZjQzZjJlMzE0MDJkOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-07-15T12:00:12Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-07-15T12:00:12Z"}, "message": "printers.py (TemplateTypePrinter): Add type printer for class templates.\n\n\t* python/libstdcxx/v6/printers.py (TemplateTypePrinter): Add type\n\tprinter for class templates.\n\t(register_type_printers): Use TemplateTypePrinter for containers\n\tand other class templates with default template arguments.\n\t* testsuite/libstdc++-prettyprinters/whatis.cc: Test new recognizers.\n\nFrom-SVN: r212555", "tree": {"sha": "70bc347740a1e63e9c001fde1f560aba810b8399", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70bc347740a1e63e9c001fde1f560aba810b8399"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/077aa95ec765641f315f5d3d032f43f2e31402d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/077aa95ec765641f315f5d3d032f43f2e31402d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/077aa95ec765641f315f5d3d032f43f2e31402d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/077aa95ec765641f315f5d3d032f43f2e31402d8/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d661eaacb8d418edecdeede04c731d60d0d9dfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d661eaacb8d418edecdeede04c731d60d0d9dfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d661eaacb8d418edecdeede04c731d60d0d9dfc"}], "stats": {"total": 155, "additions": 155, "deletions": 0}, "files": [{"sha": "c59c25453e1467130ea7788477278e61a571dd4e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/077aa95ec765641f315f5d3d032f43f2e31402d8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/077aa95ec765641f315f5d3d032f43f2e31402d8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=077aa95ec765641f315f5d3d032f43f2e31402d8", "patch": "@@ -1,3 +1,11 @@\n+2014-07-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* python/libstdcxx/v6/printers.py (TemplateTypePrinter): Add type\n+\tprinter for class templates.\n+\t(register_type_printers): Use TemplateTypePrinter for containers\n+\tand other class templates with default template arguments.\n+\t* testsuite/libstdc++-prettyprinters/whatis.cc: Test new recognizers.\n+\n 2014-07-15  Tim Shen  <timshen@google.com>\n \n \tPR libstdc++/61720"}, {"sha": "ea34f222cdfeb4122e0d5cc0888b6af9da1be244", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/077aa95ec765641f315f5d3d032f43f2e31402d8/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/077aa95ec765641f315f5d3d032f43f2e31402d8/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=077aa95ec765641f315f5d3d032f43f2e31402d8", "patch": "@@ -922,6 +922,57 @@ def __call__(self, val):\n \n libstdcxx_printer = None\n \n+class TemplateTypePrinter(object):\n+    \"\"\"A type printer for class templates.\n+\n+    Recognizes type names that match a regular expression.\n+    Replaces them with a formatted string which can use replacement field\n+    {N} to refer to the \\N subgroup of the regex match.\n+    Type printers are recusively applied to the subgroups.\n+\n+    This allows recognizing e.g. \"std::vector<(.*), std::allocator<\\\\1> >\"\n+    and replacing it with \"std::vector<{1}>\", omitting the template argument\n+    that uses the default type.\n+    \"\"\"\n+\n+    def __init__(self, name, pattern, subst):\n+        self.name = name\n+        self.pattern = re.compile(pattern)\n+        self.subst = subst\n+        self.enabled = True\n+\n+    class _recognizer(object):\n+        def __init__(self, pattern, subst):\n+            self.pattern = pattern\n+            self.subst = subst\n+            self.type_obj = None\n+\n+        def recognize(self, type_obj):\n+            if type_obj.tag is None:\n+                return None\n+\n+            m = self.pattern.match(type_obj.tag)\n+            if m:\n+                subs = list(m.groups())\n+                for i, sub in enumerate(subs):\n+                    if ('{%d}' % (i+1)) in self.subst:\n+                        # apply recognizers to subgroup\n+                        rep = gdb.types.apply_type_recognizers(\n+                                gdb.types.get_type_recognizers(),\n+                                gdb.lookup_type(sub))\n+                        if rep:\n+                            subs[i] = rep\n+                subs = [None] + subs\n+                return self.subst.format(*subs)\n+            return None\n+\n+    def instantiate(self):\n+        return self._recognizer(self.pattern, self.subst)\n+\n+def add_one_template_type_printer(obj, name, match, subst):\n+    printer = TemplateTypePrinter(name, '^std::' + match + '$', 'std::' + subst)\n+    gdb.types.register_type_printer(obj, printer)\n+\n class FilteringTypePrinter(object):\n     def __init__(self, match, name):\n         self.match = match\n@@ -1013,6 +1064,56 @@ def register_type_printers(obj):\n     add_one_type_printer(obj, 'discard_block_engine', 'ranlux48')\n     add_one_type_printer(obj, 'shuffle_order_engine', 'knuth_b')\n \n+    # Do not show defaulted template arguments in class templates\n+    add_one_template_type_printer(obj, 'unique_ptr<T>',\n+            'unique_ptr<(.*), std::default_delete<\\\\1 ?> >',\n+            'unique_ptr<{1}>')\n+\n+    add_one_template_type_printer(obj, 'deque<T>',\n+            'deque<(.*), std::allocator<\\\\1 ?> >',\n+            'deque<{1}>')\n+    add_one_template_type_printer(obj, 'forward_list<T>',\n+            'forward_list<(.*), std::allocator<\\\\1 ?> >',\n+            'forward_list<{1}>')\n+    add_one_template_type_printer(obj, 'list<T>',\n+            'list<(.*), std::allocator<\\\\1 ?> >',\n+            'list<{1}>')\n+    add_one_template_type_printer(obj, 'vector<T>',\n+            'vector<(.*), std::allocator<\\\\1 ?> >',\n+            'vector<{1}>')\n+    add_one_template_type_printer(obj, 'map<Key, T>',\n+            'map<(.*), (.*), std::less<\\\\1 ?>, std::allocator<std::pair<\\\\1 const, \\\\2 ?> > >',\n+            'map<{1}, {2}>')\n+    add_one_template_type_printer(obj, 'multimap<Key, T>',\n+            'multimap<(.*), (.*), std::less<\\\\1 ?>, std::allocator<std::pair<\\\\1 const, \\\\2 ?> > >',\n+            'multimap<{1}, {2}>')\n+    add_one_template_type_printer(obj, 'set<T>',\n+            'set<(.*), std::less<\\\\1 ?>, std::allocator<\\\\1 ?> >',\n+            'set<{1}>')\n+    add_one_template_type_printer(obj, 'multiset<T>',\n+            'multiset<(.*), std::less<\\\\1 ?>, std::allocator<\\\\1 ?> >',\n+            'multiset<{1}>')\n+    add_one_template_type_printer(obj, 'unordered_map<Key, T>',\n+            'unordered_map<(.*), (.*), std::hash<\\\\1 ?>, std::equal_to<\\\\1 ?>, std::allocator<std::pair<\\\\1 const, \\\\2 ?> > >',\n+            'unordered_map<{1}, {2}>')\n+    add_one_template_type_printer(obj, 'unordered_multimap<Key, T>',\n+            'unordered_multimap<(.*), (.*), std::hash<\\\\1 ?>, std::equal_to<\\\\1 ?>, std::allocator<std::pair<\\\\1 const, \\\\2 ?> > >',\n+            'unordered_multimap<{1}, {2}>')\n+    add_one_template_type_printer(obj, 'unordered_set<T>',\n+            'unordered_set<(.*), std::hash<\\\\1 ?>, std::equal_to<\\\\1 ?>, std::allocator<\\\\1 ?> >',\n+            'unordered_set<{1}>')\n+    add_one_template_type_printer(obj, 'unordered_multiset<T>',\n+            'unordered_multiset<(.*), std::hash<\\\\1 ?>, std::equal_to<\\\\1 ?>, std::allocator<\\\\1 ?> >',\n+            'unordered_multiset<{1}>')\n+\n+    # strip the \"fundamentals_v1\" inline namespace from these types\n+    add_one_template_type_printer(obj, 'optional<T>',\n+            'experimental::fundamentals_v1::optional<(.*)>',\n+            'experimental::optional<\\\\1>')\n+    add_one_template_type_printer(obj, 'basic_string_view<C>',\n+            'experimental::fundamentals_v1::basic_string_view<(.*), std::char_traits<\\\\1> >',\n+            'experimental::basic_string_view<\\\\1>')\n+\n def register_libstdcxx_printers (obj):\n     \"Register libstdc++ pretty-printers with objfile Obj.\"\n "}, {"sha": "b3989720abcdc0a9e3aa93503e4c10091a4132d7", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/whatis.cc", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/077aa95ec765641f315f5d3d032f43f2e31402d8/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fwhatis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/077aa95ec765641f315f5d3d032f43f2e31402d8/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fwhatis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fwhatis.cc?ref=077aa95ec765641f315f5d3d032f43f2e31402d8", "patch": "@@ -21,6 +21,15 @@\n #include <string>\n #include <iostream>\n #include <regex>\n+#include <memory>\n+#include <deque>\n+#include <forward_list>\n+#include <list>\n+#include <vector>\n+#include <map>\n+#include <set>\n+#include <unordered_map>\n+#include <unordered_set>\n \n template<class T>\n void\n@@ -159,6 +168,31 @@ std::basic_string<signed char> *sstring_ptr;\n holder< std::basic_string<signed char> > sstring_holder;\n // { dg-final { whatis-test sstring_holder \"holder<std::basic_string<signed char, std::char_traits<signed char>, std::allocator<signed char> > >\" } }\n \n+std::vector<std::deque<std::unique_ptr<char>>> *seq1_ptr;\n+holder< std::vector<std::deque<std::unique_ptr<char>>> > seq1_holder;\n+// { dg-final { whatis-test seq1_holder \"holder<std::vector<std::deque<std::unique_ptr<char>>> >\" } }\n+\n+std::list<std::forward_list<std::unique_ptr<char>>> *seq2_ptr;\n+holder< std::list<std::forward_list<std::unique_ptr<char>>> > seq2_holder;\n+// { dg-final { whatis-test seq2_holder \"holder<std::list<std::forward_list<std::unique_ptr<char>>> >\" } }\n+\n+std::map<int, std::set<int>> *assoc1_ptr;\n+holder< std::map<int, std::set<int>> > assoc1_holder;\n+// { dg-final { whatis-test assoc1_holder \"holder<std::map<int, std::set<int>> >\" } }\n+\n+std::multimap<int, std::multiset<int>> *assoc2_ptr;\n+holder< std::multimap<int, std::multiset<int>> > assoc2_holder;\n+// { dg-final { whatis-test assoc2_holder \"holder<std::multimap<int, std::multiset<int>> >\" } }\n+\n+std::unordered_map<int, std::unordered_set<int>> *unord1_ptr;\n+holder< std::unordered_map<int, std::unordered_set<int>> > unord1_holder;\n+// { dg-final { whatis-test unord1_holder \"holder<std::unordered_map<int, std::unordered_set<int>> >\" } }\n+\n+std::unordered_multimap<int, std::unordered_multiset<int>> *unord2_ptr;\n+holder< std::unordered_multimap<int, std::unordered_multiset<int>> > unord2_holder;\n+// { dg-final { whatis-test unord2_holder \"holder<std::unordered_multimap<int, std::unordered_multiset<int>> >\" } }\n+\n+\n int\n main()\n {\n@@ -236,6 +270,18 @@ main()\n   placeholder(&ustring_holder);\n   placeholder(&sstring_ptr);\n   placeholder(&sstring_holder);\n+  placeholder(&seq1_ptr);\n+  placeholder(&seq1_holder);\n+  placeholder(&seq2_ptr);\n+  placeholder(&seq2_holder);\n+  placeholder(&assoc1_ptr);\n+  placeholder(&assoc1_holder);\n+  placeholder(&assoc2_ptr);\n+  placeholder(&assoc2_holder);\n+  placeholder(&unord1_ptr);\n+  placeholder(&unord1_holder);\n+  placeholder(&unord2_ptr);\n+  placeholder(&unord2_holder);\n \n   return 0;\n }"}]}