{"sha": "4eb46f453cc74adf0055dae35cec41f4a4c4be5b", "node_id": "C_kwDOANBUbNoAKDRlYjQ2ZjQ1M2NjNzRhZGYwMDU1ZGFlMzVjZWM0MWY0YTRjNGJlNWI", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-30T13:57:24Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-30T20:52:02Z"}, "message": "libstdc++: Remove non-standard public members in std::bitset\n\nThis makes _M_copy_from_ptr, _M_copy_from_string and _M_copy_to_string\nprivate, and declares operator<< and operator>> as friends.\n\nAlso remove the historical _M_copy_from_string and _M_copy_to_string\noverloads. Those were used before DR 396 was implemented but are\nnot needed now. There are no tests or docs describing them, so I don't\nthink we intend to support them as extensions.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/bitset (_M_copy_from_ptr, _M_copy_from_string)\n\t(_M_copy_to_string): Change access to private.\n\t(_M_copy_from_string(const basic_string&, size_t, size_t)):\n\tRemove.\n\t(_M_copy_to_string(const basic_string&)): Remove.", "tree": {"sha": "79e4ab88f3a6045195c2d2faa30dbf5747652aa2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79e4ab88f3a6045195c2d2faa30dbf5747652aa2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4eb46f453cc74adf0055dae35cec41f4a4c4be5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eb46f453cc74adf0055dae35cec41f4a4c4be5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4eb46f453cc74adf0055dae35cec41f4a4c4be5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eb46f453cc74adf0055dae35cec41f4a4c4be5b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7069d03ba4ad6133225b89d433d9e86f0b0745b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7069d03ba4ad6133225b89d433d9e86f0b0745b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7069d03ba4ad6133225b89d433d9e86f0b0745b8"}], "stats": {"total": 69, "additions": 33, "deletions": 36}, "files": [{"sha": "757da020ffe36197f337e769fef9e26edb00a4b8", "filename": "libstdc++-v3/include/std/bitset", "status": "modified", "additions": 33, "deletions": 36, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eb46f453cc74adf0055dae35cec41f4a4c4be5b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eb46f453cc74adf0055dae35cec41f4a4c4be5b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset?ref=4eb46f453cc74adf0055dae35cec41f4a4c4be5b", "patch": "@@ -1321,42 +1321,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \treturn to_string<char, std::char_traits<char>,\n \t                 std::allocator<char> >(__zero, __one);\n       }\n-\n-      // Helper functions for string operations.\n-      template<class _CharT, class _Traits>\n-\t_GLIBCXX23_CONSTEXPR\n-        void\n-        _M_copy_from_ptr(const _CharT*, size_t, size_t, size_t,\n-\t\t\t _CharT, _CharT);\n-\n-      template<class _CharT, class _Traits, class _Alloc>\n-\t_GLIBCXX23_CONSTEXPR\n-\tvoid\n-\t_M_copy_from_string(const std::basic_string<_CharT,\n-\t\t\t    _Traits, _Alloc>& __s, size_t __pos, size_t __n,\n-\t\t\t    _CharT __zero, _CharT __one)\n-\t{ _M_copy_from_ptr<_CharT, _Traits>(__s.data(), __s.size(), __pos, __n,\n-\t\t\t\t\t    __zero, __one); }\n-\n-      template<class _CharT, class _Traits, class _Alloc>\n-\t_GLIBCXX23_CONSTEXPR\n-\tvoid\n-        _M_copy_to_string(std::basic_string<_CharT, _Traits, _Alloc>&,\n-\t\t\t  _CharT, _CharT) const;\n-\n-      // NB: Backward compat.\n-      template<class _CharT, class _Traits, class _Alloc>\n-\t_GLIBCXX23_CONSTEXPR\n-\tvoid\n-\t_M_copy_from_string(const std::basic_string<_CharT,\n-\t\t\t    _Traits, _Alloc>& __s, size_t __pos, size_t __n)\n-\t{ _M_copy_from_string(__s, __pos, __n, _CharT('0'), _CharT('1')); }\n-\n-      template<class _CharT, class _Traits, class _Alloc>\n-\t_GLIBCXX23_CONSTEXPR\n-\tvoid\n-        _M_copy_to_string(std::basic_string<_CharT, _Traits,_Alloc>& __s) const\n-\t{ _M_copy_to_string(__s, _CharT('0'), _CharT('1')); }\n #endif // HOSTED\n \n       /// Returns the number of bits which are set.\n@@ -1463,6 +1427,39 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       size_t\n       _Find_next(size_t __prev) const _GLIBCXX_NOEXCEPT\n       { return this->_M_do_find_next(__prev, _Nb); }\n+\n+    private:\n+      // Helper functions for string operations.\n+      template<class _CharT, class _Traits>\n+\t_GLIBCXX23_CONSTEXPR\n+        void\n+        _M_copy_from_ptr(const _CharT*, size_t, size_t, size_t,\n+\t\t\t _CharT, _CharT);\n+\n+#if _GLIBCXX_HOSTED\n+      template<class _CharT, class _Traits, class _Alloc>\n+\t_GLIBCXX23_CONSTEXPR\n+\tvoid\n+\t_M_copy_from_string(const std::basic_string<_CharT,\n+\t\t\t    _Traits, _Alloc>& __s, size_t __pos, size_t __n,\n+\t\t\t    _CharT __zero, _CharT __one)\n+\t{ _M_copy_from_ptr<_CharT, _Traits>(__s.data(), __s.size(), __pos, __n,\n+\t\t\t\t\t    __zero, __one); }\n+\n+      template<class _CharT, class _Traits, class _Alloc>\n+\t_GLIBCXX23_CONSTEXPR\n+\tvoid\n+        _M_copy_to_string(std::basic_string<_CharT, _Traits, _Alloc>&,\n+\t\t\t  _CharT, _CharT) const;\n+\n+      template<class _CharT, class _Traits, size_t _Nb2>\n+\tfriend std::basic_istream<_CharT, _Traits>&\n+\toperator>>(std::basic_istream<_CharT, _Traits>&, bitset<_Nb2>&);\n+\n+      template <class _CharT, class _Traits, size_t _Nb2>\n+\tfriend std::basic_ostream<_CharT, _Traits>&\n+\toperator<<(std::basic_ostream<_CharT, _Traits>&, const bitset<_Nb2>&);\n+#endif\n     };\n \n #if _GLIBCXX_HOSTED"}]}