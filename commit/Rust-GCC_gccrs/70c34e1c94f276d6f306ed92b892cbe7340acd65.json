{"sha": "70c34e1c94f276d6f306ed92b892cbe7340acd65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBjMzRlMWM5NGYyNzZkNmYzMDZlZDkyYjg5MmNiZTczNDBhY2Q2NQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T13:08:34Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T13:08:34Z"}, "message": "[multiple changes]\n\n2011-08-02  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_pakd.adb (Expand_Packed_Element_Reference): Disable this routine\n\tin CodePeer mode.\n\n2011-08-02  Geert Bosch  <bosch@adacore.com>\n\n\t* cstand.adb (Back_End_Float_Types): Use Elist instead of Nlist\n\t(Find_Back_End_Float_Type): Likewise\n\t(Create_Back_End_Float_Types): Likewise\n\t(Create_Float_Types): Likewise\n\t(Register_Float_Type): Likewise\n\t* sem_ch3.adb (Floating_Point_Type_Declaration): Use Elist instead of\n\tNlist and split out type selection in new local Find_Base_Type function.\n\t* sem_prag.adb (Process_Import_Predefined_Type): Use Elist instead of\n\tNlist\n\t* stand.ads (Predefined_Float_Types): Use Elist instead of Nlist\n\n2011-08-02  Robert Dewar  <dewar@adacore.com>\n\n\t* inline.adb: Minor code reorganization (put Get_Code_Unit_Entity in\n\talpha order).\n\t* opt.ads: Minor comment change.\n\t* sem_ch12.adb: Minor code reorganization.\n\nFrom-SVN: r177144", "tree": {"sha": "d30c781b78dfe38223b3ba173088ff0d67b7c82e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d30c781b78dfe38223b3ba173088ff0d67b7c82e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70c34e1c94f276d6f306ed92b892cbe7340acd65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70c34e1c94f276d6f306ed92b892cbe7340acd65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70c34e1c94f276d6f306ed92b892cbe7340acd65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70c34e1c94f276d6f306ed92b892cbe7340acd65/comments", "author": null, "committer": null, "parents": [{"sha": "0f1af8814b751718b24eb78772bb471a8c948060", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f1af8814b751718b24eb78772bb471a8c948060", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f1af8814b751718b24eb78772bb471a8c948060"}], "stats": {"total": 194, "additions": 135, "deletions": 59}, "files": [{"sha": "7954c5584094c59c034a175291bf08af8b1d9214", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c34e1c94f276d6f306ed92b892cbe7340acd65/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c34e1c94f276d6f306ed92b892cbe7340acd65/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=70c34e1c94f276d6f306ed92b892cbe7340acd65", "patch": "@@ -1,3 +1,28 @@\n+2011-08-02  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_pakd.adb (Expand_Packed_Element_Reference): Disable this routine\n+\tin CodePeer mode.\n+\n+2011-08-02  Geert Bosch  <bosch@adacore.com>\n+\n+\t* cstand.adb (Back_End_Float_Types): Use Elist instead of Nlist\n+\t(Find_Back_End_Float_Type): Likewise\n+\t(Create_Back_End_Float_Types): Likewise\n+\t(Create_Float_Types): Likewise\n+\t(Register_Float_Type): Likewise\n+\t* sem_ch3.adb (Floating_Point_Type_Declaration): Use Elist instead of\n+\tNlist and split out type selection in new local Find_Base_Type function.\n+\t* sem_prag.adb (Process_Import_Predefined_Type): Use Elist instead of\n+\tNlist\n+\t* stand.ads (Predefined_Float_Types): Use Elist instead of Nlist\n+\n+2011-08-02  Robert Dewar  <dewar@adacore.com>\n+\n+\t* inline.adb: Minor code reorganization (put Get_Code_Unit_Entity in\n+\talpha order).\n+\t* opt.ads: Minor comment change.\n+\t* sem_ch12.adb: Minor code reorganization.\n+\n 2011-08-02  Gary Dismukes  <dismukes@adacore.com>\n \n \t* sem_ch3.adb (Complete_Private_Subtype): Don't append the private"}, {"sha": "ad79aabd360fba2651b4d3fb7566040570b57f2a", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 34, "deletions": 17, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c34e1c94f276d6f306ed92b892cbe7340acd65/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c34e1c94f276d6f306ed92b892cbe7340acd65/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=70c34e1c94f276d6f306ed92b892cbe7340acd65", "patch": "@@ -28,6 +28,7 @@ with Back_End; use Back_End;\n with Csets;    use Csets;\n with Debug;    use Debug;\n with Einfo;    use Einfo;\n+with Elists;   use Elists;\n with Layout;   use Layout;\n with Namet;    use Namet;\n with Nlists;   use Nlists;\n@@ -52,7 +53,7 @@ package body CStand is\n    Staloc : constant Source_Ptr := Standard_ASCII_Location;\n    --  Standard abbreviations used throughout this package\n \n-   Back_End_Float_Types : List_Id := No_List;\n+   Back_End_Float_Types : Elist_Id := No_Elist;\n    --  List used for any floating point supported by the back end. This needs\n    --  to be at the library level, because the call back procedures retrieving\n    --  this information are at that level.\n@@ -200,14 +201,15 @@ package body CStand is\n    ------------------------\n \n    function Find_Back_End_Float_Type (Name : String) return Entity_Id is\n-      N    : Node_Id := First (Back_End_Float_Types);\n+      N : Elmt_Id := First_Elmt (Back_End_Float_Types);\n \n    begin\n-      while Present (N) and then Get_Name_String (Chars (N)) /= Name loop\n-         Next (N);\n+      while Present (N) and then Get_Name_String (Chars (Node (N))) /= Name\n+      loop\n+         Next_Elmt (N);\n       end loop;\n \n-      return Entity_Id (N);\n+      return Node (N);\n    end Find_Back_End_Float_Type;\n \n    -------------------------------\n@@ -427,7 +429,7 @@ package body CStand is\n \n       procedure Create_Back_End_Float_Types is\n       begin\n-         Back_End_Float_Types := No_List;\n+         Back_End_Float_Types := No_Elist;\n          Register_Back_End_Types (Register_Float_Type'Access);\n       end Create_Back_End_Float_Types;\n \n@@ -447,8 +449,10 @@ package body CStand is\n          Copy_Float_Type (Standard_Long_Float,\n            Find_Back_End_Float_Type (\"double\"));\n \n-         Predefined_Float_Types := New_List\n-           (Standard_Short_Float, Standard_Float, Standard_Long_Float);\n+         Predefined_Float_Types := New_Elmt_List;\n+         Append_Elmt (Standard_Short_Float, Predefined_Float_Types);\n+         Append_Elmt (Standard_Float, Predefined_Float_Types);\n+         Append_Elmt (Standard_Long_Float, Predefined_Float_Types);\n \n          --  ??? For now, we don't have a good way to tell the widest float\n          --  type with hardware support. Basically, GCC knows the size of that\n@@ -464,21 +468,23 @@ package body CStand is\n             LF_Digs     : constant Pos :=\n                             UI_To_Int (Digits_Value (Standard_Long_Float));\n             LLF : Entity_Id := Find_Back_End_Float_Type (\"long double\");\n-            N   : Node_Id := First (Back_End_Float_Types);\n+            E   : Elmt_Id := First_Elmt (Back_End_Float_Types);\n+            N   : Node_Id;\n \n          begin\n             if Present (LLF) and then Digits_Value (LLF) > Max_HW_Digs then\n                LLF := Empty;\n             end if;\n \n-            while No (LLF) and then Present (N) loop\n+            while No (LLF) and then Present (E) loop\n+               N := Node (E);\n                if UI_To_Int (Digits_Value (N)) in LF_Digs + 1 .. Max_HW_Digs\n                  and then Machine_Radix_Value (N) = Uint_2\n                then\n                   LLF := N;\n                end if;\n \n-               Next (N);\n+               Next_Elmt (E);\n             end loop;\n \n             if No (LLF) then\n@@ -487,10 +493,22 @@ package body CStand is\n \n             Copy_Float_Type (Standard_Long_Long_Float, LLF);\n \n-            Append (Standard_Long_Long_Float, Predefined_Float_Types);\n+            Append_Elmt (Standard_Long_Long_Float, Predefined_Float_Types);\n          end;\n \n-         Append_List (Back_End_Float_Types, To => Predefined_Float_Types);\n+         --  Any other back end types are appended at the end of the list of\n+         --  predefined float types, and will only be selected if the none of\n+         --  the types in Standard is suitable, or if a specific named type is\n+         --  requested through a pragma Import.\n+\n+         while not Is_Empty_Elmt_List (Back_End_Float_Types) loop\n+            declare\n+               E : constant Elmt_Id := First_Elmt (Back_End_Float_Types);\n+            begin\n+               Append_Elmt (Node (E), To => Predefined_Float_Types);\n+               Remove_Elmt (Back_End_Float_Types, E);\n+            end;\n+         end loop;\n       end Create_Float_Types;\n \n       ----------------------\n@@ -2095,11 +2113,10 @@ package body CStand is\n             Set_Alignment (Ent, UI_From_Int (Int (Alignment / 8)));\n \n             if No (Back_End_Float_Types) then\n-               Back_End_Float_Types := New_List (Ent);\n-\n-            else\n-               Append (Ent, Back_End_Float_Types);\n+               Back_End_Float_Types := New_Elmt_List;\n             end if;\n+\n+            Append_Elmt (Ent, Back_End_Float_Types);\n          end;\n       end if;\n    end Register_Float_Type;"}, {"sha": "9367e9391926b71e9d2d32bdbdaefbe1b5ac1c95", "filename": "gcc/ada/exp_pakd.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c34e1c94f276d6f306ed92b892cbe7340acd65/gcc%2Fada%2Fexp_pakd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c34e1c94f276d6f306ed92b892cbe7340acd65/gcc%2Fada%2Fexp_pakd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_pakd.adb?ref=70c34e1c94f276d6f306ed92b892cbe7340acd65", "patch": "@@ -1932,6 +1932,13 @@ package body Exp_Pakd is\n       Arg   : Node_Id;\n \n    begin\n+      --  Disable this routine in CodePeer mode since the expansion of packed\n+      --  arrays confuses the gnat2scil back end.\n+\n+      if CodePeer_Mode then\n+         return;\n+      end if;\n+\n       --  If not bit packed, we have the enumeration case, which is easily\n       --  dealt with (just adjust the subscripts of the indexed component)\n "}, {"sha": "c4937976be26d10ca3c475673e977689bc6c6787", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c34e1c94f276d6f306ed92b892cbe7340acd65/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c34e1c94f276d6f306ed92b892cbe7340acd65/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=70c34e1c94f276d6f306ed92b892cbe7340acd65", "patch": "@@ -982,6 +982,15 @@ package body Inline is\n       end loop;\n    end Cleanup_Scopes;\n \n+   --------------------------\n+   -- Get_Code_Unit_Entity --\n+   --------------------------\n+\n+   function Get_Code_Unit_Entity (E : Entity_Id) return Entity_Id is\n+   begin\n+      return Cunit_Entity (Get_Code_Unit (E));\n+   end Get_Code_Unit_Entity;\n+\n    --------------------------\n    -- Has_Initialized_Type --\n    --------------------------\n@@ -1165,15 +1174,6 @@ package body Inline is\n       end loop;\n    end Remove_Dead_Instance;\n \n-   --------------------------\n-   -- Get_Code_Unit_Entity --\n-   --------------------------\n-\n-   function Get_Code_Unit_Entity (E : Entity_Id) return Entity_Id is\n-   begin\n-      return Cunit_Entity (Get_Code_Unit (E));\n-   end Get_Code_Unit_Entity;\n-\n    ------------------------\n    -- Scope_In_Main_Unit --\n    ------------------------"}, {"sha": "b05dda45b120e423b036a9f2ec3e3b701e510549", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c34e1c94f276d6f306ed92b892cbe7340acd65/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c34e1c94f276d6f306ed92b892cbe7340acd65/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=70c34e1c94f276d6f306ed92b892cbe7340acd65", "patch": "@@ -1080,6 +1080,8 @@ package Opt is\n    Preprocessing_Symbol_Defs : String_List_Access := new String_List (1 .. 4);\n    --  An extensible array to temporarily stores symbol definitions specified\n    --  on the command line with -gnateD switches.\n+   --  What is this magic constant 4 ???\n+   --  What is extensible about this fixed length array ???\n \n    Preprocessing_Symbol_Last : Natural := 0;\n    --  Index of last symbol definition in array Symbol_Definitions"}, {"sha": "3d0bc99d32992934dad71367f806d086d1e5bdab", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c34e1c94f276d6f306ed92b892cbe7340acd65/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c34e1c94f276d6f306ed92b892cbe7340acd65/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=70c34e1c94f276d6f306ed92b892cbe7340acd65", "patch": "@@ -2927,6 +2927,9 @@ package body Sem_Ch12 is\n       Needs_Body       : Boolean;\n       Inline_Now       : Boolean := False;\n \n+      Save_Style_Check : constant Boolean := Style_Check;\n+      --  Save style check mode for restore on exit\n+\n       procedure Delay_Descriptors (E : Entity_Id);\n       --  Delay generation of subprogram descriptors for given entity\n \n@@ -2975,8 +2978,6 @@ package body Sem_Ch12 is\n          return False;\n       end Might_Inline_Subp;\n \n-      Save_Style_Check : constant Boolean := Style_Check;\n-\n    --  Start of processing for Analyze_Package_Instantiation\n \n    begin\n@@ -3958,6 +3959,9 @@ package body Sem_Ch12 is\n       Parent_Installed : Boolean := False;\n       Renaming_List    : List_Id;\n \n+      Save_Style_Check : constant Boolean := Style_Check;\n+      --  Save style check mode for restore on exit\n+\n       procedure Analyze_Instance_And_Renamings;\n       --  The instance must be analyzed in a context that includes the mappings\n       --  of generic parameters into actuals. We create a package declaration\n@@ -4116,8 +4120,6 @@ package body Sem_Ch12 is\n          end if;\n       end Analyze_Instance_And_Renamings;\n \n-      Save_Style_Check : constant Boolean := Style_Check;\n-\n    --  Start of processing for Analyze_Subprogram_Instantiation\n \n    begin"}, {"sha": "6517f70f6aeab3e6f4f273d4e6a80550da309d65", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 45, "deletions": 25, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c34e1c94f276d6f306ed92b892cbe7340acd65/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c34e1c94f276d6f306ed92b892cbe7340acd65/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=70c34e1c94f276d6f306ed92b892cbe7340acd65", "patch": "@@ -15056,6 +15056,10 @@ package body Sem_Ch3 is\n       --  Find if given digits value, and possibly a specified range, allows\n       --  derivation from specified type\n \n+      function Find_Base_Type return Entity_Id;\n+      --  Find a predefined base type that Def can derive from, or generate\n+      --  an error and substitute Long_Long_Float if none exists.\n+\n       ---------------------\n       -- Can_Derive_From --\n       ---------------------\n@@ -15085,6 +15089,45 @@ package body Sem_Ch3 is\n          return True;\n       end Can_Derive_From;\n \n+      --------------------\n+      -- Find_Base_Type --\n+      --------------------\n+\n+      function Find_Base_Type return Entity_Id is\n+         Choice : Elmt_Id := First_Elmt (Predefined_Float_Types);\n+\n+      begin\n+         --  Iterate over the predefined types in order, returning the first\n+         --  one that Def can derive from.\n+\n+         while Present (Choice) loop\n+            if Can_Derive_From (Node (Choice)) then\n+               return Node (Choice);\n+            end if;\n+\n+            Next_Elmt (Choice);\n+         end loop;\n+\n+         --  If we can't derive from any existing type, use Long_Long_Float\n+         --  and give appropriate message explaining the problem.\n+\n+         if Digs_Val > Max_Digs_Val then\n+            --  It might be the case that there is a type with the requested\n+            --  range, just not the combination of digits and range.\n+\n+            Error_Msg_N\n+              (\"no predefined type has requested range and precision\",\n+               Real_Range_Specification (Def));\n+\n+         else\n+            Error_Msg_N\n+              (\"range too large for any predefined type\",\n+               Real_Range_Specification (Def));\n+         end if;\n+\n+         return Standard_Long_Long_Float;\n+      end Find_Base_Type;\n+\n    --  Start of processing for Floating_Point_Type_Declaration\n \n    begin\n@@ -15127,32 +15170,9 @@ package body Sem_Ch3 is\n          end;\n       end if;\n \n-      Base_Typ := First (Predefined_Float_Types);\n-\n-      while Present (Base_Typ) and then not Can_Derive_From (Base_Typ) loop\n-         Next (Base_Typ);\n-      end loop;\n-\n-      --  If we can't derive from any existing type, use Long_Long_Float\n-      --  and give appropriate message explaining the problem.\n-\n-      if No (Base_Typ) then\n-         Base_Typ := Standard_Long_Long_Float;\n-\n-         if Digs_Val > Max_Digs_Val then\n-            --  It might be the case that there is a type with the requested\n-            --  range, just not the combination of digits and range.\n-\n-            Error_Msg_N\n-              (\"no predefined type has requested range and precision\",\n-               Real_Range_Specification (Def));\n+      --  Find a suitable type to derive from or complain and use a substitute\n \n-         else\n-            Error_Msg_N\n-              (\"range too large for any predefined type\",\n-               Real_Range_Specification (Def));\n-         end if;\n-      end if;\n+      Base_Typ := Find_Base_Type;\n \n       --  If there are bounds given in the declaration use them as the bounds\n       --  of the type, otherwise use the bounds of the predefined base type"}, {"sha": "ec7c44c28c0c352fe7761e13b02475cc10d13afc", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c34e1c94f276d6f306ed92b892cbe7340acd65/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c34e1c94f276d6f306ed92b892cbe7340acd65/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=70c34e1c94f276d6f306ed92b892cbe7340acd65", "patch": "@@ -3865,18 +3865,21 @@ package body Sem_Prag is\n \n       procedure Process_Import_Predefined_Type is\n          Loc  : constant Source_Ptr := Sloc (N);\n-         Ftyp : Node_Id := First (Predefined_Float_Types);\n+         Elmt : Elmt_Id := First_Elmt (Predefined_Float_Types);\n+         Ftyp : Node_Id := Empty;\n          Decl : Node_Id;\n          Def  : Node_Id;\n          Nam  : Name_Id;\n       begin\n          String_To_Name_Buffer (Strval (Expression (Arg3)));\n          Nam := Name_Find;\n \n-         while Present (Ftyp) and then Chars (Ftyp) /= Nam loop\n-            Next (Ftyp);\n+         while Present (Elmt) and then Chars (Node (Elmt)) /= Nam loop\n+            Next_Elmt (Elmt);\n          end loop;\n \n+         Ftyp := Node (Elmt);\n+\n          if Present (Ftyp) then\n             --  Don't build a derived type declaration, because predefined C\n             --  types have no declaration anywhere, so cannot really be named."}, {"sha": "b9dac00655d7fe9cf999fa23fc0055354e68c9ca", "filename": "gcc/ada/stand.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c34e1c94f276d6f306ed92b892cbe7340acd65/gcc%2Fada%2Fstand.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c34e1c94f276d6f306ed92b892cbe7340acd65/gcc%2Fada%2Fstand.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstand.ads?ref=70c34e1c94f276d6f306ed92b892cbe7340acd65", "patch": "@@ -343,7 +343,7 @@ package Stand is\n    --  A zero-size subtype of Integer, used as the type of variables used\n    --  to provide the debugger with name encodings for renaming declarations.\n \n-   Predefined_Float_Types : List_Id;\n+   Predefined_Float_Types : Elist_Id;\n    --  Entities for predefined floating point types. These are used by\n    --  the semantic phase to select appropriate types for floating point\n    --  declarations. This list is ordered by preference. All types up to"}]}