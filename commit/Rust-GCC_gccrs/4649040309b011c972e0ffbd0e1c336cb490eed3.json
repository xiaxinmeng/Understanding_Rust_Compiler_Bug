{"sha": "4649040309b011c972e0ffbd0e1c336cb490eed3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY0OTA0MDMwOWIwMTFjOTcyZTBmZmJkMGUxYzMzNmNiNDkwZWVkMw==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@ds2.pg.gda.pl", "date": "2004-02-28T19:59:24Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-02-28T19:59:24Z"}, "message": "mips-protos.h (mips_idiv_insns): Declare.\n\n\t* config/mips/mips-protos.h (mips_idiv_insns): Declare.\n\t* config/mips/mips.h (MASK_FIX_SB1): Bump.\n\t(MASK_FIX_R4000, TARGET_FIX_R4000): New macros.\n\t(TARGET_SWITCHES): Add -mfix-r4000 and -mno-fix-r4000.\n\t* config/mips/mips.c (mips_idiv_insns): New function.\n\t(override_options): Make -march=r4000 imply -mfix-r4000 by default.\n\t(mips_output_division): Add a workaround for the R4000 divide/shift\n\terrata.\n\t* config/mips/mips.md (length): Use mips_idiv_insns() to calculate\n\tthe length of an \"idiv\" instruction.\n\t* doc/invoke.texi: Document the new switches.\n\nFrom-SVN: r78621", "tree": {"sha": "bba029a557fbe4c077010ada63b42fb438bc3e85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bba029a557fbe4c077010ada63b42fb438bc3e85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4649040309b011c972e0ffbd0e1c336cb490eed3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4649040309b011c972e0ffbd0e1c336cb490eed3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4649040309b011c972e0ffbd0e1c336cb490eed3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4649040309b011c972e0ffbd0e1c336cb490eed3/comments", "author": null, "committer": null, "parents": [{"sha": "1b2c37673afe4cb63dfc0c949ec2ca82b3185761", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b2c37673afe4cb63dfc0c949ec2ca82b3185761", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b2c37673afe4cb63dfc0c949ec2ca82b3185761"}], "stats": {"total": 101, "additions": 88, "deletions": 13}, "files": [{"sha": "417c01270107e40cab3dabdc9c505ddb69c18786", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4649040309b011c972e0ffbd0e1c336cb490eed3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4649040309b011c972e0ffbd0e1c336cb490eed3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4649040309b011c972e0ffbd0e1c336cb490eed3", "patch": "@@ -1,3 +1,17 @@\n+2004-02-28  Maciej W. Rozycki  <macro@ds2.pg.gda.pl>\n+\n+\t* config/mips/mips-protos.h (mips_idiv_insns): Declare.\n+\t* config/mips/mips.h (MASK_FIX_SB1): Bump.\n+\t(MASK_FIX_R4000, TARGET_FIX_R4000): New macros.\n+\t(TARGET_SWITCHES): Add -mfix-r4000 and -mno-fix-r4000.\n+\t* config/mips/mips.c (mips_idiv_insns): New function.\n+\t(override_options): Make -march=r4000 imply -mfix-r4000 by default.\n+\t(mips_output_division): Add a workaround for the R4000 divide/shift\n+\terrata.\n+\t* config/mips/mips.md (length): Use mips_idiv_insns() to calculate\n+\tthe length of an \"idiv\" instruction.\n+\t* doc/invoke.texi: Document the new switches.\n+\n 2004-02-28  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* doc/tm.texi (IS_COSTLY_DEPENDENCE): Change to"}, {"sha": "b5128ba583063173f251c1a2f671d297e06f3985", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4649040309b011c972e0ffbd0e1c336cb490eed3/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4649040309b011c972e0ffbd0e1c336cb490eed3/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=4649040309b011c972e0ffbd0e1c336cb490eed3", "patch": "@@ -30,6 +30,7 @@ extern int mips_regno_mode_ok_for_base_p (int, enum machine_mode, int);\n extern int mips_address_insns (rtx, enum machine_mode);\n extern int mips_const_insns (rtx);\n extern int mips_fetch_insns (rtx);\n+extern int mips_idiv_insns (void);\n extern bool mips_legitimate_address_p (enum machine_mode, rtx, int);\n extern bool mips_legitimize_address (rtx *, enum machine_mode);\n extern rtx mips_gotoff_page (rtx);"}, {"sha": "84494c2eb557dbd97a60457a959dc93d5f99d127", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 48, "deletions": 5, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4649040309b011c972e0ffbd0e1c336cb490eed3/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4649040309b011c972e0ffbd0e1c336cb490eed3/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=4649040309b011c972e0ffbd0e1c336cb490eed3", "patch": "@@ -1350,6 +1350,27 @@ mips_fetch_insns (rtx x)\n }\n \n \n+/* Return the number of instructions needed for an integer division.  */\n+\n+int\n+mips_idiv_insns (void)\n+{\n+  int count;\n+\n+  count = 1;\n+  if (TARGET_CHECK_ZERO_DIV)\n+    {\n+      if (TARGET_MIPS16)\n+\tcount += 2;\n+      else\n+\tcount += 3;\n+    }\n+  if (TARGET_FIX_R4000)\n+    count++;\n+  return count;\n+}\n+\n+\n /* Return truth value of whether OP can be used as an operands\n    where a register or 16 bit unsigned integer is needed.  */\n \n@@ -5111,6 +5132,12 @@ override_options (void)\n       mips_hi_relocs[SYMBOL_GOTOFF_LOADGP] = \"%hi(%neg(%gp_rel(\";\n       mips_lo_relocs[SYMBOL_GOTOFF_LOADGP] = \"%lo(%neg(%gp_rel(\";\n     }\n+\n+  /* Default to working around R4000 errata only if the processor\n+     was selected explicitly.  */\n+  if ((target_flags_explicit & MASK_FIX_R4000) == 0\n+      && mips_matching_cpu_name_p (mips_arch_info->name, \"r4000\"))\n+    target_flags |= MASK_FIX_R4000;\n }\n \n /* Implement CONDITIONAL_REGISTER_USAGE.  */\n@@ -9185,21 +9212,37 @@ mips_output_conditional_branch (rtx insn, rtx *operands, int two_operands_p,\n /* Used to output div or ddiv instruction DIVISION, which has the\n    operands given by OPERANDS.  If we need a divide-by-zero check,\n    output the instruction and return an asm string that traps if\n-   operand 2 is zero.  Otherwise just return DIVISION itself.  */\n+   operand 2 is zero.\n+\n+   The original R4000 has a cpu bug.  If a double-word or a variable\n+   shift executes immediately after starting an integer division, the\n+   shift may give an incorrect result.  Avoid this by adding a nop on\n+   the R4000.  See quotations of errata #16 and #28 from \"MIPS\n+   R4000PC/SC Errata, Processor Revision 2.2 and 3.0\" in mips.md for\n+   details.\n+\n+   Otherwise just return DIVISION itself.  */\n \n const char *\n mips_output_division (const char *division, rtx *operands)\n {\n+  const char *s = division;\n+\n   if (TARGET_CHECK_ZERO_DIV)\n     {\n-      output_asm_insn (division, operands);\n+      output_asm_insn (s, operands);\n \n       if (TARGET_MIPS16)\n-\treturn \"bnez\\t%2,1f\\n\\tbreak\\t7\\n1:\";\n+\ts = \"bnez\\t%2,1f\\n\\tbreak\\t7\\n1:\";\n       else\n-\treturn \"bne\\t%2,%.,1f%#\\n\\tbreak\\t7\\n1:\";\n+\ts = \"bne\\t%2,%.,1f%#\\n\\tbreak\\t7\\n1:\";\n+    }\n+  if (TARGET_FIX_R4000)\n+    {\n+      output_asm_insn (s, operands);\n+      s = \"nop\";\n     }\n-  return division;\n+  return s;\n }\n \f\n /* Return true if GIVEN is the same as CANONICAL, or if it is CANONICAL"}, {"sha": "9c9ab0e8a1b02bc39685248d83901ee234c7bed2", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4649040309b011c972e0ffbd0e1c336cb490eed3/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4649040309b011c972e0ffbd0e1c336cb490eed3/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=4649040309b011c972e0ffbd0e1c336cb490eed3", "patch": "@@ -169,7 +169,8 @@ extern const struct mips_cpu_info *mips_tune_info;\n #define MASK_UNINIT_CONST_IN_RODATA \\\n \t\t\t   0x00800000\t/* Store uninitialized\n \t\t\t\t\t   consts in rodata */\n-#define MASK_FIX_SB1       0x01000000   /* Work around SB-1 errata.  */\n+#define MASK_FIX_R4000\t   0x01000000\t/* Work around R4000 errata.  */\n+#define MASK_FIX_SB1       0x02000000   /* Work around SB-1 errata.  */\n \n \t\t\t\t\t/* Debug switches, not documented */\n #define MASK_DEBUG\t0\t\t/* unused */\n@@ -248,6 +249,9 @@ extern const struct mips_cpu_info *mips_tune_info;\n \n #define TARGET_FIX_SB1\t\t(target_flags & MASK_FIX_SB1)\n \n+\t\t\t\t\t/* Work around R4000 errata.  */\n+#define TARGET_FIX_R4000\t(target_flags & MASK_FIX_R4000)\n+\n /* True if we should use NewABI-style relocation operators for\n    symbolic addresses.  This is never true for mips16 code,\n    which has its own conventions.  */\n@@ -588,6 +592,10 @@ extern const struct mips_cpu_info *mips_tune_info;\n      N_(\"Work around errata for early SB-1 revision 2 cores\")},\t\t\\\n   {\"no-fix-sb1\",         -MASK_FIX_SB1,\t\t\t\t\t\\\n      N_(\"Don't work around errata for early SB-1 revision 2 cores\")},\t\\\n+  {\"fix-r4000\",\t\t  MASK_FIX_R4000,\t\t\t\t\\\n+     N_(\"Work around R4000 errata\")},\t\t\t\t\t\\\n+  {\"no-fix-r4000\",\t -MASK_FIX_R4000,\t\t\t\t\\\n+     N_(\"Don't work around R4000 errata\")},\t\t\t\t\\\n   {\"check-zero-division\",-MASK_NO_CHECK_ZERO_DIV,\t\t\t\\\n      N_(\"Trap on integer divide by zero\")},\t\t\t\t\\\n   {\"no-check-zero-division\", MASK_NO_CHECK_ZERO_DIV,\t\t\t\\"}, {"sha": "5b6af02c2decbbb270937e8f91fa5fd4b7e9e0ec", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4649040309b011c972e0ffbd0e1c336cb490eed3/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4649040309b011c972e0ffbd0e1c336cb490eed3/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=4649040309b011c972e0ffbd0e1c336cb490eed3", "patch": "@@ -204,11 +204,8 @@\n \t       (ne (symbol_ref \"TARGET_MIPS16\") (const_int 0)))\n \t  (const_int 8)\n \n-\t  (and (eq_attr \"type\" \"idiv\")\n-\t       (ne (symbol_ref \"TARGET_CHECK_ZERO_DIV\") (const_int 0)))\n-\t  (cond [(ne (symbol_ref \"TARGET_MIPS16\") (const_int 0))\n-\t\t (const_int 12)]\n-\t\t(const_int 16))\n+\t  (eq_attr \"type\" \"idiv\")\n+\t  (symbol_ref \"mips_idiv_insns () * 4\")\n \t  ] (const_int 4)))\n \n ;; Attribute describing the processor.  This attribute must match exactly"}, {"sha": "3544332975882310abab1e8c1a064c3b57263ef6", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4649040309b011c972e0ffbd0e1c336cb490eed3/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4649040309b011c972e0ffbd0e1c336cb490eed3/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=4649040309b011c972e0ffbd0e1c336cb490eed3", "patch": "@@ -478,8 +478,9 @@ in the following sections.\n -mcheck-zero-division  -mno-check-zero-division @gol\n -mmemcpy  -mno-memcpy  -mlong-calls  -mno-long-calls @gol\n -mmad  -mno-mad  -mfused-madd  -mno-fused-madd  -nocpp @gol\n--mfix-sb1  -mno-fix-sb1  -mflush-func=@var{func} @gol\n--mno-flush-func  -mbranch-likely  -mno-branch-likely}\n+-mfix-r4000  -mno-fix-r4000  -mfix-sb1  -mno-fix-sb1 @gol\n+-mflush-func=@var{func}  -mno-flush-func @gol\n+-mbranch-likely  -mno-branch-likely}\n \n @emph{i386 and x86-64 Options}\n @gccoptlist{-mtune=@var{cpu-type}  -march=@var{cpu-type} @gol\n@@ -8045,6 +8046,17 @@ circumstances.\n Tell the MIPS assembler to not run its preprocessor over user\n assembler files (with a @samp{.s} suffix) when assembling them.\n \n+@item -mfix-r4000\n+@itemx -mno-fix-r4000\n+@opindex mfix-r4000\n+@opindex mno-fix-r4000\n+Work around certain R4000 CPU errata:\n+@itemize @minus\n+@item\n+A double-word or a variable shift may give an incorrect result if executed\n+immediately after starting an integer division.\n+@end itemize\n+\n @item -mfix-sb1\n @itemx -mno-fix-sb1\n @opindex mfix-sb1"}]}