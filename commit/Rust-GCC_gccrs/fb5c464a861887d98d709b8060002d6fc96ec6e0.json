{"sha": "fb5c464a861887d98d709b8060002d6fc96ec6e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI1YzQ2NGE4NjE4ODdkOThkNzA5YjgwNjAwMDJkNmZjOTZlYzZlMA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-06-25T17:17:20Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-06-25T17:17:20Z"}, "message": "hash-map-traits.h (simple_hashmap_traits::key_type): New typedef.\n\ngcc/\n\t* hash-map-traits.h (simple_hashmap_traits::key_type): New typedef.\n\t(unbounded_int_hashmap_traits::key_type): Likewise.\n\t* hash-map.h (hash_map): Get the key type from the traits.\n\t* hash-traits.h (default_hash_traits): By default, inherit from the\n\ttemplate parameter.\n\t* alias.c (alias_set_traits): Delete.\n\t(alias_set_entry_d::children): Use alias_set_hash as the first\n\ttemplate parameter.\n\t(record_alias_subset): Update accordingly.\n\t* except.c (tree_hash_traits): Delete.\n\t(type_to_runtime_map): Use tree_hash as the first template parameter.\n\t(init_eh): Update accordingly.\n\t* genmatch.c (capture_id_map_hasher): Delete.\n\t(cid_map_t): Use nofree_string_hash as first template parameter.\n\t* ipa-icf.h (symbol_compare_hashmap_traits): Delete.\n\t* ipa-icf.c (sem_item_optimizer::subdivide_classes_by_sensitive_refs):\n\tUse symbol_compare_hash as the first template parameter in\n\tsubdivide_hash_map.\n\t* mem-stats.h (mem_usage_pair::mem_alloc_hashmap_traits): Delete.\n\t(mem_usage_pair::mem_map_t): Use mem_location_hash as the first\n\ttemplate parameter.\n\t* passes.c (pass_registry_hasher): Delete.\n\t(name_to_pass_map): Use nofree_string_hash as the first template\n\tparameter.\n\t(register_pass_name): Update accordingly.\n\t* sanopt.c (sanopt_tree_map_traits): Delete.\n\t(sanopt_tree_triplet_map_traits): Delete.\n\t(sanopt_ctx::asan_check_map): Use tree_operand_hash as the first\n\ttemplate parameter.\n\t(sanopt_ctx::vptr_check_map): Use sanopt_tree_triplet_hash as\n\tthe first template parameter.\n\t* sese.c (rename_map_hasher): Delete.\n\t(rename_map_type): Use tree_ssa_name_hash as the first template\n\tparameter.\n\t* symbol-summary.h (function_summary::summary_hashmap_traits): Delete.\n\t(function_summary::m_map): Use map_hash as the first template\n\tparameter.\n\t(function_summary::release): Update accordingly.\n\t* tree-if-conv.c (phi_args_hash_traits): Delete.\n\t(predicate_scalar_phi): Use tree_operand_hash as the first template\n\tparameter to phi_arg_map.\n\t* tree-inline.h (dependence_hasher): Delete.\n\t(copy_body_data::dependence_map): Use dependence_hash as the first\n\ttemplate parameter.\n\t* tree-inline.c (remap_dependence_clique): Update accordingly.\n\t* tree-ssa-strlen.c (stridxlist_hash_traits): Delete.\n\t(decl_to_stridxlist_htab): Use tree_decl_hash as the first template\n\tparameter.\n\t(addr_stridxptr): Update accordingly.\n\t* value-prof.c (profile_id_traits): Delete.\n\t(cgraph_node_map): Use profile_id_hash as the first template\n\tparameter.\n\t(init_node_map): Update accordingly.\n\t* config/alpha/alpha.c (string_traits): Delete.\n\t(machine_function::links): Use nofree_string_hash as the first\n\ttemplate parameter.\n\t(alpha_use_linkage, alpha_write_linkage): Update accordingly.\n\t* config/m32c/m32c.c (pragma_traits): Delete.\n\t(pragma_htab): Use nofree_string_hash as the first template parameter.\n\t(m32c_note_pragma_address): Update accordingly.\n\t* config/mep/mep.c (pragma_traits): Delete.\n\t(pragma_htab): Use nofree_string_hash as the first template parameter.\n\t(mep_note_pragma_flag): Update accordingly.\n\t* config/mips/mips.c (mips16_flip_traits): Delete.\n\t(mflip_mips16_htab): Use nofree_string_hash as the first template\n\tparameter.\n\t(mflip_mips16_use_mips16_p): Update accordingly.\n\t(local_alias_traits): Delete.\n\t(mips16_local_aliases): Use nofree_string_hash as the first template\n\tparameter.\n\t(mips16_local_alias): Update accordingly.\n\nFrom-SVN: r224977", "tree": {"sha": "2f1d8237329bc5a543744d9021a1988e8f72fb2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f1d8237329bc5a543744d9021a1988e8f72fb2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb5c464a861887d98d709b8060002d6fc96ec6e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb5c464a861887d98d709b8060002d6fc96ec6e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb5c464a861887d98d709b8060002d6fc96ec6e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb5c464a861887d98d709b8060002d6fc96ec6e0/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "203f2c4386837b6672f67fe74cfc940aaec300ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/203f2c4386837b6672f67fe74cfc940aaec300ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/203f2c4386837b6672f67fe74cfc940aaec300ac"}], "stats": {"total": 204, "additions": 116, "deletions": 88}, "files": [{"sha": "e0134e1027967363143dbd5b1cf0985edf3e4ca9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb5c464a861887d98d709b8060002d6fc96ec6e0", "patch": "@@ -1,3 +1,77 @@\n+2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* hash-map-traits.h (simple_hashmap_traits::key_type): New typedef.\n+\t(unbounded_int_hashmap_traits::key_type): Likewise.\n+\t* hash-map.h (hash_map): Get the key type from the traits.\n+\t* hash-traits.h (default_hash_traits): By default, inherit from the\n+\ttemplate parameter.\n+\t* alias.c (alias_set_traits): Delete.\n+\t(alias_set_entry_d::children): Use alias_set_hash as the first\n+\ttemplate parameter.\n+\t(record_alias_subset): Update accordingly.\n+\t* except.c (tree_hash_traits): Delete.\n+\t(type_to_runtime_map): Use tree_hash as the first template parameter.\n+\t(init_eh): Update accordingly.\n+\t* genmatch.c (capture_id_map_hasher): Delete.\n+\t(cid_map_t): Use nofree_string_hash as first template parameter.\n+\t* ipa-icf.h (symbol_compare_hashmap_traits): Delete.\n+\t* ipa-icf.c (sem_item_optimizer::subdivide_classes_by_sensitive_refs):\n+\tUse symbol_compare_hash as the first template parameter in\n+\tsubdivide_hash_map.\n+\t* mem-stats.h (mem_usage_pair::mem_alloc_hashmap_traits): Delete.\n+\t(mem_usage_pair::mem_map_t): Use mem_location_hash as the first\n+\ttemplate parameter.\n+\t* passes.c (pass_registry_hasher): Delete.\n+\t(name_to_pass_map): Use nofree_string_hash as the first template\n+\tparameter.\n+\t(register_pass_name): Update accordingly.\n+\t* sanopt.c (sanopt_tree_map_traits): Delete.\n+\t(sanopt_tree_triplet_map_traits): Delete.\n+\t(sanopt_ctx::asan_check_map): Use tree_operand_hash as the first\n+\ttemplate parameter.\n+\t(sanopt_ctx::vptr_check_map): Use sanopt_tree_triplet_hash as\n+\tthe first template parameter.\n+\t* sese.c (rename_map_hasher): Delete.\n+\t(rename_map_type): Use tree_ssa_name_hash as the first template\n+\tparameter.\n+\t* symbol-summary.h (function_summary::summary_hashmap_traits): Delete.\n+\t(function_summary::m_map): Use map_hash as the first template\n+\tparameter.\n+\t(function_summary::release): Update accordingly.\n+\t* tree-if-conv.c (phi_args_hash_traits): Delete.\n+\t(predicate_scalar_phi): Use tree_operand_hash as the first template\n+\tparameter to phi_arg_map.\n+\t* tree-inline.h (dependence_hasher): Delete.\n+\t(copy_body_data::dependence_map): Use dependence_hash as the first\n+\ttemplate parameter.\n+\t* tree-inline.c (remap_dependence_clique): Update accordingly.\n+\t* tree-ssa-strlen.c (stridxlist_hash_traits): Delete.\n+\t(decl_to_stridxlist_htab): Use tree_decl_hash as the first template\n+\tparameter.\n+\t(addr_stridxptr): Update accordingly.\n+\t* value-prof.c (profile_id_traits): Delete.\n+\t(cgraph_node_map): Use profile_id_hash as the first template\n+\tparameter.\n+\t(init_node_map): Update accordingly.\n+\t* config/alpha/alpha.c (string_traits): Delete.\n+\t(machine_function::links): Use nofree_string_hash as the first\n+\ttemplate parameter.\n+\t(alpha_use_linkage, alpha_write_linkage): Update accordingly.\n+\t* config/m32c/m32c.c (pragma_traits): Delete.\n+\t(pragma_htab): Use nofree_string_hash as the first template parameter.\n+\t(m32c_note_pragma_address): Update accordingly.\n+\t* config/mep/mep.c (pragma_traits): Delete.\n+\t(pragma_htab): Use nofree_string_hash as the first template parameter.\n+\t(mep_note_pragma_flag): Update accordingly.\n+\t* config/mips/mips.c (mips16_flip_traits): Delete.\n+\t(mflip_mips16_htab): Use nofree_string_hash as the first template\n+\tparameter.\n+\t(mflip_mips16_use_mips16_p): Update accordingly.\n+\t(local_alias_traits): Delete.\n+\t(mips16_local_aliases): Use nofree_string_hash as the first template\n+\tparameter.\n+\t(mips16_local_alias): Update accordingly.\n+\n 2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* hash-map-traits.h (default_hashmap_traits): Delete."}, {"sha": "ca2082e7e65f6ff3b78423349c98fe5dc7545e17", "filename": "gcc/alias.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=fb5c464a861887d98d709b8060002d6fc96ec6e0", "patch": "@@ -142,7 +142,6 @@ along with GCC; see the file COPYING3.  If not see\n    error to attempt to explicitly construct a subset of zero.  */\n \n struct alias_set_hash : int_hash <int, INT_MIN, INT_MIN + 1> {};\n-struct alias_set_traits : simple_hashmap_traits <alias_set_hash> {};\n \n struct GTY(()) alias_set_entry_d {\n   /* The alias set number, as stored in MEM_ALIAS_SET.  */\n@@ -155,7 +154,7 @@ struct GTY(()) alias_set_entry_d {\n \n      continuing our example above, the children here will be all of\n      `int', `double', `float', and `struct S'.  */\n-  hash_map<int, int, alias_set_traits> *children;\n+  hash_map<alias_set_hash, int> *children;\n \n   /* Nonzero if would have a child of zero: this effectively makes this\n      alias set the same as alias set zero.  */\n@@ -1134,7 +1133,7 @@ record_alias_subset (alias_set_type superset, alias_set_type subset)\n       subset_entry = get_alias_set_entry (subset);\n       if (!superset_entry->children)\n \tsuperset_entry->children\n-\t  = hash_map<int, int, alias_set_traits>::create_ggc (64);\n+\t  = hash_map<alias_set_hash, int>::create_ggc (64);\n       /* If there is an entry for the subset, enter all of its children\n \t (if they are not already present) as children of the SUPERSET.  */\n       if (subset_entry)\n@@ -1146,7 +1145,7 @@ record_alias_subset (alias_set_type superset, alias_set_type subset)\n \n \t  if (subset_entry->children)\n \t    {\n-\t      hash_map<int, int, alias_set_traits>::iterator iter\n+\t      hash_map<alias_set_hash, int>::iterator iter\n \t\t= subset_entry->children->begin ();\n \t      for (; iter != subset_entry->children->end (); ++iter)\n \t\tsuperset_entry->children->put ((*iter).first, (*iter).second);"}, {"sha": "29dfc681e34a969e71bdb1010d37062a513b7453", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=fb5c464a861887d98d709b8060002d6fc96ec6e0", "patch": "@@ -4806,8 +4806,6 @@ alpha_multipass_dfa_lookahead (void)\n \n struct GTY(()) alpha_links;\n \n-typedef simple_hashmap_traits <nofree_string_hash> string_traits;\n-\n struct GTY(()) machine_function\n {\n   /* For flag_reorder_blocks_and_partition.  */\n@@ -4817,7 +4815,7 @@ struct GTY(()) machine_function\n   bool uses_condition_handler;\n \n   /* Linkage entries.  */\n-  hash_map<const char *, alpha_links *, string_traits> *links;\n+  hash_map<nofree_string_hash, alpha_links *> *links;\n };\n \n /* How to allocate a 'struct machine_function'.  */\n@@ -9544,7 +9542,7 @@ alpha_use_linkage (rtx func, bool lflag, bool rflag)\n     }\n   else\n     cfun->machine->links\n-      = hash_map<const char *, alpha_links *, string_traits>::create_ggc (64);\n+      = hash_map<nofree_string_hash, alpha_links *>::create_ggc (64);\n \n   if (al == NULL)\n     {\n@@ -9635,7 +9633,7 @@ alpha_write_linkage (FILE *stream, const char *funname)\n \n   if (cfun->machine->links)\n     {\n-      hash_map<const char *, alpha_links *, string_traits>::iterator iter\n+      hash_map<nofree_string_hash, alpha_links *>::iterator iter\n \t= cfun->machine->links->begin ();\n       for (; iter != cfun->machine->links->end (); ++iter)\n \talpha_write_one_linkage ((*iter).first, (*iter).second, stream);"}, {"sha": "7396be5c9fafc9f5bf2cbe3d6f88feda3645fd7e", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=fb5c464a861887d98d709b8060002d6fc96ec6e0", "patch": "@@ -3053,17 +3053,14 @@ m32c_insert_attributes (tree node ATTRIBUTE_UNUSED,\n     }\t\n }\n \n-typedef simple_hashmap_traits<nofree_string_hash> pragma_traits;\n-\n /* Hash table of pragma info.  */\n-static GTY(()) hash_map<const char *, unsigned, pragma_traits> *pragma_htab;\n+static GTY(()) hash_map<nofree_string_hash, unsigned> *pragma_htab;\n \n void\n m32c_note_pragma_address (const char *varname, unsigned address)\n {\n   if (!pragma_htab)\n-    pragma_htab\n-      = hash_map<const char *, unsigned, pragma_traits>::create_ggc (31);\n+    pragma_htab = hash_map<nofree_string_hash, unsigned>::create_ggc (31);\n \n   const char *name = ggc_strdup (varname);\n   unsigned int *slot = &pragma_htab->get_or_insert (name);"}, {"sha": "bd372d872fc086aa78b6e05641146968f402ff0d", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=fb5c464a861887d98d709b8060002d6fc96ec6e0", "patch": "@@ -4071,18 +4071,14 @@ struct GTY(()) pragma_entry {\n   int flag;\n };\n \n-typedef simple_hashmap_traits<nofree_string_hash> pragma_traits;\n-\n /* Hash table of farcall-tagged sections.  */\n-static GTY(()) hash_map<const char *, pragma_entry, pragma_traits> *\n-  pragma_htab;\n+static GTY(()) hash_map<nofree_string_hash, pragma_entry> *pragma_htab;\n \n static void\n mep_note_pragma_flag (const char *funcname, int flag)\n {\n   if (!pragma_htab)\n-    pragma_htab\n-      = hash_map<const char *, pragma_entry, pragma_traits>::create_ggc (31);\n+    pragma_htab = hash_map<nofree_string_hash, pragma_entry>::create_ggc (31);\n \n   bool existed;\n   const char *name = ggc_strdup (funcname);"}, {"sha": "367ab74c5b8f26a4a00d496c983716ba74572f11", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=fb5c464a861887d98d709b8060002d6fc96ec6e0", "patch": "@@ -1263,12 +1263,9 @@ static int mips_register_move_cost (machine_mode, reg_class_t,\n static unsigned int mips_function_arg_boundary (machine_mode, const_tree);\n static machine_mode mips_get_reg_raw_mode (int regno);\n \f\n-struct mips16_flip_traits : simple_hashmap_traits <nofree_string_hash> {};\n-\n /* This hash table keeps track of implicit \"mips16\" and \"nomips16\" attributes\n    for -mflip_mips16.  It maps decl names onto a boolean mode setting.  */\n-static GTY (()) hash_map<const char *, bool, mips16_flip_traits> *\n-  mflip_mips16_htab;\n+static GTY (()) hash_map<nofree_string_hash, bool> *mflip_mips16_htab;\n \n /* True if -mflip-mips16 should next add an attribute for the default MIPS16\n    mode, false if it should next add an attribute for the opposite mode.  */\n@@ -1289,8 +1286,7 @@ mflip_mips16_use_mips16_p (tree decl)\n     return !base_is_mips16;\n \n   if (!mflip_mips16_htab)\n-    mflip_mips16_htab\n-      = hash_map<const char *, bool, mips16_flip_traits>::create_ggc (37);\n+    mflip_mips16_htab = hash_map<nofree_string_hash, bool>::create_ggc (37);\n \n   name = IDENTIFIER_POINTER (DECL_NAME (decl));\n \n@@ -6589,13 +6585,10 @@ mips_load_call_address (enum mips_call_type type, rtx dest, rtx addr)\n     }\n }\n \f\n-struct local_alias_traits : simple_hashmap_traits <nofree_string_hash> {};\n-\n /* Each locally-defined hard-float MIPS16 function has a local symbol\n    associated with it.  This hash table maps the function symbol (FUNC)\n    to the local symbol (LOCAL). */\n-static GTY (()) hash_map<const char *, rtx, local_alias_traits>\n-  *mips16_local_aliases;\n+static GTY (()) hash_map<nofree_string_hash, rtx> *mips16_local_aliases;\n \n /* FUNC is the symbol for a locally-defined hard-float MIPS16 function.\n    Return a local alias for it, creating a new one if necessary.  */\n@@ -6605,8 +6598,7 @@ mips16_local_alias (rtx func)\n {\n   /* Create the hash table if this is the first call.  */\n   if (mips16_local_aliases == NULL)\n-    mips16_local_aliases\n-      = hash_map<const char *, rtx, local_alias_traits>::create_ggc (37);\n+    mips16_local_aliases = hash_map<nofree_string_hash, rtx>::create_ggc (37);\n \n   /* Look up the function symbol, creating a new entry if need be.  */\n   bool existed;"}, {"sha": "fae85a26f197bd927ea8ac6d5261c2d0f193bc88", "filename": "gcc/except.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=fb5c464a861887d98d709b8060002d6fc96ec6e0", "patch": "@@ -163,8 +163,7 @@ along with GCC; see the file COPYING3.  If not see\n \n static GTY(()) int call_site_base;\n \n-struct tree_hash_traits : simple_hashmap_traits <tree_hash> {};\n-static GTY (()) hash_map<tree, tree, tree_hash_traits> *type_to_runtime_map;\n+static GTY (()) hash_map<tree_hash, tree> *type_to_runtime_map;\n \n /* Describe the SjLj_Function_Context structure.  */\n static GTY(()) tree sjlj_fc_type_node;\n@@ -247,8 +246,7 @@ init_eh (void)\n   if (! flag_exceptions)\n     return;\n \n-  type_to_runtime_map\n-    = hash_map<tree, tree, tree_hash_traits>::create_ggc (31);\n+  type_to_runtime_map = hash_map<tree_hash, tree>::create_ggc (31);\n \n   /* Create the SjLj_Function_Context structure.  This should match\n      the definition in unwind-sjlj.c.  */"}, {"sha": "195dc3cf3bc75e794f6211572a1e26d74dceb74c", "filename": "gcc/genmatch.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=fb5c464a861887d98d709b8060002d6fc96ec6e0", "patch": "@@ -395,9 +395,7 @@ get_operator (const char *id)\n   return 0;\n }\n \n-typedef simple_hashmap_traits<nofree_string_hash> capture_id_map_hasher;\n-\n-typedef hash_map<const char *, unsigned, capture_id_map_hasher> cid_map_t;\n+typedef hash_map<nofree_string_hash, unsigned> cid_map_t;\n \n \n /* The AST produced by parsing of the pattern definitions.  */"}, {"sha": "2225426e365caac7832c4dd79ae15485ed292954", "filename": "gcc/hash-map-traits.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Fhash-map-traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Fhash-map-traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-map-traits.h?ref=fb5c464a861887d98d709b8060002d6fc96ec6e0", "patch": "@@ -31,9 +31,9 @@ along with GCC; see the file COPYING3.  If not see\n template <typename H>\n struct simple_hashmap_traits\n {\n-  static inline hashval_t hash (const typename H::value_type &);\n-  static inline bool equal_keys (const typename H::value_type &,\n-\t\t\t\t const typename H::value_type &);\n+  typedef typename H::value_type key_type;\n+  static inline hashval_t hash (const key_type &);\n+  static inline bool equal_keys (const key_type &, const key_type &);\n   template <typename T> static inline void remove (T &);\n   template <typename T> static inline bool is_empty (const T &);\n   template <typename T> static inline bool is_deleted (const T &);\n@@ -43,15 +43,14 @@ struct simple_hashmap_traits\n \n template <typename H>\n inline hashval_t\n-simple_hashmap_traits <H>::hash (const typename H::value_type &h)\n+simple_hashmap_traits <H>::hash (const key_type &h)\n {\n   return H::hash (h);\n }\n \n template <typename H>\n inline bool\n-simple_hashmap_traits <H>::equal_keys (const typename H::value_type &k1,\n-\t\t\t\t       const typename H::value_type &k2)\n+simple_hashmap_traits <H>::equal_keys (const key_type &k1, const key_type &k2)\n {\n   return H::equal (k1, k2);\n }\n@@ -158,6 +157,7 @@ unbounded_hashmap_traits <Value>::mark_deleted (T &entry)\n template <typename Key, typename Value>\n struct unbounded_int_hashmap_traits : unbounded_hashmap_traits <Value>\n {\n+  typedef Key key_type;\n   static inline hashval_t hash (Key);\n   static inline bool equal_keys (Key, Key);\n };"}, {"sha": "cd97d354f1c0063f4afec017c25ba49530ef756b", "filename": "gcc/hash-map.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Fhash-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Fhash-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-map.h?ref=fb5c464a861887d98d709b8060002d6fc96ec6e0", "patch": "@@ -21,10 +21,11 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef hash_map_h\n #define hash_map_h\n \n-template<typename Key, typename Value,\n+template<typename KeyId, typename Value,\n \t typename Traits>\n class GTY((user)) hash_map\n {\n+  typedef typename Traits::key_type Key;\n   struct hash_entry\n   {\n     Key m_key;"}, {"sha": "450354ae1d706a0688b27e4de620b2a5d568eb6f", "filename": "gcc/hash-traits.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Fhash-traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Fhash-traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-traits.h?ref=fb5c464a861887d98d709b8060002d6fc96ec6e0", "patch": "@@ -278,7 +278,7 @@ struct ggc_cache_ptr_hash : pointer_hash <T>, ggc_cache_remove <T *> {};\n \n struct nofree_string_hash : string_hash, typed_noop_remove <const char *> {};\n \n-template <typename T> struct default_hash_traits;\n+template <typename T> struct default_hash_traits : T {};\n \n template <typename T>\n struct default_hash_traits <T *> : ggc_ptr_hash <T> {};"}, {"sha": "1f0a55f1fa3c8efca169ac857c23d6179f31248b", "filename": "gcc/ipa-icf.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Fipa-icf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Fipa-icf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.c?ref=fb5c464a861887d98d709b8060002d6fc96ec6e0", "patch": "@@ -2908,8 +2908,7 @@ sem_item_optimizer::subdivide_classes_by_equality (bool in_wpa)\n unsigned\n sem_item_optimizer::subdivide_classes_by_sensitive_refs ()\n {\n-  typedef hash_map <symbol_compare_collection *, vec <sem_item *>,\n-    symbol_compare_hashmap_traits> subdivide_hash_map;\n+  typedef hash_map <symbol_compare_hash, vec <sem_item *> > subdivide_hash_map;\n \n   unsigned newly_created_classes = 0;\n "}, {"sha": "67d5bdc90c5eb9c7f8ff344b110e5fc1234316e7", "filename": "gcc/ipa-icf.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Fipa-icf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Fipa-icf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.h?ref=fb5c464a861887d98d709b8060002d6fc96ec6e0", "patch": "@@ -125,8 +125,6 @@ struct symbol_compare_hash : nofree_ptr_hash <symbol_compare_collection>\n     return true;\n   }\n };\n-typedef simple_hashmap_traits <symbol_compare_hash>\n-  symbol_compare_hashmap_traits;\n \n \n /* Semantic item usage pair.  */"}, {"sha": "a6489b500686767b410fb32bfbde84e7e213c545", "filename": "gcc/mem-stats.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Fmem-stats.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Fmem-stats.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmem-stats.h?ref=fb5c464a861887d98d709b8060002d6fc96ec6e0", "patch": "@@ -260,10 +260,9 @@ class mem_alloc_description\n \t&& l1->m_line == l2->m_line;\n     }\n   };\n-  typedef simple_hashmap_traits<mem_location_hash> mem_alloc_hashmap_traits;\n \n   /* Internal class type definitions.  */\n-  typedef hash_map <mem_location *, T *, mem_alloc_hashmap_traits> mem_map_t;\n+  typedef hash_map <mem_location_hash, T *> mem_map_t;\n   typedef hash_map <const void *, mem_usage_pair<T> > reverse_mem_map_t;\n   typedef hash_map <const void *, std::pair<T *, size_t> > reverse_object_map_t;\n   typedef std::pair <mem_location *, T *> mem_list_t;"}, {"sha": "1316193ad41b341da0eab0e50a2fea93f97984e2", "filename": "gcc/passes.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=fb5c464a861887d98d709b8060002d6fc96ec6e0", "patch": "@@ -858,19 +858,15 @@ pass_manager::register_dump_files (opt_pass *pass)\n   while (pass);\n }\n \n-typedef simple_hashmap_traits<nofree_string_hash> pass_registry_hasher;\n-\n-static hash_map<const char *, opt_pass *, pass_registry_hasher>\n-  *name_to_pass_map;\n+static hash_map<nofree_string_hash, opt_pass *> *name_to_pass_map;\n \n /* Register PASS with NAME.  */\n \n static void\n register_pass_name (opt_pass *pass, const char *name)\n {\n   if (!name_to_pass_map)\n-    name_to_pass_map\n-      = new hash_map<const char *, opt_pass *, pass_registry_hasher> (256);\n+    name_to_pass_map = new hash_map<nofree_string_hash, opt_pass *> (256);\n \n   if (name_to_pass_map->get (name))\n     return; /* Ignore plugin passes.  */"}, {"sha": "967926f051937a454aa015f369ee30d29513e62b", "filename": "gcc/sanopt.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Fsanopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Fsanopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsanopt.c?ref=fb5c464a861887d98d709b8060002d6fc96ec6e0", "patch": "@@ -97,8 +97,6 @@ maybe_get_single_definition (tree t)\n   return NULL_TREE;\n }\n \n-typedef simple_hashmap_traits <tree_operand_hash> sanopt_tree_map_traits;\n-\n /* Tree triplet for vptr_check_map.  */\n struct sanopt_tree_triplet\n {\n@@ -154,8 +152,6 @@ struct sanopt_tree_triplet_hash : typed_noop_remove <sanopt_tree_triplet>\n     return ref.t1 == NULL;\n   }\n };\n-typedef simple_hashmap_traits <sanopt_tree_triplet_hash>\n-  sanopt_tree_triplet_map_traits;\n \n /* This is used to carry various hash maps and variables used\n    in sanopt_optimize_walker.  */\n@@ -168,13 +164,12 @@ struct sanopt_ctx\n \n   /* This map maps a pointer (the second argument of ASAN_CHECK) to\n      a vector of ASAN_CHECK call statements that check the access.  */\n-  hash_map<tree, auto_vec<gimple>, sanopt_tree_map_traits> asan_check_map;\n+  hash_map<tree_operand_hash, auto_vec<gimple> > asan_check_map;\n \n   /* This map maps a tree triplet (the first, second and fourth argument\n      of UBSAN_VPTR) to a vector of UBSAN_VPTR call statements that check\n      that virtual table pointer.  */\n-  hash_map<sanopt_tree_triplet, auto_vec<gimple>,\n-\t   sanopt_tree_triplet_map_traits> vptr_check_map;\n+  hash_map<sanopt_tree_triplet_hash, auto_vec<gimple> > vptr_check_map;\n \n   /* Number of IFN_ASAN_CHECK statements.  */\n   int asan_num_accesses;"}, {"sha": "2ba2f980ca0ee0a6b62fff8fe5ba55c5b8c6d211", "filename": "gcc/sese.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=fb5c464a861887d98d709b8060002d6fc96ec6e0", "patch": "@@ -76,8 +76,7 @@ debug_rename_map_1 (tree_node *const &old_name, tree_node *const &expr,\n   return true;\n }\n \f\n-typedef simple_hashmap_traits<tree_ssa_name_hash> rename_map_hasher;\n-typedef hash_map<tree, tree, rename_map_hasher> rename_map_type;\n+typedef hash_map<tree_ssa_name_hash, tree> rename_map_type;\n \f\n \n /* Print to stderr all the elements of RENAME_MAP.  */"}, {"sha": "eefbfd912a40590bf1557d24172ba9d54dc346d6", "filename": "gcc/symbol-summary.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Fsymbol-summary.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Fsymbol-summary.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymbol-summary.h?ref=fb5c464a861887d98d709b8060002d6fc96ec6e0", "patch": "@@ -83,7 +83,7 @@ class GTY((user)) function_summary <T *>\n     m_symtab_duplication_hook = NULL;\n \n     /* Release all summaries.  */\n-    typedef typename hash_map <int, T *, summary_hashmap_traits>::iterator map_iterator;\n+    typedef typename hash_map <map_hash, T *>::iterator map_iterator;\n     for (map_iterator it = m_map.begin (); it != m_map.end (); ++it)\n       release ((*it).second);\n   }\n@@ -201,7 +201,6 @@ class GTY((user)) function_summary <T *>\n \n private:\n   typedef int_hash <int, 0, -1> map_hash;\n-  typedef simple_hashmap_traits <map_hash> summary_hashmap_traits;\n \n   /* Getter for summary callgraph ID.  */\n   T* get (int uid)\n@@ -215,7 +214,7 @@ class GTY((user)) function_summary <T *>\n   }\n \n   /* Main summary store, where summary ID is used as key.  */\n-  hash_map <int, T *, summary_hashmap_traits> m_map;\n+  hash_map <map_hash, T *> m_map;\n   /* Internal summary insertion hook pointer.  */\n   cgraph_node_hook_list *m_symtab_insertion_hook;\n   /* Internal summary removal hook pointer.  */"}, {"sha": "003f1ddecd2e312e2009907dc1a3111851410b74", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=fb5c464a861887d98d709b8060002d6fc96ec6e0", "patch": "@@ -1589,8 +1589,6 @@ convert_scalar_cond_reduction (gimple reduc, gimple_stmt_iterator *gsi,\n   return rhs;\n }\n \n-typedef simple_hashmap_traits <tree_operand_hash> phi_args_hash_traits;\n-\n /* Produce condition for all occurrences of ARG in PHI node.  */\n \n static tree\n@@ -1737,7 +1735,7 @@ predicate_scalar_phi (gphi *phi, gimple_stmt_iterator *gsi)\n   /* Create hashmap for PHI node which contain vector of argument indexes\n      having the same value.  */\n   bool swap = false;\n-  hash_map<tree, auto_vec<int>, phi_args_hash_traits> phi_arg_map;\n+  hash_map<tree_operand_hash, auto_vec<int> > phi_arg_map;\n   unsigned int num_args = gimple_phi_num_args (phi);\n   int max_ind = -1;\n   /* Vector of different PHI argument values.  */"}, {"sha": "68321985ef705905eb3197f980d9ea0dbb968b17", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=fb5c464a861887d98d709b8060002d6fc96ec6e0", "patch": "@@ -862,8 +862,7 @@ remap_dependence_clique (copy_body_data *id, unsigned short clique)\n   if (clique == 0)\n     return 0;\n   if (!id->dependence_map)\n-    id->dependence_map\n-      = new hash_map<unsigned short, unsigned short, dependence_hasher>;\n+    id->dependence_map = new hash_map<dependence_hash, unsigned short>;\n   bool existed;\n   unsigned short &newc = id->dependence_map->get_or_insert (clique, &existed);\n   if (!existed)"}, {"sha": "58af9cdb7baf58990eda43e55ad396b23fd25380", "filename": "gcc/tree-inline.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Ftree-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Ftree-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.h?ref=fb5c464a861887d98d709b8060002d6fc96ec6e0", "patch": "@@ -36,7 +36,6 @@ enum copy_body_cge_which\n };\n \n typedef int_hash <unsigned short, 0> dependence_hash;\n-typedef simple_hashmap_traits <dependence_hash> dependence_hasher;\n \n /* Data required for function body duplication.  */\n \n@@ -148,7 +147,7 @@ struct copy_body_data\n \n   /* A map from the inlined functions dependence info cliques to\n      equivalents in the function into which it is being inlined.  */\n-  hash_map<unsigned short, unsigned short, dependence_hasher> *dependence_map;\n+  hash_map<dependence_hash, unsigned short> *dependence_map;\n };\n \n /* Weights of constructions for estimate_num_insns.  */"}, {"sha": "d4987519721405ebcc9ec7c0743280c20fa412da", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=fb5c464a861887d98d709b8060002d6fc96ec6e0", "patch": "@@ -154,12 +154,9 @@ struct decl_stridxlist_map\n   struct stridxlist list;\n };\n \n-typedef simple_hashmap_traits <tree_decl_hash> stridxlist_hash_traits;\n-\n /* Hash table for mapping decls to a chained list of offset -> idx\n    mappings.  */\n-static hash_map<tree, stridxlist, stridxlist_hash_traits>\n-  *decl_to_stridxlist_htab;\n+static hash_map<tree_decl_hash, stridxlist> *decl_to_stridxlist_htab;\n \n /* Obstack for struct stridxlist and struct decl_stridxlist_map.  */\n static struct obstack stridx_obstack;\n@@ -325,7 +322,7 @@ addr_stridxptr (tree exp)\n   if (!decl_to_stridxlist_htab)\n     {\n       decl_to_stridxlist_htab\n-       \t= new hash_map<tree, stridxlist, stridxlist_hash_traits> (64);\n+       \t= new hash_map<tree_decl_hash, stridxlist> (64);\n       gcc_obstack_init (&stridx_obstack);\n     }\n "}, {"sha": "2917c30de61d4fbe1933338e40bf69b0428311f3", "filename": "gcc/value-prof.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5c464a861887d98d709b8060002d6fc96ec6e0/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=fb5c464a861887d98d709b8060002d6fc96ec6e0", "patch": "@@ -1249,10 +1249,8 @@ gimple_mod_subtract_transform (gimple_stmt_iterator *si)\n }\n \n typedef int_hash <unsigned int, 0, UINT_MAX> profile_id_hash;\n-typedef simple_hashmap_traits <profile_id_hash> profile_id_traits;\n \n-static hash_map<unsigned int, cgraph_node *, profile_id_traits> *\n-cgraph_node_map = 0;\n+static hash_map<profile_id_hash, cgraph_node *> *cgraph_node_map = 0;\n \n /* Returns true if node graph is initialized. This\n    is used to test if profile_id has been created\n@@ -1272,8 +1270,7 @@ void\n init_node_map (bool local)\n {\n   struct cgraph_node *n;\n-  cgraph_node_map\n-    = new hash_map<unsigned int, cgraph_node *, profile_id_traits>;\n+  cgraph_node_map = new hash_map<profile_id_hash, cgraph_node *>;\n \n   FOR_EACH_DEFINED_FUNCTION (n)\n     if (n->has_gimple_body_p ())"}]}