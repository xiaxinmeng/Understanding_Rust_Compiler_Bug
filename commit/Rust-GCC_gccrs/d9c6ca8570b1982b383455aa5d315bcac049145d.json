{"sha": "d9c6ca8570b1982b383455aa5d315bcac049145d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDljNmNhODU3MGIxOTgyYjM4MzQ1NWFhNWQzMTViY2FjMDQ5MTQ1ZA==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2012-08-22T12:29:23Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2012-08-22T12:29:23Z"}, "message": "re PR tree-optimization/54317 (FAIL: c45532m c45532n c45532o c45532p)\n\n2012-08-22  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR tree-optimization/54317\n\ngcc/\n\t* tree-vrp.c (extract_range_from_binary_expr_1): Test for\n\tdouble_int overflow.\n\tRemove dead tests.\n\ngcc/testsuite/\n\t* gcc.dg/tree-ssa/vrp79.c: New testcase.\n\nFrom-SVN: r190591", "tree": {"sha": "8f08be5dd4e93dd2c8960068854763c63bfe24a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f08be5dd4e93dd2c8960068854763c63bfe24a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9c6ca8570b1982b383455aa5d315bcac049145d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9c6ca8570b1982b383455aa5d315bcac049145d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9c6ca8570b1982b383455aa5d315bcac049145d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9c6ca8570b1982b383455aa5d315bcac049145d/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6f723d3319d8a656079b0509be4a249c0fbd955c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f723d3319d8a656079b0509be4a249c0fbd955c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f723d3319d8a656079b0509be4a249c0fbd955c"}], "stats": {"total": 44, "additions": 41, "deletions": 3}, "files": [{"sha": "c04f5cb90a0e6dd7f7482bf05dcc715d7ba036c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9c6ca8570b1982b383455aa5d315bcac049145d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9c6ca8570b1982b383455aa5d315bcac049145d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9c6ca8570b1982b383455aa5d315bcac049145d", "patch": "@@ -1,3 +1,10 @@\n+2012-08-22  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR tree-optimization/54317\n+\t* tree-vrp.c (extract_range_from_binary_expr_1): Test for\n+\tdouble_int overflow.\n+\tRemove dead tests.\n+\n 2012-08-22  Jakub Jelinek  <jakub@redhat.com>\n \n \t* tree-vrp.c (find_assert_locations): Skip also edges"}, {"sha": "049e2d13c5b35ab8ede8488a697f6a2e97d37cd4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9c6ca8570b1982b383455aa5d315bcac049145d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9c6ca8570b1982b383455aa5d315bcac049145d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d9c6ca8570b1982b383455aa5d315bcac049145d", "patch": "@@ -1,3 +1,8 @@\n+2012-08-22  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR tree-optimization/54317\n+\t* gcc.dg/tree-ssa/vrp79.c: New testcase.\n+\n 2012-08-21  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/39423"}, {"sha": "88c1bd8582154c6f71747df2cd2f1521366ed1df", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp79.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9c6ca8570b1982b383455aa5d315bcac049145d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp79.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9c6ca8570b1982b383455aa5d315bcac049145d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp79.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp79.c?ref=d9c6ca8570b1982b383455aa5d315bcac049145d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+#ifdef __SIZEOF_INT128__\n+typedef unsigned __int128 NT;\n+#else\n+typedef unsigned long long NT;\n+#endif\n+\n+extern void do_not_go_away ();\n+\n+void f (NT x, NT y)\n+{\n+  NT n = 1;\n+  n <<= (__CHAR_BIT__ * sizeof (NT) - 1);\n+  if (x > n) return;\n+  if (y > n) return;\n+  NT z = x + y;\n+  if (z == 42) do_not_go_away ();\n+}\n+\n+/* { dg-final { scan-tree-dump \"do_not_go_away\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "f949e8b9beefd166db5f225f6d8f40714069662a", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9c6ca8570b1982b383455aa5d315bcac049145d/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9c6ca8570b1982b383455aa5d315bcac049145d/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=d9c6ca8570b1982b383455aa5d315bcac049145d", "patch": "@@ -2474,18 +2474,21 @@ extract_range_from_binary_expr_1 (value_range_t *vr,\n \t\t{\n \t\t  /* Min underflow or max overflow.  The range kind\n \t\t     changes to VR_ANTI_RANGE.  */\n+\t\t  bool covers = false;\n \t\t  double_int tem = tmin;\n \t\t  gcc_assert ((min_ovf == -1 && max_ovf == 0)\n \t\t\t      || (max_ovf == 1 && min_ovf == 0));\n \t\t  type = VR_ANTI_RANGE;\n \t\t  tmin = double_int_add (tmax, double_int_one);\n+\t\t  if (double_int_cmp (tmin, tmax, uns) < 0)\n+\t\t    covers = true;\n \t\t  tmax = double_int_add (tem, double_int_minus_one);\n+\t\t  if (double_int_cmp (tmax, tem, uns) > 0)\n+\t\t    covers = true;\n \t\t  /* If the anti-range would cover nothing, drop to varying.\n \t\t     Likewise if the anti-range bounds are outside of the\n \t\t     types values.  */\n-\t\t  if (double_int_cmp (tmin, tmax, uns) > 0\n-\t\t      || double_int_cmp (tmin, type_min, uns) < 0\n-\t\t      || double_int_cmp (tmax, type_max, uns) > 0)\n+\t\t  if (covers || double_int_cmp (tmin, tmax, uns) > 0)\n \t\t    {\n \t\t      set_value_range_to_varying (vr);\n \t\t      return;"}]}