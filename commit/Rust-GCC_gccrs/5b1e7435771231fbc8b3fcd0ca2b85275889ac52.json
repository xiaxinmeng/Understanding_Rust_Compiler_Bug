{"sha": "5b1e7435771231fbc8b3fcd0ca2b85275889ac52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWIxZTc0MzU3NzEyMzFmYmM4YjNmY2QwY2EyYjg1Mjc1ODg5YWM1Mg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2013-08-25T09:43:34Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2013-08-25T09:43:34Z"}, "message": "tree.h (TYPE_FINAL_P, [...]): New macros.\n\n\n\t* tree.h (TYPE_FINAL_P, DECL_FINAL_P): New macros.\n\t(tree_decl_with_vis): Add FINAL field.\n\n\t* cp-tree.h (struct lang_type_class): Free is_final bit.\n\t(CLASSTYPE_FINAL): Define using TYPE_FINAL_P.\n\t(DECL_FINAL_P): Remove.\n\t* pt.c (instantiate_class_template_1): Guard that CLASSTYPE_FINAL\n\tis called on CLASS_TYPE_P.\n\nFrom-SVN: r201975", "tree": {"sha": "07e2304f79df66dbf9a31e2877013e03804fd9e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07e2304f79df66dbf9a31e2877013e03804fd9e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b1e7435771231fbc8b3fcd0ca2b85275889ac52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b1e7435771231fbc8b3fcd0ca2b85275889ac52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b1e7435771231fbc8b3fcd0ca2b85275889ac52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b1e7435771231fbc8b3fcd0ca2b85275889ac52/comments", "author": null, "committer": null, "parents": [{"sha": "0691175fe28c07b0dd6f619bbb9a20a0e1f055b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0691175fe28c07b0dd6f619bbb9a20a0e1f055b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0691175fe28c07b0dd6f619bbb9a20a0e1f055b7"}], "stats": {"total": 41, "additions": 32, "deletions": 9}, "files": [{"sha": "d576a447350313aade7e20645c72a1450d2a3ee3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b1e7435771231fbc8b3fcd0ca2b85275889ac52/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b1e7435771231fbc8b3fcd0ca2b85275889ac52/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5b1e7435771231fbc8b3fcd0ca2b85275889ac52", "patch": "@@ -1,3 +1,8 @@\n+2013-08-23  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree.h (TYPE_FINAL_P, DECL_FINAL_P): New macros.\n+\t(tree_decl_with_vis): Add FINAL field.\n+\n 2013-08-23  Jeff Law  <law@redhat.com>\n \n \t* tree-ssa-pre.c (do_regular_insertion): Include the expression in"}, {"sha": "f7aefc787ceda6957b60f36642aa55ecf65b78ff", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b1e7435771231fbc8b3fcd0ca2b85275889ac52/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b1e7435771231fbc8b3fcd0ca2b85275889ac52/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5b1e7435771231fbc8b3fcd0ca2b85275889ac52", "patch": "@@ -1,3 +1,11 @@\n+2013-08-23  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cp-tree.h (struct lang_type_class): Free is_final bit.\n+\t(CLASSTYPE_FINAL): Define using TYPE_FINAL_P.\n+\t(DECL_FINAL_P): Remove.\n+\t* pt.c (instantiate_class_template_1): Guard that CLASSTYPE_FINAL\n+\tis called on CLASS_TYPE_P.\n+\n 2013-08-25  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* cxx-pretty-print.c (M_): Remove."}, {"sha": "248c645eb6819589870784217576d67e5bc936c8", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b1e7435771231fbc8b3fcd0ca2b85275889ac52/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b1e7435771231fbc8b3fcd0ca2b85275889ac52/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5b1e7435771231fbc8b3fcd0ca2b85275889ac52", "patch": "@@ -1416,7 +1416,6 @@ struct GTY(()) lang_type_class {\n   unsigned has_complex_move_ctor : 1;\n   unsigned has_complex_move_assign : 1;\n   unsigned has_constexpr_ctor : 1;\n-  unsigned is_final : 1;\n \n   /* When adding a flag here, consider whether or not it ought to\n      apply to a template instance if it applies to the template.  If\n@@ -1425,7 +1424,7 @@ struct GTY(()) lang_type_class {\n   /* There are some bits left to fill out a 32-bit word.  Keep track\n      of this by updating the size of this bitfield whenever you add or\n      remove a flag.  */\n-  unsigned dummy : 2;\n+  unsigned dummy : 3;\n \n   tree primary_base;\n   vec<tree_pair_s, va_gc> *vcall_indices;\n@@ -1535,7 +1534,7 @@ struct GTY((variable_size)) lang_type {\n \n /* Nonzero means that NODE (a class type) is final */\n #define CLASSTYPE_FINAL(NODE) \\\n-  (LANG_TYPE_CLASS_CHECK (NODE)->is_final)\n+  TYPE_FINAL_P (NODE)\n \n \n /* Nonzero means that this _CLASSTYPE node overloads operator=(X&).  */\n@@ -2400,10 +2399,6 @@ struct GTY((variable_size)) lang_decl {\n    an override virt-specifier */\n #define DECL_OVERRIDE_P(NODE) (TREE_LANG_FLAG_0 (NODE))\n \n-/* True (in a FUNCTION_DECL) if NODE is a function declared with\n-   a final virt-specifier */\n-#define DECL_FINAL_P(NODE) (TREE_LANG_FLAG_1 (NODE))\n-\n /* The thunks associated with NODE, a FUNCTION_DECL.  */\n #define DECL_THUNKS(NODE) \\\n   (DECL_VIRTUAL_P (NODE) ? LANG_DECL_FN_CHECK (NODE)->context : NULL_TREE)"}, {"sha": "e937318d22756008a585b37e64382c3d385be62e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b1e7435771231fbc8b3fcd0ca2b85275889ac52/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b1e7435771231fbc8b3fcd0ca2b85275889ac52/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5b1e7435771231fbc8b3fcd0ca2b85275889ac52", "patch": "@@ -8730,7 +8730,8 @@ instantiate_class_template_1 (tree type)\n       /* Adjust visibility for template arguments.  */\n       determine_visibility (TYPE_MAIN_DECL (type));\n     }\n-  CLASSTYPE_FINAL (type) = CLASSTYPE_FINAL (pattern);\n+  if (CLASS_TYPE_P (type))\n+    CLASSTYPE_FINAL (type) = CLASSTYPE_FINAL (pattern);\n \n   pbinfo = TYPE_BINFO (pattern);\n "}, {"sha": "60921281438f5f2f9deb89a78ad3c88b181fb0c4", "filename": "gcc/tree.h", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b1e7435771231fbc8b3fcd0ca2b85275889ac52/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b1e7435771231fbc8b3fcd0ca2b85275889ac52/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=5b1e7435771231fbc8b3fcd0ca2b85275889ac52", "patch": "@@ -715,6 +715,9 @@ struct GTY(()) tree_base {\n \n        DECL_NONLOCAL_FRAME in\n \t   VAR_DECL\n+\n+       TYPE_FINAL_P in\n+\t   RECORD_TYPE, UNION_TYPE and QUAL_UNION_TYPE\n */\n \n struct GTY(()) tree_typed {\n@@ -2314,6 +2317,10 @@ enum cv_qualifier\n #define TYPE_CONTAINS_PLACEHOLDER_INTERNAL(NODE) \\\n   (TYPE_CHECK (NODE)->type_common.contains_placeholder_bits)\n \n+/* Nonzero if RECORD_TYPE represents a final derivation of class.  */\n+#define TYPE_FINAL_P(NODE) \\\n+  (RECORD_OR_UNION_CHECK (NODE)->base.default_def_flag)\n+\n /* The debug output functions use the symtab union field to store\n    information specific to the debugging format.  The different debug\n    output hooks store different types in the union field.  These three\n@@ -3224,7 +3231,9 @@ struct GTY(()) tree_decl_with_vis {\n  unsigned init_priority_p : 1;\n  /* Used by C++ only.  Might become a generic decl flag.  */\n  unsigned shadowed_for_var_p : 1;\n- /* 14 unused bits. */\n+ /* Belong to FUNCTION_DECL exclusively.  */\n+ unsigned final : 1;\n+ /* 13 unused bits. */\n };\n \n extern tree decl_debug_expr_lookup (tree);\n@@ -3474,6 +3483,11 @@ extern vec<tree, va_gc> **decl_debug_args_insert (tree);\n #define DECL_FUNCTION_VERSIONED(NODE)\\\n    (FUNCTION_DECL_CHECK (NODE)->function_decl.versioned_function)\n \n+/* In FUNCTION_DECL that represent an virtual method this is set when\n+   the method is final.  */\n+#define DECL_FINAL_P(NODE)\\\n+   (FUNCTION_DECL_CHECK (NODE)->decl_with_vis.final)\n+\n /* FUNCTION_DECL inherits from DECL_NON_COMMON because of the use of the\n    arguments/result/saved_tree fields by front ends.   It was either inherit\n    FUNCTION_DECL from non_common, or inherit non_common from FUNCTION_DECL,"}]}