{"sha": "0c8ff35eb982a49882ed71b1b85e8436675adf88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM4ZmYzNWViOTgyYTQ5ODgyZWQ3MWIxYjg1ZTg0MzY2NzVhZGY4OA==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2021-06-15T13:12:36Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-07-12T12:50:57Z"}, "message": "[Ada] Clean up Uint fields\n\ngcc/ada/\n\n\t* uintp.ads, types.h: New subtypes of Uint: Valid_Uint, Unat,\n\tUpos, Nonzero_Uint with predicates. These correspond to new\n\tfield types in Gen_IL.\n\t* gen_il-types.ads (Valid_Uint, Unat, Upos, Nonzero_Uint): New\n\tfield types.\n\t* einfo-utils.ads, einfo-utils.adb, fe.h (Known_Alignment,\n\tInit_Alignment): Use the initial zero value to represent\n\t\"unknown\". This will ensure that if Alignment is called before\n\tSet_Alignment, the compiler will blow up (if assertions are\n\tenabled).\n\t* atree.ads, atree.adb, atree.h, gen_il-gen.adb\n\t(Get_Valid_32_Bit_Field): New generic low-level getter for\n\tsubtypes of Uint.\n\t(Copy_Alignment): New procedure to copy Alignment field even\n\twhen Unknown.\n\t(Init_Object_Size_Align, Init_Size_Align): Do not bypass the\n\tInit_ procedures.\n\t* exp_pakd.adb, freeze.adb, layout.adb, repinfo.adb,\n\tsem_util.adb: Protect calls to Alignment with Known_Alignment.\n\tUse Copy_Alignment when it might be unknown.\n\t* gen_il-gen-gen_entities.adb (Alignment,\n\tString_Literal_Length): Use type Unat instead of Uint, to ensure\n\tthat the field is always Set_ before we get it, and that it is\n\tset to a nonnegative value.\n\t(Enumeration_Pos): Unat.\n\t(Enumeration_Rep): Valid_Uint. Can be negative, but must be\n\tvalid before fetching.\n\t(Discriminant_Number): Upos.\n\t(Renaming_Map): Remove.\n\t* gen_il-gen-gen_nodes.adb (Char_Literal_Value, Reason): Unat.\n\t(Intval, Corresponding_Integer_Value): Valid_Uint.\n\t* gen_il-internals.ads: New functions for dealing with special\n\tdefaults and new subtypes of Uint.\n\t* scans.ads: Correct comments.\n\t* scn.adb (Post_Scan): Do not set Intval to No_Uint; that is no\n\tlonger allowed.\n\t* sem_ch13.adb (Analyze_Enumeration_Representation_Clause): Do\n\tnot set Enumeration_Rep to No_Uint; that is no longer allowed.\n\t(Offset_Value): Protect calls to Alignment with Known_Alignment.\n\t* sem_prag.adb (Set_Atomic_VFA): Do not use Uint_0 to mean\n\t\"unknown\"; call Init_Alignment instead.\n\t* sinfo.ads: Minor comment fix.\n\t* treepr.adb: Deal with printing of new field types.\n\t* einfo.ads, gen_il-fields.ads (Renaming_Map): Remove.\n\t* gcc-interface/decl.c (gnat_to_gnu_entity): Use Known_Alignment\n\tbefore calling Alignment. This preserve some probably buggy\n\tbehavior: if the alignment is not set, it previously defaulted\n\tto Uint_0; we now make that explicit.  Use Copy_Alignment,\n\tbecause \"Set_Alignment (Y, Alignment (X));\" no longer works when\n\tthe Alignment of X has not yet been set.\n\t* gcc-interface/trans.c (process_freeze_entity): Use\n\tCopy_Alignment.", "tree": {"sha": "71b6ac19dfcaef9f49b23a1221eac331546922cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71b6ac19dfcaef9f49b23a1221eac331546922cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c8ff35eb982a49882ed71b1b85e8436675adf88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c8ff35eb982a49882ed71b1b85e8436675adf88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c8ff35eb982a49882ed71b1b85e8436675adf88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c8ff35eb982a49882ed71b1b85e8436675adf88/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cb3843bca9a28c28dbc1fafd88c144a43e141df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cb3843bca9a28c28dbc1fafd88c144a43e141df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cb3843bca9a28c28dbc1fafd88c144a43e141df"}], "stats": {"total": 403, "additions": 268, "deletions": 135}, "files": [{"sha": "c7e295bc8f7bc42b1aede1a9b5852c8b907c62e5", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=0c8ff35eb982a49882ed71b1b85e8436675adf88", "patch": "@@ -25,7 +25,7 @@\n \n --  Assertions in this package are too slow, and are mostly needed when working\n --  on this package itself, or on gen_il, so we disable them.\n---  To debug low-level bugs in this area, comment out the following pragmas,\n+--  To debug low-level bugs in this area, comment out the following pragma,\n --  and run with -gnatd_v.\n \n pragma Assertion_Policy (Ignore);\n@@ -521,19 +521,37 @@ package body Atree is\n         (N : Node_Or_Entity_Id; Offset : Field_Offset) return Field_Type\n       is\n          function Get_Field is new Get_32_Bit_Field (Field_Type) with Inline;\n+         Result : Field_Type;\n       begin\n          --  If the field has not yet been set, it will be equal to zero.\n          --  That is of the \"wrong\" type, so we fetch it as a\n          --  Field_Size_32_Bit.\n \n          if Get_32_Bit_Val (N, Offset) = 0 then\n-            return Default_Val;\n+            Result := Default_Val;\n \n          else\n-            return Get_Field (N, Offset);\n+            Result := Get_Field (N, Offset);\n          end if;\n+\n+         return Result;\n       end Get_32_Bit_Field_With_Default;\n \n+      function Get_Valid_32_Bit_Field\n+        (N : Node_Or_Entity_Id; Offset : Field_Offset) return Field_Type\n+      is\n+         pragma Assert (Get_32_Bit_Val (N, Offset) /= 0);\n+         --  If the field has not yet been set, it will be equal to zero.\n+         --  This asserts that we don't call Get_ before Set_. Note that\n+         --  the predicate on the Val parameter of Set_ checks for the No_...\n+         --  value, so it can't possibly be (for example) No_Uint here.\n+\n+         function Get_Field is new Get_32_Bit_Field (Field_Type) with Inline;\n+         Result : constant Field_Type := Get_Field (N, Offset);\n+      begin\n+         return Result;\n+      end Get_Valid_32_Bit_Field;\n+\n       procedure Set_1_Bit_Field\n         (N : Node_Or_Entity_Id; Offset : Field_Offset; Val : Field_Type)\n       is"}, {"sha": "6fb5aa6c2b6fb24d920ea0ed28e2f051c1c08f5b", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=0c8ff35eb982a49882ed71b1b85e8436675adf88", "patch": "@@ -762,6 +762,14 @@ package Atree is\n          with Inline;\n       --  If the field has not yet been set, return Default_Val\n \n+      generic\n+         type Field_Type is private;\n+      function Get_Valid_32_Bit_Field\n+        (N : Node_Or_Entity_Id; Offset : Field_Offset) return Field_Type\n+         with Inline;\n+      --  Assert that the field has already been set. This is currently used\n+      --  only for Uints, but could be used more generally.\n+\n       generic\n          type Field_Type is private;\n       procedure Set_1_Bit_Field"}, {"sha": "08b791cae7c3afd4bc7ca8ca2224899fc6f5e754", "filename": "gcc/ada/atree.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fatree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fatree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.h?ref=0c8ff35eb982a49882ed71b1b85e8436675adf88", "patch": "@@ -79,6 +79,7 @@ INLINE unsigned int Get_8_Bit_Field (Node_Id, Field_Offset);\n INLINE unsigned int Get_32_Bit_Field (Node_Id, Field_Offset);\n INLINE unsigned int Get_32_Bit_Field_With_Default (Node_Id, Field_Offset,\n \t\t\t\t\t\t   unsigned int);\n+INLINE unsigned int Get_Valid_32_Bit_Field (Node_Id, Field_Offset);\n \n INLINE unsigned int\n Get_1_Bit_Field (Node_Id N, Field_Offset Offset)\n@@ -127,6 +128,14 @@ Get_32_Bit_Field_With_Default (Node_Id N, Field_Offset Offset,\n   return slot == Empty ? Default_Value : slot;\n }\n \n+INLINE unsigned int\n+Get_Valid_32_Bit_Field (Node_Id N, Field_Offset Offset)\n+{\n+  any_slot slot = *(Slots_Ptr + Node_Offsets_Ptr[N] + Offset);\n+  gcc_assert (slot != Empty);\n+  return slot;\n+}\n+\n #ifdef __cplusplus\n }\n #endif"}, {"sha": "4690c8f349033905cfa1dcd986ebfa5a922af61c", "filename": "gcc/ada/einfo-utils.adb", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Feinfo-utils.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Feinfo-utils.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo-utils.adb?ref=0c8ff35eb982a49882ed71b1b85e8436675adf88", "patch": "@@ -364,7 +364,7 @@ package body Einfo.Utils is\n \n    procedure Init_Alignment (Id : E) is\n    begin\n-      Set_Alignment (Id, Uint_0);\n+      Reinit_Field_To_Zero (Id, F_Alignment);\n    end Init_Alignment;\n \n    procedure Init_Alignment (Id : E; V : Int) is\n@@ -452,6 +452,15 @@ package body Einfo.Utils is\n       Set_RM_Size (Id, UI_From_Int (V));\n    end Init_RM_Size;\n \n+   procedure Copy_Alignment (To, From : E) is\n+   begin\n+      if Known_Alignment (From) then\n+         Set_Alignment (To, Alignment (From));\n+      else\n+         Init_Alignment (To);\n+      end if;\n+   end Copy_Alignment;\n+\n    -----------------------------\n    -- Init_Component_Location --\n    -----------------------------\n@@ -471,8 +480,8 @@ package body Einfo.Utils is\n \n    procedure Init_Object_Size_Align (Id : E) is\n    begin\n-      Set_Esize (Id, Uint_0);\n-      Set_Alignment (Id, Uint_0);\n+      Init_Esize (Id);\n+      Init_Alignment (Id);\n    end Init_Object_Size_Align;\n \n    ---------------\n@@ -499,19 +508,19 @@ package body Einfo.Utils is\n    procedure Init_Size_Align (Id : E) is\n    begin\n       pragma Assert (Ekind (Id) in Type_Kind | E_Void);\n-      Set_Esize (Id, Uint_0);\n-      Set_RM_Size (Id, Uint_0);\n-      Set_Alignment (Id, Uint_0);\n+      Init_Esize (Id);\n+      Init_RM_Size (Id);\n+      Init_Alignment (Id);\n    end Init_Size_Align;\n \n    ----------------------------------------------\n    -- Type Representation Attribute Predicates --\n    ----------------------------------------------\n \n    function Known_Alignment                       (E : Entity_Id) return B is\n+      Result : constant B := not Field_Is_Initial_Zero (E, F_Alignment);\n    begin\n-      return Alignment (E) /= Uint_0\n-        and then Alignment (E) /= No_Uint;\n+      return Result;\n    end Known_Alignment;\n \n    function Known_Component_Bit_Offset            (E : Entity_Id) return B is"}, {"sha": "a6517b99b88abcdff5be50b09c2770d971d3f44d", "filename": "gcc/ada/einfo-utils.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Feinfo-utils.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Feinfo-utils.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo-utils.ads?ref=0c8ff35eb982a49882ed71b1b85e8436675adf88", "patch": "@@ -454,6 +454,13 @@ package Einfo.Utils is\n    procedure Init_Normalized_Position_Max  (Id : E);\n    procedure Init_RM_Size                  (Id : E);\n \n+   --  The following Copy_xxx procedures copy the value of xxx from From to\n+   --  To. If xxx is set to its initial invalid (zero-bits) value, then it is\n+   --  reset to invalid in To. We only have Copy_Alignment so far, but more are\n+   --  planned.\n+\n+   procedure Copy_Alignment (To, From : E);\n+\n    pragma Inline (Init_Alignment);\n    pragma Inline (Init_Component_Bit_Offset);\n    pragma Inline (Init_Component_Size);"}, {"sha": "e87ce4c8ba29ae11d31aa8b0ad825fe05d412bcc", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=0c8ff35eb982a49882ed71b1b85e8436675adf88", "patch": "@@ -4173,15 +4173,6 @@ package Einfo is\n --       within an accept statement. For all remaining cases (discriminants,\n --       loop parameters) the field is Empty.\n \n---    Renaming_Map\n---       Defined in generic subprograms, generic packages, and their\n---       instances. Also defined in the instances of the corresponding\n---       bodies. Denotes the renaming map (generic entities => instance\n---       entities) used to construct the instance by giving an index into\n---       the tables used to represent these maps. See Sem_Ch12 for further\n---       details. The maps for package instances are also used when the\n---       instance is the actual corresponding to a formal package.\n-\n --    Requires_Overriding\n --       Defined in all subprograms and entries. Set for subprograms that\n --       require overriding as defined by RM-2005-3.9.3(6/2). Note that this\n@@ -5474,7 +5465,6 @@ package Einfo is\n    --  E_Function\n    --  E_Generic_Function\n    --    Mechanism                            (Mechanism_Type)\n-   --    Renaming_Map\n    --    Handler_Records                      (non-generic case only)\n    --    Protected_Body_Subprogram\n    --    Next_Inlined_Subprogram\n@@ -5734,7 +5724,6 @@ package Einfo is\n    --  E_Package\n    --  E_Generic_Package\n    --    Dependent_Instances                  (for an instance)\n-   --    Renaming_Map\n    --    Handler_Records                      (non-generic case only)\n    --    Generic_Homonym                      (generic case only)\n    --    Associated_Formal_Package\n@@ -5832,7 +5821,6 @@ package Einfo is\n    --  E_Procedure\n    --  E_Generic_Procedure\n    --    Associated_Node_For_Itype $$$ E_Procedure\n-   --    Renaming_Map\n    --    Handler_Records                      (non-generic case only)\n    --    Protected_Body_Subprogram\n    --    Next_Inlined_Subprogram"}, {"sha": "88f86f4b79ab3f60b4609c124a5b4953aa0c8580", "filename": "gcc/ada/exp_pakd.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fexp_pakd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fexp_pakd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_pakd.adb?ref=0c8ff35eb982a49882ed71b1b85e8436675adf88", "patch": "@@ -613,7 +613,7 @@ package body Exp_Pakd is\n          --  type or component, take it into account.\n \n          if Csize <= 2 or else Csize = 4 or else Csize mod 2 /= 0\n-           or else Alignment (Typ) = 1\n+           or else (Known_Alignment (Typ) and then Alignment (Typ) = 1)\n            or else Component_Alignment (Typ) = Calign_Storage_Unit\n          then\n             if Reverse_Storage_Order (Typ) then\n@@ -623,7 +623,7 @@ package body Exp_Pakd is\n             end if;\n \n          elsif Csize mod 4 /= 0\n-           or else Alignment (Typ) = 2\n+           or else (Known_Alignment (Typ) and then Alignment (Typ) = 2)\n          then\n             if Reverse_Storage_Order (Typ) then\n                PB_Type := RTE (RE_Rev_Packed_Bytes2);"}, {"sha": "4517c5943e3782db5ba3e079e807f79d90b43a27", "filename": "gcc/ada/fe.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Ffe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Ffe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffe.h?ref=0c8ff35eb982a49882ed71b1b85e8436675adf88", "patch": "@@ -636,6 +636,9 @@ B Known_Static_Normalized_Position_Max  (Entity_Id E);\n #define Known_Static_RM_Size einfo__utils__known_static_rm_size\n B Known_Static_RM_Size                  (Entity_Id E);\n \n+#define Copy_Alignment einfo__utils__copy_alignment\n+B Copy_Alignment(Entity_Id To, Entity_Id From);\n+\n #define Is_Discrete_Or_Fixed_Point_Type einfo__utils__is_discrete_or_fixed_point_type\n B Is_Discrete_Or_Fixed_Point_Type     (E Id);\n "}, {"sha": "84502d879e7f8ac2de9d5ee44ad11f24c4cc8ea8", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=0c8ff35eb982a49882ed71b1b85e8436675adf88", "patch": "@@ -3307,7 +3307,7 @@ package body Freeze is\n                   --  cases of types whose alignment exceeds their size (the\n                   --  padded type cases).\n \n-                  if Csiz /= 0 then\n+                  if Csiz /= 0 and then Known_Alignment (Ctyp) then\n                      declare\n                         A : constant Uint := Alignment_In_Bits (Ctyp);\n                      begin\n@@ -3478,9 +3478,12 @@ package body Freeze is\n          --  Processing that is done only for subtypes\n \n          else\n-            --  Acquire alignment from base type\n+            --  Acquire alignment from base type. Known_Alignment of the base\n+            --  type is False for Wide_String, for example.\n \n-            if not Known_Alignment (Arr) then\n+            if not Known_Alignment (Arr)\n+              and then Known_Alignment (Base_Type (Arr))\n+            then\n                Set_Alignment (Arr, Alignment (Base_Type (Arr)));\n                Adjust_Esize_Alignment (Arr);\n             end if;\n@@ -3642,7 +3645,8 @@ package body Freeze is\n             end if;\n \n             if not Has_Alignment_Clause (Arr) then\n-               Set_Alignment (Arr, Alignment (Packed_Array_Impl_Type (Arr)));\n+               Copy_Alignment\n+                 (To => Arr, From => Packed_Array_Impl_Type (Arr));\n             end if;\n          end if;\n "}, {"sha": "83ca31acba5cc0a21ce073fb787d629780eaa475", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=0c8ff35eb982a49882ed71b1b85e8436675adf88", "patch": "@@ -4417,9 +4417,13 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t      const bool derived_p = Is_Derived_Type (gnat_entity);\n \t      const Entity_Id gnat_parent\n \t\t= derived_p ? Etype (Base_Type (gnat_entity)) : Empty;\n+\t      /* The following test for Known_Alignment preserves the old behavior,\n+\t\t but is probably wrong. */\n \t      const unsigned int inherited_align\n \t\t= derived_p\n-\t\t  ? UI_To_Int (Alignment (gnat_parent)) * BITS_PER_UNIT\n+\t\t  ? (Known_Alignment (gnat_parent)\n+\t\t     ? UI_To_Int (Alignment (gnat_parent)) * BITS_PER_UNIT\n+\t\t     : 0)\n \t\t  : POINTER_SIZE;\n \t      const unsigned int align\n \t\t= MAX (TYPE_ALIGN (gnu_type), inherited_align);\n@@ -4724,7 +4728,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t   && Present (gnat_annotate_type))\n     {\n       if (!Known_Alignment (gnat_entity))\n-\tSet_Alignment (gnat_entity, Alignment (gnat_annotate_type));\n+\tCopy_Alignment (gnat_entity, gnat_annotate_type);\n       if (!Known_Esize (gnat_entity))\n \tSet_Esize (gnat_entity, Esize (gnat_annotate_type));\n       if (!Known_RM_Size (gnat_entity))"}, {"sha": "f61183de8091c6d2874d5d363545fa5799be7c2f", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=0c8ff35eb982a49882ed71b1b85e8436675adf88", "patch": "@@ -9274,7 +9274,7 @@ process_freeze_entity (Node_Id gnat_node)\n \n       /* Propagate back-annotations from full view to partial view.  */\n       if (!Known_Alignment (gnat_entity))\n-\tSet_Alignment (gnat_entity, Alignment (full_view));\n+\tCopy_Alignment (gnat_entity, full_view);\n \n       if (!Known_Esize (gnat_entity))\n \tSet_Esize (gnat_entity, Esize (full_view));"}, {"sha": "0a3046eb52032048a73729a2770978d78f43ddd7", "filename": "gcc/ada/gen_il-fields.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fgen_il-fields.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fgen_il-fields.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-fields.ads?ref=0c8ff35eb982a49882ed71b1b85e8436675adf88", "patch": "@@ -868,7 +868,6 @@ package Gen_IL.Fields is\n       Relative_Deadline_Variable,\n       Renamed_In_Spec,\n       Renamed_Or_Alias, -- Shared among Alias, Renamed_Entity, Renamed_Object\n-      Renaming_Map,\n       Requires_Overriding,\n       Return_Applies_To,\n       Return_Present,"}, {"sha": "41dd2327332a7fab80dbd19287f2a8d57ba22aaa", "filename": "gcc/ada/gen_il-gen-gen_entities.adb", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fgen_il-gen-gen_entities.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fgen_il-gen-gen_entities.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-gen-gen_entities.adb?ref=0c8ff35eb982a49882ed71b1b85e8436675adf88", "patch": "@@ -246,7 +246,7 @@ begin -- Gen_IL.Gen.Gen_Entities\n        --  dummy type for the return type of a procedure (the reason we create\n        --  this type is to share the circuits for performing overload\n        --  resolution on calls).\n-       (Sm (Alignment, Uint),\n+       (Sm (Alignment, Unat),\n         Sm (Contract, Node_Id),\n         Sm (Is_Elaboration_Warnings_OK_Id, Flag),\n         Sm (Original_Record_Component, Node_Id),\n@@ -272,7 +272,7 @@ begin -- Gen_IL.Gen.Gen_Entities\n         Sm (Debug_Renaming_Link, Node_Id),\n         Sm (Discriminal_Link, Node_Id),\n         Sm (Discriminant_Default_Value, Node_Id),\n-        Sm (Discriminant_Number, Uint),\n+        Sm (Discriminant_Number, Upos),\n         Sm (Enclosing_Scope, Node_Id),\n         Sm (Entry_Bodies_Array, Node_Id,\n             Pre => \"Has_Entries (N)\"),\n@@ -293,7 +293,6 @@ begin -- Gen_IL.Gen.Gen_Entities\n         Sm (Last_Entity, Node_Id),\n         Sm (Next_Inlined_Subprogram, Node_Id),\n         Sm (Renamed_Or_Alias, Node_Id), -- See Einfo.Utils\n-        Sm (Renaming_Map, Uint),\n         Sm (Return_Applies_To, Node_Id),\n         Sm (Scalar_Range, Node_Id),\n         Sm (Scale_Value, Uint),\n@@ -334,7 +333,7 @@ begin -- Gen_IL.Gen.Gen_Entities\n \n    Ab (Allocatable_Kind, Object_Kind,\n        (Sm (Activation_Record_Component, Node_Id),\n-        Sm (Alignment, Uint),\n+        Sm (Alignment, Unat),\n         Sm (Esize, Uint),\n         Sm (Interface_Name, Node_Id),\n         Sm (Is_Finalized_Transient, Flag),\n@@ -374,7 +373,7 @@ begin -- Gen_IL.Gen.Gen_Entities\n         Sm (CR_Discriminant, Node_Id),\n         Sm (Discriminal, Node_Id),\n         Sm (Discriminant_Default_Value, Node_Id),\n-        Sm (Discriminant_Number, Uint),\n+        Sm (Discriminant_Number, Upos),\n         Sm (Is_Completely_Hidden, Flag)));\n \n    Cc (E_Loop_Parameter, Allocatable_Kind);\n@@ -400,7 +399,7 @@ begin -- Gen_IL.Gen.Gen_Entities\n        --  Formal parameters are also objects\n        (Sm (Activation_Record_Component, Node_Id),\n         Sm (Actual_Subtype, Node_Id),\n-        Sm (Alignment, Uint),\n+        Sm (Alignment, Unat),\n         Sm (Default_Expr_Function, Node_Id),\n         Sm (Default_Value, Node_Id),\n         Sm (Entry_Component, Node_Id),\n@@ -456,7 +455,7 @@ begin -- Gen_IL.Gen.Gen_Entities\n    --  Named numbers created by a number declaration with a real value\n \n    Ab (Type_Kind, Void_Or_Type_Kind,\n-       (Sm (Alignment, Uint),\n+       (Sm (Alignment, Unat),\n         Sm (Associated_Node_For_Itype, Node_Id),\n         Sm (Can_Use_Internal_Rep, Flag, Base_Type_Only,\n             Pre => \"Ekind (Base_Type (N)) in Access_Subprogram_Kind\"),\n@@ -745,7 +744,7 @@ begin -- Gen_IL.Gen.Gen_Entities\n    Cc (E_String_Literal_Subtype, Array_Kind,\n        --  A special string subtype, used only to describe the type of a string\n        --  literal (will always be one dimensional, with literal bounds).\n-       (Sm (String_Literal_Length, Uint),\n+       (Sm (String_Literal_Length, Unat),\n         Sm (String_Literal_Low_Bound, Node_Id)));\n \n    Ab (Class_Wide_Kind, Aggregate_Kind,\n@@ -970,11 +969,11 @@ begin -- Gen_IL.Gen.Gen_Entities\n    Cc (E_Enumeration_Literal, Overloadable_Kind,\n        --  An enumeration literal, created by the use of the literal in an\n        --  enumeration type definition.\n-       (Sm (Enumeration_Pos, Uint),\n-        Sm (Enumeration_Rep, Uint),\n+       (Sm (Enumeration_Pos, Unat),\n+        Sm (Enumeration_Rep, Valid_Uint),\n         Sm (Enumeration_Rep_Expr, Node_Id),\n         Sm (Esize, Uint),\n-        Sm (Alignment, Uint),\n+        Sm (Alignment, Unat),\n         Sm (Interface_Name, Node_Id)));\n \n    Ab (Subprogram_Kind, Overloadable_Kind,\n@@ -1039,7 +1038,6 @@ begin -- Gen_IL.Gen.Gen_Entities\n         Sm (Protected_Subprogram, Node_Id),\n         Sm (Protection_Object, Node_Id),\n         Sm (Related_Expression, Node_Id),\n-        Sm (Renaming_Map, Uint),\n         Sm (Rewritten_For_C, Flag),\n         Sm (Thunk_Entity, Node_Id,\n             Pre => \"Is_Thunk (N)\"),\n@@ -1089,7 +1087,6 @@ begin -- Gen_IL.Gen.Gen_Entities\n         Sm (Protected_Subprogram, Node_Id),\n         Sm (Protection_Object, Node_Id),\n         Sm (Receiving_Entry, Node_Id),\n-        Sm (Renaming_Map, Uint),\n         Sm (Static_Initialization, Node_Id,\n             Pre => \"not Is_Dispatching_Operation (N)\"),\n         Sm (Thunk_Entity, Node_Id,\n@@ -1184,7 +1181,7 @@ begin -- Gen_IL.Gen.Gen_Entities\n        --  An exception created by an exception declaration. The exception\n        --  itself uses E_Exception for the Ekind, the implicit type that is\n        --  created to represent its type uses the Ekind E_Exception_Type.\n-       (Sm (Alignment, Uint),\n+       (Sm (Alignment, Unat),\n         Sm (Esize, Uint),\n         Sm (Interface_Name, Node_Id),\n         Sm (Is_Raised, Flag),\n@@ -1204,7 +1201,6 @@ begin -- Gen_IL.Gen.Gen_Entities\n         Sm (Is_Elaboration_Warnings_OK_Id, Flag),\n         Sm (Last_Entity, Node_Id),\n         Sm (Renamed_Or_Alias, Node_Id),\n-        Sm (Renaming_Map, Uint),\n         Sm (Scope_Depth_Value, Uint),\n         Sm (SPARK_Pragma, Node_Id),\n         Sm (SPARK_Pragma_Inherited, Flag)));\n@@ -1299,7 +1295,6 @@ begin -- Gen_IL.Gen.Gen_Entities\n         Sm (Related_Instance, Node_Id),\n         Sm (Renamed_In_Spec, Flag),\n         Sm (Renamed_Or_Alias, Node_Id),\n-        Sm (Renaming_Map, Uint),\n         Sm (Scope_Depth_Value, Uint),\n         Sm (SPARK_Aux_Pragma, Node_Id),\n         Sm (SPARK_Aux_Pragma_Inherited, Flag),"}, {"sha": "55ba71d7efb13e2a20a5ed927d39675926795eeb", "filename": "gcc/ada/gen_il-gen-gen_nodes.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fgen_il-gen-gen_nodes.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fgen_il-gen-gen_nodes.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-gen-gen_nodes.adb?ref=0c8ff35eb982a49882ed71b1b85e8436675adf88", "patch": "@@ -193,7 +193,7 @@ begin -- Gen_IL.Gen.Gen_Nodes\n \n    Cc (N_Character_Literal, N_Direct_Name,\n        (Sy (Chars, Name_Id, Default_No_Name),\n-        Sy (Char_Literal_Value, Uint)));\n+        Sy (Char_Literal_Value, Unat)));\n \n    Ab (N_Op, N_Has_Entity,\n        (Sm (Do_Overflow_Check, Flag),\n@@ -412,26 +412,26 @@ begin -- Gen_IL.Gen.Gen_Nodes\n \n    Cc (N_Raise_Constraint_Error, N_Raise_xxx_Error,\n        (Sy (Condition, Node_Id, Default_Empty),\n-        Sy (Reason, Uint)));\n+        Sy (Reason, Unat)));\n \n    Cc (N_Raise_Program_Error, N_Raise_xxx_Error,\n        (Sy (Condition, Node_Id, Default_Empty),\n-        Sy (Reason, Uint)));\n+        Sy (Reason, Unat)));\n \n    Cc (N_Raise_Storage_Error, N_Raise_xxx_Error,\n        (Sy (Condition, Node_Id, Default_Empty),\n-        Sy (Reason, Uint)));\n+        Sy (Reason, Unat)));\n \n    Ab (N_Numeric_Or_String_Literal, N_Subexpr);\n \n    Cc (N_Integer_Literal, N_Numeric_Or_String_Literal,\n-       (Sy (Intval, Uint),\n+       (Sy (Intval, Valid_Uint),\n         Sm (Original_Entity, Node_Id),\n         Sm (Print_In_Hex, Flag)));\n \n    Cc (N_Real_Literal, N_Numeric_Or_String_Literal,\n        (Sy (Realval, Ureal),\n-        Sm (Corresponding_Integer_Value, Uint),\n+        Sm (Corresponding_Integer_Value, Valid_Uint),\n         Sm (Is_Machine_Number, Flag),\n         Sm (Original_Entity, Node_Id)));\n "}, {"sha": "a9c7bd7cfff9de062a41ae387b35cca1836fbf87", "filename": "gcc/ada/gen_il-gen.adb", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fgen_il-gen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fgen_il-gen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-gen.adb?ref=0c8ff35eb982a49882ed71b1b85e8436675adf88", "patch": "@@ -849,6 +849,7 @@ package body Gen_IL.Gen is\n              | Name_Id\n              | String_Id\n              | Uint\n+             | Uint_Subtype\n              | Ureal\n              | Source_Ptr\n              | Union_Id\n@@ -1562,22 +1563,25 @@ package body Gen_IL.Gen is\n         (S : in out Sink; T : Type_Enum)\n       is\n       begin\n-         --  Special case for types that have defaults; instantiate\n-         --  Get_32_Bit_Field_With_Default and pass in the Default_Val.\n+         --  Special case for subtypes of Uint that have predicates. Use\n+         --  Get_Valid_32_Bit_Field in that case.\n \n-         if T in Elist_Id | Uint then\n+         if T in Uint_Subtype then\n             pragma Assert (Field_Size (T) = 32);\n+            Put (S, LF & \"function \" & Low_Level_Getter_Name (T) &\n+                 \" is new Get_Valid_32_Bit_Field (\" &\n+                 Get_Set_Id_Image (T) &\n+                 \") with \" & Inline & \";\" & LF);\n \n-            declare\n-               Default_Val : constant String :=\n-                 (if T = Elist_Id then \"No_Elist\" else \"Uint_0\");\n+         --  Special case for types that have special defaults; instantiate\n+         --  Get_32_Bit_Field_With_Default and pass in the Default_Val.\n \n-            begin\n-               Put (S, LF & \"function \" & Low_Level_Getter_Name (T) &\n-                    \" is new Get_32_Bit_Field_With_Default (\" &\n-                    Get_Set_Id_Image (T) & \", \" & Default_Val &\n-                    \") with \" & Inline & \";\" & LF);\n-            end;\n+         elsif Field_Has_Special_Default (T) then\n+            pragma Assert (Field_Size (T) = 32);\n+            Put (S, LF & \"function \" & Low_Level_Getter_Name (T) &\n+                 \" is new Get_32_Bit_Field_With_Default (\" &\n+                 Get_Set_Id_Image (T) & \", \" & Special_Default (T) &\n+                 \") with \" & Inline & \";\" & LF);\n \n          --  Otherwise, instantiate the normal getter for the right size in\n          --  bits.\n@@ -1588,16 +1592,16 @@ package body Gen_IL.Gen is\n                  Get_Set_Id_Image (T) & \") with \" & Inline & \";\" & LF);\n          end if;\n \n-         --  No special case for the setter\n-\n          if T in Node_Kind_Type | Entity_Kind_Type then\n             Put (S, \"pragma Warnings (Off);\" & LF);\n             --  Set_Node_Kind_Type and Set_Entity_Kind_Type might not be called\n          end if;\n \n+         --  No special cases for the setter\n+\n          Put (S, \"procedure \" & Low_Level_Setter_Name (T) & \" is new Set_\" &\n-              Image (Field_Size (T)) & \"_Bit_Field (\" & Get_Set_Id_Image (T) &\n-              \") with \" & Inline & \";\" & LF);\n+                 Image (Field_Size (T)) & \"_Bit_Field (\" & Get_Set_Id_Image (T) &\n+                 \") with \" & Inline & \";\" & LF);\n \n          if T in Node_Kind_Type | Entity_Kind_Type then\n             Put (S, \"pragma Warnings (On);\" & LF);\n@@ -1689,11 +1693,9 @@ package body Gen_IL.Gen is\n \n       procedure Put_Getter_Spec (S : in out Sink; F : Field_Enum) is\n       begin\n-         Put (S, \"function \" & Image (F) & LF);\n-         Increase_Indent (S, 2);\n-         Put (S, \"(N : \" & N_Type (F) & \") return \" &\n+         Put (S, \"function \" & Image (F));\n+         Put (S, \" (N : \" & N_Type (F) & \") return \" &\n               Get_Set_Id_Image (Field_Table (F).Field_Type));\n-         Decrease_Indent (S, 2);\n       end Put_Getter_Spec;\n \n       ---------------------\n@@ -1757,11 +1759,9 @@ package body Gen_IL.Gen is\n          Default : constant String :=\n            (if Rec.Field_Type = Flag then \" := True\" else \"\");\n       begin\n-         Put (S, \"procedure Set_\" & Image (F) & LF);\n-         Increase_Indent (S, 2);\n-         Put (S, \"(N : \" & N_Type (F) & \"; Val : \" &\n+         Put (S, \"procedure Set_\" & Image (F));\n+         Put (S, \" (N : \" & N_Type (F) & \"; Val : \" &\n               Get_Set_Id_Image (Rec.Field_Type) & Default & \")\");\n-         Decrease_Indent (S, 2);\n       end Put_Setter_Spec;\n \n       ---------------------\n@@ -2776,7 +2776,8 @@ package body Gen_IL.Gen is\n \n          Put (S, \"--  This package is not used by the compiler.\" & LF);\n          Put (S, \"--  The body contains tables that are intended to be used by humans to\" & LF);\n-         Put (S, \"--  help understand the layout of various data structures.\" & LF & LF);\n+         Put (S, \"--  help understand the layout of various data structures.\" & LF);\n+         Put (S, \"--  Search for \"\"--\"\" to find major sections of code.\" & LF & LF);\n \n          Put (S, \"pragma Elaborate_Body;\" & LF);\n \n@@ -3001,20 +3002,19 @@ package body Gen_IL.Gen is\n \n          Increase_Indent (S, 3);\n \n-         --  Same special case as in Put_Low_Level_Accessor_Instantiations\n+         --  Same special cases for getters as in\n+         --  Put_Low_Level_Accessor_Instantiations.\n \n-         if T in Elist_Id | Uint then\n+         if T in Uint_Subtype then\n             pragma Assert (Field_Size (T) = 32);\n+            Put (S, \"{ return (\" & T_Image &\n+                 \") Get_Valid_32_Bit_Field(N, Offset); }\" & LF & LF);\n \n-            declare\n-               Default_Val : constant String :=\n-                 (if T = Elist_Id then \"No_Elist\" else \"Uint_0\");\n-\n-            begin\n-               Put (S, \"{ return (\" & T_Image &\n-                    \") Get_32_Bit_Field_With_Default(N, Offset, \" &\n-                    Default_Val & \"); }\" & LF & LF);\n-            end;\n+         elsif Field_Has_Special_Default (T) then\n+            pragma Assert (Field_Size (T) = 32);\n+            Put (S, \"{ return (\" & T_Image &\n+                 \") Get_32_Bit_Field_With_Default(N, Offset, \" &\n+                 Special_Default (T) & \"); }\" & LF & LF);\n \n          else\n             Put (S, \"{ return (\" & T_Image & \") Get_\" &"}, {"sha": "ae448de0e7c6a17fc6ed456fba0509a97cdb1129", "filename": "gcc/ada/gen_il-internals.ads", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fgen_il-internals.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fgen_il-internals.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-internals.ads?ref=0c8ff35eb982a49882ed71b1b85e8436675adf88", "patch": "@@ -174,6 +174,27 @@ package Gen_IL.Internals is\n    --  Table mapping from enumeration literals representing fields to\n    --  information about the field.\n \n+   --  Getters for fields of types Elist_Id and Uint need special treatment of\n+   --  defaults. In particular, if the field has its initial 0 value, getters\n+   --  need to return the appropriate default value. Note that these defaults\n+   --  have nothing to do with the defaults mentioned above for Nmake\n+   --  functions.\n+\n+   function Field_Has_Special_Default\n+     (Field_Type : Type_Enum) return Boolean is\n+      (Field_Type in Elist_Id | Uint);\n+   --  These are the field types that have a default value that is not\n+   --  represented as zero.\n+\n+   function Special_Default\n+     (Field_Type : Type_Enum) return String is\n+      (if Field_Type = Elist_Id then \"No_Elist\" else \"Uint_0\");\n+\n+   function Invalid_Val\n+     (Field_Type : Uint_Subtype) return String is\n+      (\"No_Uint\");\n+   --  We could generalize this to other than Uint at some point\n+\n    ----------------\n \n    subtype Node_Field is"}, {"sha": "321eec6504c635394f5f2fc90a407237fc731bf0", "filename": "gcc/ada/gen_il-types.ads", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fgen_il-types.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fgen_il-types.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-types.ads?ref=0c8ff35eb982a49882ed71b1b85e8436675adf88", "patch": "@@ -55,6 +55,10 @@ package Gen_IL.Types is\n       Name_Id,\n       String_Id,\n       Uint,\n+      Valid_Uint,\n+      Unat,\n+      Upos,\n+      Nonzero_Uint,\n       Ureal,\n \n       Node_Kind_Type, -- Type of result of Nkind function, i.e. Node_Kind\n@@ -562,14 +566,17 @@ package Gen_IL.Types is\n       | N_Defining_Operator_Symbol;\n \n    subtype Opt_Abstract_Type is Opt_Type_Enum with\n-        Predicate => Opt_Abstract_Type = No_Type or\n-        Opt_Abstract_Type in Abstract_Type;\n+     Predicate => Opt_Abstract_Type = No_Type or\n+       Opt_Abstract_Type in Abstract_Type;\n \n    subtype Type_Boundaries is Type_Enum with\n-        Predicate => Type_Boundaries in\n-          Between_Abstract_Node_And_Abstract_Entity_Types |\n-          Between_Abstract_Entity_And_Concrete_Node_Types |\n-          Between_Concrete_Node_And_Concrete_Entity_Types;\n+     Predicate => Type_Boundaries in\n+       Between_Abstract_Node_And_Abstract_Entity_Types |\n+       Between_Abstract_Entity_And_Concrete_Node_Types |\n+       Between_Concrete_Node_And_Concrete_Entity_Types;\n    --  These are not used, other than to separate the various subranges.\n \n+   subtype Uint_Subtype is Type_Enum with\n+     Predicate => Uint_Subtype in Valid_Uint | Unat | Upos | Nonzero_Uint;\n+\n end Gen_IL.Types;"}, {"sha": "e69386c81faf93e9571e0245702ea9415936b7ce", "filename": "gcc/ada/layout.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Flayout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Flayout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flayout.adb?ref=0c8ff35eb982a49882ed71b1b85e8436675adf88", "patch": "@@ -433,7 +433,7 @@ package body Layout is\n                   Set_RM_Size   (E, RM_Size   (PAT));\n                end if;\n \n-               if not Known_Alignment (E) then\n+               if not Known_Alignment (E) and then Known_Alignment (PAT) then\n                   Set_Alignment (E, Alignment (PAT));\n                end if;\n             end;"}, {"sha": "148de536f96cc0f2011dfef8c588ce5558e0372b", "filename": "gcc/ada/repinfo.adb", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Frepinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Frepinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.adb?ref=0c8ff35eb982a49882ed71b1b85e8436675adf88", "patch": "@@ -410,15 +410,23 @@ package body Repinfo is\n          end if;\n       end if;\n \n-      if List_Representation_Info_To_JSON then\n-         Write_Str (\"  \"\"Alignment\"\": \");\n-         Write_Val (Alignment (Ent));\n+      if Known_Alignment (Ent) then\n+         if List_Representation_Info_To_JSON then\n+            Write_Str (\"  \"\"Alignment\"\": \");\n+            Write_Val (Alignment (Ent));\n+         else\n+            Write_Str (\"for \");\n+            List_Name (Ent);\n+            Write_Str (\"'Alignment use \");\n+            Write_Val (Alignment (Ent));\n+            Write_Line (\";\");\n+         end if;\n+\n+      --  Alignment is not always set for task and protected types\n+\n       else\n-         Write_Str (\"for \");\n-         List_Name (Ent);\n-         Write_Str (\"'Alignment use \");\n-         Write_Val (Alignment (Ent));\n-         Write_Line (\";\");\n+         pragma Assert\n+           (Is_Concurrent_Type (Ent) or else Is_Class_Wide_Type (Ent));\n       end if;\n    end List_Common_Type_Info;\n "}, {"sha": "5cbae5adb801b1e56a15ec2e6ace0b7390aaf664", "filename": "gcc/ada/scans.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fscans.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fscans.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscans.ads?ref=0c8ff35eb982a49882ed71b1b85e8436675adf88", "patch": "@@ -441,12 +441,12 @@ package Scans is\n    --  scanned literal.\n \n    Real_Literal_Value : Ureal;\n-   --  Valid only when Token is Tok_Real_Literal, contains the value of the\n+   --  Valid only when Token is Tok_Real_Literal. Contains the value of the\n    --  scanned literal.\n \n    Int_Literal_Value : Uint;\n-   --  Valid only when Token = Tok_Integer_Literal, contains the value of the\n-   --  scanned literal.\n+   --  Valid only when Token = Tok_Integer_Literal, and we are not in\n+   --  syntax-only mode. Contains the value of the scanned literal.\n \n    Based_Literal_Uses_Colon : Boolean;\n    --  Valid only when Token = Tok_Integer_Literal or Tok_Real_Literal. Set"}, {"sha": "ad5327911957d04e3a03ed87fbca4bca0bf1dfb3", "filename": "gcc/ada/scn.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fscn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fscn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscn.adb?ref=0c8ff35eb982a49882ed71b1b85e8436675adf88", "patch": "@@ -155,7 +155,14 @@ package body Scn is\n \n          when Tok_Integer_Literal =>\n             Token_Node := New_Node (N_Integer_Literal, Token_Ptr);\n-            Set_Intval (Token_Node, Int_Literal_Value);\n+\n+            --  Int_Literal_Value can be No_Uint in some cases in syntax-only\n+            --  mode (see Scng.Scan.Nlit).\n+\n+            if Int_Literal_Value /= No_Uint then\n+               Set_Intval (Token_Node, Int_Literal_Value);\n+            end if;\n+\n             Check_Obsolete_Base_Char;\n \n          when Tok_String_Literal =>"}, {"sha": "76859c5463fb0ac2e33e6608fbe3a1a927ec3680", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=0c8ff35eb982a49882ed71b1b85e8436675adf88", "patch": "@@ -8101,10 +8101,12 @@ package body Sem_Ch13 is\n             elsif Val < Lo or else Hi < Val then\n                Error_Msg_N (\"value outside permitted range\", Expr);\n                Err := True;\n+\n+            else\n+               Set_Enumeration_Rep (Elit, Val);\n+               Set_Enumeration_Rep_Expr (Elit, Expr);\n             end if;\n \n-            Set_Enumeration_Rep (Elit, Val);\n-            Set_Enumeration_Rep_Expr (Elit, Expr);\n             Next (Expr);\n             Next (Elit);\n          end loop;\n@@ -8178,9 +8180,10 @@ package body Sem_Ch13 is\n                         elsif Val < Lo or else Hi < Val then\n                            Error_Msg_N (\"value outside permitted range\", Expr);\n                            Err := True;\n-                        end if;\n \n-                        Set_Enumeration_Rep (Elit, Val);\n+                        else\n+                           Set_Enumeration_Rep (Elit, Val);\n+                        end if;\n                      end if;\n                   end if;\n                end if;\n@@ -8274,9 +8277,10 @@ package body Sem_Ch13 is\n                Set_Enum_Esize (Enumtype);\n             end if;\n \n-            Set_RM_Size   (Base_Type (Enumtype), RM_Size   (Enumtype));\n-            Set_Esize     (Base_Type (Enumtype), Esize     (Enumtype));\n-            Set_Alignment (Base_Type (Enumtype), Alignment (Enumtype));\n+            Set_RM_Size (Base_Type (Enumtype), RM_Size   (Enumtype));\n+            Set_Esize   (Base_Type (Enumtype), Esize     (Enumtype));\n+\n+            Copy_Alignment (To => Base_Type (Enumtype), From => Enumtype);\n          end;\n       end if;\n \n@@ -16299,9 +16303,13 @@ package body Sem_Ch13 is\n             X_Offs : Uint;\n \n          begin\n-            --  Skip processing of this entry if warning already posted\n+            --  Skip processing of this entry if warning already posted, or if\n+            --  alignments are not set.\n \n-            if not Address_Warning_Posted (ACCR.N) then\n+            if not Address_Warning_Posted (ACCR.N)\n+              and then Known_Alignment (ACCR.X)\n+              and then Known_Alignment (ACCR.Y)\n+            then\n                Expr := Original_Node (Expression (ACCR.N));\n \n                --  Get alignments, sizes and offset, if any"}, {"sha": "0ff4e49e5b9496cb93624f70f6e4b4a57ae50e81", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=0c8ff35eb982a49882ed71b1b85e8436675adf88", "patch": "@@ -7562,7 +7562,7 @@ package body Sem_Prag is\n             end if;\n \n             if not Has_Alignment_Clause (Ent) then\n-               Set_Alignment (Ent, Uint_0);\n+               Init_Alignment (Ent);\n             end if;\n          end Set_Atomic_VFA;\n "}, {"sha": "01a4e2bc8af494ff57dc1ad32680558e610a48e7", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=0c8ff35eb982a49882ed71b1b85e8436675adf88", "patch": "@@ -12079,7 +12079,7 @@ package body Sem_Util is\n       --  do it when there is an address clause since we can do more if the\n       --  alignment is known.\n \n-      if not Known_Alignment (Obj) then\n+      if not Known_Alignment (Obj) and then Known_Alignment (Etype (Obj)) then\n          Set_Alignment (Obj, Alignment (Etype (Obj)));\n       end if;\n \n@@ -28366,7 +28366,7 @@ package body Sem_Util is\n          Set_Is_Unsigned_Type       (T1, Is_Unsigned_Type          (T2));\n       end if;\n \n-      Set_Alignment                 (T1, Alignment                 (T2));\n+      Copy_Alignment (To => T1, From => T2);\n    end Set_Size_Info;\n \n    ------------------------------"}, {"sha": "20a61251a9d6c3656cdcbc19ed15189c62211fcf", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=0c8ff35eb982a49882ed71b1b85e8436675adf88", "patch": "@@ -2177,12 +2177,12 @@ package Sinfo is\n    --    Present in an N_Variant node. This has a meaningful value only after\n    --    Gigi has back annotated the tree with representation information. At\n    --    this point, it contains a reference to a gcc expression that depends\n-   --    on the values of one or more discriminants. Give a set of discriminant\n-   --    values, this expression evaluates to False (zero) if variant is not\n-   --    present, and True (non-zero) if it is present. See unit Repinfo for\n-   --    further details on gigi back annotation. This field is used during\n-   --    back-annotation processing (for -gnatR -gnatc) to determine if a field\n-   --    is present or not.\n+   --    on the values of one or more discriminants. Given a set of\n+   --    discriminant values, this expression evaluates to False (zero) if\n+   --    variant is not present, and True (non-zero) if it is present. See\n+   --    unit Repinfo for further details on gigi back annotation. This field\n+   --    is used during back-annotation processing (for -gnatR -gnatc) to\n+   --    determine if a field is present or not.\n \n    --  Prev_Use_Clause\n    --    Present in both N_Use_Package_Clause and N_Use_Type_Clause. Used in"}, {"sha": "054d06ca76f6bd657ce99d2d73713601ca0b311f", "filename": "gcc/ada/treepr.adb", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Ftreepr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Ftreepr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftreepr.adb?ref=0c8ff35eb982a49882ed71b1b85e8436675adf88", "patch": "@@ -721,6 +721,12 @@ package body Treepr is\n    function Get_Uint is new Get_32_Bit_Field_With_Default\n      (Uint, Uint_0) with Inline;\n \n+   function Get_Valid_Uint is new Get_32_Bit_Field\n+     (Uint) with Inline;\n+   --  Used for both Valid_Uint and other subtypes of Uint. Note that we don't\n+   --  instantiate Get_Valid_32_Bit_Field; we don't want to blow up if the\n+   --  value is wrong.\n+\n    function Get_Ureal is new Get_32_Bit_Field\n      (Ureal) with Inline;\n \n@@ -893,13 +899,36 @@ package body Treepr is\n                Val : constant Uint := Get_Uint (N, FD.Offset);\n                function Cast is new Unchecked_Conversion (Uint, Int);\n             begin\n-               if Val /= No_Uint then\n-                  Print_Initial;\n-                  UI_Write (Val, Format);\n-                  Write_Str (\" (Uint = \");\n-                  Write_Int (Cast (Val));\n-                  Write_Char (')');\n-               end if;\n+               --  Do this even if Val = No_Uint, because Uint fields default\n+               --  to Uint_0.\n+\n+               Print_Initial;\n+               UI_Write (Val, Format);\n+               Write_Str (\" (Uint = \");\n+               Write_Int (Cast (Val));\n+               Write_Char (')');\n+            end;\n+\n+         when Valid_Uint_Field | Unat_Field | Upos_Field\n+            | Nonzero_Uint_Field =>\n+            declare\n+               Val : constant Uint := Get_Valid_Uint (N, FD.Offset);\n+               function Cast is new Unchecked_Conversion (Uint, Int);\n+            begin\n+               Print_Initial;\n+               UI_Write (Val, Format);\n+\n+               case FD.Kind is\n+                  when Valid_Uint_Field => Write_Str (\" v\");\n+                  when Unat_Field => Write_Str (\" n\");\n+                  when Upos_Field => Write_Str (\" p\");\n+                  when Nonzero_Uint_Field => Write_Str (\" nz\");\n+                  when others => raise Program_Error;\n+               end case;\n+\n+               Write_Str (\" (Uint = \");\n+               Write_Int (Cast (Val));\n+               Write_Char (')');\n             end;\n \n          when Ureal_Field =>"}, {"sha": "2806e50ddd7785713a9d245e4f43b23482b98a8f", "filename": "gcc/ada/types.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.h?ref=0c8ff35eb982a49882ed71b1b85e8436675adf88", "patch": "@@ -261,6 +261,10 @@ typedef Int String_Id;\n \n /* Type used for representation of universal integers.  */\n typedef Int Uint;\n+typedef Int Valid_Uint;\n+typedef Int Unat;\n+typedef Int Upos;\n+typedef Int Nonzero_Uint;\n \n /* Used to indicate missing Uint value.  */\n #define No_Uint Uint_Low_Bound"}, {"sha": "b2f2315effe2b9b06a21e7abae7070f1aaa21b93", "filename": "gcc/ada/uintp.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fuintp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8ff35eb982a49882ed71b1b85e8436675adf88/gcc%2Fada%2Fuintp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fuintp.ads?ref=0c8ff35eb982a49882ed71b1b85e8436675adf88", "patch": "@@ -90,6 +90,11 @@ package Uintp is\n    Uint_Minus_127 : constant Uint;\n    Uint_Minus_128 : constant Uint;\n \n+   subtype Valid_Uint is Uint with Predicate => Valid_Uint /= No_Uint;\n+   subtype Unat is Valid_Uint with Predicate => Unat >= Uint_0;\n+   subtype Upos is Valid_Uint with Predicate => Upos >= Uint_0;\n+   subtype Nonzero_Uint is Valid_Uint with Predicate => Nonzero_Uint /= Uint_0;\n+\n    type UI_Vector is array (Pos range <>) of Int;\n    --  Vector containing the integer values of a Uint value\n "}]}