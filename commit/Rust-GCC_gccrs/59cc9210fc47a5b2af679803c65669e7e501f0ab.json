{"sha": "59cc9210fc47a5b2af679803c65669e7e501f0ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTljYzkyMTBmYzQ3YTViMmFmNjc5ODAzYzY1NjY5ZTdlNTAxZjBhYg==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2010-05-28T23:15:55Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2010-05-28T23:15:55Z"}, "message": "c-common.h (GCC_DIAG_STYLE): Define earlier in the file, before including diagnostic-core.h.\n\ngcc/ChangeLog:\n\t* c-common.h (GCC_DIAG_STYLE): Define earlier in the file,\n\tbefore including diagnostic-core.h.\n\t(c_cpp_error): New prototype moved from c-tree.h.\n\tUse ATTRIBUTE_GCC_DIAG instead of ATTRIBUTE_GCC_CDIAG.\n\t* c-tree.h (ATTRIBUTE_GCC_CDIAG): Remove define.\n\t(pedwarn_c90, perwarn_c99): Use ATTRIBUTE_GCC_DIAG instead.\n\t(c_cpp_error): Prototype moved to c-common.h.\n\t* Makefile.in: Update dependency for C_COMMON_H.\n\ncp/ChangeLog:\n\t* cp-tree.h (ATTRIBUTE_GCC_CXXDIAG): Remove.  Require that\n\tthis file is included before c-common.h.  Define GCC_DIAG_STYLE\n\tbefore including diagnostic-core.h and toplev.h.\n\t(pedwarn_cxx98): Use ATTRIBUTE_GCC_DIAG.\n\t* pt.c: Include cp-tree.h before c-common.h.\n\nFrom-SVN: r160007", "tree": {"sha": "bbef9c35e3335826695cecc5a96f08d7e888cedd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbef9c35e3335826695cecc5a96f08d7e888cedd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59cc9210fc47a5b2af679803c65669e7e501f0ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59cc9210fc47a5b2af679803c65669e7e501f0ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59cc9210fc47a5b2af679803c65669e7e501f0ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59cc9210fc47a5b2af679803c65669e7e501f0ab/comments", "author": null, "committer": null, "parents": [{"sha": "bffad7f1cf127cbc4b103db2f30317e9f59422fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bffad7f1cf127cbc4b103db2f30317e9f59422fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bffad7f1cf127cbc4b103db2f30317e9f59422fd"}], "stats": {"total": 80, "additions": 44, "deletions": 36}, "files": [{"sha": "e87c7625f67fbb078e9707a4a8fcb07d6bcbece3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59cc9210fc47a5b2af679803c65669e7e501f0ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59cc9210fc47a5b2af679803c65669e7e501f0ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=59cc9210fc47a5b2af679803c65669e7e501f0ab", "patch": "@@ -1,3 +1,14 @@\n+2010-05-29  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* c-common.h (GCC_DIAG_STYLE): Define earlier in the file,\n+\tbefore including diagnostic-core.h.\n+\t(c_cpp_error): New prototype moved from c-tree.h.\n+\tUse ATTRIBUTE_GCC_DIAG instead of ATTRIBUTE_GCC_CDIAG.\n+\t* c-tree.h (ATTRIBUTE_GCC_CDIAG): Remove define.\n+\t(pedwarn_c90, perwarn_c99): Use ATTRIBUTE_GCC_DIAG instead.\n+\t(c_cpp_error): Prototype moved to c-common.h.\n+\t* Makefile.in: Update dependency for C_COMMON_H.\n+\n 2010-05-29  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* c-common.h: Add FIXME for awkward split of c_register_addr_space."}, {"sha": "83c1487c48bc79f54c0321440e7f083f362a644d", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59cc9210fc47a5b2af679803c65669e7e501f0ab/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59cc9210fc47a5b2af679803c65669e7e501f0ab/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=59cc9210fc47a5b2af679803c65669e7e501f0ab", "patch": "@@ -916,7 +916,7 @@ GGC_H = ggc.h gtype-desc.h statistics.h\n TIMEVAR_H = timevar.h timevar.def\n INSN_ATTR_H = insn-attr.h $(INSN_ADDR_H)\n INSN_ADDR_H = $(srcdir)/insn-addr.h vecprim.h\n-C_COMMON_H = c-common.h $(SPLAY_TREE_H) $(CPPLIB_H) $(GGC_H)\n+C_COMMON_H = c-common.h $(SPLAY_TREE_H) $(CPPLIB_H) $(GGC_H) $(DIAGNOSTIC_CORE_H)\n C_PRAGMA_H = c-pragma.h $(CPPLIB_H)\n C_TREE_H = c-tree.h $(C_COMMON_H) $(TOPLEV_H) $(DIAGNOSTIC_H)\n SYSTEM_H = system.h hwint.h $(srcdir)/../include/libiberty.h \\"}, {"sha": "f0541e927211f78ecd3c72a6eea7860ea473abd5", "filename": "gcc/c-common.h", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59cc9210fc47a5b2af679803c65669e7e501f0ab/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59cc9210fc47a5b2af679803c65669e7e501f0ab/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=59cc9210fc47a5b2af679803c65669e7e501f0ab", "patch": "@@ -26,6 +26,16 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cpplib.h\"\n #include \"ggc.h\"\n \n+/* In order for the format checking to accept the C frontend\n+   diagnostic framework extensions, you must include this file before\n+   toplev.h, not after.  The C front end formats are a subset of those\n+   for C++, so they are the appropriate set to use in common code;\n+   cp-tree.h overrides this for C++.  */\n+#ifndef GCC_DIAG_STYLE\n+#define GCC_DIAG_STYLE __gcc_cdiag__\n+#endif\n+#include \"diagnostic-core.h\"\n+\n /* Usage of TREE_LANG_FLAG_?:\n    0: TREE_NEGATED_INT (in INTEGER_CST).\n       IDENTIFIER_MARKED (used by search routines).\n@@ -999,6 +1009,9 @@ extern void init_c_lex (void);\n \n extern void c_cpp_builtins (cpp_reader *);\n extern void c_cpp_builtins_optimize_pragma (cpp_reader *, tree, tree);\n+extern bool c_cpp_error (cpp_reader *, int, int, location_t, unsigned int,\n+\t\t\t const char *, va_list *)\n+     ATTRIBUTE_GCC_DIAG(6,0);\n \n /* Positive if an implicit `extern \"C\"' scope has just been entered;\n    negative if such a scope has just been exited.  */\n@@ -1175,13 +1188,4 @@ extern bool c_omp_sharing_predetermined (tree);\n extern tree c_omp_remap_decl (tree, bool);\n extern void record_types_used_by_current_var_decl (tree);\n \n-/* In order for the format checking to accept the C frontend\n-   diagnostic framework extensions, you must include this file before\n-   toplev.h, not after.  The C front end formats are a subset of those\n-   for C++, so they are the appropriate set to use in common code;\n-   cp-tree.h overrides this for C++.  */\n-#ifndef GCC_DIAG_STYLE\n-#define GCC_DIAG_STYLE __gcc_cdiag__\n-#endif\n-\n #endif /* ! GCC_C_COMMON_H */"}, {"sha": "30b5274841ad2bf0b48083145e52d5bb65845266", "filename": "gcc/c-tree.h", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59cc9210fc47a5b2af679803c65669e7e501f0ab/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59cc9210fc47a5b2af679803c65669e7e501f0ab/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=59cc9210fc47a5b2af679803c65669e7e501f0ab", "patch": "@@ -601,20 +601,8 @@ extern bool c_override_global_bindings_to_false;\n extern void c_finish_incomplete_decl (tree);\n extern void c_write_global_declarations (void);\n \n-/* In order for the format checking to accept the C frontend\n-   diagnostic framework extensions, you must include this file before\n-   toplev.h, not after.  */\n-#if GCC_VERSION >= 4001\n-#define ATTRIBUTE_GCC_CDIAG(m, n) __attribute__ ((__format__ (GCC_DIAG_STYLE, m ,n))) ATTRIBUTE_NONNULL(m)\n-#else\n-#define ATTRIBUTE_GCC_CDIAG(m, n) ATTRIBUTE_NONNULL(m)\n-#endif\n-\n-extern void pedwarn_c90 (location_t, int opt, const char *, ...) ATTRIBUTE_GCC_CDIAG(3,4);\n-extern void pedwarn_c99 (location_t, int opt, const char *, ...) ATTRIBUTE_GCC_CDIAG(3,4);\n-\n-extern bool c_cpp_error (cpp_reader *, int, int, location_t, unsigned int,\n-\t\t\t const char *, va_list *)\n-     ATTRIBUTE_GCC_CDIAG(6,0);\n+/* In c-errors.c */\n+extern void pedwarn_c90 (location_t, int opt, const char *, ...) ATTRIBUTE_GCC_DIAG(3,4);\n+extern void pedwarn_c99 (location_t, int opt, const char *, ...) ATTRIBUTE_GCC_DIAG(3,4);\n \n #endif /* ! GCC_C_TREE_H */"}, {"sha": "7d69a6e0f8cb857a5e1c6016fdff48d94d423803", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59cc9210fc47a5b2af679803c65669e7e501f0ab/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59cc9210fc47a5b2af679803c65669e7e501f0ab/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=59cc9210fc47a5b2af679803c65669e7e501f0ab", "patch": "@@ -1,3 +1,11 @@\n+2010-05-29  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* cp-tree.h (ATTRIBUTE_GCC_CXXDIAG): Remove.  Require that\n+\tthis file is included before c-common.h.  Define GCC_DIAG_STYLE\n+\tbefore including diagnostic-core.h and toplev.h.\n+\t(pedwarn_cxx98): Use ATTRIBUTE_GCC_DIAG.\n+\t* pt.c: Include cp-tree.h before c-common.h.\n+\n 2010-05-29  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* tree.c (c_register_addr_space): Add stub."}, {"sha": "15c0042a1b92cdfd1ba077a1528eb2035dc8fa70", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59cc9210fc47a5b2af679803c65669e7e501f0ab/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59cc9210fc47a5b2af679803c65669e7e501f0ab/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=59cc9210fc47a5b2af679803c65669e7e501f0ab", "patch": "@@ -27,27 +27,24 @@ along with GCC; see the file COPYING3.  If not see\n #include \"function.h\"\n #include \"hashtab.h\"\n #include \"vec.h\"\n-#include \"c-common.h\"\n-#include \"name-lookup.h\"\n \n /* In order for the format checking to accept the C++ front end\n    diagnostic framework extensions, you must include this file before\n    toplev.h, not after.  We override the definition of GCC_DIAG_STYLE\n    in c-common.h.  */\n #undef GCC_DIAG_STYLE\n #define GCC_DIAG_STYLE __gcc_cxxdiag__\n-#if GCC_VERSION >= 4001\n-#define ATTRIBUTE_GCC_CXXDIAG(m, n) __attribute__ ((__format__ (GCC_DIAG_STYLE, m, n))) ATTRIBUTE_NONNULL(m)\n-#else\n-#define ATTRIBUTE_GCC_CXXDIAG(m, n) ATTRIBUTE_NONNULL(m)\n-#endif\n-#ifdef GCC_TOPLEV_H\n+#if defined(GCC_TOPLEV_H) || defined (GCC_C_COMMON_H)\n #error \\\n In order for the format checking to accept the C++ front end diagnostic \\\n-framework extensions, you must include this file before toplev.h, not after.\n+framework extensions, you must include this file before toplev.h and \\\n+c-common.h, not after.\n #endif\n #include \"toplev.h\"\n #include \"diagnostic.h\"\n+#include \"c-common.h\"\n+\n+#include \"name-lookup.h\"\n \n /* Usage of TREE_LANG_FLAG_?:\n    0: IDENTIFIER_MARKED (IDENTIFIER_NODEs)\n@@ -4813,7 +4810,7 @@ extern const char *class_key_or_enum_as_string\t(tree);\n extern void print_instantiation_context\t\t(void);\n extern void maybe_warn_variadic_templates       (void);\n extern void maybe_warn_cpp0x\t\t\t(cpp0x_warn_str str);\n-extern bool pedwarn_cxx98                       (location_t, int, const char *, ...) ATTRIBUTE_GCC_CXXDIAG(3,4);\n+extern bool pedwarn_cxx98                       (location_t, int, const char *, ...) ATTRIBUTE_GCC_DIAG(3,4);\n \n /* in except.c */\n extern void init_exception_processing\t\t(void);"}, {"sha": "dcb455b66aa82caac06f3c02391b0ffd2174d347", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59cc9210fc47a5b2af679803c65669e7e501f0ab/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59cc9210fc47a5b2af679803c65669e7e501f0ab/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=59cc9210fc47a5b2af679803c65669e7e501f0ab", "patch": "@@ -34,8 +34,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"intl.h\"\n #include \"pointer-set.h\"\n #include \"flags.h\"\n-#include \"c-common.h\"\n #include \"cp-tree.h\"\n+#include \"c-common.h\"\n #include \"cp-objcp-common.h\"\n #include \"tree-inline.h\"\n #include \"decl.h\""}]}