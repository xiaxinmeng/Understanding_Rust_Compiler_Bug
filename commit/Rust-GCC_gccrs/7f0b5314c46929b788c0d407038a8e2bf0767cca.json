{"sha": "7f0b5314c46929b788c0d407038a8e2bf0767cca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YwYjUzMTRjNDY5MjliNzg4YzBkNDA3MDM4YThlMmJmMDc2N2NjYQ==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2008-04-08T06:51:05Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-04-08T06:51:05Z"}, "message": "exp_dist.ads, [...]: Fix casing error in formal parameter name in call\n\n2008-04-08  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_dist.ads, exp_dist.adb: Fix casing error in formal parameter name\n\tin call\n\t(Add_RACW_Features): When processing an RACW in another unit than the\n\tmain unit, set Body_Decls to No_List to indicate that the bodies of\n\tthe type's TSS must not be generated.\n\t(GARLIC_Support.Add_RACW_Read_Attribute,\n\tGARLIC_Support.Add_RACW_Write_Attribute): Do not generate bodies if\n\tBody_Decls is No_List.\n\t(PolyORB_Support.Add_RACW_Read_Attribute,\n\tPolyORB_Support.Add_RACW_Write_Attribute,\n\tPolyORB_Support.Add_RACW_From_Any,\n\tPolyORB_Support.Add_RACW_To_Any,\n\tPolyORB_Support.Add_RACW_TypeCode): Same.\n\t(Transmit_As_Unconstrained): New function.\n\t(Build_Ordered_Parameters_List): Use the above to order parameters.\n\t(GARLIC_Support.Build_General_Calling_Stubs):\n\tUse the above to determine which parameters to unmarshall using 'Input\n\tat the point where their temporary is declared (as opposed to later on\n\twith a 'Read call).\n\t(PolyORB_Support.Build_General_Calling_Stubs):\n\tUse the above to determine which parameters to unmarshall using From_Any\n\tat the point where their temporary is declared (as opposed to later on\n\twith an assignment).\n\nFrom-SVN: r134031", "tree": {"sha": "e4d16f353c75b52be2fc8e98b20dcdac67104266", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4d16f353c75b52be2fc8e98b20dcdac67104266"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f0b5314c46929b788c0d407038a8e2bf0767cca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f0b5314c46929b788c0d407038a8e2bf0767cca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f0b5314c46929b788c0d407038a8e2bf0767cca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f0b5314c46929b788c0d407038a8e2bf0767cca/comments", "author": null, "committer": null, "parents": [{"sha": "65df5b719406d99296f303a3ba4ccef5a3752e19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65df5b719406d99296f303a3ba4ccef5a3752e19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65df5b719406d99296f303a3ba4ccef5a3752e19"}], "stats": {"total": 480, "additions": 272, "deletions": 208}, "files": [{"sha": "435afc5c51c7f8977c80489b5606b08a5c112594", "filename": "gcc/ada/exp_dist.adb", "status": "modified", "additions": 270, "deletions": 206, "changes": 476, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f0b5314c46929b788c0d407038a8e2bf0767cca/gcc%2Fada%2Fexp_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f0b5314c46929b788c0d407038a8e2bf0767cca/gcc%2Fada%2Fexp_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dist.adb?ref=7f0b5314c46929b788c0d407038a8e2bf0767cca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -216,6 +216,11 @@ package body Exp_Dist is\n    --  the controlling formal of the equivalent RACW operation for a RAS\n    --  type is always left in first position.\n \n+   function Transmit_As_Unconstrained (Typ : Entity_Id) return Boolean;\n+   --  True when Typ is an unconstrained type, or a null-excluding access type.\n+   --  In either case, this means stubs cannot contain a default-initialized\n+   --  object declaration of such type.\n+\n    procedure Add_Calling_Stubs_To_Declarations\n      (Pkg_Spec : Node_Id;\n       Decls    : List_Id);\n@@ -471,9 +476,10 @@ package body Exp_Dist is\n       RPC_Receiver_Decl   : Node_Id;\n       Body_Decls          : List_Id);\n    --  Add declaration for TSSs for a given RACW type. The declarations are\n-   --  added just after the declaration of the RACW type itself, while the\n-   --  bodies are inserted at the end of Body_Decls. Runtime-specific ancillary\n-   --  subprogram for Add_RACW_Features.\n+   --  added just after the declaration of the RACW type itself. If the RACW\n+   --  appears in the main unit, Body_Decls is a list of declarations to which\n+   --  the bodies are appended. Else Body_Decls is No_List.\n+   --  PCS-specific ancillary subprogram for Add_RACW_Features.\n \n    procedure Specific_Add_RAST_Features\n      (Vis_Decl : Node_Id;\n@@ -1139,6 +1145,13 @@ package body Exp_Dist is\n          Body_Decls          => Body_Decls,\n          Existing            => Existing);\n \n+      --  If this RACW is not in the main unit, do not generate primitive or\n+      --  TSS bodies.\n+\n+      if not Entity_Is_In_Main_Unit (RACW_Type) then\n+         Body_Decls := No_List;\n+      end if;\n+\n       Add_RACW_Asynchronous_Flag\n         (Declarations        => Decls,\n          RACW_Type           => RACW_Type);\n@@ -2121,6 +2134,7 @@ package body Exp_Dist is\n       Constrained_List   : List_Id;\n       Unconstrained_List : List_Id;\n       Current_Parameter  : Node_Id;\n+      Ptyp               : Node_Id;\n \n       First_Parameter : Node_Id;\n       For_RAS         : Boolean := False;\n@@ -2140,15 +2154,17 @@ package body Exp_Dist is\n          For_RAS := True;\n       end if;\n \n-      --  Loop through the parameters and add them to the right list\n+      --  Loop through the parameters and add them to the right list. Note that\n+      --  we treat a parameter of a null-excluding access type as unconstrained\n+      --  because we can't declare an object of such a type with default\n+      --  initialization.\n \n       Current_Parameter := First_Parameter;\n       while Present (Current_Parameter) loop\n-         if (Nkind (Parameter_Type (Current_Parameter)) = N_Access_Definition\n-             or else\n-               Is_Constrained (Etype (Parameter_Type (Current_Parameter)))\n-             or else\n-               Is_Elementary_Type (Etype (Parameter_Type (Current_Parameter))))\n+         Ptyp := Parameter_Type (Current_Parameter);\n+\n+         if (Nkind (Ptyp) = N_Access_Definition\n+               or else not Transmit_As_Unconstrained (Etype (Ptyp)))\n            and then not (For_RAS and then Current_Parameter = First_Parameter)\n          then\n             Append_To (Constrained_List, New_Copy (Current_Parameter));\n@@ -2828,7 +2844,8 @@ package body Exp_Dist is\n          Body_Decls       : List_Id);\n       --  Add Read attribute for the RACW type. The declaration and attribute\n       --  definition clauses are inserted right after the declaration of\n-      --  RACW_Type, while the subprogram body is appended to Body_Decls.\n+      --  RACW_Type. If Body_Decls is not No_List, the subprogram body is\n+      --  appended to it (case where the RACW declaration is in the main unit).\n \n       procedure Add_RACW_Write_Attribute\n         (RACW_Type        : Entity_Id;\n@@ -2941,36 +2958,66 @@ package body Exp_Dist is\n \n          Body_Node : Node_Id;\n \n+         Statements        : constant List_Id := New_List;\n          Decls             : List_Id;\n-         Statements        : List_Id;\n          Local_Statements  : List_Id;\n          Remote_Statements : List_Id;\n          --  Various parts of the procedure\n \n-         Procedure_Name    : constant Name_Id   :=\n-                               New_Internal_Name ('R');\n-         Source_Partition  : constant Entity_Id :=\n-                               Make_Defining_Identifier\n-                                 (Loc, New_Internal_Name ('P'));\n-         Source_Receiver   : constant Entity_Id :=\n-                               Make_Defining_Identifier\n-                                 (Loc, New_Internal_Name ('S'));\n-         Source_Address    : constant Entity_Id :=\n-                               Make_Defining_Identifier\n-                                 (Loc, New_Internal_Name ('P'));\n-         Local_Stub        : constant Entity_Id :=\n+         Pnam              : constant Entity_Id :=\n                                Make_Defining_Identifier\n-                                 (Loc, New_Internal_Name ('L'));\n-         Stubbed_Result    : constant Entity_Id :=\n-                               Make_Defining_Identifier\n-                                 (Loc, New_Internal_Name ('S'));\n+                                 (Loc, New_Internal_Name ('R'));\n          Asynchronous_Flag : constant Entity_Id :=\n                                Asynchronous_Flags_Table.Get (RACW_Type);\n          pragma Assert (Present (Asynchronous_Flag));\n \n+         --  Prepare local identifiers\n+\n+         Source_Partition : Entity_Id;\n+         Source_Receiver  : Entity_Id;\n+         Source_Address   : Entity_Id;\n+         Local_Stub       : Entity_Id;\n+         Stubbed_Result   : Entity_Id;\n+\n       --  Start of processing for Add_RACW_Read_Attribute\n \n       begin\n+         Build_Stream_Procedure (Loc,\n+           RACW_Type, Body_Node, Pnam, Statements, Outp => True);\n+         Proc_Decl := Make_Subprogram_Declaration (Loc,\n+           Copy_Specification (Loc, Specification (Body_Node)));\n+\n+         Attr_Decl :=\n+           Make_Attribute_Definition_Clause (Loc,\n+             Name       => New_Occurrence_Of (RACW_Type, Loc),\n+             Chars      => Name_Read,\n+             Expression =>\n+               New_Occurrence_Of (\n+                 Defining_Unit_Name (Specification (Proc_Decl)), Loc));\n+\n+         Insert_After (Declaration_Node (RACW_Type), Proc_Decl);\n+         Insert_After (Proc_Decl, Attr_Decl);\n+\n+         if No (Body_Decls) then\n+            --  Case of processing an RACW type from another unit than the\n+            --  main one: do not generate a body.\n+\n+            return;\n+         end if;\n+\n+         --  Prepare local identifiers\n+\n+         Source_Partition :=\n+           Make_Defining_Identifier (Loc, New_Internal_Name ('P'));\n+         Source_Receiver  :=\n+           Make_Defining_Identifier (Loc, New_Internal_Name ('S'));\n+         Source_Address   :=\n+           Make_Defining_Identifier (Loc, New_Internal_Name ('P'));\n+         Local_Stub       :=\n+           Make_Defining_Identifier (Loc, New_Internal_Name ('L'));\n+         Stubbed_Result   :=\n+           Make_Defining_Identifier (Loc, New_Internal_Name ('S'));\n+\n          --  Generate object declarations\n \n          Decls := New_List (\n@@ -3007,7 +3054,7 @@ package body Exp_Dist is\n \n          --  Read the source Partition_ID and RPC_Receiver from incoming stream\n \n-         Statements := New_List (\n+         Append_List_To (Statements, New_List (\n            Make_Attribute_Reference (Loc,\n              Prefix         =>\n                New_Occurrence_Of (RTE (RE_Partition_ID), Loc),\n@@ -3032,7 +3079,7 @@ package body Exp_Dist is\n                Name_Read,\n              Expressions    => New_List (\n                Stream_Parameter,\n-               New_Occurrence_Of (Source_Address, Loc))));\n+               New_Occurrence_Of (Source_Address, Loc)))));\n \n          --  Build_Get_Unique_RP_Call needs the type of Stubbed_Result\n \n@@ -3131,25 +3178,7 @@ package body Exp_Dist is\n              Then_Statements => Local_Statements,\n              Else_Statements => Remote_Statements));\n \n-         Build_Stream_Procedure\n-           (Loc, RACW_Type, Body_Node,\n-            Make_Defining_Identifier (Loc, Procedure_Name),\n-            Statements, Outp => True);\n          Set_Declarations (Body_Node, Decls);\n-\n-         Proc_Decl := Make_Subprogram_Declaration (Loc,\n-           Copy_Specification (Loc, Specification (Body_Node)));\n-\n-         Attr_Decl :=\n-           Make_Attribute_Definition_Clause (Loc,\n-             Name       => New_Occurrence_Of (RACW_Type, Loc),\n-             Chars      => Name_Read,\n-             Expression =>\n-               New_Occurrence_Of (\n-                 Defining_Unit_Name (Specification (Proc_Decl)), Loc));\n-\n-         Insert_After (Declaration_Node (RACW_Type), Proc_Decl);\n-         Insert_After (Proc_Decl, Attr_Decl);\n          Append_To (Body_Decls, Body_Node);\n       end Add_RACW_Read_Attribute;\n \n@@ -3168,14 +3197,36 @@ package body Exp_Dist is\n          Proc_Decl : Node_Id;\n          Attr_Decl : Node_Id;\n \n-         Statements        : List_Id;\n+         Statements        : constant List_Id := New_List;\n          Local_Statements  : List_Id;\n          Remote_Statements : List_Id;\n          Null_Statements   : List_Id;\n \n-         Procedure_Name : constant Name_Id := New_Internal_Name ('R');\n+         Pnam : constant Entity_Id :=\n+                  Make_Defining_Identifier (Loc, New_Internal_Name ('R'));\n \n       begin\n+         Build_Stream_Procedure\n+           (Loc, RACW_Type, Body_Node, Pnam, Statements, Outp => False);\n+\n+         Proc_Decl := Make_Subprogram_Declaration (Loc,\n+           Copy_Specification (Loc, Specification (Body_Node)));\n+\n+         Attr_Decl :=\n+           Make_Attribute_Definition_Clause (Loc,\n+             Name       => New_Occurrence_Of (RACW_Type, Loc),\n+             Chars      => Name_Write,\n+             Expression =>\n+               New_Occurrence_Of (\n+                 Defining_Unit_Name (Specification (Proc_Decl)), Loc));\n+\n+         Insert_After (Declaration_Node (RACW_Type), Proc_Decl);\n+         Insert_After (Proc_Decl, Attr_Decl);\n+\n+         if No (Body_Decls) then\n+            return;\n+         end if;\n+\n          --  Build the code fragment corresponding to the marshalling of a\n          --  local object.\n \n@@ -3253,7 +3304,7 @@ package body Exp_Dist is\n              Object => Make_Integer_Literal (Loc, Uint_0),\n              Etyp   => RTE (RE_Unsigned_64)));\n \n-         Statements := New_List (\n+         Append_To (Statements,\n            Make_Implicit_If_Statement (RACW_Type,\n              Condition       =>\n                Make_Op_Eq (Loc,\n@@ -3275,24 +3326,6 @@ package body Exp_Dist is\n                  Then_Statements => Remote_Statements)),\n              Else_Statements => Local_Statements));\n \n-         Build_Stream_Procedure\n-           (Loc, RACW_Type, Body_Node,\n-            Make_Defining_Identifier (Loc, Procedure_Name),\n-            Statements, Outp => False);\n-\n-         Proc_Decl := Make_Subprogram_Declaration (Loc,\n-           Copy_Specification (Loc, Specification (Body_Node)));\n-\n-         Attr_Decl :=\n-           Make_Attribute_Definition_Clause (Loc,\n-             Name       => New_Occurrence_Of (RACW_Type, Loc),\n-             Chars      => Name_Write,\n-             Expression =>\n-               New_Occurrence_Of (\n-                 Defining_Unit_Name (Specification (Proc_Decl)), Loc));\n-\n-         Insert_After (Declaration_Node (RACW_Type), Proc_Decl);\n-         Insert_After (Proc_Decl, Attr_Decl);\n          Append_To (Body_Decls, Body_Node);\n       end Add_RACW_Write_Attribute;\n \n@@ -4193,8 +4226,7 @@ package body Exp_Dist is\n                      Etyp := Etype (Typ);\n                   end if;\n \n-                  Constrained :=\n-                    Is_Constrained (Etyp) or else Is_Elementary_Type (Etyp);\n+                  Constrained := not Transmit_As_Unconstrained (Etyp);\n \n                   --  Any parameter but unconstrained out parameters are\n                   --  transmitted to the peer.\n@@ -4786,8 +4818,7 @@ package body Exp_Dist is\n                   Etyp := Etype (Parameter_Type (Current_Parameter));\n                end if;\n \n-               Constrained :=\n-                 Is_Constrained (Etyp) or else Is_Elementary_Type (Etyp);\n+               Constrained := not Transmit_As_Unconstrained (Etyp);\n \n                if In_Present (Current_Parameter)\n                  or else not Out_Present (Current_Parameter)\n@@ -5441,7 +5472,8 @@ package body Exp_Dist is\n          Body_Decls       : List_Id);\n       --  Add Read attribute for the RACW type. The declaration and attribute\n       --  definition clauses are inserted right after the declaration of\n-      --  RACW_Type, while the subprogram body is appended to Body_Decls.\n+      --  RACW_Type. If Body_Decls is not No_List, the subprogram body is\n+      --  appended to it (case where the RACW declaration is in the main unit).\n \n       procedure Add_RACW_Write_Attribute\n         (RACW_Type        : Entity_Id;\n@@ -5595,7 +5627,8 @@ package body Exp_Dist is\n          Is_RAS : constant Boolean := not Comes_From_Source (RACW_Type);\n \n          Fnam   : constant Entity_Id :=\n-                    Make_Defining_Identifier (Loc, New_Internal_Name ('F'));\n+                    Make_Defining_Identifier (Loc,\n+                      Chars => New_External_Name (Chars (RACW_Type), 'F'));\n \n          Func_Spec : Node_Id;\n          Func_Decl : Node_Id;\n@@ -5609,21 +5642,12 @@ package body Exp_Dist is\n \n          Any_Parameter  : constant Entity_Id :=\n                             Make_Defining_Identifier (Loc, Name_A);\n-         Reference      : constant Entity_Id :=\n-                            Make_Defining_Identifier\n-                              (Loc, New_Internal_Name ('R'));\n-         Is_Local       : constant Entity_Id  :=\n-                            Make_Defining_Identifier\n-                              (Loc, New_Internal_Name ('L'));\n-         Addr           : constant Entity_Id  :=\n-                            Make_Defining_Identifier\n-                              (Loc, New_Internal_Name ('A'));\n-         Local_Stub     : constant Entity_Id  :=\n-                            Make_Defining_Identifier\n-                              (Loc, New_Internal_Name ('L'));\n-         Stubbed_Result : constant Entity_Id  :=\n-                            Make_Defining_Identifier\n-                              (Loc, New_Internal_Name ('S'));\n+\n+         Reference      : Entity_Id;\n+         Is_Local       : Entity_Id;\n+         Addr           : Entity_Id;\n+         Local_Stub     : Entity_Id;\n+         Stubbed_Result : Entity_Id;\n \n          Stub_Condition : Node_Id;\n          --  An expression that determines whether we create a stub for the\n@@ -5637,9 +5661,42 @@ package body Exp_Dist is\n          --  The flag object declared in Add_RACW_Asynchronous_Flag\n \n       begin\n+         Func_Spec :=\n+           Make_Function_Specification (Loc,\n+             Defining_Unit_Name =>\n+               Fnam,\n+             Parameter_Specifications => New_List (\n+               Make_Parameter_Specification (Loc,\n+                 Defining_Identifier =>\n+                   Any_Parameter,\n+                 Parameter_Type =>\n+                   New_Occurrence_Of (RTE (RE_Any), Loc))),\n+             Result_Definition => New_Occurrence_Of (RACW_Type, Loc));\n+\n+         --  NOTE: The usage occurrences of RACW_Parameter must refer to the\n+         --  entity in the declaration spec, not those of the body spec.\n+\n+         Func_Decl := Make_Subprogram_Declaration (Loc, Func_Spec);\n+         Insert_After (Declaration_Node (RACW_Type), Func_Decl);\n+         Set_Renaming_TSS (RACW_Type, Fnam, TSS_From_Any);\n+\n+         if No (Body_Decls) then\n+            return;\n+         end if;\n \n          --  Object declarations\n \n+         Reference :=\n+           Make_Defining_Identifier (Loc, New_Internal_Name ('R'));\n+         Is_Local :=\n+           Make_Defining_Identifier (Loc, New_Internal_Name ('L'));\n+         Addr :=\n+           Make_Defining_Identifier (Loc, New_Internal_Name ('A'));\n+         Local_Stub :=\n+           Make_Defining_Identifier (Loc, New_Internal_Name ('L'));\n+         Stubbed_Result :=\n+           Make_Defining_Identifier (Loc, New_Internal_Name ('S'));\n+\n          Decls := New_List (\n            Make_Object_Declaration (Loc,\n              Defining_Identifier =>\n@@ -5791,23 +5848,6 @@ package body Exp_Dist is\n              Expression => Unchecked_Convert_To (RACW_Type,\n                New_Occurrence_Of (Stubbed_Result, Loc))));\n \n-         Func_Spec :=\n-           Make_Function_Specification (Loc,\n-             Defining_Unit_Name =>\n-               Fnam,\n-             Parameter_Specifications => New_List (\n-               Make_Parameter_Specification (Loc,\n-                 Defining_Identifier =>\n-                   Any_Parameter,\n-                 Parameter_Type =>\n-                   New_Occurrence_Of (RTE (RE_Any), Loc))),\n-             Result_Definition => New_Occurrence_Of (RACW_Type, Loc));\n-\n-         --  NOTE: The usage occurrences of RACW_Parameter must refer to the\n-         --  entity in the declaration spec, not those of the body spec.\n-\n-         Func_Decl := Make_Subprogram_Declaration (Loc, Func_Spec);\n-\n          Func_Body :=\n            Make_Subprogram_Body (Loc,\n              Specification              =>\n@@ -5817,10 +5857,7 @@ package body Exp_Dist is\n                Make_Handled_Sequence_Of_Statements (Loc,\n                  Statements => Statements));\n \n-         Insert_After (Declaration_Node (RACW_Type), Func_Decl);\n          Append_To (Body_Decls, Func_Body);\n-\n-         Set_Renaming_TSS (RACW_Type, Fnam, TSS_From_Any);\n       end Add_RACW_From_Any;\n \n       -----------------------------\n@@ -5844,14 +5881,14 @@ package body Exp_Dist is\n          Body_Node : Node_Id;\n \n          Decls             : List_Id;\n-         Statements        : List_Id;\n+         Statements        : constant List_Id := New_List;\n          --  Various parts of the procedure\n \n-         Procedure_Name    : constant Name_Id   :=\n-                               New_Internal_Name ('R');\n-         Source_Ref        : constant Entity_Id :=\n-                               Make_Defining_Identifier\n-                                 (Loc, New_Internal_Name ('R'));\n+         Pnam              : constant Entity_Id :=\n+                               Make_Defining_Identifier (Loc,\n+                                  New_Internal_Name ('R'));\n+\n+         Source_Ref        : Entity_Id;\n          Asynchronous_Flag : constant Entity_Id :=\n                                Asynchronous_Flags_Table.Get (RACW_Type);\n          pragma Assert (Present (Asynchronous_Flag));\n@@ -5881,6 +5918,30 @@ package body Exp_Dist is\n       --  Start of processing for Add_RACW_Read_Attribute\n \n       begin\n+         Build_Stream_Procedure\n+           (Loc, RACW_Type, Body_Node, Pnam, Statements, Outp => True);\n+\n+         Proc_Decl := Make_Subprogram_Declaration (Loc,\n+           Copy_Specification (Loc, Specification (Body_Node)));\n+\n+         Attr_Decl :=\n+           Make_Attribute_Definition_Clause (Loc,\n+             Name       => New_Occurrence_Of (RACW_Type, Loc),\n+             Chars      => Name_Read,\n+             Expression =>\n+               New_Occurrence_Of (\n+                 Defining_Unit_Name (Specification (Proc_Decl)), Loc));\n+\n+         Insert_After (Declaration_Node (RACW_Type), Proc_Decl);\n+         Insert_After (Proc_Decl, Attr_Decl);\n+\n+         if No (Body_Decls) then\n+            return;\n+         end if;\n+\n+         Source_Ref := Make_Defining_Identifier\n+                         (Loc, New_Internal_Name ('R'));\n+\n          --  Generate object declarations\n \n          Decls := New_List (\n@@ -5889,7 +5950,7 @@ package body Exp_Dist is\n              Object_Definition   =>\n                New_Occurrence_Of (RTE (RE_Object_Ref), Loc)));\n \n-         Statements := New_List (\n+         Append_List_To (Statements, New_List (\n            Make_Attribute_Reference (Loc,\n              Prefix         =>\n                New_Occurrence_Of (RTE (RE_Object_Ref), Loc),\n@@ -5908,27 +5969,9 @@ package body Exp_Dist is\n                      New_Occurrence_Of (RTE (RE_TA_ObjRef), Loc),\n                    Parameter_Associations => New_List (\n                      New_Occurrence_Of (Source_Ref, Loc))),\n-                 Decls)));\n+                 Decls))));\n \n-         Build_Stream_Procedure\n-           (Loc, RACW_Type, Body_Node,\n-            Make_Defining_Identifier (Loc, Procedure_Name),\n-            Statements, Outp => True);\n          Set_Declarations (Body_Node, Decls);\n-\n-         Proc_Decl := Make_Subprogram_Declaration (Loc,\n-           Copy_Specification (Loc, Specification (Body_Node)));\n-\n-         Attr_Decl :=\n-           Make_Attribute_Definition_Clause (Loc,\n-             Name       => New_Occurrence_Of (RACW_Type, Loc),\n-             Chars      => Name_Read,\n-             Expression =>\n-               New_Occurrence_Of (\n-                 Defining_Unit_Name (Specification (Proc_Decl)), Loc));\n-\n-         Insert_After (Declaration_Node (RACW_Type), Proc_Decl);\n-         Insert_After (Proc_Decl, Attr_Decl);\n          Append_To (Body_Decls, Body_Node);\n       end Add_RACW_Read_Attribute;\n \n@@ -5947,7 +5990,9 @@ package body Exp_Dist is\n \n          Is_RAS : constant Boolean := not Comes_From_Source (RACW_Type);\n \n-         Fnam : Entity_Id;\n+         Fnam : constant Entity_Id :=\n+                  Make_Defining_Identifier (Loc,\n+                    Chars => New_External_Name (Chars (RACW_Type), 'T'));\n \n          Stub_Elements : constant Stub_Structure :=\n            Stubs_Table.Get (Designated_Type);\n@@ -5965,8 +6010,8 @@ package body Exp_Dist is\n          If_Node           : Node_Id;\n          --  Various parts of the subprogram\n \n-         RACW_Parameter : constant Entity_Id\n-           := Make_Defining_Identifier (Loc, Name_R);\n+         RACW_Parameter : constant Entity_Id :=\n+                            Make_Defining_Identifier (Loc, Name_R);\n \n          Reference         : constant Entity_Id :=\n                                Make_Defining_Identifier\n@@ -5976,6 +6021,29 @@ package body Exp_Dist is\n                                  (Loc, New_Internal_Name ('A'));\n \n       begin\n+         Func_Spec :=\n+           Make_Function_Specification (Loc,\n+             Defining_Unit_Name =>\n+               Fnam,\n+             Parameter_Specifications => New_List (\n+               Make_Parameter_Specification (Loc,\n+                 Defining_Identifier =>\n+                   RACW_Parameter,\n+                 Parameter_Type =>\n+                   New_Occurrence_Of (RACW_Type, Loc))),\n+             Result_Definition => New_Occurrence_Of (RTE (RE_Any), Loc));\n+\n+         --  NOTE: The usage occurrences of RACW_Parameter must refer to the\n+         --  entity in the declaration spec, not in the body spec.\n+\n+         Func_Decl := Make_Subprogram_Declaration (Loc, Func_Spec);\n+\n+         Insert_After (Declaration_Node (RACW_Type), Func_Decl);\n+         Set_Renaming_TSS (RACW_Type, Fnam, TSS_To_Any);\n+\n+         if No (Body_Decls) then\n+            return;\n+         end if;\n \n          --  Object declarations\n \n@@ -6102,26 +6170,6 @@ package body Exp_Dist is\n              Expression =>\n                New_Occurrence_Of (Any, Loc)));\n \n-         Fnam := Make_Defining_Identifier (\n-           Loc, New_Internal_Name ('T'));\n-\n-         Func_Spec :=\n-           Make_Function_Specification (Loc,\n-             Defining_Unit_Name =>\n-               Fnam,\n-             Parameter_Specifications => New_List (\n-               Make_Parameter_Specification (Loc,\n-                 Defining_Identifier =>\n-                   RACW_Parameter,\n-                 Parameter_Type =>\n-                   New_Occurrence_Of (RACW_Type, Loc))),\n-             Result_Definition => New_Occurrence_Of (RTE (RE_Any), Loc));\n-\n-         --  NOTE: The usage occurrences of RACW_Parameter must refer to the\n-         --  entity in the declaration spec, not in the body spec.\n-\n-         Func_Decl := Make_Subprogram_Declaration (Loc, Func_Spec);\n-\n          Func_Body :=\n            Make_Subprogram_Body (Loc,\n              Specification              =>\n@@ -6130,11 +6178,7 @@ package body Exp_Dist is\n              Handled_Statement_Sequence =>\n                Make_Handled_Sequence_Of_Statements (Loc,\n                  Statements => Statements));\n-\n-         Insert_After (Declaration_Node (RACW_Type), Func_Decl);\n          Append_To (Body_Decls, Func_Body);\n-\n-         Set_Renaming_TSS (RACW_Type, Fnam, TSS_To_Any);\n       end Add_RACW_To_Any;\n \n       -----------------------\n@@ -6148,7 +6192,9 @@ package body Exp_Dist is\n       is\n          Loc : constant Source_Ptr := Sloc (RACW_Type);\n \n-         Fnam : Entity_Id;\n+         Fnam : constant Entity_Id :=\n+                  Make_Defining_Identifier (Loc,\n+                    Chars => New_External_Name (Chars (RACW_Type), 'Y'));\n \n          Stub_Elements : constant Stub_Structure :=\n                            Stubs_Table.Get (Designated_Type);\n@@ -6159,9 +6205,6 @@ package body Exp_Dist is\n          Func_Body : Node_Id;\n \n       begin\n-         Fnam :=\n-           Make_Defining_Identifier (Loc,\n-             Chars => New_Internal_Name ('T'));\n \n          --  The spec for this subprogram has a dummy 'access RACW' argument,\n          --  which serves only for overloading purposes.\n@@ -6176,6 +6219,12 @@ package body Exp_Dist is\n          --  entity in the declaration spec, not those of the body spec.\n \n          Func_Decl := Make_Subprogram_Declaration (Loc, Func_Spec);\n+         Insert_After (Declaration_Node (RACW_Type), Func_Decl);\n+         Set_Renaming_TSS (RACW_Type, Fnam, TSS_TypeCode);\n+\n+         if No (Body_Decls) then\n+            return;\n+         end if;\n \n          Func_Body :=\n            Make_Subprogram_Body (Loc,\n@@ -6193,10 +6242,7 @@ package body Exp_Dist is\n                                Stub_Elements.RPC_Receiver_Decl),\n                          Selector_Name => Name_Obj_TypeCode)))));\n \n-         Insert_After (Declaration_Node (RACW_Type), Func_Decl);\n          Append_To (Body_Decls, Func_Body);\n-\n-         Set_Renaming_TSS (RACW_Type, Fnam, TSS_TypeCode);\n       end Add_RACW_TypeCode;\n \n       ------------------------------\n@@ -6219,8 +6265,9 @@ package body Exp_Dist is\n          Proc_Decl : Node_Id;\n          Attr_Decl : Node_Id;\n \n-         Statements     : List_Id;\n-         Procedure_Name : constant Name_Id := New_Internal_Name ('R');\n+         Statements     : constant List_Id := New_List;\n+         Pnam : constant Entity_Id :=\n+                  Make_Defining_Identifier (Loc, New_Internal_Name ('R'));\n \n          function Stream_Parameter return Node_Id;\n          function Object return Node_Id;\n@@ -6254,22 +6301,8 @@ package body Exp_Dist is\n       --  Start of processing for Add_RACW_Write_Attribute\n \n       begin\n-         Statements := New_List (\n-           Pack_Node_Into_Stream_Access (Loc,\n-             Stream => Stream_Parameter,\n-             Object =>\n-               Make_Function_Call (Loc,\n-                 Name =>\n-                   New_Occurrence_Of (RTE (RE_FA_ObjRef), Loc),\n-                 Parameter_Associations => New_List (\n-                   PolyORB_Support.Helpers.Build_To_Any_Call\n-                                             (Object, Body_Decls))),\n-             Etyp => RTE (RE_Object_Ref)));\n-\n          Build_Stream_Procedure\n-           (Loc, RACW_Type, Body_Node,\n-            Make_Defining_Identifier (Loc, Procedure_Name),\n-            Statements, Outp => False);\n+           (Loc, RACW_Type, Body_Node, Pnam, Statements, Outp => False);\n \n          Proc_Decl :=\n            Make_Subprogram_Declaration (Loc,\n@@ -6285,6 +6318,23 @@ package body Exp_Dist is\n \n          Insert_After (Declaration_Node (RACW_Type), Proc_Decl);\n          Insert_After (Proc_Decl, Attr_Decl);\n+\n+         if No (Body_Decls) then\n+            return;\n+         end if;\n+\n+         Append_To (Statements,\n+           Pack_Node_Into_Stream_Access (Loc,\n+             Stream => Stream_Parameter,\n+             Object =>\n+               Make_Function_Call (Loc,\n+                 Name =>\n+                   New_Occurrence_Of (RTE (RE_FA_ObjRef), Loc),\n+                 Parameter_Associations => New_List (\n+                   PolyORB_Support.Helpers.Build_To_Any_Call\n+                                             (Object, Body_Decls))),\n+             Etyp => RTE (RE_Object_Ref)));\n+\n          Append_To (Body_Decls, Body_Node);\n       end Add_RACW_Write_Attribute;\n \n@@ -8440,8 +8490,8 @@ package body Exp_Dist is\n             Any : Entity_Id;\n             TC  : Node_Id;\n             Idx : Node_Id) return Node_Id;\n-         --  Build a call to Get_Aggregate_Element on Any\n-         --  for typecode TC, returning the Idx'th element.\n+         --  Build a call to Get_Aggregate_Element on Any for typecode TC,\n+         --  returning the Idx'th element.\n \n          generic\n             Subprogram : Entity_Id;\n@@ -8795,7 +8845,7 @@ package body Exp_Dist is\n                                  Build_From_Any_Call (Etype (Field),\n                                    Build_Get_Aggregate_Element (Loc,\n                                      Any => Any,\n-                                     Tc  => Build_TypeCode_Call (Loc,\n+                                     TC  => Build_TypeCode_Call (Loc,\n                                               Etype (Field), Decls),\n                                      Idx => Make_Integer_Literal (Loc,\n                                               Counter)),\n@@ -8835,16 +8885,18 @@ package body Exp_Dist is\n                                       Parameter_Associations => New_List (\n                                         Build_Get_Aggregate_Element (Loc,\n                                           Any => Any,\n-                                          Tc  => Make_Function_Call (Loc,\n-                                            Name => New_Occurrence_Of (\n-                                              RTE (RE_Any_Member_Type), Loc),\n-                                            Parameter_Associations =>\n-                                              New_List (\n-                                                New_Occurrence_Of (Any, Loc),\n-                                                Make_Integer_Literal (Loc,\n-                                                  Counter))),\n-                                          Idx => Make_Integer_Literal (Loc,\n-                                            Counter))))));\n+                                          TC  =>\n+                                            Make_Function_Call (Loc,\n+                                              Name => New_Occurrence_Of (\n+                                                RTE (RE_Any_Member_Type), Loc),\n+                                              Parameter_Associations =>\n+                                                New_List (\n+                                                  New_Occurrence_Of (Any, Loc),\n+                                                  Make_Integer_Literal (Loc,\n+                                                    Intval => Counter))),\n+                                          Idx =>\n+                                            Make_Integer_Literal (Loc,\n+                                             Intval => Counter))))));\n \n                               Append_To (Stmts,\n                                 Make_Block_Statement (Loc,\n@@ -8924,10 +8976,10 @@ package body Exp_Dist is\n                                     Build_From_Any_Call (Disc_Type,\n                                       Build_Get_Aggregate_Element (Loc,\n                                         Any => Any_Parameter,\n-                                        Tc  => Build_TypeCode_Call\n+                                        TC  => Build_TypeCode_Call\n                                                  (Loc, Disc_Type, Decls),\n-                                        Idx => Make_Integer_Literal\n-                                                 (Loc, Component_Counter)),\n+                                        Idx => Make_Integer_Literal (Loc,\n+                                               Intval => Component_Counter)),\n                                       Decls)));\n                               Component_Counter := Component_Counter + 1;\n \n@@ -9039,7 +9091,7 @@ package body Exp_Dist is\n                         Element_Any :=\n                           Build_Get_Aggregate_Element (Loc,\n                             Any => Any,\n-                            Tc  => Element_TC,\n+                            TC  => Element_TC,\n                             Idx => New_Occurrence_Of (Counter, Loc));\n                      end;\n \n@@ -9132,7 +9184,7 @@ package body Exp_Dist is\n                                    Indt,\n                                    Build_Get_Aggregate_Element (Loc,\n                                      Any => Any_Parameter,\n-                                     Tc  => Build_TypeCode_Call (Loc,\n+                                     TC  => Build_TypeCode_Call (Loc,\n                                               Indt, Decls),\n                                      Idx => Make_Integer_Literal (Loc, J - 1)),\n                                    Decls)));\n@@ -9161,7 +9213,8 @@ package body Exp_Dist is\n                                            OK_Convert_To (\n                                              Standard_Long_Integer,\n                                              Make_Function_Call (Loc,\n-                                               Name => New_Occurrence_Of (RTE (\n+                                               Name =>\n+                                                 New_Occurrence_Of (RTE (\n                                                  RE_Get_Nested_Sequence_Length\n                                                  ), Loc),\n                                                Parameter_Associations =>\n@@ -11532,6 +11585,17 @@ package body Exp_Dist is\n       end case;\n    end Specific_Build_Subprogram_Receiving_Stubs;\n \n+   -------------------------------\n+   -- Transmit_As_Unconstrained --\n+   -------------------------------\n+\n+   function Transmit_As_Unconstrained (Typ : Entity_Id) return Boolean is\n+   begin\n+      return\n+        not (Is_Elementary_Type (Typ) or else Is_Constrained (Typ))\n+          or else (Is_Access_Type (Typ) and then Can_Never_Be_Null (Typ));\n+   end Transmit_As_Unconstrained;\n+\n    --------------------------\n    -- Underlying_RACW_Type --\n    --------------------------"}, {"sha": "cc2323f26c0221a5e3d21c85ee0f131282eeaa41", "filename": "gcc/ada/exp_dist.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f0b5314c46929b788c0d407038a8e2bf0767cca/gcc%2Fada%2Fexp_dist.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f0b5314c46929b788c0d407038a8e2bf0767cca/gcc%2Fada%2Fexp_dist.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dist.ads?ref=7f0b5314c46929b788c0d407038a8e2bf0767cca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -53,7 +53,7 @@ package Exp_Dist is\n       Insertion_Node  : Node_Id;\n       Body_Decls      : List_Id);\n    --  Add primitive for the stub type, and the RPC receiver. The declarations\n-   --  are inserted after insertion_Node, while the bodies are appended at the\n+   --  are inserted after Insertion_Node, while the bodies are appended at the\n    --  end of Decls.\n \n    procedure Remote_Types_Tagged_Full_View_Encountered"}]}