{"sha": "f3d25c6570bd19d17757fd8a592188aa7ff6ecb4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNkMjVjNjU3MGJkMTlkMTc3NTdmZDhhNTkyMTg4YWE3ZmY2ZWNiNA==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2012-08-27T15:41:38Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2012-08-27T15:41:38Z"}, "message": "PR preprocessor/53469 - argument tokens of _Pragma miss virtual location\n\nConsider this short test snippet:\n\n-------------------------8-------------------\n    #define STRINGIFY(x) #x\n    #define TEST(x) \\\n      _Pragma(STRINGIFY(GCC diagnostic ignored \"-Wunused-local-typedefs\")) \\\n      typedef int myint;\n\n    void bar ()\n    {\n      TEST(myint)\n    }\n-------------------------8-------------------\n\nThe _Pragma is effectively ignored, and compiling with\n-Wunused-local-typedefs warns on the local typedef, even though the\npragma should have prevented the warning to be emitted.\n\nThis is because when the preprocessor sees the _Pragma operator and\nthen goes to handle the first token ('GCC' here) that makes up its\noperands, it retains the spelling location of that token, not its\nvirtual location.\n\nLater when diagnostic_report_diagnostic is called to emit the warning\n(or ignore it because of the pragma), it compares the location of the\nfirst operand of the pragma with the location of the unused location,\n(by calling linemap_location_before_p) and that comparison fails\nbecause in this case, both locations should be virtual.\n\nThis patch fixes the issue by teaching the pragma handling to use\nvirtual locations.\n\nBootstrapped and tested on x86_64-unknown-linux-gnu against trunk.\n\nlibcpp/\n\n\tPR preprocessor/53469\n\t* directives.c (do_pragma): Use the virtual location for the\n\tpragma token, instead of its spelling location.\n\ngcc/testsuite/\n\n\tPR preprocessor/53469\n\t* gcc.dg/cpp/_Pragma7.c: New test case.\n\nFrom-SVN: r190714", "tree": {"sha": "3ced6ccbc7fcd596cb1529873cece3f5076eef5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ced6ccbc7fcd596cb1529873cece3f5076eef5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3d25c6570bd19d17757fd8a592188aa7ff6ecb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3d25c6570bd19d17757fd8a592188aa7ff6ecb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3d25c6570bd19d17757fd8a592188aa7ff6ecb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3d25c6570bd19d17757fd8a592188aa7ff6ecb4/comments", "author": null, "committer": null, "parents": [{"sha": "c0782a4002d2529b76ffe861c5870e2e2c097f5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0782a4002d2529b76ffe861c5870e2e2c097f5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0782a4002d2529b76ffe861c5870e2e2c097f5a"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "d34a5c19882ae484b46d3186d90045f2432442c1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d25c6570bd19d17757fd8a592188aa7ff6ecb4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d25c6570bd19d17757fd8a592188aa7ff6ecb4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f3d25c6570bd19d17757fd8a592188aa7ff6ecb4", "patch": "@@ -1,3 +1,8 @@\n+2012-05-25  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR preprocessor/53469\n+\t* gcc.dg/cpp/_Pragma7.c: New test case.\n+\n 2012-08-27  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/54370"}, {"sha": "a7a5b1bcb0bf142727f031702f6da5ff7104a686", "filename": "gcc/testsuite/gcc.dg/cpp/_Pragma7.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d25c6570bd19d17757fd8a592188aa7ff6ecb4/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F_Pragma7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d25c6570bd19d17757fd8a592188aa7ff6ecb4/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F_Pragma7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F_Pragma7.c?ref=f3d25c6570bd19d17757fd8a592188aa7ff6ecb4", "patch": "@@ -0,0 +1,14 @@\n+/*\n+  Origin: PR preprocessor/53469\n+  { dg-do compile }\n+ */\n+\n+#define STRINGIFY(x) #x\n+#define TEST(x) \\\n+  _Pragma(STRINGIFY(GCC diagnostic ignored \"-Wunused-local-typedefs\")) \\\n+  typedef int myint;\n+\n+void bar ()\n+{\n+  TEST(myint)\n+}"}, {"sha": "7c11fdd0b054e11f7475dedf9ed935b8e4725815", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d25c6570bd19d17757fd8a592188aa7ff6ecb4/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d25c6570bd19d17757fd8a592188aa7ff6ecb4/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=f3d25c6570bd19d17757fd8a592188aa7ff6ecb4", "patch": "@@ -1,3 +1,9 @@\n+2012-05-25  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR preprocessor/53469\n+\t* directives.c (do_pragma): Use the virtual location for the\n+\tpragma token, instead of its spelling location.\n+\n 2012-08-14   Diego Novillo  <dnovillo@google.com>\n \n \tMerge from cxx-conversion branch.  Configury."}, {"sha": "a8f2cc4317014f76a8d8b5bb2ef363a02a10237b", "filename": "libcpp/directives.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d25c6570bd19d17757fd8a592188aa7ff6ecb4/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d25c6570bd19d17757fd8a592188aa7ff6ecb4/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=f3d25c6570bd19d17757fd8a592188aa7ff6ecb4", "patch": "@@ -1347,13 +1347,15 @@ static void\n do_pragma (cpp_reader *pfile)\n {\n   const struct pragma_entry *p = NULL;\n-  const cpp_token *token, *pragma_token = pfile->cur_token;\n+  const cpp_token *token, *pragma_token;\n+  source_location pragma_token_virt_loc = 0;\n   cpp_token ns_token;\n   unsigned int count = 1;\n \n   pfile->state.prevent_expansion++;\n \n-  token = cpp_get_token (pfile);\n+  pragma_token = token = cpp_get_token_with_location (pfile,\n+\t\t\t\t\t\t      &pragma_token_virt_loc);\n   ns_token = *token;\n   if (token->type == CPP_NAME)\n     {\n@@ -1379,7 +1381,7 @@ do_pragma (cpp_reader *pfile)\n     {\n       if (p->is_deferred)\n \t{\n-\t  pfile->directive_result.src_loc = pragma_token->src_loc;\n+\t  pfile->directive_result.src_loc = pragma_token_virt_loc;\n \t  pfile->directive_result.type = CPP_PRAGMA;\n \t  pfile->directive_result.flags = pragma_token->flags;\n \t  pfile->directive_result.val.pragma = p->u.ident;"}]}