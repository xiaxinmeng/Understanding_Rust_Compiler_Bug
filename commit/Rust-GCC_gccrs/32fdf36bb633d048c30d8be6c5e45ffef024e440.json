{"sha": "32fdf36bb633d048c30d8be6c5e45ffef024e440", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJmZGYzNmJiNjMzZDA0OGMzMGQ4YmU2YzVlNDVmZmVmMDI0ZTQ0MA==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@matematik.su.se", "date": "1998-10-05T00:08:56Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-10-05T00:08:56Z"}, "message": "expmed.c (expand_divmod): Don't widen for computing remainder if we seem to have a divmod pattern for...\n\n        * expmed.c (expand_divmod): Don't widen for computing remainder\n        if we seem to have a divmod pattern for needed mode.\n\nFrom-SVN: r22828", "tree": {"sha": "22508e809d2c2dbaf3bf42846bc47e8b4b8164ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22508e809d2c2dbaf3bf42846bc47e8b4b8164ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32fdf36bb633d048c30d8be6c5e45ffef024e440", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32fdf36bb633d048c30d8be6c5e45ffef024e440", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32fdf36bb633d048c30d8be6c5e45ffef024e440", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32fdf36bb633d048c30d8be6c5e45ffef024e440/comments", "author": null, "committer": null, "parents": [{"sha": "4284b774e6f846f1fe69479a6246a3bcfd6c3641", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4284b774e6f846f1fe69479a6246a3bcfd6c3641", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4284b774e6f846f1fe69479a6246a3bcfd6c3641"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "fa5a057bd5bd86a511c9a4b3f7588678dc28b58f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32fdf36bb633d048c30d8be6c5e45ffef024e440/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32fdf36bb633d048c30d8be6c5e45ffef024e440/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=32fdf36bb633d048c30d8be6c5e45ffef024e440", "patch": "@@ -1,3 +1,8 @@\n+Mon Oct  5 01:07:23 1998  Torbjorn Granlund  <tege@matematik.su.se>\n+\n+\t* expmed.c (expand_divmod): Don't widen for computing remainder\n+\tif we seem to have a divmod pattern for needed mode.\n+\n Mon Oct  5 01:01:42 1998  Zack Weinberg  <zack@rabi.phys.columbia.edu>  \n \n \t* cpplib.c (macroexpand): Correct off-by-one error in handling"}, {"sha": "f9bd9ad20bebddb9491d68e0f7a8b149c7281944", "filename": "gcc/expmed.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32fdf36bb633d048c30d8be6c5e45ffef024e440/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32fdf36bb633d048c30d8be6c5e45ffef024e440/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=32fdf36bb633d048c30d8be6c5e45ffef024e440", "patch": "@@ -3709,10 +3709,22 @@ expand_divmod (rem_flag, code, mode, op0, op1, target, unsignedp)\n \n       if (rem_flag)\n \t{\n-\t  /* Try to produce the remainder directly without a library call.  */\n-\t  remainder = sign_expand_binop (compute_mode, umod_optab, smod_optab,\n-\t\t\t\t\t op0, op1, target,\n-\t\t\t\t\t unsignedp, OPTAB_WIDEN);\n+\t  /* Try to produce the remainder without producing the quotient.\n+\t     If we seem to have a divmod patten that does not require widening,\n+\t     don't try windening here.  We should really have an WIDEN argument\n+\t     to expand_twoval_binop, since what we'd really like to do here is\n+\t     1) try a mod insn in compute_mode\n+\t     2) try a divmod insn in compute_mode\n+\t     3) try a div insn in compute_mode and multiply-subtract to get\n+\t        remainder\n+\t     4) try the same things with widening allowed.  */\n+\t  remainder\n+\t    = sign_expand_binop (compute_mode, umod_optab, smod_optab,\n+\t\t\t\t op0, op1, target,\n+\t\t\t\t unsignedp,\n+\t\t\t\t ((optab2->handlers[(int) compute_mode].insn_code\n+\t\t\t\t   != CODE_FOR_nothing)\n+\t\t\t\t  ? OPTAB_DIRECT : OPTAB_WIDEN));\n \t  if (remainder == 0)\n \t    {\n \t      /* No luck there.  Can we do remainder and divide at once"}]}