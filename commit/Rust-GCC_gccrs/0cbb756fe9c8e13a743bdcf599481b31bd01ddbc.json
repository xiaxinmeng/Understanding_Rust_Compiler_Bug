{"sha": "0cbb756fe9c8e13a743bdcf599481b31bd01ddbc", "node_id": "C_kwDOANBUbNoAKDBjYmI3NTZmZTljOGUxM2E3NDNiZGNmNTk5NDgxYjMxYmQwMWRkYmM", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-10T01:30:45Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-10T01:59:34Z"}, "message": "libstdc++: Optimize std::destructible concept\n\nThis uses variable templates and constraints to define a much simpler\nstd::destructible concept. This avoids instantiating the trait\nstd::is_nothrow_destructible and all its implementation in terms of\n__is_destructible_safe and __is_destructible_impl.\n\nIf we had an intrinsic we could just use that (PR c++/107600).\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/concepts (__detail::__destructible_impl)\n\t(__detail::__destructible): New variable templates.\n\t(destructible): Use __detail::__destructible.\n\t* testsuite/std/concepts/concepts.lang/concept.destructible/1.cc:\n\tAdd more checks for array and reference types.", "tree": {"sha": "2a41cb67dad91858a7cdf29b722537638087a0eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a41cb67dad91858a7cdf29b722537638087a0eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cbb756fe9c8e13a743bdcf599481b31bd01ddbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cbb756fe9c8e13a743bdcf599481b31bd01ddbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cbb756fe9c8e13a743bdcf599481b31bd01ddbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cbb756fe9c8e13a743bdcf599481b31bd01ddbc/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cdfd0e5cd5fc1f493d0832ed65d31320f9585b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cdfd0e5cd5fc1f493d0832ed65d31320f9585b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cdfd0e5cd5fc1f493d0832ed65d31320f9585b7"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "c062d62d24fc5012b19f8a528050a52526451738", "filename": "libstdc++-v3/include/std/concepts", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cbb756fe9c8e13a743bdcf599481b31bd01ddbc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fconcepts", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cbb756fe9c8e13a743bdcf599481b31bd01ddbc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fconcepts", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fconcepts?ref=0cbb756fe9c8e13a743bdcf599481b31bd01ddbc", "patch": "@@ -113,9 +113,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template<typename _Tp>\n       using __cref = const remove_reference_t<_Tp>&;\n \n-      template<typename _Tp>\n-\tconcept __class_or_enum\n-\t  = is_class_v<_Tp> || is_union_v<_Tp> || is_enum_v<_Tp>;\n+    template<typename _Tp>\n+      concept __class_or_enum\n+\t= is_class_v<_Tp> || is_union_v<_Tp> || is_enum_v<_Tp>;\n+\n+    template<typename _Tp>\n+      constexpr bool __destructible_impl = false;\n+    template<typename _Tp>\n+      requires requires(_Tp& __t) { { __t.~_Tp() } noexcept; }\n+      constexpr bool __destructible_impl<_Tp> = true;\n+\n+    template<typename _Tp>\n+      constexpr bool __destructible = __destructible_impl<_Tp>;\n+    template<typename _Tp>\n+      constexpr bool __destructible<_Tp&> = true;\n+    template<typename _Tp>\n+      constexpr bool __destructible<_Tp&&> = true;\n+    template<typename _Tp, size_t _Nm>\n+      constexpr bool __destructible<_Tp[_Nm]> = __destructible<_Tp>;\n+\n   } // namespace __detail\n \n   /// [concept.assignable], concept assignable_from\n@@ -129,7 +145,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// [concept.destructible], concept destructible\n   template<typename _Tp>\n-    concept destructible = is_nothrow_destructible_v<_Tp>;\n+    concept destructible = __detail::__destructible<_Tp>;\n \n   /// [concept.constructible], concept constructible_from\n   template<typename _Tp, typename... _Args>"}, {"sha": "81d72abbdaa932d84bedee82b44452911225203e", "filename": "libstdc++-v3/testsuite/std/concepts/concepts.lang/concept.destructible/1.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cbb756fe9c8e13a743bdcf599481b31bd01ddbc/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fconcepts%2Fconcepts.lang%2Fconcept.destructible%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cbb756fe9c8e13a743bdcf599481b31bd01ddbc/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fconcepts%2Fconcepts.lang%2Fconcept.destructible%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fconcepts%2Fconcepts.lang%2Fconcept.destructible%2F1.cc?ref=0cbb756fe9c8e13a743bdcf599481b31bd01ddbc", "patch": "@@ -29,6 +29,7 @@ static_assert( std::destructible<int&&> );\n static_assert( std::destructible<const int&> );\n static_assert( !std::destructible<int[]> );\n static_assert( std::destructible<int[2]> );\n+static_assert( std::destructible<int[2][3]> );\n static_assert( !std::destructible<int()> );\n static_assert( std::destructible<int(*)()> );\n static_assert( std::destructible<int(&)()> );\n@@ -47,6 +48,8 @@ struct C\n   ~C() noexcept(false) { }\n };\n static_assert( !std::destructible<C> );\n+static_assert( std::destructible<C&> );\n+static_assert( !std::destructible<C[1]> );\n class D\n {\n public:\n@@ -55,3 +58,5 @@ class D\n   ~D() { }\n };\n static_assert( !std::destructible<D> );\n+static_assert( std::destructible<D&> );\n+static_assert( !std::destructible<D[1]> );"}]}