{"sha": "f3641ac70eb0ae9f8983b7ddb1660c92439565de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM2NDFhYzcwZWIwYWU5Zjg5ODNiN2RkYjE2NjBjOTI0Mzk1NjVkZQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-03-04T00:16:48Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-03-04T00:16:48Z"}, "message": "Daily bump.", "tree": {"sha": "ab3cea6cccdfb9d31ebbc730594cd7f5f5a6b3b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab3cea6cccdfb9d31ebbc730594cd7f5f5a6b3b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3641ac70eb0ae9f8983b7ddb1660c92439565de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3641ac70eb0ae9f8983b7ddb1660c92439565de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3641ac70eb0ae9f8983b7ddb1660c92439565de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3641ac70eb0ae9f8983b7ddb1660c92439565de/comments", "author": null, "committer": null, "parents": [{"sha": "cdfc2f6a6dcadd4d5a0e9e71986abb7ae685a5f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdfc2f6a6dcadd4d5a0e9e71986abb7ae685a5f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdfc2f6a6dcadd4d5a0e9e71986abb7ae685a5f2"}], "stats": {"total": 413, "additions": 412, "deletions": 1}, "files": [{"sha": "9cadf92f6bf7a67e856f616b16612e636e5da379", "filename": "gcc/ChangeLog", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3641ac70eb0ae9f8983b7ddb1660c92439565de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3641ac70eb0ae9f8983b7ddb1660c92439565de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3641ac70eb0ae9f8983b7ddb1660c92439565de", "patch": "@@ -1,3 +1,88 @@\n+2021-03-04  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/96963\n+\tPR middle-end/94655\n+\t* builtins.c (handle_array_ref): New helper.\n+\t(handle_mem_ref): New helper.\n+\t(compute_objsize_r): Factor out ARRAY_REF and MEM_REF handling\n+\tinto new helper functions.  Correct a workaround for vectorized\n+\tassignments.\n+\n+2021-03-03  Pat Haugen  <pthaugen@linux.ibm.com>\n+\n+\t* config/rs6000/dfp.md (extendddtd2, trunctddd2, *cmp<mode>_internal1,\n+\tfloatditd2, ftrunc<mode>2, fix<mode>di2, dfp_ddedpd_<mode>,\n+\tdfp_denbcd_<mode>, dfp_dxex_<mode>, dfp_diex_<mode>,\n+\t*dfp_sgnfcnc_<mode>, dfp_dscli_<mode>, dfp_dscri_<mode>): Update size\n+\tattribute for Power10.\n+\t* config/rs6000/mma.md (*movoo): Likewise.\n+\t* config/rs6000/rs6000.md (define_attr \"size\"): Add 256.\n+\t(define_mode_attr bits): Add DD/TD modes.\n+\t* config/rs6000/sync.md (load_quadpti, store_quadpti, load_lockedpti,\n+\tstore_conditionalpti): Update size attribute for Power10.\n+\n+2021-03-03  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\tPR bootstrap/92002\n+\t* config/sparc/t-sparc (tree-ssanames.o-warn): Don't error for\n+\t-Wuninitialized, -Wmaybe-uninitialized.\n+\t(wide-int.o-warn): Likewise.\n+\n+2021-03-03  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* common/config/arm/arm-common.c: Include configargs.h.\n+\t(arm_config_default): New function.\n+\t(arm_target_mode): Renamed from arm_target_thumb_only.  Handle\n+\tprocessors that do not support Thumb.  Take into account the\n+\t--with-mode configuration setting for selecting the default.\n+\t* config/arm/arm.h (OPTION_DEFAULT_SPECS): Remove entry for 'mode'.\n+\t(TARGET_MODE_SPEC_FUNCTIONS): Update for function name change.\n+\n+2021-03-03  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/97461\n+\t* gcov-io.h (GCOV_PREALLOCATED_KVP): Remove.\n+\n+2021-03-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR target/99234\n+\t* config/i386/i386.c (ix86_compute_frame_layout): For a SEH target,\n+\tpoint back the hard frame pointer to its default location when the\n+\tframe is larger than SEH_MAX_FRAME_SIZE.\n+\n+2021-03-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/99321\n+\t* config/i386/predicates.md (logic_operator): New define_predicate.\n+\t* config/i386/i386.md (mov + mem using comm arith peephole2):\n+\tPunt if operands[1] is EXT_REX_SSE_REGNO_P, AVX512BW is not enabled\n+\tand the inner mode is [QH]Imode.\n+\n+2021-03-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/99090\n+\t* dwarf2out.c (dw_loc_list_struct): Add end_entry member.\n+\t(new_loc_list): Clear end_entry.\n+\t(output_loc_list): Only use DW_LLE_startx_length for -gsplit-dwarf\n+\tif HAVE_AS_LEB128, otherwise use DW_LLE_startx_endx.  Fix comment\n+\ttypo.\n+\t(index_location_lists): For dwarf_version >= 5 without HAVE_AS_LEB128,\n+\tinitialize also end_entry.\n+\n+2021-03-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/99085\n+\t* cfgrtl.c (fixup_partitions): When changing some bbs from hot to cold\n+\tpartitions, if in non-layout mode after reorder_blocks also move\n+\taffected blocks to ensure a single partition transition.\n+\n+2021-03-03  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/96078\n+\t* cgraphunit.c (process_function_and_variable_attributes): Don't\n+\twarn about flatten on an alias if the target also has it.\n+\t* cgraph.h (symtab_node::get_alias_target_tree): New.\n+\n 2021-03-02  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* config/rs6000/rs6000.md (tls_get_tpointer_internal): Prepend"}, {"sha": "afcad2953c965d349b79087a55f1e7af2ef777b5", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3641ac70eb0ae9f8983b7ddb1660c92439565de/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3641ac70eb0ae9f8983b7ddb1660c92439565de/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=f3641ac70eb0ae9f8983b7ddb1660c92439565de", "patch": "@@ -1 +1 @@\n-20210303\n+20210304"}, {"sha": "66a910920b7bb77ff71949e5379804882a0a9b93", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3641ac70eb0ae9f8983b7ddb1660c92439565de/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3641ac70eb0ae9f8983b7ddb1660c92439565de/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=f3641ac70eb0ae9f8983b7ddb1660c92439565de", "patch": "@@ -1,3 +1,10 @@\n+2021-03-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/99324\n+\t* c-common.c (build_va_arg): Call c_common_mark_addressable_vec\n+\tinstead of mark_addressable.  Fix a comment typo -\n+\tneutrallly -> neutrally.\n+\n 2021-02-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/99304"}, {"sha": "6a0f5711de154c9f4513cdc7670fa731044bad4f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3641ac70eb0ae9f8983b7ddb1660c92439565de/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3641ac70eb0ae9f8983b7ddb1660c92439565de/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f3641ac70eb0ae9f8983b7ddb1660c92439565de", "patch": "@@ -1,3 +1,163 @@\n+2021-03-03  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99170\n+\t* module.cc (post_load_decls): New.\n+\t(lazy_snum, recursive_lazy): Move earlier.\n+\t(module_state::read_cluster): Push cloning onto post_load_decls.\n+\t(post_load_processing): New.  Do the cloning here.\n+\t(module_state::read_inits): Call post_load_processing.\n+\t(module_state::read_language): Likewise.\n+\t(lazy_load_binding, lazy_load_specializations): Likewise\n+\t(lazy_load_members): Likewise\n+\n+2021-03-03  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99170\n+\t* module.cc (trees_out::decl_value): Stream specialization keys\n+\tafter decl.\n+\t(trees_in::decl_value): Stream them back and insert after\n+\tcompleting the decl.\n+\t(trees_out::key_mergeable): Drop some streaming here ...\n+\t(trees_in::key_mergeable): ... and here.  Don't insert into\n+\tspecialization tables.\n+\n+2021-03-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* constraint.cc (struct sat_info): Document the different\n+\tmeanings of noisy() and diagnose_unsatisfaction_p() during\n+\tsatisfaction and requires-expression evaluation.\n+\t(tsubst_valid_expression_requirement): Take a sat_info instead\n+\tof a subst_info.  Perform the substitution quietly first.  Fold\n+\tin error-replaying code from diagnose_valid_expression.\n+\t(tsubst_simple_requirement): Take a sat_info instead of a\n+\tsubst_info.\n+\t(tsubst_type_requirement_1): New.  Fold in error-replaying code\n+\tfrom diagnose_valid_type.\n+\t(tsubst_type_requirement): Use the above.  Take a sat_info\n+\tinstead of a subst_info.\n+\t(tsubst_compound_requirement): Likewise.  Fold in\n+\terror-replaying code from diagnose_compound_requirement.\n+\t(tsubst_nested_requirement): Take a sat_info instead of a\n+\tsubst_info.  Fold in error-replaying code from\n+\tdiagnose_nested_requirement.\n+\t(tsubst_requirement): Take a sat_info instead of a subst_info.\n+\t(tsubst_requires_expr): Split into two versions, one that takes\n+\ta sat_info argument and another that takes a complain and\n+\tin_decl argument.  Remove outdated documentation.  Document the\n+\teffects of the sat_info argument.  Don't short-circuit\n+\tprocessing of requirements when diagnosing unsatisfaction,\n+\tmirroring diagnose_requires_expr.\n+\t(satisfy_nondeclaration_constraint) <case REQUIRES_EXPR>: Remove\n+\tassert, and se the three-parameter version of tsubst_requires_expr.\n+\t(diagnose_trait_expr): Make static.  Take a template argument\n+\tvector instead of a parameter mapping.\n+\t(diagnose_valid_expression): Remove.\n+\t(diagnose_valid_type): Remove.\n+\t(diagnose_simple_requirement): Remove.\n+\t(diagnose_compound_requirement): Remove.\n+\t(diagnose_type_requirement): Remove.\n+\t(diagnose_nested_requirement): Remove.\n+\t(diagnose_requirement): Remove.\n+\t(diagnose_requires_expr): Remove.\n+\t(diagnose_atomic_constraint): Take a sat_info instead of a\n+\tsubst_info.  Adjust call to diagnose_trait_expr.  Call\n+\ttsubst_requires_expr instead of diagnose_requires_expr.\n+\t(diagnose_constraints): Remove special casing of REQUIRES_EXPR\n+\tand just always call constraint_satisfaction_value.\n+\n+2021-03-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* constexpr.c (cxx_eval_call_expression): Adjust call to\n+\tevaluate_concept_check.\n+\t(cxx_eval_constant_expression) <case REQUIRES_EXPR>: Use\n+\tevaluate_requires_expression instead of\n+\tsatisfy_constraint_expression.\n+\t<case TEMPLATE_ID_EXPR>: Adjust call to evaluate_concept_check.\n+\t* constraint.cc (struct sat_info): Adjust comment about which\n+\tsatisfaction entrypoints use noisy-unsat.\n+\t(normalize_template_requirements): Remove (and adjust callers\n+\tappropriately).\n+\t(normalize_nontemplate_requirements): Likewise.\n+\t(tsubst_nested_requirement): Use constraint_satisfaction_value\n+\tinstead of satisfy_constraint_expression, which'll do the\n+\tnoisy replaying of ill-formed quiet satisfaction for us.\n+\t(decl_satisfied_cache): Adjust comment.\n+\t(satisfy_constraint): Rename to ...\n+\t(satisfy_normalized_constraints): ... this.\n+\t(satisfy_associated_constraints): Remove (and make its\n+\tcallers check for dependent arguments).\n+\t(satisfy_constraint_expression): Rename to ...\n+\t(satisfy_nondeclaration_constraints): ... this.  Assert that\n+\t'args' is empty when 't' is a concept-id.  Removing handling\n+\tbare constraint-expressions, and handle REQUIRES_EXPRs\n+\tspecially.  Adjust comment accordingly.\n+\t(satisfy_declaration_constraints): Assert in the two-parameter\n+\tversion that 't' is not a TEMPLATE_DECL.  Adjust following\n+\tremoval of normalize_(non)?template_requirements and\n+\tsatisfy_asociated_constraints.\n+\t(constraint_satisfaction_value): Combine the two- and\n+\tthree-parameter versions in the natural way.\n+\t(constraints_satisfied_p): Combine the one- and two-parameter\n+\tversions in the natural way.  Improve documentation.\n+\t(evaluate_requires_expr): Define.\n+\t(evaluate_concept_check): Remove 'complain' parameter.  Use\n+\tconstraint_satisfaction_value instead of\n+\tsatisfy_constraint_expression.\n+\t(diagnose_nested_requirement): Adjust following renaming of\n+\tsatisfy_constraint_expression.\n+\t(diagnose_constraints): Handle REQUIRES_EXPR by going through\n+\tdiagnose_requires_expr directly instead of treating it as a\n+\tconstraint-expression.  Improve documentation.\n+\t* cp-gimplify.c (cp_genericize_r) <case CALL_EXPR>: Adjust call\n+\tto evaluate_concept_check.\n+\t<case REQUIRES_EXPR>: Use evaluate_requires_expr instead of\n+\tconstraints_satisfied_p.\n+\t<case TEMPLATE_ID_EXPR>: Adjust call to evaluate_concept_check.\n+\t* cp-tree.h (evaluate_requires_expr): Declare.\n+\t(evaluate_concept_check): Remove tsubst_flag_t parameter.\n+\t(satisfy_constraint_expression): Remove declaration.\n+\t(constraints_satisfied_p): Remove one-parameter declaration.\n+\tAdd a default argument to the two-parameter declaration.\n+\t* cvt.c (convert_to_void): Adjust call to\n+\tevaluate_concept_check.\n+\n+2021-03-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/82959\n+\t* call.c (op_is_ordered): Handle TRUTH_ANDIF_EXPR, TRUTH_ORIF_EXPR\n+\tand COMPOUND_EXPR.\n+\n+2021-03-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97034\n+\tPR c++/99009\n+\t* pt.c (build_deduction_guide): Use INNERMOST_TEMPLATE_ARGS.\n+\t(maybe_aggr_guide): Use the original template type where needed.  In\n+\ta class member template, partially instantiate the result of\n+\tcollect_ctor_idx_types.\n+\t(do_class_deduction): Defer the deduction until the enclosing\n+\tscope is non-dependent.\n+\n+2021-03-03  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/95675\n+\t* call.c (build_temp): Wrap a CALL_EXPR in a TARGET_EXPR\n+\tif it didn't get one before.\n+\n+2021-03-03  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99344\n+\t* module.cc (trees_out::decl_node): Small refactor.\n+\t(depset::hash::add_binding_entity): Return true on meeting an\n+\timport.  Set namespace's import here.\n+\t(module_state:write_namespaces): Inform of purview too.\n+\t(module_state:read_namespaces): Adjust.\n+\t* name-lookup.c (implicitly_export_namespace): Delete.\n+\t(do_pushdecl): Don't call it.\n+\t(push_namespace): Likewise, set purview.\n+\t(add_imported_namespace): Reorder parms.\n+\t* name-lookup.h (add_imported_namespace): Alter param ordering.\n+\n 2021-03-02  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/99251"}, {"sha": "71d6c6c3f757ed00a4d5482914beec621c37c67a", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3641ac70eb0ae9f8983b7ddb1660c92439565de/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3641ac70eb0ae9f8983b7ddb1660c92439565de/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=f3641ac70eb0ae9f8983b7ddb1660c92439565de", "patch": "@@ -1,3 +1,8 @@\n+2021-03-03  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/99337\n+\t* dmd/MERGE: Merge upstream dmd a3c9bf422.\n+\n 2021-02-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* dmd/MERGE: Merge upstream dmd 7132b3537."}, {"sha": "f701ae745e219677f1fdb101ba6fd74ffec954d2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3641ac70eb0ae9f8983b7ddb1660c92439565de/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3641ac70eb0ae9f8983b7ddb1660c92439565de/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f3641ac70eb0ae9f8983b7ddb1660c92439565de", "patch": "@@ -1,3 +1,117 @@\n+2021-03-04  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* gcc.misc-tests/outputs.exp: Enumerate tests.\n+\n+2021-03-04  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* gcc.misc-tests/outputs.exp: Append discriminating\n+\tsuffixes to tests with duplicate names.\n+\t(outest): Assert that each running test has a unique\n+\tname.\n+\n+2021-03-04  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/96963\n+\tPR middle-end/94655\n+\t* gcc.dg/Wstringop-overflow-47.c: Xfail tests.\n+\t* gcc.dg/Wstringop-overflow-65.c: New test.\n+\t* gcc.dg/Warray-bounds-69.c: Same.\n+\n+2021-03-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/96474\n+\t* g++.dg/cpp1z/class-deduction83.C: New test.\n+\n+2021-03-03  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvt_fXX_fXX.c:\n+\tNew test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvtx.c:\n+\tNew test.\n+\n+2021-03-03  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmovn_high.c:\n+\tNew test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vqmovn_high.c:\n+\tNew test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vqmovun_high.c:\n+\tNew test.\n+\n+2021-03-03  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vrshrn_high_n.c:\n+\tNew test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vshrn_high_n.c:\n+\tNew test.\n+\n+2021-03-03  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vXXXhn_high.inc:\n+\tNew test template.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vaddhn_high.c:\n+\tNew test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vraddhn_high.c:\n+\tNew test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vrsubhn_high.c:\n+\tNew test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vsubhn_high.c:\n+\tNew test.\n+\n+2021-03-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/82959\n+\t* g++.dg/cpp1z/eval-order10.C: New test.\n+\n+2021-03-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97034\n+\tPR c++/99009\n+\t* g++.dg/cpp1z/class-deduction81.C: New test.\n+\t* g++.dg/cpp1z/class-deduction82.C: New test.\n+\t* g++.dg/cpp2a/class-deduction-aggr8.C: New test.\n+\t* g++.dg/cpp2a/class-deduction-aggr9.C: New test.\n+\t* g++.dg/cpp2a/class-deduction-aggr10.C: New test.\n+\n+2021-03-03  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/95675\n+\t* g++.dg/cpp0x/decltype-call5.C: New test.\n+\t* g++.dg/cpp0x/decltype-call6.C: New test.\n+\n+2021-03-03  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* gcc.target/i386/pr95798-1.c: Add -fomit-frame-pointer to\n+\tdg-options.\n+\t* gcc.target/i386/pr95798-2.c: Likewise.\n+\n+2021-03-03  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99344\n+\t* g++.dg/modules/namespace-2_a.C\n+\t* g++.dg/modules/pr99344_a.C\n+\t* g++.dg/modules/pr99344_b.C\n+\n+2021-03-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/99321\n+\t* gcc.target/i386/pr99321.c: New test.\n+\n+2021-03-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/99324\n+\t* gcc.c-torture/compile/pr99324.c: New test.\n+\n+2021-03-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/99085\n+\t* gcc.dg/graphite/pr99085.c: New test.\n+\n+2021-03-03  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/96078\n+\t* g++.dg/ext/attr-flatten1.C: New test.\n+\n 2021-03-02  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* gcc.misc-tests/outputs.exp: Skip @file -save-temps"}, {"sha": "79fe36ef961f0ea35632bb463f715345897ac166", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3641ac70eb0ae9f8983b7ddb1660c92439565de/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3641ac70eb0ae9f8983b7ddb1660c92439565de/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=f3641ac70eb0ae9f8983b7ddb1660c92439565de", "patch": "@@ -1,3 +1,8 @@\n+2021-03-03  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* dwarf.c (read_line_program): Don't special case file 0.\n+\t(read_function_entry): Likewise.\n+\n 2021-03-02  Ian Lance Taylor  <iant@golang.org>\n \n \tPR libbacktrace/98818"}, {"sha": "25e2f87a471deb72c07e20b571e9fce51f572ec8", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3641ac70eb0ae9f8983b7ddb1660c92439565de/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3641ac70eb0ae9f8983b7ddb1660c92439565de/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=f3641ac70eb0ae9f8983b7ddb1660c92439565de", "patch": "@@ -1,3 +1,15 @@\n+2021-03-03  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/97461\n+\t* config.in: Regenerate.\n+\t* configure: Likewise.\n+\t* configure.ac: Check sys/mman.h header file\n+\t* libgcov-driver.c (struct gcov_kvp): Remove static\n+\tpre-allocated pool and use a dynamic one.\n+\t* libgcov.h (MMAP_CHUNK_SIZE): New.\n+\t(gcov_counter_add): Use mmap to allocate pool for struct\n+\tgcov_kvp.\n+\n 2021-03-02  Michael Meissner  <meissner@linux.ibm.com>\n \n \t* config/rs6000/_sprintfkf.h (__sprintfkf): Fix prototype to match"}, {"sha": "2b62587142b54991a52e92a2a1dea2482074fda5", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3641ac70eb0ae9f8983b7ddb1660c92439565de/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3641ac70eb0ae9f8983b7ddb1660c92439565de/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=f3641ac70eb0ae9f8983b7ddb1660c92439565de", "patch": "@@ -1,3 +1,10 @@\n+2021-03-03  Vittorio Zecca  <zeccav@gmail.com>\n+\t    Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR libfortran/81986\n+\t* runtime/string.c (gfc_itoa): Cast to unsigned before\n+\tnegating.\n+\n 2021-02-12  Steve Kargl  <sgk@troutmask.apl.washington.edu>\n \n \tPR libfortran/95647"}, {"sha": "6f1efa495b4b40a04e14fa721c45b9188897f997", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3641ac70eb0ae9f8983b7ddb1660c92439565de/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3641ac70eb0ae9f8983b7ddb1660c92439565de/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f3641ac70eb0ae9f8983b7ddb1660c92439565de", "patch": "@@ -1,3 +1,19 @@\n+2021-03-03  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* config/abi/post/i386-solaris/baseline_symbols.txt: Regenerate.\n+\t* config/abi/post/i386-solaris/amd64/baseline_symbols.txt:\n+\tLikewise.\n+\t* config/abi/post/sparc-solaris/baseline_symbols.txt: Likewise.\n+\t* config/abi/post/sparc-solaris/sparcv9/baseline_symbols.txt:\n+\tLikewise.\n+\n+2021-03-03  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* include/experimental/bits/simd.h: Replace reserved _X, _B by\n+\t_Xp, _Bp.\n+\t* include/experimental/bits/simd_builtin.h: Likewise.\n+\t* include/experimental/bits/simd_x86.h: Likewise.\n+\n 2021-02-27  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/99301"}]}