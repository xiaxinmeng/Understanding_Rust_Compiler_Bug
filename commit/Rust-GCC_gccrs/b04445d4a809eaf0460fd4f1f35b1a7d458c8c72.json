{"sha": "b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA0NDQ1ZDRhODA5ZWFmMDQ2MGZkNGYxZjM1YjFhN2Q0NThjOGM3Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-05-13T19:15:13Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-05-13T19:16:49Z"}, "message": "c++: Replace \"C++2a\" with \"C++20\".\n\nC++20 isn't final quite yet, but all that remains is formalities, so let's\ngo ahead and change all the references.\n\nI think for the next C++ standard we can just call it C++23 rather than\nC++2b, since the committee has been consistent about time-based releases\nrather than feature-based.\n\ngcc/c-family/ChangeLog\n2020-05-13  Jason Merrill  <jason@redhat.com>\n\n\t* c.opt (std=c++20): Make c++2a the alias.\n\t(std=gnu++20): Likewise.\n\t* c-common.h (cxx_dialect): Change cxx2a to cxx20.\n\t* c-opts.c: Adjust.\n\t* c-cppbuiltin.c: Adjust.\n\t* c-ubsan.c: Adjust.\n\t* c-warn.c: Adjust.\n\ngcc/cp/ChangeLog\n2020-05-13  Jason Merrill  <jason@redhat.com>\n\n\t* call.c, class.c, constexpr.c, constraint.cc, decl.c, init.c,\n\tlambda.c, lex.c, method.c, name-lookup.c, parser.c, pt.c, tree.c,\n\ttypeck2.c: Change cxx2a to cxx20.\n\nlibcpp/ChangeLog\n2020-05-13  Jason Merrill  <jason@redhat.com>\n\n\t* include/cpplib.h (enum c_lang): Change CXX2A to CXX20.\n\t* init.c, lex.c: Adjust.", "tree": {"sha": "1d745c4af52475c2d51a48a637c14c520fa9664d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d745c4af52475c2d51a48a637c14c520fa9664d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3cb34c632222093718fc55f45dde68e97abf9dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3cb34c632222093718fc55f45dde68e97abf9dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3cb34c632222093718fc55f45dde68e97abf9dc"}], "stats": {"total": 1385, "additions": 703, "deletions": 682}, "files": [{"sha": "7bd78c085daee49a75306256fbd842bbf703e0e6", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,3 +1,13 @@\n+2020-05-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* c.opt (std=c++20): Make c++2a the alias.\n+\t(std=gnu++20): Likewise.\n+\t* c-common.h (cxx_dialect): Change cxx2a to cxx20.\n+\t* c-opts.c: Adjust.\n+\t* c-cppbuiltin.c: Adjust.\n+\t* c-ubsan.c: Adjust.\n+\t* c-warn.c: Adjust.\n+\n 2020-05-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* c-ada-spec.c (dump_ads): Output pragma Warnings (\"U\"); on entry."}, {"sha": "b1379faa412e3646a443969c0067f5c4fb23e107", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -324,7 +324,7 @@ static bool nonnull_check_p (tree, unsigned HOST_WIDE_INT);\n    ObjC is like C except that D_OBJC and D_CXX_OBJC are not set\n    C++ --std=c++98: D_CONLY | D_CXX11 | D_CXX20 | D_OBJC\n    C++ --std=c++11: D_CONLY | D_CXX20 | D_OBJC\n-   C++ --std=c++2a: D_CONLY | D_OBJC\n+   C++ --std=c++20: D_CONLY | D_OBJC\n    ObjC++ is like C++ except that D_OBJC is not set\n \n    If -fno-asm is used, D_ASM is added to the mask.  If"}, {"sha": "7c1a6370aae575f3ba560911cfd0dbc1ac053f05", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -720,8 +720,8 @@ enum cxx_dialect {\n   cxx14,\n   /* C++17 */\n   cxx17,\n-  /* C++2a (C++20?) */\n-  cxx2a\n+  /* C++20 */\n+  cxx20\n };\n \n /* The C++ dialect being used. C++98 is the default.  */"}, {"sha": "a7d65d63934bdd77747344a6d27eecca3ad36af5", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -988,7 +988,7 @@ c_cpp_builtins (cpp_reader *pfile)\n \t}\n       if (cxx_dialect > cxx17)\n \t{\n-\t  /* Set feature test macros for C++2a.  */\n+\t  /* Set feature test macros for C++20.  */\n \t  cpp_define (pfile, \"__cpp_init_captures=201803L\");\n \t  cpp_define (pfile, \"__cpp_generic_lambdas=201707L\");\n \t  cpp_define (pfile, \"__cpp_designated_initializers=201707L\");\n@@ -1006,7 +1006,7 @@ c_cpp_builtins (cpp_reader *pfile)\n \t}\n       if (flag_concepts)\n         {\n-          if (cxx_dialect >= cxx2a)\n+\t  if (cxx_dialect >= cxx20)\n             cpp_define (pfile, \"__cpp_concepts=201907L\");\n           else\n             cpp_define (pfile, \"__cpp_concepts=201507L\");"}, {"sha": "bd617d3df18eb478884d25714d699180ff85e80b", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -112,7 +112,7 @@ static void set_std_cxx98 (int);\n static void set_std_cxx11 (int);\n static void set_std_cxx14 (int);\n static void set_std_cxx17 (int);\n-static void set_std_cxx2a (int);\n+static void set_std_cxx20 (int);\n static void set_std_c89 (int, int);\n static void set_std_c99 (int);\n static void set_std_c11 (int);\n@@ -636,10 +636,10 @@ c_common_handle_option (size_t scode, const char *arg, HOST_WIDE_INT value,\n \tset_std_cxx17 (code == OPT_std_c__17 /* ISO */);\n       break;\n \n-    case OPT_std_c__2a:\n-    case OPT_std_gnu__2a:\n+    case OPT_std_c__20:\n+    case OPT_std_gnu__20:\n       if (!preprocessing_asm_p)\n-\tset_std_cxx2a (code == OPT_std_c__2a /* ISO */);\n+\tset_std_cxx20 (code == OPT_std_c__20 /* ISO */);\n       break;\n \n     case OPT_std_c90:\n@@ -925,11 +925,11 @@ c_common_post_options (const char **pfilename)\n   /* -Wcomma-subscript is enabled by default in C++20.  */\n   SET_OPTION_IF_UNSET (&global_options, &global_options_set,\n \t\t       warn_comma_subscript,\n-\t\t       cxx_dialect >= cxx2a && warn_deprecated);\n+\t\t       cxx_dialect >= cxx20 && warn_deprecated);\n \n   /* -Wvolatile is enabled by default in C++20.  */\n   SET_OPTION_IF_UNSET (&global_options, &global_options_set, warn_volatile,\n-\t\t       cxx_dialect >= cxx2a && warn_deprecated);\n+\t\t       cxx_dialect >= cxx20 && warn_deprecated);\n \n   /* Declone C++ 'structors if -Os.  */\n   if (flag_declone_ctor_dtor == -1)\n@@ -1021,9 +1021,9 @@ c_common_post_options (const char **pfilename)\n   if (flag_sized_deallocation == -1)\n     flag_sized_deallocation = (cxx_dialect >= cxx14);\n \n-  /* char8_t support is new in C++2A.  */\n+  /* char8_t support is new in C++20.  */\n   if (flag_char8_t == -1)\n-    flag_char8_t = (cxx_dialect >= cxx2a);\n+    flag_char8_t = (cxx_dialect >= cxx20);\n \n   if (flag_extern_tls_init)\n     {\n@@ -1045,11 +1045,11 @@ c_common_post_options (const char **pfilename)\n   if (warn_return_type == -1 && c_dialect_cxx ())\n     warn_return_type = 1;\n \n-  /* C++2a is the final version of concepts. We still use -fconcepts\n+  /* C++20 is the final version of concepts. We still use -fconcepts\n      to know when concepts are enabled. Note that -fconcepts-ts can\n      be used to include additional features, although modified to\n      work with the standard.  */\n-  if (cxx_dialect >= cxx2a || flag_concepts_ts)\n+  if (cxx_dialect >= cxx20 || flag_concepts_ts)\n     flag_concepts = 1;\n   else if (flag_concepts)\n     /* For -std=c++17 -fconcepts, imply -fconcepts-ts.  */\n@@ -1724,18 +1724,18 @@ set_std_cxx17 (int iso)\n \n /* Set the C++ 202a draft standard (without GNU extensions if ISO).  */\n static void\n-set_std_cxx2a (int iso)\n+set_std_cxx20 (int iso)\n {\n-  cpp_set_lang (parse_in, iso ? CLK_CXX2A: CLK_GNUCXX2A);\n+  cpp_set_lang (parse_in, iso ? CLK_CXX20: CLK_GNUCXX20);\n   flag_no_gnu_keywords = iso;\n   flag_no_nonansi_builtin = iso;\n   flag_iso = iso;\n   /* C++17 includes the C11 standard library.  */\n   flag_isoc94 = 1;\n   flag_isoc99 = 1;\n   flag_isoc11 = 1;\n-  /* C++2a includes concepts. */\n-  cxx_dialect = cxx2a;\n+  /* C++20 includes concepts. */\n+  cxx_dialect = cxx20;\n   lang_hooks.name = \"GNU C++17\"; /* Pretend C++17 until standardization.  */\n }\n "}, {"sha": "06a96399e64bdd45d17116f4712d38fabc1986e4", "filename": "gcc/c-family/c-ubsan.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fc-family%2Fc-ubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fc-family%2Fc-ubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ubsan.c?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -137,9 +137,9 @@ ubsan_instrument_shift (location_t loc, enum tree_code code,\n       || maybe_ne (GET_MODE_BITSIZE (TYPE_MODE (type0)),\n \t\t   TYPE_PRECISION (type0))\n       || !sanitize_flags_p (SANITIZE_SHIFT_BASE)\n-      /* In C++2a and later, shifts are well defined except when\n+      /* In C++20 and later, shifts are well defined except when\n \t the second operand is not within bounds.  */\n-      || cxx_dialect >= cxx2a)\n+      || cxx_dialect >= cxx20)\n     ;\n \n   /* For signed x << y, in C99/C11, the following:"}, {"sha": "c32d8228b5c999621591aa04f83f6c369706b3dd", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -2562,7 +2562,7 @@ diagnose_mismatched_attributes (tree olddecl, tree newdecl)\n /* Warn if signed left shift overflows.  We don't warn\n    about left-shifting 1 into the sign bit in C++14; cf.\n    <http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3367.html#1457>\n-   and don't warn for C++2a at all, as signed left shifts never\n+   and don't warn for C++20 at all, as signed left shifts never\n    overflow.\n    LOC is a location of the shift; OP0 and OP1 are the operands.\n    Return true if an overflow is detected, false otherwise.  */\n@@ -2578,7 +2578,7 @@ maybe_warn_shift_overflow (location_t loc, tree op0, tree op1)\n   unsigned int prec0 = TYPE_PRECISION (type0);\n \n   /* Left-hand operand must be signed.  */\n-  if (TYPE_UNSIGNED (type0) || cxx_dialect >= cxx2a)\n+  if (TYPE_UNSIGNED (type0) || cxx_dialect >= cxx20)\n     return false;\n \n   unsigned int min_prec = (wi::min_precision (wi::to_wide (op0), SIGNED)"}, {"sha": "89a58282b3f5bce73fa97c432252939fd63e5ed6", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -2074,11 +2074,11 @@ C++ ObjC++\n Conform to the ISO 2017 C++ standard.\n \n std=c++2a\n-C++ ObjC++\n+C++ ObjC++ Alias(std=c++20) Undocumented\n Conform to the ISO 2020 C++ draft standard (experimental and incomplete support).\n \n std=c++20\n-C++ ObjC++ Alias(std=c++2a)\n+C++ ObjC++\n Conform to the ISO 2020 C++ draft standard (experimental and incomplete support).\n \n std=c11\n@@ -2152,11 +2152,11 @@ C++ ObjC++\n Conform to the ISO 2017 C++ standard with GNU extensions.\n \n std=gnu++2a\n-C++ ObjC++\n+C++ ObjC++ Alias(std=gnu++20)\n Conform to the ISO 2020 C++ draft standard with GNU extensions (experimental and incomplete support).\n \n std=gnu++20\n-C++ ObjC++ Alias(std=gnu++2a)\n+C++ ObjC++\n Conform to the ISO 2020 C++ draft standard with GNU extensions (experimental and incomplete support).\n \n std=gnu11"}, {"sha": "11b3fdc0bc72de7483b2f04134458b2048283ab3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,3 +1,9 @@\n+2020-05-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* call.c, class.c, constexpr.c, constraint.cc, decl.c, init.c,\n+\tlambda.c, lex.c, method.c, name-lookup.c, parser.c, pt.c, tree.c,\n+\ttypeck2.c: Change cxx2a to cxx20.\n+\n 2020-05-12  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/95074"}, {"sha": "940e65da6319dfbda70a115ea6c2a0b32edcfb49", "filename": "gcc/cp/call.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -6041,7 +6041,7 @@ add_operator_candidates (z_candidate **candidates,\n \n       /* Maybe add C++20 rewritten comparison candidates.  */\n       tree_code rewrite_code = ERROR_MARK;\n-      if (cxx_dialect >= cxx2a\n+      if (cxx_dialect >= cxx20\n \t  && nargs == 2\n \t  && (OVERLOAD_TYPE_P (arg1_type) || OVERLOAD_TYPE_P (arg2_type)))\n \tswitch (code)\n@@ -6599,7 +6599,7 @@ extract_call_expr (tree call)\n     call = TREE_OPERAND (call, 0);\n   if (TREE_CODE (call) == TARGET_EXPR)\n     call = TARGET_EXPR_INITIAL (call);\n-  if (cxx_dialect >= cxx2a)\n+  if (cxx_dialect >= cxx20)\n     switch (TREE_CODE (call))\n       {\n \t/* C++20 rewritten comparison operators.  */\n@@ -7280,7 +7280,7 @@ maybe_inform_about_fndecl_for_bogus_argument_init (tree fn, int argnum)\n static void\n maybe_warn_array_conv (location_t loc, conversion *c, tree expr)\n {\n-  if (cxx_dialect >= cxx2a)\n+  if (cxx_dialect >= cxx20)\n     return;\n \n   tree type = TREE_TYPE (expr);\n@@ -7292,7 +7292,7 @@ maybe_warn_array_conv (location_t loc, conversion *c, tree expr)\n \n   if (conv_binds_to_array_of_unknown_bound (c))\n     pedwarn (loc, OPT_Wpedantic, \"conversions to arrays of unknown bound \"\n-\t     \"are only available with %<-std=c++2a%> or %<-std=gnu++2a%>\");\n+\t     \"are only available with %<-std=c++20%> or %<-std=gnu++20%>\");\n }\n \n /* Perform the conversions in CONVS on the expression EXPR.  FN and\n@@ -10251,7 +10251,7 @@ build_new_method_call_1 (tree instance, tree fns, vec<tree, va_gc> **args,\n \t the two.  */\n       if (DECL_CONSTRUCTOR_P (fn)\n \t  && !(flags & LOOKUP_ONLYCONVERTING)\n-\t  && cxx_dialect >= cxx2a\n+\t  && cxx_dialect >= cxx20\n \t  && CP_AGGREGATE_TYPE_P (basetype)\n \t  && !user_args->is_empty ())\n \t{"}, {"sha": "15f490da3fca0b3b5434051751adfde527207ea8", "filename": "gcc/cp/class.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -5314,7 +5314,7 @@ trivial_default_constructor_is_constexpr (tree t)\n        struct S { int i; constexpr S() = default; };\n \n      should work.  */\n-  return (cxx_dialect >= cxx2a\n+  return (cxx_dialect >= cxx20\n \t  || is_really_empty_class (t, /*ignore_vptr*/true));\n }\n \n@@ -5691,7 +5691,7 @@ finalize_literal_type_property (tree t)\n     CLASSTYPE_LITERAL_P (t) = false;\n   else if (CLASSTYPE_LITERAL_P (t)\n \t   && TYPE_HAS_NONTRIVIAL_DESTRUCTOR (t)\n-\t   && (cxx_dialect < cxx2a || !type_maybe_constexpr_destructor (t)))\n+\t   && (cxx_dialect < cxx20 || !type_maybe_constexpr_destructor (t)))\n     CLASSTYPE_LITERAL_P (t) = false;\n   else if (CLASSTYPE_LITERAL_P (t) && LAMBDA_TYPE_P (t))\n     CLASSTYPE_LITERAL_P (t) = (cxx_dialect >= cxx17);\n@@ -5745,7 +5745,7 @@ explain_non_literal_class (tree t)\n     inform (UNKNOWN_LOCATION,\n \t    \"  %qT is a closure type, which is only literal in \"\n \t    \"C++17 and later\", t);\n-  else if (cxx_dialect < cxx2a && TYPE_HAS_NONTRIVIAL_DESTRUCTOR (t))\n+  else if (cxx_dialect < cxx20 && TYPE_HAS_NONTRIVIAL_DESTRUCTOR (t))\n     inform (UNKNOWN_LOCATION, \"  %q+T has a non-trivial destructor\", t);\n   else if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (t)\n \t   && !type_maybe_constexpr_destructor (t))\n@@ -5893,7 +5893,7 @@ check_bases_and_members (tree t)\n      Again, other conditions for being an aggregate are checked\n      elsewhere.  */\n   CLASSTYPE_NON_AGGREGATE (t)\n-    |= ((cxx_dialect < cxx2a\n+    |= ((cxx_dialect < cxx20\n \t ? type_has_user_provided_or_explicit_constructor (t)\n \t : TYPE_HAS_USER_CONSTRUCTOR (t))\n \t|| TYPE_POLYMORPHIC_P (t));\n@@ -7499,7 +7499,7 @@ finish_struct (tree t, tree attributes)\n       /* Remember current #pragma pack value.  */\n       TYPE_PRECISION (t) = maximum_field_alignment;\n \n-      if (cxx_dialect < cxx2a)\n+      if (cxx_dialect < cxx20)\n \t{\n \t  if (!CLASSTYPE_NON_AGGREGATE (t)\n \t      && type_has_user_provided_or_explicit_constructor (t))"}, {"sha": "04faabc02583328caa944ccd495c5998c6f58533", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -768,7 +768,7 @@ static bool\n cx_check_missing_mem_inits (tree ctype, tree body, bool complain)\n {\n   /* We allow uninitialized bases/fields in C++20.  */\n-  if (cxx_dialect >= cxx2a)\n+  if (cxx_dialect >= cxx20)\n     return false;\n \n   unsigned nelts = 0;\n@@ -1723,7 +1723,7 @@ modifying_const_object_error (tree expr, tree obj)\n static inline bool\n cxx_replaceable_global_alloc_fn (tree fndecl)\n {\n-  return (cxx_dialect >= cxx2a\n+  return (cxx_dialect >= cxx20\n \t  && IDENTIFIER_NEWDEL_OP_P (DECL_NAME (fndecl))\n \t  && CP_DECL_CONTEXT (fndecl) == global_namespace\n \t  && (DECL_IS_REPLACEABLE_OPERATOR_NEW_P (fndecl)\n@@ -1736,7 +1736,7 @@ cxx_replaceable_global_alloc_fn (tree fndecl)\n static inline bool\n cxx_placement_new_fn (tree fndecl)\n {\n-  if (cxx_dialect >= cxx2a\n+  if (cxx_dialect >= cxx20\n       && IDENTIFIER_NEW_OP_P (DECL_NAME (fndecl))\n       && CP_DECL_CONTEXT (fndecl) == global_namespace\n       && !DECL_IS_REPLACEABLE_OPERATOR_NEW_P (fndecl)\n@@ -1789,7 +1789,7 @@ is_std_allocator_allocate (tree fndecl)\n static inline bool\n cxx_dynamic_cast_fn_p (tree fndecl)\n {\n-  return (cxx_dialect >= cxx2a\n+  return (cxx_dialect >= cxx20\n \t  && id_equal (DECL_NAME (fndecl), \"__dynamic_cast\")\n \t  && CP_DECL_CONTEXT (fndecl) == global_namespace);\n }\n@@ -2628,7 +2628,7 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n      of value-initializing it.  (reduced_constant_expression_p is expected to\n      take care of clearing the flag.)  */\n   if (TREE_CODE (result) == CONSTRUCTOR\n-      && (cxx_dialect < cxx2a\n+      && (cxx_dialect < cxx20\n \t  || !DECL_CONSTRUCTOR_P (fun)))\n     clear_no_implicit_zero (result);\n \n@@ -2661,11 +2661,11 @@ reduced_constant_expression_p (tree t)\n \t  if (TREE_CODE (TREE_TYPE (t)) == VECTOR_TYPE)\n \t    /* An initialized vector would have a VECTOR_CST.  */\n \t    return false;\n-\t  else if (cxx_dialect >= cxx2a\n+\t  else if (cxx_dialect >= cxx20\n \t\t   /* An ARRAY_TYPE doesn't have any TYPE_FIELDS.  */\n \t\t   && TREE_CODE (TREE_TYPE (t)) == ARRAY_TYPE)\n \t    field = NULL_TREE;\n-\t  else if (cxx_dialect >= cxx2a\n+\t  else if (cxx_dialect >= cxx20\n \t\t   && TREE_CODE (TREE_TYPE (t)) == UNION_TYPE)\n \t    {\n \t      if (CONSTRUCTOR_NELTS (t) == 0)\n@@ -2784,13 +2784,13 @@ cxx_eval_check_shift_p (location_t loc, const constexpr_ctx *ctx,\n      representable in the corresponding unsigned type of the result type,\n      then that value, converted to the result type, is the resulting value;\n      otherwise, the behavior is undefined.\n-     For C++2a:\n+     For C++20:\n      The value of E1 << E2 is the unique value congruent to E1 x 2^E2 modulo\n      2^N, where N is the range exponent of the type of the result.  */\n   if (code == LSHIFT_EXPR\n       && !TYPE_UNSIGNED (lhstype)\n       && cxx_dialect >= cxx11\n-      && cxx_dialect < cxx2a)\n+      && cxx_dialect < cxx20)\n     {\n       if (tree_int_cst_sgn (lhs) == -1)\n \t{\n@@ -4803,7 +4803,7 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n       if (code == UNION_TYPE && CONSTRUCTOR_NELTS (*valp)\n \t  && CONSTRUCTOR_ELT (*valp, 0)->index != index)\n \t{\n-\t  if (cxx_dialect < cxx2a)\n+\t  if (cxx_dialect < cxx20)\n \t    {\n \t      if (!ctx->quiet)\n \t\terror_at (cp_expr_loc_or_input_loc (t),\n@@ -5422,7 +5422,7 @@ inline_asm_in_constexpr_error (location_t loc)\n   auto_diagnostic_group d;\n   error_at (loc, \"inline assembly is not a constant expression\");\n   inform (loc, \"only unevaluated inline assembly is allowed in a \"\n-\t  \"%<constexpr%> function in C++2a\");\n+\t  \"%<constexpr%> function in C++20\");\n }\n \n /* Attempt to reduce the expression T to a constant value.\n@@ -6582,7 +6582,7 @@ cxx_eval_outermost_constant_expr (tree t, bool allow_non_constant,\n \ttype = TREE_TYPE (object);\n       else\n \t{\n-\t  if (cxx_dialect < cxx2a)\n+\t  if (cxx_dialect < cxx20)\n \t    return t;\n \t  if (TREE_CODE (t) != CALL_EXPR && TREE_CODE (t) != AGGR_INIT_EXPR)\n \t    return t;\n@@ -6595,7 +6595,7 @@ cxx_eval_outermost_constant_expr (tree t, bool allow_non_constant,\n \t    is_consteval = true;\n \t}\n     }\n-  else if (cxx_dialect >= cxx2a\n+  else if (cxx_dialect >= cxx20\n \t   && (TREE_CODE (t) == CALL_EXPR\n \t       || TREE_CODE (t) == AGGR_INIT_EXPR\n \t       || TREE_CODE (t) == TARGET_EXPR))\n@@ -7422,7 +7422,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n \t\t    /* Allow any built-in function; if the expansion\n \t\t       isn't constant, we'll deal with that then.  */\n \t\t    && !fndecl_built_in_p (fun)\n-\t\t    /* In C++2a, replaceable global allocation functions\n+\t\t    /* In C++20, replaceable global allocation functions\n \t\t       are constant expressions.  */\n \t\t    && (!cxx_replaceable_global_alloc_fn (fun)\n \t\t\t|| TREE_CODE (t) != CALL_EXPR\n@@ -7844,20 +7844,20 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n       return false;\n \n     case OBJ_TYPE_REF:\n-      if (cxx_dialect >= cxx2a)\n-\t/* In C++2a virtual calls can be constexpr, don't give up yet.  */\n+      if (cxx_dialect >= cxx20)\n+\t/* In C++20 virtual calls can be constexpr, don't give up yet.  */\n \treturn true;\n       else if (flags & tf_error)\n \terror_at (loc,\n-\t\t  \"virtual functions cannot be %<constexpr%> before C++2a\");\n+\t\t  \"virtual functions cannot be %<constexpr%> before C++20\");\n       return false;\n \n     case TYPEID_EXPR:\n       /* In C++20, a typeid expression whose operand is of polymorphic\n \t class type can be constexpr.  */\n       {\n         tree e = TREE_OPERAND (t, 0);\n-\tif (cxx_dialect < cxx2a\n+\tif (cxx_dialect < cxx20\n \t    && strict\n \t    && !TYPE_P (e)\n \t    && !type_dependent_expression_p (e)\n@@ -8153,7 +8153,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n      return true;\n \n     case COND_EXPR:\n-      if (COND_EXPR_IS_VEC_DELETE (t) && cxx_dialect < cxx2a)\n+      if (COND_EXPR_IS_VEC_DELETE (t) && cxx_dialect < cxx20)\n \t{\n \t  if (flags & tf_error)\n \t    error_at (loc, \"%<delete[]%> is not a constant expression\");"}, {"sha": "3a17005232e5ed84d1c1ec92651f9369040b6bfa", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1473,7 +1473,7 @@ finish_shorthand_constraint (tree decl, tree constr)\n      The standard behavior cannot be overridden by -fconcepts-ts.  */\n   bool variadic_concept_p = template_parameter_pack_p (proto);\n   bool declared_pack_p = template_parameter_pack_p (decl);\n-  bool apply_to_each_p = (cxx_dialect >= cxx2a) ? true : !variadic_concept_p;\n+  bool apply_to_each_p = (cxx_dialect >= cxx20) ? true : !variadic_concept_p;\n \n   /* Get the argument and overload used for the requirement\n      and adjust it if we're going to expand later.  */"}, {"sha": "37ab48184864c9aeb3e45c588e7837f511ffdce3", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -928,7 +928,7 @@ static bool\n function_requirements_equivalent_p (tree newfn, tree oldfn)\n {\n   /* In the concepts TS, the combined constraints are compared.  */\n-  if (cxx_dialect < cxx2a)\n+  if (cxx_dialect < cxx20)\n     {\n       tree ci1 = get_constraints (oldfn);\n       tree ci2 = get_constraints (newfn);\n@@ -5570,7 +5570,7 @@ grok_reference_init (tree decl, tree type, tree init, int flags)\n       if (TREE_TYPE (init) == NULL_TREE\n \t  && CP_AGGREGATE_TYPE_P (ttype)\n \t  && !DECL_DECOMPOSITION_P (decl)\n-\t  && (cxx_dialect >= cxx2a))\n+\t  && (cxx_dialect >= cxx20))\n \t{\n \t  /* We don't know yet if we should treat const A& r(1) as\n \t     const A& r{1}.  */\n@@ -5896,7 +5896,7 @@ check_for_uninitialized_const_var (tree decl, bool constexpr_context_p,\n       && (CP_TYPE_CONST_P (type)\n \t  /* C++20 permits trivial default initialization in constexpr\n \t     context (P1331R2).  */\n-\t  || (cxx_dialect < cxx2a\n+\t  || (cxx_dialect < cxx20\n \t      && (constexpr_context_p\n \t\t  || var_in_constexpr_fn (decl))))\n       && !DECL_NONTRIVIALLY_INITIALIZED_P (decl))\n@@ -5907,7 +5907,7 @@ check_for_uninitialized_const_var (tree decl, bool constexpr_context_p,\n \n       bool show_notes = true;\n \n-      if (!constexpr_context_p || cxx_dialect >= cxx2a)\n+      if (!constexpr_context_p || cxx_dialect >= cxx20)\n \t{\n \t  if (CP_TYPE_CONST_P (type))\n \t    {\n@@ -6721,7 +6721,7 @@ check_initializer (tree decl, tree init, int flags, vec<tree, va_gc> **cleanups)\n \t       && TREE_TYPE (init) == NULL_TREE\n \t       && TREE_CODE (type) == ARRAY_TYPE\n \t       && !DECL_DECOMPOSITION_P (decl)\n-\t       && (cxx_dialect >= cxx2a))\n+\t       && (cxx_dialect >= cxx20))\n \t{\n \t  /* [dcl.init.string] \"An array of ordinary character type [...]\n \t     can be initialized by an ordinary string literal [...] by an\n@@ -7186,14 +7186,14 @@ notice_forced_label_r (tree *tp, int *walk_subtrees, void *)\n   return NULL_TREE;\n }\n \n-/* Return true if DECL has either a trivial destructor, or for C++2A\n+/* Return true if DECL has either a trivial destructor, or for C++20\n    is constexpr and has a constexpr destructor.  */\n \n static bool\n decl_maybe_constant_destruction (tree decl, tree type)\n {\n   return (TYPE_HAS_TRIVIAL_DESTRUCTOR (type)\n-\t  || (cxx_dialect >= cxx2a\n+\t  || (cxx_dialect >= cxx20\n \t      && VAR_P (decl)\n \t      && DECL_DECLARED_CONSTEXPR_P (decl)\n \t      && type_has_constexpr_destructor (strip_array_types (type))));\n@@ -7253,7 +7253,7 @@ omp_declare_variant_finalize_one (tree decl, tree attr)\n   if (idk == CP_ID_KIND_UNQUALIFIED || idk == CP_ID_KIND_TEMPLATE_ID)\n     {\n       if (identifier_p (variant)\n-\t  /* In C++2A, we may need to perform ADL for a template\n+\t  /* In C++20, we may need to perform ADL for a template\n \t     name.  */\n \t  || (TREE_CODE (variant) == TEMPLATE_ID_EXPR\n \t      && identifier_p (TREE_OPERAND (variant, 0))))\n@@ -11648,13 +11648,13 @@ grokdeclarator (const cp_declarator *declarator,\n \t  storage_class = sc_none;\n \t  staticp = 0;\n \t}\n-      if (constexpr_p && cxx_dialect < cxx2a)\n+      if (constexpr_p && cxx_dialect < cxx20)\n \t{\n \t  gcc_rich_location richloc (declspecs->locations[ds_virtual]);\n \t  richloc.add_range (declspecs->locations[ds_constexpr]);\n \t  pedwarn (&richloc, OPT_Wpedantic, \"member %qD can be declared both \"\n-\t\t   \"%<virtual%> and %<constexpr%> only in %<-std=c++2a%> or \"\n-\t\t   \"%<-std=gnu++2a%>\", dname);\n+\t\t   \"%<virtual%> and %<constexpr%> only in %<-std=c++20%> or \"\n+\t\t   \"%<-std=gnu++20%>\", dname);\n \t}\n     }\n   friendp = decl_spec_seq_has_spec_p (declspecs, ds_friend);\n@@ -11741,10 +11741,10 @@ grokdeclarator (const cp_declarator *declarator,\n       if (consteval_p)\n \terror_at (declspecs->locations[ds_consteval], \"structured \"\n \t\t  \"binding declaration cannot be %qs\", \"consteval\");\n-      if (thread_p && cxx_dialect < cxx2a)\n+      if (thread_p && cxx_dialect < cxx20)\n \tpedwarn (declspecs->locations[ds_thread], 0,\n \t\t \"structured binding declaration can be %qs only in \"\n-\t\t \"%<-std=c++2a%> or %<-std=gnu++2a%>\",\n+\t\t \"%<-std=c++20%> or %<-std=gnu++20%>\",\n \t\t declspecs->gnu_thread_keyword_p\n \t\t ? \"__thread\" : \"thread_local\");\n       if (concept_p)\n@@ -11763,10 +11763,10 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t    \"register\");\n \t  break;\n \tcase sc_static:\n-\t  if (cxx_dialect < cxx2a)\n+\t  if (cxx_dialect < cxx20)\n \t    pedwarn (loc, 0,\n \t\t     \"structured binding declaration can be %qs only in \"\n-\t\t     \"%<-std=c++2a%> or %<-std=gnu++2a%>\", \"static\");\n+\t\t     \"%<-std=c++20%> or %<-std=gnu++20%>\", \"static\");\n \t  break;\n \tcase sc_extern:\n \t  error_at (loc, \"structured binding declaration cannot be %qs\",\n@@ -13206,11 +13206,11 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t\t      \"a destructor cannot be %qs\", \"concept\");\n                     return error_mark_node;\n                   }\n-\t\tif (constexpr_p && cxx_dialect < cxx2a)\n+\t\tif (constexpr_p && cxx_dialect < cxx20)\n \t\t  {\n \t\t    error_at (declspecs->locations[ds_constexpr],\n \t\t\t      \"%<constexpr%> destructors only available\"\n-\t\t\t      \" with %<-std=c++2a%> or %<-std=gnu++2a%>\");\n+\t\t\t      \" with %<-std=c++20%> or %<-std=gnu++20%>\");\n \t\t    return error_mark_node;\n \t\t  }\n \t\tif (consteval_p)"}, {"sha": "56715d6be977897fce43e8ffae9c9e563d0400fa", "filename": "gcc/cp/init.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -812,7 +812,7 @@ perform_member_init (tree member, tree init)\n   if (init && TREE_CODE (init) == TREE_LIST\n       && (DIRECT_LIST_INIT_P (TREE_VALUE (init))\n \t  /* FIXME C++20 parenthesized aggregate init (PR 92812).  */\n-\t  || !(/* cxx_dialect >= cxx2a ? CP_AGGREGATE_TYPE_P (type) */\n+\t  || !(/* cxx_dialect >= cxx20 ? CP_AGGREGATE_TYPE_P (type) */\n \t       /* :  */CLASS_TYPE_P (type))))\n     init = build_x_compound_expr_from_list (init, ELK_MEM_INIT,\n \t\t\t\t\t    tf_warning_or_error);\n@@ -2909,7 +2909,7 @@ build_new_constexpr_heap_type (tree elt_type, tree cookie_size, tree full_size)\n static tree\n maybe_wrap_new_for_constexpr (tree alloc_call, tree elt_type, tree cookie_size)\n {\n-  if (cxx_dialect < cxx2a)\n+  if (cxx_dialect < cxx20)\n     return alloc_call;\n \n   if (current_function_decl != NULL_TREE\n@@ -3611,7 +3611,7 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n \t\t means allocate an int, and initialize it with 10.\n \n \t\t In C++20, also handle `new A(1, 2)'.  */\n-\t      if (cxx_dialect >= cxx2a\n+\t      if (cxx_dialect >= cxx20\n \t\t  && AGGREGATE_TYPE_P (type)\n \t\t  && (*init)->length () > 1)\n \t\t{"}, {"sha": "c94fe8edb8e21e070677df1b781c42ddc53ef39f", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -702,7 +702,7 @@ add_default_capture (tree lambda_stack, tree id, tree initializer)\n       initializer = convert_from_reference (var);\n \n       /* Warn about deprecated implicit capture of this via [=].  */\n-      if (cxx_dialect >= cxx2a\n+      if (cxx_dialect >= cxx20\n \t  && this_capture_p\n \t  && LAMBDA_EXPR_DEFAULT_CAPTURE_MODE (lambda) == CPLD_COPY)\n \t{"}, {"sha": "8a69bc4f170d205232f1cfe0a46c68c0a6c71373", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -229,7 +229,7 @@ init_reswords (void)\n \n   if (cxx_dialect < cxx11)\n     mask |= D_CXX11;\n-  if (cxx_dialect < cxx2a)\n+  if (cxx_dialect < cxx20)\n     mask |= D_CXX20;\n   if (!flag_concepts)\n     mask |= D_CXX_CONCEPTS;"}, {"sha": "3f8842bf49482a954b708f4929603eddb40df499", "filename": "gcc/cp/method.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1095,10 +1095,10 @@ early_check_defaulted_comparison (tree fn)\n     ctx = DECL_FRIEND_CONTEXT (fn);\n   bool ok = true;\n \n-  if (cxx_dialect < cxx2a)\n+  if (cxx_dialect < cxx20)\n     {\n-      error_at (loc, \"defaulted %qD only available with %<-std=c++2a%> or \"\n-\t\t     \"%<-std=gnu++2a%>\", fn);\n+      error_at (loc, \"defaulted %qD only available with %<-std=c++20%> or \"\n+\t\t     \"%<-std=gnu++20%>\", fn);\n       return false;\n     }\n \n@@ -1802,7 +1802,7 @@ constructible_expr (tree to, tree from)\n       const int len = list_length (from);\n       if (len > 1)\n \t{\n-\t  if (cxx_dialect < cxx2a)\n+\t  if (cxx_dialect < cxx20)\n \t    /* Too many initializers.  */\n \t    return error_mark_node;\n \n@@ -1831,7 +1831,7 @@ constructible_expr (tree to, tree from)\n       /* If t(e) didn't work, maybe t{e} will.  */\n       if (expr == NULL_TREE\n \t  && len == 1\n-\t  && cxx_dialect >= cxx2a)\n+\t  && cxx_dialect >= cxx20)\n \t{\n \t  from = build_constructor_single (init_list_type_node, NULL_TREE,\n \t\t\t\t\t   from);\n@@ -2074,7 +2074,7 @@ walk_field_subobs (tree fields, special_function_kind sfk, tree fnname,\n \t     be constexpr, every member must have a user-provided default\n \t     constructor or an explicit initializer.  */\n \t  if (constexpr_p\n-\t      && cxx_dialect < cxx2a\n+\t      && cxx_dialect < cxx20\n \t      && !CLASS_TYPE_P (mem_type)\n \t      && TREE_CODE (DECL_CONTEXT (field)) != UNION_TYPE)\n \t    {\n@@ -2226,11 +2226,11 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n       /* \"The closure type associated with a lambda-expression has a deleted\n \t default constructor and a deleted copy assignment operator.\"\n \t This is diagnosed in maybe_explain_implicit_delete.\n-\t In C++2a, only lambda-expressions with lambda-captures have those\n+\t In C++20, only lambda-expressions with lambda-captures have those\n \t deleted.  */\n       if (LAMBDA_TYPE_P (ctype)\n \t  && (sfk == sfk_constructor || sfk == sfk_copy_assignment)\n-\t  && (cxx_dialect < cxx2a\n+\t  && (cxx_dialect < cxx20\n \t      || LAMBDA_EXPR_CAPTURE_LIST (CLASSTYPE_LAMBDA_EXPR (ctype))\n \t      || LAMBDA_EXPR_DEFAULT_CAPTURE_MODE\n \t\t\t\t(CLASSTYPE_LAMBDA_EXPR (ctype)) != CPLD_NONE))\n@@ -2274,7 +2274,7 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n   if (constexpr_p)\n     *constexpr_p = (SFK_CTOR_P (sfk)\n \t\t    || (SFK_ASSIGN_P (sfk) && cxx_dialect >= cxx14)\n-\t\t    || (SFK_DTOR_P (sfk) && cxx_dialect >= cxx2a));\n+\t\t    || (SFK_DTOR_P (sfk) && cxx_dialect >= cxx20));\n \n   bool expected_trivial = type_has_trivial_fn (ctype, sfk);\n   if (trivial_p)"}, {"sha": "4928b60758916b9956c7b8993f1d8fefd6579e65", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -5635,19 +5635,19 @@ get_std_name_hint (const char *name)\n     {\"make_any\", \"<any>\", cxx17},\n     /* <array>.  */\n     {\"array\", \"<array>\", cxx11},\n-    {\"to_array\", \"<array>\", cxx2a},\n+    {\"to_array\", \"<array>\", cxx20},\n     /* <atomic>.  */\n     {\"atomic\", \"<atomic>\", cxx11},\n     {\"atomic_flag\", \"<atomic>\", cxx11},\n-    {\"atomic_ref\", \"<atomic>\", cxx2a},\n+    {\"atomic_ref\", \"<atomic>\", cxx20},\n     /* <bitset>.  */\n     {\"bitset\", \"<bitset>\", cxx11},\n     /* <compare> */\n-    {\"weak_equality\", \"<compare>\", cxx2a},\n-    {\"strong_equality\", \"<compare>\", cxx2a},\n-    {\"partial_ordering\", \"<compare>\", cxx2a},\n-    {\"weak_ordering\", \"<compare>\", cxx2a},\n-    {\"strong_ordering\", \"<compare>\", cxx2a},\n+    {\"weak_equality\", \"<compare>\", cxx20},\n+    {\"strong_equality\", \"<compare>\", cxx20},\n+    {\"partial_ordering\", \"<compare>\", cxx20},\n+    {\"weak_ordering\", \"<compare>\", cxx20},\n+    {\"strong_ordering\", \"<compare>\", cxx20},\n     /* <complex>.  */\n     {\"complex\", \"<complex>\", cxx98},\n     {\"complex_literals\", \"<complex>\", cxx14},\n@@ -5670,17 +5670,17 @@ get_std_name_hint (const char *name)\n     {\"ofstream\", \"<fstream>\", cxx98},\n     /* <functional>.  */\n     {\"bind\", \"<functional>\", cxx11},\n-    {\"bind_front\", \"<functional>\", cxx2a},\n+    {\"bind_front\", \"<functional>\", cxx20},\n     {\"function\", \"<functional>\", cxx11},\n     {\"hash\", \"<functional>\", cxx11},\n     {\"invoke\", \"<functional>\", cxx17},\n     {\"mem_fn\", \"<functional>\", cxx11},\n     {\"not_fn\", \"<functional>\", cxx17},\n     {\"reference_wrapper\", \"<functional>\", cxx11},\n-    {\"unwrap_reference\", \"<functional>\", cxx2a},\n-    {\"unwrap_reference_t\", \"<functional>\", cxx2a},\n-    {\"unwrap_ref_decay\", \"<functional>\", cxx2a},\n-    {\"unwrap_ref_decay_t\", \"<functional>\", cxx2a},\n+    {\"unwrap_reference\", \"<functional>\", cxx20},\n+    {\"unwrap_reference_t\", \"<functional>\", cxx20},\n+    {\"unwrap_ref_decay\", \"<functional>\", cxx20},\n+    {\"unwrap_ref_decay_t\", \"<functional>\", cxx20},\n     /* <future>. */\n     {\"async\", \"<future>\", cxx11},\n     {\"future\", \"<future>\", cxx11},\n@@ -5763,7 +5763,7 @@ get_std_name_hint (const char *name)\n     {\"shared_mutex\", \"<shared_mutex>\", cxx17},\n     {\"shared_timed_mutex\", \"<shared_mutex>\", cxx14},\n     /* <source_location>.  */\n-    {\"source_location\", \"<source_location>\", cxx2a},\n+    {\"source_location\", \"<source_location>\", cxx20},\n     /* <sstream>.  */\n     {\"basic_stringbuf\", \"<sstream>\", cxx98},\n     {\"basic_istringstream\", \"<sstream>\", cxx98},\n@@ -5778,7 +5778,7 @@ get_std_name_hint (const char *name)\n     {\"basic_string\", \"<string>\", cxx98},\n     {\"string\", \"<string>\", cxx98},\n     {\"wstring\", \"<string>\", cxx98},\n-    {\"u8string\", \"<string>\", cxx2a},\n+    {\"u8string\", \"<string>\", cxx20},\n     {\"u16string\", \"<string>\", cxx11},\n     {\"u32string\", \"<string>\", cxx11},\n     /* <string_view>.  */\n@@ -5804,10 +5804,10 @@ get_std_name_hint (const char *name)\n     {\"enable_if_t\", \"<type_traits>\", cxx14},\n     {\"invoke_result\", \"<type_traits>\", cxx17},\n     {\"invoke_result_t\", \"<type_traits>\", cxx17},\n-    {\"remove_cvref\", \"<type_traits>\", cxx2a},\n-    {\"remove_cvref_t\", \"<type_traits>\", cxx2a},\n-    {\"type_identity\", \"<type_traits>\", cxx2a},\n-    {\"type_identity_t\", \"<type_traits>\", cxx2a},\n+    {\"remove_cvref\", \"<type_traits>\", cxx20},\n+    {\"remove_cvref_t\", \"<type_traits>\", cxx20},\n+    {\"type_identity\", \"<type_traits>\", cxx20},\n+    {\"type_identity_t\", \"<type_traits>\", cxx20},\n     {\"void_t\", \"<type_traits>\", cxx17},\n     {\"conjunction\", \"<type_traits>\", cxx17},\n     {\"conjunction_v\", \"<type_traits>\", cxx17},\n@@ -5859,8 +5859,8 @@ get_cxx_dialect_name (enum cxx_dialect dialect)\n       return \"C++14\";\n     case cxx17:\n       return \"C++17\";\n-    case cxx2a:\n-      return \"C++2a\";\n+    case cxx20:\n+      return \"C++20\";\n     }\n }\n "}, {"sha": "bc1ee21e8ce96f66bbb5ea01c1289864deece515", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1809,7 +1809,7 @@ enum\n      constexpr.  */\n   CP_PARSER_FLAGS_ONLY_TYPE_OR_CONSTEXPR = 0x8,\n   /* When parsing a decl-specifier-seq, only allow mutable, constexpr or\n-     for C++2A consteval.  */\n+     for C++20 consteval.  */\n   CP_PARSER_FLAGS_ONLY_MUTABLE_OR_CONSTEXPR = 0x10,\n   /* When parsing a decl-specifier-seq, allow missing typename.  */\n   CP_PARSER_FLAGS_TYPENAME_OPTIONAL = 0x20,\n@@ -3369,11 +3369,11 @@ cp_parser_diagnose_invalid_type_name (cp_parser *parser, tree id,\n \t       && id_equal (id, \"thread_local\"))\n \tinform (location, \"C++11 %<thread_local%> only available with \"\n \t\t\"%<-std=c++11%> or %<-std=gnu++11%>\");\n-      else if (cxx_dialect < cxx2a && id == ridpointers[(int)RID_CONSTINIT])\n+      else if (cxx_dialect < cxx20 && id == ridpointers[(int)RID_CONSTINIT])\n \tinform (location, \"C++20 %<constinit%> only available with \"\n-\t\t\"%<-std=c++2a%> or %<-std=gnu++2a%>\");\n+\t\t\"%<-std=c++20%> or %<-std=gnu++20%>\");\n       else if (!flag_concepts && id == ridpointers[(int)RID_CONCEPT])\n-\tinform (location, \"%<concept%> only available with %<-std=c++2a%> or \"\n+\tinform (location, \"%<concept%> only available with %<-std=c++20%> or \"\n \t\t\"%<-fconcepts%>\");\n       else if (!flag_concepts && id == ridpointers[(int)RID_REQUIRES])\n \tinform (location, \"%<requires%> only available with %<-std=c++2a%> or \"\n@@ -7362,7 +7362,7 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t\t|| idk == CP_ID_KIND_TEMPLATE_ID)\n \t      {\n \t\tif (identifier_p (postfix_expression)\n-\t\t    /* In C++2A, we may need to perform ADL for a template\n+\t\t    /* In C++20, we may need to perform ADL for a template\n \t\t       name.  */\n \t\t    || (TREE_CODE (postfix_expression) == TEMPLATE_ID_EXPR\n \t\t\t&& identifier_p (TREE_OPERAND (postfix_expression, 0))))\n@@ -10510,15 +10510,15 @@ cp_parser_lambda_expression (cp_parser* parser)\n \n   LAMBDA_EXPR_LOCATION (lambda_expr) = token->location;\n \n-  if (cxx_dialect >= cxx2a)\n+  if (cxx_dialect >= cxx20)\n     /* C++20 allows lambdas in unevaluated context.  */;\n   else if (cp_unevaluated_operand)\n     {\n       if (!token->error_reported)\n \t{\n \t  error_at (LAMBDA_EXPR_LOCATION (lambda_expr),\n \t\t    \"lambda-expression in unevaluated context\"\n-\t\t    \" only available with %<-std=c++2a%> or %<-std=gnu++2a%>\");\n+\t\t    \" only available with %<-std=c++20%> or %<-std=gnu++20%>\");\n \t  token->error_reported = true;\n \t}\n       ok = false;\n@@ -10528,7 +10528,7 @@ cp_parser_lambda_expression (cp_parser* parser)\n       if (!token->error_reported)\n \t{\n \t  error_at (token->location, \"lambda-expression in template-argument\"\n-\t\t    \" only available with %<-std=c++2a%> or %<-std=gnu++2a%>\");\n+\t\t    \" only available with %<-std=c++20%> or %<-std=gnu++20%>\");\n \t  token->error_reported = true;\n \t}\n       ok = false;\n@@ -10714,7 +10714,7 @@ cp_parser_lambda_introducer (cp_parser* parser, tree lambda_expr)\n       if (cp_lexer_next_token_is_keyword (parser->lexer, RID_THIS))\n \t{\n \t  location_t loc = cp_lexer_peek_token (parser->lexer)->location;\n-\t  if (cxx_dialect < cxx2a\n+\t  if (cxx_dialect < cxx20\n \t      && LAMBDA_EXPR_DEFAULT_CAPTURE_MODE (lambda_expr) == CPLD_COPY)\n \t    pedwarn (loc, 0, \"explicit by-copy capture of %<this%> redundant \"\n \t\t     \"with by-copy capture default\");\n@@ -10774,9 +10774,9 @@ cp_parser_lambda_introducer (cp_parser* parser, tree lambda_expr)\n       if (cp_lexer_next_token_is (parser->lexer, CPP_ELLIPSIS))\n \t{\n \t  ellipsis_loc = cp_lexer_peek_token (parser->lexer)->location;\n-\t  if (cxx_dialect < cxx2a)\n+\t  if (cxx_dialect < cxx20)\n \t    pedwarn (ellipsis_loc, 0, \"pack init-capture only available with \"\n-\t\t     \"%<-std=c++2a%> or %<-std=gnu++2a%>\");\n+\t\t     \"%<-std=c++20%> or %<-std=gnu++20%>\");\n \t  cp_lexer_consume_token (parser->lexer);\n \t  init_pack_expansion = true;\n \t}\n@@ -10993,10 +10993,10 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n \tpedwarn (parser->lexer->next_token->location, 0,\n \t\t \"lambda templates are only available with \"\n \t\t \"%<-std=c++14%> or %<-std=gnu++14%>\");\n-      else if (cxx_dialect < cxx2a)\n+      else if (cxx_dialect < cxx20)\n \tpedwarn (parser->lexer->next_token->location, OPT_Wpedantic,\n \t\t \"lambda templates are only available with \"\n-\t\t \"%<-std=c++2a%> or %<-std=gnu++2a%>\");\n+\t\t \"%<-std=c++20%> or %<-std=gnu++20%>\");\n \n       cp_lexer_consume_token (parser->lexer);\n \n@@ -11030,7 +11030,7 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n       bool is_consteval = false;\n       /* For C++20, before parsing the parameter list check if there is\n \t a consteval specifier in the corresponding decl-specifier-seq.  */\n-      if (cxx_dialect >= cxx2a)\n+      if (cxx_dialect >= cxx20)\n \t{\n \t  for (size_t n = cp_parser_skip_balanced_tokens (parser, 1);\n \t       cp_lexer_nth_token_is (parser->lexer, n, CPP_KEYWORD); n++)\n@@ -12970,11 +12970,11 @@ cp_parser_init_statement (cp_parser *parser, tree *decl)\n \t    /* That didn't work, try to parse it as an expression-statement.  */\n \t    cp_parser_expression_statement (parser, NULL_TREE);\n \n-\t  if (cxx_dialect < cxx2a)\n+\t  if (cxx_dialect < cxx20)\n \t    {\n \t      pedwarn (cp_lexer_peek_token (parser->lexer)->location, 0,\n \t\t       \"range-based %<for%> loops with initializer only \"\n-\t\t       \"available with %<-std=c++2a%> or %<-std=gnu++2a%>\");\n+\t\t       \"available with %<-std=c++20%> or %<-std=gnu++20%>\");\n \t      *decl = error_mark_node;\n \t    }\n \t}\n@@ -14486,7 +14486,7 @@ cp_parser_storage_class_specifier_opt (cp_parser* parser)\n      virtual\n      explicit\n \n-   C++2A Extension:\n+   C++20 Extension:\n      explicit(constant-expression)\n \n    Returns an IDENTIFIER_NODE corresponding to the keyword used.\n@@ -14530,10 +14530,10 @@ cp_parser_function_specifier_opt (cp_parser* parser,\n \t    parser->type_definition_forbidden_message\n \t      = G_(\"types may not be defined in explicit-specifier\");\n \n-\t    if (cxx_dialect < cxx2a)\n+\t    if (cxx_dialect < cxx20)\n \t      pedwarn (token->location, 0,\n-\t\t       \"%<explicit(bool)%> only available with %<-std=c++2a%> \"\n-\t\t       \"or %<-std=gnu++2a%>\");\n+\t\t       \"%<explicit(bool)%> only available with %<-std=c++20%> \"\n+\t\t       \"or %<-std=gnu++20%>\");\n \n \t    /* Parse the constant-expression.  */\n \t    expr = cp_parser_constant_expression (parser);\n@@ -16682,12 +16682,12 @@ cp_parser_template_id (cp_parser *parser,\n \t  /* This didn't go well.  */\n \t  if (TREE_CODE (templ) == FUNCTION_DECL)\n \t    {\n-\t      /* C++2A says that \"function-name < a;\" is now ill-formed.  */\n+\t      /* C++20 says that \"function-name < a;\" is now ill-formed.  */\n \t      if (cp_parser_error_occurred (parser))\n \t\t{\n \t\t  error_at (token->location, \"invalid template-argument-list\");\n \t\t  inform (token->location, \"function name as the left hand \"\n-\t\t\t  \"operand of %<<%> is ill-formed in C++2a; wrap the \"\n+\t\t\t  \"operand of %<<%> is ill-formed in C++20; wrap the \"\n \t\t\t  \"function name in %<()%>\");\n \t\t}\n \t      else\n@@ -17391,7 +17391,7 @@ cp_parser_template_argument (cp_parser* parser)\n   else\n     {\n       /* In C++20, we can encounter a braced-init-list.  */\n-      if (cxx_dialect >= cxx2a\n+      if (cxx_dialect >= cxx20\n \t  && cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))\n \t{\n \t  bool expr_non_constant_p;\n@@ -18112,7 +18112,7 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n     {\n       bool qualified_p;\n       bool global_p;\n-      const bool typename_p = (cxx_dialect >= cxx2a\n+      const bool typename_p = (cxx_dialect >= cxx20\n \t\t\t       && (flags & CP_PARSER_FLAGS_TYPENAME_OPTIONAL));\n \n       /* Don't gobble tokens or issue error messages if this is an\n@@ -18378,7 +18378,7 @@ cp_parser_placeholder_type_specifier (cp_parser *parser, location_t loc,\n   /* As per the standard, require auto or decltype(auto), except in some\n      cases (template parameter lists, -fconcepts-ts enabled).  */\n   cp_token *placeholder = NULL, *close_paren = NULL;\n-  if (cxx_dialect >= cxx2a)\n+  if (cxx_dialect >= cxx20)\n     {\n       if (cp_lexer_next_token_is_keyword (parser->lexer, RID_AUTO))\n \tplaceholder = cp_lexer_consume_token (parser->lexer);\n@@ -19631,10 +19631,10 @@ cp_parser_namespace_definition (cp_parser* parser)\n \t\t\t\t\t\t\t     RID_INLINE);\n       if (nested_inline_p && nested_definition_count != 0)\n \t{\n-\t  if (cxx_dialect < cxx2a)\n+\t  if (cxx_dialect < cxx20)\n \t    pedwarn (cp_lexer_peek_token (parser->lexer)->location,\n \t\t     OPT_Wpedantic, \"nested inline namespace definitions only \"\n-\t\t     \"available with %<-std=c++2a%> or %<-std=gnu++2a%>\");\n+\t\t     \"available with %<-std=c++20%> or %<-std=gnu++20%>\");\n \t  cp_lexer_consume_token (parser->lexer);\n \t}\n \n@@ -20187,13 +20187,13 @@ cp_parser_asm_definition (cp_parser* parser)\n   /* Look for the `asm' keyword.  */\n   cp_parser_require_keyword (parser, RID_ASM, RT_ASM);\n \n-  /* In C++2a, unevaluated inline assembly is permitted in constexpr\n+  /* In C++20, unevaluated inline assembly is permitted in constexpr\n      functions.  */\n   if (parser->in_function_body\n       && DECL_DECLARED_CONSTEXPR_P (current_function_decl)\n-      && (cxx_dialect < cxx2a))\n+      && (cxx_dialect < cxx20))\n     pedwarn (asm_loc, 0, \"%<asm%> in %<constexpr%> function only available \"\n-\t     \"with %<-std=c++2a%> or %<-std=gnu++2a%>\");\n+\t     \"with %<-std=c++20%> or %<-std=gnu++20%>\");\n \n   /* Handle the asm-qualifier-list.  */\n   location_t volatile_loc = UNKNOWN_LOCATION;\n@@ -21600,7 +21600,7 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t       - it is a decl-specifier of the decl-specifier-seq of a\n \t\t parameter-declaration in a declarator of a function or\n \t\t function template declaration, ... */\n-\t    if (cxx_dialect >= cxx2a\n+\t    if (cxx_dialect >= cxx20\n \t\t&& (flags & CP_PARSER_FLAGS_TYPENAME_OPTIONAL)\n \t\t&& declarator->kind == cdk_id\n \t\t&& !at_class_scope_p ()\n@@ -23082,16 +23082,16 @@ cp_parser_ctor_initializer_opt_and_function_body (cp_parser *parser,\n \n   if (in_function_try_block\n       && DECL_DECLARED_CONSTEXPR_P (current_function_decl)\n-      && cxx_dialect < cxx2a)\n+      && cxx_dialect < cxx20)\n     {\n       if (DECL_CONSTRUCTOR_P (current_function_decl))\n \tpedwarn (input_location, 0,\n \t\t \"function-try-block body of %<constexpr%> constructor only \"\n-\t\t \"available with %<-std=c++2a%> or %<-std=gnu++2a%>\");\n+\t\t \"available with %<-std=c++20%> or %<-std=gnu++20%>\");\n       else\n \tpedwarn (input_location, 0,\n \t\t \"function-try-block body of %<constexpr%> function only \"\n-\t\t \"available with %<-std=c++2a%> or %<-std=gnu++2a%>\");\n+\t\t \"available with %<-std=c++20%> or %<-std=gnu++20%>\");\n     }\n \n   /* Begin the function body.  */\n@@ -23351,7 +23351,7 @@ cp_parser_array_designator_p (cp_parser *parser)\n      initializer-clause ... [opt]\n      initializer-list , initializer-clause ... [opt]\n \n-   C++2A Extension:\n+   C++20 Extension:\n \n    designated-initializer-list:\n      designated-initializer-clause\n@@ -23403,19 +23403,19 @@ cp_parser_initializer_list (cp_parser* parser, bool* non_constant_p,\n       bool clause_non_constant_p;\n       location_t loc = cp_lexer_peek_token (parser->lexer)->location;\n \n-      /* Handle the C++2A syntax, '. id ='.  */\n-      if ((cxx_dialect >= cxx2a\n+      /* Handle the C++20 syntax, '. id ='.  */\n+      if ((cxx_dialect >= cxx20\n \t   || cp_parser_allow_gnu_extensions_p (parser))\n \t  && cp_lexer_next_token_is (parser->lexer, CPP_DOT)\n \t  && cp_lexer_peek_nth_token (parser->lexer, 2)->type == CPP_NAME\n \t  && (cp_lexer_peek_nth_token (parser->lexer, 3)->type == CPP_EQ\n \t      || (cp_lexer_peek_nth_token (parser->lexer, 3)->type\n \t\t  == CPP_OPEN_BRACE)))\n \t{\n-\t  if (cxx_dialect < cxx2a)\n+\t  if (cxx_dialect < cxx20)\n \t    pedwarn (loc, OPT_Wpedantic,\n \t\t     \"C++ designated initializers only available with \"\n-\t\t     \"%<-std=c++2a%> or %<-std=gnu++2a%>\");\n+\t\t     \"%<-std=c++20%> or %<-std=gnu++20%>\");\n \t  /* Consume the `.'.  */\n \t  cp_lexer_consume_token (parser->lexer);\n \t  /* Consume the identifier.  */\n@@ -23482,15 +23482,15 @@ cp_parser_initializer_list (cp_parser* parser, bool* non_constant_p,\n \t  first_designator = designator;\n \t  first_p = false;\n \t}\n-      else if (cxx_dialect >= cxx2a\n+      else if (cxx_dialect >= cxx20\n \t       && first_designator != error_mark_node\n \t       && (!first_designator != !designator))\n \t{\n \t  error_at (loc, \"either all initializer clauses should be designated \"\n \t\t\t \"or none of them should be\");\n \t  first_designator = error_mark_node;\n \t}\n-      else if (cxx_dialect < cxx2a && !first_designator)\n+      else if (cxx_dialect < cxx20 && !first_designator)\n \tfirst_designator = designator;\n \n       /* Parse the initializer.  */\n@@ -23509,7 +23509,7 @@ cp_parser_initializer_list (cp_parser* parser, bool* non_constant_p,\n           /* Consume the `...'.  */\n           cp_lexer_consume_token (parser->lexer);\n \n-\t  if (designator && cxx_dialect >= cxx2a)\n+\t  if (designator && cxx_dialect >= cxx20)\n \t    error_at (loc,\n \t\t      \"%<...%> not allowed in designated initializer list\");\n \n@@ -25111,7 +25111,7 @@ cp_parser_member_declaration (cp_parser* parser)\n \t      width = cp_parser_constant_expression (parser, false, NULL,\n \t\t\t\t\t\t     cxx_dialect >= cxx11);\n \n-\t      /* In C++2A and as extension for C++11 and above we allow\n+\t      /* In C++20 and as extension for C++11 and above we allow\n \t\t default member initializers for bit-fields.  */\n \t      initializer = NULL_TREE;\n \t      if (cxx_dialect >= cxx11\n@@ -25121,12 +25121,12 @@ cp_parser_member_declaration (cp_parser* parser)\n \t\t{\n \t\t  location_t loc\n \t\t    = cp_lexer_peek_token (parser->lexer)->location;\n-\t\t  if (cxx_dialect < cxx2a\n+\t\t  if (cxx_dialect < cxx20\n \t\t      && identifier != NULL_TREE)\n \t\t    pedwarn (loc, 0,\n \t\t\t     \"default member initializers for bit-fields \"\n-\t\t\t     \"only available with %<-std=c++2a%> or \"\n-\t\t\t     \"%<-std=gnu++2a%>\");\n+\t\t\t     \"only available with %<-std=c++20%> or \"\n+\t\t\t     \"%<-std=gnu++20%>\");\n \n \t\t  initializer = cp_parser_save_nsdmi (parser);\n \t\t  if (identifier == NULL_TREE)\n@@ -26084,10 +26084,10 @@ cp_parser_try_block (cp_parser* parser)\n   cp_parser_require_keyword (parser, RID_TRY, RT_TRY);\n   if (parser->in_function_body\n       && DECL_DECLARED_CONSTEXPR_P (current_function_decl)\n-      && cxx_dialect < cxx2a)\n+      && cxx_dialect < cxx20)\n     pedwarn (input_location, 0,\n \t     \"%<try%> in %<constexpr%> function only \"\n-\t     \"available with %<-std=c++2a%> or %<-std=gnu++2a%>\");\n+\t     \"available with %<-std=c++20%> or %<-std=gnu++20%>\");\n \n   try_block = begin_try_block ();\n   cp_parser_compound_statement (parser, NULL, BCS_TRY_BLOCK, false);\n@@ -27705,7 +27705,7 @@ cp_parser_requires_clause_opt (cp_parser *parser, bool lambda_p)\n \t{\n \t  error_at (cp_lexer_peek_token (parser->lexer)->location,\n \t\t    \"%<requires%> only available with \"\n-                    \"%<-std=c++2a%> or %<-fconcepts%>\");\n+\t\t    \"%<-std=c++20%> or %<-fconcepts%>\");\n \t  /* Parse and discard the requires-clause.  */\n \t  cp_lexer_consume_token (parser->lexer);\n \t  cp_parser_constraint_expression (parser);\n@@ -28035,7 +28035,7 @@ cp_parser_compound_requirement (cp_parser *parser)\n \n       bool saved_result_type_constraint_p = parser->in_result_type_constraint_p;\n       parser->in_result_type_constraint_p = true;\n-      /* C++2a allows either a type-id or a type-constraint. Parsing\n+      /* C++20 allows either a type-id or a type-constraint. Parsing\n          a type-id will subsume the parsing for a type-constraint but\n          allow for more syntactic forms (e.g., const C<T>*).  */\n       type = cp_parser_trailing_type_id (parser);\n@@ -29049,7 +29049,7 @@ cp_parser_template_declaration_after_parameters (cp_parser* parser,\n   else if (cxx_dialect >= cxx11\n \t   && cp_lexer_next_token_is_keyword (parser->lexer, RID_USING))\n     decl = cp_parser_alias_declaration (parser);\n-  else if (cxx_dialect >= cxx2a /* Implies flag_concept.  */\n+  else if (cxx_dialect >= cxx20 /* Implies flag_concept.  */\n            && cp_lexer_next_token_is_keyword (parser->lexer, RID_CONCEPT)\n            && !cp_lexer_nth_token_is_keyword (parser->lexer, 2, RID_BOOL))\n     /* Allow 'concept bool' to be handled as per the TS.  */"}, {"sha": "f0cb7a2acb7d751d83ce3524b3dbaa5ce254b3d5", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -3490,7 +3490,7 @@ template_heads_equivalent_p (const_tree tmpl1, const_tree tmpl2)\n   tree parms2 = DECL_TEMPLATE_PARMS (tmpl2);\n \n   /* Don't change the matching rules for pre-C++20.  */\n-  if (cxx_dialect < cxx2a)\n+  if (cxx_dialect < cxx20)\n     return comp_template_parms (parms1, parms2);\n \n   /* ... have the same number of template parameters, and their\n@@ -5776,7 +5776,7 @@ push_template_decl_real (tree decl, bool is_friend)\n       else if (VAR_P (decl))\n \t/* C++14 variable template. */;\n       else if (TREE_CODE (decl) == CONCEPT_DECL)\n-\t/* C++2a concept definitions.  */;\n+\t/* C++20 concept definitions.  */;\n       else\n \t{\n \t  error (\"template declaration of %q#D\", decl);\n@@ -9070,7 +9070,7 @@ coerce_innermost_template_parms (tree parms,\n static bool\n class_nttp_const_wrapper_p (tree t)\n {\n-  if (cxx_dialect < cxx2a)\n+  if (cxx_dialect < cxx20)\n     return false;\n   return (TREE_CODE (t) == VIEW_CONVERT_EXPR\n \t  && CP_TYPE_CONST_P (TREE_TYPE (t))\n@@ -26137,11 +26137,11 @@ invalid_nontype_parm_type_p (tree type, tsubst_flags_t complain)\n     return false;\n   else if (TREE_CODE (type) == TEMPLATE_TYPE_PARM)\n     {\n-      if (CLASS_PLACEHOLDER_TEMPLATE (type) && cxx_dialect < cxx2a)\n+      if (CLASS_PLACEHOLDER_TEMPLATE (type) && cxx_dialect < cxx20)\n \t{\n \t  if (complain & tf_error)\n \t    error (\"non-type template parameters of deduced class type only \"\n-\t\t   \"available with %<-std=c++2a%> or %<-std=gnu++2a%>\");\n+\t\t   \"available with %<-std=c++20%> or %<-std=gnu++20%>\");\n \t  return true;\n \t}\n       return false;\n@@ -26159,11 +26159,11 @@ invalid_nontype_parm_type_p (tree type, tsubst_flags_t complain)\n     return false;\n   else if (CLASS_TYPE_P (type))\n     {\n-      if (cxx_dialect < cxx2a)\n+      if (cxx_dialect < cxx20)\n \t{\n \t  if (complain & tf_error)\n \t    error (\"non-type template parameters of class type only available \"\n-\t\t   \"with %<-std=c++2a%> or %<-std=gnu++2a%>\");\n+\t\t   \"with %<-std=c++20%> or %<-std=gnu++20%>\");\n \t  return true;\n \t}\n       if (dependent_type_p (type))\n@@ -28383,7 +28383,7 @@ is_spec_or_derived (tree etype, tree tmpl)\n static tree\n maybe_aggr_guide (tree tmpl, tree init, vec<tree,va_gc> *args)\n {\n-  if (cxx_dialect < cxx2a)\n+  if (cxx_dialect < cxx20)\n     return NULL_TREE;\n \n   if (init == NULL_TREE)\n@@ -28750,12 +28750,12 @@ do_class_deduction (tree ptype, tree tmpl, tree init,\n \terror (\"non-deducible template %qT used without template arguments\", tmpl);\n       return error_mark_node;\n     }\n-  else if (cxx_dialect < cxx2a && DECL_ALIAS_TEMPLATE_P (tmpl))\n+  else if (cxx_dialect < cxx20 && DECL_ALIAS_TEMPLATE_P (tmpl))\n     {\n       /* This doesn't affect conforming C++17 code, so just pedwarn.  */\n       if (complain & tf_warning_or_error)\n \tpedwarn (input_location, 0, \"alias template deduction only available \"\n-\t\t \"with %<-std=c++2a%> or %<-std=gnu++2a%>\");\n+\t\t \"with %<-std=c++20%> or %<-std=gnu++20%>\");\n     }\n \n   if (init && TREE_TYPE (init) == ptype)"}, {"sha": "2090cbf7da7665f8c47ca0420917f38c958e7102", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -691,7 +691,7 @@ build_cplus_new (tree type, tree init, tsubst_flags_t complain)\n      it can produce a { }.  */\n   if (BRACE_ENCLOSED_INITIALIZER_P (init))\n     {\n-      gcc_assert (cxx_dialect >= cxx2a);\n+      gcc_assert (cxx_dialect >= cxx20);\n       return finish_compound_literal (type, init, complain);\n     }\n \n@@ -4599,7 +4599,7 @@ handle_nodiscard_attribute (tree *node, tree name, tree args,\n   return NULL_TREE;\n }\n \n-/* Handle a C++2a \"no_unique_address\" attribute; arguments as in\n+/* Handle a C++20 \"no_unique_address\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n static tree\n handle_no_unique_addr_attribute (tree* node,"}, {"sha": "af84c257e963a0c7b27bbf27f4ee1610189cc010", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1102,7 +1102,7 @@ check_narrowing (tree type, tree init, tsubst_flags_t complain,\n   return ok;\n }\n \n-/* True iff TYPE is a C++2a \"ordinary\" character type.  */\n+/* True iff TYPE is a C++20 \"ordinary\" character type.  */\n \n bool\n ordinary_char_type_p (tree type)\n@@ -2236,7 +2236,7 @@ build_m_component_ref (tree datum, tree component, tsubst_flags_t complain)\n     {\n       /* 5.5/6: In a .* expression whose object expression is an rvalue, the\n \t program is ill-formed if the second operand is a pointer to member\n-\t function with ref-qualifier & (for C++2A: unless its cv-qualifier-seq\n+\t function with ref-qualifier & (for C++20: unless its cv-qualifier-seq\n \t is const). In a .* expression whose object expression is an lvalue,\n \t the program is ill-formed if the second operand is a pointer to member\n \t function with ref-qualifier &&.  */\n@@ -2261,12 +2261,12 @@ build_m_component_ref (tree datum, tree component, tsubst_flags_t complain)\n \t\t\t   \"an lvalue\", ptrmem_type);\n \t\t  return error_mark_node;\n \t\t}\n-\t      else if (cxx_dialect < cxx2a)\n+\t      else if (cxx_dialect < cxx20)\n \t\t{\n \t\t  if (complain & tf_warning_or_error)\n \t\t    pedwarn (input_location, OPT_Wpedantic,\n \t\t\t     \"pointer-to-member-function type %qT requires \"\n-\t\t\t     \"an lvalue before C++2a\", ptrmem_type);\n+\t\t\t     \"an lvalue before C++20\", ptrmem_type);\n \t\t  else\n \t\t    return error_mark_node;\n \t\t}"}, {"sha": "fad5eb4c2e50e2be3ea41353cf02c2f06ecd6b60", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -13609,7 +13609,7 @@ generic_parameter_die (tree parm, tree arg,\n   dw_die_ref tmpl_die = NULL;\n   const char *name = NULL;\n \n-  /* C++2a accepts class literals as template parameters, and var\n+  /* C++20 accepts class literals as template parameters, and var\n      decls with initializers represent them.  The VAR_DECLs would be\n      rejected, but we can take the DECL_INITIAL constructor and\n      attempt to expand it.  */"}, {"sha": "ea599237ab18cd38013568cf35beebc887f5ca38", "filename": "gcc/testsuite/g++.dg/cpp2a/aggr1.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Faggr1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Faggr1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Faggr1.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,15 +1,15 @@\n // { dg-do compile { target c++11 } }\n struct A {\n-  A () = delete;\t// { dg-message \"declared here\" \"\" { target c++2a } }\n+  A () = delete;\t// { dg-message \"declared here\" \"\" { target c++20 } }\n };\n struct B {\n   B () = default;\n   int b = 0;\n };\n struct C {\n-  C (C&&) = default;\t// { dg-message \"candidate\" \"\" { target c++2a } }\n+  C (C&&) = default;\t// { dg-message \"candidate\" \"\" { target c++20 } }\n   int c, d;\n };\n-A a {};\t\t\t// { dg-error \"use of deleted function\" \"\" { target c++2a } }\n-B b = {1};\t\t// { dg-error \"could not convert\" \"\" { target { c++11_only || c++2a } } }\n-C *c = new C {2, 3};\t// { dg-error \"no matching function for call to\" \"\" { target c++2a } }\n+A a {};\t\t\t// { dg-error \"use of deleted function\" \"\" { target c++20 } }\n+B b = {1};\t\t// { dg-error \"could not convert\" \"\" { target { c++11_only || c++20 } } }\n+C *c = new C {2, 3};\t// { dg-error \"no matching function for call to\" \"\" { target c++20 } }"}, {"sha": "04a531c356eaffd8993ce351170ef1edd74ce6f2", "filename": "gcc/testsuite/g++.dg/cpp2a/array-conv11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv11.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91364 - Implement P0388R4: Permit conversions to arrays of unknown bound.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-options \"-Wpedantic\" }\n \n // Test flexible array member.  Here we're binding int[] to int[].  This worked"}, {"sha": "b0dd81984bbcf1246da035853a418b210d6526d4", "filename": "gcc/testsuite/g++.dg/cpp2a/array-conv12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv12.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91364 - Implement P0388R4: Permit conversions to arrays of unknown bound.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-options \"-Wpedantic\" }\n \n int arr[1] = { 42 };"}, {"sha": "96b65a59795e036c561057a8d8400e21c992b8fd", "filename": "gcc/testsuite/g++.dg/cpp2a/array-conv13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv13.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91364 - Implement P0388R4: Permit conversions to arrays of unknown bound.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <typename T> void foo(T);\n "}, {"sha": "8406b999dd5ce90dc9b2617870608b4df8cfdd02", "filename": "gcc/testsuite/g++.dg/cpp2a/array-conv14.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv14.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91364 - Implement P0388R4: Permit conversions to arrays of unknown bound.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n void f(const int(*)[]);\n void fb(const int(*)[3]);"}, {"sha": "17f917af7373bd6553729a5358e0b449d740fd08", "filename": "gcc/testsuite/g++.dg/cpp2a/array-conv15.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv15.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/69531 - DR 1307, Overload resolution based on size of array init-list.\n-// { dg-do run { target c++2a } }\n+// { dg-do run { target c++20 } }\n \n int f(int, int const(&)[2]) { return 1; }\n int f(double, int const(&)[2]) { return 2; }"}, {"sha": "1413971aaa22a962ab793533b4dd2036823035f5", "filename": "gcc/testsuite/g++.dg/cpp2a/array-conv16.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv16.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91364 - P0388R4: Permit conversions to arrays of unknown bound.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n using P = int *(*)[3];\n using S = const int *const (*)[];"}, {"sha": "a879099d542c168d9a9f2ff82d2b2bc816cf2ec4", "filename": "gcc/testsuite/g++.dg/cpp2a/array-conv17.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv17.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91364 - P0388R4: Permit conversions to arrays of unknown bound.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n // As conversion/qual1.C, but with [].\n "}, {"sha": "37e9e0546f692f741823f4980613b8d7b9f296be", "filename": "gcc/testsuite/g++.dg/cpp2a/array-conv2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv2.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91364 - Implement P0388R4: Permit conversions to arrays of unknown bound.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n struct A {\n   A();"}, {"sha": "1ce041e8f2ab6e2f459d61516b8b9c16dd0fb42a", "filename": "gcc/testsuite/g++.dg/cpp2a/array-conv3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv3.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91364 - Implement P0388R4: Permit conversions to arrays of unknown bound.\n-// { dg-do run { target c++2a } }\n+// { dg-do run { target c++20 } }\n \n // Ranking of reference initialization conversions\n "}, {"sha": "3f6f92c1fedff238825ba36ef4474fb4304889b8", "filename": "gcc/testsuite/g++.dg/cpp2a/array-conv4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv4.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91364 - Implement P0388R4: Permit conversions to arrays of unknown bound.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n // Ranking of reference initialization conversions\n "}, {"sha": "e1058cd83d547ecdae2f5473f2284f95ccd18552", "filename": "gcc/testsuite/g++.dg/cpp2a/array-conv5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv5.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91364 - Implement P0388R4: Permit conversions to arrays of unknown bound.\n-// { dg-do run { target c++2a } }\n+// { dg-do run { target c++20 } }\n \n // Ranking of list-initialization sequences\n int b(int   (&&)[] ) { return 1; }   // #1"}, {"sha": "dc1064005fc6159c1903e6342ac06cd07bf0b348", "filename": "gcc/testsuite/g++.dg/cpp2a/array-conv6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv6.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91364 - Implement P0388R4: Permit conversions to arrays of unknown bound.\n-// { dg-do run { target c++2a } }\n+// { dg-do run { target c++20 } }\n \n // Ranking of reference initialization conversions\n "}, {"sha": "1ea1a69c2ff6c2c98a702be424aab16f32e1e728", "filename": "gcc/testsuite/g++.dg/cpp2a/array-conv7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv7.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/69531 - DR 1307, Overload resolution based on size of array init-list.\n-// { dg-do run { target c++2a } }\n+// { dg-do run { target c++20 } }\n \n int f(int const(&)[]) { return 1; }\n int f(int const(&)[2]) { return 2; }"}, {"sha": "77a07ea038d2432f8e5db9b5cf21b4d6ac68d95b", "filename": "gcc/testsuite/g++.dg/cpp2a/array-conv8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv8.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/69531 - DR 1307, Overload resolution based on size of array init-list.\n-// { dg-do run { target c++2a } }\n+// { dg-do run { target c++20 } }\n // Example from [over.ics.rank].\n \n int f(int    (&&)[] ) { return 1; }    // #1"}, {"sha": "4081cce57ba693a013d12be4661de262a9949439", "filename": "gcc/testsuite/g++.dg/cpp2a/array-conv9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv9.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91364 - Implement P0388R4: Permit conversions to arrays of unknown bound.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n int arr[1];\n extern int arr2[];"}, {"sha": "03b210d5f2d1a5e9df61c0642d7a14b6bda385d4", "filename": "gcc/testsuite/g++.dg/cpp2a/attr-likely1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fattr-likely1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fattr-likely1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fattr-likely1.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options -fdump-tree-gimple }\n // { dg-final { scan-tree-dump-times \"hot label\" 5 \"gimple\" } }\n // { dg-final { scan-tree-dump-times \"cold label\" 3 \"gimple\" } }"}, {"sha": "ee178dec9c551e9d781c9d81ac3ca7891f1f2b59", "filename": "gcc/testsuite/g++.dg/cpp2a/attr-likely2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fattr-likely2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fattr-likely2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fattr-likely2.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n bool b;\n int main()"}, {"sha": "6e37dbdc98017fccc5c47874a63cfdb9a99b0d5c", "filename": "gcc/testsuite/g++.dg/cpp2a/attr-likely3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fattr-likely3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fattr-likely3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fattr-likely3.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n [[likely]] void f() { }\t\t// { dg-warning \"function\" }\n "}, {"sha": "0a96edc3183285eb0399f905845b64848e7ee50a", "filename": "gcc/testsuite/g++.dg/cpp2a/attr-likely4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fattr-likely4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fattr-likely4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fattr-likely4.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n int a, b, c;\n "}, {"sha": "f7bd72b7f45bbef1187d3954ab6c03588124a331", "filename": "gcc/testsuite/g++.dg/cpp2a/class-deduction-aggr1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-aggr1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-aggr1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-aggr1.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // Testcase from P1816R0\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <typename T>\n struct S {"}, {"sha": "2fdf4e8f89f097f41f232acb8a336bee00b10f3a", "filename": "gcc/testsuite/g++.dg/cpp2a/class-deduction-aggr2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-aggr2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-aggr2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-aggr2.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // Test that non-aggregates don't get the aggregate deduction.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-prune-output \"no matching function\" }\n \n struct A { A(); };"}, {"sha": "6890d0a1f8981a9171222742ed4e18c9f64f5d90", "filename": "gcc/testsuite/g++.dg/cpp2a/class-deduction-alias1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias1.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // Testcase from P1814R0\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <class T> struct identity { using type = T; };\n template <class T> using identity_t = typename identity<T>::type;"}, {"sha": "07876a4a4968eac88346da2a577464bbed7640e5", "filename": "gcc/testsuite/g++.dg/cpp2a/class-deduction-alias2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias2.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,6 +1,6 @@\n // Test that a non-template deduction guide that doesn't match the alias is\n // ignored.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <class T> struct identity { using type = T; };\n template <class T> using identity_t = typename identity<T>::type;"}, {"sha": "d9c140db23a37d5295204fe9fdbe99ce1190e52a", "filename": "gcc/testsuite/g++.dg/cpp2a/comma1.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcomma1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcomma1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcomma1.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -8,19 +8,19 @@ struct S {\n void\n fn (int *a, int b, int c)\n {\n-  a[b,c]; // { dg-warning \"top-level comma expression in array subscript is deprecated\" \"\" { target c++2a } }\n+  a[b,c]; // { dg-warning \"top-level comma expression in array subscript is deprecated\" \"\" { target c++20 } }\n   a[(b,c)];\n \n-  a[(void) b, c]; // { dg-warning \"top-level comma expression in array subscript is deprecated\" \"\" { target c++2a } }\n+  a[(void) b, c]; // { dg-warning \"top-level comma expression in array subscript is deprecated\" \"\" { target c++20 } }\n   a[((void) b, c)];\n \n-  a[(void) b, (void) c, (void) b, b]; // { dg-warning \"top-level comma expression in array subscript is deprecated\" \"\" { target c++2a } }\n+  a[(void) b, (void) c, (void) b, b]; // { dg-warning \"top-level comma expression in array subscript is deprecated\" \"\" { target c++20 } }\n   a[((void) b, (void) c, (void) b, b)];\n \n-  a[S(), 10]; // { dg-warning \"top-level comma expression in array subscript is deprecated\" \"\" { target c++2a } }\n+  a[S(), 10]; // { dg-warning \"top-level comma expression in array subscript is deprecated\" \"\" { target c++20 } }\n   a[(S(), 10)];\n \n   a[int{(1,2)}];\n-  a[int{(1,2)}, int{}]; // { dg-warning \"top-level comma expression in array subscript is deprecated\" \"\" { target c++2a } }\n+  a[int{(1,2)}, int{}]; // { dg-warning \"top-level comma expression in array subscript is deprecated\" \"\" { target c++20 } }\n   a[(int{(1,2)}, int{})];\n }"}, {"sha": "995944f500ef6dc3cf63537de309ec38ca9b6270", "filename": "gcc/testsuite/g++.dg/cpp2a/comma2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcomma2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcomma2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcomma2.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91338 - P1161R3: Deprecate a[b,c].\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-options \"-Wno-comma-subscript\" }\n \n struct S {"}, {"sha": "0d149c7a9af7055f598677b15b69d32825ca65e3", "filename": "gcc/testsuite/g++.dg/cpp2a/comma4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcomma4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcomma4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcomma4.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91338 - P1161R3: Deprecate a[b,c].\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-options \"-Wno-deprecated\" }\n \n struct S {"}, {"sha": "acf5d43ad5d718fb6da9afa2f8e0cb429e5c3d33", "filename": "gcc/testsuite/g++.dg/cpp2a/comma5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcomma5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcomma5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcomma5.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91391 - bogus -Wcomma-subscript warning.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T, typename U>\n int foo(T t, U u) { return t + u; }"}, {"sha": "b8089679772a9e24782160c8de59f7a141e459e8", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-alias.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-alias.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-alias.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-alias.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n concept Class = __is_class(T);"}, {"sha": "2ac9ae2ff7274464cbe698933800fc37433a0af5", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-alias3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-alias3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-alias3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-alias3.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <typename T> struct A { };\n template <typename T> concept int_type = __is_same_as (T, int);"}, {"sha": "26b3d4a2cbbfc19a03d43b35aa06a28319092483", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-alias4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-alias4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-alias4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-alias4.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <typename T> struct A { };\n template <typename T> concept int_type = __is_same_as (T, int);"}, {"sha": "a565de6641284f94f530c6fc2ca1c405fb9cc093", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-alias5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-alias5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-alias5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-alias5.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/93377\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n struct empty\n {};"}, {"sha": "b50cb421b3b1e0b9c35f8238108f266875028b26", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-class.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-class.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-class.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-class.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n concept Class = __is_class(T);"}, {"sha": "d13100b96f9cc37390f1648d072dc5b501b8a6d8", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-cmath.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-cmath.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-cmath.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-cmath.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n #include <cmath>\n "}, {"sha": "63f36965f006ab619584052cef0e5f185a41e22d", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-complete1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-complete1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-complete1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-complete1.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <class T> concept has_mem_type = requires { typename T::type; };\n "}, {"sha": "18564c8da13fa44cd1741e4ba15644d7250bb5b0", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-constrained-parm.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-constrained-parm.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-constrained-parm.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-constrained-parm.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n   concept C = __is_class(T);"}, {"sha": "f61f2602b7889cb496e9ba6f58f3129d8b91d853", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-conv2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-conv2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-conv2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-conv2.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/94597\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <typename b, typename c> concept d = requires(b e) { e.operator c(); };\n "}, {"sha": "13733c645f3feae9f2108acf6c9ba7e71ad456a7", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-decltype.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-decltype.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-decltype.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-decltype.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n // Tests constrained decltype(auto).\n "}, {"sha": "800476910047dd54a17627e6cdca1f96417ab0d5", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-dr1430.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-dr1430.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-dr1430.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-dr1430.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/66092\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <typename T, typename U, typename... Args>\n   concept Similar = true;"}, {"sha": "5cbf64a8cd3d1f960da5803cae511f851b93161c", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-explicit-inst1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-explicit-inst1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-explicit-inst1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-explicit-inst1.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-final { scan-assembler \"_Z1gI1XEvT_\" } }\n // { dg-final { scan-assembler \"_Z1gI1YEvT_\" } }\n // { dg-final { scan-assembler \"_Z1gIiEvT_\" } }"}, {"sha": "5756b0d73a6c4f3f06a16c8e00f70e819f4fb069", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-explicit-inst2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-explicit-inst2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-explicit-inst2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-explicit-inst2.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n   concept C = __is_class(T);"}, {"sha": "105f39e45fc21b60e554936c029991e0a318d34f", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-explicit-inst3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-explicit-inst3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-explicit-inst3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-explicit-inst3.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n   concept C = __is_class(T);"}, {"sha": "562fc138cfd4a0fde64fb1c7f7dd36517c14fe00", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-explicit-inst4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-explicit-inst4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-explicit-inst4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-explicit-inst4.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n   concept C = __is_class(T);"}, {"sha": "2fe479934a8bc82ae05b5d3a32b5f4385086da95", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-explicit-spec1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-explicit-spec1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-explicit-spec1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-explicit-spec1.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do run { target c++2a } }\n+// { dg-do run { target c++20 } }\n \n #include <cassert>\n "}, {"sha": "99f83cba6cf630813ba340b56fad588631a1bc68", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-explicit-spec2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-explicit-spec2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-explicit-spec2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-explicit-spec2.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n   concept C = __is_class(T);"}, {"sha": "3f2d62c94fd882ea13a7b290d03f0d841af238dc", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-explicit-spec3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-explicit-spec3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-explicit-spec3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-explicit-spec3.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n   concept C = __is_class(T);"}, {"sha": "471eaba773fc4e59e1ef5e599ea401a50c3a97f1", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-explicit-spec4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-explicit-spec4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-explicit-spec4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-explicit-spec4.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do run { target c++2a } }\n+// { dg-do run { target c++20 } }\n \n #include <cassert>\n "}, {"sha": "a15749a88be1cd37bbac50484d8f41577c9f0591", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-explicit-spec5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-explicit-spec5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-explicit-spec5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-explicit-spec5.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n #include <cassert>\n "}, {"sha": "e726e1cc91ef3db69cb84cbfe671622cde760077", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-explicit-spec6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-explicit-spec6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-explicit-spec6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-explicit-spec6.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n struct A {"}, {"sha": "50a083287550b3190e54f7e1ecfaea70c50c71f3", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-feature-macro.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-feature-macro.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-feature-macro.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-feature-macro.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n #ifndef __cpp_concepts\n #error __cpp_concepts not defined"}, {"sha": "238eb819e909108ff45716dc429a4296e1fa3f12", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-fn1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-fn1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-fn1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-fn1.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n concept Type = true;"}, {"sha": "c8590b4074b9a3c20afc43ee9d2c1a7e013abe70", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-fn2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-fn2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-fn2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-fn2.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do run { target c++2a } }\n+// { dg-do run { target c++20 } }\n \n #define assert(E) if (!(E)) __builtin_abort();\n "}, {"sha": "f33251987f73197e207d29f156da69c19db51c6f", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-fn3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-fn3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-fn3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-fn3.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n concept type = true;"}, {"sha": "4fca936db2b5a7f4494d9bb4bed57d157961e491", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-fn4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-fn4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-fn4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-fn4.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // Testcase from [expr.prim.id]/5\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T> struct A {\n   static void f(int) requires false;"}, {"sha": "fe80460c9c54a7a20f4d21733a5288904462cf0d", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-friend1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend1.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n   concept Eq = requires(T t) { t == t; }; // { dg-message \"in requirements\" }"}, {"sha": "d5f700c7d39d344a7602d069177eb50785274c40", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-friend2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend2.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n   concept Eq = requires(T t) { t == t; }; // { dg-message \"in requirements\" }"}, {"sha": "90ab8f0305d8fe007cbbb7b29f62d8442a039088", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-friend4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend4.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // C++20 NB comment US115\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <class T> concept Any = true;\n "}, {"sha": "4ddf516b1a9c58d0a2895a528f812cc74bf035eb", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-iconv1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-iconv1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-iconv1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-iconv1.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/67240\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-diagnostics-depth=2\" }\n \n template <class T, class U> concept Same = __is_same_as(T,U);"}, {"sha": "b858e2770d15950d14a9eb9f87b347f0a49b76e0", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-inherit-ctor2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-inherit-ctor2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-inherit-ctor2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-inherit-ctor2.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n   concept C = __is_class(T);"}, {"sha": "7fe930cd865490655e23be96406cd48e8c8eba53", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-inherit-ctor4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-inherit-ctor4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-inherit-ctor4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-inherit-ctor4.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n   concept C = __is_class(T);"}, {"sha": "ad29068e49f70b8b06e1acb8b4debb461a08be43", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-inherit-ctor6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-inherit-ctor6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-inherit-ctor6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-inherit-ctor6.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91930\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <typename T> struct basic_mixin {\n   basic_mixin() requires true;"}, {"sha": "61595749f71c8b24e21c3f99d025f7458bcbd341", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-lambda1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda1.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/82565\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n struct string\n {"}, {"sha": "44b509dd3808ff2e6e01ad7e99fbafd9493ed748", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-lambda2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda2.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n concept False = false;"}, {"sha": "291e451ca1a87534f47ac612cd3291cda798139c", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-lambda3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda3.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do run { target c++2a } }\n+// { dg-do run { target c++20 } }\n \n template<typename T>\n concept C1 = __is_same_as(T, int)"}, {"sha": "daaaf31cf6cfc0432518acd94bb44c13d419035c", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-lambda4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda4.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n struct a {};\n template <bool> using b = a;"}, {"sha": "ee9180e2866e4ff7000ea9ba6930d9b79041b5e0", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-lambda5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda5.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/92556\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n // Having this as a hard error is consistent with template argument deduction;\n // it's an open core issue (jason 2020-02-14)."}, {"sha": "c841daec7f2848d5fc2bf99dbbed60c2d84d7abd", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-locations1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-locations1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-locations1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-locations1.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n struct S\n {"}, {"sha": "cec45b46aa043d44348c4758ced6d6f9460a3a9a", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-member-concept.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-member-concept.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-member-concept.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-member-concept.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n // FIXME: Diagnostics should be better.\n "}, {"sha": "8867b7bf3a15ad70775ce1fc98cfc249add46411", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-memfun-err.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-memfun-err.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-memfun-err.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-memfun-err.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n   concept C = __is_class(T);"}, {"sha": "77e10c6b5c72daeba2ca954cdc7bd884995ec570", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-memfun.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-memfun.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-memfun.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-memfun.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do run { target c++2a } }\n+// { dg-do run { target c++20 } }\n \n #include <cassert>\n "}, {"sha": "7ddfe62590cf0fb5846b23e3fa7a5d6a66e8ae3e", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-memtmpl1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-memtmpl1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-memtmpl1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-memtmpl1.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <class T>\n struct A {"}, {"sha": "987bf27f7848adcbe311103c798a5cbc5e42a99d", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-noexcept1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-noexcept1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-noexcept1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-noexcept1.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n void f1(int);\n void f2(int) noexcept;"}, {"sha": "fb3272632c70bba4bb9454b3cc207fad4f032c7d", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-partial-spec4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-partial-spec4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-partial-spec4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-partial-spec4.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <class T> concept is_int = __is_same_as(T,int);\n "}, {"sha": "8774d4f6fd703f60c716d247cb8f9d37b2ab2bc9", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-partial-spec5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-partial-spec5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-partial-spec5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-partial-spec5.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/67138\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <class T>\n concept Auto = true;"}, {"sha": "9e455d5d3a2dd00d549dae33186fe648cb9c3af2", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-partial-spec6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-partial-spec6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-partial-spec6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-partial-spec6.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/67152\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <class T>\n concept HasType = requires { typename T::type; };"}, {"sha": "887fe4df3a9ea5c905e99dc58aad4d4ca3be420b", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-placeholder1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder1.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<class T, class U>\n concept Same = __is_same_as(T, U);"}, {"sha": "9e6fd16c3682c7925a770c3b26fb606eea83383c", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-placeholder2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder2.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/94481\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n concept C = true;"}, {"sha": "7176efbc6080d8cff013fbe6dc4191cbab220a59", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr65552.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr65552.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr65552.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr65552.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n concept Concept ="}, {"sha": "54405f2ca6ef8e40005e49d4576879df4d832ca4", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr65634.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr65634.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr65634.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr65634.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n concept C1 ="}, {"sha": "1bcc051243fda355e62e61f14ded292f01c3134b", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr65636.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr65636.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr65636.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr65636.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n using TD = int;\n "}, {"sha": "2868f9cfadcd7aa0f792e9940d32a4112f33d8f6", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr65848.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr65848.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr65848.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr65848.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n // Performance test... This should be fast.\n "}, {"sha": "93dc32de922562c66ffe7dd04adac5ad4ac84128", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr65854.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr65854.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr65854.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr65854.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/65854\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n // Handle alias templates in type requirements.\n "}, {"sha": "afeee5927e592e027585f23a52712fc50cada598", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr66844.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr66844.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr66844.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr66844.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/66844\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <class T, class U>\n concept Same = __is_same_as(T, U);"}, {"sha": "c6dfe5d1c79a818c1a1489e8eac87b141d637586", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr66962.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr66962.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr66962.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr66962.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/66962\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <typename> struct remove_cv;\n template <typename> struct is_reference;"}, {"sha": "fbaac1c34a3d503c369c1d9a829f60821c810a41", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr67070.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67070.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67070.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67070.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <class T>\n concept C1 ="}, {"sha": "1e83fbae3bf9371f5dfed36270b99dbf063de520", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr67147.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67147.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67147.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67147.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/67147\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <class F, class I1, class I2 = I1>\n concept IndirectCallableRelation = true;"}, {"sha": "97f80cfcfa861ed49bb8e35d2e4dee3118a88a31", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr67148.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67148.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67148.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67148.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/67148\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n \n namespace std"}, {"sha": "c74f6f00a5c56aa0ba5458a471d03d79e06f9273", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr67178.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67178.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67178.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67178.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/67178\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n concept c = true;"}, {"sha": "a31750eb495b47f719a81e42d18dea0d99fbf273", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr67210.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67210.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67210.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67210.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/67210\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <class T, class U>\n concept C = true;"}, {"sha": "b1a7a8c333a5e025523cb7e999647555d6afca36", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr67217.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67217.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67217.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67217.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/67217\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <class T>\n   requires __is_same_as(T, double)"}, {"sha": "d59d4f95bfb8007d36e197b73d4cb56f00128605", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr67225-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67225-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67225-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67225-1.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/67225\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n \n template <class T, class U> "}, {"sha": "f8d99ffe006eaf4323aa9ec89668e2e9c100ba55", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr67225-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67225-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67225-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67225-2.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/67225\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n \n template<typename Target>"}, {"sha": "937098d394f8a2a09675ec3572719d5a83eb8ae6", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr67225-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67225-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67225-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67225-3.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/67225\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n \n template <class>"}, {"sha": "e37ad28c1bc1e73b3690b99a2ca00ee79901a97c", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr67225-4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67225-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67225-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67225-4.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/67225\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n \n template <class, class>"}, {"sha": "92f42982a3886ecadd58709bb4516e64ee58917d", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr67225-5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67225-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67225-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67225-5.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/67225\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n \n template<typename A, typename T>"}, {"sha": "5399780cfbf27595aa0bcdea0c4db1ff21a50da4", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr67319.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67319.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67319.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67319.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/67319\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n \n template <typename T>"}, {"sha": "fad43be6c5baf49036f5554a09fd1a2509505f1e", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr67427.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67427.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67427.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67427.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/67427\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n \n template <class S, class I>"}, {"sha": "5087344d2c9088dddcd7447982f7de764b5eebd9", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr67654.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67654.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67654.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67654.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/67427\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n \n template <bool... Values> struct and_c_impl {"}, {"sha": "530cb333f3834b5077bc62e8d190a6009575d62c", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr67658.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67658.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67658.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67658.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n \n template<class T> concept bool C1() { return false; }"}, {"sha": "392492214e2b08cd3d74194cfe37d228a35922f6", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr67684.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67684.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67684.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67684.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n \n template<class T>"}, {"sha": "c712d727235f2d078e6caaa88b76822a23357968", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr67692.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67692.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67692.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67692.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<class T>\n bool f(T x) {"}, {"sha": "27083371ae1fae54963ca47dc545d9d2c68cd61c", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr67697.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67697.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67697.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67697.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n \n template<class X>"}, {"sha": "c3c5c235455bee65026ecb574711751ff80618d2", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr67719.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67719.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67719.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67719.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n \n template<class X> concept bool C() {"}, {"sha": "5ee5c2dac8f348c42271f88cd3e8459a3516d4d0", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr67774.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67774.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67774.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67774.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n \n #include <type_traits>"}, {"sha": "64cd9d2d33642c88d063db36162c0ce5f829dce0", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr67825.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67825.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67825.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67825.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n \n struct A {"}, {"sha": "693237fa78351357fb6dd6bf5de2c45183eb9a53", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr67860.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67860.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67860.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67860.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n \n #include <type_traits>"}, {"sha": "b42ce8b7c301192f753fe85093d4b76e6a48d5d9", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr67862.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67862.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67862.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67862.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n \n typedef int size_t;"}, {"sha": "b809553c07a518a02a8e110cf4c74d401cc118a0", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr67969.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67969.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67969.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67969.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n template <class, class>\n class NumericArray {};"}, {"sha": "bc679a71f9c1749931ab50ae2e0d80898c9c3277", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr68093-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr68093-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr68093-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr68093-1.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n template <typename t>\n struct S\n {"}, {"sha": "2dd46dae6d7dfca5937cc9a013fa8c782e6772d6", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr68093-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr68093-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr68093-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr68093-2.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n template <class T>\n concept bool True = true;"}, {"sha": "9fc90ff39a6b65e534215d36e4dc059b79ef29d9", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr68372.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr68372.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr68372.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr68372.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n \n template<typename F>"}, {"sha": "1fbda9f9ca0c516483abca597721075b4c59cba2", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr68434.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr68434.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr68434.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr68434.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <class>\n concept C1 = true;"}, {"sha": "0a8715d91cca159e89c0492d728b353dd9448bb8", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr68683.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr68683.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr68683.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr68683.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/68683\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <typename, typename>\n struct is_same {"}, {"sha": "324b3ad8b37e6029e1a58bb7aa93ffa9cf80e26e", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr68812.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr68812.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr68812.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr68812.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n \n namespace zero"}, {"sha": "1df563b341c5a92087fe0360bcb16d35715ec26a", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr69235.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr69235.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr69235.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr69235.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n \n template<typename T>"}, {"sha": "d83440d49c6fc4027e627e40461914ccb1adc4bd", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr71368.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr71368.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr71368.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr71368.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/71368\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <class T, class U> concept Same = __is_same_as(T,U);\n "}, {"sha": "aee27bc0c98cefa77abc075a77c7c0a188f57b33", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr71385.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr71385.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr71385.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr71385.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<class From, class To>\n concept convertible_to = requires(From (&f)(), void (&g)(To)) { g(f()); };"}, {"sha": "cdad62ca440be3dee7fb299065b952a9bf03f675", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr71965.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr71965.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr71965.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr71965.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <class T>\n concept Destructible = false;"}, {"sha": "447b149b80cad52c62f3cd4aa28343fa180ccd5a", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr78752.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr78752.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr78752.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr78752.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n \n #include <type_traits>"}, {"sha": "5fdd64eb26fe3a4fca41e25489110372a3b6b578", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr79759.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr79759.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr79759.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr79759.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n \n template<typename T, T N>"}, {"sha": "1a0008e7a98936d8ed58d92eeb0ed7185f4618f1", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr80746.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr80746.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr80746.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr80746.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n \n template<typename T, typename T::type>"}, {"sha": "92e89da545197b4267b719c55087cef881450ab1", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr80773.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr80773.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr80773.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr80773.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n \n template<typename F>"}, {"sha": "81a671c7b1ab892e218f801b1da53d2748745f40", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr82507.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr82507.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr82507.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr82507.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n \n template<class I>"}, {"sha": "01a42a4e73fb4199ef0a22735191c931374f4163", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr82740.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr82740.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr82740.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr82740.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n \n template<class T>"}, {"sha": "b604f7e00bf18f703fd1fa65680ac95112504742", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr84140.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84140.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84140.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84140.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do run { target c++2a } }\n+// { dg-do run { target c++20 } }\n \n template<class, class> constexpr bool is_same_v = false;\n template<class T> constexpr bool is_same_v<T, T> = true;"}, {"sha": "ef1d278e99bd64dae16b131bb14d701f7daed146", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr84551.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84551.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84551.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84551.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/84551\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-g -O\" }\n \n template<typename> concept C = true;"}, {"sha": "8d7cb89f3f5905f91af8f321e02a1868c762f509", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr84810.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84810.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84810.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84810.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n template<class> constexpr bool is_int = false;\n template<> constexpr bool is_int<int> = true;\n "}, {"sha": "f32ca63d5eeaa0701f41ef5412270979785d2cbf", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr85808.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr85808.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr85808.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr85808.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n \n namespace X"}, {"sha": "6fb430d90a38eca60d226c70683163c0a8a17477", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr86269.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr86269.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr86269.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr86269.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n #include <type_traits>\n "}, {"sha": "28be9e9e0ea4a09c7f158a41da7bf050b7fa4220", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr87441.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr87441.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr87441.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr87441.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n \n template<typename X, typename Y = X>"}, {"sha": "1c25252d47b62b3f55e493311e5d3176da339a11", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr88395.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr88395.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr88395.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr88395.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <class T, class U>\n concept Concept2 = requires (T t, U u)"}, {"sha": "6df9b852fb1b49638f6fdbc2695c592ba4b30b24", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr92078.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr92078.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr92078.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr92078.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename I>\n struct iterator_traits"}, {"sha": "22696c30d81676b9c3aaa176994290202b5cc64e", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-recursive-sat1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-recursive-sat1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-recursive-sat1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-recursive-sat1.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<int N, typename T>\n concept Foo = requires(T t) { foo<N + 1>(t); }; // { dg-error \"template instantiation depth\" }"}, {"sha": "992fcbbfccb642e47abf57e5a10aa137948942d8", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-recursive-sat2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-recursive-sat2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-recursive-sat2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-recursive-sat2.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n concept Fooable = requires(T t) { foo(t); }; // { dg-error \"template instantiation depth\" }"}, {"sha": "679f5cfbf696383954b0ba5b79b20a990d69fc54", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-recursive-sat3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-recursive-sat3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-recursive-sat3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-recursive-sat3.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n concept Fooable = requires(T t) { foo(t); };"}, {"sha": "03668d34384d728d62f1aa25d198c953fcf2d325", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-requires1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires1.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n concept Class = __is_class(T);"}, {"sha": "0364d2e313833d8e9420a4674c27812485f8f901", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-requires10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires10.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/66988\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<bool B>\n struct bool_constant {"}, {"sha": "816a37c10b7d8e8000b8f28b96790bab030d4311", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-requires11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires11.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/67018\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <typename T>\n constexpr bool Val = true;"}, {"sha": "2d8c2911a9c6d3f6b2cfad65752add5952342e00", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-requires12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires12.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <class> struct all_same {\n   static constexpr bool value = true;"}, {"sha": "062d22c5aeebcf93cdc19c3e94ba3e409c8f6b7e", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-requires13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires13.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <class T> concept C = true;\n "}, {"sha": "06908a419e0bd082b21b2808e0956960310670c1", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-requires14.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires14.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n concept A = sizeof(T) >= 4;"}, {"sha": "27af524f7ba12593a7b7a98294a3891736950237", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-requires15.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires15.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n struct string;\n "}, {"sha": "cb2ac5d93115be137abe886ff1b45689e035ebef", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-requires16.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires16.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n // A poor mans Integral concept.\n template<typename T>"}, {"sha": "6b665ac52ea3a6abe5ec5fb0bc3c4e76a0371905", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-requires17.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires17.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n concept Type = true;"}, {"sha": "9d8ec94f696cd1ead5cd80f3f3b159e36fc31901", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-requires18.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires18.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n concept integer = __is_same_as(T, int);"}, {"sha": "b020250da50d01a25f8c0725734b789dcf5cf941", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-requires19.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires19.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n concept check_c = false;"}, {"sha": "a9b422b5bac5e3ed130be3dda09c4f23626101cc", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-requires2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires2.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n // Test the types of atomic constraints\n "}, {"sha": "5f7aec5b2817e49580dce0611b0938528bfd93b8", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-requires20.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires20.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename ...>\n constexpr bool r () { return true; }"}, {"sha": "bc38b893c689b81a01139523f1a18b948d2a628c", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-requires21.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires21.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/94480\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T, typename U>\n constexpr bool is_same_v = __is_same (T, U);"}, {"sha": "292ce20ee73ce4580de16884041236a7d0a17687", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-requires3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires3.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n // Test basic expression requirements\n "}, {"sha": "3153afa4c4de54b699c326f8c2eef70c74ccafb7", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-requires4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires4.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n // Test associated type requirements\n "}, {"sha": "976efe67c460adef64c60ed9706ae621dee7e113", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-requires5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires5.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts -fconcepts-diagnostics-depth=2\" }\n \n // Test conversion requirements (not in C++20)"}, {"sha": "a4e4402a6cf6a52580e1bab0d1e702d86cda857f", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-requires6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires6.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n // Test deduction requirements.\n "}, {"sha": "8101d03100bdc690698cef73e82f16d08c6974ee", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-requires7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires7.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/66758\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <class T, class U>\n concept C = requires (T t, U u) { t + u; };"}, {"sha": "0170042b2adf178669fbd544b222a06b4d19e99d", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-requires8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires8.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <class T, class U>\n concept C = requires (T t, U u) { t + u; }; // { dg-message \"in requirements\" }"}, {"sha": "c9ff9cace6ea70ee3bcda75235acf5eb6df1d8f5", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-requires9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires9.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/66832\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <class T, class U, unsigned N>\n   requires requires (T& t, U &u) { t.foo(); u.foo(); }"}, {"sha": "84c9ae9d6dab9290ea84ad926c447ca69947258c", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-return-req1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-return-req1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-return-req1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-return-req1.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/92268\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <class T> concept Two = true;\n template <class T> concept One = Two<typename T::type>;"}, {"sha": "39e0d7d8ac7519b9d42ad0ffeeeafcda2c8f9d2d", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-template-parm1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-template-parm1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-template-parm1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-template-parm1.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n concept Int = __is_same_as(T, int);"}, {"sha": "047c19e95ac0efbe3307ce5a1ffc2cfaa3b809cc", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-template-parm10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-template-parm10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-template-parm10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-template-parm10.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <class>\n concept Dummy = true;"}, {"sha": "3bb2f576a873d645a4e65db97c827b1ef7714a53", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-template-parm2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-template-parm2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-template-parm2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-template-parm2.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n   concept Int = __is_same_as(T, int);"}, {"sha": "46c50a6ef5c46af1061c0de356532699884cadc0", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-template-parm5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-template-parm5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-template-parm5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-template-parm5.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n   concept Int = __is_same_as(T, int);"}, {"sha": "c7d9964f7388bc6c5042463d9d3693d0a7c2858e", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-template-parm6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-template-parm6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-template-parm6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-template-parm6.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename... Ts> struct are_same;\n "}, {"sha": "265d8947957031f9a2a21d8a99a250f349307897", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-template-parm8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-template-parm8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-template-parm8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-template-parm8.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n   concept C = __is_class(T);"}, {"sha": "00cc21067ce7cbbcceecede99f6a9c56e7ba4c65", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-template-parm9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-template-parm9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-template-parm9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-template-parm9.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n   concept C = __is_class(T);"}, {"sha": "18baac48e4dc894bc1cf3c9ad10d6d92c1fabfbc", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-traits2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-traits2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-traits2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-traits2.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n   concept Nothrow_assignable = __has_nothrow_assign(T);"}, {"sha": "1cefe3b243f237c8213beac0939164ebed80a27d", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-ts1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ts1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ts1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ts1.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n \n // This tests the terse notation."}, {"sha": "d28002c035ad73e0e615d6fb63743a8118a10b47", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-ts2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ts2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ts2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ts2.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n \n // Basic tests using function concepts."}, {"sha": "9d47a7a083d05b86fe8cee2b46550632c5442d8b", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-ts3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ts3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ts3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ts3.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n \n // Basic tests using variable concepts."}, {"sha": "23ed929acf4fc79d4ec4db046c56f095f0fd0992", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-ts4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ts4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ts4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ts4.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n \n // Basic tests for introduction syntax."}, {"sha": "06244882167bbc9c3cd8f35e20ccd25d80b5c35e", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-ts5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ts5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ts5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ts5.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n \n struct Base {"}, {"sha": "597ad5e1ae1e712af441d520248404b140c9f8fb", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-ts6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ts6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ts6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ts6.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fconcepts-ts\" }\n \n template<typename T, int N, typename... Xs> concept bool C1 = true;"}, {"sha": "adfecf85c13bbfed7d1177a00f4dadc2eeca8e2e", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-using1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-using1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-using1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-using1.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/79591\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <class> concept True = true;\n "}, {"sha": "ebeeebf60bbd4334ff6a0d16f904930aefd31381", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n // Change in grammar for the expression trailing `requires`.\n template<typename T>"}, {"sha": "87adf8c7a69f7e71905aeae2612441ba693b8110", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts1.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n concept Class = __is_class(T);"}, {"sha": "04e7ee6f892f2bef33949507131fa02662baf0cd", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts2.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename T>\n concept True = true;"}, {"sha": "4ccfd0805b7b7f7aed1f7a2ec240c669f533ee02", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts3.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <class T, class U> concept same_as = __is_same_as(T,U);\n "}, {"sha": "5f08ae383ed8ead51c330a32cce98a2e6c076746", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts4.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <class T> struct A { static const int x = 42; };\n "}, {"sha": "ed8028f8540be6bfd1fecbacad4729509700d2a9", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts5.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n \n template <typename T, typename U>"}, {"sha": "0524bb90a80ce9e4968251c93aa9a90685f114eb", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts6.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n namespace a\n {"}, {"sha": "531ec1c4c725f3a2222a96530b18eddf5101a41c", "filename": "gcc/testsuite/g++.dg/cpp2a/cond-triv2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcond-triv2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcond-triv2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcond-triv2.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/67348\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n #include <type_traits>\n #include <vector>"}, {"sha": "b572650626aaaa6ecbcc2ce62f336e732937affe", "filename": "gcc/testsuite/g++.dg/cpp2a/consteval-void1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval-void1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval-void1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval-void1.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/93257\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <bool, typename>\n consteval void test() {}"}, {"sha": "7b3903c24eb0474aa858c7acbdd1b9865f51bf57", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dtor2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor2.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // P0784R7\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n struct S\n {"}, {"sha": "193ae93933dea2d98b5b8c34c1c87d6019607041", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dtor3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor3.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // P0784R7\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n struct S\n {"}, {"sha": "ad03987f8902a63caa406db63ef661481229b1bc", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dtor4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor4.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/92414\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n struct A { virtual void foo (); };\n "}, {"sha": "c37753b05c5cd35219c8d52b5898ce58c5b4caef", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dynamic1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic1.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/88337 - Implement P1327R1: Allow dynamic_cast/typeid in constexpr.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n // Downcast.\n "}, {"sha": "f9f82236d15f9ad540013f4b1079b4ac5abf3520", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dynamic10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic10.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/88337 - Implement P1327R1: Allow dynamic_cast/typeid in constexpr.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n // Virtual base.\n "}, {"sha": "9ee93c334e9d8867aac1772287780c79ca4c83a3", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dynamic11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic11.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/88337 - Implement P1327R1: Allow dynamic_cast/typeid in constexpr.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fdelete-null-pointer-checks\" }\n \n // dynamic_cast in a constructor."}, {"sha": "4aedf9893ada4c67a056390c50435029cd786ef1", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dynamic12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic12.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/88337 - Implement P1327R1: Allow dynamic_cast/typeid in constexpr.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n // dynamic_cast in a destructor.\n "}, {"sha": "1df0772b499ac9c55fadcd340552be1b906ad644", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dynamic13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic13.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/88337 - Implement P1327R1: Allow dynamic_cast/typeid in constexpr.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n // Adopted from g++.old-deja/g++.other/dyncast1.C.\n "}, {"sha": "cc1cadae3bc00669d699518d1a8e1529d61cc132", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dynamic14.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic14.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/88337 - Implement P1327R1: Allow dynamic_cast/typeid in constexpr.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n // Adopted from g++.old-deja/g++.other/dyncast1.C.\n // But use reference dynamic_cast."}, {"sha": "aed95c29585439e86b5ab24d4000e6b8cbb743b1", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dynamic15.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic15.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/88337 - Implement P1327R1: Allow dynamic_cast/typeid in constexpr.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // Test HINT = -3 (SRC is a multiple public non-virtual base of DST).\n \n struct A { virtual void a() {} };"}, {"sha": "1d2b8cbebbf32e5c1c7fe4d1ae201a22e4571b48", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dynamic16.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic16.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/88337 - Implement P1327R1: Allow dynamic_cast/typeid in constexpr.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // Here the hint turns out to be wrong: A is a public base of B2, but the\n // dynamic_cast operand is not that subobject, but rather a sibling base of\n // B2."}, {"sha": "a26678e6ed766dc5f8f2ffb3765e193a7321aa98", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dynamic17.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic17.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/88337 - Implement P1327R1: Allow dynamic_cast/typeid in constexpr.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fdelete-null-pointer-checks\" }\n \n // dynamic_cast in a constructor."}, {"sha": "25d98c2b661f31fa00456ec820e4bc116fe9c00a", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dynamic18.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic18.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/93414 - poor diagnostic for dynamic_cast in constexpr context.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // Here 'b' doesn't point/refer to a public base of Derived.\n \n struct Base {"}, {"sha": "2e5ea0e7eb4306d7f94be26a9c8f9123be0afd92", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dynamic2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic2.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/88337 - Implement P1327R1: Allow dynamic_cast/typeid in constexpr.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n // Downcast, with hint > 0.\n "}, {"sha": "9caeb241df617682f3c1ace5335dd78b66b6edb3", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dynamic3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic3.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/88337 - Implement P1327R1: Allow dynamic_cast/typeid in constexpr.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n // Sidecast.\n "}, {"sha": "da647bfca5e3ab98d60246c8d3b1fac037d368cc", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dynamic4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic4.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/88337 - Implement P1327R1: Allow dynamic_cast/typeid in constexpr.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fdelete-null-pointer-checks\" }\n \n // From clang's constant-expression-cxx2a.cpp."}, {"sha": "77c7043a6fd18695c71d9b0bdf5eb909d2b848f6", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dynamic5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic5.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/88337 - Implement P1327R1: Allow dynamic_cast/typeid in constexpr.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n // Multiple levels.\n "}, {"sha": "d67c3072b5445c250f4343f351c09f8f23e41e2d", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dynamic6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic6.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/88337 - Implement P1327R1: Allow dynamic_cast/typeid in constexpr.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n // Private base.\n "}, {"sha": "bc3efd05bccbd9eeb4705549d67d6dc11065a61b", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dynamic7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic7.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/88337 - Implement P1327R1: Allow dynamic_cast/typeid in constexpr.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n // Protected base.\n "}, {"sha": "1958cae441db840955d50bb5f0acd5e5e061997c", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dynamic8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic8.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/88337 - Implement P1327R1: Allow dynamic_cast/typeid in constexpr.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n // Unrelated type.\n "}, {"sha": "7d42ffa5a78f51f1c77d5e71b050b9ecf0e8d57e", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dynamic9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic9.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/88337 - Implement P1327R1: Allow dynamic_cast/typeid in constexpr.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n // Ambiguous base.\n "}, {"sha": "75984a2fdcb7335a13940a969a3e24cf4e68ab1c", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init1.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91353 - P1331R2: Allow trivial default init in constexpr contexts.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // Test basic use.\n \n struct S {"}, {"sha": "3834457a276833c9cc9e213c08d0d6558ba13a1e", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init10.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91353 - P1331R2: Allow trivial default init in constexpr contexts.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // In c++2a we don't emit a call to _ZN3FooI3ArgEC1Ev.\n \n struct Arg;"}, {"sha": "79ad61895b083758f7dafe30fea75f78da18f313", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init11.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91353 - P1331R2: Allow trivial default init in constexpr contexts.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n struct S {\n   int i;"}, {"sha": "4eb8753906ab2a18e879291186a3603d3197f460", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init12.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91353 - P1331R2: Allow trivial default init in constexpr contexts.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n struct S {\n   int uninit;"}, {"sha": "96140e6c212b7100266b5b8bf693d345b34c77ff", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init13.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91353 - P1331R2: Allow trivial default init in constexpr contexts.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n struct E { };\n "}, {"sha": "1335e51c853b2767975277096cf90a3e34f0893a", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init14.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init14.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91353 - P1331R2: Allow trivial default init in constexpr contexts.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n struct E {\n   constexpr E() = default;"}, {"sha": "3cfc23a210e9655755eba9582ec59fd0c07169ea", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init15.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init15.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91353 - P1331R2: Allow trivial default init in constexpr contexts.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n struct E {\n   constexpr E() = default;"}, {"sha": "87de38a678d49e6d907e89c3da9963319e0f9709", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init16.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init16.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/93803 - ICE with constexpr init and [[no_unique_address]].\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n struct empty { };\n "}, {"sha": "ec362ad91605bce24c686c8bfa719d4001451c63", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init17.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init17.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/93803 - ICE with constexpr init and [[no_unique_address]].\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n struct empty { };\n "}, {"sha": "d0d0411f99dc06956b7f4a5b68e339c61283f9d0", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init2.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91353 - P1331R2: Allow trivial default init in constexpr contexts.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n struct A\n {"}, {"sha": "1c0c0183cd06c186f3b2ab06d44cd30b11a583bf", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init3.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91353 - P1331R2: Allow trivial default init in constexpr contexts.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n struct A\n {"}, {"sha": "78f3ebd74f683000415e096b5caec9060b6ac1fd", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init4.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91353 - P1331R2: Allow trivial default init in constexpr contexts.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n // This bullet in [dcl.constexpr] is now gone:\n //  - every non-static data member and base class sub-object shall be initialized"}, {"sha": "a9e717d91f94b862f252310c0b630da46bbec690", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init5.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91353 - P1331R2: Allow trivial default init in constexpr contexts.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n struct S { int i; };\n "}, {"sha": "a1634aab03125990a0528e539a29a5a3bb518bd0", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init6.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91353 - P1331R2: Allow trivial default init in constexpr contexts.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n /* We used to get the \"constexpr constructor for union S::<unnamed union>\n    must initialize exactly one non-static data member\" error, but not anymore"}, {"sha": "2e62b5377b143966408529fd228b3c4a2a4500db", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init7.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91353 - P1331R2: Allow trivial default init in constexpr contexts.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n struct S {\n   int a = 1;"}, {"sha": "8bb9a9c8dbcf3041f2a583e5ec90cf1012f107e4", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init8.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91353 - P1331R2: Allow trivial default init in constexpr contexts.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n struct S {\n   constexpr S(int) {}"}, {"sha": "1ac14c223194a2a9257d87843afd3f5ed386ab49", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init9.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91353 - P1331R2: Allow trivial default init in constexpr contexts.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n struct S {\n   constexpr S(int) {}"}, {"sha": "a936c1e1294f41ad881f18cf15f7f3fd82f455a3", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-new1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new1.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // P0784R7\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fdelete-null-pointer-checks\" }\n \n struct S { constexpr S () : s (5) {} constexpr S (int x) : s (x) {} int s; };"}, {"sha": "6f6b11c2481ca3336709fa021b117029eb5f2a34", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-new10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new10.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91369\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fdelete-null-pointer-checks\" }\n \n struct S {"}, {"sha": "5adf13e6a0452bb33ed99ff2ad05c84dec80d904", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-new11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new11.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/93633\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fdelete-null-pointer-checks\" }\n \n struct A {"}, {"sha": "fcf398f000e60139e9e13ea18ce9188698610eaa", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-new12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new12.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/93633\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fdelete-null-pointer-checks\" }\n \n struct A {"}, {"sha": "6762c24a34271fcc5caf149f75c9518595eb9568", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-new13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new13.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/93633\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n struct A {\n   constexpr A () : a (0) {}"}, {"sha": "0c513bd9f1271b324d9138ad3fb71889285f7c6a", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-new2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new2.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // P0784R7\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fdelete-null-pointer-checks\" }\n \n template <int N>"}, {"sha": "70b841208f8460b417559a11a6b8ee7436d69b18", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-new3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new3.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // P0784R7\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fdelete-null-pointer-checks\" }\n \n constexpr int *"}, {"sha": "4be1bf041fa48aa7e49de2abec770fe8bec770bf", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-new4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new4.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // P0784R7\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fdelete-null-pointer-checks\" }\n \n struct S"}, {"sha": "2bb407a4b517d4d43fa891836a40d75e02e096d3", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-new5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new5.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // P0784R7\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n namespace std\n {"}, {"sha": "d51bdbb8269d8e0377267455943a766c35f6546e", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-new6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new6.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // P0784R7\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n namespace std\n {"}, {"sha": "bb60a8ee91bf3bd312a5284d082e2e2861c80ad3", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-new7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new7.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // P0784R7\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n namespace std\n {"}, {"sha": "e61323adaed220f860f68457bf4ec93c08394893", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-new8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new8.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91369\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fdelete-null-pointer-checks\" }\n \n struct A {"}, {"sha": "db45cdf72dc77389f377f50ff90d78c0f6bea18d", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-new9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new9.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91369\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-fdelete-null-pointer-checks\" }\n \n struct S {"}, {"sha": "32f63a51e42068a1d3156835f80c630bd68306cc", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-typeid1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-typeid1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-typeid1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-typeid1.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/88337 - Implement P1327R1: Allow dynamic_cast/typeid in constexpr.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // Test non-polymorphic type.\n \n #include <typeinfo>"}, {"sha": "495914f1cca20288777197a72789dadc4d43b903", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-typeid2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-typeid2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-typeid2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-typeid2.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/88337 - Implement P1327R1: Allow dynamic_cast/typeid in constexpr.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // Test polymorphic type.\n \n #include <typeinfo>"}, {"sha": "e58026ac6203b2856e9837f359129d472acba690", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-typeid3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-typeid3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-typeid3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-typeid3.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/88337 - Implement P1327R1: Allow dynamic_cast/typeid in constexpr.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // Test typeid in a template.\n \n #include <typeinfo>"}, {"sha": "ac8aa5f669cb8c7cdee9237b8356488818cc3f87", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-union1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-union1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-union1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-union1.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n union U\n {"}, {"sha": "db00a3f6f28c98319dc917646ce938fd8e85c82d", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-virtual14.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual14.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/92695\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n struct A {\n   virtual int get () = 0;"}, {"sha": "88229cfd8483e4fb3b97b5a6a7cc1f02892bc1e0", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-virtual15.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual15.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/92695\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n struct A { virtual int get() = 0; };\n struct B : A { constexpr int get() override { return 10; } };"}, {"sha": "1dc00eaff6f7fcd12b3cb5b95706fefad1f743a8", "filename": "gcc/testsuite/g++.dg/cpp2a/constinit1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit1.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91360 - Implement C++20 P1143R2: constinit\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // Test basic usage of 'constinit'.\n \n const char *g() { return \"dynamic init\"; }"}, {"sha": "b678788541ecb3b0b8aa607820016a3600fb68de", "filename": "gcc/testsuite/g++.dg/cpp2a/constinit10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit10.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91360 - Implement C++20 P1143R2: constinit\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // From PR83428.\n \n struct S1"}, {"sha": "e8b3bcb570b7dd0e3d6f5876b73de275ee357782", "filename": "gcc/testsuite/g++.dg/cpp2a/constinit11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit11.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91360 - Implement C++20 P1143R2: constinit\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n int foo ();\n constexpr int constfoo () { return 42; }"}, {"sha": "cc6569b2277b241235372c485f220339e2e8d53d", "filename": "gcc/testsuite/g++.dg/cpp2a/constinit12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit12.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91360 - Implement C++20 P1143R2: constinit\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n struct S {\n   S(int) { }"}, {"sha": "86a058b632cccccdb0f8ad1d65251f09307490ce", "filename": "gcc/testsuite/g++.dg/cpp2a/constinit14.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit14.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/92134 - constinit malfunction in static data member.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n struct Value {\n   Value() : v{new int{42}} {}"}, {"sha": "29e8b51326d4b07424c1176e13b6689610c93a48", "filename": "gcc/testsuite/g++.dg/cpp2a/constinit15.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit15.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/92058 - constinit malfunction in static data member.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n struct B {\n     B() {}"}, {"sha": "a29c594657ac07f371b8498e58c03edd6351c183", "filename": "gcc/testsuite/g++.dg/cpp2a/constinit3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit3.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91360 - Implement C++20 P1143R2: constinit\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n constinit constinit int v1; // { dg-error \"duplicate .constinit.\" }\n constexpr constinit int v2 = 1; // { dg-error \"can use at most one of the .constinit. and .constexpr. specifiers\" }"}, {"sha": "0630e18ee0c0bf4a1fed213af4055e4b1ce5de6f", "filename": "gcc/testsuite/g++.dg/cpp2a/constinit4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit4.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91360 - Implement C++20 P1143R2: constinit\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n struct S { };\n constinit extern S s;"}, {"sha": "951c6fe1852f8311cbddc267af49686273cb87c3", "filename": "gcc/testsuite/g++.dg/cpp2a/constinit5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit5.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91360 - Implement C++20 P1143R2: constinit\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // Check that we preserve DECL_DECLARED_CONSTINIT_P in duplicate_decls.\n \n int gl = 42;"}, {"sha": "50bc13f2ce9f98e92de3586507dd98c4dad63edc", "filename": "gcc/testsuite/g++.dg/cpp2a/constinit8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit8.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91360 - Implement C++20 P1143R2: constinit\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // Variable templates.\n \n int nonconst;"}, {"sha": "9c5c848f7fcb1a7824a5db1e181c8e64b526fcc2", "filename": "gcc/testsuite/g++.dg/cpp2a/constinit9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit9.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91360 - Implement C++20 P1143R2: constinit\n-// { dg-do run { target c++2a } }\n+// { dg-do run { target c++20 } }\n // A run-time test.\n \n constexpr int foo (int x) { return x; }"}, {"sha": "a931e34860472d738749b5060aad079d68ff9632", "filename": "gcc/testsuite/g++.dg/cpp2a/desig13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig13.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -11,6 +11,6 @@ void\n baz ()\n {\n   foo ({.d = 5, 6, .b = 2, 3});\t// { dg-error \"designator order for field 'S::b' does not match declaration order in 'S'\" }\n-\t\t\t\t// { dg-error \"either all initializer clauses should be designated or none of them should be\" \"\" { target c++2a } .-1 }\n+\t\t\t\t// { dg-error \"either all initializer clauses should be designated or none of them should be\" \"\" { target c++20 } .-1 }\n   bar ({.b = 1, .a = 2});\t// { dg-error \"designator order for field 'T::a' does not match declaration order in 'T'\" }\n }"}, {"sha": "c993134fea0d4ccc4e5b3101368891a4214e75f1", "filename": "gcc/testsuite/g++.dg/cpp2a/desig2.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig2.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -5,15 +5,15 @@ struct S { int a, b, c; };\n \n S a = { 1, 2, 3 };\n S b = { .a = 1, .b = 2, .c = 3 };\n-S c = { 1, .b = 2, .c = 3 };\t// { dg-error \"either all initializer clauses should be designated or none of them should be\" \"\" { target c++2a } }\n-S d = { .a = 1, 2, 3 };\t\t// { dg-error \"either all initializer clauses should be designated or none of them should be\" \"\" { target c++2a } }\n+S c = { 1, .b = 2, .c = 3 };\t// { dg-error \"either all initializer clauses should be designated or none of them should be\" \"\" { target c++20 } }\n+S d = { .a = 1, 2, 3 };\t\t// { dg-error \"either all initializer clauses should be designated or none of them should be\" \"\" { target c++20 } }\n S e = { .b = 1, .b = 2 };\t// { dg-error \"designator used multiple times in the same initializer list\" }\n \n #if __cplusplus > 201103L\n template <int... N>\n void\n foo ()\n {\n-  S f = { .a = N... };\t\t// { dg-error \"'...' not allowed in designated initializer list\" \"\" { target c++2a } }\n+  S f = { .a = N... };\t\t// { dg-error \"'...' not allowed in designated initializer list\" \"\" { target c++20 } }\n }\n #endif"}, {"sha": "210a5a54c348c90920d0c416a0170fe7a0eff3a4", "filename": "gcc/testsuite/g++.dg/cpp2a/destroying-delete1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdestroying-delete1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdestroying-delete1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdestroying-delete1.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do run { target c++2a } }\n+// { dg-do run { target c++20 } }\n \n #include <new>\n "}, {"sha": "10cb80acfd1709441153ab01bd4d68c24745be4d", "filename": "gcc/testsuite/g++.dg/cpp2a/destroying-delete2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdestroying-delete2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdestroying-delete2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdestroying-delete2.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/88969\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n #include <new>\n "}, {"sha": "9cc495e6d725c9f0aafc8b78e4fba7cb6a6c0f6d", "filename": "gcc/testsuite/g++.dg/cpp2a/destroying-delete3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdestroying-delete3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdestroying-delete3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdestroying-delete3.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/88969\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n #include <new>\n "}, {"sha": "2bf0c09cefc6f5aa1897fddd32b30f0a75a16af4", "filename": "gcc/testsuite/g++.dg/cpp2a/destroying-delete4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdestroying-delete4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdestroying-delete4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdestroying-delete4.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/90171\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n #include <new>\n "}, {"sha": "3e510feee23e377b6301f344fd16033af397038d", "filename": "gcc/testsuite/g++.dg/cpp2a/explicit14.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fexplicit14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fexplicit14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fexplicit14.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/89420\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<typename>\n struct S {"}, {"sha": "939456c93f04aa32e7879e91636a9073c5e99e2c", "filename": "gcc/testsuite/g++.dg/cpp2a/explicit15.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fexplicit15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fexplicit15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fexplicit15.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/89836\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n struct W { \n   constexpr explicit operator bool() { return true; };"}, {"sha": "874e4cd3e299bb4e299d620c2e4b08e3d16ae448", "filename": "gcc/testsuite/g++.dg/cpp2a/inline-asm2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Finline-asm2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Finline-asm2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Finline-asm2.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,6 +1,6 @@\n // P1668R1: Permit unevaluated inline asm in constexpr functions\n // PR c++/91346\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n constexpr int\n foo (bool b)"}, {"sha": "a7476b1d9d1a48fbbda4100fdf936088437d9307", "filename": "gcc/testsuite/g++.dg/cpp2a/inline-asm3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Finline-asm3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Finline-asm3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Finline-asm3.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // P1668R1: Permit unevaluated inline asm in constexpr functions\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-additional-options \"-Wno-pedantic\" }\n \n constexpr int"}, {"sha": "0e96a1a372911a918a002e2dc9fc97fc6977d481", "filename": "gcc/testsuite/g++.dg/cpp2a/is-constant-evaluated9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated9.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/91428 - warn about std::is_constant_evaluated in if constexpr.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-options \"-Wtautological-compare\" }\n \n namespace std {"}, {"sha": "ab1a4e42bd98fef2baaeb64f12713e44c44ee294", "filename": "gcc/testsuite/g++.dg/cpp2a/lambda-generic-variadic20.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-generic-variadic20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-generic-variadic20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-generic-variadic20.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/94546\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <class T> T&& forward(T&& t) { return static_cast<T&&>(t); }\n "}, {"sha": "4430611376081120a804011c18d44aadef7d646e", "filename": "gcc/testsuite/g++.dg/cpp2a/lambda-generic5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-generic5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-generic5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-generic5.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -3,4 +3,4 @@\n // { dg-options \"-std=c++2a\" }\n \n int j = []<class T>(T t, int i) { return i; }(3, 4);\n-// { dg-bogus \"lambda templates are only available with\" \"\" { target c++2a } .-1 }\n+// { dg-bogus \"lambda templates are only available with\" \"\" { target c++20 } .-1 }"}, {"sha": "de45742053012df723727af94910556300e4ec71", "filename": "gcc/testsuite/g++.dg/cpp2a/lambda-generic7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-generic7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-generic7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-generic7.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/94507 - ICE-on-invalid with lambda template.\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n struct S { };\n "}, {"sha": "35abc9179e70e8f990b91803f037a2c7cc48f3cc", "filename": "gcc/testsuite/g++.dg/cpp2a/lambda-mangle.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-mangle.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-mangle.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-mangle.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // Test lambda mangling\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-require-weak \"\" }\n // { dg-options \"-fno-inline\" }\n "}, {"sha": "e5942ac0550a1c585820ce1d4f0f1822fedaa4d2", "filename": "gcc/testsuite/g++.dg/cpp2a/lambda-pack-init1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-pack-init1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-pack-init1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-pack-init1.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n void bar();\n void bar(int);"}, {"sha": "e950d6575740d92f549070705ebf523839a506c7", "filename": "gcc/testsuite/g++.dg/cpp2a/lambda-pack-init2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-pack-init2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-pack-init2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-pack-init2.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/89686\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <typename... Ts>\n void foo(Ts... xs)"}, {"sha": "b49e26dc7a38f8114ec5da11530d42e1230dffc2", "filename": "gcc/testsuite/g++.dg/cpp2a/lambda-pack-init4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-pack-init4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-pack-init4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-pack-init4.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // P2095R0\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n // { dg-options \"\" }\n \n template <class... T>"}, {"sha": "5fcf41b1a1f7658ebb9d94082d23484b545c72be", "filename": "gcc/testsuite/g++.dg/cpp2a/lambda-pack-init5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-pack-init5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-pack-init5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-pack-init5.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/94483\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template<int... a> constexpr auto x1\n   = [...z = -a] (auto F) { return F(z...); };"}, {"sha": "3e00e68e9060c9448981cbd7ca19548e6211f9b1", "filename": "gcc/testsuite/g++.dg/cpp2a/lambda-this3.C", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-this3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-this3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-this3.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -6,8 +6,8 @@ struct X {\n   int x;\n   void foo (int n) {\n     auto a1 = [=] { x = n; }; // { dg-bogus \"implicit capture\" \"\" { target c++17_down } }\n-\t\t\t      // { dg-warning \"implicit capture of 'this' via '\\\\\\[=\\\\\\]' is deprecated\" \"\" { target c++2a } .-1 }\n-\t\t\t      // { dg-message \"add explicit 'this' or '\\\\\\*this' capture\" \"\" { target c++2a } .-2 }\n+\t\t\t      // { dg-warning \"implicit capture of 'this' via '\\\\\\[=\\\\\\]' is deprecated\" \"\" { target c++20 } .-1 }\n+\t\t\t      // { dg-message \"add explicit 'this' or '\\\\\\*this' capture\" \"\" { target c++20 } .-2 }\n     auto a2 = [=, this] { x = n; };\n     // { dg-warning \"explicit by-copy capture\" \"\" { target c++17_down } .-1 }\n     auto a3 = [=, *this]() mutable { x = n; };\n@@ -16,14 +16,14 @@ struct X {\n     auto a6 = [&, *this]() mutable { x = n; };\n \n     auto a7 = [=] { // { dg-bogus \"implicit capture\" \"\" { target c++17_down } }\n-\t\t    // { dg-warning \"implicit capture of 'this' via '\\\\\\[=\\\\\\]' is deprecated\" \"\" { target c++2a } .-1 }\n-\t\t    // { dg-message \"add explicit 'this' or '\\\\\\*this' capture\" \"\" { target c++2a } .-2 }\n+\t\t    // { dg-warning \"implicit capture of 'this' via '\\\\\\[=\\\\\\]' is deprecated\" \"\" { target c++20 } .-1 }\n+\t\t    // { dg-message \"add explicit 'this' or '\\\\\\*this' capture\" \"\" { target c++20 } .-2 }\n       auto a = [=] { // { dg-bogus \"implicit capture\" \"\" { target c++17_down } }\n-\t\t     // { dg-warning \"implicit capture of 'this' via '\\\\\\[=\\\\\\]' is deprecated\" \"\" { target c++2a } .-1 }\n-\t\t     // { dg-message \"add explicit 'this' or '\\\\\\*this' capture\" \"\" { target c++2a } .-2 }\n+\t\t     // { dg-warning \"implicit capture of 'this' via '\\\\\\[=\\\\\\]' is deprecated\" \"\" { target c++20 } .-1 }\n+\t\t     // { dg-message \"add explicit 'this' or '\\\\\\*this' capture\" \"\" { target c++20 } .-2 }\n \t auto a2 = [=] { x = n; }; // { dg-bogus \"implicit capture\" \"\" { target c++17_down } }\n-\t\t\t\t   // { dg-warning \"implicit capture of 'this' via '\\\\\\[=\\\\\\]' is deprecated\" \"\" { target c++2a } .-1 }\n-\t\t\t\t   // { dg-message \"add explicit 'this' or '\\\\\\*this' capture\" \"\" { target c++2a } .-2 }\n+\t\t\t\t   // { dg-warning \"implicit capture of 'this' via '\\\\\\[=\\\\\\]' is deprecated\" \"\" { target c++20 } .-1 }\n+\t\t\t\t   // { dg-message \"add explicit 'this' or '\\\\\\*this' capture\" \"\" { target c++20 } .-2 }\n       };\n     };\n "}, {"sha": "816b6e994def76e9bbae7bfdd24217b89637eb21", "filename": "gcc/testsuite/g++.dg/cpp2a/lambda-uneval1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-uneval1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-uneval1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-uneval1.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n typedef decltype([]{}) C; // the closure type has no name for linkage purposes\n "}, {"sha": "01ad27f11515dea0a9ac66f7f624ac4fe5c5f2ba", "filename": "gcc/testsuite/g++.dg/cpp2a/lambda-uneval11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-uneval11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-uneval11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-uneval11.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/92010\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <class T> void spam(decltype([]{}) (*s)[sizeof(T)] = nullptr)\n { }"}, {"sha": "c66c6f8353f9b09f55b3fd546ee73e496ba316d7", "filename": "gcc/testsuite/g++.dg/cpp2a/lambda-uneval12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-uneval12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-uneval12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-uneval12.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,5 +1,5 @@\n // PR c++/94521\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <typename T>\n void spam(decltype([]{}) *s)"}, {"sha": "d8b20bdc2a42a350d0915ef3c85fc11fd70cd553", "filename": "gcc/testsuite/g++.dg/cpp2a/lambda-uneval2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-uneval2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-uneval2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-uneval2.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n // ill-formed, no diagnostic required: the two expressions are\n // functionally equivalent but not equivalent"}, {"sha": "994d184b643fc93f0819486be1eff2e888e01024", "filename": "gcc/testsuite/g++.dg/cpp2a/lambda-uneval3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-uneval3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-uneval3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-uneval3.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n template <int N> void foo(const char (*s)[([]{}, N)]) {}\n template <class T> void spam(decltype([]{}) (*s)[sizeof(T)]) {}"}, {"sha": "f12273910d31204dbdd028af07288b3641d64a17", "filename": "gcc/testsuite/g++.dg/cpp2a/lambda-uneval4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-uneval4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-uneval4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-uneval4.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do link { target c++2a } }\n+// { dg-do link { target c++20 } }\n \n template <class T> T f(T t) { return t; }\n using L = decltype([]{ return f(42); });"}, {"sha": "dc19004d3a1d39f402d8e103d7bc191967b814f7", "filename": "gcc/testsuite/g++.dg/cpp2a/lambda-uneval5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-uneval5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04445d4a809eaf0460fd4f1f35b1a7d458c8c72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-uneval5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-uneval5.C?ref=b04445d4a809eaf0460fd4f1f35b1a7d458c8c72", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++2a } }\n+// { dg-do compile { target c++20 } }\n \n using L = decltype([]{ });\n void f(L) { }"}]}