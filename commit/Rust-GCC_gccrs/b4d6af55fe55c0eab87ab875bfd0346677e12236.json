{"sha": "b4d6af55fe55c0eab87ab875bfd0346677e12236", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRkNmFmNTVmZTU1YzBlYWI4N2FiODc1YmZkMDM0NjY3N2UxMjIzNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-04-16T11:38:01Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-04-16T11:38:01Z"}, "message": "rtlanal: Don't assume that calls write to a global SP [PR99596]\n\nThis patch is a GCC 11 regression caused by the rtl-ssa code.\nNormally we treat calls as containing a potential set of a global\nregister, but DF makes a sensible exception for the stack pointer:\n\n      if (i == STACK_POINTER_REGNUM)\n\t/* The stack ptr is used (honorarily) by a CALL insn.  */\n\tdf_ref_record (DF_REF_BASE, collection_rec, regno_reg_rtx[i],\n\t\t       NULL, bb, insn_info, DF_REF_REG_USE,\n\t\t       DF_REF_CALL_STACK_USAGE | flags);\n      else if (global_regs[i])\n\t{\n\t  /* Calls to const functions cannot access any global registers and\n\t     calls to pure functions cannot set them.  All other calls may\n\t     reference any of the global registers, so they are recorded as\n\t     used. */\n\nThe only DF definition of SP was therefore the one in the entry block.\nHowever, the rtlanal.c rtx_properties code (wrongly) assumed that calls\nalso clobbered the global SP.  This led to multiple definitions of SP\nwhen we only expected one.\n\nThis patch tightens the rtlanal.c handling of global registers\nto match the DF approach.\n\ngcc/\n\tPR rtl-optimization/99596\n\t* rtlanal.c (rtx_properties::try_to_add_insn): Don't add global\n\tregister accesses for const calls.  Assume that pure functions\n\tcan only read from global registers.  Ignore cases in which\n\tthe stack pointer has been marked global.\n\ngcc/testsuite/\n\tPR rtl-optimization/99596\n\t* gcc.target/arm/pr99596.c: New test.", "tree": {"sha": "c1bc27d7b5157e117320030c3c35573bfa31fe1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1bc27d7b5157e117320030c3c35573bfa31fe1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4d6af55fe55c0eab87ab875bfd0346677e12236", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4d6af55fe55c0eab87ab875bfd0346677e12236", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4d6af55fe55c0eab87ab875bfd0346677e12236", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4d6af55fe55c0eab87ab875bfd0346677e12236/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69e7f04ff677d5e402f937b23422567c10243ee9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69e7f04ff677d5e402f937b23422567c10243ee9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69e7f04ff677d5e402f937b23422567c10243ee9"}], "stats": {"total": 38, "additions": 33, "deletions": 5}, "files": [{"sha": "170420a610b953e99a427e5034d3716053316c21", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d6af55fe55c0eab87ab875bfd0346677e12236/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d6af55fe55c0eab87ab875bfd0346677e12236/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=b4d6af55fe55c0eab87ab875bfd0346677e12236", "patch": "@@ -2311,15 +2311,25 @@ rtx_properties::try_to_add_insn (const rtx_insn *insn, bool include_notes)\n {\n   if (CALL_P (insn))\n     {\n-      /* Adding the global registers first removes a situation in which\n+      /* Non-const functions can read from global registers.  Impure\n+\t functions can also set them.\n+\n+\t Adding the global registers first removes a situation in which\n \t a fixed-form clobber of register R could come before a real set\n \t of register R.  */\n-      if (!hard_reg_set_empty_p (global_reg_set))\n+      if (!hard_reg_set_empty_p (global_reg_set)\n+\t  && !RTL_CONST_CALL_P (insn))\n \t{\n-\t  unsigned int flags = (rtx_obj_flags::IS_READ\n-\t\t\t\t| rtx_obj_flags::IS_WRITE);\n+\t  unsigned int flags = rtx_obj_flags::IS_READ;\n+\t  if (!RTL_PURE_CALL_P (insn))\n+\t    flags |= rtx_obj_flags::IS_WRITE;\n \t  for (unsigned int regno = 0; regno < FIRST_PSEUDO_REGISTER; ++regno)\n-\t    if (global_regs[regno] && ref_iter != ref_end)\n+\t    /* As a special case, the stack pointer is invariant across calls\n+\t       even if it has been marked global; see the corresponding\n+\t       handling in df_get_call_refs.  */\n+\t    if (regno != STACK_POINTER_REGNUM\n+\t\t&& global_regs[regno]\n+\t\t&& ref_iter != ref_end)\n \t      *ref_iter++ = rtx_obj_reference (regno, flags,\n \t\t\t\t\t       reg_raw_mode[regno], 0);\n \t}"}, {"sha": "2b8b4c87e96e2539174925a395ae856e84486e02", "filename": "gcc/testsuite/gcc.target/arm/pr99596.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d6af55fe55c0eab87ab875bfd0346677e12236/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr99596.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d6af55fe55c0eab87ab875bfd0346677e12236/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr99596.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr99596.c?ref=b4d6af55fe55c0eab87ab875bfd0346677e12236", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-options \"-Os -mtune=xscale\" } */\n+\n+register int a asm(\"sp\");\n+extern int b;\n+typedef struct {\n+  long c[16 * 8 / 32];\n+} d;\n+int e;\n+int f;\n+int g;\n+d h;\n+int j(int, int, int, d);\n+int i(void) {\n+  for (;;) {\n+    b &&j(e, f, g, h);\n+    j(e, f, g, h);\n+  }\n+}"}]}