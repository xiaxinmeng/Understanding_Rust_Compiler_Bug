{"sha": "e45abe1f20e35a461c2378f4caf8b1455c98385d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ1YWJlMWYyMGUzNWE0NjFjMjM3OGY0Y2FmOGIxNDU1Yzk4Mzg1ZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2012-07-26T21:31:40Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2012-07-26T21:31:40Z"}, "message": "Hot/cold attributes for labels.\n\ngcc/\n        * doc/extend.texi (attribute): Document hot/cold for labels.\n        * predict.c (tree_estimate_probability_bb): Handle hot/cold\n        attributes on user labels.\n        * predict.def (PRED_HOT_LABEL, PRED_COLD_LABEL): New.\ngcc/c-family/\n        * c-common.c (handle_hot_attribute): Allow labels.\n        (handle_cold_attribute): Likewise.\ngcc/testsuite/\n        * gcc.dg/attr-hotcold-1.c: New.\n        * gcc.dg/tree-ssa/attr-hotcold-2.c: New.\n\nFrom-SVN: r189898", "tree": {"sha": "20c51469f397cdea4c543dc55b62a9a1b3ce14d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20c51469f397cdea4c543dc55b62a9a1b3ce14d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e45abe1f20e35a461c2378f4caf8b1455c98385d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e45abe1f20e35a461c2378f4caf8b1455c98385d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e45abe1f20e35a461c2378f4caf8b1455c98385d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e45abe1f20e35a461c2378f4caf8b1455c98385d/comments", "author": null, "committer": null, "parents": [{"sha": "27ec0502c807dd79b1e6782806ac2d95bd084a6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27ec0502c807dd79b1e6782806ac2d95bd084a6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27ec0502c807dd79b1e6782806ac2d95bd084a6a"}], "stats": {"total": 146, "additions": 126, "deletions": 20}, "files": [{"sha": "d75809cce407bc6d1eea10956b644d5406350889", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45abe1f20e35a461c2378f4caf8b1455c98385d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45abe1f20e35a461c2378f4caf8b1455c98385d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e45abe1f20e35a461c2378f4caf8b1455c98385d", "patch": "@@ -1,3 +1,10 @@\n+2012-07-26  Richard Henderson  <rth@redhat.com>\n+\n+\t* doc/extend.texi (attribute): Document hot/cold for labels.\n+\t* predict.c (tree_estimate_probability_bb): Handle hot/cold\n+\tattributes on user labels.\n+\t* predict.def (PRED_HOT_LABEL, PRED_COLD_LABEL): New.\n+\n 2012-07-26  Andrew Jenner  <andrew@codesourcery.com>\n \t    Sandra Loosemore  <sandra@codesourcery.com>\n "}, {"sha": "983a93e4949f5e392c354075a5ce1e7fd577fda8", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45abe1f20e35a461c2378f4caf8b1455c98385d/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45abe1f20e35a461c2378f4caf8b1455c98385d/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=e45abe1f20e35a461c2378f4caf8b1455c98385d", "patch": "@@ -1,3 +1,8 @@\n+2012-07-26  Richard Henderson  <rth@redhat.com>\n+\n+\t* c-common.c (handle_hot_attribute): Allow labels.\n+\t(handle_cold_attribute): Likewise.\n+\n 2012-07-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/28656"}, {"sha": "a00254167c99583e168d09bc05b86efa65840b88", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45abe1f20e35a461c2378f4caf8b1455c98385d/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45abe1f20e35a461c2378f4caf8b1455c98385d/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=e45abe1f20e35a461c2378f4caf8b1455c98385d", "patch": "@@ -6169,7 +6169,8 @@ static tree\n handle_hot_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n \t\t      int ARG_UNUSED (flags), bool *no_add_attrs)\n {\n-  if (TREE_CODE (*node) == FUNCTION_DECL)\n+  if (TREE_CODE (*node) == FUNCTION_DECL\n+      || TREE_CODE (*node) == LABEL_DECL)\n     {\n       if (lookup_attribute (\"cold\", DECL_ATTRIBUTES (*node)) != NULL)\n \t{\n@@ -6188,14 +6189,16 @@ handle_hot_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n \n   return NULL_TREE;\n }\n+\n /* Handle a \"cold\" and attribute; arguments as in\n    struct attribute_spec.handler.  */\n \n static tree\n handle_cold_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n \t\t       int ARG_UNUSED (flags), bool *no_add_attrs)\n {\n-  if (TREE_CODE (*node) == FUNCTION_DECL)\n+  if (TREE_CODE (*node) == FUNCTION_DECL\n+      || TREE_CODE (*node) == LABEL_DECL)\n     {\n       if (lookup_attribute (\"hot\", DECL_ATTRIBUTES (*node)) != NULL)\n \t{"}, {"sha": "5d851a7386b79feb658c5586f06cdee25a615cf2", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 38, "deletions": 18, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45abe1f20e35a461c2378f4caf8b1455c98385d/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45abe1f20e35a461c2378f4caf8b1455c98385d/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=e45abe1f20e35a461c2378f4caf8b1455c98385d", "patch": "@@ -3345,33 +3345,53 @@ than 2.96.\n \n @item hot\n @cindex @code{hot} function attribute\n-The @code{hot} attribute is used to inform the compiler that a function is a\n-hot spot of the compiled program.  The function is optimized more aggressively\n-and on many target it is placed into special subsection of the text section so\n-all hot functions appears close together improving locality.\n+The @code{hot} attribute on a function is used to inform the compiler that\n+the function is a hot spot of the compiled program.  The function is\n+optimized more aggressively and on many target it is placed into special\n+subsection of the text section so all hot functions appears close together\n+improving locality.\n \n When profile feedback is available, via @option{-fprofile-use}, hot functions\n are automatically detected and this attribute is ignored.\n \n-The @code{hot} attribute is not implemented in GCC versions earlier\n-than 4.3.\n+The @code{hot} attribute on functions is not implemented in GCC versions\n+earlier than 4.3.\n+\n+@cindex @code{hot} label attribute\n+The @code{hot} attribute on a label is used to inform the compiler that\n+path following the label are more likely than paths that are not so\n+annotated.  This attribute is used in cases where @code{__builtin_expect}\n+cannot be used, for instance with computed goto or @code{asm goto}.\n+\n+The @code{hot} attribute on labels is not implemented in GCC versions\n+earlier than 4.8.\n \n @item cold\n @cindex @code{cold} function attribute\n-The @code{cold} attribute is used to inform the compiler that a function is\n-unlikely executed.  The function is optimized for size rather than speed and on\n-many targets it is placed into special subsection of the text section so all\n-cold functions appears close together improving code locality of non-cold parts\n-of program.  The paths leading to call of cold functions within code are marked\n-as unlikely by the branch prediction mechanism. It is thus useful to mark\n-functions used to handle unlikely conditions, such as @code{perror}, as cold to\n-improve optimization of hot functions that do call marked functions in rare\n-occasions.\n-\n-When profile feedback is available, via @option{-fprofile-use}, hot functions\n+The @code{cold} attribute on functions is used to inform the compiler that\n+the function is unlikely to be executed.  The function is optimized for\n+size rather than speed and on many targets it is placed into special\n+subsection of the text section so all cold functions appears close together\n+improving code locality of non-cold parts of program.  The paths leading\n+to call of cold functions within code are marked as unlikely by the branch\n+prediction mechanism.  It is thus useful to mark functions used to handle\n+unlikely conditions, such as @code{perror}, as cold to improve optimization\n+of hot functions that do call marked functions in rare occasions.\n+\n+When profile feedback is available, via @option{-fprofile-use}, cold functions\n are automatically detected and this attribute is ignored.\n \n-The @code{cold} attribute is not implemented in GCC versions earlier than 4.3.\n+The @code{cold} attribute on functions is not implemented in GCC versions\n+earlier than 4.3.\n+\n+@cindex @code{cold} label attribute\n+The @code{cold} attribute on labels is used to inform the compiler that\n+the path following the label is unlikely to be executed.  This attribute\n+is used in cases where @code{__builtin_expect} cannot be used, for instance\n+with computed goto or @code{asm goto}.\n+\n+The @code{cold} attribute on labels is not implemented in GCC versions\n+earlier than 4.8.\n \n @item regparm (@var{number})\n @cindex @code{regparm} attribute"}, {"sha": "b8acdbaeb6eb1d12d433aa56666bff36712f23ab", "filename": "gcc/predict.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45abe1f20e35a461c2378f4caf8b1455c98385d/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45abe1f20e35a461c2378f4caf8b1455c98385d/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=e45abe1f20e35a461c2378f4caf8b1455c98385d", "patch": "@@ -2059,6 +2059,29 @@ tree_estimate_probability_bb (basic_block bb)\n \n   FOR_EACH_EDGE (e, ei, bb->succs)\n     {\n+      /* Predict edges to user labels with attributes.  */\n+      if (e->dest != EXIT_BLOCK_PTR)\n+\t{\n+\t  gimple_stmt_iterator gi;\n+\t  for (gi = gsi_start_bb (e->dest); !gsi_end_p (gi); gsi_next (&gi))\n+\t    {\n+\t      gimple stmt = gsi_stmt (gi);\n+\t      tree decl;\n+\n+\t      if (gimple_code (stmt) != GIMPLE_LABEL)\n+\t\tbreak;\n+\t      decl = gimple_label_label (stmt);\n+\t      if (DECL_ARTIFICIAL (decl))\n+\t\tcontinue;\n+\n+\t      /* Finally, we have a user-defined label.  */\n+\t      if (lookup_attribute (\"cold\", DECL_ATTRIBUTES (decl)))\n+\t\tpredict_edge_def (e, PRED_COLD_LABEL, NOT_TAKEN);\n+\t      else if (lookup_attribute (\"hot\", DECL_ATTRIBUTES (decl)))\n+\t\tpredict_edge_def (e, PRED_HOT_LABEL, TAKEN);\n+\t    }\n+\t}\n+\n       /* Predict early returns to be probable, as we've already taken\n \t care for error returns and other cases are often used for\n \t fast paths through function."}, {"sha": "7e77f141a4d96f565d209b9c7133e03347968cb1", "filename": "gcc/predict.def", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45abe1f20e35a461c2378f4caf8b1455c98385d/gcc%2Fpredict.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45abe1f20e35a461c2378f4caf8b1455c98385d/gcc%2Fpredict.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.def?ref=e45abe1f20e35a461c2378f4caf8b1455c98385d", "patch": "@@ -126,3 +126,10 @@ DEF_PREDICTOR (PRED_LOOP_IV_COMPARE_GUESS, \"guess loop iv compare\",\n    to set probability of branches that compares IV to loop bound variable.  */\n DEF_PREDICTOR (PRED_LOOP_IV_COMPARE, \"loop iv compare\", PROB_VERY_LIKELY,\n \t       PRED_FLAG_FIRST_MATCH)\n+\n+/* Branches to hot labels are likely.  */\n+DEF_PREDICTOR (PRED_HOT_LABEL, \"hot label\", HITRATE (85), 0)\n+\n+/* Branches to cold labels are extremely unlikely.  */\n+DEF_PREDICTOR (PRED_COLD_LABEL, \"cold label\", PROB_VERY_LIKELY,\n+\t       PRED_FLAG_FIRST_MATCH)"}, {"sha": "320d4efd70d6abc75ad15abe000c2804c8ccf88b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45abe1f20e35a461c2378f4caf8b1455c98385d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45abe1f20e35a461c2378f4caf8b1455c98385d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e45abe1f20e35a461c2378f4caf8b1455c98385d", "patch": "@@ -1,3 +1,8 @@\n+2012-07-26  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.dg/attr-hotcold-1.c: New.\n+\t* gcc.dg/tree-ssa/attr-hotcold-2.c: New.\n+\n 2012-07-26  Andrew Jenner  <andrew@codesourcery.com>\n \t    Sandra Loosemore  <sandra@codesourcery.com>\n "}, {"sha": "f63a95c71c53160f1c99ad9578882d1869227294", "filename": "gcc/testsuite/gcc.dg/attr-hotcold-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45abe1f20e35a461c2378f4caf8b1455c98385d/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-hotcold-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45abe1f20e35a461c2378f4caf8b1455c98385d/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-hotcold-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-hotcold-1.c?ref=e45abe1f20e35a461c2378f4caf8b1455c98385d", "patch": "@@ -0,0 +1,8 @@\n+void f(void)\n+{\n+  goto A;\n+ A: __attribute__((cold))\n+  goto B;\n+ B: __attribute__((hot))\n+  return;\n+}"}, {"sha": "84327fe52d57769562eb18cdf052b685a046996f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/attr-hotcold-2.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45abe1f20e35a461c2378f4caf8b1455c98385d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fattr-hotcold-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45abe1f20e35a461c2378f4caf8b1455c98385d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fattr-hotcold-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fattr-hotcold-2.c?ref=e45abe1f20e35a461c2378f4caf8b1455c98385d", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-profile_estimate-details\" } */\n+\n+void g(void);\n+void h(void);\n+void f(int x, int y)\n+{\n+  if (x) goto A;\n+  if (y) goto B;\n+  return;\n+\n+ A: __attribute__((cold))\n+  g();\n+  return;\n+\n+ B: __attribute__((hot))\n+  h();\n+  return;\n+}\n+\n+/* { dg-final { scan-ipa-dump-times \"block 4, loop depth 0, count 0, freq 1\\[^0-9\\]\" 1 \"profile_estimate\" } } */\n+\n+/* Note: we're attempting to match some number > 6000, i.e. > 60%.\n+   The exact number ought to be tweekable without having to juggle\n+   the testcase around too much.  */\n+/* { dg-final { scan-ipa-dump-times \"block 5, loop depth 0, count 0, freq \\[6-9\\]\\[0-9\\]\\[0-9\\]\\[0-9\\]\" 1 \"profile_estimate\" } } */\n+\n+/* { dg-final { cleanup-tree-dump \"profile_estimate\" } } */"}]}