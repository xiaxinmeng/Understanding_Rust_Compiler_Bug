{"sha": "04a745556021b7a1c6e81a41d0a12b60a4d9475d", "node_id": "C_kwDOANBUbNoAKDA0YTc0NTU1NjAyMWI3YTFjNmU4MWE0MWQwYTEyYjYwYTRkOTQ3NWQ", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2022-01-10T19:59:02Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2022-01-10T20:00:07Z"}, "message": "i386: Introduce V2QImode vector compares [PR103861]\n\nAdd V2QImode vector compares with SSE registers.\n\n2022-01-10  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\n\tPR target/103861\n\t* config/i386/i386-expand.c (ix86_expand_int_sse_cmp):\n\tHandle V2QImode.\n\t* config/i386/mmx.md (<sat_plusminus:insn><mode>3):\n\tUse VI1_16_32 mode iterator.\n\t(*eq<mode>3): Ditto.\n\t(*gt<mode>3): Ditto.\n\t(*xop_maskcmp<mode>3): Ditto.\n\t(*xop_maskcmp_uns<mode>3): Ditto.\n\t(vec_cmp<mode><mode>): Ditto.\n\t(vec_cmpu<mode><mode>): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/103861\n\t* gcc.target/i386/pr103861-2.c: New test.", "tree": {"sha": "7a83b005ffd993121644cb0e52977e777a97c8fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a83b005ffd993121644cb0e52977e777a97c8fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04a745556021b7a1c6e81a41d0a12b60a4d9475d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04a745556021b7a1c6e81a41d0a12b60a4d9475d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04a745556021b7a1c6e81a41d0a12b60a4d9475d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04a745556021b7a1c6e81a41d0a12b60a4d9475d/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab36b554bd90e8db279d13b133369118814f13fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab36b554bd90e8db279d13b133369118814f13fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab36b554bd90e8db279d13b133369118814f13fb"}], "stats": {"total": 84, "additions": 56, "deletions": 28}, "files": [{"sha": "add748bcf4072ef94599fe943ac9ab454bd5c60e", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a745556021b7a1c6e81a41d0a12b60a4d9475d/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a745556021b7a1c6e81a41d0a12b60a4d9475d/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=04a745556021b7a1c6e81a41d0a12b60a4d9475d", "patch": "@@ -4444,6 +4444,12 @@ ix86_expand_int_sse_cmp (rtx dest, enum rtx_code code, rtx cop0, rtx cop1,\n \t      else if (code == GT && TARGET_SSE4_1)\n \t\tgen = gen_sminv4qi3;\n \t      break;\n+\t    case E_V2QImode:\n+\t      if (code == GTU && TARGET_SSE2)\n+\t\tgen = gen_uminv2qi3;\n+\t      else if (code == GT && TARGET_SSE4_1)\n+\t\tgen = gen_sminv2qi3;\n+\t      break;\n \t    case E_V8HImode:\n \t      if (code == GTU && TARGET_SSE4_1)\n \t\tgen = gen_uminv8hi3;\n@@ -4537,6 +4543,7 @@ ix86_expand_int_sse_cmp (rtx dest, enum rtx_code code, rtx cop0, rtx cop1,\n \t    case E_V16QImode:\n \t    case E_V8QImode:\n \t    case E_V4QImode:\n+\t    case E_V2QImode:\n \t    case E_V8HImode:\n \t    case E_V4HImode:\n \t    case E_V2HImode:"}, {"sha": "91d642187be085b10326bbf6cc0c36930cc8bc45", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a745556021b7a1c6e81a41d0a12b60a4d9475d/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a745556021b7a1c6e81a41d0a12b60a4d9475d/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=04a745556021b7a1c6e81a41d0a12b60a4d9475d", "patch": "@@ -1824,10 +1824,10 @@\n    (set_attr \"mode\" \"DI,TI,TI\")])\n \n (define_insn \"*<insn><mode>3\"\n-  [(set (match_operand:VI_32 0 \"register_operand\" \"=x,Yw\")\n-        (sat_plusminus:VI_32\n-\t  (match_operand:VI_32 1 \"register_operand\" \"<comm>0,Yw\")\n-\t  (match_operand:VI_32 2 \"register_operand\" \"x,Yw\")))]\n+  [(set (match_operand:VI_16_32 0 \"register_operand\" \"=x,Yw\")\n+        (sat_plusminus:VI_16_32\n+\t  (match_operand:VI_16_32 1 \"register_operand\" \"<comm>0,Yw\")\n+\t  (match_operand:VI_16_32 2 \"register_operand\" \"x,Yw\")))]\n   \"TARGET_SSE2\"\n   \"@\n    p<plusminus_mnemonic><mmxvecsize>\\t{%2, %0|%0, %2}\n@@ -2418,10 +2418,10 @@\n    (set_attr \"mode\" \"DI,TI,TI\")])\n \n (define_insn \"*eq<mode>3\"\n-  [(set (match_operand:VI_32 0 \"register_operand\" \"=x,x\")\n-        (eq:VI_32\n-\t  (match_operand:VI_32 1 \"register_operand\" \"%0,x\")\n-\t  (match_operand:VI_32 2 \"register_operand\" \"x,x\")))]\n+  [(set (match_operand:VI_16_32 0 \"register_operand\" \"=x,x\")\n+        (eq:VI_16_32\n+\t  (match_operand:VI_16_32 1 \"register_operand\" \"%0,x\")\n+\t  (match_operand:VI_16_32 2 \"register_operand\" \"x,x\")))]\n   \"TARGET_SSE2\"\n   \"@\n    pcmpeq<mmxvecsize>\\t{%2, %0|%0, %2}\n@@ -2446,10 +2446,10 @@\n    (set_attr \"mode\" \"DI,TI,TI\")])\n \n (define_insn \"*gt<mode>3\"\n-  [(set (match_operand:VI_32 0 \"register_operand\" \"=x,x\")\n-        (gt:VI_32\n-\t  (match_operand:VI_32 1 \"register_operand\" \"0,x\")\n-\t  (match_operand:VI_32 2 \"register_operand\" \"x,x\")))]\n+  [(set (match_operand:VI_16_32 0 \"register_operand\" \"=x,x\")\n+        (gt:VI_16_32\n+\t  (match_operand:VI_16_32 1 \"register_operand\" \"0,x\")\n+\t  (match_operand:VI_16_32 2 \"register_operand\" \"x,x\")))]\n   \"TARGET_SSE2\"\n   \"@\n    pcmpgt<mmxvecsize>\\t{%2, %0|%0, %2}\n@@ -2473,10 +2473,10 @@\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"*xop_maskcmp<mode>3\"\n-  [(set (match_operand:VI_32 0 \"register_operand\" \"=x\")\n-\t(match_operator:VI_32 1 \"ix86_comparison_int_operator\"\n-\t [(match_operand:VI_32 2 \"register_operand\" \"x\")\n-\t  (match_operand:VI_32 3 \"register_operand\" \"x\")]))]\n+  [(set (match_operand:VI_16_32 0 \"register_operand\" \"=x\")\n+\t(match_operator:VI_16_32 1 \"ix86_comparison_int_operator\"\n+\t [(match_operand:VI_16_32 2 \"register_operand\" \"x\")\n+\t  (match_operand:VI_16_32 3 \"register_operand\" \"x\")]))]\n   \"TARGET_XOP\"\n   \"vpcom%Y1<mmxvecsize>\\t{%3, %2, %0|%0, %2, %3}\"\n   [(set_attr \"type\" \"sse4arg\")\n@@ -2501,10 +2501,10 @@\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"*xop_maskcmp_uns<mode>3\"\n-  [(set (match_operand:VI_32 0 \"register_operand\" \"=x\")\n-\t(match_operator:VI_32 1 \"ix86_comparison_uns_operator\"\n-\t [(match_operand:VI_32 2 \"register_operand\" \"x\")\n-\t  (match_operand:VI_32 3 \"register_operand\" \"x\")]))]\n+  [(set (match_operand:VI_16_32 0 \"register_operand\" \"=x\")\n+\t(match_operator:VI_16_32 1 \"ix86_comparison_uns_operator\"\n+\t [(match_operand:VI_16_32 2 \"register_operand\" \"x\")\n+\t  (match_operand:VI_16_32 3 \"register_operand\" \"x\")]))]\n   \"TARGET_XOP\"\n   \"vpcom%Y1u<mmxvecsize>\\t{%3, %2, %0|%0, %2, %3}\"\n   [(set_attr \"type\" \"ssecmp\")\n@@ -2527,10 +2527,10 @@\n })\n \n (define_expand \"vec_cmp<mode><mode>\"\n-  [(set (match_operand:VI_32 0 \"register_operand\")\n-\t(match_operator:VI_32 1 \"\"\n-\t  [(match_operand:VI_32 2 \"register_operand\")\n-\t   (match_operand:VI_32 3 \"register_operand\")]))]\n+  [(set (match_operand:VI_16_32 0 \"register_operand\")\n+\t(match_operator:VI_16_32 1 \"\"\n+\t  [(match_operand:VI_16_32 2 \"register_operand\")\n+\t   (match_operand:VI_16_32 3 \"register_operand\")]))]\n   \"TARGET_SSE2\"\n {\n   bool ok = ix86_expand_int_vec_cmp (operands);\n@@ -2551,10 +2551,10 @@\n })\n \n (define_expand \"vec_cmpu<mode><mode>\"\n-  [(set (match_operand:VI_32 0 \"register_operand\")\n-\t(match_operator:VI_32 1 \"\"\n-\t  [(match_operand:VI_32 2 \"register_operand\")\n-\t   (match_operand:VI_32 3 \"register_operand\")]))]\n+  [(set (match_operand:VI_16_32 0 \"register_operand\")\n+\t(match_operator:VI_16_32 1 \"\"\n+\t  [(match_operand:VI_16_32 2 \"register_operand\")\n+\t   (match_operand:VI_16_32 3 \"register_operand\")]))]\n   \"TARGET_SSE2\"\n {\n   bool ok = ix86_expand_int_vec_cmp (operands);"}, {"sha": "471f50ca09fd33cbb3000dbe1cdfff209a9551ef", "filename": "gcc/testsuite/gcc.target/i386/pr103861-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a745556021b7a1c6e81a41d0a12b60a4d9475d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103861-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a745556021b7a1c6e81a41d0a12b60a4d9475d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103861-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103861-2.c?ref=04a745556021b7a1c6e81a41d0a12b60a4d9475d", "patch": "@@ -0,0 +1,21 @@\n+/* PR target/103861 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+typedef char vec __attribute__((vector_size(2)));\n+\n+vec lt (vec a, vec b) { return a < b; }\n+vec le (vec a, vec b) { return a <= b; }\n+vec eq (vec a, vec b) { return a == b; }\n+vec ne (vec a, vec b) { return a != b; }\n+vec ge (vec a, vec b) { return a >= b; }\n+vec gt (vec a, vec b) { return a > b; }\n+\n+typedef unsigned char uvec __attribute__((vector_size(2)));\n+\n+vec ltu (uvec a, uvec b) { return a < b; }\n+vec leu (uvec a, uvec b) { return a <= b; }\n+vec geu (uvec a, uvec b) { return a >= b; }\n+vec gtu (uvec a, uvec b) { return a > b; }\n+\n+/* { dg-final { scan-assembler-not \"cmpb\" } } */"}]}