{"sha": "01f76283740de01c0f4ad88592b6dad915ceebb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFmNzYyODM3NDBkZTAxYzBmNGFkODg1OTJiNmRhZDkxNWNlZWJiMg==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1999-01-06T22:15:40Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1999-01-06T22:15:40Z"}, "message": "i\nFixed some stupid typos that managed to get checked in.\n\nFrom-SVN: r24543", "tree": {"sha": "46cc2b3b9b7c0f044aa0d2e69a57d35cbce93994", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46cc2b3b9b7c0f044aa0d2e69a57d35cbce93994"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01f76283740de01c0f4ad88592b6dad915ceebb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01f76283740de01c0f4ad88592b6dad915ceebb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01f76283740de01c0f4ad88592b6dad915ceebb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01f76283740de01c0f4ad88592b6dad915ceebb2/comments", "author": null, "committer": null, "parents": [{"sha": "884ba59aa22d84aaab942ddebc6d23cf5c4a11bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/884ba59aa22d84aaab942ddebc6d23cf5c4a11bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/884ba59aa22d84aaab942ddebc6d23cf5c4a11bf"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "c4b73e2921cd581fbf670346b38f177143903939", "filename": "gcc/java/check-init.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f76283740de01c0f4ad88592b6dad915ceebb2/gcc%2Fjava%2Fcheck-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f76283740de01c0f4ad88592b6dad915ceebb2/gcc%2Fjava%2Fcheck-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fcheck-init.c?ref=01f76283740de01c0f4ad88592b6dad915ceebb2", "patch": "@@ -145,12 +145,12 @@ check_cond_init (test_exp, then_exp, else_exp,\n }\n \n /* Check a boolean binary form CODE (EXP0, EXP1),\n-   where CODE is one of EQ_EXPR, BIT_AND_EXPR, or BIT_OR_EXPR.\n+   where CODE is one of EQ_EXPR, BIT_AND_EXPR, or BIT_IOR_EXPR.\n    BEFORE, WHEN_FALSE, and WHEN_TRUE are as in check_bool_init. */\n \n static void\n check_bool2_init (code, exp0, exp1, before, when_false, when_true)\n-     enumtree_code code;  tree exp0, exp1;\n+     enum tree_code code;  tree exp0, exp1;\n      words before, when_false, when_true;\n {\n   word buf[4];\n@@ -192,13 +192,13 @@ check_bool2_init (code, exp0, exp1, before, when_false, when_true)\n     {\n       UNION (when_true, when_true_0, when_true_1);\n       INTERSECT (when_false, when_false_0, when_false_1);\n-      UNION (when_false, before);\n+      UNION (when_false, when_false, before);\n     }\n-  else /* if (code == BIT_OR_EXPR) */\n+  else /* if (code == BIT_IOR_EXPR) */\n     {\n       UNION (when_false, when_false_0, when_false_1);\n       INTERSECT (when_true, when_true_0, when_true_1);\n-      UNION (when_true, before);\n+      UNION (when_true, when_true, before);\n     }\n \n   if (tmp != buf)\n@@ -215,7 +215,6 @@ check_bool2_init (code, exp0, exp1, before, when_false, when_true)\n    (WHEN_FALSE and WHEN_TRUE are overwriten with initial values ignored.)\n    (None of BEFORE, WHEN_FALSE, or WHEN_TRUE can overlap, as they may\n    be used as temporary working areas. */\n-*/\n \n static void\n check_bool_init (exp, before, when_false, when_true)\n@@ -263,7 +262,7 @@ check_bool_init (exp, before, when_false, when_true)\n       goto do_default;\n \n     case BIT_AND_EXPR:\n-    case BIT_OR_EXPR:\n+    case BIT_IOR_EXPR:\n     case EQ_EXPR:\n       check_bool2_init (TREE_CODE (exp),\n \t\t\tTREE_OPERAND (exp, 0), TREE_OPERAND (exp, 1),"}]}