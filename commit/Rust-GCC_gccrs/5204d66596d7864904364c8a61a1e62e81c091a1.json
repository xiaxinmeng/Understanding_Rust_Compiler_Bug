{"sha": "5204d66596d7864904364c8a61a1e62e81c091a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTIwNGQ2NjU5NmQ3ODY0OTA0MzY0YzhhNjFhMWU2MmU4MWMwOTFhMQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2002-06-03T18:16:50Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2002-06-03T18:16:50Z"}, "message": "except.c (except.c): Do not rebuild CFG.\n\n\n\t* except.c (except.c): Do not rebuild CFG.\n\t* toplev.c (rest_of_compilation): Recompute CFG after sibcall\n\toptimization.\n\nFrom-SVN: r54217", "tree": {"sha": "766b4f10bf4b5fb575a750457126b07e7b091dfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/766b4f10bf4b5fb575a750457126b07e7b091dfc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5204d66596d7864904364c8a61a1e62e81c091a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5204d66596d7864904364c8a61a1e62e81c091a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5204d66596d7864904364c8a61a1e62e81c091a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5204d66596d7864904364c8a61a1e62e81c091a1/comments", "author": null, "committer": null, "parents": [{"sha": "824030c6245b042e3dbc81e4151425c446787d91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/824030c6245b042e3dbc81e4151425c446787d91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/824030c6245b042e3dbc81e4151425c446787d91"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "9b61fa6011ab20d17a31dcc7ab90c5e699a7a7b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5204d66596d7864904364c8a61a1e62e81c091a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5204d66596d7864904364c8a61a1e62e81c091a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5204d66596d7864904364c8a61a1e62e81c091a1", "patch": "@@ -1,3 +1,9 @@\n+Mon Jun  3 19:11:53 CEST 2002  Jan Hubicka  <jh@suse.cz>\n+\n+\t* except.c (except.c): Do not rebuild CFG.\n+\t* toplev.c (rest_of_compilation): Recompute CFG after sibcall\n+\toptimization.\n+\n Mon Jun  3 11:53:01 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \n \t* integrate.c (copy_insn_list): Properly pace the INSN_SCOPE copies."}, {"sha": "a2f2c69a1e1358630577e841b6a06348b7b8418a", "filename": "gcc/except.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5204d66596d7864904364c8a61a1e62e81c091a1/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5204d66596d7864904364c8a61a1e62e81c091a1/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=5204d66596d7864904364c8a61a1e62e81c091a1", "patch": "@@ -2499,8 +2499,6 @@ finish_eh_generation ()\n      connect many of the handlers, and then type information will not\n      be effective.  Still, this is a win over previous implementations.  */\n \n-  rebuild_jump_labels (get_insns ());\n-  find_basic_blocks (get_insns (), max_reg_num (), 0);\n   cleanup_cfg (CLEANUP_PRE_LOOP | CLEANUP_NO_INSN_DEL);\n \n   /* These registers are used by the landing pads.  Make sure they"}, {"sha": "702937591b18dde9db73c74a9d174522b34d240f", "filename": "gcc/toplev.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5204d66596d7864904364c8a61a1e62e81c091a1/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5204d66596d7864904364c8a61a1e62e81c091a1/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=5204d66596d7864904364c8a61a1e62e81c091a1", "patch": "@@ -2560,6 +2560,12 @@ rest_of_compilation (decl)\n       rtx insn;\n       optimize_sibling_and_tail_recursive_calls ();\n \n+      /* Recompute the CFG as sibling optimization clobbers it randomly.  */\n+      free_bb_for_insn ();\n+      find_exception_handler_labels ();\n+      rebuild_jump_labels (insns);\n+      find_basic_blocks (insns, max_reg_num (), rtl_dump_file);\n+\n       /* There is pass ordering problem - we must lower NOTE_INSN_PREDICTION\n          notes before simplifying cfg and we must do lowering after sibcall\n          that unhides parts of RTL chain and cleans up the CFG.\n@@ -2576,7 +2582,6 @@ rest_of_compilation (decl)\n \n   scope_to_insns_initialize ();\n   /* Complete generation of exception handling code.  */\n-  find_exception_handler_labels ();\n   if (doing_eh (0))\n     {\n       timevar_push (TV_JUMP);"}]}