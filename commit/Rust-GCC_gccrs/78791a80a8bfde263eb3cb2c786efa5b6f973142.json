{"sha": "78791a80a8bfde263eb3cb2c786efa5b6f973142", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg3OTFhODBhOGJmZGUyNjNlYjNjYjJjNzg2ZWZhNWI2Zjk3MzE0Mg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2008-11-12T18:04:39Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2008-11-12T18:04:39Z"}, "message": "[multiple changes]\n\n2008-11-12  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n\n\t* gcc/config/s390/s390.h (INITIAL_FRAME_ADDRESS_RTX): Remove\n\tpacked-stack special handling.\n\t(FRAME_ADDR_RTX): Add definition.\n\n2008-11-12  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* gcc.target/s390/frame-addr1.c: New testcase.\n\t* gcc.target/s390/frame-addr2.c: New testcase.\n\t* gcc.target/s390/return-addr1.c: New testcase.\n\t* gcc.target/s390/return-addr2.c: New testcase.\n\nFrom-SVN: r141796", "tree": {"sha": "03ae6dc0ab366f088eab600a3c8ad3a6b68c7181", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03ae6dc0ab366f088eab600a3c8ad3a6b68c7181"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78791a80a8bfde263eb3cb2c786efa5b6f973142", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78791a80a8bfde263eb3cb2c786efa5b6f973142", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78791a80a8bfde263eb3cb2c786efa5b6f973142", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78791a80a8bfde263eb3cb2c786efa5b6f973142/comments", "author": null, "committer": null, "parents": [{"sha": "2069a97a4a6bab22048158add3db32d6b38f0021", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2069a97a4a6bab22048158add3db32d6b38f0021", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2069a97a4a6bab22048158add3db32d6b38f0021"}], "stats": {"total": 221, "additions": 218, "deletions": 3}, "files": [{"sha": "e94f8227b52e33a6bd141aee10f500d910eceaf2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78791a80a8bfde263eb3cb2c786efa5b6f973142/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78791a80a8bfde263eb3cb2c786efa5b6f973142/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78791a80a8bfde263eb3cb2c786efa5b6f973142", "patch": "@@ -1,3 +1,9 @@\n+2008-11-12  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\t* gcc/config/s390/s390.h (INITIAL_FRAME_ADDRESS_RTX): Remove\n+\tpacked-stack special handling.\n+\t(FRAME_ADDR_RTX): Add definition.\n+\n 2008-11-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/35366"}, {"sha": "449c1b64e6e928da4468ef2845f1231c2c20b59c", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78791a80a8bfde263eb3cb2c786efa5b6f973142/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78791a80a8bfde263eb3cb2c786efa5b6f973142/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=78791a80a8bfde263eb3cb2c786efa5b6f973142", "patch": "@@ -574,9 +574,7 @@ extern const enum reg_class regclass_map[FIRST_PSEUDO_REGISTER];\n /* Defining this macro makes __builtin_frame_address(0) and \n    __builtin_return_address(0) work with -fomit-frame-pointer.  */\n #define INITIAL_FRAME_ADDRESS_RTX                                             \\\n-  (TARGET_PACKED_STACK ?                                                      \\\n-   plus_constant (arg_pointer_rtx, -UNITS_PER_WORD) :                         \\\n-   plus_constant (arg_pointer_rtx, -STACK_POINTER_OFFSET))\n+  (plus_constant (arg_pointer_rtx, -STACK_POINTER_OFFSET))\n \n /* The return address of the current frame is retrieved\n    from the initial value of register RETURN_REGNUM.\n@@ -586,6 +584,16 @@ extern const enum reg_class regclass_map[FIRST_PSEUDO_REGISTER];\n   (TARGET_PACKED_STACK ?                                                      \\\n    plus_constant ((FRAME), STACK_POINTER_OFFSET - UNITS_PER_WORD) : (FRAME))\n \n+/* For -mpacked-stack this adds 160 - 8 (96 - 4) to the output of\n+   builtin_frame_address.  Otherwise arg pointer -\n+   STACK_POINTER_OFFSET would be returned for\n+   __builtin_frame_address(0) what might result in an address pointing\n+   somewhere into the middle of the local variables since the packed\n+   stack layout generally does not need all the bytes in the register\n+   save area.  */\n+#define FRAME_ADDR_RTX(FRAME)\t\t\t\\\n+  DYNAMIC_CHAIN_ADDRESS ((FRAME))\n+\n #define RETURN_ADDR_RTX(COUNT, FRAME)\t\t\t\t\t      \\\n   s390_return_addr_rtx ((COUNT), DYNAMIC_CHAIN_ADDRESS ((FRAME)))\n "}, {"sha": "7d93db1fe5bfb155059c4447f5ba3ed5c997d211", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78791a80a8bfde263eb3cb2c786efa5b6f973142/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78791a80a8bfde263eb3cb2c786efa5b6f973142/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=78791a80a8bfde263eb3cb2c786efa5b6f973142", "patch": "@@ -1,3 +1,10 @@\n+2008-11-12  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* gcc.target/s390/frame-addr1.c: New testcase.\n+\t* gcc.target/s390/frame-addr2.c: New testcase.\n+\t* gcc.target/s390/return-addr1.c: New testcase.\n+\t* gcc.target/s390/return-addr2.c: New testcase.\n+\n 2008-11-12  Jack Howarth  <howarth@bromo.med.uc.edu>\n \n \tPR testsuite/38008"}, {"sha": "fda419ff089286035acd33793c4cf9badb34e119", "filename": "gcc/testsuite/gcc.target/s390/frame-addr1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78791a80a8bfde263eb3cb2c786efa5b6f973142/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fframe-addr1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78791a80a8bfde263eb3cb2c786efa5b6f973142/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fframe-addr1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fframe-addr1.c?ref=78791a80a8bfde263eb3cb2c786efa5b6f973142", "patch": "@@ -0,0 +1,53 @@\n+/* builtin_frame_address(n) with n>0 has always been troublesome ...\n+   especially when the S/390 packed stack layout comes into play.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -fno-optimize-sibling-calls -mbackchain -mpacked-stack -msoft-float\" } */\n+\n+#ifdef __s390x__\n+/* 64bit: 3 words to be saved: backchain, r14 and r15  */\n+#define SAVE_AREA_SIZE 3*8\n+#else\n+/* 32bit: 4 words to be saved: backchain, r13, r14 and r15  */\n+#define SAVE_AREA_SIZE 4*4\n+#endif\n+extern void abort(void);\n+\n+#define EXPAND_CHECK(n)\t\t\t\t\t\t\\\n+  void __attribute__((noinline))\t\t\t\t\\\n+    foo1_##n (void *p)\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    if (p - __builtin_frame_address (n) != SAVE_AREA_SIZE)\t\\\n+      abort ();\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+  void __attribute__((noinline))\t\t\t\t\\\n+    foo2_##n (void *p)\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    if (p - __builtin_frame_address (n) != SAVE_AREA_SIZE)\t\\\n+      abort ();\t\t\t\t\t\t\t\\\n+    foo1_##n (__builtin_frame_address (n));\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+  void __attribute__((noinline))\t\t\t\t\\\n+    foo3_##n ()\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    foo2_##n (__builtin_frame_address (n));\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+  void __attribute__((noinline))\t\t\t\t\\\n+    foo4_##n ()\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    foo3_##n ();\t\t\t\t\t\t\\\n+  }\n+\n+EXPAND_CHECK (0)\n+EXPAND_CHECK (1)\n+EXPAND_CHECK (2)\n+\n+int\n+main ()\n+{\n+  foo4_0 ();\n+  foo4_1 ();\n+  foo4_2 ();\n+\n+  return 0;\n+}"}, {"sha": "f6f9687a0ad5039c82ff48c4edcac116f8d175c0", "filename": "gcc/testsuite/gcc.target/s390/frame-addr2.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78791a80a8bfde263eb3cb2c786efa5b6f973142/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fframe-addr2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78791a80a8bfde263eb3cb2c786efa5b6f973142/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fframe-addr2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fframe-addr2.c?ref=78791a80a8bfde263eb3cb2c786efa5b6f973142", "patch": "@@ -0,0 +1,50 @@\n+/* builtin_frame_address(n) with n>0 has always been troublesome.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -fno-optimize-sibling-calls -mbackchain\" } */\n+\n+#ifdef __s390x__\n+#define SAVE_AREA_SIZE 160\n+#else\n+#define SAVE_AREA_SIZE 96\n+#endif\n+extern void abort(void);\n+\n+#define EXPAND_CHECK(n)\t\t\t\t\t\t\\\n+  void __attribute__((noinline))\t\t\t\t\\\n+    foo1_##n (void *p)\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    if (p - __builtin_frame_address (n) != SAVE_AREA_SIZE)\t\\\n+      abort ();\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+  void __attribute__((noinline))\t\t\t\t\\\n+    foo2_##n (void *p)\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    if (p - __builtin_frame_address (n) != SAVE_AREA_SIZE)\t\\\n+      abort ();\t\t\t\t\t\t\t\\\n+    foo1_##n (__builtin_frame_address (n));\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+  void __attribute__((noinline))\t\t\t\t\\\n+    foo3_##n ()\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    foo2_##n (__builtin_frame_address (n));\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+  void __attribute__((noinline))\t\t\t\t\\\n+    foo4_##n ()\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    foo3_##n ();\t\t\t\t\t\t\\\n+  }\n+\n+EXPAND_CHECK (0)\n+EXPAND_CHECK (1)\n+EXPAND_CHECK (2)\n+\n+int\n+main ()\n+{\n+  foo4_0 ();\n+  foo4_1 ();\n+  foo4_2 ();\n+\n+  return 0;\n+}"}, {"sha": "8872b89b72596b893d63e7b0499629c82a1aa4c6", "filename": "gcc/testsuite/gcc.target/s390/return-addr1.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78791a80a8bfde263eb3cb2c786efa5b6f973142/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Freturn-addr1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78791a80a8bfde263eb3cb2c786efa5b6f973142/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Freturn-addr1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Freturn-addr1.c?ref=78791a80a8bfde263eb3cb2c786efa5b6f973142", "patch": "@@ -0,0 +1,46 @@\n+/* builtin_return_address(n) with n>0 has always been troublesome ...\n+   especially when the S/390 packed stack layout comes into play.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -fno-optimize-sibling-calls -mbackchain -mpacked-stack -msoft-float\" } */\n+\n+void *addr1;\n+\n+extern void abort (void);\n+\n+void * __attribute__((noinline))\n+foo1 ()\n+{\n+  addr1 = __builtin_return_address (2);\n+}\n+\n+void * __attribute__((noinline))\n+foo2 ()\n+{\n+  foo1 ();\n+}\n+\n+void * __attribute__((noinline))\n+foo3 ()\n+{\n+  foo2 ();\n+}\n+\n+void __attribute__((noinline))\n+bar ()\n+{\n+  void *addr2;\n+\n+  foo3 ();\n+  asm volatile (\"basr  %0,0\\n\\t\" : \"=d\" (addr2));\n+  /* basr is two bytes in length.  */\n+  if (addr2 - addr1 != 2)\n+    abort ();\n+}\n+\n+int\n+main ()\n+{\n+  bar();\n+  return 0;\n+}"}, {"sha": "c94d052840b1a135e109de86c9bb5ab60fcb62bb", "filename": "gcc/testsuite/gcc.target/s390/return-addr2.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78791a80a8bfde263eb3cb2c786efa5b6f973142/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Freturn-addr2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78791a80a8bfde263eb3cb2c786efa5b6f973142/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Freturn-addr2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Freturn-addr2.c?ref=78791a80a8bfde263eb3cb2c786efa5b6f973142", "patch": "@@ -0,0 +1,45 @@\n+/* builtin_return_address(n) with n>0 has always been troublesome.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -fno-optimize-sibling-calls -mbackchain\" } */\n+\n+void *addr1;\n+\n+extern void abort (void);\n+\n+void * __attribute__((noinline))\n+foo1 ()\n+{\n+  addr1 = __builtin_return_address (2);\n+}\n+\n+void * __attribute__((noinline))\n+foo2 ()\n+{\n+  foo1 ();\n+}\n+\n+void * __attribute__((noinline))\n+foo3 ()\n+{\n+  foo2 ();\n+}\n+\n+void __attribute__((noinline))\n+bar ()\n+{\n+  void *addr2;\n+\n+  foo3 ();\n+  asm volatile (\"basr  %0,0\\n\\t\" : \"=d\" (addr2));\n+  /* basr is two bytes in length.  */\n+  if (addr2 - addr1 != 2)\n+    abort ();\n+}\n+\n+int\n+main ()\n+{\n+  bar();\n+  return 0;\n+}"}]}