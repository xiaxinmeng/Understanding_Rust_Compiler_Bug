{"sha": "1a2e970832f6076e76adc06b42c106bdb568a86c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWEyZTk3MDgzMmY2MDc2ZTc2YWRjMDZiNDJjMTA2YmRiNTY4YTg2Yw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-11-28T21:24:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-11-28T21:24:32Z"}, "message": "re PR sanitizer/81275 (-fsanitize=thread produce incorrect -Wreturn-type warning)\n\n\tPR sanitizer/81275\n\t* cp-tree.h (SWITCH_STMT_ALL_CASES_P): Define.\n\t(SWITCH_STMT_NO_BREAK_P): Define.\n\t(note_break_stmt, note_iteration_stmt_body_start,\n\tnote_iteration_stmt_body_end): Declare.\n\t* decl.c (struct cp_switch): Add has_default_p, break_stmt_seen_p\n\tand in_loop_body_p fields. \n\t(push_switch): Clear them.\n\t(pop_switch): Set SWITCH_STMT_CANNOT_FALLTHRU_P if has_default_p\n\tand !break_stmt_seen_p.  Assert in_loop_body_p is false.\n\t(note_break_stmt, note_iteration_stmt_body_start,\n\tnote_iteration_stmt_body_end): New functions.\n\t(finish_case_label): Set has_default_p when both low and high\n\tare NULL_TREE.\n\t* parser.c (cp_parser_iteration_statement): Use\n\tnote_iteration_stmt_body_start and note_iteration_stmt_body_end\n\taround parsing iteration body.\n\t* pt.c (tsubst_expr): Likewise.\n\t* cp-objcp-common.c (cxx_block_may_fallthru): Return false for\n\tSWITCH_STMT which contains no BREAK_STMTs, contains a default:\n\tCASE_LABEL_EXPR and where SWITCH_STMT_BODY isn't empty and\n\tcan't fallthru.\n\t* semantics.c (finish_break_stmt): Call note_break_stmt.\n\t* cp-gimplify.c (genericize_switch_stmt): Copy SWITCH_STMT_ALL_CASES_P\n\tbit to SWITCH_ALL_CASES_P.  Assert that if SWITCH_STMT_NO_BREAK_P then\n\tthe break label is not TREE_USED.\n\n\t* g++.dg/warn/pr81275-1.C: New test.\n\t* g++.dg/warn/pr81275-2.C: New test.\n\t* g++.dg/warn/pr81275-3.C: New test.\n\t* c-c++-common/tsan/pr81275.c: Skip for C++ and -O2.\n\nFrom-SVN: r255218", "tree": {"sha": "dc1f654cba4d0bcd4a20572243e7a1178be93750", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc1f654cba4d0bcd4a20572243e7a1178be93750"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a2e970832f6076e76adc06b42c106bdb568a86c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a2e970832f6076e76adc06b42c106bdb568a86c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a2e970832f6076e76adc06b42c106bdb568a86c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a2e970832f6076e76adc06b42c106bdb568a86c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "058f0b9e5f073da9d1d98a91e482cbdead1561ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/058f0b9e5f073da9d1d98a91e482cbdead1561ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/058f0b9e5f073da9d1d98a91e482cbdead1561ee"}], "stats": {"total": 644, "additions": 641, "deletions": 3}, "files": [{"sha": "2cb90b82bfc7d1f1e37a2b791f842fb558c7cf70", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2e970832f6076e76adc06b42c106bdb568a86c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2e970832f6076e76adc06b42c106bdb568a86c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1a2e970832f6076e76adc06b42c106bdb568a86c", "patch": "@@ -1,3 +1,32 @@\n+2017-11-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/81275\n+\t* cp-tree.h (SWITCH_STMT_ALL_CASES_P): Define.\n+\t(SWITCH_STMT_NO_BREAK_P): Define.\n+\t(note_break_stmt, note_iteration_stmt_body_start,\n+\tnote_iteration_stmt_body_end): Declare.\n+\t* decl.c (struct cp_switch): Add has_default_p, break_stmt_seen_p\n+\tand in_loop_body_p fields. \n+\t(push_switch): Clear them.\n+\t(pop_switch): Set SWITCH_STMT_CANNOT_FALLTHRU_P if has_default_p\n+\tand !break_stmt_seen_p.  Assert in_loop_body_p is false.\n+\t(note_break_stmt, note_iteration_stmt_body_start,\n+\tnote_iteration_stmt_body_end): New functions.\n+\t(finish_case_label): Set has_default_p when both low and high\n+\tare NULL_TREE.\n+\t* parser.c (cp_parser_iteration_statement): Use\n+\tnote_iteration_stmt_body_start and note_iteration_stmt_body_end\n+\taround parsing iteration body.\n+\t* pt.c (tsubst_expr): Likewise.\n+\t* cp-objcp-common.c (cxx_block_may_fallthru): Return false for\n+\tSWITCH_STMT which contains no BREAK_STMTs, contains a default:\n+\tCASE_LABEL_EXPR and where SWITCH_STMT_BODY isn't empty and\n+\tcan't fallthru.\n+\t* semantics.c (finish_break_stmt): Call note_break_stmt.\n+\t* cp-gimplify.c (genericize_switch_stmt): Copy SWITCH_STMT_ALL_CASES_P\n+\tbit to SWITCH_ALL_CASES_P.  Assert that if SWITCH_STMT_NO_BREAK_P then\n+\tthe break label is not TREE_USED.\n+\n 2017-11-28  Julia Koval  <julia.koval@intel.com>\n             Sebastian Peryt  <sebastian.peryt@intel.com>\n "}, {"sha": "3187a64a7254b3fde77c3eff16d490c3c3289dd4", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2e970832f6076e76adc06b42c106bdb568a86c/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2e970832f6076e76adc06b42c106bdb568a86c/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=1a2e970832f6076e76adc06b42c106bdb568a86c", "patch": "@@ -331,6 +331,9 @@ genericize_switch_stmt (tree *stmt_p, int *walk_subtrees, void *data)\n   *walk_subtrees = 0;\n \n   *stmt_p = build2_loc (stmt_locus, SWITCH_EXPR, type, cond, body);\n+  SWITCH_ALL_CASES_P (*stmt_p) = SWITCH_STMT_ALL_CASES_P (stmt);\n+  gcc_checking_assert (!SWITCH_STMT_NO_BREAK_P (stmt)\n+\t\t       || !TREE_USED (break_block));\n   finish_bc_block (stmt_p, bc_break, break_block);\n }\n "}, {"sha": "dc558eed1a50766bdef506f9f6e03efd1125afe8", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2e970832f6076e76adc06b42c106bdb568a86c/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2e970832f6076e76adc06b42c106bdb568a86c/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=1a2e970832f6076e76adc06b42c106bdb568a86c", "patch": "@@ -349,6 +349,11 @@ cxx_block_may_fallthru (const_tree stmt)\n     case THROW_EXPR:\n       return false;\n \n+    case SWITCH_STMT:\n+      return (!SWITCH_STMT_ALL_CASES_P (stmt)\n+\t      || !SWITCH_STMT_NO_BREAK_P (stmt)\n+\t      || block_may_fallthru (SWITCH_STMT_BODY (stmt)));\n+\n     default:\n       return true;\n     }"}, {"sha": "4780df4dbf63d9f7d53e052c01af0d4d93a81762", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2e970832f6076e76adc06b42c106bdb568a86c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2e970832f6076e76adc06b42c106bdb568a86c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=1a2e970832f6076e76adc06b42c106bdb568a86c", "patch": "@@ -364,6 +364,7 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n       IF_STMT_CONSTEXPR_P (IF_STMT)\n       TEMPLATE_TYPE_PARM_FOR_CLASS (TEMPLATE_TYPE_PARM)\n       DECL_NAMESPACE_INLINE_P (in NAMESPACE_DECL)\n+      SWITCH_STMT_ALL_CASES_P (in SWITCH_STMT)\n    1: IDENTIFIER_KIND_BIT_1 (in IDENTIFIER_NODE)\n       TI_PENDING_TEMPLATE_FLAG.\n       TEMPLATE_PARMS_FOR_INLINE.\n@@ -395,6 +396,7 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n       AGGR_INIT_ZERO_FIRST (in AGGR_INIT_EXPR)\n       CONSTRUCTOR_MUTABLE_POISON (in CONSTRUCTOR)\n       OVL_HIDDEN_P (in OVERLOAD)\n+      SWITCH_STMT_NO_BREAK_P (in SWITCH_STMT)\n    3: (TREE_REFERENCE_EXPR) (in NON_LVALUE_EXPR) (commented-out).\n       ICS_BAD_FLAG (in _CONV)\n       FN_TRY_BLOCK_P (in TRY_BLOCK)\n@@ -4840,6 +4842,14 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define SWITCH_STMT_BODY(NODE)\tTREE_OPERAND (SWITCH_STMT_CHECK (NODE), 1)\n #define SWITCH_STMT_TYPE(NODE)\tTREE_OPERAND (SWITCH_STMT_CHECK (NODE), 2)\n #define SWITCH_STMT_SCOPE(NODE)\tTREE_OPERAND (SWITCH_STMT_CHECK (NODE), 3)\n+/* True if there are case labels for all possible values of switch cond, either\n+   because there is a default: case label or because the case label ranges cover\n+   all values.  */\n+#define SWITCH_STMT_ALL_CASES_P(NODE) \\\n+  TREE_LANG_FLAG_0 (SWITCH_STMT_CHECK (NODE))\n+/* True if the body of a switch stmt contains no BREAK_STMTs.  */\n+#define SWITCH_STMT_NO_BREAK_P(NODE) \\\n+  TREE_LANG_FLAG_2 (SWITCH_STMT_CHECK (NODE))\n \n /* STMT_EXPR accessor.  */\n #define STMT_EXPR_STMT(NODE)\tTREE_OPERAND (STMT_EXPR_CHECK (NODE), 0)\n@@ -6102,6 +6112,9 @@ enum cp_tree_node_structure_enum cp_tree_node_structure\n extern void finish_scope\t\t\t(void);\n extern void push_switch\t\t\t\t(tree);\n extern void pop_switch\t\t\t\t(void);\n+extern void note_break_stmt\t\t\t(void);\n+extern bool note_iteration_stmt_body_start\t(void);\n+extern void note_iteration_stmt_body_end\t(bool);\n extern tree make_lambda_name\t\t\t(void);\n extern int decls_match\t\t\t\t(tree, tree);\n extern bool maybe_version_functions\t\t(tree, tree);"}, {"sha": "7085d5a3976a36ff5e6161f53e347fea3f2f901a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2e970832f6076e76adc06b42c106bdb568a86c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2e970832f6076e76adc06b42c106bdb568a86c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=1a2e970832f6076e76adc06b42c106bdb568a86c", "patch": "@@ -3426,6 +3426,13 @@ struct cp_switch\n   /* Remember whether there was a case value that is outside the\n      range of the original type of the controlling expression.  */\n   bool outside_range_p;\n+  /* Remember whether a default: case label has been seen.  */\n+  bool has_default_p;\n+  /* Remember whether a BREAK_STMT has been seen in this SWITCH_STMT.  */\n+  bool break_stmt_seen_p;\n+  /* Set if inside of {FOR,DO,WHILE}_BODY nested inside of a switch,\n+     where BREAK_STMT doesn't belong to the SWITCH_STMT.  */\n+  bool in_loop_body_p;\n };\n \n /* A stack of the currently active switch statements.  The innermost\n@@ -3448,6 +3455,9 @@ push_switch (tree switch_stmt)\n   p->switch_stmt = switch_stmt;\n   p->cases = splay_tree_new (case_compare, NULL, NULL);\n   p->outside_range_p = false;\n+  p->has_default_p = false;\n+  p->break_stmt_seen_p = false;\n+  p->in_loop_body_p = false;\n   switch_stack = p;\n }\n \n@@ -3468,11 +3478,55 @@ pop_switch (void)\n \t\t\t  SWITCH_STMT_COND (cs->switch_stmt),\n \t\t\t  bool_cond_p, cs->outside_range_p);\n \n+  /* For the benefit of block_may_fallthru remember if the switch body\n+     case labels cover all possible values and if there are break; stmts.  */\n+  if (cs->has_default_p\n+      || (!processing_template_decl\n+\t  && c_switch_covers_all_cases_p (cs->cases,\n+\t\t\t\t\t  SWITCH_STMT_TYPE (cs->switch_stmt))))\n+    SWITCH_STMT_ALL_CASES_P (cs->switch_stmt) = 1;\n+  if (!cs->break_stmt_seen_p)\n+    SWITCH_STMT_NO_BREAK_P (cs->switch_stmt) = 1;\n+  gcc_assert (!cs->in_loop_body_p);\n   splay_tree_delete (cs->cases);\n   switch_stack = switch_stack->next;\n   free (cs);\n }\n \n+/* Note that a BREAK_STMT is about to be added.  If it is inside of\n+   a SWITCH_STMT and not inside of a loop body inside of it, note\n+   in switch_stack we've seen a BREAK_STMT.  */\n+\n+void\n+note_break_stmt (void)\n+{\n+  if (switch_stack && !switch_stack->in_loop_body_p)\n+    switch_stack->break_stmt_seen_p = true;\n+}\n+\n+/* Note the start of processing of an iteration statement's body.\n+   The note_break_stmt function will do nothing while processing it.\n+   Return a flag that should be passed to note_iteration_stmt_body_end.  */\n+\n+bool\n+note_iteration_stmt_body_start (void)\n+{\n+  if (!switch_stack)\n+    return false;\n+  bool ret = switch_stack->in_loop_body_p;\n+  switch_stack->in_loop_body_p = true;\n+  return ret;\n+}\n+\n+/* Note the end of processing of an iteration statement's body.  */\n+\n+void\n+note_iteration_stmt_body_end (bool prev)\n+{\n+  if (switch_stack)\n+    switch_stack->in_loop_body_p = prev;\n+}\n+\n /* Convert a case constant VALUE in a switch to the type TYPE of the switch\n    condition.  Note that if TYPE and VALUE are already integral we don't\n    really do the conversion because the language-independent\n@@ -3507,6 +3561,9 @@ finish_case_label (location_t loc, tree low_value, tree high_value)\n   cp_binding_level *p;\n   tree type;\n \n+  if (low_value == NULL_TREE && high_value == NULL_TREE)\n+    switch_stack->has_default_p = true;\n+\n   if (processing_template_decl)\n     {\n       tree label;"}, {"sha": "43fc1be299fdae46b6e36fb3730d5aaa3d704bbf", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2e970832f6076e76adc06b42c106bdb568a86c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2e970832f6076e76adc06b42c106bdb568a86c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=1a2e970832f6076e76adc06b42c106bdb568a86c", "patch": "@@ -12043,7 +12043,9 @@ cp_parser_iteration_statement (cp_parser* parser, bool *if_p, bool ivdep)\n \tparens.require_close (parser);\n \t/* Parse the dependent statement.  */\n \tparser->in_statement = IN_ITERATION_STMT;\n+\tbool prev = note_iteration_stmt_body_start ();\n \tcp_parser_already_scoped_statement (parser, if_p, guard_tinfo);\n+\tnote_iteration_stmt_body_end (prev);\n \tparser->in_statement = in_statement;\n \t/* We're done with the while-statement.  */\n \tfinish_while_stmt (statement);\n@@ -12058,7 +12060,9 @@ cp_parser_iteration_statement (cp_parser* parser, bool *if_p, bool ivdep)\n \tstatement = begin_do_stmt ();\n \t/* Parse the body of the do-statement.  */\n \tparser->in_statement = IN_ITERATION_STMT;\n+\tbool prev = note_iteration_stmt_body_start ();\n \tcp_parser_implicitly_scoped_statement (parser, NULL, guard_tinfo);\n+\tnote_iteration_stmt_body_end (prev);\n \tparser->in_statement = in_statement;\n \tfinish_do_body (statement);\n \t/* Look for the `while' keyword.  */\n@@ -12090,7 +12094,9 @@ cp_parser_iteration_statement (cp_parser* parser, bool *if_p, bool ivdep)\n \n \t/* Parse the body of the for-statement.  */\n \tparser->in_statement = IN_ITERATION_STMT;\n+\tbool prev = note_iteration_stmt_body_start ();\n \tcp_parser_already_scoped_statement (parser, if_p, guard_tinfo);\n+\tnote_iteration_stmt_body_end (prev);\n \tparser->in_statement = in_statement;\n \n \t/* We're done with the for-statement.  */"}, {"sha": "7e2f7740106da15fa07a4469c6504e1e2928c9ea", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2e970832f6076e76adc06b42c106bdb568a86c/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2e970832f6076e76adc06b42c106bdb568a86c/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1a2e970832f6076e76adc06b42c106bdb568a86c", "patch": "@@ -16124,7 +16124,11 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n       finish_for_cond (tmp, stmt, false);\n       tmp = RECUR (FOR_EXPR (t));\n       finish_for_expr (tmp, stmt);\n-      RECUR (FOR_BODY (t));\n+      {\n+\tbool prev = note_iteration_stmt_body_start ();\n+\tRECUR (FOR_BODY (t));\n+\tnote_iteration_stmt_body_end (prev);\n+      }\n       finish_for_stmt (stmt);\n       break;\n \n@@ -16148,7 +16152,9 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \telse\n \t  stmt = cp_convert_range_for (stmt, decl, expr, NULL_TREE, 0,\n \t\t\t\t       RANGE_FOR_IVDEP (t));\n+\tbool prev = note_iteration_stmt_body_start ();\n         RECUR (RANGE_FOR_BODY (t));\n+\tnote_iteration_stmt_body_end (prev);\n         finish_for_stmt (stmt);\n       }\n       break;\n@@ -16157,13 +16163,21 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n       stmt = begin_while_stmt ();\n       tmp = RECUR (WHILE_COND (t));\n       finish_while_stmt_cond (tmp, stmt, false);\n-      RECUR (WHILE_BODY (t));\n+      {\n+\tbool prev = note_iteration_stmt_body_start ();\n+\tRECUR (WHILE_BODY (t));\n+\tnote_iteration_stmt_body_end (prev);\n+      }\n       finish_while_stmt (stmt);\n       break;\n \n     case DO_STMT:\n       stmt = begin_do_stmt ();\n-      RECUR (DO_BODY (t));\n+      {\n+\tbool prev = note_iteration_stmt_body_start ();\n+\tRECUR (DO_BODY (t));\n+\tnote_iteration_stmt_body_end (prev);\n+      }\n       finish_do_body (stmt);\n       tmp = RECUR (DO_COND (t));\n       finish_do_stmt (tmp, stmt, false);"}, {"sha": "e2daab4339ea1d29a438608a46857866426ce1cf", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2e970832f6076e76adc06b42c106bdb568a86c/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2e970832f6076e76adc06b42c106bdb568a86c/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=1a2e970832f6076e76adc06b42c106bdb568a86c", "patch": "@@ -1102,6 +1102,7 @@ finish_break_stmt (void)\n      understand.  */\n   if (!block_may_fallthru (cur_stmt_list))\n     return void_node;\n+  note_break_stmt ();\n   return add_stmt (build_stmt (input_location, BREAK_STMT));\n }\n "}, {"sha": "c2488b6412deae3155e22fc7659a4466c8a40dd3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2e970832f6076e76adc06b42c106bdb568a86c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2e970832f6076e76adc06b42c106bdb568a86c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1a2e970832f6076e76adc06b42c106bdb568a86c", "patch": "@@ -1,5 +1,11 @@\n 2017-11-28  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR sanitizer/81275\n+\t* g++.dg/warn/pr81275-1.C: New test.\n+\t* g++.dg/warn/pr81275-2.C: New test.\n+\t* g++.dg/warn/pr81275-3.C: New test.\n+\t* c-c++-common/tsan/pr81275.c: Skip for C++ and -O2.\n+\n \tPR sanitizer/81275\n \t* c-c++-common/tsan/pr81275.c: New test.\n "}, {"sha": "14158506406d3c61677e14391c237d660a090c45", "filename": "gcc/testsuite/c-c++-common/tsan/pr81275.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2e970832f6076e76adc06b42c106bdb568a86c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fpr81275.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2e970832f6076e76adc06b42c106bdb568a86c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fpr81275.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fpr81275.c?ref=1a2e970832f6076e76adc06b42c106bdb568a86c", "patch": "@@ -1,6 +1,7 @@\n /* PR sanitizer/81275 */\n /* { dg-do compile } */\n /* { dg-options \"-Wreturn-type -fsanitize=thread\" } */\n+/* { dg-skip-if \"\" { c++ } { \"*\" } { \"-O0\" } } */\n \n int\n f1 (int a, int b)"}, {"sha": "339b58c4d29335acbfbcc9cff2435b533ada392f", "filename": "gcc/testsuite/g++.dg/warn/pr81275-1.C", "status": "added", "additions": 165, "deletions": 0, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2e970832f6076e76adc06b42c106bdb568a86c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr81275-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2e970832f6076e76adc06b42c106bdb568a86c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr81275-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr81275-1.C?ref=1a2e970832f6076e76adc06b42c106bdb568a86c", "patch": "@@ -0,0 +1,165 @@\n+// PR sanitizer/81875\n+// { dg-do compile }\n+// { dg-options \"-Wreturn-type\" }\n+\n+struct C { C (); ~C (); };\n+\n+int\n+f1 (int a, int b)\n+{\n+  C f;\n+  switch (a)\n+    {\n+    case 0:\n+      switch (b)\n+        {\n+\tcase 13:\n+\t  return 7;\n+\tcase 24:\n+\t  return 19;\n+\tdefault:\n+\t  return 0;\n+\t}\n+      break;\n+    default:\n+      return 0;\n+    case 9:\n+      return 17;\n+    }\n+}\t// { dg-bogus \"control reaches end of non-void function\" }\n+\n+int\n+f2 (int a, int b, int c, int d)\n+{\n+  C f;\n+  switch (a)\n+    {\n+    case 0:\n+      switch (b)\n+        {\n+\tcase 13:\n+\t  while (c >= 10)\n+\t    {\n+\t      if (c == d)\n+\t\tbreak;\n+\t      c--;\n+\t    }\n+\t  return 7;\n+\tcase 29:\n+\t  switch (d)\n+\t    {\n+\t    case 35:\n+\t      break;\n+\t    default:\n+\t      return 9;\n+\t    }\n+\t  return 8;\n+\tcase 24:\n+\t  do\n+\t    {\n+\t      if (c == d)\n+\t\tbreak;\n+\t      c--;\n+\t    }\n+\t  while (c >= 10);\n+\t  return 19;\n+\tdefault:\n+\t  for (int e = 0; e < c; ++e)\n+\t    if (e == d)\n+\t      break;\n+\t  return 0;\n+\t}\n+      break;\n+    default:\n+      return 0;\n+    case 9:\n+      return 17;\n+    }\n+}\t// { dg-bogus \"control reaches end of non-void function\" }\n+\n+template <int N>\n+int\n+f3 (int a, int b)\n+{\n+  C f;\n+  switch (a)\n+    {\n+    case 0:\n+      switch (b)\n+        {\n+\tcase 13:\n+\t  return 7;\n+\tcase 24:\n+\t  return 19;\n+\tdefault:\n+\t  return 0;\n+\t}\n+      break;\n+    default:\n+      return 0;\n+    case 9:\n+      return 17;\n+    }\n+}\t// { dg-bogus \"control reaches end of non-void function\" }\n+\n+template <int N>\n+int\n+f4 (int a, int b, int c, int d)\n+{\n+  C f;\n+  switch (a)\n+    {\n+    case 0:\n+      switch (b)\n+        {\n+\tcase 13:\n+\t  while (c >= 10)\n+\t    {\n+\t      if (c == d)\n+\t\tbreak;\n+\t      c--;\n+\t    }\n+\t  return 7;\n+\tcase 29:\n+\t  switch (d)\n+\t    {\n+\t    case 35:\n+\t      break;\n+\t    default:\n+\t      return 9;\n+\t    }\n+\t  return 8;\n+\tcase 24:\n+\t  do\n+\t    {\n+\t      if (c == d)\n+\t\tbreak;\n+\t      c--;\n+\t    }\n+\t  while (c >= 10);\n+\t  return 19;\n+\tdefault:\n+\t  for (int e = 0; e < c; ++e)\n+\t    if (e == d)\n+\t      break;\n+\t  return 0;\n+\t}\n+      break;\n+    default:\n+      return 0;\n+    case 9:\n+      return 17;\n+    }\n+}\t// { dg-bogus \"control reaches end of non-void function\" }\n+\n+int\n+f5 (int a, int b)\n+{\n+  return f3 <0> (a, b);\n+}\n+\n+int\n+f6 (int a, int b, int c, int d)\n+{\n+  return f4 <2> (a, b, c, d);\n+}"}, {"sha": "fcfe262461bddb426993b27acf87ee561f087b64", "filename": "gcc/testsuite/g++.dg/warn/pr81275-2.C", "status": "added", "additions": 165, "deletions": 0, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2e970832f6076e76adc06b42c106bdb568a86c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr81275-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2e970832f6076e76adc06b42c106bdb568a86c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr81275-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr81275-2.C?ref=1a2e970832f6076e76adc06b42c106bdb568a86c", "patch": "@@ -0,0 +1,165 @@\n+// PR sanitizer/81875\n+// { dg-do compile }\n+// { dg-options \"-Wreturn-type\" }\n+\n+struct C { C (); ~C (); };\n+\n+int\n+f1 (int a, int b)\n+{\n+  C f;\n+  switch (a)\n+    {\n+    case 0:\n+      switch (b)\n+        {\n+\tcase 13:\n+\t  return 7;\n+\tcase 24:\n+\t  return 19;\n+\tcase 25:\n+\t  return 0;\n+\t}\n+      break;\n+    default:\n+      return 0;\n+    case 9:\n+      return 17;\n+    }\n+}\t// { dg-warning \"control reaches end of non-void function\" }\n+\n+int\n+f2 (int a, int b, int c, int d)\n+{\n+  C f;\n+  switch (a)\n+    {\n+    case 0:\n+      switch (b)\n+        {\n+\tcase 13:\n+\t  while (c >= 10)\n+\t    {\n+\t      if (c == d)\n+\t\tbreak;\n+\t      c--;\n+\t    }\n+\t  return 7;\n+\tcase 29:\n+\t  switch (d)\n+\t    {\n+\t    case 35:\n+\t      break;\n+\t    default:\n+\t      return 9;\n+\t    }\n+\t  return 8;\n+\tcase 24:\n+\t  do\n+\t    {\n+\t      if (c == d)\n+\t\tbreak;\n+\t      c--;\n+\t    }\n+\t  while (c >= 10);\n+\t  return 19;\n+\tcase 25:\n+\t  for (int e = 0; e < c; ++e)\n+\t    if (e == d)\n+\t      break;\n+\t  return 0;\n+\t}\n+      break;\n+    default:\n+      return 0;\n+    case 9:\n+      return 17;\n+    }\n+}\t// { dg-warning \"control reaches end of non-void function\" }\n+\n+template <int N>\n+int\n+f3 (int a, int b)\n+{\n+  C f;\n+  switch (a)\n+    {\n+    case 0:\n+      switch (b)\n+        {\n+\tcase 13:\n+\t  return 7;\n+\tcase 24:\n+\t  return 19;\n+\tcase 25:\n+\t  return 0;\n+\t}\n+      break;\n+    default:\n+      return 0;\n+    case 9:\n+      return 17;\n+    }\n+}\t// { dg-warning \"control reaches end of non-void function\" }\n+\n+template <int N>\n+int\n+f4 (int a, int b, int c, int d)\n+{\n+  C f;\n+  switch (a)\n+    {\n+    case 0:\n+      switch (b)\n+        {\n+\tcase 13:\n+\t  while (c >= 10)\n+\t    {\n+\t      if (c == d)\n+\t\tbreak;\n+\t      c--;\n+\t    }\n+\t  return 7;\n+\tcase 29:\n+\t  switch (d)\n+\t    {\n+\t    case 35:\n+\t      break;\n+\t    default:\n+\t      return 9;\n+\t    }\n+\t  return 8;\n+\tcase 24:\n+\t  do\n+\t    {\n+\t      if (c == d)\n+\t\tbreak;\n+\t      c--;\n+\t    }\n+\t  while (c >= 10);\n+\t  return 19;\n+\tcase 25:\n+\t  for (int e = 0; e < c; ++e)\n+\t    if (e == d)\n+\t      break;\n+\t  return 0;\n+\t}\n+      break;\n+    default:\n+      return 0;\n+    case 9:\n+      return 17;\n+    }\n+}\t// { dg-warning \"control reaches end of non-void function\" }\n+\n+int\n+f5 (int a, int b)\n+{\n+  return f3 <0> (a, b);\n+}\n+\n+int\n+f6 (int a, int b, int c, int d)\n+{\n+  return f4 <2> (a, b, c, d);\n+}"}, {"sha": "12e1320bb93a9a5a5974213cddac122ff985f445", "filename": "gcc/testsuite/g++.dg/warn/pr81275-3.C", "status": "added", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2e970832f6076e76adc06b42c106bdb568a86c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr81275-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2e970832f6076e76adc06b42c106bdb568a86c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr81275-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr81275-3.C?ref=1a2e970832f6076e76adc06b42c106bdb568a86c", "patch": "@@ -0,0 +1,173 @@\n+// PR sanitizer/81875\n+// { dg-do compile }\n+// { dg-options \"-Wreturn-type\" }\n+\n+struct C { C (); ~C (); };\n+\n+int\n+f1 (int a, int b, int c)\n+{\n+  C f;\n+  switch (a)\n+    {\n+    case 0:\n+      switch (b)\n+        {\n+\tcase 13:\n+\t  return 7;\n+\tcase 24:\n+\t  if (c == 5)\n+\t    break;\n+\t  return 19;\n+\tdefault:\n+\t  return 0;\n+\t}\n+      break;\n+    default:\n+      return 0;\n+    case 9:\n+      return 17;\n+    }\n+}\t// { dg-warning \"control reaches end of non-void function\" }\n+\n+int\n+f2 (int a, int b, int c, int d)\n+{\n+  C f;\n+  switch (a)\n+    {\n+    case 0:\n+      switch (b)\n+        {\n+\tcase 13:\n+\t  while (c >= 10)\n+\t    {\n+\t      if (c == d)\n+\t\tbreak;\n+\t      c--;\n+\t    }\n+\t  return 7;\n+\tcase 29:\n+\t  switch (d)\n+\t    {\n+\t    case 35:\n+\t      break;\n+\t    default:\n+\t      return 9;\n+\t    }\n+\t  if (c == d + 20)\n+\t    break;\n+\t  return 8;\n+\tcase 24:\n+\t  do\n+\t    {\n+\t      if (c == d)\n+\t\tbreak;\n+\t      c--;\n+\t    }\n+\t  while (c >= 10);\n+\t  return 19;\n+\tdefault:\n+\t  for (int e = 0; e < c; ++e)\n+\t    if (e == d)\n+\t      break;\n+\t  return 0;\n+\t}\n+      break;\n+    default:\n+      return 0;\n+    case 9:\n+      return 17;\n+    }\n+}\t// { dg-warning \"control reaches end of non-void function\" }\n+\n+template <int N>\n+int\n+f3 (int a, int b, int c)\n+{\n+  C f;\n+  switch (a)\n+    {\n+    case 0:\n+      switch (b)\n+        {\n+\tcase 13:\n+\t  return 7;\n+\tcase 24:\n+\t  if (c == 5)\n+\t    break;\n+\t  return 19;\n+\tdefault:\n+\t  return 0;\n+\t}\n+      break;\n+    default:\n+      return 0;\n+    case 9:\n+      return 17;\n+    }\n+}\t// { dg-warning \"control reaches end of non-void function\" }\n+\n+template <int N>\n+int\n+f4 (int a, int b, int c, int d)\n+{\n+  C f;\n+  switch (a)\n+    {\n+    case 0:\n+      switch (b)\n+        {\n+\tcase 13:\n+\t  while (c >= 10)\n+\t    {\n+\t      if (c == d)\n+\t\tbreak;\n+\t      c--;\n+\t    }\n+\t  return 7;\n+\tcase 29:\n+\t  switch (d)\n+\t    {\n+\t    case 35:\n+\t      break;\n+\t    default:\n+\t      return 9;\n+\t    }\n+\t  if (c == d + 20)\n+\t    break;\n+\t  return 8;\n+\tcase 24:\n+\t  do\n+\t    {\n+\t      if (c == d)\n+\t\tbreak;\n+\t      c--;\n+\t    }\n+\t  while (c >= 10);\n+\t  return 19;\n+\tdefault:\n+\t  for (int e = 0; e < c; ++e)\n+\t    if (e == d)\n+\t      break;\n+\t  return 0;\n+\t}\n+      break;\n+    default:\n+      return 0;\n+    case 9:\n+      return 17;\n+    }\n+}\t// { dg-warning \"control reaches end of non-void function\" }\n+\n+int\n+f5 (int a, int b, int c)\n+{\n+  return f3 <0> (a, b, c);\n+}\n+\n+int\n+f6 (int a, int b, int c, int d)\n+{\n+  return f4 <2> (a, b, c, d);\n+}"}]}