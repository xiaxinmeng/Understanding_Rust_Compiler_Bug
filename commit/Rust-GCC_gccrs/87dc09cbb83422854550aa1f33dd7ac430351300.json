{"sha": "87dc09cbb83422854550aa1f33dd7ac430351300", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdkYzA5Y2JiODM0MjI4NTQ1NTBhYTFmMzNkZDdhYzQzMDM1MTMwMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-23T09:23:47Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-23T09:23:47Z"}, "message": "[multiple changes]\n\n2010-06-23  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch5.adb (Process_Bounds): Remove some junk initializations.\n\t* sem_res.adb: Add comments.\n\t* sem_util.adb: Minor reformatting. Add comments.\n\tChange increment on Actuals_In_Call table.\n\t* opt.ads: Minor: add 'constant'.\n\n2010-06-23  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_disp.adb (Make_DT): Initialize the Size_Func component of the\n\tTSD to Null_Address if No_Dispatching_Calls is active.\n\n2010-06-23  Vincent Celier  <celier@adacore.com>\n\n\t* a-comlin.ads: Indicate that use of this package is not supported\n\tduring the elaboration of an auto-initialized Stand-Alone Library.\n\n2010-06-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_util.adb (Is_Possibly_Misaligned_Object): Do not rely on an\n\talignment clause on a record type to determine if a component may be\n\tmisaligned. The decision must be taken in the back-end where target\n\talignment information is known.\n\n2010-06-23  Arnaud Charlet  <charlet@adacore.com>\n\n\t* gnat1drv.adb (Adjust_Global_Switches): Enable some restrictions\n\tsystematically in CodePeer mode to simplify generated code.\n\t* restrict.adb (Check_Restriction): Do nothing in CodePeer mode.\n\t* exp_ch4.adb (Expand_N_Allocator): Generate proper code when\n\tNo_Task_Hierarchy is set instead of crasshing.\n\nFrom-SVN: r161265", "tree": {"sha": "d7678f3b2127c113aa182e53139cdc15e0bdac2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7678f3b2127c113aa182e53139cdc15e0bdac2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87dc09cbb83422854550aa1f33dd7ac430351300", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87dc09cbb83422854550aa1f33dd7ac430351300", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87dc09cbb83422854550aa1f33dd7ac430351300", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87dc09cbb83422854550aa1f33dd7ac430351300/comments", "author": null, "committer": null, "parents": [{"sha": "9a0ddeee0fbd6daf3d98ef415bdc4535b272aff8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a0ddeee0fbd6daf3d98ef415bdc4535b272aff8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a0ddeee0fbd6daf3d98ef415bdc4535b272aff8"}], "stats": {"total": 137, "additions": 105, "deletions": 32}, "files": [{"sha": "00e199bb02bb7f45e35571b21c3ce7d2e03547f6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87dc09cbb83422854550aa1f33dd7ac430351300/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87dc09cbb83422854550aa1f33dd7ac430351300/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=87dc09cbb83422854550aa1f33dd7ac430351300", "patch": "@@ -1,3 +1,36 @@\n+2010-06-23  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch5.adb (Process_Bounds): Remove some junk initializations.\n+\t* sem_res.adb: Add comments.\n+\t* sem_util.adb: Minor reformatting. Add comments.\n+\tChange increment on Actuals_In_Call table.\n+\t* opt.ads: Minor: add 'constant'.\n+\n+2010-06-23  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_disp.adb (Make_DT): Initialize the Size_Func component of the\n+\tTSD to Null_Address if No_Dispatching_Calls is active.\n+\n+2010-06-23  Vincent Celier  <celier@adacore.com>\n+\n+\t* a-comlin.ads: Indicate that use of this package is not supported\n+\tduring the elaboration of an auto-initialized Stand-Alone Library.\n+\n+2010-06-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_util.adb (Is_Possibly_Misaligned_Object): Do not rely on an\n+\talignment clause on a record type to determine if a component may be\n+\tmisaligned. The decision must be taken in the back-end where target\n+\talignment information is known.\n+\n+2010-06-23  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnat1drv.adb (Adjust_Global_Switches): Enable some restrictions\n+\tsystematically in CodePeer mode to simplify generated code.\n+\t* restrict.adb (Check_Restriction): Do nothing in CodePeer mode.\n+\t* exp_ch4.adb (Expand_N_Allocator): Generate proper code when\n+\tNo_Task_Hierarchy is set instead of crasshing.\n+\n 2010-06-23  Thomas Quinot  <quinot@adacore.com>\n \n \t* sem_util.adb: Minor code cleanup: test for proper entity instead of"}, {"sha": "55d0a500525003b353f17d38885665d6f892e01c", "filename": "gcc/ada/a-comlin.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87dc09cbb83422854550aa1f33dd7ac430351300/gcc%2Fada%2Fa-comlin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87dc09cbb83422854550aa1f33dd7ac430351300/gcc%2Fada%2Fa-comlin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-comlin.ads?ref=87dc09cbb83422854550aa1f33dd7ac430351300", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -73,6 +73,9 @@ package Ada.Command_Line is\n    -- Note on Interface Requirements --\n    ------------------------------------\n \n+   --  Services in this package are not supported during the elaboration of an\n+   --  auto-initialized Stand-Alone Library.\n+\n    --  If the main program is in Ada, this package works as specified without\n    --  any other work than the normal steps of WITH'ing the package and then\n    --  calling the desired routines."}, {"sha": "5cbcc39827491343d0d9b531e1fb2c07facde737", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87dc09cbb83422854550aa1f33dd7ac430351300/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87dc09cbb83422854550aa1f33dd7ac430351300/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=87dc09cbb83422854550aa1f33dd7ac430351300", "patch": "@@ -3689,16 +3689,23 @@ package body Exp_Ch4 is\n                      Decls := Build_Task_Image_Decls (Loc, T, T);\n                   end if;\n \n-                  Append_To (Args,\n-                    New_Reference_To\n-                      (Master_Id (Base_Type (Root_Type (PtrT))), Loc));\n+                  --  What is this constant 3 below, should have a name ???\n+\n+                  if Restriction_Active (No_Task_Hierarchy) then\n+                     Append_To (Args, Make_Integer_Literal (Loc, 3));\n+                  else\n+                     Append_To (Args,\n+                       New_Reference_To\n+                         (Master_Id (Base_Type (Root_Type (PtrT))), Loc));\n+                  end if;\n+\n                   Append_To (Args, Make_Identifier (Loc, Name_uChain));\n \n                   Decl := Last (Decls);\n                   Append_To (Args,\n                     New_Occurrence_Of (Defining_Identifier (Decl), Loc));\n \n-                  --  Has_Task is false, Decls not used\n+               --  Has_Task is false, Decls not used\n \n                else\n                   Decls := No_List;"}, {"sha": "7599a25dc73c50f4b145241ea96aec649873b14d", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87dc09cbb83422854550aa1f33dd7ac430351300/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87dc09cbb83422854550aa1f33dd7ac430351300/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=87dc09cbb83422854550aa1f33dd7ac430351300", "patch": "@@ -4859,9 +4859,14 @@ package body Exp_Disp is\n       --  Size_Func\n \n       if RTE_Record_Component_Available (RE_Size_Func) then\n-         if not Building_Static_DT (Typ)\n-           or else Is_Interface (Typ)\n-         then\n+\n+         --  Initialize this field to Null_Address if we are not building\n+         --  static dispatch tables static or if the size function is not\n+         --  available. In the former case we cannot initialize this field\n+         --  until the function is frozen and registered in the dispatch\n+         --  table (see Register_Primitive).\n+\n+         if not Building_Static_DT (Typ) or else not Has_DT (Typ) then\n             Append_To (TSD_Aggr_List,\n               Unchecked_Convert_To (RTE (RE_Size_Ptr),\n                 New_Reference_To (RTE (RE_Null_Address), Loc)));\n@@ -5871,7 +5876,7 @@ package body Exp_Disp is\n       --  Mark entities containing dispatch tables. Required by the backend to\n       --  handle them properly.\n \n-      if not Is_Interface (Typ) then\n+      if Has_DT (Typ) then\n          declare\n             Elmt : Elmt_Id;\n "}, {"sha": "b9e5d389fcec394071e8241751dcc92481f01ebc", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87dc09cbb83422854550aa1f33dd7ac430351300/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87dc09cbb83422854550aa1f33dd7ac430351300/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=87dc09cbb83422854550aa1f33dd7ac430351300", "patch": "@@ -3142,16 +3142,23 @@ package body Exp_Util is\n                end if;\n             end if;\n \n+            --  The following code is historical, it used to be present but it\n+            --  is too cautious, because the front-end does not know the proper\n+            --  default alignments for the target. Also, if the alignment is\n+            --  not known, the front end can't know in any case! If a copy is\n+            --  needed, the back-end will take care of it. This whole section\n+            --  including this comment can be removed later ???\n+\n             --  If the component reference is for a record that has a specified\n             --  alignment, and we either know it is too small, or cannot tell,\n-            --  then the component may be unaligned\n-\n-            if Known_Alignment (Etype (P))\n-              and then Alignment (Etype (P)) < Ttypes.Maximum_Alignment\n-              and then M > Alignment (Etype (P))\n-            then\n-               return True;\n-            end if;\n+            --  then the component may be unaligned.\n+\n+            --  if Known_Alignment (Etype (P))\n+            --    and then Alignment (Etype (P)) < Ttypes.Maximum_Alignment\n+            --    and then M > Alignment (Etype (P))\n+            --  then\n+            --     return True;\n+            --  end if;\n \n             --  Case of component clause present which may specify an\n             --  unaligned position."}, {"sha": "d3d15ccc3b1531312ea1d634a75d0b0ffa70e582", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87dc09cbb83422854550aa1f33dd7ac430351300/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87dc09cbb83422854550aa1f33dd7ac430351300/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=87dc09cbb83422854550aa1f33dd7ac430351300", "patch": "@@ -50,6 +50,7 @@ with Par_SCO;\n with Prepcomp;\n with Repinfo;  use Repinfo;\n with Restrict;\n+with Rident;   use Rident;\n with Rtsfind;\n with SCOs;\n with Sem;\n@@ -169,12 +170,14 @@ procedure Gnat1drv is\n \n          Optimization_Level := 0;\n \n-         --  Disable specific expansions for Restrictions pragmas to avoid\n-         --  tree inconsistencies between compilations with different pragmas\n-         --  that will cause different SCIL files to be generated for the\n-         --  same Ada spec.\n+         --  Enable some restrictions systematically to simplify the generated\n+         --  code (and ease analysis). Note that restriction checks are also\n+         --  disabled in CodePeer_Mode, see Restrict.Check_Restriction\n \n-         Treat_Restrictions_As_Warnings := True;\n+         Restrict.Restrictions.Set (No_Task_Hierarchy) := True;\n+         Restrict.Restrictions.Set (No_Abort_Statements) := True;\n+         Restrict.Restrictions.Set (Max_Asynchronous_Select_Nesting) := True;\n+         Restrict.Restrictions.Value (Max_Asynchronous_Select_Nesting) := 0;\n \n          --  Suppress overflow, division by zero and access checks since they\n          --  are handled implicitly by CodePeer."}, {"sha": "8758b30654469b4c9f590897db6701a65dc1eca1", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87dc09cbb83422854550aa1f33dd7ac430351300/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87dc09cbb83422854550aa1f33dd7ac430351300/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=87dc09cbb83422854550aa1f33dd7ac430351300", "patch": "@@ -72,7 +72,7 @@ package Opt is\n    --  which we want to allow, so that things work OK when Ada_15 is added!\n    --  This warning is now removed, so this pragma can be removed some time???\n \n-   Ada_Version_Default : Ada_Version_Type := Ada_05;\n+   Ada_Version_Default : constant Ada_Version_Type := Ada_05;\n    --  GNAT\n    --  Default Ada version if no switch given\n "}, {"sha": "f7d97baec678519527ec32f0e911b9181bc067a9", "filename": "gcc/ada/restrict.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87dc09cbb83422854550aa1f33dd7ac430351300/gcc%2Fada%2Frestrict.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87dc09cbb83422854550aa1f33dd7ac430351300/gcc%2Fada%2Frestrict.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.adb?ref=87dc09cbb83422854550aa1f33dd7ac430351300", "patch": "@@ -256,6 +256,14 @@ package body Restrict is\n    --  Start of processing for Check_Restriction\n \n    begin\n+      --  In CodePeer mode, we do not want to check for any restriction, or\n+      --  set additional restrictions than those already set in gnat1drv.adb\n+      --  so that we have consistency between each compilation.\n+\n+      if CodePeer_Mode then\n+         return;\n+      end if;\n+\n       if UI_Is_In_Int_Range (V) then\n          VV := Integer (UI_To_Int (V));\n       else"}, {"sha": "816e12b979e7076cd6f3d70cdf77703c3a3ba067", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87dc09cbb83422854550aa1f33dd7ac430351300/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87dc09cbb83422854550aa1f33dd7ac430351300/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=87dc09cbb83422854550aa1f33dd7ac430351300", "patch": "@@ -1474,8 +1474,8 @@ package body Sem_Ch5 is\n          R_Copy       : constant Node_Id := New_Copy_Tree (R);\n          Lo           : constant Node_Id := Low_Bound  (R);\n          Hi           : constant Node_Id := High_Bound (R);\n-         New_Lo_Bound : Node_Id := Empty;\n-         New_Hi_Bound : Node_Id := Empty;\n+         New_Lo_Bound : Node_Id;\n+         New_Hi_Bound : Node_Id;\n          Typ          : Entity_Id;\n          Save_Analysis : Boolean;\n "}, {"sha": "9a60898109738e7e323a9e38c98502117ed1797f", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87dc09cbb83422854550aa1f33dd7ac430351300/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87dc09cbb83422854550aa1f33dd7ac430351300/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=87dc09cbb83422854550aa1f33dd7ac430351300", "patch": "@@ -3479,6 +3479,7 @@ package body Sem_Res is\n \n             --  Save_Actual (A,\n             --    Ekind (F) /= E_In_Parameter or else Is_Access_Type (F_Typ));\n+            --  Why is this code commented out ???\n \n             --  For mode IN, if actual is an entity, and the type of the formal\n             --  has warnings suppressed, then we reset Never_Set_In_Source for\n@@ -7976,6 +7977,7 @@ package body Sem_Res is\n       R     : constant Node_Id   := Right_Opnd (N);\n \n    begin\n+      --  Why are the calls to Check_Order_Dependence commented out ???\n       Resolve (L, B_Typ);\n       --  Check_Order_Dependence;   --  For AI05-0144\n       Resolve (R, B_Typ);"}, {"sha": "e846845ca70d2e558f45fdb743e1a827b3304af7", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87dc09cbb83422854550aa1f33dd7ac430351300/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87dc09cbb83422854550aa1f33dd7ac430351300/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=87dc09cbb83422854550aa1f33dd7ac430351300", "patch": "@@ -116,7 +116,7 @@ package body Sem_Util is\n       Table_Index_Type     => Int,\n       Table_Low_Bound      => 0,\n       Table_Initial        => 10,\n-      Table_Increment      => 10,\n+      Table_Increment      => 100,\n       Table_Name           => \"Actuals\");\n \n    -----------------------\n@@ -1174,8 +1174,12 @@ package body Sem_Util is\n    ----------------------------\n \n    procedure Check_Order_Dependence is\n-      Act1, Act2 : Node_Id;\n+      Act1 : Node_Id;\n+      Act2 : Node_Id;\n+\n    begin\n+      --  This could use comments ???\n+\n       for J in 0 .. Actuals_In_Call.Last loop\n          if Actuals_In_Call.Table (J).Is_Writable then\n             Act1 := Actuals_In_Call.Table (J).Act;\n@@ -1187,6 +1191,7 @@ package body Sem_Util is\n             for K in 0 .. Actuals_In_Call.Last loop\n                if K /= J then\n                   Act2 := Actuals_In_Call.Table (K).Act;\n+\n                   if Nkind (Act2) = N_Attribute_Reference then\n                      Act2 := Prefix (Act2);\n                   end if;\n@@ -10580,11 +10585,11 @@ package body Sem_Util is\n    procedure Save_Actual (N : Node_Id;  Writable : Boolean := False) is\n    begin\n       if Is_Entity_Name (N)\n-           or else\n-         Nkind_In (N, N_Indexed_Component, N_Selected_Component, N_Slice)\n-           or else\n-             (Nkind (N) = N_Attribute_Reference\n-                and then Attribute_Name (N) = Name_Access)\n+        or else\n+          Nkind_In (N, N_Indexed_Component, N_Selected_Component, N_Slice)\n+        or else\n+          (Nkind (N) = N_Attribute_Reference\n+            and then Attribute_Name (N) = Name_Access)\n \n       then\n          --  We are only interested in IN OUT parameters of inner calls"}]}