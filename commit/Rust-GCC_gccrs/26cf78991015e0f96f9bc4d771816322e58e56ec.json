{"sha": "26cf78991015e0f96f9bc4d771816322e58e56ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZjZjc4OTkxMDE1ZTBmOTZmOWJjNGQ3NzE4MTYzMjJlNThlNTZlYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-06-29T07:53:27Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-06-29T07:53:27Z"}, "message": "decl.c (gnat_to_gnu_field): Rework error messages for fields requiring strict alignment...\n\n\t* gcc-interface/decl.c (gnat_to_gnu_field): Rework error messages for\n\tfields requiring strict alignment, add explicit test on Storage_Unit\n\tfor position and size, and mention type alignment for position.\n\nFrom-SVN: r272819", "tree": {"sha": "f14f1e36e85a7f2dfd6f14815b04af07626db658", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f14f1e36e85a7f2dfd6f14815b04af07626db658"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26cf78991015e0f96f9bc4d771816322e58e56ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26cf78991015e0f96f9bc4d771816322e58e56ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26cf78991015e0f96f9bc4d771816322e58e56ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26cf78991015e0f96f9bc4d771816322e58e56ec/comments", "author": null, "committer": null, "parents": [{"sha": "4ed9ab2de7fd409e385524ab9ca2e62a3097691e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ed9ab2de7fd409e385524ab9ca2e62a3097691e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ed9ab2de7fd409e385524ab9ca2e62a3097691e"}], "stats": {"total": 131, "additions": 73, "deletions": 58}, "files": [{"sha": "31805e545e88880f7592070297fffa724d2b8997", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26cf78991015e0f96f9bc4d771816322e58e56ec/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26cf78991015e0f96f9bc4d771816322e58e56ec/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=26cf78991015e0f96f9bc4d771816322e58e56ec", "patch": "@@ -1,3 +1,9 @@\n+2019-06-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_field): Rework error messages for\n+\tfields requiring strict alignment, add explicit test on Storage_Unit\n+\tfor position and size, and mention type alignment for position.\n+\n 2019-06-29  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (mark_visited_r): Set TYPE_SIZES_GIMPLIFIED on"}, {"sha": "6d7900d000da353a6038b8b6fac4a897ea96a7d2", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 56, "deletions": 53, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26cf78991015e0f96f9bc4d771816322e58e56ec/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26cf78991015e0f96f9bc4d771816322e58e56ec/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=26cf78991015e0f96f9bc4d771816322e58e56ec", "patch": "@@ -7026,7 +7026,7 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n \t  if (TREE_CODE (TYPE_SIZE (gnu_parent)) == INTEGER_CST\n \t      && tree_int_cst_lt (gnu_pos, TYPE_SIZE (gnu_parent)))\n \t    post_error_ne_tree\n-\t      (\"offset of& must be beyond parent{, minimum allowed is ^}\",\n+\t      (\"position for& must be beyond parent{, minimum allowed is ^}\",\n \t       Position (gnat_clause), gnat_field, TYPE_SIZE_UNIT (gnu_parent));\n \t}\n \n@@ -7040,79 +7040,82 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n \t  && !(type_annotate_only && Is_Tagged_Type (gnat_field_type)))\n \t{\n \t  const unsigned int type_align = TYPE_ALIGN (gnu_field_type);\n+\t  const char *field_s;\n \n \t  if (TYPE_ALIGN (gnu_record_type)\n \t      && TYPE_ALIGN (gnu_record_type) < type_align)\n \t    SET_TYPE_ALIGN (gnu_record_type, type_align);\n \n-\t  /* If the position is not a multiple of the alignment of the type,\n-\t     then error out and reset the position.  */\n+\t  if (is_atomic)\n+\t    field_s = \"atomic &\";\n+\t  else if (is_aliased)\n+\t    field_s = \"aliased &\";\n+\t  else if (is_independent)\n+\t    field_s = \"independent &\";\n+\t  else if (is_strict_alignment)\n+\t    field_s = \"& with aliased or tagged part\";\n+\t  else\n+\t    gcc_unreachable ();\n+\n+\t  /* If the position is not a multiple of the storage unit, then error\n+\t     out and reset the position.  */\n \t  if (!integer_zerop (size_binop (TRUNC_MOD_EXPR, gnu_pos,\n-\t\t\t\t\t  bitsize_int (type_align))))\n+\t\t\t\t\t  bitsize_unit_node)))\n \t    {\n-\t      const char *s;\n-\n-\t      if (is_atomic)\n-\t\ts = \"position of atomic field& must be multiple of ^ bits\";\n-\t      else if (is_aliased)\n-\t\ts = \"position of aliased field& must be multiple of ^ bits\";\n-\t      else if (is_independent)\n-\t\ts = \"position of independent field& must be multiple of ^ bits\";\n-\t      else if (is_strict_alignment)\n-\t\ts = \"position of & with aliased or tagged part must be\"\n-\t\t    \" multiple of ^ bits\";\n-\t      else\n-\t\tgcc_unreachable ();\n+\t      char s[128];\n+\t      snprintf (s, sizeof (s), \"position for %s must be \"\n+\t\t\t\"multiple of Storage_Unit\", field_s);\n+\t      post_error_ne (s, First_Bit (gnat_clause), gnat_field);\n+\t      gnu_pos = NULL_TREE;\n+\t    }\n \n+\t  /* If the position is not a multiple of the alignment of the type,\n+\t     then error out and reset the position.  */\n+\t  else if (type_align > BITS_PER_UNIT\n+\t\t   && !integer_zerop (size_binop (TRUNC_MOD_EXPR, gnu_pos,\n+\t\t\t\t\t\t  bitsize_int (type_align))))\n+\t    {\n+\t      char s[128];\n+              snprintf (s, sizeof (s), \"position for %s must be multiple of ^\",\n+\t\t\tfield_s);\n \t      post_error_ne_num (s, First_Bit (gnat_clause), gnat_field,\n-\t\t\t\t type_align);\n+\t\t\t\t type_align / BITS_PER_UNIT);\n+\t      post_error_ne_num (\"\\\\because alignment of its type& is ^\",\n+\t\t\t\t First_Bit (gnat_clause), Etype (gnat_field),\n+\t\t\t\t type_align / BITS_PER_UNIT);\n \t      gnu_pos = NULL_TREE;\n \t    }\n \n \t  if (gnu_size)\n \t    {\n-\t      tree gnu_type_size = TYPE_SIZE (gnu_field_type);\n-\t      const int cmp = tree_int_cst_compare (gnu_size, gnu_type_size);\n+\t      tree type_size = TYPE_SIZE (gnu_field_type);\n+\t      int cmp;\n \n-\t      /* If the size is lower than that of the type, or greater for\n-\t\t atomic and aliased, then error out and reset the size.  */\n-\t      if (cmp < 0 || (cmp > 0 && (is_atomic || is_aliased)))\n+\t      /* If the size is not a multiple of the storage unit, then error\n+\t\t out and reset the size.  */\n+\t      if (!integer_zerop (size_binop (TRUNC_MOD_EXPR, gnu_size,\n+\t\t\t\t\t      bitsize_unit_node)))\n \t\t{\n-\t\t  const char *s;\n-\n-\t\t  if (is_atomic)\n-\t\t    s = \"size of atomic field& must be ^ bits\";\n-\t\t  else if (is_aliased)\n-\t\t    s = \"size of aliased field& must be ^ bits\";\n-\t\t  else if (is_independent)\n-\t\t    s = \"size of independent field& must be at least ^ bits\";\n-\t\t  else if (is_strict_alignment)\n-\t\t    s = \"size of & with aliased or tagged part must be\"\n-\t\t\t\" at least ^ bits\";\n-\t\t  else\n-\t\t    gcc_unreachable ();\n-\n-\t\t  post_error_ne_tree (s, Last_Bit (gnat_clause), gnat_field,\n-\t\t\t\t      gnu_type_size);\n+\t\t  char s[128];\n+\t\t  snprintf (s, sizeof (s), \"size for %s must be \"\n+\t\t\t    \"multiple of Storage_Unit\", field_s);\n+\t\t  post_error_ne (s, Last_Bit (gnat_clause), gnat_field);\n \t\t  gnu_size = NULL_TREE;\n \t\t}\n \n-\t      /* Likewise if the size is not a multiple of a byte,  */\n-\t      else if (!integer_zerop (size_binop (TRUNC_MOD_EXPR, gnu_size,\n-\t\t\t\t\t\t   bitsize_unit_node)))\n+\t      /* If the size is lower than that of the type, or greater for\n+\t\t atomic and aliased, then error out and reset the size.  */\n+\t      else if ((cmp = tree_int_cst_compare (gnu_size, type_size)) < 0\n+\t\t       || (cmp > 0 && (is_atomic || is_aliased)))\n \t\t{\n-\t\t  const char *s;\n-\n-\t\t  if (is_independent)\n-\t\t    s = \"size of independent field& must be multiple of\"\n-\t\t\t\" Storage_Unit\";\n-\t\t  else if (is_strict_alignment)\n-\t\t    s = \"size of & with aliased or tagged part must be\"\n-\t\t\t\" multiple of Storage_Unit\";\n+\t\t  char s[128];\n+\t\t  if (is_atomic || is_aliased)\n+\t\t    snprintf (s, sizeof (s), \"size for %s must be ^\", field_s);\n \t\t  else\n-\t\t    gcc_unreachable ();\n-\n-\t\t  post_error_ne (s, Last_Bit (gnat_clause), gnat_field);\n+  \t\t    snprintf (s, sizeof (s), \"size for %s must be at least ^\",\n+\t\t\t      field_s);\n+\t\t  post_error_ne_tree (s, Last_Bit (gnat_clause), gnat_field,\n+\t\t\t\t      type_size);\n \t\t  gnu_size = NULL_TREE;\n \t\t}\n \t    }"}, {"sha": "679f1da4b6e27abcf78f9eebcf02402b73a1b06b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26cf78991015e0f96f9bc4d771816322e58e56ec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26cf78991015e0f96f9bc4d771816322e58e56ec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=26cf78991015e0f96f9bc4d771816322e58e56ec", "patch": "@@ -1,3 +1,9 @@\n+2019-06-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/atomic2.ads: Adjust error message.\n+\t* gnat.dg/specs/clause_on_volatile.ads: Likewise.\n+\t* gnat.dg/specs/size_clause3.ads: Likewise.\n+\n 2019-06-29  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/array35.adb: New test."}, {"sha": "17b9f8325e5503695272ef502b7c8f3c5e94ed2c", "filename": "gcc/testsuite/gnat.dg/specs/atomic2.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26cf78991015e0f96f9bc4d771816322e58e56ec/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fatomic2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26cf78991015e0f96f9bc4d771816322e58e56ec/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fatomic2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fatomic2.ads?ref=26cf78991015e0f96f9bc4d771816322e58e56ec", "patch": "@@ -9,7 +9,7 @@ package Atomic2 is\n   end record;\n   for Rec1 use record\n     C at 0 range 0 .. 7;\n-    I at 1 range 0 .. 31; -- { dg-error \"position of atomic field\" }\n+    I at 1 range 0 .. 31; -- { dg-error \"position for atomic|alignment\" }\n   end record;\n \n   type Rec2 is record"}, {"sha": "0dcffbcd3a4e8b19fc4c07d6f56ec97ef9416e05", "filename": "gcc/testsuite/gnat.dg/specs/clause_on_volatile.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26cf78991015e0f96f9bc4d771816322e58e56ec/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fclause_on_volatile.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26cf78991015e0f96f9bc4d771816322e58e56ec/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fclause_on_volatile.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fclause_on_volatile.ads?ref=26cf78991015e0f96f9bc4d771816322e58e56ec", "patch": "@@ -39,7 +39,7 @@ package Clause_On_Volatile is\n   For A2'Alignment use 4;\n   for A2 use record\n      B at 0 range 0 .. 7;\n-     AW at 1 range 0 .. 31; -- { dg-error \"must be multiple\" }\n+     AW at 1 range 0 .. 31; -- { dg-error \"must be multiple|alignment\" }\n   end record;\n \n   type A3 is record\n@@ -49,7 +49,7 @@ package Clause_On_Volatile is\n   For A3'Alignment use 4;\n   for A3 use record\n      B at 0 range 0 .. 7;\n-     AW at 1 range 0 .. 15; -- { dg-error \"must be (multiple||\\[0-9\\]*)\" }\n+     AW at 1 range 0 .. 15; -- { dg-error \"must be (multiple||\\[0-9\\]*)|alignment\" }\n   end record;\n \n   type V1 is record"}, {"sha": "fd7999a1c551b7f372e4e8c06db77b0b18f36ec1", "filename": "gcc/testsuite/gnat.dg/specs/size_clause3.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26cf78991015e0f96f9bc4d771816322e58e56ec/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fsize_clause3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26cf78991015e0f96f9bc4d771816322e58e56ec/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fsize_clause3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fsize_clause3.ads?ref=26cf78991015e0f96f9bc4d771816322e58e56ec", "patch": "@@ -14,7 +14,7 @@ package Size_Clause3 is\n     rr : R1; -- size must be 40\n   end record;\n   for S1 use record\n-    rr at 0 range 0 .. 39;  -- { dg-error \"size of .rr. with aliased or tagged\" }\n+    rr at 0 range 0 .. 39;  -- { dg-error \"size for .rr. with aliased or tagged\" }\n   end record;\n \n   -- The record is explicitly given alignment 1 so its real type is 40.\n@@ -44,7 +44,7 @@ package Size_Clause3 is\n     rr : R3; -- size must be 40\n   end record;\n   for S3 use record\n-    rr at 0 range 0 .. 39;  -- { dg-error \"size of .rr. with aliased or tagged\" }\n+    rr at 0 range 0 .. 39;  -- { dg-error \"size for .rr. with aliased or tagged\" }\n   end record;\n \n end Size_Clause3;"}]}