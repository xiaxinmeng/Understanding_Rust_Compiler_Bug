{"sha": "2d7243898e983c8df7abc4b51cfe9ef23327f0a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ3MjQzODk4ZTk4M2M4ZGY3YWJjNGI1MWNmZTllZjIzMzI3ZjBhOQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-11T08:52:38Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-11T08:52:38Z"}, "message": "(finish_struct): Don't assume that a target integer\nfits in a HOST_WIDE_INT when checking bit-field widths.\n\nFrom-SVN: r2105", "tree": {"sha": "97ee7c0bd7ec4402577d48d4d0b0292bb4d44993", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97ee7c0bd7ec4402577d48d4d0b0292bb4d44993"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d7243898e983c8df7abc4b51cfe9ef23327f0a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d7243898e983c8df7abc4b51cfe9ef23327f0a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d7243898e983c8df7abc4b51cfe9ef23327f0a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d7243898e983c8df7abc4b51cfe9ef23327f0a9/comments", "author": null, "committer": null, "parents": [{"sha": "1f0c5cc9cf4410e18aec390311de0e7b2956b5da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f0c5cc9cf4410e18aec390311de0e7b2956b5da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f0c5cc9cf4410e18aec390311de0e7b2956b5da"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "59d0c52491a5f58470afafd6e57a490ca7f1ec53", "filename": "gcc/c-decl.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7243898e983c8df7abc4b51cfe9ef23327f0a9/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7243898e983c8df7abc4b51cfe9ef23327f0a9/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=2d7243898e983c8df7abc4b51cfe9ef23327f0a9", "patch": "@@ -4826,23 +4826,23 @@ finish_struct (t, fieldlist)\n       /* Detect and ignore out of range field width.  */\n       if (DECL_INITIAL (x))\n \t{\n-\t  register int width = TREE_INT_CST_LOW (DECL_INITIAL (x));\n+\t  unsigned HOST_WIDE_INT width = TREE_INT_CST_LOW (DECL_INITIAL (x));\n \n-\t  if (width < 0)\n+\t  if (tree_int_cst_lt (DECL_INITIAL (x), integer_zero_node))\n \t    {\n \t      DECL_INITIAL (x) = NULL;\n \t      error_with_decl (x, \"negative width in bit-field `%s'\");\n \t    }\n-\t  else if (width == 0 && DECL_NAME (x) != 0)\n+\t  else if (TREE_INT_CST_HIGH (DECL_INITIAL (x)) != 0\n+\t\t   || width > TYPE_PRECISION (TREE_TYPE (x)))\n \t    {\n-\t      error_with_decl (x, \"zero width for bit-field `%s'\");\n \t      DECL_INITIAL (x) = NULL;\n+\t      pedwarn_with_decl (x, \"width of `%s' exceeds its type\");\n \t    }\n-\t  else if (width > TYPE_PRECISION (TREE_TYPE (x))\n-\t\t   || TREE_INT_CST_HIGH (DECL_INITIAL (x)) != 0)\n+\t  else if (width == 0 && DECL_NAME (x) != 0)\n \t    {\n+\t      error_with_decl (x, \"zero width for bit-field `%s'\");\n \t      DECL_INITIAL (x) = NULL;\n-\t      pedwarn_with_decl (x, \"width of `%s' exceeds its type\");\n \t    }\n \t}\n "}]}