{"sha": "e9a8afaafc0c11d8161d87f43950f33a3a12b096", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTlhOGFmYWFmYzBjMTFkODE2MWQ4N2Y0Mzk1MGYzM2EzYTEyYjA5Ng==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-01-20T12:30:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-01-20T12:30:15Z"}, "message": "re PR tree-optimization/42717 (ice: verify_ssa failed)\n\n2010-01-20  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/42717\n\t* tree-ssa-dce.c (get_live_post_dom): Remove.\n\t(forward_edge_to_pdom): Take an arbitrary edge to copy\n\tdegenerate PHI args from.\n\t(remove_dead_stmt): Use the first post-dominator even if it\n\tdoes not contain live statements as redirection destination.\n\n\t* gcc.c-torture/compile/pr42717.c: New testcase.\n\nFrom-SVN: r156076", "tree": {"sha": "e5b239c53d0c17612f9f4897508eeeb107dc50dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5b239c53d0c17612f9f4897508eeeb107dc50dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9a8afaafc0c11d8161d87f43950f33a3a12b096", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9a8afaafc0c11d8161d87f43950f33a3a12b096", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9a8afaafc0c11d8161d87f43950f33a3a12b096", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9a8afaafc0c11d8161d87f43950f33a3a12b096/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bd9b2e5379791c817933e6a77f41d0b84d082447", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd9b2e5379791c817933e6a77f41d0b84d082447", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd9b2e5379791c817933e6a77f41d0b84d082447"}], "stats": {"total": 109, "additions": 59, "deletions": 50}, "files": [{"sha": "4a70dc7dd1bea0489f91f9b152701d92906445fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9a8afaafc0c11d8161d87f43950f33a3a12b096/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9a8afaafc0c11d8161d87f43950f33a3a12b096/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e9a8afaafc0c11d8161d87f43950f33a3a12b096", "patch": "@@ -1,3 +1,12 @@\n+2010-01-20  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/42717\n+\t* tree-ssa-dce.c (get_live_post_dom): Remove.\n+\t(forward_edge_to_pdom): Take an arbitrary edge to copy\n+\tdegenerate PHI args from.\n+\t(remove_dead_stmt): Use the first post-dominator even if it\n+\tdoes not contain live statements as redirection destination.\n+\n 2010-01-20  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-inline.c (estimate_num_insns): Handle EH builtins."}, {"sha": "6d7c3a6189dad34931afe163ae6a6d73b08d877c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9a8afaafc0c11d8161d87f43950f33a3a12b096/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9a8afaafc0c11d8161d87f43950f33a3a12b096/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e9a8afaafc0c11d8161d87f43950f33a3a12b096", "patch": "@@ -1,3 +1,8 @@\n+2010-01-20  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/42717\n+\t* gcc.c-torture/compile/pr42717.c: New testcase.\n+\n 2010-01-20  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/cleanup-13.c: Expect DW_OP_mod to do unsigned modulo instead"}, {"sha": "4fe6f93e79770195b2a4d88be1e4366a1c971138", "filename": "gcc/testsuite/gcc.c-torture/compile/pr42717.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9a8afaafc0c11d8161d87f43950f33a3a12b096/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr42717.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9a8afaafc0c11d8161d87f43950f33a3a12b096/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr42717.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr42717.c?ref=e9a8afaafc0c11d8161d87f43950f33a3a12b096", "patch": "@@ -0,0 +1,30 @@\n+static signed char\n+foo (signed char si1, unsigned char si2)\n+{\n+  return (si1 ^ si2) & (-si2 ^ si2) ? : si1 - si2;\n+}\n+\n+struct S0\n+{\n+};\n+\n+unsigned char g_21;\n+\n+struct S0 g_34;\n+\n+void\n+bar (unsigned char p_20)\n+{\n+  unsigned char *l_22 = &g_21;\n+  unsigned char l_23 = 0;\n+  struct S0 *l = &g_34;\n+  goto lbl_42;\n+  for (; l_23; l_23 = foo (l_23, 1))\n+    {\n+      for (p_20 = 0; 0; p_20 = foo (p_20, 1))\n+\tlbl_42:;\n+      (l == &g_34) ? 0 : \"\";\n+lbl_85:*l_22 = p_20;\n+    }\n+  goto lbl_85;\n+}"}, {"sha": "4e3499aa6e11c5b152c4cca9e9317b3b3c814c5f", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 15, "deletions": 50, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9a8afaafc0c11d8161d87f43950f33a3a12b096/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9a8afaafc0c11d8161d87f43950f33a3a12b096/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=e9a8afaafc0c11d8161d87f43950f33a3a12b096", "patch": "@@ -917,27 +917,6 @@ remove_dead_phis (basic_block bb)\n   return something_changed;\n }\n \n-/* Find first live post dominator of BB.  */\n-\n-static basic_block\n-get_live_post_dom (basic_block bb)\n-{\n-  basic_block post_dom_bb;\n-\n-\n-  /* The post dominance info has to be up-to-date.  */\n-  gcc_assert (dom_info_state (CDI_POST_DOMINATORS) == DOM_OK);\n-\n-  /* Get the immediate post dominator of bb.  */\n-  post_dom_bb = get_immediate_dominator (CDI_POST_DOMINATORS, bb);\n-  /* And look for first live one.  */\n-  while (post_dom_bb != EXIT_BLOCK_PTR\n-\t && !TEST_BIT (bb_contains_live_stmts, post_dom_bb->index))\n-    post_dom_bb = get_immediate_dominator (CDI_POST_DOMINATORS, post_dom_bb);\n-\n-  return post_dom_bb;\n-}\n-\n /* Forward edge E to respective POST_DOM_BB and update PHIs.  */\n \n static edge\n@@ -961,51 +940,37 @@ forward_edge_to_pdom (edge e, basic_block post_dom_bb)\n   if (!gimple_seq_empty_p (phi_nodes (post_dom_bb)))\n     {\n       /* We are sure that for every live PHI we are seeing control dependent BB.\n-         This means that we can look up the end of control dependent path leading\n-         to the PHI itself.  */\n+         This means that we can pick any edge to duplicate PHI args from.  */\n       FOR_EACH_EDGE (e2, ei, post_dom_bb->preds)\n-\tif (e2 != e && dominated_by_p (CDI_POST_DOMINATORS, e->src, e2->src))\n+\tif (e2 != e)\n \t  break;\n       for (gsi = gsi_start_phis (post_dom_bb); !gsi_end_p (gsi);)\n \t{\n \t  gimple phi = gsi_stmt (gsi);\n \t  tree op;\n \t  source_location locus;\n \n-\t  /* Dead PHI do not imply control dependency.  */\n-          if (!gimple_plf (phi, STMT_NECESSARY)\n-\t      && is_gimple_reg (gimple_phi_result (phi)))\n-\t    {\n-\t      gsi_next (&gsi);\n-\t      continue;\n-\t    }\n-\t  if (gimple_phi_arg_def (phi, e->dest_idx))\n-\t    {\n-\t      gsi_next (&gsi);\n-\t      continue;\n-\t    }\n-\n-\t  /* We didn't find edge to update.  This can happen for PHIs on virtuals\n-\t     since there is no control dependency relation on them.  We are lost\n-\t     here and must force renaming of the symbol.  */\n+\t  /* PHIs for virtuals have no control dependency relation on them.\n+\t     We are lost here and must force renaming of the symbol.  */\n \t  if (!is_gimple_reg (gimple_phi_result (phi)))\n \t    {\n \t      mark_virtual_phi_result_for_renaming (phi);\n \t      remove_phi_node (&gsi, true);\n \t      continue;\n \t    }\n-\t  if (!e2)\n-\t    {\n-\t      op = gimple_phi_arg_def (phi, e->dest_idx == 0 ? 1 : 0);\n-\t      locus = gimple_phi_arg_location (phi, e->dest_idx == 0 ? 1 : 0);\n-\t    }\n-\t  else\n+\n+\t  /* Dead PHI do not imply control dependency.  */\n+          if (!gimple_plf (phi, STMT_NECESSARY))\n \t    {\n-\t      op = gimple_phi_arg_def (phi, e2->dest_idx);\n-\t      locus = gimple_phi_arg_location (phi, e2->dest_idx);\n+\t      gsi_next (&gsi);\n+\t      continue;\n \t    }\n+\n+\t  op = gimple_phi_arg_def (phi, e2->dest_idx);\n+\t  locus = gimple_phi_arg_location (phi, e2->dest_idx);\n \t  add_phi_arg (phi, op, e, locus);\n-\t  gcc_assert (e2 || degenerate_phi_p (phi));\n+\t  /* The resulting PHI if not dead can only be degenerate.  */\n+\t  gcc_assert (degenerate_phi_p (phi));\n \t  gsi_next (&gsi);\n \t}\n     }\n@@ -1041,7 +1006,7 @@ remove_dead_stmt (gimple_stmt_iterator *i, basic_block bb)\n       edge e, e2;\n       edge_iterator ei;\n \n-      post_dom_bb = get_live_post_dom (bb);\n+      post_dom_bb = get_immediate_dominator (CDI_POST_DOMINATORS, bb);\n \n       e = find_edge (bb, post_dom_bb);\n "}]}