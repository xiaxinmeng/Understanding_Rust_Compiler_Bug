{"sha": "895aa8e11319635104e6fa0dc1468fd6aec7b5b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk1YWE4ZTExMzE5NjM1MTA0ZTZmYTBkYzE0NjhmZDZhZWM3YjViMQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-08-08T22:50:47Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-08-08T22:50:47Z"}, "message": "c-format.c: suggest the correct format string to use (PR c/64955)\n\nThis adds fix-it hints to c-format.c so that it can (sometimes) suggest\nthe format string the user should have used.\n\nThe patch adds selftests for the new code in c-format.c.  These\nselftests are thus lang-specific.  This is the first time we've had\nlang-specific selftests, and hence the patch also adds a langhook for\nrunning them.  (Note that currently the Makefile only invokes the\nselftests for cc1).\n\ngcc/c-family/ChangeLog:\n\tPR c/64955\n\t* c-common.h (selftest::c_format_c_tests): New declaration.\n\t(selftest::run_c_tests): New declaration.\n\t* c-format.c: Include \"selftest.h.\n\t(format_warning_va): Add param \"corrected_substring\" and use\n\tit to add a replacement fix-it hint.\n\t(format_warning_at_substring): Likewise.\n\t(format_warning_at_char): Update for new param of\n\tformat_warning_va.\n\t(argument_parser::check_argument_type): Pass \"fki\" to\n\tcheck_format_types.\n\t(check_format_types): Add param \"fki\" and pass it to\n\tformat_type_warning.\n\t(deref_n_times): New function.\n\t(get_modifier_for_format_len): New function.\n\t(selftest::test_get_modifier_for_format_len): New function.\n\t(get_format_for_type): New function.\n\t(format_type_warning): Add param \"fki\" and use it to attempt\n\tto provide hints for argument types when calling\n\tformat_warning_at_substring.\n\t(selftest::get_info): New function.\n\t(selftest::assert_format_for_type_streq): New function.\n\t(ASSERT_FORMAT_FOR_TYPE_STREQ): New macro.\n\t(selftest::test_get_format_for_type_printf): New function.\n\t(selftest::test_get_format_for_type_scanf): New function.\n\t(selftest::c_format_c_tests): New function.\n\ngcc/c/ChangeLog:\n\tPR c/64955\n\t* c-lang.c (LANG_HOOKS_RUN_LANG_SELFTESTS): If CHECKING_P, wire\n\tthis up to selftest::run_c_tests.\n\t(selftest::run_c_tests): New function.\n\ngcc/ChangeLog:\n\tPR c/64955\n\t* langhooks-def.h (LANG_HOOKS_RUN_LANG_SELFTESTS): New default\n\tdo-nothing langhook.\n\t(LANG_HOOKS_INITIALIZER): Add LANG_HOOKS_RUN_LANG_SELFTESTS.\n\t* langhooks.h (struct lang_hooks): Add run_lang_selftests.\n\t* selftest-run-tests.c: Include \"tree.h\" and \"langhooks.h\".\n\t(selftest::run_tests): Call lang_hooks.run_lang_selftests.\n\ngcc/testsuite/ChangeLog:\n\tPR c/64955\n\t* gcc.dg/format/diagnostic-ranges.c: Add fix-it hints to expected\n\toutput.\n\nFrom-SVN: r239260", "tree": {"sha": "d1295b1b4e0a648f2f906e00b8e96ce05e031c74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1295b1b4e0a648f2f906e00b8e96ce05e031c74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/895aa8e11319635104e6fa0dc1468fd6aec7b5b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/895aa8e11319635104e6fa0dc1468fd6aec7b5b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/895aa8e11319635104e6fa0dc1468fd6aec7b5b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/895aa8e11319635104e6fa0dc1468fd6aec7b5b1/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b123572d819ffc4d3c250c7cbeb547fc351d4cf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b123572d819ffc4d3c250c7cbeb547fc351d4cf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b123572d819ffc4d3c250c7cbeb547fc351d4cf7"}], "stats": {"total": 391, "additions": 371, "deletions": 20}, "files": [{"sha": "dd264b31b005ce60b6dc20c7800b22ec25684224", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/895aa8e11319635104e6fa0dc1468fd6aec7b5b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/895aa8e11319635104e6fa0dc1468fd6aec7b5b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=895aa8e11319635104e6fa0dc1468fd6aec7b5b1", "patch": "@@ -1,3 +1,13 @@\n+2016-08-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/64955\n+\t* langhooks-def.h (LANG_HOOKS_RUN_LANG_SELFTESTS): New default\n+\tdo-nothing langhook.\n+\t(LANG_HOOKS_INITIALIZER): Add LANG_HOOKS_RUN_LANG_SELFTESTS.\n+\t* langhooks.h (struct lang_hooks): Add run_lang_selftests.\n+\t* selftest-run-tests.c: Include \"tree.h\" and \"langhooks.h\".\n+\t(selftest::run_tests): Call lang_hooks.run_lang_selftests.\n+\n 2016-08-08  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR bootstrap/72844"}, {"sha": "5b264e9e7e29187acfcea23da6a66b2d2ccdc8d4", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/895aa8e11319635104e6fa0dc1468fd6aec7b5b1/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/895aa8e11319635104e6fa0dc1468fd6aec7b5b1/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=895aa8e11319635104e6fa0dc1468fd6aec7b5b1", "patch": "@@ -1,3 +1,32 @@\n+2016-08-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/64955\n+\t* c-common.h (selftest::c_format_c_tests): New declaration.\n+\t(selftest::run_c_tests): New declaration.\n+\t* c-format.c: Include \"selftest.h.\n+\t(format_warning_va): Add param \"corrected_substring\" and use\n+\tit to add a replacement fix-it hint.\n+\t(format_warning_at_substring): Likewise.\n+\t(format_warning_at_char): Update for new param of\n+\tformat_warning_va.\n+\t(argument_parser::check_argument_type): Pass \"fki\" to\n+\tcheck_format_types.\n+\t(check_format_types): Add param \"fki\" and pass it to\n+\tformat_type_warning.\n+\t(deref_n_times): New function.\n+\t(get_modifier_for_format_len): New function.\n+\t(selftest::test_get_modifier_for_format_len): New function.\n+\t(get_format_for_type): New function.\n+\t(format_type_warning): Add param \"fki\" and use it to attempt\n+\tto provide hints for argument types when calling\n+\tformat_warning_at_substring.\n+\t(selftest::get_info): New function.\n+\t(selftest::assert_format_for_type_streq): New function.\n+\t(ASSERT_FORMAT_FOR_TYPE_STREQ): New macro.\n+\t(selftest::test_get_format_for_type_printf): New function.\n+\t(selftest::test_get_format_for_type_scanf): New function.\n+\t(selftest::c_format_c_tests): New function.\n+\n 2016-08-08  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/52952"}, {"sha": "61f9ced2bc8ad6011bc35fb71da5584cf92028da", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/895aa8e11319635104e6fa0dc1468fd6aec7b5b1/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/895aa8e11319635104e6fa0dc1468fd6aec7b5b1/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=895aa8e11319635104e6fa0dc1468fd6aec7b5b1", "patch": "@@ -1533,4 +1533,11 @@ extern bool valid_array_size_p (location_t, tree, tree);\n extern bool cilk_ignorable_spawn_rhs_op (tree);\n extern bool cilk_recognize_spawn (tree, tree *);\n \n+#if CHECKING_P\n+namespace selftest {\n+  extern void c_format_c_tests (void);\n+  extern void run_c_tests (void);\n+} // namespace selftest\n+#endif /* #if CHECKING_P */\n+\n #endif /* ! GCC_C_COMMON_H */"}, {"sha": "951ffd0037c01c76e5bde4d0abaa2ff267666499", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 250, "deletions": 18, "changes": 268, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/895aa8e11319635104e6fa0dc1468fd6aec7b5b1/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/895aa8e11319635104e6fa0dc1468fd6aec7b5b1/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=895aa8e11319635104e6fa0dc1468fd6aec7b5b1", "patch": "@@ -30,6 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"c-format.h\"\n #include \"diagnostic.h\"\n+#include \"selftest.h\"\n \n /* Handle attributes associated with format checking.  */\n \n@@ -126,11 +127,21 @@ static int format_flags (int format_num);\n      printf(fmt, msg);\n             ^~~  ~~~\n \n+   If CORRECTED_SUBSTRING is non-NULL, use it for cases 1 and 2 to provide\n+   a fix-it hint, suggesting that it should replace the text within the\n+   substring range.  For example:\n+\n+     test.c:90:10: warning: problem with '%i' here [-Wformat=]\n+     printf (\"hello %i\", msg);\n+                    ~^\n+                    %s\n+\n    Return true if a warning was emitted, false otherwise.  */\n \n-ATTRIBUTE_GCC_DIAG (4,0)\n+ATTRIBUTE_GCC_DIAG (5,0)\n static bool\n format_warning_va (const substring_loc &fmt_loc, source_range *param_range,\n+\t\t   const char *corrected_substring,\n \t\t   int opt, const char *gmsgid, va_list *ap)\n {\n   bool substring_within_range = false;\n@@ -174,6 +185,9 @@ format_warning_va (const substring_loc &fmt_loc, source_range *param_range,\n       richloc.add_range (param_loc, false);\n     }\n \n+  if (!err && corrected_substring && substring_within_range)\n+    richloc.add_fixit_replace (fmt_substring_range, corrected_substring);\n+\n   diagnostic_info diagnostic;\n   diagnostic_set_info (&diagnostic, gmsgid, ap, &richloc, DK_WARNING);\n   diagnostic.option_index = opt;\n@@ -182,22 +196,31 @@ format_warning_va (const substring_loc &fmt_loc, source_range *param_range,\n   if (!err && substring_loc && !substring_within_range)\n     /* Case 2.  */\n     if (warned)\n-      inform (substring_loc, \"format string is defined here\");\n+      {\n+\trich_location substring_richloc (line_table, substring_loc);\n+\tif (corrected_substring)\n+\t  substring_richloc.add_fixit_replace (fmt_substring_range,\n+\t\t\t\t\t       corrected_substring);\n+\tinform_at_rich_loc (&substring_richloc,\n+\t\t\t    \"format string is defined here\");\n+      }\n \n   return warned;\n }\n \n /* Variadic call to format_warning_va.  */\n \n-ATTRIBUTE_GCC_DIAG (4,0)\n+ATTRIBUTE_GCC_DIAG (5,0)\n static bool\n format_warning_at_substring (const substring_loc &fmt_loc,\n \t\t\t     source_range *param_range,\n+\t\t\t     const char *corrected_substring,\n \t\t\t     int opt, const char *gmsgid, ...)\n {\n   va_list ap;\n   va_start (ap, gmsgid);\n-  bool warned = format_warning_va (fmt_loc, param_range, opt, gmsgid, &ap);\n+  bool warned = format_warning_va (fmt_loc, param_range, corrected_substring,\n+\t\t\t\t   opt, gmsgid, &ap);\n   va_end (ap);\n \n   return warned;\n@@ -225,7 +248,7 @@ format_warning_at_char (location_t fmt_string_loc, tree format_string_cst,\n   char_idx -= 1;\n \n   substring_loc fmt_loc (fmt_string_loc, string_type, char_idx, char_idx);\n-  bool warned = format_warning_va (fmt_loc, NULL, opt, gmsgid, &ap);\n+  bool warned = format_warning_va (fmt_loc, NULL, NULL, opt, gmsgid, &ap);\n   va_end (ap);\n \n   return warned;\n@@ -1126,11 +1149,13 @@ static const format_flag_spec *get_flag_spec (const format_flag_spec *,\n \t\t\t\t\t      int, const char *);\n \n static void check_format_types (const substring_loc &fmt_loc,\n-\t\t\t\tformat_wanted_type *);\n+\t\t\t\tformat_wanted_type *,\n+\t\t\t\tconst format_kind_info *fki);\n static void format_type_warning (const substring_loc &fmt_loc,\n \t\t\t\t source_range *param_range,\n \t\t\t\t format_wanted_type *, tree,\n-\t\t\t\t tree);\n+\t\t\t\t tree,\n+\t\t\t\t const format_kind_info *fki);\n \n /* Decode a format type from a string, returning the type, or\n    format_type_error if not valid, in which case the caller should print an\n@@ -2786,7 +2811,7 @@ check_argument_type (const format_char_info *fci,\n       ptrdiff_t offset_to_format_end = (format_chars - 1) - orig_format_chars;\n       substring_loc fmt_loc (fmt_param_loc, TREE_TYPE (format_string_cst),\n \t\t\t     offset_to_format_start, offset_to_format_end);\n-      check_format_types (fmt_loc, first_wanted_type);\n+      check_format_types (fmt_loc, first_wanted_type, fki);\n     }\n \n   return true;\n@@ -2946,7 +2971,7 @@ check_format_info_main (format_check_results *res,\n    location of the format conversion.  */\n static void\n check_format_types (const substring_loc &fmt_loc,\n-\t\t    format_wanted_type *types)\n+\t\t    format_wanted_type *types, const format_kind_info *fki)\n {\n   for (; types != 0; types = types->next)\n     {\n@@ -2973,7 +2998,7 @@ check_format_types (const substring_loc &fmt_loc,\n       cur_param = types->param;\n       if (!cur_param)\n         {\n-          format_type_warning (fmt_loc, NULL, types, wanted_type, NULL);\n+\t  format_type_warning (fmt_loc, NULL, types, wanted_type, NULL, fki);\n           continue;\n         }\n \n@@ -3058,7 +3083,7 @@ check_format_types (const substring_loc &fmt_loc,\n \t  else\n \t    {\n \t      format_type_warning (fmt_loc, param_range_ptr,\n-\t\t\t\t   types, wanted_type, orig_cur_type);\n+\t\t\t\t   types, wanted_type, orig_cur_type, fki);\n \t      break;\n \t    }\n \t}\n@@ -3127,10 +3152,115 @@ check_format_types (const substring_loc &fmt_loc,\n \tcontinue;\n       /* Now we have a type mismatch.  */\n       format_type_warning (fmt_loc, param_range_ptr, types,\n-\t\t\t   wanted_type, orig_cur_type);\n+\t\t\t   wanted_type, orig_cur_type, fki);\n+    }\n+}\n+\n+/* Given type TYPE, attempt to dereference the type N times\n+   (e.g. from (\"int ***\", 2) to \"int *\")\n+\n+   Return the derefenced type, with any qualifiers\n+   such as \"const\" stripped from the result, or\n+   NULL if unsuccessful (e.g. TYPE is not a pointer type).  */\n+\n+static tree\n+deref_n_times (tree type, int n)\n+{\n+  gcc_assert (type);\n+\n+  for (int i = n; i > 0; i--)\n+    {\n+      if (TREE_CODE (type) != POINTER_TYPE)\n+\treturn NULL_TREE;\n+      type = TREE_TYPE (type);\n+    }\n+  /* Strip off any \"const\" etc.  */\n+  return build_qualified_type (type, 0);\n+}\n+\n+/* Lookup the format code for FORMAT_LEN within FLI,\n+   returning the string code for expressing it, or NULL\n+   if it is not found.  */\n+\n+static const char *\n+get_modifier_for_format_len (const format_length_info *fli,\n+\t\t\t     enum format_lengths format_len)\n+{\n+  for (; fli->name; fli++)\n+    {\n+      if (fli->index == format_len)\n+\treturn fli->name;\n+      if (fli->double_index == format_len)\n+\treturn fli->double_name;\n     }\n+  return NULL;\n+}\n+\n+#if CHECKING_P\n+\n+namespace selftest {\n+\n+static void\n+test_get_modifier_for_format_len ()\n+{\n+  ASSERT_STREQ (\"h\",\n+\t\tget_modifier_for_format_len (printf_length_specs, FMT_LEN_h));\n+  ASSERT_STREQ (\"hh\",\n+\t\tget_modifier_for_format_len (printf_length_specs, FMT_LEN_hh));\n+  ASSERT_STREQ (\"L\",\n+\t\tget_modifier_for_format_len (printf_length_specs, FMT_LEN_L));\n+  ASSERT_EQ (NULL,\n+\t     get_modifier_for_format_len (printf_length_specs, FMT_LEN_none));\n }\n \n+} // namespace selftest\n+\n+#endif /* CHECKING_P */\n+\n+/* Generate a string containing the format string that should be\n+   used to format arguments of type ARG_TYPE within FKI (effectively\n+   the inverse of the checking code).\n+\n+   If successful, returns a non-NULL string which should be freed\n+   by the called.\n+   Otherwise, returns NULL.  */\n+\n+static char *\n+get_format_for_type (const format_kind_info *fki, tree arg_type)\n+{\n+  gcc_assert (arg_type);\n+\n+  const format_char_info *spec;\n+  for (spec = &fki->conversion_specs[0];\n+       spec->format_chars;\n+       spec++)\n+    {\n+      tree effective_arg_type = deref_n_times (arg_type,\n+\t\t\t\t\t       spec->pointer_count);\n+      if (!effective_arg_type)\n+\tcontinue;\n+      for (int i = 0; i < FMT_LEN_MAX; i++)\n+\t{\n+\t  const format_type_detail *ftd = &spec->types[i];\n+\t  if (!ftd->type)\n+\t    continue;\n+\t  if (TYPE_CANONICAL (*ftd->type)\n+\t      == TYPE_CANONICAL (effective_arg_type))\n+\t    {\n+\t      const char *len_modifier\n+\t\t= get_modifier_for_format_len (fki->length_char_specs,\n+\t\t\t\t\t       (enum format_lengths)i);\n+\t      if (!len_modifier)\n+\t\tlen_modifier = \"\";\n+\n+\t      return xasprintf (\"%%%s%c\",\n+\t\t\t\tlen_modifier,\n+\t\t\t\tspec->format_chars[0]);\n+\t    }\n+\t}\n+   }\n+  return NULL;\n+}\n \n /* Give a warning at FMT_LOC about a format argument of different type\n    from that expected.  If non-NULL, PARAM_RANGE is the source range of the\n@@ -3144,9 +3274,10 @@ static void\n format_type_warning (const substring_loc &fmt_loc,\n \t\t     source_range *param_range,\n \t\t     format_wanted_type *type,\n-\t\t     tree wanted_type, tree arg_type)\n+\t\t     tree wanted_type, tree arg_type,\n+\t\t     const format_kind_info *fki)\n {\n-  int kind = type->kind;\n+  enum format_specifier_kind kind = type->kind;\n   const char *wanted_type_name = type->wanted_type_name;\n   const char *format_start = type->format_start;\n   int format_length = type->format_length;\n@@ -3185,12 +3316,18 @@ format_type_warning (const substring_loc &fmt_loc,\n       p[pointer_count + 1] = 0;\n     }\n \n+  /* Attempt to provide hints for argument types, but not for field widths\n+     and precisions.  */\n+  char *format_for_type = NULL;\n+  if (arg_type && kind == CF_KIND_FORMAT)\n+    format_for_type = get_format_for_type (fki, arg_type);\n+\n   if (wanted_type_name)\n     {\n       if (arg_type)\n \tformat_warning_at_substring\n \t  (fmt_loc, param_range,\n-\t   OPT_Wformat_,\n+\t   format_for_type, OPT_Wformat_,\n \t   \"%s %<%s%.*s%> expects argument of type %<%s%s%>, \"\n \t   \"but argument %d has type %qT\",\n \t   gettext (kind_descriptions[kind]),\n@@ -3200,7 +3337,7 @@ format_type_warning (const substring_loc &fmt_loc,\n       else\n \tformat_warning_at_substring\n \t  (fmt_loc, param_range,\n-\t   OPT_Wformat_,\n+\t   format_for_type, OPT_Wformat_,\n \t   \"%s %<%s%.*s%> expects a matching %<%s%s%> argument\",\n \t   gettext (kind_descriptions[kind]),\n \t   (kind == CF_KIND_FORMAT ? \"%\" : \"\"),\n@@ -3211,7 +3348,7 @@ format_type_warning (const substring_loc &fmt_loc,\n       if (arg_type)\n \tformat_warning_at_substring\n \t  (fmt_loc, param_range,\n-\t   OPT_Wformat_,\n+\t   format_for_type, OPT_Wformat_,\n \t   \"%s %<%s%.*s%> expects argument of type %<%T%s%>, \"\n \t   \"but argument %d has type %qT\",\n \t   gettext (kind_descriptions[kind]),\n@@ -3221,12 +3358,14 @@ format_type_warning (const substring_loc &fmt_loc,\n       else\n \tformat_warning_at_substring\n \t  (fmt_loc, param_range,\n-\t   OPT_Wformat_,\n+\t   format_for_type, OPT_Wformat_,\n \t   \"%s %<%s%.*s%> expects a matching %<%T%s%> argument\",\n \t   gettext (kind_descriptions[kind]),\n \t   (kind == CF_KIND_FORMAT ? \"%\" : \"\"),\n \t   format_length, format_start, wanted_type, p);\n     }\n+\n+  free (format_for_type);\n }\n \n \n@@ -3747,3 +3886,96 @@ handle_format_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n \n   return NULL_TREE;\n }\n+\n+#if CHECKING_P\n+\n+namespace selftest {\n+\n+/* Selftests of location handling.  */\n+\n+/* Get the format_kind_info with the given name.  */\n+\n+static const format_kind_info *\n+get_info (const char *name)\n+{\n+  int idx = decode_format_type (name);\n+  const format_kind_info *fki = &format_types[idx];\n+  ASSERT_STREQ (fki->name, name);\n+  return fki;\n+}\n+\n+/* Verify that get_format_for_type (FKI, TYPE) is EXPECTED_FORMAT.  */\n+\n+static void\n+assert_format_for_type_streq (const location &loc, const format_kind_info *fki,\n+\t\t\t      const char *expected_format, tree type)\n+{\n+  gcc_assert (fki);\n+  gcc_assert (expected_format);\n+  gcc_assert (type);\n+\n+  char *actual_format = get_format_for_type (fki, type);\n+  ASSERT_STREQ_AT (loc, expected_format, actual_format);\n+  free (actual_format);\n+}\n+\n+/* Selftests for get_format_for_type.  */\n+\n+#define ASSERT_FORMAT_FOR_TYPE_STREQ(EXPECTED_FORMAT, TYPE) \\\n+  assert_format_for_type_streq (SELFTEST_LOCATION, (fki), (EXPECTED_FORMAT), (TYPE))\n+\n+/* Selftest for get_format_for_type for \"printf\"-style functions.  */\n+\n+static void\n+test_get_format_for_type_printf ()\n+{\n+  const format_kind_info *fki = get_info (\"gnu_printf\");\n+  ASSERT_NE (fki, NULL);\n+\n+  ASSERT_FORMAT_FOR_TYPE_STREQ (\"%f\", double_type_node);\n+  ASSERT_FORMAT_FOR_TYPE_STREQ (\"%Lf\", long_double_type_node);\n+  ASSERT_FORMAT_FOR_TYPE_STREQ (\"%d\", integer_type_node);\n+  ASSERT_FORMAT_FOR_TYPE_STREQ (\"%o\", unsigned_type_node);\n+  ASSERT_FORMAT_FOR_TYPE_STREQ (\"%ld\", long_integer_type_node);\n+  ASSERT_FORMAT_FOR_TYPE_STREQ (\"%lo\", long_unsigned_type_node);\n+  ASSERT_FORMAT_FOR_TYPE_STREQ (\"%lld\", long_long_integer_type_node);\n+  ASSERT_FORMAT_FOR_TYPE_STREQ (\"%llo\", long_long_unsigned_type_node);\n+  ASSERT_FORMAT_FOR_TYPE_STREQ (\"%s\", build_pointer_type (char_type_node));\n+}\n+\n+/* Selftest for get_format_for_type for \"scanf\"-style functions.  */\n+\n+static void\n+test_get_format_for_type_scanf ()\n+{\n+  const format_kind_info *fki = get_info (\"gnu_scanf\");\n+  ASSERT_NE (fki, NULL);\n+  ASSERT_FORMAT_FOR_TYPE_STREQ (\"%d\", build_pointer_type (integer_type_node));\n+  ASSERT_FORMAT_FOR_TYPE_STREQ (\"%u\", build_pointer_type (unsigned_type_node));\n+  ASSERT_FORMAT_FOR_TYPE_STREQ (\"%ld\",\n+\t\t\t\tbuild_pointer_type (long_integer_type_node));\n+  ASSERT_FORMAT_FOR_TYPE_STREQ (\"%lu\",\n+\t\t\t\tbuild_pointer_type (long_unsigned_type_node));\n+  ASSERT_FORMAT_FOR_TYPE_STREQ\n+    (\"%lld\", build_pointer_type (long_long_integer_type_node));\n+  ASSERT_FORMAT_FOR_TYPE_STREQ\n+    (\"%llu\", build_pointer_type (long_long_unsigned_type_node));\n+  ASSERT_FORMAT_FOR_TYPE_STREQ (\"%e\", build_pointer_type (float_type_node));\n+  ASSERT_FORMAT_FOR_TYPE_STREQ (\"%le\", build_pointer_type (double_type_node));\n+}\n+\n+#undef ASSERT_FORMAT_FOR_TYPE_STREQ\n+\n+/* Run all of the selftests within this file.  */\n+\n+void\n+c_format_c_tests ()\n+{\n+  test_get_modifier_for_format_len ();\n+  test_get_format_for_type_printf ();\n+  test_get_format_for_type_scanf ();\n+}\n+\n+} // namespace selftest\n+\n+#endif /* CHECKING_P */"}, {"sha": "3161dcb6a02eaa40a76657bc36d5049f28a8421b", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/895aa8e11319635104e6fa0dc1468fd6aec7b5b1/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/895aa8e11319635104e6fa0dc1468fd6aec7b5b1/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=895aa8e11319635104e6fa0dc1468fd6aec7b5b1", "patch": "@@ -1,3 +1,10 @@\n+2016-08-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/64955\n+\t* c-lang.c (LANG_HOOKS_RUN_LANG_SELFTESTS): If CHECKING_P, wire\n+\tthis up to selftest::run_c_tests.\n+\t(selftest::run_c_tests): New function.\n+\n 2016-08-04  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* c-parser.c (struct oacc_routine_data): Add error_seen and"}, {"sha": "b26be6ad92cf60f6dd6b3464bbe6cc8656b045be", "filename": "gcc/c/c-lang.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/895aa8e11319635104e6fa0dc1468fd6aec7b5b1/gcc%2Fc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/895aa8e11319635104e6fa0dc1468fd6aec7b5b1/gcc%2Fc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-lang.c?ref=895aa8e11319635104e6fa0dc1468fd6aec7b5b1", "patch": "@@ -38,7 +38,29 @@ enum c_language_kind c_language = clk_c;\n #undef LANG_HOOKS_INIT_TS\n #define LANG_HOOKS_INIT_TS c_common_init_ts\n \n+#if CHECKING_P\n+#undef LANG_HOOKS_RUN_LANG_SELFTESTS\n+#define LANG_HOOKS_RUN_LANG_SELFTESTS selftest::run_c_tests\n+#endif /* #if CHECKING_P */\n+\n /* Each front end provides its own lang hook initializer.  */\n struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n+#if CHECKING_P\n+\n+namespace selftest {\n+\n+/* Implementation of LANG_HOOKS_RUN_LANG_SELFTESTS for the C frontend.  */\n+\n+void\n+run_c_tests (void)\n+{\n+  c_format_c_tests ();\n+}\n+\n+} // namespace selftest\n+\n+#endif /* #if CHECKING_P */\n+\n+\n #include \"gtype-c.h\""}, {"sha": "c17f9984184968dbc24af1597700cf608b070655", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/895aa8e11319635104e6fa0dc1468fd6aec7b5b1/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/895aa8e11319635104e6fa0dc1468fd6aec7b5b1/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=895aa8e11319635104e6fa0dc1468fd6aec7b5b1", "patch": "@@ -120,6 +120,7 @@ extern bool lhd_omp_mappable_type (tree);\n #define LANG_HOOKS_BLOCK_MAY_FALLTHRU\thook_bool_const_tree_true\n #define LANG_HOOKS_EH_USE_CXA_END_CLEANUP\tfalse\n #define LANG_HOOKS_DEEP_UNSHARING\tfalse\n+#define LANG_HOOKS_RUN_LANG_SELFTESTS   lhd_do_nothing\n \n /* Attribute hooks.  */\n #define LANG_HOOKS_ATTRIBUTE_TABLE\t\tNULL\n@@ -319,7 +320,8 @@ extern void lhd_end_section (void);\n   LANG_HOOKS_EH_PROTECT_CLEANUP_ACTIONS, \\\n   LANG_HOOKS_BLOCK_MAY_FALLTHRU, \\\n   LANG_HOOKS_EH_USE_CXA_END_CLEANUP, \\\n-  LANG_HOOKS_DEEP_UNSHARING \\\n+  LANG_HOOKS_DEEP_UNSHARING, \\\n+  LANG_HOOKS_RUN_LANG_SELFTESTS \\\n }\n \n #endif /* GCC_LANG_HOOKS_DEF_H */"}, {"sha": "169a6784b6abdf3f69ed32423a53c34235d2bf9d", "filename": "gcc/langhooks.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/895aa8e11319635104e6fa0dc1468fd6aec7b5b1/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/895aa8e11319635104e6fa0dc1468fd6aec7b5b1/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=895aa8e11319635104e6fa0dc1468fd6aec7b5b1", "patch": "@@ -505,6 +505,9 @@ struct lang_hooks\n      gimplification.  */\n   bool deep_unsharing;\n \n+  /* Run all lang-specific selftests.  */\n+  void (*run_lang_selftests) (void);\n+\n   /* Whenever you add entries here, make sure you adjust langhooks-def.h\n      and langhooks.c accordingly.  */\n };"}, {"sha": "9d75a8e3c31d515e1bda5820712c5700574e0993", "filename": "gcc/selftest-run-tests.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/895aa8e11319635104e6fa0dc1468fd6aec7b5b1/gcc%2Fselftest-run-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/895aa8e11319635104e6fa0dc1468fd6aec7b5b1/gcc%2Fselftest-run-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest-run-tests.c?ref=895aa8e11319635104e6fa0dc1468fd6aec7b5b1", "patch": "@@ -21,6 +21,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"selftest.h\"\n+#include \"tree.h\"\n+#include \"langhooks.h\"\n \n /* This function needed to be split out from selftest.c as it references\n    tests from the whole source tree, and so is within\n@@ -70,6 +72,9 @@ selftest::run_tests ()\n   /* This one relies on most of the above.  */\n   function_tests_c_tests ();\n \n+  /* Run any lang-specific selftests.  */\n+  lang_hooks.run_lang_selftests ();\n+\n   /* Finished running tests.  */\n   long finish_time = get_run_time ();\n   long elapsed_time = finish_time - start_time;"}, {"sha": "777315e7be4b7b3646676f364f8e82b19a9a3cc3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/895aa8e11319635104e6fa0dc1468fd6aec7b5b1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/895aa8e11319635104e6fa0dc1468fd6aec7b5b1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=895aa8e11319635104e6fa0dc1468fd6aec7b5b1", "patch": "@@ -1,3 +1,9 @@\n+2016-08-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/64955\n+\t* gcc.dg/format/diagnostic-ranges.c: Add fix-it hints to expected\n+\toutput.\n+\n 2016-08-08  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \t* gcc.dg/tree-ssa/pr71078-1.c: Add require-effective-target"}, {"sha": "ff518333b6a597b78163892256fa43abc6f2918f", "filename": "gcc/testsuite/gcc.dg/format/diagnostic-ranges.c", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/895aa8e11319635104e6fa0dc1468fd6aec7b5b1/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdiagnostic-ranges.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/895aa8e11319635104e6fa0dc1468fd6aec7b5b1/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdiagnostic-ranges.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdiagnostic-ranges.c?ref=895aa8e11319635104e6fa0dc1468fd6aec7b5b1", "patch": "@@ -12,6 +12,25 @@ void test_mismatching_types (const char *msg)\n /* { dg-begin-multiline-output \"\" }\n    printf(\"hello %i\", msg);\n                  ~^\n+                 %s\n+   { dg-end-multiline-output \"\" } */\n+\n+\n+  printf(\"hello %s\", 42);  /* { dg-warning \"format '%s' expects argument of type 'char \\\\*', but argument 2 has type 'int'\" } */\n+/* TODO: ideally would also underline \"42\".  */\n+/* { dg-begin-multiline-output \"\" }\n+   printf(\"hello %s\", 42);\n+                 ~^\n+                 %d\n+   { dg-end-multiline-output \"\" } */\n+\n+\n+  printf(\"hello %i\", (long)0);  /* { dg-warning \"format '%i' expects argument of type 'int', but argument 2 has type 'long int' \" } */\n+/* TODO: ideally would also underline the argument.  */\n+/* { dg-begin-multiline-output \"\" }\n+   printf(\"hello %i\", (long)0);\n+                 ~^\n+                 %ld\n    { dg-end-multiline-output \"\" } */\n }\n \n@@ -23,6 +42,7 @@ void test_multiple_arguments (void)\n /* { dg-begin-multiline-output \"\" }\n    printf (\"arg0: %i  arg1: %s arg 2: %i\",\n                             ~^\n+                            %d\n    { dg-end-multiline-output \"\" } */\n }\n \n@@ -33,6 +53,7 @@ void test_multiple_arguments_2 (int i, int j)\n /* { dg-begin-multiline-output \"\" }\n    printf (\"arg0: %i  arg1: %s arg 2: %i\",\n                             ~^\n+                            %d\n            100, i + j, 102);\n                 ~~~~~         \n    { dg-end-multiline-output \"\" } */\n@@ -67,6 +88,7 @@ void test_hex (const char *msg)\n /* { dg-begin-multiline-output \"\" }\n    printf(\"hello \\x25\\x69\", msg);\n                  ~~~~~~~^\n+                 %s\n    { dg-end-multiline-output \"\" } */\n }\n \n@@ -80,6 +102,7 @@ void test_oct (const char *msg)\n /* { dg-begin-multiline-output \"\" }\n    printf(\"hello \\045\\151\", msg);\n                  ~~~~~~~^\n+                 %s\n    { dg-end-multiline-output \"\" } */\n }\n \n@@ -98,6 +121,7 @@ void test_multiple (const char *msg)\n /* { dg-begin-multiline-output \"\" }\n    printf(\"prefix\"  \"\\x25\"  \"\\151\"  \"suffix\",\n                      ~~~~~~~~~~~^\n+                     %s\n   { dg-end-multiline-output \"\" } */\n }\n \n@@ -108,6 +132,7 @@ void test_u8 (const char *msg)\n /* { dg-begin-multiline-output \"\" }\n    printf(u8\"hello %i\", msg);\n                    ~^\n+                   %s\n    { dg-end-multiline-output \"\" } */\n }\n \n@@ -117,6 +142,7 @@ void test_param (long long_i, long long_j)\n /* { dg-begin-multiline-output \"\" }\n    printf (\"foo %s bar\", long_i + long_j);\n                 ~^       ~~~~~~~~~~~~~~~\n+                %ld\n    { dg-end-multiline-output \"\" } */\n }\n \n@@ -192,20 +218,22 @@ void test_macro (const char *msg)\n /* { dg-begin-multiline-output \"\" }\n  #define INT_FMT \"%i\"\n                   ~^\n+                  %s\n    { dg-end-multiline-output \"\" } */\n }\n \n void test_non_contiguous_strings (void)\n {\n   __builtin_printf(\" %\" \"d \", 0.5); /* { dg-warning \"20: format .%d. expects argument of type .int., but argument 2 has type .double.\" } */\n-                                    /* { dg-message \"26: format string is defined here\" \"\" { target *-*-* } 200 } */\n+                                    /* { dg-message \"26: format string is defined here\" \"\" { target *-*-* } 227 } */\n   /* { dg-begin-multiline-output \"\" }\n    __builtin_printf(\" %\" \"d \", 0.5);\n                     ^~~~\n    { dg-end-multiline-output \"\" } */\n   /* { dg-begin-multiline-output \"\" }\n    __builtin_printf(\" %\" \"d \", 0.5);\n                       ~~~~^\n+                      %f\n    { dg-end-multiline-output \"\" } */\n }\n "}]}