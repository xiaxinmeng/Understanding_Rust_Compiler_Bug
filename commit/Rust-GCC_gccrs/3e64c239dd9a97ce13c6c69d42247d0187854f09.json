{"sha": "3e64c239dd9a97ce13c6c69d42247d0187854f09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U2NGMyMzlkZDlhOTdjZTEzYzZjNjlkNDIyNDdkMDE4Nzg1NGYwOQ==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2011-09-05T16:00:53Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2011-09-05T16:00:53Z"}, "message": "sparc-opts.h (PROCESSOR_NIAGARA3, [...]): New.\n\n\t* config/sparc/sparc-opts.h (PROCESSOR_NIAGARA3,\n\tPROCESSOR_NIAGARA4): New.\n\t* config/sparc/sparc.opt: Handle new processor types.\n\t* config/sparc/sparc.md: Add to \"cpu\" attribute.\n\t* config/sparc/sparc.h (TARGET_CPU_niagara3,\n\tTARGET_CPU_niagara4): New, treat as niagara2.\n\t* config/sparc/linux64.h: Handle niagara3 and niagara4\n\tlike niagara2.\n\t* config/sparc/sol2.h: Likewise.\n\t* config/sparc/niagara2.md: Schedule niagara3 like\n\tniagara2.\n\t* config/sparc/sparc.c (sparc_option_override): Add\n\tniagara3 and niagara4 handling.\n\t(sparc32_initialize_trampoline): Likewise.\n\t(sparc64_initialize_trampoline): Likewise.\n\t(sparc_use_sched_lookahead): Likewise.\n\t(sparc_issue_rate): Likewise.\n\t(sparc_register_move_cost): Likewise.\n\t* config/sparc/driver-sparc.c (cpu_names): Use niagara3\n\tand niagara4 as appropriate.\n\t* doc/invoke.texi: Document new processor types.\n\nFrom-SVN: r178554", "tree": {"sha": "567a4e123c0f1e18e9b8b74dc138f6b16396f5ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/567a4e123c0f1e18e9b8b74dc138f6b16396f5ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e64c239dd9a97ce13c6c69d42247d0187854f09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e64c239dd9a97ce13c6c69d42247d0187854f09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e64c239dd9a97ce13c6c69d42247d0187854f09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e64c239dd9a97ce13c6c69d42247d0187854f09/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0913b2d64ed9926d38d1de2370df11b0f98a49e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0913b2d64ed9926d38d1de2370df11b0f98a49e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0913b2d64ed9926d38d1de2370df11b0f98a49e0"}], "stats": {"total": 187, "additions": 145, "deletions": 42}, "files": [{"sha": "569994d8c2163c53f239c50f11ff53dfb7e8ed1f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e64c239dd9a97ce13c6c69d42247d0187854f09/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e64c239dd9a97ce13c6c69d42247d0187854f09/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e64c239dd9a97ce13c6c69d42247d0187854f09", "patch": "@@ -8,6 +8,28 @@\n \t* doc/invoke.texi: Document that Linux also supports\n \t-mcpu=native and -mtune=native on sparc.\n \n+\t* config/sparc/sparc-opts.h (PROCESSOR_NIAGARA3,\n+\tPROCESSOR_NIAGARA4): New.\n+\t* config/sparc/sparc.opt: Handle new processor types.\n+\t* config/sparc/sparc.md: Add to \"cpu\" attribute.\n+\t* config/sparc/sparc.h (TARGET_CPU_niagara3,\n+\tTARGET_CPU_niagara4): New, treat as niagara2.\n+\t* config/sparc/linux64.h: Handle niagara3 and niagara4\n+\tlike niagara2.\n+\t* config/sparc/sol2.h: Likewise.\n+\t* config/sparc/niagara2.md: Schedule niagara3 like\n+\tniagara2.\n+\t* config/sparc/sparc.c (sparc_option_override): Add\n+\tniagara3 and niagara4 handling.\n+\t(sparc32_initialize_trampoline): Likewise.\n+\t(sparc64_initialize_trampoline): Likewise.\n+\t(sparc_use_sched_lookahead): Likewise.\n+\t(sparc_issue_rate): Likewise.\n+\t(sparc_register_move_cost): Likewise.\n+\t* config/sparc/driver-sparc.c (cpu_names): Use niagara3\n+\tand niagara4 as appropriate.\n+\t* doc/invoke.texi: Document new processor types.\n+\n 2011-09-05  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/50289"}, {"sha": "96227289db50ef9ecfb29d7377621f626589d498", "filename": "gcc/config/sparc/driver-sparc.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e64c239dd9a97ce13c6c69d42247d0187854f09/gcc%2Fconfig%2Fsparc%2Fdriver-sparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e64c239dd9a97ce13c6c69d42247d0187854f09/gcc%2Fconfig%2Fsparc%2Fdriver-sparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fdriver-sparc.c?ref=3e64c239dd9a97ce13c6c69d42247d0187854f09", "patch": "@@ -55,8 +55,8 @@ static const struct cpu_names {\n   { \"UltraSPARC-T2\",\t\"niagara2\" },\n   { \"UltraSPARC-T2\",\t\"niagara2\" },\n   { \"UltraSPARC-T2+\",\t\"niagara2\" },\n-  { \"SPARC-T3\",\t\t\"niagara2\" },\n-  { \"SPARC-T4\",\t\t\"niagara2\" },\n+  { \"SPARC-T3\",\t\t\"niagara3\" },\n+  { \"SPARC-T4\",\t\t\"niagara4\" },\n #else\n   { \"SuperSPARC\",\t\"supersparc\" },\n   { \"HyperSparc\",\t\"hypersparc\" },\n@@ -71,8 +71,8 @@ static const struct cpu_names {\n   { \"Serrano\",\t\t\"ultrasparc3\" },\n   { \"UltraSparc T1\",\t\"niagara\" },\n   { \"UltraSparc T2\",\t\"niagara2\" },\n-  { \"UltraSparc T3\",\t\"niagara2\" },\n-  { \"UltraSparc T4\",\t\"niagara2\" },\n+  { \"UltraSparc T3\",\t\"niagara3\" },\n+  { \"UltraSparc T4\",\t\"niagara4\" },\n #endif\n   { NULL,\tNULL }\n   };"}, {"sha": "c4997bb29b4c4e05b013b1b125e91475a36d3ae8", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e64c239dd9a97ce13c6c69d42247d0187854f09/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e64c239dd9a97ce13c6c69d42247d0187854f09/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=3e64c239dd9a97ce13c6c69d42247d0187854f09", "patch": "@@ -35,7 +35,9 @@ along with GCC; see the file COPYING3.  If not see\n     || TARGET_CPU_DEFAULT == TARGET_CPU_ultrasparc \\\n     || TARGET_CPU_DEFAULT == TARGET_CPU_ultrasparc3 \\\n     || TARGET_CPU_DEFAULT == TARGET_CPU_niagara \\\n-    || TARGET_CPU_DEFAULT == TARGET_CPU_niagara2\n+    || TARGET_CPU_DEFAULT == TARGET_CPU_niagara2 \\\n+    || TARGET_CPU_DEFAULT == TARGET_CPU_niagara3 \\\n+    || TARGET_CPU_DEFAULT == TARGET_CPU_niagara4\n /* A 64 bit v9 compiler with stack-bias,\n    in a Medium/Low code model environment.  */\n "}, {"sha": "9d899f288d9e7ef724fc9f00d6968249bd5d103d", "filename": "gcc/config/sparc/niagara2.md", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e64c239dd9a97ce13c6c69d42247d0187854f09/gcc%2Fconfig%2Fsparc%2Fniagara2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e64c239dd9a97ce13c6c69d42247d0187854f09/gcc%2Fconfig%2Fsparc%2Fniagara2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fniagara2.md?ref=3e64c239dd9a97ce13c6c69d42247d0187854f09", "patch": "@@ -1,5 +1,5 @@\n-;; Scheduling description for Niagara-2.\n-;;   Copyright (C) 2007 Free Software Foundation, Inc.\n+;; Scheduling description for Niagara-2 and Niagara-3.\n+;;   Copyright (C) 2007, 2011 Free Software Foundation, Inc.\n ;;\n ;; This file is part of GCC.\n ;;\n@@ -17,74 +17,74 @@\n ;; along with GCC; see the file COPYING3.  If not see\n ;; <http://www.gnu.org/licenses/>. \n \n-;; Niagara-2 is a single-issue processor.\n+;; Niagara-2 and Niagara-3 are single-issue processors.\n \n (define_automaton \"niagara2_0\")\n \n (define_cpu_unit \"niag2_pipe\" \"niagara2_0\")\n \n (define_insn_reservation \"niag2_25cycle\" 25\n-  (and (eq_attr \"cpu\" \"niagara2\")\n+  (and (eq_attr \"cpu\" \"niagara2,niagara3\")\n     (eq_attr \"type\" \"flushw\"))\n   \"niag2_pipe*25\")\n \n (define_insn_reservation \"niag2_5cycle\" 5\n-  (and (eq_attr \"cpu\" \"niagara2\")\n+  (and (eq_attr \"cpu\" \"niagara2,niagara3\")\n     (eq_attr \"type\" \"multi,flushw,iflush,trap\"))\n   \"niag2_pipe*5\")\n \n (define_insn_reservation \"niag2_6cycle\" 4\n-  (and (eq_attr \"cpu\" \"niagara2\")\n+  (and (eq_attr \"cpu\" \"niagara2,niagara3\")\n     (eq_attr \"type\" \"savew\"))\n   \"niag2_pipe*4\")\n \n /* Most basic operations are single-cycle. */\n (define_insn_reservation \"niag2_ialu\" 1\n- (and (eq_attr \"cpu\" \"niagara2\")\n+ (and (eq_attr \"cpu\" \"niagara2,niagara3\")\n    (eq_attr \"type\" \"ialu,shift,compare,cmove\"))\n  \"niag2_pipe\")\n \n (define_insn_reservation \"niag2_imul\" 5\n- (and (eq_attr \"cpu\" \"niagara2\")\n+ (and (eq_attr \"cpu\" \"niagara2,niagara3\")\n    (eq_attr \"type\" \"imul\"))\n  \"niag2_pipe*5\")\n \n (define_insn_reservation \"niag2_idiv\" 31\n- (and (eq_attr \"cpu\" \"niagara2\")\n+ (and (eq_attr \"cpu\" \"niagara2,niagara3\")\n    (eq_attr \"type\" \"idiv\"))\n  \"niag2_pipe*31\")\n \n (define_insn_reservation \"niag2_branch\" 5\n-  (and (eq_attr \"cpu\" \"niagara2\")\n+  (and (eq_attr \"cpu\" \"niagara2,niagara3\")\n     (eq_attr \"type\" \"call,sibcall,call_no_delay_slot,uncond_branch,branch\"))\n   \"niag2_pipe*5\")\n \n (define_insn_reservation \"niag2_3cycle_load\" 3\n-  (and (eq_attr \"cpu\" \"niagara2\")\n+  (and (eq_attr \"cpu\" \"niagara2,niagara3\")\n     (eq_attr \"type\" \"load,fpload\"))\n   \"niag2_pipe*3\")\n \n (define_insn_reservation \"niag2_1cycle_store\" 1\n-  (and (eq_attr \"cpu\" \"niagara2\")\n+  (and (eq_attr \"cpu\" \"niagara2,niagara3\")\n     (eq_attr \"type\" \"store,fpstore\"))\n   \"niag2_pipe\")\n \n (define_insn_reservation \"niag2_fp\" 3\n-  (and (eq_attr \"cpu\" \"niagara2\")\n+  (and (eq_attr \"cpu\" \"niagara2,niagara3\")\n     (eq_attr \"type\" \"fpmove,fpcmove,fpcrmove,fpcmp,fpmul\"))\n   \"niag2_pipe*3\")\n \n (define_insn_reservation \"niag2_fdivs\" 19\n-  (and (eq_attr \"cpu\" \"niagara2\")\n+  (and (eq_attr \"cpu\" \"niagara2,niagara3\")\n     (eq_attr \"type\" \"fpdivs\"))\n   \"niag2_pipe*19\")\n \n (define_insn_reservation \"niag2_fdivd\" 33\n-  (and (eq_attr \"cpu\" \"niagara2\")\n+  (and (eq_attr \"cpu\" \"niagara2,niagara3\")\n     (eq_attr \"type\" \"fpdivd\"))\n   \"niag2_pipe*33\")\n \n (define_insn_reservation \"niag2_vis\" 6\n-  (and (eq_attr \"cpu\" \"niagara2\")\n+  (and (eq_attr \"cpu\" \"niagara2,niagara3\")\n     (eq_attr \"type\" \"fga,fgm_pack,fgm_mul,fgm_cmp,fgm_pdist\"))\n   \"niag2_pipe*6\")"}, {"sha": "bd58c9f8c7b8b14def2762079738bd34811ba059", "filename": "gcc/config/sparc/sol2.h", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e64c239dd9a97ce13c6c69d42247d0187854f09/gcc%2Fconfig%2Fsparc%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e64c239dd9a97ce13c6c69d42247d0187854f09/gcc%2Fconfig%2Fsparc%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2.h?ref=3e64c239dd9a97ce13c6c69d42247d0187854f09", "patch": "@@ -121,6 +121,28 @@ along with GCC; see the file COPYING3.  If not see\n #define ASM_CPU_DEFAULT_SPEC ASM_CPU32_DEFAULT_SPEC\n #endif\n \n+#if TARGET_CPU_DEFAULT == TARGET_CPU_niagara3\n+#undef CPP_CPU64_DEFAULT_SPEC\n+#define CPP_CPU64_DEFAULT_SPEC \"\"\n+#undef ASM_CPU32_DEFAULT_SPEC\n+#define ASM_CPU32_DEFAULT_SPEC \"-xarch=v8plusb\"\n+#undef ASM_CPU64_DEFAULT_SPEC\n+#define ASM_CPU64_DEFAULT_SPEC AS_SPARC64_FLAG \"b\"\n+#undef ASM_CPU_DEFAULT_SPEC\n+#define ASM_CPU_DEFAULT_SPEC ASM_CPU32_DEFAULT_SPEC\n+#endif\n+\n+#if TARGET_CPU_DEFAULT == TARGET_CPU_niagara4\n+#undef CPP_CPU64_DEFAULT_SPEC\n+#define CPP_CPU64_DEFAULT_SPEC \"\"\n+#undef ASM_CPU32_DEFAULT_SPEC\n+#define ASM_CPU32_DEFAULT_SPEC \"-xarch=v8plusb\"\n+#undef ASM_CPU64_DEFAULT_SPEC\n+#define ASM_CPU64_DEFAULT_SPEC AS_SPARC64_FLAG \"b\"\n+#undef ASM_CPU_DEFAULT_SPEC\n+#define ASM_CPU_DEFAULT_SPEC ASM_CPU32_DEFAULT_SPEC\n+#endif\n+\n /* Both Sun as and GNU as understand -K PIC.  */\n #undef ASM_SPEC\n #define ASM_SPEC ASM_SPEC_BASE ASM_PIC_SPEC\n@@ -131,7 +153,7 @@ along with GCC; see the file COPYING3.  If not see\n %{mcpu=sparclite|mcpu-f930|mcpu=f934:-D__sparclite__} \\\n %{mcpu=v8:\" DEF_ARCH32_SPEC(\"-D__sparcv8\") \"} \\\n %{mcpu=supersparc:-D__supersparc__ \" DEF_ARCH32_SPEC(\"-D__sparcv8\") \"} \\\n-%{mcpu=v9|mcpu=ultrasparc|mcpu=ultrasparc3|mcpu=niagara|mcpu=niagara2:\" DEF_ARCH32_SPEC(\"-D__sparcv8\") \"} \\\n+%{mcpu=v9|mcpu=ultrasparc|mcpu=ultrasparc3|mcpu=niagara|mcpu=niagara2|mcpu=niagara3|mcpu=niagara4:\" DEF_ARCH32_SPEC(\"-D__sparcv8\") \"} \\\n %{!mcpu*:%(cpp_cpu_default)} \\\n \"\n \n@@ -218,7 +240,9 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n %{mcpu=ultrasparc3:\" DEF_ARCH32_SPEC(\"-xarch=v8plusb\") DEF_ARCH64_SPEC(AS_SPARC64_FLAG \"b\") \"} \\\n %{mcpu=niagara:\" DEF_ARCH32_SPEC(\"-xarch=v8plusb\") DEF_ARCH64_SPEC(AS_SPARC64_FLAG \"b\") \"} \\\n %{mcpu=niagara2:\" DEF_ARCH32_SPEC(\"-xarch=v8plusb\") DEF_ARCH64_SPEC(AS_SPARC64_FLAG \"b\") \"} \\\n-%{!mcpu=niagara2:%{!mcpu=niagara:%{!mcpu=ultrasparc3:%{!mcpu=ultrasparc:%{!mcpu=v9:%{mcpu*:\" DEF_ARCH32_SPEC(\"-xarch=v8\") DEF_ARCH64_SPEC(AS_SPARC64_FLAG) \"}}}}}} \\\n+%{mcpu=niagara3:\" DEF_ARCH32_SPEC(\"-xarch=v8plusb\") DEF_ARCH64_SPEC(AS_SPARC64_FLAG \"b\") \"} \\\n+%{mcpu=niagara4:\" DEF_ARCH32_SPEC(\"-xarch=v8plusb\") DEF_ARCH64_SPEC(AS_SPARC64_FLAG \"b\") \"} \\\n+%{!mcpu=niagara4:%{!mcpu=niagara3:%{!mcpu=niagara2:%{!mcpu=niagara:%{!mcpu=ultrasparc3:%{!mcpu=ultrasparc:%{!mcpu=v9:%{mcpu*:\" DEF_ARCH32_SPEC(\"-xarch=v8\") DEF_ARCH64_SPEC(AS_SPARC64_FLAG) \"}}}}}}}} \\\n %{!mcpu*:%(asm_cpu_default)} \\\n \"\n "}, {"sha": "266cb1403ace2cc493d3b251f6fa7ed180eb67ec", "filename": "gcc/config/sparc/sparc-opts.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e64c239dd9a97ce13c6c69d42247d0187854f09/gcc%2Fconfig%2Fsparc%2Fsparc-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e64c239dd9a97ce13c6c69d42247d0187854f09/gcc%2Fconfig%2Fsparc%2Fsparc-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-opts.h?ref=3e64c239dd9a97ce13c6c69d42247d0187854f09", "patch": "@@ -42,6 +42,8 @@ enum processor_type {\n   PROCESSOR_ULTRASPARC3,\n   PROCESSOR_NIAGARA,\n   PROCESSOR_NIAGARA2,\n+  PROCESSOR_NIAGARA3,\n+  PROCESSOR_NIAGARA4,\n   PROCESSOR_NATIVE\n };\n "}, {"sha": "cf9e19715621c1ebe5144a3c39946727d228c781", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e64c239dd9a97ce13c6c69d42247d0187854f09/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e64c239dd9a97ce13c6c69d42247d0187854f09/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=3e64c239dd9a97ce13c6c69d42247d0187854f09", "patch": "@@ -709,6 +709,8 @@ sparc_option_override (void)\n     { TARGET_CPU_ultrasparc3, PROCESSOR_ULTRASPARC3 },\n     { TARGET_CPU_niagara, PROCESSOR_NIAGARA },\n     { TARGET_CPU_niagara2, PROCESSOR_NIAGARA2 },\n+    { TARGET_CPU_niagara3, PROCESSOR_NIAGARA3 },\n+    { TARGET_CPU_niagara4, PROCESSOR_NIAGARA4 },\n     { -1, PROCESSOR_V7 }\n   };\n   const struct cpu_default *def;\n@@ -749,6 +751,10 @@ sparc_option_override (void)\n       MASK_V9|MASK_DEPRECATED_V8_INSNS},\n     /* UltraSPARC T2 */\n     { MASK_ISA, MASK_V9},\n+    /* UltraSPARC T3 */\n+    { MASK_ISA, MASK_V9},\n+    /* UltraSPARC T4 */\n+    { MASK_ISA, MASK_V9},\n   };\n   const struct cpu_table *cpu;\n   unsigned int i;\n@@ -857,7 +863,9 @@ sparc_option_override (void)\n       && (sparc_cpu == PROCESSOR_ULTRASPARC\n \t  || sparc_cpu == PROCESSOR_ULTRASPARC3\n \t  || sparc_cpu == PROCESSOR_NIAGARA\n-\t  || sparc_cpu == PROCESSOR_NIAGARA2))\n+\t  || sparc_cpu == PROCESSOR_NIAGARA2\n+\t  || sparc_cpu == PROCESSOR_NIAGARA3\n+\t  || sparc_cpu == PROCESSOR_NIAGARA4))\n     align_functions = 32;\n \n   /* Validate PCC_STRUCT_RETURN.  */\n@@ -909,6 +917,8 @@ sparc_option_override (void)\n       sparc_costs = &niagara_costs;\n       break;\n     case PROCESSOR_NIAGARA2:\n+    case PROCESSOR_NIAGARA3:\n+    case PROCESSOR_NIAGARA4:\n       sparc_costs = &niagara2_costs;\n       break;\n     case PROCESSOR_NATIVE:\n@@ -923,7 +933,9 @@ sparc_option_override (void)\n   maybe_set_param_value (PARAM_SIMULTANEOUS_PREFETCHES,\n \t\t\t ((sparc_cpu == PROCESSOR_ULTRASPARC\n \t\t\t   || sparc_cpu == PROCESSOR_NIAGARA\n-\t\t\t   || sparc_cpu == PROCESSOR_NIAGARA2)\n+\t\t\t   || sparc_cpu == PROCESSOR_NIAGARA2\n+\t\t\t   || sparc_cpu == PROCESSOR_NIAGARA3\n+\t\t\t   || sparc_cpu == PROCESSOR_NIAGARA4)\n \t\t\t  ? 2\n \t\t\t  : (sparc_cpu == PROCESSOR_ULTRASPARC3\n \t\t\t     ? 8 : 3)),\n@@ -933,7 +945,9 @@ sparc_option_override (void)\n \t\t\t ((sparc_cpu == PROCESSOR_ULTRASPARC\n \t\t\t   || sparc_cpu == PROCESSOR_ULTRASPARC3\n \t\t\t   || sparc_cpu == PROCESSOR_NIAGARA\n-\t\t\t   || sparc_cpu == PROCESSOR_NIAGARA2)\n+\t\t\t   || sparc_cpu == PROCESSOR_NIAGARA2\n+\t\t\t   || sparc_cpu == PROCESSOR_NIAGARA3\n+\t\t\t   || sparc_cpu == PROCESSOR_NIAGARA4)\n \t\t\t  ? 64 : 32),\n \t\t\t global_options.x_param_values,\n \t\t\t global_options_set.x_param_values);\n@@ -8342,7 +8356,9 @@ sparc32_initialize_trampoline (rtx m_tramp, rtx fnaddr, rtx cxt)\n   if (sparc_cpu != PROCESSOR_ULTRASPARC\n       && sparc_cpu != PROCESSOR_ULTRASPARC3\n       && sparc_cpu != PROCESSOR_NIAGARA\n-      && sparc_cpu != PROCESSOR_NIAGARA2)\n+      && sparc_cpu != PROCESSOR_NIAGARA2\n+      && sparc_cpu != PROCESSOR_NIAGARA3\n+      && sparc_cpu != PROCESSOR_NIAGARA4)\n     emit_insn (gen_flush (validize_mem (adjust_address (m_tramp, SImode, 8))));\n \n   /* Call __enable_execute_stack after writing onto the stack to make sure\n@@ -8385,7 +8401,9 @@ sparc64_initialize_trampoline (rtx m_tramp, rtx fnaddr, rtx cxt)\n   if (sparc_cpu != PROCESSOR_ULTRASPARC\n       && sparc_cpu != PROCESSOR_ULTRASPARC3\n       && sparc_cpu != PROCESSOR_NIAGARA\n-      && sparc_cpu != PROCESSOR_NIAGARA2)\n+      && sparc_cpu != PROCESSOR_NIAGARA2\n+      && sparc_cpu != PROCESSOR_NIAGARA3\n+      && sparc_cpu != PROCESSOR_NIAGARA4)\n     emit_insn (gen_flushdi (validize_mem (adjust_address (m_tramp, DImode, 8))));\n \n   /* Call __enable_execute_stack after writing onto the stack to make sure\n@@ -8578,7 +8596,9 @@ static int\n sparc_use_sched_lookahead (void)\n {\n   if (sparc_cpu == PROCESSOR_NIAGARA\n-      || sparc_cpu == PROCESSOR_NIAGARA2)\n+      || sparc_cpu == PROCESSOR_NIAGARA2\n+      || sparc_cpu == PROCESSOR_NIAGARA3\n+      || sparc_cpu == PROCESSOR_NIAGARA4)\n     return 0;\n   if (sparc_cpu == PROCESSOR_ULTRASPARC\n       || sparc_cpu == PROCESSOR_ULTRASPARC3)\n@@ -8597,6 +8617,8 @@ sparc_issue_rate (void)\n     {\n     case PROCESSOR_NIAGARA:\n     case PROCESSOR_NIAGARA2:\n+    case PROCESSOR_NIAGARA3:\n+    case PROCESSOR_NIAGARA4:\n     default:\n       return 1;\n     case PROCESSOR_V9:\n@@ -9635,7 +9657,9 @@ sparc_register_move_cost (enum machine_mode mode ATTRIBUTE_UNUSED,\n       if (sparc_cpu == PROCESSOR_ULTRASPARC\n \t  || sparc_cpu == PROCESSOR_ULTRASPARC3\n \t  || sparc_cpu == PROCESSOR_NIAGARA\n-\t  || sparc_cpu == PROCESSOR_NIAGARA2)\n+\t  || sparc_cpu == PROCESSOR_NIAGARA2\n+\t  || sparc_cpu == PROCESSOR_NIAGARA3\n+\t  || sparc_cpu == PROCESSOR_NIAGARA4)\n \treturn 12;\n \n       return 6;"}, {"sha": "afdca1e3aabd762f94a65198e37c0613784dd6a0", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e64c239dd9a97ce13c6c69d42247d0187854f09/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e64c239dd9a97ce13c6c69d42247d0187854f09/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=3e64c239dd9a97ce13c6c69d42247d0187854f09", "patch": "@@ -208,8 +208,8 @@ extern enum cmodel sparc_cmodel;\n    which requires the following macro to be true if enabled.  Prior to V9,\n    there are no instructions to even talk about memory synchronization.\n    Note that the UltraSPARC III processors don't implement RMO, unlike the\n-   UltraSPARC II processors.  Niagara and Niagara-2 do not implement RMO\n-   either.\n+   UltraSPARC II processors.  Niagara, Niagara-2, and Niagara-3 do not\n+   implement RMO either.\n \n    Default to false; for example, Solaris never enables RMO, only ever uses\n    total memory ordering (TMO).  */\n@@ -247,12 +247,16 @@ extern enum cmodel sparc_cmodel;\n #define TARGET_CPU_ultrasparc3\t10\n #define TARGET_CPU_niagara\t11\n #define TARGET_CPU_niagara2\t12\n+#define TARGET_CPU_niagara3\t13\n+#define TARGET_CPU_niagara4\t14\n \n #if TARGET_CPU_DEFAULT == TARGET_CPU_v9 \\\n  || TARGET_CPU_DEFAULT == TARGET_CPU_ultrasparc \\\n  || TARGET_CPU_DEFAULT == TARGET_CPU_ultrasparc3 \\\n  || TARGET_CPU_DEFAULT == TARGET_CPU_niagara \\\n- || TARGET_CPU_DEFAULT == TARGET_CPU_niagara2\n+ || TARGET_CPU_DEFAULT == TARGET_CPU_niagara2 \\\n+ || TARGET_CPU_DEFAULT == TARGET_CPU_niagara3 \\\n+ || TARGET_CPU_DEFAULT == TARGET_CPU_niagara4\n \n #define CPP_CPU32_DEFAULT_SPEC \"\"\n #define ASM_CPU32_DEFAULT_SPEC \"\"\n@@ -281,6 +285,14 @@ extern enum cmodel sparc_cmodel;\n #define CPP_CPU64_DEFAULT_SPEC \"-D__sparc_v9__\"\n #define ASM_CPU64_DEFAULT_SPEC \"-Av9b\"\n #endif\n+#if TARGET_CPU_DEFAULT == TARGET_CPU_niagara3\n+#define CPP_CPU64_DEFAULT_SPEC \"-D__sparc_v9__\"\n+#define ASM_CPU64_DEFAULT_SPEC \"-Av9b\"\n+#endif\n+#if TARGET_CPU_DEFAULT == TARGET_CPU_niagara4\n+#define CPP_CPU64_DEFAULT_SPEC \"-D__sparc_v9__\"\n+#define ASM_CPU64_DEFAULT_SPEC \"-Av9b\"\n+#endif\n \n #else\n \n@@ -373,6 +385,8 @@ extern enum cmodel sparc_cmodel;\n %{mcpu=ultrasparc3:-D__sparc_v9__} \\\n %{mcpu=niagara:-D__sparc_v9__} \\\n %{mcpu=niagara2:-D__sparc_v9__} \\\n+%{mcpu=niagara3:-D__sparc_v9__} \\\n+%{mcpu=niagara4:-D__sparc_v9__} \\\n %{!mcpu*:%(cpp_cpu_default)} \\\n \"\n #define CPP_ARCH32_SPEC \"\"\n@@ -417,6 +431,8 @@ extern enum cmodel sparc_cmodel;\n %{mcpu=ultrasparc3:%{!mv8plus:-Av9b}} \\\n %{mcpu=niagara:%{!mv8plus:-Av9b}} \\\n %{mcpu=niagara2:%{!mv8plus:-Av9b}} \\\n+%{mcpu=niagara3:%{!mv8plus:-Av9b}} \\\n+%{mcpu=niagara4:%{!mv8plus:-Av9b}} \\\n %{!mcpu*:%(asm_cpu_default)} \\\n \"\n \n@@ -1658,8 +1674,8 @@ do {\t\t\t\t\t\t\t\t\t   \\\n    On Niagara, normal branches insert 3 bubbles into the pipe\n    and annulled branches insert 4 bubbles.\n \n-   On Niagara-2, a not-taken branch costs 1 cycle whereas a taken\n-   branch costs 6 cycles.  */\n+   On Niagara-2 and Niagara-3, a not-taken branch costs 1 cycle whereas\n+   a taken branch costs 6 cycles.  */\n \n #define BRANCH_COST(speed_p, predictable_p) \\\n \t((sparc_cpu == PROCESSOR_V9 \\\n@@ -1669,7 +1685,8 @@ do {\t\t\t\t\t\t\t\t\t   \\\n             ? 9 \\\n \t : (sparc_cpu == PROCESSOR_NIAGARA \\\n \t    ? 4 \\\n-\t : (sparc_cpu == PROCESSOR_NIAGARA2 \\\n+\t : ((sparc_cpu == PROCESSOR_NIAGARA2 \\\n+\t     || sparc_cpu == PROCESSOR_NIAGARA3) \\\n \t    ? 5 \\\n \t : 3))))\n \f"}, {"sha": "721db934a363e3d98116a3fe788d5b094791516d", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e64c239dd9a97ce13c6c69d42247d0187854f09/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e64c239dd9a97ce13c6c69d42247d0187854f09/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=3e64c239dd9a97ce13c6c69d42247d0187854f09", "patch": "@@ -115,7 +115,9 @@\n    ultrasparc,\n    ultrasparc3,\n    niagara,\n-   niagara2\"\n+   niagara2,\n+   niagara3,\n+   niagara4\"\n   (const (symbol_ref \"sparc_cpu_attr\")))\n \n ;; Attribute for the instruction set."}, {"sha": "ce6fa94fde83b8af1e1380b488a56396df6c6bfc", "filename": "gcc/config/sparc/sparc.opt", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e64c239dd9a97ce13c6c69d42247d0187854f09/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e64c239dd9a97ce13c6c69d42247d0187854f09/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.opt?ref=3e64c239dd9a97ce13c6c69d42247d0187854f09", "patch": "@@ -154,6 +154,12 @@ Enum(sparc_processor_type) String(niagara) Value(PROCESSOR_NIAGARA)\n EnumValue\n Enum(sparc_processor_type) String(niagara2) Value(PROCESSOR_NIAGARA2)\n \n+EnumValue\n+Enum(sparc_processor_type) String(niagara3) Value(PROCESSOR_NIAGARA3)\n+\n+EnumValue\n+Enum(sparc_processor_type) String(niagara4) Value(PROCESSOR_NIAGARA4)\n+\n mcmodel=\n Target RejectNegative Joined Var(sparc_cmodel_string)\n Use given SPARC-V9 code model"}, {"sha": "c5b19ebaf5c9a9663229f157354b1685816f1ec6", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e64c239dd9a97ce13c6c69d42247d0187854f09/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e64c239dd9a97ce13c6c69d42247d0187854f09/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3e64c239dd9a97ce13c6c69d42247d0187854f09", "patch": "@@ -17283,7 +17283,8 @@ for machine type @var{cpu_type}.  Supported values for @var{cpu_type} are\n @samp{v7}, @samp{cypress}, @samp{v8}, @samp{supersparc}, @samp{hypersparc},\n @samp{leon}, @samp{sparclite}, @samp{f930}, @samp{f934}, @samp{sparclite86x},\n @samp{sparclet}, @samp{tsc701}, @samp{v9}, @samp{ultrasparc},\n-@samp{ultrasparc3}, @samp{niagara} and @samp{niagara2}.\n+@samp{ultrasparc3}, @samp{niagara}, @samp{niagara2}, @samp{niagara3},\n+and @samp{niagara4}.\n \n Native Solaris and Linux toolchains also support the value @samp{native},\n which selects the best architecture option for the host processor.\n@@ -17302,7 +17303,7 @@ implementations.\n     v8:             supersparc, hypersparc, leon\n     sparclite:      f930, f934, sparclite86x\n     sparclet:       tsc701\n-    v9:             ultrasparc, ultrasparc3, niagara, niagara2\n+    v9:             ultrasparc, ultrasparc3, niagara, niagara2, niagara3, niagara4\n @end smallexample\n \n By default (unless configured otherwise), GCC generates code for the V7\n@@ -17341,7 +17342,10 @@ optimizes it for the Sun UltraSPARC I/II/IIi chips.  With\n Sun UltraSPARC III/III+/IIIi/IIIi+/IV/IV+ chips.  With\n @option{-mcpu=niagara}, the compiler additionally optimizes it for\n Sun UltraSPARC T1 chips.  With @option{-mcpu=niagara2}, the compiler\n-additionally optimizes it for Sun UltraSPARC T2 chips.\n+additionally optimizes it for Sun UltraSPARC T2 chips. With\n+@option{-mcpu=niagara3}, the compiler additionally optimizes it for Sun\n+UltraSPARC T3 chips.  With @option{-mcpu=niagara4}, the compiler\n+additionally optimizes it for Sun UltraSPARC T4 chips.\n \n @item -mtune=@var{cpu_type}\n @opindex mtune\n@@ -17354,8 +17358,8 @@ The same values for @option{-mcpu=@var{cpu_type}} can be used for\n that select a particular CPU implementation.  Those are @samp{cypress},\n @samp{supersparc}, @samp{hypersparc}, @samp{leon}, @samp{f930}, @samp{f934},\n @samp{sparclite86x}, @samp{tsc701}, @samp{ultrasparc}, @samp{ultrasparc3},\n-@samp{niagara}, and @samp{niagara2}.  With native Solaris and Linux\n-toolchains, @samp{native} can also be used.\n+@samp{niagara}, @samp{niagara2}, @samp{niagara3} and @samp{niagara4}.  With\n+native Solaris and Linux toolchains, @samp{native} can also be used.\n \n @item -mv8plus\n @itemx -mno-v8plus"}]}