{"sha": "00de328a7ac2c812c0ea4f12c44fbd8d71028b91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBkZTMyOGE3YWMyYzgxMmMwZWE0ZjEyYzQ0ZmJkOGQ3MTAyOGI5MQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2014-09-24T19:50:24Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2014-09-24T19:50:24Z"}, "message": "cgraph.h, [...]: Rename all instances of DECL_ABSTRACT to DECL_ABSTRACT_P.\n\n    \t* cgraph.h, dbxout.c, dwarfout2.c, gimple-fold.c,\n    \tlto-streamer-out.c, print-tree.c, symtab.c, tree-inline.c,\n    \ttree-streamer-in.c, tree-streamer-out.c, tree.c, tree.h,\n    \tvarpool.c: Rename all instances of DECL_ABSTRACT to\n    \tDECL_ABSTRACT_P.\n\n    cp/\n    \t* class.c, decl.c, optimize.c: Rename all instances of\n    \tDECL_ABSTRACT to DECL_ABSTRACT_P.\n\n    lto/\n    \t* lto-symtab.c, lto.c: Rename all instances of DECL_ABSTRACT to\n    \tDECL_ABSTRACT_P.\n\nFrom-SVN: r215567", "tree": {"sha": "3229e32dcbb119c7b007bb52db4079090ff3386b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3229e32dcbb119c7b007bb52db4079090ff3386b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00de328a7ac2c812c0ea4f12c44fbd8d71028b91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00de328a7ac2c812c0ea4f12c44fbd8d71028b91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00de328a7ac2c812c0ea4f12c44fbd8d71028b91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7606cbaeff94acc0b40d50241c6f090d5d3f8cc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7606cbaeff94acc0b40d50241c6f090d5d3f8cc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7606cbaeff94acc0b40d50241c6f090d5d3f8cc9"}], "stats": {"total": 100, "additions": 59, "deletions": 41}, "files": [{"sha": "42b9820baa9ca216d03e4ffb157bfd4613c3f978", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00de328a7ac2c812c0ea4f12c44fbd8d71028b91", "patch": "@@ -1,3 +1,11 @@\n+2014-09-24  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* cgraph.h, dbxout.c, dwarfout2.c, gimple-fold.c,\n+\tlto-streamer-out.c, print-tree.c, symtab.c, tree-inline.c,\n+\ttree-streamer-in.c, tree-streamer-out.c, tree.c, tree.h,\n+\tvarpool.c: Rename all instances of DECL_ABSTRACT to\n+\tDECL_ABSTRACT_P.\n+\n 2014-09-24  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (insn_is_swappable_p): Don't provide"}, {"sha": "7e90bf07521deec8ba79fa3fcec8f4fb239b0f89", "filename": "gcc/cgraph.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=00de328a7ac2c812c0ea4f12c44fbd8d71028b91", "patch": "@@ -1975,7 +1975,7 @@ symtab_node::real_symbol_p (void)\n {\n   cgraph_node *cnode;\n \n-  if (DECL_ABSTRACT (decl))\n+  if (DECL_ABSTRACT_P (decl))\n     return false;\n   if (!is_a <cgraph_node *> (this))\n     return true;"}, {"sha": "ee5169f6c7cd634ccb1257887d36712c9f342767", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=00de328a7ac2c812c0ea4f12c44fbd8d71028b91", "patch": "@@ -1,3 +1,8 @@\n+2014-09-24  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* class.c, decl.c, optimize.c: Rename all instances of\n+\tDECL_ABSTRACT to DECL_ABSTRACT_P.\n+\n 2014-09-24  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/61405"}, {"sha": "c4ac61bd0a04f79645fa9e899ba8461807569f04", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=00de328a7ac2c812c0ea4f12c44fbd8d71028b91", "patch": "@@ -4581,7 +4581,7 @@ clone_function_decl (tree fn, int update_method_vec_p)\n     }\n \n   /* Note that this is an abstract function that is never emitted.  */\n-  DECL_ABSTRACT (fn) = 1;\n+  DECL_ABSTRACT_P (fn) = true;\n }\n \n /* DECL is an in charge constructor, which is being defined. This will"}, {"sha": "d26a432bf6e1f41e7ddb1ee65ec86e771268e92d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=00de328a7ac2c812c0ea4f12c44fbd8d71028b91", "patch": "@@ -2264,7 +2264,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t}\n \n       /* Preserve abstractness on cloned [cd]tors.  */\n-      DECL_ABSTRACT (newdecl) = DECL_ABSTRACT (olddecl);\n+      DECL_ABSTRACT_P (newdecl) = DECL_ABSTRACT_P (olddecl);\n \n       /* Update newdecl's parms to point at olddecl.  */\n       for (parm = DECL_ARGUMENTS (newdecl); parm;\n@@ -10280,7 +10280,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t       clones.  The decloning optimization (for space) may\n                revert this subsequently if it determines that\n                the clones should share a common implementation.  */\n-\t    DECL_ABSTRACT (decl) = 1;\n+\t    DECL_ABSTRACT_P (decl) = true;\n \t}\n       else if (current_class_type\n \t       && constructor_name_p (unqualified_id, current_class_type))"}, {"sha": "f37515ec257f91e39e52b86085285a66362b1bf0", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=00de328a7ac2c812c0ea4f12c44fbd8d71028b91", "patch": "@@ -270,7 +270,7 @@ maybe_thunk_body (tree fn, bool force)\n      (for non-vague linkage ctors) or the COMDAT group (otherwise).  */\n \n   populate_clone_array (fn, fns);\n-  DECL_ABSTRACT (fn) = false;\n+  DECL_ABSTRACT_P (fn) = false;\n   if (!DECL_WEAK (fn))\n     {\n       TREE_PUBLIC (fn) = false;"}, {"sha": "91cedf7e9f294a48d464147dec30285663ce059e", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=00de328a7ac2c812c0ea4f12c44fbd8d71028b91", "patch": "@@ -1618,7 +1618,7 @@ dbxout_type_methods (tree type)\n \n \t  /* Also ignore abstract methods; those are only interesting to\n \t     the DWARF backends.  */\n-\t  if (DECL_IGNORED_P (fndecl) || DECL_ABSTRACT (fndecl))\n+\t  if (DECL_IGNORED_P (fndecl) || DECL_ABSTRACT_P (fndecl))\n \t    continue;\n \n \t  /* Redundantly output the plain name, since that's what gdb"}, {"sha": "1ae8dc32c49b84b501365cc67d436ccd8ea45a79", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=00de328a7ac2c812c0ea4f12c44fbd8d71028b91", "patch": "@@ -3678,7 +3678,7 @@ decl_ultimate_origin (const_tree decl)\n \n   /* DECL_ABSTRACT_ORIGIN can point to itself; ignore that if\n      we're trying to output the abstract instance of this function.  */\n-  if (DECL_ABSTRACT (decl) && DECL_ABSTRACT_ORIGIN (decl) == decl)\n+  if (DECL_ABSTRACT_P (decl) && DECL_ABSTRACT_ORIGIN (decl) == decl)\n     return NULL_TREE;\n \n   /* Since the DECL_ABSTRACT_ORIGIN for a DECL is supposed to be the\n@@ -17434,7 +17434,7 @@ gen_entry_point_die (tree decl, dw_die_ref context_die)\n \t\t\t  TYPE_UNQUALIFIED, context_die);\n     }\n \n-  if (DECL_ABSTRACT (decl))\n+  if (DECL_ABSTRACT_P (decl))\n     equate_decl_number_to_die (decl, decl_die);\n   else\n     add_AT_lbl_id (decl_die, DW_AT_low_pc, decl_start_label (decl));\n@@ -17616,7 +17616,7 @@ gen_formal_parameter_die (tree node, tree origin, bool emit_name_p,\n       else if (emit_name_p)\n \tadd_name_and_src_coords_attributes (parm_die, node);\n       if (origin == NULL\n-\t  || (! DECL_ABSTRACT (node_or_origin)\n+\t  || (! DECL_ABSTRACT_P (node_or_origin)\n \t      && variably_modified_type_p (TREE_TYPE (node_or_origin),\n \t\t\t\t\t   decl_function_context\n \t\t\t\t\t\t\t    (node_or_origin))))\n@@ -17635,7 +17635,7 @@ gen_formal_parameter_die (tree node, tree origin, bool emit_name_p,\n \n       if (node && node != origin)\n         equate_decl_number_to_die (node, parm_die);\n-      if (! DECL_ABSTRACT (node_or_origin))\n+      if (! DECL_ABSTRACT_P (node_or_origin))\n \tadd_location_or_const_value_attribute (parm_die, node_or_origin,\n \t\t\t\t\t       node == NULL, DW_AT_location);\n \n@@ -17920,21 +17920,21 @@ set_block_abstract_flags (tree stmt, int setting)\n }\n \n /* Given a pointer to some ..._DECL node, and a boolean value to set the\n-   \"abstract\" flags to, set that value into the DECL_ABSTRACT flag for the\n+   \"abstract\" flags to, set that value into the DECL_ABSTRACT_P flag for the\n    given decl, and (in the case where the decl is a FUNCTION_DECL) also\n    set the abstract flags for all of the parameters, local vars, local\n    blocks and sub-blocks (recursively) to the same setting.  */\n \n static void\n set_decl_abstract_flags (tree decl, int setting)\n {\n-  DECL_ABSTRACT (decl) = setting;\n+  DECL_ABSTRACT_P (decl) = setting;\n   if (TREE_CODE (decl) == FUNCTION_DECL)\n     {\n       tree arg;\n \n       for (arg = DECL_ARGUMENTS (decl); arg; arg = DECL_CHAIN (arg))\n-\tDECL_ABSTRACT (arg) = setting;\n+\tDECL_ABSTRACT_P (arg) = setting;\n       if (DECL_INITIAL (decl) != NULL_TREE\n \t  && DECL_INITIAL (decl) != error_mark_node)\n \tset_block_abstract_flags (DECL_INITIAL (decl), setting);\n@@ -17979,7 +17979,7 @@ dwarf2out_abstract_function (tree decl)\n   tail_call_site_count = -1;\n \n   /* Be sure we've emitted the in-class declaration DIE (if any) first, so\n-     we don't get confused by DECL_ABSTRACT.  */\n+     we don't get confused by DECL_ABSTRACT_P.  */\n   if (debug_info_level > DINFO_LEVEL_TERSE)\n     {\n       context = decl_class_context (decl);\n@@ -17992,7 +17992,7 @@ dwarf2out_abstract_function (tree decl)\n   save_fn = current_function_decl;\n   current_function_decl = decl;\n \n-  was_abstract = DECL_ABSTRACT (decl);\n+  was_abstract = DECL_ABSTRACT_P (decl);\n   set_decl_abstract_flags (decl, 1);\n   dwarf2out_decl (decl);\n   if (! was_abstract)\n@@ -18128,7 +18128,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \n   premark_used_types (DECL_STRUCT_FUNCTION (decl));\n \n-  /* It is possible to have both DECL_ABSTRACT and DECLARATION be true if we\n+  /* It is possible to have both DECL_ABSTRACT_P and DECLARATION be true if we\n      started to generate the abstract instance of an inline, decided to output\n      its containing class, and proceeded to emit the declaration of the inline\n      from the member list for the class.  If so, DECLARATION takes priority;\n@@ -18273,7 +18273,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t  equate_decl_number_to_die (decl, subr_die);\n \t}\n     }\n-  else if (DECL_ABSTRACT (decl))\n+  else if (DECL_ABSTRACT_P (decl))\n     {\n       if (DECL_DECLARED_INLINE_P (decl))\n \t{\n@@ -18907,7 +18907,7 @@ gen_variable_die (tree decl, tree origin, dw_die_ref context_die)\n      static variable, so we must test for the DW_AT_declaration flag.\n \n      ??? Loop unrolling/reorder_blocks should perhaps be rewritten to\n-     copy decls and set the DECL_ABSTRACT flag on them instead of\n+     copy decls and set the DECL_ABSTRACT_P flag on them instead of\n      sharing them.\n \n      ??? Duplicated blocks have been rewritten to use .debug_ranges.\n@@ -18942,7 +18942,7 @@ gen_variable_die (tree decl, tree origin, dw_die_ref context_die)\n \n   if ((origin == NULL && !specialization_p)\n       || (origin != NULL\n-\t  && !DECL_ABSTRACT (decl_or_origin)\n+\t  && !DECL_ABSTRACT_P (decl_or_origin)\n \t  && variably_modified_type_p (TREE_TYPE (decl_or_origin),\n \t\t\t\t       decl_function_context\n \t\t\t\t\t\t\t(decl_or_origin))))\n@@ -18971,11 +18971,11 @@ gen_variable_die (tree decl, tree origin, dw_die_ref context_die)\n   if (declaration)\n     add_AT_flag (var_die, DW_AT_declaration, 1);\n \n-  if (decl && (DECL_ABSTRACT (decl) || declaration || old_die == NULL))\n+  if (decl && (DECL_ABSTRACT_P (decl) || declaration || old_die == NULL))\n     equate_decl_number_to_die (decl, var_die);\n \n   if (! declaration\n-      && (! DECL_ABSTRACT (decl_or_origin)\n+      && (! DECL_ABSTRACT_P (decl_or_origin)\n \t  /* Local static vars are shared between all clones/inlines,\n \t     so emit DW_AT_location on the abstract DIE if DECL_RTL is\n \t     already set.  */\n@@ -19031,7 +19031,7 @@ gen_label_die (tree decl, dw_die_ref context_die)\n   else\n     add_name_and_src_coords_attributes (lbl_die, decl);\n \n-  if (DECL_ABSTRACT (decl))\n+  if (DECL_ABSTRACT_P (decl))\n     equate_decl_number_to_die (decl, lbl_die);\n   else\n     {\n@@ -19806,7 +19806,7 @@ gen_typedef_die (tree decl, dw_die_ref context_die)\n       add_accessibility_attribute (type_die, decl);\n     }\n \n-  if (DECL_ABSTRACT (decl))\n+  if (DECL_ABSTRACT_P (decl))\n     equate_decl_number_to_die (decl, type_die);\n \n   if (get_AT (type_die, DW_AT_name))\n@@ -20538,7 +20538,7 @@ gen_decl_die (tree decl, tree origin, dw_die_ref context_die)\n       /* If we're emitting an out-of-line copy of an inline function,\n \t emit info for the abstract instance and set up to refer to it.  */\n       else if (cgraph_function_possibly_inlined_p (decl)\n-\t       && ! DECL_ABSTRACT (decl)\n+\t       && ! DECL_ABSTRACT_P (decl)\n \t       && ! class_or_namespace_scope_p (context_die)\n \t       /* dwarf2out_abstract_function won't emit a die if this is just\n \t\t  a declaration.  We must avoid setting DECL_ABSTRACT_ORIGIN in\n@@ -20927,7 +20927,7 @@ dwarf2out_decl (tree decl)\n \t where the inlined function is output in a different LTRANS unit\n \t or not at all.  */\n       if (DECL_INITIAL (decl) == NULL_TREE\n-\t  && ! DECL_ABSTRACT (decl))\n+\t  && ! DECL_ABSTRACT_P (decl))\n \treturn;\n \n       /* If we're a nested function, initially use a parent of NULL; if we're"}, {"sha": "8ac22113387de9987ea7a95f44d60b5627b052db", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=00de328a7ac2c812c0ea4f12c44fbd8d71028b91", "patch": "@@ -85,7 +85,7 @@ can_refer_decl_in_current_unit_p (tree decl, tree from_decl)\n   struct cgraph_node *node;\n   symtab_node *snode;\n \n-  if (DECL_ABSTRACT (decl))\n+  if (DECL_ABSTRACT_P (decl))\n     return false;\n \n   /* We are concerned only about static/external vars and functions.  */"}, {"sha": "dad751b982544c22bc68699b56dde9eeb6632a4f", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=00de328a7ac2c812c0ea4f12c44fbd8d71028b91", "patch": "@@ -817,7 +817,7 @@ hash_tree (struct streamer_tree_cache_d *cache, hash_map<tree, hashval_t> *map,\n       hstate.add_flag (DECL_NONLOCAL (t));\n       hstate.add_flag (DECL_VIRTUAL_P (t));\n       hstate.add_flag (DECL_IGNORED_P (t));\n-      hstate.add_flag (DECL_ABSTRACT (t));\n+      hstate.add_flag (DECL_ABSTRACT_P (t));\n       hstate.add_flag (DECL_ARTIFICIAL (t));\n       hstate.add_flag (DECL_USER_ALIGN (t));\n       hstate.add_flag (DECL_PRESERVE_P (t));\n@@ -2432,7 +2432,7 @@ write_symbol (struct streamer_tree_cache_d *cache,\n      symbol table.  */\n   if (!TREE_PUBLIC (t)\n       || is_builtin_fn (t)\n-      || DECL_ABSTRACT (t)\n+      || DECL_ABSTRACT_P (t)\n       || (TREE_CODE (t) == VAR_DECL && DECL_HARD_REGISTER (t)))\n     return;\n   gcc_assert (TREE_CODE (t) != RESULT_DECL);"}, {"sha": "f1e25db96dade15bce36ae2930e30fd5a38a79bc", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=00de328a7ac2c812c0ea4f12c44fbd8d71028b91", "patch": "@@ -1,3 +1,8 @@\n+2014-09-24  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* lto-symtab.c, lto.c: Rename all instances of DECL_ABSTRACT to\n+\tDECL_ABSTRACT_P.\n+\n 2014-09-23  Andi Kleen  <ak@linux.intel.com>\n \n \t* lto-partition.c (node_cmp): Update comment."}, {"sha": "4ec1a73f2b1b29fb62b13ef08fda6439a6ca9348", "filename": "gcc/lto/lto-symtab.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Flto%2Flto-symtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Flto%2Flto-symtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-symtab.c?ref=00de328a7ac2c812c0ea4f12c44fbd8d71028b91", "patch": "@@ -653,7 +653,7 @@ lto_symtab_merge_symbols (void)\n \n \t      /* Abstract functions may have duplicated cgraph nodes attached;\n \t\t remove them.  */\n-\t      else if (cnode && DECL_ABSTRACT (cnode->decl)\n+\t      else if (cnode && DECL_ABSTRACT_P (cnode->decl)\n \t\t       && (cnode2 = cgraph_node::get (node->decl))\n \t\t       && cnode2 != cnode)\n \t\tcnode2->remove ();\n@@ -675,8 +675,8 @@ lto_symtab_prevailing_decl (tree decl)\n   if ((!TREE_PUBLIC (decl) && !DECL_EXTERNAL (decl)) || is_builtin_fn (decl))\n     return decl;\n \n-  /* DECL_ABSTRACTs are their own prevailng decl.  */\n-  if (TREE_CODE (decl) == FUNCTION_DECL && DECL_ABSTRACT (decl))\n+  /* DECL_ABSTRACT_Ps are their own prevailing decl.  */\n+  if (TREE_CODE (decl) == FUNCTION_DECL && DECL_ABSTRACT_P (decl))\n     return decl;\n \n   /* Likewise builtins are their own prevailing decl.  This preserves"}, {"sha": "6cbb178db59b1cb51dd8419634353d47cb82be0d", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=00de328a7ac2c812c0ea4f12c44fbd8d71028b91", "patch": "@@ -1048,7 +1048,7 @@ lto_register_function_decl_in_symtab (struct data_in *data_in, tree decl,\n {\n   /* If this variable has already been declared, queue the\n      declaration for merging.  */\n-  if (TREE_PUBLIC (decl) && !DECL_ABSTRACT (decl))\n+  if (TREE_PUBLIC (decl) && !DECL_ABSTRACT_P (decl))\n     register_resolution (data_in->file_data,\n \t\t\t decl, get_resolution (data_in, ix));\n }\n@@ -1249,7 +1249,7 @@ compare_tree_sccs_1 (tree t1, tree t2, tree **map)\n       compare_values (DECL_NONLOCAL);\n       compare_values (DECL_VIRTUAL_P);\n       compare_values (DECL_IGNORED_P);\n-      compare_values (DECL_ABSTRACT);\n+      compare_values (DECL_ABSTRACT_P);\n       compare_values (DECL_ARTIFICIAL);\n       compare_values (DECL_USER_ALIGN);\n       compare_values (DECL_PRESERVE_P);"}, {"sha": "9563e4dfaec7c759405d54b82122b26891a32336", "filename": "gcc/print-tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=00de328a7ac2c812c0ea4f12c44fbd8d71028b91", "patch": "@@ -362,7 +362,7 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \t    fputs (\" unsigned\", file);\n \t  if (DECL_IGNORED_P (node))\n \t    fputs (\" ignored\", file);\n-\t  if (DECL_ABSTRACT (node))\n+\t  if (DECL_ABSTRACT_P (node))\n \t    fputs (\" abstract\", file);\n \t  if (DECL_EXTERNAL (node))\n \t    fputs (\" external\", file);"}, {"sha": "f23bd83f4698b91ec799542fa4488404e4e2edba", "filename": "gcc/symtab.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=00de328a7ac2c812c0ea4f12c44fbd8d71028b91", "patch": "@@ -1766,7 +1766,7 @@ symtab_node::get_partitioning_class (void)\n      This include external delcarations.   */\n   cgraph_node *cnode = dyn_cast <cgraph_node *> (this);\n \n-  if (DECL_ABSTRACT (decl))\n+  if (DECL_ABSTRACT_P (decl))\n     return SYMBOL_EXTERNAL;\n \n   if (cnode && cnode->global.inlined_to)"}, {"sha": "458389936029b1a3ee72605d18d96cbb9734b1af", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=00de328a7ac2c812c0ea4f12c44fbd8d71028b91", "patch": "@@ -5092,7 +5092,7 @@ copy_decl_no_change (tree decl, copy_body_data *id)\n   copy = copy_node (decl);\n \n   /* The COPY is not abstract; it will be generated in DST_FN.  */\n-  DECL_ABSTRACT (copy) = 0;\n+  DECL_ABSTRACT_P (copy) = false;\n   lang_hooks.dup_lang_specific_decl (copy);\n \n   /* TREE_ADDRESSABLE isn't used to indicate that a label's address has"}, {"sha": "01a55bfdf1bfd84f41ed4dcd370ea41cfc856bb4", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=00de328a7ac2c812c0ea4f12c44fbd8d71028b91", "patch": "@@ -210,7 +210,7 @@ unpack_ts_decl_common_value_fields (struct bitpack_d *bp, tree expr)\n   DECL_NONLOCAL (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_VIRTUAL_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_IGNORED_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n-  DECL_ABSTRACT (expr) = (unsigned) bp_unpack_value (bp, 1);\n+  DECL_ABSTRACT_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_ARTIFICIAL (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_USER_ALIGN (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_PRESERVE_P (expr) = (unsigned) bp_unpack_value (bp, 1);"}, {"sha": "2124d543a4b0659d4c7d840659d1504f5a0cb838", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=00de328a7ac2c812c0ea4f12c44fbd8d71028b91", "patch": "@@ -178,7 +178,7 @@ pack_ts_decl_common_value_fields (struct bitpack_d *bp, tree expr)\n   bp_pack_value (bp, DECL_NONLOCAL (expr), 1);\n   bp_pack_value (bp, DECL_VIRTUAL_P (expr), 1);\n   bp_pack_value (bp, DECL_IGNORED_P (expr), 1);\n-  bp_pack_value (bp, DECL_ABSTRACT (expr), 1);\n+  bp_pack_value (bp, DECL_ABSTRACT_P (expr), 1);\n   bp_pack_value (bp, DECL_ARTIFICIAL (expr), 1);\n   bp_pack_value (bp, DECL_USER_ALIGN (expr), 1);\n   bp_pack_value (bp, DECL_PRESERVE_P (expr), 1);"}, {"sha": "a46210ff1b27608a43f12957814c14f6e1bc8935", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=00de328a7ac2c812c0ea4f12c44fbd8d71028b91", "patch": "@@ -5008,7 +5008,7 @@ need_assembler_name_p (tree decl)\n     return false;\n \n   /* Abstract decls do not need an assembler name.  */\n-  if (DECL_ABSTRACT (decl))\n+  if (DECL_ABSTRACT_P (decl))\n     return false;\n \n   /* For VAR_DECLs, only static, public and external symbols need an"}, {"sha": "cd3187dd05aff31a61ec92fca81841c8684bdca0", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=00de328a7ac2c812c0ea4f12c44fbd8d71028b91", "patch": "@@ -2062,7 +2062,7 @@ extern void protected_set_expr_location (tree, location_t);\n    information, we mustn't try to generate any address information for nodes\n    marked as \"abstract instances\" because we don't actually generate\n    any code or allocate any data space for such instances.  */\n-#define DECL_ABSTRACT(NODE) \\\n+#define DECL_ABSTRACT_P(NODE) \\\n   (DECL_COMMON_CHECK (NODE)->decl_common.abstract_flag)\n \n /* Language-specific decl information.  */"}, {"sha": "ebb72bd185502741caee0e0cb869aaef79b82fa9", "filename": "gcc/varpool.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Fvarpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00de328a7ac2c812c0ea4f12c44fbd8d71028b91/gcc%2Fvarpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarpool.c?ref=00de328a7ac2c812c0ea4f12c44fbd8d71028b91", "patch": "@@ -722,7 +722,7 @@ add_new_static_var (tree type)\n   TREE_STATIC (new_decl) = 1;\n   TREE_USED (new_decl) = 1;\n   DECL_CONTEXT (new_decl) = NULL_TREE;\n-  DECL_ABSTRACT (new_decl) = 0;\n+  DECL_ABSTRACT_P (new_decl) = false;\n   lang_hooks.dup_lang_specific_decl (new_decl);\n   new_node = varpool_node::get_create (new_decl);\n   varpool_node::finalize_decl (new_decl);"}]}