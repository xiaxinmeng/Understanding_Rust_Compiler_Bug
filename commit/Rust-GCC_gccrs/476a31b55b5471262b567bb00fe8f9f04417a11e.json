{"sha": "476a31b55b5471262b567bb00fe8f9f04417a11e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc2YTMxYjU1YjU0NzEyNjJiNTY3YmIwMGZlOGY5ZjA0NDE3YTExZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-12-03T13:38:20Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-12-03T13:38:20Z"}, "message": "re PR tree-optimization/88301 (Optimization regression with undefined unsigned overflow)\n\n2018-12-03  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/88301\n\t* tree-vrp.c (register_edge_assert_for_2): Handle conversions\n\tthat do not change the value by registering the same assert\n\tfor the operand.\n\n\t* gcc.dg/tree-ssa/evrp13.c: New testcase.\n\nFrom-SVN: r266739", "tree": {"sha": "2281c5a802997ea1eca1085ce6fda9c08b5a7a4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2281c5a802997ea1eca1085ce6fda9c08b5a7a4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/476a31b55b5471262b567bb00fe8f9f04417a11e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/476a31b55b5471262b567bb00fe8f9f04417a11e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/476a31b55b5471262b567bb00fe8f9f04417a11e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/476a31b55b5471262b567bb00fe8f9f04417a11e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "959ded615c23a9595c7965f9373c578d2cb4afa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/959ded615c23a9595c7965f9373c578d2cb4afa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/959ded615c23a9595c7965f9373c578d2cb4afa3"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "626e70239e3131f1d699035ac2c23ba43f965e5f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/476a31b55b5471262b567bb00fe8f9f04417a11e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/476a31b55b5471262b567bb00fe8f9f04417a11e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=476a31b55b5471262b567bb00fe8f9f04417a11e", "patch": "@@ -1,3 +1,10 @@\n+2018-12-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/88301\n+\t* tree-vrp.c (register_edge_assert_for_2): Handle conversions\n+\tthat do not change the value by registering the same assert\n+\tfor the operand.\n+\n 2018-12-03  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-loop.c (vect_transform_loop): Properly compute"}, {"sha": "f38b209ff075893fb22f0f3f3de58f7d62ba1acd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/476a31b55b5471262b567bb00fe8f9f04417a11e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/476a31b55b5471262b567bb00fe8f9f04417a11e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=476a31b55b5471262b567bb00fe8f9f04417a11e", "patch": "@@ -1,3 +1,8 @@\n+2018-12-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/88301\n+\t* gcc.dg/tree-ssa/evrp13.c: New testcase.\n+\n 2018-12-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/71109"}, {"sha": "cfa4e8256c07d8445561aff3367289bfcd31d369", "filename": "gcc/testsuite/gcc.dg/tree-ssa/evrp13.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/476a31b55b5471262b567bb00fe8f9f04417a11e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fevrp13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/476a31b55b5471262b567bb00fe8f9f04417a11e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fevrp13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fevrp13.c?ref=476a31b55b5471262b567bb00fe8f9f04417a11e", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-evrp\" } */\n+\n+#define ADD_NW(A,B) (__extension__({ __typeof(A+B) R; if(__builtin_add_overflow(A,B,&R)) __builtin_unreachable(); R ;}))\n+_Bool a_b2(unsigned A,  unsigned B) { return ADD_NW(A,B) >= B; }\n+\n+/* { dg-final { scan-tree-dump \"return 1;\" \"evrp\" } } */"}, {"sha": "b00eca87c82f018789dd28d9af5f7c34469ebf4a", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/476a31b55b5471262b567bb00fe8f9f04417a11e/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/476a31b55b5471262b567bb00fe8f9f04417a11e/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=476a31b55b5471262b567bb00fe8f9f04417a11e", "patch": "@@ -2966,6 +2966,23 @@ register_edge_assert_for_2 (tree name, edge e,\n \t    add_assert_info (asserts, name2, tmp, new_comp_code, new_val);\n \t}\n \n+      /* If we have a conversion that doesn't change the value of the source\n+         simply register the same assert for it.  */\n+      if (CONVERT_EXPR_CODE_P (rhs_code))\n+\t{\n+\t  wide_int rmin, rmax;\n+\t  tree rhs1 = gimple_assign_rhs1 (def_stmt);\n+\t  if (INTEGRAL_TYPE_P (TREE_TYPE (rhs1))\n+\t      && int_fits_type_p (val, TREE_TYPE (rhs1))\n+\t      && ((TYPE_PRECISION (TREE_TYPE (name))\n+\t\t   > TYPE_PRECISION (TREE_TYPE (rhs1)))\n+\t\t  || (get_range_info (rhs1, &rmin, &rmax) == VR_RANGE\n+\t\t      && wi::fits_to_tree_p (rmin, TREE_TYPE (name))\n+\t\t      && wi::fits_to_tree_p (rmax, TREE_TYPE (name)))))\n+\t    add_assert_info (asserts, rhs1, rhs1,\n+\t\t \t     comp_code, fold_convert (TREE_TYPE (rhs1), val));\n+\t}\n+\n       /* Add asserts for NAME cmp CST and NAME being defined as\n \t NAME = NAME2 & CST2.\n "}]}