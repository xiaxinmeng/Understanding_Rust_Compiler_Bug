{"sha": "5efc1c00c88b7758d628ce8e2d1e6d54d5996216", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVmYzFjMDBjODhiNzc1OGQ2MjhjZThlMmQxZTZkNTRkNTk5NjIxNg==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-01-11T08:55:52Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-01-11T08:55:52Z"}, "message": "[Ada] Detection of illegal constituent assignments\n\nThis patch modifies the analysis of assignment statements to detect an illegal\nattempt to alter the value of single protected type Part_Of constituent when\ninside a protected function.\n\n2018-01-11  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch5.adb (Analyze_Assignment): Assignments to variables that act\n\tas Part_Of consituents of single protected types are illegal when they\n\ttake place inside a protected function.\n\t(Diagnose_Non_Variable_Lhs): Use Within_Function to check for an\n\tenclosing function.\n\t(Is_Protected_Part_Of_Constituent): New routine.\n\t(Within_Function): New routine.\n\ngcc/testsuite/\n\n\t* gnat.dg/protected_func.adb, gnat.dg/protected_func.ads: New testcase.\n\nFrom-SVN: r256520", "tree": {"sha": "ed4741920d80ba135a51595bea4de21ce8080c44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed4741920d80ba135a51595bea4de21ce8080c44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5efc1c00c88b7758d628ce8e2d1e6d54d5996216", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5efc1c00c88b7758d628ce8e2d1e6d54d5996216", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5efc1c00c88b7758d628ce8e2d1e6d54d5996216", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5efc1c00c88b7758d628ce8e2d1e6d54d5996216/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4dfba737a48b4a3934eabb93a406facfd148afd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dfba737a48b4a3934eabb93a406facfd148afd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dfba737a48b4a3934eabb93a406facfd148afd5"}], "stats": {"total": 111, "additions": 106, "deletions": 5}, "files": [{"sha": "cd66210109ba12e8a6b485ea7c4f50a9d38dcd82", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efc1c00c88b7758d628ce8e2d1e6d54d5996216/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efc1c00c88b7758d628ce8e2d1e6d54d5996216/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5efc1c00c88b7758d628ce8e2d1e6d54d5996216", "patch": "@@ -1,3 +1,13 @@\n+2018-01-11  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Assignment): Assignments to variables that act\n+\tas Part_Of consituents of single protected types are illegal when they\n+\ttake place inside a protected function.\n+\t(Diagnose_Non_Variable_Lhs): Use Within_Function to check for an\n+\tenclosing function.\n+\t(Is_Protected_Part_Of_Constituent): New routine.\n+\t(Within_Function): New routine.\n+\n 2018-01-11  Arnaud Charlet  <charlet@adacore.com>\n \n \tBump copyright notices to 2018."}, {"sha": "b94c9e8c17ba3787e35fde57375250d53e8ce92e", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 70, "deletions": 5, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efc1c00c88b7758d628ce8e2d1e6d54d5996216/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efc1c00c88b7758d628ce8e2d1e6d54d5996216/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=5efc1c00c88b7758d628ce8e2d1e6d54d5996216", "patch": "@@ -107,6 +107,11 @@ package body Sem_Ch5 is\n       --  N is the node for the left hand side of an assignment, and it is not\n       --  a variable. This routine issues an appropriate diagnostic.\n \n+      function Is_Protected_Part_Of_Constituent\n+        (Nod : Node_Id) return Boolean;\n+      --  Determine whether arbitrary node Nod denotes a Part_Of constituent of\n+      --  a single protected type.\n+\n       procedure Kill_Lhs;\n       --  This is called to kill current value settings of a simple variable\n       --  on the left hand side. We call it if we find any error in analyzing\n@@ -141,6 +146,10 @@ package body Sem_Ch5 is\n       --  assignment statements that are really initializations. These are\n       --  marked No_Ctrl_Actions.\n \n+      function Within_Function return Boolean;\n+      --  Determine whether the current scope is a function or appears within\n+      --  one.\n+\n       -------------------------------\n       -- Diagnose_Non_Variable_Lhs --\n       -------------------------------\n@@ -170,11 +179,7 @@ package body Sem_Ch5 is\n                --  of single protected types, the private component appears\n                --  directly.\n \n-               elsif (Is_Prival (Ent)\n-                       and then\n-                         (Ekind (Current_Scope) = E_Function\n-                           or else Ekind (Enclosing_Dynamic_Scope\n-                                            (Current_Scope)) = E_Function))\n+               elsif (Is_Prival (Ent) and then Within_Function)\n                    or else\n                      (Ekind (Ent) = E_Component\n                        and then Is_Protected_Type (Scope (Ent)))\n@@ -222,6 +227,39 @@ package body Sem_Ch5 is\n          Error_Msg_N (\"left hand side of assignment must be a variable\", N);\n       end Diagnose_Non_Variable_Lhs;\n \n+      --------------------------------------\n+      -- Is_Protected_Part_Of_Constituent --\n+      --------------------------------------\n+\n+      function Is_Protected_Part_Of_Constituent\n+        (Nod : Node_Id) return Boolean\n+      is\n+         Encap_Id : Entity_Id;\n+         Var_Id   : Entity_Id;\n+\n+      begin\n+         --  Abstract states and variables may act as Part_Of constituents of\n+         --  single protected types, however only variables can be modified by\n+         --  an assignment.\n+\n+         if Is_Entity_Name (Nod) then\n+            Var_Id := Entity (Nod);\n+\n+            if Present (Var_Id) and then Ekind (Var_Id) = E_Variable then\n+               Encap_Id := Encapsulating_State (Var_Id);\n+\n+               --  To qualify, the node must denote a reference to a variable\n+               --  whose encapsulating state is a single protected object.\n+\n+               return\n+                 Present (Encap_Id)\n+                   and then Is_Single_Protected_Object (Encap_Id);\n+            end if;\n+         end if;\n+\n+         return False;\n+      end Is_Protected_Part_Of_Constituent;\n+\n       --------------\n       -- Kill_Lhs --\n       --------------\n@@ -386,6 +424,24 @@ package body Sem_Ch5 is\n          Insert_Action (N, Obj_Decl);\n       end Transform_BIP_Assignment;\n \n+      ---------------------\n+      -- Within_Function --\n+      ---------------------\n+\n+      function Within_Function return Boolean is\n+         Scop_Id : constant Entity_Id := Current_Scope;\n+\n+      begin\n+         if Ekind (Scop_Id) = E_Function then\n+            return True;\n+\n+         elsif Ekind (Enclosing_Dynamic_Scope (Scop_Id)) = E_Function then\n+            return True;\n+         end if;\n+\n+         return False;\n+      end Within_Function;\n+\n       --  Local variables\n \n       T1 : Entity_Id;\n@@ -713,6 +769,15 @@ package body Sem_Ch5 is\n            (\"target of assignment operation must not be abstract\", Lhs);\n       end if;\n \n+      --  Variables which are Part_Of constituents of single protected types\n+      --  behave in similar fashion to protected components. Such variables\n+      --  cannot be modified by protected functions.\n+\n+      if Is_Protected_Part_Of_Constituent (Lhs) and then Within_Function then\n+         Error_Msg_N\n+           (\"protected function cannot modify protected object\", Lhs);\n+      end if;\n+\n       --  Resolution may have updated the subtype, in case the left-hand side\n       --  is a private protected component. Use the correct subtype to avoid\n       --  scoping issues in the back-end."}, {"sha": "43dcbedcad3e730032f6f46f97377607f3132295", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efc1c00c88b7758d628ce8e2d1e6d54d5996216/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efc1c00c88b7758d628ce8e2d1e6d54d5996216/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5efc1c00c88b7758d628ce8e2d1e6d54d5996216", "patch": "@@ -1,3 +1,7 @@\n+2018-01-11  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* gnat.dg/protected_func.adb, gnat.dg/protected_func.ads: New testcase.\n+\n 2018-01-11  Justin Squirek  <squirek@adacore.com>\n \n \t* gnat.dg/expr_func4.adb: New testcase."}, {"sha": "f3eead4dc260f063b64d60232ccb24da12f060ba", "filename": "gcc/testsuite/gnat.dg/protected_func.adb", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efc1c00c88b7758d628ce8e2d1e6d54d5996216/gcc%2Ftestsuite%2Fgnat.dg%2Fprotected_func.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efc1c00c88b7758d628ce8e2d1e6d54d5996216/gcc%2Ftestsuite%2Fgnat.dg%2Fprotected_func.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fprotected_func.adb?ref=5efc1c00c88b7758d628ce8e2d1e6d54d5996216", "patch": "@@ -0,0 +1,13 @@\n+--  { dg-do compile }\n+\n+package body Protected_Func with SPARK_Mode is\n+   protected body Prot_Obj is\n+      function Prot_Func return Integer is\n+      begin\n+         Comp := Comp + 1;  --  { dg-error \"protected function cannot modify protected object\" }\n+         Part_Of_Constit := Part_Of_Constit + 1;  --  { dg-error \"protected function cannot modify protected object\" }\n+\n+         return Comp + Part_Of_Constit;\n+      end Prot_Func;\n+   end Prot_Obj;\n+end Protected_Func;"}, {"sha": "b9d519418cbcfff1c239f5f10aeefd2b20a1214f", "filename": "gcc/testsuite/gnat.dg/protected_func.ads", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efc1c00c88b7758d628ce8e2d1e6d54d5996216/gcc%2Ftestsuite%2Fgnat.dg%2Fprotected_func.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efc1c00c88b7758d628ce8e2d1e6d54d5996216/gcc%2Ftestsuite%2Fgnat.dg%2Fprotected_func.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fprotected_func.ads?ref=5efc1c00c88b7758d628ce8e2d1e6d54d5996216", "patch": "@@ -0,0 +1,9 @@\n+package Protected_Func with SPARK_Mode is\n+   protected Prot_Obj is\n+      function Prot_Func return Integer;\n+   private\n+      Comp : Integer := 0;\n+   end Prot_Obj;\n+\n+   Part_Of_Constit : Integer := 0 with Part_Of => Prot_Obj;\n+end Protected_Func;"}]}