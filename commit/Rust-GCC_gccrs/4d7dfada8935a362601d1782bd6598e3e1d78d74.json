{"sha": "4d7dfada8935a362601d1782bd6598e3e1d78d74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ3ZGZhZGE4OTM1YTM2MjYwMWQxNzgyYmQ2NTk4ZTNlMWQ3OGQ3NA==", "commit": {"author": {"name": "Andrew Burgess", "email": "andrew.burgess@embecosm.com", "date": "2019-03-18T10:42:53Z"}, "committer": {"name": "Andrew Burgess", "email": "aburgess@gcc.gnu.org", "date": "2019-03-18T10:42:53Z"}, "message": "gcc/riscv: Correctly ignore empty C++ structs when flattening for ABI\n\nThis fixes PR target/89627.\n\nThe RISC-V ABI document[1] says:\n\n   For the purposes of this section, \"struct\" refers to a C struct\n   with its hierarchy flattened, including any array fields. That is,\n   struct { struct { float f[1]; } g[2]; } and struct { float f; float\n   g; } are treated the same. Fields containing empty structs or\n   unions are ignored while flattening, even in C++, unless they have\n   nontrivial copy constructors or destructors.\n\nHowever, this flattening only applies when one of the fields of the\nflattened structure can be placed into a floating point register,\notherwise no flattening occurs.\n\nCurrently GCC fails to correctly consider that empty C++ structures\nhave a non-zero size when constructing the arguments from a flattened\nstructure, and as a result, trying to pass a C++ structure like this:\n\n  struct sf { struct {} e; float f; };\n\nDoesn't work correctly, GCC fails to take the offset of 'f' within\n'sf' into account and will actually pass the space backing 'e' as the\ncontents of 'f'.\n\nThis patch fixes this so that 'f' will be passed correctly.  A couple\nof new tests are added to cover this functionality.\n\n[1] https://github.com/riscv/riscv-elf-psabi-doc/blob/master/riscv-elf.md\n\ngcc/ChangeLog:\n\n\tPR target/89627\n\t* config/riscv/riscv.c (riscv_pass_fpr_single): Add offset\n\tparameter, and make use of it.\n\t(riscv_get_arg_info): Pass offset to riscv_pass_fpr_single.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/89627\n\t* g++.target/riscv/call-with-empty-struct-float.C: New file.\n\t* g++.target/riscv/call-with-empty-struct-int.C: New file.\n\t* g++.target/riscv/call-with-empty-struct.H: New file.\n\t* g++.target/riscv/riscv.exp: New file.\n\nFrom-SVN: r269760", "tree": {"sha": "efcd19f09fda1f82385ba0d28684f52175df14b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efcd19f09fda1f82385ba0d28684f52175df14b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d7dfada8935a362601d1782bd6598e3e1d78d74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d7dfada8935a362601d1782bd6598e3e1d78d74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d7dfada8935a362601d1782bd6598e3e1d78d74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d7dfada8935a362601d1782bd6598e3e1d78d74/comments", "author": {"login": "T-J-Teru", "id": 475372, "node_id": "MDQ6VXNlcjQ3NTM3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/T-J-Teru", "html_url": "https://github.com/T-J-Teru", "followers_url": "https://api.github.com/users/T-J-Teru/followers", "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}", "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}", "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions", "organizations_url": "https://api.github.com/users/T-J-Teru/orgs", "repos_url": "https://api.github.com/users/T-J-Teru/repos", "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}", "received_events_url": "https://api.github.com/users/T-J-Teru/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e6da0bf1f15cdb0d641b77af75b7cb511ef9b553", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6da0bf1f15cdb0d641b77af75b7cb511ef9b553", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6da0bf1f15cdb0d641b77af75b7cb511ef9b553"}], "stats": {"total": 88, "additions": 85, "deletions": 3}, "files": [{"sha": "481c903424283dcc09e792f640c691917918bcd0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7dfada8935a362601d1782bd6598e3e1d78d74/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7dfada8935a362601d1782bd6598e3e1d78d74/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d7dfada8935a362601d1782bd6598e3e1d78d74", "patch": "@@ -1,3 +1,10 @@\n+2019-03-18  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\tPR target/89627\n+\t* config/riscv/riscv.c (riscv_pass_fpr_single): Add offset\n+\tparameter, and make use of it.\n+\t(riscv_get_arg_info): Pass offset to riscv_pass_fpr_single.\n+\n 2019-03-18  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc.opt (mcode-density-frame): Get the inital value"}, {"sha": "8e78ab763754845883ed0b39787279a50b6a4e56", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7dfada8935a362601d1782bd6598e3e1d78d74/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7dfada8935a362601d1782bd6598e3e1d78d74/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=4d7dfada8935a362601d1782bd6598e3e1d78d74", "patch": "@@ -2449,13 +2449,14 @@ riscv_pass_aggregate_in_fpr_and_gpr_p (const_tree type,\n \n static rtx\n riscv_pass_fpr_single (machine_mode type_mode, unsigned regno,\n-\t\t       machine_mode value_mode)\n+\t\t       machine_mode value_mode,\n+\t\t       HOST_WIDE_INT offset)\n {\n   rtx x = gen_rtx_REG (value_mode, regno);\n \n   if (type_mode != value_mode)\n     {\n-      x = gen_rtx_EXPR_LIST (VOIDmode, x, const0_rtx);\n+      x = gen_rtx_EXPR_LIST (VOIDmode, x, GEN_INT (offset));\n       x = gen_rtx_PARALLEL (type_mode, gen_rtvec (1, x));\n     }\n   return x;\n@@ -2517,7 +2518,8 @@ riscv_get_arg_info (struct riscv_arg_info *info, const CUMULATIVE_ARGS *cum,\n \t  {\n \t  case 1:\n \t    return riscv_pass_fpr_single (mode, fregno,\n-\t\t\t\t\t  TYPE_MODE (fields[0].type));\n+\t\t\t\t\t  TYPE_MODE (fields[0].type),\n+\t\t\t\t\t  fields[0].offset);\n \n \t  case 2:\n \t    return riscv_pass_fpr_pair (mode, fregno,"}, {"sha": "6db8a744129922bc7ee7d3bf91542aeb89e4e8b4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7dfada8935a362601d1782bd6598e3e1d78d74/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7dfada8935a362601d1782bd6598e3e1d78d74/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4d7dfada8935a362601d1782bd6598e3e1d78d74", "patch": "@@ -1,3 +1,11 @@\n+2019-03-18  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\tPR target/89627\n+\t* g++.target/riscv/call-with-empty-struct-float.C: New file.\n+\t* g++.target/riscv/call-with-empty-struct-int.C: New file.\n+\t* g++.target/riscv/call-with-empty-struct.H: New file.\n+\t* g++.target/riscv/riscv.exp: New file.\n+\n 2019-03-18  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/85014"}, {"sha": "76d0dc6d93dafcc45bdbaadb877a964e8f3d888f", "filename": "gcc/testsuite/g++.target/riscv/call-with-empty-struct-float.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7dfada8935a362601d1782bd6598e3e1d78d74/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Fcall-with-empty-struct-float.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7dfada8935a362601d1782bd6598e3e1d78d74/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Fcall-with-empty-struct-float.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Fcall-with-empty-struct-float.C?ref=4d7dfada8935a362601d1782bd6598e3e1d78d74", "patch": "@@ -0,0 +1,6 @@\n+// { dg-do run }\n+\n+#include \"call-with-empty-struct.H\"\n+\n+MAKE_STRUCT_PASSING_TEST(float,2.5)\n+"}, {"sha": "cc82912dc3e2ecd22b890f4e478d1fd9c2588f29", "filename": "gcc/testsuite/g++.target/riscv/call-with-empty-struct-int.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7dfada8935a362601d1782bd6598e3e1d78d74/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Fcall-with-empty-struct-int.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7dfada8935a362601d1782bd6598e3e1d78d74/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Fcall-with-empty-struct-int.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Fcall-with-empty-struct-int.C?ref=4d7dfada8935a362601d1782bd6598e3e1d78d74", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do run } */\n+\n+#include \"call-with-empty-struct.H\"\n+\n+MAKE_STRUCT_PASSING_TEST(int,2)\n+"}, {"sha": "d2a46e7861937d2646a2a9c550074ae1cc26fa3e", "filename": "gcc/testsuite/g++.target/riscv/call-with-empty-struct.H", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7dfada8935a362601d1782bd6598e3e1d78d74/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Fcall-with-empty-struct.H", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7dfada8935a362601d1782bd6598e3e1d78d74/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Fcall-with-empty-struct.H", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Fcall-with-empty-struct.H?ref=4d7dfada8935a362601d1782bd6598e3e1d78d74", "patch": "@@ -0,0 +1,19 @@\n+#define MAKE_STRUCT_PASSING_TEST(type,val)                              \\\n+  static struct struct_ ## type ## _t                                   \\\n+  {                                                                     \\\n+    struct { } e;                                                       \\\n+    struct { type f; } s;                                               \\\n+  } global_struct_ ## type = { {}, { val } };                           \\\n+                                                                        \\\n+  static bool                                                           \\\n+  check_struct_ ## type (struct_ ## type ## _t obj)                     \\\n+  {                                                                     \\\n+    return (obj.s.f == global_struct_ ## type .s.f);                    \\\n+  }                                                                     \\\n+                                                                        \\\n+  int                                                                   \\\n+  main ()                                                               \\\n+  {                                                                     \\\n+    bool result = check_struct_ ## type ( global_struct_ ## type );     \\\n+    return result ? 0 : 1;                                              \\\n+  }"}, {"sha": "a339b5cc56d2721074c1887c23211c6e932aa734", "filename": "gcc/testsuite/g++.target/riscv/riscv.exp", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7dfada8935a362601d1782bd6598e3e1d78d74/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Friscv.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7dfada8935a362601d1782bd6598e3e1d78d74/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Friscv.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Friscv.exp?ref=4d7dfada8935a362601d1782bd6598e3e1d78d74", "patch": "@@ -0,0 +1,34 @@\n+# Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't a RISC-V target.\n+if ![istarget riscv*-*-*] then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib g++-dg.exp\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C]] \"\" \"\"\n+\n+# All done.\n+dg-finish"}]}