{"sha": "c2ec330c9af93429e85803ef2e7f2a92a23d3f64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJlYzMzMGM5YWY5MzQyOWU4NTgwM2VmMmU3ZjJhOTJhMjNkM2Y2NA==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2015-07-29T12:27:05Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2015-07-29T12:27:05Z"}, "message": "[AArch64] Add basic FP16 support\n\ngcc/:\n\n\t* config/aarch64/aarch64-builtins.c (aarch64_fp16_type_node): New.\n\t(aarch64_init_builtins): Make aarch64_fp16_type_node, use for __fp16.\n\n\t* config/aarch64/aarch64-modes.def: Add HFmode.\n\n\t* config/aarch64/aarch64.h (TARGET_CPU_CPP_BUILTINS): Define\n\t__ARM_FP16_FORMAT_IEEE and __ARM_FP16_ARGS. Set bit 1 of __ARM_FP.\n\n\t* config/aarch64/aarch64.c (aarch64_init_libfuncs,\n\taarch64_promoted_type): New.\n\n\t(aarch64_float_const_representable_p): Disable HFmode.\n\t(aarch64_mangle_type): Mangle half-precision floats to \"Dh\".\n\t(TARGET_PROMOTED_TYPE): Define to aarch64_promoted_type.\n\t(TARGET_INIT_LIBFUNCS): Define to aarch64_init_libfuncs.\n\n\t* config/aarch64/aarch64.md (mov<mode>): Include HFmode using GPF_F16.\n\t(movhf_aarch64, extendhfsf2, extendhfdf2, truncsfhf2, truncdfhf2): New.\n\n\t* config/aarch64/iterators.md (GPF_F16): New.\n\ngcc/testsuite/:\n\n\t* gcc.target/aarch64/f16_movs_1.c: New test.\n\nFrom-SVN: r226346", "tree": {"sha": "4e0bf27a51657a0224b2c5e126660c288d17c900", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e0bf27a51657a0224b2c5e126660c288d17c900"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2ec330c9af93429e85803ef2e7f2a92a23d3f64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2ec330c9af93429e85803ef2e7f2a92a23d3f64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2ec330c9af93429e85803ef2e7f2a92a23d3f64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2ec330c9af93429e85803ef2e7f2a92a23d3f64/comments", "author": null, "committer": null, "parents": [{"sha": "da571fdab9871ff28cc385a9a1fa25d698162ca1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da571fdab9871ff28cc385a9a1fa25d698162ca1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da571fdab9871ff28cc385a9a1fa25d698162ca1"}], "stats": {"total": 176, "additions": 172, "deletions": 4}, "files": [{"sha": "1ccf95e32f87ffc7a6691a8b29524c2ac6ca7365", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ec330c9af93429e85803ef2e7f2a92a23d3f64/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ec330c9af93429e85803ef2e7f2a92a23d3f64/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2ec330c9af93429e85803ef2e7f2a92a23d3f64", "patch": "@@ -1,3 +1,26 @@\n+2015-07-29  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c (aarch64_fp16_type_node): New.\n+\t(aarch64_init_builtins): Make aarch64_fp16_type_node, use for __fp16.\n+\n+\t* config/aarch64/aarch64-modes.def: Add HFmode.\n+\n+\t* config/aarch64/aarch64.h (TARGET_CPU_CPP_BUILTINS): Define\n+\t__ARM_FP16_FORMAT_IEEE and __ARM_FP16_ARGS. Set bit 1 of __ARM_FP.\n+\n+\t* config/aarch64/aarch64.c (aarch64_init_libfuncs,\n+\taarch64_promoted_type): New.\n+\n+\t(aarch64_float_const_representable_p): Disable HFmode.\n+\t(aarch64_mangle_type): Mangle half-precision floats to \"Dh\".\n+\t(TARGET_PROMOTED_TYPE): Define to aarch64_promoted_type.\n+\t(TARGET_INIT_LIBFUNCS): Define to aarch64_init_libfuncs.\n+\n+\t* config/aarch64/aarch64.md (mov<mode>): Include HFmode using GPF_F16.\n+\t(movhf_aarch64, extendhfsf2, extendhfdf2, truncsfhf2, truncdfhf2): New.\n+\n+\t* config/aarch64/iterators.md (GPF_F16): New.\n+\n 2015-07-29  Richard Biener  <rguenther@suse.de>\n \n \t* match.pd: Merge address comparison patterns and make them"}, {"sha": "800f6e1ffcd358aa22ceecbc460bc1dcac4acd9e", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ec330c9af93429e85803ef2e7f2a92a23d3f64/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ec330c9af93429e85803ef2e7f2a92a23d3f64/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=c2ec330c9af93429e85803ef2e7f2a92a23d3f64", "patch": "@@ -436,6 +436,9 @@ static struct aarch64_simd_type_info aarch64_simd_types [] = {\n };\n #undef ENTRY\n \n+/* This type is not SIMD-specific; it is the user-visible __fp16.  */\n+static tree aarch64_fp16_type_node = NULL_TREE;\n+\n static tree aarch64_simd_intOI_type_node = NULL_TREE;\n static tree aarch64_simd_intEI_type_node = NULL_TREE;\n static tree aarch64_simd_intCI_type_node = NULL_TREE;\n@@ -846,6 +849,12 @@ aarch64_init_builtins (void)\n     = add_builtin_function (\"__builtin_aarch64_set_fpsr\", ftype_set_fpr,\n \t\t\t    AARCH64_BUILTIN_SET_FPSR, BUILT_IN_MD, NULL, NULL_TREE);\n \n+  aarch64_fp16_type_node = make_node (REAL_TYPE);\n+  TYPE_PRECISION (aarch64_fp16_type_node) = 16;\n+  layout_type (aarch64_fp16_type_node);\n+\n+  (*lang_hooks.types.register_builtin_type) (aarch64_fp16_type_node, \"__fp16\");\n+\n   if (TARGET_SIMD)\n     aarch64_init_simd_builtins ();\n   if (TARGET_CRC32)"}, {"sha": "3160bef1105fd4b9de4ac61b23b3dca975d1efaa", "filename": "gcc/config/aarch64/aarch64-modes.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ec330c9af93429e85803ef2e7f2a92a23d3f64/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ec330c9af93429e85803ef2e7f2a92a23d3f64/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def?ref=c2ec330c9af93429e85803ef2e7f2a92a23d3f64", "patch": "@@ -36,6 +36,10 @@ CC_MODE (CC_DLTU);\n CC_MODE (CC_DGEU);\n CC_MODE (CC_DGTU);\n \n+/* Half-precision floating point for __fp16.  */\n+FLOAT_MODE (HF, 2, 0);\n+ADJUST_FLOAT_FORMAT (HF, &ieee_half_format);\n+\n /* Vector modes.  */\n VECTOR_MODES (INT, 8);        /*       V8QI V4HI V2SI.  */\n VECTOR_MODES (INT, 16);       /* V16QI V8HI V4SI V2DI.  */"}, {"sha": "844676fddce308406ab88483d4943791f4b254e3", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ec330c9af93429e85803ef2e7f2a92a23d3f64/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ec330c9af93429e85803ef2e7f2a92a23d3f64/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=c2ec330c9af93429e85803ef2e7f2a92a23d3f64", "patch": "@@ -8700,6 +8700,10 @@ aarch64_mangle_type (const_tree type)\n   if (lang_hooks.types_compatible_p (CONST_CAST_TREE (type), va_list_type))\n     return \"St9__va_list\";\n \n+  /* Half-precision float.  */\n+  if (TREE_CODE (type) == REAL_TYPE && TYPE_PRECISION (type) == 16)\n+    return \"Dh\";\n+\n   /* Mangle AArch64-specific internal types.  TYPE_NAME is non-NULL_TREE for\n      builtin types.  */\n   if (TYPE_NAME (type) != NULL)\n@@ -9940,6 +9944,33 @@ aarch64_start_file (void)\n   default_file_start();\n }\n \n+static void\n+aarch64_init_libfuncs (void)\n+{\n+   /* Half-precision float operations.  The compiler handles all operations\n+     with NULL libfuncs by converting to SFmode.  */\n+\n+  /* Conversions.  */\n+  set_conv_libfunc (trunc_optab, HFmode, SFmode, \"__gnu_f2h_ieee\");\n+  set_conv_libfunc (sext_optab, SFmode, HFmode, \"__gnu_h2f_ieee\");\n+\n+  /* Arithmetic.  */\n+  set_optab_libfunc (add_optab, HFmode, NULL);\n+  set_optab_libfunc (sdiv_optab, HFmode, NULL);\n+  set_optab_libfunc (smul_optab, HFmode, NULL);\n+  set_optab_libfunc (neg_optab, HFmode, NULL);\n+  set_optab_libfunc (sub_optab, HFmode, NULL);\n+\n+  /* Comparisons.  */\n+  set_optab_libfunc (eq_optab, HFmode, NULL);\n+  set_optab_libfunc (ne_optab, HFmode, NULL);\n+  set_optab_libfunc (lt_optab, HFmode, NULL);\n+  set_optab_libfunc (le_optab, HFmode, NULL);\n+  set_optab_libfunc (ge_optab, HFmode, NULL);\n+  set_optab_libfunc (gt_optab, HFmode, NULL);\n+  set_optab_libfunc (unord_optab, HFmode, NULL);\n+}\n+\n /* Target hook for c_mode_for_suffix.  */\n static machine_mode\n aarch64_c_mode_for_suffix (char suffix)\n@@ -9978,7 +10009,8 @@ aarch64_float_const_representable_p (rtx x)\n   if (!CONST_DOUBLE_P (x))\n     return false;\n \n-  if (GET_MODE (x) == VOIDmode)\n+  /* We don't support HFmode constants yet.  */\n+  if (GET_MODE (x) == VOIDmode || GET_MODE (x) == HFmode)\n     return false;\n \n   REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n@@ -11940,6 +11972,14 @@ aarch64_unspec_may_trap_p (const_rtx x, unsigned flags)\n   return default_unspec_may_trap_p (x, flags);\n }\n \n+/* Implement TARGET_PROMOTED_TYPE to promote __fp16 to float.  */\n+static tree\n+aarch64_promoted_type (const_tree t)\n+{\n+  if (SCALAR_FLOAT_TYPE_P (t) && TYPE_PRECISION (t) == 16)\n+    return float_type_node;\n+  return NULL_TREE;\n+}\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST aarch64_address_cost\n \n@@ -12094,6 +12134,9 @@ aarch64_unspec_may_trap_p (const_rtx x, unsigned flags)\n #undef TARGET_SCHED_REASSOCIATION_WIDTH\n #define TARGET_SCHED_REASSOCIATION_WIDTH aarch64_reassociation_width\n \n+#undef TARGET_PROMOTED_TYPE\n+#define TARGET_PROMOTED_TYPE aarch64_promoted_type\n+\n #undef TARGET_SECONDARY_RELOAD\n #define TARGET_SECONDARY_RELOAD aarch64_secondary_reload\n \n@@ -12186,6 +12229,8 @@ aarch64_unspec_may_trap_p (const_rtx x, unsigned flags)\n #define TARGET_VECTORIZE_VEC_PERM_CONST_OK \\\n   aarch64_vectorize_vec_perm_const_ok\n \n+#undef TARGET_INIT_LIBFUNCS\n+#define TARGET_INIT_LIBFUNCS aarch64_init_libfuncs\n \n #undef TARGET_FIXED_CONDITION_CODE_REGS\n #define TARGET_FIXED_CONDITION_CODE_REGS aarch64_fixed_condition_code_regs"}, {"sha": "535695c4f450cf4d362e631a2864379283ae1fc6", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ec330c9af93429e85803ef2e7f2a92a23d3f64/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ec330c9af93429e85803ef2e7f2a92a23d3f64/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=c2ec330c9af93429e85803ef2e7f2a92a23d3f64", "patch": "@@ -61,7 +61,9 @@\n       if (TARGET_FLOAT)                                         \\\n         {                                                       \\\n           builtin_define (\"__ARM_FEATURE_FMA\");                 \\\n-          builtin_define_with_int_value (\"__ARM_FP\", 0x0C);     \\\n+\t  builtin_define_with_int_value (\"__ARM_FP\", 0x0E);     \\\n+\t  builtin_define (\"__ARM_FP16_FORMAT_IEEE\");\t\t\\\n+\t  builtin_define (\"__ARM_FP16_ARGS\");\t\t\t\\\n         }                                                       \\\n       if (TARGET_SIMD)                                          \\\n         {                                                       \\"}, {"sha": "b7b04c4cbfff4968d1cf9937f5df599d55ac31f2", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ec330c9af93429e85803ef2e7f2a92a23d3f64/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ec330c9af93429e85803ef2e7f2a92a23d3f64/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=c2ec330c9af93429e85803ef2e7f2a92a23d3f64", "patch": "@@ -978,8 +978,8 @@\n })\n \n (define_expand \"mov<mode>\"\n-  [(set (match_operand:GPF 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:GPF 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:GPF_F16 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:GPF_F16 1 \"general_operand\" \"\"))]\n   \"\"\n   {\n     if (!TARGET_FLOAT)\n@@ -995,6 +995,26 @@\n   }\n )\n \n+(define_insn \"*movhf_aarch64\"\n+  [(set (match_operand:HF 0 \"nonimmediate_operand\" \"=w, ?r,w,w,m,r,m ,r\")\n+\t(match_operand:HF 1 \"general_operand\"      \"?rY, w,w,m,w,m,rY,r\"))]\n+  \"TARGET_FLOAT && (register_operand (operands[0], HFmode)\n+    || register_operand (operands[1], HFmode))\"\n+  \"@\n+   mov\\\\t%0.h[0], %w1\n+   umov\\\\t%w0, %1.h[0]\n+   mov\\\\t%0.h[0], %1.h[0]\n+   ldr\\\\t%h0, %1\n+   str\\\\t%h1, %0\n+   ldrh\\\\t%w0, %1\n+   strh\\\\t%w1, %0\n+   mov\\\\t%w0, %w1\"\n+  [(set_attr \"type\" \"neon_from_gp,neon_to_gp,fmov,\\\n+                     f_loads,f_stores,load1,store1,mov_reg\")\n+   (set_attr \"simd\" \"yes,yes,yes,*,*,*,*,*\")\n+   (set_attr \"fp\"   \"*,*,*,yes,yes,*,*,*\")]\n+)\n+\n (define_insn \"*movsf_aarch64\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=w, ?r,w,w  ,w,m,r,m ,r\")\n \t(match_operand:SF 1 \"general_operand\"      \"?rY, w,w,Ufc,m,w,m,rY,r\"))]\n@@ -4093,6 +4113,22 @@\n   [(set_attr \"type\" \"f_cvt\")]\n )\n \n+(define_insn \"extendhfsf2\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=w\")\n+        (float_extend:SF (match_operand:HF 1 \"register_operand\" \"w\")))]\n+  \"TARGET_FLOAT\"\n+  \"fcvt\\\\t%s0, %h1\"\n+  [(set_attr \"type\" \"f_cvt\")]\n+)\n+\n+(define_insn \"extendhfdf2\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=w\")\n+        (float_extend:DF (match_operand:HF 1 \"register_operand\" \"w\")))]\n+  \"TARGET_FLOAT\"\n+  \"fcvt\\\\t%d0, %h1\"\n+  [(set_attr \"type\" \"f_cvt\")]\n+)\n+\n (define_insn \"truncdfsf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=w\")\n         (float_truncate:SF (match_operand:DF 1 \"register_operand\" \"w\")))]\n@@ -4101,6 +4137,22 @@\n   [(set_attr \"type\" \"f_cvt\")]\n )\n \n+(define_insn \"truncsfhf2\"\n+  [(set (match_operand:HF 0 \"register_operand\" \"=w\")\n+        (float_truncate:HF (match_operand:SF 1 \"register_operand\" \"w\")))]\n+  \"TARGET_FLOAT\"\n+  \"fcvt\\\\t%h0, %s1\"\n+  [(set_attr \"type\" \"f_cvt\")]\n+)\n+\n+(define_insn \"truncdfhf2\"\n+  [(set (match_operand:HF 0 \"register_operand\" \"=w\")\n+        (float_truncate:HF (match_operand:DF 1 \"register_operand\" \"w\")))]\n+  \"TARGET_FLOAT\"\n+  \"fcvt\\\\t%h0, %d1\"\n+  [(set_attr \"type\" \"f_cvt\")]\n+)\n+\n (define_insn \"fix_trunc<GPF:mode><GPI:mode>2\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n         (fix:GPI (match_operand:GPF 1 \"register_operand\" \"w\")))]"}, {"sha": "647817ea1a8d193628384a8ef202ee1e91fbc41b", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ec330c9af93429e85803ef2e7f2a92a23d3f64/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ec330c9af93429e85803ef2e7f2a92a23d3f64/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=c2ec330c9af93429e85803ef2e7f2a92a23d3f64", "patch": "@@ -38,6 +38,9 @@\n ;; Iterator for General Purpose Floating-point registers (32- and 64-bit modes)\n (define_mode_iterator GPF [SF DF])\n \n+;; Iterator for General Purpose Float registers, inc __fp16.\n+(define_mode_iterator GPF_F16 [HF SF DF])\n+\n ;; Integer vector modes.\n (define_mode_iterator VDQ_I [V8QI V16QI V4HI V8HI V2SI V4SI V2DI])\n "}, {"sha": "5853526ea3d3c8941d569e79efffc7f20e8cff32", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ec330c9af93429e85803ef2e7f2a92a23d3f64/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ec330c9af93429e85803ef2e7f2a92a23d3f64/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c2ec330c9af93429e85803ef2e7f2a92a23d3f64", "patch": "@@ -1,3 +1,7 @@\n+2015-07-29  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* gcc.target/aarch64/f16_movs_1.c: New test.\n+\n 2015-07-28  Tom de Vries  <tom@codesourcery.com>\n \n \t* gcc.dg/autopar/uns-outer-4.c: Remove xfail on scan for parallelizing"}, {"sha": "6cb80866790c5c40a59d22f2bbbfce41ae5f07d0", "filename": "gcc/testsuite/gcc.target/aarch64/f16_movs_1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ec330c9af93429e85803ef2e7f2a92a23d3f64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ff16_movs_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ec330c9af93429e85803ef2e7f2a92a23d3f64/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ff16_movs_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ff16_movs_1.c?ref=c2ec330c9af93429e85803ef2e7f2a92a23d3f64", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fno-inline -O2\" } */\n+\n+#include <arm_neon.h>\n+\n+__fp16\n+func2 (__fp16 a, __fp16 b)\n+{\n+  return b;\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  __fp16 array[16];\n+  int i;\n+\n+  for (i = 0; i < sizeof (array) / sizeof (array[0]); i++)\n+    array[i] = i;\n+\n+  array[0] = func2 (array[1], array[2]);\n+\n+  __builtin_printf (\"%f\\n\", array[0]); /* { dg-output \"2.0\" } */\n+\n+  return 0;\n+}"}]}