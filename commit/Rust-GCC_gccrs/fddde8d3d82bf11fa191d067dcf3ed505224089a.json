{"sha": "fddde8d3d82bf11fa191d067dcf3ed505224089a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRkZGU4ZDNkODJiZjExZmExOTFkMDY3ZGNmM2VkNTA1MjI0MDg5YQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2015-06-03T12:59:38Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2015-06-03T12:59:38Z"}, "message": "rl78-real.md: Add peepholes to avoid a register copy when calling a function.\n\n\t* config/rl78/rl78-real.md: Add peepholes to avoid a register\n\tcopy when calling a function.\n\t* config/rl78/rl78.c (need_to_save): Do not push the frame\n\tpointer in an interrupt handler prologue if it is never used.\n\nFrom-SVN: r224076", "tree": {"sha": "e0bc4f4a51d0f86a089bcef35a324dd324abffef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0bc4f4a51d0f86a089bcef35a324dd324abffef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fddde8d3d82bf11fa191d067dcf3ed505224089a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fddde8d3d82bf11fa191d067dcf3ed505224089a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fddde8d3d82bf11fa191d067dcf3ed505224089a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fddde8d3d82bf11fa191d067dcf3ed505224089a/comments", "author": null, "committer": null, "parents": [{"sha": "9ce3eaa4fffc00adae2006fc59f8d1434496bb92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ce3eaa4fffc00adae2006fc59f8d1434496bb92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ce3eaa4fffc00adae2006fc59f8d1434496bb92"}], "stats": {"total": 53, "additions": 50, "deletions": 3}, "files": [{"sha": "cab2f38ad3c368de27025c2f50b61f372a993254", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fddde8d3d82bf11fa191d067dcf3ed505224089a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fddde8d3d82bf11fa191d067dcf3ed505224089a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fddde8d3d82bf11fa191d067dcf3ed505224089a", "patch": "@@ -1,3 +1,10 @@\n+2015-06-03  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/rl78/rl78-real.md: Add peepholes to avoid a register\n+\tcopy when calling a function.\n+\t* config/rl78/rl78.c (need_to_save): Do not push the frame\n+\tpointer in an interrupt handler prologue if it is never used.\n+\n 2015-06-03  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* ifcvt (end_ifcvt_sequence): Fix typo in comment above.\n@@ -44,7 +51,7 @@\n \n 2015-06-03  Andrew Bennett  <andrew.bennett@imgtec.com>\n \n-\t* explow.c (plus_constant): Update check after force_const_mem call \n+\t* explow.c (plus_constant): Update check after force_const_mem call\n \tto see if the value returned is not a NULL_RTX.\n \n 2015-06-03  Ilya Enkovich  <ilya.enkovich@intel.com>"}, {"sha": "d6324e5bed7effb0a215c23e78448f5e5376f9cc", "filename": "gcc/config/rl78/rl78-real.md", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fddde8d3d82bf11fa191d067dcf3ed505224089a/gcc%2Fconfig%2Frl78%2Frl78-real.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fddde8d3d82bf11fa191d067dcf3ed505224089a/gcc%2Fconfig%2Frl78%2Frl78-real.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78-real.md?ref=fddde8d3d82bf11fa191d067dcf3ed505224089a", "patch": "@@ -342,6 +342,25 @@\n   [(set (attr \"update_Z\") (const_string \"clobber\"))]\n   )\n \n+;; Peephole to match:\n+;;\n+;;\t(set (reg1) (reg2))\n+;;\t(call (mem (reg1)))\n+;;\n+;;  and replace it with:\n+;;\n+;;\t(call (mem (reg2)))\n+\n+(define_peephole2\n+  [(set (match_operand:HI 0 \"register_operand\") (match_operand:HI 1 \"register_operand\"))\n+   (call (mem:HI (match_dup 0))(const_int 0))\n+  ]\n+  \"peep2_regno_dead_p (2, REGNO (operands[0]))\n+   && REGNO (operands[1]) < 8\"\n+  [(call (mem:HI (match_dup 1))(const_int 0))\n+  ]\n+)\n+\n (define_insn \"*call_value_real\"\n   [(set (match_operand 0 \"register_operand\" \"=v,v\")\n \t(call (match_operand:HI 1 \"memory_operand\" \"Wab,Wca\")\n@@ -353,6 +372,25 @@\n   [(set (attr \"update_Z\") (const_string \"clobber\"))]\n   )\n \n+;; Peephole to match:\n+;;\n+;;\t(set (reg1) (reg2))\n+;;\t(set (reg3) (call (mem (reg1))))\n+;;\n+;;  and replace it with:\n+;;\n+;;\t(set (reg3) (call (mem (reg2))))\n+\n+(define_peephole2\n+  [(set (match_operand:HI 0 \"register_operand\") (match_operand:HI 1 \"register_operand\"))\n+   (set (match_operand:HI 2 \"register_operand\") (call (mem:HI (match_dup 0))(const_int 0)))\n+  ]\n+  \"peep2_regno_dead_p (2, REGNO (operands[0]))\n+   && REGNO (operands[1]) < 8\"\n+  [(set (match_dup 2) (call (mem:HI (match_dup 1))(const_int 0)))\n+  ]\n+)\n+\n (define_insn \"*cbranchqi4_real_signed\"\n   [(set (pc) (if_then_else\n \t      (match_operator 0 \"rl78_cmp_operator_signed\""}, {"sha": "c6a0d57e354c568715d7d866a4ef70bbca103220", "filename": "gcc/config/rl78/rl78.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fddde8d3d82bf11fa191d067dcf3ed505224089a/gcc%2Fconfig%2Frl78%2Frl78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fddde8d3d82bf11fa191d067dcf3ed505224089a/gcc%2Fconfig%2Frl78%2Frl78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.c?ref=fddde8d3d82bf11fa191d067dcf3ed505224089a", "patch": "@@ -678,8 +678,10 @@ need_to_save (unsigned int regno)\n \n       /* If the handler is a non-leaf function then it may call\n \t non-interrupt aware routines which will happily clobber\n-\t any call_used registers, so we have to preserve them.  */\n-      if (!crtl->is_leaf && call_used_regs[regno])\n+\t any call_used registers, so we have to preserve them.\n+         We do not have to worry about the frame pointer register\n+\t though, as that is handled below.  */\n+      if (!crtl->is_leaf && call_used_regs[regno] && regno < 22)\n \treturn true;\n \n       /* Otherwise we only have to save a register, call_used"}]}