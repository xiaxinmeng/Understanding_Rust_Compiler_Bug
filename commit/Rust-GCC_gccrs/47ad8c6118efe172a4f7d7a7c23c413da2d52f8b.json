{"sha": "47ad8c6118efe172a4f7d7a7c23c413da2d52f8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdhZDhjNjExOGVmZTE3MmE0ZjdkN2E3YzIzYzQxM2RhMmQ1MmY4Yg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1997-11-13T16:59:07Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1997-11-13T16:59:07Z"}, "message": "Fix problems in splitting DF constants on big endian hosts & Davids patch for power shifts.\n\nFrom-SVN: r16454", "tree": {"sha": "370d569088086cfdc94b1a4960afb49500d10f63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/370d569088086cfdc94b1a4960afb49500d10f63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47ad8c6118efe172a4f7d7a7c23c413da2d52f8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47ad8c6118efe172a4f7d7a7c23c413da2d52f8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47ad8c6118efe172a4f7d7a7c23c413da2d52f8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47ad8c6118efe172a4f7d7a7c23c413da2d52f8b/comments", "author": null, "committer": null, "parents": [{"sha": "2bb14213a3fac412c17a8efd98002c179ba18e92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bb14213a3fac412c17a8efd98002c179ba18e92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bb14213a3fac412c17a8efd98002c179ba18e92"}], "stats": {"total": 112, "additions": 76, "deletions": 36}, "files": [{"sha": "984a0443655cf01a607b8312dfd1d6cc5c9ccad0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ad8c6118efe172a4f7d7a7c23c413da2d52f8b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ad8c6118efe172a4f7d7a7c23c413da2d52f8b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47ad8c6118efe172a4f7d7a7c23c413da2d52f8b", "patch": "@@ -1,3 +1,13 @@\n+Thu Nov 13 11:07:41 1997  Michael Meissner  <meissner@cygnus.com>\n+\n+\t* rs6000.c (num_insns_constant): Use REAL_VALUE_FROM_CONST_DOUBLE to\n+\tpick apart floating point values, instead of using CONST_DOUBLE_LOW\n+\tand CONST_DOUBLE_HIGH.\n+\n+\t* rs6000.md (define_splits for DF constants): Use the appropriate\n+\tREAL_VALUE_* interface to pick apart DF floating point constants in\n+\ta machine independent fashion.\n+\n Thu Nov 13 00:06:58 1997  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* fold-const.c (fold_truthop): When changing a one-bit comparison\n@@ -66,6 +76,11 @@ Mon Nov 10 00:05:56 1997  Jeffrey A Law  (law@cygnus.com)\n \t* alias.c (MAX_ALIAS_LOOP_PASSES): Define.\n \t(init_alias_analysis): Break out of loops after MAX_ALIAS_LOOP_PASSES.\n \n+Sun Nov  9 14:34:47 1997  David Edelsohn  <edelsohn@mhpcc.edu>\n+\n+        * rs6000.md (lshrdi3_power): Delete '&' from first alternative and\n+        swap instruction order.\n+\n Sun Nov  9 02:07:16 1997  Jeffrey A Law  (law@cygnus.com)\n \n \t* fixinc.svr4 (__STDC__): Add another case."}, {"sha": "557ef8b92948ce7606442c4f33f6ebfb7176c921", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 36, "deletions": 17, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ad8c6118efe172a4f7d7a7c23c413da2d52f8b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ad8c6118efe172a4f7d7a7c23c413da2d52f8b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=47ad8c6118efe172a4f7d7a7c23c413da2d52f8b", "patch": "@@ -673,28 +673,47 @@ num_insns_constant (op, mode)\n       return num_insns_constant_wide ((HOST_WIDE_INT)l);\n     }\n \n-  else if (GET_CODE (op) == CONST_DOUBLE && TARGET_32BIT)\n-    return (num_insns_constant_wide (CONST_DOUBLE_LOW (op))\n-\t    + num_insns_constant_wide (CONST_DOUBLE_HIGH (op)));\n-\n-  else if (GET_CODE (op) == CONST_DOUBLE && TARGET_64BIT)\n+  else if (GET_CODE (op) == CONST_DOUBLE)\n     {\n-      HOST_WIDE_INT low  = CONST_DOUBLE_LOW (op);\n-      HOST_WIDE_INT high = CONST_DOUBLE_HIGH (op);\n-\n-      if (high == 0 && (low & 0x80000000) == 0)\n-\treturn num_insns_constant_wide (low);\n+      HOST_WIDE_INT low;\n+      HOST_WIDE_INT high;\n+      long l[2];\n+      REAL_VALUE_TYPE rv;\n+      int endian = (WORDS_BIG_ENDIAN == 0);\n \n-      else if (((high & 0xffffffff) == 0xffffffff)\n-\t       && ((low & 0x80000000) != 0))\n-\treturn num_insns_constant_wide (low);\n+      if (mode == VOIDmode || mode == DImode)\n+\t{\n+\t  high = CONST_DOUBLE_HIGH (op);\n+\t  low  = CONST_DOUBLE_LOW (op);\n+\t}\n+      else\n+\t{\n+\t  REAL_VALUE_FROM_CONST_DOUBLE (rv, op);\n+\t  REAL_VALUE_TO_TARGET_DOUBLE (rv, l);\n+\t  high = l[endian];\n+\t  low  = l[1 - endian];\n+\t}\n \n-      else if (low == 0)\n-\treturn num_insns_constant_wide (high) + 1;\n+      if (TARGET_32BIT)\n+\treturn (num_insns_constant_wide (low)\n+\t\t+ num_insns_constant_wide (high));\n \n       else\n-\treturn (num_insns_constant_wide (high)\n-\t\t+ num_insns_constant_wide (low) + 1);\n+\t{\n+\t  if (high == 0 && (low & 0x80000000) == 0)\n+\t    return num_insns_constant_wide (low);\n+\n+\t  else if (((high & 0xffffffff) == 0xffffffff)\n+\t\t   && ((low & 0x80000000) != 0))\n+\t    return num_insns_constant_wide (low);\n+\n+\t  else if (low == 0)\n+\t    return num_insns_constant_wide (high) + 1;\n+\n+\t  else\n+\t    return (num_insns_constant_wide (high)\n+\t\t    + num_insns_constant_wide (low) + 1);\n+\t}\n     }\n \n   else"}, {"sha": "b9bd408e423160d36708b438e07e78e448d6e4ce", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ad8c6118efe172a4f7d7a7c23c413da2d52f8b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ad8c6118efe172a4f7d7a7c23c413da2d52f8b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=47ad8c6118efe172a4f7d7a7c23c413da2d52f8b", "patch": "@@ -4258,13 +4258,13 @@\n   [(set_attr \"length\" \"8\")])\n \n (define_insn \"lshrdi3_power\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=&r,r,r,&r\")\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r,r,&r\")\n \t(lshiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r,0,r\")\n \t\t     (match_operand:SI 2 \"reg_or_cint_operand\" \"M,i,r,r\")))\n    (clobber (match_scratch:SI 3 \"=X,q,q,q\"))]\n   \"TARGET_POWER\"\n   \"@\n-   {cal %0,0(0)|li %0,0}\\;{s%A2i|s%A2wi} %L0,%1,%h2\n+   {s%A2i|s%A2wi} %L0,%1,%h2\\;{cal %0,0(0)|li %0,0}\n    sr%I2q %0,%1,%h2\\;srl%I2q %L0,%L1,%h2\n    sr%I2q %0,%1,%h2\\;srl%I2q %L0,%L1,%h2\n    sr%I2q %0,%1,%h2\\;srl%I2q %L0,%L1,%h2\"\n@@ -5734,16 +5734,16 @@\n   \"\n {\n   int endian = (WORDS_BIG_ENDIAN == 0);\n+  long l[2];\n+  REAL_VALUE_TYPE rv;\n+\n+  REAL_VALUE_FROM_CONST_DOUBLE (rv, operands[1]);\n+  REAL_VALUE_TO_TARGET_DOUBLE (rv, l);\n+\n   operands[2] = operand_subword (operands[0], endian, 0, DFmode);\n   operands[3] = operand_subword (operands[0], 1 - endian, 0, DFmode);\n-\n-#ifdef HOST_WORDS_BIG_ENDIAN\n-  operands[4] = GEN_INT (CONST_DOUBLE_LOW  (operands[1]));\n-  operands[5] = GEN_INT (CONST_DOUBLE_HIGH (operands[1]));\n-#else\n-  operands[4] = GEN_INT (CONST_DOUBLE_HIGH (operands[1]));\n-  operands[5] = GEN_INT (CONST_DOUBLE_LOW  (operands[1]));\n-#endif\n+  operands[4] = GEN_INT (l[endian]);\n+  operands[5] = GEN_INT (l[1 - endian]);\n }\")\n \n (define_split\n@@ -5762,16 +5762,15 @@\n   HOST_WIDE_INT high;\n   HOST_WIDE_INT low;\n   int endian = (WORDS_BIG_ENDIAN == 0);\n+  long l[2];\n+  REAL_VALUE_TYPE rv;\n   rtx high_reg = operand_subword (operands[0], endian, 0, DFmode);\n   rtx low_reg  = operand_subword (operands[0], 1 - endian, 0, DFmode);\n \n-#ifdef HOST_WORDS_BIG_ENDIAN\n-  high = CONST_DOUBLE_LOW  (operands[1]);\n-  low  = CONST_DOUBLE_HIGH (operands[1]);\n-#else\n-  high = CONST_DOUBLE_HIGH (operands[1]);\n-  low  = CONST_DOUBLE_LOW  (operands[1]);\n-#endif\n+  REAL_VALUE_FROM_CONST_DOUBLE (rv, operands[1]);\n+  REAL_VALUE_TO_TARGET_DOUBLE (rv, l);\n+  high = l[endian];\n+  low  = l[1 - endian];\n \n   if (((unsigned HOST_WIDE_INT) (low + 0x8000) < 0x10000)\n       || (low & 0xffff) == 0)\n@@ -5806,10 +5805,17 @@\n    (set (match_dup 3) (ior:SI (match_dup 3) (match_dup 7)))]\n   \"\n {\n-  HOST_WIDE_INT high = CONST_DOUBLE_HIGH (operands[1]);\n-  HOST_WIDE_INT low  = CONST_DOUBLE_LOW  (operands[1]);\n+  HOST_WIDE_INT high;\n+  HOST_WIDE_INT low;\n+  long l[2];\n+  REAL_VALUE_TYPE rv;\n   int endian = (WORDS_BIG_ENDIAN == 0);\n \n+  REAL_VALUE_FROM_CONST_DOUBLE (rv, operands[1]);\n+  REAL_VALUE_TO_TARGET_DOUBLE (rv, l);\n+  high = l[endian];\n+  low  = l[1 - endian];\n+\n   operands[2] = operand_subword (operands[0], endian, 0, DFmode);\n   operands[3] = operand_subword (operands[0], 1 - endian, 0, DFmode);\n   operands[4] = GEN_INT (high & 0xffff0000);"}]}