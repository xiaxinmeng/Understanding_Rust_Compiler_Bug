{"sha": "73532817fd6f5aa4f59953f4111217a75135a78b", "node_id": "C_kwDOANBUbNoAKDczNTMyODE3ZmQ2ZjVhYTRmNTk5NTNmNDExMTIxN2E3NTEzNWE3OGI", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-03-29T08:12:48Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-03-31T09:32:26Z"}, "message": "macros: Allow transcribing of zero items\n\nWhen expanding AST fragments containing multiple nodes, we must be aware\nthat some cases allow expanding zero or more nodes. Any macro\ntranscription that gets parsed as many nodes (ie any transcriber function that calls `parse_many`) needs to be able to parse zero of those nodes and still get expanded properly (basically, removed).\n\nPreviously, this would cause a failure to lower the macro invocation which would remain as a child instead of getting stripped/erased.\n\nCo-authored-by: philberty <philip.herron@embecosm.com>", "tree": {"sha": "d85ff3be8c56dfb9d27c64a856b3523e197b41f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d85ff3be8c56dfb9d27c64a856b3523e197b41f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73532817fd6f5aa4f59953f4111217a75135a78b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73532817fd6f5aa4f59953f4111217a75135a78b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73532817fd6f5aa4f59953f4111217a75135a78b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73532817fd6f5aa4f59953f4111217a75135a78b/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9c1a14dab4c47c774f9c7661afc4bb2176eb9bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9c1a14dab4c47c774f9c7661afc4bb2176eb9bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9c1a14dab4c47c774f9c7661afc4bb2176eb9bb"}], "stats": {"total": 62, "additions": 37, "deletions": 25}, "files": [{"sha": "785af81872973c4c4ced7dabae2fe401f943e7ef", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73532817fd6f5aa4f59953f4111217a75135a78b/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73532817fd6f5aa4f59953f4111217a75135a78b/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=73532817fd6f5aa4f59953f4111217a75135a78b", "patch": "@@ -1871,13 +1871,12 @@ class ASTFragment\n     return *this;\n   }\n \n-  static ASTFragment create_empty () { return ASTFragment ({}); }\n   static ASTFragment create_error () { return ASTFragment ({}, true); }\n \n   std::vector<SingleASTNode> &get_nodes () { return nodes; }\n   bool is_error () const { return fragment_is_error; }\n \n-  bool should_expand () const { return !is_error () && !nodes.empty (); }\n+  bool should_expand () const { return !is_error (); }\n \n   std::unique_ptr<Expr> take_expression_fragment ()\n   {"}, {"sha": "5ab82c4df7d33bc5a0327ef06ad20a12870cc92f", "filename": "gcc/rust/ast/rust-macro.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73532817fd6f5aa4f59953f4111217a75135a78b/gcc%2Frust%2Fast%2Frust-macro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73532817fd6f5aa4f59953f4111217a75135a78b/gcc%2Frust%2Fast%2Frust-macro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-macro.h?ref=73532817fd6f5aa4f59953f4111217a75135a78b", "patch": "@@ -469,7 +469,7 @@ class MacroRulesDefinition : public MacroItem\n   static ASTFragment dummy_builtin (Location, MacroInvocData &)\n   {\n     gcc_unreachable ();\n-    return ASTFragment::create_empty ();\n+    return ASTFragment::create_error ();\n   }\n \n   /* NOTE: in rustc, macro definitions are considered (and parsed as) a type"}, {"sha": "f9b8e302d090537e5a192a80cba3523ae248bde9", "filename": "gcc/rust/expand/rust-macro-builtins.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73532817fd6f5aa4f59953f4111217a75135a78b/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73532817fd6f5aa4f59953f4111217a75135a78b/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc?ref=73532817fd6f5aa4f59953f4111217a75135a78b", "patch": "@@ -141,7 +141,7 @@ MacroBuiltin::assert (Location invoc_locus, AST::MacroInvocData &invoc)\n {\n   rust_debug (\"assert!() called\");\n \n-  return AST::ASTFragment::create_empty ();\n+  return AST::ASTFragment::create_error ();\n }\n \n AST::ASTFragment"}, {"sha": "20bbbc07ffbf9af6024fa498c6bd16d374a26c98", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73532817fd6f5aa4f59953f4111217a75135a78b/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73532817fd6f5aa4f59953f4111217a75135a78b/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=73532817fd6f5aa4f59953f4111217a75135a78b", "patch": "@@ -195,7 +195,7 @@ MacroExpander::expand_invoc (AST::MacroInvocation &invoc)\n   bool ok = mappings->lookup_macro_def (resolved_node, &rules_def);\n   rust_assert (ok);\n \n-  auto fragment = AST::ASTFragment::create_empty ();\n+  auto fragment = AST::ASTFragment::create_error ();\n \n   if (rules_def->is_builtin ())\n     fragment\n@@ -236,7 +236,7 @@ MacroExpander::expand_invoc_semi (AST::MacroInvocation &invoc)\n   bool ok = mappings->lookup_macro_def (resolved_node, &rules_def);\n   rust_assert (ok);\n \n-  auto fragment = AST::ASTFragment::create_empty ();\n+  auto fragment = AST::ASTFragment::create_error ();\n \n   if (rules_def->is_builtin ())\n     fragment\n@@ -781,7 +781,7 @@ MacroExpander::match_repetition (Parser<MacroInvocLexer> &parser,\n /**\n  * Helper function to refactor calling a parsing function 0 or more times\n  */\n-static std::vector<AST::SingleASTNode>\n+static AST::ASTFragment\n parse_many (Parser<MacroInvocLexer> &parser, TokenId &delimiter,\n \t    std::function<AST::SingleASTNode ()> parse_fn)\n {\n@@ -795,7 +795,7 @@ parse_many (Parser<MacroInvocLexer> &parser, TokenId &delimiter,\n       nodes.emplace_back (std::move (node));\n     }\n \n-  return nodes;\n+  return AST::ASTFragment (std::move (nodes));\n }\n \n /**\n@@ -804,7 +804,7 @@ parse_many (Parser<MacroInvocLexer> &parser, TokenId &delimiter,\n  * @param parser Parser to extract items from\n  * @param delimiter Id of the token on which parsing should stop\n  */\n-static std::vector<AST::SingleASTNode>\n+static AST::ASTFragment\n transcribe_many_items (Parser<MacroInvocLexer> &parser, TokenId &delimiter)\n {\n   return parse_many (parser, delimiter, [&parser] () {\n@@ -819,7 +819,7 @@ transcribe_many_items (Parser<MacroInvocLexer> &parser, TokenId &delimiter)\n  * @param parser Parser to extract items from\n  * @param delimiter Id of the token on which parsing should stop\n  */\n-static std::vector<AST::SingleASTNode>\n+static AST::ASTFragment\n transcribe_many_ext (Parser<MacroInvocLexer> &parser, TokenId &delimiter)\n {\n   return parse_many (parser, delimiter, [&parser] () {\n@@ -834,7 +834,7 @@ transcribe_many_ext (Parser<MacroInvocLexer> &parser, TokenId &delimiter)\n  * @param parser Parser to extract items from\n  * @param delimiter Id of the token on which parsing should stop\n  */\n-static std::vector<AST::SingleASTNode>\n+static AST::ASTFragment\n transcribe_many_trait_items (Parser<MacroInvocLexer> &parser,\n \t\t\t     TokenId &delimiter)\n {\n@@ -850,7 +850,7 @@ transcribe_many_trait_items (Parser<MacroInvocLexer> &parser,\n  * @param parser Parser to extract items from\n  * @param delimiter Id of the token on which parsing should stop\n  */\n-static std::vector<AST::SingleASTNode>\n+static AST::ASTFragment\n transcribe_many_impl_items (Parser<MacroInvocLexer> &parser, TokenId &delimiter)\n {\n   return parse_many (parser, delimiter, [&parser] () {\n@@ -865,7 +865,7 @@ transcribe_many_impl_items (Parser<MacroInvocLexer> &parser, TokenId &delimiter)\n  * @param parser Parser to extract items from\n  * @param delimiter Id of the token on which parsing should stop\n  */\n-static std::vector<AST::SingleASTNode>\n+static AST::ASTFragment\n transcribe_many_trait_impl_items (Parser<MacroInvocLexer> &parser,\n \t\t\t\t  TokenId &delimiter)\n {\n@@ -881,7 +881,7 @@ transcribe_many_trait_impl_items (Parser<MacroInvocLexer> &parser,\n  * @param parser Parser to extract statements from\n  * @param delimiter Id of the token on which parsing should stop\n  */\n-static std::vector<AST::SingleASTNode>\n+static AST::ASTFragment\n transcribe_many_stmts (Parser<MacroInvocLexer> &parser, TokenId &delimiter)\n {\n   auto restrictions = ParseRestrictions ();\n@@ -901,28 +901,28 @@ transcribe_many_stmts (Parser<MacroInvocLexer> &parser, TokenId &delimiter)\n  *\n  * @param parser Parser to extract statements from\n  */\n-static std::vector<AST::SingleASTNode>\n+static AST::ASTFragment\n transcribe_expression (Parser<MacroInvocLexer> &parser)\n {\n   auto expr = parser.parse_expr ();\n \n-  return {AST::SingleASTNode (std::move (expr))};\n+  return AST::ASTFragment ({std::move (expr)});\n }\n \n /**\n  * Transcribe one type from a macro invocation\n  *\n  * @param parser Parser to extract statements from\n  */\n-static std::vector<AST::SingleASTNode>\n+static AST::ASTFragment\n transcribe_type (Parser<MacroInvocLexer> &parser)\n {\n-  auto expr = parser.parse_type ();\n+  auto type = parser.parse_type ();\n \n-  return {AST::SingleASTNode (std::move (expr))};\n+  return AST::ASTFragment ({std::move (type)});\n }\n \n-static std::vector<AST::SingleASTNode>\n+static AST::ASTFragment\n transcribe_on_delimiter (Parser<MacroInvocLexer> &parser, bool semicolon,\n \t\t\t AST::DelimType delimiter, TokenId last_token_id)\n {\n@@ -932,7 +932,7 @@ transcribe_on_delimiter (Parser<MacroInvocLexer> &parser, bool semicolon,\n     return transcribe_expression (parser);\n } // namespace Rust\n \n-static std::vector<AST::SingleASTNode>\n+static AST::ASTFragment\n transcribe_context (MacroExpander::ContextType ctx,\n \t\t    Parser<MacroInvocLexer> &parser, bool semicolon,\n \t\t    AST::DelimType delimiter, TokenId last_token_id)\n@@ -1049,7 +1049,7 @@ MacroExpander::transcribe_rule (\n   //   as a statement (either via ExpressionStatement or\n   //   MacroInvocationWithSemi)\n \n-  auto nodes\n+  auto fragment\n     = transcribe_context (ctx, parser, semicolon,\n \t\t\t  invoc_token_tree.get_delim_type (), last_token_id);\n \n@@ -1072,6 +1072,6 @@ MacroExpander::transcribe_rule (\n \t\t     \"tokens here and after are unparsed\");\n     }\n \n-  return AST::ASTFragment (std::move (nodes));\n+  return fragment;\n }\n } // namespace Rust"}, {"sha": "f3ca7fc876aa811c5e9ce3ce238661454bfec081", "filename": "gcc/rust/expand/rust-macro-expand.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73532817fd6f5aa4f59953f4111217a75135a78b/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73532817fd6f5aa4f59953f4111217a75135a78b/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.h?ref=73532817fd6f5aa4f59953f4111217a75135a78b", "patch": "@@ -200,7 +200,7 @@ struct MacroExpander\n   MacroExpander (AST::Crate &crate, ExpansionCfg cfg, Session &session)\n     : cfg (cfg), crate (crate), session (session),\n       sub_stack (SubstitutionScope ()),\n-      expanded_fragment (AST::ASTFragment::create_empty ()),\n+      expanded_fragment (AST::ASTFragment::create_error ()),\n       resolver (Resolver::Resolver::get ()),\n       mappings (Analysis::Mappings::get ())\n   {}\n@@ -295,7 +295,7 @@ struct MacroExpander\n   AST::ASTFragment take_expanded_fragment (AST::ASTVisitor &vis)\n   {\n     AST::ASTFragment old_fragment = std::move (expanded_fragment);\n-    expanded_fragment = AST::ASTFragment::create_empty ();\n+    expanded_fragment = AST::ASTFragment::create_error ();\n \n     for (auto &node : old_fragment.get_nodes ())\n       {"}, {"sha": "3824422292477648e738e209f0be7ed9a4004666", "filename": "gcc/testsuite/rust/compile/macro41.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73532817fd6f5aa4f59953f4111217a75135a78b/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro41.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73532817fd6f5aa4f59953f4111217a75135a78b/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro41.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro41.rs?ref=73532817fd6f5aa4f59953f4111217a75135a78b", "patch": "@@ -0,0 +1,13 @@\n+macro_rules! empty {\n+    ($($t:tt)*) => {};\n+}\n+\n+empty! {nothing}\n+empty! {struct OuterItem;}\n+empty! {}\n+\n+fn main() {\n+    empty! {as statement};\n+    empty! {any child item};\n+    empty! {};\n+}"}]}