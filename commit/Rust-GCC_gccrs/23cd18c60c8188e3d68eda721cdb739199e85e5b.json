{"sha": "23cd18c60c8188e3d68eda721cdb739199e85e5b", "node_id": "C_kwDOANBUbNoAKDIzY2QxOGM2MGM4MTg4ZTNkNjhlZGE3MjFjZGI3MzkxOTllODVlNWI", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-13T07:13:36Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-13T09:26:22Z"}, "message": "ipa/102714 - IPA SRA eliding volatile\n\nThe following fixes the volatileness check of IPA SRA which was\nlooking at the innermost reference when checking TREE_THIS_VOLATILE\nbut the reference to check is the outermost one.\n\n2021-10-13  Richard Biener  <rguenther@suse.de>\n\n\tPR ipa/102714\n\t* ipa-sra.c (ptr_parm_has_nonarg_uses): Fix volatileness\n\tcheck.\n\n\t* gcc.dg/ipa/pr102714.c: New testcase.", "tree": {"sha": "58d567d17eb1a4346ce4ca215b22d2ff475ea677", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58d567d17eb1a4346ce4ca215b22d2ff475ea677"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23cd18c60c8188e3d68eda721cdb739199e85e5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23cd18c60c8188e3d68eda721cdb739199e85e5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23cd18c60c8188e3d68eda721cdb739199e85e5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23cd18c60c8188e3d68eda721cdb739199e85e5b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78fff8a4da1789521b44a1a94aed756441845647", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78fff8a4da1789521b44a1a94aed756441845647", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78fff8a4da1789521b44a1a94aed756441845647"}], "stats": {"total": 157, "additions": 139, "deletions": 18}, "files": [{"sha": "88036590425d235c4772bdd6d5e630d6a70270d0", "filename": "gcc/ipa-sra.c", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cd18c60c8188e3d68eda721cdb739199e85e5b/gcc%2Fipa-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cd18c60c8188e3d68eda721cdb739199e85e5b/gcc%2Fipa-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-sra.c?ref=23cd18c60c8188e3d68eda721cdb739199e85e5b", "patch": "@@ -1005,15 +1005,17 @@ ptr_parm_has_nonarg_uses (cgraph_node *node, function *fun, tree parm,\n       if (gimple_assign_single_p (stmt))\n \t{\n \t  tree rhs = gimple_assign_rhs1 (stmt);\n-\t  while (handled_component_p (rhs))\n-\t    rhs = TREE_OPERAND (rhs, 0);\n-\t  if (TREE_CODE (rhs) == MEM_REF\n-\t      && TREE_OPERAND (rhs, 0) == name\n-\t      && integer_zerop (TREE_OPERAND (rhs, 1))\n-\t      && types_compatible_p (TREE_TYPE (rhs),\n-\t\t\t\t     TREE_TYPE (TREE_TYPE (name)))\n-\t      && !TREE_THIS_VOLATILE (rhs))\n-\t    uses_ok++;\n+\t  if (!TREE_THIS_VOLATILE (rhs))\n+\t    {\n+\t      while (handled_component_p (rhs))\n+\t\trhs = TREE_OPERAND (rhs, 0);\n+\t      if (TREE_CODE (rhs) == MEM_REF\n+\t\t  && TREE_OPERAND (rhs, 0) == name\n+\t\t  && integer_zerop (TREE_OPERAND (rhs, 1))\n+\t\t  && types_compatible_p (TREE_TYPE (rhs),\n+\t\t\t\t\t TREE_TYPE (TREE_TYPE (name))))\n+\t\tuses_ok++;\n+\t    }\n \t}\n       else if (is_gimple_call (stmt))\n \t{\n@@ -1047,15 +1049,17 @@ ptr_parm_has_nonarg_uses (cgraph_node *node, function *fun, tree parm,\n \t\t  continue;\n \t\t}\n \n-\t      while (handled_component_p (arg))\n-\t\targ = TREE_OPERAND (arg, 0);\n-\t      if (TREE_CODE (arg) == MEM_REF\n-\t\t  && TREE_OPERAND (arg, 0) == name\n-\t\t  && integer_zerop (TREE_OPERAND (arg, 1))\n-\t\t  && types_compatible_p (TREE_TYPE (arg),\n-\t\t\t\t\t TREE_TYPE (TREE_TYPE (name)))\n-\t\t  && !TREE_THIS_VOLATILE (arg))\n-\t\tuses_ok++;\n+\t      if (!TREE_THIS_VOLATILE (arg))\n+\t\t{\n+\t\t  while (handled_component_p (arg))\n+\t\t    arg = TREE_OPERAND (arg, 0);\n+\t\t  if (TREE_CODE (arg) == MEM_REF\n+\t\t      && TREE_OPERAND (arg, 0) == name\n+\t\t      && integer_zerop (TREE_OPERAND (arg, 1))\n+\t\t      && types_compatible_p (TREE_TYPE (arg),\n+\t\t\t\t\t     TREE_TYPE (TREE_TYPE (name))))\n+\t\t    uses_ok++;\n+\t\t}\n \t    }\n \t}\n "}, {"sha": "65dd86f5c1540c5f142f7627fceaa5259f94c264", "filename": "gcc/testsuite/gcc.dg/ipa/pr102714.c", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23cd18c60c8188e3d68eda721cdb739199e85e5b/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr102714.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23cd18c60c8188e3d68eda721cdb739199e85e5b/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr102714.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr102714.c?ref=23cd18c60c8188e3d68eda721cdb739199e85e5b", "patch": "@@ -0,0 +1,117 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -fdump-ipa-sra-details -fdump-tree-optimized\" } */\n+\n+typedef _Bool bool;\n+\n+enum {\n+ false = 0,\n+ true = 1\n+};\n+\n+struct xarray {\n+ unsigned int xa_lock;\n+ unsigned int xa_flags;\n+ void * xa_head;\n+\n+};\n+\n+struct list_head {\n+ struct list_head *next, *prev;\n+};\n+\n+struct callback_head {\n+ struct callback_head *next;\n+ void (*func)(struct callback_head *head);\n+} __attribute__((aligned(sizeof(void *))));\n+\n+struct xa_node {\n+ unsigned char shift;\n+ unsigned char offset;\n+ unsigned char count;\n+ unsigned char nr_values;\n+ struct xa_node *parent;\n+ struct xarray *array;\n+ union {\n+  struct list_head private_list;\n+  struct callback_head callback_head;\n+ };\n+ void *slots[(1UL << (0 ? 4 : 6))];\n+ union {\n+  unsigned long tags[3][((((1UL << (0 ? 4 : 6))) + (64) - 1) / (64))];\n+  unsigned long marks[3][((((1UL << (0 ? 4 : 6))) + (64) - 1) / (64))];\n+ };\n+};\n+\n+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long shift_maxindex(unsigned int shift)\n+{\n+ return ((1UL << (0 ? 4 : 6)) << shift) - 1;\n+}\n+\n+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) unsigned long node_maxindex(const struct xa_node *node)\n+{\n+ return shift_maxindex(node->shift);\n+}\n+\n+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) struct xa_node *entry_to_node(void *ptr)\n+{\n+ return (void *)((unsigned long)ptr & ~2UL);\n+}\n+\n+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) bool radix_tree_is_internal_node(void *ptr)\n+{\n+ return ((unsigned long)ptr & 3UL) ==\n+    2UL;\n+}\n+\n+static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((no_instrument_function)) void *xa_mk_internal(unsigned long v)\n+{\n+ return (void *)((v << 2) | 2);\n+}\n+\n+static unsigned radix_tree_load_root(const struct xarray *root,\n+  struct xa_node **nodep, unsigned long *maxindex)\n+{\n+ struct xa_node *node =\n+ ({\n+    typeof(root->xa_head) ________p1 = ({(*(const volatile typeof(root->xa_head) *)&(root->xa_head)); });\n+    ((typeof(*root->xa_head) *)(________p1));\n+ });\n+\n+ *nodep = node;\n+\n+ if (__builtin_expect(!!(radix_tree_is_internal_node(node)), 1)) {\n+  node = entry_to_node(node);\n+  *maxindex = node_maxindex(node);\n+  return node->shift + (0 ? 4 : 6);\n+ }\n+\n+ *maxindex = 0;\n+ return 0;\n+}\n+\n+void *__radix_tree_lookup(const struct xarray *root,\n+     unsigned long index, struct xa_node **nodep,\n+     void ***slotp)\n+{\n+ struct xa_node *node, *parent;\n+ unsigned long maxindex;\n+\n+ restart:\n+ parent = ((void *)0);\n+ radix_tree_load_root(root, &node, &maxindex);\n+ while (radix_tree_is_internal_node(node)) {\n+\n+  parent = entry_to_node(node);\n+  if (node == xa_mk_internal(256))\n+   goto restart;\n+  if (parent->shift == 0)\n+   break;\n+ }\n+ if (nodep)\n+  *nodep = parent;\n+\n+ return node;\n+}\n+\n+/* { dg-final { scan-ipa-dump-not \"IPA_PARAM_OP_SPLIT\" \"sra\" } } */\n+/* { dg-final { scan-tree-dump \" ={v} \" \"optimized\" } } */"}]}