{"sha": "7c0c194ba4cd9a9bb779075cb977cb319882bc0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2MwYzE5NGJhNGNkOWE5YmI3NzkwNzVjYjk3N2NiMzE5ODgyYmMwYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-31T09:38:40Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-31T09:38:40Z"}, "message": "[multiple changes]\n\n2014-07-31  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch3.adb (Expand_Freeze_Record_Type): Do not build an\n\tinvariant procedure for an internally generated subtype that is\n\tcreated for an object of a class-wide type.\n\n2014-07-31  Vincent Celier  <celier@adacore.com>\n\n\t* prj-nmsc.adb, errutil.adb: Make code similar to Errout.\n\n2014-07-31  Gary Dismukes  <dismukes@adacore.com>\n\n\t* gnat_rm.texi, sem_aux.ads, einfo.ads, sem_util.ads, sem_ch6.adb,\n\texp_disp.adb: Minor reformatting.\n\nFrom-SVN: r213326", "tree": {"sha": "82552f904ea0b183c37c663837df398951281c18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82552f904ea0b183c37c663837df398951281c18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c0c194ba4cd9a9bb779075cb977cb319882bc0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c0c194ba4cd9a9bb779075cb977cb319882bc0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c0c194ba4cd9a9bb779075cb977cb319882bc0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c0c194ba4cd9a9bb779075cb977cb319882bc0b/comments", "author": null, "committer": null, "parents": [{"sha": "1fb63e89dfeff6b42792967c764df89d0ca1d8c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fb63e89dfeff6b42792967c764df89d0ca1d8c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fb63e89dfeff6b42792967c764df89d0ca1d8c6"}], "stats": {"total": 83, "additions": 56, "deletions": 27}, "files": [{"sha": "91dd3cd81aa54aa77d2ea8a7cf9680c1d4be278d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c0c194ba4cd9a9bb779075cb977cb319882bc0b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c0c194ba4cd9a9bb779075cb977cb319882bc0b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7c0c194ba4cd9a9bb779075cb977cb319882bc0b", "patch": "@@ -1,3 +1,18 @@\n+2014-07-31  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_Freeze_Record_Type): Do not build an\n+\tinvariant procedure for an internally generated subtype that is\n+\tcreated for an object of a class-wide type.\n+\n+2014-07-31  Vincent Celier  <celier@adacore.com>\n+\n+\t* prj-nmsc.adb, errutil.adb: Make code similar to Errout.\n+\n+2014-07-31  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* gnat_rm.texi, sem_aux.ads, einfo.ads, sem_util.ads, sem_ch6.adb,\n+\texp_disp.adb: Minor reformatting.\n+\n 2014-07-31  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_ch5.adb, sem_ch3.adb, exp_ch7.adb, exp_util.adb, exp_ch9.adb,"}, {"sha": "9fd46cb7a81069bc3985da4ebcdf1d90e95d6206", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c0c194ba4cd9a9bb779075cb977cb319882bc0b/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c0c194ba4cd9a9bb779075cb977cb319882bc0b/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=7c0c194ba4cd9a9bb779075cb977cb319882bc0b", "patch": "@@ -352,7 +352,7 @@ package Einfo is\n --       defined primitives, and 6) secondary dispatch table with predefined\n --       primitives. The last entity of this list is an access type declaration\n --       used to expand dispatching calls through the primary dispatch table.\n---       For a non-tagged record, contains No_Elist.\n+--       For an untagged record, contains No_Elist.\n \n --    Actual_Subtype (Node17)\n --       Defined in variables, constants, and formal parameters. This is the\n@@ -584,7 +584,7 @@ package Einfo is\n --    Class_Wide_Type (Node9)\n --       Defined in all type entities. For a tagged type or subtype, returns\n --       the corresponding implicitly declared class-wide type. For a\n---       class-wide type, returns itself. Set to Empty for non-tagged types.\n+--       class-wide type, returns itself. Set to Empty for untagged types.\n \n --    Cloned_Subtype (Node16)\n --       Defined in E_Record_Subtype and E_Class_Wide_Subtype entities.\n@@ -937,7 +937,7 @@ package Einfo is\n --       Defined in E_Record_Type and E_Record_Subtype entities. Set in library\n --       level tagged type entities if we are generating statically allocated\n --       dispatch tables. Points to the list of dispatch table wrappers\n---       associated with the tagged type. For a non-tagged record, contains\n+--       associated with the tagged type. For an untagged record, contains\n --       No_Elist.\n \n --    DTC_Entity (Node16)\n@@ -2795,7 +2795,7 @@ package Einfo is\n --    Is_Primitive (Flag218)\n --       Defined in overloadable entities and in generic subprograms. Set to\n --       indicate that this is a primitive operation of some type, which may\n---       be a tagged type or a non-tagged type. Used to verify overriding\n+--       be a tagged type or an untagged type. Used to verify overriding\n --       indicators in bodies.\n \n --    Is_Primitive_Wrapper (Flag195)\n@@ -3474,7 +3474,7 @@ package Einfo is\n --\n --            Rec_Ext.Comp -> Rec_Ext.Parent. ... .Parent.Comp\n --\n---       In base non-tagged types:\n+--       In base untagged types:\n --         Always points to itself except for non-girder discriminants, where\n --         it points to the girder discriminant it renames.\n --"}, {"sha": "e63ebc009cc1326c535100a9d73502c657e49012", "filename": "gcc/ada/errutil.adb", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c0c194ba4cd9a9bb779075cb977cb319882bc0b/gcc%2Fada%2Ferrutil.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c0c194ba4cd9a9bb779075cb977cb319882bc0b/gcc%2Fada%2Ferrutil.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrutil.adb?ref=7c0c194ba4cd9a9bb779075cb977cb319882bc0b", "patch": "@@ -772,14 +772,8 @@ package body Errutil is\n             P := P - 1;\n             Set_Msg_Insertion_Reserved_Word (Text, P);\n \n-         --  Tilde: just remove '~' and do not modify the message further\n-\n-         --  This is peculiar, incompatible with errout, and not documented ???\n-\n          elsif C = '~' then\n-            Set_Msg_Str\n-              (Text (Text'First .. P - 2) & Text (P .. Text'Last));\n-            exit;\n+            Set_Msg_Str (Error_Msg_String (1 .. Error_Msg_Strlen));\n \n          --  Normal character with no special treatment\n "}, {"sha": "44bac81bf37367ec6e02816f022b0d82e1162a29", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c0c194ba4cd9a9bb779075cb977cb319882bc0b/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c0c194ba4cd9a9bb779075cb977cb319882bc0b/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=7c0c194ba4cd9a9bb779075cb977cb319882bc0b", "patch": "@@ -7271,8 +7271,20 @@ package body Exp_Ch3 is\n       --  Check whether individual components have a defined invariant, and add\n       --  the corresponding component invariant checks.\n \n-      Insert_Component_Invariant_Checks\n-        (N, Def_Id, Build_Record_Invariant_Proc (Def_Id, N));\n+      --  Do not create an invariant procedure for some internally generated\n+      --  subtypes, in particular those created for objects of a class-wide\n+      --  type. Such types may have components to which invariant apply, but\n+      --  the corresponding checks will be applied when an object of the parent\n+      --  type is constructed.\n+\n+      --  Such objects will show up in a class-wide postcondition, and the\n+      --  invariant will be checked, if necessary, upon return from the\n+      --  enclosing subprogram.\n+\n+      if not Is_Class_Wide_Equivalent_Type (Def_Id) then\n+         Insert_Component_Invariant_Checks\n+           (N, Def_Id, Build_Record_Invariant_Proc (Def_Id, N));\n+      end if;\n    end Expand_Freeze_Record_Type;\n \n    ------------------------------"}, {"sha": "1b50185fcf821bf59de9fa8e73f4836ada157341", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c0c194ba4cd9a9bb779075cb977cb319882bc0b/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c0c194ba4cd9a9bb779075cb977cb319882bc0b/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=7c0c194ba4cd9a9bb779075cb977cb319882bc0b", "patch": "@@ -3678,7 +3678,7 @@ package body Exp_Disp is\n       --  is frozen, enough must be known about it to build the activation\n       --  record for it, which requires at least that the size of all\n       --  parameters be known. Controlling arguments are by-reference,\n-      --  and therefore the rule only applies to non-tagged types. Typical\n+      --  and therefore the rule only applies to untagged types. Typical\n       --  violation of the rule involves an object declaration that freezes a\n       --  tagged type, when one of its primitive operations has a type in its\n       --  profile whose full view has not been analyzed yet. More complex cases"}, {"sha": "c0bbfb882293dbd3c99f0d4a618ff1790bc5b2b0", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c0c194ba4cd9a9bb779075cb977cb319882bc0b/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c0c194ba4cd9a9bb779075cb977cb319882bc0b/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=7c0c194ba4cd9a9bb779075cb977cb319882bc0b", "patch": "@@ -5330,7 +5330,7 @@ and whose type is potentially persistent. If no argument is given, then\n the pragma is a configuration pragma, and applies to all library level\n objects with no explicit initialization of potentially persistent types.\n \n-A potentially persistent type is a scalar type, or a non-tagged,\n+A potentially persistent type is a scalar type, or an untagged,\n non-discriminated record, all of whose components have no explicit\n initialization and are themselves of a potentially persistent type,\n or an array, all of whose constraints are static, and whose component\n@@ -11136,7 +11136,7 @@ This restriction can be useful in providing an initial filter for code\n developed using SPARK 2005, or in examining legacy code to see how far\n it is from meeting SPARK restrictions.\n \n-The list below summarises the checks that are performed when this\n+The list below summarizes the checks that are performed when this\n restriction is in force:\n @itemize @bullet\n @item No block statements\n@@ -11196,7 +11196,7 @@ restriction is in force:\n @item Modular type modulus must be power of 2\n @item Base not allowed on subtype mark\n @item Unary operators not allowed on modular types (except not)\n-@item Non-tagged record cannot be null\n+@item Untagged record cannot be null\n @item No class-wide operations\n @item Initialization expressions must respect SPARK restrictions\n @item Non-static ranges not allowed except in iteration schemes"}, {"sha": "19c12de053d6663b537a5aa1fb0772a417552a72", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c0c194ba4cd9a9bb779075cb977cb319882bc0b/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c0c194ba4cd9a9bb779075cb977cb319882bc0b/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=7c0c194ba4cd9a9bb779075cb977cb319882bc0b", "patch": "@@ -6212,11 +6212,19 @@ package body Prj.Nmsc is\n \n                   exception\n                      when Use_Error =>\n+\n+                        --  Output message with name of directory. Note that we\n+                        --  use the ~ insertion method here in case the name\n+                        --  has special characters in it.\n+\n+                        Error_Msg_Strlen := Full_Path_Name'Length;\n+                        Error_Msg_String (1 .. Error_Msg_Strlen) :=\n+                          Full_Path_Name.all;\n                         Error_Msg\n                           (Data.Flags,\n-                           \"~could not create \" & Create &\n-                           \" directory \" & Full_Path_Name.all,\n-                           Location, Project);\n+                           \"could not create \" & Create & \" directory ~\",\n+                           Location,\n+                           Project);\n                   end;\n                end if;\n             end if;"}, {"sha": "bb539e2e17aa134a9252debadedf47ebc3ffefca", "filename": "gcc/ada/sem_aux.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c0c194ba4cd9a9bb779075cb977cb319882bc0b/gcc%2Fada%2Fsem_aux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c0c194ba4cd9a9bb779075cb977cb319882bc0b/gcc%2Fada%2Fsem_aux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.ads?ref=7c0c194ba4cd9a9bb779075cb977cb319882bc0b", "patch": "@@ -131,7 +131,7 @@ package Sem_Aux is\n    --  stored discriminants are the same as the actual discriminants of the\n    --  type, and hence this function is the same as First_Discriminant.\n    --\n-   --  For derived non-tagged types that rename discriminants in the root type\n+   --  For derived untagged types that rename discriminants in the root type\n    --  this is the first of the discriminants that occur in the root type. To\n    --  be precise, in this case stored discriminants are entities attached to\n    --  the entity chain of the derived type which are a copy of the"}, {"sha": "51cebd6364127f22071939ac4705e765d0d6b1f3", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c0c194ba4cd9a9bb779075cb977cb319882bc0b/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c0c194ba4cd9a9bb779075cb977cb319882bc0b/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=7c0c194ba4cd9a9bb779075cb977cb319882bc0b", "patch": "@@ -7062,8 +7062,8 @@ package body Sem_Ch6 is\n       Obj_Decl : Node_Id;\n \n    begin\n-      --  This check applies only if we have a subprogram declaration with a\n-      --  non-tagged record type.\n+      --  This check applies only if we have a subprogram declaration with an\n+      --  untagged record type.\n \n       if Nkind (Decl) /= N_Subprogram_Declaration\n         or else not Is_Record_Type (Typ)"}, {"sha": "d088e3eba6a6a8561ec5c7ad3fde9d43cc4f7aa3", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c0c194ba4cd9a9bb779075cb977cb319882bc0b/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c0c194ba4cd9a9bb779075cb977cb319882bc0b/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=7c0c194ba4cd9a9bb779075cb977cb319882bc0b", "patch": "@@ -1236,7 +1236,7 @@ package Sem_Util is\n    --  Used to test if AV is an acceptable formal for an OUT or IN OUT formal.\n    --  Note that the Is_Variable function is not quite the right test because\n    --  this is a case in which conversions whose expression is a variable (in\n-   --  the Is_Variable sense) with a non-tagged type target are considered view\n+   --  the Is_Variable sense) with an untagged type target are considered view\n    --  conversions and hence variables.\n \n    function Is_Partially_Initialized_Type\n@@ -1260,7 +1260,7 @@ package Sem_Util is\n \n    function Is_Potentially_Persistent_Type (T : Entity_Id) return Boolean;\n    --  Determines if type T is a potentially persistent type. A potentially\n-   --  persistent type is defined (recursively) as a scalar type, a non-tagged\n+   --  persistent type is defined (recursively) as a scalar type, an untagged\n    --  record whose components are all of a potentially persistent type, or an\n    --  array with all static constraints whose component type is potentially\n    --  persistent. A private type is potentially persistent if the full type\n@@ -1371,7 +1371,7 @@ package Sem_Util is\n       Use_Original_Node : Boolean := True) return Boolean;\n    --  Determines if the tree referenced by N represents a variable, i.e. can\n    --  appear on the left side of an assignment. There is one situation (formal\n-   --  parameters) in which non-tagged type conversions are also considered\n+   --  parameters) in which untagged type conversions are also considered\n    --  variables, but Is_Variable returns False for such cases, since it has\n    --  no knowledge of the context. Note that this is the point at which\n    --  Assignment_OK is checked, and True is returned for any tree thus marked."}]}