{"sha": "d423df48237b2533a1781d177caf8419e1262d5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQyM2RmNDgyMzdiMjUzM2ExNzgxZDE3N2NhZjg0MTllMTI2MmQ1Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-07-22T08:33:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-07-22T08:33:37Z"}, "message": "re PR c++/49756 (g++ ICE)\n\n\tPR c++/49756\n\t* libiberty.h (stack_limit_increase): New prototype.\n\n\t* stack-limit.c: New file.\n\t* Makefile.in: Regenerate deps.\n\t(CFILES): Add stack-limit.c.\n\t(REQUIRED_OFILES): Add ./stack-limit.$(objext).\n\t* configure.ac (checkfuncs): Add getrlimit and setrlimit.\n\t(AC_CHECK_FUNCS): Likewise.\n\t* configure: Regenerated.\n\t* config.in: Regenerated.\n\n\t* gcc.c (main): Call stack_limit_increase (64MB).\n\t* toplev.c (toplev_main): Likewise.\n\nFrom-SVN: r176617", "tree": {"sha": "2bd70c0d114f37575687da7d0ce9ef17bc9cbcc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bd70c0d114f37575687da7d0ce9ef17bc9cbcc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d423df48237b2533a1781d177caf8419e1262d5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d423df48237b2533a1781d177caf8419e1262d5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d423df48237b2533a1781d177caf8419e1262d5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d423df48237b2533a1781d177caf8419e1262d5b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e05de0a910810a34fce108d85f0574a6be53b6e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e05de0a910810a34fce108d85f0574a6be53b6e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e05de0a910810a34fce108d85f0574a6be53b6e7"}], "stats": {"total": 85, "additions": 66, "deletions": 19}, "files": [{"sha": "d27b2551f15cd96d476172792e07586e3513120e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d423df48237b2533a1781d177caf8419e1262d5b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d423df48237b2533a1781d177caf8419e1262d5b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d423df48237b2533a1781d177caf8419e1262d5b", "patch": "@@ -1,3 +1,9 @@\n+2011-07-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/49756\n+\t* gcc.c (main): Call stack_limit_increase (64MB).\n+\t* toplev.c (toplev_main): Likewise.\n+\n 2011-07-21  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (ix86_expand_call): Call copy_to_mode_reg"}, {"sha": "fc0cb1b6d7547d4a8e30e85d5fcd022b6614f2b9", "filename": "gcc/gcc.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d423df48237b2533a1781d177caf8419e1262d5b/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d423df48237b2533a1781d177caf8419e1262d5b/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=d423df48237b2533a1781d177caf8419e1262d5b", "patch": "@@ -6156,6 +6156,10 @@ main (int argc, char **argv)\n   signal (SIGCHLD, SIG_DFL);\n #endif\n \n+  /* Parsing and gimplification sometimes need quite large stack.\n+     Increase stack size limits if possible.  */\n+  stack_limit_increase (64 * 1024 * 1024);\n+\n   /* Allocate the argument vector.  */\n   alloc_args ();\n "}, {"sha": "de0a58a67731c2f75d81990fae54b05eece077d1", "filename": "gcc/toplev.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d423df48237b2533a1781d177caf8419e1262d5b/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d423df48237b2533a1781d177caf8419e1262d5b/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=d423df48237b2533a1781d177caf8419e1262d5b", "patch": "@@ -1911,6 +1911,10 @@ do_compile (void)\n int\n toplev_main (int argc, char **argv)\n {\n+  /* Parsing and gimplification sometimes need quite large stack.\n+     Increase stack size limits if possible.  */\n+  stack_limit_increase (64 * 1024 * 1024);\n+\n   expandargv (&argc, &argv);\n \n   /* Initialization of GCC's environment, and diagnostics.  */"}, {"sha": "e641ae0c3e9fc5985f8429021c50351d471310d0", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d423df48237b2533a1781d177caf8419e1262d5b/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d423df48237b2533a1781d177caf8419e1262d5b/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=d423df48237b2533a1781d177caf8419e1262d5b", "patch": "@@ -1,3 +1,8 @@\n+2011-07-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/49756\n+\t* libiberty.h (stack_limit_increase): New prototype.\n+\n 2011-07-13  Sriraman Tallam  <tmsriram@google.com>\n \t\n \t* plugin-api.h"}, {"sha": "32eb83a049eefec2a29f9eef2ab3aaadf72379d7", "filename": "include/libiberty.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d423df48237b2533a1781d177caf8419e1262d5b/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d423df48237b2533a1781d177caf8419e1262d5b/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=d423df48237b2533a1781d177caf8419e1262d5b", "patch": "@@ -1,7 +1,7 @@\n /* Function declarations for libiberty.\n \n    Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-   2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n+   2006, 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n    \n    Note - certain prototypes declared in this header file are for\n    functions whoes implementation copyright does not belong to the\n@@ -637,6 +637,9 @@ extern int strverscmp (const char *, const char *);\n /* Set the title of a process */\n extern void setproctitle (const char *name, ...);\n \n+/* Increase stack limit if possible.  */\n+extern void stack_limit_increase (unsigned long);\n+\n #define ARRAY_SIZE(a) (sizeof (a) / sizeof ((a)[0]))\n \n /* Drastically simplified alloca configurator.  If we're using GCC,"}, {"sha": "689d507cdde8e46cc89577044d50cb69de7a2fd7", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d423df48237b2533a1781d177caf8419e1262d5b/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d423df48237b2533a1781d177caf8419e1262d5b/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=d423df48237b2533a1781d177caf8419e1262d5b", "patch": "@@ -1,3 +1,15 @@\n+2011-07-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/49756\n+\t* stack-limit.c: New file.\n+\t* Makefile.in: Regenerate deps.\n+\t(CFILES): Add stack-limit.c.\n+\t(REQUIRED_OFILES): Add ./stack-limit.$(objext).\n+\t* configure.ac (checkfuncs): Add getrlimit and setrlimit.\n+\t(AC_CHECK_FUNCS): Likewise.\n+\t* configure: Regenerated.\n+\t* config.in: Regenerated.\n+\n 2011-07-04  Jason Merrill  <jason@redhat.com>\n \n \t* cp-demangle.c (d_expression): Handle 'this'."}, {"sha": "bcd03fd016725b665e6de962b25bebb7e71db73f", "filename": "libiberty/Makefile.in", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d423df48237b2533a1781d177caf8419e1262d5b/libiberty%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d423df48237b2533a1781d177caf8419e1262d5b/libiberty%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FMakefile.in?ref=d423df48237b2533a1781d177caf8419e1262d5b", "patch": "@@ -2,7 +2,7 @@\n # Originally written by K. Richard Pixley <rich@cygnus.com>.\n #\n # Copyright (C) 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-# 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+# 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n # Free Software Foundation\n #\n # This file is part of the libiberty library.\n@@ -148,10 +148,10 @@ CFILES = alloca.c argv.c asprintf.c atexit.c\t\t\t\t\\\n \t simple-object.c simple-object-coff.c simple-object-elf.c\t\\\n \t simple-object-mach-o.c\t\t\t\t\t\t\\\n          snprintf.c sort.c\t\t\t\t\t\t\\\n-\t spaces.c splay-tree.c stpcpy.c stpncpy.c strcasecmp.c\t\t\\\n-\t strchr.c strdup.c strerror.c strncasecmp.c strncmp.c\t\t\\\n-\t strrchr.c strsignal.c strstr.c strtod.c strtol.c strtoul.c\t\\\n-\t strndup.c strverscmp.c\t\t\t\t\t\t\\\n+\t spaces.c splay-tree.c stack-limit.c stpcpy.c stpncpy.c\t\t\\\n+\t strcasecmp.c strchr.c strdup.c strerror.c strncasecmp.c\t\\\n+\t strncmp.c strrchr.c strsignal.c strstr.c strtod.c strtol.c\t\\\n+\t strtoul.c strndup.c strverscmp.c\t\t\t\t\\\n \ttmpnam.c\t\t\t\t\t\t\t\\\n \tunlink-if-ordinary.c\t\t\t\t\t\t\\\n \tvasprintf.c vfork.c vfprintf.c vprintf.c vsnprintf.c vsprintf.c\t\\\n@@ -183,7 +183,8 @@ REQUIRED_OFILES =\t\t\t\t\t\t\t\\\n \t./simple-object.$(objext) ./simple-object-coff.$(objext)\t\\\n \t./simple-object-elf.$(objext) ./simple-object-mach-o.$(objext)\t\\\n \t./sort.$(objext) ./spaces.$(objext)\t\t\t\t\\\n-\t./splay-tree.$(objext) ./strerror.$(objext)\t\t\t\\\n+\t./splay-tree.$(objext) ./stack-limit.$(objext)\t\t\t\\\n+\t./strerror.$(objext)\t\t\t\t\t\t\\\n \t./strsignal.$(objext) ./unlink-if-ordinary.$(objext)\t\t\\\n \t./xatexit.$(objext) ./xexit.$(objext) ./xmalloc.$(objext)\t\\\n \t./xmemdup.$(objext) ./xstrdup.$(objext) ./xstrerror.$(objext)\t\\\n@@ -1033,6 +1034,12 @@ $(CONFIGURED_OFILES): stamp-picdir\n \telse true; fi\n \t$(COMPILE.c) $(srcdir)/splay-tree.c $(OUTPUT_OPTION)\n \n+./stack-limit.$(objext): $(srcdir)/stack-limit.c config.h\n+\tif [ x\"$(PICFLAG)\" != x ]; then \\\n+\t  $(COMPILE.c) $(PICFLAG) $(srcdir)/stack-limit.c -o pic/$@; \\\n+\telse true; fi\n+\t$(COMPILE.c) $(srcdir)/stack-limit.c $(OUTPUT_OPTION)\n+\n ./stpcpy.$(objext): $(srcdir)/stpcpy.c $(INCDIR)/ansidecl.h\n \tif [ x\"$(PICFLAG)\" != x ]; then \\\n \t  $(COMPILE.c) $(PICFLAG) $(srcdir)/stpcpy.c -o pic/$@; \\"}, {"sha": "17c4c2e4414a2fa1f58f0644316632f8372a43f6", "filename": "libiberty/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d423df48237b2533a1781d177caf8419e1262d5b/libiberty%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d423df48237b2533a1781d177caf8419e1262d5b/libiberty%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig.in?ref=d423df48237b2533a1781d177caf8419e1262d5b", "patch": "@@ -109,6 +109,9 @@\n /* Define to 1 if you have the `getpagesize' function. */\n #undef HAVE_GETPAGESIZE\n \n+/* Define to 1 if you have the `getrlimit' function. */\n+#undef HAVE_GETRLIMIT\n+\n /* Define to 1 if you have the `getrusage' function. */\n #undef HAVE_GETRUSAGE\n \n@@ -205,6 +208,9 @@\n /* Define to 1 if you have the `setproctitle' function. */\n #undef HAVE_SETPROCTITLE\n \n+/* Define to 1 if you have the `setrlimit' function. */\n+#undef HAVE_SETRLIMIT\n+\n /* Define to 1 if you have the `sigsetmask' function. */\n #undef HAVE_SIGSETMASK\n "}, {"sha": "35b8ce5049bb38f10fa06e74d8bfe8731370920f", "filename": "libiberty/configure", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d423df48237b2533a1781d177caf8419e1262d5b/libiberty%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d423df48237b2533a1781d177caf8419e1262d5b/libiberty%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure?ref=d423df48237b2533a1781d177caf8419e1262d5b", "patch": "@@ -5293,10 +5293,10 @@ funcs=\"$funcs setproctitle\"\n \n vars=\"sys_errlist sys_nerr sys_siglist\"\n \n-checkfuncs=\"__fsetlocking canonicalize_file_name dup3 getrusage getsysinfo \\\n- gettimeofday on_exit psignal pstat_getdynamic pstat_getstatic realpath \\\n- sbrk spawnve spawnvpe strerror strsignal sysconf sysctl sysmp table \\\n- times wait3 wait4\"\n+checkfuncs=\"__fsetlocking canonicalize_file_name dup3 getrlimit getrusage \\\n+ getsysinfo gettimeofday on_exit psignal pstat_getdynamic pstat_getstatic \\\n+ realpath setrlimit sbrk spawnve spawnvpe strerror strsignal sysconf sysctl \\\n+ sysmp table times wait3 wait4\"\n \n # These are neither executed nor required, but they help keep\n # autoheader happy without adding a bunch of text to acconfig.h.\n@@ -5306,13 +5306,13 @@ if test \"x\" = \"y\"; then\n     calloc canonicalize_file_name clock \\\n     dup3 \\\n     ffs __fsetlocking \\\n-    getcwd getpagesize getrusage getsysinfo gettimeofday \\\n+    getcwd getpagesize getrlimit getrusage getsysinfo gettimeofday \\\n     index insque \\\n     memchr memcmp memcpy memmem memmove memset mkstemps \\\n     on_exit \\\n     psignal pstat_getdynamic pstat_getstatic putenv \\\n     random realpath rename rindex \\\n-    sbrk setenv setproctitle sigsetmask snprintf spawnve spawnvpe \\\n+    sbrk setenv setproctitle setrlimit sigsetmask snprintf spawnve spawnvpe \\\n      stpcpy stpncpy strcasecmp strchr strdup \\\n      strerror strncasecmp strndup strrchr strsignal strstr strtod strtol \\\n      strtoul strverscmp sysconf sysctl sysmp \\"}, {"sha": "eebd7e991056f629baeb474ae551903306196119", "filename": "libiberty/configure.ac", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d423df48237b2533a1781d177caf8419e1262d5b/libiberty%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d423df48237b2533a1781d177caf8419e1262d5b/libiberty%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure.ac?ref=d423df48237b2533a1781d177caf8419e1262d5b", "patch": "@@ -358,10 +358,10 @@ funcs=\"$funcs setproctitle\"\n \n vars=\"sys_errlist sys_nerr sys_siglist\"\n \n-checkfuncs=\"__fsetlocking canonicalize_file_name dup3 getrusage getsysinfo \\\n- gettimeofday on_exit psignal pstat_getdynamic pstat_getstatic realpath \\\n- sbrk spawnve spawnvpe strerror strsignal sysconf sysctl sysmp table \\\n- times wait3 wait4\"\n+checkfuncs=\"__fsetlocking canonicalize_file_name dup3 getrlimit getrusage \\\n+ getsysinfo gettimeofday on_exit psignal pstat_getdynamic pstat_getstatic \\\n+ realpath setrlimit sbrk spawnve spawnvpe strerror strsignal sysconf sysctl \\\n+ sysmp table times wait3 wait4\"\n \n # These are neither executed nor required, but they help keep\n # autoheader happy without adding a bunch of text to acconfig.h.\n@@ -371,13 +371,13 @@ if test \"x\" = \"y\"; then\n     calloc canonicalize_file_name clock \\\n     dup3 \\\n     ffs __fsetlocking \\\n-    getcwd getpagesize getrusage getsysinfo gettimeofday \\\n+    getcwd getpagesize getrlimit getrusage getsysinfo gettimeofday \\\n     index insque \\\n     memchr memcmp memcpy memmem memmove memset mkstemps \\\n     on_exit \\\n     psignal pstat_getdynamic pstat_getstatic putenv \\\n     random realpath rename rindex \\\n-    sbrk setenv setproctitle sigsetmask snprintf spawnve spawnvpe \\\n+    sbrk setenv setproctitle setrlimit sigsetmask snprintf spawnve spawnvpe \\\n      stpcpy stpncpy strcasecmp strchr strdup \\\n      strerror strncasecmp strndup strrchr strsignal strstr strtod strtol \\\n      strtoul strverscmp sysconf sysctl sysmp \\"}]}