{"sha": "4f73bf20d9c0ad1cd143db39d73f70841dcc1471", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY3M2JmMjBkOWMwYWQxY2QxNDNkYjM5ZDczZjcwODQxZGNjMTQ3MQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-06-26T21:56:40Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-08-25T21:30:38Z"}, "message": "x86: Change CTZ_DEFINED_VALUE_AT_ZERO to return 0/2\n\nChange CTZ_DEFINED_VALUE_AT_ZERO/CTZ_DEFINED_VALUE_AT_ZERO to return 0/2\nto enable table-based clz/ctz optimization:\n\n -- Macro: CLZ_DEFINED_VALUE_AT_ZERO (MODE, VALUE)\n -- Macro: CTZ_DEFINED_VALUE_AT_ZERO (MODE, VALUE)\n     A C expression that indicates whether the architecture defines a\n     value for 'clz' or 'ctz' with a zero operand.  A result of '0'\n     indicates the value is undefined.  If the value is defined for only\n     the RTL expression, the macro should evaluate to '1'; if the value\n     applies also to the corresponding optab entry (which is normally\n     the case if it expands directly into the corresponding RTL), then\n     the macro should evaluate to '2'.  In the cases where the value is\n     defined, VALUE should be set to this value.\n\ngcc/\n\n\tPR target/95863\n\t* config/i386/i386.h (CTZ_DEFINED_VALUE_AT_ZERO): Return 0/2.\n\t(CLZ_DEFINED_VALUE_AT_ZERO): Likewise.\n\ngcc/testsuite/\n\n\tPR target/95863\n\t* gcc.target/i386/pr95863-1.c: New test.\n\t* gcc.target/i386/pr95863-2.c: Likewise.", "tree": {"sha": "abb14f1c1e05a81e0137e53ad7448c7293605fa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abb14f1c1e05a81e0137e53ad7448c7293605fa8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f73bf20d9c0ad1cd143db39d73f70841dcc1471", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f73bf20d9c0ad1cd143db39d73f70841dcc1471", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f73bf20d9c0ad1cd143db39d73f70841dcc1471", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f73bf20d9c0ad1cd143db39d73f70841dcc1471/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "050fc8b27a852007f8bb667999e1c8cfd31f90e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/050fc8b27a852007f8bb667999e1c8cfd31f90e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/050fc8b27a852007f8bb667999e1c8cfd31f90e1"}], "stats": {"total": 78, "additions": 76, "deletions": 2}, "files": [{"sha": "92b7475a7bf1b1146e2ee748d190498d7a896fc1", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f73bf20d9c0ad1cd143db39d73f70841dcc1471/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f73bf20d9c0ad1cd143db39d73f70841dcc1471/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=4f73bf20d9c0ad1cd143db39d73f70841dcc1471", "patch": "@@ -2955,9 +2955,9 @@ extern void debug_dispatch_window (int);\n /* The value at zero is only defined for the BMI instructions\n    LZCNT and TZCNT, not the BSR/BSF insns in the original isa.  */\n #define CTZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE) \\\n-\t((VALUE) = GET_MODE_BITSIZE (MODE), TARGET_BMI ? 1 : 0)\n+\t((VALUE) = GET_MODE_BITSIZE (MODE), TARGET_BMI ? 2 : 0)\n #define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE) \\\n-\t((VALUE) = GET_MODE_BITSIZE (MODE), TARGET_LZCNT ? 1 : 0)\n+\t((VALUE) = GET_MODE_BITSIZE (MODE), TARGET_LZCNT ? 2 : 0)\n \n \n /* Flags returned by ix86_get_callcvt ().  */"}, {"sha": "f3918a1a766266a98cff7aa0444b6921fbe70f9f", "filename": "gcc/testsuite/gcc.target/i386/pr95863-1.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f73bf20d9c0ad1cd143db39d73f70841dcc1471/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95863-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f73bf20d9c0ad1cd143db39d73f70841dcc1471/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95863-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95863-1.c?ref=4f73bf20d9c0ad1cd143db39d73f70841dcc1471", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mbmi\" } */\n+\n+int ctz1 (unsigned x)\n+{\n+  static const char table[32] =\n+    {\n+      0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8,\n+      31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9\n+    };\n+\n+  return table[((unsigned)((x & -x) * 0x077CB531U)) >> 27];\n+}\n+\n+int ctz2 (unsigned x)\n+{\n+#define u 0\n+  static short table[64] =\n+    {\n+      32, 0, 1,12, 2, 6, u,13, 3, u, 7, u, u, u, u,14,\n+      10, 4, u, u, 8, u, u,25, u, u, u, u, u,21,27,15,\n+      31,11, 5, u, u, u, u, u, 9, u, u,24, u, u,20,26,\n+      30, u, u, u, u,23, u,19,29, u,22,18,28,17,16, u\n+    };\n+\n+  x = (x & -x) * 0x0450FBAF;\n+  return table[x >> 26];\n+}\n+\n+int ctz3 (unsigned x)\n+{\n+  static int table[32] =\n+    {\n+      0, 1, 2,24, 3,19, 6,25, 22, 4,20,10,16, 7,12,26,\n+      31,23,18, 5,21, 9,15,11,30,17, 8,14,29,13,28,27\n+    };\n+\n+  if (x == 0) return 32;\n+  x = (x & -x) * 0x04D7651F;\n+  return table[x >> 27];\n+}\n+\n+/* { dg-final { scan-assembler-times \"tzcntl\\t\" 3 } } */\n+/* { dg-final { scan-assembler-times \"andl\\t\" 1 } } */\n+/* { dg-final { scan-assembler-not \"neg\" } } */\n+/* { dg-final { scan-assembler-not \"imul\" } } */\n+/* { dg-final { scan-assembler-not \"shr\" } } */"}, {"sha": "cb56dfc6d9489dbff2492afa6dd23b70f5d7d2e7", "filename": "gcc/testsuite/gcc.target/i386/pr95863-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f73bf20d9c0ad1cd143db39d73f70841dcc1471/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95863-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f73bf20d9c0ad1cd143db39d73f70841dcc1471/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95863-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95863-2.c?ref=4f73bf20d9c0ad1cd143db39d73f70841dcc1471", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O -mbmi\" } */\n+\n+static const unsigned long long magic = 0x03f08c5392f756cdULL;\n+\n+static const char table[64] = {\n+     0,  1, 12,  2, 13, 22, 17,  3,\n+    14, 33, 23, 36, 18, 58, 28,  4,\n+    62, 15, 34, 26, 24, 48, 50, 37,\n+    19, 55, 59, 52, 29, 44, 39,  5,\n+    63, 11, 21, 16, 32, 35, 57, 27,\n+    61, 25, 47, 49, 54, 51, 43, 38,\n+    10, 20, 31, 56, 60, 46, 53, 42,\n+     9, 30, 45, 41,  8, 40,  7,  6,\n+};\n+\n+int ctz4 (unsigned long long x)\n+{\n+  unsigned long long lsb = x & -x;\n+  return table[(lsb * magic) >> 58];\n+}\n+\n+/* { dg-final { scan-assembler-times \"tzcntq\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"andl\\t\" 1 } } */\n+/* { dg-final { scan-assembler-not \"negq\" } } */\n+/* { dg-final { scan-assembler-not \"imulq\" } } */\n+/* { dg-final { scan-assembler-not \"shrq\" } } */"}]}