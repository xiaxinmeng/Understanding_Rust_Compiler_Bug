{"sha": "8f65050e4185eaed8aa074387c3db51955ac806b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY2NTA1MGU0MTg1ZWFlZDhhYTA3NDM4N2MzZGI1MTk1NWFjODA2Yg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-11-01T00:55:24Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-11-01T00:55:24Z"}, "message": "Remove experimental hunk that wasn't supposed to be checked in.\n\nFrom-SVN: r30298", "tree": {"sha": "4a7e634d5ad9baedd5dc87e5937ade36cd182bec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a7e634d5ad9baedd5dc87e5937ade36cd182bec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f65050e4185eaed8aa074387c3db51955ac806b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f65050e4185eaed8aa074387c3db51955ac806b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f65050e4185eaed8aa074387c3db51955ac806b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f65050e4185eaed8aa074387c3db51955ac806b/comments", "author": null, "committer": null, "parents": [{"sha": "5949bdae94f44d218ea5a17b5fed7a43a7467070", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5949bdae94f44d218ea5a17b5fed7a43a7467070", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5949bdae94f44d218ea5a17b5fed7a43a7467070"}], "stats": {"total": 21, "additions": 0, "deletions": 21}, "files": [{"sha": "f6ebb0682972fbefff638d9734a1682d536724dd", "filename": "gcc/cse.c", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f65050e4185eaed8aa074387c3db51955ac806b/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f65050e4185eaed8aa074387c3db51955ac806b/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=8f65050e4185eaed8aa074387c3db51955ac806b", "patch": "@@ -5517,32 +5517,11 @@ cse_insn (insn, libcall_insn)\n \t\t&& GET_CODE (XEXP (XEXP (src_const, 0), 0)) == LABEL_REF\n \t\t&& GET_CODE (XEXP (XEXP (src_const, 0), 1)) == LABEL_REF))\n \t{\n-\t  rtx simplified_src_const;\n \t  tem = find_reg_note (insn, REG_EQUAL, NULL_RTX);\n \t  \n \t  /* Make sure that the rtx is not shared with any other insn.  */\n \t  src_const = copy_rtx (src_const);\n \n-\t  /* Try to simplify SRC_CONST.\n-\n-\t     The primary purpose behind simplifying the note is to allow\n-\t     for easier removal of library call sequences later.  Consider\n-\t     a udiv libcall where we can determine the second argument is\n-\t     a constant.  SRC_CONST would look like:\n-\n-\t     \t(udiv (reg) (const_int 2**n))\n-\n-\t     That RTL expression will simplify into:\n-\n-\t\t(lshiftrt (reg) (const_int n))\n-\n-\t     A target using library calls for division is more likely to\n-\t     have a lshiftrt insn.  Thus, it is more likely that the libcall\n-\t     can be deleted in delete_trivially_dead_insns if we simplify\n-\t     the note.  */\n-\t  simplified_src_const = simplify_rtx (src_const);\n-\t  src_const = simplified_src_const ? simplified_src_const : src_const;\n-\t  \n \t  /* Record the actual constant value in a REG_EQUAL note, making\n \t     a new one if one does not already exist.  */\n \t  if (tem)"}]}