{"sha": "860271ec6cd4c9419f91eac6cea76ea574397d5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYwMjcxZWM2Y2Q0Yzk0MTlmOTFlYWM2Y2VhNzZlYTU3NDM5N2Q1Yw==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2016-08-03T00:42:06Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2016-08-03T00:42:06Z"}, "message": "[RS6000] power8 unaligned fp load/store\n\nAccording to the POWER8 Processor User\u2019s Manual and some\nexperimentation on power8 hardware, unaligned fp load/store on power8\ndoes not invoke the alignment interrupt.\n\n\t* config/rs6000/rs6000.h (SLOW_UNALIGNED_ACCESS): Make scalar\n\tfloat access depend on TARGET_EFFICIENT_UNALIGNED_VSX.\n\t* config/rs6000/rs6000.opt (-mefficient-unaligned-vsx): Renamed\n\tfrom -mefficient-unaligned-vector.  Note that this affects fp too.\n\nFrom-SVN: r239013", "tree": {"sha": "95504cc37370d794e9dff3494b0794392acc1815", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95504cc37370d794e9dff3494b0794392acc1815"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/860271ec6cd4c9419f91eac6cea76ea574397d5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/860271ec6cd4c9419f91eac6cea76ea574397d5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/860271ec6cd4c9419f91eac6cea76ea574397d5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/860271ec6cd4c9419f91eac6cea76ea574397d5c/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cef58349a086b8294d14514c37fbacdf44395d18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cef58349a086b8294d14514c37fbacdf44395d18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cef58349a086b8294d14514c37fbacdf44395d18"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "3da9eb70fff2a026f430e2037e65f90b7e92514f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860271ec6cd4c9419f91eac6cea76ea574397d5c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860271ec6cd4c9419f91eac6cea76ea574397d5c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=860271ec6cd4c9419f91eac6cea76ea574397d5c", "patch": "@@ -1,3 +1,10 @@\n+2016-08-03  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/rs6000.h (SLOW_UNALIGNED_ACCESS): Make scalar\n+\tfloat access depend on TARGET_EFFICIENT_UNALIGNED_VSX.\n+\t* config/rs6000/rs6000.opt (-mefficient-unaligned-vsx): Renamed\n+\tfrom -mefficient-unaligned-vector.  Note that this affects fp too.\n+\n 2016-08-03  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/rs6000.c (rs6000_rtx_costs): Make unaligned mem"}, {"sha": "af77258f1e36c61dbaff2e53efd617c1ba873003", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860271ec6cd4c9419f91eac6cea76ea574397d5c/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860271ec6cd4c9419f91eac6cea76ea574397d5c/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=860271ec6cd4c9419f91eac6cea76ea574397d5c", "patch": "@@ -990,10 +990,10 @@ enum data_align { align_abi, align_opt, align_both };\n    aligned to 4 or 8 bytes.  */\n #define SLOW_UNALIGNED_ACCESS(MODE, ALIGN)\t\t\t\t\\\n   (STRICT_ALIGNMENT\t\t\t\t\t\t\t\\\n-   || (SCALAR_FLOAT_MODE_NOT_VECTOR_P (MODE) && (ALIGN) < 32)\t\t\\\n-   || (!TARGET_EFFICIENT_UNALIGNED_VSX                                  \\\n-       && ((VECTOR_MODE_P (MODE) || FLOAT128_VECTOR_P (MODE))\t\t\\\n-\t   && (((int)(ALIGN)) < VECTOR_ALIGN (MODE)))))\n+   || (!TARGET_EFFICIENT_UNALIGNED_VSX\t\t\t\t\t\\\n+       && ((SCALAR_FLOAT_MODE_NOT_VECTOR_P (MODE) && (ALIGN) < 32)\t\\\n+\t   || ((VECTOR_MODE_P (MODE) || FLOAT128_VECTOR_P (MODE))\t\\\n+\t       && (int) (ALIGN) < VECTOR_ALIGN (MODE)))))\n \n \f\n /* Standard register usage.  */"}, {"sha": "e47f47fb509e13705687c7fead6b7fa77415efad", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860271ec6cd4c9419f91eac6cea76ea574397d5c/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860271ec6cd4c9419f91eac6cea76ea574397d5c/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=860271ec6cd4c9419f91eac6cea76ea574397d5c", "patch": "@@ -211,9 +211,9 @@ mallow-movmisalign\n Target Undocumented Var(TARGET_ALLOW_MOVMISALIGN) Init(-1) Save\n ; Allow the movmisalign in DF/DI vectors\n \n-mefficient-unaligned-vector\n+mefficient-unaligned-vsx\n Target Undocumented Report Mask(EFFICIENT_UNALIGNED_VSX) Var(rs6000_isa_flags)\n-; Consider unaligned VSX accesses to be efficient\n+; Consider unaligned VSX vector and fp accesses to be efficient\n \n mallow-df-permute\n Target Undocumented Var(TARGET_ALLOW_DF_PERMUTE) Save"}]}