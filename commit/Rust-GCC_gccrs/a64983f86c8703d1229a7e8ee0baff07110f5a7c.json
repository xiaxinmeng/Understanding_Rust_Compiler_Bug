{"sha": "a64983f86c8703d1229a7e8ee0baff07110f5a7c", "node_id": "C_kwDOANBUbNoAKGE2NDk4M2Y4NmM4NzAzZDEyMjlhN2U4ZWUwYmFmZjA3MTEwZjVhN2M", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-02-23T16:50:36Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-02-24T11:19:23Z"}, "message": "Add typechecking for range expressions\n\nThis looks up the relevant lang items and constructs their algebraic data\ntypes with the specified range types for the substitution argument.", "tree": {"sha": "0501a0e98734d487f0e6ef90ed220e63353de4fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0501a0e98734d487f0e6ef90ed220e63353de4fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a64983f86c8703d1229a7e8ee0baff07110f5a7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a64983f86c8703d1229a7e8ee0baff07110f5a7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a64983f86c8703d1229a7e8ee0baff07110f5a7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a64983f86c8703d1229a7e8ee0baff07110f5a7c/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c3af63eaeae50ab4ae9e11b8d363fe092707b55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c3af63eaeae50ab4ae9e11b8d363fe092707b55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c3af63eaeae50ab4ae9e11b8d363fe092707b55"}], "stats": {"total": 260, "additions": 260, "deletions": 0}, "files": [{"sha": "69943f9794af8ae781d8913ebbb0409bda42b454", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64983f86c8703d1229a7e8ee0baff07110f5a7c/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64983f86c8703d1229a7e8ee0baff07110f5a7c/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=a64983f86c8703d1229a7e8ee0baff07110f5a7c", "patch": "@@ -95,6 +95,7 @@ GRS_OBJS = \\\n     rust/rust-hir-type-check-type.o \\\n     rust/rust-hir-type-check-struct.o \\\n     rust/rust-hir-type-check-pattern.o \\\n+    rust/rust-hir-type-check-expr.o \\\n     rust/rust-hir-dot-operator.o \\\n     rust/rust-autoderef.o \\\n     rust/rust-substitution-mapper.o \\"}, {"sha": "8b9888179ee2345077cd93d8bfb619debbfaad28", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64983f86c8703d1229a7e8ee0baff07110f5a7c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64983f86c8703d1229a7e8ee0baff07110f5a7c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=a64983f86c8703d1229a7e8ee0baff07110f5a7c", "patch": "@@ -2430,6 +2430,9 @@ class RangeFromToExpr : public RangeExpr\n \n   void accept_vis (HIRFullVisitor &vis) override;\n \n+  std::unique_ptr<Expr> &get_from_expr () { return from; }\n+  std::unique_ptr<Expr> &get_to_expr () { return to; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "e99432a3e436aeb2bdad20ff5122e77105dc777e", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.cc", "status": "added", "additions": 246, "deletions": 0, "changes": 246, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64983f86c8703d1229a7e8ee0baff07110f5a7c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64983f86c8703d1229a7e8ee0baff07110f5a7c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc?ref=a64983f86c8703d1229a7e8ee0baff07110f5a7c", "patch": "@@ -0,0 +1,246 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-hir-type-check-expr.h\"\n+\n+namespace Rust {\n+namespace Resolver {\n+\n+void\n+TypeCheckExpr::visit (HIR::RangeFromToExpr &expr)\n+{\n+  auto lang_item_type = Analysis::RustLangItem::ItemType::RANGE;\n+\n+  DefId respective_lang_item_id = UNKNOWN_DEFID;\n+  bool lang_item_defined\n+    = mappings->lookup_lang_item (lang_item_type, &respective_lang_item_id);\n+\n+  // we need to have it maybe\n+  if (!lang_item_defined)\n+    {\n+      rust_internal_error_at (\n+\texpr.get_locus (), \"unable to find relevant lang item: %s\",\n+\tAnalysis::RustLangItem::ToString (lang_item_type).c_str ());\n+      return;\n+    }\n+\n+  // look it up and it _must_ be a struct definition\n+  HIR::Item *item = mappings->lookup_defid (respective_lang_item_id);\n+  rust_assert (item != nullptr);\n+\n+  TyTy::BaseType *item_type = nullptr;\n+  bool ok\n+    = context->lookup_type (item->get_mappings ().get_hirid (), &item_type);\n+  rust_assert (ok);\n+  rust_assert (item_type->get_kind () == TyTy::TypeKind::ADT);\n+  TyTy::ADTType *adt = static_cast<TyTy::ADTType *> (item_type);\n+\n+  // this is a single generic item lets assert that\n+  rust_assert (adt->get_num_substitutions () == 1);\n+\n+  // resolve the range expressions and these types must unify then we use that\n+  // type to substitute into the ADT\n+  TyTy::BaseType *from_ty\n+    = TypeCheckExpr::Resolve (expr.get_from_expr ().get (), false);\n+  TyTy::BaseType *to_ty\n+    = TypeCheckExpr::Resolve (expr.get_to_expr ().get (), false);\n+  TyTy::BaseType *unified = from_ty->unify (to_ty);\n+\n+  // substitute it in\n+  std::vector<TyTy::SubstitutionArg> subst_mappings;\n+  const TyTy::SubstitutionParamMapping *param_ref = &adt->get_substs ().at (0);\n+  subst_mappings.push_back (TyTy::SubstitutionArg (param_ref, unified));\n+\n+  TyTy::SubstitutionArgumentMappings subst (subst_mappings, expr.get_locus ());\n+  infered = SubstMapperInternal::Resolve (adt, subst);\n+}\n+\n+void\n+TypeCheckExpr::visit (HIR::RangeFromExpr &expr)\n+{\n+  auto lang_item_type = Analysis::RustLangItem::ItemType::RANGE_FROM;\n+\n+  DefId respective_lang_item_id = UNKNOWN_DEFID;\n+  bool lang_item_defined\n+    = mappings->lookup_lang_item (lang_item_type, &respective_lang_item_id);\n+\n+  // we need to have it maybe\n+  if (!lang_item_defined)\n+    {\n+      rust_internal_error_at (\n+\texpr.get_locus (), \"unable to find relevant lang item: %s\",\n+\tAnalysis::RustLangItem::ToString (lang_item_type).c_str ());\n+      return;\n+    }\n+\n+  // look it up and it _must_ be a struct definition\n+  HIR::Item *item = mappings->lookup_defid (respective_lang_item_id);\n+  rust_assert (item != nullptr);\n+\n+  TyTy::BaseType *item_type = nullptr;\n+  bool ok\n+    = context->lookup_type (item->get_mappings ().get_hirid (), &item_type);\n+  rust_assert (ok);\n+  rust_assert (item_type->get_kind () == TyTy::TypeKind::ADT);\n+  TyTy::ADTType *adt = static_cast<TyTy::ADTType *> (item_type);\n+\n+  // this is a single generic item lets assert that\n+  rust_assert (adt->get_num_substitutions () == 1);\n+\n+  // resolve the range expressions and these types must unify then we use that\n+  // type to substitute into the ADT\n+  TyTy::BaseType *from_ty\n+    = TypeCheckExpr::Resolve (expr.get_from_expr ().get (), false);\n+\n+  // substitute it in\n+  std::vector<TyTy::SubstitutionArg> subst_mappings;\n+  const TyTy::SubstitutionParamMapping *param_ref = &adt->get_substs ().at (0);\n+  subst_mappings.push_back (TyTy::SubstitutionArg (param_ref, from_ty));\n+\n+  TyTy::SubstitutionArgumentMappings subst (subst_mappings, expr.get_locus ());\n+  infered = SubstMapperInternal::Resolve (adt, subst);\n+}\n+\n+void\n+TypeCheckExpr::visit (HIR::RangeToExpr &expr)\n+{\n+  auto lang_item_type = Analysis::RustLangItem::ItemType::RANGE_TO;\n+\n+  DefId respective_lang_item_id = UNKNOWN_DEFID;\n+  bool lang_item_defined\n+    = mappings->lookup_lang_item (lang_item_type, &respective_lang_item_id);\n+\n+  // we need to have it maybe\n+  if (!lang_item_defined)\n+    {\n+      rust_internal_error_at (\n+\texpr.get_locus (), \"unable to find relevant lang item: %s\",\n+\tAnalysis::RustLangItem::ToString (lang_item_type).c_str ());\n+      return;\n+    }\n+\n+  // look it up and it _must_ be a struct definition\n+  HIR::Item *item = mappings->lookup_defid (respective_lang_item_id);\n+  rust_assert (item != nullptr);\n+\n+  TyTy::BaseType *item_type = nullptr;\n+  bool ok\n+    = context->lookup_type (item->get_mappings ().get_hirid (), &item_type);\n+  rust_assert (ok);\n+  rust_assert (item_type->get_kind () == TyTy::TypeKind::ADT);\n+  TyTy::ADTType *adt = static_cast<TyTy::ADTType *> (item_type);\n+\n+  // this is a single generic item lets assert that\n+  rust_assert (adt->get_num_substitutions () == 1);\n+\n+  // resolve the range expressions and these types must unify then we use that\n+  // type to substitute into the ADT\n+  TyTy::BaseType *from_ty\n+    = TypeCheckExpr::Resolve (expr.get_to_expr ().get (), false);\n+\n+  // substitute it in\n+  std::vector<TyTy::SubstitutionArg> subst_mappings;\n+  const TyTy::SubstitutionParamMapping *param_ref = &adt->get_substs ().at (0);\n+  subst_mappings.push_back (TyTy::SubstitutionArg (param_ref, from_ty));\n+\n+  TyTy::SubstitutionArgumentMappings subst (subst_mappings, expr.get_locus ());\n+  infered = SubstMapperInternal::Resolve (adt, subst);\n+}\n+\n+void\n+TypeCheckExpr::visit (HIR::RangeFullExpr &expr)\n+{\n+  auto lang_item_type = Analysis::RustLangItem::ItemType::RANGE_FULL;\n+\n+  DefId respective_lang_item_id = UNKNOWN_DEFID;\n+  bool lang_item_defined\n+    = mappings->lookup_lang_item (lang_item_type, &respective_lang_item_id);\n+\n+  // we need to have it maybe\n+  if (!lang_item_defined)\n+    {\n+      rust_internal_error_at (\n+\texpr.get_locus (), \"unable to find relevant lang item: %s\",\n+\tAnalysis::RustLangItem::ToString (lang_item_type).c_str ());\n+      return;\n+    }\n+\n+  // look it up and it _must_ be a struct definition\n+  HIR::Item *item = mappings->lookup_defid (respective_lang_item_id);\n+  rust_assert (item != nullptr);\n+\n+  TyTy::BaseType *item_type = nullptr;\n+  bool ok\n+    = context->lookup_type (item->get_mappings ().get_hirid (), &item_type);\n+  rust_assert (ok);\n+  rust_assert (item_type->is_unit ());\n+\n+  infered = item_type;\n+}\n+\n+void\n+TypeCheckExpr::visit (HIR::RangeFromToInclExpr &expr)\n+{\n+  auto lang_item_type = Analysis::RustLangItem::ItemType::RANGE_INCLUSIVE;\n+\n+  DefId respective_lang_item_id = UNKNOWN_DEFID;\n+  bool lang_item_defined\n+    = mappings->lookup_lang_item (lang_item_type, &respective_lang_item_id);\n+\n+  // we need to have it maybe\n+  if (!lang_item_defined)\n+    {\n+      rust_internal_error_at (\n+\texpr.get_locus (), \"unable to find relevant lang item: %s\",\n+\tAnalysis::RustLangItem::ToString (lang_item_type).c_str ());\n+      return;\n+    }\n+\n+  // look it up and it _must_ be a struct definition\n+  HIR::Item *item = mappings->lookup_defid (respective_lang_item_id);\n+  rust_assert (item != nullptr);\n+\n+  TyTy::BaseType *item_type = nullptr;\n+  bool ok\n+    = context->lookup_type (item->get_mappings ().get_hirid (), &item_type);\n+  rust_assert (ok);\n+  rust_assert (item_type->get_kind () == TyTy::TypeKind::ADT);\n+  TyTy::ADTType *adt = static_cast<TyTy::ADTType *> (item_type);\n+\n+  // this is a single generic item lets assert that\n+  rust_assert (adt->get_num_substitutions () == 1);\n+\n+  // resolve the range expressions and these types must unify then we use that\n+  // type to substitute into the ADT\n+  TyTy::BaseType *from_ty\n+    = TypeCheckExpr::Resolve (expr.get_from_expr ().get (), false);\n+  TyTy::BaseType *to_ty\n+    = TypeCheckExpr::Resolve (expr.get_to_expr ().get (), false);\n+  TyTy::BaseType *unified = from_ty->unify (to_ty);\n+\n+  // substitute it in\n+  std::vector<TyTy::SubstitutionArg> subst_mappings;\n+  const TyTy::SubstitutionParamMapping *param_ref = &adt->get_substs ().at (0);\n+  subst_mappings.push_back (TyTy::SubstitutionArg (param_ref, unified));\n+\n+  TyTy::SubstitutionArgumentMappings subst (subst_mappings, expr.get_locus ());\n+  infered = SubstMapperInternal::Resolve (adt, subst);\n+}\n+\n+} // namespace Resolver\n+} // namespace Rust"}, {"sha": "0c3d229c208d8698fb02fe315d63d913793eba21", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64983f86c8703d1229a7e8ee0baff07110f5a7c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64983f86c8703d1229a7e8ee0baff07110f5a7c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=a64983f86c8703d1229a7e8ee0baff07110f5a7c", "patch": "@@ -1271,6 +1271,16 @@ class TypeCheckExpr : public TypeCheckBase\n       }\n   }\n \n+  void visit (HIR::RangeFromToExpr &expr) override;\n+\n+  void visit (HIR::RangeFromExpr &expr) override;\n+\n+  void visit (HIR::RangeToExpr &expr) override;\n+\n+  void visit (HIR::RangeFullExpr &expr) override;\n+\n+  void visit (HIR::RangeFromToInclExpr &expr) override;\n+\n protected:\n   bool\n   resolve_operator_overload (Analysis::RustLangItem::ItemType lang_item_type,"}]}