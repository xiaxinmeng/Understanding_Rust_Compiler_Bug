{"sha": "5dc7911e0667bee8c5f2ec88327bc41605d2293e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRjNzkxMWUwNjY3YmVlOGM1ZjJlYzg4MzI3YmM0MTYwNWQyMjkzZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-04-29T18:07:23Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-04-29T18:07:23Z"}, "message": "re PR middle-end/39943 (wrong conversion from unsigned int to float)\n\n2009-04-29  Richard Guenther  <rguenther@suse.de>\n\n\tPR target/39943\n\t* config/i386/i386.c (ix86_vectorize_builtin_conversion): Only\n\tallow conversion to signed integers.\n\n\t* lib/target-supports.exp (check_effective_target_vect_uintfloat_cvt):\n\tNew.\n\t(check_effective_target_vect_floatuint_cvt): Likewise.\n\t* gcc.dg/vect/slp-10.c: Adjust.\n\t* gcc.dg/vect/slp-11.c: Adjust.\n\t* gcc.dg/vect/slp-12b.c: Adjust.\n\t* gcc.dg/vect/slp-33.c: Adjust.\n\t* gcc.c-torture/compile/pr39943.c: New testcase.\n\nFrom-SVN: r146984", "tree": {"sha": "9856f56f46f31e71d0aff189f906c550e0a5fabb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9856f56f46f31e71d0aff189f906c550e0a5fabb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5dc7911e0667bee8c5f2ec88327bc41605d2293e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dc7911e0667bee8c5f2ec88327bc41605d2293e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dc7911e0667bee8c5f2ec88327bc41605d2293e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dc7911e0667bee8c5f2ec88327bc41605d2293e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1fe479fd50d258f09443c50fe2547a6e45b0bb5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fe479fd50d258f09443c50fe2547a6e45b0bb5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fe479fd50d258f09443c50fe2547a6e45b0bb5f"}], "stats": {"total": 104, "additions": 86, "deletions": 18}, "files": [{"sha": "c7a97ddde62ea280a7e4f87668b5e2f664168f6a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc7911e0667bee8c5f2ec88327bc41605d2293e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc7911e0667bee8c5f2ec88327bc41605d2293e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5dc7911e0667bee8c5f2ec88327bc41605d2293e", "patch": "@@ -1,3 +1,9 @@\n+2009-04-29  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR target/39943\n+\t* config/i386/i386.c (ix86_vectorize_builtin_conversion): Only\n+\tallow conversion to signed integers.\n+\n 2009-04-29  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-cfg.c (verify_gimple_assign_binary): Allow vector"}, {"sha": "5e7689b837d4e37b5c15a568a33a827aa66624da", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc7911e0667bee8c5f2ec88327bc41605d2293e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc7911e0667bee8c5f2ec88327bc41605d2293e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5dc7911e0667bee8c5f2ec88327bc41605d2293e", "patch": "@@ -25639,7 +25639,9 @@ ix86_veclibabi_acml (enum built_in_function fn, tree type_out, tree type_in)\n static tree\n ix86_vectorize_builtin_conversion (unsigned int code, tree type)\n {\n-  if (TREE_CODE (type) != VECTOR_TYPE)\n+  if (TREE_CODE (type) != VECTOR_TYPE\n+      /* There are only conversions from/to signed integers.  */\n+      || TYPE_UNSIGNED (TREE_TYPE (type)))\n     return NULL_TREE;\n \n   switch (code)"}, {"sha": "4c28af643ef4975c4f782e1ff0eecd904065b105", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc7911e0667bee8c5f2ec88327bc41605d2293e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc7911e0667bee8c5f2ec88327bc41605d2293e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5dc7911e0667bee8c5f2ec88327bc41605d2293e", "patch": "@@ -1,3 +1,15 @@\n+2009-04-29  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR target/39943\n+\t* lib/target-supports.exp (check_effective_target_vect_uintfloat_cvt):\n+\tNew.\n+\t(check_effective_target_vect_floatuint_cvt): Likewise.\n+\t* gcc.dg/vect/slp-10.c: Adjust.\n+\t* gcc.dg/vect/slp-11.c: Adjust.\n+\t* gcc.dg/vect/slp-12b.c: Adjust.\n+\t* gcc.dg/vect/slp-33.c: Adjust.\n+\t* gcc.c-torture/compile/pr39943.c: New testcase.\n+\n 2009-04-29  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/39937"}, {"sha": "537ba437029a035875d51f87eaba123e5f5a2aef", "filename": "gcc/testsuite/gcc.c-torture/compile/pr39943.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc7911e0667bee8c5f2ec88327bc41605d2293e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39943.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc7911e0667bee8c5f2ec88327bc41605d2293e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39943.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39943.c?ref=5dc7911e0667bee8c5f2ec88327bc41605d2293e", "patch": "@@ -0,0 +1,7 @@\n+void gl_fog_index_pixels(float f, unsigned int n, unsigned int index[])\n+{ \n+  unsigned int i;\n+  for (i=0; i<n; i++) \n+    index[i] = (unsigned int) ((float) index[i] + (1.0F-f));\n+}\n+"}, {"sha": "9185c7eeb5299cbed35a83df814635328ec08a3b", "filename": "gcc/testsuite/gcc.dg/vect/slp-10.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc7911e0667bee8c5f2ec88327bc41605d2293e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc7911e0667bee8c5f2ec88327bc41605d2293e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-10.c?ref=5dc7911e0667bee8c5f2ec88327bc41605d2293e", "patch": "@@ -104,11 +104,11 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\"  {target {vect_intfloat_cvt && vect_int_mult} } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\"  {target {{! { vect_intfloat_cvt}} && vect_int_mult} } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\"  {target {{! { vect_intfloat_cvt}} && { ! {vect_int_mult}}} } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 3 \"vect\" {target {vect_intfloat_cvt && vect_int_mult} } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\"  {target {{! { vect_intfloat_cvt}} && vect_int_mult} } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\"  {target {{! { vect_intfloat_cvt}} && { ! {vect_int_mult}}} } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\"  {target {vect_uintfloat_cvt && vect_int_mult} } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\"  {target {{! { vect_uintfloat_cvt}} && vect_int_mult} } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\"  {target {{! { vect_uintfloat_cvt}} && { ! {vect_int_mult}}} } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 3 \"vect\" {target {vect_uintfloat_cvt && vect_int_mult} } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\"  {target {{! { vect_uintfloat_cvt}} && vect_int_mult} } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\"  {target {{! { vect_uintfloat_cvt}} && { ! {vect_int_mult}}} } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n   "}, {"sha": "7e9c89c6b178cee84c6b08fcfa18a233f42e172b", "filename": "gcc/testsuite/gcc.dg/vect/slp-11.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc7911e0667bee8c5f2ec88327bc41605d2293e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc7911e0667bee8c5f2ec88327bc41605d2293e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-11.c?ref=5dc7911e0667bee8c5f2ec88327bc41605d2293e", "patch": "@@ -106,8 +106,8 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\"  { target { { vect_intfloat_cvt && vect_strided_wide } &&  vect_int_mult } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\"  { target { { { ! vect_intfloat_cvt } && vect_strided_wide } &&  vect_int_mult } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\"  { target { { vect_uintfloat_cvt && vect_strided_wide } &&  vect_int_mult } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\"  { target { { { ! vect_uintfloat_cvt } && vect_strided_wide } &&  vect_int_mult } } } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\"  {target  { ! { vect_int_mult && vect_strided_wide } } } } }  */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0  \"vect\"  } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "5c5d133f7702c0de69bd1cef7f8c74baa7b894c8", "filename": "gcc/testsuite/gcc.dg/vect/slp-12b.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc7911e0667bee8c5f2ec88327bc41605d2293e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-12b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc7911e0667bee8c5f2ec88327bc41605d2293e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-12b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-12b.c?ref=5dc7911e0667bee8c5f2ec88327bc41605d2293e", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-require-effective-target vect_intfloat_cvt } */\n+/* { dg-require-effective-target vect_uintfloat_cvt } */\n \n #include <stdarg.h>\n #include <stdio.h>"}, {"sha": "288c748af904e234b27e4407b1b6f8da442fa31c", "filename": "gcc/testsuite/gcc.dg/vect/slp-33.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc7911e0667bee8c5f2ec88327bc41605d2293e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc7911e0667bee8c5f2ec88327bc41605d2293e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-33.c?ref=5dc7911e0667bee8c5f2ec88327bc41605d2293e", "patch": "@@ -102,11 +102,11 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\"  {target {vect_intfloat_cvt && vect_int_mult} } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\"  {target {{! { vect_intfloat_cvt}} && vect_int_mult} } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\"  {target {{! { vect_intfloat_cvt}} && {! {vect_int_mult}}} } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 3 \"vect\" {target {vect_intfloat_cvt && vect_int_mult} } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\"  {target {{! { vect_intfloat_cvt}} && vect_int_mult} } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\"  {target {{! { vect_intfloat_cvt}} && {! {vect_int_mult}}} } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\"  {target {vect_uintfloat_cvt && vect_int_mult} } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\"  {target {{! { vect_uintfloat_cvt}} && vect_int_mult} } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\"  {target {{! { vect_uintfloat_cvt}} && {! {vect_int_mult}}} } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 3 \"vect\" {target {vect_uintfloat_cvt && vect_int_mult} } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\"  {target {{! { vect_uintfloat_cvt}} && vect_int_mult} } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\"  {target {{! { vect_uintfloat_cvt}} && {! {vect_int_mult}}} } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n   "}, {"sha": "92bde7886a9b965bfe176b97988924fc195d8585", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc7911e0667bee8c5f2ec88327bc41605d2293e/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc7911e0667bee8c5f2ec88327bc41605d2293e/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=5dc7911e0667bee8c5f2ec88327bc41605d2293e", "patch": "@@ -1338,7 +1338,7 @@ proc check_effective_target_vect_int { } {\n     return $et_vect_int_saved\n }\n \n-# Return 1 if the target supports int->float conversion \n+# Return 1 if the target supports signed int->float conversion \n #\n \n proc check_effective_target_vect_intfloat_cvt { } {\n@@ -1361,7 +1361,28 @@ proc check_effective_target_vect_intfloat_cvt { } {\n }\n \n \n-# Return 1 if the target supports float->int conversion\n+# Return 1 if the target supports unsigned int->float conversion \n+#\n+\n+proc check_effective_target_vect_uintfloat_cvt { } {\n+    global et_vect_uintfloat_cvt_saved\n+\n+    if [info exists et_vect_uintfloat_cvt_saved] {\n+        verbose \"check_effective_target_vect_uintfloat_cvt: using cached result\" 2\n+    } else {\n+        set et_vect_uintfloat_cvt_saved 0\n+        if { ([istarget powerpc*-*-*]\n+\t      && ![istarget powerpc-*-linux*paired*]) } {\n+           set et_vect_uintfloat_cvt_saved 1\n+        }\n+    }\n+\n+    verbose \"check_effective_target_vect_uintfloat_cvt: returning $et_vect_uintfloat_cvt_saved\" 2\n+    return $et_vect_uintfloat_cvt_saved\n+}\n+\n+\n+# Return 1 if the target supports signed float->int conversion\n #\n \n proc check_effective_target_vect_floatint_cvt { } {\n@@ -1383,6 +1404,26 @@ proc check_effective_target_vect_floatint_cvt { } {\n     return $et_vect_floatint_cvt_saved\n }\n \n+# Return 1 if the target supports unsigned float->int conversion\n+#\n+\n+proc check_effective_target_vect_floatuint_cvt { } {\n+    global et_vect_floatuint_cvt_saved\n+\n+    if [info exists et_vect_floatuint_cvt_saved] {\n+        verbose \"check_effective_target_vect_floatuint_cvt: using cached result\" 2\n+    } else {\n+        set et_vect_floatuint_cvt_saved 0\n+        if { ([istarget powerpc*-*-*]\n+\t      && ![istarget powerpc-*-linux*paired*]) } {\n+           set et_vect_floatuint_cvt_saved 1\n+        }\n+    }\n+\n+    verbose \"check_effective_target_vect_floatuint_cvt: returning $et_vect_floatuint_cvt_saved\" 2\n+    return $et_vect_floatuint_cvt_saved\n+}\n+\n # Return 1 is this is an arm target using 32-bit instructions\n proc check_effective_target_arm32 { } {\n     return [check_no_compiler_messages arm32 assembly {"}]}