{"sha": "997ed914e2c1ca4083affd78fd22569f5e734d08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk3ZWQ5MTRlMmMxY2E0MDgzYWZmZDc4ZmQyMjU2OWY1ZTczNGQwOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-09-11T09:51:29Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-09-11T09:51:29Z"}, "message": "Allocator-extended constructors for container adaptors.\n\n\tPR libstdc++/65092\n\t* include/bits/stl_queue.h (queue, priority_queue): Add\n\tallocator-extended constructors.\n\t* include/bits/stl_stack.h (stack): Likewise.\n\t* testsuite/23_containers/priority_queue/requirements/\n\tuses_allocator.cc: Test allocator-extended constructors.\n\t* testsuite/23_containers/queue/requirements/uses_allocator.cc:\n\tLikewise.\n\t* testsuite/23_containers/stack/requirements/uses_allocator.cc:\n\tLikewise.\n\nFrom-SVN: r227680", "tree": {"sha": "b4f480f65886207a7d569f6ddc85da53a5702d68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4f480f65886207a7d569f6ddc85da53a5702d68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/997ed914e2c1ca4083affd78fd22569f5e734d08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/997ed914e2c1ca4083affd78fd22569f5e734d08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/997ed914e2c1ca4083affd78fd22569f5e734d08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/997ed914e2c1ca4083affd78fd22569f5e734d08/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09fcd8e1491fa20f45b546144e18e201458e925d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09fcd8e1491fa20f45b546144e18e201458e925d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09fcd8e1491fa20f45b546144e18e201458e925d"}], "stats": {"total": 218, "additions": 212, "deletions": 6}, "files": [{"sha": "c4505fd05f0bed387b01f0144d61fac8099585de", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997ed914e2c1ca4083affd78fd22569f5e734d08/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997ed914e2c1ca4083affd78fd22569f5e734d08/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=997ed914e2c1ca4083affd78fd22569f5e734d08", "patch": "@@ -1,3 +1,16 @@\n+2015-09-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/65092\n+\t* include/bits/stl_queue.h (queue, priority_queue): Add\n+\tallocator-extended constructors.\n+\t* include/bits/stl_stack.h (stack): Likewise.\n+\t* testsuite/23_containers/priority_queue/requirements/\n+\tuses_allocator.cc: Test allocator-extended constructors.\n+\t* testsuite/23_containers/queue/requirements/uses_allocator.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/stack/requirements/uses_allocator.cc:\n+\tLikewise.\n+\n 2015-09-10  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/util/testsuite_allocator.h (PointerBase::operator[]): Add."}, {"sha": "f7e5e300d7b4007ad5a0d26aefc8c73c13690d5f", "filename": "libstdc++-v3/include/bits/stl_queue.h", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997ed914e2c1ca4083affd78fd22569f5e734d08/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997ed914e2c1ca4083affd78fd22569f5e734d08/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h?ref=997ed914e2c1ca4083affd78fd22569f5e734d08", "patch": "@@ -110,6 +110,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         friend bool\n         operator<(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&);\n \n+#if __cplusplus >= 201103L\n+      template<typename _Alloc>\n+\tusing _Uses = typename\n+\t  enable_if<uses_allocator<_Sequence, _Alloc>::value>::type;\n+#endif\n+\n     public:\n       typedef typename _Sequence::value_type                value_type;\n       typedef typename _Sequence::reference                 reference;\n@@ -144,6 +150,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       explicit\n       queue(_Sequence&& __c = _Sequence())\n       : c(std::move(__c)) { }\n+\n+      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>\n+\texplicit\n+\tqueue(const _Alloc& __a)\n+\t: c(__a) { }\n+\n+      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>\n+\tqueue(const _Sequence& __c, const _Alloc& __a)\n+\t: c(__c, __a) { }\n+\n+      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>\n+\tqueue(_Sequence&& __c, const _Alloc& __a)\n+\t: c(std::move(__c), __a) { }\n+\n+      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>\n+\tqueue(const queue& __q, const _Alloc& __a)\n+\t: c(__q.c, __a) { }\n+\n+      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>\n+\tqueue(queue&& __q, const _Alloc& __a)\n+\t: c(std::move(__q.c), __a) { }\n #endif\n \n       /**\n@@ -378,6 +405,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_class_requires4(_Compare, bool, _Tp, _Tp,\n \t\t\t\t_BinaryFunctionConcept)\n \n+#if __cplusplus >= 201103L\n+      template<typename _Alloc>\n+\tusing _Uses = typename\n+\t  enable_if<uses_allocator<_Sequence, _Alloc>::value>::type;\n+#endif\n+\n     public:\n       typedef typename _Sequence::value_type                value_type;\n       typedef typename _Sequence::reference                 reference;\n@@ -412,6 +445,32 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t     _Sequence&& __s = _Sequence())\n       : c(std::move(__s)), comp(__x)\n       { std::make_heap(c.begin(), c.end(), comp); }\n+\n+      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>\n+\texplicit\n+\tpriority_queue(const _Alloc& __a)\n+\t: c(__a) { }\n+\n+      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>\n+\tpriority_queue(const _Compare& __x, const _Alloc& __a)\n+\t: c(__x, __a) { }\n+\n+      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>\n+\tpriority_queue(const _Compare& __x, const _Sequence& __c,\n+\t\t       const _Alloc& __a)\n+\t: c(__x, __c, __a) { }\n+\n+      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>\n+\tpriority_queue(const _Compare& __x, _Sequence&& __c, const _Alloc& __a)\n+\t: c(__x, std::move(__c), __a) { }\n+\n+      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>\n+\tpriority_queue(const priority_queue& __q, const _Alloc& __a)\n+\t: c(__q.c, __a) { }\n+\n+      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>\n+\tpriority_queue(priority_queue&& __q, const _Alloc& __a)\n+\t: c(std::move(__q.c), __a) { }\n #endif\n \n       /**"}, {"sha": "0b54d1a637631fabfe4dcac19bedabd9699e8166", "filename": "libstdc++-v3/include/bits/stl_stack.h", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997ed914e2c1ca4083affd78fd22569f5e734d08/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997ed914e2c1ca4083affd78fd22569f5e734d08/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h?ref=997ed914e2c1ca4083affd78fd22569f5e734d08", "patch": "@@ -114,6 +114,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         friend bool\n         operator<(const stack<_Tp1, _Seq1>&, const stack<_Tp1, _Seq1>&);\n \n+#if __cplusplus >= 201103L\n+      template<typename _Alloc>\n+\tusing _Uses = typename\n+\t  enable_if<uses_allocator<_Sequence, _Alloc>::value>::type;\n+#endif\n+\n     public:\n       typedef typename _Sequence::value_type                value_type;\n       typedef typename _Sequence::reference                 reference;\n@@ -142,6 +148,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       explicit\n       stack(_Sequence&& __c = _Sequence())\n       : c(std::move(__c)) { }\n+\n+      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>\n+\texplicit\n+\tstack(const _Alloc& __a)\n+\t: c(__a) { }\n+\n+      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>\n+\tstack(const _Sequence& __c, const _Alloc& __a)\n+\t: c(__c, __a) { }\n+\n+      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>\n+\tstack(_Sequence&& __c, const _Alloc& __a)\n+\t: c(std::move(__c), __a) { }\n+\n+      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>\n+\tstack(const stack& __q, const _Alloc& __a)\n+\t: c(__q.c, __a) { }\n+\n+      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>\n+\tstack(stack&& __q, const _Alloc& __a)\n+\t: c(std::move(__q.c), __a) { }\n #endif\n \n       /**"}, {"sha": "9419ac8d0231d617312eba490263f228f20d1483", "filename": "libstdc++-v3/testsuite/23_containers/priority_queue/requirements/uses_allocator.cc", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997ed914e2c1ca4083affd78fd22569f5e734d08/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Frequirements%2Fuses_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997ed914e2c1ca4083affd78fd22569f5e734d08/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Frequirements%2Fuses_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Frequirements%2Fuses_allocator.cc?ref=997ed914e2c1ca4083affd78fd22569f5e734d08", "patch": "@@ -20,10 +20,51 @@\n \n #include <queue>\n \n+using test_type = std::priority_queue<int>;\n+using container = test_type::container_type;\n+using comp = std::less<container::value_type>;\n+\n template<typename A>\n-  using uses_allocator = std::uses_allocator<std::priority_queue<int>, A>;\n+  using uses_allocator = std::uses_allocator<test_type, A>;\n+\n+template<typename... Args>\n+  using is_constructible = std::is_constructible<test_type, Args...>;\n+\n+// test with invalid allocator\n+using alloc_type = container::allocator_type;\n \n-static_assert( uses_allocator<std::allocator<int>>::value, \"valid allocator\" );\n+static_assert( uses_allocator<alloc_type>::value, \"valid allocator\" );\n \n+static_assert( is_constructible<const alloc_type&>::value,\n+               \"priority_queue(const Alloc&)\" );\n+static_assert( is_constructible<const comp&, const alloc_type&>::value,\n+               \"priority_queue(const Cmp&, const Alloc&)\" );\n+static_assert( is_constructible<const comp&, const container&,\n+                                const alloc_type&>::value,\n+               \"priority_queue(const Cmp&, const Container&, const Alloc&)\" );\n+static_assert( is_constructible<const comp&, container&&,\n+                                const alloc_type&>::value,\n+               \"priority_queue(const Cmp&, const Container&, const Alloc&)\" );\n+static_assert( is_constructible<const test_type&, const alloc_type&>::value,\n+               \"priority_queue(const priority_queue&, const Alloc&)\" );\n+static_assert( is_constructible<test_type&&, const alloc_type&>::value,\n+               \"priority_queue(const priority_queue&, const Alloc&)\" );\n+\n+// test with invalid allocator\n struct X { };\n+\n static_assert( !uses_allocator<X>::value, \"invalid allocator\" );\n+\n+static_assert( !is_constructible<const X&>::value,\n+               \"priority_queue(const NonAlloc&)\" );\n+static_assert( !is_constructible<const comp&, const X&>::value,\n+               \"priority_queue(const Cmp&, const NonAlloc&)\" );\n+static_assert( !is_constructible<const comp&, const container&,\n+                                 const X&>::value,\n+               \"priority_queue(const Cmp&, const Cont&, const NonAlloc&)\" );\n+static_assert( !is_constructible<const comp&, container&&, const X&>::value,\n+               \"priority_queue(const Cmp&, const Cont&, const NonAlloc&)\" );\n+static_assert( !is_constructible<const test_type&, const X&>::value,\n+               \"priority_queue(const priority_queue&, const NonAlloc&)\" );\n+static_assert( !is_constructible<test_type&&, const X&>::value,\n+               \"priority_queue(const priority_queue&, const NonAlloc&)\" );"}, {"sha": "6eb107e0ce879051b0674f2691900f9c06c50984", "filename": "libstdc++-v3/testsuite/23_containers/queue/requirements/uses_allocator.cc", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997ed914e2c1ca4083affd78fd22569f5e734d08/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fqueue%2Frequirements%2Fuses_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997ed914e2c1ca4083affd78fd22569f5e734d08/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fqueue%2Frequirements%2Fuses_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fqueue%2Frequirements%2Fuses_allocator.cc?ref=997ed914e2c1ca4083affd78fd22569f5e734d08", "patch": "@@ -20,10 +20,43 @@\n \n #include <queue>\n \n+using test_type = std::queue<int>;\n+using container = test_type::container_type;\n+\n template<typename A>\n-  using uses_allocator = std::uses_allocator<std::queue<int>, A>;\n+  using uses_allocator = std::uses_allocator<test_type, A>;\n+\n+template<typename... Args>\n+  using is_constructible = std::is_constructible<test_type, Args...>;\n+\n+// test with valid allocator\n+using alloc_type = container::allocator_type;\n \n-static_assert( uses_allocator<std::allocator<int>>::value, \"valid allocator\" );\n+static_assert( uses_allocator<alloc_type>::value, \"valid allocator\" );\n \n+static_assert( is_constructible<const alloc_type&>::value,\n+               \"queue(const Alloc&)\" );\n+static_assert( is_constructible<const container&, const alloc_type&>::value,\n+               \"queue(const container_type&, const Alloc&)\" );\n+static_assert( is_constructible<container&&, const alloc_type&>::value,\n+               \"queue(const container_type&, const Alloc&)\" );\n+static_assert( is_constructible<const test_type&, const alloc_type&>::value,\n+               \"queue(const queue&, const Alloc&)\" );\n+static_assert( is_constructible<test_type&&, const alloc_type&>::value,\n+               \"queue(const queue&, const Alloc&)\" );\n+\n+// test with invalid allocator\n struct X { };\n+\n static_assert( !uses_allocator<X>::value, \"invalid allocator\" );\n+\n+static_assert( !is_constructible<const X&>::value,\n+               \"queue(const NonAlloc&)\" );\n+static_assert( !is_constructible<const container&, const X&>::value,\n+               \"queue(const container_type&, const NonAlloc&)\" );\n+static_assert( !is_constructible<container&&, const X&>::value,\n+               \"queue(const container_type&, const NonAlloc&)\" );\n+static_assert( !is_constructible<const test_type&, const X&>::value,\n+               \"queue(const queue&, const NonAlloc&)\" );\n+static_assert( !is_constructible<test_type&&, const X&>::value,\n+               \"queue(const queue&, const NonAlloc&)\" );"}, {"sha": "91416083fc5eabc9710098fac190f5641dcedf18", "filename": "libstdc++-v3/testsuite/23_containers/stack/requirements/uses_allocator.cc", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997ed914e2c1ca4083affd78fd22569f5e734d08/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fstack%2Frequirements%2Fuses_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997ed914e2c1ca4083affd78fd22569f5e734d08/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fstack%2Frequirements%2Fuses_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fstack%2Frequirements%2Fuses_allocator.cc?ref=997ed914e2c1ca4083affd78fd22569f5e734d08", "patch": "@@ -20,10 +20,43 @@\n \n #include <stack>\n \n+using test_type = std::stack<int>;\n+using container = test_type::container_type;\n+\n template<typename A>\n-  using uses_allocator = std::uses_allocator<std::stack<int>, A>;\n+  using uses_allocator = std::uses_allocator<test_type, A>;\n+\n+template<typename... Args>\n+  using is_constructible = std::is_constructible<test_type, Args...>;\n+\n+// test with valid allocator\n+using alloc_type = container::allocator_type;\n \n-static_assert( uses_allocator<std::allocator<int>>::value, \"valid allocator\" );\n+static_assert( uses_allocator<alloc_type>::value, \"valid allocator\" );\n \n+static_assert( is_constructible<const alloc_type&>::value,\n+               \"stack(const Alloc&)\" );\n+static_assert( is_constructible<const container&, const alloc_type&>::value,\n+               \"stack(const container_type&, const Alloc&)\" );\n+static_assert( is_constructible<container&&, const alloc_type&>::value,\n+               \"stack(const container_type&, const Alloc&)\" );\n+static_assert( is_constructible<const test_type&, const alloc_type&>::value,\n+               \"stack(const stack&, const Alloc&)\" );\n+static_assert( is_constructible<test_type&&, const alloc_type&>::value,\n+               \"stack(const stack&, const Alloc&)\" );\n+\n+// test with invalid allocator\n struct X { };\n+\n static_assert( !uses_allocator<X>::value, \"invalid allocator\" );\n+\n+static_assert( !is_constructible<const X&>::value,\n+               \"stack(const NonAlloc&)\" );\n+static_assert( !is_constructible<const container&, const X&>::value,\n+               \"stack(const container_type&, const NonAlloc&)\" );\n+static_assert( !is_constructible<container&&, const X&>::value,\n+               \"stack(const container_type&, const NonAlloc&)\" );\n+static_assert( !is_constructible<const test_type&, const X&>::value,\n+               \"stack(const stack&, const NonAlloc&)\" );\n+static_assert( !is_constructible<test_type&&, const X&>::value,\n+               \"stack(const stack&, const NonAlloc&)\" );"}]}