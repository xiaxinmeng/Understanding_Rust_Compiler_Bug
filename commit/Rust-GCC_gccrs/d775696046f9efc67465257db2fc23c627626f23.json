{"sha": "d775696046f9efc67465257db2fc23c627626f23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc3NTY5NjA0NmY5ZWZjNjc0NjUyNTdkYjJmYzIzYzYyNzYyNmYyMw==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2016-08-31T17:45:26Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2016-08-31T17:45:26Z"}, "message": "re PR libfortran/77393 (Revision r237735 changed the behavior of F0.0)\n\n2016-08-31  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libgfortran/77393\n\t* io/write.c (kind_from_size): New function to calculate required buffer\n\tsize based on kind type. (select_buffer, select_string): Use new\n\tfunction. (write_float_0, write_real, write_real_g0, write_complex):\n\tAdjust calls to pass parameters needed by new function.\n\nFrom-SVN: r239900", "tree": {"sha": "6b3870600f2d6db2c395522d0de36a904c983524", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b3870600f2d6db2c395522d0de36a904c983524"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d775696046f9efc67465257db2fc23c627626f23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d775696046f9efc67465257db2fc23c627626f23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d775696046f9efc67465257db2fc23c627626f23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d775696046f9efc67465257db2fc23c627626f23/comments", "author": null, "committer": null, "parents": [{"sha": "7663cae227b8337bbcf3355698b2aa43cb1a5f70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7663cae227b8337bbcf3355698b2aa43cb1a5f70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7663cae227b8337bbcf3355698b2aa43cb1a5f70"}], "stats": {"total": 85, "additions": 68, "deletions": 17}, "files": [{"sha": "256805a3db6a410db85002b71c81a614af170a2a", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d775696046f9efc67465257db2fc23c627626f23/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d775696046f9efc67465257db2fc23c627626f23/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=d775696046f9efc67465257db2fc23c627626f23", "patch": "@@ -1,3 +1,11 @@\n+2016-08-31  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libgfortran/77393\n+\t* io/write.c (kind_from_size): New function to calculate required buffer\n+\tsize based on kind type. (select_buffer, select_string): Use new\n+\tfunction. (write_float_0, write_real, write_real_g0, write_complex):\n+\tAdjust calls to pass parameters needed by new function.\n+\n 2016-08-31  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \tPaul Thomas  <pault@gcc.gnu.org>\n "}, {"sha": "d4b1bc895ed30d07c82e3012bcb9c626edcc254d", "filename": "libgfortran/io/write.c", "status": "modified", "additions": 60, "deletions": 17, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d775696046f9efc67465257db2fc23c627626f23/libgfortran%2Fio%2Fwrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d775696046f9efc67465257db2fc23c627626f23/libgfortran%2Fio%2Fwrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite.c?ref=d775696046f9efc67465257db2fc23c627626f23", "patch": "@@ -1357,11 +1357,52 @@ get_precision (st_parameter_dt *dtp, const fnode *f, const char *source, int kin\n     return determine_en_precision (dtp, f, source, kind);\n }\n \n+/* 4932 is the maximum exponent of long double and quad precision, 3\n+   extra characters for the sign, the decimal point, and the\n+   trailing null.  Extra digits are added by the calling functions for\n+   requested precision. Likewise for float and double.  F0 editing produces\n+   full precision output.  */\n+static int\n+size_from_kind (st_parameter_dt *dtp, const fnode *f, int kind)\n+{\n+  int size;\n+\n+  if (f->format == FMT_F && f->u.real.w == 0)\n+    {\n+      switch (kind)\n+      {\n+\tcase 4:\n+\t  size = 38 + 3; /* These constants shown for clarity.  */\n+\t  break;\n+\tcase 8:\n+\t  size = 308 + 3;\n+\t  break;\n+\tcase 10:\n+\t  size = 4932 + 3;\n+\t  break;\n+\tcase 16:\n+\t  size = 4932 + 3;\n+\t  break;\n+\tdefault:\n+\t  internal_error (&dtp->common, \"bad real kind\");\n+\t  break;\n+      }\n+    }\n+  else\n+    size = f->u.real.w + 1; /* One byte for a NULL character.  */\n+\n+  return size;\n+}\n+\n static char *\n-select_buffer (int precision, char *buf, size_t *size)\n+select_buffer (st_parameter_dt *dtp, const fnode *f, int precision,\n+\t       char *buf, size_t *size, int kind)\n {\n   char *result;\n-  *size = BUF_STACK_SZ / 2 + precision;\n+  \n+  /* The buffer needs at least one more byte to allow room for normalizing.  */\n+  *size = size_from_kind (dtp, f, kind) + precision + 1;\n+\n   if (*size > BUF_STACK_SZ)\n      result = xmalloc (*size);\n   else\n@@ -1370,10 +1411,11 @@ select_buffer (int precision, char *buf, size_t *size)\n }\n \n static char *\n-select_string (const fnode *f, char *buf, size_t *size)\n+select_string (st_parameter_dt *dtp, const fnode *f, char *buf, size_t *size,\n+\t       int kind)\n {\n   char *result;\n-  *size = f->u.real.w + 1;\n+  *size = size_from_kind (dtp, f, kind) + f->u.real.d;\n   if (*size > BUF_STACK_SZ)\n      result = xmalloc (*size);\n   else\n@@ -1397,6 +1439,7 @@ write_float_string (st_parameter_dt *dtp, char *fstr, size_t len)\n   memcpy (p, fstr, len);\n }\n \n+\n static void\n write_float_0 (st_parameter_dt *dtp, const fnode *f, const char *source, int kind)\n {\n@@ -1409,10 +1452,10 @@ write_float_0 (st_parameter_dt *dtp, const fnode *f, const char *source, int kin\n   int precision = get_precision (dtp, f, source, kind);\n \n   /* String buffer to hold final result.  */\n-  result = select_string (f, str_buf, &res_len);\n-\n-  buffer = select_buffer (precision, buf_stack, &buf_size);\n-\n+  result = select_string (dtp, f, str_buf, &res_len, kind);\n+  \n+  buffer = select_buffer (dtp, f, precision, buf_stack, &buf_size, kind);\n+  \n   get_float_string (dtp, f, source , kind, 0, buffer,\n                            precision, buf_size, result, &res_len);\n   write_float_string (dtp, result, res_len);\n@@ -1527,11 +1570,11 @@ write_real (st_parameter_dt *dtp, const char *source, int kind)\n   int precision = get_precision (dtp, &f, source, kind);\n \n   /* String buffer to hold final result.  */\n-  result = select_string (&f, str_buf, &res_len);\n-\n-  /* scratch buffer to hold final result.  */\n-  buffer = select_buffer (precision, buf_stack, &buf_size);\n+  result = select_string (dtp, &f, str_buf, &res_len, kind);\n \n+  /* Scratch buffer to hold final result.  */\n+  buffer = select_buffer (dtp, &f, precision, buf_stack, &buf_size, kind);\n+  \n   get_float_string (dtp, &f, source , kind, 1, buffer,\n                            precision, buf_size, result, &res_len);\n   write_float_string (dtp, result, res_len);\n@@ -1572,9 +1615,9 @@ write_real_g0 (st_parameter_dt *dtp, const char *source, int kind, int d)\n   int precision = get_precision (dtp, &f, source, kind);\n \n   /* String buffer to hold final result.  */\n-  result = select_string (&f, str_buf, &res_len);\n+  result = select_string (dtp, &f, str_buf, &res_len, kind);\n \n-  buffer = select_buffer (precision, buf_stack, &buf_size);\n+  buffer = select_buffer (dtp, &f, precision, buf_stack, &buf_size, kind);\n \n   get_float_string (dtp, &f, source , kind, comp_d, buffer,\n                            precision, buf_size, result, &res_len);\n@@ -1620,10 +1663,10 @@ write_complex (st_parameter_dt *dtp, const char *source, int kind, size_t size)\n   int precision = get_precision (dtp, &f, source, kind);\n \n   /* String buffers to hold final result.  */\n-  result1 = select_string (&f, str1_buf, &res_len1);\n-  result2 = select_string (&f, str2_buf, &res_len2);\n+  result1 = select_string (dtp, &f, str1_buf, &res_len1, kind);\n+  result2 = select_string (dtp, &f, str2_buf, &res_len2, kind);\n \n-  buffer = select_buffer (precision, buf_stack, &buf_size);\n+  buffer = select_buffer (dtp, &f, precision, buf_stack, &buf_size, kind);\n \n   get_float_string (dtp, &f, source , kind, 0, buffer,\n                            precision, buf_size, result1, &res_len1);"}]}