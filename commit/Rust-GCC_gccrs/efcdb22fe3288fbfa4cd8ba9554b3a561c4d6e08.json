{"sha": "efcdb22fe3288fbfa4cd8ba9554b3a561c4d6e08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZjZGIyMmZlMzI4OGZiZmE0Y2Q4YmE5NTU0YjNhNTYxYzRkNmUwOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-01-06T20:44:59Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-01-06T20:44:59Z"}, "message": "parser.c (cp_parser_nested_name_specifier_opt): Diagnose invalid template-ids.\n\n\t* parser.c (cp_parser_nested_name_specifier_opt): Diagnose invalid\n\ttemplate-ids.\n\nFrom-SVN: r219269", "tree": {"sha": "9e6a76a93de820d6c2c6f7e3980a979f81f7ca93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e6a76a93de820d6c2c6f7e3980a979f81f7ca93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efcdb22fe3288fbfa4cd8ba9554b3a561c4d6e08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efcdb22fe3288fbfa4cd8ba9554b3a561c4d6e08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efcdb22fe3288fbfa4cd8ba9554b3a561c4d6e08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efcdb22fe3288fbfa4cd8ba9554b3a561c4d6e08/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c6a38536f205e0723600d54bce3aaf05ec107161", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6a38536f205e0723600d54bce3aaf05ec107161", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6a38536f205e0723600d54bce3aaf05ec107161"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "f9322bfd839c3f47255dd082c528294b338499c7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcdb22fe3288fbfa4cd8ba9554b3a561c4d6e08/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcdb22fe3288fbfa4cd8ba9554b3a561c4d6e08/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=efcdb22fe3288fbfa4cd8ba9554b3a561c4d6e08", "patch": "@@ -1,5 +1,8 @@\n 2015-01-06  Jason Merrill  <jason@redhat.com>\n \n+\t* parser.c (cp_parser_nested_name_specifier_opt): Diagnose invalid\n+\ttemplate-ids.\n+\n \tPR c++/64455\n \t* pt.c (type_dependent_expression_p): Handle variable templates.\n \t* constexpr.c (potential_constant_expression_1): Use it."}, {"sha": "5c23a36337a42abd6d55cc759dbe47e831722903", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcdb22fe3288fbfa4cd8ba9554b3a561c4d6e08/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcdb22fe3288fbfa4cd8ba9554b3a561c4d6e08/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=efcdb22fe3288fbfa4cd8ba9554b3a561c4d6e08", "patch": "@@ -5435,6 +5435,46 @@ cp_parser_nested_name_specifier_opt (cp_parser *parser,\n \t      cp_lexer_consume_token (parser->lexer);\n \t    }\n \n+\t  if (cp_lexer_next_token_is (parser->lexer, CPP_TEMPLATE_ID)\n+\t      && cp_lexer_nth_token_is (parser->lexer, 2, CPP_SCOPE))\n+\t    {\n+\t      /* If we have a non-type template-id followed by ::, it can't\n+\t\t possibly be valid.  */\n+\t      token = cp_lexer_peek_token (parser->lexer);\n+\t      tree tid = token->u.tree_check_value->value;\n+\t      if (TREE_CODE (tid) == TEMPLATE_ID_EXPR\n+\t\t  && TREE_CODE (TREE_OPERAND (tid, 0)) != IDENTIFIER_NODE)\n+\t\t{\n+\t\t  tree tmpl = NULL_TREE;\n+\t\t  if (is_overloaded_fn (tid))\n+\t\t    {\n+\t\t      tree fns = get_fns (tid);\n+\t\t      if (!OVL_CHAIN (fns))\n+\t\t\ttmpl = OVL_CURRENT (fns);\n+\t\t      error_at (token->location, \"function template-id %qD \"\n+\t\t\t\t\"in nested-name-specifier\", tid);\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      /* Variable template.  */\n+\t\t      tmpl = TREE_OPERAND (tid, 0);\n+\t\t      gcc_assert (variable_template_p (tmpl));\n+\t\t      error_at (token->location, \"variable template-id %qD \"\n+\t\t\t\t\"in nested-name-specifier\", tid);\n+\t\t    }\n+\t\t  if (tmpl)\n+\t\t    inform (DECL_SOURCE_LOCATION (tmpl),\n+\t\t\t    \"%qD declared here\", tmpl);\n+\n+\t\t  parser->scope = error_mark_node;\n+\t\t  error_p = true;\n+\t\t  /* As below.  */\n+\t\t  success = true;\n+\t\t  cp_lexer_consume_token (parser->lexer);\n+\t\t  cp_lexer_consume_token (parser->lexer);\n+\t\t}\n+\t    }\n+\n \t  if (cp_parser_uncommitted_to_tentative_parse_p (parser))\n \t    break;\n \t  /* If the next token is an identifier, and the one after"}, {"sha": "38bd3705d115672da9e65362dc1d85a81ef15171", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ20.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcdb22fe3288fbfa4cd8ba9554b3a561c4d6e08/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcdb22fe3288fbfa4cd8ba9554b3a561c4d6e08/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ20.C?ref=efcdb22fe3288fbfa4cd8ba9554b3a561c4d6e08", "patch": "@@ -0,0 +1,12 @@\n+// { dg-do compile { target c++14 } }\n+\n+template <bool> struct Sink {};\n+template <class T> void fn();\n+template <class T> T var = T();\n+\n+template <class T> void f()\n+{\n+  Sink<fn<T>::value>();\t\t// { dg-error \"function\" }\n+  Sink<var<T>::value>();\t// { dg-error \"variable\" }\n+}\n+// { dg-prune-output \"template argument\" }"}]}