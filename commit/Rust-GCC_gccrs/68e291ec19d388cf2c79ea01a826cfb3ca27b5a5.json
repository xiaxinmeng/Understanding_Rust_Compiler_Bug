{"sha": "68e291ec19d388cf2c79ea01a826cfb3ca27b5a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhlMjkxZWMxOWQzODhjZjJjNzllYTAxYTgyNmNmYjNjYTI3YjVhNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-10-09T09:35:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-10-09T09:35:23Z"}, "message": "pt.c (reregister_specialization): Use htab_find instead of htab_find_slot with INSERT.\n\n\t* pt.c (reregister_specialization): Use htab_find instead of\n\thtab_find_slot with INSERT.\n\t(maybe_process_partial_specialization, lookup_template_class_1): Change\n\tslot variable type to void ** to avoid aliasing problems.\n\t(register_specialization): Likewise.  Use slot != NULL instead of\n\tmore expensive !optimize_specialization_lookup_p (tmpl) test.\n\nCo-Authored-By: Diego Novillo <dnovillo@google.com>\n\nFrom-SVN: r179719", "tree": {"sha": "b0e08f6eaaa605da771f30c5d5b71d1ed41d500c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0e08f6eaaa605da771f30c5d5b71d1ed41d500c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68e291ec19d388cf2c79ea01a826cfb3ca27b5a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68e291ec19d388cf2c79ea01a826cfb3ca27b5a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68e291ec19d388cf2c79ea01a826cfb3ca27b5a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68e291ec19d388cf2c79ea01a826cfb3ca27b5a5/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "367f06ae31199b827781fff1027c44e37c7392ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/367f06ae31199b827781fff1027c44e37c7392ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/367f06ae31199b827781fff1027c44e37c7392ba"}], "stats": {"total": 55, "additions": 34, "deletions": 21}, "files": [{"sha": "d520bdaaafcf9a8e542f2d78ce723d5f1fc4f04d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e291ec19d388cf2c79ea01a826cfb3ca27b5a5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e291ec19d388cf2c79ea01a826cfb3ca27b5a5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=68e291ec19d388cf2c79ea01a826cfb3ca27b5a5", "patch": "@@ -1,3 +1,13 @@\n+2011-10-09  Jakub Jelinek  <jakub@redhat.com>\n+\t    Diego Novillo  <dnovillo@google.com>\n+\n+\t* pt.c (reregister_specialization): Use htab_find instead of\n+\thtab_find_slot with INSERT.\n+\t(maybe_process_partial_specialization, lookup_template_class_1): Change\n+\tslot variable type to void ** to avoid aliasing problems.\n+\t(register_specialization): Likewise.  Use slot != NULL instead of\n+\tmore expensive !optimize_specialization_lookup_p (tmpl) test.\n+\n 2011-10-08  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/34927"}, {"sha": "c95f1cb64364616885e585eb0a0c3e6640bd5eae", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e291ec19d388cf2c79ea01a826cfb3ca27b5a5/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e291ec19d388cf2c79ea01a826cfb3ca27b5a5/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=68e291ec19d388cf2c79ea01a826cfb3ca27b5a5", "patch": "@@ -892,7 +892,8 @@ maybe_process_partial_specialization (tree type)\n \t\t     instantiation.  Reassign it to the new member\n \t\t     specialization template.  */\n \t\t  spec_entry elt;\n-\t\t  spec_entry **slot;\n+\t\t  spec_entry *entry;\n+\t\t  void **slot;\n \n \t\t  elt.tmpl = most_general_template (tmpl);\n \t\t  elt.args = CLASSTYPE_TI_ARGS (inst);\n@@ -903,10 +904,10 @@ maybe_process_partial_specialization (tree type)\n \t\t  elt.tmpl = tmpl;\n \t\t  elt.args = INNERMOST_TEMPLATE_ARGS (elt.args);\n \n-\t\t  slot = (spec_entry **)\n-\t\t    htab_find_slot (type_specializations, &elt, INSERT);\n-\t\t  *slot = ggc_alloc_spec_entry ();\n-\t\t  **slot = elt;\n+\t\t  slot = htab_find_slot (type_specializations, &elt, INSERT);\n+\t\t  entry = ggc_alloc_spec_entry ();\n+\t\t  *entry = elt;\n+\t\t  *slot = entry;\n \t\t}\n \t      else if (COMPLETE_OR_OPEN_TYPE_P (inst))\n \t\t/* But if we've had an implicit instantiation, that's a\n@@ -1294,7 +1295,7 @@ register_specialization (tree spec, tree tmpl, tree args, bool is_friend,\n \t\t\t hashval_t hash)\n {\n   tree fn;\n-  spec_entry **slot = NULL;\n+  void **slot = NULL;\n   spec_entry elt;\n \n   gcc_assert (TREE_CODE (tmpl) == TEMPLATE_DECL && DECL_P (spec));\n@@ -1327,10 +1328,10 @@ register_specialization (tree spec, tree tmpl, tree args, bool is_friend,\n       if (hash == 0)\n \thash = hash_specialization (&elt);\n \n-      slot = (spec_entry **)\n+      slot =\n \thtab_find_slot_with_hash (decl_specializations, &elt, hash, INSERT);\n       if (*slot)\n-\tfn = (*slot)->spec;\n+\tfn = ((spec_entry *) *slot)->spec;\n       else\n \tfn = NULL_TREE;\n     }\n@@ -1423,11 +1424,12 @@ register_specialization (tree spec, tree tmpl, tree args, bool is_friend,\n       && !check_specialization_namespace (tmpl))\n     DECL_CONTEXT (spec) = DECL_CONTEXT (tmpl);\n \n-  if (!optimize_specialization_lookup_p (tmpl))\n+  if (slot != NULL /* !optimize_specialization_lookup_p (tmpl) */)\n     {\n+      spec_entry *entry = ggc_alloc_spec_entry ();\n       gcc_assert (tmpl && args && spec);\n-      *slot = ggc_alloc_spec_entry ();\n-      **slot = elt;\n+      *entry = elt;\n+      *slot = entry;\n       if (TREE_CODE (spec) == FUNCTION_DECL && DECL_NAMESPACE_SCOPE_P (spec)\n \t  && PRIMARY_TEMPLATE_P (tmpl)\n \t  && DECL_SAVED_TREE (DECL_TEMPLATE_RESULT (tmpl)) == NULL_TREE)\n@@ -1639,19 +1641,19 @@ iterative_hash_template_arg (tree arg, hashval_t val)\n bool\n reregister_specialization (tree spec, tree tinfo, tree new_spec)\n {\n-  spec_entry **slot;\n+  spec_entry *entry;\n   spec_entry elt;\n \n   elt.tmpl = most_general_template (TI_TEMPLATE (tinfo));\n   elt.args = TI_ARGS (tinfo);\n   elt.spec = NULL_TREE;\n \n-  slot = (spec_entry **) htab_find_slot (decl_specializations, &elt, INSERT);\n-  if (*slot)\n+  entry = (spec_entry *) htab_find (decl_specializations, &elt);\n+  if (entry != NULL)\n     {\n-      gcc_assert ((*slot)->spec == spec || (*slot)->spec == new_spec);\n+      gcc_assert (entry->spec == spec || entry->spec == new_spec);\n       gcc_assert (new_spec != NULL_TREE);\n-      (*slot)->spec = new_spec;\n+      entry->spec = new_spec;\n       return 1;\n     }\n \n@@ -7042,7 +7044,7 @@ lookup_template_class_1 (tree d1, tree arglist, tree in_decl, tree context,\n {\n   tree templ = NULL_TREE, parmlist;\n   tree t;\n-  spec_entry **slot;\n+  void **slot;\n   spec_entry *entry;\n   spec_entry elt;\n   hashval_t hash;\n@@ -7480,10 +7482,11 @@ lookup_template_class_1 (tree d1, tree arglist, tree in_decl, tree context,\n       SET_TYPE_TEMPLATE_INFO (t, build_template_info (found, arglist));\n \n       elt.spec = t;\n-      slot = (spec_entry **) htab_find_slot_with_hash (type_specializations,\n-\t\t\t\t\t\t       &elt, hash, INSERT);\n-      *slot = ggc_alloc_spec_entry ();\n-      **slot = elt;\n+      slot = htab_find_slot_with_hash (type_specializations,\n+\t\t\t\t       &elt, hash, INSERT);\n+      entry = ggc_alloc_spec_entry ();\n+      *entry = elt;\n+      *slot = entry;\n \n       /* Note this use of the partial instantiation so we can check it\n \t later in maybe_process_partial_specialization.  */"}]}