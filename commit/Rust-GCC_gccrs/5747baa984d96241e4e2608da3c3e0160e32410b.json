{"sha": "5747baa984d96241e4e2608da3c3e0160e32410b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc0N2JhYTk4NGQ5NjI0MWU0ZTI2MDhkYTNjM2UwMTYwZTMyNDEwYg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-05-05T10:07:24Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-05-05T10:14:25Z"}, "message": "Generate debug info for local dynamic record types\n\nIn Ada you can embed VLAs in local record types and thus end up with\ndynamic offsets in record types, which are not well described in DWARF\nbecause 1) the temporaries generated for them by the gimplifier are\nnaturally marked DECL_IGNORED_P and 2) when the types are referenced\nin nested subprograms, the DWARF back-end does not correctly handle\nthe rewritten references.\n\ngcc/\n\t* dwarf2out.c (loc_list_from_tree_1) <DECL>: During early DWARF, do\n\tnot expand the VALUE_EXPR of variables put in the non-local frame.\n\t* gimplify.c (gimplify_type_sizes) <RECORD_TYPE>: If the type is not\n\tto be ignored for debug info, ensure its variable offsets are not.\ngcc/testsuite/\n\t* gnat.dg/debug8.adb: Minor tweak.\n\t* gnat.dg/debug11.adb: Likewise.\n\t* gnat.dg/debug16.adb: Likewise.\n\t* gnat.dg/debug17.adb: New test.\n\t* gnat.dg/specs/debug1.ads: Minor tweak.", "tree": {"sha": "6c718ca95d9270dbb3f6836ea3140de58533392f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c718ca95d9270dbb3f6836ea3140de58533392f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5747baa984d96241e4e2608da3c3e0160e32410b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5747baa984d96241e4e2608da3c3e0160e32410b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5747baa984d96241e4e2608da3c3e0160e32410b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5747baa984d96241e4e2608da3c3e0160e32410b/comments", "author": null, "committer": null, "parents": [{"sha": "dee371fdd4ae25f837b9b2ded7789d07ed739c9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dee371fdd4ae25f837b9b2ded7789d07ed739c9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dee371fdd4ae25f837b9b2ded7789d07ed739c9e"}], "stats": {"total": 102, "additions": 76, "deletions": 26}, "files": [{"sha": "5b819ab1a923b0045f23de28376e52bd962749c1", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5747baa984d96241e4e2608da3c3e0160e32410b/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5747baa984d96241e4e2608da3c3e0160e32410b/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=5747baa984d96241e4e2608da3c3e0160e32410b", "patch": "@@ -18658,8 +18658,20 @@ loc_list_from_tree_1 (tree loc, int want_address,\n \n     case RESULT_DECL:\n       if (DECL_HAS_VALUE_EXPR_P (loc))\n-\treturn loc_list_from_tree_1 (DECL_VALUE_EXPR (loc),\n-\t\t\t\t     want_address, context);\n+\t{\n+\t  tree value_expr = DECL_VALUE_EXPR (loc);\n+\n+\t  /* Non-local frame structures are DECL_IGNORED_P variables so we need\n+\t     to wait until they get an RTX in order to reference them.  */\n+\t  if (early_dwarf\n+\t      && TREE_CODE (value_expr) == COMPONENT_REF\n+\t      && VAR_P (TREE_OPERAND (value_expr, 0))\n+\t      && DECL_NONLOCAL_FRAME (TREE_OPERAND (value_expr, 0)))\n+\t    ;\n+\t  else\n+\t    return loc_list_from_tree_1 (value_expr, want_address, context);\n+\t}\n+\n       /* FALLTHRU */\n \n     case FUNCTION_DECL:"}, {"sha": "e790f08b23fe5cb4cb3b27bc84d88cd3c5d87466", "filename": "gcc/gimplify.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5747baa984d96241e4e2608da3c3e0160e32410b/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5747baa984d96241e4e2608da3c3e0160e32410b/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=5747baa984d96241e4e2608da3c3e0160e32410b", "patch": "@@ -15141,11 +15141,15 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n void\n gimplify_type_sizes (tree type, gimple_seq *list_p)\n {\n-  tree field, t;\n-\n   if (type == NULL || type == error_mark_node)\n     return;\n \n+  const bool ignored_p\n+    = TYPE_NAME (type)\n+      && TREE_CODE (TYPE_NAME (type)) == TYPE_DECL\n+      && DECL_IGNORED_P (TYPE_NAME (type));\n+  tree t;\n+\n   /* We first do the main variant, then copy into any other variants.  */\n   type = TYPE_MAIN_VARIANT (type);\n \n@@ -15179,9 +15183,7 @@ gimplify_type_sizes (tree type, gimple_seq *list_p)\n       /* Ensure VLA bounds aren't removed, for -O0 they should be variables\n \t with assigned stack slots, for -O1+ -g they should be tracked\n \t by VTA.  */\n-      if (!(TYPE_NAME (type)\n-\t    && TREE_CODE (TYPE_NAME (type)) == TYPE_DECL\n-\t    && DECL_IGNORED_P (TYPE_NAME (type)))\n+      if (!ignored_p\n \t  && TYPE_DOMAIN (type)\n \t  && INTEGRAL_TYPE_P (TYPE_DOMAIN (type)))\n \t{\n@@ -15197,10 +15199,16 @@ gimplify_type_sizes (tree type, gimple_seq *list_p)\n     case RECORD_TYPE:\n     case UNION_TYPE:\n     case QUAL_UNION_TYPE:\n-      for (field = TYPE_FIELDS (type); field; field = DECL_CHAIN (field))\n+      for (tree field = TYPE_FIELDS (type); field; field = DECL_CHAIN (field))\n \tif (TREE_CODE (field) == FIELD_DECL)\n \t  {\n \t    gimplify_one_sizepos (&DECL_FIELD_OFFSET (field), list_p);\n+\t    /* Likewise, ensure variable offsets aren't removed.  */\n+\t    if (!ignored_p\n+\t\t&& (t = DECL_FIELD_OFFSET (field))\n+\t\t&& VAR_P (t)\n+\t\t&& DECL_ARTIFICIAL (t))\n+\t      DECL_IGNORED_P (t) = 0;\n \t    gimplify_one_sizepos (&DECL_SIZE (field), list_p);\n \t    gimplify_one_sizepos (&DECL_SIZE_UNIT (field), list_p);\n \t    gimplify_type_sizes (TREE_TYPE (field), list_p);"}, {"sha": "0fd9e369f2a2a7a4017d14cbfe5cd3117f46dfc8", "filename": "gcc/testsuite/gnat.dg/debug11.adb", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5747baa984d96241e4e2608da3c3e0160e32410b/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5747baa984d96241e4e2608da3c3e0160e32410b/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug11.adb?ref=5747baa984d96241e4e2608da3c3e0160e32410b", "patch": "@@ -1,14 +1,11 @@\n---  { dg-do compile }\n---  { dg-skip-if \"No Dwarf\" { { hppa*-*-hpux* } && { ! lp64 } } }\n---  { dg-options \"-cargs -O0 -g -dA -fgnat-encodings=minimal -margs\" }\n+-- { dg-do compile }\n+-- { dg-skip-if \"No Dwarf\" { { hppa*-*-hpux* } && { ! lp64 } } }\n+-- { dg-options \"-cargs -O0 -g -dA -fgnat-encodings=minimal -margs\" }\n --\n---  This testcase checks that in the DWARF description of the variant type\n---  below, the C discriminant is properly described as unsigned, hence the 0x5a\n---  ('Z') and 0x80 (128) values in the DW_AT_discr_list attribute. If it was\n---  described as signed, we would have instead 90 and -128.\n---\n---  { dg-final { scan-assembler-times \"0x5a.*DW_AT_discr_list\" 1 } }\n---  { dg-final { scan-assembler-times \"0x80.*DW_AT_discr_list\" 1 } }\n+-- This testcase checks that in the DWARF description of the variant type\n+-- below, the C discriminant is properly described as unsigned, hence the 0x5a\n+-- ('Z') and 0x80 (128) values in the DW_AT_discr_list attribute. If it was\n+-- described as signed, we would have instead 90 and -128.\n \n with Ada.Text_IO;\n \n@@ -25,3 +22,6 @@ begin\n    R.I := 0;\n    Ada.Text_IO.Put_Line (\"\" & R.C);\n end Debug11;\n+\n+-- { dg-final { scan-assembler-times \"0x5a.*DW_AT_discr_list\" 1 } }\n+-- { dg-final { scan-assembler-times \"0x80.*DW_AT_discr_list\" 1 } }"}, {"sha": "5695edb616e1bb34f3139bfe7867bdc3f24fd693", "filename": "gcc/testsuite/gnat.dg/debug16.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5747baa984d96241e4e2608da3c3e0160e32410b/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug16.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5747baa984d96241e4e2608da3c3e0160e32410b/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug16.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug16.adb?ref=5747baa984d96241e4e2608da3c3e0160e32410b", "patch": "@@ -1,6 +1,6 @@\n---  { dg-do compile }\n---  { dg-skip-if \"No Dwarf\" { { hppa*-*-hpux* } && { ! lp64 } } }\n---  { dg-options \"-cargs -O0 -g -dA -fgnat-encodings=minimal -margs\" }\n+-- { dg-do compile }\n+-- { dg-skip-if \"No Dwarf\" { { hppa*-*-hpux* } && { ! lp64 } } }\n+-- { dg-options \"-cargs -O0 -g -dA -fgnat-encodings=minimal -margs\" }\n \n procedure Debug16 is\n \n@@ -24,4 +24,4 @@ begin\n    end if;\n end;\n \n---  { dg-final { scan-assembler-times \"DW_AT_discr\" 4 } }\n+-- { dg-final { scan-assembler-times \"DW_AT_discr\" 4 } }"}, {"sha": "4f33ecd4b4b9dc23078e3a6457704737f7fc2869", "filename": "gcc/testsuite/gnat.dg/debug17.adb", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5747baa984d96241e4e2608da3c3e0160e32410b/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug17.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5747baa984d96241e4e2608da3c3e0160e32410b/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug17.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug17.adb?ref=5747baa984d96241e4e2608da3c3e0160e32410b", "patch": "@@ -0,0 +1,27 @@\n+-- { dg-do compile }\n+-- { dg-skip-if \"No Dwarf\" { { hppa*-*-hpux* } && { ! lp64 } } }\n+-- { dg-options \"-cargs -O0 -g -dA -fgnat-encodings=minimal -margs\" }\n+\n+pragma No_Component_Reordering;\n+\n+procedure Debug17 (Number_Of_Bits : Natural) is\n+\n+   type Bitinfos_T is array (Natural range 1 .. Number_Of_Bits) of Float;\n+\n+   type Inner_Record_T is\n+      record\n+         Bitinfos : Bitinfos_T := (others => 1.5);\n+         Check1 : Integer := 1983;\n+         Check2 : Integer := 1995;\n+         Flag : Boolean := False;\n+         Check3 : Integer := 2005;\n+\n+      end record;\n+\n+   Rfield : Inner_Record_T;\n+\n+begin\n+   null;\n+end;\n+\n+-- { dg-final { scan-assembler-not \"DW_AT_data_member_location (0)\" } }"}, {"sha": "6302be39de932fe4934eaf285a2297d4ff272400", "filename": "gcc/testsuite/gnat.dg/debug8.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5747baa984d96241e4e2608da3c3e0160e32410b/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5747baa984d96241e4e2608da3c3e0160e32410b/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug8.adb?ref=5747baa984d96241e4e2608da3c3e0160e32410b", "patch": "@@ -1,7 +1,6 @@\n -- { dg-do compile }\n--- { dg-options \"-cargs -g -fgnat-encodings=minimal -dA -margs\" }\n--- { dg-final { scan-assembler-not \"DW_OP_const4u\" } }\n--- { dg-final { scan-assembler-not \"DW_OP_const8u\" } }\n+-- { dg-skip-if \"No Dwarf\" { { hppa*-*-hpux* } && { ! lp64 } } }\n+-- { dg-options \"-cargs -O0 -g -dA -fgnat-encodings=minimal -margs\" }\n \n --  The DW_AT_byte_size attribute DWARF expression for the\n --  DW_TAG_structure_type DIE that describes Rec_Type contains the -4u literal.\n@@ -27,3 +26,6 @@ procedure Debug8 is\n begin\n    null;\n end Debug8;\n+\n+-- { dg-final { scan-assembler-not \"DW_OP_const4u\" } }\n+-- { dg-final { scan-assembler-not \"DW_OP_const8u\" } }"}, {"sha": "9b67427027c72816341dbb6a6ca6518d56228af6", "filename": "gcc/testsuite/gnat.dg/specs/debug1.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5747baa984d96241e4e2608da3c3e0160e32410b/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdebug1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5747baa984d96241e4e2608da3c3e0160e32410b/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdebug1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdebug1.ads?ref=5747baa984d96241e4e2608da3c3e0160e32410b", "patch": "@@ -1,5 +1,6 @@\n -- { dg-do compile }\n--- { dg-options \"-cargs -g -dA -fgnat-encodings=minimal -margs\" }\n+-- { dg-skip-if \"No Dwarf\" { { hppa*-*-hpux* } && { ! lp64 } } }\n+-- { dg-options \"-cargs -O0 -g -dA -fgnat-encodings=minimal -margs\" }\n \n package Debug1 is\n "}]}