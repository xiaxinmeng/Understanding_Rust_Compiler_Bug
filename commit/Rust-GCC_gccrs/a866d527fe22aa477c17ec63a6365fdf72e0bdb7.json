{"sha": "a866d527fe22aa477c17ec63a6365fdf72e0bdb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg2NmQ1MjdmZTIyYWE0NzdjMTdlYzYzYTYzNjVmZGY3MmUwYmRiNw==", "commit": {"author": {"name": "Chung-Lin Tang", "email": "cltang@codesourcery.com", "date": "2015-03-22T02:39:24Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2015-03-22T02:39:24Z"}, "message": "nios2-protos.h (nios2_adjust_call_address): Adjust function parameter declaration.\n\n2015-03-21  Chung-Lin Tang  <cltang@codesourcery.com>\n\t    Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* config/nios2/nios2-protos.h (nios2_adjust_call_address): Adjust\n\tfunction parameter declaration.\n\t* config/nios2/nios2.md (call,call_value,sibcall,sibcall_value):\n\tUpdate arguments to nios2_adjust_call_address().\n\t(sibcall_internal): Rename from *sibcall.\n\t(sibcall_value_internal): Rename from *sibcall_value.\n\t* config/nios2/nios2.c (nios2_emit_add_constant): New function.\n\t(nios2_large_got_address): Add target temp reg parameter.\n\t(nios2_got_address): Adjust call to nios2_large_got_address, add\n\tforce_reg around it.\n\t(nios2_load_pic_address): Add target temp reg parameter, replace call\n\tto nios2_got_address with corresponding code.\n\t(nios2_legitimize_constant_address): Update call to\n\tnios2_load_pic_address.\n\t(nios2_adjust_call_address): Add temp reg parameter, update PIC case\n\tto use temp reg for PIC loading purposes.\n\t(nios2_asm_output_mi_thunk): Implement TARGET_ASM_OUTPUT_MI_THUNK.\n\t(TARGET_ASM_CAN_OUTPUT_MI_THUNK): Define.\n\t(TARGET_ASM_OUTPUT_MI_THUNK): Likewise.\n\nCo-Authored-By: Sandra Loosemore <sandra@codesourcery.com>\n\nFrom-SVN: r221569", "tree": {"sha": "7a86b85b1c7db73b2604eaf2e9bd7c35e85ab176", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a86b85b1c7db73b2604eaf2e9bd7c35e85ab176"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a866d527fe22aa477c17ec63a6365fdf72e0bdb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a866d527fe22aa477c17ec63a6365fdf72e0bdb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a866d527fe22aa477c17ec63a6365fdf72e0bdb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a866d527fe22aa477c17ec63a6365fdf72e0bdb7/comments", "author": {"login": "cltang", "id": 4055966, "node_id": "MDQ6VXNlcjQwNTU5NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/4055966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cltang", "html_url": "https://github.com/cltang", "followers_url": "https://api.github.com/users/cltang/followers", "following_url": "https://api.github.com/users/cltang/following{/other_user}", "gists_url": "https://api.github.com/users/cltang/gists{/gist_id}", "starred_url": "https://api.github.com/users/cltang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cltang/subscriptions", "organizations_url": "https://api.github.com/users/cltang/orgs", "repos_url": "https://api.github.com/users/cltang/repos", "events_url": "https://api.github.com/users/cltang/events{/privacy}", "received_events_url": "https://api.github.com/users/cltang/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f409ce4cd7ef88db963e63a49df962432c875429", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f409ce4cd7ef88db963e63a49df962432c875429", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f409ce4cd7ef88db963e63a49df962432c875429"}], "stats": {"total": 170, "additions": 146, "deletions": 24}, "files": [{"sha": "856438e42688ac61566f5b7a92bcaff7532f1290", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a866d527fe22aa477c17ec63a6365fdf72e0bdb7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a866d527fe22aa477c17ec63a6365fdf72e0bdb7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a866d527fe22aa477c17ec63a6365fdf72e0bdb7", "patch": "@@ -1,3 +1,26 @@\n+2015-03-21  Chung-Lin Tang  <cltang@codesourcery.com>\n+\t    Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* config/nios2/nios2-protos.h (nios2_adjust_call_address): Adjust\n+\tfunction parameter declaration.\n+\t* config/nios2/nios2.md (call,call_value,sibcall,sibcall_value):\n+\tUpdate arguments to nios2_adjust_call_address().\n+\t(sibcall_internal): Rename from *sibcall.\n+\t(sibcall_value_internal): Rename from *sibcall_value.\n+\t* config/nios2/nios2.c (nios2_emit_add_constant): New function.\n+\t(nios2_large_got_address): Add target temp reg parameter.\n+\t(nios2_got_address): Adjust call to nios2_large_got_address, add\n+\tforce_reg around it.\n+\t(nios2_load_pic_address): Add target temp reg parameter, replace call\n+\tto nios2_got_address with corresponding code.\n+\t(nios2_legitimize_constant_address): Update call to\n+\tnios2_load_pic_address.\n+\t(nios2_adjust_call_address): Add temp reg parameter, update PIC case\n+\tto use temp reg for PIC loading purposes.\n+\t(nios2_asm_output_mi_thunk): Implement TARGET_ASM_OUTPUT_MI_THUNK.\n+\t(TARGET_ASM_CAN_OUTPUT_MI_THUNK): Define.\n+\t(TARGET_ASM_OUTPUT_MI_THUNK): Likewise.\n+\n 2015-03-21  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* doc/invoke.texi (-fno-diagnostics-show-caret): Fix"}, {"sha": "903a9fddf60391f4d9ef1aefebd9df2787481723", "filename": "gcc/config/nios2/nios2-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a866d527fe22aa477c17ec63a6365fdf72e0bdb7/gcc%2Fconfig%2Fnios2%2Fnios2-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a866d527fe22aa477c17ec63a6365fdf72e0bdb7/gcc%2Fconfig%2Fnios2%2Fnios2-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2-protos.h?ref=a866d527fe22aa477c17ec63a6365fdf72e0bdb7", "patch": "@@ -31,7 +31,7 @@ extern void nios2_function_profiler (FILE *, int);\n #ifdef RTX_CODE\n extern int nios2_emit_move_sequence (rtx *, machine_mode);\n extern void nios2_emit_expensive_div (rtx *, machine_mode);\n-extern void nios2_adjust_call_address (rtx *);\n+extern void nios2_adjust_call_address (rtx *, rtx);\n \n extern rtx nios2_get_return_address (int);\n extern void nios2_set_return_address (rtx, rtx);"}, {"sha": "848cc513537d377381cd683d0e486d52c903b24c", "filename": "gcc/config/nios2/nios2.c", "status": "modified", "additions": 116, "deletions": 17, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a866d527fe22aa477c17ec63a6365fdf72e0bdb7/gcc%2Fconfig%2Fnios2%2Fnios2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a866d527fe22aa477c17ec63a6365fdf72e0bdb7/gcc%2Fconfig%2Fnios2%2Fnios2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.c?ref=a866d527fe22aa477c17ec63a6365fdf72e0bdb7", "patch": "@@ -489,6 +489,21 @@ nios2_emit_stack_limit_check (void)\n /* Temp regno used inside prologue/epilogue.  */\n #define TEMP_REG_NUM 8\n \n+static rtx\n+nios2_emit_add_constant (rtx reg, HOST_WIDE_INT immed)\n+{\n+  rtx insn;\n+  if (SMALL_INT (immed))\n+    insn = emit_insn (gen_add2_insn (reg, gen_int_mode (immed, Pmode)));\n+  else\n+    {\n+      rtx tmp = gen_rtx_REG (Pmode, TEMP_REG_NUM);\n+      emit_move_insn (tmp, gen_int_mode (immed, Pmode));\n+      insn = emit_insn (gen_add2_insn (reg, tmp));\n+    }\n+  return insn;\n+}\n+\n void\n nios2_expand_prologue (void)\n {\n@@ -1229,12 +1244,12 @@ nios2_unspec_offset (rtx loc, int unspec)\n \n /* Generate GOT pointer based address with large offset.  */\n static rtx\n-nios2_large_got_address (rtx offset)\n+nios2_large_got_address (rtx offset, rtx tmp)\n {\n-  rtx addr = gen_reg_rtx (Pmode);\n-  emit_insn (gen_add3_insn (addr, pic_offset_table_rtx,\n-\t\t\t    force_reg (Pmode, offset)));\n-  return addr;\n+  if (!tmp)\n+    tmp = gen_reg_rtx (Pmode);\n+  emit_move_insn (tmp, offset);\n+  return gen_rtx_PLUS (Pmode, tmp, pic_offset_table_rtx);\n }\n \n /* Generate a GOT pointer based address.  */\n@@ -1245,7 +1260,7 @@ nios2_got_address (rtx loc, int unspec)\n   crtl->uses_pic_offset_table = 1;\n \n   if (nios2_large_offset_p (unspec))\n-    return nios2_large_got_address (offset);\n+    return force_reg (Pmode, nios2_large_got_address (offset, NULL_RTX));\n \n   return gen_rtx_PLUS (Pmode, pic_offset_table_rtx, offset);\n }\n@@ -1784,13 +1799,17 @@ nios2_load_pic_register (void)\n \n /* Generate a PIC address as a MEM rtx.  */\n static rtx\n-nios2_load_pic_address (rtx sym, int unspec)\n+nios2_load_pic_address (rtx sym, int unspec, rtx tmp)\n {\n   if (flag_pic == 2\n       && GET_CODE (sym) == SYMBOL_REF\n       && nios2_symbol_binds_local_p (sym))\n     /* Under -fPIC, generate a GOTOFF address for local symbols.  */\n-    return nios2_got_address (sym, UNSPEC_PIC_GOTOFF_SYM);\n+    {\n+      rtx offset = nios2_unspec_offset (sym, UNSPEC_PIC_GOTOFF_SYM);\n+      crtl->uses_pic_offset_table = 1;\n+      return nios2_large_got_address (offset, tmp);\n+    }\n \n   return gen_const_mem (Pmode, nios2_got_address (sym, unspec));\n }\n@@ -1828,7 +1847,7 @@ nios2_legitimize_constant_address (rtx addr)\n   if (nios2_tls_symbol_p (base))\n     base = nios2_legitimize_tls_address (base);\n   else if (flag_pic)\n-    base = nios2_load_pic_address (base, UNSPEC_PIC_SYM);\n+    base = nios2_load_pic_address (base, UNSPEC_PIC_SYM, NULL_RTX);\n   else\n     return addr;\n \n@@ -1943,18 +1962,24 @@ nios2_emit_move_sequence (rtx *operands, machine_mode mode)\n \n /* The function with address *ADDR is being called.  If the address\n    needs to be loaded from the GOT, emit the instruction to do so and\n-   update *ADDR to point to the rtx for the loaded value.  */\n+   update *ADDR to point to the rtx for the loaded value.\n+   If REG != NULL_RTX, it is used as the target/scratch register in the\n+   GOT address calculation.  */\n void\n-nios2_adjust_call_address (rtx *call_op)\n+nios2_adjust_call_address (rtx *call_op, rtx reg)\n {\n-  rtx addr;\n-  gcc_assert (MEM_P (*call_op));\n-  addr = XEXP (*call_op, 0);\n+  if (MEM_P (*call_op))\n+    call_op = &XEXP (*call_op, 0);\n+\n+  rtx addr = *call_op;\n   if (flag_pic && CONSTANT_P (addr))\n     {\n-      rtx reg = gen_reg_rtx (Pmode);\n-      emit_move_insn (reg, nios2_load_pic_address (addr, UNSPEC_PIC_CALL_SYM));\n-      XEXP (*call_op, 0) = reg;\n+      rtx tmp = reg ? reg : NULL_RTX;\n+      if (!reg)\n+\treg = gen_reg_rtx (Pmode);\n+      addr = nios2_load_pic_address (addr, UNSPEC_PIC_CALL_SYM, tmp);\n+      emit_insn (gen_rtx_SET (VOIDmode, reg, addr));\n+      *call_op = reg;\n     }\n }\n \n@@ -3319,6 +3344,73 @@ nios2_merge_decl_attributes (tree olddecl, tree newdecl)\n \t\t\t   DECL_ATTRIBUTES (newdecl));\n }\n \n+/* Implement TARGET_ASM_OUTPUT_MI_THUNK.  */\n+static void\n+nios2_asm_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n+\t\t\t   HOST_WIDE_INT delta, HOST_WIDE_INT vcall_offset,\n+\t\t\t   tree function)\n+{\n+  rtx this_rtx, funexp;\n+  rtx_insn *insn;\n+\n+  /* Pretend to be a post-reload pass while generating rtl.  */\n+  reload_completed = 1;\n+\n+  if (flag_pic)\n+    nios2_load_pic_register ();\n+\n+  /* Mark the end of the (empty) prologue.  */\n+  emit_note (NOTE_INSN_PROLOGUE_END);\n+\n+  /* Find the \"this\" pointer.  If the function returns a structure,\n+     the structure return pointer is in $5.  */\n+  if (aggregate_value_p (TREE_TYPE (TREE_TYPE (function)), function))\n+    this_rtx = gen_rtx_REG (Pmode, FIRST_ARG_REGNO + 1);\n+  else\n+    this_rtx = gen_rtx_REG (Pmode, FIRST_ARG_REGNO);\n+\n+  /* Add DELTA to THIS_RTX.  */\n+  nios2_emit_add_constant (this_rtx, delta);\n+\n+  /* If needed, add *(*THIS_RTX + VCALL_OFFSET) to THIS_RTX.  */\n+  if (vcall_offset)\n+    {\n+      rtx tmp;\n+\n+      tmp = gen_rtx_REG (Pmode, 2);\n+      emit_move_insn (tmp, gen_rtx_MEM (Pmode, this_rtx));\n+      nios2_emit_add_constant (tmp, vcall_offset);\n+      emit_move_insn (tmp, gen_rtx_MEM (Pmode, tmp));\n+      emit_insn (gen_add2_insn (this_rtx, tmp));\n+    }\n+\n+  /* Generate a tail call to the target function.  */\n+  if (!TREE_USED (function))\n+    {\n+      assemble_external (function);\n+      TREE_USED (function) = 1;\n+    }\n+  funexp = XEXP (DECL_RTL (function), 0);\n+  /* Function address needs to be constructed under PIC,\n+     provide r2 to use here.  */\n+  nios2_adjust_call_address (&funexp, gen_rtx_REG (Pmode, 2));\n+  insn = emit_call_insn (gen_sibcall_internal (funexp, const0_rtx));\n+  SIBLING_CALL_P (insn) = 1;\n+\n+  /* Run just enough of rest_of_compilation to get the insns emitted.\n+     There's not really enough bulk here to make other passes such as\n+     instruction scheduling worth while.  Note that use_thunk calls\n+     assemble_start_function and assemble_end_function.  */\n+  insn = get_insns ();\n+  shorten_branches (insn);\n+  final_start_function (insn, file, 1);\n+  final (insn, file, 1);\n+  final_end_function ();\n+\n+  /* Stop pretending to be a post-reload pass.  */\n+  reload_completed = 0;\n+}\n+\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_FUNCTION_PROLOGUE\n@@ -3439,6 +3531,13 @@ nios2_merge_decl_attributes (tree olddecl, tree newdecl)\n #undef TARGET_MERGE_DECL_ATTRIBUTES\n #define TARGET_MERGE_DECL_ATTRIBUTES nios2_merge_decl_attributes\n \n+#undef  TARGET_ASM_CAN_OUTPUT_MI_THUNK\n+#define TARGET_ASM_CAN_OUTPUT_MI_THUNK \\\n+  hook_bool_const_tree_hwi_hwi_const_tree_true\n+\n+#undef  TARGET_ASM_OUTPUT_MI_THUNK\n+#define TARGET_ASM_OUTPUT_MI_THUNK nios2_asm_output_mi_thunk\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-nios2.h\""}, {"sha": "7b35d269c1c824e247c3aed06dfa22ea0ec55ef7", "filename": "gcc/config/nios2/nios2.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a866d527fe22aa477c17ec63a6365fdf72e0bdb7/gcc%2Fconfig%2Fnios2%2Fnios2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a866d527fe22aa477c17ec63a6365fdf72e0bdb7/gcc%2Fconfig%2Fnios2%2Fnios2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.md?ref=a866d527fe22aa477c17ec63a6365fdf72e0bdb7", "patch": "@@ -726,15 +726,15 @@\n                     (match_operand 1 \"\" \"\"))\n               (clobber (reg:SI RA_REGNO))])]\n   \"\"\n-  \"nios2_adjust_call_address (&operands[0]);\")\n+  \"nios2_adjust_call_address (&operands[0], NULL_RTX);\")\n \n (define_expand \"call_value\"\n   [(parallel [(set (match_operand 0 \"\" \"\")\n                    (call (match_operand 1 \"\" \"\")\n                          (match_operand 2 \"\" \"\")))\n               (clobber (reg:SI RA_REGNO))])]\n   \"\"\n-  \"nios2_adjust_call_address (&operands[1]);\")\n+  \"nios2_adjust_call_address (&operands[1], NULL_RTX);\")\n \n (define_insn \"*call\"\n   [(call (mem:QI (match_operand:SI 0 \"call_operand\" \"i,r\"))\n@@ -762,17 +762,17 @@\n                     (match_operand 1 \"\" \"\"))\n               (return)])]\n   \"\"\n-  \"nios2_adjust_call_address (&operands[0]);\")\n+  \"nios2_adjust_call_address (&operands[0], NULL_RTX);\")\n \n (define_expand \"sibcall_value\"\n   [(parallel [(set (match_operand 0 \"\" \"\")\n                    (call (match_operand 1 \"\" \"\")\n                          (match_operand 2 \"\" \"\")))\n               (return)])]\n   \"\"\n-  \"nios2_adjust_call_address (&operands[1]);\")\n+  \"nios2_adjust_call_address (&operands[1], NULL_RTX);\")\n \n-(define_insn \"*sibcall\"\n+(define_insn \"sibcall_internal\"\n  [(call (mem:QI (match_operand:SI 0 \"call_operand\" \"i,j\"))\n         (match_operand 1 \"\" \"\"))\n   (return)]\n@@ -782,7 +782,7 @@\n    jmp\\\\t%0\"\n   [(set_attr \"type\" \"control\")])\n \n-(define_insn \"*sibcall_value\"\n+(define_insn \"sibcall_value_internal\"\n  [(set (match_operand 0 \"register_operand\" \"\")\n        (call (mem:QI (match_operand:SI 1 \"call_operand\" \"i,j\"))\n              (match_operand 2 \"\" \"\")))"}]}