{"sha": "c01d6ad948e9e46fbc3695c7c3f45090c4d82db7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAxZDZhZDk0OGU5ZTQ2ZmJjMzY5NWM3YzNmNDUwOTBjNGQ4MmRiNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-07-03T22:11:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-07-03T22:11:21Z"}, "message": "re PR tree-optimization/61682 (wrong code at -O3 on x86_64-linux-gnu)\n\n\tPR tree-optimization/61682\n\t* wide-int.cc (wi::mul_internal): Handle high correctly\n\tfor umul_ppmm using cases and when one of the operands is\n\tequal to 1.\n\n\t* gcc.c-torture/execute/pr61682.c: New test.\n\nFrom-SVN: r212273", "tree": {"sha": "3f9c19a1394d9950b851dd20a8814dd2e5cfd361", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f9c19a1394d9950b851dd20a8814dd2e5cfd361"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c01d6ad948e9e46fbc3695c7c3f45090c4d82db7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c01d6ad948e9e46fbc3695c7c3f45090c4d82db7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c01d6ad948e9e46fbc3695c7c3f45090c4d82db7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c01d6ad948e9e46fbc3695c7c3f45090c4d82db7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f707da16f714f7fe5a42391748212c84dfec639b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f707da16f714f7fe5a42391748212c84dfec639b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f707da16f714f7fe5a42391748212c84dfec639b"}], "stats": {"total": 49, "additions": 48, "deletions": 1}, "files": [{"sha": "c1a2afb0d29bfdb0e3543d99cc9ba356128f35c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01d6ad948e9e46fbc3695c7c3f45090c4d82db7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01d6ad948e9e46fbc3695c7c3f45090c4d82db7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c01d6ad948e9e46fbc3695c7c3f45090c4d82db7", "patch": "@@ -1,3 +1,10 @@\n+2014-07-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/61682\n+\t* wide-int.cc (wi::mul_internal): Handle high correctly\n+\tfor umul_ppmm using cases and when one of the operands is\n+\tequal to 1.\n+\n 2014-07-03  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.md (rotl<mode>3, ashl<mode>3, lshr<mode>3,"}, {"sha": "e9cfe2befc83642a36db1ef2367e10e99b457658", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01d6ad948e9e46fbc3695c7c3f45090c4d82db7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01d6ad948e9e46fbc3695c7c3f45090c4d82db7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c01d6ad948e9e46fbc3695c7c3f45090c4d82db7", "patch": "@@ -1,3 +1,8 @@\n+2014-07-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/61682\n+\t* gcc.c-torture/execute/pr61682.c: New test.\n+\n 2014-07-03  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* gcc.target/powerpc/shift-dot.c: New test."}, {"sha": "a5ab29d237042efeeeb981af209161c6a77df14a", "filename": "gcc/testsuite/gcc.c-torture/execute/pr61682.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01d6ad948e9e46fbc3695c7c3f45090c4d82db7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr61682.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01d6ad948e9e46fbc3695c7c3f45090c4d82db7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr61682.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr61682.c?ref=c01d6ad948e9e46fbc3695c7c3f45090c4d82db7", "patch": "@@ -0,0 +1,17 @@\n+/* PR tree-optimization/61682 */\n+\n+int a, b;\n+static int *c = &b;\n+\n+int\n+main ()\n+{\n+  int *d = &a;\n+  for (a = 0; a < 12; a++)\n+    *c |= *d / 9;\n+\n+  if (b != 1)\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "c33d10ea20d7b7d4e3f36d3b5ce2c528d3ad80aa", "filename": "gcc/wide-int.cc", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01d6ad948e9e46fbc3695c7c3f45090c4d82db7/gcc%2Fwide-int.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01d6ad948e9e46fbc3695c7c3f45090c4d82db7/gcc%2Fwide-int.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int.cc?ref=c01d6ad948e9e46fbc3695c7c3f45090c4d82db7", "patch": "@@ -1,5 +1,5 @@\n /* Operations with very long integers.\n-   Copyright (C) 2012-2013 Free Software Foundation, Inc.\n+   Copyright (C) 2012-2014 Free Software Foundation, Inc.\n    Contributed by Kenneth Zadeck <zadeck@naturalbridge.com>\n \n This file is part of GCC.\n@@ -1282,6 +1282,12 @@ wi::mul_internal (HOST_WIDE_INT *val, const HOST_WIDE_INT *op1val,\n \t  && wi::fits_uhwi_p (op1)\n \t  && wi::fits_uhwi_p (op2))\n \t{\n+\t  /* This case never overflows.  */\n+\t  if (high)\n+\t    {\n+\t      val[0] = 0;\n+\t      return 1;\n+\t    }\n \t  umul_ppmm (val[1], val[0], op1.ulow (), op2.ulow ());\n \t  return 1 + (val[1] != 0 || val[0] < 0);\n \t}\n@@ -1294,6 +1300,8 @@ wi::mul_internal (HOST_WIDE_INT *val, const HOST_WIDE_INT *op1val,\n \t  umul_ppmm (upper, val[0], op1.ulow (), op2.ulow ());\n \t  if (needs_overflow)\n \t    *overflow = (upper != 0);\n+\t  if (high)\n+\t    val[0] = upper;\n \t  return 1;\n \t}\n     }\n@@ -1302,12 +1310,22 @@ wi::mul_internal (HOST_WIDE_INT *val, const HOST_WIDE_INT *op1val,\n   /* Handle multiplications by 1.  */\n   if (op1 == 1)\n     {\n+      if (high)\n+\t{\n+\t  val[0] = wi::neg_p (op2, sgn) ? -1 : 0;\n+\t  return 1;\n+\t}\n       for (i = 0; i < op2len; i++)\n \tval[i] = op2val[i];\n       return op2len;\n     }\n   if (op2 == 1)\n     {\n+      if (high)\n+\t{\n+\t  val[0] = wi::neg_p (op1, sgn) ? -1 : 0;\n+\t  return 1;\n+\t}\n       for (i = 0; i < op1len; i++)\n \tval[i] = op1val[i];\n       return op1len;"}]}