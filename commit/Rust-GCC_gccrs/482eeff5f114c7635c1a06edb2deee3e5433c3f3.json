{"sha": "482eeff5f114c7635c1a06edb2deee3e5433c3f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDgyZWVmZjVmMTE0Yzc2MzVjMWEwNmVkYjJkZWVlM2U1NDMzYzNmMw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-01-24T17:07:01Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-01-24T17:17:16Z"}, "message": "libstdc++: Simplify construction of comparison category types\n\nThe _Eq and _Ord enumerations can be combined into one, reducing the\nnumber of constructors needed for the comparison category types. The\nredundant equal enumerator can be removed and equivalent used in its\nplace. The _Less and _Greater enumerators can be renamed because 'less'\nand 'greater' are already reserved names anyway.\n\n\t* libsupc++/compare (__cmp_cat::_Eq): Remove enumeration type.\n\t(__cmp_cat::_Ord::equivalent): Add enumerator.\n\t(__cmp_cat::_Ord::_Less, __cmp_cat::_Ord::_Greater): Rename to less\n\tand greater.\n\t(partial_ordering, weak_ordering, strong_ordering): Remove\n\tconstructors taking __cmp_cat::_Eq parameters. Use renamed\n\tenumerators.", "tree": {"sha": "742ee65091a59544766c36453fad64114fb4a614", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/742ee65091a59544766c36453fad64114fb4a614"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/482eeff5f114c7635c1a06edb2deee3e5433c3f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/482eeff5f114c7635c1a06edb2deee3e5433c3f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/482eeff5f114c7635c1a06edb2deee3e5433c3f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/482eeff5f114c7635c1a06edb2deee3e5433c3f3/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64c9f2d9972ad359a32f0a97ee0a806c2532db15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64c9f2d9972ad359a32f0a97ee0a806c2532db15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64c9f2d9972ad359a32f0a97ee0a806c2532db15"}], "stats": {"total": 49, "additions": 21, "deletions": 28}, "files": [{"sha": "0067e581acb83a05638464150b9519d27f969ad3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/482eeff5f114c7635c1a06edb2deee3e5433c3f3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/482eeff5f114c7635c1a06edb2deee3e5433c3f3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=482eeff5f114c7635c1a06edb2deee3e5433c3f3", "patch": "@@ -1,3 +1,13 @@\n+2020-01-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* libsupc++/compare (__cmp_cat::_Eq): Remove enumeration type.\n+\t(__cmp_cat::_Ord::equivalent): Add enumerator.\n+\t(__cmp_cat::_Ord::_Less, __cmp_cat::_Ord::_Greater): Rename to less\n+\tand greater.\n+\t(partial_ordering, weak_ordering, strong_ordering): Remove\n+\tconstructors taking __cmp_cat::_Eq parameters. Use renamed\n+\tenumerators.\n+\n 2020-01-24  Maciej W. Rozycki  <macro@wdc.com>\n \n \t* acinclude.m4: Handle `--with-toolexeclibdir='."}, {"sha": "117340ff1843fdd4749cb9672869da72961f798a", "filename": "libstdc++-v3/libsupc++/compare", "status": "modified", "additions": 11, "deletions": 28, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/482eeff5f114c7635c1a06edb2deee3e5433c3f3/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/482eeff5f114c7635c1a06edb2deee3e5433c3f3/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare?ref=482eeff5f114c7635c1a06edb2deee3e5433c3f3", "patch": "@@ -48,10 +48,7 @@ namespace std\n \n   namespace __cmp_cat\n   {\n-    enum class _Eq\n-    { equal = 0, equivalent = equal, nonequal = 1, nonequivalent = nonequal };\n-\n-    enum class _Ord { _Less = -1, _Greater = 1 };\n+    enum class _Ord { equivalent = 0, less = -1, greater = 1 };\n \n     enum class _Ncmp { _Unordered = -127 };\n \n@@ -66,11 +63,6 @@ namespace std\n     int _M_value;\n     bool _M_is_ordered;\n \n-    constexpr explicit\n-    partial_ordering(__cmp_cat::_Eq __v) noexcept\n-    : _M_value(int(__v)), _M_is_ordered(true)\n-    { }\n-\n     constexpr explicit\n     partial_ordering(__cmp_cat::_Ord __v) noexcept\n     : _M_value(int(__v)), _M_is_ordered(true)\n@@ -146,13 +138,13 @@ namespace std\n \n   // valid values' definitions\n   inline constexpr partial_ordering\n-  partial_ordering::less(__cmp_cat::_Ord::_Less);\n+  partial_ordering::less(__cmp_cat::_Ord::less);\n \n   inline constexpr partial_ordering\n-  partial_ordering::equivalent(__cmp_cat::_Eq::equivalent);\n+  partial_ordering::equivalent(__cmp_cat::_Ord::equivalent);\n \n   inline constexpr partial_ordering\n-  partial_ordering::greater(__cmp_cat::_Ord::_Greater);\n+  partial_ordering::greater(__cmp_cat::_Ord::greater);\n \n   inline constexpr partial_ordering\n   partial_ordering::unordered(__cmp_cat::_Ncmp::_Unordered);\n@@ -161,10 +153,6 @@ namespace std\n   {\n     int _M_value;\n \n-    constexpr explicit\n-    weak_ordering(__cmp_cat::_Eq __v) noexcept : _M_value(int(__v))\n-    { }\n-\n     constexpr explicit\n     weak_ordering(__cmp_cat::_Ord __v) noexcept : _M_value(int(__v))\n     { }\n@@ -243,23 +231,18 @@ namespace std\n \n   // valid values' definitions\n   inline constexpr weak_ordering\n-  weak_ordering::less(__cmp_cat::_Ord::_Less);\n+  weak_ordering::less(__cmp_cat::_Ord::less);\n \n   inline constexpr weak_ordering\n-  weak_ordering::equivalent(__cmp_cat::_Eq::equivalent);\n+  weak_ordering::equivalent(__cmp_cat::_Ord::equivalent);\n \n   inline constexpr weak_ordering\n-  weak_ordering::greater(__cmp_cat::_Ord::_Greater);\n+  weak_ordering::greater(__cmp_cat::_Ord::greater);\n \n   class strong_ordering\n   {\n     int _M_value;\n \n-    constexpr explicit\n-    strong_ordering(__cmp_cat::_Eq __v) noexcept\n-    : _M_value(int(__v))\n-    { }\n-\n     constexpr explicit\n     strong_ordering(__cmp_cat::_Ord __v) noexcept\n     : _M_value(int(__v))\n@@ -350,16 +333,16 @@ namespace std\n \n   // valid values' definitions\n   inline constexpr strong_ordering\n-  strong_ordering::less(__cmp_cat::_Ord::_Less);\n+  strong_ordering::less(__cmp_cat::_Ord::less);\n \n   inline constexpr strong_ordering\n-  strong_ordering::equal(__cmp_cat::_Eq::equal);\n+  strong_ordering::equal(__cmp_cat::_Ord::equivalent);\n \n   inline constexpr strong_ordering\n-  strong_ordering::equivalent(__cmp_cat::_Eq::equivalent);\n+  strong_ordering::equivalent(__cmp_cat::_Ord::equivalent);\n \n   inline constexpr strong_ordering\n-  strong_ordering::greater(__cmp_cat::_Ord::_Greater);\n+  strong_ordering::greater(__cmp_cat::_Ord::greater);\n \n \n   // named comparison functions"}]}