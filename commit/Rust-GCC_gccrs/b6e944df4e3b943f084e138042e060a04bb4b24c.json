{"sha": "b6e944df4e3b943f084e138042e060a04bb4b24c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZlOTQ0ZGY0ZTNiOTQzZjA4NGUxMzgwNDJlMDYwYTA0YmI0YjI0Yw==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-03-02T09:05:59Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-14T04:34:57Z"}, "message": "AVX512FP16: Add testcase for vreduceph/vreducesh/vrndscaleph/vrndscalesh.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-helper.h (_ROUND_CUR): New macro.\n\t* gcc.target/i386/avx512fp16-vreduceph-1a.c: New test.\n\t* gcc.target/i386/avx512fp16-vreduceph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vreducesh-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vreducesh-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vrndscaleph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vrndscaleph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vrndscalesh-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vrndscalesh-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vreduceph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vreduceph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vrndscaleph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vrndscaleph-1b.c: Ditto.", "tree": {"sha": "d8b572c6869dd72a01bced1659f9d11e415f056e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8b572c6869dd72a01bced1659f9d11e415f056e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6e944df4e3b943f084e138042e060a04bb4b24c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6e944df4e3b943f084e138042e060a04bb4b24c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6e944df4e3b943f084e138042e060a04bb4b24c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6e944df4e3b943f084e138042e060a04bb4b24c/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bed76179659ca8433a2fc8fbcf520ff0b6cd9fd"}], "stats": {"total": 553, "additions": 553, "deletions": 0}, "files": [{"sha": "ec88888532c944fddd8cecfd1806485702a92688", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-helper.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e944df4e3b943f084e138042e060a04bb4b24c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-helper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e944df4e3b943f084e138042e060a04bb4b24c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-helper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-helper.h?ref=b6e944df4e3b943f084e138042e060a04bb4b24c", "patch": "@@ -17,6 +17,7 @@\n /* Useful macros.  */\n #define NOINLINE __attribute__((noinline,noclone))\n #define _ROUND_NINT (_MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC)\n+#define _ROUND_CUR 8 \n #define AVX512F_MAX_ELEM 512 / 32\n \n /* Structure for _Float16 emulation  */"}, {"sha": "536c1ef6b025711e5c2150b7c1c9e6144161bea5", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vreduceph-1a.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e944df4e3b943f084e138042e060a04bb4b24c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vreduceph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e944df4e3b943f084e138042e060a04bb4b24c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vreduceph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vreduceph-1a.c?ref=b6e944df4e3b943f084e138042e060a04bb4b24c", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vreduceph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vreduceph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vreduceph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vreduceph\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vreduceph\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vreduceph\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+#define IMM 123\n+\n+volatile __m512h x1;\n+volatile __mmask32 m;\n+\n+void extern\n+avx512fp16_test (void)\n+{\n+  x1 = _mm512_reduce_ph (x1, IMM);\n+  x1 = _mm512_mask_reduce_ph (x1, m, x1, IMM);\n+  x1 = _mm512_maskz_reduce_ph (m, x1, IMM);\n+  x1 = _mm512_reduce_round_ph (x1, IMM, 8);\n+  x1 = _mm512_mask_reduce_round_ph (x1, m, x1, IMM, 8);\n+  x1 = _mm512_maskz_reduce_round_ph (m, x1, IMM, 8);\n+}"}, {"sha": "20d1ba59fdaa7074fee814dc4c570320ca0fef43", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vreduceph-1b.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e944df4e3b943f084e138042e060a04bb4b24c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vreduceph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e944df4e3b943f084e138042e060a04bb4b24c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vreduceph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vreduceph-1b.c?ref=b6e944df4e3b943f084e138042e060a04bb4b24c", "patch": "@@ -0,0 +1,116 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 16)\n+\n+#ifndef __REDUCEPH__\n+#define __REDUCEPH__\n+V512 borrow_reduce_ps(V512 v, int imm8)\n+{\n+  V512 temp;\n+  switch (imm8)\n+    {\n+    case 1: temp.zmm =  _mm512_mask_reduce_ps (v.zmm, 0xffff, v.zmm, 1);break;\n+    case 2: temp.zmm =  _mm512_mask_reduce_ps (v.zmm, 0xffff, v.zmm, 2);break;\n+    case 3: temp.zmm =  _mm512_mask_reduce_ps (v.zmm, 0xffff, v.zmm, 3);break;\n+    case 4: temp.zmm =  _mm512_mask_reduce_ps (v.zmm, 0xffff, v.zmm, 4);break;\n+    case 5: temp.zmm =  _mm512_mask_reduce_ps (v.zmm, 0xffff, v.zmm, 5);break;\n+    case 6: temp.zmm =  _mm512_mask_reduce_ps (v.zmm, 0xffff, v.zmm, 6);break;\n+    case 7: temp.zmm =  _mm512_mask_reduce_ps (v.zmm, 0xffff, v.zmm, 7);break;\n+    case 8: temp.zmm =  _mm512_mask_reduce_ps (v.zmm, 0xffff, v.zmm, 8);break;\n+    }\n+  return temp;\n+}\n+#endif\n+\n+void NOINLINE\n+EMULATE(reduce_ph) (V512 * dest, V512 op1,\n+\t\t  __mmask32 k, int imm8, int zero_mask)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  V512 t1,t2;\n+  int i;\n+  __mmask16 m1, m2;\n+\n+  m1 = k & 0xffff;\n+  m2 = (k >> 16) & 0xffff;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+  unpack_ph_2twops(*dest, &v7, &v8);\n+  t1 = borrow_reduce_ps(v1, imm8);\n+  t2 = borrow_reduce_ps(v2, imm8);\n+\n+  for (i = 0; i < 16; i++) {\n+      if (((1 << i) & m1) == 0) {\n+\t  if (zero_mask) {\n+\t      v5.f32[i] = 0;\n+\t  }\n+\t  else {\n+\t      v5.u32[i] = v7.u32[i];\n+\t  }\n+      }\n+      else {\n+\t  v5.f32[i] = t1.f32[i];\n+      }\n+\n+      if (((1 << i) & m2) == 0) {\n+\t  if (zero_mask) {\n+\t      v6.f32[i] = 0;\n+\t  }\n+\t  else {\n+\t      v6.u32[i] = v8.u32[i];\n+\t  }\n+      }\n+      else {\n+\t  v6.f32[i] = t2.f32[i];\n+      }\n+\n+  }\n+  *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  EMULATE(reduce_ph) (&exp, src1,  NET_MASK, 6, 0);\n+  HF(res) = INTRINSIC (_reduce_ph) (HF(src1), 6);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _reduce_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(reduce_ph) (&exp, src1, MASK_VALUE, 5, 0);\n+  HF(res) = INTRINSIC (_mask_reduce_ph) (HF(res), MASK_VALUE, HF(src1), 5);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_reduce_ph);\n+\n+  EMULATE(reduce_ph) (&exp, src1,  ZMASK_VALUE, 4, 1);\n+  HF(res) = INTRINSIC (_maskz_reduce_ph) (ZMASK_VALUE, HF(src1), 4);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_reduce_ph);\n+\n+#if AVX512F_LEN == 512\n+  EMULATE(reduce_ph) (&exp, src1,  NET_MASK, 6, 0);\n+  HF(res) = INTRINSIC (_reduce_round_ph) (HF(src1), 6, _ROUND_CUR);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _reduce_round_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(reduce_ph) (&exp, src1, MASK_VALUE, 5, 0);\n+  HF(res) = INTRINSIC (_mask_reduce_round_ph) (HF(res), MASK_VALUE, HF(src1), 5, _ROUND_CUR);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_reduce_round_ph);\n+\n+  EMULATE(reduce_ph) (&exp, src1,  ZMASK_VALUE, 4, 1);\n+  HF(res) = INTRINSIC (_maskz_reduce_round_ph) (ZMASK_VALUE, HF(src1), 4, _ROUND_CUR);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_reduce_round_ph);\n+#endif\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "803699185678cda0f6b80b523d659b1fbf730fd2", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vreducesh-1a.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e944df4e3b943f084e138042e060a04bb4b24c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vreducesh-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e944df4e3b943f084e138042e060a04bb4b24c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vreducesh-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vreducesh-1a.c?ref=b6e944df4e3b943f084e138042e060a04bb4b24c", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vreducesh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  2 } } */\n+/* { dg-final { scan-assembler-times \"vreducesh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vreducesh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vreducesh\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vreducesh\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+\n+#include <immintrin.h>\n+\n+#define IMM 123\n+\n+volatile __m128h x1, x2;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512fp16_test (void)\n+{\n+  x1 = _mm_reduce_sh (x1, x2, IMM);\n+  x1 = _mm_mask_reduce_sh(x1, m, x1, x2, IMM);\n+  x1 = _mm_maskz_reduce_sh(m, x1, x2, IMM);\n+  x1 = _mm_reduce_round_sh (x1, x2, IMM, 4);\n+  x1 = _mm_mask_reduce_round_sh(x1, m, x1, x2, IMM, 8);\n+  x1 = _mm_maskz_reduce_round_sh(m, x1, x2, IMM, 8);\n+}"}, {"sha": "4c5dfe73c3aa7adcc8413887c5ac1243517a933c", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vreducesh-1b.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e944df4e3b943f084e138042e060a04bb4b24c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vreducesh-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e944df4e3b943f084e138042e060a04bb4b24c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vreducesh-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vreducesh-1b.c?ref=b6e944df4e3b943f084e138042e060a04bb4b24c", "patch": "@@ -0,0 +1,78 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 8\n+\n+V512 borrow_reduce_ps(V512 v, int imm8)\n+{\n+  V512 temp;\n+  switch (imm8)\n+    {\n+    case 1: temp.zmm =  _mm512_mask_reduce_ps (v.zmm, 0xffff, v.zmm, 1);break;\n+    case 2: temp.zmm =  _mm512_mask_reduce_ps (v.zmm, 0xffff, v.zmm, 2);break;\n+    case 3: temp.zmm =  _mm512_mask_reduce_ps (v.zmm, 0xffff, v.zmm, 3);break;\n+    case 4: temp.zmm =  _mm512_mask_reduce_ps (v.zmm, 0xffff, v.zmm, 4);break;\n+    case 5: temp.zmm =  _mm512_mask_reduce_ps (v.zmm, 0xffff, v.zmm, 5);break;\n+    case 6: temp.zmm =  _mm512_mask_reduce_ps (v.zmm, 0xffff, v.zmm, 6);break;\n+    case 7: temp.zmm =  _mm512_mask_reduce_ps (v.zmm, 0xffff, v.zmm, 7);break;\n+    case 8: temp.zmm =  _mm512_mask_reduce_ps (v.zmm, 0xffff, v.zmm, 8);break;\n+    }\n+  return temp;\n+}\n+\n+void NOINLINE\n+emulate_reduce_sh(V512 * dest, V512 op1,\n+                  __mmask32 k, int imm8, int zero_mask) \n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  V512 t1;\n+  int i;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+  unpack_ph_2twops(*dest, &v7, &v8);\n+  t1 = borrow_reduce_ps(v1, imm8);\n+\n+  if ((k&1) || !k)\n+    v5.f32[0] = t1.f32[0];\n+  else if (zero_mask)\n+    v5.f32[0] = 0;\n+  else\n+    v5.f32[0] = v7.f32[0];\n+\n+  for (i = 1; i < 8; i++)\n+    v5.f32[i] = v1.f32[i];\n+\n+  *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+test_512 (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  emulate_reduce_sh(&exp, src1,  0x1, 8, 0);\n+  res.xmmh[0] = _mm_reduce_round_sh(src1.xmmh[0], exp.xmmh[0], 8, _ROUND_CUR);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_reduce_round_sh\");\n+\n+  init_dest(&res, &exp);\n+  emulate_reduce_sh(&exp, src1,  0x1, 7, 0);\n+  res.xmmh[0] = _mm_mask_reduce_round_sh(res.xmmh[0], 0x1, src1.xmmh[0], exp.xmmh[0], 7, _ROUND_CUR);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_mask_reduce_round_sh\");\n+\n+  emulate_reduce_sh(&exp, src1,  0x3, 6, 1);\n+  res.xmmh[0] = _mm_maskz_reduce_round_sh(0x3, src1.xmmh[0], exp.xmmh[0], 6, _ROUND_CUR);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_maskz_reduce_round_sh\");\n+\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "8a307274a9f7047dfeb99daf7d18cffff3cd29f4", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vrndscaleph-1a.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e944df4e3b943f084e138042e060a04bb4b24c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrndscaleph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e944df4e3b943f084e138042e060a04bb4b24c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrndscaleph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrndscaleph-1a.c?ref=b6e944df4e3b943f084e138042e060a04bb4b24c", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vrndscaleph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vrndscaleph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrndscaleph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrndscaleph\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vrndscaleph\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrndscaleph\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+#define IMM 123\n+\n+volatile __m512h x1;\n+volatile __mmask32 m;\n+\n+void extern\n+avx512fp16_test (void)\n+{\n+  x1 = _mm512_roundscale_ph (x1, IMM);\n+  x1 = _mm512_mask_roundscale_ph (x1, m, x1, IMM);\n+  x1 = _mm512_maskz_roundscale_ph (m, x1, IMM);\n+  x1 = _mm512_roundscale_round_ph (x1, IMM, 8);\n+  x1 = _mm512_mask_roundscale_round_ph (x1, m, x1, IMM, 8);\n+  x1 = _mm512_maskz_roundscale_round_ph (m, x1, IMM, 8);\n+}"}, {"sha": "d50e75585f19eacb94746aad26b1c4aadaba164f", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vrndscaleph-1b.c", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e944df4e3b943f084e138042e060a04bb4b24c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrndscaleph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e944df4e3b943f084e138042e060a04bb4b24c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrndscaleph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrndscaleph-1b.c?ref=b6e944df4e3b943f084e138042e060a04bb4b24c", "patch": "@@ -0,0 +1,101 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 16)\n+\n+void NOINLINE\n+EMULATE(roundscale_ph) (V512 * dest, V512 op1,\n+\t\t      __mmask32 k, int zero_mask, int round)\n+{   \n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  __mmask16 m1, m2;\n+  V512 t1, t2;\n+  m1 = k & 0xffff; \n+  m2 = (k >> 16) & 0xffff;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+  unpack_ph_2twops(*dest, &v7, &v8);\n+  if (round==0)\n+  {\n+    t1.zmm = _mm512_maskz_roundscale_ps (0xffff, v1.zmm, 0x11);\n+    t2.zmm = _mm512_maskz_roundscale_ps (0xffff, v2.zmm, 0x11);\n+  }  \n+  else\n+  {\n+    t1.zmm = _mm512_maskz_roundscale_ps (0xffff, v1.zmm, 0x14);\n+    t2.zmm = _mm512_maskz_roundscale_ps (0xffff, v2.zmm, 0x14);\n+  }\n+  for (i = 0; i < 16; i++) \n+  { \n+    if (((1 << i) & m1) == 0) {\n+\tif (zero_mask) {\n+\t    v5.f32[i] = 0;\n+\t}\n+\telse {\n+\t    v5.u32[i] = v7.u32[i];\n+\t}\n+    }\n+    else {\n+\tv5.f32[i] = t1.f32[i];\n+    }\n+\n+    if (((1 << i) & m2) == 0) {\n+\tif (zero_mask) {\n+\t    v6.f32[i] = 0;\n+\t}\n+\telse {\n+\t    v6.u32[i] = v8.u32[i];\n+\t}\n+    }\n+    else {\n+\tv6.f32[i] = t2.f32[i];\n+    }\n+  }\n+  *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res, exp;\n+\n+  init_src();\n+\n+  EMULATE(roundscale_ph) (&exp, src1,  NET_MASK, 0, 1);\n+  HF(res) = INTRINSIC (_roundscale_ph) (HF(src1), 0x13);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _roundscale_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(roundscale_ph) (&exp, src1, MASK_VALUE, 0, 1);\n+  HF(res) = INTRINSIC (_mask_roundscale_ph) (HF(res), MASK_VALUE, HF(src1), 0x14);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_roundscale_ph);\n+\n+  EMULATE(roundscale_ph) (&exp, src1,  ZMASK_VALUE, 1, 1);\n+  HF(res) = INTRINSIC (_maskz_roundscale_ph) (ZMASK_VALUE, HF(src1), 0x14);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_roundscale_ph);\n+\n+#if AVX512F_LEN == 512\n+  EMULATE(roundscale_ph) (&exp, src1,  NET_MASK, 0, 1);\n+  HF(res) = INTRINSIC (_roundscale_round_ph) (HF(src1), 0x13, 0x08);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _roundscale_round_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(roundscale_ph) (&exp, src1, MASK_VALUE, 0, 1);\n+  HF(res) = INTRINSIC (_mask_roundscale_round_ph) (HF(res), MASK_VALUE, HF(src1), 0x14, 0x08);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_roundscale_round_ph);\n+\n+  EMULATE(roundscale_ph) (&exp, src1,  ZMASK_VALUE, 1, 1);\n+  HF(res) = INTRINSIC (_maskz_roundscale_round_ph) (ZMASK_VALUE, HF(src1), 0x14, 0x08);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_roundscale_round_ph);\n+#endif\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "bd41b634aff9ca6d4f67035c58452410672a1256", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vrndscalesh-1a.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e944df4e3b943f084e138042e060a04bb4b24c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrndscalesh-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e944df4e3b943f084e138042e060a04bb4b24c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrndscalesh-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrndscalesh-1a.c?ref=b6e944df4e3b943f084e138042e060a04bb4b24c", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vrndscalesh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  2 } } */\n+/* { dg-final { scan-assembler-times \"vrndscalesh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrndscalesh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrndscalesh\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrndscalesh\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+#define IMM 123\n+\n+volatile __m128h x1, x2;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512fp16_test (void)\n+{\n+  x1 = _mm_roundscale_sh (x1, x2, IMM);\n+  x1 = _mm_mask_roundscale_sh(x1, m, x1, x2, IMM);\n+  x1 = _mm_maskz_roundscale_sh(m, x1, x2, IMM);\n+  x1 = _mm_roundscale_round_sh (x1, x2, IMM, 4);\n+  x1 = _mm_mask_roundscale_round_sh(x1, m, x1, x2, IMM, 8);\n+  x1 = _mm_maskz_roundscale_round_sh(m, x1, x2, IMM, 8);\n+}"}, {"sha": "c103389287895e2ff61189b64236d46de717c458", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vrndscalesh-1b.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e944df4e3b943f084e138042e060a04bb4b24c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrndscalesh-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e944df4e3b943f084e138042e060a04bb4b24c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrndscalesh-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrndscalesh-1b.c?ref=b6e944df4e3b943f084e138042e060a04bb4b24c", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 8\n+\n+void NOINLINE\n+emulate_roundscale_sh(V512 * dest, V512 op1,\n+\t       __mmask8 k, int zero_mask)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  V512 t1,t2;\n+  int i;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+  unpack_ph_2twops(*dest, &v7, &v8);\n+  t1.zmm = _mm512_maskz_roundscale_ps (0xffff, v1.zmm, 0x14);\n+  t2.zmm = _mm512_maskz_roundscale_ps (0xffff, v2.zmm, 0x14);\n+\n+  if ((k&1) || !k)\n+    v5.f32[0] = t1.f32[0]; \n+  else if (zero_mask)\n+    v5.f32[0] = 0;\n+  else\n+    v5.f32[0] = v7.f32[0];\n+\n+  for (i = 1; i < 8; i++)\n+    v5.f32[i] = v1.f32[i];\n+\n+  *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+test_512 (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  emulate_roundscale_sh(&exp, src1,  0x1, 0);\n+  res.xmmh[0] = _mm_roundscale_round_sh(src1.xmmh[0], src1.xmmh[0], 0x1, 0x08);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_roundscale_round_sh\");\n+\n+  init_dest(&res, &exp);\n+  emulate_roundscale_sh(&exp, src1,  0x1, 0);\n+  res.xmmh[0] = _mm_mask_roundscale_round_sh(res.xmmh[0],\n+\t\t\t\t\t     0x1, src1.xmmh[0], src1.xmmh[0], 0x1, 0x08);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_mask_roundscale_round_sh\");\n+\n+  emulate_roundscale_sh(&exp, src1,  0x3, 1);\n+  res.xmmh[0] = _mm_maskz_roundscale_round_sh(0x3, src1.xmmh[0], src1.xmmh[0], 0x1, 0x08);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_maskz_roundscale_round_sh\");\n+\n+\n+  if (n_errs != 0)\n+    abort ();\n+}\n+"}, {"sha": "4f43abd5411000714bab3736ffa50f0f1afb2206", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vreduceph-1a.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e944df4e3b943f084e138042e060a04bb4b24c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vreduceph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e944df4e3b943f084e138042e060a04bb4b24c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vreduceph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vreduceph-1a.c?ref=b6e944df4e3b943f084e138042e060a04bb4b24c", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vreduceph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vreduceph\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vreduceph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vreduceph\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vreduceph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vreduceph\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+#define IMM 123\n+\n+volatile __m256h x2;\n+volatile __m128h x3;\n+volatile __mmask8 m8;\n+volatile __mmask16 m16;\n+\n+void extern\n+avx512fp16_test (void)\n+{\n+  x2 = _mm256_reduce_ph (x2, IMM);\n+  x3 = _mm_reduce_ph (x3, IMM);\n+\n+  x2 = _mm256_mask_reduce_ph (x2, m16, x2, IMM);\n+  x3 = _mm_mask_reduce_ph (x3, m8, x3, IMM);\n+\n+  x2 = _mm256_maskz_reduce_ph (m8, x2, IMM);\n+  x3 = _mm_maskz_reduce_ph (m16, x3, IMM);\n+}"}, {"sha": "38515976ce6c3e6c8d0767bea77c514927ae2989", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vreduceph-1b.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e944df4e3b943f084e138042e060a04bb4b24c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vreduceph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e944df4e3b943f084e138042e060a04bb4b24c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vreduceph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vreduceph-1b.c?ref=b6e944df4e3b943f084e138042e060a04bb4b24c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define DEBUG\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vreduceph-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vreduceph-1b.c\"\n+"}, {"sha": "9fcf7e9b7bc376c9d5b49c7572a3959638ed2de7", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vrndscaleph-1a.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e944df4e3b943f084e138042e060a04bb4b24c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vrndscaleph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e944df4e3b943f084e138042e060a04bb4b24c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vrndscaleph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vrndscaleph-1a.c?ref=b6e944df4e3b943f084e138042e060a04bb4b24c", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vrndscaleph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vrndscaleph\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vrndscaleph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrndscaleph\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrndscaleph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrndscaleph\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+#define IMM 123\n+\n+volatile __m256h x2;\n+volatile __m128h x3;\n+volatile __mmask8 m8;\n+volatile __mmask16 m16;\n+\n+void extern\n+avx512fp16_test (void)\n+{\n+  x2 = _mm256_roundscale_ph (x2, IMM);\n+  x3 = _mm_roundscale_ph (x3, IMM);\n+\n+  x2 = _mm256_mask_roundscale_ph (x2, m16, x2, IMM);\n+  x3 = _mm_mask_roundscale_ph (x3, m8, x3, IMM);\n+\n+  x2 = _mm256_maskz_roundscale_ph (m8, x2, IMM);\n+  x3 = _mm_maskz_roundscale_ph (m16, x3, IMM);\n+}"}, {"sha": "04b00e2db2d6acc0194de9057f307b9691a45028", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vrndscaleph-1b.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e944df4e3b943f084e138042e060a04bb4b24c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vrndscaleph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e944df4e3b943f084e138042e060a04bb4b24c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vrndscaleph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vrndscaleph-1b.c?ref=b6e944df4e3b943f084e138042e060a04bb4b24c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define DEBUG\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vrndscaleph-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vrndscaleph-1b.c\"\n+"}]}