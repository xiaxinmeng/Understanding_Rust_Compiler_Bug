{"sha": "f78f5d239203d0da6638bc5e20080971d61d09d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc4ZjVkMjM5MjAzZDBkYTY2MzhiYzVlMjAwODA5NzFkNjFkMDlkOQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2019-05-13T11:56:57Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2019-05-13T11:56:57Z"}, "message": "[DWARF] dwarf2out cleanups\n\nhttps://gcc.gnu.org/ml/gcc-patches/2019-05/msg00485.html\n\t* dwarf2out.c (breakout_comdat_types): Move comment to correct\n\tpiece of code.\n\t(const_ok_for_output_1): Balance parens around #if/#else/#endif\n\t(gen_member_die): Move abstract origin check earlier.  Only VARs\n\tcan be static_inline_p.  Simplify splicing control flow.\n\nFrom-SVN: r271127", "tree": {"sha": "42891296f28dbb6189515d2a42eb6aaa464d9d3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42891296f28dbb6189515d2a42eb6aaa464d9d3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f78f5d239203d0da6638bc5e20080971d61d09d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f78f5d239203d0da6638bc5e20080971d61d09d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f78f5d239203d0da6638bc5e20080971d61d09d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f78f5d239203d0da6638bc5e20080971d61d09d9/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "61021c35c0b3ca3f37ad23002083d4f6c70e1bd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61021c35c0b3ca3f37ad23002083d4f6c70e1bd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61021c35c0b3ca3f37ad23002083d4f6c70e1bd1"}], "stats": {"total": 52, "additions": 32, "deletions": 20}, "files": [{"sha": "6e8d81801588c77f2d4edbb592d524a165dfb509", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f78f5d239203d0da6638bc5e20080971d61d09d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f78f5d239203d0da6638bc5e20080971d61d09d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f78f5d239203d0da6638bc5e20080971d61d09d9", "patch": "@@ -1,3 +1,11 @@\n+2019-05-13  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* dwarf2out.c (breakout_comdat_types): Move comment to correct\n+\tpiece of code.\n+\t(const_ok_for_output_1): Balance parens around #if/#else/#endif\n+\t(gen_member_die): Move abstract origin check earlier.  Only VARs\n+\tcan be static_inline_p.  Simplify splicing control flow.\n+\n 2019-05-13  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-slp.c (vect_get_and_check_slp_defs): Handle"}, {"sha": "e5d8ebc6a117d4d19b885dbd95cb64c1d8ae8aae", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f78f5d239203d0da6638bc5e20080971d61d09d9/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f78f5d239203d0da6638bc5e20080971d61d09d9/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=f78f5d239203d0da6638bc5e20080971d61d09d9", "patch": "@@ -8576,11 +8576,12 @@ break_out_comdat_types (dw_die_ref die)\n         /* Break out nested types into their own type units.  */\n         break_out_comdat_types (c);\n \n-        /* Create a new type unit DIE as the root for the new tree, and\n-           add it to the list of comdat types.  */\n+        /* Create a new type unit DIE as the root for the new tree.  */\n         unit = new_die (DW_TAG_type_unit, NULL, NULL);\n         add_AT_unsigned (unit, DW_AT_language,\n                          get_AT_unsigned (comp_unit_die (), DW_AT_language));\n+\n+\t/* Add the new unit's type DIE into the comdat type list.  */\n         type_node = ggc_cleared_alloc<comdat_type_node> ();\n         type_node->root_die = unit;\n         type_node->next = comdat_type_list;\n@@ -14509,11 +14510,10 @@ const_ok_for_output_1 (rtx rtl)\n \t\t\"non-delegitimized UNSPEC %s (%d) found in variable location\",\n \t\t((XINT (rtl, 1) >= 0 && XINT (rtl, 1) < NUM_UNSPEC_VALUES)\n \t\t ? unspec_strings[XINT (rtl, 1)] : \"unknown\"),\n-\t\tXINT (rtl, 1));\n #else\n \t\t\"non-delegitimized UNSPEC %d found in variable location\",\n-\t\tXINT (rtl, 1));\n #endif\n+\t\tXINT (rtl, 1));\n       expansion_failed (NULL_TREE, rtl,\n \t\t\t\"UNSPEC hasn't been delegitimized.\\n\");\n       return false;\n@@ -25161,19 +25161,20 @@ gen_member_die (tree type, dw_die_ref context_die)\n \t\t\t     context_die);\n     }\n \n-  /* Now output info about the data members and type members.  */\n+  /* Now output info about the members. */\n   for (member = TYPE_FIELDS (type); member; member = DECL_CHAIN (member))\n     {\n+      /* Ignore clones.  */\n+      if (DECL_ABSTRACT_ORIGIN (member))\n+\tcontinue;\n+\n       struct vlr_context vlr_ctx = { type, NULL_TREE };\n       bool static_inline_p\n-\t= (TREE_STATIC (member)\n+\t= (VAR_P (member)\n+\t   && TREE_STATIC (member)\n \t   && (lang_hooks.decls.decl_dwarf_attribute (member, DW_AT_inline)\n \t       != -1));\n \n-      /* Ignore clones.  */\n-      if (DECL_ABSTRACT_ORIGIN (member))\n-\tcontinue;\n-\n       /* If we thought we were generating minimal debug info for TYPE\n \t and then changed our minds, some of the member declarations\n \t may have already been defined.  Don't define them again, but\n@@ -25183,11 +25184,14 @@ gen_member_die (tree type, dw_die_ref context_die)\n \t{\n \t  /* Handle inline static data members, which only have in-class\n \t     declarations.  */\n-\t  dw_die_ref ref = NULL; \n+\t  bool splice = true;\n+\n+\t  dw_die_ref ref = NULL;\n \t  if (child->die_tag == DW_TAG_variable\n \t      && child->die_parent == comp_unit_die ())\n \t    {\n \t      ref = get_AT_ref (child, DW_AT_specification);\n+\n \t      /* For C++17 inline static data members followed by redundant\n \t\t out of class redeclaration, we might get here with\n \t\t child being the DIE created for the out of class\n@@ -25206,17 +25210,17 @@ gen_member_die (tree type, dw_die_ref context_die)\n \t\t  ref = NULL;\n \t\t  static_inline_p = false;\n \t\t}\n-\t    }\n \n-\t  if (child->die_tag == DW_TAG_variable\n-\t      && child->die_parent == comp_unit_die ()\n-\t      && ref == NULL)\n-\t    {\n-\t      reparent_child (child, context_die);\n-\t      if (dwarf_version < 5)\n-\t\tchild->die_tag = DW_TAG_member;\n+\t      if (!ref)\n+\t\t{\n+\t\t  reparent_child (child, context_die);\n+\t\t  if (dwarf_version < 5)\n+\t\t    child->die_tag = DW_TAG_member;\n+\t\t  splice = false;\n+\t\t}\n \t    }\n-\t  else\n+\n+\t  if (splice)\n \t    splice_child_die (context_die, child);\n \t}\n "}]}