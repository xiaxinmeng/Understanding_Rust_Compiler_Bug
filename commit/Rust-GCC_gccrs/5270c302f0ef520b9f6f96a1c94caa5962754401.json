{"sha": "5270c302f0ef520b9f6f96a1c94caa5962754401", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI3MGMzMDJmMGVmNTIwYjlmNmY5NmExYzk0Y2FhNTk2Mjc1NDQwMQ==", "commit": {"author": {"name": "Asher Langton", "email": "langton2@llnl.gov", "date": "2006-06-22T18:30:18Z"}, "committer": {"name": "Asher Langton", "email": "langton@gcc.gnu.org", "date": "2006-06-22T18:30:18Z"}, "message": "re PR fortran/24748 (substring of implicitly typed variable not rejected)\n\n\tPR fortran/24748\n\t* primary.c (gfc_match_rvalue): Don't call match_substring for\n\timplicit non-character types.\n\n\tPR fortran/24748\n\t* gfortran.dg/implicit_8.f90: New.\n\nFrom-SVN: r114901", "tree": {"sha": "8305c361f234badfe3ead042bf6a015cb6dea8cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8305c361f234badfe3ead042bf6a015cb6dea8cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5270c302f0ef520b9f6f96a1c94caa5962754401", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5270c302f0ef520b9f6f96a1c94caa5962754401", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5270c302f0ef520b9f6f96a1c94caa5962754401", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5270c302f0ef520b9f6f96a1c94caa5962754401/comments", "author": null, "committer": null, "parents": [{"sha": "752c5e547d44cb973eb70f8ec2158107c0f0dc97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/752c5e547d44cb973eb70f8ec2158107c0f0dc97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/752c5e547d44cb973eb70f8ec2158107c0f0dc97"}], "stats": {"total": 43, "additions": 42, "deletions": 1}, "files": [{"sha": "a02bebdede7b1c2470eddab5a19ee14f211f4083", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5270c302f0ef520b9f6f96a1c94caa5962754401/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5270c302f0ef520b9f6f96a1c94caa5962754401/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5270c302f0ef520b9f6f96a1c94caa5962754401", "patch": "@@ -1,3 +1,9 @@\n+2006-06-22  Asher Langton  <langton2@llnl.gov>\n+\n+\tPR fortran/24748\n+\t* primary.c (gfc_match_rvalue): Don't call match_substring for\n+\timplicit non-character types.\n+\n 2006-06-22  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR libfortran/26769"}, {"sha": "ad569fcf6b643f69b78bf9758bec6be2e80c91c1", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5270c302f0ef520b9f6f96a1c94caa5962754401/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5270c302f0ef520b9f6f96a1c94caa5962754401/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=5270c302f0ef520b9f6f96a1c94caa5962754401", "patch": "@@ -1912,6 +1912,8 @@ gfc_match_rvalue (gfc_expr ** result)\n   gfc_expr *e;\n   match m, m2;\n   int i;\n+  gfc_typespec *ts;\n+  bool implicit_char;\n \n   m = gfc_match_name (name);\n   if (m != MATCH_YES)\n@@ -2156,10 +2158,22 @@ gfc_match_rvalue (gfc_expr ** result)\n \n       if (m2 != MATCH_YES)\n \t{\n+\t  /* Try to figure out whether we're dealing with a character type.\n+\t     We're peeking ahead here, because we don't want to call \n+\t     match_substring if we're dealing with an implicitly typed\n+\t     non-character variable.  */\n+\t  implicit_char = false;\n+\t  if (sym->ts.type == BT_UNKNOWN)\n+\t    {\n+\t      ts = gfc_get_default_type (sym,NULL);\n+\t      if (ts->type == BT_CHARACTER)\n+\t\timplicit_char = true;\n+\t    }\n+\n \t  /* See if this could possibly be a substring reference of a name\n \t     that we're not sure is a variable yet.  */\n \n-\t  if ((sym->ts.type == BT_UNKNOWN || sym->ts.type == BT_CHARACTER)\n+\t  if ((implicit_char || sym->ts.type == BT_CHARACTER)\n \t      && match_substring (sym->ts.cl, 0, &e->ref) == MATCH_YES)\n \t    {\n "}, {"sha": "87319529d336b5c583496539d48fc9c024c20868", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5270c302f0ef520b9f6f96a1c94caa5962754401/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5270c302f0ef520b9f6f96a1c94caa5962754401/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5270c302f0ef520b9f6f96a1c94caa5962754401", "patch": "@@ -1,3 +1,8 @@\n+2006-06-22  Asher Langton  <langton2@llnl.gov>\n+\n+\tPR fortran/24748\n+\t* gfortran.dg/implicit_8.f90: New.\n+\n 2006-06-22  Zdenek Dvorak <dvorakz@suse.cz>\n \n \tPR rtl-optimization/28121"}, {"sha": "bdd11e615b9ffe995952059f94c734fabddd0f23", "filename": "gcc/testsuite/gfortran.dg/implicit_8.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5270c302f0ef520b9f6f96a1c94caa5962754401/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5270c302f0ef520b9f6f96a1c94caa5962754401/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_8.f90?ref=5270c302f0ef520b9f6f96a1c94caa5962754401", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do compile }\n+! PR 24748\n+\n+! The compiler used to crash trying to take a substring of an implicit \n+! real scalar.\n+subroutine variant1\n+ ybtable=ylocal(1:2)  ! { dg-error \"Syntax error in argument list\" }\n+end\n+\n+! We want the behavior to be the same whether ylocal is implicitly \n+! or explicitly typed.\n+subroutine variant2\n+ real ylocal\n+ ybtable=ylocal(1:2)  ! { dg-error \"Syntax error in argument list\" }\n+end\n+"}]}