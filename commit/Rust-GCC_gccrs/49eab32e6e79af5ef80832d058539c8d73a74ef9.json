{"sha": "49eab32e6e79af5ef80832d058539c8d73a74ef9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDllYWIzMmU2ZTc5YWY1ZWY4MDgzMmQwNTg1MzljOGQ3M2E3NGVmOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-04-18T06:55:13Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-04-18T06:55:13Z"}, "message": "re PR tree-optimization/48616 (-ftree-vectorize -mxop miscompiles right shift)\n\n\tPR tree-optimization/48616\n\t* tree-vect-stmts.c (vectorizable_shift): If SLP, determine\n\twhether the shift is by scalar or vector based on whether all SLP\n\tscalar stmts have the same rhs.\n\n\t* gcc.dg/pr48616.c: New test.\n\nFrom-SVN: r172638", "tree": {"sha": "6feeaff5594c0c4711acd5642ea25a480536999c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6feeaff5594c0c4711acd5642ea25a480536999c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49eab32e6e79af5ef80832d058539c8d73a74ef9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49eab32e6e79af5ef80832d058539c8d73a74ef9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49eab32e6e79af5ef80832d058539c8d73a74ef9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49eab32e6e79af5ef80832d058539c8d73a74ef9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5af0793001c54632a5160a352cfdee6195338314", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5af0793001c54632a5160a352cfdee6195338314", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5af0793001c54632a5160a352cfdee6195338314"}], "stats": {"total": 187, "additions": 177, "deletions": 10}, "files": [{"sha": "5963d44fa9cf1ba0fb7a5dbcd77fe1bc3e94c541", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49eab32e6e79af5ef80832d058539c8d73a74ef9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49eab32e6e79af5ef80832d058539c8d73a74ef9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=49eab32e6e79af5ef80832d058539c8d73a74ef9", "patch": "@@ -1,3 +1,10 @@\n+2011-04-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/48616\n+\t* tree-vect-stmts.c (vectorizable_shift): If SLP, determine\n+\twhether the shift is by scalar or vector based on whether all SLP\n+\tscalar stmts have the same rhs.\n+\n 2011-04-17  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \t* config/arm/arm.c (neon_struct_mem_operand): Support POST_INC/PRE_DEC"}, {"sha": "b95bb3f96a1e45f4be0c7d773b72a660eb4570bc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49eab32e6e79af5ef80832d058539c8d73a74ef9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49eab32e6e79af5ef80832d058539c8d73a74ef9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=49eab32e6e79af5ef80832d058539c8d73a74ef9", "patch": "@@ -1,3 +1,8 @@\n+2011-04-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/48616\n+\t* gcc.dg/pr48616.c: New test.\n+\n 2011-04-18  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/18918"}, {"sha": "8c8ec2c146bd54717a5ba6b3c95f323ff2c2ec48", "filename": "gcc/testsuite/gcc.dg/pr48616.c", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49eab32e6e79af5ef80832d058539c8d73a74ef9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48616.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49eab32e6e79af5ef80832d058539c8d73a74ef9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48616.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48616.c?ref=49eab32e6e79af5ef80832d058539c8d73a74ef9", "patch": "@@ -0,0 +1,134 @@\n+/* PR tree-optimization/48616 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+extern void abort (void);\n+int a[4] __attribute__((aligned (32)));\n+int b[4] __attribute__((aligned (32)));\n+int c[4] __attribute__((aligned (32)));\n+int d[4] __attribute__((aligned (32)));\n+int e[4] __attribute__((aligned (32)));\n+\n+__attribute__((noinline, noclone))\n+int\n+foo (int x)\n+{\n+  asm (\"\" : \"+r\" (x));\n+  return x;\n+}\n+\n+__attribute__((noinline, noclone))\n+void\n+fn1 (int i)\n+{\n+  a[0] = b[0] << c[0];\n+  a[1] = b[1] << c[1];\n+  a[2] = b[2] << c[2];\n+  a[3] = b[3] << c[3];\n+  if (i)\n+    {\n+      d[0] = e[0] >> c[0];\n+      d[1] = e[1] >> c[1];\n+      d[2] = e[2] >> c[2];\n+      d[3] = e[3] >> c[3];\n+    }\n+}\n+\n+__attribute__((noinline, noclone))\n+void\n+fn2 (int i)\n+{\n+  a[0] = b[0] << 1;\n+  a[1] = b[1] << 2;\n+  a[2] = b[2] << 3;\n+  a[3] = b[3] << 4;\n+  if (i)\n+    {\n+      d[0] = e[0] >> 1;\n+      d[1] = e[1] >> 2;\n+      d[2] = e[2] >> 3;\n+      d[3] = e[3] >> 4;\n+    }\n+}\n+\n+__attribute__((noinline, noclone))\n+void\n+fn3 (int i, int j)\n+{\n+  int x = foo (j);\n+  a[0] = b[0] << x;\n+  a[1] = b[1] << x;\n+  a[2] = b[2] << x;\n+  a[3] = b[3] << x;\n+  if (i)\n+    {\n+      d[0] = e[0] >> x;\n+      d[1] = e[1] >> x;\n+      d[2] = e[2] >> x;\n+      d[3] = e[3] >> x;\n+    }\n+}\n+\n+__attribute__((noinline, noclone))\n+void\n+fn4 (int i)\n+{\n+  a[0] = b[0] << 1;\n+  a[1] = b[1] << 1;\n+  a[2] = b[2] << 1;\n+  a[3] = b[3] << 1;\n+  if (i)\n+    {\n+      d[0] = e[0] >> 1;\n+      d[1] = e[1] >> 1;\n+      d[2] = e[2] >> 1;\n+      d[3] = e[3] >> 1;\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  int i;\n+  int *t;\n+  for (i = 0; i < 4; i++)\n+    {\n+      b[i] = 32;\n+      c[i] = i + 1;\n+      e[i] = 32;\n+    }\n+  asm volatile (\"\" : : \"r\" (b) : \"memory\");\n+  asm volatile (\"\" : : \"r\" (c) : \"memory\");\n+  asm volatile (\"\" : \"=r\" (t) : \"0\" (d) : \"memory\");\n+  fn1 (t != 0);\n+  for (i = 0; i < 4; i++)\n+    {\n+      if (a[i] != (32 << (i + 1)) || d[i] != (32 >> (i + 1)))\n+\tabort ();\n+      a[i] = 0;\n+      d[i] = 0;\n+    }\n+  fn2 (t != 0);\n+  for (i = 0; i < 4; i++)\n+    {\n+      if (a[i] != (32 << (i + 1)) || d[i] != (32 >> (i + 1)))\n+\tabort ();\n+      a[i] = 0;\n+      d[i] = 0;\n+    }\n+  fn3 (t != 0, t != 0);\n+  for (i = 0; i < 4; i++)\n+    {\n+      if (a[i] != (32 << 1) || d[i] != (32 >> 1))\n+\tabort ();\n+      a[i] = 0;\n+      d[i] = 0;\n+    }\n+  fn4 (t != 0);\n+  for (i = 0; i < 4; i++)\n+    {\n+      if (a[i] != (32 << 1) || d[i] != (32 >> 1))\n+\tabort ();\n+    }\n+  return 0;\n+}"}, {"sha": "0c7ab5ada88290176a628be78e400caed8eef720", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49eab32e6e79af5ef80832d058539c8d73a74ef9/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49eab32e6e79af5ef80832d058539c8d73a74ef9/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=49eab32e6e79af5ef80832d058539c8d73a74ef9", "patch": "@@ -2077,7 +2077,7 @@ vectorizable_shift (gimple stmt, gimple_stmt_iterator *gsi,\n   VEC (tree, heap) *vec_oprnds0 = NULL, *vec_oprnds1 = NULL;\n   tree vop0, vop1;\n   unsigned int k;\n-  bool scalar_shift_arg = false;\n+  bool scalar_shift_arg = true;\n   bb_vec_info bb_vinfo = STMT_VINFO_BB_VINFO (stmt_info);\n   int vf;\n \n@@ -2159,22 +2159,47 @@ vectorizable_shift (gimple stmt, gimple_stmt_iterator *gsi,\n   /* Determine whether the shift amount is a vector, or scalar.  If the\n      shift/rotate amount is a vector, use the vector/vector shift optabs.  */\n \n+  if (dt[1] == vect_internal_def && !slp_node)\n+    scalar_shift_arg = false;\n+  else if (dt[1] == vect_constant_def\n+\t   || dt[1] == vect_external_def\n+\t   || dt[1] == vect_internal_def)\n+    {\n+      /* In SLP, need to check whether the shift count is the same,\n+\t in loops if it is a constant or invariant, it is always\n+\t a scalar shift.  */\n+      if (slp_node)\n+\t{\n+\t  VEC (gimple, heap) *stmts = SLP_TREE_SCALAR_STMTS (slp_node);\n+\t  gimple slpstmt;\n+\n+\t  FOR_EACH_VEC_ELT (gimple, stmts, k, slpstmt)\n+\t    if (!operand_equal_p (gimple_assign_rhs2 (slpstmt), op1, 0))\n+\t      scalar_shift_arg = false;\n+\t}\n+    }\n+  else\n+    {\n+      if (vect_print_dump_info (REPORT_DETAILS))\n+\tfprintf (vect_dump, \"operand mode requires invariant argument.\");\n+      return false;\n+    }\n+\n   /* Vector shifted by vector.  */\n-  if (dt[1] == vect_internal_def)\n+  if (!scalar_shift_arg)\n     {\n       optab = optab_for_tree_code (code, vectype, optab_vector);\n       if (vect_print_dump_info (REPORT_DETAILS))\n         fprintf (vect_dump, \"vector/vector shift/rotate found.\");\n     }\n   /* See if the machine has a vector shifted by scalar insn and if not\n      then see if it has a vector shifted by vector insn.  */\n-  else if (dt[1] == vect_constant_def || dt[1] == vect_external_def)\n+  else\n     {\n       optab = optab_for_tree_code (code, vectype, optab_scalar);\n       if (optab\n           && optab_handler (optab, TYPE_MODE (vectype)) != CODE_FOR_nothing)\n         {\n-          scalar_shift_arg = true;\n           if (vect_print_dump_info (REPORT_DETAILS))\n             fprintf (vect_dump, \"vector/scalar shift/rotate found.\");\n         }\n@@ -2185,6 +2210,8 @@ vectorizable_shift (gimple stmt, gimple_stmt_iterator *gsi,\n                && (optab_handler (optab, TYPE_MODE (vectype))\n                       != CODE_FOR_nothing))\n             {\n+\t      scalar_shift_arg = false;\n+\n               if (vect_print_dump_info (REPORT_DETAILS))\n                 fprintf (vect_dump, \"vector/vector shift/rotate found.\");\n \n@@ -2197,12 +2224,6 @@ vectorizable_shift (gimple stmt, gimple_stmt_iterator *gsi,\n             }\n         }\n     }\n-  else\n-    {\n-      if (vect_print_dump_info (REPORT_DETAILS))\n-        fprintf (vect_dump, \"operand mode requires invariant argument.\");\n-      return false;\n-    }\n \n   /* Supportable by target?  */\n   if (!optab)"}]}