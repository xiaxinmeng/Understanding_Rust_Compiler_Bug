{"sha": "9ceec73fc0e5033049704becef5d79001e31a245", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNlZWM3M2ZjMGU1MDMzMDQ5NzA0YmVjZWY1ZDc5MDAxZTMxYTI0NQ==", "commit": {"author": {"name": "Matthew Malcomson", "email": "matthew.malcomson@arm.com", "date": "2020-01-17T11:50:54Z"}, "committer": {"name": "Matthew Malcomson", "email": "matthew.malcomson@arm.com", "date": "2020-01-17T15:05:12Z"}, "message": "[AArch64] [SVE] Implement svld1ro intrinsic.\n\nWe take no action to ensure the SVE vector size is large enough.  It is\nleft to the user to check that before compiling this intrinsic or before\nrunning such a program on a machine.\n\nThe main difference between ld1ro and ld1rq is in the allowed offsets,\nthe implementation difference is that ld1ro is implemented using integer\nmodes since there are no pre-existing vector modes of the relevant size.\nAdding new vector modes simply for this intrinsic seems to make the code\nless tidy.\n\nSpecifications can be found under the \"Arm C Language Extensions for\nScalable Vector Extension\" title at\nhttps://developer.arm.com/architectures/system-architectures/software-standards/acle\n\ngcc/ChangeLog:\n\n2020-01-17  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* config/aarch64/aarch64-protos.h\n\t(aarch64_sve_ld1ro_operand_p): New.\n\t* config/aarch64/aarch64-sve-builtins-base.cc\n\t(class load_replicate): New.\n\t(class svld1ro_impl): New.\n\t(class svld1rq_impl): Change to inherit from load_replicate.\n\t(svld1ro): New sve intrinsic function base.\n\t* config/aarch64/aarch64-sve-builtins-base.def (svld1ro):\n\tNew DEF_SVE_FUNCTION.\n\t* config/aarch64/aarch64-sve-builtins-base.h\n\t(svld1ro): New decl.\n\t* config/aarch64/aarch64-sve-builtins.cc\n\t(function_expander::add_mem_operand): Modify assert to allow\n\tOImode.\n\t* config/aarch64/aarch64-sve.md (@aarch64_sve_ld1ro<mode>): New\n\tpattern.\n\t* config/aarch64/aarch64.c\n\t(aarch64_sve_ld1rq_operand_p): Implement in terms of ...\n\t(aarch64_sve_ld1rq_ld1ro_operand_p): This.\n\t(aarch64_sve_ld1ro_operand_p): New.\n\t* config/aarch64/aarch64.md (UNSPEC_LD1RO): New unspec.\n\t* config/aarch64/constraints.md (UOb,UOh,UOw,UOd): New.\n\t* config/aarch64/predicates.md\n\t(aarch64_sve_ld1ro_operand_{b,h,w,d}): New.\n\ngcc/testsuite/ChangeLog:\n\n2020-01-17  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* gcc.target/aarch64/sve/acle/asm/ld1ro_f16.c: New test.\n\t* gcc.target/aarch64/sve/acle/asm/ld1ro_f32.c: New test.\n\t* gcc.target/aarch64/sve/acle/asm/ld1ro_f64.c: New test.\n\t* gcc.target/aarch64/sve/acle/asm/ld1ro_s16.c: New test.\n\t* gcc.target/aarch64/sve/acle/asm/ld1ro_s32.c: New test.\n\t* gcc.target/aarch64/sve/acle/asm/ld1ro_s64.c: New test.\n\t* gcc.target/aarch64/sve/acle/asm/ld1ro_s8.c: New test.\n\t* gcc.target/aarch64/sve/acle/asm/ld1ro_u16.c: New test.\n\t* gcc.target/aarch64/sve/acle/asm/ld1ro_u32.c: New test.\n\t* gcc.target/aarch64/sve/acle/asm/ld1ro_u64.c: New test.\n\t* gcc.target/aarch64/sve/acle/asm/ld1ro_u8.c: New test.", "tree": {"sha": "4485d3427d369b14472b1b310427d6989301713b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4485d3427d369b14472b1b310427d6989301713b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ceec73fc0e5033049704becef5d79001e31a245", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ceec73fc0e5033049704becef5d79001e31a245", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ceec73fc0e5033049704becef5d79001e31a245", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ceec73fc0e5033049704becef5d79001e31a245/comments", "author": {"login": "mmalcomson", "id": 57484298, "node_id": "MDQ6VXNlcjU3NDg0Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmalcomson", "html_url": "https://github.com/mmalcomson", "followers_url": "https://api.github.com/users/mmalcomson/followers", "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}", "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions", "organizations_url": "https://api.github.com/users/mmalcomson/orgs", "repos_url": "https://api.github.com/users/mmalcomson/repos", "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}", "received_events_url": "https://api.github.com/users/mmalcomson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mmalcomson", "id": 57484298, "node_id": "MDQ6VXNlcjU3NDg0Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmalcomson", "html_url": "https://github.com/mmalcomson", "followers_url": "https://api.github.com/users/mmalcomson/followers", "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}", "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions", "organizations_url": "https://api.github.com/users/mmalcomson/orgs", "repos_url": "https://api.github.com/users/mmalcomson/repos", "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}", "received_events_url": "https://api.github.com/users/mmalcomson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "336e1b950db8b91027cdf0ab33bd905930d7f363", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/336e1b950db8b91027cdf0ab33bd905930d7f363", "html_url": "https://github.com/Rust-GCC/gccrs/commit/336e1b950db8b91027cdf0ab33bd905930d7f363"}], "stats": {"total": 1468, "additions": 1462, "deletions": 6}, "files": [{"sha": "993986a1723c30113644f4d3fd467ceef913eee8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ceec73fc0e5033049704becef5d79001e31a245", "patch": "@@ -1,3 +1,30 @@\n+2020-01-17  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h\n+\t(aarch64_sve_ld1ro_operand_p): New.\n+\t* config/aarch64/aarch64-sve-builtins-base.cc\n+\t(class load_replicate): New.\n+\t(class svld1ro_impl): New.\n+\t(class svld1rq_impl): Change to inherit from load_replicate.\n+\t(svld1ro): New sve intrinsic function base.\n+\t* config/aarch64/aarch64-sve-builtins-base.def (svld1ro):\n+\tNew DEF_SVE_FUNCTION.\n+\t* config/aarch64/aarch64-sve-builtins-base.h\n+\t(svld1ro): New decl.\n+\t* config/aarch64/aarch64-sve-builtins.cc\n+\t(function_expander::add_mem_operand): Modify assert to allow\n+\tOImode.\n+\t* config/aarch64/aarch64-sve.md (@aarch64_sve_ld1ro<mode>): New\n+\tpattern.\n+\t* config/aarch64/aarch64.c\n+\t(aarch64_sve_ld1rq_operand_p): Implement in terms of ...\n+\t(aarch64_sve_ld1rq_ld1ro_operand_p): This.\n+\t(aarch64_sve_ld1ro_operand_p): New.\n+\t* config/aarch64/aarch64.md (UNSPEC_LD1RO): New unspec.\n+\t* config/aarch64/constraints.md (UOb,UOh,UOw,UOd): New.\n+\t* config/aarch64/predicates.md\n+\t(aarch64_sve_ld1ro_operand_{b,h,w,d}): New.\n+\n 2020-01-17  Matthew Malcomson  <matthew.malcomson@arm.com>\n \n \t* config/aarch64/aarch64-c.c (_ARM_FEATURE_MATMUL_FLOAT64):"}, {"sha": "24cc65a383ab4461ee83f017254724fd26e79eba", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=9ceec73fc0e5033049704becef5d79001e31a245", "patch": "@@ -582,6 +582,7 @@ rtx aarch64_simd_gen_const_vector_dup (machine_mode, HOST_WIDE_INT);\n bool aarch64_simd_mem_operand_p (rtx);\n bool aarch64_sve_ld1r_operand_p (rtx);\n bool aarch64_sve_ld1rq_operand_p (rtx);\n+bool aarch64_sve_ld1ro_operand_p (rtx, scalar_mode);\n bool aarch64_sve_ldff1_operand_p (rtx);\n bool aarch64_sve_ldnf1_operand_p (rtx);\n bool aarch64_sve_ldr_operand_p (rtx);"}, {"sha": "868a6afaf2e77a77df8a97e2c874d52f5c0b7029", "filename": "gcc/config/aarch64/aarch64-sve-builtins-base.cc", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc?ref=9ceec73fc0e5033049704becef5d79001e31a245", "patch": "@@ -1169,7 +1169,7 @@ class svld1_gather_extend_impl : public extending_load\n   }\n };\n \n-class svld1rq_impl : public function_base\n+class load_replicate : public function_base\n {\n public:\n   unsigned int\n@@ -1183,7 +1183,11 @@ class svld1rq_impl : public function_base\n   {\n     return fi.scalar_type (0);\n   }\n+};\n \n+class svld1rq_impl : public load_replicate\n+{\n+public:\n   machine_mode\n   memory_vector_mode (const function_instance &fi) const OVERRIDE\n   {\n@@ -1198,6 +1202,23 @@ class svld1rq_impl : public function_base\n   }\n };\n \n+class svld1ro_impl : public load_replicate\n+{\n+public:\n+  machine_mode\n+  memory_vector_mode (const function_instance &fi) const OVERRIDE\n+  {\n+    return OImode;\n+  }\n+\n+  rtx\n+  expand (function_expander &e) const OVERRIDE\n+  {\n+    insn_code icode = code_for_aarch64_sve_ld1ro (e.vector_mode (0));\n+    return e.use_contiguous_load_insn (icode);\n+  }\n+};\n+\n /* Implements svld2, svld3 and svld4.  */\n class svld234_impl : public full_width_access\n {\n@@ -2540,6 +2561,7 @@ FUNCTION (svlasta, svlast_impl, (UNSPEC_LASTA))\n FUNCTION (svlastb, svlast_impl, (UNSPEC_LASTB))\n FUNCTION (svld1, svld1_impl,)\n FUNCTION (svld1_gather, svld1_gather_impl,)\n+FUNCTION (svld1ro, svld1ro_impl,)\n FUNCTION (svld1rq, svld1rq_impl,)\n FUNCTION (svld1sb, svld1_extend_impl, (TYPE_SUFFIX_s8))\n FUNCTION (svld1sb_gather, svld1_gather_extend_impl, (TYPE_SUFFIX_s8))"}, {"sha": "78ff7b0cac076a6c9f2bdf8e5065ca2845b85a54", "filename": "gcc/config/aarch64/aarch64-sve-builtins-base.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.def?ref=9ceec73fc0e5033049704becef5d79001e31a245", "patch": "@@ -316,3 +316,7 @@ DEF_SVE_FUNCTION (svzip1, binary_pred, all_pred, none)\n DEF_SVE_FUNCTION (svzip2, binary, all_data, none)\n DEF_SVE_FUNCTION (svzip2, binary_pred, all_pred, none)\n #undef REQUIRED_EXTENSIONS\n+\n+#define REQUIRED_EXTENSIONS AARCH64_FL_V8_6 | AARCH64_FL_F64MM\n+DEF_SVE_FUNCTION (svld1ro, load_replicate, all_data, implicit)\n+#undef REQUIRED_EXTENSIONS"}, {"sha": "39418aa6d468c01da6643826dfec8a913e986704", "filename": "gcc/config/aarch64/aarch64-sve-builtins-base.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.h?ref=9ceec73fc0e5033049704becef5d79001e31a245", "patch": "@@ -108,6 +108,7 @@ namespace aarch64_sve\n     extern const function_base *const svlastb;\n     extern const function_base *const svld1;\n     extern const function_base *const svld1_gather;\n+    extern const function_base *const svld1ro;\n     extern const function_base *const svld1rq;\n     extern const function_base *const svld1sb;\n     extern const function_base *const svld1sb_gather;"}, {"sha": "587530a61bdb789ca32fc31446f67816227b6a4e", "filename": "gcc/config/aarch64/aarch64-sve-builtins.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc?ref=9ceec73fc0e5033049704becef5d79001e31a245", "patch": "@@ -2734,7 +2734,11 @@ function_expander::add_integer_operand (HOST_WIDE_INT x)\n void\n function_expander::add_mem_operand (machine_mode mode, rtx addr)\n {\n-  gcc_assert (VECTOR_MODE_P (mode));\n+  /* Exception for OImode for the ld1ro intrinsics.\n+     They act on 256 bit octaword data, and it's just easier to use a scalar\n+     mode to represent that than add a new vector mode solely for the purpose\n+     of this intrinsic.  */\n+  gcc_assert (VECTOR_MODE_P (mode) || mode == OImode);\n   rtx mem = gen_rtx_MEM (mode, memory_address (mode, addr));\n   /* The memory is only guaranteed to be element-aligned.  */\n   set_mem_align (mem, GET_MODE_ALIGNMENT (GET_MODE_INNER (mode)));"}, {"sha": "59b11926cf2d81f46846b7d6b01c51c231fafcbd", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=9ceec73fc0e5033049704becef5d79001e31a245", "patch": "@@ -2495,6 +2495,20 @@\n   }\n )\n \n+(define_insn \"@aarch64_sve_ld1ro<mode>\"\n+  [(set (match_operand:SVE_FULL 0 \"register_operand\" \"=w\")\n+\t(unspec:SVE_FULL\n+\t  [(match_operand:<VPRED> 2 \"register_operand\" \"Upl\")\n+\t   (match_operand:OI 1 \"aarch64_sve_ld1ro_operand_<Vesize>\"\n+\t\t\t       \"UO<Vesize>\")]\n+\t  UNSPEC_LD1RO))]\n+  \"TARGET_SVE && TARGET_ARMV8_6\"\n+  {\n+    operands[1] = gen_rtx_MEM (<VEL>mode, XEXP (operands[1], 0));\n+    return \"ld1ro<Vesize>\\t%0.<Vetype>, %2/z, %1\";\n+  }\n+)\n+\n ;; -------------------------------------------------------------------------\n ;; ---- [INT,FP] Initialize from individual elements\n ;; -------------------------------------------------------------------------"}, {"sha": "c26ac0db94289e0f367daa55f442d241a7d358be", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=9ceec73fc0e5033049704becef5d79001e31a245", "patch": "@@ -17150,25 +17150,43 @@ aarch64_sve_ld1r_operand_p (rtx op)\n \t  && offset_6bit_unsigned_scaled_p (mode, addr.const_offset));\n }\n \n-/* Return true if OP is a valid MEM operand for an SVE LD1RQ instruction.  */\n+/* Return true if OP is a valid MEM operand for an SVE LD1R{Q,O} instruction\n+   where the size of the read data is specified by `mode` and the size of the\n+   vector elements are specified by `elem_mode`.   */\n bool\n-aarch64_sve_ld1rq_operand_p (rtx op)\n+aarch64_sve_ld1rq_ld1ro_operand_p (rtx op, machine_mode mode,\n+\t\t\t\t   scalar_mode elem_mode)\n {\n   struct aarch64_address_info addr;\n-  scalar_mode elem_mode = GET_MODE_INNER (GET_MODE (op));\n   if (!MEM_P (op)\n       || !aarch64_classify_address (&addr, XEXP (op, 0), elem_mode, false))\n     return false;\n \n   if (addr.type == ADDRESS_REG_IMM)\n-    return offset_4bit_signed_scaled_p (TImode, addr.const_offset);\n+    return offset_4bit_signed_scaled_p (mode, addr.const_offset);\n \n   if (addr.type == ADDRESS_REG_REG)\n     return (1U << addr.shift) == GET_MODE_SIZE (elem_mode);\n \n   return false;\n }\n \n+/* Return true if OP is a valid MEM operand for an SVE LD1RQ instruction.  */\n+bool\n+aarch64_sve_ld1rq_operand_p (rtx op)\n+{\n+  return aarch64_sve_ld1rq_ld1ro_operand_p (op, TImode,\n+\t\t\t\t\t    GET_MODE_INNER (GET_MODE (op)));\n+}\n+\n+/* Return true if OP is a valid MEM operand for an SVE LD1RO instruction for\n+   accessing a vector where the element size is specified by `elem_mode`.  */\n+bool\n+aarch64_sve_ld1ro_operand_p (rtx op, scalar_mode elem_mode)\n+{\n+  return aarch64_sve_ld1rq_ld1ro_operand_p (op, OImode, elem_mode);\n+}\n+\n /* Return true if OP is a valid MEM operand for an SVE LDFF1 instruction.  */\n bool\n aarch64_sve_ldff1_operand_p (rtx op)"}, {"sha": "86c2cdfc7973f4b964ba233cfbbe369b24e0ac10", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=9ceec73fc0e5033049704becef5d79001e31a245", "patch": "@@ -279,6 +279,7 @@\n     UNSPEC_GEN_TAG\t\t; Generate a 4-bit MTE tag.\n     UNSPEC_GEN_TAG_RND\t\t; Generate a random 4-bit MTE tag.\n     UNSPEC_TAG_SPACE\t\t; Translate address to MTE tag address space.\n+    UNSPEC_LD1RO\n ])\n \n (define_c_enum \"unspecv\" ["}, {"sha": "7ae072be3951bbbf21023ab48c32ec681863d9d6", "filename": "gcc/config/aarch64/constraints.md", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fconstraints.md?ref=9ceec73fc0e5033049704becef5d79001e31a245", "patch": "@@ -320,6 +320,31 @@\n   (and (match_code \"mem\")\n        (match_test \"aarch64_sve_ld1rq_operand_p (op)\")))\n \n+(define_memory_constraint \"UOb\"\n+  \"@internal\n+   An address valid for SVE LD1ROH.\"\n+  (and (match_code \"mem\")\n+       (match_test \"aarch64_sve_ld1ro_operand_p (op, QImode)\")))\n+\n+(define_memory_constraint \"UOh\"\n+  \"@internal\n+   An address valid for SVE LD1ROH.\"\n+  (and (match_code \"mem\")\n+       (match_test \"aarch64_sve_ld1ro_operand_p (op, HImode)\")))\n+\n+\n+(define_memory_constraint \"UOw\"\n+  \"@internal\n+   An address valid for SVE LD1ROW.\"\n+  (and (match_code \"mem\")\n+       (match_test \"aarch64_sve_ld1ro_operand_p (op, SImode)\")))\n+\n+(define_memory_constraint \"UOd\"\n+  \"@internal\n+   An address valid for SVE LD1ROD.\"\n+  (and (match_code \"mem\")\n+       (match_test \"aarch64_sve_ld1ro_operand_p (op, DImode)\")))\n+\n (define_memory_constraint \"Uty\"\n   \"@internal\n    An address valid for SVE LD1Rs.\""}, {"sha": "215fcec5955340288572e816216274faf84ce7b0", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=9ceec73fc0e5033049704becef5d79001e31a245", "patch": "@@ -588,6 +588,22 @@\n   (and (match_code \"mem\")\n        (match_test \"aarch64_sve_ld1rq_operand_p (op)\")))\n \n+(define_predicate \"aarch64_sve_ld1ro_operand_b\"\n+  (and (match_code \"mem\")\n+       (match_test \"aarch64_sve_ld1ro_operand_p (op, QImode)\")))\n+\n+(define_predicate \"aarch64_sve_ld1ro_operand_h\"\n+  (and (match_code \"mem\")\n+       (match_test \"aarch64_sve_ld1ro_operand_p (op, HImode)\")))\n+\n+(define_predicate \"aarch64_sve_ld1ro_operand_w\"\n+  (and (match_code \"mem\")\n+       (match_test \"aarch64_sve_ld1ro_operand_p (op, SImode)\")))\n+\n+(define_predicate \"aarch64_sve_ld1ro_operand_d\"\n+  (and (match_code \"mem\")\n+       (match_test \"aarch64_sve_ld1ro_operand_p (op, DImode)\")))\n+\n (define_predicate \"aarch64_sve_ldff1_operand\"\n   (and (match_code \"mem\")\n        (match_test \"aarch64_sve_ldff1_operand_p (op)\")))"}, {"sha": "bc24a592305017d57d6e6ddb3d599761cd416aa8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9ceec73fc0e5033049704becef5d79001e31a245", "patch": "@@ -1,3 +1,17 @@\n+2020-01-17  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* gcc.target/aarch64/sve/acle/asm/ld1ro_f16.c: New test.\n+\t* gcc.target/aarch64/sve/acle/asm/ld1ro_f32.c: New test.\n+\t* gcc.target/aarch64/sve/acle/asm/ld1ro_f64.c: New test.\n+\t* gcc.target/aarch64/sve/acle/asm/ld1ro_s16.c: New test.\n+\t* gcc.target/aarch64/sve/acle/asm/ld1ro_s32.c: New test.\n+\t* gcc.target/aarch64/sve/acle/asm/ld1ro_s64.c: New test.\n+\t* gcc.target/aarch64/sve/acle/asm/ld1ro_s8.c: New test.\n+\t* gcc.target/aarch64/sve/acle/asm/ld1ro_u16.c: New test.\n+\t* gcc.target/aarch64/sve/acle/asm/ld1ro_u32.c: New test.\n+\t* gcc.target/aarch64/sve/acle/asm/ld1ro_u64.c: New test.\n+\t* gcc.target/aarch64/sve/acle/asm/ld1ro_u8.c: New test.\n+\n 2020-01-17  Matthew Malcomson  <matthew.malcomson@arm.com>\n \n \t* gcc.target/aarch64/pragma_cpp_predefs_2.c: Check for f64mm"}, {"sha": "7badc75a43ab2009e9406afc04c980fc01834716", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld1ro_f16.c", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_f16.c?ref=9ceec73fc0e5033049704becef5d79001e31a245", "patch": "@@ -0,0 +1,119 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+/* { dg-additional-options \"-march=armv8.6-a+sve+f64mm\" } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** ld1ro_f16_base:\n+**\tld1roh\tz0\\.h, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f16_base, svfloat16_t, float16_t,\n+\t   z0 = svld1ro_f16 (p0, x0),\n+\t   z0 = svld1ro (p0, x0))\n+\n+/*\n+** ld1ro_f16_index:\n+**\tld1roh\tz0\\.h, p0/z, \\[x0, x1, lsl 1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f16_index, svfloat16_t, float16_t,\n+\t   z0 = svld1ro_f16 (p0, x0 + x1),\n+\t   z0 = svld1ro (p0, x0 + x1))\n+\n+/*\n+** ld1ro_f16_1:\n+**\tadd\t(x[0-9]+), x0, #?2\n+**\tld1roh\tz0\\.h, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f16_1, svfloat16_t, float16_t,\n+\t   z0 = svld1ro_f16 (p0, x0 + 1),\n+\t   z0 = svld1ro (p0, x0 + 1))\n+\n+/*\n+** ld1ro_f16_8:\n+**\tadd\t(x[0-9]+), x0, #?16\n+**\tld1roh\tz0\\.h, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f16_8, svfloat16_t, float16_t,\n+\t   z0 = svld1ro_f16 (p0, x0 + 8),\n+\t   z0 = svld1ro (p0, x0 + 8))\n+\n+/*\n+** ld1ro_f16_128:\n+**\tadd\t(x[0-9]+), x0, #?256\n+**\tld1roh\tz0\\.h, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f16_128, svfloat16_t, float16_t,\n+\t   z0 = svld1ro_f16 (p0, x0 + 128),\n+\t   z0 = svld1ro (p0, x0 + 128))\n+\n+/*\n+** ld1ro_f16_m1:\n+**\tsub\t(x[0-9]+), x0, #?2\n+**\tld1roh\tz0\\.h, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f16_m1, svfloat16_t, float16_t,\n+\t   z0 = svld1ro_f16 (p0, x0 - 1),\n+\t   z0 = svld1ro (p0, x0 - 1))\n+\n+/*\n+** ld1ro_f16_m8:\n+**\tsub\t(x[0-9]+), x0, #?16\n+**\tld1roh\tz0\\.h, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f16_m8, svfloat16_t, float16_t,\n+\t   z0 = svld1ro_f16 (p0, x0 - 8),\n+\t   z0 = svld1ro (p0, x0 - 8))\n+\n+/*\n+** ld1ro_f16_m144:\n+**\tsub\t(x[0-9]+), x0, #?288\n+**\tld1roh\tz0\\.h, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f16_m144, svfloat16_t, float16_t,\n+\t   z0 = svld1ro_f16 (p0, x0 - 144),\n+\t   z0 = svld1ro (p0, x0 - 144))\n+\n+/*\n+** ld1ro_f16_16:\n+**\tld1roh\tz0\\.h, p0/z, \\[x0, #?32\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f16_16, svfloat16_t, float16_t,\n+\t   z0 = svld1ro_f16 (p0, x0 + 16),\n+\t   z0 = svld1ro (p0, x0 + 16))\n+\n+/*\n+** ld1ro_f16_112:\n+**\tld1roh\tz0\\.h, p0/z, \\[x0, #?224\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f16_112, svfloat16_t, float16_t,\n+\t   z0 = svld1ro_f16 (p0, x0 + 112),\n+\t   z0 = svld1ro (p0, x0 + 112))\n+\n+/*\n+** ld1ro_f16_m16:\n+**\tld1roh\tz0\\.h, p0/z, \\[x0, #?-32\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f16_m16, svfloat16_t, float16_t,\n+\t   z0 = svld1ro_f16 (p0, x0 - 16),\n+\t   z0 = svld1ro (p0, x0 - 16))\n+\n+/*\n+** ld1ro_f16_m128:\n+**\tld1roh\tz0\\.h, p0/z, \\[x0, #?-256\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f16_m128, svfloat16_t, float16_t,\n+\t   z0 = svld1ro_f16 (p0, x0 - 128),\n+\t   z0 = svld1ro (p0, x0 - 128))\n+"}, {"sha": "dd8a1c53cd0fb7b7acd0b92394f3977382ac26e0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld1ro_f32.c", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_f32.c?ref=9ceec73fc0e5033049704becef5d79001e31a245", "patch": "@@ -0,0 +1,119 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+/* { dg-additional-options \"-march=armv8.6-a+sve+f64mm\" } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** ld1ro_f32_base:\n+**\tld1row\tz0\\.s, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f32_base, svfloat32_t, float32_t,\n+\t   z0 = svld1ro_f32 (p0, x0),\n+\t   z0 = svld1ro (p0, x0))\n+\n+/*\n+** ld1ro_f32_index:\n+**\tld1row\tz0\\.s, p0/z, \\[x0, x1, lsl 2\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f32_index, svfloat32_t, float32_t,\n+\t   z0 = svld1ro_f32 (p0, x0 + x1),\n+\t   z0 = svld1ro (p0, x0 + x1))\n+\n+/*\n+** ld1ro_f32_1:\n+**\tadd\t(x[0-9]+), x0, #?4\n+**\tld1row\tz0\\.s, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f32_1, svfloat32_t, float32_t,\n+\t   z0 = svld1ro_f32 (p0, x0 + 1),\n+\t   z0 = svld1ro (p0, x0 + 1))\n+\n+/*\n+** ld1ro_f32_4:\n+**\tadd\t(x[0-9]+), x0, #?16\n+**\tld1row\tz0\\.s, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f32_4, svfloat32_t, float32_t,\n+\t   z0 = svld1ro_f32 (p0, x0 + 4),\n+\t   z0 = svld1ro (p0, x0 + 4))\n+\n+/*\n+** ld1ro_f32_64:\n+**\tadd\t(x[0-9]+), x0, #?256\n+**\tld1row\tz0\\.s, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f32_64, svfloat32_t, float32_t,\n+\t   z0 = svld1ro_f32 (p0, x0 + 64),\n+\t   z0 = svld1ro (p0, x0 + 64))\n+\n+/*\n+** ld1ro_f32_m1:\n+**\tsub\t(x[0-9]+), x0, #?4\n+**\tld1row\tz0\\.s, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f32_m1, svfloat32_t, float32_t,\n+\t   z0 = svld1ro_f32 (p0, x0 - 1),\n+\t   z0 = svld1ro (p0, x0 - 1))\n+\n+/*\n+** ld1ro_f32_m4:\n+**\tsub\t(x[0-9]+), x0, #?16\n+**\tld1row\tz0\\.s, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f32_m4, svfloat32_t, float32_t,\n+\t   z0 = svld1ro_f32 (p0, x0 - 4),\n+\t   z0 = svld1ro (p0, x0 - 4))\n+\n+/*\n+** ld1ro_f32_m72:\n+**\tsub\t(x[0-9]+), x0, #?288\n+**\tld1row\tz0\\.s, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f32_m72, svfloat32_t, float32_t,\n+\t   z0 = svld1ro_f32 (p0, x0 - 72),\n+\t   z0 = svld1ro (p0, x0 - 72))\n+\n+/*\n+** ld1ro_f32_8:\n+**\tld1row\tz0\\.s, p0/z, \\[x0, #?32\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f32_8, svfloat32_t, float32_t,\n+\t   z0 = svld1ro_f32 (p0, x0 + 8),\n+\t   z0 = svld1ro (p0, x0 + 8))\n+\n+/*\n+** ld1ro_f32_56:\n+**\tld1row\tz0\\.s, p0/z, \\[x0, #?224\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f32_56, svfloat32_t, float32_t,\n+\t   z0 = svld1ro_f32 (p0, x0 + 56),\n+\t   z0 = svld1ro (p0, x0 + 56))\n+\n+/*\n+** ld1ro_f32_m8:\n+**\tld1row\tz0\\.s, p0/z, \\[x0, #?-32\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f32_m8, svfloat32_t, float32_t,\n+\t   z0 = svld1ro_f32 (p0, x0 - 8),\n+\t   z0 = svld1ro (p0, x0 - 8))\n+\n+/*\n+** ld1ro_f32_m64:\n+**\tld1row\tz0\\.s, p0/z, \\[x0, #?-256\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f32_m64, svfloat32_t, float32_t,\n+\t   z0 = svld1ro_f32 (p0, x0 - 64),\n+\t   z0 = svld1ro (p0, x0 - 64))\n+"}, {"sha": "30563698310f65060d34be4bef4c57a74ef9d734", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld1ro_f64.c", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_f64.c?ref=9ceec73fc0e5033049704becef5d79001e31a245", "patch": "@@ -0,0 +1,119 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+/* { dg-additional-options \"-march=armv8.6-a+sve+f64mm\" } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** ld1ro_f64_base:\n+**\tld1rod\tz0\\.d, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f64_base, svfloat64_t, float64_t,\n+\t   z0 = svld1ro_f64 (p0, x0),\n+\t   z0 = svld1ro (p0, x0))\n+\n+/*\n+** ld1ro_f64_index:\n+**\tld1rod\tz0\\.d, p0/z, \\[x0, x1, lsl 3\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f64_index, svfloat64_t, float64_t,\n+\t   z0 = svld1ro_f64 (p0, x0 + x1),\n+\t   z0 = svld1ro (p0, x0 + x1))\n+\n+/*\n+** ld1ro_f64_1:\n+**\tadd\t(x[0-9]+), x0, #?8\n+**\tld1rod\tz0\\.d, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f64_1, svfloat64_t, float64_t,\n+\t   z0 = svld1ro_f64 (p0, x0 + 1),\n+\t   z0 = svld1ro (p0, x0 + 1))\n+\n+/*\n+** ld1ro_f64_2:\n+**\tadd\t(x[0-9]+), x0, #?16\n+**\tld1rod\tz0\\.d, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f64_2, svfloat64_t, float64_t,\n+\t   z0 = svld1ro_f64 (p0, x0 + 2),\n+\t   z0 = svld1ro (p0, x0 + 2))\n+\n+/*\n+** ld1ro_f64_32:\n+**\tadd\t(x[0-9]+), x0, #?256\n+**\tld1rod\tz0\\.d, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f64_32, svfloat64_t, float64_t,\n+\t   z0 = svld1ro_f64 (p0, x0 + 32),\n+\t   z0 = svld1ro (p0, x0 + 32))\n+\n+/*\n+** ld1ro_f64_m1:\n+**\tsub\t(x[0-9]+), x0, #?8\n+**\tld1rod\tz0\\.d, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f64_m1, svfloat64_t, float64_t,\n+\t   z0 = svld1ro_f64 (p0, x0 - 1),\n+\t   z0 = svld1ro (p0, x0 - 1))\n+\n+/*\n+** ld1ro_f64_m2:\n+**\tsub\t(x[0-9]+), x0, #?16\n+**\tld1rod\tz0\\.d, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f64_m2, svfloat64_t, float64_t,\n+\t   z0 = svld1ro_f64 (p0, x0 - 2),\n+\t   z0 = svld1ro (p0, x0 - 2))\n+\n+/*\n+** ld1ro_f64_m36:\n+**\tsub\t(x[0-9]+), x0, #?288\n+**\tld1rod\tz0\\.d, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f64_m36, svfloat64_t, float64_t,\n+\t   z0 = svld1ro_f64 (p0, x0 - 36),\n+\t   z0 = svld1ro (p0, x0 - 36))\n+\n+/*\n+** ld1ro_f64_4:\n+**\tld1rod\tz0\\.d, p0/z, \\[x0, #?32\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f64_4, svfloat64_t, float64_t,\n+\t   z0 = svld1ro_f64 (p0, x0 + 4),\n+\t   z0 = svld1ro (p0, x0 + 4))\n+\n+/*\n+** ld1ro_f64_28:\n+**\tld1rod\tz0\\.d, p0/z, \\[x0, #?224\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f64_28, svfloat64_t, float64_t,\n+\t   z0 = svld1ro_f64 (p0, x0 + 28),\n+\t   z0 = svld1ro (p0, x0 + 28))\n+\n+/*\n+** ld1ro_f64_m4:\n+**\tld1rod\tz0\\.d, p0/z, \\[x0, #?-32\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f64_m4, svfloat64_t, float64_t,\n+\t   z0 = svld1ro_f64 (p0, x0 - 4),\n+\t   z0 = svld1ro (p0, x0 - 4))\n+\n+/*\n+** ld1ro_f64_m32:\n+**\tld1rod\tz0\\.d, p0/z, \\[x0, #?-256\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_f64_m32, svfloat64_t, float64_t,\n+\t   z0 = svld1ro_f64 (p0, x0 - 32),\n+\t   z0 = svld1ro (p0, x0 - 32))\n+"}, {"sha": "d4702fa6cc15e9f93751d8579cfecfd37759306e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld1ro_s16.c", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_s16.c?ref=9ceec73fc0e5033049704becef5d79001e31a245", "patch": "@@ -0,0 +1,119 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+/* { dg-additional-options \"-march=armv8.6-a+sve+f64mm\" } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** ld1ro_s16_base:\n+**\tld1roh\tz0\\.h, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s16_base, svint16_t, int16_t,\n+\t   z0 = svld1ro_s16 (p0, x0),\n+\t   z0 = svld1ro (p0, x0))\n+\n+/*\n+** ld1ro_s16_index:\n+**\tld1roh\tz0\\.h, p0/z, \\[x0, x1, lsl 1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s16_index, svint16_t, int16_t,\n+\t   z0 = svld1ro_s16 (p0, x0 + x1),\n+\t   z0 = svld1ro (p0, x0 + x1))\n+\n+/*\n+** ld1ro_s16_1:\n+**\tadd\t(x[0-9]+), x0, #?2\n+**\tld1roh\tz0\\.h, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s16_1, svint16_t, int16_t,\n+\t   z0 = svld1ro_s16 (p0, x0 + 1),\n+\t   z0 = svld1ro (p0, x0 + 1))\n+\n+/*\n+** ld1ro_s16_8:\n+**\tadd\t(x[0-9]+), x0, #?16\n+**\tld1roh\tz0\\.h, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s16_8, svint16_t, int16_t,\n+\t   z0 = svld1ro_s16 (p0, x0 + 8),\n+\t   z0 = svld1ro (p0, x0 + 8))\n+\n+/*\n+** ld1ro_s16_128:\n+**\tadd\t(x[0-9]+), x0, #?256\n+**\tld1roh\tz0\\.h, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s16_128, svint16_t, int16_t,\n+\t   z0 = svld1ro_s16 (p0, x0 + 128),\n+\t   z0 = svld1ro (p0, x0 + 128))\n+\n+/*\n+** ld1ro_s16_m1:\n+**\tsub\t(x[0-9]+), x0, #?2\n+**\tld1roh\tz0\\.h, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s16_m1, svint16_t, int16_t,\n+\t   z0 = svld1ro_s16 (p0, x0 - 1),\n+\t   z0 = svld1ro (p0, x0 - 1))\n+\n+/*\n+** ld1ro_s16_m8:\n+**\tsub\t(x[0-9]+), x0, #?16\n+**\tld1roh\tz0\\.h, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s16_m8, svint16_t, int16_t,\n+\t   z0 = svld1ro_s16 (p0, x0 - 8),\n+\t   z0 = svld1ro (p0, x0 - 8))\n+\n+/*\n+** ld1ro_s16_m144:\n+**\tsub\t(x[0-9]+), x0, #?288\n+**\tld1roh\tz0\\.h, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s16_m144, svint16_t, int16_t,\n+\t   z0 = svld1ro_s16 (p0, x0 - 144),\n+\t   z0 = svld1ro (p0, x0 - 144))\n+\n+/*\n+** ld1ro_s16_16:\n+**\tld1roh\tz0\\.h, p0/z, \\[x0, #?32\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s16_16, svint16_t, int16_t,\n+\t   z0 = svld1ro_s16 (p0, x0 + 16),\n+\t   z0 = svld1ro (p0, x0 + 16))\n+\n+/*\n+** ld1ro_s16_112:\n+**\tld1roh\tz0\\.h, p0/z, \\[x0, #?224\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s16_112, svint16_t, int16_t,\n+\t   z0 = svld1ro_s16 (p0, x0 + 112),\n+\t   z0 = svld1ro (p0, x0 + 112))\n+\n+/*\n+** ld1ro_s16_m16:\n+**\tld1roh\tz0\\.h, p0/z, \\[x0, #?-32\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s16_m16, svint16_t, int16_t,\n+\t   z0 = svld1ro_s16 (p0, x0 - 16),\n+\t   z0 = svld1ro (p0, x0 - 16))\n+\n+/*\n+** ld1ro_s16_m128:\n+**\tld1roh\tz0\\.h, p0/z, \\[x0, #?-256\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s16_m128, svint16_t, int16_t,\n+\t   z0 = svld1ro_s16 (p0, x0 - 128),\n+\t   z0 = svld1ro (p0, x0 - 128))\n+"}, {"sha": "4604b0b5fbfb716ae814bf88f7acfe8bf0eaa9f5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld1ro_s32.c", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_s32.c?ref=9ceec73fc0e5033049704becef5d79001e31a245", "patch": "@@ -0,0 +1,119 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+/* { dg-additional-options \"-march=armv8.6-a+sve+f64mm\" } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** ld1ro_s32_base:\n+**\tld1row\tz0\\.s, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s32_base, svint32_t, int32_t,\n+\t   z0 = svld1ro_s32 (p0, x0),\n+\t   z0 = svld1ro (p0, x0))\n+\n+/*\n+** ld1ro_s32_index:\n+**\tld1row\tz0\\.s, p0/z, \\[x0, x1, lsl 2\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s32_index, svint32_t, int32_t,\n+\t   z0 = svld1ro_s32 (p0, x0 + x1),\n+\t   z0 = svld1ro (p0, x0 + x1))\n+\n+/*\n+** ld1ro_s32_1:\n+**\tadd\t(x[0-9]+), x0, #?4\n+**\tld1row\tz0\\.s, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s32_1, svint32_t, int32_t,\n+\t   z0 = svld1ro_s32 (p0, x0 + 1),\n+\t   z0 = svld1ro (p0, x0 + 1))\n+\n+/*\n+** ld1ro_s32_4:\n+**\tadd\t(x[0-9]+), x0, #?16\n+**\tld1row\tz0\\.s, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s32_4, svint32_t, int32_t,\n+\t   z0 = svld1ro_s32 (p0, x0 + 4),\n+\t   z0 = svld1ro (p0, x0 + 4))\n+\n+/*\n+** ld1ro_s32_64:\n+**\tadd\t(x[0-9]+), x0, #?256\n+**\tld1row\tz0\\.s, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s32_64, svint32_t, int32_t,\n+\t   z0 = svld1ro_s32 (p0, x0 + 64),\n+\t   z0 = svld1ro (p0, x0 + 64))\n+\n+/*\n+** ld1ro_s32_m1:\n+**\tsub\t(x[0-9]+), x0, #?4\n+**\tld1row\tz0\\.s, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s32_m1, svint32_t, int32_t,\n+\t   z0 = svld1ro_s32 (p0, x0 - 1),\n+\t   z0 = svld1ro (p0, x0 - 1))\n+\n+/*\n+** ld1ro_s32_m4:\n+**\tsub\t(x[0-9]+), x0, #?16\n+**\tld1row\tz0\\.s, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s32_m4, svint32_t, int32_t,\n+\t   z0 = svld1ro_s32 (p0, x0 - 4),\n+\t   z0 = svld1ro (p0, x0 - 4))\n+\n+/*\n+** ld1ro_s32_m72:\n+**\tsub\t(x[0-9]+), x0, #?288\n+**\tld1row\tz0\\.s, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s32_m72, svint32_t, int32_t,\n+\t   z0 = svld1ro_s32 (p0, x0 - 72),\n+\t   z0 = svld1ro (p0, x0 - 72))\n+\n+/*\n+** ld1ro_s32_8:\n+**\tld1row\tz0\\.s, p0/z, \\[x0, #?32\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s32_8, svint32_t, int32_t,\n+\t   z0 = svld1ro_s32 (p0, x0 + 8),\n+\t   z0 = svld1ro (p0, x0 + 8))\n+\n+/*\n+** ld1ro_s32_56:\n+**\tld1row\tz0\\.s, p0/z, \\[x0, #?224\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s32_56, svint32_t, int32_t,\n+\t   z0 = svld1ro_s32 (p0, x0 + 56),\n+\t   z0 = svld1ro (p0, x0 + 56))\n+\n+/*\n+** ld1ro_s32_m8:\n+**\tld1row\tz0\\.s, p0/z, \\[x0, #?-32\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s32_m8, svint32_t, int32_t,\n+\t   z0 = svld1ro_s32 (p0, x0 - 8),\n+\t   z0 = svld1ro (p0, x0 - 8))\n+\n+/*\n+** ld1ro_s32_m64:\n+**\tld1row\tz0\\.s, p0/z, \\[x0, #?-256\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s32_m64, svint32_t, int32_t,\n+\t   z0 = svld1ro_s32 (p0, x0 - 64),\n+\t   z0 = svld1ro (p0, x0 - 64))\n+"}, {"sha": "dac98b293fb88f733ffcaec04a8b9861c3c502bf", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld1ro_s64.c", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_s64.c?ref=9ceec73fc0e5033049704becef5d79001e31a245", "patch": "@@ -0,0 +1,119 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+/* { dg-additional-options \"-march=armv8.6-a+sve+f64mm\" } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** ld1ro_s64_base:\n+**\tld1rod\tz0\\.d, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s64_base, svint64_t, int64_t,\n+\t   z0 = svld1ro_s64 (p0, x0),\n+\t   z0 = svld1ro (p0, x0))\n+\n+/*\n+** ld1ro_s64_index:\n+**\tld1rod\tz0\\.d, p0/z, \\[x0, x1, lsl 3\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s64_index, svint64_t, int64_t,\n+\t   z0 = svld1ro_s64 (p0, x0 + x1),\n+\t   z0 = svld1ro (p0, x0 + x1))\n+\n+/*\n+** ld1ro_s64_1:\n+**\tadd\t(x[0-9]+), x0, #?8\n+**\tld1rod\tz0\\.d, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s64_1, svint64_t, int64_t,\n+\t   z0 = svld1ro_s64 (p0, x0 + 1),\n+\t   z0 = svld1ro (p0, x0 + 1))\n+\n+/*\n+** ld1ro_s64_2:\n+**\tadd\t(x[0-9]+), x0, #?16\n+**\tld1rod\tz0\\.d, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s64_2, svint64_t, int64_t,\n+\t   z0 = svld1ro_s64 (p0, x0 + 2),\n+\t   z0 = svld1ro (p0, x0 + 2))\n+\n+/*\n+** ld1ro_s64_32:\n+**\tadd\t(x[0-9]+), x0, #?256\n+**\tld1rod\tz0\\.d, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s64_32, svint64_t, int64_t,\n+\t   z0 = svld1ro_s64 (p0, x0 + 32),\n+\t   z0 = svld1ro (p0, x0 + 32))\n+\n+/*\n+** ld1ro_s64_m1:\n+**\tsub\t(x[0-9]+), x0, #?8\n+**\tld1rod\tz0\\.d, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s64_m1, svint64_t, int64_t,\n+\t   z0 = svld1ro_s64 (p0, x0 - 1),\n+\t   z0 = svld1ro (p0, x0 - 1))\n+\n+/*\n+** ld1ro_s64_m2:\n+**\tsub\t(x[0-9]+), x0, #?16\n+**\tld1rod\tz0\\.d, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s64_m2, svint64_t, int64_t,\n+\t   z0 = svld1ro_s64 (p0, x0 - 2),\n+\t   z0 = svld1ro (p0, x0 - 2))\n+\n+/*\n+** ld1ro_s64_m36:\n+**\tsub\t(x[0-9]+), x0, #?288\n+**\tld1rod\tz0\\.d, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s64_m36, svint64_t, int64_t,\n+\t   z0 = svld1ro_s64 (p0, x0 - 36),\n+\t   z0 = svld1ro (p0, x0 - 36))\n+\n+/*\n+** ld1ro_s64_4:\n+**\tld1rod\tz0\\.d, p0/z, \\[x0, #?32\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s64_4, svint64_t, int64_t,\n+\t   z0 = svld1ro_s64 (p0, x0 + 4),\n+\t   z0 = svld1ro (p0, x0 + 4))\n+\n+/*\n+** ld1ro_s64_28:\n+**\tld1rod\tz0\\.d, p0/z, \\[x0, #?224\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s64_28, svint64_t, int64_t,\n+\t   z0 = svld1ro_s64 (p0, x0 + 28),\n+\t   z0 = svld1ro (p0, x0 + 28))\n+\n+/*\n+** ld1ro_s64_m4:\n+**\tld1rod\tz0\\.d, p0/z, \\[x0, #?-32\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s64_m4, svint64_t, int64_t,\n+\t   z0 = svld1ro_s64 (p0, x0 - 4),\n+\t   z0 = svld1ro (p0, x0 - 4))\n+\n+/*\n+** ld1ro_s64_m32:\n+**\tld1rod\tz0\\.d, p0/z, \\[x0, #?-256\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s64_m32, svint64_t, int64_t,\n+\t   z0 = svld1ro_s64 (p0, x0 - 32),\n+\t   z0 = svld1ro (p0, x0 - 32))\n+"}, {"sha": "17df5dbb0d7302d9d735b13fb97111a657efbbfc", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld1ro_s8.c", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_s8.c?ref=9ceec73fc0e5033049704becef5d79001e31a245", "patch": "@@ -0,0 +1,119 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+/* { dg-additional-options \"-march=armv8.6-a+sve+f64mm\" } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** ld1ro_s8_base:\n+**\tld1rob\tz0\\.b, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s8_base, svint8_t, int8_t,\n+\t   z0 = svld1ro_s8 (p0, x0),\n+\t   z0 = svld1ro (p0, x0))\n+\n+/*\n+** ld1ro_s8_index:\n+**\tld1rob\tz0\\.b, p0/z, \\[x0, x1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s8_index, svint8_t, int8_t,\n+\t   z0 = svld1ro_s8 (p0, x0 + x1),\n+\t   z0 = svld1ro (p0, x0 + x1))\n+\n+/*\n+** ld1ro_s8_1:\n+**\tadd\t(x[0-9]+), x0, #?1\n+**\tld1rob\tz0\\.b, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s8_1, svint8_t, int8_t,\n+\t   z0 = svld1ro_s8 (p0, x0 + 1),\n+\t   z0 = svld1ro (p0, x0 + 1))\n+\n+/*\n+** ld1ro_s8_16:\n+**\tadd\t(x[0-9]+), x0, #?16\n+**\tld1rob\tz0\\.b, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s8_16, svint8_t, int8_t,\n+\t   z0 = svld1ro_s8 (p0, x0 + 16),\n+\t   z0 = svld1ro (p0, x0 + 16))\n+\n+/*\n+** ld1ro_s8_256:\n+**\tadd\t(x[0-9]+), x0, #?256\n+**\tld1rob\tz0\\.b, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s8_256, svint8_t, int8_t,\n+\t   z0 = svld1ro_s8 (p0, x0 + 256),\n+\t   z0 = svld1ro (p0, x0 + 256))\n+\n+/*\n+** ld1ro_s8_m1:\n+**\tsub\t(x[0-9]+), x0, #?1\n+**\tld1rob\tz0\\.b, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s8_m1, svint8_t, int8_t,\n+\t   z0 = svld1ro_s8 (p0, x0 - 1),\n+\t   z0 = svld1ro (p0, x0 - 1))\n+\n+/*\n+** ld1ro_s8_m16:\n+**\tsub\t(x[0-9]+), x0, #?16\n+**\tld1rob\tz0\\.b, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s8_m16, svint8_t, int8_t,\n+\t   z0 = svld1ro_s8 (p0, x0 - 16),\n+\t   z0 = svld1ro (p0, x0 - 16))\n+\n+/*\n+** ld1ro_s8_m288:\n+**\tsub\t(x[0-9]+), x0, #?288\n+**\tld1rob\tz0\\.b, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s8_m288, svint8_t, int8_t,\n+\t   z0 = svld1ro_s8 (p0, x0 - 288),\n+\t   z0 = svld1ro (p0, x0 - 288))\n+\n+/*\n+** ld1ro_s8_32:\n+**\tld1rob\tz0\\.b, p0/z, \\[x0, #?32\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s8_32, svint8_t, int8_t,\n+\t   z0 = svld1ro_s8 (p0, x0 + 32),\n+\t   z0 = svld1ro (p0, x0 + 32))\n+\n+/*\n+** ld1ro_s8_224:\n+**\tld1rob\tz0\\.b, p0/z, \\[x0, #?224\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s8_224, svint8_t, int8_t,\n+\t   z0 = svld1ro_s8 (p0, x0 + 224),\n+\t   z0 = svld1ro (p0, x0 + 224))\n+\n+/*\n+** ld1ro_s8_m32:\n+**\tld1rob\tz0\\.b, p0/z, \\[x0, #?-32\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s8_m32, svint8_t, int8_t,\n+\t   z0 = svld1ro_s8 (p0, x0 - 32),\n+\t   z0 = svld1ro (p0, x0 - 32))\n+\n+/*\n+** ld1ro_s8_m256:\n+**\tld1rob\tz0\\.b, p0/z, \\[x0, #?-256\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_s8_m256, svint8_t, int8_t,\n+\t   z0 = svld1ro_s8 (p0, x0 - 256),\n+\t   z0 = svld1ro (p0, x0 - 256))\n+"}, {"sha": "611e9166b0ff6d98ab3d05799072484a623ae3a0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld1ro_u16.c", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_u16.c?ref=9ceec73fc0e5033049704becef5d79001e31a245", "patch": "@@ -0,0 +1,119 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+/* { dg-additional-options \"-march=armv8.6-a+sve+f64mm\" } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** ld1ro_u16_base:\n+**\tld1roh\tz0\\.h, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u16_base, svuint16_t, uint16_t,\n+\t   z0 = svld1ro_u16 (p0, x0),\n+\t   z0 = svld1ro (p0, x0))\n+\n+/*\n+** ld1ro_u16_index:\n+**\tld1roh\tz0\\.h, p0/z, \\[x0, x1, lsl 1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u16_index, svuint16_t, uint16_t,\n+\t   z0 = svld1ro_u16 (p0, x0 + x1),\n+\t   z0 = svld1ro (p0, x0 + x1))\n+\n+/*\n+** ld1ro_u16_1:\n+**\tadd\t(x[0-9]+), x0, #?2\n+**\tld1roh\tz0\\.h, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u16_1, svuint16_t, uint16_t,\n+\t   z0 = svld1ro_u16 (p0, x0 + 1),\n+\t   z0 = svld1ro (p0, x0 + 1))\n+\n+/*\n+** ld1ro_u16_8:\n+**\tadd\t(x[0-9]+), x0, #?16\n+**\tld1roh\tz0\\.h, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u16_8, svuint16_t, uint16_t,\n+\t   z0 = svld1ro_u16 (p0, x0 + 8),\n+\t   z0 = svld1ro (p0, x0 + 8))\n+\n+/*\n+** ld1ro_u16_128:\n+**\tadd\t(x[0-9]+), x0, #?256\n+**\tld1roh\tz0\\.h, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u16_128, svuint16_t, uint16_t,\n+\t   z0 = svld1ro_u16 (p0, x0 + 128),\n+\t   z0 = svld1ro (p0, x0 + 128))\n+\n+/*\n+** ld1ro_u16_m1:\n+**\tsub\t(x[0-9]+), x0, #?2\n+**\tld1roh\tz0\\.h, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u16_m1, svuint16_t, uint16_t,\n+\t   z0 = svld1ro_u16 (p0, x0 - 1),\n+\t   z0 = svld1ro (p0, x0 - 1))\n+\n+/*\n+** ld1ro_u16_m8:\n+**\tsub\t(x[0-9]+), x0, #?16\n+**\tld1roh\tz0\\.h, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u16_m8, svuint16_t, uint16_t,\n+\t   z0 = svld1ro_u16 (p0, x0 - 8),\n+\t   z0 = svld1ro (p0, x0 - 8))\n+\n+/*\n+** ld1ro_u16_m144:\n+**\tsub\t(x[0-9]+), x0, #?288\n+**\tld1roh\tz0\\.h, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u16_m144, svuint16_t, uint16_t,\n+\t   z0 = svld1ro_u16 (p0, x0 - 144),\n+\t   z0 = svld1ro (p0, x0 - 144))\n+\n+/*\n+** ld1ro_u16_16:\n+**\tld1roh\tz0\\.h, p0/z, \\[x0, #?32\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u16_16, svuint16_t, uint16_t,\n+\t   z0 = svld1ro_u16 (p0, x0 + 16),\n+\t   z0 = svld1ro (p0, x0 + 16))\n+\n+/*\n+** ld1ro_u16_112:\n+**\tld1roh\tz0\\.h, p0/z, \\[x0, #?224\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u16_112, svuint16_t, uint16_t,\n+\t   z0 = svld1ro_u16 (p0, x0 + 112),\n+\t   z0 = svld1ro (p0, x0 + 112))\n+\n+/*\n+** ld1ro_u16_m16:\n+**\tld1roh\tz0\\.h, p0/z, \\[x0, #?-32\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u16_m16, svuint16_t, uint16_t,\n+\t   z0 = svld1ro_u16 (p0, x0 - 16),\n+\t   z0 = svld1ro (p0, x0 - 16))\n+\n+/*\n+** ld1ro_u16_m128:\n+**\tld1roh\tz0\\.h, p0/z, \\[x0, #?-256\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u16_m128, svuint16_t, uint16_t,\n+\t   z0 = svld1ro_u16 (p0, x0 - 128),\n+\t   z0 = svld1ro (p0, x0 - 128))\n+"}, {"sha": "7cb5bb93aa008272f9d765be567f084da0adc9a6", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld1ro_u32.c", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_u32.c?ref=9ceec73fc0e5033049704becef5d79001e31a245", "patch": "@@ -0,0 +1,119 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+/* { dg-additional-options \"-march=armv8.6-a+sve+f64mm\" } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** ld1ro_u32_base:\n+**\tld1row\tz0\\.s, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u32_base, svuint32_t, uint32_t,\n+\t   z0 = svld1ro_u32 (p0, x0),\n+\t   z0 = svld1ro (p0, x0))\n+\n+/*\n+** ld1ro_u32_index:\n+**\tld1row\tz0\\.s, p0/z, \\[x0, x1, lsl 2\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u32_index, svuint32_t, uint32_t,\n+\t   z0 = svld1ro_u32 (p0, x0 + x1),\n+\t   z0 = svld1ro (p0, x0 + x1))\n+\n+/*\n+** ld1ro_u32_1:\n+**\tadd\t(x[0-9]+), x0, #?4\n+**\tld1row\tz0\\.s, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u32_1, svuint32_t, uint32_t,\n+\t   z0 = svld1ro_u32 (p0, x0 + 1),\n+\t   z0 = svld1ro (p0, x0 + 1))\n+\n+/*\n+** ld1ro_u32_4:\n+**\tadd\t(x[0-9]+), x0, #?16\n+**\tld1row\tz0\\.s, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u32_4, svuint32_t, uint32_t,\n+\t   z0 = svld1ro_u32 (p0, x0 + 4),\n+\t   z0 = svld1ro (p0, x0 + 4))\n+\n+/*\n+** ld1ro_u32_64:\n+**\tadd\t(x[0-9]+), x0, #?256\n+**\tld1row\tz0\\.s, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u32_64, svuint32_t, uint32_t,\n+\t   z0 = svld1ro_u32 (p0, x0 + 64),\n+\t   z0 = svld1ro (p0, x0 + 64))\n+\n+/*\n+** ld1ro_u32_m1:\n+**\tsub\t(x[0-9]+), x0, #?4\n+**\tld1row\tz0\\.s, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u32_m1, svuint32_t, uint32_t,\n+\t   z0 = svld1ro_u32 (p0, x0 - 1),\n+\t   z0 = svld1ro (p0, x0 - 1))\n+\n+/*\n+** ld1ro_u32_m4:\n+**\tsub\t(x[0-9]+), x0, #?16\n+**\tld1row\tz0\\.s, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u32_m4, svuint32_t, uint32_t,\n+\t   z0 = svld1ro_u32 (p0, x0 - 4),\n+\t   z0 = svld1ro (p0, x0 - 4))\n+\n+/*\n+** ld1ro_u32_m72:\n+**\tsub\t(x[0-9]+), x0, #?288\n+**\tld1row\tz0\\.s, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u32_m72, svuint32_t, uint32_t,\n+\t   z0 = svld1ro_u32 (p0, x0 - 72),\n+\t   z0 = svld1ro (p0, x0 - 72))\n+\n+/*\n+** ld1ro_u32_8:\n+**\tld1row\tz0\\.s, p0/z, \\[x0, #?32\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u32_8, svuint32_t, uint32_t,\n+\t   z0 = svld1ro_u32 (p0, x0 + 8),\n+\t   z0 = svld1ro (p0, x0 + 8))\n+\n+/*\n+** ld1ro_u32_56:\n+**\tld1row\tz0\\.s, p0/z, \\[x0, #?224\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u32_56, svuint32_t, uint32_t,\n+\t   z0 = svld1ro_u32 (p0, x0 + 56),\n+\t   z0 = svld1ro (p0, x0 + 56))\n+\n+/*\n+** ld1ro_u32_m8:\n+**\tld1row\tz0\\.s, p0/z, \\[x0, #?-32\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u32_m8, svuint32_t, uint32_t,\n+\t   z0 = svld1ro_u32 (p0, x0 - 8),\n+\t   z0 = svld1ro (p0, x0 - 8))\n+\n+/*\n+** ld1ro_u32_m64:\n+**\tld1row\tz0\\.s, p0/z, \\[x0, #?-256\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u32_m64, svuint32_t, uint32_t,\n+\t   z0 = svld1ro_u32 (p0, x0 - 64),\n+\t   z0 = svld1ro (p0, x0 - 64))\n+"}, {"sha": "2194d52d5e3592e22d311be27573e254f16f2897", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld1ro_u64.c", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_u64.c?ref=9ceec73fc0e5033049704becef5d79001e31a245", "patch": "@@ -0,0 +1,119 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+/* { dg-additional-options \"-march=armv8.6-a+sve+f64mm\" } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** ld1ro_u64_base:\n+**\tld1rod\tz0\\.d, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u64_base, svuint64_t, uint64_t,\n+\t   z0 = svld1ro_u64 (p0, x0),\n+\t   z0 = svld1ro (p0, x0))\n+\n+/*\n+** ld1ro_u64_index:\n+**\tld1rod\tz0\\.d, p0/z, \\[x0, x1, lsl 3\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u64_index, svuint64_t, uint64_t,\n+\t   z0 = svld1ro_u64 (p0, x0 + x1),\n+\t   z0 = svld1ro (p0, x0 + x1))\n+\n+/*\n+** ld1ro_u64_1:\n+**\tadd\t(x[0-9]+), x0, #?8\n+**\tld1rod\tz0\\.d, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u64_1, svuint64_t, uint64_t,\n+\t   z0 = svld1ro_u64 (p0, x0 + 1),\n+\t   z0 = svld1ro (p0, x0 + 1))\n+\n+/*\n+** ld1ro_u64_2:\n+**\tadd\t(x[0-9]+), x0, #?16\n+**\tld1rod\tz0\\.d, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u64_2, svuint64_t, uint64_t,\n+\t   z0 = svld1ro_u64 (p0, x0 + 2),\n+\t   z0 = svld1ro (p0, x0 + 2))\n+\n+/*\n+** ld1ro_u64_32:\n+**\tadd\t(x[0-9]+), x0, #?256\n+**\tld1rod\tz0\\.d, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u64_32, svuint64_t, uint64_t,\n+\t   z0 = svld1ro_u64 (p0, x0 + 32),\n+\t   z0 = svld1ro (p0, x0 + 32))\n+\n+/*\n+** ld1ro_u64_m1:\n+**\tsub\t(x[0-9]+), x0, #?8\n+**\tld1rod\tz0\\.d, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u64_m1, svuint64_t, uint64_t,\n+\t   z0 = svld1ro_u64 (p0, x0 - 1),\n+\t   z0 = svld1ro (p0, x0 - 1))\n+\n+/*\n+** ld1ro_u64_m2:\n+**\tsub\t(x[0-9]+), x0, #?16\n+**\tld1rod\tz0\\.d, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u64_m2, svuint64_t, uint64_t,\n+\t   z0 = svld1ro_u64 (p0, x0 - 2),\n+\t   z0 = svld1ro (p0, x0 - 2))\n+\n+/*\n+** ld1ro_u64_m36:\n+**\tsub\t(x[0-9]+), x0, #?288\n+**\tld1rod\tz0\\.d, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u64_m36, svuint64_t, uint64_t,\n+\t   z0 = svld1ro_u64 (p0, x0 - 36),\n+\t   z0 = svld1ro (p0, x0 - 36))\n+\n+/*\n+** ld1ro_u64_4:\n+**\tld1rod\tz0\\.d, p0/z, \\[x0, #?32\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u64_4, svuint64_t, uint64_t,\n+\t   z0 = svld1ro_u64 (p0, x0 + 4),\n+\t   z0 = svld1ro (p0, x0 + 4))\n+\n+/*\n+** ld1ro_u64_28:\n+**\tld1rod\tz0\\.d, p0/z, \\[x0, #?224\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u64_28, svuint64_t, uint64_t,\n+\t   z0 = svld1ro_u64 (p0, x0 + 28),\n+\t   z0 = svld1ro (p0, x0 + 28))\n+\n+/*\n+** ld1ro_u64_m4:\n+**\tld1rod\tz0\\.d, p0/z, \\[x0, #?-32\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u64_m4, svuint64_t, uint64_t,\n+\t   z0 = svld1ro_u64 (p0, x0 - 4),\n+\t   z0 = svld1ro (p0, x0 - 4))\n+\n+/*\n+** ld1ro_u64_m32:\n+**\tld1rod\tz0\\.d, p0/z, \\[x0, #?-256\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u64_m32, svuint64_t, uint64_t,\n+\t   z0 = svld1ro_u64 (p0, x0 - 32),\n+\t   z0 = svld1ro (p0, x0 - 32))\n+"}, {"sha": "b98c0c7444f6c50d6c4e185a431a49040a267154", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld1ro_u8.c", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ceec73fc0e5033049704becef5d79001e31a245/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_u8.c?ref=9ceec73fc0e5033049704becef5d79001e31a245", "patch": "@@ -0,0 +1,119 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+/* { dg-additional-options \"-march=armv8.6-a+sve+f64mm\" } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** ld1ro_u8_base:\n+**\tld1rob\tz0\\.b, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u8_base, svuint8_t, uint8_t,\n+\t   z0 = svld1ro_u8 (p0, x0),\n+\t   z0 = svld1ro (p0, x0))\n+\n+/*\n+** ld1ro_u8_index:\n+**\tld1rob\tz0\\.b, p0/z, \\[x0, x1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u8_index, svuint8_t, uint8_t,\n+\t   z0 = svld1ro_u8 (p0, x0 + x1),\n+\t   z0 = svld1ro (p0, x0 + x1))\n+\n+/*\n+** ld1ro_u8_1:\n+**\tadd\t(x[0-9]+), x0, #?1\n+**\tld1rob\tz0\\.b, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u8_1, svuint8_t, uint8_t,\n+\t   z0 = svld1ro_u8 (p0, x0 + 1),\n+\t   z0 = svld1ro (p0, x0 + 1))\n+\n+/*\n+** ld1ro_u8_16:\n+**\tadd\t(x[0-9]+), x0, #?16\n+**\tld1rob\tz0\\.b, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u8_16, svuint8_t, uint8_t,\n+\t   z0 = svld1ro_u8 (p0, x0 + 16),\n+\t   z0 = svld1ro (p0, x0 + 16))\n+\n+/*\n+** ld1ro_u8_256:\n+**\tadd\t(x[0-9]+), x0, #?256\n+**\tld1rob\tz0\\.b, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u8_256, svuint8_t, uint8_t,\n+\t   z0 = svld1ro_u8 (p0, x0 + 256),\n+\t   z0 = svld1ro (p0, x0 + 256))\n+\n+/*\n+** ld1ro_u8_m1:\n+**\tsub\t(x[0-9]+), x0, #?1\n+**\tld1rob\tz0\\.b, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u8_m1, svuint8_t, uint8_t,\n+\t   z0 = svld1ro_u8 (p0, x0 - 1),\n+\t   z0 = svld1ro (p0, x0 - 1))\n+\n+/*\n+** ld1ro_u8_m16:\n+**\tsub\t(x[0-9]+), x0, #?16\n+**\tld1rob\tz0\\.b, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u8_m16, svuint8_t, uint8_t,\n+\t   z0 = svld1ro_u8 (p0, x0 - 16),\n+\t   z0 = svld1ro (p0, x0 - 16))\n+\n+/*\n+** ld1ro_u8_m288:\n+**\tsub\t(x[0-9]+), x0, #?288\n+**\tld1rob\tz0\\.b, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u8_m288, svuint8_t, uint8_t,\n+\t   z0 = svld1ro_u8 (p0, x0 - 288),\n+\t   z0 = svld1ro (p0, x0 - 288))\n+\n+/*\n+** ld1ro_u8_32:\n+**\tld1rob\tz0\\.b, p0/z, \\[x0, #?32\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u8_32, svuint8_t, uint8_t,\n+\t   z0 = svld1ro_u8 (p0, x0 + 32),\n+\t   z0 = svld1ro (p0, x0 + 32))\n+\n+/*\n+** ld1ro_u8_224:\n+**\tld1rob\tz0\\.b, p0/z, \\[x0, #?224\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u8_224, svuint8_t, uint8_t,\n+\t   z0 = svld1ro_u8 (p0, x0 + 224),\n+\t   z0 = svld1ro (p0, x0 + 224))\n+\n+/*\n+** ld1ro_u8_m32:\n+**\tld1rob\tz0\\.b, p0/z, \\[x0, #?-32\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u8_m32, svuint8_t, uint8_t,\n+\t   z0 = svld1ro_u8 (p0, x0 - 32),\n+\t   z0 = svld1ro (p0, x0 - 32))\n+\n+/*\n+** ld1ro_u8_m256:\n+**\tld1rob\tz0\\.b, p0/z, \\[x0, #?-256\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_u8_m256, svuint8_t, uint8_t,\n+\t   z0 = svld1ro_u8 (p0, x0 - 256),\n+\t   z0 = svld1ro (p0, x0 - 256))\n+"}]}