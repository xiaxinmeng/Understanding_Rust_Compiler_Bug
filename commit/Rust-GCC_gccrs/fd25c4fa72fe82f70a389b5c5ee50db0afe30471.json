{"sha": "fd25c4fa72fe82f70a389b5c5ee50db0afe30471", "node_id": "C_kwDOANBUbNoAKGZkMjVjNGZhNzJmZTgyZjcwYTM4OWI1YzVlZTUwZGIwYWZlMzA0NzE", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-12-10T07:58:58Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-01-04T15:37:55Z"}, "message": "format: Fix git whitespace errors", "tree": {"sha": "d1c62a45e22f69abd90af6c03cfc5259bf99c340", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1c62a45e22f69abd90af6c03cfc5259bf99c340"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd25c4fa72fe82f70a389b5c5ee50db0afe30471", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd25c4fa72fe82f70a389b5c5ee50db0afe30471", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd25c4fa72fe82f70a389b5c5ee50db0afe30471", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd25c4fa72fe82f70a389b5c5ee50db0afe30471/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84a85305de56260ef9cea8116c05fa06d5e6f841", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84a85305de56260ef9cea8116c05fa06d5e6f841", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84a85305de56260ef9cea8116c05fa06d5e6f841"}], "stats": {"total": 75, "additions": 41, "deletions": 34}, "files": [{"sha": "75812a657a30cc54cfe03b92abeb24e044002926", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd25c4fa72fe82f70a389b5c5ee50db0afe30471/CONTRIBUTING.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd25c4fa72fe82f70a389b5c5ee50db0afe30471/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/CONTRIBUTING.md?ref=fd25c4fa72fe82f70a389b5c5ee50db0afe30471", "patch": "@@ -4,8 +4,8 @@\n \n * **Ensure the bug was not already reported** by searching on GitHub under [Issues](https://github.com/Rust-GCC/gccrs/issues).\n \n-* If you're unable to find an open issue addressing the problem, [open a new one](https://github.com/Rust-GCC/gccrs/issues/new). \n-  Be sure to include a **title and clear description**, as much relevant information as possible, and a **code sample** \n+* If you're unable to find an open issue addressing the problem, [open a new one](https://github.com/Rust-GCC/gccrs/issues/new).\n+  Be sure to include a **title and clear description**, as much relevant information as possible, and a **code sample**\n   or an **executable test case** demonstrating the expected behavior that is not occurring.\n \n #### **Do you want to submit a patch?**\n@@ -18,14 +18,14 @@\n    Please see the [Contributing to GCC](https://gcc.gnu.org/contribute.html) guide or [Developer's Certificate of Origin (DCO) Sign-off](https://gcc.gnu.org/dco.html) guide.\n \n * Patches sent to the [`gcc-rust` mailing list](https://gcc.gnu.org/mailman/listinfo/gcc-rust) are likewise welcome.\n-These will be imported into a GitHub PR to follow the normal review process, \n+These will be imported into a GitHub PR to follow the normal review process,\n and the link to the GitHub PR sent to the submitter.\n \n #### **Do you intend to add a new feature or change an existing one?**\n \n * Suggest your change in the [Zulip](https://gcc-rust.zulipchat.com/) and start writing code.\n \n-* Do not open an issue on GitHub until you have collected positive feedback about the change. \n+* Do not open an issue on GitHub until you have collected positive feedback about the change.\n   GitHub issues are primarily intended for bug reports and fixes.\n \n #### **Do you have questions about the source code?**\n@@ -43,20 +43,20 @@ and the link to the GitHub PR sent to the submitter.\n \n * Avoid PR's with merge commit unless there's a good reason\n \n-* Where possible please add test cases to `gcc/testsuite/rust/` for all PRs. \n+* Where possible please add test cases to `gcc/testsuite/rust/` for all PRs.\n   Some issues may not be testable via dejagnu/automation such as debug dump changes.\n \n * Follow the [GCC coding style](https://gcc.gnu.org/codingconventions.html) (see `clang-format` below).\n \n * PRs won't be merged until the build and tests pass.\n \n-* Please take the time to create good git commit messages. \n+* Please take the time to create good git commit messages.\n   See the existing format of them in the git log or refer to something like: https://chris.beams.io/posts/git-commit/\n \n #### Running `clang-format` locally\n \n * on all files using python scripts\n-... corresponding to what the _Clang Format Lint_ (`.github/workflows/clang-format.yml`) \n+... corresponding to what the _Clang Format Lint_ (`.github/workflows/clang-format.yml`)\n is doing, with `clang-format-10` being available locally, and avoiding the Docker overhead.\n \n ```shell\n@@ -95,12 +95,12 @@ index bd3043295ce..9559374ce60 100644\n    STDCALL,\n    FASTCALL,\n  };\n- \n+\n gccrs/gcc/rust on \ue0a0 dkm/clang_format [$!+?]\n \u276f git clang-format\n changed files:\n     gcc/rust/rust-abi.h\n- \n+\n gccrs/gcc/rust on \ue0a0 dkm/clang_format [$!+?]\n $ git diff rust-abi.h\n diff --git a/gcc/rust/rust-abi.h b/gcc/rust/rust-abi.h\n@@ -122,7 +122,7 @@ index 9559374ce60..bd3043295ce 100644\n  };\n ```\n \n-Also note that you can use a given version of `clang-format` by using `git clang-format-10` if you have \n+Also note that you can use a given version of `clang-format` by using `git clang-format-10` if you have\n installed that particular version.\n \n Thanks! :heart: :heart: :heart:"}, {"sha": "d55456ece6efc7c15d6b92794dfd2929ab3dc89d", "filename": "README.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd25c4fa72fe82f70a389b5c5ee50db0afe30471/README.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd25c4fa72fe82f70a389b5c5ee50db0afe30471/README.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/README.md?ref=fd25c4fa72fe82f70a389b5c5ee50db0afe30471", "patch": "@@ -70,7 +70,7 @@ The path of header dir and sysroot should be specified when you configure the pr\n ```bash\n $ mkdir mac-build\n $ cd mac-build\n-$ ../gccrs/configure --prefix=$HOME/gccrs-install --disable-bootstrap --enable-multilib --enable-languages=rust --with-native-system-header-dir=/usr/include --with-sysroot=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk \n+$ ../gccrs/configure --prefix=$HOME/gccrs-install --disable-bootstrap --enable-multilib --enable-languages=rust --with-native-system-header-dir=/usr/include --with-sysroot=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk\n $ make\n \n ```\n@@ -96,7 +96,7 @@ $ $HOME/gccrs-install/gccrs -g -O2 -c test.rs -o test.o\n $ $HOME/gccrs-install/gccrs -o test test.o\n ```\n \n-You can also setup your shell to automatically find the installed compiler. For example for `bash`, \n+You can also setup your shell to automatically find the installed compiler. For example for `bash`,\n add the following in your `$HOME/.bashrc`:\n \n ```bash\n@@ -140,7 +140,7 @@ test cases referencing any issues on Github.\n \n ### Enabling internal checks\n \n-GCC has several internal checks that can be enabled during configuration. In the case of `gccrs`, \n+GCC has several internal checks that can be enabled during configuration. In the case of `gccrs`,\n you can enable the following:\n ```bash\n $ ../gccrs/configure --prefix=$HOME/gccrs-install --disable-bootstrap --enable-multilib --enable-languages=rust --enable-checking=gimple,tree,types\n@@ -159,15 +159,15 @@ $ gdb --args  /some/path/../../rust1 test.rs -quiet -dumpbase arithmetic_express\n  -mtune=generic -march=x86-64 -O0 -w -version -fdiagnostics-color=never -fno-diagnostics-show-caret -fno-diagnostics-show-line-numbers -fdiagnostics-urls=never -fdiagnostics-path-format=separate-events -o test.s -L/lib/x86_64-linux-gnu -L/lib/../lib64 -L/usr/lib/x86_64-linux-gnu\n ```\n \n-Or simply add the `-wrapper gdb,--args` option. \n+Or simply add the `-wrapper gdb,--args` option.\n This will call each subcommand in `gdb` and you simply have to break/debug in `rust1`:\n ```bash\n $ gccrs test.rs -O0 -S -o arithmetic_expressions1.s -wrapper gdb,--args\n ```\n \n ## Docker image\n \n-There is a docker image hosted over on: \n+There is a docker image hosted over on:\n \n https://hub.docker.com/repository/docker/philberty/gccrs\n \n@@ -180,7 +180,7 @@ Or you can build your own image:\n ```bash\n $ docker build . -t gccrs-dev\n ```\n-If you want to build an object file: \n+If you want to build an object file:\n \n ```bash\n $ docker run --rm -v \"$PWD\":/usr/src/myapp -w /usr/src/myapp \\\n@@ -199,7 +199,7 @@ To emit assembly :\n ```bash\n $ docker run --rm -v \"$PWD\":/usr/src/myapp -w /usr/src/myapp \\\n     gccrs-dev:latest gccrs -g -O2 \\\n-    gcc/testsuite/rust/compile/torture/type_infer1.rs -S -o type_infer1.s \n+    gcc/testsuite/rust/compile/torture/type_infer1.rs -S -o type_infer1.s\n ```\n \n To emit Rust front end debug output, you may add options like `-frust-debug`, `-frust-dump-all`.\n@@ -209,11 +209,11 @@ To emit Rust front end debug output, you may add options like `-frust-debug`, `-\n \n If you want to contribute to GCC Rust, you can find more information in [CONTRIBUTING.md](https://github.com/Rust-GCC/gccrs/blob/master/CONTRIBUTING.md).\n \n-Please be aware this project is designed to be pushed upstream to GCC when we reach some milestones, \n-and this means we require copyright assignment or the Developer's Certificate of Origin sign-off. \n+Please be aware this project is designed to be pushed upstream to GCC when we reach some milestones,\n+and this means we require copyright assignment or the Developer's Certificate of Origin sign-off.\n Please see the [Contributing to GCC](https://gcc.gnu.org/contribute.html) guide or [Developer's Certificate of Origin (DCO) Sign-off](https://gcc.gnu.org/dco.html) guide.\n \n-Not all contributions must be code; we would love to see new test cases or bugs and issues to be reported. \n+Not all contributions must be code; we would love to see new test cases or bugs and issues to be reported.\n Feel free to add any comments on open PRs\n \n "}, {"sha": "65fb59c9b2fac58a60fc7ad60abd7ba4bc7381cd", "filename": "gcc/rust/lang.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd25c4fa72fe82f70a389b5c5ee50db0afe30471/gcc%2Frust%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd25c4fa72fe82f70a389b5c5ee50db0afe30471/gcc%2Frust%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flang.opt?ref=fd25c4fa72fe82f70a389b5c5ee50db0afe30471", "patch": "@@ -7,12 +7,12 @@\n ; the terms of the GNU General Public License as published by the Free\n ; Software Foundation; either version 3, or (at your option) any later\n ; version.\n-; \n+;\n ; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n ; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n ; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n ; for more details.\n-; \n+;\n ; You should have received a copy of the GNU General Public License\n ; along with GCC; see the file COPYING3.  If not see\n ; <http://www.gnu.org/licenses/>."}, {"sha": "ae4bcfb726ebf144f1b8d581128d2cb00dbb0ec0", "filename": "gcc/rust/lex/rust-token.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd25c4fa72fe82f70a389b5c5ee50db0afe30471/gcc%2Frust%2Flex%2Frust-token.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd25c4fa72fe82f70a389b5c5ee50db0afe30471/gcc%2Frust%2Flex%2Frust-token.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flex%2Frust-token.h?ref=fd25c4fa72fe82f70a389b5c5ee50db0afe30471", "patch": "@@ -147,7 +147,6 @@ enum PrimitiveCoreType\n   RS_TOKEN (INNER_DOC_COMMENT, \"#![doc]\")                                      \\\n   RS_TOKEN (OUTER_DOC_COMMENT, \"#[doc]\")                                       \\\n   /* have \"weak\" union and 'static keywords? */                                \\\n-                                                                               \\\n   RS_TOKEN_KEYWORD (ABSTRACT, \"abstract\") /* unused */                         \\\n   RS_TOKEN_KEYWORD (AS, \"as\")                                                  \\\n   RS_TOKEN_KEYWORD (ASYNC, \"async\")   /* unused */                             \\\n@@ -200,7 +199,6 @@ enum PrimitiveCoreType\n   RS_TOKEN_KEYWORD (WHERE, \"where\")                                            \\\n   RS_TOKEN_KEYWORD (WHILE, \"while\")                                            \\\n   RS_TOKEN_KEYWORD (YIELD, \"yield\") /* unused */                               \\\n-                                                                               \\\n   RS_TOKEN (LAST_TOKEN, \"<last-token-marker>\")\n \n // Contains all token types. Crappy implementation via x-macros."}, {"sha": "12aac5479818a5176197d7aae3a4f6e65e54ea91", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd25c4fa72fe82f70a389b5c5ee50db0afe30471/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd25c4fa72fe82f70a389b5c5ee50db0afe30471/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=fd25c4fa72fe82f70a389b5c5ee50db0afe30471", "patch": "@@ -102,16 +102,25 @@ enum binding_powers\n   LBP_CLOSURE = LBP_RETURN, // unary prefix operators\n \n #if 0\n-        // rust precedences\n-        PREC_CLOSURE = -40,     // used for closures\n-        PREC_JUMP = -30,        // used for break, continue, return, and yield\n-        PREC_RANGE = -10,       // used for range (although weird comment in rustc about this)\n-        PREC_BINOP = FROM_ASSOC_OP,\n-        // used for binary operators mentioned below - also cast, colon (type), assign, assign_op\n-        PREC_PREFIX = 50,       // used for box, address_of, let, unary (again, weird comment on let)\n-        PREC_POSTFIX = 60,      // used for await, call, method call, field, index, try, inline asm, macro invocation\n-        PREC_PAREN = 99,        // used for array, repeat, tuple, literal, path, paren, if, while, for, 'loop', match, block, try block, async, struct\n-        PREC_FORCE_PAREN = 100,\n+  // rust precedences\n+  // used for closures\n+  PREC_CLOSURE = -40,\n+  // used for break, continue, return, and yield\n+  PREC_JUMP = -30,\n+  // used for range (although weird comment in rustc about this)\n+  PREC_RANGE = -10,\n+  // used for binary operators mentioned below - also cast, colon (type),\n+  // assign, assign_op\n+  PREC_BINOP = FROM_ASSOC_OP,\n+  // used for box, address_of, let, unary (again, weird comment on let)\n+  PREC_PREFIX = 50,\n+  // used for await, call, method call, field, index, try,\n+  // inline asm, macro invocation\n+  PREC_POSTFIX = 60,\n+  // used for array, repeat, tuple, literal, path, paren, if,\n+  // while, for, 'loop', match, block, try block, async, struct\n+  PREC_PAREN = 99,\n+  PREC_FORCE_PAREN = 100,\n #endif\n \n   // lowest priority"}]}