{"sha": "afad3d2c2608d4905fdb7446810ee826fb142501", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZhZDNkMmMyNjA4ZDQ5MDVmZGI3NDQ2ODEwZWU4MjZmYjE0MjUwMQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-09-30T21:45:47Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-09-30T21:45:47Z"}, "message": "(gen_shl_and, gen_shl_sext): use gen_lowpart to generate rtx in the appropriate mode for zero/sign-extension.\n\n(gen_shl_and, gen_shl_sext): use gen_lowpart to\ngenerate rtx in the appropriate mode for zero/sign-extension.\nDon't generate a zero bit shift.\n(gen_shl_sext) directly use gen_ashift instead of gen_ashrsi3 .\n\nFrom-SVN: r12884", "tree": {"sha": "b3d601d27b20c960528fcddf0d605b57b305686c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3d601d27b20c960528fcddf0d605b57b305686c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afad3d2c2608d4905fdb7446810ee826fb142501", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afad3d2c2608d4905fdb7446810ee826fb142501", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afad3d2c2608d4905fdb7446810ee826fb142501", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afad3d2c2608d4905fdb7446810ee826fb142501/comments", "author": null, "committer": null, "parents": [{"sha": "5156628f9ffcf3c94047a56fcde88849bce6cb4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5156628f9ffcf3c94047a56fcde88849bce6cb4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5156628f9ffcf3c94047a56fcde88849bce6cb4f"}], "stats": {"total": 68, "additions": 40, "deletions": 28}, "files": [{"sha": "c7e34d87ee6e95af81c5ca32408eb59ed6d51698", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 40, "deletions": 28, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afad3d2c2608d4905fdb7446810ee826fb142501/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afad3d2c2608d4905fdb7446810ee826fb142501/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=afad3d2c2608d4905fdb7446810ee826fb142501", "patch": "@@ -1232,10 +1232,10 @@ gen_shl_and (dest, left_rtx, mask_rtx, source)\n \tif (first < 0)\n \t  {\n \t    emit_insn ((mask << right) == 0xff\n-\t\t       ? gen_zero_extendqisi2(dest, gen_rtx (SUBREG, QImode,\n-\t\t\t\t\t\t\t     source, 0))\n-\t\t       : gen_zero_extendhisi2(dest, gen_rtx (SUBREG, HImode,\n-\t\t\t\t\t\t\t     source, 0)));\n+\t\t       ? gen_zero_extendqisi2(dest,\n+\t\t\t\t\t      gen_lowpart (QImode, source))\n+\t\t       : gen_zero_extendhisi2(dest,\n+\t\t\t\t\t      gen_lowpart (HImode, source)));\n \t    source = dest;\n \t  }\n \tif (source != dest)\n@@ -1255,10 +1255,8 @@ gen_shl_and (dest, left_rtx, mask_rtx, source)\n \t  }\n \tif (first >= 0)\n \t  emit_insn (mask == 0xff\n-\t\t     ? gen_zero_extendqisi2(dest, gen_rtx (SUBREG, QImode,\n-\t\t\t\t\t\t\t   dest, 0))\n-\t\t     : gen_zero_extendhisi2(dest, gen_rtx (SUBREG, HImode,\n-\t\t\t\t\t\t\t   dest, 0)));\n+\t\t     ? gen_zero_extendqisi2(dest, gen_lowpart (QImode, dest))\n+\t\t     : gen_zero_extendhisi2(dest, gen_lowpart (HImode, dest)));\n \tif (total_shift > 0)\n \t  {\n \t    operands[2] = GEN_INT (total_shift);\n@@ -1283,10 +1281,13 @@ gen_shl_and (dest, left_rtx, mask_rtx, source)\n \t      source = dest;\n \t    }\n \t  emit_insn (gen_andsi3 (dest, source, GEN_INT (mask)));\n-\t  operands[0] = dest;\n-\t  operands[1] = dest;\n-\t  operands[2] = GEN_INT (total_shift);\n-\t  shift_gen_fun (ASHIFT, operands);\n+\t  if (total_shift)\n+\t    {\n+\t      operands[0] = dest;\n+\t      operands[1] = dest;\n+\t      operands[2] = GEN_INT (total_shift);\n+\t      shift_gen_fun (ASHIFT, operands);\n+\t    }\n \t  break;\n \t}\n       else\n@@ -1351,6 +1352,8 @@ shl_sext_kind (left_rtx, size_rtx, costp)\n     {\n       /* 16 bit shift / sign extend / 16 bit shift */\n       cost = shift_insns[16 - insize] + 1 + ashiftrt_insns[16 - size];\n+      /* If ashiftrt_insns[16 - size] is 8, this choice will be overridden\n+\t below, by alternative 3 or something even better.  */\n       if (cost < best_cost)\n \t{\n \t  kind = 5;\n@@ -1470,41 +1473,50 @@ gen_shl_sext (dest, left_rtx, size_rtx, source)\n \tif (dest != source)\n \t  emit_insn (gen_movsi (dest, source));\n \toperands[0] = dest;\n-\toperands[2] = GEN_INT (ext - insize);\n-\tgen_shifty_hi_op (ASHIFT, operands);\n+\tif (ext - insize)\n+\t  {\n+\t    operands[2] = GEN_INT (ext - insize);\n+\t    gen_shifty_hi_op (ASHIFT, operands);\n+\t  }\n \temit_insn (kind & 1\n-\t\t   ? gen_extendqisi2(dest, gen_rtx (SUBREG, QImode, dest, 0))\n-\t\t   : gen_extendhisi2(dest, gen_rtx (SUBREG, HImode, dest, 0)));\n+\t\t   ? gen_extendqisi2(dest, gen_lowpart (QImode, dest))\n+\t\t   : gen_extendhisi2(dest, gen_lowpart (HImode, dest)));\n \tif (kind <= 2)\n \t  {\n-\t    operands[2] = GEN_INT (shift2);\n-\t    gen_shifty_op (ASHIFT, operands);\n+\t    if (shift2)\n+\t      {\n+\t\toperands[2] = GEN_INT (shift2);\n+\t\tgen_shifty_op (ASHIFT, operands);\n+\t      }\n \t  }\n \telse\n \t  {\n-\t    if (shift2 >= 0)\n+\t    if (shift2 > 0)\n \t      {\n \t\toperands[2] = GEN_INT (shift2);\n \t\tgen_shifty_hi_op (ASHIFT, operands);\n \t      }\n-\t    else\n+\t    else if (shift2)\n \t      {\n \t\toperands[2] = GEN_INT (-shift2);\n \t\tgen_shifty_hi_op (LSHIFTRT, operands);\n \t      }\n \t    emit_insn (size <= 8\n-\t\t       ? gen_extendqisi2 (dest,\n-\t\t\t\t\t  gen_rtx (SUBREG, QImode, dest, 0))\n-\t\t       : gen_extendhisi2 (dest,\n-\t\t\t\t\t  gen_rtx (SUBREG, HImode, dest, 0)));\n+\t\t       ? gen_extendqisi2 (dest, gen_lowpart (QImode, dest))\n+\t\t       : gen_extendhisi2 (dest, gen_lowpart (HImode, dest)));\n \t  }\n \tbreak;\n       }\n     case 5:\n-      emit_insn (gen_shl_sext_ext (dest, source, GEN_INT (16 - insize),\n-\t\t\t\t   GEN_INT (16)));\n-      emit_insn (gen_ashrsi3 (dest, dest, GEN_INT (16 - size)));\n-      break;\n+      {\n+\tint i = 16 - size;\n+\temit_insn (gen_shl_sext_ext (dest, source, GEN_INT (16 - insize),\n+\t\t\t\t     GEN_INT (16)));\n+\t/* Don't use gen_ashrsi3 because it generates new pseudos.  */\n+\twhile (--i >= 0)\n+\t  gen_ashift (ASHIFTRT, 1, dest);\n+\tbreak;\n+      }\n     case 6:\n     case 7:\n       /* Don't expand fine-grained when combining, because that will"}]}