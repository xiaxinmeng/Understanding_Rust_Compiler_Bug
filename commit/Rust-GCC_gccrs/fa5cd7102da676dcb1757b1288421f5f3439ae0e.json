{"sha": "fa5cd7102da676dcb1757b1288421f5f3439ae0e", "node_id": "C_kwDOANBUbNoAKGZhNWNkNzEwMmRhNjc2ZGNiMTc1N2IxMjg4NDIxZjVmMzQzOWFlMGU", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2022-04-24T13:05:41Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2022-04-24T13:05:41Z"}, "message": "fortran: Detect duplicate unlimited polymorphic types [PR103662]\n\nThis fixes a type-based alias analysis issue with unlimited polymorphic\nclass descriptors (types behind class(*)) causing data initialisation to\nbe removed by optimization.\n\nThe fortran front-end may create multiple declarations for types, for\nexample if a type is redeclared in each program unit it is used in.\nTo avoid optimization seeing them as non-aliasing, a list of derived\ntypes is created at resolution time, and used at translation to set\nthe same TYPE_CANONICAL type for each duplicate type declaration.\n\nThis mechanism didn\u2019t work for unlimited polymorphic descriptors types,\nas there is a short-circuit return skipping all the resolution handling\nfor them, including the type registration.\n\nThis change adds type registration at the short-circuit return, and\nupdates type comparison to handle specifically unlimited polymorphic\nfake symbols, class descriptor types and virtual table types.\n\nThe test, which exhibited mismatching dynamic types had to be fixed as\nwell.\n\n\tPR fortran/103662\n\ngcc/fortran/ChangeLog:\n\n\t* interface.cc (gfc_compare_derived_types): Support comparing\n\tunlimited polymorphic fake symbols.  Recursively compare class\n\tdescriptor types and virtual table types.\n\t* resolve.cc (resolve_fl_derived): Add type to the types list\n\ton unlimited polymorphic short-circuit return.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/unlimited_polymorphic_3.f03 (foo): Separate\n\tbind(c) and sequence checks to...\n\t(foo_bc, foo_sq): ... two different procedures.\n\t(main, foo*): Change type declarations so that type name,\n\tcomponent name, and either bind(c) or sequence attribute match\n\tbetween the main type declarations and the procedure type\n\tdeclarations.\n\t(toplevel): Add optimization dump checks.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>", "tree": {"sha": "ad25ead238ade82a8702219169912630b4b39bb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad25ead238ade82a8702219169912630b4b39bb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa5cd7102da676dcb1757b1288421f5f3439ae0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa5cd7102da676dcb1757b1288421f5f3439ae0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa5cd7102da676dcb1757b1288421f5f3439ae0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa5cd7102da676dcb1757b1288421f5f3439ae0e/comments", "author": null, "committer": null, "parents": [{"sha": "afe0b5b7ce597641f02d47f0384610fb078a2cb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afe0b5b7ce597641f02d47f0384610fb078a2cb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afe0b5b7ce597641f02d47f0384610fb078a2cb7"}], "stats": {"total": 80, "additions": 58, "deletions": 22}, "files": [{"sha": "7ed6e13711f92bab8bc25103cb1c71816d458c30", "filename": "gcc/fortran/interface.cc", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa5cd7102da676dcb1757b1288421f5f3439ae0e/gcc%2Ffortran%2Finterface.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa5cd7102da676dcb1757b1288421f5f3439ae0e/gcc%2Ffortran%2Finterface.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.cc?ref=fa5cd7102da676dcb1757b1288421f5f3439ae0e", "patch": "@@ -618,6 +618,14 @@ gfc_compare_derived_types (gfc_symbol *derived1, gfc_symbol *derived2)\n   if (!derived1 || !derived2)\n     gfc_internal_error (\"gfc_compare_derived_types: invalid derived type\");\n \n+  if (derived1->attr.unlimited_polymorphic\n+      && derived2->attr.unlimited_polymorphic)\n+    return true;\n+\n+  if (derived1->attr.unlimited_polymorphic\n+      != derived2->attr.unlimited_polymorphic)\n+    return false;\n+\n   /* Compare UNION types specially.  */\n   if (derived1->attr.flavor == FL_UNION || derived2->attr.flavor == FL_UNION)\n     return compare_union_types (derived1, derived2);\n@@ -630,10 +638,11 @@ gfc_compare_derived_types (gfc_symbol *derived1, gfc_symbol *derived2)\n       && strcmp (derived1->module, derived2->module) == 0)\n     return true;\n \n-  /* Compare type via the rules of the standard.  Both types must have\n-     the SEQUENCE or BIND(C) attribute to be equal. STRUCTUREs are special\n-     because they can be anonymous; therefore two structures with different\n-     names may be equal.  */\n+  /* Compare type via the rules of the standard.  Both types must have the\n+     SEQUENCE or BIND(C) attribute to be equal.  We also compare types\n+     recursively if they are class descriptors types or virtual tables types.\n+     STRUCTUREs are special because they can be anonymous; therefore two\n+     structures with different names may be equal.  */\n \n   /* Compare names, but not for anonymous types such as UNION or MAP.  */\n   if (!is_anonymous_dt (derived1) && !is_anonymous_dt (derived2)\n@@ -646,6 +655,8 @@ gfc_compare_derived_types (gfc_symbol *derived1, gfc_symbol *derived2)\n \n   if (!(derived1->attr.sequence && derived2->attr.sequence)\n       && !(derived1->attr.is_bind_c && derived2->attr.is_bind_c)\n+      && !(derived1->attr.is_class && derived2->attr.is_class)\n+      && !(derived1->attr.vtype && derived2->attr.vtype)\n       && !(derived1->attr.pdt_type && derived2->attr.pdt_type))\n     return false;\n "}, {"sha": "29df531cdb61902f9a8e9b2acbb1dd51de2531ca", "filename": "gcc/fortran/resolve.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa5cd7102da676dcb1757b1288421f5f3439ae0e/gcc%2Ffortran%2Fresolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa5cd7102da676dcb1757b1288421f5f3439ae0e/gcc%2Ffortran%2Fresolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.cc?ref=fa5cd7102da676dcb1757b1288421f5f3439ae0e", "patch": "@@ -15151,7 +15151,10 @@ resolve_fl_derived (gfc_symbol *sym)\n \n       /* Nothing more to do for unlimited polymorphic entities.  */\n       if (data->ts.u.derived->attr.unlimited_polymorphic)\n-\treturn true;\n+\t{\n+\t  add_dt_to_dt_list (sym);\n+\t  return true;\n+\t}\n       else if (vptr->ts.u.derived == NULL)\n \t{\n \t  gfc_symbol *vtab = gfc_find_derived_vtab (data->ts.u.derived);"}, {"sha": "780d68cdd8711f2dfa841d7bdf579f895593907b", "filename": "gcc/testsuite/gfortran.dg/unlimited_polymorphic_3.f03", "status": "modified", "additions": 39, "deletions": 17, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa5cd7102da676dcb1757b1288421f5f3439ae0e/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_3.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa5cd7102da676dcb1757b1288421f5f3439ae0e/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_3.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_3.f03?ref=fa5cd7102da676dcb1757b1288421f5f3439ae0e", "patch": "@@ -1,4 +1,5 @@\n ! { dg-do run }\n+! { dg-additional-options \"-fdump-tree-dse-details\" }\n !\n ! Check that pointer assignments allowed by F2003:C717\n ! work and check null initialization of CLASS(*) pointers.\n@@ -7,20 +8,31 @@\n !\n program main\n   interface\n-    subroutine foo(z)\n+    subroutine foo_bc(z)\n       class(*), pointer, intent(in) :: z\n-    end subroutine foo\n+    end subroutine foo_bc\n+    subroutine foo_sq(z)\n+      class(*), pointer, intent(in) :: z\n+    end subroutine foo_sq\n   end interface\n+  type, bind(c) :: bc\n+    integer :: i\n+  end type bc\n   type sq\n     sequence\n-    integer :: i\n+    integer :: k\n   end type sq\n+  type(bc), target :: w\n   type(sq), target :: x\n   class(*), pointer :: y, z\n-  x%i = 42\n+  w%i = 23\n+  y => w\n+  z => y ! unlimited => unlimited allowed\n+  call foo_bc(z)\n+  x%k = 42\n   y => x\n   z => y ! unlimited => unlimited allowed\n-  call foo (z)\n+  call foo_sq(z)\n   call bar\n contains\n   subroutine bar\n@@ -33,21 +45,31 @@ end subroutine bar\n \n end program main\n \n-\n-subroutine foo(tgt)\n+subroutine foo_bc(tgt)\n   use iso_c_binding\n   class(*), pointer, intent(in) :: tgt\n-  type, bind(c) :: s\n-    integer (c_int) :: k\n-  end type s\n-  type t\n+  type, bind(c) :: bc\n+    integer (c_int) :: i\n+  end type bc\n+  type(bc), pointer :: ptr1\n+  ptr1 => tgt ! bind(c) => unlimited allowed\n+  if (ptr1%i .ne. 23) STOP 2\n+end subroutine foo_bc\n+\n+subroutine foo_sq(tgt)\n+  class(*), pointer, intent(in) :: tgt\n+  type sq\n     sequence\n     integer :: k\n-  end type t\n-  type(s), pointer :: ptr1\n-  type(t), pointer :: ptr2\n-  ptr1 => tgt ! bind(c) => unlimited allowed\n-  if (ptr1%k .ne. 42) STOP 2\n+  end type sq\n+  type(sq), pointer :: ptr2\n   ptr2 => tgt ! sequence type => unlimited allowed\n   if (ptr2%k .ne. 42) STOP 3\n-end subroutine foo\n+end subroutine foo_sq\n+\n+! PR fortran/103662\n+! We used to produce multiple independant types for the unlimited polymorphic\n+! descriptors (types for class(*)) which caused stores to them to be seen as\n+! useless.\n+! { dg-final { scan-tree-dump-not \"Deleted dead store: z._data = &w\" \"dse1\" } }\n+! { dg-final { scan-tree-dump-not \"Deleted dead store: z._data = &x\" \"dse1\" } }"}]}