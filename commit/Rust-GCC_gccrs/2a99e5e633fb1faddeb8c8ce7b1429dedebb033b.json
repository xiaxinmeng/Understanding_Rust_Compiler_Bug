{"sha": "2a99e5e633fb1faddeb8c8ce7b1429dedebb033b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE5OWU1ZTYzM2ZiMWZhZGRlYjhjOGNlN2IxNDI5ZGVkZWJiMDMzYg==", "commit": {"author": {"name": "Lubos Lunak", "email": "l.lunak@suse.cz", "date": "2013-07-13T23:16:18Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-07-13T23:16:18Z"}, "message": "re PR c++/55203 (No unused warning for variables of non-trivial types)\n\n\tPR c++/55203\nc-family/\n\t* c-common.c (c_common_attribute_table): Add warn_unused.\n\t(handle_warn_unused_attribute): New.\ncp/\n\t* init.c (build_aggr_init): Check for warn_unused attribute.\n\t* decl.c (poplevel): Likewise.\n\nFrom-SVN: r200941", "tree": {"sha": "0170fc55d95b627aec9918256ba3cf861f269fd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0170fc55d95b627aec9918256ba3cf861f269fd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a99e5e633fb1faddeb8c8ce7b1429dedebb033b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a99e5e633fb1faddeb8c8ce7b1429dedebb033b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a99e5e633fb1faddeb8c8ce7b1429dedebb033b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a99e5e633fb1faddeb8c8ce7b1429dedebb033b/comments", "author": null, "committer": null, "parents": [{"sha": "286e8fc16fb582ee1cb3869aafb87309542a55ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/286e8fc16fb582ee1cb3869aafb87309542a55ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/286e8fc16fb582ee1cb3869aafb87309542a55ec"}], "stats": {"total": 82, "additions": 80, "deletions": 2}, "files": [{"sha": "27b22a19fbdd8670976b713a748e522e7834e379", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a99e5e633fb1faddeb8c8ce7b1429dedebb033b/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a99e5e633fb1faddeb8c8ce7b1429dedebb033b/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=2a99e5e633fb1faddeb8c8ce7b1429dedebb033b", "patch": "@@ -1,3 +1,9 @@\n+2013-07-13  Lubos Lunak  <l.lunak@suse.cz>\n+\n+\tPR c++/55203\n+\t* c-common.c (c_common_attribute_table): Add warn_unused.\n+\t(handle_warn_unused_attribute): New.\n+\n 2013-07-10  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-ppoutput.c (scan_translation_unit): Call account_for_newlines"}, {"sha": "970f9f20a08e2ca9b268a972e0edd439b424965a", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a99e5e633fb1faddeb8c8ce7b1429dedebb033b/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a99e5e633fb1faddeb8c8ce7b1429dedebb033b/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=2a99e5e633fb1faddeb8c8ce7b1429dedebb033b", "patch": "@@ -368,6 +368,7 @@ static tree handle_optimize_attribute (tree *, tree, tree, int, bool *);\n static tree ignore_attribute (tree *, tree, tree, int, bool *);\n static tree handle_no_split_stack_attribute (tree *, tree, tree, int, bool *);\n static tree handle_fnspec_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_warn_unused_attribute (tree *, tree, tree, int, bool *);\n \n static void check_function_nonnull (tree, int, tree *);\n static void check_nonnull_arg (void *, tree, unsigned HOST_WIDE_INT);\n@@ -738,6 +739,8 @@ const struct attribute_spec c_common_attribute_table[] =\n      The name contains space to prevent its usage in source code.  */\n   { \"fn spec\",\t \t      1, 1, false, true, true,\n \t\t\t      handle_fnspec_attribute, false },\n+  { \"warn_unused\",            0, 0, false, false, false,\n+\t\t\t      handle_warn_unused_attribute, false },\n   { NULL,                     0, 0, false, false, false, NULL, false }\n };\n \n@@ -7950,6 +7953,27 @@ handle_fnspec_attribute (tree *node ATTRIBUTE_UNUSED, tree ARG_UNUSED (name),\n   return NULL_TREE;\n }\n \n+/* Handle a \"warn_unused\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_warn_unused_attribute (tree *node, tree name,\n+\t\t\t      tree args ATTRIBUTE_UNUSED,\n+\t\t\t      int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n+{\n+  if (TYPE_P (*node))\n+    /* Do nothing else, just set the attribute.  We'll get at\n+       it later with lookup_attribute.  */\n+    ;\n+  else\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Handle a \"returns_twice\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n "}, {"sha": "3cf5e7797913f60e80a7ad5409ecacb7362236a8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a99e5e633fb1faddeb8c8ce7b1429dedebb033b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a99e5e633fb1faddeb8c8ce7b1429dedebb033b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2a99e5e633fb1faddeb8c8ce7b1429dedebb033b", "patch": "@@ -1,3 +1,9 @@\n+2013-07-13  Lubos Lunak  <l.lunak@suse.cz>\n+\n+\tPR c++/55203\n+\t* init.c (build_aggr_init): Check for warn_unused attribute.\n+\t* decl.c (poplevel): Likewise.\n+\n 2013-07-13  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/57402"}, {"sha": "c97134c5c406d0c13b81f28cfaaf0798f4f4901d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a99e5e633fb1faddeb8c8ce7b1429dedebb033b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a99e5e633fb1faddeb8c8ce7b1429dedebb033b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=2a99e5e633fb1faddeb8c8ce7b1429dedebb033b", "patch": "@@ -630,7 +630,9 @@ poplevel (int keep, int reverse, int functionbody)\n \t    && DECL_NAME (decl) && ! DECL_ARTIFICIAL (decl)\n \t    && type != error_mark_node\n \t    && (!CLASS_TYPE_P (type)\n-\t\t|| !TYPE_HAS_NONTRIVIAL_DESTRUCTOR (type)))\n+\t\t|| !TYPE_HAS_NONTRIVIAL_DESTRUCTOR (type)\n+\t\t|| lookup_attribute (\"warn_unused\",\n+\t\t\t\t     TYPE_ATTRIBUTES (TREE_TYPE (decl)))))\n \t  {\n \t    if (! TREE_USED (decl))\n \t      warning (OPT_Wunused_variable, \"unused variable %q+D\", decl);"}, {"sha": "3bff509b3967fee5374762cde735c0d5ad63e5d5", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a99e5e633fb1faddeb8c8ce7b1429dedebb033b/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a99e5e633fb1faddeb8c8ce7b1429dedebb033b/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=2a99e5e633fb1faddeb8c8ce7b1429dedebb033b", "patch": "@@ -1504,7 +1504,8 @@ build_aggr_init (tree exp, tree init, int flags, tsubst_flags_t complain)\n       return stmt_expr;\n     }\n \n-  if (VAR_P (exp) || TREE_CODE (exp) == PARM_DECL)\n+  if ((VAR_P (exp) || TREE_CODE (exp) == PARM_DECL)\n+      && !lookup_attribute (\"warn_unused\", TYPE_ATTRIBUTES (type)))\n     /* Just know that we've seen something for this node.  */\n     TREE_USED (exp) = 1;\n "}, {"sha": "721c9b10daf5523fd3a187985e5e3302b4184446", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a99e5e633fb1faddeb8c8ce7b1429dedebb033b/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a99e5e633fb1faddeb8c8ce7b1429dedebb033b/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=2a99e5e633fb1faddeb8c8ce7b1429dedebb033b", "patch": "@@ -16377,6 +16377,23 @@ only be applied to classes declared within an @code{extern \"Java\"} block.\n Calls to methods declared in this interface are dispatched using GCJ's\n interface table mechanism, instead of regular virtual table dispatch.\n \n+@item warn_unused\n+@cindex @code{warn_unused} attribute\n+\n+For C++ types with non-trivial constructors and/or destructors it is\n+impossible for the compiler to determine whether a variable of this\n+type is truly unused if it is not referenced. This type attribute\n+informs the compiler that variables of this type should be warned\n+about if they appear to be unused, just like variables of fundamental\n+types.\n+\n+This attribute is appropriate for types which just represent a value,\n+such as @code{std::string}; it is not appropriate for types which\n+control a resource, such as @code{std::mutex}.\n+\n+This attribute is also accepted in C, but it is unnecessary because C\n+does not have constructors or destructors.\n+\n @end table\n \n See also @ref{Namespace Association}."}, {"sha": "af687fc1671f2530274653cf82814cfbdd969417", "filename": "gcc/testsuite/g++.dg/warn/warn_unused.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a99e5e633fb1faddeb8c8ce7b1429dedebb033b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fwarn_unused.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a99e5e633fb1faddeb8c8ce7b1429dedebb033b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fwarn_unused.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fwarn_unused.C?ref=2a99e5e633fb1faddeb8c8ce7b1429dedebb033b", "patch": "@@ -0,0 +1,22 @@\n+// { dg-do compile }\n+// { dg-options -Wunused }\n+\n+struct __attribute__((warn_unused)) Test\n+{\n+    Test();\n+    ~Test();\n+    void use();\n+};\n+\n+struct TestNormal\n+{\n+    TestNormal();\n+};\n+\n+int main()\n+{\n+   Test unused;         // { dg-warning \"unused variable\" }\n+   Test used;           // { dg-bogus \"unused variable\" }\n+   TestNormal normal;   // { dg-bogus \"unused variable\" }\n+   used.use();\n+}"}]}