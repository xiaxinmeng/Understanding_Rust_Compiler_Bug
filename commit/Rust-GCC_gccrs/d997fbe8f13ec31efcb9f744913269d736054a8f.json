{"sha": "d997fbe8f13ec31efcb9f744913269d736054a8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk5N2ZiZThmMTNlYzMxZWZjYjlmNzQ0OTEzMjY5ZDczNjA1NGE4Zg==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2010-12-17T10:39:21Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2010-12-17T10:39:21Z"}, "message": "re PR debug/45088 (pointer type information lost in debuginfo)\n\nFix for PR debug/45088\n\ngcc/\n\n\t* dwarf2out.c (gen_type_die_with_usage): Do not try to emit debug\n\tinfo for a redundant typedef that has DECL_ORIGINAL_TYPE set. Use\n\tthat underlying type instead.\n\ngcc/testsuite/\n\n\t* g++.dg/debug/dwarf2/self-ref-1.C: New test.\n\t* g++.dg/debug/dwarf2/self-ref-2.C: Likewise.\n\nFrom-SVN: r167976", "tree": {"sha": "8598995a9270af7853b3d4b0110123f2918a1296", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8598995a9270af7853b3d4b0110123f2918a1296"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d997fbe8f13ec31efcb9f744913269d736054a8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d997fbe8f13ec31efcb9f744913269d736054a8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d997fbe8f13ec31efcb9f744913269d736054a8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d997fbe8f13ec31efcb9f744913269d736054a8f/comments", "author": null, "committer": null, "parents": [{"sha": "a4ad1c7a089e4bbb21dc6e9f97d4beef52577d6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4ad1c7a089e4bbb21dc6e9f97d4beef52577d6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4ad1c7a089e4bbb21dc6e9f97d4beef52577d6a"}], "stats": {"total": 80, "additions": 79, "deletions": 1}, "files": [{"sha": "571760f8f814440124061087d50fb292a9559191", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d997fbe8f13ec31efcb9f744913269d736054a8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d997fbe8f13ec31efcb9f744913269d736054a8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d997fbe8f13ec31efcb9f744913269d736054a8f", "patch": "@@ -1,3 +1,9 @@\n+2010-12-17  Dodji Seketeli  <dodji@redhat.com>\n+\n+\t* dwarf2out.c (gen_type_die_with_usage): Do not try to emit debug\n+    \tinfo for a redundant typedef that has DECL_ORIGINAL_TYPE set. Use\n+    \tthat underlying type instead.\n+\n 2010-12-16  Jan Hubicka  <jh@suse.cz>\n \n \tPR middle-end/44563 "}, {"sha": "1fa33001a77b21aabda065a1f489a53efcf47150", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d997fbe8f13ec31efcb9f744913269d736054a8f/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d997fbe8f13ec31efcb9f744913269d736054a8f/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=d997fbe8f13ec31efcb9f744913269d736054a8f", "patch": "@@ -20251,13 +20251,23 @@ gen_tagged_type_die (tree type,\n \n static void\n gen_type_die_with_usage (tree type, dw_die_ref context_die,\n-\t\t\t\tenum debug_info_usage usage)\n+\t\t\t enum debug_info_usage usage)\n {\n   struct array_descr_info info;\n \n   if (type == NULL_TREE || type == error_mark_node)\n     return;\n \n+  if (TYPE_NAME (type) != NULL_TREE\n+      && TREE_CODE (TYPE_NAME (type)) == TYPE_DECL\n+      && is_redundant_typedef (TYPE_NAME (type))\n+      && DECL_ORIGINAL_TYPE (TYPE_NAME (type)))\n+    /* The DECL of this type is a typedef we don't want to emit debug\n+       info for but we want debug info for its underlying typedef.\n+       This can happen for e.g, the injected-class-name of a C++\n+       type.  */\n+    type = DECL_ORIGINAL_TYPE (TYPE_NAME (type));\n+\n   /* If TYPE is a typedef type variant, let's generate debug info\n      for the parent typedef which TYPE is a type of.  */\n   if (typedef_variant_p (type))"}, {"sha": "8cfa5c0ebfb0b6d0070bb8eec1342e80681e7805", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d997fbe8f13ec31efcb9f744913269d736054a8f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d997fbe8f13ec31efcb9f744913269d736054a8f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d997fbe8f13ec31efcb9f744913269d736054a8f", "patch": "@@ -1,3 +1,8 @@\n+2010-12-17  Dodji Seketeli  <dodji@redhat.com>\n+\n+\t* g++.dg/debug/dwarf2/self-ref-1.C: New test.\n+\t* g++.dg/debug/dwarf2/self-ref-2.C: Likewise.\n+\n 2010-12-16  Sebastian Pop  <sebastian.pop@amd.com>\n \n \tPR tree-optimization/46924"}, {"sha": "81bcb2775aa5517e5750ced3b1962edc9563a69d", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/self-ref-1.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d997fbe8f13ec31efcb9f744913269d736054a8f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fself-ref-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d997fbe8f13ec31efcb9f744913269d736054a8f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fself-ref-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fself-ref-1.C?ref=d997fbe8f13ec31efcb9f744913269d736054a8f", "patch": "@@ -0,0 +1,28 @@\n+// Origin: PR debug/45088\n+// { dg-do compile }\n+// { dg-options \"-g -dA\" }\n+// { dg-final { scan-assembler-times \"\\[^\\n\\r\\]*\\\\(DIE\\[^\\n\\r\\]*DW_TAG_pointer_type\\\\)\\[\\n\\r\\]{1,2}\\[^\\n\\r\\]*DW_AT_byte_size\\[\\n\\r\\]{1,2}\\[^\\n\\r\\]*DW_AT_type\" 4 } }\n+\n+struct A\n+{\n+    virtual ~A();\n+};\n+\n+struct B : public A\n+{\n+    virtual ~B(){}\n+};\n+\n+struct C : public B\n+{\n+    A* a1;\n+};\n+\n+int\n+main()\n+{\n+    C c;\n+    c.a1 = 0;\n+    return 0;\n+}\n+"}, {"sha": "b1c5401da0711ba2eaa59e9fff4a75992e64b8c8", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/self-ref-2.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d997fbe8f13ec31efcb9f744913269d736054a8f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fself-ref-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d997fbe8f13ec31efcb9f744913269d736054a8f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fself-ref-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fself-ref-2.C?ref=d997fbe8f13ec31efcb9f744913269d736054a8f", "patch": "@@ -0,0 +1,29 @@\n+// Origin: PR debug/45088\n+// { dg-do compile }\n+// { dg-options \"-g -dA\" }\n+// { dg-final { scan-assembler-times \"\\[^\\n\\r\\]*\\\\(DIE\\[^\\n\\r\\]*DW_TAG_pointer_type\\\\)\\[\\n\\r\\]{1,2}\\[^\\n\\r\\]*DW_AT_byte_size\\[\\n\\r\\]{1,2}\\[^\\n\\r\\]*DW_AT_type\" 4 } }\n+\n+template<class T>\n+struct A\n+{\n+    virtual ~A();\n+};\n+\n+struct B : public A<int>\n+{\n+    virtual ~B(){}\n+};\n+\n+struct C : public B\n+{\n+    A<int>* a1;\n+};\n+\n+int\n+main()\n+{\n+    C c;\n+    c.a1 = 0;\n+    return 0;\n+}\n+"}]}