{"sha": "b7feb71d45e4cd894d7706c21a21a3871070d098", "node_id": "C_kwDOANBUbNoAKGI3ZmViNzFkNDVlNGNkODk0ZDc3MDZjMjFhMjFhMzg3MTA3MGQwOTg", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2022-03-08T20:54:03Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2022-05-23T12:39:15Z"}, "message": "demangler: C++ modules support\n\nThis adds demangling support for C++ modules.  A new 'W' component\nalong with augmented behaviour of 'S' components.\n\n\tinclude/\n\t* demangle.h (enum demangle_component_type): Add module components.\n\tlibiberty/\n\t* cp-demangle.c (d_make_comp): Adjust.\n\t(d_name, d_prefix): Adjust subst handling. Add module handling.\n\t(d_maybe_module_name): New.\n\t(d_unqualified_name): Add incoming module parm. Handle it.  Adjust all callers.\n\t(d_special_name): Add 'GI' support.\n\t(d_count_template_scopes): Adjust.\n\t(d_print_comp_inner): Print module.\n\t* testsuite/demangle-expected: New test cases", "tree": {"sha": "ed5f57ea1f5d52d05acc92c20f1325cfe7c4cad2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed5f57ea1f5d52d05acc92c20f1325cfe7c4cad2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7feb71d45e4cd894d7706c21a21a3871070d098", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7feb71d45e4cd894d7706c21a21a3871070d098", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7feb71d45e4cd894d7706c21a21a3871070d098", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7feb71d45e4cd894d7706c21a21a3871070d098/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63798f67dcc848dcd110ce222b97304565c9ea29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63798f67dcc848dcd110ce222b97304565c9ea29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63798f67dcc848dcd110ce222b97304565c9ea29"}], "stats": {"total": 216, "additions": 188, "deletions": 28}, "files": [{"sha": "e2aa4a971ffe0a2ce73b0f6d987d985748fd5c6f", "filename": "include/demangle.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7feb71d45e4cd894d7706c21a21a3871070d098/include%2Fdemangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7feb71d45e4cd894d7706c21a21a3871070d098/include%2Fdemangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fdemangle.h?ref=b7feb71d45e4cd894d7706c21a21a3871070d098", "patch": "@@ -451,7 +451,12 @@ enum demangle_component_type\n   DEMANGLE_COMPONENT_NOEXCEPT,\n   DEMANGLE_COMPONENT_THROW_SPEC,\n \n-  DEMANGLE_COMPONENT_STRUCTURED_BINDING\n+  DEMANGLE_COMPONENT_STRUCTURED_BINDING,\n+\n+  DEMANGLE_COMPONENT_MODULE_NAME,\n+  DEMANGLE_COMPONENT_MODULE_PARTITION,\n+  DEMANGLE_COMPONENT_MODULE_ENTITY,\n+  DEMANGLE_COMPONENT_MODULE_INIT,\n };\n \n /* Types which are only used internally.  */"}, {"sha": "d06d80d1feeb183dd8b6657a9315b93674bf0fe6", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 115, "deletions": 27, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7feb71d45e4cd894d7706c21a21a3871070d098/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7feb71d45e4cd894d7706c21a21a3871070d098/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=b7feb71d45e4cd894d7706c21a21a3871070d098", "patch": "@@ -429,10 +429,12 @@ static struct demangle_component *d_name (struct d_info *, int substable);\n \n static struct demangle_component *d_nested_name (struct d_info *);\n \n+static int d_maybe_module_name (struct d_info *, struct demangle_component **);\n+\n static struct demangle_component *d_prefix (struct d_info *, int);\n \n static struct demangle_component *d_unqualified_name (struct d_info *,\n-\t\t\t\t\t\t      struct demangle_component *scope);\n+\tstruct demangle_component *scope, struct demangle_component *module);\n \n static struct demangle_component *d_source_name (struct d_info *);\n \n@@ -984,6 +986,7 @@ d_make_comp (struct d_info *di, enum demangle_component_type type,\n     case DEMANGLE_COMPONENT_COMPOUND_NAME:\n     case DEMANGLE_COMPONENT_VECTOR_TYPE:\n     case DEMANGLE_COMPONENT_CLONE:\n+    case DEMANGLE_COMPONENT_MODULE_ENTITY:\n       if (left == NULL || right == NULL)\n \treturn NULL;\n       break;\n@@ -1022,6 +1025,7 @@ d_make_comp (struct d_info *di, enum demangle_component_type type,\n     case DEMANGLE_COMPONENT_TRINARY_ARG2:\n     case DEMANGLE_COMPONENT_TPARM_OBJ:\n     case DEMANGLE_COMPONENT_STRUCTURED_BINDING:\n+    case DEMANGLE_COMPONENT_MODULE_INIT:\n       if (left == NULL)\n \treturn NULL;\n       break;\n@@ -1030,6 +1034,8 @@ d_make_comp (struct d_info *di, enum demangle_component_type type,\n \t empty.  */\n     case DEMANGLE_COMPONENT_ARRAY_TYPE:\n     case DEMANGLE_COMPONENT_INITIALIZER_LIST:\n+    case DEMANGLE_COMPONENT_MODULE_NAME:\n+    case DEMANGLE_COMPONENT_MODULE_PARTITION:\n       if (right == NULL)\n \treturn NULL;\n       break;\n@@ -1422,6 +1428,7 @@ d_name (struct d_info *di, int substable)\n {\n   char peek = d_peek_char (di);\n   struct demangle_component *dc = NULL;\n+  struct demangle_component *module = NULL;\n   int subst = 0;\n \n   switch (peek)\n@@ -1435,7 +1442,7 @@ d_name (struct d_info *di, int substable)\n       break;\n \n     case 'U':\n-      dc = d_unqualified_name (di, NULL);\n+      dc = d_unqualified_name (di, NULL, NULL);\n       break;\n \n     case 'S':\n@@ -1446,20 +1453,29 @@ d_name (struct d_info *di, int substable)\n \t    dc = d_make_name (di, \"std\", 3);\n \t    di->expansion += 3;\n \t  }\n-\telse\n+\n+\tif (d_peek_char (di) == 'S')\n \t  {\n-\t    dc = d_substitution (di, 0);\n-\t    if (!dc)\n+\t    module = d_substitution (di, 0);\n+\t    if (!module)\n \t      return NULL;\n-\t    subst = 1;\n+\t    if (!(module->type == DEMANGLE_COMPONENT_MODULE_NAME\n+\t\t  || module->type == DEMANGLE_COMPONENT_MODULE_PARTITION))\n+\t      {\n+\t\tif (dc)\n+\t\t  return NULL;\n+\t\tsubst = 1;\n+\t\tdc = module;\n+\t\tmodule = NULL;\n+\t      }\n \t  }\n       }\n       /* FALLTHROUGH */\n \n     case 'L':\n     default:\n       if (!subst)\n-\tdc = d_unqualified_name (di, dc);\n+\tdc = d_unqualified_name (di, dc, module);\n       if (d_peek_char (di) == 'I')\n \t{\n \t  /* This is <template-args>, which means that we just saw\n@@ -1552,15 +1568,6 @@ d_prefix (struct d_info *di, int substable)\n \t    return NULL;\n \t  ret = cplus_demangle_type (di);\n \t}\n-      else if (peek == 'S')\n-\t{\n-\t  if (ret)\n-\t    return NULL;\n-\t  ret = d_substitution (di, 1);\n-\t  if (!ret)\n-\t    return NULL;\n-\t  continue;\n-\t}\n       else if (peek == 'I')\n \t{\n \t  if (ret == NULL)\n@@ -1586,7 +1593,24 @@ d_prefix (struct d_info *di, int substable)\n \t  d_advance (di, 1);\n \t}\n       else\n-\tret = d_unqualified_name (di, ret);\n+\t{\n+\t  struct demangle_component *module = NULL;\n+\t  if (peek == 'S')\n+\t    {\n+\t      module = d_substitution (di, 1);\n+\t      if (!module)\n+\t\treturn NULL;\n+\t      if (!(module->type == DEMANGLE_COMPONENT_MODULE_NAME\n+\t\t    || module->type == DEMANGLE_COMPONENT_MODULE_PARTITION))\n+\t\t{\n+\t\t  if (ret)\n+\t\t    return NULL;\n+\t\t  ret = module;\n+\t\t  continue;\n+\t\t}\n+\t    }\n+\t  ret = d_unqualified_name (di, ret, module);\n+\t}\n \n       if (!ret)\n \tbreak;\n@@ -1601,20 +1625,46 @@ d_prefix (struct d_info *di, int substable)\n   return ret;\n }\n \n-/* <unqualified-name> ::= <operator-name> [<abi-tags>]\n-                      ::= <ctor-dtor-name> [<abi-tags>]\n-                      ::= <source-name> [<abi-tags>]\n-\t\t      ::= <local-source-name>  [<abi-tags>]\n-\t\t      ::= DC <source-name>+ E [<abi-tags>]\n+static int\n+d_maybe_module_name (struct d_info *di, struct demangle_component **name)\n+{\n+  while (d_peek_char (di) == 'W')\n+    {\n+      d_advance (di, 1);\n+      enum demangle_component_type code = DEMANGLE_COMPONENT_MODULE_NAME;\n+      if (d_peek_char (di) == 'P')\n+\t{\n+\t  code = DEMANGLE_COMPONENT_MODULE_PARTITION;\n+\t  d_advance (di, 1);\n+\t}\n+\n+      *name = d_make_comp (di, code, *name, d_source_name (di));\n+      if (!*name)\n+\treturn 0;\n+      if (!d_add_substitution (di, *name))\n+\treturn 0;\n+    }\n+  return 1;\n+}\n+\n+/* <unqualified-name> ::= [<module-name>] <operator-name> [<abi-tags>]\n+                      ::= [<module-name>] <ctor-dtor-name> [<abi-tags>]\n+                      ::= [<module-name>] <source-name> [<abi-tags>]\n+\t\t      ::= [<module-name>] <local-source-name>  [<abi-tags>]\n+                      ::= [<module-name>] DC <source-name>+ E [<abi-tags>]\n     <local-source-name>\t::= L <source-name> <discriminator> [<abi-tags>]\n */\n \n static struct demangle_component *\n-d_unqualified_name (struct d_info *di, struct demangle_component *scope)\n+d_unqualified_name (struct d_info *di, struct demangle_component *scope,\n+\t\t    struct demangle_component *module)\n {\n   struct demangle_component *ret;\n   char peek;\n \n+  if (!d_maybe_module_name (di, &module))\n+    return NULL;\n+\n   peek = d_peek_char (di);\n   if (IS_DIGIT (peek))\n     ret = d_source_name (di);\n@@ -1688,6 +1738,8 @@ d_unqualified_name (struct d_info *di, struct demangle_component *scope)\n   else\n     return NULL;\n \n+  if (module)\n+    ret = d_make_comp (di, DEMANGLE_COMPONENT_MODULE_ENTITY, ret, module);\n   if (d_peek_char (di) == 'B')\n     ret = d_abi_tags (di, ret);\n   if (scope)\n@@ -2166,6 +2218,14 @@ d_special_name (struct d_info *di)\n \t  return d_make_comp (di, DEMANGLE_COMPONENT_HIDDEN_ALIAS,\n \t\t\t      d_encoding (di, 0), NULL);\n \n+\tcase 'I':\n+\t  {\n+\t    struct demangle_component *module = NULL;\n+\t    if (!d_maybe_module_name (di, &module) || !module)\n+\t      return NULL;\n+\t    return d_make_comp (di, DEMANGLE_COMPONENT_MODULE_INIT,\n+\t\t\t\tmodule, NULL);\n+\t  }\n \tcase 'T':\n \t  switch (d_next_char (di))\n \t    {\n@@ -3302,7 +3362,7 @@ d_unresolved_name (struct d_info *di)\n     }\n   else\n     type = cplus_demangle_type (di);\n-  name = d_unqualified_name (di, type);\n+  name = d_unqualified_name (di, type, NULL);\n   if (d_peek_char (di) == 'I')\n     name = d_make_comp (di, DEMANGLE_COMPONENT_TEMPLATE, name,\n \t\t\td_template_args (di));\n@@ -3375,7 +3435,7 @@ d_expression_1 (struct d_info *di)\n \t/* operator-function-id, i.e. operator+(t).  */\n \td_advance (di, 2);\n \n-      name = d_unqualified_name (di, NULL);\n+      name = d_unqualified_name (di, NULL, NULL);\n       if (name == NULL)\n \treturn NULL;\n       if (d_peek_char (di) == 'I')\n@@ -3483,7 +3543,7 @@ d_expression_1 (struct d_info *di)\n \t      /* fold-expression.  */\n \t      left = d_operator_name (di);\n \t    else if (!strcmp (code, \"di\"))\n-\t      left = d_unqualified_name (di, NULL);\n+\t      left = d_unqualified_name (di, NULL, NULL);\n \t    else\n \t      left = d_expression_1 (di);\n \t    if (!strcmp (code, \"cl\"))\n@@ -3501,7 +3561,7 @@ d_expression_1 (struct d_info *di)\n \t\t       d_unqualified_name rather than d_expression_1 here for\n \t\t       old mangled names that didn't add 'on' before operator\n \t\t       names.  */\n-\t\t    right = d_unqualified_name (di, NULL);\n+\t\t    right = d_unqualified_name (di, NULL, NULL);\n \t\t    if (d_peek_char (di) == 'I')\n \t\t      right = d_make_comp (di, DEMANGLE_COMPONENT_TEMPLATE,\n \t\t\t\t\t   right, d_template_args (di));\n@@ -4147,6 +4207,9 @@ d_count_templates_scopes (struct d_print_info *dpi,\n     case DEMANGLE_COMPONENT_NUMBER:\n     case DEMANGLE_COMPONENT_UNNAMED_TYPE:\n     case DEMANGLE_COMPONENT_STRUCTURED_BINDING:\n+    case DEMANGLE_COMPONENT_MODULE_NAME:\n+    case DEMANGLE_COMPONENT_MODULE_PARTITION:\n+    case DEMANGLE_COMPONENT_MODULE_INIT:\n       break;\n \n     case DEMANGLE_COMPONENT_TEMPLATE:\n@@ -4252,6 +4315,7 @@ d_count_templates_scopes (struct d_print_info *dpi,\n \n     case DEMANGLE_COMPONENT_GLOBAL_CONSTRUCTORS:\n     case DEMANGLE_COMPONENT_GLOBAL_DESTRUCTORS:\n+    case DEMANGLE_COMPONENT_MODULE_ENTITY:\n       d_count_templates_scopes (dpi, d_left (dc));\n       break;\n \n@@ -4831,6 +4895,25 @@ d_print_comp_inner (struct d_print_info *dpi, int options,\n       d_append_char (dpi, ']');\n       return;\n \n+    case DEMANGLE_COMPONENT_MODULE_ENTITY:\n+      d_print_comp (dpi, options, d_left (dc));\n+      d_append_char (dpi, '@');\n+      d_print_comp (dpi, options, d_right (dc));\n+      return;\n+\n+    case DEMANGLE_COMPONENT_MODULE_NAME:\n+    case DEMANGLE_COMPONENT_MODULE_PARTITION:\n+      {\n+\tif (d_left (dc))\n+\t  d_print_comp (dpi, options, d_left (dc));\n+\tchar c = dc->type == DEMANGLE_COMPONENT_MODULE_PARTITION\n+\t  ? ':' : d_left (dc) ? '.' : 0;\n+\tif (c)\n+\t  d_append_char (dpi, c);\n+\td_print_comp (dpi, options, d_right (dc));\n+      }\n+      return;\n+\n     case DEMANGLE_COMPONENT_QUAL_NAME:\n     case DEMANGLE_COMPONENT_LOCAL_NAME:\n       d_print_comp (dpi, options, d_left (dc));\n@@ -5062,6 +5145,11 @@ d_print_comp_inner (struct d_print_info *dpi, int options,\n       d_print_comp (dpi, options, dc->u.s_dtor.name);\n       return;\n \n+    case DEMANGLE_COMPONENT_MODULE_INIT:\n+      d_append_string (dpi, \"initializer for module \");\n+      d_print_comp (dpi, options, d_left (dc));\n+      return;\n+\n     case DEMANGLE_COMPONENT_VTABLE:\n       d_append_string (dpi, \"vtable for \");\n       d_print_comp (dpi, options, d_left (dc));"}, {"sha": "351af349219eba699b6c919448c531dfcb743cde", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7feb71d45e4cd894d7706c21a21a3871070d098/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7feb71d45e4cd894d7706c21a21a3871070d098/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=b7feb71d45e4cd894d7706c21a21a3871070d098", "patch": "@@ -1503,3 +1503,70 @@ std::[a]\n \n _ZN3NMSDC1aEE\n NMS::[a]\n+\n+# Modules\n+_ZN5Outer5InnerW3FOO2FnERNS0_1XE\n+Outer::Inner::Fn@FOO(Outer::Inner::X&)\n+\n+_ZN5OuterW3FOO5Inner2FnERNS1_1XE\n+Outer::Inner@FOO::Fn(Outer::Inner@FOO::X&)\n+\n+_ZN4Quux4TotoW3FooW3Bar3BazEPNS0_S2_5PlughE\n+Quux::Toto::Baz@Foo.Bar(Quux::Toto::Plugh@Foo.Bar*)\n+\n+_ZW6Module1fNS_1a1bENS0_1cE\n+f@Module(a@Module::b, a@Module::c)\n+\n+_ZN3BobW3FOOW3BAR3BarEPS1_1APNS_S1_1BE\n+Bob::Bar@FOO.BAR(A@FOO.BAR*, Bob::B@FOO.BAR*)\n+\n+_ZW3FOOW3BAR3FooPS0_1APN3BobS0_1BE\n+Foo@FOO.BAR(A@FOO.BAR*, Bob::B@FOO.BAR*)\n+\n+_ZN3BobW3FOOW3BAZ3FooEPS0_W3BAR1APNS_S2_1BE\n+Bob::Foo@FOO.BAZ(A@FOO.BAR*, Bob::B@FOO.BAR*)\n+\n+_ZW3FOOW3BAZ3BarPS_W3BAR1APN3BobS1_1BE\n+Bar@FOO.BAZ(A@FOO.BAR*, Bob::B@FOO.BAR*)\n+\n+_ZNW3FOO3TPLIS_3OneE1MEPS1_\n+TPL@FOO<One@FOO>::M(One@FOO*)\n+\n+_ZNW3FOO3TPLIS_3OneE1NIS_3TwoEEvPS1_PT_\n+void TPL@FOO<One@FOO>::N<Two@FOO>(One@FOO*, Two@FOO*)\n+\n+_ZN3NMSW3FOO3TPLINS_S0_3OneEE1MEPS2_\n+NMS::TPL@FOO<NMS::One@FOO>::M(NMS::One@FOO*)\n+\n+_ZN3NMSW3FOO3TPLINS_S0_3OneEE1NINS_S0_3TwoEEEvPS2_PT_\n+void NMS::TPL@FOO<NMS::One@FOO>::N<NMS::Two@FOO>(NMS::One@FOO*, NMS::Two@FOO*)\n+\n+_ZNStW3STD9allocatorIiE1MEPi\n+std::allocator@STD<int>::M(int*)\n+\n+_ZNStW3STD9allocatorIiE1NIfEEPT_Pi\n+float* std::allocator@STD<int>::N<float>(int*)\n+\n+_ZNStW3STD9allocatorI4PoohE1MEPS1_\n+std::allocator@STD<Pooh>::M(Pooh*)\n+\n+_ZNStW3STD9allocatorI4PoohE1NI6PigletEEPT_PS1_\n+Piglet* std::allocator@STD<Pooh>::N<Piglet>(Pooh*)\n+\n+_ZW3FooDC1a1bE\n+[a, b]@Foo\n+\n+_ZN1NW3FooDC1a1bEE\n+N::[a, b]@Foo\n+\n+_ZN3NMSW3MOD3FooB3ABIEv\n+NMS::Foo@MOD[abi:ABI]()\n+\n+_ZGIW3Foo\n+initializer for module Foo\n+\n+_ZGIW3FooW3Bar\n+initializer for module Foo.Bar\n+\n+_ZGIW3FooWP3BarW3Baz\n+initializer for module Foo:Bar.Baz"}]}