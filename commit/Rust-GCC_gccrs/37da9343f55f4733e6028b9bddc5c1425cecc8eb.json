{"sha": "37da9343f55f4733e6028b9bddc5c1425cecc8eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdkYTkzNDNmNTVmNDczM2U2MDI4YjliZGRjNWMxNDI1Y2VjYzhlYg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-04-01T19:19:22Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-04-01T19:19:22Z"}, "message": "re PR fortran/25270 (testcases fail with a type mismatch)\n\n\n\tPR fortran/25270\n\t* trans-array.c (gfc_trans_allocate_array_storage): In array index\n\tcalculations use gfc_index_zero_node and gfc_index_one_node instead\n\tof integer_zero_node and integer_one_node respectively.\n\t(gfc_conv_array_transpose): Likewise.\n\t(gfc_conv_ss_startstride): Likewise.\n\t(gfc_trans_dummy_array_bias): Likewise.\n\nFrom-SVN: r112608", "tree": {"sha": "fa86a5d3aba1b335a8847dd7d8f38b6efcfd1236", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa86a5d3aba1b335a8847dd7d8f38b6efcfd1236"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37da9343f55f4733e6028b9bddc5c1425cecc8eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37da9343f55f4733e6028b9bddc5c1425cecc8eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37da9343f55f4733e6028b9bddc5c1425cecc8eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37da9343f55f4733e6028b9bddc5c1425cecc8eb/comments", "author": null, "committer": null, "parents": [{"sha": "9ccab91c6fb6b96c77e1aafd5ef240b965c897b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ccab91c6fb6b96c77e1aafd5ef240b965c897b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ccab91c6fb6b96c77e1aafd5ef240b965c897b2"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "c7aa2a79a55abfc9107b5aa9fb259be1a09a0edb", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37da9343f55f4733e6028b9bddc5c1425cecc8eb/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37da9343f55f4733e6028b9bddc5c1425cecc8eb/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=37da9343f55f4733e6028b9bddc5c1425cecc8eb", "patch": "@@ -1,3 +1,13 @@\n+2006-04-01  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR fortran/25270\n+\t* trans-array.c (gfc_trans_allocate_array_storage): In array index\n+\tcalculations use gfc_index_zero_node and gfc_index_one_node instead\n+\tof integer_zero_node and integer_one_node respectively.\n+\t(gfc_conv_array_transpose): Likewise.\n+\t(gfc_conv_ss_startstride): Likewise.\n+\t(gfc_trans_dummy_array_bias): Likewise.\n+\n 2006-04-01  Roger Sayle  <roger@eyesopen.com>\n \n \t* dependency.c (gfc_is_inside_range): Delete."}, {"sha": "7136d1efbd6f98918145b1b02bc0ec909bed0432", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37da9343f55f4733e6028b9bddc5c1425cecc8eb/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37da9343f55f4733e6028b9bddc5c1425cecc8eb/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=37da9343f55f4733e6028b9bddc5c1425cecc8eb", "patch": "@@ -514,7 +514,7 @@ gfc_trans_allocate_array_storage (stmtblock_t * pre, stmtblock_t * post,\n \t{\n \t  /* Make a temporary variable to hold the data.  */\n \t  tmp = fold_build2 (MINUS_EXPR, TREE_TYPE (nelem), nelem,\n-\t\t\t     integer_one_node);\n+\t\t\t     gfc_index_one_node);\n \t  tmp = build_range_type (gfc_array_index_type, gfc_index_zero_node,\n \t\t\t\t  tmp);\n \t  tmp = build_array_type (gfc_get_element_type (TREE_TYPE (desc)),\n@@ -726,9 +726,9 @@ gfc_conv_array_transpose (gfc_se * se, gfc_expr * expr)\n   gcc_assert (src_info->dimen == 2);\n   for (n = 0; n < 2; n++)\n     {\n-      dest_info->delta[n] = integer_zero_node;\n-      dest_info->start[n] = integer_zero_node;\n-      dest_info->stride[n] = integer_one_node;\n+      dest_info->delta[n] = gfc_index_zero_node;\n+      dest_info->start[n] = gfc_index_zero_node;\n+      dest_info->stride[n] = gfc_index_one_node;\n       dest_info->dim[n] = n;\n \n       dest_index = gfc_rank_cst[n];\n@@ -2445,7 +2445,7 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \n       gfc_start_block (&block);\n \n-      fault = integer_zero_node;\n+      fault = boolean_false_node;\n       for (n = 0; n < loop->dimen; n++)\n \tsize[n] = NULL_TREE;\n \n@@ -3545,7 +3545,7 @@ gfc_trans_dummy_array_bias (gfc_symbol * sym, tree tmpdesc, tree body)\n       partial = gfc_create_var (boolean_type_node, \"partial\");\n       TREE_USED (partial) = 1;\n       tmp = gfc_conv_descriptor_stride (dumdesc, gfc_rank_cst[0]);\n-      tmp = fold_build2 (EQ_EXPR, boolean_type_node, tmp, integer_one_node);\n+      tmp = fold_build2 (EQ_EXPR, boolean_type_node, tmp, gfc_index_one_node);\n       gfc_add_modify_expr (&block, partial, tmp);\n     }\n   else\n@@ -3561,7 +3561,7 @@ gfc_trans_dummy_array_bias (gfc_symbol * sym, tree tmpdesc, tree body)\n       stride = gfc_conv_descriptor_stride (dumdesc, gfc_rank_cst[0]);\n       stride = gfc_evaluate_now (stride, &block);\n \n-      tmp = build2 (EQ_EXPR, boolean_type_node, stride, integer_zero_node);\n+      tmp = build2 (EQ_EXPR, boolean_type_node, stride, gfc_index_zero_node);\n       tmp = build3 (COND_EXPR, gfc_array_index_type, tmp,\n \t\t    gfc_index_one_node, stride);\n       stride = GFC_TYPE_ARRAY_STRIDE (type, 0);"}]}