{"sha": "322763f5df41223003720e8333c011b953bc1b4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzIyNzYzZjVkZjQxMjIzMDAzNzIwZTgzMzNjMDExYjk1M2JjMWI0Zg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-05-16T11:32:40Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-05-16T11:32:40Z"}, "message": "cp-tree.h (SCOPE_DEPTH): New.\n\n\t* cp-tree.h (SCOPE_DEPTH): New.\n\t* name-lookup.h (is_nested_namespace): Declare.\n\t* name-lookup.c (is_nested_namespace): New.\n\t(is_ancestor): Use it.\n\t(set_decl_namespace): Likewise.\n\t(push_namespace): Set SCOPE_DEPTH.\n\t* pt.c (check_specialization_namespace): Use is_nested_namespace.\n\t(check_unqualigied_spec_or_inst): Likewise.\n\nFrom-SVN: r248095", "tree": {"sha": "e7909fa2339db555bb0f5e64f7841591c5fff828", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7909fa2339db555bb0f5e64f7841591c5fff828"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/322763f5df41223003720e8333c011b953bc1b4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/322763f5df41223003720e8333c011b953bc1b4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/322763f5df41223003720e8333c011b953bc1b4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/322763f5df41223003720e8333c011b953bc1b4f/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "51f01fc387a2fb580108ccb27f945ee4bd1cfd34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51f01fc387a2fb580108ccb27f945ee4bd1cfd34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51f01fc387a2fb580108ccb27f945ee4bd1cfd34"}], "stats": {"total": 69, "additions": 56, "deletions": 13}, "files": [{"sha": "120d2b060628772f8e2194677538651592ad6550", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/322763f5df41223003720e8333c011b953bc1b4f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/322763f5df41223003720e8333c011b953bc1b4f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=322763f5df41223003720e8333c011b953bc1b4f", "patch": "@@ -1,3 +1,14 @@\n+2017-05-16  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (SCOPE_DEPTH): New.\n+\t* name-lookup.h (is_nested_namespace): Declare.\n+\t* name-lookup.c (is_nested_namespace): New.\n+\t(is_ancestor): Use it.\n+\t(set_decl_namespace): Likewise.\n+\t(push_namespace): Set SCOPE_DEPTH.\n+\t* pt.c (check_specialization_namespace): Use is_nested_namespace.\n+\t(check_unqualigied_spec_or_inst): Likewise.\n+\n 2017-05-15  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/79369"}, {"sha": "8244a768c91050b82fa424fe7ed1c6d042b13b84", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/322763f5df41223003720e8333c011b953bc1b4f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/322763f5df41223003720e8333c011b953bc1b4f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=322763f5df41223003720e8333c011b953bc1b4f", "patch": "@@ -2917,6 +2917,11 @@ struct GTY(()) lang_decl {\n #define LOCAL_CLASS_P(NODE)\t\t\t\t\\\n   (decl_function_context (TYPE_MAIN_DECL (NODE)) != NULL_TREE)\n \n+/* The nesting depth of namespace, class or function.  Makes is_ancestor much\n+   simpler.  Only 8 bits available.  */\n+#define SCOPE_DEPTH(NODE) \\\n+  (NAMESPACE_DECL_CHECK (NODE)->base.u.bits.address_space)\n+\n /* Whether the namepace is an inline namespace.  */\n #define DECL_NAMESPACE_INLINE_P(NODE) \\\n   TREE_LANG_FLAG_0 (NAMESPACE_DECL_CHECK (NODE))"}, {"sha": "7b4d27f44d02d946606a431c2151d66b900856fc", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/322763f5df41223003720e8333c011b953bc1b4f/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/322763f5df41223003720e8333c011b953bc1b4f/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=322763f5df41223003720e8333c011b953bc1b4f", "patch": "@@ -3327,6 +3327,25 @@ do_local_using_decl (tree decl, tree scope, tree name)\n     cp_emit_debug_info_for_using (orig_decl, current_scope());\n }\n \n+/* Returns true if ANCESTOR encloses DESCENDANT, including matching.\n+   Both are namespaces.  */\n+\n+bool\n+is_nested_namespace (tree ancestor, tree descendant, bool inline_only)\n+{\n+  int depth = SCOPE_DEPTH (ancestor);\n+\n+  if (!depth && !inline_only)\n+    /* The global namespace encloses everything.  */\n+    return true;\n+\n+  while (SCOPE_DEPTH (descendant) > depth\n+\t && (!inline_only || DECL_NAMESPACE_INLINE_P (descendant)))\n+    descendant = CP_DECL_CONTEXT (descendant);\n+\n+  return ancestor == descendant;\n+}\n+\n /* Returns true if ROOT (a namespace, class, or function) encloses\n    CHILD.  CHILD may be either a class type or a namespace.  */\n \n@@ -3343,19 +3362,22 @@ is_ancestor (tree root, tree child)\n   if (root == global_namespace)\n     return true;\n \n-  while (true)\n+  /* Search until we reach namespace scope.  */\n+  while (TREE_CODE (child) != NAMESPACE_DECL)\n     {\n-      /* If we've run out of scopes, stop.  */\n-      if (!child)\n-\treturn false;\n       /* If we've reached the ROOT, it encloses CHILD.  */\n       if (root == child)\n \treturn true;\n       /* Go out one level.  */\n       if (TYPE_P (child))\n \tchild = TYPE_NAME (child);\n-      child = DECL_CONTEXT (child);\n+      child = CP_DECL_CONTEXT (child);\n     }\n+\n+  if (TREE_CODE (root) == NAMESPACE_DECL)\n+    return is_nested_namespace (root, child);\n+\n+  return false;\n }\n \n /* Enter the class or namespace scope indicated by T suitable for name\n@@ -4076,7 +4098,7 @@ set_decl_namespace (tree decl, tree scope, bool friendp)\n   scope = ORIGINAL_NAMESPACE (scope);\n \n   /* It is ok for friends to be qualified in parallel space.  */\n-  if (!friendp && !is_ancestor (current_namespace, scope))\n+  if (!friendp && !is_nested_namespace (current_namespace, scope))\n     error (\"declaration of %qD not in a namespace surrounding %qD\",\n \t   decl, scope);\n   DECL_CONTEXT (decl) = FROB_CONTEXT (scope);\n@@ -4153,7 +4175,7 @@ set_decl_namespace (tree decl, tree scope, bool friendp)\n \t}\n       if (found)\n \t{\n-\t  if (!is_associated_namespace (scope, CP_DECL_CONTEXT (found)))\n+\t  if (!is_nested_namespace (scope, CP_DECL_CONTEXT (found), true))\n \t    goto complain;\n \t  if (DECL_HIDDEN_FRIEND_P (found))\n \t    {\n@@ -6499,6 +6521,11 @@ push_namespace (tree name, bool make_inline)\n   if (!ns)\n     {\n       ns = build_lang_decl (NAMESPACE_DECL, name, void_type_node);\n+      SCOPE_DEPTH (ns) = SCOPE_DEPTH (current_namespace) + 1;\n+      if (!SCOPE_DEPTH (ns))\n+\t/* We only allow depth 255. */\n+\tsorry (\"cannot nest more than %d namespaces\",\n+\t       SCOPE_DEPTH (current_namespace));\n       DECL_CONTEXT (ns) = FROB_CONTEXT (current_namespace);\n       new_ns = true;\n "}, {"sha": "4d0fe632093763956040c2b045a375701b8d41aa", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/322763f5df41223003720e8333c011b953bc1b4f/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/322763f5df41223003720e8333c011b953bc1b4f/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=322763f5df41223003720e8333c011b953bc1b4f", "patch": "@@ -292,6 +292,8 @@ extern void print_binding_stack\t(void);\n extern void pop_everything (void);\n extern void keep_next_level (bool);\n extern bool is_ancestor (tree ancestor, tree descendant);\n+extern bool is_nested_namespace (tree parent, tree descendant,\n+\t\t\t\t bool inline_only = false);\n extern tree push_scope (tree);\n extern void pop_scope (tree);\n extern tree push_inner_scope (tree);"}, {"sha": "cc38e819f32403f2ddb4172908d65eb313adea2c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/322763f5df41223003720e8333c011b953bc1b4f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/322763f5df41223003720e8333c011b953bc1b4f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=322763f5df41223003720e8333c011b953bc1b4f", "patch": "@@ -784,9 +784,7 @@ check_specialization_namespace (tree tmpl)\n       return false;\n     }\n \n-  if (cxx_dialect < cxx11\n-      ? is_associated_namespace (current_namespace, tpl_ns)\n-      : is_ancestor (current_namespace, tpl_ns))\n+  if (is_nested_namespace (current_namespace, tpl_ns, cxx_dialect < cxx11))\n     /* Same or enclosing namespace.  */\n     return true;\n   else\n@@ -810,7 +808,7 @@ check_explicit_instantiation_namespace (tree spec)\n   /* DR 275: An explicit instantiation shall appear in an enclosing\n      namespace of its template.  */\n   ns = decl_namespace_context (spec);\n-  if (!is_ancestor (current_namespace, ns))\n+  if (!is_nested_namespace (current_namespace, ns))\n     permerror (input_location, \"explicit instantiation of %qD in namespace %qD \"\n \t       \"(which does not enclose namespace %qD)\",\n \t       spec, current_namespace, ns);\n@@ -2594,8 +2592,8 @@ check_unqualified_spec_or_inst (tree t, location_t loc)\n {\n   tree tmpl = most_general_template (t);\n   if (DECL_NAMESPACE_SCOPE_P (tmpl)\n-      && !is_associated_namespace (current_namespace,\n-\t\t\t\t   CP_DECL_CONTEXT (tmpl)))\n+      && !is_nested_namespace (current_namespace,\n+\t\t\t       CP_DECL_CONTEXT (tmpl), true))\n     {\n       if (processing_specialization)\n \tpermerror (loc, \"explicit specialization of %qD outside its \""}]}