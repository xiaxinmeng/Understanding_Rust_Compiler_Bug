{"sha": "3f00cf18ca022961177f13399323de7b674ff515", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YwMGNmMThjYTAyMjk2MTE3N2YxMzM5OTMyM2RlN2I2NzRmZjUxNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-03-18T12:28:04Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-03-18T12:28:04Z"}, "message": "loop.texi: Remove section on the removed lambda framework.\n\n2014-03-18  Richard Biener  <rguenther@suse.de>\n\n\t* doc/loop.texi: Remove section on the removed lambda framework.\n\tUpdate loop docs with recent changes in preserving loop structure.\n\nFrom-SVN: r208645", "tree": {"sha": "084d8a1375a1e114731f98da4928004312982bac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/084d8a1375a1e114731f98da4928004312982bac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f00cf18ca022961177f13399323de7b674ff515", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f00cf18ca022961177f13399323de7b674ff515", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f00cf18ca022961177f13399323de7b674ff515", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f00cf18ca022961177f13399323de7b674ff515/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c2679d843f5b01152a8da2798a6718dfe6620791", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2679d843f5b01152a8da2798a6718dfe6620791", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2679d843f5b01152a8da2798a6718dfe6620791"}], "stats": {"total": 58, "additions": 21, "deletions": 37}, "files": [{"sha": "c4b3b0ab842300dd09164e40032c28013cf624ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f00cf18ca022961177f13399323de7b674ff515/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f00cf18ca022961177f13399323de7b674ff515/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f00cf18ca022961177f13399323de7b674ff515", "patch": "@@ -1,3 +1,8 @@\n+2014-03-18  Richard Biener  <rguenther@suse.de>\n+\n+\t* doc/loop.texi: Remove section on the removed lambda framework.\n+\tUpdate loop docs with recent changes in preserving loop structure.\n+\n 2014-03-18  Richard Biener  <rguenther@suse.de>\n \n \t* doc/lto.texi (-fresolution): Document."}, {"sha": "cf692efb902e785a0ee6b36ab52c7a64d1f853c1", "filename": "gcc/doc/loop.texi", "status": "modified", "additions": 16, "deletions": 37, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f00cf18ca022961177f13399323de7b674ff515/gcc%2Fdoc%2Floop.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f00cf18ca022961177f13399323de7b674ff515/gcc%2Fdoc%2Floop.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Floop.texi?ref=3f00cf18ca022961177f13399323de7b674ff515", "patch": "@@ -25,7 +25,6 @@ variable analysis and number of iterations analysis).\n * loop-iv::                     Induction variables on RTL.\n * Number of iterations::        Number of iterations analysis.\n * Dependency analysis::         Data dependency analysis.\n-* Lambda::                      Linear loop transformations framework.\n * Omega::                       A solver for linear programming problems.\n @end menu\n \n@@ -37,10 +36,13 @@ variable analysis and number of iterations analysis).\n This chapter describes the representation of loops in GCC, and functions\n that can be used to build, modify and analyze this representation.  Most\n of the interfaces and data structures are declared in @file{cfgloop.h}.\n-At the moment, loop structures are analyzed and this information is\n-updated only by the optimization passes that deal with loops, but some\n-efforts are being made to make it available throughout most of the\n-optimization passes.\n+Loop structures are analyzed and this information disposed or updated\n+at the discretion of individual passes.  Still most of the generic\n+CFG manipulation routines are aware of loop structures and try to\n+keep them up-to-date.  By this means an increasing part of the\n+compilation pipeline is setup to maintain loop structure across\n+passes to allow attaching meta information to individual loops\n+for consumption by later passes.\n \n In general, a natural loop has one entry block (header) and possibly\n several back edges (latches) leading to the header from the inside of\n@@ -139,16 +141,24 @@ recorded.\n These properties may also be computed/enforced later, using functions\n @code{create_preheaders}, @code{force_single_succ_latches},\n @code{mark_irreducible_loops} and @code{record_loop_exits}.\n+The properties can be queried using @code{loops_state_satisfies_p}.\n \n The memory occupied by the loops structures should be freed with\n-@code{loop_optimizer_finalize} function.\n+@code{loop_optimizer_finalize} function.  When loop structures are\n+setup to be preserved across passes this function reduces the\n+information to be kept up-to-date to a minimum (only\n+@code{LOOPS_MAY_HAVE_MULTIPLE_LATCHES} set).\n \n The CFG manipulation functions in general do not update loop structures.\n Specialized versions that additionally do so are provided for the most\n common tasks.  On GIMPLE, @code{cleanup_tree_cfg_loop} function can be\n used to cleanup CFG while updating the loops structures if\n @code{current_loops} is set.\n \n+At the moment loop structure is preserved from the start of GIMPLE\n+loop optimizations until the end of RTL loop optimizations.  During\n+this time a loop can be tracked by its @code{struct loop} and number.\n+\n @node Loop querying\n @section Loop querying\n @cindex Loop querying\n@@ -593,37 +603,6 @@ direction vectors for a data dependence relations array, and\n @code{dump_data_references} prints the details of the data references\n contained in a data reference array.\n \n-@node Lambda\n-@section Linear loop transformations framework\n-@cindex Linear loop transformations framework\n-\n-Lambda is a framework that allows transformations of loops using\n-non-singular matrix based transformations of the iteration space and\n-loop bounds. This allows compositions of skewing, scaling, interchange,\n-and reversal transformations.  These transformations are often used to\n-improve cache behavior or remove inner loop dependencies to allow\n-parallelization and vectorization to take place.\n-\n-To perform these transformations, Lambda requires that the loopnest be\n-converted into an internal form that can be matrix transformed easily.\n-To do this conversion, the function\n-@code{gcc_loopnest_to_lambda_loopnest} is provided.  If the loop cannot\n-be transformed using lambda, this function will return NULL.\n-\n-Once a @code{lambda_loopnest} is obtained from the conversion function,\n-it can be transformed by using @code{lambda_loopnest_transform}, which\n-takes a transformation matrix to apply.  Note that it is up to the\n-caller to verify that the transformation matrix is legal to apply to the\n-loop (dependence respecting, etc).  Lambda simply applies whatever\n-matrix it is told to provide.  It can be extended to make legal matrices\n-out of any non-singular matrix, but this is not currently implemented.\n-Legality of a matrix for a given loopnest can be verified using\n-@code{lambda_transform_legal_p}.\n-\n-Given a transformed loopnest, conversion back into gcc IR is done by\n-@code{lambda_loopnest_to_gcc_loopnest}.  This function will modify the\n-loops so that they match the transformed loopnest.\n-\n \n @node Omega\n @section Omega a solver for linear programming problems"}]}