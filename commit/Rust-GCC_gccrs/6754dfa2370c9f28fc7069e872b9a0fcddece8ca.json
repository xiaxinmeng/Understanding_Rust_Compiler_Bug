{"sha": "6754dfa2370c9f28fc7069e872b9a0fcddece8ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc1NGRmYTIzNzBjOWYyOGZjNzA2OWU4NzJiOWEwZmNkZGVjZThjYQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2018-04-28T07:37:04Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2018-04-28T07:37:04Z"}, "message": "re PR target/84431 (Suboptimal code for masked shifts (x86/x86-64))\n\n\tPR target/84431\n\t* config/i386/i386.md (*ashl<dwi>3_doubleword_mask): New pattern.\n\t(*ashl<dwi>3_doubleword_mask_1): Ditto.\n\t(*<shift_insn><dwi>3_doubleword_mask): Ditto.\n\t(*<shift_insn><dwi>3_doubleword_mask_1): Ditto.\n\ntestsuite/ChangeLog:\n\n\tPR target/84431\n\t* gcc.target/i386/pr84431.c: New test.\n\nFrom-SVN: r259739", "tree": {"sha": "25ff9eb3fe1a664aa508952a38bb03b0bb582259", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25ff9eb3fe1a664aa508952a38bb03b0bb582259"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6754dfa2370c9f28fc7069e872b9a0fcddece8ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6754dfa2370c9f28fc7069e872b9a0fcddece8ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6754dfa2370c9f28fc7069e872b9a0fcddece8ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6754dfa2370c9f28fc7069e872b9a0fcddece8ca/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "782e47649004a0fbc97d0a8d8817577923a5e619", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/782e47649004a0fbc97d0a8d8817577923a5e619", "html_url": "https://github.com/Rust-GCC/gccrs/commit/782e47649004a0fbc97d0a8d8817577923a5e619"}], "stats": {"total": 174, "additions": 174, "deletions": 0}, "files": [{"sha": "1433190f20916cf19ef390a7a7902470e7a4ecc0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6754dfa2370c9f28fc7069e872b9a0fcddece8ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6754dfa2370c9f28fc7069e872b9a0fcddece8ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6754dfa2370c9f28fc7069e872b9a0fcddece8ca", "patch": "@@ -1,3 +1,11 @@\n+2018-04-28  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/84431\n+\t* config/i386/i386.md (*ashl<dwi>3_doubleword_mask): New pattern.\n+\t(*ashl<dwi>3_doubleword_mask_1): Ditto.\n+\t(*<shift_insn><dwi>3_doubleword_mask): Ditto.\n+\t(*<shift_insn><dwi>3_doubleword_mask_1): Ditto.\n+\n 2018-04-28  Richard Biener  <rguenther@suse.de>\n \n \t* tree-cfg.c (verify_gimple_phi): Take a gphi * argument."}, {"sha": "d85d3467a2fb802a45159c41c8d8fbef216bef89", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6754dfa2370c9f28fc7069e872b9a0fcddece8ca/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6754dfa2370c9f28fc7069e872b9a0fcddece8ca/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=6754dfa2370c9f28fc7069e872b9a0fcddece8ca", "patch": "@@ -10357,6 +10357,77 @@\n   \"\"\n   \"ix86_expand_binary_operator (ASHIFT, <MODE>mode, operands); DONE;\")\n \n+(define_insn_and_split \"*ashl<dwi>3_doubleword_mask\"\n+  [(set (match_operand:<DWI> 0 \"register_operand\")\n+\t(ashift:<DWI>\n+\t  (match_operand:<DWI> 1 \"register_operand\")\n+\t  (subreg:QI\n+\t    (and:SI\n+\t      (match_operand:SI 2 \"register_operand\" \"c\")\n+\t      (match_operand:SI 3 \"const_int_operand\")) 0)))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"INTVAL (operands[3]) <= (<MODE_SIZE> * BITS_PER_UNIT)-1\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(parallel\n+     [(set (match_dup 6)\n+\t   (ior:DWIH (ashift:DWIH (match_dup 6) (match_dup 2))\n+\t\t     (lshiftrt:DWIH (match_dup 5)\n+\t\t       (minus:QI (match_dup 8) (match_dup 2)))))\n+      (clobber (reg:CC FLAGS_REG))])\n+   (parallel\n+     [(set (match_dup 4)\n+\t   (ashift:DWIH (match_dup 5) (match_dup 2)))\n+      (clobber (reg:CC FLAGS_REG))])]\n+{\n+  split_double_mode (<DWI>mode, &operands[0], 2, &operands[4], &operands[6]);\n+\n+  operands[8] = GEN_INT (<MODE_SIZE> * BITS_PER_UNIT);\n+\n+  if (INTVAL (operands[3]) < (<MODE_SIZE> * BITS_PER_UNIT)-1)\n+    emit_insn (gen_andsi3 (operands[2], operands[2], operands[3]));\n+\n+  operands[2] = gen_lowpart (QImode, operands[2]);\n+\n+  if (!rtx_equal_p (operands[6], operands[7]))\n+    emit_move_insn (operands[6], operands[7]);\n+})\n+\n+(define_insn_and_split \"*ashl<dwi>3_doubleword_mask_1\"\n+  [(set (match_operand:<DWI> 0 \"register_operand\")\n+\t(ashift:<DWI>\n+\t  (match_operand:<DWI> 1 \"register_operand\")\n+\t  (and:QI\n+\t    (match_operand:QI 2 \"register_operand\" \"c\")\n+\t    (match_operand:QI 3 \"const_int_operand\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"INTVAL (operands[3]) <= (<MODE_SIZE> * BITS_PER_UNIT)-1\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(parallel\n+     [(set (match_dup 6)\n+\t   (ior:DWIH (ashift:DWIH (match_dup 6) (match_dup 2))\n+\t\t     (lshiftrt:DWIH (match_dup 5)\n+\t\t       (minus:QI (match_dup 8) (match_dup 2)))))\n+      (clobber (reg:CC FLAGS_REG))])\n+   (parallel\n+     [(set (match_dup 4)\n+\t   (ashift:DWIH (match_dup 5) (match_dup 2)))\n+      (clobber (reg:CC FLAGS_REG))])]\n+{\n+  split_double_mode (<DWI>mode, &operands[0], 2, &operands[4], &operands[6]);\n+\n+  operands[8] = GEN_INT (<MODE_SIZE> * BITS_PER_UNIT);\n+\n+  if (INTVAL (operands[3]) < (<MODE_SIZE> * BITS_PER_UNIT)-1)\n+    emit_insn (gen_andqi3 (operands[2], operands[2], operands[3]));\n+\n+  if (!rtx_equal_p (operands[6], operands[7]))\n+    emit_move_insn (operands[6], operands[7]);\n+})\n+\n (define_insn \"*ashl<mode>3_doubleword\"\n   [(set (match_operand:DWI 0 \"register_operand\" \"=&r\")\n \t(ashift:DWI (match_operand:DWI 1 \"reg_or_pm1_operand\" \"0n\")\n@@ -11038,6 +11109,77 @@\n   \"\"\n   [(set_attr \"isa\" \"*,bmi2\")])\n \n+(define_insn_and_split \"*<shift_insn><dwi>3_doubleword_mask\"\n+  [(set (match_operand:<DWI> 0 \"register_operand\")\n+\t(any_shiftrt:<DWI>\n+\t  (match_operand:<DWI> 1 \"register_operand\")\n+\t  (subreg:QI\n+\t    (and:SI\n+\t      (match_operand:SI 2 \"register_operand\" \"c\")\n+\t      (match_operand:SI 3 \"const_int_operand\")) 0)))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"INTVAL (operands[3]) <= (<MODE_SIZE> * BITS_PER_UNIT)-1\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(parallel\n+     [(set (match_dup 4)\n+\t   (ior:DWIH (lshiftrt:DWIH (match_dup 4) (match_dup 2))\n+\t\t     (ashift:DWIH (match_dup 7)\n+\t\t       (minus:QI (match_dup 8) (match_dup 2)))))\n+      (clobber (reg:CC FLAGS_REG))])\n+   (parallel\n+     [(set (match_dup 6)\n+\t   (any_shiftrt:DWIH (match_dup 7) (match_dup 2)))\n+      (clobber (reg:CC FLAGS_REG))])]\n+{\n+  split_double_mode (<DWI>mode, &operands[0], 2, &operands[4], &operands[6]);\n+\n+  operands[8] = GEN_INT (<MODE_SIZE> * BITS_PER_UNIT);\n+\n+  if (INTVAL (operands[3]) < (<MODE_SIZE> * BITS_PER_UNIT)-1)\n+    emit_insn (gen_andsi3 (operands[2], operands[2], operands[3]));\n+\n+  operands[2] = gen_lowpart (QImode, operands[2]);\n+\n+  if (!rtx_equal_p (operands[4], operands[5]))\n+    emit_move_insn (operands[4], operands[5]);\n+})\n+\n+(define_insn_and_split \"*<shift_insn><dwi>3_doubleword_mask_1\"\n+  [(set (match_operand:<DWI> 0 \"register_operand\")\n+\t(any_shiftrt:<DWI>\n+\t  (match_operand:<DWI> 1 \"register_operand\")\n+\t  (and:QI\n+\t    (match_operand:QI 2 \"register_operand\" \"c\")\n+\t    (match_operand:QI 3 \"const_int_operand\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"INTVAL (operands[3]) <= (<MODE_SIZE> * BITS_PER_UNIT)-1\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(parallel\n+     [(set (match_dup 4)\n+\t   (ior:DWIH (lshiftrt:DWIH (match_dup 4) (match_dup 2))\n+\t\t     (ashift:DWIH (match_dup 7)\n+\t\t       (minus:QI (match_dup 8) (match_dup 2)))))\n+      (clobber (reg:CC FLAGS_REG))])\n+   (parallel\n+     [(set (match_dup 6)\n+\t   (any_shiftrt:DWIH (match_dup 7) (match_dup 2)))\n+      (clobber (reg:CC FLAGS_REG))])]\n+{\n+  split_double_mode (<DWI>mode, &operands[0], 2, &operands[4], &operands[6]);\n+\n+  operands[8] = GEN_INT (<MODE_SIZE> * BITS_PER_UNIT);\n+\n+  if (INTVAL (operands[3]) < (<MODE_SIZE> * BITS_PER_UNIT)-1)\n+    emit_insn (gen_andqi3 (operands[2], operands[2], operands[3]));\n+\n+  if (!rtx_equal_p (operands[4], operands[5]))\n+    emit_move_insn (operands[4], operands[5]);\n+})\n+\n (define_insn_and_split \"*<shift_insn><mode>3_doubleword\"\n   [(set (match_operand:DWI 0 \"register_operand\" \"=&r\")\n \t(any_shiftrt:DWI (match_operand:DWI 1 \"register_operand\" \"0\")"}, {"sha": "ccc4d18cccb4edde9e5b239e0f55338a36eb30dc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6754dfa2370c9f28fc7069e872b9a0fcddece8ca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6754dfa2370c9f28fc7069e872b9a0fcddece8ca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6754dfa2370c9f28fc7069e872b9a0fcddece8ca", "patch": "@@ -1,3 +1,8 @@\n+2018-04-28  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/84431\n+\t* gcc.target/i386/pr84431.c: New test.\n+\n 2018-04-27  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/85549"}, {"sha": "ee751a7af8e5bd3d22bebef56d1bdd2c47f0c584", "filename": "gcc/testsuite/gcc.target/i386/pr84431.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6754dfa2370c9f28fc7069e872b9a0fcddece8ca/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr84431.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6754dfa2370c9f28fc7069e872b9a0fcddece8ca/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr84431.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr84431.c?ref=6754dfa2370c9f28fc7069e872b9a0fcddece8ca", "patch": "@@ -0,0 +1,19 @@\n+/* PR target/84431 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#ifdef __SIZEOF_INT128__\n+typedef unsigned __int128 U;\n+typedef signed __int128 S;\n+# define M 63\n+#else\n+typedef unsigned long long U;\n+typedef signed long long S;\n+# define M 31\n+#endif\n+\n+S f1 (S a, int s) { return a >> (s & M); }\n+U f2 (U a, int s) { return a >> (s & M); }\n+U f3 (U a, int s) { return a << (s & M); }\n+\n+/* { dg-final { scan-assembler-not \"and\" } } */"}]}