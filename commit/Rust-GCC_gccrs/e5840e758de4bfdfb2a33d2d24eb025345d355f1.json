{"sha": "e5840e758de4bfdfb2a33d2d24eb025345d355f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU4NDBlNzU4ZGU0YmZkZmIyYTMzZDJkMjRlYjAyNTM0NWQzNTVmMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-12-10T14:20:18Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-12-10T14:20:18Z"}, "message": "tree-affine.c (tree_to_aff_combination): Remove unreachable MEM_REF case.\n\n2018-12-10  Richard Biener  <rguenther@suse.de>\n\n\t* tree-affine.c (tree_to_aff_combination): Remove unreachable\n\tMEM_REF case.\n\t(aff_combination_expand): Cache on SSA names, not possibly\n\ton conversion trees.  Avoid expanding cases we do not handle.\n\nFrom-SVN: r266956", "tree": {"sha": "37e2882cee9d7c6ba42310dab25555cf27b5a339", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37e2882cee9d7c6ba42310dab25555cf27b5a339"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5840e758de4bfdfb2a33d2d24eb025345d355f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5840e758de4bfdfb2a33d2d24eb025345d355f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5840e758de4bfdfb2a33d2d24eb025345d355f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5840e758de4bfdfb2a33d2d24eb025345d355f1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dee75828b49690e14b12b949d07826774a023cfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dee75828b49690e14b12b949d07826774a023cfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dee75828b49690e14b12b949d07826774a023cfd"}], "stats": {"total": 68, "additions": 38, "deletions": 30}, "files": [{"sha": "08354faef16746396e0dbb9c5942dacd9cbcc434", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5840e758de4bfdfb2a33d2d24eb025345d355f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5840e758de4bfdfb2a33d2d24eb025345d355f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e5840e758de4bfdfb2a33d2d24eb025345d355f1", "patch": "@@ -1,3 +1,10 @@\n+2018-12-10  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-affine.c (tree_to_aff_combination): Remove unreachable\n+\tMEM_REF case.\n+\t(aff_combination_expand): Cache on SSA names, not possibly\n+\ton conversion trees.  Avoid expanding cases we do not handle.\n+\n 2018-12-10  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/88427"}, {"sha": "c10cdd02b968782821c9b24a38a43a1dd541b136", "filename": "gcc/tree-affine.c", "status": "modified", "additions": 31, "deletions": 30, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5840e758de4bfdfb2a33d2d24eb025345d355f1/gcc%2Ftree-affine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5840e758de4bfdfb2a33d2d24eb025345d355f1/gcc%2Ftree-affine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-affine.c?ref=e5840e758de4bfdfb2a33d2d24eb025345d355f1", "patch": "@@ -350,25 +350,6 @@ tree_to_aff_combination (tree expr, tree type, aff_tree *comb)\n \t}\n       return;\n \n-    case MEM_REF:\n-      if (TREE_CODE (TREE_OPERAND (expr, 0)) == ADDR_EXPR)\n-\ttree_to_aff_combination (TREE_OPERAND (TREE_OPERAND (expr, 0), 0),\n-\t\t\t\t type, comb);\n-      else if (integer_zerop (TREE_OPERAND (expr, 1)))\n-\t{\n-\t  aff_combination_elt (comb, type, expr);\n-\t  return;\n-\t}\n-      else\n-\taff_combination_elt (comb, type,\n-\t\t\t     build2 (MEM_REF, TREE_TYPE (expr),\n-\t\t\t\t     TREE_OPERAND (expr, 0),\n-\t\t\t\t     build_int_cst\n-\t\t\t\t      (TREE_TYPE (TREE_OPERAND (expr, 1)), 0)));\n-      tree_to_aff_combination (TREE_OPERAND (expr, 1), sizetype, &tmp);\n-      aff_combination_add (comb, &tmp);\n-      return;\n-\n     CASE_CONVERT:\n       {\n \ttree otype = TREE_TYPE (expr);\n@@ -721,21 +702,39 @@ aff_combination_expand (aff_tree *comb ATTRIBUTE_UNUSED,\n       if (TREE_CODE_CLASS (code) == tcc_reference)\n \tcontinue;\n \n-      if (!*cache)\n-\t*cache = new hash_map<tree, name_expansion *>;\n-      name_expansion **slot = &(*cache)->get_or_insert (e);\n-      exp = *slot;\n-\n+      name_expansion **slot = NULL;\n+      if (*cache)\n+\tslot = (*cache)->get (name);\n+      exp = slot ? *slot : NULL;\n       if (!exp)\n \t{\n+\t  /* Only bother to handle cases tree_to_aff_combination will.  */\n+\t  switch (code)\n+\t    {\n+\t    case POINTER_PLUS_EXPR:\n+\t    case PLUS_EXPR:\n+\t    case MINUS_EXPR:\n+\t    case MULT_EXPR:\n+\t    case NEGATE_EXPR:\n+\t    case BIT_NOT_EXPR:\n+\t    CASE_CONVERT:\n+\t      rhs = gimple_assign_rhs_to_tree (def);\n+\t      break;\n+\t    case ADDR_EXPR:\n+\t    case INTEGER_CST:\n+\t    case POLY_INT_CST:\n+\t      rhs = gimple_assign_rhs1 (def);\n+\t      break;\n+\t    default:\n+\t      continue;\n+\t    }\n+\t  tree_to_aff_combination (rhs, TREE_TYPE (name), &current);\n \t  exp = XNEW (struct name_expansion);\n \t  exp->in_progress = 1;\n-\t  *slot = exp;\n-\t  rhs = gimple_assign_rhs_to_tree (def);\n-\t  if (e != name)\n-\t    rhs = fold_convert (type, rhs);\n-\n-\t  tree_to_aff_combination_expand (rhs, comb->type, &current, cache);\n+\t  if (!*cache)\n+\t    *cache = new hash_map<tree, name_expansion *>;\n+\t  (*cache)->put (name, exp);\n+\t  aff_combination_expand (&current, cache);\n \t  exp->expansion = current;\n \t  exp->in_progress = 0;\n \t}\n@@ -746,6 +745,8 @@ aff_combination_expand (aff_tree *comb ATTRIBUTE_UNUSED,\n \t  gcc_assert (!exp->in_progress);\n \t  current = exp->expansion;\n \t}\n+      if (!useless_type_conversion_p (comb->type, current.type))\n+\taff_combination_convert (&current, comb->type);\n \n       /* Accumulate the new terms to TO_ADD, so that we do not modify\n \t COMB while traversing it; include the term -coef * E, to remove"}]}