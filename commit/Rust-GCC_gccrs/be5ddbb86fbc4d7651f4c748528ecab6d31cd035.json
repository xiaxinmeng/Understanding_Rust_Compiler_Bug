{"sha": "be5ddbb86fbc4d7651f4c748528ecab6d31cd035", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU1ZGRiYjg2ZmJjNGQ3NjUxZjRjNzQ4NTI4ZWNhYjZkMzFjZDAzNQ==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2016-12-01T14:48:49Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2016-12-01T14:48:49Z"}, "message": "Import libcilkrts Build 4467 (PR target/68945)\n\n\tPR target/68945\n\tMerge from upstream, version 2.0.4467.0.\n\tFix typo in git URL.\n\t* aclocal.m4, configure, Makefile.in: Regenerate.\n\nFrom-SVN: r243112", "tree": {"sha": "83c3b77cae05a0c182a00cf464001b9a46b07c78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83c3b77cae05a0c182a00cf464001b9a46b07c78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be5ddbb86fbc4d7651f4c748528ecab6d31cd035", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be5ddbb86fbc4d7651f4c748528ecab6d31cd035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be5ddbb86fbc4d7651f4c748528ecab6d31cd035", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "67586d38f5b1858fba96973e9341f7d65f64ea9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67586d38f5b1858fba96973e9341f7d65f64ea9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67586d38f5b1858fba96973e9341f7d65f64ea9c"}], "stats": {"total": 598, "additions": 530, "deletions": 68}, "files": [{"sha": "443f0a2e2a903afe45de577da292e329a88cc924", "filename": "libcilkrts/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2FChangeLog?ref=be5ddbb86fbc4d7651f4c748528ecab6d31cd035", "patch": "@@ -1,3 +1,10 @@\n+2016-12-01  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\tPR target/68945\n+\tMerge from upstream, version 2.0.4467.0.\n+\tFix typo in git URL.\n+\t* aclocal.m4, configure, Makefile.in: Regenerate.\n+\n 2016-11-15  Matthias Klose  <doko@ubuntu.com>\n \n \t* configure: Regenerate."}, {"sha": "1dec6aa25a16e0e9f8ea38c46a8ad18e95a12390", "filename": "libcilkrts/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2FMakefile.am?ref=be5ddbb86fbc4d7651f4c748528ecab6d31cd035", "patch": "@@ -54,7 +54,7 @@ GENERAL_FLAGS = -I$(top_srcdir)/include -I$(top_srcdir)/runtime -I$(top_srcdir)/\n # Enable Intel Cilk Plus extension\n GENERAL_FLAGS += -fcilkplus\n \n-# Always generate unwind tables\n+#Always generate unwind tables\n GENERAL_FLAGS += -funwind-tables\n \n AM_CFLAGS = $(XCFLAGS) $(GENERAL_FLAGS) -std=c99"}, {"sha": "6520b16012c18b24166e1555cdf8d534617bba9a", "filename": "libcilkrts/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2FMakefile.in?ref=be5ddbb86fbc4d7651f4c748528ecab6d31cd035", "patch": "@@ -396,7 +396,7 @@ ACLOCAL_AMFLAGS = -I .. -I ../config\n \n # Enable Intel Cilk Plus extension\n \n-# Always generate unwind tables\n+#Always generate unwind tables\n GENERAL_FLAGS = -I$(top_srcdir)/include -I$(top_srcdir)/runtime \\\n \t-I$(top_srcdir)/runtime/config/$(config_dir) \\\n \t-I$(top_srcdir)/runtime/sslib -DIN_CILK_RUNTIME=1 -fcilkplus \\\n@@ -455,7 +455,7 @@ libcilkrts_la_SOURCES = \\\n   runtime/sysdep-unix.c            \\\n   runtime/worker_mutex.c\n \n-CILK_REVISION = 4420\n+CILK_REVISION = 4467\n \n # Load the $(REVISION) value.\n "}, {"sha": "54f8b0442947699eb6a2f82b8047841f690fa86b", "filename": "libcilkrts/README", "status": "modified", "additions": 89, "deletions": 15, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2FREADME?ref=be5ddbb86fbc4d7651f4c748528ecab6d31cd035", "patch": "@@ -1,14 +1,16 @@\n-Intel(R) Cilk(TM) Plus runtime library\n+Intel(R) Cilk(TM) Plus Runtime Library\n \n Index:\n-1. BUILDING\n-2. USING\n-3. DOXYGEN DOCUMENTATION\n-4. QUESTIONS OR BUGS\n-5. CONTRIBUTIONS\n+1. BUILDING WITH AUTOMAKE\n+2. BUILDING WITH CMAKE\n+3. INSTALLING TO VXWORKS\n+4. USING\n+5. DOXYGEN DOCUMENTATION\n+6. QUESTIONS OR BUGS\n+7. CONTRIBUTIONS\n \n #\n-#  1. BUILDING:\n+#  1. BUILDING WITH AUTOMAKE:\n #\n \n To distribute applications that use the Intel Cilk Plus language\n@@ -40,22 +42,87 @@ configure script:\n \n % ./configure --prefix=/your/path/to/lib\n \n-It is also possible to use CMake if the above method does not apply\n-well in your environment. Instruction is available in CMakeLists.txt.\n+#\n+#  2. BUILDING WITH CMAKE:\n+#\n+\n+To distribute applications that use the Intel Cilk Plus language\n+extensions to non-development systems, you need to build the Intel\n+Cilk Plus runtime library and distribute it with your application.\n+This instruction describes the build process using CMake*, which\n+supports Linux*, Windows*, and OS X*.  It is fine to use this process\n+to build a Linux library, but it is highly recommended to use the\n+more mature build process described above when building on Linux.\n+\n+You need the CMake tool and a C/C++ compiler that supports the Intel\n+Cilk Plus language extensions, and the requirements for each operating\n+systems are:\n+\n+Common:\n+    CMake 3.0.0 or later\n+    Make tools such as make (Linux, OS X) or nmake (Windows)\n+Linux:\n+    GCC* 4.9.2 or later, or Intel(R) C++ Compiler v12.1 or later\n+Windows:\n+    Intel C++ Compiler v12.1 or later\n+    Visual Studio* 2010 or later\n+OS X:\n+    Cilk-enabled branch of Clang*/LLVM* (http://cilkplus.github.io),\n+    or Intel C++ Compiler v12.1 or later\n+\n+The common steps to build the libraries are 1) invoke cmake with\n+appropriate options, 2) invoke a make tool available on the system.\n+The following examples show build processes on OS X and Windows.\n+\n+OS X:\n+    % mkdir ./build && cd ./build\n+    % cmake -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ \\\n+            -DCMAKE_INSTALL_PREFIX=./install ..\n+    % make && make install\n+\n+Windows:\n+    % mkdir .\\build && cd .\\build\n+    % cmake -G \"NMake Makefiles\" -DCMAKE_C_COMPILER=icl \\\n+            -DCMAKE_CXX_COMPILER=icl -DCMAKE_INSTALL_PREFIX=.\\install ..\n+    % nmake && nmake install\n+\n+#\n+#  3. INSTALLING TO VXWORKS OS\n+#\n+\n+For Windows host, run VxWorks_Install.bat.\n+For Linux host, run VxWorks_Install.sh.\n+\n+You may need to give environment variable WIND_BASE to indicate VxWorks\n+installation path.\n+\n+Create a VSB project, and you will see a layer named \"CILKPLUS_KERNEL\".\n+Enable it and build the project.\n+\n+Create a VIP project with ICC and add component INCLUDE_CILKPLUS, then you\n+will get support of Intel Cilk Plus features in VxWorks.\n \n #\n-#  2. USING:\n+#  4. USING:\n #\n \n The Intel(R) C++ Compiler will automatically try to bring in the\n Intel Cilk Plus runtime in any program that uses the relevant\n-features.  GCC requires explicit linking of both the library and\n-its dependencies (libpthread, libdl).  For example:\n+features.  GCC and Clang requires an explicit compiler option,\n+-fcilkplus, to enable Intel Cilk Plus language extensions.\n+For example,\n+\n+% gcc -fcilkplus -o foo.exe foo.c\n+% clang -fcilkplus -o foo.exe foo.c \n+\n+Older GCC versions (e.g., 4.8 cilkplus branch) requires explicit linking\n+of both the library and its dependencies (libpthread, libdl).\n+For example:\n \n % gcc foo.c -lcilkrts -lpthread -ldl\n \n #\n-#  3. DOXYGEN DOCUMENTATION:\n+#  5. DOXYGEN DOCUMENTATION:\n #\n \n The library source has Doxygen markup.  Generate HTML documentation\n@@ -64,15 +131,15 @@ based on the markup by changing directory into runtime and running:\n % doxygen doxygen.cfg\n \n #\n-#  4. QUESTIONS OR BUGS:\n+#  6. QUESTIONS OR BUGS:\n #\n \n Issues with the Intel Cilk Plus runtime can be addressed in the Intel\n Cilk Plus forums:\n http://software.intel.com/en-us/forums/intel-cilk-plus/\n \n #\n-#  5. CONTRIBUTIONS:\n+#  7. CONTRIBUTIONS:\n #\n \n The Intel Cilk Plus runtime library is dual licensed. The upstream copy\n@@ -85,6 +152,13 @@ contributed to the upstream version via http://cilkplus.org/.\n Thanks to Tobias Burnus for showing us the magic to make gcc and g++\n automatically include the Cilk Plus runtime.\n \n+Thanks to Eric Olson for sharing his patch for Raspberry Pi* with us.\n+\n+Thanks to Rainer Orth for submitting patches for exception handling and\n+enabling Cilk Plus on the SPARC* architecture.\n+\n ------------------------\n Intel and Cilk are trademarks of Intel Corporation in the U.S. and/or\n other countries.\n+\n+*Other names and brands may be claimed as the property of others."}, {"sha": "ecf88eee2a9bec9ca3fe6dfe69d1e9c03f2d2edc", "filename": "libcilkrts/configure", "status": "modified", "additions": 51, "deletions": 7, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fconfigure?ref=be5ddbb86fbc4d7651f4c748528ecab6d31cd035", "patch": "@@ -5676,6 +5676,50 @@ _ACEOF\n fi\n \n \n+# Check for dl functions\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for dladdr in -ldl\" >&5\n+$as_echo_n \"checking for dladdr in -ldl... \" >&6; }\n+if test \"${ac_cv_lib_dl_dladdr+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-ldl  $LIBS\"\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+char dladdr ();\n+int\n+main ()\n+{\n+return dladdr ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  ac_cv_lib_dl_dladdr=yes\n+else\n+  ac_cv_lib_dl_dladdr=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_dl_dladdr\" >&5\n+$as_echo \"$ac_cv_lib_dl_dladdr\" >&6; }\n+if test \"x$ac_cv_lib_dl_dladdr\" = x\"\"yes; then :\n+\n+$as_echo \"#define HAVE_DLADDR 1\" >>confdefs.h\n+\n+fi\n+\n+\n # Check whether the target supports protected visibility.\n save_CFLAGS=\"$CFLAGS\"\n CFLAGS=\"$CFLAGS -Werror\"\n@@ -5766,18 +5810,18 @@ esac\n # contains information on what's needed\n case \"${target}\" in\n \n-  x86_64-*-*)\n-    config_dir=\"x86\"\n-    ;;\n-\n-  i?86-*-*)\n+  i?86-*-* | x86_64-*-*)\n     config_dir=\"x86\"\n     ;;\n \n   arm-*-*)\n     config_dir=\"arm\"\n     ;;\n \n+  sparc*-*-*)\n+    config_dir=\"sparc\"\n+    ;;\n+\n   *)\n     config_dir=\"generic\"\n     ;;\n@@ -11893,7 +11937,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11896 \"configure\"\n+#line 11940 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11999,7 +12043,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12002 \"configure\"\n+#line 12046 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "8270e0b8bd9d025c50e3fac2209ca4aa76da4614", "filename": "libcilkrts/configure.ac", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fconfigure.ac?ref=be5ddbb86fbc4d7651f4c748528ecab6d31cd035", "patch": "@@ -69,6 +69,10 @@ AC_PROG_CXX\n AC_CONFIG_FILES([Makefile libcilkrts.spec])\n AC_FUNC_ALLOCA\n \n+# Check for dl functions\n+AC_CHECK_LIB(dl, dladdr,\n+             [AC_DEFINE(HAVE_DLADDR, 1, [Define if you have dladdr()])])\n+\n # Check whether the target supports protected visibility.\n save_CFLAGS=\"$CFLAGS\"\n CFLAGS=\"$CFLAGS -Werror\"\n@@ -141,18 +145,18 @@ esac\n # contains information on what's needed\n case \"${target}\" in\n \n-  x86_64-*-*)\n-    config_dir=\"x86\"\n-    ;;\n-\n-  i?86-*-*)\n+  i?86-*-* | x86_64-*-*)\n     config_dir=\"x86\"\n     ;;\n \n   arm-*-*)\n     config_dir=\"arm\"\n     ;;\n \n+  sparc*-*-*)\n+    config_dir=\"sparc\"\n+    ;;\n+\n   *)\n     config_dir=\"generic\"\n     ;;"}, {"sha": "71f69b0840a3aedabe12a1867ab7ac825ae5b0c2", "filename": "libcilkrts/configure.tgt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fconfigure.tgt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fconfigure.tgt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fconfigure.tgt?ref=be5ddbb86fbc4d7651f4c748528ecab6d31cd035", "patch": "@@ -44,12 +44,12 @@\n \n # Disable Cilk Runtime library for unsupported architectures.\n case \"${target}\" in\n-  x86_64-*-*)\n-    ;;\n-  i?86-*-*)\n+  i?86-*-* | x86_64-*-*)\n     ;;\n   arm-*-*)\n     ;;\n+  sparc*-*-*)\n+    ;;\n   *-*-*)\n     UNSUPPORTED=1\n     ;;"}, {"sha": "71a51ec52d6b4a89b19382eec7fa7248db91360e", "filename": "libcilkrts/include/cilk/cilk_undocumented.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Finclude%2Fcilk%2Fcilk_undocumented.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Finclude%2Fcilk%2Fcilk_undocumented.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Finclude%2Fcilk%2Fcilk_undocumented.h?ref=be5ddbb86fbc4d7651f4c748528ecab6d31cd035", "patch": "@@ -106,9 +106,6 @@ size_t __cilkrts_get_stack_size(void);\n CILK_EXPORT __CILKRTS_NOTHROW\n void __cilkrts_dump_stats(void);\n \n-CILK_EXPORT __CILKRTS_NOTHROW\n-int __cilkrts_irml_version(void);\n-\n struct __cilk_tbb_unwatch_thunk;\n struct __cilk_tbb_stack_op_thunk;\n "}, {"sha": "c997b026f9d1b653f1fd484915422a3e0a0e9811", "filename": "libcilkrts/include/internal/cilk_version.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Finclude%2Finternal%2Fcilk_version.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Finclude%2Finternal%2Fcilk_version.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Finclude%2Finternal%2Fcilk_version.h?ref=be5ddbb86fbc4d7651f4c748528ecab6d31cd035", "patch": "@@ -49,10 +49,10 @@\n \n #define VERSION_MAJOR 2\n #define VERSION_MINOR 0\n-#define VERSION_BUILD 4420\n+#define VERSION_BUILD 4467\n #define VERSION_REV 0\n-#define VERSION_STRING \"2,0,4420,0\"\n-#define VERSION_HASH \"3b2d6aa9059c\"\n+#define VERSION_STRING \"2,0,4467,0\"\n+#define VERSION_HASH \"b7e54d87bd17\"\n #define VERSION_BRANCH \"eng\"\n-#define TBB_REV_NUMBER \"14788\"\n-#define VERSION_YEAR \"2015\"\n+#define TBB_REV_NUMBER \"\"\n+#define VERSION_YEAR \"2016\""}, {"sha": "cd78865739b5f03bae252186653ef62334f99bff", "filename": "libcilkrts/include/internal/rev.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Finclude%2Finternal%2Frev.mk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Finclude%2Finternal%2Frev.mk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Finclude%2Finternal%2Frev.mk?ref=be5ddbb86fbc4d7651f4c748528ecab6d31cd035", "patch": "@@ -49,4 +49,4 @@\n #\n # It was automatically generated by cilkrts/include/internal/Makefile\n \n-CILK_REVISION = 4420\n+CILK_REVISION = 4467"}, {"sha": "8487873f00e1b0882b97762e16401785b9968bbd", "filename": "libcilkrts/runtime/cilk-abi.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Fcilk-abi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Fcilk-abi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fcilk-abi.c?ref=be5ddbb86fbc4d7651f4c748528ecab6d31cd035", "patch": "@@ -709,7 +709,6 @@ __cilkrts_watch_stack(__cilk_tbb_unwatch_thunk *u,\n     return 0;   /* Success! */\n }\n \n-\n // This function must be called only within a continuation, within the stack\n // frame of the continuation itself.\n CILK_API_INT __cilkrts_synched(void)"}, {"sha": "c38c49f553846b2ae482bce97e0bba9607c5b770", "filename": "libcilkrts/runtime/cilk_fiber-unix.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Fcilk_fiber-unix.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Fcilk_fiber-unix.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fcilk_fiber-unix.cpp?ref=be5ddbb86fbc4d7651f4c748528ecab6d31cd035", "patch": "@@ -220,7 +220,7 @@ NORETURN cilk_fiber_sysdep::run()\n         // enough extra space from the top of the stack we are\n         // switching to for any temporaries required for this run()\n         // function.\n-        JMPBUF_SP(m_resume_jmpbuf) = m_stack_base - frame_size;\n+        JMPBUF_SP(m_resume_jmpbuf) = CILK_ADJUST_SP(m_stack_base - frame_size);\n \n         // GCC doesn't allow us to call __builtin_longjmp in the same function\n         // that calls __builtin_setjmp, so it's been moved into it's own"}, {"sha": "43057f22a155d43f2223a606e4629d524c9616b4", "filename": "libcilkrts/runtime/cilk_fiber.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Fcilk_fiber.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Fcilk_fiber.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fcilk_fiber.h?ref=be5ddbb86fbc4d7651f4c748528ecab6d31cd035", "patch": "@@ -73,9 +73,12 @@\n  *\n  * A value of 0 means no debugging.\n  * Higher values generate more debugging output.\n+ *\n  */\n-#define FIBER_DEBUG 0\n \n+#ifndef FIBER_DEBUG\n+#define FIBER_DEBUG 0\n+#endif\n /**\n  * @brief Flag for validating reference counts.\n  * "}, {"sha": "779a2dc04858572bb53efd9b62c3df036f2f3a23", "filename": "libcilkrts/runtime/config/arm/os-fence.h", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Fconfig%2Farm%2Fos-fence.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Fconfig%2Farm%2Fos-fence.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fconfig%2Farm%2Fos-fence.h?ref=be5ddbb86fbc4d7651f4c748528ecab6d31cd035", "patch": "@@ -47,6 +47,14 @@\n  *  for your assistance in helping us improve Cilk Plus.\n  **************************************************************************/\n \n+// __atomic_* intrinsics are available since GCC 4.7.\n+#define HAVE_ATOMIC_INTRINSICS defined(__GNUC__) && \\\n+                               (__GNUC__ * 10 + __GNUC_MINOR__ >= 47)\n+\n+// GCC before 4.4 does not implement __sync_synchronize properly\n+#define HAVE_SYNC_INTRINSICS defined(__GNUC__) && \\\n+                             (__GNUC__ * 10 + __GNUC_MINOR__ >= 44)\n+\n /*\n  * void __cilkrts_fence(void)\n  *\n@@ -60,5 +68,12 @@\n  * the CPUID instruction).\n  */\n \n-// COMMON_SYSDEP void __cilkrts_fence(void); ///< MFENCE instruction\n-# define __cilkrts_fence() __asm__ __volatile__ (\"mcr   p15,0,%[t],c7,c10,4\\n\" :: [t] \"r\" (0) : \"memory\");\n+#if HAVE_ATOMIC_INTRINSICS\n+#   define __cilkrts_fence() __atomic_thread_fence(__ATOMIC_SEQ_CST)\n+#elif HAVE_SYNC_INTRINSICS\n+#   define __cilkrts_fence() __sync_synchronize()\n+#else\n+#   define __cilkrts_fence()\n+// Leaving this code just in case.\n+//# define __cilkrts_fence() __asm__ __volatile__ (\"mcr   p15,0,%[t],c7,c10,4\\n\" :: [t] \"r\" (0) : \"memory\");\n+#endif"}, {"sha": "cf88d997046f6a5d2d6ef08ef359fdcf56615834", "filename": "libcilkrts/runtime/config/sparc/cilk-abi-vla.c", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Fconfig%2Fsparc%2Fcilk-abi-vla.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Fconfig%2Fsparc%2Fcilk-abi-vla.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fconfig%2Fsparc%2Fcilk-abi-vla.c?ref=be5ddbb86fbc4d7651f4c748528ecab6d31cd035", "patch": "@@ -0,0 +1,115 @@\n+/* cilk-abi-vla.cpp                  -*-C++-*-\n+ *\n+ *************************************************************************\n+ *\n+ *  Copyright (C) 2013-2016, Intel Corporation\n+ *  All rights reserved.\n+ *  \n+ *  Redistribution and use in source and binary forms, with or without\n+ *  modification, are permitted provided that the following conditions\n+ *  are met:\n+ *  \n+ *    * Redistributions of source code must retain the above copyright\n+ *      notice, this list of conditions and the following disclaimer.\n+ *    * Redistributions in binary form must reproduce the above copyright\n+ *      notice, this list of conditions and the following disclaimer in\n+ *      the documentation and/or other materials provided with the\n+ *      distribution.\n+ *    * Neither the name of Intel Corporation nor the names of its\n+ *      contributors may be used to endorse or promote products derived\n+ *      from this software without specific prior written permission.\n+ *  \n+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+ *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+ *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+ *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+ *  HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n+ *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS\n+ *  OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED\n+ *  AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n+ *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n+ *\n+ **************************************************************************/\n+\n+/*\n+ * Implementation of Variable Length Array (VLA) ABI.\n+ *\n+ * The compiler calls these functions to allocate Variable Length Arrays\n+ * at runtime.  The compiler must guarantee that __cilkrts_stack_free() is\n+ * called to cleanup any memory allocated by __cilkrts_stack_alloc().\n+ *\n+ * This generic implementation always allocates the memory from the heap.\n+ * Optimally, the implementation should expand the frame of the calling\n+ * function if possible, since that will be faster.  See the x86 version\n+ * for one possible implementation.\n+ */\n+\n+#include <assert.h>\n+#include <stdlib.h>\n+#include <stdint.h>\n+\n+#include \"internal/abi.h\"\n+#include \"cilk-abi-vla-internal.h\"\n+\n+// Allocate space for a variable length array\n+CILK_ABI(__cilkrts_void_ptr)\n+__cilkrts_stack_alloc(\n+    __cilkrts_stack_frame *sf,\n+    size_t size,\n+    size_t distance_from_sp_to_alloca_area,\n+    uint32_t align,     // align is always >= minimum stack alignment and\n+                        // >= ptr_size as well, and must be a power of 2.\n+    uint32_t needs_tag  // non-zero if the pointer being returned needs to\n+                        // be tagged\n+)\n+{\n+    // full_size will be a multiple of align, and contains\n+    // enough extra space to allocate a marker.\n+    size_t full_size = (size + align - 1) & ~(align - 1);\n+\n+    // Allocate memory from the heap.  The compiler is responsible\n+    // for guaranteeing us a chance to free it before the function\n+    // exits\n+\n+    return (void *)vla_internal_heap_alloc(sf, full_size, align);\n+}\n+\n+// Free the space allocated for a variable length array.\n+CILK_ABI(void)\n+__cilkrts_stack_free(\n+    __cilkrts_stack_frame *sf,\n+    void *p,\n+    size_t size,\n+    size_t distance_from_sp_to_alloca_area,\n+    uint32_t align, // same requirements as for align in allocation,\n+                    // and must match alignment that was passed when\n+                    // doing the allocation \n+    uint32_t known_from_stack  // non-zero if this is known to be allocated\n+                               // on the stack, and therefore has no tag\n+)\n+{\n+    // full_size will be a multiple of align, and contains\n+    // enough extra space to allocate a marker if one was needed.\n+    size_t full_size = (size + align - 1) & ~(align - 1);\n+\n+    // Just free the allocated memory to the heap since we don't know\n+    // how to expand/contract the calling frame\n+    vla_internal_heap_free(p, full_size);\n+}"}, {"sha": "24e7993e453adbec8fd713d63c4329b055f6085c", "filename": "libcilkrts/runtime/config/sparc/os-fence.h", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Fconfig%2Fsparc%2Fos-fence.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Fconfig%2Fsparc%2Fos-fence.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fconfig%2Fsparc%2Fos-fence.h?ref=be5ddbb86fbc4d7651f4c748528ecab6d31cd035", "patch": "@@ -0,0 +1,64 @@\n+/* os.h                  -*-C++-*-\n+ *\n+ *************************************************************************\n+ *\n+ *  Copyright (C) 2009-2016, Intel Corporation\n+ *  All rights reserved.\n+ *  \n+ *  Redistribution and use in source and binary forms, with or without\n+ *  modification, are permitted provided that the following conditions\n+ *  are met:\n+ *  \n+ *    * Redistributions of source code must retain the above copyright\n+ *      notice, this list of conditions and the following disclaimer.\n+ *    * Redistributions in binary form must reproduce the above copyright\n+ *      notice, this list of conditions and the following disclaimer in\n+ *      the documentation and/or other materials provided with the\n+ *      distribution.\n+ *    * Neither the name of Intel Corporation nor the names of its\n+ *      contributors may be used to endorse or promote products derived\n+ *      from this software without specific prior written permission.\n+ *  \n+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+ *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+ *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+ *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+ *  HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n+ *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS\n+ *  OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED\n+ *  AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n+ *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n+ **************************************************************************/\n+\n+// GCC before 4.4 does not implement __sync_synchronize properly\n+#define HAVE_SYNC_INTRINSICS defined(__GNUC__) && \\\n+                             (__GNUC__ * 10 + __GNUC_MINOR__ >= 44)\n+\n+/*\n+ * void __cilkrts_fence(void)\n+ */\n+\n+#if HAVE_SYNC_INTRINSICS\n+#   define __cilkrts_fence() __sync_synchronize()\n+#elif defined(__GNUC__)\n+#   define __cilkrts_fence() __asm__ volatile (\"membar #StoreLoad\" ::: \"memory\")\n+#else\n+COMMON_SYSDEP void __cilkrts_fence(void);\n+#endif"}, {"sha": "997e9f6892f31a40cf1969fcafebf27f39ebc5cc", "filename": "libcilkrts/runtime/config/sparc/os-unix-sysdep.c", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Fconfig%2Fsparc%2Fos-unix-sysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Fconfig%2Fsparc%2Fos-unix-sysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fconfig%2Fsparc%2Fos-unix-sysdep.c?ref=be5ddbb86fbc4d7651f4c748528ecab6d31cd035", "patch": "@@ -0,0 +1,115 @@\n+/* os-unix-sysdep.c                  -*-C-*-\n+ *\n+ *************************************************************************\n+ *\n+ *  Copyright (C) 2009-2016, Intel Corporation\n+ *  All rights reserved.\n+ *  \n+ *  Redistribution and use in source and binary forms, with or without\n+ *  modification, are permitted provided that the following conditions\n+ *  are met:\n+ *  \n+ *    * Redistributions of source code must retain the above copyright\n+ *      notice, this list of conditions and the following disclaimer.\n+ *    * Redistributions in binary form must reproduce the above copyright\n+ *      notice, this list of conditions and the following disclaimer in\n+ *      the documentation and/or other materials provided with the\n+ *      distribution.\n+ *    * Neither the name of Intel Corporation nor the names of its\n+ *      contributors may be used to endorse or promote products derived\n+ *      from this software without specific prior written permission.\n+ *  \n+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+ *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+ *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+ *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+ *  HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n+ *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS\n+ *  OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED\n+ *  AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n+ *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ *  POSSIBILITY OF SUCH DAMAGE.\n+ *  \n+ *  *********************************************************************\n+ *  \n+ *  PLEASE NOTE: This file is a downstream copy of a file mainitained in\n+ *  a repository at cilkplus.org. Changes made to this file that are not\n+ *  submitted through the contribution process detailed at\n+ *  http://www.cilkplus.org/submit-cilk-contribution will be lost the next\n+ *  time that a new version is released. Changes only submitted to the\n+ *  GNU compiler collection or posted to the git repository at\n+ *  https://bitbucket.org/intelcilkruntime/intel-cilk-runtime.git are\n+ *  not tracked.\n+ *  \n+ *  We welcome your contributions to this open source project. Thank you\n+ *  for your assistance in helping us improve Cilk Plus.\n+ *************************************************************************\n+ *\n+ * This file contains system-specific code for sparc-based systems\n+ */\n+\n+#include \"os.h\"\n+#include \"sysdep.h\"\n+\n+/*\n+ * The cycle counter is used for debugging.  This function is only called if\n+ * CILK_PROFILE is defined when the runtime is built.\n+ */\n+COMMON_SYSDEP unsigned long long __cilkrts_getticks(void)\n+{\n+    unsigned long long tick;\n+#ifdef __sparcv9\n+    __asm__ volatile(\"rd %%tick, %0\" : \"=r\"(tick));\n+#else\n+    __asm__ volatile(\"rd %%tick, %L0\\n\"\n+                     \"srlx %L0, 32, %H0\"\n+                     : \"=r\"(tick));\n+#endif\n+    return tick;\n+}\n+\n+/*\n+ * A \"short pause\" - called from the Cilk runtime's spinloops.\n+ */\n+COMMON_SYSDEP void __cilkrts_short_pause(void)\n+{\n+    /* Spin around for 8 cycles.  */\n+    __asm__ volatile(\"rd %ccr, %g0\");\n+    __asm__ volatile(\"rd %ccr, %g0\");\n+    __asm__ volatile(\"rd %ccr, %g0\");\n+    __asm__ volatile(\"rd %ccr, %g0\");\n+}\n+\n+/*\n+ * Interlocked exchange - used to implement the Cilk runtime's spinloops\n+ */\n+COMMON_SYSDEP int __cilkrts_xchg(volatile int *ptr, int x)\n+{\n+    x = __sync_lock_test_and_set(ptr, x);\n+    return x;\n+}\n+\n+\n+/*\n+ * Restore the floating point state that is stored in a stack frame at each\n+ * spawn.  This should be called each time a frame is resumed.\n+ *\n+ * Only valid for IA32 and Intel64 processors.\n+ */\n+void restore_x86_fp_state (__cilkrts_stack_frame *sf)\n+{\n+}\n+\n+\n+/*\n+ * Save the floating point state to the __cilkrts_stack_frame at each spawn.\n+ *\n+ * Architecture-specific - Should only be needed on IA32 and Intel64\n+ * processors.\n+ */\n+void sysdep_save_fp_ctrl_state(__cilkrts_stack_frame *sf)\n+{\n+}\n+"}, {"sha": "7fc6e6b79b0250828575e81d18ad6c6c228bbb88", "filename": "libcilkrts/runtime/except-gcc.cpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Fexcept-gcc.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Fexcept-gcc.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fexcept-gcc.cpp?ref=be5ddbb86fbc4d7651f4c748528ecab6d31cd035", "patch": "@@ -60,7 +60,9 @@\n #include <stdint.h>\n #include <typeinfo>\n \n+#ifndef DEBUG_EXCEPTIONS\n #define DEBUG_EXCEPTIONS 0\n+#endif\n \n struct pending_exception_info\n {"}, {"sha": "6c77b5f766af0b45ed67dac628fc74504613a91e", "filename": "libcilkrts/runtime/global_state.cpp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Fglobal_state.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Fglobal_state.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fglobal_state.cpp?ref=be5ddbb86fbc4d7651f4c748528ecab6d31cd035", "patch": "@@ -579,7 +579,6 @@ global_state_t* cilkg_init_global_state()\n     g->stack_size = cilkos_validate_stack_size(g->stack_size);\n     g->failure_to_allocate_stack = 0;\n \n-\n     return g;\n }\n "}, {"sha": "f5937b89c7b6b97618e457d203670f5e766e2e8d", "filename": "libcilkrts/runtime/global_state.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Fglobal_state.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Fglobal_state.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fglobal_state.h?ref=be5ddbb86fbc4d7651f4c748528ecab6d31cd035", "patch": "@@ -215,7 +215,6 @@ struct global_state_t { /* COMMON_PORTABLE */\n     /// Global fiber pool\n     cilk_fiber_pool fiber_pool;\n \n-\n     /**\n      * @brief Track whether the runtime has failed to allocate a\n      * stack."}, {"sha": "9ae2fd24bd3d266ef045e50d7374bb5bc08ca0ff", "filename": "libcilkrts/runtime/jmpbuf.h", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Fjmpbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Fjmpbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fjmpbuf.h?ref=be5ddbb86fbc4d7651f4c748528ecab6d31cd035", "patch": "@@ -107,6 +107,18 @@\n  */\n #define SP(SF) JMPBUF_SP((SF)->ctx)\n \n+/**\n+ * @brief Some architecture-dependent stack adjustment.\n+ */\n+#if defined(__sparcv9)\n+    // Subtract sparc v9 stack bias so the actual stack starts at the\n+    // allocated area.\n+#   define CILK_ADJUST_SP(SP) ((SP) - 2047)\n+#   define CILK_UNADJUST_SP(SP) ((SP) + 2047)\n+#else\n+#   define CILK_ADJUST_SP(SP) (SP)\n+#   define CILK_UNADJUST_SP(SP) (SP)\n+#endif\n \n __CILKRTS_BEGIN_EXTERN_C\n \n@@ -120,7 +132,7 @@ __CILKRTS_BEGIN_EXTERN_C\n  */\n inline char *__cilkrts_get_sp(__cilkrts_stack_frame *sf)\n {\n-    return (char *)SP(sf);\n+    return (char *)CILK_UNADJUST_SP(SP(sf));\n }\n \n /**"}, {"sha": "57b4e8a08a9c6a7753ccaf3cd054c326de41d459", "filename": "libcilkrts/runtime/linux-symbols.ver", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Flinux-symbols.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Flinux-symbols.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Flinux-symbols.ver?ref=be5ddbb86fbc4d7651f4c748528ecab6d31cd035", "patch": "@@ -71,7 +71,6 @@ CILKABI0\n     __cilkrts_hyperobject_dealloc;\n     __cilkrts_hyperobject_noop_destroy;\n     __cilkrts_init;\n-    __cilkrts_irml_version;\n     __cilkrts_leave_frame;\n     __cilkrts_metacall;\n     __cilkrts_rethrow;"}, {"sha": "9b286853d0318a5162b7c54e34060352063069f3", "filename": "libcilkrts/runtime/local_state.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Flocal_state.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Flocal_state.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Flocal_state.h?ref=be5ddbb86fbc4d7651f4c748528ecab6d31cd035", "patch": "@@ -359,6 +359,13 @@ struct local_state  /* COMMON_PORTABLE */\n      */\n     unsigned int steal_failure_count;\n \n+    /**\n+     * Record indicating that the worker stole work at least once.\n+     *\n+     * [local read/write]\n+     */\n+    int has_stolen;\n+\n     /**\n      * 1 if work was stolen from another worker.  When true, this will flag\n      * setup_for_execution_pedigree to increment the pedigree when we resume"}, {"sha": "29bf4817a665d956a1ce0ea9c8dbe9d902d28966", "filename": "libcilkrts/runtime/mac-symbols.txt", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Fmac-symbols.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Fmac-symbols.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fmac-symbols.txt?ref=be5ddbb86fbc4d7651f4c748528ecab6d31cd035", "patch": "@@ -33,7 +33,6 @@ ___cilkrts_hyperobject_alloc\n ___cilkrts_hyperobject_dealloc\n ___cilkrts_hyperobject_noop_destroy\n ___cilkrts_init\n-\n ___cilkrts_leave_frame\n ___cilkrts_metacall\n ___cilkrts_resume"}, {"sha": "c419fb68abfac00bc08c8365ffda680e3ac7cce6", "filename": "libcilkrts/runtime/os-unix.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Fos-unix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Fos-unix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fos-unix.c?ref=be5ddbb86fbc4d7651f4c748528ecab6d31cd035", "patch": "@@ -432,7 +432,9 @@ COMMON_SYSDEP void __cilkrts_idle(void)\n #elif defined(__MIC__)\n     _mm_delay_32(1024);\n #elif defined(__linux__) || \\\n-      defined(__APPLE__)\n+      defined(__APPLE__) || \\\n+      defined(__CYGWIN__)\n+      \n     usleep(10000);\n #else\n # error \"Unsupported architecture\"\n@@ -452,6 +454,7 @@ COMMON_SYSDEP void __cilkrts_yield(void)\n {\n #if defined(__ANDROID__)  || \\\n     defined(__APPLE__)    || \\\n+    defined(__CYGWIN__)   || \\\n     defined(__FreeBSD__)  || \\\n     defined(__VXWORKS__)  || \\\n     (defined(__sun__) && defined(__svr4__))"}, {"sha": "d92d28fc233fae7bc35a0952d18712f4cc51bf3e", "filename": "libcilkrts/runtime/record-replay.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Frecord-replay.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Frecord-replay.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Frecord-replay.cpp?ref=be5ddbb86fbc4d7651f4c748528ecab6d31cd035", "patch": "@@ -262,7 +262,7 @@ char * walk_pedigree_nodes(char *p, const __cilkrts_pedigree *pnode)\n     if (pnode->parent)\n     {\n         p = walk_pedigree_nodes(p, pnode->parent);\n-        p += cilk_snprintf_s(p, PEDIGREE_BUFF_SIZE, \"%s\", (char *) \"_\");\n+        p += cilk_snprintf_s(p, PEDIGREE_BUFF_SIZE, \"%s\", (char *)\"_\");\n     }\n     return p + cilk_snprintf_l(p, PEDIGREE_BUFF_SIZE, \"%\" PRIu64, pnode->rank);\n }"}, {"sha": "82c9e02af086907ae191fa2be301c6567ea3b55b", "filename": "libcilkrts/runtime/scheduler.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Fscheduler.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Fscheduler.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fscheduler.c?ref=be5ddbb86fbc4d7651f4c748528ecab6d31cd035", "patch": "@@ -1789,20 +1789,27 @@ static full_frame* check_for_work(__cilkrts_worker *w)\n         if (NULL == ff) {\n             // Punish the worker for failing to steal.\n             // No quantum for you!\n-            if (w->l->steal_failure_count > 30000) {\n-                // Punish more if the worker has been doing unsuccessful steals\n-                // for a long time. After return from the idle state, it will\n-                // be given a grace period to react quickly.\n+            unsigned int max_fails = w->g->max_steal_failures << 1;\n+            if (w->l->has_stolen == 0 &&\n+                w->l->steal_failure_count % max_fails == max_fails - 1) {\n+                // Idle briefly if the worker has never stolen anything for\n+                // the given grace period\n                 __cilkrts_idle();\n-                w->l->steal_failure_count -= 300;\n             } else {\n                 __cilkrts_yield();\n             }\n             w->l->steal_failure_count++;\n+            if (w->l->steal_failure_count > (max_fails << 8)) {\n+                // Reset the flag after certain amount of failures\n+                // - This will reduce cpu time in top-level synched regions\n+                // - max_fails can be controlled by user (CILK_STEAL_FAILURES)\n+                w->l->has_stolen = 0;\n+            }\n         } else {\n             // Reset steal_failure_count since there is obviously still work to\n             // be done.\n             w->l->steal_failure_count = 0;\n+            w->l->has_stolen = 1;\n         }\n     }\n     return ff;\n@@ -2912,6 +2919,7 @@ __cilkrts_worker *make_worker(global_state_t *g,\n     w->l->stats = NULL;\n #endif    \n     w->l->steal_failure_count = 0;\n+    w->l->has_stolen = 0;\n \n     w->l->work_stolen = 0;\n "}, {"sha": "9546001bdeb49d4b4846795a7189b8b9ae072f99", "filename": "libcilkrts/runtime/scheduler.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Fscheduler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Fscheduler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fscheduler.h?ref=be5ddbb86fbc4d7651f4c748528ecab6d31cd035", "patch": "@@ -85,7 +85,10 @@ __CILKRTS_BEGIN_EXTERN_C\n  * Print debugging messages and assertions for parallel reducers. 0 is\n  * no debugging.  A higher value generates more output.\n  */\n+\n+#ifndef REDPAR_DEBUG\n #define REDPAR_DEBUG 0\n+#endif\n \n /**\n  * @brief Lock the worker mutex to allow exclusive access to the"}, {"sha": "0b99008b82bcce44560e5ade365eb09d7d53d9ba", "filename": "libcilkrts/runtime/sysdep-unix.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Fsysdep-unix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5ddbb86fbc4d7651f4c748528ecab6d31cd035/libcilkrts%2Fruntime%2Fsysdep-unix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fruntime%2Fsysdep-unix.c?ref=be5ddbb86fbc4d7651f4c748528ecab6d31cd035", "patch": "@@ -465,7 +465,7 @@ char* sysdep_reset_jump_buffers_for_resume(cilk_fiber* fiber,\n \n     CILK_ASSERT(fiber);\n     void* sp = (void*)get_sp_for_executing_sf(cilk_fiber_get_stack_base(fiber), ff, sf);\n-    SP(sf) = sp;\n+    SP(sf) = CILK_ADJUST_SP(sp);\n \n     /* Debugging: make sure stack is accessible. */\n     ((volatile char *)sp)[-1];\n@@ -495,7 +495,7 @@ NORETURN sysdep_longjmp_to_sf(char* new_sp,\n #endif\n \n     // Set the stack pointer.\n-    SP(sf) = new_sp;\n+    SP(sf) = CILK_ADJUST_SP(new_sp);\n \n #ifdef RESTORE_X86_FP_STATE\n     if (CILK_FRAME_VERSION_VALUE(sf->flags) >= 1) {\n@@ -568,7 +568,7 @@ static const char *get_runtime_path ()\n {\n     // dladdr is a glibc extension. If it's available, use it to find the path\n     // for libcilkrts.so\n-#ifdef _GNU_SOURCE\n+#if HAVE_DLADDR\n     Dl_info info;\n     if (0 != dladdr(dummy_function, &info))\n         return info.dli_fname;\n@@ -689,7 +689,6 @@ static void write_version_file (global_state_t *g, int n)\n     // ==================\n     // System cores: 8\n     // Cilk workers requested: 8\n-    // Thread creator: Private\n \n     fprintf(fp, \"\\nThread information\\n\");\n     fprintf(fp, \"==================\\n\");\n@@ -699,11 +698,6 @@ static void write_version_file (global_state_t *g, int n)\n     fprintf(fp, \"System cores: %d\\n\", (int)sysconf(_SC_NPROCESSORS_ONLN));\n #endif    \n     fprintf(fp, \"Cilk workers requested: %d\\n\", n);\n-#if (PARALLEL_THREAD_CREATE)\n-        fprintf(fp, \"Thread creator: Private (parallel)\\n\");\n-#else\n-        fprintf(fp, \"Thread creator: Private\\n\");\n-#endif\n \n     if (fp != stderr && fp != stdout) fclose(fp);\n     else fflush(fp); // flush the handle buffer if it is stdout or stderr."}]}