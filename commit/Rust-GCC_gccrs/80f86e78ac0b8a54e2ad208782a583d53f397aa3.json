{"sha": "80f86e78ac0b8a54e2ad208782a583d53f397aa3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBmODZlNzhhYzBiOGE1NGUyYWQyMDg3ODJhNTgzZDUzZjM5N2FhMw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-09-10T00:16:28Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-09-10T00:16:28Z"}, "message": "Daily bump.", "tree": {"sha": "f59397e0ee3e36b956beacac024692b9dc752132", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f59397e0ee3e36b956beacac024692b9dc752132"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80f86e78ac0b8a54e2ad208782a583d53f397aa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80f86e78ac0b8a54e2ad208782a583d53f397aa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80f86e78ac0b8a54e2ad208782a583d53f397aa3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80f86e78ac0b8a54e2ad208782a583d53f397aa3/comments", "author": null, "committer": null, "parents": [{"sha": "81de459ec7ccf46c3e5a776b0c13f01e989d9593", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81de459ec7ccf46c3e5a776b0c13f01e989d9593", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81de459ec7ccf46c3e5a776b0c13f01e989d9593"}], "stats": {"total": 447, "additions": 446, "deletions": 1}, "files": [{"sha": "c9e7c5e0fea16f0b3d21332fcac65dfd47d59628", "filename": "config/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f86e78ac0b8a54e2ad208782a583d53f397aa3/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f86e78ac0b8a54e2ad208782a583d53f397aa3/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=80f86e78ac0b8a54e2ad208782a583d53f397aa3", "patch": "@@ -1,3 +1,7 @@\n+2020-09-09  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* largefile.m4: Sync from binutils-gdb.\n+\n 2020-08-20  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR bootstrap/96612"}, {"sha": "615c1a0e7feed1d6e8bed73ed5f0647b04d5cf25", "filename": "gcc/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f86e78ac0b8a54e2ad208782a583d53f397aa3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f86e78ac0b8a54e2ad208782a583d53f397aa3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80f86e78ac0b8a54e2ad208782a583d53f397aa3", "patch": "@@ -1,3 +1,52 @@\n+2020-09-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/94355\n+\t* doc/invoke.texi: Document -Wanalyzer-mismatching-deallocation.\n+\n+2020-09-09  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR rtl-optimization/96475\n+\t* bb-reorder.c (maybe_duplicate_computed_goto): Remove single_pred_p\n+\tmicro-optimization.\n+\n+2020-09-09  Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/nvptx.c (nvptx_assemble_decl_begin): Fix Wformat\n+\twarning.\n+\n+2020-09-09  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_attempt_slp_rearrange_stmts): Do\n+\tnothing when the permutation doesn't permute.\n+\n+2020-09-09  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR target/96991\n+\t* config/nvptx/nvptx.c (write_fn_proto): Fix boolean type check.\n+\n+2020-09-09  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-stmts.c (vectorizable_comparison): Allow\n+\tSTMT_VINFO_LIVE_P stmts.\n+\n+2020-09-09  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-stmts.c (vectorizable_condition): Allow\n+\tSTMT_VINFO_LIVE_P stmts.\n+\n+2020-09-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/96978\n+\t* tree-vect-stmts.c (vectorizable_condition): Do not\n+\tlook at STMT_VINFO_LIVE_P for BB vectorization.\n+\t(vectorizable_comparison): Likewise.\n+\n+2020-09-09  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/96955\n+\t* config/i386/i386.md (get_thread_pointer<mode>): New\n+\texpander.\n+\n 2020-09-08  Julian Brown  <julian@codesourcery.com>\n \n \t* config/gcn/gcn-valu.md (scatter<mode>_insn_1offset_ds<exec_scatter>):"}, {"sha": "18b8812ec43ce6b2f2b1c82c4a1d7a65d93b68d1", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f86e78ac0b8a54e2ad208782a583d53f397aa3/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f86e78ac0b8a54e2ad208782a583d53f397aa3/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=80f86e78ac0b8a54e2ad208782a583d53f397aa3", "patch": "@@ -1 +1 @@\n-20200909\n+20200910"}, {"sha": "207476347a011401931814d5f9b63b16e768e48f", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 223, "deletions": 0, "changes": 223, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f86e78ac0b8a54e2ad208782a583d53f397aa3/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f86e78ac0b8a54e2ad208782a583d53f397aa3/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=80f86e78ac0b8a54e2ad208782a583d53f397aa3", "patch": "@@ -1,3 +1,226 @@\n+2020-09-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/94355\n+\t* analyzer.opt (Wanalyzer-mismatching-deallocation): New warning.\n+\t* region-model-impl-calls.cc\n+\t(region_model::impl_call_operator_new): New.\n+\t(region_model::impl_call_operator_delete): New.\n+\t* region-model.cc (region_model::on_call_pre): Detect operator new\n+\tand operator delete.\n+\t(region_model::on_call_post): Likewise.\n+\t(region_model::maybe_update_for_edge): Detect EH edges and call...\n+\t(region_model::apply_constraints_for_exception): New function.\n+\t* region-model.h (region_model::impl_call_operator_new): New decl.\n+\t(region_model::impl_call_operator_delete): New decl.\n+\t(region_model::apply_constraints_for_exception): New decl.\n+\t* sm-malloc.cc (enum resource_state): New.\n+\t(struct allocation_state): New state subclass.\n+\t(enum wording): New.\n+\t(struct api): New.\n+\t(malloc_state_machine::custom_data_t): New typedef.\n+\t(malloc_state_machine::add_state): New decl.\n+\t(malloc_state_machine::m_unchecked)\n+\t(malloc_state_machine::m_nonnull)\n+\t(malloc_state_machine::m_freed): Delete these states in favor\n+\tof...\n+\t(malloc_state_machine::m_malloc)\n+\t(malloc_state_machine::m_scalar_new)\n+\t(malloc_state_machine::m_vector_new): ...this new api instances,\n+\twhich own their own versions of these states.\n+\t(malloc_state_machine::on_allocator_call): New decl.\n+\t(malloc_state_machine::on_deallocator_call): New decl.\n+\t(api::api): New ctor.\n+\t(dyn_cast_allocation_state): New.\n+\t(as_a_allocation_state): New.\n+\t(get_rs): New.\n+\t(unchecked_p): New.\n+\t(nonnull_p): New.\n+\t(freed_p): New.\n+\t(malloc_diagnostic::describe_state_change): Use unchecked_p and\n+\tnonnull_p.\n+\t(class mismatching_deallocation): New.\n+\t(double_free::double_free): Add funcname param for initializing\n+\tm_funcname.\n+\t(double_free::emit): Use m_funcname in warning message rather\n+\tthan hardcoding \"free\".\n+\t(double_free::describe_state_change): Likewise.  Use freed_p.\n+\t(double_free::describe_call_with_state): Use freed_p.\n+\t(double_free::describe_final_event): Use m_funcname in message\n+\trather than hardcoding \"free\".\n+\t(double_free::m_funcname): New field.\n+\t(possible_null::describe_state_change): Use unchecked_p.\n+\t(possible_null::describe_return_of_state): Likewise.\n+\t(use_after_free::use_after_free): Add param for initializing m_api.\n+\t(use_after_free::emit): Use m_api->m_dealloc_funcname in message\n+\trather than hardcoding \"free\".\n+\t(use_after_free::describe_state_change): Use freed_p.  Change the\n+\twording of the message based on the API.\n+\t(use_after_free::describe_final_event): Use\n+\tm_api->m_dealloc_funcname in message rather than hardcoding\n+\t\"free\".  Change the wording of the message based on the API.\n+\t(use_after_free::m_api): New field.\n+\t(malloc_leak::describe_state_change): Use unchecked_p.  Update\n+\tfor renaming of m_malloc_event to m_alloc_event.\n+\t(malloc_leak::describe_final_event): Update for renaming of\n+\tm_malloc_event to m_alloc_event.\n+\t(malloc_leak::m_malloc_event): Rename...\n+\t(malloc_leak::m_alloc_event): ...to this.\n+\t(free_of_non_heap::free_of_non_heap): Add param for initializing\n+\tm_funcname.\n+\t(free_of_non_heap::emit): Use m_funcname in message rather than\n+\thardcoding \"free\".\n+\t(free_of_non_heap::describe_final_event): Likewise.\n+\t(free_of_non_heap::m_funcname): New field.\n+\t(allocation_state::dump_to_pp): New.\n+\t(allocation_state::get_nonnull): New.\n+\t(malloc_state_machine::malloc_state_machine): Update for changes\n+\tto state fields and new api fields.\n+\t(malloc_state_machine::add_state): New.\n+\t(malloc_state_machine::on_stmt): Move malloc/calloc handling to\n+\ton_allocator_call and call it, passing in the API pointer.\n+\tLikewise for free, moving it to on_deallocator_call.  Handle calls\n+\tto operator new and delete in an analogous way.  Use unchecked_p\n+\twhen testing for possibly-null-arg and possibly-null-deref, and\n+\ttransition to the non-null for the correct API.  Remove redundant\n+\tnode param from call to on_zero_assignment.  Use freed_p for\n+\tuse-after-free check, and pass in API.\n+\t(malloc_state_machine::on_allocator_call): New, based on code in\n+\ton_stmt.\n+\t(malloc_state_machine::on_deallocator_call): Likewise.\n+\t(malloc_state_machine::on_phi): Mark node param with\n+\tATTRIBUTE_UNUSED; don't pass it to on_zero_assignment.\n+\t(malloc_state_machine::on_condition): Mark node param with\n+\tATTRIBUTE_UNUSED.  Replace on_transition calls with get_state and\n+\tset_next_state pairs, transitioning to the non-null state for the\n+\tappropriate API.\n+\t(malloc_state_machine::can_purge_p): Port to new state approach.\n+\t(malloc_state_machine::on_zero_assignment): Replace on_transition\n+\tcalls with get_state and set_next_state pairs.  Drop redundant\n+\tnode param.\n+\t* sm.h (state_machine::add_custom_state): New.\n+\n+2020-09-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* diagnostic-manager.cc\n+\t(null_assignment_sm_context::warn_for_state): Replace with...\n+\t(null_assignment_sm_context::warn): ...this.\n+\t* engine.cc (impl_sm_context::warn_for_state): Replace with...\n+\t(impl_sm_context::warn): ...this.\n+\t* sm-file.cc (fileptr_state_machine::on_stmt): Replace\n+\twarn_for_state and on_transition calls with a get_state\n+\ttest guarding warn and set_next_state calls.\n+\t* sm-malloc.cc (malloc_state_machine::on_stmt): Likewise.\n+\t* sm-pattern-test.cc (pattern_test_state_machine::on_condition):\n+\tReplace warn_for_state call with warn call.\n+\t* sm-sensitive.cc\n+\t(sensitive_state_machine::warn_for_any_exposure): Replace\n+\twarn_for_state call with a get_state test guarding a warn call.\n+\t* sm-signal.cc (signal_state_machine::on_stmt): Likewise.\n+\t* sm-taint.cc (taint_state_machine::on_stmt):  Replace\n+\twarn_for_state and on_transition calls with a get_state\n+\ttest guarding warn and set_next_state calls.\n+\t* sm.h (sm_context::warn_for_state): Replace with...\n+\t(sm_context::warn): ...this.\n+\n+2020-09-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* diagnostic-manager.cc\n+\t(null_assignment_sm_context::null_assignment_sm_context): Add old_state\n+\tand ext_state params, initializing m_old_state and m_ext_state.\n+\t(null_assignment_sm_context::on_transition): Split into...\n+\t(null_assignment_sm_context::get_state): ...this new vfunc\n+\timplementation and...\n+\t(null_assignment_sm_context::set_next_state): ...this new vfunc\n+\timplementation.\n+\t(null_assignment_sm_context::m_old_state): New field.\n+\t(null_assignment_sm_context::m_ext_state): New field.\n+\t(diagnostic_manager::add_events_for_eedge): Pass in old state and\n+\text_state when creating sm_ctxt.\n+\t* engine.cc (impl_sm_context::on_transition): Split into...\n+\t(impl_sm_context::get_state): ...this new vfunc\n+\timplementation and...\n+\t(impl_sm_context::set_next_state): ...this new vfunc\n+\timplementation.\n+\t* sm.h (sm_context::get_state): New pure virtual function.\n+\t(sm_context::set_next_state): Likewise.\n+\t(sm_context::on_transition): Convert from a pure virtual function\n+\tto a regular function implemented in terms of get_state and\n+\tset_next_state.\n+\n+2020-09-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* checker-path.cc (state_change_event::get_desc): Update\n+\tstate_machine::get_state_name calls to state::get_name.\n+\t(warning_event::get_desc): Likewise.\n+\t* diagnostic-manager.cc\n+\t(null_assignment_sm_context::on_transition): Update comparison\n+\tagainst 0 with comparison with m_sm.get_start_state.\n+\t(diagnostic_manager::prune_for_sm_diagnostic): Update\n+\tstate_machine::get_state_name calls to state::get_name.\n+\t* engine.cc (impl_sm_context::on_transition): Likewise.\n+\t(exploded_node::get_dot_fillcolor): Use get_id when summing\n+\tthe sm states.\n+\t* program-state.cc (sm_state_map::sm_state_map): Don't hardcode\n+\t0 as the start state when initializing m_global_state.\n+\t(sm_state_map::print): Use dump_to_pp rather than get_state_name\n+\twhen dumping states.\n+\t(sm_state_map::is_empty_p): Don't hardcode 0 as the start state\n+\twhen examining m_global_state.\n+\t(sm_state_map::hash): Use get_id when hashing states.\n+\t(selftest::test_sm_state_map): Use state objects rather than\n+\tarbitrary hardcoded integers.\n+\t(selftest::test_program_state_merging): Likewise.\n+\t(selftest::test_program_state_merging_2): Likewise.\n+\t* sm-file.cc (fileptr_state_machine::m_start): Move to base class.\n+\t(file_diagnostic::describe_state_change): Use get_start_state.\n+\t(fileptr_state_machine::fileptr_state_machine): Drop m_start\n+\tinitialization.\n+\t* sm-malloc.cc (malloc_state_machine::m_start): Move to base\n+\tclass.\n+\t(malloc_diagnostic::describe_state_change): Use get_start_state.\n+\t(possible_null::describe_state_change): Likewise.\n+\t(malloc_state_machine::malloc_state_machine): Drop m_start\n+\tinitialization.\n+\t* sm-pattern-test.cc (pattern_test_state_machine::m_start): Move\n+\tto base class.\n+\t(pattern_test_state_machine::pattern_test_state_machine): Drop\n+\tm_start initialization.\n+\t* sm-sensitive.cc (sensitive_state_machine::m_start): Move to base\n+\tclass.\n+\t(sensitive_state_machine::sensitive_state_machine): Drop m_start\n+\tinitialization.\n+\t* sm-signal.cc (signal_state_machine::m_start): Move to base\n+\tclass.\n+\t(signal_state_machine::signal_state_machine): Drop m_start\n+\tinitialization.\n+\t* sm-taint.cc (taint_state_machine::m_start): Move to base class.\n+\t(taint_state_machine::taint_state_machine): Drop m_start\n+\tinitialization.\n+\t* sm.cc (state_machine::state::dump_to_pp): New.\n+\t(state_machine::state_machine): Move here from sm.h.  Initialize\n+\tm_next_state_id and m_start.\n+\t(state_machine::add_state): Reimplement in terms of state objects.\n+\t(state_machine::get_state_name): Delete.\n+\t(state_machine::get_state_by_name): Reimplement in terms of state\n+\tobjects.  Make const.\n+\t(state_machine::validate): Delete.\n+\t(state_machine::dump_to_pp): Reimplement in terms of state\n+\tobjects.\n+\t* sm.h (state_machine::state): New class.\n+\t(state_machine::state_t): Convert typedef from \"unsigned\" to\n+\t\"const state_machine::state *\".\n+\t(state_machine::state_machine): Move to sm.cc.\n+\t(state_machine::get_default_state): Use m_start rather than\n+\thardcoding 0.\n+\t(state_machine::get_state_name): Delete.\n+\t(state_machine::get_state_by_name): Make const.\n+\t(state_machine::get_start_state): New accessor.\n+\t(state_machine::alloc_state_id): New.\n+\t(state_machine::m_state_names): Drop in favor of...\n+\t(state_machine::m_states): New field\n+\t(state_machine::m_start): New field\n+\t(start_start_p): Delete.\n+\n 2020-09-08  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/96949"}, {"sha": "5a7f9217b1160db5971431194d771acb147e3d51", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f86e78ac0b8a54e2ad208782a583d53f397aa3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f86e78ac0b8a54e2ad208782a583d53f397aa3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=80f86e78ac0b8a54e2ad208782a583d53f397aa3", "patch": "@@ -1,3 +1,40 @@\n+2020-09-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/77841\n+\t* decl.c (reshape_init): If we're initializing a char array from\n+\ta string-literal that is enclosed in braces, unwrap it.\n+\t* init.c (build_new_1): Don't handle string-initializers here.\n+\t(build_new): Handle new-expression with paren-init when the\n+\tarray bound is known.  Always pass string constants to build_new_1\n+\tenclosed in braces.  Don't handle string-initializers in any\n+\tspecial way.\n+\n+2020-09-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/95164\n+\t* decl.c (reshape_init_r): When initializing an aggregate member\n+\twith an initializer from an initializer-list, also consider\n+\tCOMPOUND_LITERAL_P.\n+\n+2020-09-09  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* parser.c (cp_parser_omp_declare_reduction): Refactor to avoid\n+\tcode duplication.  Update DECL_TI_TEMPLATE's context.\n+\t* pt.c (tsubst_expr): For OMP reduction function, set context to\n+\tglobal_namespace before pushing.\n+\t(tsubst_omp_udr): Assert current_function_decl, add comment about\n+\tdecl context.\n+\n+2020-09-09  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/96647\n+\t* class.c (resolve_address_of_overloaded_function): Check\n+\tconstraints_satisfied_p and perform return-type deduction via\n+\tmaybe_instantiate_decl when considering non-template functions\n+\tin the overload set.\n+\t* cp-tree.h (maybe_instantiate_decl): Declare.\n+\t* decl2.c (maybe_instantiate_decl): Remove static.\n+\n 2020-09-04  Jason Merrill  <jason@redhat.com>\n \n \t* expr.c (mark_use): Use iloc_sentinel."}, {"sha": "07729eb495855d383b456950ae35b1bf36333d92", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f86e78ac0b8a54e2ad208782a583d53f397aa3/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f86e78ac0b8a54e2ad208782a583d53f397aa3/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=80f86e78ac0b8a54e2ad208782a583d53f397aa3", "patch": "@@ -1,3 +1,15 @@\n+2020-09-09  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/95109\n+\tPR fortran/94690\n+\t* resolve.c (gfc_resolve_code): Also call\n+\tgfc_resolve_omp_parallel_blocks for 'distribute parallel do (simd)'.\n+\t* openmp.c (gfc_resolve_omp_parallel_blocks): Handle it.\n+\t(gfc_resolve_do_iterator): Remove special code for SIMD, which is\n+\tnot needed.\n+\t* trans-openmp.c (gfc_trans_omp_target): For TARGET_PARALLEL_DO_SIMD,\n+\tcall simd not do processing function.\n+\n 2020-09-08  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \t* intrinsic.texi: Fix description of FINDLOC result."}, {"sha": "1e7e691cb0ad6317989193cf11a39ace88be2bc7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f86e78ac0b8a54e2ad208782a583d53f397aa3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f86e78ac0b8a54e2ad208782a583d53f397aa3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=80f86e78ac0b8a54e2ad208782a583d53f397aa3", "patch": "@@ -1,3 +1,76 @@\n+2020-09-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/77841\n+\t* g++.old-deja/g++.ext/arrnew2.C: Expect the error only in C++17\n+\tand less.\n+\t* g++.old-deja/g++.robertl/eb58.C: Adjust dg-error.\n+\t* g++.old-deja/g++.robertl/eb63.C: Expect the error only in C++17\n+\tand less.\n+\t* g++.dg/cpp2a/new-array5.C: New test.\n+\t* g++.dg/cpp2a/paren-init36.C: New test.\n+\t* g++.dg/cpp2a/paren-init37.C: New test.\n+\t* g++.dg/pr84729.C: Adjust dg-error.\n+\n+2020-09-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/95164\n+\t* g++.dg/cpp0x/initlist123.C: New test.\n+\n+2020-09-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/94355\n+\t* g++.dg/analyzer/new-1.C: New test.\n+\t* g++.dg/analyzer/new-vs-malloc.C: New test.\n+\n+2020-09-09  Marek Polacek  <polacek@redhat.com>\n+\n+\t* g++.dg/warn/Wnonnull6.C: Use target c++14.\n+\n+2020-09-09  Marek Polacek  <polacek@redhat.com>\n+\n+\t* g++.dg/cpp0x/auto-96647.C: Moved to...\n+\t* g++.dg/cpp1y/auto-96647.C: ...here.  Use target c++14.\n+\n+2020-09-09  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/96955\n+\t* gcc.target/i386/builtin_thread_pointer.c: Update scan-assembler\n+\tfor x32.\n+\n+2020-09-09  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/96647\n+\t* g++.dg/cpp0x/auto-96647.C: New test.\n+\t* g++.dg/cpp0x/error9.C: New test.\n+\t* g++.dg/cpp2a/concepts-fn6.C: New test.\n+\n+2020-09-09  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/vect-live-6.c: New testcase.\n+\n+2020-09-09  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/combined-if.f90: Update scan-tree-dump-times for\n+\t'omp simd.*if' for nvptx even more.\n+\n+2020-09-09  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/vect-cond-13.c: New testcase.\n+\t* gcc.target/i386/pr87007-4.c: Adjust.\n+\t* gcc.target/i386/pr87007-5.c: Likewise.\n+\n+2020-09-09  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/builtin_thread_pointer.c: New test.\n+\n+2020-09-09  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/95109\n+\tPR fortran/94690\n+\t* gfortran.dg/gomp/combined-if.f90: Update scan-tree-dump-times for\n+\t'omp simd.*if'.\n+\t* gfortran.dg/gomp/openmp-simd-5.f90: New test.\n+\n 2020-09-08  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/96949"}, {"sha": "177e722082d097828b88a1c45cfc7ffd1a615c25", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f86e78ac0b8a54e2ad208782a583d53f397aa3/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f86e78ac0b8a54e2ad208782a583d53f397aa3/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=80f86e78ac0b8a54e2ad208782a583d53f397aa3", "patch": "@@ -3,6 +3,11 @@\n \t* dwarf2.h (enum dwarf_sect_v5): A new enum section for the\n \tsections in a DWARF 5 DWP file (DWP version 5).\n \n+2020-09-09  Caroline Tice  <cmtice@google.com>\n+\n+\t* dwarf2.h (enum dwarf_sect_v5): A new enum section for the\n+\tsections in a DWARF 5 DWP file (DWP version 5).\n+\n 2020-09-08  Felix Willgerodt  <felix.willgerodt@intel.com>\n \n \t* floatformat.h (floatformat_bfloat16_big): New."}, {"sha": "8a13ef97f245e8aed6cf2c7d8c6abf082a8892e6", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f86e78ac0b8a54e2ad208782a583d53f397aa3/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f86e78ac0b8a54e2ad208782a583d53f397aa3/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=80f86e78ac0b8a54e2ad208782a583d53f397aa3", "patch": "@@ -1,3 +1,27 @@\n+2020-09-09  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* pecoff.c (coff_initialize_syminfo): Add is_64 parameter.\n+\t(coff_add): Determine and pass is_64.\n+\n+2020-09-09  Ian Lance Taylor  <iant@golang.org>\n+\n+\tPR libbacktrace/96973\n+\t* fileline.c (macho_get_executable_path): New static function.\n+\t(fileline_initialize): Call macho_get_executable_path.\n+\n+2020-09-09  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* dwarf.c (function_addrs_search): Compare against the next entry\n+\tlow address, not the high address.\n+\t(unit_addrs_search): Likewise.\n+\t(build_address_map): Add a trailing unit_addrs.\n+\t(read_function_entry): Add a trailing function_addrs.\n+\t(read_function_info): Likewise.\n+\t(report_inlined_functions): Search backward for function_addrs\n+\tmatch.\n+\t(dwarf_lookup_pc): Search backward for unit_addrs and\n+\tfunction_addrs matches.\n+\n 2020-09-08  Ian Lance Taylor  <iant@golang.org>\n \n \t* simple.c (simple_unwind): Correct comment spelling."}, {"sha": "cc66cc4b34db02abe13280bf27c54ad1898c3e6a", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f86e78ac0b8a54e2ad208782a583d53f397aa3/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f86e78ac0b8a54e2ad208782a583d53f397aa3/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=80f86e78ac0b8a54e2ad208782a583d53f397aa3", "patch": "@@ -1,3 +1,8 @@\n+2020-09-09  Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/atomic.c (__SYNC_SUBWORD_COMPARE_AND_SWAP): Fix\n+\tWbuiltin-declaration-mismatch.\n+\n 2020-08-26  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* config/msp430/slli.S (__gnu_mspabi_sllp): New."}, {"sha": "07ccdc78d55ecd38f42e195f0eef109b42206e2b", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f86e78ac0b8a54e2ad208782a583d53f397aa3/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f86e78ac0b8a54e2ad208782a583d53f397aa3/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=80f86e78ac0b8a54e2ad208782a583d53f397aa3", "patch": "@@ -1,3 +1,9 @@\n+2020-09-09  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR d/95680\n+\t* libdruntime/config/x86/switchcontext.S: Include <cet.h> to\n+\tgenerate the CET marker for -fcf-protection.\n+\n 2020-09-08  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/95680"}, {"sha": "f2568a9a1b1d76744bb019e8350ce8cdcade4738", "filename": "lto-plugin/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f86e78ac0b8a54e2ad208782a583d53f397aa3/lto-plugin%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f86e78ac0b8a54e2ad208782a583d53f397aa3/lto-plugin%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FChangeLog?ref=80f86e78ac0b8a54e2ad208782a583d53f397aa3", "patch": "@@ -1,3 +1,10 @@\n+2020-09-09  Nick Clifton  <nickc@redhat.com>\n+\n+\t* lto-plugin.c (struct plugin_symtab): Add last_sym field.\n+\t(parse_symtab_extension): Only read as many entries as are\n+\tavailable in the buffer.  Store the data read into the symbol\n+\ttable indexed from last_sym.  Increment last_sym.\n+\n 2020-07-30  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR bootstrap/96202"}]}