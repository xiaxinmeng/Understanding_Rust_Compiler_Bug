{"sha": "9b0995aace7783bb700349aaed1ca1baa17cdbee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWIwOTk1YWFjZTc3ODNiYjcwMDM0OWFhZWQxY2ExYmFhMTdjZGJlZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-07-14T10:09:46Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-07-14T10:09:46Z"}, "message": "(yylex): Ensure TOTAL_PARTS is wide enough to store a constant as wide as we can store in an INTEGER_CST.\n\n(yylex): Ensure TOTAL_PARTS is wide enough to store a\nconstant as wide as we can store in an INTEGER_CST.\n(LONG_LONG_TYPE_SIZE): Deleted; no longer needed.\n\nFrom-SVN: r1588", "tree": {"sha": "1b3e1cc2c5b2ea7a4d347c32f1d89244aa43d8a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b3e1cc2c5b2ea7a4d347c32f1d89244aa43d8a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b0995aace7783bb700349aaed1ca1baa17cdbee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b0995aace7783bb700349aaed1ca1baa17cdbee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b0995aace7783bb700349aaed1ca1baa17cdbee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b0995aace7783bb700349aaed1ca1baa17cdbee/comments", "author": null, "committer": null, "parents": [{"sha": "4e56c96a3fffc67f27ba3e46f1449739d465e41f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e56c96a3fffc67f27ba3e46f1449739d465e41f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e56c96a3fffc67f27ba3e46f1449739d465e41f"}], "stats": {"total": 10, "additions": 4, "deletions": 6}, "files": [{"sha": "a353ba96d24742ed3f27b3c3a00d3a320585ec4f", "filename": "gcc/c-lex.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b0995aace7783bb700349aaed1ca1baa17cdbee/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b0995aace7783bb700349aaed1ca1baa17cdbee/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=9b0995aace7783bb700349aaed1ca1baa17cdbee", "patch": "@@ -65,10 +65,6 @@ extern int yydebug;\n /* File used for outputting assembler code.  */\n extern FILE *asm_out_file;\n \n-#ifndef LONG_LONG_TYPE_SIZE\n-#define LONG_LONG_TYPE_SIZE (BITS_PER_WORD * 2)\n-#endif\n-\n #ifndef WCHAR_TYPE_SIZE\n #ifdef INT_TYPE_SIZE\n #define WCHAR_TYPE_SIZE INT_TYPE_SIZE\n@@ -1170,8 +1166,10 @@ yylex ()\n \t/* for multi-precision arithmetic,\n \t   we actually store only HOST_BITS_PER_CHAR bits in each part.\n \t   The number of parts is chosen so as to be sufficient to hold\n-\t   at least as many bits as are in a target `long long' value.  */\n-#define TOTAL_PARTS (LONG_LONG_TYPE_SIZE / HOST_BITS_PER_CHAR) + 2\n+\t   the enough bits to fit into the two HOST_WIDE_INTs that contain\n+\t   the integer value (this is always at least as many bits as are\n+\t   in a target `long long' value, but may be wider).  */\n+#define TOTAL_PARTS ((HOST_BITS_PER_WIDE_INT / HOST_BITS_PER_CHAR) * 2 + 2)\n \tint parts[TOTAL_PARTS];\n \tint overflow = 0;\n "}]}