{"sha": "e8eecc2a919033ad4224756a8759d8e94c0e4bc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThlZWNjMmE5MTkwMzNhZDQyMjQ3NTZhODc1OWQ4ZTk0YzBlNGJjMg==", "commit": {"author": {"name": "Fritz Reese", "email": "foreese@gcc.gnu.org", "date": "2020-04-22T15:45:22Z"}, "committer": {"name": "Fritz Reese", "email": "foreese@gcc.gnu.org", "date": "2020-04-23T14:11:01Z"}, "message": "Protect the trigd functions in libgfortran from unavailable math functions.\n\nlibgfortran/ChangeLog:\n\n2020-04-22  Fritz Reese  <foreese@gcc.gnu.org>\n\n\tPR libfortran/94694\n\tPR libfortran/94586\n\t* intrinsics/trigd.c, intrinsics/trigd_lib.inc, intrinsics/trigd.inc:\n\tGuard against unavailable math functions.\n\tUse suffixes from kinds.h based on the REAL kind.\n\ngcc/fortran/ChangeLog:\n\n2020-04-22  Fritz Reese  <foreese@gcc.gnu.org>\n\n\t* trigd_fe.inc: Use mpfr to compute cosd(30) rather than a host-\n\tprecision floating point literal based on an invalid macro.", "tree": {"sha": "6548c11c6df9c8fa08f6d2eb1311df9fbd30f648", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6548c11c6df9c8fa08f6d2eb1311df9fbd30f648"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8eecc2a919033ad4224756a8759d8e94c0e4bc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8eecc2a919033ad4224756a8759d8e94c0e4bc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8eecc2a919033ad4224756a8759d8e94c0e4bc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8eecc2a919033ad4224756a8759d8e94c0e4bc2/comments", "author": null, "committer": null, "parents": [{"sha": "966de09be91c639d66d252c9ae6ab8da5ebfca18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/966de09be91c639d66d252c9ae6ab8da5ebfca18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/966de09be91c639d66d252c9ae6ab8da5ebfca18"}], "stats": {"total": 455, "additions": 331, "deletions": 124}, "files": [{"sha": "9d06c2e7fd33de1a38fdab6a1693d0d1f4382d32", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8eecc2a919033ad4224756a8759d8e94c0e4bc2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8eecc2a919033ad4224756a8759d8e94c0e4bc2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e8eecc2a919033ad4224756a8759d8e94c0e4bc2", "patch": "@@ -1,3 +1,8 @@\n+2020-04-22  Fritz Reese  <foreese@gcc.gnu.org>\n+\n+\t* trigd_fe.inc: Use mpfr to compute cosd(30) rather than a host-\n+\tprecision floating point literal based on an invalid macro.\n+\n 2020-04-22  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n \n \tPR fortran/90350"}, {"sha": "f94c36773c1ca7a9bc5bdf39b9e6b9d2adc65cca", "filename": "gcc/fortran/trigd_fe.inc", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8eecc2a919033ad4224756a8759d8e94c0e4bc2/gcc%2Ffortran%2Ftrigd_fe.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8eecc2a919033ad4224756a8759d8e94c0e4bc2/gcc%2Ffortran%2Ftrigd_fe.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrigd_fe.inc?ref=e8eecc2a919033ad4224756a8759d8e94c0e4bc2", "patch": "@@ -29,17 +29,20 @@ along with GCC; see the file COPYING3.  If not see\n #define ISFINITE(x) mpfr_number_p(x)\n #define D2R(x) deg2rad(x)\n \n+#define ENABLE_SIND\n+#define ENABLE_COSD\n+#define ENABLE_TAND\n+\n #define SIND simplify_sind\n #define COSD simplify_cosd\n #define TAND simplify_tand\n \n-#ifdef HAVE_GFC_REAL_16\n-#define COSD30 8.66025403784438646763723170752936183e-01Q\n-#else\n-#define COSD30 8.66025403784438646763723170752936183e-01L\n-#endif\n-\n-#define SET_COSD30(x) mpfr_set_ld((x), COSD30, GFC_RND_MODE)\n+/* cosd(30) === sqrt(3) / 2.  */\n+#define SET_COSD30(x) do { \\\n+    mpfr_set_ui (x, 3, GFC_RND_MODE); \\\n+    mpfr_sqrt (x, x, GFC_RND_MODE); \\\n+    mpfr_div_ui (x, x, 2, GFC_RND_MODE); \\\n+  } while (0)\n \n static RETTYPE SIND (FTYPE);\n static RETTYPE COSD (FTYPE);"}, {"sha": "8e3e087818d67a4eec90bfa453fa175e8ee3d00e", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8eecc2a919033ad4224756a8759d8e94c0e4bc2/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8eecc2a919033ad4224756a8759d8e94c0e4bc2/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=e8eecc2a919033ad4224756a8759d8e94c0e4bc2", "patch": "@@ -1,3 +1,9 @@\n+2020-04-22  Fritz Reese  <foreese@gcc.gnu.org>\n+\n+\t* intrinsics/trigd.c, intrinsics/trigd_lib.inc, intrinsics/trigd.inc:\n+\tGuard against unavailable math functions.\n+\tUse suffixes from kinds.h based on the REAL kind.\n+\n 2020-04-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR libfortran/94694"}, {"sha": "e1c51c7b2ef67168ad95083e811e36df2bef3561", "filename": "libgfortran/intrinsics/trigd.c", "status": "modified", "additions": 160, "deletions": 74, "changes": 234, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8eecc2a919033ad4224756a8759d8e94c0e4bc2/libgfortran%2Fintrinsics%2Ftrigd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8eecc2a919033ad4224756a8759d8e94c0e4bc2/libgfortran%2Fintrinsics%2Ftrigd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Ftrigd.c?ref=e8eecc2a919033ad4224756a8759d8e94c0e4bc2", "patch": "@@ -27,6 +27,14 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #include <math.h>\n \n+/* Body of library functions which are cannot be implemented on the current\n+ * platform because it lacks a capability, such as an underlying trigonometric\n+ * function (sin, cos, tan) or C99 floating-point function (fabs, fmod). */\n+#define STRINGIFY_EXPAND(x) #x\n+#define ERROR_RETURN(f, k, x) runtime_error (#f \" is unavailable for\" \\\n+    \" REAL(KIND=\" STRINGIFY_EXPAND(k) \") because the system math library\" \\\n+    \" lacks support for it\"); \\\n+    RETURN(x)\n \n /*\n    For real x, let {x}_P or x_P be the closest representible number in the\n@@ -65,141 +73,219 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n  */\n \n+#ifdef HAVE_GFC_REAL_4\n+\n /* Build _gfortran_sind_r4, _gfortran_cosd_r4, and _gfortran_tand_r4  */\n \n-#define FTYPE       GFC_REAL_4\n-#define SIND        sind_r4\n-#define COSD        cosd_r4\n-#define TAND        tand_r4\n-#define SUFFIX(x)   x ## f\n+#define KIND\t4\n+#define TINY\t0x1.p-100\t/* ~= 7.889e-31 */\n+#define COSD_SMALL  0x1.p-7\t/*  = 7.8125e-3 */\n+#define SIND_SMALL  0x1.p-5\t/*  = 3.125e-2 */\n+#define COSD30      8.66025388e-01\n+#define PIO180H     1.74560547e-02\t/* high 12 bits.  */\n+#define PIO180L    -2.76216747e-06\t/* Next 24 bits.  */\n+\n+#if defined(HAVE_FABSF) && defined(HAVE_FMODF) && defined(HAVE_COPYSIGNF)\n+\n+#ifdef HAVE_SINF\n+#define ENABLE_SIND\n+#endif\n+\n+#ifdef HAVE_COSF\n+#define ENABLE_COSD\n+#endif\n+\n+#ifdef HAVE_TANF\n+#define ENABLE_TAND\n+#endif\n \n-#define TINY        0x1.p-100f\t/* ~= 7.889e-31 */\n-#define COSD_SMALL  0x1.p-7f\t/*  = 7.8125e-3 */\n-#define SIND_SMALL  0x1.p-5f\t/*  = 3.125e-2 */\n-#define COSD30      8.66025388e-01f\n+#endif /* HAVE_FABSF && HAVE_FMODF && HAVE_COPYSIGNF */\n \n-#define PIO180H     1.74560547e-02f\t/* high 12 bits.  */\n-#define PIO180L    -2.76216747e-06f\t/* Next 24 bits.  */\n+#ifdef GFC_REAL_4_INFINITY\n+#define HAVE_INFINITY_KIND\n+#endif\n \n #include \"trigd_lib.inc\"\n \n-#undef FTYPE\n+#undef KIND\n #undef TINY\n #undef COSD_SMALL\n #undef SIND_SMALL\n #undef COSD30\n #undef PIO180H\n #undef PIO180L\n-#undef SIND\n-#undef COSD\n-#undef TAND\n-#undef SUFFIX\n+#undef ENABLE_SIND\n+#undef ENABLE_COSD\n+#undef ENABLE_TAND\n+#undef HAVE_INFINITY_KIND\n \n+#endif /* HAVE_GFC_REAL_4... */\n \n-/* Build _gfortran_sind_r8, _gfortran_cosd_r8, and _gfortran_tand_r8.  */\n \n-#define FTYPE       GFC_REAL_8\n-#define SIND        sind_r8\n-#define COSD        cosd_r8\n-#define TAND        tand_r8\n-#define SUFFIX(x)   x\n+#ifdef HAVE_GFC_REAL_8\n \n-#define TINY        0x1.p-1000\t/* ~= 9.33e-302 (min exp -1074) */\n+/* Build _gfortran_sind_r8, _gfortran_cosd_r8, and _gfortran_tand_r8  */\n+\n+#define KIND\t8\n+#define TINY\t0x1.p-1000\t/* ~= 9.33e-302 (min exp -1074) */\n #define COSD_SMALL  0x1.p-21\t/* ~= 4.768e-7 */\n #define SIND_SMALL  0x1.p-19\t/* ~= 9.537e-7 */\n #define COSD30      8.6602540378443860e-01\n-\n #define PIO180H     1.7453283071517944e-02\t/* high 21 bits.  */\n #define PIO180L     9.4484253514332993e-09\t/* Next 53 bits.  */\n \n+#if defined(HAVE_FABS) && defined(HAVE_FMOD) && defined(HAVE_COPYSIGN)\n+\n+#ifdef HAVE_SIN\n+#define ENABLE_SIND\n+#endif\n+\n+#ifdef HAVE_COS\n+#define ENABLE_COSD\n+#endif\n+\n+#ifdef HAVE_TAN\n+#define ENABLE_TAND\n+#endif\n+\n+#endif /* HAVE_FABS && HAVE_FMOD && HAVE_COPYSIGN */\n+\n+#ifdef GFC_REAL_8_INFINITY\n+#define HAVE_INFINITY_KIND\n+#endif\n+\n #include \"trigd_lib.inc\"\n \n-#undef FTYPE\n+#undef KIND\n #undef TINY\n #undef COSD_SMALL\n #undef SIND_SMALL\n #undef COSD30\n #undef PIO180H\n #undef PIO180L\n-#undef SIND\n-#undef COSD\n-#undef TAND\n-#undef SUFFIX\n+#undef ENABLE_SIND\n+#undef ENABLE_COSD\n+#undef ENABLE_TAND\n+#undef HAVE_INFINITY_KIND\n \n+#endif /* HAVE_GFC_REAL_8... */\n \n-/* Build _gfortran_sind_r10, _gfortran_cosd_r10, and _gfortran_tand_r10.  */\n \n #ifdef HAVE_GFC_REAL_10\n \n-#define FTYPE       GFC_REAL_10\n-#define SIND        sind_r10\n-#define COSD        cosd_r10\n-#define TAND        tand_r10\n-#define SUFFIX(x)   x ## l\t/* L */\n+/* Build _gfortran_sind_r10, _gfortran_cosd_r10, and _gfortran_tand_r10  */\n \n-#define TINY        0x1.p-16400L\t/* ~= 1.28e-4937 (min exp -16494) */\n-#define COSD_SMALL  0x1.p-26L\t/* ~= 1.490e-8 */\n+#define KIND\t10\n+#define TINY\t0x1.p-16400\t/* ~= 1.28e-4937 (min exp -16494) */\n+#define COSD_SMALL  0x1.p-26\t/* ~= 1.490e-8 */\n #undef  SIND_SMALL\t\t/* not precise */\n-#define COSD30       8.66025403784438646787e-01L\n+#define COSD30      8.66025403784438646787e-01\n+#define PIO180H     1.74532925229868851602e-02\t/* high 32 bits */\n+#define PIO180L    -3.04358939097084072823e-12\t/* Next 64 bits */\n+\n+#if defined(HAVE_FABSL) && defined(HAVE_FMODL) && defined(HAVE_COPYSIGNL)\n+\n+#ifdef HAVE_SINL\n+#define ENABLE_SIND\n+#endif\n \n-#define PIO180H     1.74532925229868851602e-02L\t/* high 32 bits */\n-#define PIO180L    -3.04358939097084072823e-12L\t/* Next 64 bits */\n+#ifdef HAVE_COSL\n+#define ENABLE_COSD\n+#endif\n+\n+#ifdef HAVE_TANL\n+#define ENABLE_TAND\n+#endif\n+\n+#endif /* HAVE_FABSL && HAVE_FMODL && HAVE_COPYSIGNL */\n+\n+#ifdef GFC_REAL_10_INFINITY\n+#define HAVE_INFINITY_KIND\n+#endif\n \n #include \"trigd_lib.inc\"\n-#undef FTYPE\n+\n+#undef KIND\n #undef TINY\n #undef COSD_SMALL\n #undef SIND_SMALL\n #undef COSD30\n #undef PIO180H\n #undef PIO180L\n-#undef SIND\n-#undef COSD\n-#undef TAND\n-#undef SUFFIX\n-#endif /* HAVE_GFC_REAL_10 */\n+#undef ENABLE_SIND\n+#undef ENABLE_COSD\n+#undef ENABLE_TAND\n+#undef HAVE_INFINITY_KIND\n \n+#endif /* HAVE_GFC_REAL_10 */\n \n-/* Build _gfortran_sind_r16, _gfortran_cosd_r16, and _gfortran_tand_r16.  */\n \n #ifdef HAVE_GFC_REAL_16\n \n-#define FTYPE       GFC_REAL_16\n-#define SIND        sind_r16\n-#define COSD        cosd_r16\n-#define TAND        tand_r16\n+/* Build _gfortran_sind_r16, _gfortran_cosd_r16, and _gfortran_tand_r16  */\n+\n+#define KIND\t16\n+#define TINY\t0x1.p-16400\t/* ~= 1.28e-4937 */\n+#undef  SIND_SMALL\t\t/* not precise */\n+\n+#if GFC_REAL_16_DIGITS == 64\n+/* 80 bit precision, use constants from REAL(10).  */\n+#define COSD_SMALL  0x1.p-26\t/* ~= 1.490e-8 */\n+#define COSD30      8.66025403784438646787e-01\n+#define PIO180H     1.74532925229868851602e-02\t/* high 32 bits */\n+#define PIO180L    -3.04358939097084072823e-12\t/* Next 64 bits */\n \n-#ifdef GFC_REAL_16_IS_FLOAT128\t/* libquadmath.  */\n-#define SUFFIX(x) x ## q\n #else\n-#define SUFFIX(x) x ## l\n-#endif /* GFC_REAL_16_IS_FLOAT128  */\n+/* Proper float128 precision.  */\n+#define COSD_SMALL  0x1.p-51\t/* ~= 4.441e-16 */\n+#define COSD30      8.66025403784438646763723170752936183e-01\n+#define PIO180H     1.74532925199433197605003442731685936e-02\n+#define PIO180L     -2.39912634365882824665106671063098954e-17\n+#endif\n \n-#define TINY        SUFFIX(0x1.p-16400)\t/* ~= 1.28e-4937 */\n-#define COSD_SMALL  SUFFIX(0x1.p-51)\t/* ~= 4.441e-16 */\n-#undef  SIND_SMALL\t\t/* not precise */\n-#define COSD30      SUFFIX(8.66025403784438646763723170752936183e-01)\n-#define PIO180H     SUFFIX(1.74532925199433197605003442731685936e-02)\n-#define PIO180L     SUFFIX(-2.39912634365882824665106671063098954e-17)\n+#ifdef GFC_REAL_16_IS_LONG_DOUBLE\n+\n+#if defined(HAVE_FABSL) && defined(HAVE_FMODL) && defined(HAVE_COPYSIGNL)\n+\n+#ifdef HAVE_SINL\n+#define ENABLE_SIND\n+#endif\n+\n+#ifdef HAVE_COSL\n+#define ENABLE_COSD\n+#endif\n+\n+#ifdef HAVE_TANL\n+#define ENABLE_TAND\n+#endif\n+\n+#endif /* HAVE_FABSL && HAVE_FMODL && HAVE_COPYSIGNL */\n+\n+#else\n+\n+/* libquadmath: HAVE_*Q are never defined.  They must be available.  */\n+#define ENABLE_SIND\n+#define ENABLE_COSD\n+#define ENABLE_TAND\n+\n+#endif /* GFC_REAL_16_IS_LONG_DOUBLE */\n+\n+#ifdef GFC_REAL_16_INFINITY\n+#define HAVE_INFINITY_KIND\n+#endif\n \n #include \"trigd_lib.inc\"\n \n-#undef FTYPE\n+#undef KIND\n+#undef TINY\n #undef COSD_SMALL\n #undef SIND_SMALL\n #undef COSD30\n #undef PIO180H\n #undef PIO180L\n-#undef PIO180\n-#undef D2R\n-#undef CPYSGN\n-#undef FABS\n-#undef FMOD\n-#undef SIN\n-#undef COS\n-#undef TAN\n-#undef SIND\n-#undef COSD\n-#undef TAND\n-#undef SUFFIX\n+#undef ENABLE_SIND\n+#undef ENABLE_COSD\n+#undef ENABLE_TAND\n+#undef HAVE_INFINITY_KIND\n+\n #endif /* HAVE_GFC_REAL_16 */"}, {"sha": "ed228e8cd155bcf5c42776f04131ba492959bba7", "filename": "libgfortran/intrinsics/trigd.inc", "status": "modified", "additions": 56, "deletions": 27, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8eecc2a919033ad4224756a8759d8e94c0e4bc2/libgfortran%2Fintrinsics%2Ftrigd.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8eecc2a919033ad4224756a8759d8e94c0e4bc2/libgfortran%2Fintrinsics%2Ftrigd.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Ftrigd.inc?ref=e8eecc2a919033ad4224756a8759d8e94c0e4bc2", "patch": "@@ -33,10 +33,7 @@ libgfortran, these should be overridden using macros which will use native\n operations conforming to the same API. From the FE, the GMP/MPFR functions can\n be used as-is.\n \n-The following macros and GMP/FMPR functions are used and must be defined.\n-\n-\n-Types and names:\n+The following macros are used and must be defined, unless listed as [optional]:\n \n FTYPE\n     Type name for the real-valued parameter.\n@@ -56,32 +53,45 @@ ITYPE\n SIND, COSD, TRIGD\n     Names for the degree-valued trig functions defined by this module.\n \n+ENABLE_SIND, ENABLE_COSD, ENABLE_TAND\n+    Whether the degree-valued trig functions can be enabled.\n+\n+ERROR_RETURN(f, k, x)\n+    If ENABLE_<xxx>D is not defined, this is substituted to assert an\n+    error condition for function f, kind k, and parameter x.\n+    The function argument is one of {sind, cosd, tand}.\n \n-Literal values:\n+ISFINITE(x)\n+    Whether x is a regular number or zero (not inf or NaN).\n \n-TINY [optional]\n-    Value subtracted from 1 to cause rase INEXACT for COSD(x)\n-    for x << 1. If not set, COSD(x) for x <= COSD_SMALL simply returns 1.\n+D2R(x)\n+    Convert x from radians to degrees.\n \n-COSD_SMALL [optional]\n-    Value such that x <= COSD_SMALL implies COSD(x) = 1 to within the\n+SET_COSD30(x)\n+    Set x to COSD(30), or equivalently, SIND(60).\n+\n+TINY_LITERAL [optional]\n+    Value subtracted from 1 to cause raise INEXACT for COSD(x) for x << 1.\n+    If not set, COSD(x) for x <= COSD_SMALL_LITERAL simply returns 1.\n+\n+COSD_SMALL_LITERAL [optional]\n+    Value such that x <= COSD_SMALL_LITERAL implies COSD(x) = 1 to within the\n     precision of FTYPE. If not set, this condition is not checked.\n \n-SIND_SMALL [optional]\n-    Value such that x <= SIND_SMALL implies SIND(x) = D2R(x) to within\n+SIND_SMALL_LITERAL [optional]\n+    Value such that x <= SIND_SMALL_LITERAL implies SIND(x) = D2R(x) to within\n     the precision of FTYPE. If not set, this condition is not checked.\n \n-COSD30\n-    Value of SIND(60) and COSD(30).\n-\n */\n \n \n+#ifdef SIND\n /* Compute sind(x) = sin(x * pi / 180). */\n \n RETTYPE\n SIND (FTYPE x)\n {\n+#ifdef ENABLE_SIND\n   if (ISFINITE (x))\n     {\n       FTYPE s, one;\n@@ -92,12 +102,12 @@ SIND (FTYPE x)\n       mpfr_copysign (s, one, x, GFC_RND_MODE);\n       mpfr_clear (one);\n \n-#ifdef SIND_SMALL\n+#ifdef SIND_SMALL_LITERAL\n       /* sin(x) = x as x -> 0; but only for some precisions. */\n       FTYPE ax;\n       mpfr_init (ax);\n       mpfr_abs (ax, x, GFC_RND_MODE);\n-      if (mpfr_cmp_ld (ax, SIND_SMALL) < 0)\n+      if (mpfr_cmp_ld (ax, SIND_SMALL_LITERAL) < 0)\n \t{\n \t  D2R (x);\n \t  mpfr_clear (ax);\n@@ -109,7 +119,7 @@ SIND (FTYPE x)\n \n #else\n       mpfr_abs (x, x, GFC_RND_MODE);\n-#endif /* SIND_SMALL */\n+#endif /* SIND_SMALL_LITERAL */\n \n       /* Reduce angle to x in [0,360].  */\n       FTYPE period;\n@@ -213,30 +223,37 @@ SIND (FTYPE x)\n     mpfr_sub (x, x, x, GFC_RND_MODE);\n \n   RETURN (x);\n+\n+#else\n+  ERROR_RETURN(sind, KIND, x);\n+#endif // ENABLE_SIND\n }\n+#endif // SIND\n \n \n+#ifdef COSD\n /* Compute cosd(x) = cos(x * pi / 180).  */\n \n RETTYPE\n COSD (FTYPE x)\n {\n-#if defined(TINY) && defined(COSD_SMALL)\n-  static const volatile FTYPE tiny = TINY;\n+#ifdef ENABLE_COSD\n+#if defined(TINY_LITERAL) && defined(COSD_SMALL_LITERAL)\n+  static const volatile FTYPE tiny = TINY_LITERAL;\n #endif\n \n   if (ISFINITE (x))\n     {\n-#ifdef COSD_SMALL\n+#ifdef COSD_SMALL_LITERAL\n       FTYPE ax;\n       mpfr_init (ax);\n \n       mpfr_abs (ax, x, GFC_RND_MODE);\n       /* No spurious underflows!.  In radians, cos(x) = 1-x*x/2 as x -> 0.  */\n-      if (mpfr_cmp_ld (ax, COSD_SMALL) <= 0)\n+      if (mpfr_cmp_ld (ax, COSD_SMALL_LITERAL) <= 0)\n \t{\n \t  mpfr_set_ui (x, 1, GFC_RND_MODE);\n-#ifdef TINY\n+#ifdef TINY_LITERAL\n \t  /* Cause INEXACT.  */\n \t  if (!mpfr_zero_p (ax))\n \t    mpfr_sub_d (x, x, tiny, GFC_RND_MODE);\n@@ -250,7 +267,7 @@ COSD (FTYPE x)\n       mpfr_clear (ax);\n #else\n       mpfr_abs (x, x, GFC_RND_MODE);\n-#endif /* COSD_SMALL */\n+#endif /* COSD_SMALL_LITERAL */\n \n       /* Reduce angle to ax in [0,360].  */\n       FTYPE period;\n@@ -354,14 +371,21 @@ COSD (FTYPE x)\n     mpfr_sub (x, x, x, GFC_RND_MODE);\n \n   RETURN (x);\n+\n+#else\n+  ERROR_RETURN(cosd, KIND, x);\n+#endif // ENABLE_COSD\n }\n+#endif // COSD\n \n \n+#ifdef TAND\n /* Compute tand(x) = tan(x * pi / 180).  */\n \n RETTYPE\n TAND (FTYPE x)\n {\n+#ifdef ENABLE_TAND\n   if (ISFINITE (x))\n     {\n       FTYPE s, one;\n@@ -372,12 +396,12 @@ TAND (FTYPE x)\n       mpfr_copysign (s, one, x, GFC_RND_MODE);\n       mpfr_clear (one);\n \n-#ifdef SIND_SMALL\n+#ifdef SIND_SMALL_LITERAL\n       /* tan(x) = x as x -> 0; but only for some precisions. */\n       FTYPE ax;\n       mpfr_init (ax);\n       mpfr_abs (ax, x, GFC_RND_MODE);\n-      if (mpfr_cmp_ld (ax, SIND_SMALL) < 0)\n+      if (mpfr_cmp_ld (ax, SIND_SMALL_LITERAL) < 0)\n \t{\n \t  D2R (x);\n \t  mpfr_clear (ax);\n@@ -389,7 +413,7 @@ TAND (FTYPE x)\n \n #else\n       mpfr_abs (x, x, GFC_RND_MODE);\n-#endif /* SIND_SMALL */\n+#endif /* SIND_SMALL_LITERAL */\n \n       /* Reduce angle to x in [0,360].  */\n       FTYPE period;\n@@ -459,6 +483,11 @@ TAND (FTYPE x)\n     mpfr_sub (x, x, x, GFC_RND_MODE);\n \n   RETURN (x);\n+\n+#else\n+  ERROR_RETURN(tand, KIND, x);\n+#endif // ENABLE_TAND\n }\n+#endif // TAND\n \n /* vim: set ft=c: */"}, {"sha": "e90f9deaa5ad61dca571d9107755fb62b1653098", "filename": "libgfortran/intrinsics/trigd_lib.inc", "status": "modified", "additions": 94, "deletions": 16, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8eecc2a919033ad4224756a8759d8e94c0e4bc2/libgfortran%2Fintrinsics%2Ftrigd_lib.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8eecc2a919033ad4224756a8759d8e94c0e4bc2/libgfortran%2Fintrinsics%2Ftrigd_lib.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Ftrigd_lib.inc?ref=e8eecc2a919033ad4224756a8759d8e94c0e4bc2", "patch": "@@ -29,19 +29,66 @@ This replaces all GMP/MPFR functions used by trigd.inc with native versions.\n The precision is defined by FTYPE defined before including this file.\n The module which includes this file must define the following:\n \n-FTYPE             -- floating point type\n-SIND, COSD, TAND  -- names of the functions to define\n-SUFFIX(x)         -- add a literal suffix for floating point constants (f, ...)\n+KIND               -- floating point kind (4, 8, 10, 16)\n+HAVE_INFINITY_KIND -- defined iff the platform has GFC_REAL_<KIND>_INFINITY\n \n-COSD_SMALL [optional] -- for x <= COSD_SMALL, COSD(x) = 1 if set\n TINY       [optional] -- subtract from 1 under the above condition if set\n+COSD_SMALL [optional] -- for x <= COSD_SMALL, COSD(x) = 1 if set\n SIND_SMALL [optional] -- for x <= SIND_SMALL, SIND(x) = D2R(x) if set\n COSD30                -- literal value of COSD(30) to the precision of FTYPE\n PIO180H               -- upper bits of pi/180 for FMA\n PIO180L               -- lower bits of pi/180 for FMA\n \n  */\n \n+/* FTYPE := GFC_REAL_<K> */\n+#define FTYPE CONCAT_EXPAND(GFC_REAL_,KIND)\n+\n+/* LITERAL_SUFFIX := GFC_REAL_<K>_LITERAL_SUFFIX */\n+#define LITERAL_SUFFIX CONCAT_EXPAND(FTYPE,_LITERAL_SUFFIX)\n+\n+/* LITERAL(X) := GFC_REAL_<K>_LITERAL(X) */\n+#define LITERAL(x) CONCAT_EXPAND(x,LITERAL_SUFFIX)\n+\n+#define SIND CONCAT_EXPAND(sind_r, KIND)\n+#define COSD CONCAT_EXPAND(cosd_r, KIND)\n+#define TAND CONCAT_EXPAND(tand_r, KIND)\n+\n+#ifdef HAVE_INFINITY_KIND\n+/* GFC_REAL_X_INFINITY */\n+#define INFINITY_KIND CONCAT_EXPAND(FTYPE, _INFINITY)\n+#else\n+/* GFC_REAL_X_HUGE */\n+#define INFINITY_KIND CONCAT_EXPAND(FTYPE, _HUGE)\n+#endif\n+\n+#define CONCAT(x,y) x ## y\n+#define CONCAT_EXPAND(x,y) CONCAT(x,y)\n+\n+#define COPYSIGN LITERAL(copysign)\n+#define FMOD LITERAL(fmod)\n+#define FABS LITERAL(fabs)\n+#define FMA LITERAL(fma)\n+#define SIN LITERAL(sin)\n+#define COS LITERAL(cos)\n+#define TAN LITERAL(tan)\n+\n+#ifdef TINY\n+#define TINY_LITERAL LITERAL(TINY)\n+#endif\n+\n+#ifdef COSD_SMALL\n+#define COSD_SMALL_LITERAL LITERAL(COSD_SMALL)\n+#endif\n+\n+#ifdef SIND_SMALL\n+#define SIND_SMALL_LITERAL LITERAL(SIND_SMALL)\n+#endif\n+\n+#define COSD30_LITERAL LITERAL(COSD30)\n+#define PIO180H_LITERAL LITERAL(PIO180H)\n+#define PIO180L_LITERAL LITERAL(PIO180L)\n+\n #define ITYPE int\n #define GFC_RND_MODE 0\n #define RETTYPE FTYPE\n@@ -52,15 +99,15 @@ PIO180L               -- lower bits of pi/180 for FMA\n #define mpfr_init_set_ui(x, v, rnd) (x = (v))\n #define mpfr_clear(x) do { } while (0)\n #define mpfr_swap(x, y) do { FTYPE z = y; y = x; x = z; } while (0)\n-#define mpfr_copysign(rop, op1, op2, rnd) rop = SUFFIX(copysign)((op1), (op2))\n-#define mpfr_fmod(rop, x, d, rnd) (rop = SUFFIX(fmod)((x), (d)))\n-#define mpfr_abs(rop, op, rnd) (rop = SUFFIX(fabs)(op))\n+#define mpfr_copysign(rop, op1, op2, rnd) rop = COPYSIGN((op1), (op2))\n+#define mpfr_fmod(rop, x, d, rnd) (rop = FMOD((x), (d)))\n+#define mpfr_abs(rop, op, rnd) (rop = FABS(op))\n #define mpfr_cmp_ld(x, y) ((x) - (y))\n #define mpfr_cmp_ui(x, n) ((x) - (n))\n #define mpfr_zero_p(x) ((x) == 0)\n #define mpfr_set(rop, x, rnd) (rop = (x))\n-#define mpfr_set_zero(rop, s) (rop = SUFFIX(copysign)(0, (s)))\n-#define mpfr_set_inf(rop, s) (rop = ((s)*-2 + 1) * INFINITY)\n+#define mpfr_set_zero(rop, s) (rop = COPYSIGN(0, (s)))\n+#define mpfr_set_inf(rop, s) (rop = ((s)*-2 + 1) * INFINITY_KIND)\n #define mpfr_set_ui(rop, n, rnd) (rop = (n))\n #define mpfr_set_si(rop, n, rnd) (rop = (n))\n #define mpfr_set_ld(rop, x, rnd) (rop = (x))\n@@ -72,32 +119,63 @@ PIO180L               -- lower bits of pi/180 for FMA\n #define mpfr_sub(rop, op1, op2, rnd)    (rop = ((op1) - (op2)))\n #define mpfr_ui_sub(rop, op1, op2, rnd) (rop = ((op1) - (op2)))\n #define mpfr_neg(rop, op, rnd) (rop = -(op))\n-#define mpfr_sin(rop, x, rnd) (rop = SUFFIX(sin)(x))\n-#define mpfr_cos(rop, x, rnd) (rop = SUFFIX(cos)(x))\n-#define mpfr_tan(rop, x, rnd) (rop = SUFFIX(tan)(x))\n+#define mpfr_sin(rop, x, rnd) (rop = SIN(x))\n+#define mpfr_cos(rop, x, rnd) (rop = COS(x))\n+#define mpfr_tan(rop, x, rnd) (rop = TAN(x))\n \n #define mpz_init(n) do { } while (0)\n #define mpz_clear(x) do { } while (0)\n #define mpz_cmp_ui(x, y) ((x) - (y))\n #define mpz_divisible_ui_p(n, d) ((n) % (d) == 0)\n \n-#define FMA(x,y,z)  SUFFIX(fma)((x), (y), (z))\n-#define D2R(x) (x = FMA((x), PIO180H, (x) * PIO180L))\n-\n-#define SET_COSD30(x) (x = COSD30)\n+#define D2R(x) (x = FMA((x), PIO180H_LITERAL, (x) * PIO180L_LITERAL))\n \n+#define SET_COSD30(x) (x = COSD30_LITERAL)\n \n+#ifdef SIND\n extern FTYPE SIND (FTYPE);\n export_proto (SIND);\n+#endif\n \n+#ifdef COSD\n extern FTYPE COSD (FTYPE);\n export_proto (COSD);\n+#endif\n \n+#ifdef TAND\n extern FTYPE TAND (FTYPE);\n export_proto (TAND);\n+#endif\n \n #include \"trigd.inc\"\n \n+#undef FTYPE\n+#undef LITERAL_SUFFIX\n+#undef LITERAL\n+#undef CONCAT3\n+#undef CONCAT3_EXPAND\n+#undef CONCAT\n+#undef CONCAT_EXPAND\n+#undef SIND\n+#undef COSD\n+#undef TAND\n+#undef INFINITY_KIND\n+\n+#undef COPYSIGN\n+#undef FMOD\n+#undef FABS\n+#undef FMA\n+#undef SIN\n+#undef COS\n+#undef TAN\n+\n+#undef TINY_LITERAL\n+#undef COSD_SMALL_LITERAL\n+#undef SIND_SMALL_LITERAL\n+#undef COSD30_LITERAL\n+#undef PIO180H_LITERAL\n+#undef PIO180L_LITERAL\n+\n #undef ITYPE\n #undef GFC_RND_MODE\n #undef RETTYPE"}]}