{"sha": "bf687b8085403b94209269e15491f286644ec10b", "node_id": "C_kwDOANBUbNoAKGJmNjg3YjgwODU0MDNiOTQyMDkyNjllMTU0OTFmMjg2NjQ0ZWMxMGI", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2021-12-29T07:10:46Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-10T08:19:30Z"}, "message": "[Ada] Optimize nonstandard boolean conversions\n\nThis patch improves the generated code for nonstandard boolean types.\n\nOne of the improvements extends the code that avoids converting back\nto the nonstandard boolean type an expression computed as standard\nboolean, when it will be converted to a(nother) nonstandard boolean\ntype.\n\nThe other improvement involves using the literal representation\nconstants in an If_Expression instead of dereferencing the T'Val array\nwhen converting to a (nonstandard) boolean type. Avoiding the array\ndereference enables the compiler middle-end to propagate the constants\nand perform optimizations based on them, to the point of obviating the\nimprovement above.\n\nUnfortunately, the code generated with this alternate expansion tends\nto be slightly larger if it turns out to not enable any further\noptimization, though it's most certainly faster, especially on targets\nwith conditional moves, more so if \"store flag\" is slow, as on x86.\nStill, the array dereference is more straightforward and shorter, so\nI've arranged for this alternate expansion to be used only when\noptimizing for speed.\n\ngcc/ada/\n\n\t* exp_util.adb (Adjust_Result_Type): Leave result in\n\tStandard.Boolean if it's going to be converted to another\n\tboolean type.\n\t* exp_ch4.adb (Expand_N_Type_Conversion): When optimizing,\n\tconvert to nonstandard booleans with an if_expression with\n\tboolean literals.", "tree": {"sha": "733cb752df74e859c1b174f36a19f7e5ecffcdf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/733cb752df74e859c1b174f36a19f7e5ecffcdf1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf687b8085403b94209269e15491f286644ec10b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf687b8085403b94209269e15491f286644ec10b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf687b8085403b94209269e15491f286644ec10b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf687b8085403b94209269e15491f286644ec10b/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81d33c5c9211dd65b2ffd29424e403582e4542f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81d33c5c9211dd65b2ffd29424e403582e4542f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81d33c5c9211dd65b2ffd29424e403582e4542f9"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "f827fb037f913c77fd97f5d5f2e4146ee5997d04", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf687b8085403b94209269e15491f286644ec10b/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf687b8085403b94209269e15491f286644ec10b/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=bf687b8085403b94209269e15491f286644ec10b", "patch": "@@ -12757,18 +12757,35 @@ package body Exp_Ch4 is\n          if not Has_Compatible_Representation (Target_Type, Operand_Type)\n            and then not Conversion_OK (N)\n          then\n+            if Optimization_Level > 0\n+              and then Is_Boolean_Type (Target_Type)\n+            then\n+               --  Convert x(y) to (if y then x'(True) else x'(False)).\n+               --  Use literals, instead of indexing x'val, to enable\n+               --  further optimizations in the middle-end.\n \n-            --  Convert: x(y) to x'val (ytyp'pos (y))\n+               Rewrite (N,\n+                 Make_If_Expression (Loc,\n+                   Expressions => New_List (\n+                     Operand,\n+                     Convert_To (Target_Type,\n+                                 New_Occurrence_Of (Standard_True, Loc)),\n+                     Convert_To (Target_Type,\n+                                 New_Occurrence_Of (Standard_False, Loc)))));\n \n-            Rewrite (N,\n-              Make_Attribute_Reference (Loc,\n-                Prefix         => New_Occurrence_Of (Target_Type, Loc),\n-                Attribute_Name => Name_Val,\n-                Expressions    => New_List (\n-                  Make_Attribute_Reference (Loc,\n-                    Prefix         => New_Occurrence_Of (Operand_Type, Loc),\n-                    Attribute_Name => Name_Pos,\n-                    Expressions    => New_List (Operand)))));\n+            else\n+               --  Convert: x(y) to x'val (ytyp'pos (y))\n+\n+               Rewrite (N,\n+                 Make_Attribute_Reference (Loc,\n+                   Prefix         => New_Occurrence_Of (Target_Type, Loc),\n+                   Attribute_Name => Name_Val,\n+                   Expressions    => New_List (\n+                     Make_Attribute_Reference (Loc,\n+                       Prefix         => New_Occurrence_Of (Operand_Type, Loc),\n+                       Attribute_Name => Name_Pos,\n+                       Expressions    => New_List (Operand)))));\n+            end if;\n \n             Analyze_And_Resolve (N, Target_Type);\n          end if;"}, {"sha": "795c1b082f7a03d0ac37f9fb6e9da134c85a1695", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf687b8085403b94209269e15491f286644ec10b/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf687b8085403b94209269e15491f286644ec10b/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=bf687b8085403b94209269e15491f286644ec10b", "patch": "@@ -424,6 +424,9 @@ package body Exp_Util is\n             elsif     KP in N_Op_Boolean\n               or else KP in N_Short_Circuit\n               or else KP = N_Op_Not\n+              or else (KP in N_Type_Conversion\n+                           | N_Unchecked_Type_Conversion\n+                        and then Is_Boolean_Type (Etype (Parent (N))))\n             then\n                return;\n "}]}