{"sha": "392a81b96ea19e2d302372a4261b6183e82d1477", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkyYTgxYjk2ZWExOWUyZDMwMjM3MmE0MjYxYjYxODNlODJkMTQ3Nw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2016-06-09T12:02:17Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2016-06-09T12:02:17Z"}, "message": "re PR c++/71465 (ICE on invalid C++ code (with duplicate base) on x86_64-linux-gnu: in dfs_build_secondary_vptr_vtt_inits, at cp/class.c:9075)\n\n/cp\n2016-06-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/71465\n\tRevert:\n\t2016-06-04  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/70202\n\t* parser.c (cp_parser_class_head): When xref_basetypes fails and\n\temits an error do not zero the type.\n\t\n/testsuite\n2016-06-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/71465\n\t* g++.dg/inherit/crash5.C: New.\n\tRevert:\n\t2016-06-04  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/70202\n\t* g++.dg/inherit/crash5.C: New.\n\t* g++.dg/inherit/virtual1.C: Adjust.\n\nFrom-SVN: r237258", "tree": {"sha": "b4035e4632d4c0f436c43d5ea4bfde61238bbeff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4035e4632d4c0f436c43d5ea4bfde61238bbeff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/392a81b96ea19e2d302372a4261b6183e82d1477", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/392a81b96ea19e2d302372a4261b6183e82d1477", "html_url": "https://github.com/Rust-GCC/gccrs/commit/392a81b96ea19e2d302372a4261b6183e82d1477", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/392a81b96ea19e2d302372a4261b6183e82d1477/comments", "author": null, "committer": null, "parents": [{"sha": "fdf3a386e02a0ab89e72437504168545fd234321", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdf3a386e02a0ab89e72437504168545fd234321", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdf3a386e02a0ab89e72437504168545fd234321"}], "stats": {"total": 46, "additions": 32, "deletions": 14}, "files": [{"sha": "a94cebea7dc9937bf74071416effc85963726b70", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392a81b96ea19e2d302372a4261b6183e82d1477/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392a81b96ea19e2d302372a4261b6183e82d1477/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=392a81b96ea19e2d302372a4261b6183e82d1477", "patch": "@@ -1,3 +1,13 @@\n+2016-06-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/71465\n+\tRevert:\n+\t2016-06-04  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/70202\n+\t* parser.c (cp_parser_class_head): When xref_basetypes fails and\n+\temits an error do not zero the type.\n+\n 2016-06-08  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* decl.c (maybe_deduce_size_from_array_init): Use"}, {"sha": "e01353d5dc1416437b627e49ac03797f9fa70a16", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392a81b96ea19e2d302372a4261b6183e82d1477/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392a81b96ea19e2d302372a4261b6183e82d1477/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=392a81b96ea19e2d302372a4261b6183e82d1477", "patch": "@@ -22050,8 +22050,9 @@ cp_parser_class_head (cp_parser* parser,\n \n   /* If we're really defining a class, process the base classes.\n      If they're invalid, fail.  */\n-  if (type && cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))\n-    xref_basetypes (type, bases);\n+  if (type && cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE)\n+      && !xref_basetypes (type, bases))\n+    type = NULL_TREE;\n \n  done:\n   /* Leave the scope given by the nested-name-specifier.  We will"}, {"sha": "b1ea45ada40a54fcba75d11df6e0486445099eeb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392a81b96ea19e2d302372a4261b6183e82d1477/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392a81b96ea19e2d302372a4261b6183e82d1477/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=392a81b96ea19e2d302372a4261b6183e82d1477", "patch": "@@ -1,3 +1,14 @@\n+2016-06-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/71465\n+\t* g++.dg/inherit/crash5.C: New.\n+\tRevert:\n+\t2016-06-04  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/70202\n+\t* g++.dg/inherit/crash5.C: New.\n+\t* g++.dg/inherit/virtual1.C: Adjust.\n+\n 2016-06-09  Martin Liska  <mliska@suse.cz>\n \n \t* g++.dg/predict-loop-exit-1.C: Scan for a new dump format."}, {"sha": "5a4002e0f8a443470577c396649603ff67d15c1b", "filename": "gcc/testsuite/g++.dg/inherit/crash5.C", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392a81b96ea19e2d302372a4261b6183e82d1477/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcrash5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392a81b96ea19e2d302372a4261b6183e82d1477/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcrash5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcrash5.C?ref=392a81b96ea19e2d302372a4261b6183e82d1477", "patch": "@@ -1,10 +1,6 @@\n-// PR c++/70202\n+// PR c++/71465\n \n-class A\n-{\n-  virtual void foo () { }\n-};\n-class B : public A, A { };  // { dg-error \"duplicate base type\" }\n-\n-B b1, &b2 = b1;\n-A a = b2;\n+struct A { virtual void foo () {} };\n+struct B : virtual A {};\n+struct C : virtual A {}; \n+struct D : C, B, C {};  // { dg-error \"duplicate base type\" }"}, {"sha": "08bcbb143cfb0a0557f4286587d1ec7f40599bcd", "filename": "gcc/testsuite/g++.dg/inherit/virtual1.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392a81b96ea19e2d302372a4261b6183e82d1477/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392a81b96ea19e2d302372a4261b6183e82d1477/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual1.C?ref=392a81b96ea19e2d302372a4261b6183e82d1477", "patch": "@@ -5,8 +5,8 @@ struct A\n     virtual ~A() {}\n };\n \n-struct B : A, virtual A {};     // { dg-error \"duplicate base\" }\n+struct B : A, virtual A {};     // { dg-error \"duplicate base|forward declaration\" }\n \n-struct C : A, B {};             // { dg-error \"duplicate base\" }\n+struct C : A, B {};             // { dg-error \"duplicate base|invalid use\" }\n \n-C c;\n+C c;                            // { dg-error \"aggregate\" }"}]}