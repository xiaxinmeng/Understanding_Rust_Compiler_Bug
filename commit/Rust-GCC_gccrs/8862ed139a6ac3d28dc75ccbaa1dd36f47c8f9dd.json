{"sha": "8862ed139a6ac3d28dc75ccbaa1dd36f47c8f9dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg2MmVkMTM5YTZhYzNkMjhkYzc1Y2NiYWExZGQzNmY0N2M4ZjlkZA==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2019-07-04T11:43:47Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@gcc.gnu.org", "date": "2019-07-04T11:43:47Z"}, "message": "Improve OpenMP map diagnostics.\n\n2019-07-04  Andrew Stubbs  <ams@codesourcery.com>\n\n\tgcc/cp/\n\t* cp-tree.h (cp_omp_emit_unmappable_type_notes): New prototype.\n\t* decl.c (cp_finish_decl): Call cp_omp_emit_unmappable_type_notes.\n\t* decl2.c (cp_omp_mappable_type): Move contents to ...\n\t(cp_omp_mappable_type_1):  ... here and add note output.\n\t(cp_omp_emit_unmappable_type_notes): New function.\n\t* semantics.c (finish_omp_clauses): Call\n\tcp_omp_emit_unmappable_type_notes in four places.\n\n\tgcc/testsuite/\n\t* g++.dg/gomp/unmappable-1.C: New file.\n\nFrom-SVN: r273078", "tree": {"sha": "d197ed5096e7ecf36db67f3d48ccf35b0e7595dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d197ed5096e7ecf36db67f3d48ccf35b0e7595dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8862ed139a6ac3d28dc75ccbaa1dd36f47c8f9dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8862ed139a6ac3d28dc75ccbaa1dd36f47c8f9dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8862ed139a6ac3d28dc75ccbaa1dd36f47c8f9dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8862ed139a6ac3d28dc75ccbaa1dd36f47c8f9dd/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "70980ea225624d49591ae24262c55f2328517b62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70980ea225624d49591ae24262c55f2328517b62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70980ea225624d49591ae24262c55f2328517b62"}], "stats": {"total": 100, "additions": 89, "deletions": 11}, "files": [{"sha": "c1dfb7cee390a96e577f382ed518b5870e525d5d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8862ed139a6ac3d28dc75ccbaa1dd36f47c8f9dd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8862ed139a6ac3d28dc75ccbaa1dd36f47c8f9dd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8862ed139a6ac3d28dc75ccbaa1dd36f47c8f9dd", "patch": "@@ -1,3 +1,13 @@\n+2019-07-04  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* cp-tree.h (cp_omp_emit_unmappable_type_notes): New prototype.\n+\t* decl.c (cp_finish_decl): Call cp_omp_emit_unmappable_type_notes.\n+\t* decl2.c (cp_omp_mappable_type): Move contents to ...\n+\t(cp_omp_mappable_type_1):  ... here and add note output.\n+\t(cp_omp_emit_unmappable_type_notes): New function.\n+\t* semantics.c (finish_omp_clauses): Call\n+\tcp_omp_emit_unmappable_type_notes in four places.\n+\n 2019-07-03  Martin Liska  <mliska@suse.cz>\n \n \t* call.c (build_new_op_1): Remove"}, {"sha": "e814bc973f85844244536c67c30e3425735e19ee", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8862ed139a6ac3d28dc75ccbaa1dd36f47c8f9dd/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8862ed139a6ac3d28dc75ccbaa1dd36f47c8f9dd/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=8862ed139a6ac3d28dc75ccbaa1dd36f47c8f9dd", "patch": "@@ -6536,6 +6536,7 @@ extern int parm_index                           (tree);\n extern tree vtv_start_verification_constructor_init_function (void);\n extern tree vtv_finish_verification_constructor_init_function (tree);\n extern bool cp_omp_mappable_type\t\t(tree);\n+extern bool cp_omp_emit_unmappable_type_notes\t(tree);\n extern void cp_check_const_attributes (tree);\n \n /* in error.c */"}, {"sha": "a178b2208df655cd150c6e50a868d0608e12962c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8862ed139a6ac3d28dc75ccbaa1dd36f47c8f9dd/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8862ed139a6ac3d28dc75ccbaa1dd36f47c8f9dd/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=8862ed139a6ac3d28dc75ccbaa1dd36f47c8f9dd", "patch": "@@ -7433,8 +7433,11 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n \t\t\t    DECL_ATTRIBUTES (decl));\n       complete_type (TREE_TYPE (decl));\n       if (!cp_omp_mappable_type (TREE_TYPE (decl)))\n-\terror (\"%q+D in declare target directive does not have mappable type\",\n-\t       decl);\n+\t{\n+\t  error (\"%q+D in declare target directive does not have mappable\"\n+\t\t \" type\", decl);\n+\t  cp_omp_emit_unmappable_type_notes (TREE_TYPE (decl));\n+\t}\n       else if (!lookup_attribute (\"omp declare target\",\n \t\t\t\t  DECL_ATTRIBUTES (decl))\n \t       && !lookup_attribute (\"omp declare target link\","}, {"sha": "b415716c7dda6069fd575bfb786428fad34ffd33", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 45, "deletions": 9, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8862ed139a6ac3d28dc75ccbaa1dd36f47c8f9dd/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8862ed139a6ac3d28dc75ccbaa1dd36f47c8f9dd/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=8862ed139a6ac3d28dc75ccbaa1dd36f47c8f9dd", "patch": "@@ -1406,32 +1406,68 @@ cp_check_const_attributes (tree attributes)\n     }\n }\n \n-/* Return true if TYPE is an OpenMP mappable type.  */\n-bool\n-cp_omp_mappable_type (tree type)\n+/* Return true if TYPE is an OpenMP mappable type.\n+   If NOTES is non-zero, emit a note message for each problem.  */\n+static bool\n+cp_omp_mappable_type_1 (tree type, bool notes)\n {\n+  bool result = true;\n+\n   /* Mappable type has to be complete.  */\n   if (type == error_mark_node || !COMPLETE_TYPE_P (type))\n-    return false;\n+    {\n+      if (notes)\n+\t{\n+\t  tree decl = TYPE_MAIN_DECL (type);\n+\t  inform ((decl ? DECL_SOURCE_LOCATION (decl) : input_location),\n+\t\t  \"incomplete type %qT is not mappable\", type);\n+\t}\n+      result = false;\n+    }\n   /* Arrays have mappable type if the elements have mappable type.  */\n   while (TREE_CODE (type) == ARRAY_TYPE)\n     type = TREE_TYPE (type);\n   /* A mappable type cannot contain virtual members.  */\n   if (CLASS_TYPE_P (type) && CLASSTYPE_VTABLES (type))\n-    return false;\n+    {\n+      if (notes)\n+\tinform (DECL_SOURCE_LOCATION (TYPE_MAIN_DECL (type)),\n+\t\t\"type %qT with virtual members is not mappable\", type);\n+      result = false;\n+    }\n   /* All data members must be non-static.  */\n   if (CLASS_TYPE_P (type))\n     {\n       tree field;\n       for (field = TYPE_FIELDS (type); field; field = DECL_CHAIN (field))\n \tif (VAR_P (field))\n-\t  return false;\n+\t  {\n+\t    if (notes)\n+\t      inform (DECL_SOURCE_LOCATION (field),\n+\t\t      \"static field %qD is not mappable\", field);\n+\t    result = false;\n+\t  }\n \t/* All fields must have mappable types.  */\n \telse if (TREE_CODE (field) == FIELD_DECL\n-\t\t && !cp_omp_mappable_type (TREE_TYPE (field)))\n-\t  return false;\n+\t\t && !cp_omp_mappable_type_1 (TREE_TYPE (field), notes))\n+\t  result = false;\n     }\n-  return true;\n+  return result;\n+}\n+\n+/* Return true if TYPE is an OpenMP mappable type.  */\n+bool\n+cp_omp_mappable_type (tree type)\n+{\n+  return cp_omp_mappable_type_1 (type, false);\n+}\n+\n+/* Return true if TYPE is an OpenMP mappable type.\n+   Emit an error messages if not.  */\n+bool\n+cp_omp_emit_unmappable_type_notes (tree type)\n+{\n+  return cp_omp_mappable_type_1 (type, true);\n }\n \n /* Return the last pushed declaration for the symbol DECL or NULL"}, {"sha": "cd24490bc6b7a7e366f45395d5d7d00f78b1dc9b", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8862ed139a6ac3d28dc75ccbaa1dd36f47c8f9dd/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8862ed139a6ac3d28dc75ccbaa1dd36f47c8f9dd/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=8862ed139a6ac3d28dc75ccbaa1dd36f47c8f9dd", "patch": "@@ -7090,6 +7090,7 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t\t\t\"array section does not have mappable type \"\n \t\t\t\t\"in %qs clause\",\n \t\t\t\tomp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n+\t\t      cp_omp_emit_unmappable_type_notes (TREE_TYPE (t));\n \t\t      remove = true;\n \t\t    }\n \t\t  while (TREE_CODE (t) == ARRAY_REF)\n@@ -7158,6 +7159,7 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t  error_at (OMP_CLAUSE_LOCATION (c),\n \t\t\t    \"%qE does not have a mappable type in %qs clause\",\n \t\t\t    t, omp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n+\t\t  cp_omp_emit_unmappable_type_notes (TREE_TYPE (t));\n \t\t  remove = true;\n \t\t}\n \t      while (TREE_CODE (t) == COMPONENT_REF)\n@@ -7236,6 +7238,7 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t      error_at (OMP_CLAUSE_LOCATION (c),\n \t\t\t\"%qD does not have a mappable type in %qs clause\", t,\n \t\t\tomp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n+\t      cp_omp_emit_unmappable_type_notes (TREE_TYPE (t));\n \t      remove = true;\n \t    }\n \t  else if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_MAP\n@@ -7384,6 +7387,7 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t      error_at (OMP_CLAUSE_LOCATION (c),\n \t\t\t\"%qD does not have a mappable type in %qs clause\", t,\n \t\t\tomp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n+\t      cp_omp_emit_unmappable_type_notes (TREE_TYPE (t));\n \t      remove = true;\n \t    }\n \t  if (remove)"}, {"sha": "a974b11b5c28f43518892a6361f71a92cd5afa32", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8862ed139a6ac3d28dc75ccbaa1dd36f47c8f9dd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8862ed139a6ac3d28dc75ccbaa1dd36f47c8f9dd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8862ed139a6ac3d28dc75ccbaa1dd36f47c8f9dd", "patch": "@@ -1,3 +1,7 @@\n+2019-07-04  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* g++.dg/gomp/unmappable-1.C: New file.\n+\n 2019-07-04  Javier Miranda  <miranda@adacore.com>\n \n \t* gnat.dg/cpp_constructor.adb, gnat.dg/cpp_constructor_fp.ads,"}, {"sha": "d00ccb5ad796f840f2ee6851120efc0e096dd9ab", "filename": "gcc/testsuite/g++.dg/gomp/unmappable-1.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8862ed139a6ac3d28dc75ccbaa1dd36f47c8f9dd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Funmappable-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8862ed139a6ac3d28dc75ccbaa1dd36f47c8f9dd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Funmappable-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Funmappable-1.C?ref=8862ed139a6ac3d28dc75ccbaa1dd36f47c8f9dd", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fopenmp\" } */\n+\n+class C /* { dg-message \"type .C. with virtual members is not mappable\" } */\n+{\n+public:\n+  static int static_member; /* { dg-message \"static field .C::static_member. is not mappable\" } */\n+  virtual void f() {}\n+};\n+\n+extern C v[];\n+\n+int\n+main ()\n+{\n+#pragma omp target map(v) /* { dg-error \".v. does not have a mappable type in .map. clause\" } */\n+  /* { dg-message \"incomplete type .C \\\\\\[\\\\\\]. is not mappable\" \"\" { target *-*-* } .-1 } */\n+  {\n+  }\n+}"}]}