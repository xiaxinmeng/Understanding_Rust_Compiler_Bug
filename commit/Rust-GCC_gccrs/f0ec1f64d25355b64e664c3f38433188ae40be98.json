{"sha": "f0ec1f64d25355b64e664c3f38433188ae40be98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBlYzFmNjRkMjUzNTViNjRlNjY0YzNmMzg0MzMxODhhZTQwYmU5OA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-02T22:18:02Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-02T22:18:02Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1392", "tree": {"sha": "25ecdf5e53009bc3ad2a709e8c913b121b710760", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25ecdf5e53009bc3ad2a709e8c913b121b710760"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0ec1f64d25355b64e664c3f38433188ae40be98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0ec1f64d25355b64e664c3f38433188ae40be98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0ec1f64d25355b64e664c3f38433188ae40be98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0ec1f64d25355b64e664c3f38433188ae40be98/comments", "author": null, "committer": null, "parents": [{"sha": "52d3ac7640841d8015c68520b3c97c4973f7bdba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52d3ac7640841d8015c68520b3c97c4973f7bdba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52d3ac7640841d8015c68520b3c97c4973f7bdba"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "19b42e64431162f1388bd77236ad0238912eceef", "filename": "gcc/Makefile.in", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ec1f64d25355b64e664c3f38433188ae40be98/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ec1f64d25355b64e664c3f38433188ae40be98/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=f0ec1f64d25355b64e664c3f38433188ae40be98", "patch": "@@ -350,7 +350,7 @@ OBJS = toplev.o version.o tree.o print-tree.o stor-layout.o fold-const.o \\\n  rtl.o print-rtl.o rtlanal.o emit-rtl.o \\\n  dbxout.o sdbout.o dwarfout.o xcoffout.o \\\n  integrate.o jump.o cse.o loop.o unroll.o flow.o stupid.o combine.o \\\n- regclass.o local-alloc.o global-alloc.o reload.o reload1.o caller-save.o \\\n+ regclass.o local-alloc.o global.o reload.o reload1.o caller-save.o \\\n  insn-peep.o reorg.o sched.o final.o recog.o reg-stack.o \\\n  insn-recog.o insn-extract.o insn-output.o insn-emit.o \\\n  insn-attrtab.o aux-output.o getpwd.o $(EXTRA_OBJS)\n@@ -823,7 +823,7 @@ regclass.o : regclass.c $(CONFIG_H) $(RTL_H) hard-reg-set.h flags.h \\\n    basic-block.h regs.h insn-config.h recog.h reload.h real.h\n local-alloc.o : local-alloc.c $(CONFIG_H) $(RTL_H) flags.h basic-block.h \\\n    regs.h hard-reg-set.h insn-config.h recog.h output.h\n-global-alloc.o : global-alloc.c $(CONFIG_H) $(RTL_H) flags.h  \\\n+global.o : global.c $(CONFIG_H) $(RTL_H) flags.h  \\\n    basic-block.h regs.h hard-reg-set.h insn-config.h output.h\n \n reload.o : reload.c $(CONFIG_H) $(RTL_H) flags.h \\\n@@ -1351,7 +1351,7 @@ install-dir:\n \t-if [ -d $(mandir) ] ; then true ; else mkdir $(mandir) ; fi\n \n # Install the compiler executables built during cross compilation.\n-install-common: native install-dir\n+install-common: native install-dir xgcc $(srcdir)/g++ $(srcdir)/c++ $(EXTRA_PARTS)\n \tfor file in $(COMPILERS); do \\\n \t  if [ -f $$file ] ; then \\\n \t    rm -f $(libsubdir)/$$file; \\\n@@ -1365,8 +1365,13 @@ install-common: native install-dir\n \t    $(INSTALL_PROGRAM) $$file $(libsubdir)/$$file; \\\n \t  else true; fi; \\\n \tdone\n-\t-rm -f $(libsubdir)/specs\n-\t$(INSTALL_DATA) specs $(libsubdir)/specs\n+# Don't mess with specs if it doesn't exist yet.\n+# We can't make it a dependency because with a cross compiler\n+# you have to make specs on the target machine or not at all.\n+\tif [ -f specs ] ; then \\\n+\t  -rm -f $(libsubdir)/specs; \\\n+\t  $(INSTALL_DATA) specs $(libsubdir)/specs; \\\n+\tfi\n # Install the driver program as gcc-$(target)\n # and also as either gcc (if native) or $(tooldir)/bin/gcc.\n \t-if [ -f gcc-cross ] ; then \\"}]}