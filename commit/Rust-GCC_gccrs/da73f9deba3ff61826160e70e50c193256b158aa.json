{"sha": "da73f9deba3ff61826160e70e50c193256b158aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE3M2Y5ZGViYTNmZjYxODI2MTYwZTcwZTUwYzE5MzI1NmIxNThhYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-07-02T10:37:33Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-07-02T10:37:33Z"}, "message": "stl_bvector.h: Fully qualify standard functions with std::, thus avoiding Koenig lookup.\n\n2003-07-02  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/bits/stl_bvector.h: Fully qualify standard\n\tfunctions with std::, thus avoiding Koenig lookup.\n\t* include/bits/stl_construct.h: Likewise.\n\t* include/bits/stl_deque.h: Likewise.\n\nFrom-SVN: r68828", "tree": {"sha": "dc2ad2d57789c134d171d51d58288ec92a5599c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc2ad2d57789c134d171d51d58288ec92a5599c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da73f9deba3ff61826160e70e50c193256b158aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da73f9deba3ff61826160e70e50c193256b158aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da73f9deba3ff61826160e70e50c193256b158aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da73f9deba3ff61826160e70e50c193256b158aa/comments", "author": null, "committer": null, "parents": [{"sha": "1c3800951bab6cf609691aa57288e6f9cf1b38d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c3800951bab6cf609691aa57288e6f9cf1b38d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c3800951bab6cf609691aa57288e6f9cf1b38d8"}], "stats": {"total": 113, "additions": 60, "deletions": 53}, "files": [{"sha": "848b850cdce2c840bc8b8d3dd44d7ccf420675d9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da73f9deba3ff61826160e70e50c193256b158aa/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da73f9deba3ff61826160e70e50c193256b158aa/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=da73f9deba3ff61826160e70e50c193256b158aa", "patch": "@@ -1,3 +1,10 @@\n+2003-07-02  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/bits/stl_bvector.h: Fully qualify standard\n+\tfunctions with std::, thus avoiding Koenig lookup.\n+\t* include/bits/stl_construct.h: Likewise.\n+\t* include/bits/stl_deque.h: Likewise.\n+\n 2003-07-02  Paolo Carlini  <pcarlini@unitus.it>\n \n \t* testsuite/22_locale/num_put/put/char/7.cc: Include"}, {"sha": "e8f8b0da82c245b4c8382c6aa522af2bb5940c6c", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da73f9deba3ff61826160e70e50c193256b158aa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da73f9deba3ff61826160e70e50c193256b158aa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=da73f9deba3ff61826160e70e50c193256b158aa", "patch": "@@ -380,17 +380,17 @@ template <typename _Alloc>\n     }\n     void _M_insert_aux(iterator __position, bool __x) {\n       if (this->_M_finish._M_p != this->_M_end_of_storage) {\n-        copy_backward(__position, this->_M_finish, this->_M_finish + 1);\n+        std::copy_backward(__position, this->_M_finish, this->_M_finish + 1);\n         *__position = __x;\n         ++this->_M_finish;\n       }\n       else {\n         size_type __len = size() \n \t                  ? 2 * size() : static_cast<size_type>(_S_word_bit);\n         _Bit_type * __q = _M_bit_alloc(__len);\n-        iterator __i = copy(begin(), __position, iterator(__q, 0));\n+        iterator __i = std::copy(begin(), __position, iterator(__q, 0));\n         *__i++ = __x;\n-        this->_M_finish = copy(__position, end(), __i);\n+        this->_M_finish = std::copy(__position, end(), __i);\n         _M_deallocate();\n         this->_M_end_of_storage = __q + (__len + _S_word_bit - 1)/_S_word_bit;\n         this->_M_start = iterator(__q, 0);\n@@ -412,7 +412,7 @@ template <typename _Alloc>\n                              forward_iterator_tag) {\n       size_type __n = std::distance(__first, __last);\n       _M_initialize(__n);\n-      copy(__first, __last, this->_M_start);\n+      std::copy(__first, __last, this->_M_start);\n     }\n   \n     template <class _InputIterator>\n@@ -432,17 +432,17 @@ template <typename _Alloc>\n       if (__first != __last) {\n         size_type __n = std::distance(__first, __last);\n         if (capacity() - size() >= __n) {\n-          copy_backward(__position, end(),\n-\t\t\tthis->_M_finish + difference_type(__n));\n-          copy(__first, __last, __position);\n+          std::copy_backward(__position, end(),\n+\t\t\t     this->_M_finish + difference_type(__n));\n+          std::copy(__first, __last, __position);\n           this->_M_finish += difference_type(__n);\n         }\n         else {\n           size_type __len = size() + std::max(size(), __n);\n           _Bit_type * __q = _M_bit_alloc(__len);\n-          iterator __i = copy(begin(), __position, iterator(__q, 0));\n-          __i = copy(__first, __last, __i);\n-          this->_M_finish = copy(__position, end(), __i);\n+          iterator __i = std::copy(begin(), __position, iterator(__q, 0));\n+          __i = std::copy(__first, __last, __i);\n+          this->_M_finish = std::copy(__position, end(), __i);\n           _M_deallocate();\n           this->_M_end_of_storage\n \t    = __q + (__len + _S_word_bit - 1)/_S_word_bit;\n@@ -496,27 +496,27 @@ template <typename _Alloc>\n       : _Bvector_base<_Alloc>(__a)\n     {\n       _M_initialize(__n);\n-      fill(this->_M_start._M_p, this->_M_end_of_storage, __value ? ~0 : 0);\n+      std::fill(this->_M_start._M_p, this->_M_end_of_storage, __value ? ~0 : 0);\n     }\n   \n     explicit vector(size_type __n)\n       : _Bvector_base<_Alloc>(allocator_type())\n     {\n       _M_initialize(__n);\n-      fill(this->_M_start._M_p, this->_M_end_of_storage, 0);\n+      std::fill(this->_M_start._M_p, this->_M_end_of_storage, 0);\n     }\n   \n     vector(const vector& __x) : _Bvector_base<_Alloc>(__x.get_allocator()) {\n       _M_initialize(__x.size());\n-      copy(__x.begin(), __x.end(), this->_M_start);\n+      std::copy(__x.begin(), __x.end(), this->_M_start);\n     }\n   \n     // Check whether it's an integral type.  If so, it's not an iterator.\n   \n     template <class _Integer>\n     void _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type) {\n       _M_initialize(__n);\n-      fill(this->_M_start._M_p, this->_M_end_of_storage, __x ? ~0 : 0);\n+      std::fill(this->_M_start._M_p, this->_M_end_of_storage, __x ? ~0 : 0);\n     }\n   \n     template <class _InputIterator>\n@@ -542,7 +542,7 @@ template <typename _Alloc>\n         _M_deallocate();\n         _M_initialize(__x.size());\n       }\n-      copy(__x.begin(), __x.end(), begin());\n+      std::copy(__x.begin(), __x.end(), begin());\n       this->_M_finish = begin() + difference_type(__x.size());\n       return *this;\n     }\n@@ -554,12 +554,12 @@ template <typename _Alloc>\n   \n     void _M_fill_assign(size_t __n, bool __x) {\n       if (__n > size()) {\n-        fill(this->_M_start._M_p, this->_M_end_of_storage, __x ? ~0 : 0);\n+        std::fill(this->_M_start._M_p, this->_M_end_of_storage, __x ? ~0 : 0);\n         insert(end(), __n - size(), __x);\n       }\n       else {\n         erase(begin() + __n, end());\n-        fill(this->_M_start._M_p, this->_M_end_of_storage, __x ? ~0 : 0);\n+        std::fill(this->_M_start._M_p, this->_M_end_of_storage, __x ? ~0 : 0);\n       }\n     }\n   \n@@ -596,11 +596,11 @@ template <typename _Alloc>\n                        forward_iterator_tag) {\n       size_type __len = std::distance(__first, __last);\n       if (__len < size())\n-        erase(copy(__first, __last, begin()), end());\n+        erase(std::copy(__first, __last, begin()), end());\n       else {\n         _ForwardIterator __mid = __first;\n-        advance(__mid, size());\n-        copy(__first, __mid, begin());\n+        std::advance(__mid, size());\n+        std::copy(__first, __mid, begin());\n         insert(end(), __mid, __last);\n       }\n     }    \n@@ -610,7 +610,7 @@ template <typename _Alloc>\n \t__throw_length_error(__N(\"vector::reserve\"));\n       if (this->capacity() < __n) {\n         _Bit_type * __q = _M_bit_alloc(__n);\n-        this->_M_finish = copy(begin(), end(), iterator(__q, 0));\n+        this->_M_finish = std::copy(begin(), end(), iterator(__q, 0));\n         _M_deallocate();\n         this->_M_start = iterator(__q, 0);\n         this->_M_end_of_storage = __q + (__n + _S_word_bit - 1)/_S_word_bit;\n@@ -675,17 +675,17 @@ template <typename _Alloc>\n     void _M_fill_insert(iterator __position, size_type __n, bool __x) {\n       if (__n == 0) return;\n       if (capacity() - size() >= __n) {\n-        copy_backward(__position, end(),\n-\t\t      this->_M_finish + difference_type(__n));\n-        fill(__position, __position + difference_type(__n), __x);\n+        std::copy_backward(__position, end(),\n+\t\t\t   this->_M_finish + difference_type(__n));\n+        std::fill(__position, __position + difference_type(__n), __x);\n         this->_M_finish += difference_type(__n);\n       }\n       else {\n         size_type __len = size() + std::max(size(), __n);\n         _Bit_type * __q = _M_bit_alloc(__len);\n-        iterator __i = copy(begin(), __position, iterator(__q, 0));\n-        fill_n(__i, __n, __x);\n-        this->_M_finish = copy(__position, end(), __i + difference_type(__n));\n+        iterator __i = std::copy(begin(), __position, iterator(__q, 0));\n+        std::fill_n(__i, __n, __x);\n+        this->_M_finish = std::copy(__position, end(), __i + difference_type(__n));\n         _M_deallocate();\n         this->_M_end_of_storage = __q + (__len + _S_word_bit - 1)/_S_word_bit;\n         this->_M_start = iterator(__q, 0);\n@@ -699,12 +699,12 @@ template <typename _Alloc>\n     void pop_back() { --this->_M_finish; }\n     iterator erase(iterator __position) {\n       if (__position + 1 != end())\n-        copy(__position + 1, end(), __position);\n+        std::copy(__position + 1, end(), __position);\n         --this->_M_finish;\n       return __position;\n     }\n     iterator erase(iterator __first, iterator __last) {\n-      this->_M_finish = copy(__last, end(), __first);\n+      this->_M_finish = std::copy(__last, end(), __first);\n       return __first;\n     }\n     void resize(size_type __new_size, bool __x = bool()) {"}, {"sha": "27fb2e42ec7d852170a9ec8c1c1d9dd316a58155", "filename": "libstdc++-v3/include/bits/stl_construct.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da73f9deba3ff61826160e70e50c193256b158aa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da73f9deba3ff61826160e70e50c193256b158aa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h?ref=da73f9deba3ff61826160e70e50c193256b158aa", "patch": "@@ -88,6 +88,16 @@ namespace std\n     _Construct(_T1* __p)\n     { new (static_cast<void*>(__p)) _T1(); }\n \n+  /**\n+   * @if maint\n+   * Destroy the object pointed to by a pointer type.\n+   * @endif\n+   */\n+  template <class _Tp>\n+    inline void\n+    _Destroy(_Tp* __pointer)\n+    { __pointer->~_Tp(); }\n+\n   /**\n    * @if maint\n    * Destroy a range of objects with nontrivial destructors.  \n@@ -98,7 +108,7 @@ namespace std\n   template <class _ForwardIterator>\n     inline void\n     __destroy_aux(_ForwardIterator __first, _ForwardIterator __last, __false_type)\n-    { for ( ; __first != __last; ++__first) _Destroy(&*__first); }\n+    { for ( ; __first != __last; ++__first) std::_Destroy(&*__first); }\n \n   /**\n    * @if maint\n@@ -114,16 +124,6 @@ namespace std\n     __destroy_aux(_ForwardIterator, _ForwardIterator, __true_type)\n     { }\n \n-  /**\n-   * @if maint\n-   * Destroy the object pointed to by a pointer type.\n-   * @endif\n-   */\n-  template <class _Tp>\n-    inline void\n-    _Destroy(_Tp* __pointer)\n-    { __pointer->~_Tp(); }\n-  \n   /**\n    * @if maint\n    * Destroy a range of objects.  If the value_type of the object has\n@@ -140,7 +140,7 @@ namespace std\n       typedef typename __type_traits<_Value_type>::has_trivial_destructor\n                        _Has_trivial_destructor;\n \n-      __destroy_aux(__first, __last, _Has_trivial_destructor());\n+      std::__destroy_aux(__first, __last, _Has_trivial_destructor());\n     }\n } // namespace std\n "}, {"sha": "ef7a7253e944b155fc887e0c42bf15bad0f13ea7", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da73f9deba3ff61826160e70e50c193256b158aa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da73f9deba3ff61826160e70e50c193256b158aa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=da73f9deba3ff61826160e70e50c193256b158aa", "patch": "@@ -723,7 +723,7 @@ namespace std\n     */\n     deque(const deque& __x)\n       : _Base(__x.get_allocator(), __x.size()) \n-      { uninitialized_copy(__x.begin(), __x.end(), this->_M_start); }\n+      { std::uninitialized_copy(__x.begin(), __x.end(), this->_M_start); }\n   \n     /**\n      *  @brief  Builds a %deque from a range.\n@@ -753,7 +753,7 @@ namespace std\n      *  themselves are pointers, the pointed-to memory is not touched in any\n      *  way.  Managing the pointer is the user's responsibilty.\n     */\n-    ~deque() { _Destroy(this->_M_start, this->_M_finish); }\n+    ~deque() { std::_Destroy(this->_M_start, this->_M_finish); }\n   \n     /**\n      *  @brief  %Deque assignment operator.\n@@ -1021,7 +1021,7 @@ namespace std\n     push_front(const value_type& __x) \n     {\n       if (this->_M_start._M_cur != this->_M_start._M_first) {\n-        _Construct(this->_M_start._M_cur - 1, __x);\n+        std::_Construct(this->_M_start._M_cur - 1, __x);\n         --this->_M_start._M_cur;\n       }\n       else\n@@ -1040,7 +1040,7 @@ namespace std\n     push_back(const value_type& __x)\n     {\n       if (this->_M_finish._M_cur != this->_M_finish._M_last - 1) {\n-        _Construct(this->_M_finish._M_cur, __x);\n+        std::_Construct(this->_M_finish._M_cur, __x);\n         ++this->_M_finish._M_cur;\n       }\n       else\n@@ -1059,7 +1059,7 @@ namespace std\n     pop_front()\n     {\n       if (this->_M_start._M_cur != this->_M_start._M_last - 1) {\n-        _Destroy(this->_M_start._M_cur);\n+        std::_Destroy(this->_M_start._M_cur);\n         ++this->_M_start._M_cur;\n       }\n       else \n@@ -1079,7 +1079,7 @@ namespace std\n     {\n       if (this->_M_finish._M_cur != this->_M_finish._M_first) {\n         --this->_M_finish._M_cur;\n-        _Destroy(this->_M_finish._M_cur);\n+        std::_Destroy(this->_M_finish._M_cur);\n       }\n       else\n         _M_pop_back_aux();\n@@ -1292,12 +1292,12 @@ namespace std\n         size_type __len = std::distance(__first, __last);\n         if (__len > size()) {\n           _ForwardIterator __mid = __first;\n-          advance(__mid, size());\n-          copy(__first, __mid, begin());\n+          std::advance(__mid, size());\n+          std::copy(__first, __mid, begin());\n           insert(end(), __mid, __last);\n         }\n         else\n-          erase(copy(__first, __last, begin()), end());\n+          erase(std::copy(__first, __last, begin()), end());\n       }\n   \n     // Called by assign(n,t), and the range assign when it turns out to be the\n@@ -1307,13 +1307,13 @@ namespace std\n     {\n       if (__n > size())\n       {\n-        fill(begin(), end(), __val);\n+        std::fill(begin(), end(), __val);\n         insert(end(), __n - size(), __val);\n       }\n       else\n       {\n         erase(begin() + __n, end());\n-        fill(begin(), end(), __val);\n+        std::fill(begin(), end(), __val);\n       }\n     }\n   \n@@ -1469,7 +1469,7 @@ namespace std\n                          const deque<_Tp, _Alloc>& __y)\n   {\n     return __x.size() == __y.size() &&\n-           equal(__x.begin(), __x.end(), __y.begin());\n+           std::equal(__x.begin(), __x.end(), __y.begin());\n   }\n   \n   /**"}]}