{"sha": "0d9a5f8adcbb8ce4cd89a15b98daf77205c5eac5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ5YTVmOGFkY2JiOGNlNGNkODlhMTViOThkYWY3NzIwNWM1ZWFjNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2015-01-31T15:30:30Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-01-31T15:30:30Z"}, "message": "re PR target/64882 (ICE on valid code at -O3 with -g enabled in simplify_subreg, at simplify-rtx.c:5681)\n\n2015-01-31  Uros Bizjak  <ubizjak@gmail.com>\n\n        PR target/64882\n\t* config/i386/predicates.md (address_no_seg_operand): Reject\n\tnon-CONST_INT_P operands in invalid mode.\n\n2015-01-31  Uros Bizjak  <ubizjak@gmail.com>\n\n\t* config/i386/i386.md (*prefetch_prefetchw1): Remove mode of\n\taddress_operand 0.  Rename from *prefetch_prefetchwt1_<mode>.\n\t* config/i386/predicates.md (address_no_seg_operand): Call\n\taddress_operand with VOIDmode.\n\t(vsib_address_operand): Ditto.\n\t(address_mpx_no_base_operand): Ditto.\n\t(address_mpx_no_index_operand): Ditto.\n\ntestsuite/ChangeLog:\n\n2015-01-31  Uros Bizjak  <ubizjak@gmail.com>\n\n        PR target/64882\n\t* gcc.dg/torture/pr64882.c: New test.\n\nFrom-SVN: r220306", "tree": {"sha": "a12d964cf45afdf3eeb8f14eddb4a316a4ec7668", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a12d964cf45afdf3eeb8f14eddb4a316a4ec7668"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d9a5f8adcbb8ce4cd89a15b98daf77205c5eac5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d9a5f8adcbb8ce4cd89a15b98daf77205c5eac5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d9a5f8adcbb8ce4cd89a15b98daf77205c5eac5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d9a5f8adcbb8ce4cd89a15b98daf77205c5eac5/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6b92143e786b7054f984b3e056d7312fa6cd4a15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b92143e786b7054f984b3e056d7312fa6cd4a15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b92143e786b7054f984b3e056d7312fa6cd4a15"}], "stats": {"total": 71, "additions": 65, "deletions": 6}, "files": [{"sha": "19cb15cf6b869f7bd44cc6b6b366704e5fc6dfb6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d9a5f8adcbb8ce4cd89a15b98daf77205c5eac5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d9a5f8adcbb8ce4cd89a15b98daf77205c5eac5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d9a5f8adcbb8ce4cd89a15b98daf77205c5eac5", "patch": "@@ -1,3 +1,19 @@\n+2015-01-31  Uros Bizjak  <ubizjak@gmail.com>\n+\n+        PR target/64882\n+\t* config/i386/predicates.md (address_no_seg_operand): Reject\n+\tnon-CONST_INT_P operands in invalid mode.\n+\n+2015-01-31  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*prefetch_prefetchw1): Remove mode of\n+\taddress_operand 0.  Rename from *prefetch_prefetchwt1_<mode>.\n+\t* config/i386/predicates.md (address_no_seg_operand): Call\n+\taddress_operand with VOIDmode.\n+\t(vsib_address_operand): Ditto.\n+\t(address_mpx_no_base_operand): Ditto.\n+\t(address_mpx_no_index_operand): Ditto.\n+\n 2015-01-30  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR target/64688"}, {"sha": "2d3d07585c3dbe707a4b616cda12dd50d95d4bea", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d9a5f8adcbb8ce4cd89a15b98daf77205c5eac5/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d9a5f8adcbb8ce4cd89a15b98daf77205c5eac5/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=0d9a5f8adcbb8ce4cd89a15b98daf77205c5eac5", "patch": "@@ -18117,8 +18117,8 @@\n \t(symbol_ref \"memory_address_length (operands[0], false)\"))\n    (set_attr \"memory\" \"none\")])\n \n-(define_insn \"*prefetch_prefetchwt1_<mode>\"\n-  [(prefetch (match_operand:P 0 \"address_operand\" \"p\")\n+(define_insn \"*prefetch_prefetchwt1\"\n+  [(prefetch (match_operand 0 \"address_operand\" \"p\")\n \t     (const_int 1)\n \t     (const_int 2))]\n   \"TARGET_PREFETCHWT1\""}, {"sha": "0f314ccb0e3e76eaccbe1d416f5f0a6c3aea1c18", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d9a5f8adcbb8ce4cd89a15b98daf77205c5eac5/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d9a5f8adcbb8ce4cd89a15b98daf77205c5eac5/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=0d9a5f8adcbb8ce4cd89a15b98daf77205c5eac5", "patch": "@@ -966,11 +966,16 @@\n ;; a segment override.  Defined as a special predicate to allow\n ;; mode-less const_int operands pass to address_operand.\n (define_special_predicate \"address_no_seg_operand\"\n-  (match_operand 0 \"address_operand\")\n+  (match_test \"address_operand (op, VOIDmode)\")\n {\n   struct ix86_address parts;\n   int ok;\n \n+  if (!CONST_INT_P (op)\n+      && mode != VOIDmode\n+      && GET_MODE (op) != mode)\n+    return false;\n+\n   ok = ix86_decompose_address (op, &parts);\n   gcc_assert (ok);\n   return parts.seg == SEG_DEFAULT;\n@@ -979,7 +984,7 @@\n ;; Return true if op if a valid base register, displacement or\n ;; sum of base register and displacement for VSIB addressing.\n (define_predicate \"vsib_address_operand\"\n-  (match_operand 0 \"address_operand\")\n+  (match_test \"address_operand (op, VOIDmode)\")\n {\n   struct ix86_address parts;\n   int ok;\n@@ -1020,7 +1025,7 @@\n \n ;; Return true if op is valid MPX address operand without base\n (define_predicate \"address_mpx_no_base_operand\"\n-  (match_operand 0 \"address_operand\")\n+  (match_test \"address_operand (op, VOIDmode)\")\n {\n   struct ix86_address parts;\n   int ok;\n@@ -1052,7 +1057,7 @@\n \n ;; Return true if op is valid MPX address operand without index\n (define_predicate \"address_mpx_no_index_operand\"\n-  (match_operand 0 \"address_operand\")\n+  (match_test \"address_operand (op, VOIDmode)\")\n {\n   struct ix86_address parts;\n   int ok;"}, {"sha": "54dc54380435592fd8b9fc04779f6181d0935457", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d9a5f8adcbb8ce4cd89a15b98daf77205c5eac5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d9a5f8adcbb8ce4cd89a15b98daf77205c5eac5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0d9a5f8adcbb8ce4cd89a15b98daf77205c5eac5", "patch": "@@ -1,3 +1,8 @@\n+2015-01-31  Uros Bizjak  <ubizjak@gmail.com>\n+\n+        PR target/64882\n+\t* gcc.dg/torture/pr64882.c: New test.\n+\n 2015-01-31  David Edelsohn  <dje.gcc@gmail.com>\n \n \tPR target/64159"}, {"sha": "462edace1b9007c861d651670538cdbfcb81b3e6", "filename": "gcc/testsuite/gcc.dg/torture/pr64882.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d9a5f8adcbb8ce4cd89a15b98daf77205c5eac5/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr64882.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d9a5f8adcbb8ce4cd89a15b98daf77205c5eac5/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr64882.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr64882.c?ref=0d9a5f8adcbb8ce4cd89a15b98daf77205c5eac5", "patch": "@@ -0,0 +1,33 @@\n+/* PR target/64882 */\n+/* { dg-do compile } */\n+\n+int a, d, e;\n+long long b;\n+static long long *c = &b;\n+\n+void\n+fn1 (short p)\n+{\n+}\n+\n+long long\n+fn2 (long long p1, long long p2)\n+{\n+  return (p1 && p1 > 26854775807LL - p2) || p1 < -p2 ? p1 : p1 + p2;\n+}\n+\n+void\n+fn3 ()\n+{\n+  long long f;\n+  int g = 3;\n+  int *h = &a;\n+  for (e = 0; e < 2; e++)\n+    {\n+      int *i = &g;\n+      if (!fn2 (*c, 7 < d % (*i)--))\n+\tf = fn2 ((*h <= 0) | b, 5278350700LL);\n+      *h = f;\n+      fn1 (*h);\n+    }\n+}"}]}