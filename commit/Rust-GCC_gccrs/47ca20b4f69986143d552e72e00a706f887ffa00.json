{"sha": "47ca20b4f69986143d552e72e00a706f887ffa00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdjYTIwYjRmNjk5ODYxNDNkNTUyZTcyZTAwYTcwNmY4ODdmZmEwMA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2018-08-06T20:13:20Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-08-06T20:13:20Z"}, "message": "tree-ssa-dom.c (dom_opt_dom_walker::optimize_stmt): Pass down the vr_values instance to cprop_into_stmt.\n\n\t* tree-ssa-dom.c (dom_opt_dom_walker::optimize_stmt): Pass down\n\tthe vr_values instance to cprop_into_stmt.\n\t(cprop_into_stmt): Pass vr_values instance down to cprop_operand.\n\t(cprop_operand): Also query EVRP to determine if OP is a constant.\n\nFrom-SVN: r263342", "tree": {"sha": "cb674fca757ce9e0eed2cd27572bf68e71e532ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb674fca757ce9e0eed2cd27572bf68e71e532ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47ca20b4f69986143d552e72e00a706f887ffa00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47ca20b4f69986143d552e72e00a706f887ffa00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47ca20b4f69986143d552e72e00a706f887ffa00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47ca20b4f69986143d552e72e00a706f887ffa00/comments", "author": null, "committer": null, "parents": [{"sha": "9e525f085b65ffc07217a86935cf357e3154accf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e525f085b65ffc07217a86935cf357e3154accf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e525f085b65ffc07217a86935cf357e3154accf"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "4cfae1ac151f3276078b30c076e6776c0403cb76", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ca20b4f69986143d552e72e00a706f887ffa00/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ca20b4f69986143d552e72e00a706f887ffa00/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47ca20b4f69986143d552e72e00a706f887ffa00", "patch": "@@ -1,3 +1,10 @@\n+2018-08-06  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-dom.c (dom_opt_dom_walker::optimize_stmt): Pass down\n+\tthe vr_values instance to cprop_into_stmt.\n+\t(cprop_into_stmt): Pass vr_values instance down to cprop_operand.\n+\t(cprop_operand): Also query EVRP to determine if OP is a constant.\n+\t\n 2018-08-06  Nathan Sidwell  <nathan@acm.org>\n \n \t* diagnostic.c (diagnostic_report_current_module): Reroll"}, {"sha": "267880f3b5c29e8c04a9addfe2c3bcd807950867", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ca20b4f69986143d552e72e00a706f887ffa00/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ca20b4f69986143d552e72e00a706f887ffa00/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=47ca20b4f69986143d552e72e00a706f887ffa00", "patch": "@@ -1700,7 +1700,7 @@ record_equivalences_from_stmt (gimple *stmt, int may_optimize_p,\n    CONST_AND_COPIES.  */\n \n static void\n-cprop_operand (gimple *stmt, use_operand_p op_p)\n+cprop_operand (gimple *stmt, use_operand_p op_p, vr_values *vr_values)\n {\n   tree val;\n   tree op = USE_FROM_PTR (op_p);\n@@ -1709,6 +1709,9 @@ cprop_operand (gimple *stmt, use_operand_p op_p)\n      copy of some other variable, use the value or copy stored in\n      CONST_AND_COPIES.  */\n   val = SSA_NAME_VALUE (op);\n+  if (!val)\n+    val = vr_values->op_with_constant_singleton_value_range (op);\n+\n   if (val && val != op)\n     {\n       /* Do not replace hard register operands in asm statements.  */\n@@ -1765,7 +1768,7 @@ cprop_operand (gimple *stmt, use_operand_p op_p)\n    vdef_ops of STMT.  */\n \n static void\n-cprop_into_stmt (gimple *stmt)\n+cprop_into_stmt (gimple *stmt, vr_values *vr_values)\n {\n   use_operand_p op_p;\n   ssa_op_iter iter;\n@@ -1782,7 +1785,7 @@ cprop_into_stmt (gimple *stmt)\n \t operands.  */\n       if (old_op != last_copy_propagated_op)\n \t{\n-\t  cprop_operand (stmt, op_p);\n+\t  cprop_operand (stmt, op_p, vr_values);\n \n \t  tree new_op = USE_FROM_PTR (op_p);\n \t  if (new_op != old_op && TREE_CODE (new_op) == SSA_NAME)\n@@ -1925,7 +1928,7 @@ dom_opt_dom_walker::optimize_stmt (basic_block bb, gimple_stmt_iterator si)\n   opt_stats.num_stmts++;\n \n   /* Const/copy propagate into USES, VUSES and the RHS of VDEFs.  */\n-  cprop_into_stmt (stmt);\n+  cprop_into_stmt (stmt, evrp_range_analyzer.get_vr_values ());\n \n   /* If the statement has been modified with constant replacements,\n      fold its RHS before checking for redundant computations.  */"}]}