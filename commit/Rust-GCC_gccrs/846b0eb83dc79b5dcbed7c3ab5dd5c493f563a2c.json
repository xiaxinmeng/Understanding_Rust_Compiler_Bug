{"sha": "846b0eb83dc79b5dcbed7c3ab5dd5c493f563a2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ2YjBlYjgzZGM3OWI1ZGNiZWQ3YzNhYjVkZDVjNDkzZjU2M2EyYw==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1999-02-19T14:55:18Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1999-02-19T14:55:18Z"}, "message": "parse.y (obtain_incomplete_type): Don't wrap unknown types in TREE_LIST - just chain the POINTER_TYPEs together.\n\nT\n\t* parse.y (obtain_incomplete_type):  Don't wrap unknown types\n\tin TREE_LIST - just chain the POINTER_TYPEs together.\n\t(resolve_class):  If type already resolved, return decl.\n\tAfter resolving, update TREE_TYPE(class_type), and name (if array).\n\t* parse.h (do_resolve_class), parse.y:  Make non-static.\n\t* class.c (maybe_layout_super_class):  Take this_class argument.\n\tDo do_resolve_class if necessary.\n\t(layout_class, layout_class_methods): Adjust calls appropriately.\n\t* parse.h (JDEP_TO_RESOLVE, JDEP_RESOLVED_DECL, JDEP_RESOLVED,\n\tJDEP_RESOLVED_P):  Redefined for new TREE_LIST-less convention.\n\t* typeck.c (build_java_array_type):  Don't call layout_class.\n\nFrom-SVN: r25323", "tree": {"sha": "36e5b3c624dcaf1f57ab9ebab5f3f7811f243a53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36e5b3c624dcaf1f57ab9ebab5f3f7811f243a53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/846b0eb83dc79b5dcbed7c3ab5dd5c493f563a2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/846b0eb83dc79b5dcbed7c3ab5dd5c493f563a2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/846b0eb83dc79b5dcbed7c3ab5dd5c493f563a2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/846b0eb83dc79b5dcbed7c3ab5dd5c493f563a2c/comments", "author": null, "committer": null, "parents": [{"sha": "04ed7a0ca3ef4c68c952eb16dba76d2191b760a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04ed7a0ca3ef4c68c952eb16dba76d2191b760a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04ed7a0ca3ef4c68c952eb16dba76d2191b760a5"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "5b02f59079fb194b7c306b92a3b813a02a1bd01c", "filename": "gcc/java/class.c", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/846b0eb83dc79b5dcbed7c3ab5dd5c493f563a2c/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/846b0eb83dc79b5dcbed7c3ab5dd5c493f563a2c/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=846b0eb83dc79b5dcbed7c3ab5dd5c493f563a2c", "patch": "@@ -1402,8 +1402,9 @@ push_super_field (this_class, super_class)\n /* Handle the different manners we may have to lay out a super class.  */\n \n static tree\n-maybe_layout_super_class (super_class)\n+maybe_layout_super_class (super_class, this_class)\n      tree super_class;\n+     tree this_class;\n {\n   if (TREE_CODE (super_class) == RECORD_TYPE)\n     {\n@@ -1415,14 +1416,17 @@ maybe_layout_super_class (super_class)\n     }\n   /* We might have to layout the class before its dependency on\n      the super class gets resolved by java_complete_class  */\n-  else if (TREE_CODE (super_class) == TREE_LIST)\n+  else if (TREE_CODE (super_class) == POINTER_TYPE)\n     {\n-      tree name = TYPE_NAME (TREE_PURPOSE (super_class));\n-      load_class (name, 1);\n-      super_class = IDENTIFIER_CLASS_VALUE (name);\n-      if (!super_class)\n-\treturn NULL_TREE;\t/* FIXME, NULL_TREE not checked by caller. */\n-      super_class = TREE_TYPE (super_class);\n+      if (TREE_TYPE (super_class) != NULL_TREE)\n+\tsuper_class = TREE_TYPE (super_class);\n+      else\n+\t{\n+\t  super_class = do_resolve_class (super_class, NULL_TREE, this_class);\n+\t  if (!super_class)\n+\t    return NULL_TREE;\t/* FIXME, NULL_TREE not checked by caller. */\n+\t  super_class = TREE_TYPE (super_class);\n+\t}\n     }\n   if (!TYPE_SIZE (super_class))\n     safe_layout_class (super_class);\n@@ -1439,7 +1443,7 @@ layout_class (this_class)\n \n   if (super_class)\n     {\n-      super_class = maybe_layout_super_class (super_class);\n+      super_class = maybe_layout_super_class (super_class, this_class);\n       if (TREE_CODE (TYPE_SIZE (super_class)) == ERROR_MARK)\n \t{\n \t  TYPE_SIZE (this_class) = error_mark_node;\n@@ -1478,7 +1482,7 @@ layout_class_methods (this_class)\n \n   if (super_class)\n     {\n-      super_class = maybe_layout_super_class (super_class);\n+      super_class = maybe_layout_super_class (super_class, this_class);\n       if (!TYPE_NVIRTUALS (super_class))\n \tlayout_class_methods (super_class);\n       dtable_count = TYPE_NVIRTUALS (super_class);"}]}