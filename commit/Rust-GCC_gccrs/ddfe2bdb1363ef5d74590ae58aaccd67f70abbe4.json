{"sha": "ddfe2bdb1363ef5d74590ae58aaccd67f70abbe4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRmZTJiZGIxMzYzZWY1ZDc0NTkwYWU1OGFhY2NkNjdmNzBhYmJlNA==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-10-16T13:17:12Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-10-16T13:17:12Z"}, "message": "sh-protos.h (fldi_ok): Remove.\n\ngcc/\n\t* config/sh/sh-protos.h (fldi_ok): Remove.\n\t* config/sh/sh.c (fldi_ok): Likewise.\n\t(sh_secondary_reload): Don't use fldi_ok.\n\t* config/sh/constraints.md (G constraint, H constraint): Don't use\n\tfldi_ok.\n\nFrom-SVN: r216320", "tree": {"sha": "48476d9562c94ca95144941fbea06b9ead0ae177", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48476d9562c94ca95144941fbea06b9ead0ae177"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddfe2bdb1363ef5d74590ae58aaccd67f70abbe4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddfe2bdb1363ef5d74590ae58aaccd67f70abbe4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddfe2bdb1363ef5d74590ae58aaccd67f70abbe4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddfe2bdb1363ef5d74590ae58aaccd67f70abbe4/comments", "author": null, "committer": null, "parents": [{"sha": "105681634d3dd2ae9be713378c49c3a17485f4db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/105681634d3dd2ae9be713378c49c3a17485f4db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/105681634d3dd2ae9be713378c49c3a17485f4db"}], "stats": {"total": 29, "additions": 11, "deletions": 18}, "files": [{"sha": "ffef98259b999426898efb7d0de2452188baad05", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddfe2bdb1363ef5d74590ae58aaccd67f70abbe4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddfe2bdb1363ef5d74590ae58aaccd67f70abbe4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ddfe2bdb1363ef5d74590ae58aaccd67f70abbe4", "patch": "@@ -1,3 +1,11 @@\n+2014-10-16  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* config/sh/sh-protos.h (fldi_ok): Remove.\n+\t* config/sh/sh.c (fldi_ok): Likewise.\n+\t(sh_secondary_reload): Don't use fldi_ok.\n+\t* config/sh/constraints.md (G constraint, H constraint): Don't use\n+\tfldi_ok.\n+\n 2014-10-16  Martin Liska  <mliska@suse.cz>\n \n \t* ipa-icf.c (sem_item_optimizer::process_cong_reduction):"}, {"sha": "0e719201bc8b2aea1e410bc006d0deb4d1c6e3d5", "filename": "gcc/config/sh/constraints.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddfe2bdb1363ef5d74590ae58aaccd67f70abbe4/gcc%2Fconfig%2Fsh%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddfe2bdb1363ef5d74590ae58aaccd67f70abbe4/gcc%2Fconfig%2Fsh%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fconstraints.md?ref=ddfe2bdb1363ef5d74590ae58aaccd67f70abbe4", "patch": "@@ -210,12 +210,12 @@\n (define_constraint \"G\"\n   \"Double constant 0.\"\n   (and (match_code \"const_double\")\n-       (match_test \"fp_zero_operand (op) && fldi_ok ()\")))\n+       (match_test \"fp_zero_operand (op)\")))\n \n (define_constraint \"H\"\n   \"Double constant 1.\"\n   (and (match_code \"const_double\")\n-       (match_test \"fp_one_operand (op) && fldi_ok ()\")))\n+       (match_test \"fp_one_operand (op)\")))\n \n ;; Extra constraints\n (define_constraint \"Q\""}, {"sha": "ca007b9093ceea46610f0bf6569c681f7dce4379", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddfe2bdb1363ef5d74590ae58aaccd67f70abbe4/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddfe2bdb1363ef5d74590ae58aaccd67f70abbe4/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=ddfe2bdb1363ef5d74590ae58aaccd67f70abbe4", "patch": "@@ -191,7 +191,6 @@ extern void sh_expand_prologue (void);\n extern void sh_expand_epilogue (bool);\n extern void sh_set_return_address (rtx, rtx);\n extern int initial_elimination_offset (int, int);\n-extern bool fldi_ok (void);\n extern bool sh_hard_regno_rename_ok (unsigned int, unsigned int);\n extern bool sh_cfun_interrupt_handler_p (void);\n extern bool sh_cfun_resbank_handler_p (void);"}, {"sha": "288a955dee77009b8927898026cdcdb0022a3bd2", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddfe2bdb1363ef5d74590ae58aaccd67f70abbe4/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddfe2bdb1363ef5d74590ae58aaccd67f70abbe4/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=ddfe2bdb1363ef5d74590ae58aaccd67f70abbe4", "patch": "@@ -9875,19 +9875,6 @@ fp_one_operand (rtx op)\n   return REAL_VALUES_EQUAL (r, dconst1);\n }\n \n-/* In general mode switching is used.  If we are\n-   compiling without -mfmovd, movsf_ie isn't taken into account for\n-   mode switching.  We could check in machine_dependent_reorg for\n-   cases where we know we are in single precision mode, but there is\n-   interface to find that out during reload, so we must avoid\n-   choosing an fldi alternative during reload and thus failing to\n-   allocate a scratch register for the constant loading.  */\n-bool\n-fldi_ok (void)\n-{\n-  return true;\n-}\n-\n /* Return the TLS type for TLS symbols.  */\n enum tls_model\n tls_symbolic_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n@@ -13106,8 +13093,7 @@ sh_secondary_reload (bool in_p, rtx x, reg_class_t rclass_i,\n       if (REGCLASS_HAS_FP_REG (rclass)\n \t  && ! TARGET_SHMEDIA\n \t  && immediate_operand ((x), mode)\n-\t  && ! ((fp_zero_operand (x) || fp_one_operand (x))\n-\t\t&& mode == SFmode && fldi_ok ()))\n+\t  && ! ((fp_zero_operand (x) || fp_one_operand (x)) && mode == SFmode))\n \tswitch (mode)\n \t  {\n \t  case SFmode:"}]}