{"sha": "fedadb60b6fc6425387faf4d514b4e8b0e24180e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVkYWRiNjBiNmZjNjQyNTM4N2ZhZjRkNTE0YjRlOGIwZTI0MTgwZQ==", "commit": {"author": {"name": "Jeff Law", "email": "jlaw@localhost.localdomain", "date": "2021-08-23T14:33:35Z"}, "committer": {"name": "Jeff Law", "email": "jlaw@localhost.localdomain", "date": "2021-08-23T14:37:20Z"}, "message": "Add tailcall/sibcall support to the H8\n\ngcc/\n\n\t* config/h8300/h8300-protos.h (h8300_expand_epilogue): Add new\n\targument.\n\t* config/h8300/jumpcall.md (call, call_value): Restrict to\n\t!SIBLING_CALL_P cases.\n\t(subcall, sibcall_value): New patterns & expanders.\n\t* config/h8300/proepi.md (epilogue): Pass new argument to\n\th8300_expand_epilogue.\n\t(sibcall_epilogue): New expander.\n\t* config/h8300/h8300.c (h8300_expand_epilogue): Handle sibcall\n\tepilogues too.\n\t(h8300_ok_for_sibcall_p): New function.\n\t(TARGET_FUNCTION_OK_FOR_SIBCALL): define.", "tree": {"sha": "a7790752bbcd3170055d90dee37b2ae7f96fc401", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7790752bbcd3170055d90dee37b2ae7f96fc401"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fedadb60b6fc6425387faf4d514b4e8b0e24180e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fedadb60b6fc6425387faf4d514b4e8b0e24180e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fedadb60b6fc6425387faf4d514b4e8b0e24180e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fedadb60b6fc6425387faf4d514b4e8b0e24180e/comments", "author": null, "committer": null, "parents": [{"sha": "89ff4f027b5c92e96a8527920b8ccc3b94aec672", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89ff4f027b5c92e96a8527920b8ccc3b94aec672", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89ff4f027b5c92e96a8527920b8ccc3b94aec672"}], "stats": {"total": 115, "additions": 108, "deletions": 7}, "files": [{"sha": "3d344018ff217bf37d0f8f8efbce3b3f106cef4d", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fedadb60b6fc6425387faf4d514b4e8b0e24180e/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fedadb60b6fc6425387faf4d514b4e8b0e24180e/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=fedadb60b6fc6425387faf4d514b4e8b0e24180e", "patch": "@@ -94,7 +94,7 @@ extern int h8300_tiny_data_p (tree);\n \n extern int h8300_can_use_return_insn_p (void);\n extern void h8300_expand_prologue (void);\n-extern void h8300_expand_epilogue (void);\n+extern void h8300_expand_epilogue (bool);\n extern int h8300_current_function_interrupt_function_p (void);\n extern int h8300_current_function_monitor_function_p (void);\n extern int h8300_initial_elimination_offset (int, int);"}, {"sha": "5f7251ab78d1f5540c369153b90b8192f7995a95", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fedadb60b6fc6425387faf4d514b4e8b0e24180e/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fedadb60b6fc6425387faf4d514b4e8b0e24180e/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=fedadb60b6fc6425387faf4d514b4e8b0e24180e", "patch": "@@ -874,7 +874,7 @@ h8300_can_use_return_insn_p (void)\n /* Generate RTL code for the function epilogue.  */\n \n void\n-h8300_expand_epilogue (void)\n+h8300_expand_epilogue (bool sibcall_p)\n {\n   int regno;\n   int saved_regs;\n@@ -919,6 +919,7 @@ h8300_expand_epilogue (void)\n \t  /* See if this pop would be the last insn before the return.\n \t     If so, use rte/l or rts/l instead of pop or ldm.l.  */\n \t  if (TARGET_H8300SX\n+\t      && !sibcall_p\n \t      && !frame_pointer_needed\n \t      && frame_size == 0\n \t      && (saved_regs & ((1 << (regno - n_regs + 1)) - 1)) == 0)\n@@ -931,12 +932,12 @@ h8300_expand_epilogue (void)\n   /* Pop frame pointer if we had one.  */\n   if (frame_pointer_needed)\n     {\n-      if (TARGET_H8300SX)\n+      if (TARGET_H8300SX && !sibcall_p)\n \treturned_p = true;\n       h8300_push_pop (HARD_FRAME_POINTER_REGNUM, 1, true, returned_p);\n     }\n \n-  if (!returned_p)\n+  if (!returned_p && !sibcall_p)\n     emit_jump_insn (ret_rtx);\n }\n \n@@ -5533,6 +5534,25 @@ h8300_push_rounding (poly_int64 bytes)\n {\n   return ((bytes + PARM_BOUNDARY / 8 - 1) & (-PARM_BOUNDARY / 8));\n }\n+\n+static bool\n+h8300_ok_for_sibcall_p (tree fndecl, tree)\n+{\n+  /* If either the caller or target are special, then assume sibling\n+     calls are not OK.  */\n+  if (!fndecl\n+      || h8300_os_task_function_p (fndecl)\n+      || h8300_monitor_function_p (fndecl)\n+      || h8300_interrupt_function_p (fndecl)\n+      || h8300_saveall_function_p (fndecl)\n+      || h8300_os_task_function_p (current_function_decl)\n+      || h8300_monitor_function_p (current_function_decl)\n+      || h8300_interrupt_function_p (current_function_decl)\n+      || h8300_saveall_function_p (current_function_decl))\n+    return false;\n+\n+  return 1;\n+}\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ATTRIBUTE_TABLE\n@@ -5628,4 +5648,7 @@ h8300_push_rounding (poly_int64 bytes)\n #undef TARGET_FLAGS_REGNUM\n #define TARGET_FLAGS_REGNUM 12\n \n+#undef TARGET_FUNCTION_OK_FOR_SIBCALL\n+#define TARGET_FUNCTION_OK_FOR_SIBCALL h8300_ok_for_sibcall_p\n+\n struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "b59639992a366e0324bb60dbd26820617eb2e696", "filename": "gcc/config/h8300/jumpcall.md", "status": "modified", "additions": 72, "deletions": 2, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fedadb60b6fc6425387faf4d514b4e8b0e24180e/gcc%2Fconfig%2Fh8300%2Fjumpcall.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fedadb60b6fc6425387faf4d514b4e8b0e24180e/gcc%2Fconfig%2Fh8300%2Fjumpcall.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fjumpcall.md?ref=fedadb60b6fc6425387faf4d514b4e8b0e24180e", "patch": "@@ -290,7 +290,7 @@\n (define_insn \"call_insn_<mode>\"\n   [(call (mem:QI (match_operand 0 \"call_insn_operand\" \"Cr\"))\n \t         (match_operand:P 1 \"general_operand\" \"g\"))]\n-  \"\"\n+  \"!SIBLING_CALL_P (insn)\"\n {\n   rtx xoperands[1];\n   xoperands[0] = gen_rtx_MEM (QImode, operands[0]);\n@@ -328,7 +328,7 @@\n   [(set (match_operand 0 \"\" \"=r\")\n \t(call (mem:QI (match_operand 1 \"call_insn_operand\" \"Cr\"))\n \t\t      (match_operand:P 2 \"general_operand\" \"g\")))]\n-  \"\"\n+  \"!SIBLING_CALL_P (insn)\"\n {\n   rtx xoperands[2];\n   gcc_assert (GET_MODE (operands[1]) == Pmode);\n@@ -347,3 +347,73 @@\n \t\t      (const_int 2)\n \t\t      (const_int 4)))])\n \n+(define_expand \"sibcall\"\n+  [(call (match_operand:QI 0 \"call_expander_operand\" \"\")\n+\t (match_operand 1 \"general_operand\" \"\"))]\n+  \"\"\n+  {\n+    if (!register_operand (XEXP (operands[0], 0), Pmode)\n+\t&& GET_CODE (XEXP (operands[0], 0)) != SYMBOL_REF)\n+      XEXP (operands[0], 0) = force_reg (Pmode, XEXP (operands[0], 0));\n+  })\n+\n+(define_insn \"sibcall_insn_<mode>\"\n+  [(call (mem:QI (match_operand 0 \"call_insn_operand\" \"Cr\"))\n+\t         (match_operand:P 1 \"general_operand\" \"g\"))]\n+  \"SIBLING_CALL_P (insn)\"\n+{\n+  rtx xoperands[1];\n+  xoperands[0] = gen_rtx_MEM (QImode, operands[0]);\n+  gcc_assert (GET_MODE (operands[0]) == Pmode);\n+  if (GET_CODE (XEXP (xoperands[0], 0)) == SYMBOL_REF\n+      && (SYMBOL_REF_FLAGS (XEXP (xoperands[0], 0)) & SYMBOL_FLAG_FUNCVEC_FUNCTION))\n+    output_asm_insn (\"jmp\\\\t@%0:8\", xoperands);\n+  else\n+    output_asm_insn (\"jmp\\\\t%0\", xoperands);\n+  return \"\";\n+}\n+  [(set_attr \"type\" \"call\")\n+   (set (attr \"length\")\n+\t(if_then_else (match_operand:QI 0 \"small_call_insn_operand\" \"\")\n+\t\t      (const_int 2)\n+\t\t      (const_int 4)))])\n+\n+;; Call subroutine, returning value in operand 0\n+;; (which must be a hard register).\n+\n+;; ??? Even though we use HImode here, this works on the H8/300H and H8S.\n+\n+(define_expand \"sibcall_value\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(call (match_operand:QI 1 \"call_expander_operand\" \"\")\n+\t      (match_operand 2 \"general_operand\" \"\")))]\n+  \"\"\n+  {\n+    if (!register_operand (XEXP (operands[1], 0), Pmode)\n+\t&& GET_CODE (XEXP (operands[1], 0)) != SYMBOL_REF)\n+      XEXP (operands[1], 0) = force_reg (Pmode, XEXP (operands[1], 0));\n+  })\n+\n+(define_insn \"sibcall_value_insn_<mode>\"\n+  [(set (match_operand 0 \"\" \"=r\")\n+\t(call (mem:QI (match_operand 1 \"call_insn_operand\" \"Cr\"))\n+\t\t      (match_operand:P 2 \"general_operand\" \"g\")))]\n+  \"SIBLING_CALL_P (insn)\"\n+{\n+  rtx xoperands[2];\n+  gcc_assert (GET_MODE (operands[1]) == Pmode);\n+  xoperands[0] = operands[0];\n+  xoperands[1] = gen_rtx_MEM (QImode, operands[1]);\n+  if (GET_CODE (XEXP (xoperands[1], 0)) == SYMBOL_REF\n+      && (SYMBOL_REF_FLAGS (XEXP (xoperands[1], 0)) & SYMBOL_FLAG_FUNCVEC_FUNCTION))\n+    output_asm_insn (\"jmp\\\\t@%1:8\", xoperands);\n+  else\n+    output_asm_insn (\"jmp\\\\t%1\", xoperands);\n+  return \"\";\n+}\n+  [(set_attr \"type\" \"call\")\n+   (set (attr \"length\")\n+\t(if_then_else (match_operand:QI 0 \"small_call_insn_operand\" \"\")\n+\t\t      (const_int 2)\n+\t\t      (const_int 4)))])\n+"}, {"sha": "ab58d02fc7f08bbead9ce8f6b2088248c22fd905", "filename": "gcc/config/h8300/proepi.md", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fedadb60b6fc6425387faf4d514b4e8b0e24180e/gcc%2Fconfig%2Fh8300%2Fproepi.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fedadb60b6fc6425387faf4d514b4e8b0e24180e/gcc%2Fconfig%2Fh8300%2Fproepi.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fproepi.md?ref=fedadb60b6fc6425387faf4d514b4e8b0e24180e", "patch": "@@ -98,7 +98,7 @@\n   [(return)]\n   \"\"\n   {\n-    h8300_expand_epilogue ();\n+    h8300_expand_epilogue (false);\n     DONE;\n   })\n \n@@ -121,3 +121,11 @@\n   gcc_unreachable ();\n }\n   [(set_attr \"length\" \"20\")])\n+\n+(define_expand \"sibcall_epilogue\"\n+  [(const_int 0)]\n+  \"\"\n+  {\n+    h8300_expand_epilogue (true);\n+    DONE;\n+  })"}]}