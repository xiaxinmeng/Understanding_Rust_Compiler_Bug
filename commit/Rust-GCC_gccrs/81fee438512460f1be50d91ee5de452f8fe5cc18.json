{"sha": "81fee438512460f1be50d91ee5de452f8fe5cc18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFmZWU0Mzg1MTI0NjBmMWJlNTBkOTFlZTVkZTQ1MmY4ZmU1Y2MxOA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-03-08T14:52:03Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-03-08T14:55:27Z"}, "message": "libsanitizer: cherry-pick ad294e572bc5c16f9dc420cc994322de6ca3fbfb\n\nlibsanitizer/ChangeLog:\n\n\tPR sanitizer/98920\n\t* asan/asan_interceptors.cpp (COMMON_INTERCEPT_FUNCTION_VER):\n\tCherry pick.\n\t(COMMON_INTERCEPT_FUNCTION_VER_UNVERSIONED_FALLBACK): Likewise.\n\t* asan/asan_interceptors.h (ASAN_INTERCEPT_FUNC_VER_UNVERSIONED_FALLBACK): Likewise.\n\t* sanitizer_common/sanitizer_common_interceptors.inc\n\t(COMMON_INTERCEPT_FUNCTION_GLIBC_VER_MIN): Likewise.\n\t(INIT_REGEX): Likewise.\n\t* tsan/tsan_interceptors_posix.cpp (COMMON_INTERCEPT_FUNCTION_VER_UNVERSIONED_FALLBACK):\n\tLikewise.\n\ngcc/testsuite/ChangeLog:\n\n\tPR sanitizer/98920\n\t* c-c++-common/asan/pr98920.c: New test.", "tree": {"sha": "082b41dce09fd3160704746c74a491689536c1b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/082b41dce09fd3160704746c74a491689536c1b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81fee438512460f1be50d91ee5de452f8fe5cc18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81fee438512460f1be50d91ee5de452f8fe5cc18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81fee438512460f1be50d91ee5de452f8fe5cc18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81fee438512460f1be50d91ee5de452f8fe5cc18/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04b4828c6dd215385fde6964a5e13da8a01a78ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04b4828c6dd215385fde6964a5e13da8a01a78ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04b4828c6dd215385fde6964a5e13da8a01a78ba"}], "stats": {"total": 57, "additions": 55, "deletions": 2}, "files": [{"sha": "881d3d4901e6bfd090755fa2861a7255caf51783", "filename": "gcc/testsuite/c-c++-common/asan/pr98920.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81fee438512460f1be50d91ee5de452f8fe5cc18/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpr98920.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81fee438512460f1be50d91ee5de452f8fe5cc18/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpr98920.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpr98920.c?ref=81fee438512460f1be50d91ee5de452f8fe5cc18", "patch": "@@ -0,0 +1,24 @@\n+/* PR sanitizer/98920 */\n+/* { dg-do run } */\n+\n+#include <stdio.h>\n+#include <sys/types.h>\n+#include <regex.h>\n+\n+int main(void)\n+{\n+    regex_t r;\n+    const char s[] = \"ban\\0ana\";\n+    regmatch_t pmatch[10];\n+    pmatch[0].rm_so = 0;\n+    pmatch[0].rm_eo = sizeof(s);\n+    if (regcomp(&r, \"ana\", 0))\n+        return 2;\n+    if (regexec(&r, s, sizeof(pmatch)/sizeof(pmatch[0]), pmatch, REG_STARTEND)) {\n+        fprintf(stderr, \"failed to match\\n\");\n+        regfree(&r);\n+        return 3;\n+    }\n+    regfree(&r);\n+    return 0;\n+}"}, {"sha": "4e68b3b0b4718cd499fdcc3d4cb7ed6ea6cc0946", "filename": "libsanitizer/asan/asan_interceptors.cpp", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81fee438512460f1be50d91ee5de452f8fe5cc18/libsanitizer%2Fasan%2Fasan_interceptors.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81fee438512460f1be50d91ee5de452f8fe5cc18/libsanitizer%2Fasan%2Fasan_interceptors.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_interceptors.cpp?ref=81fee438512460f1be50d91ee5de452f8fe5cc18", "patch": "@@ -90,8 +90,10 @@ DECLARE_REAL_AND_INTERCEPTOR(void, free, void *)\n   (void) ctx;                                                                  \\\n \n #define COMMON_INTERCEPT_FUNCTION(name) ASAN_INTERCEPT_FUNC(name)\n-#define COMMON_INTERCEPT_FUNCTION_VER(name, ver)                          \\\n+#define COMMON_INTERCEPT_FUNCTION_VER(name, ver) \\\n   ASAN_INTERCEPT_FUNC_VER(name, ver)\n+#define COMMON_INTERCEPT_FUNCTION_VER_UNVERSIONED_FALLBACK(name, ver) \\\n+  ASAN_INTERCEPT_FUNC_VER_UNVERSIONED_FALLBACK(name, ver)\n #define COMMON_INTERCEPTOR_WRITE_RANGE(ctx, ptr, size) \\\n   ASAN_WRITE_RANGE(ctx, ptr, size)\n #define COMMON_INTERCEPTOR_READ_RANGE(ctx, ptr, size) \\\n@@ -687,6 +689,7 @@ void InitializeAsanInterceptors() {\n \n   // Intercept threading-related functions\n #if ASAN_INTERCEPT_PTHREAD_CREATE\n+// TODO: this should probably have an unversioned fallback for newer arches?\n #if defined(ASAN_PTHREAD_CREATE_VERSION)\n   ASAN_INTERCEPT_FUNC_VER(pthread_create, ASAN_PTHREAD_CREATE_VERSION);\n #else"}, {"sha": "56dc34b7d9356f2cf315eda039244c4f4f37a05a", "filename": "libsanitizer/asan/asan_interceptors.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81fee438512460f1be50d91ee5de452f8fe5cc18/libsanitizer%2Fasan%2Fasan_interceptors.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81fee438512460f1be50d91ee5de452f8fe5cc18/libsanitizer%2Fasan%2Fasan_interceptors.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_interceptors.h?ref=81fee438512460f1be50d91ee5de452f8fe5cc18", "patch": "@@ -150,6 +150,13 @@ DECLARE_REAL(char*, strstr, const char *s1, const char *s2)\n       VReport(1, \"AddressSanitizer: failed to intercept '%s@@%s'\\n\", #name, \\\n               #ver);                                                        \\\n   } while (0)\n+#define ASAN_INTERCEPT_FUNC_VER_UNVERSIONED_FALLBACK(name, ver)              \\\n+  do {                                                                       \\\n+    if (!INTERCEPT_FUNCTION_VER(name, ver) && !INTERCEPT_FUNCTION(name))     \\\n+      VReport(1, \"AddressSanitizer: failed to intercept '%s@@%s' or '%s'\\n\", \\\n+              #name, #ver, #name);                                           \\\n+  } while (0)\n+\n #else\n // OS X interceptors don't need to be initialized with INTERCEPT_FUNCTION.\n #define ASAN_INTERCEPT_FUNC(name)"}, {"sha": "2f2787e283a7a28c9b8613a6da658fe3ec8d9f2a", "filename": "libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81fee438512460f1be50d91ee5de452f8fe5cc18/libsanitizer%2Fsanitizer_common%2Fsanitizer_common_interceptors.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81fee438512460f1be50d91ee5de452f8fe5cc18/libsanitizer%2Fsanitizer_common%2Fsanitizer_common_interceptors.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_common_interceptors.inc?ref=81fee438512460f1be50d91ee5de452f8fe5cc18", "patch": "@@ -239,6 +239,23 @@ extern const short *_tolower_tab_;\n     COMMON_INTERCEPT_FUNCTION(fn)\n #endif\n \n+#ifdef __GLIBC__\n+// If we could not find the versioned symbol, fall back to an unversioned\n+// lookup. This is needed to work around a GLibc bug that causes dlsym\n+// with RTLD_NEXT to return the oldest versioned symbol.\n+// See https://sourceware.org/bugzilla/show_bug.cgi?id=14932.\n+// For certain symbols (e.g. regexec) we have to perform a versioned lookup,\n+// but that versioned symbol will only exist for architectures where the\n+// oldest Glibc version pre-dates support for that architecture.\n+// For example, regexec@GLIBC_2.3.4 exists on x86_64, but not RISC-V.\n+// See also https://gcc.gnu.org/bugzilla/show_bug.cgi?id=98920.\n+#define COMMON_INTERCEPT_FUNCTION_GLIBC_VER_MIN(fn, ver) \\\n+  COMMON_INTERCEPT_FUNCTION_VER_UNVERSIONED_FALLBACK(fn, ver)\n+#else\n+#define COMMON_INTERCEPT_FUNCTION_GLIBC_VER_MIN(fn, ver) \\\n+  COMMON_INTERCEPT_FUNCTION(fn)\n+#endif\n+\n #ifndef COMMON_INTERCEPTOR_MEMSET_IMPL\n #define COMMON_INTERCEPTOR_MEMSET_IMPL(ctx, dst, v, size) \\\n   {                                                       \\\n@@ -7772,7 +7789,7 @@ INTERCEPTOR(void, regfree, const void *preg) {\n }\n #define INIT_REGEX                                                             \\\n   COMMON_INTERCEPT_FUNCTION(regcomp);                                          \\\n-  COMMON_INTERCEPT_FUNCTION(regexec);                                          \\\n+  COMMON_INTERCEPT_FUNCTION_GLIBC_VER_MIN(regexec, \"GLIBC_2.3.4\");             \\\n   COMMON_INTERCEPT_FUNCTION(regerror);                                         \\\n   COMMON_INTERCEPT_FUNCTION(regfree);\n #else"}, {"sha": "aa04d8dfb67a6674c8c6eed97f29adc3ed98b361", "filename": "libsanitizer/tsan/tsan_interceptors_posix.cpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81fee438512460f1be50d91ee5de452f8fe5cc18/libsanitizer%2Ftsan%2Ftsan_interceptors_posix.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81fee438512460f1be50d91ee5de452f8fe5cc18/libsanitizer%2Ftsan%2Ftsan_interceptors_posix.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Ftsan%2Ftsan_interceptors_posix.cpp?ref=81fee438512460f1be50d91ee5de452f8fe5cc18", "patch": "@@ -2227,6 +2227,8 @@ static void HandleRecvmsg(ThreadState *thr, uptr pc,\n #define COMMON_INTERCEPT_FUNCTION(name) INTERCEPT_FUNCTION(name)\n #define COMMON_INTERCEPT_FUNCTION_VER(name, ver)                          \\\n   INTERCEPT_FUNCTION_VER(name, ver)\n+#define COMMON_INTERCEPT_FUNCTION_VER_UNVERSIONED_FALLBACK(name, ver) \\\n+  (INTERCEPT_FUNCTION_VER(name, ver) || INTERCEPT_FUNCTION(name))\n \n #define COMMON_INTERCEPTOR_WRITE_RANGE(ctx, ptr, size)                    \\\n   MemoryAccessRange(((TsanInterceptorContext *)ctx)->thr,                 \\"}]}