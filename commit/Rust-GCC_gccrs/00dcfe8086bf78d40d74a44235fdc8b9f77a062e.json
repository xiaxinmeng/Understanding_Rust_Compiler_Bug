{"sha": "00dcfe8086bf78d40d74a44235fdc8b9f77a062e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBkY2ZlODA4NmJmNzhkNDBkNzRhNDQyMzVmZGM4YjlmNzdhMDYyZQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2003-03-28T23:21:21Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2003-03-28T23:21:21Z"}, "message": "reload1.c (reload_as_needed): Allow a USE in asm reloads.\n\n\t* reload1.c (reload_as_needed): Allow a USE in asm reloads.\n\n\t* loop.c: (find_mem_in_note_1, find_mem_in_note): Comment.\n\nFrom-SVN: r64991", "tree": {"sha": "2ddffa1f7579c82b4e17f87478fa9486fb5b18fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ddffa1f7579c82b4e17f87478fa9486fb5b18fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00dcfe8086bf78d40d74a44235fdc8b9f77a062e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00dcfe8086bf78d40d74a44235fdc8b9f77a062e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00dcfe8086bf78d40d74a44235fdc8b9f77a062e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00dcfe8086bf78d40d74a44235fdc8b9f77a062e/comments", "author": null, "committer": null, "parents": [{"sha": "d869a8c44bae17ed583a03c85a0e00bc28397eb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d869a8c44bae17ed583a03c85a0e00bc28397eb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d869a8c44bae17ed583a03c85a0e00bc28397eb7"}], "stats": {"total": 11, "additions": 11, "deletions": 0}, "files": [{"sha": "b345fd7dfed25574379e75361d179c9783f1badd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcfe8086bf78d40d74a44235fdc8b9f77a062e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcfe8086bf78d40d74a44235fdc8b9f77a062e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00dcfe8086bf78d40d74a44235fdc8b9f77a062e", "patch": "@@ -1,3 +1,9 @@\n+2003-03-29  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* reload1.c (reload_as_needed): Allow a USE in asm reloads.\n+\n+\t* loop.c: (find_mem_in_note_1, find_mem_in_note): Comment.\n+\n 2003-03-28  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* configure.in: Clarify comments."}, {"sha": "35ed161f8d63e1dd90327c5504db147159af7981", "filename": "gcc/loop.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcfe8086bf78d40d74a44235fdc8b9f77a062e/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcfe8086bf78d40d74a44235fdc8b9f77a062e/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=00dcfe8086bf78d40d74a44235fdc8b9f77a062e", "patch": "@@ -10400,6 +10400,8 @@ try_swap_copy_prop (loop, replacement, regno)\n     }\n }\n \n+/* Worker function for find_mem_in_note, called via for_each_rtx.  */\n+\n static int\n find_mem_in_note_1 (x, data)\n      rtx *x;\n@@ -10414,6 +10416,8 @@ find_mem_in_note_1 (x, data)\n   return 0;\n }\n \n+/* Returns the first MEM found in NOTE by depth-first search.  */\n+\n static rtx\n find_mem_in_note (note)\n      rtx note;"}, {"sha": "1ae89902b9d92dd5bf6f52cfd770fbc577b3e77a", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcfe8086bf78d40d74a44235fdc8b9f77a062e/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcfe8086bf78d40d74a44235fdc8b9f77a062e/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=00dcfe8086bf78d40d74a44235fdc8b9f77a062e", "patch": "@@ -3940,6 +3940,7 @@ reload_as_needed (live_known)\n \t      if (asm_noperands (PATTERN (insn)) >= 0)\n \t\tfor (p = NEXT_INSN (prev); p != next; p = NEXT_INSN (p))\n \t\t  if (p != insn && INSN_P (p)\n+\t\t      && GET_CODE (PATTERN (p)) != USE\n \t\t      && (recog_memoized (p) < 0\n \t\t\t  || (extract_insn (p), ! constrain_operands (1))))\n \t\t    {"}]}