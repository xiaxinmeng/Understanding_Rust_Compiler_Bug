{"sha": "08158df35aaccfdb532a7ad441f5f2a93513b9df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDgxNThkZjM1YWFjY2ZkYjUzMmE3YWQ0NDFmNWYyYTkzNTEzYjlkZg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2000-04-10T12:31:19Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-04-10T12:31:19Z"}, "message": "sbitmap.h: Whitespace changes and use upper-case macro args.\n\n\t* sbitmap.h: Whitespace changes and use upper-case macro args.\n\t(struct simple_bitmap_def): All sizes now unsigned.\n\t(EXECUTE_IF_SET_IN_SBITMAP): Internal vars now _X instead of X_.\n\t* sbitmap.c (sbitmap_alloc): N_ELMS now unsigned; also local vars.\n\t(sbitmap_vector_alloc): Parms and local vars now unsigned.\n\t(sbitmap_zero): Cast bzero arg to PTR.\n\t(sbitmap_vector_zero, sbitmap_vector_one): Parm and Local var unsigned.\n\t(sbitmap_union_of_diffs): Change loop index to unsigned and rework\n\tloop to make structure clearer.\n\t(sbitmap_not, sbitmap_difference, sbitmap_a_and_b): Likewise.\n\t(sbitmap_a_or_b, sbitmap_a_subset_b_p, sbitmap_a_or_b_and_c): Likewise.\n\t(sbitmap_a_and_b_or_c): Likewise.\n\t(sbitmap_intersection_of_succs): Minor cleanups.\n\t(sbitmap_intersection_of_preds, sbitmap_union_of_succs): Likewise.\n\t(sbitmap_union_of_preds): Likewise.\n\t(sbitmap_first_set_bit, dump_sbitmap): Local variables now unsigned.\n\t(debug_sbitmap): New function.\n\nFrom-SVN: r33059", "tree": {"sha": "5bbcb93610f7bbca2cdd9644cbcc436de45c60bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bbcb93610f7bbca2cdd9644cbcc436de45c60bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08158df35aaccfdb532a7ad441f5f2a93513b9df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08158df35aaccfdb532a7ad441f5f2a93513b9df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08158df35aaccfdb532a7ad441f5f2a93513b9df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08158df35aaccfdb532a7ad441f5f2a93513b9df/comments", "author": null, "committer": null, "parents": [{"sha": "98d64f692f4119a8d93cc49cc2d63976298a47f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98d64f692f4119a8d93cc49cc2d63976298a47f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98d64f692f4119a8d93cc49cc2d63976298a47f8"}], "stats": {"total": 600, "additions": 318, "deletions": 282}, "files": [{"sha": "6e68d124924d437a5f010d6a40a356bfb4cabb1a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08158df35aaccfdb532a7ad441f5f2a93513b9df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08158df35aaccfdb532a7ad441f5f2a93513b9df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=08158df35aaccfdb532a7ad441f5f2a93513b9df", "patch": "@@ -1,5 +1,23 @@\n Mon Apr 10 07:21:13 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* sbitmap.h: Whitespace changes and use upper-case macro args.\n+\t(struct simple_bitmap_def): All sizes now unsigned.\n+\t(EXECUTE_IF_SET_IN_SBITMAP): Internal vars now _X instead of X_.\n+\t* sbitmap.c (sbitmap_alloc): N_ELMS now unsigned; also local vars.\n+\t(sbitmap_vector_alloc): Parms and local vars now unsigned.\n+\t(sbitmap_zero): Cast bzero arg to PTR.\n+\t(sbitmap_vector_zero, sbitmap_vector_one): Parm and Local var unsigned.\n+\t(sbitmap_union_of_diffs): Change loop index to unsigned and rework\n+\tloop to make structure clearer.\n+\t(sbitmap_not, sbitmap_difference, sbitmap_a_and_b): Likewise.\n+\t(sbitmap_a_or_b, sbitmap_a_subset_b_p, sbitmap_a_or_b_and_c): Likewise.\n+\t(sbitmap_a_and_b_or_c): Likewise.\n+\t(sbitmap_intersection_of_succs): Minor cleanups.\n+\t(sbitmap_intersection_of_preds, sbitmap_union_of_succs): Likewise.\n+\t(sbitmap_union_of_preds): Likewise.\n+\t(sbitmap_first_set_bit, dump_sbitmap): Local variables now unsigned.\n+\t(debug_sbitmap): New function.\n+\t\n \t* c-convert.c (convert): Handle REFERENCE_TYPE like POINTER_TYPE.\n \t* c-typeck.c (convert_for_assignment): Likewise.\n "}, {"sha": "da27c3212b3864299098b047c3ae7ca2478ae5a4", "filename": "gcc/sbitmap.c", "status": "modified", "additions": 224, "deletions": 205, "changes": 429, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08158df35aaccfdb532a7ad441f5f2a93513b9df/gcc%2Fsbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08158df35aaccfdb532a7ad441f5f2a93513b9df/gcc%2Fsbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsbitmap.c?ref=08158df35aaccfdb532a7ad441f5f2a93513b9df", "patch": "@@ -1,5 +1,5 @@\n /* Simple bitmaps.\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -30,9 +30,9 @@ Boston, MA 02111-1307, USA.  */\n \n sbitmap\n sbitmap_alloc (n_elms)\n-     int n_elms;\n+     unsigned int n_elms;\n {\n-  int bytes, size, amt;\n+  unsigned int bytes, size, amt;\n   sbitmap bmap;\n \n   size = SBITMAP_SET_SIZE (n_elms);\n@@ -50,9 +50,9 @@ sbitmap_alloc (n_elms)\n \n sbitmap *\n sbitmap_vector_alloc (n_vecs, n_elms)\n-     int n_vecs, n_elms;\n+     unsigned int n_vecs, n_elms;\n {\n-  int i, bytes, offset, elm_bytes, size, amt, vector_bytes;\n+  unsigned int i, bytes, offset, elm_bytes, size, amt, vector_bytes;\n   sbitmap *bitmap_vector;\n \n   size = SBITMAP_SET_SIZE (n_elms);\n@@ -76,11 +76,10 @@ sbitmap_vector_alloc (n_vecs, n_elms)\n   amt = vector_bytes + (n_vecs * elm_bytes);\n   bitmap_vector = (sbitmap *) xmalloc (amt);\n \n-  for (i = 0, offset = vector_bytes;\n-       i < n_vecs;\n-       i++, offset += elm_bytes)\n+  for (i = 0, offset = vector_bytes; i < n_vecs; i++, offset += elm_bytes)\n     {\n       sbitmap b = (sbitmap) ((char *) bitmap_vector + offset);\n+\n       bitmap_vector[i] = b;\n       b->n_bits = n_elms;\n       b->size = size;\n@@ -106,48 +105,46 @@ void\n sbitmap_zero (bmap)\n      sbitmap bmap;\n {\n-  bzero ((char *) bmap->elms, bmap->bytes);\n+  bzero ((PTR) bmap->elms, bmap->bytes);\n }\n \n-/* Set to ones all elements in a bitmap.  */\n+/* Set all elements in a bitmap to ones.  */\n \n void\n sbitmap_ones (bmap)\n      sbitmap bmap;\n {\n   unsigned int last_bit;\n \n-  memset (bmap->elms, -1, bmap->bytes);\n+  memset ((PTR) bmap->elms, -1, bmap->bytes);\n \n-  last_bit = bmap->n_bits % (unsigned) SBITMAP_ELT_BITS;\n+  last_bit = bmap->n_bits % SBITMAP_ELT_BITS;\n   if (last_bit)\n-    {\n-      bmap->elms[bmap->size - 1]\n-        = (SBITMAP_ELT_TYPE)-1 >> (SBITMAP_ELT_BITS - last_bit);\n-    }\n+    bmap->elms[bmap->size - 1]\n+      = (SBITMAP_ELT_TYPE)-1 >> (SBITMAP_ELT_BITS - last_bit);\n }\n \n /* Zero a vector of N_VECS bitmaps.  */\n \n void\n sbitmap_vector_zero (bmap, n_vecs)\n      sbitmap *bmap;\n-     int n_vecs;\n+     unsigned int n_vecs;\n {\n-  int i;\n+  unsigned int i;\n \n   for (i = 0; i < n_vecs; i++)\n     sbitmap_zero (bmap[i]);\n }\n \n-/* Set to ones a vector of N_VECS bitmaps.  */\n+/* Set a vector of N_VECS bitmaps to ones.  */\n \n void\n sbitmap_vector_ones (bmap, n_vecs)\n      sbitmap *bmap;\n-     int n_vecs;\n+     unsigned int n_vecs;\n {\n-  int i;\n+  unsigned int i;\n \n   for (i = 0; i < n_vecs; i++)\n     sbitmap_ones (bmap[i]);\n@@ -161,22 +158,22 @@ int\n sbitmap_union_of_diff (dst, a, b, c)\n      sbitmap dst, a, b, c;\n {\n-  int i,changed;\n+  unsigned int i;\n   sbitmap_ptr dstp, ap, bp, cp;\n+  int changed = 0;\n \n-  changed = 0;\n-  dstp = dst->elms;\n-  ap = a->elms;\n-  bp = b->elms;\n-  cp = c->elms;\n-  for (i = 0; i < dst->size; i++)\n+  for (dstp = dst->elms, ap = a->elms, bp = b->elms, cp = c->elms, i = 0;\n+       i < dst->size; i++, dstp++)\n     {\n-      SBITMAP_ELT_TYPE tmp = *ap | (*bp & ~*cp);\n+      SBITMAP_ELT_TYPE tmp = *ap++ | (*bp++ & ~*cp++);\n+\n       if (*dstp != tmp)\n-\tchanged = 1;\n-      *dstp = tmp;\n-      dstp++; ap++; bp++; cp++;\n+\t{\n+\t  changed = 1;\n+\t  *dstp = tmp;\n+\t}\n     }\n+\n   return changed;\n }\n \n@@ -186,34 +183,24 @@ void\n sbitmap_not (dst, src)\n      sbitmap dst, src;\n {\n-  int i;\n-  sbitmap_ptr dstp, ap;\n+  unsigned int i;\n+  sbitmap_ptr dstp, srcp;\n \n-  dstp = dst->elms;\n-  ap = src->elms;\n-  for (i = 0; i < dst->size; i++)\n-    {\n-      SBITMAP_ELT_TYPE tmp = ~(*ap);\n-      *dstp = tmp;\n-      dstp++; ap++;\n-    }\n+  for (dstp = dst->elms, srcp = src->elms, i = 0; i < dst->size; i++)\n+    *dstp++ = ~(*srcp++);\n }\n \n /* Set the bits in DST to be the difference between the bits\n-   in A and the bits in B. i.e. dst = a - b.\n-   The - operator is implemented as a & (~b).  */\n+   in A and the bits in B. i.e. dst = a & (~b).  */\n \n void\n sbitmap_difference (dst, a, b)\n      sbitmap dst, a, b;\n {\n-  int i;\n+  unsigned int i;\n   sbitmap_ptr dstp, ap, bp;\n-\n-  dstp = dst->elms;\n-  ap = a->elms;\n-  bp = b->elms;\n-  for (i = 0; i < dst->size; i++)\n+  \n+  for (dstp = dst->elms, ap = a->elms, bp = b->elms, i = 0; i < dst->size; i++)\n     *dstp++ = *ap++ & (~*bp++);\n }\n \n@@ -224,64 +211,65 @@ int\n sbitmap_a_and_b (dst, a, b)\n      sbitmap dst, a, b;\n {\n-  int i,changed;\n+  unsigned int i;\n   sbitmap_ptr dstp, ap, bp;\n+  int changed = 0;\n \n-  changed = 0;\n-  dstp = dst->elms;\n-  ap = a->elms;\n-  bp = b->elms;\n-  for (i = 0; i < dst->size; i++)\n+  for (dstp = dst->elms, ap = a->elms, bp = b->elms, i = 0; i < dst->size;\n+       i++, dstp++)\n     {\n-      SBITMAP_ELT_TYPE tmp = *ap & *bp;\n+      SBITMAP_ELT_TYPE tmp = *ap++ & *bp++;\n+\n       if (*dstp != tmp)\n-\tchanged = 1;\n-      *dstp = tmp;\n-      dstp++; ap++; bp++;\n+\t{\n+\t  changed = 1;\n+\t  *dstp = tmp;\n+\t}\n     }\n+\n   return changed;\n }\n+\n /* Set DST to be (A or B)).\n    Return non-zero if any change is made.  */\n \n int\n sbitmap_a_or_b (dst, a, b)\n      sbitmap dst, a, b;\n {\n-  int i,changed;\n+  unsigned int i;\n   sbitmap_ptr dstp, ap, bp;\n+  int changed = 0;\n \n-  changed = 0;\n-  dstp = dst->elms;\n-  ap = a->elms;\n-  bp = b->elms;\n-  for (i = 0; i < dst->size; i++)\n+  for (dstp = dst->elms, ap = a->elms, bp = b->elms, i = 0; i < dst->size;\n+       i++, dstp++)\n     {\n-      SBITMAP_ELT_TYPE tmp = *ap | *bp;\n+      SBITMAP_ELT_TYPE tmp = *ap++ | *bp++;\n+\n       if (*dstp != tmp)\n-\tchanged = 1;\n-      *dstp = tmp;\n-      dstp++; ap++; bp++;\n+\t{\n+\t  changed = 1;\n+\t  *dstp = tmp;\n+\t}\n     }\n+\n   return changed;\n }\n+\n /* Return non-zero if A is a subset of B.  */\n \n int\n sbitmap_a_subset_b_p (a, b)\n      sbitmap a, b;\n {\n-  int i;\n+  unsigned int i;\n   sbitmap_ptr ap, bp;\n \n-  ap = a->elms;\n-  bp = b->elms;\n-  for (i = 0; i < a->size; i++)\n-    {\n-      if ((*ap | *bp) != *bp)\n-\treturn 0;\n-      ap++; bp++;\n-    }\n+  \n+  for (ap = a->elms, bp = b->elms, i = 0; i < a->size; i++)\n+    if ((*ap++ | *bp++) != *bp)\n+      return 0;\n+\n   return 1;\n }\n \n@@ -292,48 +280,48 @@ int\n sbitmap_a_or_b_and_c (dst, a, b, c)\n      sbitmap dst, a, b, c;\n {\n-  int i,changed;\n+  unsigned int i;\n   sbitmap_ptr dstp, ap, bp, cp;\n+  int changed = 0;\n \n-  changed = 0;\n-  dstp = dst->elms;\n-  ap = a->elms;\n-  bp = b->elms;\n-  cp = c->elms;\n-  for (i = 0; i < dst->size; i++)\n+  for (dstp = dst->elms, ap = a->elms, bp = b->elms, cp = c->elms, i = 0;\n+       i < dst->size; i++, dstp++)\n     {\n-      SBITMAP_ELT_TYPE tmp = *ap | (*bp & *cp);\n+      SBITMAP_ELT_TYPE tmp = *ap++ | (*bp++ & *cp++);\n+\n       if (*dstp != tmp)\n-\tchanged = 1;\n-      *dstp = tmp;\n-      dstp++; ap++; bp++; cp++;\n+\t{\n+\t  changed = 1;\n+\t  *dstp = tmp;\n+\t}\n     }\n+\n   return changed;\n }\n \n-/* Set DST to be (A ann (B or C)).\n+/* Set DST to be (A and (B or C)).\n    Return non-zero if any change is made.  */\n \n int\n sbitmap_a_and_b_or_c (dst, a, b, c)\n      sbitmap dst, a, b, c;\n {\n-  int i,changed;\n+  unsigned int i;\n   sbitmap_ptr dstp, ap, bp, cp;\n+  int changed = 0;\n \n-  changed = 0;\n-  dstp = dst->elms;\n-  ap = a->elms;\n-  bp = b->elms;\n-  cp = c->elms;\n-  for (i = 0; i < dst->size; i++)\n+  for (dstp = dst->elms, ap = a->elms, bp = b->elms, cp = c->elms, i = 0;\n+       i < dst->size; i++, dstp++)\n     {\n-      SBITMAP_ELT_TYPE tmp = *ap & (*bp | *cp);\n+      SBITMAP_ELT_TYPE tmp = *ap++ & (*bp++ | *cp++);\n+\n       if (*dstp != tmp)\n-\tchanged = 1;\n-      *dstp = tmp;\n-      dstp++; ap++; bp++; cp++;\n+\t{\n+\t  changed = 1;\n+\t  *dstp = tmp;\n+\t}\n     }\n+\n   return changed;\n }\n \n@@ -347,34 +335,34 @@ sbitmap_intersection_of_succs (dst, src, bb)\n      int bb;\n {\n   basic_block b = BASIC_BLOCK (bb);\n-  edge e = b->succ;\n-  int set_size = dst->size;\n+  unsigned int set_size = dst->size;\n+  edge e;\n \n-  for ( ; e != NULL; e = e->succ_next)\n+  for (e = b->succ; e != 0; e = e->succ_next)\n     {\n       if (e->dest == EXIT_BLOCK_PTR)\n         continue;\n+\n       sbitmap_copy (dst, src[e->dest->index]);\n       break;\n     }\n-  if (e == NULL)\n+\n+  if (e == 0)\n     sbitmap_ones (dst);\n   else\n-    {\n-      for ( e = e->succ_next; e != NULL; e = e->succ_next)\n-        {\n-\t  int i;\n-\t  sbitmap_ptr p,r;\n-\n-\t  if (e->dest == EXIT_BLOCK_PTR)\n-\t    continue;\n-\n-\t  p = src[e->dest->index]->elms;\n-\t  r = dst->elms;\n-\t  for (i = 0; i < set_size; i++)\n-\t    *r++ &= *p++;\n-\t}\n-    }\n+    for (e = e->succ_next; e != 0; e = e->succ_next)\n+      {\n+\tunsigned int i;\n+\tsbitmap_ptr p, r;\n+\n+\tif (e->dest == EXIT_BLOCK_PTR)\n+\t  continue;\n+\n+\tp = src[e->dest->index]->elms;\n+\tr = dst->elms;\n+\tfor (i = 0; i < set_size; i++)\n+\t  *r++ &= *p++;\n+      }\n }\n \n /* Set the bitmap DST to the intersection of SRC of predecessors of\n@@ -387,34 +375,34 @@ sbitmap_intersection_of_preds (dst, src, bb)\n      int bb;\n {\n   basic_block b = BASIC_BLOCK (bb);\n-  edge e = b->pred;\n-  int set_size = dst->size;\n+  unsigned int set_size = dst->size;\n+  edge e;\n \n-  for ( ; e != NULL; e = e->pred_next)\n+  for (e = b->pred; e != 0; e = e->pred_next)\n     {\n-      if (e->src== ENTRY_BLOCK_PTR)\n+      if (e->src == ENTRY_BLOCK_PTR)\n         continue;\n+\n       sbitmap_copy (dst, src[e->src->index]);\n       break;\n     }\n-  if (e == NULL)\n+\n+  if (e == 0)\n     sbitmap_ones (dst);\n   else\n-    {\n-      for ( e = e->pred_next; e != NULL; e = e->pred_next)\n-        {\n-\t  int i;\n-\t  sbitmap_ptr p,r;\n-\n-\t  if (e->src == ENTRY_BLOCK_PTR)\n-\t    continue;\n-\n-\t  p = src[e->src->index]->elms;\n-\t  r = dst->elms;\n-\t  for (i = 0; i < set_size; i++)\n-\t    *r++ &= *p++;\n-\t}\n-    }\n+    for (e = e->pred_next; e != 0; e = e->pred_next)\n+      {\n+\tunsigned int i;\n+\tsbitmap_ptr p, r;\n+\n+\tif (e->src == ENTRY_BLOCK_PTR)\n+\t  continue;\n+\n+\tp = src[e->src->index]->elms;\n+\tr = dst->elms;\n+\tfor (i = 0; i < set_size; i++)\n+\t  *r++ &= *p++;\n+      }\n }\n \n /* Set the bitmap DST to the union of SRC of successors of\n@@ -427,34 +415,34 @@ sbitmap_union_of_succs (dst, src, bb)\n      int bb;\n {\n   basic_block b = BASIC_BLOCK (bb);\n-  edge e = b->succ;\n-  int set_size = dst->size;\n+  unsigned int set_size = dst->size;\n+  edge e;\n \n-  for ( ; e != NULL; e = e->succ_next)\n+  for (e = b->succ; e != 0; e = e->succ_next)\n     {\n       if (e->dest == EXIT_BLOCK_PTR)\n         continue;\n+\n       sbitmap_copy (dst, src[e->dest->index]);\n       break;\n     }\n-  if (e == NULL)\n+\n+  if (e == 0)\n     sbitmap_zero (dst);\n   else\n-    {\n-      for ( e = e->succ_next; e != NULL; e = e->succ_next)\n-        {\n-\t  int i;\n-\t  sbitmap_ptr p,r;\n-\n-\t  if (e->dest == EXIT_BLOCK_PTR)\n-\t    continue;\n-\n-\t  p = src[e->dest->index]->elms;\n-\t  r = dst->elms;\n-\t  for (i = 0; i < set_size; i++)\n-\t    *r++ |= *p++;\n-\t}\n-    }\n+    for (e = e->succ_next; e != 0; e = e->succ_next)\n+      {\n+\tunsigned int i;\n+\tsbitmap_ptr p, r;\n+\n+\tif (e->dest == EXIT_BLOCK_PTR)\n+\t  continue;\n+\n+\tp = src[e->dest->index]->elms;\n+\tr = dst->elms;\n+\tfor (i = 0; i < set_size; i++)\n+\t  *r++ |= *p++;\n+      }\n }\n \n /* Set the bitmap DST to the union of SRC of predecessors of\n@@ -467,34 +455,34 @@ sbitmap_union_of_preds (dst, src, bb)\n      int bb;\n {\n   basic_block b = BASIC_BLOCK (bb);\n-  edge e = b->pred;\n-  int set_size = dst->size;\n+  unsigned int set_size = dst->size;\n+  edge e;\n \n-  for ( ; e != NULL; e = e->pred_next)\n+  for (e = b->pred; e != 0; e = e->pred_next)\n     {\n       if (e->src== ENTRY_BLOCK_PTR)\n         continue;\n+\n       sbitmap_copy (dst, src[e->src->index]);\n       break;\n     }\n-  if (e == NULL)\n+\n+  if (e == 0)\n     sbitmap_zero (dst);\n   else\n-    {\n-      for ( e = e->pred_next; e != NULL; e = e->pred_next)\n-        {\n-\t  int i;\n-\t  sbitmap_ptr p,r;\n-\n-\t  if (e->src == ENTRY_BLOCK_PTR)\n-\t    continue;\n-\n-\t  p = src[e->src->index]->elms;\n-\t  r = dst->elms;\n-\t  for (i = 0; i < set_size; i++)\n-\t    *r++ |= *p++;\n-\t}\n-    }\n+    for (e = e->pred_next; e != 0; e = e->pred_next)\n+      {\n+\tunsigned int i;\n+\tsbitmap_ptr p, r;\n+\n+\tif (e->src == ENTRY_BLOCK_PTR)\n+\t  continue;\n+\t\n+\tp = src[e->src->index]->elms;\n+\tr = dst->elms;\n+\tfor (i = 0; i < set_size; i++)\n+\t  *r++ |= *p++;\n+      }\n }\n \n /* Return number of first bit set in the bitmap, -1 if none.  */\n@@ -503,7 +491,8 @@ int\n sbitmap_first_set_bit (bmap)\n      sbitmap bmap;\n {\n-  int n;\n+  unsigned int n;\n+\n   EXECUTE_IF_SET_IN_SBITMAP (bmap, 0, n, { return n; });\n   return -1;\n }\n@@ -516,22 +505,28 @@ sbitmap_last_set_bit (bmap)\n {\n   int i;\n   SBITMAP_ELT_TYPE *ptr = bmap->elms;\n+\n   for (i = bmap->size - 1; i >= 0; i--)\n     {\n       SBITMAP_ELT_TYPE word = ptr[i];\n-      if (word)\n-      {\n-        int index = (i + 1) * SBITMAP_ELT_BITS - 1;\n-        SBITMAP_ELT_TYPE mask = (SBITMAP_ELT_TYPE) 1 << (SBITMAP_ELT_BITS - 1);\n-        while (1)\n-          {\n-            if (word & mask)\n-              return index;\n-            mask >>= 1;\n-            index--;\n-          }\n-      }\n+\n+      if (word != 0)\n+\t{\n+\t  unsigned int index = (i + 1) * SBITMAP_ELT_BITS - 1;\n+\t  SBITMAP_ELT_TYPE mask\n+\t    = (SBITMAP_ELT_TYPE) 1 << (SBITMAP_ELT_BITS - 1);\n+\n+\t  while (1)\n+\t    {\n+\t      if ((word & mask) != 0)\n+\t\treturn index;\n+\n+\t      mask >>= 1;\n+\t      index--;\n+\t    }\n+\t}\n     }\n+\n   return -1;\n }\n \n@@ -540,25 +535,48 @@ dump_sbitmap (file, bmap)\n      FILE *file;\n      sbitmap bmap;\n {\n-  int i, n;\n-  unsigned int j;\n-  int set_size = bmap->size;\n-  int total_bits = bmap->n_bits;\n+  unsigned int i, n, j;\n+  unsigned int set_size = bmap->size;\n+  unsigned int total_bits = bmap->n_bits;\n \n   fprintf (file, \"  \");\n   for (i = n = 0; i < set_size && n < total_bits; i++)\n-    {\n-      for (j = 0; j < SBITMAP_ELT_BITS && n < total_bits; j++, n++)\n-\t{\n-\t  if (n != 0 && n % 10 == 0)\n-\t    fprintf (file, \" \");\n-\t  fprintf (file, \"%d\",\n-\t\t   (bmap->elms[i] & ((SBITMAP_ELT_TYPE) 1 << j)) != 0);\n-\t}\n-    }\n+    for (j = 0; j < SBITMAP_ELT_BITS && n < total_bits; j++, n++)\n+      {\n+\tif (n != 0 && n % 10 == 0)\n+\t  fprintf (file, \" \");\n+\n+\tfprintf (file, \"%d\",\n+\t\t (bmap->elms[i] & ((SBITMAP_ELT_TYPE) 1 << j)) != 0);\n+      }\n+\n   fprintf (file, \"\\n\");\n }\n \n+void\n+debug_sbitmap (bmap)\n+     sbitmap bmap;\n+{\n+  unsigned int i, pos;\n+\n+  fprintf (stderr, \"n_bits = %d, set = {\", bmap->n_bits);\n+\n+  for (pos = 30, i = 0; i < bmap->n_bits; i++)\n+    if (TEST_BIT (bmap, i))\n+      {\n+\tif (pos > 70)\n+\t  {\n+\t    fprintf (stderr, \"\\n\");\n+\t    pos = 0;\n+\t  }\n+\n+\tfprintf (stderr, \"%d \", i);\n+\tpos += 1 + (i >= 10) + (i >= 100);\n+      }\n+\n+  fprintf (stderr, \"}\\n\");\n+}\n+\n void\n dump_sbitmap_vector (file, title, subtitle, bmaps, n_maps)\n      FILE *file;\n@@ -574,5 +592,6 @@ dump_sbitmap_vector (file, title, subtitle, bmaps, n_maps)\n       fprintf (file, \"%s %d\\n\", subtitle, bb);\n       dump_sbitmap (file, bmaps[bb]);\n     }\n+\n   fprintf (file, \"\\n\");\n }"}, {"sha": "b82b92b1ae19717ca6de50c52df5f93d7fc67170", "filename": "gcc/sbitmap.h", "status": "modified", "additions": 76, "deletions": 77, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08158df35aaccfdb532a7ad441f5f2a93513b9df/gcc%2Fsbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08158df35aaccfdb532a7ad441f5f2a93513b9df/gcc%2Fsbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsbitmap.h?ref=08158df35aaccfdb532a7ad441f5f2a93513b9df", "patch": "@@ -28,112 +28,111 @@ Boston, MA 02111-1307, USA.  */\n #define SBITMAP_ELT_BITS ((unsigned) HOST_BITS_PER_WIDE_INT)\n #define SBITMAP_ELT_TYPE unsigned HOST_WIDE_INT\n \n-typedef struct simple_bitmap_def {\n-  /* Number of bits.  */\n-  int n_bits;\n-  /* Size in elements.  */\n-  int size;\n-  /* Size in bytes.  */\n-  int bytes;\n-  /* The elements.  */\n-  SBITMAP_ELT_TYPE elms[1];\n+typedef struct simple_bitmap_def\n+{\n+  unsigned int n_bits;\t\t/* Number of bits.  */\n+  unsigned int size;\t\t/* Size in elements.  */\n+  unsigned int bytes;\t\t/* Size in bytes.  */\n+  SBITMAP_ELT_TYPE elms[1];\t/* The elements.  */\n } *sbitmap;\n \n typedef SBITMAP_ELT_TYPE *sbitmap_ptr;\n \n /* Return the set size needed for N elements.  */\n-#define SBITMAP_SET_SIZE(n) (((n) + SBITMAP_ELT_BITS - 1) / SBITMAP_ELT_BITS)\n+#define SBITMAP_SET_SIZE(N) (((N) + SBITMAP_ELT_BITS - 1) / SBITMAP_ELT_BITS)\n \n-/* set bit number bitno in the bitmap */\n-#define SET_BIT(bitmap, bitno)\t\t\t\t\t\\\n-  ((bitmap)->elms [(bitno) / SBITMAP_ELT_BITS]\t\t\t\\\n-   |= (SBITMAP_ELT_TYPE) 1 << (bitno) % SBITMAP_ELT_BITS)\n+/* Set bit number bitno in the bitmap.  */\n+#define SET_BIT(BITMAP, BITNO)\t\t\t\t\t\\\n+  ((BITMAP)->elms [(BITNO) / SBITMAP_ELT_BITS]\t\t\t\\\n+   |= (SBITMAP_ELT_TYPE) 1 << (BITNO) % SBITMAP_ELT_BITS)\n \n-/* test if bit number bitno in the bitmap is set */\n-#define TEST_BIT(bitmap, bitno) \\\n-((bitmap)->elms [(bitno) / SBITMAP_ELT_BITS] >> (bitno) % SBITMAP_ELT_BITS & 1)\n+/* Test if bit number bitno in the bitmap is set.  */\n+#define TEST_BIT(BITMAP, BITNO) \\\n+((BITMAP)->elms [(BITNO) / SBITMAP_ELT_BITS] >> (BITNO) % SBITMAP_ELT_BITS & 1)\n \n-/* reset bit number bitno in the bitmap  */\n-#define RESET_BIT(bitmap, bitno)\t\t\t\t\\\n-  ((bitmap)->elms [(bitno) / SBITMAP_ELT_BITS]\t\t\t\\\n-   &= ~((SBITMAP_ELT_TYPE) 1 << (bitno) % SBITMAP_ELT_BITS))\n+/* Reset bit number bitno in the bitmap.  */\n+#define RESET_BIT(BITMAP, BITNO)\t\t\t\t\\\n+  ((BITMAP)->elms [(BITNO) / SBITMAP_ELT_BITS]\t\t\t\\\n+   &= ~((SBITMAP_ELT_TYPE) 1 << (BITNO) % SBITMAP_ELT_BITS))\n \n /* Loop over all elements of SBITSET, starting with MIN.  */\n #define EXECUTE_IF_SET_IN_SBITMAP(SBITMAP, MIN, N, CODE)\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned int bit_num_ = (MIN) % (unsigned) SBITMAP_ELT_BITS;\t\t\\\n-  unsigned int word_num_ = (MIN) / (unsigned) SBITMAP_ELT_BITS;\t\t\\\n-  unsigned int size_ = (SBITMAP)->size;\t\t\t\t\t\\\n-  SBITMAP_ELT_TYPE *ptr_ = (SBITMAP)->elms;\t\t\t\t\\\n+  unsigned int _word_num;\t\t\t\t\t\t\\\n+  unsigned int _bit_num = (MIN) % (unsigned int) SBITMAP_ELT_BITS;\t\\\n+  unsigned int _size = (SBITMAP)->size;\t\t\t\t\t\\\n+  SBITMAP_ELT_TYPE *_ptr = (SBITMAP)->elms;\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-  while (word_num_ < size_)\t\t\t\t\t\t\\\n+  for (_word_num = (MIN) / (unsigned int) SBITMAP_ELT_BITS;\t\t\\\n+       _word_num < _size; _word_num++, _bit_num = 0)\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      SBITMAP_ELT_TYPE word_ = ptr_[word_num_];\t\t\t\t\\\n-      if (word_ != 0)\t\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  for (; bit_num_ < SBITMAP_ELT_BITS; ++bit_num_)\t\t\\\n-\t    {\t\t\t\t\t\t\t\t\\\n-\t      SBITMAP_ELT_TYPE mask_ = (SBITMAP_ELT_TYPE)1 << bit_num_;\t\\\n-\t      if ((word_ & mask_) != 0)\t\t\t\t\t\\\n-\t\t{\t\t\t\t\t\t\t\\\n-\t\t  word_ &= ~mask_;\t\t\t\t\t\\\n-\t\t  (N) = word_num_ * SBITMAP_ELT_BITS + bit_num_;\t\\\n-\t\t  CODE;\t\t\t\t\t\t\t\\\n-\t\t  if (word_ == 0)\t\t\t\t\t\\\n-\t\t    break;\t\t\t\t\t\t\\\n-\t\t}\t\t\t\t\t\t\t\\\n-\t    }\t\t\t\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-      bit_num_ = 0;\t\t\t\t\t\t\t\\\n-      word_num_++;\t\t\t\t\t\t\t\\\n-   }\t\t\t\t\t\t\t\t\t\\\n+      SBITMAP_ELT_TYPE _word = _ptr[_word_num];\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      if (_word != 0)\t\t\t\t\t\t\t\\\n+\tfor (; _bit_num < SBITMAP_ELT_BITS; _bit_num++)\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\t\\\n+\t    SBITMAP_ELT_TYPE _mask = (SBITMAP_ELT_TYPE)1 << _bit_num;\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\t    if ((_word & _mask) != 0)\t\t\t\t\t\\\n+\t      {\t\t\t\t\t\t\t\t\\\n+\t\t_word &= ~ _mask;\t\t\t\t\t\\\n+\t\t(N) = _word_num * SBITMAP_ELT_BITS + _bit_num;\t\t\\\n+\t\tCODE;\t\t\t\t\t\t\t\\\n+\t\tif (_word == 0)\t\t\t\t\t\t\\\n+\t\t  break;\t\t\t\t\t\t\\\n+\t      }\t\t\t\t\t\t\t\t\\\n+\t  }\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n } while (0)\n \n-#define sbitmap_free(map)\t\tfree(map)\n-#define sbitmap_vector_free(vec)\tfree(vec)\n-\n-extern void dump_sbitmap PARAMS ((FILE *, sbitmap));\n-extern void dump_sbitmap_vector PARAMS ((FILE *, const char *, const char *,\n-\t\t\t\t\tsbitmap *, int));\n-\n-extern sbitmap sbitmap_alloc PARAMS ((int));\n-extern sbitmap *sbitmap_vector_alloc PARAMS ((int, int));\n+#define sbitmap_free(MAP)\t\tfree(MAP)\n+#define sbitmap_vector_free(VEC)\tfree(VEC)\n \n-extern void sbitmap_copy PARAMS ((sbitmap, sbitmap));\n-extern void sbitmap_zero PARAMS ((sbitmap));\n-extern void sbitmap_ones PARAMS ((sbitmap));\n-extern void sbitmap_vector_zero PARAMS ((sbitmap *, int));\n-extern void sbitmap_vector_ones PARAMS ((sbitmap *, int));\n-\n-extern int sbitmap_union_of_diff PARAMS ((sbitmap, sbitmap, sbitmap, sbitmap));\n-extern void sbitmap_difference PARAMS ((sbitmap, sbitmap, sbitmap));\n-extern void sbitmap_not PARAMS ((sbitmap, sbitmap));\n-extern int sbitmap_a_or_b_and_c PARAMS ((sbitmap, sbitmap, sbitmap, sbitmap));\n-extern int sbitmap_a_and_b_or_c PARAMS ((sbitmap, sbitmap, sbitmap, sbitmap));\n-extern int sbitmap_a_and_b PARAMS ((sbitmap, sbitmap, sbitmap));\n-extern int sbitmap_a_or_b PARAMS ((sbitmap, sbitmap, sbitmap));\n-extern int sbitmap_a_subset_b_p PARAMS ((sbitmap, sbitmap));\n+struct int_list;\n \n-extern int sbitmap_first_set_bit PARAMS ((sbitmap));\n-extern int sbitmap_last_set_bit PARAMS ((sbitmap));\n+extern void dump_sbitmap\t\tPARAMS ((FILE *, sbitmap));\n+extern void dump_sbitmap_vector \tPARAMS ((FILE *, const char *,\n+\t\t\t\t\t\t const char *, sbitmap *,\n+\t\t\t\t\t\t int));\n+extern sbitmap sbitmap_alloc\t\tPARAMS ((unsigned int));\n+extern sbitmap *sbitmap_vector_alloc\tPARAMS ((unsigned int, unsigned int));\n+extern void sbitmap_copy \t\tPARAMS ((sbitmap, sbitmap));\n+extern void sbitmap_zero\t\tPARAMS ((sbitmap));\n+extern void sbitmap_ones\t\tPARAMS ((sbitmap));\n+extern void sbitmap_vector_zero\t\tPARAMS ((sbitmap *, unsigned int));\n+extern void sbitmap_vector_ones\t\tPARAMS ((sbitmap *, unsigned int));\n+\n+extern int sbitmap_union_of_diff\tPARAMS ((sbitmap, sbitmap, sbitmap,\n+\t\t\t\t\t\t sbitmap));\n+extern void sbitmap_difference\t\tPARAMS ((sbitmap, sbitmap, sbitmap));\n+extern void sbitmap_not\t\t\tPARAMS ((sbitmap, sbitmap));\n+extern int sbitmap_a_or_b_and_c\t\tPARAMS ((sbitmap, sbitmap, sbitmap,\n+\t\t\t\t\t\t sbitmap));\n+extern int sbitmap_a_and_b_or_c\t\tPARAMS ((sbitmap, sbitmap, sbitmap,\n+\t\t\t\t\t\t sbitmap));\n+extern int sbitmap_a_and_b\t\tPARAMS ((sbitmap, sbitmap, sbitmap));\n+extern int sbitmap_a_or_b\t\tPARAMS ((sbitmap, sbitmap, sbitmap));\n+extern int sbitmap_a_subset_b_p\t\tPARAMS ((sbitmap, sbitmap));\n+\n+extern int sbitmap_first_set_bit\tPARAMS ((sbitmap));\n+extern int sbitmap_last_set_bit\t\tPARAMS ((sbitmap));\n \n-struct int_list;\n extern void sbitmap_intersect_of_predsucc PARAMS ((sbitmap, sbitmap *,\n \t\t\t\t\t\t  int, struct int_list **));\n #define sbitmap_intersect_of_predecessors  sbitmap_intersect_of_predsucc\n #define sbitmap_intersect_of_successors    sbitmap_intersect_of_predsucc\n \n-extern void sbitmap_union_of_predsucc PARAMS ((sbitmap, sbitmap *, int,\n-\t\t\t\t\t      struct int_list **));\n+extern void sbitmap_union_of_predsucc\tPARAMS ((sbitmap, sbitmap *, int,\n+\t\t\t\t\t\t struct int_list **));\n #define sbitmap_union_of_predecessors  sbitmap_union_of_predsucc\n #define sbitmap_union_of_successors    sbitmap_union_of_predsucc\n \n /* Intersection and Union of preds/succs using the new flow graph \n    structure instead of the pred/succ arrays.  */\n \n-extern void sbitmap_intersection_of_succs    PARAMS ((sbitmap, sbitmap *, int));\n-extern void sbitmap_intersection_of_preds    PARAMS ((sbitmap, sbitmap *, int));\n-extern void sbitmap_union_of_succs\t     PARAMS ((sbitmap, sbitmap *, int));\n-extern void sbitmap_union_of_preds\t     PARAMS ((sbitmap, sbitmap *, int));\n+extern void sbitmap_intersection_of_succs  PARAMS ((sbitmap, sbitmap *, int));\n+extern void sbitmap_intersection_of_preds  PARAMS ((sbitmap, sbitmap *, int));\n+extern void sbitmap_union_of_succs\t   PARAMS ((sbitmap, sbitmap *, int));\n+extern void sbitmap_union_of_preds\t   PARAMS ((sbitmap, sbitmap *, int));\n \n #endif /* _SBITMAP_H */"}]}