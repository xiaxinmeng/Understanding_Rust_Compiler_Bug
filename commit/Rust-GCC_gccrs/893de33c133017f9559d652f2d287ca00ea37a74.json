{"sha": "893de33c133017f9559d652f2d287ca00ea37a74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkzZGUzM2MxMzMwMTdmOTU1OWQ2NTJmMmQyODdjYTAwZWEzN2E3NA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1997-09-29T16:08:34Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-09-29T16:08:34Z"}, "message": "cp-tree.h, [...]: Lose DECL_C_STATIC and DECL_PUBLIC.\n\n\t* cp-tree.h, decl.c, decl2.c, pt.c:\n \tLose DECL_C_STATIC and DECL_PUBLIC.  Don't pretend statics are public.\n\n\t* decl2.c (lang_decode_option): Add missing ;.\n\nFrom-SVN: r15789", "tree": {"sha": "665b6daaba096fcbf796f5416a03f0217b42d787", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/665b6daaba096fcbf796f5416a03f0217b42d787"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/893de33c133017f9559d652f2d287ca00ea37a74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/893de33c133017f9559d652f2d287ca00ea37a74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/893de33c133017f9559d652f2d287ca00ea37a74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/893de33c133017f9559d652f2d287ca00ea37a74/comments", "author": null, "committer": null, "parents": [{"sha": "9b16d2c4efea1287a1651881732e06d7478f6d54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b16d2c4efea1287a1651881732e06d7478f6d54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b16d2c4efea1287a1651881732e06d7478f6d54"}], "stats": {"total": 68, "additions": 22, "deletions": 46}, "files": [{"sha": "e7da2dd201f0eabc4738f8775dcc25b0a561b9fc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893de33c133017f9559d652f2d287ca00ea37a74/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893de33c133017f9559d652f2d287ca00ea37a74/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=893de33c133017f9559d652f2d287ca00ea37a74", "patch": "@@ -1,3 +1,10 @@\n+Mon Sep 29 08:57:53 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* cp-tree.h, decl.c, decl2.c, pt.c:\n+ \tLose DECL_C_STATIC and DECL_PUBLIC.  Don't pretend statics are public.\n+\n+\t* decl2.c (lang_decode_option): Add missing ;.\n+\n Sat Sep 27 16:22:48 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* friend.c (do_friend): Disable injection for all template-derived"}, {"sha": "8d1ccfc4fa617d11796ee2781572483ce6dcb86b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893de33c133017f9559d652f2d287ca00ea37a74/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893de33c133017f9559d652f2d287ca00ea37a74/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=893de33c133017f9559d652f2d287ca00ea37a74", "patch": "@@ -936,11 +936,10 @@ struct lang_decl_flags\n   unsigned saved_inline : 1;\n   unsigned use_template : 2;\n \n-  unsigned c_static : 1;\n   unsigned nonconverting : 1;\n   unsigned declared_inline : 1;\n   unsigned not_really_extern : 1;\n-  unsigned dummy : 4;\n+  unsigned dummy : 5;\n \n   tree access;\n   tree context;\n@@ -1402,11 +1401,6 @@ extern int flag_new_for_scope;\n /* We know what we're doing with this decl now.  */\n #define DECL_INTERFACE_KNOWN(NODE) DECL_LANG_FLAG_5 (NODE)\n \n-/* This decl was declared or deduced to have internal linkage.  This is\n-   only meaningful if TREE_PUBLIC is set.  */\n-#define DECL_C_STATIC(NODE) \\\n-  (DECL_LANG_SPECIFIC (NODE)->decl_flags.c_static)\n-\n /* This function was declared inline.  This flag controls the linkage\n    semantics of 'inline'; whether or not the function is inlined is\n    controlled by DECL_INLINE.  */\n@@ -1422,10 +1416,6 @@ extern int flag_new_for_scope;\n #define DECL_REALLY_EXTERN(NODE) \\\n   (DECL_EXTERNAL (NODE) && ! DECL_NOT_REALLY_EXTERN (NODE))\n \n-#define DECL_PUBLIC(NODE) \\\n-  (TREE_CODE (NODE) == FUNCTION_DECL \\\n-   ? ! DECL_C_STATIC (NODE) : TREE_PUBLIC (NODE))\n-\n #define THUNK_DELTA(DECL) ((DECL)->decl.frame_size.i)\n \n /* ...and for unexpanded-parameterized-type nodes.  */"}, {"sha": "40398185eba32bb4f92cc2826e1eb9dc52b276fc", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 12, "deletions": 23, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893de33c133017f9559d652f2d287ca00ea37a74/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893de33c133017f9559d652f2d287ca00ea37a74/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=893de33c133017f9559d652f2d287ca00ea37a74", "patch": "@@ -2460,7 +2460,7 @@ duplicate_decls (newdecl, olddecl)\n       /* If you declare a built-in or predefined function name as static,\n \t the old definition is overridden, but optionally warn this was a\n \t bad choice of name.  Ditto for overloads.  */\n-      if (! DECL_PUBLIC (newdecl)\n+      if (! TREE_PUBLIC (newdecl)\n \t  || (TREE_CODE (newdecl) == FUNCTION_DECL\n \t      && DECL_LANGUAGE (newdecl) != DECL_LANGUAGE (olddecl)))\n \t{\n@@ -2848,9 +2848,6 @@ duplicate_decls (newdecl, olddecl)\n   if (! DECL_EXTERNAL (olddecl))\n     DECL_EXTERNAL (newdecl) = 0;\n \n-  if (TREE_CODE (newdecl) == FUNCTION_DECL)\n-    DECL_C_STATIC (newdecl) |= DECL_C_STATIC (olddecl);\n-\n   if (DECL_LANG_SPECIFIC (newdecl))\n     {\n       DECL_INTERFACE_KNOWN (newdecl) |= DECL_INTERFACE_KNOWN (olddecl);\n@@ -3214,7 +3211,7 @@ pushdecl (x)\n \n \t  /* If the first global decl has external linkage,\n \t     warn if we later see static one.  */\n-\t  if (IDENTIFIER_GLOBAL_VALUE (name) == NULL_TREE && DECL_PUBLIC (x))\n+\t  if (IDENTIFIER_GLOBAL_VALUE (name) == NULL_TREE && TREE_PUBLIC (x))\n \t    TREE_PUBLIC (name) = 1;\n \n \t  /* Don't install an artificial TYPE_DECL if we already have\n@@ -6640,7 +6637,7 @@ cp_finish_decl (decl, init, asmspec_tree, need_pop, flags)\n \t  && current_function_decl\n \t  && DECL_CONTEXT (decl) == current_function_decl\n \t  && DECL_THIS_INLINE (current_function_decl)\n-\t  && DECL_PUBLIC (current_function_decl))\n+\t  && TREE_PUBLIC (current_function_decl))\n \t{\n \t  if (DECL_INTERFACE_KNOWN (current_function_decl))\n \t    {\n@@ -7218,7 +7215,7 @@ grokfndecl (ctype, type, declarator, orig_declarator, virtualp, flags, quals,\n   decl = build_lang_decl (FUNCTION_DECL, declarator, type);\n   /* propagate volatile out from type to decl */\n   if (TYPE_VOLATILE (type))\n-      TREE_THIS_VOLATILE (decl) = 1;\n+    TREE_THIS_VOLATILE (decl) = 1;\n \n   /* Should probably propagate const out from type to decl I bet (mrs).  */\n   if (staticp)\n@@ -7230,10 +7227,6 @@ grokfndecl (ctype, type, declarator, orig_declarator, virtualp, flags, quals,\n   if (ctype)\n     DECL_CLASS_CONTEXT (decl) = ctype;\n \n-  /* All function decls start out public; we'll fix their linkage later (at\n-     definition or EOF) if appropriate.  */\n-  TREE_PUBLIC (decl) = 1;\n-\n   if (ctype == NULL_TREE && ! strcmp (IDENTIFIER_POINTER (declarator), \"main\"))\n     {\n       if (inlinep)\n@@ -7244,8 +7237,12 @@ grokfndecl (ctype, type, declarator, orig_declarator, virtualp, flags, quals,\n       publicp = 1;\n     }\n \t  \n+  TREE_PUBLIC (decl) = publicp;\n   if (! publicp)\n-    DECL_C_STATIC (decl) = 1;\n+    {\n+      DECL_INTERFACE_KNOWN (decl) = 1;\n+      DECL_NOT_REALLY_EXTERN (decl) = 1;\n+    }\n \n   if (inlinep)\n     DECL_THIS_INLINE (decl) = DECL_INLINE (decl) = 1;\n@@ -7262,7 +7259,7 @@ grokfndecl (ctype, type, declarator, orig_declarator, virtualp, flags, quals,\n     grok_op_properties (decl, virtualp, check < 0);\n \n   if (ctype && hack_decl_function_context (decl))\n-      DECL_NO_STATIC_CHAIN (decl) = 1;\n+    DECL_NO_STATIC_CHAIN (decl) = 1;\n \n   for (t = TYPE_ARG_TYPES (TREE_TYPE (decl)); t; t = TREE_CHAIN (t))\n     if (TREE_PURPOSE (t)\n@@ -11425,11 +11422,7 @@ start_function (declspecs, declarator, attrs, pre_parsed_p)\n \t  = (interface_only\n \t     || (DECL_THIS_INLINE (decl1) && ! flag_implement_inlines));\n       else\n-\t{\n-\t  DECL_EXTERNAL (decl1) = 0;\n-\t  if (DECL_C_STATIC (decl1))\n-\t    TREE_PUBLIC (decl1) = 0;\n-\t}\t  \n+\tDECL_EXTERNAL (decl1) = 0;\n       DECL_NOT_REALLY_EXTERN (decl1) = 0;\n       DECL_INTERFACE_KNOWN (decl1) = 1;\n     }\n@@ -11445,11 +11438,7 @@ start_function (declspecs, declarator, attrs, pre_parsed_p)\n \t  && ! hack_decl_function_context (decl1))\n \tDECL_DEFER_OUTPUT (decl1) = 1;\n       else\n-\t{\n-\t  DECL_INTERFACE_KNOWN (decl1) = 1;\n-\t  if (DECL_C_STATIC (decl1))\n-\t    TREE_PUBLIC (decl1) = 0;\n-\t}\n+\tDECL_INTERFACE_KNOWN (decl1) = 1;\n     }\n \n   if (ctype != NULL_TREE && DECL_STATIC_FUNCTION_P (decl1))"}, {"sha": "9125783b26305d5e2a32e7e93f07fc97a2a7b22e", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893de33c133017f9559d652f2d287ca00ea37a74/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893de33c133017f9559d652f2d287ca00ea37a74/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=893de33c133017f9559d652f2d287ca00ea37a74", "patch": "@@ -575,7 +575,7 @@ lang_decode_option (p)\n \t\t}\n \t    }\n \t  name_mangling_version = atoi (p + 22);\n-\tmangling_version_lose:\n+\tmangling_version_lose: ;\n \t}\n       else for (j = 0;\n \t\t!found && j < sizeof (lang_f_options) / sizeof (lang_f_options[0]);\n@@ -2806,8 +2806,6 @@ import_export_decl (decl)\n       else\n \tcomdat_linkage (decl);\n     } \n-  else if (DECL_C_STATIC (decl))\n-    TREE_PUBLIC (decl) = 0;\n   else\n     comdat_linkage (decl);\n \n@@ -3284,14 +3282,6 @@ finish_file ()\n   walk_vtables ((void (*) PROTO((tree, tree))) 0,\n \t\tprune_vtable_vardecl);\n \n-  for (vars = getdecls (); vars; vars = TREE_CHAIN (vars))\n-    {\n-      if (TREE_CODE (vars) == FUNCTION_DECL\n-\t  && ! DECL_INTERFACE_KNOWN (vars)\n-\t  && DECL_C_STATIC (vars))\n-\tTREE_PUBLIC (vars) = 0;\n-    }\n-\n   if (write_virtuals == 2)\n     {\n       /* Now complain about an virtual function tables promised"}, {"sha": "3f6a5789f9281785a62f1ca1153246419cd90420", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/893de33c133017f9559d652f2d287ca00ea37a74/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/893de33c133017f9559d652f2d287ca00ea37a74/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=893de33c133017f9559d652f2d287ca00ea37a74", "patch": "@@ -1115,7 +1115,7 @@ coerce_template_parms (parms, arglist, in_decl)\n \t\t  else if (TREE_CODE (a) != VAR_DECL\n \t\t\t   && TREE_CODE (a) != FUNCTION_DECL)\n \t\t    goto bad;\n-\t\t  else if (! DECL_PUBLIC (a))\n+\t\t  else if (! TREE_PUBLIC (a))\n \t\t    {\n \t\t      cp_error (\"address of non-extern `%E' cannot be used as template argument\", a);\n \t\t      val = error_mark_node;"}]}