{"sha": "3f1bc2cf467b4b05d02a51c74947f39099749cde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YxYmMyY2Y0NjdiNGIwNWQwMmE1MWM3NDk0N2YzOTA5OTc0OWNkZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-16T14:33:11Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-16T14:33:11Z"}, "message": "[multiple changes]\n\n2014-07-16  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch3.adb, sem_prag.adb, sem_util.adb, sem_res.adb, sem_ch13.adb:\n\tMinor code reorganization (use Is_Access_Type, not in Access_Kind).\n\t* exp_ch3.adb: Minor code reorganization, use Is_Access_Type,\n\tnot in Access_Kind.\n\t* par-ch4.adb (At_Start_Of_Attribute): New function\n\t(P_Simple_Expression): Better msg for bad attribute prefix.\n\t* scans.ads: Minor reformatting.\n\n2014-07-16  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_attr.adb (Resolve_Attribute, case 'Update): If choice is a\n\tstatic constant, check that in belongs to the corresponding index\n\tsubtype, to produce the proer warning when expansion is disabled.\n\n2014-07-16  Robert Dewar  <dewar@adacore.com>\n\n\t* freeze.adb (Freeze_Entity): Warn on incompatible size/alignment.\n\t* gnat_ugn.texi: Document -gnatw.z and -gnatw.Z.\n\t* ug_words: VMS synonyms (WARNINGS=[NO]SIZE_ALIGN) for -gnatw.z/-gnatw.Z\n\t* usage.adb: Add lines for -gnatw.z/-gnatw.Z.\n\t* vms_data.ads: VMS synonyms (WARNINGS=[NO]SIZE_ALIGN) for\n\t-gnatw.z/-gnatw.Z\n\t* warnsw.adb: Set Warn_On_Size_Alignment appropriately.\n\t* warnsw.ads (Warn_On_Size_Alignment): New flag Minor\n\treformatting.\n\nFrom-SVN: r212656", "tree": {"sha": "56f2a46c5385f462155fe01b0bdcb4519cc7ea8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56f2a46c5385f462155fe01b0bdcb4519cc7ea8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f1bc2cf467b4b05d02a51c74947f39099749cde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f1bc2cf467b4b05d02a51c74947f39099749cde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f1bc2cf467b4b05d02a51c74947f39099749cde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f1bc2cf467b4b05d02a51c74947f39099749cde/comments", "author": null, "committer": null, "parents": [{"sha": "b07b7acecfd5b064a30b15b4767401ff56a60da7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b07b7acecfd5b064a30b15b4767401ff56a60da7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b07b7acecfd5b064a30b15b4767401ff56a60da7"}], "stats": {"total": 278, "additions": 253, "deletions": 25}, "files": [{"sha": "82a6662ace1aeeb315bf25df1f20663c26678d55", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1bc2cf467b4b05d02a51c74947f39099749cde/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1bc2cf467b4b05d02a51c74947f39099749cde/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3f1bc2cf467b4b05d02a51c74947f39099749cde", "patch": "@@ -1,3 +1,31 @@\n+2014-07-16  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch3.adb, sem_prag.adb, sem_util.adb, sem_res.adb, sem_ch13.adb:\n+\tMinor code reorganization (use Is_Access_Type, not in Access_Kind).\n+\t* exp_ch3.adb: Minor code reorganization, use Is_Access_Type,\n+\tnot in Access_Kind.\n+\t* par-ch4.adb (At_Start_Of_Attribute): New function\n+\t(P_Simple_Expression): Better msg for bad attribute prefix.\n+\t* scans.ads: Minor reformatting.\n+\n+2014-07-16  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_attr.adb (Resolve_Attribute, case 'Update): If choice is a\n+\tstatic constant, check that in belongs to the corresponding index\n+\tsubtype, to produce the proer warning when expansion is disabled.\n+\n+2014-07-16  Robert Dewar  <dewar@adacore.com>\n+\n+\t* freeze.adb (Freeze_Entity): Warn on incompatible size/alignment.\n+\t* gnat_ugn.texi: Document -gnatw.z and -gnatw.Z.\n+\t* ug_words: VMS synonyms (WARNINGS=[NO]SIZE_ALIGN) for -gnatw.z/-gnatw.Z\n+\t* usage.adb: Add lines for -gnatw.z/-gnatw.Z.\n+\t* vms_data.ads: VMS synonyms (WARNINGS=[NO]SIZE_ALIGN) for\n+\t-gnatw.z/-gnatw.Z\n+\t* warnsw.adb: Set Warn_On_Size_Alignment appropriately.\n+\t* warnsw.ads (Warn_On_Size_Alignment): New flag Minor\n+\treformatting.\n+\n 2014-07-16  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_ch7.adb (Process_Declarations): Reinstate the check on"}, {"sha": "ad35335e94066a2b43073538ffb224e49a39d958", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1bc2cf467b4b05d02a51c74947f39099749cde/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1bc2cf467b4b05d02a51c74947f39099749cde/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=3f1bc2cf467b4b05d02a51c74947f39099749cde", "patch": "@@ -3230,7 +3230,7 @@ package body Exp_Ch3 is\n          begin\n             T := Entity (Subtype_Mark (SI));\n \n-            if Ekind (T) in Access_Kind then\n+            if Is_Access_Type (T) then\n                T := Designated_Type (T);\n             end if;\n "}, {"sha": "fdb87f51d6d93851d500fc4675c782d850c6286f", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1bc2cf467b4b05d02a51c74947f39099749cde/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1bc2cf467b4b05d02a51c74947f39099749cde/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=3f1bc2cf467b4b05d02a51c74947f39099749cde", "patch": "@@ -64,6 +64,7 @@ with Tbuild;   use Tbuild;\n with Ttypes;   use Ttypes;\n with Uintp;    use Uintp;\n with Urealp;   use Urealp;\n+with Warnsw;   use Warnsw;\n \n package body Freeze is\n \n@@ -4554,6 +4555,55 @@ package body Freeze is\n             Inherit_Aspects_At_Freeze_Point (E);\n          end if;\n \n+         --  Check for incompatible size and alignment for record type\n+\n+         if Warn_On_Size_Alignment\n+           and then Is_Record_Type (E)\n+           and then Has_Size_Clause (E) and then Has_Alignment_Clause (E)\n+\n+           --  If explicit Object_Size clause given assume that the programmer\n+           --  knows what he is doing, and expects the compiler behavior.\n+\n+           and then not Has_Object_Size_Clause (E)\n+\n+           --  Check for size not a multiple of alignment\n+\n+           and then RM_Size (E) mod (Alignment (E) * System_Storage_Unit) /= 0\n+         then\n+            declare\n+               SC    : constant Node_Id := Size_Clause (E);\n+               AC    : constant Node_Id := Alignment_Clause (E);\n+               Loc   : Node_Id;\n+               Abits : constant Uint := Alignment (E) * System_Storage_Unit;\n+\n+            begin\n+               if Present (SC) and then Present (AC) then\n+\n+                  --  Give a warning\n+\n+                  if Sloc (SC) > Sloc (AC) then\n+                     Loc := SC;\n+                     Error_Msg_NE\n+                       (\"??size is not a multiple of alignment for &\", Loc, E);\n+                     Error_Msg_Sloc := Sloc (AC);\n+                     Error_Msg_Uint_1 := Alignment (E);\n+                     Error_Msg_N (\"\\??alignment of ^ specified #\", Loc);\n+\n+                  else\n+                     Loc := AC;\n+                     Error_Msg_NE\n+                       (\"??size is not a multiple of alignment for &\", Loc, E);\n+                     Error_Msg_Sloc := Sloc (SC);\n+                     Error_Msg_Uint_1 := RM_Size (E);\n+                     Error_Msg_N (\"\\??size of ^ specified #\", Loc);\n+                  end if;\n+\n+                  Error_Msg_Uint_1 := ((RM_Size (E) / Abits) + 1) * Abits;\n+                  Error_Msg_N (\"\\??Object_Size will be increased to ^\", Loc);\n+               end if;\n+            end;\n+         end if;\n+\n          --  Array type\n \n          if Is_Array_Type (E) then"}, {"sha": "137175d9d33791e79eab889a4b3bc656705fe87b", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1bc2cf467b4b05d02a51c74947f39099749cde/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1bc2cf467b4b05d02a51c74947f39099749cde/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=3f1bc2cf467b4b05d02a51c74947f39099749cde", "patch": "@@ -4797,6 +4797,9 @@ Out-of-range values being assigned\n @item\n Possible order of elaboration problems\n \n+@item\n+Size not a multiple of alignment for a record type\n+\n @item\n Assertions (pragma Assert) that are sure to fail\n \n@@ -5869,6 +5872,28 @@ This switch suppresses warnings for unchecked conversions\n where the types are known at compile time to have different\n sizes or conventions.\n \n+@item -gnatw.z\n+@emph{Activate warnings for size not a multiple of alignment.}\n+@cindex @option{-gnatw.z} (@command{gcc})\n+@cindex Size/Alignment warnings\n+This switch activates warnings for cases of record types with\n+specified @code{Size} and @code{Alignment} attributes where the\n+size is not a multiple of the alignment, resulting in an object\n+size that is greater than the specified size. The default\n+is that such warnings are generated.\n+This warning can also be turned on using @option{-gnatwa}.\n+\n+@item -gnatw.Z\n+@emph{Suppress warnings for size not a multiple of alignment.}\n+@cindex @option{-gnatw.Z} (@command{gcc})\n+@cindex Size/Alignment warnings\n+This switch suppresses warnings for cases of record types with\n+specified @code{Size} and @code{Alignment} attributes where the\n+size is not a multiple of the alignment, resulting in an object\n+size that is greater than the specified size.\n+The warning can also be\n+suppressed by giving an explicit @code{Object_Size} value.\n+\n @item ^-Wunused^WARNINGS=UNUSED^\n @cindex @option{-Wunused}\n The warnings controlled by the @option{-gnatw} switch are generated by"}, {"sha": "9d8feca0a2ea977d2092078079606b8673920dd8", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1bc2cf467b4b05d02a51c74947f39099749cde/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1bc2cf467b4b05d02a51c74947f39099749cde/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=3f1bc2cf467b4b05d02a51c74947f39099749cde", "patch": "@@ -1969,6 +1969,42 @@ package body Ch4 is\n       Node2      : Node_Id;\n       Tokptr     : Source_Ptr;\n \n+      function At_Start_Of_Attribute return Boolean;\n+      --  Tests if we have quote followed by attribute name, if so, return True\n+      --  otherwise return False.\n+\n+      ---------------------------\n+      -- At_Start_Of_Attribute --\n+      ---------------------------\n+\n+      function At_Start_Of_Attribute return Boolean is\n+      begin\n+         if Token /= Tok_Apostrophe then\n+            return False;\n+\n+         else\n+            declare\n+               Scan_State : Saved_Scan_State;\n+\n+            begin\n+               Save_Scan_State (Scan_State);\n+               Scan; -- past quote\n+\n+               if Token = Tok_Identifier\n+                 and then Is_Attribute_Name (Chars (Token_Node))\n+               then\n+                  Restore_Scan_State (Scan_State);\n+                  return True;\n+               else\n+                  Restore_Scan_State (Scan_State);\n+                  return False;\n+               end if;\n+            end;\n+         end if;\n+      end At_Start_Of_Attribute;\n+\n+   --  Start of processing for P_Simple_Expression\n+\n    begin\n       --  Check for cases starting with a name. There are two reasons for\n       --  special casing. First speed things up by catching a common case\n@@ -2255,6 +2291,18 @@ package body Ch4 is\n \n          if Prev_Token = Tok_Right_Paren and then Token = Tok_Left_Paren then\n             T_Comma;\n+\n+         --  And if we have a quote, we may have a bad attribute\n+\n+         elsif At_Start_Of_Attribute then\n+            Error_Msg_SC (\"prefix of attribute must be a name\");\n+\n+            if Ada_Version >= Ada_2012 then\n+               Error_Msg_SC (\"\\qualify expression to turn it into a name\");\n+            end if;\n+\n+         --  Normal case for binary operator expected message\n+\n          else\n             Error_Msg_AP (\"binary operator expected\");\n          end if;"}, {"sha": "ae7f91d9e423628a4873301bcc3d70874d34e003", "filename": "gcc/ada/scans.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1bc2cf467b4b05d02a51c74947f39099749cde/gcc%2Fada%2Fscans.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1bc2cf467b4b05d02a51c74947f39099749cde/gcc%2Fada%2Fscans.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscans.ads?ref=3f1bc2cf467b4b05d02a51c74947f39099749cde", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -404,7 +404,7 @@ package Scans is\n    Token_Node : Node_Id := Empty;\n    --  Node table Id for the current token. This is set only if the current\n    --  token is one for which the scanner constructs a node (i.e. it is an\n-   --  identifier, operator symbol, or literal. For other token types,\n+   --  identifier, operator symbol, or literal). For other token types,\n    --  Token_Node is undefined.\n \n    Token_Name : Name_Id := No_Name;"}, {"sha": "2f685b61df4b284f0340e2d9b7a85362512f3f4f", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1bc2cf467b4b05d02a51c74947f39099749cde/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1bc2cf467b4b05d02a51c74947f39099749cde/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=3f1bc2cf467b4b05d02a51c74947f39099749cde", "patch": "@@ -10200,8 +10200,8 @@ package body Sem_Attr is\n                if Is_Tagged_Type (Designated_Type (Typ)) then\n \n                   --  If the attribute is in the context of an access\n-                  --  parameter, then the prefix is allowed to be of the\n-                  --  class-wide type (by AI-127).\n+                  --  parameter, then the prefix is allowed to be of\n+                  --  the class-wide type (by AI-127).\n \n                   if Ekind (Typ) = E_Anonymous_Access_Type then\n                      if not Covers (Designated_Type (Typ), Nom_Subt)\n@@ -10810,6 +10810,44 @@ package body Sem_Attr is\n                   Assoc := First (Component_Associations (Aggr));\n                   while Present (Assoc) loop\n                      Resolve (Expression (Assoc), Component_Type (Typ));\n+\n+                     --  The choices in the association are static constants,\n+                     --  or static aggregates each of whose components belongs\n+                     --  to the proper index type. However, they must also\n+                     --  belong to the index subtype (s) of the prefix, which\n+                     --  may be a subtype (e.g. given by a slice).\n+\n+                     --  Choices may also be identifiers with no staticness\n+                     --  requirements, in which case rules are unclear???\n+\n+                     declare\n+                        C    : Node_Id;\n+                        C_E  : Node_Id;\n+                        Indx : Node_Id;\n+\n+                     begin\n+                        C := First (Choices (Assoc));\n+                        while Present (C) loop\n+                           Indx := First_Index (Etype (Prefix (N)));\n+\n+                           if Nkind (C) /= N_Aggregate then\n+                              Set_Etype (C, Etype (Indx));\n+                              Check_Non_Static_Context (C);\n+\n+                           else\n+                              C_E := First (Expressions (C));\n+                              while Present (C_E) loop\n+                                 Set_Etype (C_E, Etype (Indx));\n+                                 Check_Non_Static_Context (C_E);\n+                                 Next (C_E);\n+                                 Next_Index (Indx);\n+                              end loop;\n+                           end if;\n+\n+                           Next (C);\n+                        end loop;\n+                     end;\n+\n                      Next (Assoc);\n                   end loop;\n \n@@ -10820,11 +10858,13 @@ package body Sem_Attr is\n                   Assoc := First (Component_Associations (Aggr));\n                   while Present (Assoc) loop\n                      Comp := First (Choices (Assoc));\n+\n                      if Nkind (Comp) /= N_Others_Choice\n                        and then not Error_Posted (Comp)\n                      then\n                         Resolve (Expression (Assoc), Etype (Entity (Comp)));\n                      end if;\n+\n                      Next (Assoc);\n                   end loop;\n                end if;"}, {"sha": "111e9a6078d7356c17e67a08313fb01052f63cb1", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1bc2cf467b4b05d02a51c74947f39099749cde/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1bc2cf467b4b05d02a51c74947f39099749cde/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=3f1bc2cf467b4b05d02a51c74947f39099749cde", "patch": "@@ -12024,8 +12024,8 @@ package body Sem_Ch13 is\n             --  If the alignment of both is specified, we can do it here.\n \n             if Serious_Errors_Detected = 0\n-              and then Ekind (Source) in Access_Kind\n-              and then Ekind (Target) in Access_Kind\n+              and then Is_Access_Type (Source)\n+              and then Is_Access_Type (Target)\n               and then Target_Strict_Alignment\n               and then Present (Designated_Type (Source))\n               and then Present (Designated_Type (Target))"}, {"sha": "3b68b7b228e7d79092540f240d909acd16137ba9", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1bc2cf467b4b05d02a51c74947f39099749cde/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1bc2cf467b4b05d02a51c74947f39099749cde/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=3f1bc2cf467b4b05d02a51c74947f39099749cde", "patch": "@@ -11400,7 +11400,7 @@ package body Sem_Ch3 is\n    begin\n       T := Entity (Subtype_Mark (SI));\n \n-      if Ekind (T) in Access_Kind then\n+      if Is_Access_Type (T) then\n          T := Designated_Type (T);\n       end if;\n \n@@ -11950,7 +11950,7 @@ package body Sem_Ch3 is\n       T_Val : Entity_Id;\n \n    begin\n-      if Ekind (T_Ent) in Access_Kind then\n+      if Is_Access_Type (T_Ent) then\n          T_Ent := Designated_Type (T_Ent);\n       end if;\n \n@@ -12154,7 +12154,7 @@ package body Sem_Ch3 is\n \n       T := Base_Type (Entity (Subtype_Mark (S)));\n \n-      if Ekind (T) in Access_Kind then\n+      if Is_Access_Type (T) then\n          T := Designated_Type (T);\n       end if;\n "}, {"sha": "d200f378647f8729799710824d1c3e5918b36689", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1bc2cf467b4b05d02a51c74947f39099749cde/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1bc2cf467b4b05d02a51c74947f39099749cde/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=3f1bc2cf467b4b05d02a51c74947f39099749cde", "patch": "@@ -16041,7 +16041,7 @@ package body Sem_Prag is\n                      end if;\n                   end if;\n \n-               elsif Ekind (Etype (Def_Id)) in Access_Kind then\n+               elsif Is_Access_Type (Etype (Def_Id)) then\n                   if not Ekind_In (Etype (Def_Id), E_Access_Type,\n                                                    E_General_Access_Type)\n                     or else"}, {"sha": "6d69ab4a52359b450e408d8b6a96270247a7f4e0", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1bc2cf467b4b05d02a51c74947f39099749cde/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1bc2cf467b4b05d02a51c74947f39099749cde/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=3f1bc2cf467b4b05d02a51c74947f39099749cde", "patch": "@@ -2453,8 +2453,8 @@ package body Sem_Res is\n             --  the allocator.\n \n             elsif Nkind (N) = N_Allocator\n-              and then Ekind (Typ) in Access_Kind\n-              and then Ekind (Etype (N)) in Access_Kind\n+              and then Is_Access_Type (Typ)\n+              and then Is_Access_Type (Etype (N))\n               and then Designated_Type (Etype (N)) = Typ\n             then\n                Wrong_Type (Expression (N), Designated_Type (Typ));\n@@ -11800,11 +11800,11 @@ package body Sem_Res is\n \n       elsif Is_Access_Subprogram_Type (Target_Type)\n \n-        --  Note: this test of Ekind (Opnd_Type) is there to prevent entering\n-        --  this branch in the case of a remote access to subprogram type,\n-        --  which is internally represented as an E_Record_Type.\n+        --  Note: this test of Opnd_Type is there to prevent entering this\n+        --  branch in the case of a remote access to subprogram type, which\n+        --  is internally represented as an E_Record_Type.\n \n-        and then Ekind (Opnd_Type) in Access_Kind\n+        and then Is_Access_Type (Opnd_Type)\n       then\n          if Ekind (Base_Type (Opnd_Type)) = E_Anonymous_Access_Subprogram_Type\n            and then Is_Entity_Name (Operand)"}, {"sha": "f0d4b5b14c4da169ddb0bd51ec81adcc07dc2d11", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1bc2cf467b4b05d02a51c74947f39099749cde/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1bc2cf467b4b05d02a51c74947f39099749cde/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=3f1bc2cf467b4b05d02a51c74947f39099749cde", "patch": "@@ -9726,7 +9726,7 @@ package body Sem_Util is\n          return True;\n       end if;\n \n-      if Ekind (T) not in Access_Kind then\n+      if not Is_Access_Type (T) then\n \n          --  A delegate is a managed pointer. If no designated type is defined\n          --  it means that it's not a delegate.\n@@ -16437,7 +16437,7 @@ package body Sem_Util is\n       --  the cases of access parameters, return objects of an anonymous access\n       --  type, and, in Ada 95, access discriminants of limited types.\n \n-      if Ekind (Btyp) in Access_Kind then\n+      if Is_Access_Type (Btyp) then\n          if Ekind (Btyp) = E_Anonymous_Access_Type then\n \n             --  If the type is a nonlocal anonymous access type (such as for"}, {"sha": "053a5438b7dcd1a330c78a6a6da5839c8629ae59", "filename": "gcc/ada/ug_words", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1bc2cf467b4b05d02a51c74947f39099749cde/gcc%2Fada%2Fug_words", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1bc2cf467b4b05d02a51c74947f39099749cde/gcc%2Fada%2Fug_words", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fug_words?ref=3f1bc2cf467b4b05d02a51c74947f39099749cde", "patch": "@@ -226,6 +226,8 @@ gcc -c          ^ GNAT COMPILE\n -gnatw.Y        ^ /WARNINGS=NOWHY_SPEC_NEEDS_BODY\n -gnatwz         ^ /WARNINGS=UNCHECKED_CONVERSIONS\n -gnatwZ         ^ /WARNINGS=NOUNCHECKED_CONVERSIONS\n+-gnatw.z        ^ /WARNINGS=SIZE_ALIGN\n+-gnatw.Z        ^ /WARNINGS=NOSIZE_ALIGN\n -gnatW8         ^ /WIDE_CHARACTER_ENCODING=UTF8\n -gnatW?         ^ /WIDE_CHARACTER_ENCODING=?\n -gnaty          ^ /STYLE_CHECKS"}, {"sha": "806675fc8c36ec536133e3fa9035c6e739468095", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1bc2cf467b4b05d02a51c74947f39099749cde/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1bc2cf467b4b05d02a51c74947f39099749cde/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=3f1bc2cf467b4b05d02a51c74947f39099749cde", "patch": "@@ -503,7 +503,7 @@ begin\n    Write_Line (\"        F*   turn off warnings for unreferenced formal\");\n    Write_Line (\"        g*+  turn on warnings for unrecognized pragma\");\n    Write_Line (\"        G    turn off warnings for unrecognized pragma\");\n-   Write_Line (\"        .g   turn on GNAT warnings, same as Aao.sI.C.V.X\");\n+   Write_Line (\"        .g   turn on GNAT warnings\");\n    Write_Line (\"        h    turn on warnings for hiding declarations\");\n    Write_Line (\"        H*   turn off warnings for hiding declarations\");\n    Write_Line (\"        .h   turn on warnings for holes in records\");\n@@ -589,6 +589,10 @@ begin\n                                                   \"unchecked conversion\");\n    Write_Line (\"        Z    turn off warnings for suspicious \" &\n                                                   \"unchecked conversion\");\n+   Write_Line (\"        .z*+ turn on warnings for record size not a \" &\n+                                                  \"multiple of alignment\");\n+   Write_Line (\"        .Z   turn off warnings for record size not a \" &\n+                                                  \"multiple of alignment\");\n \n    --  Line for -gnatW switch\n "}, {"sha": "927bdfb1867e71144a9876bca0588f162c51174c", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1bc2cf467b4b05d02a51c74947f39099749cde/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1bc2cf467b4b05d02a51c74947f39099749cde/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=3f1bc2cf467b4b05d02a51c74947f39099749cde", "patch": "@@ -3270,7 +3270,12 @@ package VMS_Data is\n                                             \"UNCHECKED_CONVERSIONS \"       &\n                                                \"-gnatwz \"                  &\n                                             \"NOUNCHECKED_CONVERSIONS \"     &\n-                                               \"-gnatwZ\";\n+                                               \"-gnatwZ\"                   &\n+                                            \"SIZE_ALIGNMENT \"              &\n+                                               \"-gnatw.z\"                  &\n+                                            \"NOSIZE_ALIGNMENT \"            &\n+                                               \"-gnatw.Z\";\n+\n    --        /NOWARNINGS\n    --\n    --   Suppress the output of all warning messages from the GNAT front end.\n@@ -3300,6 +3305,7 @@ package VMS_Data is\n    --                               MISSING_PARENS\n    --                               OVERLAPPING_ACTUALS\n    --                               REVERSE_BIT_ORDER\n+   --                               SIZE_ALIGNMENT\n    --                               SUSPICIOUS_CONTRACT\n    --                               SUSPICIOUS_MODULUS\n    --                               UNCHECKED_CONVERSIONS\n@@ -3589,6 +3595,12 @@ package VMS_Data is\n    --                           effect of specifying reverse bit order for\n    --                           a record on individual components.\n    --\n+   --   SIZE_ALIGNMENT          Activates warnings for record types for which\n+   --   (-gnatw.z)              explicit size and alignment values are given,\n+   --                           where the size value is not a multiple of the\n+   --                           alignment value, resulting in an object size\n+   --                           larger than the specified size.\n+   --\n    --   STANDARD_REDEFINITION   Activate warnings on standard redefinition.\n    --   (-gnatw.k)              Generates a warning message if a declaration\n    --                           declares an identifier that matches one that"}, {"sha": "36ae4219415b01251169e91b25f67dcca7e1fd30", "filename": "gcc/ada/warnsw.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1bc2cf467b4b05d02a51c74947f39099749cde/gcc%2Fada%2Fwarnsw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1bc2cf467b4b05d02a51c74947f39099749cde/gcc%2Fada%2Fwarnsw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwarnsw.adb?ref=3f1bc2cf467b4b05d02a51c74947f39099749cde", "patch": "@@ -78,6 +78,7 @@ package body Warnsw is\n       Warn_On_Record_Holes                := Setting;\n       Warn_On_Redundant_Constructs        := Setting;\n       Warn_On_Reverse_Bit_Order           := Setting;\n+      Warn_On_Size_Alignment              := Setting;\n       Warn_On_Standard_Redefinition       := Setting;\n       Warn_On_Suspicious_Contract         := Setting;\n       Warn_On_Suspicious_Modulus_Value    := Setting;\n@@ -170,6 +171,8 @@ package body Warnsw is\n         W.Warn_On_Redundant_Constructs;\n       Warn_On_Reverse_Bit_Order           :=\n         W.Warn_On_Reverse_Bit_Order;\n+      Warn_On_Size_Alignment              :=\n+        W.Warn_On_Size_Alignment;\n       Warn_On_Standard_Redefinition       :=\n         W.Warn_On_Standard_Redefinition;\n       Warn_On_Suspicious_Contract         :=\n@@ -270,6 +273,8 @@ package body Warnsw is\n         Warn_On_Redundant_Constructs;\n       W.Warn_On_Reverse_Bit_Order           :=\n         Warn_On_Reverse_Bit_Order;\n+      W.Warn_On_Size_Alignment              :=\n+        Warn_On_Size_Alignment;\n       W.Warn_On_Standard_Redefinition       :=\n         Warn_On_Standard_Redefinition;\n       W.Warn_On_Suspicious_Contract         :=\n@@ -421,6 +426,12 @@ package body Warnsw is\n          when 'Y' =>\n             List_Body_Required_Info             := False;\n \n+         when 'z' =>\n+            Warn_On_Size_Alignment              := True;\n+\n+         when 'Z' =>\n+            Warn_On_Size_Alignment              := False;\n+\n          when others =>\n             if Ignore_Unrecognized_VWY_Switches then\n                Write_Line (\"unrecognized switch -gnatw.\" & C & \" ignored\");\n@@ -454,6 +465,7 @@ package body Warnsw is\n       Warn_On_Non_Local_Exception         := False;\n       No_Warn_On_Non_Local_Exception      := True;\n       Warn_On_Reverse_Bit_Order           := False;\n+      Warn_On_Size_Alignment              := False;\n       Warn_On_Unrepped_Components         := False;\n    end Set_GNAT_Mode_Warnings;\n \n@@ -660,6 +672,7 @@ package body Warnsw is\n       Warn_On_Questionable_Missing_Parens := True;\n       Warn_On_Redundant_Constructs        := True;\n       Warn_On_Reverse_Bit_Order           := True;\n+      Warn_On_Size_Alignment              := True;\n       Warn_On_Suspicious_Contract         := True;\n       Warn_On_Unchecked_Conversion        := True;\n       Warn_On_Unrecognized_Pragma         := True;"}, {"sha": "3e1d5c5078f591f1da1a400be1870056694c657d", "filename": "gcc/ada/warnsw.ads", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1bc2cf467b4b05d02a51c74947f39099749cde/gcc%2Fada%2Fwarnsw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1bc2cf467b4b05d02a51c74947f39099749cde/gcc%2Fada%2Fwarnsw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwarnsw.ads?ref=3f1bc2cf467b4b05d02a51c74947f39099749cde", "patch": "@@ -44,14 +44,19 @@ package Warnsw is\n \n    Warn_On_Overridden_Size : Boolean := False;\n    --  Warn when explicit record component clause or array component_size\n-   --  clause specifies a size that overrides a size for the typen which was\n+   --  clause specifies a size that overrides a size for the type which was\n    --  set with an explicit size clause. Off by default, modified by use of\n-   --  -gnatw.s/.S, but not set by -gnatwa.\n+   --  -gnatw.s/.S (but not -gnatwa).\n+\n+   Warn_On_Size_Alignment : Boolean := True;\n+   --  Warn when explicit Size and Alignment clauses are given for a type, and\n+   --  the size is not a multiple of the alignment. Off by default, modified\n+   --  by use of -gnatw.z/.Z and set as part of -gnatwa.\n \n    Warn_On_Standard_Redefinition : Boolean := False;\n    --  Warn when a program defines an identifier that matches a name in\n-   --  Standard. Off by default, modified by use of -gnatw.k/.K, but not\n-   --  affected by -gnatwa.\n+   --  Standard. Off by default, modified by use of -gnatw.k/.K (but not\n+   --  by -gnatwa).\n \n    -----------------------------------\n    -- Saving and Restoring Warnings --\n@@ -98,6 +103,7 @@ package Warnsw is\n       Warn_On_Record_Holes                : Boolean;\n       Warn_On_Redundant_Constructs        : Boolean;\n       Warn_On_Reverse_Bit_Order           : Boolean;\n+      Warn_On_Size_Alignment              : Boolean;\n       Warn_On_Standard_Redefinition       : Boolean;\n       Warn_On_Suspicious_Contract         : Boolean;\n       Warn_On_Suspicious_Modulus_Value    : Boolean;"}]}