{"sha": "3b45a007ef93933c0c70c37cb87bf6097db68a32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I0NWEwMDdlZjkzOTMzYzBjNzBjMzdjYjg3YmY2MDk3ZGI2OGEzMg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-04-18T11:59:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-04-18T11:59:34Z"}, "message": "gimple.h (gimple_call_addr_fndecl): New function.\n\n2011-04-18  Richard Guenther  <rguenther@suse.de>\n\n\t* gimple.h (gimple_call_addr_fndecl): New function.\n\t(gimple_call_fndecl): Use it.\n\t* gimple-fold.c (gimple_fold_call): Fold away OBJ_TYPE_REFs\n\tfor direct calls.\n\t* tree-ssa-ccp.c (ccp_fold_stmt): Remove OBJ_TYPE_REF folding.\n\t* tree-ssa-pre.c (eliminate): Also simplify indirect OBJ_TYPE_REFs.\n\nFrom-SVN: r172644", "tree": {"sha": "ed06be32d0f633307c932b9633f8c7ecf01cec59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed06be32d0f633307c932b9633f8c7ecf01cec59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b45a007ef93933c0c70c37cb87bf6097db68a32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b45a007ef93933c0c70c37cb87bf6097db68a32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b45a007ef93933c0c70c37cb87bf6097db68a32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b45a007ef93933c0c70c37cb87bf6097db68a32/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "870ef0cee00e152bbbf52891fd4e15a949fd474a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/870ef0cee00e152bbbf52891fd4e15a949fd474a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/870ef0cee00e152bbbf52891fd4e15a949fd474a"}], "stats": {"total": 84, "additions": 50, "deletions": 34}, "files": [{"sha": "49c04815325a0218635bdd0884cbfef9ec14c1c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b45a007ef93933c0c70c37cb87bf6097db68a32/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b45a007ef93933c0c70c37cb87bf6097db68a32/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b45a007ef93933c0c70c37cb87bf6097db68a32", "patch": "@@ -1,3 +1,12 @@\n+2011-04-18  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gimple.h (gimple_call_addr_fndecl): New function.\n+\t(gimple_call_fndecl): Use it.\n+\t* gimple-fold.c (gimple_fold_call): Fold away OBJ_TYPE_REFs\n+\tfor direct calls.\n+\t* tree-ssa-ccp.c (ccp_fold_stmt): Remove OBJ_TYPE_REF folding.\n+\t* tree-ssa-pre.c (eliminate): Also simplify indirect OBJ_TYPE_REFs.\n+\n 2011-04-18  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/48650"}, {"sha": "9047f670e7d292dd1735b5708d9e95213903dbe4", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b45a007ef93933c0c70c37cb87bf6097db68a32/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b45a007ef93933c0c70c37cb87bf6097db68a32/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=3b45a007ef93933c0c70c37cb87bf6097db68a32", "patch": "@@ -1450,11 +1450,11 @@ bool\n gimple_fold_call (gimple_stmt_iterator *gsi, bool inplace)\n {\n   gimple stmt = gsi_stmt (*gsi);\n-\n-  tree callee = gimple_call_fndecl (stmt);\n+  tree callee;\n \n   /* Check for builtins that CCP can handle using information not\n      available in the generic fold routines.  */\n+  callee = gimple_call_fndecl (stmt);\n   if (!inplace && callee && DECL_BUILT_IN (callee))\n     {\n       tree result = gimple_fold_builtin (stmt);\n@@ -1466,6 +1466,16 @@ gimple_fold_call (gimple_stmt_iterator *gsi, bool inplace)\n \t  return true;\n \t}\n     }\n+\n+  /* Check for virtual calls that became direct calls.  */\n+  callee = gimple_call_fn (stmt);\n+  if (TREE_CODE (callee) == OBJ_TYPE_REF\n+      && gimple_call_addr_fndecl (OBJ_TYPE_REF_EXPR (callee)) != NULL_TREE)\n+    {\n+      gimple_call_set_fn (stmt, OBJ_TYPE_REF_EXPR (callee));\n+      return true;\n+    }\n+\n   return false;\n }\n "}, {"sha": "3146b70cb125bd7062ee35953f7111229eff397d", "filename": "gcc/gimple.h", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b45a007ef93933c0c70c37cb87bf6097db68a32/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b45a007ef93933c0c70c37cb87bf6097db68a32/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=3b45a007ef93933c0c70c37cb87bf6097db68a32", "patch": "@@ -2065,6 +2065,24 @@ gimple_call_set_fndecl (gimple gs, tree decl)\n   gimple_set_op (gs, 1, build_fold_addr_expr_loc (gimple_location (gs), decl));\n }\n \n+/* Given a valid GIMPLE_CALL function address return the FUNCTION_DECL\n+   associated with the callee if known.  Otherwise return NULL_TREE.  */\n+\n+static inline tree\n+gimple_call_addr_fndecl (const_tree fn)\n+{\n+  if (TREE_CODE (fn) == ADDR_EXPR)\n+    {\n+      tree fndecl = TREE_OPERAND (fn, 0);\n+      if (TREE_CODE (fndecl) == MEM_REF\n+\t  && TREE_CODE (TREE_OPERAND (fndecl, 0)) == ADDR_EXPR\n+\t  && integer_zerop (TREE_OPERAND (fndecl, 1)))\n+\tfndecl = TREE_OPERAND (TREE_OPERAND (fndecl, 0), 0);\n+      if (TREE_CODE (fndecl) == FUNCTION_DECL)\n+\treturn fndecl;\n+    }\n+  return NULL_TREE;\n+}\n \n /* If a given GIMPLE_CALL's callee is a FUNCTION_DECL, return it.\n    Otherwise return NULL.  This function is analogous to\n@@ -2073,21 +2091,7 @@ gimple_call_set_fndecl (gimple gs, tree decl)\n static inline tree\n gimple_call_fndecl (const_gimple gs)\n {\n-  tree addr = gimple_call_fn (gs);\n-  if (TREE_CODE (addr) == ADDR_EXPR)\n-    {\n-      tree fndecl = TREE_OPERAND (addr, 0);\n-      if (TREE_CODE (fndecl) == MEM_REF)\n-\t{\n-\t  if (TREE_CODE (TREE_OPERAND (fndecl, 0)) == ADDR_EXPR\n-\t      && integer_zerop (TREE_OPERAND (fndecl, 1)))\n-\t    return TREE_OPERAND (TREE_OPERAND (fndecl, 0), 0);\n-\t  else\n-\t    return NULL_TREE;\n-\t}\n-      return TREE_OPERAND (addr, 0);\n-    }\n-  return NULL_TREE;\n+  return gimple_call_addr_fndecl (gimple_call_fn (gs));\n }\n \n "}, {"sha": "3aa2773ad8f0d65320caa4285a8ecd3ac7363a76", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b45a007ef93933c0c70c37cb87bf6097db68a32/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b45a007ef93933c0c70c37cb87bf6097db68a32/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=3b45a007ef93933c0c70c37cb87bf6097db68a32", "patch": "@@ -1702,7 +1702,6 @@ ccp_fold_stmt (gimple_stmt_iterator *gsi)\n \ttree lhs = gimple_call_lhs (stmt);\n \ttree val;\n \ttree argt;\n-\ttree callee;\n \tbool changed = false;\n \tunsigned i;\n \n@@ -1743,17 +1742,6 @@ ccp_fold_stmt (gimple_stmt_iterator *gsi)\n \t      }\n \t  }\n \n-\tcallee = gimple_call_fn (stmt);\n-\tif (TREE_CODE (callee) == OBJ_TYPE_REF\n-\t    && TREE_CODE (OBJ_TYPE_REF_EXPR (callee)) == SSA_NAME)\n-\t  {\n-\t    tree expr = OBJ_TYPE_REF_EXPR (callee);\n-\t    OBJ_TYPE_REF_EXPR (callee) = valueize_op (expr);\n-\t    if (gimple_fold_call (gsi, false))\n-\t      changed = true;\n-\t    OBJ_TYPE_REF_EXPR (callee) = expr;\n-\t  }\n-\n \treturn changed;\n       }\n "}, {"sha": "df2a13867d1f5da397cd02f87631b70c1d7a6b68", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b45a007ef93933c0c70c37cb87bf6097db68a32/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b45a007ef93933c0c70c37cb87bf6097db68a32/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=3b45a007ef93933c0c70c37cb87bf6097db68a32", "patch": "@@ -4380,13 +4380,18 @@ eliminate (void)\n \t    }\n \t  /* Visit indirect calls and turn them into direct calls if\n \t     possible.  */\n-\t  if (is_gimple_call (stmt)\n-\t      && TREE_CODE (gimple_call_fn (stmt)) == SSA_NAME)\n+\t  if (is_gimple_call (stmt))\n \t    {\n \t      tree orig_fn = gimple_call_fn (stmt);\n-\t      tree fn = VN_INFO (orig_fn)->valnum;\n-\t      if (TREE_CODE (fn) == ADDR_EXPR\n-\t\t  && TREE_CODE (TREE_OPERAND (fn, 0)) == FUNCTION_DECL\n+\t      tree fn;\n+\t      if (TREE_CODE (orig_fn) == SSA_NAME)\n+\t\tfn = VN_INFO (orig_fn)->valnum;\n+\t      else if (TREE_CODE (orig_fn) == OBJ_TYPE_REF\n+\t\t       && TREE_CODE (OBJ_TYPE_REF_EXPR (orig_fn)) == SSA_NAME)\n+\t\tfn = VN_INFO (OBJ_TYPE_REF_EXPR (orig_fn))->valnum;\n+\t      else\n+\t\tcontinue;\n+\t      if (gimple_call_addr_fndecl (fn) != NULL_TREE\n \t\t  && useless_type_conversion_p (TREE_TYPE (orig_fn),\n \t\t\t\t\t\tTREE_TYPE (fn)))\n \t\t{"}]}