{"sha": "5834e96a08fd8b86a42428f38a95903d2f1de202", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTgzNGU5NmEwOGZkOGI4NmE0MjQyOGYzOGE5NTkwM2QyZjFkZTIwMg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-07-13T12:47:39Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-07-13T12:47:39Z"}, "message": "ipa-devirt: Fix crash in obj_type_ref_class [PR95114]\n\nThe testcase has failed since r9-5035, because obj_type_ref_class\ntries to look up an ODR type when no ODR type information is\navailable.  (The information was available earlier in the\ncompilation, but was freed during pass_ipa_free_lang_data.)\nWe then crash dereferencing the null get_odr_type result.\n\nThe test passes with -O2.  However, it fails again if -fdump-tree-all\nis used, since obj_type_ref_class is called indirectly from the\ndump routines.\n\nOther code creates ODR type entries on the fly by passing \u201ctrue\u201d\nas the insert parameter.  But obj_type_ref_class can't do that\nunconditionally, since it should have no side-effects when used\nfrom the dumping code.\n\nFollowing a suggestion from Honza, this patch adds parameters\nto say whether the routines are being called from dump routines\nand uses those to derive the insert parameter.\n\ngcc/\n\tPR middle-end/95114\n\t* tree.h (virtual_method_call_p): Add a default-false parameter\n\tthat indicates whether the function is being called from dump\n\troutines.\n\t(obj_type_ref_class): Likewise.\n\t* tree.c (virtual_method_call_p): Likewise.\n\t* ipa-devirt.c (obj_type_ref_class): Likewise.  Lazily add ODR\n\ttype information for the type when the parameter is false.\n\t* tree-pretty-print.c (dump_generic_node): Update calls to\n\tvirtual_method_call_p and obj_type_ref_class accordingly.\n\ngcc/testsuite/\n\tPR middle-end/95114\n\t* g++.target/aarch64/pr95114.C: New test.", "tree": {"sha": "4220917d019cb3cb16e40755f96f9e92ed4c7544", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4220917d019cb3cb16e40755f96f9e92ed4c7544"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5834e96a08fd8b86a42428f38a95903d2f1de202", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5834e96a08fd8b86a42428f38a95903d2f1de202", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5834e96a08fd8b86a42428f38a95903d2f1de202", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5834e96a08fd8b86a42428f38a95903d2f1de202/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba8fe4b4832e30277f2e4a73b5d35b2e55074d07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba8fe4b4832e30277f2e4a73b5d35b2e55074d07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba8fe4b4832e30277f2e4a73b5d35b2e55074d07"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "3ab7049734ff0984291c2f8a673dd4395191d729", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5834e96a08fd8b86a42428f38a95903d2f1de202/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5834e96a08fd8b86a42428f38a95903d2f1de202/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=5834e96a08fd8b86a42428f38a95903d2f1de202", "patch": "@@ -1883,10 +1883,11 @@ add_type_duplicate (odr_type val, tree type)\n   return build_bases;\n }\n \n-/* REF is OBJ_TYPE_REF, return the class the ref corresponds to.  */\n+/* REF is OBJ_TYPE_REF, return the class the ref corresponds to.\n+   FOR_DUMP_P is true when being called from the dump routines.  */\n \n tree\n-obj_type_ref_class (const_tree ref)\n+obj_type_ref_class (const_tree ref, bool for_dump_p)\n {\n   gcc_checking_assert (TREE_CODE (ref) == OBJ_TYPE_REF);\n   ref = TREE_TYPE (ref);\n@@ -1902,8 +1903,10 @@ obj_type_ref_class (const_tree ref)\n   tree ret = TREE_TYPE (ref);\n   if (!in_lto_p && !TYPE_STRUCTURAL_EQUALITY_P (ret))\n     ret = TYPE_CANONICAL (ret);\n+  else if (odr_type ot = get_odr_type (ret, !for_dump_p))\n+    ret = ot->type;\n   else\n-    ret = get_odr_type (ret)->type;\n+    gcc_assert (for_dump_p);\n   return ret;\n }\n "}, {"sha": "1689159e47cde5f9bd516b3604ccb506fdd3de0d", "filename": "gcc/testsuite/g++.target/aarch64/pr95114.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5834e96a08fd8b86a42428f38a95903d2f1de202/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr95114.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5834e96a08fd8b86a42428f38a95903d2f1de202/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr95114.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr95114.C?ref=5834e96a08fd8b86a42428f38a95903d2f1de202", "patch": "@@ -0,0 +1,3 @@\n+template<typename T> struct foo { virtual void f() = 0; };\n+extern foo<__Int8x8_t> &x;\n+void f() { x.f(); }"}, {"sha": "be1ed906c1d0520039322f2ab3758d297cb9ddf3", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5834e96a08fd8b86a42428f38a95903d2f1de202/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5834e96a08fd8b86a42428f38a95903d2f1de202/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=5834e96a08fd8b86a42428f38a95903d2f1de202", "patch": "@@ -3167,10 +3167,11 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, dump_flags_t flags,\n \t libstdc++-prettyprinters/shared_ptr.cc with and without -g,\n \t for example, at occurrences of OBJ_TYPE_REF.  */\n       if (!(flags & (TDF_SLIM | TDF_COMPARE_DEBUG))\n-\t  && virtual_method_call_p (node))\n+\t  && virtual_method_call_p (node, true))\n \t{\n \t  pp_string (pp, \"(\");\n-\t  dump_generic_node (pp, obj_type_ref_class (node), spc, flags, false);\n+\t  dump_generic_node (pp, obj_type_ref_class (node, true),\n+\t\t\t     spc, flags, false);\n \t  pp_string (pp, \")\");\n \t}\n       dump_generic_node (pp, OBJ_TYPE_REF_OBJECT (node), spc, flags, false);"}, {"sha": "3d9968fd7a01ff942c40df69804b12ab3be09a4f", "filename": "gcc/tree.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5834e96a08fd8b86a42428f38a95903d2f1de202/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5834e96a08fd8b86a42428f38a95903d2f1de202/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=5834e96a08fd8b86a42428f38a95903d2f1de202", "patch": "@@ -12810,10 +12810,11 @@ lhd_gcc_personality (void)\n    OBJ_TYPE_REF representing an virtual call of C++ method.\n    (As opposed to OBJ_TYPE_REF representing objc calls\n    through a cast where middle-end devirtualization machinery\n-   can't apply.) */\n+   can't apply.)  FOR_DUMP_P is true when being called from\n+   the dump routines.  */\n \n bool\n-virtual_method_call_p (const_tree target)\n+virtual_method_call_p (const_tree target, bool for_dump_p)\n {\n   if (TREE_CODE (target) != OBJ_TYPE_REF)\n     return false;\n@@ -12826,7 +12827,7 @@ virtual_method_call_p (const_tree target)\n   /* If we do not have BINFO associated, it means that type was built\n      without devirtualization enabled.  Do not consider this a virtual\n      call.  */\n-  if (!TYPE_BINFO (obj_type_ref_class (target)))\n+  if (!TYPE_BINFO (obj_type_ref_class (target, for_dump_p)))\n     return false;\n   return true;\n }"}, {"sha": "866d9ba8fbca2fe93ffebf2673112cfdb5900857", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5834e96a08fd8b86a42428f38a95903d2f1de202/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5834e96a08fd8b86a42428f38a95903d2f1de202/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=5834e96a08fd8b86a42428f38a95903d2f1de202", "patch": "@@ -5241,8 +5241,8 @@ extern location_t *block_nonartificial_location (tree);\n extern location_t tree_nonartificial_location (tree);\n extern tree block_ultimate_origin (const_tree);\n extern tree get_binfo_at_offset (tree, poly_int64, tree);\n-extern bool virtual_method_call_p (const_tree);\n-extern tree obj_type_ref_class (const_tree ref);\n+extern bool virtual_method_call_p (const_tree, bool = false);\n+extern tree obj_type_ref_class (const_tree ref, bool = false);\n extern bool types_same_for_odr (const_tree type1, const_tree type2);\n extern bool contains_bitfld_component_ref_p (const_tree);\n extern bool block_may_fallthru (const_tree);"}]}