{"sha": "5f0a92e5c46e74b5d5232aab9997f6f3a27d8619", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYwYTkyZTVjNDZlNzRiNWQ1MjMyYWFiOTk5N2Y2ZjNhMjdkODYxOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-20T11:59:47Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-20T11:59:47Z"}, "message": "Fix typos.\n\nFrom-SVN: r229054", "tree": {"sha": "964843ba4256289be69be7baa3643ec055548498", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/964843ba4256289be69be7baa3643ec055548498"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f0a92e5c46e74b5d5232aab9997f6f3a27d8619", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f0a92e5c46e74b5d5232aab9997f6f3a27d8619", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f0a92e5c46e74b5d5232aab9997f6f3a27d8619", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f0a92e5c46e74b5d5232aab9997f6f3a27d8619/comments", "author": null, "committer": null, "parents": [{"sha": "319c61611e9a5a95ed7e05134f85f22113bc3b23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/319c61611e9a5a95ed7e05134f85f22113bc3b23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/319c61611e9a5a95ed7e05134f85f22113bc3b23"}], "stats": {"total": 61, "additions": 30, "deletions": 31}, "files": [{"sha": "8768e3e77de1b7bd11bc4c0c767e719cc176bb56", "filename": "gcc/ada/g-debpoo.adb", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0a92e5c46e74b5d5232aab9997f6f3a27d8619/gcc%2Fada%2Fg-debpoo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0a92e5c46e74b5d5232aab9997f6f3a27d8619/gcc%2Fada%2Fg-debpoo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-debpoo.adb?ref=5f0a92e5c46e74b5d5232aab9997f6f3a27d8619", "patch": "@@ -91,14 +91,14 @@ package body GNAT.Debug_Pools is\n \n    Disable : Boolean := False;\n    --  This variable is used to avoid infinite loops, where this package would\n-   --  itself allocate memory and then calls itself recursively, forever.\n-   --  Useful when System_Memory_Debug_Pool_Enabled is True.\n+   --  itself allocate memory and then call itself recursively, forever. Useful\n+   --  when System_Memory_Debug_Pool_Enabled is True.\n \n    System_Memory_Debug_Pool_Enabled : Boolean := False;\n-   --  If True System.Memory allocation are using Debug_Pool\n+   --  If True, System.Memory allocation uses Debug_Pool\n \n    Allow_Unhandled_Memory : Boolean := False;\n-   --  If True protects Deallocate against releasing memory allocated before\n+   --  If True, protects Deallocate against releasing memory allocated before\n    --  System_Memory_Debug_Pool_Enabled was set.\n \n    ---------------------------\n@@ -131,19 +131,18 @@ package body GNAT.Debug_Pools is\n       Traceback   : Tracebacks_Array_Access;\n       Kind        : Traceback_Kind;\n       Count       : Natural;\n-      --  size of the memory allocated/freed at Traceback since last Reset\n-      --  call.\n+      --  Size of the memory allocated/freed at Traceback since last Reset call\n \n       Total       : Byte_Count;\n-      --  number of chunk of memory allocated/freed at Traceback since last\n+      --  Number of chunk of memory allocated/freed at Traceback since last\n       --  Reset call.\n \n       Frees       : Natural;\n-      --  number of chunk of memory allocated at Traceback, currently freed\n+      --  Number of chunk of memory allocated at Traceback, currently freed\n       --  since last Reset call. (only for Alloc & Indirect_Alloc elements)\n \n       Total_Frees : Byte_Count;\n-      --  size of the memory allocated at Traceback, currently freed since last\n+      --  Size of the memory allocated at Traceback, currently freed since last\n       --  Reset call. (only for Alloc & Indirect_Alloc elements)\n \n       Next        : Traceback_Htable_Elem_Ptr;\n@@ -296,19 +295,19 @@ package body GNAT.Debug_Pools is\n    --    Ignored_Frame_Start .. Ignored_Frame_End\n \n    procedure Stdout_Put      (S : String);\n-   --  Wrapper for Put that ensure we always write to stdout\n-   --  instead of the current output file defined in GNAT.IO.\n+   --  Wrapper for Put that ensures we always write to stdout instead of the\n+   --  current output file defined in GNAT.IO.\n \n    procedure Stdout_Put_Line (S : String);\n-   --  Wrapper for Put_Line that ensure we always write to stdout\n-   --  instead of the current output file defined in GNAT.IO.\n+   --  Wrapper for Put_Line that ensures we always write to stdout instead of\n+   --  the current output file defined in GNAT.IO.\n \n    package Validity is\n       function Is_Handled (Storage : System.Address) return Boolean;\n       pragma Inline (Is_Handled);\n       --  Return True if Storage is the address of a block that the debug pool\n-      --  had already under its control.\n-      --  Used to allow System.Memory to use Debug_Pools\n+      --  already had under its control. Used to allow System.Memory to use\n+      --  Debug_Pools\n \n       function Is_Valid (Storage : System.Address) return Boolean;\n       pragma Inline (Is_Valid);\n@@ -635,13 +634,13 @@ package body GNAT.Debug_Pools is\n \n       type Validity_Bits is record\n          Valid : Validity_Bits_Part_Ref := No_Validity_Bits_Part;\n-         --  True if chunk of memory at this address currently allocated.\n+         --  True if chunk of memory at this address is currently allocated\n \n          Handled : Validity_Bits_Part_Ref := No_Validity_Bits_Part;\n          --  True if chunk of memory at this address was allocated once after\n-         --  Allow_Unhandled_Memory was set to True.\n-         --  Used to know on Deallocate if chunk of memory should be handled\n-         --  as a block allocated by this package.\n+         --  Allow_Unhandled_Memory was set to True. Used to know on Deallocate\n+         --  if chunk of memory should be handled a block allocated by this\n+         --  package.\n \n       end record;\n \n@@ -658,7 +657,7 @@ package body GNAT.Debug_Pools is\n         (Storage : System.Address;\n          Valid   : Boolean) return Boolean;\n       pragma Inline (Is_Valid_Or_Handled);\n-      --  internal implementation of Is_Valid and Is_Handled.\n+      --  Internal implementation of Is_Valid and Is_Handled.\n       --  Valid is used to select Valid or Handled arrays.\n \n       package Validy_Htable is new GNAT.HTable.Simple_HTable\n@@ -669,7 +668,7 @@ package body GNAT.Debug_Pools is\n          Hash       => Hash,\n          Equal      => \"=\");\n       --  Table to keep the validity and handled bit blocks for the allocated\n-      --  data\n+      --  data.\n \n       function To_Pointer is new Ada.Unchecked_Conversion\n         (System.Address, Validity_Bits_Part_Ref);\n@@ -1850,7 +1849,7 @@ package body GNAT.Debug_Pools is\n             --  Handle only alloc elememts\n             if Elem.Kind = Alloc then\n                --  Ignore small blocks (depending on the sorting criteria) to\n-               --  gain speed\n+               --  gain speed.\n \n                if (Sort = Memory_Usage\n                    and then Elem.Total - Elem.Total_Frees >= 1_000)"}, {"sha": "108422a3174faa6a9c725ba5e46bceefbc5ea7e2", "filename": "gcc/ada/g-debpoo.ads", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0a92e5c46e74b5d5232aab9997f6f3a27d8619/gcc%2Fada%2Fg-debpoo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0a92e5c46e74b5d5232aab9997f6f3a27d8619/gcc%2Fada%2Fg-debpoo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-debpoo.ads?ref=5f0a92e5c46e74b5d5232aab9997f6f3a27d8619", "patch": "@@ -276,7 +276,7 @@ package GNAT.Debug_Pools is\n       Report : Report_Type := All_Reports);\n    --  Dump information about memory usage.\n    --  Size is the number of the biggest memory users we want to show. Report\n-   --  indicates which sorting order is used in the report\n+   --  indicates which sorting order is used in the report.\n \n    procedure Dump_Stdout\n      (Pool   : Debug_Pool;\n@@ -294,29 +294,29 @@ package GNAT.Debug_Pools is\n      (Storage_Address          : Address;\n       Size_In_Storage_Elements : out Storage_Count;\n       Valid                    : out Boolean);\n-   --  set Valid if Storage_Address is the address of a chunk of memory\n+   --  Set Valid if Storage_Address is the address of a chunk of memory\n    --  currently allocated by any pool.\n    --  If Valid is True, Size_In_Storage_Elements is set to the size of this\n    --  chunk of memory.\n \n    type Byte_Count is mod System.Max_Binary_Modulus;\n-   --  Type used for maintaining byte counts, needs to be large enough\n+   --  Type used for maintaining byte counts, needs to be large enough to\n    --  to accommodate counts allowing for repeated use of the same memory.\n \n    function High_Water_Mark\n      (Pool : Debug_Pool) return Byte_Count;\n-   --  return the highest size of the memory allocated by the pool.\n-   --  memory used internally by the pool is not taken into account.\n+   --  Return the highest size of the memory allocated by the pool.\n+   --  Memory used internally by the pool is not taken into account.\n \n    function Current_Water_Mark\n      (Pool : Debug_Pool) return Byte_Count;\n-   --  return the size of the memory currently allocated by the pool.\n-   --  memory used internally by the pool is not taken into account.\n+   --  Return the size of the memory currently allocated by the pool.\n+   --  Memory used internally by the pool is not taken into account.\n \n    procedure System_Memory_Debug_Pool\n      (Has_Unhandled_Memory : Boolean := True);\n-   --  let the package know the System.Memory is using it.\n-   --  If Has_Unhandled_Memory is true, some deallocate can be done for\n+   --  Let the package know the System.Memory is using it.\n+   --  If Has_Unhandled_Memory is true, some deallocation can be done for\n    --  memory not allocated with Allocate.\n \n private"}]}