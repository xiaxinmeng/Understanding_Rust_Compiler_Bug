{"sha": "7a91c710999d274c188fc0c504732a6f0b9059c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E5MWM3MTA5OTlkMjc0YzE4OGZjMGM1MDQ3MzJhNmYwYjkwNTljMQ==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2019-08-14T17:54:15Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2019-08-14T17:54:15Z"}, "message": "Implement C++20 p0879 - Constexpr for swap and swap related functions.\n\n2019-08-14  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\tImplement C++20 p0879 - Constexpr for swap and swap related functions.\n\t* include/std/version (__cpp_lib_constexpr_swap_algorithms): New macro.\n\t* include/bits/algorithmfwd.h (__cpp_lib_constexpr_swap_algorithms):\n\tNew macro.\n\t(iter_swap, make_heap, next_permutation, partial_sort_copy, pop_heap)\n\t(prev_permutation, push_heap, reverse, rotate, sort_heap, swap)\n\t(swap_ranges, nth_element, partial_sort, sort): Add constexpr.\n\t* include/bits/move.h (swap): Add constexpr.\n\t* include/bits/stl_algo.h (__move_median_to_first, __reverse, reverse)\n\t(__gcd, __rotate, rotate, __partition, __heap_select)\n\t(__partial_sort_copy, partial_sort_copy, __unguarded_partition)\n\t(__unguarded_partition_pivot, __partial_sort, __introsort_loop, __sort)\n\t(__introselect, __chunk_insertion_sort, next_permutation)\n\t(prev_permutation, partition, partial_sort, nth_element, sort)\n\t(__iter_swap::iter_swap, iter_swap, swap_ranges): Add constexpr.\n\t* include/bits/stl_algobase.h (__iter_swap::iter_swap, iter_swap)\n\t(swap_ranges): Add constexpr.\n\t* include/bits/stl_heap.h (__push_heap, push_heap, __adjust_heap,\n\t__pop_heap, pop_heap, __make_heap, make_heap, __sort_heap, sort_heap):\n\tAdd constexpr.\n\t* include/std/type_traits (swap): Add constexpr.\n\t* testsuite/25_algorithms/headers/algorithm/synopsis.cc: Add constexpr.\n\t* testsuite/25_algorithms/iter_swap/constexpr.cc: New test.\n\t* testsuite/25_algorithms/make_heap/constexpr.cc: New test.\n\t* testsuite/25_algorithms/next_permutation/constexpr.cc: New test.\n\t* testsuite/25_algorithms/nth_element/constexpr.cc: New test.\n\t* testsuite/25_algorithms/partial_sort/constexpr.cc: New test.\n\t* testsuite/25_algorithms/partial_sort_copy/constexpr.cc: New test.\n\t* testsuite/25_algorithms/partition/constexpr.cc: New test.\n\t* testsuite/25_algorithms/pop_heap/constexpr.cc: New test.\n\t* testsuite/25_algorithms/prev_permutation/constexpr.cc: New test.\n\t* testsuite/25_algorithms/push_heap/constexpr.cc: New test.\n\t* testsuite/25_algorithms/reverse/constexpr.cc: New test.\n\t* testsuite/25_algorithms/rotate/constexpr.cc: New test.\n\t* testsuite/25_algorithms/sort/constexpr.cc: New test.\n\t* testsuite/25_algorithms/sort_heap/constexpr.cc: New test.\n\t* testsuite/25_algorithms/swap/constexpr.cc: New test.\n\t* testsuite/25_algorithms/swap_ranges/constexpr.cc: New test.\n\nFrom-SVN: r274488", "tree": {"sha": "524bc4d35333f8ba97b84400a1f5908d8d51c4d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/524bc4d35333f8ba97b84400a1f5908d8d51c4d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a91c710999d274c188fc0c504732a6f0b9059c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a91c710999d274c188fc0c504732a6f0b9059c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a91c710999d274c188fc0c504732a6f0b9059c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a91c710999d274c188fc0c504732a6f0b9059c1/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0bdf9f92531932ff1bb238ed84bf90597d9be3d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bdf9f92531932ff1bb238ed84bf90597d9be3d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bdf9f92531932ff1bb238ed84bf90597d9be3d2"}], "stats": {"total": 888, "additions": 888, "deletions": 0}, "files": [{"sha": "d9908b6d8fd950960ef6a518721ad237bec59524", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7a91c710999d274c188fc0c504732a6f0b9059c1", "patch": "@@ -1,3 +1,44 @@\n+2019-08-14  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tImplement C++20 p0879 - Constexpr for swap and swap related functions.\n+\t* include/std/version (__cpp_lib_constexpr_swap_algorithms): New macro.\n+\t* include/bits/algorithmfwd.h (__cpp_lib_constexpr_swap_algorithms):\n+\tNew macro.\n+\t(iter_swap, make_heap, next_permutation, partial_sort_copy, pop_heap)\n+\t(prev_permutation, push_heap, reverse, rotate, sort_heap, swap)\n+\t(swap_ranges, nth_element, partial_sort, sort): Add constexpr.\n+\t* include/bits/move.h (swap): Add constexpr.\n+\t* include/bits/stl_algo.h (__move_median_to_first, __reverse, reverse)\n+\t(__gcd, __rotate, rotate, __partition, __heap_select)\n+\t(__partial_sort_copy, partial_sort_copy, __unguarded_partition)\n+\t(__unguarded_partition_pivot, __partial_sort, __introsort_loop, __sort)\n+\t(__introselect, __chunk_insertion_sort, next_permutation)\n+\t(prev_permutation, partition, partial_sort, nth_element, sort)\n+\t(__iter_swap::iter_swap, iter_swap, swap_ranges): Add constexpr.\n+\t* include/bits/stl_algobase.h (__iter_swap::iter_swap, iter_swap)\n+\t(swap_ranges): Add constexpr.\n+\t* include/bits/stl_heap.h (__push_heap, push_heap, __adjust_heap,\n+\t__pop_heap, pop_heap, __make_heap, make_heap, __sort_heap, sort_heap):\n+\tAdd constexpr.\n+\t* include/std/type_traits (swap): Add constexpr.\n+\t* testsuite/25_algorithms/headers/algorithm/synopsis.cc: Add constexpr.\n+\t* testsuite/25_algorithms/iter_swap/constexpr.cc: New test.\n+\t* testsuite/25_algorithms/make_heap/constexpr.cc: New test.\n+\t* testsuite/25_algorithms/next_permutation/constexpr.cc: New test.\n+\t* testsuite/25_algorithms/nth_element/constexpr.cc: New test.\n+\t* testsuite/25_algorithms/partial_sort/constexpr.cc: New test.\n+\t* testsuite/25_algorithms/partial_sort_copy/constexpr.cc: New test.\n+\t* testsuite/25_algorithms/partition/constexpr.cc: New test.\n+\t* testsuite/25_algorithms/pop_heap/constexpr.cc: New test.\n+\t* testsuite/25_algorithms/prev_permutation/constexpr.cc: New test.\n+\t* testsuite/25_algorithms/push_heap/constexpr.cc: New test.\n+\t* testsuite/25_algorithms/reverse/constexpr.cc: New test.\n+\t* testsuite/25_algorithms/rotate/constexpr.cc: New test.\n+\t* testsuite/25_algorithms/sort/constexpr.cc: New test.\n+\t* testsuite/25_algorithms/sort_heap/constexpr.cc: New test.\n+\t* testsuite/25_algorithms/swap/constexpr.cc: New test.\n+\t* testsuite/25_algorithms/swap_ranges/constexpr.cc: New test.\n+\n 2019-08-12  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/90361"}, {"sha": "9c511f05197424c97a96a5cfb68bc9ddfcb364eb", "filename": "libstdc++-v3/include/bits/algorithmfwd.h", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h?ref=7a91c710999d274c188fc0c504732a6f0b9059c1", "patch": "@@ -193,6 +193,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus > 201703L\n #  define __cpp_lib_constexpr_algorithms 201711L\n+#  define __cpp_lib_constexpr_swap_algorithms 201806L\n #endif\n \n #if __cplusplus >= 201103L\n@@ -377,6 +378,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n   template<typename _FIter1, typename _FIter2>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     iter_swap(_FIter1, _FIter2);\n \n@@ -391,10 +393,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     lower_bound(_FIter, _FIter, const _Tp&, _Compare);\n \n   template<typename _RAIter>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     make_heap(_RAIter, _RAIter);\n \n   template<typename _RAIter, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     make_heap(_RAIter, _RAIter, _Compare);\n \n@@ -478,10 +482,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // mismatch\n \n   template<typename _BIter>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     next_permutation(_BIter, _BIter);\n \n   template<typename _BIter, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     next_permutation(_BIter, _BIter, _Compare);\n \n@@ -496,10 +502,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // partial_sort\n \n   template<typename _IIter, typename _RAIter>\n+    _GLIBCXX20_CONSTEXPR\n     _RAIter\n     partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter);\n \n   template<typename _IIter, typename _RAIter, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     _RAIter\n     partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter, _Compare);\n \n@@ -519,26 +527,32 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n   template<typename _RAIter>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     pop_heap(_RAIter, _RAIter);\n \n   template<typename _RAIter, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     pop_heap(_RAIter, _RAIter, _Compare);\n \n   template<typename _BIter>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     prev_permutation(_BIter, _BIter);\n \n   template<typename _BIter, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     bool\n     prev_permutation(_BIter, _BIter, _Compare);\n \n   template<typename _RAIter>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     push_heap(_RAIter, _RAIter);\n \n   template<typename _RAIter, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     push_heap(_RAIter, _RAIter, _Compare);\n \n@@ -579,6 +593,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // replace_if\n \n   template<typename _BIter>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     reverse(_BIter, _BIter);\n \n@@ -590,6 +605,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   inline namespace _V2\n   {\n     template<typename _FIter>\n+      _GLIBCXX20_CONSTEXPR\n       _FIter\n       rotate(_FIter, _FIter, _FIter);\n   }\n@@ -613,10 +629,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n   template<typename _RAIter>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     sort_heap(_RAIter, _RAIter);\n \n   template<typename _RAIter, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     sort_heap(_RAIter, _RAIter, _Compare);\n \n@@ -628,15 +646,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // For C++11 swap() is declared in <type_traits>.\n \n   template<typename _Tp, size_t _Nm>\n+    _GLIBCXX20_CONSTEXPR\n     inline void\n     swap(_Tp& __a, _Tp& __b);\n \n   template<typename _Tp, size_t _Nm>\n+    _GLIBCXX20_CONSTEXPR\n     inline void\n     swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm]);\n #endif\n \n   template<typename _FIter1, typename _FIter2>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter2\n     swap_ranges(_FIter1, _FIter1, _FIter2);\n \n@@ -783,22 +804,27 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n     mismatch(_IIter1, _IIter1, _IIter2, _BinaryPredicate);\n \n   template<typename _RAIter>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     nth_element(_RAIter, _RAIter, _RAIter);\n \n   template<typename _RAIter, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     nth_element(_RAIter, _RAIter, _RAIter, _Compare);\n \n   template<typename _RAIter>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     partial_sort(_RAIter, _RAIter, _RAIter);\n \n   template<typename _RAIter, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     partial_sort(_RAIter, _RAIter, _RAIter, _Compare);\n \n   template<typename _BIter, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     _BIter\n     partition(_BIter, _BIter, _Predicate);\n \n@@ -892,10 +918,12 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n     set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);\n \n   template<typename _RAIter>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     sort(_RAIter, _RAIter);\n \n   template<typename _RAIter, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     sort(_RAIter, _RAIter, _Compare);\n "}, {"sha": "d7c7068e29cc87228dea6d20446ea95556f92e3c", "filename": "libstdc++-v3/include/bits/move.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h?ref=7a91c710999d274c188fc0c504732a6f0b9059c1", "patch": "@@ -175,6 +175,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @return   Nothing.\n   */\n   template<typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     inline\n #if __cplusplus >= 201103L\n     typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,\n@@ -199,6 +200,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // DR 809. std::swap should be overloaded for array types.\n   /// Swap the contents of two arrays.\n   template<typename _Tp, size_t _Nm>\n+    _GLIBCXX20_CONSTEXPR\n     inline\n #if __cplusplus >= 201103L\n     typename enable_if<__is_swappable<_Tp>::value>::type"}, {"sha": "bece93379de2071994782ec09db2b16a2dca156f", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=7a91c710999d274c188fc0c504732a6f0b9059c1", "patch": "@@ -74,6 +74,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// Swaps the median value of *__a, *__b and *__c under __comp to *__result\n   template<typename _Iterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,\n \t\t\t   _Iterator __c, _Compare __comp)\n@@ -1162,6 +1163,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  overloaded for bidirectional iterators.\n   */\n   template<typename _BidirectionalIterator>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     __reverse(_BidirectionalIterator __first, _BidirectionalIterator __last,\n \t      bidirectional_iterator_tag)\n@@ -1182,6 +1184,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  overloaded for random access iterators.\n   */\n   template<typename _RandomAccessIterator>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,\n \t      random_access_iterator_tag)\n@@ -1210,6 +1213,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  swaps @p *(__first+i) and @p *(__last-(i+1))\n   */\n   template<typename _BidirectionalIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline void\n     reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)\n     {\n@@ -1263,6 +1267,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  It returns the greatest common divisor of two integer values.\n   */\n   template<typename _EuclideanRingElement>\n+    _GLIBCXX20_CONSTEXPR\n     _EuclideanRingElement\n     __gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)\n     {\n@@ -1280,6 +1285,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// This is a helper function for the rotate algorithm.\n   template<typename _ForwardIterator>\n+    _GLIBCXX20_CONSTEXPR\n     _ForwardIterator\n     __rotate(_ForwardIterator __first,\n \t     _ForwardIterator __middle,\n@@ -1321,6 +1327,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n    /// This is a helper function for the rotate algorithm.\n   template<typename _BidirectionalIterator>\n+    _GLIBCXX20_CONSTEXPR\n     _BidirectionalIterator\n     __rotate(_BidirectionalIterator __first,\n \t     _BidirectionalIterator __middle,\n@@ -1359,6 +1366,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// This is a helper function for the rotate algorithm.\n   template<typename _RandomAccessIterator>\n+    _GLIBCXX20_CONSTEXPR\n     _RandomAccessIterator\n     __rotate(_RandomAccessIterator __first,\n \t     _RandomAccessIterator __middle,\n@@ -1465,6 +1473,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  for each @p n in the range @p [0,__last-__first).\n   */\n   template<typename _ForwardIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline _ForwardIterator\n     rotate(_ForwardIterator __first, _ForwardIterator __middle,\n \t   _ForwardIterator __last)\n@@ -1520,6 +1529,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// This is a helper function...\n   template<typename _ForwardIterator, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     _ForwardIterator\n     __partition(_ForwardIterator __first, _ForwardIterator __last,\n \t\t_Predicate __pred, forward_iterator_tag)\n@@ -1545,6 +1555,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// This is a helper function...\n   template<typename _BidirectionalIterator, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     _BidirectionalIterator\n     __partition(_BidirectionalIterator __first, _BidirectionalIterator __last,\n \t\t_Predicate __pred, bidirectional_iterator_tag)\n@@ -1699,6 +1710,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// This is a helper function for the sort routines.\n   template<typename _RandomAccessIterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     __heap_select(_RandomAccessIterator __first,\n \t\t  _RandomAccessIterator __middle,\n@@ -1714,6 +1726,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _InputIterator, typename _RandomAccessIterator,\n \t   typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     _RandomAccessIterator\n     __partial_sort_copy(_InputIterator __first, _InputIterator __last,\n \t\t\t_RandomAccessIterator __result_first,\n@@ -1768,6 +1781,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  The value returned is @p __result_first+N.\n   */\n   template<typename _InputIterator, typename _RandomAccessIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline _RandomAccessIterator\n     partial_sort_copy(_InputIterator __first, _InputIterator __last,\n \t\t      _RandomAccessIterator __result_first,\n@@ -1818,6 +1832,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   */\n   template<typename _InputIterator, typename _RandomAccessIterator,\n \t   typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     inline _RandomAccessIterator\n     partial_sort_copy(_InputIterator __first, _InputIterator __last,\n \t\t      _RandomAccessIterator __result_first,\n@@ -1931,6 +1946,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// This is a helper function...\n   template<typename _RandomAccessIterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     _RandomAccessIterator\n     __unguarded_partition(_RandomAccessIterator __first,\n \t\t\t  _RandomAccessIterator __last,\n@@ -1952,6 +1968,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// This is a helper function...\n   template<typename _RandomAccessIterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     inline _RandomAccessIterator\n     __unguarded_partition_pivot(_RandomAccessIterator __first,\n \t\t\t\t_RandomAccessIterator __last, _Compare __comp)\n@@ -1963,6 +1980,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _RandomAccessIterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     inline void\n     __partial_sort(_RandomAccessIterator __first,\n \t\t   _RandomAccessIterator __middle,\n@@ -1975,6 +1993,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// This is a helper function for the sort routine.\n   template<typename _RandomAccessIterator, typename _Size, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     __introsort_loop(_RandomAccessIterator __first,\n \t\t     _RandomAccessIterator __last,\n@@ -1998,6 +2017,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // sort\n \n   template<typename _RandomAccessIterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     inline void\n     __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n \t   _Compare __comp)\n@@ -2012,6 +2032,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _RandomAccessIterator, typename _Size, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,\n \t\t  _RandomAccessIterator __last, _Size __depth_limit,\n@@ -2728,6 +2749,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _RandomAccessIterator, typename _Distance,\n \t   typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     __chunk_insertion_sort(_RandomAccessIterator __first,\n \t\t\t   _RandomAccessIterator __last,\n@@ -2997,6 +3019,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  is the largest of the set, the smallest is generated and false returned.\n   */\n   template<typename _BidirectionalIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     next_permutation(_BidirectionalIterator __first,\n \t\t     _BidirectionalIterator __last)\n@@ -3029,6 +3052,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  smallest is generated and false returned.\n   */\n   template<typename _BidirectionalIterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     next_permutation(_BidirectionalIterator __first,\n \t\t     _BidirectionalIterator __last, _Compare __comp)\n@@ -3098,6 +3122,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  returned.\n   */\n   template<typename _BidirectionalIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     prev_permutation(_BidirectionalIterator __first,\n \t\t     _BidirectionalIterator __last)\n@@ -3130,6 +3155,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  the largest is generated and false returned.\n   */\n   template<typename _BidirectionalIterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     prev_permutation(_BidirectionalIterator __first,\n \t\t     _BidirectionalIterator __last, _Compare __comp)\n@@ -4757,6 +4783,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  @p stable_partition() if this is needed.\n   */\n   template<typename _ForwardIterator, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline _ForwardIterator\n     partition(_ForwardIterator __first, _ForwardIterator __last,\n \t      _Predicate   __pred)\n@@ -4790,6 +4817,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  the range @p [__middle,__last) then *j<*i and *k<*i are both false.\n   */\n   template<typename _RandomAccessIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline void\n     partial_sort(_RandomAccessIterator __first,\n \t\t _RandomAccessIterator __middle,\n@@ -4828,6 +4856,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  are both false.\n   */\n   template<typename _RandomAccessIterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     inline void\n     partial_sort(_RandomAccessIterator __first,\n \t\t _RandomAccessIterator __middle,\n@@ -4864,6 +4893,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  holds that *j < *i is false.\n   */\n   template<typename _RandomAccessIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline void\n     nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,\n \t\t_RandomAccessIterator __last)\n@@ -4903,6 +4933,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  holds that @p __comp(*j,*i) is false.\n   */\n   template<typename _RandomAccessIterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     inline void\n     nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,\n \t\t_RandomAccessIterator __last, _Compare __comp)\n@@ -4940,6 +4971,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  @p stable_sort() if this is needed.\n   */\n   template<typename _RandomAccessIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline void\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last)\n     {\n@@ -4970,6 +5002,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  @p stable_sort() if this is needed.\n   */\n   template<typename _RandomAccessIterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     inline void\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n \t _Compare __comp)"}, {"sha": "36bb9ccb777af24517d11752ef2e551f0fe6a9fc", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=7a91c710999d274c188fc0c504732a6f0b9059c1", "patch": "@@ -136,6 +136,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __iter_swap\n     {\n       template<typename _ForwardIterator1, typename _ForwardIterator2>\n+\t_GLIBCXX20_CONSTEXPR\n \tstatic void\n \titer_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)\n \t{\n@@ -151,6 +152,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __iter_swap<true>\n     {\n       template<typename _ForwardIterator1, typename _ForwardIterator2>\n+\t_GLIBCXX20_CONSTEXPR\n \tstatic void\n \titer_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)\n \t{\n@@ -170,6 +172,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  iterators themselves.\n   */\n   template<typename _ForwardIterator1, typename _ForwardIterator2>\n+    _GLIBCXX20_CONSTEXPR\n     inline void\n     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)\n     {\n@@ -216,6 +219,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  The ranges must not overlap.\n   */\n   template<typename _ForwardIterator1, typename _ForwardIterator2>\n+    _GLIBCXX20_CONSTEXPR\n     _ForwardIterator2\n     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n \t\t_ForwardIterator2 __first2)"}, {"sha": "7eb12f043217893c54227dfcdd5f2ac2875cc1d4", "filename": "libstdc++-v3/include/bits/stl_heap.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h?ref=7a91c710999d274c188fc0c504732a6f0b9059c1", "patch": "@@ -129,6 +129,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _RandomAccessIterator, typename _Distance, typename _Tp,\n \t   typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     __push_heap(_RandomAccessIterator __first,\n \t\t_Distance __holeIndex, _Distance __topIndex, _Tp __value,\n@@ -155,6 +156,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  [__first,__last) is a valid heap.\n   */\n   template<typename _RandomAccessIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline void\n     push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)\n     {\n@@ -190,6 +192,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  performed using comp.\n   */\n   template<typename _RandomAccessIterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     inline void\n     push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,\n \t      _Compare __comp)\n@@ -215,6 +218,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _RandomAccessIterator, typename _Distance,\n \t   typename _Tp, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,\n \t\t  _Distance __len, _Tp __value, _Compare __comp)\n@@ -244,6 +248,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _RandomAccessIterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     inline void\n     __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,\n \t       _RandomAccessIterator __result, _Compare& __comp)\n@@ -272,6 +277,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  heap.\n   */\n   template<typename _RandomAccessIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline void\n     pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)\n     {\n@@ -305,6 +311,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  heap.  Comparisons are made using comp.\n   */\n   template<typename _RandomAccessIterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     inline void\n     pop_heap(_RandomAccessIterator __first,\n \t     _RandomAccessIterator __last, _Compare __comp)\n@@ -327,6 +334,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _RandomAccessIterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,\n \t\t_Compare& __comp)\n@@ -361,6 +369,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  This operation makes the elements in [__first,__last) into a heap.\n   */\n   template<typename _RandomAccessIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline void\n     make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)\n     {\n@@ -387,6 +396,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  Comparisons are made using __comp.\n   */\n   template<typename _RandomAccessIterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     inline void\n     make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,\n \t      _Compare __comp)\n@@ -403,6 +413,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _RandomAccessIterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,\n \t\t_Compare& __comp)\n@@ -423,6 +434,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  This operation sorts the valid heap in the range [__first,__last).\n   */\n   template<typename _RandomAccessIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline void\n     sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)\n     {\n@@ -450,6 +462,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  Comparisons are made using __comp.\n   */\n   template<typename _RandomAccessIterator, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     inline void\n     sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,\n \t      _Compare __comp)"}, {"sha": "b31c26ab381e7f3c32bc2696e7cb759c70441ad8", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=7a91c710999d274c188fc0c504732a6f0b9059c1", "patch": "@@ -2695,6 +2695,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { };\n \n   template<typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     inline\n     typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,\n \t\t\t      is_move_constructible<_Tp>,\n@@ -2704,6 +2705,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t            is_nothrow_move_assignable<_Tp>>::value);\n \n   template<typename _Tp, size_t _Nm>\n+    _GLIBCXX20_CONSTEXPR\n     inline\n     typename enable_if<__is_swappable<_Tp>::value>::type\n     swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])"}, {"sha": "7f7d05fd8f204b794691e23b2576d491b49f8130", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=7a91c710999d274c188fc0c504732a6f0b9059c1", "patch": "@@ -154,6 +154,7 @@\n #define __cpp_lib_bind_front 201907L\n #define __cpp_lib_bounded_array_traits 201902L\n #define __cpp_lib_constexpr_algorithms 201711L\n+#define __cpp_lib_constexpr_swap_algorithms 201806L\n #if __cpp_impl_destroying_delete\n # define __cpp_lib_destroying_delete 201806L\n #endif"}, {"sha": "07dd7fbfac1bf1ca30c68c99715a6ee4138eca00", "filename": "libstdc++-v3/testsuite/25_algorithms/headers/algorithm/synopsis.cc", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc?ref=7a91c710999d274c188fc0c504732a6f0b9059c1", "patch": "@@ -165,10 +165,12 @@ namespace std\n   // 25.2.2, swap:\n #if __cplusplus < 201103L\n   template<typename _Tp> \n+    _GLIBCXX20_CONSTEXPR\n     void \n     swap(_Tp&, _Tp& b);\n \n   template<typename _Tp, size_t _Nm>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     swap(_Tp (&)[_Nm], _Tp (&)[_Nm]);\n #else\n@@ -178,10 +180,12 @@ namespace std\n #endif\n \n   template<typename _FIter1, typename _FIter2>\n+    _GLIBCXX20_CONSTEXPR\n     _FIter2 \n     swap_ranges(_FIter1 first1, _FIter1, _FIter2);\n \n   template<typename _FIter1, typename _FIter2>\n+    _GLIBCXX20_CONSTEXPR\n     void \n     iter_swap(_FIter1, _FIter2 b);\n \n@@ -295,6 +299,7 @@ namespace std\n     unique_copy(_IIter, _IIter, _OIter, _BinaryPredicate);\n \n   template<typename _BIter>\n+    _GLIBCXX20_CONSTEXPR\n     void \n     reverse(_BIter, _BIter);\n \n@@ -304,6 +309,7 @@ namespace std\n     reverse_copy(_BIter, _BIter, _OIter);\n \n   template<typename _FIter>\n+    _GLIBCXX20_CONSTEXPR\n     void \n     rotate(_FIter, _FIter, _FIter);\n \n@@ -322,6 +328,7 @@ namespace std\n \n   // 25.2.12, partitions:\n   template<typename _BIter, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     _BIter \n     partition(_BIter, _BIter, _Predicate);\n \n@@ -332,10 +339,12 @@ namespace std\n   // 25.3, sorting and related operations:\n   // 25.3.1, sorting:\n   template<typename _RAIter>\n+    _GLIBCXX20_CONSTEXPR\n     void \n     sort(_RAIter, _RAIter);\n \n   template<typename _RAIter, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     void \n     sort(_RAIter, _RAIter, _Compare);\n \n@@ -348,26 +357,32 @@ namespace std\n     stable_sort(_RAIter, _RAIter, _Compare);\n \n   template<typename _RAIter>\n+    _GLIBCXX20_CONSTEXPR\n     void \n     partial_sort(_RAIter, _RAIter, _RAIter);\n \n   template<typename _RAIter, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     void \n     partial_sort(_RAIter, _RAIter, _RAIter, _Compare);\n \n   template<typename _IIter, typename _RAIter>\n+    _GLIBCXX20_CONSTEXPR\n     _RAIter\n     partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter);\n \n   template<typename _IIter, typename _RAIter, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     _RAIter\n     partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter, _Compare);\n \n   template<typename _RAIter>\n+    _GLIBCXX20_CONSTEXPR\n     void \n     nth_element(_RAIter, _RAIter, _RAIter);\n \n   template<typename _RAIter, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     void \n     nth_element(_RAIter, _RAIter, _RAIter, _Compare);\n \n@@ -490,34 +505,42 @@ namespace std\n \n   // 25.3.6, heap operations:\n   template<typename _RAIter>\n+    _GLIBCXX20_CONSTEXPR\n     void \n     push_heap(_RAIter, _RAIter);\n \n   template<typename _RAIter, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     void \n     push_heap(_RAIter, _RAIter, _Compare);\n \n   template<typename _RAIter>\n+    _GLIBCXX20_CONSTEXPR\n     void \n     pop_heap(_RAIter, _RAIter);\n \n   template<typename _RAIter, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     void \n     pop_heap(_RAIter, _RAIter, _Compare);\n \n   template<typename _RAIter>\n+    _GLIBCXX20_CONSTEXPR\n     void \n     make_heap(_RAIter, _RAIter);\n \n   template<typename _RAIter, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     void \n     make_heap(_RAIter, _RAIter, _Compare);\n \n   template<typename _RAIter>\n+    _GLIBCXX20_CONSTEXPR\n     void \n     sort_heap(_RAIter, _RAIter);\n \n   template<typename _RAIter, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     void \n     sort_heap(_RAIter, _RAIter, _Compare);\n \n@@ -668,18 +691,22 @@ namespace std\n \n   // 25.3.9, permutations\n   template<typename _BIter>\n+    _GLIBCXX20_CONSTEXPR\n     bool \n     next_permutation(_BIter, _BIter);\n \n   template<typename _BIter, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     bool \n     next_permutation(_BIter, _BIter, _Compare);\n \n   template<typename _BIter>\n+    _GLIBCXX20_CONSTEXPR\n     bool \n     prev_permutation(_BIter, _BIter);\n \n   template<typename _BIter, typename _Compare>\n+    _GLIBCXX20_CONSTEXPR\n     bool \n     prev_permutation(_BIter, _BIter, _Compare);\n }"}, {"sha": "9444bf4904158a9a27deb15d2f707d6a7e2d55d0", "filename": "libstdc++-v3/testsuite/25_algorithms/iter_swap/constexpr.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fiter_swap%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fiter_swap%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fiter_swap%2Fconstexpr.cc?ref=7a91c710999d274c188fc0c504732a6f0b9059c1", "patch": "@@ -0,0 +1,42 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_swap_algorithms\n+# error \"Feature-test macro for constexpr swap algorithms missing\"\n+#elif __cpp_lib_constexpr_swap_algorithms < 201806L\n+# error \"Feature-test macro for constexpr swap algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  auto ok = true;\n+\n+  std::array<int, 12> ar0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+\n+  std::iter_swap(ar0.begin() + 2, ar0.begin() + 5);\n+\n+  return ok = ar0[2] == 5 && ar0[5] == 2;\n+}\n+\n+static_assert(test());"}, {"sha": "426310a731775e3b9f9d0aea4ec078bd50b6818c", "filename": "libstdc++-v3/testsuite/25_algorithms/make_heap/constexpr.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmake_heap%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmake_heap%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmake_heap%2Fconstexpr.cc?ref=7a91c710999d274c188fc0c504732a6f0b9059c1", "patch": "@@ -0,0 +1,47 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_swap_algorithms\n+# error \"Feature-test macro for constexpr swap algorithms missing\"\n+#elif __cpp_lib_constexpr_swap_algorithms < 201806L\n+# error \"Feature-test macro for constexpr swap algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  auto ok = true;\n+\n+  std::array<int, 23>\n+  ah{{0,\n+      1, 2,\n+      3, 4, 5, 6,\n+      7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22}};\n+\n+  std::make_heap(ah.begin(), ah.begin() + 17);\n+  ok = ok && std::is_heap(ah.begin(), ah.begin() + 17);\n+\n+  return ok;\n+}\n+\n+static_assert(test());"}, {"sha": "4b5c21850fe145ec7d6351d5a38df96128d33aec", "filename": "libstdc++-v3/testsuite/25_algorithms/next_permutation/constexpr.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnext_permutation%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnext_permutation%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnext_permutation%2Fconstexpr.cc?ref=7a91c710999d274c188fc0c504732a6f0b9059c1", "patch": "@@ -0,0 +1,42 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_swap_algorithms\n+# error \"Feature-test macro for constexpr swap algorithms missing\"\n+#elif __cpp_lib_constexpr_swap_algorithms < 201806L\n+# error \"Feature-test macro for constexpr swap algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  auto ok = true;\n+\n+  std::array<int, 12> ar0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+\n+  std::next_permutation(ar0.begin(), ar0.end());\n+\n+  return ok = ar0[11] == 10 && ar0[10] == 11;\n+}\n+\n+static_assert(test());"}, {"sha": "1c4307478c6041035225843e1f65730bf93a8c7a", "filename": "libstdc++-v3/testsuite/25_algorithms/nth_element/constexpr.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2Fconstexpr.cc?ref=7a91c710999d274c188fc0c504732a6f0b9059c1", "patch": "@@ -0,0 +1,47 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_swap_algorithms\n+# error \"Feature-test macro for constexpr swap algorithms missing\"\n+#elif __cpp_lib_constexpr_swap_algorithms < 201806L\n+# error \"Feature-test macro for constexpr swap algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  auto ok = true;\n+\n+  std::array<int, 12> ar0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+\n+  std::nth_element(ar0.begin(), ar0.begin() + 5, ar0.end());\n+  ok = ok && ar0[5] == 5;\n+\n+  std::sort(ar0.begin(), ar0.end(), std::greater<>());\n+  std::nth_element(ar0.begin(), ar0.begin() + 5, ar0.end(), std::greater<>());\n+  ok = ok && ar0[5] == 6;\n+\n+  return ok;\n+}\n+\n+static_assert(test());"}, {"sha": "b31be716830fc81b897dcfb2cb071ed967843d1e", "filename": "libstdc++-v3/testsuite/25_algorithms/partial_sort/constexpr.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2Fconstexpr.cc?ref=7a91c710999d274c188fc0c504732a6f0b9059c1", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_swap_algorithms\n+# error \"Feature-test macro for constexpr swap algorithms missing\"\n+#elif __cpp_lib_constexpr_swap_algorithms < 201806L\n+# error \"Feature-test macro for constexpr swap algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  auto ok = true;\n+\n+  std::array<int, 12> ar0{{0, 1, 7, 8, 9, 2, 3, 4, 5, 6, 10, 11}};\n+\n+  std::partial_sort(ar0.begin(), ar0.begin() + 5, ar0.end());\n+  ok = ok && ar0[0] == 0 && ar0[4] == 4;\n+\n+  std::partial_sort(ar0.begin(), ar0.begin() + 5, ar0.end(), std::greater<>());\n+  ok = ok && ar0[0] == 11 && ar0[4] == 7;\n+\n+  return ok;\n+}\n+\n+static_assert(test());"}, {"sha": "b7f538f4bef255ecd94ef75683beda0e43edba08", "filename": "libstdc++-v3/testsuite/25_algorithms/partial_sort_copy/constexpr.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort_copy%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort_copy%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort_copy%2Fconstexpr.cc?ref=7a91c710999d274c188fc0c504732a6f0b9059c1", "patch": "@@ -0,0 +1,47 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_swap_algorithms\n+# error \"Feature-test macro for constexpr swap algorithms missing\"\n+#elif __cpp_lib_constexpr_swap_algorithms < 201806L\n+# error \"Feature-test macro for constexpr swap algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  auto ok = true;\n+\n+  const std::array<int, 12> ar0{{0, 7, 8, 9, 1, 2, 5, 6, 10, 3, 4, 11}};\n+  std::array<int, 12> or0{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};\n+\n+  std::partial_sort_copy(ar0.begin() + 5, ar0.begin() + 10,\n+\t\t\t or0.begin(), or0.begin() + 5);\n+\n+  std::partial_sort_copy(ar0.begin() + 5, ar0.begin() + 10,\n+\t\t\t or0.begin(), or0.begin() + 5, std::greater<>());\n+\n+  return ok;\n+}\n+\n+static_assert(test());"}, {"sha": "bd678afd0f5ffc83ff34a43a382b0456d9c42322", "filename": "libstdc++-v3/testsuite/25_algorithms/partition/constexpr.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition%2Fconstexpr.cc?ref=7a91c710999d274c188fc0c504732a6f0b9059c1", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_swap_algorithms\n+# error \"Feature-test macro for constexpr swap algorithms missing\"\n+#elif __cpp_lib_constexpr_swap_algorithms < 201806L\n+# error \"Feature-test macro for constexpr swap algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  auto ok = true;\n+\n+  std::array<int, 12> ar0{{10, 0, 5, 1, 2, 6, 7, 8, 3, 4, 9, 11}};\n+\n+  auto iter1 = std::partition(ar0.begin(), ar0.end(),\n+\t\t\t      [](int i){ return i < 7; });\n+  ok = ok && *iter1 == 8;\n+\n+  return ok;\n+}\n+\n+static_assert(test());"}, {"sha": "ff9ca7bb71ea53b82f566ac15c38ae4bea63268b", "filename": "libstdc++-v3/testsuite/25_algorithms/pop_heap/constexpr.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpop_heap%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpop_heap%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpop_heap%2Fconstexpr.cc?ref=7a91c710999d274c188fc0c504732a6f0b9059c1", "patch": "@@ -0,0 +1,53 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_swap_algorithms\n+# error \"Feature-test macro for constexpr swap algorithms missing\"\n+#elif __cpp_lib_constexpr_swap_algorithms < 201806L\n+# error \"Feature-test macro for constexpr swap algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  auto ok = true;\n+\n+  std::array<int, 23>\n+  ah{{0,\n+      1, 2,\n+      3, 4, 5, 6,\n+      7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22}};\n+\n+  std::make_heap(ah.begin(), ah.end());\n+  ok = ok && std::is_heap(ah.begin(), ah.end());\n+\n+  std::pop_heap(ah.begin(), ah.end());\n+  std::pop_heap(ah.begin(), ah.end() - 1);\n+  std::pop_heap(ah.begin(), ah.end() - 2);\n+  ok = ok && std::is_heap(ah.begin(), ah.end() - 3)\n+\t  && !std::is_heap(ah.begin(), ah.end());\n+\n+  return ok;\n+}\n+\n+static_assert(test());"}, {"sha": "a3a038c743c4a964a8bc68ccf8443a458642a069", "filename": "libstdc++-v3/testsuite/25_algorithms/prev_permutation/constexpr.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fprev_permutation%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fprev_permutation%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fprev_permutation%2Fconstexpr.cc?ref=7a91c710999d274c188fc0c504732a6f0b9059c1", "patch": "@@ -0,0 +1,42 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_swap_algorithms\n+# error \"Feature-test macro for constexpr swap algorithms missing\"\n+#elif __cpp_lib_constexpr_swap_algorithms < 201806L\n+# error \"Feature-test macro for constexpr swap algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  auto ok = true;\n+\n+  std::array<int, 12> ar0{{1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+\n+  std::prev_permutation(ar0.begin(), ar0.end());\n+\n+  return ok = ar0[0] == 0;\n+}\n+\n+static_assert(test());"}, {"sha": "04b5688d05c086c40bf529675ed9cf35de8aac43", "filename": "libstdc++-v3/testsuite/25_algorithms/push_heap/constexpr.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpush_heap%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpush_heap%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpush_heap%2Fconstexpr.cc?ref=7a91c710999d274c188fc0c504732a6f0b9059c1", "patch": "@@ -0,0 +1,52 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_swap_algorithms\n+# error \"Feature-test macro for constexpr swap algorithms missing\"\n+#elif __cpp_lib_constexpr_swap_algorithms < 201806L\n+# error \"Feature-test macro for constexpr swap algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  auto ok = true;\n+\n+  std::array<int, 23>\n+  ah{{0,\n+      1, 2,\n+      3, 4, 5, 6,\n+      7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22}};\n+\n+  std::make_heap(ah.begin(), ah.end() - 3);\n+  ok = ok && std::is_heap(ah.begin(), ah.end() - 3);\n+\n+  std::push_heap(ah.begin(), ah.end() - 2);\n+  std::push_heap(ah.begin(), ah.end() - 1);\n+  std::push_heap(ah.begin(), ah.end());\n+  ok = ok && std::is_heap(ah.begin(), ah.end());\n+\n+  return ok;\n+}\n+\n+static_assert(test());"}, {"sha": "8e1065b50ee56e40bddcabf63c8e2f6321ef4d15", "filename": "libstdc++-v3/testsuite/25_algorithms/reverse/constexpr.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freverse%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freverse%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freverse%2Fconstexpr.cc?ref=7a91c710999d274c188fc0c504732a6f0b9059c1", "patch": "@@ -0,0 +1,41 @@\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_swap_algorithms\n+# error \"Feature-test macro for constexpr swap algorithms missing\"\n+#elif __cpp_lib_constexpr_swap_algorithms < 201806L\n+# error \"Feature-test macro for constexpr swap algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  auto ok = true;\n+\n+  std::array<int, 12> ar0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+\n+  std::reverse(ar0.begin() + 2, ar0.begin() + 9);\n+\n+  return ar0[2] == 8 && ar0[8] == 2;\n+}\n+\n+static_assert(test());"}, {"sha": "b5862876290dacf3b65efca01fb1580e6447ec24", "filename": "libstdc++-v3/testsuite/25_algorithms/rotate/constexpr.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2Fconstexpr.cc?ref=7a91c710999d274c188fc0c504732a6f0b9059c1", "patch": "@@ -0,0 +1,41 @@\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_swap_algorithms\n+# error \"Feature-test macro for constexpr swap algorithms missing\"\n+#elif __cpp_lib_constexpr_swap_algorithms < 201806L\n+# error \"Feature-test macro for constexpr swap algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  auto ok = true;\n+\n+  std::array<int, 12> ar0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+\n+  std::rotate(ar0.begin(), ar0.begin() + 5, ar0.end());\n+\n+  return ar0[0] == 5 && ar0[5] == 10;\n+}\n+\n+static_assert(test());"}, {"sha": "7b91b75fce92ae3ba2ec9ddf15ff7bf17ee01ddd", "filename": "libstdc++-v3/testsuite/25_algorithms/sort/constexpr.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2Fconstexpr.cc?ref=7a91c710999d274c188fc0c504732a6f0b9059c1", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_swap_algorithms\n+# error \"Feature-test macro for constexpr swap algorithms missing\"\n+#elif __cpp_lib_constexpr_swap_algorithms < 201806L\n+# error \"Feature-test macro for constexpr swap algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  auto ok = true;\n+\n+  std::array<int, 12> ar0{{10, 0, 1, 2, 5, 6, 7, 8, 3, 4, 9, 11}};\n+\n+  std::sort(ar0.begin(), ar0.end());\n+  ok = ok && std::is_sorted(ar0.begin(), ar0.end());\n+\n+  std::sort(ar0.begin(), ar0.end(), std::greater<>());\n+  ok = ok && std::is_sorted(ar0.begin(), ar0.end(), std::greater<>());\n+\n+  return ok;\n+}\n+\n+static_assert(test());"}, {"sha": "fa6e30935422091f370832cd887d6bc28b593b77", "filename": "libstdc++-v3/testsuite/25_algorithms/sort_heap/constexpr.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort_heap%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort_heap%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort_heap%2Fconstexpr.cc?ref=7a91c710999d274c188fc0c504732a6f0b9059c1", "patch": "@@ -0,0 +1,56 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_swap_algorithms\n+# error \"Feature-test macro for constexpr swap algorithms missing\"\n+#elif __cpp_lib_constexpr_swap_algorithms < 201806L\n+# error \"Feature-test macro for constexpr swap algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  auto ok = true;\n+\n+  std::array<int, 23>\n+  ah{{0,\n+      1, 2,\n+      3, 4, 5, 6,\n+      7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22}};\n+\n+  std::make_heap(ah.begin(), ah.begin() + 17);\n+  ok = ok && std::is_heap(ah.begin(), ah.begin() + 17);\n+\n+  std::sort_heap(ah.begin(), ah.begin() + 17);\n+  ok = ok && std::is_sorted(ah.begin(), ah.begin() + 17);\n+\n+  std::make_heap(ah.begin(), ah.begin() + 17, std::greater<>());\n+  ok = ok && std::is_heap(ah.begin(), ah.begin() + 17, std::greater<>());\n+\n+  std::sort_heap(ah.begin(), ah.begin() + 17, std::greater<>());\n+  ok = ok && std::is_sorted(ah.begin(), ah.begin() + 17, std::greater<>());\n+\n+  return ok;\n+}\n+\n+static_assert(test());"}, {"sha": "7f2d1f8a9f2a1a0007bee2daf8c9311662eef81c", "filename": "libstdc++-v3/testsuite/25_algorithms/swap/constexpr.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fswap%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fswap%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fswap%2Fconstexpr.cc?ref=7a91c710999d274c188fc0c504732a6f0b9059c1", "patch": "@@ -0,0 +1,47 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+\n+#ifndef __cpp_lib_constexpr_swap_algorithms\n+# error \"Feature-test macro for constexpr swap algorithms missing\"\n+#elif __cpp_lib_constexpr_swap_algorithms < 201806L\n+# error \"Feature-test macro for constexpr swap algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  auto ok = true;\n+\n+  double asc = 3.1415;\n+  double bsc = 2.7182;\n+  std::swap(asc, bsc);\n+  ok = ok && asc == 2.7182 && bsc == 3.1415;\n+\n+  float arr[5]{0.0f, 1.0f, 2.0f, 3.0f, 4.0f};\n+  float brr[5]{5.0f, 6.0f, 7.0f, 8.0f, 9.0f};\n+  std::swap(arr, brr);\n+  ok = ok && arr[2] == 7.0f && brr[2] == 2.0f;\n+\n+  return ok;\n+}\n+\n+static_assert(test());"}, {"sha": "a99155bb1daef60f9e766d0410f687e9fdcaefb6", "filename": "libstdc++-v3/testsuite/25_algorithms/swap_ranges/constexpr.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fswap_ranges%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a91c710999d274c188fc0c504732a6f0b9059c1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fswap_ranges%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fswap_ranges%2Fconstexpr.cc?ref=7a91c710999d274c188fc0c504732a6f0b9059c1", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+#ifndef __cpp_lib_constexpr_swap_algorithms\n+# error \"Feature-test macro for constexpr swap algorithms missing\"\n+#elif __cpp_lib_constexpr_swap_algorithms < 201806L\n+# error \"Feature-test macro for constexpr swap algorithms has wrong value\"\n+#endif\n+\n+constexpr bool\n+test()\n+{\n+  auto ok = true;\n+\n+  std::array<int, 12> ar0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+  std::array<int, 12> ar1{{11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0}};\n+\n+  const auto out01 = std::swap_ranges(ar0.begin(), ar0.begin() + 5,\n+\t\t\t\t      ar1.begin() + 2);\n+\n+  return ok = ar0[0] == 9 && ar1[2] == 0;\n+}\n+\n+static_assert(test());"}]}