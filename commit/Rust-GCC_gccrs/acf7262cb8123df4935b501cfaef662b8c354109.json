{"sha": "acf7262cb8123df4935b501cfaef662b8c354109", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNmNzI2MmNiODEyM2RmNDkzNWI1MDFjZmFlZjY2MmI4YzM1NDEwOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1994-04-12T23:42:36Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1994-04-12T23:42:36Z"}, "message": "cccp.c: Don't implicitly wrap LOCAL_INCLUDE_DIR.\n\n        * cccp.c: Don't implicitly wrap LOCAL_INCLUDE_DIR.\n        (struct default_include): Add cxx_aware field.\n        (include_defaults_array): Ditto.\n        (main): Use cxx_aware field.\n\nFrom-SVN: r7041", "tree": {"sha": "1cf7586b4c5a7bf4a026fcc18bb43009e1fe49e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cf7586b4c5a7bf4a026fcc18bb43009e1fe49e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acf7262cb8123df4935b501cfaef662b8c354109", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acf7262cb8123df4935b501cfaef662b8c354109", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acf7262cb8123df4935b501cfaef662b8c354109", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acf7262cb8123df4935b501cfaef662b8c354109/comments", "author": null, "committer": null, "parents": [{"sha": "b1bbf0ed2cb7948495562ec8ce10899f876e7258", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1bbf0ed2cb7948495562ec8ce10899f876e7258", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1bbf0ed2cb7948495562ec8ce10899f876e7258"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "93835b7e63bb169909435a2d1fb8a612ef405bb2", "filename": "gcc/cccp.c", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acf7262cb8123df4935b501cfaef662b8c354109/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acf7262cb8123df4935b501cfaef662b8c354109/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=acf7262cb8123df4935b501cfaef662b8c354109", "patch": "@@ -564,39 +564,46 @@ struct file_name_list\n /* #include \"file\" looks in source file dir, then stack. */\n /* #include <file> just looks in the stack. */\n /* -I directories are added to the end, then the defaults are added. */\n-static struct default_include { char *fname; int cplusplus; } include_defaults_array[]\n+/* The */\n+static struct default_include {\n+  char *fname;\t\t\t/* The name of the directory.  */\n+  int cplusplus;\t\t/* Only look here if we're compiling C++.  */\n+  int cxx_aware;\t\t/* Includes in this directory don't need to\n+\t\t\t\t   be wrapped in extern \"C\" when compiling\n+\t\t\t\t   C++.  */\n+} include_defaults_array[]\n #ifdef INCLUDE_DEFAULTS\n   = INCLUDE_DEFAULTS;\n #else\n   = {\n     /* Pick up GNU C++ specific include files.  */\n-    { GPLUSPLUS_INCLUDE_DIR, 1},\n+    { GPLUSPLUS_INCLUDE_DIR, 1, 1 },\n #ifdef CROSS_COMPILE\n     /* This is the dir for fixincludes.  Put it just before\n        the files that we fix.  */\n-    { GCC_INCLUDE_DIR, 0},\n+    { GCC_INCLUDE_DIR, 0, 0 },\n     /* For cross-compilation, this dir name is generated\n        automatically in Makefile.in.  */\n-    { CROSS_INCLUDE_DIR, 0 },\n+    { CROSS_INCLUDE_DIR, 0, 0 },\n     /* This is another place that the target system's headers might be.  */\n-    { TOOL_INCLUDE_DIR, 0},\n+    { TOOL_INCLUDE_DIR, 0, 1 },\n #else /* not CROSS_COMPILE */\n-    /* This should be /use/local/include and should come before\n+    /* This should be /usr/local/include and should come before\n        the fixincludes-fixed header files.  */\n-    { LOCAL_INCLUDE_DIR, 0},\n+    { LOCAL_INCLUDE_DIR, 0, 1 },\n     /* This is here ahead of GCC_INCLUDE_DIR because assert.h goes here.\n        Likewise, behind LOCAL_INCLUDE_DIR, where glibc puts its assert.h.  */\n-    { TOOL_INCLUDE_DIR, 0},\n+    { TOOL_INCLUDE_DIR, 0, 1 },\n     /* This is the dir for fixincludes.  Put it just before\n        the files that we fix.  */\n-    { GCC_INCLUDE_DIR, 0},\n+    { GCC_INCLUDE_DIR, 0, 0 },\n     /* Some systems have an extra dir of include files.  */\n #ifdef SYSTEM_INCLUDE_DIR\n-    { SYSTEM_INCLUDE_DIR, 0},\n+    { SYSTEM_INCLUDE_DIR, 0, 0 },\n #endif\n-    { STANDARD_INCLUDE_DIR, 0},\n+    { STANDARD_INCLUDE_DIR, 0, 0 },\n #endif /* not CROSS_COMPILE */\n-    { 0, 0}\n+    { 0, 0, 0 }\n     };\n #endif /* no INCLUDE_DEFAULTS */\n \n@@ -1745,6 +1752,7 @@ main (argc, argv)\n \n \t  include_defaults[num_dirs].fname = savestring (nstore);\n \t  include_defaults[num_dirs].cplusplus = cplusplus;\n+\t  include_defaults[num_dirs].cxx_aware = 1;\n \t  num_dirs++;\n \t  if (*endp == '\\0')\n \t    break;\n@@ -1790,7 +1798,7 @@ main (argc, argv)\n \t    strcat (str, p->fname + default_len);\n \t    new->fname = str;\n \t    new->control_macro = 0;\n-\t    new->c_system_include_path = !p->cplusplus;\n+\t    new->c_system_include_path = !p->cxx_aware;\n \t    new->got_name_map = 0;\n \t    append_include_chain (new, new);\n \t    if (first_system_include == 0)\n@@ -1805,7 +1813,7 @@ main (argc, argv)\n \tstruct file_name_list *new\n \t  = (struct file_name_list *) xmalloc (sizeof (struct file_name_list));\n \tnew->control_macro = 0;\n-\tnew->c_system_include_path = !p->cplusplus;\n+\tnew->c_system_include_path = !p->cxx_aware;\n \tnew->fname = p->fname;\n \tnew->got_name_map = 0;\n \tappend_include_chain (new, new);"}]}