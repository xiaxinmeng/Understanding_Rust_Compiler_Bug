{"sha": "8597cab14b29f161d4847976f604058e0ac983ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU5N2NhYjE0YjI5ZjE2MWQ0ODQ3OTc2ZjYwNDA1OGUwYWM5ODNlYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-08-23T09:44:08Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-08-23T09:44:08Z"}, "message": "re PR c++/20420 (Incorrectly Accepts double declarations)\n\n/cp\n2012-08-23  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/20420\n\t* name-lookup.c (supplement_binding_1): Handle specially enums\n\tonly in class templates.\n\t(validate_nonmember_using_decl): Enforce 7.3.3/10 about duplicate\n\tusing declarations at function scope.\n\n/testsuite\n2012-08-23  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/20420\n\t* g++.dg/lookup/using53.C: New.\n\nFrom-SVN: r190618", "tree": {"sha": "2862f6b164d5a15639114c27d3cb1153d64a8bf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2862f6b164d5a15639114c27d3cb1153d64a8bf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8597cab14b29f161d4847976f604058e0ac983ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8597cab14b29f161d4847976f604058e0ac983ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8597cab14b29f161d4847976f604058e0ac983ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8597cab14b29f161d4847976f604058e0ac983ea/comments", "author": null, "committer": null, "parents": [{"sha": "fb489f55b58e5725bf04fbd26181c3c196fb5f32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb489f55b58e5725bf04fbd26181c3c196fb5f32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb489f55b58e5725bf04fbd26181c3c196fb5f32"}], "stats": {"total": 79, "additions": 77, "deletions": 2}, "files": [{"sha": "58e6e1f5bdfd086c8ce5623de5206179cad1ca75", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8597cab14b29f161d4847976f604058e0ac983ea/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8597cab14b29f161d4847976f604058e0ac983ea/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8597cab14b29f161d4847976f604058e0ac983ea", "patch": "@@ -1,3 +1,11 @@\n+2012-08-23  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/20420\n+\t* name-lookup.c (supplement_binding_1): Handle specially enums\n+\tonly in class templates.\n+\t(validate_nonmember_using_decl): Enforce 7.3.3/10 about duplicate\n+\tusing declarations at function scope.\n+\n 2012-08-21  Richard Guenther  <rguenther@suse.de>\n \n \t* cp-tree.h (TREE_INDIRECT_USING): Use TREE_LANG_FLAG_0 accessor."}, {"sha": "22bc5e7c0060d48ae82348c6efee0d133ef0cc60", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8597cab14b29f161d4847976f604058e0ac983ea/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8597cab14b29f161d4847976f604058e0ac983ea/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=8597cab14b29f161d4847976f604058e0ac983ea", "patch": "@@ -441,7 +441,8 @@ supplement_binding_1 (cxx_binding *binding, tree decl)\n \t     template in order to handle late matching of underlying\n \t     type on an opaque-enum-declaration followed by an\n \t     enum-specifier.  */\n-\t  || (TREE_CODE (TREE_TYPE (target_decl)) == ENUMERAL_TYPE\n+\t  || (processing_template_decl\n+\t      && TREE_CODE (TREE_TYPE (target_decl)) == ENUMERAL_TYPE\n \t      && TREE_CODE (TREE_TYPE (target_bval)) == ENUMERAL_TYPE\n \t      && (dependent_type_p (ENUM_UNDERLYING_TYPE\n \t\t\t\t    (TREE_TYPE (target_decl)))\n@@ -2420,7 +2421,15 @@ validate_nonmember_using_decl (tree decl, tree scope, tree name)\n   gcc_assert (DECL_P (decl));\n \n   /* Make a USING_DECL.  */\n-  return push_using_decl (scope, name);\n+  tree using_decl = push_using_decl (scope, name);\n+\n+  if (using_decl == NULL_TREE\n+      && at_function_scope_p ()\n+      && TREE_CODE (decl) == VAR_DECL)\n+    /* C++11 7.3.3/10.  */\n+    error (\"%qD is already declared in this scope\", name);\n+  \n+  return using_decl;\n }\n \n /* Process local and global using-declarations.  */"}, {"sha": "7e011ec2cbdfcd03200cf784abb7f601e2bb8526", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8597cab14b29f161d4847976f604058e0ac983ea/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8597cab14b29f161d4847976f604058e0ac983ea/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8597cab14b29f161d4847976f604058e0ac983ea", "patch": "@@ -1,3 +1,8 @@\n+2012-08-23  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/20420\n+\t* g++.dg/lookup/using53.C: New.\n+\n 2012-08-23  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* gcc.dg/fixed-point/convert.c: Split into manageable parts:"}, {"sha": "a108b50ef89d59a7d2bb903db45ac4c3210a3dd2", "filename": "gcc/testsuite/g++.dg/lookup/using53.C", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8597cab14b29f161d4847976f604058e0ac983ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing53.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8597cab14b29f161d4847976f604058e0ac983ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing53.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing53.C?ref=8597cab14b29f161d4847976f604058e0ac983ea", "patch": "@@ -0,0 +1,53 @@\n+// PR c++/20420\n+\n+class B\n+{\n+protected:\n+  enum E { E1, E2, E3 };\n+  struct S { int i; E e; };\n+};\n+\n+class D : private B\n+{\n+public:\n+  using B::E;       // { dg-message \"previous\" }\n+  using B::S;       // { dg-message \"previous\" }\n+\n+private:\n+  enum E {};        // { dg-error \"conflicts\" }\n+  struct S {};      // { dg-error \"conflicts\" }\n+};\n+\n+template<typename T>\n+class BT\n+{\n+protected:\n+  enum E { E1, E2, E3 };\n+  struct S { int i; E e; };\n+};\n+\n+template<typename T>\n+class DT : private BT<T>\n+{\n+public:\n+  using BT<T>::E;   // { dg-message \"previous\" }\n+  using BT<T>::S;   // { dg-message \"previous\" }\n+\n+private:\n+  enum E {};        // { dg-error \"conflicts\" }\n+  struct S {};      // { dg-error \"conflicts\" }\n+};\n+\n+template class DT<int>;\n+\n+namespace N\n+{\n+  int i;\n+}\n+\n+void\n+f ()\n+{\n+  using N::i;\n+  using N::i;       // { dg-error \"declared\" }\n+}"}]}