{"sha": "42bc61e05685cc6a4d96d9005dbab2e87351dddd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJiYzYxZTA1Njg1Y2M2YTRkOTZkOTAwNWRiYWIyZTg3MzUxZGRkZA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-06-30T09:55:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-06-30T09:55:34Z"}, "message": "tree-ssa-alias.c (walk_aliased_vdefs_1): Change interface to use ao_ref references.\n\n2009-06-30  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-alias.c (walk_aliased_vdefs_1): Change interface to\n\tuse ao_ref references.\n\t(walk_aliased_vdefs): Likewise.\n\t* tree-ssa-alias.h (walk_aliased_vdefs): Adjust prototype.\n\t* tree-ssa-dce.c (struct ref_data): Remove.\n\t(mark_aliased_reaching_defs_necessary_1): Use the ao_ref argument.\n\t(mark_aliased_reaching_defs_necessary): Adjust.\n\t(mark_all_reaching_defs_necessary_1): Likewise.\n\nFrom-SVN: r149086", "tree": {"sha": "2738597e7116e10ffc0882dfea2b58bdaafb9d6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2738597e7116e10ffc0882dfea2b58bdaafb9d6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42bc61e05685cc6a4d96d9005dbab2e87351dddd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42bc61e05685cc6a4d96d9005dbab2e87351dddd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42bc61e05685cc6a4d96d9005dbab2e87351dddd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42bc61e05685cc6a4d96d9005dbab2e87351dddd/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b6a1a144f4b12fdb674a1ac919906c08b8be8c37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6a1a144f4b12fdb674a1ac919906c08b8be8c37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6a1a144f4b12fdb674a1ac919906c08b8be8c37"}], "stats": {"total": 63, "additions": 34, "deletions": 29}, "files": [{"sha": "af585a45f30c47afdf5065ae2e5280c3bf886335", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42bc61e05685cc6a4d96d9005dbab2e87351dddd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42bc61e05685cc6a4d96d9005dbab2e87351dddd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=42bc61e05685cc6a4d96d9005dbab2e87351dddd", "patch": "@@ -1,3 +1,14 @@\n+2009-06-30  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-alias.c (walk_aliased_vdefs_1): Change interface to\n+\tuse ao_ref references.\n+\t(walk_aliased_vdefs): Likewise.\n+\t* tree-ssa-alias.h (walk_aliased_vdefs): Adjust prototype.\n+\t* tree-ssa-dce.c (struct ref_data): Remove.\n+\t(mark_aliased_reaching_defs_necessary_1): Use the ao_ref argument.\n+\t(mark_aliased_reaching_defs_necessary): Adjust.\n+\t(mark_all_reaching_defs_necessary_1): Likewise.\n+\n 2009-06-30  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR boostrap/40597"}, {"sha": "4d721877d02acec9d0166b63bb26a9db427211a2", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42bc61e05685cc6a4d96d9005dbab2e87351dddd/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42bc61e05685cc6a4d96d9005dbab2e87351dddd/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=42bc61e05685cc6a4d96d9005dbab2e87351dddd", "patch": "@@ -1427,8 +1427,8 @@ walk_non_aliased_vuses (ao_ref *ref, tree vuse,\n    The function returns the number of statements walked.  */\n \n static unsigned int\n-walk_aliased_vdefs_1 (tree ref, tree vdef,\n-\t\t      bool (*walker)(tree, tree, void *), void *data,\n+walk_aliased_vdefs_1 (ao_ref *ref, tree vdef,\n+\t\t      bool (*walker)(ao_ref *, tree, void *), void *data,\n \t\t      bitmap *visited, unsigned int cnt)\n {\n   do\n@@ -1455,7 +1455,7 @@ walk_aliased_vdefs_1 (tree ref, tree vdef,\n       /* ???  Do we want to account this to TV_ALIAS_STMT_WALK?  */\n       cnt++;\n       if ((!ref\n-\t   || stmt_may_clobber_ref_p (def_stmt, ref))\n+\t   || stmt_may_clobber_ref_p_1 (def_stmt, ref))\n \t  && (*walker) (ref, vdef, data))\n \treturn cnt;\n \n@@ -1465,8 +1465,8 @@ walk_aliased_vdefs_1 (tree ref, tree vdef,\n }\n \n unsigned int\n-walk_aliased_vdefs (tree ref, tree vdef,\n-\t\t    bool (*walker)(tree, tree, void *), void *data,\n+walk_aliased_vdefs (ao_ref *ref, tree vdef,\n+\t\t    bool (*walker)(ao_ref *, tree, void *), void *data,\n \t\t    bitmap *visited)\n {\n   bitmap local_visited = NULL;"}, {"sha": "2be903f31c5b52084846253aa55c60ec2884c3d7", "filename": "gcc/tree-ssa-alias.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42bc61e05685cc6a4d96d9005dbab2e87351dddd/gcc%2Ftree-ssa-alias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42bc61e05685cc6a4d96d9005dbab2e87351dddd/gcc%2Ftree-ssa-alias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.h?ref=42bc61e05685cc6a4d96d9005dbab2e87351dddd", "patch": "@@ -100,9 +100,9 @@ extern bool stmt_may_clobber_ref_p_1 (gimple, ao_ref *);\n extern void *walk_non_aliased_vuses (ao_ref *, tree,\n \t\t\t\t     void *(*)(ao_ref *, tree, void *),\n \t\t\t\t     void *(*)(ao_ref *, tree, void *), void *);\n-extern unsigned int walk_aliased_vdefs (tree, tree,\n-\t\t\t\t\tbool (*)(tree, tree, void *), void *,\n-\t\t\t\t\tbitmap *);\n+extern unsigned int walk_aliased_vdefs (ao_ref *, tree,\n+\t\t\t\t\tbool (*)(ao_ref *, tree, void *),\n+\t\t\t\t\tvoid *, bitmap *);\n extern struct ptr_info_def *get_ptr_info (tree);\n extern void dump_alias_info (FILE *);\n extern void debug_alias_info (void);"}, {"sha": "0cb8ac6afd879c8ea92ae0729bf4053c4a732f24", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42bc61e05685cc6a4d96d9005dbab2e87351dddd/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42bc61e05685cc6a4d96d9005dbab2e87351dddd/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=42bc61e05685cc6a4d96d9005dbab2e87351dddd", "patch": "@@ -452,13 +452,6 @@ ref_may_be_aliased (tree ref)\n \t   && !may_be_aliased (ref));\n }\n \n-struct ref_data {\n-  tree base;\n-  HOST_WIDE_INT size;\n-  HOST_WIDE_INT offset;\n-  HOST_WIDE_INT max_size;\n-};\n-\n static bitmap visited = NULL;\n static unsigned int longest_chain = 0;\n static unsigned int total_chain = 0;\n@@ -471,10 +464,10 @@ static bool chain_ovfl = false;\n    anymore.  DATA points to cached get_ref_base_and_extent data for REF.  */\n \n static bool\n-mark_aliased_reaching_defs_necessary_1 (tree ref, tree vdef, void *data)\n+mark_aliased_reaching_defs_necessary_1 (ao_ref *ref, tree vdef,\n+\t\t\t\t\tvoid *data ATTRIBUTE_UNUSED)\n {\n   gimple def_stmt = SSA_NAME_DEF_STMT (vdef);\n-  struct ref_data *refd = (struct ref_data *)data;\n \n   /* All stmts we visit are necessary.  */\n   mark_operand_necessary (vdef);\n@@ -485,22 +478,24 @@ mark_aliased_reaching_defs_necessary_1 (tree ref, tree vdef, void *data)\n     {\n       tree base, lhs = gimple_get_lhs (def_stmt);\n       HOST_WIDE_INT size, offset, max_size;\n+      ao_ref_base (ref);\n       base = get_ref_base_and_extent (lhs, &offset, &size, &max_size);\n       /* We can get MEM[symbol: sZ, index: D.8862_1] here,\n \t so base == refd->base does not always hold.  */\n-      if (base == refd->base)\n+      if (base == ref->base)\n \t{\n \t  /* For a must-alias check we need to be able to constrain\n \t     the accesses properly.  */\n \t  if (size != -1 && size == max_size\n-\t      && refd->max_size != -1)\n+\t      && ref->max_size != -1)\n \t    {\n-\t      if (offset <= refd->offset\n-\t\t  && offset + size >= refd->offset + refd->max_size)\n+\t      if (offset <= ref->offset\n+\t\t  && offset + size >= ref->offset + ref->max_size)\n \t\treturn true;\n \t    }\n \t  /* Or they need to be exactly the same.  */\n-\t  else if (operand_equal_p (ref, lhs, 0))\n+\t  else if (ref->ref\n+\t\t   && operand_equal_p (ref->ref, lhs, 0))\n \t    return true;\n \t}\n     }\n@@ -512,14 +507,13 @@ mark_aliased_reaching_defs_necessary_1 (tree ref, tree vdef, void *data)\n static void\n mark_aliased_reaching_defs_necessary (gimple stmt, tree ref)\n {\n-  struct ref_data refd;\n   unsigned int chain;\n+  ao_ref refd;\n   gcc_assert (!chain_ovfl);\n-  refd.base = get_ref_base_and_extent (ref, &refd.offset, &refd.size,\n-\t\t\t\t       &refd.max_size);\n-  chain = walk_aliased_vdefs (ref, gimple_vuse (stmt),\n+  ao_ref_init (&refd, ref);\n+  chain = walk_aliased_vdefs (&refd, gimple_vuse (stmt),\n \t\t\t      mark_aliased_reaching_defs_necessary_1,\n-\t\t\t      &refd, NULL);\n+\t\t\t      NULL, NULL);\n   if (chain > longest_chain)\n     longest_chain = chain;\n   total_chain += chain;\n@@ -532,8 +526,8 @@ mark_aliased_reaching_defs_necessary (gimple stmt, tree ref)\n    a non-aliased decl.  */\n \n static bool\n-mark_all_reaching_defs_necessary_1 (tree ref ATTRIBUTE_UNUSED,\n-\t\t\t\ttree vdef, void *data ATTRIBUTE_UNUSED)\n+mark_all_reaching_defs_necessary_1 (ao_ref *ref ATTRIBUTE_UNUSED,\n+\t\t\t\t    tree vdef, void *data ATTRIBUTE_UNUSED)\n {\n   gimple def_stmt = SSA_NAME_DEF_STMT (vdef);\n "}]}