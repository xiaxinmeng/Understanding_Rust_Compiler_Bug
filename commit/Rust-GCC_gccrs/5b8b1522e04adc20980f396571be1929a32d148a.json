{"sha": "5b8b1522e04adc20980f396571be1929a32d148a", "node_id": "C_kwDOANBUbNoAKDViOGIxNTIyZTA0YWRjMjA5ODBmMzk2NTcxYmUxOTI5YTMyZDE0OGE", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-09-27T10:01:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-09-28T10:31:46Z"}, "message": "tree-optimization/100112 - VN last_vuse and redundant store elimination\n\nThis avoids the last_vuse optimization hindering redundant store\nelimination by always also recording the original VUSE that was\nin effect on the load.\n\nIn stage3 gcc/*.o we have 3182752 times recorded a single\nentry and 903409 times two entries (that's ~20% overhead).\n\nWith just recording a single entry the number of hashtable lookups\ndone when walking the vuse->vdef links to find an earlier access\nis 28961618.  When recording the second entry this makes us find\nthat earlier for donwnstream redundant accesses, reducing the number\nof hashtable lookups to 25401052 (that's a ~10% reduction).\n\n2021-09-27  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/100112\n\t* tree-ssa-sccvn.c (visit_reference_op_load): Record the\n\treferece into the hashtable twice in case last_vuse is\n\tdifferent from the original vuse on the stmt.\n\n\t* gcc.dg/tree-ssa/ssa-fre-95.c: New testcase.", "tree": {"sha": "0d646656faaf9ab4b3f1842631747a7275256915", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d646656faaf9ab4b3f1842631747a7275256915"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b8b1522e04adc20980f396571be1929a32d148a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b8b1522e04adc20980f396571be1929a32d148a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b8b1522e04adc20980f396571be1929a32d148a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b8b1522e04adc20980f396571be1929a32d148a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f07769057c45ec9e751ab1c23e0fe4750102840", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f07769057c45ec9e751ab1c23e0fe4750102840", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f07769057c45ec9e751ab1c23e0fe4750102840"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "b0936be5e7756b2484352ca2993ebf2a730cf9db", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-95.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8b1522e04adc20980f396571be1929a32d148a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-95.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8b1522e04adc20980f396571be1929a32d148a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-95.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-95.c?ref=5b8b1522e04adc20980f396571be1929a32d148a", "patch": "@@ -0,0 +1,25 @@\n+/* PR100112 and dups.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-fre1-details -fdump-tree-optimized\" } */\n+\n+int *c, *b;\n+void foo()\n+{\n+  int *tem = b;\n+  *tem = 0;\n+  int *footem = c;\n+  c = footem;\n+}\n+\n+void bar()\n+{\n+  int *tem = b;\n+  int *bartem = c;\n+  *tem = 0;\n+  c = bartem;\n+}\n+\n+/* We should elide the redundant store in foo, in bar it is not redundant since\n+   the *tem = 0 store might alias.  */\n+/* { dg-final { scan-tree-dump \"Deleted redundant store c = footem\" \"fre1\" } } */ \n+/* { dg-final { scan-tree-dump \"c = bartem\" \"optimized\" } } */ "}, {"sha": "416a5252144b49b660dcb87a655dc8d5c76e7fc1", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8b1522e04adc20980f396571be1929a32d148a/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8b1522e04adc20980f396571be1929a32d148a/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=5b8b1522e04adc20980f396571be1929a32d148a", "patch": "@@ -5125,13 +5125,12 @@ static bool\n visit_reference_op_load (tree lhs, tree op, gimple *stmt)\n {\n   bool changed = false;\n-  tree last_vuse;\n   tree result;\n   vn_reference_t res;\n \n-  last_vuse = gimple_vuse (stmt);\n-  result = vn_reference_lookup (op, gimple_vuse (stmt),\n-\t\t\t\tdefault_vn_walk_kind, &res, true, &last_vuse);\n+  tree vuse = gimple_vuse (stmt);\n+  tree last_vuse = vuse;\n+  result = vn_reference_lookup (op, vuse, default_vn_walk_kind, &res, true, &last_vuse);\n \n   /* We handle type-punning through unions by value-numbering based\n      on offset and size of the access.  Be prepared to handle a\n@@ -5174,6 +5173,16 @@ visit_reference_op_load (tree lhs, tree op, gimple *stmt)\n     {\n       changed = set_ssa_val_to (lhs, lhs);\n       vn_reference_insert (op, lhs, last_vuse, NULL_TREE);\n+      if (vuse && SSA_VAL (last_vuse) != SSA_VAL (vuse))\n+\t{\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    {\n+\t      fprintf (dump_file, \"Using extra use virtual operand \");\n+\t      print_generic_expr (dump_file, last_vuse);\n+\t      fprintf (dump_file, \"\\n\");\n+\t    }\n+\t  vn_reference_insert (op, lhs, vuse, NULL_TREE);\n+\t}\n     }\n \n   return changed;"}]}