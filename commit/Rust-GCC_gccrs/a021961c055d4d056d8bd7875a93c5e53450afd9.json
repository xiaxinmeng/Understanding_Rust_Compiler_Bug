{"sha": "a021961c055d4d056d8bd7875a93c5e53450afd9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAyMTk2MWMwNTVkNGQwNTZkOGJkNzg3NWE5M2M1ZTUzNDUwYWZkOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-02-24T15:18:04Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-02-24T15:18:04Z"}, "message": "Add -flifetime-dse=1.\n\ngcc/\n\t* common.opt (flifetime-dse): Add -flifetime-dse=1.\ngcc/cp/\n\t* decl.c (start_preparsed_function): Condition ctor clobber on\n\tflag_lifetime_dse > 1.\n\nFrom-SVN: r233672", "tree": {"sha": "66d1ebef423cc0ae9ed52f94ce534df41312b6f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66d1ebef423cc0ae9ed52f94ce534df41312b6f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a021961c055d4d056d8bd7875a93c5e53450afd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a021961c055d4d056d8bd7875a93c5e53450afd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a021961c055d4d056d8bd7875a93c5e53450afd9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a021961c055d4d056d8bd7875a93c5e53450afd9/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "28577b86833bdb2e5241790f233fd2503ab4f880", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28577b86833bdb2e5241790f233fd2503ab4f880", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28577b86833bdb2e5241790f233fd2503ab4f880"}], "stats": {"total": 47, "additions": 44, "deletions": 3}, "files": [{"sha": "913abc87b8ecd558a23fef12a60a42f0dbbadab0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a021961c055d4d056d8bd7875a93c5e53450afd9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a021961c055d4d056d8bd7875a93c5e53450afd9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a021961c055d4d056d8bd7875a93c5e53450afd9", "patch": "@@ -1,3 +1,7 @@\n+2016-02-24  Jason Merrill  <jason@redhat.com>\n+\n+\t* common.opt (flifetime-dse): Add -flifetime-dse=1.\n+\n 2016-02-24  Richard Biener  <rguenther@suse.de>\n \tJakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "e91f2257e55d45a16a5b75aeb0900cf71dfbfbca", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a021961c055d4d056d8bd7875a93c5e53450afd9/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a021961c055d4d056d8bd7875a93c5e53450afd9/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=a021961c055d4d056d8bd7875a93c5e53450afd9", "patch": "@@ -1946,10 +1946,13 @@ Common Ignore\n Does nothing. Preserved for backward compatibility.\n \n flifetime-dse\n-Common Report Var(flag_lifetime_dse) Init(1) Optimization\n+Common Report Var(flag_lifetime_dse,2) Init(2) Optimization\n Tell DSE that the storage for a C++ object is dead when the constructor\n starts and when the destructor finishes.\n \n+flifetime-dse=\n+Common Joined RejectNegative UInteger Var(flag_lifetime_dse) Optimization\n+\n flive-range-shrinkage\n Common Report Var(flag_live_range_shrinkage) Init(0) Optimization\n Relief of register pressure through live range shrinkage."}, {"sha": "6212d4343db34f84a276b2958c2105e874c0b657", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a021961c055d4d056d8bd7875a93c5e53450afd9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a021961c055d4d056d8bd7875a93c5e53450afd9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a021961c055d4d056d8bd7875a93c5e53450afd9", "patch": "@@ -1,5 +1,8 @@\n 2016-02-24  Jason Merrill  <jason@redhat.com>\n \n+\t* decl.c (start_preparsed_function): Condition ctor clobber on\n+\tflag_lifetime_dse > 1.\n+\n \t* cp-gimplify.c (cp_fold): Don't fold constexpr calls if -fno-inline.\n \n 2016-02-19  Jason Merrill  <jason@redhat.com>"}, {"sha": "2df3398d6c03e2d8a0c9ffb507a6f32c06b2c6f7", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a021961c055d4d056d8bd7875a93c5e53450afd9/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a021961c055d4d056d8bd7875a93c5e53450afd9/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=a021961c055d4d056d8bd7875a93c5e53450afd9", "patch": "@@ -14104,7 +14104,8 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n   store_parm_decls (current_function_parms);\n \n   if (!processing_template_decl\n-      && flag_lifetime_dse && DECL_CONSTRUCTOR_P (decl1)\n+      && (flag_lifetime_dse > 1)\n+      && DECL_CONSTRUCTOR_P (decl1)\n       /* We can't clobber safely for an implicitly-defined default constructor\n \t because part of the initialization might happen before we enter the\n \t constructor, via AGGR_INIT_ZERO_FIRST (c++/68006).  */"}, {"sha": "b8b2e7060d9d4a28a2a2fbe93cf5eb917e1fa789", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a021961c055d4d056d8bd7875a93c5e53450afd9/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a021961c055d4d056d8bd7875a93c5e53450afd9/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a021961c055d4d056d8bd7875a93c5e53450afd9", "patch": "@@ -6809,7 +6809,10 @@ value, and any changes during the lifetime of the object are dead when\n the object is destroyed.  Normally dead store elimination will take\n advantage of this; if your code relies on the value of the object\n storage persisting beyond the lifetime of the object, you can use this\n-flag to disable this optimization.\n+flag to disable this optimization.  To preserve stores before the\n+constructor starts (e.g. because your operator new clears the object\n+storage) but still treat the object as dead after the destructor you,\n+can use -flifetime-dse=1.\n \n @item -flive-range-shrinkage\n @opindex flive-range-shrinkage"}, {"sha": "c72444a6d65ef7d94695f4b175c8724ec3fe4b9e", "filename": "gcc/testsuite/g++.dg/opt/flifetime-dse4.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a021961c055d4d056d8bd7875a93c5e53450afd9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fflifetime-dse4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a021961c055d4d056d8bd7875a93c5e53450afd9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fflifetime-dse4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fflifetime-dse4.C?ref=a021961c055d4d056d8bd7875a93c5e53450afd9", "patch": "@@ -0,0 +1,27 @@\n+// { dg-options \"-O3 -flifetime-dse=1\" }\n+// { dg-do run }\n+\n+typedef __SIZE_TYPE__ size_t;\n+inline void * operator new (size_t, void *p) { return p; }\n+\n+struct A\n+{\n+  int i;\n+  A() {}\n+  ~A() {}\n+};\n+\n+int main()\n+{\n+  int ar[1] = { 42 };\n+  A* ap = new(ar) A;\n+\n+  // With -flifetime-dse=1 we retain the old value.\n+  if (ap->i != 42) __builtin_abort();\n+\n+  ap->i = 42;\n+  ap->~A();\n+\n+  // When the destructor ends the object no longer exists.\n+  if (ar[0] == 42) __builtin_abort();\n+}"}]}