{"sha": "77b1138b71b96989ec25521a19a4afc6f968227d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdiMTEzOGI3MWI5Njk4OWVjMjU1MjFhMTlhNGFmYzZmOTY4MjI3ZA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2011-11-16T17:02:44Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2011-11-16T17:02:44Z"}, "message": "re PR target/49641 (Wrong code for ARMv4T and stmia)\n\n2011-11-16  Richard Earnshaw  <rearnsha@arm.com>\n\t    Bernd Schmidt <bernds@coudesourcery.com>\n\t    Sebastian Huber <sebastian.huber@embedded-brains.de>\n\n\tPR target/49641\n\t* config/arm/arm.c (store_multiple_sequence): Avoid cases where\n\tthe base reg is stored iff compiling for Thumb1.\n\n\t* gcc.target/arm/pr49641.c: New test.\n\nCo-Authored-By: Bernd Schmidt <bernds@codesourcery.com>\nCo-Authored-By: Sebastian Huber <sebastian.huber@embedded-brains.de>\n\nFrom-SVN: r181416", "tree": {"sha": "40c993e2c788c6a07c472cfc5ae12c96ea68853f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40c993e2c788c6a07c472cfc5ae12c96ea68853f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77b1138b71b96989ec25521a19a4afc6f968227d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77b1138b71b96989ec25521a19a4afc6f968227d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77b1138b71b96989ec25521a19a4afc6f968227d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77b1138b71b96989ec25521a19a4afc6f968227d/comments", "author": null, "committer": null, "parents": [{"sha": "3b04e1e4c42c56f2c276e8480e80391451dbe5fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b04e1e4c42c56f2c276e8480e80391451dbe5fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b04e1e4c42c56f2c276e8480e80391451dbe5fc"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "7bb2b600804a7ad7a42c899cc19a470f136201d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77b1138b71b96989ec25521a19a4afc6f968227d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77b1138b71b96989ec25521a19a4afc6f968227d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=77b1138b71b96989ec25521a19a4afc6f968227d", "patch": "@@ -1,3 +1,11 @@\n+2011-11-16  Richard Earnshaw  <rearnsha@arm.com>\n+\t    Bernd Schmidt <bernds@coudesourcery.com>\n+\t    Sebastian Huber <sebastian.huber@embedded-brains.de>\n+\n+\tPR target/49641\n+\t* config/arm/arm.c (store_multiple_sequence): Avoid cases where\n+\tthe base reg is stored iff compiling for Thumb1.\n+\n 2011-11-16  Razya Ladelsky  <razya@il.ibm.com>\n \t\n \tPR tree-optimization/49960"}, {"sha": "4846d7277f5ad19d47541e7de41c4e051aa8d727", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77b1138b71b96989ec25521a19a4afc6f968227d/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77b1138b71b96989ec25521a19a4afc6f968227d/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=77b1138b71b96989ec25521a19a4afc6f968227d", "patch": "@@ -10247,6 +10247,9 @@ store_multiple_sequence (rtx *operands, int nops, int nops_total,\n   rtx base_reg_rtx = NULL;\n   int i, stm_case;\n \n+  /* Write back of base register is currently only supported for Thumb 1.  */\n+  int base_writeback = TARGET_THUMB1;\n+\n   /* Can only handle up to MAX_LDM_STM_OPS insns at present, though could be\n      easily extended if required.  */\n   gcc_assert (nops >= 2 && nops <= MAX_LDM_STM_OPS);\n@@ -10304,7 +10307,9 @@ store_multiple_sequence (rtx *operands, int nops, int nops_total,\n \t  /* If it isn't an integer register, then we can't do this.  */\n \t  if (unsorted_regs[i] < 0\n \t      || (TARGET_THUMB1 && unsorted_regs[i] > LAST_LO_REGNUM)\n-\t      || (TARGET_THUMB2 && unsorted_regs[i] == base_reg)\n+\t      /* The effects are unpredictable if the base register is\n+\t\t both updated and stored.  */\n+\t      || (base_writeback && unsorted_regs[i] == base_reg)\n \t      || (TARGET_THUMB2 && unsorted_regs[i] == SP_REGNUM)\n \t      || unsorted_regs[i] > 14)\n \t    return 0;"}, {"sha": "a6e32596f7048a7a32293d88bd03baa67acdb45e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77b1138b71b96989ec25521a19a4afc6f968227d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77b1138b71b96989ec25521a19a4afc6f968227d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=77b1138b71b96989ec25521a19a4afc6f968227d", "patch": "@@ -1,3 +1,10 @@\n+2011-11-16  Richard Earnshaw  <rearnsha@arm.com>\n+\t    Bernd Schmidt <bernds@coudesourcery.com>\n+\t    Sebastian Huber <sebastian.huber@embedded-brains.de>\n+\n+\tPR target/49641\n+\t* gcc.target/arm/pr49641.c: New test.\n+\n 2011-11-16  Razya Ladelsky  <razya@il.ibm.com>\n \n         PR tree-optimization/49960"}, {"sha": "7f9b3769c1a1b6c4299be5ba0a588de33547c48d", "filename": "gcc/testsuite/gcc.target/arm/pr49641.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77b1138b71b96989ec25521a19a4afc6f968227d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr49641.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77b1138b71b96989ec25521a19a4afc6f968227d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr49641.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr49641.c?ref=77b1138b71b96989ec25521a19a4afc6f968227d", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mthumb -O2\" } */\n+/* { dg-require-effective-target arm_thumb1_ok } */\n+/* { dg-final { scan-assembler-not \"stmia\\[\\\\t \\]*r3!\\[^\\\\n]*r3\" } } */\n+typedef struct {\n+  void *t1, *t2, *t3;\n+} z;\n+extern volatile int y;\n+static inline void foo(z *x) {\n+  x->t1 = &x->t2;\n+  x->t2 = ((void *)0);\n+  x->t3 = &x->t1;\n+}\n+extern z v;\n+void bar (void) {\n+   y = 0;\n+   foo(&v);\n+}"}]}