{"sha": "754d1a92e65d7a8fdfdc36e2b72e8abfdcf70f5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU0ZDFhOTJlNjVkN2E4ZmRmZGMzNmUyYjcyZThhYmZkY2Y3MGY1Yg==", "commit": {"author": {"name": "Teemu Torma", "email": "tot@trema.com", "date": "1998-03-11T12:07:25Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1998-03-11T12:07:25Z"}, "message": "Patch from Teemu Torma to fix Solaris 2.6 EH failures.\n\n\t* gthr.h: Changed the comment about return values.\n\t* gthr-solaris.h (__gthread_once): Do not use errno; return the\n\terror number instead of -1.\n\t(__gthread_key_create): Any non-zero return value is an error.\n\t* libgcc2.c (eh_context_initialize): Check for non-zero return\n\tvalue from __gthread_once.\n\tCheck that the value of get_eh_context was really changed.\n\nFrom-SVN: r18480", "tree": {"sha": "722397066de1f2780c4301c0a26524b7d9b93805", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/722397066de1f2780c4301c0a26524b7d9b93805"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/754d1a92e65d7a8fdfdc36e2b72e8abfdcf70f5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/754d1a92e65d7a8fdfdc36e2b72e8abfdcf70f5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/754d1a92e65d7a8fdfdc36e2b72e8abfdcf70f5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/754d1a92e65d7a8fdfdc36e2b72e8abfdcf70f5b/comments", "author": null, "committer": null, "parents": [{"sha": "ffacfc7cb67870796368b9dfa000d0e1f36ab879", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffacfc7cb67870796368b9dfa000d0e1f36ab879", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffacfc7cb67870796368b9dfa000d0e1f36ab879"}], "stats": {"total": 31, "additions": 22, "deletions": 9}, "files": [{"sha": "cb234fce105f06370cf25feee66aae2525295874", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754d1a92e65d7a8fdfdc36e2b72e8abfdcf70f5b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754d1a92e65d7a8fdfdc36e2b72e8abfdcf70f5b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=754d1a92e65d7a8fdfdc36e2b72e8abfdcf70f5b", "patch": "@@ -1,3 +1,13 @@\n+Wed Mar 11 12:05:20 1998  Teemu Torma  <tot@trema.com>\n+\n+\t* gthr.h: Changed the comment about return values.\n+\t* gthr-solaris.h (__gthread_once): Do not use errno; return the\n+\terror number instead of -1. \n+\t(__gthread_key_create): Any non-zero return value is an error.\n+\t* libgcc2.c (eh_context_initialize): Check for non-zero return\n+\tvalue from __gthread_once.\n+\tCheck that the value of get_eh_context was really changed.\n+\n Wed Mar 11 18:26:25 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* sh.h (LOOP_ALIGN): Only align when optimizing."}, {"sha": "a6f669c2e096bf0c66de3c0302fd979fb856b0f6", "filename": "gcc/gthr-solaris.h", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754d1a92e65d7a8fdfdc36e2b72e8abfdcf70f5b/gcc%2Fgthr-solaris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754d1a92e65d7a8fdfdc36e2b72e8abfdcf70f5b/gcc%2Fgthr-solaris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-solaris.h?ref=754d1a92e65d7a8fdfdc36e2b72e8abfdcf70f5b", "patch": "@@ -88,15 +88,13 @@ __gthread_once (__gthread_once_t *once, void (*func) ())\n     return -1;\n \n   if (once == 0 || func == 0)\n-    {\n-      errno = EINVAL;\n-      return -1;\n-    }\n+    return EINVAL;\n \n   if (once->once == 0)\n     {\n-      if (mutex_lock (&once->mutex) != 0)\n-\treturn -1;\n+      int status = mutex_lock (&once->mutex);\n+      if (status != 0)\n+\treturn status;\n       if (once->once == 0)\n \t{\n \t  (*func) ();\n@@ -113,7 +111,7 @@ __gthread_key_create (__gthread_key_t *key, void (*dtor) (void *))\n   /* Solaris 2.5 contains thr_* routines no-op in libc, so test if we actually\n      got a reasonable key value, and if not, fail. */\n   *key = -1;\n-  if (thr_keycreate (key, dtor) == -1 || *key == -1)\n+  if (thr_keycreate (key, dtor) != 0 || *key == -1)\n     return -1;\n   else\n     return 0;"}, {"sha": "9c5365426bfd287f1ff95107a88e2c100ed4266d", "filename": "gcc/gthr.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754d1a92e65d7a8fdfdc36e2b72e8abfdcf70f5b/gcc%2Fgthr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754d1a92e65d7a8fdfdc36e2b72e8abfdcf70f5b/gcc%2Fgthr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr.h?ref=754d1a92e65d7a8fdfdc36e2b72e8abfdcf70f5b", "patch": "@@ -65,7 +65,8 @@ Boston, MA 02111-1307, USA.  */\n      int __gthread_mutex_trylock (__gthread_mutex_t *mutex);\n      int __gthread_mutex_unlock (__gthread_mutex_t *mutex);\n \n-   All functions returning int should return 0 on success, -1 on error.\n+   All functions returning int should return zero on success or the error\n+   number.  If the operation is not supported, -1 is returned.\n \n    Currently supported threads packages are\n      POSIX threads with -D_PTHREADS"}, {"sha": "f1032a582391a2a76a3d5cba888b0399ebc13a5f", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754d1a92e65d7a8fdfdc36e2b72e8abfdcf70f5b/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754d1a92e65d7a8fdfdc36e2b72e8abfdcf70f5b/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=754d1a92e65d7a8fdfdc36e2b72e8abfdcf70f5b", "patch": "@@ -3132,7 +3132,11 @@ eh_context_initialize ()\n #if __GTHREADS\n \n   static __gthread_once_t once = __GTHREAD_ONCE_INIT;\n-  if (__gthread_once (&once, eh_threads_initialize) == -1)\n+  /* Make sure that get_eh_context does not point to us anymore.\n+     Some systems have dummy thread routines in their libc that\n+     return a success (Solaris 2.6 for example). */\n+  if (__gthread_once (&once, eh_threads_initialize) != 0\n+      || get_eh_context == &eh_context_initialize)\n     {\n       /* Use static version of EH context. */\n       get_eh_context = &eh_context_static;"}]}