{"sha": "3055829a4addde1fa3542c8070c87e2dd17217fc", "node_id": "C_kwDOANBUbNoAKDMwNTU4MjlhNGFkZGRlMWZhMzU0MmM4MDcwYzg3ZTJkZDE3MjE3ZmM", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-10-29T00:17:49Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-10-29T00:17:49Z"}, "message": "Daily bump.", "tree": {"sha": "9fa230671efaef09bc757da419c0802e91d08ad2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fa230671efaef09bc757da419c0802e91d08ad2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3055829a4addde1fa3542c8070c87e2dd17217fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3055829a4addde1fa3542c8070c87e2dd17217fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3055829a4addde1fa3542c8070c87e2dd17217fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3055829a4addde1fa3542c8070c87e2dd17217fc/comments", "author": null, "committer": null, "parents": [{"sha": "49237fe6ef677a81eae701f937546210c90b5914", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49237fe6ef677a81eae701f937546210c90b5914", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49237fe6ef677a81eae701f937546210c90b5914"}], "stats": {"total": 374, "additions": 373, "deletions": 1}, "files": [{"sha": "27e2c4963ee218443abe71349db3acba79044990", "filename": "gcc/ChangeLog", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3055829a4addde1fa3542c8070c87e2dd17217fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3055829a4addde1fa3542c8070c87e2dd17217fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3055829a4addde1fa3542c8070c87e2dd17217fc", "patch": "@@ -1,3 +1,104 @@\n+2022-10-28  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/aarch64/aarch64.cc (aarch64_setup_incoming_varargs):\n+\tCheck TYPE_NO_NAMED_ARGS_STDARG_P.\n+\t* config/alpha/alpha.cc (alpha_setup_incoming_varargs): Likewise.\n+\t* config/arc/arc.cc (arc_setup_incoming_varargs): Likewise.\n+\t* config/arm/arm.cc (arm_setup_incoming_varargs): Likewise.\n+\t* config/csky/csky.cc (csky_setup_incoming_varargs): Likewise.\n+\t* config/epiphany/epiphany.cc (epiphany_setup_incoming_varargs):\n+\tLikewise.\n+\t* config/fr30/fr30.cc (fr30_setup_incoming_varargs): Likewise.\n+\t* config/frv/frv.cc (frv_setup_incoming_varargs): Likewise.\n+\t* config/ft32/ft32.cc (ft32_setup_incoming_varargs): Likewise.\n+\t* config/i386/i386.cc (ix86_setup_incoming_varargs): Likewise.\n+\t* config/ia64/ia64.cc (ia64_setup_incoming_varargs): Likewise.\n+\t* config/loongarch/loongarch.cc\n+\t(loongarch_setup_incoming_varargs): Likewise.\n+\t* config/m32r/m32r.cc (m32r_setup_incoming_varargs): Likewise.\n+\t* config/mcore/mcore.cc (mcore_setup_incoming_varargs): Likewise.\n+\t* config/mips/mips.cc (mips_setup_incoming_varargs): Likewise.\n+\t* config/mmix/mmix.cc (mmix_setup_incoming_varargs): Likewise.\n+\t* config/nds32/nds32.cc (nds32_setup_incoming_varargs): Likewise.\n+\t* config/nios2/nios2.cc (nios2_setup_incoming_varargs): Likewise.\n+\t* config/riscv/riscv.cc (riscv_setup_incoming_varargs): Likewise.\n+\t* config/rs6000/rs6000-call.cc (setup_incoming_varargs): Likewise.\n+\t* config/sh/sh.cc (sh_setup_incoming_varargs): Likewise.\n+\t* config/visium/visium.cc (visium_setup_incoming_varargs):\n+\tLikewise.\n+\t* config/vms/vms-c.cc (vms_c_common_override_options): Do not set\n+\tflag_allow_parameterless_variadic_functions.\n+\t* doc/invoke.texi (-fallow-parameterless-variadic-functions): Do\n+\tnot document option.\n+\t* function.cc (assign_parms): Call assign_parms_setup_varargs for\n+\tTYPE_NO_NAMED_ARGS_STDARG_P case.\n+\t* ginclude/stdarg.h [__STDC_VERSION__ > 201710L] (va_start): Make\n+\tvariadic macro.  Pass second argument of 0 to __builtin_va_start.\n+\t* target.def (setup_incoming_varargs): Update documentation.\n+\t* doc/tm.texi: Regenerate.\n+\t* tree-core.h (struct tree_type_common): Add\n+\tno_named_args_stdarg_p.\n+\t* tree-streamer-in.cc (unpack_ts_type_common_value_fields): Unpack\n+\tTYPE_NO_NAMED_ARGS_STDARG_P.\n+\t* tree-streamer-out.cc (pack_ts_type_common_value_fields): Pack\n+\tTYPE_NO_NAMED_ARGS_STDARG_P.\n+\t* tree.cc (type_cache_hasher::equal): Compare\n+\tTYPE_NO_NAMED_ARGS_STDARG_P.\n+\t(build_function_type): Add argument no_named_args_stdarg_p.\n+\t(build_function_type_list_1, build_function_type_array_1)\n+\t(reconstruct_complex_type): Update calls to build_function_type.\n+\t(stdarg_p, prototype_p): Return true for (...) functions.\n+\t(gimple_canonical_types_compatible_p): Compare\n+\tTYPE_NO_NAMED_ARGS_STDARG_P.\n+\t* tree.h (TYPE_NO_NAMED_ARGS_STDARG_P): New.\n+\t(build_function_type): Update prototype.\n+\n+2022-10-28  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\tPR tree-optimization/107346\n+\t* tree-vect-data-refs.cc (vect_check_gather_scatter): Reject offsets\n+\tthat aren't multiples of BITS_PER_UNIT.\n+\n+2022-10-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107407\n+\t* tree-ssa-dse.cc (dse_classify_store): Perform backedge\n+\tvarying index check when collecting PHI uses rather than\n+\tafter optimizing processing of the candidate defs.\n+\n+2022-10-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107447\n+\t* tree-ssa-loop-im.cc (determine_max_movement): Do not\n+\thoist returns-twice calls.\n+\n+2022-10-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107435\n+\t* tree-vect-loop.cc (vectorizable_recurr): Convert initial\n+\tvalue to vector component type.\n+\n+2022-10-28  Julian Brown  <julian@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/90115\n+\t* omp-low.cc (oacc_privatization_candidate_p): Artificial vars are not\n+\tprivatization candidates.\n+\n+2022-10-28  Martin Liska  <mliska@suse.cz>\n+\n+\tPR sanitizer/107298\n+\t* doc/invoke.texi: Document sanitizers can trigger warnings.\n+\n+2022-10-28  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* doc/makefile.texi (Makefile Targets): Document\n+\t'distclean-stage[N]'.\n+\n+2022-10-28  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range.cc (range_tests_floats): Use HONOR_INFINITIES.\n+\n 2022-10-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/aarch64/aarch64.h (DONT_USE_BUILTIN_SETJMP): Delete."}, {"sha": "06511cc68c5391a55cd31432a875fd7ac94c40eb", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3055829a4addde1fa3542c8070c87e2dd17217fc/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3055829a4addde1fa3542c8070c87e2dd17217fc/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=3055829a4addde1fa3542c8070c87e2dd17217fc", "patch": "@@ -1 +1 @@\n-20221028\n+20221029"}, {"sha": "32e8fb18eadf6a6971073879d3d19b5c0854ec89", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3055829a4addde1fa3542c8070c87e2dd17217fc/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3055829a4addde1fa3542c8070c87e2dd17217fc/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=3055829a4addde1fa3542c8070c87e2dd17217fc", "patch": "@@ -1,3 +1,20 @@\n+2022-10-28  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.cc (def_fn_type): Call build_function_type for\n+\tzero-argument variable-argument function.\n+\t(c_common_nodes_and_builtins): Build default_function_type with\n+\tbuild_function_type.\n+\t* c.opt (fallow-parameterless-variadic-functions): Mark as ignored\n+\toption.\n+\n+2022-10-28  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/61469\n+\t* c-common.h (ENUM_UNDERLYING_TYPE, ENUM_FIXED_UNDERLYING_TYPE_P):\n+\tNew.  Moved from cp/cp-tree.h.\n+\t* c-warn.cc (warnings_for_convert_and_check): Do not consider\n+\tconversions to enum with underlying type bool to overflow.\n+\n 2022-10-26  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/106393"}, {"sha": "4e71198c50139c6fe157d868a95199273d883c3b", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3055829a4addde1fa3542c8070c87e2dd17217fc/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3055829a4addde1fa3542c8070c87e2dd17217fc/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=3055829a4addde1fa3542c8070c87e2dd17217fc", "patch": "@@ -1,3 +1,86 @@\n+2022-10-28  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-decl.cc (grokdeclarator): Pass\n+\targ_info->no_named_args_stdarg_p to build_function_type.\n+\t(grokparms): Check arg_info->no_named_args_stdarg_p before\n+\tconverting () to (void).\n+\t(build_arg_info): Initialize no_named_args_stdarg_p.\n+\t(get_parm_info): Set no_named_args_stdarg_p.\n+\t(start_function): Pass TYPE_NO_NAMED_ARGS_STDARG_P to\n+\tbuild_function_type.\n+\t(store_parm_decls): Count (...) functions as prototyped.\n+\t* c-parser.cc (c_parser_direct_declarator): Allow '...' after open\n+\tparenthesis to start parameter list.\n+\t(c_parser_parms_list_declarator): Always allow '...' with no\n+\targuments, call pedwarn_c11 and set no_named_args_stdarg_p.\n+\t* c-tree.h (struct c_arg_info): Add field no_named_args_stdarg_p.\n+\t* c-typeck.cc (composite_type): Handle\n+\tTYPE_NO_NAMED_ARGS_STDARG_P.\n+\t(function_types_compatible_p): Compare\n+\tTYPE_NO_NAMED_ARGS_STDARG_P.\n+\n+2022-10-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-parser.cc (c_parser_omp_all_clauses): Allow optional\n+\tcomma before the first clause.\n+\t(c_parser_omp_allocate, c_parser_omp_atomic, c_parser_omp_depobj,\n+\tc_parser_omp_flush, c_parser_omp_scan_loop_body,\n+\tc_parser_omp_ordered, c_finish_omp_declare_variant,\n+\tc_parser_omp_declare_target, c_parser_omp_declare_reduction,\n+\tc_parser_omp_requires, c_parser_omp_error,\n+\tc_parser_omp_assumption_clauses): Likewise.\n+\n+2022-10-28  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/61469\n+\t* c-convert.cc (c_convert): Handle enums with underlying boolean\n+\ttype like bool.\n+\t* c-decl.cc (shadow_tag_warned): Allow shadowing declarations for\n+\tenums with enum type specifier, but give errors for storage class\n+\tspecifiers, qualifiers or alignment specifiers in non-definition\n+\tdeclarations of such enums.\n+\t(grokdeclarator): Give error for non-definition use of type\n+\tspecifier with an enum type specifier.\n+\t(parser_xref_tag): Add argument has_enum_type_specifier.  Pass it\n+\tto lookup_tag and use it to set ENUM_FIXED_UNDERLYING_TYPE_P.\n+\t(xref_tag): Update call to parser_xref_tag.\n+\t(start_enum): Add argument fixed_underlying_type.  Complete enum\n+\ttype with a fixed underlying type given in the definition.  Give\n+\terror for defining without a fixed underlying type in the\n+\tdefinition if one was given in a prior declaration.  Do not mark\n+\tenums with fixed underlying type as packed for -fshort-enums.\n+\tStore the enum type in the_enum.\n+\t(finish_enum): Do not adjust types of values or check their range\n+\tfor an enum with a fixed underlying type.  Set underlying type of\n+\tenum and variants.\n+\t(build_enumerator): Check enumeration constants for enum with\n+\tfixed underlying type against that type and convert to that type.\n+\tIncrement in the underlying integer type, with handling for bool.\n+\t(c_simulate_enum_decl): Update call to start_enum.\n+\t(declspecs_add_type): Set specs->enum_type_specifier_ref_p.\n+\t* c-objc-common.cc (c_get_alias_set): Use ENUM_UNDERLYING_TYPE\n+\trather than recomputing an underlying type based on size.\n+\t* c-parser.cc (c_parser_declspecs)\n+\t(c_parser_struct_or_union_specifier, c_parser_typeof_specifier):\n+\tSet has_enum_type_specifier for type specifiers.\n+\t(c_parser_enum_specifier): Handle enum type specifiers.\n+\t(c_parser_struct_or_union_specifier): Update call to\n+\tparser_xref_tag.\n+\t(c_parser_omp_atomic): Check for boolean increment or decrement\n+\tusing C_BOOLEAN_TYPE_P.\n+\t* c-tree.h (C_BOOLEAN_TYPE_P): New.\n+\t(struct c_typespec): Add has_enum_type_specifier.\n+\t(struct c_declspecs): Add enum_type_specifier_ref_p.\n+\t(struct c_enum_contents): Add enum_type.\n+\t(start_enum, parser_xref_tag): Update prototypes.\n+\t* c-typeck.cc (composite_type): Allow for enumerated types\n+\tcompatible with bool.\n+\t(common_type, comptypes_internal, perform_integral_promotions):\n+\tUse ENUM_UNDERLYING_TYPE.\n+\t(parser_build_binary_op, build_unary_op, convert_for_assignment)\n+\t(c_finish_return, c_start_switch, build_binary_op): Check for\n+\tboolean types using C_BOOLEAN_TYPE_P.\n+\n 2022-10-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/107358"}, {"sha": "82629ef3a59d4dae914465a8df05b13e3a55ce24", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3055829a4addde1fa3542c8070c87e2dd17217fc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3055829a4addde1fa3542c8070c87e2dd17217fc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3055829a4addde1fa3542c8070c87e2dd17217fc", "patch": "@@ -1,3 +1,29 @@\n+2022-10-28  Marek Polacek  <polacek@redhat.com>\n+\n+\t* call.cc (maybe_warn_dangling_reference): Enable the warning in\n+\tsystem headers if the decl isn't in a system header.\n+\n+2022-10-28  Jason Merrill  <jason@redhat.com>\n+\n+\t* decl.cc (grokdeclarator): Call decl_attributes before do_friend.\n+\n+2022-10-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.cc (cp_parser_omp_all_clauses): Allow optional comma\n+\tbefore the first clause even in pragma syntax.\n+\t(cp_parser_omp_allocate, cp_parser_omp_atomic, cp_parser_omp_depobj,\n+\tcp_parser_omp_flush, cp_parser_omp_scan_loop_body,\n+\tcp_parser_omp_ordered, cp_parser_omp_assumption_clauses,\n+\tcp_finish_omp_declare_variant, cp_parser_omp_declare_target,\n+\tcp_parser_omp_declare_reduction_exprs, cp_parser_omp_requires,\n+\tcp_parser_omp_error): Likewise.\n+\n+2022-10-28  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/61469\n+\t* cp-tree.h (ENUM_FIXED_UNDERLYING_TYPE_P, ENUM_UNDERLYING_TYPE):\n+\tRemove.  Moved to c-common.h.\n+\n 2022-10-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/107379"}, {"sha": "7b2d93b098b4b2b7aa334a9190a1a7b3928db4cd", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3055829a4addde1fa3542c8070c87e2dd17217fc/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3055829a4addde1fa3542c8070c87e2dd17217fc/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3055829a4addde1fa3542c8070c87e2dd17217fc", "patch": "@@ -1,3 +1,8 @@\n+2022-10-28  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* trans-types.cc (gfc_get_function_type): Do not use\n+\tbuild_varargs_function_type_vec for unprototyped function.\n+\n 2022-10-26  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/103413"}, {"sha": "b350d50d8651f77e0800ef86adf111143e0b47ab", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3055829a4addde1fa3542c8070c87e2dd17217fc/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3055829a4addde1fa3542c8070c87e2dd17217fc/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=3055829a4addde1fa3542c8070c87e2dd17217fc", "patch": "@@ -1,3 +1,16 @@\n+2022-10-28  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* lto-common.cc (compare_tree_sccs_1): Compare\n+\tTYPE_NO_NAMED_ARGS_STDARG_P.\n+\n+2022-10-28  Martin Liska  <mliska@suse.cz>\n+\n+\t* lto-dump.cc (dump_list): Remove trailing return.\n+\t(dump_symbol): Likewise.\n+\t(dump_body): Filter name based on mangled name.\n+\t(dump_tool_help): Use GIMPLE wording.\n+\t(lto_main): Update wording.\n+\n 2022-10-27  Martin Liska  <mliska@suse.cz>\n \n \tPR lto/107418"}, {"sha": "2584520eaf36b80d66f9d71c5a16279598a1b458", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3055829a4addde1fa3542c8070c87e2dd17217fc/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3055829a4addde1fa3542c8070c87e2dd17217fc/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=3055829a4addde1fa3542c8070c87e2dd17217fc", "patch": "@@ -1,3 +1,8 @@\n+2022-10-28  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* objc-next-runtime-abi-01.cc (build_next_objc_exception_stuff):\n+\tUse build_function_type to build type of objc_setjmp_decl.\n+\n 2022-10-07  Martin Liska  <mliska@suse.cz>\n \n \t* objc-gnu-runtime-abi-01.cc (generate_static_references):"}, {"sha": "90c3b923f5714045b4f936fef9c03e5164fc93ae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3055829a4addde1fa3542c8070c87e2dd17217fc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3055829a4addde1fa3542c8070c87e2dd17217fc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3055829a4addde1fa3542c8070c87e2dd17217fc", "patch": "@@ -1,3 +1,74 @@\n+2022-10-28  Marek Polacek  <polacek@redhat.com>\n+\n+\t* g++.dg/warn/Wdangling-reference4.C: New test.\n+\n+2022-10-28  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c11-stdarg-1.c, gcc.dg/c11-stdarg-2.c,\n+\tgcc.dg/c11-stdarg-3.c, gcc.dg/c2x-stdarg-1.c,\n+\tgcc.dg/c2x-stdarg-2.c, gcc.dg/c2x-stdarg-3.c,\n+\tgcc.dg/c2x-stdarg-4.c, gcc.dg/gnu2x-stdarg-1.c,\n+\tgcc.dg/torture/c2x-stdarg-split-1a.c,\n+\tgcc.dg/torture/c2x-stdarg-split-1b.c: New tests.\n+\t* gcc.dg/Wold-style-definition-2.c, gcc.dg/format/sentinel-1.c:\n+\tUpdate expected diagnostics.\n+\t* gcc.dg/c2x-nullptr-1.c (test5): Cast unused parameter to (void).\n+\t* gcc.dg/diagnostic-token-ranges.c: Use -pedantic.  Expect warning\n+\tin place of error.\n+\n+2022-10-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107407\n+\t* gcc.dg/torture/pr107407.c: New testcase.\n+\n+2022-10-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107447\n+\t* gcc.dg/torture/pr107447.c: New testcase.\n+\n+2022-10-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107435\n+\t* gcc.dg/torture/pr107435.c: New testcase.\n+\n+2022-10-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/directive-1.c: New test.\n+\t* c-c++-common/gomp/clauses-6.c: New test.\n+\t* c-c++-common/gomp/declare-variant-2.c (f75a): Declare.\n+\t(f75): Use f75a as variant instead of f1 and don't expect error.\n+\t* g++.dg/gomp/clause-4.C (foo): Don't expect error on comma\n+\tbefore first clause.\n+\t* gcc.dg/gomp/clause-2.c (foo): Likewise.\n+\n+2022-10-28  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/pr100756.c: Adjust for larger vectors.\n+\n+2022-10-28  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* gcc.dg/vect/bb-slp-cond-1.c: Fix target selector syntax.\n+\n+2022-10-28  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR testsuite/107240\n+\t* gcc.dg/vect/vect-bitfield-read-1.c: Add effective target checking\n+\tvect_shift.\n+\t* gcc.dg/vect/vect-bitfield-read-3.c: Likewise.\n+\t* gcc.dg/vect/vect-bitfield-read-5.c: Likewise.\n+\t* gcc.dg/vect/vect-bitfield-read-6.c: Likewise.\n+\t* gcc.dg/vect/vect-bitfield-read-7.c: Likewise.\n+\t* gcc.dg/vect/vect-bitfield-read-2.c: Add effective target checking\n+\tvect_shift and replace vect_int with vect_long_long.\n+\t* gcc.dg/vect/vect-bitfield-read-4.c: Likewise.\n+\n+2022-10-28  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/61469\n+\t* gcc.dg/c11-enum-4.c, gcc.dg/c11-enum-5.c, gcc.dg/c11-enum-6.c,\n+\tgcc.dg/c2x-enum-6.c, gcc.dg/c2x-enum-7.c, gcc.dg/c2x-enum-8.c,\n+\tgcc.dg/gnu2x-enum-1.c: New tests.\n+\n 2022-10-27  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR target/107172"}, {"sha": "477b35fa47a11917f0a2278246ce09adf37cce73", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3055829a4addde1fa3542c8070c87e2dd17217fc/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3055829a4addde1fa3542c8070c87e2dd17217fc/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=3055829a4addde1fa3542c8070c87e2dd17217fc", "patch": "@@ -1,3 +1,13 @@\n+2022-10-28  Julian Brown  <julian@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/90115\n+\t* testsuite/libgomp.oacc-fortran/declare-1.f90: Adjust scan output.\n+\t* testsuite/libgomp.oacc-fortran/host_data-5.F90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/if-1.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/print-1.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/privatized-ref-2.f90: Likewise.\n+\n 2022-10-24  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* plugin/plugin-nvptx.c (nvptx_open_device): Initialize"}, {"sha": "79ede724dc2dcb50c0752712a076fe05e853c90c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3055829a4addde1fa3542c8070c87e2dd17217fc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3055829a4addde1fa3542c8070c87e2dd17217fc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3055829a4addde1fa3542c8070c87e2dd17217fc", "patch": "@@ -1,3 +1,44 @@\n+2022-10-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/fs_path.h (path::filename()): Fix dangling\n+\treference.\n+\n+2022-10-28  Arsen Arsenovi\u0107  <arsen@aarsen.me>\n+\n+\t* include/std/functional: Make placeholders inline, if possible.\n+\n+2022-10-28  Arsen Arsenovi\u0107  <arsen@aarsen.me>\n+\n+\t* configure.ac: Stop generating gstdint.h.\n+\t* src/c++11/compatibility-atomic-c++0x.cc: Stop using gstdint.h.\n+\t* Makefile.in: Regenerate.\n+\t* aclocal.m4: Regenerate.\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* doc/Makefile.in: Regenerate.\n+\t* include/Makefile.in: Regenerate.\n+\t* libsupc++/Makefile.in: Regenerate.\n+\t* po/Makefile.in: Regenerate.\n+\t* python/Makefile.in: Regenerate.\n+\t* src/Makefile.in: Regenerate.\n+\t* src/c++11/Makefile.in: Regenerate.\n+\t* src/c++17/Makefile.in: Regenerate.\n+\t* src/c++20/Makefile.in: Regenerate.\n+\t* src/c++98/Makefile.in: Regenerate.\n+\t* src/filesystem/Makefile.in: Regenerate.\n+\t* src/libbacktrace/Makefile.in: Regenerate.\n+\t* testsuite/Makefile.in: Regenerate.\n+\n+2022-10-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/107376\n+\t* include/bits/regex_executor.h (_Executor::_Executor): Use same\n+\tallocator for _M_cur_results and _M_results.\n+\t* include/bits/regex_executor.tcc (_Executor::_M_main_dispatch):\n+\tPrevent possibly incorrect allocator propagating to\n+\t_M_cur_results.\n+\t* testsuite/28_regex/algorithms/regex_match/107376.cc: New test.\n+\n 2022-10-26  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/106393"}]}