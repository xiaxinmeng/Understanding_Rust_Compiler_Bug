{"sha": "327a1118271129829e9ac0abd894eb29254b93eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI3YTExMTgyNzExMjk4MjllOWFjMGFiZDg5NGViMjkyNTRiOTNlYg==", "commit": {"author": {"name": "Walter Lee", "email": "walt@tilera.com", "date": "2013-03-21T02:08:26Z"}, "committer": {"name": "Walter Lee", "email": "walt@gcc.gnu.org", "date": "2013-03-21T02:08:26Z"}, "message": "Add an atomic test and set pattern on tilegx.\n\n      * config/tilegx/sync.md (atomic_test_and_set): New pattern.\n\nFrom-SVN: r196848", "tree": {"sha": "a117d6b2813f6b1519daa1b6d00e0cb782998c4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a117d6b2813f6b1519daa1b6d00e0cb782998c4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/327a1118271129829e9ac0abd894eb29254b93eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/327a1118271129829e9ac0abd894eb29254b93eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/327a1118271129829e9ac0abd894eb29254b93eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/327a1118271129829e9ac0abd894eb29254b93eb/comments", "author": {"login": "walt-tilera", "id": 6602917, "node_id": "MDQ6VXNlcjY2MDI5MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/6602917?v=4", "gravatar_id": "", "url": "https://api.github.com/users/walt-tilera", "html_url": "https://github.com/walt-tilera", "followers_url": "https://api.github.com/users/walt-tilera/followers", "following_url": "https://api.github.com/users/walt-tilera/following{/other_user}", "gists_url": "https://api.github.com/users/walt-tilera/gists{/gist_id}", "starred_url": "https://api.github.com/users/walt-tilera/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/walt-tilera/subscriptions", "organizations_url": "https://api.github.com/users/walt-tilera/orgs", "repos_url": "https://api.github.com/users/walt-tilera/repos", "events_url": "https://api.github.com/users/walt-tilera/events{/privacy}", "received_events_url": "https://api.github.com/users/walt-tilera/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f7e1f1f149ba01858f0108c8c91bb14f0ef02cee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7e1f1f149ba01858f0108c8c91bb14f0ef02cee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7e1f1f149ba01858f0108c8c91bb14f0ef02cee"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "5ecdc8ffc498c0e00e779df4fc54d299816a8212", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/327a1118271129829e9ac0abd894eb29254b93eb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/327a1118271129829e9ac0abd894eb29254b93eb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=327a1118271129829e9ac0abd894eb29254b93eb", "patch": "@@ -1,3 +1,7 @@\n+2013-03-20  Walter Lee  <walt@tilera.com>\n+\n+\t* config/tilegx/sync.md (atomic_test_and_set): New pattern.\n+\n 2013-03-20  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*movoi_internal_avx): Emit insn template"}, {"sha": "a4bea6b68895852e99ac28c9328dd3b986b4e281", "filename": "gcc/config/tilegx/sync.md", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/327a1118271129829e9ac0abd894eb29254b93eb/gcc%2Fconfig%2Ftilegx%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/327a1118271129829e9ac0abd894eb29254b93eb/gcc%2Fconfig%2Ftilegx%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Fsync.md?ref=327a1118271129829e9ac0abd894eb29254b93eb", "patch": "@@ -162,3 +162,49 @@\n   tilegx_post_atomic_barrier (model);\n   DONE;\n })\n+\n+\n+(define_expand \"atomic_test_and_set\"\n+  [(match_operand:QI 0 \"register_operand\" \"\")           ;; bool output\n+   (match_operand:QI 1 \"nonautoincmem_operand\" \"+U\")    ;; memory\n+   (match_operand:SI 2 \"const_int_operand\" \"\")]         ;; model\n+  \"\"\n+{\n+  rtx addr, aligned_addr, aligned_mem, offset, word, shmt;\n+  rtx tmp0, tmp1;\n+  rtx result = operands[0];\n+  rtx mem = operands[1];\n+  enum memmodel model = (enum memmodel) INTVAL (operands[2]);\n+\n+  addr = force_reg (Pmode, XEXP (mem, 0));\n+\n+  aligned_addr = gen_reg_rtx (Pmode);\n+  emit_move_insn (aligned_addr, gen_rtx_AND (Pmode, addr, GEN_INT (-8)));\n+\n+  aligned_mem = change_address (mem, DImode, aligned_addr);\n+  set_mem_alias_set (aligned_mem, 0);\n+\n+  offset = gen_reg_rtx (DImode);\n+  emit_move_insn (offset, gen_rtx_AND (DImode, gen_lowpart (DImode, addr),\n+                                       GEN_INT (7)));\n+\n+  tmp0 = gen_reg_rtx (DImode);\n+  emit_move_insn (tmp0, GEN_INT (1));\n+\n+  shmt = gen_reg_rtx (DImode);\n+  emit_move_insn (shmt, gen_rtx_ASHIFT (DImode, offset, GEN_INT (3)));\n+\n+  word = gen_reg_rtx (DImode);\n+  emit_move_insn (word, gen_rtx_ASHIFT (DImode, tmp0,\n+                                        gen_lowpart (SImode, shmt)));\n+\n+  tmp1 = gen_reg_rtx (DImode);\n+  tilegx_pre_atomic_barrier (model);\n+  emit_insn (gen_atomic_fetch_or_baredi (tmp1, aligned_mem, word));\n+  tilegx_post_atomic_barrier (model);\n+\n+  emit_move_insn (gen_lowpart (DImode, result),\n+                  gen_rtx_LSHIFTRT (DImode, tmp1,\n+                                    gen_lowpart (SImode, shmt)));\n+  DONE;\n+})"}]}