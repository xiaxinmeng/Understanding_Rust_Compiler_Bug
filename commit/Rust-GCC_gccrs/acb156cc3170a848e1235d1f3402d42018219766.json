{"sha": "acb156cc3170a848e1235d1f3402d42018219766", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNiMTU2Y2MzMTcwYTg0OGUxMjM1ZDFmMzQwMmQ0MjAxODIxOTc2Ng==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2019-11-20T20:08:29Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2019-11-20T20:08:29Z"}, "message": "PR 92463 MPFR modernization: Revert r269139\n\nCommit r269139 fixed an accidental dependency on MPFR 3.0. As we now\nrequire at least MPFR 3.1.0+ we can revert it and instead use the\nsimpler MPFR 3.0+ code.\n\nChangeLog entry of the original commit was:\n\n2019-02-23  David Malcolm  <dmalcolm@redhat.com>\n            Jakub Jelinek  <jakub@redhat.com>\n\n        PR middle-end/88074\n        * simplify.c (norm2_do_sqrt, gfc_simplify_norm2): Use\n        mpfr_number_p && !mpfr_zero_p instead of mpfr_regular_p.\n        (norm2_add_squared): Likewise.  Use mp_exp_t rather than mpfr_exp_t.\n\nChangeLog for this commit:\n\n2019-11-20  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR fortran/92463\n\tRevert r269139\n\t* simplify.c (norm2_do_sqrt, gfc_simplify_norm2): Use\n\tmpfr_regular_p instead of mpfr_number_p && !mpfr_zero_p.\n\t(norm2_add_squared): Likewise.  Use mpfr_exp_t rather than\n\tmp_exp_t.\n\nFrom-SVN: r278525", "tree": {"sha": "03981e07a9585a8e925cc4df8f22c537538035f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03981e07a9585a8e925cc4df8f22c537538035f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acb156cc3170a848e1235d1f3402d42018219766", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acb156cc3170a848e1235d1f3402d42018219766", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acb156cc3170a848e1235d1f3402d42018219766", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acb156cc3170a848e1235d1f3402d42018219766/comments", "author": null, "committer": null, "parents": [{"sha": "c9d4cc5df27acfcea40e18cdcd6933b3b1349b9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9d4cc5df27acfcea40e18cdcd6933b3b1349b9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9d4cc5df27acfcea40e18cdcd6933b3b1349b9a"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "56077245a45fa63142a1a9172b58cd86fb6d8613", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb156cc3170a848e1235d1f3402d42018219766/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb156cc3170a848e1235d1f3402d42018219766/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=acb156cc3170a848e1235d1f3402d42018219766", "patch": "@@ -1,3 +1,12 @@\n+2019-11-20  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR fortran/92463\n+\tRevert r269139\n+\t* simplify.c (norm2_do_sqrt, gfc_simplify_norm2): Use\n+\tmpfr_regular_p instead of mpfr_number_p && !mpfr_zero_p.\n+\t(norm2_add_squared): Likewise.  Use mpfr_exp_t rather than\n+\tmp_exp_t.\n+\n 2019-11-20  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \tPR fortran/92463"}, {"sha": "b48bf014121833e45eb6562ace2a4de55e1dedd6", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb156cc3170a848e1235d1f3402d42018219766/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb156cc3170a848e1235d1f3402d42018219766/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=acb156cc3170a848e1235d1f3402d42018219766", "patch": "@@ -6023,8 +6023,8 @@ norm2_add_squared (gfc_expr *result, gfc_expr *e)\n \n   gfc_set_model_kind (result->ts.kind);\n   int index = gfc_validate_kind (BT_REAL, result->ts.kind, false);\n-  mp_exp_t exp;\n-  if (mpfr_number_p (result->value.real) && !mpfr_zero_p (result->value.real))\n+  mpfr_exp_t exp;\n+  if (mpfr_regular_p (result->value.real))\n     {\n       exp = mpfr_get_exp (result->value.real);\n       /* If result is getting close to overflowing, scale down.  */\n@@ -6038,7 +6038,7 @@ norm2_add_squared (gfc_expr *result, gfc_expr *e)\n     }\n \n   mpfr_init (tmp);\n-  if (mpfr_number_p (e->value.real) && !mpfr_zero_p (e->value.real))\n+  if (mpfr_regular_p (e->value.real))\n     {\n       exp = mpfr_get_exp (e->value.real);\n       /* If e**2 would overflow or close to overflowing, scale down.  */\n@@ -6079,9 +6079,7 @@ norm2_do_sqrt (gfc_expr *result, gfc_expr *e)\n   if (result != e)\n     mpfr_set (result->value.real, e->value.real, GFC_RND_MODE);\n   mpfr_sqrt (result->value.real, result->value.real, GFC_RND_MODE);\n-  if (norm2_scale\n-      && mpfr_number_p (result->value.real)\n-      && !mpfr_zero_p (result->value.real))\n+  if (norm2_scale && mpfr_regular_p (result->value.real))\n     {\n       mpfr_t tmp;\n       mpfr_init (tmp);\n@@ -6120,9 +6118,7 @@ gfc_simplify_norm2 (gfc_expr *e, gfc_expr *dim)\n       result = simplify_transformation_to_scalar (result, e, NULL,\n \t\t\t\t\t\t  norm2_add_squared);\n       mpfr_sqrt (result->value.real, result->value.real, GFC_RND_MODE);\n-      if (norm2_scale\n-\t  && mpfr_number_p (result->value.real)\n-\t  && !mpfr_zero_p (result->value.real))\n+      if (norm2_scale && mpfr_regular_p (result->value.real))\n \t{\n \t  mpfr_t tmp;\n \t  mpfr_init (tmp);"}]}