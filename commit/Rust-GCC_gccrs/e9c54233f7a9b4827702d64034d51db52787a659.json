{"sha": "e9c54233f7a9b4827702d64034d51db52787a659", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTljNTQyMzNmN2E5YjQ4Mjc3MDJkNjQwMzRkNTFkYjUyNzg3YTY1OQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2019-05-11T13:29:05Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2019-05-11T13:29:05Z"}, "message": "stl_bvector.h (operator==(const _Bit_iterator_base&, const _Bit_iterator_base&)): Make hidden friend.\n\n2019-05-11  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/stl_bvector.h\n\t(operator==(const _Bit_iterator_base&, const _Bit_iterator_base&)):\n\tMake hidden friend.\n\t(operator<(const _Bit_iterator_base&, const _Bit_iterator_base&)):\n\tLikewise.\n\t(operator!=(const _Bit_iterator_base&, const _Bit_iterator_base&)):\n\tLikewise.\n\t(operator>(const _Bit_iterator_base&, const _Bit_iterator_base&)):\n\tLikewise.\n\t(operator<=(const _Bit_iterator_base&, const _Bit_iterator_base&)):\n\tLikewise.\n\t(operator>=(const _Bit_iterator_base&, const _Bit_iterator_base&)):\n\tLikewise.\n\t(operator-(const _Bit_iterator_base&, const _Bit_iterator_base&)):\n\tLikewise.\n\t(_Bit_iterator::operator+(difference_type)): Likewise and allow NRVO\n\tcopy elision.\n\t(_Bit_iterator::operator-(difference_type)): Likewise.\n\t(operator+(ptrdiff_t, const _Bit_iterator&)): Make hidden friend.\n\t(_Bit_const_iterator::operator+(difference_type)): Likewise and allow\n\tNRVO copy elision.\n\t(_Bit_const_iterator::operator-(difference_type)): Likewise.\n\t(operator+(ptrdiff_t, const _Bit_const_iterator&)): Make hidden friend.\n\nFrom-SVN: r271096", "tree": {"sha": "6f3eeae245eed6872c8f6fe0e7c6ed0325881b38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f3eeae245eed6872c8f6fe0e7c6ed0325881b38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9c54233f7a9b4827702d64034d51db52787a659", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9c54233f7a9b4827702d64034d51db52787a659", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9c54233f7a9b4827702d64034d51db52787a659", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9c54233f7a9b4827702d64034d51db52787a659/comments", "author": null, "committer": null, "parents": [{"sha": "b5b9147d35ee509714c34d813c7723bf18bb7b7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5b9147d35ee509714c34d813c7723bf18bb7b7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5b9147d35ee509714c34d813c7723bf18bb7b7a"}], "stats": {"total": 144, "additions": 87, "deletions": 57}, "files": [{"sha": "50633c89f2fab20b2621dcab55b4cc3f076f9a43", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9c54233f7a9b4827702d64034d51db52787a659/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9c54233f7a9b4827702d64034d51db52787a659/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e9c54233f7a9b4827702d64034d51db52787a659", "patch": "@@ -1,3 +1,29 @@\n+2019-05-11  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/stl_bvector.h\n+\t(operator==(const _Bit_iterator_base&, const _Bit_iterator_base&)):\n+\tMake hidden friend.\n+\t(operator<(const _Bit_iterator_base&, const _Bit_iterator_base&)):\n+\tLikewise.\n+\t(operator!=(const _Bit_iterator_base&, const _Bit_iterator_base&)):\n+\tLikewise.\n+\t(operator>(const _Bit_iterator_base&, const _Bit_iterator_base&)):\n+\tLikewise.\n+\t(operator<=(const _Bit_iterator_base&, const _Bit_iterator_base&)):\n+\tLikewise.\n+\t(operator>=(const _Bit_iterator_base&, const _Bit_iterator_base&)):\n+\tLikewise.\n+\t(operator-(const _Bit_iterator_base&, const _Bit_iterator_base&)):\n+\tLikewise.\n+\t(_Bit_iterator::operator+(difference_type)): Likewise and allow NRVO\n+\tcopy elision.\n+\t(_Bit_iterator::operator-(difference_type)): Likewise.\n+\t(operator+(ptrdiff_t, const _Bit_iterator&)): Make hidden friend.\n+\t(_Bit_const_iterator::operator+(difference_type)): Likewise and allow\n+\tNRVO copy elision.\n+\t(_Bit_const_iterator::operator-(difference_type)): Likewise.\n+\t(operator+(ptrdiff_t, const _Bit_const_iterator&)): Make hidden friend.\n+\n 2019-05-10  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/81266"}, {"sha": "280d40f60c51fbe16bef5691515b521d0b4e049b", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 61, "deletions": 57, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9c54233f7a9b4827702d64034d51db52787a659/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9c54233f7a9b4827702d64034d51db52787a659/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=e9c54233f7a9b4827702d64034d51db52787a659", "patch": "@@ -182,40 +182,40 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _M_offset = static_cast<unsigned int>(__n);\n     }\n \n-    bool\n-    operator==(const _Bit_iterator_base& __i) const\n-    { return _M_p == __i._M_p && _M_offset == __i._M_offset; }\n+    friend bool\n+    operator==(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)\n+    { return __x._M_p == __y._M_p && __x._M_offset == __y._M_offset; }\n \n-    bool\n-    operator<(const _Bit_iterator_base& __i) const\n+    friend bool\n+    operator<(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)\n     {\n-      return _M_p < __i._M_p\n-\t    || (_M_p == __i._M_p && _M_offset < __i._M_offset);\n+      return __x._M_p < __y._M_p\n+\t    || (__x._M_p == __y._M_p && __x._M_offset < __y._M_offset);\n     }\n \n-    bool\n-    operator!=(const _Bit_iterator_base& __i) const\n-    { return !(*this == __i); }\n+    friend bool\n+    operator!=(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)\n+    { return !(__x == __y); }\n \n-    bool\n-    operator>(const _Bit_iterator_base& __i) const\n-    { return __i < *this; }\n+    friend bool\n+    operator>(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)\n+    { return __y < __x; }\n \n-    bool\n-    operator<=(const _Bit_iterator_base& __i) const\n-    { return !(__i < *this); }\n+    friend bool\n+    operator<=(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)\n+    { return !(__y < __x); }\n \n-    bool\n-    operator>=(const _Bit_iterator_base& __i) const\n-    { return !(*this < __i); }\n-  };\n+    friend bool\n+    operator>=(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)\n+    { return !(__x < __y); }\n \n-  inline ptrdiff_t\n-  operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)\n-  {\n-    return (int(_S_word_bit) * (__x._M_p - __y._M_p)\n-\t    + __x._M_offset - __y._M_offset);\n-  }\n+    friend ptrdiff_t\n+    operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)\n+    {\n+      return (int(_S_word_bit) * (__x._M_p - __y._M_p)\n+\t      + __x._M_offset - __y._M_offset);\n+    }\n+  };\n \n   struct _Bit_iterator : public _Bit_iterator_base\n   {\n@@ -280,29 +280,31 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       return *this;\n     }\n \n-    iterator\n-    operator+(difference_type __i) const\n+    reference\n+    operator[](difference_type __i) const\n+    { return *(*this + __i); }\n+\n+    friend iterator\n+    operator+(const iterator& __x, difference_type __n)\n     {\n-      iterator __tmp = *this;\n-      return __tmp += __i;\n+      iterator __tmp = __x;\n+      __tmp += __n;\n+      return __tmp;\n     }\n \n-    iterator\n-    operator-(difference_type __i) const\n+    friend iterator\n+    operator+(difference_type __n, const iterator& __x)\n+    { return __x + __n; }\n+\n+    friend iterator\n+    operator-(const iterator& __x, difference_type __n)\n     {\n-      iterator __tmp = *this;\n-      return __tmp -= __i;\n+      iterator __tmp = __x;\n+      __tmp -= __n;\n+      return __tmp;\n     }\n-\n-    reference\n-    operator[](difference_type __i) const\n-    { return *(*this + __i); }\n   };\n \n-  inline _Bit_iterator\n-  operator+(ptrdiff_t __n, const _Bit_iterator& __x)\n-  { return __x + __n; }\n-\n   struct _Bit_const_iterator : public _Bit_iterator_base\n   {\n     typedef bool                 reference;\n@@ -370,29 +372,31 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       return *this;\n     }\n \n-    const_iterator\n-    operator+(difference_type __i) const\n+    const_reference\n+    operator[](difference_type __i) const\n+    { return *(*this + __i); }\n+\n+    friend const_iterator\n+    operator+(const const_iterator& __x, difference_type __n)\n     {\n-      const_iterator __tmp = *this;\n-      return __tmp += __i;\n+      const_iterator __tmp = __x;\n+      __tmp += __n;\n+      return __tmp;\n     }\n \n-    const_iterator\n-    operator-(difference_type __i) const\n+    friend const_iterator\n+    operator-(const const_iterator& __x, difference_type __n)\n     {\n-      const_iterator __tmp = *this;\n-      return __tmp -= __i;\n+      const_iterator __tmp = __x;\n+      __tmp -= __n;\n+      return __tmp;\n     }\n \n-    const_reference\n-    operator[](difference_type __i) const\n-    { return *(*this + __i); }\n+    friend const_iterator\n+    operator+(difference_type __n, const const_iterator& __x)\n+    { return __x + __n; }\n   };\n \n-  inline _Bit_const_iterator\n-  operator+(ptrdiff_t __n, const _Bit_const_iterator& __x)\n-  { return __x + __n; }\n-\n   inline void\n   __fill_bvector(_Bit_type * __v,\n \t\t unsigned int __first, unsigned int __last, bool __x)"}]}