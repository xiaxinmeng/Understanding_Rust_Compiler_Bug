{"sha": "dfeddf46e3796bb5cf57c0650dd3f1463e25a260", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZlZGRmNDZlMzc5NmJiNWNmNTdjMDY1MGRkM2YxNDYzZTI1YTI2MA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-08-23T03:38:16Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-08-23T03:38:16Z"}, "message": "* pa.md (untyped_call): New define_expand.\n\nFrom-SVN: r5192", "tree": {"sha": "5fc86862b97a5c4c7c2b02712f2c88db8dfaabd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fc86862b97a5c4c7c2b02712f2c88db8dfaabd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfeddf46e3796bb5cf57c0650dd3f1463e25a260", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfeddf46e3796bb5cf57c0650dd3f1463e25a260", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfeddf46e3796bb5cf57c0650dd3f1463e25a260", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfeddf46e3796bb5cf57c0650dd3f1463e25a260/comments", "author": null, "committer": null, "parents": [{"sha": "b4af138b01a546c1f24031cf843fedbd8f50c726", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4af138b01a546c1f24031cf843fedbd8f50c726", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4af138b01a546c1f24031cf843fedbd8f50c726"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "ad209697251fa2c5c1accd419682ef64334cf5d3", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfeddf46e3796bb5cf57c0650dd3f1463e25a260/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfeddf46e3796bb5cf57c0650dd3f1463e25a260/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=dfeddf46e3796bb5cf57c0650dd3f1463e25a260", "patch": "@@ -2841,6 +2841,34 @@\n  [(set_attr \"type\" \"dyncall\")\n   (set_attr \"length\" \"12\")])\n \n+;; Call subroutine returning any type.\n+\n+(define_expand \"untyped_call\"\n+  [(parallel [(call (match_operand 0 \"\" \"\")\n+\t\t    (const_int 0))\n+\t      (match_operand 1 \"\" \"\")\n+\t      (match_operand 2 \"\" \"\")])]\n+  \"\"\n+  \"\n+{\n+  int i;\n+\n+  emit_call_insn (gen_call (operands[0], const0_rtx));\n+\n+  for (i = 0; i < XVECLEN (operands[2], 0); i++)\n+    {\n+      rtx set = XVECEXP (operands[2], 0, i);\n+      emit_move_insn (SET_DEST (set), SET_SRC (set));\n+    }\n+\n+  /* The optimizer does not know that the call sets the function value\n+     registers we stored in the result block.  We avoid problems by\n+     claiming that all hard registers are used and clobbered at this\n+     point.  */\n+  emit_insn (gen_blockage ());\n+\n+  DONE;\n+}\")\n (define_insn \"nop\"\n   [(const_int 0)]\n   \"\""}]}