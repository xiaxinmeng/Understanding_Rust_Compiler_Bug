{"sha": "4439d02f0f5881b186b7d3430a9504310e227e30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQzOWQwMmYwZjU4ODFiMTg2YjdkMzQzMGE5NTA0MzEwZTIyN2UzMA==", "commit": {"author": {"name": "Douglas Gregor", "email": "doug.gregor@gmail.com", "date": "2008-01-15T18:08:00Z"}, "committer": {"name": "Doug Gregor", "email": "dgregor@gcc.gnu.org", "date": "2008-01-15T18:08:00Z"}, "message": "re PR c++/34051 (ICE in dependent_type_p with variadic templates)\n\n2008-01-15  Douglas Gregor  <doug.gregor@gmail.com>\n\n\tPR c++/34051\n\tPR c++/34055\n\tPR c++/34102\n\tPR c++/34103\n\t* typeck.c (check_return_expr): If there are bare parameter packs\n\tin the return value, set it to error_mark_node.\n\t* tree.c (cp_walk_subtrees): Walk USING_DECL nodes.\n\t* pt.c (find_parameter_packs_r): Look at the type of\n\tIDENTIFIER_NODEs (e.g., for user-defined conversions).\n\t(check_for_bare_parameter_packs): Flip the result: now returns\n\tTRUE when there were bare parameter packs, FALSE otherwise.\n\t(push_template_decl_real): Deal with flipped result of\n\tcheck_for_bare_parameter_packs.\n\t* semantics.c (finish_cond): If there are bare parameter packs in\n\tthe conditional, set it to error_mark_node.\n\t(finish_expr_stmt): If there are bare parameter packs in the\n\texpression, set it to error_mark_node.\n\t(finish_for_expr): Ditto.\n\t(finish_switch_cond): If there are bare parameter packs in\n\tthe conditional, set it to error_mark_node.\n\t(finish_mem_initializers): If there are bare parameter packs in\n\tthe member initializer, set it to error_mark_node.\n\t(finish_member_declaration): Check the attributes of the\n\tdeclaration for bare parameter packs, and remove the attributes if\n\tany have bare parameter packs.\n\t* parser.c (cp_parser_using_declaration): Check the using\n\tdeclaration for bare parameter packs.\n\t(cp_parser_base_clause): If there are bare parameter packs in a\n\tbase specifier, don't add it to the chain.\n\n2008-01-15  Douglas Gregor  <doug.gregor@gmail.com>\n\n\tPR c++/34051\n\tPR c++/34055\n\tPR c++/34102\n\tPR c++/34103\n\t* g++.dg/cpp0x/vt-34051-2.C: New.\n\t* g++.dg/cpp0x/vt-34102.C: New.\n\t* g++.dg/cpp0x/vt-34051.C: New.\n\t* g++.dg/cpp0x/vt-34055.C: New.\n\t* g++.dg/cpp0x/vt-34103.C: New.\n\nFrom-SVN: r131547", "tree": {"sha": "86bf7020da1cd67cb456d3a5b266ad9a0edd947c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86bf7020da1cd67cb456d3a5b266ad9a0edd947c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4439d02f0f5881b186b7d3430a9504310e227e30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4439d02f0f5881b186b7d3430a9504310e227e30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4439d02f0f5881b186b7d3430a9504310e227e30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4439d02f0f5881b186b7d3430a9504310e227e30/comments", "author": {"login": "DougGregor", "id": 989428, "node_id": "MDQ6VXNlcjk4OTQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/989428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DougGregor", "html_url": "https://github.com/DougGregor", "followers_url": "https://api.github.com/users/DougGregor/followers", "following_url": "https://api.github.com/users/DougGregor/following{/other_user}", "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}", "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions", "organizations_url": "https://api.github.com/users/DougGregor/orgs", "repos_url": "https://api.github.com/users/DougGregor/repos", "events_url": "https://api.github.com/users/DougGregor/events{/privacy}", "received_events_url": "https://api.github.com/users/DougGregor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a022041e4ca05c32d7d17a26ce6f0716b4ba642f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a022041e4ca05c32d7d17a26ce6f0716b4ba642f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a022041e4ca05c32d7d17a26ce6f0716b4ba642f"}], "stats": {"total": 169, "additions": 147, "deletions": 22}, "files": [{"sha": "5325bcdd24c4a6f6fc44309ee6c57117722e433a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4439d02f0f5881b186b7d3430a9504310e227e30/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4439d02f0f5881b186b7d3430a9504310e227e30/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4439d02f0f5881b186b7d3430a9504310e227e30", "patch": "@@ -1,3 +1,35 @@\n+2008-01-15  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+\tPR c++/34051\n+\tPR c++/34055\n+\tPR c++/34102\n+\tPR c++/34103\n+\t* typeck.c (check_return_expr): If there are bare parameter packs\n+\tin the return value, set it to error_mark_node.\n+\t* tree.c (cp_walk_subtrees): Walk USING_DECL nodes.\n+\t* pt.c (find_parameter_packs_r): Look at the type of\n+\tIDENTIFIER_NODEs (e.g., for user-defined conversions).\n+\t(check_for_bare_parameter_packs): Flip the result: now returns\n+\tTRUE when there were bare parameter packs, FALSE otherwise.\n+\t(push_template_decl_real): Deal with flipped result of\n+\tcheck_for_bare_parameter_packs.\n+\t* semantics.c (finish_cond): If there are bare parameter packs in\n+\tthe conditional, set it to error_mark_node.\n+\t(finish_expr_stmt): If there are bare parameter packs in the\n+\texpression, set it to error_mark_node.\n+\t(finish_for_expr): Ditto.\n+\t(finish_switch_cond): If there are bare parameter packs in\n+\tthe conditional, set it to error_mark_node.\n+\t(finish_mem_initializers): If there are bare parameter packs in\n+\tthe member initializer, set it to error_mark_node.\n+\t(finish_member_declaration): Check the attributes of the\n+\tdeclaration for bare parameter packs, and remove the attributes if\n+\tany have bare parameter packs.\n+\t* parser.c (cp_parser_using_declaration): Check the using\n+\tdeclaration for bare parameter packs.\n+\t(cp_parser_base_clause): If there are bare parameter packs in a\n+\tbase specifier, don't add it to the chain.\n+\n 2008-01-15  Douglas Gregor  <doug.gregor@gmail.com>\n \n        PR c++/34314"}, {"sha": "1400424c2fff470dc7ea76cb57c9045f5eb85e00", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4439d02f0f5881b186b7d3430a9504310e227e30/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4439d02f0f5881b186b7d3430a9504310e227e30/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=4439d02f0f5881b186b7d3430a9504310e227e30", "patch": "@@ -11748,14 +11748,20 @@ cp_parser_using_declaration (cp_parser* parser,\n \t{\n \t  /* Create the USING_DECL.  */\n \t  decl = do_class_using_decl (parser->scope, identifier);\n-\t  /* Add it to the list of members in this class.  */\n-\t  finish_member_declaration (decl);\n+\n+\t  if (check_for_bare_parameter_packs (&decl))\n+            return false;\n+          else\n+\t    /* Add it to the list of members in this class.  */\n+\t    finish_member_declaration (decl);\n \t}\n       else\n \t{\n \t  decl = cp_parser_lookup_name_simple (parser, identifier);\n \t  if (decl == error_mark_node)\n \t    cp_parser_name_lookup_error (parser, identifier, decl, NULL);\n+\t  else if (check_for_bare_parameter_packs (&decl))\n+\t    return false;\n \t  else if (!at_namespace_scope_p ())\n \t    do_local_using_decl (decl, qscope, identifier);\n \t  else\n@@ -15263,11 +15269,13 @@ cp_parser_base_clause (cp_parser* parser)\n           if (pack_expansion_p)\n             /* Make this a pack expansion type. */\n             TREE_VALUE (base) = make_pack_expansion (TREE_VALUE (base));\n-          else\n-            check_for_bare_parameter_packs (&TREE_VALUE (base));\n+          \n \n-\t  TREE_CHAIN (base) = bases;\n-\t  bases = base;\n+          if (!check_for_bare_parameter_packs (&TREE_VALUE (base)))\n+            {\n+              TREE_CHAIN (base) = bases;\n+              bases = base;\n+            }\n \t}\n       /* Peek at the next token.  */\n       token = cp_lexer_peek_token (parser->lexer);"}, {"sha": "57dc8f86766bd7b86d6874a73ca0741a85090453", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4439d02f0f5881b186b7d3430a9504310e227e30/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4439d02f0f5881b186b7d3430a9504310e227e30/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4439d02f0f5881b186b7d3430a9504310e227e30", "patch": "@@ -2577,6 +2577,11 @@ find_parameter_packs_r (tree *tp, int *walk_subtrees, void* data)\n       *walk_subtrees = 0;\n       return NULL_TREE;\n \n+    case IDENTIFIER_NODE:\n+      cp_walk_tree (&TREE_TYPE (t), &find_parameter_packs_r, ppd, NULL);\n+      *walk_subtrees = 0;\n+      return NULL_TREE;\n+\n     default:\n       return NULL_TREE;\n     }\n@@ -2731,16 +2736,16 @@ make_pack_expansion (tree arg)\n    g(h(args)), or f(g(h(args))), because we would produce erroneous\n    error messages. \n \n-   Returns TRUE if there were no bare parameter packs, returns FALSE\n-   (and emits an error) if there were bare parameter packs.*/\n+   Returns TRUE and emits an error if there were bare parameter packs,\n+   returns FALSE otherwise.  */\n bool \n check_for_bare_parameter_packs (tree* t)\n {\n   tree parameter_packs = NULL_TREE;\n   struct find_parameter_pack_data ppd;\n \n   if (!processing_template_decl || !t || !*t || *t == error_mark_node)\n-    return true;\n+    return false;\n \n   if (TREE_CODE (*t) == TYPE_DECL)\n     t = &TREE_TYPE (*t);\n@@ -2783,10 +2788,10 @@ check_for_bare_parameter_packs (tree* t)\n       cp_walk_tree (t, &find_parameter_packs_r, &ppd, NULL);\n       pointer_set_destroy (ppd.visited);\n \n-      return false;\n+      return true;\n     }\n \n-  return true;\n+  return false;\n }\n \n /* Expand any parameter packs that occur in the template arguments in\n@@ -3885,7 +3890,7 @@ push_template_decl_real (tree decl, bool is_friend)\n       while (arg && argtype)\n         {\n           if (!FUNCTION_PARAMETER_PACK_P (arg)\n-              && !check_for_bare_parameter_packs (&TREE_TYPE (arg)))\n+              && check_for_bare_parameter_packs (&TREE_TYPE (arg)))\n             {\n             /* This is a PARM_DECL that contains unexpanded parameter\n                packs. We have already complained about this in the\n@@ -3901,14 +3906,14 @@ push_template_decl_real (tree decl, bool is_friend)\n \n       /* Check for bare parameter packs in the return type and the\n          exception specifiers.  */\n-      if (!check_for_bare_parameter_packs (&TREE_TYPE (type)))\n+      if (check_for_bare_parameter_packs (&TREE_TYPE (type)))\n \t/* Errors were already issued, set return type to int\n \t   as the frontend doesn't expect error_mark_node as\n \t   the return type.  */\n \tTREE_TYPE (type) = integer_type_node;\n       check_for_bare_parameter_packs (&TYPE_RAISES_EXCEPTIONS (type));\n     }\n-  else if (!check_for_bare_parameter_packs (&TREE_TYPE (decl)))\n+  else if (check_for_bare_parameter_packs (&TREE_TYPE (decl)))\n     return error_mark_node;\n \n   if (is_partial)"}, {"sha": "8cf9ceba3890eea6e0689115dbac919fc8e69a38", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4439d02f0f5881b186b7d3430a9504310e227e30/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4439d02f0f5881b186b7d3430a9504310e227e30/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=4439d02f0f5881b186b7d3430a9504310e227e30", "patch": "@@ -508,7 +508,8 @@ finish_cond (tree *cond_p, tree expr)\n       if (TREE_CODE (cond) == DECL_EXPR)\n \texpr = cond;\n \n-      check_for_bare_parameter_packs (&expr);\n+      if (check_for_bare_parameter_packs (&expr))\n+        *cond_p = error_mark_node;\n     }\n   *cond_p = expr;\n }\n@@ -618,7 +619,8 @@ finish_expr_stmt (tree expr)\n       else if (!type_dependent_expression_p (expr))\n \tconvert_to_void (build_non_dependent_expr (expr), \"statement\");\n \n-      check_for_bare_parameter_packs (&expr);\n+      if (check_for_bare_parameter_packs (&expr))\n+        expr = error_mark_node;\n \n       /* Simplification of inner statement expressions, compound exprs,\n \t etc can result in us already having an EXPR_STMT.  */\n@@ -875,7 +877,8 @@ finish_for_expr (tree expr, tree for_stmt)\n   else if (!type_dependent_expression_p (expr))\n     convert_to_void (build_non_dependent_expr (expr), \"3rd expression in for\");\n   expr = maybe_cleanup_point_expr_void (expr);\n-  check_for_bare_parameter_packs (&expr);\n+  if (check_for_bare_parameter_packs (&expr))\n+    expr = error_mark_node;\n   FOR_EXPR (for_stmt) = expr;\n }\n \n@@ -971,7 +974,8 @@ finish_switch_cond (tree cond, tree switch_stmt)\n \t    cond = index;\n \t}\n     }\n-  check_for_bare_parameter_packs (&cond);\n+  if (check_for_bare_parameter_packs (&cond))\n+    cond = error_mark_node;\n   finish_cond (&SWITCH_STMT_COND (switch_stmt), cond);\n   SWITCH_STMT_TYPE (switch_stmt) = orig_type;\n   add_stmt (switch_stmt);\n@@ -1388,8 +1392,9 @@ finish_mem_initializers (tree mem_inits)\n              any parameter packs in the TREE_VALUE have already been\n              bound as part of the TREE_PURPOSE.  See\n              make_pack_expansion for more information.  */\n-          if (TREE_CODE (TREE_PURPOSE (mem)) != TYPE_PACK_EXPANSION)\n-            check_for_bare_parameter_packs (&TREE_VALUE (mem));\n+          if (TREE_CODE (TREE_PURPOSE (mem)) != TYPE_PACK_EXPANSION\n+              && check_for_bare_parameter_packs (&TREE_VALUE (mem)))\n+            TREE_VALUE (mem) = error_mark_node;\n         }\n \n       add_stmt (build_min_nt (CTOR_INITIALIZER, mem_inits));\n@@ -2325,7 +2330,12 @@ finish_member_declaration (tree decl)\n \n   /* Check for bare parameter packs in the member variable declaration.  */\n   if (TREE_CODE (decl) == FIELD_DECL)\n-    check_for_bare_parameter_packs (&TREE_TYPE (decl));\n+    {\n+      if (check_for_bare_parameter_packs (&TREE_TYPE (decl)))\n+        TREE_TYPE (decl) = error_mark_node;\n+      if (check_for_bare_parameter_packs (&DECL_ATTRIBUTES (decl)))\n+        DECL_ATTRIBUTES (decl) = NULL_TREE;\n+    }\n \n   /* [dcl.link]\n "}, {"sha": "7459266d43ab71025c5f451f75a9c1f19cc057ef", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4439d02f0f5881b186b7d3430a9504310e227e30/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4439d02f0f5881b186b7d3430a9504310e227e30/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=4439d02f0f5881b186b7d3430a9504310e227e30", "patch": "@@ -2351,6 +2351,13 @@ cp_walk_subtrees (tree *tp, int *walk_subtrees_p, walk_tree_fn func,\n       *walk_subtrees_p = 0;\n       break;\n \n+    case USING_DECL:\n+      WALK_SUBTREE (DECL_NAME (*tp));\n+      WALK_SUBTREE (USING_DECL_SCOPE (*tp));\n+      WALK_SUBTREE (USING_DECL_DECLS (*tp));\n+      *walk_subtrees_p = 0;\n+      break;\n+\n     case RECORD_TYPE:\n       if (TYPE_PTRMEMFUNC_P (*tp))\n \tWALK_SUBTREE (TYPE_PTRMEMFUNC_FN_TYPE (*tp));"}, {"sha": "50a844a95e0e0bec31b6e74c26b9a0dfb51d0210", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4439d02f0f5881b186b7d3430a9504310e227e30/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4439d02f0f5881b186b7d3430a9504310e227e30/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=4439d02f0f5881b186b7d3430a9504310e227e30", "patch": "@@ -6642,7 +6642,8 @@ check_return_expr (tree retval, bool *no_warning)\n   if (processing_template_decl)\n     {\n       current_function_returns_value = 1;\n-      check_for_bare_parameter_packs (&retval);\n+      if (check_for_bare_parameter_packs (&retval))\n+        retval = error_mark_node;\n       return retval;\n     }\n "}, {"sha": "10cc27d779287f6deb18078402f5f5d7e80145bf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4439d02f0f5881b186b7d3430a9504310e227e30/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4439d02f0f5881b186b7d3430a9504310e227e30/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4439d02f0f5881b186b7d3430a9504310e227e30", "patch": "@@ -1,3 +1,22 @@\n+2008-01-15  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+\tPR c++/34051\n+\tPR c++/34055\n+\tPR c++/34102\n+\tPR c++/34103\n+\t* g++.dg/cpp0x/vt-34051-2.C: New.\n+\t* g++.dg/cpp0x/vt-34102.C: New.\n+\t* g++.dg/cpp0x/vt-34051.C: New.\n+\t* g++.dg/cpp0x/vt-34055.C: New.\n+\t* g++.dg/cpp0x/vt-34103.C: New.\n+\n+2008-01-15  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+       PR c++/34314\n+       * g++.dg/cpp0x/vt-34314.C: New.\n+       * g++.dg/cpp0x/variadic79.C: Fix the error message to reflect\n+       reality (the error message was wrong previously).\n+\n 2008-01-15  Douglas Gregor  <doug.gregor@gmail.com>\n \n        PR c++/33964"}, {"sha": "2c7bb50f081b29716465bac06a334b39ab5ebb1e", "filename": "gcc/testsuite/g++.dg/cpp0x/vt-34051-2.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4439d02f0f5881b186b7d3430a9504310e227e30/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34051-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4439d02f0f5881b186b7d3430a9504310e227e30/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34051-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34051-2.C?ref=4439d02f0f5881b186b7d3430a9504310e227e30", "patch": "@@ -0,0 +1,7 @@\n+// { dg-options \"-std=c++0x\" }\n+template<typename... T> struct A\n+{\n+  int i __attribute__((aligned(__alignof(T)))); // { dg-error \"parameter packs|T\" }\n+};\n+\n+A<int> a;"}, {"sha": "88ae56703233634cdb9bcdc8598b68a30e25b85c", "filename": "gcc/testsuite/g++.dg/cpp0x/vt-34051.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4439d02f0f5881b186b7d3430a9504310e227e30/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34051.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4439d02f0f5881b186b7d3430a9504310e227e30/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34051.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34051.C?ref=4439d02f0f5881b186b7d3430a9504310e227e30", "patch": "@@ -0,0 +1,12 @@\n+// { dg-options \"-std=c++0x\" }\n+struct A\n+{\n+  operator int();\n+};\n+\n+template <typename... T> struct B : A\n+{\n+  using A::operator T; // { dg-error \"parameter packs|T\" }\n+};\n+\n+B<int> b;"}, {"sha": "921b813c82e54d4de20abae07b4a8750b27bdb5f", "filename": "gcc/testsuite/g++.dg/cpp0x/vt-34055.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4439d02f0f5881b186b7d3430a9504310e227e30/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34055.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4439d02f0f5881b186b7d3430a9504310e227e30/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34055.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34055.C?ref=4439d02f0f5881b186b7d3430a9504310e227e30", "patch": "@@ -0,0 +1,10 @@\n+// { dg-options \"-std=c++0x\" }\n+// PR c++/34055\n+template<typename...> struct A; // { dg-error \"declaration\" }\n+\n+template<typename...T> struct A<T*> // { dg-error \"parameter packs|T\" }\n+{\n+  void foo();\n+};\n+\n+template<typename...T> void A<T*>::foo() {} // { dg-error \"invalid use\" }"}, {"sha": "00f0b4f4aace9f0269352ddc25633e8c409b081c", "filename": "gcc/testsuite/g++.dg/cpp0x/vt-34102.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4439d02f0f5881b186b7d3430a9504310e227e30/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34102.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4439d02f0f5881b186b7d3430a9504310e227e30/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34102.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34102.C?ref=4439d02f0f5881b186b7d3430a9504310e227e30", "patch": "@@ -0,0 +1,7 @@\n+// { dg-options \"-std=c++0x\" }\n+// PR c++/34102\n+struct A {};\n+\n+template<typename> struct B : virtual A {};\n+\n+template<typename...T> struct C : B<T> {}; // { dg-error \"parameter packs|T\" }"}, {"sha": "3bbbb46a0120d8e2bb28b86fe7b829b33bc70a00", "filename": "gcc/testsuite/g++.dg/cpp0x/vt-34103.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4439d02f0f5881b186b7d3430a9504310e227e30/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34103.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4439d02f0f5881b186b7d3430a9504310e227e30/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34103.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34103.C?ref=4439d02f0f5881b186b7d3430a9504310e227e30", "patch": "@@ -0,0 +1,7 @@\n+// { dg-options \"-std=c++0x\" }\n+// PR c++/34103\n+template<typename> struct A {};\n+\n+template<typename...T> void foo(A<T>, A<T>); // { dg-error \"parameter packs|T\" }\n+\n+template<typename...T> void foo(A<T>, A<T>) {} // { dg-error \"parameter packs|T\" }"}]}