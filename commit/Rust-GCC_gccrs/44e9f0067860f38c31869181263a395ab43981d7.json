{"sha": "44e9f0067860f38c31869181263a395ab43981d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRlOWYwMDY3ODYwZjM4YzMxODY5MTgxMjYzYTM5NWFiNDM5ODFkNw==", "commit": {"author": {"name": "Rafael Avila de Espindola", "email": "espindola@google.com", "date": "2009-04-16T13:12:20Z"}, "committer": {"name": "Rafael Espindola", "email": "espindola@gcc.gnu.org", "date": "2009-04-16T13:12:20Z"}, "message": "gcc-plugin.h (plugin_event): Add PLUGIN_INFO.\n\n2009-04-16  Rafael Avila de Espindola  <espindola@google.com>\n\n\t* gcc-plugin.h (plugin_event): Add PLUGIN_INFO.\n\t(plugin_info): New.\n\t* opts.c (common_handle_option): Don't call print_version.\n\t* plugin.c (plugin_name_args): Add version.\n\t(register_plugin_info): New.\n\t(register_callback): Handle PLUGIN_INFO.\n\t(try_init_one_plugin): New.\n\t(init_one_plugin): Use try_init_one_plugin. Only free plugin_name_args\n\tif failed to init.\n\t(finalize_one_plugin): New.\n\t(finalize_plugins): New.\n\t(print_one_plugin): New.\n\t(print_plugins_versions): New.\n\t* plugin.h (print_plugins_versions): New.\n\t(finalize_plugins): New.\n\t* toplev.c (compile_file): Don't call initialize_plugins.\n\t(print_version): Call print_plugins_versions.\n\t(toplev_main): Call initialize_plugins. Print version if needed.\n\tCall finalize_plugins.\n\nFrom-SVN: r146187", "tree": {"sha": "4c2c486bde5f48e09fd4e0030c18e8c61a2c68a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c2c486bde5f48e09fd4e0030c18e8c61a2c68a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44e9f0067860f38c31869181263a395ab43981d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44e9f0067860f38c31869181263a395ab43981d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44e9f0067860f38c31869181263a395ab43981d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44e9f0067860f38c31869181263a395ab43981d7/comments", "author": null, "committer": null, "parents": [{"sha": "c1c5e0faa84bd01c866f7f2930cc628a770b3c2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1c5e0faa84bd01c866f7f2930cc628a770b3c2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1c5e0faa84bd01c866f7f2930cc628a770b3c2a"}], "stats": {"total": 168, "additions": 147, "deletions": 21}, "files": [{"sha": "8179454cbe73ba7601a8b7b422e767f19c2873c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e9f0067860f38c31869181263a395ab43981d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e9f0067860f38c31869181263a395ab43981d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=44e9f0067860f38c31869181263a395ab43981d7", "patch": "@@ -1,3 +1,25 @@\n+2009-04-16  Rafael Avila de Espindola  <espindola@google.com>\n+\n+\t* gcc-plugin.h (plugin_event): Add PLUGIN_INFO.\n+\t(plugin_info): New.\n+\t* opts.c (common_handle_option): Don't call print_version.\n+\t* plugin.c (plugin_name_args): Add version.\n+\t(register_plugin_info): New.\n+\t(register_callback): Handle PLUGIN_INFO.\n+\t(try_init_one_plugin): New.\n+\t(init_one_plugin): Use try_init_one_plugin. Only free plugin_name_args\n+\tif failed to init.\n+\t(finalize_one_plugin): New.\n+\t(finalize_plugins): New.\n+\t(print_one_plugin): New.\n+\t(print_plugins_versions): New.\n+\t* plugin.h (print_plugins_versions): New.\n+\t(finalize_plugins): New.\n+\t* toplev.c (compile_file): Don't call initialize_plugins.\n+\t(print_version): Call print_plugins_versions.\n+\t(toplev_main): Call initialize_plugins. Print version if needed.\n+\tCall finalize_plugins.\n+\n 2009-04-16  Rafael Avila de Espindola  <espindola@google.com>\n \n \t* common.opt (fversion): New."}, {"sha": "8627720acd23221f3988b4f38737d7e1039788f5", "filename": "gcc/gcc-plugin.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e9f0067860f38c31869181263a395ab43981d7/gcc%2Fgcc-plugin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e9f0067860f38c31869181263a395ab43981d7/gcc%2Fgcc-plugin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc-plugin.h?ref=44e9f0067860f38c31869181263a395ab43981d7", "patch": "@@ -28,6 +28,7 @@ enum plugin_event\n   PLUGIN_FINISH_UNIT,           /* Useful for summary processing.  */\n   PLUGIN_CXX_CP_PRE_GENERICIZE, /* Allows to see low level AST in C++ FE.  */\n   PLUGIN_FINISH,                /* Called before GCC exits.  */\n+  PLUGIN_INFO,                  /* Information about the plugin */\n   PLUGIN_EVENT_LAST             /* Dummy event used for indexing callback\n                                    array.  */\n };\n@@ -58,6 +59,13 @@ struct plugin_pass\n   enum pass_positioning_ops pos_op; /* how to insert the new pass.  */\n };\n \n+/* Additional information about the plugin. Used by --help and --version. */\n+\n+struct plugin_info\n+{\n+  const char *version;\n+};\n+\n /* Function type for the plugin initialization routine. Each plugin module\n    should define this as an externally-visible function with name\n    \"plugin_init.\""}, {"sha": "785e5d019ac699f7a84c76d2880a1a261926ba7e", "filename": "gcc/opts.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e9f0067860f38c31869181263a395ab43981d7/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e9f0067860f38c31869181263a395ab43981d7/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=44e9f0067860f38c31869181263a395ab43981d7", "patch": "@@ -1563,7 +1563,6 @@ common_handle_option (size_t scode, const char *arg, int value,\n \n     case OPT_fversion:\n     case OPT__version:\n-      print_version (stderr, \"\");\n       exit_after_options = true;\n       break;\n "}, {"sha": "95297a7d395f4fd14e8152d1af47d959cb415d07", "filename": "gcc/plugin.c", "status": "modified", "additions": 107, "deletions": 19, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e9f0067860f38c31869181263a395ab43981d7/gcc%2Fplugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e9f0067860f38c31869181263a395ab43981d7/gcc%2Fplugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fplugin.c?ref=44e9f0067860f38c31869181263a395ab43981d7", "patch": "@@ -47,6 +47,7 @@ const char *plugin_event_name[] =\n   \"PLUGIN_FINISH_UNIT\",\n   \"PLUGIN_CXX_CP_PRE_GENERICIZE\",\n   \"PLUGIN_FINISH\",\n+  \"PLUGIN_INFO\",\n   \"PLUGIN_EVENT_LAST\"\n };\n \n@@ -59,6 +60,7 @@ struct plugin_name_args\n   const char *full_name;\n   int argc;\n   struct plugin_argument *argv;\n+  const char *version;\n };\n \n /* Hash table for the plugin_name_args objects created during command-line\n@@ -450,6 +452,17 @@ register_pass (const char *plugin_name, struct plugin_pass *pass_info)\n }\n \n \n+/* Register additional plugin information. NAME is the name passed to\n+   plugin_init. INFO is the information that should be registered. */\n+\n+static void\n+register_plugin_info (const char* name, struct plugin_info *info)\n+{\n+  void **slot = htab_find_slot (plugin_name_args_tab, name, NO_INSERT);\n+  struct plugin_name_args *plugin = (struct plugin_name_args *) *slot;\n+  plugin->version = info->version;\n+}\n+\n /* Called from the plugin's initialization code. Register a single callback.\n    This function can be called multiple times.\n \n@@ -469,6 +482,9 @@ register_callback (const char *plugin_name,\n       case PLUGIN_PASS_MANAGER_SETUP:\n         register_pass (plugin_name, (struct plugin_pass *) user_data);\n         break;\n+      case PLUGIN_INFO:\n+\tregister_plugin_info (plugin_name, (struct plugin_info *) user_data);\n+\tbreak;\n       case PLUGIN_FINISH_TYPE:\n       case PLUGIN_FINISH_UNIT:\n       case PLUGIN_CXX_CP_PRE_GENERICIZE:\n@@ -541,18 +557,11 @@ invoke_plugin_callbacks (enum plugin_event event, void *gcc_data)\n #define PTR_UNION_AS_VOID_PTR(NAME) (NAME._q)\n #define PTR_UNION_AS_CAST_PTR(NAME) (NAME._nq)\n \n-/* Routine to dlopen and initialize one plugin. This function is passed to\n-   (and called by) the hash table traverse routine. Return 1 for the\n-   htab_traverse to continue scan, 0 to stop.\n+/* Try to initialize PLUGIN. Return true if successful. */\n \n-   SLOT - slot of the hash table element\n-   INFO - auxiliary pointer handed to hash table traverse routine\n-          (unused in this function)  */\n-\n-static int\n-init_one_plugin (void **slot, void * ARG_UNUSED (info))\n+static bool\n+try_init_one_plugin (struct plugin_name_args *plugin)\n {\n-  struct plugin_name_args *plugin = (struct plugin_name_args *) *slot;\n   void *dl_handle;\n   plugin_init_func plugin_init;\n   char *err;\n@@ -562,7 +571,7 @@ init_one_plugin (void **slot, void * ARG_UNUSED (info))\n   if (!dl_handle)\n     {\n       error (\"Cannot load plugin %s\\n%s\", plugin->full_name, dlerror ());\n-      return 1;\n+      return false;\n     }\n \n   /* Clear any existing error.  */\n@@ -576,24 +585,41 @@ init_one_plugin (void **slot, void * ARG_UNUSED (info))\n     {\n       error (\"Cannot find %s in plugin %s\\n%s\", str_plugin_init_func_name,\n              plugin->full_name, err);\n-      return 1;\n+      return false;\n     }\n \n   /* Call the plugin-provided initialization routine with the arguments.  */\n   if ((*plugin_init) (plugin->base_name, plugin->argc, plugin->argv))\n     {\n       error (\"Fail to initialize plugin %s\", plugin->full_name);\n-      return 1;\n+      return false;\n     }\n \n-  /* We can now delete the plugin_name_args object as it will no longer\n-     be used. Note that base_name and argv fields (both of which were also\n-     dynamically allocated) are not freed as they could still be used by\n-     the plugin code.  */\n-  XDELETE (plugin);\n+  return true;\n+}\n+\n+\n+/* Routine to dlopen and initialize one plugin. This function is passed to\n+   (and called by) the hash table traverse routine. Return 1 for the\n+   htab_traverse to continue scan, 0 to stop.\n+\n+   SLOT - slot of the hash table element\n+   INFO - auxiliary pointer handed to hash table traverse routine\n+          (unused in this function)  */\n \n+static int\n+init_one_plugin (void **slot, void * ARG_UNUSED (info))\n+{\n+  struct plugin_name_args *plugin = (struct plugin_name_args *) *slot;\n+  bool ok = try_init_one_plugin (plugin);\n+  if (!ok)\n+    {\n+      htab_remove_elt (plugin_name_args_tab, plugin->base_name);\n+      XDELETE (plugin);\n+    }\n   return 1;\n }\n+\n #endif\t/* ENABLE_PLUGIN  */\n \n /* Main plugin initialization function.  Called from compile_file() in\n@@ -613,11 +639,73 @@ initialize_plugins (void)\n   htab_traverse_noresize (plugin_name_args_tab, init_one_plugin, NULL);\n #endif\n \n+  timevar_pop (TV_PLUGIN_INIT);\n+}\n+\n+/* Release memory used by one plugin. */\n+\n+static int\n+finalize_one_plugin (void **slot, void * ARG_UNUSED (info))\n+{\n+  struct plugin_name_args *plugin = (struct plugin_name_args *) *slot;\n+  XDELETE (plugin);\n+  return 1;\n+}\n+\n+/* Free memory allocated by the plugin system. */\n+\n+void\n+finalize_plugins (void)\n+{\n+  if (!plugin_name_args_tab)\n+    return;\n+\n+  /* We can now delete the plugin_name_args object as it will no longer\n+     be used. Note that base_name and argv fields (both of which were also\n+     dynamically allocated) are not freed as they could still be used by\n+     the plugin code.  */\n+\n+  htab_traverse_noresize (plugin_name_args_tab, finalize_one_plugin, NULL);\n+\n   /* PLUGIN_NAME_ARGS_TAB is no longer needed, just delete it.  */\n   htab_delete (plugin_name_args_tab);\n   plugin_name_args_tab = NULL;\n+}\n \n-  timevar_pop (TV_PLUGIN_INIT);\n+/* Used to pass options to htab_traverse callbacks. */\n+\n+struct print_options\n+{\n+  FILE *file;\n+  const char *indent;\n+};\n+\n+/* Print the version of one plugin. */\n+\n+static int\n+print_version_one_plugin (void **slot, void *data)\n+{\n+  struct print_options *opt = (struct print_options *) data;\n+  struct plugin_name_args *plugin = (struct plugin_name_args *) *slot;\n+  const char *version = plugin->version ? plugin->version : \"Unknown version.\";\n+\n+  fprintf (opt->file, \" %s%s: %s\\n\", opt->indent, plugin->base_name, version);\n+  return 1;\n+}\n+\n+/* Print the version of each plugin. */\n+\n+void\n+print_plugins_versions (FILE *file, const char *indent)\n+{\n+  struct print_options opt;\n+  opt.file = file;\n+  opt.indent = indent;\n+  if (!plugin_name_args_tab || htab_elements (plugin_name_args_tab) == 0)\n+    return;\n+\n+  fprintf (file, \"%sVersions of loaded plugins:\\n\", indent);\n+  htab_traverse_noresize (plugin_name_args_tab, print_version_one_plugin, &opt);\n }\n \n "}, {"sha": "d8cf6919a4a9d058c42f0bdf4de5e343712db40b", "filename": "gcc/plugin.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e9f0067860f38c31869181263a395ab43981d7/gcc%2Fplugin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e9f0067860f38c31869181263a395ab43981d7/gcc%2Fplugin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fplugin.h?ref=44e9f0067860f38c31869181263a395ab43981d7", "patch": "@@ -29,5 +29,7 @@ extern void initialize_plugins (void);\n extern bool plugins_active_p (void);\n extern void dump_active_plugins (FILE *);\n extern void debug_active_plugins (void);\n+extern void print_plugins_versions (FILE *file, const char *indent);\n+extern void finalize_plugins (void);\n \n #endif /* PLUGIN_H */"}, {"sha": "725c3762767035c985adb5e71b766eb1dc376cda", "filename": "gcc/toplev.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e9f0067860f38c31869181263a395ab43981d7/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e9f0067860f38c31869181263a395ab43981d7/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=44e9f0067860f38c31869181263a395ab43981d7", "patch": "@@ -969,7 +969,6 @@ compile_file (void)\n   init_final (main_input_filename);\n   coverage_init (aux_base_name);\n   statistics_init ();\n-  initialize_plugins ();\n \n   timevar_push (TV_PARSE);\n \n@@ -1164,6 +1163,8 @@ print_version (FILE *file, const char *indent)\n \t   file == stderr ? _(fmt4) : fmt4,\n \t   indent, *indent != 0 ? \" \" : \"\",\n \t   PARAM_VALUE (GGC_MIN_EXPAND), PARAM_VALUE (GGC_MIN_HEAPSIZE));\n+\n+  print_plugins_versions (file, indent);\n }\n \n #ifdef ASM_COMMENT_START\n@@ -2273,6 +2274,11 @@ toplev_main (unsigned int argc, const char **argv)\n \n   init_local_tick ();\n \n+  initialize_plugins ();\n+\n+  if (version_flag)\n+    print_version (stderr, \"\");\n+\n   /* Exit early if we can (e.g. -help).  */\n   if (!exit_after_options)\n     do_compile ();\n@@ -2283,6 +2289,7 @@ toplev_main (unsigned int argc, const char **argv)\n   /* Invoke registered plugin callbacks if any.  */\n   invoke_plugin_callbacks (PLUGIN_FINISH, NULL);\n \n+  finalize_plugins ();\n   if (errorcount || sorrycount)\n     return (FATAL_EXIT_CODE);\n "}]}