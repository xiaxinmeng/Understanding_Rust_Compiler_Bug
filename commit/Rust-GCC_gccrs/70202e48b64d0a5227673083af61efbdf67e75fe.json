{"sha": "70202e48b64d0a5227673083af61efbdf67e75fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAyMDJlNDhiNjRkMGE1MjI3NjczMDgzYWY2MWVmYmRmNjdlNzVmZQ==", "commit": {"author": {"name": "Johannes Singler", "email": "singler@kit.edu", "date": "2010-01-19T11:18:03Z"}, "committer": {"name": "Johannes Singler", "email": "singler@gcc.gnu.org", "date": "2010-01-19T11:18:03Z"}, "message": "re PR libstdc++/42712 (search_n/iterator.cc times out in parallel-mode)\n\n2010-01-19  Johannes Singler  <singler@kit.edu>\n\n        PR libstdc++/42712\n        * include/parallel/settings.h (_Settings): Add search_minimal_n.\n        * include/parallel/algo.h (__search_switch):\n        Add serial fallback for too small inputs.\n        (__search_n_switch): Likewise.  Call serial fallback on higher level\n        to gain special treatment for __count 0 or 1.\n        * testsuite/25_algorithms/search_n/iterator.cc:\n        Reenable full test depth for parallel mode.\n\nFrom-SVN: r156036", "tree": {"sha": "e2583a4d4fdce7d9884dff6bc81adb8d43c2bfae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2583a4d4fdce7d9884dff6bc81adb8d43c2bfae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70202e48b64d0a5227673083af61efbdf67e75fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70202e48b64d0a5227673083af61efbdf67e75fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70202e48b64d0a5227673083af61efbdf67e75fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70202e48b64d0a5227673083af61efbdf67e75fe/comments", "author": null, "committer": null, "parents": [{"sha": "f7154d497f55ab8dc1bd666422a1adc251a4770a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7154d497f55ab8dc1bd666422a1adc251a4770a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7154d497f55ab8dc1bd666422a1adc251a4770a"}], "stats": {"total": 42, "additions": 29, "deletions": 13}, "files": [{"sha": "9830eb2f6210e5eb04a36a1d4f3f972dac93b944", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70202e48b64d0a5227673083af61efbdf67e75fe/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70202e48b64d0a5227673083af61efbdf67e75fe/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=70202e48b64d0a5227673083af61efbdf67e75fe", "patch": "@@ -1,3 +1,14 @@\n+2010-01-19  Johannes Singler  <singler@kit.edu>\n+\n+\tPR libstdc++/42712\n+\t* include/parallel/settings.h (_Settings): Add search_minimal_n.\n+\t* include/parallel/algo.h (__search_switch):\n+\tAdd serial fallback for too small inputs.\n+\t(__search_n_switch): Likewise.  Call serial fallback on higher level\n+\tto gain special treatment for __count 0 or 1.\n+\t* testsuite/25_algorithms/search_n/iterator.cc:\n+\tReenable full test depth for parallel mode.\n+\n 2010-01-18  Daniel Frey  <d.frey@gmx.de>\n \n \t* include/std/functional (_Bind<_Functor(_Bound_args...)>::"}, {"sha": "43f0826d360abf2e8fbf0d5b08680e1aa9840484", "filename": "libstdc++-v3/include/parallel/algo.h", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70202e48b64d0a5227673083af61efbdf67e75fe/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70202e48b64d0a5227673083af61efbdf67e75fe/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgo.h?ref=70202e48b64d0a5227673083af61efbdf67e75fe", "patch": "@@ -1043,7 +1043,9 @@ namespace __parallel\n       typedef std::iterator_traits<_RAIter2> _Iterator2Traits;\n       typedef typename _Iterator2Traits::value_type _ValueType2;\n \n-      if (_GLIBCXX_PARALLEL_CONDITION(true))\n+      if (_GLIBCXX_PARALLEL_CONDITION(\n+                static_cast<__gnu_parallel::_SequenceIndex>(__end1 - __begin1)\n+            >= __gnu_parallel::_Settings::get().search_minimal_n))\n         return __gnu_parallel::\n           __search_template(\n             __begin1, __end1, __begin2, __end2,\n@@ -1097,7 +1099,9 @@ namespace __parallel\n                   _BinaryPredicate __pred,\n                   random_access_iterator_tag, random_access_iterator_tag)\n     {\n-      if (_GLIBCXX_PARALLEL_CONDITION(true))\n+      if (_GLIBCXX_PARALLEL_CONDITION(\n+                static_cast<__gnu_parallel::_SequenceIndex>(__end1 - __begin1)\n+            >= __gnu_parallel::_Settings::get().search_minimal_n))\n         return __gnu_parallel::__search_template(__begin1, __end1,\n                                                __begin2, __end2, __pred);\n       else\n@@ -1168,15 +1172,17 @@ namespace __parallel\n                       const _Tp& __val, _BinaryPredicate __binary_pred,\n                       random_access_iterator_tag)\n     {\n-      if (_GLIBCXX_PARALLEL_CONDITION(true))\n+      if (_GLIBCXX_PARALLEL_CONDITION(\n+                static_cast<__gnu_parallel::_SequenceIndex>(__end - __begin)\n+            >= __gnu_parallel::_Settings::get().search_minimal_n))\n         {\n           __gnu_parallel::_PseudoSequence<_Tp, _Integer> __ps(__val, __count);\n           return __gnu_parallel::__search_template(\n                    __begin, __end, __ps.begin(), __ps.end(), __binary_pred);\n         }\n       else\n-        return std::__search_n(__begin, __end, __count, __val,\n-                               __binary_pred, random_access_iterator_tag());\n+        return _GLIBCXX_STD_P::search_n(__begin, __end, __count, __val,\n+                                        __binary_pred);\n     }\n \n   // Sequential fallback for input iterator case.\n@@ -1186,8 +1192,8 @@ namespace __parallel\n     __search_n_switch(_FIterator __begin, _FIterator __end, _Integer __count,\n                       const _Tp& __val, _BinaryPredicate __binary_pred,\n                       _IteratorTag)\n-    { return __search_n(__begin, __end, __count, __val, __binary_pred,\n-                        _IteratorTag()); }\n+    { return _GLIBCXX_STD_P::search_n(__begin, __end, __count, __val,\n+                                      __binary_pred); }\n \n   // Public interface.\n   template<typename _FIterator, typename _Integer, typename _Tp,"}, {"sha": "3b326ff8e4746df90df54d803a5b1f83af7d5c34", "filename": "libstdc++-v3/include/parallel/settings.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70202e48b64d0a5227673083af61efbdf67e75fe/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fsettings.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70202e48b64d0a5227673083af61efbdf67e75fe/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fsettings.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fsettings.h?ref=70202e48b64d0a5227673083af61efbdf67e75fe", "patch": "@@ -269,6 +269,9 @@ namespace __gnu_parallel\n     /// The number of stolen ranges in load-balanced quicksort.\n     _SequenceIndex              qsb_steals;\n \n+    /// Minimal input size for search and search_n.\n+    _SequenceIndex              search_minimal_n;\n+\n     /// Get the global settings.\n     _GLIBCXX_CONST static const _Settings&\n     get() throw();\n@@ -327,7 +330,8 @@ namespace __gnu_parallel\n             L2_cache_size(256 << 10),\n             TLB_size(128),\n             cache_line_size(64),\n-            qsb_steals(0)\n+            qsb_steals(0),\n+            search_minimal_n(1000)\n     { }\n   };\n }"}, {"sha": "d7be297f05d70adb56df5e16c96e27650c7eaea3", "filename": "libstdc++-v3/testsuite/25_algorithms/search_n/iterator.cc", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70202e48b64d0a5227673083af61efbdf67e75fe/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch_n%2Fiterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70202e48b64d0a5227673083af61efbdf67e75fe/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch_n%2Fiterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch_n%2Fiterator.cc?ref=70202e48b64d0a5227673083af61efbdf67e75fe", "patch": "@@ -25,11 +25,6 @@\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n \n-// XXX FIXME: why parallel-mode is so slow?\n-#if !defined(TEST_DEPTH) && defined(_GLIBCXX_PARALLEL)\n-#define TEST_DEPTH 10\n-#endif\n-\n #ifndef TEST_DEPTH\n #define TEST_DEPTH 14\n #endif"}]}