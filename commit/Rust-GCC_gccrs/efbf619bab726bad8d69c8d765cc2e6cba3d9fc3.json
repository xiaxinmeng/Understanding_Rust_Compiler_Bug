{"sha": "efbf619bab726bad8d69c8d765cc2e6cba3d9fc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZiZjYxOWJhYjcyNmJhZDhkNjljOGQ3NjVjYzJlNmNiYTNkOWZjMw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-04-10T14:43:09Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-04-10T14:43:09Z"}, "message": "gdbhooks: Add new pretty-printers for: varpool_node, symtab_node, cgraph_edge and ipa_ref.\n\n2018-04-10  Martin Liska  <mliska@suse.cz>\n\n\t* gdbhooks.py: Add pretty-printers for varpool_node, symtab_node,\n\tcgraph_edge and ipa_ref.\n\nFrom-SVN: r259283", "tree": {"sha": "4538850d81504d23e8af7aeb58e3f6566a9f3233", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4538850d81504d23e8af7aeb58e3f6566a9f3233"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efbf619bab726bad8d69c8d765cc2e6cba3d9fc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efbf619bab726bad8d69c8d765cc2e6cba3d9fc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efbf619bab726bad8d69c8d765cc2e6cba3d9fc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efbf619bab726bad8d69c8d765cc2e6cba3d9fc3/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "672c767bf6dfbebc22062403e9e8cfc0f6e290ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/672c767bf6dfbebc22062403e9e8cfc0f6e290ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/672c767bf6dfbebc22062403e9e8cfc0f6e290ac"}], "stats": {"total": 59, "additions": 52, "deletions": 7}, "files": [{"sha": "aee206041a392cea37bb0241e8af51abe70314f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efbf619bab726bad8d69c8d765cc2e6cba3d9fc3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efbf619bab726bad8d69c8d765cc2e6cba3d9fc3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=efbf619bab726bad8d69c8d765cc2e6cba3d9fc3", "patch": "@@ -1,3 +1,8 @@\n+2018-04-10  Martin Liska  <mliska@suse.cz>\n+\n+\t* gdbhooks.py: Add pretty-printers for varpool_node, symtab_node,\n+\tcgraph_edge and ipa_ref.\n+\n 2018-04-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/85177"}, {"sha": "e9913e0eb32c12a9629531300c6fc289575f0240", "filename": "gcc/gdbhooks.py", "status": "modified", "additions": 47, "deletions": 7, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efbf619bab726bad8d69c8d765cc2e6cba3d9fc3/gcc%2Fgdbhooks.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efbf619bab726bad8d69c8d765cc2e6cba3d9fc3/gcc%2Fgdbhooks.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgdbhooks.py?ref=efbf619bab726bad8d69c8d765cc2e6cba3d9fc3", "patch": "@@ -105,10 +105,19 @@\n Callgraph nodes are printed with the name of the function decl, if\n available:\n   (gdb) frame 5\n-  #5  0x00000000006c288a in expand_function (node=<cgraph_node* 0x7ffff0312720 \"foo\">) at ../../src/gcc/cgraphunit.c:1594\n+  #5  0x00000000006c288a in expand_function (node=<cgraph_node* 0x7ffff0312720 \"foo\"/12345>) at ../../src/gcc/cgraphunit.c:1594\n   1594\t  execute_pass_list (g->get_passes ()->all_passes);\n   (gdb) p node\n-  $1 = <cgraph_node* 0x7ffff0312720 \"foo\">\n+  $1 = <cgraph_node* 0x7ffff0312720 \"foo\"/12345>\n+\n+Similarly for symtab_node and varpool_node classes.\n+\n+Cgraph edges are printed with the name of caller and callee:\n+    (gdb) p this->callees\n+    $4 = <cgraph_edge* 0x7fffe25aa000 (<cgraph_node * 0x7fffe62b22e0 \"_GLOBAL__sub_I__ZN5Pooma5pinfoE\"/19660> -> <cgraph_node * 0x7fffe620f730 \"__static_initialization_and_destruction_1\"/19575>)>\n+\n+IPA reference follow very similar format:\n+    (gdb) Value returned is $5 = <ipa_ref* 0x7fffefcb80c8 (<symtab_node * 0x7ffff562f000 \"__dt_base \"/875> -> <symtab_node * 0x7fffe795f000 \"_ZTVN6Smarts8RunnableE\"/16056>:IPA_REF_ADDR)>\n \n vec<> pointers are printed as the address followed by the elements in\n braces.  Here's a length 2 vec:\n@@ -245,18 +254,45 @@ def to_string (self):\n # Callgraph pretty-printers\n ######################################################################\n \n-class CGraphNodePrinter:\n+class SymtabNodePrinter:\n     def __init__(self, gdbval):\n         self.gdbval = gdbval\n \n     def to_string (self):\n-        result = '<cgraph_node* 0x%x' % intptr(self.gdbval)\n+        t = str(self.gdbval.type)\n+        result = '<%s 0x%x' % (t, intptr(self.gdbval))\n         if intptr(self.gdbval):\n             # symtab_node::name calls lang_hooks.decl_printable_name\n             # default implementation (lhd_decl_printable_name) is:\n             #    return IDENTIFIER_POINTER (DECL_NAME (decl));\n             tree_decl = Tree(self.gdbval['decl'])\n-            result += ' \"%s\"' % tree_decl.DECL_NAME().IDENTIFIER_POINTER()\n+            result += ' \"%s\"/%d' % (tree_decl.DECL_NAME().IDENTIFIER_POINTER(), self.gdbval['order'])\n+        result += '>'\n+        return result\n+\n+class CgraphEdgePrinter:\n+    def __init__(self, gdbval):\n+        self.gdbval = gdbval\n+\n+    def to_string (self):\n+        result = '<cgraph_edge* 0x%x' % intptr(self.gdbval)\n+        if intptr(self.gdbval):\n+            src = SymtabNodePrinter(self.gdbval['caller']).to_string()\n+            dest = SymtabNodePrinter(self.gdbval['callee']).to_string()\n+            result += ' (%s -> %s)' % (src, dest)\n+        result += '>'\n+        return result\n+\n+class IpaReferencePrinter:\n+    def __init__(self, gdbval):\n+        self.gdbval = gdbval\n+\n+    def to_string (self):\n+        result = '<ipa_ref* 0x%x' % intptr(self.gdbval)\n+        if intptr(self.gdbval):\n+            src = SymtabNodePrinter(self.gdbval['referring']).to_string()\n+            dest = SymtabNodePrinter(self.gdbval['referred']).to_string()\n+            result += ' (%s -> %s:%s)' % (src, dest, str(self.gdbval['use']))\n         result += '>'\n         return result\n \n@@ -503,8 +539,12 @@ def build_pretty_printer():\n     pp = GdbPrettyPrinters('gcc')\n     pp.add_printer_for_types(['tree'],\n                              'tree', TreePrinter)\n-    pp.add_printer_for_types(['cgraph_node *'],\n-                             'cgraph_node', CGraphNodePrinter)\n+    pp.add_printer_for_types(['cgraph_node *', 'varpool_node *', 'symtab_node *'],\n+                             'symtab_node', SymtabNodePrinter)\n+    pp.add_printer_for_types(['cgraph_edge *'],\n+                             'cgraph_edge', CgraphEdgePrinter)\n+    pp.add_printer_for_types(['ipa_ref *'],\n+                             'ipa_ref', IpaReferencePrinter)\n     pp.add_printer_for_types(['dw_die_ref'],\n                              'dw_die_ref', DWDieRefPrinter)\n     pp.add_printer_for_types(['gimple', 'gimple *',"}]}