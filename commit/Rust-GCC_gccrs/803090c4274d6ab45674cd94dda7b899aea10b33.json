{"sha": "803090c4274d6ab45674cd94dda7b899aea10b33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODAzMDkwYzQyNzRkNmFiNDU2NzRjZDk0ZGRhN2I4OTlhZWExMGIzMw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-08-30T02:38:56Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-08-30T02:38:56Z"}, "message": "(emit_library_call): Pass correct number of args to convert_to_mode.\n\n(emit_block_move): Eliminate unnecessary test against HOST_BITS_PER_WIDE_INT.\n\nFrom-SVN: r1994", "tree": {"sha": "7460602cf92021342fd1af6ceb1da38d02a4f7e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7460602cf92021342fd1af6ceb1da38d02a4f7e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/803090c4274d6ab45674cd94dda7b899aea10b33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/803090c4274d6ab45674cd94dda7b899aea10b33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/803090c4274d6ab45674cd94dda7b899aea10b33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/803090c4274d6ab45674cd94dda7b899aea10b33/comments", "author": null, "committer": null, "parents": [{"sha": "c86087060073071ee5d6b8b14be211a6ff0eb95e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c86087060073071ee5d6b8b14be211a6ff0eb95e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c86087060073071ee5d6b8b14be211a6ff0eb95e"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "f727956dd12510be0a58a25144bc847eff28a0c6", "filename": "gcc/expr.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/803090c4274d6ab45674cd94dda7b899aea10b33/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/803090c4274d6ab45674cd94dda7b899aea10b33/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=803090c4274d6ab45674cd94dda7b899aea10b33", "patch": "@@ -1189,7 +1189,10 @@ emit_block_move (x, y, size, align)\n \t  enum insn_code code = movstr_optab[(int) mode];\n \n \t  if (code != CODE_FOR_nothing\n-\t      && GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT\n+\t      /* We don't need MODE to be narrower than BITS_PER_HOST_WIDE_INT\n+\t\t here because if SIZE is less than the mode mask, as it is\n+\t\t returned by the macro, it will definately be less than the\n+\t\t actual mode mask.  */\n \t      && (unsigned) INTVAL (size) <= GET_MODE_MASK (mode)\n \t      && (insn_operand_predicate[(int) code][0] == 0\n \t\t  || (*insn_operand_predicate[(int) code][0]) (x, BLKmode))\n@@ -1887,7 +1890,7 @@ emit_library_call (va_alist)\n \t Pass it as a double instead.  */\n #ifdef LIBGCC_NEEDS_DOUBLE\n       if (LIBGCC_NEEDS_DOUBLE && mode == SFmode)\n-\tval = convert_to_mode (DFmode, val), mode = DFmode;\n+\tval = convert_to_mode (DFmode, val, 0), mode = DFmode;\n #endif\n \n       /* There's no need to call protect_from_queue, because"}]}