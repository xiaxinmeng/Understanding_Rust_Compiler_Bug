{"sha": "091fe099ba9093b8577ad4a10b56e18c6ea3daea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDkxZmUwOTliYTkwOTNiODU3N2FkNGExMGI1NmUxOGM2ZWEzZGFlYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-26T04:09:57Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-26T18:41:05Z"}, "message": "checking: avoid verify_type_variant crash on incomplete type.\n\nHere, we end up calling gen_type_die_with_usage for a type that's in the\nmiddle of finish_struct_1, after we set TYPE_NEEDS_CONSTRUCTING on it but\nbefore we copy all the flags to the variants--and, significantly, before we\nset its TYPE_SIZE.  It seems reasonable to only look at\nTYPE_NEEDS_CONSTRUCTING on complete types, since we aren't going to try to\ncreate an object of an incomplete type any other way.\n\n\tPR c++/92601\n\t* tree.c (verify_type_variant): Only verify TYPE_NEEDS_CONSTRUCTING\n\tof complete types.", "tree": {"sha": "57cf93c8d10aa9c80e46a6c1e56288578f0cdb93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57cf93c8d10aa9c80e46a6c1e56288578f0cdb93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/091fe099ba9093b8577ad4a10b56e18c6ea3daea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/091fe099ba9093b8577ad4a10b56e18c6ea3daea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/091fe099ba9093b8577ad4a10b56e18c6ea3daea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/091fe099ba9093b8577ad4a10b56e18c6ea3daea/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f6f39ed733e9462dbeef9dd56d52b21b8cd67c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f6f39ed733e9462dbeef9dd56d52b21b8cd67c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f6f39ed733e9462dbeef9dd56d52b21b8cd67c5"}], "stats": {"total": 72, "additions": 71, "deletions": 1}, "files": [{"sha": "e983d5233b1c3efdfa089c4f5db5edd6646ac59e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091fe099ba9093b8577ad4a10b56e18c6ea3daea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091fe099ba9093b8577ad4a10b56e18c6ea3daea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=091fe099ba9093b8577ad4a10b56e18c6ea3daea", "patch": "@@ -1,3 +1,9 @@\n+2020-01-26  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/92601\n+\t* tree.c (verify_type_variant): Only verify TYPE_NEEDS_CONSTRUCTING\n+\tof complete types.\n+\n 2020-01-26  Darius Galis  <darius.galis@cyberthorstudios.com>\n \n \t* config/rx/rx.md (setmemsi): Added rx_allow_string_insns constraint"}, {"sha": "67e407251a185094ff74e81ffc54253cc7f7f075", "filename": "gcc/testsuite/g++.dg/debug/verify1.C", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091fe099ba9093b8577ad4a10b56e18c6ea3daea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fverify1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091fe099ba9093b8577ad4a10b56e18c6ea3daea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fverify1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fverify1.C?ref=091fe099ba9093b8577ad4a10b56e18c6ea3daea", "patch": "@@ -0,0 +1,64 @@\n+// PR c++/92601\n+// { dg-additional-options \"-g -fchecking -std=c++17\" }\n+\n+typedef int size_t;\n+template <typename, int __v> struct integral_constant {\n+  static constexpr int value = __v;\n+};\n+template <typename> struct A;\n+template <typename _Tp> using __remove_cv_t = typename A<_Tp>::type;\n+template <typename _Tp, typename _Up>\n+struct B : integral_constant<bool, __is_same_as(_Tp, _Up)> {};\n+template <typename...> class tuple;\n+template <typename> struct A {\n+  using type = tuple<const char *, const char *>;\n+};\n+template <typename> struct C { typedef __remove_cv_t<int> __type; };\n+template <typename _Tp> class D {\n+public:\n+  typedef typename C<_Tp>::__type type;\n+};\n+template <bool> struct enable_if;\n+template <int> struct F {};\n+template <typename, typename> class G {\n+public:\n+  int operator*();\n+  void operator++();\n+};\n+template <typename _Iterator, typename _Container>\n+bool operator!=(G<_Iterator, _Container>, G<_Iterator, _Container>);\n+template <typename> class H;\n+template <typename = H<tuple<const char *, const char *>>> class vector {\n+public:\n+  typedef G<int, vector> iterator;\n+  iterator begin();\n+  iterator end();\n+};\n+template <typename> struct pack_c { typedef pack_c type; };\n+template <typename, typename> struct make_index_pack_join;\n+template <size_t... Left, size_t... Right>\n+struct make_index_pack_join<pack_c<size_t, Left...>, pack_c<size_t, Right...>>\n+    : pack_c<size_t> {};\n+template <int N>\n+struct I\n+    : make_index_pack_join<typename I<N / 2>::type, typename I<N / 2>::type> {};\n+template <> struct I<1> : pack_c<size_t> {};\n+template <typename TTuple, typename>\n+struct are_tuples_compatible_not_same\n+    : F<B<typename D<TTuple>::type, int>::value> {};\n+template <typename...> struct tuple_impl;\n+template <size_t... Is, typename... Ts>\n+struct tuple_impl<pack_c<size_t, Is...>, Ts...> {\n+  template <typename UTuple, typename enable_if<are_tuples_compatible_not_same<\n+                                 tuple<>, UTuple>::value>::type>\n+  tuple_impl(UTuple &&);\n+};\n+template <typename... Ts> class tuple {\n+  tuple_impl<typename I<sizeof...(Ts)>::type> _impl;\n+  tuple(tuple &) = default;\n+};\n+vector message_handler_registrations;\n+void fn1() {\n+  for (auto t : message_handler_registrations)\n+    ;\n+}"}, {"sha": "298499fe87692f6da9c84e969cd5e860d0638460", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091fe099ba9093b8577ad4a10b56e18c6ea3daea/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091fe099ba9093b8577ad4a10b56e18c6ea3daea/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=091fe099ba9093b8577ad4a10b56e18c6ea3daea", "patch": "@@ -13881,9 +13881,9 @@ verify_type_variant (const_tree t, tree tv)\n \t  debug_tree (TYPE_SIZE_UNIT (t));\n \t  return false;\n \t}\n+      verify_variant_match (TYPE_NEEDS_CONSTRUCTING);\n     }\n   verify_variant_match (TYPE_PRECISION);\n-  verify_variant_match (TYPE_NEEDS_CONSTRUCTING);\n   if (RECORD_OR_UNION_TYPE_P (t))\n     verify_variant_match (TYPE_TRANSPARENT_AGGR);\n   else if (TREE_CODE (t) == ARRAY_TYPE)"}]}