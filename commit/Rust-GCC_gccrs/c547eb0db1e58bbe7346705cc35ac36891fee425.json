{"sha": "c547eb0db1e58bbe7346705cc35ac36891fee425", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU0N2ViMGRiMWU1OGJiZTczNDY3MDVjYzM1YWMzNjg5MWZlZTQyNQ==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2010-06-08T18:14:28Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2010-06-08T18:14:28Z"}, "message": "pdp11.h (FUNCTION_VALUE, [...]): Remove macros.\n\n\t* config/pdp11/pdp11.h (FUNCTION_VALUE, FUNCTION_OUTGOING_VALUE,\n\tLIBCALL_VALUE, FUNCTION_VALUE_REGNO_P): Remove macros.\n\t* config/pdp11/pdp11.c (moxie_function_value, moxie_libcall_value,\n\tmoxie_function_value_regno_p): New functions.\n\t(TARGET_FUNCTION_VALUE, TARGET_LIBCALL_VALUE,\n\tTARGET_FUNCTION_VALUE_REGNO_P): Define.\n\nFrom-SVN: r160444", "tree": {"sha": "eed44730b88165f0d88cec30afff025f75bef4bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eed44730b88165f0d88cec30afff025f75bef4bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c547eb0db1e58bbe7346705cc35ac36891fee425", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c547eb0db1e58bbe7346705cc35ac36891fee425", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c547eb0db1e58bbe7346705cc35ac36891fee425", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c547eb0db1e58bbe7346705cc35ac36891fee425/comments", "author": null, "committer": null, "parents": [{"sha": "6f5e9b8df6cdb8d8905816a53b09fd57a3a8ce49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f5e9b8df6cdb8d8905816a53b09fd57a3a8ce49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f5e9b8df6cdb8d8905816a53b09fd57a3a8ce49"}], "stats": {"total": 82, "additions": 55, "deletions": 27}, "files": [{"sha": "71376663bed20196b0f5da41ed19f658c5d253ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c547eb0db1e58bbe7346705cc35ac36891fee425/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c547eb0db1e58bbe7346705cc35ac36891fee425/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c547eb0db1e58bbe7346705cc35ac36891fee425", "patch": "@@ -1,3 +1,12 @@\n+2010-06-08  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/pdp11/pdp11.h (FUNCTION_VALUE, FUNCTION_OUTGOING_VALUE,\n+\tLIBCALL_VALUE, FUNCTION_VALUE_REGNO_P): Remove macros.\n+\t* config/pdp11/pdp11.c (moxie_function_value, moxie_libcall_value,\n+\tmoxie_function_value_regno_p): New functions.\n+\t(TARGET_FUNCTION_VALUE, TARGET_LIBCALL_VALUE,\n+\tTARGET_FUNCTION_VALUE_REGNO_P): Define.\n+\n 2010-06-08  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* config/arm/arm.c (arm_rtx_costs_1): Don't special case for"}, {"sha": "15e8a545f09eece446bfbe9c58de33bf21acf276", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c547eb0db1e58bbe7346705cc35ac36891fee425/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c547eb0db1e58bbe7346705cc35ac36891fee425/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=c547eb0db1e58bbe7346705cc35ac36891fee425", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines for gcc2 for pdp11.\n    Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2001, 2004, 2005,\n-   2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n+   2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Michael K. Gschwind (mike@vlsivie.tuwien.ac.at).\n \n This file is part of GCC.\n@@ -151,6 +151,9 @@ static void pdp11_output_function_prologue (FILE *, HOST_WIDE_INT);\n static void pdp11_output_function_epilogue (FILE *, HOST_WIDE_INT);\n static bool pdp11_rtx_costs (rtx, int, int, int *, bool);\n static bool pdp11_return_in_memory (const_tree, const_tree);\n+static rtx pdp11_function_value (const_tree, const_tree, bool);\n+static rtx pdp11_libcall_value (enum machine_mode, const_rtx);\n+static bool pdp11_function_value_regno_p (const unsigned int);\n static void pdp11_trampoline_init (rtx, tree, rtx);\n \f\n /* Initialize the GCC target structure.  */\n@@ -185,6 +188,13 @@ static void pdp11_trampoline_init (rtx, tree, rtx);\n #undef TARGET_RETURN_IN_MEMORY\n #define TARGET_RETURN_IN_MEMORY pdp11_return_in_memory\n \n+#undef TARGET_FUNCTION_VALUE\n+#define TARGET_FUNCTION_VALUE pdp11_function_value\n+#undef TARGET_LIBCALL_VALUE\n+#define TARGET_LIBCALL_VALUE pdp11_libcall_value\n+#undef TARGET_FUNCTION_VALUE_REGNO_P\n+#define TARGET_FUNCTION_VALUE_REGNO_P pdp11_function_value_regno_p\n+\n #undef TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT pdp11_trampoline_init\n \n@@ -1744,6 +1754,40 @@ pdp11_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n \t  || (TYPE_MODE (type) == DFmode && ! TARGET_AC0));\n }\n \n+/* Worker function for TARGET_FUNCTION_VALUE.\n+\n+   On the pdp11 the value is found in R0 (or ac0??? not without FPU!!!! )  */\n+\n+static rtx\n+pdp11_function_value (const_tree valtype, \n+ \t\t      const_tree fntype_or_decl ATTRIBUTE_UNUSED,\n+ \t\t      bool outgoing ATTRIBUTE_UNUSED)\n+{\n+  return gen_rtx_REG (TYPE_MODE (valtype),\n+\t\t      BASE_RETURN_VALUE_REG(TYPE_MODE(valtype)));\n+}\n+\n+/* Worker function for TARGET_LIBCALL_VALUE.  */\n+\n+static rtx\n+pdp11_libcall_value (enum machine_mode mode,\n+                     const_rtx fun ATTRIBUTE_UNUSED)\n+{\n+  return  gen_rtx_REG (mode, BASE_RETURN_VALUE_REG(mode));\n+}\n+\n+/* Worker function for TARGET_FUNCTION_VALUE_REGNO_P.\n+\n+   On the pdp, the first \"output\" reg is the only register thus used.\n+\n+   maybe ac0 ? - as option someday!  */\n+\n+static bool\n+pdp11_function_value_regno_p (const unsigned int regno)\n+{\n+  return (regno == 0) || (TARGET_AC0 && (regno == 8));\n+}\n+\n /* Worker function for TARGET_TRAMPOLINE_INIT.\n \n    trampoline - how should i do it in separate i+d ? "}, {"sha": "15eef844a340ff2e451564ebfbdbcd07d4d248ba", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c547eb0db1e58bbe7346705cc35ac36891fee425/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c547eb0db1e58bbe7346705cc35ac36891fee425/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=c547eb0db1e58bbe7346705cc35ac36891fee425", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for the pdp-11\n    Copyright (C) 1994, 1995, 1996, 1998, 1999, 2000, 2001, 2002, 2004, 2005,\n-   2006, 2007, 2008 Free Software Foundation, Inc.\n+   2006, 2007, 2008, 2010 Free Software Foundation, Inc.\n    Contributed by Michael K. Gschwind (mike@vlsivie.tuwien.ac.at).\n \n This file is part of GCC.\n@@ -450,31 +450,6 @@ extern int current_first_parm_offset;\n #define BASE_RETURN_VALUE_REG(MODE) \\\n  ((MODE) == DFmode ? 8 : 0) \n \n-/* On the pdp11 the value is found in R0 (or ac0??? \n-not without FPU!!!! ) */\n-\n-#define FUNCTION_VALUE(VALTYPE, FUNC)  \\\n-  gen_rtx_REG (TYPE_MODE (VALTYPE), BASE_RETURN_VALUE_REG(TYPE_MODE(VALTYPE)))\n-\n-/* and the called function leaves it in the first register.\n-   Difference only on machines with register windows.  */\n-\n-#define FUNCTION_OUTGOING_VALUE(VALTYPE, FUNC)  \\\n-  gen_rtx_REG (TYPE_MODE (VALTYPE), BASE_RETURN_VALUE_REG(TYPE_MODE(VALTYPE)))\n-\n-/* Define how to find the value returned by a library function\n-   assuming the value has mode MODE.  */\n-\n-#define LIBCALL_VALUE(MODE)  gen_rtx_REG (MODE, BASE_RETURN_VALUE_REG(MODE))\n-\n-/* 1 if N is a possible register number for a function value\n-   as seen by the caller.\n-   On the pdp, the first \"output\" reg is the only register thus used. \n-\n-maybe ac0 ? - as option someday! */\n-\n-#define FUNCTION_VALUE_REGNO_P(N) (((N) == 0) || (TARGET_AC0 && (N) == 8))\n-\n /* 1 if N is a possible register number for function argument passing.\n    - not used on pdp */\n "}]}