{"sha": "604617ba2a22e682ba2813a7782607c3b93ca7c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA0NjE3YmEyYTIyZTY4MmJhMjgxM2E3NzgyNjA3YzNiOTNjYTdjMg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-04-27T05:58:05Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-04-27T05:58:05Z"}, "message": "jump.c (invert_jump): Always invert REG_BR_PROB.\n\n        * jump.c (invert_jump): Always invert REG_BR_PROB.  Do it correctly.\n\n        * bb-reorder.c (reorder_basic_blocks): Don't run estimate_probability.\n        * flow.c (calculate_loop_depth): Remove.\n        * output.h (calculate_loop_depth): Don't declare.\n        * toplev.c (rest_of_compilation): Expand calculate_loop_depth\n        inline; run estimate_probability at the same time.\n\nFrom-SVN: r33464", "tree": {"sha": "0935d72565c8f62d3c8af62f67c83e7ecadf6c31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0935d72565c8f62d3c8af62f67c83e7ecadf6c31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/604617ba2a22e682ba2813a7782607c3b93ca7c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/604617ba2a22e682ba2813a7782607c3b93ca7c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/604617ba2a22e682ba2813a7782607c3b93ca7c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/604617ba2a22e682ba2813a7782607c3b93ca7c2/comments", "author": null, "committer": null, "parents": [{"sha": "6777db6d4ae38b136bc0a937afb61e95f5468a6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6777db6d4ae38b136bc0a937afb61e95f5468a6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6777db6d4ae38b136bc0a937afb61e95f5468a6a"}], "stats": {"total": 67, "additions": 33, "deletions": 34}, "files": [{"sha": "1d134c0ee305437dbc0be0daca3db0ba72c46caa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604617ba2a22e682ba2813a7782607c3b93ca7c2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604617ba2a22e682ba2813a7782607c3b93ca7c2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=604617ba2a22e682ba2813a7782607c3b93ca7c2", "patch": "@@ -1,3 +1,13 @@\n+2000-04-26  Richard Henderson  <rth@cygnus.com>\n+\n+\t* jump.c (invert_jump): Always invert REG_BR_PROB.  Do it correctly.\n+\n+\t* bb-reorder.c (reorder_basic_blocks): Don't run estimate_probability.\n+\t* flow.c (calculate_loop_depth): Remove.\n+\t* output.h (calculate_loop_depth): Don't declare.\n+\t* toplev.c (rest_of_compilation): Expand calculate_loop_depth\n+\tinline; run estimate_probability at the same time.\n+\n 2000-04-26  Neil Booth  <NeilB@earthling.net>\n \n \t* cpplib.h: \"~=\" is not a single pp-token."}, {"sha": "7812ff1bab9486e92a3c64e431a9af0b31ad33b3", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604617ba2a22e682ba2813a7782607c3b93ca7c2/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604617ba2a22e682ba2813a7782607c3b93ca7c2/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=604617ba2a22e682ba2813a7782607c3b93ca7c2", "patch": "@@ -813,10 +813,6 @@ reorder_basic_blocks ()\n   /* Dump loop information.  */\n   flow_loops_dump (&loops_info, rtl_dump_file, 0);\n \n-  /* Estimate using heuristics if no profiling info is available.  */\n-  if (! flag_branch_probabilities)\n-    estimate_probability (&loops_info);\n-\n   reorder_last_visited = BASIC_BLOCK (0);\n \n   for (i = 0; i < n_basic_blocks; i++)"}, {"sha": "23402d391204a92bd232f9708c3bdbb171eddb93", "filename": "gcc/flow.c", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604617ba2a22e682ba2813a7782607c3b93ca7c2/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604617ba2a22e682ba2813a7782607c3b93ca7c2/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=604617ba2a22e682ba2813a7782607c3b93ca7c2", "patch": "@@ -2469,23 +2469,6 @@ tidy_fallthru_edges ()\n \ttidy_fallthru_edge (s, b, c);\n     }\n }\n-\n-/* Discover and record the loop depth at the head of each basic block.  */\n-\n-void\n-calculate_loop_depth (dump)\n-     FILE *dump;\n-{\n-  struct loops loops;\n-\n-  /* The loop infrastructure does the real job for us.  */\n-  flow_loops_find (&loops);\n-\n-  if (dump)\n-    flow_loops_dump (&loops, dump, 0);\n-\n-  flow_loops_free (&loops);\n-}\n \f\n /* Perform data flow analysis.\n    F is the first insn of the function; FLAGS is a set of PROP_* flags"}, {"sha": "06b5bd58e26a945429095e8816a5a795def82a68", "filename": "gcc/jump.c", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604617ba2a22e682ba2813a7782607c3b93ca7c2/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604617ba2a22e682ba2813a7782607c3b93ca7c2/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=604617ba2a22e682ba2813a7782607c3b93ca7c2", "patch": "@@ -4431,17 +4431,13 @@ invert_jump (jump, nlabel)\n \n   if (redirect_jump (jump, nlabel))\n     {\n-      if (flag_branch_probabilities)\n-\t{\n-\t  rtx note = find_reg_note (jump, REG_BR_PROB, 0);\n-\n-\t  /* An inverted jump means that a probability taken becomes a\n-\t     probability not taken.  Subtract the branch probability from the\n-\t     probability base to convert it back to a taken probability.\n-\t     (We don't flip the probability on a branch that's never taken.  */\n-\t  if (note && XINT (XEXP (note, 0), 0) >= 0)\n-\t    XINT (XEXP (note, 0), 0) = REG_BR_PROB_BASE - XINT (XEXP (note, 0), 0);\n-\t}\n+      /* An inverted jump means that a probability taken becomes a\n+\t probability not taken.  Subtract the branch probability from the\n+\t probability base to convert it back to a taken probability.  */\n+\n+      rtx note = find_reg_note (jump, REG_BR_PROB, 0);\n+      if (note)\n+\tXEXP (note, 0) = GEN_INT (REG_BR_PROB_BASE - INTVAL (XEXP (note, 0)));\n \n       return 1;\n     }"}, {"sha": "6af8de6bea0302d86be15f88cb0756170ee055ee", "filename": "gcc/output.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604617ba2a22e682ba2813a7782607c3b93ca7c2/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604617ba2a22e682ba2813a7782607c3b93ca7c2/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=604617ba2a22e682ba2813a7782607c3b93ca7c2", "patch": "@@ -134,7 +134,6 @@ extern int regno_clobbered_at_setjmp\tPARAMS ((int));\n extern void dump_flow_info\t\tPARAMS ((FILE *));\n extern void find_basic_blocks\t\tPARAMS ((rtx, int, FILE *));\n extern void cleanup_cfg\t\t\tPARAMS ((rtx));\n-extern void calculate_loop_depth      PARAMS ((FILE *));\n extern void free_basic_block_vars     PARAMS ((int));\n extern void set_block_num             PARAMS ((rtx, int));\n #endif"}, {"sha": "65f7ee807c4fec99610b7bc0ee8ca74b847b991d", "filename": "gcc/toplev.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604617ba2a22e682ba2813a7782607c3b93ca7c2/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604617ba2a22e682ba2813a7782607c3b93ca7c2/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=604617ba2a22e682ba2813a7782607c3b93ca7c2", "patch": "@@ -3246,7 +3246,22 @@ rest_of_compilation (decl)\n        find_basic_blocks (insns, max_reg_num (), rtl_dump_file);\n        cleanup_cfg (insns);\n        if (optimize)\n-\t calculate_loop_depth (rtl_dump_file);\n+\t {\n+\t   struct loops loops;\n+\n+\t   /* Discover and record the loop depth at the head of each basic\n+\t      block.  The loop infrastructure does the real job for us.  */\n+\t   flow_loops_find (&loops);\n+\n+\t   /* Estimate using heuristics if no profiling info is available.  */\n+\t   if (! flag_branch_probabilities)\n+\t     estimate_probability (&loops);\n+\n+\t   if (rtl_dump_file)\n+\t     flow_loops_dump (&loops, rtl_dump_file, 0);\n+\n+\t   flow_loops_free (&loops);\n+\t }\n        life_analysis (insns, rtl_dump_file, PROP_FINAL);\n        mark_constant_function ();\n      });"}]}