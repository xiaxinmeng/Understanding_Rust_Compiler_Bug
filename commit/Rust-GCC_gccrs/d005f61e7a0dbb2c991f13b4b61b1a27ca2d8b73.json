{"sha": "d005f61e7a0dbb2c991f13b4b61b1a27ca2d8b73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDAwNWY2MWU3YTBkYmIyYzk5MWYxM2I0YjYxYjFhMjdjYTJkOGI3Mw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-11-29T19:54:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-11-29T19:54:25Z"}, "message": "re PR fortran/91003 (ICE when compiling LAPACK (CGEGV) with optimization)\n\n2019-11-29  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/91003\n\t* tree-vect-slp.c (vect_mask_constant_operand_p): Pass in the\n\toperand number, avoid handling the non-condition operands of\n\tCOND_EXPRs as comparisons.\n\t(vect_get_constant_vectors): Pass down the operand number.\n\t(vect_get_slp_defs): Likewise.\n\n\t* gfortran.dg/pr91003.f90: New testcase.\n\nFrom-SVN: r278860", "tree": {"sha": "b81bd53d5b8ffaad0acdf0605109ada9cc2737df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b81bd53d5b8ffaad0acdf0605109ada9cc2737df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d005f61e7a0dbb2c991f13b4b61b1a27ca2d8b73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d005f61e7a0dbb2c991f13b4b61b1a27ca2d8b73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d005f61e7a0dbb2c991f13b4b61b1a27ca2d8b73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d005f61e7a0dbb2c991f13b4b61b1a27ca2d8b73/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "24cc0de967b57f7d1d911921e4cd5332b039380a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24cc0de967b57f7d1d911921e4cd5332b039380a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24cc0de967b57f7d1d911921e4cd5332b039380a"}], "stats": {"total": 68, "additions": 62, "deletions": 6}, "files": [{"sha": "98a93a5086e605dfb3bb50cba0fca7df9ab5319d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d005f61e7a0dbb2c991f13b4b61b1a27ca2d8b73/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d005f61e7a0dbb2c991f13b4b61b1a27ca2d8b73/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d005f61e7a0dbb2c991f13b4b61b1a27ca2d8b73", "patch": "@@ -1,3 +1,12 @@\n+2019-11-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/91003\n+\t* tree-vect-slp.c (vect_mask_constant_operand_p): Pass in the\n+\toperand number, avoid handling the non-condition operands of\n+\tCOND_EXPRs as comparisons.\n+\t(vect_get_constant_vectors): Pass down the operand number.\n+\t(vect_get_slp_defs): Likewise.\n+\n 2019-11-29  Frederik Harwath  <frederik@codesourcery.com>\n \n \t* gimple-match-head.c (maybe_resimplify_conditional_op): Use"}, {"sha": "ad1be1daaed9549e7e8f9b12ab1f66a93707605b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d005f61e7a0dbb2c991f13b4b61b1a27ca2d8b73/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d005f61e7a0dbb2c991f13b4b61b1a27ca2d8b73/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d005f61e7a0dbb2c991f13b4b61b1a27ca2d8b73", "patch": "@@ -1,3 +1,8 @@\n+2019-11-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/91003\n+\t* gfortran.dg/pr91003.f90: New testcase.\n+\n 2019-11-29  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR tree-optimization/92677"}, {"sha": "ed5063d6365d42b2ab649f6a0dda05dbea020c95", "filename": "gcc/testsuite/gfortran.dg/pr91003.f90", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d005f61e7a0dbb2c991f13b4b61b1a27ca2d8b73/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91003.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d005f61e7a0dbb2c991f13b4b61b1a27ca2d8b73/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91003.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91003.f90?ref=d005f61e7a0dbb2c991f13b4b61b1a27ca2d8b73", "patch": "@@ -0,0 +1,33 @@\n+! { dg-do compile }\n+! { dg-options \"-Ofast\" }\n+      SUBROUTINE FOO(N, A, B, C, D, E, F, G)\n+      COMPLEX A(*)\n+      LOGICAL H\n+      INTEGER G\n+      REAL I, C, J, F, F1, F2, K, E, L, M, B, D\n+      DO JC = 1, N\n+        K = F*REAL(A(JC))\n+        Z = F*AIMAG(A(JC))\n+        H = .FALSE.\n+        L = G\n+        IF(ABS(Z).LT.D .AND. I.GE. MAX(D, B*C, B*J)) THEN\n+          H = .TRUE.\n+          L = (D / F1) / MAX(D, F2*I)\n+        END IF\n+        IF(ABS(K).LT.D .AND. C.GE. MAX(D, B*I, B*J)) THEN\n+          L = MAX(L, (D / F1) / MAX(D, F2*C))\n+        END IF\n+        IF(ABS(E).LT.D .AND. J.GE. MAX(D, B*C, B*I)) THEN\n+          H = .TRUE.\n+          L = MAX(L, (D / BNRM1) / MAX(D, BNRM2*J))\n+        END IF\n+        IF(H) THEN\n+          M = (L*D)*MAX(ABS(K), ABS(Z), ABS(E))\n+        END IF\n+        IF(H) THEN\n+          K = (L*REAL(A(JC)))*F\n+          Z = (L*AIMAG(A(JC)))*F\n+        END IF\n+        A(JC) = CMPLX(K, Z)\n+      END DO\n+      END"}, {"sha": "e35cb7328bd7602962316eed36a56e9f00e11746", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d005f61e7a0dbb2c991f13b4b61b1a27ca2d8b73/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d005f61e7a0dbb2c991f13b4b61b1a27ca2d8b73/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=d005f61e7a0dbb2c991f13b4b61b1a27ca2d8b73", "patch": "@@ -3447,7 +3447,7 @@ vect_slp_bb (basic_block bb)\n /* Return 1 if vector type STMT_VINFO is a boolean vector.  */\n \n static bool\n-vect_mask_constant_operand_p (stmt_vec_info stmt_vinfo)\n+vect_mask_constant_operand_p (stmt_vec_info stmt_vinfo, unsigned op_num)\n {\n   enum tree_code code = gimple_expr_code (stmt_vinfo->stmt);\n   tree op, vectype;\n@@ -3472,9 +3472,17 @@ vect_mask_constant_operand_p (stmt_vec_info stmt_vinfo)\n       tree cond = gimple_assign_rhs1 (stmt);\n \n       if (TREE_CODE (cond) == SSA_NAME)\n-\top = cond;\n+\t{\n+\t  if (op_num > 0)\n+\t    return VECTOR_BOOLEAN_TYPE_P (STMT_VINFO_VECTYPE (stmt_vinfo));\n+\t  op = cond;\n+\t}\n       else\n-\top = TREE_OPERAND (cond, 0);\n+\t{\n+\t  if (op_num > 1)\n+\t    return VECTOR_BOOLEAN_TYPE_P (STMT_VINFO_VECTYPE (stmt_vinfo));\n+\t  op = TREE_OPERAND (cond, 0);\n+\t}\n \n       if (!vect_is_simple_use (op, stmt_vinfo->vinfo, &dt, &vectype))\n \tgcc_unreachable ();\n@@ -3605,9 +3613,10 @@ duplicate_and_interleave (vec_info *vinfo, gimple_seq *seq, tree vector_type,\n    operands.  */\n \n static void\n-vect_get_constant_vectors (slp_tree op_node, slp_tree slp_node,\n+vect_get_constant_vectors (slp_tree slp_node, unsigned op_num,\n                            vec<tree> *vec_oprnds)\n {\n+  slp_tree op_node = SLP_TREE_CHILDREN (slp_node)[op_num];\n   stmt_vec_info stmt_vinfo = SLP_TREE_SCALAR_STMTS (slp_node)[0];\n   vec_info *vinfo = stmt_vinfo->vinfo;\n   unsigned HOST_WIDE_INT nunits;\n@@ -3629,7 +3638,7 @@ vect_get_constant_vectors (slp_tree op_node, slp_tree slp_node,\n   /* Check if vector type is a boolean vector.  */\n   tree stmt_vectype = STMT_VINFO_VECTYPE (stmt_vinfo);\n   if (VECT_SCALAR_BOOLEAN_TYPE_P (TREE_TYPE (op))\n-      && vect_mask_constant_operand_p (stmt_vinfo))\n+      && vect_mask_constant_operand_p (stmt_vinfo, op_num))\n     vector_type = truth_type_for (stmt_vectype);\n   else\n     vector_type = get_vectype_for_scalar_type (vinfo, TREE_TYPE (op), op_node);\n@@ -3862,7 +3871,7 @@ vect_get_slp_defs (slp_tree slp_node, vec<vec<tree> > *vec_oprnds, unsigned n)\n \t  vect_get_slp_vect_defs (child, &vec_defs);\n \t}\n       else\n-\tvect_get_constant_vectors (child, slp_node, &vec_defs);\n+\tvect_get_constant_vectors (slp_node, i, &vec_defs);\n \n       vec_oprnds->quick_push (vec_defs);\n     }"}]}