{"sha": "3250d724898f2c4af583d67ba86c34193ba86a89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI1MGQ3MjQ4OThmMmM0YWY1ODNkNjdiYTg2YzM0MTkzYmE4NmE4OQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-06-02T16:36:49Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-06-02T16:36:49Z"}, "message": "predict.c (maybe_hot_frequency_p): Break out of...\n\n\n\t* predict.c (maybe_hot_frequency_p): Break out of...\n\t(maybe_hot_bb_p): ... here.\n\t(maybe_hot_edge_p): New.\n\t* tree-ssa-coalesce.c (coalesce_cost_edge): Compute cost based on edge.\n\t* basic-block.h (maybe_hot_edge_p): Declare.\n\nFrom-SVN: r136282", "tree": {"sha": "9966e2434cb3b536d44ef7b732d765660efcb506", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9966e2434cb3b536d44ef7b732d765660efcb506"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3250d724898f2c4af583d67ba86c34193ba86a89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3250d724898f2c4af583d67ba86c34193ba86a89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3250d724898f2c4af583d67ba86c34193ba86a89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3250d724898f2c4af583d67ba86c34193ba86a89/comments", "author": null, "committer": null, "parents": [{"sha": "79711d26dbc325abf22d935cc248bcd59a06eb21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79711d26dbc325abf22d935cc248bcd59a06eb21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79711d26dbc325abf22d935cc248bcd59a06eb21"}], "stats": {"total": 49, "additions": 39, "deletions": 10}, "files": [{"sha": "d0235fac00eeaee710f7d8509a0808682e8ef2bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3250d724898f2c4af583d67ba86c34193ba86a89/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3250d724898f2c4af583d67ba86c34193ba86a89/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3250d724898f2c4af583d67ba86c34193ba86a89", "patch": "@@ -1,3 +1,11 @@\n+2008-05-26  Jan Hubicka  <jh@suse.cz>\n+\n+\t* predict.c (maybe_hot_frequency_p): Break out of...\n+\t(maybe_hot_bb_p): ... here.\n+\t(maybe_hot_edge_p): New.\n+\t* tree-ssa-coalesce.c (coalesce_cost_edge): Compute cost based on edge.\n+\t* basic-block.h (maybe_hot_edge_p): Declare.\n+\n 2008-05-31  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*cmpfp_<mode>): Enable for optimize_size."}, {"sha": "17ec338a7a41a2adf459d78e149c0634beb88c4d", "filename": "gcc/basic-block.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3250d724898f2c4af583d67ba86c34193ba86a89/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3250d724898f2c4af583d67ba86c34193ba86a89/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=3250d724898f2c4af583d67ba86c34193ba86a89", "patch": "@@ -827,6 +827,7 @@ extern void compute_available (sbitmap *, sbitmap *, sbitmap *, sbitmap *);\n \n /* In predict.c */\n extern bool maybe_hot_bb_p (const_basic_block);\n+extern bool maybe_hot_edge_p (edge);\n extern bool probably_cold_bb_p (const_basic_block);\n extern bool probably_never_executed_bb_p (const_basic_block);\n extern bool tree_predicted_by_p (const_basic_block, enum br_predictor);"}, {"sha": "42852dcfcacd5761f4e33a4d2eeafad640966e0a", "filename": "gcc/predict.c", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3250d724898f2c4af583d67ba86c34193ba86a89/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3250d724898f2c4af583d67ba86c34193ba86a89/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=3250d724898f2c4af583d67ba86c34193ba86a89", "patch": "@@ -107,6 +107,22 @@ static const struct predictor_info predictor_info[]= {\n };\n #undef DEF_PREDICTOR\n \n+/* Return TRUE if frequency FREQ is considered to be hot.  */\n+static bool\n+maybe_hot_frequency_p (int freq)\n+{\n+  if (!profile_info || !flag_branch_probabilities)\n+    {\n+      if (cfun->function_frequency == FUNCTION_FREQUENCY_UNLIKELY_EXECUTED)\n+        return false;\n+      if (cfun->function_frequency == FUNCTION_FREQUENCY_HOT)\n+        return true;\n+    }\n+  if (freq < BB_FREQ_MAX / PARAM_VALUE (HOT_BB_FREQUENCY_FRACTION))\n+    return false;\n+  return true;\n+}\n+\n /* Return true in case BB can be CPU intensive and should be optimized\n    for maximal performance.  */\n \n@@ -117,16 +133,20 @@ maybe_hot_bb_p (const_basic_block bb)\n       && (bb->count\n \t  < profile_info->sum_max / PARAM_VALUE (HOT_BB_COUNT_FRACTION)))\n     return false;\n-  if (!profile_info || !flag_branch_probabilities)\n-    {\n-      if (cfun->function_frequency == FUNCTION_FREQUENCY_UNLIKELY_EXECUTED)\n-        return false;\n-      if (cfun->function_frequency == FUNCTION_FREQUENCY_HOT)\n-        return true;\n-    }\n-  if (bb->frequency < BB_FREQ_MAX / PARAM_VALUE (HOT_BB_FREQUENCY_FRACTION))\n+  return maybe_hot_frequency_p (bb->frequency);\n+}\n+\n+/* Return true in case BB can be CPU intensive and should be optimized\n+   for maximal performance.  */\n+\n+bool\n+maybe_hot_edge_p (edge e)\n+{\n+  if (profile_info && flag_branch_probabilities\n+      && (e->count\n+\t  < profile_info->sum_max / PARAM_VALUE (HOT_BB_COUNT_FRACTION)))\n     return false;\n-  return true;\n+  return maybe_hot_frequency_p (EDGE_FREQUENCY (e));\n }\n \n /* Return true in case BB is cold and should be optimized for size.  */"}, {"sha": "172f1a2f829adc238074cb4f88dcaac11a5926a1", "filename": "gcc/tree-ssa-coalesce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3250d724898f2c4af583d67ba86c34193ba86a89/gcc%2Ftree-ssa-coalesce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3250d724898f2c4af583d67ba86c34193ba86a89/gcc%2Ftree-ssa-coalesce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-coalesce.c?ref=3250d724898f2c4af583d67ba86c34193ba86a89", "patch": "@@ -114,7 +114,7 @@ coalesce_cost_edge (edge e)\n     return MUST_COALESCE_COST;\n \n   return coalesce_cost (EDGE_FREQUENCY (e), \n-\t\t\tmaybe_hot_bb_p (e->src), \n+\t\t\tmaybe_hot_edge_p (e), \n \t\t\tEDGE_CRITICAL_P (e));\n }\n "}]}