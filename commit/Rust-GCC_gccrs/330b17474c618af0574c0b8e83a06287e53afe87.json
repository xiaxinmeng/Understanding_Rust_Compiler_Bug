{"sha": "330b17474c618af0574c0b8e83a06287e53afe87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzMwYjE3NDc0YzYxOGFmMDU3NGMwYjhlODNhMDYyODdlNTNhZmU4Nw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-14T15:25:08Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-14T15:25:08Z"}, "message": "Use INVOKE<R> in std::function, std::bind and std::packaged_task\n\nAs well as simpifying the code by removing duplication, this means that\nwe only need to touch std::__invoke_r if we need to implement changes to\nINVOKE<R>, such as those in P0932R0.\n\n\t* include/bits/std_function.h (_Simple_type_wrapper): Remove.\n\t(_Function_handler): Remove partial specializations for void return\n\ttypes and pointers to member.\n\t(_Function_handler::_M_manager): Adapt to removal of\n\t_Simple_type_wrapper.\n\t(_Function_handler::_M_invoke): Use __invoke_r instead of __invoke.\n\t* include/std/functional (_Bind_result::__enable_if_void)\n\t(_Bind_result::__disable_if_void): Remove sfinae helpers.\n\t(_Bind_result::__call): Use __invoke_r and remove overloads for void\n\treturn types.\n\t* include/std/future (__future_base::_Task_state::_M_run)\n\t(__future_base::_Task_state::_M_run_delayed): Use __invoke_r and\n\tchange return type of lambda expressions.\n\nFrom-SVN: r271174", "tree": {"sha": "1224a465498d4e2f0f682ff786b28def3273b5c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1224a465498d4e2f0f682ff786b28def3273b5c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/330b17474c618af0574c0b8e83a06287e53afe87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/330b17474c618af0574c0b8e83a06287e53afe87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/330b17474c618af0574c0b8e83a06287e53afe87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/330b17474c618af0574c0b8e83a06287e53afe87/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78c2855df612af45edb78426348296f43f2a8602", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78c2855df612af45edb78426348296f43f2a8602", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78c2855df612af45edb78426348296f43f2a8602"}], "stats": {"total": 160, "additions": 32, "deletions": 128}, "files": [{"sha": "c2466cefaa595bfe81cbbe9ee9073afa928f84b0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/330b17474c618af0574c0b8e83a06287e53afe87/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/330b17474c618af0574c0b8e83a06287e53afe87/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=330b17474c618af0574c0b8e83a06287e53afe87", "patch": "@@ -1,5 +1,19 @@\n 2019-05-14  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/std_function.h (_Simple_type_wrapper): Remove.\n+\t(_Function_handler): Remove partial specializations for void return\n+\ttypes and pointers to member.\n+\t(_Function_handler::_M_manager): Adapt to removal of\n+\t_Simple_type_wrapper.\n+\t(_Function_handler::_M_invoke): Use __invoke_r instead of __invoke.\n+\t* include/std/functional (_Bind_result::__enable_if_void)\n+\t(_Bind_result::__disable_if_void): Remove sfinae helpers.\n+\t(_Bind_result::__call): Use __invoke_r and remove overloads for void\n+\treturn types.\n+\t* include/std/future (__future_base::_Task_state::_M_run)\n+\t(__future_base::_Task_state::_M_run_delayed): Use __invoke_r and\n+\tchange return type of lambda expressions.\n+\n \t* include/bits/invoke.h (__invoke_r): Define new function implementing\n \tthe INVOKE<R> pseudo-function.\n \t* testsuite/20_util/function_objects/invoke/1.cc: Add more tests."}, {"sha": "5733bf5f3f9fe314125498f5cb1ea199603caa8a", "filename": "libstdc++-v3/include/bits/std_function.h", "status": "modified", "additions": 4, "deletions": 70, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/330b17474c618af0574c0b8e83a06287e53afe87/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/330b17474c618af0574c0b8e83a06287e53afe87/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_function.h?ref=330b17474c618af0574c0b8e83a06287e53afe87", "patch": "@@ -109,21 +109,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __destroy_functor\n   };\n \n-  // Simple type wrapper that helps avoid annoying const problems\n-  // when casting between void pointers and pointers-to-pointers.\n-  template<typename _Tp>\n-    struct _Simple_type_wrapper\n-    {\n-      _Simple_type_wrapper(_Tp __value) : __value(__value) { }\n-\n-      _Tp __value;\n-    };\n-\n-  template<typename _Tp>\n-    struct __is_location_invariant<_Simple_type_wrapper<_Tp> >\n-    : __is_location_invariant<_Tp>\n-    { };\n-\n   template<typename _Signature>\n     class function;\n \n@@ -278,56 +263,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       typedef _Function_base::_Base_manager<_Functor> _Base;\n \n-    public:\n-      static _Res\n-      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)\n-      {\n-\treturn (*_Base::_M_get_pointer(__functor))(\n-\t    std::forward<_ArgTypes>(__args)...);\n-      }\n-    };\n-\n-  template<typename _Functor, typename... _ArgTypes>\n-    class _Function_handler<void(_ArgTypes...), _Functor>\n-    : public _Function_base::_Base_manager<_Functor>\n-    {\n-      typedef _Function_base::_Base_manager<_Functor> _Base;\n-\n-     public:\n-      static void\n-      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)\n-      {\n-\t(*_Base::_M_get_pointer(__functor))(\n-\t    std::forward<_ArgTypes>(__args)...);\n-      }\n-    };\n-\n-  template<typename _Class, typename _Member, typename _Res,\n-\t   typename... _ArgTypes>\n-    class _Function_handler<_Res(_ArgTypes...), _Member _Class::*>\n-    : public _Function_handler<void(_ArgTypes...), _Member _Class::*>\n-    {\n-      typedef _Function_handler<void(_ArgTypes...), _Member _Class::*>\n-\t_Base;\n-\n-     public:\n-      static _Res\n-      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)\n-      {\n-\treturn std::__invoke(_Base::_M_get_pointer(__functor)->__value,\n-\t\t\t     std::forward<_ArgTypes>(__args)...);\n-      }\n-    };\n-\n-  template<typename _Class, typename _Member, typename... _ArgTypes>\n-    class _Function_handler<void(_ArgTypes...), _Member _Class::*>\n-    : public _Function_base::_Base_manager<\n-\t\t _Simple_type_wrapper< _Member _Class::* > >\n-    {\n-      typedef _Member _Class::* _Functor;\n-      typedef _Simple_type_wrapper<_Functor> _Wrapper;\n-      typedef _Function_base::_Base_manager<_Wrapper> _Base;\n-\n     public:\n       static bool\n       _M_manager(_Any_data& __dest, const _Any_data& __source,\n@@ -341,8 +276,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    break;\n #endif\n \t  case __get_functor_ptr:\n-\t    __dest._M_access<_Functor*>() =\n-\t      &_Base::_M_get_pointer(__source)->__value;\n+\t    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);\n \t    break;\n \n \t  default:\n@@ -351,11 +285,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn false;\n       }\n \n-      static void\n+      static _Res\n       _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)\n       {\n-\tstd::__invoke(_Base::_M_get_pointer(__functor)->__value,\n-\t\t      std::forward<_ArgTypes>(__args)...);\n+\treturn std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),\n+\t\t\t\t     std::forward<_ArgTypes>(__args)...);\n       }\n     };\n "}, {"sha": "d610e914b59856ae011fc51cad34eb69b7fc0e70", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 8, "deletions": 54, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/330b17474c618af0574c0b8e83a06287e53afe87/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/330b17474c618af0574c0b8e83a06287e53afe87/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=330b17474c618af0574c0b8e83a06287e53afe87", "patch": "@@ -539,89 +539,43 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Functor _M_f;\n       tuple<_Bound_args...> _M_bound_args;\n \n-      // sfinae types\n-      template<typename _Res>\n-\tusing __enable_if_void\n-\t  = typename enable_if<is_void<_Res>{}>::type;\n-\n-      template<typename _Res>\n-\tusing __disable_if_void\n-\t  = typename enable_if<!is_void<_Res>{}, _Result>::type;\n-\n       // Call unqualified\n       template<typename _Res, typename... _Args, std::size_t... _Indexes>\n-\t__disable_if_void<_Res>\n+\t_Res\n \t__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)\n \t{\n-\t  return std::__invoke(_M_f, _Mu<_Bound_args>()\n+\t  return std::__invoke_r<_Res>(_M_f, _Mu<_Bound_args>()\n \t\t      (std::get<_Indexes>(_M_bound_args), __args)...);\n \t}\n \n-      // Call unqualified, return void\n-      template<typename _Res, typename... _Args, std::size_t... _Indexes>\n-\t__enable_if_void<_Res>\n-\t__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)\n-\t{\n-\t  std::__invoke(_M_f, _Mu<_Bound_args>()\n-\t       (std::get<_Indexes>(_M_bound_args), __args)...);\n-\t}\n-\n       // Call as const\n       template<typename _Res, typename... _Args, std::size_t... _Indexes>\n-\t__disable_if_void<_Res>\n+\t_Res\n \t__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) const\n \t{\n-\t  return std::__invoke(_M_f, _Mu<_Bound_args>()\n+\t  return std::__invoke_r<_Res>(_M_f, _Mu<_Bound_args>()\n \t\t      (std::get<_Indexes>(_M_bound_args), __args)...);\n \t}\n \n-      // Call as const, return void\n-      template<typename _Res, typename... _Args, std::size_t... _Indexes>\n-\t__enable_if_void<_Res>\n-\t__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) const\n-\t{\n-\t  std::__invoke(_M_f, _Mu<_Bound_args>()\n-\t       (std::get<_Indexes>(_M_bound_args),  __args)...);\n-\t}\n-\n       // Call as volatile\n       template<typename _Res, typename... _Args, std::size_t... _Indexes>\n-\t__disable_if_void<_Res>\n+\t_Res\n \t__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) volatile\n \t{\n-\t  return std::__invoke(_M_f, _Mu<_Bound_args>()\n+\t  return std::__invoke_r<_Res>(_M_f, _Mu<_Bound_args>()\n \t\t      (__volget<_Indexes>(_M_bound_args), __args)...);\n \t}\n \n-      // Call as volatile, return void\n-      template<typename _Res, typename... _Args, std::size_t... _Indexes>\n-\t__enable_if_void<_Res>\n-\t__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) volatile\n-\t{\n-\t  std::__invoke(_M_f, _Mu<_Bound_args>()\n-\t       (__volget<_Indexes>(_M_bound_args), __args)...);\n-\t}\n-\n       // Call as const volatile\n       template<typename _Res, typename... _Args, std::size_t... _Indexes>\n-\t__disable_if_void<_Res>\n+\t_Res\n \t__call(tuple<_Args...>&& __args,\n \t       _Index_tuple<_Indexes...>) const volatile\n \t{\n-\t  return std::__invoke(_M_f, _Mu<_Bound_args>()\n+\t  return std::__invoke_r<_Res>(_M_f, _Mu<_Bound_args>()\n \t\t      (__volget<_Indexes>(_M_bound_args), __args)...);\n \t}\n \n-      // Call as const volatile, return void\n-      template<typename _Res, typename... _Args, std::size_t... _Indexes>\n-\t__enable_if_void<_Res>\n-\t__call(tuple<_Args...>&& __args,\n-\t       _Index_tuple<_Indexes...>) const volatile\n-\t{\n-\t  std::__invoke(_M_f, _Mu<_Bound_args>()\n-\t       (__volget<_Indexes>(_M_bound_args), __args)...);\n-\t}\n-\n     public:\n       typedef _Result result_type;\n "}, {"sha": "967110050b8aa5a438ad602a1401c98f7c587300", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/330b17474c618af0574c0b8e83a06287e53afe87/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/330b17474c618af0574c0b8e83a06287e53afe87/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=330b17474c618af0574c0b8e83a06287e53afe87", "patch": "@@ -1417,17 +1417,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       virtual void\n       _M_run(_Args&&... __args)\n       {\n-\tauto __boundfn = [&] () -> typename result_of<_Fn&(_Args&&...)>::type {\n-\t    return std::__invoke(_M_impl._M_fn, std::forward<_Args>(__args)...);\n+\tauto __boundfn = [&] () -> _Res {\n+\t    return std::__invoke_r<_Res>(_M_impl._M_fn,\n+\t\t\t\t\t std::forward<_Args>(__args)...);\n \t};\n \tthis->_M_set_result(_S_task_setter(this->_M_result, __boundfn));\n       }\n \n       virtual void\n       _M_run_delayed(_Args&&... __args, weak_ptr<_State_base> __self)\n       {\n-\tauto __boundfn = [&] () -> typename result_of<_Fn&(_Args&&...)>::type {\n-\t    return std::__invoke(_M_impl._M_fn, std::forward<_Args>(__args)...);\n+\tauto __boundfn = [&] () -> _Res {\n+\t    return std::__invoke_r<_Res>(_M_impl._M_fn,\n+\t\t\t\t\t std::forward<_Args>(__args)...);\n \t};\n \tthis->_M_set_delayed_result(_S_task_setter(this->_M_result, __boundfn),\n \t\t\t\t    std::move(__self));"}]}