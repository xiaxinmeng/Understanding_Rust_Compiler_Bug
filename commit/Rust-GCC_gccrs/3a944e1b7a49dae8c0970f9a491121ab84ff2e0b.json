{"sha": "3a944e1b7a49dae8c0970f9a491121ab84ff2e0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E5NDRlMWI3YTQ5ZGFlOGMwOTcwZjlhNDkxMTIxYWI4NGZmMmUwYg==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-17T15:44:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-17T15:44:38Z"}, "message": "Merge #632\n\n632: Use default type_for_size langhook r=philberty a=dkm\n\nFrom Mark Wielaard : https://gcc.gnu.org/pipermail/gcc-rust/2021-August/000144.html\r\n\r\n> The gcc constant folding code uses the type_for_size langhook. Use the\r\n> default implementation instead of crashing when the langhook is\r\n> called. Add a new testcase \"prims_struct_eq.rs\" that creates trees\r\n> that triggers the constant folding.\r\n> \r\n> Also remove the write_globals langhook which was removed when early\r\n> debug was integrated into gcc.\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>", "tree": {"sha": "47c7ffaa62bd37723993795708a98a7b56ff9ab5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47c7ffaa62bd37723993795708a98a7b56ff9ab5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a944e1b7a49dae8c0970f9a491121ab84ff2e0b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhG9lmCRBK7hj4Ov3rIwAAAhIIAHRVuoj1lBSFAjzN117rUAG/\nCDQ1pN/7TD8/10CiTWGGtBsCdwlp0Vttop1wxNvTJEVQbDh3MervoKN/yQcP8F13\nwPaB0jaAWlHIMZHR1Yed/p4UKI47m2/dcN9uNXKI/DWtlZApNPsDSwgNlZ2KCEQ5\ngi9jKmvB3opKRPTkV4mlqHAnftYmgcqkZbWjnvi5N4zlNLRjdx0841zTTwH2NKuD\nZQnBdjM0/BS5nao2TlBywulapKadSNtgQt/XJMGuGdXWS904FKZzqDGQsC5gB0Qp\ny9X3sMWqCN1F7tjkYzWusYDD5a+zSnFWFou5CO/aCgAko26oluQigUk35Us4YQw=\n=ROYm\n-----END PGP SIGNATURE-----\n", "payload": "tree 47c7ffaa62bd37723993795708a98a7b56ff9ab5\nparent 335cd53ddadbe43f2a1c2187fcbd28cf04fe911e\nparent c4bab97a9911250409ab5e72bb649fe3818e9502\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1629215078 +0000\ncommitter GitHub <noreply@github.com> 1629215078 +0000\n\nMerge #632\n\n632: Use default type_for_size langhook r=philberty a=dkm\n\nFrom Mark Wielaard : https://gcc.gnu.org/pipermail/gcc-rust/2021-August/000144.html\r\n\r\n> The gcc constant folding code uses the type_for_size langhook. Use the\r\n> default implementation instead of crashing when the langhook is\r\n> called. Add a new testcase \"prims_struct_eq.rs\" that creates trees\r\n> that triggers the constant folding.\r\n> \r\n> Also remove the write_globals langhook which was removed when early\r\n> debug was integrated into gcc.\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a944e1b7a49dae8c0970f9a491121ab84ff2e0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a944e1b7a49dae8c0970f9a491121ab84ff2e0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a944e1b7a49dae8c0970f9a491121ab84ff2e0b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "335cd53ddadbe43f2a1c2187fcbd28cf04fe911e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/335cd53ddadbe43f2a1c2187fcbd28cf04fe911e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/335cd53ddadbe43f2a1c2187fcbd28cf04fe911e"}, {"sha": "c4bab97a9911250409ab5e72bb649fe3818e9502", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4bab97a9911250409ab5e72bb649fe3818e9502", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4bab97a9911250409ab5e72bb649fe3818e9502"}], "stats": {"total": 108, "additions": 91, "deletions": 17}, "files": [{"sha": "b4f8cbe783043831748c405a484f2d253125f395", "filename": "gcc/rust/rust-lang.cc", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a944e1b7a49dae8c0970f9a491121ab84ff2e0b/gcc%2Frust%2Frust-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a944e1b7a49dae8c0970f9a491121ab84ff2e0b/gcc%2Frust%2Frust-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-lang.cc?ref=3a944e1b7a49dae8c0970f9a491121ab84ff2e0b", "patch": "@@ -224,20 +224,6 @@ grs_langhook_type_for_mode (machine_mode mode, int unsignedp)\n   return NULL;\n }\n \n-/* This appears to be used for creating different types for different bit sizes\n- * (e.g. int and long). Also, the Go frontend calls this from type_for_mode to\n- * determine the type from a specific bitsize for integer types.\n- * FIXME: change this when working on AST-GENERIC conversion to allow the full\n- * range of Rust type sizes. */\n-static tree\n-grs_langhook_type_for_size (unsigned int bits ATTRIBUTE_UNUSED,\n-\t\t\t    int unsignedp ATTRIBUTE_UNUSED)\n-{\n-  gcc_unreachable ();\n-  return NULL_TREE;\n-  // nothing at the moment, but change later\n-}\n-\n // Record a builtin function. We just ignore builtin functions.\n static tree\n grs_langhook_builtin_function (tree decl ATTRIBUTE_UNUSED)\n@@ -420,7 +406,6 @@ rust_localize_identifier (const char *ident)\n #undef LANG_HOOKS_POST_OPTIONS\n #undef LANG_HOOKS_PARSE_FILE\n #undef LANG_HOOKS_TYPE_FOR_MODE\n-#undef LANG_HOOKS_TYPE_FOR_SIZE\n #undef LANG_HOOKS_BUILTIN_FUNCTION\n #undef LANG_HOOKS_GLOBAL_BINDINGS_P\n #undef LANG_HOOKS_PUSHDECL\n@@ -442,12 +427,10 @@ rust_localize_identifier (const char *ident)\n  */\n #define LANG_HOOKS_PARSE_FILE grs_langhook_parse_file\n #define LANG_HOOKS_TYPE_FOR_MODE grs_langhook_type_for_mode\n-#define LANG_HOOKS_TYPE_FOR_SIZE grs_langhook_type_for_size\n #define LANG_HOOKS_BUILTIN_FUNCTION grs_langhook_builtin_function\n #define LANG_HOOKS_GLOBAL_BINDINGS_P grs_langhook_global_bindings_p\n #define LANG_HOOKS_PUSHDECL grs_langhook_pushdecl\n #define LANG_HOOKS_GETDECLS grs_langhook_getdecls\n-#define LANG_HOOKS_WRITE_GLOBALS grs_langhook_write_globals\n #define LANG_HOOKS_GIMPLIFY_EXPR grs_langhook_gimplify_expr\n #define LANG_HOOKS_EH_PERSONALITY grs_langhook_eh_personality\n "}, {"sha": "81ab7424627261a8488fc0e7440f9ae6e99e2222", "filename": "gcc/testsuite/rust/compile/torture/prims_struct_eq.rs", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a944e1b7a49dae8c0970f9a491121ab84ff2e0b/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fprims_struct_eq.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a944e1b7a49dae8c0970f9a491121ab84ff2e0b/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fprims_struct_eq.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fprims_struct_eq.rs?ref=3a944e1b7a49dae8c0970f9a491121ab84ff2e0b", "patch": "@@ -0,0 +1,91 @@\n+extern \"C\"\n+{\n+  fn abort ();\n+}\n+\n+struct Prims\n+{\n+  b1: bool,\n+  b2: bool,\n+  b3: bool,\n+  b4: bool,\n+  c1: char,\n+  c2: char,\n+  u81: u8,\n+  u82: u8,\n+  u83: u8,\n+  u84: u8,\n+  i81: i8,\n+  i82: i8,\n+  i83: i8,\n+  i84: i8,\n+  u161: u16,\n+  u162: u16,\n+  i161: i16,\n+  i162: i16,\n+  u321: u32,\n+  u322: u32,\n+  i321: i32,\n+  i322: i32,\n+  u641: u64,\n+  i641: i64,\n+  u1281: u128,\n+  i1281: i128,\n+  usize1: usize,\n+  isize1: isize,\n+}\n+\n+fn prims_eq (p1: Prims, p2: Prims) -> bool\n+{\n+  return p1.b1 == p2.b1\n+         && p1.b2 == p2.b2\n+         && p1.b3 == p2.b3\n+         && p1.b4 == p2.b4\n+         && p1.c1 == p2.c1\n+         && p1.c2 == p2.c2\n+         && p1.u81 == p2.u81\n+         && p1.u82 == p2.u82\n+         && p1.u83 == p2.u83\n+         && p1.u84 == p2.u84\n+         && p1.i81 == p2.i81\n+         && p1.i82 == p2.i82\n+         && p1.i83 == p2.i83\n+         && p1.i84 == p2.i84\n+         && p1.u161 == p2.u161\n+         && p1.u162 == p2.u162\n+         && p1.i161 == p2.i161\n+         && p1.i162 == p2.i162\n+         && p1.u321 == p2.u321\n+         && p1.u322 == p2.u322\n+         && p1.i321 == p2.i321\n+         && p1.i322 == p2.i322\n+         && p1.u641 == p2.u641\n+         && p1.i641 == p2.i641\n+         && p1.u1281 == p2.u1281\n+         && p1.i1281 == p2.i1281\n+         && p1.usize1 == p2.usize1\n+         && p1.isize1 == p2.isize1;\n+}\n+\n+pub fn main ()\n+{\n+  let p1 = Prims { b1: true, b2: false, b3: false, b4: true,\n+                   c1: 'a', c2: 'b',\n+                   u81: 1, u82: 2, u83: 3, u84: 4,\n+                   i81: -1, i82: -2, i83: -3, i84: -4,\n+                   u161: 1, u162: 2,\n+                   i161: -1, i162: -2,\n+                   u321: 1, u322: 2,\n+                   i321: -1, i322: -2,\n+                   u641: 1,\n+                   i641: -1,\n+                   u1281: 1,\n+                   i1281: -1,\n+                   usize1: 1,\n+                   isize1: -1 };\n+  let p2 = Prims { usize1: 1, .. p1 };\n+  let p3 = Prims { u1281: 0, .. p2 };\n+  let p4 = Prims { i1281: 0, .. p3 };\n+  if !prims_eq (p1, p2) { unsafe { abort (); } }\n+  if prims_eq (p3, p4) { unsafe { abort (); } }\n+}"}]}