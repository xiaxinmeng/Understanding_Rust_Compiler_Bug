{"sha": "67da85da7923399850541459ffb67c812ef0625d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdkYTg1ZGE3OTIzMzk5ODUwNTQxNDU5ZmZiNjdjODEyZWYwNjI1ZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2007-08-08T15:06:05Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-08-08T15:06:05Z"}, "message": "mips-protos.h (SYMBOL_GENERAL): Rename to...\n\ngcc/\n\t* config/mips/mips-protos.h (SYMBOL_GENERAL): Rename to...\n\t(SYMBOL_ABSOLUTE): ...this.\n\t(SYMBOL_SMALL_DATA): Rename to...\n\t(SYMBOL_GP_RELATIVE): ...this.\n\t(SYMBOL_CONSTANT_POOL): Rename to...\n\t(SYMBOL_PC_RELATIVE): ...this.\n\t* config/mips/mips.c (mips_classify_symbol, mips_symbolic_constant_p)\n\t(mips_symbolic_address_p, mips_symbol_insns, override_options)\n\t(mips_rewrite_small_data_p, mips_use_anchors_for_symbol_p): Update\n\tafter above changes.\n\t* config/mips/predicates.md (const_call_insn_operand): Likewise.\n\t(general_symbolic_operand): Rename to...\n\t(absolute_symbolic_operand): ...this.\n\t* config/mips/mips.md: Update after above changes.\n\nFrom-SVN: r127294", "tree": {"sha": "307c2200e7bb246635fe7f59e68a7dc2395047e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/307c2200e7bb246635fe7f59e68a7dc2395047e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67da85da7923399850541459ffb67c812ef0625d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67da85da7923399850541459ffb67c812ef0625d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67da85da7923399850541459ffb67c812ef0625d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67da85da7923399850541459ffb67c812ef0625d/comments", "author": null, "committer": null, "parents": [{"sha": "76b4f0f724ae26bf9f7a6ed3b888d4360fd6ea5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76b4f0f724ae26bf9f7a6ed3b888d4360fd6ea5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76b4f0f724ae26bf9f7a6ed3b888d4360fd6ea5d"}], "stats": {"total": 110, "additions": 65, "deletions": 45}, "files": [{"sha": "e4b42292fa64c84399888ba8a10704846db7e3c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67da85da7923399850541459ffb67c812ef0625d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67da85da7923399850541459ffb67c812ef0625d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67da85da7923399850541459ffb67c812ef0625d", "patch": "@@ -1,3 +1,20 @@\n+2007-08-08  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* config/mips/mips-protos.h (SYMBOL_GENERAL): Rename to...\n+\t(SYMBOL_ABSOLUTE): ...this.\n+\t(SYMBOL_SMALL_DATA): Rename to...\n+\t(SYMBOL_GP_RELATIVE): ...this.\n+\t(SYMBOL_CONSTANT_POOL): Rename to...\n+\t(SYMBOL_PC_RELATIVE): ...this.\n+\t* config/mips/mips.c (mips_classify_symbol, mips_symbolic_constant_p)\n+\t(mips_symbolic_address_p, mips_symbol_insns, override_options)\n+\t(mips_rewrite_small_data_p, mips_use_anchors_for_symbol_p): Update\n+\tafter above changes.\n+\t* config/mips/predicates.md (const_call_insn_operand): Likewise.\n+\t(general_symbolic_operand): Rename to...\n+\t(absolute_symbolic_operand): ...this.\n+\t* config/mips/mips.md: Update after above changes.\n+\n 2007-08-08  Vladimir Yanovsky  <yanov@il.ibm.com>\n             Revital Eres  <eres@il.ibm.com>\n "}, {"sha": "233ffea2c1cb182ea9a947192adbe1547bb3f94f", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67da85da7923399850541459ffb67c812ef0625d/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67da85da7923399850541459ffb67c812ef0625d/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=67da85da7923399850541459ffb67c812ef0625d", "patch": "@@ -27,14 +27,17 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Classifies a SYMBOL_REF, LABEL_REF or UNSPEC address.\n \n-   SYMBOL_GENERAL\n-       Used when none of the below apply.\n+   SYMBOL_ABSOLUTE\n+       The symbol's value will be calculated using absolute relocations,\n+       such as %hi and %lo.\n \n-   SYMBOL_SMALL_DATA\n-       The symbol refers to something in a small data section.\n+   SYMBOL_GP_RELATIVE\n+       The symbol's value will be calculated by adding a 16-bit offset\n+       from $gp.\n \n-   SYMBOL_CONSTANT_POOL\n-       The symbol refers to something in the mips16 constant pool.\n+   SYMBOL_PC_RELATIVE\n+       The symbol's value will be calculated using a MIPS16 PC-relative\n+       calculation.\n \n    SYMBOL_GOT_PAGE_OFST\n        The symbol's value will be calculated by loading an address\n@@ -87,9 +90,9 @@ along with GCC; see the file COPYING3.  If not see\n        An UNSPEC wrapper around any kind of address.  It represents the\n        low 16 bits of that address.  */\n enum mips_symbol_type {\n-  SYMBOL_GENERAL,\n-  SYMBOL_SMALL_DATA,\n-  SYMBOL_CONSTANT_POOL,\n+  SYMBOL_ABSOLUTE,\n+  SYMBOL_GP_RELATIVE,\n+  SYMBOL_PC_RELATIVE,\n   SYMBOL_GOT_PAGE_OFST,\n   SYMBOL_GOT_DISP,\n   SYMBOL_GOTOFF_PAGE,"}, {"sha": "afa46b411c3c90249c462a0f9f5b56b4e7053d89", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67da85da7923399850541459ffb67c812ef0625d/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67da85da7923399850541459ffb67c812ef0625d/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=67da85da7923399850541459ffb67c812ef0625d", "patch": "@@ -1446,10 +1446,10 @@ mips_classify_symbol (rtx x)\n   if (GET_CODE (x) == LABEL_REF)\n     {\n       if (TARGET_MIPS16)\n-\treturn SYMBOL_CONSTANT_POOL;\n+\treturn SYMBOL_PC_RELATIVE;\n       if (TARGET_ABICALLS && !TARGET_ABSOLUTE_ABICALLS)\n \treturn SYMBOL_GOT_PAGE_OFST;\n-      return SYMBOL_GENERAL;\n+      return SYMBOL_ABSOLUTE;\n     }\n \n   gcc_assert (GET_CODE (x) == SYMBOL_REF);\n@@ -1460,25 +1460,25 @@ mips_classify_symbol (rtx x)\n   if (CONSTANT_POOL_ADDRESS_P (x))\n     {\n       if (TARGET_MIPS16)\n-\treturn SYMBOL_CONSTANT_POOL;\n+\treturn SYMBOL_PC_RELATIVE;\n \n       if (!TARGET_EMBEDDED_DATA\n \t  && GET_MODE_SIZE (get_pool_mode (x)) <= mips_section_threshold)\n-\treturn SYMBOL_SMALL_DATA;\n+\treturn SYMBOL_GP_RELATIVE;\n     }\n \n   /* Do not use small-data accesses for weak symbols; they may end up\n      being zero.  */\n   if (SYMBOL_REF_SMALL_P (x)\n       && !SYMBOL_REF_WEAK (x))\n-    return SYMBOL_SMALL_DATA;\n+    return SYMBOL_GP_RELATIVE;\n \n   if (TARGET_ABICALLS)\n     {\n       /* Don't use GOT accesses for locally-binding symbols; we can use\n \t %hi and %lo instead.  */\n       if (TARGET_ABSOLUTE_ABICALLS && mips_symbol_binds_local_p (x))\n-\treturn SYMBOL_GENERAL;\n+\treturn SYMBOL_ABSOLUTE;\n \n       /* There are three cases to consider:\n \n@@ -1505,7 +1505,7 @@ mips_classify_symbol (rtx x)\n       return SYMBOL_GOT_PAGE_OFST;\n     }\n \n-  return SYMBOL_GENERAL;\n+  return SYMBOL_ABSOLUTE;\n }\n \n /* Return true if OFFSET is within the range [0, ALIGN), where ALIGN\n@@ -1559,7 +1559,7 @@ mips_symbolic_constant_p (rtx x, enum mips_symbol_type *symbol_type)\n      relocations.  */\n   switch (*symbol_type)\n     {\n-    case SYMBOL_GENERAL:\n+    case SYMBOL_ABSOLUTE:\n     case SYMBOL_64_HIGH:\n     case SYMBOL_64_MID:\n     case SYMBOL_64_LOW:\n@@ -1573,7 +1573,7 @@ mips_symbolic_constant_p (rtx x, enum mips_symbol_type *symbol_type)\n       /* In other cases the relocations can handle any offset.  */\n       return true;\n \n-    case SYMBOL_CONSTANT_POOL:\n+    case SYMBOL_PC_RELATIVE:\n       /* Allow constant pool references to be converted to LABEL+CONSTANT.\n \t In this case, we no longer have access to the underlying constant,\n \t but the original symbol-based access was known to be valid.  */\n@@ -1582,7 +1582,7 @@ mips_symbolic_constant_p (rtx x, enum mips_symbol_type *symbol_type)\n \n       /* Fall through.  */\n \n-    case SYMBOL_SMALL_DATA:\n+    case SYMBOL_GP_RELATIVE:\n       /* Make sure that the offset refers to something within the\n \t same object block.  This should guarantee that the final\n \t PC- or GP-relative offset is within the 16-bit limit.  */\n@@ -1681,13 +1681,13 @@ mips_symbolic_address_p (enum mips_symbol_type symbol_type,\n {\n   switch (symbol_type)\n     {\n-    case SYMBOL_GENERAL:\n+    case SYMBOL_ABSOLUTE:\n       return !TARGET_MIPS16;\n \n-    case SYMBOL_SMALL_DATA:\n+    case SYMBOL_GP_RELATIVE:\n       return true;\n \n-    case SYMBOL_CONSTANT_POOL:\n+    case SYMBOL_PC_RELATIVE:\n       /* PC-relative addressing is only available for lw and ld.  */\n       return GET_MODE_SIZE (mode) == 4 || GET_MODE_SIZE (mode) == 8;\n \n@@ -1838,7 +1838,7 @@ mips_symbol_insns (enum mips_symbol_type type)\n {\n   switch (type)\n     {\n-    case SYMBOL_GENERAL:\n+    case SYMBOL_ABSOLUTE:\n       /* In mips16 code, general symbols must be fetched from the\n \t constant pool.  */\n       if (TARGET_MIPS16)\n@@ -1857,11 +1857,11 @@ mips_symbol_insns (enum mips_symbol_type type)\n \t symbols we just need a preparatory lui.  */\n       return (ABI_HAS_64BIT_SYMBOLS ? 6 : 2);\n \n-    case SYMBOL_SMALL_DATA:\n+    case SYMBOL_GP_RELATIVE:\n     case SYMBOL_HALF:\n       return 1;\n \n-    case SYMBOL_CONSTANT_POOL:\n+    case SYMBOL_PC_RELATIVE:\n       /* This case is for mips16 only.  Assume we'll need an\n \t extended instruction.  */\n       return 2;\n@@ -5429,32 +5429,32 @@ override_options (void)\n \t  mips_hi_relocs[SYMBOL_64_LOW] = \"%hi(\";\n \t  mips_lo_relocs[SYMBOL_64_LOW] = \"%lo(\";\n \n-\t  mips_split_p[SYMBOL_GENERAL] = true;\n-\t  mips_lo_relocs[SYMBOL_GENERAL] = \"%lo(\";\n+\t  mips_split_p[SYMBOL_ABSOLUTE] = true;\n+\t  mips_lo_relocs[SYMBOL_ABSOLUTE] = \"%lo(\";\n \t}\n     }\n   else\n     {\n       if (TARGET_EXPLICIT_RELOCS || mips_split_addresses)\n \t{\n-\t  mips_split_p[SYMBOL_GENERAL] = true;\n-\t  mips_hi_relocs[SYMBOL_GENERAL] = \"%hi(\";\n-\t  mips_lo_relocs[SYMBOL_GENERAL] = \"%lo(\";\n+\t  mips_split_p[SYMBOL_ABSOLUTE] = true;\n+\t  mips_hi_relocs[SYMBOL_ABSOLUTE] = \"%hi(\";\n+\t  mips_lo_relocs[SYMBOL_ABSOLUTE] = \"%lo(\";\n \t}\n     }\n \n   if (TARGET_MIPS16)\n     {\n       /* The high part is provided by a pseudo copy of $gp.  */\n-      mips_split_p[SYMBOL_SMALL_DATA] = true;\n-      mips_lo_relocs[SYMBOL_SMALL_DATA] = \"%gprel(\";\n+      mips_split_p[SYMBOL_GP_RELATIVE] = true;\n+      mips_lo_relocs[SYMBOL_GP_RELATIVE] = \"%gprel(\";\n     }\n \n   if (TARGET_EXPLICIT_RELOCS)\n     {\n       /* Small data constants are kept whole until after reload,\n \t then lowered by mips_rewrite_small_data.  */\n-      mips_lo_relocs[SYMBOL_SMALL_DATA] = \"%gp_rel(\";\n+      mips_lo_relocs[SYMBOL_GP_RELATIVE] = \"%gp_rel(\";\n \n       mips_split_p[SYMBOL_GOT_PAGE_OFST] = true;\n       if (TARGET_NEWABI)\n@@ -6439,7 +6439,7 @@ mips_rewrite_small_data_p (rtx x)\n \n   return (TARGET_EXPLICIT_RELOCS\n \t  && mips_symbolic_constant_p (x, &symbol_type)\n-\t  && symbol_type == SYMBOL_SMALL_DATA);\n+\t  && symbol_type == SYMBOL_GP_RELATIVE);\n }\n \n \n@@ -8309,8 +8309,8 @@ mips_use_anchors_for_symbol_p (rtx symbol)\n {\n   switch (mips_classify_symbol (symbol))\n     {\n-    case SYMBOL_CONSTANT_POOL:\n-    case SYMBOL_SMALL_DATA:\n+    case SYMBOL_PC_RELATIVE:\n+    case SYMBOL_GP_RELATIVE:\n       return false;\n \n     default:"}, {"sha": "e522f4e44ec12704df7920dc5aee77e3d168009c", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67da85da7923399850541459ffb67c812ef0625d/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67da85da7923399850541459ffb67c812ef0625d/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=67da85da7923399850541459ffb67c812ef0625d", "patch": "@@ -3094,7 +3094,7 @@\n   [(set_attr \"type\" \"store\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-;; An instruction to calculate the high part of a 64-bit SYMBOL_GENERAL.\n+;; An instruction to calculate the high part of a 64-bit SYMBOL_ABSOLUTE.\n ;; The required value is:\n ;;\n ;;\t(%highest(op1) << 48) + (%higher(op1) << 32) + (%hi(op1) << 16)\n@@ -3111,7 +3111,7 @@\n ;; to take effect.\n (define_insn_and_split \"*lea_high64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(high:DI (match_operand:DI 1 \"general_symbolic_operand\" \"\")))]\n+\t(high:DI (match_operand:DI 1 \"absolute_symbolic_operand\" \"\")))]\n   \"TARGET_EXPLICIT_RELOCS && ABI_HAS_64BIT_SYMBOLS\"\n   \"#\"\n   \"&& epilogue_completed\"\n@@ -3136,7 +3136,7 @@\n ;;\tdaddu\top1,op1,op0\n (define_peephole2\n   [(set (match_operand:DI 1 \"register_operand\")\n-\t(high:DI (match_operand:DI 2 \"general_symbolic_operand\")))\n+\t(high:DI (match_operand:DI 2 \"absolute_symbolic_operand\")))\n    (match_scratch:DI 0 \"d\")]\n   \"TARGET_EXPLICIT_RELOCS && ABI_HAS_64BIT_SYMBOLS\"\n   [(set (match_dup 1) (high:DI (match_dup 3)))\n@@ -3150,7 +3150,7 @@\n })\n \n ;; On most targets, the expansion of (lo_sum (high X) X) for a 64-bit\n-;; SYMBOL_GENERAL X will take 6 cycles.  This next pattern allows combine\n+;; SYMBOL_ABSOLUTE X will take 6 cycles.  This next pattern allows combine\n ;; to merge the HIGH and LO_SUM parts of a move if the HIGH part is only\n ;; used once.  We can then use the sequence:\n ;;\n@@ -3164,7 +3164,7 @@\n ;; which takes 4 cycles on most superscalar targets.\n (define_insn_and_split \"*lea64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(match_operand:DI 1 \"general_symbolic_operand\" \"\"))\n+\t(match_operand:DI 1 \"absolute_symbolic_operand\" \"\"))\n    (clobber (match_scratch:DI 2 \"=&d\"))]\n   \"TARGET_EXPLICIT_RELOCS && ABI_HAS_64BIT_SYMBOLS && cse_not_expected\"\n   \"#\"\n@@ -4182,7 +4182,7 @@\n \t\t\t\t (match_dup 4)] UNSPEC_LOAD_GOT))]\n {\n   operands[2] = pic_offset_table_rtx;\n-  operands[3] = mips_unspec_address (operands[0], SYMBOL_GENERAL);\n+  operands[3] = mips_unspec_address (operands[0], SYMBOL_ABSOLUTE);\n   operands[4] = mips_unspec_address (operands[1], SYMBOL_HALF);\n })\n "}, {"sha": "7f69f983b6ce31007c43f4a286f71feaab0bd9bc", "filename": "gcc/config/mips/predicates.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67da85da7923399850541459ffb67c812ef0625d/gcc%2Fconfig%2Fmips%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67da85da7923399850541459ffb67c812ef0625d/gcc%2Fconfig%2Fmips%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fpredicates.md?ref=67da85da7923399850541459ffb67c812ef0625d", "patch": "@@ -101,7 +101,7 @@\n \n   switch (symbol_type)\n     {\n-    case SYMBOL_GENERAL:\n+    case SYMBOL_ABSOLUTE:\n       /* We can only use direct calls for TARGET_ABSOLUTE_ABICALLS if we\n \t are sure that the target function does not need $25 to be live\n \t on entry.  This is true for any locally-defined function because\n@@ -229,11 +229,11 @@\n   return mips_symbolic_constant_p (op, &type);\n })\n \n-(define_predicate \"general_symbolic_operand\"\n+(define_predicate \"absolute_symbolic_operand\"\n   (match_code \"const,symbol_ref,label_ref\")\n {\n   enum mips_symbol_type type;\n-  return mips_symbolic_constant_p (op, &type) && type == SYMBOL_GENERAL;\n+  return mips_symbolic_constant_p (op, &type) && type == SYMBOL_ABSOLUTE;\n })\n \n (define_predicate \"got_disp_operand\""}]}