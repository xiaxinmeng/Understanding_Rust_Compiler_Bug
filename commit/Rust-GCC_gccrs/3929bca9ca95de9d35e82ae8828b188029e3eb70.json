{"sha": "3929bca9ca95de9d35e82ae8828b188029e3eb70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkyOWJjYTljYTk1ZGU5ZDM1ZTgyYWU4ODI4YjE4ODAyOWUzZWI3MA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2021-06-11T15:02:05Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2021-08-24T10:45:13Z"}, "message": "arm: Add command-line option for enabling CVE-2021-35465 mitigation [PR102035]\n\nAdd a new option, -mfix-cmse-cve-2021-35465 and document it.  Enable it\nautomatically for cortex-m33, cortex-m35p and cortex-m55.\n\ngcc:\n\tPR target/102035\n\t* config/arm/arm.opt (mfix-cmse-cve-2021-35465): New option.\n\t* doc/invoke.texi (Arm Options): Document it.\n\t* config/arm/arm-cpus.in (quirk_vlldm): New feature bit.\n\t(ALL_QUIRKS): Add quirk_vlldm.\n\t(cortex-m33): Add quirk_vlldm.\n\t(cortex-m35p, cortex-m55): Likewise.\n\t* config/arm/arm.c (arm_option_override): Enable fix_vlldm if\n\ttargetting an affected CPU and not explicitly controlled on\n\tthe command line.", "tree": {"sha": "fdf227f6857a911811b0f916b0429794e6006d7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdf227f6857a911811b0f916b0429794e6006d7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3929bca9ca95de9d35e82ae8828b188029e3eb70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3929bca9ca95de9d35e82ae8828b188029e3eb70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3929bca9ca95de9d35e82ae8828b188029e3eb70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3929bca9ca95de9d35e82ae8828b188029e3eb70/comments", "author": null, "committer": null, "parents": [{"sha": "79fb2700bdbab4212346d907be6063c5a32d3836", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79fb2700bdbab4212346d907be6063c5a32d3836", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79fb2700bdbab4212346d907be6063c5a32d3836"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "bcc9ebe9fe0550ae18dd013bf595d3cd24dbaca5", "filename": "gcc/config/arm/arm-cpus.in", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3929bca9ca95de9d35e82ae8828b188029e3eb70/gcc%2Fconfig%2Farm%2Farm-cpus.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3929bca9ca95de9d35e82ae8828b188029e3eb70/gcc%2Fconfig%2Farm%2Farm-cpus.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpus.in?ref=3929bca9ca95de9d35e82ae8828b188029e3eb70", "patch": "@@ -186,6 +186,9 @@ define feature quirk_armv6kz\n # Cortex-M3 LDRD quirk.\n define feature quirk_cm3_ldrd\n \n+# v8-m/v8.1-m VLLDM errata.\n+define feature quirk_vlldm\n+\n # Don't use .cpu assembly directive\n define feature quirk_no_asmcpu\n \n@@ -322,7 +325,7 @@ define implied vfp_base MVE MVE_FP ALL_FP\n # architectures.\n # xscale isn't really a 'quirk', but it isn't an architecture either and we\n # need to ignore it for matching purposes.\n-define fgroup ALL_QUIRKS   quirk_no_volatile_ce quirk_armv6kz quirk_cm3_ldrd xscale quirk_no_asmcpu\n+define fgroup ALL_QUIRKS   quirk_no_volatile_ce quirk_armv6kz quirk_cm3_ldrd quirk_vlldm xscale quirk_no_asmcpu\n \n define fgroup IGNORE_FOR_MULTILIB cdecp0 cdecp1 cdecp2 cdecp3 cdecp4 cdecp5 cdecp6 cdecp7\n \n@@ -1571,6 +1574,7 @@ begin cpu cortex-m33\n  architecture armv8-m.main+dsp+fp\n  option nofp remove ALL_FP\n  option nodsp remove armv7em\n+ isa quirk_vlldm\n  costs v7m\n end cpu cortex-m33\n \n@@ -1580,6 +1584,7 @@ begin cpu cortex-m35p\n  architecture armv8-m.main+dsp+fp\n  option nofp remove ALL_FP\n  option nodsp remove armv7em\n+ isa quirk_vlldm\n  costs v7m\n end cpu cortex-m35p\n \n@@ -1591,7 +1596,7 @@ begin cpu cortex-m55\n  option nomve remove mve mve_float\n  option nofp remove ALL_FP mve_float\n  option nodsp remove MVE mve_float\n- isa quirk_no_asmcpu\n+ isa quirk_no_asmcpu quirk_vlldm\n  costs v7m\n  vendor 41\n end cpu cortex-m55"}, {"sha": "5c929417f932371477ce26fd10ca7d19a6f7a5d3", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3929bca9ca95de9d35e82ae8828b188029e3eb70/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3929bca9ca95de9d35e82ae8828b188029e3eb70/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=3929bca9ca95de9d35e82ae8828b188029e3eb70", "patch": "@@ -3616,6 +3616,15 @@ arm_option_override (void)\n \tfix_cm3_ldrd = 0;\n     }\n \n+  /* Enable fix_vlldm by default if required.  */\n+  if (fix_vlldm == 2)\n+    {\n+      if (bitmap_bit_p (arm_active_target.isa, isa_bit_quirk_vlldm))\n+\tfix_vlldm = 1;\n+      else\n+\tfix_vlldm = 0;\n+    }\n+\n   /* Hot/Cold partitioning is not currently supported, since we can't\n      handle literal pool placement in that case.  */\n   if (flag_reorder_blocks_and_partition)"}, {"sha": "a7677eeb45c805d6a314f4d1d2d6063d8c0b687c", "filename": "gcc/config/arm/arm.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3929bca9ca95de9d35e82ae8828b188029e3eb70/gcc%2Fconfig%2Farm%2Farm.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3929bca9ca95de9d35e82ae8828b188029e3eb70/gcc%2Fconfig%2Farm%2Farm.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.opt?ref=3929bca9ca95de9d35e82ae8828b188029e3eb70", "patch": "@@ -268,6 +268,10 @@ Target Var(fix_cm3_ldrd) Init(2)\n Avoid overlapping destination and address registers on LDRD instructions\n that may trigger Cortex-M3 errata.\n \n+mfix-cmse-cve-2021-35465\n+Target Var(fix_vlldm) Init(2)\n+Mitigate issues with VLLDM on some M-profile devices (CVE-2021-35465).\n+\n munaligned-access\n Target Var(unaligned_access) Init(2) Save\n Enable unaligned word and halfword accesses to packed data."}, {"sha": "b8f5d9e1ccec80704408574185619193605edc0e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3929bca9ca95de9d35e82ae8828b188029e3eb70/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3929bca9ca95de9d35e82ae8828b188029e3eb70/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3929bca9ca95de9d35e82ae8828b188029e3eb70", "patch": "@@ -808,6 +808,7 @@ Objective-C and Objective-C++ Dialects}.\n -mverbose-cost-dump @gol\n -mpure-code @gol\n -mcmse @gol\n+-mfix-cmse-cve-2021-35465 @gol\n -mfdpic}\n \n @emph{AVR Options}\n@@ -20743,6 +20744,14 @@ Generate secure code as per the \"ARMv8-M Security Extensions: Requirements on\n Development Tools Engineering Specification\", which can be found on\n @url{https://developer.arm.com/documentation/ecm0359818/latest/}.\n \n+@item -mfix-cmse-cve-2021-35465\n+@opindex mfix-cmse-cve-2021-35465\n+Mitigate against a potential security issue with the @code{VLLDM} instruction\n+in some M-profile devices when using CMSE (CVE-2021-365465).  This option is\n+enabled by default when the option @option{-mcpu=} is used with\n+@code{cortex-m33}, @code{cortex-m35p} or @code{cortex-m55}.  The option\n+@option{-mno-fix-cmse-cve-2021-35465} can be used to disable the mitigation.\n+\n @item -mfdpic\n @itemx -mno-fdpic\n @opindex mfdpic"}]}