{"sha": "6c53ebffc53b500722f4de9ad4c225ee199c5ca6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM1M2ViZmZjNTNiNTAwNzIyZjRkZTlhZDRjMjI1ZWUxOTljNWNhNg==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-11-06T18:43:32Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-11-06T18:43:32Z"}, "message": "c-lex.c (c_lex): Replace tok.val.aux with tok.val.c or tok.val.arg_no as appropriate.\n\n\t* c-lex.c (c_lex): Replace tok.val.aux with tok.val.c or\n\ttok.val.arg_no as appropriate.\n\t* cppexp.c (lex): Similarly.\n\t* cpplex.c (_cpp_lex_token, cpp_spell_token, cpp_output_token,\n\tcpp_equiv_tokens, cpp_can_paste, cpp_avoid_paste): Similarly.\n\t* cppmacro.c (stringify_arg, replace_args, lex_expansion_token,\n\tcpp_macro_definition): Similarly.\n\t* cpplib.h (struct cpp_token): Replace aux with c and arg_no.\n\nFrom-SVN: r37276", "tree": {"sha": "7c3e54eeed36fe96129f61bda5ccc8088000d6e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c3e54eeed36fe96129f61bda5ccc8088000d6e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c53ebffc53b500722f4de9ad4c225ee199c5ca6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c53ebffc53b500722f4de9ad4c225ee199c5ca6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c53ebffc53b500722f4de9ad4c225ee199c5ca6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c53ebffc53b500722f4de9ad4c225ee199c5ca6/comments", "author": null, "committer": null, "parents": [{"sha": "d1877a9b13bf14c010facc0618e57ba7a789e468", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1877a9b13bf14c010facc0618e57ba7a789e468", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1877a9b13bf14c010facc0618e57ba7a789e468"}], "stats": {"total": 65, "additions": 38, "deletions": 27}, "files": [{"sha": "725d11e9e033172472391d2f113f7b07931173eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c53ebffc53b500722f4de9ad4c225ee199c5ca6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c53ebffc53b500722f4de9ad4c225ee199c5ca6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c53ebffc53b500722f4de9ad4c225ee199c5ca6", "patch": "@@ -1,3 +1,14 @@\n+2000-11-06  Neil Booth  <neilb@earthling.net>\n+\n+\t* c-lex.c (c_lex): Replace tok.val.aux with tok.val.c or\n+\ttok.val.arg_no as appropriate.\n+\t* cppexp.c (lex): Similarly.\n+\t* cpplex.c (_cpp_lex_token, cpp_spell_token, cpp_output_token,\n+\tcpp_equiv_tokens, cpp_can_paste, cpp_avoid_paste): Similarly.\n+\t* cppmacro.c (stringify_arg, replace_args, lex_expansion_token,\n+\tcpp_macro_definition): Similarly.\n+\t* cpplib.h (struct cpp_token): Replace aux with c and arg_no.\n+\n 2000-11-06  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/sparc/sparc.md (adddi3): If operands[2] is 4096 and"}, {"sha": "4d4e4815c5f7484878868a775a5ef5a9a351a431", "filename": "gcc/c-lex.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c53ebffc53b500722f4de9ad4c225ee199c5ca6/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c53ebffc53b500722f4de9ad4c225ee199c5ca6/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=6c53ebffc53b500722f4de9ad4c225ee199c5ca6", "patch": "@@ -1440,12 +1440,12 @@ c_lex (value)\n     case CPP_OPEN_BRACE:  indent_level++;  break;\n     case CPP_CLOSE_BRACE: indent_level--;  break;\n \n-    /* Issue this error here, where we can get at tok.val.aux.  */\n+    /* Issue this error here, where we can get at tok.val.c.  */\n     case CPP_OTHER:\n-      if (ISGRAPH (tok.val.aux))\n-\terror (\"stray '%c' in program\", tok.val.aux);\n+      if (ISGRAPH (tok.val.c))\n+\terror (\"stray '%c' in program\", tok.val.c);\n       else\n-\terror (\"stray '\\\\%#o' in program\", tok.val.aux);\n+\terror (\"stray '\\\\%#o' in program\", tok.val.c);\n       goto retry;\n       \n     case CPP_NAME:"}, {"sha": "55b633e6569f98bbbfc53509e860c6554b46295c", "filename": "gcc/cppexp.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c53ebffc53b500722f4de9ad4c225ee199c5ca6/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c53ebffc53b500722f4de9ad4c225ee199c5ca6/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=6c53ebffc53b500722f4de9ad4c225ee199c5ca6", "patch": "@@ -401,10 +401,10 @@ lex (pfile, skip_evaluation, token)\n       SYNTAX_ERROR (\"floating point numbers are not valid in #if\");\n \n     case CPP_OTHER:\n-      if (ISGRAPH (token->val.aux))\n-\tSYNTAX_ERROR2 (\"invalid character '%c' in #if\", token->val.aux);\n+      if (ISGRAPH (token->val.c))\n+\tSYNTAX_ERROR2 (\"invalid character '%c' in #if\", token->val.c);\n       else\n-\tSYNTAX_ERROR2 (\"invalid character '\\\\%03o' in #if\", token->val.aux);\n+\tSYNTAX_ERROR2 (\"invalid character '\\\\%03o' in #if\", token->val.c);\n \n     case CPP_NAME:\n       if (token->val.node == pfile->spec_nodes.n_defined)"}, {"sha": "c77ed910f9cb9d9ed253aaf1781fbbac279d7818", "filename": "gcc/cpplex.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c53ebffc53b500722f4de9ad4c225ee199c5ca6/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c53ebffc53b500722f4de9ad4c225ee199c5ca6/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=6c53ebffc53b500722f4de9ad4c225ee199c5ca6", "patch": "@@ -1241,7 +1241,7 @@ _cpp_lex_token (pfile, result)\n     random_char:\n     default:\n       result->type = CPP_OTHER;\n-      result->val.aux = c;\n+      result->val.c = c;\n       break;\n     }\n }\n@@ -1321,7 +1321,7 @@ cpp_spell_token (pfile, token, buffer)\n       break;\n \n     case SPELL_CHAR:\n-      *buffer++ = token->val.aux;\n+      *buffer++ = token->val.c;\n       break;\n \n     case SPELL_NONE:\n@@ -1410,7 +1410,7 @@ cpp_output_token (token, fp)\n       break;\n \n     case SPELL_CHAR:\n-      putc (token->val.aux, fp);\n+      putc (token->val.c, fp);\n       break;\n \n     case SPELL_NONE:\n@@ -1431,9 +1431,9 @@ _cpp_equiv_tokens (a, b)\n       case SPELL_OPERATOR:\n \treturn 1;\n       case SPELL_CHAR:\n-\treturn a->val.aux == b->val.aux; /* Character.  */\n+\treturn a->val.c == b->val.c; /* Character.  */\n       case SPELL_NONE:\n-\treturn (a->type != CPP_MACRO_ARG || a->val.aux == b->val.aux);\n+\treturn (a->type != CPP_MACRO_ARG || a->val.c == b->val.c);\n       case SPELL_IDENT:\n \treturn a->val.node == b->val.node;\n       case SPELL_STRING:\n@@ -1565,7 +1565,7 @@ cpp_can_paste (pfile, token1, token2, digraph)\n       break;\n \n     case CPP_OTHER:\n-      if (CPP_OPTION (pfile, objc) && token1->val.aux == '@')\n+      if (CPP_OPTION (pfile, objc) && token1->val.c == '@')\n \t{\n \t  if (b == CPP_NAME)\treturn CPP_NAME;\n \t  if (b == CPP_STRING)\treturn CPP_OSTRING;\n@@ -1627,7 +1627,7 @@ cpp_avoid_paste (pfile, token1, token2)\n     case CPP_NUMBER:\treturn (b == CPP_NUMBER || b == CPP_NAME\n \t\t\t\t|| c == '.' || c == '+' || c == '-');\n     case CPP_OTHER:\treturn (CPP_OPTION (pfile, objc)\n-\t\t\t\t&& token1->val.aux == '@'\n+\t\t\t\t&& token1->val.c == '@'\n \t\t\t\t&& (b == CPP_NAME || b == CPP_STRING));\n     default:\t\tbreak;\n     }"}, {"sha": "cc559e1669258c85c2ed6df9b512b911e56b8fc9", "filename": "gcc/cpplib.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c53ebffc53b500722f4de9ad4c225ee199c5ca6/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c53ebffc53b500722f4de9ad4c225ee199c5ca6/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=6c53ebffc53b500722f4de9ad4c225ee199c5ca6", "patch": "@@ -183,11 +183,11 @@ struct cpp_token\n \n   union\n   {\n-    HOST_WIDEST_INT integer;\t/* an integer */\n-    struct cpp_hashnode *node;\t/* an identifier */\n-    struct cpp_string str;\t/* a string, or number */\n-    unsigned int aux;\t\t/* argument no. for a CPP_MACRO_ARG, or\n-\t\t\t\t   character represented by CPP_OTHER.  */\n+    HOST_WIDEST_INT integer;\t/* An integer.  */\n+    struct cpp_hashnode *node;\t/* An identifier.  */\n+    struct cpp_string str;\t/* A string, or number.  */\n+    unsigned int arg_no;\t/* Argument no. for a CPP_MACRO_ARG.  */\n+    unsigned char c;\t\t/* Character represented by CPP_OTHER.  */\n   } val;\n };\n "}, {"sha": "24babafeefa6f1332be65c2f1dd20172c2fddfe3", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c53ebffc53b500722f4de9ad4c225ee199c5ca6/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c53ebffc53b500722f4de9ad4c225ee199c5ca6/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=6c53ebffc53b500722f4de9ad4c225ee199c5ca6", "patch": "@@ -386,7 +386,7 @@ stringify_arg (pfile, arg)\n \tdest = cpp_spell_token (pfile, token, dest);\n       total_len = dest - start;\n \n-      if (token->type == CPP_OTHER && token->val.aux == '\\\\')\n+      if (token->type == CPP_OTHER && token->val.c == '\\\\')\n \tbackslash_count++;\n       else\n \tbackslash_count = 0;\n@@ -790,7 +790,7 @@ replace_args (pfile, macro, args, list)\n       {\n \t/* We have an argument.  If it is not being stringified or\n \t   pasted it is macro-replaced before insertion.  */\n-\targ = &args[src->val.aux - 1];\n+\targ = &args[src->val.arg_no - 1];\n \tif (src->flags & STRINGIFY_ARG)\n \t  {\n \t    if (!arg->stringified)\n@@ -818,7 +818,7 @@ replace_args (pfile, macro, args, list)\n \tunsigned int count;\n \tconst cpp_token *from;\n \n-\targ = &args[src->val.aux - 1];\n+\targ = &args[src->val.arg_no - 1];\n \tif (src->flags & STRINGIFY_ARG)\n \t  from = arg->stringified, count = 1;\n \telse if ((src->flags & PASTE_LEFT)\n@@ -832,7 +832,7 @@ replace_args (pfile, macro, args, list)\n            it is a variable argument, it is also flagged.  */\n \tdest->flags &= ~PREV_WHITE;\n \tdest->flags |= src->flags & PREV_WHITE;\n-\tif (macro->var_args && src->val.aux == macro->paramc)\n+\tif (macro->var_args && src->val.arg_no == macro->paramc)\n \t  dest->flags |= VARARGS_FIRST;\n \n \t/* The last token gets the PASTE_LEFT of the CPP_MACRO_ARG.  */\n@@ -1392,7 +1392,7 @@ lex_expansion_token (pfile, macro)\n   if (token->type == CPP_NAME && token->val.node->arg_index)\n     {\n       token->type = CPP_MACRO_ARG;\n-      token->val.aux = token->val.node->arg_index;\n+      token->val.arg_no = token->val.node->arg_index;\n     }\n   else if (CPP_WTRADITIONAL (pfile) && macro->paramc > 0\n \t   && (token->type == CPP_STRING || token->type == CPP_CHAR))\n@@ -1624,7 +1624,7 @@ cpp_macro_definition (pfile, node)\n \t  cpp_token *token = &macro->expansion[i];\n \n \t  if (token->type == CPP_MACRO_ARG)\n-\t    len += macro->params[token->val.aux - 1]->length;\n+\t    len += macro->params[token->val.arg_no - 1]->length;\n \t  else\n \t    len += cpp_token_len (token); /* Includes room for ' '.  */\n \t  if (token->flags & STRINGIFY_ARG)\n@@ -1675,8 +1675,8 @@ cpp_macro_definition (pfile, node)\n \n \t  if (token->type == CPP_MACRO_ARG)\n \t    {\n-\t      len = macro->params[token->val.aux - 1]->length;\n-\t      memcpy (buffer, macro->params[token->val.aux - 1]->name, len);\n+\t      len = macro->params[token->val.arg_no - 1]->length;\n+\t      memcpy (buffer, macro->params[token->val.arg_no - 1]->name, len);\n \t      buffer += len;\n \t    }\n \t  else"}]}