{"sha": "d250540a66a6dbe71b03213bc20344b1503e1b6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI1MDU0MGE2NmE2ZGJlNzFiMDMyMTNiYzIwMzQ0YjE1MDNlMWI2YQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2012-12-07T13:05:52Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2012-12-07T13:05:52Z"}, "message": "re PR middle-end/55078 (FAIL: g++.dg/torture/pr46154.C)\n\n2012-12-07  Martin Jambor  <mjambor@suse.cz>\n\n\tPR middle-end/55078\n\t* ipa-inline-transform.c (inline_call): Turn #if 0 to #ifdef\n\tENABLE_CHECKING.\n\t* ipa-prop.c (try_make_edge_direct_simple_call): Use\n\tipa_value_from_jfunc.\n\t(try_make_edge_direct_virtual_call): Likewise.\n\t(update_indirect_edges_after_inlining): Lookup new_root_info and pass\n\tit to the functions above.\n\nFrom-SVN: r194301", "tree": {"sha": "0dd256270df13d931607b31bb02193b01e3fa435", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0dd256270df13d931607b31bb02193b01e3fa435"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d250540a66a6dbe71b03213bc20344b1503e1b6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d250540a66a6dbe71b03213bc20344b1503e1b6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d250540a66a6dbe71b03213bc20344b1503e1b6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d250540a66a6dbe71b03213bc20344b1503e1b6a/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4bd7b70b8954bb935a3b88ffa70f384552cc6fb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bd7b70b8954bb935a3b88ffa70f384552cc6fb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bd7b70b8954bb935a3b88ffa70f384552cc6fb3"}], "stats": {"total": 75, "additions": 44, "deletions": 31}, "files": [{"sha": "1c15ab91bf95ad12284b19120faef0fec7f04614", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d250540a66a6dbe71b03213bc20344b1503e1b6a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d250540a66a6dbe71b03213bc20344b1503e1b6a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d250540a66a6dbe71b03213bc20344b1503e1b6a", "patch": "@@ -1,3 +1,14 @@\n+2012-12-07  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR middle-end/55078\n+\t* ipa-inline-transform.c (inline_call): Turn #if 0 to #ifdef\n+\tENABLE_CHECKING.\n+\t* ipa-prop.c (try_make_edge_direct_simple_call): Use\n+\tipa_value_from_jfunc.\n+\t(try_make_edge_direct_virtual_call): Likewise.\n+\t(update_indirect_edges_after_inlining): Lookup new_root_info and pass\n+\tit to the functions above.\n+\n 2012-12-07  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/55590"}, {"sha": "2f6e8165a11d48c2fb7fd6cd675b829c70991469", "filename": "gcc/ipa-inline-transform.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d250540a66a6dbe71b03213bc20344b1503e1b6a/gcc%2Fipa-inline-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d250540a66a6dbe71b03213bc20344b1503e1b6a/gcc%2Fipa-inline-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-transform.c?ref=d250540a66a6dbe71b03213bc20344b1503e1b6a", "patch": "@@ -211,8 +211,7 @@ inline_call (struct cgraph_edge *e, bool update_original,\n   struct cgraph_node *callee = cgraph_function_or_thunk_node (e->callee, NULL);\n   bool new_edges_found = false;\n \n-  /* FIXME: re-enable once ipa-cp problem is fixed.  */\n-#if 0\n+#ifdef ENABLE_CHECKING\n   int estimated_growth = estimate_edge_growth (e);\n   bool predicated = inline_edge_summary (e)->predicate != NULL;\n #endif\n@@ -260,8 +259,8 @@ inline_call (struct cgraph_edge *e, bool update_original,\n   if (update_overall_summary)\n    inline_update_overall_summary (to);\n   new_size = inline_summary (to)->size;\n-  /* FIXME: re-enable once ipa-cp problem is fixed.  */\n-#if 0\n+\n+#ifdef ENABLE_CHECKING\n   /* Verify that estimated growth match real growth.  Allow off-by-one\n      error due to INLINE_SIZE_SCALE roudoff errors.  */\n   gcc_assert (!update_overall_summary || !overall_size\n@@ -270,7 +269,7 @@ inline_call (struct cgraph_edge *e, bool update_original,\n \t\t wrong, we should remove them from callgraph.  */\n \t      || predicated);\n #endif\n-   \n+\n   /* Account the change of overall unit size; external functions will be\n      removed and are thus not accounted.  */\n   if (overall_size"}, {"sha": "55bd372e0a848b09a1b8f7b603d95cbba96a9a0e", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 29, "deletions": 26, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d250540a66a6dbe71b03213bc20344b1503e1b6a/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d250540a66a6dbe71b03213bc20344b1503e1b6a/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=d250540a66a6dbe71b03213bc20344b1503e1b6a", "patch": "@@ -2187,49 +2187,46 @@ ipa_find_agg_cst_for_param (struct ipa_agg_jump_function *agg,\n /* Try to find a destination for indirect edge IE that corresponds to a simple\n    call or a call of a member function pointer and where the destination is a\n    pointer formal parameter described by jump function JFUNC.  If it can be\n-   determined, return the newly direct edge, otherwise return NULL.  */\n+   determined, return the newly direct edge, otherwise return NULL.\n+   NEW_ROOT_INFO is the node info that JFUNC lattices are relative to.  */\n \n static struct cgraph_edge *\n try_make_edge_direct_simple_call (struct cgraph_edge *ie,\n-\t\t\t\t  struct ipa_jump_func *jfunc)\n+\t\t\t\t  struct ipa_jump_func *jfunc,\n+\t\t\t\t  struct ipa_node_params *new_root_info)\n {\n   tree target;\n \n   if (ie->indirect_info->agg_contents)\n-    {\n-      target = ipa_find_agg_cst_for_param (&jfunc->agg,\n-\t\t\t\t\t   ie->indirect_info->offset,\n-\t\t\t\t\t   ie->indirect_info->by_ref);\n-      if (!target)\n-\treturn NULL;\n-    }\n+    target = ipa_find_agg_cst_for_param (&jfunc->agg,\n+\t\t\t\t\t ie->indirect_info->offset,\n+\t\t\t\t\t ie->indirect_info->by_ref);\n   else\n-    {\n-      if (jfunc->type != IPA_JF_CONST)\n-\treturn NULL;\n-      target = ipa_get_jf_constant (jfunc);\n-    }\n+    target = ipa_value_from_jfunc (new_root_info, jfunc);\n+  if (!target)\n+    return NULL;\n   return ipa_make_edge_direct_to_target (ie, target);\n }\n \n-/* Try to find a destination for indirect edge IE that corresponds to a\n-   virtual call based on a formal parameter which is described by jump\n-   function JFUNC and if it can be determined, make it direct and return the\n-   direct edge.  Otherwise, return NULL.  */\n+/* Try to find a destination for indirect edge IE that corresponds to a virtual\n+   call based on a formal parameter which is described by jump function JFUNC\n+   and if it can be determined, make it direct and return the direct edge.\n+   Otherwise, return NULL.  NEW_ROOT_INFO is the node info that JFUNC lattices\n+   are relative to.  */\n \n static struct cgraph_edge *\n try_make_edge_direct_virtual_call (struct cgraph_edge *ie,\n-\t\t\t\t   struct ipa_jump_func *jfunc)\n+\t\t\t\t   struct ipa_jump_func *jfunc,\n+\t\t\t\t   struct ipa_node_params *new_root_info)\n {\n   tree binfo, target;\n \n-  if (jfunc->type != IPA_JF_KNOWN_TYPE)\n+  binfo = ipa_value_from_jfunc (new_root_info, jfunc);\n+\n+  if (!binfo || TREE_CODE (binfo) != TREE_BINFO)\n     return NULL;\n \n-  binfo = TYPE_BINFO (ipa_get_jf_known_type_base_type (jfunc));\n-  gcc_checking_assert (binfo);\n-  binfo = get_binfo_at_offset (binfo, ipa_get_jf_known_type_offset (jfunc)\n-\t\t\t       + ie->indirect_info->offset,\n+  binfo = get_binfo_at_offset (binfo, ie->indirect_info->offset,\n \t\t\t       ie->indirect_info->otr_type);\n   if (binfo)\n     target = gimple_get_virt_method_for_binfo (ie->indirect_info->otr_token,\n@@ -2256,10 +2253,14 @@ update_indirect_edges_after_inlining (struct cgraph_edge *cs,\n {\n   struct ipa_edge_args *top;\n   struct cgraph_edge *ie, *next_ie, *new_direct_edge;\n+  struct ipa_node_params *new_root_info;\n   bool res = false;\n \n   ipa_check_create_edge_args ();\n   top = IPA_EDGE_REF (cs);\n+  new_root_info = IPA_NODE_REF (cs->caller->global.inlined_to\n+\t\t\t\t? cs->caller->global.inlined_to\n+\t\t\t\t: cs->caller);\n \n   for (ie = node->indirect_calls; ie; ie = next_ie)\n     {\n@@ -2309,9 +2310,11 @@ update_indirect_edges_after_inlining (struct cgraph_edge *cs,\n \tcontinue;\n \n       if (ici->polymorphic)\n-\tnew_direct_edge = try_make_edge_direct_virtual_call (ie, jfunc);\n+\tnew_direct_edge = try_make_edge_direct_virtual_call (ie, jfunc,\n+\t\t\t\t\t\t\t     new_root_info);\n       else\n-\tnew_direct_edge = try_make_edge_direct_simple_call (ie, jfunc);\n+\tnew_direct_edge = try_make_edge_direct_simple_call (ie, jfunc,\n+\t\t\t\t\t\t\t    new_root_info);\n \n       if (new_direct_edge)\n \t{"}]}