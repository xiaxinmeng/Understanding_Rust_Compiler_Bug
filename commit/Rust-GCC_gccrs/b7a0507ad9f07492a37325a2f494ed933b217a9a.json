{"sha": "b7a0507ad9f07492a37325a2f494ed933b217a9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdhMDUwN2FkOWYwNzQ5MmEzNzMyNWEyZjQ5NGVkOTMzYjIxN2E5YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-25T09:03:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-25T09:03:40Z"}, "message": "fold: Fix up strn{case,}cmp folding [PR98771]\n\nAs mentioned in the PR, the compiler behaves differently during strncmp\nand strncasecmp folding between 32-bit and 64-bit hosts targeting 64-bit\ntarget.  I think that is highly undesirable.\n\nThe culprit is the host_size_t_cst_p predicate that is used by\nfold_const_call, which punts if the target size_t constants don't fit into\nhost size_t.  This patch gets rid of that behavior, instead it punts the\nsame when it doesn't fit into uhwi.\n\nThe predicate was used for strncmp and strncasecmp folding and for bcmp, memcmp and\nmemchr folding.\nThe constant is in all cases compared to 0, we can do that whether it fits\ninto size_t or unsigned HOST_WIDE_INT, then it is used in s2 <= s0 or\ns2 <= s1 comparisons where s0 and s1 already have uhwi type and represent\nthe sizes of the objects.\nThe important difference is for strn{,case}cmp folding, we pass that s2\nvalue as the last argument to the host functions comparing the c_getstr\nresults.  If s2 fits into size_t, then my patch makes no difference,\nbut if it is larger, we know the 2 c_getstr objects need to fit into the\nhost address space, so larger s2 should just act essentially as strcmp\nor strcasecmp; as none of those objects can occupy 100% of the address\nspace, using MIN (SIZE_MAX, s2) achieves that.\n\n2021-01-25  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR testsuite/98771\n\t* fold-const-call.c (host_size_t_cst_p): Renamed to ...\n\t(size_t_cst_p): ... this.  Check and store unsigned HOST_WIDE_INT\n\tvalue rather than host size_t.\n\t(fold_const_call): Change type of s2 from size_t to\n\tunsigned HOST_WIDE_INT.  Use size_t_cst_p instead of\n\thost_size_t_cst_p.  For strncmp calls, pass MIN (s2, SIZE_MAX)\n\tinstead of s2 as last argument.", "tree": {"sha": "fd54e67d9e788f353a70544dd36fef753603546e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd54e67d9e788f353a70544dd36fef753603546e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7a0507ad9f07492a37325a2f494ed933b217a9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7a0507ad9f07492a37325a2f494ed933b217a9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7a0507ad9f07492a37325a2f494ed933b217a9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7a0507ad9f07492a37325a2f494ed933b217a9a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "389b67feac78c8f21c6946bf8e36a16060f45728", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/389b67feac78c8f21c6946bf8e36a16060f45728", "html_url": "https://github.com/Rust-GCC/gccrs/commit/389b67feac78c8f21c6946bf8e36a16060f45728"}], "stats": {"total": 22, "additions": 10, "deletions": 12}, "files": [{"sha": "a1d70b62c31ab94190cb281b7d66a4cba3787ba3", "filename": "gcc/fold-const-call.c", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7a0507ad9f07492a37325a2f494ed933b217a9a/gcc%2Ffold-const-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7a0507ad9f07492a37325a2f494ed933b217a9a/gcc%2Ffold-const-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const-call.c?ref=b7a0507ad9f07492a37325a2f494ed933b217a9a", "patch": "@@ -53,16 +53,15 @@ complex_cst_p (tree t)\n   return TREE_CODE (t) == COMPLEX_CST;\n }\n \n-/* Return true if ARG is a constant in the range of the host size_t.\n+/* Return true if ARG is a size_type_node constant.\n    Store it in *SIZE_OUT if so.  */\n \n static inline bool\n-host_size_t_cst_p (tree t, size_t *size_out)\n+size_t_cst_p (tree t, unsigned HOST_WIDE_INT *size_out)\n {\n   if (types_compatible_p (size_type_node, TREE_TYPE (t))\n       && integer_cst_p (t)\n-      && (wi::min_precision (wi::to_wide (t), UNSIGNED)\n-\t  <= sizeof (size_t) * CHAR_BIT))\n+      && tree_fits_uhwi_p (t))\n     {\n       *size_out = tree_to_uhwi (t);\n       return true;\n@@ -1767,37 +1766,36 @@ fold_const_call (combined_fn fn, tree type, tree arg0, tree arg1, tree arg2)\n {\n   const char *p0, *p1;\n   char c;\n-  unsigned HOST_WIDE_INT s0, s1;\n-  size_t s2 = 0;\n+  unsigned HOST_WIDE_INT s0, s1, s2 = 0;\n   switch (fn)\n     {\n     case CFN_BUILT_IN_STRNCMP:\n-      if (!host_size_t_cst_p (arg2, &s2))\n+      if (!size_t_cst_p (arg2, &s2))\n \treturn NULL_TREE;\n       if (s2 == 0\n \t  && !TREE_SIDE_EFFECTS (arg0)\n \t  && !TREE_SIDE_EFFECTS (arg1))\n \treturn build_int_cst (type, 0);\n       else if ((p0 = c_getstr (arg0)) && (p1 = c_getstr (arg1)))\n-\treturn build_int_cst (type, strncmp (p0, p1, s2));\n+\treturn build_int_cst (type, strncmp (p0, p1, MIN (s2, SIZE_MAX)));\n       return NULL_TREE;\n \n     case CFN_BUILT_IN_STRNCASECMP:\n-      if (!host_size_t_cst_p (arg2, &s2))\n+      if (!size_t_cst_p (arg2, &s2))\n \treturn NULL_TREE;\n       if (s2 == 0\n \t  && !TREE_SIDE_EFFECTS (arg0)\n \t  && !TREE_SIDE_EFFECTS (arg1))\n \treturn build_int_cst (type, 0);\n       else if ((p0 = c_getstr (arg0))\n \t       && (p1 = c_getstr (arg1))\n-\t       && strncmp (p0, p1, s2) == 0)\n+\t       && strncmp (p0, p1, MIN (s2, SIZE_MAX)) == 0)\n \treturn build_int_cst (type, 0);\n       return NULL_TREE;\n \n     case CFN_BUILT_IN_BCMP:\n     case CFN_BUILT_IN_MEMCMP:\n-      if (!host_size_t_cst_p (arg2, &s2))\n+      if (!size_t_cst_p (arg2, &s2))\n \treturn NULL_TREE;\n       if (s2 == 0\n \t  && !TREE_SIDE_EFFECTS (arg0)\n@@ -1811,7 +1809,7 @@ fold_const_call (combined_fn fn, tree type, tree arg0, tree arg1, tree arg2)\n       return NULL_TREE;\n \n     case CFN_BUILT_IN_MEMCHR:\n-      if (!host_size_t_cst_p (arg2, &s2))\n+      if (!size_t_cst_p (arg2, &s2))\n \treturn NULL_TREE;\n       if (s2 == 0\n \t  && !TREE_SIDE_EFFECTS (arg0)"}]}