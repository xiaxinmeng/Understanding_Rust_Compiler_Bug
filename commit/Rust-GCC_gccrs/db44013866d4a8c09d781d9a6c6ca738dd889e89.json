{"sha": "db44013866d4a8c09d781d9a6c6ca738dd889e89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI0NDAxMzg2NmQ0YThjMDlkNzgxZDlhNmM2Y2E3MzhkZDg4OWU4OQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2017-08-07T15:09:07Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-08-07T15:09:07Z"}, "message": "c-ada-spec.c (has_nontrivial_methods): Test for FUNCTION_DECL.\n\n\t* c-ada-spec.c (has_nontrivial_methods): Test for FUNCTION_DECL.\n\t(print_ada_methods): Likewise.\n\t(print_ada_declaration): Likewise.\n\nFrom-SVN: r250920", "tree": {"sha": "f99703c1e4bafd2f545e7b0a29aced53f018a146", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f99703c1e4bafd2f545e7b0a29aced53f018a146"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db44013866d4a8c09d781d9a6c6ca738dd889e89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db44013866d4a8c09d781d9a6c6ca738dd889e89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db44013866d4a8c09d781d9a6c6ca738dd889e89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db44013866d4a8c09d781d9a6c6ca738dd889e89/comments", "author": null, "committer": null, "parents": [{"sha": "30079dde47ad224613340f220df061cb4a5829b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30079dde47ad224613340f220df061cb4a5829b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30079dde47ad224613340f220df061cb4a5829b7"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "1243eefa91edee83d1886956dbbae0ad708626ea", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db44013866d4a8c09d781d9a6c6ca738dd889e89/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db44013866d4a8c09d781d9a6c6ca738dd889e89/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=db44013866d4a8c09d781d9a6c6ca738dd889e89", "patch": "@@ -1,3 +1,9 @@\n+2017-08-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* c-ada-spec.c (has_nontrivial_methods): Test for FUNCTION_DECL.\n+\t(print_ada_methods): Likewise.\n+\t(print_ada_declaration): Likewise.\n+\n 2017-08-07  Martin Liska  <mliska@suse.cz>\n \n \t* array-notation-common.c: Add new includes."}, {"sha": "6c050fb673b9942f776248bda1999148e1d44ce3", "filename": "gcc/c-family/c-ada-spec.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db44013866d4a8c09d781d9a6c6ca738dd889e89/gcc%2Fc-family%2Fc-ada-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db44013866d4a8c09d781d9a6c6ca738dd889e89/gcc%2Fc-family%2Fc-ada-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.c?ref=db44013866d4a8c09d781d9a6c6ca738dd889e89", "patch": "@@ -1099,7 +1099,7 @@ has_nontrivial_methods (tree type)\n \n   /* If there are user-defined methods, they are deemed non-trivial.  */\n   for (tree fld = TYPE_FIELDS (type); fld; fld = DECL_CHAIN (fld))\n-    if (TREE_CODE (TREE_TYPE (fld)) == METHOD_TYPE && !DECL_ARTIFICIAL (fld))\n+    if (TREE_CODE (fld) == FUNCTION_DECL && !DECL_ARTIFICIAL (fld))\n       return true;\n \n   return false;\n@@ -2442,7 +2442,7 @@ print_ada_methods (pretty_printer *buffer, tree node, int spc)\n \n   int res = 1;\n   for (tree fld = TYPE_FIELDS (node); fld; fld = DECL_CHAIN (fld))\n-    if (TREE_CODE (TREE_TYPE (fld)) == METHOD_TYPE)\n+    if (TREE_CODE (fld) == FUNCTION_DECL)\n       {\n \tif (res)\n \t  {\n@@ -2955,8 +2955,7 @@ print_ada_declaration (pretty_printer *buffer, tree t, tree type, int spc)\n \n       if (is_constructor && RECORD_OR_UNION_TYPE_P (type))\n \tfor (tree fld = TYPE_FIELDS (type); fld; fld = DECL_CHAIN (fld))\n-\t  if (TREE_CODE (TREE_TYPE (fld)) == METHOD_TYPE\n-\t      && cpp_check (fld, IS_ABSTRACT))\n+\t  if (TREE_CODE (fld) == FUNCTION_DECL && cpp_check (fld, IS_ABSTRACT))\n \t    {\n \t      is_abstract_class = true;\n \t      break;\n@@ -3036,7 +3035,7 @@ print_ada_declaration (pretty_printer *buffer, tree t, tree type, int spc)\n \t\t    is_interface = 0;\n \t\t  has_fields = true;\n \t\t}\n-\t      else if (TREE_CODE (TREE_TYPE (fld)) == METHOD_TYPE\n+\t      else if (TREE_CODE (fld) == FUNCTION_DECL\n \t\t       && !DECL_ARTIFICIAL (fld))\n \t\t{\n \t\t  if (cpp_check (fld, IS_ABSTRACT))"}]}