{"sha": "4c48007b43c7e5fed48347f81e3d27e71e6a5751", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM0ODAwN2I0M2M3ZTVmZWQ0ODM0N2Y4MWUzZDI3ZTcxZTZhNTc1MQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2009-04-12T18:55:25Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-04-12T18:55:25Z"}, "message": "re PR target/39740 (unrecognizable insn on alpha using -O3 and -std=c99)\n\n2009-04-12  Uros Bizjak  <ubizjak@gmail.com>\n\n\tPR target/39740\n\t* config/alpha/predicates.md (local_symbolic_operand): Return 1 for\n\toffseted label references.\n\ntestsuite/ChangeLog:\n\n\tPR target/39740\n\t* gcc.target/alpha/pr39740.c: New test.\n\nFrom-SVN: r145985", "tree": {"sha": "91cc1b83b4c42ec3e0bcf9a0ba74589e5b4a269e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91cc1b83b4c42ec3e0bcf9a0ba74589e5b4a269e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c48007b43c7e5fed48347f81e3d27e71e6a5751", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c48007b43c7e5fed48347f81e3d27e71e6a5751", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c48007b43c7e5fed48347f81e3d27e71e6a5751", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c48007b43c7e5fed48347f81e3d27e71e6a5751/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4de43cbedd60c999ead68322684fa9735a079793", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4de43cbedd60c999ead68322684fa9735a079793", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4de43cbedd60c999ead68322684fa9735a079793"}], "stats": {"total": 180, "additions": 177, "deletions": 3}, "files": [{"sha": "cce9c47783d30a96b382b6be73d7b37ff77d3bc4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c48007b43c7e5fed48347f81e3d27e71e6a5751/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c48007b43c7e5fed48347f81e3d27e71e6a5751/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c48007b43c7e5fed48347f81e3d27e71e6a5751", "patch": "@@ -1,3 +1,9 @@\n+2009-04-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/39740\n+\t* config/alpha/predicates.md (local_symbolic_operand): Return 1 for\n+\toffseted label references.\n+\n 2009-04-11  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-ssa-pre.c (eliminate): Fix call of update_stmt."}, {"sha": "b8e424273b84861c2589a6f8a76aeb13a328335c", "filename": "gcc/config/alpha/predicates.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c48007b43c7e5fed48347f81e3d27e71e6a5751/gcc%2Fconfig%2Falpha%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c48007b43c7e5fed48347f81e3d27e71e6a5751/gcc%2Fconfig%2Falpha%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fpredicates.md?ref=4c48007b43c7e5fed48347f81e3d27e71e6a5751", "patch": "@@ -324,14 +324,14 @@\n (define_predicate \"local_symbolic_operand\"\n   (match_code \"label_ref,const,symbol_ref\")\n {\n-  if (GET_CODE (op) == LABEL_REF)\n-    return 1;\n-\n   if (GET_CODE (op) == CONST\n       && GET_CODE (XEXP (op, 0)) == PLUS\n       && GET_CODE (XEXP (XEXP (op, 0), 1)) == CONST_INT)\n     op = XEXP (XEXP (op, 0), 0);\n \n+  if (GET_CODE (op) == LABEL_REF)\n+    return 1;\n+\n   if (GET_CODE (op) != SYMBOL_REF)\n     return 0;\n "}, {"sha": "a4452b375660200ad611678481c423610b7acd9d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c48007b43c7e5fed48347f81e3d27e71e6a5751/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c48007b43c7e5fed48347f81e3d27e71e6a5751/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4c48007b43c7e5fed48347f81e3d27e71e6a5751", "patch": "@@ -1,3 +1,8 @@\n+009-04-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/39740\n+\t* gcc.target/alpha/pr39740.c: New test.\n+\n 2009-04-11  Daniel Kraft  <d@domob.eu>\n \n \tPR fortran/37746"}, {"sha": "ed4fee145d4bfdb25df7c1584bc5852ae2b394d0", "filename": "gcc/testsuite/gcc.target/alpha/pr39740.c", "status": "added", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c48007b43c7e5fed48347f81e3d27e71e6a5751/gcc%2Ftestsuite%2Fgcc.target%2Falpha%2Fpr39740.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c48007b43c7e5fed48347f81e3d27e71e6a5751/gcc%2Ftestsuite%2Fgcc.target%2Falpha%2Fpr39740.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Falpha%2Fpr39740.c?ref=4c48007b43c7e5fed48347f81e3d27e71e6a5751", "patch": "@@ -0,0 +1,163 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -std=c99\" } */\n+\n+typedef int R_len_t;\n+typedef unsigned int SEXPTYPE;\n+struct sxpinfo_struct\n+{\n+  SEXPTYPE type:5;\n+};\n+\n+struct vecsxp_struct\n+{\n+  R_len_t length;\n+  R_len_t truelength;\n+};\n+\n+struct listsxp_struct\n+{\n+  struct SEXPREC *carval;\n+  struct SEXPREC *cdrval;\n+  struct SEXPREC *tagval;\n+};\n+\n+typedef struct SEXPREC\n+{\n+  struct sxpinfo_struct sxpinfo;\n+  union\n+  {\n+    struct listsxp_struct listsxp;\n+  } u;\n+} SEXPREC, *SEXP;\n+\n+typedef struct VECTOR_SEXPREC\n+{\n+  struct vecsxp_struct vecsxp;\n+} VECTOR_SEXPREC, *VECSEXP;\n+\n+typedef union\n+{\n+  VECTOR_SEXPREC s;\n+  double align;\n+} SEXPREC_ALIGN;\n+\n+extern SEXP R_NilValue;\n+extern SEXP R_MissingArg;\n+\n+int Rf_envlength (SEXP rho);\n+SEXP Rf_protect (SEXP);\n+const char *Rf_translateChar (SEXP);\n+\n+inline R_len_t\n+Rf_length (SEXP s)\n+{\n+  int i;\n+  switch (((s)->sxpinfo.type))\n+    {\n+    case 0:\n+      return 0;\n+    case 24:\n+      return (((VECSEXP) (s))->vecsxp.length);\n+    case 6:\n+    case 17:\n+      i = 0;\n+      while (s != ((void *) 0) && s != R_NilValue)\n+\t{\n+\t  i++;\n+\t  s = ((s)->u.listsxp.cdrval);\n+\t}\n+      return i;\n+    case 4:\n+      return Rf_envlength (s);\n+    default:\n+      return 1;\n+    }\n+}\n+\n+inline SEXP\n+Rf_lang3 (SEXP s, SEXP t, SEXP u)\n+{\n+  return s;\n+}\n+\n+typedef SEXP (*CCODE) (SEXP, SEXP, SEXP, SEXP);\n+\n+static SEXP PlusSymbol;\n+static SEXP MinusSymbol;\n+static SEXP DivideSymbol;\n+\n+int isZero (SEXP s);\n+SEXP PP (SEXP s);\n+SEXP AddParens (SEXP expr);\n+SEXP Rf_install ();\n+\n+static int\n+isUminus (SEXP s)\n+{\n+  if (((s)->sxpinfo.type) == 6 && ((s)->u.listsxp.carval) == MinusSymbol)\n+    {\n+      switch (Rf_length (s))\n+\t{\n+\tcase 2:\n+\t  return 1;\n+\tcase 3:\n+\t  if (((((((s)->u.listsxp.cdrval))->u.listsxp.cdrval))->u.listsxp.\n+\t       carval) == R_MissingArg)\n+\t    return 1;\n+\t  else\n+\t    return 0;\n+\t}\n+    }\n+  else\n+    return 0;\n+}\n+\n+static SEXP\n+simplify (SEXP fun, SEXP arg1, SEXP arg2)\n+{\n+  SEXP ans;\n+  if (fun == PlusSymbol)\n+    {\n+      if (isZero (arg1))\n+\tans = arg2;\n+      else if (isUminus (arg1))\n+\tans =\n+\t  simplify (MinusSymbol, arg2,\n+\t\t    ((((arg1)->u.listsxp.cdrval))->u.listsxp.carval));\n+      else if (isUminus (arg2))\n+\tans =\n+\t  simplify (MinusSymbol, arg1,\n+\t\t    ((((arg2)->u.listsxp.cdrval))->u.listsxp.carval));\n+    }\n+  else if (fun == DivideSymbol)\n+    {\n+      ans = Rf_lang3 (DivideSymbol, arg1, arg2);\n+    }\n+\n+  return ans;\n+}\n+\n+\n+static SEXP\n+D (SEXP expr, SEXP var)\n+{\n+  return simplify (PlusSymbol,\n+\t\t   PP (D\n+\t\t       (((((expr)->u.listsxp.cdrval))->u.listsxp.carval),\n+\t\t\tvar)),\n+\t\t   PP (D\n+\t\t       (((((((expr)->u.listsxp.cdrval))->u.listsxp.cdrval))->\n+\t\t\t u.listsxp.carval), var)));\n+}\n+\n+SEXP\n+  __attribute__ ((visibility (\"hidden\"))) do_D (SEXP call, SEXP op, SEXP args,\n+\t\t\t\t\t\tSEXP env)\n+{\n+  SEXP expr, var;\n+  var = Rf_install ();\n+  expr = ((args)->u.listsxp.carval);\n+  Rf_protect (expr = D (expr, var));\n+  expr = AddParens (expr);\n+  return expr;\n+}"}]}