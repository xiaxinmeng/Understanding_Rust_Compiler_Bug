{"sha": "c124b345e460780e3c3d4a6e58d0e6e03da982a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzEyNGIzNDVlNDYwNzgwZTNjM2Q0YTZlNThkMGU2ZTAzZGE5ODJhMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-01-23T15:17:56Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-01-23T15:17:56Z"}, "message": "i386: Fix ICEs on TImode signed overflow add/sub patterns [PR93376]\n\nThe following testcase ICEs, because during try_combine of i3:\n(insn 18 17 19 2 (parallel [\n            (set (reg:CCO 17 flags)\n                (eq:CCO (plus:OI (sign_extend:OI (reg:TI 96))\n                        (const_int 1 [0x1]))\n                    (sign_extend:OI (plus:TI (reg:TI 96)\n                            (const_int 1 [0x1])))))\n            (set (reg:TI 98)\n                (plus:TI (reg:TI 96)\n                    (const_int 1 [0x1])))\n        ]) \"pr93376.c\":8:10 223 {*addvti4_doubleword_1}\n     (expr_list:REG_UNUSED (reg:TI 98)\n        (expr_list:REG_DEAD (reg:TI 96)\n            (nil))))\nand i2:\n(insn 17 37 18 2 (set (reg:TI 96)\n        (const_wide_int 0x7fffffffffffffffffffffffffffffff)) \"pr93376.c\":8:10 65 {*movti_internal}\n     (nil))\nthe eq in there gets simplified into:\n(eq:CCO (const_wide_int 0x080000000000000000000000000000000)\n    (const_wide_int 0x80000000000000000000000000000000))\nand simplify-rtx.c tries to simplify it by simplifying MINUS\nof the two operands.\nNow, i386 defines MAX_BITSIZE_MODE_ANY_INT to 128, because OImode\nand XImode are used mainly as a placeholder for the vector modes;\nthese new signed overflow patterns are an exception to that,\nbut what they really need is just TImode precision + 1 (maybe 2 worst case)\nbits at any time.\n\nwide-int.h defines WIDE_INT_MAX_ELTS in a way that it contains one more\nHWI above number of HWIs to cover WIDE_INT_MAX_ELTS, so on i386 that is\n3 HWIs, meaning that TImode precision + 1/2 bits is still representable in\nthere.  Unfortunately, the way wi::sub_large is implemented, it needs\nnot just those 3 HWIs, but one HWI above the maximum of the lengths of\nboth operands, which means it buffer overflows, overwrites the following\nprecision in wide_int_storage and ICEs later on.  The need for 4 HWIs is\nonly temporary, because canonize immediately after it canonicalizes it\nback to 3 HWIs only.\n\nThe patch is something suggested by Richard S., avoid using OImode\nfor this and instead use a partial int mode that is smaller.\n\n2020-01-23  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/93376\n\t* config/i386/i386-modes.def (POImode): New mode.\n\t(MAX_BITSIZE_MODE_ANY_INT): Change from 128 to 160.\n\t* config/i386/i386.md (DPWI): New mode attribute.\n\t(addv<mode>4, subv<mode>4): Use <DPWI> instead of <DWI>.\n\t(QWI): Rename to...\n\t(QPWI): ... this.  Use POI instead of OI for TImode.\n\t(*addv<dwi>4_doubleword, *addv<dwi>4_doubleword_1,\n\t*subv<dwi>4_doubleword, *subv<dwi>4_doubleword_1): Use <QPWI>\n\tinstead of <QWI>.\n\n\t* gcc.dg/pr93376.c: New test.", "tree": {"sha": "fe5df739de44f2f32a72998be42e9eec2c98b66f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe5df739de44f2f32a72998be42e9eec2c98b66f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c124b345e460780e3c3d4a6e58d0e6e03da982a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c124b345e460780e3c3d4a6e58d0e6e03da982a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c124b345e460780e3c3d4a6e58d0e6e03da982a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c124b345e460780e3c3d4a6e58d0e6e03da982a1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04681fca936b5bca1dd374dfb0fbca7ccb028994", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04681fca936b5bca1dd374dfb0fbca7ccb028994", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04681fca936b5bca1dd374dfb0fbca7ccb028994"}], "stats": {"total": 104, "additions": 77, "deletions": 27}, "files": [{"sha": "3d50dabe603ec72917d509af8be095d97caee7b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124b345e460780e3c3d4a6e58d0e6e03da982a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124b345e460780e3c3d4a6e58d0e6e03da982a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c124b345e460780e3c3d4a6e58d0e6e03da982a1", "patch": "@@ -1,3 +1,16 @@\n+2020-01-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/93376\n+\t* config/i386/i386-modes.def (POImode): New mode.\n+\t(MAX_BITSIZE_MODE_ANY_INT): Change from 128 to 160.\n+\t* config/i386/i386.md (DPWI): New mode attribute.\n+\t(addv<mode>4, subv<mode>4): Use <DPWI> instead of <DWI>.\n+\t(QWI): Rename to...\n+\t(QPWI): ... this.  Use POI instead of OI for TImode.\n+\t(*addv<dwi>4_doubleword, *addv<dwi>4_doubleword_1,\n+\t*subv<dwi>4_doubleword, *subv<dwi>4_doubleword_1): Use <QPWI>\n+\tinstead of <QWI>.\n+\n 2020-01-23  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR target/93341"}, {"sha": "4278bb82281ccbf75c00bf8813ff21adcbe8ce62", "filename": "gcc/config/i386/i386-modes.def", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124b345e460780e3c3d4a6e58d0e6e03da982a1/gcc%2Fconfig%2Fi386%2Fi386-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124b345e460780e3c3d4a6e58d0e6e03da982a1/gcc%2Fconfig%2Fi386%2Fi386-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-modes.def?ref=c124b345e460780e3c3d4a6e58d0e6e03da982a1", "patch": "@@ -107,10 +107,19 @@ INT_MODE (XI, 64);\n PARTIAL_INT_MODE (HI, 16, P2QI);\n PARTIAL_INT_MODE (SI, 32, P2HI);\n \n+/* Mode used for signed overflow checking of TImode.  As\n+   MAX_BITSIZE_MODE_ANY_INT is only 160, wide-int.h reserves only that\n+   rounded up to multiple of HOST_BITS_PER_WIDE_INT bits in wide_int etc.,\n+   so OImode is too large.  For the overflow checking we actually need\n+   just 1 or 2 bits beyond TImode precision.  Use 160 bits to have\n+   a multiple of 32.  */\n+PARTIAL_INT_MODE (OI, 160, POI);\n+\n /* Keep the OI and XI modes from confusing the compiler into thinking\n    that these modes could actually be used for computation.  They are\n-   only holders for vectors during data movement.  */\n-#define MAX_BITSIZE_MODE_ANY_INT (128)\n+   only holders for vectors during data movement.  Include POImode precision\n+   though.  */\n+#define MAX_BITSIZE_MODE_ANY_INT (160)\n \n /* The symbol Pmode stands for one of the above machine modes (usually SImode).\n    The tm.h file specifies which one.  It is not a distinct mode.  */"}, {"sha": "98d452aecfe5c8ff3219d84c73e0a114a57eabd2", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 28, "deletions": 25, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124b345e460780e3c3d4a6e58d0e6e03da982a1/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124b345e460780e3c3d4a6e58d0e6e03da982a1/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=c124b345e460780e3c3d4a6e58d0e6e03da982a1", "patch": "@@ -6054,15 +6054,18 @@\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"QI\")])\n \n+;; Like DWI, but use POImode instead of OImode.\n+(define_mode_attr DPWI [(QI \"HI\") (HI \"SI\") (SI \"DI\") (DI \"TI\") (TI \"POI\")])\n+\n ;; Add with jump on overflow.\n (define_expand \"addv<mode>4\"\n   [(parallel [(set (reg:CCO FLAGS_REG)\n \t\t   (eq:CCO\n-\t\t     (plus:<DWI>\n-\t\t       (sign_extend:<DWI>\n+\t\t     (plus:<DPWI>\n+\t\t       (sign_extend:<DPWI>\n \t\t\t (match_operand:SWIDWI 1 \"nonimmediate_operand\"))\n \t\t       (match_dup 4))\n-\t\t\t (sign_extend:<DWI>\n+\t\t\t (sign_extend:<DPWI>\n \t\t\t   (plus:SWIDWI (match_dup 1)\n \t\t\t     (match_operand:SWIDWI 2\n \t\t\t       \"<general_hilo_operand>\")))))\n@@ -6078,7 +6081,7 @@\n   if (CONST_SCALAR_INT_P (operands[2]))\n     operands[4] = operands[2];\n   else\n-    operands[4] = gen_rtx_SIGN_EXTEND (<DWI>mode, operands[2]);\n+    operands[4] = gen_rtx_SIGN_EXTEND (<DPWI>mode, operands[2]);\n })\n \n (define_insn \"*addv<mode>4\"\n@@ -6123,17 +6126,17 @@\n \t      (const_string \"<MODE_SIZE>\")))])\n \n ;; Quad word integer modes as mode attribute.\n-(define_mode_attr QWI [(SI \"TI\") (DI \"OI\")])\n+(define_mode_attr QPWI [(SI \"TI\") (DI \"POI\")])\n \n (define_insn_and_split \"*addv<dwi>4_doubleword\"\n   [(set (reg:CCO FLAGS_REG)\n \t(eq:CCO\n-\t  (plus:<QWI>\n-\t    (sign_extend:<QWI>\n+\t  (plus:<QPWI>\n+\t    (sign_extend:<QPWI>\n \t      (match_operand:<DWI> 1 \"nonimmediate_operand\" \"%0,0\"))\n-\t    (sign_extend:<QWI>\n+\t    (sign_extend:<QPWI>\n \t      (match_operand:<DWI> 2 \"x86_64_hilo_general_operand\" \"r<di>,o\")))\n-\t  (sign_extend:<QWI>\n+\t  (sign_extend:<QPWI>\n \t    (plus:<DWI> (match_dup 1) (match_dup 2)))))\n    (set (match_operand:<DWI> 0 \"nonimmediate_operand\" \"=ro,r\")\n \t(plus:<DWI> (match_dup 1) (match_dup 2)))]\n@@ -6172,11 +6175,11 @@\n (define_insn_and_split \"*addv<dwi>4_doubleword_1\"\n   [(set (reg:CCO FLAGS_REG)\n \t(eq:CCO\n-\t  (plus:<QWI>\n-\t    (sign_extend:<QWI>\n+\t  (plus:<QPWI>\n+\t    (sign_extend:<QPWI>\n \t      (match_operand:<DWI> 1 \"nonimmediate_operand\" \"%0\"))\n-\t    (match_operand:<QWI> 3 \"const_scalar_int_operand\" \"\"))\n-\t  (sign_extend:<QWI>\n+\t    (match_operand:<QPWI> 3 \"const_scalar_int_operand\" \"\"))\n+\t  (sign_extend:<QPWI>\n \t    (plus:<DWI>\n \t      (match_dup 1)\n \t      (match_operand:<DWI> 2 \"x86_64_hilo_general_operand\" \"<di>\")))))\n@@ -6570,11 +6573,11 @@\n (define_expand \"subv<mode>4\"\n   [(parallel [(set (reg:CCO FLAGS_REG)\n \t\t   (eq:CCO\n-\t\t     (minus:<DWI>\n-\t\t       (sign_extend:<DWI>\n+\t\t     (minus:<DPWI>\n+\t\t       (sign_extend:<DPWI>\n \t\t\t (match_operand:SWIDWI 1 \"nonimmediate_operand\"))\n \t\t       (match_dup 4))\n-\t\t     (sign_extend:<DWI>\n+\t\t     (sign_extend:<DPWI>\n \t\t       (minus:SWIDWI (match_dup 1)\n \t\t\t\t     (match_operand:SWIDWI 2\n \t\t\t\t\t\t\"<general_hilo_operand>\")))))\n@@ -6590,7 +6593,7 @@\n   if (CONST_SCALAR_INT_P (operands[2]))\n     operands[4] = operands[2];\n   else\n-    operands[4] = gen_rtx_SIGN_EXTEND (<DWI>mode, operands[2]);\n+    operands[4] = gen_rtx_SIGN_EXTEND (<DPWI>mode, operands[2]);\n })\n \n (define_insn \"*subv<mode>4\"\n@@ -6637,12 +6640,12 @@\n (define_insn_and_split \"*subv<dwi>4_doubleword\"\n   [(set (reg:CCO FLAGS_REG)\n \t(eq:CCO\n-\t  (minus:<QWI>\n-\t    (sign_extend:<QWI>\n+\t  (minus:<QPWI>\n+\t    (sign_extend:<QPWI>\n \t      (match_operand:<DWI> 1 \"nonimmediate_operand\" \"0,0\"))\n-\t    (sign_extend:<QWI>\n+\t    (sign_extend:<QPWI>\n \t      (match_operand:<DWI> 2 \"x86_64_hilo_general_operand\" \"r<di>,o\")))\n-\t  (sign_extend:<QWI>\n+\t  (sign_extend:<QPWI>\n \t    (minus:<DWI> (match_dup 1) (match_dup 2)))))\n    (set (match_operand:<DWI> 0 \"nonimmediate_operand\" \"=ro,r\")\n \t(minus:<DWI> (match_dup 1) (match_dup 2)))]\n@@ -6679,11 +6682,11 @@\n (define_insn_and_split \"*subv<dwi>4_doubleword_1\"\n   [(set (reg:CCO FLAGS_REG)\n \t(eq:CCO\n-\t  (minus:<QWI>\n-\t    (sign_extend:<QWI>\n+\t  (minus:<QPWI>\n+\t    (sign_extend:<QPWI>\n \t      (match_operand:<DWI> 1 \"nonimmediate_operand\" \"0\"))\n-\t    (match_operand:<QWI> 3 \"const_scalar_int_operand\" \"\"))\n-\t  (sign_extend:<QWI>\n+\t    (match_operand:<QPWI> 3 \"const_scalar_int_operand\" \"\"))\n+\t  (sign_extend:<QPWI>\n \t    (minus:<DWI>\n \t      (match_dup 1)\n \t      (match_operand:<DWI> 2 \"x86_64_hilo_general_operand\" \"<di>\")))))"}, {"sha": "fef595104fe52dfe73825e0c8cddbd685a9aa49e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124b345e460780e3c3d4a6e58d0e6e03da982a1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124b345e460780e3c3d4a6e58d0e6e03da982a1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c124b345e460780e3c3d4a6e58d0e6e03da982a1", "patch": "@@ -1,3 +1,8 @@\n+2020-01-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/93376\n+\t* gcc.dg/pr93376.c: New test.\n+\n 2020-01-23  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR target/93341"}, {"sha": "49341ff0a4b1918a7fd260a0002016b56f2bee84", "filename": "gcc/testsuite/gcc.dg/pr93376.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c124b345e460780e3c3d4a6e58d0e6e03da982a1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93376.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c124b345e460780e3c3d4a6e58d0e6e03da982a1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93376.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93376.c?ref=c124b345e460780e3c3d4a6e58d0e6e03da982a1", "patch": "@@ -0,0 +1,20 @@\n+/* PR target/93376 */\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-Og -finline-functions-called-once\" } */\n+\n+unsigned a, b, c;\n+\n+int\n+bar (int x)\n+{\n+  short s = __builtin_sub_overflow (~x, 0, &b);\n+  a = __builtin_ffsll (~x);\n+  return __builtin_add_overflow_p (-(unsigned __int128) a, s,\n+\t\t\t\t   (unsigned __int128) 0);\n+}\n+\n+void\n+foo (void)\n+{\n+  c = bar (0);\n+}"}]}