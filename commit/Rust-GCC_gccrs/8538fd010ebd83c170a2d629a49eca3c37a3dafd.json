{"sha": "8538fd010ebd83c170a2d629a49eca3c37a3dafd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUzOGZkMDEwZWJkODNjMTcwYTJkNjI5YTQ5ZWNhM2MzN2EzZGFmZA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2000-12-03T07:16:20Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-12-03T07:16:20Z"}, "message": "Makefile.in: Rebuilt.\n\n\t* Makefile.in: Rebuilt.\n\t* Makefile.am (awt_java_source_files): Added new file.\n\t* java/awt/GridLayout.java: New file.\n\nFrom-SVN: r37967", "tree": {"sha": "5a25c251727e076da05efd83cfb0fec8a31a892b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a25c251727e076da05efd83cfb0fec8a31a892b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8538fd010ebd83c170a2d629a49eca3c37a3dafd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8538fd010ebd83c170a2d629a49eca3c37a3dafd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8538fd010ebd83c170a2d629a49eca3c37a3dafd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8538fd010ebd83c170a2d629a49eca3c37a3dafd/comments", "author": null, "committer": null, "parents": [{"sha": "cf466d69760c7b369b27ac40b669cd87f5bcb966", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf466d69760c7b369b27ac40b669cd87f5bcb966", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf466d69760c7b369b27ac40b669cd87f5bcb966"}], "stats": {"total": 293, "additions": 287, "deletions": 6}, "files": [{"sha": "49c899572aef79d953a830ddb59e84badb3cf42a", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8538fd010ebd83c170a2d629a49eca3c37a3dafd/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8538fd010ebd83c170a2d629a49eca3c37a3dafd/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=8538fd010ebd83c170a2d629a49eca3c37a3dafd", "patch": "@@ -1,3 +1,9 @@\n+2000-12-03  Tom Tromey  <tromey@redhat.com>\n+\n+\t* Makefile.in: Rebuilt.\n+\t* Makefile.am (awt_java_source_files): Added new file.\n+\t* java/awt/GridLayout.java: New file.\n+\n 2000-12-02  Tom Tromey  <tromey@redhat.com>\n \n \t* Makefile.in: Rebuilt."}, {"sha": "ff65cf0988f48002efd1914640013c4c667b2b10", "filename": "libjava/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8538fd010ebd83c170a2d629a49eca3c37a3dafd/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8538fd010ebd83c170a2d629a49eca3c37a3dafd/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=8538fd010ebd83c170a2d629a49eca3c37a3dafd", "patch": "@@ -591,6 +591,7 @@ java/awt/Frame.java \\\n java/awt/Graphics.java \\\n java/awt/Graphics2D.java \\\n java/awt/GraphicsConfiguration.java \\\n+java/awt/GridLayout.java \\\n java/awt/IllegalComponentStateException.java \\\n java/awt/Image.java \\\n java/awt/Insets.java \\"}, {"sha": "6ee2fe5a8e06b62285ce4d94c72ac4a9e56e3ed7", "filename": "libjava/Makefile.in", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8538fd010ebd83c170a2d629a49eca3c37a3dafd/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8538fd010ebd83c170a2d629a49eca3c37a3dafd/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=8538fd010ebd83c170a2d629a49eca3c37a3dafd", "patch": "@@ -362,6 +362,7 @@ java/awt/Frame.java \\\n java/awt/Graphics.java \\\n java/awt/Graphics2D.java \\\n java/awt/GraphicsConfiguration.java \\\n+java/awt/GridLayout.java \\\n java/awt/IllegalComponentStateException.java \\\n java/awt/Image.java \\\n java/awt/Insets.java \\\n@@ -712,6 +713,7 @@ java/util/EventListener.java \\\n java/util/EventObject.java \\\n java/util/GregorianCalendar.java \\\n java/util/HashMap.java \\\n+java/util/HashSet.java \\\n java/util/Hashtable.java \\\n java/util/Iterator.java\t\\\n java/util/LinkedList.java \\\n@@ -739,6 +741,8 @@ java/util/TimeZone.java\t\\\n java/util/Timer.java \\\n java/util/TimerTask.java \\\n java/util/TooManyListenersException.java \\\n+java/util/TreeMap.java \\\n+java/util/TreeSet.java \\\n java/util/Vector.java\n \n \n@@ -1326,6 +1330,7 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/awt/Font.P .deps/java/awt/FontMetrics.P \\\n .deps/java/awt/Frame.P .deps/java/awt/Graphics.P \\\n .deps/java/awt/Graphics2D.P .deps/java/awt/GraphicsConfiguration.P \\\n+.deps/java/awt/GridLayout.P \\\n .deps/java/awt/IllegalComponentStateException.P .deps/java/awt/Image.P \\\n .deps/java/awt/Insets.P .deps/java/awt/ItemSelectable.P \\\n .deps/java/awt/Label.P .deps/java/awt/LayoutManager.P \\\n@@ -1682,11 +1687,11 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/util/EmptyStackException.P .deps/java/util/Enumeration.P \\\n .deps/java/util/EventListener.P .deps/java/util/EventObject.P \\\n .deps/java/util/GregorianCalendar.P .deps/java/util/HashMap.P \\\n-.deps/java/util/Hashtable.P .deps/java/util/Iterator.P \\\n-.deps/java/util/LinkedList.P .deps/java/util/List.P \\\n-.deps/java/util/ListIterator.P .deps/java/util/ListResourceBundle.P \\\n-.deps/java/util/Locale.P .deps/java/util/Map.P \\\n-.deps/java/util/MissingResourceException.P \\\n+.deps/java/util/HashSet.P .deps/java/util/Hashtable.P \\\n+.deps/java/util/Iterator.P .deps/java/util/LinkedList.P \\\n+.deps/java/util/List.P .deps/java/util/ListIterator.P \\\n+.deps/java/util/ListResourceBundle.P .deps/java/util/Locale.P \\\n+.deps/java/util/Map.P .deps/java/util/MissingResourceException.P \\\n .deps/java/util/NoSuchElementException.P .deps/java/util/Observable.P \\\n .deps/java/util/Observer.P .deps/java/util/Properties.P \\\n .deps/java/util/PropertyPermission.P \\\n@@ -1696,7 +1701,8 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/util/SortedSet.P .deps/java/util/Stack.P \\\n .deps/java/util/StringTokenizer.P .deps/java/util/TimeZone.P \\\n .deps/java/util/Timer.P .deps/java/util/TimerTask.P \\\n-.deps/java/util/TooManyListenersException.P .deps/java/util/Vector.P \\\n+.deps/java/util/TooManyListenersException.P .deps/java/util/TreeMap.P \\\n+.deps/java/util/TreeSet.P .deps/java/util/Vector.P \\\n .deps/java/util/jar/Attributes.P .deps/java/util/jar/JarEntry.P \\\n .deps/java/util/jar/JarException.P .deps/java/util/jar/JarFile.P \\\n .deps/java/util/jar/JarInputStream.P \\"}, {"sha": "f71e4d23751c884c690534d772ac9184d88fa5db", "filename": "libjava/java/awt/GridLayout.java", "status": "added", "additions": 268, "deletions": 0, "changes": 268, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8538fd010ebd83c170a2d629a49eca3c37a3dafd/libjava%2Fjava%2Fawt%2FGridLayout.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8538fd010ebd83c170a2d629a49eca3c37a3dafd/libjava%2Fjava%2Fawt%2FGridLayout.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FGridLayout.java?ref=8538fd010ebd83c170a2d629a49eca3c37a3dafd", "patch": "@@ -0,0 +1,268 @@\n+// GridLayout.java - Grid-based layout engine\n+\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt;\n+\n+import java.io.Serializable;\n+\n+/** This class implements a grid-based layout scheme.  Components are\n+ * all given the same size and are laid out from left to right and top\n+ * to bottom.  A GridLayout is configured with a number of rows and a\n+ * number of columns.  If either is zero then that dimension is\n+ * computed based on the actual size of the container.  An exception\n+ * is thrown if an attempt is made to set both the number of rows and\n+ * the number of columns to 0.  This class also support horizontal and\n+ * vertical gaps; these are used as spacing between cells.\n+ */\n+public class GridLayout implements LayoutManager, Serializable\n+{\n+  /** Add a new component to the layout.  This particular implementation\n+   * does nothing.\n+   */\n+  public void addLayoutComponent (String name, Component comp)\n+  {\n+    // Nothing.\n+  }\n+\n+  /** Return the number of columns in this layout.  */\n+  public int getColumns ()\n+  {\n+    return cols;\n+  }\n+\n+  /** Return the horizontal gap.  */\n+  public int getHgap ()\n+  {\n+    return hgap;\n+  }\n+\n+  /** Return the number of rows in this layout.  */\n+  public int getRows ()\n+  {\n+    return rows;\n+  }\n+\n+  /** Return the vertical gap.  */\n+  public int getVgap ()\n+  {\n+    return vgap;\n+  }\n+\n+  /** Create a new GridLayout with one row and any number of columns.\n+   * Both gaps are set to 0.\n+   */\n+  public GridLayout ()\n+  {\n+    this (1, 0, 0, 0);\n+  }\n+\n+  /** Create a new GridLayout with the specified number of rows and\n+   * columns.  Both gaps are set to 0.\n+   * @param rows Number of rows\n+   * @param cols Number of columns\n+   * @exception IllegalArgumentException If rows and columns are both\n+   *        0, or if either are negative\n+   */\n+  public GridLayout (int rows, int cols)\n+  {\n+    this (rows, cols, 0, 0);\n+  }\n+\n+  /** Create a new GridLayout with the specified number of rows and\n+   * columns and the specified gaps.\n+   * @param rows Number of rows\n+   * @param cols Number of columns\n+   * @param hgap The horizontal gap\n+   * @param vgap The vertical gap\n+   * @exception IllegalArgumentException If rows and columns are both\n+   *        0, if either are negative, or if either gap is negative\n+   */\n+  public GridLayout (int rows, int cols, int hgap, int vgap)\n+  {\n+    if (rows < 0)\n+      throw new IllegalArgumentException (\"number of rows cannot be negative\");\n+    if (cols < 0)\n+      throw new IllegalArgumentException (\"number of columns cannot be negative\");\n+    if (rows == 0 && cols == 0)\n+      throw new IllegalArgumentException (\"both rows and columns cannot be 0\");\n+    if (hgap < 0)\n+      throw new IllegalArgumentException (\"horizontal gap must be nonnegative\");\n+    if (vgap < 0)\n+      throw new IllegalArgumentException (\"vertical gap must be nonnegative\");\n+    this.rows = rows;\n+    this.cols = cols;\n+    this.hgap = hgap;\n+    this.vgap = vgap;\n+  }\n+\n+  /** Lay out the container's components based on current settings.\n+   * @param parent The parent container\n+   */\n+  public void layoutContainer (Container parent)\n+  {\n+    int num = parent.getComponentCount ();\n+    // This is more efficient than calling getComponents().\n+    Component[] comps = parent.component;\n+\n+    int real_rows = rows;\n+    int real_cols = cols;\n+    if (real_rows == 0)\n+      real_rows = (num + real_cols - 1) / real_cols;\n+    else\n+      real_cols = (num + real_rows - 1) / real_rows;\n+\n+    Dimension d = parent.getSize ();\n+    Insets ins = parent.getInsets ();\n+\n+    int tw = d.width - ins.left - ins.right;\n+    int th = d.height - ins.top - ins.bottom;\n+\n+    int w = (tw - (real_rows - 1) * hgap) / real_rows;\n+    int h = (th - (real_cols - 1) * vgap) / real_cols;\n+\n+    int x = ins.left;\n+    int y = ins.top;\n+    int i = 0;\n+    int recount = 0;\n+\n+    while (i < num)\n+      {\n+\tcomps[i].setBounds (x, y, tw, th);\n+\n+\t++i;\n+\t++recount;\n+\tif (recount == real_cols)\n+\t  {\n+\t    recount = 0;\n+\t    y += vgap + th;\n+\t    x = ins.left;\n+\t  }\n+\telse\n+\t  x += hgap + tw;\n+      }\n+  }\n+\n+  /** Get the minimum layout size of the container.\n+   * @param cont The parent container\n+   */\n+  public Dimension minimumLayoutSize (Container cont)\n+  {\n+    return getSize (cont, true);\n+  }\n+\n+  /** Get the preferred layout size of the container.\n+   * @param cont The parent container\n+   */\n+  public Dimension preferredLayoutSize (Container cont)\n+  {\n+    return getSize (cont, false);\n+  }\n+\n+  /** Remove the indicated component from this layout manager.\n+   * This particular implementation does nothing.\n+   * @param comp The component to remove\n+   */\n+  public void removeLayoutComponent (Component comp)\n+  {\n+    // Nothing.\n+  }\n+\n+  /** Set the number of columns.\n+   * @param newCols\n+   * @exception IllegalArgumentException If the number of columns is\n+   *     negative, or if the number of columns is zero and the number\n+   *     of rows is already 0.\n+   */\n+  public void setColumns (int newCols)\n+  {\n+    if (cols < 0)\n+      throw new IllegalArgumentException (\"number of columns cannot be negative\");\n+    if (newCols == 0 && rows == 0)\n+      throw new IllegalArgumentException (\"number of rows is already 0\");\n+    this.cols = newCols;\n+  }\n+\n+  /** Set the horizontal gap\n+   * @param hgap The horizontal gap\n+   */\n+  public void setHgap (int hgap)\n+  {\n+    if (hgap < 0)\n+      throw new IllegalArgumentException (\"horizontal gap must be nonnegative\");\n+    this.hgap = hgap;\n+  }\n+\n+  /** Set the number of rows\n+   * @param newRows\n+   * @exception IllegalArgumentException If the number of rows is\n+   *     negative, or if the number of rows is zero and the number\n+   *     of columns is already 0.\n+   */\n+  public void setRows (int newRows)\n+  {\n+    if (rows < 0)\n+      throw new IllegalArgumentException (\"number of rows cannot be negative\");\n+    if (newRows == 0 && cols == 0)\n+      throw new IllegalArgumentException (\"number of columns is already 0\");\n+    this.rows = newRows;\n+  }\n+\n+  /** Set the vertical gap.\n+   * @param vgap The vertical gap\n+   */\n+  public void setVgap (int vgap)\n+  {\n+    if (vgap < 0)\n+      throw new IllegalArgumentException (\"vertical gap must be nonnegative\");\n+    this.vgap = vgap;\n+  }\n+\n+  // This method is used to compute the various sizes.\n+  private Dimension getSize (Container parent, boolean is_min)\n+  {\n+    int w = 0, h = 0, num = parent.getComponentCount ();\n+    // This is more efficient than calling getComponents().\n+    Component[] comps = parent.component;\n+\n+    for (int i = 0; i < num; ++i)\n+      {\n+\t// FIXME: can we just directly read the fields in Component?\n+\t// Or will that not work with subclassing?\n+\tDimension d;\n+\n+\tif (is_min)\n+\t  d = comps[i].getMinimumSize ();\n+\telse\n+\t  d = comps[i].getPreferredSize ();\n+\n+\tw = Math.max (d.width, w);\n+\th = Math.max (d.height, h);\n+      }\n+\n+    int real_rows = rows;\n+    int real_cols = cols;\n+    if (real_rows == 0)\n+      real_rows = (num + real_cols - 1) / real_cols;\n+    else\n+      real_cols = (num + real_rows - 1) / real_rows;\n+\n+    // We subtract out an extra gap here because the gaps are only\n+    // between cells.\n+    return new Dimension (real_rows * (w + hgap) - hgap,\n+\t\t\t  real_cols * (h + vgap) - vgap);\n+  }\n+\n+  // The gaps.\n+  private int hgap;\n+  private int vgap;\n+  // Number of rows and columns.\n+  private int rows;\n+  private int cols;\n+}"}]}