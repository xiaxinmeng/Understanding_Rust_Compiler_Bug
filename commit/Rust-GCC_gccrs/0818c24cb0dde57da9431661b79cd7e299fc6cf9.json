{"sha": "0818c24cb0dde57da9431661b79cd7e299fc6cf9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDgxOGMyNGNiMGRkZTU3ZGE5NDMxNjYxYjc5Y2Q3ZTI5OWZjNmNmOQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2011-06-10T16:49:28Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2011-06-10T16:49:28Z"}, "message": "ipa-cp.c (ipcp_versionable_function_p): Thunks are not versionable.\n\n\n\t* ipa-cp.c (ipcp_versionable_function_p): Thunks are not versionable.\n\t(ipcp_initialize_node_lattices): Do not deal with aliases; Do not try to\n\tpropagate through thunks.\n\t(ipcp_change_tops_to_bottom): Do not deal with aliases.\n\nFrom-SVN: r174916", "tree": {"sha": "42472e279e0f2ae2dd675622059ba73fac09f643", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42472e279e0f2ae2dd675622059ba73fac09f643"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0818c24cb0dde57da9431661b79cd7e299fc6cf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0818c24cb0dde57da9431661b79cd7e299fc6cf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0818c24cb0dde57da9431661b79cd7e299fc6cf9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0818c24cb0dde57da9431661b79cd7e299fc6cf9/comments", "author": null, "committer": null, "parents": [{"sha": "c8246dbe68d05cd08cf601113586d4101197af73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8246dbe68d05cd08cf601113586d4101197af73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8246dbe68d05cd08cf601113586d4101197af73"}], "stats": {"total": 95, "additions": 55, "deletions": 40}, "files": [{"sha": "935cb145e6c4a3119ff30c20bae9ecc21473eebc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0818c24cb0dde57da9431661b79cd7e299fc6cf9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0818c24cb0dde57da9431661b79cd7e299fc6cf9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0818c24cb0dde57da9431661b79cd7e299fc6cf9", "patch": "@@ -1,3 +1,10 @@\n+2011-06-10  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-cp.c (ipcp_versionable_function_p): Thunks are not versionable.\n+\t(ipcp_initialize_node_lattices): Do not deal with aliases; Do not try to\n+\tpropagate through thunks.\n+\t(ipcp_change_tops_to_bottom): Do not deal with aliases.\n+\n 2011-06-10  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-prop.c (ipa_write_node_info): Stream jump functions for indirect"}, {"sha": "ec0c83af3c1ca420539be1b10971e2c1cc9ce51e", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 48, "deletions": 40, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0818c24cb0dde57da9431661b79cd7e299fc6cf9/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0818c24cb0dde57da9431661b79cd7e299fc6cf9/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=0818c24cb0dde57da9431661b79cd7e299fc6cf9", "patch": "@@ -354,6 +354,10 @@ ipcp_versionable_function_p (struct cgraph_node *node)\n   if (node->alias)\n     return false;\n \n+  /* We don't know how to clone thunks.  */\n+  if (node->thunk.thunk_p)\n+    return false;\n+\n   /* There are a number of generic reasons functions cannot be versioned.  We\n      also cannot remove parameters if there are type attributes such as fnspec\n      present.  */\n@@ -507,9 +511,11 @@ ipcp_initialize_node_lattices (struct cgraph_node *node)\n   struct ipa_node_params *info = IPA_NODE_REF (node);\n   enum ipa_lattice_type type;\n \n-  if (ipa_is_called_with_var_arguments (info) || node->alias)\n+  if (ipa_is_called_with_var_arguments (info))\n     type = IPA_BOTTOM;\n-  else if (node->local.local)\n+  /* We don't know how to clone thunks even when they are local.  */\n+  else if (node->local.local\n+\t   && !node->thunk.thunk_p)\n     type = IPA_TOP;\n   /* When cloning is allowed, we can assume that externally visible functions\n      are not called.  We will compensate this by cloning later.  */\n@@ -592,40 +598,41 @@ ipcp_change_tops_to_bottom (void)\n \n   prop_again = false;\n   for (node = cgraph_nodes; node; node = node->next)\n-    {\n-      struct ipa_node_params *info = IPA_NODE_REF (node);\n-      count = ipa_get_param_count (info);\n-      for (i = 0; i < count; i++)\n-\t{\n-\t  struct ipcp_lattice *lat = ipa_get_lattice (info, i);\n-\t  if (lat->type == IPA_TOP)\n-\t    {\n-\t      prop_again = true;\n-\t      if (dump_file)\n-\t\t{\n-\t\t  fprintf (dump_file, \"Forcing param \");\n-\t\t  print_generic_expr (dump_file, ipa_get_param (info, i), 0);\n-\t\t  fprintf (dump_file, \" of node %s to bottom.\\n\",\n-\t\t\t   cgraph_node_name (node));\n-\t\t}\n-\t      lat->type = IPA_BOTTOM;\n-\t    }\n-\t  if (!ipa_param_cannot_devirtualize_p (info, i)\n-\t      && ipa_param_types_vec_empty (info, i))\n-\t    {\n-\t      prop_again = true;\n-\t      ipa_set_param_cannot_devirtualize (info, i);\n-\t      if (dump_file)\n-\t\t{\n-\t\t  fprintf (dump_file, \"Marking param \");\n-\t\t  print_generic_expr (dump_file, ipa_get_param (info, i), 0);\n-\t\t  fprintf (dump_file, \" of node %s as unusable for \"\n-\t\t\t   \"devirtualization.\\n\",\n-\t\t\t   cgraph_node_name (node));\n-\t\t}\n-\t    }\n-\t}\n-    }\n+    if (!node->alias)\n+      {\n+\tstruct ipa_node_params *info = IPA_NODE_REF (node);\n+\tcount = ipa_get_param_count (info);\n+\tfor (i = 0; i < count; i++)\n+\t  {\n+\t    struct ipcp_lattice *lat = ipa_get_lattice (info, i);\n+\t    if (lat->type == IPA_TOP)\n+\t      {\n+\t\tprop_again = true;\n+\t\tif (dump_file)\n+\t\t  {\n+\t\t    fprintf (dump_file, \"Forcing param \");\n+\t\t    print_generic_expr (dump_file, ipa_get_param (info, i), 0);\n+\t\t    fprintf (dump_file, \" of node %s to bottom.\\n\",\n+\t\t\t     cgraph_node_name (node));\n+\t\t  }\n+\t\tlat->type = IPA_BOTTOM;\n+\t      }\n+\t    if (!ipa_param_cannot_devirtualize_p (info, i)\n+\t\t&& ipa_param_types_vec_empty (info, i))\n+\t      {\n+\t\tprop_again = true;\n+\t\tipa_set_param_cannot_devirtualize (info, i);\n+\t\tif (dump_file)\n+\t\t  {\n+\t\t    fprintf (dump_file, \"Marking param \");\n+\t\t    print_generic_expr (dump_file, ipa_get_param (info, i), 0);\n+\t\t    fprintf (dump_file, \" of node %s as unusable for \"\n+\t\t\t     \"devirtualization.\\n\",\n+\t\t\t     cgraph_node_name (node));\n+\t\t  }\n+\t      }\n+\t  }\n+      }\n   return prop_again;\n }\n \n@@ -813,10 +820,11 @@ ipcp_iterate_stage (void)\n     ipa_update_after_lto_read ();\n \n   for (node = cgraph_nodes; node; node = node->next)\n-    {\n-      ipcp_initialize_node_lattices (node);\n-      ipcp_compute_node_scale (node);\n-    }\n+    if (!node->alias)\n+      {\n+\tipcp_initialize_node_lattices (node);\n+\tipcp_compute_node_scale (node);\n+      }\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       ipcp_print_all_lattices (dump_file);"}]}