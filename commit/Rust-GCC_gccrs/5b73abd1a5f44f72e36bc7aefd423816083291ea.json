{"sha": "5b73abd1a5f44f72e36bc7aefd423816083291ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI3M2FiZDFhNWY0NGY3MmUzNmJjN2FlZmQ0MjM4MTYwODMyOTFlYQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-09-02T10:54:12Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-09-02T16:48:45Z"}, "message": "libstdc++: Define std::invoke_r for C++23 (P2136R3)\n\nWe already supported this feature as std::__invoke<R>, for internal use.\nThis just adds a public version of it to <functional>.\n\nInternal uses should continue to include <bits/invoke.h> and use\nstd::__invoke<R> so that they don't need to include all of <functional>.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/functional (invoke_r): Define.\n\t* include/std/version (__cpp_lib_invoke_r): Define.\n\t* testsuite/20_util/function_objects/invoke/version.cc: Check\n\tfor __cpp_lib_invoke_r as well as __cpp_lib_invoke.\n\t* testsuite/20_util/function_objects/invoke/4.cc: New test.", "tree": {"sha": "955d31d7fe3d0dca21d8df8e0365b0a08cf6aefb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/955d31d7fe3d0dca21d8df8e0365b0a08cf6aefb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b73abd1a5f44f72e36bc7aefd423816083291ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b73abd1a5f44f72e36bc7aefd423816083291ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b73abd1a5f44f72e36bc7aefd423816083291ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b73abd1a5f44f72e36bc7aefd423816083291ea/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9695e1c23be5b5c55d572ced152897313ddb96ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9695e1c23be5b5c55d572ced152897313ddb96ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9695e1c23be5b5c55d572ced152897313ddb96ae"}], "stats": {"total": 85, "additions": 85, "deletions": 0}, "files": [{"sha": "0b257926fd550cd869dc7729239a2cbf09157612", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b73abd1a5f44f72e36bc7aefd423816083291ea/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b73abd1a5f44f72e36bc7aefd423816083291ea/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=5b73abd1a5f44f72e36bc7aefd423816083291ea", "patch": "@@ -96,6 +96,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return std::__invoke(std::forward<_Callable>(__fn),\n \t\t\t   std::forward<_Args>(__args)...);\n     }\n+\n+#if __cplusplus > 202002L\n+# define __cpp_lib_invoke_r 202106L\n+\n+  /// Invoke a callable object and convert the result to _Res.\n+  template<typename _Res, typename _Callable, typename... _Args>\n+    requires is_invocable_r_v<_Res, _Callable, _Args...>\n+    constexpr _Res\n+    invoke_r(_Callable&& __fn, _Args&&... __args)\n+    noexcept(is_nothrow_invocable_r_v<_Res, _Callable, _Args...>)\n+    {\n+      return std::__invoke_r<_Res>(std::forward<_Callable>(__fn),\n+\t\t\t\t   std::forward<_Args>(__args)...);\n+    }\n+#endif // C++23\n #endif // C++17\n \n   template<typename _MemFunPtr,"}, {"sha": "f950bf0f0dbf59f14e02f8177c2a61b22bba414f", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b73abd1a5f44f72e36bc7aefd423816083291ea/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b73abd1a5f44f72e36bc7aefd423816083291ea/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=5b73abd1a5f44f72e36bc7aefd423816083291ea", "patch": "@@ -278,6 +278,7 @@\n \n #if __cplusplus > 202002L\n // c++2b\n+#define __cpp_lib_invoke_r 202106L\n #define __cpp_lib_is_scoped_enum 202011L\n #define __cpp_lib_string_contains 202011L\n #define __cpp_lib_to_underlying 202102L"}, {"sha": "3ee6711f687d6838a46fe5a8665731e6116409f5", "filename": "libstdc++-v3/testsuite/20_util/function_objects/invoke/4.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b73abd1a5f44f72e36bc7aefd423816083291ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Finvoke%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b73abd1a5f44f72e36bc7aefd423816083291ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Finvoke%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Finvoke%2F4.cc?ref=5b73abd1a5f44f72e36bc7aefd423816083291ea", "patch": "@@ -0,0 +1,59 @@\n+// { dg-options \"-std=gnu++2b\" }\n+// { dg-do compile { target c++23 } }\n+\n+#include <functional>\n+\n+#ifndef __cpp_lib_invoke_r\n+# error Feature-test macro for invoke_r is missing in <functional>\n+#elif __cpp_lib_invoke_r < 202106L\n+# error Feature-test macro for invoke_r has the wrong value in <functional>\n+#endif\n+\n+constexpr int sq(int i) { return i * i; }\n+\n+template<typename Val, typename Expected>\n+constexpr bool chk(Val&& val, Expected&& exp)\n+{\n+  return std::is_same_v<Val, Expected> && val == exp;\n+}\n+\n+void\n+test01()\n+{\n+  static_assert( chk( std::invoke(sq, 2), 4 ) );\n+  static_assert( chk( std::invoke_r<int>(sq, 3), 9 ) );\n+  static_assert( chk( std::invoke_r<char>(sq, 4), '\\x10' ) );\n+}\n+\n+struct abstract {\n+  virtual ~abstract() = 0;\n+  void operator()() noexcept;\n+};\n+\n+static_assert( noexcept(std::invoke(std::declval<abstract>())),\n+    \"It should be possible to use abstract types with INVOKE\" );\n+\n+static_assert( noexcept(std::invoke_r<void>(std::declval<abstract>())),\n+    \"It should be possible to use abstract types with INVOKE<R>\" );\n+\n+struct F {\n+  void operator()() &;\n+  void operator()() && noexcept;\n+  int operator()(int);\n+  double* operator()(int, int) noexcept;\n+};\n+struct D { D(void*); };\n+\n+static_assert( !noexcept(std::invoke(std::declval<F&>())) );\n+static_assert( noexcept(std::invoke(std::declval<F>())) );\n+static_assert( !noexcept(std::invoke(std::declval<F>(), 1)) );\n+static_assert( noexcept(std::invoke(std::declval<F>(), 1, 2)) );\n+\n+static_assert( !noexcept(std::invoke_r<void>(std::declval<F&>())) );\n+static_assert( noexcept(std::invoke_r<void>(std::declval<F>())) );\n+static_assert( !noexcept(std::invoke_r<int>(std::declval<F>(), 1)) );\n+static_assert( !noexcept(std::invoke_r<void>(std::declval<F>(), 1)) );\n+static_assert( !noexcept(std::invoke_r<long>(std::declval<F>(), 1)) );\n+static_assert( noexcept(std::invoke_r<void>(std::declval<F>(), 1, 2)) );\n+static_assert( noexcept(std::invoke_r<void*>(std::declval<F>(), 1, 2)) );\n+static_assert( !noexcept(std::invoke_r<D>(std::declval<F>(), 1, 2)) );"}, {"sha": "2dc71aea504f128855a2b70e9d2eb24ac89856cb", "filename": "libstdc++-v3/testsuite/20_util/function_objects/invoke/version.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b73abd1a5f44f72e36bc7aefd423816083291ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Finvoke%2Fversion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b73abd1a5f44f72e36bc7aefd423816083291ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Finvoke%2Fversion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Finvoke%2Fversion.cc?ref=5b73abd1a5f44f72e36bc7aefd423816083291ea", "patch": "@@ -7,3 +7,13 @@\n #elif __cpp_lib_invoke < 201411L\n # error Feature-test macro for invoke has the wrong value in <version>\n #endif\n+\n+#if __cplusplus > 202002L\n+#ifndef __cpp_lib_invoke_r\n+# error Feature-test macro for invoke_r is missing in <version>\n+#elif __cpp_lib_invoke_r < 202106L\n+# error Feature-test macro for invoke_r has the wrong value in <version>\n+#endif\n+#elif defined __cpp_lib_invoke_r\n+# error __cpp_lib_invoke_r is defined in <version> before C++23\n+#endif"}]}