{"sha": "8ee1b0a013d0bbfc70a8165a52cf64d3157c1e96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVlMWIwYTAxM2QwYmJmYzcwYTgxNjVhNTJjZjY0ZDMxNTdjMWU5Ng==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-04-20T14:23:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-04-20T14:23:10Z"}, "message": "re PR debug/80453 (another compare-debug failure)\n\n2017-04-20  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/80453\n\t* tree-ssa-sccvn.h (struct vn_phi_s): Add cclhs and ccrhs members.\n\t* tree-ssa-sccvn.c (cond_stmts_equal_p): Use recorded lhs and rhs\n\tfrom the conditions.\n\t(vn_phi_eq): Pass them down.\n\t(vn_phi_lookup): Record them.\n\t(vn_phi_insert): Likewise.\n\nFrom-SVN: r247024", "tree": {"sha": "164e789be3a472c505c90529a9468c6b45ff4d48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/164e789be3a472c505c90529a9468c6b45ff4d48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ee1b0a013d0bbfc70a8165a52cf64d3157c1e96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ee1b0a013d0bbfc70a8165a52cf64d3157c1e96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ee1b0a013d0bbfc70a8165a52cf64d3157c1e96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ee1b0a013d0bbfc70a8165a52cf64d3157c1e96/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "798d7f42dc0c713abcf6b58ed9f1ff4e36391442", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/798d7f42dc0c713abcf6b58ed9f1ff4e36391442", "html_url": "https://github.com/Rust-GCC/gccrs/commit/798d7f42dc0c713abcf6b58ed9f1ff4e36391442"}], "stats": {"total": 49, "additions": 39, "deletions": 10}, "files": [{"sha": "97fb5f36a8b9bcbc993b6a07d17d0f3954d597b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ee1b0a013d0bbfc70a8165a52cf64d3157c1e96/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ee1b0a013d0bbfc70a8165a52cf64d3157c1e96/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ee1b0a013d0bbfc70a8165a52cf64d3157c1e96", "patch": "@@ -1,3 +1,13 @@\n+2017-04-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/80453\n+\t* tree-ssa-sccvn.h (struct vn_phi_s): Add cclhs and ccrhs members.\n+\t* tree-ssa-sccvn.c (cond_stmts_equal_p): Use recorded lhs and rhs\n+\tfrom the conditions.\n+\t(vn_phi_eq): Pass them down.\n+\t(vn_phi_lookup): Record them.\n+\t(vn_phi_insert): Likewise.\n+\n 2017-04-20  Matthew Fortune  <matthew.fortune@imgtec.com>\n \n \t* config/mips/mips.c (mips_expand_vec_perm_const): Re-fix"}, {"sha": "36386cf3e605e3a997fc09e12cf7e2093844a26f", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ee1b0a013d0bbfc70a8165a52cf64d3157c1e96/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ee1b0a013d0bbfc70a8165a52cf64d3157c1e96/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=8ee1b0a013d0bbfc70a8165a52cf64d3157c1e96", "patch": "@@ -2916,14 +2916,11 @@ vn_phi_compute_hash (vn_phi_t vp1)\n    the other.  */\n \n static bool\n-cond_stmts_equal_p (gcond *cond1, gcond *cond2, bool *inverted_p)\n+cond_stmts_equal_p (gcond *cond1, tree lhs1, tree rhs1,\n+\t\t    gcond *cond2, tree lhs2, tree rhs2, bool *inverted_p)\n {\n   enum tree_code code1 = gimple_cond_code (cond1);\n   enum tree_code code2 = gimple_cond_code (cond2);\n-  tree lhs1 = gimple_cond_lhs (cond1);\n-  tree lhs2 = gimple_cond_lhs (cond2);\n-  tree rhs1 = gimple_cond_rhs (cond1);\n-  tree rhs2 = gimple_cond_rhs (cond2);\n \n   *inverted_p = false;\n   if (code1 == code2)\n@@ -2941,10 +2938,6 @@ cond_stmts_equal_p (gcond *cond1, gcond *cond2, bool *inverted_p)\n   else\n     return false;\n \n-  lhs1 = vn_valueize (lhs1);\n-  rhs1 = vn_valueize (rhs1);\n-  lhs2 = vn_valueize (lhs2);\n-  rhs2 = vn_valueize (rhs2);\n   return ((expressions_equal_p (lhs1, lhs2)\n \t   && expressions_equal_p (rhs1, rhs2))\n \t  || (commutative_tree_code (code1)\n@@ -3002,7 +2995,10 @@ vn_phi_eq (const_vn_phi_t const vp1, const_vn_phi_t const vp2)\n \t      return false;\n \t    bool inverted_p;\n \t    if (! cond_stmts_equal_p (as_a <gcond *> (last1),\n-\t\t\t\t      as_a <gcond *> (last2), &inverted_p))\n+\t\t\t\t      vp1->cclhs, vp1->ccrhs,\n+\t\t\t\t      as_a <gcond *> (last2),\n+\t\t\t\t      vp2->cclhs, vp2->ccrhs,\n+\t\t\t\t      &inverted_p))\n \t      return false;\n \n \t    /* Get at true/false controlled edges into the PHI.  */\n@@ -3081,6 +3077,16 @@ vn_phi_lookup (gimple *phi)\n   vp1.type = TREE_TYPE (gimple_phi_result (phi));\n   vp1.phiargs = shared_lookup_phiargs;\n   vp1.block = gimple_bb (phi);\n+  /* Extract values of the controlling condition.  */\n+  vp1.cclhs = NULL_TREE;\n+  vp1.ccrhs = NULL_TREE;\n+  basic_block idom1 = get_immediate_dominator (CDI_DOMINATORS, vp1.block);\n+  if (EDGE_COUNT (idom1->succs) == 2)\n+    if (gcond *last1 = dyn_cast <gcond *> (last_stmt (idom1)))\n+      {\n+\tvp1.cclhs = vn_valueize (gimple_cond_lhs (last1));\n+\tvp1.ccrhs = vn_valueize (gimple_cond_rhs (last1));\n+      }\n   vp1.hashcode = vn_phi_compute_hash (&vp1);\n   slot = current_info->phis->find_slot_with_hash (&vp1, vp1.hashcode,\n \t\t\t\t\t\t  NO_INSERT);\n@@ -3117,6 +3123,16 @@ vn_phi_insert (gimple *phi, tree result)\n   vp1->type = TREE_TYPE (gimple_phi_result (phi));\n   vp1->phiargs = args;\n   vp1->block = gimple_bb (phi);\n+  /* Extract values of the controlling condition.  */\n+  vp1->cclhs = NULL_TREE;\n+  vp1->ccrhs = NULL_TREE;\n+  basic_block idom1 = get_immediate_dominator (CDI_DOMINATORS, vp1->block);\n+  if (EDGE_COUNT (idom1->succs) == 2)\n+    if (gcond *last1 = dyn_cast <gcond *> (last_stmt (idom1)))\n+      {\n+\tvp1->cclhs = vn_valueize (gimple_cond_lhs (last1));\n+\tvp1->ccrhs = vn_valueize (gimple_cond_rhs (last1));\n+      }\n   vp1->result = result;\n   vp1->hashcode = vn_phi_compute_hash (vp1);\n "}, {"sha": "ec00c37cca2b7b80b80d7204f42a8023cf2f2f1c", "filename": "gcc/tree-ssa-sccvn.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ee1b0a013d0bbfc70a8165a52cf64d3157c1e96/gcc%2Ftree-ssa-sccvn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ee1b0a013d0bbfc70a8165a52cf64d3157c1e96/gcc%2Ftree-ssa-sccvn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.h?ref=8ee1b0a013d0bbfc70a8165a52cf64d3157c1e96", "patch": "@@ -67,6 +67,9 @@ typedef struct vn_phi_s\n   hashval_t hashcode;\n   vec<tree> phiargs;\n   basic_block block;\n+  /* Controlling condition lhs/rhs.  */\n+  tree cclhs;\n+  tree ccrhs;\n   tree type;\n   tree result;\n } *vn_phi_t;"}]}