{"sha": "2aa4498c5097f5c0397383bd5b34435cdbe47d29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFhNDQ5OGM1MDk3ZjVjMDM5NzM4M2JkNWIzNDQzNWNkYmU0N2QyOQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2004-05-09T14:32:49Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2004-05-09T14:32:49Z"}, "message": "* config/rs6000/rs6000-protos.h\n\t(rs6000_conditional_register_usage): Protoize.\n\n\t* config/rs6000/rs6000.c (rs6000_conditional_register_usage): New.\n\n\t* config/rs6000/rs6000.h (CONDITIONAL_REGISTER_USAGE): Call\n\tfunction.\n\nFrom-SVN: r81650", "tree": {"sha": "74678da42370a0592c8f93400f661f28060e87ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74678da42370a0592c8f93400f661f28060e87ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2aa4498c5097f5c0397383bd5b34435cdbe47d29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aa4498c5097f5c0397383bd5b34435cdbe47d29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aa4498c5097f5c0397383bd5b34435cdbe47d29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aa4498c5097f5c0397383bd5b34435cdbe47d29/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8dc2384cc96eeab306f1267118a194a50eb37953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dc2384cc96eeab306f1267118a194a50eb37953", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dc2384cc96eeab306f1267118a194a50eb37953"}], "stats": {"total": 131, "additions": 79, "deletions": 52}, "files": [{"sha": "72a0b130e026bab954175d8aae50d86738186dcf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aa4498c5097f5c0397383bd5b34435cdbe47d29/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aa4498c5097f5c0397383bd5b34435cdbe47d29/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2aa4498c5097f5c0397383bd5b34435cdbe47d29", "patch": "@@ -1,3 +1,13 @@\n+2004-05-09  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* config/rs6000/rs6000-protos.h\n+\t(rs6000_conditional_register_usage): Protoize.\n+\n+\t* config/rs6000/rs6000.c (rs6000_conditional_register_usage): New.\n+\n+\t* config/rs6000/rs6000.h (CONDITIONAL_REGISTER_USAGE): Call\n+\tfunction.\n+\n 2004-05-08  Roger Sayle  <roger@eyesopen.com>\n \n \t* fold-const.c (fold_div_compare): New function to optimize X/C1 op C2"}, {"sha": "7078c16e084a832ed3f5779063f242c922bcc908", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aa4498c5097f5c0397383bd5b34435cdbe47d29/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aa4498c5097f5c0397383bd5b34435cdbe47d29/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=2aa4498c5097f5c0397383bd5b34435cdbe47d29", "patch": "@@ -202,6 +202,7 @@ extern bool rs6000_tls_referenced_p (rtx);\n extern int rs6000_tls_symbol_ref (rtx, enum machine_mode);\n extern void rs6000_output_dwarf_dtprel (FILE*, int, rtx);\n extern int rs6000_hard_regno_nregs (int, enum machine_mode);\n+extern void rs6000_conditional_register_usage (void);\n \n /* Declare functions in rs6000-c.c */\n "}, {"sha": "db8fdcce567ecf75426d25ed1629a25956a1c61b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aa4498c5097f5c0397383bd5b34435cdbe47d29/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aa4498c5097f5c0397383bd5b34435cdbe47d29/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=2aa4498c5097f5c0397383bd5b34435cdbe47d29", "patch": "@@ -3430,6 +3430,71 @@ rs6000_hard_regno_nregs (int regno, enum machine_mode mode)\n \n   return (GET_MODE_SIZE (mode) + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n }\n+\n+/* Change register usage conditional on target flags.  */\n+void\n+rs6000_conditional_register_usage (void)\n+{\n+  int i;\n+\n+  /* Set MQ register fixed (already call_used) if not POWER\n+     architecture (RIOS1, RIOS2, RSC, and PPC601) so that it will not\n+     be allocated.  */\n+  if (! TARGET_POWER)\n+    fixed_regs[64] = 1;\n+\n+  /* 64-bit AIX reserves GPR13 for thread-private data.  */\n+  if (TARGET_64BIT)\n+    fixed_regs[13] = call_used_regs[13]\n+      = call_really_used_regs[13] = 1;\n+\n+  /* Conditionally disable FPRs.  */\n+  if (TARGET_SOFT_FLOAT || !TARGET_FPRS)\n+    for (i = 32; i < 64; i++)\n+      fixed_regs[i] = call_used_regs[i]\n+        = call_really_used_regs[i] = 1;\n+\n+  if (DEFAULT_ABI == ABI_V4\n+      && PIC_OFFSET_TABLE_REGNUM != INVALID_REGNUM\n+      && flag_pic == 2)\n+    fixed_regs[RS6000_PIC_OFFSET_TABLE_REGNUM] = 1;\n+\n+  if (DEFAULT_ABI == ABI_V4\n+      && PIC_OFFSET_TABLE_REGNUM != INVALID_REGNUM\n+      && flag_pic == 1)\n+    fixed_regs[RS6000_PIC_OFFSET_TABLE_REGNUM]\n+      = call_used_regs[RS6000_PIC_OFFSET_TABLE_REGNUM]\n+      = call_really_used_regs[RS6000_PIC_OFFSET_TABLE_REGNUM] = 1;\n+\n+  if (DEFAULT_ABI == ABI_DARWIN\n+      && PIC_OFFSET_TABLE_REGNUM != INVALID_REGNUM)\n+    global_regs[RS6000_PIC_OFFSET_TABLE_REGNUM]\n+      = fixed_regs[RS6000_PIC_OFFSET_TABLE_REGNUM]\n+      = call_used_regs[RS6000_PIC_OFFSET_TABLE_REGNUM]\n+      = call_really_used_regs[RS6000_PIC_OFFSET_TABLE_REGNUM] = 1;\n+\n+  if (TARGET_ALTIVEC)\n+    global_regs[VSCR_REGNO] = 1;\n+\n+  if (TARGET_SPE)\n+    {\n+      global_regs[SPEFSCR_REGNO] = 1;\n+      fixed_regs[FIXED_SCRATCH]\n+        = call_used_regs[FIXED_SCRATCH]\n+\t= call_really_used_regs[FIXED_SCRATCH] = 1;\n+    }\n+\n+  if (! TARGET_ALTIVEC)\n+    {\n+      for (i = FIRST_ALTIVEC_REGNO; i <= LAST_ALTIVEC_REGNO; ++i)\n+\tfixed_regs[i] = call_used_regs[i] = call_really_used_regs[i] = 1;\n+      call_really_used_regs[VRSAVE_REGNO] = 1;\n+    }\n+\n+  if (TARGET_ALTIVEC_ABI)\n+    for (i = FIRST_ALTIVEC_REGNO; i < FIRST_ALTIVEC_REGNO + 20; ++i)\n+      call_used_regs[i] = call_really_used_regs[i] = 1;\n+}\n \f\n /* Try to output insns to set TARGET equal to the constant C if it can\n    be done in less than N insns.  Do all computations in MODE."}, {"sha": "d08aca9b888c84171cac303ebb5162188c3f3f36", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 3, "deletions": 52, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aa4498c5097f5c0397383bd5b34435cdbe47d29/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aa4498c5097f5c0397383bd5b34435cdbe47d29/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=2aa4498c5097f5c0397383bd5b34435cdbe47d29", "patch": "@@ -1097,59 +1097,10 @@ extern const char *rs6000_warn_altivec_long_switch;\n \n #define FIXED_SCRATCH (TARGET_SPE ? 14 : 11)\n \n-/* Define this macro to change register usage conditional on target flags.\n-   Set MQ register fixed (already call_used) if not POWER architecture\n-   (RIOS1, RIOS2, RSC, and PPC601) so that it will not be allocated.\n-   64-bit AIX reserves GPR13 for thread-private data.\n-   Conditionally disable FPRs.  */\n+/* Define this macro to change register usage conditional on target\n+   flags.  */\n \n-#define CONDITIONAL_REGISTER_USAGE\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  int i;\t\t\t\t\t\t\t\t\\\n-  if (! TARGET_POWER)\t\t\t\t\t\t\t\\\n-    fixed_regs[64] = 1;\t\t\t\t\t\t\t\\\n-  if (TARGET_64BIT)\t\t\t\t\t\t\t\\\n-    fixed_regs[13] = call_used_regs[13]\t\t\t\t\t\\\n-      = call_really_used_regs[13] = 1; \t\t\t\t\t\\\n-  if (TARGET_SOFT_FLOAT || !TARGET_FPRS)\t\t\t\t\\\n-    for (i = 32; i < 64; i++)\t\t\t\t\t\t\\\n-      fixed_regs[i] = call_used_regs[i]\t\t\t\t\t\\\n-        = call_really_used_regs[i] = 1;\t\t\t\t\t\\\n-  if (DEFAULT_ABI == ABI_V4\t\t\t\t\t\t\\\n-      && PIC_OFFSET_TABLE_REGNUM != INVALID_REGNUM\t\t\t\\\n-      && flag_pic == 2)\t\t\t\t\t\t\t\\\n-    fixed_regs[RS6000_PIC_OFFSET_TABLE_REGNUM] = 1;\t\t\t\\\n-  if (DEFAULT_ABI == ABI_V4\t\t\t\t\t\t\\\n-      && PIC_OFFSET_TABLE_REGNUM != INVALID_REGNUM\t\t\t\\\n-      && flag_pic == 1)\t\t\t\t\t\t\t\\\n-    fixed_regs[RS6000_PIC_OFFSET_TABLE_REGNUM]\t\t\t\t\\\n-      = call_used_regs[RS6000_PIC_OFFSET_TABLE_REGNUM]\t\t\t\\\n-      = call_really_used_regs[RS6000_PIC_OFFSET_TABLE_REGNUM] = 1;\t\\\n-  if (DEFAULT_ABI == ABI_DARWIN\t\t\t\t\t\t\\\n-      && PIC_OFFSET_TABLE_REGNUM != INVALID_REGNUM)\t\t\t\\\n-    global_regs[RS6000_PIC_OFFSET_TABLE_REGNUM]\t\t\t\t\\\n-      = fixed_regs[RS6000_PIC_OFFSET_TABLE_REGNUM]\t\t\t\\\n-      = call_used_regs[RS6000_PIC_OFFSET_TABLE_REGNUM]\t\t\t\\\n-      = call_really_used_regs[RS6000_PIC_OFFSET_TABLE_REGNUM] = 1;\t\\\n-  if (TARGET_ALTIVEC)                                                   \\\n-    global_regs[VSCR_REGNO] = 1;                                        \\\n-  if (TARGET_SPE)\t\t\t\t\t\t\t\\\n-    {                                                                   \\\n-      global_regs[SPEFSCR_REGNO] = 1;\t\t\t\t\t\\\n-      fixed_regs[FIXED_SCRATCH]\t\t\t\t\t\t\\\n-        = call_used_regs[FIXED_SCRATCH]\t\t\t\t\t\\\n-\t= call_really_used_regs[FIXED_SCRATCH] = 1; \t\t\t\\\n-    }                                                                   \\\n-  if (! TARGET_ALTIVEC)\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      for (i = FIRST_ALTIVEC_REGNO; i <= LAST_ALTIVEC_REGNO; ++i)\t\\\n-\tfixed_regs[i] = call_used_regs[i] = call_really_used_regs[i] = 1; \\\n-      call_really_used_regs[VRSAVE_REGNO] = 1;\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  if (TARGET_ALTIVEC_ABI)\t\t\t\t\t\t\\\n-    for (i = FIRST_ALTIVEC_REGNO; i < FIRST_ALTIVEC_REGNO + 20; ++i)\t\\\n-      call_used_regs[i] = call_really_used_regs[i] = 1;\t\t\t\\\n-}\n+#define CONDITIONAL_REGISTER_USAGE rs6000_conditional_register_usage ()\n \n /* Specify the registers used for certain standard purposes.\n    The values of these macros are register numbers.  */"}]}