{"sha": "f384e2f551fef6dd73b815675633814fb8ff1e13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM4NGUyZjU1MWZlZjZkZDczYjgxNTY3NTYzMzgxNGZiOGZmMWUxMw==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-07-26T11:08:24Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-07-26T14:49:14Z"}, "message": "Implement operator_bitwise_xor::op1_op2_relation_effect.\n\nThis patch adjusts XORing of ranges where the operands are known to be\nequal or not equal.\n\nWe should probably do the same thing for the op[12]_range methods.\n\ngcc/ChangeLog:\n\n\t* range-op.cc (operator_bitwise_xor::op1_op2_relation_effect):\n\tNew.", "tree": {"sha": "37a6a60044f7f496a988d1c4eb58f2cf0de709df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37a6a60044f7f496a988d1c4eb58f2cf0de709df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f384e2f551fef6dd73b815675633814fb8ff1e13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f384e2f551fef6dd73b815675633814fb8ff1e13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f384e2f551fef6dd73b815675633814fb8ff1e13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f384e2f551fef6dd73b815675633814fb8ff1e13/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cb72ac17181fd38384cd2149993e643fb8df89f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cb72ac17181fd38384cd2149993e643fb8df89f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cb72ac17181fd38384cd2149993e643fb8df89f"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "b1fb25c77f8291dbf3857273eee6b469ac9d67af", "filename": "gcc/range-op.cc", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f384e2f551fef6dd73b815675633814fb8ff1e13/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f384e2f551fef6dd73b815675633814fb8ff1e13/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=f384e2f551fef6dd73b815675633814fb8ff1e13", "patch": "@@ -3101,6 +3101,11 @@ class operator_bitwise_xor : public range_operator\n \t\t\t  const irange &lhs,\n \t\t\t  const irange &op1,\n \t\t\t  relation_kind rel = VREL_NONE) const;\n+  virtual bool op1_op2_relation_effect (irange &lhs_range,\n+\t\t\t\t\ttree type,\n+\t\t\t\t\tconst irange &op1_range,\n+\t\t\t\t\tconst irange &op2_range,\n+\t\t\t\t\trelation_kind rel) const;\n } op_bitwise_xor;\n \n void\n@@ -3134,6 +3139,34 @@ operator_bitwise_xor::wi_fold (irange &r, tree type,\n     r.set_varying (type);\n }\n \n+bool\n+operator_bitwise_xor::op1_op2_relation_effect (irange &lhs_range,\n+\t\t\t\t\t       tree type,\n+\t\t\t\t\t       const irange &,\n+\t\t\t\t\t       const irange &,\n+\t\t\t\t\t       relation_kind rel) const\n+{\n+  if (rel == VREL_NONE)\n+    return false;\n+\n+  int_range<2> rel_range;\n+\n+  switch (rel)\n+    {\n+    case EQ_EXPR:\n+      rel_range.set_zero (type);\n+      break;\n+    case NE_EXPR:\n+      rel_range.set_nonzero (type);\n+      break;\n+    default:\n+      return false;\n+    }\n+\n+  lhs_range.intersect (rel_range);\n+  return true;\n+}\n+\n bool\n operator_bitwise_xor::op1_range (irange &r, tree type,\n \t\t\t\t const irange &lhs,"}]}