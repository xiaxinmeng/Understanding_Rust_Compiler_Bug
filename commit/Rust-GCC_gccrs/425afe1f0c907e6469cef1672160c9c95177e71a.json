{"sha": "425afe1f0c907e6469cef1672160c9c95177e71a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI1YWZlMWYwYzkwN2U2NDY5Y2VmMTY3MjE2MGM5Yzk1MTc3ZTcxYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-12T09:11:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-12T09:11:24Z"}, "message": "c++: Fix up calls to immediate functions returning reference [PR99507]\n\nbuild_cxx_call calls convert_from_reference at the end, so if an immediate\nfunction returns a reference, we were constant evaluating not just that\ncall, but that call wrapped in an INDIRECT_REF.  That unfortunately means\nit can constant evaluate to something non-addressable, so if code later\nneeds to take its address it will fail.\n\nThe following patch fixes that by undoing the convert_from_reference\nwrapping for the cxx_constant_value evaluation and readdding it ad the end.\n\n2021-03-12  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/99507\n\t* call.c (build_over_call): For immediate evaluation of functions\n\tthat return references, undo convert_from_reference effects before\n\tcalling cxx_constant_value and call convert_from_reference\n\tafterwards.\n\n\t* g++.dg/cpp2a/consteval19.C: New test.", "tree": {"sha": "a35dd0c983e635b77a6b1b09ddfac3ecb1eac044", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a35dd0c983e635b77a6b1b09ddfac3ecb1eac044"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/425afe1f0c907e6469cef1672160c9c95177e71a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/425afe1f0c907e6469cef1672160c9c95177e71a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/425afe1f0c907e6469cef1672160c9c95177e71a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/425afe1f0c907e6469cef1672160c9c95177e71a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0df3eb2622d80aed22b2c3814d51e1f455d5e5a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0df3eb2622d80aed22b2c3814d51e1f455d5e5a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0df3eb2622d80aed22b2c3814d51e1f455d5e5a1"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "33278b570385fe0adaba36afcbbe321cba660533", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/425afe1f0c907e6469cef1672160c9c95177e71a/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/425afe1f0c907e6469cef1672160c9c95177e71a/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=425afe1f0c907e6469cef1672160c9c95177e71a", "patch": "@@ -9504,6 +9504,9 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n       if (immediate_invocation_p (fndecl, nargs))\n \t{\n \t  tree obj_arg = NULL_TREE;\n+\t  /* Undo convert_from_reference called by build_cxx_call.  */\n+\t  if (REFERENCE_REF_P (call))\n+\t    call = TREE_OPERAND (call, 0);\n \t  if (DECL_CONSTRUCTOR_P (fndecl))\n \t    obj_arg = cand->first_arg ? cand->first_arg : (*args)[0];\n \t  if (obj_arg && is_dummy_object (obj_arg))\n@@ -9527,6 +9530,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \t  call = cxx_constant_value (call, obj_arg);\n \t  if (obj_arg && !error_operand_p (call))\n \t    call = build2 (INIT_EXPR, void_type_node, obj_arg, call);\n+\t  call = convert_from_reference (call);\n \t}\n     }\n   return call;"}, {"sha": "d742f59070f4e0e81022f60a04ff0e54e6235b64", "filename": "gcc/testsuite/g++.dg/cpp2a/consteval19.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/425afe1f0c907e6469cef1672160c9c95177e71a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/425afe1f0c907e6469cef1672160c9c95177e71a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval19.C?ref=425afe1f0c907e6469cef1672160c9c95177e71a", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/99507\n+// { dg-do compile { target c++20 } }\n+\n+constexpr int i{0};\n+consteval const int &iref () { return i; }\n+const int *a{&iref ()};"}]}