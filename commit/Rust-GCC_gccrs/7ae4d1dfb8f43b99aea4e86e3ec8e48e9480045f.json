{"sha": "7ae4d1dfb8f43b99aea4e86e3ec8e48e9480045f", "node_id": "C_kwDOANBUbNoAKDdhZTRkMWRmYjhmNDNiOTlhZWE0ZTg2ZTNlYzhlNDhlOTQ4MDA0NWY", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-01-09T23:10:59Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-01-26T19:10:16Z"}, "message": "RISC-V: Remove dirty_pat since it is redundant\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv-vsetvl.cc (vector_insn_info::operator==): Remove dirty_pat.\n\t(vector_insn_info::merge): Ditto.\n\t(vector_insn_info::dump): Ditto.\n\t(pass_vsetvl::merge_successors): Ditto.\n\t(pass_vsetvl::backward_demand_fusion): Ditto.\n\t(pass_vsetvl::forward_demand_fusion): Ditto.\n\t(pass_vsetvl::commit_vsetvls): Ditto.\n\t* config/riscv/riscv-vsetvl.h: Ditto.", "tree": {"sha": "223ceb3ee4b856b5a14218011f42edf4c2925aa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/223ceb3ee4b856b5a14218011f42edf4c2925aa1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ae4d1dfb8f43b99aea4e86e3ec8e48e9480045f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ae4d1dfb8f43b99aea4e86e3ec8e48e9480045f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ae4d1dfb8f43b99aea4e86e3ec8e48e9480045f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ae4d1dfb8f43b99aea4e86e3ec8e48e9480045f/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27a2a4b6ed36784cc44e33451eed602f93ef3488", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27a2a4b6ed36784cc44e33451eed602f93ef3488", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27a2a4b6ed36784cc44e33451eed602f93ef3488"}], "stats": {"total": 39, "additions": 13, "deletions": 26}, "files": [{"sha": "2f9de9d20262db6f0e0874d77f8e29d8a47379c0", "filename": "gcc/config/riscv/riscv-vsetvl.cc", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ae4d1dfb8f43b99aea4e86e3ec8e48e9480045f/gcc%2Fconfig%2Friscv%2Friscv-vsetvl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ae4d1dfb8f43b99aea4e86e3ec8e48e9480045f/gcc%2Fconfig%2Friscv%2Friscv-vsetvl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vsetvl.cc?ref=7ae4d1dfb8f43b99aea4e86e3ec8e48e9480045f", "patch": "@@ -1084,10 +1084,10 @@ vector_insn_info::operator== (const vector_insn_info &other) const\n     if (m_demands[i] != other.demand_p ((enum demand_type) i))\n       return false;\n \n-  if (m_insn != other.get_insn ())\n-    return false;\n-  if (m_dirty_pat != other.get_dirty_pat ())\n-    return false;\n+  if (vector_config_insn_p (m_insn->rtl ())\n+      || vector_config_insn_p (other.get_insn ()->rtl ()))\n+    if (m_insn != other.get_insn ())\n+      return false;\n \n   if (!same_avl_p (other))\n     return false;\n@@ -1318,8 +1318,6 @@ vector_insn_info::merge (const vector_insn_info &merge_info,\n \tnew_info.set_insn (merge_info.get_insn ());\n     }\n \n-  new_info.set_dirty_pat (merge_info.get_dirty_pat ());\n-\n   if (!demand_p (DEMAND_AVL) && !merge_info.demand_p (DEMAND_AVL))\n     new_info.undemand (DEMAND_AVL);\n   if (!demand_p (DEMAND_SEW) && !merge_info.demand_p (DEMAND_SEW))\n@@ -1432,11 +1430,6 @@ vector_insn_info::dump (FILE *file) const\n \t  fprintf (file, \"The real INSN=\");\n \t  print_rtl_single (file, get_insn ()->rtl ());\n \t}\n-      if (get_dirty_pat ())\n-\t{\n-\t  fprintf (file, \"Dirty RTL Pattern=\");\n-\t  print_rtl_single (file, get_dirty_pat ());\n-\t}\n     }\n }\n \n@@ -1968,7 +1961,6 @@ pass_vsetvl::merge_successors (const basic_block father,\n \n       new_info.set_dirty ();\n       rtx new_pat = gen_vsetvl_pat (new_info.get_insn ()->rtl (), new_info);\n-      new_info.set_dirty_pat (new_pat);\n \n       father_info.local_dem = new_info;\n       father_info.reaching_out = new_info;\n@@ -2049,7 +2041,6 @@ pass_vsetvl::backward_demand_fusion (void)\n \n \t\t  block_info.reaching_out = prop;\n \t\t  block_info.reaching_out.set_dirty ();\n-\t\t  block_info.reaching_out.set_dirty_pat (new_pat);\n \t\t  block_info.local_dem = block_info.reaching_out;\n \t\t  changed_p = true;\n \t\t}\n@@ -2078,7 +2069,6 @@ pass_vsetvl::backward_demand_fusion (void)\n \t      rtx new_pat\n \t\t= gen_vsetvl_pat (new_info.get_insn ()->rtl (), new_info);\n \t      new_info.set_dirty ();\n-\t      new_info.set_dirty_pat (new_pat);\n \t      block_info.local_dem = new_info;\n \t      block_info.reaching_out = new_info;\n \t      changed_p = true;\n@@ -2176,7 +2166,6 @@ pass_vsetvl::forward_demand_fusion (void)\n \t\t    = gen_vsetvl_pat (prop.get_insn ()->rtl (), prop);\n \t\t  local_dem = prop;\n \t\t  local_dem.set_dirty ();\n-\t\t  local_dem.set_dirty_pat (dirty_pat);\n \t\t  reaching_out = local_dem;\n \t\t}\n \t      else\n@@ -2503,10 +2492,17 @@ pass_vsetvl::commit_vsetvls (void)\n       if (!reaching_out.dirty_p ())\n \tcontinue;\n \n-      rtx new_pat = reaching_out.get_dirty_pat ();\n+\n+      rtx new_pat;\n       if (can_refine_vsetvl_p (cfg_bb, reaching_out.get_ratio ()))\n \tnew_pat\n \t  = gen_vsetvl_pat (VSETVL_VTYPE_CHANGE_ONLY, reaching_out, NULL_RTX);\n+      else if (vlmax_avl_p (reaching_out.get_avl ()))\n+\tnew_pat = gen_vsetvl_pat (VSETVL_NORMAL, reaching_out,\n+\t\t\t\t  get_vl (reaching_out.get_insn ()->rtl ()));\n+      else\n+\tnew_pat\n+\t  = gen_vsetvl_pat (VSETVL_DISCARD_RESULT, reaching_out, NULL_RTX);\n \n       start_sequence ();\n       emit_insn (new_pat);"}, {"sha": "7b56802faec4c3f6d2a2ae748271f64bfaf2298e", "filename": "gcc/config/riscv/riscv-vsetvl.h", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ae4d1dfb8f43b99aea4e86e3ec8e48e9480045f/gcc%2Fconfig%2Friscv%2Friscv-vsetvl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ae4d1dfb8f43b99aea4e86e3ec8e48e9480045f/gcc%2Fconfig%2Friscv%2Friscv-vsetvl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vsetvl.h?ref=7ae4d1dfb8f43b99aea4e86e3ec8e48e9480045f", "patch": "@@ -220,13 +220,6 @@ class vector_insn_info : public vl_vtype_info\n      (with AVL included) before vmv.x.s, but vmv.x.s is not the INSN holding the\n      definition of AVL.  */\n   rtl_ssa::insn_info *m_insn;\n-  /* Save instruction pattern for Dirty block.\n-     Since empty block may be polluted as a dirty block during dem backward\n-     propagation (phase 3) which is intending to cheat LCM there is a VSETVL\n-     instruction here to gain better LCM optimization. Such instruction is not\n-     emit yet, we save this here and then emit it in the 4th phase if it is\n-     necessary.  */\n-  rtx m_dirty_pat;\n \n   /* Parse the instruction to get VL/VTYPE information and demanding\n    * information.  */\n@@ -243,7 +236,7 @@ class vector_insn_info : public vl_vtype_info\n public:\n   vector_insn_info ()\n     : vl_vtype_info (), m_state (UNINITIALIZED), m_demands{false},\n-      m_insn (nullptr), m_dirty_pat (NULL_RTX)\n+      m_insn (nullptr)\n   {}\n \n   bool operator> (const vector_insn_info &) const;\n@@ -271,7 +264,6 @@ class vector_insn_info : public vl_vtype_info\n   void set_unknown () { m_state = UNKNOWN; }\n   void set_empty () { m_state = EMPTY; }\n   void set_dirty () { m_state = DIRTY; }\n-  void set_dirty_pat (rtx pat) { m_dirty_pat = pat; }\n   void set_insn (rtl_ssa::insn_info *insn) { m_insn = insn; }\n   void set_demand_info (const vector_insn_info &);\n \n@@ -287,7 +279,6 @@ class vector_insn_info : public vl_vtype_info\n   vector_insn_info merge (const vector_insn_info &, bool) const;\n \n   rtl_ssa::insn_info *get_insn () const { return m_insn; }\n-  rtx get_dirty_pat () const { return m_dirty_pat; }\n \n   void dump (FILE *) const;\n };"}]}