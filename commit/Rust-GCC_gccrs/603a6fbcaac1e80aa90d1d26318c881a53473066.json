{"sha": "603a6fbcaac1e80aa90d1d26318c881a53473066", "node_id": "C_kwDOANBUbNoAKDYwM2E2ZmJjYWFjMWU4MGFhOTBkMWQyNjMxOGM4ODFhNTM0NzMwNjY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-31T08:46:35Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-31T08:46:35Z"}, "message": "bbpart: Fix up ICE on asm goto [PR108596]\n\nOn the following testcase we have asm goto in hot block with 2 successors,\none cold to which it both falls through and has one of the label\npointing to it and another hot successor with another label.\n\nNow, during bbpart we want to ensure that no blocks from one partition fall\nthrough into a block in a different partition.  fix_up_fall_thru_edges\ndoes that by temporarily clearing the EDGE_CROSSING on the fallthrough edge,\ncalling force_nonfallthru and then depending on whether it created a new\nbb either set EDGE_CROSSING on the single successor edge from the new bb\n(the new bb is kept in the same partition as the predecessor block), or\nif no new bb has been created setting EDGE_CROSSING back on the fallthru\nedge which has been forced non-EDGE_FALLTHRU.\nFor asm goto this doesn't always work, force_nonfallthru can create a new bb\nand change the fallthrough edge to point to that, but if the original\nfallthru destination block has its label referenced among the asm goto\nlabels, it will create a new non-fallthru edge for the label(s).\nBut because we've temporarily cheated and cleared EDGE_CROSSING on the edge,\nit is cleared on the new edge as well, then the caller sees we've created\na new bb and just sets EDGE_CROSSING on the single fallthru edge from the\nnew bb.  But the direct edge from cur_bb to fallthru edge's destination\nisn't handled and fails afterwards consistency checks, because it crosses\npartitions.\n\nThe following patch notes the case and sets EDGE_CROSSING on that edge too.\n\n2023-01-31  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR rtl-optimization/108596\n\t* bb-reorder.cc (fix_up_fall_thru_edges): Handle the case where cur_bb\n\tends with asm goto and has a crossing fallthrough edge to the same bb\n\tthat contains at least one of its labels by restoring EDGE_CROSSING\n\tflag even on possible edge from cur_bb to new_bb successor.\n\n\t* gcc.c-torture/compile/pr108596.c: New test.", "tree": {"sha": "0b3598d3d821bb844fb21fa73a6eb77aa19f5bbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b3598d3d821bb844fb21fa73a6eb77aa19f5bbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/603a6fbcaac1e80aa90d1d26318c881a53473066", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/603a6fbcaac1e80aa90d1d26318c881a53473066", "html_url": "https://github.com/Rust-GCC/gccrs/commit/603a6fbcaac1e80aa90d1d26318c881a53473066", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/603a6fbcaac1e80aa90d1d26318c881a53473066/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41602390456901c14ecdfa2fa64c3cebd5b6ff09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41602390456901c14ecdfa2fa64c3cebd5b6ff09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41602390456901c14ecdfa2fa64c3cebd5b6ff09"}], "stats": {"total": 47, "additions": 46, "deletions": 1}, "files": [{"sha": "615d5426a340c3a6ab736db0e33eeba570088022", "filename": "gcc/bb-reorder.cc", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603a6fbcaac1e80aa90d1d26318c881a53473066/gcc%2Fbb-reorder.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603a6fbcaac1e80aa90d1d26318c881a53473066/gcc%2Fbb-reorder.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.cc?ref=603a6fbcaac1e80aa90d1d26318c881a53473066", "patch": "@@ -1998,6 +1998,7 @@ fix_up_fall_thru_edges (void)\n \t\t     becomes EDGE_CROSSING.  */\n \n \t\t  fall_thru->flags &= ~EDGE_CROSSING;\n+\t\t  unsigned old_count = EDGE_COUNT (cur_bb->succs);\n \t\t  basic_block new_bb = force_nonfallthru (fall_thru);\n \n \t\t  if (new_bb)\n@@ -2009,7 +2010,25 @@ fix_up_fall_thru_edges (void)\n \t\t      gcc_assert (BB_PARTITION (new_bb)\n                                   == BB_PARTITION (cur_bb));\n \n-\t\t      single_succ_edge (new_bb)->flags |= EDGE_CROSSING;\n+\t\t      edge e = single_succ_edge (new_bb);\n+\t\t      e->flags |= EDGE_CROSSING;\n+\t\t      if (EDGE_COUNT (cur_bb->succs) > old_count)\n+\t\t\t{\n+\t\t\t  /* If asm goto has a crossing fallthrough edge\n+\t\t\t     and at least one of the labels to the same bb,\n+\t\t\t     force_nonfallthru can result in the fallthrough\n+\t\t\t     edge being redirected and a new edge added for the\n+\t\t\t     label or more labels to e->dest.  As we've\n+\t\t\t     temporarily cleared EDGE_CROSSING flag on the\n+\t\t\t     fallthrough edge, we need to restore it again.\n+\t\t\t     See PR108596.  */\n+\t\t\t  rtx_insn *j = BB_END (cur_bb);\n+\t\t\t  gcc_checking_assert (JUMP_P (j)\n+\t\t\t\t\t       && asm_noperands (PATTERN (j)));\n+\t\t\t  edge e2 = find_edge (cur_bb, e->dest);\n+\t\t\t  if (e2)\n+\t\t\t    e2->flags |= EDGE_CROSSING;\n+\t\t\t}\n \t\t    }\n \t\t  else\n \t\t    {"}, {"sha": "4de6c49d7cedc8ef2274caa4db11a99de51f8768", "filename": "gcc/testsuite/gcc.c-torture/compile/pr108596.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603a6fbcaac1e80aa90d1d26318c881a53473066/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr108596.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603a6fbcaac1e80aa90d1d26318c881a53473066/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr108596.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr108596.c?ref=603a6fbcaac1e80aa90d1d26318c881a53473066", "patch": "@@ -0,0 +1,26 @@\n+/* PR rtl-optimization/108596 */\n+\n+__attribute__((__cold__)) void foo (void);\n+void bar (void);\n+\n+void\n+baz (void)\n+{\n+  asm goto (\"\" : : : : l1, l0);\n+  goto l0;\n+l1:\n+  bar ();\n+l0:\n+  foo ();\n+}\n+\n+void\n+qux (void)\n+{\n+  asm goto (\"\" : : : : l1, l0);\n+  __builtin_unreachable ();\n+l1:\n+  bar ();\n+l0:\n+  foo ();\n+}"}]}