{"sha": "a7e693d5d2ae7ddd3a14e4420ab88f677efbcebe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdlNjkzZDVkMmFlN2RkZDNhMTRlNDQyMGFiODhmNjc3ZWZiY2ViZQ==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2002-12-11T02:13:51Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-12-11T02:13:51Z"}, "message": "URLClassLoader.java (getCanonicalFileURL): New method.\n\n2002-12-10  Mark Wielaard  <mark@klomp.org>\n            Tom Tromey  <tromey@redhat.com>\n\n\t* java/net/URLClassLoader.java (getCanonicalFileURL): New method.\n\t(JarURLLoader): Use it.\n\t(FileURLLoader): Likewise.\n\t(JarURLResource.getURL): Use chained exception.\n\t(FileResource.getURL): Likewise.\n\t(FileURLLoader.getResource): Use canonical file name.\n\t(addURL): Indentation fix.\n\nCo-Authored-By: Tom Tromey <tromey@redhat.com>\n\nFrom-SVN: r60019", "tree": {"sha": "c915ec3c7ac0b3f382787ede943782a636c36d89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c915ec3c7ac0b3f382787ede943782a636c36d89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7e693d5d2ae7ddd3a14e4420ab88f677efbcebe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7e693d5d2ae7ddd3a14e4420ab88f677efbcebe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7e693d5d2ae7ddd3a14e4420ab88f677efbcebe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7e693d5d2ae7ddd3a14e4420ab88f677efbcebe/comments", "author": null, "committer": null, "parents": [{"sha": "d23faea18e87ebd2fb4c24f996c62872d9d4b750", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d23faea18e87ebd2fb4c24f996c62872d9d4b750", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d23faea18e87ebd2fb4c24f996c62872d9d4b750"}], "stats": {"total": 76, "additions": 55, "deletions": 21}, "files": [{"sha": "20242558b8898a85860a7e828fbbbc99a7ee2cb8", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7e693d5d2ae7ddd3a14e4420ab88f677efbcebe/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7e693d5d2ae7ddd3a14e4420ab88f677efbcebe/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a7e693d5d2ae7ddd3a14e4420ab88f677efbcebe", "patch": "@@ -1,3 +1,14 @@\n+2002-12-10  Mark Wielaard  <mark@klomp.org>\n+            Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/net/URLClassLoader.java (getCanonicalFileURL): New method.\n+\t(JarURLLoader): Use it.\n+\t(FileURLLoader): Likewise.\n+\t(JarURLResource.getURL): Use chained exception.\n+\t(FileResource.getURL): Likewise.\n+\t(FileURLLoader.getResource): Use canonical file name.\n+\t(addURL): Indentation fix.\n+\n 2002-12-10  Tom Tromey  <tromey@redhat.com>\n \n \t* include/win32.h: Fixed typo in \"DISABLE_JAVA_NET\"."}, {"sha": "c6dc4b1d44dca512e3e767828158294b8c185edc", "filename": "libjava/java/net/URLClassLoader.java", "status": "modified", "additions": 44, "deletions": 21, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7e693d5d2ae7ddd3a14e4420ab88f677efbcebe/libjava%2Fjava%2Fnet%2FURLClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7e693d5d2ae7ddd3a14e4420ab88f677efbcebe/libjava%2Fjava%2Fnet%2FURLClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLClassLoader.java?ref=a7e693d5d2ae7ddd3a14e4420ab88f677efbcebe", "patch": "@@ -212,7 +212,7 @@ Manifest getManifest()\n       return null;\n     }\n   }\n-    \n+\n   /** \n    * A <code>Resource</code> represents a resource in some\n    * <code>URLLoader</code>. It also contains all information (e.g.,\n@@ -271,6 +271,22 @@ Certificate[] getCertificates()\n     abstract InputStream getInputStream() throws IOException;\n   }\n \n+  static URL getCanonicalFileURL(URL url)\n+  {\n+    if (\"file\".equals(url.getProtocol()))\n+      {\n+\ttry\n+\t  {\n+\t    File f = new File(url.getFile()).getCanonicalFile();\n+\t    url = new URL(\"file\", \"\", f.toString());\n+\t  }\n+\tcatch (IOException ignore)\n+\t  {\n+\t  }\n+      }\n+    return url;\n+  }\n+\n   /**\n    * A <code>JarURLLoader</code> is a type of <code>URLLoader</code>\n    * only loading from jar url.\n@@ -282,8 +298,8 @@ final static class JarURLLoader extends URLLoader\n \n     public JarURLLoader(URLClassLoader classloader, URL baseURL)\n     {\n-      super(classloader, baseURL);\n-        \n+      super(classloader, getCanonicalFileURL(baseURL));\n+\n       // cache url prefix for all resources in this jar url\n       String external = baseURL.toExternalForm();\n       StringBuffer sb = new StringBuffer(external.length() + 6);\n@@ -306,7 +322,7 @@ public JarURLLoader(URLClassLoader classloader, URL baseURL)\n       this.baseJarURL = baseJarURL;\n       this.jarfile = jarfile;\n     }\n-    \n+\n     /** get resource with the name \"name\" in the jar url */\n     Resource getResource(String name)\n     {\n@@ -331,7 +347,6 @@ Manifest getManifest()\n \t  return null;\n \t}\n     }\n-      \n   }\n \n   final static class JarURLResource extends Resource\n@@ -358,7 +373,7 @@ Certificate[] getCertificates()\n     {\n       return entry.getCertificates();\n     }\n-                \n+\n     URL getURL()\n     {\n       try\n@@ -368,7 +383,9 @@ URL getURL()\n \t}\n       catch(MalformedURLException e)\n \t{\n-\t  throw new InternalError(e.toString());\n+\t  InternalError ie = new InternalError();\n+\t  ie.initCause(e);\n+\t  throw ie;\n \t}\n     }\n   }\n@@ -468,19 +485,24 @@ final static class FileURLLoader extends URLLoader\n \n     FileURLLoader(URLClassLoader classloader, URL url)\n     {\n-      super(classloader, url);\n-      // Note that this must be a \"file\" protocol URL.\n-      dir = new File(url.getFile());\n+      super(classloader, getCanonicalFileURL(url));\n+      dir = new File(baseURL.getFile());\n     }\n-    \n+\n     /** get resource with the name \"name\" in the file url */\n     Resource getResource(String name)\n     {\n       File file = new File(dir, name);\n+      try\n+\t{\n+\t  file = file.getCanonicalFile();\n+\t}\n+      catch (IOException ignore)\n+\t{\n+\t}\n       if (file.exists() && !file.isDirectory())\n \treturn new FileResource(this, name, file);\n-      else\n-\treturn null;\n+      return null;\n     }\n   }\n \n@@ -503,7 +525,7 @@ public int getLength()\n     {\n       return (int)file.length();\n     }\n-                \n+\n     public URL getURL()\n     {\n       try\n@@ -513,7 +535,9 @@ public URL getURL()\n \t}\n       catch(MalformedURLException e)\n \t{\n-\t  throw new InternalError(e.toString());\n+\t  InternalError ie = new InternalError();\n+\t  ie.initCause(e);\n+\t  throw ie;\n \t}\n     }\n   }\n@@ -667,13 +691,12 @@ protected void addURL(URL newUrl)\n \t  {\n \t    String file = newUrl.getFile();\n \t    // Check that it is not a directory\n-\t    if (!(file.endsWith(\"/\") || file.endsWith(File.separator)))\n+\t    if (! (file.endsWith(\"/\") || file.endsWith(File.separator)))\n \t      loader = new JarURLLoader(this, newUrl);\n-\t    else // it's a url that point to a jar file\n-\t      if (\"file\".equals(newUrl.getProtocol()))\n-\t\tloader = new FileURLLoader(this, newUrl);\n-\t      else\n-\t\tloader = new RemoteURLLoader(this, newUrl);\n+\t    else if (\"file\".equals(newUrl.getProtocol()))\n+\t      loader = new FileURLLoader(this, newUrl);\n+\t    else\n+\t      loader = new RemoteURLLoader(this, newUrl);\n \n \t    // cache it\n \t    urlloaders.put(newUrl, loader);"}]}