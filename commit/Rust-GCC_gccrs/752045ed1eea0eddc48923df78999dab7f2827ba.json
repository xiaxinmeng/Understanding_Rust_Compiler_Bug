{"sha": "752045ed1eea0eddc48923df78999dab7f2827ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzUyMDQ1ZWQxZWVhMGVkZGM0ODkyM2RmNzg5OTlkYWI3ZjI4MjdiYQ==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-07-14T14:19:32Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-07-14T14:19:32Z"}, "message": "AArch64: Add support for sign differing dot-product usdot for NEON and SVE.\n\nHi All,\n\nThis adds optabs implementing usdot_prod.\n\nThe following testcase:\n\n#define N 480\n#define SIGNEDNESS_1 unsigned\n#define SIGNEDNESS_2 signed\n#define SIGNEDNESS_3 signed\n#define SIGNEDNESS_4 unsigned\n\nSIGNEDNESS_1 int __attribute__ ((noipa))\nf (SIGNEDNESS_1 int res, SIGNEDNESS_3 char *restrict a,\n   SIGNEDNESS_4 char *restrict b)\n{\n  for (__INTPTR_TYPE__ i = 0; i < N; ++i)\n    {\n      int av = a[i];\n      int bv = b[i];\n      SIGNEDNESS_2 short mult = av * bv;\n      res += mult;\n    }\n  return res;\n}\n\nGenerates for NEON\n\nf:\n        movi    v0.4s, 0\n        mov     x3, 0\n        .p2align 3,,7\n.L2:\n        ldr     q1, [x2, x3]\n        ldr     q2, [x1, x3]\n        usdot   v0.4s, v1.16b, v2.16b\n        add     x3, x3, 16\n        cmp     x3, 480\n        bne     .L2\n        addv    s0, v0.4s\n        fmov    w1, s0\n        add     w0, w0, w1\n        ret\n\nand for SVE\n\nf:\n        mov     x3, 0\n        cntb    x5\n        mov     w4, 480\n        mov     z1.b, #0\n        whilelo p0.b, wzr, w4\n        mov     z3.b, #0\n        ptrue   p1.b, all\n        .p2align 3,,7\n.L2:\n        ld1b    z2.b, p0/z, [x1, x3]\n        ld1b    z0.b, p0/z, [x2, x3]\n        add     x3, x3, x5\n        sel     z0.b, p0, z0.b, z3.b\n        whilelo p0.b, w3, w4\n        usdot   z1.s, z0.b, z2.b\n        b.any   .L2\n        uaddv   d0, p1, z1.s\n        fmov    x1, d0\n        add     w0, w0, w1\n        ret\n\ninstead of\n\nf:\n        movi    v0.4s, 0\n        mov     x3, 0\n        .p2align 3,,7\n.L2:\n        ldr     q2, [x1, x3]\n        ldr     q1, [x2, x3]\n        add     x3, x3, 16\n        sxtl    v4.8h, v2.8b\n        sxtl2   v3.8h, v2.16b\n        uxtl    v2.8h, v1.8b\n        uxtl2   v1.8h, v1.16b\n        mul     v2.8h, v2.8h, v4.8h\n        mul     v1.8h, v1.8h, v3.8h\n        saddw   v0.4s, v0.4s, v2.4h\n        saddw2  v0.4s, v0.4s, v2.8h\n        saddw   v0.4s, v0.4s, v1.4h\n        saddw2  v0.4s, v0.4s, v1.8h\n        cmp     x3, 480\n        bne     .L2\n        addv    s0, v0.4s\n        fmov    w1, s0\n        add     w0, w0, w1\n        ret\n\nand\n\nf:\n        mov     x3, 0\n        cnth    x5\n        mov     w4, 480\n        mov     z1.b, #0\n        whilelo p0.h, wzr, w4\n        ptrue   p2.b, all\n        .p2align 3,,7\n.L2:\n        ld1sb   z2.h, p0/z, [x1, x3]\n        punpklo p1.h, p0.b\n        ld1b    z0.h, p0/z, [x2, x3]\n        add     x3, x3, x5\n        mul     z0.h, p2/m, z0.h, z2.h\n        sunpklo z2.s, z0.h\n        sunpkhi z0.s, z0.h\n        add     z1.s, p1/m, z1.s, z2.s\n        punpkhi p1.h, p0.b\n        whilelo p0.h, w3, w4\n        add     z1.s, p1/m, z1.s, z0.s\n        b.any   .L2\n        uaddv   d0, p2, z1.s\n        fmov    x1, d0\n        add     w0, w0, w1\n        ret\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-simd.md (aarch64_usdot<vsi2qi>): Rename to...\n\t(usdot_prod<vsi2qi>): ... This.\n\t* config/aarch64/aarch64-simd-builtins.def (usdot): Rename to...\n\t(usdot_prod): ...This.\n\t* config/aarch64/arm_neon.h (vusdot_s32, vusdotq_s32): Likewise.\n\t* config/aarch64/aarch64-sve.md (@aarch64_<sur>dot_prod<vsi2qi>):\n\tRename to...\n\t(@<sur>dot_prod<vsi2qi>): ...This.\n\t* config/aarch64/aarch64-sve-builtins-base.cc\n\t(svusdot_impl::expand): Use it.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/simd/vusdot-autovec.c: New test.\n\t* gcc.target/aarch64/sve/vusdot-autovec.c: New test.", "tree": {"sha": "cb56cdafb94e5164aab1d70372c8ef7b9efd488a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb56cdafb94e5164aab1d70372c8ef7b9efd488a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/752045ed1eea0eddc48923df78999dab7f2827ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/752045ed1eea0eddc48923df78999dab7f2827ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/752045ed1eea0eddc48923df78999dab7f2827ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/752045ed1eea0eddc48923df78999dab7f2827ba/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab0a6b213abf6843b59cdea6399030e828109551", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab0a6b213abf6843b59cdea6399030e828109551", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab0a6b213abf6843b59cdea6399030e828109551"}], "stats": {"total": 91, "additions": 84, "deletions": 7}, "files": [{"sha": "063f503ebd96657f017dfaa067cb231991376bda", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/752045ed1eea0eddc48923df78999dab7f2827ba/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/752045ed1eea0eddc48923df78999dab7f2827ba/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=752045ed1eea0eddc48923df78999dab7f2827ba", "patch": "@@ -374,10 +374,11 @@\n   BUILTIN_VSDQ_I_DI (BINOP, srshl, 0, NONE)\n   BUILTIN_VSDQ_I_DI (BINOP_UUS, urshl, 0, NONE)\n \n-  /* Implemented by aarch64_<sur><dotprod>{_lane}{q}<dot_mode>.  */\n+  /* Implemented by <sur><dotprod>_prod<dot_mode>.  */\n   BUILTIN_VB (TERNOP, sdot, 0, NONE)\n   BUILTIN_VB (TERNOPU, udot, 0, NONE)\n-  BUILTIN_VB (TERNOP_SSUS, usdot, 0, NONE)\n+  BUILTIN_VB (TERNOP_SSUS, usdot_prod, 10, NONE)\n+  /* Implemented by aarch64_<sur><dotprod>_lane{q}<dot_mode>.  */\n   BUILTIN_VB (QUADOP_LANE, sdot_lane, 0, NONE)\n   BUILTIN_VB (QUADOPU_LANE, udot_lane, 0, NONE)\n   BUILTIN_VB (QUADOP_LANE, sdot_laneq, 0, NONE)"}, {"sha": "74890989cb3045798bf8d0241467eaaf72238297", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/752045ed1eea0eddc48923df78999dab7f2827ba/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/752045ed1eea0eddc48923df78999dab7f2827ba/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=752045ed1eea0eddc48923df78999dab7f2827ba", "patch": "@@ -601,7 +601,7 @@\n \n ;; These instructions map to the __builtins for the armv8.6a I8MM usdot\n ;; (vector) Dot Product operation.\n-(define_insn \"aarch64_usdot<vsi2qi>\"\n+(define_insn \"usdot_prod<vsi2qi>\"\n   [(set (match_operand:VS 0 \"register_operand\" \"=w\")\n \t(plus:VS\n \t  (unspec:VS [(match_operand:<VSI2QI> 2 \"register_operand\" \"w\")"}, {"sha": "02e42a71e5e80457317f5c502364db8619c2997f", "filename": "gcc/config/aarch64/aarch64-sve-builtins-base.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/752045ed1eea0eddc48923df78999dab7f2827ba/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/752045ed1eea0eddc48923df78999dab7f2827ba/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc?ref=752045ed1eea0eddc48923df78999dab7f2827ba", "patch": "@@ -2366,7 +2366,7 @@ class svusdot_impl : public function_base\n        Hence we do the same rotation on arguments as svdot_impl does.  */\n     e.rotate_inputs_left (0, 3);\n     machine_mode mode = e.vector_mode (0);\n-    insn_code icode = code_for_aarch64_dot_prod (UNSPEC_USDOT, mode);\n+    insn_code icode = code_for_dot_prod (UNSPEC_USDOT, mode);\n     return e.use_exact_insn (icode);\n   }\n "}, {"sha": "359fe0e457096cf4042a774789a5c241420703d3", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/752045ed1eea0eddc48923df78999dab7f2827ba/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/752045ed1eea0eddc48923df78999dab7f2827ba/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=752045ed1eea0eddc48923df78999dab7f2827ba", "patch": "@@ -6870,7 +6870,7 @@\n   [(set_attr \"movprfx\" \"*,yes\")]\n )\n \n-(define_insn \"@aarch64_<sur>dot_prod<vsi2qi>\"\n+(define_insn \"@<sur>dot_prod<vsi2qi>\"\n   [(set (match_operand:VNx4SI_ONLY 0 \"register_operand\" \"=w, ?&w\")\n         (plus:VNx4SI_ONLY\n \t  (unspec:VNx4SI_ONLY"}, {"sha": "00d76ea937ace5763746478cbdfadf6479e0b15a", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/752045ed1eea0eddc48923df78999dab7f2827ba/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/752045ed1eea0eddc48923df78999dab7f2827ba/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=752045ed1eea0eddc48923df78999dab7f2827ba", "patch": "@@ -34039,14 +34039,14 @@ __extension__ extern __inline int32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vusdot_s32 (int32x2_t __r, uint8x8_t __a, int8x8_t __b)\n {\n-  return __builtin_aarch64_usdotv8qi_ssus (__r, __a, __b);\n+  return __builtin_aarch64_usdot_prodv8qi_ssus (__r, __a, __b);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vusdotq_s32 (int32x4_t __r, uint8x16_t __a, int8x16_t __b)\n {\n-  return __builtin_aarch64_usdotv16qi_ssus (__r, __a, __b);\n+  return __builtin_aarch64_usdot_prodv16qi_ssus (__r, __a, __b);\n }\n \n __extension__ extern __inline int32x2_t"}, {"sha": "b99a945903c043c7410becaf6f09496dd038410d", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vusdot-autovec.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/752045ed1eea0eddc48923df78999dab7f2827ba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvusdot-autovec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/752045ed1eea0eddc48923df78999dab7f2827ba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvusdot-autovec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvusdot-autovec.c?ref=752045ed1eea0eddc48923df78999dab7f2827ba", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=armv8.2-a+i8mm\" } */\n+\n+#define N 480\n+#define SIGNEDNESS_1 unsigned\n+#define SIGNEDNESS_2 signed\n+#define SIGNEDNESS_3 signed\n+#define SIGNEDNESS_4 unsigned\n+\n+SIGNEDNESS_1 int __attribute__ ((noipa))\n+f (SIGNEDNESS_1 int res, SIGNEDNESS_3 char *restrict a,\n+   SIGNEDNESS_4 char *restrict b)\n+{\n+  for (__INTPTR_TYPE__ i = 0; i < N; ++i)\n+    {\n+      int av = a[i];\n+      int bv = b[i];\n+      SIGNEDNESS_2 short mult = av * bv;\n+      res += mult;\n+    }\n+  return res;\n+}\n+\n+SIGNEDNESS_1 int __attribute__ ((noipa))\n+g (SIGNEDNESS_1 int res, SIGNEDNESS_3 char *restrict b,\n+   SIGNEDNESS_4 char *restrict a)\n+{\n+  for (__INTPTR_TYPE__ i = 0; i < N; ++i)\n+    {\n+      int av = a[i];\n+      int bv = b[i];\n+      SIGNEDNESS_2 short mult = av * bv;\n+      res += mult;\n+    }\n+  return res;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tusdot\\t} 2 } } */"}, {"sha": "094dd51cea62e0ba05ec3505657bf05320e5fdbb", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vusdot-autovec.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/752045ed1eea0eddc48923df78999dab7f2827ba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvusdot-autovec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/752045ed1eea0eddc48923df78999dab7f2827ba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvusdot-autovec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvusdot-autovec.c?ref=752045ed1eea0eddc48923df78999dab7f2827ba", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=armv8.2-a+i8mm+sve\" } */\n+\n+#define N 480\n+#define SIGNEDNESS_1 unsigned\n+#define SIGNEDNESS_2 signed\n+#define SIGNEDNESS_3 signed\n+#define SIGNEDNESS_4 unsigned\n+\n+SIGNEDNESS_1 int __attribute__ ((noipa))\n+f (SIGNEDNESS_1 int res, SIGNEDNESS_3 char *restrict a,\n+   SIGNEDNESS_4 char *restrict b)\n+{\n+  for (__INTPTR_TYPE__ i = 0; i < N; ++i)\n+    {\n+      int av = a[i];\n+      int bv = b[i];\n+      SIGNEDNESS_2 short mult = av * bv;\n+      res += mult;\n+    }\n+  return res;\n+}\n+\n+SIGNEDNESS_1 int __attribute__ ((noipa))\n+g (SIGNEDNESS_1 int res, SIGNEDNESS_3 char *restrict b,\n+   SIGNEDNESS_4 char *restrict a)\n+{\n+  for (__INTPTR_TYPE__ i = 0; i < N; ++i)\n+    {\n+      int av = a[i];\n+      int bv = b[i];\n+      SIGNEDNESS_2 short mult = av * bv;\n+      res += mult;\n+    }\n+  return res;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tusdot\\t} 2 } } */"}]}