{"sha": "1e2115dcc04ef844f63f22923b83439bcbf31b1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUyMTE1ZGNjMDRlZjg0NGY2M2YyMjkyM2I4MzQzOWJjYmYzMWIxYw==", "commit": {"author": {"name": "Josef Zlomek", "email": "zlomekj@suse.cz", "date": "2003-02-22T05:52:11Z"}, "committer": {"name": "Josef Zlomek", "email": "zlomek@gcc.gnu.org", "date": "2003-02-22T05:52:11Z"}, "message": "i386.md: Use gen_lowpart instead of gen_rtx_REG for copying a register.\n\n\t* config/i386/i386.md: Use gen_lowpart instead of gen_rtx_REG\n\tfor copying a register.\n\nFrom-SVN: r63280", "tree": {"sha": "6231371e6ded6f1ca895bfd9669278f19003ac94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6231371e6ded6f1ca895bfd9669278f19003ac94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e2115dcc04ef844f63f22923b83439bcbf31b1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e2115dcc04ef844f63f22923b83439bcbf31b1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e2115dcc04ef844f63f22923b83439bcbf31b1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e2115dcc04ef844f63f22923b83439bcbf31b1c/comments", "author": null, "committer": null, "parents": [{"sha": "b65538149bb5d374aa7d5082500f64886a4dfb23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b65538149bb5d374aa7d5082500f64886a4dfb23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b65538149bb5d374aa7d5082500f64886a4dfb23"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "f52abfad2cf724dbc4453a7386e6b8060b9ce615", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2115dcc04ef844f63f22923b83439bcbf31b1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2115dcc04ef844f63f22923b83439bcbf31b1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e2115dcc04ef844f63f22923b83439bcbf31b1c", "patch": "@@ -1,3 +1,8 @@\n+2003-02-22  Josef Zlomek  <zlomekj@suse.cz>\n+\n+\t* config/i386/i386.md: Use gen_lowpart instead of gen_rtx_REG\n+\tfor copying a register.\n+\n 2003-02-22  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n \n \tPR other/3782"}, {"sha": "e6f1412ed188f97cd7eb1ba32efd3e46767b997e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2115dcc04ef844f63f22923b83439bcbf31b1c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2115dcc04ef844f63f22923b83439bcbf31b1c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=1e2115dcc04ef844f63f22923b83439bcbf31b1c", "patch": "@@ -9911,7 +9911,7 @@\n   [(parallel [(set (match_dup 0) (xor:SI (match_dup 0) (match_dup 1)))\n \t      (clobber (reg:CC 17))])]\n   \"operands[1] = gen_int_mode (0x80000000, SImode);\n-   operands[0] = gen_rtx_REG (SImode, REGNO (operands[0]));\")\n+   operands[0] = gen_lowpart (SImode, operands[0]);\")\n \n (define_split\n   [(set (match_operand 0 \"memory_operand\" \"\")\n@@ -10384,7 +10384,7 @@\n   [(parallel [(set (match_dup 0) (and:SI (match_dup 0) (match_dup 1)))\n \t      (clobber (reg:CC 17))])]\n   \"operands[1] = gen_int_mode (~0x80000000, SImode);\n-   operands[0] = gen_rtx_REG (SImode, REGNO (operands[0]));\")\n+   operands[0] = gen_lowpart (SImode, operands[0]);\")\n \n (define_split\n   [(set (match_operand 0 \"memory_operand\" \"\")\n@@ -13913,7 +13913,7 @@\n \t(match_dup 2))]\n {\n   operands[4] = gen_rtx_REG (GET_MODE (operands[0]), 17);\n-  operands[5] = gen_rtx_REG (QImode, REGNO (operands[3]));\n+  operands[5] = gen_lowpart (QImode, operands[3]);\n   ix86_expand_clear (operands[3]);\n })\n \n@@ -13935,7 +13935,7 @@\n \t(match_dup 2))]\n {\n   operands[4] = gen_rtx_REG (GET_MODE (operands[0]), 17);\n-  operands[5] = gen_rtx_REG (QImode, REGNO (operands[3]));\n+  operands[5] = gen_lowpart (QImode, operands[3]);\n   ix86_expand_clear (operands[3]);\n })\n \f\n@@ -17766,7 +17766,7 @@\n   [(parallel [(set (match_dup 2) (const_int 0))\n \t      (clobber (reg:CC 17))])\n    (set (match_dup 0) (match_dup 1))]\n-  \"operands[2] = gen_rtx_REG (SImode, true_regnum (operands[1]));\")\n+  \"operands[2] = gen_lowpart (SImode, operands[1]);\")\n \n (define_peephole2\n   [(match_scratch:QI 1 \"q\")\n@@ -17780,7 +17780,7 @@\n   [(parallel [(set (match_dup 2) (const_int 0))\n \t      (clobber (reg:CC 17))])\n    (set (match_dup 0) (match_dup 1))]\n-  \"operands[2] = gen_rtx_REG (SImode, true_regnum (operands[1]));\")\n+  \"operands[2] = gen_lowpart (SImode, operands[1]);\")\n \n (define_peephole2\n   [(match_scratch:SI 2 \"r\")\n@@ -18035,8 +18035,8 @@\n    && peep2_regno_dead_p (0, FLAGS_REG)\"\n   [(parallel [(set (match_dup 0) (const_int 0))\n \t      (clobber (reg:CC 17))])]\n-  \"operands[0] = gen_rtx_REG (GET_MODE (operands[0]) == DImode ? DImode : SImode,\n-\t\t\t      true_regnum (operands[0]));\")\n+  \"operands[0] = gen_lowpart (GET_MODE (operands[0]) == DImode ? DImode : SImode,\n+\t\t\t      operands[0]);\")\n \n (define_peephole2\n   [(set (strict_low_part (match_operand 0 \"register_operand\" \"\"))\n@@ -18059,8 +18059,8 @@\n    && peep2_regno_dead_p (0, FLAGS_REG)\"\n   [(parallel [(set (match_dup 0) (const_int -1))\n \t      (clobber (reg:CC 17))])]\n-  \"operands[0] = gen_rtx_REG (GET_MODE (operands[0]) == DImode ? DImode : SImode,\n-\t\t\t      true_regnum (operands[0]));\")\n+  \"operands[0] = gen_lowpart (GET_MODE (operands[0]) == DImode ? DImode : SImode,\n+\t\t\t      operands[0]);\")\n \n ;; Attempt to convert simple leas to adds. These can be created by\n ;; move expanders."}]}