{"sha": "3ebb998e6fd4db2150c4c60f0977b2b4ca3d39fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ViYjk5OGU2ZmQ0ZGIyMTUwYzRjNjBmMDk3N2IyYjRjYTNkMzlmYQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2002-11-20T16:19:08Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2002-11-20T16:19:08Z"}, "message": "2002-11-20  Michael Koch <konqueror@gmx.de>\n\n\t* java/io/FileInputStream.java\n\t(getChannel): New method.\n\t* java/io/FileOutputStream.java\n\t(getChannel): New method.\n\t* java/net/ServerSocket.java\n\t(bind): Removed duplicate code and called another bind method instead.\n\t* java/nio/channels/SelectionKey.java\n\t(isValid): Removed wrong exception documentation.\n\t* java/nio/channels/ServerSocketChannel.java\n\t(accept): Added exception documentation.\n\t(open): Fixed typo, added exception documentation.\n\t* java/nio/channels/spi/AbstractSelectableChannel.java\n\t(implCloseChannel): Added exception documentation.\n\t(add): Reformated.\n\t(register): Added exception documentation.\n\nFrom-SVN: r59307", "tree": {"sha": "79f607cf0830a31df050e0c63c02b22944c84a26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79f607cf0830a31df050e0c63c02b22944c84a26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ebb998e6fd4db2150c4c60f0977b2b4ca3d39fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ebb998e6fd4db2150c4c60f0977b2b4ca3d39fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ebb998e6fd4db2150c4c60f0977b2b4ca3d39fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ebb998e6fd4db2150c4c60f0977b2b4ca3d39fa/comments", "author": null, "committer": null, "parents": [{"sha": "e6226a2f87a75d3daf21896affc0857a94d5d4ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6226a2f87a75d3daf21896affc0857a94d5d4ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6226a2f87a75d3daf21896affc0857a94d5d4ac"}], "stats": {"total": 90, "additions": 65, "deletions": 25}, "files": [{"sha": "5d978a50600f14cff79cd99a050865a8574fdd19", "filename": "libjava/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebb998e6fd4db2150c4c60f0977b2b4ca3d39fa/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebb998e6fd4db2150c4c60f0977b2b4ca3d39fa/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=3ebb998e6fd4db2150c4c60f0977b2b4ca3d39fa", "patch": "@@ -1,3 +1,21 @@\n+2002-11-20  Michael Koch <konqueror@gmx.de>\n+\n+\t* java/io/FileInputStream.java\n+\t(getChannel): New method.\n+\t* java/io/FileOutputStream.java\n+\t(getChannel): New method.\n+\t* java/net/ServerSocket.java\n+\t(bind): Removed duplicate code and called another bind method instead.\n+\t* java/nio/channels/SelectionKey.java\n+\t(isValid): Removed wrong exception documentation.\n+\t* java/nio/channels/ServerSocketChannel.java\n+\t(accept): Added exception documentation.\n+\t(open): Fixed typo, added exception documentation.\n+\t* java/nio/channels/spi/AbstractSelectableChannel.java\n+\t(implCloseChannel): Added exception documentation.\n+\t(add): Reformated.\n+\t(register): Added exception documentation.\n+\n 2002-11-20  Andreas Jaeger  <aj@suse.de>\n \n \t* configure: Regenerated with new libtool.m4."}, {"sha": "d7efc26db87dc93d1b89a80d265e5d9340f65f68", "filename": "libjava/java/io/FileInputStream.java", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebb998e6fd4db2150c4c60f0977b2b4ca3d39fa/libjava%2Fjava%2Fio%2FFileInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebb998e6fd4db2150c4c60f0977b2b4ca3d39fa/libjava%2Fjava%2Fio%2FFileInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFileInputStream.java?ref=3ebb998e6fd4db2150c4c60f0977b2b4ca3d39fa", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1998, 1999, 2001  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2001, 2002  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -8,6 +8,8 @@\n  \n package java.io;\n \n+import java.nio.channels.FileChannel;\n+\n /**\n  * @author Warren Levy <warrenl@cygnus.com>\n  * @date October 28, 1998.  \n@@ -23,6 +25,8 @@ public class FileInputStream extends InputStream\n   /* Contains the file descriptor for referencing the actual file. */\n   private FileDescriptor fd;\n \n+  private FileChannel ch;\n+\n   public FileInputStream(String name) throws FileNotFoundException\n   {\n     SecurityManager s = System.getSecurityManager();\n@@ -92,4 +96,9 @@ public long skip(long n) throws IOException\n     long endPos = fd.seek(n, FileDescriptor.CUR, true);\n     return endPos - startPos;\n   }\n+\n+  public FileChannel getChannel ()\n+  {\n+    return ch;\n+  }\n }"}, {"sha": "5ea24e5dfcf082286299162cb883ac17817b5a19", "filename": "libjava/java/io/FileOutputStream.java", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebb998e6fd4db2150c4c60f0977b2b4ca3d39fa/libjava%2Fjava%2Fio%2FFileOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebb998e6fd4db2150c4c60f0977b2b4ca3d39fa/libjava%2Fjava%2Fio%2FFileOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFileOutputStream.java?ref=3ebb998e6fd4db2150c4c60f0977b2b4ca3d39fa", "patch": "@@ -10,6 +10,8 @@\n \n package java.io;\n \n+import java.nio.channels.FileChannel;\n+\n /**\n  * @author Tom Tromey <tromey@cygnus.com>\n  * @date September 24, 1998 \n@@ -93,4 +95,9 @@ public void close () throws IOException\n \n   // Instance variables.\n   private FileDescriptor fd;\n+\n+  public FileChannel getChannel ()\n+  {\n+    return null;\n+  }\n }"}, {"sha": "62917b6a8a5731f3cfc78fdd7144d1ac9326b578", "filename": "libjava/java/net/ServerSocket.java", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebb998e6fd4db2150c4c60f0977b2b4ca3d39fa/libjava%2Fjava%2Fnet%2FServerSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebb998e6fd4db2150c4c60f0977b2b4ca3d39fa/libjava%2Fjava%2Fnet%2FServerSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FServerSocket.java?ref=3ebb998e6fd4db2150c4c60f0977b2b4ca3d39fa", "patch": "@@ -151,6 +151,7 @@ public ServerSocket (int port, int backlog, InetAddress bindAddr)\n     throws IOException\n   {\n     this();\n+\n     if (impl == null)\n       throw new IOException(\"Cannot initialize Socket implementation\");\n \n@@ -181,19 +182,7 @@ public ServerSocket (int port, int backlog, InetAddress bindAddr)\n   public void bind (SocketAddress endpoint)\n     throws IOException\n   {\n-    if (impl == null)\n-      throw new IOException (\"Cannot initialize Socket implementation\");\n-\n-    if (! (endpoint instanceof InetSocketAddress))\n-      throw new IllegalArgumentException (\"Address type not supported\");\n-\n-    InetSocketAddress tmp = (InetSocketAddress) endpoint;\n-    \n-    SecurityManager s = System.getSecurityManager ();\n-    if (s != null)\n-      s.checkListen (tmp.getPort ());\n-\n-    impl.bind (tmp.getAddress (), tmp.getPort ());\n+    bind (endpoint, 50);\n   }\n  \n   /**"}, {"sha": "8d06a301143fae67eec8d473c6a962e47d053181", "filename": "libjava/java/nio/channels/SelectionKey.java", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebb998e6fd4db2150c4c60f0977b2b4ca3d39fa/libjava%2Fjava%2Fnio%2Fchannels%2FSelectionKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebb998e6fd4db2150c4c60f0977b2b4ca3d39fa/libjava%2Fjava%2Fnio%2Fchannels%2FSelectionKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FSelectionKey.java?ref=3ebb998e6fd4db2150c4c60f0977b2b4ca3d39fa", "patch": "@@ -147,8 +147,6 @@ public final boolean isWritable ()\n  \n   /**\n    * Tells whether or not this key is valid.\n-   * \n-   * @exception CancelledKeyException If this key has been cancelled\n    */\n   public abstract boolean isValid ();\n  "}, {"sha": "16a3a82df5bb0140c495eec49167db594e8db754", "filename": "libjava/java/nio/channels/ServerSocketChannel.java", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebb998e6fd4db2150c4c60f0977b2b4ca3d39fa/libjava%2Fjava%2Fnio%2Fchannels%2FServerSocketChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebb998e6fd4db2150c4c60f0977b2b4ca3d39fa/libjava%2Fjava%2Fnio%2Fchannels%2FServerSocketChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FServerSocketChannel.java?ref=3ebb998e6fd4db2150c4c60f0977b2b4ca3d39fa", "patch": "@@ -60,7 +60,18 @@ public ServerSocketChannel (SelectorProvider provider)\n   }\n   \n   /**\n-   *  Accepts a connection made to this channel's socket.\n+   * Accepts a connection made to this channel's socket.\n+   *\n+   * @exception IOException If an error occurs\n+   * @exception AsynchronousCloseException If another thread closes this\n+   * channel while the accept operation is in progress.\n+   * @exception ClosedByInterruptException If another thread interrupts the\n+   * current thread while the accept operation is in progress, thereby closing\n+   * the channel and setting the current thread's interrupt status.\n+   * @exception ClosedChannelException If the channel is closed.\n+   * @exception NotYetBoundException If the channel's socket is not yet bound.\n+   * @exception SecurityException If a security manager has been installed and\n+   * it does not permit access to the remote endpoint of the new connection.\n    */\n   public abstract SocketChannel accept ();\n   \n@@ -70,7 +81,9 @@ public ServerSocketChannel (SelectorProvider provider)\n   public abstract ServerSocket socket ();\n     \n   /**\n-   * Opens a server socker channel.\n+   * Opens a server socket channel.\n+   *\n+   * @exception IOException If an error occurs\n    */\n   public static ServerSocketChannel open () throws IOException\n   {"}, {"sha": "da03693d2cc871d9bd2c47f396f4a32115d22bf4", "filename": "libjava/java/nio/channels/spi/AbstractSelectableChannel.java", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebb998e6fd4db2150c4c60f0977b2b4ca3d39fa/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectableChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebb998e6fd4db2150c4c60f0977b2b4ca3d39fa/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectableChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectableChannel.java?ref=3ebb998e6fd4db2150c4c60f0977b2b4ca3d39fa", "patch": "@@ -78,15 +78,17 @@ public final SelectableChannel configureBlocking (boolean block)\n   {\n     synchronized (LOCK)\n       {\n-    \tblocking = true;\n-    \timplConfigureBlocking (block);\n+        blocking = true;\n+        implConfigureBlocking (block);\n       }\n     \n     return this;\n   }\n \n   /**\n    * Closes this channel.\n+   *\n+   * @exception IOException If an error occurs\n    */\n   protected final void implCloseChannel ()\n   {\n@@ -168,13 +170,17 @@ private SelectionKey locate (Selector selector)\n   private void add (SelectionKey key)\n   {\n     if (keys == null)\n-      keys = new LinkedList ();\n+      {\n+        keys = new LinkedList ();\n+      }\n     \n     keys.add (key);\n   }\n \n   /**\n    * Registers this channel with the given selector, returning a selection key.\n+   *\n+   * @exception ClosedChannelException If the channel is already closed.\n    */\n   public final SelectionKey register (Selector selin, int ops, Object att)\n     throws ClosedChannelException\n@@ -187,19 +193,19 @@ public final SelectionKey register (Selector selin, int ops, Object att)\n \n     synchronized (LOCK)\n       {\n-    \tk = locate (selector);\n+        k = locate (selector);\n \n-    \tif (k != null)\n+        if (k != null)\n           {\n             k.attach (att);\n           }\n-    \telse\n+        else\n           {\n             k = selector.register (this, ops, att);\n     \t\t\n             if (k != null)\n               add (k);\n-    \t  }\n+          }\n       }\n \n     return k;"}]}