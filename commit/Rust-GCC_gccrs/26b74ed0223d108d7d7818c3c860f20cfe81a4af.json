{"sha": "26b74ed0223d108d7d7818c3c860f20cfe81a4af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZiNzRlZDAyMjNkMTA4ZDdkNzgxOGMzYzg2MGYyMGNmZTgxYTRhZg==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2019-12-13T17:40:06Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@gcc.gnu.org", "date": "2019-12-13T17:40:06Z"}, "message": "Update OpenACC tests for amdgcn\n\n2019-12-13  Andrew Stubbs  <ams@codesourcery.com>\n\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c-c++-common/acc_prof-init-1.c: Handle gcn.\n\t* testsuite/libgomp.oacc-c-c++-common/acc_prof-kernels-1.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/acc_prof-parallel-1.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/asyncwait-nop-1.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/function-not-offloaded.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/async_queue-1.c: Disable on GCN.\n\t* testsuite/libgomp.oacc-c-c++-common/tile-1.c: Likewise.\n\nFrom-SVN: r279378", "tree": {"sha": "2284c2179d38d561b52796023312bb416d85b32d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2284c2179d38d561b52796023312bb416d85b32d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26b74ed0223d108d7d7818c3c860f20cfe81a4af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26b74ed0223d108d7d7818c3c860f20cfe81a4af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26b74ed0223d108d7d7818c3c860f20cfe81a4af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26b74ed0223d108d7d7818c3c860f20cfe81a4af/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "faab8a70f2c40758c8bb15303098f3b824bafb60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faab8a70f2c40758c8bb15303098f3b824bafb60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faab8a70f2c40758c8bb15303098f3b824bafb60"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "ce440394c95c8f6df69628cee2332c9e433d7895", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b74ed0223d108d7d7818c3c860f20cfe81a4af/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b74ed0223d108d7d7818c3c860f20cfe81a4af/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=26b74ed0223d108d7d7818c3c860f20cfe81a4af", "patch": "@@ -1,3 +1,14 @@\n+2019-12-13  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/acc_prof-init-1.c: Handle gcn.\n+\t* testsuite/libgomp.oacc-c-c++-common/acc_prof-kernels-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/acc_prof-parallel-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/asyncwait-nop-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/function-not-offloaded.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/async_queue-1.c: Disable on GCN.\n+\t* testsuite/libgomp.oacc-c-c++-common/tile-1.c: Likewise.\n+\n 2019-12-13  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* openacc.f90 (module openacc_kinds): Use 'PUBLIC' to mark all symbols"}, {"sha": "e82a03e8f3cb1bc5b7f28e472196b8769c80adf6", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/acc_prof-init-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b74ed0223d108d7d7818c3c860f20cfe81a4af/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_prof-init-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b74ed0223d108d7d7818c3c860f20cfe81a4af/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_prof-init-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_prof-init-1.c?ref=26b74ed0223d108d7d7818c3c860f20cfe81a4af", "patch": "@@ -224,6 +224,8 @@ static void cb_compute_construct_end (acc_prof_info *prof_info, acc_event_info *\n \n   if (acc_device_type == acc_device_host)\n     assert (api_info->device_api == acc_device_api_none);\n+  else if (acc_device_type == acc_device_gcn)\n+    assert (api_info->device_api == acc_device_api_other);\n   else\n     assert (api_info->device_api == acc_device_api_cuda);\n   assert (api_info->valid_bytes == _ACC_API_INFO_VALID_BYTES);"}, {"sha": "ddf647cda9beecbc227583f3191a05d2ebc0c239", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/acc_prof-kernels-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b74ed0223d108d7d7818c3c860f20cfe81a4af/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_prof-kernels-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b74ed0223d108d7d7818c3c860f20cfe81a4af/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_prof-kernels-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_prof-kernels-1.c?ref=26b74ed0223d108d7d7818c3c860f20cfe81a4af", "patch": "@@ -106,6 +106,8 @@ static void cb_enqueue_launch_start (acc_prof_info *prof_info, acc_event_info *e\n     assert (event_info->launch_event.vector_length >= 1);\n   else if (acc_device_type == acc_device_nvidia) /* ... is special.  */\n     assert (event_info->launch_event.vector_length == 32);\n+  else if (acc_device_type == acc_device_gcn) /* ...and so is this.  */\n+    assert (event_info->launch_event.vector_length == 64);\n   else\n     {\n #ifdef __OPTIMIZE__\n@@ -118,6 +120,8 @@ static void cb_enqueue_launch_start (acc_prof_info *prof_info, acc_event_info *e\n \n   if (acc_device_type == acc_device_host)\n     assert (api_info->device_api == acc_device_api_none);\n+  else if (acc_device_type == acc_device_gcn)\n+    assert (api_info->device_api == acc_device_api_other);\n   else\n     assert (api_info->device_api == acc_device_api_cuda);\n   assert (api_info->valid_bytes == _ACC_API_INFO_VALID_BYTES);"}, {"sha": "dc7c7582ce2dfc212d97100509e355c3f379b5b4", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/acc_prof-parallel-1.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b74ed0223d108d7d7818c3c860f20cfe81a4af/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_prof-parallel-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b74ed0223d108d7d7818c3c860f20cfe81a4af/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_prof-parallel-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_prof-parallel-1.c?ref=26b74ed0223d108d7d7818c3c860f20cfe81a4af", "patch": "@@ -265,6 +265,8 @@ static void cb_enter_data_end (acc_prof_info *prof_info, acc_event_info *event_i\n \n   if (acc_device_type == acc_device_host)\n     assert (api_info->device_api == acc_device_api_none);\n+  else if (acc_device_type == acc_device_gcn)\n+    assert (api_info->device_api == acc_device_api_other);\n   else\n     assert (api_info->device_api == acc_device_api_cuda);\n   assert (api_info->valid_bytes == _ACC_API_INFO_VALID_BYTES);\n@@ -319,6 +321,8 @@ static void cb_exit_data_start (acc_prof_info *prof_info, acc_event_info *event_\n \n   if (acc_device_type == acc_device_host)\n     assert (api_info->device_api == acc_device_api_none);\n+  else if (acc_device_type == acc_device_gcn)\n+    assert (api_info->device_api == acc_device_api_other);\n   else\n     assert (api_info->device_api == acc_device_api_cuda);\n   assert (api_info->valid_bytes == _ACC_API_INFO_VALID_BYTES);\n@@ -371,6 +375,8 @@ static void cb_exit_data_end (acc_prof_info *prof_info, acc_event_info *event_in\n \n   if (acc_device_type == acc_device_host)\n     assert (api_info->device_api == acc_device_api_none);\n+  else if (acc_device_type == acc_device_gcn)\n+    assert (api_info->device_api == acc_device_api_other);\n   else\n     assert (api_info->device_api == acc_device_api_cuda);\n   assert (api_info->valid_bytes == _ACC_API_INFO_VALID_BYTES);\n@@ -510,6 +516,8 @@ static void cb_compute_construct_end (acc_prof_info *prof_info, acc_event_info *\n \n   if (acc_device_type == acc_device_host)\n     assert (api_info->device_api == acc_device_api_none);\n+  else if (acc_device_type == acc_device_gcn)\n+    assert (api_info->device_api == acc_device_api_other);\n   else\n     assert (api_info->device_api == acc_device_api_cuda);\n   assert (api_info->valid_bytes == _ACC_API_INFO_VALID_BYTES);\n@@ -573,6 +581,8 @@ static void cb_enqueue_launch_start (acc_prof_info *prof_info, acc_event_info *e\n \n   if (acc_device_type == acc_device_host)\n     assert (api_info->device_api == acc_device_api_none);\n+  else if (acc_device_type == acc_device_gcn)\n+    assert (api_info->device_api == acc_device_api_other);\n   else\n     assert (api_info->device_api == acc_device_api_cuda);\n   assert (api_info->valid_bytes == _ACC_API_INFO_VALID_BYTES);\n@@ -637,6 +647,8 @@ static void cb_enqueue_launch_end (acc_prof_info *prof_info, acc_event_info *eve\n \n   if (acc_device_type == acc_device_host)\n     assert (api_info->device_api == acc_device_api_none);\n+  else if (acc_device_type == acc_device_gcn)\n+    assert (api_info->device_api == acc_device_api_other);\n   else\n     assert (api_info->device_api == acc_device_api_cuda);\n   assert (api_info->valid_bytes == _ACC_API_INFO_VALID_BYTES);"}, {"sha": "4f9e53da85d0b89ec5ef309bb622d3ac1472ffb4", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/async_queue-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b74ed0223d108d7d7818c3c860f20cfe81a4af/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fasync_queue-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b74ed0223d108d7d7818c3c860f20cfe81a4af/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fasync_queue-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fasync_queue-1.c?ref=26b74ed0223d108d7d7818c3c860f20cfe81a4af", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n+\n /* Test mapping of async values to specific underlying queues.  */\n \n #undef NDEBUG"}, {"sha": "840052fec12252668bbd4bcdc5e1ab3cdad03d3c", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/asyncwait-nop-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b74ed0223d108d7d7818c3c860f20cfe81a4af/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fasyncwait-nop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b74ed0223d108d7d7818c3c860f20cfe81a4af/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fasyncwait-nop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fasyncwait-nop-1.c?ref=26b74ed0223d108d7d7818c3c860f20cfe81a4af", "patch": "@@ -26,6 +26,8 @@ main ()\n   acc_device_t d;\n #if defined ACC_DEVICE_TYPE_nvidia\n   d = acc_device_nvidia;\n+#elif defined ACC_DEVICE_TYPE_gcn\n+  d = acc_device_gcn;\n #elif defined ACC_DEVICE_TYPE_host\n   d = acc_device_host;\n #else"}, {"sha": "517004a562d2a96cf2f84db7c8487d0afc7cc107", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/function-not-offloaded.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b74ed0223d108d7d7818c3c860f20cfe81a4af/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffunction-not-offloaded.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b74ed0223d108d7d7818c3c860f20cfe81a4af/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffunction-not-offloaded.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffunction-not-offloaded.c?ref=26b74ed0223d108d7d7818c3c860f20cfe81a4af", "patch": "@@ -1,11 +1,11 @@\n /* { dg-do link } */\n-/* { dg-excess-errors \"lto1, mkoffload and lto-wrapper fatal errors\" { target openacc_nvidia_accel_selected } } */\n+/* { dg-excess-errors \"lto1, mkoffload and lto-wrapper fatal errors\" { target { openacc_nvidia_accel_selected || openacc_amdgcn_accel_selected } } } */\n \n int var;\n #pragma acc declare create (var)\n \n void __attribute__((noinline, noclone))\n-foo () /* { dg-error \"function 'foo' has been referenced in offloaded code but hasn't been marked to be included in the offloaded code\" \"\" { target openacc_nvidia_accel_selected } } */\n+foo () /* { dg-error \"function 'foo' has been referenced in offloaded code but hasn't been marked to be included in the offloaded code\" \"\" { target { openacc_nvidia_accel_selected || openacc_amdgcn_accel_selected } } } */\n {\n   var++;\n }"}, {"sha": "c019fe55c7a2250d93d0662609e21416514fd123", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/tile-1.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b74ed0223d108d7d7818c3c860f20cfe81a4af/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ftile-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b74ed0223d108d7d7818c3c860f20cfe81a4af/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ftile-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ftile-1.c?ref=26b74ed0223d108d7d7818c3c860f20cfe81a4af", "patch": "@@ -1,3 +1,6 @@\n+/* AMD GCN does not use 32-lane vectors, so the expected use counts mismatch.\n+   { dg-skip-if \"unsuitable dimensions\" { openacc_amdgcn_accel_selected } { \"*\" } { \"\" } } */\n+\n /* { dg-additional-options \"-fopenacc-dim=32\" } */\n \n #include <stdio.h>"}]}