{"sha": "b925bf594a3a5ca47975efa1c52d794c0c776373", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkyNWJmNTk0YTNhNWNhNDc5NzVlZmExYzUyZDc5NGMwYzc3NjM3Mw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-06-25T20:54:46Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-06-25T20:54:46Z"}, "message": "Makefile.am: Add new header.\n\n\t* include/Makefile.am: Add new header.\n\t* include/Makefile.in: Regenerate.\n\t* include/bits/allocated_ptr.h (__allocated_ptr, __allocate_guarded):\n\tNew RAII utilities for working with allocators.\n\t* include/bits/shared_ptr_base.h (_Sp_counted_deleter): Define\n\t__allocator_type typedef and use new __allocated_ptr type.\n\t(_Sp_counted_ptr_inplace): Likewise.\n\t(__shared_count::__shared_count, __shared_ptr::__shared_ptr): Use\n\t__allocate_guarded to to simplify exception handling.\n\t* include/experimental/any (any::_Manager_alloc::_S_alloc): Likewise.\n\t* include/std/future (_Result_alloc::_M_destroy): Likewise.\n\t(_Result_alloc::_S_allocate_result): Likewise.\n\t* testsuite/20_util/shared_ptr/cons/43820_neg.cc: Adjust line number.\n\t* testsuite/20_util/shared_ptr/cons/void_neg.cc: Likewise.\n\t* testsuite/20_util/shared_ptr/creation/no_rtti.cc: New.\n\t* testsuite/20_util/shared_ptr/creation/alloc.cc: Test allocator\n\twith fancy pointer.\n\t* testsuite/30_threads/promise/cons/alloc.cc: Likewise.\n\nFrom-SVN: r211996", "tree": {"sha": "9814c386214bbf28f714ae8aea45ac46a3ee273c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9814c386214bbf28f714ae8aea45ac46a3ee273c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b925bf594a3a5ca47975efa1c52d794c0c776373", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b925bf594a3a5ca47975efa1c52d794c0c776373", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b925bf594a3a5ca47975efa1c52d794c0c776373", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b925bf594a3a5ca47975efa1c52d794c0c776373/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "484dc5996f12cadb01e01e224541f4ae693f0b6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/484dc5996f12cadb01e01e224541f4ae693f0b6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/484dc5996f12cadb01e01e224541f4ae693f0b6c"}], "stats": {"total": 374, "additions": 266, "deletions": 108}, "files": [{"sha": "31669e0cc3c4c308d2b6da46b3b5b8616e44c8d7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b925bf594a3a5ca47975efa1c52d794c0c776373/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b925bf594a3a5ca47975efa1c52d794c0c776373/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b925bf594a3a5ca47975efa1c52d794c0c776373", "patch": "@@ -6,6 +6,25 @@\n \tLikewise.\n \t* include/ext/alloc_traits.h: Fix comment.\n \n+\t* include/Makefile.am: Add new header.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/bits/allocated_ptr.h (__allocated_ptr, __allocate_guarded):\n+\tNew RAII utilities for working with allocators.\n+\t* include/bits/shared_ptr_base.h (_Sp_counted_deleter): Define\n+\t__allocator_type typedef and use new __allocated_ptr type.\n+\t(_Sp_counted_ptr_inplace): Likewise.\n+\t(__shared_count::__shared_count, __shared_ptr::__shared_ptr): Use\n+\t__allocate_guarded to to simplify exception handling.\n+\t* include/experimental/any (any::_Manager_alloc::_S_alloc): Likewise.\n+\t* include/std/future (_Result_alloc::_M_destroy): Likewise.\n+\t(_Result_alloc::_S_allocate_result): Likewise.\n+\t* testsuite/20_util/shared_ptr/cons/43820_neg.cc: Adjust line number.\n+\t* testsuite/20_util/shared_ptr/cons/void_neg.cc: Likewise.\n+\t* testsuite/20_util/shared_ptr/creation/no_rtti.cc: New.\n+\t* testsuite/20_util/shared_ptr/creation/alloc.cc: Test allocator\n+\twith fancy pointer.\n+\t* testsuite/30_threads/promise/cons/alloc.cc: Likewise.\n+\n 2014-06-24  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/functexcept.h (__throw_out_of_range_fmt): Change"}, {"sha": "e469586077d2659eef4ec9a71d8463aeb0f7d209", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b925bf594a3a5ca47975efa1c52d794c0c776373/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b925bf594a3a5ca47975efa1c52d794c0c776373/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=b925bf594a3a5ca47975efa1c52d794c0c776373", "patch": "@@ -80,6 +80,7 @@ bits_builddir = ./bits\n bits_headers = \\\n \t${bits_srcdir}/algorithmfwd.h \\\n \t${bits_srcdir}/alloc_traits.h \\\n+\t${bits_srcdir}/allocated_ptr.h \\\n \t${bits_srcdir}/allocator.h \\\n \t${bits_srcdir}/atomic_base.h \\\n \t${bits_srcdir}/basic_ios.h \\"}, {"sha": "34ae1d17bd54e04224286dd451521ea41b287f80", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b925bf594a3a5ca47975efa1c52d794c0c776373/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b925bf594a3a5ca47975efa1c52d794c0c776373/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=b925bf594a3a5ca47975efa1c52d794c0c776373", "patch": "@@ -347,6 +347,7 @@ bits_builddir = ./bits\n bits_headers = \\\n \t${bits_srcdir}/algorithmfwd.h \\\n \t${bits_srcdir}/alloc_traits.h \\\n+\t${bits_srcdir}/allocated_ptr.h \\\n \t${bits_srcdir}/allocator.h \\\n \t${bits_srcdir}/atomic_base.h \\\n \t${bits_srcdir}/basic_ios.h \\"}, {"sha": "5cdce20d6b9e2381434624dec59ae986d63da42f", "filename": "libstdc++-v3/include/bits/allocated_ptr.h", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b925bf594a3a5ca47975efa1c52d794c0c776373/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocated_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b925bf594a3a5ca47975efa1c52d794c0c776373/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocated_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocated_ptr.h?ref=b925bf594a3a5ca47975efa1c52d794c0c776373", "patch": "@@ -0,0 +1,104 @@\n+// Guarded Allocation -*- C++ -*-\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file bits/allocated_ptr.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{memory}\n+ */\n+\n+#ifndef _ALLOCATED_PTR_H\n+#define _ALLOCATED_PTR_H 1\n+\n+#if __cplusplus < 201103L\n+# include <bits/c++0xwarning.h>\n+#else\n+# include <type_traits>\n+# include <bits/ptr_traits.h>\n+# include <bits/alloc_traits.h>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  /// Non-standard RAII type for managing pointers obtained from allocators.\n+  template<typename _Alloc>\n+    struct __allocated_ptr\n+    {\n+      using pointer = typename allocator_traits<_Alloc>::pointer;\n+      using value_type = typename allocator_traits<_Alloc>::value_type;\n+\n+      /// Take ownership of __ptr\n+      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept\n+      : _M_alloc(&__a), _M_ptr(__ptr)\n+      { }\n+\n+      /// Convert __ptr to allocator's pointer type and take ownership of it\n+      template<typename _Ptr,\n+\t       typename _Req = _Require<is_same<_Ptr, value_type*>>>\n+      __allocated_ptr(_Alloc& __a, _Ptr __ptr)\n+      : _M_alloc(&__a), _M_ptr(pointer_traits<pointer>::pointer_to(*__ptr))\n+      { }\n+\n+      /// Transfer ownership of the owned pointer\n+      __allocated_ptr(__allocated_ptr&& __gd) noexcept\n+      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)\n+      { __gd._M_ptr = nullptr; }\n+\n+      /// Deallocate the owned pointer\n+      ~__allocated_ptr()\n+      {\n+\tif (_M_ptr != nullptr)\n+\t  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);\n+      }\n+\n+      /// Release ownership of the owned pointer\n+      __allocated_ptr& operator=(std::nullptr_t) noexcept { _M_ptr = nullptr; }\n+\n+      /// Get the address that the owned pointer refers to.\n+      value_type* get() { return _S_raw_ptr(_M_ptr); }\n+\n+    private:\n+      value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }\n+\n+      template<typename _Ptr>\n+\tauto _S_raw_ptr(_Ptr __ptr) -> decltype(_S_raw_ptr(__ptr.operator->()))\n+\t{ return _S_raw_ptr(__ptr.operator->()); }\n+\n+      _Alloc* _M_alloc;\n+      pointer _M_ptr;\n+    };\n+\n+  /// Allocate space for a single object using __a\n+  template<typename _Alloc>\n+    __allocated_ptr<_Alloc>\n+    __allocate_guarded(_Alloc& __a)\n+    {\n+      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };\n+    }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+\n+#endif\n+#endif"}, {"sha": "590a8d3cab7d255e39757262370d1ed021c68474", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 40, "deletions": 58, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b925bf594a3a5ca47975efa1c52d794c0c776373/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b925bf594a3a5ca47975efa1c52d794c0c776373/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=b925bf594a3a5ca47975efa1c52d794c0c776373", "patch": "@@ -49,6 +49,7 @@\n #ifndef _SHARED_PTR_BASE_H\n #define _SHARED_PTR_BASE_H 1\n \n+#include <bits/allocated_ptr.h>\n #include <ext/aligned_buffer.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -448,6 +449,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       };\n \n     public:\n+      using __allocator_type = __alloc_rebind<_Alloc, _Sp_counted_deleter>;\n+\n       // __d(__p) must not throw.\n       _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept\n       : _M_impl(__p, __d, _Alloc()) { }\n@@ -465,11 +468,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       virtual void\n       _M_destroy() noexcept\n       {\n-\ttypedef typename allocator_traits<_Alloc>::template\n-\t  rebind_traits<_Sp_counted_deleter> _Alloc_traits;\n-\ttypename _Alloc_traits::allocator_type __a(_M_impl._M_alloc());\n-\t_Alloc_traits::destroy(__a, this);\n-\t_Alloc_traits::deallocate(__a, this, 1);\n+\t__allocator_type __a(_M_impl._M_alloc());\n+\t__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };\n+\tthis->~_Sp_counted_deleter();\n       }\n \n       virtual void*\n@@ -506,6 +507,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       };\n \n     public:\n+      using __allocator_type = __alloc_rebind<_Alloc, _Sp_counted_ptr_inplace>;\n+\n       template<typename... _Args>\n \t_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)\n \t: _M_impl(__a)\n@@ -528,11 +531,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       virtual void\n       _M_destroy() noexcept\n       {\n-\ttypedef typename allocator_traits<_Alloc>::template\n-\t  rebind_traits<_Sp_counted_ptr_inplace> _Alloc_traits;\n-\ttypename _Alloc_traits::allocator_type __a(_M_impl._M_alloc());\n-\t_Alloc_traits::destroy(__a, this);\n-\t_Alloc_traits::deallocate(__a, this, 1);\n+\t__allocator_type __a(_M_impl._M_alloc());\n+\t__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };\n+\tthis->~_Sp_counted_ptr_inplace();\n       }\n \n       // Sneaky trick so __shared_ptr can get the managed pointer\n@@ -584,22 +585,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)\n \t{\n \t  typedef _Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp> _Sp_cd_type;\n-\t  typedef typename allocator_traits<_Alloc>::template\n-\t    rebind_traits<_Sp_cd_type> _Alloc_traits;\n-\t  typename _Alloc_traits::allocator_type __a2(__a);\n-\t  _Sp_cd_type* __mem = 0;\n \t  __try\n \t    {\n-\t      __mem = _Alloc_traits::allocate(__a2, 1);\n-\t      _Alloc_traits::construct(__a2, __mem,\n-\t\t  __p, std::move(__d), std::move(__a));\n+\t      typename _Sp_cd_type::__allocator_type __a2(__a);\n+\t      auto __guard = std::__allocate_guarded(__a2);\n+\t      _Sp_cd_type* __mem = __guard.get();\n+\t      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));\n \t      _M_pi = __mem;\n+\t      __guard = nullptr;\n \t    }\n \t  __catch(...)\n \t    {\n \t      __d(__p); // Call _Deleter on __p.\n-\t      if (__mem)\n-\t        _Alloc_traits::deallocate(__a2, __mem, 1);\n \t      __throw_exception_again;\n \t    }\n \t}\n@@ -610,21 +607,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t: _M_pi(0)\n \t{\n \t  typedef _Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp> _Sp_cp_type;\n-\t  typedef typename allocator_traits<_Alloc>::template\n-\t    rebind_traits<_Sp_cp_type> _Alloc_traits;\n-\t  typename _Alloc_traits::allocator_type __a2(__a);\n-\t  _Sp_cp_type* __mem = _Alloc_traits::allocate(__a2, 1);\n-\t  __try\n-\t    {\n-\t      _Alloc_traits::construct(__a2, __mem, std::move(__a),\n-\t\t    std::forward<_Args>(__args)...);\n-\t      _M_pi = __mem;\n-\t    }\n-\t  __catch(...)\n-\t    {\n-\t      _Alloc_traits::deallocate(__a2, __mem, 1);\n-\t      __throw_exception_again;\n-\t    }\n+\t  typename _Sp_cp_type::__allocator_type __a2(__a);\n+\t  auto __guard = std::__allocate_guarded(__a2);\n+\t  _Sp_cp_type* __mem = __guard.get();\n+\t  ::new (__mem) _Sp_cp_type(std::move(__a),\n+\t\t\t\t    std::forward<_Args>(__args)...);\n+\t  _M_pi = __mem;\n+\t  __guard = nullptr;\n \t}\n \n #if _GLIBCXX_USE_DEPRECATED\n@@ -1096,11 +1085,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Alloc>\n         struct _Deleter\n         {\n-          void operator()(_Tp* __ptr)\n+          void operator()(typename _Alloc::pointer __ptr)\n           {\n-\t    typedef allocator_traits<_Alloc> _Alloc_traits;\n-\t    _Alloc_traits::destroy(_M_alloc, __ptr);\n-\t    _Alloc_traits::deallocate(_M_alloc, __ptr, 1);\n+\t    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };\n+\t    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());\n           }\n           _Alloc _M_alloc;\n         };\n@@ -1109,27 +1097,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,\n \t\t     _Args&&... __args)\n \t: _M_ptr(), _M_refcount()\n-        {\n-\t  typedef typename _Alloc::template rebind<_Tp>::other _Alloc2;\n-          _Deleter<_Alloc2> __del = { _Alloc2(__a) };\n-\t  typedef allocator_traits<_Alloc2> __traits;\n-          _M_ptr = __traits::allocate(__del._M_alloc, 1);\n-\t  __try\n-\t    {\n-\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-\t      // 2070. allocate_shared should use allocator_traits<A>::construct\n-\t      __traits::construct(__del._M_alloc, _M_ptr,\n-\t\t                  std::forward<_Args>(__args)...);\n-\t    }\n-\t  __catch(...)\n-\t    {\n-\t      __traits::deallocate(__del._M_alloc, _M_ptr, 1);\n-\t      __throw_exception_again;\n-\t    }\n-          __shared_count<_Lp> __count(_M_ptr, __del, __del._M_alloc);\n-          _M_refcount._M_swap(__count);\n+\t{\n+\t  typedef typename allocator_traits<_Alloc>::template\n+\t    rebind_traits<_Tp> __traits;\n+\t  _Deleter<typename __traits::allocator_type> __del = { __a };\n+\t  auto __guard = std::__allocate_guarded(__del._M_alloc);\n+\t  _M_ptr = __guard.get();\n+\t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t  // 2070. allocate_shared should use allocator_traits<A>::construct\n+\t  __traits::construct(__del._M_alloc, _M_ptr,\n+\t\t\t      std::forward<_Args>(__args)...);\n+\t  __guard = nullptr;\n+\t  __shared_count<_Lp> __count(_M_ptr, __del, __del._M_alloc);\n+\t  _M_refcount._M_swap(__count);\n \t  __enable_shared_from_this_helper(_M_refcount, _M_ptr, _M_ptr);\n-        }\n+\t}\n #endif\n \n       template<typename _Tp1, _Lock_policy _Lp1, typename _Alloc,"}, {"sha": "8f6e372c3b1e614ef602e02b700bf271f1f1e839", "filename": "libstdc++-v3/include/experimental/any", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b925bf594a3a5ca47975efa1c52d794c0c776373/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b925bf594a3a5ca47975efa1c52d794c0c776373/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany?ref=b925bf594a3a5ca47975efa1c52d794c0c776373", "patch": "@@ -116,8 +116,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template<typename _Tp, typename _Alloc>\n       struct _Manager_alloc; // creates contained object using an allocator\n \n-    template<typename _Tp, typename _Alloc, typename _TpAlloc\n-\t     = typename allocator_traits<_Alloc>::template rebind_alloc<_Tp>>\n+    template<typename _Tp, typename _Alloc,\n+\t     typename _TpAlloc = __alloc_rebind<_Alloc, _Tp>>\n       using _ManagerAlloc = conditional_t<_Internal<_Tp>::value,\n \t\t\t\t\t  _Manager_internal<_Tp>,\n \t\t\t\t\t  _Manager_alloc<_Tp, _TpAlloc>>;\n@@ -501,19 +501,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _S_alloc(const _Alloc& __a, _Up&& __value)\n     {\n       typename _Traits::allocator_type __a2(__a);\n-      auto __ptr = _Traits::allocate(__a2, 1);\n-      __try\n-\t{\n-\t  any::_Storage __storage;\n-\t  __storage._M_ptr = std::__addressof(*__ptr);\n-\t  ::new(__storage._M_ptr) _Data{__a, std::forward<_Up>(__value)};\n-\t  return __storage;\n-\t}\n-      __catch(...)\n-\t{\n-\t  _Traits::deallocate(__a2, __ptr, 1);\n-\t  __throw_exception_again;\n-\t}\n+      auto __guard = std::__allocate_guarded(__a2);\n+      any::_Storage __storage;\n+      __storage._M_ptr = __guard.get();\n+      ::new(__storage._M_ptr) _Data{__a, std::forward<_Up>(__value)};\n+      __guard = nullptr;\n+      return __storage;\n     }\n #endif\n \n@@ -591,11 +584,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tbreak;\n       case _Op_destroy:\n \t{\n-\t  using _PtrTr = pointer_traits<typename _Traits::pointer>;\n-\t  typename _Traits::allocator_type __a(__ptr->_M_alloc());\n-\t  auto __alloc_ptr = _PtrTr::pointer_to(*const_cast<_Data*>(__ptr));\n+\t  using _Alloc2 = typename _Traits::allocator_type;\n+\t  _Alloc2 __a(__ptr->_M_alloc());\n+\t  __allocated_ptr<_Alloc2> __guard{__a, const_cast<_Data*>(__ptr)};\n \t  __ptr->~_Data();\n-\t  _Traits::deallocate(__a, __alloc_ptr, 1);\n \t}\n \tbreak;\n       }"}, {"sha": "be2ed96f9729d289041743f1ba7d50d3554f3dec", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 14, "deletions": 25, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b925bf594a3a5ca47975efa1c52d794c0c776373/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b925bf594a3a5ca47975efa1c52d794c0c776373/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=b925bf594a3a5ca47975efa1c52d794c0c776373", "patch": "@@ -45,7 +45,7 @@\n #include <bits/unique_ptr.h>\n #include <bits/shared_ptr.h>\n #include <bits/uses_allocator.h>\n-#include <bits/alloc_traits.h>\n+#include <bits/allocated_ptr.h>\n #include <ext/aligned_buffer.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -251,42 +251,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template<typename _Res, typename _Alloc>\n       struct _Result_alloc final : _Result<_Res>, _Alloc\n       {\n-        typedef typename allocator_traits<_Alloc>::template\n-          rebind_alloc<_Result_alloc> __allocator_type;\n+\tusing __allocator_type = __alloc_rebind<_Alloc, _Result_alloc>;\n \n         explicit\n \t_Result_alloc(const _Alloc& __a) : _Result<_Res>(), _Alloc(__a)\n-        { }\n+\t{ }\n \t\n       private:\n \tvoid _M_destroy()\n-        {\n-\t  typedef allocator_traits<__allocator_type> __traits;\n-          __allocator_type __a(*this);\n-\t  __traits::destroy(__a, this);\n-\t  __traits::deallocate(__a, this, 1);\n-        }\n+\t{\n+\t  __allocator_type __a(*this);\n+\t  __allocated_ptr<__allocator_type> __guard_ptr{ __a, this };\n+\t  this->~_Result_alloc();\n+\t}\n       };\n \n     template<typename _Res, typename _Allocator>\n       static _Ptr<_Result_alloc<_Res, _Allocator>>\n       _S_allocate_result(const _Allocator& __a)\n       {\n-        typedef _Result_alloc<_Res, _Allocator>\t__result_type;\n-\ttypedef allocator_traits<typename __result_type::__allocator_type>\n-\t  __traits;\n-        typename __traits::allocator_type __a2(__a);\n-        __result_type* __p = __traits::allocate(__a2, 1);\n-        __try\n-\t  {\n-\t    __traits::construct(__a2, __p, __a);\n-\t  }\n-        __catch(...)\n-\t  {\n-\t    __traits::deallocate(__a2, __p, 1);\n-\t    __throw_exception_again;\n-\t  }\n-        return _Ptr<__result_type>(__p);\n+\tusing __result_type = _Result_alloc<_Res, _Allocator>;\n+\ttypename __result_type::__allocator_type __a2(__a);\n+\tauto __guard = std::__allocate_guarded(__a2);\n+\t__result_type* __p = ::new((void*)__guard.get()) __result_type{__a};\n+\t__guard = nullptr;\n+\treturn _Ptr<__result_type>(__p);\n       }\n \n     template<typename _Res, typename _Tp>"}, {"sha": "dff04028b15c32c73fa0b35ab63a67c4b568786b", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/43820_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b925bf594a3a5ca47975efa1c52d794c0c776373/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b925bf594a3a5ca47975efa1c52d794c0c776373/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc?ref=b925bf594a3a5ca47975efa1c52d794c0c776373", "patch": "@@ -32,7 +32,7 @@ void test01()\n {\n   X* px = 0;\n   std::shared_ptr<X> p1(px);   // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 875 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 864 }\n \n   std::shared_ptr<X> p9(ap());  // { dg-error \"here\" }\n   // { dg-error \"incomplete\" \"\" { target *-*-* } 307 }"}, {"sha": "1ea114c7085cc538649b9bda7bc57ea52109d9c3", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/void_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b925bf594a3a5ca47975efa1c52d794c0c776373/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fvoid_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b925bf594a3a5ca47975efa1c52d794c0c776373/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fvoid_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fvoid_neg.cc?ref=b925bf594a3a5ca47975efa1c52d794c0c776373", "patch": "@@ -25,5 +25,5 @@\n void test01()\n {\n   std::shared_ptr<void> p((void*)nullptr);   // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 874 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 863 }\n }"}, {"sha": "402c612f592b06c3466c0c55bd7fc55edf4a4d5a", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/creation/alloc.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b925bf594a3a5ca47975efa1c52d794c0c776373/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcreation%2Falloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b925bf594a3a5ca47975efa1c52d794c0c776373/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcreation%2Falloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcreation%2Falloc.cc?ref=b925bf594a3a5ca47975efa1c52d794c0c776373", "patch": "@@ -101,10 +101,25 @@ test02()\n \t  == tracker_allocator_counter::get_deallocation_count() );\n }\n \n+template<typename T>\n+  struct Pointer : __gnu_test::PointerBase<Pointer<T>, T>\n+  {\n+    using __gnu_test::PointerBase<Pointer<T>, T>::PointerBase;\n+  };\n+\n+void\n+test03()\n+{\n+  __gnu_test::CustomPointerAlloc<Pointer<int>> alloc;\n+  auto p = std::allocate_shared<int>(alloc, 1);\n+  VERIFY( *p == 1 );\n+}\n+\n int\n main()\n {\n   test01();\n   test02();\n+  test03();\n   return 0;\n }"}, {"sha": "127bafb3294b0d6624bbf29ee0f97c152441eaa0", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/creation/no_rtti.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b925bf594a3a5ca47975efa1c52d794c0c776373/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcreation%2Fno_rtti.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b925bf594a3a5ca47975efa1c52d794c0c776373/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcreation%2Fno_rtti.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcreation%2Fno_rtti.cc?ref=b925bf594a3a5ca47975efa1c52d794c0c776373", "patch": "@@ -0,0 +1,41 @@\n+// { dg-options \"-std=gnu++11 -fno-rtti\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 20.8.2.2 Class template shared_ptr [util.smartptr.shared]\n+\n+#include <memory>\n+#include <testsuite_allocator.h>\n+\n+struct X { };\n+\n+// 20.8.2.2.6 shared_ptr creation [util.smartptr.shared.create]\n+\n+// test allocate_shared with no RTTI\n+\n+template<typename T>\n+  struct Pointer : __gnu_test::PointerBase<Pointer<T>, T>\n+  {\n+    using __gnu_test::PointerBase<Pointer<T>, T>::PointerBase;\n+  };\n+\n+__gnu_test::CustomPointerAlloc<Pointer<int>> alloc;\n+\n+auto p = std::allocate_shared<X>(alloc);\n+"}, {"sha": "c45e646aae0d2f973a5d518c731c0cfb6b5e7226", "filename": "libstdc++-v3/testsuite/30_threads/promise/cons/alloc.cc", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b925bf594a3a5ca47975efa1c52d794c0c776373/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Falloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b925bf594a3a5ca47975efa1c52d794c0c776373/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Falloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Falloc.cc?ref=b925bf594a3a5ca47975efa1c52d794c0c776373", "patch": "@@ -27,14 +27,27 @@\n #include <testsuite_hooks.h>\n #include <testsuite_allocator.h>\n \n+using std::promise;\n+using std::allocator_arg;\n+\n void test01()\n {\n-  using std::promise;\n-  using std::allocator_arg;\n-  using __gnu_test::uneq_allocator;\n+  __gnu_test::uneq_allocator<char> alloc(99);\n+  promise<int> p1(allocator_arg, alloc);\n+  p1.set_value(5);\n+  VERIFY( p1.get_future().get() == 5 );\n+}\n \n-  uneq_allocator<char> alloc(99);\n+template<typename T>\n+  struct Pointer : __gnu_test::PointerBase<Pointer<T>, T>\n+  {\n+    using __gnu_test::PointerBase<Pointer<T>, T>::PointerBase;\n+  };\n \n+void\n+test02()\n+{\n+  __gnu_test::CustomPointerAlloc<Pointer<int>> alloc;\n   promise<int> p1(allocator_arg, alloc);\n   p1.set_value(5);\n   VERIFY( p1.get_future().get() == 5 );\n@@ -43,5 +56,6 @@ void test01()\n int main()\n {\n   test01();\n+  test02();\n   return 0;\n }"}]}