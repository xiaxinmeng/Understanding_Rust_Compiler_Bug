{"sha": "f43657b49fa8836b0bc621e61ff2c113c7dc2a0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQzNjU3YjQ5ZmE4ODM2YjBiYzYyMWU2MWZmMmMxMTNjN2RjMmEwZQ==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2016-07-25T13:31:44Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2016-07-25T13:31:44Z"}, "message": "[AArch64][1/3] Migrate aarch64_add_constant to new interface & kill aarch64_build_constant\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_add_constant): New parameter \"mode\".\n\tUse aarch64_internal_mov_immediate instead of aarch64_build_constant.\n\t(aarch64_output_mi_thunk): Pass Pmode when calling aarch64_add_constant.\n\t(aarch64_build_constant): Delete.\n\nFrom-SVN: r238712", "tree": {"sha": "135369097b85f370b381fb571406c35476f36058", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/135369097b85f370b381fb571406c35476f36058"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f43657b49fa8836b0bc621e61ff2c113c7dc2a0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f43657b49fa8836b0bc621e61ff2c113c7dc2a0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f43657b49fa8836b0bc621e61ff2c113c7dc2a0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f43657b49fa8836b0bc621e61ff2c113c7dc2a0e/comments", "author": null, "committer": null, "parents": [{"sha": "a837417c79ae71cdc8a19c3f2d44317d8d39c32c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a837417c79ae71cdc8a19c3f2d44317d8d39c32c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a837417c79ae71cdc8a19c3f2d44317d8d39c32c"}], "stats": {"total": 110, "additions": 20, "deletions": 90}, "files": [{"sha": "aa8cc14c020c92f798b7133621492b50ba639829", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f43657b49fa8836b0bc621e61ff2c113c7dc2a0e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f43657b49fa8836b0bc621e61ff2c113c7dc2a0e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f43657b49fa8836b0bc621e61ff2c113c7dc2a0e", "patch": "@@ -1,3 +1,10 @@\n+2016-07-25  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_add_constant): New parameter \"mode\".\n+\tUse aarch64_internal_mov_immediate instead of aarch64_build_constant.\n+\t(aarch64_output_mi_thunk): Pass Pmode when calling aarch64_add_constant.\n+\t(aarch64_build_constant): Delete.\n+\n 2016-07-25  Alexander Monakov  <amonakov@ispras.ru>\n \n \tRevert"}, {"sha": "92c4ae4777a99b0d94252e7f0458bbef0f723ab9", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 13, "deletions": 90, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f43657b49fa8836b0bc621e61ff2c113c7dc2a0e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f43657b49fa8836b0bc621e61ff2c113c7dc2a0e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=f43657b49fa8836b0bc621e61ff2c113c7dc2a0e", "patch": "@@ -3412,118 +3412,40 @@ aarch64_final_eh_return_addr (void)\n \t\t\t\t       - 2 * UNITS_PER_WORD));\n }\n \n-/* Possibly output code to build up a constant in a register.  For\n-   the benefit of the costs infrastructure, returns the number of\n-   instructions which would be emitted.  GENERATE inhibits or\n-   enables code generation.  */\n-\n-static int\n-aarch64_build_constant (int regnum, HOST_WIDE_INT val, bool generate)\n-{\n-  int insns = 0;\n-\n-  if (aarch64_bitmask_imm (val, DImode))\n-    {\n-      if (generate)\n-\temit_move_insn (gen_rtx_REG (Pmode, regnum), GEN_INT (val));\n-      insns = 1;\n-    }\n-  else\n-    {\n-      int i;\n-      int ncount = 0;\n-      int zcount = 0;\n-      HOST_WIDE_INT valp = val >> 16;\n-      HOST_WIDE_INT valm;\n-      HOST_WIDE_INT tval;\n-\n-      for (i = 16; i < 64; i += 16)\n-\t{\n-\t  valm = (valp & 0xffff);\n-\n-\t  if (valm != 0)\n-\t    ++ zcount;\n-\n-\t  if (valm != 0xffff)\n-\t    ++ ncount;\n-\n-\t  valp >>= 16;\n-\t}\n-\n-      /* zcount contains the number of additional MOVK instructions\n-\t required if the constant is built up with an initial MOVZ instruction,\n-\t while ncount is the number of MOVK instructions required if starting\n-\t with a MOVN instruction.  Choose the sequence that yields the fewest\n-\t number of instructions, preferring MOVZ instructions when they are both\n-\t the same.  */\n-      if (ncount < zcount)\n-\t{\n-\t  if (generate)\n-\t    emit_move_insn (gen_rtx_REG (Pmode, regnum),\n-\t\t\t    GEN_INT (val | ~(HOST_WIDE_INT) 0xffff));\n-\t  tval = 0xffff;\n-\t  insns++;\n-\t}\n-      else\n-\t{\n-\t  if (generate)\n-\t    emit_move_insn (gen_rtx_REG (Pmode, regnum),\n-\t\t\t    GEN_INT (val & 0xffff));\n-\t  tval = 0;\n-\t  insns++;\n-\t}\n-\n-      val >>= 16;\n-\n-      for (i = 16; i < 64; i += 16)\n-\t{\n-\t  if ((val & 0xffff) != tval)\n-\t    {\n-\t      if (generate)\n-\t\temit_insn (gen_insv_immdi (gen_rtx_REG (Pmode, regnum),\n-\t\t\t\t\t   GEN_INT (i),\n-\t\t\t\t\t   GEN_INT (val & 0xffff)));\n-\t      insns++;\n-\t    }\n-\t  val >>= 16;\n-\t}\n-    }\n-  return insns;\n-}\n-\n static void\n-aarch64_add_constant (int regnum, int scratchreg, HOST_WIDE_INT delta)\n+aarch64_add_constant (machine_mode mode, int regnum, int scratchreg,\n+\t\t      HOST_WIDE_INT delta)\n {\n   HOST_WIDE_INT mdelta = delta;\n-  rtx this_rtx = gen_rtx_REG (Pmode, regnum);\n-  rtx scratch_rtx = gen_rtx_REG (Pmode, scratchreg);\n+  rtx this_rtx = gen_rtx_REG (mode, regnum);\n+  rtx scratch_rtx = gen_rtx_REG (mode, scratchreg);\n \n   if (mdelta < 0)\n     mdelta = -mdelta;\n \n   if (mdelta >= 4096 * 4096)\n     {\n-      (void) aarch64_build_constant (scratchreg, delta, true);\n+      aarch64_internal_mov_immediate (scratch_rtx, GEN_INT (delta), true, mode);\n       emit_insn (gen_add3_insn (this_rtx, this_rtx, scratch_rtx));\n     }\n   else if (mdelta > 0)\n     {\n       if (mdelta >= 4096)\n \t{\n \t  emit_insn (gen_rtx_SET (scratch_rtx, GEN_INT (mdelta / 4096)));\n-\t  rtx shift = gen_rtx_ASHIFT (Pmode, scratch_rtx, GEN_INT (12));\n+\t  rtx shift = gen_rtx_ASHIFT (mode, scratch_rtx, GEN_INT (12));\n \t  if (delta < 0)\n \t    emit_insn (gen_rtx_SET (this_rtx,\n-\t\t\t\t    gen_rtx_MINUS (Pmode, this_rtx, shift)));\n+\t\t\t\t    gen_rtx_MINUS (mode, this_rtx, shift)));\n \t  else\n \t    emit_insn (gen_rtx_SET (this_rtx,\n-\t\t\t\t    gen_rtx_PLUS (Pmode, this_rtx, shift)));\n+\t\t\t\t    gen_rtx_PLUS (mode, this_rtx, shift)));\n \t}\n       if (mdelta % 4096 != 0)\n \t{\n \t  scratch_rtx = GEN_INT ((delta < 0 ? -1 : 1) * (mdelta % 4096));\n \t  emit_insn (gen_rtx_SET (this_rtx,\n-\t\t\t\t  gen_rtx_PLUS (Pmode, this_rtx, scratch_rtx)));\n+\t\t\t\t  gen_rtx_PLUS (mode, this_rtx, scratch_rtx)));\n \t}\n     }\n }\n@@ -3548,7 +3470,7 @@ aarch64_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n   emit_note (NOTE_INSN_PROLOGUE_END);\n \n   if (vcall_offset == 0)\n-    aarch64_add_constant (this_regno, IP1_REGNUM, delta);\n+    aarch64_add_constant (Pmode, this_regno, IP1_REGNUM, delta);\n   else\n     {\n       gcc_assert ((vcall_offset & (POINTER_BYTES - 1)) == 0);\n@@ -3564,7 +3486,7 @@ aarch64_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \t    addr = gen_rtx_PRE_MODIFY (Pmode, this_rtx,\n \t\t\t\t       plus_constant (Pmode, this_rtx, delta));\n \t  else\n-\t    aarch64_add_constant (this_regno, IP1_REGNUM, delta);\n+\t    aarch64_add_constant (Pmode, this_regno, IP1_REGNUM, delta);\n \t}\n \n       if (Pmode == ptr_mode)\n@@ -3578,7 +3500,8 @@ aarch64_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \t  addr = plus_constant (Pmode, temp0, vcall_offset);\n       else\n \t{\n-\t  (void) aarch64_build_constant (IP1_REGNUM, vcall_offset, true);\n+\t  aarch64_internal_mov_immediate (temp1, GEN_INT (vcall_offset), true,\n+\t\t\t\t\t  Pmode);\n \t  addr = gen_rtx_PLUS (Pmode, temp0, temp1);\n \t}\n "}]}