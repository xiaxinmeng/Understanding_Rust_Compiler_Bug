{"sha": "5f0ae953a99f831c39c741ec1233f030eb6d6d90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYwYWU5NTNhOTlmODMxYzM5Yzc0MWVjMTIzM2YwMzBlYjZkNmQ5MA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-08-24T04:32:10Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-08-24T04:32:10Z"}, "message": "trans-const.c (gfc_conv_mpz_to_tree): Use mpz_getlimbn instead of going through an intermediate string.\n\n        * trans-const.c (gfc_conv_mpz_to_tree): Use mpz_getlimbn instead\n        of going through an intermediate string.  Fix 32/64 int/long bug.\n\nFrom-SVN: r86464", "tree": {"sha": "dae142b4607285da7d9578aa436fa1dad223be30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dae142b4607285da7d9578aa436fa1dad223be30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f0ae953a99f831c39c741ec1233f030eb6d6d90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f0ae953a99f831c39c741ec1233f030eb6d6d90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f0ae953a99f831c39c741ec1233f030eb6d6d90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f0ae953a99f831c39c741ec1233f030eb6d6d90/comments", "author": null, "committer": null, "parents": [{"sha": "663790f8b8f07e56cd63d6863b5718a3cad2e25d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/663790f8b8f07e56cd63d6863b5718a3cad2e25d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/663790f8b8f07e56cd63d6863b5718a3cad2e25d"}], "stats": {"total": 95, "additions": 46, "deletions": 49}, "files": [{"sha": "9d9992687e27689722bb94cc79fb72eabe2de5c7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0ae953a99f831c39c741ec1233f030eb6d6d90/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0ae953a99f831c39c741ec1233f030eb6d6d90/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5f0ae953a99f831c39c741ec1233f030eb6d6d90", "patch": "@@ -1,3 +1,8 @@\n+2004-08-23  Richard Henderson  <rth@redhat.com>\n+\n+\t* trans-const.c (gfc_conv_mpz_to_tree): Use mpz_getlimbn instead\n+\tof going through an intermediate string.  Fix 32/64 int/long bug.\n+\n 2004-08-23  Eric Christopher  <echristo@redhat.com>\n \n \t* trans-types.c (gfc_type_for_mode): Remove VECTOR_TYPE_SUPPORTED_P"}, {"sha": "c2a68b7732a6afa477fc474af93d7e0868d45abc", "filename": "gcc/fortran/trans-const.c", "status": "modified", "additions": 41, "deletions": 49, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0ae953a99f831c39c741ec1233f030eb6d6d90/gcc%2Ffortran%2Ftrans-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0ae953a99f831c39c741ec1233f030eb6d6d90/gcc%2Ffortran%2Ftrans-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-const.c?ref=5f0ae953a99f831c39c741ec1233f030eb6d6d90", "patch": "@@ -161,71 +161,63 @@ gfc_init_constants (void)\n \t\t\t    gfc_option.source);\n }\n \n-#define BITS_PER_HOST_WIDE_INT (8 * sizeof (HOST_WIDE_INT))\n /* Converts a GMP integer into a backend tree node.  */\n tree\n gfc_conv_mpz_to_tree (mpz_t i, int kind)\n {\n-  int val;\n-  tree res;\n   HOST_WIDE_INT high;\n   unsigned HOST_WIDE_INT low;\n-  int negate;\n-  char buff[10];\n-  char *p;\n-  char *q;\n-  int n;\n \n-  /* TODO: could be wrong if sizeof(HOST_WIDE_INT) != SIZEOF (int).  */\n   if (mpz_fits_slong_p (i))\n     {\n-      val = mpz_get_si (i);\n-      res = build_int_cst (gfc_get_int_type (kind),\n-\t\t\t   val, (val < 0) ? (HOST_WIDE_INT)-1 : 0);\n-      return (res);\n+      /* Note that HOST_WIDE_INT is never smaller than long.  */\n+      low = mpz_get_si (i);\n+      high = mpz_sgn (i) < 0 ? -1 : 0;\n     }\n-\n-  n = mpz_sizeinbase (i, 16);\n-  if (n > 8)\n-    q = gfc_getmem (n + 2);\n   else\n-    q = buff;\n-\n-  low = 0;\n-  high = 0;\n-  p = mpz_get_str (q, 16, i);\n-  if (p[0] == '-')\n     {\n-      negate = 1;\n-      p++;\n-    }\n-  else\n-    negate = 0;\n+      /* Note that mp_limb_t can be anywhere from short to long long,\n+\t which gives us a nice variety of cases to choose from.  */\n \n-  while (*p)\n-    {\n-      n = *(p++);\n-      if (n >= '0' && n <= '9')\n-\tn = n - '0';\n-      else if (n >= 'a' && n <= 'z')\n-\tn = n + 10 - 'a';\n-      else if (n >= 'A' && n <= 'Z')\n-\tn = n + 10 - 'A';\n-      else\n-\tabort ();\n+      if (sizeof (mp_limb_t) == sizeof (HOST_WIDE_INT))\n+\t{\n+\t  low = mpz_getlimbn (i, 0);\n+\t  high = mpz_getlimbn (i, 1);\n+\t}\n+      else if (sizeof (mp_limb_t) == 2 * sizeof (HOST_WIDE_INT))\n+\t{\n+\t  mp_limb_t limb0 = mpz_getlimbn (i, 0);\n+\t  int count = (sizeof (mp_limb_t) - sizeof (HOST_WIDE_INT)) * CHAR_BIT;\n+\t  low = limb0;\n+\t  high = limb0 >> count;\n+\t}\n+      else if (sizeof (mp_limb_t) < sizeof (HOST_WIDE_INT))\n+\t{\n+\t  int n, count = sizeof (HOST_WIDE_INT) / sizeof (mp_limb_t);\n+\t  for (low = n = 0; n < count; ++n)\n+\t    {\n+\t      low <<= sizeof (mp_limb_t) * CHAR_BIT;\n+\t      low |= mpz_getlimbn (i, n);\n+\t    }\n+\t  for (high = 0; n < 2*count; ++n)\n+\t    {\n+\t      high <<= sizeof (mp_limb_t) * CHAR_BIT;\n+\t      high |= mpz_getlimbn (i, n);\n+\t    }\n+\t}\n \n-      assert (n >= 0 && n < 16);\n-      high = (high << 4) + (low >> (BITS_PER_HOST_WIDE_INT - 4));\n-      low = (low << 4) + n;\n+      /* By extracting limbs we constructed the absolute value of the\n+\t desired number.  Negate if necessary.  */\n+      if (mpz_sgn (i) < 0)\n+\t{\n+\t  if (low == 0)\n+\t    high = -high;\n+\t  else\n+\t    low = -low, high = ~high;\n+\t}\n     }\n-  res = build_int_cst (gfc_get_int_type (kind), low, high);\n-  if (negate)\n-    res = fold (build1 (NEGATE_EXPR, TREE_TYPE (res), res));\n \n-  if (q != buff)\n-    gfc_free (q);\n-\n-  return res;\n+  return build_int_cst (gfc_get_int_type (kind), low, high);\n }\n \n /* Converts a real constant into backend form.  Uses an intermediate string"}]}