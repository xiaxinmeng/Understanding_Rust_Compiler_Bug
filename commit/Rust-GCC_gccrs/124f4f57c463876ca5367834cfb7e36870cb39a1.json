{"sha": "124f4f57c463876ca5367834cfb7e36870cb39a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI0ZjRmNTdjNDYzODc2Y2E1MzY3ODM0Y2ZiN2UzNjg3MGNiMzlhMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-02-06T11:18:33Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-02-06T11:18:33Z"}, "message": "re PR tree-optimization/89182 ([graphite] ICE in extract_affine, at graphite-sese-to-poly.c:280)\n\n2019-02-06  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/89182\n\t* graphite.h (cached_scalar_evolution_in_region): Declare.\n\t* graphite.c (struct seir_cache_key): New.\n\t(struct sese_scev_hash): Likewise.\n\t(seir_cache): New global.\n\t(cached_scalar_evolution_in_region): New function.\n\t(graphite_transform_loops): Allocate and release seir_cache.\n\t* graphite-isl-ast-to-gimple.c (get_rename_from_scev): Use\n\tcached_scalar_evolution_in_region.\n\t* graphite-scop-detection.c (scop_detection::can_represent_loop):\n\tSimplify.\n\t(scop_detection::graphite_can_represent_expr: Use\n\tcached_scalar_evolution_in_region.\n\t(scop_detection::stmt_simple_for_scop_p): Likewise.\n\t(find_params_in_bb): Likewise.\n\t(gather_bbs::before_dom_children): Likewise.\n\t* graphite-sese-to-poly.c (create_pw_aff_from_tree): Likewise.\n\t(add_loop_constraints): Likewise.\n\n\t* gfortran.dg/graphite/pr89182.f90: New testcase.\n\nFrom-SVN: r268575", "tree": {"sha": "80c2564c887428fb97edbc5883ecd1644548ae39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80c2564c887428fb97edbc5883ecd1644548ae39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/124f4f57c463876ca5367834cfb7e36870cb39a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/124f4f57c463876ca5367834cfb7e36870cb39a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/124f4f57c463876ca5367834cfb7e36870cb39a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/124f4f57c463876ca5367834cfb7e36870cb39a1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cfc30fd17588446c8c54c6e1e77dec2dc18ba0fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfc30fd17588446c8c54c6e1e77dec2dc18ba0fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfc30fd17588446c8c54c6e1e77dec2dc18ba0fb"}], "stats": {"total": 146, "additions": 133, "deletions": 13}, "files": [{"sha": "712e768a353d81ed0893adda986d9a5f33109b1f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/124f4f57c463876ca5367834cfb7e36870cb39a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/124f4f57c463876ca5367834cfb7e36870cb39a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=124f4f57c463876ca5367834cfb7e36870cb39a1", "patch": "@@ -1,3 +1,24 @@\n+2019-02-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/89182\n+\t* graphite.h (cached_scalar_evolution_in_region): Declare.\n+\t* graphite.c (struct seir_cache_key): New.\n+\t(struct sese_scev_hash): Likewise.\n+\t(seir_cache): New global.\n+\t(cached_scalar_evolution_in_region): New function.\n+\t(graphite_transform_loops): Allocate and release seir_cache.\n+\t* graphite-isl-ast-to-gimple.c (get_rename_from_scev): Use\n+\tcached_scalar_evolution_in_region.\n+\t* graphite-scop-detection.c (scop_detection::can_represent_loop):\n+\tSimplify.\n+\t(scop_detection::graphite_can_represent_expr: Use\n+\tcached_scalar_evolution_in_region.\n+\t(scop_detection::stmt_simple_for_scop_p): Likewise.\n+\t(find_params_in_bb): Likewise.\n+\t(gather_bbs::before_dom_children): Likewise.\n+\t* graphite-sese-to-poly.c (create_pw_aff_from_tree): Likewise.\n+\t(add_loop_constraints): Likewise.\n+\n 2019-02-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/89210"}, {"sha": "40d1e8de6ae94b4a7f2e24d6d63d027f2d04286e", "filename": "gcc/graphite-isl-ast-to-gimple.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/124f4f57c463876ca5367834cfb7e36870cb39a1/gcc%2Fgraphite-isl-ast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/124f4f57c463876ca5367834cfb7e36870cb39a1/gcc%2Fgraphite-isl-ast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-isl-ast-to-gimple.c?ref=124f4f57c463876ca5367834cfb7e36870cb39a1", "patch": "@@ -1092,7 +1092,8 @@ tree translate_isl_ast_to_gimple::\n get_rename_from_scev (tree old_name, gimple_seq *stmts, loop_p loop,\n \t\t      vec<tree> iv_map)\n {\n-  tree scev = scalar_evolution_in_region (region->region, loop, old_name);\n+  tree scev = cached_scalar_evolution_in_region (region->region,\n+\t\t\t\t\t\t loop, old_name);\n \n   /* At this point we should know the exact scev for each\n      scalar SSA_NAME used in the scop: all the other scalar"}, {"sha": "45f459a3b783d3ec034ac5f2ef606999fc41bfe8", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/124f4f57c463876ca5367834cfb7e36870cb39a1/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/124f4f57c463876ca5367834cfb7e36870cb39a1/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=124f4f57c463876ca5367834cfb7e36870cb39a1", "patch": "@@ -568,8 +568,6 @@ scop_detection::can_represent_loop (loop_p loop, sese_l scop)\n     && niter_desc.control.no_overflow\n     && (niter = number_of_latch_executions (loop))\n     && !chrec_contains_undetermined (niter)\n-    && !chrec_contains_undetermined (scalar_evolution_in_region (scop,\n-\t\t\t\t\t\t\t\t loop, niter))\n     && graphite_can_represent_expr (scop, loop, niter);\n }\n \n@@ -924,7 +922,7 @@ bool\n scop_detection::graphite_can_represent_expr (sese_l scop, loop_p loop,\n \t\t\t\t\t     tree expr)\n {\n-  tree scev = scalar_evolution_in_region (scop, loop, expr);\n+  tree scev = cached_scalar_evolution_in_region (scop, loop, expr);\n   return graphite_can_represent_scev (scop, scev);\n }\n \n@@ -1061,7 +1059,8 @@ scop_detection::stmt_simple_for_scop_p (sese_l scop, gimple *stmt,\n \tFOR_EACH_SSA_TREE_OPERAND (op, stmt, i, SSA_OP_USE)\n \t  if (scev_analyzable_p (op, scop)\n \t      && chrec_contains_undetermined\n-\t\t   (scalar_evolution_in_region (scop, bb->loop_father, op)))\n+\t\t   (cached_scalar_evolution_in_region (scop,\n+\t\t\t\t\t\t       bb->loop_father, op)))\n \t    {\n \t      DEBUG_PRINT (dp << \"[scop-detection-fail] \"\n \t\t\t   << \"Graphite cannot code-gen stmt:\\n\";\n@@ -1190,10 +1189,10 @@ find_params_in_bb (sese_info_p region, gimple_poly_bb_p gbb)\n   FOR_EACH_VEC_ELT (GBB_CONDITIONS (gbb), i, stmt)\n     {\n       loop_p loop = gimple_bb (stmt)->loop_father;\n-      tree lhs = scalar_evolution_in_region (region->region, loop,\n-\t\t\t\t\t     gimple_cond_lhs (stmt));\n-      tree rhs = scalar_evolution_in_region (region->region, loop,\n-\t\t\t\t\t     gimple_cond_rhs (stmt));\n+      tree lhs = cached_scalar_evolution_in_region (region->region, loop,\n+\t\t\t\t\t\t    gimple_cond_lhs (stmt));\n+      tree rhs = cached_scalar_evolution_in_region (region->region, loop,\n+\t\t\t\t\t\t    gimple_cond_rhs (stmt));\n       gcc_assert (!chrec_contains_undetermined (lhs)\n \t\t  && !chrec_contains_undetermined (rhs));\n \n@@ -1492,8 +1491,8 @@ gather_bbs::before_dom_children (basic_block bb)\n       tree nb_iters = number_of_latch_executions (loop);\n       if (chrec_contains_symbols (nb_iters))\n \t{\n-\t  nb_iters = scalar_evolution_in_region (region->region,\n-\t\t\t\t\t\t loop, nb_iters);\n+\t  nb_iters = cached_scalar_evolution_in_region (region->region,\n+\t\t\t\t\t\t\tloop, nb_iters);\n \t  scan_tree_for_params (region, nb_iters);\n \t}\n     }"}, {"sha": "08f17db2301411631e1604c5314c723d71b9f0d8", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/124f4f57c463876ca5367834cfb7e36870cb39a1/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/124f4f57c463876ca5367834cfb7e36870cb39a1/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=124f4f57c463876ca5367834cfb7e36870cb39a1", "patch": "@@ -328,7 +328,7 @@ create_pw_aff_from_tree (poly_bb_p pbb, loop_p loop, tree t)\n {\n   scop_p scop = PBB_SCOP (pbb);\n \n-  t = scalar_evolution_in_region (scop->scop_info->region, loop, t);\n+  t = cached_scalar_evolution_in_region (scop->scop_info->region, loop, t);\n \n   gcc_assert (!chrec_contains_undetermined (t));\n   gcc_assert (!automatically_generated_chrec_p (t));\n@@ -782,7 +782,7 @@ add_loop_constraints (scop_p scop, __isl_take isl_set *domain, loop_p loop,\n     }\n   /* loop_i <= expr_nb_iters */\n   gcc_assert (!chrec_contains_undetermined (nb_iters));\n-  nb_iters = scalar_evolution_in_region (region, loop, nb_iters);\n+  nb_iters = cached_scalar_evolution_in_region (region, loop, nb_iters);\n   gcc_assert (!chrec_contains_undetermined (nb_iters));\n \n   isl_pw_aff *aff_nb_iters = extract_affine (scop, nb_iters,"}, {"sha": "67202e276e24850a86bc13414e12b62259cdede1", "filename": "gcc/graphite.c", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/124f4f57c463876ca5367834cfb7e36870cb39a1/gcc%2Fgraphite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/124f4f57c463876ca5367834cfb7e36870cb39a1/gcc%2Fgraphite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite.c?ref=124f4f57c463876ca5367834cfb7e36870cb39a1", "patch": "@@ -210,6 +210,63 @@ print_graphite_statistics (FILE* file, vec<scop_p> scops)\n     print_graphite_scop_statistics (file, scop);\n }\n \n+struct seir_cache_key\n+{\n+  hashval_t hash;\n+  int entry_dest;\n+  int exit_src;\n+  int loop_num;\n+  tree expr;\n+};\n+\n+struct sese_scev_hash : typed_noop_remove <seir_cache_key>\n+{\n+  typedef seir_cache_key value_type;\n+  typedef seir_cache_key compare_type;\n+  static hashval_t hash (const seir_cache_key &key) { return key.hash; }\n+  static bool\n+  equal (const seir_cache_key &key1, const seir_cache_key &key2)\n+  {\n+    return (key1.hash == key2.hash\n+\t    && key1.entry_dest == key2.entry_dest\n+\t    && key1.exit_src == key2.exit_src\n+\t    && key1.loop_num == key2.loop_num\n+\t    && operand_equal_p (key1.expr, key2.expr, 0));\n+  }\n+  static void mark_deleted (seir_cache_key &key) { key.expr = NULL_TREE; }\n+  static void mark_empty (seir_cache_key &key) { key.entry_dest = 0; }\n+  static bool is_deleted (const seir_cache_key &key) { return !key.expr; }\n+  static bool is_empty (const seir_cache_key &key) { return key.entry_dest == 0; }\n+};\n+\n+static hash_map<sese_scev_hash, tree> *seir_cache;\n+\n+/* Same as scalar_evolution_in_region but caches results so we avoid\n+   re-computing evolutions during transform phase.  */\n+\n+tree\n+cached_scalar_evolution_in_region (const sese_l &region, loop_p loop,\n+\t\t\t\t   tree expr)\n+{\n+  seir_cache_key key;\n+  key.entry_dest = region.entry->dest->index;\n+  key.exit_src = region.exit->src->index;\n+  key.loop_num = loop->num;\n+  key.expr = expr;\n+  inchash::hash hstate (0);\n+  hstate.add_int (key.entry_dest);\n+  hstate.add_int (key.exit_src);\n+  hstate.add_int (key.loop_num);\n+  inchash::add_expr (key.expr, hstate);\n+  key.hash = hstate.end ();\n+  \n+  bool existed;\n+  tree &chrec = seir_cache->get_or_insert (key, &existed);\n+  if (!existed)\n+    chrec = scalar_evolution_in_region (region, loop, expr);\n+  return chrec;\n+}\n+\n /* Deletes all scops in SCOPS.  */\n \n static void\n@@ -385,6 +442,8 @@ graphite_transform_loops (void)\n       print_loops (dump_file, 3);\n     }\n \n+  seir_cache = new hash_map<sese_scev_hash, tree>;\n+\n   calculate_dominance_info (CDI_POST_DOMINATORS);\n   build_scops (&scops);\n   free_dominance_info (CDI_POST_DOMINATORS);\n@@ -420,6 +479,9 @@ graphite_transform_loops (void)\n \t  }\n       }\n \n+  delete seir_cache;\n+  seir_cache = NULL;\n+\n   if (changed)\n     {\n       mark_virtual_operands_for_renaming (cfun);"}, {"sha": "dc4b15d9caf99368f67569aa21506c3f09f26096", "filename": "gcc/graphite.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/124f4f57c463876ca5367834cfb7e36870cb39a1/gcc%2Fgraphite.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/124f4f57c463876ca5367834cfb7e36870cb39a1/gcc%2Fgraphite.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite.h?ref=124f4f57c463876ca5367834cfb7e36870cb39a1", "patch": "@@ -460,6 +460,7 @@ carries_deps (__isl_keep isl_union_map *schedule,\n extern bool build_poly_scop (scop_p);\n extern bool graphite_regenerate_ast_isl (scop_p);\n extern void build_scops (vec<scop_p> *);\n+extern tree cached_scalar_evolution_in_region (const sese_l &, loop_p, tree);\n extern void dot_all_sese (FILE *, vec<sese_l> &);\n extern void dot_sese (sese_l &);\n extern void dot_cfg ();"}, {"sha": "5763b9b57dc7bd7dfe831f24ce738a2a1d89d0ae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/124f4f57c463876ca5367834cfb7e36870cb39a1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/124f4f57c463876ca5367834cfb7e36870cb39a1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=124f4f57c463876ca5367834cfb7e36870cb39a1", "patch": "@@ -1,3 +1,8 @@\n+2019-02-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/89182\n+\t* gfortran.dg/graphite/pr89182.f90: New testcase.\n+\n 2019-02-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/89211"}, {"sha": "73ca735ef5f552fffb65de58043fccbf5e9838ee", "filename": "gcc/testsuite/gfortran.dg/graphite/pr89182.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/124f4f57c463876ca5367834cfb7e36870cb39a1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr89182.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/124f4f57c463876ca5367834cfb7e36870cb39a1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr89182.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr89182.f90?ref=124f4f57c463876ca5367834cfb7e36870cb39a1", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-O3 -fgraphite-identity --param max-completely-peeled-insns=8\" }\n+\n+MODULE hfx_contract_block\n+  INTEGER, PARAMETER :: dp=8\n+CONTAINS\n+  SUBROUTINE contract_block(mb_max,mc_max,kbc,ks_bc)\n+    REAL(KIND=dp) :: kbc(mb_max*mc_max), ks_bc\n+    CALL block_1_2_1_2(kbc,ks_bc)\n+    CALL block_1_2_1_3(kbc,ks_bc)\n+    CALL block_1_2_1_3(kbc,ks_bc)\n+  END SUBROUTINE contract_block\n+  SUBROUTINE block_1_2_1_2(kbc,ks_bc)\n+    REAL(KIND=dp) :: kbc(2*1), ks_bc\n+    DO mc = 1,2\n+       DO mb = 1,2\n+          kbc((mc-1)*2+mb) = ks_bc\n+       END DO\n+    END DO\n+  END SUBROUTINE block_1_2_1_2\n+  SUBROUTINE block_1_2_1_3(kbc,ks_bc)\n+    REAL(KIND=dp) :: kbc(2*1), ks_bc\n+    DO md = 1,3\n+       DO mc = 1,1\n+          DO mb = 1,2\n+             kbc((mc-1)*2+mb) = kbc((mc-1)*2+mb) - ks_bc\n+          END DO\n+       END DO\n+    END DO\n+  END SUBROUTINE block_1_2_1_3\n+END MODULE hfx_contract_block"}]}