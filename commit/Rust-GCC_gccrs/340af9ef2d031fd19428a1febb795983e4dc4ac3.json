{"sha": "340af9ef2d031fd19428a1febb795983e4dc4ac3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQwYWY5ZWYyZDAzMWZkMTk0MjhhMWZlYmI3OTU5ODNlNGRjNGFjMw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-12-24T12:35:16Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-12-24T12:35:16Z"}, "message": "Update comments to clarify typing rules.\n\nFrom-SVN: r10844", "tree": {"sha": "95030ed9d45656ff26bb3a46f87f238b38d2a799", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95030ed9d45656ff26bb3a46f87f238b38d2a799"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/340af9ef2d031fd19428a1febb795983e4dc4ac3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/340af9ef2d031fd19428a1febb795983e4dc4ac3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/340af9ef2d031fd19428a1febb795983e4dc4ac3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/340af9ef2d031fd19428a1febb795983e4dc4ac3/comments", "author": null, "committer": null, "parents": [{"sha": "0ae4004537614dd4d7b06fc7cfa067a59454b2cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ae4004537614dd4d7b06fc7cfa067a59454b2cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ae4004537614dd4d7b06fc7cfa067a59454b2cd"}], "stats": {"total": 38, "additions": 15, "deletions": 23}, "files": [{"sha": "971e683850482988d8714928ac6d7ba90bb391ba", "filename": "gcc/tree.def", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/340af9ef2d031fd19428a1febb795983e4dc4ac3/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/340af9ef2d031fd19428a1febb795983e4dc4ac3/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=340af9ef2d031fd19428a1febb795983e4dc4ac3", "patch": "@@ -371,13 +371,14 @@ DEFTREECODE (ARRAY_REF, \"array_ref\", \"r\", 2)\n    made out of a chain of TREE_LIST nodes.  */\n DEFTREECODE (CONSTRUCTOR, \"constructor\", \"e\", 2)\n \n-/* The expression types are mostly straightforward,\n-   with the fourth argument of DEFTREECODE saying\n-   how many operands there are.\n-   Unless otherwise specified, the operands are expressions.  */\n+/* The expression types are mostly straightforward, with the fourth argument\n+   of DEFTREECODE saying how many operands there are.\n+   Unless otherwise specified, the operands are expressions and the\n+   types of all the operands and the expression must all be the same.  */\n \n /* Contains two expressions to compute, one followed by the other.\n-   the first value is ignored.  The second one's value is used.  */\n+   the first value is ignored.  The second one's value is used.  The\n+   type of the first expression need not agree with the other types.  */\n DEFTREECODE (COMPOUND_EXPR, \"compound_expr\", \"e\", 2)\n \n /* Assignment expression.  Operand 0 is the what to set; 1, the new value.  */\n@@ -395,7 +396,9 @@ DEFTREECODE (TARGET_EXPR, \"target_expr\", \"e\", 3)\n /* Conditional expression ( ... ? ... : ...  in C).\n    Operand 0 is the condition.\n    Operand 1 is the then-value.\n-   Operand 2 is the else-value.  */\n+   Operand 2 is the else-value.\n+   Operand 0 may be of any types, but the types of operands 1 and 2\n+   must be the same and the same as the the of this expression.  */\n DEFTREECODE (COND_EXPR, \"cond_expr\", \"e\", 3)\n \n /* Declare local variables, including making RTL and allocating space.\n@@ -507,17 +510,12 @@ DEFTREECODE (PLACEHOLDER_EXPR, \"placeholder_expr\", \"x\", 0)\n    operand 0.  */\n DEFTREECODE (WITH_RECORD_EXPR, \"with_record_expr\", \"e\", 2)\n \n-/* Simple arithmetic.  Operands must have the same machine mode\n-   and the value shares that mode.  */\n+/* Simple arithmetic.  */\n DEFTREECODE (PLUS_EXPR, \"plus_expr\", \"2\", 2)\n DEFTREECODE (MINUS_EXPR, \"minus_expr\", \"2\", 2)\n DEFTREECODE (MULT_EXPR, \"mult_expr\", \"2\", 2)\n \n /* Division for integer result that rounds the quotient toward zero.  */\n-/* Operands must have the same machine mode.\n-   In principle they may be real, but that is not currently supported.\n-   The result is always fixed point, and it has the same type as the\n-   operands if they are fixed point.   */\n DEFTREECODE (TRUNC_DIV_EXPR, \"trunc_div_expr\", \"2\", 2)\n \n /* Division for integer result that rounds the quotient toward infinity.  */\n@@ -535,10 +533,7 @@ DEFTREECODE (CEIL_MOD_EXPR, \"ceil_mod_expr\", \"2\", 2)\n DEFTREECODE (FLOOR_MOD_EXPR, \"floor_mod_expr\", \"2\", 2)\n DEFTREECODE (ROUND_MOD_EXPR, \"round_mod_expr\", \"2\", 2)\n \n-/* Division for real result.  The two operands must have the same type.\n-   In principle they could be integers, but currently only real\n-   operands are supported.  The result must have the same type\n-   as the operands.  */\n+/* Division for real result.  */\n DEFTREECODE (RDIV_EXPR, \"rdiv_expr\", \"2\", 2)\n \n /* Division which is not supposed to need rounding.\n@@ -562,7 +557,7 @@ DEFTREECODE (FLOAT_EXPR, \"float_expr\", \"1\", 1)\n    constraints on value type are not known yet.  */\n DEFTREECODE (EXPON_EXPR, \"expon_expr\", \"2\", 2)\n \n-/* Unary negation.  Value has same type as operand.  */\n+/* Unary negation.  */\n DEFTREECODE (NEGATE_EXPR, \"negate_expr\", \"1\", 1)\n \n DEFTREECODE (MIN_EXPR, \"min_expr\", \"2\", 2)\n@@ -574,8 +569,7 @@ DEFTREECODE (FFS_EXPR, \"ffs_expr\", \"1\", 1)\n    Shift is supposed to mean logical shift if done on an\n    unsigned type, arithmetic shift on a signed type.\n    The second operand is the number of bits to\n-   shift by, and must always have mode SImode.\n-   The result has the same mode as the first operand.  */\n+   shift by; it need not be the same type as the first operand and result.  */\n DEFTREECODE (LSHIFT_EXPR, \"alshift_expr\", \"2\", 2)\n DEFTREECODE (RSHIFT_EXPR, \"arshift_expr\", \"2\", 2)\n DEFTREECODE (LROTATE_EXPR, \"lrotate_expr\", \"2\", 2)\n@@ -621,7 +615,7 @@ DEFTREECODE (RANGE_EXPR, \"range_expr\", \"2\", 2)\n \n /* Represents a conversion of type of a value.\n    All conversions, including implicit ones, must be\n-   represented by CONVERT_EXPR nodes.  */\n+   represented by CONVERT_EXPR or NOP_EXPR nodes.  */\n DEFTREECODE (CONVERT_EXPR, \"convert_expr\", \"1\", 1)\n \n /* Represents a conversion expected to require no code to be generated.  */\n@@ -657,8 +651,7 @@ DEFTREECODE (ENTRY_VALUE_EXPR, \"entry_value_expr\", \"e\", 1)\n    returns a complex value of the corresponding complex type.  */\n DEFTREECODE (COMPLEX_EXPR, \"complex_expr\", \"2\", 2)\n \n-/* Complex conjugate of operand.  Used only on complex types.\n-   The value has the same type as the operand.  */\n+/* Complex conjugate of operand.  Used only on complex types.  */\n DEFTREECODE (CONJ_EXPR, \"conj_expr\", \"1\", 1)\n \n /* Used only on an operand of complex type, these return\n@@ -705,6 +698,5 @@ DEFTREECODE (LOOP_EXPR, \"loop_expr\", \"s\", 1)\n /*\n Local variables:\n mode:c\n-version-control: t\n End:\n */"}]}