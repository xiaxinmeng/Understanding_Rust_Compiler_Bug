{"sha": "203942b8af64926d787b4a545184866f9572978d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAzOTQyYjhhZjY0OTI2ZDc4N2I0YTU0NTE4NDg2NmY5NTcyOTc4ZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2018-08-22T12:59:08Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-08-22T12:59:08Z"}, "message": "Make the vectoriser drop to strided accesses for stores with gaps\n\nWe could vectorise:\n\n     for (...)\n       {\n         a[0] = ...;\n         a[1] = ...;\n         a[2] = ...;\n         a[3] = ...;\n         a += stride;\n       }\n\n(including the case when stride == 8) but not:\n\n     for (...)\n       {\n         a[0] = ...;\n         a[1] = ...;\n         a[2] = ...;\n         a[3] = ...;\n         a += 8;\n       }\n\n(where the stride is always 8).  The former was treated as a \"grouped\nand strided\" store, while the latter was treated as a grouped store\nwith gaps, which we don't support.\n\nThis patch makes us treat groups of stores with gaps at the end as\nstrided groups too.  I tried to go through all uses of STMT_VINFO_STRIDED_P\nand all vector uses of DR_STEP to see whether there were any hard-baked\nassumptions, but couldn't see any.  I wondered whether we should relax:\n\n  /* We do not have to consider dependences between accesses that belong\n     to the same group, unless the stride could be smaller than the\n     group size.  */\n  if (DR_GROUP_FIRST_ELEMENT (stmtinfo_a)\n      && (DR_GROUP_FIRST_ELEMENT (stmtinfo_a)\n          == DR_GROUP_FIRST_ELEMENT (stmtinfo_b))\n      && !STMT_VINFO_STRIDED_P (stmtinfo_a))\n    return false;\n\nfor cases in which the step is constant and the absolute step is known\nto be greater than the group size, but data dependence analysis should\nalready return chrec_known for those cases.\n\nThe new test is a version of vect-avg-15.c with the variable step\nreplaced by a constant one.\n\nA natural follow-on would be to do the same for groups with gaps in\nthe middle:\n\n          /* Check that the distance between two accesses is equal to the type\n             size. Otherwise, we have gaps.  */\n          diff = (TREE_INT_CST_LOW (DR_INIT (data_ref))\n                  - TREE_INT_CST_LOW (prev_init)) / type_size;\n          if (diff != 1)\n            {\n              [...]\n              if (DR_IS_WRITE (data_ref))\n                {\n                  if (dump_enabled_p ())\n                    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n                                     \"interleaved store with gaps\\n\");\n                  return false;\n                }\n\nBut I think we should do that separately and see what the fallout\nfrom this change is first.\n\n2018-08-22  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vect-data-refs.c (vect_analyze_group_access_1): Convert\n\tgrouped stores with gaps to a strided group.\n\ngcc/testsuite/\n\t* gcc.dg/vect/vect-avg-16.c: New test.\n\t* gcc.dg/vect/slp-37.c: Expect the loop to be vectorized.\n\t* gcc.dg/vect/vect-strided-u8-i8-gap4.c,\n\t* gcc.dg/vect/vect-strided-u8-i8-gap4-big-array.c: Likewise for\n\tthe second loop in main1.\n\nFrom-SVN: r263772", "tree": {"sha": "ffad8552037dadd3226d870423889ab2c571d625", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffad8552037dadd3226d870423889ab2c571d625"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/203942b8af64926d787b4a545184866f9572978d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/203942b8af64926d787b4a545184866f9572978d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/203942b8af64926d787b4a545184866f9572978d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/203942b8af64926d787b4a545184866f9572978d/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3ad3b3ac8c3eae606897ceba5811760f030fdac1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ad3b3ac8c3eae606897ceba5811760f030fdac1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ad3b3ac8c3eae606897ceba5811760f030fdac1"}], "stats": {"total": 92, "additions": 77, "deletions": 15}, "files": [{"sha": "6fdb1b62d2d099f3e97ad347dd20fb3c1e486e8a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203942b8af64926d787b4a545184866f9572978d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203942b8af64926d787b4a545184866f9572978d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=203942b8af64926d787b4a545184866f9572978d", "patch": "@@ -1,3 +1,8 @@\n+2018-08-22  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-data-refs.c (vect_analyze_group_access_1): Convert\n+\tgrouped stores with gaps to a strided group.\n+\n 2018-08-22  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vect-stmts.c (get_group_load_store_type)"}, {"sha": "9c624ff0739fd705b9af829ee38cc52b554c1ec0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203942b8af64926d787b4a545184866f9572978d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203942b8af64926d787b4a545184866f9572978d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=203942b8af64926d787b4a545184866f9572978d", "patch": "@@ -1,3 +1,11 @@\n+2018-08-22  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/vect-avg-16.c: New test.\n+\t* gcc.dg/vect/slp-37.c: Expect the loop to be vectorized.\n+\t* gcc.dg/vect/vect-strided-u8-i8-gap4.c,\n+\t* gcc.dg/vect/vect-strided-u8-i8-gap4-big-array.c: Likewise for\n+\tthe second loop in main1.\n+\n 2018-08-22  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* gcc.dg/lto/pr85248_0.c (test_alias):"}, {"sha": "54a5e18c51fffd9432466cb5da84e5492c2f7a78", "filename": "gcc/testsuite/gcc.dg/vect/slp-37.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203942b8af64926d787b4a545184866f9572978d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-37.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203942b8af64926d787b4a545184866f9572978d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-37.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-37.c?ref=203942b8af64926d787b4a545184866f9572978d", "patch": "@@ -17,8 +17,8 @@ foo1 (s1 *arr)\n   int i;\n   s1 *ptr = arr;\n \n-  /* Different constant types - not SLPable.  The group size is not power of 2,\n-     interleaving is not supported either.  */\n+  /* Vectorized as a strided SLP pair of accesses to <a, b> and a single\n+     strided access to c.  */\n   for (i = 0; i < N; i++)\n     {\n       ptr->a = 6;\n@@ -58,6 +58,5 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\"  } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\"  } } */\n-  \n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\"  } } */"}, {"sha": "f3e3839a879b6646aba6237e55e2dcd943eac168", "filename": "gcc/testsuite/gcc.dg/vect/vect-avg-16.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203942b8af64926d787b4a545184866f9572978d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203942b8af64926d787b4a545184866f9572978d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-avg-16.c?ref=203942b8af64926d787b4a545184866f9572978d", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-additional-options \"-O3\" } */\n+/* { dg-require-effective-target vect_int } */\n+\n+#include \"tree-vect.h\"\n+\n+#define N 80\n+\n+void __attribute__ ((noipa))\n+f (signed char *restrict a, signed char *restrict b,\n+   signed char *restrict c, int n)\n+{\n+  for (int j = 0; j < n; ++j)\n+    {\n+      for (int i = 0; i < 16; ++i)\n+\ta[i] = (b[i] + c[i]) >> 1;\n+      a += 20;\n+      b += 20;\n+      c += 20;\n+    }\n+}\n+\n+#define BASE1 -126\n+#define BASE2 -42\n+\n+signed char a[N], b[N], c[N];\n+\n+int\n+main (void)\n+{\n+  check_vect ();\n+\n+  for (int i = 0; i < N; ++i)\n+    {\n+      a[i] = i;\n+      b[i] = BASE1 + i * 3;\n+      c[i] = BASE2 + i * 2;\n+      asm volatile (\"\" ::: \"memory\");\n+    }\n+  f (a, b, c, N / 20);\n+  for (int i = 0; i < N; ++i)\n+    {\n+      int d = (BASE1 + BASE2 + i * 5) >> 1;\n+      if (a[i] != (i % 20 < 16 ? d : i))\n+\t__builtin_abort ();\n+    }\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vect_recog_average_pattern: detected\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump {\\.AVG_FLOOR} \"vect\" { target vect_avg_qi } } } */\n+/* { dg-final { scan-tree-dump \"Loop contains only SLP stmts\" \"vect\" { target vect_avg_qi } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_avg_qi } } } */"}, {"sha": "b5eb87f4b96e1a577930654f4b1709024256e90e", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u8-i8-gap4-big-array.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203942b8af64926d787b4a545184866f9572978d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap4-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203942b8af64926d787b4a545184866f9572978d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap4-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap4-big-array.c?ref=203942b8af64926d787b4a545184866f9572978d", "patch": "@@ -55,7 +55,7 @@ main1 (s *arr)\n    }\n \n   ptr = arr;\n-  /* Not vectorizable: gap in store.  */\n+  /* Vectorized as a strided SLP pair.  */\n   for (i = 0; i < N; i++)\n     {\n       res[i].a = ptr->b;\n@@ -110,5 +110,4 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_strided8 } } } */\n-\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" { target vect_strided8 } } } */"}, {"sha": "f1d05a5aaf9f6885b921c5ae3370d9c17795ff82", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u8-i8-gap4.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203942b8af64926d787b4a545184866f9572978d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203942b8af64926d787b4a545184866f9572978d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap4.c?ref=203942b8af64926d787b4a545184866f9572978d", "patch": "@@ -53,7 +53,7 @@ main1 (s *arr)\n    }\n \n   ptr = arr;\n-  /* Not vectorizable: gap in store. */\n+  /* Vectorized as a strided SLP pair.  */\n   for (i = 0; i < N; i++)\n     { \n       res[i].a = ptr->b;\n@@ -97,5 +97,4 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_strided8 } } } */\n-  \n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" { target vect_strided8 } } } */"}, {"sha": "e0d05333b4576abdf20a2c614f99662449edf0bb", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203942b8af64926d787b4a545184866f9572978d/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203942b8af64926d787b4a545184866f9572978d/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=203942b8af64926d787b4a545184866f9572978d", "patch": "@@ -2633,10 +2633,8 @@ vect_analyze_group_access_1 (dr_vec_info *dr_info)\n       if (groupsize != count\n \t  && !DR_IS_READ (dr))\n         {\n-\t  if (dump_enabled_p ())\n-\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t     \"interleaved store with gaps\\n\");\n-\t  return false;\n+\t  groupsize = count;\n+\t  STMT_VINFO_STRIDED_P (stmt_info) = true;\n \t}\n \n       /* If there is a gap after the last load in the group it is the\n@@ -2652,6 +2650,8 @@ vect_analyze_group_access_1 (dr_vec_info *dr_info)\n \t\t\t   \"Detected interleaving \");\n \t  if (DR_IS_READ (dr))\n \t    dump_printf (MSG_NOTE, \"load \");\n+\t  else if (STMT_VINFO_STRIDED_P (stmt_info))\n+\t    dump_printf (MSG_NOTE, \"strided store \");\n \t  else\n \t    dump_printf (MSG_NOTE, \"store \");\n \t  dump_printf (MSG_NOTE, \"of size %u starting with \","}]}