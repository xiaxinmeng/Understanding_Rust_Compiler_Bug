{"sha": "400cfcf50e5aeae792e8ef39a743b1cb6fafedd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAwY2ZjZjUwZTVhZWFlNzkyZThlZjM5YTc0M2IxY2I2ZmFmZWRkNQ==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2010-07-03T00:46:51Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2010-07-03T00:46:51Z"}, "message": "re PR target/43703 (Unexpected floating point precision loss due to ARM NEON autovectorization)\n\n2010-07-02  Julian Brown  <julian@codesourcery.com>\n\t    Sandra Loosemore <sandra@codesourcery.com>\n\n\tPR target/43703\n\n\tgcc/\n\t* config/arm/vec-common.md (add<mode>3, sub<mode>3, smin<mode>3)\n\t(smax<mode>3): Disable for NEON float modes when\n\tflag_unsafe_math_optimizations is false.\n\t* config/arm/neon.md (*add<mode>3_neon, *sub<mode>3_neon)\n\t(*mul<mode>3_neon)\n\t(mul<mode>3add<mode>_neon, mul<mode>3neg<mode>add<mode>_neon)\n\t(reduc_splus_<mode>, reduc_smin_<mode>, reduc_smax_<mode>): Disable\n\tfor NEON float modes when flag_unsafe_math_optimizations is false.\n\t(quad_halves_<code>v4sf): Only enable if flag_unsafe_math_optimizations\n\tis true.\n\t* doc/invoke.texi (ARM Options): Add note about floating point\n\tvectorization requiring -funsafe-math-optimizations.\n\n\tgcc/testsuite/\n\t* gcc.dg/vect/vect.exp: Add -ffast-math for NEON.\n\t* gcc.dg/vect/vect-reduc-6.c: Add XFAIL for NEON.\n\n\n\nCo-Authored-By: Sandra Loosemore <sandra@codesourcery.com>\n\nFrom-SVN: r161763", "tree": {"sha": "9f14cb8f4c3701b249e5dd7502eece5a6c4374e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f14cb8f4c3701b249e5dd7502eece5a6c4374e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/400cfcf50e5aeae792e8ef39a743b1cb6fafedd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/400cfcf50e5aeae792e8ef39a743b1cb6fafedd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/400cfcf50e5aeae792e8ef39a743b1cb6fafedd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/400cfcf50e5aeae792e8ef39a743b1cb6fafedd5/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bab53516d0a58120f1d3b24aabc09a3d7e6443aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bab53516d0a58120f1d3b24aabc09a3d7e6443aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bab53516d0a58120f1d3b24aabc09a3d7e6443aa"}], "stats": {"total": 81, "additions": 63, "deletions": 18}, "files": [{"sha": "075139a0ee10d5c7352e6185dc57743abe6586b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400cfcf50e5aeae792e8ef39a743b1cb6fafedd5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400cfcf50e5aeae792e8ef39a743b1cb6fafedd5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=400cfcf50e5aeae792e8ef39a743b1cb6fafedd5", "patch": "@@ -1,3 +1,21 @@\n+2010-07-02  Julian Brown  <julian@codesourcery.com>\n+\t    Sandra Loosemore <sandra@codesourcery.com>\n+\n+\tPR target/43703\n+\n+\t* config/arm/vec-common.md (add<mode>3, sub<mode>3, smin<mode>3)\n+\t(smax<mode>3): Disable for NEON float modes when\n+\tflag_unsafe_math_optimizations is false.\n+\t* config/arm/neon.md (*add<mode>3_neon, *sub<mode>3_neon)\n+\t(*mul<mode>3_neon)\n+\t(mul<mode>3add<mode>_neon, mul<mode>3neg<mode>add<mode>_neon)\n+\t(reduc_splus_<mode>, reduc_smin_<mode>, reduc_smax_<mode>): Disable\n+\tfor NEON float modes when flag_unsafe_math_optimizations is false.\n+\t(quad_halves_<code>v4sf): Only enable if flag_unsafe_math_optimizations\n+\tis true.\n+\t* doc/invoke.texi (ARM Options): Add note about floating point\n+\tvectorization requiring -funsafe-math-optimizations.\n+\n 2010-07-02  Sandra Loosemore  <sandra@codesourcery.com>\n \t    Julian Brown  <julian@codesourcery.com>\n "}, {"sha": "08b6463d782043d69a846dbe6a89dc6d67b282c1", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400cfcf50e5aeae792e8ef39a743b1cb6fafedd5/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400cfcf50e5aeae792e8ef39a743b1cb6fafedd5/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=400cfcf50e5aeae792e8ef39a743b1cb6fafedd5", "patch": "@@ -819,7 +819,7 @@\n   [(set (match_operand:VDQ 0 \"s_register_operand\" \"=w\")\n         (plus:VDQ (match_operand:VDQ 1 \"s_register_operand\" \"w\")\n \t\t  (match_operand:VDQ 2 \"s_register_operand\" \"w\")))]\n-  \"TARGET_NEON\"\n+  \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\"\n   \"vadd.<V_if_elem>\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n   [(set (attr \"neon_type\")\n       (if_then_else (ne (symbol_ref \"<Is_float_mode>\") (const_int 0))\n@@ -853,7 +853,7 @@\n   [(set (match_operand:VDQ 0 \"s_register_operand\" \"=w\")\n         (minus:VDQ (match_operand:VDQ 1 \"s_register_operand\" \"w\")\n                    (match_operand:VDQ 2 \"s_register_operand\" \"w\")))]\n-  \"TARGET_NEON\"\n+  \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\"\n   \"vsub.<V_if_elem>\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n   [(set (attr \"neon_type\")\n       (if_then_else (ne (symbol_ref \"<Is_float_mode>\") (const_int 0))\n@@ -888,7 +888,7 @@\n   [(set (match_operand:VDQ 0 \"s_register_operand\" \"=w\")\n         (mult:VDQ (match_operand:VDQ 1 \"s_register_operand\" \"w\")\n                   (match_operand:VDQ 2 \"s_register_operand\" \"w\")))]\n-  \"TARGET_NEON\"\n+  \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\"\n   \"vmul.<V_if_elem>\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n   [(set (attr \"neon_type\")\n       (if_then_else (ne (symbol_ref \"<Is_float_mode>\") (const_int 0))\n@@ -910,7 +910,7 @@\n         (plus:VDQ (mult:VDQ (match_operand:VDQ 2 \"s_register_operand\" \"w\")\n                             (match_operand:VDQ 3 \"s_register_operand\" \"w\"))\n \t\t  (match_operand:VDQ 1 \"s_register_operand\" \"0\")))]\n-  \"TARGET_NEON\"\n+  \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\"\n   \"vmla.<V_if_elem>\\t%<V_reg>0, %<V_reg>2, %<V_reg>3\"\n   [(set (attr \"neon_type\")\n       (if_then_else (ne (symbol_ref \"<Is_float_mode>\") (const_int 0))\n@@ -932,7 +932,7 @@\n         (minus:VDQ (match_operand:VDQ 1 \"s_register_operand\" \"0\")\n                    (mult:VDQ (match_operand:VDQ 2 \"s_register_operand\" \"w\")\n                              (match_operand:VDQ 3 \"s_register_operand\" \"w\"))))]\n-  \"TARGET_NEON\"\n+  \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\"\n   \"vmls.<V_if_elem>\\t%<V_reg>0, %<V_reg>2, %<V_reg>3\"\n   [(set (attr \"neon_type\")\n       (if_then_else (ne (symbol_ref \"<Is_float_mode>\") (const_int 0))\n@@ -1361,7 +1361,7 @@\n                            (parallel [(const_int 0) (const_int 1)]))\n           (vec_select:V2SF (match_dup 1)\n                            (parallel [(const_int 2) (const_int 3)]))))]\n-  \"TARGET_NEON\"\n+  \"TARGET_NEON && flag_unsafe_math_optimizations\"\n   \"<VQH_mnem>.f32\\t%P0, %e1, %f1\"\n   [(set_attr \"vqh_mnem\" \"<VQH_mnem>\")\n    (set (attr \"neon_type\")\n@@ -1496,7 +1496,7 @@\n (define_expand \"reduc_splus_<mode>\"\n   [(match_operand:VD 0 \"s_register_operand\" \"\")\n    (match_operand:VD 1 \"s_register_operand\" \"\")]\n-  \"TARGET_NEON\"\n+  \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\"\n {\n   neon_pairwise_reduce (operands[0], operands[1], <MODE>mode,\n \t\t\t&gen_neon_vpadd_internal<mode>);\n@@ -1506,7 +1506,7 @@\n (define_expand \"reduc_splus_<mode>\"\n   [(match_operand:VQ 0 \"s_register_operand\" \"\")\n    (match_operand:VQ 1 \"s_register_operand\" \"\")]\n-  \"TARGET_NEON\"\n+  \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\"\n {\n   rtx step1 = gen_reg_rtx (<V_HALF>mode);\n   rtx res_d = gen_reg_rtx (<V_HALF>mode);\n@@ -1541,7 +1541,7 @@\n (define_expand \"reduc_smin_<mode>\"\n   [(match_operand:VD 0 \"s_register_operand\" \"\")\n    (match_operand:VD 1 \"s_register_operand\" \"\")]\n-  \"TARGET_NEON\"\n+  \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\"\n {\n   neon_pairwise_reduce (operands[0], operands[1], <MODE>mode,\n \t\t\t&gen_neon_vpsmin<mode>);\n@@ -1551,7 +1551,7 @@\n (define_expand \"reduc_smin_<mode>\"\n   [(match_operand:VQ 0 \"s_register_operand\" \"\")\n    (match_operand:VQ 1 \"s_register_operand\" \"\")]\n-  \"TARGET_NEON\"\n+  \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\"\n {\n   rtx step1 = gen_reg_rtx (<V_HALF>mode);\n   rtx res_d = gen_reg_rtx (<V_HALF>mode);\n@@ -1566,7 +1566,7 @@\n (define_expand \"reduc_smax_<mode>\"\n   [(match_operand:VD 0 \"s_register_operand\" \"\")\n    (match_operand:VD 1 \"s_register_operand\" \"\")]\n-  \"TARGET_NEON\"\n+  \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\"\n {\n   neon_pairwise_reduce (operands[0], operands[1], <MODE>mode,\n \t\t\t&gen_neon_vpsmax<mode>);\n@@ -1576,7 +1576,7 @@\n (define_expand \"reduc_smax_<mode>\"\n   [(match_operand:VQ 0 \"s_register_operand\" \"\")\n    (match_operand:VQ 1 \"s_register_operand\" \"\")]\n-  \"TARGET_NEON\"\n+  \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\"\n {\n   rtx step1 = gen_reg_rtx (<V_HALF>mode);\n   rtx res_d = gen_reg_rtx (<V_HALF>mode);"}, {"sha": "b724a580cc39a3053ca4aff284550350e16bbc62", "filename": "gcc/config/arm/vec-common.md", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400cfcf50e5aeae792e8ef39a743b1cb6fafedd5/gcc%2Fconfig%2Farm%2Fvec-common.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400cfcf50e5aeae792e8ef39a743b1cb6fafedd5/gcc%2Fconfig%2Farm%2Fvec-common.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvec-common.md?ref=400cfcf50e5aeae792e8ef39a743b1cb6fafedd5", "patch": "@@ -57,7 +57,8 @@\n   [(set (match_operand:VALL 0 \"s_register_operand\" \"\")\n         (plus:VALL (match_operand:VALL 1 \"s_register_operand\" \"\")\n                    (match_operand:VALL 2 \"s_register_operand\" \"\")))]\n-  \"TARGET_NEON\n+  \"(TARGET_NEON && ((<MODE>mode != V2SFmode && <MODE>mode != V4SFmode)\n+\t\t    || flag_unsafe_math_optimizations))\n    || (TARGET_REALLY_IWMMXT && VALID_IWMMXT_REG_MODE (<MODE>mode))\"\n {\n })\n@@ -66,7 +67,8 @@\n   [(set (match_operand:VALL 0 \"s_register_operand\" \"\")\n         (minus:VALL (match_operand:VALL 1 \"s_register_operand\" \"\")\n                     (match_operand:VALL 2 \"s_register_operand\" \"\")))]\n-  \"TARGET_NEON\n+  \"(TARGET_NEON && ((<MODE>mode != V2SFmode && <MODE>mode != V4SFmode)\n+\t\t    || flag_unsafe_math_optimizations))\n    || (TARGET_REALLY_IWMMXT && VALID_IWMMXT_REG_MODE (<MODE>mode))\"\n {\n })\n@@ -75,15 +77,18 @@\n   [(set (match_operand:VALLW 0 \"s_register_operand\" \"\")\n         (mult:VALLW (match_operand:VALLW 1 \"s_register_operand\" \"\")\n \t\t    (match_operand:VALLW 2 \"s_register_operand\" \"\")))]\n-  \"TARGET_NEON || (<MODE>mode == V4HImode && TARGET_REALLY_IWMMXT)\"\n+  \"(TARGET_NEON && ((<MODE>mode != V2SFmode && <MODE>mode != V4SFmode)\n+\t\t    || flag_unsafe_math_optimizations))\n+   || (<MODE>mode == V4HImode && TARGET_REALLY_IWMMXT)\"\n {\n })\n \n (define_expand \"smin<mode>3\"\n   [(set (match_operand:VALLW 0 \"s_register_operand\" \"\")\n \t(smin:VALLW (match_operand:VALLW 1 \"s_register_operand\" \"\")\n \t\t    (match_operand:VALLW 2 \"s_register_operand\" \"\")))]\n-  \"TARGET_NEON\n+  \"(TARGET_NEON && ((<MODE>mode != V2SFmode && <MODE>mode != V4SFmode)\n+\t\t    || flag_unsafe_math_optimizations))\n    || (TARGET_REALLY_IWMMXT && VALID_IWMMXT_REG_MODE (<MODE>mode))\"\n {\n })\n@@ -101,7 +106,8 @@\n   [(set (match_operand:VALLW 0 \"s_register_operand\" \"\")\n \t(smax:VALLW (match_operand:VALLW 1 \"s_register_operand\" \"\")\n \t\t    (match_operand:VALLW 2 \"s_register_operand\" \"\")))]\n-  \"TARGET_NEON\n+  \"(TARGET_NEON && ((<MODE>mode != V2SFmode && <MODE>mode != V4SFmode)\n+\t\t    || flag_unsafe_math_optimizations))\n    || (TARGET_REALLY_IWMMXT && VALID_IWMMXT_REG_MODE (<MODE>mode))\"\n {\n })"}, {"sha": "458dc79d1524a46c55eb71a4a5521469ab86baf0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400cfcf50e5aeae792e8ef39a743b1cb6fafedd5/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400cfcf50e5aeae792e8ef39a743b1cb6fafedd5/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=400cfcf50e5aeae792e8ef39a743b1cb6fafedd5", "patch": "@@ -9976,6 +9976,14 @@ of GCC@.\n If @option{-msoft-float} is specified this specifies the format of\n floating point values.\n \n+If the selected floating-point hardware includes the NEON extension\n+(e.g. @option{-mfpu}=@samp{neon}), note that floating-point\n+operations will not be used by GCC's auto-vectorization pass unless\n+@option{-funsafe-math-optimizations} is also specified.  This is\n+because NEON hardware does not fully implement the IEEE 754 standard for\n+floating-point arithmetic (in particular denormal values are treated as\n+zero), so the use of NEON instructions may lead to a loss of precision.\n+\n @item -mfp16-format=@var{name}\n @opindex mfp16-format\n Specify the format of the @code{__fp16} half-precision floating-point type."}, {"sha": "1ab9e0aec852fc9f3418821d1e32e6d16d25d82c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400cfcf50e5aeae792e8ef39a743b1cb6fafedd5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400cfcf50e5aeae792e8ef39a743b1cb6fafedd5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=400cfcf50e5aeae792e8ef39a743b1cb6fafedd5", "patch": "@@ -1,3 +1,11 @@\n+2010-07-02  Julian Brown  <julian@codesourcery.com>\n+\t    Sandra Loosemore <sandra@codesourcery.com>\n+\n+\tPR target/43703\n+\n+\t* gcc.dg/vect/vect.exp: Add -ffast-math for NEON.\n+\t* gcc.dg/vect/vect-reduc-6.c: Add XFAIL for NEON.\n+\n 2010-07-02  Sandra Loosemore  <sandra@codesourcery.com>\n \t    Julian Brown  <julian@codesourcery.com>\n "}, {"sha": "3f8e2ec69a028d4a78864addfe7f1eb73501170d", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-6.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400cfcf50e5aeae792e8ef39a743b1cb6fafedd5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400cfcf50e5aeae792e8ef39a743b1cb6fafedd5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-6.c?ref=400cfcf50e5aeae792e8ef39a743b1cb6fafedd5", "patch": "@@ -49,5 +49,6 @@ int main (void)\n }\n \n /* need -ffast-math to vectorizer these loops.  */\n-/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" } } */\n+/* ARM NEON passes -ffast-math to these tests, so expect this to fail.  */\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" { xfail arm_neon_ok } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "98477c4c8cd8f7e357037b923efe72a2f2ec4f1c", "filename": "gcc/testsuite/gcc.dg/vect/vect.exp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400cfcf50e5aeae792e8ef39a743b1cb6fafedd5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400cfcf50e5aeae792e8ef39a743b1cb6fafedd5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp?ref=400cfcf50e5aeae792e8ef39a743b1cb6fafedd5", "patch": "@@ -105,6 +105,10 @@ if  [istarget \"powerpc-*paired*\"]  {\n     set dg-do-what-default run\n } elseif [is-effective-target arm_neon_ok] {\n     eval lappend DEFAULT_VECTCFLAGS [add_options_for_arm_neon \"\"]\n+    # NEON does not support denormals, so is not used for vectorization by\n+    # default to avoid loss of precision.  We must pass -ffast-math to test\n+    # vectorization of float operations.\n+    lappend DEFAULT_VECTCFLAGS \"-ffast-math\"\n     if [is-effective-target arm_neon_hw] {\n       set dg-do-what-default run\n     } else {"}]}