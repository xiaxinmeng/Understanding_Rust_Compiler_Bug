{"sha": "3fc61836514d0f883c45a4a05ed79fb7a7eeb1e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZjNjE4MzY1MTRkMGY4ODNjNDVhNGEwNWVkNzlmYjdhN2VlYjFlOA==", "commit": {"author": {"name": "Anthony Green", "email": "green@cygnus.com", "date": "2000-03-08T03:10:19Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2000-03-08T03:10:19Z"}, "message": "re GNATS gcj/107 (Bad array or type conversion bug when compiling bytecode)\n\n1999-11-28 Anthony Green <green@cygnus.com>\n\n\t* decl.c (find_local_variable): Reuse single slot decls when\n\tappropriate.\n\n(This fixes the Java PR #107:\n http://sourceware.cygnus.com/ml/java-prs/1999-q4/msg00171.html)\n\nFrom-SVN: r32398", "tree": {"sha": "611e0667ea742030635f065587396e03b8124ea3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/611e0667ea742030635f065587396e03b8124ea3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fc61836514d0f883c45a4a05ed79fb7a7eeb1e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fc61836514d0f883c45a4a05ed79fb7a7eeb1e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fc61836514d0f883c45a4a05ed79fb7a7eeb1e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fc61836514d0f883c45a4a05ed79fb7a7eeb1e8/comments", "author": null, "committer": null, "parents": [{"sha": "cd7c5840050a985008c4ecc37236dde3c9dc6d28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd7c5840050a985008c4ecc37236dde3c9dc6d28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd7c5840050a985008c4ecc37236dde3c9dc6d28"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "305fae8da692bd74db858c73682911180d6c0321", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc61836514d0f883c45a4a05ed79fb7a7eeb1e8/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc61836514d0f883c45a4a05ed79fb7a7eeb1e8/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=3fc61836514d0f883c45a4a05ed79fb7a7eeb1e8", "patch": "@@ -672,6 +672,11 @@ Tue Nov 30 12:28:34 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n         check.\n         * expr.c (expand_java_arraystore): Likewise. \n \n+1999-11-28 Anthony Green <green@cygnus.com>\n+\n+\t* decl.c (find_local_variable): Reuse single slot decls when\n+\t  appropriate.\n+\n Wed Nov 24 17:33:26 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \n         * jcf-parse.c (saw_java_source): Global variable removed."}, {"sha": "3aea82031f53d8d5ccf45a72f5da08b640e06880", "filename": "gcc/java/decl.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc61836514d0f883c45a4a05ed79fb7a7eeb1e8/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc61836514d0f883c45a4a05ed79fb7a7eeb1e8/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=3fc61836514d0f883c45a4a05ed79fb7a7eeb1e8", "patch": "@@ -136,9 +136,7 @@ push_jvm_slot (index, decl)\n \n /* Find a VAR_DECL (or PARM_DECL) at local index INDEX that has type TYPE,\n    that is valid at PC (or -1 if any pc).\n-   If there is no existing matching decl, allocate one.\n-   If we find a decl with matching modes but different types,\n-   we re-use the rtl, but create a new decl. */\n+   If there is no existing matching decl, allocate one.  */\n \n tree\n find_local_variable (index, type, pc)\n@@ -148,6 +146,7 @@ find_local_variable (index, type, pc)\n {\n   tree decl = TREE_VEC_ELT (decl_map, index);\n   tree best = NULL_TREE;\n+\n   while (decl != NULL_TREE)\n     {\n       int in_range;\n@@ -156,6 +155,10 @@ find_local_variable (index, type, pc)\n \t    && pc < DECL_LOCAL_END_PC (decl));\n \n       if ((TREE_TYPE (decl) == type\n+\t   || (TREE_CODE (TREE_TYPE (decl)) == TREE_CODE (type)\n+\t       && TYPE_PRECISION (TREE_TYPE (decl)) <= 32\n+\t       && TYPE_PRECISION (type) <= 32\n+\t       && TREE_CODE (type) != POINTER_TYPE)\n \t   || (TREE_CODE (TREE_TYPE (decl)) == POINTER_TYPE\n \t       && type == ptr_type_node))\n \t   && in_range)"}]}