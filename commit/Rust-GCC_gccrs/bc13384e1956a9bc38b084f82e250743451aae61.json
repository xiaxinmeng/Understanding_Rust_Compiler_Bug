{"sha": "bc13384e1956a9bc38b084f82e250743451aae61", "node_id": "C_kwDOANBUbNoAKGJjMTMzODRlMTk1NmE5YmMzOGIwODRmODJlMjUwNzQzNDUxYWFlNjE", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2021-10-21T16:29:41Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2022-01-20T11:14:44Z"}, "message": "arm: add basic mitigation for Cortex-A AES errata\n\nThis patch adds the basic patterns for mitigation of the erratum, but no\nattempt is made at this point to optimize the results for the cases where\nthe erratum mitigation is not needed.\n\nThe mitigation is done by guaranteeing that the input operands are fed\nfrom a full-width operation by using an identity operation on the input\nvalues.\n\ngcc/ChangeLog:\n\n\t* config/arm/crypto.md (crypto_<CRYPTO_AES:crypto_pattern>): Convert\n\tto define_expand.  Add mitigation for the Cortex-A AES erratum\n\twhen enabled.\n\t(*crypto_<CRYPTO_AES:crypto_pattern>_insn): New pattern, based\n\ton original crypto_<CRYPTO_AES:crypto_pattern> insn.\n\t(aes_op_protect): New pattern.\n\t* config/arm/unspecs.md (unspec): Add UNSPEC_AES_PROTECT.", "tree": {"sha": "f8dc404560655c5100c23b7d91a24464aadb15a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8dc404560655c5100c23b7d91a24464aadb15a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc13384e1956a9bc38b084f82e250743451aae61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc13384e1956a9bc38b084f82e250743451aae61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc13384e1956a9bc38b084f82e250743451aae61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc13384e1956a9bc38b084f82e250743451aae61/comments", "author": null, "committer": null, "parents": [{"sha": "facbc2368c8f373a596e7665beb29b96c894bae2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/facbc2368c8f373a596e7665beb29b96c894bae2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/facbc2368c8f373a596e7665beb29b96c894bae2"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "fbee1829ce8e2cc836f845e0cd18fb1055eb7da0", "filename": "gcc/config/arm/crypto.md", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc13384e1956a9bc38b084f82e250743451aae61/gcc%2Fconfig%2Farm%2Fcrypto.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc13384e1956a9bc38b084f82e250743451aae61/gcc%2Fconfig%2Farm%2Fcrypto.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcrypto.md?ref=bc13384e1956a9bc38b084f82e250743451aae61", "patch": "@@ -29,7 +29,28 @@\n   [(set_attr \"type\" \"<crypto_type>\")]\n )\n \n-(define_insn \"crypto_<CRYPTO_AES:crypto_pattern>\"\n+(define_expand \"crypto_<CRYPTO_AES:crypto_pattern>\"\n+  [(set (match_operand:<crypto_mode> 0 \"register_operand\" \"=w\")\n+\t(unspec:<crypto_mode>\n+\t\t[(xor:<crypto_mode>\n+\t\t     (match_operand:<crypto_mode> 1 \"register_operand\" \"%0\")\n+\t\t     (match_operand:<crypto_mode> 2 \"register_operand\" \"w\"))]\n+\tCRYPTO_AES))]\n+  \"TARGET_CRYPTO\"\n+{\n+  if (fix_aes_erratum_1742098)\n+    {\n+      rtx op1_protect = gen_reg_rtx (V16QImode);\n+      emit_insn (gen_aes_op_protect (op1_protect, operands[1]));\n+      operands[1] = op1_protect;\n+      rtx op2_protect = gen_reg_rtx (V16QImode);\n+      emit_insn (gen_aes_op_protect (op2_protect, operands[2]));\n+      operands[2] = op2_protect;\n+    }\n+  /* Fall through to default expansion.  */\n+})\n+\n+(define_insn \"*crypto_<CRYPTO_AES:crypto_pattern>_insn\"\n   [(set (match_operand:<crypto_mode> 0 \"register_operand\" \"=w\")\n \t(unspec:<crypto_mode>\n \t [(xor:<crypto_mode>\n@@ -41,6 +62,19 @@\n   [(set_attr \"type\" \"<crypto_type>\")]\n )\n \n+; Mitigate against AES erratum on Cortex-A57 and Cortex-A72 by performing\n+; a 128-bit operation on an operand producer.  This can be eliminated only\n+; if we know that the operand was produced by a full-width operation.\n+; V16QImode matches <crypto_mode> for the AES instructions.\n+(define_insn \"aes_op_protect\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=w\")\n+\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"0\")]\n+\t UNSPEC_AES_PROTECT))]\n+  \"TARGET_CRYPTO && fix_aes_erratum_1742098\"\n+  \"vmov\\\\t%q0, %q1\"\n+  [(set_attr \"type\" \"neon_move_q\")]\n+)\n+\n ;; When AESE/AESMC fusion is enabled we really want to keep the two together\n ;; and enforce the register dependency without scheduling or register\n ;; allocation messing up the order or introducing moves inbetween."}, {"sha": "7748e78437943ca0cd0d8909330ea8d3b4948ae3", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc13384e1956a9bc38b084f82e250743451aae61/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc13384e1956a9bc38b084f82e250743451aae61/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=bc13384e1956a9bc38b084f82e250743451aae61", "patch": "@@ -270,6 +270,7 @@\n   UNSPEC_AESE\n   UNSPEC_AESIMC\n   UNSPEC_AESMC\n+  UNSPEC_AES_PROTECT\n   UNSPEC_SHA1C\n   UNSPEC_SHA1M\n   UNSPEC_SHA1P"}]}