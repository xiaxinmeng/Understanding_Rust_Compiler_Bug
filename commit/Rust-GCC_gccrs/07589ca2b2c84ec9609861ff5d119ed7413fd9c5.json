{"sha": "07589ca2b2c84ec9609861ff5d119ed7413fd9c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc1ODljYTJiMmM4NGVjOTYwOTg2MWZmNWQxMTllZDc0MTNmZDljNQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-02T20:53:23Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-02T20:59:05Z"}, "message": "c++: typename_type structural comparison\n\nFor modules we need to compare structurally all the way down.  This\nmeans inhibiting typename_type resolution, independent of comparing\nspecializations.\n\n\tgcc/cp/\n\t* cp-tree.h (comparing_typenames): Declare.\n\t* pt.c (comparing_typenames): Define.\n\t(spec_hasher::equal): Increment it around comparisons.\n\t* typeck.c (structural_comptypes): Adjust TYPENAME resolution\n\tcheck.", "tree": {"sha": "36c50abb4cfd8568837fe890353751a51154b8c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36c50abb4cfd8568837fe890353751a51154b8c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07589ca2b2c84ec9609861ff5d119ed7413fd9c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07589ca2b2c84ec9609861ff5d119ed7413fd9c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07589ca2b2c84ec9609861ff5d119ed7413fd9c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07589ca2b2c84ec9609861ff5d119ed7413fd9c5/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ed34c60a818cc513239844f336fc781a8b47a24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ed34c60a818cc513239844f336fc781a8b47a24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ed34c60a818cc513239844f336fc781a8b47a24"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "156bd6c8650afaf1906c84287ea633bd5dd312d0", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07589ca2b2c84ec9609861ff5d119ed7413fd9c5/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07589ca2b2c84ec9609861ff5d119ed7413fd9c5/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=07589ca2b2c84ec9609861ff5d119ed7413fd9c5", "patch": "@@ -5399,6 +5399,10 @@ extern int function_depth;\n    in structrual_comptypes.  */\n extern int comparing_specializations;\n \n+/* Nonzero if we are inside eq_specializations, which affects\n+   resolving of typenames in structural_comptypes.  */\n+extern int comparing_typenames;\n+\n /* In parser.c.  */\n \n /* Nonzero if we are parsing an unevaluated operand: an operand to"}, {"sha": "aa050f55fd6ad48caeffa541c404c671894f5c7f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07589ca2b2c84ec9609861ff5d119ed7413fd9c5/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07589ca2b2c84ec9609861ff5d119ed7413fd9c5/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=07589ca2b2c84ec9609861ff5d119ed7413fd9c5", "patch": "@@ -1702,16 +1702,19 @@ register_specialization (tree spec, tree tmpl, tree args, bool is_friend,\n   return spec;\n }\n \n-/* Returns true iff two spec_entry nodes are equivalent.  */\n-\n+/* Restricts tree and type comparisons.  */\n int comparing_specializations;\n+int comparing_typenames;\n+\n+/* Returns true iff two spec_entry nodes are equivalent.  */\n \n bool\n spec_hasher::equal (spec_entry *e1, spec_entry *e2)\n {\n   int equal;\n \n   ++comparing_specializations;\n+  ++comparing_typenames;\n   equal = (e1->tmpl == e2->tmpl\n \t   && comp_template_args (e1->args, e2->args));\n   if (equal && flag_concepts\n@@ -1727,6 +1730,7 @@ spec_hasher::equal (spec_entry *e1, spec_entry *e2)\n       equal = equivalent_constraints (c1, c2);\n     }\n   --comparing_specializations;\n+  --comparing_typenames;\n \n   return equal;\n }"}, {"sha": "6294a787b5a7c823e88403c03383979a38da5624", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07589ca2b2c84ec9609861ff5d119ed7413fd9c5/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07589ca2b2c84ec9609861ff5d119ed7413fd9c5/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=07589ca2b2c84ec9609861ff5d119ed7413fd9c5", "patch": "@@ -1256,16 +1256,15 @@ structural_comptypes (tree t1, tree t2, int strict)\n \n   gcc_assert (TYPE_P (t1) && TYPE_P (t2));\n \n-  if (!comparing_specializations)\n-    {\n-      /* TYPENAME_TYPEs should be resolved if the qualifying scope is the\n-\t current instantiation.  */\n-      if (TREE_CODE (t1) == TYPENAME_TYPE)\n-\tt1 = resolve_typename_type (t1, /*only_current_p=*/true);\n-\n-      if (TREE_CODE (t2) == TYPENAME_TYPE)\n-\tt2 = resolve_typename_type (t2, /*only_current_p=*/true);\n-    }\n+  /* TYPENAME_TYPEs should be resolved if the qualifying scope is the\n+     current instantiation, and we don't care about typename\n+     structural equality.  The comparing_typenames check is after the\n+     code check, in order to early-out the common case.  */\n+  if (TREE_CODE (t1) == TYPENAME_TYPE && !comparing_typenames)\n+    t1 = resolve_typename_type (t1, /*only_current_p=*/true);\n+\n+  if (TREE_CODE (t2) == TYPENAME_TYPE && !comparing_typenames)\n+    t2 = resolve_typename_type (t2, /*only_current_p=*/true);\n \n   if (TYPE_PTRMEMFUNC_P (t1))\n     t1 = TYPE_PTRMEMFUNC_FN_TYPE (t1);"}]}