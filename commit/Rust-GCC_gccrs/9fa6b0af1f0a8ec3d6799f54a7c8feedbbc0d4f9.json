{"sha": "9fa6b0af1f0a8ec3d6799f54a7c8feedbbc0d4f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZhNmIwYWYxZjBhOGVjM2Q2Nzk5ZjU0YTdjOGZlZWRiYmMwZDRmOQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-09-20T22:03:22Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-09-20T22:03:22Z"}, "message": "re PR fortran/33221 (Cannot declare variables of TYPE without components)\n\n\tPR fortran/33221\n\n\t* gfortran.h (symbol_attribute): Add zero_comp field.\n\t* symbol.c (gfc_use_derived): Handle case of emtpy derived types.\n\t* decl.c (gfc_match_data_decl): Likewise.\n\t(gfc_match_derived_decl): Likewise.\n\t* module.c (ab_attribute, attr_bits): Add AB_ZERO_COMP member.\n\t(mio_symbol_attribute): Write and read AB_ZERO_COMP.\n\t* resolve.c (resolve_symbol): Handle case of emtpy derived types.\n\t* parse.c (parse_derived): Likewise.\n\n\t* gfortran.dg/used_types_18.f90: Declare variable of empty\n\tderived type.\n\nFrom-SVN: r128633", "tree": {"sha": "c777e12a86d2297992869f6434a715f22b9b1da3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c777e12a86d2297992869f6434a715f22b9b1da3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fa6b0af1f0a8ec3d6799f54a7c8feedbbc0d4f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fa6b0af1f0a8ec3d6799f54a7c8feedbbc0d4f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fa6b0af1f0a8ec3d6799f54a7c8feedbbc0d4f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fa6b0af1f0a8ec3d6799f54a7c8feedbbc0d4f9/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f68f111df59d8474f3635bb7a3eb5e0469b722b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f68f111df59d8474f3635bb7a3eb5e0469b722b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f68f111df59d8474f3635bb7a3eb5e0469b722b"}], "stats": {"total": 50, "additions": 42, "deletions": 8}, "files": [{"sha": "5a81ebe71d4943eee9a96c7d4f87ba2142f72705", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa6b0af1f0a8ec3d6799f54a7c8feedbbc0d4f9/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa6b0af1f0a8ec3d6799f54a7c8feedbbc0d4f9/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9fa6b0af1f0a8ec3d6799f54a7c8feedbbc0d4f9", "patch": "@@ -1,3 +1,15 @@\n+2007-09-20  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/33221\n+\t* gfortran.h (symbol_attribute): Add zero_comp field.\n+\t* symbol.c (gfc_use_derived): Handle case of emtpy derived types.\n+\t* decl.c (gfc_match_data_decl): Likewise.\n+\t(gfc_match_derived_decl): Likewise.\n+\t* module.c (ab_attribute, attr_bits): Add AB_ZERO_COMP member.\n+\t(mio_symbol_attribute): Write and read AB_ZERO_COMP.\n+\t* resolve.c (resolve_symbol): Handle case of emtpy derived types.\n+\t* parse.c (parse_derived): Likewise.\n+\n 2007-09-20  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/33288"}, {"sha": "7fa8548fb563f06c093e003bd6b5f987c0fa7616", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa6b0af1f0a8ec3d6799f54a7c8feedbbc0d4f9/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa6b0af1f0a8ec3d6799f54a7c8feedbbc0d4f9/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=9fa6b0af1f0a8ec3d6799f54a7c8feedbbc0d4f9", "patch": "@@ -3414,7 +3414,8 @@ gfc_match_data_decl (void)\n       goto cleanup;\n     }\n \n-  if (current_ts.type == BT_DERIVED && current_ts.derived->components == NULL)\n+  if (current_ts.type == BT_DERIVED && current_ts.derived->components == NULL\n+      && !current_ts.derived->attr.zero_comp)\n     {\n \n       if (current_attr.pointer && gfc_current_state () == COMP_DERIVED)\n@@ -3426,7 +3427,8 @@ gfc_match_data_decl (void)\n       /* Any symbol that we find had better be a type definition\n \t which has its components defined.  */\n       if (sym != NULL && sym->attr.flavor == FL_DERIVED\n-\t  && current_ts.derived->components != NULL)\n+\t  && (current_ts.derived->components != NULL\n+\t      || current_ts.derived->attr.zero_comp))\n \tgoto ok;\n \n       /* Now we have an error, which we signal, and then fix up\n@@ -5884,7 +5886,7 @@ gfc_match_derived_decl (void)\n       && gfc_add_flavor (&sym->attr, FL_DERIVED, sym->name, NULL) == FAILURE)\n     return MATCH_ERROR;\n \n-  if (sym->components != NULL)\n+  if (sym->components != NULL || sym->attr.zero_comp)\n     {\n       gfc_error (\"Derived type definition of '%s' at %C has already been \"\n \t\t \"defined\", sym->name);"}, {"sha": "32b156166000f2fc02396538c958674a9cce1e33", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa6b0af1f0a8ec3d6799f54a7c8feedbbc0d4f9/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa6b0af1f0a8ec3d6799f54a7c8feedbbc0d4f9/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=9fa6b0af1f0a8ec3d6799f54a7c8feedbbc0d4f9", "patch": "@@ -650,8 +650,9 @@ typedef struct\n   unsigned cray_pointer:1, cray_pointee:1;\n \n   /* The symbol is a derived type with allocatable components, pointer \n-     components or private components, possibly nested.  */\n-  unsigned alloc_comp:1, pointer_comp:1, private_comp:1;\n+     components or private components, possibly nested.  zer_comp\n+     is true if the derived type has no component at all.  */\n+  unsigned alloc_comp:1, pointer_comp:1, private_comp:1, zero_comp:1;\n \n   /* The namespace where the VOLATILE attribute has been set.  */\n   struct gfc_namespace *volatile_ns;"}, {"sha": "3418afa0c163cfa47a6241a04e0581d8b245c73c", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa6b0af1f0a8ec3d6799f54a7c8feedbbc0d4f9/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa6b0af1f0a8ec3d6799f54a7c8feedbbc0d4f9/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=9fa6b0af1f0a8ec3d6799f54a7c8feedbbc0d4f9", "patch": "@@ -1523,7 +1523,7 @@ typedef enum\n   AB_ELEMENTAL, AB_PURE, AB_RECURSIVE, AB_GENERIC, AB_ALWAYS_EXPLICIT,\n   AB_CRAY_POINTER, AB_CRAY_POINTEE, AB_THREADPRIVATE, AB_ALLOC_COMP,\n   AB_POINTER_COMP, AB_PRIVATE_COMP, AB_VALUE, AB_VOLATILE, AB_PROTECTED,\n-  AB_IS_BIND_C, AB_IS_C_INTEROP, AB_IS_ISO_C, AB_ABSTRACT\n+  AB_IS_BIND_C, AB_IS_C_INTEROP, AB_IS_ISO_C, AB_ABSTRACT, AB_ZERO_COMP\n }\n ab_attribute;\n \n@@ -1560,6 +1560,7 @@ static const mstring attr_bits[] =\n     minit (\"ALLOC_COMP\", AB_ALLOC_COMP),\n     minit (\"POINTER_COMP\", AB_POINTER_COMP),\n     minit (\"PRIVATE_COMP\", AB_PRIVATE_COMP),\n+    minit (\"ZERO_COMP\", AB_ZERO_COMP),\n     minit (\"PROTECTED\", AB_PROTECTED),\n     minit (\"ABSTRACT\", AB_ABSTRACT),\n     minit (NULL, -1)\n@@ -1673,6 +1674,8 @@ mio_symbol_attribute (symbol_attribute *attr)\n \tMIO_NAME (ab_attribute) (AB_POINTER_COMP, attr_bits);\n       if (attr->private_comp)\n \tMIO_NAME (ab_attribute) (AB_PRIVATE_COMP, attr_bits);\n+      if (attr->zero_comp)\n+\tMIO_NAME (ab_attribute) (AB_ZERO_COMP, attr_bits);\n \n       mio_rparen ();\n \n@@ -1788,6 +1791,9 @@ mio_symbol_attribute (symbol_attribute *attr)\n \t    case AB_PRIVATE_COMP:\n \t      attr->private_comp = 1;\n \t      break;\n+\t    case AB_ZERO_COMP:\n+\t      attr->zero_comp = 1;\n+\t      break;\n \t    }\n \t}\n     }"}, {"sha": "a6672f46ca6731829485ec018220b940cd92dd58", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa6b0af1f0a8ec3d6799f54a7c8feedbbc0d4f9/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa6b0af1f0a8ec3d6799f54a7c8feedbbc0d4f9/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=9fa6b0af1f0a8ec3d6799f54a7c8feedbbc0d4f9", "patch": "@@ -1651,6 +1651,9 @@ parse_derived (void)\n \t}\n     }\n \n+  if (!seen_component)\n+    sym->attr.zero_comp = 1;\n+\n   pop_state ();\n }\n "}, {"sha": "26632bbde8452b5f895eff4a82be3824f040c0e5", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa6b0af1f0a8ec3d6799f54a7c8feedbbc0d4f9/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa6b0af1f0a8ec3d6799f54a7c8feedbbc0d4f9/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=9fa6b0af1f0a8ec3d6799f54a7c8feedbbc0d4f9", "patch": "@@ -7627,7 +7627,8 @@ resolve_symbol (gfc_symbol *sym)\n      the type is not declared in the scope of the implicit\n      statement. Change the type to BT_UNKNOWN, both because it is so\n      and to prevent an ICE.  */\n-  if (sym->ts.type == BT_DERIVED && sym->ts.derived->components == NULL)\n+  if (sym->ts.type == BT_DERIVED && sym->ts.derived->components == NULL\n+      && !sym->ts.derived->attr.zero_comp)\n     {\n       gfc_error (\"The derived type '%s' at %L is of type '%s', \"\n \t\t \"which has not been defined\", sym->name,"}, {"sha": "d6bd9638df62733f0a74a02f1d1daf91f6cd11ce", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa6b0af1f0a8ec3d6799f54a7c8feedbbc0d4f9/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa6b0af1f0a8ec3d6799f54a7c8feedbbc0d4f9/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=9fa6b0af1f0a8ec3d6799f54a7c8feedbbc0d4f9", "patch": "@@ -1703,7 +1703,7 @@ gfc_use_derived (gfc_symbol *sym)\n   gfc_symtree *st;\n   int i;\n \n-  if (sym->components != NULL)\n+  if (sym->components != NULL || sym->attr.zero_comp)\n     return sym;               /* Already defined.  */\n \n   if (sym->ns->parent == NULL)"}, {"sha": "14fb1f344a1a115c0daa302338cf61470f6a5b8f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa6b0af1f0a8ec3d6799f54a7c8feedbbc0d4f9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa6b0af1f0a8ec3d6799f54a7c8feedbbc0d4f9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9fa6b0af1f0a8ec3d6799f54a7c8feedbbc0d4f9", "patch": "@@ -1,3 +1,9 @@\n+2007-09-20  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/33221\n+\t* gfortran.dg/used_types_18.f90: Declare variable of empty\n+\tderived type.\n+\n 2007-09-20  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/33288"}, {"sha": "0acebc4c830e5bc5df3cd64a088aabab6e1845a0", "filename": "gcc/testsuite/gfortran.dg/used_types_18.f90", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa6b0af1f0a8ec3d6799f54a7c8feedbbc0d4f9/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_types_18.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa6b0af1f0a8ec3d6799f54a7c8feedbbc0d4f9/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_types_18.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_types_18.f90?ref=9fa6b0af1f0a8ec3d6799f54a7c8feedbbc0d4f9", "patch": "@@ -9,4 +9,7 @@\n !\n type t\n end type\n+\n+type(t) :: a\n+print *, a\n end"}]}