{"sha": "805a54065f592746919df9f44d2cdb70c72ea1b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA1YTU0MDY1ZjU5Mjc0NjkxOWRmOWY0NGQyY2RiNzBjNzJlYTFiMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-07-03T13:46:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-07-03T13:46:34Z"}, "message": "genmatch.c (commutative_tree_code, [...]): Copy from tree.c\n\n2015-07-03  Richard Biener  <rguenther@suse.de>\n\n\t* genmatch.c (commutative_tree_code, commutative_ternary_tree_code):\n\tCopy from tree.c\n\t(dt_operand::gen_gimple_expr): After valueizing operands\n\tre-canonicalize operand order for commutative tree codes.\n\nFrom-SVN: r225378", "tree": {"sha": "993f22ec98c61bcd0edecf3ff1407fc79fdea838", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/993f22ec98c61bcd0edecf3ff1407fc79fdea838"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/805a54065f592746919df9f44d2cdb70c72ea1b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/805a54065f592746919df9f44d2cdb70c72ea1b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/805a54065f592746919df9f44d2cdb70c72ea1b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/805a54065f592746919df9f44d2cdb70c72ea1b1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dba9842f05e26bd3b9ff7453be8067e95d49a0f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dba9842f05e26bd3b9ff7453be8067e95d49a0f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dba9842f05e26bd3b9ff7453be8067e95d49a0f3"}], "stats": {"total": 82, "additions": 82, "deletions": 0}, "files": [{"sha": "1b6002755531d19b1e51fa83ce155eefa3c3f510", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805a54065f592746919df9f44d2cdb70c72ea1b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805a54065f592746919df9f44d2cdb70c72ea1b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=805a54065f592746919df9f44d2cdb70c72ea1b1", "patch": "@@ -1,3 +1,10 @@\n+2015-07-03  Richard Biener  <rguenther@suse.de>\n+\n+\t* genmatch.c (commutative_tree_code, commutative_ternary_tree_code):\n+\tCopy from tree.c\n+\t(dt_operand::gen_gimple_expr): After valueizing operands\n+\tre-canonicalize operand order for commutative tree codes.\n+\n 2015-07-03  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/66746."}, {"sha": "7ee6fb5b50f9ec9254cb13fcce6fe9d4d392c89b", "filename": "gcc/genmatch.c", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805a54065f592746919df9f44d2cdb70c72ea1b1/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805a54065f592746919df9f44d2cdb70c72ea1b1/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=805a54065f592746919df9f44d2cdb70c72ea1b1", "patch": "@@ -175,6 +175,62 @@ END_BUILTINS\n };\n #undef DEF_BUILTIN\n \n+/* Return true if CODE represents a commutative tree code.  Otherwise\n+   return false.  */\n+bool\n+commutative_tree_code (enum tree_code code)\n+{\n+  switch (code)\n+    {\n+    case PLUS_EXPR:\n+    case MULT_EXPR:\n+    case MULT_HIGHPART_EXPR:\n+    case MIN_EXPR:\n+    case MAX_EXPR:\n+    case BIT_IOR_EXPR:\n+    case BIT_XOR_EXPR:\n+    case BIT_AND_EXPR:\n+    case NE_EXPR:\n+    case EQ_EXPR:\n+    case UNORDERED_EXPR:\n+    case ORDERED_EXPR:\n+    case UNEQ_EXPR:\n+    case LTGT_EXPR:\n+    case TRUTH_AND_EXPR:\n+    case TRUTH_XOR_EXPR:\n+    case TRUTH_OR_EXPR:\n+    case WIDEN_MULT_EXPR:\n+    case VEC_WIDEN_MULT_HI_EXPR:\n+    case VEC_WIDEN_MULT_LO_EXPR:\n+    case VEC_WIDEN_MULT_EVEN_EXPR:\n+    case VEC_WIDEN_MULT_ODD_EXPR:\n+      return true;\n+\n+    default:\n+      break;\n+    }\n+  return false;\n+}\n+\n+/* Return true if CODE represents a ternary tree code for which the\n+   first two operands are commutative.  Otherwise return false.  */\n+bool\n+commutative_ternary_tree_code (enum tree_code code)\n+{\n+  switch (code)\n+    {\n+    case WIDEN_MULT_PLUS_EXPR:\n+    case WIDEN_MULT_MINUS_EXPR:\n+    case DOT_PROD_EXPR:\n+    case FMA_EXPR:\n+      return true;\n+\n+    default:\n+      break;\n+    }\n+  return false;\n+}\n+\n \n /* Base class for all identifiers the parser knows.  */\n \n@@ -1996,6 +2052,25 @@ dt_operand::gen_gimple_expr (FILE *f)\n \t       child_opname, child_opname);\n       fprintf (f, \"{\\n\");\n     }\n+  /* While the toplevel operands are canonicalized by the caller\n+     after valueizing operands of sub-expressions we have to\n+     re-canonicalize operand order.  */\n+  if (operator_id *code = dyn_cast <operator_id *> (id))\n+    {\n+      /* ???  We can't canonicalize tcc_comparison operands here\n+         because that requires changing the comparison code which\n+\t we already matched...  */\n+      if (commutative_tree_code (code->code)\n+\t  || commutative_ternary_tree_code (code->code))\n+\t{\n+\t  char child_opname0[20], child_opname1[20];\n+\t  gen_opname (child_opname0, 0);\n+\t  gen_opname (child_opname1, 1);\n+\t  fprintf (f, \"if (tree_swap_operands_p (%s, %s, false))\\n\"\n+\t\t   \"  std::swap (%s, %s);\\n\", child_opname0, child_opname1,\n+\t\t   child_opname0, child_opname1);\n+\t}\n+    }\n \n   return n_ops;\n }"}]}