{"sha": "a26f0501b494cf0577d3d6d517551e4e12e07bdb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI2ZjA1MDFiNDk0Y2YwNTc3ZDNkNmQ1MTc1NTFlNGUxMmUwN2JkYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2013-02-26T23:46:21Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2013-02-26T23:46:21Z"}, "message": "re PR libstdc++/56012 ([C++11] Narrowing conversion in atomic_flag)\n\n\tPR libstdc++/56012\n\t* include/bits/atomic_base.h (atomic_flag): Fix narrowing conversion.\n\t* testsuite/29_atomics/atomic/operators/56012.cc: New.\n\n\tPR libstdc++/56011\n\t* include/std/atomic (atomic<bool>::operator=(bool) volatile): Add\n\tmissing overload.\n\t* testsuite/29_atomics/atomic/operators/56011.cc: New.\n\nFrom-SVN: r196296", "tree": {"sha": "1a0f1e32f26cd55c8c7f4b824e26da5915a446aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a0f1e32f26cd55c8c7f4b824e26da5915a446aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a26f0501b494cf0577d3d6d517551e4e12e07bdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a26f0501b494cf0577d3d6d517551e4e12e07bdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a26f0501b494cf0577d3d6d517551e4e12e07bdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a26f0501b494cf0577d3d6d517551e4e12e07bdb/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0163673082e1df735245a846f48276a4b5f324a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0163673082e1df735245a846f48276a4b5f324a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0163673082e1df735245a846f48276a4b5f324a"}], "stats": {"total": 90, "additions": 83, "deletions": 7}, "files": [{"sha": "8f995121feb8be78cb880ccbdc0bd5792c028003", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26f0501b494cf0577d3d6d517551e4e12e07bdb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26f0501b494cf0577d3d6d517551e4e12e07bdb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a26f0501b494cf0577d3d6d517551e4e12e07bdb", "patch": "@@ -1,3 +1,14 @@\n+2013-02-26  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/56012\n+\t* include/bits/atomic_base.h (atomic_flag): Fix narrowing conversion.\n+\t* testsuite/29_atomics/atomic/operators/56012.cc: New.\n+\n+\tPR libstdc++/56011\n+\t* include/std/atomic (atomic<bool>::operator=(bool) volatile): Add\n+\tmissing overload.\n+\t* testsuite/29_atomics/atomic/operators/56011.cc: New.\n+\n 2013-02-25  Jason Merrill  <jason@redhat.com>\n \n \t* configure.ac: Check for __cxa_thread_atexit_impl."}, {"sha": "609fe8b06234de123035f1d6b867c5c55034044e", "filename": "libstdc++-v3/include/bits/atomic_base.h", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26f0501b494cf0577d3d6d517551e4e12e07bdb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26f0501b494cf0577d3d6d517551e4e12e07bdb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h?ref=a26f0501b494cf0577d3d6d517551e4e12e07bdb", "patch": "@@ -239,6 +239,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct atomic<_Tp*>;\n \n+    /* The target's \"set\" value for test-and-set may not be exactly 1.  */\n+#if __GCC_ATOMIC_TEST_AND_SET_TRUEVAL == 1\n+    typedef bool __atomic_flag_data_type;\n+#else\n+    typedef unsigned char __atomic_flag_data_type;\n+#endif\n \n   /**\n    *  @brief Base type for atomic_flag.\n@@ -254,12 +260,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   struct __atomic_flag_base\n   {\n-    /* The target's \"set\" value for test-and-set may not be exactly 1.  */\n-#if __GCC_ATOMIC_TEST_AND_SET_TRUEVAL == 1\n-    bool _M_i;\n-#else\n-    unsigned char _M_i;\n-#endif\n+    __atomic_flag_data_type _M_i;\n   };\n \n   _GLIBCXX_END_EXTERN_C\n@@ -277,7 +278,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     // Conversion to ATOMIC_FLAG_INIT.\n     constexpr atomic_flag(bool __i) noexcept\n-      : __atomic_flag_base({ __i ? __GCC_ATOMIC_TEST_AND_SET_TRUEVAL : 0 })\n+      : __atomic_flag_base{ _S_init(__i) }\n     { }\n \n     bool\n@@ -313,6 +314,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       __atomic_clear (&_M_i, __m);\n     }\n+\n+  private:\n+    static constexpr __atomic_flag_data_type\n+    _S_init(bool __i)\n+    { return __i ? __GCC_ATOMIC_TEST_AND_SET_TRUEVAL : 0; }\n   };\n \n "}, {"sha": "813f5741a1053a8cf06a03d19d94758a7f6d17b2", "filename": "libstdc++-v3/include/std/atomic", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26f0501b494cf0577d3d6d517551e4e12e07bdb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26f0501b494cf0577d3d6d517551e4e12e07bdb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic?ref=a26f0501b494cf0577d3d6d517551e4e12e07bdb", "patch": "@@ -69,6 +69,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator=(bool __i) noexcept\n     { return _M_base.operator=(__i); }\n \n+    bool\n+    operator=(bool __i) volatile noexcept\n+    { return _M_base.operator=(__i); }\n+\n     operator bool() const noexcept\n     { return _M_base.load(); }\n "}, {"sha": "1d77a55b213d8cf4b4094484a2d7183d78a5d9b6", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/operators/56011.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26f0501b494cf0577d3d6d517551e4e12e07bdb/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Foperators%2F56011.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26f0501b494cf0577d3d6d517551e4e12e07bdb/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Foperators%2F56011.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Foperators%2F56011.cc?ref=a26f0501b494cf0577d3d6d517551e4e12e07bdb", "patch": "@@ -0,0 +1,29 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <atomic>\n+void test01()\n+{\n+  using namespace std;\n+  volatile atomic<bool> ab1 __attribute__((unused));\n+  ab1 = true;\n+  volatile atomic_bool ab2 __attribute__((unused));\n+  ab2 = true;\n+}"}, {"sha": "64f3b972934d7be8f1dbb57cea51b20af9bbbb9e", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_flag/cons/56012.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26f0501b494cf0577d3d6d517551e4e12e07bdb/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2F56012.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26f0501b494cf0577d3d6d517551e4e12e07bdb/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2F56012.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2F56012.cc?ref=a26f0501b494cf0577d3d6d517551e4e12e07bdb", "patch": "@@ -0,0 +1,26 @@\n+// { dg-options \"-std=gnu++0x -Wsystem-headers -Wnarrowing\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <atomic>\n+void test01()\n+{\n+  using namespace std;\n+  atomic_flag af __attribute__((unused)) = ATOMIC_FLAG_INIT;\n+}"}]}