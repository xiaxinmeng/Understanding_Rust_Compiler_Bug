{"sha": "ac72c9c53779907040fa8dfb0caf199cd890ac32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM3MmM5YzUzNzc5OTA3MDQwZmE4ZGZiMGNhZjE5OWNkODkwYWMzMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-29T10:49:15Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-29T10:49:15Z"}, "message": "[multiple changes]\n\n2009-04-29  Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_ch3.adb (Stream_Operation_OK): Return True for limited interfaces\n\t(other conditions permitting), so that abstract stream subprograms will\n\tbe declared for them.\n\n2009-04-29  Bob Duff  <duff@adacore.com>\n\n\t* g-expect.adb (Expect_Internal): Fix check for overfull buffer.\n\n\t* g-expect.ads: Minor comment fixes.\n\n2009-04-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* freeze.adb, lib-xref.adb (Check_Dispatching_Operation): if the\n\tdispatching operation is a body without previous spec, update the list\n\tof primitive operations to ensure that cross-reference information is\n\tup-to-date.\n\n2009-04-29  Albert Lee  <lee@adacore.com>\n\n\t* g-socthi-vms.adb, g-socthi-vms.ads, g-socthi-vxworks.adb,\n\tg-socthi-vxworks.ads, g-socthi-mingw.adb, g-socthi-mingw.ads,\n\tg-socthi.adb, g-socthi.ads, g-socket.adb, g-socket.ads\n\t(GNAT.Sockets.Thin.C_Readv,\n\tGNAT.Sockets.Thin.C_Writev): Remove unused subprograms.\n\t(GNAT.Sockets.Thin.C_Recvmsg,\n\tGNAT.Sockets.Thin.C_Sendmsg): New bindings to call recvmsg(2) and\n\tsendmsg(2).  \n\t(GNAT.Sockets.Receive_Vector, GNAT.Sockets.Send_Vector): Use\n\tC_Recvmsg/C_Sendmsg rather than Readv/C_Writev.\n\nFrom-SVN: r146949", "tree": {"sha": "0b6546d43b2e46559dc89368694673e09f48f367", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b6546d43b2e46559dc89368694673e09f48f367"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac72c9c53779907040fa8dfb0caf199cd890ac32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac72c9c53779907040fa8dfb0caf199cd890ac32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac72c9c53779907040fa8dfb0caf199cd890ac32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac72c9c53779907040fa8dfb0caf199cd890ac32/comments", "author": null, "committer": null, "parents": [{"sha": "de0b4ad5451aa82edae1d13c6424194e101e437b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de0b4ad5451aa82edae1d13c6424194e101e437b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de0b4ad5451aa82edae1d13c6424194e101e437b"}], "stats": {"total": 894, "additions": 580, "deletions": 314}, "files": [{"sha": "aacaa5840cc9e4cc0f204ffe5608ce682e4cdc66", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac72c9c53779907040fa8dfb0caf199cd890ac32/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac72c9c53779907040fa8dfb0caf199cd890ac32/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ac72c9c53779907040fa8dfb0caf199cd890ac32", "patch": "@@ -1,3 +1,35 @@\n+2009-04-29  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch3.adb (Stream_Operation_OK): Return True for limited interfaces\n+\t(other conditions permitting), so that abstract stream subprograms will\n+\tbe declared for them.\n+\n+2009-04-29  Bob Duff  <duff@adacore.com>\n+\n+\t* g-expect.adb (Expect_Internal): Fix check for overfull buffer.\n+\n+\t* g-expect.ads: Minor comment fixes.\n+\n+2009-04-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* freeze.adb, lib-xref.adb (Check_Dispatching_Operation): if the\n+\tdispatching operation is a body without previous spec, update the list\n+\tof primitive operations to ensure that cross-reference information is\n+\tup-to-date.\n+\n+2009-04-29  Albert Lee  <lee@adacore.com>\n+\n+\t* g-socthi-vms.adb, g-socthi-vms.ads, g-socthi-vxworks.adb,\n+\tg-socthi-vxworks.ads, g-socthi-mingw.adb, g-socthi-mingw.ads,\n+\tg-socthi.adb, g-socthi.ads, g-socket.adb, g-socket.ads\n+\t(GNAT.Sockets.Thin.C_Readv,\n+\tGNAT.Sockets.Thin.C_Writev): Remove unused subprograms.\n+\t(GNAT.Sockets.Thin.C_Recvmsg,\n+\tGNAT.Sockets.Thin.C_Sendmsg): New bindings to call recvmsg(2) and\n+\tsendmsg(2).  \n+\t(GNAT.Sockets.Receive_Vector, GNAT.Sockets.Send_Vector): Use\n+\tC_Recvmsg/C_Sendmsg rather than Readv/C_Writev.\n+\n 2009-04-29  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_disp.adb (Check_Dispatching_Operation): if the dispatching"}, {"sha": "d05cdbba9e8df308a094b6c063d224c5e9e6e503", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac72c9c53779907040fa8dfb0caf199cd890ac32/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac72c9c53779907040fa8dfb0caf199cd890ac32/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=ac72c9c53779907040fa8dfb0caf199cd890ac32", "patch": "@@ -8634,7 +8634,14 @@ package body Exp_Ch3 is\n       --  If the type is not limited, or else is limited but the attribute is\n       --  explicitly specified or is predefined for the type, then return True,\n       --  unless other conditions prevail, such as restrictions prohibiting\n-      --  streams or dispatching operations.\n+      --  streams or dispatching operations. We also return True for limited\n+      --  interfaces, because they may be extended by nonlimited types and\n+      --  permit inheritance in this case (addresses cases where an abstract\n+      --  extension doesn't get 'Input declared, as per comments below, but\n+      --  'Class'Input must still be allowed). Note that attempts to apply\n+      --  stream attributes to a limited interface or its class-wide type\n+      --  (or limited extensions thereof) will still get properly rejected\n+      --  by Check_Stream_Attribute.\n \n       --  We exclude the Input operation from being a predefined subprogram in\n       --  the case where the associated type is an abstract extension, because\n@@ -8648,6 +8655,7 @@ package body Exp_Ch3 is\n       --  exception.\n \n       return (not Is_Limited_Type (Typ)\n+               or else Is_Interface (Typ)\n                or else Has_Predefined_Or_Specified_Stream_Attribute)\n         and then (Operation /= TSS_Stream_Input\n                    or else not Is_Abstract_Type (Typ)"}, {"sha": "fdacb091afc99aa2fc63df46701ea3b57c007b67", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 1, "deletions": 95, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac72c9c53779907040fa8dfb0caf199cd890ac32/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac72c9c53779907040fa8dfb0caf199cd890ac32/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=ac72c9c53779907040fa8dfb0caf199cd890ac32", "patch": "@@ -36,7 +36,6 @@ with Exp_Pakd; use Exp_Pakd;\n with Exp_Util; use Exp_Util;\n with Exp_Tss;  use Exp_Tss;\n with Layout;   use Layout;\n-with Lib.Xref; use Lib.Xref;\n with Namet;    use Namet;\n with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n@@ -135,10 +134,6 @@ package body Freeze is\n    --  the designated type. Otherwise freezing the access type does not freeze\n    --  the designated type.\n \n-   procedure Generate_Prim_Op_References (Typ : Entity_Id);\n-   --  For a tagged type, generate implicit references to its primitive\n-   --  operations, for source navigation.\n-\n    procedure Process_Default_Expressions\n      (E     : Entity_Id;\n       After : in out Node_Id);\n@@ -2583,29 +2578,10 @@ package body Freeze is\n          --  Here for other than a subprogram or type\n \n          else\n-            --  For a generic package, freeze types within, so that proper\n-            --  cross-reference information is generated for tagged types.\n-            --  This is the only freeze processing needed for generic packages.\n-\n-            if Ekind (E) = E_Generic_Package then\n-               declare\n-                  T : Entity_Id;\n-\n-               begin\n-                  T := First_Entity (E);\n-                  while Present (T) loop\n-                     if Is_Type (T) then\n-                        Generate_Prim_Op_References (T);\n-                     end if;\n-\n-                     Next_Entity (T);\n-                  end loop;\n-               end;\n-\n             --  If entity has a type, and it is not a generic unit, then\n             --  freeze it first (RM 13.14(10)).\n \n-            elsif Present (Etype (E))\n+            if Present (Etype (E))\n               and then Ekind (E) /= E_Generic_Function\n             then\n                Freeze_And_Append (Etype (E), Loc, Result);\n@@ -3598,10 +3574,6 @@ package body Freeze is\n             end if;\n          end if;\n \n-         --  Generate references to primitive operations for a tagged type\n-\n-         Generate_Prim_Op_References (E);\n-\n          --  Now that all types from which E may depend are frozen, see if the\n          --  size is known at compile time, if it must be unsigned, or if\n          --  strict alignment is required\n@@ -5144,72 +5116,6 @@ package body Freeze is\n       end if;\n    end Is_Fully_Defined;\n \n-   ---------------------------------\n-   -- Generate_Prim_Op_References --\n-   ---------------------------------\n-\n-   procedure Generate_Prim_Op_References (Typ : Entity_Id) is\n-      Base_T    : Entity_Id;\n-      Prim      : Elmt_Id;\n-      Prim_List : Elist_Id;\n-      Ent       : Entity_Id;\n-\n-   begin\n-      --  Handle subtypes of synchronized types\n-\n-      if Ekind (Typ) = E_Protected_Subtype\n-        or else Ekind (Typ) = E_Task_Subtype\n-      then\n-         Base_T := Etype (Typ);\n-      else\n-         Base_T := Typ;\n-      end if;\n-\n-      --  References to primitive operations are only relevant for tagged types\n-\n-      if not Is_Tagged_Type (Base_T)\n-           or else Is_Class_Wide_Type (Base_T)\n-      then\n-         return;\n-      end if;\n-\n-      --  Ada 2005 (AI-345): For synchronized types generate reference\n-      --  to the wrapper that allow us to dispatch calls through their\n-      --  implemented abstract interface types.\n-\n-      --  The check for Present here is to protect against previously\n-      --  reported critical errors.\n-\n-      if Is_Concurrent_Type (Base_T)\n-        and then Present (Corresponding_Record_Type (Base_T))\n-      then\n-         Prim_List := Primitive_Operations\n-                       (Corresponding_Record_Type (Base_T));\n-      else\n-         Prim_List := Primitive_Operations (Base_T);\n-      end if;\n-\n-      if No (Prim_List) then\n-         return;\n-      end if;\n-\n-      Prim := First_Elmt (Prim_List);\n-      while Present (Prim) loop\n-\n-         --  If the operation is derived, get the original for cross-reference\n-         --  reference purposes (it is the original for which we want the xref\n-         --  and for which the comes_from_source test must be performed).\n-\n-         Ent := Node (Prim);\n-         while Present (Alias (Ent)) loop\n-            Ent := Alias (Ent);\n-         end loop;\n-\n-         Generate_Reference (Typ, Ent, 'p', Set_Ref => False);\n-         Next_Elmt (Prim);\n-      end loop;\n-   end Generate_Prim_Op_References;\n-\n    ---------------------------------\n    -- Process_Default_Expressions --\n    ---------------------------------"}, {"sha": "256f2564d8fbf3702cdddf3621a40001b5e77248", "filename": "gcc/ada/g-expect.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac72c9c53779907040fa8dfb0caf199cd890ac32/gcc%2Fada%2Fg-expect.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac72c9c53779907040fa8dfb0caf199cd890ac32/gcc%2Fada%2Fg-expect.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-expect.adb?ref=ac72c9c53779907040fa8dfb0caf199cd890ac32", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2000-2008, AdaCore                     --\n+--                     Copyright (C) 2000-2009, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -660,7 +660,7 @@ package body GNAT.Expect is\n                            else\n                               --  Add what we read to the buffer\n \n-                              if Descriptors (J).Buffer_Index + N - 1 >\n+                              if Descriptors (J).Buffer_Index + N >\n                                 Descriptors (J).Buffer_Size\n                               then\n                                  --  If the user wants to know when we have"}, {"sha": "31dda4134b1ce046a98780e4003893681924b7e4", "filename": "gcc/ada/g-expect.ads", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac72c9c53779907040fa8dfb0caf199cd890ac32/gcc%2Fada%2Fg-expect.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac72c9c53779907040fa8dfb0caf199cd890ac32/gcc%2Fada%2Fg-expect.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-expect.ads?ref=ac72c9c53779907040fa8dfb0caf199cd890ac32", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 2000-2008, AdaCore                     --\n+--                     Copyright (C) 2000-2009, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -63,10 +63,10 @@\n --      Close (Fd);\n \n --  You can also combine multiple regular expressions together, and get the\n---  specific string matching a parenthesis pair by doing something like. If you\n---  expect either \"lang=optional ada\" or \"lang=ada\" from the external process,\n---  you can group the two together, which is more efficient, and simply get the\n---  name of the language by doing:\n+--  specific string matching a parenthesis pair by doing something like this:\n+--  If you expect either \"lang=optional ada\" or \"lang=ada\" from the external\n+--  process, you can group the two together, which is more efficient, and\n+--  simply get the name of the language by doing:\n \n --      declare\n --         Matched : Match_Array (0 .. 2);\n@@ -116,10 +116,10 @@\n --  -- Task Safety --\n --  -----------------\n \n---  This package is not task-safe: there should be not concurrent calls to\n---  the functions defined in this package. In other words, separate tasks\n---  may not access the facilities of this package without synchronization\n---  that serializes access.\n+--  This package is not task-safe: there should not be concurrent calls to the\n+--  functions defined in this package. In other words, separate tasks must not\n+--  access the facilities of this package without synchronization that\n+--  serializes access.\n \n with System;\n with GNAT.OS_Lib;\n@@ -132,21 +132,21 @@ package GNAT.Expect is\n    Null_Pid    : constant Process_Id := 0;\n \n    type Filter_Type is (Output, Input, Died);\n-   --  The signals that are emitted by the Process_Descriptor upon state\n-   --  changed in the child. One can connect to any of this signal through\n-   --  the Add_Filter subprograms.\n+   --  The signals that are emitted by the Process_Descriptor upon state change\n+   --  in the child. One can connect to any of these signals through the\n+   --  Add_Filter subprograms.\n    --\n    --     Output => Every time new characters are read from the process\n    --               associated with Descriptor, the filter is called with\n-   --               these new characters in argument.\n+   --               these new characters in the argument.\n    --\n-   --               Note that output is only generated when the program is\n+   --               Note that output is generated only when the program is\n    --               blocked in a call to Expect.\n    --\n    --     Input  => Every time new characters are written to the process\n    --               associated with Descriptor, the filter is called with\n-   --               these new characters in argument.\n-   --               Note that input is only generated by calls to Send.\n+   --               these new characters in the argument.\n+   --               Note that input is generated only by calls to Send.\n    --\n    --     Died   => The child process has died, or was explicitly killed\n \n@@ -172,16 +172,16 @@ package GNAT.Expect is\n    --  the process and/or automatic parsing of the output.\n    --\n    --  The expect buffer associated with that process can contain at most\n-   --  Buffer_Size characters. Older characters are simply discarded when\n-   --  this buffer is full. Beware that if the buffer is too big, this could\n-   --  slow down the Expect calls if not output is matched, since Expect has\n-   --  to match all the regexp against all the characters in the buffer.\n-   --  If Buffer_Size is 0, there is no limit (i.e. all the characters are kept\n+   --  Buffer_Size characters. Older characters are simply discarded when this\n+   --  buffer is full. Beware that if the buffer is too big, this could slow\n+   --  down the Expect calls if the output not is matched, since Expect has to\n+   --  match all the regexp against all the characters in the buffer. If\n+   --  Buffer_Size is 0, there is no limit (i.e. all the characters are kept\n    --  till Expect matches), but this is slower.\n    --\n    --  If Err_To_Out is True, then the standard error of the spawned process is\n    --  connected to the standard output. This is the only way to get the\n-   --  Except subprograms also match on output on standard error.\n+   --  Except subprograms to also match on output on standard error.\n    --\n    --  Invalid_Process is raised if the process could not be spawned.\n \n@@ -252,20 +252,20 @@ package GNAT.Expect is\n    --\n    --  Str is a string of all these characters.\n    --\n-   --  User_Data, if specified, is a user specific data that will be passed to\n-   --  the filter. Note that no checks are done on this parameter that should\n-   --  be used with cautiousness.\n+   --  User_Data, if specified, is user specific data that will be passed to\n+   --  the filter. Note that no checks are done on this parameter, so it should\n+   --  be used with caution.\n \n    procedure Add_Filter\n      (Descriptor : in out Process_Descriptor;\n       Filter     : Filter_Function;\n       Filter_On  : Filter_Type := Output;\n       User_Data  : System.Address := System.Null_Address;\n       After      : Boolean := False);\n-   --  Add a new filter for one of the filter type. This filter will be\n-   --  run before all the existing filters, unless After is set True,\n-   --  in which case it will be run after existing filters. User_Data\n-   --  is passed as is to the filter procedure.\n+   --  Add a new filter for one of the filter types. This filter will be run\n+   --  before all the existing filters, unless After is set True, in which case\n+   --  it will be run after existing filters. User_Data is passed as is to the\n+   --  filter procedure.\n \n    procedure Remove_Filter\n      (Descriptor : in out Process_Descriptor;\n@@ -277,14 +277,14 @@ package GNAT.Expect is\n      (Descriptor : Process_Descriptor'Class;\n       Str        : String;\n       User_Data  : System.Address := System.Null_Address);\n-   --  Function that can be used a filter and that simply outputs Str on\n+   --  Function that can be used as a filter and that simply outputs Str on\n    --  Standard_Output. This is mainly used for debugging purposes.\n    --  User_Data is ignored.\n \n    procedure Lock_Filters (Descriptor : in out Process_Descriptor);\n    --  Temporarily disables all output and input filters. They will be\n    --  reactivated only when Unlock_Filters has been called as many times as\n-   --  Lock_Filters;\n+   --  Lock_Filters.\n \n    procedure Unlock_Filters (Descriptor : in out Process_Descriptor);\n    --  Unlocks the filters. They are reactivated only if Unlock_Filters\n@@ -318,7 +318,7 @@ package GNAT.Expect is\n    --  If the buffer was full and some characters were discarded\n \n    Expect_Timeout : constant Expect_Match := -2;\n-   --  If not output matching the regexps was found before the timeout\n+   --  If no output matching the regexps was found before the timeout\n \n    function \"+\" (S : String) return GNAT.OS_Lib.String_Access;\n    --  Allocate some memory for the string. This is merely a convenience"}, {"sha": "70964053074b8f2b70c809a35bab214cde771afd", "filename": "gcc/ada/g-socket.adb", "status": "modified", "additions": 58, "deletions": 34, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac72c9c53779907040fa8dfb0caf199cd890ac32/gcc%2Fada%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac72c9c53779907040fa8dfb0caf199cd890ac32/gcc%2Fada%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.adb?ref=ac72c9c53779907040fa8dfb0caf199cd890ac32", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2008, AdaCore                     --\n+--                     Copyright (C) 2001-2009, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1657,6 +1657,41 @@ package body GNAT.Sockets is\n       From.Port := Port_Type (Network_To_Short (Sin.Sin_Port));\n    end Receive_Socket;\n \n+   --------------------\n+   -- Receive_Vector --\n+   --------------------\n+\n+   procedure Receive_Vector\n+     (Socket : Socket_Type;\n+      Vector : Vector_Type;\n+      Count  : out Ada.Streams.Stream_Element_Count;\n+      Flags  : Request_Flag_Type := No_Request_Flag)\n+   is\n+      Res : ssize_t;\n+\n+      Msg : Msghdr :=\n+              (Msg_Name       => System.Null_Address,\n+               Msg_Namelen    => 0,\n+               Msg_Iov        => Vector'Address,\n+               Msg_Iovlen     => Vector'Length,\n+               Msg_Control    => System.Null_Address,\n+               Msg_Controllen => 0,\n+               Msg_Flags      => 0);\n+\n+   begin\n+      Res :=\n+        C_Recvmsg\n+          (C.int (Socket),\n+           Msg'Address,\n+           To_Int (Flags));\n+\n+      if Res = ssize_t (Failure) then\n+         Raise_Socket_Error (Socket_Errno);\n+      end if;\n+\n+      Count := Ada.Streams.Stream_Element_Count (Res);\n+   end Receive_Vector;\n+\n    -------------------\n    -- Resolve_Error --\n    -------------------\n@@ -1782,31 +1817,6 @@ package body GNAT.Sockets is\n       end if;\n    end Resolve_Exception;\n \n-   --------------------\n-   -- Receive_Vector --\n-   --------------------\n-\n-   procedure Receive_Vector\n-     (Socket : Socket_Type;\n-      Vector : Vector_Type;\n-      Count  : out Ada.Streams.Stream_Element_Count)\n-   is\n-      Res : C.int;\n-\n-   begin\n-      Res :=\n-        C_Readv\n-          (C.int (Socket),\n-           Vector'Address,\n-           Vector'Length);\n-\n-      if Res = Failure then\n-         Raise_Socket_Error (Socket_Errno);\n-      end if;\n-\n-      Count := Ada.Streams.Stream_Element_Count (Res);\n-   end Receive_Vector;\n-\n    -----------------\n    -- Send_Socket --\n    -----------------\n@@ -1891,11 +1901,15 @@ package body GNAT.Sockets is\n    procedure Send_Vector\n      (Socket : Socket_Type;\n       Vector : Vector_Type;\n-      Count  : out Ada.Streams.Stream_Element_Count)\n+      Count  : out Ada.Streams.Stream_Element_Count;\n+      Flags  : Request_Flag_Type := No_Request_Flag)\n    is\n-      Res            : C.int;\n-      Iov_Count      : C.int;\n-      This_Iov_Count : C.int;\n+      use type C.size_t;\n+\n+      Res            : ssize_t;\n+      Iov_Count      : C.size_t;\n+      This_Iov_Count : C.size_t;\n+      Msg            : Msghdr;\n \n    begin\n       Count := 0;\n@@ -1913,13 +1927,23 @@ package body GNAT.Sockets is\n \n          pragma Warnings (On);\n \n+         Msg :=\n+           (Msg_Name       => System.Null_Address,\n+            Msg_Namelen    => 0,\n+            Msg_Iov        => Vector\n+                                (Vector'First + Integer (Iov_Count))'Address,\n+            Msg_Iovlen     => This_Iov_Count,\n+            Msg_Control    => System.Null_Address,\n+            Msg_Controllen => 0,\n+            Msg_Flags      => 0);\n+\n          Res :=\n-           C_Writev\n+           C_Sendmsg\n              (C.int (Socket),\n-              Vector (Vector'First + Integer (Iov_Count))'Address,\n-              This_Iov_Count);\n+              Msg'Address,\n+              Set_Forced_Flags (To_Int (Flags)));\n \n-         if Res = Failure then\n+         if Res = ssize_t (Failure) then\n             Raise_Socket_Error (Socket_Errno);\n          end if;\n "}, {"sha": "e84bd0fe996e3585c99dc9f10383dbad6c77479b", "filename": "gcc/ada/g-socket.ads", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac72c9c53779907040fa8dfb0caf199cd890ac32/gcc%2Fada%2Fg-socket.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac72c9c53779907040fa8dfb0caf199cd890ac32/gcc%2Fada%2Fg-socket.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.ads?ref=ac72c9c53779907040fa8dfb0caf199cd890ac32", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2008, AdaCore                     --\n+--                     Copyright (C) 2001-2009, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -913,9 +913,11 @@ package GNAT.Sockets is\n    procedure Receive_Vector\n      (Socket : Socket_Type;\n       Vector : Vector_Type;\n-      Count  : out Ada.Streams.Stream_Element_Count);\n+      Count  : out Ada.Streams.Stream_Element_Count;\n+      Flags  : Request_Flag_Type := No_Request_Flag);\n    --  Receive data from a socket and scatter it into the set of vector\n    --  elements Vector. Count is set to the count of received stream elements.\n+   --  Flags allow control over reception.\n \n    function Resolve_Exception\n      (Occurrence : Ada.Exceptions.Exception_Occurrence) return Error_Type;\n@@ -959,9 +961,11 @@ package GNAT.Sockets is\n    procedure Send_Vector\n      (Socket : Socket_Type;\n       Vector : Vector_Type;\n-      Count  : out Ada.Streams.Stream_Element_Count);\n+      Count  : out Ada.Streams.Stream_Element_Count;\n+      Flags  : Request_Flag_Type := No_Request_Flag);\n    --  Transmit data gathered from the set of vector elements Vector to a\n    --  socket. Count is set to the count of transmitted stream elements.\n+   --  Flags allow control over transmission.\n \n    procedure Set_Socket_Option\n      (Socket : Socket_Type;"}, {"sha": "c77048671bcda745b3bd212e07c0fb589658573e", "filename": "gcc/ada/g-socthi-mingw.adb", "status": "modified", "additions": 49, "deletions": 27, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac72c9c53779907040fa8dfb0caf199cd890ac32/gcc%2Fada%2Fg-socthi-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac72c9c53779907040fa8dfb0caf199cd890ac32/gcc%2Fada%2Fg-socthi-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-mingw.adb?ref=ac72c9c53779907040fa8dfb0caf199cd890ac32", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2008, AdaCore                     --\n+--                     Copyright (C) 2001-2009, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -247,38 +247,49 @@ package body GNAT.Sockets.Thin is\n       return Res;\n    end C_Connect;\n \n-   -------------\n-   -- C_Readv --\n-   -------------\n+   ---------------\n+   -- C_Recvmsg --\n+   ---------------\n \n-   function C_Readv\n-     (Fd     : C.int;\n-      Iov    : System.Address;\n-      Iovcnt : C.int) return C.int\n+   function C_Recvmsg\n+     (S     : C.int;\n+      Msg   : System.Address;\n+      Flags : C.int) return ssize_t\n    is\n       Res   : C.int;\n       Count : C.int := 0;\n \n-      Iovec : array (0 .. Iovcnt - 1) of Vector_Element;\n-      for Iovec'Address use Iov;\n+      MH : Msghdr;\n+      for MH'Address use Msg;\n+\n+      Iovec : array (0 .. MH.Msg_Iovlen - 1) of Vector_Element;\n+      for Iovec'Address use MH.Msg_Iov'Address;\n       pragma Import (Ada, Iovec);\n \n+      pragma Unreferenced (Flags);\n+\n    begin\n+      --  Windows does not provide an implementation of recvmsg().  The\n+      --  spec for WSARecvMsg() is incompatible with the data types we\n+      --  define, and is not available in all versions of Windows.  So,\n+      --  we'll use C_Recv instead.  Note that this means the Flags\n+      --  argument is ignored.\n+\n       for J in Iovec'Range loop\n          Res := C_Recv\n-           (Fd,\n+           (S,\n             Iovec (J).Base.all'Address,\n             C.int (Iovec (J).Length),\n             0);\n \n          if Res < 0 then\n-            return Res;\n+            return ssize_t (Res);\n          else\n             Count := Count + Res;\n          end if;\n       end loop;\n-      return Count;\n-   end C_Readv;\n+      return ssize_t (Count);\n+   end C_Recvmsg;\n \n    --------------\n    -- C_Select --\n@@ -372,40 +383,51 @@ package body GNAT.Sockets.Thin is\n       return Res;\n    end C_Select;\n \n-   --------------\n-   -- C_Writev --\n-   --------------\n+   ---------------\n+   -- C_Sendmsg --\n+   ---------------\n \n-   function C_Writev\n-     (Fd     : C.int;\n-      Iov    : System.Address;\n-      Iovcnt : C.int) return C.int\n+   function C_Sendmsg\n+     (S     : C.int;\n+      Msg   : System.Address;\n+      Flags : C.int) return ssize_t\n    is\n       Res   : C.int;\n       Count : C.int := 0;\n \n-      Iovec : array (0 .. Iovcnt - 1) of Vector_Element;\n-      for Iovec'Address use Iov;\n+      MH : Msghdr;\n+      for MH'Address use Msg;\n+\n+      Iovec : array (0 .. MH.Msg_Iovlen - 1) of Vector_Element;\n+      for Iovec'Address use MH.Msg_Iov'Address;\n       pragma Import (Ada, Iovec);\n \n+      pragma Unreferenced (Flags);\n+\n    begin\n+      --  Windows does not provide an implementation of sendmsg().  The\n+      --  spec for WSASendMsg() is incompatible with the data types we\n+      --  define, and is not available in all versions of Windows.  So,\n+      --  we'll use C_Sendto instead.  Note that this means the Flags\n+      --  argument is ignored.\n+\n       for J in Iovec'Range loop\n          Res := C_Sendto\n-           (Fd,\n+           (S,\n             Iovec (J).Base.all'Address,\n             C.int (Iovec (J).Length),\n             Flags => 0,\n             To    => null,\n             Tolen => 0);\n \n          if Res < 0 then\n-            return Res;\n+            return ssize_t (Res);\n          else\n             Count := Count + Res;\n          end if;\n       end loop;\n-      return Count;\n-   end C_Writev;\n+      return ssize_t (Count);\n+   end C_Sendmsg;\n \n    --------------\n    -- Finalize --"}, {"sha": "f06f7a80a5505f034c3b138ea272c4282e5556c1", "filename": "gcc/ada/g-socthi-mingw.ads", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac72c9c53779907040fa8dfb0caf199cd890ac32/gcc%2Fada%2Fg-socthi-mingw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac72c9c53779907040fa8dfb0caf199cd890ac32/gcc%2Fada%2Fg-socthi-mingw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-mingw.ads?ref=ac72c9c53779907040fa8dfb0caf199cd890ac32", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2008, AdaCore                     --\n+--                     Copyright (C) 2001-2009, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -49,6 +49,22 @@ package GNAT.Sockets.Thin is\n \n    package C renames Interfaces.C;\n \n+   use type C.size_t;\n+   type ssize_t is range -(2 ** (C.size_t'Size - 1))\n+     .. +(2 ** (C.size_t'Size - 1) - 1);\n+   --  Signed type of the same size as size_t\n+\n+   type Msghdr is record\n+      Msg_Name       : System.Address;\n+      Msg_Namelen    : C.unsigned;\n+      Msg_Iov        : System.Address;\n+      Msg_Iovlen     : C.size_t;\n+      Msg_Control    : System.Address;\n+      Msg_Controllen : C.size_t;\n+      Msg_Flags      : C.int;\n+   end record;\n+   pragma Convention (C, Msghdr);\n+\n    function Socket_Errno return Integer;\n    --  Returns last socket error number\n \n@@ -124,11 +140,6 @@ package GNAT.Sockets.Thin is\n      (S       : C.int;\n       Backlog : C.int) return C.int;\n \n-   function C_Readv\n-     (Fd     : C.int;\n-      Iov    : System.Address;\n-      Iovcnt : C.int) return C.int;\n-\n    function C_Recv\n      (S     : C.int;\n       Msg   : System.Address;\n@@ -143,13 +154,23 @@ package GNAT.Sockets.Thin is\n       From    : Sockaddr_In_Access;\n       Fromlen : not null access C.int) return C.int;\n \n+   function C_Recvmsg\n+     (S     : C.int;\n+      Msg   : System.Address;\n+      Flags : C.int) return ssize_t;\n+\n    function C_Select\n      (Nfds      : C.int;\n       Readfds   : access Fd_Set;\n       Writefds  : access Fd_Set;\n       Exceptfds : access Fd_Set;\n       Timeout   : Timeval_Access) return C.int;\n \n+   function C_Sendmsg\n+     (S     : C.int;\n+      Msg   : System.Address;\n+      Flags : C.int) return ssize_t;\n+\n    function C_Sendto\n      (S     : C.int;\n       Msg   : System.Address;\n@@ -180,11 +201,6 @@ package GNAT.Sockets.Thin is\n    function C_System\n      (Command : System.Address) return C.int;\n \n-   function C_Writev\n-     (Fd     : C.int;\n-      Iov    : System.Address;\n-      Iovcnt : C.int) return C.int;\n-\n    function WSAStartup\n      (WS_Version     : Interfaces.C.int;\n       WSADataAddress : System.Address) return Interfaces.C.int;"}, {"sha": "145768056027011892c75cc368b51c4ac6bf4bc2", "filename": "gcc/ada/g-socthi-vms.adb", "status": "modified", "additions": 61, "deletions": 69, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac72c9c53779907040fa8dfb0caf199cd890ac32/gcc%2Fada%2Fg-socthi-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac72c9c53779907040fa8dfb0caf199cd890ac32/gcc%2Fada%2Fg-socthi-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-vms.adb?ref=ac72c9c53779907040fa8dfb0caf199cd890ac32", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2008, AdaCore                     --\n+--                     Copyright (C) 2001-2009, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -91,6 +91,18 @@ package body GNAT.Sockets.Thin is\n       Fromlen : not null access C.int) return C.int;\n    pragma Import (C, Syscall_Recvfrom, \"recvfrom\");\n \n+   function Syscall_Recvmsg\n+     (S     : C.int;\n+      Msg   : System.Address;\n+      Flags : C.int) return C.int;\n+   pragma Import (C, Syscall_Recvmsg, \"recvmsg\");\n+\n+   function Syscall_Sendmsg\n+     (S     : C.int;\n+      Msg   : System.Address;\n+      Flags : C.int) return C.int;\n+   pragma Import (C, Syscall_Sendmsg, \"sendmsg\");\n+\n    function Syscall_Sendto\n      (S     : C.int;\n       Msg   : System.Address;\n@@ -277,6 +289,54 @@ package body GNAT.Sockets.Thin is\n       return Res;\n    end C_Recvfrom;\n \n+   ---------------\n+   -- C_Recvmsg --\n+   ---------------\n+\n+   function C_Recvmsg\n+     (S     : C.int;\n+      Msg   : System.Address;\n+      Flags : C.int) return ssize_t\n+   is\n+      Res : C.int;\n+\n+   begin\n+      loop\n+         Res := Syscall_Recvmsg (S, Msg, Flags);\n+         exit when SOSC.Thread_Blocking_IO\n+           or else Res /= Failure\n+           or else Non_Blocking_Socket (S)\n+           or else Errno /= SOSC.EWOULDBLOCK;\n+         delay Quantum;\n+      end loop;\n+\n+      return ssize_t (Res);\n+   end C_Recvmsg;\n+\n+   ---------------\n+   -- C_Sendmsg --\n+   ---------------\n+\n+   function C_Sendmsg\n+     (S     : C.int;\n+      Msg   : System.Address;\n+      Flags : C.int) return ssize_t\n+   is\n+      Res : C.int;\n+\n+   begin\n+      loop\n+         Res := Syscall_Sendmsg (S, Msg, Flags);\n+         exit when SOSC.Thread_Blocking_IO\n+           or else Res /= Failure\n+           or else Non_Blocking_Socket (S)\n+           or else Errno /= SOSC.EWOULDBLOCK;\n+         delay Quantum;\n+      end loop;\n+\n+      return ssize_t (Res);\n+   end C_Sendmsg;\n+\n    --------------\n    -- C_Sendto --\n    --------------\n@@ -416,72 +476,4 @@ package body GNAT.Sockets.Thin is\n       end if;\n    end Socket_Error_Message;\n \n-   -------------\n-   -- C_Readv --\n-   -------------\n-\n-   function C_Readv\n-     (Fd     : C.int;\n-      Iov    : System.Address;\n-      Iovcnt : C.int) return C.int\n-   is\n-      Res : C.int;\n-      Count : C.int := 0;\n-\n-      Iovec : array (0 .. Iovcnt - 1) of Vector_Element;\n-      for Iovec'Address use Iov;\n-      pragma Import (Ada, Iovec);\n-\n-   begin\n-      for J in Iovec'Range loop\n-         Res := C_Recv\n-           (Fd,\n-            Iovec (J).Base.all'Address,\n-            Interfaces.C.int (Iovec (J).Length),\n-            0);\n-\n-         if Res < 0 then\n-            return Res;\n-         else\n-            Count := Count + Res;\n-         end if;\n-      end loop;\n-      return Count;\n-   end C_Readv;\n-\n-   --------------\n-   -- C_Writev --\n-   --------------\n-\n-   function C_Writev\n-     (Fd     : C.int;\n-      Iov    : System.Address;\n-      Iovcnt : C.int) return C.int\n-   is\n-      Res : C.int;\n-      Count : C.int := 0;\n-\n-      Iovec : array (0 .. Iovcnt - 1) of Vector_Element;\n-      for Iovec'Address use Iov;\n-      pragma Import (Ada, Iovec);\n-\n-   begin\n-      for J in Iovec'Range loop\n-         Res := C_Sendto\n-           (Fd,\n-            Iovec (J).Base.all'Address,\n-            Interfaces.C.int (Iovec (J).Length),\n-            SOSC.MSG_Forced_Flags,\n-            To    => null,\n-            Tolen => 0);\n-\n-         if Res < 0 then\n-            return Res;\n-         else\n-            Count := Count + Res;\n-         end if;\n-      end loop;\n-      return Count;\n-   end C_Writev;\n-\n end GNAT.Sockets.Thin;"}, {"sha": "9725d91e8550dd0a33ef88d212ba3daf35d8ebe3", "filename": "gcc/ada/g-socthi-vms.ads", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac72c9c53779907040fa8dfb0caf199cd890ac32/gcc%2Fada%2Fg-socthi-vms.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac72c9c53779907040fa8dfb0caf199cd890ac32/gcc%2Fada%2Fg-socthi-vms.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-vms.ads?ref=ac72c9c53779907040fa8dfb0caf199cd890ac32", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 2002-2008, AdaCore                     --\n+--                     Copyright (C) 2002-2009, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -52,6 +52,22 @@ package GNAT.Sockets.Thin is\n \n    package C renames Interfaces.C;\n \n+   use type C.size_t;\n+   type ssize_t is range -(2 ** (C.size_t'Size - 1))\n+     .. +(2 ** (C.size_t'Size - 1) - 1);\n+   --  Signed type of the same size as size_t\n+\n+   type Msghdr is record\n+      Msg_Name       : System.Address;\n+      Msg_Namelen    : C.int;\n+      Msg_Iov        : System.Address;\n+      Msg_Iovlen     : C.int;\n+      Msg_Control    : System.Address;\n+      Msg_Controllen : C.int;\n+      Msg_Flags      : C.int;\n+   end record;\n+   pragma Convention (C, Msghdr);\n+\n    function Socket_Errno return Integer renames GNAT.OS_Lib.Errno;\n    --  Returns last socket error number\n \n@@ -127,11 +143,6 @@ package GNAT.Sockets.Thin is\n      (S       : C.int;\n       Backlog : C.int) return C.int;\n \n-   function C_Readv\n-     (Fd     : C.int;\n-      Iov    : System.Address;\n-      Iovcnt : C.int) return C.int;\n-\n    function C_Recv\n      (S     : C.int;\n       Msg   : System.Address;\n@@ -146,13 +157,23 @@ package GNAT.Sockets.Thin is\n       From    : Sockaddr_In_Access;\n       Fromlen : not null access C.int) return C.int;\n \n+   function C_Recvmsg\n+     (S     : C.int;\n+      Msg   : System.Address;\n+      Flags : C.int) return ssize_t;\n+\n    function C_Select\n      (Nfds      : C.int;\n       Readfds   : access Fd_Set;\n       Writefds  : access Fd_Set;\n       Exceptfds : access Fd_Set;\n       Timeout   : Timeval_Access) return C.int;\n \n+   function C_Sendmsg\n+     (S     : C.int;\n+      Msg   : System.Address;\n+      Flags : C.int) return ssize_t;\n+\n    function C_Sendto\n      (S     : C.int;\n       Msg   : System.Address;\n@@ -183,11 +204,6 @@ package GNAT.Sockets.Thin is\n    function C_System\n      (Command : System.Address) return C.int;\n \n-   function C_Writev\n-     (Fd     : C.int;\n-      Iov    : System.Address;\n-      Iovcnt : C.int) return C.int;\n-\n    -------------------------------------------------------\n    -- Signalling file descriptors for selector abortion --\n    -------------------------------------------------------"}, {"sha": "0f682f4c04eaf8be806d669d0ff1ab904629f6f6", "filename": "gcc/ada/g-socthi-vxworks.adb", "status": "modified", "additions": 61, "deletions": 1, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac72c9c53779907040fa8dfb0caf199cd890ac32/gcc%2Fada%2Fg-socthi-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac72c9c53779907040fa8dfb0caf199cd890ac32/gcc%2Fada%2Fg-socthi-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-vxworks.adb?ref=ac72c9c53779907040fa8dfb0caf199cd890ac32", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2002-2008, AdaCore                     --\n+--                     Copyright (C) 2002-2009, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -102,6 +102,18 @@ package body GNAT.Sockets.Thin is\n       Fromlen : not null access C.int) return C.int;\n    pragma Import (C, Syscall_Recvfrom, \"recvfrom\");\n \n+   function Syscall_Recvmsg\n+     (S     : C.int;\n+      Msg   : System.Address;\n+      Flags : C.int) return C.int;\n+   pragma Import (C, Syscall_Recvmsg, \"recvmsg\");\n+\n+   function Syscall_Sendmsg\n+     (S     : C.int;\n+      Msg   : System.Address;\n+      Flags : C.int) return C.int;\n+   pragma Import (C, Syscall_Sendmsg, \"sendmsg\");\n+\n    function Syscall_Sendto\n      (S     : C.int;\n       Msg   : System.Address;\n@@ -291,6 +303,54 @@ package body GNAT.Sockets.Thin is\n       return Res;\n    end C_Recvfrom;\n \n+   ---------------\n+   -- C_Recvmsg --\n+   ---------------\n+\n+   function C_Recvmsg\n+     (S     : C.int;\n+      Msg   : System.Address;\n+      Flags : C.int) return ssize_t\n+   is\n+      Res : C.int;\n+\n+   begin\n+      loop\n+         Res := Syscall_Recvmsg (S, Msg, Flags);\n+         exit when SOSC.Thread_Blocking_IO\n+           or else Res /= Failure\n+           or else Non_Blocking_Socket (S)\n+           or else Errno /= SOSC.EWOULDBLOCK;\n+         delay Quantum;\n+      end loop;\n+\n+      return ssize_t (Res);\n+   end C_Recvmsg;\n+\n+   ---------------\n+   -- C_Sendmsg --\n+   ---------------\n+\n+   function C_Sendmsg\n+     (S     : C.int;\n+      Msg   : System.Address;\n+      Flags : C.int) return ssize_t\n+   is\n+      Res : C.int;\n+\n+   begin\n+      loop\n+         Res := Syscall_Sendmsg (S, Msg, Flags);\n+         exit when SOSC.Thread_Blocking_IO\n+           or else Res /= Failure\n+           or else Non_Blocking_Socket (S)\n+           or else Errno /= SOSC.EWOULDBLOCK;\n+         delay Quantum;\n+      end loop;\n+\n+      return ssize_t (Res);\n+   end C_Sendmsg;\n+\n    --------------\n    -- C_Sendto --\n    --------------"}, {"sha": "91641550338fd9eb531673a1c8478dcd20da3980", "filename": "gcc/ada/g-socthi-vxworks.ads", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac72c9c53779907040fa8dfb0caf199cd890ac32/gcc%2Fada%2Fg-socthi-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac72c9c53779907040fa8dfb0caf199cd890ac32/gcc%2Fada%2Fg-socthi-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-vxworks.ads?ref=ac72c9c53779907040fa8dfb0caf199cd890ac32", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 2002-2008, AdaCore                     --\n+--                     Copyright (C) 2002-2009, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -50,6 +50,22 @@ package GNAT.Sockets.Thin is\n \n    package C renames Interfaces.C;\n \n+   use type C.size_t;\n+   type ssize_t is range -(2 ** (C.size_t'Size - 1))\n+     .. +(2 ** (C.size_t'Size - 1) - 1);\n+   --  Signed type of the same size as size_t\n+\n+   type Msghdr is record\n+      Msg_Name       : System.Address;\n+      Msg_Namelen    : C.unsigned;\n+      Msg_Iov        : System.Address;\n+      Msg_Iovlen     : C.int;\n+      Msg_Control    : System.Address;\n+      Msg_Controllen : C.unsigned;\n+      Msg_Flags      : C.int;\n+   end record;\n+   pragma Convention (C, Msghdr);\n+\n    function Socket_Errno return Integer renames GNAT.OS_Lib.Errno;\n    --  Returns last socket error number\n \n@@ -125,11 +141,6 @@ package GNAT.Sockets.Thin is\n      (S       : C.int;\n       Backlog : C.int) return C.int;\n \n-   function C_Readv\n-     (Fd     : C.int;\n-      Iov    : System.Address;\n-      Iovcnt : C.int) return C.int;\n-\n    function C_Recv\n      (S     : C.int;\n       Msg   : System.Address;\n@@ -144,13 +155,23 @@ package GNAT.Sockets.Thin is\n       From    : Sockaddr_In_Access;\n       Fromlen : not null access C.int) return C.int;\n \n+   function C_Recvmsg\n+     (S     : C.int;\n+      Msg   : System.Address;\n+      Flags : C.int) return ssize_t;\n+\n    function C_Select\n      (Nfds      : C.int;\n       Readfds   : access Fd_Set;\n       Writefds  : access Fd_Set;\n       Exceptfds : access Fd_Set;\n       Timeout   : Timeval_Access) return C.int;\n \n+   function C_Sendmsg\n+     (S     : C.int;\n+      Msg   : System.Address;\n+      Flags : C.int) return ssize_t;\n+\n    function C_Sendto\n      (S     : C.int;\n       Msg   : System.Address;\n@@ -181,11 +202,6 @@ package GNAT.Sockets.Thin is\n    function C_System\n      (Command : System.Address) return C.int;\n \n-   function C_Writev\n-     (Fd     : C.int;\n-      Iov    : System.Address;\n-      Iovcnt : C.int) return C.int;\n-\n    -------------------------------------------------------\n    -- Signalling file descriptors for selector abortion --\n    -------------------------------------------------------\n@@ -224,11 +240,9 @@ private\n    pragma Import (C, C_Getsockname, \"getsockname\");\n    pragma Import (C, C_Getsockopt, \"getsockopt\");\n    pragma Import (C, C_Listen, \"listen\");\n-   pragma Import (C, C_Readv, \"readv\");\n    pragma Import (C, C_Select, \"select\");\n    pragma Import (C, C_Setsockopt, \"setsockopt\");\n    pragma Import (C, C_Shutdown, \"shutdown\");\n    pragma Import (C, C_Strerror, \"strerror\");\n    pragma Import (C, C_System, \"system\");\n-   pragma Import (C, C_Writev, \"writev\");\n end GNAT.Sockets.Thin;"}, {"sha": "daf69140ed1612306db9ec10736877639cb1a088", "filename": "gcc/ada/g-socthi.adb", "status": "modified", "additions": 61, "deletions": 1, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac72c9c53779907040fa8dfb0caf199cd890ac32/gcc%2Fada%2Fg-socthi.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac72c9c53779907040fa8dfb0caf199cd890ac32/gcc%2Fada%2Fg-socthi.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi.adb?ref=ac72c9c53779907040fa8dfb0caf199cd890ac32", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2008, AdaCore                     --\n+--                     Copyright (C) 2001-2009, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -98,6 +98,18 @@ package body GNAT.Sockets.Thin is\n       Fromlen : not null access C.int) return C.int;\n    pragma Import (C, Syscall_Recvfrom, \"recvfrom\");\n \n+   function Syscall_Recvmsg\n+     (S     : C.int;\n+      Msg   : System.Address;\n+      Flags : C.int) return ssize_t;\n+   pragma Import (C, Syscall_Recvmsg, \"recvmsg\");\n+\n+   function Syscall_Sendmsg\n+     (S     : C.int;\n+      Msg   : System.Address;\n+      Flags : C.int) return ssize_t;\n+   pragma Import (C, Syscall_Sendmsg, \"sendmsg\");\n+\n    function Syscall_Sendto\n      (S     : C.int;\n       Msg   : System.Address;\n@@ -296,6 +308,54 @@ package body GNAT.Sockets.Thin is\n       return Res;\n    end C_Recvfrom;\n \n+   ---------------\n+   -- C_Recvmsg --\n+   ---------------\n+\n+   function C_Recvmsg\n+     (S     : C.int;\n+      Msg   : System.Address;\n+      Flags : C.int) return ssize_t\n+   is\n+      Res : ssize_t;\n+\n+   begin\n+      loop\n+         Res := Syscall_Recvmsg (S, Msg, Flags);\n+         exit when SOSC.Thread_Blocking_IO\n+           or else Res /= ssize_t (Failure)\n+           or else Non_Blocking_Socket (S)\n+           or else Errno /= SOSC.EWOULDBLOCK;\n+         delay Quantum;\n+      end loop;\n+\n+      return Res;\n+   end C_Recvmsg;\n+\n+   ---------------\n+   -- C_Sendmsg --\n+   ---------------\n+\n+   function C_Sendmsg\n+     (S     : C.int;\n+      Msg   : System.Address;\n+      Flags : C.int) return ssize_t\n+   is\n+      Res : ssize_t;\n+\n+   begin\n+      loop\n+         Res := Syscall_Sendmsg (S, Msg, Flags);\n+         exit when SOSC.Thread_Blocking_IO\n+           or else Res /= ssize_t (Failure)\n+           or else Non_Blocking_Socket (S)\n+           or else Errno /= SOSC.EWOULDBLOCK;\n+         delay Quantum;\n+      end loop;\n+\n+      return Res;\n+   end C_Sendmsg;\n+\n    --------------\n    -- C_Sendto --\n    --------------"}, {"sha": "31cbce8148f9f992929663e9da73a54a46ad215c", "filename": "gcc/ada/g-socthi.ads", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac72c9c53779907040fa8dfb0caf199cd890ac32/gcc%2Fada%2Fg-socthi.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac72c9c53779907040fa8dfb0caf199cd890ac32/gcc%2Fada%2Fg-socthi.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi.ads?ref=ac72c9c53779907040fa8dfb0caf199cd890ac32", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2008, AdaCore                     --\n+--                     Copyright (C) 2001-2009, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -54,6 +54,22 @@ package GNAT.Sockets.Thin is\n \n    package C renames Interfaces.C;\n \n+   use type C.size_t;\n+   type ssize_t is range -(2 ** (C.size_t'Size - 1))\n+     .. +(2 ** (C.size_t'Size - 1) - 1);\n+   --  Signed type of the same size as size_t\n+\n+   type Msghdr is record\n+      Msg_Name       : System.Address;\n+      Msg_Namelen    : C.unsigned;\n+      Msg_Iov        : System.Address;\n+      Msg_Iovlen     : C.size_t;\n+      Msg_Control    : System.Address;\n+      Msg_Controllen : C.size_t;\n+      Msg_Flags      : C.int;\n+   end record;\n+   pragma Convention (C, Msghdr);\n+\n    function Socket_Errno return Integer renames GNAT.OS_Lib.Errno;\n    --  Returns last socket error number\n \n@@ -126,11 +142,6 @@ package GNAT.Sockets.Thin is\n      (S       : C.int;\n       Backlog : C.int) return C.int;\n \n-   function C_Readv\n-     (Fd     : C.int;\n-      Iov    : System.Address;\n-      Iovcnt : C.int) return C.int;\n-\n    function C_Recv\n      (S     : C.int;\n       Msg   : System.Address;\n@@ -145,13 +156,23 @@ package GNAT.Sockets.Thin is\n       From    : Sockaddr_In_Access;\n       Fromlen : not null access C.int) return C.int;\n \n+   function C_Recvmsg\n+     (S     : C.int;\n+      Msg   : System.Address;\n+      Flags : C.int) return ssize_t;\n+\n    function C_Select\n      (Nfds      : C.int;\n       Readfds   : access Fd_Set;\n       Writefds  : access Fd_Set;\n       Exceptfds : access Fd_Set;\n       Timeout   : Timeval_Access) return C.int;\n \n+   function C_Sendmsg\n+     (S     : C.int;\n+      Msg   : System.Address;\n+      Flags : C.int) return ssize_t;\n+\n    function C_Sendto\n      (S     : C.int;\n       Msg   : System.Address;\n@@ -182,11 +203,6 @@ package GNAT.Sockets.Thin is\n    function C_System\n      (Command : System.Address) return C.int;\n \n-   function C_Writev\n-     (Fd     : C.int;\n-      Iov    : System.Address;\n-      Iovcnt : C.int) return C.int;\n-\n    -------------------------------------------------------\n    -- Signalling file descriptors for selector abortion --\n    -------------------------------------------------------\n@@ -249,13 +265,11 @@ private\n    pragma Import (C, C_Getsockname, \"getsockname\");\n    pragma Import (C, C_Getsockopt, \"getsockopt\");\n    pragma Import (C, C_Listen, \"listen\");\n-   pragma Import (C, C_Readv, \"readv\");\n    pragma Import (C, C_Select, \"select\");\n    pragma Import (C, C_Setsockopt, \"setsockopt\");\n    pragma Import (C, C_Shutdown, \"shutdown\");\n    pragma Import (C, C_Strerror, \"strerror\");\n    pragma Import (C, C_System, \"system\");\n-   pragma Import (C, C_Writev, \"writev\");\n \n    pragma Import (C, Nonreentrant_Gethostbyname, \"gethostbyname\");\n    pragma Import (C, Nonreentrant_Gethostbyaddr, \"gethostbyaddr\");"}, {"sha": "c2e1c59753c2a4f911dd58d01b59e80fe5de6f82", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 99, "deletions": 1, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac72c9c53779907040fa8dfb0caf199cd890ac32/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac72c9c53779907040fa8dfb0caf199cd890ac32/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=ac72c9c53779907040fa8dfb0caf199cd890ac32", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1998-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1998-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -93,6 +93,16 @@ package body Lib.Xref is\n      Table_Increment      => Alloc.Xrefs_Increment,\n      Table_Name           => \"Xrefs\");\n \n+   ------------------------\n+   --  Local Subprograms --\n+   ------------------------\n+\n+   procedure Generate_Prim_Op_References (Typ : Entity_Id);\n+   --  For a tagged type, generate implicit references to its primitive\n+   --  operations, for source navigation. This is done right before emitting\n+   --  cross-reference information rather than at the freeze point of the type\n+   --  in order to handle late bodies that are primitive operations.\n+\n    -------------------------\n    -- Generate_Definition --\n    -------------------------\n@@ -196,6 +206,72 @@ package body Lib.Xref is\n       end if;\n    end Generate_Operator_Reference;\n \n+   ---------------------------------\n+   -- Generate_Prim_Op_References --\n+   ---------------------------------\n+\n+   procedure Generate_Prim_Op_References (Typ : Entity_Id) is\n+      Base_T    : Entity_Id;\n+      Prim      : Elmt_Id;\n+      Prim_List : Elist_Id;\n+      Ent       : Entity_Id;\n+\n+   begin\n+      --  Handle subtypes of synchronized types\n+\n+      if Ekind (Typ) = E_Protected_Subtype\n+        or else Ekind (Typ) = E_Task_Subtype\n+      then\n+         Base_T := Etype (Typ);\n+      else\n+         Base_T := Typ;\n+      end if;\n+\n+      --  References to primitive operations are only relevant for tagged types\n+\n+      if not Is_Tagged_Type (Base_T)\n+        or else Is_Class_Wide_Type (Base_T)\n+      then\n+         return;\n+      end if;\n+\n+      --  Ada 2005 (AI-345): For synchronized types generate reference\n+      --  to the wrapper that allow us to dispatch calls through their\n+      --  implemented abstract interface types.\n+\n+      --  The check for Present here is to protect against previously\n+      --  reported critical errors.\n+\n+      if Is_Concurrent_Type (Base_T)\n+        and then Present (Corresponding_Record_Type (Base_T))\n+      then\n+         Prim_List := Primitive_Operations\n+                       (Corresponding_Record_Type (Base_T));\n+      else\n+         Prim_List := Primitive_Operations (Base_T);\n+      end if;\n+\n+      if No (Prim_List) then\n+         return;\n+      end if;\n+\n+      Prim := First_Elmt (Prim_List);\n+      while Present (Prim) loop\n+\n+         --  If the operation is derived, get the original for cross-reference\n+         --  reference purposes (it is the original for which we want the xref\n+         --  and for which the comes_from_source test must be performed).\n+\n+         Ent := Node (Prim);\n+         while Present (Alias (Ent)) loop\n+            Ent := Alias (Ent);\n+         end loop;\n+\n+         Generate_Reference (Typ, Ent, 'p', Set_Ref => False);\n+         Next_Elmt (Prim);\n+      end loop;\n+   end Generate_Prim_Op_References;\n+\n    ------------------------\n    -- Generate_Reference --\n    ------------------------\n@@ -1083,6 +1159,26 @@ package body Lib.Xref is\n          return;\n       end if;\n \n+      --  First we add references to the primitive operations of tagged\n+      --  types declared in the main unit.\n+\n+      Handle_Prim_Ops : declare\n+         Ent  : Entity_Id;\n+\n+      begin\n+         for J in 1 .. Xrefs.Last loop\n+            Ent := Xrefs.Table (J).Ent;\n+\n+            if Is_Type (Ent)\n+              and then Is_Tagged_Type (Ent)\n+              and then Ent = Base_Type (Ent)\n+              and then In_Extended_Main_Source_Unit (Ent)\n+            then\n+               Generate_Prim_Op_References (Ent);\n+            end if;\n+         end loop;\n+      end Handle_Prim_Ops;\n+\n       --  Before we go ahead and output the references we have a problem\n       --  that needs dealing with. So far we have captured things that are\n       --  definitely referenced by the main unit, or defined in the main\n@@ -1198,9 +1294,11 @@ package body Lib.Xref is\n \n                   function Parent_Op (E : Entity_Id) return Entity_Id is\n                      Orig_Op : constant Entity_Id := Alias (E);\n+\n                   begin\n                      if No (Orig_Op) then\n                         return Empty;\n+\n                      elsif not Comes_From_Source (E)\n                        and then not Has_Xref_Entry (Orig_Op)\n                        and then Comes_From_Source (Orig_Op)"}]}