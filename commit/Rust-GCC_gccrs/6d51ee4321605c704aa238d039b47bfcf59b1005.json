{"sha": "6d51ee4321605c704aa238d039b47bfcf59b1005", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ1MWVlNDMyMTYwNWM3MDRhYTIzOGQwMzliNDdiZmNmNTliMTAwNQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-01T00:16:58Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-01T00:16:58Z"}, "message": "Daily bump.", "tree": {"sha": "1e6190546c3457cb88351d069640b847d5c0f892", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e6190546c3457cb88351d069640b847d5c0f892"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d51ee4321605c704aa238d039b47bfcf59b1005", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d51ee4321605c704aa238d039b47bfcf59b1005", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d51ee4321605c704aa238d039b47bfcf59b1005", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d51ee4321605c704aa238d039b47bfcf59b1005/comments", "author": null, "committer": null, "parents": [{"sha": "9c6344c10de1c90015c68adfb880291af980b886", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c6344c10de1c90015c68adfb880291af980b886", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c6344c10de1c90015c68adfb880291af980b886"}], "stats": {"total": 356, "additions": 355, "deletions": 1}, "files": [{"sha": "c72cbcaae10c8a705073d2a686f4c589447f1fad", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d51ee4321605c704aa238d039b47bfcf59b1005/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d51ee4321605c704aa238d039b47bfcf59b1005/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=6d51ee4321605c704aa238d039b47bfcf59b1005", "patch": "@@ -1,3 +1,8 @@\n+2021-08-31  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* Makefile.def: Add all-gdb dependency on all-libbacktrace.\n+\t* Makefile.in: Regenerate.\n+\n 2021-08-21  Dragan Mladjenovic  <Dragan.Mladjenovic@syrmia.com>\n \n \t* MAINTAINERS: Add myself for write after approval."}, {"sha": "2cd34aa0f83a2df5f613221af5c2fe935944e8ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d51ee4321605c704aa238d039b47bfcf59b1005/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d51ee4321605c704aa238d039b47bfcf59b1005/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d51ee4321605c704aa238d039b47bfcf59b1005", "patch": "@@ -1,3 +1,149 @@\n+2021-08-31  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* tree.c (walk_tree_1) <OMP_CLAUSE_TILE>: Handle three operands.\n+\n+2021-08-31  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* omp-general.h (omp_is_reference): Rename to...\n+\t(omp_privatize_by_reference): ... this.  Adjust all users...\n+\t* omp-general.c: ... here, ...\n+\t* gimplify.c: ... here, ...\n+\t* omp-expand.c: ... here, ...\n+\t* omp-low.c: ... here.\n+\n+2021-08-31  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gimple-ssa-warn-access.cc (maybe_warn_alloc_args_overflow): Test\n+\tpointer element for equality to zero, not that of the cotaining\n+\tarray.\n+\n+2021-08-31  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gcc-rich-location.h (gcc_rich_location): Make ctor explicit.\n+\n+2021-08-31  Martin Sebor  <msebor@redhat.com>\n+\n+\t* function.h (function): Add comments.\n+\t(get_range_query): Same.  Add attribute returns nonnull.\n+\n+2021-08-31  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* expr.c (convert_modes): Don't use subreg_promoted_mode on a\n+\tSUBREG if it can't be guaranteed to a SUBREG_PROMOTED_VAR_P set.\n+\tInstead use the standard (safer) is_a <scalar_int_mode> idiom.\n+\n+2021-08-31  Jeff Law  <jlaw@localhost.localdomain>\n+\n+\t* config.gcc (cris-*-elf, cris-*-none): Remove dbxelf.h from\n+\ttm_file.\n+\t(m32r-*-elf, m32rle-*-elf, m32r-*-linux): Likewise.\n+\t(mn10300-*-*, am33_2.0-*-linux*): Likewise.\n+\t(xtensa*-*-elf, xtensa*-*-linux, xtensa*-*-uclinux): Likewise.\n+\t(m32c-*-elf*, m32c-*-rtems*): Likewise.\n+\t* config/cris/cris.h (DBX_NO_XREFS): Remove.\n+\t(DBX_CONTIN_LENGTH, DBX_CONTIN_CHAR): Likewise.\n+\t* config/m32r/m32r.h (DBXOUT_SOURCE_LINE): Likewise.\n+\t(DBX_DEBUGGING_INFO, DBX_CONTIN_LENGTH): Likewise.\n+\t* config/mn10300/mn10300.h (DEFAULT_GDB_EXTENSIONS): Likewise.\n+\t* config/mn10300/linux.h (DBX_REGISTER_NAMES): Likewise.\n+\n+2021-08-31  Marcel Vollweiler  <marcel@codesourcery.com>\n+\n+\t* gimplify.c (gimplify_scan_omp_clauses): Error handling. 'ancestor' only\n+\tallowed on target constructs and only with particular other clauses.\n+\t* omp-expand.c (expand_omp_target): Output of 'sorry, not supported' if\n+\t'ancestor' is used.\n+\t* omp-low.c (check_omp_nesting_restrictions): Error handling. No nested OpenMP\n+\tstructs when 'ancestor' is used.\n+\t(scan_omp_1_stmt): No usage of OpenMP runtime routines in a target region when\n+\t'ancestor' is used.\n+\t* tree-pretty-print.c (dump_omp_clause): Append 'ancestor'.\n+\t* tree.h (OMP_CLAUSE_DEVICE_ANCESTOR): Define macro.\n+\n+2021-08-31  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* expr.c (convert_modes): Preserve SUBREG_PROMOTED_VAR_P when\n+\tcreating a (wider) partial subreg from a SUBREG_PROMOTED_VAR_P\n+\tsubreg.\n+\t* simplify-rtx.c (simplify_unary_operation_1) [SIGN_EXTEND]:\n+\tLikewise, preserve SUBREG_PROMOTED_VAR_P when creating a (wider)\n+\tpartial subreg from a SUBREG_PROMOTED_VAR_P subreg.  Generate\n+\tSIGN_EXTEND of the SUBREG_REG when a subreg would be paradoxical.\n+\t[ZERO_EXTEND]: Likewise, preserve SUBREG_PROMOTED_VAR_P when\n+\tcreating a (wider) partial subreg from a SUBREG_PROMOTED_VAR_P\n+\tsubreg.  Generate ZERO_EXTEND of the SUBREG_REG when a subreg\n+\twould be paradoxical.\n+\n+2021-08-31  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* combine.c (combine_simplify_rtx): Avoid converting an explicit\n+\tTRUNCATE into a lowpart SUBREG on !TRULY_NOOP_TRUNCATION targets.\n+\t* simplify-rtx.c (simplify_unary_operation_1): Likewise.\n+\n+2021-08-31  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102142\n+\t* tree-vect-slp.c (vect_bb_vectorization_profitable_p): Fix\n+\tcondition under which to unset the visited flag.\n+\n+2021-08-31  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/102129\n+\t* tree-ssa-ter.c (find_replaceable_in_bb): Do not move\n+\tpossibly trapping expressions across calls.\n+\n+2021-08-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/102134\n+\t* tree-ssa-ccp.c (bit_value_binop) <case RSHIFT_EXPR>: If sgn is\n+\tUNSIGNED and r1val | r1mask has MSB set, ensure lzcount doesn't\n+\tbecome negative.\n+\n+2021-08-31  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR driver/79181\n+\t* collect-utils.c (setup_signals): New declaration.\n+\t* collect-utils.h (setup_signals): New function.\n+\t* collect2.c (handler): Delete.\n+\t(main): Instead of manually setting up the signals,\n+\tjust call setup_signals.\n+\t* lto-wrapper.c (main): Likewise.\n+\n+2021-08-31  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR target/56337\n+\t* config/i386/i386-protos.h (x86_output_aligned_bss):\n+\tChange align argument to unsigned type.\n+\t(x86_elf_aligned_decl_common): Likewise.\n+\t* config/i386/i386.c (x86_elf_aligned_decl_common): Likewise.\n+\t(x86_output_aligned_bss): Likewise.\n+\n+2021-08-31  YunQiang Su  <yunqiang.su@cipunited.com>\n+\n+\t* config/mips/mips.c (mips_module_isa_name): New.\n+\t  mips_file_start: add .module mipsREV to all asm output\n+\n+2021-08-31  YunQiang Su  <yunqiang.su@cipunited.com>\n+\n+\t* config/mips/mips.h (struct mips_cpu_info): define enum mips_isa;\n+\t  use enum instead of int for 'isa' member.\n+\t* config.gcc, config/mips/mips.c, config/mips/mips-cpus.def,\n+\t  config/mips/netbsd.h: replace hardcoded numbers with enum.\n+\n+2021-08-31  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/sse.md (*<avx512>_ucmp<mode>3_1): Change from\n+\tdefine_split to define_insn_and_split.\n+\t(*avx2_eq<mode>3): Removed.\n+\t(<avx512>_eq<mode>3<mask_scalar_merge_name>): Adjust pattern\n+\t(<avx512>_eq<mode>3<mask_scalar_merge_name>_1): Rename to ..\n+\t(*<avx512>_eq<mode>3<mask_scalar_merge_name>_1): .. this, and\n+\tadjust pattern.\n+\t(*avx2_gt<mode>3): Removed.\n+\t(<avx512>_gt<mode>3<mask_scalar_merge_name>): Change from\n+\tdefine_insn to define_expand, and adjust pattern.\n+\t(UNSPEC_MASKED_EQ, UNSPEC_MASKED_GT): Removed.\n+\n 2021-08-30  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/99260"}, {"sha": "97ea5d481a17a65ffa3c4c102e78bda1c39c0213", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d51ee4321605c704aa238d039b47bfcf59b1005/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d51ee4321605c704aa238d039b47bfcf59b1005/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=6d51ee4321605c704aa238d039b47bfcf59b1005", "patch": "@@ -1 +1 @@\n-20210831\n+20210901"}, {"sha": "a175f36b338e687b374cec3b6d4382f221ce67b8", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d51ee4321605c704aa238d039b47bfcf59b1005/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d51ee4321605c704aa238d039b47bfcf59b1005/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=6d51ee4321605c704aa238d039b47bfcf59b1005", "patch": "@@ -1,3 +1,8 @@\n+2021-08-31  Marcel Vollweiler  <marcel@codesourcery.com>\n+\n+\t* c-parser.c (c_parser_omp_clause_device): Parse device-modifiers 'device_num'\n+\tand 'ancestor' in 'target device' clauses.\n+\n 2021-08-23  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-parser.c (c_parser_omp_clause_num_tasks,"}, {"sha": "b443247dd1a4127c337d93ec569d4e706b2c46ab", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d51ee4321605c704aa238d039b47bfcf59b1005/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d51ee4321605c704aa238d039b47bfcf59b1005/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6d51ee4321605c704aa238d039b47bfcf59b1005", "patch": "@@ -1,3 +1,47 @@\n+2021-08-31  Jason Merrill  <jason@redhat.com>\n+\n+\t* coroutines.cc (flatten_await_stmt): Fix copyo.\n+\t* decl.c (reshape_init_class): Simplify.\n+\t* module.cc (module_state::read_language): Add null check.\n+\t* parser.c (build_range_temp): Avoid type_uses_auto.\n+\t(cp_parser_class_specifier_1): Add null check.\n+\n+2021-08-31  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/12672\n+\t* call.c (rejection_reason::call_varargs_p): Rename this\n+\tpreviously unused member to ...\n+\t(rejection_reason::least_p): ... this.\n+\t(arity_rejection): Add least_p parameter.\n+\t(add_template_candidate_real): When there are explicit\n+\ttemplate arguments, check that the arity of the call agrees with\n+\tthe arity of the function before attempting deduction.\n+\t(print_arity_information): Add least_p parameter.\n+\t(print_z_candidate): Adjust call to print_arity_information.\n+\n+2021-08-31  Martin Sebor  <msebor@redhat.com>\n+\n+\t* parser.c (cp_parser_selection_statement): Use direct initialization\n+\tinstead of copy.\n+\n+2021-08-31  Jason Merrill  <jason@redhat.com>\n+\n+\t* constexpr.c (explain_invalid_constexpr_fn): Use iloc_sentinel.\n+\n+2021-08-31  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/92193\n+\t* cp-tree.h (FNDECL_MANIFESTLY_CONST_EVALUATED): New.\n+\t* constexpr.c (cxx_eval_call_expression): Set it.\n+\t* pt.c (neglectable_inst_p): Check it.\n+\n+2021-08-31  Marcel Vollweiler  <marcel@codesourcery.com>\n+\n+\t* parser.c (cp_parser_omp_clause_device): Parse device-modifiers 'device_num'\n+\tand 'ancestor' in 'target device' clauses.\n+\t* semantics.c (finish_omp_clauses): Error handling. Constant device ids must\n+\tevaluate to '1' if 'ancestor' is used.\n+\n 2021-08-30  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/96286"}, {"sha": "e30d1655c905de38d734972d78b73be80d22629b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d51ee4321605c704aa238d039b47bfcf59b1005/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d51ee4321605c704aa238d039b47bfcf59b1005/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6d51ee4321605c704aa238d039b47bfcf59b1005", "patch": "@@ -1,3 +1,16 @@\n+2021-08-31  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/100950\n+\t* simplify.c (substring_has_constant_len): Minimize checks for\n+\tsubstring expressions being allowed.\n+\n+2021-08-31  Marcel Vollweiler  <marcel@codesourcery.com>\n+\n+\t* gfortran.h: Add variable for 'ancestor' in struct gfc_omp_clauses.\n+\t* openmp.c (gfc_match_omp_clauses): Parse device-modifiers 'device_num'\n+\tand 'ancestor' in 'target device' clauses.\n+\t* trans-openmp.c (gfc_trans_omp_clauses): Set OMP_CLAUSE_DEVICE_ANCESTOR.\n+\n 2021-08-30  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/102113"}, {"sha": "1bab5254510fbab9becf2375c8b542f5641accd9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d51ee4321605c704aa238d039b47bfcf59b1005/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d51ee4321605c704aa238d039b47bfcf59b1005/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6d51ee4321605c704aa238d039b47bfcf59b1005", "patch": "@@ -1,3 +1,87 @@\n+2021-08-31  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/100950\n+\t* gfortran.dg/pr100950.f90: Extend coverage.\n+\n+2021-08-31  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/12672\n+\t* g++.dg/cpp0x/decltype29.C: Adjust.\n+\t* g++.dg/template/error56.C: Adjust.\n+\t* g++.old-deja/g++.pt/unify6.C: Adjust.\n+\t* g++.dg/template/explicit-args7.C: New test.\n+\n+2021-08-31  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/92193\n+\t* g++.dg/diagnostic/static_assert4.C: New test.\n+\n+2021-08-31  Jeff Law  <jlaw@localhost.localdomain>\n+\n+\t* gcc.target/mips/mips.exp: Add tree-vrp to mips_option_group.\n+\t* gcc.target/mips/data-sym-multi-pool.c: Add -fno-tree-vrp.\n+\n+2021-08-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/101145\n+\t* gcc.dg/vect/pr101145.c: Use dg-additional-options with just -O3\n+\tinstead of dg-options with -O3 -fdump-tree-vect-details.\n+\t* gcc.dg/vect/pr101145_1.c: Likewise.\n+\t* gcc.dg/vect/pr101145_2.c: Likewise.\n+\t* gcc.dg/vect/pr101145_3.c: Likewise.\n+\n+2021-08-31  Marcel Vollweiler  <marcel@codesourcery.com>\n+\n+\t* c-c++-common/gomp/target-device-1.c: New test.\n+\t* c-c++-common/gomp/target-device-2.c: New test.\n+\t* c-c++-common/gomp/target-device-ancestor-1.c: New test.\n+\t* c-c++-common/gomp/target-device-ancestor-2.c: New test.\n+\t* c-c++-common/gomp/target-device-ancestor-3.c: New test.\n+\t* c-c++-common/gomp/target-device-ancestor-4.c: New test.\n+\t* gfortran.dg/gomp/target-device-1.f90: New test.\n+\t* gfortran.dg/gomp/target-device-2.f90: New test.\n+\t* gfortran.dg/gomp/target-device-ancestor-1.f90: New test.\n+\t* gfortran.dg/gomp/target-device-ancestor-2.f90: New test.\n+\t* gfortran.dg/gomp/target-device-ancestor-3.f90: New test.\n+\t* gfortran.dg/gomp/target-device-ancestor-4.f90: New test.\n+\n+2021-08-31  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102142\n+\t* g++.dg/torture/pr102142.C: New testcase.\n+\n+2021-08-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/102134\n+\t* gcc.c-torture/execute/pr102134.c: New test.\n+\n+2021-08-31  prathamesh.kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\t* gcc.target/arm/pr51534.c: Adjust test-case for soft fp targets.\n+\n+2021-08-31  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* gcc.dg/ipa/inline-8.c: Mark cmp and move as\n+\tstatic so they both bind local and available for\n+\tinlinine.\n+\n+2021-08-31  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512bw-vpcmpeqb-1.c: Adjust testcase.\n+\t* gcc.target/i386/avx512bw-vpcmpeqw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpgtb-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpgtw-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpeqd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpeqq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpgtd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpgtq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpeqd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpeqq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpgtd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpgtq-1.c: Ditto.\n+\t* gcc.target/i386/bitwise_mask_op-1.c: Ditto.\n+\t* gcc.target/i386/bitwise_mask_op-2.c: Ditto.\n+\n 2021-08-30  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/99260"}, {"sha": "2585deb4c3459d293d22adc2c2d48b52aa09b258", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d51ee4321605c704aa238d039b47bfcf59b1005/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d51ee4321605c704aa238d039b47bfcf59b1005/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=6d51ee4321605c704aa238d039b47bfcf59b1005", "patch": "@@ -1,3 +1,8 @@\n+2021-08-31  Martin Sebor  <msebor@redhat.com>\n+\n+\t* include/line-map.h (class rich_location): Disable copying and\n+\tassignment.\n+\n 2021-08-25  Lewis Hyatt  <lhyatt@gmail.com>\n \n \tPR other/93067"}, {"sha": "3d9bd00da370b9b805adf043a8e35ef3982230d6", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d51ee4321605c704aa238d039b47bfcf59b1005/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d51ee4321605c704aa238d039b47bfcf59b1005/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=6d51ee4321605c704aa238d039b47bfcf59b1005", "patch": "@@ -1,3 +1,11 @@\n+2021-08-31  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/value-unwind.h: Add missing runtime exception\n+\tparagraph.\n+\t* config/frv/frv-abi.h: Likewise.\n+\t* config/i386/value-unwind.h: Likewise.\n+\t* config/pa/pa64-hpux-lib.h: Likewise.\n+\n 2021-08-26  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* config/rs6000/ibm-ldouble.c (ldouble_qadd_internal): Rename from"}, {"sha": "e77bac43390b7619af53836d5643285dc807e7ba", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d51ee4321605c704aa238d039b47bfcf59b1005/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d51ee4321605c704aa238d039b47bfcf59b1005/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6d51ee4321605c704aa238d039b47bfcf59b1005", "patch": "@@ -1,3 +1,47 @@\n+2021-08-31  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/98421\n+\t* include/std/span (span(Iter, size_type), span(Iter, Iter)):\n+\tAdd valid range checks.\n+\t* testsuite/23_containers/span/cons_1_assert_neg.cc: New test.\n+\t* testsuite/23_containers/span/cons_2_assert_neg.cc: New test.\n+\n+2021-08-31  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* configure.ac: Fix checks for F_GETFL, F_SETFL and O_NONBLOCK.\n+\t* configure: Regenerate.\n+\n+2021-08-31  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++11/system_error.cc (error_category::~error_category()):\n+\tRemove noexcept-specifier.\n+\t(system_error::~system_error()): Likewise.\n+\t* testsuite/19_diagnostics/error_category/noexcept.cc: New test.\n+\t* testsuite/19_diagnostics/system_error/noexcept.cc: New test.\n+\n+2021-08-31  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/102074\n+\t* include/bits/atomic_timed_wait.h (__timed_waiter_pool)\n+\t[!_GLIBCXX_HAVE_PLATFORM_TIMED_WAIT]: Add missing return.\n+\n+2021-08-31  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/experimental/internet (__make_resolver_error_code):\n+\tHandle EAI_SYSTEM errors.\n+\t(basic_resolver_results): Use __make_resolver_error_code. Use\n+\tGlibc NI_MAXHOST and NI_MAXSERV values for buffer sizes.\n+\n+2021-08-31  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/experimental/net/internet/resolver/ops/lookup.cc:\n+\tTry other service if \"http\" fails.\n+\n+2021-08-31  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/17_intro/names.cc: Undefine some more names used\n+\tby Solaris system headers.\n+\n 2021-08-30  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/96286"}]}