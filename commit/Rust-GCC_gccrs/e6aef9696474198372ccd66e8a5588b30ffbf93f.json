{"sha": "e6aef9696474198372ccd66e8a5588b30ffbf93f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZhZWY5Njk2NDc0MTk4MzcyY2NkNjZlOGE1NTg4YjMwZmZiZjkzZg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-12-08T08:42:15Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-12-08T08:42:15Z"}, "message": "* doc/trouble.texi (Non-bugs): Clarify empty loop removal.\n\nFrom-SVN: r91864", "tree": {"sha": "20189c024607031ef756df0f166ea5e2b2a3d37d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20189c024607031ef756df0f166ea5e2b2a3d37d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6aef9696474198372ccd66e8a5588b30ffbf93f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6aef9696474198372ccd66e8a5588b30ffbf93f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6aef9696474198372ccd66e8a5588b30ffbf93f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6aef9696474198372ccd66e8a5588b30ffbf93f/comments", "author": null, "committer": null, "parents": [{"sha": "db24eb1f4fcc6fa8330376179278261e02b717b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db24eb1f4fcc6fa8330376179278261e02b717b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db24eb1f4fcc6fa8330376179278261e02b717b5"}], "stats": {"total": 35, "additions": 30, "deletions": 5}, "files": [{"sha": "1579cb3a9965f44fbe4976a3eeeac5e5e234f2dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6aef9696474198372ccd66e8a5588b30ffbf93f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6aef9696474198372ccd66e8a5588b30ffbf93f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6aef9696474198372ccd66e8a5588b30ffbf93f", "patch": "@@ -1,3 +1,7 @@\n+2004-12-08  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* doc/trouble.texi (Non-bugs): Clarify empty loop removal.\n+\n 2004-12-08  Uros Bizjak  <uros@kss-loka.si>\n \n \t* config/i386/i386.c (output_387_binary_op,"}, {"sha": "01c0c192d59760d8aa9cb2118101a281e3e6175c", "filename": "gcc/doc/trouble.texi", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6aef9696474198372ccd66e8a5588b30ffbf93f/gcc%2Fdoc%2Ftrouble.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6aef9696474198372ccd66e8a5588b30ffbf93f/gcc%2Fdoc%2Ftrouble.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftrouble.texi?ref=e6aef9696474198372ccd66e8a5588b30ffbf93f", "patch": "@@ -1217,13 +1217,34 @@ to have a delay, so deleting them will not make real programs run any\n faster.\n \n However, the rationale here is that optimization of a nonempty loop\n-cannot produce an empty one, which holds for C but is not always the\n-case for C++.\n+cannot produce an empty one. This held for carefully written C compiled\n+with less powerful optimizers but is not always the case for carefully\n+written C++ or with more powerful optimizers.\n \n @opindex funroll-loops\n-Moreover, with @option{-funroll-loops} small ``empty'' loops are already\n-removed, so the current behavior is both sub-optimal and inconsistent\n-and will change in the future.\n+Thus GCC will remove operations from loops whenever it can determine\n+those operations are not externally visible (apart from the time taken\n+to execute them, of course).  As GCC improves, it will remove the loop\n+itself.  Indeed, with @option{-funroll-loops} small loops can already be\n+removed, so leaving an empty non-unrolled loop is both sub-optimal and\n+inconsistent.\n+\n+Be aware of this when performing timing tests, for instance the\n+following loop can be completely removed, provided\n+@code{some_expression} can provably not change any global state.\n+\n+@smallexample\n+@{\n+   int sum = 0;\n+   int ix;\n+\n+   for (ix = 0; ix != 10000; ix++)\n+      sum += some_expression;\n+@}\n+@end smallexample\n+\n+Even though @code{sum} is accumulated in the loop, no use is made of\n+that summation, so the accumulation can be removed.\n \n @item\n Making side effects happen in the same order as in some other compiler."}]}