{"sha": "f348741d28f3036bbef62bf072fe212fa02b15e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM0ODc0MWQyOGYzMDM2YmJlZjYyYmYwNzJmZTIxMmZhMDJiMTVlMg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2007-07-23T12:04:48Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-07-23T12:04:48Z"}, "message": "constraints.md (ks): New constraint.\n\ngcc/\n\t* config/mips/constraints.md (ks): New constraint.\n\t* config/mips/mips.md (*add<mode>3_sp1, *add<mode>3_sp2): Fold into...\n\t(*add<mode>3_mips16): ...here and fix their length calculations.\n\nFrom-SVN: r126842", "tree": {"sha": "91d27909bd4f32b1e6de5efa20fda6daa1ae7e03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91d27909bd4f32b1e6de5efa20fda6daa1ae7e03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f348741d28f3036bbef62bf072fe212fa02b15e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f348741d28f3036bbef62bf072fe212fa02b15e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f348741d28f3036bbef62bf072fe212fa02b15e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f348741d28f3036bbef62bf072fe212fa02b15e2/comments", "author": null, "committer": null, "parents": [{"sha": "8b16d23143dd296aa30177b762552c9cd7f472ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b16d23143dd296aa30177b762552c9cd7f472ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b16d23143dd296aa30177b762552c9cd7f472ed"}], "stats": {"total": 58, "additions": 25, "deletions": 33}, "files": [{"sha": "afb13127b3b0f7013bfc10e6c38417391f81809a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f348741d28f3036bbef62bf072fe212fa02b15e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f348741d28f3036bbef62bf072fe212fa02b15e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f348741d28f3036bbef62bf072fe212fa02b15e2", "patch": "@@ -1,3 +1,9 @@\n+2007-07-23  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* config/mips/constraints.md (ks): New constraint.\n+\t* config/mips/mips.md (*add<mode>3_sp1, *add<mode>3_sp2): Fold into...\n+\t(*add<mode>3_mips16): ...here and fix their length calculations.\n+\n 2007-07-21  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* optabs.h (enum optab_index): Add new OTI_signbit."}, {"sha": "8a63c2e670cd79423b91c86773d60fdde98a185c", "filename": "gcc/config/mips/constraints.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f348741d28f3036bbef62bf072fe212fa02b15e2/gcc%2Fconfig%2Fmips%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f348741d28f3036bbef62bf072fe212fa02b15e2/gcc%2Fconfig%2Fmips%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fconstraints.md?ref=f348741d28f3036bbef62bf072fe212fa02b15e2", "patch": "@@ -83,6 +83,13 @@\n ;; but the DSPr2 version allows any accumulator target.\n (define_register_constraint \"ka\" \"TARGET_DSPR2 ? ACC_REGS : MD_REGS\")\n \n+;; This is a normal rather than a register constraint because we can\n+;; never use the stack pointer as a reload register.\n+(define_constraint \"ks\"\n+  \"@internal\"\n+  (and (match_code \"reg\")\n+       (match_test \"REGNO (op) == STACK_POINTER_REGNUM\")))\n+\n ;; Integer constraints\n \n (define_constraint \"I\""}, {"sha": "58bf81d2ddb5c511f9b39a0afad82e6336d4a3b2", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 12, "deletions": 33, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f348741d28f3036bbef62bf072fe212fa02b15e2/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f348741d28f3036bbef62bf072fe212fa02b15e2/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=f348741d28f3036bbef62bf072fe212fa02b15e2", "patch": "@@ -739,55 +739,34 @@\n   [(set_attr \"type\" \"arith\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-;; We need to recognize MIPS16 stack pointer additions explicitly, since\n-;; we don't have a constraint for $sp.  These insns will be generated by\n-;; the save_restore_insns functions.\n-\n-(define_insn \"*add<mode>3_sp1\"\n-  [(set (reg:GPR 29)\n-\t(plus:GPR (reg:GPR 29)\n-\t\t  (match_operand:GPR 0 \"const_arith_operand\" \"\")))]\n-  \"TARGET_MIPS16\"\n-  \"<d>addiu\\t%$,%$,%0\"\n-  [(set_attr \"type\" \"arith\")\n-   (set_attr \"mode\" \"<MODE>\")\n-   (set (attr \"length\") (if_then_else (match_operand 0 \"m16_simm8_8\")\n-\t\t\t\t      (const_int 4)\n-\t\t\t\t      (const_int 8)))])\n-\n-(define_insn \"*add<mode>3_sp2\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n-\t(plus:GPR (reg:GPR 29)\n-\t\t  (match_operand:GPR 1 \"const_arith_operand\" \"\")))]\n-  \"TARGET_MIPS16\"\n-  \"<d>addiu\\t%0,%$,%1\"\n-  [(set_attr \"type\" \"arith\")\n-   (set_attr \"mode\" \"<MODE>\")\n-   (set (attr \"length\") (if_then_else (match_operand 1 \"m16_uimm<si8_di5>_4\")\n-\t\t\t\t      (const_int 4)\n-\t\t\t\t      (const_int 8)))])\n-\n (define_insn \"*add<mode>3_mips16\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=d,d,d\")\n-\t(plus:GPR (match_operand:GPR 1 \"register_operand\" \"0,d,d\")\n-\t\t  (match_operand:GPR 2 \"arith_operand\" \"Q,O,d\")))]\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=ks,d,d,d,d\")\n+\t(plus:GPR (match_operand:GPR 1 \"register_operand\" \"ks,ks,0,d,d\")\n+\t\t  (match_operand:GPR 2 \"arith_operand\" \"Q,Q,Q,O,d\")))]\n   \"TARGET_MIPS16\"\n   \"@\n+    <d>addiu\\t%0,%2\n+    <d>addiu\\t%0,%1,%2\n     <d>addiu\\t%0,%2\n     <d>addiu\\t%0,%1,%2\n     <d>addu\\t%0,%1,%2\"\n   [(set_attr \"type\" \"arith\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr_alternative \"length\"\n-\t\t[(if_then_else (match_operand 2 \"m16_simm<si8_di5>_1\")\n+\t\t[(if_then_else (match_operand 2 \"m16_simm8_8\")\n+\t\t\t       (const_int 4)\n+\t\t\t       (const_int 8))\n+\t\t (if_then_else (match_operand 2 \"m16_uimm<si8_di5>_4\")\n+\t\t\t       (const_int 4)\n+\t\t\t       (const_int 8))\n+\t\t (if_then_else (match_operand 2 \"m16_simm<si8_di5>_1\")\n \t\t\t       (const_int 4)\n \t\t\t       (const_int 8))\n \t\t (if_then_else (match_operand 2 \"m16_simm4_1\")\n \t\t\t       (const_int 4)\n \t\t\t       (const_int 8))\n \t\t (const_int 4)])])\n \n-\n ;; On the mips16, we can sometimes split an add of a constant which is\n ;; a 4 byte instruction into two adds which are both 2 byte\n ;; instructions.  There are two cases: one where we are adding a"}]}