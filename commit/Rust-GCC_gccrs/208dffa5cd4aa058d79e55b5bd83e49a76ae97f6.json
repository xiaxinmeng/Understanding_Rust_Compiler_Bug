{"sha": "208dffa5cd4aa058d79e55b5bd83e49a76ae97f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA4ZGZmYTVjZDRhYTA1OGQ3OWU1NWI1YmQ4M2U0OWE3NmFlOTdmNg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-26T05:10:41Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-26T05:10:41Z"}, "message": "(delete_output_reload): Don't delete output reload if cannot_omit_stores is set for that pseudo.\n\n(delete_output_reload): Don't delete output reload\nif cannot_omit_stores is set for that pseudo.\n(reload): Init and clear cannot_omit_stores.\n(eliminate_regs): Set cannot_omit_stores.\n\nFrom-SVN: r4574", "tree": {"sha": "ed2233c27c425c51affe80b293eb732a3c44d722", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed2233c27c425c51affe80b293eb732a3c44d722"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/208dffa5cd4aa058d79e55b5bd83e49a76ae97f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/208dffa5cd4aa058d79e55b5bd83e49a76ae97f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/208dffa5cd4aa058d79e55b5bd83e49a76ae97f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/208dffa5cd4aa058d79e55b5bd83e49a76ae97f6/comments", "author": null, "committer": null, "parents": [{"sha": "9bb30354733b427e658ea2541d6494cce80b8b71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bb30354733b427e658ea2541d6494cce80b8b71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bb30354733b427e658ea2541d6494cce80b8b71"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "8d3dd85e76d951ea6ea37a59c5e7c7e3e217c3eb", "filename": "gcc/reload1.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/208dffa5cd4aa058d79e55b5bd83e49a76ae97f6/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/208dffa5cd4aa058d79e55b5bd83e49a76ae97f6/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=208dffa5cd4aa058d79e55b5bd83e49a76ae97f6", "patch": "@@ -190,6 +190,12 @@ static HARD_REG_SET counted_for_groups;\n    as part of a group, even if it seems to be otherwise ok.  */\n static HARD_REG_SET counted_for_nongroups;\n \n+/* Indexed by pseudo reg number N,\n+   says may not delete stores into the real (memory) home of pseudo N.\n+   This is set if we already substituted a memory equivalent in some uses,\n+   which happens when we have to eliminate the fp from it.  */\n+static char *cannot_omit_stores;\n+\n /* Nonzero if indirect addressing is supported on the machine; this means\n    that spilling (REG n) does not require reloading it into a register in\n    order to do (MEM (REG n)) or (MEM (PLUS (REG n) (CONST_INT c))).  The\n@@ -511,6 +517,8 @@ reload (first, global, dumpfile)\n   bzero (reg_equiv_address, max_regno * sizeof (rtx));\n   reg_max_ref_width = (int *) alloca (max_regno * sizeof (int));\n   bzero (reg_max_ref_width, max_regno * sizeof (int));\n+  cannot_omit_stores = (char *) alloca (max_regno);\n+  bzero (cannot_omit_stores, max_regno);\n \n   /* Look for REG_EQUIV notes; record what each pseudo is equivalent to.\n      Also find all paradoxical subregs\n@@ -2601,7 +2609,10 @@ eliminate_regs (x, mem_mode, insn)\n \t  new = eliminate_regs (reg_equiv_memory_loc[regno],\n \t\t\t\tmem_mode, NULL_RTX);\n \t  if (new != reg_equiv_memory_loc[regno])\n-\t    return copy_rtx (new);\n+\t    {\n+\t      cannot_omit_stores[regno] = 1;\n+\t      return copy_rtx (new);\n+\t    }\n \t}\n       return x;\n \n@@ -6465,6 +6476,9 @@ delete_output_reload (insn, j, output_reload_insn)\n \treturn;\n     }\n \n+  if (cannot_omit_stores[REGNO (reg)])\n+    return;\n+\n   /* If this insn will store in the pseudo again,\n      the previous store can be removed.  */\n   if (reload_out[j] == reload_in[j])"}]}