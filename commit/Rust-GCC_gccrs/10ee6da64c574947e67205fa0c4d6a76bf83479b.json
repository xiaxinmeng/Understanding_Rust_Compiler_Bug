{"sha": "10ee6da64c574947e67205fa0c4d6a76bf83479b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBlZTZkYTY0YzU3NDk0N2U2NzIwNWZhMGM0ZDZhNzZiZjgzNDc5Yg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-01T18:28:15Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-01T18:32:50Z"}, "message": "C++ Module options\n\nThis adds the C++ module options, and wires them into lang-specs.  The\noptions are not connected to any machinery.  The options! They do\nnothing!\n\n\tgcc/c-family/\n\t* c-opts.c (c_common_init_options): Ask for module dependencies.\n\t(c_common_handle_option): Handle -Mmodules -Mno-modules.\n\t* c-pch.c (c_common_valid_pch): ... does not play with C++\n\tmodules.\n\t* c.opt (Mmodules, Mno-modules): New preprocessor dependency\n\toptions.\n\t(fmodules-ts, fmodule-header, fmodule-implicit-inline)\n\t(fmodule-only, fmodule-mapper, fmodule-lazy)\n\t(fmodule-version-ignore, Winvalid-imported-macros)\n\t(flang-info-include-translate, flang-info-include-translate-not):\n\tNew options\n\tgcc/cp/\n\t* lang-specs.h: Add module-related options.", "tree": {"sha": "7d5a63d8866b9a86e8b0dacb9877ba44d980b787", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d5a63d8866b9a86e8b0dacb9877ba44d980b787"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10ee6da64c574947e67205fa0c4d6a76bf83479b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10ee6da64c574947e67205fa0c4d6a76bf83479b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10ee6da64c574947e67205fa0c4d6a76bf83479b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10ee6da64c574947e67205fa0c4d6a76bf83479b/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "855bb43f6d0bee5a74b5d3739456ca34b4609a50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/855bb43f6d0bee5a74b5d3739456ca34b4609a50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/855bb43f6d0bee5a74b5d3739456ca34b4609a50"}], "stats": {"total": 133, "additions": 126, "deletions": 7}, "files": [{"sha": "59cabd12407b08b015dc0ad0eeb832ea6fc6b046", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10ee6da64c574947e67205fa0c4d6a76bf83479b/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10ee6da64c574947e67205fa0c4d6a76bf83479b/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=10ee6da64c574947e67205fa0c4d6a76bf83479b", "patch": "@@ -234,6 +234,7 @@ c_common_init_options (unsigned int decoded_options_count,\n   cpp_opts = cpp_get_options (parse_in);\n   cpp_opts->dollars_in_ident = DOLLARS_IN_IDENTIFIERS;\n   cpp_opts->objc = c_dialect_objc ();\n+  cpp_opts->deps.modules = true;\n \n   /* Reset to avoid warnings on internal definitions.  We set it just\n      before passing on command-line options to cpplib.  */\n@@ -367,6 +368,18 @@ c_common_handle_option (size_t scode, const char *arg, HOST_WIDE_INT value,\n       cpp_opts->deps.phony_targets = true;\n       break;\n \n+    case OPT_Mmodules:\n+      /* Do not set deps_seen, so the user can unconditionally turn\n+\t this on or off.  */\n+      cpp_opts->deps.modules = true;\n+      break;\n+\n+    case OPT_Mno_modules:\n+      /* Do not set deps_seen, so the user can unconditionally turn\n+\t this on or off.  */\n+      cpp_opts->deps.modules = false;\n+      break;\n+\n     case OPT_MQ:\n     case OPT_MT:\n       deps_seen = true;"}, {"sha": "fdeb860c0e606c482dc33a628eb77b34fa943b1b", "filename": "gcc/c-family/c-pch.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10ee6da64c574947e67205fa0c4d6a76bf83479b/gcc%2Fc-family%2Fc-pch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10ee6da64c574947e67205fa0c4d6a76bf83479b/gcc%2Fc-family%2Fc-pch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pch.c?ref=10ee6da64c574947e67205fa0c4d6a76bf83479b", "patch": "@@ -206,6 +206,10 @@ c_common_valid_pch (cpp_reader *pfile, const char *name, int fd)\n   /* Perform a quick test of whether this is a valid\n      precompiled header for the current language.  */\n \n+  /* C++ modules and PCH don't play together.  */\n+  if (flag_modules)\n+    return 2;\n+\n   sizeread = read (fd, ident, IDENT_LENGTH + 16);\n   if (sizeread == -1)\n     fatal_error (input_location, \"cannot read %s: %m\", name);"}, {"sha": "059f6c38a40f0a9606c6ef8f2d8cf12dbbf49561", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10ee6da64c574947e67205fa0c4d6a76bf83479b/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10ee6da64c574947e67205fa0c4d6a76bf83479b/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=10ee6da64c574947e67205fa0c4d6a76bf83479b", "patch": "@@ -236,6 +236,14 @@ MMD\n C ObjC C++ ObjC++ NoDriverArg Separate MissingArgError(missing filename after %qs)\n Like -MD but ignore system header files.\n \n+Mmodules\n+C++\n+Generate C++ Module dependency information.\n+\n+Mno-modules\n+C++\n+; undocumented\n+\n MP\n C ObjC C++ ObjC++\n Generate phony targets for all headers.\n@@ -1683,6 +1691,57 @@ flax-vector-conversions\n C ObjC C++ ObjC++ Var(flag_lax_vector_conversions)\n Allow implicit conversions between vectors with differing numbers of subparts and/or differing element types.\n \n+fmodules-ts\n+C++ ObjC++ Var(flag_modules) Integer Init(0)\n+Enable C++ modules-ts (experimental).\n+\n+fno-modules\n+C++ ObjC++ Undocumented RejectNegative Var(flag_modules,0) Integer\n+;; undocumented\n+\n+fmodule-header\n+C++ ObjC RejectNegative Var(flag_header_unit,0) Integer\n+Enable C++ header module (experimental).\n+\n+fmodule-header=\n+C++ ObjC++ Joined RejectNegative Undocumented\n+\n+fmodule-implicit-inline\n+C++ ObjC++ Var(flag_module_implicit_inline,0) Integer\n+Member functions defined within their class are inline in module purview.\n+\n+fmodule-only\n+C++ ObjC RejectNegative Var(flag_module_only) Integer\n+Only emit Compiled Module Interface.\n+\n+fmodule-mapper=\n+C++ ObjC++ Joined RejectNegative MissingArgError(missing mapper)\n+Mapper for module to CMI files.\n+\n+fmodule-lazy\n+C++ ObjC++ Var(flag_module_lazy) Init(1)\n+Enable lazy module importing.\n+\n+fmodule-version-ignore\n+C++ ObjC Var(flag_module_version_ignore) Integer\n+; undocumented, Very dangerous, but occasionally useful\n+\n+Winvalid-imported-macros\n+C++ ObjC++ Var(warn_imported_macros)\n+Warn about macros that have conflicting header units definitions.\n+\n+flang-info-include-translate\n+C++ Var(note_include_translate_yes)\n+Note #include directives translated to import declarations.\n+\n+flang-info-include-translate-not\n+C++ Var(note_include_translate_no)\n+Note #include directives not translated to import declarations, and not known to be textual.\n+\n+flang-info-include-translate=\n+C++ Joined RejectNegative MissingArgError(missing header name)\n+Note a #include translation of a specific header.\n+\n fmax-include-depth=\n C ObjC C++ ObjC++ Joined RejectNegative UInteger\n fmax-include-depth=<number> Set the maximum depth of the nested #include."}, {"sha": "1388aaed198768ecec1364bd4e1a9bf26f986caa", "filename": "gcc/cp/lang-specs.h", "status": "modified", "additions": 50, "deletions": 7, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10ee6da64c574947e67205fa0c4d6a76bf83479b/gcc%2Fcp%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10ee6da64c574947e67205fa0c4d6a76bf83479b/gcc%2Fcp%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-specs.h?ref=10ee6da64c574947e67205fa0c4d6a76bf83479b", "patch": "@@ -40,17 +40,57 @@ along with GCC; see the file COPYING3.  If not see\n   {\".tcc\", \"@c++-header\", 0, 0, 0},\n   {\".hh\",  \"@c++-header\", 0, 0, 0},\n   {\"@c++-header\",\n-      \"%{E|M|MM:cc1plus -E %(cpp_options) %2 %(cpp_debug_options)}\"\n+      \"%{E|M|MM:cc1plus -E %{fmodules-ts:-fdirectives-only -fmodule-header}\"\n+      \"  %(cpp_options) %2 %(cpp_debug_options)}\"\n+      \"%{!E:%{!M:%{!MM:\"\n+      \"  %{save-temps*|no-integrated-cpp:cc1plus -E\"\n+      \"    %{fmodules-ts:-fdirectives-only -fmodule-header}\"\n+      \"\t   %(cpp_options) %2 -o %{save-temps*:%b.ii} %{!save-temps*:%g.ii} \\n}\"\n+      \"  cc1plus %{save-temps*|no-integrated-cpp:-fpreprocessed\"\n+      \"            %{fmodules-ts:-fdirectives-only}\"\n+      \" \t   %{save-temps*:%b.ii} %{!save-temps*:%g.ii}}\"\n+      \"  %{!save-temps*:%{!no-integrated-cpp:%(cpp_unique_options)}}\"\n+      \"  %{fmodules-ts:-fmodule-header %{fpreprocessed:-fdirectives-only}}\"\n+      \"  %(cc1_options) %2\"\n+      \"  %{!S:-o %g.s%V}\"\n+      \"  %{!fsyntax-only:%{!fmodule-*:%{!fmodules-*:%{!fdump-ada-spec*:\"\n+      \"\t     %{!o*:--output-pch=%i.gch}%W{o*:--output-pch=%*}}}}}}}}\",\n+     CPLUSPLUS_CPP_SPEC, 0, 0},\n+  {\"@c++-system-header\",\n+      \"%{E|M|MM:cc1plus -E\"\n+      \"  %{fmodules-ts:-fdirectives-only -fmodule-header=system}\"\n+      \"  %(cpp_options) %2 %(cpp_debug_options)}\"\n       \"%{!E:%{!M:%{!MM:\"\n       \"  %{save-temps*|no-integrated-cpp:cc1plus -E\"\n+      \"    %{fmodules-ts:-fdirectives-only -fmodule-header=system}\"\n       \"\t   %(cpp_options) %2 -o %{save-temps*:%b.ii} %{!save-temps*:%g.ii} \\n}\"\n       \"  cc1plus %{save-temps*|no-integrated-cpp:-fpreprocessed\"\n+      \"            %{fmodules-ts:-fdirectives-only}\"\n       \" \t   %{save-temps*:%b.ii} %{!save-temps*:%g.ii}}\"\n       \"  %{!save-temps*:%{!no-integrated-cpp:%(cpp_unique_options)}}\"\n+      \"  %{fmodules-ts:-fmodule-header=system %{fpreprocessed:-fdirectives-only}}\"\n       \"  %(cc1_options) %2\"\n-      \"  %{!fsyntax-only:%{!S:-o %g.s}\"\n-      \"    %{!fdump-ada-spec*:%{!o*:--output-pch=%i.gch}\"\n-      \"      %W{o*:--output-pch=%*}}%V}}}}\",\n+      \"  %{!S:-o %g.s%V}\"\n+      \"  %{!fsyntax-only:%{!fmodule-*:%{!fmodules-*:%{!fdump-ada-spec*:\"\n+      \"\t     %{!o*:--output-pch=%i.gch}%W{o*:--output-pch=%*}}}}}}}}\",\n+     CPLUSPLUS_CPP_SPEC, 0, 0},\n+  {\"@c++-user-header\",\n+      \"%{E|M|MM:cc1plus -E\"\n+      \"  %{fmodules-ts:-fdirectives-only -fmodule-header=user}\"\n+      \"  %(cpp_options) %2 %(cpp_debug_options)}\"\n+      \"%{!E:%{!M:%{!MM:\"\n+      \"  %{save-temps*|no-integrated-cpp:cc1plus -E\"\n+      \"    %{fmodules-ts:-fdirectives-only -fmodule-header=user}\"\n+      \"\t   %(cpp_options) %2 -o %{save-temps*:%b.ii} %{!save-temps*:%g.ii} \\n}\"\n+      \"  cc1plus %{save-temps*|no-integrated-cpp:-fpreprocessed\"\n+      \"            %{fmodules-ts:-fdirectives-only}\"\n+      \" \t   %{save-temps*:%b.ii} %{!save-temps*:%g.ii}}\"\n+      \"  %{!save-temps*:%{!no-integrated-cpp:%(cpp_unique_options)}}\"\n+      \"  %{fmodules-ts:-fmodule-header=user %{fpreprocessed:-fdirectives-only}}\"\n+      \"  %(cc1_options) %2\"\n+      \"  %{!S:-o %g.s%V}\"\n+      \"  %{!fsyntax-only:%{!fmodule-*:%{!fmodules-*:%{!fdump-ada-spec*:\"\n+      \"\t     %{!o*:--output-pch=%i.gch}%W{o*:--output-pch=%*}}}}}}}}\",\n      CPLUSPLUS_CPP_SPEC, 0, 0},\n   {\"@c++\",\n       \"%{E|M|MM:cc1plus -E %(cpp_options) %2 %(cpp_debug_options)}\"\n@@ -60,11 +100,14 @@ along with GCC; see the file COPYING3.  If not see\n       \"  cc1plus %{save-temps*|no-integrated-cpp:-fpreprocessed\"\n       \" \t   %{save-temps*:%b.ii} %{!save-temps*:%g.ii}}\"\n       \"  %{!save-temps*:%{!no-integrated-cpp:%(cpp_unique_options)}}\"\n-      \"\t %(cc1_options) %2\"\n-      \"  %{!fsyntax-only:%(invoke_as)}}}}\",\n+      \"  %(cc1_options) %2\"\n+      \"  %{fmodule-only:%{!S:-o %g.s%V}}\"\n+      \"  %{!fsyntax-only:%{!fmodule-only:%(invoke_as)}}}}}\",\n       CPLUSPLUS_CPP_SPEC, 0, 0},\n   {\".ii\", \"@c++-cpp-output\", 0, 0, 0},\n   {\"@c++-cpp-output\",\n       \"%{!E:%{!M:%{!MM:\"\n       \"  cc1plus -fpreprocessed %i %(cc1_options) %2\"\n-      \"  %{!fsyntax-only:%(invoke_as)}}}}\", 0, 0, 0},\n+      \"  %{fmodule-only:%{!S:-o %g.s%V}}\"\n+      \"  %{!fsyntax-only:%{!fmodule-only:%{!fmodule-header*:\"\n+      \"     %(invoke_as)}}}}}}\", 0, 0, 0},"}]}