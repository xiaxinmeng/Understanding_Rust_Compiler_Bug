{"sha": "e42c28bcfdde1f81c4908c08ee5e2da6e1c4bd93", "node_id": "C_kwDOANBUbNoAKGU0MmMyOGJjZmRkZTFmODFjNDkwOGMwOGVlNWUyZGE2ZTFjNGJkOTM", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-01-27T15:38:58Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-04-06T08:47:21Z"}, "message": "gccrs: Remove monomorphization hack to setup possible associated types\n\nDuring CallExpr argument type checking we may be calling a default\nimplementation of a trait function this will require any possible\nassociated types to be resolved and setup. This monomoprhization call does\nthis but it will premtivly do extra unification of types which will throw\noff type checking later on. This fix is required for my work into type\nbounds checking.\n\nFixes #1773\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-hir-trait-reference.h: change interface to return self\n\t* typecheck/rust-hir-trait-resolve.cc: likewise\n\t* typecheck/rust-hir-type-check-path.cc (TypeCheckExpr::resolve_segments): likewise\n\t* typecheck/rust-tyty-call.cc (TypeCheckCallExpr::visit): remove monomorphization hack\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/issue-1773.rs: New test.", "tree": {"sha": "4f616921772fa93cf14b7d0dba12b9a272772821", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f616921772fa93cf14b7d0dba12b9a272772821"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e42c28bcfdde1f81c4908c08ee5e2da6e1c4bd93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e42c28bcfdde1f81c4908c08ee5e2da6e1c4bd93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e42c28bcfdde1f81c4908c08ee5e2da6e1c4bd93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e42c28bcfdde1f81c4908c08ee5e2da6e1c4bd93/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31f1e59962b81408e37ac4f46f6b39456ee54b21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31f1e59962b81408e37ac4f46f6b39456ee54b21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31f1e59962b81408e37ac4f46f6b39456ee54b21"}], "stats": {"total": 72, "additions": 56, "deletions": 16}, "files": [{"sha": "9b4461b9f1880563fc483e7fa3bf4247228b9396", "filename": "gcc/rust/typecheck/rust-hir-trait-reference.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e42c28bcfdde1f81c4908c08ee5e2da6e1c4bd93/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-reference.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e42c28bcfdde1f81c4908c08ee5e2da6e1c4bd93/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-reference.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-reference.h?ref=e42c28bcfdde1f81c4908c08ee5e2da6e1c4bd93", "patch": "@@ -497,8 +497,9 @@ class AssociatedImplTrait\n \n   TyTy::BaseType *get_self () { return self; }\n \n-  void setup_associated_types (const TyTy::BaseType *self,\n-\t\t\t       const TyTy::TypeBoundPredicate &bound);\n+  TyTy::BaseType *\n+  setup_associated_types (const TyTy::BaseType *self,\n+\t\t\t  const TyTy::TypeBoundPredicate &bound);\n \n   void reset_associated_types ();\n "}, {"sha": "6e23093eceb1d45773e72765940147d6d292c733", "filename": "gcc/rust/typecheck/rust-hir-trait-resolve.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e42c28bcfdde1f81c4908c08ee5e2da6e1c4bd93/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e42c28bcfdde1f81c4908c08ee5e2da6e1c4bd93/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc?ref=e42c28bcfdde1f81c4908c08ee5e2da6e1c4bd93", "patch": "@@ -377,13 +377,10 @@ TraitItemReference::associated_type_reset () const\n   placeholder->clear_associated_type ();\n }\n \n-void\n+TyTy::BaseType *\n AssociatedImplTrait::setup_associated_types (\n   const TyTy::BaseType *self, const TyTy::TypeBoundPredicate &bound)\n {\n-  if (!bound.contains_associated_types ())\n-    return;\n-\n   // compute the constrained impl block generic arguments based on self and the\n   // higher ranked trait bound\n   TyTy::BaseType *receiver = self->clone ();\n@@ -486,6 +483,7 @@ AssociatedImplTrait::setup_associated_types (\n     TyTy::TyWithLocation (receiver), TyTy::TyWithLocation (impl_self_infer),\n     impl_predicate.get_locus ());\n   rust_assert (result->get_kind () != TyTy::TypeKind::ERROR);\n+  TyTy::BaseType *self_result = result;\n \n   // unify the bounds arguments\n   std::vector<TyTy::BaseType *> hrtb_bound_arguments;\n@@ -500,7 +498,7 @@ AssociatedImplTrait::setup_associated_types (\n     }\n \n   if (impl_trait_predicate_args.size () != hrtb_bound_arguments.size ())\n-    return;\n+    return self_result;\n \n   for (size_t i = 0; i < impl_trait_predicate_args.size (); i++)\n     {\n@@ -554,6 +552,8 @@ AssociatedImplTrait::setup_associated_types (\n     resolved_trait_item->associated_type_set (substituted);\n   });\n   iter.go ();\n+\n+  return self_result;\n }\n \n void"}, {"sha": "9d9b2949944aff9a224299807ce9376dcb1afb27", "filename": "gcc/rust/typecheck/rust-hir-type-check-path.cc", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e42c28bcfdde1f81c4908c08ee5e2da6e1c4bd93/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e42c28bcfdde1f81c4908c08ee5e2da6e1c4bd93/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc?ref=e42c28bcfdde1f81c4908c08ee5e2da6e1c4bd93", "patch": "@@ -379,16 +379,36 @@ TypeCheckExpr::resolve_segments (NodeId root_resolved_node_id,\n \n       if (associated_impl_block != nullptr)\n \t{\n-\t  // get the type of the parent Self\n-\t  HirId impl_ty_id\n-\t    = associated_impl_block->get_type ()->get_mappings ().get_hirid ();\n+\t  // associated types\n+\t  HirId impl_block_id\n+\t    = associated_impl_block->get_mappings ().get_hirid ();\n+\n+\t  AssociatedImplTrait *associated = nullptr;\n+\t  bool found_impl_trait\n+\t    = context->lookup_associated_trait_impl (impl_block_id,\n+\t\t\t\t\t\t     &associated);\n \t  TyTy::BaseType *impl_block_ty = nullptr;\n-\t  bool ok = query_type (impl_ty_id, &impl_block_ty);\n-\t  rust_assert (ok);\n+\t  if (found_impl_trait)\n+\t    {\n+\t      TyTy::TypeBoundPredicate predicate (*associated->get_trait (),\n+\t\t\t\t\t\t  seg.get_locus ());\n+\t      impl_block_ty\n+\t\t= associated->setup_associated_types (prev_segment, predicate);\n+\t    }\n+\t  else\n+\t    {\n+\t      // get the type of the parent Self\n+\t      HirId impl_ty_id = associated_impl_block->get_type ()\n+\t\t\t\t   ->get_mappings ()\n+\t\t\t\t   .get_hirid ();\n \n-\t  if (impl_block_ty->needs_generic_substitutions ())\n-\t    impl_block_ty\n-\t      = SubstMapper::InferSubst (impl_block_ty, seg.get_locus ());\n+\t      bool ok = query_type (impl_ty_id, &impl_block_ty);\n+\t      rust_assert (ok);\n+\n+\t      if (impl_block_ty->needs_generic_substitutions ())\n+\t\timpl_block_ty\n+\t\t  = SubstMapper::InferSubst (impl_block_ty, seg.get_locus ());\n+\t    }\n \n \t  prev_segment = unify_site (seg.get_mappings ().get_hirid (),\n \t\t\t\t     TyTy::TyWithLocation (prev_segment),"}, {"sha": "4c6442e2d829f9e2662876ac714022e4f03b1bb0", "filename": "gcc/rust/typecheck/rust-tyty-call.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e42c28bcfdde1f81c4908c08ee5e2da6e1c4bd93/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e42c28bcfdde1f81c4908c08ee5e2da6e1c4bd93/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.cc?ref=e42c28bcfdde1f81c4908c08ee5e2da6e1c4bd93", "patch": "@@ -85,7 +85,6 @@ TypeCheckCallExpr::visit (ADTType &type)\n void\n TypeCheckCallExpr::visit (FnType &type)\n {\n-  type.monomorphize ();\n   if (call.num_params () != type.num_params ())\n     {\n       if (type.is_varadic ())"}, {"sha": "c627ac09cecbca2538525d1dac1fe7569558fd5b", "filename": "gcc/testsuite/rust/compile/issue-1773.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e42c28bcfdde1f81c4908c08ee5e2da6e1c4bd93/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1773.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e42c28bcfdde1f81c4908c08ee5e2da6e1c4bd93/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1773.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1773.rs?ref=e42c28bcfdde1f81c4908c08ee5e2da6e1c4bd93", "patch": "@@ -0,0 +1,20 @@\n+trait Foo<T> {\n+    type A;\n+\n+    fn test(a: Self::A) -> Self::A {\n+        a\n+    }\n+}\n+\n+struct Bar<T>(T);\n+impl<T> Foo<T> for Bar<i32> {\n+    type A = T;\n+}\n+\n+fn main() {\n+    let a;\n+    a = Bar(123);\n+\n+    let b;\n+    b = Bar::test(a.0);\n+}"}]}