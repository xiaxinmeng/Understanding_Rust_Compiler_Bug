{"sha": "8bfeef998ff340fef37f07e1a7a0366e73296380", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJmZWVmOTk4ZmYzNDBmZWYzN2YwN2UxYTdhMDM2NmU3MzI5NjM4MA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-08T14:32:14Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-10T20:32:26Z"}, "message": "Add node-ids to type-path-segments in AST\n\nWe must track the type path segments ids within the Canonical path.", "tree": {"sha": "3a8decc5d1fcfcd3717501cb6e8f4be00e332540", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a8decc5d1fcfcd3717501cb6e8f4be00e332540"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bfeef998ff340fef37f07e1a7a0366e73296380", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bfeef998ff340fef37f07e1a7a0366e73296380", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bfeef998ff340fef37f07e1a7a0366e73296380", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bfeef998ff340fef37f07e1a7a0366e73296380/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97b917f8d287b362fabf7b8da0796237bb8e16d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97b917f8d287b362fabf7b8da0796237bb8e16d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97b917f8d287b362fabf7b8da0796237bb8e16d1"}], "stats": {"total": 128, "additions": 84, "deletions": 44}, "files": [{"sha": "011ac3ebee422979b1872041736b0dd230e72eca", "filename": "gcc/rust/ast/rust-path.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bfeef998ff340fef37f07e1a7a0366e73296380/gcc%2Frust%2Fast%2Frust-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bfeef998ff340fef37f07e1a7a0366e73296380/gcc%2Frust%2Fast%2Frust-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-path.h?ref=8bfeef998ff340fef37f07e1a7a0366e73296380", "patch": "@@ -406,18 +406,14 @@ class PathInExpression : public PathPattern, public PathExpr\n  * ident-only segment) */\n class TypePathSegment\n {\n-  /* TODO: may have to unify TypePathSegment and PathExprSegment (which are\n-   * mostly the same anyway) in order to resolve goddamn syntax ambiguities. One\n-   * difference is that function on TypePathSegment is not allowed if\n-   * GenericArgs are, so could disallow that in constructor, which won't give\n-   * that much size overhead. */\n   PathIdentSegment ident_segment;\n   Location locus;\n \n protected:\n   /* This is protected because it is only really used by derived classes, not\n    * the base. */\n   bool has_separating_scope_resolution;\n+  NodeId node_id;\n \n   // Clone function implementation - not pure virtual as overrided by subclasses\n   virtual TypePathSegment *clone_type_path_segment_impl () const\n@@ -437,14 +433,16 @@ class TypePathSegment\n   TypePathSegment (PathIdentSegment ident_segment,\n \t\t   bool has_separating_scope_resolution, Location locus)\n     : ident_segment (std::move (ident_segment)), locus (locus),\n-      has_separating_scope_resolution (has_separating_scope_resolution)\n+      has_separating_scope_resolution (has_separating_scope_resolution),\n+      node_id (Analysis::Mappings::get ()->get_next_node_id ())\n   {}\n \n   TypePathSegment (std::string segment_name,\n \t\t   bool has_separating_scope_resolution, Location locus)\n     : ident_segment (PathIdentSegment (std::move (segment_name))),\n       locus (locus),\n-      has_separating_scope_resolution (has_separating_scope_resolution)\n+      has_separating_scope_resolution (has_separating_scope_resolution),\n+      node_id (Analysis::Mappings::get ()->get_next_node_id ())\n   {}\n \n   virtual std::string as_string () const { return ident_segment.as_string (); }\n@@ -454,7 +452,7 @@ class TypePathSegment\n   bool is_error () const { return ident_segment.is_error (); }\n \n   /* Returns whether segment is identifier only (as opposed to generic args or\n-   * function). Overriden in derived classes with other segments. */\n+   * function). Overridden in derived classes with other segments. */\n   virtual bool is_ident_only () const { return true; }\n \n   Location get_locus () const { return locus; }\n@@ -468,6 +466,8 @@ class TypePathSegment\n   }\n \n   PathIdentSegment get_ident_segment () { return ident_segment; };\n+\n+  NodeId get_node_id () const { return node_id; }\n };\n \n // Segment used in type path with generic args"}, {"sha": "0b534d0093d4b9eeb76026be52dcef71d4247de3", "filename": "gcc/rust/hir/rust-ast-lower-type.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bfeef998ff340fef37f07e1a7a0366e73296380/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bfeef998ff340fef37f07e1a7a0366e73296380/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h?ref=8bfeef998ff340fef37f07e1a7a0366e73296380", "patch": "@@ -35,17 +35,22 @@ class ASTLowerTypePath : public ASTLoweringBase\n   {\n     ASTLowerTypePath resolver;\n     type.accept_vis (resolver);\n-\n     rust_assert (resolver.translated != nullptr);\n-\n     return resolver.translated;\n   }\n \n+  void visit (AST::TypePathSegmentFunction &) override { gcc_unreachable (); }\n+\n   void visit (AST::TypePathSegment &segment) override\n   {\n+    auto crate_num = mappings->get_current_crate ();\n+    auto hirid = mappings->get_next_hir_id (crate_num);\n+    Analysis::NodeMapping mapping (crate_num, segment.get_node_id (), hirid,\n+\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+\n     HIR::PathIdentSegment ident (segment.get_ident_segment ().as_string ());\n     translated_segment\n-      = new HIR::TypePathSegment (ident,\n+      = new HIR::TypePathSegment (std::move (mapping), ident,\n \t\t\t\t  segment.get_separating_scope_resolution (),\n \t\t\t\t  segment.get_locus ());\n   }"}, {"sha": "516b5ba9f76001d1ef15cc04136b3e597ccf7369", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bfeef998ff340fef37f07e1a7a0366e73296380/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bfeef998ff340fef37f07e1a7a0366e73296380/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=8bfeef998ff340fef37f07e1a7a0366e73296380", "patch": "@@ -383,9 +383,15 @@ ASTLowerTypePath::visit (AST::TypePathSegmentGeneric &segment)\n       type_args.push_back (std::unique_ptr<HIR::Type> (t));\n     }\n \n+  auto crate_num = mappings->get_current_crate ();\n+  auto hirid = mappings->get_next_hir_id (crate_num);\n+  Analysis::NodeMapping mapping (crate_num, segment.get_node_id (), hirid,\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n   translated_segment = new HIR::TypePathSegmentGeneric (\n-    segment_name, has_separating_scope_resolution, std::move (lifetime_args),\n-    std::move (type_args), std::move (binding_args), segment.get_locus ());\n+    std::move (mapping), segment_name, has_separating_scope_resolution,\n+    std::move (lifetime_args), std::move (type_args), std::move (binding_args),\n+    segment.get_locus ());\n }\n \n } // namespace HIR"}, {"sha": "5d9f965347b4d4f517a9d02010723ad02d854304", "filename": "gcc/rust/hir/tree/rust-hir-path.h", "status": "modified", "additions": 57, "deletions": 30, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bfeef998ff340fef37f07e1a7a0366e73296380/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bfeef998ff340fef37f07e1a7a0366e73296380/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h?ref=8bfeef998ff340fef37f07e1a7a0366e73296380", "patch": "@@ -351,19 +351,22 @@ class PathInExpression : public PathPattern, public PathExpr\n  * ident-only segment) */\n class TypePathSegment\n {\n-  /* TODO: may have to unify TypePathSegment and PathExprSegment (which are\n-   * mostly the same anyway) in order to resolve goddamn syntax ambiguities. One\n-   * difference is that function on TypePathSegment is not allowed if\n-   * GenericArgs are, so could disallow that in constructor, which won't give\n-   * that much size overhead. */\n-  PathIdentSegment ident_segment;\n+public:\n+  enum SegmentType\n+  {\n+    REG,\n+    GENERIC,\n+    FUNCTION\n+  };\n \n+private:\n+  Analysis::NodeMapping mappings;\n+  PathIdentSegment ident_segment;\n   Location locus;\n \n protected:\n-  /* This is protected because it is only really used by derived classes, not\n-   * the base. */\n   bool has_separating_scope_resolution;\n+  SegmentType type;\n \n   // Clone function implementation - not pure virtual as overrided by subclasses\n   virtual TypePathSegment *clone_type_path_segment_impl () const\n@@ -374,23 +377,30 @@ class TypePathSegment\n public:\n   virtual ~TypePathSegment () {}\n \n+  virtual SegmentType get_type () const { return SegmentType::REG; }\n+\n   // Unique pointer custom clone function\n   std::unique_ptr<TypePathSegment> clone_type_path_segment () const\n   {\n     return std::unique_ptr<TypePathSegment> (clone_type_path_segment_impl ());\n   }\n \n-  TypePathSegment (PathIdentSegment ident_segment,\n+  TypePathSegment (Analysis::NodeMapping mappings,\n+\t\t   PathIdentSegment ident_segment,\n \t\t   bool has_separating_scope_resolution, Location locus)\n-    : ident_segment (std::move (ident_segment)), locus (locus),\n-      has_separating_scope_resolution (has_separating_scope_resolution)\n+    : mappings (std::move (mappings)),\n+      ident_segment (std::move (ident_segment)), locus (locus),\n+      has_separating_scope_resolution (has_separating_scope_resolution),\n+      type (SegmentType::REG)\n   {}\n \n-  TypePathSegment (std::string segment_name,\n+  TypePathSegment (Analysis::NodeMapping mappings, std::string segment_name,\n \t\t   bool has_separating_scope_resolution, Location locus)\n-    : ident_segment (PathIdentSegment (std::move (segment_name))),\n+    : mappings (std::move (mappings)),\n+      ident_segment (PathIdentSegment (std::move (segment_name))),\n       locus (locus),\n-      has_separating_scope_resolution (has_separating_scope_resolution)\n+      has_separating_scope_resolution (has_separating_scope_resolution),\n+      type (SegmentType::REG)\n   {}\n \n   virtual std::string as_string () const { return ident_segment.as_string (); }\n@@ -407,6 +417,10 @@ class TypePathSegment\n \n   // not pure virtual as class not abstract\n   virtual void accept_vis (HIRVisitor &vis);\n+\n+  const Analysis::NodeMapping &get_mappings () const { return mappings; }\n+\n+  const PathIdentSegment &get_ident_segment () const { return ident_segment; }\n };\n \n // Segment used in type path with generic args\n@@ -420,22 +434,24 @@ class TypePathSegmentGeneric : public TypePathSegment\n   bool is_ident_only () const override { return false; }\n \n   // Constructor with PathIdentSegment and GenericArgs\n-  TypePathSegmentGeneric (PathIdentSegment ident_segment,\n+  TypePathSegmentGeneric (Analysis::NodeMapping mappings,\n+\t\t\t  PathIdentSegment ident_segment,\n \t\t\t  bool has_separating_scope_resolution,\n \t\t\t  GenericArgs generic_args, Location locus)\n-    : TypePathSegment (std::move (ident_segment),\n+    : TypePathSegment (std::move (mappings), std::move (ident_segment),\n \t\t       has_separating_scope_resolution, locus),\n       generic_args (std::move (generic_args))\n   {}\n \n   // Constructor from segment name and all args\n-  TypePathSegmentGeneric (std::string segment_name,\n+  TypePathSegmentGeneric (Analysis::NodeMapping mappings,\n+\t\t\t  std::string segment_name,\n \t\t\t  bool has_separating_scope_resolution,\n \t\t\t  std::vector<Lifetime> lifetime_args,\n \t\t\t  std::vector<std::unique_ptr<Type> > type_args,\n \t\t\t  std::vector<GenericArgsBinding> binding_args,\n \t\t\t  Location locus)\n-    : TypePathSegment (std::move (segment_name),\n+    : TypePathSegment (std::move (mappings), std::move (segment_name),\n \t\t       has_separating_scope_resolution, locus),\n       generic_args (GenericArgs (std::move (lifetime_args),\n \t\t\t\t std::move (type_args),\n@@ -446,7 +462,12 @@ class TypePathSegmentGeneric : public TypePathSegment\n \n   void accept_vis (HIRVisitor &vis) override;\n \n-  GenericArgs get_generic_args () { return generic_args; }\n+  GenericArgs &get_generic_args () { return generic_args; }\n+\n+  virtual SegmentType get_type () const override final\n+  {\n+    return SegmentType::GENERIC;\n+  }\n \n protected:\n   // Use covariance to override base class method\n@@ -544,19 +565,21 @@ class TypePathSegmentFunction : public TypePathSegment\n \n public:\n   // Constructor with PathIdentSegment and TypePathFn\n-  TypePathSegmentFunction (PathIdentSegment ident_segment,\n+  TypePathSegmentFunction (Analysis::NodeMapping mappings,\n+\t\t\t   PathIdentSegment ident_segment,\n \t\t\t   bool has_separating_scope_resolution,\n \t\t\t   TypePathFunction function_path, Location locus)\n-    : TypePathSegment (std::move (ident_segment),\n+    : TypePathSegment (std::move (mappings), std::move (ident_segment),\n \t\t       has_separating_scope_resolution, locus),\n       function_path (std::move (function_path))\n   {}\n \n   // Constructor with segment name and TypePathFn\n-  TypePathSegmentFunction (std::string segment_name,\n+  TypePathSegmentFunction (Analysis::NodeMapping mappings,\n+\t\t\t   std::string segment_name,\n \t\t\t   bool has_separating_scope_resolution,\n \t\t\t   TypePathFunction function_path, Location locus)\n-    : TypePathSegment (std::move (segment_name),\n+    : TypePathSegment (std::move (mappings), std::move (segment_name),\n \t\t       has_separating_scope_resolution, locus),\n       function_path (std::move (function_path))\n   {}\n@@ -567,6 +590,11 @@ class TypePathSegmentFunction : public TypePathSegment\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  virtual SegmentType get_type () const override final\n+  {\n+    return SegmentType::FUNCTION;\n+  }\n+\n protected:\n   // Use covariance to override base class method\n   TypePathSegmentFunction *clone_type_path_segment_impl () const override\n@@ -667,16 +695,15 @@ class TypePath : public TypeNoBounds\n \n   size_t get_num_segments () const { return segments.size (); }\n \n-  void iterate_segments (std::function<bool (TypePathSegment *)> cb)\n+  std::vector<std::unique_ptr<TypePathSegment> > &get_segments ()\n   {\n-    for (auto &seg : segments)\n-      {\n-\tif (!cb (seg.get ()))\n-\t  return;\n-      }\n+    return segments;\n   }\n \n-  TypePathSegment *get_final_segment () { return segments.back ().get (); }\n+  std::unique_ptr<TypePathSegment> &get_final_segment ()\n+  {\n+    return segments.back ();\n+  }\n };\n \n struct QualifiedPathType"}, {"sha": "e9a3bdeda38817d2303ea8cf4601630c952e4cad", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bfeef998ff340fef37f07e1a7a0366e73296380/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bfeef998ff340fef37f07e1a7a0366e73296380/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=8bfeef998ff340fef37f07e1a7a0366e73296380", "patch": "@@ -1,3 +1,4 @@\n+\n // Copyright (C) 2020 Free Software Foundation, Inc.\n \n // This file is part of GCC.\n@@ -22,6 +23,7 @@\n #include \"rust-hir-type-check-base.h\"\n #include \"rust-hir-full.h\"\n #include \"rust-substitution-mapper.h\"\n+#include \"rust-hir-path-probe.h\"\n \n namespace Rust {\n namespace Resolver {\n@@ -145,7 +147,7 @@ class TypeCheckType : public TypeCheckBase\n     TyTy::BaseType *path_type = lookup->clone ();\n     path_type->set_ref (path.get_mappings ().get_hirid ());\n \n-    HIR::TypePathSegment *final_seg = path.get_final_segment ();\n+    HIR::TypePathSegment *final_seg = path.get_final_segment ().get ();\n     HIR::GenericArgs args\n       = TypeCheckResolveGenericArguments::resolve (final_seg);\n "}]}