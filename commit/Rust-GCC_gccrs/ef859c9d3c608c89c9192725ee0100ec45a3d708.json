{"sha": "ef859c9d3c608c89c9192725ee0100ec45a3d708", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY4NTljOWQzYzYwOGM4OWM5MTkyNzI1ZWUwMTAwZWM0NWEzZDcwOA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-08-06T18:06:42Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-08-06T18:06:42Z"}, "message": "[multiple changes]\n\n2012-08-06  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* testsuite/decimal/mixed-mode-cmp_neg.cc: Add test variable; minor\n\ttweaks.\n\t* testsuite/decimal/unary-arith.cc: Likewise.\n\t* testsuite/decimal/ctor.cc: Likewise.\n\t* testsuite/decimal/conversion-to-integral.cc: Likewise.\n\t* testsuite/decimal/make-decimal.cc: Likewise.\n\t* testsuite/decimal/comparison.cc: Likewise.\n\t* testsuite/decimal/incdec-memfunc.cc: Likewise.\n\t* testsuite/decimal/conversion-to-generic-float.cc: Likewise.\n\t* testsuite/decimal/compound-assignment-memfunc.cc: Likewise.\n\t* testsuite/decimal/cast_neg.cc: Likewise.\n\t* testsuite/decimal/incdec.cc: Likewise.\n\t* testsuite/decimal/mixed-mode-arith_neg.cc: Likewise.\n\t* testsuite/decimal/binary-arith.cc: Likewise.\n\t* testsuite/decimal/conversion-from-float.cc: Likewise.\n\t* testsuite/decimal/conversion-from-integral.cc: Likewise.\n\t* testsuite/decimal/compound-assignment.cc: Likewise.\n\n2012-08-06  Peter Bergner  <bergner@vnet.ibm.com>\n\n\tPR libstdc++/54036\n\t* include/decimal/decimal.h (_DEFINE_DECIMAL_UNARY_OP): Use _Op as\n\ta unary operator.\n\t* testsuite/decimal/pr54036-1.cc: New test.\n\t* testsuite/decimal/pr54036-2.cc: Likewise.\n\t* testsuite/decimal/pr54036-3.cc: Likewise.\n\nFrom-SVN: r190186", "tree": {"sha": "d487a93c7a88ce064394e0704a0c0343df8e4c9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d487a93c7a88ce064394e0704a0c0343df8e4c9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef859c9d3c608c89c9192725ee0100ec45a3d708", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef859c9d3c608c89c9192725ee0100ec45a3d708", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef859c9d3c608c89c9192725ee0100ec45a3d708", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef859c9d3c608c89c9192725ee0100ec45a3d708/comments", "author": null, "committer": null, "parents": [{"sha": "777d77b37a5a9563bc7bf9a887e282ffd383d982", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/777d77b37a5a9563bc7bf9a887e282ffd383d982", "html_url": "https://github.com/Rust-GCC/gccrs/commit/777d77b37a5a9563bc7bf9a887e282ffd383d982"}], "stats": {"total": 403, "additions": 364, "deletions": 39}, "files": [{"sha": "3bd4ea39ef7a5762cdb7510d4fe0b2d838a21e94", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ef859c9d3c608c89c9192725ee0100ec45a3d708", "patch": "@@ -1,3 +1,32 @@\n+2012-08-06  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* testsuite/decimal/mixed-mode-cmp_neg.cc: Add test variable; minor\n+\ttweaks.\n+\t* testsuite/decimal/unary-arith.cc: Likewise.\n+\t* testsuite/decimal/ctor.cc: Likewise.\n+\t* testsuite/decimal/conversion-to-integral.cc: Likewise.\n+\t* testsuite/decimal/make-decimal.cc: Likewise.\n+\t* testsuite/decimal/comparison.cc: Likewise.\n+\t* testsuite/decimal/incdec-memfunc.cc: Likewise.\n+\t* testsuite/decimal/conversion-to-generic-float.cc: Likewise.\n+\t* testsuite/decimal/compound-assignment-memfunc.cc: Likewise.\n+\t* testsuite/decimal/cast_neg.cc: Likewise.\n+\t* testsuite/decimal/incdec.cc: Likewise.\n+\t* testsuite/decimal/mixed-mode-arith_neg.cc: Likewise.\n+\t* testsuite/decimal/binary-arith.cc: Likewise.\n+\t* testsuite/decimal/conversion-from-float.cc: Likewise.\n+\t* testsuite/decimal/conversion-from-integral.cc: Likewise.\n+\t* testsuite/decimal/compound-assignment.cc: Likewise.\n+\n+2012-08-06  Peter Bergner  <bergner@vnet.ibm.com>\n+\n+\tPR libstdc++/54036\n+\t* include/decimal/decimal.h (_DEFINE_DECIMAL_UNARY_OP): Use _Op as\n+\ta unary operator.\n+\t* testsuite/decimal/pr54036-1.cc: New test.\n+\t* testsuite/decimal/pr54036-2.cc: Likewise.\n+\t* testsuite/decimal/pr54036-3.cc: Likewise.\n+\n 2012-08-04  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tRevert:"}, {"sha": "6bc9e6a9300172a515406342a2211b4662da7b55", "filename": "libstdc++-v3/include/decimal/decimal.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal.h?ref=ef859c9d3c608c89c9192725ee0100ec45a3d708", "patch": "@@ -288,7 +288,7 @@ namespace decimal\n   inline _Tp operator _Op(_Tp __rhs)\t\t\\\n   {\t\t\t\t\t\t\\\n     _Tp __tmp;\t\t\t\t\t\\\n-    __tmp.__setval(0 _Op __rhs.__getval());\t\\\n+    __tmp.__setval(_Op __rhs.__getval());\t\\\n     return __tmp;\t\t\t\t\\\n   }\n "}, {"sha": "d1bd1bc2d4777ef15050b5564f0f410a6c06974c", "filename": "libstdc++-v3/testsuite/decimal/binary-arith.cc", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fbinary-arith.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fbinary-arith.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fbinary-arith.cc?ref=ef859c9d3c608c89c9192725ee0100ec45a3d708", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,6 +37,7 @@ unsigned long long ull = 50;\n void\n binary_add_32 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal32 a (1000), b;\n \n   b = si + a;   VERIFY (b == 980);\n@@ -63,6 +64,7 @@ binary_add_32 (void)\n void\n binary_subtract_32 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal32 a (1000), b;\n \n   b = a - si;   VERIFY (b == 1020);\n@@ -90,6 +92,7 @@ binary_subtract_32 (void)\n void\n binary_multiply_32 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal32 a (1000), b;\n \n   b = a * si;   VERIFY (b == -20000);\n@@ -116,6 +119,7 @@ binary_multiply_32 (void)\n void\n binary_divide_32 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal32 a (1000), b;\n \n   b = a / si;   VERIFY (b == -50);\n@@ -143,6 +147,7 @@ binary_divide_32 (void)\n void\n binary_add_64 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal64 a (1000), b;\n \n   b = a + si;   VERIFY (b == 980);\n@@ -169,6 +174,7 @@ binary_add_64 (void)\n void\n binary_subtract_64 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal64 a (1000), b;\n \n   b = a - si;   VERIFY (b == 1020);\n@@ -196,6 +202,7 @@ binary_subtract_64 (void)\n void\n binary_multiply_64 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal64 a (1000), b;\n \n   b = a * si;   VERIFY (b == -20000);\n@@ -222,6 +229,7 @@ binary_multiply_64 (void)\n void\n binary_divide_64 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal64 a (1000), b;\n \n   b = a / si;   VERIFY (b == -50);\n@@ -249,6 +257,7 @@ binary_divide_64 (void)\n void\n binary_add_128 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal128 a (1000), b;\n \n   b = a + si;   VERIFY (b == 980);\n@@ -275,6 +284,7 @@ binary_add_128 (void)\n void\n binary_subtract_128 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal128 a (1000), b;\n \n   b = a - si;   VERIFY (b == 1020);\n@@ -302,6 +312,7 @@ binary_subtract_128 (void)\n void\n binary_multiply_128 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal128 a (1000), b;\n \n   b = a * si;   VERIFY (b == -20000);\n@@ -328,6 +339,7 @@ binary_multiply_128 (void)\n void\n binary_divide_128 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal128 a (1000), b;\n \n   b = a / si;   VERIFY (b == -50);"}, {"sha": "4ecd15d3e90db32fff82707b83988a6ec99804b6", "filename": "libstdc++-v3/testsuite/decimal/cast_neg.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fcast_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fcast_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fcast_neg.cc?ref=ef859c9d3c608c89c9192725ee0100ec45a3d708", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -26,7 +26,6 @@\n // attempt to do a cast are flagged as errors.\n \n #include <decimal/decimal>\n-#include <testsuite_hooks.h>\n \n using namespace std::decimal;\n "}, {"sha": "ff1e21eb300ce26db80c5a8425724a1dc4ccd289", "filename": "libstdc++-v3/testsuite/decimal/comparison.cc", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fcomparison.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fcomparison.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fcomparison.cc?ref=ef859c9d3c608c89c9192725ee0100ec45a3d708", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,6 +37,7 @@ unsigned long long ull = 50;\n void\n compare_eq_32 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal32 a;\n \n   a = si;   VERIFY (a == si);   VERIFY (si == a);\n@@ -53,6 +54,7 @@ compare_eq_32 (void)\n void\n compare_ne_32 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal32 a = 100;\n \n   VERIFY (a != si);   VERIFY (si != a);\n@@ -69,6 +71,7 @@ compare_ne_32 (void)\n void\n compare_lt_32 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal32 a = -100;\n \n   VERIFY (a < si);\n@@ -96,6 +99,7 @@ compare_lt_32 (void)\n void\n compare_le_32 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal32 a;\n \n   a = si;   VERIFY (a <= si);   VERIFY (si <= a);\n@@ -134,6 +138,7 @@ compare_le_32 (void)\n void\n compare_gt_32 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal32 a = 100;\n \n   VERIFY (a > si);\n@@ -161,6 +166,7 @@ compare_gt_32 (void)\n void\n compare_ge_32 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal32 a;\n \n   a = si;   VERIFY (a >= si);   VERIFY (si <= a);\n@@ -199,6 +205,7 @@ compare_ge_32 (void)\n void\n compare_eq_64 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal64 a;\n \n   a = si;   VERIFY (a == si);   VERIFY (si == a);\n@@ -215,6 +222,7 @@ compare_eq_64 (void)\n void\n compare_ne_64 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal64 a = 100;\n \n   VERIFY (a != si);   VERIFY (si != a);\n@@ -231,6 +239,7 @@ compare_ne_64 (void)\n void\n compare_lt_64 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal64 a = -100;\n \n   VERIFY (a < si);\n@@ -258,6 +267,7 @@ compare_lt_64 (void)\n void\n compare_le_64 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal64 a;\n \n   a = si;   VERIFY (a <= si);   VERIFY (si <= a);\n@@ -296,6 +306,7 @@ compare_le_64 (void)\n void\n compare_gt_64 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal64 a = 100;\n \n   VERIFY (a > si);\n@@ -323,6 +334,7 @@ compare_gt_64 (void)\n void\n compare_ge_64 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal64 a;\n \n   a = si;   VERIFY (a >= si);   VERIFY (si <= a);\n@@ -361,6 +373,7 @@ compare_ge_64 (void)\n void\n compare_eq_128 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal128 a;\n \n   a = si;   VERIFY (a == si);   VERIFY (si == a);\n@@ -377,6 +390,7 @@ compare_eq_128 (void)\n void\n compare_ne_128 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal128 a = 100;\n \n   VERIFY (a != si);   VERIFY (si != a);\n@@ -393,6 +407,7 @@ compare_ne_128 (void)\n void\n compare_lt_128 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal128 a = -100;\n \n   VERIFY (a < si);\n@@ -420,6 +435,7 @@ compare_lt_128 (void)\n void\n compare_le_128 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal128 a;\n \n   a = si;   VERIFY (a <= si);   VERIFY (si <= a);\n@@ -458,6 +474,7 @@ compare_le_128 (void)\n void\n compare_gt_128 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal128 a = 100;\n \n   VERIFY (a > si);\n@@ -485,6 +502,7 @@ compare_gt_128 (void)\n void\n compare_ge_128 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal128 a;\n \n   a = si;   VERIFY (a >= si);   VERIFY (si <= a);"}, {"sha": "617769247d4f41c8dac2149d2091fa63b592d2f0", "filename": "libstdc++-v3/testsuite/decimal/compound-assignment-memfunc.cc", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fcompound-assignment-memfunc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fcompound-assignment-memfunc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fcompound-assignment-memfunc.cc?ref=ef859c9d3c608c89c9192725ee0100ec45a3d708", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,6 +41,7 @@ unsigned long long ull = 50;\n void\n compound_assignment_add_32 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal32 a (1000), b;\n \n   b = a; b.operator+=(d32);  VERIFY (b == 1005);\n@@ -57,6 +58,7 @@ compound_assignment_add_32 (void)\n void\n compound_assignment_subtract_32 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal32 a (1000), b;\n \n   b = a; b.operator-=(d32);  VERIFY (b == 995);\n@@ -73,6 +75,7 @@ compound_assignment_subtract_32 (void)\n void\n compound_assignment_multiply_32 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal32 a (1000), b;\n \n   b = a; b.operator*=(d32);  VERIFY (b == 5000);\n@@ -89,6 +92,7 @@ compound_assignment_multiply_32 (void)\n void\n compound_assignment_divide_32 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal32 a (1000), b;\n \n   b = a; b.operator/=(d32);  VERIFY (b == 200);\n@@ -105,6 +109,7 @@ compound_assignment_divide_32 (void)\n void\n compound_assignment_add_64 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal64 a (1000), b;\n \n   b = a; b.operator+=(d32);  VERIFY (b == 1005);\n@@ -121,6 +126,7 @@ compound_assignment_add_64 (void)\n void\n compound_assignment_subtract_64 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal64 a (1000), b;\n \n   b = a; b.operator-=(d32);  VERIFY (b == 995);\n@@ -137,6 +143,7 @@ compound_assignment_subtract_64 (void)\n void\n compound_assignment_multiply_64 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal64 a (1000), b;\n \n   b = a; b.operator*=(d32);  VERIFY (b == 5000);\n@@ -153,6 +160,7 @@ compound_assignment_multiply_64 (void)\n void\n compound_assignment_divide_64 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal64 a (1000), b;\n \n   b = a; b.operator/=(d32);  VERIFY (b == 200);\n@@ -169,6 +177,7 @@ compound_assignment_divide_64 (void)\n void\n compound_assignment_add_128 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal128 a (1000), b;\n \n   b = a; b.operator+=(d32);  VERIFY (b == 1005);\n@@ -185,6 +194,7 @@ compound_assignment_add_128 (void)\n void\n compound_assignment_subtract_128 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal128 a (1000), b;\n \n   b = a; b.operator-=(d32);  VERIFY (b == 995);\n@@ -201,6 +211,7 @@ compound_assignment_subtract_128 (void)\n void\n compound_assignment_multiply_128 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal128 a (1000), b;\n \n   b = a; b.operator*=(d32);  VERIFY (b == 5000);\n@@ -217,6 +228,7 @@ compound_assignment_multiply_128 (void)\n void\n compound_assignment_divide_128 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal128 a (1000), b;\n \n   b = a; b.operator/=(d32);  VERIFY (b == 200);"}, {"sha": "9afdbf45652019e987e560808596e136fa19fdcd", "filename": "libstdc++-v3/testsuite/decimal/compound-assignment.cc", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fcompound-assignment.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fcompound-assignment.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fcompound-assignment.cc?ref=ef859c9d3c608c89c9192725ee0100ec45a3d708", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -39,6 +39,7 @@ unsigned long long ull = 50;\n void\n compound_assignment_add_32 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal32 a (1000), b;\n \n   b = a; b += d32;  VERIFY (b == 1005);\n@@ -55,6 +56,7 @@ compound_assignment_add_32 (void)\n void\n compound_assignment_subtract_32 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal32 a (1000), b;\n \n   b = a; b -= d32;  VERIFY (b == 995);\n@@ -71,6 +73,7 @@ compound_assignment_subtract_32 (void)\n void\n compound_assignment_multiply_32 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal32 a (1000), b;\n \n   b = a; b *= d32;  VERIFY (b == 5000);\n@@ -87,6 +90,7 @@ compound_assignment_multiply_32 (void)\n void\n compound_assignment_divide_32 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal32 a (1000), b;\n \n   b = a; b /= d32;  VERIFY (b == 200);\n@@ -103,6 +107,7 @@ compound_assignment_divide_32 (void)\n void\n compound_assignment_add_64 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal64 a (1000), b;\n \n   b = a; b += d32;  VERIFY (b == 1005);\n@@ -119,6 +124,7 @@ compound_assignment_add_64 (void)\n void\n compound_assignment_subtract_64 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal64 a (1000), b;\n \n   b = a; b -= d32;  VERIFY (b == 995);\n@@ -135,6 +141,7 @@ compound_assignment_subtract_64 (void)\n void\n compound_assignment_multiply_64 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal64 a (1000), b;\n \n   b = a; b *= d32;  VERIFY (b == 5000);\n@@ -151,6 +158,7 @@ compound_assignment_multiply_64 (void)\n void\n compound_assignment_divide_64 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal64 a (1000), b;\n \n   b = a; b /= d32;  VERIFY (b == 200);\n@@ -167,6 +175,7 @@ compound_assignment_divide_64 (void)\n void\n compound_assignment_add_128 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal128 a (1000), b;\n \n   b = a; b += d32;  VERIFY (b == 1005);\n@@ -183,6 +192,7 @@ compound_assignment_add_128 (void)\n void\n compound_assignment_subtract_128 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal128 a (1000), b;\n \n   b = a; b -= d32;  VERIFY (b == 995);\n@@ -199,6 +209,7 @@ compound_assignment_subtract_128 (void)\n void\n compound_assignment_multiply_128 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal128 a (1000), b;\n \n   b = a; b *= d32;  VERIFY (b == 5000);\n@@ -215,6 +226,7 @@ compound_assignment_multiply_128 (void)\n void\n compound_assignment_divide_128 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal128 a (1000), b;\n \n   b = a; b /= d32;  VERIFY (b == 200);"}, {"sha": "48fd6d48c5f5ad98f200af4ed6f4803c235792ec", "filename": "libstdc++-v3/testsuite/decimal/conversion-from-float.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-from-float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-from-float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-from-float.cc?ref=ef859c9d3c608c89c9192725ee0100ec45a3d708", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,6 +29,7 @@ using namespace std::decimal;\n void\n conversion_from_float_32 ()\n {\n+  bool test __attribute__((unused)) = true;\n   decimal32 d32(123);\n   decimal64 d64(234);\n   decimal128 d128(345);\n@@ -51,6 +52,7 @@ conversion_from_float_32 ()\n void\n conversion_from_float_64 ()\n {\n+  bool test __attribute__((unused)) = true;\n   decimal32 d32(123);\n   decimal64 d64(234);\n   decimal128 d128(345);\n@@ -73,6 +75,7 @@ conversion_from_float_64 ()\n void\n conversion_from_float_128 ()\n {\n+  bool test __attribute__((unused)) = true;\n   decimal32 d32(123);\n   decimal64 d64(234);\n   decimal128 d128(345);"}, {"sha": "23da3c157277abbb4605e15c687941cbbe5448f0", "filename": "libstdc++-v3/testsuite/decimal/conversion-from-integral.cc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-from-integral.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-from-integral.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-from-integral.cc?ref=ef859c9d3c608c89c9192725ee0100ec45a3d708", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,6 +29,7 @@ using namespace std::decimal;\n void\n conversion_from_integral_p32 ()\n {\n+  bool test __attribute__((unused)) = true;\n   decimal32 d;\n   decimal32 from_si (1);\n   decimal32 from_ui (2U);\n@@ -61,6 +62,7 @@ conversion_from_integral_p32 ()\n void\n conversion_from_integral_m32 ()\n {\n+  bool test __attribute__((unused)) = true;\n   decimal32 d;\n   decimal32 from_si (-1);\n   decimal32 from_sl (-2L);\n@@ -81,6 +83,7 @@ conversion_from_integral_m32 ()\n void\n conversion_from_integral_p64 ()\n {\n+  bool test __attribute__((unused)) = true;\n   decimal64 d;\n   decimal64 from_si (1);\n   decimal64 from_ui (2U);\n@@ -113,6 +116,7 @@ conversion_from_integral_p64 ()\n void\n conversion_from_integral_m64 ()\n {\n+  bool test __attribute__((unused)) = true;\n   decimal64 d;\n   decimal64 from_si (-1);\n   decimal64 from_sl (-2L);\n@@ -133,6 +137,7 @@ conversion_from_integral_m64 ()\n void\n conversion_from_integral_p128 ()\n {\n+  bool test __attribute__((unused)) = true;\n   decimal128 d;\n   decimal128 from_si (1);\n   decimal128 from_ui (2U);\n@@ -164,6 +169,7 @@ conversion_from_integral_p128 ()\n void\n conversion_from_integral_m128 ()\n {\n+  bool test __attribute__((unused)) = true;\n   decimal128 d;\n   decimal128 from_si (-1);\n   decimal128 from_sl (-2L);"}, {"sha": "fec39e68b93082543190e5534dab2c82c9d530ea", "filename": "libstdc++-v3/testsuite/decimal/conversion-to-generic-float.cc", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-to-generic-float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-to-generic-float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-to-generic-float.cc?ref=ef859c9d3c608c89c9192725ee0100ec45a3d708", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,7 +27,8 @@ using namespace std::decimal;\n void\n conversion_to_generic_float_32 ()\n {\n-  std::decimal::decimal32 d32(123);\n+  bool test __attribute__((unused)) = true;\n+  decimal32 d32(123);\n   float f;\n   double d;\n   long double ld;\n@@ -51,7 +52,8 @@ conversion_to_generic_float_32 ()\n void\n conversion_to_generic_float_64 ()\n {\n-  std::decimal::decimal64 d64(234);\n+  bool test __attribute__((unused)) = true;\n+  decimal64 d64(234);\n   float f;\n   double d;\n   long double ld;\n@@ -75,7 +77,8 @@ conversion_to_generic_float_64 ()\n void\n conversion_to_generic_float_128 ()\n {\n-  std::decimal::decimal128 d128(345);\n+  bool test __attribute__((unused)) = true;\n+  decimal128 d128(345);\n   float f;\n   double d;\n   long double ld;"}, {"sha": "41ff2f5d409dfc6b154cbf734ad4b0113f7d4641", "filename": "libstdc++-v3/testsuite/decimal/conversion-to-integral.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-to-integral.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-to-integral.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fconversion-to-integral.cc?ref=ef859c9d3c608c89c9192725ee0100ec45a3d708", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -23,7 +23,6 @@\n \n #include <decimal/decimal>\n #include <climits>\n-#include <cstdio>\n #include <testsuite_hooks.h>\n \n // Use extension to replace implicit long long conversion with function call.\n@@ -36,6 +35,7 @@ conversion_to_integral_32 (void)\n {\n   #undef MAXVAL\n   #define MAXVAL 999999LL\n+  bool test __attribute__((unused)) = true;\n   decimal32 a, b (1), c (-1), d (MAXVAL), e (-MAXVAL);\n   long long ll;\n \n@@ -51,6 +51,7 @@ conversion_to_integral_64 (void)\n {\n   #undef MAXVAL\n   #define MAXVAL 999999999999999LL\n+  bool test __attribute__((unused)) = true;\n   decimal64 a, b (1), c (-1), d (MAXVAL), e (-MAXVAL);\n   long long ll;\n \n@@ -66,6 +67,7 @@ conversion_to_integral_128 (void)\n {\n   #undef MAXVAL\n   #define MAXVAL LONG_LONG_MAX\n+  bool test __attribute__((unused)) = true;\n   decimal128 a, b (1), c (-1), d (MAXVAL), e (-MAXVAL);\n   long long ll;\n "}, {"sha": "6164a020b41e22c7b9b429b36dbecbc923f11b9d", "filename": "libstdc++-v3/testsuite/decimal/ctor.cc", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fctor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fctor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fctor.cc?ref=ef859c9d3c608c89c9192725ee0100ec45a3d708", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,28 +32,31 @@ using namespace std::decimal;\n void\n ctor_32 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal32 a;\n   float b __attribute__((mode(SD))) = 0.e-101DF;\n \n-  VERIFY (memcmp (&a, &b, 4) == 0);\n+  VERIFY (std::memcmp (&a, &b, 4) == 0);\n }\n \n void\n ctor_64 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal64 a;\n   float b __attribute__((mode(DD))) = 0.e-398DD;\n \n-  VERIFY (memcmp (&a, &b, 8) == 0);\n+  VERIFY (std::memcmp (&a, &b, 8) == 0);\n }\n \n void\n ctor_128 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal128 a;\n   float b __attribute__((mode(TD))) = 0.e-6176DL;\n \n-  VERIFY (memcmp (&a, &b, 16) == 0);\n+  VERIFY (std::memcmp (&a, &b, 16) == 0);\n }\n \n int"}, {"sha": "31e4579e20fc201a93a3f6667ebe5e0fd2a81d37", "filename": "libstdc++-v3/testsuite/decimal/incdec-memfunc.cc", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fincdec-memfunc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fincdec-memfunc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fincdec-memfunc.cc?ref=ef859c9d3c608c89c9192725ee0100ec45a3d708", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -34,8 +34,9 @@ using namespace std::decimal;\n void\n incdec32 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   int ival;\n-  std::decimal::decimal32 a(11), b, c;\n+  decimal32 a(11), b, c;\n \n   // Verify that we get the expected value of b after assignment.\n   b = a;\n@@ -81,8 +82,9 @@ incdec32 (void)\n void\n incdec64 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   int ival;\n-  std::decimal::decimal64 a(11), b, c;\n+  decimal64 a(11), b, c;\n \n   // Verify that we get the expected value of b after assignment.\n   b = a;\n@@ -128,8 +130,9 @@ incdec64 (void)\n void\n incdec128 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   int ival;\n-  std::decimal::decimal128 a(11), b, c;\n+  decimal128 a(11), b, c;\n \n   // Verify that we get the expected value of b after assignment.\n   b = a;"}, {"sha": "370edf49581c57ad5e247665a37db1a7ff69a94f", "filename": "libstdc++-v3/testsuite/decimal/incdec.cc", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fincdec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fincdec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fincdec.cc?ref=ef859c9d3c608c89c9192725ee0100ec45a3d708", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,8 +32,9 @@ using namespace std::decimal;\n void\n incdec32 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   int ival;\n-  std::decimal::decimal32 a(11), b, c;\n+  decimal32 a(11), b, c;\n \n   // Verify that we get the expected value of b after assignment.\n   b = a;\n@@ -79,8 +80,9 @@ incdec32 (void)\n void\n incdec64 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   int ival;\n-  std::decimal::decimal64 a(11), b, c;\n+  decimal64 a(11), b, c;\n \n   // Verify that we get the expected value of b after assignment.\n   b = a;\n@@ -126,8 +128,9 @@ incdec64 (void)\n void\n incdec128 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   int ival;\n-  std::decimal::decimal128 a(11), b, c;\n+  decimal128 a(11), b, c;\n \n   // Verify that we get the expected value of b after assignment.\n   b = a;"}, {"sha": "4d1bee5749a1bb6f731469b16e3ba69539a8fc81", "filename": "libstdc++-v3/testsuite/decimal/make-decimal.cc", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fmake-decimal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fmake-decimal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fmake-decimal.cc?ref=ef859c9d3c608c89c9192725ee0100ec45a3d708", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,8 +32,8 @@\n   i = ESIGN EXP;\t\t\t\t\t\t\t\\\n   a = PASTE(make_decimal,32) (sll, i);\t\t\t\t\t\\\n   b = PASTE(make_decimal,32) (PASTE(COEFF,LL), ESIGN EXP);\t\\\n-  VERIFY ((__builtin_memcmp ((void *)&x, (void *)&a, SIZE) == 0)\t\\\n-          && (__builtin_memcmp ((void *)&x, (void *)&b,SIZE) == 0));\n+  VERIFY ((std::memcmp ((void *)&x, (void *)&a, SIZE) == 0)\t\\\n+          && (std::memcmp ((void *)&x, (void *)&b,SIZE) == 0));\n \n #define TESTVAL_NONNEG(COEFF,ESIGN,EXP,SUF,NUM,SIZE)\t\t\t\\\n   x = PASTE(PASTE(PASTE(PASTE(PASTE(COEFF,.),E),ESIGN),EXP),SUF);\t\\\n@@ -44,16 +44,17 @@\n   b = PASTE(make_decimal,32) (PASTE(COEFF,LL), ESIGN EXP);\t\t\\\n   c = PASTE(make_decimal,32) (ull, i);\t\t\t\t\t\\\n   d = PASTE(make_decimal,32) (PASTE(COEFF,ULL), ESIGN EXP);\t\t\\\n-  VERIFY ((__builtin_memcmp ((void *)&x, (void *)&a, SIZE) == 0)\t\\\n-          && (__builtin_memcmp ((void *)&x, (void *)&b,SIZE) == 0)\t\\\n-          && (__builtin_memcmp ((void *)&x, (void *)&c,SIZE) == 0)\t\\\n-          && (__builtin_memcmp ((void *)&x, (void *)&d,SIZE) == 0));\n+  VERIFY ((std::memcmp ((void *)&x, (void *)&a, SIZE) == 0)\t\\\n+          && (std::memcmp ((void *)&x, (void *)&b,SIZE) == 0)\t\\\n+          && (std::memcmp ((void *)&x, (void *)&c,SIZE) == 0)\t\\\n+          && (std::memcmp ((void *)&x, (void *)&d,SIZE) == 0));\n \n using namespace std::decimal;\n \n void\n make_decimal_32 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal32 a, b, c, d;\n   float x __attribute__((mode(SD)));\n   int i;\n@@ -78,6 +79,7 @@ make_decimal_32 (void)\n void\n make_decimal_64 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal64 a, b, c, d;\n   float x __attribute__((mode(DD)));\n   int i;\n@@ -102,6 +104,7 @@ make_decimal_64 (void)\n void\n make_decimal_128 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal128 a, b, c, d;\n   float x __attribute__((mode(TD)));\n   int i;"}, {"sha": "dfd90d69df4faebedd75f0a6a25d2a15c1e4f2f1", "filename": "libstdc++-v3/testsuite/decimal/mixed-mode-arith_neg.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fmixed-mode-arith_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fmixed-mode-arith_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fmixed-mode-arith_neg.cc?ref=ef859c9d3c608c89c9192725ee0100ec45a3d708", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,7 +25,6 @@\n // floating-point type to a generic floating-point type.\n \n #include <decimal/decimal>\n-#include <testsuite_hooks.h>\n \n using namespace std::decimal;\n "}, {"sha": "d89e631ef1e010dc8a9352a9dfb73b6153a89653", "filename": "libstdc++-v3/testsuite/decimal/mixed-mode-cmp_neg.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fmixed-mode-cmp_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fmixed-mode-cmp_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fmixed-mode-cmp_neg.cc?ref=ef859c9d3c608c89c9192725ee0100ec45a3d708", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,7 +25,6 @@\n // generic floating-point type.\n \n #include <decimal/decimal>\n-#include <testsuite_hooks.h>\n \n using namespace std::decimal;\n "}, {"sha": "4e08084fec3ef87fbd8985fdfedd45b43218e273", "filename": "libstdc++-v3/testsuite/decimal/pr54036-1.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fpr54036-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fpr54036-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fpr54036-1.cc?ref=ef859c9d3c608c89c9192725ee0100ec45a3d708", "patch": "@@ -0,0 +1,71 @@\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-require-effective-target dfp }\n+\n+#include <decimal/decimal>\n+#include <testsuite_hooks.h>\n+\n+using namespace std::decimal;\n+\n+decimal32\n+__attribute__ ((noinline))\n+my_nan32 (void)\n+{\n+  decimal32 z = 0;\n+  decimal32 v = z/z;\n+  return v;\n+}\n+\n+decimal32\n+__attribute__ ((noinline))\n+my_inf32 (void)\n+{\n+  decimal32 o = 1;\n+  decimal32 z = 0;\n+  decimal32 v = o/z;\n+  return v;\n+}\n+\n+int\n+main ()\n+{\n+  bool test __attribute__((unused)) = true;\n+  decimal32 v;\n+\n+  v = my_nan32 ();\n+\n+  VERIFY (__builtin_isnand32 (v.__getval ()));\n+  VERIFY (!__builtin_signbitd32 (v.__getval ()));\n+\n+  v = -v;\n+\n+  VERIFY (__builtin_isnand32 (v.__getval ()));\n+  VERIFY (__builtin_signbitd32 (v.__getval ()));\n+\n+  v = my_inf32 ();\n+\n+  VERIFY (__builtin_isinfd32 (v.__getval ()));\n+  VERIFY (!__builtin_signbitd32 (v.__getval ()));\n+\n+  v = -v;\n+\n+  VERIFY (__builtin_isinfd32 (v.__getval ()));\n+  VERIFY (__builtin_signbitd32 (v.__getval ()));\n+\n+  return 0;\n+}"}, {"sha": "f20ad77086c5103ffb1b8598bbc82a8a17172001", "filename": "libstdc++-v3/testsuite/decimal/pr54036-2.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fpr54036-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fpr54036-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fpr54036-2.cc?ref=ef859c9d3c608c89c9192725ee0100ec45a3d708", "patch": "@@ -0,0 +1,71 @@\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-require-effective-target dfp }\n+\n+#include <decimal/decimal>\n+#include <testsuite_hooks.h>\n+\n+using namespace std::decimal;\n+\n+decimal64\n+__attribute__ ((noinline))\n+my_nan64 (void)\n+{\n+  decimal64 z = 0;\n+  decimal64 v = z/z;\n+  return v;\n+}\n+\n+decimal64\n+__attribute__ ((noinline))\n+my_inf64 (void)\n+{\n+  decimal64 o = 1;\n+  decimal64 z = 0;\n+  decimal64 v = o/z;\n+  return v;\n+}\n+\n+int\n+main ()\n+{\n+  bool test __attribute__((unused)) = true;\n+  decimal64 v;\n+\n+  v = my_nan64 ();\n+\n+  VERIFY (__builtin_isnand64 (v.__getval ()));\n+  VERIFY (!__builtin_signbitd64 (v.__getval ()));\n+\n+  v = -v;\n+\n+  VERIFY (__builtin_isnand64 (v.__getval ()));\n+  VERIFY (__builtin_signbitd64 (v.__getval ()));\n+\n+  v = my_inf64 ();\n+\n+  VERIFY (__builtin_isinfd64 (v.__getval ()));\n+  VERIFY (!__builtin_signbitd64 (v.__getval ()));\n+\n+  v = -v;\n+\n+  VERIFY (__builtin_isinfd64 (v.__getval ()));\n+  VERIFY (__builtin_signbitd64 (v.__getval ()));\n+\n+  return 0;\n+}"}, {"sha": "662c94527b8e5ad13100407b173fe5dadbb89c2e", "filename": "libstdc++-v3/testsuite/decimal/pr54036-3.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fpr54036-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fpr54036-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Fpr54036-3.cc?ref=ef859c9d3c608c89c9192725ee0100ec45a3d708", "patch": "@@ -0,0 +1,71 @@\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-require-effective-target dfp }\n+\n+#include <decimal/decimal>\n+#include <testsuite_hooks.h>\n+\n+using namespace std::decimal;\n+\n+decimal128\n+__attribute__ ((noinline))\n+my_nan128 (void)\n+{\n+  decimal128 z = 0;\n+  decimal128 v = z/z;\n+  return v;\n+}\n+\n+decimal128\n+__attribute__ ((noinline))\n+my_inf128 (void)\n+{\n+  decimal128 o = 1;\n+  decimal128 z = 0;\n+  decimal128 v = o/z;\n+  return v;\n+}\n+\n+int\n+main ()\n+{\n+  bool test __attribute__((unused)) = true;\n+  decimal128 v;\n+\n+  v = my_nan128 ();\n+\n+  VERIFY (__builtin_isnand128 (v.__getval ()));\n+  VERIFY (!__builtin_signbitd128 (v.__getval ()));\n+\n+  v = -v;\n+\n+  VERIFY (__builtin_isnand128 (v.__getval ()));\n+  VERIFY (__builtin_signbitd128 (v.__getval ()));\n+\n+  v = my_inf128 ();\n+\n+  VERIFY (__builtin_isinfd128 (v.__getval ()));\n+  VERIFY (!__builtin_signbitd128 (v.__getval ()));\n+\n+  v = -v;\n+\n+  VERIFY (__builtin_isinfd128 (v.__getval ()));\n+  VERIFY (__builtin_signbitd128 (v.__getval ()));\n+\n+  return 0;\n+}"}, {"sha": "b75d8ec2ba2c65055031731521f011e9cbe4c655", "filename": "libstdc++-v3/testsuite/decimal/unary-arith.cc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Funary-arith.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef859c9d3c608c89c9192725ee0100ec45a3d708/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Funary-arith.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdecimal%2Funary-arith.cc?ref=ef859c9d3c608c89c9192725ee0100ec45a3d708", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -31,6 +31,7 @@ decimal128 a128 (5001), b128 (-5001);\n void\n unary_plus_32 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal32 a;\n \n   a = +a32; VERIFY (a == a32);\n@@ -40,6 +41,7 @@ unary_plus_32 (void)\n void\n unary_minus_32 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal32 a;\n \n   a = -a32; VERIFY (a == b32);\n@@ -49,6 +51,7 @@ unary_minus_32 (void)\n void\n unary_plus_64 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal64 a;\n \n   a = +a64; VERIFY (a == a64);\n@@ -58,6 +61,7 @@ unary_plus_64 (void)\n void\n unary_minus_64 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal64 a;\n \n   a = -a64; VERIFY (a == b64);\n@@ -67,6 +71,7 @@ unary_minus_64 (void)\n void\n unary_plus_128 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal128 a;\n \n   a = +a128; VERIFY (a == a128);\n@@ -76,6 +81,7 @@ unary_plus_128 (void)\n void\n unary_minus_128 (void)\n {\n+  bool test __attribute__((unused)) = true;\n   decimal128 a;\n \n   a = -a128; VERIFY (a == b128);"}]}