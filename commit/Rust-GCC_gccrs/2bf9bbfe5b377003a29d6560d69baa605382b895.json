{"sha": "2bf9bbfe5b377003a29d6560d69baa605382b895", "node_id": "C_kwDOANBUbNoAKDJiZjliYmZlNWIzNzcwMDNhMjlkNjU2MGQ2OWJhYTYwNTM4MmI4OTU", "commit": {"author": {"name": "Gaius Mulley", "email": "gaiusmod2@gmail.com", "date": "2023-01-16T18:45:52Z"}, "committer": {"name": "Gaius Mulley", "email": "gaiusmod2@gmail.com", "date": "2023-01-16T18:45:52Z"}, "message": "Remove YEAR const from mcOptions.mod and use result from time\n\nThis patch removes the hard coded constant YEAR and replaces\nits use by a call to a new procedure function getYear.\nIt also emits a GPL v3 boilerplate.\n\ngcc/m2/ChangeLog:\n\n\t* mc-boot-ch/Glibc.c (libc_time): New function.\n\t(libc_localtime): New function.\n\t* mc-boot/GDynamicStrings.c: Regenerate.\n\t* mc-boot/GFIO.c: Regenerate.\n\t* mc-boot/GFormatStrings.c: Regenerate.\n\t* mc-boot/GIndexing.c: Regenerate.\n\t* mc-boot/GM2Dependent.c: Regenerate.\n\t* mc-boot/GM2EXCEPTION.c: Regenerate.\n\t* mc-boot/GPushBackInput.c: Regenerate.\n\t* mc-boot/GRTExceptions.c: Regenerate.\n\t* mc-boot/GRTint.c: Regenerate.\n\t* mc-boot/GStdIO.c: Regenerate.\n\t* mc-boot/GStringConvert.c: Regenerate.\n\t* mc-boot/GSysStorage.c: Regenerate.\n\t* mc-boot/Gdecl.c: Regenerate.\n\t* mc-boot/GmcComment.c: Regenerate.\n\t* mc-boot/GmcComp.c: Regenerate.\n\t* mc-boot/GmcDebug.c: Regenerate.\n\t* mc-boot/GmcMetaError.c: Regenerate.\n\t* mc-boot/GmcOptions.c: Regenerate.\n\t* mc-boot/GmcStack.c: Regenerate.\n\t* mc-boot/GnameKey.c: Regenerate.\n\t* mc-boot/GsymbolKey.c: Regenerate.\n\t* mc-boot/Gkeyc.c: Regenerate.\n\t* mc/decl.mod (putFieldRecord): Change NulName to NulKey\n\tand fix type comparision.\n\t* mc/mcOptions.mod (YEAR): Remove.\n\t(getYear): New procedure function.\n\t(displayVersion): Use result from getYear instead of YEAR.\n\tEmit boilerplate for GPL v3.\n\t(gplBody): Use result from getYear instead of YEAR.\n\t(glplBody): Use result from getYear instead of YEAR.\n\nSigned-off-by: Gaius Mulley <gaiusmod2@gmail.com>", "tree": {"sha": "fd0a35ddb50ed68bd520b707aab79698442057d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd0a35ddb50ed68bd520b707aab79698442057d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bf9bbfe5b377003a29d6560d69baa605382b895", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bf9bbfe5b377003a29d6560d69baa605382b895", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bf9bbfe5b377003a29d6560d69baa605382b895", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bf9bbfe5b377003a29d6560d69baa605382b895/comments", "author": null, "committer": null, "parents": [{"sha": "a0c595386fa322e1874d33742fc56c6a0c13c4a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0c595386fa322e1874d33742fc56c6a0c13c4a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0c595386fa322e1874d33742fc56c6a0c13c4a5"}], "stats": {"total": 460, "additions": 286, "deletions": 174}, "files": [{"sha": "7a37fef6150a627fae1d773bc7afd80ad2c75abe", "filename": "gcc/m2/mc-boot-ch/Glibc.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot-ch%2FGlibc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot-ch%2FGlibc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fmc-boot-ch%2FGlibc.c?ref=2bf9bbfe5b377003a29d6560d69baa605382b895", "patch": "@@ -77,6 +77,20 @@ libc_strlen (char *s)\n   return strlen (s);\n }\n \n+EXTERN\n+time_t\n+libc_time (time_t *buf)\n+{\n+  return time (buf);\n+}\n+\n+EXTERN\n+void *\n+libc_localtime (time_t *epochtime)\n+{\n+  return localtime (epochtime);\n+}\n+\n EXTERN\n int\n libc_printf (char *_format, unsigned int _format_high, ...)"}, {"sha": "6907b8079e5af871090e1c57d28af9121d6b6802", "filename": "gcc/m2/mc-boot/GDynamicStrings.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGDynamicStrings.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGDynamicStrings.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fmc-boot%2FGDynamicStrings.c?ref=2bf9bbfe5b377003a29d6560d69baa605382b895", "patch": "@@ -1214,7 +1214,7 @@ static void ConcatContents (DynamicStrings_Contents *c, const char *a_, unsigned\n       (*c).next->contents.next = NULL;\n       ConcatContents (&(*c).next->contents, (const char *) a, _a_high, h, o);\n       AddDebugInfo ((*c).next);\n-      (*c).next = AssignDebug ((*c).next, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/DynamicStrings.mod\", 62, 722, (const char *) \"ConcatContents\", 14);\n+      (*c).next = AssignDebug ((*c).next, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 722, (const char *) \"ConcatContents\", 14);\n     }\n   else\n     {\n@@ -1312,7 +1312,7 @@ static void ConcatContentsAddress (DynamicStrings_Contents *c, void * a, unsigne\n       AddDebugInfo ((*c).next);\n       if (TraceOn)\n         {\n-          (*c).next = AssignDebug ((*c).next, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/DynamicStrings.mod\", 62, 917, (const char *) \"ConcatContentsAddress\", 21);\n+          (*c).next = AssignDebug ((*c).next, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 917, (const char *) \"ConcatContentsAddress\", 21);\n         }\n     }\n   else\n@@ -1537,7 +1537,7 @@ extern \"C\" DynamicStrings_String DynamicStrings_InitString (const char *a_, unsi\n   AddDebugInfo (s);\n   if (TraceOn)\n     {\n-      s = AssignDebug (s, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/DynamicStrings.mod\", 62, 758, (const char *) \"InitString\", 10);\n+      s = AssignDebug (s, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 758, (const char *) \"InitString\", 10);\n     }\n   return s;\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -1640,7 +1640,7 @@ extern \"C\" DynamicStrings_String DynamicStrings_InitStringCharStar (void * a)\n   AddDebugInfo (s);\n   if (TraceOn)\n     {\n-      s = AssignDebug (s, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/DynamicStrings.mod\", 62, 957, (const char *) \"InitStringCharStar\", 18);\n+      s = AssignDebug (s, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 957, (const char *) \"InitStringCharStar\", 18);\n     }\n   return s;\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -1665,7 +1665,7 @@ extern \"C\" DynamicStrings_String DynamicStrings_InitStringChar (char ch)\n   s = DynamicStrings_InitString ((const char *) &a.array[0], 1);\n   if (TraceOn)\n     {\n-      s = AssignDebug (s, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/DynamicStrings.mod\", 62, 977, (const char *) \"InitStringChar\", 14);\n+      s = AssignDebug (s, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 977, (const char *) \"InitStringChar\", 14);\n     }\n   return s;\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -1823,7 +1823,7 @@ extern \"C\" DynamicStrings_String DynamicStrings_Dup (DynamicStrings_String s)\n   s = DynamicStrings_Assign (DynamicStrings_InitString ((const char *) \"\", 0), s);\n   if (TraceOn)\n     {\n-      s = AssignDebug (s, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/DynamicStrings.mod\", 62, 1173, (const char *) \"Dup\", 3);\n+      s = AssignDebug (s, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1173, (const char *) \"Dup\", 3);\n     }\n   return s;\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -1845,7 +1845,7 @@ extern \"C\" DynamicStrings_String DynamicStrings_Add (DynamicStrings_String a, Dy\n   a = DynamicStrings_ConCat (DynamicStrings_ConCat (DynamicStrings_InitString ((const char *) \"\", 0), a), b);\n   if (TraceOn)\n     {\n-      a = AssignDebug (a, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/DynamicStrings.mod\", 62, 1193, (const char *) \"Add\", 3);\n+      a = AssignDebug (a, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1193, (const char *) \"Add\", 3);\n     }\n   return a;\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -1920,7 +1920,7 @@ extern \"C\" unsigned int DynamicStrings_EqualCharStar (DynamicStrings_String s, v\n   t = DynamicStrings_InitStringCharStar (a);\n   if (TraceOn)\n     {\n-      t = AssignDebug (t, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/DynamicStrings.mod\", 62, 1258, (const char *) \"EqualCharStar\", 13);\n+      t = AssignDebug (t, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1258, (const char *) \"EqualCharStar\", 13);\n     }\n   t = AddToGarbage (t, s);\n   if (DynamicStrings_Equal (t, s))\n@@ -1958,7 +1958,7 @@ extern \"C\" unsigned int DynamicStrings_EqualArray (DynamicStrings_String s, cons\n   t = DynamicStrings_InitString ((const char *) a, _a_high);\n   if (TraceOn)\n     {\n-      t = AssignDebug (t, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/DynamicStrings.mod\", 62, 1288, (const char *) \"EqualArray\", 10);\n+      t = AssignDebug (t, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1288, (const char *) \"EqualArray\", 10);\n     }\n   t = AddToGarbage (t, s);\n   if (DynamicStrings_Equal (t, s))\n@@ -1996,7 +1996,7 @@ extern \"C\" DynamicStrings_String DynamicStrings_Mult (DynamicStrings_String s, u\n     }\n   if (TraceOn)\n     {\n-      s = AssignDebug (s, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/DynamicStrings.mod\", 62, 1320, (const char *) \"Mult\", 4);\n+      s = AssignDebug (s, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1320, (const char *) \"Mult\", 4);\n     }\n   return s;\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -2075,7 +2075,7 @@ extern \"C\" DynamicStrings_String DynamicStrings_Slice (DynamicStrings_String s,\n                       AddDebugInfo (t->contents.next);\n                       if (TraceOn)\n                         {\n-                          t->contents.next = AssignDebug (t->contents.next, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/DynamicStrings.mod\", 62, 1388, (const char *) \"Slice\", 5);\n+                          t->contents.next = AssignDebug (t->contents.next, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1388, (const char *) \"Slice\", 5);\n                         }\n                     }\n                   t = t->contents.next;\n@@ -2093,7 +2093,7 @@ extern \"C\" DynamicStrings_String DynamicStrings_Slice (DynamicStrings_String s,\n     }\n   if (TraceOn)\n     {\n-      d = AssignDebug (d, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/DynamicStrings.mod\", 62, 1405, (const char *) \"Slice\", 5);\n+      d = AssignDebug (d, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1405, (const char *) \"Slice\", 5);\n     }\n   return d;\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -2221,7 +2221,7 @@ extern \"C\" DynamicStrings_String DynamicStrings_RemoveComment (DynamicStrings_St\n     }\n   if (TraceOn)\n     {\n-      s = AssignDebug (s, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/DynamicStrings.mod\", 62, 1517, (const char *) \"RemoveComment\", 13);\n+      s = AssignDebug (s, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1517, (const char *) \"RemoveComment\", 13);\n     }\n   return s;\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -2246,7 +2246,7 @@ extern \"C\" DynamicStrings_String DynamicStrings_RemoveWhitePrefix (DynamicString\n   s = DynamicStrings_Slice (s, (int ) (i), 0);\n   if (TraceOn)\n     {\n-      s = AssignDebug (s, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/DynamicStrings.mod\", 62, 1629, (const char *) \"RemoveWhitePrefix\", 17);\n+      s = AssignDebug (s, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1629, (const char *) \"RemoveWhitePrefix\", 17);\n     }\n   return s;\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -2271,7 +2271,7 @@ extern \"C\" DynamicStrings_String DynamicStrings_RemoveWhitePostfix (DynamicStrin\n   s = DynamicStrings_Slice (s, 0, i+1);\n   if (TraceOn)\n     {\n-      s = AssignDebug (s, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/DynamicStrings.mod\", 62, 1651, (const char *) \"RemoveWhitePostfix\", 18);\n+      s = AssignDebug (s, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 1651, (const char *) \"RemoveWhitePostfix\", 18);\n     }\n   return s;\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -2640,7 +2640,7 @@ extern \"C\" DynamicStrings_String DynamicStrings_PopAllocationExemption (unsigned\n         {\n           stop ();\n           /* writeString (\"mismatched number of PopAllocation's compared to PushAllocation's\")  */\n-          M2RTS_Halt ((const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/DynamicStrings.mod\", 62, 176, (const char *) \"PopAllocationExemption\", 22, (const char *) \"mismatched number of PopAllocation's compared to PushAllocation's\", 65);\n+          M2RTS_Halt ((const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/DynamicStrings.mod\", 55, 176, (const char *) \"PopAllocationExemption\", 22, (const char *) \"mismatched number of PopAllocation's compared to PushAllocation's\", 65);\n         }\n       else\n         {"}, {"sha": "74cd8580cf51c20e164a96574cf7bd2ca234039d", "filename": "gcc/m2/mc-boot/GFIO.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGFIO.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGFIO.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fmc-boot%2FGFIO.c?ref=2bf9bbfe5b377003a29d6560d69baa605382b895", "patch": "@@ -555,7 +555,7 @@ static FIO_File GetNextFreeDescriptor (void)\n         return f;  /* create new slot  */\n       }\n   }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/FIO.def\", 25, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/gm2-libs/FIO.def\", 25, 1);\n   __builtin_unreachable ();\n }\n \n@@ -1703,7 +1703,7 @@ extern \"C\" unsigned int FIO_ReadNBytes (FIO_File f, unsigned int nBytes, void *\n extern \"C\" void FIO_ReadAny (FIO_File f, unsigned char *a, unsigned int _a_high)\n {\n   CheckAccess (f, FIO_openedforread, FALSE);\n-  if ((BufferedRead (f, _a_high, a)) == _a_high)\n+  if ((BufferedRead (f, _a_high, a)) == ((int ) (_a_high)))\n     {\n       SetEndOfLine (f, static_cast<char> (a[_a_high]));\n     }\n@@ -1762,7 +1762,7 @@ extern \"C\" unsigned int FIO_WriteNBytes (FIO_File f, unsigned int nBytes, void *\n extern \"C\" void FIO_WriteAny (FIO_File f, unsigned char *a, unsigned int _a_high)\n {\n   CheckAccess (f, FIO_openedforwrite, TRUE);\n-  if ((BufferedWrite (f, _a_high, a)) == _a_high)\n+  if ((BufferedWrite (f, _a_high, a)) == ((int ) (_a_high)))\n     {}  /* empty.  */\n }\n \n@@ -1774,7 +1774,7 @@ extern \"C\" void FIO_WriteAny (FIO_File f, unsigned char *a, unsigned int _a_high\n extern \"C\" void FIO_WriteChar (FIO_File f, char ch)\n {\n   CheckAccess (f, FIO_openedforwrite, TRUE);\n-  if ((BufferedWrite (f, sizeof (ch), &ch)) == sizeof (ch))\n+  if ((BufferedWrite (f, sizeof (ch), &ch)) == ((int ) (sizeof (ch))))\n     {}  /* empty.  */\n }\n \n@@ -1873,7 +1873,7 @@ extern \"C\" char FIO_ReadChar (FIO_File f)\n   char ch;\n \n   CheckAccess (f, FIO_openedforread, FALSE);\n-  if ((BufferedRead (f, sizeof (ch), &ch)) == sizeof (ch))\n+  if ((BufferedRead (f, sizeof (ch), &ch)) == ((int ) (sizeof (ch))))\n     {\n       SetEndOfLine (f, ch);\n       return ch;\n@@ -2266,7 +2266,7 @@ extern \"C\" void * FIO_getFileName (FIO_File f)\n           return fd->name.address;\n         }\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/FIO.def\", 25, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/gm2-libs/FIO.def\", 25, 1);\n   __builtin_unreachable ();\n }\n \n@@ -2293,7 +2293,7 @@ extern \"C\" unsigned int FIO_getFileNameLength (FIO_File f)\n           return fd->name.size;\n         }\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/FIO.def\", 25, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/gm2-libs/FIO.def\", 25, 1);\n   __builtin_unreachable ();\n }\n "}, {"sha": "7710c8aae4236d22bb146057c97d138442fcedaa", "filename": "gcc/m2/mc-boot/GFormatStrings.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGFormatStrings.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGFormatStrings.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fmc-boot%2FGFormatStrings.c?ref=2bf9bbfe5b377003a29d6560d69baa605382b895", "patch": "@@ -545,7 +545,7 @@ static DynamicStrings_String HandlePercent (DynamicStrings_String fmt, DynamicSt\n   int prevpos;\n   DynamicStrings_String result;\n \n-  if ((startpos == (DynamicStrings_Length (fmt))) || (startpos < 0))\n+  if ((startpos == ((int ) (DynamicStrings_Length (fmt)))) || (startpos < 0))\n     {\n       return s;\n     }"}, {"sha": "c809e4b9b6e0acf0fc8071b77c38da562d29d276", "filename": "gcc/m2/mc-boot/GIndexing.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGIndexing.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGIndexing.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fmc-boot%2FGIndexing.c?ref=2bf9bbfe5b377003a29d6560d69baa605382b895", "patch": "@@ -222,7 +222,7 @@ extern \"C\" unsigned int Indexing_InBounds (Indexing_Index i, unsigned int n)\n     {\n       return (n >= i->Low) && (n <= i->High);\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/mc/Indexing.def\", 20, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/mc/Indexing.def\", 20, 1);\n   __builtin_unreachable ();\n }\n \n@@ -242,7 +242,7 @@ extern \"C\" unsigned int Indexing_HighIndice (Indexing_Index i)\n     {\n       return i->High;\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/mc/Indexing.def\", 20, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/mc/Indexing.def\", 20, 1);\n   __builtin_unreachable ();\n }\n \n@@ -262,7 +262,7 @@ extern \"C\" unsigned int Indexing_LowIndice (Indexing_Index i)\n     {\n       return i->Low;\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/mc/Indexing.def\", 20, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/mc/Indexing.def\", 20, 1);\n   __builtin_unreachable ();\n }\n "}, {"sha": "b9c59cc9facc0e19d7c1dd6b9bdec0f4a45dc221", "filename": "gcc/m2/mc-boot/GM2Dependent.c", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGM2Dependent.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGM2Dependent.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fmc-boot%2FGM2Dependent.c?ref=2bf9bbfe5b377003a29d6560d69baa605382b895", "patch": "@@ -262,6 +262,13 @@ static void combine (M2Dependent_DependencyState src, M2Dependent_DependencyStat\n \n static void ForceDependencies (void);\n \n+/*\n+   CheckApplication - check to see that the application is the last entry in the list.\n+                      This might happen if the application only imports FOR C modules.\n+*/\n+\n+static void CheckApplication (void);\n+\n /*\n    equal - return TRUE if C string cstr is equal to str.\n */\n@@ -730,6 +737,7 @@ static void ResolveDependencies (void * currentmodule)\n static void DisplayModuleInfo (M2Dependent_DependencyState state, const char *name_, unsigned int _name_high)\n {\n   M2Dependent_ModuleChain mptr;\n+  unsigned int count;\n   char name[_name_high+1];\n \n   /* make a local copy of each unbounded array.  */\n@@ -739,8 +747,10 @@ static void DisplayModuleInfo (M2Dependent_DependencyState state, const char *na\n     {\n       libc_printf ((const char *) \"%s modules\\\\n\", 12, &name);\n       mptr = Modules.array[state-M2Dependent_unregistered];\n+      count = 0;\n       do {\n-        libc_printf ((const char *) \"  %s\", 4, mptr->name);\n+        libc_printf ((const char *) \"  %d  %s\", 8, count, mptr->name);\n+        count += 1;\n         if (mptr->dependency.appl)\n           {\n             libc_printf ((const char *) \" application\", 12);\n@@ -851,6 +861,38 @@ static void ForceDependencies (void)\n }\n \n \n+/*\n+   CheckApplication - check to see that the application is the last entry in the list.\n+                      This might happen if the application only imports FOR C modules.\n+*/\n+\n+static void CheckApplication (void)\n+{\n+  M2Dependent_ModuleChain mptr;\n+  M2Dependent_ModuleChain appl;\n+\n+  mptr = Modules.array[M2Dependent_ordered-M2Dependent_unregistered];\n+  if (mptr != NULL)\n+    {\n+      appl = NULL;\n+      do {\n+        if (mptr->dependency.appl)\n+          {\n+            appl = mptr;\n+          }\n+        else\n+          {\n+            mptr = mptr->next;\n+          }\n+      } while (! ((appl != NULL) || (mptr == Modules.array[M2Dependent_ordered-M2Dependent_unregistered])));\n+      if (appl != NULL)\n+        {\n+          Modules.array[M2Dependent_ordered-M2Dependent_unregistered] = appl->next;\n+        }\n+    }\n+}\n+\n+\n /*\n    equal - return TRUE if C string cstr is equal to str.\n */\n@@ -1006,6 +1048,9 @@ extern \"C\" void M2Dependent_ConstructModules (void * applicationmodule, int argc\n   ForceDependencies ();\n   traceprintf (ForceTrace, (const char *) \"After user forcing ordering\\\\n\", 29);\n   DumpModuleData (ForceTrace);\n+  CheckApplication ();\n+  traceprintf (ForceTrace, (const char *) \"After runtime forces application to the end\\\\n\", 45);\n+  DumpModuleData (ForceTrace);\n   if (Modules.array[M2Dependent_ordered-M2Dependent_unregistered] == NULL)\n     {\n       traceprintf2 (ModuleTrace, (const char *) \"  module: %s has not registered itself using a global constructor\\\\n\", 67, applicationmodule);"}, {"sha": "7915442b6e1d1649244598bbd04b67a28f542417", "filename": "gcc/m2/mc-boot/GM2EXCEPTION.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGM2EXCEPTION.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGM2EXCEPTION.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fmc-boot%2FGM2EXCEPTION.c?ref=2bf9bbfe5b377003a29d6560d69baa605382b895", "patch": "@@ -57,13 +57,13 @@ extern \"C\" M2EXCEPTION_M2Exceptions M2EXCEPTION_M2Exception (void)\n   n = RTExceptions_GetNumber (e);\n   if (n == (UINT_MAX))\n     {\n-      RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_exException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/M2EXCEPTION.mod\")), 47, 6, const_cast<void*> (reinterpret_cast<const void*>(\"M2Exception\")), const_cast<void*> (reinterpret_cast<const void*>(\"current coroutine is not in the exceptional execution state\")));\n+      RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_exException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-read-write/gcc/m2/gm2-libs/M2EXCEPTION.mod\")), 47, 6, const_cast<void*> (reinterpret_cast<const void*>(\"M2Exception\")), const_cast<void*> (reinterpret_cast<const void*>(\"current coroutine is not in the exceptional execution state\")));\n     }\n   else\n     {\n       return (M2EXCEPTION_M2Exceptions) (n);\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/M2EXCEPTION.def\", 25, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/gm2-libs/M2EXCEPTION.def\", 25, 1);\n   __builtin_unreachable ();\n }\n "}, {"sha": "6812343de8c75351af6a7e269b2112752f84e6cb", "filename": "gcc/m2/mc-boot/GPushBackInput.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGPushBackInput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGPushBackInput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fmc-boot%2FGPushBackInput.c?ref=2bf9bbfe5b377003a29d6560d69baa605382b895", "patch": "@@ -274,7 +274,7 @@ extern \"C\" char PushBackInput_PutCh (char ch)\n     }\n   else\n     {\n-      Debug_Halt ((const char *) \"max push back stack exceeded, increase MaxPushBackStack\", 55, 150, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/PushBackInput.mod\", 61);\n+      Debug_Halt ((const char *) \"max push back stack exceeded, increase MaxPushBackStack\", 55, 150, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/PushBackInput.mod\", 54);\n     }\n   return ch;\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -300,7 +300,7 @@ extern \"C\" void PushBackInput_PutString (const char *a_, unsigned int _a_high)\n       l -= 1;\n       if ((PushBackInput_PutCh (a[l])) != a[l])\n         {\n-          Debug_Halt ((const char *) \"assert failed\", 13, 132, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/PushBackInput.mod\", 61);\n+          Debug_Halt ((const char *) \"assert failed\", 13, 132, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/PushBackInput.mod\", 54);\n         }\n     }\n }\n@@ -321,7 +321,7 @@ extern \"C\" void PushBackInput_PutStr (DynamicStrings_String s)\n       i -= 1;\n       if ((PushBackInput_PutCh (DynamicStrings_char (s, static_cast<int> (i)))) != (DynamicStrings_char (s, static_cast<int> (i))))\n         {\n-          Debug_Halt ((const char *) \"assert failed\", 13, 113, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/PushBackInput.mod\", 61);\n+          Debug_Halt ((const char *) \"assert failed\", 13, 113, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/PushBackInput.mod\", 54);\n         }\n     }\n }"}, {"sha": "a6aa8069f05d31f71007f733dc3ed8d97d61e18c", "filename": "gcc/m2/mc-boot/GRTExceptions.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGRTExceptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGRTExceptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fmc-boot%2FGRTExceptions.c?ref=2bf9bbfe5b377003a29d6560d69baa605382b895", "patch": "@@ -719,7 +719,7 @@ static void AddHandler (RTExceptions_EHBlock e, RTExceptions_Handler h)\n \n static void indexf (void * a)\n {\n-  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_indexException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTExceptions.mod\")), 612, 9, const_cast<void*> (reinterpret_cast<const void*>(\"indexf\")), const_cast<void*> (reinterpret_cast<const void*>(\"array index out of bounds\")));\n+  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_indexException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-read-write/gcc/m2/gm2-libs/RTExceptions.mod\")), 612, 9, const_cast<void*> (reinterpret_cast<const void*>(\"indexf\")), const_cast<void*> (reinterpret_cast<const void*>(\"array index out of bounds\")));\n }\n \n \n@@ -729,7 +729,7 @@ static void indexf (void * a)\n \n static void range (void * a)\n {\n-  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_rangeException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTExceptions.mod\")), 624, 9, const_cast<void*> (reinterpret_cast<const void*>(\"range\")), const_cast<void*> (reinterpret_cast<const void*>(\"assignment out of range\")));\n+  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_rangeException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-read-write/gcc/m2/gm2-libs/RTExceptions.mod\")), 624, 9, const_cast<void*> (reinterpret_cast<const void*>(\"range\")), const_cast<void*> (reinterpret_cast<const void*>(\"assignment out of range\")));\n }\n \n \n@@ -739,7 +739,7 @@ static void range (void * a)\n \n static void casef (void * a)\n {\n-  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_caseSelectException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTExceptions.mod\")), 636, 9, const_cast<void*> (reinterpret_cast<const void*>(\"casef\")), const_cast<void*> (reinterpret_cast<const void*>(\"case selector out of range\")));\n+  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_caseSelectException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-read-write/gcc/m2/gm2-libs/RTExceptions.mod\")), 636, 9, const_cast<void*> (reinterpret_cast<const void*>(\"casef\")), const_cast<void*> (reinterpret_cast<const void*>(\"case selector out of range\")));\n }\n \n \n@@ -749,7 +749,7 @@ static void casef (void * a)\n \n static void invalidloc (void * a)\n {\n-  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_invalidLocation)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTExceptions.mod\")), 648, 9, const_cast<void*> (reinterpret_cast<const void*>(\"invalidloc\")), const_cast<void*> (reinterpret_cast<const void*>(\"invalid address referenced\")));\n+  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_invalidLocation)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-read-write/gcc/m2/gm2-libs/RTExceptions.mod\")), 648, 9, const_cast<void*> (reinterpret_cast<const void*>(\"invalidloc\")), const_cast<void*> (reinterpret_cast<const void*>(\"invalid address referenced\")));\n }\n \n \n@@ -759,7 +759,7 @@ static void invalidloc (void * a)\n \n static void function (void * a)\n {\n-  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_functionException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTExceptions.mod\")), 660, 9, const_cast<void*> (reinterpret_cast<const void*>(\"function\")), const_cast<void*> (reinterpret_cast<const void*>(\"... function ... \")));  /* --fixme-- what has happened ?  */\n+  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_functionException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-read-write/gcc/m2/gm2-libs/RTExceptions.mod\")), 660, 9, const_cast<void*> (reinterpret_cast<const void*>(\"function\")), const_cast<void*> (reinterpret_cast<const void*>(\"... function ... \")));  /* --fixme-- what has happened ?  */\n }\n \n \n@@ -769,7 +769,7 @@ static void function (void * a)\n \n static void wholevalue (void * a)\n {\n-  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_wholeValueException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTExceptions.mod\")), 672, 9, const_cast<void*> (reinterpret_cast<const void*>(\"wholevalue\")), const_cast<void*> (reinterpret_cast<const void*>(\"illegal whole value exception\")));\n+  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_wholeValueException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-read-write/gcc/m2/gm2-libs/RTExceptions.mod\")), 672, 9, const_cast<void*> (reinterpret_cast<const void*>(\"wholevalue\")), const_cast<void*> (reinterpret_cast<const void*>(\"illegal whole value exception\")));\n }\n \n \n@@ -779,7 +779,7 @@ static void wholevalue (void * a)\n \n static void wholediv (void * a)\n {\n-  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_wholeDivException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTExceptions.mod\")), 684, 9, const_cast<void*> (reinterpret_cast<const void*>(\"wholediv\")), const_cast<void*> (reinterpret_cast<const void*>(\"illegal whole value exception\")));\n+  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_wholeDivException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-read-write/gcc/m2/gm2-libs/RTExceptions.mod\")), 684, 9, const_cast<void*> (reinterpret_cast<const void*>(\"wholediv\")), const_cast<void*> (reinterpret_cast<const void*>(\"illegal whole value exception\")));\n }\n \n \n@@ -789,7 +789,7 @@ static void wholediv (void * a)\n \n static void realvalue (void * a)\n {\n-  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_realValueException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTExceptions.mod\")), 696, 9, const_cast<void*> (reinterpret_cast<const void*>(\"realvalue\")), const_cast<void*> (reinterpret_cast<const void*>(\"illegal real value exception\")));\n+  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_realValueException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-read-write/gcc/m2/gm2-libs/RTExceptions.mod\")), 696, 9, const_cast<void*> (reinterpret_cast<const void*>(\"realvalue\")), const_cast<void*> (reinterpret_cast<const void*>(\"illegal real value exception\")));\n }\n \n \n@@ -799,7 +799,7 @@ static void realvalue (void * a)\n \n static void realdiv (void * a)\n {\n-  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_realDivException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTExceptions.mod\")), 708, 9, const_cast<void*> (reinterpret_cast<const void*>(\"realdiv\")), const_cast<void*> (reinterpret_cast<const void*>(\"real number division by zero exception\")));\n+  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_realDivException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-read-write/gcc/m2/gm2-libs/RTExceptions.mod\")), 708, 9, const_cast<void*> (reinterpret_cast<const void*>(\"realdiv\")), const_cast<void*> (reinterpret_cast<const void*>(\"real number division by zero exception\")));\n }\n \n \n@@ -809,7 +809,7 @@ static void realdiv (void * a)\n \n static void complexvalue (void * a)\n {\n-  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_complexValueException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTExceptions.mod\")), 720, 9, const_cast<void*> (reinterpret_cast<const void*>(\"complexvalue\")), const_cast<void*> (reinterpret_cast<const void*>(\"illegal complex value exception\")));\n+  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_complexValueException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-read-write/gcc/m2/gm2-libs/RTExceptions.mod\")), 720, 9, const_cast<void*> (reinterpret_cast<const void*>(\"complexvalue\")), const_cast<void*> (reinterpret_cast<const void*>(\"illegal complex value exception\")));\n }\n \n \n@@ -819,7 +819,7 @@ static void complexvalue (void * a)\n \n static void complexdiv (void * a)\n {\n-  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_complexDivException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTExceptions.mod\")), 732, 9, const_cast<void*> (reinterpret_cast<const void*>(\"complexdiv\")), const_cast<void*> (reinterpret_cast<const void*>(\"complex number division by zero exception\")));\n+  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_complexDivException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-read-write/gcc/m2/gm2-libs/RTExceptions.mod\")), 732, 9, const_cast<void*> (reinterpret_cast<const void*>(\"complexdiv\")), const_cast<void*> (reinterpret_cast<const void*>(\"complex number division by zero exception\")));\n }\n \n \n@@ -829,7 +829,7 @@ static void complexdiv (void * a)\n \n static void protection (void * a)\n {\n-  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_protException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTExceptions.mod\")), 744, 9, const_cast<void*> (reinterpret_cast<const void*>(\"protection\")), const_cast<void*> (reinterpret_cast<const void*>(\"protection exception\")));\n+  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_protException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-read-write/gcc/m2/gm2-libs/RTExceptions.mod\")), 744, 9, const_cast<void*> (reinterpret_cast<const void*>(\"protection\")), const_cast<void*> (reinterpret_cast<const void*>(\"protection exception\")));\n }\n \n \n@@ -839,7 +839,7 @@ static void protection (void * a)\n \n static void systemf (void * a)\n {\n-  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_sysException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTExceptions.mod\")), 756, 9, const_cast<void*> (reinterpret_cast<const void*>(\"systemf\")), const_cast<void*> (reinterpret_cast<const void*>(\"system exception\")));\n+  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_sysException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-read-write/gcc/m2/gm2-libs/RTExceptions.mod\")), 756, 9, const_cast<void*> (reinterpret_cast<const void*>(\"systemf\")), const_cast<void*> (reinterpret_cast<const void*>(\"system exception\")));\n }\n \n \n@@ -849,7 +849,7 @@ static void systemf (void * a)\n \n static void coroutine (void * a)\n {\n-  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_coException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTExceptions.mod\")), 768, 9, const_cast<void*> (reinterpret_cast<const void*>(\"coroutine\")), const_cast<void*> (reinterpret_cast<const void*>(\"coroutine exception\")));\n+  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_coException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-read-write/gcc/m2/gm2-libs/RTExceptions.mod\")), 768, 9, const_cast<void*> (reinterpret_cast<const void*>(\"coroutine\")), const_cast<void*> (reinterpret_cast<const void*>(\"coroutine exception\")));\n }\n \n \n@@ -859,7 +859,7 @@ static void coroutine (void * a)\n \n static void exception (void * a)\n {\n-  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_exException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTExceptions.mod\")), 780, 9, const_cast<void*> (reinterpret_cast<const void*>(\"exception\")), const_cast<void*> (reinterpret_cast<const void*>(\"exception exception\")));\n+  RTExceptions_Raise ( ((unsigned int) (M2EXCEPTION_exException)), const_cast<void*> (reinterpret_cast<const void*>(\"../../gcc-read-write/gcc/m2/gm2-libs/RTExceptions.mod\")), 780, 9, const_cast<void*> (reinterpret_cast<const void*>(\"exception\")), const_cast<void*> (reinterpret_cast<const void*>(\"exception exception\")));\n }\n \n \n@@ -1178,13 +1178,13 @@ extern \"C\" RTExceptions_EHBlock RTExceptions_GetBaseExceptionBlock (void)\n {\n   if (currentEHB == NULL)\n     {\n-      M2RTS_Halt ((const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTExceptions.mod\", 60, 598, (const char *) \"GetBaseExceptionBlock\", 21, (const char *) \"currentEHB has not been initialized yet\", 39);\n+      M2RTS_Halt ((const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/RTExceptions.mod\", 53, 598, (const char *) \"GetBaseExceptionBlock\", 21, (const char *) \"currentEHB has not been initialized yet\", 39);\n     }\n   else\n     {\n       return currentEHB;\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTExceptions.def\", 25, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/gm2-libs/RTExceptions.def\", 25, 1);\n   __builtin_unreachable ();\n }\n "}, {"sha": "d8cac277252bafe1dbb05a144fc83508137a2e82", "filename": "gcc/m2/mc-boot/GRTint.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGRTint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGRTint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fmc-boot%2FGRTint.c?ref=2bf9bbfe5b377003a29d6560d69baa605382b895", "patch": "@@ -595,7 +595,7 @@ static unsigned int activatePending (unsigned int untilInterrupt, RTint_Dispatch\n \n \n               default:\n-                CaseException (\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTint.def\", 25, 1);\n+                CaseException (\"../../gcc-read-write/gcc/m2/gm2-libs/RTint.def\", 25, 1);\n                 __builtin_unreachable ();\n             }\n           v = v->pending;\n@@ -708,7 +708,7 @@ extern \"C\" unsigned int RTint_InitOutputVector (int fd, unsigned int pri)\n       RTco_signal (lock);\n       return v->no;\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTint.def\", 25, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/gm2-libs/RTint.def\", 25, 1);\n   __builtin_unreachable ();\n }\n \n@@ -765,7 +765,7 @@ extern \"C\" void RTint_ReArmTimeVector (unsigned int vec, unsigned int micro, uns\n   v = FindVectorNo (vec);\n   if (v == NULL)\n     {\n-      M2RTS_Halt ((const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTint.mod\", 53, 286, (const char *) \"ReArmTimeVector\", 15, (const char *) \"cannot find vector supplied\", 27);\n+      M2RTS_Halt ((const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/RTint.mod\", 46, 286, (const char *) \"ReArmTimeVector\", 15, (const char *) \"cannot find vector supplied\", 27);\n     }\n   else\n     {\n@@ -790,7 +790,7 @@ extern \"C\" void RTint_GetTimeVector (unsigned int vec, unsigned int *micro, unsi\n   v = FindVectorNo (vec);\n   if (v == NULL)\n     {\n-      M2RTS_Halt ((const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTint.mod\", 53, 312, (const char *) \"GetTimeVector\", 13, (const char *) \"cannot find vector supplied\", 27);\n+      M2RTS_Halt ((const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/RTint.mod\", 46, 312, (const char *) \"GetTimeVector\", 13, (const char *) \"cannot find vector supplied\", 27);\n     }\n   else\n     {\n@@ -816,7 +816,7 @@ extern \"C\" void * RTint_AttachVector (unsigned int vec, void * p)\n   v = FindVectorNo (vec);\n   if (v == NULL)\n     {\n-      M2RTS_Halt ((const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTint.mod\", 53, 339, (const char *) \"AttachVector\", 12, (const char *) \"cannot find vector supplied\", 27);\n+      M2RTS_Halt ((const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/RTint.mod\", 46, 339, (const char *) \"AttachVector\", 12, (const char *) \"cannot find vector supplied\", 27);\n     }\n   else\n     {\n@@ -830,7 +830,7 @@ extern \"C\" void * RTint_AttachVector (unsigned int vec, void * p)\n       RTco_signal (lock);\n       return l;\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTint.def\", 25, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/gm2-libs/RTint.def\", 25, 1);\n   __builtin_unreachable ();\n }\n \n@@ -855,7 +855,7 @@ extern \"C\" void RTint_IncludeVector (unsigned int vec)\n       v = FindVectorNo (vec);\n       if (v == NULL)\n         {\n-          M2RTS_Halt ((const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTint.mod\", 53, 372, (const char *) \"IncludeVector\", 13, (const char *) \"cannot find vector supplied\", 27);\n+          M2RTS_Halt ((const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/RTint.mod\", 46, 372, (const char *) \"IncludeVector\", 13, (const char *) \"cannot find vector supplied\", 27);\n         }\n       else\n         {\n@@ -902,7 +902,7 @@ extern \"C\" void RTint_ExcludeVector (unsigned int vec)\n   v = FindPendingVector (vec);\n   if (v == NULL)\n     {\n-      M2RTS_Halt ((const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTint.mod\", 53, 415, (const char *) \"ExcludeVector\", 13, (const char *) \"cannot find pending vector supplied\", 35);\n+      M2RTS_Halt ((const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/RTint.mod\", 46, 415, (const char *) \"ExcludeVector\", 13, (const char *) \"cannot find pending vector supplied\", 35);\n     }\n   else\n     {\n@@ -1003,7 +1003,7 @@ extern \"C\" void RTint_Listen (unsigned int untilInterrupt, RTint_DispatchVector\n \n \n                   default:\n-                    CaseException (\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTint.def\", 25, 1);\n+                    CaseException (\"../../gcc-read-write/gcc/m2/gm2-libs/RTint.def\", 25, 1);\n                     __builtin_unreachable ();\n                 }\n               v = v->pending;\n@@ -1016,7 +1016,7 @@ extern \"C\" void RTint_Listen (unsigned int untilInterrupt, RTint_DispatchVector\n         }\n       if (((untilInterrupt && (i == NULL)) && (o == NULL)) && ! found)\n         {\n-          M2RTS_Halt ((const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/RTint.mod\", 53, 731, (const char *) \"Listen\", 6, (const char *) \"deadlock found, no more processes to run and no interrupts active\", 65);\n+          M2RTS_Halt ((const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/RTint.mod\", 46, 731, (const char *) \"Listen\", 6, (const char *) \"deadlock found, no more processes to run and no interrupts active\", 65);\n         }\n       /* printf('}\n       ') ;  */"}, {"sha": "8bb03af9e3e6146ac1b06596d3b3f2422d4d05a5", "filename": "gcc/m2/mc-boot/GStdIO.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGStdIO.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGStdIO.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fmc-boot%2FGStdIO.c?ref=2bf9bbfe5b377003a29d6560d69baa605382b895", "patch": "@@ -193,7 +193,7 @@ extern \"C\" StdIO_ProcWrite StdIO_GetCurrentOutput (void)\n       M2RTS_HALT (-1);\n       __builtin_unreachable ();\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/StdIO.def\", 25, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/gm2-libs/StdIO.def\", 25, 1);\n   __builtin_unreachable ();\n }\n \n@@ -252,7 +252,7 @@ extern \"C\" StdIO_ProcRead StdIO_GetCurrentInput (void)\n       M2RTS_HALT (-1);\n       __builtin_unreachable ();\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/StdIO.def\", 25, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/gm2-libs/StdIO.def\", 25, 1);\n   __builtin_unreachable ();\n }\n "}, {"sha": "8b87e0bda25231059448e93c1c267d231c868aae", "filename": "gcc/m2/mc-boot/GStringConvert.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGStringConvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGStringConvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fmc-boot%2FGStringConvert.c?ref=2bf9bbfe5b377003a29d6560d69baa605382b895", "patch": "@@ -1916,7 +1916,7 @@ extern \"C\" DynamicStrings_String StringConvert_ToSigFig (DynamicStrings_String s\n   int point;\n   unsigned int poTen;\n \n-  Assert ((IsDigit (DynamicStrings_char (s, 0))) || ((DynamicStrings_char (s, 0)) == '.'), (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/StringConvert.mod\", 61, 1222, (const char *) \"ToSigFig\", 8);\n+  Assert ((IsDigit (DynamicStrings_char (s, 0))) || ((DynamicStrings_char (s, 0)) == '.'), (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/StringConvert.mod\", 54, 1222, (const char *) \"ToSigFig\", 8);\n   point = DynamicStrings_Index (s, '.', 0);\n   if (point < 0)\n     {\n@@ -1968,7 +1968,7 @@ extern \"C\" DynamicStrings_String StringConvert_ToDecimalPlaces (DynamicStrings_S\n {\n   int point;\n \n-  Assert ((IsDigit (DynamicStrings_char (s, 0))) || ((DynamicStrings_char (s, 0)) == '.'), (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/StringConvert.mod\", 61, 1069, (const char *) \"ToDecimalPlaces\", 15);\n+  Assert ((IsDigit (DynamicStrings_char (s, 0))) || ((DynamicStrings_char (s, 0)) == '.'), (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/StringConvert.mod\", 54, 1069, (const char *) \"ToDecimalPlaces\", 15);\n   point = DynamicStrings_Index (s, '.', 0);\n   if (point < 0)\n     {"}, {"sha": "d5218fb4b428c21f1f011d730f886c5567df6b51", "filename": "gcc/m2/mc-boot/GSysStorage.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGSysStorage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGSysStorage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fmc-boot%2FGSysStorage.c?ref=2bf9bbfe5b377003a29d6560d69baa605382b895", "patch": "@@ -93,7 +93,7 @@ extern \"C\" void SysStorage_ALLOCATE (void * *a, unsigned int size)\n   (*a) = libc_malloc (static_cast<size_t> (size));\n   if ((*a) == NULL)\n     {\n-      Debug_Halt ((const char *) \"out of memory error\", 19, 50, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/SysStorage.mod\", 58);\n+      Debug_Halt ((const char *) \"out of memory error\", 19, 50, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/SysStorage.mod\", 51);\n     }\n   if (enableTrace && trace)\n     {\n@@ -118,7 +118,7 @@ extern \"C\" void SysStorage_DEALLOCATE (void * *a, unsigned int size)\n         }\n       if ((libc_memset ((*a), 0, static_cast<size_t> (size))) != (*a))\n         {\n-          Debug_Halt ((const char *) \"memset should have returned the first parameter\", 47, 76, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/SysStorage.mod\", 58);\n+          Debug_Halt ((const char *) \"memset should have returned the first parameter\", 47, 76, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/SysStorage.mod\", 51);\n         }\n     }\n   if (enableDeallocation)\n@@ -163,7 +163,7 @@ extern \"C\" void SysStorage_REALLOCATE (void * *a, unsigned int size)\n       (*a) = libc_realloc ((*a), static_cast<size_t> (size));\n       if ((*a) == NULL)\n         {\n-          Debug_Halt ((const char *) \"out of memory error\", 19, 119, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/gm2-libs/SysStorage.mod\", 58);\n+          Debug_Halt ((const char *) \"out of memory error\", 19, 119, (const char *) \"../../gcc-read-write/gcc/m2/gm2-libs/SysStorage.mod\", 51);\n         }\n       if (enableTrace && trace)\n         {"}, {"sha": "5a92e9ac5eb89b3ff6dde81b2a6b85ab96ba5ea4", "filename": "gcc/m2/mc-boot/Gdecl.c", "status": "modified", "additions": 76, "deletions": 76, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fmc-boot%2FGdecl.c?ref=2bf9bbfe5b377003a29d6560d69baa605382b895", "patch": "@@ -56,6 +56,7 @@ typedef struct mcPretty_writeLnProc_p mcPretty_writeLnProc;\n typedef unsigned int FIO_File;\n \n extern FIO_File FIO_StdOut;\n+#   define symbolKey_NulKey NULL\n typedef struct symbolKey_performOperation_p symbolKey_performOperation;\n \n #   define ASCII_tab ASCII_ht\n@@ -76,7 +77,6 @@ typedef struct decl_isNodeF_p decl_isNodeF;\n #   define SYSTEM_BYTESPERWORD 4\n typedef struct M2RTS_ArgCVEnvP_p M2RTS_ArgCVEnvP;\n \n-#   define symbolKey_NulKey NULL\n typedef struct symbolKey_isSymbol_p symbolKey_isSymbol;\n \n #   define ASCII_nul (char) 000\n@@ -295,12 +295,12 @@ typedef struct DynamicStrings_stringRecord_r DynamicStrings_stringRecord;\n \n typedef struct wlists__T9_r wlists__T9;\n \n-typedef struct mcPretty__T12_r mcPretty__T12;\n-\n typedef struct DynamicStrings_Contents_r DynamicStrings_Contents;\n \n typedef struct DynamicStrings__T7_a DynamicStrings__T7;\n \n+typedef struct mcPretty__T12_r mcPretty__T12;\n+\n typedef struct wlists__T10_a wlists__T10;\n \n typedef Indexing__T5 *Indexing_Index;\n@@ -836,6 +836,12 @@ struct wlists__T9_r {\n                       wlists_wlist next;\n                     };\n \n+struct DynamicStrings_Contents_r {\n+                                   DynamicStrings__T7 buf;\n+                                   unsigned int len;\n+                                   DynamicStrings_String next;\n+                                 };\n+\n struct mcPretty__T12_r {\n                          mcPretty_writeProc write_;\n                          mcPretty_writeLnProc writeln;\n@@ -848,12 +854,6 @@ struct mcPretty__T12_r {\n                          mcPretty_pretty stacked;\n                        };\n \n-struct DynamicStrings_Contents_r {\n-                                   DynamicStrings__T7 buf;\n-                                   unsigned int len;\n-                                   DynamicStrings_String next;\n-                                 };\n-\n typedef struct DynamicStrings_descriptor_r DynamicStrings_descriptor;\n \n typedef DynamicStrings_descriptor *DynamicStrings_Descriptor;\n@@ -6678,7 +6678,7 @@ static decl_node newNode (decl_nodeT k)\n       d->at.firstUsed = 0;\n       return d;\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n   __builtin_unreachable ();\n }\n \n@@ -7038,7 +7038,7 @@ static decl_node addToScope (decl_node n)\n     }\n   M2RTS_HALT (-1);\n   __builtin_unreachable ();\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n   __builtin_unreachable ();\n }\n \n@@ -7116,7 +7116,7 @@ static void setUnary (decl_node u, decl_nodeT k, decl_node a, decl_node t)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n }\n@@ -7399,7 +7399,7 @@ static void putFieldVarient (decl_node f, decl_node v)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n   switch (f->kind)\n@@ -7410,7 +7410,7 @@ static void putFieldVarient (decl_node f, decl_node v)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n }\n@@ -7437,7 +7437,7 @@ static decl_node putFieldRecord (decl_node r, nameKey_Name tag, decl_node type,\n         if (tag != nameKey_NulName)\n           {\n             /* avoid gcc warning by using compound statement even if not strictly necessary.  */\n-            if ((symbolKey_getSymKey (r->recordF.localSymbols, tag)) == nameKey_NulName)\n+            if ((symbolKey_getSymKey (r->recordF.localSymbols, tag)) == symbolKey_NulKey)\n               {\n                 symbolKey_putSymKey (r->recordF.localSymbols, tag, reinterpret_cast<void *> (n));\n               }\n@@ -7461,7 +7461,7 @@ static decl_node putFieldRecord (decl_node r, nameKey_Name tag, decl_node type,\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n   /* fill in, n.  */\n@@ -7519,7 +7519,7 @@ static void putVarientTag (decl_node v, decl_node tag)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n }\n@@ -7543,7 +7543,7 @@ static decl_node getParent (decl_node n)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -7571,7 +7571,7 @@ static decl_node getRecord (decl_node n)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -7751,7 +7751,7 @@ static unsigned int getConstExpComplete (decl_node n)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -7856,7 +7856,7 @@ static decl_node makeVal (decl_node params)\n       M2RTS_HALT (-1);\n       __builtin_unreachable ();\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n   __builtin_unreachable ();\n }\n \n@@ -7877,7 +7877,7 @@ static decl_node makeCast (decl_node c, decl_node p)\n       M2RTS_HALT (-1);\n       __builtin_unreachable ();\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n   __builtin_unreachable ();\n }\n \n@@ -8387,7 +8387,7 @@ static decl_node makeUnary (decl_nodeT k, decl_node e, decl_node res)\n \n \n           default:\n-            CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+            CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n             __builtin_unreachable ();\n         }\n     }\n@@ -8481,7 +8481,7 @@ static DynamicStrings_String getStringContents (decl_node n)\n     }\n   M2RTS_HALT (-1);\n   __builtin_unreachable ();\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n   __builtin_unreachable ();\n }\n \n@@ -8617,7 +8617,7 @@ static decl_node doMakeBinary (decl_nodeT k, decl_node l, decl_node r, decl_node\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n   return n;\n@@ -9217,12 +9217,12 @@ static decl_node doGetExprType (decl_node n)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n   M2RTS_HALT (-1);\n   __builtin_unreachable ();\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n   __builtin_unreachable ();\n }\n \n@@ -9361,12 +9361,12 @@ static decl_node getSymScope (decl_node n)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n   M2RTS_HALT (-1);\n   __builtin_unreachable ();\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n   __builtin_unreachable ();\n }\n \n@@ -9678,7 +9678,7 @@ static unsigned int needsParen (decl_node n)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n   return TRUE;\n@@ -9787,7 +9787,7 @@ static void doPolyBinary (mcPretty_pretty p, decl_nodeT op, decl_node left, decl\n \n \n           default:\n-            CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+            CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n             __builtin_unreachable ();\n         }\n     }\n@@ -9813,7 +9813,7 @@ static void doPolyBinary (mcPretty_pretty p, decl_nodeT op, decl_node left, decl\n \n \n           default:\n-            CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+            CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n             __builtin_unreachable ();\n         }\n     }\n@@ -10091,7 +10091,7 @@ static decl_node doGetLastOp (decl_node a, decl_node b)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -10731,7 +10731,7 @@ static void doExprC (mcPretty_pretty p, decl_node n)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n }\n@@ -10936,7 +10936,7 @@ static void doExprM2 (mcPretty_pretty p, decl_node n)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n }\n@@ -11108,7 +11108,7 @@ static DynamicStrings_String replaceChar (DynamicStrings_String s, char ch, cons\n         return s;\n       }\n   }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n   __builtin_unreachable ();\n }\n \n@@ -11168,7 +11168,7 @@ static unsigned int countChar (DynamicStrings_String s, char ch)\n         return c;\n       }\n   }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n   __builtin_unreachable ();\n }\n \n@@ -12227,7 +12227,7 @@ static decl_node doMin (decl_node n)\n       M2RTS_HALT (-1);  /* finish the cacading elsif statement.  */\n       __builtin_unreachable ();\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n   __builtin_unreachable ();\n }\n \n@@ -12308,7 +12308,7 @@ static decl_node doMax (decl_node n)\n       M2RTS_HALT (-1);  /* finish the cacading elsif statement.  */\n       __builtin_unreachable ();\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n   __builtin_unreachable ();\n }\n \n@@ -12597,7 +12597,7 @@ static void doBaseC (mcPretty_pretty p, decl_node n)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n   mcPretty_setNeedSpace (p);\n@@ -12687,7 +12687,7 @@ static void doSystemC (mcPretty_pretty p, decl_node n)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n }\n@@ -16041,7 +16041,7 @@ static void doCreal (mcPretty_pretty p, decl_node t)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n }\n@@ -16072,7 +16072,7 @@ static void doCimag (mcPretty_pretty p, decl_node t)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n }\n@@ -16203,7 +16203,7 @@ static void doIntrinsicC (mcPretty_pretty p, decl_node n)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n   outText (p, (const char *) \";\", 1);\n@@ -17365,7 +17365,7 @@ static void dbs (decl_dependentState s, decl_node n)\n \n \n           default:\n-            CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+            CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n             __builtin_unreachable ();\n         }\n       if (n != NULL)\n@@ -18258,10 +18258,10 @@ static decl_dependentState doDependants (alists_alist l, decl_node n)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n   __builtin_unreachable ();\n }\n \n@@ -18358,7 +18358,7 @@ static void visitIntrinsicFunction (alists_alist v, decl_node n, decl_nodeProced\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n }\n@@ -19357,7 +19357,7 @@ static void visitDependants (alists_alist v, decl_node n, decl_nodeProcedure p)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n }\n@@ -19704,12 +19704,12 @@ static DynamicStrings_String genKind (decl_node n)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n   M2RTS_HALT (-1);\n   __builtin_unreachable ();\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n   __builtin_unreachable ();\n }\n \n@@ -20884,7 +20884,7 @@ static void doBaseM2 (mcPretty_pretty p, decl_node n)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n   mcPretty_setNeedSpace (p);\n@@ -20910,7 +20910,7 @@ static void doSystemM2 (mcPretty_pretty p, decl_node n)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n }\n@@ -22121,10 +22121,10 @@ static decl_node doDupExpr (decl_node n)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n   __builtin_unreachable ();\n }\n \n@@ -22454,7 +22454,7 @@ extern \"C\" unsigned int decl_isVisited (decl_node n)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -22484,7 +22484,7 @@ extern \"C\" void decl_unsetVisited (decl_node n)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n }\n@@ -22512,7 +22512,7 @@ extern \"C\" void decl_setVisited (decl_node n)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n }\n@@ -22540,7 +22540,7 @@ extern \"C\" void decl_setEnumsComplete (decl_node n)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n }\n@@ -22568,7 +22568,7 @@ extern \"C\" unsigned int decl_getEnumsComplete (decl_node n)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -22789,7 +22789,7 @@ extern \"C\" decl_node decl_lookupInScope (decl_node scope, nameKey_Name n)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -23164,12 +23164,12 @@ extern \"C\" decl_node decl_getType (decl_node n)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n   M2RTS_HALT (-1);\n   __builtin_unreachable ();\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n   __builtin_unreachable ();\n }\n \n@@ -23563,7 +23563,7 @@ extern \"C\" decl_node decl_getScope (decl_node n)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -24218,7 +24218,7 @@ extern \"C\" decl_node decl_makeVarient (decl_node r)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n   return n;\n@@ -24685,7 +24685,7 @@ extern \"C\" nameKey_Name decl_getSymName (decl_node n)\n         __builtin_unreachable ();\n         break;\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n   __builtin_unreachable ();\n }\n \n@@ -24723,7 +24723,7 @@ extern \"C\" decl_node decl_import (decl_node m, decl_node n)\n \n \n           default:\n-            CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+            CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n             __builtin_unreachable ();\n         }\n       importEnumFields (m, n);\n@@ -24852,7 +24852,7 @@ extern \"C\" void decl_setSource (decl_node n, nameKey_Name s)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n }\n@@ -24880,7 +24880,7 @@ extern \"C\" nameKey_Name decl_getSource (decl_node n)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -25323,7 +25323,7 @@ extern \"C\" void decl_addParameter (decl_node proc, decl_node param)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n }\n@@ -25416,7 +25416,7 @@ extern \"C\" decl_node decl_makeBinaryTok (mcReserved_toktype op, decl_node l, dec\n       M2RTS_HALT (-1);  /* most likely op needs a clause as above.  */\n       __builtin_unreachable ();\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n   __builtin_unreachable ();\n }\n \n@@ -25448,7 +25448,7 @@ extern \"C\" decl_node decl_makeUnaryTok (mcReserved_toktype op, decl_node e)\n       M2RTS_HALT (-1);  /* most likely op needs a clause as above.  */\n       __builtin_unreachable ();\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n   __builtin_unreachable ();\n }\n \n@@ -25886,7 +25886,7 @@ extern \"C\" void decl_setConstExpComplete (decl_node n)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n }\n@@ -26251,7 +26251,7 @@ extern \"C\" void decl_putBegin (decl_node b, decl_node s)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n }\n@@ -26278,7 +26278,7 @@ extern \"C\" void decl_putFinally (decl_node b, decl_node s)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n }\n@@ -26906,7 +26906,7 @@ extern \"C\" void decl_out (void)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/decl.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/decl.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n   closeOutput ();"}, {"sha": "6f17ca5d3a1ae7b677e4f244285601fd6ded728b", "filename": "gcc/m2/mc-boot/Gkeyc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGkeyc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGkeyc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fmc-boot%2FGkeyc.c?ref=2bf9bbfe5b377003a29d6560d69baa605382b895", "patch": "@@ -908,7 +908,7 @@ static unsigned int mangleN (nameKey_Name n, DynamicStrings_String *m, unsigned\n         return TRUE;\n       }\n   }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/mc/keyc.def\", 20, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/mc/keyc.def\", 20, 1);\n   __builtin_unreachable ();\n }\n "}, {"sha": "4dfad51f4a8fe7da67975450b8e12896709b0177", "filename": "gcc/m2/mc-boot/GmcComment.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGmcComment.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGmcComment.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fmc-boot%2FGmcComment.c?ref=2bf9bbfe5b377003a29d6560d69baa605382b895", "patch": "@@ -257,7 +257,7 @@ static void dumpComment (mcComment_commentDesc cd)\n \n \n       default:\n-        CaseException (\"../../gcc-git-devel-modula2/gcc/m2/mc/mcComment.def\", 20, 1);\n+        CaseException (\"../../gcc-read-write/gcc/m2/mc/mcComment.def\", 20, 1);\n         __builtin_unreachable ();\n     }\n   if (cd->used)"}, {"sha": "e6b4e35bffe89f5b1c47040ab35acc90a858d1d8", "filename": "gcc/m2/mc-boot/GmcComp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGmcComp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGmcComp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fmc-boot%2FGmcComp.c?ref=2bf9bbfe5b377003a29d6560d69baa605382b895", "patch": "@@ -294,7 +294,7 @@ static decl_node examineCompilationUnit (void)\n     }\n   mcflex_mcError (DynamicStrings_string (DynamicStrings_InitString ((const char *) \"failed to find module name\", 26)));\n   libc_exit (1);\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/mc/mcComp.def\", 20, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/mc/mcComp.def\", 20, 1);\n   __builtin_unreachable ();\n }\n \n@@ -324,7 +324,7 @@ static decl_node peepInto (DynamicStrings_String s)\n       mcPrintf_fprintf1 (FIO_StdErr, (const char *) \"failed to open %s\\\\n\", 19, (const unsigned char *) &s, (sizeof (s)-1));\n       libc_exit (1);\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/mc/mcComp.def\", 20, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/mc/mcComp.def\", 20, 1);\n   __builtin_unreachable ();\n }\n "}, {"sha": "8cac40ea03351ec091f5dfa6af82bf985448b405", "filename": "gcc/m2/mc-boot/GmcDebug.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGmcDebug.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGmcDebug.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fmc-boot%2FGmcDebug.c?ref=2bf9bbfe5b377003a29d6560d69baa605382b895", "patch": "@@ -54,7 +54,7 @@ extern \"C\" void mcDebug_assert (unsigned int q)\n {\n   if (! q)\n     {\n-      mcError_internalError ((const char *) \"assert failed\", 13, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/mc/mcDebug.mod\", 49, 35);\n+      mcError_internalError ((const char *) \"assert failed\", 13, (const char *) \"../../gcc-read-write/gcc/m2/mc/mcDebug.mod\", 42, 35);\n     }\n }\n "}, {"sha": "3073e62139a8d3d1dfb1d926ab2fa03a05d4488e", "filename": "gcc/m2/mc-boot/GmcMetaError.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGmcMetaError.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGmcMetaError.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fmc-boot%2FGmcMetaError.c?ref=2bf9bbfe5b377003a29d6560d69baa605382b895", "patch": "@@ -408,7 +408,7 @@ static void internalFormat (DynamicStrings_String s, int i, const char *m_, unsi\n   s = DynamicStrings_ConCatChar (s, '^');\n   s = SFIO_WriteS (FIO_StdOut, s);\n   FIO_WriteLine (FIO_StdOut);\n-  mcError_internalError ((const char *) m, _m_high, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/mc/mcMetaError.mod\", 53, 97);\n+  mcError_internalError ((const char *) m, _m_high, (const char *) \"../../gcc-read-write/gcc/m2/mc/mcMetaError.mod\", 46, 97);\n }\n \n \n@@ -420,7 +420,7 @@ static DynamicStrings_String x (DynamicStrings_String a, DynamicStrings_String b\n {\n   if (a != b)\n     {\n-      mcError_internalError ((const char *) \"different string returned\", 25, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/mc/mcMetaError.mod\", 53, 109);\n+      mcError_internalError ((const char *) \"different string returned\", 25, (const char *) \"../../gcc-read-write/gcc/m2/mc/mcMetaError.mod\", 46, 109);\n     }\n   return a;\n   /* static analysis guarentees a RETURN statement will be used before here.  */\n@@ -734,7 +734,7 @@ static mcError_error doError (mcError_error e, mcMetaError_errorType t, unsigned\n       case mcMetaError_chained:\n         if (e == NULL)\n           {\n-            mcError_internalError ((const char *) \"should not be chaining an error onto an empty error note\", 56, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/mc/mcMetaError.mod\", 53, 355);\n+            mcError_internalError ((const char *) \"should not be chaining an error onto an empty error note\", 56, (const char *) \"../../gcc-read-write/gcc/m2/mc/mcMetaError.mod\", 46, 355);\n           }\n         else\n           {\n@@ -758,7 +758,7 @@ static mcError_error doError (mcError_error e, mcMetaError_errorType t, unsigned\n \n \n       default:\n-        mcError_internalError ((const char *) \"unexpected enumeration value\", 28, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/mc/mcMetaError.mod\", 53, 369);\n+        mcError_internalError ((const char *) \"unexpected enumeration value\", 28, (const char *) \"../../gcc-read-write/gcc/m2/mc/mcMetaError.mod\", 46, 369);\n         break;\n     }\n   return e;"}, {"sha": "3088ba49bf3fd5e5203b361404e3659f8204bad3", "filename": "gcc/m2/mc-boot/GmcOptions.c", "status": "modified", "additions": 36, "deletions": 5, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGmcOptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGmcOptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fmc-boot%2FGmcOptions.c?ref=2bf9bbfe5b377003a29d6560d69baa605382b895", "patch": "@@ -50,7 +50,6 @@ Boston, MA 02110-1301, USA.  */\n #   include \"GFIO.h\"\n #   include \"GSFIO.h\"\n \n-#   define YEAR \"2021\"\n static unsigned int langC;\n static unsigned int langCPP;\n static unsigned int langM2;\n@@ -171,6 +170,12 @@ extern \"C\" unsigned int mcOptions_getScaffoldMain (void);\n \n extern \"C\" void mcOptions_writeGPLheader (FIO_File f);\n \n+/*\n+   getYear - return the year.\n+*/\n+\n+static unsigned int getYear (void);\n+\n /*\n    displayVersion - displays the version of the compiler.\n */\n@@ -293,14 +298,34 @@ static void setLang (DynamicStrings_String arg);\n static void handleOption (DynamicStrings_String arg);\n \n \n+/*\n+   getYear - return the year.\n+*/\n+\n+static unsigned int getYear (void)\n+{\n+  libc_time_t epoch;\n+  libc_ptrToTM localTime;\n+\n+  epoch = libc_time (NULL);\n+  localTime = static_cast<libc_ptrToTM> (libc_localtime (&epoch));\n+  return localTime->tm_year+1900;\n+  /* static analysis guarentees a RETURN statement will be used before here.  */\n+  __builtin_unreachable ();\n+}\n+\n+\n /*\n    displayVersion - displays the version of the compiler.\n */\n \n static void displayVersion (unsigned int mustExit)\n {\n-  mcPrintf_printf0 ((const char *) \"Copyright (C) ''2021'' Free Software Foundation, Inc.\\\\n\", 55);\n-  mcPrintf_printf0 ((const char *) \"License GPLv2: GNU GPL version 2 or later <http://gnu.org/licenses/gpl.html>\\\\n\", 78);\n+  unsigned int year;\n+\n+  year = getYear ();\n+  mcPrintf_printf1 ((const char *) \"Copyright (C) %d Free Software Foundation, Inc.\\\\n\", 49, (const unsigned char *) &year, (sizeof (year)-1));\n+  mcPrintf_printf0 ((const char *) \"License GPLv3: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\\\\n\", 78);\n   mcPrintf_printf0 ((const char *) \"This is free software: you are free to change and redistribute it.\\\\n\", 68);\n   mcPrintf_printf0 ((const char *) \"There is NO WARRANTY, to the extent permitted by law.\\\\n\", 55);\n   if (mustExit)\n@@ -424,7 +449,10 @@ static void commentS (FIO_File f, DynamicStrings_String s)\n \n static void gplBody (FIO_File f)\n {\n-  comment (f, (const char *) \"Copyright (C) ''2021'' Free Software Foundation, Inc.\", 53);\n+  unsigned int year;\n+\n+  year = getYear ();\n+  mcPrintf_printf1 ((const char *) \"Copyright (C) %d Free Software Foundation, Inc.\\\\n\", 49, (const unsigned char *) &year, (sizeof (year)-1));\n   if (contributed)\n     {\n       FIO_WriteString (f, (const char *) \"Contributed by \", 15);\n@@ -464,7 +492,10 @@ static void gplBody (FIO_File f)\n \n static void glplBody (FIO_File f)\n {\n-  comment (f, (const char *) \"Copyright (C) ''2021'' Free Software Foundation, Inc.\", 53);\n+  unsigned int year;\n+\n+  year = getYear ();\n+  mcPrintf_printf1 ((const char *) \"Copyright (C) %d Free Software Foundation, Inc.\\\\n\", 49, (const unsigned char *) &year, (sizeof (year)-1));\n   if (contributed)\n     {\n       FIO_WriteString (f, (const char *) \"Contributed by \", 15);"}, {"sha": "a1f13d8f19ce08fab709bc10b2b0c49f1e2df9ce", "filename": "gcc/m2/mc-boot/GmcStack.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGmcStack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGmcStack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fmc-boot%2FGmcStack.c?ref=2bf9bbfe5b377003a29d6560d69baa605382b895", "patch": "@@ -165,7 +165,7 @@ extern \"C\" void * mcStack_pop (mcStack_stack s)\n       Indexing_DeleteIndice (s->list, Indexing_HighIndice (s->list));\n       return a;\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/mc/mcStack.def\", 20, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/mc/mcStack.def\", 20, 1);\n   __builtin_unreachable ();\n }\n \n@@ -215,7 +215,7 @@ extern \"C\" void * mcStack_access (mcStack_stack s, unsigned int i)\n     {\n       return Indexing_GetIndice (s->list, i);\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/mc/mcStack.def\", 20, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/mc/mcStack.def\", 20, 1);\n   __builtin_unreachable ();\n }\n "}, {"sha": "11cb6fa92e48efce3de4c0966a1becf4083056f5", "filename": "gcc/m2/mc-boot/GnameKey.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGnameKey.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGnameKey.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fmc-boot%2FGnameKey.c?ref=2bf9bbfe5b377003a29d6560d69baa605382b895", "patch": "@@ -323,7 +323,7 @@ extern \"C\" nameKey_Name nameKey_makeKey (const char *a_, unsigned int _a_high)\n       (*p) = ASCII_nul;\n       return doMakeKey (n, higha);\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/mc/nameKey.def\", 20, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/mc/nameKey.def\", 20, 1);\n   __builtin_unreachable ();\n }\n \n@@ -373,7 +373,7 @@ extern \"C\" nameKey_Name nameKey_makekey (void * a)\n           return doMakeKey (n, higha);\n         }\n     }\n-  ReturnException (\"../../gcc-git-devel-modula2/gcc/m2/mc/nameKey.def\", 20, 1);\n+  ReturnException (\"../../gcc-read-write/gcc/m2/mc/nameKey.def\", 20, 1);\n   __builtin_unreachable ();\n }\n "}, {"sha": "e72133ea3fda22565b732a0b3bb92f34c30ceb6f", "filename": "gcc/m2/mc-boot/GsymbolKey.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGsymbolKey.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc-boot%2FGsymbolKey.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fmc-boot%2FGsymbolKey.c?ref=2bf9bbfe5b377003a29d6560d69baa605382b895", "patch": "@@ -142,7 +142,7 @@ static void findNodeAndParentInTree (symbolKey_symbolTree t, nameKey_Name n, sym\n   (*father) = t;\n   if (t == NULL)\n     {\n-      Debug_Halt ((const char *) \"parameter t should never be NIL\", 31, 203, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/mc/symbolKey.mod\", 51);\n+      Debug_Halt ((const char *) \"parameter t should never be NIL\", 31, 203, (const char *) \"../../gcc-read-write/gcc/m2/mc/symbolKey.mod\", 44);\n     }\n   (*child) = t->left;\n   if ((*child) != NULL)\n@@ -285,7 +285,7 @@ extern \"C\" void symbolKey_putSymKey (symbolKey_symbolTree t, nameKey_Name name,\n     }\n   else\n     {\n-      Debug_Halt ((const char *) \"symbol already stored\", 21, 119, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/mc/symbolKey.mod\", 51);\n+      Debug_Halt ((const char *) \"symbol already stored\", 21, 119, (const char *) \"../../gcc-read-write/gcc/m2/mc/symbolKey.mod\", 44);\n     }\n }\n \n@@ -352,7 +352,7 @@ extern \"C\" void symbolKey_delSymKey (symbolKey_symbolTree t, nameKey_Name name)\n     }\n   else\n     {\n-      Debug_Halt ((const char *) \"trying to delete a symbol that is not in the tree - the compiler never expects this to occur\", 92, 186, (const char *) \"../../gcc-git-devel-modula2/gcc/m2/mc/symbolKey.mod\", 51);\n+      Debug_Halt ((const char *) \"trying to delete a symbol that is not in the tree - the compiler never expects this to occur\", 92, 186, (const char *) \"../../gcc-read-write/gcc/m2/mc/symbolKey.mod\", 44);\n     }\n }\n "}, {"sha": "f6afd666eb6d23b37a628a00e5f2076f3619fc82", "filename": "gcc/m2/mc/decl.mod", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc%2Fdecl.mod", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc%2Fdecl.mod", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fmc%2Fdecl.mod?ref=2bf9bbfe5b377003a29d6560d69baa605382b895", "patch": "@@ -22,7 +22,7 @@ along with GNU Modula-2; see the file COPYING3.  If not see\n IMPLEMENTATION MODULE decl ; (*!m2pim*)\n \n FROM ASCII IMPORT lf, tab ;\n-FROM symbolKey IMPORT symbolTree, initTree, getSymKey, putSymKey, foreachNodeDo ;\n+FROM symbolKey IMPORT NulKey, symbolTree, initTree, getSymKey, putSymKey, foreachNodeDo ;\n FROM mcDebug IMPORT assert ;\n FROM Storage IMPORT ALLOCATE, DEALLOCATE ;\n FROM nameKey IMPORT NulName, makeKey, lengthKey, makekey, keyToCharStar ;\n@@ -2936,7 +2936,7 @@ BEGIN\n                (* ensure that field, n, is in the parents Local Symbols.  *)\n                IF tag#NulName\n                THEN\n-                  IF getSymKey (recordF.localSymbols, tag) = NulName\n+                  IF getSymKey (recordF.localSymbols, tag) = NulKey\n                   THEN\n                      putSymKey (recordF.localSymbols, tag, n)\n                   ELSE"}, {"sha": "3204b68d79a9d0d2a036abecabad8c145d403df8", "filename": "gcc/m2/mc/mcOptions.mod", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc%2FmcOptions.mod", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf9bbfe5b377003a29d6560d69baa605382b895/gcc%2Fm2%2Fmc%2FmcOptions.mod", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fmc%2FmcOptions.mod?ref=2bf9bbfe5b377003a29d6560d69baa605382b895", "patch": "@@ -20,8 +20,8 @@ IMPLEMENTATION MODULE mcOptions ;\n \n FROM SArgs IMPORT GetArg, Narg ;\n FROM mcSearch IMPORT prependSearchPath ;\n-FROM libc IMPORT exit, printf ;\n-FROM mcPrintf IMPORT printf0 ;\n+FROM libc IMPORT exit, printf, time, localtime, time_t, ptrToTM ;\n+FROM mcPrintf IMPORT printf0, printf1 ;\n FROM Debug IMPORT Halt ;\n FROM StrLib IMPORT StrLen ;\n FROM decl IMPORT setLangC, setLangCP, setLangM2 ;\n@@ -33,9 +33,6 @@ FROM DynamicStrings IMPORT String, Length, InitString, Mark, Slice, EqualArray,\n IMPORT FIO ;\n IMPORT SFIO ;\n \n-CONST\n-   YEAR = '2023' ;\n-\n VAR\n    langC,\n    langCPP,\n@@ -65,13 +62,32 @@ VAR\n    cppProgram       : String ;\n \n \n+\n+(*\n+   getYear - return the year.\n+*)\n+\n+PROCEDURE getYear () : CARDINAL ;\n+VAR\n+   epoch    : time_t ;\n+   localTime: ptrToTM ;\n+BEGIN\n+   epoch := time (NIL) ;\n+   localTime := localtime (epoch) ;\n+   RETURN localTime^.tm_year + 1900\n+END getYear ;\n+\n+\n (*\n    displayVersion - displays the version of the compiler.\n *)\n \n PROCEDURE displayVersion (mustExit: BOOLEAN) ;\n+VAR\n+   year: CARDINAL ;\n BEGIN\n-   printf0 ('Copyright (C) ' + YEAR + ' Free Software Foundation, Inc.\\n') ;\n+   year := getYear () ;\n+   printf1 ('Copyright (C) %d Free Software Foundation, Inc.\\n', year) ;\n    printf0 ('License GPLv3: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\\n') ;\n    printf0 ('This is free software: you are free to change and redistribute it.\\n') ;\n    printf0 ('There is NO WARRANTY, to the extent permitted by law.\\n') ;\n@@ -183,8 +199,11 @@ END commentS ;\n *)\n \n PROCEDURE gplBody (f: File) ;\n+VAR\n+   year: CARDINAL ;\n BEGIN\n-   comment (f, 'Copyright (C) ' + YEAR + ' Free Software Foundation, Inc.') ;\n+   year := getYear () ;\n+   printf1 ('Copyright (C) %d Free Software Foundation, Inc.\\n', year) ;\n    IF contributed\n    THEN\n       FIO.WriteString (f, \"Contributed by \") ;\n@@ -222,8 +241,11 @@ END gplBody ;\n *)\n \n PROCEDURE glplBody (f: File) ;\n+VAR\n+   year: CARDINAL ;\n BEGIN\n-   comment (f, 'Copyright (C) ' + YEAR + ' Free Software Foundation, Inc.') ;\n+   year := getYear () ;\n+   printf1 ('Copyright (C) %d Free Software Foundation, Inc.\\n', year) ;\n    IF contributed\n    THEN\n       FIO.WriteString (f, \"Contributed by \") ;"}]}