{"sha": "623730d954a051941ae6a098f851bef308916ca0", "node_id": "C_kwDOANBUbNoAKDYyMzczMGQ5NTRhMDUxOTQxYWU2YTA5OGY4NTFiZWYzMDg5MTZjYTA", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-01-26T14:34:28Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-01-31T16:35:45Z"}, "message": "c++: fix ICE with -Wduplicated-cond [PR107593]\n\nHere we crash because a CAST_EXPR, representing T(), doesn't have\nits operand, and operand_equal_p's STRIP_ANY_LOCATION_WRAPPER doesn't\nexpect that.  (o_e_p is called from warn_duplicated_cond_add_or_warn.)\n\nIn the past we've adjusted o_e_p to better cope with template codes,\nbut in this case I think we just want to avoid attempting to warn\nabout inst-dependent expressions; I don't think I've ever envisioned\n-Wduplicated-cond to warn about them.  Also destroy the chain when\nan inst-dependent expression is encountered to not warn in\nWduplicated-cond4.C.\n\nThe ICE started with r12-6022, two-stage name lookup for overloaded\noperators, which gave dependent operators a TREE_TYPE (in particular,\nDEPENDENT_OPERATOR_TYPE), so we no longer bail out here in o_e_p:\n\n  /* Similar, if either does not have a type (like a template id),\n     they aren't equal.  */\n  if (!TREE_TYPE (arg0) || !TREE_TYPE (arg1))\n    return false;\n\n\tPR c++/107593\n\tPR c++/108597\n\ngcc/c-family/ChangeLog:\n\n\t* c-common.h (instantiation_dependent_expression_p): Declare.\n\t* c-warn.cc (warn_duplicated_cond_add_or_warn): If the condition\n\tis dependent, invalidate the chain.\n\ngcc/c/ChangeLog:\n\n\t* c-objc-common.cc (instantiation_dependent_expression_p): New.\n\ngcc/cp/ChangeLog:\n\n\t* cp-tree.h (instantiation_dependent_expression_p): Don't\n\tdeclare here.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/warn/Wduplicated-cond3.C: New test.\n\t* g++.dg/warn/Wduplicated-cond4.C: New test.\n\t* g++.dg/warn/Wduplicated-cond5.C: New test.", "tree": {"sha": "0c319d577e791f6a825274df677c6c409f811116", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c319d577e791f6a825274df677c6c409f811116"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/623730d954a051941ae6a098f851bef308916ca0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/623730d954a051941ae6a098f851bef308916ca0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/623730d954a051941ae6a098f851bef308916ca0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/623730d954a051941ae6a098f851bef308916ca0/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a39c6ec97906766ad65d15d4856fd41121ee7a45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a39c6ec97906766ad65d15d4856fd41121ee7a45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a39c6ec97906766ad65d15d4856fd41121ee7a45"}], "stats": {"total": 83, "additions": 81, "deletions": 2}, "files": [{"sha": "2dadb33476c99961777cecb295cdcf896aea0f12", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/623730d954a051941ae6a098f851bef308916ca0/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/623730d954a051941ae6a098f851bef308916ca0/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=623730d954a051941ae6a098f851bef308916ca0", "patch": "@@ -1101,6 +1101,7 @@ extern tree lookup_label (tree);\n extern tree lookup_name (tree);\n extern bool lvalue_p (const_tree);\n extern int maybe_adjust_arg_pos_for_attribute (const_tree);\n+extern bool instantiation_dependent_expression_p (tree);\n \n extern bool vector_targets_convertible_p (const_tree t1, const_tree t2);\n extern bool vector_types_convertible_p (const_tree t1, const_tree t2, bool emit_lax_note);"}, {"sha": "29efce3f2c0cfb72c19ee3946939d866a58569bd", "filename": "gcc/c-family/c-warn.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/623730d954a051941ae6a098f851bef308916ca0/gcc%2Fc-family%2Fc-warn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/623730d954a051941ae6a098f851bef308916ca0/gcc%2Fc-family%2Fc-warn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.cc?ref=623730d954a051941ae6a098f851bef308916ca0", "patch": "@@ -2535,7 +2535,7 @@ warn_duplicated_cond_add_or_warn (location_t loc, tree cond, vec<tree> **chain)\n   if (*chain == NULL)\n     return;\n \n-  if (TREE_SIDE_EFFECTS (cond))\n+  if (TREE_SIDE_EFFECTS (cond) || instantiation_dependent_expression_p (cond))\n     {\n       /* Uh-oh!  This condition has a side-effect, thus invalidates\n \t the whole chain.  */"}, {"sha": "0350733250b9882f61917337c2014ea70b79c197", "filename": "gcc/c/c-objc-common.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/623730d954a051941ae6a098f851bef308916ca0/gcc%2Fc%2Fc-objc-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/623730d954a051941ae6a098f851bef308916ca0/gcc%2Fc%2Fc-objc-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-objc-common.cc?ref=623730d954a051941ae6a098f851bef308916ca0", "patch": "@@ -400,3 +400,11 @@ maybe_adjust_arg_pos_for_attribute (const_tree)\n {\n   return 0;\n }\n+\n+/* In C, no expression is dependent.  */\n+\n+bool\n+instantiation_dependent_expression_p (tree)\n+{\n+  return false;\n+}"}, {"sha": "31fd8af4f2113b84555350387db4ee6330391093", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/623730d954a051941ae6a098f851bef308916ca0/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/623730d954a051941ae6a098f851bef308916ca0/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=623730d954a051941ae6a098f851bef308916ca0", "patch": "@@ -7428,7 +7428,6 @@ extern bool any_type_dependent_arguments_p      (const vec<tree, va_gc> *);\n extern bool any_type_dependent_elements_p       (const_tree);\n extern bool type_dependent_expression_p_push\t(tree);\n extern bool value_dependent_expression_p\t(tree);\n-extern bool instantiation_dependent_expression_p (tree);\n extern bool instantiation_dependent_uneval_expression_p (tree);\n extern bool any_value_dependent_elements_p      (const_tree);\n extern bool dependent_omp_for_p\t\t\t(tree, tree, tree, tree);"}, {"sha": "3da054e548597ff11137f57ba4aeb7709e20b7da", "filename": "gcc/testsuite/g++.dg/warn/Wduplicated-cond3.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/623730d954a051941ae6a098f851bef308916ca0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWduplicated-cond3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/623730d954a051941ae6a098f851bef308916ca0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWduplicated-cond3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWduplicated-cond3.C?ref=623730d954a051941ae6a098f851bef308916ca0", "patch": "@@ -0,0 +1,38 @@\n+// PR c++/107593\n+// { dg-do compile }\n+// { dg-options \"-Wduplicated-cond\" }\n+\n+template <typename T>\n+void\n+foo ()\n+{\n+  if (T() && T() && int())\n+    ;\n+  else if (T() && T() && int())\n+    ;\n+}\n+\n+template <typename T>\n+void bar(T a)\n+{\n+  if (a)\n+    ;\n+  else if (a)\n+    ;\n+}\n+\n+template <typename>\n+void baz(int a)\n+{\n+  if (a)\n+    ;\n+  else if (a) // { dg-warning \"duplicated\" }\n+    ;\n+}\n+void\n+f ()\n+{\n+  foo<int>();\n+  bar(1);\n+  baz<int>(1);\n+}"}, {"sha": "41bb9f09b4fe00fcb63037be5c6250555715af10", "filename": "gcc/testsuite/g++.dg/warn/Wduplicated-cond4.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/623730d954a051941ae6a098f851bef308916ca0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWduplicated-cond4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/623730d954a051941ae6a098f851bef308916ca0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWduplicated-cond4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWduplicated-cond4.C?ref=623730d954a051941ae6a098f851bef308916ca0", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/107593\n+// { dg-do compile }\n+// { dg-options \"-Wduplicated-cond\" }\n+\n+int n;\n+\n+template<class T> bool g() { n = 42; return false; }\n+\n+template<class T>\n+void f() {\n+  if (n)\n+    ;\n+  else if (g<T>())\n+    ;\n+  else if (n)\n+    ;\n+}"}, {"sha": "23a0bf212b54bb4249f79d7d728b39708d63367d", "filename": "gcc/testsuite/g++.dg/warn/Wduplicated-cond5.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/623730d954a051941ae6a098f851bef308916ca0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWduplicated-cond5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/623730d954a051941ae6a098f851bef308916ca0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWduplicated-cond5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWduplicated-cond5.C?ref=623730d954a051941ae6a098f851bef308916ca0", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/108597\n+// { dg-do compile }\n+// { dg-options \"-Wduplicated-cond\" }\n+\n+template <typename T>\n+struct MyStruct {\n+\n+    void check(int &x) {\n+        if (&x == &_a) {\n+        } else if (&x == &_b) {\n+        }\n+    }\n+\n+    int _a;\n+    int _b;\n+};"}]}