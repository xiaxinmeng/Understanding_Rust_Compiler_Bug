{"sha": "52ea044e54f9953a69b85f33167256344411b8e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJlYTA0NGU1NGY5OTUzYTY5Yjg1ZjMzMTY3MjU2MzQ0NDExYjhlNA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-10-07T23:31:04Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-10-07T23:31:04Z"}, "message": "tree-cfg.c (tree_block_forwards_to): Remove.\n\n\t* tree-cfg.c (tree_block_forwards_to): Remove.\n\t* tree-flow.h: Remove the corresponding prototype.\n\nFrom-SVN: r88719", "tree": {"sha": "17d073442454b9ef959cd7f2d80e12c1704eafae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17d073442454b9ef959cd7f2d80e12c1704eafae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52ea044e54f9953a69b85f33167256344411b8e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52ea044e54f9953a69b85f33167256344411b8e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52ea044e54f9953a69b85f33167256344411b8e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52ea044e54f9953a69b85f33167256344411b8e4/comments", "author": null, "committer": null, "parents": [{"sha": "ebd9dfc96ddb0e9809be06e03d6648281d85a0ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebd9dfc96ddb0e9809be06e03d6648281d85a0ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebd9dfc96ddb0e9809be06e03d6648281d85a0ea"}], "stats": {"total": 69, "additions": 5, "deletions": 64}, "files": [{"sha": "ae614e4af14aa5115d88cf88d97b3bad7e5f3413", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ea044e54f9953a69b85f33167256344411b8e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ea044e54f9953a69b85f33167256344411b8e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52ea044e54f9953a69b85f33167256344411b8e4", "patch": "@@ -1,3 +1,8 @@\n+2004-10-07  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* tree-cfg.c (tree_block_forwards_to): Remove.\n+\t* tree-flow.h: Remove the corresponding prototype.\n+\n 2004-10-07  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-flow-inline.h (phi_nodes): Remove an unnecessary check"}, {"sha": "5aaad4ac4e29e134be7b7483c5c697f161d11e85", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ea044e54f9953a69b85f33167256344411b8e4/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ea044e54f9953a69b85f33167256344411b8e4/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=52ea044e54f9953a69b85f33167256344411b8e4", "patch": "@@ -1843,69 +1843,6 @@ remove_bb (basic_block bb)\n   remove_phi_nodes_and_edges_for_unreachable_block (bb);\n }\n \n-\n-/* Examine BB to determine if it is a forwarding block (a block which only\n-   transfers control to a new destination).  If BB is a forwarding block,\n-   then return the edge leading to the ultimate destination.  */\n-\n-edge\n-tree_block_forwards_to (basic_block bb)\n-{\n-  block_stmt_iterator bsi;\n-  bb_ann_t ann = bb_ann (bb);\n-  tree stmt;\n-\n-  /* If this block is not forwardable, then avoid useless work.  */\n-  if (! ann->forwardable)\n-    return NULL;\n-\n-  /* Set this block to not be forwardable.  This prevents infinite loops since\n-     any block currently under examination is considered non-forwardable.  */\n-  ann->forwardable = 0;\n-\n-  /* No forwarding is possible if this block is a special block (ENTRY/EXIT),\n-     this block has more than one successor, this block's single successor is\n-     reached via an abnormal edge, this block has phi nodes, or this block's\n-     single successor has phi nodes.  */\n-  if (bb == EXIT_BLOCK_PTR\n-      || bb == ENTRY_BLOCK_PTR\n-      || EDGE_COUNT (bb->succs) != 1\n-      || EDGE_SUCC (bb, 0)->dest == EXIT_BLOCK_PTR\n-      || (EDGE_SUCC (bb, 0)->flags & EDGE_ABNORMAL) != 0\n-      || phi_nodes (bb)\n-      || phi_nodes (EDGE_SUCC (bb, 0)->dest))\n-    return NULL;\n-\n-  /* Walk past any labels at the start of this block.  */\n-  for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n-    {\n-      stmt = bsi_stmt (bsi);\n-      if (TREE_CODE (stmt) != LABEL_EXPR)\n-\tbreak;\n-    }\n-\n-  /* If we reached the end of this block we may be able to optimize this\n-     case.  */\n-  if (bsi_end_p (bsi))\n-    {\n-      edge dest;\n-\n-      /* Recursive call to pick up chains of forwarding blocks.  */\n-      dest = tree_block_forwards_to (EDGE_SUCC (bb, 0)->dest);\n-\n-      /* If none found, we forward to bb->succs[0] at minimum.  */\n-      if (!dest)\n-\tdest = EDGE_SUCC (bb, 0);\n-\n-      ann->forwardable = 1;\n-      return dest;\n-    }\n-\n-  /* No forwarding possible.  */\n-  return NULL;\n-}\n-\n-\n /* Try to remove superfluous control structures.  */\n \n static bool"}, {"sha": "c26e91b5c19e71c2cdffdd21d84de6abb6f9c177", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ea044e54f9953a69b85f33167256344411b8e4/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ea044e54f9953a69b85f33167256344411b8e4/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=52ea044e54f9953a69b85f33167256344411b8e4", "patch": "@@ -482,7 +482,6 @@ extern void cfg_remove_useless_stmts (void);\n extern edge thread_edge (edge, basic_block);\n extern basic_block label_to_block (tree);\n extern void tree_optimize_tail_calls (bool, enum tree_dump_index);\n-extern edge tree_block_forwards_to (basic_block bb);\n extern void bsi_insert_on_edge (edge, tree);\n extern basic_block bsi_insert_on_edge_immediate (edge, tree);\n extern void bsi_commit_edge_inserts (int *);"}]}