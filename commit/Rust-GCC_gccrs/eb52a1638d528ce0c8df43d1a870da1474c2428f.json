{"sha": "eb52a1638d528ce0c8df43d1a870da1474c2428f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI1MmExNjM4ZDUyOGNlMGM4ZGY0M2QxYTg3MGRhMTQ3NGMyNDI4Zg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2004-06-18T03:05:15Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2004-06-18T03:05:15Z"}, "message": "new test\n\nFrom-SVN: r83337", "tree": {"sha": "76906e2848d2f882b47b0a0c4087d866e258cd95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76906e2848d2f882b47b0a0c4087d866e258cd95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb52a1638d528ce0c8df43d1a870da1474c2428f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb52a1638d528ce0c8df43d1a870da1474c2428f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb52a1638d528ce0c8df43d1a870da1474c2428f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb52a1638d528ce0c8df43d1a870da1474c2428f/comments", "author": null, "committer": null, "parents": [{"sha": "70c18d9772113dcf36a386f7950bd65bf67a8b23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70c18d9772113dcf36a386f7950bd65bf67a8b23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70c18d9772113dcf36a386f7950bd65bf67a8b23"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "7294577348f2e432f47fd90cfb1a20d8e16a83e6", "filename": "gcc/testsuite/g++.dg/ext/stmtexpr2.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb52a1638d528ce0c8df43d1a870da1474c2428f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstmtexpr2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb52a1638d528ce0c8df43d1a870da1474c2428f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstmtexpr2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstmtexpr2.C?ref=eb52a1638d528ce0c8df43d1a870da1474c2428f", "patch": "@@ -0,0 +1,39 @@\n+// { dg-do run }\n+// { dg-options \"\" }\n+\n+extern \"C\" int printf (char const *, ...);\n+extern \"C\" void abort ();\n+\n+static unsigned int expected[] = {\n+  11, 10, 21, 110, 111, 121\n+};\n+static unsigned int pointer = 0;\n+\n+static void Check (unsigned t, unsigned i, void const *ptr, char const *name)\n+{\n+  printf (\"%d %d %p %s\\n\", t, i, ptr, name);\n+\n+  if (pointer > sizeof(expected)/sizeof(expected[0]))\n+    abort ();\n+  if (t + i != expected[pointer++])\n+    abort ();\n+}\n+\n+struct A \n+{\n+  int I;\n+\n+  A (int i) : I(i) { Check (0, I, this, __PRETTY_FUNCTION__); }\n+  ~A () { Check (100, I, this, __PRETTY_FUNCTION__); }\n+  A (A const &a) : I(a.I) { Check (200, I, this, __PRETTY_FUNCTION__); }\n+  A &operator= (A const &a)\n+  { I = a.I; Check (300, I, this, __PRETTY_FUNCTION__); return *this; }\n+  void Foo () const { Check (400, I, this, __PRETTY_FUNCTION__); }\n+  A operator+ (A const &a) const\n+  { return A(I + a.I); }\n+};\n+\n+int main ()\n+{\n+  ({ A(10) + A(11); });\n+}"}]}