{"sha": "0e6362d98458b52d39b83445276245acc4bd5c21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU2MzYyZDk4NDU4YjUyZDM5YjgzNDQ1Mjc2MjQ1YWNjNGJkNWMyMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-06T21:49:35Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-06T21:49:35Z"}, "message": "(insert_save_restore): Change from USE and CLOBBER insns to using\nCALL_INSN_FUNCTION_USAGE.\n\nFrom-SVN: r7243", "tree": {"sha": "dfc1dfff8414adfa4b29f8047a0bcb1f77741a54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfc1dfff8414adfa4b29f8047a0bcb1f77741a54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e6362d98458b52d39b83445276245acc4bd5c21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e6362d98458b52d39b83445276245acc4bd5c21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e6362d98458b52d39b83445276245acc4bd5c21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e6362d98458b52d39b83445276245acc4bd5c21/comments", "author": null, "committer": null, "parents": [{"sha": "6b67ec08ceed9e120a93fe1fea50d77dc8969eac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b67ec08ceed9e120a93fe1fea50d77dc8969eac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b67ec08ceed9e120a93fe1fea50d77dc8969eac"}], "stats": {"total": 51, "additions": 33, "deletions": 18}, "files": [{"sha": "5b096066833e891e7e3cc02e271e4c221fd33872", "filename": "gcc/caller-save.c", "status": "modified", "additions": 33, "deletions": 18, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e6362d98458b52d39b83445276245acc4bd5c21/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e6362d98458b52d39b83445276245acc4bd5c21/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=0e6362d98458b52d39b83445276245acc4bd5c21", "patch": "@@ -424,32 +424,55 @@ save_call_clobbered_regs (insn_mode)\n \t\t live, call-used, not fixed, and not already saved.  We must\n \t\t test at this point because registers that die in a CALL_INSN\n \t\t are not live across the call and likewise for registers that\n-\t\t are born in the CALL_INSN.  */\n+\t\t are born in the CALL_INSN.\n+\t\t \n+\t\t If registers are filled with parameters for this function,\n+\t\t and some of these are also being set by this function, then\n+\t\t they will not appear to die (no REG_DEAD note for them),\n+\t\t to check if in fact they do, collect the set registers in\n+\t\t hard_regs_live first.  */\n \n \t      if (code == CALL_INSN)\n \t\t{\n+\t\t  HARD_REG_SET this_call_sets;\n+\t\t  {\n+\t\t    HARD_REG_SET old_hard_regs_live;\n+\n+\t\t    /* Save the hard_regs_live information.  */\n+\t\t    COPY_HARD_REG_SET (old_hard_regs_live, hard_regs_live);\n+\n+\t\t    /* Now calculate hard_regs_live for this CALL_INSN\n+\t\t       only.  */\n+\t\t    CLEAR_HARD_REG_SET (hard_regs_live);\n+\t\t    note_stores (PATTERN (insn), set_reg_live);\n+\t\t    COPY_HARD_REG_SET (this_call_sets, hard_regs_live);\n+\n+\t\t    /* Restore the hard_regs_live information.  */\n+\t\t    COPY_HARD_REG_SET (hard_regs_live, old_hard_regs_live);\n+\t\t  }\n+\n \t\t  for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n \t\t    if (call_used_regs[regno] && ! call_fixed_regs[regno]\n \t\t        && TEST_HARD_REG_BIT (hard_regs_live, regno)\n+\t\t\t/* It must not be set by this instruction.  */\n+\t\t        && ! TEST_HARD_REG_BIT (this_call_sets, regno)\n \t\t        && ! TEST_HARD_REG_BIT (hard_regs_saved, regno))\n \t\t      regno += insert_save_restore (insn, 1, regno, \n \t\t\t\t\t\t    insn_mode, 0);\n-#ifdef HARD_REG_SET\n-\t\t  hard_regs_need_restore = hard_regs_saved;\n-#else\n-\t\t  COPY_HARD_REG_SET (hard_regs_need_restore,\n-\t\t\t\t     hard_regs_saved);\n-#endif\n+\n+\t\t  /* Put the information for this CALL_INSN on top of what\n+\t\t     we already had.  */\n+\t\t  IOR_HARD_REG_SET (hard_regs_live, this_call_sets);\n+\t\t  COPY_HARD_REG_SET (hard_regs_need_restore, hard_regs_saved);\n \n \t\t  /* Must recompute n_regs_saved.  */\n \t\t  n_regs_saved = 0;\n \t\t  for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n \t\t    if (TEST_HARD_REG_BIT (hard_regs_saved, regno))\n \t\t      n_regs_saved++;\n-\t\t  \n \t\t}\n-\t      \n-\t      note_stores (PATTERN (insn), set_reg_live);\n+\t      else\n+\t\tnote_stores (PATTERN (insn), set_reg_live);\n \n \t      for (link = REG_NOTES (insn); link; link = XEXP (link, 1))\n \t\tif (REG_NOTE_KIND (link) == REG_UNUSED)\n@@ -633,14 +656,6 @@ insert_save_restore (insn, save_p, regno, insn_mode, maxrestore)\n   if (regno_save_mem[regno][1] == 0)\n     abort ();\n \n-  /* If INSN is a CALL_INSN, we must insert our insns before any\n-     USE insns in front of the CALL_INSN.  */\n-\n-  if (GET_CODE (insn) == CALL_INSN)\n-    while (GET_CODE (PREV_INSN (insn)) == INSN\n-\t   && GET_CODE (PATTERN (PREV_INSN (insn))) == USE)\n-      insn = PREV_INSN (insn);\n-\n #ifdef HAVE_cc0\n   /* If INSN references CC0, put our insns in front of the insn that sets\n      CC0.  This is always safe, since the only way we could be passed an"}]}