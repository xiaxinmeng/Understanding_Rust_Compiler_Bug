{"sha": "e2b3410665b598de5b489d1a8aee6ee49b081714", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJiMzQxMDY2NWI1OThkZTViNDg5ZDFhOGFlZTZlZTQ5YjA4MTcxNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-09-19T20:27:11Z"}, "committer": {"name": "Andreas Tobler", "email": "andreast@gcc.gnu.org", "date": "2008-09-19T20:27:11Z"}, "message": "proc.c: New file.\n\n2008-09-19  Jakub Jelinek  <jakub@redhat.com>\n\t    Andreas Tobler  <a.tobler@schweiz.org>\n\n\t* config/bsd/proc.c: New file.\n\t* configure.tgt (*-*-darwin*): Use config_path \"darwin posix\".\n\t* configure.ac: Check for header <sys/sysctl.h>\n\t* configure: Regenerate.\n\t* config.h.in: Likewise.\n\nCo-Authored-By: Andreas Tobler <a.tobler@schweiz.org>\n\nFrom-SVN: r140497", "tree": {"sha": "2bbc3bd7ed9e5c0e7c24b786dc3adfb5eaef9818", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bbc3bd7ed9e5c0e7c24b786dc3adfb5eaef9818"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2b3410665b598de5b489d1a8aee6ee49b081714", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2b3410665b598de5b489d1a8aee6ee49b081714", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2b3410665b598de5b489d1a8aee6ee49b081714", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2b3410665b598de5b489d1a8aee6ee49b081714/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "60ffe2fe5ea6a3193e8605e571633424a490f0b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60ffe2fe5ea6a3193e8605e571633424a490f0b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60ffe2fe5ea6a3193e8605e571633424a490f0b9"}], "stats": {"total": 135, "additions": 133, "deletions": 2}, "files": [{"sha": "7403947cc70c4af37af714e0a90945c2087e2305", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2b3410665b598de5b489d1a8aee6ee49b081714/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2b3410665b598de5b489d1a8aee6ee49b081714/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=e2b3410665b598de5b489d1a8aee6ee49b081714", "patch": "@@ -1,3 +1,12 @@\n+2008-09-19  Jakub Jelinek  <jakub@redhat.com>\n+\t    Andreas Tobler  <a.tobler@schweiz.org>\n+\n+\t* config/bsd/proc.c: New file.\n+\t* configure.tgt (*-*-darwin*): Use config_path \"darwin posix\".\n+\t* configure.ac: Check for header <sys/sysctl.h>\n+\t* configure: Regenerate.\n+\t* config.h.in: Likewise.\n+\n 2008-09-05  Janis Johnson  <janis187@us.ibm.com>\n \n \t* testsuite/ligbomp.c/c.exp: Unset lang_test_file only if it exists."}, {"sha": "513d8df39108a577c150d92e9c90e46346006310", "filename": "libgomp/config/bsd/proc.c", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2b3410665b598de5b489d1a8aee6ee49b081714/libgomp%2Fconfig%2Fbsd%2Fproc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2b3410665b598de5b489d1a8aee6ee49b081714/libgomp%2Fconfig%2Fbsd%2Fproc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Fbsd%2Fproc.c?ref=e2b3410665b598de5b489d1a8aee6ee49b081714", "patch": "@@ -0,0 +1,117 @@\n+/* Copyright (C) 2005, 2006, 2008 Free Software Foundation, Inc.\n+   Contributed by Richard Henderson <rth@redhat.com>.\n+\n+   This file is part of the GNU OpenMP Library (libgomp).\n+\n+   Libgomp is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU Lesser General Public License as published by\n+   the Free Software Foundation; either version 2.1 of the License, or\n+   (at your option) any later version.\n+\n+   Libgomp is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+   FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for\n+   more details.\n+\n+   You should have received a copy of the GNU Lesser General Public License\n+   along with libgomp; see the file COPYING.LIB.  If not, write to the\n+   Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,\n+   MA 02110-1301, USA.  */\n+\n+/* As a special exception, if you link this library with other files, some\n+   of which are compiled with GCC, to produce an executable, this library\n+   does not by itself cause the resulting executable to be covered by the\n+   GNU General Public License.  This exception does not however invalidate\n+   any other reasons why the executable file might be covered by the GNU\n+   General Public License.  */\n+\n+/* This file contains system specific routines related to counting\n+   online processors and dynamic load balancing.  It is expected that\n+   a system may well want to write special versions of each of these.\n+\n+   The following implementation uses a mix of POSIX and BSD routines.  */\n+\n+#include \"libgomp.h\"\n+#include <unistd.h>\n+#include <stdlib.h>\n+#ifdef HAVE_GETLOADAVG\n+# ifdef HAVE_SYS_LOADAVG_H\n+#  include <sys/loadavg.h>\n+# endif\n+#endif\n+#ifdef HAVE_SYS_SYSCTL_H\n+# include <sys/sysctl.h>\n+#endif\n+\n+static int\n+get_num_procs (void)\n+{\n+#ifdef _SC_NPROCESSORS_ONLN\n+  return sysconf (_SC_NPROCESSORS_ONLN);\n+#elif defined HW_NCPU\n+  int ncpus = 1;\n+  size_t len = sizeof(ncpus);\n+  sysctl((int[2]) {CTL_HW, HW_NCPU}, 2, &ncpus, &len, NULL, 0);\n+  return ncpus;\n+#else\n+  return 0;\n+#endif\n+}\n+\n+/* At startup, determine the default number of threads.  It would seem\n+   this should be related to the number of cpus online.  */\n+\n+void\n+gomp_init_num_threads (void)\n+{\n+  int ncpus = get_num_procs ();\n+\n+  if (ncpus > 0)\n+    gomp_global_icv.nthreads_var = ncpus;\n+}\n+\n+/* When OMP_DYNAMIC is set, at thread launch determine the number of\n+   threads we should spawn for this team.  */\n+/* ??? I have no idea what best practice for this is.  Surely some\n+   function of the number of processors that are *still* online and\n+   the load average.  Here I use the number of processors online\n+   minus the 15 minute load average.  */\n+\n+unsigned\n+gomp_dynamic_max_threads (void)\n+{\n+  unsigned n_onln, loadavg;\n+  unsigned nthreads_var = gomp_icv (false)->nthreads_var;\n+\n+  n_onln = get_num_procs ();\n+  if (!n_onln || n_onln > nthreads_var)\n+    n_onln = nthreads_var;\n+\n+  loadavg = 0;\n+#ifdef HAVE_GETLOADAVG\n+  {\n+    double dloadavg[3];\n+    if (getloadavg (dloadavg, 3) == 3)\n+      {\n+\t/* Add 0.1 to get a kind of biased rounding.  */\n+\tloadavg = dloadavg[2] + 0.1;\n+      }\n+  }\n+#endif\n+\n+  if (loadavg >= n_onln)\n+    return 1;\n+  else\n+    return n_onln - loadavg;\n+}\n+\n+int\n+omp_get_num_procs (void)\n+{\n+  int ncpus = get_num_procs ();\n+  if (ncpus <= 0)\n+    ncpus = gomp_icv (false)->nthreads_var;\n+  return ncpus;\n+}\n+\n+ialias (omp_get_num_procs)"}, {"sha": "a9f7df510f0cd43d1e3e5cfa7d469af292088bd6", "filename": "libgomp/configure", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2b3410665b598de5b489d1a8aee6ee49b081714/libgomp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2b3410665b598de5b489d1a8aee6ee49b081714/libgomp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure?ref=e2b3410665b598de5b489d1a8aee6ee49b081714", "patch": "@@ -13540,7 +13540,8 @@ fi\n \n \n \n-for ac_header in unistd.h semaphore.h sys/loadavg.h sys/time.h\n+\n+for ac_header in unistd.h semaphore.h sys/loadavg.h sys/time.h sys/time.h\n do\n as_ac_Header=`echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\n if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then"}, {"sha": "db8e2811a3047afedc9dab62b3487f3fc98b2953", "filename": "libgomp/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2b3410665b598de5b489d1a8aee6ee49b081714/libgomp%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2b3410665b598de5b489d1a8aee6ee49b081714/libgomp%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure.ac?ref=e2b3410665b598de5b489d1a8aee6ee49b081714", "patch": "@@ -154,7 +154,7 @@ AC_SUBST(libtool_VERSION)\n AC_STDC_HEADERS\n AC_HEADER_TIME\n ACX_HEADER_STRING\n-AC_CHECK_HEADERS(unistd.h semaphore.h sys/loadavg.h sys/time.h)\n+AC_CHECK_HEADERS(unistd.h semaphore.h sys/loadavg.h sys/time.h sys/time.h)\n \n GCC_HEADER_STDINT(gstdint.h)\n "}, {"sha": "d66899fbf5f12795670c374823463dc420d505a8", "filename": "libgomp/configure.tgt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2b3410665b598de5b489d1a8aee6ee49b081714/libgomp%2Fconfigure.tgt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2b3410665b598de5b489d1a8aee6ee49b081714/libgomp%2Fconfigure.tgt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure.tgt?ref=e2b3410665b598de5b489d1a8aee6ee49b081714", "patch": "@@ -111,6 +111,10 @@ case \"${target}\" in\n \tXLDFLAGS=\"${XLDFLAGS} -lposix4\"\n \t;;\n \n+  *-*-darwin*)\n+\tconfig_path=\"bsd posix\"\n+\t;;\n+\n   *)\n \t;;\n "}]}