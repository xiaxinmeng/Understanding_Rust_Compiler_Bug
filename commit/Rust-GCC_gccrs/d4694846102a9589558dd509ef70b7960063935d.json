{"sha": "d4694846102a9589558dd509ef70b7960063935d", "node_id": "C_kwDOANBUbNoAKGQ0Njk0ODQ2MTAyYTk1ODk1NThkZDUwOWVmNzBiNzk2MDA2MzkzNWQ", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-10T07:47:06Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-10T09:40:50Z"}, "message": "Properly use opts in finish_options\n\nWhen code was moved from process_options to finish_options it\nwas not properly adjusted to look at and alter the opts set\npassed to the function but continued to modify the global options\nset.  The following rectifies this and makes sure the same\nmistake isn't repeated by poisoning global_options{,_set}.\n\n2022-05-10  Richard Biener  <rguenther@suse.de>\n\n\t* flags.h (dwarf_debuginfo_p): Add opts argument, guard\n\tAPI with !GENERATOR_FILE.\n\t* opts.cc (global_options): Poison.\n\t(global_options_set): Likewise.\n\t(finish_options): Refer to options via opts.", "tree": {"sha": "0391f149be47e79a1216fafac117599bb06ba6ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0391f149be47e79a1216fafac117599bb06ba6ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4694846102a9589558dd509ef70b7960063935d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4694846102a9589558dd509ef70b7960063935d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4694846102a9589558dd509ef70b7960063935d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4694846102a9589558dd509ef70b7960063935d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b7a9751f55bcdb7d9a69345e02f62aaa7035d6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b7a9751f55bcdb7d9a69345e02f62aaa7035d6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b7a9751f55bcdb7d9a69345e02f62aaa7035d6b"}], "stats": {"total": 71, "additions": 41, "deletions": 30}, "files": [{"sha": "212e357a0fd24bbb9d2220a7eac17e93f0a7ed5e", "filename": "gcc/flags.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4694846102a9589558dd509ef70b7960063935d/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4694846102a9589558dd509ef70b7960063935d/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=d4694846102a9589558dd509ef70b7960063935d", "patch": "@@ -40,6 +40,7 @@ unsigned int debug_set_count (uint32_t w_symbols);\n \n const char * debug_set_names (uint32_t w_symbols);\n \n+#ifndef GENERATOR_FILE\n /* Return true iff BTF debug info is enabled.  */\n \n extern bool btf_debuginfo_p ();\n@@ -54,12 +55,13 @@ extern bool ctf_debuginfo_p ();\n \n /* Return true iff DWARF2 debug info is enabled.  */\n \n-extern bool dwarf_debuginfo_p ();\n+extern bool dwarf_debuginfo_p (struct gcc_options *opts = &global_options);\n \n /* Return true iff the debug info format is to be generated based on DWARF\n    DIEs (like CTF and BTF debug info formats).  */\n \n extern bool dwarf_based_debuginfo_p ();\n+#endif\n \n extern void strip_off_ending (char *, int);\n extern int base_of_path (const char *path, const char **base_out);"}, {"sha": "a0baec98092b7c95f559dc1effe7e854d2d46df9", "filename": "gcc/opts.cc", "status": "modified", "additions": 38, "deletions": 29, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4694846102a9589558dd509ef70b7960063935d/gcc%2Fopts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4694846102a9589558dd509ef70b7960063935d/gcc%2Fopts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.cc?ref=d4694846102a9589558dd509ef70b7960063935d", "patch": "@@ -157,9 +157,9 @@ ctf_debuginfo_p ()\n /* Return TRUE iff dwarf2 debug info is enabled.  */\n \n bool\n-dwarf_debuginfo_p ()\n+dwarf_debuginfo_p (struct gcc_options *opts)\n {\n-  return (write_symbols & DWARF2_DEBUG);\n+  return (opts->x_write_symbols & DWARF2_DEBUG);\n }\n \n /* Return true iff the debug info format is to be generated based on DWARF\n@@ -171,6 +171,11 @@ bool dwarf_based_debuginfo_p ()\n \t  || (write_symbols & BTF_DEBUG));\n }\n \n+/* All flag uses below need to explicitely reference the option sets\n+   to operate on.  */\n+#define global_options DO_NOT_USE\n+#define global_options_set DO_NOT_USE\n+\n /* Parse the -femit-struct-debug-detailed option value\n    and set the flag variables. */\n \n@@ -1305,57 +1310,61 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set,\n     SET_OPTION_IF_UNSET (opts, opts_set, flag_vect_cost_model,\n \t\t\t VECT_COST_MODEL_CHEAP);\n \n-  if (flag_gtoggle)\n+  if (opts->x_flag_gtoggle)\n     {\n       /* Make sure to process -gtoggle only once.  */\n-      flag_gtoggle = false;\n-      if (debug_info_level == DINFO_LEVEL_NONE)\n+      opts->x_flag_gtoggle = false;\n+      if (opts->x_debug_info_level == DINFO_LEVEL_NONE)\n \t{\n-\t  debug_info_level = DINFO_LEVEL_NORMAL;\n+\t  opts->x_debug_info_level = DINFO_LEVEL_NORMAL;\n \n-\t  if (write_symbols == NO_DEBUG)\n-\t    write_symbols = PREFERRED_DEBUGGING_TYPE;\n+\t  if (opts->x_write_symbols == NO_DEBUG)\n+\t    opts->x_write_symbols = PREFERRED_DEBUGGING_TYPE;\n \t}\n       else\n-\tdebug_info_level = DINFO_LEVEL_NONE;\n+\topts->x_debug_info_level = DINFO_LEVEL_NONE;\n     }\n \n   if (!opts_set->x_debug_nonbind_markers_p)\n-    debug_nonbind_markers_p\n-      = (optimize\n-\t && debug_info_level >= DINFO_LEVEL_NORMAL\n-\t && dwarf_debuginfo_p ()\n-\t && !(flag_selective_scheduling || flag_selective_scheduling2));\n+    opts->x_debug_nonbind_markers_p\n+      = (opts->x_optimize\n+\t && opts->x_debug_info_level >= DINFO_LEVEL_NORMAL\n+\t && dwarf_debuginfo_p (opts)\n+\t && !(opts->x_flag_selective_scheduling\n+\t      || opts->x_flag_selective_scheduling2));\n \n   /* Note -fvar-tracking is enabled automatically with OPT_LEVELS_1_PLUS and\n      so we need to drop it if we are called from optimize attribute.  */\n-  if (debug_info_level < DINFO_LEVEL_NORMAL)\n-    flag_var_tracking = false;\n+  if (opts->x_debug_info_level < DINFO_LEVEL_NORMAL)\n+    opts->x_flag_var_tracking = false;\n \n   /* One could use EnabledBy, but it would lead to a circular dependency.  */\n   if (!opts_set->x_flag_var_tracking_uninit)\n-     flag_var_tracking_uninit = flag_var_tracking;\n+    opts->x_flag_var_tracking_uninit = opts->x_flag_var_tracking;\n \n   if (!opts_set->x_flag_var_tracking_assignments)\n-    flag_var_tracking_assignments\n-      = (flag_var_tracking\n-\t && !(flag_selective_scheduling || flag_selective_scheduling2));\n+    opts->x_flag_var_tracking_assignments\n+      = (opts->x_flag_var_tracking\n+\t && !(opts->x_flag_selective_scheduling\n+\t      || opts->x_flag_selective_scheduling2));\n \n-  if (flag_var_tracking_assignments_toggle)\n-    flag_var_tracking_assignments = !flag_var_tracking_assignments;\n+  if (opts->x_flag_var_tracking_assignments_toggle)\n+    opts->x_flag_var_tracking_assignments\n+      = !opts->x_flag_var_tracking_assignments;\n \n-  if (flag_var_tracking_assignments && !flag_var_tracking)\n-    flag_var_tracking = flag_var_tracking_assignments = -1;\n+  if (opts->x_flag_var_tracking_assignments && !opts->x_flag_var_tracking)\n+    opts->x_flag_var_tracking = opts->x_flag_var_tracking_assignments = -1;\n \n-  if (flag_var_tracking_assignments\n-      && (flag_selective_scheduling || flag_selective_scheduling2))\n+  if (opts->x_flag_var_tracking_assignments\n+      && (opts->x_flag_selective_scheduling\n+\t  || opts->x_flag_selective_scheduling2))\n     warning_at (loc, 0,\n \t\t\"var-tracking-assignments changes selective scheduling\");\n \n-  if (flag_syntax_only)\n+  if (opts->x_flag_syntax_only)\n     {\n-      write_symbols = NO_DEBUG;\n-      profile_flag = 0;\n+      opts->x_write_symbols = NO_DEBUG;\n+      opts->x_profile_flag = 0;\n     }\n \n "}]}