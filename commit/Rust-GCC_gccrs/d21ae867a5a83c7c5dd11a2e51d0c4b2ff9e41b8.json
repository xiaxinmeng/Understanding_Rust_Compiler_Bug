{"sha": "d21ae867a5a83c7c5dd11a2e51d0c4b2ff9e41b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDIxYWU4NjdhNWE4M2M3YzVkZDExYTJlNTFkMGM0YjJmZjllNDFiOA==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2019-08-20T09:49:12Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-20T09:49:12Z"}, "message": "[Ada] Warn on Unchecked_Conversion to zero-sized array\n\nThe compiler usually warns on Unchecked_Conversion between types with\nmismatched sizes. This warning is now extended to the case where the\ntarget type is a zero-sized array.\n\n2019-08-20  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch13.adb (Is_Null_Array): New function, used to detect the\n\tnull array case; used to warn about uncheckedly converting to a\n\tzero-sized array.  It is unfortunate that we can't just check\n\tthe size, and warn on all cases of converting from a\n\tnonzero-sized type to a zero-sized one. That's because \"0\" means\n\ttwo different things: \"size is zero\" and \"size is unknown\".\n\tUntil we fix that design flaw, we need this more targeted fix.\n\ngcc/testsuite/\n\n\t* gnat.dg/unchecked_convert14.adb: New testcase.\n\nFrom-SVN: r274725", "tree": {"sha": "5b8faed21ae8afa0d01919098dd50a21ea2cb429", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b8faed21ae8afa0d01919098dd50a21ea2cb429"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d21ae867a5a83c7c5dd11a2e51d0c4b2ff9e41b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d21ae867a5a83c7c5dd11a2e51d0c4b2ff9e41b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d21ae867a5a83c7c5dd11a2e51d0c4b2ff9e41b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d21ae867a5a83c7c5dd11a2e51d0c4b2ff9e41b8/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cbdb0df117deb12a8e7d63e1cf2b53415b8e92e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbdb0df117deb12a8e7d63e1cf2b53415b8e92e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbdb0df117deb12a8e7d63e1cf2b53415b8e92e2"}], "stats": {"total": 109, "additions": 93, "deletions": 16}, "files": [{"sha": "8ab2eddd64643dff7a369f00c46ee6fc83a18960", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21ae867a5a83c7c5dd11a2e51d0c4b2ff9e41b8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21ae867a5a83c7c5dd11a2e51d0c4b2ff9e41b8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d21ae867a5a83c7c5dd11a2e51d0c4b2ff9e41b8", "patch": "@@ -1,3 +1,13 @@\n+2019-08-20  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch13.adb (Is_Null_Array): New function, used to detect the\n+\tnull array case; used to warn about uncheckedly converting to a\n+\tzero-sized array.  It is unfortunate that we can't just check\n+\tthe size, and warn on all cases of converting from a\n+\tnonzero-sized type to a zero-sized one. That's because \"0\" means\n+\ttwo different things: \"size is zero\" and \"size is unknown\".\n+\tUntil we fix that design flaw, we need this more targeted fix.\n+\n 2019-08-20  Bob Duff  <duff@adacore.com>\n \n \t* libgnat/a-cborma.adb, libgnat/a-cborse.adb (Clear): Repeatedly"}, {"sha": "2538c1da982fad8e49dae4680a9283a315a42830", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 49, "deletions": 16, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21ae867a5a83c7c5dd11a2e51d0c4b2ff9e41b8/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21ae867a5a83c7c5dd11a2e51d0c4b2ff9e41b8/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=d21ae867a5a83c7c5dd11a2e51d0c4b2ff9e41b8", "patch": "@@ -14625,6 +14625,39 @@ package body Sem_Ch13 is\n    ------------------------------------\n \n    procedure Validate_Unchecked_Conversions is\n+      function Is_Null_Array (T : Entity_Id) return Boolean;\n+      --  We want to warn in the case of converting to a wrong-sized array of\n+      --  bytes, including the zero-size case. This returns True in that case,\n+      --  which is necessary because a size of 0 is used to indicate both an\n+      --  unknown size and a size of 0. It's OK for this to return True in\n+      --  other zero-size cases, but we don't go out of our way; for example,\n+      --  we don't bother with multidimensional arrays.\n+\n+      function Is_Null_Array (T : Entity_Id) return Boolean is\n+      begin\n+         if Is_Array_Type (T) and then Is_Constrained (T) then\n+            declare\n+               Index : constant Node_Id := First_Index (T);\n+               R : Node_Id; -- N_Range\n+            begin\n+               case Nkind (Index) is\n+                  when N_Range =>\n+                     R := Index;\n+                  when N_Subtype_Indication =>\n+                     R := Range_Expression (Constraint (Index));\n+                  when N_Identifier | N_Expanded_Name =>\n+                     R := Scalar_Range (Entity (Index));\n+                  when others =>\n+                     raise Program_Error;\n+               end case;\n+\n+               return Is_Null_Range (Low_Bound (R), High_Bound (R));\n+            end;\n+         end if;\n+\n+         return False;\n+      end Is_Null_Array;\n+\n    begin\n       for N in Unchecked_Conversions.First .. Unchecked_Conversions.Last loop\n          declare\n@@ -14641,28 +14674,28 @@ package body Sem_Ch13 is\n          begin\n             --  Skip if function marked as warnings off\n \n-            if Warnings_Off (Act_Unit) then\n+            if Warnings_Off (Act_Unit) or else Serious_Errors_Detected > 0 then\n                goto Continue;\n             end if;\n \n-            --  This validation check, which warns if we have unequal sizes for\n-            --  unchecked conversion, and thus potentially implementation\n-            --  dependent semantics, is one of the few occasions on which we\n-            --  use the official RM size instead of Esize. See description in\n-            --  Einfo \"Handling of Type'Size Values\" for details.\n-\n-            if Serious_Errors_Detected = 0\n-              and then Known_Static_RM_Size (Source)\n-              and then Known_Static_RM_Size (Target)\n+           --  Don't do the check if warnings off for either type, note the\n+           --  deliberate use of OR here instead of OR ELSE to get the flag\n+           --  Warnings_Off_Used set for both types if appropriate.\n \n-              --  Don't do the check if warnings off for either type, note the\n-              --  deliberate use of OR here instead of OR ELSE to get the flag\n-              --  Warnings_Off_Used set for both types if appropriate.\n+            if Has_Warnings_Off (Source) or Has_Warnings_Off (Target) then\n+               goto Continue;\n+            end if;\n \n-              and then not (Has_Warnings_Off (Source)\n-                              or\n-                            Has_Warnings_Off (Target))\n+            if (Known_Static_RM_Size (Source)\n+                  and then Known_Static_RM_Size (Target))\n+              or else Is_Null_Array (Target)\n             then\n+               --  This validation check, which warns if we have unequal sizes\n+               --  for unchecked conversion, and thus implementation dependent\n+               --  semantics, is one of the few occasions on which we use the\n+               --  official RM size instead of Esize. See description in Einfo\n+               --  \"Handling of Type'Size Values\" for details.\n+\n                Source_Siz := RM_Size (Source);\n                Target_Siz := RM_Size (Target);\n "}, {"sha": "61e37dad25ba8b680d861dc6e8330e9a8fa74d8d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21ae867a5a83c7c5dd11a2e51d0c4b2ff9e41b8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21ae867a5a83c7c5dd11a2e51d0c4b2ff9e41b8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d21ae867a5a83c7c5dd11a2e51d0c4b2ff9e41b8", "patch": "@@ -1,3 +1,7 @@\n+2019-08-20  Bob Duff  <duff@adacore.com>\n+\n+\t* gnat.dg/unchecked_convert14.adb: New testcase.\n+\n 2019-08-20  Bob Duff  <duff@adacore.com>\n \n \t* gnat.dg/object_size1.adb: New testcase."}, {"sha": "756d8366d787c048a39a2c93b116427a43cb366b", "filename": "gcc/testsuite/gnat.dg/unchecked_convert14.adb", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21ae867a5a83c7c5dd11a2e51d0c4b2ff9e41b8/gcc%2Ftestsuite%2Fgnat.dg%2Funchecked_convert14.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21ae867a5a83c7c5dd11a2e51d0c4b2ff9e41b8/gcc%2Ftestsuite%2Fgnat.dg%2Funchecked_convert14.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Funchecked_convert14.adb?ref=d21ae867a5a83c7c5dd11a2e51d0c4b2ff9e41b8", "patch": "@@ -0,0 +1,30 @@\n+--  { dg-do compile }\n+\n+with Ada.Unchecked_Conversion;\n+with System.Storage_Elements; use System.Storage_Elements;\n+\n+procedure Unchecked_Convert14 is\n+\n+    type R is record\n+       I : Integer;\n+       C : Character;\n+    end record;\n+\n+    subtype Buffer is Storage_Array (1 .. 0);\n+\n+    function As_Buffer is new Ada.Unchecked_Conversion  --  { dg-warning \"types for unchecked conversion have different sizes\" }\n+      (Source => R, Target => Buffer);\n+\n+    type Buffer_1 is array (Storage_Offset range 1 .. 1) of Storage_Element;\n+\n+    function As_Buffer_1 is new Ada.Unchecked_Conversion  --  { dg-warning \"types for unchecked conversion have different sizes\" }\n+      (Source => R, Target => Buffer_1);\n+\n+    B : Buffer;\n+    B_1 : Buffer_1;\n+    My_R : R := (1, 'x');\n+\n+begin\n+   B := As_Buffer (My_R);\n+   B_1 := As_Buffer_1 (My_R);\n+end Unchecked_Convert14;"}]}