{"sha": "324e93f12ecb6577e789bb6f0ab5abc95fcdb0cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI0ZTkzZjEyZWNiNjU3N2U3ODliYjZmMGFiNWFiYzk1ZmNkYjBjYw==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2012-11-11T19:35:27Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2012-11-11T19:35:27Z"}, "message": "re PR tree-optimization/55238 (ICE in find_aggregate_values_for_callers_subset, at ipa-cp.c:2908 building zlib)\n\n\tPR tree-optimization/55238\n\t* ipa-cp.c (agg_pass_through_permissible_p): New function.\n\t(propagate_aggs_accross_jump_function): Use it.\n\t(find_aggregate_values_for_callers_subset): Likewise and relax an\n\tassert.\n\n\t* testsuite/gcc.dg/torture/pr55238.c: New test.\n\nFrom-SVN: r193410", "tree": {"sha": "d3c3d92c626c4d6c6991b65bf3eb6d345c5c5c85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3c3d92c626c4d6c6991b65bf3eb6d345c5c5c85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/324e93f12ecb6577e789bb6f0ab5abc95fcdb0cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/324e93f12ecb6577e789bb6f0ab5abc95fcdb0cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/324e93f12ecb6577e789bb6f0ab5abc95fcdb0cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/324e93f12ecb6577e789bb6f0ab5abc95fcdb0cc/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ebbcbc2ed315384e2689ffcaf6141febb9e01765", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebbcbc2ed315384e2689ffcaf6141febb9e01765", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebbcbc2ed315384e2689ffcaf6141febb9e01765"}], "stats": {"total": 111, "additions": 94, "deletions": 17}, "files": [{"sha": "3e9c01749638cdda9e71b5698685930d132b3d85", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324e93f12ecb6577e789bb6f0ab5abc95fcdb0cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324e93f12ecb6577e789bb6f0ab5abc95fcdb0cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=324e93f12ecb6577e789bb6f0ab5abc95fcdb0cc", "patch": "@@ -1,3 +1,11 @@\n+2012-11-11  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/55238\n+\t* ipa-cp.c (agg_pass_through_permissible_p): New function.\n+\t(propagate_aggs_accross_jump_function): Use it.\n+\t(find_aggregate_values_for_callers_subset): Likewise and relax an\n+\tassert.\n+\n 2012-11-10  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/47440"}, {"sha": "85d549aad89fd1e3ce73246fb3f086e482b8ba64", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 37, "deletions": 16, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324e93f12ecb6577e789bb6f0ab5abc95fcdb0cc/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324e93f12ecb6577e789bb6f0ab5abc95fcdb0cc/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=324e93f12ecb6577e789bb6f0ab5abc95fcdb0cc", "patch": "@@ -1312,6 +1312,19 @@ merge_aggregate_lattices (struct cgraph_edge *cs,\n   return ret;\n }\n \n+/* Determine whether there is anything to propagate FROM SRC_PLATS through a\n+   pass-through JFUNC and if so, whether it has conform and conforms to the\n+   rules about propagating values passed by reference.  */\n+\n+static bool\n+agg_pass_through_permissible_p (struct ipcp_param_lattices *src_plats,\n+\t\t\t\tstruct ipa_jump_func *jfunc)\n+{\n+  return src_plats->aggs\n+    && (!src_plats->aggs_by_ref\n+\t|| ipa_get_jf_pass_through_agg_preserved (jfunc));\n+}\n+\n /* Propagate scalar values across jump function JFUNC that is associated with\n    edge CS and put the values into DEST_LAT.  */\n \n@@ -1333,9 +1346,7 @@ propagate_aggs_accross_jump_function (struct cgraph_edge *cs,\n       struct ipcp_param_lattices *src_plats;\n \n       src_plats = ipa_get_parm_lattices (caller_info, src_idx);\n-      if (src_plats->aggs\n-\t  && (!src_plats->aggs_by_ref\n-\t      || ipa_get_jf_pass_through_agg_preserved (jfunc)))\n+      if (agg_pass_through_permissible_p (src_plats, jfunc))\n \t{\n \t  /* Currently we do not produce clobber aggregate jump\n \t     functions, replace with merging when we do.  */\n@@ -2893,23 +2904,33 @@ find_aggregate_values_for_callers_subset (struct cgraph_node *node,\n \n \t      if (caller_info->ipcp_orig_node)\n \t\t{\n-\t\t  if (!inter)\n-\t\t    inter = agg_replacements_to_vector (cs->caller, 0);\n-\t\t  else\n-\t\t    intersect_with_agg_replacements (cs->caller, src_idx,\n-\t\t\t\t\t\t     &inter, 0);\n+\t\t  struct cgraph_node *orig_node = caller_info->ipcp_orig_node;\n+\t\t  struct ipcp_param_lattices *orig_plats;\n+\t\t  orig_plats = ipa_get_parm_lattices (IPA_NODE_REF (orig_node),\n+\t\t\t\t\t\t      src_idx);\n+\t\t  if (agg_pass_through_permissible_p (orig_plats, jfunc))\n+\t\t    {\n+\t\t      if (!inter)\n+\t\t\tinter = agg_replacements_to_vector (cs->caller, 0);\n+\t\t      else\n+\t\t\tintersect_with_agg_replacements (cs->caller, src_idx,\n+\t\t\t\t\t\t\t &inter, 0);\n+\t\t    }\n \t\t}\n \t      else\n \t\t{\n \t\t  struct ipcp_param_lattices *src_plats;\n \t\t  src_plats = ipa_get_parm_lattices (caller_info, src_idx);\n-\t\t  /* Currently we do not produce clobber aggregate jump\n-\t\t     functions, adjust when we do.  */\n-\t\t  gcc_checking_assert (!jfunc->agg.items);\n-\t\t  if (!inter)\n-\t\t    inter = copy_plats_to_inter (src_plats, 0);\n-\t\t  else\n-\t\t    intersect_with_plats (src_plats, &inter, 0);\n+\t\t  if (agg_pass_through_permissible_p (src_plats, jfunc))\n+\t\t    {\n+\t\t      /* Currently we do not produce clobber aggregate jump\n+\t\t\t functions, adjust when we do.  */\n+\t\t      gcc_checking_assert (!jfunc->agg.items);\n+\t\t      if (!inter)\n+\t\t\tinter = copy_plats_to_inter (src_plats, 0);\n+\t\t      else\n+\t\t\tintersect_with_plats (src_plats, &inter, 0);\n+\t\t    }\n \t\t}\n \t    }\n \t  else if (jfunc->type == IPA_JF_ANCESTOR\n@@ -2933,7 +2954,7 @@ find_aggregate_values_for_callers_subset (struct cgraph_node *node,\n \t\t  src_plats = ipa_get_parm_lattices (caller_info, src_idx);;\n \t\t  /* Currently we do not produce clobber aggregate jump\n \t\t     functions, adjust when we do.  */\n-\t\t  gcc_checking_assert (!jfunc->agg.items);\n+\t\t  gcc_checking_assert (!src_plats->aggs || !jfunc->agg.items);\n \t\t  if (!inter)\n \t\t    inter = copy_plats_to_inter (src_plats, delta);\n \t\t  else"}, {"sha": "d1d33896cd7947cf3d3c8fb7ba909f0c6ed8313a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324e93f12ecb6577e789bb6f0ab5abc95fcdb0cc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324e93f12ecb6577e789bb6f0ab5abc95fcdb0cc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=324e93f12ecb6577e789bb6f0ab5abc95fcdb0cc", "patch": "@@ -1,5 +1,9 @@\n-2012-11-11  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+2012-11-11  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/55238\n+\t* testsuite/gcc.dg/torture/pr55238.c: New test.\n \n+2012-11-11  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \t* gcc.dg/torture/pr54920.c: Add \"-fno-common\" option on hppa*-*-hpux*.\n \t* c-c++-common/torture/vector-subscript-1.c: Likewise.\n \t* c-c++-common/torture/vector-subscript-2.c: Likewise."}, {"sha": "40aafc6619c78cfa9786f519f16892434de9a263", "filename": "gcc/testsuite/gcc.dg/torture/pr55238.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324e93f12ecb6577e789bb6f0ab5abc95fcdb0cc/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr55238.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324e93f12ecb6577e789bb6f0ab5abc95fcdb0cc/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr55238.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr55238.c?ref=324e93f12ecb6577e789bb6f0ab5abc95fcdb0cc", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile } */\n+\n+typedef void * gzFile;\n+typedef struct\n+{\n+  int mode;\n+  int direct;\n+  int seek;\n+  int err;\n+  char *msg;\n+}\n+gz_state;\n+\n+void gz_error (gz_state *state, int err, char *msg);\n+\n+static void\n+gz_reset (gz_state *state)\n+{\n+  if (state->mode == 7247)\n+    {\n+      state->direct = 1;\n+    }\n+  state->seek = 0;\n+  gz_error (state, 0, 0);\n+}\n+\n+int\n+gzbuffer (void *file, int size)\n+{\n+  gz_state *state;\n+  gz_reset (state);\n+}\n+\n+void __attribute__ ((visibility (\"hidden\"))) gz_error (gz_state *state, int err, char *msg)\n+{\n+  if (state->msg != 0)\n+    {\n+      if (state->err != -4)\n+\tfoo (state->msg);\n+    }\n+  if (msg == 0)\n+    return;\n+  bar (state->msg, msg);\n+}"}]}