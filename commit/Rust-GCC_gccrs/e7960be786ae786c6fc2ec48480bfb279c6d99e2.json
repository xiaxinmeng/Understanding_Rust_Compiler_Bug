{"sha": "e7960be786ae786c6fc2ec48480bfb279c6d99e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc5NjBiZTc4NmFlNzg2YzZmYzJlYzQ4NDgwYmZiMjc5YzZkOTllMg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2016-12-24T14:30:18Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2016-12-24T14:30:18Z"}, "message": "Make it cheaper to test whether an SSA name is a virtual operand\n\nvirtual_operand_p handled SSA names by looking at the flags of the\nunderlying variable.  This seems to be a relatively common source\nof cache misses, mainly because virtual_operand_p is the first thing\ntested by is_gimple_reg.\n\nThis patch caches the information in the SSA name itself.  Several\nflags seem to be free so the patch arbitrarily uses public_flag.\n\nTested on aarch64-linux-gnu and x86_64-linux-gnu.  It improves\ncompile time by a small (<1%) but reproducable amount on the\ntests I've tried.\n\ngcc/\n\t* tree-core.h (tree_base): Document the meaning of public_flag\n\tfor SSA names.\n\t* tree.h (SSA_NAME_IS_VIRTUAL_OPERAND): New macro.\n\t(SET_SSA_NAME_VAR_OR_IDENTIFIER): Record whether the variable\n\tis a virtual operand.\n\t* gimple-expr.h (virtual_operand_p): Use SSA_NAME_IS_VIRTUAL_OPERAND.\n\nFrom-SVN: r243916", "tree": {"sha": "c7c60297d704befab04918f7214aaabe3e997af7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7c60297d704befab04918f7214aaabe3e997af7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7960be786ae786c6fc2ec48480bfb279c6d99e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7960be786ae786c6fc2ec48480bfb279c6d99e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7960be786ae786c6fc2ec48480bfb279c6d99e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7960be786ae786c6fc2ec48480bfb279c6d99e2/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "284a35df5d759e4ed0c7e03b5354dbfafddd67df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/284a35df5d759e4ed0c7e03b5354dbfafddd67df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/284a35df5d759e4ed0c7e03b5354dbfafddd67df"}], "stats": {"total": 34, "additions": 28, "deletions": 6}, "files": [{"sha": "6947477ea53b9635a09835db1491f18477eb01a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7960be786ae786c6fc2ec48480bfb279c6d99e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7960be786ae786c6fc2ec48480bfb279c6d99e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e7960be786ae786c6fc2ec48480bfb279c6d99e2", "patch": "@@ -1,3 +1,12 @@\n+2016-12-24  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-core.h (tree_base): Document the meaning of public_flag\n+\tfor SSA names.\n+\t* tree.h (SSA_NAME_IS_VIRTUAL_OPERAND): New macro.\n+\t(SET_SSA_NAME_VAR_OR_IDENTIFIER): Record whether the variable\n+\tis a virtual operand.\n+\t* gimple-expr.h (virtual_operand_p): Use SSA_NAME_IS_VIRTUAL_OPERAND.\n+\n 2016-12-22  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \t* tree-pretty-print.c (dump_generic_node): Change dump format for"}, {"sha": "faf4c53db3020a5c241b933f75125bc88acb4fdd", "filename": "gcc/gimple-expr.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7960be786ae786c6fc2ec48480bfb279c6d99e2/gcc%2Fgimple-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7960be786ae786c6fc2ec48480bfb279c6d99e2/gcc%2Fgimple-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-expr.h?ref=e7960be786ae786c6fc2ec48480bfb279c6d99e2", "patch": "@@ -105,11 +105,7 @@ static inline bool\n virtual_operand_p (tree op)\n {\n   if (TREE_CODE (op) == SSA_NAME)\n-    {\n-      op = SSA_NAME_VAR (op);\n-      if (!op)\n-\treturn false;\n-    }\n+    return SSA_NAME_IS_VIRTUAL_OPERAND (op);\n \n   if (TREE_CODE (op) == VAR_DECL)\n     return VAR_DECL_IS_VIRTUAL_OPERAND (op);"}, {"sha": "59d771c1713072eeaa9b81e7f06f2596e53786a6", "filename": "gcc/tree-core.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7960be786ae786c6fc2ec48480bfb279c6d99e2/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7960be786ae786c6fc2ec48480bfb279c6d99e2/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=e7960be786ae786c6fc2ec48480bfb279c6d99e2", "patch": "@@ -1091,6 +1091,9 @@ struct GTY(()) tree_base {\n        FALLTHROUGH_LABEL_P in\n \t   LABEL_DECL\n \n+       SSA_NAME_IS_VIRTUAL_OPERAND in\n+\t   SSA_NAME\n+\n    private_flag:\n \n        TREE_PRIVATE in"}, {"sha": "2dec19e42e618bf7f49ff954875f7613657c8fba", "filename": "gcc/tree.h", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7960be786ae786c6fc2ec48480bfb279c6d99e2/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7960be786ae786c6fc2ec48480bfb279c6d99e2/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=e7960be786ae786c6fc2ec48480bfb279c6d99e2", "patch": "@@ -1665,6 +1665,11 @@ extern void protected_set_expr_location (tree, location_t);\n \n /* SSA_NAME accessors.  */\n \n+/* Whether SSA_NAME NODE is a virtual operand.  This simply caches the\n+   information in the underlying SSA_NAME_VAR for efficiency.  */\n+#define SSA_NAME_IS_VIRTUAL_OPERAND(NODE) \\\n+  SSA_NAME_CHECK (NODE)->base.public_flag\n+\n /* Returns the IDENTIFIER_NODE giving the SSA name a name or NULL_TREE\n    if there is no name associated with it.  */\n #define SSA_NAME_IDENTIFIER(NODE)\t\t\t\t\\\n@@ -1683,7 +1688,16 @@ extern void protected_set_expr_location (tree, location_t);\n    ? NULL_TREE : (NODE)->ssa_name.var)\n \n #define SET_SSA_NAME_VAR_OR_IDENTIFIER(NODE,VAR) \\\n-  do { SSA_NAME_CHECK (NODE)->ssa_name.var = (VAR); } while (0)\n+  do \\\n+    { \\\n+      tree var_ = (VAR); \\\n+      SSA_NAME_CHECK (NODE)->ssa_name.var = var_; \\\n+      SSA_NAME_IS_VIRTUAL_OPERAND (NODE) \\\n+\t= (var_ \\\n+\t   && TREE_CODE (var_) == VAR_DECL \\\n+\t   && VAR_DECL_IS_VIRTUAL_OPERAND (var_)); \\\n+    } \\\n+  while (0)\n \n /* Returns the statement which defines this SSA name.  */\n #define SSA_NAME_DEF_STMT(NODE)\tSSA_NAME_CHECK (NODE)->ssa_name.def_stmt"}]}