{"sha": "1637d42545cced0c58204ecb36499e512eeb3841", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYzN2Q0MjU0NWNjZWQwYzU4MjA0ZWNiMzY0OTllNTEyZWViMzg0MQ==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2016-12-06T12:47:54Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2016-12-06T12:47:54Z"}, "message": "Constrain optional's __constexpr_addressof in its return type and use a constexpr addressof for optional, if available.\n\nConstrain optional's __constexpr_addressof in its return type\nand use a constexpr addressof for optional, if available.\n* include/experimental/optional (__constexpr_addressof):\nConstrain in the return type instead of in a template parameter.\n(_Has_addressof_mem)\n(_Has_addressof_free, _Has_addressof, __constexpr_addressof):\nGuard with #ifndef __cpp_lib_addressof_constexpr.\n(operator->()): Use std::__addressof if it's constexpr.\n\nFrom-SVN: r243298", "tree": {"sha": "e2e0634ffd2caefd6431cc83be8f28d78555af84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2e0634ffd2caefd6431cc83be8f28d78555af84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1637d42545cced0c58204ecb36499e512eeb3841", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1637d42545cced0c58204ecb36499e512eeb3841", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1637d42545cced0c58204ecb36499e512eeb3841", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1637d42545cced0c58204ecb36499e512eeb3841/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b01af236b7d0d92cf1e9d642495d9177347bd740", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b01af236b7d0d92cf1e9d642495d9177347bd740", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b01af236b7d0d92cf1e9d642495d9177347bd740"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "47e9abf25c27f7ee5a2405706b921d904cb73bf2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1637d42545cced0c58204ecb36499e512eeb3841/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1637d42545cced0c58204ecb36499e512eeb3841/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1637d42545cced0c58204ecb36499e512eeb3841", "patch": "@@ -1,3 +1,14 @@\n+2016-12-06  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tConstrain optional's __constexpr_addressof in its return type\n+\tand use a constexpr addressof for optional, if available.\n+\t* include/experimental/optional (__constexpr_addressof):\n+\tConstrain in the return type instead of in a template parameter.\n+\t(_Has_addressof_mem)\n+\t(_Has_addressof_free, _Has_addressof, __constexpr_addressof):\n+\tGuard with #ifndef __cpp_lib_addressof_constexpr.\n+\t(operator->()): Use std::__addressof if it's constexpr.\n+\n 2016-11-27  Tim Shen  <timshen@google.com>\n \n \t* include/std/variant (visit): Make visit constexpr. Also cleanup"}, {"sha": "6994e7725136b9a8422d0bf23483e2b959e7c015", "filename": "libstdc++-v3/include/experimental/optional", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1637d42545cced0c58204ecb36499e512eeb3841/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1637d42545cced0c58204ecb36499e512eeb3841/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Foptional?ref=1637d42545cced0c58204ecb36499e512eeb3841", "patch": "@@ -134,6 +134,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   __throw_bad_optional_access(const char* __s)\n   { _GLIBCXX_THROW_OR_ABORT(bad_optional_access(__s)); }\n \n+#ifndef __cpp_lib_addressof_constexpr\n   template<typename _Tp, typename = void>\n     struct _Has_addressof_mem : std::false_type { };\n \n@@ -170,16 +171,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     * overloaded addressof operator (unary operator&), in which case the call\n     * will not be a constant expression.\n     */\n-  template<typename _Tp, enable_if_t<!_Has_addressof<_Tp>::value, int>...>\n-    constexpr _Tp* __constexpr_addressof(_Tp& __t)\n+  template<typename _Tp>\n+    constexpr\n+    enable_if_t<!_Has_addressof<_Tp>::value, _Tp*>\n+    __constexpr_addressof(_Tp& __t)\n     { return &__t; }\n \n   /**\n     * @brief Fallback overload that defers to __addressof.\n     */\n-  template<typename _Tp, enable_if_t<_Has_addressof<_Tp>::value, int>...>\n-    inline _Tp* __constexpr_addressof(_Tp& __t)\n+  template<typename _Tp>\n+    inline\n+    enable_if_t<_Has_addressof<_Tp>::value, _Tp*>\n+    __constexpr_addressof(_Tp& __t)\n     { return std::__addressof(__t); }\n+#endif // __cpp_lib_addressof_constexpr\n \n   /**\n     * @brief Class template that holds the necessary state for @ref optional\n@@ -705,7 +711,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // [X.Y.4.5] Observers.\n       constexpr const _Tp*\n       operator->() const\n-      { return __constexpr_addressof(this->_M_get()); }\n+      {\n+#ifndef __cpp_lib_addressof_constexpr\n+\treturn __constexpr_addressof(this->_M_get());\n+#else\n+\treturn std::__addressof(this->_M_get());\n+#endif\n+      }\n \n       _Tp*\n       operator->()"}]}