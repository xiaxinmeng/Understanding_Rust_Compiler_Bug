{"sha": "21c2c4094f06223801a36867555dac363b7a06d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFjMmM0MDk0ZjA2MjIzODAxYTM2ODY3NTU1ZGFjMzYzYjdhMDZkMQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-08-19T12:31:08Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-08-19T12:31:08Z"}, "message": "i386.h (OPTION_MASK_ISA_ROUND): Remove.\n\n\t* config/i386/i386.h (OPTION_MASK_ISA_ROUND): Remove.\n\t(TARGET_ISA_ROUND): Ditto.\n\t(TARGET_ROUND): Ditto.\n\t* config/i386/i386.c: Substitute TARGET_ROUND with TARGET_SSE4_1.\n\t* config/i386/i386.md: Ditto.\n\t* config/i386/sse.md: Ditto.\n\t* config/i386/i386-builtin.def: Substitute OPTION_MASK_ISA_ROUND\n\twith OPTION_MASK_ISA_SSE4_1.\n\nFrom-SVN: r251201", "tree": {"sha": "1b53f4c4a41ffa8be0a704c8652ce84b0b4ea83a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b53f4c4a41ffa8be0a704c8652ce84b0b4ea83a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21c2c4094f06223801a36867555dac363b7a06d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21c2c4094f06223801a36867555dac363b7a06d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21c2c4094f06223801a36867555dac363b7a06d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21c2c4094f06223801a36867555dac363b7a06d1/comments", "author": null, "committer": null, "parents": [{"sha": "057da108c1768702bcb0045c81fbde6ad28969ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/057da108c1768702bcb0045c81fbde6ad28969ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/057da108c1768702bcb0045c81fbde6ad28969ca"}], "stats": {"total": 134, "additions": 65, "deletions": 69}, "files": [{"sha": "b25afd54286c6bbe3cfcfe8c08c2e083105572ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c2c4094f06223801a36867555dac363b7a06d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c2c4094f06223801a36867555dac363b7a06d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21c2c4094f06223801a36867555dac363b7a06d1", "patch": "@@ -1,3 +1,14 @@\n+2017-08-19  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.h (OPTION_MASK_ISA_ROUND): Remove.\n+\t(TARGET_ISA_ROUND): Ditto.\n+\t(TARGET_ROUND): Ditto.\n+\t* config/i386/i386.c: Substitute TARGET_ROUND with TARGET_SSE4_1.\n+\t* config/i386/i386.md: Ditto.\n+\t* config/i386/sse.md: Ditto.\n+\t* config/i386/i386-builtin.def: Substitute OPTION_MASK_ISA_ROUND\n+\twith OPTION_MASK_ISA_SSE4_1.\n+\n 2017-08-19  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/81894\n@@ -18,8 +29,8 @@\n \t* stor-layout.c (do_type_align): Merge DECL_WARN_IF_NOT_ALIGN.\n \t(handle_warn_if_not_align): New.\n \t(place_union_field): Call handle_warn_if_not_align.\n-\t(place_field): Call handle_warn_if_not_align.  Copy\n-\tTYPE_WARN_IF_NOT_ALIGN.\n+\t(place_field): Call handle_warn_if_not_align.\n+\tCopy TYPE_WARN_IF_NOT_ALIGN.\n \t(finish_builtin_struct): Copy TYPE_WARN_IF_NOT_ALIGN.\n \t(layout_type): Likewise.\n \t* tree-core.h (tree_type_common): Add warn_if_not_align.  Set\n@@ -31,14 +42,12 @@\n \t(DECL_WARN_IF_NOT_ALIGN): Likewise.\n \t(SET_DECL_WARN_IF_NOT_ALIGN): Likewise.\n \t* doc/extend.texi: Document warn_if_not_aligned attribute.\n-\t* doc/invoke.texi: Document -Wif-not-aligned and\n-\t-Wpacked-not-aligned.\n+\t* doc/invoke.texi: Document -Wif-not-aligned and -Wpacked-not-aligned.\n \n 2017-08-17  Martin Liska  <mliska@suse.cz>\n \n \tPR bootstrap/81864\n-\t* tree-loop-distribution.c (ddrs_table): Change type to pointer\n-\ttype.\n+\t* tree-loop-distribution.c (ddrs_table): Change type to pointer type.\n \t(get_data_dependence): Use it as pointer type.\n \t(distribute_loop): Likewise.\n \n@@ -129,8 +138,7 @@\n 2017-08-17  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/81827\n-\t* tree-ssa-structalias.c (struct variable_info): Add is_reg_var\n-\tflag.\n+\t* tree-ssa-structalias.c (struct variable_info): Add is_reg_var flag.\n \t(new_var_info): Initialize it conservatively.\n \t(get_call_vi): Mark register vars.\n \t(new_scalar_tmp_constraint_exp): Likewise.\n@@ -143,14 +151,12 @@\n \n 2017-08-17  Marek Polacek  <polacek@redhat.com>\n \n-\t* gimplify.c (gimplify_adjust_omp_clauses): Compare with 0 instead of\n-\t1.\n+\t* gimplify.c (gimplify_adjust_omp_clauses): Compare with 0 instead of 1.\n \n 2017-08-17  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vrp.c (vrp_int_const_binop): Do not set *overflow_p\n-\tto true when overflow is undefined and we saturated the\n-\tresult.\n+\tto true when overflow is undefined and we saturated the result.\n \n 2017-08-17  Alan Modra  <amodra@gmail.com>\n \n@@ -178,16 +184,10 @@\n \tLikewise.\n \t* tree-streamer-out.c (write_ts_type_non_common_tree_pointers):\n \tLikewise.\n-\t\n-\tlto/\n-\t* lto.c (mentions_vars_p_type): Use TYPE_LANG_SLOT_1.\n-\t(compare_tree_sccs_1): No need to compare TYPE_BINFO directly.\n-\t(lto_fixup_prevailing_decls): Use TYPE_LANG_SLOT_1.\n \n 2017-08-16  David Malcolm  <dmalcolm@redhat.com>\n \n-\t* diagnostic-show-locus.c (colorizer::m_caret): Remove unused\n-\tfield.\n+\t* diagnostic-show-locus.c (colorizer::m_caret): Remove unused field.\n \n 2017-08-16  Uros Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "6ce90748e38d11b7526c46e7c66b35c3f32e0c1f", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c2c4094f06223801a36867555dac363b7a06d1/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c2c4094f06223801a36867555dac363b7a06d1/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=21c2c4094f06223801a36867555dac363b7a06d1", "patch": "@@ -852,36 +852,36 @@ BDESC (OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_mulv2siv2di3, \"__builtin_ia32_pmu\n BDESC (OPTION_MASK_ISA_SSE4_1, CODE_FOR_mulv4si3, \"__builtin_ia32_pmulld128\", IX86_BUILTIN_PMULLD128, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI)\n \n /* SSE4.1 */\n-BDESC (OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundpd, \"__builtin_ia32_roundpd\", IX86_BUILTIN_ROUNDPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_INT)\n-BDESC (OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundps, \"__builtin_ia32_roundps\", IX86_BUILTIN_ROUNDPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_INT)\n-BDESC (OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundsd, \"__builtin_ia32_roundsd\", IX86_BUILTIN_ROUNDSD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT)\n-BDESC (OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundss, \"__builtin_ia32_roundss\", IX86_BUILTIN_ROUNDSS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT)\n+BDESC (OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_roundpd, \"__builtin_ia32_roundpd\", IX86_BUILTIN_ROUNDPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_INT)\n+BDESC (OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_roundps, \"__builtin_ia32_roundps\", IX86_BUILTIN_ROUNDPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_INT)\n+BDESC (OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_roundsd, \"__builtin_ia32_roundsd\", IX86_BUILTIN_ROUNDSD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT)\n+BDESC (OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_roundss, \"__builtin_ia32_roundss\", IX86_BUILTIN_ROUNDSS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT)\n \n-BDESC (OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundpd, \"__builtin_ia32_floorpd\", IX86_BUILTIN_FLOORPD, (enum rtx_code) ROUND_FLOOR, (int) V2DF_FTYPE_V2DF_ROUND)\n-BDESC (OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundpd, \"__builtin_ia32_ceilpd\", IX86_BUILTIN_CEILPD, (enum rtx_code) ROUND_CEIL, (int) V2DF_FTYPE_V2DF_ROUND)\n-BDESC (OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundpd, \"__builtin_ia32_truncpd\", IX86_BUILTIN_TRUNCPD, (enum rtx_code) ROUND_TRUNC, (int) V2DF_FTYPE_V2DF_ROUND)\n-BDESC (OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundpd, \"__builtin_ia32_rintpd\", IX86_BUILTIN_RINTPD, (enum rtx_code) ROUND_MXCSR, (int) V2DF_FTYPE_V2DF_ROUND)\n+BDESC (OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_roundpd, \"__builtin_ia32_floorpd\", IX86_BUILTIN_FLOORPD, (enum rtx_code) ROUND_FLOOR, (int) V2DF_FTYPE_V2DF_ROUND)\n+BDESC (OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_roundpd, \"__builtin_ia32_ceilpd\", IX86_BUILTIN_CEILPD, (enum rtx_code) ROUND_CEIL, (int) V2DF_FTYPE_V2DF_ROUND)\n+BDESC (OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_roundpd, \"__builtin_ia32_truncpd\", IX86_BUILTIN_TRUNCPD, (enum rtx_code) ROUND_TRUNC, (int) V2DF_FTYPE_V2DF_ROUND)\n+BDESC (OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_roundpd, \"__builtin_ia32_rintpd\", IX86_BUILTIN_RINTPD, (enum rtx_code) ROUND_MXCSR, (int) V2DF_FTYPE_V2DF_ROUND)\n \n-BDESC (OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundpd_vec_pack_sfix, \"__builtin_ia32_floorpd_vec_pack_sfix\", IX86_BUILTIN_FLOORPD_VEC_PACK_SFIX, (enum rtx_code) ROUND_FLOOR, (int) V4SI_FTYPE_V2DF_V2DF_ROUND)\n-BDESC (OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundpd_vec_pack_sfix, \"__builtin_ia32_ceilpd_vec_pack_sfix\", IX86_BUILTIN_CEILPD_VEC_PACK_SFIX, (enum rtx_code) ROUND_CEIL, (int) V4SI_FTYPE_V2DF_V2DF_ROUND)\n+BDESC (OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_roundpd_vec_pack_sfix, \"__builtin_ia32_floorpd_vec_pack_sfix\", IX86_BUILTIN_FLOORPD_VEC_PACK_SFIX, (enum rtx_code) ROUND_FLOOR, (int) V4SI_FTYPE_V2DF_V2DF_ROUND)\n+BDESC (OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_roundpd_vec_pack_sfix, \"__builtin_ia32_ceilpd_vec_pack_sfix\", IX86_BUILTIN_CEILPD_VEC_PACK_SFIX, (enum rtx_code) ROUND_CEIL, (int) V4SI_FTYPE_V2DF_V2DF_ROUND)\n \n-BDESC (OPTION_MASK_ISA_ROUND, CODE_FOR_roundv2df2, \"__builtin_ia32_roundpd_az\", IX86_BUILTIN_ROUNDPD_AZ, UNKNOWN, (int) V2DF_FTYPE_V2DF)\n-BDESC (OPTION_MASK_ISA_ROUND, CODE_FOR_roundv2df2_vec_pack_sfix, \"__builtin_ia32_roundpd_az_vec_pack_sfix\", IX86_BUILTIN_ROUNDPD_AZ_VEC_PACK_SFIX, UNKNOWN, (int) V4SI_FTYPE_V2DF_V2DF)\n+BDESC (OPTION_MASK_ISA_SSE4_1, CODE_FOR_roundv2df2, \"__builtin_ia32_roundpd_az\", IX86_BUILTIN_ROUNDPD_AZ, UNKNOWN, (int) V2DF_FTYPE_V2DF)\n+BDESC (OPTION_MASK_ISA_SSE4_1, CODE_FOR_roundv2df2_vec_pack_sfix, \"__builtin_ia32_roundpd_az_vec_pack_sfix\", IX86_BUILTIN_ROUNDPD_AZ_VEC_PACK_SFIX, UNKNOWN, (int) V4SI_FTYPE_V2DF_V2DF)\n \n-BDESC (OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundps, \"__builtin_ia32_floorps\", IX86_BUILTIN_FLOORPS, (enum rtx_code) ROUND_FLOOR, (int) V4SF_FTYPE_V4SF_ROUND)\n-BDESC (OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundps, \"__builtin_ia32_ceilps\", IX86_BUILTIN_CEILPS, (enum rtx_code) ROUND_CEIL, (int) V4SF_FTYPE_V4SF_ROUND)\n-BDESC (OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundps, \"__builtin_ia32_truncps\", IX86_BUILTIN_TRUNCPS, (enum rtx_code) ROUND_TRUNC, (int) V4SF_FTYPE_V4SF_ROUND)\n-BDESC (OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundps, \"__builtin_ia32_rintps\", IX86_BUILTIN_RINTPS, (enum rtx_code) ROUND_MXCSR, (int) V4SF_FTYPE_V4SF_ROUND)\n+BDESC (OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_roundps, \"__builtin_ia32_floorps\", IX86_BUILTIN_FLOORPS, (enum rtx_code) ROUND_FLOOR, (int) V4SF_FTYPE_V4SF_ROUND)\n+BDESC (OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_roundps, \"__builtin_ia32_ceilps\", IX86_BUILTIN_CEILPS, (enum rtx_code) ROUND_CEIL, (int) V4SF_FTYPE_V4SF_ROUND)\n+BDESC (OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_roundps, \"__builtin_ia32_truncps\", IX86_BUILTIN_TRUNCPS, (enum rtx_code) ROUND_TRUNC, (int) V4SF_FTYPE_V4SF_ROUND)\n+BDESC (OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_roundps, \"__builtin_ia32_rintps\", IX86_BUILTIN_RINTPS, (enum rtx_code) ROUND_MXCSR, (int) V4SF_FTYPE_V4SF_ROUND)\n \n-BDESC (OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundps_sfix, \"__builtin_ia32_floorps_sfix\", IX86_BUILTIN_FLOORPS_SFIX, (enum rtx_code) ROUND_FLOOR, (int) V4SI_FTYPE_V4SF_ROUND)\n-BDESC (OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundps_sfix, \"__builtin_ia32_ceilps_sfix\", IX86_BUILTIN_CEILPS_SFIX, (enum rtx_code) ROUND_CEIL, (int) V4SI_FTYPE_V4SF_ROUND)\n+BDESC (OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_roundps_sfix, \"__builtin_ia32_floorps_sfix\", IX86_BUILTIN_FLOORPS_SFIX, (enum rtx_code) ROUND_FLOOR, (int) V4SI_FTYPE_V4SF_ROUND)\n+BDESC (OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_roundps_sfix, \"__builtin_ia32_ceilps_sfix\", IX86_BUILTIN_CEILPS_SFIX, (enum rtx_code) ROUND_CEIL, (int) V4SI_FTYPE_V4SF_ROUND)\n \n-BDESC (OPTION_MASK_ISA_ROUND, CODE_FOR_roundv4sf2, \"__builtin_ia32_roundps_az\", IX86_BUILTIN_ROUNDPS_AZ, UNKNOWN, (int) V4SF_FTYPE_V4SF)\n-BDESC (OPTION_MASK_ISA_ROUND, CODE_FOR_roundv4sf2_sfix, \"__builtin_ia32_roundps_az_sfix\", IX86_BUILTIN_ROUNDPS_AZ_SFIX, UNKNOWN, (int) V4SI_FTYPE_V4SF)\n+BDESC (OPTION_MASK_ISA_SSE4_1, CODE_FOR_roundv4sf2, \"__builtin_ia32_roundps_az\", IX86_BUILTIN_ROUNDPS_AZ, UNKNOWN, (int) V4SF_FTYPE_V4SF)\n+BDESC (OPTION_MASK_ISA_SSE4_1, CODE_FOR_roundv4sf2_sfix, \"__builtin_ia32_roundps_az_sfix\", IX86_BUILTIN_ROUNDPS_AZ_SFIX, UNKNOWN, (int) V4SI_FTYPE_V4SF)\n \n-BDESC (OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_ptestv2di, \"__builtin_ia32_ptestz128\", IX86_BUILTIN_PTESTZ, EQ, (int) INT_FTYPE_V2DI_V2DI_PTEST)\n-BDESC (OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_ptestv2di, \"__builtin_ia32_ptestc128\", IX86_BUILTIN_PTESTC, LTU, (int) INT_FTYPE_V2DI_V2DI_PTEST)\n-BDESC (OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_ptestv2di, \"__builtin_ia32_ptestnzc128\", IX86_BUILTIN_PTESTNZC, GTU, (int) INT_FTYPE_V2DI_V2DI_PTEST)\n+BDESC (OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_ptestv2di, \"__builtin_ia32_ptestz128\", IX86_BUILTIN_PTESTZ, EQ, (int) INT_FTYPE_V2DI_V2DI_PTEST)\n+BDESC (OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_ptestv2di, \"__builtin_ia32_ptestc128\", IX86_BUILTIN_PTESTC, LTU, (int) INT_FTYPE_V2DI_V2DI_PTEST)\n+BDESC (OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_ptestv2di, \"__builtin_ia32_ptestnzc128\", IX86_BUILTIN_PTESTNZC, GTU, (int) INT_FTYPE_V2DI_V2DI_PTEST)\n \n /* SSE4.2 */\n BDESC (OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_gtv2di3, \"__builtin_ia32_pcmpgtq\", IX86_BUILTIN_PCMPGTQ, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI)"}, {"sha": "a7bb7f9d629d8155e3ddd071417e6c7b9be58a75", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c2c4094f06223801a36867555dac363b7a06d1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c2c4094f06223801a36867555dac363b7a06d1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=21c2c4094f06223801a36867555dac363b7a06d1", "patch": "@@ -39909,7 +39909,7 @@ ix86_builtin_vectorized_function (unsigned int fn, tree type_out,\n     CASE_CFN_LFLOOR:\n     CASE_CFN_LLFLOOR:\n       /* The round insn does not trap on denormals.  */\n-      if (flag_trapping_math || !TARGET_ROUND)\n+      if (flag_trapping_math || !TARGET_SSE4_1)\n \tbreak;\n \n       if (out_mode == SImode && in_mode == DFmode)\n@@ -39936,7 +39936,7 @@ ix86_builtin_vectorized_function (unsigned int fn, tree type_out,\n     CASE_CFN_LCEIL:\n     CASE_CFN_LLCEIL:\n       /* The round insn does not trap on denormals.  */\n-      if (flag_trapping_math || !TARGET_ROUND)\n+      if (flag_trapping_math || !TARGET_SSE4_1)\n \tbreak;\n \n       if (out_mode == SImode && in_mode == DFmode)\n@@ -39986,7 +39986,7 @@ ix86_builtin_vectorized_function (unsigned int fn, tree type_out,\n     CASE_CFN_LROUND:\n     CASE_CFN_LLROUND:\n       /* The round insn does not trap on denormals.  */\n-      if (flag_trapping_math || !TARGET_ROUND)\n+      if (flag_trapping_math || !TARGET_SSE4_1)\n \tbreak;\n \n       if (out_mode == SImode && in_mode == DFmode)\n@@ -40011,7 +40011,7 @@ ix86_builtin_vectorized_function (unsigned int fn, tree type_out,\n \n     CASE_CFN_FLOOR:\n       /* The round insn does not trap on denormals.  */\n-      if (flag_trapping_math || !TARGET_ROUND)\n+      if (flag_trapping_math || !TARGET_SSE4_1)\n \tbreak;\n \n       if (out_mode == DFmode && in_mode == DFmode)\n@@ -40036,7 +40036,7 @@ ix86_builtin_vectorized_function (unsigned int fn, tree type_out,\n \n     CASE_CFN_CEIL:\n       /* The round insn does not trap on denormals.  */\n-      if (flag_trapping_math || !TARGET_ROUND)\n+      if (flag_trapping_math || !TARGET_SSE4_1)\n \tbreak;\n \n       if (out_mode == DFmode && in_mode == DFmode)\n@@ -40061,7 +40061,7 @@ ix86_builtin_vectorized_function (unsigned int fn, tree type_out,\n \n     CASE_CFN_TRUNC:\n       /* The round insn does not trap on denormals.  */\n-      if (flag_trapping_math || !TARGET_ROUND)\n+      if (flag_trapping_math || !TARGET_SSE4_1)\n \tbreak;\n \n       if (out_mode == DFmode && in_mode == DFmode)\n@@ -40086,7 +40086,7 @@ ix86_builtin_vectorized_function (unsigned int fn, tree type_out,\n \n     CASE_CFN_RINT:\n       /* The round insn does not trap on denormals.  */\n-      if (flag_trapping_math || !TARGET_ROUND)\n+      if (flag_trapping_math || !TARGET_SSE4_1)\n \tbreak;\n \n       if (out_mode == DFmode && in_mode == DFmode)\n@@ -52281,7 +52281,7 @@ ix86_optab_supported_p (int op, machine_mode mode1, machine_mode,\n       if (SSE_FLOAT_MODE_P (mode1)\n \t  && TARGET_SSE_MATH\n \t  && !flag_trapping_math\n-\t  && !TARGET_ROUND)\n+\t  && !TARGET_SSE4_1)\n \treturn opt_type == OPTIMIZE_FOR_SPEED;\n       return true;\n \n@@ -52291,7 +52291,7 @@ ix86_optab_supported_p (int op, machine_mode mode1, machine_mode,\n       if (SSE_FLOAT_MODE_P (mode1)\n \t  && TARGET_SSE_MATH\n \t  && !flag_trapping_math\n-\t  && TARGET_ROUND)\n+\t  && TARGET_SSE4_1)\n \treturn true;\n       return opt_type == OPTIMIZE_FOR_SPEED;\n "}, {"sha": "f4c96fc5cbabd068d73b3759a00d85892ccaeba0", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c2c4094f06223801a36867555dac363b7a06d1/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c2c4094f06223801a36867555dac363b7a06d1/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=21c2c4094f06223801a36867555dac363b7a06d1", "patch": "@@ -97,7 +97,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_XOP_P(x)\tTARGET_ISA_XOP_P(x)\n #define TARGET_LWP\tTARGET_ISA_LWP\n #define TARGET_LWP_P(x)\tTARGET_ISA_LWP_P(x)\n-#define TARGET_ROUND\tTARGET_ISA_ROUND\n #define TARGET_ABM\tTARGET_ISA_ABM\n #define TARGET_ABM_P(x)\tTARGET_ISA_ABM_P(x)\n #define TARGET_SGX\tTARGET_ISA_SGX\n@@ -176,10 +175,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_16BIT\tTARGET_CODE16\n #define TARGET_16BIT_P(x)\tTARGET_CODE16_P(x)\n \n-/* SSE4.1 defines round instructions */\n-#define\tOPTION_MASK_ISA_ROUND\tOPTION_MASK_ISA_SSE4_1\n-#define\tTARGET_ISA_ROUND\t((ix86_isa_flags & OPTION_MASK_ISA_ROUND) != 0)\n-\n #include \"config/vxworks-dummy.h\"\n \n #include \"config/i386/i386-opts.h\""}, {"sha": "0d04bff1e6bc41c73d6ded7f069086e3621531ec", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c2c4094f06223801a36867555dac363b7a06d1/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c2c4094f06223801a36867555dac363b7a06d1/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=21c2c4094f06223801a36867555dac363b7a06d1", "patch": "@@ -15563,7 +15563,7 @@\n \t(unspec:MODEF [(match_operand:MODEF 1 \"register_operand\" \"x,v\")\n \t\t       (match_operand:SI 2 \"const_0_to_15_operand\" \"n,n\")]\n \t\t      UNSPEC_ROUND))]\n-  \"TARGET_ROUND\"\n+  \"TARGET_SSE4_1\"\n   \"@\n    %vround<ssemodesuffix>\\t{%2, %1, %d0|%d0, %1, %2}\n    vrndscale<ssemodesuffix>\\t{%2, %1, %d0|%d0, %1, %2}\"\n@@ -15604,7 +15604,7 @@\n {\n   if (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n     {\n-      if (TARGET_ROUND)\n+      if (TARGET_SSE4_1)\n \temit_insn (gen_sse4_1_round<mode>2\n \t\t   (operands[0], operands[1], GEN_INT (ROUND_MXCSR)));\n       else\n@@ -15628,7 +15628,7 @@\n   if (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n       && !flag_trapping_math && !flag_rounding_math)\n     {\n-      if (TARGET_ROUND)\n+      if (TARGET_SSE4_1)\n         {\n \t  operands[1] = force_reg (<MODE>mode, operands[1]);\n \t  ix86_expand_round_sse4 (operands[0], operands[1]);\n@@ -15890,12 +15890,13 @@\n \t|| TARGET_MIX_SSE_I387)\n     && (flag_fp_int_builtin_inexact || !flag_trapping_math))\n    || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n-       && (TARGET_ROUND || !flag_trapping_math || flag_fp_int_builtin_inexact))\"\n+       && (TARGET_SSE4_1 || !flag_trapping_math\n+\t   || flag_fp_int_builtin_inexact))\"\n {\n   if (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n-      && (TARGET_ROUND || !flag_trapping_math || flag_fp_int_builtin_inexact))\n+      && (TARGET_SSE4_1 || !flag_trapping_math || flag_fp_int_builtin_inexact))\n     {\n-      if (TARGET_ROUND)\n+      if (TARGET_SSE4_1)\n \temit_insn (gen_sse4_1_round<mode>2\n \t\t   (operands[0], operands[1], GEN_INT (ROUND_<ROUNDING>\n \t\t\t\t\t\t       | ROUND_NO_EXC)));"}, {"sha": "4f2328f136801f061c0f4eafbfcb2f7e6cd630c6", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c2c4094f06223801a36867555dac363b7a06d1/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c2c4094f06223801a36867555dac363b7a06d1/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=21c2c4094f06223801a36867555dac363b7a06d1", "patch": "@@ -15605,7 +15605,7 @@\n \t  [(match_operand:VF_128_256 1 \"vector_operand\" \"YrBm,*xBm,xm\")\n \t   (match_operand:SI 2 \"const_0_to_15_operand\" \"n,n,n\")]\n \t  UNSPEC_ROUND))]\n-  \"TARGET_ROUND\"\n+  \"TARGET_SSE4_1\"\n   \"%vround<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,noavx,avx\")\n    (set_attr \"type\" \"ssecvt\")\n@@ -15619,7 +15619,7 @@\n   [(match_operand:<sseintvecmode> 0 \"register_operand\")\n    (match_operand:VF1_128_256 1 \"vector_operand\")\n    (match_operand:SI 2 \"const_0_to_15_operand\")]\n-  \"TARGET_ROUND\"\n+  \"TARGET_SSE4_1\"\n {\n   rtx tmp = gen_reg_rtx (<MODE>mode);\n \n@@ -15658,7 +15658,7 @@\n    (match_operand:VF2 1 \"vector_operand\")\n    (match_operand:VF2 2 \"vector_operand\")\n    (match_operand:SI 3 \"const_0_to_15_operand\")]\n-  \"TARGET_ROUND\"\n+  \"TARGET_SSE4_1\"\n {\n   rtx tmp0, tmp1;\n \n@@ -15700,7 +15700,7 @@\n \t    UNSPEC_ROUND)\n \t  (match_operand:VF_128 1 \"register_operand\" \"0,0,x,v\")\n \t  (const_int 1)))]\n-  \"TARGET_ROUND\"\n+  \"TARGET_SSE4_1\"\n   \"@\n    round<ssescalarmodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n    round<ssescalarmodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n@@ -15723,7 +15723,7 @@\n \t(unspec:VF\n \t  [(match_dup 3) (match_dup 4)]\n \t  UNSPEC_ROUND))]\n-  \"TARGET_ROUND && !flag_trapping_math\"\n+  \"TARGET_SSE4_1 && !flag_trapping_math\"\n {\n   machine_mode scalar_mode;\n   const struct real_format *fmt;\n@@ -15751,7 +15751,7 @@\n (define_expand \"round<mode>2_sfix\"\n   [(match_operand:<sseintvecmode> 0 \"register_operand\")\n    (match_operand:VF1 1 \"register_operand\")]\n-  \"TARGET_ROUND && !flag_trapping_math\"\n+  \"TARGET_SSE4_1 && !flag_trapping_math\"\n {\n   rtx tmp = gen_reg_rtx (<MODE>mode);\n \n@@ -15766,7 +15766,7 @@\n   [(match_operand:<ssepackfltmode> 0 \"register_operand\")\n    (match_operand:VF2 1 \"register_operand\")\n    (match_operand:VF2 2 \"register_operand\")]\n-  \"TARGET_ROUND && !flag_trapping_math\"\n+  \"TARGET_SSE4_1 && !flag_trapping_math\"\n {\n   rtx tmp0, tmp1;\n "}]}