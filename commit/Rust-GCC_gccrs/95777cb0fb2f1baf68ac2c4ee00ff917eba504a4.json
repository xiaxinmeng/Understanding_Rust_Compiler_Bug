{"sha": "95777cb0fb2f1baf68ac2c4ee00ff917eba504a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU3NzdjYjBmYjJmMWJhZjY4YWMyYzRlZTAwZmY5MTdlYmE1MDRhNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-06-14T23:35:56Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-06-14T23:35:56Z"}, "message": "re PR libstdc++/57619 (std::unordered_map and std::unordered_multimap::insert invoking std::pair move constructor)\n\n2013-06-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/57619\n\t* include/bits/unordered_map.h (unordered_map<>::insert,\n\tunordered_multimap<>::insert): Use std::forward, not std::move.\n\t* testsuite/23_containers/unordered_map/insert/57619.C: New.\n\t* testsuite/23_containers/unordered_multimap/insert/57619.C: Likewise.\n\nFrom-SVN: r200111", "tree": {"sha": "4fd1d49f6c23f4c533b23915dee987c2aa36d5cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fd1d49f6c23f4c533b23915dee987c2aa36d5cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95777cb0fb2f1baf68ac2c4ee00ff917eba504a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95777cb0fb2f1baf68ac2c4ee00ff917eba504a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95777cb0fb2f1baf68ac2c4ee00ff917eba504a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95777cb0fb2f1baf68ac2c4ee00ff917eba504a4/comments", "author": null, "committer": null, "parents": [{"sha": "929f647a01f0ebb28dca062c669ed2dd8b83c5ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/929f647a01f0ebb28dca062c669ed2dd8b83c5ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/929f647a01f0ebb28dca062c669ed2dd8b83c5ef"}], "stats": {"total": 118, "additions": 114, "deletions": 4}, "files": [{"sha": "df721ee9bbdea6a5ef3fac6ce47968a88eae4ae1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95777cb0fb2f1baf68ac2c4ee00ff917eba504a4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95777cb0fb2f1baf68ac2c4ee00ff917eba504a4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=95777cb0fb2f1baf68ac2c4ee00ff917eba504a4", "patch": "@@ -1,3 +1,11 @@\n+2013-06-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/57619\n+\t* include/bits/unordered_map.h (unordered_map<>::insert,\n+\tunordered_multimap<>::insert): Use std::forward, not std::move.\n+\t* testsuite/23_containers/unordered_map/insert/57619.C: New.\n+\t* testsuite/23_containers/unordered_multimap/insert/57619.C: Likewise.\n+\n 2013-06-14  Alan Modra  <amodra@gmail.com>\n \n \t* configure.host (abi_baseline_pair): Match powerpc64*."}, {"sha": "6d5b29e09d2826ced166c7d2ec8643c9d94e1c80", "filename": "libstdc++-v3/include/bits/unordered_map.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95777cb0fb2f1baf68ac2c4ee00ff917eba504a4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95777cb0fb2f1baf68ac2c4ee00ff917eba504a4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h?ref=95777cb0fb2f1baf68ac2c4ee00ff917eba504a4", "patch": "@@ -397,7 +397,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t\t\t\t\t    _Pair&&>::value>::type>\n \tstd::pair<iterator, bool>\n \tinsert(_Pair&& __x)\n-\t{ return _M_h.insert(std::move(__x)); }\n+        { return _M_h.insert(std::forward<_Pair>(__x)); }\n       //@}\n \n       //@{\n@@ -431,7 +431,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t\t\t\t\t    _Pair&&>::value>::type>\n \titerator\n \tinsert(const_iterator __hint, _Pair&& __x)\n-\t{ return _M_h.insert(__hint, std::move(__x)); }\n+\t{ return _M_h.insert(__hint, std::forward<_Pair>(__x)); }\n       //@}\n \n       /**\n@@ -1093,7 +1093,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t\t\t\t\t    _Pair&&>::value>::type>\n \titerator\n \tinsert(_Pair&& __x)\n-\t{ return _M_h.insert(std::move(__x)); }\n+        { return _M_h.insert(std::forward<_Pair>(__x)); }\n       //@}\n \n       //@{\n@@ -1125,7 +1125,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t\t\t\t\t    _Pair&&>::value>::type>\n \titerator\n \tinsert(const_iterator __hint, _Pair&& __x)\n-\t{ return _M_h.insert(__hint, std::move(__x)); }\n+        { return _M_h.insert(__hint, std::forward<_Pair>(__x)); }\n       //@}\n \n       /**"}, {"sha": "aa11e5ccd5163427e81f91dd04ded214c0d3bba0", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/insert/57619.C", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95777cb0fb2f1baf68ac2c4ee00ff917eba504a4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Finsert%2F57619.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95777cb0fb2f1baf68ac2c4ee00ff917eba504a4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Finsert%2F57619.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Finsert%2F57619.C?ref=95777cb0fb2f1baf68ac2c4ee00ff917eba504a4", "patch": "@@ -0,0 +1,51 @@\n+// { dg-options \"-std=gnu++11\" }\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <unordered_map>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  {\n+    std::unordered_map<std::string, std::string> mymap;\n+    std::pair<std::string, std::string> mypair{std::string(\"key\"),\n+\t                                       std::string(\"value\")};\n+    mymap.insert(mypair);\n+\n+    VERIFY( mypair.first.length() && mypair.second.length() );\n+  }\n+\n+  {\n+    std::unordered_map<std::string, std::string> mymap;\n+    std::pair<std::string, std::string> mypair{std::string(\"key\"),\n+\t                                       std::string(\"value\")};\n+    mymap.insert(mymap.begin(), mypair);\n+\n+    VERIFY( mypair.first.length() && mypair.second.length() );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "8a44eb91c9524ee98ec0a0640f25cd8ac89214e0", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/insert/57619.C", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95777cb0fb2f1baf68ac2c4ee00ff917eba504a4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Finsert%2F57619.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95777cb0fb2f1baf68ac2c4ee00ff917eba504a4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Finsert%2F57619.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Finsert%2F57619.C?ref=95777cb0fb2f1baf68ac2c4ee00ff917eba504a4", "patch": "@@ -0,0 +1,51 @@\n+// { dg-options \"-std=gnu++11\" }\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <unordered_map>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  {\n+    std::unordered_multimap<std::string, std::string> mymmap;\n+    std::pair<std::string, std::string> mypair{std::string(\"key\"),\n+\t                                       std::string(\"value\")};\n+    mymmap.insert(mypair);\n+\n+    VERIFY( mypair.first.length() && mypair.second.length() );\n+  }\n+\n+  {\n+    std::unordered_multimap<std::string, std::string> mymmap;\n+    std::pair<std::string, std::string> mypair{std::string(\"key\"),\n+\t                                       std::string(\"value\")};\n+    mymmap.insert(mymmap.begin(), mypair);\n+\n+    VERIFY( mypair.first.length() && mypair.second.length() );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}