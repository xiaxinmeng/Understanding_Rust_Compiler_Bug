{"sha": "4f4f649d66e37954ffc05725662e966ae9a4d12f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY0ZjY0OWQ2NmUzNzk1NGZmYzA1NzI1NjYyZTk2NmFlOWE0ZDEyZg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-10-14T22:30:00Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-10-15T19:34:07Z"}, "message": "compiler: export type for string and bool constants\n\nAlso consolidate the identical code for constant type export into a\npair of static methods.\n\nFixes golang/go#35739\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/262437", "tree": {"sha": "57ce1f921116bf97cee644bb1e8e22b11208189c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57ce1f921116bf97cee644bb1e8e22b11208189c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f4f649d66e37954ffc05725662e966ae9a4d12f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f4f649d66e37954ffc05725662e966ae9a4d12f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f4f649d66e37954ffc05725662e966ae9a4d12f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f4f649d66e37954ffc05725662e966ae9a4d12f/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7beab8282a877da06713bf38f9440ccc82f10b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7beab8282a877da06713bf38f9440ccc82f10b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7beab8282a877da06713bf38f9440ccc82f10b9"}], "stats": {"total": 92, "additions": 53, "deletions": 39}, "files": [{"sha": "ce96537e3466eca170ffb9120dea09deab440b4e", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f4f649d66e37954ffc05725662e966ae9a4d12f/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f4f649d66e37954ffc05725662e966ae9a4d12f/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=4f4f649d66e37954ffc05725662e966ae9a4d12f", "patch": "@@ -1,4 +1,4 @@\n-b73a8f17dfe8d7c7ecc9ccd0317be5abe71c5509\n+94808b9af5cd9b9102ae9680a0e5f124c6793815\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "e76bc6997c16902b8a4f90507b4f6188e7c24b58", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 44, "deletions": 38, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f4f649d66e37954ffc05725662e966ae9a4d12f/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f4f649d66e37954ffc05725662e966ae9a4d12f/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=4f4f649d66e37954ffc05725662e966ae9a4d12f", "patch": "@@ -1823,6 +1823,31 @@ Expression::make_unknown_reference(Named_object* no, Location location)\n   return new Unknown_expression(no, location);\n }\n \n+// Start exporting a type conversion for a constant, if needed.  This\n+// returns whether we need to export a closing parenthesis.\n+\n+bool\n+Expression::export_constant_type(Export_function_body* efb, Type* type)\n+{\n+  if (type == NULL\n+      || type->is_abstract()\n+      || type == efb->type_context())\n+    return false;\n+  efb->write_c_string(\"$convert(\");\n+  efb->write_type(type);\n+  efb->write_c_string(\", \");\n+  return true;\n+}\n+\n+// Finish a type conversion for a constant.\n+\n+void\n+Expression::finish_export_constant_type(Export_function_body* efb, bool needed)\n+{\n+  if (needed)\n+    efb->write_c_string(\")\");\n+}\n+\n // A boolean expression.\n \n class Boolean_expression : public Expression\n@@ -1878,8 +1903,7 @@ class Boolean_expression : public Expression\n   { return 1; }\n \n   void\n-  do_export(Export_function_body* efb) const\n-  { efb->write_c_string(this->val_ ? \"$true\" : \"$false\"); }\n+  do_export(Export_function_body* efb) const;\n \n   void\n   do_dump_expression(Ast_dump_context* ast_dump_context) const\n@@ -1926,6 +1950,16 @@ Boolean_expression::do_determine_type(const Type_context* context)\n     this->type_ = Type::lookup_bool_type();\n }\n \n+// Export a boolean constant.\n+\n+void\n+Boolean_expression::do_export(Export_function_body* efb) const\n+{\n+  bool exported_type = Expression::export_constant_type(efb, this->type_);\n+  efb->write_c_string(this->val_ ? \"$true\" : \"$false\");\n+  Expression::finish_export_constant_type(efb, exported_type);\n+}\n+\n // Import a boolean constant.\n \n Expression*\n@@ -2055,7 +2089,9 @@ String_expression::export_string(String_dump* exp,\n void\n String_expression::do_export(Export_function_body* efb) const\n {\n+  bool exported_type = Expression::export_constant_type(efb, this->type_);\n   String_expression::export_string(efb, this);\n+  Expression::finish_export_constant_type(efb, exported_type);\n }\n \n // Import a string expression.\n@@ -2547,25 +2583,15 @@ Integer_expression::export_integer(String_dump* exp, const mpz_t val)\n void\n Integer_expression::do_export(Export_function_body* efb) const\n {\n-  bool added_type = false;\n-  if (this->type_ != NULL\n-      && !this->type_->is_abstract()\n-      && this->type_ != efb->type_context())\n-    {\n-      efb->write_c_string(\"$convert(\");\n-      efb->write_type(this->type_);\n-      efb->write_c_string(\", \");\n-      added_type = true;\n-    }\n+  bool exported_type = Expression::export_constant_type(efb, this->type_);\n \n   Integer_expression::export_integer(efb, this->val_);\n   if (this->is_character_constant_)\n     efb->write_c_string(\"'\");\n   // A trailing space lets us reliably identify the end of the number.\n   efb->write_c_string(\" \");\n \n-  if (added_type)\n-    efb->write_c_string(\")\");\n+  Expression::finish_export_constant_type(efb, exported_type);\n }\n \n // Import an integer, floating point, or complex value.  This handles\n@@ -2953,23 +2979,13 @@ Float_expression::export_float(String_dump *exp, const mpfr_t val)\n void\n Float_expression::do_export(Export_function_body* efb) const\n {\n-  bool added_type = false;\n-  if (this->type_ != NULL\n-      && !this->type_->is_abstract()\n-      && this->type_ != efb->type_context())\n-    {\n-      efb->write_c_string(\"$convert(\");\n-      efb->write_type(this->type_);\n-      efb->write_c_string(\", \");\n-      added_type = true;\n-    }\n+  bool exported_type = Expression::export_constant_type(efb, this->type_);\n \n   Float_expression::export_float(efb, this->val_);\n   // A trailing space lets us reliably identify the end of the number.\n   efb->write_c_string(\" \");\n \n-  if (added_type)\n-    efb->write_c_string(\")\");\n+  Expression::finish_export_constant_type(efb, exported_type);\n }\n \n // Dump a floating point number to the dump file.\n@@ -3184,23 +3200,13 @@ Complex_expression::export_complex(String_dump* exp, const mpc_t val)\n void\n Complex_expression::do_export(Export_function_body* efb) const\n {\n-  bool added_type = false;\n-  if (this->type_ != NULL\n-      && !this->type_->is_abstract()\n-      && this->type_ != efb->type_context())\n-    {\n-      efb->write_c_string(\"$convert(\");\n-      efb->write_type(this->type_);\n-      efb->write_c_string(\", \");\n-      added_type = true;\n-    }\n+  bool exported_type = Expression::export_constant_type(efb, this->type_);\n \n   Complex_expression::export_complex(efb, this->val_);\n   // A trailing space lets us reliably identify the end of the number.\n   efb->write_c_string(\" \");\n \n-  if (added_type)\n-    efb->write_c_string(\")\");\n+  Expression::finish_export_constant_type(efb, exported_type);\n }\n \n // Dump a complex expression to the dump file."}, {"sha": "d2975238572856cceb52dff11b2f1a1e2d3ad28b", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f4f649d66e37954ffc05725662e966ae9a4d12f/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f4f649d66e37954ffc05725662e966ae9a4d12f/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=4f4f649d66e37954ffc05725662e966ae9a4d12f", "patch": "@@ -1237,6 +1237,14 @@ class Expression\n   virtual void\n   do_dump_expression(Ast_dump_context*) const = 0;\n \n+  // Start exporting a type conversion for a constant, if needed.\n+  static bool\n+  export_constant_type(Export_function_body*, Type*);\n+\n+  // Finish exporting a type conversion for a constant.\n+  static void\n+  finish_export_constant_type(Export_function_body*, bool);\n+\n   // Varargs lowering creates a slice object (unnamed compiler temp)\n   // to contain the variable length collection of values. The enum\n   // below tells the lowering routine whether it can mark that temp"}]}