{"sha": "159c2794c8ae690a1deb893fdc2004fda5827d55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU5YzI3OTRjOGFlNjkwYTFkZWI4OTNmZGMyMDA0ZmRhNTgyN2Q1NQ==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2011-02-07T19:19:51Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2011-02-07T19:19:51Z"}, "message": "More style fixes from Ralf\n\nFrom-SVN: r169893", "tree": {"sha": "4d098fe2974dbe9c317863d33dd76713089ee689", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d098fe2974dbe9c317863d33dd76713089ee689"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/159c2794c8ae690a1deb893fdc2004fda5827d55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/159c2794c8ae690a1deb893fdc2004fda5827d55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/159c2794c8ae690a1deb893fdc2004fda5827d55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/159c2794c8ae690a1deb893fdc2004fda5827d55/comments", "author": null, "committer": null, "parents": [{"sha": "f3f2c465f355a3818f3f7c9e93139ea388a874ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3f2c465f355a3818f3f7c9e93139ea388a874ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3f2c465f355a3818f3f7c9e93139ea388a874ac"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "2f63bbb7f88fd21a4b7e31cc6da7af2b29f95287", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/159c2794c8ae690a1deb893fdc2004fda5827d55/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/159c2794c8ae690a1deb893fdc2004fda5827d55/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=159c2794c8ae690a1deb893fdc2004fda5827d55", "patch": "@@ -1163,7 +1163,7 @@ depending on the kind.\n @section Thread-safety of the runtime library\n @cindex thread-safety, threads\n \n-GNU Fortran can be used in programs with multiple threads, e.g. by\n+GNU Fortran can be used in programs with multiple threads, e.g.@: by\n using OpenMP, by calling OS thread handling functions via the\n @code{ISO_C_BINDING} facility, or by GNU Fortran compiled library code\n being called from a multi-threaded program."}, {"sha": "d91ecfdbb1ece25b874b06780b49d0ed9d72d2f1", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/159c2794c8ae690a1deb893fdc2004fda5827d55/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/159c2794c8ae690a1deb893fdc2004fda5827d55/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=159c2794c8ae690a1deb893fdc2004fda5827d55", "patch": "@@ -2686,7 +2686,7 @@ end program test_cmplx\n \n @table @asis\n @item @emph{Description}:\n-@code{COMMAND_ARGUMENT_COUNT()} returns the number of arguments passed on the\n+@code{COMMAND_ARGUMENT_COUNT} returns the number of arguments passed on the\n command line when the containing program was invoked.\n \n @item @emph{Standard}:\n@@ -2730,7 +2730,7 @@ end program test_command_argument_count\n \n @table @asis\n @item @emph{Description}:\n-@code{COMPILER_OPTIONS()} returns a string with the options used for\n+@code{COMPILER_OPTIONS} returns a string with the options used for\n compiling.\n \n @item @emph{Standard}:\n@@ -2773,7 +2773,7 @@ the @code{COMPILER_OPTIONS} intrinsic.\n \n @table @asis\n @item @emph{Description}:\n-@code{COMPILER_VERSION()} returns a string with the name and the\n+@code{COMPILER_VERSION} returns a string with the name and the\n version of the compiler.\n \n @item @emph{Standard}:\n@@ -3209,7 +3209,7 @@ end program test_cshift\n @table @asis\n @item @emph{Description}:\n @code{CTIME} converts a system time value, such as returned by\n-@code{TIME8()}, to a string of the form @samp{Sat Aug 19 18:13:14 1995}.\n+@code{TIME8}, to a string of the form @samp{Sat Aug 19 18:13:14 1995}.\n \n This intrinsic is provided in both subroutine and function forms; however,\n only one form can be used in any given program unit.\n@@ -4163,9 +4163,9 @@ the command, as returned by @code{system}.  @code{CMDSTAT} is set to zero\n if the command line was executed (whatever its exit status was).\n @code{CMDMSG} is assigned an error message if an error has occurred.\n \n-Note that the @code{system} call need not be thread-safe. It is the\n-responsibility of the user to ensure that @code{system} is not called\n-concurrently.\n+Note that the @code{system} function need not be thread-safe. It is\n+the responsibility of the user to ensure that @code{system} is not\n+called concurrently.\n \n @item @emph{Standard}:\n Fortran 2008 and later\n@@ -4913,7 +4913,7 @@ end program test_fraction\n \n @table @asis\n @item @emph{Description}:\n-Frees memory previously allocated by @code{MALLOC()}. The @code{FREE}\n+Frees memory previously allocated by @code{MALLOC}. The @code{FREE}\n intrinsic is an extension intended to be used with Cray pointers, and is\n provided in GNU Fortran to allow user to compile legacy code. For\n new code using Fortran 95 pointers, the memory de-allocation intrinsic is\n@@ -5718,7 +5718,7 @@ See @code{GETPID} for an example.\n \n @table @asis\n @item @emph{Description}:\n-Given a system time value @var{TIME} (as provided by the @code{TIME8()}\n+Given a system time value @var{TIME} (as provided by the @code{TIME8}\n intrinsic), fills @var{VALUES} with values extracted from it appropriate\n to the UTC time zone (Universal Coordinated Time, also known in some\n countries as GMT, Greenwich Mean Time), using @code{gmtime(3)}.\n@@ -6109,7 +6109,7 @@ END PROGRAM\n \n @table @asis\n @item @emph{Description}:\n-@code{IARGC()} returns the number of arguments passed on the\n+@code{IARGC} returns the number of arguments passed on the\n command line when the containing program was invoked.\n \n This intrinsic routine is provided for backwards compatibility with \n@@ -6424,8 +6424,8 @@ the larger argument.)\n \n @table @asis\n @item @emph{Description}:\n-Returns the last system error number, as given by the C @code{errno()}\n-function.\n+Returns the last system error number, as given by the C @code{errno}\n+variable.\n \n @item @emph{Standard}:\n GNU extension\n@@ -8080,7 +8080,7 @@ To stat an open file: @ref{FSTAT}, to stat a file: @ref{STAT}\n \n @table @asis\n @item @emph{Description}:\n-Given a system time value @var{TIME} (as provided by the @code{TIME8()}\n+Given a system time value @var{TIME} (as provided by the @code{TIME8}\n intrinsic), fills @var{VALUES} with values extracted from it appropriate\n to the local time zone using @code{localtime(3)}.\n \n@@ -8559,7 +8559,7 @@ on the UNIX function @code{clock(3)}.\n \n @emph{Warning:} this intrinsic does not increase the range of the timing\n values over that returned by @code{clock(3)}. On a system with a 32-bit\n-@code{clock(3)}, @code{MCLOCK8()} will return a 32-bit value, even though\n+@code{clock(3)}, @code{MCLOCK8} will return a 32-bit value, even though\n it is converted to a 64-bit @code{INTEGER(8)} value. That means\n overflows of the 32-bit value can still occur. Therefore, the values\n returned by this intrinsic might be or become negative or numerically\n@@ -11792,9 +11792,9 @@ and environment-dependent.\n This intrinsic is provided in both subroutine and function forms;\n however, only one form can be used in any given program unit.\n \n-Note that the @code{system} call need not be thread-safe. It is the\n-responsibility of the user to ensure that @code{system} is not called\n-concurrently.\n+Note that the @code{system} function need not be thread-safe. It is\n+the responsibility of the user to ensure that @code{system} is not\n+called concurrently.\n \n @item @emph{Standard}:\n GNU extension\n@@ -12057,7 +12057,7 @@ END IF\n @item @emph{Description}:\n Returns the current time encoded as an integer (in the manner of the\n UNIX function @code{time(3)}). This value is suitable for passing to\n-@code{CTIME()}, @code{GMTIME()}, and @code{LTIME()}.\n+@code{CTIME}, @code{GMTIME}, and @code{LTIME}.\n \n This intrinsic is not fully portable, such as to systems with 32-bit\n @code{INTEGER} types but supporting times wider than 32 bits. Therefore,\n@@ -12098,11 +12098,11 @@ The return value is a scalar of type @code{INTEGER(4)}.\n @item @emph{Description}:\n Returns the current time encoded as an integer (in the manner of the\n UNIX function @code{time(3)}). This value is suitable for passing to\n-@code{CTIME()}, @code{GMTIME()}, and @code{LTIME()}.\n+@code{CTIME}, @code{GMTIME}, and @code{LTIME}.\n \n @emph{Warning:} this intrinsic does not increase the range of the timing\n values over that returned by @code{time(3)}. On a system with a 32-bit\n-@code{time(3)}, @code{TIME8()} will return a 32-bit value, even though\n+@code{time(3)}, @code{TIME8} will return a 32-bit value, even though\n it is converted to a 64-bit @code{INTEGER(8)} value. That means\n overflows of the 32-bit value can still occur. Therefore, the values\n returned by this intrinsic might be or become negative or numerically"}]}