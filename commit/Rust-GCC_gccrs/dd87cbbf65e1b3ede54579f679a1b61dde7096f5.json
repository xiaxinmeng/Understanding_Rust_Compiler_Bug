{"sha": "dd87cbbf65e1b3ede54579f679a1b61dde7096f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ4N2NiYmY2NWUxYjNlZGU1NDU3OWY2NzlhMWI2MWRkZTcwOTZmNQ==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2001-10-15T04:58:04Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2001-10-15T04:58:04Z"}, "message": "This commit was generated by cvs2svn to compensate for changes in r46260,\n\nwhich included commits to RCS files with non-trunk default branches.\n\nFrom-SVN: r46261", "tree": {"sha": "df0e6dfab7a0056ef9825b13fb86da367f4803a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df0e6dfab7a0056ef9825b13fb86da367f4803a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd87cbbf65e1b3ede54579f679a1b61dde7096f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd87cbbf65e1b3ede54579f679a1b61dde7096f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd87cbbf65e1b3ede54579f679a1b61dde7096f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd87cbbf65e1b3ede54579f679a1b61dde7096f5/comments", "author": null, "committer": null, "parents": [{"sha": "8a1dcd96e7ba9297ec1f69c23b8c38f508587d64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a1dcd96e7ba9297ec1f69c23b8c38f508587d64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a1dcd96e7ba9297ec1f69c23b8c38f508587d64"}], "stats": {"total": 28, "additions": 21, "deletions": 7}, "files": [{"sha": "72dd4133222945d92b350d8c20f7a8e90b3ad69a", "filename": "boehm-gc/Makefile.direct", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd87cbbf65e1b3ede54579f679a1b61dde7096f5/boehm-gc%2FMakefile.direct", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd87cbbf65e1b3ede54579f679a1b61dde7096f5/boehm-gc%2FMakefile.direct", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FMakefile.direct?ref=dd87cbbf65e1b3ede54579f679a1b61dde7096f5", "patch": "@@ -10,13 +10,20 @@\n #\t c++ interface to gc.a\n # cord/de - builds dumb editor based on cords.\n ABI_FLAG= \n+# ABI_FLAG should be the cc flag that specifies the ABI.  On most\n+# platforms this will be the empty string.  Possible values:\n+# +DD64 for 64-bit executable on HP/UX.\n+# -n32, -n64, -o32 for SGI/MIPS ABIs.\n+\n+AS_ABI_FLAG=$(ABI_FLAG)\n+# ABI flag for assembler.  On HP/UX this is +A64 for 64 bit\n+# executables.\n+\n CC=cc $(ABI_FLAG)\n CXX=g++ $(ABI_FLAG)\n-AS=as $(ABI_FLAG)\n+AS=as $(AS_ABI_FLAG)\n #  The above doesn't work with gas, which doesn't run cpp.\n #  Define AS as `gcc -c -x assembler-with-cpp' instead.\n-#  Under Irix 6, you will have to specify the ABI (-o32, -n32, or -64)\n-#  if you use something other than the default ABI on your machine.\n \n # Redefining srcdir allows object code for the nonPCR version of the collector\n # to be generated in different directories.\n@@ -54,12 +61,15 @@ HOSTCFLAGS=$(CFLAGS)\n #   gc.h before performing thr_ or dl* or GC_ operations.)\n #   Must also define -D_REENTRANT.\n # -DGC_SOLARIS_PTHREADS enables support for Solaris pthreads.\n-#   Define SOLARIS_THREADS as well.\n+#   (Internally this define GC_SOLARIS_THREADS as well.)\n # -DGC_IRIX_THREADS enables support for Irix pthreads.  See README.irix.\n # -DGC_HPUX_THREADS enables support for HP/UX 11 pthreads.\n #   Also requires -D_REENTRANT or -D_POSIX_C_SOURCE=199506L. See README.hp.\n # -DGC_LINUX_THREADS enables support for Xavier Leroy's Linux threads.\n #   see README.linux.  -D_REENTRANT may also be required.\n+# -DGC_OSF1_THREADS enables support for Tru64 pthreads.  Untested.\n+# -DGC_FREEBSD_THREADS enables support for FreeBSD pthreads.  Untested.\n+#   Appeared to run into some underlying thread problems.\n # -DALL_INTERIOR_POINTERS allows all pointers to the interior\n #   of objects to be recognized.  (See gc_priv.h for consequences.)\n #   Alternatively, GC_all_interior_pointers can be set at process\n@@ -191,8 +201,8 @@ HOSTCFLAGS=$(CFLAGS)\n #   15% or so.\n # -DUSE_3DNOW_PREFETCH causes the collector to issue AMD 3DNow style\n #   prefetch instructions.  Same restrictions as USE_I686_PREFETCH.\n-#   UNTESTED!!\n-# -DGC_USE_LD_WRAP in combination with the gld flags listed in README.linux\n+#   Minimally tested.  Didn't appear to be an obvious win on a K6-2/500.\n+# -DGC_USE_LD_WRAP in combination with the old flags listed in README.linux\n #   causes the collector some system and pthread calls in a more transparent\n #   fashion than the usual macro-based approach.  Requires GNU ld, and\n #   currently probably works only with Linux.\n@@ -242,7 +252,8 @@ SRCS= $(CSRCS) mips_sgi_mach_dep.s rs6000_mach_dep.s alpha_mach_dep.s \\\n     include/gc_local_alloc.h include/private/dbg_mlc.h \\\n     include/private/specific.h powerpc_macosx_mach_dep.s \\\n     include/leak_detector.h include/gc_amiga_redirects.h \\\n-    include/gc_pthread_redirects.h $(CORD_SRCS)\n+    include/gc_pthread_redirects.h ia64_save_regs_in_stack.s \\\n+    $(CORD_SRCS)\n \n DOC_FILES= README.QUICK doc/README.Mac doc/README.MacOSX doc/README.OS2 \\\n \tdoc/README.amiga doc/README.cords doc/debugging.html \\\n@@ -435,6 +446,9 @@ mach_dep.o: $(srcdir)/mach_dep.c $(srcdir)/mips_sgi_mach_dep.s $(srcdir)/mips_ul\n \t./if_mach SPARC SUNOS4 $(AS) -o mach_dep.o $(srcdir)/sparc_sunos4_mach_dep.s\n \t./if_mach SPARC OPENBSD $(AS) -o mach_dep.o $(srcdir)/sparc_sunos4_mach_dep.s\n \t./if_mach SPARC NETBSD $(AS) -o mach_dep.o $(srcdir)/sparc_netbsd_mach_dep.s\n+\t./if_mach IA64 HPUX as $(AS_ABI_FLAG) -o ia64_save_regs_in_stack.o $(srcdir)/ia64_save_regs_in_stack.s\n+\t./if_mach IA64 HPUX $(CC) -c -o mach_dep1.o $(SPECIALCFLAGS) $(srcdir)/mach_dep.c\n+\t./if_mach IA64 HPUX ld -r -o mach_dep.o mach_dep1.o ia64_save_regs_in_stack.o\n \t./if_not_there mach_dep.o $(CC) -c $(SPECIALCFLAGS) $(srcdir)/mach_dep.c\n \n mark_rts.o: $(srcdir)/mark_rts.c $(UTILS)"}]}