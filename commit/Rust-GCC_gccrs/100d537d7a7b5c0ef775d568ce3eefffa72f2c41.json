{"sha": "100d537d7a7b5c0ef775d568ce3eefffa72f2c41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAwZDUzN2Q3YTdiNWMwZWY3NzVkNTY4Y2UzZWVmZmZhNzJmMmM0MQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-10-24T10:09:06Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-10-24T10:09:06Z"}, "message": "re PR c/7543 (no warning for always-false \"if (!a & 0x4)\" bitwise and on boolean value)\n\n2008-10-24  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c/7543\n\t* value-prof.c (gimple_stringop_fixed_value): Use parentheses\n\taround bit operation.\n\t* profile.c (is_edge_inconsistent): Likewise.\n\t* fold-const.c (truth_value_p): Move from here...\n\t* tree.h (truth_value_p): ... to here.\n\t* c-tree.h (c_expr): Update description of original_code.\n\t* c-typeck.c (parser_build_unary_op): Set original_code.\n\t(parser_build_binary_op): Update call to warn_about_parentheses.\n\t* c-common.c (warn_about_parentheses): Take two additional\n\targuments of the operands. Use a switch. Quote operators\n\tappropriately. Define macro APPEARS_TO_BE_BOOLEAN_EXPR_P.\n\tAdd warning about !x | y and !x & y.\n\t* c-common.h (warn_about_parentheses): Update declaration.\ncp/\t\n\t* typeck.c (build_x_binary_op): Update call to\n\twarn_about_parentheses.\n\t* parser.c (cp_parser_binary_expression): Add note about passing\n\tthe correct code for unary expressions.\ntestsuite/\n\t* gcc.dg/Wparentheses-11.c: New.\n\t* g++.dg/warn/Wparentheses-25.C: New. XFAILED.\n\nFrom-SVN: r141340", "tree": {"sha": "700b750bc17a07e7749365330c49e0f595aaa435", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/700b750bc17a07e7749365330c49e0f595aaa435"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/100d537d7a7b5c0ef775d568ce3eefffa72f2c41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/100d537d7a7b5c0ef775d568ce3eefffa72f2c41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/100d537d7a7b5c0ef775d568ce3eefffa72f2c41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/100d537d7a7b5c0ef775d568ce3eefffa72f2c41/comments", "author": null, "committer": null, "parents": [{"sha": "950d63e12fd0a69731a4c1ae313135f2d47d30a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/950d63e12fd0a69731a4c1ae313135f2d47d30a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/950d63e12fd0a69731a4c1ae313135f2d47d30a9"}], "stats": {"total": 739, "additions": 666, "deletions": 73}, "files": [{"sha": "18b0e80e0241c4b059e487513c201714068ab7c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100d537d7a7b5c0ef775d568ce3eefffa72f2c41/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100d537d7a7b5c0ef775d568ce3eefffa72f2c41/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=100d537d7a7b5c0ef775d568ce3eefffa72f2c41", "patch": "@@ -1,3 +1,20 @@\n+2008-10-24  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/7543\n+\t* value-prof.c (gimple_stringop_fixed_value): Use parentheses\n+\taround bit operation.\n+\t* profile.c (is_edge_inconsistent): Likewise.\n+\t* fold-const.c (truth_value_p): Move from here...\n+\t* tree.h (truth_value_p): ... to here.\n+\t* c-tree.h (c_expr): Update description of original_code.\n+\t* c-typeck.c (parser_build_unary_op): Set original_code.\n+\t(parser_build_binary_op): Update call to warn_about_parentheses.\n+\t* c-common.c (warn_about_parentheses): Take two additional\n+\targuments of the operands. Use a switch. Quote operators\n+\tappropriately. Define macro APPEARS_TO_BE_BOOLEAN_EXPR_P.\n+\tAdd warning about !x | y and !x & y.\n+\t* c-common.h (warn_about_parentheses): Update declaration.\n+\n 2008-10-24  Jakub Jelinek  <jakub@redhat.com>\n \n \t* Makefile.in (lang_checks_parallelized, check_gcc_parallelize,"}, {"sha": "30acb7d0a43d3272dc37b79f549ae8efc015196a", "filename": "gcc/c-common.c", "status": "modified", "additions": 90, "deletions": 52, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100d537d7a7b5c0ef775d568ce3eefffa72f2c41/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100d537d7a7b5c0ef775d568ce3eefffa72f2c41/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=100d537d7a7b5c0ef775d568ce3eefffa72f2c41", "patch": "@@ -8076,94 +8076,132 @@ warn_array_subscript_with_type_char (tree index)\n /* Implement -Wparentheses for the unexpected C precedence rules, to\n    cover cases like x + y << z which readers are likely to\n    misinterpret.  We have seen an expression in which CODE is a binary\n-   operator used to combine expressions headed by CODE_LEFT and\n-   CODE_RIGHT.  CODE_LEFT and CODE_RIGHT may be ERROR_MARK, which\n-   means that that side of the expression was not formed using a\n-   binary operator, or it was enclosed in parentheses.  */\n+   operator used to combine expressions ARG_LEFT and ARG_RIGHT, which\n+   before folding had CODE_LEFT and CODE_RIGHT.  CODE_LEFT and\n+   CODE_RIGHT may be ERROR_MARK, which means that that side of the\n+   expression was not formed using a binary or unary operator, or it\n+   was enclosed in parentheses.  */\n \n void\n-warn_about_parentheses (enum tree_code code, enum tree_code code_left,\n-\t\t\tenum tree_code code_right)\n+warn_about_parentheses (enum tree_code code,\n+\t\t\tenum tree_code code_left, tree ARG_UNUSED (arg_left),\n+\t\t\tenum tree_code code_right, tree arg_right)\n {\n   if (!warn_parentheses)\n     return;\n \n-  if (code == LSHIFT_EXPR || code == RSHIFT_EXPR)\n+  /* This macro tests that the expression ARG with original tree code\n+     CODE appears to be a boolean expression. or the result of folding a\n+     boolean expression.  */\n+#define APPEARS_TO_BE_BOOLEAN_EXPR_P(CODE, ARG)                             \\\n+\t(truth_value_p (TREE_CODE (ARG))                                    \\\n+\t || TREE_CODE (TREE_TYPE (ARG)) == BOOLEAN_TYPE                     \\\n+\t /* Folding may create 0 or 1 integers from other expressions.  */  \\\n+\t || ((CODE) != INTEGER_CST                                          \\\n+\t     && (integer_onep (ARG) || integer_zerop (ARG))))\n+\n+  switch (code) \n     {\n-      if (code_left == PLUS_EXPR || code_left == MINUS_EXPR\n-\t  || code_right == PLUS_EXPR || code_right == MINUS_EXPR)\n+    case LSHIFT_EXPR:\n+      if (code_left == PLUS_EXPR || code_right == PLUS_EXPR)\n \twarning (OPT_Wparentheses,\n-\t\t \"suggest parentheses around + or - inside shift\");\n-    }\n+\t\t \"suggest parentheses around %<+%> inside %<<<%>\");\n+      else if (code_left == MINUS_EXPR || code_right == MINUS_EXPR)\n+\twarning (OPT_Wparentheses,\n+\t\t \"suggest parentheses around %<-%> inside %<<<%>\");\n+      return;\n \n-  if (code == TRUTH_ORIF_EXPR)\n-    {\n-      if (code_left == TRUTH_ANDIF_EXPR\n-\t  || code_right == TRUTH_ANDIF_EXPR)\n+    case RSHIFT_EXPR:\n+      if (code_left == PLUS_EXPR || code_right == PLUS_EXPR)\n \twarning (OPT_Wparentheses,\n-\t\t \"suggest parentheses around && within ||\");\n-    }\n+\t\t \"suggest parentheses around %<+%> inside %<>>%>\");\n+      else if (code_left == MINUS_EXPR || code_right == MINUS_EXPR)\n+\twarning (OPT_Wparentheses,\n+\t\t \"suggest parentheses around %<-%> inside %<>>%>\");\n+      return;\n \n-  if (code == BIT_IOR_EXPR)\n-    {\n+    case TRUTH_ORIF_EXPR:\n+      if (code_left == TRUTH_ANDIF_EXPR || code_right == TRUTH_ANDIF_EXPR)\n+\twarning (OPT_Wparentheses,\n+\t\t \"suggest parentheses around %<&&%> within %<||%>\");\n+      return;\n+\n+    case BIT_IOR_EXPR:\n       if (code_left == BIT_AND_EXPR || code_left == BIT_XOR_EXPR\n \t  || code_left == PLUS_EXPR || code_left == MINUS_EXPR\n \t  || code_right == BIT_AND_EXPR || code_right == BIT_XOR_EXPR\n \t  || code_right == PLUS_EXPR || code_right == MINUS_EXPR)\n \twarning (OPT_Wparentheses,\n-\t\t \"suggest parentheses around arithmetic in operand of |\");\n+\t\t \"suggest parentheses around arithmetic in operand of %<|%>\");\n       /* Check cases like x|y==z */\n-      if (TREE_CODE_CLASS (code_left) == tcc_comparison\n-\t  || TREE_CODE_CLASS (code_right) == tcc_comparison)\n+      else if (TREE_CODE_CLASS (code_left) == tcc_comparison\n+\t       || TREE_CODE_CLASS (code_right) == tcc_comparison)\n \twarning (OPT_Wparentheses,\n-\t\t \"suggest parentheses around comparison in operand of |\");\n-    }\n+\t\t \"suggest parentheses around comparison in operand of %<|%>\");\n+      /* Check cases like !x | y */\n+      else if (code_left == TRUTH_NOT_EXPR\n+\t       && !APPEARS_TO_BE_BOOLEAN_EXPR_P (code_right, arg_right))\n+\twarning (OPT_Wparentheses, \"suggest parentheses around operand of\"\n+\t\t \"%<!%> or change %<|%> to %<||%> or %<!%> to %<~%>\");\n+      return;\n \n-  if (code == BIT_XOR_EXPR)\n-    {\n+    case BIT_XOR_EXPR:\n       if (code_left == BIT_AND_EXPR\n \t  || code_left == PLUS_EXPR || code_left == MINUS_EXPR\n \t  || code_right == BIT_AND_EXPR\n \t  || code_right == PLUS_EXPR || code_right == MINUS_EXPR)\n \twarning (OPT_Wparentheses,\n-\t\t \"suggest parentheses around arithmetic in operand of ^\");\n+\t\t \"suggest parentheses around arithmetic in operand of %<^%>\");\n       /* Check cases like x^y==z */\n-      if (TREE_CODE_CLASS (code_left) == tcc_comparison\n-\t  || TREE_CODE_CLASS (code_right) == tcc_comparison)\n+      else if (TREE_CODE_CLASS (code_left) == tcc_comparison\n+\t       || TREE_CODE_CLASS (code_right) == tcc_comparison)\n \twarning (OPT_Wparentheses,\n-\t\t \"suggest parentheses around comparison in operand of ^\");\n-    }\n+\t\t \"suggest parentheses around comparison in operand of %<^%>\");\n+      return;\n \n-  if (code == BIT_AND_EXPR)\n-    {\n-      if (code_left == PLUS_EXPR || code_left == MINUS_EXPR\n-\t  || code_right == PLUS_EXPR || code_right == MINUS_EXPR)\n+    case BIT_AND_EXPR:\n+      if (code_left == PLUS_EXPR || code_right == PLUS_EXPR)\n+\twarning (OPT_Wparentheses,\n+\t\t \"suggest parentheses around %<+%> in operand of %<&%>\");\n+      else if (code_left == MINUS_EXPR || code_right == MINUS_EXPR)\n \twarning (OPT_Wparentheses,\n-\t\t \"suggest parentheses around + or - in operand of &\");\n+\t\t \"suggest parentheses around %<-%> in operand of %<&%>\");\n       /* Check cases like x&y==z */\n-      if (TREE_CODE_CLASS (code_left) == tcc_comparison\n-\t  || TREE_CODE_CLASS (code_right) == tcc_comparison)\n+      else if (TREE_CODE_CLASS (code_left) == tcc_comparison\n+\t       || TREE_CODE_CLASS (code_right) == tcc_comparison)\n \twarning (OPT_Wparentheses,\n-\t\t \"suggest parentheses around comparison in operand of &\");\n-    }\n+\t\t \"suggest parentheses around comparison in operand of %<&%>\");\n+      /* Check cases like !x & y */\n+      else if (code_left == TRUTH_NOT_EXPR\n+\t       && !APPEARS_TO_BE_BOOLEAN_EXPR_P (code_right, arg_right))\n+\twarning (OPT_Wparentheses, \"suggest parentheses around operand of\"\n+\t\t \"%<!%> or change %<&%> to %<&&%> or %<!%> to %<~%>\");\n+      return;\n \n-  if (code == EQ_EXPR || code == NE_EXPR)\n-    {\n+    case EQ_EXPR:\n       if (TREE_CODE_CLASS (code_left) == tcc_comparison\n           || TREE_CODE_CLASS (code_right) == tcc_comparison)\n \twarning (OPT_Wparentheses,\n-\t\t \"suggest parentheses around comparison in operand of %s\",\n-                 code == EQ_EXPR ? \"==\" : \"!=\");\n-    }\n-  else if (TREE_CODE_CLASS (code) == tcc_comparison)\n-    {\n-      if ((TREE_CODE_CLASS (code_left) == tcc_comparison\n-\t   && code_left != NE_EXPR && code_left != EQ_EXPR)\n-\t  || (TREE_CODE_CLASS (code_right) == tcc_comparison\n-\t      && code_right != NE_EXPR && code_right != EQ_EXPR))\n-\twarning (OPT_Wparentheses, \"comparisons like X<=Y<=Z do not \"\n+\t\t \"suggest parentheses around comparison in operand of %<==%>\");\n+      return;\n+    case NE_EXPR:\n+      if (TREE_CODE_CLASS (code_left) == tcc_comparison\n+          || TREE_CODE_CLASS (code_right) == tcc_comparison)\n+\twarning (OPT_Wparentheses,\n+\t\t \"suggest parentheses around comparison in operand of %<!=%>\");\n+      return;\n+\n+    default:\n+      if (TREE_CODE_CLASS (code) == tcc_comparison\n+\t   && ((TREE_CODE_CLASS (code_left) == tcc_comparison\n+\t\t&& code_left != NE_EXPR && code_left != EQ_EXPR)\n+\t       || (TREE_CODE_CLASS (code_right) == tcc_comparison\n+\t\t   && code_right != NE_EXPR && code_right != EQ_EXPR)))\n+\twarning (OPT_Wparentheses, \"comparisons like %<X<=Y<=Z%> do not \"\n \t\t \"have their mathematical meaning\");\n+      return;\n     }\n+#undef NOT_A_BOOLEAN_EXPR_P\n }\n \n /* If LABEL (a LABEL_DECL) has not been used, issue a warning.  */"}, {"sha": "be38a60e54d7dd0d542ce3d6ce4e41a21ee857af", "filename": "gcc/c-common.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100d537d7a7b5c0ef775d568ce3eefffa72f2c41/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100d537d7a7b5c0ef775d568ce3eefffa72f2c41/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=100d537d7a7b5c0ef775d568ce3eefffa72f2c41", "patch": "@@ -912,8 +912,9 @@ extern int complete_array_type (tree *, tree, bool);\n extern tree builtin_type_for_size (int, bool);\n \n extern void warn_array_subscript_with_type_char (tree);\n-extern void warn_about_parentheses (enum tree_code, enum tree_code,\n-\t\t\t\t    enum tree_code);\n+extern void warn_about_parentheses (enum tree_code,\n+\t\t\t\t    enum tree_code, tree,\n+\t\t\t\t    enum tree_code, tree);\n extern void warn_for_unused_label (tree label);\n extern void warn_for_div_by_zero (location_t, tree divisor);\n extern void warn_for_sign_compare (location_t,"}, {"sha": "b7430af4b08f8fc011dafe3752b0f8beebcfc858", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100d537d7a7b5c0ef775d568ce3eefffa72f2c41/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100d537d7a7b5c0ef775d568ce3eefffa72f2c41/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=100d537d7a7b5c0ef775d568ce3eefffa72f2c41", "patch": "@@ -151,7 +151,7 @@ struct c_expr\n {\n   /* The value of the expression.  */\n   tree value;\n-  /* Record the original binary operator of an expression, which may\n+  /* Record the original unary/binary operator of an expression, which may\n      have been changed by fold, STRING_CST for unparenthesized string\n      constants, or ERROR_MARK for other expressions (including\n      parenthesized expressions).  */"}, {"sha": "27564e655b4293810074e2fbb2c29e86f8483562", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100d537d7a7b5c0ef775d568ce3eefffa72f2c41/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100d537d7a7b5c0ef775d568ce3eefffa72f2c41/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=100d537d7a7b5c0ef775d568ce3eefffa72f2c41", "patch": "@@ -2748,9 +2748,9 @@ parser_build_unary_op (enum tree_code code, struct c_expr arg, location_t loc)\n {\n   struct c_expr result;\n \n-  result.original_code = ERROR_MARK;\n   result.value = build_unary_op (loc, code, arg.value, 0);\n-\n+  result.original_code = code;\n+  \n   if (TREE_OVERFLOW_P (result.value) && !TREE_OVERFLOW_P (arg.value))\n     overflow_warning (result.value);\n \n@@ -2787,7 +2787,7 @@ parser_build_binary_op (location_t location, enum tree_code code,\n   /* Check for cases such as x+y<<z which users are likely\n      to misinterpret.  */\n   if (warn_parentheses)\n-    warn_about_parentheses (code, code1, code2);\n+    warn_about_parentheses (code, code1, arg1.value, code2, arg2.value);\n \n   if (TREE_CODE_CLASS (code1) != tcc_comparison)\n     warn_logical_operator (code, arg1.value, arg2.value);"}, {"sha": "0293d49e833523071d134a4858bc1353d7e8b120", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100d537d7a7b5c0ef775d568ce3eefffa72f2c41/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100d537d7a7b5c0ef775d568ce3eefffa72f2c41/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=100d537d7a7b5c0ef775d568ce3eefffa72f2c41", "patch": "@@ -1,3 +1,11 @@\n+2008-10-24  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/7543\n+\t* typeck.c (build_x_binary_op): Update call to\n+\twarn_about_parentheses.\n+\t* parser.c (cp_parser_binary_expression): Add note about passing\n+\tthe correct code for unary expressions.\n+\n 2008-10-24  Jakub Jelinek  <jakub@redhat.com>\n \n \t* Make-lang.in (check-c++-subtargets): New alias for"}, {"sha": "75960483974738a018f0756c9048f8c97e3f5856", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100d537d7a7b5c0ef775d568ce3eefffa72f2c41/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100d537d7a7b5c0ef775d568ce3eefffa72f2c41/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=100d537d7a7b5c0ef775d568ce3eefffa72f2c41", "patch": "@@ -6205,6 +6205,13 @@ cp_parser_binary_expression (cp_parser* parser, bool cast_p,\n \t}\n \n       overloaded_p = false;\n+      /* ??? Currently we pass lhs_type == ERROR_MARK and rhs_type ==\n+\t ERROR_MARK for everything that is not a binary expression.\n+\t This makes warn_about_parentheses miss some warnings that\n+\t involve unary operators.  For unary expressions we should\n+\t pass the correct tree_code unless the unary expression was\n+\t surrounded by parentheses.\n+      */\n       lhs = build_x_binary_op (tree_type, lhs, lhs_type, rhs, rhs_type,\n \t\t\t       &overloaded_p, tf_warning_or_error);\n       lhs_type = tree_type;"}, {"sha": "84ebc953a9a1d916189b8e6c9d9f7d065b1302b3", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100d537d7a7b5c0ef775d568ce3eefffa72f2c41/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100d537d7a7b5c0ef775d568ce3eefffa72f2c41/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=100d537d7a7b5c0ef775d568ce3eefffa72f2c41", "patch": "@@ -3158,7 +3158,7 @@ build_x_binary_op (enum tree_code code, tree arg1, enum tree_code arg1_code,\n       && !error_operand_p (arg2)\n       && (code != LSHIFT_EXPR\n \t  || !CLASS_TYPE_P (TREE_TYPE (arg1))))\n-    warn_about_parentheses (code, arg1_code, arg2_code);\n+    warn_about_parentheses (code, arg1_code, orig_arg1, arg2_code, orig_arg2);\n \n   if (processing_template_decl && expr != error_mark_node)\n     return build_min_non_dep (code, expr, orig_arg1, orig_arg2);"}, {"sha": "1eac946e31b5601963e2b66dab46761369379573", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100d537d7a7b5c0ef775d568ce3eefffa72f2c41/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100d537d7a7b5c0ef775d568ce3eefffa72f2c41/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=100d537d7a7b5c0ef775d568ce3eefffa72f2c41", "patch": "@@ -105,7 +105,6 @@ static enum comparison_code comparison_to_compcode (enum tree_code);\n static enum tree_code compcode_to_comparison (enum comparison_code);\n static tree combine_comparisons (enum tree_code, enum tree_code,\n \t\t\t\t enum tree_code, tree, tree, tree);\n-static int truth_value_p (enum tree_code);\n static int operand_equal_for_comparison_p (tree, tree, tree);\n static int twoval_comparison_p (tree, tree *, tree *, int *);\n static tree eval_subst (tree, tree, tree, tree, tree);\n@@ -2981,17 +2980,6 @@ combine_comparisons (enum tree_code code, enum tree_code lcode,\n     return fold_build2 (compcode_to_comparison (compcode),\n \t\t\ttruth_type, ll_arg, lr_arg);\n }\n-\n-/* Return nonzero if CODE is a tree code that represents a truth value.  */\n-\n-static int\n-truth_value_p (enum tree_code code)\n-{\n-  return (TREE_CODE_CLASS (code) == tcc_comparison\n-\t  || code == TRUTH_AND_EXPR || code == TRUTH_ANDIF_EXPR\n-\t  || code == TRUTH_OR_EXPR || code == TRUTH_ORIF_EXPR\n-\t  || code == TRUTH_XOR_EXPR || code == TRUTH_NOT_EXPR);\n-}\n \f\n /* Return nonzero if two operands (typically of the same tree node)\n    are necessarily equal.  If either argument has side-effects this"}, {"sha": "c4c7276ffe0a09d6a59b0becdaaf3852fe1e2249", "filename": "gcc/profile.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100d537d7a7b5c0ef775d568ce3eefffa72f2c41/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100d537d7a7b5c0ef775d568ce3eefffa72f2c41/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=100d537d7a7b5c0ef775d568ce3eefffa72f2c41", "patch": "@@ -278,7 +278,7 @@ is_edge_inconsistent (VEC(edge,gc) *edges)\n       if (!EDGE_INFO (e)->ignore)\n         {\n           if (e->count < 0\n-\t      && ((!e->flags & EDGE_FAKE)\n+\t      && (!(e->flags & EDGE_FAKE)\n \t          || !block_ends_with_call_p (e->src)))\n \t    {\n \t      if (dump_file)"}, {"sha": "bf56e5370ac8649883821617ee94222247f716ae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100d537d7a7b5c0ef775d568ce3eefffa72f2c41/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100d537d7a7b5c0ef775d568ce3eefffa72f2c41/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=100d537d7a7b5c0ef775d568ce3eefffa72f2c41", "patch": "@@ -1,3 +1,9 @@\n+2008-10-24  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/7543\n+\t* gcc.dg/Wparentheses-11.c: New.\n+\t* g++.dg/warn/Wparentheses-25.C: New. XFAILED.\n+\n 2008-10-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/37882"}, {"sha": "ab00c25f02a2d59ad8eaa70ca6f7a8684cb16db1", "filename": "gcc/testsuite/g++.dg/warn/Wparentheses-25.C", "status": "added", "additions": 259, "deletions": 0, "changes": 259, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100d537d7a7b5c0ef775d568ce3eefffa72f2c41/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100d537d7a7b5c0ef775d568ce3eefffa72f2c41/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-25.C?ref=100d537d7a7b5c0ef775d568ce3eefffa72f2c41", "patch": "@@ -0,0 +1,259 @@\n+/* PR 7543. Test operation of -Wparentheses.  Precedence warnings.  \n+   !a | b and !a & b. */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wparentheses\" } */\n+// C++ version of Wparentheses-11.c\n+int foo (int);\n+\n+int\n+bar (int a, int b, int c)\n+{\n+  foo (!a & b); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a & (b < c));\n+  foo (!a & (b > c));\n+  foo (!a & (b == c));\n+  foo (!a & (b != c));\n+  foo (!a & (b <= c));\n+  foo (!a & (b >= c));\n+  foo (!a & (b && c));\n+  foo (!a & (b || c));\n+  foo (!a & !b);\n+  foo (!(a & b));\n+  foo ((!a) & b);\n+  foo (!a & 2); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a & (2 < c));\n+  foo (!a & (2 > c));\n+  foo (!a & (2 == c));\n+  foo (!a & (2 != c));\n+  foo (!a & (2 <= c));\n+  foo (!a & (2 >= c));\n+  foo (!a & (2 && c));\n+  foo (!a & (2 || c));\n+  foo (!a & !2);\n+  foo (!(a & 2));\n+  foo ((!a) & 2);\n+  foo (!1 & 2); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!1 & (2 < c));\n+  foo (!1 & (2 > c));\n+  foo (!1 & (2 == c));\n+  foo (!1 & (2 != c));\n+  foo (!1 & (2 <= c));\n+  foo (!1 & (2 >= c));\n+  foo (!1 & (2 && c));\n+  foo (!1 & (2 || c));\n+  foo (!1 & !2);\n+  foo (!(1 & 2));\n+\n+  foo (!a | b); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a | (b < c));\n+  foo (!a | (b > c));\n+  foo (!a | (b == c));\n+  foo (!a | (b != c));\n+  foo (!a | (b <= c));\n+  foo (!a | (b >= c));\n+  foo (!a | (b && c));\n+  foo (!a | (b || c));\n+  foo (!a | !b);\n+  foo (!(a | b));\n+  foo ((!a) | b);\n+  foo (!a | 2); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a | (2 < c));\n+  foo (!a | (2 > c));\n+  foo (!a | (2 == c));\n+  foo (!a | (2 != c));\n+  foo (!a | (2 <= c));\n+  foo (!a | (2 >= c));\n+  foo (!a | (2 && c));\n+  foo (!a | (2 || c));\n+  foo (!a | !2);\n+  foo (!(a | 2));\n+  foo ((!a) | 2);\n+  foo (!1 | 2); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!1 | (2 < c));\n+  foo (!1 | (2 > c));\n+  foo (!1 | (2 == c));\n+  foo (!1 | (2 != c));\n+  foo (!1 | (2 <= c));\n+  foo (!1 | (2 >= c));\n+  foo (!1 | (2 && c));\n+  foo (!1 | (2 || c));\n+  foo (!1 | !2);\n+  foo (!(1 | 2));\n+  foo ((!1) | 2);\n+\n+  foo (b & !a); /* { dg-bogus \"parentheses\" \"bogus warning\" } */\n+  foo ((b < c) & !a);\n+  foo ((b > c) & !a);\n+  foo ((b == c) & !a);\n+  foo ((b != c) & !a);\n+  foo ((b <= c) & !a);\n+  foo ((b >= c) & !a);\n+  foo ((b && c) & !a);\n+  foo ((b || c) & !a);\n+  foo (!b & !a);\n+  foo (!(b & a));\n+  foo (b & (!a));\n+  foo (2 & !a); /* { dg-bogus \"parentheses\" \"correct warning\" } */\n+  foo ((2 < c) & !a);\n+  foo ((2 > c) & !a);\n+  foo ((2 == c) & !a);\n+  foo ((2 != c) & !a);\n+  foo ((2 <= c) & !a);\n+  foo ((2 >= c) & !a);\n+  foo ((2 && c) & !a);\n+  foo ((2 || c) & !a);\n+  foo (!2 & !a);\n+  foo (!(2 & a));\n+  foo (2 & (!a));\n+  foo (2 & !1); /* { dg-bogus \"parentheses\" \"correct warning\" } */\n+  foo ((2 < c) & !1);\n+  foo ((2 > c) & !1);\n+  foo ((2 == c) & !1);\n+  foo ((2 != c) & !1);\n+  foo ((2 <= c) & !1);\n+  foo ((2 >= c) & !1);\n+  foo ((2 && c) & !1);\n+  foo ((2 || c) & !1);\n+  foo (!2 & !1);\n+  foo (!(2 & 1));\n+\n+  foo (b | !a); /* { dg-bogus \"parentheses\" \"correct warning\" } */\n+  foo ((b < c) | !a);\n+  foo ((b > c) | !a);\n+  foo ((b == c) | !a);\n+  foo ((b != c) | !a);\n+  foo ((b <= c) | !a);\n+  foo ((b >= c) | !a);\n+  foo ((b && c) | !a);\n+  foo ((b || c) | !a);\n+  foo (!b | !a);\n+  foo (!(b | a));\n+  foo (b | (!a));\n+  foo (2 | !a); /* { dg-bogus \"parentheses\" \"correct warning\" } */\n+  foo ((2 < c) | !a);\n+  foo ((2 > c) | !a);\n+  foo ((2 == c) | !a);\n+  foo ((2 != c) | !a);\n+  foo ((2 <= c) | !a);\n+  foo ((2 >= c) | !a);\n+  foo ((2 && c) | !a);\n+  foo ((2 || c) | !a);\n+  foo (!2 | !a);\n+  foo (!(2 | a));\n+  foo (2 | (!a));\n+  foo (2 | !1); /* { dg-bogus \"parentheses\" \"correct warning\" } */\n+  foo ((2 < c) | !1);\n+  foo ((2 > c) | !1);\n+  foo ((2 == c) | !1);\n+  foo ((2 != c) | !1);\n+  foo ((2 <= c) | !1);\n+  foo ((2 >= c) | !1);\n+  foo ((2 && c) | !1);\n+  foo ((2 || c) | !1);\n+  foo (!2 | !1);\n+  foo (!(2 | 1));\n+  foo (2 | (!1));\n+}\n+\n+\n+int\n+baz (int a, int b, int c)\n+{\n+  foo (!a & (b << c));/* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a & (b >> c));/* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a & (b + c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a & (b - c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a & (b = c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a & ~b);      /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a & (b & c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a & (b | c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a & 2);       /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a & (2 << c));/* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a & (2 >> c));/* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a & (2 + c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a & (2 - c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a & (c = 2)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a & ~2);      /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a & (2 & c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a & (2 | c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!1 & (2 << c));/* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!1 & (2 >> c));/* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!1 & (2 + c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!1 & (2 - c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!1 & (c = 2)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!1 & ~2);      /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!1 & (2 & c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!1 & (2 | c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a | (b << c));/* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a | (b >> c));/* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a | (b + c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a | (b - c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a | (b = c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a | ~b);      /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a | (b & c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a | (b | c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a | (2 << c));/* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a | (2 >> c));/* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a | (2 + c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a | (2 - c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a | (c = 2)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a | ~2);      /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a | (2 & c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a | (2 | c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!1 | (2 << c));/* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!1 | (2 >> c));/* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!1 | (2 + c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!1 | (2 - c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!1 | (c = 2)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!1 | ~2);      /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!1 | (2 & c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!1 | (2 | c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo ((b << c) & !a);\n+  foo ((b >> c) & !a);\n+  foo ((b + c) & !a);\n+  foo ((b - c) & !a);\n+  foo ((b = c) & !a);\n+  foo (~b & !a);\n+  foo ((b & c) & !a);\n+  foo ((b | c) & !a);\n+  foo ((2 << c) & !a);\n+  foo ((2 >> c) & !a);\n+  foo ((2 + c) & !a);\n+  foo ((2 - c) & !a);\n+  foo ((c = 2) & !a);\n+  foo (~2 & !a);\n+  foo ((2 & c) & !a);\n+  foo ((2 | c) & !a);\n+  foo ((2 << c) & !1);\n+  foo ((2 >> c) & !1);\n+  foo ((2 + c) & !1);\n+  foo ((2 - c) & !1);\n+  foo ((c = 2) & !1);\n+  foo (~2 & !1);\n+  foo ((2 & c) & !1);\n+  foo ((2 | c) & !1);\n+  foo ((b << c) | !a);\n+  foo ((b >> c) | !a);\n+  foo ((b + c) | !a);\n+  foo ((b - c) | !a);\n+  foo ((b = c) | !a);\n+  foo (~b | !a);\n+  foo ((b & c) | !a);\n+  foo ((b | c) | !a);\n+  foo ((2 << c) | !a);\n+  foo ((2 >> c) | !a);\n+  foo ((2 + c) | !a);\n+  foo ((2 - c) | !a);\n+  foo ((c = 2) | !a);\n+  foo (~2 | !a);\n+  foo ((2 & c) | !a);\n+  foo ((2 | c) | !a);\n+  foo ((2 << c) | !1);\n+  foo ((2 >> c) | !1);\n+  foo ((2 + c) | !1);\n+  foo ((2 - c) | !1);\n+  foo ((c = 2) | !1);\n+  foo (~2 | !1);\n+  foo ((2 & c) | !1);\n+  foo ((2 | c) | !1);\n+}"}, {"sha": "8858a7fb3f02ae5900f0d038cd2f19f99fe458de", "filename": "gcc/testsuite/gcc.dg/Wparentheses-11.c", "status": "added", "additions": 258, "deletions": 0, "changes": 258, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100d537d7a7b5c0ef775d568ce3eefffa72f2c41/gcc%2Ftestsuite%2Fgcc.dg%2FWparentheses-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100d537d7a7b5c0ef775d568ce3eefffa72f2c41/gcc%2Ftestsuite%2Fgcc.dg%2FWparentheses-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWparentheses-11.c?ref=100d537d7a7b5c0ef775d568ce3eefffa72f2c41", "patch": "@@ -0,0 +1,258 @@\n+/* PR 7543. Test operation of -Wparentheses.  Precedence warnings.  \n+   !a | b and !a & b. */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wparentheses\" } */\n+\n+int foo (int);\n+\n+int\n+bar (int a, int b, int c)\n+{\n+  foo (!a & b); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a & (b < c));\n+  foo (!a & (b > c));\n+  foo (!a & (b == c));\n+  foo (!a & (b != c));\n+  foo (!a & (b <= c));\n+  foo (!a & (b >= c));\n+  foo (!a & (b && c));\n+  foo (!a & (b || c));\n+  foo (!a & !b);\n+  foo (!(a & b));\n+  foo ((!a) & b);\n+  foo (!a & 2); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a & (2 < c));\n+  foo (!a & (2 > c));\n+  foo (!a & (2 == c));\n+  foo (!a & (2 != c));\n+  foo (!a & (2 <= c));\n+  foo (!a & (2 >= c));\n+  foo (!a & (2 && c));\n+  foo (!a & (2 || c));\n+  foo (!a & !2);\n+  foo (!(a & 2));\n+  foo ((!a) & 2);\n+  foo (!1 & 2); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!1 & (2 < c));\n+  foo (!1 & (2 > c));\n+  foo (!1 & (2 == c));\n+  foo (!1 & (2 != c));\n+  foo (!1 & (2 <= c));\n+  foo (!1 & (2 >= c));\n+  foo (!1 & (2 && c));\n+  foo (!1 & (2 || c));\n+  foo (!1 & !2);\n+  foo (!(1 & 2));\n+\n+  foo (!a | b); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a | (b < c));\n+  foo (!a | (b > c));\n+  foo (!a | (b == c));\n+  foo (!a | (b != c));\n+  foo (!a | (b <= c));\n+  foo (!a | (b >= c));\n+  foo (!a | (b && c));\n+  foo (!a | (b || c));\n+  foo (!a | !b);\n+  foo (!(a | b));\n+  foo ((!a) | b);\n+  foo (!a | 2); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a | (2 < c));\n+  foo (!a | (2 > c));\n+  foo (!a | (2 == c));\n+  foo (!a | (2 != c));\n+  foo (!a | (2 <= c));\n+  foo (!a | (2 >= c));\n+  foo (!a | (2 && c));\n+  foo (!a | (2 || c));\n+  foo (!a | !2);\n+  foo (!(a | 2));\n+  foo ((!a) | 2);\n+  foo (!1 | 2); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!1 | (2 < c));\n+  foo (!1 | (2 > c));\n+  foo (!1 | (2 == c));\n+  foo (!1 | (2 != c));\n+  foo (!1 | (2 <= c));\n+  foo (!1 | (2 >= c));\n+  foo (!1 | (2 && c));\n+  foo (!1 | (2 || c));\n+  foo (!1 | !2);\n+  foo (!(1 | 2));\n+  foo ((!1) | 2);\n+\n+  foo (b & !a); /* { dg-bogus \"parentheses\" \"bogus warning\" } */\n+  foo ((b < c) & !a);\n+  foo ((b > c) & !a);\n+  foo ((b == c) & !a);\n+  foo ((b != c) & !a);\n+  foo ((b <= c) & !a);\n+  foo ((b >= c) & !a);\n+  foo ((b && c) & !a);\n+  foo ((b || c) & !a);\n+  foo (!b & !a);\n+  foo (!(b & a));\n+  foo (b & (!a));\n+  foo (2 & !a); /* { dg-bogus \"parentheses\" \"correct warning\" } */\n+  foo ((2 < c) & !a);\n+  foo ((2 > c) & !a);\n+  foo ((2 == c) & !a);\n+  foo ((2 != c) & !a);\n+  foo ((2 <= c) & !a);\n+  foo ((2 >= c) & !a);\n+  foo ((2 && c) & !a);\n+  foo ((2 || c) & !a);\n+  foo (!2 & !a);\n+  foo (!(2 & a));\n+  foo (2 & (!a));\n+  foo (2 & !1); /* { dg-bogus \"parentheses\" \"correct warning\" } */\n+  foo ((2 < c) & !1);\n+  foo ((2 > c) & !1);\n+  foo ((2 == c) & !1);\n+  foo ((2 != c) & !1);\n+  foo ((2 <= c) & !1);\n+  foo ((2 >= c) & !1);\n+  foo ((2 && c) & !1);\n+  foo ((2 || c) & !1);\n+  foo (!2 & !1);\n+  foo (!(2 & 1));\n+\n+  foo (b | !a); /* { dg-bogus \"parentheses\" \"correct warning\" } */\n+  foo ((b < c) | !a);\n+  foo ((b > c) | !a);\n+  foo ((b == c) | !a);\n+  foo ((b != c) | !a);\n+  foo ((b <= c) | !a);\n+  foo ((b >= c) | !a);\n+  foo ((b && c) | !a);\n+  foo ((b || c) | !a);\n+  foo (!b | !a);\n+  foo (!(b | a));\n+  foo (b | (!a));\n+  foo (2 | !a); /* { dg-bogus \"parentheses\" \"correct warning\" } */\n+  foo ((2 < c) | !a);\n+  foo ((2 > c) | !a);\n+  foo ((2 == c) | !a);\n+  foo ((2 != c) | !a);\n+  foo ((2 <= c) | !a);\n+  foo ((2 >= c) | !a);\n+  foo ((2 && c) | !a);\n+  foo ((2 || c) | !a);\n+  foo (!2 | !a);\n+  foo (!(2 | a));\n+  foo (2 | (!a));\n+  foo (2 | !1); /* { dg-bogus \"parentheses\" \"correct warning\" } */\n+  foo ((2 < c) | !1);\n+  foo ((2 > c) | !1);\n+  foo ((2 == c) | !1);\n+  foo ((2 != c) | !1);\n+  foo ((2 <= c) | !1);\n+  foo ((2 >= c) | !1);\n+  foo ((2 && c) | !1);\n+  foo ((2 || c) | !1);\n+  foo (!2 | !1);\n+  foo (!(2 | 1));\n+  foo (2 | (!1));\n+}\n+\n+int\n+baz (int a, int b, int c)\n+{\n+  foo (!a & (b << c));/* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a & (b >> c));/* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a & (b + c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a & (b - c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a & (b = c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a & ~b);      /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a & (b & c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a & (b | c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a & 2);       /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a & (2 << c));/* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a & (2 >> c));/* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a & (2 + c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a & (2 - c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a & (c = 2)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a & ~2);      /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a & (2 & c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a & (2 | c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!1 & (2 << c));/* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!1 & (2 >> c));/* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!1 & (2 + c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!1 & (2 - c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!1 & (c = 2)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!1 & ~2);      /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!1 & (2 & c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!1 & (2 | c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a | (b << c));/* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a | (b >> c));/* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a | (b + c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a | (b - c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a | (b = c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a | ~b);      /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a | (b & c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a | (b | c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a | (2 << c));/* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a | (2 >> c));/* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a | (2 + c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a | (2 - c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a | (c = 2)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a | ~2);      /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a | (2 & c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a | (2 | c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!1 | (2 << c));/* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!1 | (2 >> c));/* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!1 | (2 + c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!1 | (2 - c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!1 | (c = 2)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!1 | ~2);      /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!1 | (2 & c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!1 | (2 | c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo ((b << c) & !a);\n+  foo ((b >> c) & !a);\n+  foo ((b + c) & !a);\n+  foo ((b - c) & !a);\n+  foo ((b = c) & !a);\n+  foo (~b & !a);\n+  foo ((b & c) & !a);\n+  foo ((b | c) & !a);\n+  foo ((2 << c) & !a);\n+  foo ((2 >> c) & !a);\n+  foo ((2 + c) & !a);\n+  foo ((2 - c) & !a);\n+  foo ((c = 2) & !a);\n+  foo (~2 & !a);\n+  foo ((2 & c) & !a);\n+  foo ((2 | c) & !a);\n+  foo ((2 << c) & !1);\n+  foo ((2 >> c) & !1);\n+  foo ((2 + c) & !1);\n+  foo ((2 - c) & !1);\n+  foo ((c = 2) & !1);\n+  foo (~2 & !1);\n+  foo ((2 & c) & !1);\n+  foo ((2 | c) & !1);\n+  foo ((b << c) | !a);\n+  foo ((b >> c) | !a);\n+  foo ((b + c) | !a);\n+  foo ((b - c) | !a);\n+  foo ((b = c) | !a);\n+  foo (~b | !a);\n+  foo ((b & c) | !a);\n+  foo ((b | c) | !a);\n+  foo ((2 << c) | !a);\n+  foo ((2 >> c) | !a);\n+  foo ((2 + c) | !a);\n+  foo ((2 - c) | !a);\n+  foo ((c = 2) | !a);\n+  foo (~2 | !a);\n+  foo ((2 & c) | !a);\n+  foo ((2 | c) | !a);\n+  foo ((2 << c) | !1);\n+  foo ((2 >> c) | !1);\n+  foo ((2 + c) | !1);\n+  foo ((2 - c) | !1);\n+  foo ((c = 2) | !1);\n+  foo (~2 | !1);\n+  foo ((2 & c) | !1);\n+  foo ((2 | c) | !1);\n+}"}, {"sha": "a85b4c6dbb17ca0d47281a7daa212b4cdf437e02", "filename": "gcc/tree.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100d537d7a7b5c0ef775d568ce3eefffa72f2c41/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100d537d7a7b5c0ef775d568ce3eefffa72f2c41/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=100d537d7a7b5c0ef775d568ce3eefffa72f2c41", "patch": "@@ -4838,6 +4838,17 @@ extern bool tree_expr_nonzero_warnv_p (tree, bool *);\n \n extern bool fold_real_zero_addition_p (const_tree, const_tree, int);\n \n+/* Return nonzero if CODE is a tree code that represents a truth value.  */\n+static inline bool\n+truth_value_p (enum tree_code code)\n+{\n+  return (TREE_CODE_CLASS (code) == tcc_comparison\n+\t  || code == TRUTH_AND_EXPR || code == TRUTH_ANDIF_EXPR\n+\t  || code == TRUTH_OR_EXPR || code == TRUTH_ORIF_EXPR\n+\t  || code == TRUTH_XOR_EXPR || code == TRUTH_NOT_EXPR);\n+}\n+\n+\n /* In builtins.c */\n extern tree fold_call_expr (tree, bool);\n extern tree fold_builtin_fputs (tree, tree, bool, bool, tree);"}, {"sha": "120a68d61e8a17aac81d2409baea1eeb632bd465", "filename": "gcc/value-prof.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100d537d7a7b5c0ef775d568ce3eefffa72f2c41/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100d537d7a7b5c0ef775d568ce3eefffa72f2c41/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=100d537d7a7b5c0ef775d568ce3eefffa72f2c41", "patch": "@@ -1296,7 +1296,7 @@ gimple_stringop_fixed_value (gimple stmt, tree value, int prob, gcov_type count,\n     {\n       edge_iterator ei;\n       for (ei = ei_start (bb->succs); (e34 = ei_safe_edge (ei)); )\n-\tif (!e34->flags & EDGE_ABNORMAL)\n+\tif (!(e34->flags & EDGE_ABNORMAL))\n \t  break;\n     }\n   else"}]}