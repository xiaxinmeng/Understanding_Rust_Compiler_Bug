{"sha": "3424f4c34d04541005ca6d255a04d5f2f613f6b0", "node_id": "C_kwDOANBUbNoAKDM0MjRmNGMzNGQwNDU0MTAwNWNhNmQyNTVhMDRkNWYyZjYxM2Y2YjA", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2022-08-02T17:46:36Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-09-05T07:21:07Z"}, "message": "[Ada] Move check for null array aggregates to expansion\n\nDespite recent changes to runtime checks for null array aggregates,\nGNATprove still struggles with N_Raise_Constraint_Error nodes inserted\ninto AST by aggregate resolution. The ultimate fix is to move these\nchecks to expansion (which is disabled in GNATprove mode) and explicitly\nemit a proof check in the GNATprove backend.\n\ngcc/ada/\n\n\t* exp_aggr.adb (Check_Bounds): Move code and comment related to\n\tcheck for null array aggregate from Resolve_Null_Array_Aggregate.\n\t* sem_aggr.ads (Is_Null_Aggregate): Move spec from unit body.\n\t* sem_aggr.adb (Resolve_Null_Array_Aggregate): Move check to\n\texpansion.", "tree": {"sha": "efa54da3d9ff5756360361bbfac72ad039c5a8e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efa54da3d9ff5756360361bbfac72ad039c5a8e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3424f4c34d04541005ca6d255a04d5f2f613f6b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3424f4c34d04541005ca6d255a04d5f2f613f6b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3424f4c34d04541005ca6d255a04d5f2f613f6b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3424f4c34d04541005ca6d255a04d5f2f613f6b0/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59a23beb9e71a0259b076693dd1e551500c08f24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59a23beb9e71a0259b076693dd1e551500c08f24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59a23beb9e71a0259b076693dd1e551500c08f24"}], "stats": {"total": 43, "additions": 22, "deletions": 21}, "files": [{"sha": "185705544e93b6699e85aee5cec6ae4458f3d42d", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3424f4c34d04541005ca6d255a04d5f2f613f6b0/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3424f4c34d04541005ca6d255a04d5f2f613f6b0/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=3424f4c34d04541005ca6d255a04d5f2f613f6b0", "patch": "@@ -5734,7 +5734,8 @@ package body Exp_Aggr is\n \n       procedure Check_Bounds (Aggr_Bounds_Node, Index_Bounds_Node : Node_Id);\n       --  Checks that the bounds of Aggr_Bounds are within the bounds defined\n-      --  by Index_Bounds.\n+      --  by Index_Bounds. For null array aggregate (Ada 2022) check that the\n+      --  aggregate bounds define a null range.\n \n       procedure Check_Same_Aggr_Bounds (Sub_Aggr : Node_Id; Dim : Pos);\n       --  Checks that in a multidimensional array aggregate all subaggregates\n@@ -5850,6 +5851,22 @@ package body Exp_Aggr is\n          Cond : Node_Id := Empty;\n \n       begin\n+         --  For a null array aggregate check that high bound (i.e., low\n+         --  bound predecessor) exists. Fail if low bound is low bound of\n+         --  base subtype (in all cases, including modular).\n+\n+         if Is_Null_Aggregate (N) then\n+            Insert_Action (N,\n+              Make_Raise_Constraint_Error (Loc,\n+                Condition =>\n+                  Make_Op_Eq (Loc,\n+                    New_Copy_Tree (Aggr_Bounds.First),\n+                    New_Copy_Tree\n+                      (Type_Low_Bound (Base_Type (Etype (Ind_Bounds.First))))),\n+                Reason    => CE_Range_Check_Failed));\n+            return;\n+         end if;\n+\n          --  Generate the following test:\n \n          --    [constraint_error when"}, {"sha": "258e4ad47b6a2ff910aee69fd744c5ffda1eb3fb", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3424f4c34d04541005ca6d255a04d5f2f613f6b0/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3424f4c34d04541005ca6d255a04d5f2f613f6b0/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=3424f4c34d04541005ca6d255a04d5f2f613f6b0", "patch": "@@ -404,10 +404,6 @@ package body Sem_Aggr is\n    --  The bounds of the aggregate itype are cooked up to look reasonable\n    --  (in this particular case the bounds will be 1 .. 2).\n \n-   function Is_Null_Aggregate (N : Node_Id) return Boolean;\n-   --  Returns True for a \"[]\" aggregate (an Ada 2022 feature), even after\n-   --  it has been transformed by expansion. Returns False otherwise.\n-\n    procedure Make_String_Into_Aggregate (N : Node_Id);\n    --  A string literal can appear in a context in which a one dimensional\n    --  array of characters is expected. This procedure simply rewrites the\n@@ -419,9 +415,6 @@ package body Sem_Aggr is\n    --  is constrained). If the subtype is unconstrained, then the bounds\n    --  are determined in much the same way as the bounds for a null string\n    --  literal with no applicable index constraint.\n-   --  Emit a check that the bounds for each dimension define a null\n-   --  range; no check is emitted if it is statically known that the\n-   --  check would succeed.\n \n    ---------------------------------\n    --  Delta aggregate processing --\n@@ -4102,7 +4095,6 @@ package body Sem_Aggr is\n       Loc    : constant Source_Ptr := Sloc (N);\n       Typ    : constant Entity_Id := Etype (N);\n \n-      Check  : Node_Id;\n       Index  : Node_Id;\n       Lo, Hi : Node_Id;\n       Constr : constant List_Id := New_List;\n@@ -4127,18 +4119,6 @@ package body Sem_Aggr is\n              Attribute_Name => Name_Pred,\n              Expressions    => New_List (New_Copy_Tree (Lo)));\n \n-         --  Check that high bound (i.e., low bound predecessor) exists.\n-         --  Fail if low bound is low bound of base subtype (in all cases,\n-         --  including modular).\n-\n-         Check :=\n-           Make_Raise_Constraint_Error (Loc,\n-             Condition =>\n-               Make_Op_Le (Loc, New_Copy_Tree (Lo), New_Copy_Tree (Hi)),\n-             Reason => CE_Range_Check_Failed);\n-\n-         Insert_Action (N, Check);\n-\n          Append (Make_Range (Loc, New_Copy_Tree (Lo), Hi), Constr);\n          Analyze_And_Resolve (Last (Constr), Etype (Index));\n "}, {"sha": "0d305a8923fde132e688327988e96d4d81067e04", "filename": "gcc/ada/sem_aggr.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3424f4c34d04541005ca6d255a04d5f2f613f6b0/gcc%2Fada%2Fsem_aggr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3424f4c34d04541005ca6d255a04d5f2f613f6b0/gcc%2Fada%2Fsem_aggr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.ads?ref=3424f4c34d04541005ca6d255a04d5f2f613f6b0", "patch": "@@ -43,6 +43,10 @@ package Sem_Aggr is\n \n    --  WARNING: There is a matching C declaration of this subprogram in fe.h\n \n+   function Is_Null_Aggregate (N : Node_Id) return Boolean;\n+   --  Returns True for a \"[]\" aggregate (an Ada 2022 feature), even after\n+   --  it has been transformed by expansion. Returns False otherwise.\n+\n    function Is_Null_Array_Aggregate_High_Bound (N : Node_Id) return Boolean;\n    --  Returns True for the high bound of a null array aggregate.\n "}]}