{"sha": "3ce1ba83d698f792310b7880703dc8b351f82bd2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NlMWJhODNkNjk4Zjc5MjMxMGI3ODgwNzAzZGM4YjM1MWY4MmJkMg==", "commit": {"author": {"name": "Gavin Romig-Koch", "email": "gavin@cygnus.com", "date": "1999-03-16T08:04:00Z"}, "committer": {"name": "Gavin Romig-Koch", "email": "gavin@gcc.gnu.org", "date": "1999-03-16T08:04:00Z"}, "message": "invoke.texi: Add -mlong32 documentation.\n\n\t* invoke.texi: Add -mlong32 documentation.\n\t* config/mips/mips.h (mips_explicit_type_size_string): New.\n\t(TARGET_SWITCHES): Add 'long32'.\n\t(TARGET_OPTIONS): Add 'explicit-type-size'.\n\t(CC1_SPECS): Set -mexplicit-type-size.\n        (LONG_MAX_SPEC): Change a use of 'no-long64' to 'long32'.\n\t* config/mips/abi64.h (LONG_MAX_SPEC): Same.  Add 'mabi=32'.\n\t* config/mips/mips.c (mips_explicit_type_size_string): New.\n\t(override_options): Use it.\n\t* config/mips/osfrose.h (CC1_SPECS): Set -mexplicit-type-size.\n\t* config/mips/mips.h (SUBTARGET_CPP_SIZE_SPEC):\n\tPointer size now depends on both size longs and size of GP\n\tregisters.\n\nFrom-SVN: r25799", "tree": {"sha": "daec3e61df962dddb93f254864391c683cec34d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/daec3e61df962dddb93f254864391c683cec34d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ce1ba83d698f792310b7880703dc8b351f82bd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ce1ba83d698f792310b7880703dc8b351f82bd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ce1ba83d698f792310b7880703dc8b351f82bd2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ce1ba83d698f792310b7880703dc8b351f82bd2/comments", "author": null, "committer": null, "parents": [{"sha": "fb1bf66d61d4ca57367230000babd5ab9c50b6c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb1bf66d61d4ca57367230000babd5ab9c50b6c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb1bf66d61d4ca57367230000babd5ab9c50b6c1"}], "stats": {"total": 68, "additions": 54, "deletions": 14}, "files": [{"sha": "17955b8f6bd24ac6e01b38df90ec0650de9aa5c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ce1ba83d698f792310b7880703dc8b351f82bd2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ce1ba83d698f792310b7880703dc8b351f82bd2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ce1ba83d698f792310b7880703dc8b351f82bd2", "patch": "@@ -1,3 +1,20 @@\n+Tue Mar 16 10:53:17 1999  Gavin Romig-Koch  <gavin@cygnus.com>\n+\n+\t* invoke.texi: Add -mlong32 documentation.\n+\t* config/mips/mips.h (mips_explicit_type_size_string): New.\n+\t(TARGET_SWITCHES): Add 'long32'.\n+\t(TARGET_OPTIONS): Add 'explicit-type-size'.\n+\t(CC1_SPECS): Set -mexplicit-type-size.\n+        (LONG_MAX_SPEC): Change a use of 'no-long64' to 'long32'.\n+\t* config/mips/abi64.h (LONG_MAX_SPEC): Same.  Add 'mabi=32'.\n+\t* config/mips/mips.c (mips_explicit_type_size_string): New.\n+\t(override_options): Use it.\n+\t* config/mips/osfrose.h (CC1_SPECS): Set -mexplicit-type-size.\n+\n+\t* config/mips/mips.h (SUBTARGET_CPP_SIZE_SPEC): \n+\tPointer size now depends on both size longs and size of GP\n+\tregisters.\n+\n Tue Mar 16 10:22:22 1999  Gavin Romig-Koch  <gavin@cygnus.com>\n \n \t* config/mips/iris.h (CTORS_SECTION_ASM_OP,DTORS_SECTION_ASM_OP,"}, {"sha": "e1748791da7efed49b46470db30e7fe25498e3d8", "filename": "gcc/config/mips/abi64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ce1ba83d698f792310b7880703dc8b351f82bd2/gcc%2Fconfig%2Fmips%2Fabi64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ce1ba83d698f792310b7880703dc8b351f82bd2/gcc%2Fconfig%2Fmips%2Fabi64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fabi64.h?ref=3ce1ba83d698f792310b7880703dc8b351f82bd2", "patch": "@@ -223,7 +223,7 @@ extern struct rtx_def *mips_function_value ();\n #undef LONG_MAX_SPEC\n #if ((MIPS_ABI_DEFAULT == ABI_64) || ((MIPS_ABI_DEFAULT == ABI_EABI) && ((TARGET_DEFAULT | TARGET_CPU_DEFAULT) & MASK_64BIT)))\n #define LONG_MAX_SPEC \\\n-  \"%{!mabi=n32:%{!mno-long64:%{!mgp32:%{!mips1:%{!mips2:-D__LONG_MAX__=9223372036854775807L}}}}}\"\n+  \"%{!mabi=32:%{!mabi=n32:%{!mlong32:%{!mgp32:%{!mips1:%{!mips2:-D__LONG_MAX__=9223372036854775807L}}}}}}\"\n #else\n #define LONG_MAX_SPEC \\\n   \"%{mabi=64:-D__LONG_MAX__=9223372036854775807L} \\"}, {"sha": "50fb10eac222817a950b68beb0f147862e6b2be7", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ce1ba83d698f792310b7880703dc8b351f82bd2/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ce1ba83d698f792310b7880703dc8b351f82bd2/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=3ce1ba83d698f792310b7880703dc8b351f82bd2", "patch": "@@ -221,6 +221,11 @@ int mips16;\n    just a way to avoid using up another bit in target_flags.  */\n const char *mips_no_mips16_string;\n \n+/* This is only used to determine if an type size setting option was \n+   explicitly specified (-mlong64, -mint64, -mlong32).  The specs\n+   set this option if such an option is used. */\n+char *mips_explicit_type_size_string;\n+\n /* Whether we are generating mips16 hard float code.  In mips16 mode\n    we always set TARGET_SOFT_FLOAT; this variable is nonzero if\n    -msoft-float was not specified by the user, which means that we\n@@ -4122,10 +4127,12 @@ override_options ()\n   if (mips_abi == ABI_32)\n     target_flags &= ~ (MASK_FLOAT64|MASK_64BIT);\n \n-  /* In the EABI in 64 bit mode, longs and pointers are 64 bits.  Likewise\n-   for the SGI Irix6 N64 ABI.  */\n-  if ((mips_abi == ABI_EABI && TARGET_64BIT)\n-      || mips_abi == ABI_64)\n+  /* If no type size setting options (-mlong64,-mint64,-mlong32) were used\n+     then set the type sizes.  In the EABI in 64 bit mode, longs and\n+     pointers are 64 bits.  Likewise for the SGI Irix6 N64 ABI.  */\n+  if (mips_explicit_type_size_string == NULL\n+      && ((mips_abi == ABI_EABI && TARGET_64BIT)\n+\t  || mips_abi == ABI_64))\n     target_flags |= MASK_LONG64;\n \n   /* ??? This doesn't work yet, so don't let people try to use it.  */"}, {"sha": "b7e2d8e53351cdb4e5d9fccd7a35646ed3b8947d", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ce1ba83d698f792310b7880703dc8b351f82bd2/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ce1ba83d698f792310b7880703dc8b351f82bd2/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=3ce1ba83d698f792310b7880703dc8b351f82bd2", "patch": "@@ -146,6 +146,7 @@ extern const char *mips_isa_string;\t/* for -mips{1,2,3,4} */\n extern const char *mips_abi_string;\t/* for -mabi={32,n32,64} */\n extern const char *mips_entry_string;\t/* for -mentry */\n extern const char *mips_no_mips16_string;/* for -mno-mips16 */\n+extern const char *mips_explicit_type_size_string;/* for -mexplicit-type-size */\n extern int mips_split_addresses;\t/* perform high/lo_sum support */\n extern int dslots_load_total;\t\t/* total # load related delay slots */\n extern int dslots_load_filled;\t\t/* # filled load delay slots */\n@@ -453,6 +454,7 @@ extern void\t\tmips_select_section ();\n {\t\t\t\t\t\t\t\t\t\\\n   {\"int64\",\t\t  MASK_INT64 | MASK_LONG64},\t\t\t\\\n   {\"long64\",\t\t  MASK_LONG64},\t\t\t\t\t\\\n+  {\"long32\",\t\t -(MASK_LONG64 | MASK_INT64)},\t\t\t\\\n   {\"split-addresses\",\t  MASK_SPLIT_ADDR},\t\t\t\t\\\n   {\"no-split-addresses\", -MASK_SPLIT_ADDR},\t\t\t\t\\\n   {\"mips-as\",\t\t -MASK_GAS},\t\t\t\t\t\\\n@@ -576,7 +578,8 @@ extern void\t\tmips_select_section ();\n   { \"cpu=\",\t&mips_cpu_string\t},\t\t\t\t\\\n   { \"ips\",\t&mips_isa_string\t},\t\t\t\t\\\n   { \"entry\",\t&mips_entry_string\t},\t\t\t\t\\\n-  { \"no-mips16\", &mips_no_mips16_string\t}                               \\\n+  { \"no-mips16\", &mips_no_mips16_string\t},                              \\\n+  { \"explicit-type-size\", &mips_explicit_type_size_string }\t\t\\\n }\n \n /* This is meant to be redefined in the host dependent files.  */\n@@ -888,6 +891,7 @@ while (0)\n %{mips4:%{!msingle-float:%{!m4650:-mfp64}} -mgp64} \\\n %{mfp64:%{msingle-float:%emay not use both -mfp64 and -msingle-float}} \\\n %{mfp64:%{m4650:%emay not use both -mfp64 and -m4650}} \\\n+%{mint64|mlong64|mlong32:-mexplicit-type-size }\\\n %{m4650:-mcpu=r4650} \\\n %{m3900:-mips1 -mcpu=r3900 -mfp32 -mgp32} \\\n %{G*} %{EB:-meb} %{EL:-mel} %{EB:%{EL:%emay not use both -EB and -EL}} \\\n@@ -906,7 +910,7 @@ while (0)\n \n #ifndef SUBTARGET_CPP_SIZE_SPEC\n #define SUBTARGET_CPP_SIZE_SPEC \"\\\n-%{mlong64:-D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int} \\\n+%{mlong64:%{!mips1:%{!mips2:-D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int}}} \\\n %{!mlong64:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int}\"\n #endif\n \n@@ -920,7 +924,7 @@ while (0)\n    correctly.  Similarly for 64bit ints and __INT_MAX__.  */\n #ifndef LONG_MAX_SPEC\n #if ((TARGET_DEFAULT | TARGET_CPU_DEFAULT) & MASK_LONG64)\n-#define LONG_MAX_SPEC \"%{!mno-long64:-D__LONG_MAX__=9223372036854775807L}\"\n+#define LONG_MAX_SPEC \"%{!mlong32:-D__LONG_MAX__=9223372036854775807L}\"\n #else\n #define LONG_MAX_SPEC \"%{mlong64:-D__LONG_MAX__=9223372036854775807L}\"\n #endif"}, {"sha": "3d92619c3e584725fca77e13081dad90aa9aa866", "filename": "gcc/config/mips/osfrose.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ce1ba83d698f792310b7880703dc8b351f82bd2/gcc%2Fconfig%2Fmips%2Fosfrose.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ce1ba83d698f792310b7880703dc8b351f82bd2/gcc%2Fconfig%2Fmips%2Fosfrose.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fosfrose.h?ref=3ce1ba83d698f792310b7880703dc8b351f82bd2", "patch": "@@ -76,6 +76,7 @@ Boston, MA 02111-1307, USA.  */\n #define CC1_SPEC \"\\\n %{gline:%{!g:%{!g0:%{!g1:%{!g2: -g1}}}}} \\\n %{mips1:-mfp32 -mgp32} %{mips2:-mfp32 -mgp32} %{mips3:-mfp64 -mgp64} \\\n+%{mint64|mlong64|mlong32:-mexplicit-type-size }\\\n %{G*} \\\n %{pic-none:   -mno-half-pic} \\\n %{pic-lib:    -mhalf-pic} \\"}, {"sha": "5ea74bfed4d75ccc849a5c29e2d59ba1409c3952", "filename": "gcc/invoke.texi", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ce1ba83d698f792310b7880703dc8b351f82bd2/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ce1ba83d698f792310b7880703dc8b351f82bd2/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=3ce1ba83d698f792310b7880703dc8b351f82bd2", "patch": "@@ -322,7 +322,7 @@ in the following sections.\n -mabicalls  -mcpu=@var{cpu type}  -membedded-data\n -membedded-pic  -mfp32  -mfp64  -mgas  -mgp32  -mgp64\n -mgpopt  -mhalf-pic  -mhard-float  -mint64  -mips1\n--mips2  -mips3 -mips4 -mlong64  -mlong-calls  -mmemcpy\n+-mips2  -mips3 -mips4 -mlong64  -mlong32 -mlong-calls  -mmemcpy\n -mmips-as  -mmips-tfile  -mno-abicalls\n -mno-embedded-data  -mno-embedded-pic\n -mno-gpopt  -mno-long-calls\n@@ -4788,14 +4788,25 @@ Assume that 32 64-bit general purpose registers are available.  This is\n the default when the @samp{-mips3} option is used.\n \n @item -mint64\n-Force int and long types to be 64 bits wide.  See @samp{-mlong64} for an\n-explanation of the width of pointers.\n+Force int and long types to be 64 bits wide.  See @samp{-mlong32} for an\n+explanation of the default, and the width of pointers.\n \n @item -mlong64\n-Force long types to be 64 bits wide.\n+Force long types to be 64 bits wide.  See @samp{-mlong32} for an\n+explanation of the default, and the width of pointers.\n \n-The width of pointer types is the smaller of the width of longs\n-or the width of general purpose registers.\n+@item -mlong32\n+Force long, int, and pointer types to be 32 bits wide.\n+\n+If none of @samp{-mlong32}, @samp{-mlong64}, or @samp{-mint64} are set,\n+the size of ints, longs, and pointers depends on the ABI and ISA choosen.\n+For @samp{-mabi=32}, and @samp{-mabi=n32}, ints and longs are 32 bits\n+wide.  For @samp{-mabi=64}, ints are 32 bits, and longs are 64 bits wide.\n+For @samp{-mabi=eabi} and either @samp{-mips1} or @samp{-mips2}, ints\n+and longs are 32 bits wide.  For @samp{-mabi=eabi} and higher ISAs, ints\n+are 32 bits, and longs are 64 bits wide.  The width of pointer types is\n+the smaller of the width of longs or the width of general purpose\n+registers (which in turn depends on the ISA).\n \n @itemx -mabi=32\n @itemx -mabi=n32"}]}