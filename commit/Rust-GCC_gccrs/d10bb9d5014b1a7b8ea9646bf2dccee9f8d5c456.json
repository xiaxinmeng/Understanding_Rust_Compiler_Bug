{"sha": "d10bb9d5014b1a7b8ea9646bf2dccee9f8d5c456", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDEwYmI5ZDUwMTRiMWE3YjhlYTk2NDZiZjJkY2NlZTlmOGQ1YzQ1Ng==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-04T10:22:32Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-04T10:22:32Z"}, "message": "[multiple changes]\n\n2014-08-04  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_ugn.texi: Clarify documentation on assertions.\n\n2014-08-04  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_aggr.adb (Resolve_Record_Aggregate, Get_Value): Warn\n\tif a component association has a box initialization when the\n\tcomponent type has no default initialization, either through an\n\tinitial value, an aspect, or an implicit initialization procedure.\n\n2014-08-04  Ed Schonberg  <schonberg@adacore.com>\n\n\t* freeze.adb: Code clean up.\n\nFrom-SVN: r213563", "tree": {"sha": "dfd0089361c6c3ea3307fde051e577ae38d63772", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfd0089361c6c3ea3307fde051e577ae38d63772"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d10bb9d5014b1a7b8ea9646bf2dccee9f8d5c456", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d10bb9d5014b1a7b8ea9646bf2dccee9f8d5c456", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d10bb9d5014b1a7b8ea9646bf2dccee9f8d5c456", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d10bb9d5014b1a7b8ea9646bf2dccee9f8d5c456/comments", "author": null, "committer": null, "parents": [{"sha": "0fea901b8fe3f3476282e3db52f329002f551381", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fea901b8fe3f3476282e3db52f329002f551381", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fea901b8fe3f3476282e3db52f329002f551381"}], "stats": {"total": 76, "additions": 62, "deletions": 14}, "files": [{"sha": "7b9017ad5f5b986728e8be181dbb3539b02c4de6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d10bb9d5014b1a7b8ea9646bf2dccee9f8d5c456/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d10bb9d5014b1a7b8ea9646bf2dccee9f8d5c456/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d10bb9d5014b1a7b8ea9646bf2dccee9f8d5c456", "patch": "@@ -1,3 +1,18 @@\n+2014-08-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_ugn.texi: Clarify documentation on assertions.\n+\n+2014-08-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Record_Aggregate, Get_Value): Warn\n+\tif a component association has a box initialization when the\n+\tcomponent type has no default initialization, either through an\n+\tinitial value, an aspect, or an implicit initialization procedure.\n+\n+2014-08-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* freeze.adb: Code clean up.\n+\n 2014-08-04  Thomas Quinot  <quinot@adacore.com>\n \n \t* sem_ch5.adb: Minor reformatting."}, {"sha": "870cdc2a1983fbc2faa831f9cdb1bf1d6967549e", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d10bb9d5014b1a7b8ea9646bf2dccee9f8d5c456/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d10bb9d5014b1a7b8ea9646bf2dccee9f8d5c456/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=d10bb9d5014b1a7b8ea9646bf2dccee9f8d5c456", "patch": "@@ -4018,7 +4018,7 @@ package body Freeze is\n                   while Present (Formal) loop\n                      F_Type := Etype (Formal);\n \n-                     --  AI05-0151 : incomplete types can appear in a profile.\n+                     --  AI05-0151: incomplete types can appear in a profile.\n                      --  By the time the entity is frozen, the full view must\n                      --  be available, unless it is a limited view.\n \n@@ -4204,9 +4204,10 @@ package body Freeze is\n                        Get_Source_Unit (E) /= Get_Source_Unit (N)\n                          and then Expander_Active\n                          and then Ekind (Scope (E)) = E_Package\n-                         and then Nkind (Unit_Declaration_Node (Scope (E)))\n-                           = N_Package_Declaration\n-                         and then not In_Open_Scopes (Scope (E));\n+                         and then Nkind (Unit_Declaration_Node (Scope (E))) =\n+                                                       N_Package_Declaration\n+                         and then not In_Open_Scopes (Scope (E))\n+                         and then Get_Source_Unit (E) /= Current_Sem_Unit;\n \n                      --  Freeze return type\n "}, {"sha": "913330d7370b1af10949a4fb3ee8f65d93d24d6d", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d10bb9d5014b1a7b8ea9646bf2dccee9f8d5c456/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d10bb9d5014b1a7b8ea9646bf2dccee9f8d5c456/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=d10bb9d5014b1a7b8ea9646bf2dccee9f8d5c456", "patch": "@@ -3604,7 +3604,10 @@ using the configuration pragma @code{Check_Policy}. In Ada 2012, it\n also activates all assertions defined in the RM as aspects: preconditions,\n postconditions, type invariants and (sub)type predicates. In all Ada modes,\n corresponding pragmas for type invariants and (sub)type predicates are\n-also activated.\n+also activated. The default is that all these assertions are disabled,\n+and have no effect, other than being checked for syntactic validity, and\n+in the case of subtype predicates, constructions such as membership tests\n+still test predicates even if assertions are turned off.\n \n @item -gnatA\n @cindex @option{-gnatA} (@command{gcc})"}, {"sha": "654f413c088fc7dcf7c4f300accfafa9513115dc", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 38, "deletions": 9, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d10bb9d5014b1a7b8ea9646bf2dccee9f8d5c456/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d10bb9d5014b1a7b8ea9646bf2dccee9f8d5c456/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=d10bb9d5014b1a7b8ea9646bf2dccee9f8d5c456", "patch": "@@ -23,6 +23,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+with Aspects;  use Aspects;\n with Atree;    use Atree;\n with Checks;   use Checks;\n with Einfo;    use Einfo;\n@@ -3168,6 +3169,7 @@ package body Sem_Aggr is\n          Consider_Others_Choice : Boolean := False)\n          return                   Node_Id\n       is\n+         Typ           : constant Entity_Id := Etype (Compon);\n          Assoc         : Node_Id;\n          Expr          : Node_Id := Empty;\n          Selector_Name : Node_Id;\n@@ -3215,15 +3217,15 @@ package body Sem_Aggr is\n                         end if;\n \n                      else\n-                        if Present (Others_Etype) and then\n-                           Base_Type (Others_Etype) /= Base_Type (Etype\n-                                                                   (Compon))\n+                        if Present (Others_Etype)\n+                          and then Base_Type (Others_Etype) /= Base_Type (Typ)\n                         then\n-                           Error_Msg_N (\"components in OTHERS choice must \" &\n-                                        \"have same type\", Selector_Name);\n+                           Error_Msg_N\n+                             (\"components in OTHERS choice must \"\n+                              & \"have same type\", Selector_Name);\n                         end if;\n \n-                        Others_Etype := Etype (Compon);\n+                        Others_Etype := Typ;\n \n                         if Expander_Active then\n                            return\n@@ -3269,15 +3271,42 @@ package body Sem_Aggr is\n                         --  initialized, but an association for the component\n                         --  exists, and it is not covered by an others clause.\n \n+                        --  Scalar and private types have no initialization\n+                        --  procedure, so they remain uninitialized. If the\n+                        --  target of the aggregate is a constant this\n+                        --  deserves a warning.\n+\n+                        if No (Expression (Parent (Compon)))\n+                          and then not Has_Non_Null_Base_Init_Proc (Typ)\n+                          and then not Has_Aspect (Typ, Aspect_Default_Value)\n+                          and then not Is_Concurrent_Type (Typ)\n+                          and then Nkind (Parent (N)) = N_Object_Declaration\n+                          and then Constant_Present (Parent (N))\n+                        then\n+                           Error_Msg_Node_2 := Typ;\n+                           Error_Msg_NE\n+                             (\"component&? of type& is uninitialized\",\n+                              Assoc, Selector_Name);\n+\n+                           --  An additional reminder if the component type\n+                           --  is a generic formal.\n+\n+                           if Is_Generic_Type (Base_Type (Typ)) then\n+                              Error_Msg_NE\n+                                (\"\\instance should provide actual \"\n+                                 & \"type with initialization for&\",\n+                                 Assoc, Typ);\n+                           end if;\n+                        end if;\n+\n                         return\n                           New_Copy_Tree_And_Copy_Dimensions\n                             (Expression (Parent (Compon)));\n \n                      else\n                         if Present (Next (Selector_Name)) then\n-                           Expr :=\n-                             New_Copy_Tree_And_Copy_Dimensions\n-                               (Expression (Assoc));\n+                           Expr := New_Copy_Tree_And_Copy_Dimensions\n+                                     (Expression (Assoc));\n                         else\n                            Expr := Expression (Assoc);\n                         end if;"}]}