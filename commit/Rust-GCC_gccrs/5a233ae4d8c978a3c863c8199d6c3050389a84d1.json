{"sha": "5a233ae4d8c978a3c863c8199d6c3050389a84d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWEyMzNhZTRkOGM5NzhhM2M4NjNjODE5OWQ2YzMwNTAzODlhODRkMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-02T17:25:45Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-02T17:25:45Z"}, "message": "dwarf2out: Fix up split-dwarf .debug_macro handling [PR99319]\n\nThe -gsplit-dwarf changes came a few months after .debug_macro\nand the r0-120109 changes just changed the 2nd operand of\nDW_MACRO_GNU_{define,undef}_indirect from the usual .debug_str\nsection offset argument to leb128 index into .debug_str_offsets\nwithout changing the opcodes.\n\nDWARF5 standardized different opcodes for those, but GCC hasn't been changed\nyet for that.\nThis patch starts using DW_MACRO_define_strx and DW_MACRO_undef_strx\ninstead of DW_MACRO_define_strp and DW_MACRO_undef_strp when -gsplit-dwarf\n-gdwarf-5 -g3.  I'm not sure what to do if anything with the -gdwarf-4\n-gsplit-dwarf -g3 -gno-strict-dwarf case, we've been emitting it that way\nfor 8 years and it is an extension, so presumably the consumers that cared\nhave already hacks to handle DW_MACRO_GNU_{define,undef}_indirect\ndifferently in .debug_macro 4 sections depending on if it is\n.debug_macro.dwo or .debug_macro.\nAnother change the patch does is that it will use\nDW_MACRO_{define,undef}_str{p,x} even with -gdwarf-5 -gstrict-dwarf -g3,\nfor DWARF 4 we were doing that only for -gno-strict-dwarf as we've emitted\n.debug_macro section only in that case.\n\n2021-03-02  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR debug/99319\n\t* dwarf2out.c (output_macinfo_op): Use DW_MACRO_*_str* even with\n\t-gdwarf-5 -gstrict-dwarf.  For -gsplit-dwarf -gdwarf-5 use\n\tDW_MACRO_*_strx instead of DW_MACRO_*_strp.  Handle\n\tDW_MACRO_define_strx and DW_MACRO_undef_strx.\n\t(save_macinfo_strings): Use DW_MACRO_*_str* even with\n\t-gdwarf-5 -gstrict-dwarf.  Handle DW_MACRO_define_strx and\n\tDW_MACRO_undef_strx.", "tree": {"sha": "f850f62980437e2caaf2c4383ca815d495065871", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f850f62980437e2caaf2c4383ca815d495065871"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a233ae4d8c978a3c863c8199d6c3050389a84d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a233ae4d8c978a3c863c8199d6c3050389a84d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a233ae4d8c978a3c863c8199d6c3050389a84d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a233ae4d8c978a3c863c8199d6c3050389a84d1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "168b75ff54b4e70650b8709816edff13f93e737a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/168b75ff54b4e70650b8709816edff13f93e737a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/168b75ff54b4e70650b8709816edff13f93e737a"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "95306e68b1a475eee7ab9c0ae4efb991777442dc", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a233ae4d8c978a3c863c8199d6c3050389a84d1/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a233ae4d8c978a3c863c8199d6c3050389a84d1/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=5a233ae4d8c978a3c863c8199d6c3050389a84d1", "patch": "@@ -28267,13 +28267,17 @@ output_macinfo_op (macinfo_entry *ref)\n     case DW_MACINFO_define:\n     case DW_MACINFO_undef:\n       len = strlen (ref->info) + 1;\n-      if (!dwarf_strict\n+      if ((!dwarf_strict || dwarf_version >= 5)\n \t  && len > (size_t) dwarf_offset_size\n \t  && !DWARF2_INDIRECT_STRING_SUPPORT_MISSING_ON_TARGET\n \t  && (debug_str_section->common.flags & SECTION_MERGE) != 0)\n \t{\n-\t  ref->code = ref->code == DW_MACINFO_define\n-\t\t      ? DW_MACRO_define_strp : DW_MACRO_undef_strp;\n+\t  if (dwarf_split_debug_info && dwarf_version >= 5)\n+\t    ref->code = ref->code == DW_MACINFO_define\n+\t\t\t? DW_MACRO_define_strx : DW_MACRO_undef_strx;\n+\t  else\n+\t    ref->code = ref->code == DW_MACINFO_define\n+\t\t\t? DW_MACRO_define_strp : DW_MACRO_undef_strp;\n \t  output_macinfo_op (ref);\n \t  return;\n \t}\n@@ -28285,7 +28289,18 @@ output_macinfo_op (macinfo_entry *ref)\n       dw2_asm_output_nstring (ref->info, -1, \"The macro\");\n       break;\n     case DW_MACRO_define_strp:\n+      dw2_asm_output_data (1, ref->code, \"Define macro strp\");\n+      goto do_DW_MACRO_define_strpx;\n     case DW_MACRO_undef_strp:\n+      dw2_asm_output_data (1, ref->code, \"Undefine macro strp\");\n+      goto do_DW_MACRO_define_strpx;\n+    case DW_MACRO_define_strx:\n+      dw2_asm_output_data (1, ref->code, \"Define macro strx\");\n+      goto do_DW_MACRO_define_strpx;\n+    case DW_MACRO_undef_strx:\n+      dw2_asm_output_data (1, ref->code, \"Undefine macro strx\");\n+      /* FALLTHRU */\n+    do_DW_MACRO_define_strpx:\n       /* NB: dwarf2out_finish performs:\n \t   1. save_macinfo_strings\n \t   2. hash table traverse of index_string\n@@ -28302,10 +28317,6 @@ output_macinfo_op (macinfo_entry *ref)\n       gcc_assert (node\n \t\t  && (node->form == DW_FORM_strp\n \t\t      || node->form == dwarf_FORM (DW_FORM_strx)));\n-      dw2_asm_output_data (1, ref->code,\n-\t\t\t   ref->code == DW_MACRO_define_strp\n-\t\t\t   ? \"Define macro strp\"\n-\t\t\t   : \"Undefine macro strp\");\n       dw2_asm_output_data_uleb128 (ref->lineno, \"At line number %lu\",\n \t\t\t\t   (unsigned long) ref->lineno);\n       if (node->form == DW_FORM_strp)\n@@ -28475,7 +28486,7 @@ save_macinfo_strings (void)\n           case DW_MACINFO_define:\n           case DW_MACINFO_undef:\n             len = strlen (ref->info) + 1;\n-            if (!dwarf_strict\n+\t    if ((!dwarf_strict || dwarf_version >= 5)\n                 && len > (unsigned) dwarf_offset_size\n                 && !DWARF2_INDIRECT_STRING_SUPPORT_MISSING_ON_TARGET\n                 && (debug_str_section->common.flags & SECTION_MERGE) != 0)\n@@ -28489,6 +28500,8 @@ save_macinfo_strings (void)\n \t    /* Fall through. */\n \t  case DW_MACRO_define_strp:\n \t  case DW_MACRO_undef_strp:\n+\t  case DW_MACRO_define_strx:\n+\t  case DW_MACRO_undef_strx:\n             set_indirect_string (find_AT_string (ref->info));\n             break;\n           default:"}]}