{"sha": "71eba7a0c684782ccf5d4befa394639f607a2717", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFlYmE3YTBjNjg0NzgyY2NmNWQ0YmVmYTM5NDYzOWY2MDdhMjcxNw==", "commit": {"author": {"name": "Chris Manghane", "email": "cmang@google.com", "date": "2013-12-16T19:58:50Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-12-16T19:58:50Z"}, "message": "compiler: Use backend interface for struct field expressions.\n\n\t* go-gcc.cc (Gcc_backend::struct_field_expression): New function.\n\nFrom-SVN: r206029", "tree": {"sha": "d9380cfc26a9af9a9f0f214d08c54d1da389bb26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9380cfc26a9af9a9f0f214d08c54d1da389bb26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71eba7a0c684782ccf5d4befa394639f607a2717", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71eba7a0c684782ccf5d4befa394639f607a2717", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71eba7a0c684782ccf5d4befa394639f607a2717", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71eba7a0c684782ccf5d4befa394639f607a2717/comments", "author": null, "committer": null, "parents": [{"sha": "74f769b5e02d3d1bfed29c4b74f3c4be17ce30d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74f769b5e02d3d1bfed29c4b74f3c4be17ce30d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74f769b5e02d3d1bfed29c4b74f3c4be17ce30d1"}], "stats": {"total": 72, "additions": 50, "deletions": 22}, "files": [{"sha": "f6e6599bda310642117832a259352f84b508b001", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71eba7a0c684782ccf5d4befa394639f607a2717/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71eba7a0c684782ccf5d4befa394639f607a2717/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=71eba7a0c684782ccf5d4befa394639f607a2717", "patch": "@@ -1,3 +1,7 @@\n+2013-12-16  Chris Manghane  <cmang@google.com>\n+\n+\t* go-gcc.cc (Gcc_backend::struct_field_expression): New function.\n+\n 2013-12-11  Ian Lance Taylor  <iant@google.com>\n \n \t* go-lang.c (go_langhook_post_options): Disable sibling calls by"}, {"sha": "db8fd5e3355980443ab765c5c11ac935eaf4d3b1", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71eba7a0c684782ccf5d4befa394639f607a2717/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71eba7a0c684782ccf5d4befa394639f607a2717/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=71eba7a0c684782ccf5d4befa394639f607a2717", "patch": "@@ -243,6 +243,9 @@ class Gcc_backend : public Backend\n   Bexpression*\n   address_expression(Bexpression*, Location);\n \n+  Bexpression*\n+  struct_field_expression(Bexpression*, size_t, Location);\n+\n   // Statements.\n \n   Bstatement*\n@@ -998,6 +1001,39 @@ Gcc_backend::address_expression(Bexpression* bexpr, Location location)\n   return this->make_expression(ret);\n }\n \n+// Return an expression for the field at INDEX in BSTRUCT.\n+\n+Bexpression*\n+Gcc_backend::struct_field_expression(Bexpression* bstruct, size_t index,\n+                                     Location location)\n+{\n+  tree struct_tree = bstruct->get_tree();\n+  if (struct_tree == error_mark_node\n+      || TREE_TYPE(struct_tree) == error_mark_node)\n+    return this->error_expression();\n+  gcc_assert(TREE_CODE(TREE_TYPE(struct_tree)) == RECORD_TYPE);\n+  tree field = TYPE_FIELDS(TREE_TYPE(struct_tree));\n+  if (field == NULL_TREE)\n+  {\n+    // This can happen for a type which refers to itself indirectly\n+    // and then turns out to be erroneous.\n+    return this->error_expression();\n+  }\n+  for (unsigned int i = index; i > 0; --i)\n+  {\n+    field = DECL_CHAIN(field);\n+    gcc_assert(field != NULL_TREE);\n+  }\n+  if (TREE_TYPE(field) == error_mark_node)\n+    return this->error_expression();\n+  tree ret = fold_build3_loc(location.gcc_location(), COMPONENT_REF,\n+                             TREE_TYPE(field), struct_tree, field,\n+                             NULL_TREE);\n+  if (TREE_CONSTANT(struct_tree))\n+    TREE_CONSTANT(ret) = 1;\n+  return tree_to_expr(ret);\n+}\n+\n // An expression as a statement.\n \n Bstatement*"}, {"sha": "55805941da600a963b13eab04300228abdc15611", "filename": "gcc/go/gofrontend/backend.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71eba7a0c684782ccf5d4befa394639f607a2717/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71eba7a0c684782ccf5d4befa394639f607a2717/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fbackend.h?ref=71eba7a0c684782ccf5d4befa394639f607a2717", "patch": "@@ -280,6 +280,10 @@ class Backend\n   virtual Bexpression*\n   address_expression(Bexpression*, Location) = 0;\n \n+  // Return an expression for the field at INDEX in BSTRUCT.\n+  virtual Bexpression*\n+  struct_field_expression(Bexpression* bstruct, size_t index, Location) = 0;\n+\n   // Statements.\n \n   // Create an error statement.  This is used for cases which should"}, {"sha": "81d18caae7ae28505b059ba3c523f4b35b28d58f", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71eba7a0c684782ccf5d4befa394639f607a2717/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71eba7a0c684782ccf5d4befa394639f607a2717/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=71eba7a0c684782ccf5d4befa394639f607a2717", "patch": "@@ -11539,28 +11539,12 @@ Field_reference_expression::do_check_types(Gogo*)\n tree\n Field_reference_expression::do_get_tree(Translate_context* context)\n {\n-  tree struct_tree = this->expr_->get_tree(context);\n-  if (struct_tree == error_mark_node\n-      || TREE_TYPE(struct_tree) == error_mark_node)\n-    return error_mark_node;\n-  go_assert(TREE_CODE(TREE_TYPE(struct_tree)) == RECORD_TYPE);\n-  tree field = TYPE_FIELDS(TREE_TYPE(struct_tree));\n-  if (field == NULL_TREE)\n-    {\n-      // This can happen for a type which refers to itself indirectly\n-      // and then turns out to be erroneous.\n-      go_assert(saw_errors());\n-      return error_mark_node;\n-    }\n-  for (unsigned int i = this->field_index_; i > 0; --i)\n-    {\n-      field = DECL_CHAIN(field);\n-      go_assert(field != NULL_TREE);\n-    }\n-  if (TREE_TYPE(field) == error_mark_node)\n-    return error_mark_node;\n-  return build3(COMPONENT_REF, TREE_TYPE(field), struct_tree, field,\n-\t\tNULL_TREE);\n+  Bexpression* bstruct = tree_to_expr(this->expr_->get_tree(context));\n+  Bexpression* ret =\n+      context->gogo()->backend()->struct_field_expression(bstruct,\n+                                                          this->field_index_,\n+                                                          this->location());\n+  return expr_to_tree(ret);\n }\n \n // Dump ast representation for a field reference expression."}]}