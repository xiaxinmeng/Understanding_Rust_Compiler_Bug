{"sha": "251901a027bfefffce90ca3d0776c677879d7124", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjUxOTAxYTAyN2JmZWZmZmNlOTBjYTNkMDc3NmM2Nzc4NzlkNzEyNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-02-06T10:54:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-02-06T10:54:20Z"}, "message": "re PR target/60062 (wrong code (for code with the optimize attribute) at -O1 and above on x86_64-linux-gnu in 32-bit mode)\n\n\tPR target/60062\n\t* tree.h (opts_for_fn): New inline function.\n\t(opt_for_fn): Define.\n\t* config/i386/i386.c (ix86_function_regparm): Use\n\topt_for_fn (decl, optimize) instead of optimize.\n\n\t* gcc.c-torture/execute/pr60062.c: New test.\n\t* gcc.c-torture/execute/pr60072.c: New test.\n\nFrom-SVN: r207549", "tree": {"sha": "b4c321fa215aaa59ff62803b0e35d3ac473f9b33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4c321fa215aaa59ff62803b0e35d3ac473f9b33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/251901a027bfefffce90ca3d0776c677879d7124", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/251901a027bfefffce90ca3d0776c677879d7124", "html_url": "https://github.com/Rust-GCC/gccrs/commit/251901a027bfefffce90ca3d0776c677879d7124", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/251901a027bfefffce90ca3d0776c677879d7124/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "79b49b879d3d96c1c7761b2d114dcdfaf7ceaad0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79b49b879d3d96c1c7761b2d114dcdfaf7ceaad0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79b49b879d3d96c1c7761b2d114dcdfaf7ceaad0"}], "stats": {"total": 76, "additions": 75, "deletions": 1}, "files": [{"sha": "7028dd60e6d2b8cbbf63bd08c4fbb42e647d2bf1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251901a027bfefffce90ca3d0776c677879d7124/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251901a027bfefffce90ca3d0776c677879d7124/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=251901a027bfefffce90ca3d0776c677879d7124", "patch": "@@ -1,3 +1,11 @@\n+2014-02-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/60062\n+\t* tree.h (opts_for_fn): New inline function.\n+\t(opt_for_fn): Define.\n+\t* config/i386/i386.c (ix86_function_regparm): Use\n+\topt_for_fn (decl, optimize) instead of optimize.\n+\n 2014-02-06  Marcus Shawcroft  <marcus.shawcroft@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_classify_symbol): Fix logic"}, {"sha": "abe05aab36eb1648fd377a9be20fb30115b47dc4", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251901a027bfefffce90ca3d0776c677879d7124/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251901a027bfefffce90ca3d0776c677879d7124/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=251901a027bfefffce90ca3d0776c677879d7124", "patch": "@@ -5608,7 +5608,12 @@ ix86_function_regparm (const_tree type, const_tree decl)\n   /* Use register calling convention for local functions when possible.  */\n   if (decl\n       && TREE_CODE (decl) == FUNCTION_DECL\n-      && optimize\n+      /* Caller and callee must agree on the calling convention, so\n+\t checking here just optimize means that with\n+\t __attribute__((optimize (...))) caller could use regparm convention\n+\t and callee not, or vice versa.  Instead look at whether the callee\n+\t is optimized or not.  */\n+      && opt_for_fn (decl, optimize)\n       && !(profile_flag && !flag_fentry))\n     {\n       /* FIXME: remove this CONST_CAST when cgraph.[ch] is constified.  */"}, {"sha": "552b591e240b0a71dcde602d5724611582482908", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251901a027bfefffce90ca3d0776c677879d7124/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251901a027bfefffce90ca3d0776c677879d7124/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=251901a027bfefffce90ca3d0776c677879d7124", "patch": "@@ -1,3 +1,9 @@\n+2014-02-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/60062\n+\t* gcc.c-torture/execute/pr60062.c: New test.\n+\t* gcc.c-torture/execute/pr60072.c: New test.\n+\n 2014-02-06  Ian Bolton  <ian.bolton@arm.com>\n \n \t* gcc.dg/tree-ssa/pr59597.c: Make called function static"}, {"sha": "62973d458a44625f2ff2822563259dc66c79711a", "filename": "gcc/testsuite/gcc.c-torture/execute/pr60062.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251901a027bfefffce90ca3d0776c677879d7124/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr60062.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251901a027bfefffce90ca3d0776c677879d7124/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr60062.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr60062.c?ref=251901a027bfefffce90ca3d0776c677879d7124", "patch": "@@ -0,0 +1,25 @@\n+/* PR target/60062 */\n+\n+int a;\n+\n+static void\n+foo (const char *p1, int p2)\n+{\n+  if (__builtin_strcmp (p1, \"hello\") != 0)\n+    __builtin_abort ();\n+}\n+\n+static void\n+bar (const char *p1)\n+{\n+  if (__builtin_strcmp (p1, \"hello\") != 0)\n+    __builtin_abort ();\n+}\n+\n+__attribute__((optimize (0))) int\n+main ()\n+{\n+  foo (\"hello\", a);\n+  bar (\"hello\");\n+  return 0;\n+}"}, {"sha": "566874d635e660f6ef0b0a541c4a9bdd880e324c", "filename": "gcc/testsuite/gcc.c-torture/execute/pr60072.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251901a027bfefffce90ca3d0776c677879d7124/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr60072.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251901a027bfefffce90ca3d0776c677879d7124/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr60072.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr60072.c?ref=251901a027bfefffce90ca3d0776c677879d7124", "patch": "@@ -0,0 +1,16 @@\n+/* PR target/60072 */\n+\n+int c = 1;\n+\n+__attribute__ ((optimize (1)))\n+static int *foo (int *p)\n+{\n+  return p;\n+}\n+\n+int\n+main ()\n+{\n+  *foo (&c) = 2;\n+  return c - 2;\n+}"}, {"sha": "0dc8d0dcd4f572f4b5c204740607ca80e83b487e", "filename": "gcc/tree.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251901a027bfefffce90ca3d0776c677879d7124/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251901a027bfefffce90ca3d0776c677879d7124/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=251901a027bfefffce90ca3d0776c677879d7124", "patch": "@@ -4470,6 +4470,20 @@ may_be_aliased (const_tree var)\n \t      || TREE_ADDRESSABLE (var)));\n }\n \n+/* Return pointer to optimization flags of FNDECL.  */\n+static inline struct cl_optimization *\n+opts_for_fn (const_tree fndecl)\n+{\n+  tree fn_opts = DECL_FUNCTION_SPECIFIC_OPTIMIZATION (fndecl);\n+  if (fn_opts == NULL_TREE)\n+    fn_opts = optimization_default_node;\n+  return TREE_OPTIMIZATION (fn_opts);\n+}\n+\n+/* opt flag for function FNDECL, e.g. opts_for_fn (fndecl, optimize) is\n+   the optimization level of function fndecl.  */\n+#define opt_for_fn(fndecl, opt) (opts_for_fn (fndecl)->x_##opt)\n+\n /* For anonymous aggregate types, we need some sort of name to\n    hold on to.  In practice, this should not appear, but it should\n    not be harmful if it does.  */"}]}