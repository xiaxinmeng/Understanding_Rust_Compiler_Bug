{"sha": "66c277f11b6247750e0206d630bb6d0757e56cec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZjMjc3ZjExYjYyNDc3NTBlMDIwNmQ2MzBiYjZkMDc1N2U1NmNlYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-06-08T13:48:12Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-06-08T13:48:12Z"}, "message": "genattrtab.c (insn_alternatives): Change type from int * to uint64_t *.\n\n\t* genattrtab.c (insn_alternatives): Change type from int *\n\tto uint64_t *.\n\t(check_attr_test): Shift ((uint64_t) 1) instead of 1 up.\n\t(get_attr_value): Change type of num_alt to uint64_t.\n\t(compute_alternative_mask): Change return type from\n\tint to uint64_t, shift ((uint64_t) 1) instead of 1 up.\n\t(make_alternative_compare, mk_attr_alt): Change argument type\n\tfrom int to uint64_t.\n\t(simplify_test_exp): Change type of i from int to uint64_t.\n\tShift ((uint64_t) 1) instead of 1 up.\n\t(main): Adjust oballocvec first argument from int to uint64_t.\n\tShift ((uint64_t) 1) instead of 1 up.\n\nFrom-SVN: r224227", "tree": {"sha": "764e9b1d551fbec805ad5adfaa51d2cdc412bba1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/764e9b1d551fbec805ad5adfaa51d2cdc412bba1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66c277f11b6247750e0206d630bb6d0757e56cec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66c277f11b6247750e0206d630bb6d0757e56cec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66c277f11b6247750e0206d630bb6d0757e56cec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66c277f11b6247750e0206d630bb6d0757e56cec/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "74103219e877e4b972e9ed178448fdee6dd223a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74103219e877e4b972e9ed178448fdee6dd223a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74103219e877e4b972e9ed178448fdee6dd223a6"}], "stats": {"total": 44, "additions": 30, "deletions": 14}, "files": [{"sha": "1831c64be61f5da4083dfbf79492b098396f7888", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66c277f11b6247750e0206d630bb6d0757e56cec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66c277f11b6247750e0206d630bb6d0757e56cec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=66c277f11b6247750e0206d630bb6d0757e56cec", "patch": "@@ -1,3 +1,18 @@\n+2015-06-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* genattrtab.c (insn_alternatives): Change type from int *\n+\tto uint64_t *.\n+\t(check_attr_test): Shift ((uint64_t) 1) instead of 1 up.\n+\t(get_attr_value): Change type of num_alt to uint64_t.\n+\t(compute_alternative_mask): Change return type from\n+\tint to uint64_t, shift ((uint64_t) 1) instead of 1 up.\n+\t(make_alternative_compare, mk_attr_alt): Change argument type\n+\tfrom int to uint64_t.\n+\t(simplify_test_exp): Change type of i from int to uint64_t.\n+\tShift ((uint64_t) 1) instead of 1 up.\n+\t(main): Adjust oballocvec first argument from int to uint64_t.\n+\tShift ((uint64_t) 1) instead of 1 up.\n+\n 2015-06-08  Jan Kratochvil  <jan.kratochvil@redhat.com>\n \n \tPR other/65366"}, {"sha": "424cb8808e77ac64c678626383a1756d64195108", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66c277f11b6247750e0206d630bb6d0757e56cec/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66c277f11b6247750e0206d630bb6d0757e56cec/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=66c277f11b6247750e0206d630bb6d0757e56cec", "patch": "@@ -230,7 +230,7 @@ static int *insn_n_alternatives;\n /* Stores, for each insn code, a bitmap that has bits on for each possible\n    alternative.  */\n \n-static int *insn_alternatives;\n+static uint64_t *insn_alternatives;\n \n /* Used to simplify expressions.  */\n \n@@ -258,7 +258,7 @@ static char *attr_printf           (unsigned int, const char *, ...)\n   ATTRIBUTE_PRINTF_2;\n static rtx make_numeric_value      (int);\n static struct attr_desc *find_attr (const char **, int);\n-static rtx mk_attr_alt             (int);\n+static rtx mk_attr_alt             (uint64_t);\n static char *next_comma_elt\t   (const char **);\n static rtx insert_right_side\t   (enum rtx_code, rtx, rtx, int, int);\n static rtx copy_boolean\t\t   (rtx);\n@@ -769,7 +769,7 @@ check_attr_test (rtx exp, int is_const, int lineno)\n \t  if (attr == NULL)\n \t    {\n \t      if (! strcmp (XSTR (exp, 0), \"alternative\"))\n-\t\treturn mk_attr_alt (1 << atoi (XSTR (exp, 1)));\n+\t\treturn mk_attr_alt (((uint64_t) 1) << atoi (XSTR (exp, 1)));\n \t      else\n \t\tfatal (\"unknown attribute `%s' in EQ_ATTR\", XSTR (exp, 0));\n \t    }\n@@ -815,7 +815,7 @@ check_attr_test (rtx exp, int is_const, int lineno)\n \n \t      name_ptr = XSTR (exp, 1);\n \t      while ((p = next_comma_elt (&name_ptr)) != NULL)\n-\t\tset |= 1 << atoi (p);\n+\t\tset |= ((uint64_t) 1) << atoi (p);\n \n \t      return mk_attr_alt (set);\n \t    }\n@@ -1292,7 +1292,7 @@ static struct attr_value *\n get_attr_value (rtx value, struct attr_desc *attr, int insn_code)\n {\n   struct attr_value *av;\n-  int num_alt = 0;\n+  uint64_t num_alt = 0;\n \n   value = make_canonical (attr, value);\n   if (compares_alternatives_p (value))\n@@ -1934,7 +1934,7 @@ insert_right_side (enum rtx_code code, rtx exp, rtx term, int insn_code, int ins\n    This routine is passed an expression and either AND or IOR.  It returns a\n    bitmask indicating which alternatives are mentioned within EXP.  */\n \n-static int\n+static uint64_t\n compute_alternative_mask (rtx exp, enum rtx_code code)\n {\n   const char *string;\n@@ -1965,15 +1965,15 @@ compute_alternative_mask (rtx exp, enum rtx_code code)\n     return 0;\n \n   if (string[1] == 0)\n-    return 1 << (string[0] - '0');\n-  return 1 << atoi (string);\n+    return ((uint64_t) 1) << (string[0] - '0');\n+  return ((uint64_t) 1) << atoi (string);\n }\n \n /* Given I, a single-bit mask, return RTX to compare the `alternative'\n    attribute with the value represented by that bit.  */\n \n static rtx\n-make_alternative_compare (int mask)\n+make_alternative_compare (uint64_t mask)\n {\n   return mk_attr_alt (mask);\n }\n@@ -2472,7 +2472,7 @@ attr_alt_complement (rtx s)\n    in E.  */\n \n static rtx\n-mk_attr_alt (int e)\n+mk_attr_alt (uint64_t e)\n {\n   rtx result = rtx_alloc (EQ_ATTR_ALT);\n \n@@ -2499,7 +2499,7 @@ simplify_test_exp (rtx exp, int insn_code, int insn_index)\n   struct attr_value *av;\n   struct insn_ent *ie;\n   struct attr_value_list *iv;\n-  int i;\n+  uint64_t i;\n   rtx newexp = exp;\n   bool left_alt, right_alt;\n \n@@ -2779,7 +2779,7 @@ simplify_test_exp (rtx exp, int insn_code, int insn_index)\n     case EQ_ATTR:\n       if (XSTR (exp, 0) == alternative_name)\n \t{\n-\t  newexp = mk_attr_alt (1 << atoi (XSTR (exp, 1)));\n+\t  newexp = mk_attr_alt (((uint64_t) 1) << atoi (XSTR (exp, 1)));\n \t  break;\n \t}\n \n@@ -5263,10 +5263,11 @@ main (int argc, char **argv)\n     expand_delays ();\n \n   /* Make `insn_alternatives'.  */\n-  insn_alternatives = oballocvec (int, insn_code_number);\n+  insn_alternatives = oballocvec (uint64_t, insn_code_number);\n   for (id = defs; id; id = id->next)\n     if (id->insn_code >= 0)\n-      insn_alternatives[id->insn_code] = (1 << id->num_alternatives) - 1;\n+      insn_alternatives[id->insn_code]\n+\t= (((uint64_t) 1) << id->num_alternatives) - 1;\n \n   /* Make `insn_n_alternatives'.  */\n   insn_n_alternatives = oballocvec (int, insn_code_number);"}]}