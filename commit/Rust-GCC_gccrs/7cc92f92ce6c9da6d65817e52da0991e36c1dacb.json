{"sha": "7cc92f92ce6c9da6d65817e52da0991e36c1dacb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NjOTJmOTJjZTZjOWRhNmQ2NTgxN2U1MmRhMDk5MWUzNmMxZGFjYg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-01-26T17:48:20Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2006-01-26T17:48:20Z"}, "message": "tree-ssa-structalias.c (intra_create_variable_infos): Create heap variables for incoming parameters if flag_argument_noalias > 1.\n\n2006-01-26  Richard Guenther  <rguenther@suse.de>\n            Andrew Pinski  <pinskia@physics.uc.edu>\n\n        * tree-ssa-structalias.c (intra_create_variable_infos):\n        Create heap variables for incoming parameters if\n        flag_argument_noalias > 1.  \n        (find_what_p_points_to): Look through default defs of\n        parameter decls.\n\n\nCo-Authored-By: Andrew Pinski <pinskia@physics.uc.edu>\n\nFrom-SVN: r110262", "tree": {"sha": "06b5a23ba99e5da79607625fab90818be39a49d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06b5a23ba99e5da79607625fab90818be39a49d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cc92f92ce6c9da6d65817e52da0991e36c1dacb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cc92f92ce6c9da6d65817e52da0991e36c1dacb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cc92f92ce6c9da6d65817e52da0991e36c1dacb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cc92f92ce6c9da6d65817e52da0991e36c1dacb/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4f67dfcf24affdc0336fbfc0ff0611251c9703be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f67dfcf24affdc0336fbfc0ff0611251c9703be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f67dfcf24affdc0336fbfc0ff0611251c9703be"}], "stats": {"total": 62, "additions": 56, "deletions": 6}, "files": [{"sha": "9407bcd7ae210a9c8394c5877f5fca103149f119", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cc92f92ce6c9da6d65817e52da0991e36c1dacb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cc92f92ce6c9da6d65817e52da0991e36c1dacb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7cc92f92ce6c9da6d65817e52da0991e36c1dacb", "patch": "@@ -1,3 +1,12 @@\n+2006-01-26  Richard Guenther  <rguenther@suse.de>\n+            Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\t* tree-ssa-structalias.c (intra_create_variable_infos):\n+\tCreate heap variables for incoming parameters if\n+\tflag_argument_noalias > 1.\n+\t(find_what_p_points_to): Look through default defs of\n+\tparameter decls.\n+\n 2006-01-26  Jeff Law  <law@redhat.com>\n \n \tPR ada/25900"}, {"sha": "5f323ce70ef6c09b16cdf260304ca501a0a6b244", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 47, "deletions": 6, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cc92f92ce6c9da6d65817e52da0991e36c1dacb/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cc92f92ce6c9da6d65817e52da0991e36c1dacb/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=7cc92f92ce6c9da6d65817e52da0991e36c1dacb", "patch": "@@ -4032,7 +4032,8 @@ intra_create_variable_infos (void)\n {\n   tree t;\n \n-  /* For each incoming argument arg, ARG = &ANYTHING */\n+  /* For each incoming argument arg, ARG = &ANYTHING or a dummy variable if\n+     flag_argument_noalias > 1. */\n   for (t = DECL_ARGUMENTS (current_function_decl); t; t = TREE_CHAIN (t))\n     {\n       struct constraint_expr lhs;\n@@ -4041,11 +4042,43 @@ intra_create_variable_infos (void)\n       lhs.offset = 0;\n       lhs.type = SCALAR;\n       lhs.var  = create_variable_info_for (t, alias_get_name (t));\n-      \n-      for (p = get_varinfo (lhs.var); p; p = p->next)\n-\tmake_constraint_to_anything (p);\n-    }\t\n \n+      /* With flag_argument_noalias greater than one means that the incomming\n+         argument cannot alias anything except for itself so create a HEAP\n+         variable.  */\n+      if (POINTER_TYPE_P (TREE_TYPE (t))\n+\t  && flag_argument_noalias > 1)\n+\t{\n+\t  varinfo_t vi;\n+\t  struct constraint_expr rhs;\n+\t  tree heapvar = heapvar_lookup (t);\n+\t  unsigned int id;\n+\t  if (heapvar == NULL_TREE)\n+\t    {\n+\t      heapvar = create_tmp_var_raw (TREE_TYPE (TREE_TYPE (t)), \"PARM_NOALIAS\");\n+\t      DECL_EXTERNAL (heapvar) = 1;\n+\t      add_referenced_tmp_var (heapvar);\n+\t      heapvar_insert (t, heapvar);\n+\t    }\n+\t  id = create_variable_info_for (heapvar,\n+\t\t\t\t\t alias_get_name (heapvar));\n+\t  vi = get_varinfo (id);\n+\t  vi->is_artificial_var = 1;\n+\t  vi->is_heap_var = 1;\n+\t  rhs.var = id;\n+\t  rhs.type = ADDRESSOF;\n+\t  rhs.offset = 0;\n+          for (p = get_varinfo (lhs.var); p; p = p->next)\n+\t    {\n+\t      struct constraint_expr temp = lhs;\n+\t      temp.var = p->id;\n+\t      process_constraint (new_constraint (temp, rhs));\n+\t    }\n+\t}\n+      else      \n+\tfor (p = get_varinfo (lhs.var); p; p = p->next)\n+\t  make_constraint_to_anything (p);\n+    }\t\n }\n \n /* Set bits in INTO corresponding to the variable uids in solution set\n@@ -4105,11 +4138,19 @@ bool\n find_what_p_points_to (tree p)\n {\n   unsigned int id = 0;\n+  tree lookup_p = p;\n \n   if (!have_alias_info)\n     return false;\n \n-  if (lookup_id_for_tree (p, &id))\n+  /* For parameters, get at the points-to set for the actual parm\n+     decl.  */\n+  if (TREE_CODE (p) == SSA_NAME \n+      && TREE_CODE (SSA_NAME_VAR (p)) == PARM_DECL \n+      && default_def (SSA_NAME_VAR (p)) == p)\n+    lookup_p = SSA_NAME_VAR (p);\n+\n+  if (lookup_id_for_tree (lookup_p, &id))\n     {\n       varinfo_t vi = get_varinfo (id);\n       "}]}