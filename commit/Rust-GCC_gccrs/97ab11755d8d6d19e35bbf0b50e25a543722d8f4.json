{"sha": "97ab11755d8d6d19e35bbf0b50e25a543722d8f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdhYjExNzU1ZDhkNmQxOWUzNWJiZjBiNTBlMjVhNTQzNzIyZDhmNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2002-11-05T12:41:52Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2002-11-05T12:41:52Z"}, "message": "mips.h (CANNOT_CHANGE_MODE_CLASS): Move comment to...\n\n\t* config/mips/mips.h (CANNOT_CHANGE_MODE_CLASS): Move comment to...\n\t* config/mips/mips.c (mips_cannot_change_mode_class): ...here.\n\nFrom-SVN: r58821", "tree": {"sha": "33d739e6b29bf5b1987c6e168d7376847f07d4ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33d739e6b29bf5b1987c6e168d7376847f07d4ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97ab11755d8d6d19e35bbf0b50e25a543722d8f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97ab11755d8d6d19e35bbf0b50e25a543722d8f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97ab11755d8d6d19e35bbf0b50e25a543722d8f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97ab11755d8d6d19e35bbf0b50e25a543722d8f4/comments", "author": null, "committer": null, "parents": [{"sha": "f859a1cd556a411be1b96c35be604224980185ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f859a1cd556a411be1b96c35be604224980185ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f859a1cd556a411be1b96c35be604224980185ce"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "ff854be43329cd76a5d8b9a2a35c4c38ab8503ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ab11755d8d6d19e35bbf0b50e25a543722d8f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ab11755d8d6d19e35bbf0b50e25a543722d8f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97ab11755d8d6d19e35bbf0b50e25a543722d8f4", "patch": "@@ -1,3 +1,8 @@\n+2002-11-05  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.h (CANNOT_CHANGE_MODE_CLASS): Move comment to...\n+\t* config/mips/mips.c (mips_cannot_change_mode_class): ...here.\n+\n 2002-11-04  Dale Johannesen  <dalej@apple.com>\n \n         * doloop.c (doloop_modify_runtime):  Fix loop count computation"}, {"sha": "fa326abc92838fff9d7cae765e2ef52b8c30ce7b", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ab11755d8d6d19e35bbf0b50e25a543722d8f4/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ab11755d8d6d19e35bbf0b50e25a543722d8f4/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=97ab11755d8d6d19e35bbf0b50e25a543722d8f4", "patch": "@@ -8400,7 +8400,22 @@ function_arg_pass_by_reference (cum, mode, type, named)\n }\n \n /* Return the class of registers for which a mode change from FROM to TO\n-   is invalid.  */\n+   is invalid.\n+\n+   In little-endian mode, the hi-lo registers are numbered backwards,\n+   so (subreg:SI (reg:DI hi) 0) gets the high word instead of the low\n+   word as intended.\n+\n+   Similarly, when using paired floating-point registers, the first\n+   register holds the low word, regardless of endianness.  So in big\n+   endian mode, (subreg:SI (reg:DF $f0) 0) does not get the high word\n+   as intended.\n+\n+   Also, loading a 32-bit value into a 64-bit floating-point register\n+   will not sign-extend the value, despite what LOAD_EXTEND_OP says.\n+   We can't allow 64-bit float registers to change from a 32-bit\n+   mode to a 64-bit mode.  */\n+\n enum reg_class\n mips_cannot_change_mode_class (from, to)\n      enum machine_mode from, to;"}, {"sha": "3b784c8883d617faa9dbed45cae2030742860cb2", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ab11755d8d6d19e35bbf0b50e25a543722d8f4/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ab11755d8d6d19e35bbf0b50e25a543722d8f4/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=97ab11755d8d6d19e35bbf0b50e25a543722d8f4", "patch": "@@ -2326,23 +2326,6 @@ extern enum reg_class mips_char_to_class[256];\n \n #define CLASS_MAX_NREGS(CLASS, MODE) mips_class_max_nregs (CLASS, MODE)\n \n-/* If defined, gives a class of registers that cannot be used as the\n-   operand of a SUBREG that changes the mode of the object illegally.\n-\n-   In little-endian mode, the hi-lo registers are numbered backwards,\n-   so (subreg:SI (reg:DI hi) 0) gets the high word instead of the low\n-   word as intended.\n-\n-   Similarly, when using paired floating-point registers, the first\n-   register holds the low word, regardless of endianness.  So in big\n-   endian mode, (subreg:SI (reg:DF $f0) 0) does not get the high word\n-   as intended.\n-\n-   Also, loading a 32-bit value into a 64-bit floating-point register\n-   will not sign-extend the value, despite what LOAD_EXTEND_OP says.\n-   We can't allow 64-bit float registers to change from a 32-bit\n-   mode to a 64-bit mode.  */\n-\n #define CANNOT_CHANGE_MODE_CLASS(FROM, TO) \\\n   mips_cannot_change_mode_class (FROM, TO)\n \f"}]}