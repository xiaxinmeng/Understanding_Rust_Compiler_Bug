{"sha": "ccc5b6406394ec9a45b52759b04d9fc3260fa9cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NjNWI2NDA2Mzk0ZWM5YTQ1YjUyNzU5YjA0ZDlmYzMyNjBmYTljYw==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2010-03-05T20:37:44Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-03-05T20:37:44Z"}, "message": "Fix PR42326: Handle more carefully convert expressions in chrec_fold_plus and chrec_fold_mult.\n\n2010-03-05  Sebastian Pop  <sebastian.pop@amd.com>\n\n\tPR middle-end/42326\n\t* tree-chrec.c (chrec_fold_plus_1): Do not handle convert expressions\n\tthat contain scevs.\n\t(chrec_fold_multiply): Same.\n\n\t* gfortran.dg/graphite/pr42326.f90: New.\n\t* gfortran.dg/graphite/pr42326-1.f90: New.\n\nFrom-SVN: r157244", "tree": {"sha": "0a76a3fed9efd2857f0e155b3c235f79073b8067", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a76a3fed9efd2857f0e155b3c235f79073b8067"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccc5b6406394ec9a45b52759b04d9fc3260fa9cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccc5b6406394ec9a45b52759b04d9fc3260fa9cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccc5b6406394ec9a45b52759b04d9fc3260fa9cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccc5b6406394ec9a45b52759b04d9fc3260fa9cc/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "576e4d8266694a87849f4aab60ceaaf576281ea9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/576e4d8266694a87849f4aab60ceaaf576281ea9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/576e4d8266694a87849f4aab60ceaaf576281ea9"}], "stats": {"total": 90, "additions": 90, "deletions": 0}, "files": [{"sha": "4cbe879e8ffe6d3d3846ae264888d8d93be3abaa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccc5b6406394ec9a45b52759b04d9fc3260fa9cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccc5b6406394ec9a45b52759b04d9fc3260fa9cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ccc5b6406394ec9a45b52759b04d9fc3260fa9cc", "patch": "@@ -1,3 +1,10 @@\n+2010-03-05  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR middle-end/42326\n+\t* tree-chrec.c (chrec_fold_plus_1): Do not handle convert expressions\n+\tthat contain scevs.\n+\t(chrec_fold_multiply): Same.\n+\n 2010-03-04  Andrew Pinski  <andrew_pinski@caviumnetworks.com>\n \n \tPR c/43248"}, {"sha": "a9ea6c35c86bc7a7c936a62ceb663d6d5189d539", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccc5b6406394ec9a45b52759b04d9fc3260fa9cc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccc5b6406394ec9a45b52759b04d9fc3260fa9cc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ccc5b6406394ec9a45b52759b04d9fc3260fa9cc", "patch": "@@ -1,3 +1,9 @@\n+2010-03-05  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR middle-end/42326\n+\t* gfortran.dg/graphite/pr42326.f90: New.\n+\t* gfortran.dg/graphite/pr42326-1.f90: New.\n+\n 2010-03-05  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* lib/gnat.exp (gnat_init): Remove GNAT_UNDER_TEST_ORIG."}, {"sha": "c17446a6879dd13bb0f6dee1e697b22f78eb238f", "filename": "gcc/testsuite/gfortran.dg/graphite/pr42326-1.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccc5b6406394ec9a45b52759b04d9fc3260fa9cc/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr42326-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccc5b6406394ec9a45b52759b04d9fc3260fa9cc/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr42326-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr42326-1.f90?ref=ccc5b6406394ec9a45b52759b04d9fc3260fa9cc", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do compile { target i?86-*-* x86_64-*-* } }\n+! { dg-require-effective-target ilp32 }\n+! { dg-options \"-O2 -floop-parallelize-all -fprefetch-loop-arrays -msse2\" }\n+\n+subroutine phasad(t,i,ium)\n+  implicit none\n+  real t(5,4)\n+  integer i,l,ll,ium\n+\n+  do l=1,2\n+     ll=2*l\n+     do i=1,ium\n+        t(i,ll-1)=t(i,ll-1)+t(i,ll)\n+     enddo\n+  enddo\n+  return\n+end subroutine phasad\n+"}, {"sha": "d6939daf89ae6d80a15690b6680b266c24b0f508", "filename": "gcc/testsuite/gfortran.dg/graphite/pr42326.f90", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccc5b6406394ec9a45b52759b04d9fc3260fa9cc/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr42326.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccc5b6406394ec9a45b52759b04d9fc3260fa9cc/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr42326.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr42326.f90?ref=ccc5b6406394ec9a45b52759b04d9fc3260fa9cc", "patch": "@@ -0,0 +1,35 @@\n+! { dg-do compile { target i?86-*-* x86_64-*-* } }\n+! { dg-require-effective-target ilp32 }\n+! { dg-options \"-O2 -floop-strip-mine -fprefetch-loop-arrays -msse2\" }\n+\n+subroutine blts ( ldmx, ldmy, v, tmp1, i, j, k)\n+  implicit none\n+  integer ldmx, ldmy, i, j, k, ip, m, l\n+  real*8 tmp, tmp1, v( 5, ldmx, ldmy, *), tmat(5,5)\n+\n+  do ip = 1, 4\n+     do m = ip+1, 5\n+        tmp = tmp1 * tmat( m, ip )\n+        do l = ip+1, 5\n+           tmat( m, l ) =  tmat( m, l ) - tmat( ip, l )\n+        end do\n+        v( m, i, j, k ) = tmp\n+     end do\n+  end do\n+  return\n+end subroutine blts\n+\n+subroutine phasad(t,i,ium)\n+  implicit none\n+  real t(5,4)\n+  integer i,l,ll,ium\n+\n+  do l=1,2\n+     ll=2*l\n+     do i=1,ium\n+        t(i,ll-1)=t(i,ll-1)+t(i,ll)\n+     enddo\n+  enddo\n+  return\n+end subroutine phasad\n+"}, {"sha": "c945f93190e91207121e2b412652b71dc4daf188", "filename": "gcc/tree-chrec.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccc5b6406394ec9a45b52759b04d9fc3260fa9cc/gcc%2Ftree-chrec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccc5b6406394ec9a45b52759b04d9fc3260fa9cc/gcc%2Ftree-chrec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.c?ref=ccc5b6406394ec9a45b52759b04d9fc3260fa9cc", "patch": "@@ -283,6 +283,10 @@ chrec_fold_plus_1 (enum tree_code code, tree type,\n \tcase POLYNOMIAL_CHREC:\n \t  return chrec_fold_plus_poly_poly (code, type, op0, op1);\n \n+\tCASE_CONVERT:\n+\t  if (tree_contains_chrecs (op1, NULL))\n+\t    return chrec_dont_know;\n+\n \tdefault:\n \t  if (code == PLUS_EXPR || code == POINTER_PLUS_EXPR)\n \t    return build_polynomial_chrec\n@@ -296,6 +300,10 @@ chrec_fold_plus_1 (enum tree_code code, tree type,\n \t       CHREC_RIGHT (op0));\n \t}\n \n+    CASE_CONVERT:\n+      if (tree_contains_chrecs (op0, NULL))\n+\treturn chrec_dont_know;\n+\n     default:\n       switch (TREE_CODE (op1))\n \t{\n@@ -314,6 +322,10 @@ chrec_fold_plus_1 (enum tree_code code, tree type,\n \t\t\t\t    ? build_real (type, dconstm1)\n \t\t\t\t    : build_int_cst_type (type, -1)));\n \n+\tCASE_CONVERT:\n+\t  if (tree_contains_chrecs (op1, NULL))\n+\t    return chrec_dont_know;\n+\n \tdefault:\n \t  {\n \t    int size = 0;\n@@ -393,6 +405,10 @@ chrec_fold_multiply (tree type,\n \tcase POLYNOMIAL_CHREC:\n \t  return chrec_fold_multiply_poly_poly (type, op0, op1);\n \n+\tCASE_CONVERT:\n+\t  if (tree_contains_chrecs (op1, NULL))\n+\t    return chrec_dont_know;\n+\n \tdefault:\n \t  if (integer_onep (op1))\n \t    return op0;\n@@ -405,6 +421,10 @@ chrec_fold_multiply (tree type,\n \t     chrec_fold_multiply (type, CHREC_RIGHT (op0), op1));\n \t}\n \n+    CASE_CONVERT:\n+      if (tree_contains_chrecs (op0, NULL))\n+\treturn chrec_dont_know;\n+\n     default:\n       if (integer_onep (op0))\n \treturn op1;\n@@ -420,6 +440,10 @@ chrec_fold_multiply (tree type,\n \t     chrec_fold_multiply (type, CHREC_LEFT (op1), op0),\n \t     chrec_fold_multiply (type, CHREC_RIGHT (op1), op0));\n \n+\tCASE_CONVERT:\n+\t  if (tree_contains_chrecs (op1, NULL))\n+\t    return chrec_dont_know;\n+\n \tdefault:\n \t  if (integer_onep (op1))\n \t    return op0;"}]}