{"sha": "17b625cbd612f05359c3199a3253f42e4cf25120", "node_id": "C_kwDOANBUbNoAKDE3YjYyNWNiZDYxMmYwNTM1OWMzMTk5YTMyNTNmNDJlNGNmMjUxMjA", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-08-09T13:48:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-09T13:48:52Z"}, "message": "Merge #1444\n\n1444: Handle `rustc_const_{un}stable` properly for intrinsics r=CohenArthur a=CohenArthur\n\nSince extern functions cannot be marked as const (they take no\r\nqualifiers) but some intrinsics are const, while still being `extern\r\n\"rust-intrinsic\", we need to be able to handle the\r\n`#[rustc_const_stable]` and `#[rustc_const_unstable]` attribute.\r\n\r\nTechnically, this simply indicates that a certain intrinsic is constant\r\nand can be used in const contexts, such as `size_of` or `offset`.\r\n\r\nWe also need to mark all const intrinsics with `rustc_const_stable` in\r\nthe testsuite.\r\n\r\nCloses #1440 \n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "36d03056fb9747a4394c56f78c29e13f1d6df82b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36d03056fb9747a4394c56f78c29e13f1d6df82b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17b625cbd612f05359c3199a3253f42e4cf25120", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi8mXECRBK7hj4Ov3rIwAAdzAIAD4bPLZEAtKwQo7QWiqNXUYr\nAiUOkYptIjhln9dyYbxw7AoN02wDDjxAykD8jglE66a0jPdxsS6O6OSEkFBWAssU\nQUmn0kAOar9d8RHM2DlwY8aiKU1lLD22cuSOLT0xY5fcGGmmqQzYPo8rO0C3JiHu\nWQpQH4gco/Lpx7+cyNFVlewE+8Wozf79F5mEE/JdwcQ4yBknWegFFT6pjzcPfNDT\ngzgX7PMDH85GFFTcNhYDPeGsLJsJn0YNdZa2R05IR0PURSD/CkGoS2Q8RDRwQfcc\nuH23AHbnOjnvrNwGWJBquhSFckjnHf3Z5I9MUVoJADZw6pfxR4pFAJo2KDVL9wU=\n=63d/\n-----END PGP SIGNATURE-----\n", "payload": "tree 36d03056fb9747a4394c56f78c29e13f1d6df82b\nparent 8749b66879f3ef78182d7712e5da981cc55f747a\nparent 4ffd884a69396d828049d4a14d17e6d3f6c8d61f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1660052932 +0000\ncommitter GitHub <noreply@github.com> 1660052932 +0000\n\nMerge #1444\n\n1444: Handle `rustc_const_{un}stable` properly for intrinsics r=CohenArthur a=CohenArthur\n\nSince extern functions cannot be marked as const (they take no\r\nqualifiers) but some intrinsics are const, while still being `extern\r\n\"rust-intrinsic\", we need to be able to handle the\r\n`#[rustc_const_stable]` and `#[rustc_const_unstable]` attribute.\r\n\r\nTechnically, this simply indicates that a certain intrinsic is constant\r\nand can be used in const contexts, such as `size_of` or `offset`.\r\n\r\nWe also need to mark all const intrinsics with `rustc_const_stable` in\r\nthe testsuite.\r\n\r\nCloses #1440 \n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17b625cbd612f05359c3199a3253f42e4cf25120", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17b625cbd612f05359c3199a3253f42e4cf25120", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17b625cbd612f05359c3199a3253f42e4cf25120/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8749b66879f3ef78182d7712e5da981cc55f747a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8749b66879f3ef78182d7712e5da981cc55f747a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8749b66879f3ef78182d7712e5da981cc55f747a"}, {"sha": "4ffd884a69396d828049d4a14d17e6d3f6c8d61f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ffd884a69396d828049d4a14d17e6d3f6c8d61f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ffd884a69396d828049d4a14d17e6d3f6c8d61f"}], "stats": {"total": 150, "additions": 147, "deletions": 3}, "files": [{"sha": "ad0a2cfc5c54c2f4e231ac3f05972f0a27c9962a", "filename": "gcc/rust/checks/errors/rust-const-checker.cc", "status": "modified", "additions": 48, "deletions": 3, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b625cbd612f05359c3199a3253f42e4cf25120/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b625cbd612f05359c3199a3253f42e4cf25120/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc?ref=17b625cbd612f05359c3199a3253f42e4cf25120", "patch": "@@ -37,6 +37,21 @@ ConstChecker::go (HIR::Crate &crate)\n     item->accept_vis (*this);\n }\n \n+bool\n+ConstChecker::is_const_extern_fn (HIR::ExternalFunctionItem &fn)\n+{\n+  // FIXME: Is it really how we want to handle `rustc_const_stable`\n+  // and `rustc_const_unstable`?\n+  // TODO: Add these attributes to the attribute check and handle\n+  // `stable` and `unstable` as well\n+  return std::any_of (\n+    fn.get_outer_attrs ().begin (), fn.get_outer_attrs ().end (),\n+    [] (const AST::Attribute &attr) {\n+      // `starts_with` in C++11...\n+      return attr.get_path ().as_string ().rfind (\"rustc_const_\", 0) == 0;\n+    });\n+}\n+\n void\n ConstChecker::visit (IdentifierExpr &ident_expr)\n {}\n@@ -235,11 +250,38 @@ ConstChecker::check_function_call (HirId fn_id, Location locus)\n     return;\n \n   auto maybe_fn = mappings.lookup_hir_item (fn_id);\n-  if (!maybe_fn || maybe_fn->get_item_kind () != Item::ItemKind::Function)\n+  if (maybe_fn && maybe_fn->get_item_kind () != Item::ItemKind::Function)\n     return;\n \n-  auto fn = static_cast<Function *> (maybe_fn);\n-  if (!fn->get_qualifiers ().is_const ())\n+  // There are const extern functions (intrinsics)\n+  // TODO: Should we check the ABI is only \"rust intrinsics\"? Is that handled\n+  // elsewhere?\n+  HirId parent_block;\n+  auto maybe_extern_item\n+    = mappings.lookup_hir_extern_item (fn_id, &parent_block);\n+  if (maybe_extern_item\n+      && maybe_extern_item->get_extern_kind ()\n+\t   != ExternalItem::ExternKind::Function)\n+    return;\n+\n+  auto is_error = false;\n+  if (maybe_fn)\n+    {\n+      auto fn = static_cast<Function *> (maybe_fn);\n+      if (!fn->get_qualifiers ().is_const ())\n+\tis_error = true;\n+    }\n+\n+  if (maybe_extern_item)\n+    {\n+      {\n+\tauto fn = static_cast<ExternalFunctionItem *> (maybe_extern_item);\n+\tif (!is_const_extern_fn (*fn))\n+\t  is_error = true;\n+      }\n+    }\n+\n+  if (is_error)\n     rust_error_at (locus, \"only functions marked as %<const%> are allowed to \"\n \t\t\t  \"be called from constant contexts\");\n }\n@@ -522,6 +564,9 @@ ConstChecker::visit (Function &function)\n   if (const_fn)\n     const_context.enter (function.get_mappings ().get_hirid ());\n \n+  for (auto &param : function.get_function_params ())\n+    param.get_type ()->accept_vis (*this);\n+\n   function.get_definition ()->accept_vis (*this);\n \n   if (const_fn)"}, {"sha": "608ea3e075073e791a9b16b0caa5fc7b43cacd3c", "filename": "gcc/rust/checks/errors/rust-const-checker.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b625cbd612f05359c3199a3253f42e4cf25120/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b625cbd612f05359c3199a3253f42e4cf25120/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h?ref=17b625cbd612f05359c3199a3253f42e4cf25120", "patch": "@@ -33,6 +33,13 @@ class ConstChecker : public HIRFullVisitor\n \n   void go (HIR::Crate &crate);\n \n+  /**\n+   * Check if an item is a const extern item or not\n+   * TODO: Move this to a const compilation context class or an attribute\n+   * checking class\n+   */\n+  static bool is_const_extern_fn (HIR::ExternalFunctionItem &fn);\n+\n private:\n   /**\n    * Check that only const functions are called in const contexts"}, {"sha": "9b974b96bbbdbae77907bd03b8e77b7c550699d5", "filename": "gcc/testsuite/rust/compile/const-issue1440.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b625cbd612f05359c3199a3253f42e4cf25120/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst-issue1440.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b625cbd612f05359c3199a3253f42e4cf25120/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst-issue1440.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst-issue1440.rs?ref=17b625cbd612f05359c3199a3253f42e4cf25120", "patch": "@@ -0,0 +1,76 @@\n+// { dg-additional-options \"-w\" }\n+\n+mod intrinsics {\n+    extern \"rust-intrinsic\" {\n+        pub fn wrapping_add<T>(a: T, b: T) -> T;\n+        pub fn rotate_left<T>(a: T, b: T) -> T;\n+        pub fn rotate_right<T>(a: T, b: T) -> T;\n+        pub fn offset<T>(ptr: *const T, count: isize) -> *const T;\n+    }\n+}\n+\n+mod mem {\n+    extern \"rust-intrinsic\" {\n+        #[rustc_const_stable(feature = \"const_transmute\", since = \"1.46.0\")]\n+        pub fn transmute<T, U>(_: T) -> U;\n+        pub fn size_of<T>() -> usize;\n+    }\n+}\n+\n+macro_rules! impl_uint {\n+    ($($ty:ident = $lang:literal),*) => {\n+        $(\n+            impl $ty {\n+                pub fn wrapping_add(self, rhs: Self) -> Self {\n+                    // intrinsics::wrapping_add(self, rhs)\n+                    self + rhs\n+                }\n+\n+                pub fn rotate_left(self, n: u32) -> Self {\n+                    unsafe {\n+                        intrinsics::rotate_left(self, n as Self)\n+                    }\n+                }\n+\n+                pub fn rotate_right(self, n: u32) -> Self {\n+                    unsafe {\n+                        intrinsics::rotate_right(self, n as Self)\n+                    }\n+                }\n+\n+                pub fn to_le(self) -> Self {\n+                    #[cfg(target_endian = \"little\")]\n+                    {\n+                        self\n+                    }\n+                }\n+\n+                pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n+                    // { dg-error \"only functions marked as .const. are allowed to be called from constant contexts\" \"\" { target *-*-* } .-1 }\n+                    Self::from_le(Self::from_ne_bytes(bytes))\n+                }\n+\n+                pub const fn from_le(x: Self) -> Self {\n+                    #[cfg(target_endian = \"little\")]\n+                    {\n+                        x\n+                    }\n+                }\n+\n+                pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n+                    // { dg-error \"only functions marked as .const. are allowed to be called from constant contexts\" \"\" { target *-*-* } .-1 }\n+                    unsafe { mem::transmute(bytes) }\n+                }\n+            }\n+        )*\n+    }\n+}\n+\n+impl_uint!(\n+    u8 = \"u8\",\n+    u16 = \"u16\",\n+    u32 = \"u32\",\n+    u64 = \"u64\",\n+    u128 = \"u128\",\n+    usize = \"usize\"\n+);"}, {"sha": "939f0f981e007dc5e5cecdde62636cdc33daaba6", "filename": "gcc/testsuite/rust/compile/issue-1031.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b625cbd612f05359c3199a3253f42e4cf25120/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1031.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b625cbd612f05359c3199a3253f42e4cf25120/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1031.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1031.rs?ref=17b625cbd612f05359c3199a3253f42e4cf25120", "patch": "@@ -1,4 +1,5 @@\n extern \"rust-intrinsic\" {\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\n }\n "}, {"sha": "343aaab078b6aaefa291e4dacecca3ebbc3af221", "filename": "gcc/testsuite/rust/compile/issue-1289.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b625cbd612f05359c3199a3253f42e4cf25120/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1289.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b625cbd612f05359c3199a3253f42e4cf25120/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1289.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1289.rs?ref=17b625cbd612f05359c3199a3253f42e4cf25120", "patch": "@@ -4,6 +4,7 @@ extern \"C\" {\n \n mod intrinsics {\n     extern \"rust-intrinsic\" {\n+        #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n         pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\n     }\n }"}, {"sha": "f346d9a572a264de79fae0f33f6a662be167de01", "filename": "gcc/testsuite/rust/compile/torture/issue-1075.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b625cbd612f05359c3199a3253f42e4cf25120/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1075.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b625cbd612f05359c3199a3253f42e4cf25120/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1075.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1075.rs?ref=17b625cbd612f05359c3199a3253f42e4cf25120", "patch": "@@ -1,5 +1,6 @@\n // { dg-additional-options \"-w\" }\n extern \"rust-intrinsic\" {\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\n }\n "}, {"sha": "a3fa2c36be75b59aa320c895d1378f5d48b95adb", "filename": "gcc/testsuite/rust/compile/torture/issue-1432.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b625cbd612f05359c3199a3253f42e4cf25120/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1432.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b625cbd612f05359c3199a3253f42e4cf25120/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1432.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1432.rs?ref=17b625cbd612f05359c3199a3253f42e4cf25120", "patch": "@@ -1,16 +1,22 @@\n // { dg-additional-options \"-w\" }\n mod intrinsics {\n     extern \"rust-intrinsic\" {\n+        #[rustc_const_stable(feature = \"const_int_wrapping\", since = \"1.40.0\")]\n         pub fn wrapping_add<T>(a: T, b: T) -> T;\n+        #[rustc_const_stable(feature = \"const_int_rotate\", since = \"1.40.0\")]\n         pub fn rotate_left<T>(a: T, b: T) -> T;\n+        #[rustc_const_stable(feature = \"const_int_rotate\", since = \"1.40.0\")]\n         pub fn rotate_right<T>(a: T, b: T) -> T;\n+        #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n         pub fn offset<T>(ptr: *const T, count: isize) -> *const T;\n     }\n }\n \n mod mem {\n     extern \"rust-intrinsic\" {\n+        #[rustc_const_stable(feature = \"const_transmute\", since = \"1.46.0\")]\n         fn transmute<T, U>(_: T) -> U;\n+        #[rustc_const_stable(feature = \"const_size_of\", since = \"1.40.0\")]\n         fn size_of<T>() -> usize;\n     }\n }"}, {"sha": "740cf7cfa93e55950b9dbaa0666ec19b8b347263", "filename": "gcc/testsuite/rust/execute/torture/issue-1120.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b625cbd612f05359c3199a3253f42e4cf25120/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1120.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b625cbd612f05359c3199a3253f42e4cf25120/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1120.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1120.rs?ref=17b625cbd612f05359c3199a3253f42e4cf25120", "patch": "@@ -1,5 +1,6 @@\n // { dg-additional-options \"-w\" }\n extern \"rust-intrinsic\" {\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\n }\n "}, {"sha": "fd3d7b6d72a43e2395986a625d48e7086c62bc19", "filename": "gcc/testsuite/rust/execute/torture/issue-1133.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b625cbd612f05359c3199a3253f42e4cf25120/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1133.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b625cbd612f05359c3199a3253f42e4cf25120/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1133.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1133.rs?ref=17b625cbd612f05359c3199a3253f42e4cf25120", "patch": "@@ -1,5 +1,6 @@\n // { dg-additional-options \"-w\" }\n extern \"rust-intrinsic\" {\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\n }\n "}, {"sha": "63d7681dc2902c58db2004289175f8139666eb76", "filename": "gcc/testsuite/rust/execute/torture/issue-1232.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b625cbd612f05359c3199a3253f42e4cf25120/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1232.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b625cbd612f05359c3199a3253f42e4cf25120/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1232.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1232.rs?ref=17b625cbd612f05359c3199a3253f42e4cf25120", "patch": "@@ -1,6 +1,7 @@\n // { dg-additional-options \"-w\" }\n // { dg-output \"slice_access=3\\n\" }\n extern \"rust-intrinsic\" {\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     fn offset<T>(dst: *const T, offset: isize) -> *const T;\n }\n "}, {"sha": "327de26fb47c25ccef49e69bc77c744edeee3f82", "filename": "gcc/testsuite/rust/execute/torture/issue-1436.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b625cbd612f05359c3199a3253f42e4cf25120/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1436.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b625cbd612f05359c3199a3253f42e4cf25120/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1436.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1436.rs?ref=17b625cbd612f05359c3199a3253f42e4cf25120", "patch": "@@ -2,6 +2,7 @@\n // { dg-output \"\" }\n mod intrinsics {\n     extern \"rust-intrinsic\" {\n+        #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n         pub fn offset<T>(ptr: *const T, count: isize) -> *const T;\n     }\n }"}, {"sha": "f9762b22fa645aef9d047e92f4dbf308f5ab8a2a", "filename": "gcc/testsuite/rust/execute/torture/slice-magic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b625cbd612f05359c3199a3253f42e4cf25120/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice-magic.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b625cbd612f05359c3199a3253f42e4cf25120/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice-magic.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice-magic.rs?ref=17b625cbd612f05359c3199a3253f42e4cf25120", "patch": "@@ -1,5 +1,6 @@\n // { dg-additional-options \"-w\" }\n extern \"rust-intrinsic\" {\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\n }\n "}, {"sha": "d6cbe21e7ecbda089f4da2b344f10961031068cc", "filename": "gcc/testsuite/rust/execute/torture/slice-magic2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b625cbd612f05359c3199a3253f42e4cf25120/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice-magic2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b625cbd612f05359c3199a3253f42e4cf25120/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice-magic2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice-magic2.rs?ref=17b625cbd612f05359c3199a3253f42e4cf25120", "patch": "@@ -1,5 +1,6 @@\n // { dg-additional-options \"-w\" }\n extern \"rust-intrinsic\" {\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\n }\n "}, {"sha": "80bdc2a9c9f44f52232b582032688bf03ca91408", "filename": "gcc/testsuite/rust/execute/torture/str-layout1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b625cbd612f05359c3199a3253f42e4cf25120/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fstr-layout1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b625cbd612f05359c3199a3253f42e4cf25120/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fstr-layout1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fstr-layout1.rs?ref=17b625cbd612f05359c3199a3253f42e4cf25120", "patch": "@@ -2,6 +2,7 @@\n // { dg-output \"t1sz=5 t2sz=10\" }\n mod mem {\n     extern \"rust-intrinsic\" {\n+        #[rustc_const_stable(feature = \"const_transmute\", since = \"1.46.0\")]\n         fn transmute<T, U>(_: T) -> U;\n     }\n }"}]}