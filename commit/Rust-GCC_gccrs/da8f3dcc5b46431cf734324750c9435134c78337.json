{"sha": "da8f3dcc5b46431cf734324750c9435134c78337", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE4ZjNkY2M1YjQ2NDMxY2Y3MzQzMjQ3NTBjOTQzNTEzNGM3ODMzNw==", "commit": {"author": {"name": "Thomas Koenig", "email": "Thomas.Koenig@online.de", "date": "2005-04-22T20:02:44Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2005-04-22T20:02:44Z"}, "message": "05-04-22  Thomas Koenig  <Thomas.Koenig@online.de>\n\n        PR libfortran/20074\n        PR libfortran/20436\n        PR libfortran/21108\n        * gfortran.dg/nested_reshape.f90: new test\n        * gfortran.dg/reshape-alloc.f90: new test\n        * gfortran.dg/reshape.f90: new test\n\n2005-04-22  Thomas Koenig  <Thomas.Koenig@online.de>\n\n        PR libfortran/20074\n        PR libfortran/20436\n        PR libfortran/21108\n        * m4/reshape.m4 (reshape_`'rtype_kind):  rs, rex:  New\n        variables, to be used in calculation of return array sizes.\n        Populate return array descriptor if ret->data is NULL.\n        Fix condition for early return (it used to test something\n        undefined if order was used).\n        Remove duplicate check wether pad is used.\n        * intrinsics/reshape_generic.c (reshape_generic): Likewise.\n        Fix a few places where the wrong variables were set.\n        * generated/reshape_i4.c: Regenerated.\n        * generated/reshape_i8.c: Regenerated.\n\nFrom-SVN: r98585", "tree": {"sha": "cc0f19f26285884c6cba161ccbe33d495e898bb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc0f19f26285884c6cba161ccbe33d495e898bb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da8f3dcc5b46431cf734324750c9435134c78337", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da8f3dcc5b46431cf734324750c9435134c78337", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da8f3dcc5b46431cf734324750c9435134c78337", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da8f3dcc5b46431cf734324750c9435134c78337/comments", "author": null, "committer": null, "parents": [{"sha": "f00fac9d2ffa5ea91809ef1ec85aae415889429c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f00fac9d2ffa5ea91809ef1ec85aae415889429c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f00fac9d2ffa5ea91809ef1ec85aae415889429c"}], "stats": {"total": 237, "additions": 210, "deletions": 27}, "files": [{"sha": "e8786568e15b9693c3347c55b100da71be273a6c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8f3dcc5b46431cf734324750c9435134c78337/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8f3dcc5b46431cf734324750c9435134c78337/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=da8f3dcc5b46431cf734324750c9435134c78337", "patch": "@@ -1,3 +1,12 @@\n+205-04-22  Thomas Koenig  <Thomas.Koenig@online.de>\n+\n+\tPR libfortran/20074\n+\tPR libfortran/20436\n+\tPR libfortran/21108\n+\t* gfortran.dg/nested_reshape.f90: new test\n+\t* gfortran.dg/reshape-alloc.f90: new test\n+\t* gfortran.dg/reshape.f90: new test\n+\n 2005-04-22  Mark Mitchell  <mark@codesourcery.com>\n \n \t* gcc.dg/arm-vfp1.c: New test."}, {"sha": "d71e4ecc150a99ad298e926c2f80d8443b238e75", "filename": "gcc/testsuite/gfortran.dg/nested_reshape.f90", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8f3dcc5b46431cf734324750c9435134c78337/gcc%2Ftestsuite%2Fgfortran.dg%2Fnested_reshape.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8f3dcc5b46431cf734324750c9435134c78337/gcc%2Ftestsuite%2Fgfortran.dg%2Fnested_reshape.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnested_reshape.f90?ref=da8f3dcc5b46431cf734324750c9435134c78337", "patch": "@@ -0,0 +1,12 @@\n+! { dg-do run }\n+! PR 20436: This used to give a runtime error.\n+program nested_reshape\n+  implicit none\n+  real :: k(8,2)\n+  real :: o(8,2)\n+\n+  k = reshape((/1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0, &\n+            9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0/), (/8,2/))\n+\n+  o = reshape(reshape(k, (/2,8/), order=(/2,1/)), (/8,2/))\n+end program"}, {"sha": "c4c7a0e2a8c73dcc572b42e65581c9bda497977d", "filename": "gcc/testsuite/gfortran.dg/reshape-alloc.f90", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8f3dcc5b46431cf734324750c9435134c78337/gcc%2Ftestsuite%2Fgfortran.dg%2Freshape-alloc.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8f3dcc5b46431cf734324750c9435134c78337/gcc%2Ftestsuite%2Fgfortran.dg%2Freshape-alloc.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Freshape-alloc.f90?ref=da8f3dcc5b46431cf734324750c9435134c78337", "patch": "@@ -0,0 +1,32 @@\n+! { dg-do run }\n+! PR 20074: This used to segfault at runtime.\n+! Test case contributed by \"Alfredo Buttari\" <pitagoras@tin.it>\n+\n+program tryreshape\n+\n+  integer,allocatable :: vect1(:),resh1(:,:)\n+  integer,pointer :: vect(:),resh(:,:)\n+  integer :: vect2(2*4), resh2(2,4)\n+  integer :: r, s(2)\n+\n+  r=2;  nb=4\n+\n+  s(:)=(/r,nb/)\n+\n+  allocate(vect(nb*r),vect1(nb*r))\n+  allocate(resh(r,nb),resh1(r,nb))\n+\n+  vect =1\n+  vect1=1\n+  vect2=1\n+\n+  resh2 = reshape(vect2,s)\n+  if (resh2(1,1) /= 1.0) call abort\n+\n+  resh1 = reshape(vect1,s)\n+  if (resh1(1,1) /= 1.0) call abort\n+\n+  resh = reshape(vect,s)\n+  if (resh(1,1) /= 1.0) call abort\n+\n+end program tryreshape"}, {"sha": "3dba09892b68c95de36dbec30a17c0dd9909e996", "filename": "gcc/testsuite/gfortran.dg/reshape.f90", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8f3dcc5b46431cf734324750c9435134c78337/gcc%2Ftestsuite%2Fgfortran.dg%2Freshape.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8f3dcc5b46431cf734324750c9435134c78337/gcc%2Ftestsuite%2Fgfortran.dg%2Freshape.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Freshape.f90?ref=da8f3dcc5b46431cf734324750c9435134c78337", "patch": "@@ -0,0 +1,33 @@\n+! { dg-do run }\n+! This tests a few reshape PRs.\n+program resh\n+  implicit none\n+  real, dimension (2,3) :: a,c\n+  real, dimension (12) :: b\n+  type foo\n+    real :: r\n+  end type foo\n+  type(foo), dimension (2,3) :: ar\n+  type(foo), dimension (12) :: br\n+\n+  character (len=80) line1, line2, line3\n+  integer :: i\n+\n+  ! PR 21108:  This used to give undefined results.\n+  b = (/(i,i=1,12)/)\n+  a = reshape(b(1:12:2),shape(a),order=(/2,1/))\n+  c = reshape(b(1:12:2),shape(a),order=(/2,1/))\n+  if (any (a /= c)) call abort\n+\n+  ! Test generic reshape\n+  br%r = b\n+  ar = reshape(br(1:12:2),shape(a),order=(/2,1/))\n+  if (any (ar%r /= a)) call abort\n+\n+  ! Test callee-allocated memory with a write statement\n+  write (line1,'(6F8.3)') reshape(b(1:12:2),shape(a),order=(/2,1/))\n+  write (line2,'(6F8.3)') a\n+  if (line1 /= line2 ) call abort\n+  write (line3,'(6F8.3)') reshape(br(1:12:2),shape(ar),order=(/2,1/))\n+  if (line1 /= line3 ) call abort\n+end"}, {"sha": "66ecfd08c6803ad99e8f395aa49a1293d5a90daf", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8f3dcc5b46431cf734324750c9435134c78337/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8f3dcc5b46431cf734324750c9435134c78337/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=da8f3dcc5b46431cf734324750c9435134c78337", "patch": "@@ -1,3 +1,19 @@\n+2005-04-22  Thomas Koenig  <Thomas.Koenig@online.de>\n+\n+\tPR libfortran/20074\n+\tPR libfortran/20436\n+\tPR libfortran/21108\n+\t* m4/reshape.m4 (reshape_`'rtype_kind):  rs, rex:  New\n+\tvariables, to be used in calculation of return array sizes.\n+\tPopulate return array descriptor if ret->data is NULL.\n+\tFix condition for early return (it used to test something\n+\tundefined if order was used).\n+\tRemove duplicate check wether pad is used.\n+\t* intrinsics/reshape_generic.c (reshape_generic): Likewise.\n+\tFix a few places where the wrong variables were set.\n+\t* generated/reshape_i4.c: Regenerated.\n+\t* generated/reshape_i8.c: Regenerated.\n+\n 2005-04-18 Paul Thomas <pault@gcc.gnu.org>\n \n \t* io/list_read.c (nml_touch_nodes, nml_read_obj,"}, {"sha": "b90e56caf4eeaaf71b968a5dbe66edaaf1f10f52", "filename": "libgfortran/generated/reshape_i4.c", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8f3dcc5b46431cf734324750c9435134c78337/libgfortran%2Fgenerated%2Freshape_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8f3dcc5b46431cf734324750c9435134c78337/libgfortran%2Fgenerated%2Freshape_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_i4.c?ref=da8f3dcc5b46431cf734324750c9435134c78337", "patch": "@@ -53,6 +53,8 @@ reshape_4 (gfc_array_i4 * ret, gfc_array_i4 * source, shape_type * shape,\n   index_type rstride0;\n   index_type rdim;\n   index_type rsize;\n+  index_type rs;\n+  index_type rex;\n   GFC_INTEGER_4 *rptr;\n   /* s.* indicates the source array.  */\n   index_type scount[GFC_MAX_DIMENSIONS];\n@@ -74,8 +76,6 @@ reshape_4 (gfc_array_i4 * ret, gfc_array_i4 * source, shape_type * shape,\n   int n;\n   int dim;\n \n-  if (ret->dim[0].stride == 0)\n-    ret->dim[0].stride = 1;\n   if (source->dim[0].stride == 0)\n     source->dim[0].stride = 1;\n   if (shape->dim[0].stride == 0)\n@@ -85,7 +85,29 @@ reshape_4 (gfc_array_i4 * ret, gfc_array_i4 * source, shape_type * shape,\n   if (order && order->dim[0].stride == 0)\n     order->dim[0].stride = 1;\n \n-  rdim = GFC_DESCRIPTOR_RANK (ret);\n+  if (ret->data == NULL)\n+    {\n+      rdim = shape->dim[0].ubound - shape->dim[0].lbound + 1;\n+      rs = 1;\n+      for (n=0; n < rdim; n++)\n+\t{\n+\t  ret->dim[n].lbound = 0;\n+\t  rex = shape->data[n * shape->dim[0].stride];\n+\t  ret->dim[n].ubound =  rex - 1;\n+\t  ret->dim[n].stride = rs;\n+\t  rs *= rex;\n+\t}\n+      ret->base = 0;\n+      ret->data = internal_malloc_size ( rs * sizeof (GFC_INTEGER_4));\n+      ret->dtype = (source->dtype & ~GFC_DTYPE_RANK_MASK) | rdim;\n+    }\n+  else\n+    {\n+      rdim = GFC_DESCRIPTOR_RANK (ret);\n+      if (ret->dim[0].stride == 0)\n+\tret->dim[0].stride = 1;\n+    }\n+\n   rsize = 1;\n   for (n = 0; n < rdim; n++)\n     {\n@@ -105,7 +127,7 @@ reshape_4 (gfc_array_i4 * ret, gfc_array_i4 * source, shape_type * shape,\n         rsize *= rextent[n];\n       else\n         rsize = 0;\n-      if (rextent[dim] <= 0)\n+      if (rextent[n] <= 0)\n         return;\n     }\n \n@@ -127,8 +149,6 @@ reshape_4 (gfc_array_i4 * ret, gfc_array_i4 * source, shape_type * shape,\n \n   if (pad)\n     {\n-      if (pad->dim[0].stride == 0)\n-        pad->dim[0].stride = 1;\n       pdim = GFC_DESCRIPTOR_RANK (pad);\n       psize = 1;\n       for (n = 0; n < pdim; n++)"}, {"sha": "38532c1aac556d1fc96dbf53309adc687586e350", "filename": "libgfortran/generated/reshape_i8.c", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8f3dcc5b46431cf734324750c9435134c78337/libgfortran%2Fgenerated%2Freshape_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8f3dcc5b46431cf734324750c9435134c78337/libgfortran%2Fgenerated%2Freshape_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_i8.c?ref=da8f3dcc5b46431cf734324750c9435134c78337", "patch": "@@ -53,6 +53,8 @@ reshape_8 (gfc_array_i8 * ret, gfc_array_i8 * source, shape_type * shape,\n   index_type rstride0;\n   index_type rdim;\n   index_type rsize;\n+  index_type rs;\n+  index_type rex;\n   GFC_INTEGER_8 *rptr;\n   /* s.* indicates the source array.  */\n   index_type scount[GFC_MAX_DIMENSIONS];\n@@ -74,8 +76,6 @@ reshape_8 (gfc_array_i8 * ret, gfc_array_i8 * source, shape_type * shape,\n   int n;\n   int dim;\n \n-  if (ret->dim[0].stride == 0)\n-    ret->dim[0].stride = 1;\n   if (source->dim[0].stride == 0)\n     source->dim[0].stride = 1;\n   if (shape->dim[0].stride == 0)\n@@ -85,7 +85,29 @@ reshape_8 (gfc_array_i8 * ret, gfc_array_i8 * source, shape_type * shape,\n   if (order && order->dim[0].stride == 0)\n     order->dim[0].stride = 1;\n \n-  rdim = GFC_DESCRIPTOR_RANK (ret);\n+  if (ret->data == NULL)\n+    {\n+      rdim = shape->dim[0].ubound - shape->dim[0].lbound + 1;\n+      rs = 1;\n+      for (n=0; n < rdim; n++)\n+\t{\n+\t  ret->dim[n].lbound = 0;\n+\t  rex = shape->data[n * shape->dim[0].stride];\n+\t  ret->dim[n].ubound =  rex - 1;\n+\t  ret->dim[n].stride = rs;\n+\t  rs *= rex;\n+\t}\n+      ret->base = 0;\n+      ret->data = internal_malloc_size ( rs * sizeof (GFC_INTEGER_8));\n+      ret->dtype = (source->dtype & ~GFC_DTYPE_RANK_MASK) | rdim;\n+    }\n+  else\n+    {\n+      rdim = GFC_DESCRIPTOR_RANK (ret);\n+      if (ret->dim[0].stride == 0)\n+\tret->dim[0].stride = 1;\n+    }\n+\n   rsize = 1;\n   for (n = 0; n < rdim; n++)\n     {\n@@ -105,7 +127,7 @@ reshape_8 (gfc_array_i8 * ret, gfc_array_i8 * source, shape_type * shape,\n         rsize *= rextent[n];\n       else\n         rsize = 0;\n-      if (rextent[dim] <= 0)\n+      if (rextent[n] <= 0)\n         return;\n     }\n \n@@ -127,8 +149,6 @@ reshape_8 (gfc_array_i8 * ret, gfc_array_i8 * source, shape_type * shape,\n \n   if (pad)\n     {\n-      if (pad->dim[0].stride == 0)\n-        pad->dim[0].stride = 1;\n       pdim = GFC_DESCRIPTOR_RANK (pad);\n       psize = 1;\n       for (n = 0; n < pdim; n++)"}, {"sha": "75db5eafd24f58a1ae0ef561dc1e1b03e7ae4cf5", "filename": "libgfortran/intrinsics/reshape_generic.c", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8f3dcc5b46431cf734324750c9435134c78337/libgfortran%2Fintrinsics%2Freshape_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8f3dcc5b46431cf734324750c9435134c78337/libgfortran%2Fintrinsics%2Freshape_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Freshape_generic.c?ref=da8f3dcc5b46431cf734324750c9435134c78337", "patch": "@@ -54,6 +54,8 @@ reshape (parray *ret, parray *source, shape_type *shape,\n   index_type rstride0;\n   index_type rdim;\n   index_type rsize;\n+  index_type rs;\n+  index_type rex;\n   char *rptr;\n   /* s.* indicates the source array.  */\n   index_type scount[GFC_MAX_DIMENSIONS];\n@@ -76,9 +78,6 @@ reshape (parray *ret, parray *source, shape_type *shape,\n   int dim;\n   int size;\n \n-  size = GFC_DESCRIPTOR_SIZE (ret);\n-  if (ret->dim[0].stride == 0)\n-    ret->dim[0].stride = 1;\n   if (source->dim[0].stride == 0)\n     source->dim[0].stride = 1;\n   if (shape->dim[0].stride == 0)\n@@ -88,7 +87,31 @@ reshape (parray *ret, parray *source, shape_type *shape,\n   if (order && order->dim[0].stride == 0)\n     order->dim[0].stride = 1;\n \n-  rdim = GFC_DESCRIPTOR_RANK (ret);\n+  if (ret->data == NULL)\n+    {\n+      size = GFC_DESCRIPTOR_SIZE (ret);\n+      rdim = shape->dim[0].ubound - shape->dim[0].lbound + 1;\n+      rs = 1;\n+      for (n=0; n < rdim; n++)\n+\t{\n+\t  ret->dim[n].lbound = 0;\n+\t  rex = shape->data[n * shape->dim[0].stride];\n+\t  ret->dim[n].ubound =  rex - 1;\n+\t  ret->dim[n].stride = rs;\n+\t  rs *= rex;\n+\t}\n+      ret->base = 0;\n+      ret->data = internal_malloc_size ( rs * size );\n+      ret->dtype = (source->dtype & ~GFC_DTYPE_RANK_MASK) | rdim;\n+    }\n+  else\n+    {\n+      size = GFC_DESCRIPTOR_SIZE (ret);\n+      rdim = GFC_DESCRIPTOR_RANK (ret);\n+      if (ret->dim[0].stride == 0)\n+\tret->dim[0].stride = 1;\n+    }\n+\n   rsize = 1;\n   for (n = 0; n < rdim; n++)\n     {\n@@ -108,7 +131,7 @@ reshape (parray *ret, parray *source, shape_type *shape,\n         rsize *= rextent[n];\n       else\n         rsize = 0;\n-      if (rextent[dim] <= 0)\n+      if (rextent[n] <= 0)\n         return;\n     }\n \n@@ -122,16 +145,14 @@ reshape (parray *ret, parray *source, shape_type *shape,\n       if (sextent[n] <= 0)\n         abort ();\n \n-      if (rsize == sstride[n])\n+      if (ssize == sstride[n])\n         ssize *= sextent[n];\n       else\n         ssize = 0;\n     }\n \n   if (pad)\n     {\n-      if (pad->dim[0].stride == 0)\n-        pad->dim[0].stride = 1;\n       pdim = GFC_DESCRIPTOR_RANK (pad);\n       psize = 1;\n       for (n = 0; n < pdim; n++)\n@@ -144,7 +165,7 @@ reshape (parray *ret, parray *source, shape_type *shape,\n           if (psize == pstride[n])\n             psize *= pextent[n];\n           else\n-            rsize = 0;\n+            psize = 0;\n         }\n       pptr = pad->data;\n     }"}, {"sha": "541377f01c5cae325f064e84d81459c1ae5d4e5a", "filename": "libgfortran/m4/reshape.m4", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8f3dcc5b46431cf734324750c9435134c78337/libgfortran%2Fm4%2Freshape.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8f3dcc5b46431cf734324750c9435134c78337/libgfortran%2Fm4%2Freshape.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Freshape.m4?ref=da8f3dcc5b46431cf734324750c9435134c78337", "patch": "@@ -55,6 +55,8 @@ reshape_`'rtype_kind (rtype * ret, rtype * source, shape_type * shape,\n   index_type rstride0;\n   index_type rdim;\n   index_type rsize;\n+  index_type rs;\n+  index_type rex;\n   rtype_name *rptr;\n   /* s.* indicates the source array.  */\n   index_type scount[GFC_MAX_DIMENSIONS];\n@@ -76,8 +78,6 @@ reshape_`'rtype_kind (rtype * ret, rtype * source, shape_type * shape,\n   int n;\n   int dim;\n \n-  if (ret->dim[0].stride == 0)\n-    ret->dim[0].stride = 1;\n   if (source->dim[0].stride == 0)\n     source->dim[0].stride = 1;\n   if (shape->dim[0].stride == 0)\n@@ -87,7 +87,29 @@ reshape_`'rtype_kind (rtype * ret, rtype * source, shape_type * shape,\n   if (order && order->dim[0].stride == 0)\n     order->dim[0].stride = 1;\n \n-  rdim = GFC_DESCRIPTOR_RANK (ret);\n+  if (ret->data == NULL)\n+    {\n+      rdim = shape->dim[0].ubound - shape->dim[0].lbound + 1;\n+      rs = 1;\n+      for (n=0; n < rdim; n++)\n+\t{\n+\t  ret->dim[n].lbound = 0;\n+\t  rex = shape->data[n * shape->dim[0].stride];\n+\t  ret->dim[n].ubound =  rex - 1;\n+\t  ret->dim[n].stride = rs;\n+\t  rs *= rex;\n+\t}\n+      ret->base = 0;\n+      ret->data = internal_malloc_size ( rs * sizeof (rtype_name));\n+      ret->dtype = (source->dtype & ~GFC_DTYPE_RANK_MASK) | rdim;\n+    }\n+  else\n+    {\n+      rdim = GFC_DESCRIPTOR_RANK (ret);\n+      if (ret->dim[0].stride == 0)\n+\tret->dim[0].stride = 1;\n+    }\n+\n   rsize = 1;\n   for (n = 0; n < rdim; n++)\n     {\n@@ -107,7 +129,7 @@ reshape_`'rtype_kind (rtype * ret, rtype * source, shape_type * shape,\n         rsize *= rextent[n];\n       else\n         rsize = 0;\n-      if (rextent[dim] <= 0)\n+      if (rextent[n] <= 0)\n         return;\n     }\n \n@@ -129,8 +151,6 @@ reshape_`'rtype_kind (rtype * ret, rtype * source, shape_type * shape,\n \n   if (pad)\n     {\n-      if (pad->dim[0].stride == 0)\n-        pad->dim[0].stride = 1;\n       pdim = GFC_DESCRIPTOR_RANK (pad);\n       psize = 1;\n       for (n = 0; n < pdim; n++)"}]}