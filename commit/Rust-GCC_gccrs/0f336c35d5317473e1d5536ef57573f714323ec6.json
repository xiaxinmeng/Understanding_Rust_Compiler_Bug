{"sha": "0f336c35d5317473e1d5536ef57573f714323ec6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYzMzZjMzVkNTMxNzQ3M2UxZDU1MzZlZjU3NTczZjcxNDMyM2VjNg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-08-08T11:30:13Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-08-08T11:30:13Z"}, "message": "re PR tree-optimization/37056 (ICE in build2_stat, at tree.c:3257)\n\n2008-08-08  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/37056\n\t* gimple.h (gimple_assign_rhs_class): New helper function.\n\t* tree-ssa-loop-niter.c (get_val_for): Fix tuplification, handle\n\tunary operations properly.\n\n\t* gcc.c-torture/compile/pr37056.c: New testcase.\n\nFrom-SVN: r138865", "tree": {"sha": "ab403f41f50caaf2a0fd7966b13ae7b058ab89d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab403f41f50caaf2a0fd7966b13ae7b058ab89d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f336c35d5317473e1d5536ef57573f714323ec6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f336c35d5317473e1d5536ef57573f714323ec6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f336c35d5317473e1d5536ef57573f714323ec6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f336c35d5317473e1d5536ef57573f714323ec6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b2077fd226f648da2135c9e4b5ba536a66d50d14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2077fd226f648da2135c9e4b5ba536a66d50d14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2077fd226f648da2135c9e4b5ba536a66d50d14"}], "stats": {"total": 99, "additions": 73, "deletions": 26}, "files": [{"sha": "f3ba5675bcf0355a31ba10fcbf024fa5560e1949", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f336c35d5317473e1d5536ef57573f714323ec6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f336c35d5317473e1d5536ef57573f714323ec6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f336c35d5317473e1d5536ef57573f714323ec6", "patch": "@@ -1,3 +1,10 @@\n+2008-08-08  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/37056\n+\t* gimple.h (gimple_assign_rhs_class): New helper function.\n+\t* tree-ssa-loop-niter.c (get_val_for): Fix tuplification, handle\n+\tunary operations properly.\n+\n 2008-08-07  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.h (ix86_size_cost): Declare."}, {"sha": "f32600daf9150cd0bc6e6a48d54fad65b005809f", "filename": "gcc/gimple.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f336c35d5317473e1d5536ef57573f714323ec6/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f336c35d5317473e1d5536ef57573f714323ec6/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=0f336c35d5317473e1d5536ef57573f714323ec6", "patch": "@@ -1834,6 +1834,17 @@ gimple_assign_set_rhs_code (gimple s, enum tree_code code)\n }\n \n \n+/* Return the gimple rhs class of the code of the expression computed on\n+   the rhs of assignment statement GS.\n+   This will never return GIMPLE_INVALID_RHS.  */\n+\n+static inline enum gimple_rhs_class\n+gimple_assign_rhs_class (const_gimple gs)\n+{\n+  return get_gimple_rhs_class (gimple_assign_rhs_code (gs));\n+}\n+\n+\n /* Return true if S is a type-cast assignment.  */\n \n static inline bool"}, {"sha": "d930e38ce957812a2e32b0f0bcb4bae021664499", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f336c35d5317473e1d5536ef57573f714323ec6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f336c35d5317473e1d5536ef57573f714323ec6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0f336c35d5317473e1d5536ef57573f714323ec6", "patch": "@@ -1,3 +1,8 @@\n+2008-08-08  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/37056\n+\t* gcc.c-torture/compile/pr37056.c: New testcase.\n+\n 2008-08-07  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.dg/Wcxx-compat-2.c: Check for bool/_Bool."}, {"sha": "f9285e2c78438809d9b131a220e65f9d8185920e", "filename": "gcc/testsuite/gcc.c-torture/compile/pr37056.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f336c35d5317473e1d5536ef57573f714323ec6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37056.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f336c35d5317473e1d5536ef57573f714323ec6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37056.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37056.c?ref=0f336c35d5317473e1d5536ef57573f714323ec6", "patch": "@@ -0,0 +1,28 @@\n+extern void abort (void);\n+\n+static union {\n+    char buf[12 * sizeof (long long)];\n+} u;\n+\n+int main ()\n+{\n+  int off, len, i;\n+  char *p, *q;\n+\n+  for (off = 0; off < (sizeof (long long)); off++)\n+    for (len = 1; len < (10 * sizeof (long long)); len++)\n+      {\n+\tfor (i = 0; i < (12 * sizeof (long long)); i++)\n+\t  u.buf[i] = 'a';\n+\tp = (__extension__ (__builtin_constant_p ('\\0') && ('\\0') == '\\0'\n+\t\t\t    ? ({void *__s = (u.buf + off); __s;})\n+\t\t\t    : __builtin_memset (u.buf + off, '\\0', len)));\n+\tif (p != u.buf + off)\n+\t  abort ();\n+\tfor (i = 0; i < off; i++, q++)\n+\t  if (*q != 'a')\n+\t    abort ();\n+      }\n+  return 0;\n+}\n+"}, {"sha": "b8247a0000c15b83b77a9db33f5f254a27f2cde6", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 22, "deletions": 26, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f336c35d5317473e1d5536ef57573f714323ec6/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f336c35d5317473e1d5536ef57573f714323ec6/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=0f336c35d5317473e1d5536ef57573f714323ec6", "patch": "@@ -2034,7 +2034,6 @@ static tree\n get_val_for (tree x, tree base)\n {\n   gimple stmt;\n-  tree nx, val, retval, rhs1, rhs2;\n \n   gcc_assert (is_gimple_min_invariant (base));\n \n@@ -2050,33 +2049,30 @@ get_val_for (tree x, tree base)\n   /* STMT must be either an assignment of a single SSA name or an\n      expression involving an SSA name and a constant.  Try to fold that\n      expression using the value for the SSA name.  */\n-  rhs1 = gimple_assign_rhs1 (stmt);\n-  rhs2 = gimple_assign_rhs2 (stmt);\n-  if (TREE_CODE (rhs1) == SSA_NAME)\n-    nx = rhs1;\n-  else if (rhs2 && TREE_CODE (rhs2) == SSA_NAME)\n-    nx = rhs2;\n-  else\n-    gcc_unreachable ();\n-\n-  /* NX is now the SSA name for which we want to discover the base value.  */\n-  val = get_val_for (nx, base);\n-  if (rhs2)\n-    {\n-      /* If this is a binary expression, fold it.  If folding is\n-\t not possible, return a tree expression with the RHS of STMT.  */\n-      rhs1 = (nx == rhs1) ? val : rhs1;\n-      rhs2 = (nx == rhs2) ? val : rhs2;\n-      retval = fold_binary (gimple_assign_rhs_code (stmt),\n-\t\t\t    gimple_expr_type (stmt), rhs1, rhs2);\n-      if (retval == NULL_TREE)\n-\tretval= build2 (gimple_assign_rhs_code (stmt),\n-\t\t        gimple_expr_type (stmt), rhs1, rhs2);\n+  if (gimple_assign_ssa_name_copy_p (stmt))\n+    return get_val_for (gimple_assign_rhs1 (stmt), base);\n+  else if (gimple_assign_rhs_class (stmt) == GIMPLE_UNARY_RHS\n+\t   && TREE_CODE (gimple_assign_rhs1 (stmt)) == SSA_NAME)\n+    {\n+      return fold_build1 (gimple_assign_rhs_code (stmt),\n+\t\t\t  gimple_expr_type (stmt),\n+\t\t\t  get_val_for (gimple_assign_rhs1 (stmt), base));\n+    }\n+  else if (gimple_assign_rhs_class (stmt) == GIMPLE_BINARY_RHS)\n+    {\n+      tree rhs1 = gimple_assign_rhs1 (stmt);\n+      tree rhs2 = gimple_assign_rhs2 (stmt);\n+      if (TREE_CODE (rhs1) == SSA_NAME)\n+\trhs1 = get_val_for (rhs1, base);\n+      else if (TREE_CODE (rhs2) == SSA_NAME)\n+\trhs2 = get_val_for (rhs2, base);\n+      else\n+\tgcc_unreachable ();\n+      return fold_build2 (gimple_assign_rhs_code (stmt),\n+\t\t\t  gimple_expr_type (stmt), rhs1, rhs2);\n     }\n   else\n-    retval = val;\n-      \n-  return retval;\n+    gcc_unreachable ();\n }\n \n "}]}