{"sha": "54e606f0b1c03b03538a467d4af3e43b201c05d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRlNjA2ZjBiMWMwM2IwMzUzOGE0NjdkNGFmM2U0M2IyMDFjMDVkNw==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2016-11-25T09:49:19Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2016-11-25T09:49:19Z"}, "message": "[PR 70965] Schedule extra rebuild_cgraph_edges\n\n2016-11-25  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/70965\n\t* passes.def (pass_build_ssa_passes): Add pass_rebuild_cgraph_edges.\n\ngcc/testsuite/\n\t* g++.dg/pr70965.C: New test.\n\nFrom-SVN: r242867", "tree": {"sha": "3b1a2809aaf126f4e40aafdb39a8c973ffecc23d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b1a2809aaf126f4e40aafdb39a8c973ffecc23d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54e606f0b1c03b03538a467d4af3e43b201c05d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54e606f0b1c03b03538a467d4af3e43b201c05d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54e606f0b1c03b03538a467d4af3e43b201c05d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54e606f0b1c03b03538a467d4af3e43b201c05d7/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2dbe91cff11ddb92c27ca79c49c111941205c91f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dbe91cff11ddb92c27ca79c49c111941205c91f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dbe91cff11ddb92c27ca79c49c111941205c91f"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "1b18a47d856a1bcf5037e3cc3840782e45bbbbb2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e606f0b1c03b03538a467d4af3e43b201c05d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e606f0b1c03b03538a467d4af3e43b201c05d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=54e606f0b1c03b03538a467d4af3e43b201c05d7", "patch": "@@ -1,3 +1,8 @@\n+2016-11-25  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/70965\n+\t* passes.def (pass_build_ssa_passes): Add pass_rebuild_cgraph_edges.\n+\n 2016-11-24  James Greenahlgh  <james.greenhalgh@arm.com>\n \n \tPR target/78509"}, {"sha": "b73000923b6453f209d1988ae00c19ddb3eb417d", "filename": "gcc/passes.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e606f0b1c03b03538a467d4af3e43b201c05d7/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e606f0b1c03b03538a467d4af3e43b201c05d7/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=54e606f0b1c03b03538a467d4af3e43b201c05d7", "patch": "@@ -56,6 +56,7 @@ along with GCC; see the file COPYING3.  If not see\n   NEXT_PASS (pass_build_ssa_passes);\n   PUSH_INSERT_PASSES_WITHIN (pass_build_ssa_passes)\n       NEXT_PASS (pass_fixup_cfg);\n+      NEXT_PASS (pass_rebuild_cgraph_edges);\n       NEXT_PASS (pass_build_ssa);\n       NEXT_PASS (pass_warn_nonnull_compare);\n       NEXT_PASS (pass_ubsan);"}, {"sha": "a345e9c22d76606766771d72cb1b6314fef9caa1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e606f0b1c03b03538a467d4af3e43b201c05d7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e606f0b1c03b03538a467d4af3e43b201c05d7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=54e606f0b1c03b03538a467d4af3e43b201c05d7", "patch": "@@ -1,3 +1,8 @@\n+2016-11-25  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/70965\n+\t* g++.dg/pr70965.C: New test.\n+\n 2016-11-25  Jakub Jelinek  <jakub@redhat.com>\n \t    Andreas Schwab  <schwab@linux-m68k.org>\n "}, {"sha": "d8a2c35e5325ff48c05d72e75367733b0a157b1e", "filename": "gcc/testsuite/g++.dg/pr70965.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e606f0b1c03b03538a467d4af3e43b201c05d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr70965.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e606f0b1c03b03538a467d4af3e43b201c05d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr70965.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr70965.C?ref=54e606f0b1c03b03538a467d4af3e43b201c05d7", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -std=c++11\" } */\n+\n+struct A {};\n+struct B {};\n+struct C { using p = int *; template <typename> using ra = A; };\n+struct J : C { template <typename> struct K { typedef C::ra<int> o; }; };\n+template <typename> struct D\n+{\n+  struct H : J::K<int>::o { H (J::p, A) : J::K<int>::o () {} };\n+  H d;\n+  D (const char *, const A &x = A ()) : d (0, x) {}\n+};\n+extern template class D<char>;\n+enum L { M };\n+struct F { virtual char *foo (); };\n+template <class> struct I : B { static int foo (int) {} };\n+struct G { typedef I<int> t; };\n+void foo (int) { G::t::foo (0); }\n+void bar (const D<char> &, const D<int> &, int, L);\n+void baz () try { foo (0); } catch (F &e) { bar (e.foo (), \"\", 0, M); }"}]}