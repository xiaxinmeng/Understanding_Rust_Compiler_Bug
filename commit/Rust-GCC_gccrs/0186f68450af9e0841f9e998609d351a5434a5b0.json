{"sha": "0186f68450af9e0841f9e998609d351a5434a5b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE4NmY2ODQ1MGFmOWUwODQxZjllOTk4NjA5ZDM1MWE1NDM0YTViMA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2018-03-21T22:08:34Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2018-03-21T22:08:34Z"}, "message": "[PR c++/71965] silence multi-dim array init sorry without tf_error\n\nWe shouldn't substitute templates into short-circuited-out concepts\nconstraints, but we do, and to add insult to injury, we issue a\nsorry() error when a concept that shouldn't even have been substituted\nattempts to perform a multi-dimensional array initialization with a\nnew{} expression.\n\nAlthough fixing the requirements short-circuiting is probably too\nrisky at this point, we can get closer to the intended effect by\nsilencing that sorry just as we silence other errors.\n\nfor  gcc/cp/ChangeLog\n\n\tPR c++/71965\n\t* init.c (build_vec_init): Silence error, former sorry,\n\twithout tf_error.\n\nfor  gcc/testsuite/ChangeLog\n\n\tPR c++/71965\n\t* g++.dg/concepts/pr71965.C: New.\n\nFrom-SVN: r258749", "tree": {"sha": "f60a71035f6cc6f57530183d8c5f038998863e36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f60a71035f6cc6f57530183d8c5f038998863e36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0186f68450af9e0841f9e998609d351a5434a5b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0186f68450af9e0841f9e998609d351a5434a5b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0186f68450af9e0841f9e998609d351a5434a5b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0186f68450af9e0841f9e998609d351a5434a5b0/comments", "author": null, "committer": null, "parents": [{"sha": "7446b353b56739bbba9a3e7852ebce8ffd19779b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7446b353b56739bbba9a3e7852ebce8ffd19779b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7446b353b56739bbba9a3e7852ebce8ffd19779b"}], "stats": {"total": 53, "additions": 46, "deletions": 7}, "files": [{"sha": "1271e5dca21752c75fb4f3a3ed9407381dc26603", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0186f68450af9e0841f9e998609d351a5434a5b0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0186f68450af9e0841f9e998609d351a5434a5b0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0186f68450af9e0841f9e998609d351a5434a5b0", "patch": "@@ -1,5 +1,9 @@\n 2018-03-21  Alexandre Oliva <aoliva@redhat.com>\n \n+\tPR c++/71965\n+\t* init.c (build_vec_init): Silence error, former sorry,\n+\twithout tf_error.\n+\n \tPR c++/84610\n \tPR c++/84642\n \t* parser.c (abort_fully_implicit_template_p): New."}, {"sha": "3215c23855406064ad642e8487f234cff0ce3816", "filename": "gcc/cp/init.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0186f68450af9e0841f9e998609d351a5434a5b0/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0186f68450af9e0841f9e998609d351a5434a5b0/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=0186f68450af9e0841f9e998609d351a5434a5b0", "patch": "@@ -4384,12 +4384,17 @@ build_vec_init (tree base, tree maxindex, tree init,\n       else if (TREE_CODE (type) == ARRAY_TYPE)\n \t{\n \t  if (init && !BRACE_ENCLOSED_INITIALIZER_P (init))\n-\t    sorry\n-\t      (\"cannot initialize multi-dimensional array with initializer\");\n-\t  elt_init = build_vec_init (build1 (INDIRECT_REF, type, base),\n-\t\t\t\t     0, init,\n-\t\t\t\t     explicit_value_init_p,\n-\t\t\t\t     0, complain);\n+\t    {\n+\t      if ((complain & tf_error))\n+\t\terror_at (loc, \"array must be initialized \"\n+\t\t\t  \"with a brace-enclosed initializer\");\n+\t      elt_init = error_mark_node;\n+\t    }\n+\t  else\n+\t    elt_init = build_vec_init (build1 (INDIRECT_REF, type, base),\n+\t\t\t\t       0, init,\n+\t\t\t\t       explicit_value_init_p,\n+\t\t\t\t       0, complain);\n \t}\n       else if (explicit_value_init_p)\n \t{\n@@ -4449,7 +4454,7 @@ build_vec_init (tree base, tree maxindex, tree init,\n \t}\n \n       current_stmt_tree ()->stmts_are_full_exprs_p = 1;\n-      if (elt_init)\n+      if (elt_init && !errors)\n \tfinish_expr_stmt (elt_init);\n       current_stmt_tree ()->stmts_are_full_exprs_p = 0;\n "}, {"sha": "ea5437a7a17c1063a0597fcca95a065dde47c005", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0186f68450af9e0841f9e998609d351a5434a5b0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0186f68450af9e0841f9e998609d351a5434a5b0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0186f68450af9e0841f9e998609d351a5434a5b0", "patch": "@@ -1,5 +1,8 @@\n 2018-03-21  Alexandre Oliva <aoliva@redhat.com>\n \n+\tPR c++/71965\n+\t* g++.dg/concepts/pr71965.C: New.\n+\n \tPR c++/84610\n \tPR c++/84642\n \t* g++.dg/cpp0x/pr84610.C: New."}, {"sha": "6bfaef19211fa0d76cc2ab3b930836e70ecc70e3", "filename": "gcc/testsuite/g++.dg/concepts/pr71965.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0186f68450af9e0841f9e998609d351a5434a5b0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr71965.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0186f68450af9e0841f9e998609d351a5434a5b0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr71965.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr71965.C?ref=0186f68450af9e0841f9e998609d351a5434a5b0", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile { target c++14 } }\n+// { dg-options \"-fconcepts\" }\n+\n+template <class T>\n+concept bool Destructible() {\n+    return false;\n+}\n+\n+template <class T, class...Args>\n+concept bool ConstructibleObject =\n+    // Concept evaluation should short-circuit even the template\n+    // substitution, so we shouldn't even substitute into the requires\n+    // constraint and the unimplemented multi-dimensional new T{...}\n+    // initialization.  ATM we do, but as long as we don't output the\n+    // sorry() message we used to for such constructs when asked not\n+    // to issue errors, this shouldn't be a problem for this and\n+    // similar cases.\n+    Destructible<T>() && requires (Args&&...args) {\n+        new T{ (Args&&)args... };\n+    };\n+\n+int main() {\n+    using T = int[2][2];\n+    // GCC has not implemented initialization of multi-dimensional\n+    // arrays with new{} expressions.\n+    static_assert(!ConstructibleObject<T, T>);\n+}"}]}