{"sha": "e914c11a99833c265aef1256fdd113129d4b8a0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkxNGMxMWE5OTgzM2MyNjVhZWYxMjU2ZmRkMTEzMTI5ZDRiOGEwZA==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2016-07-21T15:37:50Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2016-07-21T15:37:50Z"}, "message": "[Patch 1/2 ifcvt costs] New target hook: max_noce_ifcvt_seq_cost\n\ngcc/\n\n\t* target.def (max_noce_ifcvt_seq_cost): New.\n\t* doc/tm.texi.in (TARGET_MAX_NOCE_IFCVT_SEQ_COST): Document it.\n\t* doc/tm.texi: Regenerate.\n\t* targhooks.h (default_max_noce_ifcvt_seq_cost): New.\n\t* targhooks.c (default_max_noce_ifcvt_seq_cost): New.\n\t* params.def (PARAM_MAX_RTL_IF_CONVERSION_PREDICTABLE_COST): New.\n\t(PARAM_MAX_RTL_IF_CONVERSION_UNPREDICTABLE_COST): Likewise.\n\t* doc/invoke.texi: Document new params.\n\nFrom-SVN: r238593", "tree": {"sha": "3d8881c54a518cd79f342865a7938c0ebf2f09ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d8881c54a518cd79f342865a7938c0ebf2f09ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e914c11a99833c265aef1256fdd113129d4b8a0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e914c11a99833c265aef1256fdd113129d4b8a0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e914c11a99833c265aef1256fdd113129d4b8a0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e914c11a99833c265aef1256fdd113129d4b8a0d/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "959cef7434c0383f32ff28ab012fe17d9d94a7c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/959cef7434c0383f32ff28ab012fe17d9d94a7c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/959cef7434c0383f32ff28ab012fe17d9d94a7c2"}], "stats": {"total": 106, "additions": 106, "deletions": 0}, "files": [{"sha": "3aebf5c3b9c0e22c06262f46ff0eb68f928cb02b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e914c11a99833c265aef1256fdd113129d4b8a0d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e914c11a99833c265aef1256fdd113129d4b8a0d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e914c11a99833c265aef1256fdd113129d4b8a0d", "patch": "@@ -1,3 +1,14 @@\n+2016-07-21  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* target.def (max_noce_ifcvt_seq_cost): New.\n+\t* doc/tm.texi.in (TARGET_MAX_NOCE_IFCVT_SEQ_COST): Document it.\n+\t* doc/tm.texi: Regenerate.\n+\t* targhooks.h (default_max_noce_ifcvt_seq_cost): New.\n+\t* targhooks.c (default_max_noce_ifcvt_seq_cost): New.\n+\t* params.def (PARAM_MAX_RTL_IF_CONVERSION_PREDICTABLE_COST): New.\n+\t(PARAM_MAX_RTL_IF_CONVERSION_UNPREDICTABLE_COST): Likewise.\n+\t* doc/invoke.texi: Document new params.\n+\n 2016-07-21  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/71947"}, {"sha": "9e039869cc608f7523d75c13425a2e75bfe161bc", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e914c11a99833c265aef1256fdd113129d4b8a0d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e914c11a99833c265aef1256fdd113129d4b8a0d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e914c11a99833c265aef1256fdd113129d4b8a0d", "patch": "@@ -8869,6 +8869,17 @@ considered for if-conversion.  The default is 10, though the compiler will\n also use other heuristics to decide whether if-conversion is likely to be\n profitable.\n \n+@item max-rtl-if-conversion-predictable-cost\n+@item max-rtl-if-conversion-unpredictable-cost\n+RTL if-conversion will try to remove conditional branches around a block\n+and replace them with conditionally executed instructions.  These parameters\n+give the maximum permissible cost for the sequence that would be generated\n+by if-conversion depending on whether the branch is statically determined\n+to be predictable or not.  The units for this parameter are the same as\n+those for the GCC internal seq_cost metric.  The compiler will try to\n+provide a reasonable default for this parameter using the BRANCH_COST\n+target macro.\n+\n @item max-crossjump-edges\n The maximum number of incoming edges to consider for cross-jumping.\n The algorithm used by @option{-fcrossjumping} is @math{O(N^2)} in"}, {"sha": "83bd9abe40cb9b8727cd73be693dd9b8a742aa86", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e914c11a99833c265aef1256fdd113129d4b8a0d/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e914c11a99833c265aef1256fdd113129d4b8a0d/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=e914c11a99833c265aef1256fdd113129d4b8a0d", "patch": "@@ -6526,6 +6526,26 @@ should probably only be given to addresses with different numbers of\n registers on machines with lots of registers.\n @end deftypefn\n \n+@deftypefn {Target Hook} {unsigned int} TARGET_MAX_NOCE_IFCVT_SEQ_COST (edge @var{e})\n+This hook returns a value in the same units as @code{TARGET_RTX_COSTS},\n+giving the maximum acceptable cost for a sequence generated by the RTL\n+if-conversion pass when conditional execution is not available.\n+The RTL if-conversion pass attempts to convert conditional operations\n+that would require a branch to a series of unconditional operations and\n+@code{mov@var{mode}cc} insns.  This hook returns the maximum cost of the\n+unconditional instructions and the @code{mov@var{mode}cc} insns.\n+RTL if-conversion is cancelled if the cost of the converted sequence\n+is greater than the value returned by this hook.\n+\n+@code{e} is the edge between the basic block containing the conditional\n+branch to the basic block which would be executed if the condition\n+were true.\n+\n+The default implementation of this hook uses the\n+@code{max-rtl-if-conversion-[un]predictable} parameters if they are set,\n+and uses a multiple of @code{BRANCH_COST} otherwise.\n+@end deftypefn\n+\n @deftypefn {Target Hook} bool TARGET_NO_SPECULATION_IN_DELAY_SLOTS_P (void)\n This predicate controls the use of the eager delay slot filler to disallow\n speculatively executed instructions being placed in delay slots.  Targets"}, {"sha": "a72c3d8ab10e6abdf49d1250db5e51a3e2a67391", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e914c11a99833c265aef1256fdd113129d4b8a0d/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e914c11a99833c265aef1256fdd113129d4b8a0d/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=e914c11a99833c265aef1256fdd113129d4b8a0d", "patch": "@@ -4762,6 +4762,8 @@ Define this macro if a non-short-circuit operation produced by\n \n @hook TARGET_ADDRESS_COST\n \n+@hook TARGET_MAX_NOCE_IFCVT_SEQ_COST\n+\n @hook TARGET_NO_SPECULATION_IN_DELAY_SLOTS_P\n \n @node Scheduling"}, {"sha": "166032e7fb01726469f87bcf7a08aabbe2b6ffda", "filename": "gcc/params.def", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e914c11a99833c265aef1256fdd113129d4b8a0d/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e914c11a99833c265aef1256fdd113129d4b8a0d/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=e914c11a99833c265aef1256fdd113129d4b8a0d", "patch": "@@ -1222,6 +1222,20 @@ DEFPARAM (PARAM_MAX_RTL_IF_CONVERSION_INSNS,\n \t  \"if-conversion.\",\n \t  10, 0, 99)\n \n+DEFPARAM (PARAM_MAX_RTL_IF_CONVERSION_PREDICTABLE_COST,\n+\t  \"max-rtl-if-conversion-predictable-cost\",\n+\t  \"Maximum permissible cost for the sequence that would be \"\n+\t  \"generated by the RTL if-conversion pass for a branch that \"\n+\t  \"is considered predictable.\",\n+\t  20, 0, 200)\n+\n+DEFPARAM (PARAM_MAX_RTL_IF_CONVERSION_UNPREDICTABLE_COST,\n+\t  \"max-rtl-if-conversion-unpredictable-cost\",\n+\t  \"Maximum permissible cost for the sequence that would be \"\n+\t  \"generated by the RTL if-conversion pass for a branch that \"\n+\t  \"is considered unpredictable.\",\n+\t  40, 0, 200)\n+\n DEFPARAM (PARAM_HSA_GEN_DEBUG_STORES,\n \t  \"hsa-gen-debug-stores\",\n \t  \"Level of hsa debug stores verbosity\","}, {"sha": "27f9ac247edbe3dbd3502ca92fda666cc632f96a", "filename": "gcc/target.def", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e914c11a99833c265aef1256fdd113129d4b8a0d/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e914c11a99833c265aef1256fdd113129d4b8a0d/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=e914c11a99833c265aef1256fdd113129d4b8a0d", "patch": "@@ -3586,6 +3586,30 @@ registers on machines with lots of registers.\",\n  int, (rtx address, machine_mode mode, addr_space_t as, bool speed),\n  default_address_cost)\n \n+/* Give a cost, in RTX Costs units, for an edge.  Like BRANCH_COST, but with\n+   well defined units.  */\n+DEFHOOK\n+(max_noce_ifcvt_seq_cost,\n+ \"This hook returns a value in the same units as @code{TARGET_RTX_COSTS},\\n\\\n+giving the maximum acceptable cost for a sequence generated by the RTL\\n\\\n+if-conversion pass when conditional execution is not available.\\n\\\n+The RTL if-conversion pass attempts to convert conditional operations\\n\\\n+that would require a branch to a series of unconditional operations and\\n\\\n+@code{mov@var{mode}cc} insns.  This hook returns the maximum cost of the\\n\\\n+unconditional instructions and the @code{mov@var{mode}cc} insns.\\n\\\n+RTL if-conversion is cancelled if the cost of the converted sequence\\n\\\n+is greater than the value returned by this hook.\\n\\\n+\\n\\\n+@code{e} is the edge between the basic block containing the conditional\\n\\\n+branch to the basic block which would be executed if the condition\\n\\\n+were true.\\n\\\n+\\n\\\n+The default implementation of this hook uses the\\n\\\n+@code{max-rtl-if-conversion-[un]predictable} parameters if they are set,\\n\\\n+and uses a multiple of @code{BRANCH_COST} otherwise.\",\n+unsigned int, (edge e),\n+default_max_noce_ifcvt_seq_cost)\n+\n /* Permit speculative instructions in delay slots during delayed-branch \n    scheduling.  */\n DEFHOOK"}, {"sha": "69037c1ca0ff614f68d8c24f33634c6f033085f1", "filename": "gcc/targhooks.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e914c11a99833c265aef1256fdd113129d4b8a0d/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e914c11a99833c265aef1256fdd113129d4b8a0d/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=e914c11a99833c265aef1256fdd113129d4b8a0d", "patch": "@@ -74,6 +74,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"intl.h\"\n #include \"opts.h\"\n #include \"gimplify.h\"\n+#include \"predict.h\"\n+#include \"params.h\"\n \n \n bool\n@@ -1986,4 +1988,24 @@ default_optab_supported_p (int, machine_mode, machine_mode, optimization_type)\n   return true;\n }\n \n+/* Default implementation of TARGET_MAX_NOCE_IFCVT_SEQ_COST.  */\n+\n+unsigned int\n+default_max_noce_ifcvt_seq_cost (edge e)\n+{\n+  bool predictable_p = predictable_edge_p (e);\n+\n+  enum compiler_param param\n+    = (predictable_p\n+       ? PARAM_MAX_RTL_IF_CONVERSION_PREDICTABLE_COST\n+       : PARAM_MAX_RTL_IF_CONVERSION_UNPREDICTABLE_COST);\n+\n+  /* If we have a parameter set, use that, otherwise take a guess using\n+     BRANCH_COST.  */\n+  if (global_options_set.x_param_values[param])\n+    return PARAM_VALUE (param);\n+  else\n+    return BRANCH_COST (true, predictable_p) * COSTS_N_INSNS (3);\n+}\n+\n #include \"gt-targhooks.h\""}, {"sha": "2e7ca72a871785d251046ec0480fe35c71c09b3e", "filename": "gcc/targhooks.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e914c11a99833c265aef1256fdd113129d4b8a0d/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e914c11a99833c265aef1256fdd113129d4b8a0d/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=e914c11a99833c265aef1256fdd113129d4b8a0d", "patch": "@@ -256,4 +256,6 @@ extern void default_setup_incoming_vararg_bounds (cumulative_args_t ca ATTRIBUTE\n extern bool default_optab_supported_p (int, machine_mode, machine_mode,\n \t\t\t\t       optimization_type);\n \n+extern unsigned int default_max_noce_ifcvt_seq_cost (edge);\n+\n #endif /* GCC_TARGHOOKS_H */"}]}