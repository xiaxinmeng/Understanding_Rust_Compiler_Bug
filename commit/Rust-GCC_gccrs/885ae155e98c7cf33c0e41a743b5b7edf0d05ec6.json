{"sha": "885ae155e98c7cf33c0e41a743b5b7edf0d05ec6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg1YWUxNTVlOThjN2NmMzNjMGU0MWE3NDNiNWI3ZWRmMGQwNWVjNg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-07-28T19:21:34Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-07-28T19:21:34Z"}, "message": "pa.md (reload_indi, [...]): Scratch register should be a DImode register.\n\n        * pa.md (reload_indi, reload_outdi): Scratch register should\n        be a DImode register.\n        (call, call_value): Use \"word_mode\" instead of \"SImode\" as needed.\n\nFrom-SVN: r28320", "tree": {"sha": "8365f81d11bd1039e0faaddd304769d0de2c8f2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8365f81d11bd1039e0faaddd304769d0de2c8f2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/885ae155e98c7cf33c0e41a743b5b7edf0d05ec6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/885ae155e98c7cf33c0e41a743b5b7edf0d05ec6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/885ae155e98c7cf33c0e41a743b5b7edf0d05ec6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/885ae155e98c7cf33c0e41a743b5b7edf0d05ec6/comments", "author": null, "committer": null, "parents": [{"sha": "895f233648a93130de0091319145d255ef4d140d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/895f233648a93130de0091319145d255ef4d140d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/895f233648a93130de0091319145d255ef4d140d"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "fdecb383deedbae052cbf6c3ff0ecd96c1a3608e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885ae155e98c7cf33c0e41a743b5b7edf0d05ec6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885ae155e98c7cf33c0e41a743b5b7edf0d05ec6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=885ae155e98c7cf33c0e41a743b5b7edf0d05ec6", "patch": "@@ -1,3 +1,9 @@\n+Wed Jul 28 13:18:35 1999  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* pa.md (reload_indi, reload_outdi): Scratch register should\n+\tbe a DImode register.\n+\t(call, call_value): Use \"word_mode\" instead of \"SImode\" as needed.\n+\n Wed Jul 28 11:28:04 1999  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n \n \t* builtins.c (expand_builtin): Typo in call to expand_builtin_ffs."}, {"sha": "56777fd572ff69ae2c911816cfe6401d15388da2", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885ae155e98c7cf33c0e41a743b5b7edf0d05ec6/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885ae155e98c7cf33c0e41a743b5b7edf0d05ec6/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=885ae155e98c7cf33c0e41a743b5b7edf0d05ec6", "patch": "@@ -2408,7 +2408,7 @@\n (define_expand \"reload_indi\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=f\")\n \t(match_operand:DI 1 \"non_hard_reg_operand\" \"\"))\n-   (clobber (match_operand:SI 2 \"register_operand\" \"=&r\"))]\n+   (clobber (match_operand:DI 2 \"register_operand\" \"=&r\"))]\n   \"\"\n   \"\n {\n@@ -2423,7 +2423,7 @@\n (define_expand \"reload_outdi\"\n   [(set (match_operand:DI 0 \"general_operand\" \"\")\n \t(match_operand:DI 1 \"register_operand\" \"f\"))\n-   (clobber (match_operand:SI 2 \"register_operand\" \"=&r\"))]\n+   (clobber (match_operand:DI 2 \"register_operand\" \"=&r\"))]\n   \"\"\n   \"\n {\n@@ -2473,8 +2473,6 @@\n   [(set_attr \"type\" \"move\")\n    (set_attr \"length\" \"8\")])\n \n-;;; Experimental\n-\n (define_insn \"\"\n   [(set (match_operand:DI 0 \"reg_or_nonsymb_mem_operand\"\n \t\t\t  \"=r,o,Q,r,r,r,f,f,*TR\")\n@@ -4309,8 +4307,8 @@\n     call_insn = emit_call_insn (gen_call_internal_symref (op, operands[1]));\n   else\n     {\n-      rtx tmpreg = gen_rtx_REG (SImode, 22);\n-      emit_move_insn (tmpreg, force_reg (SImode, op));\n+      rtx tmpreg = gen_rtx_REG (word_mode, 22);\n+      emit_move_insn (tmpreg, force_reg (word_mode, op));\n       call_insn = emit_call_insn (gen_call_internal_reg (operands[1]));\n     }\n \n@@ -4324,7 +4322,7 @@\n          This will set regs_ever_live for the callee saved register we\n \t stored the PIC register in.  */\n       emit_move_insn (pic_offset_table_rtx,\n-\t\t      gen_rtx_REG (SImode, PIC_OFFSET_TABLE_REGNUM_SAVED));\n+\t\t      gen_rtx_REG (word_mode, PIC_OFFSET_TABLE_REGNUM_SAVED));\n       emit_insn (gen_rtx_USE (VOIDmode, pic_offset_table_rtx));\n \n       /* Gross.  We have to keep the scheduler from moving the restore\n@@ -4451,7 +4449,7 @@\n   rtx call_insn;\n \n   if (TARGET_PORTABLE_RUNTIME)\n-    op = force_reg (SImode, XEXP (operands[1], 0));\n+    op = force_reg (word_mode, XEXP (operands[1], 0));\n   else\n     op = XEXP (operands[1], 0);\n \n@@ -4466,8 +4464,8 @@\n \t\t\t\t\t\t\t\toperands[2]));\n   else\n     {\n-      rtx tmpreg = gen_rtx_REG (SImode, 22);\n-      emit_move_insn (tmpreg, force_reg (SImode, op));\n+      rtx tmpreg = gen_rtx_REG (word_mode, 22);\n+      emit_move_insn (tmpreg, force_reg (word_mode, op));\n       call_insn = emit_call_insn (gen_call_value_internal_reg (operands[0],\n \t\t\t\t\t\t\t       operands[2]));\n     }\n@@ -4481,7 +4479,7 @@\n          This will set regs_ever_live for the callee saved register we\n \t stored the PIC register in.  */\n       emit_move_insn (pic_offset_table_rtx,\n-\t\t      gen_rtx_REG (SImode, PIC_OFFSET_TABLE_REGNUM_SAVED));\n+\t\t      gen_rtx_REG (word_mode, PIC_OFFSET_TABLE_REGNUM_SAVED));\n       emit_insn (gen_rtx_USE (VOIDmode, pic_offset_table_rtx));\n \n       /* Gross.  We have to keep the scheduler from moving the restore"}]}