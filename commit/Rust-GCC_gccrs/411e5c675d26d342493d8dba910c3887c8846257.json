{"sha": "411e5c675d26d342493d8dba910c3887c8846257", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDExZTVjNjc1ZDI2ZDM0MjQ5M2Q4ZGJhOTEwYzM4ODdjODg0NjI1Nw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2016-04-30T00:00:51Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2016-04-30T00:00:51Z"}, "message": "re PR c++/66644 (Rejects C++11 in-class anonymous union members initialization)\n\n/cp\n2016-04-29  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/66644\n\t* class.c (check_field_decl): Remove final int* parameter, change\n\tthe return type to bool; fix logic in order not to reject multiple\n\tinitialized fields in anonymous struct.\n\t(check_field_decls): Adjust call.\n\n/testsuite\n2016-04-29  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/66644\n\t* g++.dg/cpp0x/nsdmi-anon-struct1.C: New.\n\nFrom-SVN: r235662", "tree": {"sha": "adedee90aeaee51ba2ab43c501ad598dac10d6ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adedee90aeaee51ba2ab43c501ad598dac10d6ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/411e5c675d26d342493d8dba910c3887c8846257", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/411e5c675d26d342493d8dba910c3887c8846257", "html_url": "https://github.com/Rust-GCC/gccrs/commit/411e5c675d26d342493d8dba910c3887c8846257", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/411e5c675d26d342493d8dba910c3887c8846257/comments", "author": null, "committer": null, "parents": [{"sha": "63ce14e03b93e351286c9c7b0d20abb5d85b0f20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63ce14e03b93e351286c9c7b0d20abb5d85b0f20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63ce14e03b93e351286c9c7b0d20abb5d85b0f20"}], "stats": {"total": 110, "additions": 87, "deletions": 23}, "files": [{"sha": "25af3f2603e3e2e66ed06df9a5b01033a04efcf1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/411e5c675d26d342493d8dba910c3887c8846257/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/411e5c675d26d342493d8dba910c3887c8846257/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=411e5c675d26d342493d8dba910c3887c8846257", "patch": "@@ -1,3 +1,11 @@\n+2016-04-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/66644\n+\t* class.c (check_field_decl): Remove final int* parameter, change\n+\tthe return type to bool; fix logic in order not to reject multiple\n+\tinitialized fields in anonymous struct.\n+\t(check_field_decls): Adjust call.\n+\n 2016-04-29  Cesar Philippidis  <cesar@codesourcery.com>\n \n \tPR middle-end/70626"}, {"sha": "31fa4b03136a0b4d187bfbc6f5a93bd1cc1b4fbd", "filename": "gcc/cp/class.c", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/411e5c675d26d342493d8dba910c3887c8846257/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/411e5c675d26d342493d8dba910c3887c8846257/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=411e5c675d26d342493d8dba910c3887c8846257", "patch": "@@ -139,7 +139,7 @@ static int count_fields (tree);\n static int add_fields_to_record_type (tree, struct sorted_fields_type*, int);\n static void insert_into_classtype_sorted_fields (tree, tree, int);\n static bool check_bitfield_decl (tree);\n-static void check_field_decl (tree, tree, int *, int *, int *);\n+static bool check_field_decl (tree, tree, int *, int *);\n static void check_field_decls (tree, tree *, int *, int *);\n static tree *build_base_field (record_layout_info, tree, splay_tree, tree *);\n static void build_base_fields (record_layout_info, splay_tree, tree *);\n@@ -3541,14 +3541,14 @@ check_bitfield_decl (tree field)\n    enclosing type T.  Issue any appropriate messages and set appropriate\n    flags.  */\n \n-static void\n+static bool\n check_field_decl (tree field,\n \t\t  tree t,\n \t\t  int* cant_have_const_ctor,\n-\t\t  int* no_const_asn_ref,\n-\t\t  int* any_default_members)\n+\t\t  int* no_const_asn_ref)\n {\n   tree type = strip_array_types (TREE_TYPE (field));\n+  bool any_default_members = false;\n \n   /* In C++98 an anonymous union cannot contain any fields which would change\n      the settings of CANT_HAVE_CONST_CTOR and friends.  */\n@@ -3558,12 +3558,12 @@ check_field_decl (tree field,\n      structs.  So, we recurse through their fields here.  */\n   else if (ANON_AGGR_TYPE_P (type))\n     {\n-      tree fields;\n-\n-      for (fields = TYPE_FIELDS (type); fields; fields = DECL_CHAIN (fields))\n+      for (tree fields = TYPE_FIELDS (type); fields;\n+\t   fields = DECL_CHAIN (fields))\n \tif (TREE_CODE (fields) == FIELD_DECL && !DECL_C_BIT_FIELD (field))\n-\t  check_field_decl (fields, t, cant_have_const_ctor,\n-\t\t\t    no_const_asn_ref, any_default_members);\n+\t  any_default_members |= check_field_decl (fields, t,\n+\t\t\t\t\t\t   cant_have_const_ctor,\n+\t\t\t\t\t\t   no_const_asn_ref);\n     }\n   /* Check members with class type for constructors, destructors,\n      etc.  */\n@@ -3620,13 +3620,11 @@ check_field_decl (tree field,\n   check_abi_tags (t, field);\n \n   if (DECL_INITIAL (field) != NULL_TREE)\n-    {\n-      /* `build_class_init_list' does not recognize\n-\t non-FIELD_DECLs.  */\n-      if (TREE_CODE (t) == UNION_TYPE && *any_default_members != 0)\n-\terror (\"multiple fields in union %qT initialized\", t);\n-      *any_default_members = 1;\n-    }\n+    /* `build_class_init_list' does not recognize\n+       non-FIELD_DECLs.  */\n+    any_default_members = true;\n+\n+  return any_default_members;\n }\n \n /* Check the data members (both static and non-static), class-scoped\n@@ -3662,7 +3660,7 @@ check_field_decls (tree t, tree *access_decls,\n   tree *field;\n   tree *next;\n   bool has_pointers;\n-  int any_default_members;\n+  bool any_default_members;\n   int cant_pack = 0;\n   int field_access = -1;\n \n@@ -3672,7 +3670,7 @@ check_field_decls (tree t, tree *access_decls,\n   has_pointers = false;\n   /* Assume none of the members of this class have default\n      initializations.  */\n-  any_default_members = 0;\n+  any_default_members = false;\n \n   for (field = &TYPE_FIELDS (t); *field; field = next)\n     {\n@@ -3867,11 +3865,16 @@ check_field_decls (tree t, tree *access_decls,\n \n       /* We set DECL_C_BIT_FIELD in grokbitfield.\n \t If the type and width are valid, we'll also set DECL_BIT_FIELD.  */\n-      if (! DECL_C_BIT_FIELD (x) || ! check_bitfield_decl (x))\n-\tcheck_field_decl (x, t,\n-\t\t\t  cant_have_const_ctor_p,\n-\t\t\t  no_const_asn_ref_p,\n-\t\t\t  &any_default_members);\n+      if ((! DECL_C_BIT_FIELD (x) || ! check_bitfield_decl (x))\n+\t  && check_field_decl (x, t,\n+\t\t\t       cant_have_const_ctor_p,\n+\t\t\t       no_const_asn_ref_p))\n+\t{\n+\t  if (any_default_members\n+\t      && TREE_CODE (t) == UNION_TYPE)\n+\t    error (\"multiple fields in union %qT initialized\", t);\n+\t  any_default_members = true;\n+\t}\n \n       /* Now that we've removed bit-field widths from DECL_INITIAL,\n \t anything left in DECL_INITIAL is an NSDMI that makes the class"}, {"sha": "b1d63d824f7000bb731323c7a37c3d51c91928b5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/411e5c675d26d342493d8dba910c3887c8846257/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/411e5c675d26d342493d8dba910c3887c8846257/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=411e5c675d26d342493d8dba910c3887c8846257", "patch": "@@ -1,3 +1,8 @@\n+2016-04-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/66644\n+\t* g++.dg/cpp0x/nsdmi-anon-struct1.C: New.\n+\n 2016-04-29  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/vsx-elemrev-1.c: New."}, {"sha": "35c342a9bb9d8ca18b290ee9f4d08d2a38ba98f1", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi-anon-struct1.C", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/411e5c675d26d342493d8dba910c3887c8846257/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-anon-struct1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/411e5c675d26d342493d8dba910c3887c8846257/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-anon-struct1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-anon-struct1.C?ref=411e5c675d26d342493d8dba910c3887c8846257", "patch": "@@ -0,0 +1,48 @@\n+// PR c++/66644\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wno-pedantic\" }\n+\n+struct test1  \n+{\n+  union\n+  {\n+    struct { char a=0, b=0; };\n+    char buffer[16];\n+  };\n+};\n+\n+struct test2 \n+{\n+  union  \n+  {\n+    struct { char a=0, b; };\n+    char buffer[16];\n+  };\n+};\n+\n+struct test3\n+{\n+  union\n+  {\n+    struct { char a, b; } test2{0,0};\n+    char buffer[16];\n+  };\n+};\n+\n+struct test4\n+{\n+  union  \n+  {   // { dg-error \"multiple fields\" }\n+    struct { char a=0, b=0; };\n+    struct { char c=0, d; };\n+  };\n+};\n+\n+struct test5\n+{\n+  union\n+  {\n+    union { char a=0, b=0; };  // { dg-error \"multiple fields\" }\n+    char buffer[16];\n+  };\n+};"}]}