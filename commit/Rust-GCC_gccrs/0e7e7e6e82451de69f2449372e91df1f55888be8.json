{"sha": "0e7e7e6e82451de69f2449372e91df1f55888be8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU3ZTdlNmU4MjQ1MWRlNjlmMjQ0OTM3MmU5MWRmMWY1NTg4OGJlOA==", "commit": {"author": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2006-10-07T13:34:16Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2006-10-07T13:34:16Z"}, "message": "re PR fortran/16580 ([4.1 only] gfortran ICE on test g77.f-torture/execute/intrinsic77.f)\n\n\tPR fortran/16580\n\tPR fortran/29288\n\n\t* gcc/fortran/intrinsic.c (add_sym): Define the actual_ok when a\n\tgfc_intrinsic_sym structure is filled.\n\t(gfc_intrinsic_actual_ok): New function.\n\t(add_sym_0s, add_sym_1s, add_sym_2s, add_sym_3s, add_sym_4s,\n\tadd_sym_5s): Intrinsic subroutines are not allowed as actual\n\targuments, so we remove argument actual_ok.\n\t(add_functions): Correct the values for actual_ok of all intrinsics.\n\t(add_subroutines): Remove the actual_ok argument, which was never used.\n\t* gcc/fortran/intrinsic.h (gfc_intrinsic_actual_ok): New prototype.\n\t* gcc/fortran/gfortran.h (gfc_resolve_index_func): New prototype.\n\t* gcc/fortran/resolve.c (resolve_actual_arglist): Check whether\n\tan intrinsic used as an argument list is allowed there.\n\t* gcc/fortran/iresolve.c (gfc_resolve_index_func): New function.\n\t(gfc_resolve_len): Change intrinsic function name to agree with\n\tlibgfortran.\n\t* gcc/fortran/trans-decl.c (gfc_get_extern_function_decl): Add\n\tnew case, because some specific intrinsics take 3 arguments.\n\t* gcc/fortran/intrinsic.texi: DIMAG is a GNU extension.\n\n\t* libgfortran/Makefile.am: Add the new files to the build\n\tprocess, and rules to build them.\n\t* libgfortran/Makefile.in: Regenerate.\n\t* libgfortran/m4/misc_specifics.m4: New file.\n\t* libgfortran/m4/specific.m4: Add new special cases for function\n\twith complex argument and real result, like abs_c* and aimag_c*.\n\t* libgfortran/intrinsics/f2c_specifics.F90: Add specifics for\n\tAIMAG, ASINH, ACOSH and ATANH.\n\t* libgfortran/generated/_aimag_c4.F90: New file.\n\t* libgfortran/generated/_aimag_c8.F90: New file.\n\t* libgfortran/generated/_asinh_r10.F90: New file.\n\t* libgfortran/generated/_acosh_r16.F90: New file.\n\t* libgfortran/generated/_aimag_c10.F90: New file.\n\t* libgfortran/generated/_atanh_r16.F90: New file.\n\t* libgfortran/generated/_acosh_r4.F90: New file.\n\t* libgfortran/generated/_acosh_r8.F90: New file.\n\t* libgfortran/generated/_asinh_r4.F90: New file.\n\t* libgfortran/generated/_asinh_r8.F90: New file.\n\t* libgfortran/generated/_asinh_r16.F90: New file.\n\t* libgfortran/generated/_atanh_r4.F90: New file.\n\t* libgfortran/generated/_atanh_r8.F90: New file.\n\t* libgfortran/generated/_acosh_r10.F90: New file.\n\t* libgfortran/generated/misc_specifics.F90: New file.\n\t* libgfortran/generated/_aimag_c16.F90: New file.\n\t* libgfortran/generated/_atanh_r10.F90: New file.\n\n\t* gcc/testsuite/gfortran.fortran-torture/execute/specifics.f90:\n\tAdd tests for using all possible intrinsics as actual arguments.\n\t* gcc/testsuite/gfortran.dg/specifics_1.f90: Add tests for using\n\tall possible intrinsics as actual arguments.\n\t* gcc/testsuite/gfortran.dg/specifics_2.f90: New file.\n\t* gcc/testsuite/gfortran.dg/specifics_3.f90: New file.\n\nFrom-SVN: r117534", "tree": {"sha": "7d388fa3ec358e48da0a798ae99b8b3ed8f52f37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d388fa3ec358e48da0a798ae99b8b3ed8f52f37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e7e7e6e82451de69f2449372e91df1f55888be8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e7e7e6e82451de69f2449372e91df1f55888be8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e7e7e6e82451de69f2449372e91df1f55888be8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e7e7e6e82451de69f2449372e91df1f55888be8/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73d1943acd41e5ee89a530d31aef4559a9cd76ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73d1943acd41e5ee89a530d31aef4559a9cd76ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73d1943acd41e5ee89a530d31aef4559a9cd76ed"}], "stats": {"total": 2067, "additions": 1854, "deletions": 213}, "files": [{"sha": "4a4b131d3acefc2f2429edb344a2f8ddc48ca1fc", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -1,3 +1,26 @@\n+2006-10-07  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR fortran/16580\n+\tPR fortran/29288\n+\t* gcc/fortran/intrinsic.c (add_sym): Define the actual_ok when a\n+\tgfc_intrinsic_sym structure is filled.\n+\t(gfc_intrinsic_actual_ok): New function.\n+\t(add_sym_0s, add_sym_1s, add_sym_2s, add_sym_3s, add_sym_4s,\n+\tadd_sym_5s): Intrinsic subroutines are not allowed as actual\n+\targuments, so we remove argument actual_ok.\n+\t(add_functions): Correct the values for actual_ok of all intrinsics.\n+\t(add_subroutines): Remove the actual_ok argument, which was never used.\n+\t* gcc/fortran/intrinsic.h (gfc_intrinsic_actual_ok): New prototype.\n+\t* gcc/fortran/gfortran.h (gfc_resolve_index_func): New prototype.\n+\t* gcc/fortran/resolve.c (resolve_actual_arglist): Check whether\n+\tan intrinsic used as an argument list is allowed there.\n+\t* gcc/fortran/iresolve.c (gfc_resolve_index_func): New function.\n+\t(gfc_resolve_len): Change intrinsic function name to agree with\n+\tlibgfortran.\n+\t* gcc/fortran/trans-decl.c (gfc_get_extern_function_decl): Add\n+\tnew case, because some specific intrinsics take 3 arguments.\n+\t* gcc/fortran/intrinsic.texi: DIMAG is a GNU extension.\n+\n 2006-10-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/28415"}, {"sha": "afc57dbec2ce43422cd8424d1ccc566d40a4bbfb", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -1940,6 +1940,7 @@ try gfc_convert_type_warn (gfc_expr *, gfc_typespec *, int, int);\n int gfc_generic_intrinsic (const char *);\n int gfc_specific_intrinsic (const char *);\n int gfc_intrinsic_name (const char *, int);\n+int gfc_intrinsic_actual_ok (const char *, const bool);\n gfc_intrinsic_sym *gfc_find_function (const char *);\n \n match gfc_intrinsic_func_interface (gfc_expr *, int);"}, {"sha": "f2185b532125876dd0360f960929a45acfdd0008", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 215, "deletions": 190, "changes": 405, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -194,7 +194,7 @@ do_check (gfc_intrinsic_sym * specific, gfc_actual_arglist * arg)\n    Argument list:\n       char *     name of function\n       int        whether function is elemental\n-      int        If the function can be used as an actual argument\n+      int        If the function can be used as an actual argument [1] [2]\n       bt         return type of function\n       int        kind of return type of function\n       int        Fortran standard version\n@@ -210,13 +210,20 @@ do_check (gfc_intrinsic_sym * specific, gfc_actual_arglist * arg)\n \n    The sequence is terminated by a NULL name.\n \n-   TODO: Are checks on actual_ok implemented elsewhere, or is that just\n-   missing here?  */\n+\n+ [1] Whether a function can or cannot be used as an actual argument is\n+     determined by its presence on the 13.6 list in Fortran 2003.  The\n+     following intrinsics, which are GNU extensions, are considered allowed\n+     as actual arguments: ACOSH ATANH DACOSH DASINH DATANH DCONJG DIMAG\n+     ZABS ZCOS ZEXP ZLOG ZSIN ZSQRT.\n+ [2] The value 2 is used in this field for CHAR, which is allowed as an\n+     actual argument in F2003, but not in F95. It is the only such\n+     intrinsic function.  */\n \n static void\n-add_sym (const char *name, int elemental, int actual_ok ATTRIBUTE_UNUSED,\n-\t bt type, int kind, int standard, gfc_check_f check,\n-\t gfc_simplify_f simplify, gfc_resolve_f resolve, ...)\n+add_sym (const char *name, int elemental, int actual_ok, bt type, int kind,\n+\t int standard, gfc_check_f check, gfc_simplify_f simplify,\n+\t gfc_resolve_f resolve, ...)\n {\n   char buf[GFC_MAX_SYMBOL_LEN + 11]; /* 10 for '_gfortran_', 1 for '\\0'  */\n   int optional, first_flag;\n@@ -246,6 +253,7 @@ add_sym (const char *name, int elemental, int actual_ok ATTRIBUTE_UNUSED,\n       next_sym->lib_name = gfc_get_string (buf);\n \n       next_sym->elemental = elemental;\n+      next_sym->actual_ok = actual_ok;\n       next_sym->ts.type = type;\n       next_sym->ts.kind = kind;\n       next_sym->standard = standard;\n@@ -327,7 +335,7 @@ add_sym_0 (const char *name, int elemental, int actual_ok, bt type,\n    0 arguments.  */\n \n static void\n-add_sym_0s (const char * name, int actual_ok, int standard,\n+add_sym_0s (const char * name, int standard,\n \t    void (*resolve)(gfc_code *))\n {\n   gfc_check_f cf;\n@@ -338,7 +346,7 @@ add_sym_0s (const char * name, int actual_ok, int standard,\n   sf.f1 = NULL;\n   rf.s1 = resolve;\n \n-  add_sym (name, 1, actual_ok, BT_UNKNOWN, 0, standard, cf, sf, rf,\n+  add_sym (name, 1, 0, BT_UNKNOWN, 0, standard, cf, sf, rf,\n \t   (void*)0);\n }\n \n@@ -372,7 +380,7 @@ add_sym_1 (const char *name, int elemental, int actual_ok, bt type,\n    1 arguments.  */\n \n static void\n-add_sym_1s (const char *name, int elemental, int actual_ok, bt type,\n+add_sym_1s (const char *name, int elemental, bt type,\n \t\t\tint kind, int standard,\n \t\t\ttry (*check)(gfc_expr *),\n \t\t\tgfc_expr *(*simplify)(gfc_expr *),\n@@ -387,7 +395,7 @@ add_sym_1s (const char *name, int elemental, int actual_ok, bt type,\n   sf.f1 = simplify;\n   rf.s1 = resolve;\n \n-  add_sym (name, elemental, actual_ok, type, kind, standard, cf, sf, rf,\n+  add_sym (name, elemental, 0, type, kind, standard, cf, sf, rf,\n \t   a1, type1, kind1, optional1,\n \t   (void*)0);\n }\n@@ -451,7 +459,7 @@ add_sym_2 (const char *name, int elemental, int actual_ok, bt type,\n    2 arguments.  */\n \n static void\n-add_sym_2s (const char *name, int elemental, int actual_ok, bt type,\n+add_sym_2s (const char *name, int elemental, bt type,\n \t\t\tint kind, int standard,\n \t\t       try (*check)(gfc_expr *,gfc_expr *),\n \t\t       gfc_expr *(*simplify)(gfc_expr *,gfc_expr *),\n@@ -467,7 +475,7 @@ add_sym_2s (const char *name, int elemental, int actual_ok, bt type,\n   sf.f2 = simplify;\n   rf.s1 = resolve;\n \n-  add_sym (name, elemental, actual_ok, type, kind, standard, cf, sf, rf,\n+  add_sym (name, elemental, 0, type, kind, standard, cf, sf, rf,\n \t   a1, type1, kind1, optional1,\n \t   a2, type2, kind2, optional2,\n \t   (void*)0);\n@@ -565,7 +573,7 @@ add_sym_3red (const char *name, int elemental,\n    3 arguments.  */\n \n static void\n-add_sym_3s (const char *name, int elemental, int actual_ok, bt type,\n+add_sym_3s (const char *name, int elemental, bt type,\n \t\t\tint kind, int standard,\n \t\t       try (*check)(gfc_expr *,gfc_expr *,gfc_expr *),\n \t\t       gfc_expr *(*simplify)(gfc_expr *,gfc_expr *,gfc_expr *),\n@@ -582,7 +590,7 @@ add_sym_3s (const char *name, int elemental, int actual_ok, bt type,\n   sf.f3 = simplify;\n   rf.s1 = resolve;\n \n-  add_sym (name, elemental, actual_ok, type, kind, standard, cf, sf, rf,\n+  add_sym (name, elemental, 0, type, kind, standard, cf, sf, rf,\n \t   a1, type1, kind1, optional1,\n \t   a2, type2, kind2, optional2,\n \t   a3, type3, kind3, optional3,\n@@ -625,7 +633,7 @@ add_sym_4 (const char *name, int elemental, int actual_ok, bt type,\n    4 arguments.  */\n \n static void\n-add_sym_4s (const char *name, int elemental, int actual_ok,\n+add_sym_4s (const char *name, int elemental,\n \t\t\tbt type, int kind, int standard,\n     try (*check)(gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *),\n     gfc_expr *(*simplify)(gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *),\n@@ -643,7 +651,7 @@ add_sym_4s (const char *name, int elemental, int actual_ok,\n   sf.f4 = simplify;\n   rf.s1 = resolve;\n \n-  add_sym (name, elemental, actual_ok, type, kind, standard, cf, sf, rf,\n+  add_sym (name, elemental, 0, type, kind, standard, cf, sf, rf,\n \t   a1, type1, kind1, optional1,\n \t   a2, type2, kind2, optional2,\n \t   a3, type3, kind3, optional3,\n@@ -656,7 +664,7 @@ add_sym_4s (const char *name, int elemental, int actual_ok,\n    5 arguments.  */\n \n static void\n-add_sym_5s (const char *name, int elemental, int actual_ok, \n+add_sym_5s (const char *name, int elemental,\n  bt type, int kind, int standard,\n  try (*check)(gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *),\n  gfc_expr *(*simplify)(gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *),\n@@ -675,7 +683,7 @@ add_sym_5s (const char *name, int elemental, int actual_ok,\n   sf.f5 = simplify;\n   rf.s1 = resolve;\n \n-  add_sym (name, elemental, actual_ok, type, kind, standard, cf, sf, rf,\n+  add_sym (name, elemental, 0, type, kind, standard, cf, sf, rf,\n \t   a1, type1, kind1, optional1,\n \t   a2, type2, kind2, optional2,\n \t   a3, type3, kind3, optional3,\n@@ -759,6 +767,24 @@ gfc_specific_intrinsic (const char *name)\n }\n \n \n+/* Given a string, figure out if it is the name of an intrinsic function\n+   or subroutine allowed as an actual argument or not.  */\n+int\n+gfc_intrinsic_actual_ok (const char *name, const bool subroutine_flag)\n+{\n+  gfc_intrinsic_sym *sym;\n+\n+  /* Intrinsic subroutines are not allowed as actual arguments.  */\n+  if (subroutine_flag)\n+    return 0;\n+  else\n+    {\n+      sym = gfc_find_function (name);\n+      return (sym == NULL) ? 0 : sym->actual_ok;\n+    }\n+}\n+\n+\n /* Given a string, figure out if it is the name of an intrinsic\n    subroutine or function.  There are no generic intrinsic\n    subroutines, they are all specific.  */\n@@ -916,13 +942,13 @@ add_functions (void)\n \n   make_generic (\"abs\", GFC_ISYM_ABS, GFC_STD_F77);\n \n-  add_sym_2 (\"access\", 0, 1, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_2 (\"access\", 0, 0, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_access_func, NULL, gfc_resolve_access,\n \t     nm, BT_CHARACTER, dc, REQUIRED, md, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"access\", GFC_ISYM_ACCESS, GFC_STD_GNU);\n \n-  add_sym_1 (\"achar\", 1, 1, BT_CHARACTER, dc, GFC_STD_F95,\n+  add_sym_1 (\"achar\", 1, 0, BT_CHARACTER, dc, GFC_STD_F95,\n \t     gfc_check_achar, gfc_simplify_achar, NULL,\n \t     i, BT_INTEGER, di, REQUIRED);\n \n@@ -948,13 +974,13 @@ add_functions (void)\n \n   make_generic (\"acosh\", GFC_ISYM_ACOSH, GFC_STD_GNU);\n \n-  add_sym_1 (\"adjustl\", 1, 1, BT_CHARACTER, dc, GFC_STD_F95,\n+  add_sym_1 (\"adjustl\", 1, 0, BT_CHARACTER, dc, GFC_STD_F95,\n \t     NULL, gfc_simplify_adjustl, NULL,\n \t     stg, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"adjustl\", GFC_ISYM_ADJUSTL, GFC_STD_F95);\n \n-  add_sym_1 (\"adjustr\", 1, 1, BT_CHARACTER, dc, GFC_STD_F95,\n+  add_sym_1 (\"adjustr\", 1, 0, BT_CHARACTER, dc, GFC_STD_F95,\n \t     NULL, gfc_simplify_adjustr, NULL,\n \t     stg, BT_CHARACTER, dc, REQUIRED);\n \n@@ -971,7 +997,6 @@ add_functions (void)\n \t     NULL, gfc_simplify_aimag, gfc_resolve_aimag, \n \t     z, BT_COMPLEX, dd, REQUIRED);\n \n-\n   make_generic (\"aimag\", GFC_ISYM_AIMAG, GFC_STD_F77);\n \n   add_sym_2 (\"aint\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n@@ -984,13 +1009,13 @@ add_functions (void)\n \n   make_generic (\"aint\", GFC_ISYM_AINT, GFC_STD_F77);\n \n-  add_sym_2 (\"all\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F95,\n+  add_sym_2 (\"all\", 0, 0, BT_UNKNOWN, 0, GFC_STD_F95,\n \t     gfc_check_all_any, NULL, gfc_resolve_all,\n \t     msk, BT_LOGICAL, dl, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL);\n \n   make_generic (\"all\", GFC_ISYM_ALL, GFC_STD_F95);\n \n-  add_sym_1 (\"allocated\", 0, 1, BT_LOGICAL, dl, GFC_STD_F95,\n+  add_sym_1 (\"allocated\", 0, 0, BT_LOGICAL, dl, GFC_STD_F95,\n \t     gfc_check_allocated, NULL, NULL,\n \t     ar, BT_UNKNOWN, 0, REQUIRED);\n \n@@ -1006,7 +1031,7 @@ add_functions (void)\n \n   make_generic (\"anint\", GFC_ISYM_ANINT, GFC_STD_F77);\n \n-  add_sym_2 (\"any\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F95,\n+  add_sym_2 (\"any\", 0, 0, BT_UNKNOWN, 0, GFC_STD_F95,\n \t     gfc_check_all_any, NULL, gfc_resolve_any,\n \t     msk, BT_LOGICAL, dl, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL);\n \n@@ -1032,7 +1057,7 @@ add_functions (void)\n \n   make_generic (\"asinh\", GFC_ISYM_ASINH, GFC_STD_GNU);\n \n-  add_sym_2 (\"associated\", 0, 1, BT_LOGICAL, dl, GFC_STD_F95,\n+  add_sym_2 (\"associated\", 0, 0, BT_LOGICAL, dl, GFC_STD_F95,\n \t     gfc_check_associated, NULL, NULL,\n \t     pt, BT_UNKNOWN, 0, REQUIRED, tg, BT_UNKNOWN, 0, OPTIONAL);\n \n@@ -1129,50 +1154,56 @@ add_functions (void)\n \n   make_generic (\"besyn\", GFC_ISYM_YN, GFC_STD_GNU);\n \n-  add_sym_1 (\"bit_size\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_1 (\"bit_size\", 0, 0, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_i, gfc_simplify_bit_size, NULL,\n \t     i, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"bit_size\", GFC_ISYM_NONE, GFC_STD_F95);\n \n-  add_sym_2 (\"btest\", 1, 1, BT_LOGICAL, dl, GFC_STD_F95,\n+  add_sym_2 (\"btest\", 1, 0, BT_LOGICAL, dl, GFC_STD_F95,\n \t     gfc_check_btest, gfc_simplify_btest, gfc_resolve_btest,\n \t     i, BT_INTEGER, di, REQUIRED, pos, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"btest\", GFC_ISYM_BTEST, GFC_STD_F95);\n \n-  add_sym_2 (\"ceiling\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_2 (\"ceiling\", 1, 0, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_a_ikind, gfc_simplify_ceiling, gfc_resolve_ceiling,\n \t     a, BT_REAL, dr, REQUIRED, kind, BT_INTEGER, di, OPTIONAL);\n \n   make_generic (\"ceiling\", GFC_ISYM_CEILING, GFC_STD_F95);\n \n-  add_sym_2 (\"char\", 1, 0, BT_CHARACTER, dc, GFC_STD_F77,\n+  add_sym_2 (\"char\", 1, 2, BT_CHARACTER, dc, GFC_STD_F77,\n \t     gfc_check_char, gfc_simplify_char, gfc_resolve_char,\n \t     i, BT_INTEGER, di, REQUIRED, kind, BT_INTEGER, di, OPTIONAL);\n \n   make_generic (\"char\", GFC_ISYM_CHAR, GFC_STD_F77);\n \n-  add_sym_1 (\"chdir\", 0, 1, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_1 (\"chdir\", 0, 0, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_chdir, NULL, gfc_resolve_chdir,\n \t     a, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"chdir\", GFC_ISYM_CHDIR, GFC_STD_GNU);\n \n-  add_sym_2 (\"chmod\", 0, 1, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_2 (\"chmod\", 0, 0, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_chmod, NULL, gfc_resolve_chmod,\n \t     nm, BT_CHARACTER, dc, REQUIRED, md, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"chmod\", GFC_ISYM_CHMOD, GFC_STD_GNU);\n \n-  add_sym_3 (\"cmplx\", 1, 1, BT_COMPLEX, dz, GFC_STD_F77,\n+  add_sym_3 (\"cmplx\", 1, 0, BT_COMPLEX, dz, GFC_STD_F77,\n \t     gfc_check_cmplx, gfc_simplify_cmplx, gfc_resolve_cmplx,\n \t     x, BT_UNKNOWN, dr, REQUIRED, y, BT_UNKNOWN, dr, OPTIONAL,\n \t     kind, BT_INTEGER, di, OPTIONAL);\n \n   make_generic (\"cmplx\", GFC_ISYM_CMPLX, GFC_STD_F77);\n \n-  add_sym_2 (\"complex\", 1, 1, BT_COMPLEX, dz, GFC_STD_GNU,\n+  add_sym_0 (\"command_argument_count\", 1, 0, BT_INTEGER, di, GFC_STD_F2003,\n+\t     NULL, NULL, NULL);\n+\n+  make_generic (\"command_argument_count\", GFC_ISYM_COMMAND_ARGUMENT_COUNT,\n+\t        GFC_STD_F2003);\n+\n+  add_sym_2 (\"complex\", 1, 0, BT_COMPLEX, dz, GFC_STD_GNU,\n \t     gfc_check_complex, gfc_simplify_complex, gfc_resolve_complex,\n \t     x, BT_UNKNOWN, dr, REQUIRED, y, BT_UNKNOWN, dr, REQUIRED);\n \n@@ -1181,7 +1212,7 @@ add_functions (void)\n   /* Making dcmplx a specific of cmplx causes cmplx to return a double\n      complex instead of the default complex.  */\n \n-  add_sym_2 (\"dcmplx\", 1, 1, BT_COMPLEX, dd, GFC_STD_GNU,\n+  add_sym_2 (\"dcmplx\", 1, 0, BT_COMPLEX, dd, GFC_STD_GNU,\n \t     gfc_check_dcmplx, gfc_simplify_dcmplx, gfc_resolve_dcmplx,\n \t     x, BT_REAL, dd, REQUIRED, y, BT_REAL, dd, OPTIONAL);\n \n@@ -1227,42 +1258,42 @@ add_functions (void)\n \n   make_generic (\"cosh\", GFC_ISYM_COSH, GFC_STD_F77);\n \n-  add_sym_2 (\"count\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_2 (\"count\", 0, 0, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_count, NULL, gfc_resolve_count,\n \t     msk, BT_LOGICAL, dl, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL);\n \n   make_generic (\"count\", GFC_ISYM_COUNT, GFC_STD_F95);\n \n-  add_sym_3 (\"cshift\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_3 (\"cshift\", 0, 0, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_cshift, NULL, gfc_resolve_cshift,\n \t     ar, BT_REAL, dr, REQUIRED, sh, BT_INTEGER, di, REQUIRED,\n \t     dm, BT_INTEGER, ii, OPTIONAL);\n \n   make_generic (\"cshift\", GFC_ISYM_CSHIFT, GFC_STD_F95);\n \n-  add_sym_1 (\"ctime\", 0, 1, BT_CHARACTER, 0, GFC_STD_GNU,\n+  add_sym_1 (\"ctime\", 0, 0, BT_CHARACTER, 0, GFC_STD_GNU,\n               gfc_check_ctime, NULL, gfc_resolve_ctime,\n \t      tm, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"ctime\", GFC_ISYM_CTIME, GFC_STD_GNU);\n \n-  add_sym_1 (\"dble\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n+  add_sym_1 (\"dble\", 1, 0, BT_REAL, dd, GFC_STD_F77,\n \t     gfc_check_dble, gfc_simplify_dble, gfc_resolve_dble,\n \t     a, BT_REAL, dr, REQUIRED);\n \n   make_alias (\"dfloat\", GFC_STD_GNU);\n \n   make_generic (\"dble\", GFC_ISYM_DBLE, GFC_STD_F77);\n \n-  add_sym_1 (\"digits\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_1 (\"digits\", 0, 0, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_digits, gfc_simplify_digits, NULL,\n \t     x, BT_UNKNOWN, dr, REQUIRED);\n \n   make_generic (\"digits\", GFC_ISYM_NONE, GFC_STD_F95);\n \n   add_sym_2 (\"dim\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_a_p, gfc_simplify_dim, gfc_resolve_dim,\n-\t     x, BT_UNKNOWN, dr, REQUIRED, y, BT_UNKNOWN, dr, REQUIRED);\n+\t     x, BT_REAL, dr, REQUIRED, y, BT_UNKNOWN, dr, REQUIRED);\n \n   add_sym_2 (\"idim\", 1, 1, BT_INTEGER, di, GFC_STD_F77,\n \t     NULL, gfc_simplify_dim, gfc_resolve_dim,\n@@ -1274,7 +1305,7 @@ add_functions (void)\n \n   make_generic (\"dim\", GFC_ISYM_DIM, GFC_STD_F77);\n \n-  add_sym_2 (\"dot_product\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F95,\n+  add_sym_2 (\"dot_product\", 0, 0, BT_UNKNOWN, 0, GFC_STD_F95,\n \t     gfc_check_dot_product, NULL, gfc_resolve_dot_product,\n \t     va, BT_REAL, dr, REQUIRED, vb, BT_REAL, dr, REQUIRED);\n \n@@ -1292,14 +1323,14 @@ add_functions (void)\n \n   make_generic (\"dreal\", GFC_ISYM_REAL, GFC_STD_GNU);\n \n-  add_sym_4 (\"eoshift\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_4 (\"eoshift\", 0, 0, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_eoshift, NULL, gfc_resolve_eoshift,\n \t     ar, BT_REAL, dr, 0, sh, BT_INTEGER, ii, REQUIRED,\n \t     bd, BT_REAL, dr, 1, dm, BT_INTEGER, ii, OPTIONAL);\n \n   make_generic (\"eoshift\", GFC_ISYM_EOSHIFT, GFC_STD_F95);\n \n-  add_sym_1 (\"epsilon\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_1 (\"epsilon\", 0, 0, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_x, gfc_simplify_epsilon, NULL,\n \t     x, BT_REAL, dr, REQUIRED);\n \n@@ -1327,7 +1358,7 @@ add_functions (void)\n   make_generic (\"erfc\", GFC_ISYM_ERFC, GFC_STD_GNU);\n \n   /* G77 compatibility */\n-  add_sym_1 (\"etime\", 0, 1, BT_REAL, 4,  GFC_STD_GNU,\n+  add_sym_1 (\"etime\", 0, 0, BT_REAL, 4,  GFC_STD_GNU,\n \t     gfc_check_etime, NULL, NULL,\n \t     x, BT_REAL, 4, REQUIRED);\n \n@@ -1355,7 +1386,7 @@ add_functions (void)\n \n   make_generic (\"exp\", GFC_ISYM_EXP, GFC_STD_F77);\n \n-  add_sym_1 (\"exponent\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_1 (\"exponent\", 1, 0, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_x, gfc_simplify_exponent, gfc_resolve_exponent,\n \t     x, BT_REAL, dr, REQUIRED);\n \n@@ -1366,63 +1397,63 @@ add_functions (void)\n \n   make_generic (\"fdate\", GFC_ISYM_FDATE, GFC_STD_GNU);\n \n-  add_sym_2 (\"floor\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_2 (\"floor\", 1, 0, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_a_ikind, gfc_simplify_floor, gfc_resolve_floor,\n \t     a, BT_REAL, dr, REQUIRED, kind, BT_INTEGER, di, OPTIONAL);\n \n   make_generic (\"floor\", GFC_ISYM_FLOOR, GFC_STD_F95);\n \n   /* G77 compatible fnum */\n-  add_sym_1 (\"fnum\", 0, 1, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_1 (\"fnum\", 0, 0, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_fnum, NULL, gfc_resolve_fnum,\n \t     ut, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"fnum\", GFC_ISYM_FNUM, GFC_STD_GNU);\n \n-  add_sym_1 (\"fraction\", 1, 1, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_1 (\"fraction\", 1, 0, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_x, gfc_simplify_fraction, gfc_resolve_fraction,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"fraction\", GFC_ISYM_FRACTION, GFC_STD_F95);\n \n-  add_sym_2 (\"fstat\", 0, 1, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_2 (\"fstat\", 0, 0, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_fstat, NULL, gfc_resolve_fstat,\n \t     a, BT_INTEGER, di, REQUIRED, b, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"fstat\", GFC_ISYM_FSTAT, GFC_STD_GNU);\n \n-  add_sym_1 (\"ftell\", 0, 1, BT_INTEGER, ii, GFC_STD_GNU,\n+  add_sym_1 (\"ftell\", 0, 0, BT_INTEGER, ii, GFC_STD_GNU,\n \t     gfc_check_ftell, NULL, gfc_resolve_ftell,\n \t     ut, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"ftell\", GFC_ISYM_FTELL, GFC_STD_GNU);\n \n-  add_sym_2 (\"fgetc\", 0, 1, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_2 (\"fgetc\", 0, 0, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_fgetputc, NULL, gfc_resolve_fgetc,\n \t     ut, BT_INTEGER, di, REQUIRED, c, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"fgetc\", GFC_ISYM_FGETC, GFC_STD_GNU);\n \n-  add_sym_1 (\"fget\", 0, 1, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_1 (\"fget\", 0, 0, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_fgetput, NULL, gfc_resolve_fget,\n \t     c, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"fget\", GFC_ISYM_FGET, GFC_STD_GNU);\n \n-  add_sym_2 (\"fputc\", 0, 1, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_2 (\"fputc\", 0, 0, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_fgetputc, NULL, gfc_resolve_fputc,\n \t     ut, BT_INTEGER, di, REQUIRED, c, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"fputc\", GFC_ISYM_FPUTC, GFC_STD_GNU);\n \n-  add_sym_1 (\"fput\", 0, 1, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_1 (\"fput\", 0, 0, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_fgetput, NULL, gfc_resolve_fput,\n \t     c, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"fput\", GFC_ISYM_FPUT, GFC_STD_GNU);\n \n   /* Unix IDs (g77 compatibility)  */\n-  add_sym_1 (\"getcwd\", 0, 1, BT_INTEGER, di,  GFC_STD_GNU,\n+  add_sym_1 (\"getcwd\", 0, 0, BT_INTEGER, di,  GFC_STD_GNU,\n \t     NULL, NULL, gfc_resolve_getcwd,\n \t     c, BT_CHARACTER, dc, REQUIRED);\n \n@@ -1443,25 +1474,25 @@ add_functions (void)\n \n   make_generic (\"getuid\", GFC_ISYM_GETUID, GFC_STD_GNU);\n \n-  add_sym_1 (\"hostnm\", 0, 1, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_1 (\"hostnm\", 0, 0, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_hostnm, NULL, gfc_resolve_hostnm,\n \t     a, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"hostnm\", GFC_ISYM_HOSTNM, GFC_STD_GNU);\n \n-  add_sym_1 (\"huge\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_1 (\"huge\", 0, 0, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_huge, gfc_simplify_huge, NULL,\n \t     x, BT_UNKNOWN, dr, REQUIRED);\n \n   make_generic (\"huge\", GFC_ISYM_NONE, GFC_STD_F95);\n \n-  add_sym_1 (\"iachar\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_1 (\"iachar\", 1, 0, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ichar_iachar, gfc_simplify_iachar, NULL,\n \t     c, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"iachar\", GFC_ISYM_IACHAR, GFC_STD_F95);\n \n-  add_sym_2 (\"iand\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_2 (\"iand\", 1, 0, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_iand, gfc_simplify_iand, gfc_resolve_iand,\n \t     i, BT_INTEGER, di, REQUIRED, j, BT_INTEGER, di, REQUIRED);\n \n@@ -1473,31 +1504,25 @@ add_functions (void)\n \n   make_generic (\"and\", GFC_ISYM_AND, GFC_STD_GNU);\n \n-  add_sym_0 (\"iargc\", 1, 1, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_0 (\"iargc\", 1, 0, BT_INTEGER, di, GFC_STD_GNU,\n \t     NULL, NULL, NULL);\n \n   make_generic (\"iargc\", GFC_ISYM_IARGC, GFC_STD_GNU);\n \n-  add_sym_0 (\"command_argument_count\", 1, 1, BT_INTEGER, di, GFC_STD_F2003,\n-\t     NULL, NULL, NULL);\n-\n-  make_generic (\"command_argument_count\", GFC_ISYM_COMMAND_ARGUMENT_COUNT,\n-\t        GFC_STD_F2003);\n-\n-  add_sym_2 (\"ibclr\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_2 (\"ibclr\", 1, 0, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ibclr, gfc_simplify_ibclr, gfc_resolve_ibclr,\n \t     i, BT_INTEGER, di, REQUIRED, pos, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"ibclr\", GFC_ISYM_IBCLR, GFC_STD_F95);\n \n-  add_sym_3 (\"ibits\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_3 (\"ibits\", 1, 0, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ibits, gfc_simplify_ibits, gfc_resolve_ibits,\n \t     i, BT_INTEGER, di, REQUIRED, pos, BT_INTEGER, di, REQUIRED,\n \t     ln, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"ibits\", GFC_ISYM_IBITS, GFC_STD_F95);\n \n-  add_sym_2 (\"ibset\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_2 (\"ibset\", 1, 0, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ibset, gfc_simplify_ibset, gfc_resolve_ibset,\n \t     i, BT_INTEGER, di, REQUIRED, pos, BT_INTEGER, di, REQUIRED);\n \n@@ -1509,7 +1534,7 @@ add_functions (void)\n \n   make_generic (\"ichar\", GFC_ISYM_ICHAR, GFC_STD_F77);\n \n-  add_sym_2 (\"ieor\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_2 (\"ieor\", 1, 0, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ieor, gfc_simplify_ieor, gfc_resolve_ieor,\n \t     i, BT_INTEGER, di, REQUIRED, j, BT_INTEGER, di, REQUIRED);\n \n@@ -1527,13 +1552,13 @@ add_functions (void)\n   make_generic (\"ierrno\", GFC_ISYM_IERRNO, GFC_STD_GNU);\n \n   add_sym_3 (\"index\", 1, 1, BT_INTEGER, di, GFC_STD_F77,\n-\t     gfc_check_index, gfc_simplify_index, NULL,\n+\t     gfc_check_index, gfc_simplify_index, gfc_resolve_index_func,\n \t     stg, BT_CHARACTER, dc, REQUIRED, ssg, BT_CHARACTER, dc, REQUIRED,\n \t     bck, BT_LOGICAL, dl, OPTIONAL);\n \n   make_generic (\"index\", GFC_ISYM_INDEX, GFC_STD_F77);\n \n-  add_sym_2 (\"int\", 1, 1, BT_INTEGER, di, GFC_STD_F77,\n+  add_sym_2 (\"int\", 1, 0, BT_INTEGER, di, GFC_STD_F77,\n \t     gfc_check_int, gfc_simplify_int, gfc_resolve_int,\n \t     a, BT_REAL, dr, REQUIRED, kind, BT_INTEGER, di, OPTIONAL);\n \n@@ -1567,7 +1592,7 @@ add_functions (void)\n \n   make_generic (\"long\", GFC_ISYM_LONG, GFC_STD_GNU);\n \n-  add_sym_2 (\"ior\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_2 (\"ior\", 1, 0, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ior, gfc_simplify_ior, gfc_resolve_ior,\n \t     i, BT_INTEGER, di, REQUIRED, j, BT_INTEGER, di, REQUIRED);\n \n@@ -1580,7 +1605,7 @@ add_functions (void)\n   make_generic (\"or\", GFC_ISYM_OR, GFC_STD_GNU);\n \n   /* The following function is for G77 compatibility.  */\n-  add_sym_1 (\"irand\", 0, 1, BT_INTEGER, 4, GFC_STD_GNU,\n+  add_sym_1 (\"irand\", 0, 0, BT_INTEGER, 4, GFC_STD_GNU,\n              gfc_check_irand, NULL, NULL,\n \t     i, BT_INTEGER, 4, OPTIONAL);\n \n@@ -1592,44 +1617,44 @@ add_functions (void)\n \n   make_generic (\"isatty\", GFC_ISYM_ISATTY, GFC_STD_GNU);\n \n-  add_sym_2 (\"rshift\", 1, 1, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_2 (\"rshift\", 1, 0, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_ishft, NULL, gfc_resolve_rshift,\n \t     i, BT_INTEGER, di, REQUIRED, sh, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"rshift\", GFC_ISYM_RSHIFT, GFC_STD_GNU);\n \n-  add_sym_2 (\"lshift\", 1, 1, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_2 (\"lshift\", 1, 0, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_ishft, NULL, gfc_resolve_lshift,\n \t     i, BT_INTEGER, di, REQUIRED, sh, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"lshift\", GFC_ISYM_LSHIFT, GFC_STD_GNU);\n \n-  add_sym_2 (\"ishft\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_2 (\"ishft\", 1, 0, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ishft, gfc_simplify_ishft, gfc_resolve_ishft,\n \t     i, BT_INTEGER, di, REQUIRED, sh, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"ishft\", GFC_ISYM_ISHFT, GFC_STD_F95);\n \n-  add_sym_3 (\"ishftc\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_3 (\"ishftc\", 1, 0, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ishftc, gfc_simplify_ishftc, gfc_resolve_ishftc,\n \t     i, BT_INTEGER, di, REQUIRED, sh, BT_INTEGER, di, REQUIRED,\n \t     sz, BT_INTEGER, di, OPTIONAL);\n \n   make_generic (\"ishftc\", GFC_ISYM_ISHFTC, GFC_STD_F95);\n \n-  add_sym_2 (\"kill\", 1, 1, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_2 (\"kill\", 1, 0, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_kill, NULL, gfc_resolve_kill,\n \t     a, BT_INTEGER, di, REQUIRED, b, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"kill\", GFC_ISYM_KILL, GFC_STD_GNU);\n \n-  add_sym_1 (\"kind\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_1 (\"kind\", 0, 0, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_kind, gfc_simplify_kind, NULL,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"kind\", GFC_ISYM_NONE, GFC_STD_F95);\n \n-  add_sym_2 (\"lbound\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_2 (\"lbound\", 0, 0, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_lbound, gfc_simplify_lbound, gfc_resolve_lbound,\n \t     ar, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, di, OPTIONAL);\n \n@@ -1641,7 +1666,7 @@ add_functions (void)\n \n   make_generic (\"len\", GFC_ISYM_LEN, GFC_STD_F77);\n \n-  add_sym_1 (\"len_trim\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_1 (\"len_trim\", 1, 0, BT_INTEGER, di, GFC_STD_F95,\n \t     NULL, gfc_simplify_len_trim, gfc_resolve_len_trim,\n \t     stg, BT_CHARACTER, dc, REQUIRED);\n \n@@ -1673,13 +1698,13 @@ add_functions (void)\n \n   make_generic (\"llt\", GFC_ISYM_LLT, GFC_STD_F77);\n \n-  add_sym_2 (\"link\", 0, 1, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_2 (\"link\", 0, 0, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_link, NULL, gfc_resolve_link,\n \t     a, BT_CHARACTER, dc, REQUIRED, b, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"link\", GFC_ISYM_LINK, GFC_STD_GNU);\n   \n-  add_sym_1 (\"log\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n+  add_sym_1 (\"log\", 1, 0, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_fn_rc, gfc_simplify_log, gfc_resolve_log,\n \t     x, BT_REAL, dr, REQUIRED);\n \n@@ -1703,7 +1728,7 @@ add_functions (void)\n \n   make_generic (\"log\", GFC_ISYM_LOG, GFC_STD_F77);\n \n-  add_sym_1 (\"log10\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n+  add_sym_1 (\"log10\", 1, 0, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_fn_r, gfc_simplify_log10, gfc_resolve_log10,\n \t     x, BT_REAL, dr, REQUIRED);\n \n@@ -1717,24 +1742,24 @@ add_functions (void)\n \n   make_generic (\"log10\", GFC_ISYM_LOG10, GFC_STD_F77);\n \n-  add_sym_2 (\"logical\", 1, 1, BT_LOGICAL, dl, GFC_STD_F95,\n+  add_sym_2 (\"logical\", 1, 0, BT_LOGICAL, dl, GFC_STD_F95,\n \t     gfc_check_logical, gfc_simplify_logical, gfc_resolve_logical,\n \t     l, BT_LOGICAL, dl, REQUIRED, kind, BT_INTEGER, di, OPTIONAL);\n \n   make_generic (\"logical\", GFC_ISYM_LOGICAL, GFC_STD_F95);\n \n-  add_sym_2 (\"lstat\", 0, 1, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_2 (\"lstat\", 0, 0, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_stat, NULL, gfc_resolve_lstat,\n \t     a, BT_CHARACTER, dc, REQUIRED, b, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"lstat\", GFC_ISYM_LSTAT, GFC_STD_GNU);\n \n-  add_sym_1 (\"malloc\", 0, 1, BT_INTEGER, ii, GFC_STD_GNU, gfc_check_malloc,\n+  add_sym_1 (\"malloc\", 0, 0, BT_INTEGER, ii, GFC_STD_GNU, gfc_check_malloc,\n \t     NULL, gfc_resolve_malloc, a, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"malloc\", GFC_ISYM_MALLOC, GFC_STD_GNU);\n \n-  add_sym_2 (\"matmul\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_2 (\"matmul\", 0, 0, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_matmul, NULL, gfc_resolve_matmul,\n \t     ma, BT_REAL, dr, REQUIRED, mb, BT_REAL, dr, REQUIRED);\n \n@@ -1769,20 +1794,20 @@ add_functions (void)\n \n   make_generic (\"max\", GFC_ISYM_MAX, GFC_STD_F77);\n \n-  add_sym_1 (\"maxexponent\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_1 (\"maxexponent\", 0, 0, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_x, gfc_simplify_maxexponent, NULL,\n \t     x, BT_UNKNOWN, dr, REQUIRED);\n \n   make_generic (\"maxexponent\", GFC_ISYM_NONE, GFC_STD_F95);\n \n-  add_sym_3ml (\"maxloc\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_3ml (\"maxloc\", 0, 0, BT_INTEGER, di, GFC_STD_F95,\n \t       gfc_check_minloc_maxloc, NULL, gfc_resolve_maxloc,\n \t       ar, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL,\n \t       msk, BT_LOGICAL, dl, OPTIONAL);\n \n   make_generic (\"maxloc\", GFC_ISYM_MAXLOC, GFC_STD_F95);\n \n-  add_sym_3red (\"maxval\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_3red (\"maxval\", 0, 0, BT_REAL, dr, GFC_STD_F95,\n                 gfc_check_minval_maxval, NULL, gfc_resolve_maxval,\n \t\tar, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL,\n \t\tmsk, BT_LOGICAL, dl, OPTIONAL);\n@@ -1799,7 +1824,7 @@ add_functions (void)\n \n   make_generic (\"mclock8\", GFC_ISYM_MCLOCK8, GFC_STD_GNU);\n \n-  add_sym_3 (\"merge\", 1, 1, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_3 (\"merge\", 1, 0, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_merge, NULL, gfc_resolve_merge,\n \t     ts, BT_REAL, dr, REQUIRED, fs, BT_REAL, dr, REQUIRED,\n \t     msk, BT_LOGICAL, dl, REQUIRED);\n@@ -1835,20 +1860,20 @@ add_functions (void)\n \n   make_generic (\"min\", GFC_ISYM_MIN, GFC_STD_F77);\n \n-  add_sym_1 (\"minexponent\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_1 (\"minexponent\", 0, 0, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_x, gfc_simplify_minexponent, NULL,\n \t     x, BT_UNKNOWN, dr, REQUIRED);\n \n   make_generic (\"minexponent\", GFC_ISYM_NONE, GFC_STD_F95);\n \n-  add_sym_3ml (\"minloc\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_3ml (\"minloc\", 0, 0, BT_INTEGER, di, GFC_STD_F95,\n \t       gfc_check_minloc_maxloc, NULL, gfc_resolve_minloc,\n \t       ar, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL,\n \t       msk, BT_LOGICAL, dl, OPTIONAL);\n \n   make_generic (\"minloc\", GFC_ISYM_MINLOC, GFC_STD_F95);\n \n-  add_sym_3red (\"minval\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_3red (\"minval\", 0, 0, BT_REAL, dr, GFC_STD_F95,\n                 gfc_check_minval_maxval, NULL, gfc_resolve_minval,\n \t\tar, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL,\n \t\tmsk, BT_LOGICAL, dl, OPTIONAL);\n@@ -1875,7 +1900,7 @@ add_functions (void)\n \n   make_generic (\"modulo\", GFC_ISYM_MODULO, GFC_STD_F95);\n \n-  add_sym_2 (\"nearest\", 1, 1, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_2 (\"nearest\", 1, 0, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_nearest, gfc_simplify_nearest, gfc_resolve_nearest,\n \t     x, BT_REAL, dr, REQUIRED, s, BT_REAL, dr, REQUIRED);\n \n@@ -1891,52 +1916,52 @@ add_functions (void)\n \n   make_generic (\"nint\", GFC_ISYM_NINT, GFC_STD_F77);\n \n-  add_sym_1 (\"not\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_1 (\"not\", 1, 0, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_i, gfc_simplify_not, gfc_resolve_not,\n \t     i, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"not\", GFC_ISYM_NOT, GFC_STD_F95);\n \n-  add_sym_1 (\"null\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_1 (\"null\", 0, 0, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_null, gfc_simplify_null, NULL,\n \t     mo, BT_INTEGER, di, OPTIONAL);\n \n   make_generic (\"null\", GFC_ISYM_NONE, GFC_STD_F95);\n \n-  add_sym_3 (\"pack\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_3 (\"pack\", 0, 0, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_pack, NULL, gfc_resolve_pack,\n \t     ar, BT_REAL, dr, REQUIRED, msk, BT_LOGICAL, dl, REQUIRED,\n \t     v, BT_REAL, dr, OPTIONAL);\n \n   make_generic (\"pack\", GFC_ISYM_PACK, GFC_STD_F95);\n \n-  add_sym_1 (\"precision\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_1 (\"precision\", 0, 0, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_precision, gfc_simplify_precision, NULL,\n \t     x, BT_UNKNOWN, 0, REQUIRED);\n \n   make_generic (\"precision\", GFC_ISYM_NONE, GFC_STD_F95);\n \n-  add_sym_1 (\"present\", 0, 1, BT_LOGICAL, dl, GFC_STD_F95,\n+  add_sym_1 (\"present\", 0, 0, BT_LOGICAL, dl, GFC_STD_F95,\n \t     gfc_check_present, NULL, NULL,\n \t     a, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"present\", GFC_ISYM_PRESENT, GFC_STD_F95);\n \n-  add_sym_3red (\"product\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_3red (\"product\", 0, 0, BT_REAL, dr, GFC_STD_F95,\n                 gfc_check_product_sum, NULL, gfc_resolve_product,\n \t\tar, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL,\n \t\tmsk, BT_LOGICAL, dl, OPTIONAL);\n \n   make_generic (\"product\", GFC_ISYM_PRODUCT, GFC_STD_F95);\n \n-  add_sym_1 (\"radix\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_1 (\"radix\", 0, 0, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_radix, gfc_simplify_radix, NULL,\n \t     x, BT_UNKNOWN, 0, REQUIRED);\n \n   make_generic (\"radix\", GFC_ISYM_NONE, GFC_STD_F95);\n \n   /* The following function is for G77 compatibility.  */\n-  add_sym_1 (\"rand\", 0, 1, BT_REAL, 4, GFC_STD_GNU,\n+  add_sym_1 (\"rand\", 0, 0, BT_REAL, 4, GFC_STD_GNU,\n              gfc_check_rand, NULL, NULL,\n              i, BT_INTEGER, 4, OPTIONAL);\n \n@@ -1946,7 +1971,7 @@ add_functions (void)\n \n   make_generic (\"rand\", GFC_ISYM_RAND, GFC_STD_GNU);\n \n-  add_sym_1 (\"range\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_1 (\"range\", 0, 0, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_range, gfc_simplify_range, NULL,\n \t     x, BT_REAL, dr, REQUIRED);\n \n@@ -1971,78 +1996,78 @@ add_functions (void)\n \n   make_generic (\"real\", GFC_ISYM_REAL, GFC_STD_F77);\n \n-  add_sym_2 (\"rename\", 0, 1, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_2 (\"rename\", 0, 0, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_rename, NULL, gfc_resolve_rename,\n \t     a, BT_CHARACTER, dc, REQUIRED, b, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"rename\", GFC_ISYM_RENAME, GFC_STD_GNU);\n   \n-  add_sym_2 (\"repeat\", 0, 1, BT_CHARACTER, dc, GFC_STD_F95,\n+  add_sym_2 (\"repeat\", 0, 0, BT_CHARACTER, dc, GFC_STD_F95,\n \t     gfc_check_repeat, gfc_simplify_repeat, gfc_resolve_repeat,\n \t     stg, BT_CHARACTER, dc, REQUIRED, n, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"repeat\", GFC_ISYM_REPEAT, GFC_STD_F95);\n \n-  add_sym_4 (\"reshape\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_4 (\"reshape\", 0, 0, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_reshape, gfc_simplify_reshape, gfc_resolve_reshape,\n \t     src, BT_REAL, dr, REQUIRED, shp, BT_INTEGER, ii, REQUIRED,\n \t     pad, BT_REAL, dr, OPTIONAL, ord, BT_INTEGER, ii, OPTIONAL);\n \n   make_generic (\"reshape\", GFC_ISYM_RESHAPE, GFC_STD_F95);\n \n-  add_sym_1 (\"rrspacing\", 1, 1, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_1 (\"rrspacing\", 1, 0, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_x, gfc_simplify_rrspacing, gfc_resolve_rrspacing,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"rrspacing\", GFC_ISYM_RRSPACING, GFC_STD_F95);\n \n-  add_sym_2 (\"scale\", 1, 1, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_2 (\"scale\", 1, 0, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_scale, gfc_simplify_scale, gfc_resolve_scale,\n \t     x, BT_REAL, dr, REQUIRED, i, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"scale\", GFC_ISYM_SCALE, GFC_STD_F95);\n \n-  add_sym_3 (\"scan\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_3 (\"scan\", 1, 0, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_scan, gfc_simplify_scan, gfc_resolve_scan,\n \t     stg, BT_CHARACTER, dc, REQUIRED, set, BT_CHARACTER, dc, REQUIRED,\n \t     bck, BT_LOGICAL, dl, OPTIONAL);\n \n   make_generic (\"scan\", GFC_ISYM_SCAN, GFC_STD_F95);\n \n   /* Added for G77 compatibility garbage.  */\n-  add_sym_0 (\"second\", 0, 1, BT_REAL, 4, GFC_STD_GNU,\n+  add_sym_0 (\"second\", 0, 0, BT_REAL, 4, GFC_STD_GNU,\n \t     NULL, NULL, NULL);\n \n   make_generic (\"second\", GFC_ISYM_SECOND, GFC_STD_GNU);\n \n   /* Added for G77 compatibility.  */\n-  add_sym_1 (\"secnds\", 0, 1, BT_REAL, dr, GFC_STD_GNU,\n+  add_sym_1 (\"secnds\", 0, 0, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_secnds, NULL, gfc_resolve_secnds,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"secnds\", GFC_ISYM_SECNDS, GFC_STD_GNU);\n \n-  add_sym_1 (\"selected_int_kind\", 0, 1, BT_INTEGER, di,  GFC_STD_F95,\n+  add_sym_1 (\"selected_int_kind\", 0, 0, BT_INTEGER, di,  GFC_STD_F95,\n \t     gfc_check_selected_int_kind, gfc_simplify_selected_int_kind, NULL,\n \t     r, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"selected_int_kind\", GFC_ISYM_SI_KIND, GFC_STD_F95);\n \n-  add_sym_2 (\"selected_real_kind\", 0, 1, BT_INTEGER, di,  GFC_STD_F95,\n+  add_sym_2 (\"selected_real_kind\", 0, 0, BT_INTEGER, di,  GFC_STD_F95,\n \t     gfc_check_selected_real_kind, gfc_simplify_selected_real_kind,\n \t     NULL,\n \t     p, BT_INTEGER, di, OPTIONAL, r, BT_INTEGER, di, OPTIONAL);\n \n   make_generic (\"selected_real_kind\", GFC_ISYM_SR_KIND, GFC_STD_F95);\n \n-  add_sym_2 (\"set_exponent\", 1, 1, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_2 (\"set_exponent\", 1, 0, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_set_exponent, gfc_simplify_set_exponent,\n \t     gfc_resolve_set_exponent,\n \t     x, BT_REAL, dr, REQUIRED, i, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"set_exponent\", GFC_ISYM_SET_EXPONENT, GFC_STD_F95);\n \n-  add_sym_1 (\"shape\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_1 (\"shape\", 0, 0, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_shape, gfc_simplify_shape, gfc_resolve_shape,\n \t     src, BT_REAL, dr, REQUIRED);\n \n@@ -2062,7 +2087,7 @@ add_functions (void)\n \n   make_generic (\"sign\", GFC_ISYM_SIGN, GFC_STD_F77);\n \n-  add_sym_2 (\"signal\", 1, 1, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_2 (\"signal\", 1, 0, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_signal, NULL, gfc_resolve_signal,\n \t     num, BT_INTEGER, di, REQUIRED, han, BT_UNKNOWN, 0, REQUIRED);\n \n@@ -2098,19 +2123,19 @@ add_functions (void)\n \n   make_generic (\"sinh\", GFC_ISYM_SINH, GFC_STD_F77);\n \n-  add_sym_2 (\"size\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_2 (\"size\", 0, 0, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_size, gfc_simplify_size, NULL,\n \t     ar, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL);\n \n   make_generic (\"size\", GFC_ISYM_SIZE, GFC_STD_F95);\n \n-  add_sym_1 (\"spacing\", 1, 1, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_1 (\"spacing\", 1, 0, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_x, gfc_simplify_spacing, gfc_resolve_spacing,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"spacing\", GFC_ISYM_SPACING, GFC_STD_F95);\n \n-  add_sym_3 (\"spread\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_3 (\"spread\", 0, 0, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_spread, NULL, gfc_resolve_spread,\n \t     src, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, REQUIRED,\n \t     n, BT_INTEGER, di, REQUIRED);\n@@ -2137,26 +2162,26 @@ add_functions (void)\n \n   make_generic (\"sqrt\", GFC_ISYM_SQRT, GFC_STD_F77);\n \n-  add_sym_2 (\"stat\", 0, 1, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_2 (\"stat\", 0, 0, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_stat, NULL, gfc_resolve_stat,\n \t     a, BT_CHARACTER, dc, REQUIRED, b, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"stat\", GFC_ISYM_STAT, GFC_STD_GNU);\n \n-  add_sym_3red (\"sum\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F95,\n+  add_sym_3red (\"sum\", 0, 0, BT_UNKNOWN, 0, GFC_STD_F95,\n                 gfc_check_product_sum, NULL, gfc_resolve_sum,\n \t\tar, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL,\n \t\tmsk, BT_LOGICAL, dl, OPTIONAL);\n \n   make_generic (\"sum\", GFC_ISYM_SUM, GFC_STD_F95);\n \n-  add_sym_2 (\"symlnk\", 0, 1, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_2 (\"symlnk\", 0, 0, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_symlnk, NULL, gfc_resolve_symlnk,\n \t     a, BT_CHARACTER, dc, REQUIRED, b, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"symlnk\", GFC_ISYM_SYMLNK, GFC_STD_GNU);\n \n-  add_sym_1 (\"system\", 1, 1, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_1 (\"system\", 1, 0, BT_INTEGER, di, GFC_STD_GNU,\n \t     NULL, NULL, NULL,\n \t     c, BT_CHARACTER, dc, REQUIRED);\n \n@@ -2192,72 +2217,72 @@ add_functions (void)\n \n   make_generic (\"time8\", GFC_ISYM_TIME8, GFC_STD_GNU);\n \n-  add_sym_1 (\"tiny\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_1 (\"tiny\", 0, 0, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_x, gfc_simplify_tiny, NULL,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"tiny\", GFC_ISYM_NONE, GFC_STD_F95);\n \n-  add_sym_3 (\"transfer\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_3 (\"transfer\", 0, 0, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_transfer, gfc_simplify_transfer, gfc_resolve_transfer,\n \t     src, BT_REAL, dr, REQUIRED, mo, BT_REAL, dr, REQUIRED,\n \t     sz, BT_INTEGER, di, OPTIONAL);\n \n   make_generic (\"transfer\", GFC_ISYM_TRANSFER, GFC_STD_F95);\n \n-  add_sym_1 (\"transpose\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_1 (\"transpose\", 0, 0, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_transpose, NULL, gfc_resolve_transpose,\n \t     m, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"transpose\", GFC_ISYM_TRANSPOSE, GFC_STD_F95);\n \n-  add_sym_1 (\"trim\", 0, 1, BT_CHARACTER, dc, GFC_STD_F95,\n+  add_sym_1 (\"trim\", 0, 0, BT_CHARACTER, dc, GFC_STD_F95,\n \t     gfc_check_trim, gfc_simplify_trim, gfc_resolve_trim,\n \t     stg, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"trim\", GFC_ISYM_TRIM, GFC_STD_F95);\n \n-  add_sym_1 (\"ttynam\", 0, 1, BT_CHARACTER, 0, GFC_STD_GNU,\n+  add_sym_1 (\"ttynam\", 0, 0, BT_CHARACTER, 0, GFC_STD_GNU,\n               gfc_check_ttynam, NULL, gfc_resolve_ttynam,\n \t      ut, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"ttynam\", GFC_ISYM_TTYNAM, GFC_STD_GNU);\n \n-  add_sym_2 (\"ubound\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_2 (\"ubound\", 0, 0, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ubound, gfc_simplify_ubound, gfc_resolve_ubound,\n \t     ar, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL);\n \n   make_generic (\"ubound\", GFC_ISYM_UBOUND, GFC_STD_F95);\n \n   /* g77 compatibility for UMASK.  */\n-  add_sym_1 (\"umask\", 0, 1, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_1 (\"umask\", 0, 0, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_umask, NULL, gfc_resolve_umask,\n \t     a, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"umask\", GFC_ISYM_UMASK, GFC_STD_GNU);\n \n   /* g77 compatibility for UNLINK.  */\n-  add_sym_1 (\"unlink\", 0, 1, BT_INTEGER, di, GFC_STD_GNU,\n+  add_sym_1 (\"unlink\", 0, 0, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_unlink, NULL, gfc_resolve_unlink,\n \t     a, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"unlink\", GFC_ISYM_UNLINK, GFC_STD_GNU);\n \n-  add_sym_3 (\"unpack\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n+  add_sym_3 (\"unpack\", 0, 0, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_unpack, NULL, gfc_resolve_unpack,\n \t     v, BT_REAL, dr, REQUIRED, msk, BT_LOGICAL, dl, REQUIRED,\n \t     f, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"unpack\", GFC_ISYM_UNPACK, GFC_STD_F95);\n \n-  add_sym_3 (\"verify\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_3 (\"verify\", 1, 0, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_verify, gfc_simplify_verify, gfc_resolve_verify,\n \t     stg, BT_CHARACTER, dc, REQUIRED, set, BT_CHARACTER, dc, REQUIRED,\n \t     bck, BT_LOGICAL, dl, OPTIONAL);\n \n   make_generic (\"verify\", GFC_ISYM_VERIFY, GFC_STD_F95);\n     \n-  add_sym_1 (\"loc\", 0, 1, BT_INTEGER, ii, GFC_STD_GNU,\n+  add_sym_1 (\"loc\", 0, 0, BT_INTEGER, ii, GFC_STD_GNU,\n \t    gfc_check_loc, NULL, gfc_resolve_loc,\n \t    ar, BT_UNKNOWN, 0, REQUIRED);\n \t\t\n@@ -2290,237 +2315,237 @@ add_subroutines (void)\n   dl = gfc_default_logical_kind;\n   ii = gfc_index_integer_kind;\n \n-  add_sym_0s (\"abort\", 1, GFC_STD_GNU, NULL);\n+  add_sym_0s (\"abort\", GFC_STD_GNU, NULL);\n \n   if ((gfc_option.allow_std & GFC_STD_GNU) || gfc_option.flag_all_intrinsics)\n     make_noreturn();\n \n-  add_sym_1s (\"cpu_time\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F95,\n+  add_sym_1s (\"cpu_time\", 0, BT_UNKNOWN, 0, GFC_STD_F95,\n \t      gfc_check_cpu_time, NULL, gfc_resolve_cpu_time,\n \t      tm, BT_REAL, dr, REQUIRED);\n \n   /* More G77 compatibility garbage.  */\n-  add_sym_2s (\"ctime\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"ctime\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_ctime_sub, NULL, gfc_resolve_ctime_sub,\n \t      tm, BT_INTEGER, di, REQUIRED, res, BT_CHARACTER, dc, REQUIRED);\n \n-  add_sym_1s (\"idate\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_1s (\"idate\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_itime_idate, NULL, gfc_resolve_idate,\n \t      vl, BT_INTEGER, 4, REQUIRED);\n \n-  add_sym_1s (\"itime\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_1s (\"itime\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_itime_idate, NULL, gfc_resolve_itime,\n \t      vl, BT_INTEGER, 4, REQUIRED);\n \n-  add_sym_2s (\"ltime\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"ltime\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_ltime_gmtime, NULL, gfc_resolve_ltime,\n \t      tm, BT_INTEGER, di, REQUIRED, vl, BT_INTEGER, di, REQUIRED);\n \n-  add_sym_2s (\"gmtime\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"gmtime\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_ltime_gmtime, NULL, gfc_resolve_gmtime,\n \t      tm, BT_INTEGER, di, REQUIRED, vl, BT_INTEGER, di, REQUIRED);\n \n-  add_sym_1s (\"second\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_1s (\"second\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_second_sub, NULL, gfc_resolve_second_sub,\n \t      tm, BT_REAL, dr, REQUIRED);\n \n-  add_sym_2s (\"chdir\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"chdir\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n               gfc_check_chdir_sub, NULL, gfc_resolve_chdir_sub,\n \t      name, BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_3s (\"chmod\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_3s (\"chmod\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n               gfc_check_chmod_sub, NULL, gfc_resolve_chmod_sub,\n \t      name, BT_CHARACTER, dc, REQUIRED, md, BT_CHARACTER, dc, REQUIRED,\n \t      st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_4s (\"date_and_time\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F95,\n+  add_sym_4s (\"date_and_time\", 0, BT_UNKNOWN, 0, GFC_STD_F95,\n \t      gfc_check_date_and_time, NULL, NULL,\n \t      dt, BT_CHARACTER, dc, OPTIONAL, tm, BT_CHARACTER, dc, OPTIONAL,\n \t      zn, BT_CHARACTER, dc, OPTIONAL, vl, BT_INTEGER, di, OPTIONAL);\n \n   /* More G77 compatibility garbage.  */\n-  add_sym_2s (\"etime\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"etime\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t     gfc_check_etime_sub, NULL, gfc_resolve_etime_sub,\n \t      vl, BT_REAL, 4, REQUIRED, tm, BT_REAL, 4, REQUIRED);\n \n-  add_sym_2s (\"dtime\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"dtime\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t     gfc_check_etime_sub, NULL, gfc_resolve_etime_sub,\n \t      vl, BT_REAL, 4, REQUIRED, tm, BT_REAL, 4, REQUIRED);\n \n-  add_sym_1s (\"fdate\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_1s (\"fdate\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t     gfc_check_fdate_sub, NULL, gfc_resolve_fdate_sub,\n \t     dt, BT_CHARACTER, dc, REQUIRED);\n \n-  add_sym_1s (\"gerror\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_1s (\"gerror\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n               gfc_check_gerror, NULL, gfc_resolve_gerror, c, BT_CHARACTER,\n \t      dc, REQUIRED);\n \n-  add_sym_2s (\"getcwd\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"getcwd\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n           gfc_check_getcwd_sub, NULL, gfc_resolve_getcwd_sub,\n \t      c, BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_2s (\"getenv\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"getenv\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      NULL, NULL, NULL,\n \t      name, BT_CHARACTER, dc, REQUIRED, val, BT_CHARACTER, dc, REQUIRED);\n \n-  add_sym_2s (\"getarg\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"getarg\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      NULL, NULL, gfc_resolve_getarg,\n \t      c, BT_INTEGER, di, REQUIRED, vl, BT_CHARACTER, dc, REQUIRED);\n \n-  add_sym_1s (\"getlog\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_1s (\"getlog\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n               gfc_check_getlog, NULL, gfc_resolve_getlog, c, BT_CHARACTER,\n \t      dc, REQUIRED);\n \n   /* F2003 commandline routines.  */\n \n-  add_sym_3s (\"get_command\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F2003,\n+  add_sym_3s (\"get_command\", 0, BT_UNKNOWN, 0, GFC_STD_F2003,\n \t      NULL, NULL, gfc_resolve_get_command,\n \t      com, BT_CHARACTER, dc, OPTIONAL, length, BT_INTEGER, di, OPTIONAL,\n \t      st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_4s (\"get_command_argument\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F2003,\n+  add_sym_4s (\"get_command_argument\", 0, BT_UNKNOWN, 0, GFC_STD_F2003,\n \t      NULL, NULL, gfc_resolve_get_command_argument,\n \t      num, BT_INTEGER, di, REQUIRED, val, BT_CHARACTER, dc, OPTIONAL,\n \t      length, BT_INTEGER, di, OPTIONAL, st, BT_INTEGER, di, OPTIONAL);\n \n   /* F2003 subroutine to get environment variables.  */\n \n-  add_sym_5s (\"get_environment_variable\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F2003,\n+  add_sym_5s (\"get_environment_variable\", 0, BT_UNKNOWN, 0, GFC_STD_F2003,\n \t     NULL, NULL, gfc_resolve_get_environment_variable,\n \t      name, BT_CHARACTER, dc, REQUIRED, val, BT_CHARACTER, dc, OPTIONAL,\n \t      length, BT_INTEGER, di, OPTIONAL, st, BT_INTEGER, di, OPTIONAL,\n \t      trim_name, BT_LOGICAL, dl, OPTIONAL);\n \n-  add_sym_5s (\"mvbits\", 1, 1, BT_UNKNOWN, 0, GFC_STD_F95,\n+  add_sym_5s (\"mvbits\", 1, BT_UNKNOWN, 0, GFC_STD_F95,\n \t      gfc_check_mvbits, gfc_simplify_mvbits, gfc_resolve_mvbits,\n \t      f, BT_INTEGER, di, REQUIRED, fp, BT_INTEGER, di, REQUIRED,\n \t      ln, BT_INTEGER, di, REQUIRED, t, BT_INTEGER, di, REQUIRED,\n \t      tp, BT_INTEGER, di, REQUIRED);\n \n-  add_sym_1s (\"random_number\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F95,\n+  add_sym_1s (\"random_number\", 0, BT_UNKNOWN, 0, GFC_STD_F95,\n \t      gfc_check_random_number, NULL, gfc_resolve_random_number,\n \t      h, BT_REAL, dr, REQUIRED);\n \n-  add_sym_3s (\"random_seed\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F95,\n+  add_sym_3s (\"random_seed\", 0, BT_UNKNOWN, 0, GFC_STD_F95,\n \t     gfc_check_random_seed, NULL, NULL,\n \t      sz, BT_INTEGER, di, OPTIONAL, pt, BT_INTEGER, di, OPTIONAL,\n \t      gt, BT_INTEGER, di, OPTIONAL);\n \n   /* More G77 compatibility garbage.  */\n-  add_sym_3s (\"alarm\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_3s (\"alarm\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_alarm_sub, NULL, gfc_resolve_alarm_sub,\n \t      sec, BT_INTEGER, di, REQUIRED, han, BT_UNKNOWN, 0, REQUIRED,\n \t      st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_1s (\"srand\", 0, 1, BT_UNKNOWN, di, GFC_STD_GNU,\n+  add_sym_1s (\"srand\", 0, BT_UNKNOWN, di, GFC_STD_GNU,\n              gfc_check_srand, NULL, gfc_resolve_srand,\n \t      c, BT_INTEGER, 4, REQUIRED);\n \n-  add_sym_1s (\"exit\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_1s (\"exit\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n              gfc_check_exit, NULL, gfc_resolve_exit,\n \t      c, BT_INTEGER, di, OPTIONAL);\n \n   if ((gfc_option.allow_std & GFC_STD_GNU) || gfc_option.flag_all_intrinsics)\n     make_noreturn();\n \n-  add_sym_3s (\"fgetc\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_3s (\"fgetc\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_fgetputc_sub, NULL, gfc_resolve_fgetc_sub,\n \t      ut, BT_INTEGER, di, REQUIRED, c, BT_CHARACTER, dc, REQUIRED,\n \t      st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_2s (\"fget\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"fget\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_fgetput_sub, NULL, gfc_resolve_fget_sub,\n \t      c, BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_1s (\"flush\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_1s (\"flush\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_flush, NULL, gfc_resolve_flush,\n \t      c, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_3s (\"fputc\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_3s (\"fputc\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_fgetputc_sub, NULL, gfc_resolve_fputc_sub,\n \t      ut, BT_INTEGER, di, REQUIRED, c, BT_CHARACTER, dc, REQUIRED,\n \t      st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_2s (\"fput\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"fput\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_fgetput_sub, NULL, gfc_resolve_fput_sub,\n \t      c, BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_1s (\"free\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU, gfc_check_free,\n+  add_sym_1s (\"free\", 0, BT_UNKNOWN, 0, GFC_STD_GNU, gfc_check_free,\n \t      NULL, gfc_resolve_free, c, BT_INTEGER, ii, REQUIRED);\n \n-  add_sym_2s (\"ftell\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"ftell\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_ftell_sub, NULL, gfc_resolve_ftell_sub,\n \t      ut, BT_INTEGER, di, REQUIRED, of, BT_INTEGER, ii, REQUIRED);\n \n-  add_sym_2s (\"hostnm\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"hostnm\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n           gfc_check_hostnm_sub, NULL, gfc_resolve_hostnm_sub,\n \t      c, BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_3s (\"kill\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU, gfc_check_kill_sub,\n+  add_sym_3s (\"kill\", 0, BT_UNKNOWN, 0, GFC_STD_GNU, gfc_check_kill_sub,\n \t      NULL, gfc_resolve_kill_sub, c, BT_INTEGER, di, REQUIRED,\n \t      val, BT_INTEGER, di, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_3s (\"link\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_3s (\"link\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n               gfc_check_link_sub, NULL, gfc_resolve_link_sub,\n \t      name, BT_CHARACTER, dc, REQUIRED, val, BT_CHARACTER,\n \t      dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_1s (\"perror\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_1s (\"perror\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n           gfc_check_perror, NULL, gfc_resolve_perror,\n \t      c, BT_CHARACTER, dc, REQUIRED);\n \n-  add_sym_3s (\"rename\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_3s (\"rename\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n               gfc_check_rename_sub, NULL, gfc_resolve_rename_sub,\n \t      name, BT_CHARACTER, dc, REQUIRED, val, BT_CHARACTER,\n \t      dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_1s (\"sleep\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_1s (\"sleep\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n               gfc_check_sleep_sub, NULL, gfc_resolve_sleep_sub,\n \t      val, BT_CHARACTER, dc, REQUIRED);\n \n-  add_sym_3s (\"fstat\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_3s (\"fstat\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_fstat_sub, NULL, gfc_resolve_fstat_sub,\n \t      ut, BT_INTEGER, di, REQUIRED, vl, BT_INTEGER, di, REQUIRED,\n \t      st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_3s (\"lstat\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_3s (\"lstat\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_stat_sub, NULL, gfc_resolve_lstat_sub,\n \t      name, BT_CHARACTER, dc, REQUIRED, vl, BT_INTEGER, di, REQUIRED,\n \t      st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_3s (\"stat\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_3s (\"stat\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_stat_sub, NULL, gfc_resolve_stat_sub,\n \t      name, BT_CHARACTER, dc, REQUIRED, vl, BT_INTEGER, di, REQUIRED,\n \t      st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_3s (\"signal\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_3s (\"signal\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_signal_sub, NULL, gfc_resolve_signal_sub,\n \t      num, BT_INTEGER, di, REQUIRED, han, BT_UNKNOWN, 0, REQUIRED,\n \t      st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_3s (\"symlnk\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_3s (\"symlnk\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n               gfc_check_symlnk_sub, NULL, gfc_resolve_symlnk_sub,\n \t      name, BT_CHARACTER, dc, REQUIRED, val, BT_CHARACTER,\n \t      dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_2s (\"system\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"system\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      NULL, NULL, gfc_resolve_system_sub,\n \t      c, BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_3s (\"system_clock\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F95,\n+  add_sym_3s (\"system_clock\", 0, BT_UNKNOWN, 0, GFC_STD_F95,\n \t     gfc_check_system_clock, NULL, gfc_resolve_system_clock,\n \t      c, BT_INTEGER, di, OPTIONAL, cr, BT_INTEGER, di, OPTIONAL,\n \t      cm, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_2s (\"ttynam\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"ttynam\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n               gfc_check_ttynam_sub, NULL, gfc_resolve_ttynam_sub,\n \t      ut, BT_INTEGER, di, REQUIRED, c, BT_CHARACTER, dc, REQUIRED);\n \n-  add_sym_2s (\"umask\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"umask\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n           gfc_check_umask_sub, NULL, gfc_resolve_umask_sub,\n \t      val, BT_INTEGER, di, REQUIRED, num, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_2s (\"unlink\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"unlink\", 0, BT_UNKNOWN, 0, GFC_STD_GNU,\n           gfc_check_unlink_sub, NULL, gfc_resolve_unlink_sub,\n \t      c, BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n "}, {"sha": "3e7ad393455d9a557371ced305b77127aa0b8b41", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -357,6 +357,7 @@ void gfc_resolve_iand (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_ibclr (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_ibits (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_ibset (gfc_expr *, gfc_expr *, gfc_expr *);\n+void gfc_resolve_index_func (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_ierrno (gfc_expr *);\n void gfc_resolve_ieor (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_ichar (gfc_expr *, gfc_expr *);"}, {"sha": "e3d8cc8eda8ad6d9ee8a451ca08a11b3eae86ad9", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -667,7 +667,7 @@ end program test_aimag\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .40\n @item Name            @tab Argument            @tab Return type       @tab Standard\n-@item @code{DIMAG(Z)} @tab @code{COMPLEX(8) Z} @tab @code{REAL(8)}    @tab F95 and later\n+@item @code{DIMAG(Z)} @tab @code{COMPLEX(8) Z} @tab @code{REAL(8)}    @tab GNU extension\n @item @code{IMAG(Z)}  @tab @code{COMPLEX(*) Z} @tab @code{REAL(*)}    @tab GNU extension\n @item @code{IMAGPART(Z)} @tab @code{COMPLEX(*) Z} @tab @code{REAL(*)} @tab GNU extension\n @end multitable"}, {"sha": "1e57881125cfd2eb2347b0c69a72e5b66668ecee", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -876,6 +876,29 @@ gfc_resolve_ior (gfc_expr * f, gfc_expr * i, gfc_expr * j)\n }\n \n \n+void\n+gfc_resolve_index_func (gfc_expr * f, gfc_expr * str,\n+\t\t\tATTRIBUTE_UNUSED gfc_expr * sub_str, gfc_expr * back)\n+{\n+  gfc_typespec ts;\n+\n+  f->ts.type = BT_INTEGER;\n+  f->ts.kind = gfc_default_integer_kind;\n+\n+  if (back && back->ts.kind != gfc_default_integer_kind)\n+    {\n+      ts.type = BT_LOGICAL;\n+      ts.kind = gfc_default_integer_kind;\n+      ts.derived = NULL;\n+      ts.cl = NULL;\n+      gfc_convert_type (back, &ts, 2);\n+    }\n+\n+  f->value.function.name =\n+    gfc_get_string (\"__index_%d_i%d\", str->ts.kind, f->ts.kind);\n+}\n+\n+\n void\n gfc_resolve_int (gfc_expr * f, gfc_expr * a, gfc_expr * kind)\n {\n@@ -1022,7 +1045,8 @@ gfc_resolve_len (gfc_expr * f, gfc_expr * string)\n {\n   f->ts.type = BT_INTEGER;\n   f->ts.kind = gfc_default_integer_kind;\n-  f->value.function.name = gfc_get_string (\"__len_%d\", string->ts.kind);\n+  f->value.function.name = gfc_get_string (\"__len_%d_i%d\", string->ts.kind,\n+\t\t\t\t\t   gfc_default_integer_kind);\n }\n \n "}, {"sha": "3b6d3a73de742e30a7a6475b74ab777486d30e3b", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -836,6 +836,7 @@ resolve_actual_arglist (gfc_actual_arglist * arg)\n \t  || sym->attr.intrinsic\n \t  || sym->attr.external)\n \t{\n+\t  int actual_ok;\n \n \t  /* If a procedure is not already determined to be something else\n \t     check if it is intrinsic.  */\n@@ -851,6 +852,19 @@ resolve_actual_arglist (gfc_actual_arglist * arg)\n \t\t\t \"actual argument\", sym->name, &e->where);\n \t    }\n \n+\t  actual_ok = gfc_intrinsic_actual_ok (sym->name, sym->attr.subroutine);\n+\t  if (sym->attr.intrinsic && actual_ok == 0)\n+\t    {\n+\t      gfc_error (\"Intrinsic '%s' at %L is not allowed as an \"\n+\t\t\t \"actual argument\", sym->name, &e->where);\n+\t    }\n+\t  else if (sym->attr.intrinsic && actual_ok == 2)\n+\t  /* We need a special case for CHAR, which is the only intrinsic\n+\t     function allowed as actual argument in F2003 and not allowed\n+\t     in F95.  */\n+\t    gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: CHAR intrinsic \"\n+\t\t\t    \"allowed as actual argument at %L\", &e->where);\n+\n \t  if (sym->attr.contained && !sym->attr.use_assoc\n \t      && sym->ns->proc_name->attr.flavor != FL_MODULE)\n \t    {"}, {"sha": "43e27ee43e208366284693fc8a6807f4bfb21bae", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -1075,9 +1075,14 @@ gfc_get_extern_function_decl (gfc_symbol * sym)\n \tisym->resolve.f1 (&e, &argexpr);\n       else\n \t{\n-\t  /* All specific intrinsics take one or two arguments.  */\n-\t  gcc_assert (isym->formal->next->next == NULL);\n-\t  isym->resolve.f2 (&e, &argexpr, NULL);\n+\t  if (isym->formal->next->next == NULL)\n+\t    isym->resolve.f2 (&e, &argexpr, NULL);\n+\t  else\n+\t    {\n+\t      /* All specific intrinsics take less than 4 arguments.  */\n+\t      gcc_assert (isym->formal->next->next->next == NULL);\n+\t      isym->resolve.f3 (&e, &argexpr, NULL, NULL);\n+\t    }\n \t}\n \n       if (gfc_option.flag_f2c"}, {"sha": "44524790f8af10ef6ca759b2ef5bf4a784e73f77", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -1,3 +1,14 @@\n+2006-10-07  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR fortran/16580\n+\tPR fortran/29288\n+\t* gcc/testsuite/gfortran.fortran-torture/execute/specifics.f90:\n+\tAdd tests for using all possible intrinsics as actual arguments.\n+\t* gcc/testsuite/gfortran.dg/specifics_1.f90: Add tests for using\n+\tall possible intrinsics as actual arguments.\n+\t* gcc/testsuite/gfortran.dg/specifics_2.f90: New file.\n+\t* gcc/testsuite/gfortran.dg/specifics_3.f90: New file.\n+\n 2006-10-07  Richard Sandiford  <richard@codesourcery.com>\n \n \t* gcc.dg/debug/debug-1.c: Use -fno-if-conversion MIPS targets."}, {"sha": "a100df4266658ea17398a775ca17500a29fa6e29", "filename": "gcc/testsuite/gfortran.dg/specifics_1.f90", "status": "modified", "additions": 104, "deletions": 2, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/gcc%2Ftestsuite%2Fgfortran.dg%2Fspecifics_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/gcc%2Ftestsuite%2Fgfortran.dg%2Fspecifics_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fspecifics_1.f90?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -1,9 +1,13 @@\n ! Program to test intrinsic functions as actual arguments\n+!\n ! Copied from gfortran.fortran-torture/execute/specifics.f90\n+! Please keep them in sync\n+!\n ! It is run here with -ff2c option\n !\n ! { dg-do run }\n ! { dg-options \"-ff2c\" }\n+! Program to test intrinsic functions as actual arguments\n subroutine test_c(fn, val, res)\n   complex fn\n   complex val, res\n@@ -113,37 +117,86 @@ subroutine test_dprod(fn)\n   if (abs (fn (2.0, 3.0) - 6d0) .gt. 0.00001) call abort\n end subroutine\n \n+subroutine test_nint(fn,val,res)\n+  integer fn, res\n+  real val\n+  if (res .ne. fn(val)) call abort\n+end subroutine\n+\n+subroutine test_idnint(fn,val,res)\n+  integer fn, res\n+  double precision val\n+  if (res .ne. fn(val)) call abort\n+end subroutine\n+\n+subroutine test_idim(fn,val1,val2,res)\n+  integer fn, res, val1, val2\n+  if (res .ne. fn(val1,val2)) call abort\n+end subroutine\n+\n+subroutine test_iabs(fn,val,res)\n+  integer fn, res, val\n+  if (res .ne. fn(val)) call abort\n+end subroutine\n+\n+subroutine test_len(fn,val,res)\n+  integer fn, res\n+  character(len=*) val\n+  if (res .ne. fn(val)) call abort\n+end subroutine\n+\n+subroutine test_char(fn,val,res)\n+  integer val\n+  character(len=1) fn, res\n+  if (res .ne. fn(val)) call abort\n+end subroutine\n+\n+subroutine test_index(fn,val1,val2,res)\n+  integer fn, res\n+  character(len=*) val1, val2\n+  if (fn(val1,val2) .ne. res) call abort\n+end subroutine\n+\n program specifics\n   intrinsic abs\n   intrinsic aint\n   intrinsic anint\n   intrinsic acos\n+  intrinsic acosh\n   intrinsic asin\n+  intrinsic asinh\n   intrinsic atan\n+  intrinsic atanh\n   intrinsic cos\n   intrinsic sin\n   intrinsic tan\n   intrinsic cosh\n   intrinsic sinh\n   intrinsic tanh\n   intrinsic alog\n+  intrinsic alog10\n   intrinsic exp\n   intrinsic sign\n+  intrinsic isign\n   intrinsic amod\n \n   intrinsic dabs\n   intrinsic dint\n   intrinsic dnint\n   intrinsic dacos\n+  intrinsic dacosh\n   intrinsic dasin\n+  intrinsic dasinh\n   intrinsic datan\n+  intrinsic datanh\n   intrinsic dcos\n   intrinsic dsin\n   intrinsic dtan\n   intrinsic dcosh\n   intrinsic dsinh\n   intrinsic dtanh\n   intrinsic dlog\n+  intrinsic dlog10\n   intrinsic dexp\n   intrinsic dsign\n   intrinsic dmod\n@@ -161,25 +214,49 @@ program specifics\n   intrinsic cdlog\n   intrinsic cdsin\n   intrinsic cdsqrt\n+  intrinsic zcos\n+  intrinsic zexp\n+  intrinsic zlog\n+  intrinsic zsin\n+  intrinsic zsqrt\n \n   intrinsic cabs\n   intrinsic cdabs\n+  intrinsic zabs\n \n   intrinsic dprod\n \n+  intrinsic nint\n+  intrinsic idnint\n+  intrinsic dim\n+  intrinsic ddim\n+  intrinsic idim\n+  intrinsic iabs\n+  intrinsic mod\n+  intrinsic len\n+  intrinsic index\n+  intrinsic char\n+\n+  intrinsic aimag\n+  intrinsic dimag\n+\n   call test_r (abs, -1.0, abs(-1.0))\n-  call test_r (aint, 1.7, 1.0)\n-  call test_r (anint, 1.7, 2.0)\n+  call test_r (aint, 1.7, aint(1.7))\n+  call test_r (anint, 1.7, anint(1.7))\n   call test_r (acos, 0.5, acos(0.5))\n+  call test_r (acosh, 1.5, acosh(1.5))\n   call test_r (asin, 0.5, asin(0.5))\n+  call test_r (asinh, 0.5, asinh(0.5))\n   call test_r (atan, 0.5, atan(0.5))\n+  call test_r (atanh, 0.5, atanh(0.5))\n   call test_r (cos, 1.0, cos(1.0))\n   call test_r (sin, 1.0, sin(1.0))\n   call test_r (tan, 1.0, tan(1.0))\n   call test_r (cosh, 1.0, cosh(1.0))\n   call test_r (sinh, 1.0, sinh(1.0))\n   call test_r (tanh, 1.0, tanh(1.0))\n   call test_r (alog, 2.0, alog(2.0))\n+  call test_r (alog10, 2.0, alog10(2.0))\n   call test_r (exp, 1.0, exp(1.0))\n   call test_r2 (sign, 1.0, -2.0, sign(1.0, -2.0))\n   call test_r2 (amod, 3.5, 2.0, amod(3.5, 2.0))\n@@ -188,15 +265,19 @@ program specifics\n   call test_d (dint, 1.7d0, 1d0)\n   call test_d (dnint, 1.7d0, 2d0)\n   call test_d (dacos, 0.5d0, dacos(0.5d0))\n+  call test_d (dacosh, 1.5d0, dacosh(1.5d0))\n   call test_d (dasin, 0.5d0, dasin(0.5d0))\n+  call test_d (dasinh, 0.5d0, dasinh(0.5d0))\n   call test_d (datan, 0.5d0, datan(0.5d0))\n+  call test_d (datanh, 0.5d0, datanh(0.5d0))\n   call test_d (dcos, 1d0, dcos(1d0))\n   call test_d (dsin, 1d0, dsin(1d0))\n   call test_d (dtan, 1d0, dtan(1d0))\n   call test_d (dcosh, 1d0, dcosh(1d0))\n   call test_d (dsinh, 1d0, dsinh(1d0))\n   call test_d (dtanh, 1d0, dtanh(1d0))\n   call test_d (dlog, 2d0, dlog(2d0))\n+  call test_d (dlog10, 2d0, dlog10(2d0))\n   call test_d (dexp, 1d0, dexp(1d0))\n   call test_d2 (dsign, 1d0, -2d0, sign(1d0, -2d0))\n   call test_d2 (dmod, 3.5d0, 2d0, dmod(3.5d0, 2d0))\n@@ -212,13 +293,34 @@ program specifics\n \n   call test_z (dconjg, (1.2d0,-4.d0), dconjg((1.2d0,-4.d0)))\n   call test_z (cdcos, (1.2d0,-4.d0), cdcos((1.2d0,-4.d0)))\n+  call test_z (zcos, (1.2d0,-4.d0), zcos((1.2d0,-4.d0)))\n   call test_z (cdexp, (1.2d0,-4.d0), cdexp((1.2d0,-4.d0)))\n+  call test_z (zexp, (1.2d0,-4.d0), zexp((1.2d0,-4.d0)))\n   call test_z (cdlog, (1.2d0,-4.d0), cdlog((1.2d0,-4.d0)))\n+  call test_z (zlog, (1.2d0,-4.d0), zlog((1.2d0,-4.d0)))\n   call test_z (cdsin, (1.2d0,-4.d0), cdsin((1.2d0,-4.d0)))\n+  call test_z (zsin, (1.2d0,-4.d0), zsin((1.2d0,-4.d0)))\n   call test_z (cdsqrt, (1.2d0,-4.d0), cdsqrt((1.2d0,-4.d0)))\n+  call test_z (zsqrt, (1.2d0,-4.d0), zsqrt((1.2d0,-4.d0)))\n \n   call test_cabs (cabs, (1.2,-4.), cabs((1.2,-4.)))\n   call test_cdabs (cdabs, (1.2d0,-4.d0), cdabs((1.2d0,-4.d0)))\n+  call test_cdabs (zabs, (1.2d0,-4.d0), zabs((1.2d0,-4.d0)))\n+  call test_cabs (aimag, (1.2,-4.), aimag((1.2,-4.)))\n+  call test_cdabs (dimag, (1.2d0,-4.d0), dimag((1.2d0,-4.d0)))\n+\n+  call test_nint (nint, -1.2, nint(-1.2))\n+  call test_idnint (idnint, -1.2d0, idnint(-1.2d0))\n+  call test_idim (isign, -42, 17, isign(-42, 17))\n+  call test_idim (idim, -42, 17, idim(-42,17))\n+  call test_idim (idim, 42, 17, idim(42,17))\n+  call test_r2 (dim, 1.2, -4., dim(1.2, -4.))\n+  call test_d2 (ddim, 1.2d0, -4.d0, ddim(1.2d0, -4.d0))\n+  call test_iabs (iabs, -7, iabs(-7))\n+  call test_idim (mod, 5, 2, mod(5,2))\n+  call test_len (len, \"foobar\", len(\"foobar\"))\n+  call test_char (char, 47, char(47))\n+  call test_index (index, \"foobarfoobar\", \"bar\", index(\"foobarfoobar\",\"bar\"))\n \n end program\n "}, {"sha": "399dbd5df4b2d1ab8f1ac8b0d5de314a2321b978", "filename": "gcc/testsuite/gfortran.dg/specifics_2.f90", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/gcc%2Ftestsuite%2Fgfortran.dg%2Fspecifics_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/gcc%2Ftestsuite%2Fgfortran.dg%2Fspecifics_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fspecifics_2.f90?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -0,0 +1,82 @@\n+! { dg-do compile }\n+! This is the list of intrinsics allowed as actual arguments\n+ intrinsic abs,acos,acosh,aimag,aint,alog,alog10,amod,anint,asin,asinh,atan,&\n+ atan2,atanh,cabs,ccos,cexp,char,clog,conjg,cos,cosh,csin,csqrt,dabs,dacos,&\n+ dacosh,dasin,dasinh,datan,datan2,datanh,dconjg,dcos,dcosh,ddim,dexp,dim,&\n+ dimag,dint,dlog,dlog10,dmod,dnint,dprod,dsign,dsin,dsinh,dsqrt,dtan,dtanh,&\n+ exp,iabs,idim,idnint,index,isign,len,mod,nint,sign,sin,sinh,sqrt,tan,&\n+ tanh,zabs,zcos,zexp,zlog,zsin,zsqrt\n+ \n+  call foo(abs)\n+  call foo(acos)\n+  call foo(acosh)\n+  call foo(aimag)\n+  call foo(aint)\n+  call foo(alog)\n+  call foo(alog10)\n+  call foo(amod)\n+  call foo(anint)\n+  call foo(asin)\n+  call foo(asinh)\n+  call foo(atan)\n+  call foo(atan2)\n+  call foo(atanh)\n+  call foo(cabs)\n+  call foo(ccos)\n+  call foo(cexp)\n+  call foo(char)\n+  call foo(clog)\n+  call foo(conjg)\n+  call foo(cos)\n+  call foo(cosh)\n+  call foo(csin)\n+  call foo(csqrt)\n+  call foo(dabs)\n+  call foo(dacos)\n+  call foo(dacosh)\n+  call foo(dasin)\n+  call foo(dasinh)\n+  call foo(datan)\n+  call foo(datan2)\n+  call foo(datanh)\n+  call foo(dconjg)\n+  call foo(dcos)\n+  call foo(dcosh)\n+  call foo(ddim)\n+  call foo(dexp)\n+  call foo(dim)\n+  call foo(dimag)\n+  call foo(dint)\n+  call foo(dlog)\n+  call foo(dlog10)\n+  call foo(dmod)\n+  call foo(dnint)\n+  call foo(dprod)\n+  call foo(dsign)\n+  call foo(dsin)\n+  call foo(dsinh)\n+  call foo(dsqrt)\n+  call foo(dtan)\n+  call foo(dtanh)\n+  call foo(exp)\n+  call foo(iabs)\n+  call foo(idim)\n+  call foo(idnint)\n+  call foo(index)\n+  call foo(isign)\n+  call foo(len)\n+  call foo(mod)\n+  call foo(nint)\n+  call foo(sign)\n+  call foo(sin)\n+  call foo(sinh)\n+  call foo(sqrt)\n+  call foo(tan)\n+  call foo(tanh)\n+  call foo(zabs)\n+  call foo(zcos)\n+  call foo(zexp)\n+  call foo(zlog)\n+  call foo(zsin)\n+  call foo(zsqrt)\n+  end"}, {"sha": "3b5ddada4265b2cb2ae2850626f27daf38acf90e", "filename": "gcc/testsuite/gfortran.dg/specifics_3.f90", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/gcc%2Ftestsuite%2Fgfortran.dg%2Fspecifics_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/gcc%2Ftestsuite%2Fgfortran.dg%2Fspecifics_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fspecifics_3.f90?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -0,0 +1,5 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f95\" }\n+  intrinsic char\n+  call foo(char) ! { dg-error \"Fortran 2003: CHAR intrinsic allowed as actual argument\" }\n+  end"}, {"sha": "ec34aa5d0c91b4e4f2211ffc4e84dc760865b634", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/specifics.f90", "status": "modified", "additions": 102, "deletions": 2, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fspecifics.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fspecifics.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fspecifics.f90?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -1,4 +1,6 @@\n ! Program to test intrinsic functions as actual arguments\n+!\n+! Please keep the content of this file in sync with gfortran.dg/specifics_1.f90\n subroutine test_c(fn, val, res)\n   complex fn\n   complex val, res\n@@ -108,37 +110,86 @@ subroutine test_dprod(fn)\n   if (abs (fn (2.0, 3.0) - 6d0) .gt. 0.00001) call abort\n end subroutine\n \n+subroutine test_nint(fn,val,res)\n+  integer fn, res\n+  real val\n+  if (res .ne. fn(val)) call abort\n+end subroutine\n+\n+subroutine test_idnint(fn,val,res)\n+  integer fn, res\n+  double precision val\n+  if (res .ne. fn(val)) call abort\n+end subroutine\n+\n+subroutine test_idim(fn,val1,val2,res)\n+  integer fn, res, val1, val2\n+  if (res .ne. fn(val1,val2)) call abort\n+end subroutine\n+\n+subroutine test_iabs(fn,val,res)\n+  integer fn, res, val\n+  if (res .ne. fn(val)) call abort\n+end subroutine\n+\n+subroutine test_len(fn,val,res)\n+  integer fn, res\n+  character(len=*) val\n+  if (res .ne. fn(val)) call abort\n+end subroutine\n+\n+subroutine test_char(fn,val,res)\n+  integer val\n+  character(len=1) fn, res\n+  if (res .ne. fn(val)) call abort\n+end subroutine\n+\n+subroutine test_index(fn,val1,val2,res)\n+  integer fn, res\n+  character(len=*) val1, val2\n+  if (fn(val1,val2) .ne. res) call abort\n+end subroutine\n+\n program specifics\n   intrinsic abs\n   intrinsic aint\n   intrinsic anint\n   intrinsic acos\n+  intrinsic acosh\n   intrinsic asin\n+  intrinsic asinh\n   intrinsic atan\n+  intrinsic atanh\n   intrinsic cos\n   intrinsic sin\n   intrinsic tan\n   intrinsic cosh\n   intrinsic sinh\n   intrinsic tanh\n   intrinsic alog\n+  intrinsic alog10\n   intrinsic exp\n   intrinsic sign\n+  intrinsic isign\n   intrinsic amod\n \n   intrinsic dabs\n   intrinsic dint\n   intrinsic dnint\n   intrinsic dacos\n+  intrinsic dacosh\n   intrinsic dasin\n+  intrinsic dasinh\n   intrinsic datan\n+  intrinsic datanh\n   intrinsic dcos\n   intrinsic dsin\n   intrinsic dtan\n   intrinsic dcosh\n   intrinsic dsinh\n   intrinsic dtanh\n   intrinsic dlog\n+  intrinsic dlog10\n   intrinsic dexp\n   intrinsic dsign\n   intrinsic dmod\n@@ -156,25 +207,49 @@ program specifics\n   intrinsic cdlog\n   intrinsic cdsin\n   intrinsic cdsqrt\n+  intrinsic zcos\n+  intrinsic zexp\n+  intrinsic zlog\n+  intrinsic zsin\n+  intrinsic zsqrt\n \n   intrinsic cabs\n   intrinsic cdabs\n+  intrinsic zabs\n \n   intrinsic dprod\n \n+  intrinsic nint\n+  intrinsic idnint\n+  intrinsic dim\n+  intrinsic ddim\n+  intrinsic idim\n+  intrinsic iabs\n+  intrinsic mod\n+  intrinsic len\n+  intrinsic index\n+  intrinsic char\n+\n+  intrinsic aimag\n+  intrinsic dimag\n+\n   call test_r (abs, -1.0, abs(-1.0))\n-  call test_r (aint, 1.7, 1.0)\n-  call test_r (anint, 1.7, 2.0)\n+  call test_r (aint, 1.7, aint(1.7))\n+  call test_r (anint, 1.7, anint(1.7))\n   call test_r (acos, 0.5, acos(0.5))\n+  call test_r (acosh, 1.5, acosh(1.5))\n   call test_r (asin, 0.5, asin(0.5))\n+  call test_r (asinh, 0.5, asinh(0.5))\n   call test_r (atan, 0.5, atan(0.5))\n+  call test_r (atanh, 0.5, atanh(0.5))\n   call test_r (cos, 1.0, cos(1.0))\n   call test_r (sin, 1.0, sin(1.0))\n   call test_r (tan, 1.0, tan(1.0))\n   call test_r (cosh, 1.0, cosh(1.0))\n   call test_r (sinh, 1.0, sinh(1.0))\n   call test_r (tanh, 1.0, tanh(1.0))\n   call test_r (alog, 2.0, alog(2.0))\n+  call test_r (alog10, 2.0, alog10(2.0))\n   call test_r (exp, 1.0, exp(1.0))\n   call test_r2 (sign, 1.0, -2.0, sign(1.0, -2.0))\n   call test_r2 (amod, 3.5, 2.0, amod(3.5, 2.0))\n@@ -183,15 +258,19 @@ program specifics\n   call test_d (dint, 1.7d0, 1d0)\n   call test_d (dnint, 1.7d0, 2d0)\n   call test_d (dacos, 0.5d0, dacos(0.5d0))\n+  call test_d (dacosh, 1.5d0, dacosh(1.5d0))\n   call test_d (dasin, 0.5d0, dasin(0.5d0))\n+  call test_d (dasinh, 0.5d0, dasinh(0.5d0))\n   call test_d (datan, 0.5d0, datan(0.5d0))\n+  call test_d (datanh, 0.5d0, datanh(0.5d0))\n   call test_d (dcos, 1d0, dcos(1d0))\n   call test_d (dsin, 1d0, dsin(1d0))\n   call test_d (dtan, 1d0, dtan(1d0))\n   call test_d (dcosh, 1d0, dcosh(1d0))\n   call test_d (dsinh, 1d0, dsinh(1d0))\n   call test_d (dtanh, 1d0, dtanh(1d0))\n   call test_d (dlog, 2d0, dlog(2d0))\n+  call test_d (dlog10, 2d0, dlog10(2d0))\n   call test_d (dexp, 1d0, dexp(1d0))\n   call test_d2 (dsign, 1d0, -2d0, sign(1d0, -2d0))\n   call test_d2 (dmod, 3.5d0, 2d0, dmod(3.5d0, 2d0))\n@@ -207,13 +286,34 @@ program specifics\n \n   call test_z (dconjg, (1.2d0,-4.d0), dconjg((1.2d0,-4.d0)))\n   call test_z (cdcos, (1.2d0,-4.d0), cdcos((1.2d0,-4.d0)))\n+  call test_z (zcos, (1.2d0,-4.d0), zcos((1.2d0,-4.d0)))\n   call test_z (cdexp, (1.2d0,-4.d0), cdexp((1.2d0,-4.d0)))\n+  call test_z (zexp, (1.2d0,-4.d0), zexp((1.2d0,-4.d0)))\n   call test_z (cdlog, (1.2d0,-4.d0), cdlog((1.2d0,-4.d0)))\n+  call test_z (zlog, (1.2d0,-4.d0), zlog((1.2d0,-4.d0)))\n   call test_z (cdsin, (1.2d0,-4.d0), cdsin((1.2d0,-4.d0)))\n+  call test_z (zsin, (1.2d0,-4.d0), zsin((1.2d0,-4.d0)))\n   call test_z (cdsqrt, (1.2d0,-4.d0), cdsqrt((1.2d0,-4.d0)))\n+  call test_z (zsqrt, (1.2d0,-4.d0), zsqrt((1.2d0,-4.d0)))\n \n   call test_cabs (cabs, (1.2,-4.), cabs((1.2,-4.)))\n   call test_cdabs (cdabs, (1.2d0,-4.d0), cdabs((1.2d0,-4.d0)))\n+  call test_cdabs (zabs, (1.2d0,-4.d0), zabs((1.2d0,-4.d0)))\n+  call test_cabs (aimag, (1.2,-4.), aimag((1.2,-4.)))\n+  call test_cdabs (dimag, (1.2d0,-4.d0), dimag((1.2d0,-4.d0)))\n+\n+  call test_nint (nint, -1.2, nint(-1.2))\n+  call test_idnint (idnint, -1.2d0, idnint(-1.2d0))\n+  call test_idim (isign, -42, 17, isign(-42, 17))\n+  call test_idim (idim, -42, 17, idim(-42,17))\n+  call test_idim (idim, 42, 17, idim(42,17))\n+  call test_r2 (dim, 1.2, -4., dim(1.2, -4.))\n+  call test_d2 (ddim, 1.2d0, -4.d0, ddim(1.2d0, -4.d0))\n+  call test_iabs (iabs, -7, iabs(-7))\n+  call test_idim (mod, 5, 2, mod(5,2))\n+  call test_len (len, \"foobar\", len(\"foobar\"))\n+  call test_char (char, 47, char(47))\n+  call test_index (index, \"foobarfoobar\", \"bar\", index(\"foobarfoobar\",\"bar\"))\n \n end program\n "}, {"sha": "bb7b7baff4dcd7cd8d9b6de490caa273b1133247", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -1,6 +1,37 @@\n+2006-10-01  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR fortran/16580\n+\tPR fortran/29288\n+\t* libgfortran/Makefile.am: Add the new files to the build\n+\tprocess, and rules to build them.\n+\t* libgfortran/Makefile.in: Regenerate.\n+\t* libgfortran/m4/misc_specifics.m4: New file.\n+\t* libgfortran/m4/specific.m4: Add new special cases for function\n+\twith complex argument and real result, like abs_c* and aimag_c*.\n+\t* libgfortran/intrinsics/f2c_specifics.F90: Add specifics for\n+\tAIMAG, ASINH, ACOSH and ATANH.\n+\t* libgfortran/generated/_aimag_c4.F90: New file.\n+\t* libgfortran/generated/_aimag_c8.F90: New file.\n+\t* libgfortran/generated/_asinh_r10.F90: New file.\n+\t* libgfortran/generated/_acosh_r16.F90: New file.\n+\t* libgfortran/generated/_aimag_c10.F90: New file.\n+\t* libgfortran/generated/_atanh_r16.F90: New file.\n+\t* libgfortran/generated/_acosh_r4.F90: New file.\n+\t* libgfortran/generated/_acosh_r8.F90: New file.\n+\t* libgfortran/generated/_asinh_r4.F90: New file.\n+\t* libgfortran/generated/_asinh_r8.F90: New file.\n+\t* libgfortran/generated/_asinh_r16.F90: New file.\n+\t* libgfortran/generated/_atanh_r4.F90: New file.\n+\t* libgfortran/generated/_atanh_r8.F90: New file.\n+\t* libgfortran/generated/_acosh_r10.F90: New file.\n+\t* libgfortran/generated/misc_specifics.F90: New file.\n+\t* libgfortran/generated/_aimag_c16.F90: New file.\n+\t* libgfortran/generated/_atanh_r10.F90: New file.\n+\n 2006-10-05  Danny Smith  <dannysmith@users.sourceforge.net>\n \n-\t* acinclude.m4 (HAVE_ATTRIBUTE_ALIAS): Remove __USER_LABEL_PREFIX__ from test.\n+\t* acinclude.m4 (HAVE_ATTRIBUTE_ALIAS): Remove __USER_LABEL_PREFIX__\n+\tfrom test.\n \t* configure: Regenerate.\n \n 2006-10-05  Steven G. Kargl  <kargl@gcc.gnu.org>"}, {"sha": "dd5b684c017f044cde45ba9404683a4543126681", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -419,7 +419,8 @@ m4_files= m4/iparm.m4 m4/ifunction.m4 m4/iforeach.m4 m4/all.m4 \\\n     m4/ctrig.m4 m4/cexp.m4 m4/chyp.m4 m4/mtype.m4 \\\n     m4/specific.m4 m4/specific2.m4 m4/head.m4 m4/shape.m4 m4/reshape.m4 \\\n     m4/transpose.m4 m4/eoshift1.m4 m4/eoshift3.m4 m4/exponent.m4 \\\n-    m4/fraction.m4 m4/nearest.m4 m4/set_exponent.m4 m4/pow.m4\n+    m4/fraction.m4 m4/nearest.m4 m4/set_exponent.m4 m4/pow.m4 \\\n+    m4/misc_specifics.m4\n \n gfor_built_src= $(i_all_c) $(i_any_c) $(i_count_c) $(i_maxloc0_c) \\\n     $(i_maxloc1_c) $(i_maxval_c) $(i_minloc0_c) $(i_minloc1_c) $(i_minval_c) \\\n@@ -444,6 +445,10 @@ generated/_abs_r4.F90 \\\n generated/_abs_r8.F90 \\\n generated/_abs_r10.F90 \\\n generated/_abs_r16.F90 \\\n+generated/_aimag_c4.F90 \\\n+generated/_aimag_c8.F90 \\\n+generated/_aimag_c10.F90 \\\n+generated/_aimag_c16.F90 \\\n generated/_exp_r4.F90 \\\n generated/_exp_r8.F90 \\\n generated/_exp_r10.F90 \\\n@@ -476,14 +481,26 @@ generated/_asin_r4.F90 \\\n generated/_asin_r8.F90 \\\n generated/_asin_r10.F90 \\\n generated/_asin_r16.F90 \\\n+generated/_asinh_r4.F90 \\\n+generated/_asinh_r8.F90 \\\n+generated/_asinh_r10.F90 \\\n+generated/_asinh_r16.F90 \\\n generated/_acos_r4.F90 \\\n generated/_acos_r8.F90 \\\n generated/_acos_r10.F90 \\\n generated/_acos_r16.F90 \\\n+generated/_acosh_r4.F90 \\\n+generated/_acosh_r8.F90 \\\n+generated/_acosh_r10.F90 \\\n+generated/_acosh_r16.F90 \\\n generated/_atan_r4.F90 \\\n generated/_atan_r8.F90 \\\n generated/_atan_r10.F90 \\\n generated/_atan_r16.F90 \\\n+generated/_atanh_r4.F90 \\\n+generated/_atanh_r8.F90 \\\n+generated/_atanh_r10.F90 \\\n+generated/_atanh_r16.F90 \\\n generated/_sin_r4.F90 \\\n generated/_sin_r8.F90 \\\n generated/_sin_r10.F90 \\\n@@ -556,9 +573,12 @@ generated/_mod_r8.F90 \\\n generated/_mod_r10.F90 \\\n generated/_mod_r16.F90\n \n+gfor_misc_specifics = generated/misc_specifics.F90\n+\n gfor_specific_src= \\\n $(gfor_built_specific_src) \\\n $(gfor_built_specific2_src) \\\n+$(gfor_misc_specifics) \\\n intrinsics/dprod_r8.f90 \\\n intrinsics/f2c_specifics.F90\n \n@@ -572,7 +592,7 @@ $(patsubst %.c,%.lo,$(notdir $(i_matmul_c))): AM_CFLAGS += -ftree-vectorize -fun\n $(patsubst %.c,%.lo,$(notdir $(i_matmull_c))): AM_CFLAGS += -funroll-loops\n \n BUILT_SOURCES=$(gfor_built_src) $(gfor_built_specific_src) \\\n-    $(gfor_built_specific2_src)\n+    $(gfor_built_specific2_src) $(gfor_misc_specifics)\n libgfortran_la_SOURCES = $(gfor_src) $(gfor_built_src) $(gfor_io_src) \\\n     $(gfor_helper_src) $(gfor_io_headers) $(gfor_specific_src)\n \n@@ -685,6 +705,9 @@ $(gfor_built_specific_src): m4/specific.m4 m4/head.m4\n \n $(gfor_built_specific2_src): m4/specific2.m4 m4/head.m4\n \t$(M4) -Dfile=$@ -I$(srcdir)/m4 specific2.m4 > $(srcdir)/$@\n+\n+$(gfor_misc_specifics): m4/misc_specifics.m4 m4/head.m4\n+\tm4 -Dfile=$@ -I$(srcdir)/m4 misc_specifics.m4 > $(srcdir)/$@\n ## end of maintainer mode only rules\n endif\n "}, {"sha": "77defb517a0750d192bf3f768637b23e16d7746a", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 86, "deletions": 8, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -179,15 +179,19 @@ am__objects_30 = associated.lo abort.lo access.lo args.lo bessel.lo \\\n am__objects_31 =\n am__objects_32 = _abs_c4.lo _abs_c8.lo _abs_c10.lo _abs_c16.lo \\\n \t_abs_i4.lo _abs_i8.lo _abs_i16.lo _abs_r4.lo _abs_r8.lo \\\n-\t_abs_r10.lo _abs_r16.lo _exp_r4.lo _exp_r8.lo _exp_r10.lo \\\n+\t_abs_r10.lo _abs_r16.lo _aimag_c4.lo _aimag_c8.lo \\\n+\t_aimag_c10.lo _aimag_c16.lo _exp_r4.lo _exp_r8.lo _exp_r10.lo \\\n \t_exp_r16.lo _exp_c4.lo _exp_c8.lo _exp_c10.lo _exp_c16.lo \\\n \t_log_r4.lo _log_r8.lo _log_r10.lo _log_r16.lo _log_c4.lo \\\n \t_log_c8.lo _log_c10.lo _log_c16.lo _log10_r4.lo _log10_r8.lo \\\n \t_log10_r10.lo _log10_r16.lo _sqrt_r4.lo _sqrt_r8.lo \\\n \t_sqrt_r10.lo _sqrt_r16.lo _sqrt_c4.lo _sqrt_c8.lo _sqrt_c10.lo \\\n \t_sqrt_c16.lo _asin_r4.lo _asin_r8.lo _asin_r10.lo _asin_r16.lo \\\n-\t_acos_r4.lo _acos_r8.lo _acos_r10.lo _acos_r16.lo _atan_r4.lo \\\n-\t_atan_r8.lo _atan_r10.lo _atan_r16.lo _sin_r4.lo _sin_r8.lo \\\n+\t_asinh_r4.lo _asinh_r8.lo _asinh_r10.lo _asinh_r16.lo \\\n+\t_acos_r4.lo _acos_r8.lo _acos_r10.lo _acos_r16.lo _acosh_r4.lo \\\n+\t_acosh_r8.lo _acosh_r10.lo _acosh_r16.lo _atan_r4.lo \\\n+\t_atan_r8.lo _atan_r10.lo _atan_r16.lo _atanh_r4.lo \\\n+\t_atanh_r8.lo _atanh_r10.lo _atanh_r16.lo _sin_r4.lo _sin_r8.lo \\\n \t_sin_r10.lo _sin_r16.lo _sin_c4.lo _sin_c8.lo _sin_c10.lo \\\n \t_sin_c16.lo _cos_r4.lo _cos_r8.lo _cos_r10.lo _cos_r16.lo \\\n \t_cos_c4.lo _cos_c8.lo _cos_c10.lo _cos_c16.lo _tan_r4.lo \\\n@@ -203,11 +207,12 @@ am__objects_33 = _sign_i4.lo _sign_i8.lo _sign_i16.lo _sign_r4.lo \\\n \t_atan2_r4.lo _atan2_r8.lo _atan2_r10.lo _atan2_r16.lo \\\n \t_mod_i4.lo _mod_i8.lo _mod_i16.lo _mod_r4.lo _mod_r8.lo \\\n \t_mod_r10.lo _mod_r16.lo\n-am__objects_34 = $(am__objects_32) $(am__objects_33) dprod_r8.lo \\\n-\tf2c_specifics.lo\n+am__objects_34 = misc_specifics.lo\n+am__objects_35 = $(am__objects_32) $(am__objects_33) $(am__objects_34) \\\n+\tdprod_r8.lo f2c_specifics.lo\n am_libgfortran_la_OBJECTS = $(am__objects_1) $(am__objects_28) \\\n \t$(am__objects_29) $(am__objects_30) $(am__objects_31) \\\n-\t$(am__objects_34)\n+\t$(am__objects_35)\n libgfortran_la_OBJECTS = $(am_libgfortran_la_OBJECTS)\n libgfortranbegin_la_LIBADD =\n am_libgfortranbegin_la_OBJECTS = fmain.lo\n@@ -767,7 +772,8 @@ m4_files = m4/iparm.m4 m4/ifunction.m4 m4/iforeach.m4 m4/all.m4 \\\n     m4/ctrig.m4 m4/cexp.m4 m4/chyp.m4 m4/mtype.m4 \\\n     m4/specific.m4 m4/specific2.m4 m4/head.m4 m4/shape.m4 m4/reshape.m4 \\\n     m4/transpose.m4 m4/eoshift1.m4 m4/eoshift3.m4 m4/exponent.m4 \\\n-    m4/fraction.m4 m4/nearest.m4 m4/set_exponent.m4 m4/pow.m4\n+    m4/fraction.m4 m4/nearest.m4 m4/set_exponent.m4 m4/pow.m4 \\\n+    m4/misc_specifics.m4\n \n gfor_built_src = $(i_all_c) $(i_any_c) $(i_count_c) $(i_maxloc0_c) \\\n     $(i_maxloc1_c) $(i_maxval_c) $(i_minloc0_c) $(i_minloc1_c) $(i_minval_c) \\\n@@ -793,6 +799,10 @@ generated/_abs_r4.F90 \\\n generated/_abs_r8.F90 \\\n generated/_abs_r10.F90 \\\n generated/_abs_r16.F90 \\\n+generated/_aimag_c4.F90 \\\n+generated/_aimag_c8.F90 \\\n+generated/_aimag_c10.F90 \\\n+generated/_aimag_c16.F90 \\\n generated/_exp_r4.F90 \\\n generated/_exp_r8.F90 \\\n generated/_exp_r10.F90 \\\n@@ -825,14 +835,26 @@ generated/_asin_r4.F90 \\\n generated/_asin_r8.F90 \\\n generated/_asin_r10.F90 \\\n generated/_asin_r16.F90 \\\n+generated/_asinh_r4.F90 \\\n+generated/_asinh_r8.F90 \\\n+generated/_asinh_r10.F90 \\\n+generated/_asinh_r16.F90 \\\n generated/_acos_r4.F90 \\\n generated/_acos_r8.F90 \\\n generated/_acos_r10.F90 \\\n generated/_acos_r16.F90 \\\n+generated/_acosh_r4.F90 \\\n+generated/_acosh_r8.F90 \\\n+generated/_acosh_r10.F90 \\\n+generated/_acosh_r16.F90 \\\n generated/_atan_r4.F90 \\\n generated/_atan_r8.F90 \\\n generated/_atan_r10.F90 \\\n generated/_atan_r16.F90 \\\n+generated/_atanh_r4.F90 \\\n+generated/_atanh_r8.F90 \\\n+generated/_atanh_r10.F90 \\\n+generated/_atanh_r16.F90 \\\n generated/_sin_r4.F90 \\\n generated/_sin_r8.F90 \\\n generated/_sin_r10.F90 \\\n@@ -905,14 +927,16 @@ generated/_mod_r8.F90 \\\n generated/_mod_r10.F90 \\\n generated/_mod_r16.F90\n \n+gfor_misc_specifics = generated/misc_specifics.F90\n gfor_specific_src = \\\n $(gfor_built_specific_src) \\\n $(gfor_built_specific2_src) \\\n+$(gfor_misc_specifics) \\\n intrinsics/dprod_r8.f90 \\\n intrinsics/f2c_specifics.F90\n \n BUILT_SOURCES = $(gfor_built_src) $(gfor_built_specific_src) \\\n-    $(gfor_built_specific2_src)\n+    $(gfor_built_specific2_src) $(gfor_misc_specifics)\n \n libgfortran_la_SOURCES = $(gfor_src) $(gfor_built_src) $(gfor_io_src) \\\n     $(gfor_helper_src) $(gfor_io_headers) $(gfor_specific_src)\n@@ -1083,6 +1107,18 @@ _abs_r10.lo: generated/_abs_r10.F90\n _abs_r16.lo: generated/_abs_r16.F90\n \t$(LIBTOOL) --mode=compile $(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS) -c -o _abs_r16.lo `test -f 'generated/_abs_r16.F90' || echo '$(srcdir)/'`generated/_abs_r16.F90\n \n+_aimag_c4.lo: generated/_aimag_c4.F90\n+\t$(LIBTOOL) --mode=compile $(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS) -c -o _aimag_c4.lo `test -f 'generated/_aimag_c4.F90' || echo '$(srcdir)/'`generated/_aimag_c4.F90\n+\n+_aimag_c8.lo: generated/_aimag_c8.F90\n+\t$(LIBTOOL) --mode=compile $(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS) -c -o _aimag_c8.lo `test -f 'generated/_aimag_c8.F90' || echo '$(srcdir)/'`generated/_aimag_c8.F90\n+\n+_aimag_c10.lo: generated/_aimag_c10.F90\n+\t$(LIBTOOL) --mode=compile $(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS) -c -o _aimag_c10.lo `test -f 'generated/_aimag_c10.F90' || echo '$(srcdir)/'`generated/_aimag_c10.F90\n+\n+_aimag_c16.lo: generated/_aimag_c16.F90\n+\t$(LIBTOOL) --mode=compile $(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS) -c -o _aimag_c16.lo `test -f 'generated/_aimag_c16.F90' || echo '$(srcdir)/'`generated/_aimag_c16.F90\n+\n _exp_r4.lo: generated/_exp_r4.F90\n \t$(LIBTOOL) --mode=compile $(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS) -c -o _exp_r4.lo `test -f 'generated/_exp_r4.F90' || echo '$(srcdir)/'`generated/_exp_r4.F90\n \n@@ -1179,6 +1215,18 @@ _asin_r10.lo: generated/_asin_r10.F90\n _asin_r16.lo: generated/_asin_r16.F90\n \t$(LIBTOOL) --mode=compile $(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS) -c -o _asin_r16.lo `test -f 'generated/_asin_r16.F90' || echo '$(srcdir)/'`generated/_asin_r16.F90\n \n+_asinh_r4.lo: generated/_asinh_r4.F90\n+\t$(LIBTOOL) --mode=compile $(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS) -c -o _asinh_r4.lo `test -f 'generated/_asinh_r4.F90' || echo '$(srcdir)/'`generated/_asinh_r4.F90\n+\n+_asinh_r8.lo: generated/_asinh_r8.F90\n+\t$(LIBTOOL) --mode=compile $(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS) -c -o _asinh_r8.lo `test -f 'generated/_asinh_r8.F90' || echo '$(srcdir)/'`generated/_asinh_r8.F90\n+\n+_asinh_r10.lo: generated/_asinh_r10.F90\n+\t$(LIBTOOL) --mode=compile $(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS) -c -o _asinh_r10.lo `test -f 'generated/_asinh_r10.F90' || echo '$(srcdir)/'`generated/_asinh_r10.F90\n+\n+_asinh_r16.lo: generated/_asinh_r16.F90\n+\t$(LIBTOOL) --mode=compile $(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS) -c -o _asinh_r16.lo `test -f 'generated/_asinh_r16.F90' || echo '$(srcdir)/'`generated/_asinh_r16.F90\n+\n _acos_r4.lo: generated/_acos_r4.F90\n \t$(LIBTOOL) --mode=compile $(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS) -c -o _acos_r4.lo `test -f 'generated/_acos_r4.F90' || echo '$(srcdir)/'`generated/_acos_r4.F90\n \n@@ -1191,6 +1239,18 @@ _acos_r10.lo: generated/_acos_r10.F90\n _acos_r16.lo: generated/_acos_r16.F90\n \t$(LIBTOOL) --mode=compile $(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS) -c -o _acos_r16.lo `test -f 'generated/_acos_r16.F90' || echo '$(srcdir)/'`generated/_acos_r16.F90\n \n+_acosh_r4.lo: generated/_acosh_r4.F90\n+\t$(LIBTOOL) --mode=compile $(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS) -c -o _acosh_r4.lo `test -f 'generated/_acosh_r4.F90' || echo '$(srcdir)/'`generated/_acosh_r4.F90\n+\n+_acosh_r8.lo: generated/_acosh_r8.F90\n+\t$(LIBTOOL) --mode=compile $(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS) -c -o _acosh_r8.lo `test -f 'generated/_acosh_r8.F90' || echo '$(srcdir)/'`generated/_acosh_r8.F90\n+\n+_acosh_r10.lo: generated/_acosh_r10.F90\n+\t$(LIBTOOL) --mode=compile $(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS) -c -o _acosh_r10.lo `test -f 'generated/_acosh_r10.F90' || echo '$(srcdir)/'`generated/_acosh_r10.F90\n+\n+_acosh_r16.lo: generated/_acosh_r16.F90\n+\t$(LIBTOOL) --mode=compile $(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS) -c -o _acosh_r16.lo `test -f 'generated/_acosh_r16.F90' || echo '$(srcdir)/'`generated/_acosh_r16.F90\n+\n _atan_r4.lo: generated/_atan_r4.F90\n \t$(LIBTOOL) --mode=compile $(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS) -c -o _atan_r4.lo `test -f 'generated/_atan_r4.F90' || echo '$(srcdir)/'`generated/_atan_r4.F90\n \n@@ -1203,6 +1263,18 @@ _atan_r10.lo: generated/_atan_r10.F90\n _atan_r16.lo: generated/_atan_r16.F90\n \t$(LIBTOOL) --mode=compile $(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS) -c -o _atan_r16.lo `test -f 'generated/_atan_r16.F90' || echo '$(srcdir)/'`generated/_atan_r16.F90\n \n+_atanh_r4.lo: generated/_atanh_r4.F90\n+\t$(LIBTOOL) --mode=compile $(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS) -c -o _atanh_r4.lo `test -f 'generated/_atanh_r4.F90' || echo '$(srcdir)/'`generated/_atanh_r4.F90\n+\n+_atanh_r8.lo: generated/_atanh_r8.F90\n+\t$(LIBTOOL) --mode=compile $(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS) -c -o _atanh_r8.lo `test -f 'generated/_atanh_r8.F90' || echo '$(srcdir)/'`generated/_atanh_r8.F90\n+\n+_atanh_r10.lo: generated/_atanh_r10.F90\n+\t$(LIBTOOL) --mode=compile $(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS) -c -o _atanh_r10.lo `test -f 'generated/_atanh_r10.F90' || echo '$(srcdir)/'`generated/_atanh_r10.F90\n+\n+_atanh_r16.lo: generated/_atanh_r16.F90\n+\t$(LIBTOOL) --mode=compile $(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS) -c -o _atanh_r16.lo `test -f 'generated/_atanh_r16.F90' || echo '$(srcdir)/'`generated/_atanh_r16.F90\n+\n _sin_r4.lo: generated/_sin_r4.F90\n \t$(LIBTOOL) --mode=compile $(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS) -c -o _sin_r4.lo `test -f 'generated/_sin_r4.F90' || echo '$(srcdir)/'`generated/_sin_r4.F90\n \n@@ -1410,6 +1482,9 @@ _mod_r10.lo: generated/_mod_r10.F90\n _mod_r16.lo: generated/_mod_r16.F90\n \t$(LIBTOOL) --mode=compile $(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS) -c -o _mod_r16.lo `test -f 'generated/_mod_r16.F90' || echo '$(srcdir)/'`generated/_mod_r16.F90\n \n+misc_specifics.lo: generated/misc_specifics.F90\n+\t$(LIBTOOL) --mode=compile $(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS) -c -o misc_specifics.lo `test -f 'generated/misc_specifics.F90' || echo '$(srcdir)/'`generated/misc_specifics.F90\n+\n f2c_specifics.lo: intrinsics/f2c_specifics.F90\n \t$(LIBTOOL) --mode=compile $(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS) -c -o f2c_specifics.lo `test -f 'intrinsics/f2c_specifics.F90' || echo '$(srcdir)/'`intrinsics/f2c_specifics.F90\n \n@@ -2844,6 +2919,9 @@ fpu-target.h: $(srcdir)/$(FPU_HOST_HEADER)\n \n @MAINTAINER_MODE_TRUE@$(gfor_built_specific2_src): m4/specific2.m4 m4/head.m4\n @MAINTAINER_MODE_TRUE@\t$(M4) -Dfile=$@ -I$(srcdir)/m4 specific2.m4 > $(srcdir)/$@\n+\n+@MAINTAINER_MODE_TRUE@$(gfor_misc_specifics): m4/misc_specifics.m4 m4/head.m4\n+@MAINTAINER_MODE_TRUE@\tm4 -Dfile=$@ -I$(srcdir)/m4 misc_specifics.m4 > $(srcdir)/$@\n # Tell versions [3.59,3.63) of GNU make to not export all variables.\n # Otherwise a system limit (for SysV at least) may be exceeded.\n .NOEXPORT:"}, {"sha": "07bc3327c56d7bbf9d6b47933c7f3313f3803d80", "filename": "libgfortran/generated/_acosh_r10.F90", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fgenerated%2F_acosh_r10.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fgenerated%2F_acosh_r10.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_acosh_r10.F90?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -0,0 +1,51 @@\n+!   Copyright 2002 Free Software Foundation, Inc.\n+!   Contributed by Paul Brook <paul@nowt.org>\n+!\n+!This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+!\n+!GNU libgfortran is free software; you can redistribute it and/or\n+!modify it under the terms of the GNU General Public\n+!License as published by the Free Software Foundation; either\n+!version 2 of the License, or (at your option) any later version.\n+\n+!In addition to the permissions in the GNU General Public License, the\n+!Free Software Foundation gives you unlimited permission to link the\n+!compiled version of this file into combinations with other programs,\n+!and to distribute those combinations without any restriction coming\n+!from the use of this file.  (The General Public License restrictions\n+!do apply in other respects; for example, they cover modification of\n+!the file, and distribution when not linked into a combine\n+!executable.)\n+!\n+!GNU libgfortran is distributed in the hope that it will be useful,\n+!but WITHOUT ANY WARRANTY; without even the implied warranty of\n+!MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+!GNU General Public License for more details.\n+!\n+!You should have received a copy of the GNU General Public\n+!License along with libgfortran; see the file COPYING.  If not,\n+!write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+!Boston, MA 02110-1301, USA.\n+!\n+!This file is machine generated.\n+\n+\n+\n+\n+\n+#include \"config.h\"\n+#include \"kinds.inc\"\n+#include \"c99_protos.inc\"\n+\n+#if defined (HAVE_GFC_REAL_10)\n+#ifdef HAVE_ACOSHL\n+\n+elemental function specific__acosh_r10 (parm)\n+   real (kind=10), intent (in) :: parm\n+   real (kind=10) :: specific__acosh_r10\n+\n+   specific__acosh_r10 = acosh (parm)\n+end function\n+\n+#endif\n+#endif"}, {"sha": "295a366f61cc5a946e69d42f2933a4c46852a46f", "filename": "libgfortran/generated/_acosh_r16.F90", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fgenerated%2F_acosh_r16.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fgenerated%2F_acosh_r16.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_acosh_r16.F90?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -0,0 +1,51 @@\n+!   Copyright 2002 Free Software Foundation, Inc.\n+!   Contributed by Paul Brook <paul@nowt.org>\n+!\n+!This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+!\n+!GNU libgfortran is free software; you can redistribute it and/or\n+!modify it under the terms of the GNU General Public\n+!License as published by the Free Software Foundation; either\n+!version 2 of the License, or (at your option) any later version.\n+\n+!In addition to the permissions in the GNU General Public License, the\n+!Free Software Foundation gives you unlimited permission to link the\n+!compiled version of this file into combinations with other programs,\n+!and to distribute those combinations without any restriction coming\n+!from the use of this file.  (The General Public License restrictions\n+!do apply in other respects; for example, they cover modification of\n+!the file, and distribution when not linked into a combine\n+!executable.)\n+!\n+!GNU libgfortran is distributed in the hope that it will be useful,\n+!but WITHOUT ANY WARRANTY; without even the implied warranty of\n+!MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+!GNU General Public License for more details.\n+!\n+!You should have received a copy of the GNU General Public\n+!License along with libgfortran; see the file COPYING.  If not,\n+!write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+!Boston, MA 02110-1301, USA.\n+!\n+!This file is machine generated.\n+\n+\n+\n+\n+\n+#include \"config.h\"\n+#include \"kinds.inc\"\n+#include \"c99_protos.inc\"\n+\n+#if defined (HAVE_GFC_REAL_16)\n+#ifdef HAVE_ACOSHL\n+\n+elemental function specific__acosh_r16 (parm)\n+   real (kind=16), intent (in) :: parm\n+   real (kind=16) :: specific__acosh_r16\n+\n+   specific__acosh_r16 = acosh (parm)\n+end function\n+\n+#endif\n+#endif"}, {"sha": "717ce409e12de936b3d5362590ec1107bc1cecdb", "filename": "libgfortran/generated/_acosh_r4.F90", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fgenerated%2F_acosh_r4.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fgenerated%2F_acosh_r4.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_acosh_r4.F90?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -0,0 +1,51 @@\n+!   Copyright 2002 Free Software Foundation, Inc.\n+!   Contributed by Paul Brook <paul@nowt.org>\n+!\n+!This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+!\n+!GNU libgfortran is free software; you can redistribute it and/or\n+!modify it under the terms of the GNU General Public\n+!License as published by the Free Software Foundation; either\n+!version 2 of the License, or (at your option) any later version.\n+\n+!In addition to the permissions in the GNU General Public License, the\n+!Free Software Foundation gives you unlimited permission to link the\n+!compiled version of this file into combinations with other programs,\n+!and to distribute those combinations without any restriction coming\n+!from the use of this file.  (The General Public License restrictions\n+!do apply in other respects; for example, they cover modification of\n+!the file, and distribution when not linked into a combine\n+!executable.)\n+!\n+!GNU libgfortran is distributed in the hope that it will be useful,\n+!but WITHOUT ANY WARRANTY; without even the implied warranty of\n+!MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+!GNU General Public License for more details.\n+!\n+!You should have received a copy of the GNU General Public\n+!License along with libgfortran; see the file COPYING.  If not,\n+!write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+!Boston, MA 02110-1301, USA.\n+!\n+!This file is machine generated.\n+\n+\n+\n+\n+\n+#include \"config.h\"\n+#include \"kinds.inc\"\n+#include \"c99_protos.inc\"\n+\n+#if defined (HAVE_GFC_REAL_4)\n+#ifdef HAVE_ACOSHF\n+\n+elemental function specific__acosh_r4 (parm)\n+   real (kind=4), intent (in) :: parm\n+   real (kind=4) :: specific__acosh_r4\n+\n+   specific__acosh_r4 = acosh (parm)\n+end function\n+\n+#endif\n+#endif"}, {"sha": "d03c73ba246cf2b4704feffe91fff709c2460941", "filename": "libgfortran/generated/_acosh_r8.F90", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fgenerated%2F_acosh_r8.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fgenerated%2F_acosh_r8.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_acosh_r8.F90?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -0,0 +1,51 @@\n+!   Copyright 2002 Free Software Foundation, Inc.\n+!   Contributed by Paul Brook <paul@nowt.org>\n+!\n+!This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+!\n+!GNU libgfortran is free software; you can redistribute it and/or\n+!modify it under the terms of the GNU General Public\n+!License as published by the Free Software Foundation; either\n+!version 2 of the License, or (at your option) any later version.\n+\n+!In addition to the permissions in the GNU General Public License, the\n+!Free Software Foundation gives you unlimited permission to link the\n+!compiled version of this file into combinations with other programs,\n+!and to distribute those combinations without any restriction coming\n+!from the use of this file.  (The General Public License restrictions\n+!do apply in other respects; for example, they cover modification of\n+!the file, and distribution when not linked into a combine\n+!executable.)\n+!\n+!GNU libgfortran is distributed in the hope that it will be useful,\n+!but WITHOUT ANY WARRANTY; without even the implied warranty of\n+!MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+!GNU General Public License for more details.\n+!\n+!You should have received a copy of the GNU General Public\n+!License along with libgfortran; see the file COPYING.  If not,\n+!write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+!Boston, MA 02110-1301, USA.\n+!\n+!This file is machine generated.\n+\n+\n+\n+\n+\n+#include \"config.h\"\n+#include \"kinds.inc\"\n+#include \"c99_protos.inc\"\n+\n+#if defined (HAVE_GFC_REAL_8)\n+#ifdef HAVE_ACOSH\n+\n+elemental function specific__acosh_r8 (parm)\n+   real (kind=8), intent (in) :: parm\n+   real (kind=8) :: specific__acosh_r8\n+\n+   specific__acosh_r8 = acosh (parm)\n+end function\n+\n+#endif\n+#endif"}, {"sha": "d6a6f0b863150580e19f5a42f08416c64102c16a", "filename": "libgfortran/generated/_aimag_c10.F90", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fgenerated%2F_aimag_c10.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fgenerated%2F_aimag_c10.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_aimag_c10.F90?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -0,0 +1,51 @@\n+!   Copyright 2002 Free Software Foundation, Inc.\n+!   Contributed by Paul Brook <paul@nowt.org>\n+!\n+!This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+!\n+!GNU libgfortran is free software; you can redistribute it and/or\n+!modify it under the terms of the GNU General Public\n+!License as published by the Free Software Foundation; either\n+!version 2 of the License, or (at your option) any later version.\n+\n+!In addition to the permissions in the GNU General Public License, the\n+!Free Software Foundation gives you unlimited permission to link the\n+!compiled version of this file into combinations with other programs,\n+!and to distribute those combinations without any restriction coming\n+!from the use of this file.  (The General Public License restrictions\n+!do apply in other respects; for example, they cover modification of\n+!the file, and distribution when not linked into a combine\n+!executable.)\n+!\n+!GNU libgfortran is distributed in the hope that it will be useful,\n+!but WITHOUT ANY WARRANTY; without even the implied warranty of\n+!MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+!GNU General Public License for more details.\n+!\n+!You should have received a copy of the GNU General Public\n+!License along with libgfortran; see the file COPYING.  If not,\n+!write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+!Boston, MA 02110-1301, USA.\n+!\n+!This file is machine generated.\n+\n+\n+\n+\n+\n+#include \"config.h\"\n+#include \"kinds.inc\"\n+#include \"c99_protos.inc\"\n+\n+#if defined (HAVE_GFC_COMPLEX_10)\n+\n+\n+elemental function specific__aimag_c10 (parm)\n+   complex (kind=10), intent (in) :: parm\n+   real (kind=10) :: specific__aimag_c10\n+\n+   specific__aimag_c10 = aimag (parm)\n+end function\n+\n+\n+#endif"}, {"sha": "717f820eb6bb8286b7f34ab17165cdd27ac4eac6", "filename": "libgfortran/generated/_aimag_c16.F90", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fgenerated%2F_aimag_c16.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fgenerated%2F_aimag_c16.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_aimag_c16.F90?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -0,0 +1,51 @@\n+!   Copyright 2002 Free Software Foundation, Inc.\n+!   Contributed by Paul Brook <paul@nowt.org>\n+!\n+!This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+!\n+!GNU libgfortran is free software; you can redistribute it and/or\n+!modify it under the terms of the GNU General Public\n+!License as published by the Free Software Foundation; either\n+!version 2 of the License, or (at your option) any later version.\n+\n+!In addition to the permissions in the GNU General Public License, the\n+!Free Software Foundation gives you unlimited permission to link the\n+!compiled version of this file into combinations with other programs,\n+!and to distribute those combinations without any restriction coming\n+!from the use of this file.  (The General Public License restrictions\n+!do apply in other respects; for example, they cover modification of\n+!the file, and distribution when not linked into a combine\n+!executable.)\n+!\n+!GNU libgfortran is distributed in the hope that it will be useful,\n+!but WITHOUT ANY WARRANTY; without even the implied warranty of\n+!MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+!GNU General Public License for more details.\n+!\n+!You should have received a copy of the GNU General Public\n+!License along with libgfortran; see the file COPYING.  If not,\n+!write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+!Boston, MA 02110-1301, USA.\n+!\n+!This file is machine generated.\n+\n+\n+\n+\n+\n+#include \"config.h\"\n+#include \"kinds.inc\"\n+#include \"c99_protos.inc\"\n+\n+#if defined (HAVE_GFC_COMPLEX_16)\n+\n+\n+elemental function specific__aimag_c16 (parm)\n+   complex (kind=16), intent (in) :: parm\n+   real (kind=16) :: specific__aimag_c16\n+\n+   specific__aimag_c16 = aimag (parm)\n+end function\n+\n+\n+#endif"}, {"sha": "241e7b97c151149faf4356d97ad1ec4186f6942e", "filename": "libgfortran/generated/_aimag_c4.F90", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fgenerated%2F_aimag_c4.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fgenerated%2F_aimag_c4.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_aimag_c4.F90?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -0,0 +1,51 @@\n+!   Copyright 2002 Free Software Foundation, Inc.\n+!   Contributed by Paul Brook <paul@nowt.org>\n+!\n+!This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+!\n+!GNU libgfortran is free software; you can redistribute it and/or\n+!modify it under the terms of the GNU General Public\n+!License as published by the Free Software Foundation; either\n+!version 2 of the License, or (at your option) any later version.\n+\n+!In addition to the permissions in the GNU General Public License, the\n+!Free Software Foundation gives you unlimited permission to link the\n+!compiled version of this file into combinations with other programs,\n+!and to distribute those combinations without any restriction coming\n+!from the use of this file.  (The General Public License restrictions\n+!do apply in other respects; for example, they cover modification of\n+!the file, and distribution when not linked into a combine\n+!executable.)\n+!\n+!GNU libgfortran is distributed in the hope that it will be useful,\n+!but WITHOUT ANY WARRANTY; without even the implied warranty of\n+!MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+!GNU General Public License for more details.\n+!\n+!You should have received a copy of the GNU General Public\n+!License along with libgfortran; see the file COPYING.  If not,\n+!write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+!Boston, MA 02110-1301, USA.\n+!\n+!This file is machine generated.\n+\n+\n+\n+\n+\n+#include \"config.h\"\n+#include \"kinds.inc\"\n+#include \"c99_protos.inc\"\n+\n+#if defined (HAVE_GFC_COMPLEX_4)\n+\n+\n+elemental function specific__aimag_c4 (parm)\n+   complex (kind=4), intent (in) :: parm\n+   real (kind=4) :: specific__aimag_c4\n+\n+   specific__aimag_c4 = aimag (parm)\n+end function\n+\n+\n+#endif"}, {"sha": "76ad7e982cac5da5e3cd1549623cab63c7c8a001", "filename": "libgfortran/generated/_aimag_c8.F90", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fgenerated%2F_aimag_c8.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fgenerated%2F_aimag_c8.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_aimag_c8.F90?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -0,0 +1,51 @@\n+!   Copyright 2002 Free Software Foundation, Inc.\n+!   Contributed by Paul Brook <paul@nowt.org>\n+!\n+!This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+!\n+!GNU libgfortran is free software; you can redistribute it and/or\n+!modify it under the terms of the GNU General Public\n+!License as published by the Free Software Foundation; either\n+!version 2 of the License, or (at your option) any later version.\n+\n+!In addition to the permissions in the GNU General Public License, the\n+!Free Software Foundation gives you unlimited permission to link the\n+!compiled version of this file into combinations with other programs,\n+!and to distribute those combinations without any restriction coming\n+!from the use of this file.  (The General Public License restrictions\n+!do apply in other respects; for example, they cover modification of\n+!the file, and distribution when not linked into a combine\n+!executable.)\n+!\n+!GNU libgfortran is distributed in the hope that it will be useful,\n+!but WITHOUT ANY WARRANTY; without even the implied warranty of\n+!MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+!GNU General Public License for more details.\n+!\n+!You should have received a copy of the GNU General Public\n+!License along with libgfortran; see the file COPYING.  If not,\n+!write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+!Boston, MA 02110-1301, USA.\n+!\n+!This file is machine generated.\n+\n+\n+\n+\n+\n+#include \"config.h\"\n+#include \"kinds.inc\"\n+#include \"c99_protos.inc\"\n+\n+#if defined (HAVE_GFC_COMPLEX_8)\n+\n+\n+elemental function specific__aimag_c8 (parm)\n+   complex (kind=8), intent (in) :: parm\n+   real (kind=8) :: specific__aimag_c8\n+\n+   specific__aimag_c8 = aimag (parm)\n+end function\n+\n+\n+#endif"}, {"sha": "c6a791b661cdc2ceaf6e6a40af58ff0872eb57a6", "filename": "libgfortran/generated/_asinh_r10.F90", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fgenerated%2F_asinh_r10.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fgenerated%2F_asinh_r10.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_asinh_r10.F90?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -0,0 +1,51 @@\n+!   Copyright 2002 Free Software Foundation, Inc.\n+!   Contributed by Paul Brook <paul@nowt.org>\n+!\n+!This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+!\n+!GNU libgfortran is free software; you can redistribute it and/or\n+!modify it under the terms of the GNU General Public\n+!License as published by the Free Software Foundation; either\n+!version 2 of the License, or (at your option) any later version.\n+\n+!In addition to the permissions in the GNU General Public License, the\n+!Free Software Foundation gives you unlimited permission to link the\n+!compiled version of this file into combinations with other programs,\n+!and to distribute those combinations without any restriction coming\n+!from the use of this file.  (The General Public License restrictions\n+!do apply in other respects; for example, they cover modification of\n+!the file, and distribution when not linked into a combine\n+!executable.)\n+!\n+!GNU libgfortran is distributed in the hope that it will be useful,\n+!but WITHOUT ANY WARRANTY; without even the implied warranty of\n+!MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+!GNU General Public License for more details.\n+!\n+!You should have received a copy of the GNU General Public\n+!License along with libgfortran; see the file COPYING.  If not,\n+!write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+!Boston, MA 02110-1301, USA.\n+!\n+!This file is machine generated.\n+\n+\n+\n+\n+\n+#include \"config.h\"\n+#include \"kinds.inc\"\n+#include \"c99_protos.inc\"\n+\n+#if defined (HAVE_GFC_REAL_10)\n+#ifdef HAVE_ASINHL\n+\n+elemental function specific__asinh_r10 (parm)\n+   real (kind=10), intent (in) :: parm\n+   real (kind=10) :: specific__asinh_r10\n+\n+   specific__asinh_r10 = asinh (parm)\n+end function\n+\n+#endif\n+#endif"}, {"sha": "3b2a28b8ab321b168cd234853cf0633d4cc3c057", "filename": "libgfortran/generated/_asinh_r16.F90", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fgenerated%2F_asinh_r16.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fgenerated%2F_asinh_r16.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_asinh_r16.F90?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -0,0 +1,51 @@\n+!   Copyright 2002 Free Software Foundation, Inc.\n+!   Contributed by Paul Brook <paul@nowt.org>\n+!\n+!This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+!\n+!GNU libgfortran is free software; you can redistribute it and/or\n+!modify it under the terms of the GNU General Public\n+!License as published by the Free Software Foundation; either\n+!version 2 of the License, or (at your option) any later version.\n+\n+!In addition to the permissions in the GNU General Public License, the\n+!Free Software Foundation gives you unlimited permission to link the\n+!compiled version of this file into combinations with other programs,\n+!and to distribute those combinations without any restriction coming\n+!from the use of this file.  (The General Public License restrictions\n+!do apply in other respects; for example, they cover modification of\n+!the file, and distribution when not linked into a combine\n+!executable.)\n+!\n+!GNU libgfortran is distributed in the hope that it will be useful,\n+!but WITHOUT ANY WARRANTY; without even the implied warranty of\n+!MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+!GNU General Public License for more details.\n+!\n+!You should have received a copy of the GNU General Public\n+!License along with libgfortran; see the file COPYING.  If not,\n+!write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+!Boston, MA 02110-1301, USA.\n+!\n+!This file is machine generated.\n+\n+\n+\n+\n+\n+#include \"config.h\"\n+#include \"kinds.inc\"\n+#include \"c99_protos.inc\"\n+\n+#if defined (HAVE_GFC_REAL_16)\n+#ifdef HAVE_ASINHL\n+\n+elemental function specific__asinh_r16 (parm)\n+   real (kind=16), intent (in) :: parm\n+   real (kind=16) :: specific__asinh_r16\n+\n+   specific__asinh_r16 = asinh (parm)\n+end function\n+\n+#endif\n+#endif"}, {"sha": "de47515bf4642c2e8839468f191c4e25980873eb", "filename": "libgfortran/generated/_asinh_r4.F90", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fgenerated%2F_asinh_r4.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fgenerated%2F_asinh_r4.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_asinh_r4.F90?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -0,0 +1,51 @@\n+!   Copyright 2002 Free Software Foundation, Inc.\n+!   Contributed by Paul Brook <paul@nowt.org>\n+!\n+!This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+!\n+!GNU libgfortran is free software; you can redistribute it and/or\n+!modify it under the terms of the GNU General Public\n+!License as published by the Free Software Foundation; either\n+!version 2 of the License, or (at your option) any later version.\n+\n+!In addition to the permissions in the GNU General Public License, the\n+!Free Software Foundation gives you unlimited permission to link the\n+!compiled version of this file into combinations with other programs,\n+!and to distribute those combinations without any restriction coming\n+!from the use of this file.  (The General Public License restrictions\n+!do apply in other respects; for example, they cover modification of\n+!the file, and distribution when not linked into a combine\n+!executable.)\n+!\n+!GNU libgfortran is distributed in the hope that it will be useful,\n+!but WITHOUT ANY WARRANTY; without even the implied warranty of\n+!MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+!GNU General Public License for more details.\n+!\n+!You should have received a copy of the GNU General Public\n+!License along with libgfortran; see the file COPYING.  If not,\n+!write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+!Boston, MA 02110-1301, USA.\n+!\n+!This file is machine generated.\n+\n+\n+\n+\n+\n+#include \"config.h\"\n+#include \"kinds.inc\"\n+#include \"c99_protos.inc\"\n+\n+#if defined (HAVE_GFC_REAL_4)\n+#ifdef HAVE_ASINHF\n+\n+elemental function specific__asinh_r4 (parm)\n+   real (kind=4), intent (in) :: parm\n+   real (kind=4) :: specific__asinh_r4\n+\n+   specific__asinh_r4 = asinh (parm)\n+end function\n+\n+#endif\n+#endif"}, {"sha": "0a6d0bdda4a5b1cdb1360b7b66ef9110d73a633a", "filename": "libgfortran/generated/_asinh_r8.F90", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fgenerated%2F_asinh_r8.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fgenerated%2F_asinh_r8.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_asinh_r8.F90?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -0,0 +1,51 @@\n+!   Copyright 2002 Free Software Foundation, Inc.\n+!   Contributed by Paul Brook <paul@nowt.org>\n+!\n+!This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+!\n+!GNU libgfortran is free software; you can redistribute it and/or\n+!modify it under the terms of the GNU General Public\n+!License as published by the Free Software Foundation; either\n+!version 2 of the License, or (at your option) any later version.\n+\n+!In addition to the permissions in the GNU General Public License, the\n+!Free Software Foundation gives you unlimited permission to link the\n+!compiled version of this file into combinations with other programs,\n+!and to distribute those combinations without any restriction coming\n+!from the use of this file.  (The General Public License restrictions\n+!do apply in other respects; for example, they cover modification of\n+!the file, and distribution when not linked into a combine\n+!executable.)\n+!\n+!GNU libgfortran is distributed in the hope that it will be useful,\n+!but WITHOUT ANY WARRANTY; without even the implied warranty of\n+!MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+!GNU General Public License for more details.\n+!\n+!You should have received a copy of the GNU General Public\n+!License along with libgfortran; see the file COPYING.  If not,\n+!write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+!Boston, MA 02110-1301, USA.\n+!\n+!This file is machine generated.\n+\n+\n+\n+\n+\n+#include \"config.h\"\n+#include \"kinds.inc\"\n+#include \"c99_protos.inc\"\n+\n+#if defined (HAVE_GFC_REAL_8)\n+#ifdef HAVE_ASINH\n+\n+elemental function specific__asinh_r8 (parm)\n+   real (kind=8), intent (in) :: parm\n+   real (kind=8) :: specific__asinh_r8\n+\n+   specific__asinh_r8 = asinh (parm)\n+end function\n+\n+#endif\n+#endif"}, {"sha": "75cdf993e647e6d765132e2d61c6d81886bf2e9a", "filename": "libgfortran/generated/_atanh_r10.F90", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fgenerated%2F_atanh_r10.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fgenerated%2F_atanh_r10.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_atanh_r10.F90?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -0,0 +1,51 @@\n+!   Copyright 2002 Free Software Foundation, Inc.\n+!   Contributed by Paul Brook <paul@nowt.org>\n+!\n+!This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+!\n+!GNU libgfortran is free software; you can redistribute it and/or\n+!modify it under the terms of the GNU General Public\n+!License as published by the Free Software Foundation; either\n+!version 2 of the License, or (at your option) any later version.\n+\n+!In addition to the permissions in the GNU General Public License, the\n+!Free Software Foundation gives you unlimited permission to link the\n+!compiled version of this file into combinations with other programs,\n+!and to distribute those combinations without any restriction coming\n+!from the use of this file.  (The General Public License restrictions\n+!do apply in other respects; for example, they cover modification of\n+!the file, and distribution when not linked into a combine\n+!executable.)\n+!\n+!GNU libgfortran is distributed in the hope that it will be useful,\n+!but WITHOUT ANY WARRANTY; without even the implied warranty of\n+!MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+!GNU General Public License for more details.\n+!\n+!You should have received a copy of the GNU General Public\n+!License along with libgfortran; see the file COPYING.  If not,\n+!write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+!Boston, MA 02110-1301, USA.\n+!\n+!This file is machine generated.\n+\n+\n+\n+\n+\n+#include \"config.h\"\n+#include \"kinds.inc\"\n+#include \"c99_protos.inc\"\n+\n+#if defined (HAVE_GFC_REAL_10)\n+#ifdef HAVE_ATANHL\n+\n+elemental function specific__atanh_r10 (parm)\n+   real (kind=10), intent (in) :: parm\n+   real (kind=10) :: specific__atanh_r10\n+\n+   specific__atanh_r10 = atanh (parm)\n+end function\n+\n+#endif\n+#endif"}, {"sha": "bc6e71cb311cc62ef115dfc4a74565158fd40ae9", "filename": "libgfortran/generated/_atanh_r16.F90", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fgenerated%2F_atanh_r16.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fgenerated%2F_atanh_r16.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_atanh_r16.F90?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -0,0 +1,51 @@\n+!   Copyright 2002 Free Software Foundation, Inc.\n+!   Contributed by Paul Brook <paul@nowt.org>\n+!\n+!This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+!\n+!GNU libgfortran is free software; you can redistribute it and/or\n+!modify it under the terms of the GNU General Public\n+!License as published by the Free Software Foundation; either\n+!version 2 of the License, or (at your option) any later version.\n+\n+!In addition to the permissions in the GNU General Public License, the\n+!Free Software Foundation gives you unlimited permission to link the\n+!compiled version of this file into combinations with other programs,\n+!and to distribute those combinations without any restriction coming\n+!from the use of this file.  (The General Public License restrictions\n+!do apply in other respects; for example, they cover modification of\n+!the file, and distribution when not linked into a combine\n+!executable.)\n+!\n+!GNU libgfortran is distributed in the hope that it will be useful,\n+!but WITHOUT ANY WARRANTY; without even the implied warranty of\n+!MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+!GNU General Public License for more details.\n+!\n+!You should have received a copy of the GNU General Public\n+!License along with libgfortran; see the file COPYING.  If not,\n+!write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+!Boston, MA 02110-1301, USA.\n+!\n+!This file is machine generated.\n+\n+\n+\n+\n+\n+#include \"config.h\"\n+#include \"kinds.inc\"\n+#include \"c99_protos.inc\"\n+\n+#if defined (HAVE_GFC_REAL_16)\n+#ifdef HAVE_ATANHL\n+\n+elemental function specific__atanh_r16 (parm)\n+   real (kind=16), intent (in) :: parm\n+   real (kind=16) :: specific__atanh_r16\n+\n+   specific__atanh_r16 = atanh (parm)\n+end function\n+\n+#endif\n+#endif"}, {"sha": "edbd4198ef04326f3ab14108bdbcde5f079d36cf", "filename": "libgfortran/generated/_atanh_r4.F90", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fgenerated%2F_atanh_r4.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fgenerated%2F_atanh_r4.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_atanh_r4.F90?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -0,0 +1,51 @@\n+!   Copyright 2002 Free Software Foundation, Inc.\n+!   Contributed by Paul Brook <paul@nowt.org>\n+!\n+!This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+!\n+!GNU libgfortran is free software; you can redistribute it and/or\n+!modify it under the terms of the GNU General Public\n+!License as published by the Free Software Foundation; either\n+!version 2 of the License, or (at your option) any later version.\n+\n+!In addition to the permissions in the GNU General Public License, the\n+!Free Software Foundation gives you unlimited permission to link the\n+!compiled version of this file into combinations with other programs,\n+!and to distribute those combinations without any restriction coming\n+!from the use of this file.  (The General Public License restrictions\n+!do apply in other respects; for example, they cover modification of\n+!the file, and distribution when not linked into a combine\n+!executable.)\n+!\n+!GNU libgfortran is distributed in the hope that it will be useful,\n+!but WITHOUT ANY WARRANTY; without even the implied warranty of\n+!MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+!GNU General Public License for more details.\n+!\n+!You should have received a copy of the GNU General Public\n+!License along with libgfortran; see the file COPYING.  If not,\n+!write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+!Boston, MA 02110-1301, USA.\n+!\n+!This file is machine generated.\n+\n+\n+\n+\n+\n+#include \"config.h\"\n+#include \"kinds.inc\"\n+#include \"c99_protos.inc\"\n+\n+#if defined (HAVE_GFC_REAL_4)\n+#ifdef HAVE_ATANHF\n+\n+elemental function specific__atanh_r4 (parm)\n+   real (kind=4), intent (in) :: parm\n+   real (kind=4) :: specific__atanh_r4\n+\n+   specific__atanh_r4 = atanh (parm)\n+end function\n+\n+#endif\n+#endif"}, {"sha": "05dd808ff4b36666496d60ae750aa8f22fc72e6d", "filename": "libgfortran/generated/_atanh_r8.F90", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fgenerated%2F_atanh_r8.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fgenerated%2F_atanh_r8.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_atanh_r8.F90?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -0,0 +1,51 @@\n+!   Copyright 2002 Free Software Foundation, Inc.\n+!   Contributed by Paul Brook <paul@nowt.org>\n+!\n+!This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+!\n+!GNU libgfortran is free software; you can redistribute it and/or\n+!modify it under the terms of the GNU General Public\n+!License as published by the Free Software Foundation; either\n+!version 2 of the License, or (at your option) any later version.\n+\n+!In addition to the permissions in the GNU General Public License, the\n+!Free Software Foundation gives you unlimited permission to link the\n+!compiled version of this file into combinations with other programs,\n+!and to distribute those combinations without any restriction coming\n+!from the use of this file.  (The General Public License restrictions\n+!do apply in other respects; for example, they cover modification of\n+!the file, and distribution when not linked into a combine\n+!executable.)\n+!\n+!GNU libgfortran is distributed in the hope that it will be useful,\n+!but WITHOUT ANY WARRANTY; without even the implied warranty of\n+!MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+!GNU General Public License for more details.\n+!\n+!You should have received a copy of the GNU General Public\n+!License along with libgfortran; see the file COPYING.  If not,\n+!write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+!Boston, MA 02110-1301, USA.\n+!\n+!This file is machine generated.\n+\n+\n+\n+\n+\n+#include \"config.h\"\n+#include \"kinds.inc\"\n+#include \"c99_protos.inc\"\n+\n+#if defined (HAVE_GFC_REAL_8)\n+#ifdef HAVE_ATANH\n+\n+elemental function specific__atanh_r8 (parm)\n+   real (kind=8), intent (in) :: parm\n+   real (kind=8) :: specific__atanh_r8\n+\n+   specific__atanh_r8 = atanh (parm)\n+end function\n+\n+#endif\n+#endif"}, {"sha": "a3b103b924a1f038f0ad9121ef04013da8df1ee9", "filename": "libgfortran/generated/misc_specifics.F90", "status": "added", "additions": 211, "deletions": 0, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fgenerated%2Fmisc_specifics.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fgenerated%2Fmisc_specifics.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmisc_specifics.F90?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -0,0 +1,211 @@\n+!   Copyright 2002 Free Software Foundation, Inc.\n+!   Contributed by Paul Brook <paul@nowt.org>\n+!\n+!This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+!\n+!GNU libgfortran is free software; you can redistribute it and/or\n+!modify it under the terms of the GNU General Public\n+!License as published by the Free Software Foundation; either\n+!version 2 of the License, or (at your option) any later version.\n+\n+!In addition to the permissions in the GNU General Public License, the\n+!Free Software Foundation gives you unlimited permission to link the\n+!compiled version of this file into combinations with other programs,\n+!and to distribute those combinations without any restriction coming\n+!from the use of this file.  (The General Public License restrictions\n+!do apply in other respects; for example, they cover modification of\n+!the file, and distribution when not linked into a combine\n+!executable.)\n+!\n+!GNU libgfortran is distributed in the hope that it will be useful,\n+!but WITHOUT ANY WARRANTY; without even the implied warranty of\n+!MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+!GNU General Public License for more details.\n+!\n+!You should have received a copy of the GNU General Public\n+!License along with libgfortran; see the file COPYING.  If not,\n+!write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+!Boston, MA 02110-1301, USA.\n+!\n+!This file is machine generated.\n+\n+#include \"config.h\"\n+#include \"kinds.inc\"\n+\n+\n+\n+\n+#if defined (HAVE_GFC_REAL_4) && defined (HAVE_GFC_INTEGER_4)\n+elemental function specific__nint_4_4 (parm)\n+   real (kind=4) , intent (in) :: parm\n+   integer (kind=4) :: specific__nint_4_4\n+   specific__nint_4_4 = nint (parm)\n+end function\n+#endif\n+\n+#if defined (HAVE_GFC_REAL_8) && defined (HAVE_GFC_INTEGER_4)\n+elemental function specific__nint_4_8 (parm)\n+   real (kind=8) , intent (in) :: parm\n+   integer (kind=4) :: specific__nint_4_8\n+   specific__nint_4_8 = nint (parm)\n+end function\n+#endif\n+\n+#if defined (HAVE_GFC_REAL_10) && defined (HAVE_GFC_INTEGER_4)\n+elemental function specific__nint_4_10 (parm)\n+   real (kind=10) , intent (in) :: parm\n+   integer (kind=4) :: specific__nint_4_10\n+   specific__nint_4_10 = nint (parm)\n+end function\n+#endif\n+\n+#if defined (HAVE_GFC_REAL_16) && defined (HAVE_GFC_INTEGER_4)\n+elemental function specific__nint_4_16 (parm)\n+   real (kind=16) , intent (in) :: parm\n+   integer (kind=4) :: specific__nint_4_16\n+   specific__nint_4_16 = nint (parm)\n+end function\n+#endif\n+\n+#if defined (HAVE_GFC_REAL_4) && defined (HAVE_GFC_INTEGER_8)\n+elemental function specific__nint_8_4 (parm)\n+   real (kind=4) , intent (in) :: parm\n+   integer (kind=8) :: specific__nint_8_4\n+   specific__nint_8_4 = nint (parm)\n+end function\n+#endif\n+\n+#if defined (HAVE_GFC_REAL_8) && defined (HAVE_GFC_INTEGER_8)\n+elemental function specific__nint_8_8 (parm)\n+   real (kind=8) , intent (in) :: parm\n+   integer (kind=8) :: specific__nint_8_8\n+   specific__nint_8_8 = nint (parm)\n+end function\n+#endif\n+\n+#if defined (HAVE_GFC_REAL_10) && defined (HAVE_GFC_INTEGER_8)\n+elemental function specific__nint_8_10 (parm)\n+   real (kind=10) , intent (in) :: parm\n+   integer (kind=8) :: specific__nint_8_10\n+   specific__nint_8_10 = nint (parm)\n+end function\n+#endif\n+\n+#if defined (HAVE_GFC_REAL_16) && defined (HAVE_GFC_INTEGER_8)\n+elemental function specific__nint_8_16 (parm)\n+   real (kind=16) , intent (in) :: parm\n+   integer (kind=8) :: specific__nint_8_16\n+   specific__nint_8_16 = nint (parm)\n+end function\n+#endif\n+\n+#if defined (HAVE_GFC_REAL_4) && defined (HAVE_GFC_INTEGER_16)\n+elemental function specific__nint_16_4 (parm)\n+   real (kind=4) , intent (in) :: parm\n+   integer (kind=16) :: specific__nint_16_4\n+   specific__nint_16_4 = nint (parm)\n+end function\n+#endif\n+\n+#if defined (HAVE_GFC_REAL_8) && defined (HAVE_GFC_INTEGER_16)\n+elemental function specific__nint_16_8 (parm)\n+   real (kind=8) , intent (in) :: parm\n+   integer (kind=16) :: specific__nint_16_8\n+   specific__nint_16_8 = nint (parm)\n+end function\n+#endif\n+\n+#if defined (HAVE_GFC_REAL_10) && defined (HAVE_GFC_INTEGER_16)\n+elemental function specific__nint_16_10 (parm)\n+   real (kind=10) , intent (in) :: parm\n+   integer (kind=16) :: specific__nint_16_10\n+   specific__nint_16_10 = nint (parm)\n+end function\n+#endif\n+\n+#if defined (HAVE_GFC_REAL_16) && defined (HAVE_GFC_INTEGER_16)\n+elemental function specific__nint_16_16 (parm)\n+   real (kind=16) , intent (in) :: parm\n+   integer (kind=16) :: specific__nint_16_16\n+   specific__nint_16_16 = nint (parm)\n+end function\n+#endif\n+\n+\n+\n+#if defined (HAVE_GFC_INTEGER_4)\n+elemental function specific__char_1_i4 (parm)\n+   integer (kind=4) , intent (in) :: parm\n+   character (kind=1,len=1) :: specific__char_1_i4\n+   specific__char_1_i4 = char (parm, kind=1)\n+end function\n+#endif\n+\n+#if defined (HAVE_GFC_INTEGER_8)\n+elemental function specific__char_1_i8 (parm)\n+   integer (kind=8) , intent (in) :: parm\n+   character (kind=1,len=1) :: specific__char_1_i8\n+   specific__char_1_i8 = char (parm, kind=1)\n+end function\n+#endif\n+\n+#if defined (HAVE_GFC_INTEGER_16)\n+elemental function specific__char_1_i16 (parm)\n+   integer (kind=16) , intent (in) :: parm\n+   character (kind=1,len=1) :: specific__char_1_i16\n+   specific__char_1_i16 = char (parm, kind=1)\n+end function\n+#endif\n+\n+\n+\n+#if defined (HAVE_GFC_INTEGER_4)\n+elemental function specific__len_1_i4 (parm)\n+   character (kind=1,len=*) , intent (in) :: parm\n+   integer (kind=4) :: specific__len_1_i4\n+   specific__len_1_i4 = len (parm)\n+end function\n+#endif\n+\n+#if defined (HAVE_GFC_INTEGER_8)\n+elemental function specific__len_1_i8 (parm)\n+   character (kind=1,len=*) , intent (in) :: parm\n+   integer (kind=8) :: specific__len_1_i8\n+   specific__len_1_i8 = len (parm)\n+end function\n+#endif\n+\n+#if defined (HAVE_GFC_INTEGER_16)\n+elemental function specific__len_1_i16 (parm)\n+   character (kind=1,len=*) , intent (in) :: parm\n+   integer (kind=16) :: specific__len_1_i16\n+   specific__len_1_i16 = len (parm)\n+end function\n+#endif\n+\n+\n+\n+#if defined (HAVE_GFC_INTEGER_4)\n+elemental function specific__index_1_i4 (parm1, parm2)\n+   character (kind=1,len=*) , intent (in) :: parm1, parm2\n+   integer (kind=4) :: specific__index_1_i4\n+   specific__index_1_i4 = index (parm1, parm2)\n+end function\n+#endif\n+\n+#if defined (HAVE_GFC_INTEGER_8)\n+elemental function specific__index_1_i8 (parm1, parm2)\n+   character (kind=1,len=*) , intent (in) :: parm1, parm2\n+   integer (kind=8) :: specific__index_1_i8\n+   specific__index_1_i8 = index (parm1, parm2)\n+end function\n+#endif\n+\n+#if defined (HAVE_GFC_INTEGER_16)\n+elemental function specific__index_1_i16 (parm1, parm2)\n+   character (kind=1,len=*) , intent (in) :: parm1, parm2\n+   integer (kind=16) :: specific__index_1_i16\n+   specific__index_1_i16 = index (parm1, parm2)\n+end function\n+#endif\n+"}, {"sha": "c3f906d6348bc997b20f561615dfbde276ef22a1", "filename": "libgfortran/intrinsics/f2c_specifics.F90", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fintrinsics%2Ff2c_specifics.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fintrinsics%2Ff2c_specifics.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Ff2c_specifics.F90?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -69,13 +69,29 @@ subroutine f2c_specific__/**/NAME/**/_c8 (res, parm);\n \n REAL_HEAD(abs)\n REAL_BODY(abs)\n+\n ! abs is special in that the result is real\n elemental function f2c_specific__abs_c4 (parm) result (res)\n   COMPLEX, intent(in) :: parm\n   DOUBLE PRECISION :: res\n   res = abs(parm)\n end function\n \n+\n+! aimag is special in that the result is real\n+elemental function f2c_specific__aimag_c4 (parm)\n+  complex(kind=4), intent(in) :: parm\n+  double precision :: f2c_specific__aimag_c4\n+  f2c_specific__aimag_c4 = aimag(parm)\n+end function\n+\n+elemental function f2c_specific__aimag_c8 (parm)\n+  complex(kind=8), intent(in) :: parm\n+  double precision :: f2c_specific__aimag_c8\n+  f2c_specific__aimag_c8 = aimag(parm)\n+end function\n+\n+\n REAL_HEAD(exp)\n REAL_BODY(exp)\n COMPLEX_HEAD(exp)\n@@ -109,6 +125,15 @@ elemental function f2c_specific__abs_c4 (parm) result (res)\n REAL_HEAD(atan)\n REAL_BODY(atan)\n \n+REAL_HEAD(asinh)\n+REAL_BODY(asinh)\n+\n+REAL_HEAD(acosh)\n+REAL_BODY(acosh)\n+\n+REAL_HEAD(atanh)\n+REAL_BODY(atanh)\n+\n REAL_HEAD(sin)\n REAL_BODY(sin)\n COMPLEX_HEAD(sin)"}, {"sha": "dff63d82eeac2037f418982781146539e7a261e4", "filename": "libgfortran/m4/misc_specifics.m4", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fm4%2Fmisc_specifics.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fm4%2Fmisc_specifics.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fmisc_specifics.m4?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -0,0 +1,64 @@\n+include(head.m4)dnl\n+dnl\n+dnl This file contains the specific functions that are not handled in the\n+dnl m4/specific.m4 file.\n+\n+#include \"config.h\"\n+#include \"kinds.inc\"\n+\n+dnl This is from GNU m4 examples file foreach.m4:\n+divert(-1)\n+# foreach(x, (item_1, item_2, ..., item_n), stmt)\n+define(`foreach', `pushdef(`$1', `')_foreach(`$1', `$2',\n+`$3')popdef(`$1')')\n+define(`_arg1', `$1')\n+define(`_foreach',\n+        `ifelse(`$2', `()', ,\n+                `define(`$1', _arg1$2)$3`'_foreach(`$1', (shift$2),\n+`$3')')')\n+# traceon(`define', `foreach', `_foreach', `ifelse')\n+divert\n+\n+dnl   NINT specifics\n+foreach(`ikind', `(4, 8, 16)', `foreach(`rkind', `(4, 8, 10, 16)', `\n+`#if defined (HAVE_GFC_REAL_'rkind`) && defined (HAVE_GFC_INTEGER_'ikind`)'\n+elemental function specific__nint_`'ikind`_'rkind (parm)\n+   real (kind=rkind) , intent (in) :: parm\n+   integer (kind=ikind) :: specific__nint_`'ikind`_'rkind\n+   specific__nint_`'ikind`_'rkind = nint (parm)\n+end function\n+#endif\n+')')\n+\n+dnl   CHAR specifics\n+foreach(`ckind', `(1)', `foreach(`ikind', `(4, 8, 16)', `\n+`#if defined (HAVE_GFC_INTEGER_'ikind`)'\n+elemental function specific__char_`'ckind`_i'ikind (parm)\n+   integer (kind=ikind) , intent (in) :: parm\n+   character (kind=ckind,len=1) :: specific__char_`'ckind`_i'ikind\n+   specific__char_`'ckind`_i'ikind` = char (parm, kind='ckind`)'\n+end function\n+#endif\n+')')\n+\n+dnl   LEN specifics\n+foreach(`ckind', `(1)', `foreach(`ikind', `(4, 8, 16)', `\n+`#if defined (HAVE_GFC_INTEGER_'ikind`)'\n+elemental function specific__len_`'ckind`_i'ikind (parm)\n+   character (kind=ckind,len=*) , intent (in) :: parm\n+   integer (kind=ikind) :: specific__len_`'ckind`_i'ikind\n+   specific__len_`'ckind`_i'ikind` = len (parm)'\n+end function\n+#endif\n+')')\n+\n+dnl   INDEX specifics\n+foreach(`ckind', `(1)', `foreach(`ikind', `(4, 8, 16)', `\n+`#if defined (HAVE_GFC_INTEGER_'ikind`)'\n+elemental function specific__index_`'ckind`_i'ikind (parm1, parm2)\n+   character (kind=ckind,len=*) , intent (in) :: parm1, parm2\n+   integer (kind=ikind) :: specific__index_`'ckind`_i'ikind\n+   specific__index_`'ckind`_i'ikind` = index (parm1, parm2)'\n+end function\n+#endif\n+')')"}, {"sha": "c8c91520d604d61de46684aa3e757bcb0e8d03c9", "filename": "libgfortran/m4/specific.m4", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fm4%2Fspecific.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e7e6e82451de69f2449372e91df1f55888be8/libgfortran%2Fm4%2Fspecific.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fspecific.m4?ref=0e7e7e6e82451de69f2449372e91df1f55888be8", "patch": "@@ -6,7 +6,7 @@ define(get_typename2, `$1 (kind=$2)')dnl\n define(get_typename, `get_typename2(ifelse($1,i,integer,ifelse($1,r,real,ifelse($1,l,logical,ifelse($1,c,complex,unknown)))),`$2')')dnl\n define(atype_name, get_typename(atype_letter,atype_kind))dnl\n define(name, regexp(regexp(file, `[^/]*$', `\\&'), `^_\\([^_]*\\)_', `\\1'))dnl\n-define(rtype_name,get_typename(ifelse(name,abs,ifelse(atype_letter,c,r,atype_letter),atype_letter),atype_kind))dnl\n+define(rtype_name,get_typename(ifelse(name,abs,ifelse(atype_letter,c,r,atype_letter),ifelse(name,aimag,ifelse(atype_letter,c,r,atype_letter),atype_letter)),atype_kind))dnl\n define(function_name,ifelse(name,conjg,`specific__conjg_'atype_kind,`specific__'name`_'atype_code))dnl\n \n define(type,ifelse(atype_letter,l,LOGICAL,ifelse(atype_letter,i,INTEGER,ifelse(atype_letter,r,REAL,ifelse(atype_letter,c,COMPLEX,UNKNOW)))))dnl\n@@ -17,8 +17,8 @@ dnl nothing. The list is currently:\n dnl    - integer and logical specifics require no libm function\n dnl    - AINT requires the trunc() family functions\n dnl    - ANINT requires round()\n-dnl    - CONJG, DIM, SIGN require no libm function\n-define(needed,ifelse(atype_letter,i,`none',ifelse(atype_letter,l,`none',ifelse(name,aint,trunc,ifelse(name,anint,round,ifelse(name,conjg,none,ifelse(name,dim,none,ifelse(name,sign,none,ifelse(name,abs,fabs,name)))))))))dnl\n+dnl    - AIMAG, CONJG, DIM, SIGN require no libm function\n+define(needed,ifelse(atype_letter,i,`none',ifelse(atype_letter,l,`none',ifelse(name,aint,trunc,ifelse(name,anint,round,ifelse(name,aimag,none,ifelse(name,conjg,none,ifelse(name,dim,none,ifelse(name,sign,none,ifelse(name,abs,fabs,name))))))))))dnl\n define(prefix,ifelse(atype_letter,c,C,`'))dnl\n \n dnl Special case for fabs, for which the corresponding complex function"}]}