{"sha": "7c2a44aebbdcbd1c250b99541b25afd1dfcb60e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2MyYTQ0YWViYmRjYmQxYzI1MGI5OTU0MWIyNWFmZDFkZmNiNjBlOA==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2019-08-21T08:31:16Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-21T08:31:16Z"}, "message": "[Ada] Minor refactorings/reformattings\n\n2019-08-21  Piotr Trojanek  <trojanek@adacore.com>\n\ngcc/ada/\n\n\t* einfo.adb (Is_Discriminal): Remove extra parens.\n\t(Is_Constant_Object): Simplify by reusing Ekind_In.\n\t(Is_Prival): Remove extra parens.\n\t* checks.adb, exp_ch4.adb, sem_ch3.adb, sem_spark.adb: Minor\n\treformattings.\n\nFrom-SVN: r274790", "tree": {"sha": "f6bea5cc420adda8a3c07a02745a0c8d189c69f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6bea5cc420adda8a3c07a02745a0c8d189c69f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c2a44aebbdcbd1c250b99541b25afd1dfcb60e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c2a44aebbdcbd1c250b99541b25afd1dfcb60e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c2a44aebbdcbd1c250b99541b25afd1dfcb60e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c2a44aebbdcbd1c250b99541b25afd1dfcb60e8/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0728477991b0a10cdde60ca1b4ae39fce414041a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0728477991b0a10cdde60ca1b4ae39fce414041a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0728477991b0a10cdde60ca1b4ae39fce414041a"}], "stats": {"total": 44, "additions": 25, "deletions": 19}, "files": [{"sha": "15fcd261f875c437cfed22b49f9d25aaff81b03f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c2a44aebbdcbd1c250b99541b25afd1dfcb60e8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c2a44aebbdcbd1c250b99541b25afd1dfcb60e8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7c2a44aebbdcbd1c250b99541b25afd1dfcb60e8", "patch": "@@ -1,3 +1,11 @@\n+2019-08-21  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* einfo.adb (Is_Discriminal): Remove extra parens.\n+\t(Is_Constant_Object): Simplify by reusing Ekind_In.\n+\t(Is_Prival): Remove extra parens.\n+\t* checks.adb, exp_ch4.adb, sem_ch3.adb, sem_spark.adb: Minor\n+\treformattings.\n+\n 2019-08-21  Claire Dross  <dross@adacore.com>\n \n \t* libgnat/a-cofove.ads (Vector): Add an Iterable aspect to allow"}, {"sha": "caee9ad7fd564d7fd214fad7ecbc742df1ad1c9d", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c2a44aebbdcbd1c250b99541b25afd1dfcb60e8/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c2a44aebbdcbd1c250b99541b25afd1dfcb60e8/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=7c2a44aebbdcbd1c250b99541b25afd1dfcb60e8", "patch": "@@ -6994,7 +6994,7 @@ package body Checks is\n \n       --  Next test for the case where the target type is within the bounds\n       --  of the base type of the source type, since in this case we can\n-      --  simply convert the bounds of the target type to this base bype\n+      --  simply convert the bounds of the target type to this base type\n       --  to do the test.\n \n       --    [constraint_error when N not in"}, {"sha": "ebef3a0ca74106e4b624af98912ed6623165a5af", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c2a44aebbdcbd1c250b99541b25afd1dfcb60e8/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c2a44aebbdcbd1c250b99541b25afd1dfcb60e8/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=7c2a44aebbdcbd1c250b99541b25afd1dfcb60e8", "patch": "@@ -8032,10 +8032,8 @@ package body Einfo is\n    ------------------------\n \n    function Is_Constant_Object (Id : E) return B is\n-      K : constant Entity_Kind := Ekind (Id);\n    begin\n-      return\n-        K = E_Constant or else K = E_In_Parameter or else K = E_Loop_Parameter;\n+      return Ekind_In (Id, E_Constant, E_In_Parameter, E_Loop_Parameter);\n    end Is_Constant_Object;\n \n    -------------------\n@@ -8053,8 +8051,8 @@ package body Einfo is\n \n    function Is_Discriminal (Id : E) return B is\n    begin\n-      return (Ekind_In (Id, E_Constant, E_In_Parameter)\n-                and then Present (Discriminal_Link (Id)));\n+      return Ekind_In (Id, E_Constant, E_In_Parameter)\n+               and then Present (Discriminal_Link (Id));\n    end Is_Discriminal;\n \n    ----------------------\n@@ -8181,8 +8179,8 @@ package body Einfo is\n \n    function Is_Prival (Id : E) return B is\n    begin\n-      return (Ekind_In (Id, E_Constant, E_Variable)\n-                and then Present (Prival_Link (Id)));\n+      return Ekind_In (Id, E_Constant, E_Variable)\n+               and then Present (Prival_Link (Id));\n    end Is_Prival;\n \n    ----------------------------"}, {"sha": "c288d6a79a7343d5d199f9c4b1217ba8a77d7140", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c2a44aebbdcbd1c250b99541b25afd1dfcb60e8/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c2a44aebbdcbd1c250b99541b25afd1dfcb60e8/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=7c2a44aebbdcbd1c250b99541b25afd1dfcb60e8", "patch": "@@ -2014,7 +2014,7 @@ package body Exp_Ch4 is\n \n          --  If the array type is distinct from the type of the arguments, it\n          --  is the full view of a private type. Apply an unchecked conversion\n-         --  to insure that analysis of the call succeeds.\n+         --  to ensure that analysis of the call succeeds.\n \n          declare\n             L, R : Node_Id;\n@@ -4254,7 +4254,7 @@ package body Exp_Ch4 is\n       --  'Last - First (instead of 'Length) because for large arrays computing\n       --  'Last -'First + 1 causes overflow. This is done without using the\n       --  attribute 'Size_In_Storage_Elements (which malfunctions for large\n-      --  sizes ???)\n+      --  sizes ???).\n \n       -------------------------\n       -- Rewrite_Coextension --\n@@ -4333,7 +4333,7 @@ package body Exp_Ch4 is\n                --  to compute 'Length since for large arrays 'Last -'First + 1\n                --  causes overflow; therefore we compute 'Last - 'First (which\n                --  is not the exact number of components but it is valid for\n-               --  the purpose of this runtime check on 32-bit targets)\n+               --  the purpose of this runtime check on 32-bit targets).\n \n                else\n                   declare\n@@ -4371,7 +4371,7 @@ package body Exp_Ch4 is\n                                  (Make_Integer_Literal (Loc, J)))));\n \n                      --  Handle superflat arrays, i.e. arrays with such bounds\n-                     --  as 4 .. 2, to insure that the result is correct.\n+                     --  as 4 .. 2, to ensure that the result is correct.\n \n                      --  Generate:\n                      --    (if X'Last > X'First then X'Last - X'First else 0)\n@@ -4643,7 +4643,7 @@ package body Exp_Ch4 is\n \n          --  The check on No_Initialization is used here to prevent generating\n          --  this runtime check twice when the allocator is locally replaced by\n-         --  the expander by another one.\n+         --  the expander with another one.\n \n          if Is_Array_Type (Etyp) and then not No_Initialization (N) then\n             declare\n@@ -4683,11 +4683,11 @@ package body Exp_Ch4 is\n                if Is_Constrained (Siz_Typ)\n                  and then Ekind (Siz_Typ) /= E_String_Literal_Subtype\n                then\n-                  --  For CCG targets the largest array may have up to 2**31-1\n-                  --  components (i.e. 2 Gigabytes if each array component is\n-                  --  1-byte). This insures that fat pointer fields do not\n+                  --  For CCG targets, the largest array may have up to 2**31-1\n+                  --  components (i.e. 2 gigabytes if each array component is\n+                  --  one byte). This ensures that fat pointer fields do not\n                   --  overflow, since they are 32-bit integer types, and also\n-                  --  insures that 'Length can be computed at run time.\n+                  --  ensures that 'Length can be computed at run time.\n \n                   if Modify_Tree_For_C then\n                      Cond :="}, {"sha": "6af941910085ec7bf303a78499fc6a91517267c9", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c2a44aebbdcbd1c250b99541b25afd1dfcb60e8/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c2a44aebbdcbd1c250b99541b25afd1dfcb60e8/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=7c2a44aebbdcbd1c250b99541b25afd1dfcb60e8", "patch": "@@ -8818,7 +8818,7 @@ package body Sem_Ch3 is\n \n       --  Indic can either be an N_Identifier if the subtype indication\n       --  contains no constraint or an N_Subtype_Indication if the subtype\n-      --  indecation has a constraint. In either case it can include an\n+      --  indication has a constraint. In either case it can include an\n       --  interface list.\n \n       Indic := Subtype_Indication (Type_Def);"}, {"sha": "038c7cdd3e834d9692e8e32ca0104bf70c67661a", "filename": "gcc/ada/sem_spark.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c2a44aebbdcbd1c250b99541b25afd1dfcb60e8/gcc%2Fada%2Fsem_spark.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c2a44aebbdcbd1c250b99541b25afd1dfcb60e8/gcc%2Fada%2Fsem_spark.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_spark.adb?ref=7c2a44aebbdcbd1c250b99541b25afd1dfcb60e8", "patch": "@@ -3092,7 +3092,7 @@ package body Sem_SPARK is\n \n          --  Postconditions are checked for correct use of 'Old, but starting\n          --  from the corresponding declaration, in order to avoid dealing with\n-         --  with contracts on generic subprograms, which are not handled in\n+         --  with contracts on generic subprograms which are not handled in\n          --  GNATprove.\n \n          when Pragma_Precondition"}]}