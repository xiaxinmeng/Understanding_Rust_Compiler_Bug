{"sha": "825db093dfec43ee507e96de62db43f896047702", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI1ZGIwOTNkZmVjNDNlZTUwN2U5NmRlNjJkYjQzZjg5NjA0NzcwMg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-01-30T06:17:33Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-01-30T06:17:33Z"}, "message": "lib1funcs.asm: Fix comment typos.\n\n\t* config/sh/lib1funcs.asm: Fix comment typos.\n\t* config/sh/linux.h: Likewise.\n\t* config/sh/sh.c: Likewise.\n\t* config/sh/sh.md: Likewise.\n\nFrom-SVN: r62129", "tree": {"sha": "b04a6e7719377d946f29af62ff641c37e550df79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b04a6e7719377d946f29af62ff641c37e550df79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/825db093dfec43ee507e96de62db43f896047702", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/825db093dfec43ee507e96de62db43f896047702", "html_url": "https://github.com/Rust-GCC/gccrs/commit/825db093dfec43ee507e96de62db43f896047702", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/825db093dfec43ee507e96de62db43f896047702/comments", "author": null, "committer": null, "parents": [{"sha": "65eb9b872a2e656b92bc21a1518e9fd893224693", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65eb9b872a2e656b92bc21a1518e9fd893224693", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65eb9b872a2e656b92bc21a1518e9fd893224693"}], "stats": {"total": 33, "additions": 20, "deletions": 13}, "files": [{"sha": "d4a863ad48128ef51ee42ad4f5acae3ec7deac41", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825db093dfec43ee507e96de62db43f896047702/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825db093dfec43ee507e96de62db43f896047702/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=825db093dfec43ee507e96de62db43f896047702", "patch": "@@ -1,3 +1,10 @@\n+2003-01-30  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/sh/lib1funcs.asm: Fix comment typos.\n+\t* config/sh/linux.h: Likewise.\n+\t* config/sh/sh.c: Likewise.\n+\t* config/sh/sh.md: Likewise.\n+\n 2003-01-30  Loren James Rittle  <ljrittle@acm.org>\n \n \t* objc/Make-lang.in (objc-parse.y): Find c-parse.in in $(srcdir)."}, {"sha": "74e9839e619046fcc5111bc7c4014423693c4b31", "filename": "gcc/config/sh/lib1funcs.asm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825db093dfec43ee507e96de62db43f896047702/gcc%2Fconfig%2Fsh%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825db093dfec43ee507e96de62db43f896047702/gcc%2Fconfig%2Fsh%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Flib1funcs.asm?ref=825db093dfec43ee507e96de62db43f896047702", "patch": "@@ -2520,7 +2520,7 @@ LOCAL(ia_main_table):\n \tIts execution time is linear on the\n \tnumber of registers that actually have to be copied, and it is\n \toptimized for structures larger than 64 bits, as opposed to\n-\tinvidivual `long long' arguments.  See sh.h for details on the\n+\tindividual `long long' arguments.  See sh.h for details on the\n \tactual bit pattern.  */\n \t\n \t.global\tGLOBAL(GCC_shcompact_incoming_args)"}, {"sha": "4fa432b8e2753982f5b86bbfc9790789270221f1", "filename": "gcc/config/sh/linux.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825db093dfec43ee507e96de62db43f896047702/gcc%2Fconfig%2Fsh%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825db093dfec43ee507e96de62db43f896047702/gcc%2Fconfig%2Fsh%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Flinux.h?ref=825db093dfec43ee507e96de62db43f896047702", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for SH running Linux-based GNU systems using ELF\n-   Copyright (C) 1999, 2000, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2002, 2003 Free Software Foundation, Inc.\n    Contributed by Kazumoto Kojima <kkojima@rr.iij4u.or.jp>\n \n This file is part of GNU CC.\n@@ -162,7 +162,7 @@ do { \\\n #endif /* defined (__SH5__) */\n \n #if defined (__SH5__) && __SH5__ != 32\n-/* MD_FALLBACK_FRAME_STATE_FOR is not yet defiened for SHMEDIA.  */\n+/* MD_FALLBACK_FRAME_STATE_FOR is not yet defined for SHMEDIA.  */\n #else /* defined (__SH5__) && __SH5__ != 32 */\n \n #if defined (__SH3E__) || defined (__SH4__) || defined (__SH5__)"}, {"sha": "0d83910974748b0a000bf0a517c6b3a84d5048c1", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825db093dfec43ee507e96de62db43f896047702/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825db093dfec43ee507e96de62db43f896047702/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=825db093dfec43ee507e96de62db43f896047702", "patch": "@@ -6663,7 +6663,7 @@ sh_1el_vec (v, mode)\n   if (GET_CODE (v) != CONST_VECTOR\n       || (GET_MODE (v) != mode && mode != VOIDmode))\n     return 0;\n-  /* Determine numbers of last and of least significat elements.  */\n+  /* Determine numbers of last and of least significant elements.  */\n   last = XVECLEN (v, 0) - 1;\n   least = TARGET_LITTLE_ENDIAN ? 0 : last;\n   if (GET_CODE (XVECEXP (v, 0, least)) != CONST_INT)\n@@ -6878,7 +6878,7 @@ expand_df_binop (fun, operands)\n }\n \f\n /* ??? gcc does flow analysis strictly after common subexpression\n-   elimination.  As a result, common subespression elimination fails\n+   elimination.  As a result, common subexpression elimination fails\n    when there are some intervening statements setting the same register.\n    If we did nothing about this, this would hurt the precision switching\n    for SH4 badly.  There is some cse after reload, but it is unable to\n@@ -7619,7 +7619,7 @@ sh_initialize_trampoline (tramp, fnaddr, cxt)\n       rtx quad0 = gen_reg_rtx (DImode), cxtload = gen_reg_rtx (DImode);\n       rtx quad1 = gen_reg_rtx (DImode), quad2 = gen_reg_rtx (DImode);\n       /* movi 0,r1: 0xcc000010 shori 0,r1: c8000010  concatenated,\n-\t rotated 10 right, and higer 16 bit of every 32 selected.  */\n+\t rotated 10 right, and higher 16 bit of every 32 selected.  */\n       rtx movishori\n \t= force_reg (V2HImode, (simplify_gen_subreg\n \t\t\t\t(V2HImode, GEN_INT (0x4330432), SImode, 0)));"}, {"sha": "7c4c7ae39b5a5ae5cdf77aa602303420684e3819", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825db093dfec43ee507e96de62db43f896047702/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825db093dfec43ee507e96de62db43f896047702/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=825db093dfec43ee507e96de62db43f896047702", "patch": "@@ -227,7 +227,7 @@\n ;; fpconv_media\tSHmedia single precision floating point conversions\n ;; fstore_media\tSHmedia floating point register store instructions\n ;; gettr_media\tSHmedia gettr instruction\n-;; invalidate_line_media SHmedia invaldiate_line sequence\n+;; invalidate_line_media SHmedia invalidate_line sequence\n ;; jump_media\tSHmedia unconditional branch instructions\n ;; load_media\tSHmedia general register load instructions\n ;; pt_media\tSHmedia pt instruction (expanded by assembler)\n@@ -236,7 +236,7 @@\n ;; mcmp_media\tSHmedia multimedia compare, absolute, saturating ops\n ;; mac_media\tSHmedia mac-style fixed point operations\n ;; d2mpy_media\tSHmedia: two 32 bit integer multiplies\n-;; atrans\tSHmedia approximate transcendential functions\n+;; atrans\tSHmedia approximate transcendental functions\n ;; ustore_media\tSHmedia unaligned stores\n ;; nil\t\tno-op move, will be deleted.\n \n@@ -1252,7 +1252,7 @@\n ; the udivsi3 libcall has the same name, we must consider all registers\n ; clobbered that are in the union of the registers clobbered by the\n ; shmedia and the shcompact implementation.  Note, if the shcompact\n-; implemenation actually used shcompact code, we'd need to clobber\n+; implementation actually used shcompact code, we'd need to clobber\n ; also r23 and fr23.\n (define_insn \"udivsi3_i1_media\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=z\")\n@@ -1418,7 +1418,7 @@\n ; the sdivsi3 libcall has the same name, we must consider all registers\n ; clobbered that are in the union of the registers clobbered by the\n ; shmedia and the shcompact implementation.  Note, if the shcompact\n-; implemenation actually used shcompact code, we'd need to clobber\n+; implementation actually used shcompact code, we'd need to clobber\n ; also r22, r23 and fr23.\n (define_insn \"divsi3_i1_media\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=z\")\n@@ -10596,8 +10596,8 @@\n   \"issue+load_store\")\n \n ;; We don't model all pipeline stages; we model the issue ('D') stage\n-;; inasmuch as we allow only two instructions to issue simultanously,\n-;; and CO instructions prevent any simultanous issue of another instruction.\n+;; inasmuch as we allow only two instructions to issue simultaneously,\n+;; and CO instructions prevent any simultaneous issue of another instruction.\n ;; (This uses pipe_01 and pipe_02).\n ;; Double issue of EX insns is prevented by using the int unit in the EX stage.\n ;; Double issue of EX / BR insns is prevented by using the int unit /\n@@ -10610,7 +10610,7 @@\n ;; (except in the cases outlined above), nor to describe the FS stage after\n ;; the F2 stage.\n \n-;; Other MT  group intructions(1 step operations)\n+;; Other MT  group instructions(1 step operations)\n ;; Group:\tMT\n ;; Latency: \t1\n ;; Issue Rate: \t1"}]}