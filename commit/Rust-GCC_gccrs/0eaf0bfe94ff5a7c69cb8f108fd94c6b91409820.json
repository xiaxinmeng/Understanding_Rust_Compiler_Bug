{"sha": "0eaf0bfe94ff5a7c69cb8f108fd94c6b91409820", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVhZjBiZmU5NGZmNWE3YzY5Y2I4ZjEwOGZkOTRjNmI5MTQwOTgyMA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-07-06T16:46:47Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-07-06T16:46:47Z"}, "message": "cgraphunit.c (cgraph_node::finalize_function): When !flag_toplevel_reorde set no_reorder flag.\n\n\n\t* cgraphunit.c (cgraph_node::finalize_function): When\n\t!flag_toplevel_reorde set no_reorder flag.\n\t(varpool_node::finalize_decl): Likewise.\n\t(symbol_table::compile): Drop no toplevel reorder path.\n\n\t* lto-partition.c (lto_balanced_map): Do not check\n\tflag_toplevel_reorder.\n\nFrom-SVN: r250034", "tree": {"sha": "ef83493d1737c9105dfdd3d5053218e4415d1de3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef83493d1737c9105dfdd3d5053218e4415d1de3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0eaf0bfe94ff5a7c69cb8f108fd94c6b91409820", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eaf0bfe94ff5a7c69cb8f108fd94c6b91409820", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0eaf0bfe94ff5a7c69cb8f108fd94c6b91409820", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eaf0bfe94ff5a7c69cb8f108fd94c6b91409820/comments", "author": null, "committer": null, "parents": [{"sha": "b0a12b5e4612ba1c4013e0f2549b82f0690c9458", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0a12b5e4612ba1c4013e0f2549b82f0690c9458", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0a12b5e4612ba1c4013e0f2549b82f0690c9458"}], "stats": {"total": 75, "additions": 40, "deletions": 35}, "files": [{"sha": "1e46b67af1fda0becb623b7508333b07105d9fd6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eaf0bfe94ff5a7c69cb8f108fd94c6b91409820/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eaf0bfe94ff5a7c69cb8f108fd94c6b91409820/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0eaf0bfe94ff5a7c69cb8f108fd94c6b91409820", "patch": "@@ -1,3 +1,10 @@\n+2017-07-06  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* cgraphunit.c (cgraph_node::finalize_function): When\n+\t!flag_toplevel_reorde set no_reorder flag.\n+\t(varpool_node::finalize_decl): Likewise.\n+\t(symbol_table::compile): Drop no toplevel reorder path.\n+\n 2017-07-06  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* bb-reorder.c (better_edge_p): Do not build traces across abnormal/eh"}, {"sha": "6072c567bc36660cbf8b6f4d5fcba42544cef751", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eaf0bfe94ff5a7c69cb8f108fd94c6b91409820/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eaf0bfe94ff5a7c69cb8f108fd94c6b91409820/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=0eaf0bfe94ff5a7c69cb8f108fd94c6b91409820", "patch": "@@ -449,6 +449,8 @@ cgraph_node::finalize_function (tree decl, bool no_collect)\n   node->definition = true;\n   notice_global_symbol (decl);\n   node->lowered = DECL_STRUCT_FUNCTION (decl)->cfg != NULL;\n+  if (!flag_toplevel_reorder)\n+    node->no_reorder = true;\n \n   /* With -fkeep-inline-functions we are keeping all inline functions except\n      for extern inline ones.  */\n@@ -471,7 +473,8 @@ cgraph_node::finalize_function (tree decl, bool no_collect)\n      declared inline and nested functions.  These were optimized out\n      in the original implementation and it is unclear whether we want\n      to change the behavior here.  */\n-  if (((!opt_for_fn (decl, optimize) || flag_keep_static_functions)\n+  if (((!opt_for_fn (decl, optimize) || flag_keep_static_functions\n+\t|| node->no_reorder)\n        && !node->cpp_implicit_alias\n        && !DECL_DISREGARD_INLINE_LIMITS (decl)\n        && !DECL_DECLARED_INLINE_P (decl)\n@@ -840,13 +843,13 @@ varpool_node::finalize_decl (tree decl)\n      it is available to notice_global_symbol.  */\n   node->definition = true;\n   notice_global_symbol (decl);\n+  if (!flag_toplevel_reorder)\n+    node->no_reorder = true;\n   if (TREE_THIS_VOLATILE (decl) || DECL_PRESERVE_P (decl)\n       /* Traditionally we do not eliminate static variables when not\n \t optimizing and when not doing toplevel reoder.  */\n-      || node->no_reorder\n-      || ((!flag_toplevel_reorder\n-          && !DECL_COMDAT (node->decl)\n-\t   && !DECL_ARTIFICIAL (node->decl))))\n+      || (node->no_reorder && !DECL_COMDAT (node->decl)\n+\t  && !DECL_ARTIFICIAL (node->decl)))\n     node->force_output = true;\n \n   if (symtab->state == CONSTRUCTION\n@@ -857,8 +860,8 @@ varpool_node::finalize_decl (tree decl)\n   /* Some frontends produce various interface variables after compilation\n      finished.  */\n   if (symtab->state == FINISHED\n-      || (!flag_toplevel_reorder\n-\t&& symtab->state == EXPANSION))\n+      || (node->no_reorder\n+\t  && symtab->state == EXPANSION))\n     node->assemble_decl ();\n \n   if (DECL_INITIAL (decl))\n@@ -2226,11 +2229,10 @@ struct cgraph_order_sort\n    according to their order fields, which is the order in which they\n    appeared in the file.  This implements -fno-toplevel-reorder.  In\n    this mode we may output functions and variables which don't really\n-   need to be output.\n-   When NO_REORDER is true only do this for symbols marked no reorder. */\n+   need to be output.  */\n \n static void\n-output_in_order (bool no_reorder)\n+output_in_order (void)\n {\n   int max;\n   cgraph_order_sort *nodes;\n@@ -2245,7 +2247,7 @@ output_in_order (bool no_reorder)\n     {\n       if (pf->process && !pf->thunk.thunk_p && !pf->alias)\n \t{\n-\t  if (no_reorder && !pf->no_reorder)\n+\t  if (!pf->no_reorder)\n \t    continue;\n \t  i = pf->order;\n \t  gcc_assert (nodes[i].kind == ORDER_UNDEFINED);\n@@ -2258,7 +2260,7 @@ output_in_order (bool no_reorder)\n      Please keep them in sync.  */\n   FOR_EACH_VARIABLE (pv)\n     {\n-      if (no_reorder && !pv->no_reorder)\n+      if (!pv->no_reorder)\n \tcontinue;\n       if (DECL_HARD_REGISTER (pv->decl)\n \t  || DECL_HAS_VALUE_EXPR_P (pv->decl))\n@@ -2532,16 +2534,11 @@ symbol_table::compile (void)\n \n   state = EXPANSION;\n \n-  if (!flag_toplevel_reorder)\n-    output_in_order (false);\n-  else\n-    {\n-      /* Output first asm statements and anything ordered. The process\n-         flag is cleared for these nodes, so we skip them later.  */\n-      output_in_order (true);\n-      expand_all_functions ();\n-      output_variables ();\n-    }\n+  /* Output first asm statements and anything ordered. The process\n+     flag is cleared for these nodes, so we skip them later.  */\n+  output_in_order ();\n+  expand_all_functions ();\n+  output_variables ();\n \n   process_new_functions ();\n   state = FINISHED;"}, {"sha": "667d58c886c8f65e46a74e1dd936e646e5221b62", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eaf0bfe94ff5a7c69cb8f108fd94c6b91409820/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eaf0bfe94ff5a7c69cb8f108fd94c6b91409820/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=0eaf0bfe94ff5a7c69cb8f108fd94c6b91409820", "patch": "@@ -1,5 +1,9 @@\n-2017-06-23  Marc Glisse  <marc.glisse@inria.fr>\n+2017-07-06  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* lto-partition.c (lto_balanced_map): Do not check\n+\tflag_toplevel_reorder.\n \n+2017-06-23  Marc Glisse  <marc.glisse@inria.fr>\n \t* lto-lang.c (lto_init): Use builtin_structptr_types.\n \n 2017-06-15  Jan Hubicka  <hubicka@ucw.cz>"}, {"sha": "3141ecec07c0efecc30a4cee9abf8ca0c95d0732", "filename": "gcc/lto/lto-partition.c", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eaf0bfe94ff5a7c69cb8f108fd94c6b91409820/gcc%2Flto%2Flto-partition.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eaf0bfe94ff5a7c69cb8f108fd94c6b91409820/gcc%2Flto%2Flto-partition.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-partition.c?ref=0eaf0bfe94ff5a7c69cb8f108fd94c6b91409820", "patch": "@@ -506,7 +506,7 @@ lto_balanced_map (int n_lto_partitions, int max_partition_size)\n   /* Collect all variables that should not be reordered.  */\n   FOR_EACH_VARIABLE (vnode)\n     if (vnode->get_partitioning_class () == SYMBOL_PARTITION\n-\t&& (!flag_toplevel_reorder || vnode->no_reorder))\n+\t&& vnode->no_reorder)\n       varpool_order.safe_push (vnode);\n   n_varpool_nodes = varpool_order.length ();\n   varpool_order.qsort (varpool_node_cmp);\n@@ -547,7 +547,8 @@ lto_balanced_map (int n_lto_partitions, int max_partition_size)\n \t}\n       add_sorted_nodes (next_nodes, partition);\n \n-      add_symbol_to_partition (partition, order[i]);\n+      if (!symbol_partitioned_p (order[i]))\n+        add_symbol_to_partition (partition, order[i]);\n       if (!order[i]->alias)\n         total_size -= ipa_fn_summaries->get (order[i])->size;\n \t  \n@@ -634,7 +635,7 @@ lto_balanced_map (int n_lto_partitions, int max_partition_size)\n \t\tvnode = dyn_cast <varpool_node *> (ref->referred);\n \t\tif (!vnode->definition)\n \t\t  continue;\n-\t\tif (!symbol_partitioned_p (vnode) && flag_toplevel_reorder\n+\t\tif (!symbol_partitioned_p (vnode)\n \t\t    && !vnode->no_reorder\n \t\t    && vnode->get_partitioning_class () == SYMBOL_PARTITION)\n \t\t  add_symbol_to_partition (partition, vnode);\n@@ -672,7 +673,7 @@ lto_balanced_map (int n_lto_partitions, int max_partition_size)\n \t\t   because it allows them to be removed.  Coupling\n \t\t   with objects they refer to only helps to reduce\n \t\t   number of symbols promoted to hidden.  */\n-\t\tif (!symbol_partitioned_p (vnode) && flag_toplevel_reorder\n+\t\tif (!symbol_partitioned_p (vnode)\n \t\t    && !vnode->no_reorder\n \t\t    && !vnode->can_remove_if_no_refs_p ()\n \t\t    && vnode->get_partitioning_class () == SYMBOL_PARTITION)\n@@ -767,14 +768,10 @@ lto_balanced_map (int n_lto_partitions, int max_partition_size)\n   next_nodes.truncate (0);\n \n   /* Varables that are not reachable from the code go into last partition.  */\n-  if (flag_toplevel_reorder)\n-    {\n-      FOR_EACH_VARIABLE (vnode)\n-\tif (vnode->get_partitioning_class () == SYMBOL_PARTITION\n-\t    && !symbol_partitioned_p (vnode)\n-\t    && !vnode->no_reorder)\n-\t  next_nodes.safe_push (vnode);\n-    }\n+  FOR_EACH_VARIABLE (vnode)\n+    if (vnode->get_partitioning_class () == SYMBOL_PARTITION\n+\t&& !symbol_partitioned_p (vnode))\n+      next_nodes.safe_push (vnode);\n \n   /* Output remaining ordered symbols.  */\n   while (varpool_pos < n_varpool_nodes)"}]}