{"sha": "52e862219926fb800c55cdf36cb2e18ac4555dac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJlODYyMjE5OTI2ZmI4MDBjNTVjZGYzNmNiMmUxOGFjNDU1NWRhYw==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2016-07-06T22:33:20Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2016-07-06T22:33:20Z"}, "message": "Implement std::any.\n\n\t* include/Makefile.am: Add any and c++17_warning.h to exported headers.\n\t* include/Makefile.in: Likewise.\n\t* include/std/any: New.\n\t* testsuite/20_util/any/assign/1.cc: Likewise.\n\t* testsuite/20_util/any/assign/2.cc: Likewise.\n\t* testsuite/20_util/any/assign/self.cc: Likewise.\n\t* testsuite/20_util/any/cons/1.cc: Likewise.\n\t* testsuite/20_util/any/cons/2.cc: Likewise.\n\t* testsuite/20_util/any/cons/aligned.cc: Likewise.\n\t* testsuite/20_util/any/cons/nontrivial.cc: Likewise.\n\t* testsuite/20_util/any/misc/any_cast.cc: Likewise.\n\t* testsuite/20_util/any/misc/any_cast_neg.cc: Likewise.\n\t* testsuite/20_util/any/misc/any_cast_no_rtti.cc: Likewise.\n\t* testsuite/20_util/any/misc/swap.cc: Likewise.\n\t* testsuite/20_util/any/modifiers/1.cc: Likewise.\n\t* testsuite/20_util/any/observers/type.cc: Likewise.\n\t* testsuite/20_util/any/typedefs.cc: Likewise.\n\nFrom-SVN: r238061", "tree": {"sha": "4fdabdf30ff8dfc905278982ff067b7da634456b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fdabdf30ff8dfc905278982ff067b7da634456b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52e862219926fb800c55cdf36cb2e18ac4555dac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52e862219926fb800c55cdf36cb2e18ac4555dac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52e862219926fb800c55cdf36cb2e18ac4555dac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52e862219926fb800c55cdf36cb2e18ac4555dac/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3042e708510cd4cce1c8faae7883a87ce3e12575", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3042e708510cd4cce1c8faae7883a87ce3e12575", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3042e708510cd4cce1c8faae7883a87ce3e12575"}], "stats": {"total": 1335, "additions": 1335, "deletions": 0}, "files": [{"sha": "c7050e32a04422bb1d911bd3f9e3bb9d997679c6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=52e862219926fb800c55cdf36cb2e18ac4555dac", "patch": "@@ -1,3 +1,24 @@\n+2016-07-07  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tImplement std::any.\n+\t* include/Makefile.am: Add any and c++17_warning.h to exported headers.\n+\t* include/Makefile.in: Likewise.\n+\t* include/std/any: New.\n+\t* testsuite/20_util/any/assign/1.cc: Likewise.\n+\t* testsuite/20_util/any/assign/2.cc: Likewise.\n+\t* testsuite/20_util/any/assign/self.cc: Likewise.\n+\t* testsuite/20_util/any/cons/1.cc: Likewise.\n+\t* testsuite/20_util/any/cons/2.cc: Likewise.\n+\t* testsuite/20_util/any/cons/aligned.cc: Likewise.\n+\t* testsuite/20_util/any/cons/nontrivial.cc: Likewise.\n+\t* testsuite/20_util/any/misc/any_cast.cc: Likewise.\n+\t* testsuite/20_util/any/misc/any_cast_neg.cc: Likewise.\n+\t* testsuite/20_util/any/misc/any_cast_no_rtti.cc: Likewise.\n+\t* testsuite/20_util/any/misc/swap.cc: Likewise.\n+\t* testsuite/20_util/any/modifiers/1.cc: Likewise.\n+\t* testsuite/20_util/any/observers/type.cc: Likewise.\n+\t* testsuite/20_util/any/typedefs.cc: Likewise.\n+\n 2016-07-06  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tAdd a new header for diagnosing the use of C++17 facilities"}, {"sha": "4c9cb06e095ce94dae8c879955c0cfb603e4dd70", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=52e862219926fb800c55cdf36cb2e18ac4555dac", "patch": "@@ -27,6 +27,7 @@ std_srcdir = ${glibcxx_srcdir}/include/std\n std_builddir = .\n std_headers = \\\n \t${std_srcdir}/algorithm \\\n+\t${std_srcdir}/any \\\n \t${std_srcdir}/array \\\n \t${std_srcdir}/atomic \\\n \t${std_srcdir}/bitset \\\n@@ -92,6 +93,7 @@ bits_headers = \\\n \t${bits_srcdir}/boost_concept_check.h \\\n \t${bits_srcdir}/c++0x_warning.h \\\n \t${bits_srcdir}/c++14_warning.h \\\n+\t${bits_srcdir}/c++17_warning.h \\\n \t${bits_srcdir}/char_traits.h \\\n \t${bits_srcdir}/codecvt.h \\\n \t${bits_srcdir}/concept_check.h \\"}, {"sha": "bddeb885c10eaaeb395e617f1aa17a91c4d546f0", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=52e862219926fb800c55cdf36cb2e18ac4555dac", "patch": "@@ -317,6 +317,7 @@ std_srcdir = ${glibcxx_srcdir}/include/std\n std_builddir = .\n std_headers = \\\n \t${std_srcdir}/algorithm \\\n+\t${std_srcdir}/any \\\n \t${std_srcdir}/array \\\n \t${std_srcdir}/atomic \\\n \t${std_srcdir}/bitset \\\n@@ -382,6 +383,7 @@ bits_headers = \\\n \t${bits_srcdir}/boost_concept_check.h \\\n \t${bits_srcdir}/c++0x_warning.h \\\n \t${bits_srcdir}/c++14_warning.h \\\n+\t${bits_srcdir}/c++17_warning.h \\\n \t${bits_srcdir}/char_traits.h \\\n \t${bits_srcdir}/codecvt.h \\\n \t${bits_srcdir}/concept_check.h \\"}, {"sha": "2e8baa6f8dde134d1f40a035ddd593a335dc7f8e", "filename": "libstdc++-v3/include/std/any", "status": "added", "additions": 523, "deletions": 0, "changes": 523, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany?ref=52e862219926fb800c55cdf36cb2e18ac4555dac", "patch": "@@ -0,0 +1,523 @@\n+// <any> -*- C++ -*-\n+\n+// Copyright (C) 2014-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file include/any\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_ANY\n+#define _GLIBCXX_ANY 1\n+\n+#pragma GCC system_header\n+\n+#if __cplusplus <= 201402L\n+# include <bits/c++17_warning.h>\n+#else\n+\n+#include <typeinfo>\n+#include <new>\n+#include <utility>\n+#include <type_traits>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  /**\n+   *  @addtogroup utilities\n+   *  @{\n+   */\n+\n+  /**\n+   *  @brief Exception class thrown by a failed @c any_cast\n+   *  @ingroup exceptions\n+   */\n+  class bad_any_cast : public bad_cast\n+  {\n+  public:\n+    virtual const char* what() const noexcept { return \"bad any_cast\"; }\n+  };\n+\n+  [[gnu::noreturn]] inline void __throw_bad_any_cast()\n+  {\n+#if __cpp_exceptions\n+    throw bad_any_cast{};\n+#else\n+    __builtin_abort();\n+#endif\n+  }\n+\n+  /**\n+   *  @brief A type-safe container of any type.\n+   * \n+   *  An @c any object's state is either empty or it stores a contained object\n+   *  of CopyConstructible type.\n+   */\n+  class any\n+  {\n+    // Holds either pointer to a heap object or the contained object itself.\n+    union _Storage\n+    {\n+      // This constructor intentionally doesn't initialize anything.\n+      _Storage() = default;\n+\n+      // Prevent trivial copies of this type, buffer might hold a non-POD.\n+      _Storage(const _Storage&) = delete;\n+      _Storage& operator=(const _Storage&) = delete;\n+\n+      void* _M_ptr;\n+      aligned_storage<sizeof(_M_ptr), alignof(void*)>::type _M_buffer;\n+    };\n+\n+    template<typename _Tp, typename _Safe = is_nothrow_move_constructible<_Tp>,\n+\t     bool _Fits = (sizeof(_Tp) <= sizeof(_Storage))\n+\t\t\t  && (alignof(_Tp) <= alignof(_Storage))>\n+      using _Internal = std::integral_constant<bool, _Safe::value && _Fits>;\n+\n+    template<typename _Tp>\n+      struct _Manager_internal; // uses small-object optimization\n+\n+    template<typename _Tp>\n+      struct _Manager_external; // creates contained object on the heap\n+\n+    template<typename _Tp>\n+      using _Manager = conditional_t<_Internal<_Tp>::value,\n+\t\t\t\t     _Manager_internal<_Tp>,\n+\t\t\t\t     _Manager_external<_Tp>>;\n+\n+    template<typename _Tp, typename _Decayed = decay_t<_Tp>>\n+      using _Decay = enable_if_t<!is_same<_Decayed, any>::value, _Decayed>;\n+\n+  public:\n+    // construct/destruct\n+\n+    /// Default constructor, creates an empty object.\n+    any() noexcept : _M_manager(nullptr) { }\n+\n+    /// Copy constructor, copies the state of @p __other\n+    any(const any& __other)\n+    {\n+      if (__other.empty())\n+\t_M_manager = nullptr;\n+      else\n+\t{\n+\t  _Arg __arg;\n+\t  __arg._M_any = this;\n+\t  __other._M_manager(_Op_clone, &__other, &__arg);\n+\t}\n+    }\n+\n+    /**\n+     * @brief Move constructor, transfer the state from @p __other\n+     *\n+     * @post @c __other.empty() (this postcondition is a GNU extension)\n+     */\n+    any(any&& __other) noexcept\n+    {\n+      if (__other.empty())\n+\t_M_manager = nullptr;\n+      else\n+\t{\n+\t  _Arg __arg;\n+\t  __arg._M_any = this;\n+\t  __other._M_manager(_Op_xfer, &__other, &__arg);\n+\t}\n+    }\n+\n+    /// Construct with a copy of @p __value as the contained object.\n+    template <typename _ValueType, typename _Tp = _Decay<_ValueType>,\n+\t      typename _Mgr = _Manager<_Tp>,\n+              typename enable_if<is_constructible<_Tp, _ValueType&&>::value,\n+                                 bool>::type = true>\n+      any(_ValueType&& __value)\n+      : _M_manager(&_Mgr::_S_manage)\n+      {\n+        _Mgr::_S_create(_M_storage, std::forward<_ValueType>(__value));\n+\tstatic_assert(is_copy_constructible<_Tp>::value,\n+\t\t      \"The contained object must be CopyConstructible\");\n+      }\n+\n+    /// Construct with a copy of @p __value as the contained object.\n+    template <typename _ValueType, typename _Tp = _Decay<_ValueType>,\n+\t      typename _Mgr = _Manager<_Tp>,\n+              typename enable_if<!is_constructible<_Tp, _ValueType&&>::value,\n+                                 bool>::type = false>\n+      any(_ValueType&& __value)\n+      : _M_manager(&_Mgr::_S_manage)\n+      {\n+        _Mgr::_S_create(_M_storage, __value);\n+\tstatic_assert(is_copy_constructible<_Tp>::value,\n+\t\t      \"The contained object must be CopyConstructible\");\n+      }\n+\n+    /// Destructor, calls @c clear()\n+    ~any() { clear(); }\n+\n+    // assignments\n+\n+    /// Copy the state of another object.\n+    any& operator=(const any& __rhs)\n+    {\n+      if (__rhs.empty())\n+\tclear();\n+      else if (this != &__rhs)\n+\t{\n+\t  if (!empty())\n+\t    _M_manager(_Op_destroy, this, nullptr);\n+\t  _Arg __arg;\n+\t  __arg._M_any = this;\n+\t  __rhs._M_manager(_Op_clone, &__rhs, &__arg);\n+\t}\n+      return *this;\n+    }\n+\n+    /**\n+     * @brief Move assignment operator\n+     *\n+     * @post @c __rhs.empty() (not guaranteed for other implementations)\n+     */\n+    any& operator=(any&& __rhs) noexcept\n+    {\n+      if (__rhs.empty())\n+\tclear();\n+      else if (this != &__rhs)\n+\t{\n+\t  if (!empty())\n+\t    _M_manager(_Op_destroy, this, nullptr);\n+\t  _Arg __arg;\n+\t  __arg._M_any = this;\n+\t  __rhs._M_manager(_Op_xfer, &__rhs, &__arg);\n+\t}\n+      return *this;\n+    }\n+\n+    /// Store a copy of @p __rhs as the contained object.\n+    template<typename _ValueType>\n+      enable_if_t<!is_same<any, decay_t<_ValueType>>::value, any&>\n+      operator=(_ValueType&& __rhs)\n+      {\n+\t*this = any(std::forward<_ValueType>(__rhs));\n+\treturn *this;\n+      }\n+\n+    // modifiers\n+\n+    /// If not empty, destroy the contained object.\n+    void clear() noexcept\n+    {\n+      if (!empty())\n+      {\n+\t_M_manager(_Op_destroy, this, nullptr);\n+\t_M_manager = nullptr;\n+      }\n+    }\n+\n+    /// Exchange state with another object.\n+    void swap(any& __rhs) noexcept\n+    {\n+      if (empty() && __rhs.empty())\n+\treturn;\n+\n+      if (!empty() && !__rhs.empty())\n+\t{\n+\t  if (this == &__rhs)\n+\t    return;\n+\n+\t  any __tmp;\n+\t  _Arg __arg;\n+\t  __arg._M_any = &__tmp;\n+\t  __rhs._M_manager(_Op_xfer, &__rhs, &__arg);\n+\t  __arg._M_any = &__rhs;\n+\t  _M_manager(_Op_xfer, this, &__arg);\n+\t  __arg._M_any = this;\n+\t  __tmp._M_manager(_Op_xfer, &__tmp, &__arg);\n+\t}\n+      else\n+\t{\n+\t  any* __empty = empty() ? this : &__rhs;\n+\t  any* __full = empty() ? &__rhs : this;\n+\t  _Arg __arg;\n+\t  __arg._M_any = __empty;\n+\t  __full->_M_manager(_Op_xfer, __full, &__arg);\n+\t}\n+    }\n+\n+    // observers\n+\n+    /// Reports whether there is a contained object or not.\n+    bool empty() const noexcept { return _M_manager == nullptr; }\n+\n+#if __cpp_rtti\n+    /// The @c typeid of the contained object, or @c typeid(void) if empty.\n+    const type_info& type() const noexcept\n+    {\n+      if (empty())\n+\treturn typeid(void);\n+      _Arg __arg;\n+      _M_manager(_Op_get_type_info, this, &__arg);\n+      return *__arg._M_typeinfo;\n+    }\n+#endif\n+\n+    template<typename _Tp>\n+      static constexpr bool __is_valid_cast()\n+      { return __or_<is_reference<_Tp>, is_copy_constructible<_Tp>>::value; }\n+\n+  private:\n+    enum _Op {\n+\t_Op_access, _Op_get_type_info, _Op_clone, _Op_destroy, _Op_xfer\n+    };\n+\n+    union _Arg\n+    {\n+\tvoid* _M_obj;\n+\tconst std::type_info* _M_typeinfo;\n+\tany* _M_any;\n+    };\n+\n+    void (*_M_manager)(_Op, const any*, _Arg*);\n+    _Storage _M_storage;\n+\n+    template<typename _Tp>\n+      friend void* __any_caster(const any* __any);\n+\n+    // Manage in-place contained object.\n+    template<typename _Tp>\n+      struct _Manager_internal\n+      {\n+\tstatic void\n+\t_S_manage(_Op __which, const any* __anyp, _Arg* __arg);\n+\n+\ttemplate<typename _Up>\n+\t  static void\n+\t  _S_create(_Storage& __storage, _Up&& __value)\n+\t  {\n+\t    void* __addr = &__storage._M_buffer;\n+\t    ::new (__addr) _Tp(std::forward<_Up>(__value));\n+\t  }\n+      };\n+\n+    // Manage external contained object.\n+    template<typename _Tp>\n+      struct _Manager_external\n+      {\n+\tstatic void\n+\t_S_manage(_Op __which, const any* __anyp, _Arg* __arg);\n+\n+\ttemplate<typename _Up>\n+\t  static void\n+\t  _S_create(_Storage& __storage, _Up&& __value)\n+\t  {\n+\t    __storage._M_ptr = new _Tp(std::forward<_Up>(__value));\n+\t  }\n+      };\n+  };\n+\n+  /// Exchange the states of two @c any objects.\n+  inline void swap(any& __x, any& __y) noexcept { __x.swap(__y); }\n+\n+  /**\n+   * @brief Access the contained object.\n+   *\n+   * @tparam  _ValueType  A const-reference or CopyConstructible type.\n+   * @param   __any       The object to access.\n+   * @return  The contained object.\n+   * @throw   bad_any_cast If <code>\n+   *          __any.type() != typeid(remove_reference_t<_ValueType>)\n+   *          </code>\n+   */\n+  template<typename _ValueType>\n+    inline _ValueType any_cast(const any& __any)\n+    {\n+      static_assert(any::__is_valid_cast<_ValueType>(),\n+\t  \"Template argument must be a reference or CopyConstructible type\");\n+      auto __p = any_cast<add_const_t<remove_reference_t<_ValueType>>>(&__any);\n+      if (__p)\n+\treturn *__p;\n+      __throw_bad_any_cast();\n+    }\n+\n+  /**\n+   * @brief Access the contained object.\n+   *\n+   * @tparam  _ValueType  A reference or CopyConstructible type.\n+   * @param   __any       The object to access.\n+   * @return  The contained object.\n+   * @throw   bad_any_cast If <code>\n+   *          __any.type() != typeid(remove_reference_t<_ValueType>)\n+   *          </code>\n+   *\n+   * @{\n+   */\n+  template<typename _ValueType>\n+    inline _ValueType any_cast(any& __any)\n+    {\n+      static_assert(any::__is_valid_cast<_ValueType>(),\n+\t  \"Template argument must be a reference or CopyConstructible type\");\n+      auto __p = any_cast<remove_reference_t<_ValueType>>(&__any);\n+      if (__p)\n+\treturn *__p;\n+      __throw_bad_any_cast();\n+    }\n+\n+  template<typename _ValueType,\n+           typename enable_if<!is_move_constructible<_ValueType>::value\n+                              || is_lvalue_reference<_ValueType>::value,\n+                              bool>::type = true>\n+    inline _ValueType any_cast(any&& __any)\n+    {\n+      static_assert(any::__is_valid_cast<_ValueType>(),\n+\t  \"Template argument must be a reference or CopyConstructible type\");\n+      auto __p = any_cast<remove_reference_t<_ValueType>>(&__any);\n+      if (__p)\n+\treturn *__p;\n+      __throw_bad_any_cast();\n+    }\n+\n+  template<typename _ValueType,\n+           typename enable_if<is_move_constructible<_ValueType>::value\n+                              && !is_lvalue_reference<_ValueType>::value,\n+                              bool>::type = false>\n+    inline _ValueType any_cast(any&& __any)\n+    {\n+      static_assert(any::__is_valid_cast<_ValueType>(),\n+\t  \"Template argument must be a reference or CopyConstructible type\");\n+      auto __p = any_cast<remove_reference_t<_ValueType>>(&__any);\n+      if (__p)\n+\treturn std::move(*__p);\n+      __throw_bad_any_cast();\n+    }\n+  // @}\n+\n+  template<typename _Tp>\n+    void* __any_caster(const any* __any)\n+    {\n+      if (__any->_M_manager != &any::_Manager<decay_t<_Tp>>::_S_manage)\n+\treturn nullptr;\n+      any::_Arg __arg;\n+      __any->_M_manager(any::_Op_access, __any, &__arg);\n+      return __arg._M_obj;\n+    }\n+\n+  /**\n+   * @brief Access the contained object.\n+   *\n+   * @tparam  _ValueType  The type of the contained object.\n+   * @param   __any       A pointer to the object to access.\n+   * @return  The address of the contained object if <code>\n+   *          __any != nullptr && __any.type() == typeid(_ValueType)\n+   *          </code>, otherwise a null pointer.\n+   *\n+   * @{\n+   */\n+  template<typename _ValueType>\n+    inline const _ValueType* any_cast(const any* __any) noexcept\n+    {\n+      if (__any)\n+\treturn static_cast<_ValueType*>(__any_caster<_ValueType>(__any));\n+      return nullptr;\n+    }\n+\n+  template<typename _ValueType>\n+    inline _ValueType* any_cast(any* __any) noexcept\n+    {\n+      if (__any)\n+\treturn static_cast<_ValueType*>(__any_caster<_ValueType>(__any));\n+      return nullptr;\n+    }\n+  // @}\n+\n+  template<typename _Tp>\n+    void\n+    any::_Manager_internal<_Tp>::\n+    _S_manage(_Op __which, const any* __any, _Arg* __arg)\n+    {\n+      // The contained object is in _M_storage._M_buffer\n+      auto __ptr = reinterpret_cast<const _Tp*>(&__any->_M_storage._M_buffer);\n+      switch (__which)\n+      {\n+      case _Op_access:\n+\t__arg->_M_obj = const_cast<_Tp*>(__ptr);\n+\tbreak;\n+      case _Op_get_type_info:\n+#if __cpp_rtti\n+\t__arg->_M_typeinfo = &typeid(_Tp);\n+#endif\n+\tbreak;\n+      case _Op_clone:\n+\t::new(&__arg->_M_any->_M_storage._M_buffer) _Tp(*__ptr);\n+\t__arg->_M_any->_M_manager = __any->_M_manager;\n+\tbreak;\n+      case _Op_destroy:\n+\t__ptr->~_Tp();\n+\tbreak;\n+      case _Op_xfer:\n+\t::new(&__arg->_M_any->_M_storage._M_buffer) _Tp(*__ptr);\n+\t__ptr->~_Tp();\n+\t__arg->_M_any->_M_manager = __any->_M_manager;\n+\tconst_cast<any*>(__any)->_M_manager = nullptr;\n+\tbreak;\n+      }\n+    }\n+\n+  template<typename _Tp>\n+    void\n+    any::_Manager_external<_Tp>::\n+    _S_manage(_Op __which, const any* __any, _Arg* __arg)\n+    {\n+      // The contained object is *_M_storage._M_ptr\n+      auto __ptr = static_cast<const _Tp*>(__any->_M_storage._M_ptr);\n+      switch (__which)\n+      {\n+      case _Op_access:\n+\t__arg->_M_obj = const_cast<_Tp*>(__ptr);\n+\tbreak;\n+      case _Op_get_type_info:\n+#if __cpp_rtti\n+\t__arg->_M_typeinfo = &typeid(_Tp);\n+#endif\n+\tbreak;\n+      case _Op_clone:\n+\t__arg->_M_any->_M_storage._M_ptr = new _Tp(*__ptr);\n+\t__arg->_M_any->_M_manager = __any->_M_manager;\n+\tbreak;\n+      case _Op_destroy:\n+\tdelete __ptr;\n+\tbreak;\n+      case _Op_xfer:\n+\t__arg->_M_any->_M_storage._M_ptr = __any->_M_storage._M_ptr;\n+\t__arg->_M_any->_M_manager = __any->_M_manager;\n+\tconst_cast<any*>(__any)->_M_manager = nullptr;\n+\tbreak;\n+      }\n+    }\n+\n+  /// @}\n+  \n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+\n+#endif // C++14\n+\n+#endif // _GLIBCXX_ANY"}, {"sha": "582a92d2f07f066856bab5d42d4bd1be2a5951c8", "filename": "libstdc++-v3/testsuite/20_util/any/assign/1.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2F1.cc?ref=52e862219926fb800c55cdf36cb2e18ac4555dac", "patch": "@@ -0,0 +1,60 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2014-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <any>\n+#include <testsuite_hooks.h>\n+\n+using std::any;\n+\n+void test01()\n+{\n+  any x;\n+  any y;\n+  y = x;\n+  VERIFY( x.empty() );\n+  VERIFY( y.empty() );\n+\n+  y = std::move(x);\n+  VERIFY( x.empty() );\n+  VERIFY( y.empty() );\n+}\n+\n+void test02()\n+{\n+  any x(1);\n+  any y;\n+  y = x;\n+  VERIFY( !x.empty() );\n+  VERIFY( !y.empty() );\n+\n+  x = std::move(y);\n+  VERIFY( !x.empty() );\n+  VERIFY( y.empty() );\n+\n+  x = y;\n+  VERIFY( x.empty() );\n+  VERIFY( y.empty() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "b333e5df7969da39bdc0d01fb47256294e6e2803", "filename": "libstdc++-v3/testsuite/20_util/any/assign/2.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2F2.cc?ref=52e862219926fb800c55cdf36cb2e18ac4555dac", "patch": "@@ -0,0 +1,51 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2014-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <any>\n+#include <testsuite_hooks.h>\n+\n+using std::any;\n+using std::any_cast;\n+\n+struct X\n+{\n+  bool moved = false;\n+  bool moved_from = false;\n+  X() = default;\n+  X(const X&) = default;\n+  X(X&& x) : moved(true) { x.moved_from = true; }\n+};\n+\n+void test01()\n+{\n+  X x;\n+  any a1;\n+  a1 = x;\n+  VERIFY(x.moved_from == false);\n+  any a2;\n+  a2 = std::move(x);\n+  VERIFY(x.moved_from == true);\n+  VERIFY(any_cast<X&>(a2).moved == true );\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "e773efad11c36a6c145fb508909562ac50e601c2", "filename": "libstdc++-v3/testsuite/20_util/any/assign/self.cc", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2Fself.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2Fself.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2Fself.cc?ref=52e862219926fb800c55cdf36cb2e18ac4555dac", "patch": "@@ -0,0 +1,93 @@\n+// Copyright (C) 2015-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+\n+#include <any>\n+#include <set>\n+#include <testsuite_hooks.h>\n+\n+std::set<const void*> live_objects;\n+\n+struct A {\n+  A() { live_objects.insert(this); }\n+  ~A() { live_objects.erase(this); }\n+  A(const A& a) { VERIFY(live_objects.count(&a)); live_objects.insert(this); }\n+};\n+\n+void\n+test01()\n+{\n+  using std::any;\n+\n+  any a;\n+  a = a;\n+  VERIFY( a.empty() );\n+\n+  a = A{};\n+  a = a;\n+  VERIFY( !a.empty() );\n+\n+  a.clear();\n+  VERIFY( live_objects.empty() );\n+}\n+\n+void\n+test02()\n+{\n+  using std::any;\n+\n+  struct X {\n+    any a;\n+  };\n+\n+  X x;\n+  std::swap(x, x); // results in \"self-move-assignment\" of X::a\n+  VERIFY( x.a.empty() );\n+\n+  x.a = A{};\n+  std::swap(x, x); // results in \"self-move-assignment\" of X::a\n+  VERIFY( !x.a.empty() );\n+\n+  x.a.clear();\n+  VERIFY( live_objects.empty() );\n+}\n+\n+void\n+test03()\n+{\n+  using std::any;\n+\n+  any a;\n+  a.swap(a);\n+  VERIFY( a.empty() );\n+\n+  a = A{};\n+  a.swap(a);\n+  VERIFY( !a.empty() );\n+\n+  a.clear();\n+  VERIFY( live_objects.empty() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}, {"sha": "d66320413d4f8845628ffaba85184e3bc50e3aed", "filename": "libstdc++-v3/testsuite/20_util/any/cons/1.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2F1.cc?ref=52e862219926fb800c55cdf36cb2e18ac4555dac", "patch": "@@ -0,0 +1,58 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2014-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <any>\n+#include <testsuite_hooks.h>\n+\n+using std::any;\n+\n+void test01()\n+{\n+  any x;\n+  VERIFY( x.empty() );\n+\n+  any y(x);\n+  VERIFY( x.empty() );\n+  VERIFY( y.empty() );\n+\n+  any z(std::move(y));\n+  VERIFY( y.empty() );\n+  VERIFY( z.empty() );\n+}\n+\n+void test02()\n+{\n+  any x(1);\n+  VERIFY( !x.empty() );\n+\n+  any y(x);\n+  VERIFY( !x.empty() );\n+  VERIFY( !y.empty() );\n+\n+  any z(std::move(y));\n+  VERIFY( y.empty() );\n+  VERIFY( !z.empty() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "613fa626d0671d7d0b9c982fe9b7d2f1ca668b1d", "filename": "libstdc++-v3/testsuite/20_util/any/cons/2.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2F2.cc?ref=52e862219926fb800c55cdf36cb2e18ac4555dac", "patch": "@@ -0,0 +1,49 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2014-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <any>\n+#include <testsuite_hooks.h>\n+\n+using std::any;\n+using std::any_cast;\n+\n+struct X\n+{\n+  bool moved = false;\n+  bool moved_from = false;\n+  X() = default;\n+  X(const X&) = default;\n+  X(X&& x) : moved(true) { x.moved_from = true; }\n+};\n+\n+void test01()\n+{\n+  X x;\n+  any a1(x);\n+  VERIFY(x.moved_from == false);\n+  any a2(std::move(x));\n+  VERIFY(x.moved_from == true);\n+  VERIFY(any_cast<X&>(a2).moved == true );\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "9b23d8ac0f4ca236b01d13cdc34371aa7f4b569e", "filename": "libstdc++-v3/testsuite/20_util/any/cons/aligned.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2Faligned.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2Faligned.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2Faligned.cc?ref=52e862219926fb800c55cdf36cb2e18ac4555dac", "patch": "@@ -0,0 +1,52 @@\n+// Copyright (C) 2015-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+\n+#include <any>\n+#include <cstdint>\n+#include <testsuite_hooks.h>\n+\n+// Alignment requiremnts of this type prevent it being stored in 'any'\n+struct alignas(2 * alignof(void*)) X { };\n+\n+bool\n+stored_internally(void* obj, const std::any& a)\n+{\n+  std::uintptr_t a_addr = reinterpret_cast<std::uintptr_t>(&a);\n+  std::uintptr_t a_end = a_addr + sizeof(a);\n+  std::uintptr_t obj_addr = reinterpret_cast<std::uintptr_t>(obj);\n+  return (a_addr <= obj_addr) && (obj_addr < a_end);\n+}\n+\n+void\n+test01()\n+{\n+  std::any a = X{};\n+  X& x = std::any_cast<X&>(a);\n+  VERIFY( !stored_internally(&x, a) );\n+\n+  a = 'X';\n+  char& c = std::any_cast<char&>(a);\n+  VERIFY( stored_internally(&c, a) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "bb46452c6190915d25d1918bfe26568e80afbb67", "filename": "libstdc++-v3/testsuite/20_util/any/cons/nontrivial.cc", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2Fnontrivial.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2Fnontrivial.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2Fnontrivial.cc?ref=52e862219926fb800c55cdf36cb2e18ac4555dac", "patch": "@@ -0,0 +1,75 @@\n+// Copyright (C) 2015-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+\n+#include <any>\n+#include <testsuite_hooks.h>\n+\n+struct LocationAware\n+{\n+  LocationAware() { }\n+  ~LocationAware() { VERIFY(self == this); }\n+  LocationAware(const LocationAware&) { }\n+  LocationAware& operator=(const LocationAware&) { return *this; }\n+  LocationAware(LocationAware&&) noexcept { }\n+  LocationAware& operator=(LocationAware&&) noexcept { return *this; }\n+\n+  void* const self = this;\n+};\n+static_assert(std::is_nothrow_move_constructible<LocationAware>::value, \"\");\n+static_assert(!std::is_trivially_copyable<LocationAware>::value, \"\");\n+\n+using std::any;\n+\n+void\n+test01()\n+{\n+\n+  LocationAware l;\n+  any a = l;\n+}\n+\n+void\n+test02()\n+{\n+  LocationAware l;\n+  any a = l;\n+  any b = a;\n+  {\n+    any tmp = std::move(a);\n+    a = std::move(b);\n+    b = std::move(tmp);\n+  }\n+}\n+\n+void\n+test03()\n+{\n+  LocationAware l;\n+  any a = l;\n+  any b = a;\n+  swap(a, b);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}, {"sha": "96f9419e070399082ba8fce4ed818a8c1008350c", "filename": "libstdc++-v3/testsuite/20_util/any/misc/any_cast.cc", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast.cc?ref=52e862219926fb800c55cdf36cb2e18ac4555dac", "patch": "@@ -0,0 +1,114 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2014-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <any>\n+#include <string>\n+#include <cstring>\n+#include <testsuite_hooks.h>\n+\n+using std::any;\n+using std::any_cast;\n+\n+void test01()\n+{\n+  using std::string;\n+  using std::strcmp;\n+\n+  // taken from example in N3804 proposal\n+\n+  any x(5);                                   // x holds int\n+  VERIFY(any_cast<int>(x) == 5);              // cast to value\n+  any_cast<int&>(x) = 10;                     // cast to reference\n+  VERIFY(any_cast<int>(x) == 10); \n+\n+  x = \"Meow\";                                 // x holds const char*\n+  VERIFY(strcmp(any_cast<const char*>(x), \"Meow\") == 0);\n+  any_cast<const char*&>(x) = \"Harry\";\n+  VERIFY(strcmp(any_cast<const char*>(x), \"Harry\") == 0);\n+\n+  x = string(\"Meow\");                         // x holds string\n+  string s, s2(\"Jane\");\n+  s = move(any_cast<string&>(x));             // move from any \n+  VERIFY(s == \"Meow\");\n+  any_cast<string&>(x) = move(s2);            // move to any\n+  VERIFY(any_cast<const string&>(x) == \"Jane\");\n+\n+  string cat(\"Meow\");\n+  const any y(cat);                           // const y holds string\n+  VERIFY(any_cast<const string&>(y) == cat);\n+}\n+\n+void test02()\n+{\n+  using std::bad_any_cast;\n+  any x(1);\n+  auto p = any_cast<double>(&x);\n+  VERIFY(p == nullptr);\n+\n+  x = 1.0;\n+  p = any_cast<double>(&x);\n+  VERIFY(p != nullptr);\n+\n+  x = any();\n+  p = any_cast<double>(&x);\n+  VERIFY(p == nullptr);\n+\n+  try {\n+    any_cast<double>(x);\n+    VERIFY(false);\n+  } catch (const bad_any_cast&) {\n+  }\n+}\n+\n+static int move_count = 0;\n+\n+void test03()\n+{\n+  struct MoveEnabled\n+  {\n+    MoveEnabled(MoveEnabled&&)\n+    {\n+      ++move_count;\n+    }\n+    MoveEnabled() = default;\n+    MoveEnabled(const MoveEnabled&) = default;\n+  };\n+  MoveEnabled m;\n+  MoveEnabled m2 = any_cast<MoveEnabled>(any(m));\n+  VERIFY(move_count == 1);\n+  MoveEnabled&& m3 = any_cast<MoveEnabled&&>(any(m));\n+  VERIFY(move_count == 1);\n+  struct MoveDeleted\n+  {\n+    MoveDeleted(MoveDeleted&&) = delete;\n+    MoveDeleted() = default;\n+    MoveDeleted(const MoveDeleted&) = default;\n+  };\n+  MoveDeleted md;\n+  MoveDeleted&& md2 = any_cast<MoveDeleted>(any(std::move(md)));\n+  MoveDeleted&& md3 = any_cast<MoveDeleted&&>(any(std::move(md)));\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}, {"sha": "43c6c6b4a26ae91321177425b7840cd3424ede49", "filename": "libstdc++-v3/testsuite/20_util/any/misc/any_cast_neg.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_neg.cc?ref=52e862219926fb800c55cdf36cb2e18ac4555dac", "patch": "@@ -0,0 +1,30 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2014-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <any>\n+\n+void test01()\n+{\n+  using std::any;\n+  using std::any_cast;\n+\n+  const any y(1);\n+  any_cast<int&>(y); // { dg-error \"qualifiers\" \"\" { target { *-*-* } } 357 }\n+}"}, {"sha": "fa16f2371be4cdd1c286fa4f77a852af5d5d935b", "filename": "libstdc++-v3/testsuite/20_util/any/misc/any_cast_no_rtti.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_no_rtti.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_no_rtti.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_no_rtti.cc?ref=52e862219926fb800c55cdf36cb2e18ac4555dac", "patch": "@@ -0,0 +1,54 @@\n+// { dg-options \"-std=gnu++17 -fno-rtti\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2014-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <any>\n+#include <string>\n+#include <cstring>\n+#include <testsuite_hooks.h>\n+\n+using std::any;\n+using std::any_cast;\n+\n+void test01()\n+{\n+  using std::bad_any_cast;\n+  any x(1);\n+  auto p = any_cast<double>(&x);\n+  VERIFY(p == nullptr);\n+\n+  x = 1.0;\n+  p = any_cast<double>(&x);\n+  VERIFY(p != nullptr);\n+\n+  x = any();\n+  p = any_cast<double>(&x);\n+  VERIFY(p == nullptr);\n+\n+  try {\n+    any_cast<double>(x);\n+    VERIFY(false);\n+  } catch (const bad_any_cast&) {\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "0b3e1eb26de3c8c8cac6f31f32a18bb4247b50f4", "filename": "libstdc++-v3/testsuite/20_util/any/misc/swap.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fswap.cc?ref=52e862219926fb800c55cdf36cb2e18ac4555dac", "patch": "@@ -0,0 +1,38 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2014-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <any>\n+#include <testsuite_hooks.h>\n+\n+using std::any;\n+\n+void test01()\n+{\n+  any x(1);\n+  any y;\n+  swap(x, y);\n+  VERIFY( x.empty() );\n+  VERIFY( !y.empty() );\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "36b9c247843fc7ef22261790fae8e641854172e2", "filename": "libstdc++-v3/testsuite/20_util/any/modifiers/1.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmodifiers%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmodifiers%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmodifiers%2F1.cc?ref=52e862219926fb800c55cdf36cb2e18ac4555dac", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2014-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <any>\n+#include <testsuite_hooks.h>\n+\n+using std::any;\n+\n+void test01()\n+{\n+  any x(1);\n+  any y;\n+  x.swap(y);\n+  VERIFY( x.empty() );\n+  VERIFY( !y.empty() );\n+  x.swap(y);\n+  VERIFY( !x.empty() );\n+  VERIFY( y.empty() );\n+\n+  x.clear();\n+  VERIFY( x.empty() );\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "af4dc30c766bb25be19029fa2f6dd79d1ffe2b58", "filename": "libstdc++-v3/testsuite/20_util/any/observers/type.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fobservers%2Ftype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fobservers%2Ftype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fobservers%2Ftype.cc?ref=52e862219926fb800c55cdf36cb2e18ac4555dac", "patch": "@@ -0,0 +1,39 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2014-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <any>\n+#include <testsuite_hooks.h>\n+\n+using std::any;\n+\n+void test01()\n+{\n+  any x;\n+  VERIFY( x.type() == typeid(void) );\n+  x = 1;\n+  VERIFY( x.type() == typeid(int) );\n+  x = any();\n+  VERIFY( x.type() == typeid(void) );\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "11a57924b25e8ec59accb973cecd8a951102ea2d", "filename": "libstdc++-v3/testsuite/20_util/any/typedefs.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e862219926fb800c55cdf36cb2e18ac4555dac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Ftypedefs.cc?ref=52e862219926fb800c55cdf36cb2e18ac4555dac", "patch": "@@ -0,0 +1,30 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2014-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <any>\n+#include <type_traits>\n+#include <typeinfo>\n+\n+using check1_t = std::any;\n+using check2_t = std::bad_any_cast;\n+\n+static_assert(std::is_base_of<std::bad_cast, check2_t>::value,\n+\t      \"bad_any_cast must derive from bad_cast\");\n+"}]}