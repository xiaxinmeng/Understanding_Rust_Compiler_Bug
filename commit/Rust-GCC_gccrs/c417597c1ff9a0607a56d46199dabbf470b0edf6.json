{"sha": "c417597c1ff9a0607a56d46199dabbf470b0edf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQxNzU5N2MxZmY5YTA2MDdhNTZkNDYxOTlkYWJiZjQ3MGIwZWRmNg==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2012-11-11T01:45:25Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2012-11-11T01:45:25Z"}, "message": "extend.texi: Copy-edit to fix incorrect uses of \"which\" and \"that\" throughout the file.\n\n2012-11-10  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* doc/extend.texi: Copy-edit to fix incorrect uses of \"which\" \n\tand \"that\" throughout the file.\n\nFrom-SVN: r193400", "tree": {"sha": "37a3c2698d782817d232c3114889a0c2a8a07564", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37a3c2698d782817d232c3114889a0c2a8a07564"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c417597c1ff9a0607a56d46199dabbf470b0edf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c417597c1ff9a0607a56d46199dabbf470b0edf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c417597c1ff9a0607a56d46199dabbf470b0edf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c417597c1ff9a0607a56d46199dabbf470b0edf6/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f47cf0ba24c61b83e4c1ec8b5483fb5319186cfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f47cf0ba24c61b83e4c1ec8b5483fb5319186cfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f47cf0ba24c61b83e4c1ec8b5483fb5319186cfe"}], "stats": {"total": 172, "additions": 89, "deletions": 83}, "files": [{"sha": "d056fdce1f9f70604eed1328f82493892efa43aa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c417597c1ff9a0607a56d46199dabbf470b0edf6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c417597c1ff9a0607a56d46199dabbf470b0edf6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c417597c1ff9a0607a56d46199dabbf470b0edf6", "patch": "@@ -1,3 +1,8 @@\n+2012-11-10  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* doc/extend.texi: Copy-edit to fix incorrect uses of \"which\" \n+\tand \"that\" throughout the file.\n+\n 2012-11-10  Andrew Pinski  <apinski@cavium.com>\n \n \tPR bootstrap/55202"}, {"sha": "4885535b8c785f410944e18b26a0f16f5e8736a8", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 84, "deletions": 83, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c417597c1ff9a0607a56d46199dabbf470b0edf6/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c417597c1ff9a0607a56d46199dabbf470b0edf6/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=c417597c1ff9a0607a56d46199dabbf470b0edf6", "patch": "@@ -463,7 +463,7 @@ C++ Conference Proceedings, October 17-21, 1988).\n A nested function can jump to a label inherited from a containing\n function, provided the label is explicitly declared in the containing\n function (@pxref{Local Labels}).  Such a jump returns instantly to the\n-containing function, exiting the nested function which did the\n+containing function, exiting the nested function that did the\n @code{goto} and any intermediate functions as well.  Here is an example:\n \n @smallexample\n@@ -571,7 +571,7 @@ returned by @code{__builtin_apply}.\n \n @deftypefn {Built-in Function} {} __builtin_va_arg_pack ()\n This built-in function represents all anonymous arguments of an inline\n-function.  It can be used only in inline functions which are always\n+function.  It can be used only in inline functions that are always\n inlined, never compiled as a separate function, such as those using\n @code{__attribute__ ((__always_inline__))} or\n @code{__attribute__ ((__gnu_inline__))} extern inline functions.\n@@ -597,7 +597,7 @@ myprintf (FILE *f, const char *format, ...)\n \n @deftypefn {Built-in Function} {size_t} __builtin_va_arg_pack_len ()\n This built-in function returns the number of anonymous arguments of\n-an inline function.  It can be used only in inline functions which\n+an inline function.  It can be used only in inline functions that\n are always inlined, never compiled as a separate function, such\n as those using @code{__attribute__ ((__always_inline__))} or\n @code{__attribute__ ((__gnu_inline__))} extern inline functions.\n@@ -674,7 +674,7 @@ such a type.\n \n @code{typeof} is often useful in conjunction with the\n statements-within-expressions feature.  Here is how the two together can\n-be used to define a safe ``maximum'' macro that operates on any\n+be used to define a safe ``maximum'' macro which operates on any\n arithmetic type and evaluates each of its arguments exactly once:\n \n @smallexample\n@@ -750,7 +750,7 @@ pointers to @code{char}.\n @end itemize\n \n @emph{Compatibility Note:} In addition to @code{typeof}, GCC 2 supported\n-a more limited extension which permitted one to write\n+a more limited extension that permitted one to write\n \n @smallexample\n typedef @var{T} = @var{expr};\n@@ -759,7 +759,7 @@ typedef @var{T} = @var{expr};\n @noindent\n with the effect of declaring @var{T} to have the type of the expression\n @var{expr}.  This extension does not work with GCC 3 (versions between\n-3.0 and 3.2 crash; 3.2.1 and later give an error).  Code which\n+3.0 and 3.2 crash; 3.2.1 and later give an error).  Code that\n relies on it should be rewritten to use @code{typeof}:\n \n @smallexample\n@@ -1417,7 +1417,7 @@ space.\n @cindex flexible array members\n \n Zero-length arrays are allowed in GNU C@.  They are very useful as the\n-last element of a structure which is really a header for a variable-length\n+last element of a structure that is really a header for a variable-length\n object:\n \n @smallexample\n@@ -1877,7 +1877,7 @@ int a[6] = @{ 0, 0, 15, 0, 29, 0 @};\n The index values must be constant expressions, even if the array being\n initialized is automatic.\n \n-An alternative syntax for this which has been obsolete since GCC 2.5 but\n+An alternative syntax for this that has been obsolete since GCC 2.5 but\n GCC still accepts is to write @samp{[@var{index}]} before the element\n value, with no @samp{=}.\n \n@@ -1919,7 +1919,7 @@ is equivalent to\n struct point p = @{ xvalue, yvalue @};\n @end smallexample\n \n-Another syntax which has the same meaning, obsolete since GCC 2.5, is\n+Another syntax that has the same meaning, obsolete since GCC 2.5, is\n @samp{@var{fieldname}:}, as shown here:\n \n @smallexample\n@@ -2210,7 +2210,7 @@ if no optimization level is specified.\n \n @item gnu_inline\n @cindex @code{gnu_inline} function attribute\n-This attribute should be used with a function which is also declared\n+This attribute should be used with a function that is also declared\n with the @code{inline} keyword.  It directs GCC to treat the function\n as if it were defined in gnu90 mode even when compiling in C99 or\n gnu99 mode.\n@@ -2248,7 +2248,7 @@ behavior.\n \n @item artificial\n @cindex @code{artificial} function attribute\n-This attribute is useful for small inline wrappers which if possible\n+This attribute is useful for small inline wrappers that if possible\n should appear during debugging as a unit.  Depending on the debug\n info format it either means marking the function as artificial\n or using the caller location for all instructions within the inlined\n@@ -2271,7 +2271,7 @@ the current inlining parameters.\n @cindex @code{error} function attribute\n If this attribute is used on a function declaration and a call to such a function\n is not eliminated through dead code elimination or other optimizations, an error\n-which includes @var{message} is diagnosed.  This is useful\n+that includes @var{message} is diagnosed.  This is useful\n for compile time checking, especially together with @code{__builtin_constant_p}\n and inline functions where checking the inline function arguments is not\n possible through @code{extern char [(condition) ? 1 : -1];} tricks.\n@@ -2284,7 +2284,7 @@ functions or when not emitting debugging information.\n @cindex @code{warning} function attribute\n If this attribute is used on a function declaration and a call to such a function\n is not eliminated through dead code elimination or other optimizations, a warning\n-which includes @var{message} is diagnosed.  This is useful\n+that includes @var{message} is diagnosed.  This is useful\n for compile time checking, especially together with @code{__builtin_constant_p}\n and inline functions.  While it is possible to define the function with\n a message in @code{.gnu.warning*} section, when using this attribute the problem\n@@ -2499,7 +2499,7 @@ the effect of the @option{-fwhole-program} command-line option, so the\n object remains visible outside the current compilation unit. If @option{-fwhole-program} is used together with @option{-flto} and @command{gold} is used as the linker plugin, @code{externally_visible} attributes are automatically added to functions (not variable yet due to a current @command{gold} issue) that are accessed outside of LTO objects according to resolution file produced by @command{gold}.  For other linkers that cannot generate resolution file, explicit @code{externally_visible} attributes are still necessary.\n \n @item far\n-@cindex functions which handle memory bank switching\n+@cindex functions that handle memory bank switching\n On 68HC11 and 68HC12 the @code{far} attribute causes the compiler to\n use a calling convention that takes care of switching memory banks when\n entering and leaving a function.  This calling convention is also the\n@@ -2516,7 +2516,7 @@ instead of using @code{rts}.  The board-specific return routine simulates\n the @code{rtc}.\n \n On MeP targets this causes the compiler to use a calling convention\n-which assumes the called function is too far away for the built-in\n+that assumes the called function is too far away for the built-in\n addressing modes.\n \n @item fast_interrupt\n@@ -2551,7 +2551,7 @@ and for static member methods.\n @cindex @code{format} function attribute\n @opindex Wformat\n The @code{format} attribute specifies that a function takes @code{printf},\n-@code{scanf}, @code{strftime} or @code{strfmon} style arguments which\n+@code{scanf}, @code{strftime} or @code{strfmon} style arguments that\n should be type-checked against a format string.  For example, the\n declaration:\n \n@@ -2598,7 +2598,7 @@ attribute are 2 and 3.\n @opindex ffreestanding\n @opindex fno-builtin\n The @code{format} attribute allows you to identify your own functions\n-which take format strings as arguments, so that GCC can check the\n+that take format strings as arguments, so that GCC can check the\n calls to these functions for errors.  The compiler always (unless\n @option{-ffreestanding} or @option{-fno-builtin} is used) checks formats\n for the standard library functions @code{printf}, @code{fprintf},\n@@ -2657,7 +2657,7 @@ an implicit @code{this} argument, the arguments of such methods should\n be counted from two.\n \n The @code{format-arg} attribute allows you to identify your own\n-functions which modify format strings, so that GCC can check the\n+functions that modify format strings, so that GCC can check the\n calls to @code{printf}, @code{scanf}, @code{strftime} or @code{strfmon}\n type function whose operands are a call to one of your own function.\n The compiler always treats @code{gettext}, @code{dgettext}, and\n@@ -2708,7 +2708,7 @@ the code size by 2 bytes for each call generated to the\n subroutine. The argument to the attribute is the vector number entry\n from the special page vector table which contains the 16 low-order\n bits of the subroutine's entry address. Each vector table has special\n-page number (18 to 255) which are used in @code{jsrs} instruction.\n+page number (18 to 255) that is used in @code{jsrs} instructions.\n Jump addresses of the routines are generated by adding 0x0F0000 (in\n case of M16C targets) or 0xFF0000 (in case of M32C targets), to the 2\n byte addresses set in the vector table. Therefore you need to ensure\n@@ -3079,7 +3079,7 @@ zero -, or if the callee is responsible to pop hidden pointer - @var{number}\n equal to one.  The default i386 ABI assumes that the callee pops the\n stack for hidden pointer.\n \n-Note, that on 32-bit i386 Windows targets the compiler assumes that the\n+Note that on 32-bit i386 Windows targets, the compiler assumes that the\n caller pops the stack for hidden pointer.\n \n @item ms_hook_prologue\n@@ -3103,7 +3103,7 @@ body of an assembly function, while allowing the compiler to construct\n the requisite function declaration for the assembler.\n \n @item near\n-@cindex functions which do not handle memory bank switching on 68HC11/68HC12\n+@cindex functions that do not handle memory bank switching on 68HC11/68HC12\n On 68HC11 and 68HC12 the @code{near} attribute causes the compiler to\n use the normal calling convention based on @code{jsr} and @code{rts}.\n This attribute can be used to cancel the effect of the @option{-mlong-calls}\n@@ -3148,7 +3148,7 @@ inlining.\n @c Don't enumerate the optimizations by name here; we try to be\n @c future-compatible with this mechanism.\n If the function does not have side-effects, there are optimizations\n-other than inlining that causes function calls to be optimized away,\n+other than inlining that cause function calls to be optimized away,\n although the function call is live.  To keep such calls from being\n optimized away, put\n @smallexample\n@@ -3160,7 +3160,7 @@ side-effect.\n @item noclone\n @cindex @code{noclone} function attribute\n This function attribute prevents a function from being considered for\n-cloning - a mechanism which produces specialized copies of functions\n+cloning---a mechanism that produces specialized copies of functions\n and which is (currently) performed by interprocedural constant\n propagation.\n \n@@ -3255,7 +3255,7 @@ implemented in GCC versions earlier than 3.3.\n @cindex @code{nosave_low_regs} attribute\n Use this attribute on SH targets to indicate that an @code{interrupt_handler}\n function should not save and restore registers R0..R7.  This can be used on SH3*\n-and SH4* targets which have a second R0..R7 register bank for non-reentrant\n+and SH4* targets that have a second R0..R7 register bank for non-reentrant\n interrupt handlers.\n \n @item optimize\n@@ -3310,7 +3310,7 @@ The @code{pcs} attribute can be used to control the calling convention\n used for a function on ARM.  The attribute takes an argument that specifies\n the calling convention to use.\n \n-When compiling using the AAPCS ABI (or a variant of that) then valid\n+When compiling using the AAPCS ABI (or a variant of it) then valid\n values for the argument are @code{\"aapcs\"} and @code{\"aapcs-vfp\"}.  In\n order to use a variant other than @code{\"aapcs\"} then the compiler must\n be permitted to use the appropriate co-processor registers (i.e., the\n@@ -3589,7 +3589,7 @@ more than one function to be compiled with specific target options.\n \n For instance on a 386, you could compile one function with\n @code{target(\"sse4.1,arch=core2\")} and another with\n-@code{target(\"sse4a,arch=amdfam10\")} that is equivalent to\n+@code{target(\"sse4a,arch=amdfam10\")}.  This is equivalent to\n compiling the first function with @option{-msse4.1} and\n @option{-march=core2} options, and the second function with\n @option{-msse4a} and @option{-march=amdfam10} options.  It is up to the\n@@ -4044,7 +4044,7 @@ All visibilities are supported on many, but not all, ELF targets\n pseudo-op).  Default visibility is supported everywhere.  Hidden\n visibility is supported on Darwin targets.\n \n-The visibility attribute should be applied only to declarations which\n+The visibility attribute should be applied only to declarations that\n would otherwise have external linkage.  The attribute should be applied\n consistently, so that the same entity should not be declared with\n different settings of the attribute.\n@@ -4109,7 +4109,7 @@ results in warning on line 5.\n @cindex @code{weak} attribute\n The @code{weak} attribute causes the declaration to be emitted as a weak\n symbol rather than a global.  This is primarily useful in defining\n-library functions which can be overridden in user code, though it can\n+library functions that can be overridden in user code, though it can\n also be used with non-function declarations.  Weak symbols are supported\n for ELF targets, and also for a.out targets when using the GNU assembler\n and linker.\n@@ -4246,8 +4246,8 @@ specifiers, not separated by any other tokens.\n In GNU C, an attribute specifier list may appear after the colon following a\n label, other than a @code{case} or @code{default} label.  The only\n attribute it makes sense to use after a label is @code{unused}.  This\n-feature is intended for code generated by programs which contains labels\n-that may be unused but which is compiled with @option{-Wall}.  It is\n+feature is intended for program-generated code that may contain unused labels,\n+but which is compiled with @option{-Wall}.  It is\n not normally appropriate to use in it human-written code, though it\n could be useful in cases where the code that jumps to the label is\n contained within an @code{#ifdef} conditional.  GNU C++ only permits\n@@ -4300,7 +4300,7 @@ specifiers and qualifiers may be an attribute specifier list with no\n other specifiers or qualifiers.\n \n At present, the first parameter in a function prototype must have some\n-type specifier which is not an attribute specifier; this resolves an\n+type specifier that is not an attribute specifier; this resolves an\n ambiguity in the interpretation of @code{void f(int\n (__attribute__((foo)) x))}, but is subject to change.  At present, if\n the parentheses of a function declarator contain only attributes then\n@@ -4548,16 +4548,16 @@ struct foo @{ int x[2] __attribute__ ((aligned (8))); @};\n @end smallexample\n \n @noindent\n-This is an alternative to creating a union with a @code{double} member\n-that forces the union to be double-word aligned.\n+This is an alternative to creating a union with a @code{double} member,\n+which forces the union to be double-word aligned.\n \n As in the preceding examples, you can explicitly specify the alignment\n (in bytes) that you wish the compiler to use for a given variable or\n structure field.  Alternatively, you can leave out the alignment factor\n and just ask the compiler to align a variable or field to the\n default alignment for the target architecture you are compiling for.\n The default alignment is sufficient for all scalar types, but may not be\n-enough for all vector types on a target which supports vector operations.\n+enough for all vector types on a target that supports vector operations.\n The default alignment is fixed for a particular target ABI.\n \n Gcc also provides a target specific macro @code{__BIGGEST_ALIGNMENT__},\n@@ -4931,7 +4931,7 @@ addresses).\n The MeP target has a number of addressing modes and busses.  The\n @code{near} space spans the standard memory space's first 16 megabytes\n (24 bits).  The @code{far} space spans the entire 32-bit memory space.\n-The @code{based} space is a 128 byte region in the memory space which\n+The @code{based} space is a 128 byte region in the memory space that\n is addressed relative to the @code{$tp} register.  The @code{tiny}\n space is a 65536 byte region relative to the @code{$gp} register.  In\n addition to these memory regions, the MeP target has a separate 16-bit\n@@ -5227,16 +5227,16 @@ struct S @{ short f[3]; @} __attribute__ ((aligned));\n \n Whenever you leave out the alignment factor in an @code{aligned}\n attribute specification, the compiler automatically sets the alignment\n-for the type to the largest alignment which is ever used for any data\n+for the type to the largest alignment that is ever used for any data\n type on the target machine you are compiling for.  Doing this can often\n make copy operations more efficient, because the compiler can use\n whatever instructions copy the biggest chunks of memory when performing\n-copies to or from the variables which have types that you have aligned\n+copies to or from the variables that have types that you have aligned\n this way.\n \n In the example above, if the size of each @code{short} is 2 bytes, then\n the size of the entire @code{struct S} type is 6 bytes.  The smallest\n-power of two which is greater than or equal to that is 8, so the\n+power of two that is greater than or equal to that is 8, so the\n compiler sets the alignment for the entire @code{struct S} type to 8\n bytes.\n \n@@ -5299,7 +5299,7 @@ struct __attribute__ ((__packed__)) my_packed_struct\n @end smallexample\n \n You may only specify this attribute on the definition of an @code{enum},\n-@code{struct} or @code{union}, not on a @code{typedef} which does not\n+@code{struct} or @code{union}, not on a @code{typedef} that does not\n also define the enumerated type, structure or union.\n \n @item transparent_union\n@@ -5722,7 +5722,7 @@ implementation defined as to what constitutes a volatile access.  The\n minimum requirement is that at a sequence point all previous accesses\n to volatile objects have stabilized and no subsequent accesses have\n occurred.  Thus an implementation is free to reorder and combine\n-volatile accesses which occur between sequence points, but cannot do\n+volatile accesses that occur between sequence points, but cannot do\n so for accesses across a sequence point.  The use of volatile does\n not allow you to violate the restriction on updating objects multiple\n times between two sequence points.\n@@ -5872,7 +5872,7 @@ operand and list it with the output operands.\n You may, as an alternative, logically split its function into two\n separate operands, one input operand and one write-only output\n operand.  The connection between them is expressed by constraints\n-which say they need to be in the same location when the instruction\n+that say they need to be in the same location when the instruction\n executes.  You can use the same C expression for both operands, or\n different expressions.  For example, here we write the (fictitious)\n @samp{combine} instruction with @code{bar} as its read-only source\n@@ -6075,7 +6075,7 @@ encapsulate them in macros that look like functions.  For example,\n @noindent\n Here the variable @code{__arg} is used to make sure that the instruction\n operates on a proper @code{double} value, and to accept only those\n-arguments @code{x} which can convert automatically to a @code{double}.\n+arguments @code{x} that can convert automatically to a @code{double}.\n \n Another way to make sure the instruction operates on the correct data\n type is to use a cast in the @code{asm}.  This is different from using a\n@@ -6115,7 +6115,7 @@ prove that control flow never reaches the location of the\n instruction.)  Note that even a volatile @code{asm} instruction\n can be moved relative to other code, including across jump\n instructions.  For example, on many targets there is a system\n-register which can be set to control the rounding mode of\n+register that can be set to control the rounding mode of\n floating point operations.  You might try\n setting it with a volatile @code{asm}, like this PowerPC example:\n \n@@ -6425,7 +6425,7 @@ register variable should be allocated.\n @item\n Global register variables reserve registers throughout the program.\n This may be useful in programs such as programming language\n-interpreters which have a couple of global variables that are accessed\n+interpreters that have a couple of global variables that are accessed\n very often.\n \n @item\n@@ -6462,8 +6462,8 @@ register int *foo asm (\"a5\");\n @end smallexample\n \n @noindent\n-Here @code{a5} is the name of the register which should be used.  Choose a\n-register which is normally saved and restored by function calls on your\n+Here @code{a5} is the name of the register that should be used.  Choose a\n+register that is normally saved and restored by function calls on your\n machine, so that library routines will not clobber it.\n \n Naturally the register name is cpu-dependent, so you need to\n@@ -6505,18 +6505,18 @@ might have put something else in that register.  (If you are prepared to\n recompile @code{qsort} with the same global register variable, you can\n solve this problem.)\n \n-If you want to recompile @code{qsort} or other source files which do not\n+If you want to recompile @code{qsort} or other source files that do not\n actually use your global register variable, so that they do not use that\n register for any other purpose, then it suffices to specify the compiler\n option @option{-ffixed-@var{reg}}.  You need not actually add a global\n register declaration to their source code.\n \n-A function which can alter the value of a global register variable cannot\n+A function that can alter the value of a global register variable cannot\n safely be called from a function compiled without this variable, because it\n could clobber the value the caller expects to find there on return.\n-Therefore, the function which is the entry point into the part of the\n+Therefore, the function that is the entry point into the part of the\n program that uses the global register variable must explicitly save and\n-restore the value which belongs to its caller.\n+restore the value that belongs to its caller.\n \n @cindex register variable after @code{longjmp}\n @cindex global register after @code{longjmp}\n@@ -6561,7 +6561,7 @@ register int *foo asm (\"a5\");\n @end smallexample\n \n @noindent\n-Here @code{a5} is the name of the register which should be used.  Note\n+Here @code{a5} is the name of the register that should be used.  Note\n that this is the same syntax used for defining global register\n variables, but for a local variable it appears within a function.\n \n@@ -6592,7 +6592,7 @@ according to dataflow analysis.  References to local register variables may\n be deleted or moved or simplified.\n \n As for global register variables, it's recommended that you choose a\n-register which is normally saved and restored by function calls on\n+register that is normally saved and restored by function calls on\n your machine, so that library routines will not clobber it.  A common\n pitfall is to initialize multiple call-clobbered registers with\n arbitrary expressions, where a function call or library call for an\n@@ -6651,7 +6651,7 @@ effect aside from this.\n You can define an @code{enum} tag without specifying its possible values.\n This results in an incomplete type, much like what you get if you write\n @code{struct foo} without describing the elements.  A later declaration\n-which does specify the possible values completes the type.\n+that does specify the possible values completes the type.\n \n You can't allocate variables or storage using the type while it is\n incomplete.  However, you can work with pointers to that type.\n@@ -6668,7 +6668,7 @@ This extension is not supported by GNU C++.\n @cindex @code{__FUNCTION__} identifier\n @cindex @code{__PRETTY_FUNCTION__} identifier\n \n-GCC provides three magic variables which hold the name of the current\n+GCC provides three magic variables that hold the name of the current\n function, as a string.  The first of these is @code{__func__}, which\n is part of the C99 standard:\n \n@@ -6797,7 +6797,7 @@ of the function.  Calling @code{__builtin_frame_address} with a value of\n @code{1} yields the frame address of the caller of the current function,\n and so forth.\n \n-The frame is the area on the stack which holds local variables and saved\n+The frame is the area on the stack that holds local variables and saved\n registers.  The frame address is normally the address of the first word\n pushed on to the stack by the function.  However, the exact definition\n depends upon the processor and the calling convention.  If the processor\n@@ -6817,7 +6817,7 @@ purposes.\n @node Vector Extensions\n @section Using vector instructions through built-in functions\n \n-On some targets, the instruction set contains SIMD vector instructions that\n+On some targets, the instruction set contains SIMD vector instructions which\n operate on multiple values contained in one large register at the same time.\n For example, on the i386 the MMX, 3DNow!@: and SSE extensions can be used\n this way.\n@@ -7033,7 +7033,7 @@ All of the routines are described in the Intel documentation to take\n not clear what is meant by that; it could mean that @emph{only} the\n following variables are protected, or it could mean that these variables\n should in addition be protected.  At present GCC ignores this list and\n-protects all variables which are globally accessible.  If in the future\n+protects all variables that are globally accessible.  If in the future\n we make some use of this list, an empty list will continue to mean all\n globally accessible variables.\n \n@@ -7158,14 +7158,14 @@ to be resolved at runtime.\n The four non-arithmetic functions (load, store, exchange, and \n compare_exchange) all have a generic version as well.  This generic\n version works on any data type.  If the data type size maps to one\n-of the integral sizes which may have lock free support, the generic\n+of the integral sizes that may have lock free support, the generic\n version utilizes the lock free built-in function.  Otherwise an\n external call is left to be resolved at runtime.  This external call is\n the same format with the addition of a @samp{size_t} parameter inserted\n as the first parameter indicating the size of the object being pointed to.\n All objects must be the same size.\n \n-There are 6 different memory models which can be specified.  These map\n+There are 6 different memory models that can be specified.  These map\n to the same names in the C++11 standard.  Refer there or to the\n @uref{http://gcc.gnu.org/wiki/Atomic/GCCMM/AtomicSync,GCC wiki on\n atomic synchronization} for more detailed definitions.  These memory\n@@ -7371,7 +7371,7 @@ This built-in function returns true if objects of @var{size} bytes always\n generate lock free atomic instructions for the target architecture.  \n @var{size} must resolve to a compile time constant and the result also resolves to compile time constant.\n \n-@var{ptr} is an optional pointer to the object which may be used to determine\n+@var{ptr} is an optional pointer to the object that may be used to determine\n alignment.  A value of 0 indicates typical alignment should be used.  The \n compiler may also ignore this parameter.\n \n@@ -7388,7 +7388,7 @@ generate lock free atomic instructions for the target architecture.  If\n it is not known to be lock free a call is made to a runtime routine named\n @code{__atomic_is_lock_free}.\n \n-@var{ptr} is an optional pointer to the object which may be used to determine\n+@var{ptr} is an optional pointer to the object that may be used to determine\n alignment.  A value of 0 indicates typical alignment should be used.  The \n compiler may also ignore this parameter.\n @end deftypefn\n@@ -8542,7 +8542,7 @@ significant bit position.  If @var{x} is 0, the result is undefined.\n \n @deftypefn {Built-in Function} int __builtin_clrsb (int x)\n Returns the number of leading redundant sign bits in @var{x}, i.e. the\n-number of bits following the most significant bit which are identical\n+number of bits following the most significant bit that are identical\n to it.  There are no special cases for 0 or other values. \n @end deftypefn\n \n@@ -8955,7 +8955,7 @@ void __builtin_avr_delay_cycles (unsigned long ticks)\n \n @noindent\n @code{ticks} is the number of ticks to delay execution. Note that this\n-built-in does not take into account the effect of interrupts which\n+built-in does not take into account the effect of interrupts that\n might increase delay time. @code{ticks} must be a compile time\n integer constant; delays with a variable number of cycles are not supported.\n \n@@ -9465,10 +9465,10 @@ into the data cache.  The instruction is issued in slot I1@.\n These built-in functions are available for the i386 and x86-64 family\n of computers, depending on the command-line switches used.\n \n-Note that, if you specify command-line switches such as @option{-msse},\n+If you specify command-line switches such as @option{-msse},\n the compiler could use the extended instruction sets even if the built-ins\n are not used explicitly in the program.  For this reason, applications\n-which perform runtime CPU detection must compile separate files for each\n+that perform runtime CPU detection must compile separate files for each\n supported architecture, using the appropriate flags.  In particular,\n the file containing the CPU detection code should be compiled without\n these options.\n@@ -9532,9 +9532,9 @@ to check CPU type and features, @code{__builtin_cpu_is} and\n executed before any constructors are called.  The CPU detection code is\n automatically executed in a very high priority constructor.\n \n-For example, this function has to be used in @code{ifunc} resolvers which\n+For example, this function has to be used in @code{ifunc} resolvers that\n check for CPU type using the builtins @code{__builtin_cpu_is}\n-and @code{__builtin_cpu_supports}, or in constructors on targets which\n+and @code{__builtin_cpu_supports}, or in constructors on targets that\n don't support constructor priority.\n @smallexample\n \n@@ -11578,7 +11578,7 @@ picoChip instruction set.\n @table @code\n @item int __builtin_sbc (int @var{value})\n Sign bit count.  Return the number of consecutive bits in @var{value}\n-which have the same value as the sign-bit.  The result is the number of\n+that have the same value as the sign-bit.  The result is the number of\n leading sign bits minus one, giving the number of redundant sign bits in\n @var{value}.\n \n@@ -14328,8 +14328,8 @@ asm (\"cpfoo %0\" : \"=B\" (x));\n @item GCC disinterrupt @var{name} , @var{name} @dots{}\n @cindex pragma, disinterrupt\n For the named functions, the compiler adds code to disable interrupts\n-for the duration of those functions.  Any functions so named, which\n-are not encountered in the source, cause a warning that the pragma is\n+for the duration of those functions.  If any functions so named \n+are not encountered in the source, a warning is emitted that the pragma is\n not used.  Examples:\n \n @example\n@@ -14445,7 +14445,7 @@ adding a call to the @code{.init} section.\n @subsection Symbol-Renaming Pragmas\n \n For compatibility with the Solaris system headers, GCC\n-supports two @code{#pragma} directives which change the name used in\n+supports two @code{#pragma} directives that change the name used in\n assembly for a given declaration. To get this effect\n on all platforms supported by GCC, use the asm labels extension (@pxref{Asm\n Labels}).\n@@ -14484,7 +14484,7 @@ always the C-language name.\n @subsection Structure-Packing Pragmas\n \n For compatibility with Microsoft Windows compilers, GCC supports a\n-set of @code{#pragma} directives which change the maximum alignment of\n+set of @code{#pragma} directives that change the maximum alignment of\n members of structures (other than zero-width bitfields), unions, and\n classes subsequently defined. The @var{n} value below always is required\n to be a small power of two and specifies the new alignment in bytes.\n@@ -14560,7 +14560,7 @@ are controllable and which option controls them.\n @var{kind} is @samp{error} to treat this diagnostic as an error,\n @samp{warning} to treat it like a warning (even if @option{-Werror} is\n in effect), or @samp{ignored} if the diagnostic is to be ignored.\n-@var{option} is a double quoted string which matches the command-line\n+@var{option} is a double quoted string that matches the command-line\n option.\n \n @example\n@@ -15046,7 +15046,7 @@ duration.\n Change paragraph 1\n \n @quotation\n-All objects which have neither thread storage duration, dynamic\n+All objects that have neither thread storage duration, dynamic\n storage duration nor are local [@dots{}].\n @end quotation\n \n@@ -15161,7 +15161,7 @@ volatile int *src = @var{somevalue};\n The C++ standard specifies that such expressions do not undergo lvalue\n to rvalue conversion, and that the type of the dereferenced object may\n be incomplete.  The C++ standard does not specify explicitly that it\n-is lvalue to rvalue conversion which is responsible for causing an\n+is lvalue to rvalue conversion that is responsible for causing an\n access.  There is reason to believe that it is, because otherwise\n certain simple expressions become undefined.  However, because it\n would surprise most programmers, G++ treats dereferencing a pointer to\n@@ -15232,7 +15232,7 @@ definition @code{T *__restrict__ const this}.  Notice that the\n interpretation of a @code{__restrict__} member function qualifier is\n different to that of @code{const} or @code{volatile} qualifier, in that it\n is applied to the pointer rather than the object.  This is consistent with\n-other compilers which implement restricted pointers.\n+other compilers that implement restricted pointers.\n \n As with all outermost parameter qualifiers, @code{__restrict__} is\n ignored in function definition matching.  This means you only need to\n@@ -15243,7 +15243,7 @@ in a function prototype as well.\n @section Vague Linkage\n @cindex vague linkage\n \n-There are several constructs in C++ which require space in the object\n+There are several constructs in C++ that require space in the object\n file but are not clearly tied to a single translation unit.  We say that\n these constructs have ``vague linkage''.  Typically such constructs are\n emitted wherever they are needed, though sometimes we can be more\n@@ -15275,7 +15275,7 @@ and the vtable is only emitted in the translation unit where the key\n method is defined.\n \n @emph{Note:} If the chosen key method is later defined as inline, the\n-vtable is still emitted in every translation unit which defines it.\n+vtable is still emitted in every translation unit that defines it.\n Make sure that any inline virtuals are declared inline in the class\n body, even if they are not defined there.\n \n@@ -15307,7 +15307,7 @@ On targets that don't support COMDAT, but do support weak symbols, GCC\n uses them.  This way one copy overrides all the others, but\n the unused copies still take up space in the executable.\n \n-For targets which do not support either COMDAT or weak symbols,\n+For targets that do not support either COMDAT or weak symbols,\n most entities with vague linkage are emitted as local symbols to\n avoid duplicate definition errors from the linker.  This does not happen\n for local statics in inlines, however, as having multiple copies\n@@ -15472,7 +15472,7 @@ You have the following options for dealing with template instantiations:\n @opindex frepo\n Compile your template-using code with @option{-frepo}.  The compiler\n generates files with the extension @samp{.rpo} listing all of the\n-template instantiations used in the corresponding object files which\n+template instantiations used in the corresponding object files that\n could be instantiated there; the link wrapper, @samp{collect2},\n then updates the @samp{.rpo} files to tell the compiler where to place\n those instantiations and rebuild any affected object files.  The\n@@ -15704,8 +15704,9 @@ int main()\n @node Type Traits\n @section Type Traits\n \n-The C++ front-end implements syntactic extensions that allow to\n-determine at compile time various characteristics of a type (or of a\n+The C++ front-end implements syntactic extensions that allow\n+compile-time determination of \n+various characteristics of a type (or of a\n pair of types).\n \n @table @code\n@@ -15955,7 +15956,7 @@ deprecated.   @xref{Deprecated Features}.\n @table @code\n @item For scope\n If a variable is declared at for scope, it used to remain in scope until\n-the end of the scope which contained the for statement (rather than just\n+the end of the scope that contained the for statement (rather than just\n within the for scope).  G++ retains this, but issues a warning, if such a\n variable is accessed outside the for scope.\n "}]}