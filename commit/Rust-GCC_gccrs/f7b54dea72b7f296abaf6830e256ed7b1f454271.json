{"sha": "f7b54dea72b7f296abaf6830e256ed7b1f454271", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdiNTRkZWE3MmI3ZjI5NmFiYWY2ODMwZTI1NmVkN2IxZjQ1NDI3MQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-01-24T05:51:34Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-01-24T05:51:34Z"}, "message": "Makefile.in: Rebuilt.\n\n\t* Makefile.in: Rebuilt.\n\t* Makefile.am (awt_java_source_files): Added new files.\n\t* java/awt/image/AreaAveragingScaleFilter.java: New file from\n\tClasspath.\n\t* java/awt/image/CropImageFilter.java: New file from Classpath.\n\t* java/awt/image/FilteredImageSource.java: New file from\n\tClasspath.\n\t* java/awt/image/ImageFilter.java: New file from Classpath.\n\t* java/awt/image/MemoryImageSource.java: New file from Classpath.\n\t* java/awt/image/PixelGrabber.java: New file from Classpath.\n\t* java/awt/image/RGBImageFilter.java: New file from Classpath.\n\t* java/awt/image/ReplicateScaleFilter.java: New file from\n\tClasspath.\n\t* java/awt/image/ImageProducer.java: Replaced with Classpath\n\tversion.\n\t* java/awt/image/ImageObserver.java: Replaced with Classpath\n\tversion.\n\t* java/awt/image/ImageConsumer.java: Replaced with Classpath\n\tversion.\n\t* java/awt/GridBagConstraints.java (clone): Catch\n\tCloneNotSupportedException.\n\nFrom-SVN: r49169", "tree": {"sha": "519c8c1914adf256274fc3d4f18d1e1d5b4cf4d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/519c8c1914adf256274fc3d4f18d1e1d5b4cf4d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7b54dea72b7f296abaf6830e256ed7b1f454271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7b54dea72b7f296abaf6830e256ed7b1f454271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7b54dea72b7f296abaf6830e256ed7b1f454271", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7b54dea72b7f296abaf6830e256ed7b1f454271/comments", "author": null, "committer": null, "parents": [{"sha": "dc271dbeb914928da2cc0bf682d66f51e991a75a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc271dbeb914928da2cc0bf682d66f51e991a75a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc271dbeb914928da2cc0bf682d66f51e991a75a"}], "stats": {"total": 425, "additions": 372, "deletions": 53}, "files": [{"sha": "25073ff2e09ad756cdc20acbfbd4d33693d820d1", "filename": "libjava/java/awt/image/ImageConsumer.java", "status": "modified", "additions": 176, "deletions": 25, "changes": 201, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7b54dea72b7f296abaf6830e256ed7b1f454271/libjava%2Fjava%2Fawt%2Fimage%2FImageConsumer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7b54dea72b7f296abaf6830e256ed7b1f454271/libjava%2Fjava%2Fawt%2Fimage%2FImageConsumer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fimage%2FImageConsumer.java?ref=f7b54dea72b7f296abaf6830e256ed7b1f454271", "patch": "@@ -1,35 +1,186 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* ImageConsumer.java -- Java interface for image consumption\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt.image;\n+\n import java.util.Hashtable;\n \n+/**\n+ * An object implementing the <code>ImageProducer</code> interface can\n+ * use objects implementing this interface to deliver the image data.\n+ * \n+ * @author C. Brian Jones (cbj@gnu.org)\n+ */\n public interface ImageConsumer\n {\n+    /**\n+     * The pixel order may be random.  This should be\n+     * the default assumption of the <code>ImageConsumer</code>.\n+     *\n+     * @see #setHints \n+     */\n+    public static final int RANDOMPIXELORDER = 1;\n+\n+    /**\n+     * The pixel order is top-down, left-right.\n+     *\n+     * @see #setHints\n+     */\n+    public static final int TOPDOWNLEFTRIGHT = 2;\n+\n+    /**\n+     * The pixel order is in multiples of complete scanlines.\n+     *\n+     * @see #setHints\n+     */\n+    public static final int COMPLETESCANLINES = 4;\n+\n+    /**\n+     * The pixels will be delivered in a single pass.  There is at\n+     * most one call to <code>setPixels</code> for any single pixel.\n+     *\n+     * @see #setHints\n+     * @see #setPixels \n+     */\n+    public static final int SINGLEPASS = 8;\n+\n+    /**\n+     * The pixels will be delivered with multiple calls to\n+     * <code>setPixels</code>.  The image contains a single frame\n+     * which ends when <code>imageComplete</code> is called with the\n+     * <code>STATICIMAGEDONE</code> flag.  If the image is constantly\n+     * changing such as with video then the end of each frame is\n+     * marked by a similar call to <code>imageComplete</code> with the\n+     * <code>SINGLEFRAMEDONE</code> flag.\n+     * \n+     * @see #setHints\n+     * @see #imageComplete \n+     */\n+    public static final int SINGLEFRAME = 16;\n+\n+    /**\n+     * Indicates an error occurred while producing an image.\n+     *\n+     * @see #imageComplete\n+     */\n+    public static final int IMAGEERROR = 1;\n \n-  public static final int RANDOMPIXELORDER  = 1 << 0,\n-\t\t\t  TOPDOWNLEFTRIGHT  = 1 << 1,\n-\t\t\t  COMPLETESCANLINES = 1 << 2,\n-\t\t\t  SINGLEPASS        = 1 << 3,\n-\t\t\t  SINGLEFRAME       = 1 << 4;\n-\t\t\t  \n-  public static final int IMAGEERROR        = 1,\n-\t\t\t  SINGLEFRAMEDONE   = 2,\n-\t\t\t  STATICIMAGEDONE   = 3,\n-\t\t\t  IMAGEABORTED      = 4;\n-\n-  public void setDimensions(int width, int height);\n-  public void setProperties(Hashtable props);\n-  public void setColorModel(ColorModel model);\n-  public void setHints(int hintflags);\n-  public void setPixels(int x, int y, int w, int h, ColorModel model,\n-                \tbyte[] pixels, int off, int scansize);\n-  public void setPixels(int x, int y, int w, int h, ColorModel model,\n-                \tint[] pixels, int off, int scansize);\n-  public void imageComplete(int status);\n+    /**\n+     * A single frame is complete but more will follow.\n+     * \n+     * @see #imageComplete\n+     */\n+    public static final int SINGLEFRAMEDONE = 2;\n+\n+    /**\n+     * The image is complete and no more pixels or frames will follow.\n+     *\n+     * @see #imageComplete\n+     */\n+    public static final int STATICIMAGEDONE = 3;\n+\n+    /**\n+     * Production of the image has been aborted.\n+     *\n+     * @see #imageComplete\n+     */\n+    public static final int IMAGEABORTED = 4;\n+\n+    /**\n+     * An <code>ImageProducer</code> indicates the size of the image\n+     * being produced using this method.\n+     * \n+     * @param width the width of the image\n+     * @param height the height of the image \n+     */\n+    public abstract void setDimensions(int width, int height);\n+\n+    /**\n+     * An <code>ImageProducer</code> can set a list of properties\n+     * associated with this image by using this method.\n+     *\n+     * @param props the list of properties associated with this image \n+     */\n+    public abstract void setProperties(Hashtable props);\n+\n+    /**\n+     * This <code>ColorModel</code> should indicate the model used by\n+     * the majority of calls to <code>setPixels</code>.  Each call to\n+     * <code>setPixels</code> could however indicate a different\n+     * <code>ColorModel</code>.\n+     *\n+     * @param model the color model to be used most often by setPixels\n+     * @see ColorModel \n+     */\n+    public abstract void setColorModel(ColorModel model);\n+\n+    /**\n+     * The <code>ImageProducer</code> should call this method with a\n+     * bit mask of hints from any of <code>RANDOMPIXELORDER</code>,\n+     * <code>TOPDOWNLEFTRIGHT</code>, <code>COMPLETESCANLINES</code>,\n+     * <code>SINGLEPASS</code>, <code>SINGLEFRAME</code>.\n+     * \n+     * @param flags a bit mask of hints\n+     */\n+    public abstract void setHints(int flags);\n+\n+    /**\n+     * This function delivers a rectangle of pixels where any\n+     * pixel(m,n) is stored in the array as a <code>byte</code> at\n+     * index (n * scansize + m + offset).  \n+     */\n+    public abstract void setPixels(int x, int y, int w, int h, \n+\t   ColorModel model, byte[] pixels, int offset, int scansize);\n+\n+    /**\n+     * This function delivers a rectangle of pixels where any\n+     * pixel(m,n) is stored in the array as an <code>int</code> at\n+     * index (n * scansize + m + offset).  \n+     */\n+    public abstract void setPixels(int x, int y, int w, int h, \n+           ColorModel model, int[] pixels, int offset, int scansize);\n+\n+    /**\n+     * The <code>ImageProducer</code> calls this method to indicate a\n+     * single frame or the entire image is complete.  The method is\n+     * also used to indicate an error in loading or producing the\n+     * image.  \n+     */\n+    public abstract void imageComplete(int status);\n }\n+"}, {"sha": "6c4673e216ebdf4451c9dd238b6444b6b08f6a75", "filename": "libjava/java/awt/image/ImageObserver.java", "status": "modified", "additions": 119, "deletions": 18, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7b54dea72b7f296abaf6830e256ed7b1f454271/libjava%2Fjava%2Fawt%2Fimage%2FImageObserver.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7b54dea72b7f296abaf6830e256ed7b1f454271/libjava%2Fjava%2Fawt%2Fimage%2FImageObserver.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fimage%2FImageObserver.java?ref=f7b54dea72b7f296abaf6830e256ed7b1f454271", "patch": "@@ -1,28 +1,129 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* ImageObserver.java -- Java interface for asynchronous updates to an image\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt.image;\n \n import java.awt.Image;\n \n-public interface ImageObserver \n+/**\n+ * An object implementing the <code>ImageObserver</code> interface can\n+ * receive updates on image construction from an\n+ * <code>ImageProducer</code> asynchronously.\n+ *\n+ * @see ImageProducer\n+ * @author C. Brian Jones (cbj@gnu.org) \n+ */\n+public interface ImageObserver\n {\n-  int WIDTH      = 1 << 0;\n-  int HEIGHT     = 1 << 1;\n-  int PROPERTIES = 1 << 2;\n-  int SOMEBITS   = 1 << 3;\n-  int FRAMEBITS  = 1 << 4;\n-  int ALLBITS    = 1 << 5;\n-  int ERROR      = 1 << 6;\n-  int ABORT      = 1 << 7;\n-\n-  boolean imageUpdate(Image image, int infoFlags, int x, int y, int width, \n-                      int height);\n-}\n+    /**\n+     * The width of the image has been provided as the\n+     * <code>width</code> argument to <code>imageUpdate</code>.\n+     *\n+     * @see #imageUpdate \n+     */\n+    public static final int WIDTH = 1;\n+\n+    /**\n+     * The height of the image has been provided as the\n+     * <code>height</code> argument to <code>imageUpdate</code>.\n+     *\n+     * @see #imageUpdate \n+     */\n+    public static final int HEIGHT = 2;\n \n+    /**\n+     * The properties of the image have been provided.\n+     *\n+     * @see #imageUpdate\n+     * @see java.awt.Image#getProperty (java.lang.String, java.awt.image.ImageObserver)\n+     */\n+    public static final int PROPERTIES = 4;\n \n+    /**\n+     * More pixels are now available for drawing a scaled variation of\n+     * the image.\n+     *\n+     * @see #imageUpdate \n+     */\n+    public static final int SOMEBITS = 8;\n+\n+    /**\n+     * All the pixels needed to draw a complete frame of a multi-frame\n+     * image are available.\n+     *\n+     * @see #imageUpdate \n+     */\n+    public static final int FRAMEBITS = 16;\n+\n+    /**\n+     * An image with a single frame, a static image, is complete.\n+     *\n+     * @see #imageUpdate\n+     */\n+    public static final int ALLBITS = 32;\n+\n+    /**\n+     * An error was encountered while producing the image.\n+     *\n+     * @see #imageUpdate\n+     */\n+    public static final int ERROR = 64;\n+\n+    /**\n+     * Production of the image was aborted.\n+     *\n+     * @see #imageUpdate\n+     */\n+    public static final int ABORT = 128;\n+\n+    /**\n+     * This is a callback method for an asynchronous image producer to\n+     * provide updates on the production of the image as it happens.\n+     *\n+     * @param image the image the update refers to\n+     * @param flags a bit mask indicating what is provided with this update\n+     * @param x the x coordinate of the image\n+     * @param y the y coordinate of the image\n+     * @param width the width of the image\n+     * @param height the height of the image\n+     * \n+     * @see java.awt.Image \n+     */\n+    public abstract boolean imageUpdate(Image image, int flags, int x, \n+\t\t\t\t\tint y, int width, int height);\n+}"}, {"sha": "1bc1736a3a70892c0ad5563e3574026cb520df1e", "filename": "libjava/java/awt/image/ImageProducer.java", "status": "modified", "additions": 77, "deletions": 10, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7b54dea72b7f296abaf6830e256ed7b1f454271/libjava%2Fjava%2Fawt%2Fimage%2FImageProducer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7b54dea72b7f296abaf6830e256ed7b1f454271/libjava%2Fjava%2Fawt%2Fimage%2FImageProducer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fimage%2FImageProducer.java?ref=f7b54dea72b7f296abaf6830e256ed7b1f454271", "patch": "@@ -1,18 +1,85 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* ImageProducer.java -- Java interface for image production\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt.image;\n \n+/**\n+ * An object implementing the <code>ImageProducer</code> interface can\n+ * produce data for images.  Each image has a corresponding\n+ * <code>ImageProducer</code> which is needed for things such as\n+ * resizing the image.\n+ *\n+ * @see ImageConsumer\n+ * @author C. Brian Jones (cbj@gnu.org) \n+ */\n public interface ImageProducer\n {\n-  void addConsumer(ImageConsumer ic);\n-  boolean isConsumer(ImageConsumer ic);\n-  void removeConsumer(ImageConsumer ic);\n-  void startProduction(ImageConsumer ic);\n-  void requestTopDownLeftRightResend(ImageConsumer ic);\n+    /**\n+     * Used to register an <code>ImageConsumer</code> with this\n+     * <code>ImageProducer</code>.  \n+     */\n+    public abstract void addConsumer(ImageConsumer ic);\n+\n+    /**\n+     * Used to determine if the given <code>ImageConsumer</code> is\n+     * already registered with this <code>ImageProducer</code>.  \n+     */\n+    public abstract boolean isConsumer(ImageConsumer ic);\n+\n+    /**\n+     * Used to remove an <code>ImageConsumer</code> from the list of\n+     * registered consumers for this <code>ImageProducer</code>.  \n+     */\n+    public abstract void removeConsumer(ImageConsumer ic);\n+\n+    /**\n+     * Used to register an <code>ImageConsumer</code> with this\n+     * <code>ImageProducer</code> and then immediately start\n+     * reconstruction of the image data to be delivered to all\n+     * registered consumers.  \n+     */\n+    public abstract void startProduction(ImageConsumer ic);\n+\n+    /**\n+     * Used to register an <code>ImageConsumer</code> with this\n+     * <code>ImageProducer</code> and then request that this producer\n+     * resend the image data in the order top-down, left-right.  \n+     */\n+    public abstract void requestTopDownLeftRightResend(ImageConsumer ic);\n }\n+"}]}