{"sha": "4f0a2f5a3ddb1024b885c066a18caae4d733bb6c", "node_id": "C_kwDOANBUbNoAKDRmMGEyZjVhM2RkYjEwMjRiODg1YzA2NmExOGNhYWU0ZDczM2JiNmM", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-11-18T17:10:36Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-11-18T17:12:21Z"}, "message": "middle-end: check that both sides of complex expression is a mul.\n\nBoth sides of the VEC_PERM_EXPR need to be a MULT but the check\nwas accidentally checking if both sides are a mul.\n\nThe FMS case would be handled by the validate_multiplication but\nthis makes the requirement more explicit and we exit earlier.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/103311\n\t* tree-vect-slp-patterns.c (complex_mul_pattern::matches,\n\tcomplex_fms_pattern::matches): Check for multiplications.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/103311\n\t* gcc.target/aarch64/pr103311.c: New test.", "tree": {"sha": "e8ee883a11382142729cc33420a470756c05693f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8ee883a11382142729cc33420a470756c05693f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f0a2f5a3ddb1024b885c066a18caae4d733bb6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f0a2f5a3ddb1024b885c066a18caae4d733bb6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f0a2f5a3ddb1024b885c066a18caae4d733bb6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f0a2f5a3ddb1024b885c066a18caae4d733bb6c/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2196a681d7810ad8b227bf983f38ba716620545e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2196a681d7810ad8b227bf983f38ba716620545e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2196a681d7810ad8b227bf983f38ba716620545e"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "7bcc7db79be8f1b4dc1f95c6cf10f5292191a892", "filename": "gcc/testsuite/gcc.target/aarch64/pr103311.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0a2f5a3ddb1024b885c066a18caae4d733bb6c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103311.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0a2f5a3ddb1024b885c066a18caae4d733bb6c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103311.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103311.c?ref=4f0a2f5a3ddb1024b885c066a18caae4d733bb6c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_v8_3a_complex_neon_ok } */\n+/* { dg-add-options arm_v8_3a_complex_neon } */\n+/* { dg-additional-options \"-std=c99\" } */\n+\n+_Complex double y;\n+\n+void\n+cbknu (_Complex double f)\n+{\n+  const _Complex double cone = 1.0e0;\n+\n+  f = f * cone;\n+  y = f * cone;\n+}\n+"}, {"sha": "d916fc9cef9a86a0d797caaf2b2f253685e9b7dd", "filename": "gcc/tree-vect-slp-patterns.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0a2f5a3ddb1024b885c066a18caae4d733bb6c/gcc%2Ftree-vect-slp-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0a2f5a3ddb1024b885c066a18caae4d733bb6c/gcc%2Ftree-vect-slp-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp-patterns.c?ref=4f0a2f5a3ddb1024b885c066a18caae4d733bb6c", "patch": "@@ -949,7 +949,7 @@ complex_mul_pattern::matches (complex_operation_t op,\n \n   bool mul0 = vect_match_expression_p (l0node[0], MULT_EXPR);\n   bool mul1 = vect_match_expression_p (l0node[1], MULT_EXPR);\n-  if (!mul0 && !mul1)\n+  if (!mul0 || !mul1)\n     return IFN_LAST;\n \n   /* Now operand2+4 may lead to another expression.  */\n@@ -1204,7 +1204,9 @@ complex_fms_pattern::matches (complex_operation_t op,\n \n   /* If these nodes don't have any children then they're\n      not ones we're interested in.  */\n-  if (left_op.length () != 2 || right_op.length () != 2)\n+  if (left_op.length () != 2\n+      || right_op.length () != 2\n+      || !vect_match_expression_p (l0node[1], MULT_EXPR))\n     return IFN_LAST;\n \n   bool is_neg = vect_normalize_conj_loc (left_op);"}]}