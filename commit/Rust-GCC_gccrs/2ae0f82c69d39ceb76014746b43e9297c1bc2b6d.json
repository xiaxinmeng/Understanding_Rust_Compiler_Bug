{"sha": "2ae0f82c69d39ceb76014746b43e9297c1bc2b6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFlMGY4MmM2OWQzOWNlYjc2MDE0NzQ2YjQzZTkyOTdjMWJjMmI2ZA==", "commit": {"author": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1996-02-09T22:46:21Z"}, "committer": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1996-02-09T22:46:21Z"}, "message": "(fp, integer): Added function units for pentium.\n\nFrom-SVN: r11190", "tree": {"sha": "44d1fe0753eea5b31b47ecad20694e033360812f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44d1fe0753eea5b31b47ecad20694e033360812f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ae0f82c69d39ceb76014746b43e9297c1bc2b6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ae0f82c69d39ceb76014746b43e9297c1bc2b6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ae0f82c69d39ceb76014746b43e9297c1bc2b6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ae0f82c69d39ceb76014746b43e9297c1bc2b6d/comments", "author": null, "committer": null, "parents": [{"sha": "d4ba09c0b92b7d07318e93d7b97588d46560981b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4ba09c0b92b7d07318e93d7b97588d46560981b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4ba09c0b92b7d07318e93d7b97588d46560981b"}], "stats": {"total": 1524, "additions": 1140, "deletions": 384}, "files": [{"sha": "c0a5d015c44a9588339eb3b455085f87bcfed36f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1140, "deletions": 384, "changes": 1524, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ae0f82c69d39ceb76014746b43e9297c1bc2b6d/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ae0f82c69d39ceb76014746b43e9297c1bc2b6d/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=2ae0f82c69d39ceb76014746b43e9297c1bc2b6d", "patch": "@@ -17,8 +17,7 @@\n ;; You should have received a copy of the GNU General Public License\n ;; along with GNU CC; see the file COPYING.  If not, write to\n ;; the Free Software Foundation, 59 Temple Place - Suite 330,\n-;; Boston, MA 02111-1307, USA.\n-\n+;; Boston, MA 02111-1307, USA. */\n \n ;; The original PO technology requires these to be ordered by speed,\n ;; so that assigner will pick the fastest.\n@@ -59,6 +58,37 @@\n ;;    operand 0 is the argument for `sin'.\n ;; 2  This is a `cos' operation.  The mode of the UNSPEC is MODE_FLOAT.\n ;;    operand 0 is the argument for `cos'.\n+\f\n+;; This shadows the processor_type enumeration, so changes must be made\n+;; to i386.h at the same time.\n+\n+(define_attr \"type\" \"integer,fld,fpop,fpdiv\"\n+  (const_string \"integer\"))\n+\n+;; Functional units\n+\n+;; Floating point\n+\n+(define_function_unit \"fp\" 1 0\n+ (and (eq_attr \"type\" \"fpop\") (eq_attr \"cpu\" \"!pentium\"))\n+ 5 5)\n+\n+(define_function_unit \"fp\" 1 0\n+ (and (eq_attr \"type\" \"fpop\") (eq_attr \"cpu\" \"pentium\")) \n+ 3 0)\n+\n+(define_function_unit \"fp\" 1 0\n+ (eq_attr \"type\" \"fpdiv\") \n+ 10 10)\n+\n+(define_function_unit \"fp\" 1 0\n+ (eq_attr \"type\" \"fld\") \n+ 1 0)\n+\n+(define_function_unit \"integer\" 1 0\n+  (and (eq_attr \"type\" \"integer\") (eq_attr \"cpu\" \"!i386\"))\n+ 2 0)\n+\n \f\n ;; \"movl MEM,REG / testl REG,REG\" is faster on a 486 than \"cmpl $0,MEM\".\n ;; But restricting MEM here would mean that gcc could not remove a redundant\n@@ -76,7 +106,7 @@\n ;; enumeration in rs6000.h.\n \n (define_attr \"cpu\" \"i386,i486,pentium\"\n-  (const (symbol_ref \"ix86_cpu_attr\")))\n+  (const (symbol_ref \"ix86_cpu\")))\n \n (define_insn \"tstsi_1\"\n   [(set (cc0)\n@@ -234,7 +264,7 @@\n   return output_fp_cc0_set (insn);\n }\")\n \n-;; Don't generate tstdf if generating IEEE code, since the `ftst' opcode\n+;; Don't generate tstxf if generating IEEE code, since the `ftst' opcode\n ;; isn't IEEE compliant.\n \n (define_expand \"tstxf\"\n@@ -352,8 +382,8 @@\n (define_insn \"\"\n   [(set (cc0)\n \t(match_operator 2 \"VOIDmode_compare_op\"\n-\t\t\t[(match_operand:XF 0 \"nonimmediate_operand\" \"f\")\n-\t\t\t (match_operand:XF 1 \"nonimmediate_operand\" \"f\")]))\n+\t\t\t[(match_operand:XF 0 \"register_operand\" \"f\")\n+\t\t\t (match_operand:XF 1 \"register_operand\" \"f\")]))\n    (clobber (match_scratch:HI 3 \"=a\"))]\n   \"TARGET_80387\n    && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n@@ -457,6 +487,16 @@\n   \"TARGET_80387\"\n   \"* return output_float_compare (insn, operands);\")\n \n+(define_insn \"\"\n+  [(set (cc0)\n+\t(match_operator 2 \"VOIDmode_compare_op\"\n+\t\t\t[(float_extend:DF\n+\t\t\t  (match_operand:SF 0 \"register_operand\" \"f\"))\n+\t\t\t (match_operand:DF 1 \"nonimmediate_operand\" \"fm\")]))\n+   (clobber (match_scratch:HI 3 \"=a\"))]\n+  \"TARGET_80387\"\n+  \"* return output_float_compare (insn, operands);\")\n+\n (define_insn \"\"\n   [(set (cc0)\n \t(compare:CCFPEQ (match_operand:DF 0 \"register_operand\" \"f\")\n@@ -533,35 +573,38 @@\n   i386_compare_gen = gen_cmpxf_cc;\n   i386_compare_gen_eq = gen_cmpxf_ccfpeq;\n   i386_compare_op0 = operands[0];\n-  i386_compare_op1 = operands[1];\n+  i386_compare_op1 = (immediate_operand (operands[1], XFmode))\n+\t\t\t? copy_to_mode_reg (XFmode, operands[1]) : operands[1];\n   DONE;\n }\")\n \n (define_expand \"cmpdf\"\n   [(set (cc0)\n \t(compare (match_operand:DF 0 \"register_operand\" \"\")\n-\t\t (match_operand:DF 1 \"nonimmediate_operand\" \"\")))]\n+\t\t (match_operand:DF 1 \"general_operand\" \"\")))]\n   \"TARGET_80387\"\n   \"\n {\n   i386_compare_gen = gen_cmpdf_cc;\n   i386_compare_gen_eq = gen_cmpdf_ccfpeq;\n   i386_compare_op0 = operands[0];\n-  i386_compare_op1 = operands[1];\n+  i386_compare_op1 = (immediate_operand (operands[1], DFmode))\n+\t\t\t? copy_to_mode_reg (DFmode, operands[1]) : operands[1];\n   DONE;\n }\")\n \n (define_expand \"cmpsf\"\n   [(set (cc0)\n \t(compare (match_operand:SF 0 \"register_operand\" \"\")\n-\t\t (match_operand:SF 1 \"nonimmediate_operand\" \"\")))]\n+\t\t (match_operand:SF 1 \"general_operand\" \"\")))]\n   \"TARGET_80387\"\n   \"\n {\n   i386_compare_gen = gen_cmpsf_cc;\n   i386_compare_gen_eq = gen_cmpsf_ccfpeq;\n   i386_compare_op0 = operands[0];\n-  i386_compare_op1 = operands[1];\n+  i386_compare_op1 = (immediate_operand (operands[1], SFmode))\n+\t\t\t? copy_to_mode_reg (SFmode, operands[1]) : operands[1];\n   DONE;\n }\")\n \n@@ -630,7 +673,7 @@\n (define_insn \"\"\n   [(set (cc0)\n \t(and:SI (match_operand:SI 0 \"general_operand\" \"%ro\")\n-\t\t(match_operand:SI 1 \"general_operand\" \"ri\")))]\n+\t\t(match_operand:SI 1 \"nonmemory_operand\" \"ri\")))]\n   \"\"\n   \"*\n {\n@@ -688,7 +731,7 @@\n (define_insn \"\"\n   [(set (cc0)\n \t(and:HI (match_operand:HI 0 \"general_operand\" \"%ro\")\n-\t\t(match_operand:HI 1 \"general_operand\" \"ri\")))]\n+\t\t(match_operand:HI 1 \"nonmemory_operand\" \"ri\")))]\n   \"\"\n   \"*\n {\n@@ -729,8 +772,8 @@\n \n (define_insn \"\"\n   [(set (cc0)\n-\t(and:QI (match_operand:QI 0 \"general_operand\" \"%qm\")\n-\t\t(match_operand:QI 1 \"general_operand\" \"qi\")))]\n+\t(and:QI (match_operand:QI 0 \"nonimmediate_operand\" \"%qm\")\n+\t\t(match_operand:QI 1 \"nonmemory_operand\" \"qi\")))]\n   \"\"\n   \"*\n {\n@@ -762,7 +805,7 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"push_operand\" \"=<\")\n-\t(match_operand:SI 1 \"general_operand\" \"ri\"))]\n+\t(match_operand:SI 1 \"nonmemory_operand\" \"ri\"))]\n   \"!TARGET_PUSH_MEMORY && !TARGET_MOVE\"\n   \"push%L0 %1\")\n \n@@ -836,7 +879,7 @@\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"push_operand\" \"=<\")\n-\t(match_operand:HI 1 \"general_operand\" \"ri\"))]\n+\t(match_operand:HI 1 \"nonmemory_operand\" \"ri\"))]\n   \"!TARGET_PUSH_MEMORY && !TARGET_MOVE\"\n   \"push%W0 %1\")\n \n@@ -938,13 +981,13 @@\n ;; the amount pushed up to a halfword.\n (define_insn \"\"\n   [(set (match_operand:QI 0 \"push_operand\" \"=<\")\n-\t(match_operand:QI 1 \"immediate_operand\" \"n\"))]\n+\t(match_operand:QI 1 \"const_int_operand\" \"n\"))]\n   \"\"\n   \"* return AS1 (push%W0,%1);\")\n \n (define_insn \"\"\n   [(set (match_operand:QI 0 \"push_operand\" \"=<\")\n-\t(match_operand:QI 1 \"nonimmediate_operand\" \"q\"))]\n+\t(match_operand:QI 1 \"register_operand\" \"q\"))]\n   \"!TARGET_MOVE\"\n   \"*\n {\n@@ -984,7 +1027,7 @@\n }\")\n \n (define_insn \"\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=q,*r,qm\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=q,*r,qm\")\n \t(match_operand:QI 1 \"general_operand\" \"*g,q,qn\"))]\n   \"(!TARGET_MOVE || GET_CODE (operands[0]) != MEM) || (GET_CODE (operands[1]) != MEM)\"\n   \"*\n@@ -1038,7 +1081,7 @@\n }\")\n \n (define_insn \"\"\n-  [(set (strict_low_part (match_operand:QI 0 \"general_operand\" \"+qm,q\"))\n+  [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm,q\"))\n \t(match_operand:QI 1 \"general_operand\" \"*qn,m\"))]\n   \"(!TARGET_MOVE || GET_CODE (operands[0]) != MEM) || (GET_CODE (operands[1]) != MEM)\"\n   \"*\n@@ -1089,16 +1132,28 @@\n       DONE;\n     }\n \n-  /* If we are loading a floating point constant that isn't 0 or 1 into a register,\n-     indicate we need the pic register loaded.  This could be optimized into stores\n-     of constants if the target eventually moves to memory, but better safe than\n-     sorry.  */\n-  if (flag_pic\n+  /* If we are loading a floating point constant that isn't 0 or 1\n+into a register, indicate we need the pic register loaded.  This could\n+be optimized into stores of constants if the target eventually moves\n+to memory, but better safe than sorry.  */\n+  if ((reload_in_progress | reload_completed) == 0\n       && GET_CODE (operands[0]) != MEM\n       && GET_CODE (operands[1]) == CONST_DOUBLE\n       && !standard_80387_constant_p (operands[1]))\n     {\n-      current_function_uses_pic_offset_table = 1;\n+      rtx insn, note, fp_const;\n+\n+      fp_const = force_const_mem (SFmode, operands[1]);\n+      if (flag_pic)\n+\tcurrent_function_uses_pic_offset_table = 1;\n+\n+      insn = emit_insn (gen_rtx (SET, SFmode, operands[0], fp_const));\n+      note = find_reg_note (insn, REG_EQUAL, NULL_RTX);\n+\n+      if (note)\n+\tXEXP (note, 0) = operands[1];\n+      else\n+\tREG_NOTES (insn) = gen_rtx (EXPR_LIST, REG_EQUAL, operands[1], REG_NOTES (insn));\n     }\n }\")\n \n@@ -1182,7 +1237,7 @@\n \n ;; For the purposes of regclass, prefer FLOAT_REGS.\n (define_insn \"movsf_normal\"\n-  [(set (match_operand:SF 0 \"general_operand\" \"=*rfm,*rf,f,!*rm\")\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=*rfm,*rf,f,!*rm\")\n \t(match_operand:SF 1 \"general_operand\" \"*rf,*rfm,fG,fF\"))]\n   \"(!TARGET_MOVE || GET_CODE (operands[0]) != MEM) || (GET_CODE (operands[1]) != MEM)\"\n   \"*\n@@ -1234,7 +1289,9 @@\n   /* Handle all SFmode moves not involving the 387 */\n \n   return singlemove_string (operands);\n-}\")\n+}\"\n+  [(set_attr \"type\" \"fld\")])\n+\n \n (define_insn \"swapsf\"\n   [(set (match_operand:SF 0 \"register_operand\" \"f\")\n@@ -1274,12 +1331,24 @@\n      indicate we need the pic register loaded.  This could be optimized into stores\n      of constants if the target eventually moves to memory, but better safe than\n      sorry.  */\n-  if (flag_pic\n+  if ((reload_in_progress | reload_completed) == 0\n       && GET_CODE (operands[0]) != MEM\n       && GET_CODE (operands[1]) == CONST_DOUBLE\n       && !standard_80387_constant_p (operands[1]))\n     {\n-      current_function_uses_pic_offset_table = 1;\n+      rtx insn, note, fp_const;\n+\n+      fp_const = force_const_mem (DFmode, operands[1]);\n+      if (flag_pic)\n+\tcurrent_function_uses_pic_offset_table = 1;\n+\n+      insn = emit_insn (gen_rtx (SET, DFmode, operands[0], fp_const));\n+      note = find_reg_note (insn, REG_EQUAL, NULL_RTX);\n+\n+      if (note)\n+\tXEXP (note, 0) = operands[1];\n+      else\n+\tREG_NOTES (insn) = gen_rtx (EXPR_LIST, REG_EQUAL, operands[1], REG_NOTES (insn));\n     }\n }\")\n \n@@ -1353,7 +1422,7 @@\n \n ;; For the purposes of regclass, prefer FLOAT_REGS.\n (define_insn \"movdf_normal\"\n-  [(set (match_operand:DF 0 \"general_operand\" \"=f,fm,!*rf,!*rm\")\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,fm,!*rf,!*rm\")\n \t(match_operand:DF 1 \"general_operand\" \"fmG,f,*rfm,*rfF\"))]\n   \"(!TARGET_MOVE || GET_CODE (operands[0]) != MEM) || (GET_CODE (operands[1]) != MEM)\"\n   \"*\n@@ -1405,7 +1474,10 @@\n   /* Handle all DFmode moves not involving the 387 */\n \n   return output_move_double (operands);\n-}\")\n+}\"\n+[(set_attr \"type\" \"fld\")])\n+\n+\n \n (define_insn \"swapdf\"\n   [(set (match_operand:DF 0 \"register_operand\" \"f\")\n@@ -1441,16 +1513,28 @@\n       DONE;\n     }\n \n-  /* If we are loading a floating point constant that isn't 0 or 1 into a register,\n-     indicate we need the pic register loaded.  This could be optimized into stores\n-     of constants if the target eventually moves to memory, but better safe than\n-     sorry.  */\n-  if (flag_pic\n+  /* If we are loading a floating point constant that isn't 0 or 1\n+into a register, indicate we need the pic register loaded.  This could\n+be optimized into stores of constants if the target eventually moves\n+to memory, but better safe than sorry.  */\n+  if ((reload_in_progress | reload_completed) == 0\n       && GET_CODE (operands[0]) != MEM\n       && GET_CODE (operands[1]) == CONST_DOUBLE\n       && !standard_80387_constant_p (operands[1]))\n     {\n-      current_function_uses_pic_offset_table = 1;\n+      rtx insn, note, fp_const;\n+\n+      fp_const = force_const_mem (XFmode, operands[1]);\n+      if (flag_pic)\n+\tcurrent_function_uses_pic_offset_table = 1;\n+\n+      insn = emit_insn (gen_rtx (SET, XFmode, operands[0], fp_const));\n+      note = find_reg_note (insn, REG_EQUAL, NULL_RTX);\n+\n+      if (note)\n+\tXEXP (note, 0) = operands[1];\n+      else\n+\tREG_NOTES (insn) = gen_rtx (EXPR_LIST, REG_EQUAL, operands[1], REG_NOTES (insn));\n     }\n }\")\n \n@@ -1521,7 +1605,7 @@\n   \"* return output_move_memory (operands, insn, GET_MODE_SIZE (XFmode), 2, 4);\")\n \n (define_insn \"movxf_normal\"\n-  [(set (match_operand:XF 0 \"general_operand\" \"=f,fm,!*rf,!*rm\")\n+  [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,fm,!*rf,!*rm\")\n \t(match_operand:XF 1 \"general_operand\" \"fmG,f,*rfm,*rfF\"))]\n   \"(!TARGET_MOVE || GET_CODE (operands[0]) != MEM) || (GET_CODE (operands[1]) != MEM)\"\n   \"*\n@@ -1576,7 +1660,7 @@\n   return output_move_double (operands);\n }\")\n \n-(define_insn \"swapxf\"\n+(define_insn \"swapxf\" \n   [(set (match_operand:XF 0 \"register_operand\" \"f\")\n \t(match_operand:XF 1 \"register_operand\" \"f\"))\n    (set (match_dup 1)\n@@ -1629,21 +1713,36 @@\n ;; See comments by `andsi' for when andl is faster than movzx.\n \n (define_insn \"zero_extendhisi2\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=r\")\n-\t(zero_extend:SI\n-\t (match_operand:HI 1 \"nonimmediate_operand\" \"rm\")))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,&r,?r\")\n+\t(zero_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"0,rm,rm\")))]\n   \"\"\n   \"*\n-{\n-  if ((TARGET_ZERO_EXTEND_WITH_AND || REGNO (operands[0]) == 0)\n+  {\n+  rtx xops[2];\n+\n+  if ((TARGET_ZERO_EXTEND_WITH_AND || REGNO (operands[0]) == 0) \n       && REG_P (operands[1]) && REGNO (operands[0]) == REGNO (operands[1]))\n     {\n-      rtx xops[2];\n       xops[0] = operands[0];\n       xops[1] = GEN_INT (0xffff);\n       output_asm_insn (AS2 (and%L0,%1,%k0), xops);\n       RET;\n     }\n+  if (TARGET_ZERO_EXTEND_WITH_AND && !reg_overlap_mentioned_p (operands[0], operands[1]))\n+    {\n+      output_asm_insn (AS2 (xor%L0,%0,%0),operands);\n+      output_asm_insn (AS2 (mov%W0,%1,%w0),operands);\n+      RET;\n+    }\n+\n+  if (TARGET_ZERO_EXTEND_WITH_AND)\n+    {\n+      xops[0] = operands[0];\n+      xops[1] = gen_rtx (CONST_INT, VOIDmode, 0xffff);\n+      output_asm_insn (AS2 (mov%W0,%1,%w0),operands);\n+      output_asm_insn (AS2 (and%L0,%1,%k0), xops);\n+      RET;\n+    }\n \n #ifdef INTEL_SYNTAX\n   return AS2 (movzx,%1,%0);\n@@ -1652,46 +1751,147 @@\n #endif\n }\")\n \n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(zero_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"\")))]\n+ \"reload_completed && TARGET_ZERO_EXTEND_WITH_AND && !reg_overlap_mentioned_p (operands[0], operands[1])\"\n+ [(set (match_dup 0)\n+       (const_int 0))\n+  (set (strict_low_part (match_dup 2))\n+       (match_dup 1))]\n+ \"operands[2] = gen_rtx (REG, HImode, REGNO (operands[0]));\")\n+\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(zero_extend:SI (match_operand:HI 1 \"memory_operand\" \"\")))]\n+ \"reload_completed && TARGET_ZERO_EXTEND_WITH_AND && reg_overlap_mentioned_p (operands[0], operands[1])\"\n+ [(set (strict_low_part (match_dup 2))\n+       (match_dup 1))\n+  (set (match_dup 0)\n+       (and:SI (match_dup 0)\n+\t       (const_int 65535)))]\n+  \"operands[2] = gen_rtx (REG, HImode, REGNO (operands[0]));\")\n+\n (define_insn \"zero_extendqihi2\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=r\")\n-\t(zero_extend:HI\n-\t (match_operand:QI 1 \"nonimmediate_operand\" \"qm\")))]\n+  [(set (match_operand:HI 0 \"register_operand\" \"=q,&q,?r\")\n+\t(zero_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"0,qm,qm\")))]\n   \"\"\n   \"*\n-{\n+  {\n+  rtx xops[2];\n+\n   if ((TARGET_ZERO_EXTEND_WITH_AND || REGNO (operands[0]) == 0)\n-      && REG_P (operands[1]) && REGNO (operands[0]) == REGNO (operands[1]))\n+      && REG_P (operands[1]) \n+      && REGNO (operands[0]) == REGNO (operands[1]))\n     {\n-      rtx xops[2];\n       xops[0] = operands[0];\n       xops[1] = GEN_INT (0xff);\n       output_asm_insn (AS2 (and%L0,%1,%k0), xops);\n       RET;\n     }\n-\n+  if (TARGET_ZERO_EXTEND_WITH_AND && QI_REG_P (operands[0]))\n+    {\n+      if(!reg_overlap_mentioned_p(operands[0],operands[1]))\n+\t{\n+\t  output_asm_insn (AS2 (xor%L0,%k0,%k0), operands);\n+\t  output_asm_insn (AS2 (mov%B0,%1,%b0), operands);\n+\t}\n+      else\n+\t{\n+\t  xops[0] = operands[0];\n+\t  xops[1] = gen_rtx (CONST_INT, VOIDmode, 0xff);\n+\t  output_asm_insn (AS2 (mov%B0,%1,%b0),operands);\n+\t  output_asm_insn (AS2 (and%L0,%1,%k0), xops);\n+\t}\n+      RET;\n+    }\n+  \n #ifdef INTEL_SYNTAX\n   return AS2 (movzx,%1,%0);\n #else\n   return AS2 (movz%B0%W0,%1,%0);\n #endif\n }\")\n \n+(define_split\n+  [(set (match_operand:HI 0 \"register_operand\" \"\")\n+\t(zero_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"\")))]\n+ \"reload_completed && QI_REG_P (operands[0]) && TARGET_ZERO_EXTEND_WITH_AND\n+  && !reg_overlap_mentioned_p (operands[0], operands[1])\"\n+ [(set (match_dup 0)\n+       (const_int 0))\n+  (set (strict_low_part (match_dup 2))\n+       (match_dup 1))]\n+ \"operands[2] = gen_rtx (REG, QImode, REGNO (operands[0]));\")\n+\n+\n+(define_split\n+  [(set (match_operand:HI 0 \"register_operand\" \"\")\n+\t(zero_extend:HI (match_operand:QI 1 \"memory_operand\" \"\")))]\n+ \"reload_completed && QI_REG_P (operands[0]) && TARGET_ZERO_EXTEND_WITH_AND\n+  && reg_overlap_mentioned_p (operands[0], operands[1])\"\n+ [(set (strict_low_part (match_dup 2))\n+       (match_dup 1))\n+  (set (match_dup 0)\n+       (and:HI (match_dup 0)\n+\t       (const_int 255)))]\n+ \"operands[2] = gen_rtx (REG, QImode, REGNO (operands[0]));\")\n+\n+(define_split\n+  [(set (match_operand:HI 0 \"register_operand\" \"\")\n+\t(zero_extend:HI (match_operand:QI 1 \"register_operand\" \"\")))]\n+ \"reload_completed && TARGET_ZERO_EXTEND_WITH_AND && REGNO (operands[0]) != REGNO (operands[1])\"\n+ [(set (match_dup 0)\n+       (match_dup 2))\n+  (set (match_dup 0)\n+       (and:HI (match_dup 0)\n+\t       (const_int 255)))]\n+ \"operands[2] = gen_rtx (REG, HImode, REGNO (operands[1]));\")\n+\n (define_insn \"zero_extendqisi2\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=r\")\n-\t(zero_extend:SI\n-\t (match_operand:QI 1 \"nonimmediate_operand\" \"qm\")))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"=q,&q,?r\")\n+\t(zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"0,qm,qm\")))]\n   \"\"\n   \"*\n-{\n+  {\n+  rtx xops[2];\n+\n   if ((TARGET_ZERO_EXTEND_WITH_AND || REGNO (operands[0]) == 0)\n-      && REG_P (operands[1]) && REGNO (operands[0]) == REGNO (operands[1]))\n+      && REG_P (operands[1]) \n+      && REGNO (operands[0]) == REGNO (operands[1]))\n     {\n-      rtx xops[2];\n       xops[0] = operands[0];\n       xops[1] = GEN_INT (0xff);\n       output_asm_insn (AS2 (and%L0,%1,%k0), xops);\n       RET;\n     }\n+  if (TARGET_ZERO_EXTEND_WITH_AND && QI_REG_P (operands[0]))\n+    {\n+      if(!reg_overlap_mentioned_p (operands[0], operands[1]))\n+\t{\n+\t  output_asm_insn (AS2 (xor%L0,%0,%0),operands);\n+\t  output_asm_insn (AS2 (mov%B0,%1,%b0),operands);\n+\t}\n+      else\n+\t{\n+\t  xops[0] = operands[0];\n+\t  xops[1] = gen_rtx (CONST_INT, VOIDmode, 0xff);\n+\t  output_asm_insn (AS2 (mov%B0,%1,%b0), operands);\n+\t  output_asm_insn (AS2 (and%L0,%1,%k0), xops);\n+\t}\n+      RET;\n+    }\n+\n+  if (TARGET_ZERO_EXTEND_WITH_AND && GET_CODE (operands[1]) == REG)\n+    {\n+      xops[0] = operands[0];\n+      xops[1] = gen_rtx (CONST_INT, VOIDmode, 0xff);\n+      operands[1] = gen_rtx (REG, SImode, REGNO (operands[1]));\n+      output_asm_insn (AS2 (mov%L0,%1,%0), operands);\n+      output_asm_insn (AS2 (and%L0,%1,%k0), xops);\n+      RET;\n+    }\n \n #ifdef INTEL_SYNTAX\n   return AS2 (movzx,%1,%0);\n@@ -1700,23 +1900,76 @@\n #endif\n }\")\n \n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"\")))]\n+ \"reload_completed && QI_REG_P (operands[0]) && TARGET_ZERO_EXTEND_WITH_AND\n+  && !reg_overlap_mentioned_p (operands[0], operands[1])\"\n+ [(set (match_dup 0)\n+       (const_int 0))\n+  (set (strict_low_part (match_dup 2))\n+       (match_dup 1))]\n+ \"operands[2] = gen_rtx (REG, QImode, REGNO (operands[0]));\")\n+\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(zero_extend:SI (match_operand:QI 1 \"memory_operand\" \"\")))]\n+ \"reload_completed && QI_REG_P (operands[0]) && TARGET_ZERO_EXTEND_WITH_AND\n+  && reg_overlap_mentioned_p (operands[0], operands[1])\"\n+ [(set (strict_low_part (match_dup 2))\n+       (match_dup 1))\n+  (set (match_dup 0)\n+       (and:SI (match_dup 0)\n+\t       (const_int 255)))]\n+ \"operands[2] = gen_rtx (REG, QImode, REGNO (operands[0]));\")\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(zero_extend:SI (match_operand:QI 1 \"register_operand\" \"\")))]\n+ \"reload_completed && TARGET_ZERO_EXTEND_WITH_AND && REGNO (operands[0]) != REGNO (operands[1])\"\n+ [(set (match_dup 0)\n+       (match_dup 2))\n+  (set (match_dup 0)\n+       (and:SI (match_dup 0)\n+\t       (const_int 255)))]\n+ \"operands[2] = gen_rtx (REG, SImode, REGNO (operands[1]));\")\n+\n (define_insn \"zero_extendsidi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:DI\n-\t (match_operand:SI 1 \"register_operand\" \"0\")))]\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,?r,?m\")\n+\t(zero_extend:DI (match_operand:SI 1 \"register_operand\" \"0,rm,r\")))]\n   \"\"\n   \"*\n-{\n-  operands[0] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n-  return AS2 (xor%L0,%0,%0);\n+  {\n+  rtx high[2], low[2], xops[4];\n+\n+  if (REG_P (operands[0]) && REG_P (operands[1])\n+      && REGNO (operands[0]) == REGNO (operands[1]))\n+    {\n+      operands[0] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+      return AS2 (xor%L0,%0,%0);\n+    }\n+\n+  split_di (operands, 1, low, high);\n+  xops[0] = low[0];\n+  xops[1] = operands[1];\n+  xops[2] = high[0];\n+  xops[3] = const0_rtx;\n+\n+  output_asm_insn (AS2 (mov%L0,%1,%0), xops);\n+  if (GET_CODE (low[0]) == MEM)\n+    output_asm_insn (AS2 (mov%L2,%3,%2), xops);\n+  else\n+    output_asm_insn (AS2 (xor%L2,%2,%2), xops);\n+\n+  RET;\n }\")\n \f\n ;;- sign extension instructions\n \n (define_insn \"extendsidi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(sign_extend:DI\n-\t (match_operand:SI 1 \"register_operand\" \"0\")))]\n+\t(sign_extend:DI (match_operand:SI 1 \"register_operand\" \"0\")))]\n   \"\"\n   \"*\n {\n@@ -1742,9 +1995,8 @@\n ;; We use what the Unix assembler expects.\n \n (define_insn \"extendhisi2\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=r\")\n-\t(sign_extend:SI\n-\t (match_operand:HI 1 \"nonimmediate_operand\" \"rm\")))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(sign_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"rm\")))]\n   \"\"\n   \"*\n {\n@@ -1764,9 +2016,8 @@\n }\")\n \n (define_insn \"extendqihi2\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=r\")\n-\t(sign_extend:HI\n-\t (match_operand:QI 1 \"nonimmediate_operand\" \"qm\")))]\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n+\t(sign_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"qm\")))]\n   \"\"\n   \"*\n {\n@@ -1782,9 +2033,8 @@\n }\")\n \n (define_insn \"extendqisi2\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=r\")\n-\t(sign_extend:SI\n-\t (match_operand:QI 1 \"nonimmediate_operand\" \"qm\")))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(sign_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"qm\")))]\n   \"\"\n   \"*\n {\n@@ -1794,13 +2044,72 @@\n   return AS2 (movs%B0%L0,%1,%0);\n #endif\n }\")\n+\n+\f\n+;; Truncation of long long -> 32 bit\n+\n+(define_expand \"truncdisi2\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,m\")\n+\t(truncate:SI (match_operand:DI 1 \"nonimmediate_operand\" \"ro,r\")))]\n+  \"\"\n+  \"\n+{\n+  /* Don't generate memory->memory moves, go through a register */\n+  if (TARGET_MOVE\n+      && (reload_in_progress | reload_completed) == 0\n+      && GET_CODE (operands[0]) == MEM\n+      && GET_CODE (operands[1]) == MEM)\n+    {\n+      rtx target = gen_reg_rtx (SImode);\n+      emit_insn (gen_truncdisi2 (target, operands[1]));\n+      emit_move_insn (operands[0], target);\n+      DONE;\n+    }\n+}\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,m\")\n+\t(truncate:SI (match_operand:DI 1 \"nonimmediate_operand\" \"ro,r\")))]\n+  \"(!TARGET_MOVE || GET_CODE (operands[0]) != MEM) || (GET_CODE (operands[1]) != MEM)\"\n+  \"*\n+{\n+  rtx low[2], high[2], xops[2];\n+\n+  split_di (&operands[1], 1, low, high);\n+  xops[0] = operands[0];\n+  xops[1] = low[0];\n+  if (!rtx_equal_p (xops[0], xops[1]))\n+    output_asm_insn (AS2 (mov%L0,%1,%0), xops);\n+\n+  RET;\n+}\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,m\")\n+\t(truncate:SI (lshiftrt:DI (match_operand:DI 1 \"nonimmediate_operand\" \"ro,r\")\n+\t\t\t\t  (const_int 32))))]\n+  \"(!TARGET_MOVE || GET_CODE (operands[0]) != MEM) || (GET_CODE (operands[1]) != MEM)\"\n+  \"*\n+{\n+  rtx low[2], high[2], xops[2];\n+\n+  split_di (&operands[1], 1, low, high);\n+  xops[0] = operands[0];\n+  xops[1] = high[0];\n+  if (!rtx_equal_p (xops[0], xops[1]))\n+    output_asm_insn (AS2 (mov%L0,%1,%0), xops);\n+\n+  RET;\n+}\")\n+\n+\n \f\n ;; Conversions between float and double.\n \n (define_insn \"extendsfdf2\"\n-  [(set (match_operand:DF 0 \"general_operand\" \"=fm,f\")\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=fm,f\")\n \t(float_extend:DF\n-\t (match_operand:SF 1 \"general_operand\" \"f,fm\")))]\n+\t (match_operand:SF 1 \"nonimmediate_operand\" \"f,fm\")))]\n   \"TARGET_80387\"\n   \"*\n {\n@@ -1833,9 +2142,9 @@\n }\")\n \n (define_insn \"extenddfxf2\"\n-  [(set (match_operand:XF 0 \"general_operand\" \"=fm,f,f,!*r\")\n+  [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=fm,f,f,!*r\")\n \t(float_extend:XF\n-\t (match_operand:DF 1 \"general_operand\" \"f,fm,!*r,f\")))]\n+\t (match_operand:DF 1 \"nonimmediate_operand\" \"f,fm,!*r,f\")))]\n   \"TARGET_80387\"\n   \"*\n {\n@@ -1868,9 +2177,9 @@\n }\")\n \n (define_insn \"extendsfxf2\"\n-  [(set (match_operand:XF 0 \"general_operand\" \"=fm,f,f,!*r\")\n+  [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=fm,f,f,!*r\")\n \t(float_extend:XF\n-\t (match_operand:SF 1 \"general_operand\" \"f,fm,!*r,f\")))]\n+\t (match_operand:SF 1 \"nonimmediate_operand\" \"f,fm,!*r,f\")))]\n   \"TARGET_80387\"\n   \"*\n {\n@@ -1945,7 +2254,7 @@\n }\")\n \n (define_insn \"truncxfsf2\"\n-  [(set (match_operand:SF 0 \"general_operand\" \"=m,!*r\")\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=m,!*r\")\n \t(float_truncate:SF\n \t (match_operand:XF 1 \"register_operand\" \"f,f\")))]\n   \"TARGET_80387\"\n@@ -1978,7 +2287,7 @@\n }\")\n \n (define_insn \"truncxfdf2\"\n-  [(set (match_operand:DF 0 \"general_operand\" \"=m,!*r\")\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=m,!*r\")\n \t(float_truncate:DF\n \t (match_operand:XF 1 \"register_operand\" \"f,f\")))]\n   \"TARGET_80387\"\n@@ -2139,7 +2448,7 @@\n ;; These match a signed conversion of either DFmode or SFmode to DImode.\n \n (define_insn \"\"\n-  [(set (match_operand:DI 0 \"general_operand\" \"=rm\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n \t(fix:DI (fix:XF (match_operand:XF 1 \"register_operand\" \"f\"))))\n    (clobber (match_dup 1))\n    (clobber (match_operand:SI 2 \"memory_operand\" \"m\"))\n@@ -2149,7 +2458,7 @@\n   \"* return output_fix_trunc (insn, operands);\")\n \n (define_insn \"\"\n-  [(set (match_operand:DI 0 \"general_operand\" \"=rm\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n \t(fix:DI (fix:DF (match_operand:DF 1 \"register_operand\" \"f\"))))\n    (clobber (match_dup 1))\n    (clobber (match_operand:SI 2 \"memory_operand\" \"m\"))\n@@ -2159,7 +2468,7 @@\n   \"* return output_fix_trunc (insn, operands);\")\n \n (define_insn \"\"\n-  [(set (match_operand:DI 0 \"general_operand\" \"=rm\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n \t(fix:DI (fix:SF (match_operand:SF 1 \"register_operand\" \"f\"))))\n    (clobber (match_dup 1))\n    (clobber (match_operand:SI 2 \"memory_operand\" \"m\"))\n@@ -2213,7 +2522,7 @@\n }\")\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=rm\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(fix:SI (fix:XF (match_operand:XF 1 \"register_operand\" \"f\"))))\n    (clobber (match_operand:SI 2 \"memory_operand\" \"m\"))\n    (clobber (match_operand:SI 3 \"memory_operand\" \"m\"))\n@@ -2222,7 +2531,7 @@\n   \"* return output_fix_trunc (insn, operands);\")\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=rm\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(fix:SI (fix:DF (match_operand:DF 1 \"register_operand\" \"f\"))))\n    (clobber (match_operand:SI 2 \"memory_operand\" \"m\"))\n    (clobber (match_operand:SI 3 \"memory_operand\" \"m\"))\n@@ -2231,7 +2540,7 @@\n   \"* return output_fix_trunc (insn, operands);\")\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=rm\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(fix:SI (fix:SF (match_operand:SF 1 \"register_operand\" \"f\"))))\n    (clobber (match_operand:SI 2 \"memory_operand\" \"m\"))\n    (clobber (match_operand:SI 3 \"memory_operand\" \"m\"))\n@@ -2284,7 +2593,7 @@\n \n (define_insn \"\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(float:XF (match_operand:DI 1 \"general_operand\" \"rm\")))]\n+\t(float:XF (match_operand:DI 1 \"nonimmediate_operand\" \"rm\")))]\n   \"TARGET_80387\"\n   \"*\n {\n@@ -2352,7 +2661,7 @@\n \n (define_insn \"\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n-\t(float:XF (match_operand:SI 1 \"general_operand\" \"m,!*r\")))]\n+\t(float:XF (match_operand:SI 1 \"nonimmediate_operand\" \"m,!*r\")))]\n   \"TARGET_80387\"\n   \"*\n {\n@@ -2386,6 +2695,102 @@\n \f\n ;;- add instructions\n \n+(define_insn \"addsidi3_1\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=&r,r,o,&r,r,o,o\")\n+\t(plus:DI (match_operand:DI 1 \"general_operand\" \"0,0,0,o,riF,riF,o\")\n+\t\t (zero_extend:DI (match_operand:SI 2 \"general_operand\" \"o,ri,ri,roi,roi,ri,ri\"))))\n+   (clobber (match_scratch:SI 3 \"=X,X,X,X,X,X,&r\"))]\n+  \"\"\n+  \"*\n+{\n+  rtx low[3], high[3], xops[7], temp;\n+\n+  CC_STATUS_INIT;\n+\n+  split_di (operands, 2, low, high);\n+  high[2] = const0_rtx;\n+  low[2]  = operands[2];\n+\n+  if (!rtx_equal_p (operands[0], operands[1]))\n+    {\n+      xops[0] = high[0];\n+      xops[1] = low[0];\n+      xops[2] = high[1];\n+      xops[3] = low[1];\n+\n+      if (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n+\t{\n+\t  output_asm_insn (AS2 (mov%L1,%3,%1), xops);\n+\t  output_asm_insn (AS2 (mov%L0,%2,%0), xops);\n+\t}\n+      else\n+\t{\n+\t  xops[4] = high[2];\n+\t  xops[5] = low[2];\n+\t  xops[6] = operands[3];\n+\t  output_asm_insn (AS2 (mov%L6,%3,%6), xops);\n+\t  output_asm_insn (AS2 (add%L6,%5,%6), xops);\n+\t  output_asm_insn (AS2 (mov%L1,%6,%1), xops);\n+\t  output_asm_insn (AS2 (mov%L6,%2,%6), xops);\n+\t  output_asm_insn (AS2 (adc%L6,%4,%6), xops);\n+\t  output_asm_insn (AS2 (mov%L0,%6,%0), xops);\n+\t  RET;\n+\t}\n+    }\n+\n+  output_asm_insn (AS2 (add%L0,%2,%0), low);\n+  output_asm_insn (AS2 (adc%L0,%2,%0), high);\n+  RET;\n+}\")\n+\n+(define_insn \"addsidi3_2\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=&r,r,o,&r,r,o,o\")\n+\t(plus:DI (zero_extend:DI (match_operand:SI 2 \"general_operand\" \"o,ri,ri,o,ri,ri,ri\"))\n+\t\t (match_operand:DI 1 \"general_operand\" \"0,0,0,roiF,roiF,riF,o\")))\n+   (clobber (match_scratch:SI 3 \"=X,X,X,X,X,X,&r\"))]\n+  \"\"\n+  \"*\n+{\n+  rtx low[3], high[3], xops[7], temp;\n+\n+  CC_STATUS_INIT;\n+\n+  split_di (operands, 2, low, high);\n+  high[2] = const0_rtx;\n+  low[2]  = operands[2];\n+\n+  if (!rtx_equal_p (operands[0], operands[1]))\n+    {\n+      xops[0] = high[0];\n+      xops[1] = low[0];\n+      xops[2] = high[1];\n+      xops[3] = low[1];\n+\n+      if (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n+\t{\n+\t  output_asm_insn (AS2 (mov%L1,%3,%1), xops);\n+\t  output_asm_insn (AS2 (mov%L0,%2,%0), xops);\n+\t}\n+      else\n+\t{\n+\t  xops[4] = high[2];\n+\t  xops[5] = low[2];\n+\t  xops[6] = operands[3];\n+\t  output_asm_insn (AS2 (mov%L6,%3,%6), xops);\n+\t  output_asm_insn (AS2 (add%L6,%5,%6), xops);\n+\t  output_asm_insn (AS2 (mov%L1,%6,%1), xops);\n+\t  output_asm_insn (AS2 (mov%L6,%2,%6), xops);\n+\t  output_asm_insn (AS2 (adc%L6,%4,%6), xops);\n+\t  output_asm_insn (AS2 (mov%L0,%6,%0), xops);\n+\t  RET;\n+\t}\n+    }\n+\n+  output_asm_insn (AS2 (add%L0,%2,%0), low);\n+  output_asm_insn (AS2 (adc%L0,%2,%0), high);\n+  RET;\n+}\")\n+\n (define_insn \"adddi3\"\n   [(set (match_operand:DI 0 \"general_operand\" \"=&r,ro,o,&r,ro,o,&r,o,o,o\")\n \t(plus:DI (match_operand:DI 1 \"general_operand\" \"%0,0,0,o,riF,o,or,riF,riF,o\")\n@@ -2462,14 +2867,23 @@\n ;; On a 486, it is faster to do movl/addl than to do a single leal if\n ;; operands[1] and operands[2] are both registers.\n \n-(define_insn \"addsi3\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=?r,rm,r\")\n-\t(plus:SI (match_operand:SI 1 \"general_operand\" \"%r,0,0\")\n-\t\t (match_operand:SI 2 \"general_operand\" \"ri,ri,rm\")))]\n+(define_expand \"addsi3\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n+\t(plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")\n+\t\t (match_operand:SI 2 \"general_operand\" \"\")))]\n   \"\"\n+  \"IX86_EXPAND_BINARY_OPERATOR (PLUS, SImode, operands);\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,rm,r\")\n+\t(plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,r\")\n+\t\t (match_operand:SI 2 \"general_operand\" \"rmi,ri,ri\")))]\n+  \"ix86_binary_operator_ok (PLUS, SImode, operands)\"\n   \"*\n {\n-  if (REG_P (operands[0]) && REGNO (operands[0]) != REGNO (operands[1]))\n+  if (REG_P (operands[0]) && REG_P (operands[1])\n+      && (REG_P (operands[2]) || GET_CODE (operands[2]) == CONST_INT)\n+      && REGNO (operands[0]) != REGNO (operands[1]))\n     {\n       if (REG_P (operands[2]) && REGNO (operands[0]) == REGNO (operands[2]))\n \treturn AS2 (add%L0,%1,%0);\n@@ -2489,10 +2903,11 @@\n \t  operands[1] = SET_SRC (PATTERN (insn));\n \t  return AS2 (lea%L0,%a1,%0);\n \t}\n-\n-      output_asm_insn (AS2 (mov%L0,%1,%0), operands);\n     }\n \n+  if (!rtx_equal_p (operands[0], operands[1]))\n+    output_asm_insn (AS2 (mov%L0,%1,%0), operands);\n+\n   if (operands[2] == const1_rtx)\n     return AS1 (inc%L0,%0);\n \n@@ -2502,15 +2917,51 @@\n   return AS2 (add%L0,%2,%0);\n }\")\n \n+;; addsi3 is faster, so put this after.\n+\n+(define_insn \"movsi_lea\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (match_operand:QI 1 \"address_operand\" \"p\"))]\n+  \"\"\n+  \"*\n+{\n+  /* Adding a constant to a register is faster with an add.  */\n+  /* ??? can this ever happen? */\n+  if (GET_CODE (operands[1]) == PLUS\n+      && GET_CODE (XEXP (operands[1], 1)) == CONST_INT\n+      && rtx_equal_p (operands[0], XEXP (operands[1], 0)))\n+    {\n+      operands[1] = XEXP (operands[1], 1);\n+\n+      if (operands[1] == const1_rtx)\n+        return AS1 (inc%L0,%0);\n+\n+      if (operands[1] == constm1_rtx)\n+        return AS1 (dec%L0,%0);\n+\n+      return AS2 (add%L0,%1,%0);\n+    }\n+\n+  CC_STATUS_INIT;\n+  return AS2 (lea%L0,%a1,%0);\n+}\")\n+\n ;; ??? `lea' here, for three operand add?  If leaw is used, only %bx,\n ;; %si and %di can appear in SET_SRC, and output_asm_insn might not be\n ;; able to handle the operand.  But leal always works?\n \n-(define_insn \"addhi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=rm,r\")\n-\t(plus:HI (match_operand:HI 1 \"general_operand\" \"%0,0\")\n-\t\t (match_operand:HI 2 \"general_operand\" \"ri,rm\")))]\n+(define_expand \"addhi3\"\n+  [(set (match_operand:HI 0 \"general_operand\" \"\")\n+\t(plus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\")\n+\t\t (match_operand:HI 2 \"general_operand\" \"\")))]\n   \"\"\n+  \"IX86_EXPAND_BINARY_OPERATOR (PLUS, HImode, operands);\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,r\")\n+\t(plus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n+\t\t (match_operand:HI 2 \"general_operand\" \"ri,rm\")))]\n+  \"ix86_binary_operator_ok (PLUS, HImode, operands)\"\n   \"*\n {\n   /* ??? what about offsettable memory references? */\n@@ -2541,11 +2992,18 @@\n   return AS2 (add%W0,%2,%0);\n }\")\n \n-(define_insn \"addqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=qm,q\")\n-\t(plus:QI (match_operand:QI 1 \"general_operand\" \"%0,0\")\n-\t\t (match_operand:QI 2 \"general_operand\" \"qn,qmn\")))]\n+(define_expand \"addqi3\"\n+  [(set (match_operand:QI 0 \"general_operand\" \"\")\n+\t(plus:QI (match_operand:QI 1 \"general_operand\" \"\")\n+\t\t (match_operand:QI 2 \"general_operand\" \"\")))]\n   \"\"\n+  \"IX86_EXPAND_BINARY_OPERATOR (PLUS, QImode, operands);\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q\")\n+\t(plus:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0\")\n+\t\t (match_operand:QI 2 \"general_operand\" \"qn,qmn\")))]\n+  \"ix86_binary_operator_ok (PLUS, QImode, operands)\"\n   \"*\n {\n   if (operands[2] == const1_rtx)\n@@ -2569,8 +3027,8 @@\n ;\n ;(define_insn \"\"\n ;  [(set (match_operand:SI 0 \"push_operand\" \"=<\")\n-;\t(plus:SI (match_operand:SI 1 \"general_operand\" \"%r\")\n-;\t\t (match_operand:SI 2 \"general_operand\" \"ri\")))]\n+;\t(plus:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n+;\t\t (match_operand:SI 2 \"nonmemory_operand\" \"ri\")))]\n ;  \"\"\n ;  \"*\n ;{\n@@ -2584,40 +3042,12 @@\n ;  RET;\n ;}\")\n \n-;; addsi3 is faster, so put this after.\n-\n-(define_insn \"movsi_lea\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (match_operand:QI 1 \"address_operand\" \"p\"))]\n-  \"\"\n-  \"*\n-{\n-  CC_STATUS_INIT;\n-  /* Adding a constant to a register is faster with an add.  */\n-  /* ??? can this ever happen? */\n-  if (GET_CODE (operands[1]) == PLUS\n-      && GET_CODE (XEXP (operands[1], 1)) == CONST_INT\n-      && rtx_equal_p (operands[0], XEXP (operands[1], 0)))\n-    {\n-      operands[1] = XEXP (operands[1], 1);\n-\n-      if (operands[1] == const1_rtx)\n-        return AS1 (inc%L0,%0);\n-\n-      if (operands[1] == constm1_rtx)\n-        return AS1 (dec%L0,%0);\n-\n-      return AS2 (add%L0,%1,%0);\n-    }\n-  return AS2 (lea%L0,%a1,%0);\n-}\")\n-\n ;; The patterns that match these are at the end of this file.\n \n (define_expand \"addxf3\"\n   [(set (match_operand:XF 0 \"register_operand\" \"\")\n-\t(plus:XF (match_operand:XF 1 \"nonimmediate_operand\" \"\")\n-\t\t (match_operand:XF 2 \"nonimmediate_operand\" \"\")))]\n+\t(plus:XF (match_operand:XF 1 \"register_operand\" \"\")\n+\t\t (match_operand:XF 2 \"register_operand\" \"\")))]\n   \"TARGET_80387\"\n   \"\")\n \n@@ -2637,6 +3067,54 @@\n \f\n ;;- subtract instructions\n \n+(define_insn \"subsidi3\"\n+  [(set (match_operand:DI 0 \"general_operand\" \"=&r,ro,&r,o,o\")\n+\t(minus:DI (match_operand:DI 1 \"general_operand\" \"0,0,roiF,riF,o\")\n+\t\t  (zero_extend:DI (match_operand:SI 2 \"general_operand\" \"o,ri,roi,ri,ri\"))))\n+   (clobber (match_scratch:SI 3 \"=X,X,X,X,&r\"))]\n+  \"\"\n+  \"*\n+{\n+  rtx low[3], high[3], xops[7];\n+\n+  CC_STATUS_INIT;\n+\n+  split_di (operands, 2, low, high);\n+  high[2] = const0_rtx;\n+  low[2]  = operands[2];\n+\n+  if (!rtx_equal_p (operands[0], operands[1]))\n+    {\n+      xops[0] = high[0];\n+      xops[1] = low[0];\n+      xops[2] = high[1];\n+      xops[3] = low[1];\n+\n+      if (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n+\t{\n+\t  output_asm_insn (AS2 (mov%L1,%3,%1), xops);\n+\t  output_asm_insn (AS2 (mov%L0,%2,%0), xops);\n+\t}\n+      else\n+\t{\n+\t  xops[4] = high[2];\n+\t  xops[5] = low[2];\n+\t  xops[6] = operands[3];\n+\t  output_asm_insn (AS2 (mov%L6,%3,%6), xops);\n+\t  output_asm_insn (AS2 (sub%L6,%5,%6), xops);\n+\t  output_asm_insn (AS2 (mov%L1,%6,%1), xops);\n+\t  output_asm_insn (AS2 (mov%L6,%2,%6), xops);\n+\t  output_asm_insn (AS2 (sbb%L6,%4,%6), xops);\n+\t  output_asm_insn (AS2 (mov%L0,%6,%0), xops);\n+\t  RET;\n+\t}\n+    }\n+\n+  output_asm_insn (AS2 (sub%L0,%2,%0), low);\n+  output_asm_insn (AS2 (sbb%L0,%2,%0), high);\n+  RET;\n+}\")\n+\n (define_insn \"subdi3\"\n   [(set (match_operand:DI 0 \"general_operand\" \"=&r,ro,&r,o,o\")\n \t(minus:DI (match_operand:DI 1 \"general_operand\" \"0,0,roiF,riF,o\")\n@@ -2704,33 +3182,75 @@\n   RET;\n }\")\n \n-(define_insn \"subsi3\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=rm,r\")\n-\t(minus:SI (match_operand:SI 1 \"general_operand\" \"0,0\")\n-\t\t  (match_operand:SI 2 \"general_operand\" \"ri,rm\")))]\n+(define_expand \"subsi3\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n+\t(minus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")\n+\t\t  (match_operand:SI 2 \"general_operand\" \"\")))]\n   \"\"\n+  \"IX86_EXPAND_BINARY_OPERATOR (MINUS, SImode, operands);\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,r\")\n+\t(minus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0\")\n+\t\t  (match_operand:SI 2 \"general_operand\" \"ri,rm\")))]\n+  \"ix86_binary_operator_ok (MINUS, SImode, operands)\"\n   \"* return AS2 (sub%L0,%2,%0);\")\n \n-(define_insn \"subhi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=rm,r\")\n-\t(minus:HI (match_operand:HI 1 \"general_operand\" \"0,0\")\n-\t\t  (match_operand:HI 2 \"general_operand\" \"ri,rm\")))]\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,r\")\n+\t(minus:SI (match_operand:SI 1 \"general_operand\" \"ri,rm\")\n+\t\t  (match_operand:SI 2 \"nonimmediate_operand\" \"0,0\")))]\n+  \"ix86_binary_operator_ok (MINUS, SImode, operands)\"\n+  \"* return AS2 (sub%L0,%2,%0);\")\n+\n+(define_expand \"subhi3\"\n+  [(set (match_operand:HI 0 \"general_operand\" \"\")\n+\t(minus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\")\n+\t\t  (match_operand:HI 2 \"general_operand\" \"\")))]\n   \"\"\n+  \"IX86_EXPAND_BINARY_OPERATOR (MINUS, HImode, operands);\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,r\")\n+\t(minus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n+\t\t  (match_operand:HI 2 \"general_operand\" \"ri,rm\")))]\n+  \"ix86_binary_operator_ok (MINUS, HImode, operands)\"\n   \"* return AS2 (sub%W0,%2,%0);\")\n \n-(define_insn \"subqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=qm,q\")\n-\t(minus:QI (match_operand:QI 1 \"general_operand\" \"0,0\")\n-\t\t  (match_operand:QI 2 \"general_operand\" \"qn,qmn\")))]\n+(define_insn \"\"\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,r\")\n+\t(minus:HI (match_operand:HI 1 \"general_operand\" \"ri,rm\")\n+\t\t  (match_operand:HI 2 \"nonimmediate_operand\" \"0,0\")))]\n+  \"ix86_binary_operator_ok (MINUS, HImode, operands)\"\n+  \"* return AS2 (sub%W0,%2,%0);\")\n+\n+(define_expand \"subqi3\"\n+  [(set (match_operand:QI 0 \"general_operand\" \"\")\n+\t(minus:QI (match_operand:QI 1 \"general_operand\" \"\")\n+\t\t  (match_operand:QI 2 \"general_operand\" \"\")))]\n   \"\"\n+  \"IX86_EXPAND_BINARY_OPERATOR (MINUS, QImode, operands);\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q\")\n+\t(minus:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0\")\n+\t\t  (match_operand:QI 2 \"general_operand\" \"qn,qmn\")))]\n+  \"ix86_binary_operator_ok (MINUS, QImode, operands)\"\n+  \"* return AS2 (sub%B0,%2,%0);\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q\")\n+\t(minus:QI (match_operand:QI 1 \"general_operand\" \"qn,qmn\")\n+\t\t  (match_operand:QI 2 \"nonimmediate_operand\" \"0,0\")))]\n+  \"ix86_binary_operator_ok (MINUS, QImode, operands)\"\n   \"* return AS2 (sub%B0,%2,%0);\")\n \n ;; The patterns that match these are at the end of this file.\n \n (define_expand \"subxf3\"\n   [(set (match_operand:XF 0 \"register_operand\" \"\")\n-\t(minus:XF (match_operand:XF 1 \"nonimmediate_operand\" \"\")\n-\t\t  (match_operand:XF 2 \"nonimmediate_operand\" \"\")))]\n+\t(minus:XF (match_operand:XF 1 \"register_operand\" \"\")\n+\t\t  (match_operand:XF 2 \"register_operand\" \"\")))]\n   \"TARGET_80387\"\n   \"\")\n \n@@ -2751,22 +3271,15 @@\n ;;- multiply instructions\n \n ;(define_insn \"mulqi3\"\n-;  [(set (match_operand:QI 0 \"general_operand\" \"=a\")\n-;\t(mult:QI (match_operand:QI 1 \"general_operand\" \"%0\")\n-;\t\t (match_operand:QI 2 \"general_operand\" \"qm\")))]\n+;  [(set (match_operand:QI 0 \"register_operand\" \"=a\")\n+;\t(mult:QI (match_operand:QI 1 \"register_operand\" \"%0\")\n+;\t\t (match_operand:QI 2 \"nonimmediate_operand\" \"qm\")))]\n ;  \"\"\n ;  \"imul%B0 %2,%0\")\n \n-(define_insn \"\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=r\")\n-\t(mult:HI (match_operand:HI 1 \"general_operand\" \"%0\")\n-\t\t (match_operand:HI 2 \"general_operand\" \"r\")))]\n-  \"GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) == 0x80\"\n-  \"* return AS2 (imul%W0,%2,%0);\")\n-\n (define_insn \"mulhi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=r,r\")\n-\t(mult:HI (match_operand:HI 1 \"general_operand\" \"%0,rm\")\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n+\t(mult:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,rm\")\n \t\t (match_operand:HI 2 \"general_operand\" \"g,i\")))]\n   \"\"\n   \"*\n@@ -2779,16 +3292,9 @@\n   return AS3 (imul%W0,%2,%1,%0);\n }\")\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=r\")\n-\t(mult:SI (match_operand:SI 1 \"general_operand\" \"%0\")\n-\t\t (match_operand:SI 2 \"general_operand\" \"r\")))]\n-  \"GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) == 0x80\"\n-  \"* return AS2 (imul%L0,%2,%0);\")\n-\n (define_insn \"mulsi3\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=r,r\")\n-\t(mult:SI (match_operand:SI 1 \"general_operand\" \"%0,rm\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(mult:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,rm\")\n \t\t (match_operand:SI 2 \"general_operand\" \"g,i\")))]\n   \"\"\n   \"*\n@@ -2802,15 +3308,15 @@\n }\")\n \n (define_insn \"umulqihi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=a\")\n-\t(mult:HI (zero_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"%0\"))\n+  [(set (match_operand:HI 0 \"register_operand\" \"=a\")\n+\t(mult:HI (zero_extend:HI (match_operand:QI 1 \"register_operand\" \"%0\"))\n \t\t (zero_extend:HI (match_operand:QI 2 \"nonimmediate_operand\" \"qm\"))))]\n   \"\"\n   \"mul%B0 %2\")\n \n (define_insn \"mulqihi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=a\")\n-\t(mult:HI (sign_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"%0\"))\n+  [(set (match_operand:HI 0 \"register_operand\" \"=a\")\n+\t(mult:HI (sign_extend:HI (match_operand:QI 1 \"register_operand\" \"%0\"))\n \t\t (sign_extend:HI (match_operand:QI 2 \"nonimmediate_operand\" \"qm\"))))]\n   \"\"\n   \"imul%B0 %2\")\n@@ -2851,60 +3357,53 @@\n \n (define_expand \"mulxf3\"\n   [(set (match_operand:XF 0 \"register_operand\" \"\")\n-\t(mult:XF (match_operand:XF 1 \"nonimmediate_operand\" \"\")\n-\t\t (match_operand:XF 2 \"nonimmediate_operand\" \"\")))]\n+\t(mult:XF (match_operand:XF 1 \"register_operand\" \"\")\n+\t\t (match_operand:XF 2 \"register_operand\" \"\")))]\n   \"TARGET_80387\"\n   \"\")\n \n (define_expand \"muldf3\"\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n-\t(mult:DF (match_operand:DF 1 \"nonimmediate_operand\" \"\")\n+\t(mult:DF (match_operand:DF 1 \"register_operand\" \"\")\n \t\t (match_operand:DF 2 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_80387\"\n   \"\")\n \n (define_expand \"mulsf3\"\n   [(set (match_operand:SF 0 \"register_operand\" \"\")\n-\t(mult:SF (match_operand:SF 1 \"nonimmediate_operand\" \"\")\n+\t(mult:SF (match_operand:SF 1 \"register_operand\" \"\")\n \t\t (match_operand:SF 2 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_80387\"\n   \"\")\n \f\n ;;- divide instructions\n \n (define_insn \"divqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=a\")\n-\t(div:QI (match_operand:HI 1 \"general_operand\" \"0\")\n-\t\t(match_operand:QI 2 \"general_operand\" \"qm\")))]\n+  [(set (match_operand:QI 0 \"register_operand\" \"=a\")\n+\t(div:QI (match_operand:HI 1 \"register_operand\" \"0\")\n+\t\t(match_operand:QI 2 \"nonimmediate_operand\" \"qm\")))]\n   \"\"\n   \"idiv%B0 %2\")\n \n (define_insn \"udivqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=a\")\n-\t(udiv:QI (match_operand:HI 1 \"general_operand\" \"0\")\n-\t\t (match_operand:QI 2 \"general_operand\" \"qm\")))]\n+  [(set (match_operand:QI 0 \"register_operand\" \"=a\")\n+\t(udiv:QI (match_operand:HI 1 \"register_operand\" \"0\")\n+\t\t (match_operand:QI 2 \"nonimmediate_operand\" \"qm\")))]\n   \"\"\n   \"div%B0 %2\")\n \n ;; The patterns that match these are at the end of this file.\n \n (define_expand \"divxf3\"\n   [(set (match_operand:XF 0 \"register_operand\" \"\")\n-\t(div:XF (match_operand:XF 1 \"nonimmediate_operand\" \"\")\n-\t\t(match_operand:XF 2 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_80387\"\n-  \"\")\n-\n-(define_expand \"divdf3\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"\")\n-\t(div:DF (match_operand:DF 1 \"nonimmediate_operand\" \"\")\n-\t\t(match_operand:DF 2 \"nonimmediate_operand\" \"\")))]\n+\t(div:XF (match_operand:XF 1 \"register_operand\" \"\")\n+\t\t(match_operand:XF 2 \"register_operand\" \"\")))]\n   \"TARGET_80387\"\n   \"\")\n \n (define_expand \"divsf3\"\n   [(set (match_operand:SF 0 \"register_operand\" \"\")\n-\t(div:SF (match_operand:SF 1 \"nonimmediate_operand\" \"\")\n+\t(div:SF (match_operand:SF 1 \"register_operand\" \"\")\n \t\t(match_operand:SF 2 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_80387\"\n   \"\")\n@@ -2914,7 +3413,7 @@\n (define_insn \"divmodsi4\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n \t(div:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t\t(match_operand:SI 2 \"general_operand\" \"rm\")))\n+\t\t(match_operand:SI 2 \"nonimmediate_operand\" \"rm\")))\n    (set (match_operand:SI 3 \"register_operand\" \"=&d\")\n \t(mod:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n@@ -2931,7 +3430,7 @@\n (define_insn \"divmodhi4\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=a\")\n \t(div:HI (match_operand:HI 1 \"register_operand\" \"0\")\n-\t\t(match_operand:HI 2 \"general_operand\" \"rm\")))\n+\t\t(match_operand:HI 2 \"nonimmediate_operand\" \"rm\")))\n    (set (match_operand:HI 3 \"register_operand\" \"=&d\")\n \t(mod:HI (match_dup 1) (match_dup 2)))]\n   \"\"\n@@ -2941,7 +3440,7 @@\n (define_insn \"udivmodsi4\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n \t(udiv:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t\t (match_operand:SI 2 \"general_operand\" \"rm\")))\n+\t\t (match_operand:SI 2 \"nonimmediate_operand\" \"rm\")))\n    (set (match_operand:SI 3 \"register_operand\" \"=&d\")\n \t(umod:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n@@ -2955,7 +3454,7 @@\n (define_insn \"udivmodhi4\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=a\")\n \t(udiv:HI (match_operand:HI 1 \"register_operand\" \"0\")\n-\t\t (match_operand:HI 2 \"general_operand\" \"rm\")))\n+\t\t (match_operand:HI 2 \"nonimmediate_operand\" \"rm\")))\n    (set (match_operand:HI 3 \"register_operand\" \"=&d\")\n \t(umod:HI (match_dup 1) (match_dup 2)))]\n   \"\"\n@@ -2971,7 +3470,7 @@\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n \t(udiv:DI (match_operand:DI 1 \"register_operand\" \"a\")\n-\t\t (match_operand:SI 2 \"general_operand\" \"rm\")))\n+\t\t (match_operand:SI 2 \"nonimmediate_operand\" \"rm\")))\n    (set (match_operand:SI 3 \"register_operand\" \"=d\")\n \t(umod:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n@@ -2997,12 +3496,20 @@\n \n ;; ??? What if we only change one byte of an offsettable memory reference?\n (define_insn \"andsi3\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=r,r,rm,r\")\n-\t(and:SI (match_operand:SI 1 \"general_operand\" \"%rm,qm,0,0\")\n-\t\t(match_operand:SI 2 \"general_operand\" \"L,K,ri,rm\")))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,r\")\n+\t(and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0\")\n+\t\t(match_operand:SI 2 \"general_operand\" \"ri,rm\")))]\n   \"\"\n   \"*\n {\n+  if (!rtx_equal_p (operands[0], operands[1])\n+      && rtx_equal_p (operands[0], operands[2]))\n+    {\n+      rtx tmp;\n+      tmp = operands[1];\n+      operands[1] = operands[2];\n+      operands[2] = tmp;\n+    }\n   if (GET_CODE (operands[2]) == CONST_INT\n       && ! (GET_CODE (operands[0]) == MEM && MEM_VOLATILE_P (operands[0])))\n     {\n@@ -3076,8 +3583,8 @@\n }\")\n \n (define_insn \"andhi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=rm,r\")\n-\t(and:HI (match_operand:HI 1 \"general_operand\" \"%0,0\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,r\")\n+\t(and:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t(match_operand:HI 2 \"general_operand\" \"ri,rm\")))]\n   \"\"\n   \"*\n@@ -3122,8 +3629,8 @@\n }\")\n \n (define_insn \"andqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=qm,q\")\n-\t(and:QI (match_operand:QI 1 \"general_operand\" \"%0,0\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q\")\n+\t(and:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t(match_operand:QI 2 \"general_operand\" \"qn,qmn\")))]\n   \"\"\n   \"* return AS2 (and%B0,%2,%0);\")\n@@ -3142,10 +3649,10 @@\n   \"and%W0 %1,%0\")\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=q\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=q\")\n \t(and:SI\n \t (zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"qm\"))\n-\t\t(match_operand:SI 2 \"general_operand\" \"0\")))]\n+\t\t(match_operand:SI 2 \"register_operand\" \"0\")))]\n   \"GET_CODE (operands[2]) == CONST_INT\n    && (unsigned int) INTVAL (operands[2]) < (1 << GET_MODE_BITSIZE (QImode))\"\n   \"and%L0 %1,%0\")\n@@ -3156,8 +3663,8 @@\n \n ;; ??? What if we only change one byte of an offsettable memory reference?\n (define_insn \"iorsi3\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=rm,r\")\n-\t(ior:SI (match_operand:SI 1 \"general_operand\" \"%0,0\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,r\")\n+\t(ior:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t(match_operand:SI 2 \"general_operand\" \"ri,rm\")))]\n   \"\"\n   \"*\n@@ -3192,8 +3699,8 @@\n }\")\n \n (define_insn \"iorhi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=rm,r\")\n-\t(ior:HI (match_operand:HI 1 \"general_operand\" \"%0,0\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,r\")\n+\t(ior:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t(match_operand:HI 2 \"general_operand\" \"ri,rm\")))]\n   \"\"\n   \"*\n@@ -3234,8 +3741,8 @@\n }\")\n \n (define_insn \"iorqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=qm,q\")\n-\t(ior:QI (match_operand:QI 1 \"general_operand\" \"%0,0\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q\")\n+\t(ior:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t(match_operand:QI 2 \"general_operand\" \"qn,qmn\")))]\n   \"\"\n   \"* return AS2 (or%B0,%2,%0);\")\n@@ -3244,8 +3751,8 @@\n \n ;; ??? What if we only change one byte of an offsettable memory reference?\n (define_insn \"xorsi3\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=rm,r\")\n-\t(xor:SI (match_operand:SI 1 \"general_operand\" \"%0,0\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,r\")\n+\t(xor:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t(match_operand:SI 2 \"general_operand\" \"ri,rm\")))]\n   \"\"\n   \"*\n@@ -3280,8 +3787,8 @@\n }\")\n \n (define_insn \"xorhi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=rm,r\")\n-\t(xor:HI (match_operand:HI 1 \"general_operand\" \"%0,0\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,r\")\n+\t(xor:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t(match_operand:HI 2 \"general_operand\" \"ri,rm\")))]\n   \"\"\n   \"*\n@@ -3322,8 +3829,8 @@\n }\")\n \n (define_insn \"xorqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=qm,q\")\n-\t(xor:QI (match_operand:QI 1 \"general_operand\" \"%0,0\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q\")\n+\t(xor:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t(match_operand:QI 2 \"general_operand\" \"qn,qm\")))]\n   \"\"\n   \"* return AS2 (xor%B0,%2,%0);\")\n@@ -3351,205 +3858,198 @@\n }\")\n \n (define_insn \"negsi2\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=rm\")\n-\t(neg:SI (match_operand:SI 1 \"general_operand\" \"0\")))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(neg:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")))]\n   \"\"\n   \"neg%L0 %0\")\n \n (define_insn \"neghi2\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=rm\")\n-\t(neg:HI (match_operand:HI 1 \"general_operand\" \"0\")))]\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(neg:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")))]\n   \"\"\n   \"neg%W0 %0\")\n \n (define_insn \"negqi2\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=qm\")\n-\t(neg:QI (match_operand:QI 1 \"general_operand\" \"0\")))]\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n+\t(neg:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")))]\n   \"\"\n   \"neg%B0 %0\")\n \n (define_insn \"negsf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(neg:SF (match_operand:SF 1 \"general_operand\" \"0\")))]\n+\t(neg:SF (match_operand:SF 1 \"register_operand\" \"0\")))]\n   \"TARGET_80387\"\n   \"fchs\")\n \n (define_insn \"negdf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(neg:DF (match_operand:DF 1 \"general_operand\" \"0\")))]\n+\t(neg:DF (match_operand:DF 1 \"register_operand\" \"0\")))]\n   \"TARGET_80387\"\n   \"fchs\")\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(neg:DF (float_extend:DF (match_operand:SF 1 \"general_operand\" \"0\"))))]\n+\t(neg:DF (float_extend:DF (match_operand:SF 1 \"register_operand\" \"0\"))))]\n   \"TARGET_80387\"\n   \"fchs\")\n \n (define_insn \"negxf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(neg:XF (match_operand:XF 1 \"general_operand\" \"0\")))]\n+\t(neg:XF (match_operand:XF 1 \"register_operand\" \"0\")))]\n   \"TARGET_80387\"\n   \"fchs\")\n \n (define_insn \"\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(neg:XF (float_extend:XF (match_operand:DF 1 \"general_operand\" \"0\"))))]\n+\t(neg:XF (float_extend:XF (match_operand:DF 1 \"register_operand\" \"0\"))))]\n   \"TARGET_80387\"\n   \"fchs\")\n \f\n ;; Absolute value instructions\n \n (define_insn \"abssf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(abs:SF (match_operand:SF 1 \"general_operand\" \"0\")))]\n+\t(abs:SF (match_operand:SF 1 \"register_operand\" \"0\")))]\n   \"TARGET_80387\"\n-  \"fabs\")\n+  \"fabs\"\n+  [(set_attr \"type\" \"fpop\")])\n \n (define_insn \"absdf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(abs:DF (match_operand:DF 1 \"general_operand\" \"0\")))]\n+\t(abs:DF (match_operand:DF 1 \"register_operand\" \"0\")))]\n   \"TARGET_80387\"\n-  \"fabs\")\n+  \"fabs\"\n+  [(set_attr \"type\" \"fpop\")])\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(abs:DF (float_extend:DF (match_operand:SF 1 \"general_operand\" \"0\"))))]\n+\t(abs:DF (float_extend:DF (match_operand:SF 1 \"register_operand\" \"0\"))))]\n   \"TARGET_80387\"\n-  \"fabs\")\n+  \"fabs\"\n+  [(set_attr \"type\" \"fpop\")])\n \n (define_insn \"absxf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(abs:XF (match_operand:XF 1 \"general_operand\" \"0\")))]\n+\t(abs:XF (match_operand:XF 1 \"register_operand\" \"0\")))]\n   \"TARGET_80387\"\n-  \"fabs\")\n+  \"fabs\"\n+  [(set_attr \"type\" \"fpop\")])\n \n (define_insn \"\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(abs:XF (float_extend:XF (match_operand:DF 1 \"general_operand\" \"0\"))))]\n+\t(abs:XF (float_extend:XF (match_operand:DF 1 \"register_operand\" \"0\"))))]\n   \"TARGET_80387\"\n-  \"fabs\")\n+  \"fabs\"\n+  [(set_attr \"type\" \"fpop\")])\n \n (define_insn \"sqrtsf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(sqrt:SF (match_operand:SF 1 \"general_operand\" \"0\")))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && (TARGET_IEEE_FP || flag_fast_math) \"\n+\t(sqrt:SF (match_operand:SF 1 \"register_operand\" \"0\")))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\"\n   \"fsqrt\")\n \n (define_insn \"sqrtdf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(sqrt:DF (match_operand:DF 1 \"general_operand\" \"0\")))]\n+\t(sqrt:DF (match_operand:DF 1 \"register_operand\" \"0\")))]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && (TARGET_IEEE_FP || flag_fast_math) \"\n   \"fsqrt\")\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(sqrt:DF (float_extend:DF\n-\t\t  (match_operand:SF 1 \"general_operand\" \"0\"))))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n-   && (TARGET_IEEE_FP || flag_fast_math) \"\n+\t\t  (match_operand:SF 1 \"register_operand\" \"0\"))))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\"\n   \"fsqrt\")\n \n (define_insn \"sqrtxf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(sqrt:XF (match_operand:XF 1 \"general_operand\" \"0\")))]\n+\t(sqrt:XF (match_operand:XF 1 \"register_operand\" \"0\")))]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n    && (TARGET_IEEE_FP || flag_fast_math) \"\n   \"fsqrt\")\n \n (define_insn \"\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(sqrt:XF (float_extend:XF\n-\t\t  (match_operand:DF 1 \"general_operand\" \"0\"))))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n-   && (TARGET_IEEE_FP || flag_fast_math) \"\n+\t\t  (match_operand:DF 1 \"register_operand\" \"0\"))))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\"\n   \"fsqrt\")\n \n (define_insn \"\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(sqrt:XF (float_extend:XF\n-\t\t  (match_operand:SF 1 \"general_operand\" \"0\"))))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n-   && (TARGET_IEEE_FP || flag_fast_math) \"\n+\t\t  (match_operand:SF 1 \"register_operand\" \"0\"))))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\"\n   \"fsqrt\")\n \n (define_insn \"sindf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(unspec:DF [(match_operand:DF 1 \"register_operand\" \"0\")] 1))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n-   && (TARGET_IEEE_FP || flag_fast_math) \"\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 && flag_fast_math\"\n   \"fsin\")\n \n (define_insn \"sinsf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(unspec:SF [(match_operand:SF 1 \"register_operand\" \"0\")] 1))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n-   && (TARGET_IEEE_FP || flag_fast_math) \"\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 && flag_fast_math\"\n   \"fsin\")\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(unspec:DF [(float_extend:DF\n \t\t     (match_operand:SF 1 \"register_operand\" \"0\"))] 1))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n-   && (TARGET_IEEE_FP || flag_fast_math) \"\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 && flag_fast_math\"\n   \"fsin\")\n \n (define_insn \"sinxf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(unspec:XF [(match_operand:XF 1 \"register_operand\" \"0\")] 1))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n-   && (TARGET_IEEE_FP || flag_fast_math) \"\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 && flag_fast_math\"\n   \"fsin\")\n \n (define_insn \"cosdf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(unspec:DF [(match_operand:DF 1 \"register_operand\" \"0\")] 2))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n-   && (TARGET_IEEE_FP || flag_fast_math) \"\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 && flag_fast_math\"\n   \"fcos\")\n \n (define_insn \"cossf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(unspec:SF [(match_operand:SF 1 \"register_operand\" \"0\")] 2))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n-   && (TARGET_IEEE_FP || flag_fast_math) \"\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 && flag_fast_math\"\n   \"fcos\")\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(unspec:DF [(float_extend:DF\n \t\t     (match_operand:SF 1 \"register_operand\" \"0\"))] 2))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n-   && (TARGET_IEEE_FP || flag_fast_math) \"\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 && flag_fast_math\"\n   \"fcos\")\n \n (define_insn \"cosxf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(unspec:XF [(match_operand:XF 1 \"register_operand\" \"0\")] 2))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n-   && (TARGET_IEEE_FP || flag_fast_math) \"\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 && flag_fast_math\"\n   \"fcos\")\n \f\n ;;- one complement instructions\n \n (define_insn \"one_cmplsi2\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=rm\")\n-\t(not:SI (match_operand:SI 1 \"general_operand\" \"0\")))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(not:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")))]\n   \"\"\n   \"not%L0 %0\")\n \n (define_insn \"one_cmplhi2\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=rm\")\n-\t(not:HI (match_operand:HI 1 \"general_operand\" \"0\")))]\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(not:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")))]\n   \"\"\n   \"not%W0 %0\")\n \n (define_insn \"one_cmplqi2\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=qm\")\n-\t(not:QI (match_operand:QI 1 \"general_operand\" \"0\")))]\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n+\t(not:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")))]\n   \"\"\n   \"not%B0 %0\")\n \f\n@@ -3674,8 +4174,8 @@\n ;; is smaller - use leal for now unless the shift count is 1.\n \n (define_insn \"ashlsi3\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=r,rm\")\n-\t(ashift:SI (match_operand:SI 1 \"general_operand\" \"r,0\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,rm\")\n+\t(ashift:SI (match_operand:SI 1 \"nonimmediate_operand\" \"r,0\")\n \t\t   (match_operand:SI 2 \"nonmemory_operand\" \"M,cI\")))]\n   \"\"\n   \"*\n@@ -3712,8 +4212,8 @@\n }\")\n \n (define_insn \"ashlhi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=rm\")\n-\t(ashift:HI (match_operand:HI 1 \"general_operand\" \"0\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(ashift:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n \t\t   (match_operand:HI 2 \"nonmemory_operand\" \"cI\")))]\n   \"\"\n   \"*\n@@ -3728,8 +4228,8 @@\n }\")\n \n (define_insn \"ashlqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=qm\")\n-\t(ashift:QI (match_operand:QI 1 \"general_operand\" \"0\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n+\t(ashift:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n \t\t   (match_operand:QI 2 \"nonmemory_operand\" \"cI\")))]\n   \"\"\n   \"*\n@@ -3765,6 +4265,31 @@\n   DONE;\n }\")\n \n+(define_insn \"ashldi3_32\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,m\")\n+\t(ashift:DI (match_operand:DI 1 \"nonimmediate_operand\" \"ro,r\")\n+\t\t   (const_int 32)))]\n+  \"\"\n+  \"*\n+{\n+  rtx low[2], high[2], xops[4];\n+\n+  split_di (operands, 2, low, high);\n+  xops[0] = high[0];\n+  xops[1] = low[1];\n+  xops[2] = low[0];\n+  xops[3] = const0_rtx;\n+  if (!rtx_equal_p (xops[0], xops[1]))\n+    output_asm_insn (AS2 (mov%L0,%1,%0), xops);\n+\n+  if (GET_CODE (low[0]) == MEM)\n+    output_asm_insn (AS2 (mov%L2,%3,%2), xops);\n+  else\n+    output_asm_insn (AS2 (xor%L2,%2,%2), xops);\n+\n+  RET;\n+}\")\n+\n (define_insn \"ashrdi3_const_int\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n \t(ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"0\")\n@@ -3839,8 +4364,8 @@\n }\")\n \n (define_insn \"ashrsi3\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=rm\")\n-\t(ashiftrt:SI (match_operand:SI 1 \"general_operand\" \"0\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(ashiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:SI 2 \"nonmemory_operand\" \"cI\")))]\n   \"\"\n   \"*\n@@ -3852,8 +4377,8 @@\n }\")\n \n (define_insn \"ashrhi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=rm\")\n-\t(ashiftrt:HI (match_operand:HI 1 \"general_operand\" \"0\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(ashiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:HI 2 \"nonmemory_operand\" \"cI\")))]\n   \"\"\n   \"*\n@@ -3865,8 +4390,8 @@\n }\")\n \n (define_insn \"ashrqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=qm\")\n-\t(ashiftrt:QI (match_operand:QI 1 \"general_operand\" \"0\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n+\t(ashiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"nonmemory_operand\" \"cI\")))]\n   \"\"\n   \"*\n@@ -3901,6 +4426,31 @@\n   DONE;\n }\")\n \n+(define_insn \"lshrdi3_32\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,m\")\n+\t(lshiftrt:DI (match_operand:DI 1 \"nonimmediate_operand\" \"ro,r\")\n+\t\t     (const_int 32)))]\n+  \"\"\n+  \"*\n+{\n+  rtx low[2], high[2], xops[4];\n+\n+  split_di (operands, 2, low, high);\n+  xops[0] = low[0];\n+  xops[1] = high[1];\n+  xops[2] = high[0];\n+  xops[3] = const0_rtx;\n+  if (!rtx_equal_p (xops[0], xops[1]))\n+    output_asm_insn (AS2 (mov%L0,%1,%0), xops);\n+\n+  if (GET_CODE (low[0]) == MEM)\n+    output_asm_insn (AS2 (mov%L2,%3,%2), xops);\n+  else\n+    output_asm_insn (AS2 (xor%L2,%2,%2), xops);\n+\n+  RET;\n+}\")\n+\n (define_insn \"lshrdi3_const_int\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n \t(lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"0\")\n@@ -3974,8 +4524,8 @@\n }\")\n \n (define_insn \"lshrsi3\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=rm\")\n-\t(lshiftrt:SI (match_operand:SI 1 \"general_operand\" \"0\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(lshiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:SI 2 \"nonmemory_operand\" \"cI\")))]\n   \"\"\n   \"*\n@@ -3987,8 +4537,8 @@\n }\")\n \n (define_insn \"lshrhi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=rm\")\n-\t(lshiftrt:HI (match_operand:HI 1 \"general_operand\" \"0\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(lshiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:HI 2 \"nonmemory_operand\" \"cI\")))]\n   \"\"\n   \"*\n@@ -4000,8 +4550,8 @@\n }\")\n \n (define_insn \"lshrqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=qm\")\n-\t(lshiftrt:QI (match_operand:QI 1 \"general_operand\" \"0\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n+\t(lshiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"nonmemory_operand\" \"cI\")))]\n   \"\"\n   \"*\n@@ -4015,8 +4565,8 @@\n ;;- rotate instructions\n \n (define_insn \"rotlsi3\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=rm\")\n-\t(rotate:SI (match_operand:SI 1 \"general_operand\" \"0\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(rotate:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n \t\t   (match_operand:SI 2 \"nonmemory_operand\" \"cI\")))]\n   \"\"\n   \"*\n@@ -4028,8 +4578,8 @@\n }\")\n \n (define_insn \"rotlhi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=rm\")\n-\t(rotate:HI (match_operand:HI 1 \"general_operand\" \"0\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(rotate:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n \t\t   (match_operand:HI 2 \"nonmemory_operand\" \"cI\")))]\n   \"\"\n   \"*\n@@ -4041,8 +4591,8 @@\n }\")\n \n (define_insn \"rotlqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=qm\")\n-\t(rotate:QI (match_operand:QI 1 \"general_operand\" \"0\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n+\t(rotate:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n \t\t   (match_operand:QI 2 \"nonmemory_operand\" \"cI\")))]\n   \"\"\n   \"*\n@@ -4054,8 +4604,8 @@\n }\")\n \n (define_insn \"rotrsi3\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=rm\")\n-\t(rotatert:SI (match_operand:SI 1 \"general_operand\" \"0\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(rotatert:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:SI 2 \"nonmemory_operand\" \"cI\")))]\n   \"\"\n   \"*\n@@ -4067,8 +4617,8 @@\n }\")\n \n (define_insn \"rotrhi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=rm\")\n-\t(rotatert:HI (match_operand:HI 1 \"general_operand\" \"0\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(rotatert:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:HI 2 \"nonmemory_operand\" \"cI\")))]\n   \"\"\n   \"*\n@@ -4080,8 +4630,8 @@\n }\")\n \n (define_insn \"rotrqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=qm\")\n-\t(rotatert:QI (match_operand:QI 1 \"general_operand\" \"0\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n+\t(rotatert:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"nonmemory_operand\" \"cI\")))]\n   \"\"\n   \"*\n@@ -4098,9 +4648,9 @@\n ;; %ah, %bh, %ch, %dh.\n (define_insn \"insv\"\n   [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"+&r\")\n-\t\t\t (match_operand:SI 1 \"general_operand\" \"i\")\n-\t\t\t (match_operand:SI 2 \"general_operand\" \"i\"))\n-\t(match_operand:SI 3 \"general_operand\" \"ri\"))]\n+\t\t\t (match_operand:SI 1 \"immediate_operand\" \"i\")\n+\t\t\t (match_operand:SI 2 \"immediate_operand\" \"i\"))\n+\t(match_operand:SI 3 \"nonmemory_operand\" \"ri\"))]\n   \"\"\n   \"*\n {\n@@ -4136,7 +4686,7 @@\n   [(set (zero_extract:SI (match_operand:SI 0 \"general_operand\" \"\")\n \t\t\t (match_operand:SI 1 \"immediate_operand\" \"\")\n \t\t\t (match_operand:SI 2 \"immediate_operand\" \"\"))\n-\t(match_operand:QI 3 \"general_operand\" \"ri\"))]\n+\t(match_operand:QI 3 \"nonmemory_operand\" \"ri\"))]\n   \"\"\n   \"\n {\n@@ -4179,9 +4729,9 @@\n \n ;; General bit set and clear.\n (define_insn \"\"\n-  [(set (zero_extract:SI (match_operand:SI 0 \"general_operand\" \"+rm\")\n+  [(set (zero_extract:SI (match_operand:SI 0 \"nonimmediate_operand\" \"+rm\")\n \t\t\t (const_int 1)\n-\t\t\t (match_operand:SI 2 \"general_operand\" \"r\"))\n+\t\t\t (match_operand:SI 2 \"register_operand\" \"r\"))\n \t(match_operand:SI 3 \"const_int_operand\" \"n\"))]\n   \"TARGET_USE_BIT_TEST && GET_CODE (operands[2]) != CONST_INT\"\n   \"*\n@@ -4197,10 +4747,10 @@\n ;; Bit complement.  See comments on previous pattern.\n ;; ??? Is this really worthwhile?\n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=rm\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(xor:SI (ashift:SI (const_int 1)\n-\t\t\t   (match_operand:SI 1 \"general_operand\" \"r\"))\n-\t\t(match_operand:SI 2 \"general_operand\" \"0\")))]\n+\t\t\t   (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t(match_operand:SI 2 \"nonimmediate_operand\" \"0\")))]\n   \"TARGET_USE_BIT_TEST && GET_CODE (operands[1]) != CONST_INT\"\n   \"*\n {\n@@ -4210,10 +4760,10 @@\n }\")\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=rm\")\n-\t(xor:SI (match_operand:SI 1 \"general_operand\" \"0\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(xor:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n \t\t(ashift:SI (const_int 1)\n-\t\t\t   (match_operand:SI 2 \"general_operand\" \"r\"))))]\n+\t\t\t   (match_operand:SI 2 \"register_operand\" \"r\"))))]\n   \"TARGET_USE_BIT_TEST && GET_CODE (operands[2]) != CONST_INT\"\n   \"*\n {\n@@ -4235,7 +4785,7 @@\n (define_insn \"\"\n   [(set (cc0) (zero_extract (match_operand:SI 0 \"register_operand\" \"r\")\n \t\t\t    (const_int 1)\n-\t\t\t    (match_operand:SI 1 \"general_operand\" \"r\")))]\n+\t\t\t    (match_operand:SI 1 \"register_operand\" \"r\")))]\n   \"GET_CODE (operands[1]) != CONST_INT\"\n   \"*\n {\n@@ -4278,7 +4828,7 @@\n ;; The CPU may access unspecified bytes around the actual target byte.\n \n (define_insn \"\"\n-  [(set (cc0) (zero_extract (match_operand:QI 0 \"general_operand\" \"rm\")\n+  [(set (cc0) (zero_extract (match_operand:QI 0 \"nonimmediate_operand\" \"rm\")\n \t\t\t    (match_operand:SI 1 \"const_int_operand\" \"n\")\n \t\t\t    (match_operand:SI 2 \"const_int_operand\" \"n\")))]\n   \"GET_CODE (operands[0]) != MEM || ! MEM_VOLATILE_P (operands[0])\"\n@@ -4559,6 +5109,14 @@\n   if (cc_prev_status.flags & CC_Z_IN_NOT_C)\n     return \\\"jnc %l0\\\";\n   else\n+  if (cc_prev_status.flags & CC_TEST_AX)\n+    {\n+      operands[1] = gen_rtx (REG, SImode, 0);\n+      operands[2] = GEN_INT (0x4000);\n+      output_asm_insn (AS2 (testl,%2,%1), operands);\n+      return AS1 (jne,%l0);\n+    }\n+\n     return \\\"je %l0\\\";\n }\")\n \n@@ -4591,6 +5149,14 @@\n   if (cc_prev_status.flags & CC_Z_IN_NOT_C)\n     return \\\"jc %l0\\\";\n   else\n+  if (cc_prev_status.flags & CC_TEST_AX)\n+    {\n+      operands[1] = gen_rtx (REG, SImode, 0);\n+      operands[2] = GEN_INT (0x4000);\n+      output_asm_insn (AS2 (testl,%2,%1), operands);\n+      return AS1 (je,%l0);\n+    }\n+\n     return \\\"jne %l0\\\";\n }\")\n \n@@ -4616,6 +5182,13 @@\n   if (TARGET_IEEE_FP && (cc_prev_status.flags & CC_IN_80387))\n     return AS1 (je,%l0);\n \n+  if (cc_prev_status.flags & CC_TEST_AX)\n+    {\n+      operands[1] = gen_rtx (REG, SImode, 0);\n+      operands[2] = GEN_INT (0x4100);\n+      output_asm_insn (AS2 (testl,%2,%1), operands);\n+      return AS1 (je,%l0);\n+    }\n   OUTPUT_JUMP (\\\"jg %l0\\\", \\\"ja %l0\\\", NULL_PTR);\n }\")\n \n@@ -4660,6 +5233,13 @@\n   if (TARGET_IEEE_FP && (cc_prev_status.flags & CC_IN_80387))\n     return AS1 (je,%l0);\n \n+  if (cc_prev_status.flags & CC_TEST_AX)\n+    {\n+      operands[1] = gen_rtx (REG, SImode, 0);\n+      operands[2] = GEN_INT (0x100);\n+      output_asm_insn (AS2 (testl,%2,%1), operands);\n+      return AS1 (jne,%l0);\n+    }\n   OUTPUT_JUMP (\\\"jl %l0\\\", \\\"jb %l0\\\", \\\"js %l0\\\");\n }\")\n \n@@ -4703,7 +5283,13 @@\n {\n   if (TARGET_IEEE_FP && (cc_prev_status.flags & CC_IN_80387))\n     return AS1 (je,%l0);\n-\n+  if (cc_prev_status.flags & CC_TEST_AX)\n+    {\n+      operands[1] = gen_rtx (REG, SImode, 0);\n+      operands[2] = GEN_INT (0x100);\n+      output_asm_insn (AS2 (testl,%2,%1), operands);\n+      return AS1 (je,%l0);\n+    }\n   OUTPUT_JUMP (\\\"jge %l0\\\", \\\"jae %l0\\\", \\\"jns %l0\\\");\n }\")\n \n@@ -4747,6 +5333,13 @@\n {\n   if (TARGET_IEEE_FP && (cc_prev_status.flags & CC_IN_80387))\n     return AS1 (jb,%l0);\n+  if (cc_prev_status.flags & CC_TEST_AX)\n+    {\n+      operands[1] = gen_rtx (REG, SImode, 0);\n+      operands[2] = GEN_INT (0x4100);\n+      output_asm_insn (AS2 (testl,%2,%1), operands);\n+      return AS1 (jne,%l0);\n+    }\n \n   OUTPUT_JUMP (\\\"jle %l0\\\", \\\"jbe %l0\\\", NULL_PTR);\n }\")\n@@ -4784,6 +5377,13 @@\n   if (cc_prev_status.flags & CC_Z_IN_NOT_C)\n     return \\\"jc %l0\\\";\n   else\n+  if (cc_prev_status.flags & CC_TEST_AX)\n+    {\n+      operands[1] = gen_rtx (REG, SImode, 0);\n+      operands[2] = GEN_INT (0x4000);\n+      output_asm_insn (AS2 (testl,%2,%1), operands);\n+      return AS1 (je,%l0);\n+    }\n     return \\\"jne %l0\\\";\n }\")\n \n@@ -4799,6 +5399,13 @@\n   if (cc_prev_status.flags & CC_Z_IN_NOT_C)\n     return \\\"jnc %l0\\\";\n   else\n+  if (cc_prev_status.flags & CC_TEST_AX)\n+    {\n+      operands[1] = gen_rtx (REG, SImode, 0);\n+      operands[2] = GEN_INT (0x4000);\n+      output_asm_insn (AS2 (testl,%2,%1), operands);\n+      return AS1 (jne,%l0);\n+    }\n     return \\\"je %l0\\\";\n }\")\n \n@@ -4813,7 +5420,13 @@\n {\n   if (TARGET_IEEE_FP && (cc_prev_status.flags & CC_IN_80387))\n     return AS1 (jne,%l0);\n-\n+  if (cc_prev_status.flags & CC_TEST_AX)\n+    {\n+      operands[1] = gen_rtx (REG, SImode, 0);\n+      operands[2] = GEN_INT (0x4100);\n+      output_asm_insn (AS2 (testl,%2,%1), operands);\n+      return AS1 (jne,%l0);\n+    }\n   OUTPUT_JUMP (\\\"jle %l0\\\", \\\"jbe %l0\\\", NULL_PTR);\n }\")\n \n@@ -4837,6 +5450,13 @@\n {\n   if (TARGET_IEEE_FP && (cc_prev_status.flags & CC_IN_80387))\n     return AS1 (jne,%l0);\n+  if (cc_prev_status.flags & CC_TEST_AX)\n+    {\n+      operands[1] = gen_rtx (REG, SImode, 0);\n+      operands[2] = GEN_INT (0x100);\n+      output_asm_insn (AS2 (testl,%2,%1), operands);\n+      return AS1 (je,%l0);\n+    }\n \n   OUTPUT_JUMP (\\\"jge %l0\\\", \\\"jae %l0\\\", \\\"jns %l0\\\");\n }\")\n@@ -4861,7 +5481,13 @@\n {\n   if (TARGET_IEEE_FP && (cc_prev_status.flags & CC_IN_80387))\n     return AS1 (jne,%l0);\n-\n+  if (cc_prev_status.flags & CC_TEST_AX)\n+    {\n+      operands[1] = gen_rtx (REG, SImode, 0);\n+      operands[2] = GEN_INT (0x100);\n+      output_asm_insn (AS2 (testl,%2,%1), operands);\n+      return AS1 (jne,%l0);\n+    }\n   OUTPUT_JUMP (\\\"jl %l0\\\", \\\"jb %l0\\\", \\\"js %l0\\\");\n }\")\n \n@@ -4886,6 +5512,13 @@\n   if (TARGET_IEEE_FP && (cc_prev_status.flags & CC_IN_80387))\n     return AS1 (jae,%l0);\n \n+  if (cc_prev_status.flags & CC_TEST_AX)\n+    {\n+      operands[1] = gen_rtx (REG, SImode, 0);\n+      operands[2] = GEN_INT (0x4100);\n+      output_asm_insn (AS2 (testl,%2,%1), operands);\n+      return AS1 (je,%l0);\n+    }\n   OUTPUT_JUMP (\\\"jg %l0\\\", \\\"ja %l0\\\", NULL_PTR);\n }\")\n \n@@ -4907,7 +5540,7 @@\n   \"jmp %l0\")\n \n (define_insn \"indirect_jump\"\n-  [(set (pc) (match_operand:SI 0 \"general_operand\" \"rm\"))]\n+  [(set (pc) (match_operand:SI 0 \"nonimmediate_operand\" \"rm\"))]\n   \"\"\n   \"*\n {\n@@ -4935,7 +5568,7 @@\n (define_insn \"\"\n   [(set (pc)\n \t(if_then_else (match_operator 0 \"arithmetic_comparison_operator\"\n-\t\t\t\t      [(plus:SI (match_operand:SI 1 \"general_operand\" \"+r,m\")\n+\t\t\t\t      [(plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"+r,m\")\n \t\t\t\t\t\t(match_operand:SI 2 \"general_operand\" \"rmi,ri\"))\n \t\t\t\t       (const_int 0)])\n \t\t      (label_ref (match_operand 3 \"\" \"\"))\n@@ -4962,7 +5595,7 @@\n (define_insn \"\"\n   [(set (pc)\n \t(if_then_else (match_operator 0 \"arithmetic_comparison_operator\"\n-\t\t\t\t      [(minus:SI (match_operand:SI 1 \"general_operand\" \"+r,m\")\n+\t\t\t\t      [(minus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"+r,m\")\n \t\t\t\t\t\t (match_operand:SI 2 \"general_operand\" \"rmi,ri\"))\n \t\t\t\t       (const_int 0)])\n \t\t      (label_ref (match_operand 3 \"\" \"\"))\n@@ -5072,7 +5705,7 @@\n }\")\n \n (define_insn \"tablejump\"\n-  [(set (pc) (match_operand:SI 0 \"general_operand\" \"rm\"))\n+  [(set (pc) (match_operand:SI 0 \"nonimmediate_operand\" \"rm\"))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n   \"\"\n   \"*\n@@ -5537,7 +6170,7 @@\n ;; code to handle zero-length compares.\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=&r\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=&r\")\n \t(compare:SI (mem:BLK (match_operand:SI 1 \"address_operand\" \"S\"))\n \t\t    (mem:BLK (match_operand:SI 2 \"address_operand\" \"D\"))))\n    (use (match_operand:SI 3 \"register_operand\" \"c\"))\n@@ -5548,7 +6181,7 @@\n   \"\"\n   \"*\n {\n-  rtx xops[4], label;\n+  rtx xops[2], label;\n \n   label = gen_label_rtx ();\n \n@@ -5558,16 +6191,13 @@\n   output_asm_insn (\\\"je %l0\\\", &label);\n \n   xops[0] = operands[0];\n-  xops[1] = gen_rtx (MEM, QImode,\n-\t\t     gen_rtx (PLUS, SImode, operands[1], constm1_rtx));\n-  xops[2] = gen_rtx (MEM, QImode,\n-\t\t     gen_rtx (PLUS, SImode, operands[2], constm1_rtx));\n-  xops[3] = operands[3];\n-\n-  output_asm_insn (AS2 (movz%B1%L0,%1,%0), xops);\n-  output_asm_insn (AS2 (movz%B2%L3,%2,%3), xops);\n-\n-  output_asm_insn (AS2 (sub%L0,%3,%0), xops);\n+  xops[1] = const1_rtx;\n+  output_asm_insn (AS2 (sbb%L0,%0,%0), xops);\n+  if (QI_REG_P (xops[0]))\n+     output_asm_insn (AS2 (or%B0,%1,%b0), xops);\n+  else\n+     output_asm_insn (AS2 (or%L0,%1,%0), xops);\n+\t\n   ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\", CODE_LABEL_NUMBER (label));\n   RET;\n }\")\n@@ -5596,6 +6226,7 @@\n   return \\\"repz\\;cmps%B2\\\";\n }\")\n \n+\f\n (define_expand \"ffssi2\"\n   [(set (match_dup 2)\n \t(plus:SI (ffs:SI (match_operand:SI 1 \"general_operand\" \"\"))\n@@ -5610,8 +6241,8 @@\n ;; x86 implementations do this.\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=&r\")\n-\t(plus:SI (ffs:SI (match_operand:SI 1 \"general_operand\" \"rm\"))\n+  [(set (match_operand:SI 0 \"register_operand\" \"=&r\")\n+\t(plus:SI (ffs:SI (match_operand:SI 1 \"nonimmediate_operand\" \"rm\"))\n \t\t (const_int -1)))]\n   \"\"\n   \"*\n@@ -5656,8 +6287,8 @@\n   \"operands[2] = gen_reg_rtx (HImode);\")\n \n (define_insn \"\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=&r\")\n-\t(plus:HI (ffs:HI (match_operand:SI 1 \"general_operand\" \"rm\"))\n+  [(set (match_operand:HI 0 \"register_operand\" \"=&r\")\n+\t(plus:HI (ffs:HI (match_operand:SI 1 \"nonimmediate_operand\" \"rm\"))\n \t\t (const_int -1)))]\n   \"\"\n   \"*\n@@ -5706,105 +6337,222 @@\n \t\t\t[(match_operand:DF 1 \"nonimmediate_operand\" \"0,fm\")\n \t\t\t (match_operand:DF 2 \"nonimmediate_operand\" \"fm,0\")]))]\n   \"TARGET_80387\"\n-  \"* return output_387_binary_op (insn, operands);\")\n+  \"* return output_387_binary_op (insn, operands);\"\n+  [(set (attr \"type\") \n+        (cond [(match_operand:DF 3 \"is_mul\" \"\") \n+                 (const_string \"fpop\")\n+               (match_operand:DF 3 \"is_div\" \"\") \n+                 (const_string \"fpdiv\")\n+              ]\n+               (const_string \"fpop\")\n+        )\n+  )])\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(match_operator:DF 3 \"binary_387_op\"\n-\t   [(float:DF (match_operand:SI 1 \"general_operand\" \"rm\"))\n-\t    (match_operand:DF 2 \"general_operand\" \"0\")]))]\n+\t   [(float:DF (match_operand:SI 1 \"nonimmediate_operand\" \"rm\"))\n+\t    (match_operand:DF 2 \"register_operand\" \"0\")]))]\n   \"TARGET_80387\"\n-  \"* return output_387_binary_op (insn, operands);\")\n+  \"* return output_387_binary_op (insn, operands);\"\n+  [(set (attr \"type\") \n+        (cond [(match_operand:DF 3 \"is_mul\" \"\") \n+                 (const_string \"fpop\")\n+               (match_operand:DF 3 \"is_div\" \"\") \n+                 (const_string \"fpdiv\")\n+              ]\n+               (const_string \"fpop\")\n+        )\n+  )])\n \n (define_insn \"\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:XF 3 \"binary_387_op\"\n-\t\t\t[(match_operand:XF 1 \"nonimmediate_operand\" \"0,f\")\n-\t\t\t (match_operand:XF 2 \"nonimmediate_operand\" \"f,0\")]))]\n+\t\t\t[(match_operand:XF 1 \"register_operand\" \"0,f\")\n+\t\t\t (match_operand:XF 2 \"register_operand\" \"f,0\")]))]\n   \"TARGET_80387\"\n-  \"* return output_387_binary_op (insn, operands);\")\n+  \"* return output_387_binary_op (insn, operands);\"\n+  [(set (attr \"type\") \n+        (cond [(match_operand:DF 3 \"is_mul\" \"\") \n+                 (const_string \"fpop\")\n+               (match_operand:DF 3 \"is_div\" \"\") \n+                 (const_string \"fpdiv\")\n+              ]\n+               (const_string \"fpop\")\n+        )\n+  )])\n \n (define_insn \"\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(match_operator:XF 3 \"binary_387_op\"\n-\t   [(float:XF (match_operand:SI 1 \"general_operand\" \"rm\"))\n-\t    (match_operand:XF 2 \"general_operand\" \"0\")]))]\n+\t   [(float:XF (match_operand:SI 1 \"nonimmediate_operand\" \"rm\"))\n+\t    (match_operand:XF 2 \"register_operand\" \"0\")]))]\n   \"TARGET_80387\"\n-  \"* return output_387_binary_op (insn, operands);\")\n+  \"* return output_387_binary_op (insn, operands);\"\n+  [(set (attr \"type\") \n+        (cond [(match_operand:DF 3 \"is_mul\" \"\") \n+                 (const_string \"fpop\")\n+               (match_operand:DF 3 \"is_div\" \"\") \n+                 (const_string \"fpdiv\")\n+              ]\n+               (const_string \"fpop\")\n+        )\n+  )])\n \n (define_insn \"\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:XF 3 \"binary_387_op\"\n-\t   [(float_extend:XF (match_operand:SF 1 \"general_operand\" \"fm,0\"))\n-\t    (match_operand:XF 2 \"general_operand\" \"0,f\")]))]\n+\t   [(float_extend:XF (match_operand:SF 1 \"nonimmediate_operand\" \"fm,0\"))\n+\t    (match_operand:XF 2 \"register_operand\" \"0,f\")]))]\n   \"TARGET_80387\"\n-  \"* return output_387_binary_op (insn, operands);\")\n+  \"* return output_387_binary_op (insn, operands);\"\n+  [(set (attr \"type\") \n+        (cond [(match_operand:DF 3 \"is_mul\" \"\") \n+                 (const_string \"fpop\")\n+               (match_operand:DF 3 \"is_div\" \"\") \n+                 (const_string \"fpdiv\")\n+              ]\n+               (const_string \"fpop\")\n+        )\n+  )])\n \n (define_insn \"\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(match_operator:XF 3 \"binary_387_op\"\n-\t  [(match_operand:XF 1 \"general_operand\" \"0\")\n-\t   (float:XF (match_operand:SI 2 \"general_operand\" \"rm\"))]))]\n+\t  [(match_operand:XF 1 \"register_operand\" \"0\")\n+\t   (float:XF (match_operand:SI 2 \"nonimmediate_operand\" \"rm\"))]))]\n   \"TARGET_80387\"\n-  \"* return output_387_binary_op (insn, operands);\")\n+  \"* return output_387_binary_op (insn, operands);\"\n+  [(set (attr \"type\") \n+        (cond [(match_operand:DF 3 \"is_mul\" \"\") \n+                 (const_string \"fpop\")\n+               (match_operand:DF 3 \"is_div\" \"\") \n+                 (const_string \"fpdiv\")\n+              ]\n+               (const_string \"fpop\")\n+        )\n+  )])\n \n (define_insn \"\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:XF 3 \"binary_387_op\"\n-\t  [(match_operand:XF 1 \"general_operand\" \"0,f\")\n+\t  [(match_operand:XF 1 \"register_operand\" \"0,f\")\n \t   (float_extend:XF\n-\t    (match_operand:SF 2 \"general_operand\" \"fm,0\"))]))]\n+\t    (match_operand:SF 2 \"nonimmediate_operand\" \"fm,0\"))]))]\n   \"TARGET_80387\"\n-  \"* return output_387_binary_op (insn, operands);\")\n+  \"* return output_387_binary_op (insn, operands);\"\n+  [(set (attr \"type\") \n+        (cond [(match_operand:DF 3 \"is_mul\" \"\") \n+                 (const_string \"fpop\")\n+               (match_operand:DF 3 \"is_div\" \"\") \n+                 (const_string \"fpdiv\")\n+              ]\n+               (const_string \"fpop\")\n+        )\n+  )])\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:DF 3 \"binary_387_op\"\n-\t   [(float_extend:DF (match_operand:SF 1 \"general_operand\" \"fm,0\"))\n-\t    (match_operand:DF 2 \"general_operand\" \"0,f\")]))]\n+\t   [(float_extend:DF (match_operand:SF 1 \"nonimmediate_operand\" \"fm,0\"))\n+\t    (match_operand:DF 2 \"register_operand\" \"0,f\")]))]\n   \"TARGET_80387\"\n-  \"* return output_387_binary_op (insn, operands);\")\n+  \"* return output_387_binary_op (insn, operands);\"\n+  [(set (attr \"type\") \n+        (cond [(match_operand:DF 3 \"is_mul\" \"\") \n+                 (const_string \"fpop\")\n+               (match_operand:DF 3 \"is_div\" \"\") \n+                 (const_string \"fpdiv\")\n+              ]\n+               (const_string \"fpop\")\n+        )\n+  )])\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(match_operator:DF 3 \"binary_387_op\"\n-\t  [(match_operand:DF 1 \"general_operand\" \"0\")\n-\t   (float:DF (match_operand:SI 2 \"general_operand\" \"rm\"))]))]\n+\t  [(match_operand:DF 1 \"register_operand\" \"0\")\n+\t   (float:DF (match_operand:SI 2 \"nonimmediate_operand\" \"rm\"))]))]\n   \"TARGET_80387\"\n-  \"* return output_387_binary_op (insn, operands);\")\n+  \"* return output_387_binary_op (insn, operands);\"\n+  [(set (attr \"type\") \n+        (cond [(match_operand:DF 3 \"is_mul\" \"\") \n+                 (const_string \"fpop\")\n+               (match_operand:DF 3 \"is_div\" \"\") \n+                 (const_string \"fpdiv\")\n+              ]\n+               (const_string \"fpop\")\n+        )\n+  )])\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:DF 3 \"binary_387_op\"\n-\t  [(match_operand:DF 1 \"general_operand\" \"0,f\")\n+\t  [(match_operand:DF 1 \"register_operand\" \"0,f\")\n \t   (float_extend:DF\n-\t    (match_operand:SF 2 \"general_operand\" \"fm,0\"))]))]\n+\t    (match_operand:SF 2 \"nonimmediate_operand\" \"fm,0\"))]))]\n   \"TARGET_80387\"\n-  \"* return output_387_binary_op (insn, operands);\")\n+  \"* return output_387_binary_op (insn, operands);\"\n+  [(set (attr \"type\") \n+        (cond [(match_operand:DF 3 \"is_mul\" \"\") \n+                 (const_string \"fpop\")\n+               (match_operand:DF 3 \"is_div\" \"\") \n+                 (const_string \"fpdiv\")\n+              ]\n+               (const_string \"fpop\")\n+        )\n+  )])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:SF 3 \"binary_387_op\"\n \t\t\t[(match_operand:SF 1 \"nonimmediate_operand\" \"0,fm\")\n \t\t\t (match_operand:SF 2 \"nonimmediate_operand\" \"fm,0\")]))]\n   \"TARGET_80387\"\n-  \"* return output_387_binary_op (insn, operands);\")\n+  \"* return output_387_binary_op (insn, operands);\"\n+  [(set (attr \"type\") \n+        (cond [(match_operand:DF 3 \"is_mul\" \"\") \n+                 (const_string \"fpop\")\n+               (match_operand:DF 3 \"is_div\" \"\") \n+                 (const_string \"fpdiv\")\n+              ]\n+               (const_string \"fpop\")\n+        )\n+  )])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(match_operator:SF 3 \"binary_387_op\"\n-\t  [(float:SF (match_operand:SI 1 \"general_operand\" \"rm\"))\n-\t   (match_operand:SF 2 \"general_operand\" \"0\")]))]\n+\t  [(float:SF (match_operand:SI 1 \"nonimmediate_operand\" \"rm\"))\n+\t   (match_operand:SF 2 \"register_operand\" \"0\")]))]\n   \"TARGET_80387\"\n-  \"* return output_387_binary_op (insn, operands);\")\n+  \"* return output_387_binary_op (insn, operands);\"\n+  [(set (attr \"type\") \n+        (cond [(match_operand:DF 3 \"is_mul\" \"\") \n+                 (const_string \"fpop\")\n+               (match_operand:DF 3 \"is_div\" \"\") \n+                 (const_string \"fpdiv\")\n+              ]\n+               (const_string \"fpop\")\n+        )\n+  )])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(match_operator:SF 3 \"binary_387_op\"\n-\t  [(match_operand:SF 1 \"general_operand\" \"0\")\n-\t   (float:SF (match_operand:SI 2 \"general_operand\" \"rm\"))]))]\n+\t  [(match_operand:SF 1 \"register_operand\" \"0\")\n+\t   (float:SF (match_operand:SI 2 \"nonimmediate_operand\" \"rm\"))]))]\n   \"TARGET_80387\"\n-  \"* return output_387_binary_op (insn, operands);\")\n+  \"* return output_387_binary_op (insn, operands);\"\n+  [(set (attr \"type\") \n+        (cond [(match_operand:DF 3 \"is_mul\" \"\") \n+                 (const_string \"fpop\")\n+               (match_operand:DF 3 \"is_div\" \"\") \n+                 (const_string \"fpdiv\")\n+              ]\n+               (const_string \"fpop\")\n+        )\n+  )])\n \f\n (define_expand \"strlensi\"\n   [(parallel [(set (match_dup 4)\n@@ -5888,6 +6636,14 @@\n   return \\\"repnz\\;scas%B2\\\";\n }\")\n \n+(define_insn \"strlensi_unroll\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=&r,&r\")\n+\t(unspec:SI [(mem:BLK (match_operand:SI 1 \"address_operand\" \"r,r\"))\n+\t\t    (match_operand:SI 2 \"immediate_operand\" \"i,i\")] 0))\n+   (clobber (match_scratch:SI 3 \"=&q,&r\"))]\n+  \"optimize > 1\"\n+  \"* return output_strlen_unroll (operands);\")\n+\n ;; the only difference between the following patterns is the register preference\n ;; on a pentium using a q-register saves one clock cycle per 4 characters\n "}]}