{"sha": "5f84eb27a0a4f90914fab1d0068ae586fb763bde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY4NGViMjdhMGE0ZjkwOTE0ZmFiMWQwMDY4YWU1ODZmYjc2M2JkZQ==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2017-12-20T23:55:42Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-12-20T23:55:42Z"}, "message": "re PR tree-optimization/83491 (ICE in execute_cse_reciprocals_1 at gcc/tree-ssa-math-opts.c:585)\n\n\tPR tree-optimization/83491\n\t* tree-ssa-math-opts.c (execute_cse_reciprocals_1): Check for SSA_NAME\n\tbefore walking uses.  Improve coding style and comments.\n\n\tPR tree-optimization/83491\n\t* gcc.dg/pr83491.c: Add new test.\n\nFrom-SVN: r255906", "tree": {"sha": "24156b8e1d937f76dc44d179f062fcc75e4c8323", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24156b8e1d937f76dc44d179f062fcc75e4c8323"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f84eb27a0a4f90914fab1d0068ae586fb763bde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f84eb27a0a4f90914fab1d0068ae586fb763bde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f84eb27a0a4f90914fab1d0068ae586fb763bde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f84eb27a0a4f90914fab1d0068ae586fb763bde/comments", "author": null, "committer": null, "parents": [{"sha": "67d2229e8acc9cbf7279fe90c295cc47a60733dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67d2229e8acc9cbf7279fe90c295cc47a60733dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67d2229e8acc9cbf7279fe90c295cc47a60733dd"}], "stats": {"total": 76, "additions": 48, "deletions": 28}, "files": [{"sha": "29d32b8bc596af22c576a1f21205409de796f2b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f84eb27a0a4f90914fab1d0068ae586fb763bde/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f84eb27a0a4f90914fab1d0068ae586fb763bde/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f84eb27a0a4f90914fab1d0068ae586fb763bde", "patch": "@@ -1,3 +1,9 @@\n+2017-12-20  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\tPR tree-optimization/83491\n+\t* tree-ssa-math-opts.c (execute_cse_reciprocals_1): Check for SSA_NAME\n+\tbefore walking uses.  Improve coding style and comments.\n+\n 2017-12-20  Tom de Vries  <tom@codesourcery.com>\n \n \t* gimple-fold.c (fold_internal_goacc_dim): Simplify."}, {"sha": "54f15f1c4bd063dadbb565f4d91c475da477545a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f84eb27a0a4f90914fab1d0068ae586fb763bde/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f84eb27a0a4f90914fab1d0068ae586fb763bde/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5f84eb27a0a4f90914fab1d0068ae586fb763bde", "patch": "@@ -1,3 +1,8 @@\n+2017-12-20  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\tPR tree-optimization/83491\n+\t* gcc.dg/pr83491.c: Add new test.\n+\n 2017-12-20  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/83436"}, {"sha": "f23cc19c72f57ca8d34f05f28fee75fc2c13f33a", "filename": "gcc/testsuite/gcc.dg/pr83491.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f84eb27a0a4f90914fab1d0068ae586fb763bde/gcc%2Ftestsuite%2Fgcc.dg%2Fpr83491.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f84eb27a0a4f90914fab1d0068ae586fb763bde/gcc%2Ftestsuite%2Fgcc.dg%2Fpr83491.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr83491.c?ref=5f84eb27a0a4f90914fab1d0068ae586fb763bde", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -funsafe-math-optimizations\" } */\n+\n+float a;\n+float b;\n+void bar ()\n+{\n+  a = __builtin_nanf (\"\");\n+  b = __builtin_powf (a, 2.5F);\n+}"}, {"sha": "4e8f5e728d0c8ef5ac564d8c3c999d8a6ff15e7e", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 27, "deletions": 28, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f84eb27a0a4f90914fab1d0068ae586fb763bde/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f84eb27a0a4f90914fab1d0068ae586fb763bde/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=5f84eb27a0a4f90914fab1d0068ae586fb763bde", "patch": "@@ -544,29 +544,32 @@ execute_cse_reciprocals_1 (gimple_stmt_iterator *def_gsi, tree def)\n   int square_recip_count = 0;\n   int sqrt_recip_count = 0;\n \n-  gcc_assert (FLOAT_TYPE_P (TREE_TYPE (def)) && is_gimple_reg (def));\n+  gcc_assert (FLOAT_TYPE_P (TREE_TYPE (def)) && is_gimple_reg (def)\n+\t      && TREE_CODE (def) == SSA_NAME);\n   threshold = targetm.min_divisions_for_recip_mul (TYPE_MODE (TREE_TYPE (def)));\n \n-  /* If this is a square (x * x), we should check whether there are any\n-     enough divisions by x on it's own to warrant waiting for that pass.  */\n-  if (TREE_CODE (def) == SSA_NAME)\n+  /* If DEF is a square (x * x), count the number of divisions by x.\n+     If there are more divisions by x than by (DEF * DEF), prefer to optimize\n+     the reciprocal of x instead of DEF.  This improves cases like:\n+       def = x * x\n+       t0 = a / def\n+       t1 = b / def\n+       t2 = c / x\n+     Reciprocal optimization of x results in 1 division rather than 2 or 3.  */\n+  gimple *def_stmt = SSA_NAME_DEF_STMT (def);\n+\n+  if (is_gimple_assign (def_stmt)\n+      && gimple_assign_rhs_code (def_stmt) == MULT_EXPR\n+      && TREE_CODE (gimple_assign_rhs1 (def_stmt)) == SSA_NAME\n+      && gimple_assign_rhs1 (def_stmt) == gimple_assign_rhs2 (def_stmt))\n     {\n-      gimple *def_stmt = SSA_NAME_DEF_STMT (def);\n+      tree op0 = gimple_assign_rhs1 (def_stmt);\n \n-      if (is_gimple_assign (def_stmt)\n-\t  && gimple_assign_rhs_code (def_stmt) == MULT_EXPR\n-\t  && gimple_assign_rhs1 (def_stmt) == gimple_assign_rhs2 (def_stmt))\n+      FOR_EACH_IMM_USE_FAST (use_p, use_iter, op0)\n \t{\n-\t  /* This statement is a square of something.  We should take this\n-\t     in to account, as it may be more profitable to not extract\n-\t     the reciprocal here.  */\n-\t  tree op0 = gimple_assign_rhs1 (def_stmt);\n-\t  FOR_EACH_IMM_USE_FAST (use_p, use_iter, op0)\n-\t    {\n-\t      gimple *use_stmt = USE_STMT (use_p);\n-\t      if (is_division_by (use_stmt, op0))\n-\t\tsqrt_recip_count ++;\n-\t    }\n+\t  gimple *use_stmt = USE_STMT (use_p);\n+\t  if (is_division_by (use_stmt, op0))\n+\t    sqrt_recip_count++;\n \t}\n     }\n \n@@ -587,26 +590,23 @@ execute_cse_reciprocals_1 (gimple_stmt_iterator *def_gsi, tree def)\n \t      gimple *square_use_stmt = USE_STMT (square_use_p);\n \t      if (is_division_by (square_use_stmt, square_def))\n \t\t{\n-\t\t  /* Halve the relative importance as this is called twice\n-\t\t     for each division by a square.  */\n+\t\t  /* This is executed twice for each division by a square.  */\n \t\t  register_division_in (gimple_bb (square_use_stmt), 1);\n-\t\t  square_recip_count ++;\n+\t\t  square_recip_count++;\n \t\t}\n \t    }\n \t}\n     }\n \n-  /* Square reciprocals will have been counted twice.  */\n+  /* Square reciprocals were counted twice above.  */\n   square_recip_count /= 2;\n \n+  /* If it is more profitable to optimize 1 / x, don't optimize 1 / (x * x).  */\n   if (sqrt_recip_count > square_recip_count)\n-    /* It will be more profitable to extract a 1 / x expression later,\n-       so it is not worth attempting to extract 1 / (x * x) now.  */\n     return;\n \n   /* Do the expensive part only if we can hope to optimize something.  */\n-  if (count + square_recip_count >= threshold\n-      && count >= 1)\n+  if (count + square_recip_count >= threshold && count >= 1)\n     {\n       gimple *use_stmt;\n       for (occ = occ_head; occ; occ = occ->next)\n@@ -623,8 +623,7 @@ execute_cse_reciprocals_1 (gimple_stmt_iterator *def_gsi, tree def)\n \t      FOR_EACH_IMM_USE_ON_STMT (use_p, use_iter)\n \t\treplace_reciprocal (use_p);\n \t    }\n-\t  else if (square_recip_count > 0\n-\t\t   && is_square_of (use_stmt, def))\n+\t  else if (square_recip_count > 0 && is_square_of (use_stmt, def))\n \t    {\n \t      FOR_EACH_IMM_USE_ON_STMT (use_p, use_iter)\n \t\t{"}]}