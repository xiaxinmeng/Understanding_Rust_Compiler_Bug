{"sha": "7426fcc84f6e0a410139f60778d8d1c1d32d0283", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQyNmZjYzg0ZjZlMGE0MTAxMzlmNjA3NzhkOGQxYzFkMzJkMDI4Mw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-12-02T19:04:43Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-12-02T19:04:43Z"}, "message": "Introduce cp_fold_rvalue.\n\n\t* cp-gimplify.c (cp_fold_maybe_rvalue, cp_fold_rvalue): New.\n\t(c_fully_fold): Use cp_fold_rvalue.\n\t(cp_fold): Use them for rvalue operands.\n\nFrom-SVN: r231197", "tree": {"sha": "89df03c9df34be833b337936ea9438fe8097604f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89df03c9df34be833b337936ea9438fe8097604f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7426fcc84f6e0a410139f60778d8d1c1d32d0283", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7426fcc84f6e0a410139f60778d8d1c1d32d0283", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7426fcc84f6e0a410139f60778d8d1c1d32d0283", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7426fcc84f6e0a410139f60778d8d1c1d32d0283/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4250754eea1c10c88f49c9f11b9f912f992b7c42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4250754eea1c10c88f49c9f11b9f912f992b7c42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4250754eea1c10c88f49c9f11b9f912f992b7c42"}], "stats": {"total": 49, "additions": 40, "deletions": 9}, "files": [{"sha": "d1fe8f4fd1da9e7a5abb728522c866decf9ca446", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7426fcc84f6e0a410139f60778d8d1c1d32d0283/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7426fcc84f6e0a410139f60778d8d1c1d32d0283/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7426fcc84f6e0a410139f60778d8d1c1d32d0283", "patch": "@@ -1,5 +1,9 @@\n 2015-12-02  Jason Merrill  <jason@redhat.com>\n \n+\t* cp-gimplify.c (cp_fold_maybe_rvalue, cp_fold_rvalue): New.\n+\t(c_fully_fold): Use cp_fold_rvalue.\n+\t(cp_fold): Use them for rvalue operands.\n+\n \t* cp-gimplify.c (c_fully_fold): Define.\n \n \t* cp-gimplify.c (cp_fold): Use fold_build*."}, {"sha": "177e2717aa5e6a19320319d1b7b90d4dd5f8559c", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 36, "deletions": 9, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7426fcc84f6e0a410139f60778d8d1c1d32d0283/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7426fcc84f6e0a410139f60778d8d1c1d32d0283/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=7426fcc84f6e0a410139f60778d8d1c1d32d0283", "patch": "@@ -1883,6 +1883,28 @@ cp_fully_fold (tree x)\n   return cp_fold (x);\n }\n \n+/* Fold expression X which is used as an rvalue if RVAL is true.  */\n+\n+static tree\n+cp_fold_maybe_rvalue (tree x, bool rval)\n+{\n+  if (rval && DECL_P (x))\n+    {\n+      tree v = decl_constant_value (x);\n+      if (v != error_mark_node)\n+\tx = v;\n+    }\n+  return cp_fold (x);\n+}\n+\n+/* Fold expression X which is used as an rvalue.  */\n+\n+static tree\n+cp_fold_rvalue (tree x)\n+{\n+  return cp_fold_maybe_rvalue (x, true);\n+}\n+\n /* c-common interface to cp_fold.  If IN_INIT, this is in a static initializer\n    and certain changes are made to the folding done.  Or should be (FIXME).  We\n    never touch maybe_const, as it is only used for the C front-end\n@@ -1891,7 +1913,9 @@ cp_fully_fold (tree x)\n tree\n c_fully_fold (tree x, bool /*in_init*/, bool */*maybe_const*/)\n {\n-  return cp_fold (x);\n+  /* c_fully_fold is only used on rvalues, and we need to fold CONST_DECL to\n+     INTEGER_CST.  */\n+  return cp_fold_rvalue (x);\n }\n \n static GTY((cache, deletable)) cache_map fold_cache;\n@@ -1910,6 +1934,7 @@ cp_fold (tree x)\n   tree org_x = x, r = NULL_TREE;\n   enum tree_code code;\n   location_t loc;\n+  bool rval_ops = true;\n \n   if (!x || error_operand_p (x))\n     return x;\n@@ -1933,6 +1958,7 @@ cp_fold (tree x)\n       break;\n \n     case VIEW_CONVERT_EXPR:\n+      rval_ops = false;\n     case CONVERT_EXPR:\n     case NOP_EXPR:\n     case NON_LVALUE_EXPR:\n@@ -1952,7 +1978,7 @@ cp_fold (tree x)\n \t  && TREE_TYPE (x) == TREE_TYPE (op0))\n \treturn x;\n \n-      op0 = cp_fold (op0);\n+      op0 = cp_fold_maybe_rvalue (op0, rval_ops);\n \n       if (op0 != TREE_OPERAND (x, 0))\n         x = fold_build1_loc (loc, code, TREE_TYPE (x), op0);\n@@ -1968,10 +1994,10 @@ cp_fold (tree x)\n \n       break;\n \n-    case SAVE_EXPR:\n     case ADDR_EXPR:\n     case REALPART_EXPR:\n     case IMAGPART_EXPR:\n+      rval_ops = false;\n     case CONJ_EXPR:\n     case FIX_TRUNC_EXPR:\n     case FLOAT_EXPR:\n@@ -1984,7 +2010,7 @@ cp_fold (tree x)\n     case INDIRECT_REF:\n \n       loc = EXPR_LOCATION (x);\n-      op0 = cp_fold (TREE_OPERAND (x, 0));\n+      op0 = cp_fold_maybe_rvalue (TREE_OPERAND (x, 0), rval_ops);\n \n       if (op0 != TREE_OPERAND (x, 0))\n         x = fold_build1_loc (loc, code, TREE_TYPE (x), op0);\n@@ -2001,7 +2027,7 @@ cp_fold (tree x)\n \n \tloc = EXPR_LOCATION (x);\n \top0 = cp_fold (TREE_OPERAND (x, 0));\n-\top1 = cp_fold (TREE_OPERAND (x, 1));\n+\top1 = cp_fold_rvalue (TREE_OPERAND (x, 1));\n \n \tif (TREE_OPERAND (x, 0) != op0 || TREE_OPERAND (x, 1) != op1)\n \t  x = build2_loc (loc, code, TREE_TYPE (x), op0, op1);\n@@ -2011,6 +2037,8 @@ cp_fold (tree x)\n     case PREDECREMENT_EXPR:\n     case PREINCREMENT_EXPR:\n     case COMPOUND_EXPR:\n+    case MODIFY_EXPR:\n+      rval_ops = false;\n     case POINTER_PLUS_EXPR:\n     case PLUS_EXPR:\n     case MINUS_EXPR:\n@@ -2046,11 +2074,10 @@ cp_fold (tree x)\n     case UNGT_EXPR: case UNGE_EXPR:\n     case UNEQ_EXPR: case LTGT_EXPR:\n     case RANGE_EXPR: case COMPLEX_EXPR:\n-    case MODIFY_EXPR:\n \n       loc = EXPR_LOCATION (x);\n-      op0 = cp_fold (TREE_OPERAND (x, 0));\n-      op1 = cp_fold (TREE_OPERAND (x, 1));\n+      op0 = cp_fold_maybe_rvalue (TREE_OPERAND (x, 0), rval_ops);\n+      op1 = cp_fold_rvalue (TREE_OPERAND (x, 1));\n       if ((code == COMPOUND_EXPR || code == MODIFY_EXPR)\n \t  && ((op1 && TREE_SIDE_EFFECTS (op1))\n \t       || (op0 && TREE_SIDE_EFFECTS (op0))))\n@@ -2072,7 +2099,7 @@ cp_fold (tree x)\n     case COND_EXPR:\n \n       loc = EXPR_LOCATION (x);\n-      op0 = cp_fold (TREE_OPERAND (x, 0));\n+      op0 = cp_fold_rvalue (TREE_OPERAND (x, 0));\n \n       if (TREE_SIDE_EFFECTS (op0))\n \tbreak;"}]}