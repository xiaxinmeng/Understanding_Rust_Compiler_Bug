{"sha": "39aada703b3852c373ad5b7c9f8d9bf9e73f40ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzlhYWRhNzAzYjM4NTJjMzczYWQ1YjdjOWY4ZDliZjllNzNmNDBhZA==", "commit": {"author": {"name": "Yuri Rumyantsev", "email": "ysrumyan@gmail.com", "date": "2012-10-26T12:07:58Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2012-10-26T12:07:58Z"}, "message": "i386.c (insn_is_function_arg): Add check on CALL instruction.\n\n        * config/i386/i386.c (insn_is_function_arg) : Add check on CALL\n        instruction.\n        (ix86_dependencies_evaluation_hook): Insert dependencies in all\n        predecessors of call block for non-trivial region avoiding creation\n        of loop-carried dependency to avoid cross-block motion of HW registers.\n\nFrom-SVN: r192842", "tree": {"sha": "11a288bab4b4bbe0e90e25ac2982aea931308bbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11a288bab4b4bbe0e90e25ac2982aea931308bbe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39aada703b3852c373ad5b7c9f8d9bf9e73f40ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39aada703b3852c373ad5b7c9f8d9bf9e73f40ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39aada703b3852c373ad5b7c9f8d9bf9e73f40ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39aada703b3852c373ad5b7c9f8d9bf9e73f40ad/comments", "author": {"login": "ysrumyan", "id": 44425612, "node_id": "MDQ6VXNlcjQ0NDI1NjEy", "avatar_url": "https://avatars.githubusercontent.com/u/44425612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ysrumyan", "html_url": "https://github.com/ysrumyan", "followers_url": "https://api.github.com/users/ysrumyan/followers", "following_url": "https://api.github.com/users/ysrumyan/following{/other_user}", "gists_url": "https://api.github.com/users/ysrumyan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ysrumyan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ysrumyan/subscriptions", "organizations_url": "https://api.github.com/users/ysrumyan/orgs", "repos_url": "https://api.github.com/users/ysrumyan/repos", "events_url": "https://api.github.com/users/ysrumyan/events{/privacy}", "received_events_url": "https://api.github.com/users/ysrumyan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9037dcc6adff20ba865674388e5ab9b70ba817e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9037dcc6adff20ba865674388e5ab9b70ba817e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9037dcc6adff20ba865674388e5ab9b70ba817e3"}], "stats": {"total": 41, "additions": 30, "deletions": 11}, "files": [{"sha": "5f3c8ac13d63a9c5c16baf4662f8f69b171405cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39aada703b3852c373ad5b7c9f8d9bf9e73f40ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39aada703b3852c373ad5b7c9f8d9bf9e73f40ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=39aada703b3852c373ad5b7c9f8d9bf9e73f40ad", "patch": "@@ -1,3 +1,11 @@\n+2012-10-23  Yuri Rumyantsev  <ysrumyan@gmail.com>\n+\n+\t* config/i386/i386.c (insn_is_function_arg) : Add check on CALL\n+\tinstruction.\n+\t(ix86_dependencies_evaluation_hook): Insert dependencies in all\n+\tpredecessors of call block for non-trivial region avoiding creation\n+\tof loop-carried dependency to avoid cross-block motion of HW registers.\n+\n 2012-10-26  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/54824"}, {"sha": "b575dc20aae1084f876e8963b364d523620980eb", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39aada703b3852c373ad5b7c9f8d9bf9e73f40ad/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39aada703b3852c373ad5b7c9f8d9bf9e73f40ad/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=39aada703b3852c373ad5b7c9f8d9bf9e73f40ad", "patch": "@@ -24454,6 +24454,9 @@ insn_is_function_arg (rtx insn, bool* is_spilled)\n \n   if (!NONDEBUG_INSN_P (insn))\n     return false;\n+  /* Call instructions are not movable, ignore it.  */\n+  if (CALL_P (insn))\n+    return false;\n   insn = PATTERN (insn);\n   if (GET_CODE (insn) == PARALLEL)\n     insn = XVECEXP (insn, 0, 0);\n@@ -24586,18 +24589,26 @@ ix86_dependencies_evaluation_hook (rtx head, rtx tail)\n \tfirst_arg = add_parameter_dependencies (insn, head);\n \tif (first_arg)\n \t  {\n-\t    /* Check if first argument has dependee out of its home block.  */\n-\t    sd_iterator_def sd_it1;\n-\t    dep_t dep1;\n-\t    FOR_EACH_DEP (first_arg, SD_LIST_BACK, sd_it1, dep1)\n+\t    /* Add dependee for first argument to predecessors if only\n+\t       region contains more than one block.  */\n+\t    basic_block bb =  BLOCK_FOR_INSN (insn);\n+\t    int rgn = CONTAINING_RGN (bb->index);\n+\t    int nr_blks = RGN_NR_BLOCKS (rgn);\n+\t    /* Skip trivial regions and region head blocks that can have\n+\t       predecessors outside of region.  */\n+\t    if (nr_blks > 1 && BLOCK_TO_BB (bb->index) != 0)\n \t      {\n-\t\trtx dee;\n-\t\tdee = DEP_PRO (dep1);\n-\t\tif (!NONDEBUG_INSN_P (dee))\n-\t\t  continue;\n-\t\tif (BLOCK_FOR_INSN (dee) != BLOCK_FOR_INSN (first_arg))\n-\t\t  /* Must add dependee for first argument in dee's block.  */\n-\t\t  add_dependee_for_func_arg (first_arg, BLOCK_FOR_INSN (dee));\n+\t\tedge e;\n+\t\tedge_iterator ei;\n+\t\t/* Assume that region is SCC, i.e. all immediate predecessors\n+\t           of non-head block are in the same region.  */\n+\t\tFOR_EACH_EDGE (e, ei, bb->preds)\n+\t\t  {\n+\t\t    /* Avoid creating of loop-carried dependencies through\n+\t\t       using topological odering in region.  */\n+\t\t    if (BLOCK_TO_BB (bb->index) > BLOCK_TO_BB (e->src->index))\n+\t\t      add_dependee_for_func_arg (first_arg, e->src); \n+\t\t  }\n \t      }\n \t    insn = first_arg;\n \t  }"}]}