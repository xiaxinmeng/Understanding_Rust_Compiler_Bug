{"sha": "da87190421877142987487b594b4ba9b78ec29af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE4NzE5MDQyMTg3NzE0Mjk4NzQ4N2I1OTRiNGJhOWI3OGVjMjlhZg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-09-02T12:34:21Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-09-21T08:09:27Z"}, "message": "Use ONE_? macros.\n\ngcc/ChangeLog:\n\n\t* ggc-common.c (ggc_rlimit_bound): Use ONE_? macro.\n\t(ggc_min_expand_heuristic): Likewise.\n\t(ggc_min_heapsize_heuristic): Likewise.\n\t* ggc-page.c (ggc_collect): Likewise.\n\t* system.h (ONE_G): Likewise.", "tree": {"sha": "bef0ee8a3ab4886e9f100c80605429650d443c63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bef0ee8a3ab4886e9f100c80605429650d443c63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da87190421877142987487b594b4ba9b78ec29af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da87190421877142987487b594b4ba9b78ec29af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da87190421877142987487b594b4ba9b78ec29af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da87190421877142987487b594b4ba9b78ec29af/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79f4e20dd1280e6a44736070b0d5213f9a8f85d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79f4e20dd1280e6a44736070b0d5213f9a8f85d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79f4e20dd1280e6a44736070b0d5213f9a8f85d4"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "571c50e05cceb4077b3a6dbc0aa2051e5be4b4c2", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da87190421877142987487b594b4ba9b78ec29af/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da87190421877142987487b594b4ba9b78ec29af/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=da87190421877142987487b594b4ba9b78ec29af", "patch": "@@ -742,7 +742,7 @@ ggc_rlimit_bound (double limit)\n \t appears to be ignored.  Ignore such silliness.  If a limit\n \t this small was actually effective for mmap, GCC wouldn't even\n \t start up.  */\n-      && rlim.rlim_cur >= 8 * 1024 * 1024)\n+      && rlim.rlim_cur >= 8 * ONE_M)\n     limit = rlim.rlim_cur;\n # endif /* RLIMIT_AS or RLIMIT_DATA */\n #endif /* HAVE_GETRLIMIT */\n@@ -761,7 +761,7 @@ ggc_min_expand_heuristic (void)\n \n   /* The heuristic is a percentage equal to 30% + 70%*(RAM/1GB), yielding\n      a lower bound of 30% and an upper bound of 100% (when RAM >= 1GB).  */\n-  min_expand /= 1024*1024*1024;\n+  min_expand /= ONE_G;\n   min_expand *= 70;\n   min_expand = MIN (min_expand, 70);\n   min_expand += 30;\n@@ -776,8 +776,8 @@ ggc_min_heapsize_heuristic (void)\n   double phys_kbytes = physmem_total ();\n   double limit_kbytes = ggc_rlimit_bound (phys_kbytes * 2);\n \n-  phys_kbytes /= 1024; /* Convert to Kbytes.  */\n-  limit_kbytes /= 1024;\n+  phys_kbytes /= ONE_K; /* Convert to Kbytes.  */\n+  limit_kbytes /= ONE_K;\n \n   /* The heuristic is RAM/8, with a lower bound of 4M and an upper\n      bound of 128M (when RAM >= 1GB).  */\n@@ -790,20 +790,20 @@ ggc_min_heapsize_heuristic (void)\n    struct rlimit rlim;\n    if (getrlimit (RLIMIT_RSS, &rlim) == 0\n        && rlim.rlim_cur != (rlim_t) RLIM_INFINITY)\n-     phys_kbytes = MIN (phys_kbytes, rlim.rlim_cur / 1024);\n+     phys_kbytes = MIN (phys_kbytes, rlim.rlim_cur / ONE_K);\n  }\n # endif\n \n   /* Don't blindly run over our data limit; do GC at least when the\n      *next* GC would be within 20Mb of the limit or within a quarter of\n      the limit, whichever is larger.  If GCC does hit the data limit,\n      compilation will fail, so this tries to be conservative.  */\n-  limit_kbytes = MAX (0, limit_kbytes - MAX (limit_kbytes / 4, 20 * 1024));\n+  limit_kbytes = MAX (0, limit_kbytes - MAX (limit_kbytes / 4, 20 * ONE_K));\n   limit_kbytes = (limit_kbytes * 100) / (110 + ggc_min_expand_heuristic ());\n   phys_kbytes = MIN (phys_kbytes, limit_kbytes);\n \n-  phys_kbytes = MAX (phys_kbytes, 4 * 1024);\n-  phys_kbytes = MIN (phys_kbytes, 128 * 1024);\n+  phys_kbytes = MAX (phys_kbytes, 4 * ONE_K);\n+  phys_kbytes = MIN (phys_kbytes, 128 * ONE_K);\n \n   return phys_kbytes;\n }"}, {"sha": "07e108f3e9d370cf49bb5f84ffe5c7ba9110ddb4", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da87190421877142987487b594b4ba9b78ec29af/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da87190421877142987487b594b4ba9b78ec29af/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=da87190421877142987487b594b4ba9b78ec29af", "patch": "@@ -2184,7 +2184,7 @@ ggc_collect (void)\n      total allocations haven't expanded much since the last\n      collection.  */\n   float allocated_last_gc =\n-    MAX (G.allocated_last_gc, (size_t)param_ggc_min_heapsize * 1024);\n+    MAX (G.allocated_last_gc, (size_t)param_ggc_min_heapsize * ONE_K);\n \n   /* It is also good time to get memory block pool into limits.  */\n   memory_block_pool::trim ();"}, {"sha": "b0f3f1dd019d8c32056c3d91b500cc33932e6d8c", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da87190421877142987487b594b4ba9b78ec29af/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da87190421877142987487b594b4ba9b78ec29af/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=da87190421877142987487b594b4ba9b78ec29af", "patch": "@@ -1237,6 +1237,7 @@ void gcc_stablesort (void *, size_t, size_t,\n \n #define ONE_K 1024\n #define ONE_M (ONE_K * ONE_K)\n+#define ONE_G (ONE_K * ONE_M)\n \n /* Display a number as an integer multiple of either:\n    - 1024, if said integer is >= to 10 K (in base 2)"}]}