{"sha": "4232e46d87feb91749edb944681d0d4b93475c3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIzMmU0NmQ4N2ZlYjkxNzQ5ZWRiOTQ0NjgxZDBkNGI5MzQ3NWMzYQ==", "commit": {"author": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-12-10T10:32:07Z"}, "committer": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-12-10T10:32:07Z"}, "message": "Fixed BlockExpr not being allowed to be empty", "tree": {"sha": "aba9faa2667cbfe213147a072bf030e64f7fc7a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aba9faa2667cbfe213147a072bf030e64f7fc7a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4232e46d87feb91749edb944681d0d4b93475c3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4232e46d87feb91749edb944681d0d4b93475c3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4232e46d87feb91749edb944681d0d4b93475c3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4232e46d87feb91749edb944681d0d4b93475c3a/comments", "author": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53ddea7a266c43f30702b0c24ce05e4d5dad0ecc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53ddea7a266c43f30702b0c24ce05e4d5dad0ecc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53ddea7a266c43f30702b0c24ce05e4d5dad0ecc"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "a3c94aae20137e0d713acd55058ebf1e0b5aa236", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4232e46d87feb91749edb944681d0d4b93475c3a/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4232e46d87feb91749edb944681d0d4b93475c3a/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=4232e46d87feb91749edb944681d0d4b93475c3a", "patch": "@@ -2704,6 +2704,7 @@ class BlockExpr : public ExprWithBlock\n   std::unique_ptr<ExprWithoutBlock> expr; // inlined from Statements\n \n   Location locus;\n+  bool marked_for_strip = false;\n \n public:\n   std::string as_string () const override;\n@@ -2727,7 +2728,7 @@ class BlockExpr : public ExprWithBlock\n   // Copy constructor with clone\n   BlockExpr (BlockExpr const &other)\n     : ExprWithBlock (other), inner_attrs (other.inner_attrs),\n-      locus (other.locus)\n+      locus (other.locus), marked_for_strip (other.marked_for_strip)\n   {\n     // guard to protect from null pointer dereference\n     if (other.expr != nullptr)\n@@ -2744,6 +2745,7 @@ class BlockExpr : public ExprWithBlock\n     ExprWithBlock::operator= (other);\n     inner_attrs = other.inner_attrs;\n     locus = other.locus;\n+    marked_for_strip = other.marked_for_strip;\n     // outer_attrs = other.outer_attrs;\n \n     // guard to protect from null pointer dereference\n@@ -2770,20 +2772,18 @@ class BlockExpr : public ExprWithBlock\n   }\n \n   Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus_slow () const final override { return get_locus (); }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n-  // Invalid if has no statements or final expr, so base stripping on that.\n+  // Can be completely empty, so have to have a separate flag.\n   void mark_for_strip () override\n   {\n-    expr = nullptr;\n-    statements.clear ();\n-    statements.shrink_to_fit ();\n+    marked_for_strip = true;\n   }\n   bool is_marked_for_strip () const override\n   {\n-    return expr == nullptr && statements.empty ();\n+    return marked_for_strip;\n   }\n \n   // TODO: this mutable getter seems really dodgy. Think up better way.\n@@ -2799,7 +2799,7 @@ class BlockExpr : public ExprWithBlock\n   // TODO: is this better? Or is a \"vis_block\" better?\n   std::unique_ptr<ExprWithoutBlock> &get_tail_expr ()\n   {\n-    rust_assert (expr != nullptr);\n+    rust_assert (has_tail_expr ());\n     return expr;\n   }\n "}]}