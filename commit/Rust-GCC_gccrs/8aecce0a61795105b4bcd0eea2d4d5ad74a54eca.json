{"sha": "8aecce0a61795105b4bcd0eea2d4d5ad74a54eca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFlY2NlMGE2MTc5NTEwNWI0YmNkMGVlYTJkNGQ1YWQ3NGE1NGVjYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-09-29T14:14:19Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-09-29T14:14:19Z"}, "message": "(expand_binop): Convert X - C to X + (-C).\n\nFrom-SVN: r2278", "tree": {"sha": "7d3989d4d4b49901b88554e4533b4865484708c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d3989d4d4b49901b88554e4533b4865484708c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8aecce0a61795105b4bcd0eea2d4d5ad74a54eca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8aecce0a61795105b4bcd0eea2d4d5ad74a54eca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8aecce0a61795105b4bcd0eea2d4d5ad74a54eca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8aecce0a61795105b4bcd0eea2d4d5ad74a54eca/comments", "author": null, "committer": null, "parents": [{"sha": "7f11183e26572232a5efd5a3770aa2e1db79dcce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f11183e26572232a5efd5a3770aa2e1db79dcce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f11183e26572232a5efd5a3770aa2e1db79dcce"}], "stats": {"total": 22, "additions": 9, "deletions": 13}, "files": [{"sha": "82f10780e4087189d92e43239930f709dfbff5e2", "filename": "gcc/optabs.c", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aecce0a61795105b4bcd0eea2d4d5ad74a54eca/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aecce0a61795105b4bcd0eea2d4d5ad74a54eca/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=8aecce0a61795105b4bcd0eea2d4d5ad74a54eca", "patch": "@@ -297,6 +297,15 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n       op1 = force_not_mem (op1);\n     }\n \n+  /* If subtracting an integer constant, convert this into an addition of\n+     the negated constant.  */\n+\n+  if (binoptab == sub_optab && GET_CODE (op1) == CONST_INT)\n+    {\n+      op1 = negate_rtx (mode, op1);\n+      binoptab = add_optab;\n+    }\n+\n   /* If we are inside an appropriately-short loop and one operand is an\n      expensive constant, force it into a register.  */\n   if (CONSTANT_P (op0) && preserve_subexpressions_p ()\n@@ -307,19 +316,6 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n       && rtx_cost (op1, binoptab->code) > 2)\n     op1 = force_reg (shift_op ? word_mode : mode, op1);\n \n-#if 0  /* Turned off because it seems to be a kludgy method.  */\n-  /* If subtracting integer from pointer, and the pointer has a special mode,\n-     then change it to an add.  We use the add insn of Pmode for combining\n-     integers with pointers, and the sub insn to subtract two pointers.  */\n-\n-  if (binoptab == sub_optab\n-      && GET_MODE (op0) == Pmode && GET_MODE (op1) != Pmode)\n-    {\n-      op1 = negate_rtx (GET_MODE(op1), op1);\n-      binoptab = add_optab;\n-    }\n-#endif /* 0 */\n-\n   /* Record where to delete back to if we backtrack.  */\n   last = get_last_insn ();\n "}]}