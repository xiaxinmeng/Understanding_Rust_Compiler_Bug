{"sha": "f18b70f587310c161b81a159523cf13262b393c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE4YjcwZjU4NzMxMGMxNjFiODFhMTU5NTIzY2YxMzI2MmIzOTNjMw==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-06-11T11:50:29Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-06-11T11:50:29Z"}, "message": "c-decl.c (xref_tag): Don't return previous tags of wrong type.\n\n\t* c-decl.c (xref_tag): Don't return previous tags of wrong type.\n\ntestsuite:\n\t* gcc.dg/c99-tag-1.c: Add more tests.\n\nFrom-SVN: r43179", "tree": {"sha": "f31c4c85770575b6701e3a1a5db7bbfed83e24dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f31c4c85770575b6701e3a1a5db7bbfed83e24dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f18b70f587310c161b81a159523cf13262b393c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f18b70f587310c161b81a159523cf13262b393c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f18b70f587310c161b81a159523cf13262b393c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f18b70f587310c161b81a159523cf13262b393c3/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89cc6be35070f5aa20e0b6189daa6788726ea220", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89cc6be35070f5aa20e0b6189daa6788726ea220", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89cc6be35070f5aa20e0b6189daa6788726ea220"}], "stats": {"total": 42, "additions": 36, "deletions": 6}, "files": [{"sha": "fe8a6199aa4eb6385f8cd8ce3b7cdce8895952ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18b70f587310c161b81a159523cf13262b393c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18b70f587310c161b81a159523cf13262b393c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f18b70f587310c161b81a159523cf13262b393c3", "patch": "@@ -1,3 +1,7 @@\n+2001-06-11  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-decl.c (xref_tag): Don't return previous tags of wrong type.\n+\n 2001-06-11  Aldy Hernandez  <aldyh@redhat.com>\n \n         * loop.c (scan_loop): Do not combine asm statements."}, {"sha": "b68f7721a587dc9de04cff844a65e1272fcc6eb8", "filename": "gcc/c-decl.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18b70f587310c161b81a159523cf13262b393c3/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18b70f587310c161b81a159523cf13262b393c3/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=f18b70f587310c161b81a159523cf13262b393c3", "patch": "@@ -5226,11 +5226,18 @@ xref_tag (code, name)\n      already defined for this tag and return it.  */\n \n   register tree ref = lookup_tag (code, name, current_binding_level, 0);\n-  /* Even if this is the wrong type of tag, return what we found.\n-     There will be an error message anyway, from pending_xref_error.\n-     If we create an empty xref just for an invalid use of the type,\n-     the main result is to create lots of superfluous error messages.  */\n-  if (ref)\n+  /* If this is the right type of tag, return what we found.\n+     (This reference will be shadowed by shadow_tag later if appropriate.)\n+     If this is the wrong type of tag, do not return it.  If it was the\n+     wrong type in the same binding level, we will have had an error\n+     message already; if in a different binding level and declaring\n+     a name, pending_xref_error will give an error message; but if in a\n+     different binding level and not declaring a name, this tag should\n+     shadow the previous declaration of a different type of tag, and\n+     this would not work properly if we return the reference found.\n+     (For example, with \"struct foo\" in an outer scope, \"union foo;\"\n+     must shadow that tag with a new one of union type.)  */\n+  if (ref && TREE_CODE (ref) == code)\n     return ref;\n \n   /* If no such tag is yet defined, create a forward-reference node"}, {"sha": "d1255208049272a2c2690d09b182be396e505911", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18b70f587310c161b81a159523cf13262b393c3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18b70f587310c161b81a159523cf13262b393c3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f18b70f587310c161b81a159523cf13262b393c3", "patch": "@@ -1,3 +1,7 @@\n+2001-06-11  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/c99-tag-1.c: Add more tests.\n+\n 2001-06-10  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* g++.old-deja/g++.abi/ptrmem.C: Take into account different"}, {"sha": "e93d3bcf0b4ccd243794a83aac5b52a379fadefc", "filename": "gcc/testsuite/gcc.dg/c99-tag-1.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18b70f587310c161b81a159523cf13262b393c3/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-tag-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18b70f587310c161b81a159523cf13262b393c3/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-tag-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-tag-1.c?ref=f18b70f587310c161b81a159523cf13262b393c3", "patch": "@@ -124,13 +124,28 @@ foo (void)\n       enum u0 *y0; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n       /* { dg-error \"wrong|forward\" \"wrong tag type\" { target *-*-* } 124 } */\n       int y1[sizeof (enum u2 *)]; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-      /* { dg-error \"wrong\" \"wrong tag type\" { target *-*-* } 126 } */\n+      /* { dg-error \"wrong|forward\" \"wrong tag type\" { target *-*-* } 126 } */\n       struct v;\n       struct e0 *z0; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n       /* { dg-error \"wrong\" \"wrong tag type\" { target *-*-* } 129 } */\n       int z1[sizeof (struct e1 *)]; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n       /* { dg-error \"wrong\" \"wrong tag type\" { target *-*-* } 131 } */\n       struct w;\n     }\n+    /* When explicitly shadowed to be a tag of a different type, references\n+       to the new type of tag must be accepted and those to the old type\n+       rejected.  */\n+    {\n+      union s0;\n+      union s0 *x0;\n+      union s1;\n+      struct s1 *x1; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+      /* { dg-error \"wrong\" \"wrong tag type\" { target *-*-* } 142 } */\n+      union s2;\n+      union s2 *x2;\n+      union s3;\n+      struct s3 *x3; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+      /* { dg-error \"wrong\" \"wrong tag type\" { target *-*-* } 147 } */\n+    }\n   }\n }"}]}