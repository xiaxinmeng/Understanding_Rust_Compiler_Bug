{"sha": "f8e7f3f3f33e22721a28772cc3f9b616e48cd1c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhlN2YzZjNmMzNlMjI3MjFhMjg3NzJjYzNmOWI2MTZlNDhjZDFjOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-02-12T03:01:19Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-03-03T04:20:43Z"}, "message": "cgraph: flatten and same_body aliases [PR96078]\n\nThe patch for PR92372 made us start warning about a flatten attribute on an\nalias.  But in the case of C++ 'tor base/complete variants, the user didn't\ncreate the alias.  If the alias target also has the attribute, the alias\npoints to a flattened function, so we shouldn't warn.\n\ngcc/ChangeLog:\n\n\tPR c++/96078\n\t* cgraphunit.c (process_function_and_variable_attributes): Don't\n\twarn about flatten on an alias if the target also has it.\n\t* cgraph.h (symtab_node::get_alias_target_tree): New.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/96078\n\t* g++.dg/ext/attr-flatten1.C: New test.", "tree": {"sha": "93dc6074a803b49d2badf428cce3d7e4a8e5378f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93dc6074a803b49d2badf428cce3d7e4a8e5378f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8e7f3f3f33e22721a28772cc3f9b616e48cd1c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8e7f3f3f33e22721a28772cc3f9b616e48cd1c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8e7f3f3f33e22721a28772cc3f9b616e48cd1c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8e7f3f3f33e22721a28772cc3f9b616e48cd1c9/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b2084db9f9917eb9b19b1eb5ec03cdcb05f349e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b2084db9f9917eb9b19b1eb5ec03cdcb05f349e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b2084db9f9917eb9b19b1eb5ec03cdcb05f349e"}], "stats": {"total": 30, "additions": 28, "deletions": 2}, "files": [{"sha": "4a1f89920f56b685c1f33843fb86848b5847cbeb", "filename": "gcc/cgraph.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8e7f3f3f33e22721a28772cc3f9b616e48cd1c9/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8e7f3f3f33e22721a28772cc3f9b616e48cd1c9/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=f8e7f3f3f33e22721a28772cc3f9b616e48cd1c9", "patch": "@@ -319,6 +319,9 @@ struct GTY((desc (\"%h.type\"), tag (\"SYMTAB_SYMBOL\"),\n   /* Return node that alias is aliasing.  */\n   inline symtab_node *get_alias_target (void);\n \n+  /* Return DECL that alias is aliasing.  */\n+  inline tree get_alias_target_tree ();\n+\n   /* Set section for symbol and its aliases.  */\n   void set_section (const char *section);\n \n@@ -2665,6 +2668,17 @@ symtab_node::get_alias_target (void)\n   return ref->referred;\n }\n \n+/* Return the DECL (or identifier) that alias is aliasing.  Unlike the above,\n+   this works whether or not the alias has been analyzed already.  */\n+\n+inline tree\n+symtab_node::get_alias_target_tree ()\n+{\n+  if (alias_target)\n+    return alias_target;\n+  return get_alias_target ()->decl;\n+}\n+\n /* Return next reachable static symbol with initializer after the node.  */\n \n inline symtab_node *"}, {"sha": "1c74cee69accbb68ef4d83361febb421e1b0e73d", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8e7f3f3f33e22721a28772cc3f9b616e48cd1c9/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8e7f3f3f33e22721a28772cc3f9b616e48cd1c9/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=f8e7f3f3f33e22721a28772cc3f9b616e48cd1c9", "patch": "@@ -859,8 +859,11 @@ process_function_and_variable_attributes (cgraph_node *first,\n       if (node->alias\n \t  && lookup_attribute (\"flatten\", DECL_ATTRIBUTES (decl)))\n \t{\n-\t  warning_at (DECL_SOURCE_LOCATION (node->decl), OPT_Wattributes,\n-\t\t      \"%<flatten%> attribute is ignored on aliases\");\n+\t  tree tdecl = node->get_alias_target_tree ();\n+\t  if (!tdecl || !DECL_P (tdecl)\n+\t      || !lookup_attribute (\"flatten\", DECL_ATTRIBUTES (tdecl)))\n+\t    warning_at (DECL_SOURCE_LOCATION (decl), OPT_Wattributes,\n+\t\t\t\"%<flatten%> attribute is ignored on aliases\");\n \t}\n       if (DECL_PRESERVE_P (decl))\n \tnode->mark_force_output ();"}, {"sha": "5bcbfb6f4aaa2721bbabc1ce0e61627d671be089", "filename": "gcc/testsuite/g++.dg/ext/attr-flatten1.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8e7f3f3f33e22721a28772cc3f9b616e48cd1c9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-flatten1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8e7f3f3f33e22721a28772cc3f9b616e48cd1c9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-flatten1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-flatten1.C?ref=f8e7f3f3f33e22721a28772cc3f9b616e48cd1c9", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/96078\n+// { dg-do compile { target c++11 } }\n+\n+struct A {\n+    [[gnu::flatten]] A() {}\n+    [[gnu::flatten]] ~A() {}\n+};\n+\n+A a;"}]}