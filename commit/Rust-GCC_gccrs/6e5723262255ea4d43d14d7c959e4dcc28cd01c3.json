{"sha": "6e5723262255ea4d43d14d7c959e4dcc28cd01c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU1NzIzMjYyMjU1ZWE0ZDQzZDE0ZDdjOTU5ZTRkY2MyOGNkMDFjMw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-10-05T10:37:12Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-10-05T10:37:12Z"}, "message": "re PR middle-end/45877 (invalid write in gimplify_and_update_call_from_tree)\n\n2010-10-05  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/45877\n\t* gimple-fold.c (gimplify_and_update_call_from_tree): Handle\n\tcase where gimplification optimizes away the stmt.\n\n\t* g++.dg/torture/pr45877.C: New testcase.\n\nFrom-SVN: r164984", "tree": {"sha": "05ebfcb5ef936e811e19a264334216b2b41c4b19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05ebfcb5ef936e811e19a264334216b2b41c4b19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e5723262255ea4d43d14d7c959e4dcc28cd01c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e5723262255ea4d43d14d7c959e4dcc28cd01c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e5723262255ea4d43d14d7c959e4dcc28cd01c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e5723262255ea4d43d14d7c959e4dcc28cd01c3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ce417b8f3fd61e8cbf0bc5cbedac464b009458d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce417b8f3fd61e8cbf0bc5cbedac464b009458d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce417b8f3fd61e8cbf0bc5cbedac464b009458d4"}], "stats": {"total": 168, "additions": 167, "deletions": 1}, "files": [{"sha": "c06867447c425eb93d21d1b5e74660bfac7879dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5723262255ea4d43d14d7c959e4dcc28cd01c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5723262255ea4d43d14d7c959e4dcc28cd01c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e5723262255ea4d43d14d7c959e4dcc28cd01c3", "patch": "@@ -1,3 +1,9 @@\n+2010-10-05  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/45877\n+\t* gimple-fold.c (gimplify_and_update_call_from_tree): Handle\n+\tcase where gimplification optimizes away the stmt.\n+\n 2010-10-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/45849"}, {"sha": "d412eb2a74733a38941c0720a68a228f70e66b92", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5723262255ea4d43d14d7c959e4dcc28cd01c3/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5723262255ea4d43d14d7c959e4dcc28cd01c3/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=6e5723262255ea4d43d14d7c959e4dcc28cd01c3", "patch": "@@ -932,7 +932,21 @@ gimplify_and_update_call_from_tree (gimple_stmt_iterator *si_p, tree expr)\n   push_gimplify_context (&gctx);\n \n   if (lhs == NULL_TREE)\n-    gimplify_and_add (expr, &stmts);\n+    {\n+      gimplify_and_add (expr, &stmts);\n+      /* We can end up with folding a memcpy of an empty class assignment\n+\t which gets optimized away by C++ gimplification.  */\n+      if (gimple_seq_empty_p (stmts))\n+\t{\n+\t  if (gimple_in_ssa_p (cfun))\n+\t    {\n+\t      unlink_stmt_vdef (stmt);\n+\t      release_defs (stmt);\n+\t    }\n+\t  gsi_remove (si_p, true);\n+\t  return;\n+\t}\n+    }\n   else\n     tmp = get_initialized_tmp_var (expr, &stmts, NULL);\n "}, {"sha": "cfa09f7f8e4a56d2f7fa3e0bd532453f1fc21516", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5723262255ea4d43d14d7c959e4dcc28cd01c3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5723262255ea4d43d14d7c959e4dcc28cd01c3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6e5723262255ea4d43d14d7c959e4dcc28cd01c3", "patch": "@@ -1,3 +1,8 @@\n+2010-10-05  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/45877\n+\t* g++.dg/torture/pr45877.C: New testcase.\n+\n 2010-10-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/45849"}, {"sha": "9af6ae999852fcc88828b72ceea0feeccd953bb3", "filename": "gcc/testsuite/g++.dg/torture/pr45877.C", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5723262255ea4d43d14d7c959e4dcc28cd01c3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr45877.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5723262255ea4d43d14d7c959e4dcc28cd01c3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr45877.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr45877.C?ref=6e5723262255ea4d43d14d7c959e4dcc28cd01c3", "patch": "@@ -0,0 +1,141 @@\n+// { dg-do compile }\n+\n+namespace std __attribute__ ((__visibility__ (\"default\")))\n+{\n+  typedef __SIZE_TYPE__ size_t;\n+  template<typename _Alloc>     class allocator;\n+  template<class _CharT>     struct char_traits;\n+  template<typename _CharT, typename _Traits = char_traits<_CharT>,\n+      typename _Alloc = allocator<_CharT> >\n+\t  class basic_string;\n+  typedef basic_string<char> string;\n+  template<class _T1, class _T2>     struct pair     { };\n+  template<typename _Tp>     class allocator    { };\n+  template<typename _Arg1, typename _Arg2, typename _Result>\n+      struct binary_function     {\n+\t  typedef _Arg1 first_argument_type;\n+\t  typedef _Arg2 second_argument_type;\n+\t  typedef _Result result_type;\n+      };\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+  class basic_string {\n+  public:\n+      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc());\n+  };\n+  class type_info   {\n+  public:\n+      const char* name() const;\n+  };\n+  extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__, __artificial__))\n+  void * memcpy (void *__restrict __dest, __const void *__restrict __src, size_t __len) throw ()\n+  {\n+      return __builtin___memcpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));\n+  }\n+  template <typename _Key, typename _Tp >\n+  class map {\n+      typedef _Key key_type;\n+      typedef _Tp mapped_type;\n+  public:\n+      mapped_type&       operator[](const key_type& __k);\n+  };\n+}\n+class CodeAlloc { };\n+using namespace std;\n+typedef void *Stack;\n+class basicForEachType;\n+typedef const basicForEachType * aType;\n+extern map<const string,basicForEachType *> map_type;\n+class AnyTypeWithOutCheck { };\n+typedef AnyTypeWithOutCheck AnyType;\n+template<typename T> AnyTypeWithOutCheck inline SetAny(const T & x)\n+{\n+  AnyTypeWithOutCheck any;\n+  memcpy(&any,&x,sizeof(x));\n+}\n+template<typename T> const T& GetAny(const AnyTypeWithOutCheck & x);\n+class E_F0;\n+class C_F0;\n+class Polymorphic;\n+typedef E_F0 * Expression;\n+class basicAC_F0;\n+extern Polymorphic * TheOperators, * TheRightOperators;\n+class basicForEachType : public CodeAlloc {\n+public:\n+    virtual C_F0 CastTo(const C_F0 & e) const ;\n+};\n+class E_F0 :public CodeAlloc    {\n+public:\n+    virtual AnyType operator()(Stack) const =0;\n+};\n+class E_F0mps : public E_F0 {\n+};\n+class ArrayOfaType : public CodeAlloc{\n+protected:\n+    aType * t;\n+};\n+class OneOperator : public ArrayOfaType {\n+public:\n+    OneOperator(aType rr,aType a,aType b);\n+    virtual E_F0 * code(const basicAC_F0 &) const =0;\n+};\n+class Polymorphic: public E_F0mps {\n+public:\n+    void Add(const char * op,OneOperator * p0 ,OneOperator * p1=0) const;\n+};\n+class C_F0 {\n+public:\n+    operator E_F0 * () const;\n+};\n+class basicAC_F0 {\n+public:\n+    const C_F0 & operator [] (int i) const;\n+};\n+struct OneBinaryOperatorMI { };\n+struct evalE_F2 { };\n+template<typename C,class MI=OneBinaryOperatorMI,class MIx=evalE_F2 >\n+class OneBinaryOperator : public OneOperator\n+{\n+  typedef typename C::result_type R;\n+  typedef typename C::first_argument_type A;\n+  typedef typename C::second_argument_type B;\n+  aType t0,t1;\n+  class Op : public E_F0 {\n+      Expression a,b;\n+  public:\n+      AnyType operator()(Stack s) const {\n+\t  return SetAny<R>(static_cast<R>(C::f( GetAny<A>((*a)(s)),\n+\t\t\t\t\t\tGetAny<B>((*b)(s)))));\n+      }\n+      Op(Expression aa,Expression bb) : a(aa),b(bb) { }\n+  };\n+public:\n+  E_F0 * code(const basicAC_F0 & args) const   {\n+      return new Op(t0->CastTo(args[0]),t1->CastTo(args[1]));\n+  }\n+  OneBinaryOperator()\n+      : OneOperator(map_type[typeid(R).name()],\n+\t\t    map_type[typeid(A).name()],\n+\t\t    map_type[typeid(B).name()]), t0(t[0]), t1(t[1]) { }\n+};\n+struct NothingType { };\n+class ShapeOfArray{ };\n+template<class R> class KN_: public ShapeOfArray { };\n+template <class T> struct affectation: binary_function<T, T, T> { };\n+template<class K,class L,class OP> struct set_A_BI\n+: public binary_function<KN_<K>,pair<KN_<K>, KN_<L> > *,KN_<K> >\n+{\n+  static KN_<K> f(const KN_<K> & a, pair<KN_<K>, KN_<L> > * const & b);\n+};\n+template<class K,class L,class OP> struct set_AI_B\n+: public binary_function<pair<KN_<K>, KN_<L> > * ,KN_<K>, NothingType >\n+{\n+  static NothingType f( pair<KN_<K>, KN_<L> > * const & b,const KN_<K> & a);\n+};\n+template<class K,class Z> void ArrayOperator()\n+{\n+  TheOperators->Add(\"=\", new OneBinaryOperator<set_A_BI< K,Z,affectation<K> > >,\n+\t\t    new OneBinaryOperator<set_AI_B< K,Z,affectation<K> > >);\n+}\n+void initArrayOperatorlong() {\n+    ArrayOperator<long,long>();\n+}"}]}