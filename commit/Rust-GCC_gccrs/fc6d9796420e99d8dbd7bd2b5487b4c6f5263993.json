{"sha": "fc6d9796420e99d8dbd7bd2b5487b4c6f5263993", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM2ZDk3OTY0MjBlOTlkOGRiZDdiZDJiNTQ4N2I0YzZmNTI2Mzk5Mw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-01-06T10:13:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-01-06T10:13:24Z"}, "message": "[multiple changes]\n\n2015-01-06  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb, sem_ch12.ads, sem_ch8.adb: Ongoing work for wrappers\n\tfor operators in SPARK.\n\n2015-01-06  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_disp.adb: Revert previous patch again.\n\n2015-01-06  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_aggr.adb (Get_Value): In ASIS mode, preanalyze the\n\texpression in an others association before making copies for\n\tseparate resolution and accessibility checks. This ensures that\n\tthe type of the expression is available to ASIS in all cases,\n\tin particular if the expression is itself an aggregate.\n\nFrom-SVN: r219248", "tree": {"sha": "60ba5ab2a615682e5f32f980557c74a6400a1d8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60ba5ab2a615682e5f32f980557c74a6400a1d8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc6d9796420e99d8dbd7bd2b5487b4c6f5263993", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc6d9796420e99d8dbd7bd2b5487b4c6f5263993", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc6d9796420e99d8dbd7bd2b5487b4c6f5263993", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc6d9796420e99d8dbd7bd2b5487b4c6f5263993/comments", "author": null, "committer": null, "parents": [{"sha": "28fa5430b89d86f6735a4d505b5dcc891ca27ef6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28fa5430b89d86f6735a4d505b5dcc891ca27ef6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28fa5430b89d86f6735a4d505b5dcc891ca27ef6"}], "stats": {"total": 121, "additions": 64, "deletions": 57}, "files": [{"sha": "d4f0a15f30158a25328567a99ca6fc620339f6aa", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6d9796420e99d8dbd7bd2b5487b4c6f5263993/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6d9796420e99d8dbd7bd2b5487b4c6f5263993/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fc6d9796420e99d8dbd7bd2b5487b4c6f5263993", "patch": "@@ -1,3 +1,20 @@\n+2015-01-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb, sem_ch12.ads, sem_ch8.adb: Ongoing work for wrappers\n+\tfor operators in SPARK.\n+\n+2015-01-06  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_disp.adb: Revert previous patch again.\n+\n+2015-01-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_aggr.adb (Get_Value): In ASIS mode, preanalyze the\n+\texpression in an others association before making copies for\n+\tseparate resolution and accessibility checks. This ensures that\n+\tthe type of the expression is available to ASIS in all cases,\n+\tin particular if the expression is itself an aggregate.\n+\n 2015-01-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* einfo.ads (Has_Independent_Components): Document extended"}, {"sha": "99105e0ea4f1052aee2dc73522dfc9e975362279", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6d9796420e99d8dbd7bd2b5487b4c6f5263993/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6d9796420e99d8dbd7bd2b5487b4c6f5263993/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=fc6d9796420e99d8dbd7bd2b5487b4c6f5263993", "patch": "@@ -1138,25 +1138,6 @@ package body Exp_Disp is\n          Operand_Typ := Base_Type (Corresponding_Record_Type (Operand_Typ));\n       end if;\n \n-      --  No displacement of the pointer to the object needed when the type of\n-      --  the operand is not an interface type and the interface is one of\n-      --  its parent types (since they share the primary dispatch table).\n-\n-      declare\n-         Opnd : Entity_Id := Operand_Typ;\n-\n-      begin\n-         if Is_Access_Type (Opnd) then\n-            Opnd := Designated_Type (Opnd);\n-         end if;\n-\n-         if not Is_Interface (Opnd)\n-           and then Is_Ancestor (Iface_Typ, Opnd, Use_Full_View => True)\n-         then\n-            return;\n-         end if;\n-      end;\n-\n       --  Evaluate if we can statically displace the pointer to the object\n \n       declare"}, {"sha": "e0bd5cdca3d4d5cae1385157c797cb7f51b7cc91", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6d9796420e99d8dbd7bd2b5487b4c6f5263993/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6d9796420e99d8dbd7bd2b5487b4c6f5263993/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=fc6d9796420e99d8dbd7bd2b5487b4c6f5263993", "patch": "@@ -3253,6 +3253,18 @@ package body Sem_Aggr is\n                         --  access types, even in compile_only mode.\n \n                         if not Inside_A_Generic then\n+\n+                           --  In ASIS mode, preanalyze the expression in an\n+                           --  others association before making copies for\n+                           --  separate resolution and accessibility checks.\n+                           --  This ensures that the type of the expression is\n+                           --  available to ASIS in all cases, in particular if\n+                           --  the expression is itself an aggregate.\n+\n+                           if ASIS_Mode then\n+                              Preanalyze_And_Resolve (Expression (Assoc), Typ);\n+                           end if;\n+\n                            return\n                              New_Copy_Tree_And_Copy_Dimensions\n                                (Expression (Assoc));"}, {"sha": "1d2a64b6b4a617cff1bb70e552e7d808723df269", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 23, "deletions": 32, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6d9796420e99d8dbd7bd2b5487b4c6f5263993/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6d9796420e99d8dbd7bd2b5487b4c6f5263993/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=fc6d9796420e99d8dbd7bd2b5487b4c6f5263993", "patch": "@@ -5125,10 +5125,10 @@ package body Sem_Ch12 is\n    ----------------------------\n \n    function Build_Function_Wrapper\n-     (Formal : Entity_Id;\n-      Actual : Entity_Id) return Node_Id\n+     (Formal_Subp : Entity_Id;\n+      Actual_Subp : Entity_Id) return Node_Id\n    is\n-      Loc       : constant Source_Ptr := Sloc (Formal);\n+      Loc       : constant Source_Ptr := Sloc (Formal_Subp);\n       Actuals   : List_Id;\n       Decl      : Node_Id;\n       Func_Name : Node_Id;\n@@ -5141,22 +5141,22 @@ package body Sem_Ch12 is\n       New_F     : Entity_Id;\n \n    begin\n-      Func_Name := New_Occurrence_Of (Actual, Loc);\n+      Func_Name := New_Occurrence_Of (Actual_Subp, Loc);\n \n-      Func := Make_Defining_Identifier (Loc, Chars (Formal));\n+      Func := Make_Defining_Identifier (Loc, Chars (Formal_Subp));\n       Set_Ekind (Func, E_Function);\n       Set_Is_Generic_Actual_Subprogram (Func);\n \n       Actuals := New_List;\n       Profile := New_List;\n \n-      if Present (Actual) then\n-         Act_F := First_Formal (Actual);\n+      if Present (Actual_Subp) then\n+         Act_F := First_Formal (Actual_Subp);\n       else\n          Act_F := Empty;\n       end if;\n \n-      Form_F := First_Formal (Formal);\n+      Form_F := First_Formal (Formal_Subp);\n       while Present (Form_F) loop\n \n          --  Create new formal for profile of wrapper, and add a reference\n@@ -5186,7 +5186,7 @@ package body Sem_Ch12 is\n           Defining_Unit_Name       => Func,\n           Parameter_Specifications => Profile,\n           Result_Definition        =>\n-            Make_Identifier (Loc, Chars (Etype (Formal))));\n+            Make_Identifier (Loc, Chars (Etype (Formal_Subp))));\n \n       Decl :=\n         Make_Expression_Function (Loc,\n@@ -5204,13 +5204,15 @@ package body Sem_Ch12 is\n    ----------------------------\n \n    function Build_Operator_Wrapper\n-     (Formal : Entity_Id;\n-      Actual : Entity_Id) return Node_Id\n+     (Formal_Subp : Entity_Id;\n+      Actual_Subp : Entity_Id) return Node_Id\n    is\n-      Loc       : constant Source_Ptr := Sloc (Formal);\n-      Typ       : constant Entity_Id := Etype (Formal);\n+      Loc       : constant Source_Ptr := Sloc (Formal_Subp);\n+      Ret_Type  : constant Entity_Id := Get_Instance_Of (Etype (Formal_Subp));\n+      Op_Type   : constant Entity_Id := Get_Instance_Of\n+                                          (Etype (First_Formal (Formal_Subp)));\n       Is_Binary : constant Boolean :=\n-                    Present (Next_Formal (First_Formal (Formal)));\n+                    Present (Next_Formal (First_Formal (Formal_Subp)));\n \n       Decl    : Node_Id;\n       Expr    : Node_Id;\n@@ -5221,7 +5223,7 @@ package body Sem_Ch12 is\n       L, R    : Node_Id;\n \n    begin\n-      Op_Name := Chars (Actual);\n+      Op_Name := Chars (Actual_Subp);\n \n       --  Create entities for wrapper function and its formals\n \n@@ -5230,7 +5232,7 @@ package body Sem_Ch12 is\n       L  := New_Occurrence_Of (F1, Loc);\n       R  := New_Occurrence_Of (F2, Loc);\n \n-      Func := Make_Defining_Identifier (Loc, Chars (Formal));\n+      Func := Make_Defining_Identifier (Loc, Chars (Formal_Subp));\n       Set_Ekind (Func, E_Function);\n       Set_Is_Generic_Actual_Subprogram (Func);\n \n@@ -5240,29 +5242,25 @@ package body Sem_Ch12 is\n           Parameter_Specifications => New_List (\n             Make_Parameter_Specification (Loc,\n                Defining_Identifier => F1,\n-               Parameter_Type      =>\n-                 Make_Identifier (Loc,\n-                   Chars => Chars (Etype (First_Formal (Formal)))))),\n-          Result_Definition        => Make_Identifier (Loc, Chars (Typ)));\n+               Parameter_Type      => New_Occurrence_Of (Op_Type, Loc))),\n+          Result_Definition        =>  New_Occurrence_Of (Ret_Type, Loc));\n \n       if Is_Binary then\n          Append_To (Parameter_Specifications (Spec),\n             Make_Parameter_Specification (Loc,\n               Defining_Identifier => F2,\n-              Parameter_Type      =>\n-                Make_Identifier (Loc,\n-                  Chars (Etype (Next_Formal (First_Formal (Formal)))))));\n+              Parameter_Type      => New_Occurrence_Of (Op_Type, Loc)));\n       end if;\n \n       --  Build expression as a function call, or as an operator node\n       --  that corresponds to the name of the actual, starting with\n       --  binary operators.\n \n-      if Present (Actual) and then Op_Name not in Any_Operator_Name then\n+      if Op_Name not in Any_Operator_Name then\n          Expr :=\n            Make_Function_Call (Loc,\n              Name                   =>\n-               New_Occurrence_Of (Entity (Actual), Loc),\n+               New_Occurrence_Of (Actual_Subp, Loc),\n              Parameter_Associations => New_List (L));\n \n          if Is_Binary then\n@@ -5322,13 +5320,6 @@ package body Sem_Ch12 is\n          end if;\n       end if;\n \n-      --  Propagate visible entity to operator node, either from a\n-      --  given actual or from a default.\n-\n-      if Is_Entity_Name (Actual) and then Nkind (Expr) in N_Op then\n-         Set_Entity (Expr, Entity (Actual));\n-      end if;\n-\n       Decl :=\n         Make_Expression_Function (Loc,\n           Specification => Spec,"}, {"sha": "65a00eaa8728f8c182f92e11655620a9e6afc359", "filename": "gcc/ada/sem_ch12.ads", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6d9796420e99d8dbd7bd2b5487b4c6f5263993/gcc%2Fada%2Fsem_ch12.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6d9796420e99d8dbd7bd2b5487b4c6f5263993/gcc%2Fada%2Fsem_ch12.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.ads?ref=fc6d9796420e99d8dbd7bd2b5487b4c6f5263993", "patch": "@@ -38,20 +38,21 @@ package Sem_Ch12 is\n    procedure Analyze_Formal_Package_Declaration         (N : Node_Id);\n \n    function Build_Function_Wrapper\n-     (Formal : Entity_Id;\n-      Actual : Entity_Id) return Node_Id;\n+     (Formal_Subp : Entity_Id;\n+      Actual_Subp : Entity_Id) return Node_Id;\n    --  In GNATprove mode, create a wrapper function for actuals that are\n    --  functions with any number of formal parameters, in order to propagate\n    --  their contract to the renaming declarations generated for them. This\n    --  is called after the renaming declaration created for the formal in the\n    --  instance has been analyzed, and the actual is known.\n \n    function Build_Operator_Wrapper\n-     (Formal : Entity_Id;\n-      Actual : Entity_Id) return Node_Id;\n+     (Formal_Subp : Entity_Id;\n+      Actual_Subp : Entity_Id) return Node_Id;\n    --  In GNATprove mode, create a wrapper function for actuals that are\n    --  operators, in order to propagate their contract to the renaming\n-   --  declarations generated for them.\n+   --  declarations generated for them. The types are (the instances of)\n+   --  the types of the formal subprogram.\n \n    procedure Start_Generic;\n    --  Must be invoked before starting to process a generic spec or body"}, {"sha": "413fe90e93a8427b4ef9c5076780c121a51098de", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6d9796420e99d8dbd7bd2b5487b4c6f5263993/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6d9796420e99d8dbd7bd2b5487b4c6f5263993/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=fc6d9796420e99d8dbd7bd2b5487b4c6f5263993", "patch": "@@ -3465,8 +3465,13 @@ package body Sem_Ch8 is\n          if Ekind (Old_S) = E_Function then\n             Rewrite (N, Build_Function_Wrapper (New_S, Old_S));\n             Analyze (N);\n+\n+         --  For wrappers of operators, the types are obtained from (the\n+         --  instances of) the types of the formal subprogram, not from the\n+         --  actual subprogram, that carries predefined types.\n+\n          elsif Ekind (Old_S) = E_Operator then\n-            Rewrite (N, Build_Operator_Wrapper (New_S, Old_S));\n+            Rewrite (N, Build_Operator_Wrapper (Formal_Spec, Old_S));\n             Analyze (N);\n          end if;\n       end if;"}]}