{"sha": "1d7ab6b109a7654c283705d90ff4c96f1266178a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ3YWI2YjEwOWE3NjU0YzI4MzcwNWQ5MGZmNGM5NmYxMjY2MTc4YQ==", "commit": {"author": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-07-05T08:51:02Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:18Z"}, "message": "Added NDS32 target hook (or at least provisional one)", "tree": {"sha": "500faa1060e41bac2040f45cd84400566d163130", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/500faa1060e41bac2040f45cd84400566d163130"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d7ab6b109a7654c283705d90ff4c96f1266178a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d7ab6b109a7654c283705d90ff4c96f1266178a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d7ab6b109a7654c283705d90ff4c96f1266178a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d7ab6b109a7654c283705d90ff4c96f1266178a/comments", "author": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea5e2aff4e3fc149125bf5b7da627ffb352ced45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea5e2aff4e3fc149125bf5b7da627ffb352ced45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea5e2aff4e3fc149125bf5b7da627ffb352ced45"}], "stats": {"total": 205, "additions": 205, "deletions": 0}, "files": [{"sha": "bab2892c3a0db1ce4dfc363f81b3e18282a6eb3f", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d7ab6b109a7654c283705d90ff4c96f1266178a/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d7ab6b109a7654c283705d90ff4c96f1266178a/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=1d7ab6b109a7654c283705d90ff4c96f1266178a", "patch": "@@ -505,6 +505,7 @@ mips*-*-*)\n \t;;\n nds32*)\n \tcpu_type=nds32\n+\trust_target_objs=\"nds32-rust.o\"\n \textra_headers=\"nds32_intrinsic.h nds32_isr.h nds32_init.inc\"\n \tcase ${target} in\n \t  nds32*-*-linux*)"}, {"sha": "091e4dd5c0af8eea7619483e96e239c43d4e904d", "filename": "gcc/config/nds32/nds32-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d7ab6b109a7654c283705d90ff4c96f1266178a/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d7ab6b109a7654c283705d90ff4c96f1266178a/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h?ref=1d7ab6b109a7654c283705d90ff4c96f1266178a", "patch": "@@ -319,6 +319,9 @@ extern int nds32_address_cost_impl (rtx, machine_mode, addr_space_t, bool);\n /* Auxiliary functions for pre-define marco.  */\n extern void nds32_cpu_cpp_builtins(struct cpp_reader *);\n \n+/* Routines implemented in nds32-rust.c  */\n+extern void nds32_rust_target_cpu_info (void);\n+\n /* Auxiliary functions for const_vector's constraints.  */\n \n extern HOST_WIDE_INT const_vector_to_hwint (rtx);"}, {"sha": "fa19a8f35d6d479c4b605ff517be91b020ff593a", "filename": "gcc/config/nds32/nds32-rust.c", "status": "added", "additions": 194, "deletions": 0, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d7ab6b109a7654c283705d90ff4c96f1266178a/gcc%2Fconfig%2Fnds32%2Fnds32-rust.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d7ab6b109a7654c283705d90ff4c96f1266178a/gcc%2Fconfig%2Fnds32%2Fnds32-rust.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-rust.c?ref=1d7ab6b109a7654c283705d90ff4c96f1266178a", "patch": "@@ -0,0 +1,194 @@\n+/* Subroutines for the Rust front end for the NDS32 architecture.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tm_p.h\"\n+#include \"rust/rust-target.h\"\n+#include \"rust/rust-target-def.h\"\n+\n+/* Implement TARGET_RUST_CPU_INFO for NDS32 targets.  */\n+\n+void nds32_rust_target_cpu_info(void) {\n+    rust_add_target_info(\"target_arch\", \"nds32\");\n+\n+    // made up names as no apparent support (current or historical) in llvm\n+    // TODO: maybe have cpu types as features? might be a lot, though\n+    if (TARGET_REDUCED_REGS)\n+        rust_add_target_info(\"target_feature\", \"reduced-regs\");\n+    if (TARGET_ALWAYS_ALIGN)\n+        rust_add_target_info(\"target_feature\", \"always-align\");\n+    if (TARGET_ALIGN_FUNCTION)\n+        rust_add_target_info(\"target_feature\", \"align-functions\");\n+    if (TARGET_FORCE_FP_AS_GP)\n+        rust_add_target_info(\"target_feature\", \"force-fp-as-gp\");\n+    if (TARGET_FORBID_FP_AS_GP)\n+        rust_add_target_info(\"target_feature\", \"forbid-fp-as-gp\");\n+    // TODO: ensure below variables work\n+    if (nds32_ict_model == ICT_MODEL_SMALL)\n+        rust_add_target_info(\"target_feature\", \"ict-model-small\");\n+    else if (nds32_ict_model == ICT_MODEL_LARGE)\n+        rust_add_target_info(\"target_feature\", \"ict-model-large\");\n+    if (TARGET_CMOV)\n+        rust_add_target_info(\"target_feature\", \"cmov\");\n+    if (TARGET_HW_ABS)\n+        rust_add_target_info(\"target_feature\", \"hw-abs\");\n+    if (TARGET_EXT_PERF)\n+        rust_add_target_info(\"target_feature\", \"ext-perf\");\n+    if (TARGET_EXT_PERF2)\n+        rust_add_target_info(\"target_feature\", \"ext-perf2\");\n+    if (TARGET_EXT_STRING)\n+        rust_add_target_info(\"target_feature\", \"ext-string\");\n+    if (TARGET_EXT_DSP)\n+        rust_add_target_info(\"target_feature\", \"ext-dsp\");\n+    if (TARGET_V3PUSH)\n+        rust_add_target_info(\"target_feature\", \"v3push\");\n+    if (TARGET_16_BIT)\n+        rust_add_target_info(\"target_feature\", \"16-bit\");\n+    if (TARGET_RELAX_HINT)\n+        rust_add_target_info(\"target_feature\", \"relax-hint\");\n+    if (TARGET_VH)\n+        rust_add_target_info(\"target_feature\", \"vh\");\n+    if (TARGET_ISR_VECTOR_SIZE_4_BYTE)\n+        rust_add_target_info(\"target_feature\", \"isr-vector-size-4\");\n+    else\n+        rust_add_target_info(\"target_feature\", \"isr-vector-size-16\");\n+    // TODO: figure out how to handle nds32_isr_secure_level (isr-secure)\n+    // TODO: ensure below switch variable and whatever works\n+    switch (nds32_cache_block_size) {\n+        // note: supposedly only powers of 2 between 4 and 512\n+        case 4:\n+            rust_add_target_info(\"target_feature\", \"cache-block-size-4\");\n+            break;\n+        case 8:\n+            rust_add_target_info(\"target_feature\", \"cache-block-size-8\");\n+            break;\n+        case 16:\n+            rust_add_target_info(\"target_feature\", \"cache-block-size-16\");\n+            break;\n+        case 32:\n+            rust_add_target_info(\"target_feature\", \"cache-block-size-32\");\n+            break;\n+        case 64:\n+            rust_add_target_info(\"target_feature\", \"cache-block-size-64\");\n+            break;\n+        case 128:\n+            rust_add_target_info(\"target_feature\", \"cache-block-size-128\");\n+            break;\n+        case 256:\n+            rust_add_target_info(\"target_feature\", \"cache-block-size-256\");\n+            break;\n+        case 512:\n+            rust_add_target_info(\"target_feature\", \"cache-block-size-512\");\n+            break;\n+        default: // unknown cache block size - should this be an error?\n+            break;\n+    }\n+    // TODO: ensure below switch and variable works - should this be cumulative or exclusive like now?\n+    switch (nds32_arch_option) {\n+        case ARCH_V2:\n+            rust_add_target_info(\"target_feature\", \"v2\");\n+            break;\n+        case ARCH_V3:\n+            rust_add_target_info(\"target_feature\", \"v3\");\n+            break;\n+        case ARCH_V3J:\n+            rust_add_target_info(\"target_feature\", \"v3j\");\n+            break;\n+        case ARCH_V3M:\n+            rust_add_target_info(\"target_feature\", \"v3m\");\n+            break;\n+        case ARCH_V3F:\n+            rust_add_target_info(\"target_feature\", \"v3f\");\n+            break;\n+        case ARCH_V3S:\n+            rust_add_target_info(\"target_feature\", \"v3s\");\n+            break;\n+        default: // unknown arch (isa level) - should this be an error?\n+            break;\n+    }\n+    // TODO: stuff below is taken from cpp defines - may be better to define 4-7 separately?\n+    if (TARGET_FPU_SINGLE || TARGET_FPU_DOUBLE) {\n+        switch (nds32_fp_regnum) {\n+            case 0:\n+            case 4:\n+                rust_add_target_info(\"target_feature\", \"config-fpu-0\");\n+                break;\n+            case 1:\n+            case 5:\n+                rust_add_target_info(\"target_feature\", \"config-fpu-1\");\n+                break;\n+            case 2:\n+            case 6:\n+                rust_add_target_info(\"target_feature\", \"config-fpu-2\");\n+                break;\n+            case 3:\n+            case 7:\n+                rust_add_target_info(\"target_feature\", \"config-fpu-3\");\n+                break;\n+            default:\n+                gcc_unreachable();\n+        }\n+    }\n+    // TODO: ensure below switch and variable works\n+    switch (nds32_mul_config) {\n+        case MUL_TYPE_FAST_1:\n+            rust_add_target_info(\"target_feature\", \"config-mul-fast1\");\n+            break;\n+        case MUL_TYPE_FAST_2:\n+            rust_add_target_info(\"target_feature\", \"config-mul-fast2\");\n+            break;\n+        case MUL_TYPE_SLOW:\n+            rust_add_target_info(\"target_feature\", \"config-mul-slow\");\n+            break;\n+        default: // unknown arch (isa level) - should this be an error?\n+            break;\n+    }\n+    // TODO: ensure below switch and variable works\n+    switch (nds32_register_ports_config) {\n+        case REG_PORT_3R2W:\n+            rust_add_target_info(\"target_feature\", \"config-register-ports-3r2w\");\n+            break;\n+        case REG_PORT_2R1W:\n+            rust_add_target_info(\"target_feature\", \"config-register-ports-2r1w\");\n+            break;\n+        default: // unknown arch (isa level) - should this be an error?\n+            break;\n+    }\n+    // TODO: add ctor-dtor and relax if can figure out how to get data from it\n+    if (TARGET_EXT_FPU_FMA)\n+        rust_add_target_info(\"target_feature\", \"ext-fpu-fma\");\n+    if (TARGET_FPU_SINGLE)\n+        rust_add_target_info(\"target_feature\", \"ext-fpu-sp\");\n+    if (TARGET_FPU_DOUBLE)\n+        rust_add_target_info(\"target_feature\", \"ext-fpu-dp\");\n+    if (TARGET_FORCE_NO_EXT_DSP)\n+        rust_add_target_info(\"target_feature\", \"force-no-ext-dsp\");\n+    // TODO: ensure below variables work\n+    if (flag_sched_prolog_epilog)\n+        rust_add_target_info(\"target_feature\", \"sched-prolog-epilog\");\n+    if (flag_ret_in_naked_func)\n+        rust_add_target_info(\"target_feature\", \"ret-in-naked-func\");\n+    if (flag_always_save_lp)\n+        rust_add_target_info(\"target_feature\", \"always-save-lp\");\n+    if (flag_unaligned_access)\n+        rust_add_target_info(\"target_feature\", \"unaligned-access\");\n+    if (flag_inline_asm_r15)\n+        rust_add_target_info(\"target_feature\", \"inline-asm-r15\");\n+}"}, {"sha": "c2c9ab9af04da4a96320c81deb7b4ba4d359080f", "filename": "gcc/config/nds32/nds32.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d7ab6b109a7654c283705d90ff4c96f1266178a/gcc%2Fconfig%2Fnds32%2Fnds32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d7ab6b109a7654c283705d90ff4c96f1266178a/gcc%2Fconfig%2Fnds32%2Fnds32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.h?ref=1d7ab6b109a7654c283705d90ff4c96f1266178a", "patch": "@@ -1006,6 +1006,9 @@ enum nds32_builtins\n #define TARGET_CPU_CPP_BUILTINS() \\\n   nds32_cpu_cpp_builtins (pfile)\n \n+/* Target CPU info for Rust.  */\n+#define TARGET_RUST_CPU_INFO nds32_rust_target_cpu_info\n+\n \f\n /* Defining Data Structures for Per-function Information.  */\n "}, {"sha": "84bc7fb24e4c9058afdeb90f7775d549064a9c2e", "filename": "gcc/config/nds32/t-nds32", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d7ab6b109a7654c283705d90ff4c96f1266178a/gcc%2Fconfig%2Fnds32%2Ft-nds32", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d7ab6b109a7654c283705d90ff4c96f1266178a/gcc%2Fconfig%2Fnds32%2Ft-nds32", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Ft-nds32?ref=1d7ab6b109a7654c283705d90ff4c96f1266178a", "patch": "@@ -144,3 +144,7 @@ nds32-utils.o: \\\n   intl.h libfuncs.h $(PARAMS_H) $(OPTS_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$(srcdir)/config/nds32/nds32-utils.c\n+\n+nds32-rust.o: $(srcdir)/config/nds32/nds32-rust.c \\\n+  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}]}