{"sha": "ae7c3ba55f177f5469271802312ec4d697fa1896", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU3YzNiYTU1ZjE3N2Y1NDY5MjcxODAyMzEyZWM0ZDY5N2ZhMTg5Ng==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-09-30T20:16:28Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-09-30T20:16:28Z"}, "message": "stl_algo.h: Minor cosmetic reformattings.\n\n2003-09-30  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/bits/stl_algo.h: Minor cosmetic reformattings.\n\nFrom-SVN: r71950", "tree": {"sha": "02b03e6995f7c61d33abcc5104a7cd5f174e9912", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02b03e6995f7c61d33abcc5104a7cd5f174e9912"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae7c3ba55f177f5469271802312ec4d697fa1896", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae7c3ba55f177f5469271802312ec4d697fa1896", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae7c3ba55f177f5469271802312ec4d697fa1896", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae7c3ba55f177f5469271802312ec4d697fa1896/comments", "author": null, "committer": null, "parents": [{"sha": "d186e676b6d53efabc9d1cbfe9f7b80822c4c2ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d186e676b6d53efabc9d1cbfe9f7b80822c4c2ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d186e676b6d53efabc9d1cbfe9f7b80822c4c2ac"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "2c0b50b01d6157ce1016197259a5ea81e58c4d9c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7c3ba55f177f5469271802312ec4d697fa1896/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7c3ba55f177f5469271802312ec4d697fa1896/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ae7c3ba55f177f5469271802312ec4d697fa1896", "patch": "@@ -1,3 +1,7 @@\n+2003-09-30  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/bits/stl_algo.h: Minor cosmetic reformattings.\n+\n 2003-09-30  Paolo Carlini  <pcarlini@unitus.it>\n \n \t* include/bits/stl_algo.h (search_n): Tweak, to spare the"}, {"sha": "83e56469cc68e3e84d03dfdf2324cfbc6754997d", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7c3ba55f177f5469271802312ec4d697fa1896/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7c3ba55f177f5469271802312ec4d697fa1896/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=ae7c3ba55f177f5469271802312ec4d697fa1896", "patch": "@@ -1263,13 +1263,13 @@ namespace std\n     _ForwardIterator\n     unique(_ForwardIterator __first, _ForwardIterator __last)\n     {\n-\t  // concept requirements\n-\t  __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIterator>)\n-\t  __glibcxx_function_requires(_EqualityComparableConcept<\n-\t\t    typename iterator_traits<_ForwardIterator>::value_type>)\n+      // concept requirements\n+      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_EqualityComparableConcept<\n+\t    typename iterator_traits<_ForwardIterator>::value_type>)\n \n-\t  __first = std::adjacent_find(__first, __last);\n-\t  return std::unique_copy(__first, __last, __first);\n+      __first = std::adjacent_find(__first, __last);\n+      return std::unique_copy(__first, __last, __first);\n     }\n \n   /**\n@@ -1349,10 +1349,10 @@ namespace std\n     inline void\n     reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)\n     {\n-\t  // concept requirements\n-\t  __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<\n-\t\t    _BidirectionalIterator>)\n-\t  std::__reverse(__first, __last, std::__iterator_category(__first));\n+      // concept requirements\n+      __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<\n+\t\t_BidirectionalIterator>)\n+      std::__reverse(__first, __last, std::__iterator_category(__first));\n     }\n \n   /**"}]}