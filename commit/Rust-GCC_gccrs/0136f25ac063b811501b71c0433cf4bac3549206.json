{"sha": "0136f25ac063b811501b71c0433cf4bac3549206", "node_id": "C_kwDOANBUbNoAKDAxMzZmMjVhYzA2M2I4MTE1MDFiNzFjMDQzM2NmNGJhYzM1NDkyMDY", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-11-10T11:37:32Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-11-11T08:20:15Z"}, "message": "Remove find_pdom and find_dom\n\nThis removes now useless wrappers around get_immediate_dominator.\n\n2021-11-11  Richard Biener  <rguenther@suse.de>\n\n\t* cfganal.c (find_pdom): Remove.\n\t(control_dependences::find_control_dependence): Remove\n\tspecial-casing of entry block, call get_immediate_dominator\n\tdirectly.\n\t* gimple-predicate-analysis.cc (find_pdom): Remove.\n\t(find_dom): Likewise.\n\t(find_control_equiv_block): Call get_immediate_dominator\n\tdirectly.\n\t(compute_control_dep_chain): Likewise.\n\t(predicate::init_from_phi_def): Likewise.", "tree": {"sha": "3a7477dbea2a56db564bf9ab0ae52de5afb65c78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a7477dbea2a56db564bf9ab0ae52de5afb65c78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0136f25ac063b811501b71c0433cf4bac3549206", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0136f25ac063b811501b71c0433cf4bac3549206", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0136f25ac063b811501b71c0433cf4bac3549206", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0136f25ac063b811501b71c0433cf4bac3549206/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a11afa7af8ae496a403be9f6dac9e72a27d59466", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a11afa7af8ae496a403be9f6dac9e72a27d59466", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a11afa7af8ae496a403be9f6dac9e72a27d59466"}], "stats": {"total": 64, "additions": 7, "deletions": 57}, "files": [{"sha": "0cba612738d3c88e5a53e248fda175b3ee73d3e7", "filename": "gcc/cfganal.c", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0136f25ac063b811501b71c0433cf4bac3549206/gcc%2Fcfganal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0136f25ac063b811501b71c0433cf4bac3549206/gcc%2Fcfganal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfganal.c?ref=0136f25ac063b811501b71c0433cf4bac3549206", "patch": "@@ -372,25 +372,6 @@ control_dependences::clear_control_dependence_bitmap (basic_block bb)\n   bitmap_clear (&control_dependence_map[bb->index]);\n }\n \n-/* Find the immediate postdominator PDOM of the specified basic block BLOCK.\n-   This function is necessary because some blocks have negative numbers.  */\n-\n-static inline basic_block\n-find_pdom (basic_block block)\n-{\n-  gcc_assert (block != ENTRY_BLOCK_PTR_FOR_FN (cfun));\n-\n-  if (block == EXIT_BLOCK_PTR_FOR_FN (cfun))\n-    return EXIT_BLOCK_PTR_FOR_FN (cfun);\n-  else\n-    {\n-      basic_block bb = get_immediate_dominator (CDI_POST_DOMINATORS, block);\n-      if (! bb)\n-\treturn EXIT_BLOCK_PTR_FOR_FN (cfun);\n-      return bb;\n-    }\n-}\n-\n /* Determine all blocks' control dependences on the given edge with edge_list\n    EL index EDGE_INDEX, ala Morgan, Section 3.6.  */\n \n@@ -402,15 +383,14 @@ control_dependences::find_control_dependence (int edge_index)\n \n   gcc_assert (get_edge_src (edge_index) != EXIT_BLOCK_PTR_FOR_FN (cfun));\n \n-  if (get_edge_src (edge_index) == ENTRY_BLOCK_PTR_FOR_FN (cfun))\n-    ending_block = single_succ (ENTRY_BLOCK_PTR_FOR_FN (cfun));\n-  else\n-    ending_block = find_pdom (get_edge_src (edge_index));\n+  ending_block = get_immediate_dominator (CDI_POST_DOMINATORS,\n+\t\t\t\t\t  get_edge_src (edge_index));\n \n   for (current_block = get_edge_dest (edge_index);\n        current_block != ending_block\n        && current_block != EXIT_BLOCK_PTR_FOR_FN (cfun);\n-       current_block = find_pdom (current_block))\n+       current_block = get_immediate_dominator (CDI_POST_DOMINATORS,\n+\t\t\t\t\t\tcurrent_block))\n     set_control_dependence_map_bit (current_block, edge_index);\n }\n "}, {"sha": "454113d532e3df37c09e0ba90d575a43aa2c6e34", "filename": "gcc/gimple-predicate-analysis.cc", "status": "modified", "additions": 3, "deletions": 33, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0136f25ac063b811501b71c0433cf4bac3549206/gcc%2Fgimple-predicate-analysis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0136f25ac063b811501b71c0433cf4bac3549206/gcc%2Fgimple-predicate-analysis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-predicate-analysis.cc?ref=0136f25ac063b811501b71c0433cf4bac3549206", "patch": "@@ -45,36 +45,6 @@\n \n #define DEBUG_PREDICATE_ANALYZER 1\n \n-/* Find the immediate postdominator of the specified basic block BB.  */\n-\n-static inline basic_block\n-find_pdom (basic_block bb)\n-{\n-  basic_block exit_bb = EXIT_BLOCK_PTR_FOR_FN (cfun);\n-  if (bb == exit_bb)\n-    return exit_bb;\n-\n-  if (basic_block pdom = get_immediate_dominator (CDI_POST_DOMINATORS, bb))\n-    return pdom;\n-\n-  return exit_bb;\n-}\n-\n-/* Find the immediate dominator of the specified basic block BB.  */\n-\n-static inline basic_block\n-find_dom (basic_block bb)\n-{\n-  basic_block entry_bb = ENTRY_BLOCK_PTR_FOR_FN (cfun);\n-  if (bb == entry_bb)\n-    return entry_bb;\n-\n-  if (basic_block dom = get_immediate_dominator (CDI_DOMINATORS, bb))\n-    return dom;\n-\n-  return entry_bb;\n-}\n-\n /* Return true if BB1 is postdominating BB2 and BB1 is not a loop exit\n    bb.  The loop exit bb check is simple and does not cover all cases.  */\n \n@@ -96,7 +66,7 @@ is_non_loop_exit_postdominating (basic_block bb1, basic_block bb2)\n static inline basic_block\n find_control_equiv_block (basic_block bb)\n {\n-  basic_block pdom = find_pdom (bb);\n+  basic_block pdom = get_immediate_dominator (CDI_POST_DOMINATORS, bb);\n \n   /* Skip the postdominating bb that is also a loop exit.  */\n   if (!is_non_loop_exit_postdominating (pdom, bb))\n@@ -1167,7 +1137,7 @@ compute_control_dep_chain (basic_block dom_bb, const_basic_block dep_bb,\n \t      break;\n \t    }\n \n-\t  cd_bb = find_pdom (cd_bb);\n+\t  cd_bb = get_immediate_dominator (CDI_POST_DOMINATORS, cd_bb);\n \t  post_dom_check++;\n \t  if (cd_bb == EXIT_BLOCK_PTR_FOR_FN (cfun)\n \t      || post_dom_check > MAX_POSTDOM_CHECK)\n@@ -1788,7 +1758,7 @@ predicate::init_from_phi_def (gphi *phi)\n \n   basic_block phi_bb = gimple_bb (phi);\n   /* Find the closest dominating bb to be the control dependence root.  */\n-  basic_block cd_root = find_dom (phi_bb);\n+  basic_block cd_root = get_immediate_dominator (CDI_DOMINATORS, phi_bb);\n   if (!cd_root)\n     return false;\n "}]}