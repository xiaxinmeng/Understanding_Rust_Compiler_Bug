{"sha": "f1e888aea0089c38d73de22e2ad79e40d3e65da8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFlODg4YWVhMDA4OWMzOGQ3M2RlMjJlMmFkNzllNDBkM2U2NWRhOA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2002-04-16T02:29:22Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2002-04-16T02:29:22Z"}, "message": "[multiple changes]\n\n2002-04-16  Paolo Carlini <pcarlini@unitus.it>\n        * testsuite/24_iterators/rel_ops.cc: New test.\n\n2002-04-16  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n\n        * include/bits/type_traits.h (__normal_iterator): Declare in\n        __gnu_cxx.  Adjust use at global namespace.\n        * include/bits/stl_iterator.h (__normal_iterator): Move\n        definition\n        into __gnu_cxx::. Add more operator overloads.  Tidy existing\n        ones.\n        * include/bits/basic_string.h (basic_string): Adjust use of\n        __normal_iterator.\n        * include/bits/stl_vector.h (_Alloc>): Likewise.\n        * src/concept-inst.cc (__gnu_cxx): __normal_iterator<> is now\n        here.\n        * src/string-inst.cc (operator==): Instantiate in __gnu_cxx.\n\nFrom-SVN: r52348", "tree": {"sha": "7e3308a550a748ba7a7d885829b0372740682565", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e3308a550a748ba7a7d885829b0372740682565"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1e888aea0089c38d73de22e2ad79e40d3e65da8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1e888aea0089c38d73de22e2ad79e40d3e65da8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1e888aea0089c38d73de22e2ad79e40d3e65da8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1e888aea0089c38d73de22e2ad79e40d3e65da8/comments", "author": null, "committer": null, "parents": [{"sha": "902c431d489932297b7e2467790f324914820854", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/902c431d489932297b7e2467790f324914820854", "html_url": "https://github.com/Rust-GCC/gccrs/commit/902c431d489932297b7e2467790f324914820854"}], "stats": {"total": 171, "additions": 145, "deletions": 26}, "files": [{"sha": "632ea3d5469f7a25880ca9d8822bbfc5cbef6396", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e888aea0089c38d73de22e2ad79e40d3e65da8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e888aea0089c38d73de22e2ad79e40d3e65da8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f1e888aea0089c38d73de22e2ad79e40d3e65da8", "patch": "@@ -1,3 +1,18 @@\n+2002-04-16  Paolo Carlini <pcarlini@unitus.it>\n+ \t* testsuite/24_iterators/rel_ops.cc: New test.\n+\t\n+2002-04-16  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n+\n+\t* include/bits/type_traits.h (__normal_iterator): Declare in\n+\t__gnu_cxx.  Adjust use at global namespace.\n+\t* include/bits/stl_iterator.h (__normal_iterator): Move definition\n+\tinto __gnu_cxx::. Add more operator overloads.  Tidy existing ones.\n+\t* include/bits/basic_string.h (basic_string): Adjust use of\n+\t__normal_iterator.\n+\t* include/bits/stl_vector.h (_Alloc>): Likewise.\n+\t* src/concept-inst.cc (__gnu_cxx): __normal_iterator<> is now here.\n+\t* src/string-inst.cc (operator==): Instantiate in __gnu_cxx.\n+\n 2002-04-15  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/4164"}, {"sha": "ab2360f77d96ca0fe3505608c1d6d55dd41b4053", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e888aea0089c38d73de22e2ad79e40d3e65da8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e888aea0089c38d73de22e2ad79e40d3e65da8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=f1e888aea0089c38d73de22e2ad79e40d3e65da8", "patch": "@@ -99,8 +99,9 @@ namespace std\n       typedef typename _Alloc::const_reference \t\t    const_reference;\n       typedef typename _Alloc::pointer \t\t\t    pointer;\n       typedef typename _Alloc::const_pointer \t   \t    const_pointer;\n-      typedef __normal_iterator<pointer, basic_string> \t    iterator;\n-      typedef __normal_iterator<const_pointer, basic_string> const_iterator;\n+      typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;\n+      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>\n+                                                            const_iterator;\n       typedef reverse_iterator<const_iterator> \tconst_reverse_iterator;\n       typedef reverse_iterator<iterator> \t\t    reverse_iterator;\n     "}, {"sha": "d8a6d8ca374ae5b5b91b4973ab7628b3b699e9b8", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 55, "deletions": 6, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e888aea0089c38d73de22e2ad79e40d3e65da8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e888aea0089c38d73de22e2ad79e40d3e65da8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=f1e888aea0089c38d73de22e2ad79e40d3e65da8", "patch": "@@ -548,14 +548,19 @@ namespace std\n       return insert_iterator<_Container>(__x, \n \t\t\t\t\t typename _Container::iterator(__i));\n     }\n-  \n+} // namespace std\n+\n+namespace __gnu_cxx\n+{  \n   // This iterator adapter is 'normal' in the sense that it does not\n   // change the semantics of any of the operators of its iterator\n   // parameter.  Its primary purpose is to convert an iterator that is\n   // not a class, e.g. a pointer, into an iterator that is a class.\n   // The _Container parameter exists solely so that different containers\n   // using this template can instantiate different types, even if the\n   // _Iterator parameter is the same.\n+  using std::iterator_traits;\n+  using std::iterator;\n   template<typename _Iterator, typename _Container>\n     class __normal_iterator\n       : public iterator<typename iterator_traits<_Iterator>::iterator_category,\n@@ -632,18 +637,38 @@ namespace std\n       base() const { return _M_current; }\n     };\n \n+  // Note: In what follows, the left- and right-hand-side iterators are\n+  // allowed to vary in types (conceptually in cv-qualification) so that\n+  // comparaison between cv-qualified and non-cv-qualified iterators be\n+  // valid.  However, the greedy and unfriendly operators in std::rel_ops\n+  // will make overload resolution ambiguous (when in scope) if we don't\n+  // provide overloads whose operands are of the same type.  Can someone\n+  // remind me what generic programming is about? -- Gaby\n+  \n   // Forward iterator requirements\n   template<typename _IteratorL, typename _IteratorR, typename _Container>\n   inline bool\n   operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,\n \t     const __normal_iterator<_IteratorR, _Container>& __rhs)\n   { return __lhs.base() == __rhs.base(); }\n \n+  template<typename _Iterator, typename _Container>\n+  inline bool\n+  operator==(const __normal_iterator<_Iterator, _Container>& __lhs,\n+             const __normal_iterator<_Iterator, _Container>& __rhs)\n+  { return __lhs.base() == __rhs.base(); }\n+\n   template<typename _IteratorL, typename _IteratorR, typename _Container>\n   inline bool\n   operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n \t     const __normal_iterator<_IteratorR, _Container>& __rhs)\n-  { return !(__lhs == __rhs); }\n+  { return __lhs.base() != __rhs.base(); }\n+\n+  template<typename _Iterator, typename _Container>\n+  inline bool\n+  operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,\n+             const __normal_iterator<_Iterator, _Container>& __rhs)\n+  { return __lhs.base() != __rhs.base(); }\n \n   // Random access iterator requirements\n   template<typename _IteratorL, typename _IteratorR, typename _Container>\n@@ -652,30 +677,54 @@ namespace std\n \t    const __normal_iterator<_IteratorR, _Container>& __rhs)\n   { return __lhs.base() < __rhs.base(); }\n \n+  template<typename _Iterator, typename _Container>\n+  inline bool\n+  operator<(const __normal_iterator<_Iterator, _Container>& __lhs,\n+             const __normal_iterator<_Iterator, _Container>& __rhs)\n+  { return __lhs.base() < __rhs.base(); }\n+\n   template<typename _IteratorL, typename _IteratorR, typename _Container>\n   inline bool\n   operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,\n \t    const __normal_iterator<_IteratorR, _Container>& __rhs)\n-  { return __rhs < __lhs; }\n+  { return __lhs.base() > __rhs.base(); }\n+\n+  template<typename _Iterator, typename _Container>\n+  inline bool\n+  operator>(const __normal_iterator<_Iterator, _Container>& __lhs,\n+\t    const __normal_iterator<_Iterator, _Container>& __rhs)\n+  { return __lhs.base() > __rhs.base(); }\n \n   template<typename _IteratorL, typename _IteratorR, typename _Container>\n   inline bool\n   operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n \t     const __normal_iterator<_IteratorR, _Container>& __rhs)\n-  { return !(__rhs < __lhs); }\n+  { return __lhs.base() <= __rhs.base(); }\n+\n+  template<typename _Iterator, typename _Container>\n+  inline bool\n+  operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,\n+\t     const __normal_iterator<_Iterator, _Container>& __rhs)\n+  { return __lhs.base() <= __rhs.base(); }\n \n   template<typename _IteratorL, typename _IteratorR, typename _Container>\n   inline bool\n   operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n \t     const __normal_iterator<_IteratorR, _Container>& __rhs)\n-  { return !(__lhs < __rhs); }\n+  { return __lhs.base() >= __rhs.base(); }\n+\n+  template<typename _Iterator, typename _Container>\n+  inline bool\n+  operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,\n+\t     const __normal_iterator<_Iterator, _Container>& __rhs)\n+  { return __lhs.base() >= __rhs.base(); }\n \n   template<typename _Iterator, typename _Container>\n   inline __normal_iterator<_Iterator, _Container>\n   operator+(typename __normal_iterator<_Iterator, _Container>::difference_type __n,\n \t    const __normal_iterator<_Iterator, _Container>& __i)\n   { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }\n-} // namespace std\n+} // namespace __gnu_cxx\n \n #endif \n "}, {"sha": "5e2ea54d9135dbbee79033a61de108f5a42cc93d", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e888aea0089c38d73de22e2ad79e40d3e65da8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e888aea0089c38d73de22e2ad79e40d3e65da8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=f1e888aea0089c38d73de22e2ad79e40d3e65da8", "patch": "@@ -175,8 +175,9 @@ class vector : protected _Vector_base<_Tp, _Alloc>\n   typedef _Tp \t\t\t\t\t\tvalue_type;\n   typedef value_type* \t\t\t\t\tpointer;\n   typedef const value_type* \t\t\t\tconst_pointer;\n-  typedef __normal_iterator<pointer, vector_type> \titerator;\n-  typedef __normal_iterator<const_pointer, vector_type> const_iterator;\n+  typedef __gnu_cxx::__normal_iterator<pointer, vector_type> \titerator;\n+  typedef __gnu_cxx::__normal_iterator<const_pointer, vector_type>\n+                                                        const_iterator;\n   typedef value_type& \t\t\t\t\treference;\n   typedef const value_type& \t\t\t\tconst_reference;\n   typedef size_t \t\t\t\t\tsize_type;"}, {"sha": "61bc436927583d702cb48744a61e792e042fe256", "filename": "libstdc++-v3/include/bits/type_traits.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e888aea0089c38d73de22e2ad79e40d3e65da8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ftype_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e888aea0089c38d73de22e2ad79e40d3e65da8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ftype_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ftype_traits.h?ref=f1e888aea0089c38d73de22e2ad79e40d3e65da8", "patch": "@@ -322,13 +322,13 @@ template<typename _Tp> struct _Is_normal_iterator {\n };\n \n // Forward declaration hack, should really include this from somewhere.\n-namespace std \n+namespace __gnu_cxx\n {\n   template<typename _Iterator, typename _Container> class __normal_iterator;\n }\n \n template<typename _Iterator, typename _Container>\n-struct _Is_normal_iterator< std::__normal_iterator<_Iterator, _Container> > {\n+struct _Is_normal_iterator< __gnu_cxx::__normal_iterator<_Iterator, _Container> > {\n    typedef __true_type _Normal;\n };\n "}, {"sha": "a467a810c81b9f7fec7d697b025e49393fea7ac7", "filename": "libstdc++-v3/src/concept-inst.cc", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e888aea0089c38d73de22e2ad79e40d3e65da8/libstdc%2B%2B-v3%2Fsrc%2Fconcept-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e888aea0089c38d73de22e2ad79e40d3e65da8/libstdc%2B%2B-v3%2Fsrc%2Fconcept-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fconcept-inst.cc?ref=f1e888aea0089c38d73de22e2ad79e40d3e65da8", "patch": "@@ -50,11 +50,11 @@ namespace __gnu_cxx\n   template void __aux_require_boolean_expr<bool>(bool const&);\n \n   _Instantiate(_BidirectionalIteratorConcept<\n-    std::__normal_iterator< std::locale::facet**,\n+    __normal_iterator< std::locale::facet**,\n     std::vector<std::locale::facet*,std::allocator<std::locale::facet*> > > > );\n \n   _Instantiate(_BidirectionalIteratorConcept<\n-    std::__normal_iterator< unsigned*,\n+    __normal_iterator< unsigned*,\n     std::vector<unsigned, std::allocator<unsigned> > > > );\n \n   _Instantiate(_ConvertibleConcept<std::locale::facet*, std::locale::facet*> );\n@@ -68,15 +68,15 @@ namespace __gnu_cxx\n   _Instantiate(_InputIteratorConcept<std::locale::facet**> );\n \n   _Instantiate(_InputIteratorConcept<\n-    std::__normal_iterator< std::locale::facet* const*,\n+    __normal_iterator< std::locale::facet* const*,\n     std::vector<std::locale::facet*,std::allocator<std::locale::facet*> > > > );\n \n   _Instantiate(_InputIteratorConcept<\n-    std::__normal_iterator< std::locale::facet**,\n+    __normal_iterator< std::locale::facet**,\n     std::vector<std::locale::facet*,std::allocator<std::locale::facet*> > > > );\n \n   _Instantiate(_InputIteratorConcept<\n-    std::__normal_iterator< unsigned*,\n+    __normal_iterator< unsigned*,\n     std::vector<unsigned, std::allocator<unsigned> > > > );\n \n #ifdef _GLIBCPP_USE_WCHAR_T\n@@ -98,26 +98,26 @@ namespace __gnu_cxx\n   _Instantiate(_LessThanComparableConcept<unsigned> );\n \n   _Instantiate(_Mutable_BidirectionalIteratorConcept<\n-    std::__normal_iterator< std::locale::facet**,\n+    __normal_iterator< std::locale::facet**,\n     std::vector<std::locale::facet*,std::allocator<std::locale::facet*> > > > );\n \n   _Instantiate(_Mutable_BidirectionalIteratorConcept<\n-    std::__normal_iterator< unsigned*,\n+    __normal_iterator< unsigned*,\n     std::vector<unsigned, std::allocator<unsigned> > > > );\n \n   _Instantiate(_Mutable_ForwardIteratorConcept<\n-    std::__normal_iterator< std::locale::facet**,\n+    __normal_iterator< std::locale::facet**,\n     std::vector<std::locale::facet*,std::allocator<std::locale::facet*> > > > );\n \n   _Instantiate(_OutputIteratorConcept<\n     std::locale::facet**, std::locale::facet*> );\n \n   _Instantiate(_OutputIteratorConcept<\n-    std::__normal_iterator< std::locale::facet**,\n+    __normal_iterator< std::locale::facet**,\n       std::vector<std::locale::facet*, std::allocator<std::locale::facet* > > >,\n     std::locale::facet* > );\n \n-  _Instantiate(_OutputIteratorConcept<std::__normal_iterator<\n+  _Instantiate(_OutputIteratorConcept<__normal_iterator<\n     unsigned*, std::vector<unsigned, std::allocator<unsigned> > >, unsigned> );\n \n   _Instantiate(_OutputIteratorConcept<std::ostreambuf_iterator<\n@@ -133,19 +133,19 @@ namespace __gnu_cxx\n   _Instantiate(_RandomAccessIteratorConcept<char const*> );\n \n   _Instantiate(_RandomAccessIteratorConcept<\n-    std::__normal_iterator<char const*, std::string> > );\n+    __normal_iterator<char const*, std::string> > );\n \n   _Instantiate(_RandomAccessIteratorConcept<\n-    std::__normal_iterator<char*, std::string> > );\n+    __normal_iterator<char*, std::string> > );\n \n #ifdef _GLIBCPP_USE_WCHAR_T\n   _Instantiate(_RandomAccessIteratorConcept<\n-    std::__normal_iterator<wchar_t const*,\n+    __normal_iterator<wchar_t const*,\n     std::basic_string<wchar_t, std::char_traits<wchar_t>,\n                                std::allocator<wchar_t> > > > );\n \n   _Instantiate(_RandomAccessIteratorConcept<\n-    std::__normal_iterator<wchar_t*,\n+    __normal_iterator<wchar_t*,\n     std::basic_string<wchar_t, std::char_traits<wchar_t>,\n                                std::allocator<wchar_t> > > > );\n "}, {"sha": "e812aa0cfc28d3c2fa98b42b74120bd611ace1a7", "filename": "libstdc++-v3/src/string-inst.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e888aea0089c38d73de22e2ad79e40d3e65da8/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e888aea0089c38d73de22e2ad79e40d3e65da8/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc?ref=f1e888aea0089c38d73de22e2ad79e40d3e65da8", "patch": "@@ -48,9 +48,17 @@ namespace std\n   template class basic_string<C>;\n   template S operator+(const C*, const S&);\n   template S operator+(C, const S&);\n+} // namespace std\n+\n+namespace __gnu_cxx\n+{\n+  using std::S;\n   template bool operator==(const S::iterator&, const S::iterator&);\n   template bool operator==(const S::const_iterator&, const S::const_iterator&);\n+}\n \n+namespace std\n+{\n   // Only one template keyword allowed here. \n   // See core issue #46 (NAD)\n   // http://anubis.dkuug.dk/jtc1/sc22/wg21/docs/cwg_closed.html#46"}, {"sha": "2c8539677206d36da350dc001313fdc33a32cb58", "filename": "libstdc++-v3/testsuite/24_iterators/rel_ops.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e888aea0089c38d73de22e2ad79e40d3e65da8/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frel_ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e888aea0089c38d73de22e2ad79e40d3e65da8/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frel_ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frel_ops.cc?ref=f1e888aea0089c38d73de22e2ad79e40d3e65da8", "patch": "@@ -0,0 +1,45 @@\n+// 2002-04-13  Paolo Carlini  <pcarlini@unitus.it>\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.2.1 Operators\n+\n+#include <utility>\n+#include <vector>\n+\n+using namespace std::rel_ops;\n+\n+// libstdc++/3628\n+void test01()\n+{\n+  std::vector<int> v;\n+  std::vector<int>::iterator vi;\n+\n+  vi != v.begin();\n+  vi > v.begin();\n+  vi <= v.begin();\n+  vi >= v.begin();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}]}