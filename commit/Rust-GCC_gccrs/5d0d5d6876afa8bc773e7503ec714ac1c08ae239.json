{"sha": "5d0d5d6876afa8bc773e7503ec714ac1c08ae239", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQwZDVkNjg3NmFmYThiYzc3M2U3NTAzZWM3MTRhYzFjMDhhZTIzOQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-02-22T17:35:29Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-02-22T17:35:29Z"}, "message": "PR tree-optimization/84480 - bogus -Wstringop-truncation despite assignment with an inlined string literal\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/84480\n\t* gimple-fold.c (gimple_fold_builtin_strcpy): Move warnings\n\tto maybe_diag_stxncpy_trunc.  Call it.\n\t* tree-ssa-strlen.c (maybe_diag_stxncpy_trunc): Integrate warnings\n\tfrom gimple_fold_builtin_strcpy.  Print inlining stack.\n\t(handle_builtin_stxncpy): Print inlining stack.\n\t* tree-ssa-strlen.h (maybe_diag_stxncpy_trunc): Declare.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/84480\n\t* c-c++-common/Wstringop-truncation.c: Adjust text of expected warnings.\n\t* g++.dg/warn/Wstringop-truncation-1.C: New test.\n\nFrom-SVN: r257910", "tree": {"sha": "6ddd58eb12d9e64c3ae7a6ca7afaab4501d2b47d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ddd58eb12d9e64c3ae7a6ca7afaab4501d2b47d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d0d5d6876afa8bc773e7503ec714ac1c08ae239", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d0d5d6876afa8bc773e7503ec714ac1c08ae239", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d0d5d6876afa8bc773e7503ec714ac1c08ae239", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d0d5d6876afa8bc773e7503ec714ac1c08ae239/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "73b8b82295fb286c2d5b01c200fcd6732a96c2a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73b8b82295fb286c2d5b01c200fcd6732a96c2a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73b8b82295fb286c2d5b01c200fcd6732a96c2a8"}], "stats": {"total": 282, "additions": 220, "deletions": 62}, "files": [{"sha": "9e737edec021dc21378996c3bed3111c9e0d1ea6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d0d5d6876afa8bc773e7503ec714ac1c08ae239/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d0d5d6876afa8bc773e7503ec714ac1c08ae239/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d0d5d6876afa8bc773e7503ec714ac1c08ae239", "patch": "@@ -1,3 +1,13 @@\n+2018-02-22  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/84480\n+\t* gimple-fold.c (gimple_fold_builtin_strcpy): Move warnings\n+\tto maybe_diag_stxncpy_trunc.  Call it.\n+\t* tree-ssa-strlen.c (maybe_diag_stxncpy_trunc): Integrate warnings\n+\tfrom gimple_fold_builtin_strcpy.  Print inlining stack.\n+\t(handle_builtin_stxncpy): Print inlining stack.\n+\t* tree-ssa-strlen.h (maybe_diag_stxncpy_trunc): Declare.\n+\n 2018-02-22  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/84176"}, {"sha": "8257873dd20ce40cfd04ab1834df37b419d3e28a", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 3, "deletions": 31, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d0d5d6876afa8bc773e7503ec714ac1c08ae239/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d0d5d6876afa8bc773e7503ec714ac1c08ae239/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=5d0d5d6876afa8bc773e7503ec714ac1c08ae239", "patch": "@@ -65,6 +65,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"intl.h\"\n #include \"calls.h\"\n #include \"tree-vector-builder.h\"\n+#include \"tree-ssa-strlen.h\"\n \n /* Return true when DECL can be referenced from current unit.\n    FROM_DECL (if non-null) specify constructor of variable DECL was taken from.\n@@ -1710,37 +1711,8 @@ gimple_fold_builtin_strncpy (gimple_stmt_iterator *gsi,\n   if (tree_int_cst_lt (ssize, len))\n     return false;\n \n-  if (!nonstring)\n-    {\n-      if (tree_int_cst_lt (len, slen))\n-\t{\n-\t  tree fndecl = gimple_call_fndecl (stmt);\n-\t  gcall *call = as_a <gcall *> (stmt);\n-\n-\t  warning_at (loc, OPT_Wstringop_truncation,\n-\t\t      (tree_int_cst_equal (size_one_node, len)\n-\t\t       ? G_(\"%G%qD output truncated copying %E byte \"\n-\t\t\t    \"from a string of length %E\")\n-\t\t       : G_(\"%G%qD output truncated copying %E bytes \"\n-\t\t\t    \"from a string of length %E\")),\n-\t\t      call, fndecl, len, slen);\n-\t}\n-      else if (tree_int_cst_equal (len, slen))\n-\t{\n-\t  tree fndecl = gimple_call_fndecl (stmt);\n-\t  gcall *call = as_a <gcall *> (stmt);\n-\n-\t  warning_at (loc, OPT_Wstringop_truncation,\n-\t\t      (tree_int_cst_equal (size_one_node, len)\n-\t\t       ? G_(\"%G%qD output truncated before terminating nul \"\n-\t\t\t    \"copying %E byte from a string of the same \"\n-\t\t\t    \"length\")\n-\t\t       : G_(\"%G%qD output truncated before terminating nul \"\n-\t\t\t    \"copying %E bytes from a string of the same \"\n-\t\t\t    \"length\")),\n-\t\t      call, fndecl, len);\n-\t}\n-    }\n+  /* Diagnose truncation that leaves the copy unterminated.  */\n+  maybe_diag_stxncpy_trunc (*gsi, src, len);\n \n   /* OK transform into builtin memcpy.  */\n   tree fn = builtin_decl_implicit (BUILT_IN_MEMCPY);"}, {"sha": "e58ed9be1c6950f3fb84eb8c7b01beeb3a113620", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d0d5d6876afa8bc773e7503ec714ac1c08ae239/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d0d5d6876afa8bc773e7503ec714ac1c08ae239/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5d0d5d6876afa8bc773e7503ec714ac1c08ae239", "patch": "@@ -1,3 +1,9 @@\n+2018-02-22  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/84480\n+\t* c-c++-common/Wstringop-truncation.c: Adjust text of expected warnings.\n+\t* g++.dg/warn/Wstringop-truncation-1.C: New test.\n+\n 2018-02-22  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/84176"}, {"sha": "bd52091550262e3a49950707fec3c079d226067a", "filename": "gcc/testsuite/c-c++-common/Wstringop-truncation.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d0d5d6876afa8bc773e7503ec714ac1c08ae239/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWstringop-truncation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d0d5d6876afa8bc773e7503ec714ac1c08ae239/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWstringop-truncation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWstringop-truncation.c?ref=5d0d5d6876afa8bc773e7503ec714ac1c08ae239", "patch": "@@ -188,7 +188,7 @@ void test_strncpy_ptr (char *d, const char* s, const char *t, int i)\n   CPY (d, CHOOSE (s, t), 2);\n \n   CPY (d, CHOOSE (\"\", \"123\"), 1);   /* { dg-warning \".strncpy\\[^\\n\\r\\]* output may be truncated copying 1 byte from a string of length 3\" } */\n-  CPY (d, CHOOSE (\"1\", \"123\"), 1);  /* { dg-warning \".strncpy\\[^\\n\\r\\]* output truncated copying 1 byte from a string of length 1\" } */\n+  CPY (d, CHOOSE (\"1\", \"123\"), 1);  /* { dg-warning \".strncpy\\[^\\n\\r\\]* output truncated before terminating nul copying 1 byte from a string of the same length\" } */\n   CPY (d, CHOOSE (\"12\", \"123\"), 1); /* { dg-warning \".strncpy\\[^\\n\\r\\]* output truncated copying 1 byte from a string of length 2\" } */\n   CPY (d, CHOOSE (\"123\", \"12\"), 1); /* { dg-warning \".strncpy\\[^\\n\\r\\]* output truncated copying 1 byte from a string of length 2\" } */\n \n@@ -331,7 +331,7 @@ void test_strncpy_array (Dest *pd, int i, const char* s)\n     /* This might be better written using memcpy() but it's safe so\n        it probably shouldn't be diagnosed.  It currently triggers\n        a warning because of bug 81704.  */\n-    strncpy (dst7, \"0123456\", sizeof dst7);   /* { dg-bogus \"truncated\" \"bug 81704\" { xfail *-*-* } } */\n+    strncpy (dst7, \"0123456\", sizeof dst7);   /* { dg-bogus \"\\\\\\[-Wstringop-truncation]\" \"bug 81704\" { xfail *-*-* } } */\n     dst7[sizeof dst7 - 1] = '\\0';\n     sink (dst7);\n   }\n@@ -350,7 +350,7 @@ void test_strncpy_array (Dest *pd, int i, const char* s)\n   }\n \n   {\n-    strncpy (pd->a5, \"01234\", sizeof pd->a5);   /* { dg-bogus \"truncated\" \"bug 81704\" { xfail *-*-* } } */\n+    strncpy (pd->a5, \"01234\", sizeof pd->a5);   /* { dg-bogus \"\\\\\\[-Wstringop-truncation]\" \"bug 81704\" { xfail *-*-* } } */\n     pd->a5[sizeof pd->a5 - 1] = '\\0';\n     sink (pd);\n   }"}, {"sha": "a502b78b711eb7631e9004d35e96423a28b26f2a", "filename": "gcc/testsuite/g++.dg/warn/Wstringop-truncation-1.C", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d0d5d6876afa8bc773e7503ec714ac1c08ae239/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstringop-truncation-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d0d5d6876afa8bc773e7503ec714ac1c08ae239/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstringop-truncation-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstringop-truncation-1.C?ref=5d0d5d6876afa8bc773e7503ec714ac1c08ae239", "patch": "@@ -0,0 +1,126 @@\n+/* PR/tree-optimization/84480 - bogus -Wstringop-truncation despite\n+   assignment with an inlined string literal\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wstringop-truncation\" }  */\n+\n+#include <string.h>\n+\n+template <size_t N>\n+class GoodString\n+{\n+public:\n+  GoodString (const char *s, size_t slen = N)\n+  {\n+    if (slen > N)\n+      slen = N;\n+\n+    strncpy (str, s, slen);\n+\n+    str[slen] = '\\0';\n+  }\n+\n+private:\n+  char str[N + 1];\n+};\n+\n+void sink (void*);\n+\n+void good_nowarn_size_m2 ()\n+{\n+  GoodString<3> str (\"12\");\n+  sink (&str);\n+}\n+\n+void good_nowarn_size_m1 ()\n+{\n+  GoodString<3> str (\"123\");    // { dg-bogus \"\\\\\\[-Wstringop-truncation]\" }\n+  sink (&str);\n+}\n+\n+void good_nowarn_size_m1_var (const char* s)\n+{\n+  GoodString<3> str (s);        // { dg-bogus \"\\\\\\[-Wstringop-truncation]\" }\n+  sink (&str);\n+}\n+\n+void call_good_nowarn_size_m1_var ()\n+{\n+  good_nowarn_size_m1_var (\"456\");\n+}\n+\n+\n+template <size_t N>\n+class BadString1\n+{\n+public:\n+  BadString1 (const char *s, size_t slen = N)\n+  {\n+    if (slen > N)\n+      slen = N;\n+\n+    strncpy (str, s, slen);\n+  }\n+\n+private:\n+  char str[N + 1];\n+};\n+\n+void bad1_nowarn_size_m2 ()\n+{\n+  BadString1<3> str (\"12\");\n+  sink (&str);\n+}\n+\n+\n+template <size_t N>\n+class BadString2\n+{\n+public:\n+  BadString2 (const char *s, size_t slen = N)\n+  {\n+    if (slen > N)\n+      slen = N;\n+\n+    strncpy (str, s, slen);     // { dg-warning \"\\\\\\[-Wstringop-truncation]\" }\n+  }\n+\n+private:\n+  char str[N + 1];\n+};\n+\n+void bad2_warn_size_m1 ()\n+{\n+  BadString2<3> str (\"123\");\n+  sink (&str);\n+}\n+\n+// { dg-message \"inlined from .void bad2_warn_size_m1.\" \"\" { target *-*-* } 0 }\n+\n+template <size_t N>\n+class BadString3\n+{\n+public:\n+  BadString3 (const char *s, size_t slen = N)\n+  {\n+    if (slen > N)\n+      slen = N;\n+\n+    strncpy (str, s, slen);     // { dg-warning \"\\\\\\[-Wstringop-truncation]\" }\n+  }\n+\n+private:\n+  char str[N + 1];\n+};\n+\n+void bad3_warn_size_m1_var (const char *s)\n+{\n+  BadString3<3> str (s);\n+  sink (&str);\n+}\n+\n+void call_bad3_warn_size_m1_var ()\n+{\n+  bad3_warn_size_m1_var (\"456\");\n+}\n+\n+// { dg-message \"inlined from .void call_bad3_warn_size_m1_var.\" \"\" { target *-*-* } 0 }"}, {"sha": "71ed0ff1b4599ae7412f3aafa80197bddcc6c134", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 46, "deletions": 28, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d0d5d6876afa8bc773e7503ec714ac1c08ae239/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d0d5d6876afa8bc773e7503ec714ac1c08ae239/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=5d0d5d6876afa8bc773e7503ec714ac1c08ae239", "patch": "@@ -44,6 +44,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"domwalk.h\"\n #include \"tree-ssa-alias.h\"\n #include \"tree-ssa-propagate.h\"\n+#include \"tree-ssa-strlen.h\"\n #include \"params.h\"\n #include \"ipa-chkp.h\"\n #include \"tree-hash-traits.h\"\n@@ -1780,11 +1781,12 @@ is_strlen_related_p (tree src, tree len)\n   return false;\n }\n \n-/* A helper of handle_builtin_stxncpy.  Check to see if the specified\n-   bound is a) equal to the size of the destination DST and if so, b)\n-   if it's immediately followed by DST[CNT - 1] = '\\0'.  If a) holds\n-   and b) does not, warn.  Otherwise, do nothing.  Return true if\n-   diagnostic has been issued.\n+/* Called by handle_builtin_stxncpy and by gimple_fold_builtin_strncpy\n+   in gimple-fold.c.\n+   Check to see if the specified bound is a) equal to the size of\n+   the destination DST and if so, b) if it's immediately followed by\n+   DST[CNT - 1] = '\\0'.  If a) holds and b) does not, warn.  Otherwise,\n+   do nothing.  Return true if diagnostic has been issued.\n \n    The purpose is to diagnose calls to strncpy and stpncpy that do\n    not nul-terminate the copy while allowing for the idiom where\n@@ -1795,7 +1797,7 @@ is_strlen_related_p (tree src, tree len)\n      a[sizeof a - 1] = '\\0';\n */\n \n-static bool\n+bool\n maybe_diag_stxncpy_trunc (gimple_stmt_iterator gsi, tree src, tree cnt)\n {\n   gimple *stmt = gsi_stmt (gsi);\n@@ -1831,8 +1833,11 @@ maybe_diag_stxncpy_trunc (gimple_stmt_iterator gsi, tree src, tree cnt)\n     return false;\n \n   /* Negative value is the constant string length.  If it's less than\n-     the lower bound there is no truncation.  */\n-  int sidx = get_stridx (src);\n+     the lower bound there is no truncation.  Avoid calling get_stridx()\n+     when ssa_ver_to_stridx is empty.  That implies the caller isn't\n+     running under the control of this pass and ssa_ver_to_stridx hasn't\n+     been created yet.  */\n+  int sidx = ssa_ver_to_stridx.length () ? get_stridx (src) : 0;\n   if (sidx < 0 && wi::gtu_p (cntrange[0], ~sidx))\n     return false;\n \n@@ -1935,23 +1940,35 @@ maybe_diag_stxncpy_trunc (gimple_stmt_iterator gsi, tree src, tree cnt)\n \t  lenrange[0] = wi::shwi (0, prec);\n \t}\n \n-      if (wi::geu_p (lenrange[0], cntrange[1]))\n+      gcall *call = as_a <gcall *> (stmt);\n+\n+      if (lenrange[0] == cntrange[1] && cntrange[0] == cntrange[1])\n+\treturn warning_at (callloc, OPT_Wstringop_truncation,\n+\t\t\t   (integer_onep (cnt)\n+\t\t\t    ? G_(\"%G%qD output truncated before terminating \"\n+\t\t\t\t \"nul copying %E byte from a string of the \"\n+\t\t\t\t \"same length\")\n+\t\t\t    : G_(\"%G%qD output truncated before terminating nul \"\n+\t\t\t\t \"copying %E bytes from a string of the same \"\n+\t\t\t\t \"length\")),\n+\t\t\t   call, func, cnt);\n+      else if (wi::geu_p (lenrange[0], cntrange[1]))\n \t{\n \t  /* The shortest string is longer than the upper bound of\n \t     the count so the truncation is certain.  */\n \t  if (cntrange[0] == cntrange[1])\n \t    return warning_at (callloc, OPT_Wstringop_truncation,\n \t\t\t       integer_onep (cnt)\n-\t\t\t       ? G_(\"%qD output truncated copying %E byte \"\n+\t\t\t       ? G_(\"%G%qD output truncated copying %E byte \"\n \t\t\t\t    \"from a string of length %wu\")\n-\t\t\t       : G_(\"%qD output truncated copying %E bytes \"\n+\t\t\t       : G_(\"%G%qD output truncated copying %E bytes \"\n \t\t\t\t    \"from a string of length %wu\"),\n-\t\t\t       func, cnt, lenrange[0].to_uhwi ());\n+\t\t\t       call, func, cnt, lenrange[0].to_uhwi ());\n \n \t  return warning_at (callloc, OPT_Wstringop_truncation,\n-\t\t\t     \"%qD output truncated copying between %wu \"\n+\t\t\t     \"%G%qD output truncated copying between %wu \"\n \t\t\t     \"and %wu bytes from a string of length %wu\",\n-\t\t\t     func, cntrange[0].to_uhwi (),\n+\t\t\t     call, func, cntrange[0].to_uhwi (),\n \t\t\t     cntrange[1].to_uhwi (), lenrange[0].to_uhwi ());\n \t}\n       else if (wi::geu_p (lenrange[1], cntrange[1]))\n@@ -1961,16 +1978,16 @@ maybe_diag_stxncpy_trunc (gimple_stmt_iterator gsi, tree src, tree cnt)\n \t  if (cntrange[0] == cntrange[1])\n \t    return warning_at (callloc, OPT_Wstringop_truncation,\n \t\t\t       integer_onep (cnt)\n-\t\t\t       ? G_(\"%qD output may be truncated copying %E \"\n+\t\t\t       ? G_(\"%G%qD output may be truncated copying %E \"\n \t\t\t\t    \"byte from a string of length %wu\")\n-\t\t\t       : G_(\"%qD output may be truncated copying %E \"\n+\t\t\t       : G_(\"%G%qD output may be truncated copying %E \"\n \t\t\t\t    \"bytes from a string of length %wu\"),\n-\t\t\t       func, cnt, lenrange[1].to_uhwi ());\n+\t\t\t       call, func, cnt, lenrange[1].to_uhwi ());\n \n \t  return warning_at (callloc, OPT_Wstringop_truncation,\n-\t\t\t     \"%qD output may be truncated copying between %wu \"\n+\t\t\t     \"%G%qD output may be truncated copying between %wu \"\n \t\t\t     \"and %wu bytes from a string of length %wu\",\n-\t\t\t     func, cntrange[0].to_uhwi (),\n+\t\t\t     call, func, cntrange[0].to_uhwi (),\n \t\t\t     cntrange[1].to_uhwi (), lenrange[1].to_uhwi ());\n \t}\n \n@@ -1982,9 +1999,9 @@ maybe_diag_stxncpy_trunc (gimple_stmt_iterator gsi, tree src, tree cnt)\n \t     the lower bound of the specified count but shorter than the\n \t     upper bound the copy may (but need not) be truncated.  */\n \t  return warning_at (callloc, OPT_Wstringop_truncation,\n-\t\t\t     \"%qD output may be truncated copying between %wu \"\n-\t\t\t     \"and %wu bytes from a string of length %wu\",\n-\t\t\t     func, cntrange[0].to_uhwi (),\n+\t\t\t     \"%G%qD output may be truncated copying between \"\n+\t\t\t     \"%wu and %wu bytes from a string of length %wu\",\n+\t\t\t     call, func, cntrange[0].to_uhwi (),\n \t\t\t     cntrange[1].to_uhwi (), lenrange[0].to_uhwi ());\n \t}\n     }\n@@ -2003,8 +2020,8 @@ maybe_diag_stxncpy_trunc (gimple_stmt_iterator gsi, tree src, tree cnt)\n \n       if (cntrange[0] == cntrange[1])\n \treturn warning_at (callloc, OPT_Wstringop_truncation,\n-\t\t\t   \"%qD specified bound %E equals destination size\",\n-\t\t\t   func, cnt);\n+\t\t\t   \"%G%qD specified bound %E equals destination size\",\n+\t\t\t   as_a <gcall *> (stmt), func, cnt);\n     }\n \n   return false;\n@@ -2103,14 +2120,15 @@ handle_builtin_stxncpy (built_in_function, gimple_stmt_iterator *gsi)\n   if (sisrc == silen\n       && is_strlen_related_p (src, len)\n       && warning_at (callloc, OPT_Wstringop_truncation,\n-\t\t     \"%qD output truncated before terminating nul \"\n+\t\t     \"%G%qD output truncated before terminating nul \"\n \t\t     \"copying as many bytes from a string as its length\",\n-\t\t     func))\n+\t\t     as_a <gcall *>(stmt), func))\n     warned = true;\n   else if (silen && is_strlen_related_p (src, silen->ptr))\n     warned = warning_at (callloc, OPT_Wstringop_overflow_,\n-\t\t\t \"%qD specified bound depends on the length \"\n-\t\t\t \"of the source argument\", func);\n+\t\t\t \"%G%qD specified bound depends on the length \"\n+\t\t\t \"of the source argument\",\n+\t\t\t as_a <gcall *>(stmt), func);\n   if (warned)\n     {\n       location_t strlenloc = pss->second;"}, {"sha": "1399a7819eb7e4107be3ec49902f10f5911c28b1", "filename": "gcc/tree-ssa-strlen.h", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d0d5d6876afa8bc773e7503ec714ac1c08ae239/gcc%2Ftree-ssa-strlen.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d0d5d6876afa8bc773e7503ec714ac1c08ae239/gcc%2Ftree-ssa-strlen.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.h?ref=5d0d5d6876afa8bc773e7503ec714ac1c08ae239", "patch": "@@ -0,0 +1,26 @@\n+/* Declarations of tree-ssa-strlen API.\n+\n+   Copyright (C) 2018 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it under\n+   the terms of the GNU General Public License as published by the Free\n+   Software Foundation; either version 3, or (at your option) any later\n+   version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+   for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_TREE_SSA_STRLEN_H\n+#define GCC_TREE_SSA_STRLEN_H\n+\n+extern bool maybe_diag_stxncpy_trunc (gimple_stmt_iterator, tree, tree);\n+\n+#endif   // GCC_TREE_SSA_STRLEN_H"}]}