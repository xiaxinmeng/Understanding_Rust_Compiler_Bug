{"sha": "11b9c936bf663357c37c213a285ad44d5e530264", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFiOWM5MzZiZjY2MzM1N2MzN2MyMTNhMjg1YWQ0NGQ1ZTUzMDI2NA==", "commit": {"author": {"name": "Johannes Singler", "email": "singler@ira.uka.de", "date": "2009-09-16T11:02:15Z"}, "committer": {"name": "Johannes Singler", "email": "singler@gcc.gnu.org", "date": "2009-09-16T11:02:15Z"}, "message": "base.h (_PseudoSequenceIterator, [...]): Replace redundant _Self.\n\n2009-09-16  Johannes Singler  <singler@ira.uka.de>\n\n        * include/parallel/base.h (_PseudoSequenceIterator, _PseudoSequence):\n        Replace redundant _Self.\n        * include/parallel/iterator.h (_IteratorPair, _IteratorTriple):\n        Replace redundant _Self.\n        * include/parallel/algo.h: Correct accidental _Self in comments.\n        * include/parallel/losertree.h: Likewise.\n        * include/parallel/multiway_merge.h: Likewise.\n        * include/parallel/random_shuffle.h: Likewise.\n\nFrom-SVN: r151743", "tree": {"sha": "04f6ff7b1ed71556ddff51e7a66e723b614488ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04f6ff7b1ed71556ddff51e7a66e723b614488ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11b9c936bf663357c37c213a285ad44d5e530264", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11b9c936bf663357c37c213a285ad44d5e530264", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11b9c936bf663357c37c213a285ad44d5e530264", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11b9c936bf663357c37c213a285ad44d5e530264/comments", "author": null, "committer": null, "parents": [{"sha": "9da4af8c07fe1642837ad927c7e6773b579f17ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9da4af8c07fe1642837ad927c7e6773b579f17ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9da4af8c07fe1642837ad927c7e6773b579f17ef"}], "stats": {"total": 116, "additions": 59, "deletions": 57}, "files": [{"sha": "600e2a8f1b765586dda71c44ea605c0cd619f9bf", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b9c936bf663357c37c213a285ad44d5e530264/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b9c936bf663357c37c213a285ad44d5e530264/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=11b9c936bf663357c37c213a285ad44d5e530264", "patch": "@@ -1,3 +1,14 @@\n+2009-09-16  Johannes Singler  <singler@ira.uka.de>\n+\n+        * include/parallel/base.h (_PseudoSequenceIterator, _PseudoSequence):\n+        Replace redundant _Self.\n+        * include/parallel/iterator.h (_IteratorPair, _IteratorTriple):\n+        Replace redundant _Self.\n+        * include/parallel/algo.h: Correct accidental _Self in comments.\n+        * include/parallel/losertree.h: Likewise.\n+        * include/parallel/multiway_merge.h: Likewise.\n+        * include/parallel/random_shuffle.h: Likewise.\n+\n 2009-09-16  Johannes Singler  <singler@ira.uka.de>\n \n         * include/parallel/algobase.h: Uglify internal identifiers."}, {"sha": "cb0422156961adcb326de02523c0d07013a96e07", "filename": "libstdc++-v3/include/parallel/algo.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b9c936bf663357c37c213a285ad44d5e530264/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b9c936bf663357c37c213a285ad44d5e530264/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgo.h?ref=11b9c936bf663357c37c213a285ad44d5e530264", "patch": "@@ -224,7 +224,7 @@ namespace __parallel\n                   _BinaryPredicate __comp, __gnu_parallel::sequential_tag)\n   { return _GLIBCXX_STD_P::find_first_of(__begin1, __end1, __begin2, __end2, __comp); }\n \n-  // Sequential fallback for input iterator _Self\n+  // Sequential fallback for input iterator type\n   template<typename _IIter, typename _ForwardIterator,\n            typename _IteratorTag1, typename _IteratorTag2>\n     inline _IIter\n@@ -250,7 +250,7 @@ namespace __parallel\n                       <_ForwardIterator>(__begin2, __end2)).first;\n     }\n \n-  // Sequential fallback for input iterator _Self\n+  // Sequential fallback for input iterator type\n   template<typename _IIter, typename _ForwardIterator,\n            typename _BinaryPredicate, typename _IteratorTag1,\n            typename _IteratorTag2>"}, {"sha": "5edc213853d6d1acb050f060ee9661ce9a542609", "filename": "libstdc++-v3/include/parallel/base.h", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b9c936bf663357c37c213a285ad44d5e530264/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b9c936bf663357c37c213a285ad44d5e530264/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h?ref=11b9c936bf663357c37c213a285ad44d5e530264", "patch": "@@ -341,8 +341,6 @@ template<typename _Tp, typename _DifferenceTp>\n     typedef _DifferenceTp _DifferenceType;\n \n   private:\n-    typedef _PseudoSequenceIterator<_Tp, _DifferenceTp> _Self;\n-\n     const _Tp& _M_val;\n     _DifferenceType _M_pos;\n \n@@ -351,17 +349,17 @@ template<typename _Tp, typename _DifferenceTp>\n     : _M_val(_M_val), _M_pos(_M_pos) { }\n \n     // Pre-increment operator.\n-    _Self&\n+    _PseudoSequenceIterator&\n     operator++()\n     {\n       ++_M_pos;\n       return *this;\n     }\n \n     // Post-increment operator.\n-    const _Self\n+    const _PseudoSequenceIterator\n     operator++(int)\n-    { return _Self(_M_pos++); }\n+    { return _PseudoSequenceIterator(_M_pos++); }\n \n     const _Tp&\n     operator*() const\n@@ -372,15 +370,15 @@ template<typename _Tp, typename _DifferenceTp>\n     { return _M_val; }\n \n     bool\n-    operator==(const _Self& __i2)\n+    operator==(const _PseudoSequenceIterator& __i2)\n     { return _M_pos == __i2._M_pos; }\n \n     _DifferenceType\n-    operator!=(const _Self& __i2)\n+    operator!=(const _PseudoSequenceIterator& __i2)\n     { return _M_pos != __i2._M_pos; }\n \n     _DifferenceType\n-    operator-(const _Self& __i2)\n+    operator-(const _PseudoSequenceIterator& __i2)\n     { return _M_pos - __i2._M_pos; }\n   };\n \n@@ -393,8 +391,6 @@ template<typename _Tp, typename _DifferenceTp>\n template<typename _Tp, typename _DifferenceTp>\n   class _PseudoSequence\n   {\n-    typedef _PseudoSequence<_Tp, _DifferenceTp> _Self;\n-\n   public:\n     typedef _DifferenceTp _DifferenceType;\n "}, {"sha": "0b7cbf2e87642a6c4b2c0ec9899175962362649d", "filename": "libstdc++-v3/include/parallel/iterator.h", "status": "modified", "additions": 26, "deletions": 31, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b9c936bf663357c37c213a285ad44d5e530264/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fiterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b9c936bf663357c37c213a285ad44d5e530264/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fiterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fiterator.h?ref=11b9c936bf663357c37c213a285ad44d5e530264", "patch": "@@ -44,7 +44,6 @@ namespace __gnu_parallel\n     class _IteratorPair : public std::pair<_Iterator1, _Iterator2>\n     {\n     private:\n-      typedef _IteratorPair<_Iterator1, _Iterator2, _IteratorCategory> _Self;\n       typedef std::pair<_Iterator1, _Iterator2> _Base;\n \n     public:\n@@ -53,16 +52,16 @@ namespace __gnu_parallel\n \n       typedef std::iterator_traits<_Iterator1> _TraitsType;\n       typedef typename _TraitsType::difference_type difference_type;\n-      typedef _Self* pointer;\n-      typedef _Self& reference;\n+      typedef _IteratorPair* pointer;\n+      typedef _IteratorPair& reference;\n \n       _IteratorPair() { }\n \n       _IteratorPair(const _Iterator1& __first, const _Iterator2& __second) \n       : _Base(__first, __second) { }\n \n       // Pre-increment operator.\n-      _Self&\n+      _IteratorPair&\n       operator++()\n       {\n \t++_Base::first;\n@@ -71,12 +70,12 @@ namespace __gnu_parallel\n       }\n \n       // Post-increment operator.\n-      const _Self\n+      const _IteratorPair\n       operator++(int)\n-      { return _Self(_Base::first++, _Base::second++); }\n+      { return _IteratorPair(_Base::first++, _Base::second++); }\n \n       // Pre-decrement operator.\n-      _Self&\n+      _IteratorPair&\n       operator--()\n       {\n \t--_Base::first;\n@@ -85,28 +84,28 @@ namespace __gnu_parallel\n       }\n \n       // Post-decrement operator.\n-      const _Self\n+      const _IteratorPair\n       operator--(int)\n-      { return _Self(_Base::first--, _Base::second--); }\n+      { return _IteratorPair(_Base::first--, _Base::second--); }\n \n       // Type conversion.\n       operator _Iterator2() const\n       { return _Base::second; }\n \n-      _Self&\n-      operator=(const _Self& __other)\n+      _IteratorPair&\n+      operator=(const _IteratorPair& __other)\n       {\n \t_Base::first = __other.first;\n \t_Base::second = __other.second;\n \treturn *this;\n       }\n \n-      _Self\n+      _IteratorPair\n       operator+(difference_type __delta) const\n-      { return _Self(_Base::first + __delta, _Base::second + __delta); }\n+      { return _IteratorPair(_Base::first + __delta, _Base::second + __delta); }\n \n       difference_type\n-      operator-(const _Self& __other) const\n+      operator-(const _IteratorPair& __other) const\n       { return _Base::first - __other.first; }\n   };\n \n@@ -118,17 +117,13 @@ namespace __gnu_parallel\n \t   typename _IteratorCategory>\n     class _IteratorTriple\n     {\n-    private:\n-      typedef _IteratorTriple<_Iterator1, _Iterator2, _Iterator3,\n-\t\t\t      _IteratorCategory> _Self;\n-\n     public:\n       typedef _IteratorCategory iterator_category;\n       typedef void value_type;\n       typedef typename std::iterator_traits<_Iterator1>::difference_type\n                                                             difference_type;\n-      typedef _Self* pointer;\n-      typedef _Self& reference;\n+      typedef _IteratorTriple* pointer;\n+      typedef _IteratorTriple& reference;\n \n       _Iterator1 __first;\n       _Iterator2 __second;\n@@ -145,7 +140,7 @@ namespace __gnu_parallel\n       }\n \n       // Pre-increment operator.\n-      _Self&\n+      _IteratorTriple&\n       operator++()\n       {\n \t++__first;\n@@ -155,12 +150,12 @@ namespace __gnu_parallel\n       }\n \n       // Post-increment operator.\n-      const _Self\n+      const _IteratorTriple\n       operator++(int)\n-      { return _Self(__first++, __second++, __third++); }\n+      { return _IteratorTriple(__first++, __second++, __third++); }\n \n       // Pre-decrement operator.\n-      _Self&\n+      _IteratorTriple&\n       operator--()\n       {\n \t--__first;\n@@ -170,29 +165,29 @@ namespace __gnu_parallel\n       }\n \n       // Post-decrement operator.\n-      const _Self\n+      const _IteratorTriple\n       operator--(int)\n-      { return _Self(__first--, __second--, __third--); }\n+      { return _IteratorTriple(__first--, __second--, __third--); }\n \n       // Type conversion.\n       operator _Iterator3() const\n       { return __third; }\n \n-      _Self&\n-      operator=(const _Self& __other)\n+      _IteratorTriple&\n+      operator=(const _IteratorTriple& __other)\n       {\n \t__first = __other.__first;\n \t__second = __other.__second;\n \t__third = __other.__third;\n \treturn *this;\n       }\n \n-      _Self\n+      _IteratorTriple\n       operator+(difference_type __delta) const\n-      { return _Self(__first + __delta, __second + __delta, __third + __delta); }\n+      { return _IteratorTriple(__first + __delta, __second + __delta, __third + __delta); }\n \n       difference_type\n-      operator-(const _Self& __other) const\n+      operator-(const _IteratorTriple& __other) const\n       { return __first - __other.__first; }\n   };\n }"}, {"sha": "b98608d803464aca8b2ff37bd1e6a0fac505954c", "filename": "libstdc++-v3/include/parallel/losertree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b9c936bf663357c37c213a285ad44d5e530264/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Flosertree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b9c936bf663357c37c213a285ad44d5e530264/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Flosertree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Flosertree.h?ref=11b9c936bf663357c37c213a285ad44d5e530264", "patch": "@@ -50,7 +50,7 @@ namespace __gnu_parallel\n  * inf is not needed due to a better initialization routine.  This\n  * is a well-performing variant.\n  *\n- * @param _Tp the element _Self\n+ * @param _Tp the element type\n  * @param _Compare the comparator to use, defaults to std::less<_Tp>\n  */\n template<typename _Tp, typename _Compare>"}, {"sha": "bc64db4a94fccf40a1212f09dd0e4b78e9f65816", "filename": "libstdc++-v3/include/parallel/multiway_merge.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b9c936bf663357c37c213a285ad44d5e530264/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b9c936bf663357c37c213a285ad44d5e530264/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h?ref=11b9c936bf663357c37c213a285ad44d5e530264", "patch": "@@ -755,10 +755,10 @@ template<\n  * The field \"_M_use_pointer\" is used to determine whether to use pointers in\n  * the loser trees or whether to copy the values into the loser tree.\n  *\n- * The default behavior is to use pointers if the data _Self is 4 times as\n+ * The default behavior is to use pointers if the data type is 4 times as\n  * big as the pointer to it.\n  *\n- * Specialize for your data _Self to customize the behavior.\n+ * Specialize for your data type to customize the behavior.\n  *\n  * Example:\n  *\n@@ -770,15 +770,15 @@ template<\n  *   struct _LoserTreeTraits<heavyweight_type>\n  *   { static const bool _M_use_pointer = true; };\n  *\n- * @param _Tp _Self to give the loser tree traits for.\n+ * @param _Tp type to give the loser tree traits for.\n  */\n template <typename _Tp>\n struct _LoserTreeTraits\n {\n   /**\n    * @brief True iff to use pointers instead of values in loser trees.\n    *\n-   * The default behavior is to use pointers if the data _Self is four\n+   * The default behavior is to use pointers if the data type is four\n    * times as big as the pointer to it.\n    */\n   static const bool _M_use_pointer = (sizeof(_Tp) > 4 * sizeof(_Tp*));\n@@ -1442,19 +1442,19 @@ template<\n  * @see stable_multiway_merge\n  *\n  * @pre All input sequences must be sorted.\n- * @pre Target must provide enough space to merge out __length __elements or\n+ * @pre Target must provide enough space to merge out length elements or\n  *    the number of elements in all sequences, whichever is smaller.\n  *\n  * @post [__target, return __value) contains merged __elements from the\n  *    input sequences.\n  * @post return __value - __target = min(__length, number of elements in all\n  *    sequences).\n  *\n- * @param _RAIterPairIterator iterator over __sequence\n+ * @param _RAIterPairIterator iterator over sequence\n  *    of pairs of iterators\n  * @param _RAIterOut iterator over target sequence\n- * @param _DifferenceTp difference _Self for the sequence\n- * @param _Compare strict weak ordering _Self to compare __elements\n+ * @param _DifferenceTp difference type for the sequence\n+ * @param _Compare strict weak ordering type to compare elements\n  *    in sequences\n  *\n  * @param __seqs_begin  __begin of sequence __sequence\n@@ -1809,7 +1809,7 @@ stable_multiway_merge(_RAIterPairIterator __seqs_begin\n  * </pre>\n  *\n  * @pre All input sequences must be sorted.\n- * @pre Target must provide enough space to merge out __length __elements or\n+ * @pre Target must provide enough space to merge out length elements or\n  *    the number of elements in all sequences, whichever is smaller.\n  * @pre For each @__c __i, @__c __seqs_begin[__i].second must be the end\n  *    marker of the sequence, but also reference the one more __sentinel\n@@ -1822,11 +1822,11 @@ stable_multiway_merge(_RAIterPairIterator __seqs_begin\n  *\n  * @see stable_multiway_merge_sentinels\n  *\n- * @param _RAIterPairIterator iterator over __sequence\n+ * @param _RAIterPairIterator iterator over sequence\n  *    of pairs of iterators\n  * @param _RAIterOut iterator over target sequence\n- * @param _DifferenceTp difference _Self for the sequence\n- * @param _Compare strict weak ordering _Self to compare __elements\n+ * @param _DifferenceTp difference type for the sequence\n+ * @param _Compare strict weak ordering type to compare elements\n  *    in sequences\n  *\n  * @param __seqs_begin  __begin of sequence __sequence"}, {"sha": "77ac639cf628298e245d649fbb5a9746d480e42c", "filename": "libstdc++-v3/include/parallel/random_shuffle.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b9c936bf663357c37c213a285ad44d5e530264/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b9c936bf663357c37c213a285ad44d5e530264/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h?ref=11b9c936bf663357c37c213a285ad44d5e530264", "patch": "@@ -41,7 +41,7 @@ namespace __gnu_parallel\n {\n /** @brief Type to hold the index of a bin.\n   *\n-  *  Since many variables of this _Self are allocated, it should be\n+  *  Since many variables of this type are allocated, it should be\n   *  chosen as small as possible.\n   */\n typedef unsigned short _BinIndex;"}]}