{"sha": "173fb2ff62e71fe86e311cd7135da4383060ff64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTczZmIyZmY2MmU3MWZlODZlMzExY2Q3MTM1ZGE0MzgzMDYwZmY2NA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-14T23:34:14Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-14T23:34:14Z"}, "message": "Don't try to build unary and binary expressions with invalid types.\n\nFrom-SVN: r167824", "tree": {"sha": "c54ecc0ae5a23b3d8e9daa01e62695fb2b33f031", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c54ecc0ae5a23b3d8e9daa01e62695fb2b33f031"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/173fb2ff62e71fe86e311cd7135da4383060ff64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/173fb2ff62e71fe86e311cd7135da4383060ff64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/173fb2ff62e71fe86e311cd7135da4383060ff64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/173fb2ff62e71fe86e311cd7135da4383060ff64/comments", "author": null, "committer": null, "parents": [{"sha": "5262c72ad4f6c5895f1318935dfa8980050ce784", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5262c72ad4f6c5895f1318935dfa8980050ce784", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5262c72ad4f6c5895f1318935dfa8980050ce784"}], "stats": {"total": 42, "additions": 20, "deletions": 22}, "files": [{"sha": "7041cb5b52512aa7ab812bbcd3a76cc6d7f380c6", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173fb2ff62e71fe86e311cd7135da4383060ff64/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173fb2ff62e71fe86e311cd7135da4383060ff64/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=173fb2ff62e71fe86e311cd7135da4383060ff64", "patch": "@@ -3824,29 +3824,28 @@ Unary_expression::do_determine_type(const Type_context* context)\n void\n Unary_expression::do_check_types(Gogo*)\n {\n+  Type* type = this->expr_->type();\n+  if (type->is_error_type())\n+    {\n+      this->set_is_error();\n+      return;\n+    }\n+\n   switch (this->op_)\n     {\n     case OPERATOR_PLUS:\n     case OPERATOR_MINUS:\n-      {\n-\tType* type = this->expr_->type();\n-\tif (type->integer_type() == NULL\n-\t    && type->float_type() == NULL\n-\t    && type->complex_type() == NULL\n-\t    && !type->is_error_type())\n-\t  this->report_error(_(\"expected numeric type\"));\n-      }\n+      if (type->integer_type() == NULL\n+\t  && type->float_type() == NULL\n+\t  && type->complex_type() == NULL)\n+\tthis->report_error(_(\"expected numeric type\"));\n       break;\n \n     case OPERATOR_NOT:\n     case OPERATOR_XOR:\n-      {\n-\tType* type = this->expr_->type();\n-\tif (type->integer_type() == NULL\n-\t    && !type->is_boolean_type()\n-\t    && !type->is_error_type())\n-\t  this->report_error(_(\"expected integer or boolean type\"));\n-      }\n+      if (type->integer_type() == NULL\n+\t  && !type->is_boolean_type())\n+\tthis->report_error(_(\"expected integer or boolean type\"));\n       break;\n \n     case OPERATOR_AND:\n@@ -3858,12 +3857,8 @@ Unary_expression::do_check_types(Gogo*)\n \n     case OPERATOR_MULT:\n       // Indirecting through a pointer.\n-      {\n-\tType* type = this->expr_->type();\n-\tif (type->points_to() == NULL\n-\t    && !type->is_error_type())\n-\t  this->report_error(_(\"expected pointer\"));\n-      }\n+      if (type->points_to() == NULL)\n+\tthis->report_error(_(\"expected pointer\"));\n       break;\n \n     default:\n@@ -5474,7 +5469,10 @@ Binary_expression::do_check_types(Gogo*)\n   Type* left_type = this->left_->type();\n   Type* right_type = this->right_->type();\n   if (left_type->is_error_type() || right_type->is_error_type())\n-    return;\n+    {\n+      this->set_is_error();\n+      return;\n+    }\n \n   if (this->op_ == OPERATOR_EQEQ\n       || this->op_ == OPERATOR_NOTEQ"}]}