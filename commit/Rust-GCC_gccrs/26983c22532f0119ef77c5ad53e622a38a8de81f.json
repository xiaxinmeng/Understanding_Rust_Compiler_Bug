{"sha": "26983c22532f0119ef77c5ad53e622a38a8de81f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY5ODNjMjI1MzJmMDExOWVmNzdjNWFkNTNlNjIyYTM4YThkZTgxZg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2010-09-14T17:02:10Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2010-09-14T17:02:10Z"}, "message": "Turn UNITS_PER_SIMD_WORD into a target hook.\n\n2010-09-14  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* defaults.h (UNITS_PER_SIMD_WORD): Removed.\n\t* config/arm/arm.h (UNITS_PER_SIMD_WORD): Likewise.\n\t* config/i386/i386.h (UNITS_PER_SIMD_WORD): Likewise.\n\t* config/mips/mips.h (UNITS_PER_SIMD_WORD): Likewise.\n\t* config/rs6000/rs6000.h (UNITS_PER_SIMD_WORD): Likewise.\n\t* config/sparc/sparc.h (UNITS_PER_SIMD_WORD): Likewise.\n\n\t* target.def: Add units_per_simd_word to vectorize.\n\n\t* targhooks.c (default_units_per_simd_word): New.\n\t* targhooks.h (default_units_per_simd_word): Likewise.\n\t* config/arm/arm.c (arm_units_per_simd_word): Likewise.\n\t(TARGET_VECTORIZE_UNITS_PER_SIMD_WORD): Likewise.\n\t* config/mips/mips.c (mips_units_per_simd_word): Likewise.\n\t(TARGET_VECTORIZE_UNITS_PER_SIMD_WORD): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_units_per_simd_word): Likewise.\n\t(TARGET_VECTORIZE_UNITS_PER_SIMD_WORD): Likewise.\n\t* config/sparc/sparc.c (sparc_units_per_simd_word): Likewise.\n\t(TARGET_VECTORIZE_UNITS_PER_SIMD_WORD): Likewise.\n\n\t* tree-vect-loop.c: Replace UNITS_PER_SIMD_WORD with\n\tTARGET_VECTORIZE_UNITS_PER_SIMD_WORD in comments.\n\n\t* tree-vect-stmts.c (get_vectype_for_scalar_type): Replace\n\tUNITS_PER_SIMD_WORD with targetm.vectorize.units_per_simd_word.\n\n\t* system.h (UNITS_PER_SIMD_WORD): Poisoned.\n\n\t* config/i386/i386-protos.h (ix86_units_per_simd_word): Removed.\n\n\t* config/i386/i386.c (ix86_units_per_simd_word): Make it\n\tstatic.\n\t(TARGET_VECTORIZE_UNITS_PER_SIMD_WORD): New.\n\n\t* doc/tm.texi.in: Remove UNITS_PER_SIMD_WORD.  Add\n\tTARGET_VECTORIZE_UNITS_PER_SIMD_WORD.\n\n\t* doc/tm.texi: Regenerated.\n\nFrom-SVN: r164285", "tree": {"sha": "234df070889197d6478e55b7ed00545077288920", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/234df070889197d6478e55b7ed00545077288920"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26983c22532f0119ef77c5ad53e622a38a8de81f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26983c22532f0119ef77c5ad53e622a38a8de81f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26983c22532f0119ef77c5ad53e622a38a8de81f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26983c22532f0119ef77c5ad53e622a38a8de81f/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b93cf3427d41c321829356996b89836ad0dbe58b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b93cf3427d41c321829356996b89836ad0dbe58b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b93cf3427d41c321829356996b89836ad0dbe58b"}], "stats": {"total": 189, "additions": 137, "deletions": 52}, "files": [{"sha": "aeab6887b3b908d339d38a4115d2807d77ab9ff1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26983c22532f0119ef77c5ad53e622a38a8de81f", "patch": "@@ -1,3 +1,45 @@\n+2010-09-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* defaults.h (UNITS_PER_SIMD_WORD): Removed.\n+\t* config/arm/arm.h (UNITS_PER_SIMD_WORD): Likewise.\n+\t* config/i386/i386.h (UNITS_PER_SIMD_WORD): Likewise.\n+\t* config/mips/mips.h (UNITS_PER_SIMD_WORD): Likewise.\n+\t* config/rs6000/rs6000.h (UNITS_PER_SIMD_WORD): Likewise.\n+\t* config/sparc/sparc.h (UNITS_PER_SIMD_WORD): Likewise.\n+\n+\t* target.def: Add units_per_simd_word to vectorize.\n+\n+\t* targhooks.c (default_units_per_simd_word): New.\n+\t* targhooks.h (default_units_per_simd_word): Likewise.\n+\t* config/arm/arm.c (arm_units_per_simd_word): Likewise.\n+\t(TARGET_VECTORIZE_UNITS_PER_SIMD_WORD): Likewise.\n+\t* config/mips/mips.c (mips_units_per_simd_word): Likewise.\n+\t(TARGET_VECTORIZE_UNITS_PER_SIMD_WORD): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_units_per_simd_word): Likewise.\n+\t(TARGET_VECTORIZE_UNITS_PER_SIMD_WORD): Likewise.\n+\t* config/sparc/sparc.c (sparc_units_per_simd_word): Likewise.\n+\t(TARGET_VECTORIZE_UNITS_PER_SIMD_WORD): Likewise.\n+\n+\t* tree-vect-loop.c: Replace UNITS_PER_SIMD_WORD with\n+\tTARGET_VECTORIZE_UNITS_PER_SIMD_WORD in comments.\n+\n+\t* tree-vect-stmts.c: Don't include \"tm_p.h\".\n+\t(get_vectype_for_scalar_type): Replace UNITS_PER_SIMD_WORD\n+\twith targetm.vectorize.units_per_simd_word.\n+\n+\t* system.h (UNITS_PER_SIMD_WORD): Poisoned.\n+\n+\t* config/i386/i386-protos.h (ix86_units_per_simd_word): Removed.\n+\n+\t* config/i386/i386.c (ix86_units_per_simd_word): Make it\n+\tstatic.\n+\t(TARGET_VECTORIZE_UNITS_PER_SIMD_WORD): New.\n+\n+\t* doc/tm.texi.in: Remove UNITS_PER_SIMD_WORD.  Add\n+\tTARGET_VECTORIZE_UNITS_PER_SIMD_WORD.\n+\n+\t* doc/tm.texi: Regenerated.\n+\n 2010-09-14  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* tree-vect-stmts.c: Include \"tm_p.h\"."}, {"sha": "6f260ec53d213bd97055f1a2fae32c08885061d4", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=26983c22532f0119ef77c5ad53e622a38a8de81f", "patch": "@@ -236,6 +236,7 @@ static rtx arm_trampoline_adjust_address (rtx);\n static rtx arm_pic_static_addr (rtx orig, rtx reg);\n static bool cortex_a9_sched_adjust_cost (rtx, rtx, rtx, int *);\n static bool xscale_sched_adjust_cost (rtx, rtx, rtx, int *);\n+static unsigned int arm_units_per_simd_word (enum machine_mode);\n \n \f\n /* Table of machine attributes.  */\n@@ -363,6 +364,8 @@ static const struct attribute_spec arm_attribute_table[] =\n #define TARGET_SHIFT_TRUNCATION_MASK arm_shift_truncation_mask\n #undef TARGET_VECTOR_MODE_SUPPORTED_P\n #define TARGET_VECTOR_MODE_SUPPORTED_P arm_vector_mode_supported_p\n+#undef TARGET_VECTORIZE_UNITS_PER_SIMD_WORD\n+#define TARGET_VECTORIZE_UNITS_PER_SIMD_WORD arm_units_per_simd_word\n \n #undef  TARGET_MACHINE_DEPENDENT_REORG\n #define TARGET_MACHINE_DEPENDENT_REORG arm_reorg\n@@ -21869,6 +21872,17 @@ arm_vector_mode_supported_p (enum machine_mode mode)\n   return false;\n }\n \n+/* Use the option -mvectorize-with-neon-quad to override the use of doubleword\n+   registers when autovectorizing for Neon, at least until multiple vector\n+   widths are supported properly by the middle-end.  */\n+\n+static unsigned int\n+arm_units_per_simd_word (enum machine_mode mode ATTRIBUTE_UNUSED)\n+{\n+  return (TARGET_NEON\n+\t  ? (TARGET_NEON_VECTORIZE_QUAD ? 16 : 8) : UNITS_PER_WORD);\n+}\n+\n /* Implements target hook small_register_classes_for_mode_p.  */\n bool\n arm_small_register_classes_for_mode_p (enum machine_mode mode ATTRIBUTE_UNUSED)"}, {"sha": "36b618a58369bedc03228a0a1de5a7aa27503461", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=26983c22532f0119ef77c5ad53e622a38a8de81f", "patch": "@@ -580,12 +580,6 @@ extern int arm_arch_hwdiv;\n \n #define UNITS_PER_WORD\t4\n \n-/* Use the option -mvectorize-with-neon-quad to override the use of doubleword\n-   registers when autovectorizing for Neon, at least until multiple vector\n-   widths are supported properly by the middle-end.  */\n-#define UNITS_PER_SIMD_WORD(MODE) \\\n-  (TARGET_NEON ? (TARGET_NEON_VECTORIZE_QUAD ? 16 : 8) : UNITS_PER_WORD)\n-\n /* True if natural alignment is used for doubleword types.  */\n #define ARM_DOUBLEWORD_ALIGN\tTARGET_AAPCS_BASED\n "}, {"sha": "900b4242ec89fa6ef8eb2c1f42220895c09faeb1", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=26983c22532f0119ef77c5ad53e622a38a8de81f", "patch": "@@ -38,8 +38,6 @@ extern void ix86_output_addr_diff_elt (FILE *, int, int);\n extern enum calling_abi ix86_cfun_abi (void);\n extern enum calling_abi ix86_function_type_abi (const_tree);\n \n-extern unsigned int ix86_units_per_simd_word (enum machine_mode);\n-\n #ifdef RTX_CODE\n extern int standard_80387_constant_p (rtx);\n extern const char *standard_80387_constant_opcode (rtx);"}, {"sha": "1d4e4aed715794fd90eafe4e98a4f49a8605216f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=26983c22532f0119ef77c5ad53e622a38a8de81f", "patch": "@@ -32341,7 +32341,7 @@ has_dispatch (rtx insn, int action)\n /* ??? No autovectorization into MMX or 3DNOW until we can reliably\n    place emms and femms instructions.  */\n \n-unsigned int\n+static unsigned int\n ix86_units_per_simd_word (enum machine_mode mode)\n {\n   /* Disable double precision vectorizer if needed.  */\n@@ -32609,6 +32609,9 @@ ix86_units_per_simd_word (enum machine_mode mode)\n #undef TARGET_VECTORIZE_BUILTIN_VEC_PERM_OK\n #define TARGET_VECTORIZE_BUILTIN_VEC_PERM_OK \\\n   ix86_vectorize_builtin_vec_perm_ok\n+#undef TARGET_VECTORIZE_UNITS_PER_SIMD_WORD\n+#define TARGET_VECTORIZE_UNITS_PER_SIMD_WORD \\\n+  ix86_units_per_simd_word\n \n #undef TARGET_SET_CURRENT_FUNCTION\n #define TARGET_SET_CURRENT_FUNCTION ix86_set_current_function"}, {"sha": "fe48efd180604beb3d8d7b2c2cdb6dad1ff3d151", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=26983c22532f0119ef77c5ad53e622a38a8de81f", "patch": "@@ -1033,8 +1033,6 @@ enum target_cpu_default\n    || (MODE) == V2SImode || (MODE) == SImode\t\t\t\t\\\n    || (MODE) == V4HImode || (MODE) == V8QImode)\n \n-#define UNITS_PER_SIMD_WORD(MODE) ix86_units_per_simd_word (MODE)\n-\n #define VALID_DFP_MODE_P(MODE) \\\n   ((MODE) == SDmode || (MODE) == DDmode || (MODE) == TDmode)\n "}, {"sha": "945ee42c6a933bcfb3633fc639e802e2c5641041", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=26983c22532f0119ef77c5ad53e622a38a8de81f", "patch": "@@ -11140,6 +11140,14 @@ mips_scalar_mode_supported_p (enum machine_mode mode)\n   return default_scalar_mode_supported_p (mode);\n }\n \f\n+/* Implement TARGET_VECTORIZE_UNITS_PER_SIMD_WORD.  */\n+\n+static bool\n+mips_units_per_simd_word (enum machine_mode mode ATTRIBUTE_UNUSED)\n+{\n+  return TARGET_PAIRED_SINGLE_FLOAT ? 8 : UNITS_PER_WORD;\n+}\n+\n /* Implement TARGET_INIT_LIBFUNCS.  */\n \n #include \"config/gofast.h\"\n@@ -16506,6 +16514,9 @@ mips_shift_truncation_mask (enum machine_mode mode)\n #undef TARGET_SCALAR_MODE_SUPPORTED_P\n #define TARGET_SCALAR_MODE_SUPPORTED_P mips_scalar_mode_supported_p\n \n+#undef TARGET_VECTORIZE_UNITS_PER_SIMD_WORD\n+#define TARGET_VECTORIZE_UNITS_PER_SIMD_WORD mips_units_per_simd_word\n+\n #undef TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS mips_init_builtins\n #undef TARGET_EXPAND_BUILTIN"}, {"sha": "4f44130c5a50f7fb6ebe47fbd705b961c30ccfab", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=26983c22532f0119ef77c5ad53e622a38a8de81f", "patch": "@@ -1328,9 +1328,6 @@ enum mips_code_readable_setting {\n /* The number of bytes in a double.  */\n #define UNITS_PER_DOUBLE (TYPE_PRECISION (double_type_node) / BITS_PER_UNIT)\n \n-#define UNITS_PER_SIMD_WORD(MODE) \\\n-  (TARGET_PAIRED_SINGLE_FLOAT ? 8 : UNITS_PER_WORD)\n-\n /* Set the sizes of the core types.  */\n #define SHORT_TYPE_SIZE 16\n #define INT_TYPE_SIZE 32"}, {"sha": "2ebe4849ebad0d92cf71c95b3ad31464ad42f153", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=26983c22532f0119ef77c5ad53e622a38a8de81f", "patch": "@@ -3570,6 +3570,18 @@ rs6000_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n     }\n }\n \n+/* Implement targetm.vectorize.units_per_simd_word.  */\n+\n+static int\n+rs6000_units_per_simd_word (enum machine_mode mode ATTRIBUTE_UNUSED)\n+{\n+  return (TARGET_VSX ? UNITS_PER_VSX_WORD\n+\t  : (TARGET_ALTIVEC ? UNITS_PER_ALTIVEC_WORD\n+\t     : (TARGET_SPE ? UNITS_PER_SPE_WORD\n+\t\t: (TARGET_PAIRED_FLOAT ? UNITS_PER_PAIRED_WORD\n+\t\t   : UNITS_PER_WORD))));\n+}\n+\n /* Handle generic options of the form -mfoo=yes/no.\n    NAME is the option name.\n    VALUE is the option value."}, {"sha": "5b0e4c7aa7aab4a1b4378f2b592c1302b2e56c6a", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=26983c22532f0119ef77c5ad53e622a38a8de81f", "patch": "@@ -1150,13 +1150,6 @@ extern unsigned rs6000_pointer_size;\n #define PAIRED_VECTOR_MODE(MODE)        \\\n          ((MODE) == V2SFmode)            \n \n-#define UNITS_PER_SIMD_WORD(MODE)\t\t\t\t\t\\\n-\t(TARGET_VSX ? UNITS_PER_VSX_WORD\t\t\t\t\\\n-\t : (TARGET_ALTIVEC ? UNITS_PER_ALTIVEC_WORD\t\t\t\\\n-\t : (TARGET_SPE ? UNITS_PER_SPE_WORD\t\t\t\t\\\n-\t : (TARGET_PAIRED_FLOAT ? UNITS_PER_PAIRED_WORD\t\t\t\\\n-\t : UNITS_PER_WORD))))\n-\n /* Value is TRUE if hard register REGNO can hold a value of\n    machine-mode MODE.  */\n #define HARD_REGNO_MODE_OK(REGNO, MODE) \\"}, {"sha": "71c94e1cddd168dc1b9367af8a45e66ec6851899", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=26983c22532f0119ef77c5ad53e622a38a8de81f", "patch": "@@ -434,6 +434,7 @@ static bool sparc_can_eliminate (const int, const int);\n static const char *sparc_mangle_type (const_tree);\n #endif\n static void sparc_trampoline_init (rtx, tree, rtx);\n+static bool sparc_units_per_simd_word (enum machine_mode);\n \f\n #ifdef SUBTARGET_ATTRIBUTE_TABLE\n /* Table of valid machine attributes.  */\n@@ -571,6 +572,9 @@ static bool fpu_option_set = false;\n #undef TARGET_VECTOR_MODE_SUPPORTED_P\n #define TARGET_VECTOR_MODE_SUPPORTED_P sparc_vector_mode_supported_p\n \n+#undef TARGET_VECTORIZE_UNITS_PER_SIMD_WORD\n+#define TARGET_VECTORIZE_UNITS_PER_SIMD_WORD sparc_units_per_simd_word\n+\n #undef TARGET_DWARF_HANDLE_FRAME_UNSPEC\n #define TARGET_DWARF_HANDLE_FRAME_UNSPEC sparc_dwarf_handle_frame_unspec\n \n@@ -6233,6 +6237,14 @@ sparc_vector_mode_supported_p (enum machine_mode mode)\n   return TARGET_VIS && VECTOR_MODE_P (mode) ? true : false;\n }\n \f\n+/* Implement the TARGET_VECTORIZE_UNITS_PER_SIMD_WORD target hook.  */\n+\n+static bool\n+sparc_units_per_simd_word (enum machine_mode mode ATTRIBUTE_UNUSED)\n+{\n+  return TARGET_VIS ? 8 : UNITS_PER_WORD;\n+}\n+\f\n /* Return the string to output an unconditional branch to LABEL, which is\n    the operand number of the label.\n "}, {"sha": "21694ebc5e0ed73fd64521d314fc9e3ea8f139d2", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=26983c22532f0119ef77c5ad53e622a38a8de81f", "patch": "@@ -607,8 +607,6 @@ extern struct sparc_cpu_select sparc_select[];\n #define MIN_UNITS_PER_WORD\t4\n #endif\n \n-#define UNITS_PER_SIMD_WORD(MODE) (TARGET_VIS ? 8 : UNITS_PER_WORD)\n-\n /* Now define the sizes of the C data types.  */\n \n #define SHORT_TYPE_SIZE\t\t16"}, {"sha": "a50052eaaec17f2823607da7adae4361e50f949a", "filename": "gcc/defaults.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=26983c22532f0119ef77c5ad53e622a38a8de81f", "patch": "@@ -949,12 +949,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define HAS_LONG_UNCOND_BRANCH 0\n #endif\n \n-/* By default, only attempt to parallelize bitwise operations, and\n-   possibly adds/subtracts using bit-twiddling.  */\n-#ifndef UNITS_PER_SIMD_WORD\n-#define UNITS_PER_SIMD_WORD(MODE) UNITS_PER_WORD\n-#endif\n-\n /* Determine whether __cxa_atexit, rather than atexit, is used to\n    register C++ destructors for local statics and global objects.  */\n #ifndef DEFAULT_USE_CXA_ATEXIT"}, {"sha": "8e66da509df3087383699c2f24f259a6d5d18260", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=26983c22532f0119ef77c5ad53e622a38a8de81f", "patch": "@@ -995,13 +995,6 @@ Minimum number of units in a word.  If this is undefined, the default is\n smallest value that @code{UNITS_PER_WORD} can have at run-time.\n @end defmac\n \n-@defmac UNITS_PER_SIMD_WORD (@var{mode})\n-Number of units in the vectors that the vectorizer can produce for\n-scalar mode @var{mode}.  The default is equal to @code{UNITS_PER_WORD},\n-because the vectorizer can do some transformations even in absence of\n-specialized @acronym{SIMD} hardware.\n-@end defmac\n-\n @defmac POINTER_SIZE\n Width of a pointer, in bits.  You must specify a value no wider than the\n width of @code{Pmode}.  If it is not equal to the width of @code{Pmode},\n@@ -5765,6 +5758,13 @@ the elements in the vectors should be of type @var{type}.  @var{is_packed}\n parameter is true if the memory access is defined in a packed struct.\n @end deftypefn\n \n+@deftypefn {Target Hook} {unsigned int} TARGET_VECTORIZE_UNITS_PER_SIMD_WORD (enum machine_mode @var{mode})\n+This hook should return th number of units in the vectors that the\n+vectorizer can produce for scalar mode @var{mode}.  The default is\n+equal to @code{UNITS_PER_WORD}, because the vectorizer can do some\n+transformations even in absence of specialized @acronym{SIMD} hardware.\n+@end deftypefn\n+\n @node Anchored Addresses\n @section Anchored Addresses\n @cindex anchored addresses"}, {"sha": "d25ead1bd8f4eadb3cdc8188902dab7fb06d3a5d", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=26983c22532f0119ef77c5ad53e622a38a8de81f", "patch": "@@ -995,13 +995,6 @@ Minimum number of units in a word.  If this is undefined, the default is\n smallest value that @code{UNITS_PER_WORD} can have at run-time.\n @end defmac\n \n-@defmac UNITS_PER_SIMD_WORD (@var{mode})\n-Number of units in the vectors that the vectorizer can produce for\n-scalar mode @var{mode}.  The default is equal to @code{UNITS_PER_WORD},\n-because the vectorizer can do some transformations even in absence of\n-specialized @acronym{SIMD} hardware.\n-@end defmac\n-\n @defmac POINTER_SIZE\n Width of a pointer, in bits.  You must specify a value no wider than the\n width of @code{Pmode}.  If it is not equal to the width of @code{Pmode},\n@@ -5765,6 +5758,13 @@ the elements in the vectors should be of type @var{type}.  @var{is_packed}\n parameter is true if the memory access is defined in a packed struct.\n @end deftypefn\n \n+@hook TARGET_VECTORIZE_UNITS_PER_SIMD_WORD\n+This hook should return th number of units in the vectors that the\n+vectorizer can produce for scalar mode @var{mode}.  The default is\n+equal to @code{UNITS_PER_WORD}, because the vectorizer can do some\n+transformations even in absence of specialized @acronym{SIMD} hardware.\n+@end deftypefn\n+\n @node Anchored Addresses\n @section Anchored Addresses\n @cindex anchored addresses"}, {"sha": "35f9ac8a3f44ad8ea693eec4128d0af00661f25f", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=26983c22532f0119ef77c5ad53e622a38a8de81f", "patch": "@@ -715,7 +715,7 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tALLOCATE_INITIAL_VALUE LEGITIMIZE_ADDRESS FRAME_POINTER_REQUIRED \\\n \tCAN_ELIMINATE TRAMPOLINE_TEMPLATE INITIALIZE_TRAMPOLINE\t\t\\\n \tTRAMPOLINE_ADJUST_ADDRESS STATIC_CHAIN STATIC_CHAIN_INCOMING\t\\\n-\tRETURN_POPS_ARGS\n+\tRETURN_POPS_ARGS UNITS_PER_SIMD_WORD\n \n /* Other obsolete target macros, or macros that used to be in target\n    headers and were not used, and may be obsolete or may never have"}, {"sha": "155f0fdd2fb46579793e4eb92e715a956c3ca4f1", "filename": "gcc/target.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=26983c22532f0119ef77c5ad53e622a38a8de81f", "patch": "@@ -880,6 +880,14 @@ DEFHOOK\n  (enum machine_mode mode, const_tree type, int misalignment, bool is_packed),\n  default_builtin_support_vector_misalignment)\n \n+/* Return units per SIMD word.  */\n+DEFHOOK\n+(units_per_simd_word,\n+ \"\",\n+ unsigned int,\n+ (enum machine_mode mode),\n+ default_units_per_simd_word)\n+\n HOOK_VECTOR_END (vectorize)\n \n #undef HOOK_PREFIX"}, {"sha": "046c07f0e273adf9d7f0df8de94f11594da49d2a", "filename": "gcc/targhooks.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=26983c22532f0119ef77c5ad53e622a38a8de81f", "patch": "@@ -984,6 +984,15 @@ default_builtin_support_vector_misalignment (enum machine_mode mode,\n   return false;\n }\n \n+/* By default, only attempt to parallelize bitwise operations, and\n+   possibly adds/subtracts using bit-twiddling.  */\n+\n+unsigned int\n+default_units_per_simd_word (enum machine_mode mode ATTRIBUTE_UNUSED)\n+{\n+  return UNITS_PER_WORD;\n+}\n+\n /* Determine whether or not a pointer mode is valid. Assume defaults\n    of ptr_mode or Pmode - can be overridden.  */\n bool"}, {"sha": "a6231f96960555d4911ea4ba49e5be29c8799e90", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=26983c22532f0119ef77c5ad53e622a38a8de81f", "patch": "@@ -86,6 +86,7 @@ extern bool\n default_builtin_support_vector_misalignment (enum machine_mode mode,\n \t\t\t\t\t     const_tree,\n \t\t\t\t\t     int, bool);\n+extern unsigned int default_units_per_simd_word (enum machine_mode mode);\n \n /* These are here, and not in hooks.[ch], because not all users of\n    hooks.h include tm.h, and thus we don't have CUMULATIVE_ARGS.  */"}, {"sha": "5c35080e13f5334159a6a1b36f6827e668e76763", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=26983c22532f0119ef77c5ad53e622a38a8de81f", "patch": "@@ -126,9 +126,10 @@ along with GCC; see the file COPYING3.  If not see\n    Target modeling:\n    =================\n         Currently the only target specific information that is used is the\n-   size of the vector (in bytes) - \"UNITS_PER_SIMD_WORD\". Targets that can\n-   support different sizes of vectors, for now will need to specify one value\n-   for \"UNITS_PER_SIMD_WORD\". More flexibility will be added in the future.\n+   size of the vector (in bytes) - \"TARGET_VECTORIZE_UNITS_PER_SIMD_WORD\".\n+   Targets that can support different sizes of vectors, for now will need\n+   to specify one value for \"TARGET_VECTORIZE_UNITS_PER_SIMD_WORD\". More\n+   flexibility will be added in the future.\n \n         Since we only vectorize operations which vector form can be\n    expressed using existing tree codes, to verify that an operation is"}, {"sha": "b64f8c47520b71bc2148abeb84c04f5f443c7333", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26983c22532f0119ef77c5ad53e622a38a8de81f/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=26983c22532f0119ef77c5ad53e622a38a8de81f", "patch": "@@ -26,7 +26,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"ggc.h\"\n #include \"tree.h\"\n-#include \"tm_p.h\"\n #include \"target.h\"\n #include \"basic-block.h\"\n #include \"tree-pretty-print.h\"\n@@ -4679,7 +4678,8 @@ get_vectype_for_scalar_type (tree scalar_type)\n   int nunits;\n   tree vectype;\n \n-  if (nbytes == 0 || nbytes >= UNITS_PER_SIMD_WORD (inner_mode))\n+  if (nbytes == 0\n+      || (nbytes >= targetm.vectorize.units_per_simd_word (inner_mode)))\n     return NULL_TREE;\n \n   /* We can't build a vector type of elements with alignment bigger than\n@@ -4695,9 +4695,9 @@ get_vectype_for_scalar_type (tree scalar_type)\n       && GET_MODE_BITSIZE (inner_mode) != TYPE_PRECISION (scalar_type))\n     return NULL_TREE;\n \n-  /* FORNOW: Only a single vector size per mode (UNITS_PER_SIMD_WORD)\n-     is expected.  */\n-  nunits = UNITS_PER_SIMD_WORD (inner_mode) / nbytes;\n+  /* FORNOW: Only a single vector size per mode\n+    (TARGET_VECTORIZE_UNITS_PER_SIMD_WORD) is expected.  */\n+  nunits = targetm.vectorize.units_per_simd_word (inner_mode) / nbytes;\n \n   vectype = build_vector_type (scalar_type, nunits);\n   if (vect_print_dump_info (REPORT_DETAILS))"}]}