{"sha": "f0cac80bf6b56e75a1fbafc4a0e077272fa03311", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBjYWM4MGJmNmI1NmU3NWExZmJhZmM0YTBlMDc3MjcyZmEwMzMxMQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2011-08-20T11:05:43Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-08-20T11:05:43Z"}, "message": "i386.c (ix86_binary_operator_ok): Use satisfies_constraint_L.\n\n\t* config/i386/i386.c (ix86_binary_operator_ok): Use\n\tsatisfies_constraint_L.\n\nFrom-SVN: r177928", "tree": {"sha": "2f9cb64c7bcaae4f25c2e364e94183a310266ca4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f9cb64c7bcaae4f25c2e364e94183a310266ca4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0cac80bf6b56e75a1fbafc4a0e077272fa03311", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0cac80bf6b56e75a1fbafc4a0e077272fa03311", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0cac80bf6b56e75a1fbafc4a0e077272fa03311", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0cac80bf6b56e75a1fbafc4a0e077272fa03311/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "198cb1664a59ee3b71661952b471015af5edec2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/198cb1664a59ee3b71661952b471015af5edec2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/198cb1664a59ee3b71661952b471015af5edec2d"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "2217302f643363a1e0fde775980b2e2976a79d92", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0cac80bf6b56e75a1fbafc4a0e077272fa03311/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0cac80bf6b56e75a1fbafc4a0e077272fa03311/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f0cac80bf6b56e75a1fbafc4a0e077272fa03311", "patch": "@@ -1,3 +1,8 @@\n+2011-08-20  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_binary_operator_ok): Use\n+\tsatisfies_constraint_L.\n+\n 2011-08-20  Uros Bizjak  <ubizjak@gmail.com>\n \t    Michael Matz  <matz@suse.de>\n "}, {"sha": "7b7ac8746ab75757e1e0ebb516fcd6100fef0772", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0cac80bf6b56e75a1fbafc4a0e077272fa03311/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0cac80bf6b56e75a1fbafc4a0e077272fa03311/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f0cac80bf6b56e75a1fbafc4a0e077272fa03311", "patch": "@@ -15787,16 +15787,12 @@ ix86_binary_operator_ok (enum rtx_code code, enum machine_mode mode,\n \n   /* Source 1 cannot be a non-matching memory.  */\n   if (MEM_P (src1) && !rtx_equal_p (dst, src1))\n-    {\n-      /* Support \"andhi/andsi/anddi\" as a zero-extending move.  */\n-      return (code == AND\n-\t      && (mode == HImode\n-\t\t  || mode == SImode\n-\t\t  || (TARGET_64BIT && mode == DImode))\n-\t      && CONST_INT_P (src2)\n-\t      && (INTVAL (src2) == 0xff\n-\t\t  || INTVAL (src2) == 0xffff));\n-    }\n+    /* Support \"andhi/andsi/anddi\" as a zero-extending move.  */\n+    return (code == AND\n+\t    && (mode == HImode\n+\t\t|| mode == SImode\n+\t\t|| (TARGET_64BIT && mode == DImode))\n+\t    && satisfies_constraint_L (src2));\n \n   return true;\n }"}]}