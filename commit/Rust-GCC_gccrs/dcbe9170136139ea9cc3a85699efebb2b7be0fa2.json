{"sha": "dcbe9170136139ea9cc3a85699efebb2b7be0fa2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNiZTkxNzAxMzYxMzllYTljYzNhODU2OTllZmViYjJiN2JlMGZhMg==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2018-01-09T10:38:45Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2018-01-09T10:38:45Z"}, "message": "Don't save registers in main().\n\ngcc/\n\tDon't save registers in main().\n\tPR target/83737\n\t* doc/invoke.texi (AVR Options) [-mmain-is-OS_task]: Document it.\n\t* config/avr/avr.opt (-mmain-is-OS_task): New target option.\n\t* config/avr/avr.c (avr_set_current_function): Don't error if\n\tnaked, OS_task or OS_main are specified at the same time.\n\t(avr_function_ok_for_sibcall): Don't disable sibcalls for OS_task,\n\tOS_main.\n\t(avr_insert_attributes) [-mmain-is-OS_task] <main>: Add OS_task\n\tattribute.\n\t* common/config/avr/avr-common.c (avr_option_optimization_table):\n\tSwitch on -mmain-is-OS_task for optimizing compilations.\n\nFrom-SVN: r256373", "tree": {"sha": "d471828ec0182d4421c163a4daf84820272c2f50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d471828ec0182d4421c163a4daf84820272c2f50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcbe9170136139ea9cc3a85699efebb2b7be0fa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcbe9170136139ea9cc3a85699efebb2b7be0fa2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcbe9170136139ea9cc3a85699efebb2b7be0fa2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcbe9170136139ea9cc3a85699efebb2b7be0fa2/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b25f84d0ff01aa4014428402029c46cda4c4a2a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b25f84d0ff01aa4014428402029c46cda4c4a2a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b25f84d0ff01aa4014428402029c46cda4c4a2a0"}], "stats": {"total": 80, "additions": 57, "deletions": 23}, "files": [{"sha": "bdda6c8de13659f5477b7284b0de1c6acee83d40", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcbe9170136139ea9cc3a85699efebb2b7be0fa2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcbe9170136139ea9cc3a85699efebb2b7be0fa2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dcbe9170136139ea9cc3a85699efebb2b7be0fa2", "patch": "@@ -1,3 +1,19 @@\n+2018-01-09  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tDon't save registers in main().\n+\n+\tPR target/83737\n+\t* doc/invoke.texi (AVR Options) [-mmain-is-OS_task]: Document it.\n+\t* config/avr/avr.opt (-mmain-is-OS_task): New target option.\n+\t* config/avr/avr.c (avr_set_current_function): Don't error if\n+\tnaked, OS_task or OS_main are specified at the same time.\n+\t(avr_function_ok_for_sibcall): Don't disable sibcalls for OS_task,\n+\tOS_main.\n+\t(avr_insert_attributes) [-mmain-is-OS_task] <main>: Add OS_task\n+\tattribute.\n+\t* common/config/avr/avr-common.c (avr_option_optimization_table):\n+\tSwitch on -mmain-is-OS_task for optimizing compilations.\n+\n 2018-01-09  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/83572"}, {"sha": "078584d53c3bd2edfdc3043c298cf118177a2fbb", "filename": "gcc/common/config/avr/avr-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcbe9170136139ea9cc3a85699efebb2b7be0fa2/gcc%2Fcommon%2Fconfig%2Favr%2Favr-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcbe9170136139ea9cc3a85699efebb2b7be0fa2/gcc%2Fcommon%2Fconfig%2Favr%2Favr-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Favr%2Favr-common.c?ref=dcbe9170136139ea9cc3a85699efebb2b7be0fa2", "patch": "@@ -31,6 +31,7 @@ static const struct default_options avr_option_optimization_table[] =\n     // a frame without need when it tries to be smart around calls.\n     { OPT_LEVELS_ALL, OPT_fcaller_saves, NULL, 0 },\n     { OPT_LEVELS_1_PLUS_NOT_DEBUG, OPT_mgas_isr_prologues, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS, OPT_mmain_is_OS_task, NULL, 1 },\n     { OPT_LEVELS_NONE, 0, NULL, 0 }\n   };\n "}, {"sha": "ad15512574118632aa20365e1e6293dd6036d1a6", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcbe9170136139ea9cc3a85699efebb2b7be0fa2/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcbe9170136139ea9cc3a85699efebb2b7be0fa2/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=dcbe9170136139ea9cc3a85699efebb2b7be0fa2", "patch": "@@ -1030,17 +1030,14 @@ avr_no_gccisr_function_p (tree func)\n static void\n avr_set_current_function (tree decl)\n {\n-  location_t loc;\n-  const char *isr;\n-\n   if (decl == NULL_TREE\n       || current_function_decl == NULL_TREE\n       || current_function_decl == error_mark_node\n       || ! cfun->machine\n       || cfun->machine->attributes_checked_p)\n     return;\n \n-  loc = DECL_SOURCE_LOCATION (decl);\n+  location_t loc = DECL_SOURCE_LOCATION (decl);\n \n   cfun->machine->is_naked = avr_naked_function_p (decl);\n   cfun->machine->is_signal = avr_signal_function_p (decl);\n@@ -1049,21 +1046,19 @@ avr_set_current_function (tree decl)\n   cfun->machine->is_OS_main = avr_OS_main_function_p (decl);\n   cfun->machine->is_no_gccisr = avr_no_gccisr_function_p (decl);\n \n-  isr = cfun->machine->is_interrupt ? \"interrupt\" : \"signal\";\n+  const char *isr = cfun->machine->is_interrupt ? \"interrupt\" : \"signal\";\n \n   /* Too much attributes make no sense as they request conflicting features. */\n \n-  if (cfun->machine->is_OS_task + cfun->machine->is_OS_main\n-      + (cfun->machine->is_signal || cfun->machine->is_interrupt) > 1)\n-    error_at (loc, \"function attributes %qs, %qs and %qs are mutually\"\n-              \" exclusive\", \"OS_task\", \"OS_main\", isr);\n-\n-  /* 'naked' will hide effects of 'OS_task' and 'OS_main'.  */\n+  if (cfun->machine->is_OS_task\n+      && (cfun->machine->is_signal || cfun->machine->is_interrupt))\n+    error_at (loc, \"function attributes %qs and %qs are mutually exclusive\",\n+              \"OS_task\", isr);\n \n-  if (cfun->machine->is_naked\n-      && (cfun->machine->is_OS_task || cfun->machine->is_OS_main))\n-    warning_at (loc, OPT_Wattributes, \"function attributes %qs and %qs have\"\n-                \" no effect on %qs function\", \"OS_task\", \"OS_main\", \"naked\");\n+  if (cfun->machine->is_OS_main\n+      && (cfun->machine->is_signal || cfun->machine->is_interrupt))\n+    error_at (loc, \"function attributes %qs and %qs are mutually exclusive\",\n+              \"OS_main\", isr);\n \n   if (cfun->machine->is_interrupt || cfun->machine->is_signal)\n     {\n@@ -3526,12 +3521,7 @@ avr_function_ok_for_sibcall (tree decl_callee, tree exp_callee)\n   if (cfun->machine->is_interrupt\n       || cfun->machine->is_signal\n       || cfun->machine->is_naked\n-      || avr_naked_function_p (decl_callee)\n-      /* FIXME: For OS_task and OS_main, this might be over-conservative.  */\n-      || (avr_OS_task_function_p (decl_callee)\n-          != cfun->machine->is_OS_task)\n-      || (avr_OS_main_function_p (decl_callee)\n-          != cfun->machine->is_OS_main))\n+      || avr_naked_function_p (decl_callee))\n     {\n       return false;\n     }\n@@ -10101,13 +10091,29 @@ avr_pgm_check_var_decl (tree node)\n }\n \n \n-/* Add the section attribute if the variable is in progmem.  */\n+/* Implement `TARGET_INSERT_ATTRIBUTES'.  */\n \n static void\n avr_insert_attributes (tree node, tree *attributes)\n {\n   avr_pgm_check_var_decl (node);\n \n+  if (TARGET_MAIN_IS_OS_TASK\n+      && TREE_CODE (node) == FUNCTION_DECL\n+      && MAIN_NAME_P (DECL_NAME (node))\n+      // FIXME:  We'd like to also test `flag_hosted' which is only\n+      // available in the C-ish fronts, hence no such test for now.\n+      // Instead, we test the return type of \"main\" which is not exactly\n+      // the same but good enough.\n+      && INTEGRAL_TYPE_P (TREE_TYPE (TREE_TYPE (node)))\n+      && NULL == lookup_attribute (\"OS_task\", *attributes))\n+    {\n+      *attributes = tree_cons (get_identifier (\"OS_task\"),\n+                               NULL, *attributes);\n+    }\n+\n+  /* Add the section attribute if the variable is in progmem.  */\n+\n   if (TREE_CODE (node) == VAR_DECL\n       && (TREE_STATIC (node) || DECL_EXTERNAL (node))\n       && avr_progmem_p (node, *attributes))"}, {"sha": "40177c28f7d6766f35d391dd1d772c5afafce991", "filename": "gcc/config/avr/avr.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcbe9170136139ea9cc3a85699efebb2b7be0fa2/gcc%2Fconfig%2Favr%2Favr.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcbe9170136139ea9cc3a85699efebb2b7be0fa2/gcc%2Fconfig%2Favr%2Favr.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.opt?ref=dcbe9170136139ea9cc3a85699efebb2b7be0fa2", "patch": "@@ -64,6 +64,10 @@ mbranch-cost=\n Target Report Joined RejectNegative UInteger Var(avr_branch_cost) Init(0)\n Set the branch costs for conditional branch instructions.  Reasonable values are small, non-negative integers.  The default branch cost is 0.\n \n+mmain-is-OS_task\n+Target Report Mask(MAIN_IS_OS_TASK)\n+Treat main as if it had attribute OS_task.\n+\n morder1\n Target Report Undocumented Mask(ORDER_1)\n "}, {"sha": "928561d0e8f4f1baaad54f6df4d3ea030f56366f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcbe9170136139ea9cc3a85699efebb2b7be0fa2/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcbe9170136139ea9cc3a85699efebb2b7be0fa2/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=dcbe9170136139ea9cc3a85699efebb2b7be0fa2", "patch": "@@ -669,7 +669,8 @@ Objective-C and Objective-C++ Dialects}.\n -mbranch-cost=@var{cost} @gol\n -mcall-prologues  -mgas-isr-prologues  -mint8 @gol\n -mn_flash=@var{size}  -mno-interrupts @gol\n--mrelax  -mrmw  -mstrict-X  -mtiny-stack  -mfract-convert-truncate @gol\n+-mmain-is-OS_task -mrelax  -mrmw  -mstrict-X  -mtiny-stack @gol\n+-mfract-convert-truncate @gol\n -mshort-calls  -nodevicelib @gol\n -Waddr-space-convert  -Wmisspelled-isr}\n \n@@ -16462,6 +16463,12 @@ and @code{long long} is 4 bytes.  Please note that this option does not\n conform to the C standards, but it results in smaller code\n size.\n \n+@item -mmain-is-OS_task\n+@opindex mmain-is-OS_task\n+Do not save registers in @code{main}.  The effect is the same like\n+attaching attribute @ref{AVR Function Attributes,,@code{OS_task}}\n+to @code{main}. It is activated per default if optimization is on.\n+\n @item -mn-flash=@var{num}\n @opindex mn-flash\n Assume that the flash memory has a size of "}]}