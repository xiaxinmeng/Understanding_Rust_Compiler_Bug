{"sha": "fa28f32bbc18ca8a8c1dcc7bfd49db63e09af539", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmEyOGYzMmJiYzE4Y2E4YThjMWRjYzdiZmQ0OWRiNjNlMDlhZjUzOQ==", "commit": {"author": {"name": "Aditya Kumar", "email": "aditya.k7@samsung.com", "date": "2016-01-21T02:14:12Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2016-01-21T02:14:12Z"}, "message": "fix codegen error exposed by compute isl flow patch\n\nwe used to fail using an iv from a different loop.\n\n\t* graphite-isl-ast-to-gimple.c (enum phi_node_kind): New.\n\t(class translate_isl_ast_to_gimple): Use phi_node_kind instead of bool.\n\t(is_valid_rename): Same.\n\t(translate_isl_ast_to_gimple::get_rename): Same.\n\t(translate_isl_ast_to_gimple::rename_all_uses): Same.\n\t(translate_isl_ast_to_gimple::rename_uses): Same.\n\t(get_new_name): Check for close_phi nodes.\n\t(copy_loop_phi_args): Use phi_node_kind.\n\t(translate_isl_ast_to_gimple::copy_loop_close_phi_args): Same.\n\t(translate_isl_ast_to_gimple::copy_cond_phi_args): Same.\n\ngcc/testsuite\n\n\t* gfortran.dg/graphite/interchange-3.f90: Adjust pattern.\n\nCo-Authored-By: Sebastian Pop <s.pop@samsung.com>\n\nFrom-SVN: r232660", "tree": {"sha": "1ce1c1a7a22e74bd522b00daa78a52888fc5164c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ce1c1a7a22e74bd522b00daa78a52888fc5164c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa28f32bbc18ca8a8c1dcc7bfd49db63e09af539", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa28f32bbc18ca8a8c1dcc7bfd49db63e09af539", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa28f32bbc18ca8a8c1dcc7bfd49db63e09af539", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa28f32bbc18ca8a8c1dcc7bfd49db63e09af539/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d198f097b982b60d23465356a8f9abc32762d4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d198f097b982b60d23465356a8f9abc32762d4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d198f097b982b60d23465356a8f9abc32762d4c"}], "stats": {"total": 69, "additions": 50, "deletions": 19}, "files": [{"sha": "f29a9f114152647b3089a13f68899eb85488b704", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa28f32bbc18ca8a8c1dcc7bfd49db63e09af539/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa28f32bbc18ca8a8c1dcc7bfd49db63e09af539/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa28f32bbc18ca8a8c1dcc7bfd49db63e09af539", "patch": "@@ -1,3 +1,17 @@\n+2016-01-21  Aditya Kumar  <aditya.k7@samsung.com>\n+\t    Sebastian Pop  <s.pop@samsung.com>\n+\n+\t* graphite-isl-ast-to-gimple.c (enum phi_node_kind): New.\n+\t(class translate_isl_ast_to_gimple): Use phi_node_kind instead of bool.\n+\t(is_valid_rename): Same.\n+\t(translate_isl_ast_to_gimple::get_rename): Same.\n+\t(translate_isl_ast_to_gimple::rename_all_uses): Same.\n+\t(translate_isl_ast_to_gimple::rename_uses): Same.\n+\t(get_new_name): Check for close_phi nodes.\n+\t(copy_loop_phi_args): Use phi_node_kind.\n+\t(translate_isl_ast_to_gimple::copy_loop_close_phi_args): Same.\n+\t(translate_isl_ast_to_gimple::copy_cond_phi_args): Same.\n+\n 2016-01-21  Aditya Kumar  <aditya.k7@samsung.com>\n \t    Sebastian Pop  <s.pop@samsung.com>\n "}, {"sha": "562cee0c8862aec9c8f7a98efac14ee8ae381375", "filename": "gcc/graphite-isl-ast-to-gimple.c", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa28f32bbc18ca8a8c1dcc7bfd49db63e09af539/gcc%2Fgraphite-isl-ast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa28f32bbc18ca8a8c1dcc7bfd49db63e09af539/gcc%2Fgraphite-isl-ast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-isl-ast-to-gimple.c?ref=fa28f32bbc18ca8a8c1dcc7bfd49db63e09af539", "patch": "@@ -138,6 +138,14 @@ set_separate_option (__isl_take isl_schedule_node *node, void *user)\n }\n #endif\n \n+enum phi_node_kind\n+{\n+  unknown_phi,\n+  loop_phi,\n+  close_phi,\n+  cond_phi\n+};\n+\n class translate_isl_ast_to_gimple\n {\n  public:\n@@ -328,14 +336,14 @@ class translate_isl_ast_to_gimple\n      SSA form.  */\n \n   bool is_valid_rename (tree rename, basic_block def_bb, basic_block use_bb,\n-\t\t\tbool loop_phi, tree old_name, basic_block old_bb) const;\n+\t\t\tphi_node_kind, tree old_name, basic_block old_bb) const;\n \n   /* Returns the expression associated to OLD_NAME (which is used in OLD_BB), in\n      NEW_BB from RENAME_MAP.  LOOP_PHI is true when we want to rename OLD_NAME\n      within a loop PHI instruction.  */\n \n   tree get_rename (basic_block new_bb, tree old_name,\n-\t\t   basic_block old_bb, bool loop_phi) const;\n+\t\t   basic_block old_bb, phi_node_kind) const;\n \n   /* For ops which are scev_analyzeable, we can regenerate a new name from\n   its scalar evolution around LOOP.  */\n@@ -355,7 +363,7 @@ class translate_isl_ast_to_gimple\n      true when we want to rename an OP within a loop PHI instruction.  */\n \n   tree get_new_name (basic_block new_bb, tree op,\n-\t\t     basic_block old_bb, bool loop_phi) const;\n+\t\t     basic_block old_bb, phi_node_kind) const;\n \n   /* Collect all the operands of NEW_EXPR by recursively visiting each\n      operand.  */\n@@ -1373,7 +1381,7 @@ phi_uses_name (basic_block bb, tree name)\n bool\n translate_isl_ast_to_gimple::\n is_valid_rename (tree rename, basic_block def_bb, basic_block use_bb,\n-\t\t bool loop_phi, tree old_name, basic_block old_bb) const\n+\t\t phi_node_kind phi_kind, tree old_name, basic_block old_bb) const\n {\n   /* The def of the rename must either dominate the uses or come from a\n      back-edge.  Also the def must respect the loop closed ssa form.  */\n@@ -1391,7 +1399,7 @@ is_valid_rename (tree rename, basic_block def_bb, basic_block use_bb,\n   if (dominated_by_p (CDI_DOMINATORS, use_bb, def_bb))\n     return true;\n \n-  if (bb_contains_loop_phi_nodes (use_bb) && loop_phi)\n+  if (bb_contains_loop_phi_nodes (use_bb) && phi_kind == loop_phi)\n     {\n       /* The loop-header dominates the loop-body.  */\n       if (!dominated_by_p (CDI_DOMINATORS, def_bb, use_bb))\n@@ -1410,14 +1418,13 @@ is_valid_rename (tree rename, basic_block def_bb, basic_block use_bb,\n }\n \n /* Returns the expression associated to OLD_NAME (which is used in OLD_BB), in\n-   NEW_BB from RENAME_MAP.  LOOP_PHI is true when we want to rename OLD_NAME\n-   within a loop PHI instruction.  */\n+   NEW_BB from RENAME_MAP.  PHI_KIND determines the kind of phi node.  */\n \n tree\n translate_isl_ast_to_gimple::get_rename (basic_block new_bb,\n \t\t\t\t\t tree old_name,\n \t\t\t\t\t basic_block old_bb,\n-\t\t\t\t\t bool loop_phi) const\n+\t\t\t\t\t phi_node_kind phi_kind) const\n {\n   gcc_assert (TREE_CODE (old_name) == SSA_NAME);\n   vec <tree> *renames = region->rename_map->get (old_name);\n@@ -1431,7 +1438,9 @@ translate_isl_ast_to_gimple::get_rename (basic_block new_bb,\n       if (TREE_CODE (rename) == SSA_NAME)\n \t{\n \t  basic_block bb = gimple_bb (SSA_NAME_DEF_STMT (rename));\n-\t  if (is_valid_rename (rename, bb, new_bb, loop_phi, old_name, old_bb))\n+\t  if (is_valid_rename (rename, bb, new_bb, phi_kind, old_name, old_bb)\n+\t      && (phi_kind == close_phi\n+\t\t  || flow_bb_inside_loop_p (bb->loop_father, new_bb)))\n \t    return rename;\n \t  return NULL_TREE;\n \t}\n@@ -1459,6 +1468,9 @@ translate_isl_ast_to_gimple::get_rename (basic_block new_bb,\n       if (!dominated_by_p (CDI_DOMINATORS, new_bb, t2_bb))\n \tcontinue;\n \n+      if (!flow_bb_inside_loop_p (t2_bb->loop_father, new_bb))\n+\tcontinue;\n+\n       /* Compute the nearest dominator.  */\n       if (!t1 || dominated_by_p (CDI_DOMINATORS, t2_bb, t1_bb))\n \t{\n@@ -1787,7 +1799,7 @@ translate_isl_ast_to_gimple::rename_all_uses (tree new_expr, basic_block new_bb,\n   tree t;\n   int i;\n   FOR_EACH_VEC_ELT (ssa_names, i, t)\n-    if (tree r = get_rename (new_bb, t, old_bb, false))\n+    if (tree r = get_rename (new_bb, t, old_bb, unknown_phi))\n       new_expr = substitute_ssa_name (new_expr, t, r);\n \n   return new_expr;\n@@ -1918,7 +1930,7 @@ translate_isl_ast_to_gimple::rename_uses (gimple *copy,\n \n       changed = true;\n       tree new_expr = get_rename (gsi_tgt->bb, old_name,\n-\t\t\t\t  old_bb, false);\n+\t\t\t\t  old_bb, unknown_phi);\n \n       if (new_expr)\n \t{\n@@ -2017,19 +2029,19 @@ translate_isl_ast_to_gimple::get_def_bb_for_const (basic_block bb,\n   return b1;\n }\n \n-/* Get the new name of OP (from OLD_BB) to be used in NEW_BB.  LOOP_PHI is true\n-   when we want to rename an OP within a loop PHI instruction.  */\n+/* Get the new name of OP (from OLD_BB) to be used in NEW_BB.  PHI_KIND\n+   determines the kind of phi node.  */\n \n tree\n translate_isl_ast_to_gimple::\n get_new_name (basic_block new_bb, tree op,\n-\t      basic_block old_bb, bool loop_phi) const\n+\t      basic_block old_bb, phi_node_kind phi_kind) const\n {\n   /* For constants the names are the same.  */\n   if (is_constant (op))\n     return op;\n \n-  return get_rename (new_bb, op, old_bb, loop_phi);\n+  return get_rename (new_bb, op, old_bb, phi_kind);\n }\n \n /* Return a debug location for OP.  */\n@@ -2084,7 +2096,7 @@ copy_loop_phi_args (gphi *old_phi, init_back_edge_pair_t &ibp_old_bb,\n \n       tree old_name = gimple_phi_arg_def (old_phi, i);\n       tree new_name = get_new_name (new_bb, old_name,\n-\t\t\t\t    gimple_bb (old_phi), true);\n+\t\t\t\t    gimple_bb (old_phi), loop_phi);\n       if (new_name)\n \t{\n \t  add_phi_arg (new_phi, new_name, e, get_loc (old_name));\n@@ -2346,7 +2358,7 @@ translate_isl_ast_to_gimple::copy_loop_close_phi_args (basic_block old_bb,\n       set_rename (res, new_res);\n \n       tree old_name = gimple_phi_arg_def (old_close_phi, 0);\n-      tree new_name = get_new_name (new_bb, old_name, old_bb, false);\n+      tree new_name = get_new_name (new_bb, old_name, old_bb, close_phi);\n \n       /* Predecessor basic blocks of a loop close phi should have been code\n \t generated before.  FIXME: This is fixable by merging PHIs from inner\n@@ -2620,7 +2632,7 @@ translate_isl_ast_to_gimple::copy_cond_phi_args (gphi *phi, gphi *new_phi,\n   for (unsigned i = 0; i < gimple_phi_num_args (phi); i++)\n     {\n       tree old_name = gimple_phi_arg_def (phi, i);\n-      tree new_name = get_new_name (new_bb, old_name, old_bb, false);\n+      tree new_name = get_new_name (new_bb, old_name, old_bb, cond_phi);\n       old_phi_args[i] = old_name;\n       if (new_name)\n \t{"}, {"sha": "50aa4392641f7997e8e18a65d0cd2cac36aae1ab", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa28f32bbc18ca8a8c1dcc7bfd49db63e09af539/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa28f32bbc18ca8a8c1dcc7bfd49db63e09af539/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fa28f32bbc18ca8a8c1dcc7bfd49db63e09af539", "patch": "@@ -1,3 +1,8 @@\n+2016-01-21  Aditya Kumar  <aditya.k7@samsung.com>\n+\t    Sebastian Pop  <s.pop@samsung.com>\n+\n+\t* gfortran.dg/graphite/interchange-3.f90: Adjust pattern.\n+\n 2016-01-21  Aditya Kumar  <aditya.k7@samsung.com>\n \t    Sebastian Pop  <s.pop@samsung.com>\n "}, {"sha": "a66ddfd147a1a81c1802a1e4c1968a61d5b4fac4", "filename": "gcc/testsuite/gfortran.dg/graphite/interchange-3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa28f32bbc18ca8a8c1dcc7bfd49db63e09af539/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Finterchange-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa28f32bbc18ca8a8c1dcc7bfd49db63e09af539/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Finterchange-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Finterchange-3.f90?ref=fa28f32bbc18ca8a8c1dcc7bfd49db63e09af539", "patch": "@@ -24,4 +24,4 @@ Program FOO\n \n end Program FOO\n \n-! { dg-final { scan-tree-dump \"tiled\" \"graphite\" } }\n+! { dg-final { scan-tree-dump-times \"unsuccessful, reverting back to the original code.\" \"1\" \"graphite\" } }"}]}