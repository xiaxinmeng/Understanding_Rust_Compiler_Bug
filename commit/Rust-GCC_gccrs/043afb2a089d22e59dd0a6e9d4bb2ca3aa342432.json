{"sha": "043afb2a089d22e59dd0a6e9d4bb2ca3aa342432", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQzYWZiMmEwODlkMjJlNTlkZDBhNmU5ZDRiYjJjYTNhYTM0MjQzMg==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-07-04T22:26:16Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-07-04T22:26:16Z"}, "message": "cpplex.c: Fix trigraph replacement within strings.\n\n\t* cpplex.c: Fix trigraph replacement within strings.\n\t* gcc.dg/cpp/lexident.c, gcc.dg/cpp/lexnum.c,\n\t  gcc.dg/cpp/lexstrng.c: New tests.\n\nFrom-SVN: r34868", "tree": {"sha": "817777257373fdb5986b614252de7d6ef1b8ad5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/817777257373fdb5986b614252de7d6ef1b8ad5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/043afb2a089d22e59dd0a6e9d4bb2ca3aa342432", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/043afb2a089d22e59dd0a6e9d4bb2ca3aa342432", "html_url": "https://github.com/Rust-GCC/gccrs/commit/043afb2a089d22e59dd0a6e9d4bb2ca3aa342432", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/043afb2a089d22e59dd0a6e9d4bb2ca3aa342432/comments", "author": null, "committer": null, "parents": [{"sha": "d2c1325af0ee17d224af50909f0dbcc70526b98d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2c1325af0ee17d224af50909f0dbcc70526b98d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2c1325af0ee17d224af50909f0dbcc70526b98d"}], "stats": {"total": 155, "additions": 154, "deletions": 1}, "files": [{"sha": "df412c1efa827916f23e35ae12ecaf939bdd4a9f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/043afb2a089d22e59dd0a6e9d4bb2ca3aa342432/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/043afb2a089d22e59dd0a6e9d4bb2ca3aa342432/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=043afb2a089d22e59dd0a6e9d4bb2ca3aa342432", "patch": "@@ -1,3 +1,7 @@\n+2000-07-05  Neil Booth  <NeilB@earthling.net>\n+\n+\t* cpplex.c: Fix trigraph replacement within strings.\n+\n 2000-07-04  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* rs6000/aix.h (ASM_GENERATE_INTERNAL_LABEL): Fix format specifier."}, {"sha": "b0fba653a613fbaa99a478418b2852e1e649576f", "filename": "gcc/cpplex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/043afb2a089d22e59dd0a6e9d4bb2ca3aa342432/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/043afb2a089d22e59dd0a6e9d4bb2ca3aa342432/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=043afb2a089d22e59dd0a6e9d4bb2ca3aa342432", "patch": "@@ -853,7 +853,7 @@ trigraph_replace (pfile, src, limit)\n   /* Starting with src[1], find two consecutive '?'.  The case of no\n      trigraphs is streamlined.  */\n   \n-  for (; src + 1 < limit; src += 2)\n+  for (src++; src + 1 < limit; src += 2)\n     {\n       if (src[0] != '?')\n \tcontinue;"}, {"sha": "6b233fc675e8e04ac868cdb529f4a21f1a0285ae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/043afb2a089d22e59dd0a6e9d4bb2ca3aa342432/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/043afb2a089d22e59dd0a6e9d4bb2ca3aa342432/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=043afb2a089d22e59dd0a6e9d4bb2ca3aa342432", "patch": "@@ -1,3 +1,8 @@\n+2000-07-05  Neil Booth  <NeilB@earthling.net>\n+\n+\t* gcc.dg/cpp/lexident.c, gcc.dg/cpp/lexnum.c,\n+\t  gcc.dg/cpp/lexstrng.c: New tests.\n+\n 2000-07-04  Neil Booth  <NeilB@earthling.net>\n \n \t* gcc.dg/cpp/macro1.c: Add more macro expansion tests."}, {"sha": "c914023b0fd7c01d3aa33167850f31dcd9d903d7", "filename": "gcc/testsuite/gcc.dg/cpp/lexident.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/043afb2a089d22e59dd0a6e9d4bb2ca3aa342432/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Flexident.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/043afb2a089d22e59dd0a6e9d4bb2ca3aa342432/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Flexident.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Flexident.c?ref=043afb2a089d22e59dd0a6e9d4bb2ca3aa342432", "patch": "@@ -0,0 +1,25 @@\n+/* Copyright (C) 2000 Free Software Foundation, Inc.  */\n+\n+/* { dg-do preprocess } */\n+/* { dg-options \"-trigraphs\" } */\n+\n+/* Test lexing of identifiers.  */\n+\n+/* Escaped newlines, _ and $ in identifiers.  */\n+#def\\\n+\\\n+ine foo_\n+\n+#d\\\n+ef??/\n+in\\\n+e b\\\n+a$r\n+\n+#ifndef foo_\n+#error foo_\n+#endif\n+\n+#ifndef ba$r\n+#error ba$r\n+#endif"}, {"sha": "7df15540833a7f69bf895139a14a4cd3d7c2d071", "filename": "gcc/testsuite/gcc.dg/cpp/lexnum.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/043afb2a089d22e59dd0a6e9d4bb2ca3aa342432/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Flexnum.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/043afb2a089d22e59dd0a6e9d4bb2ca3aa342432/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Flexnum.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Flexnum.c?ref=043afb2a089d22e59dd0a6e9d4bb2ca3aa342432", "patch": "@@ -0,0 +1,50 @@\n+/* Copyright (C) 2000 Free Software Foundation, Inc.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-trigraphs\" } */\n+\n+/* Test lexing of numbers.  */\n+\n+extern int puts (const char *);\n+extern void abort (void);\n+#define err(str) do { puts(str); abort(); } while (0)\n+\n+/* Escaped newlines.  */\n+#define foo 12\\\n+3\\\n+\\\n+4??/\n+5\n+\n+#if foo != 12345\n+#error foo\n+#endif\n+\n+int main (int argc, char *argv[])\n+{\n+  double a = 5.;\n+  double x = .5;\n+\n+/* Decimal points, including initially and immediately before and\n+   after an escaped newline.  */\n+  if (a != 5)\n+    err (\"a\");\n+  if (x != .\\\n+5)\n+    err (\"x != .5\");\n+  x = 25\\\n+.\\\n+6;\n+  if (x != 25.6)\n+    err (\"x != 25.6\");\n+\n+  /* Test exponentials and their signs.  A buggy lexer is more likely\n+     to fail the compile, but never mind.  */\n+  if (250 != 25e+1 || 250 != 25e1 || 250 != 2500e-1)\n+    err (\"exponentials\");\n+\n+  /* Todo: p exponentials, and how to test preprocessing number\n+     tokenisation?  */\n+\n+  return 0;\n+}"}, {"sha": "4fbb3b555eb688d118f14c8e899cb278685c3be1", "filename": "gcc/testsuite/gcc.dg/cpp/lexstrng.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/043afb2a089d22e59dd0a6e9d4bb2ca3aa342432/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Flexstrng.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/043afb2a089d22e59dd0a6e9d4bb2ca3aa342432/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Flexstrng.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Flexstrng.c?ref=043afb2a089d22e59dd0a6e9d4bb2ca3aa342432", "patch": "@@ -0,0 +1,69 @@\n+/* Copyright (C) 2000 Free Software Foundation, Inc.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-trigraphs\" } */\n+\n+/* Test lexing of strings and character constants.  */\n+\n+#include <string.h>\n+\n+#ifndef __WCHAR_TYPE__\n+#define __WCHAR_TYPE__ int\n+#endif\n+typedef __WCHAR_TYPE__ wchar_t;\n+\n+extern int strcmp (const char *, const char *);\n+extern int puts (const char *);\n+extern void abort (void);\n+#define err(str) do { puts(str); abort(); } while (0)\n+\n+/* Escaped newlines.  */\n+const char *str1 = \"s\\\n+t\\\n+\\\n+r??/\n+  1\";\n+\n+const char x = '\\\n+??/\n+b';\n+\n+/* Test escaped terminators.  */\n+const char *term = \"\\\"\\\\\\\"\\\\\";\n+const char termc = '\\'';\n+const char *terms = \"'\";\n+\n+/* Test wide strings and chars are lexed.  */\n+const wchar_t wchar = L'w';\n+const wchar_t* wstring = L\"wide string\";\n+\n+/* Test all 9 trigraphs embedded in a string.  Test trigraphs do not\n+   survive an embedded backslash newline.  Test trigraphs preceded by\n+   a '?' are still noticed.  */\n+const char *t = \"??/\\??<??>??=??)??\\\n+(??(??!??'??-???=???/\n+?-\";\n+\n+int main (int argc, char *argv[])\n+{\n+  if (strcmp (str1, \"str  1\"))\n+    err (\"str1\");\n+\n+  if (x != 'b')\n+    err (\"b\");\n+\n+  /* We have to split the string up to avoid trigraph replacement\n+     here.  Split the 2 trigraphs after both 1 and 2 ?s; just doing\n+     this exposed a bug in the initial release of the tokenized lexer.  */\n+  if (strcmp (t, \"\\\\{}#]?\" \"?([|^~?#??\" \"-\"))\n+    err (\"Embedded trigraphs\");\n+\n+  if (term[0] != '\"' || term[1] != '\\\\' || term[2] != '\"'\n+      || term[3] != '\\\\' || term[4] != '\\0')\n+    err (\"Escaped string terminators\");\n+\n+  if (termc != terms[0])\n+    err (\"Escaped character constant terminator\");\n+\n+  return 0;\n+}"}]}