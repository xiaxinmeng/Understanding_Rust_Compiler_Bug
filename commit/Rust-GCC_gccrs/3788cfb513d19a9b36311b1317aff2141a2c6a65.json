{"sha": "3788cfb513d19a9b36311b1317aff2141a2c6a65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc4OGNmYjUxM2QxOWE5YjM2MzExYjEzMTdhZmYyMTQxYTJjNmE2NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-11-24T10:45:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-11-24T10:45:52Z"}, "message": "re PR target/68483 (gcc 5.2: suboptimal code compared to 4.9)\n\n\tPR target/68483\n\t* tree-vect-generic.c (lower_vec_perm): If VEC_PERM_EXPR\n\tis valid vec_shr pattern, don't lower it even if can_vec_perm_p\n\treturns false.\n\t* optabs.c (shift_amt_for_vec_perm_mask): Return NULL_RTX\n\twhenever first is nelt or above.  Don't mask expected with\n\t2 * nelt - 1.\n\n\t* gcc.target/i386/pr68483-1.c: New test.\n\t* gcc.target/i386/pr68483-2.c: New test.\n\nFrom-SVN: r230797", "tree": {"sha": "64cec4dd60c911068b6646624ee5ba614d073759", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64cec4dd60c911068b6646624ee5ba614d073759"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3788cfb513d19a9b36311b1317aff2141a2c6a65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3788cfb513d19a9b36311b1317aff2141a2c6a65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3788cfb513d19a9b36311b1317aff2141a2c6a65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3788cfb513d19a9b36311b1317aff2141a2c6a65/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3de2a40ecdfa37efa403d4b46ef116225acb0dc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3de2a40ecdfa37efa403d4b46ef116225acb0dc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3de2a40ecdfa37efa403d4b46ef116225acb0dc0"}], "stats": {"total": 81, "additions": 79, "deletions": 2}, "files": [{"sha": "d91c9292f5ff72609956dbe2eb216855458f3905", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3788cfb513d19a9b36311b1317aff2141a2c6a65/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3788cfb513d19a9b36311b1317aff2141a2c6a65/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3788cfb513d19a9b36311b1317aff2141a2c6a65", "patch": "@@ -1,3 +1,13 @@\n+2015-11-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/68483\n+\t* tree-vect-generic.c (lower_vec_perm): If VEC_PERM_EXPR\n+\tis valid vec_shr pattern, don't lower it even if can_vec_perm_p\n+\treturns false.\n+\t* optabs.c (shift_amt_for_vec_perm_mask): Return NULL_RTX\n+\twhenever first is nelt or above.  Don't mask expected with\n+\t2 * nelt - 1.\n+\n 2015-11-24  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \n \tPR c/68337"}, {"sha": "40ef5829150e8760ee90d226c3172e7efb7bd1d1", "filename": "gcc/optabs.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3788cfb513d19a9b36311b1317aff2141a2c6a65/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3788cfb513d19a9b36311b1317aff2141a2c6a65/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=3788cfb513d19a9b36311b1317aff2141a2c6a65", "patch": "@@ -5232,12 +5232,12 @@ shift_amt_for_vec_perm_mask (rtx sel)\n     return NULL_RTX;\n \n   first = INTVAL (CONST_VECTOR_ELT (sel, 0));\n-  if (first >= 2*nelt)\n+  if (first >= nelt)\n     return NULL_RTX;\n   for (i = 1; i < nelt; i++)\n     {\n       int idx = INTVAL (CONST_VECTOR_ELT (sel, i));\n-      unsigned int expected = (i + first) & (2 * nelt - 1);\n+      unsigned int expected = i + first;\n       /* Indices into the second vector are all equivalent.  */\n       if (idx < 0 || (MIN (nelt, (unsigned) idx) != MIN (nelt, expected)))\n \treturn NULL_RTX;"}, {"sha": "3c3e3cdf2bcc0ce66858a09ce7cb560eb128137d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3788cfb513d19a9b36311b1317aff2141a2c6a65/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3788cfb513d19a9b36311b1317aff2141a2c6a65/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3788cfb513d19a9b36311b1317aff2141a2c6a65", "patch": "@@ -1,3 +1,9 @@\n+2015-11-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/68483\n+\t* gcc.target/i386/pr68483-1.c: New test.\n+\t* gcc.target/i386/pr68483-2.c: New test.\n+\n 2015-11-24  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \n \tPR c/68337"}, {"sha": "29787e94bd3877374ee55f503b37cf627e8363a4", "filename": "gcc/testsuite/gcc.target/i386/pr68483-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3788cfb513d19a9b36311b1317aff2141a2c6a65/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr68483-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3788cfb513d19a9b36311b1317aff2141a2c6a65/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr68483-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr68483-1.c?ref=3788cfb513d19a9b36311b1317aff2141a2c6a65", "patch": "@@ -0,0 +1,22 @@\n+/* PR target/68483 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -msse2 -mno-sse3\" } */\n+\n+void\n+test (int *input, int *out, unsigned x1, unsigned x2)\n+{\n+  unsigned i, j;\n+  unsigned end = x1;\n+\n+  for (i = j = 0; i < 1000; i++)\n+    {\n+      int sum = 0;\n+      end += x2;\n+      for (; j < end; j++)\n+\tsum += input[j];\n+      out[i] = sum;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler \"psrldq\\[^\\n\\r]*(8,|, 8)\" { target ia32 } } } */\n+/* { dg-final { scan-assembler \"psrldq\\[^\\n\\r]*(4,|, 4)\" { target ia32 } } } */"}, {"sha": "394dc1bac7630af9fe5d7f7ba5ad94d7100e87d2", "filename": "gcc/testsuite/gcc.target/i386/pr68483-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3788cfb513d19a9b36311b1317aff2141a2c6a65/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr68483-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3788cfb513d19a9b36311b1317aff2141a2c6a65/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr68483-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr68483-2.c?ref=3788cfb513d19a9b36311b1317aff2141a2c6a65", "patch": "@@ -0,0 +1,15 @@\n+/* PR target/68483 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2 -mno-sse3\" } */\n+\n+typedef int V __attribute__((vector_size (16)));\n+\n+void\n+foo (V *a, V *b)\n+{\n+  V c = { 0, 0, 0, 0 };\n+  V d = { 1, 2, 3, 4 };\n+  *a = __builtin_shuffle (*b, c, d);\n+}\n+\n+/* { dg-final { scan-assembler \"psrldq\\[^\\n\\r]*(4,|, 4)\" } } */"}, {"sha": "2c7adf737b00e6ee64beaff628e48f7d351ba819", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3788cfb513d19a9b36311b1317aff2141a2c6a65/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3788cfb513d19a9b36311b1317aff2141a2c6a65/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=3788cfb513d19a9b36311b1317aff2141a2c6a65", "patch": "@@ -1272,6 +1272,30 @@ lower_vec_perm (gimple_stmt_iterator *gsi)\n \t  update_stmt (stmt);\n \t  return;\n \t}\n+      /* Also detect vec_shr pattern - VEC_PERM_EXPR with zero\n+\t vector as VEC1 and a right element shift MASK.  */\n+      if (optab_handler (vec_shr_optab, TYPE_MODE (vect_type))\n+\t  != CODE_FOR_nothing\n+\t  && TREE_CODE (vec1) == VECTOR_CST\n+\t  && initializer_zerop (vec1)\n+\t  && sel_int[0]\n+\t  && sel_int[0] < elements)\n+\t{\n+\t  for (i = 1; i < elements; ++i)\n+\t    {\n+\t      unsigned int expected = i + sel_int[0];\n+\t      /* Indices into the second vector are all equivalent.  */\n+\t      if (MIN (elements, (unsigned) sel_int[i])\n+\t\t  != MIN (elements, expected))\n+ \t\tbreak;\n+\t    }\n+\t  if (i == elements)\n+\t    {\n+\t      gimple_assign_set_rhs3 (stmt, mask);\n+\t      update_stmt (stmt);\n+\t      return;\n+\t    }\n+\t}\n     }\n   else if (can_vec_perm_p (TYPE_MODE (vect_type), true, NULL))\n     return;"}]}