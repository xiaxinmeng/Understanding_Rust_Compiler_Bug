{"sha": "1f0ed17c4e88d930d29f1b372d218ff691dea3b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYwZWQxN2M0ZTg4ZDkzMGQyOWYxYjM3MmQyMThmZjY5MWRlYTNiNg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-05-16T13:12:01Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-05-16T13:12:01Z"}, "message": "pt.c (tsubst_copy_and_build): Remove unnecessary COMPONENT_REF peeking.\n\n\t* pt.c (tsubst_copy_and_build): Remove unnecessary COMPONENT_REF\n\tpeeking.\n\t* semantics.c (finish_id_expression): Directly init local var.\n\t(finish_omp_reduction_clause): Use really_overloaded_fn.\n\t* tree.c (get_fns): Document.  Assert we got an overload.\n\t(get_first_fn) Document.\n\t* typeck.c (cp_build_addr_expr_1): Pass arg directly to\n\treally_overloaded_fn.\n\t* typeck2.c (cxx_inomplete_type_diagnostic): Use get_first_fn directly.\n\nFrom-SVN: r248106", "tree": {"sha": "dcbf7ea722daee0f7d3be438882069680a076f7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcbf7ea722daee0f7d3be438882069680a076f7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f0ed17c4e88d930d29f1b372d218ff691dea3b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f0ed17c4e88d930d29f1b372d218ff691dea3b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f0ed17c4e88d930d29f1b372d218ff691dea3b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f0ed17c4e88d930d29f1b372d218ff691dea3b6/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2c27a627a31034165af6c01e07a69d867010fbbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c27a627a31034165af6c01e07a69d867010fbbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c27a627a31034165af6c01e07a69d867010fbbd"}], "stats": {"total": 39, "additions": 25, "deletions": 14}, "files": [{"sha": "ee25eface709272922f4b3a07277d3102b6749c1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f0ed17c4e88d930d29f1b372d218ff691dea3b6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f0ed17c4e88d930d29f1b372d218ff691dea3b6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1f0ed17c4e88d930d29f1b372d218ff691dea3b6", "patch": "@@ -1,5 +1,15 @@\n 2017-05-16  Nathan Sidwell  <nathan@acm.org>\n \n+\t* pt.c (tsubst_copy_and_build): Remove unnecessary COMPONENT_REF\n+\tpeeking.\n+\t* semantics.c (finish_id_expression): Directly init local var.\n+\t(finish_omp_reduction_clause): Use really_overloaded_fn.\n+\t* tree.c (get_fns): Document.  Assert we got an overload.\n+\t(get_first_fn) Document.\n+\t* typeck.c (cp_build_addr_expr_1): Pass arg directly to\n+\treally_overloaded_fn.\n+\t* typeck2.c (cxx_inomplete_type_diagnostic): Use get_first_fn directly.\n+\n \t* cp-tree.h (SCOPE_DEPTH): New.\n \t* name-lookup.h (is_nested_namespace): Declare.\n \t* name-lookup.c (is_nested_namespace): New."}, {"sha": "8f120aa144603b8139f71bbfb5fc7a7573465e63", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f0ed17c4e88d930d29f1b372d218ff691dea3b6/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f0ed17c4e88d930d29f1b372d218ff691dea3b6/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1f0ed17c4e88d930d29f1b372d218ff691dea3b6", "patch": "@@ -17187,10 +17187,9 @@ tsubst_copy_and_build (tree t,\n \t\t    if (diag)\n \t\t      {\n \t\t\ttree fn = unq;\n+\n \t\t\tif (INDIRECT_REF_P (fn))\n \t\t\t  fn = TREE_OPERAND (fn, 0);\n-\t\t\tif (TREE_CODE (fn) == COMPONENT_REF)\n-\t\t\t  fn = TREE_OPERAND (fn, 1);\n \t\t\tif (is_overloaded_fn (fn))\n \t\t\t  fn = get_first_fn (fn);\n "}, {"sha": "6c46823cec0ce6a3892a632b2d9fe13bdde7f612", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f0ed17c4e88d930d29f1b372d218ff691dea3b6/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f0ed17c4e88d930d29f1b372d218ff691dea3b6/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=1f0ed17c4e88d930d29f1b372d218ff691dea3b6", "patch": "@@ -3749,9 +3749,8 @@ finish_id_expression (tree id_expression,\n \t}\n       else if (is_overloaded_fn (decl))\n \t{\n-\t  tree first_fn;\n+\t  tree first_fn = get_first_fn (decl);\n \n-\t  first_fn = get_first_fn (decl);\n \t  if (TREE_CODE (first_fn) == TEMPLATE_DECL)\n \t    first_fn = DECL_TEMPLATE_RESULT (first_fn);\n \n@@ -5615,7 +5614,6 @@ finish_omp_reduction_clause (tree c, bool *need_default_ctor, bool *need_dtor)\n     {\n       if (id == error_mark_node)\n \treturn true;\n-      id = OVL_CURRENT (id);\n       mark_used (id);\n       tree body = DECL_SAVED_TREE (id);\n       if (!body)\n@@ -6924,13 +6922,13 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t    {\n \t      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_TO_DECLARE)\n \t\t{\n-\t\t  if (TREE_CODE (t) == OVERLOAD && OVL_CHAIN (t))\n+\t\t  if (TREE_CODE (t) == TEMPLATE_ID_EXPR)\n \t\t    error_at (OMP_CLAUSE_LOCATION (c),\n-\t\t\t      \"overloaded function name %qE in clause %qs\", t,\n+\t\t\t      \"template %qE in clause %qs\", t,\n \t\t\t      omp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n-\t\t  else if (TREE_CODE (t) == TEMPLATE_ID_EXPR)\n+\t\t  else if (really_overloaded_fn (t))\n \t\t    error_at (OMP_CLAUSE_LOCATION (c),\n-\t\t\t      \"template %qE in clause %qs\", t,\n+\t\t\t      \"overloaded function name %qE in clause %qs\", t,\n \t\t\t      omp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n \t\t  else\n \t\t    error_at (OMP_CLAUSE_LOCATION (c),"}, {"sha": "2382f14b57133c669ec7af350691e8eb17b219e7", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f0ed17c4e88d930d29f1b372d218ff691dea3b6/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f0ed17c4e88d930d29f1b372d218ff691dea3b6/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=1f0ed17c4e88d930d29f1b372d218ff691dea3b6", "patch": "@@ -2146,10 +2146,11 @@ really_overloaded_fn (tree x)\n   return is_overloaded_fn (x) == 2;\n }\n \n+/* Get the overload set FROM refers to.  */\n+\n tree\n get_fns (tree from)\n {\n-  gcc_assert (is_overloaded_fn (from));\n   /* A baselink is also considered an overloaded function.  */\n   if (TREE_CODE (from) == OFFSET_REF\n       || TREE_CODE (from) == COMPONENT_REF)\n@@ -2158,9 +2159,13 @@ get_fns (tree from)\n     from = BASELINK_FUNCTIONS (from);\n   if (TREE_CODE (from) == TEMPLATE_ID_EXPR)\n     from = TREE_OPERAND (from, 0);\n+  gcc_assert (TREE_CODE (from) == OVERLOAD\n+\t      || TREE_CODE (from) == FUNCTION_DECL);\n   return from;\n }\n \n+/* Return the first function of the overload set FROM refers to.  */\n+\n tree\n get_first_fn (tree from)\n {"}, {"sha": "6bc88a9d780ea11963d5ae510309e7b36241439d", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f0ed17c4e88d930d29f1b372d218ff691dea3b6/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f0ed17c4e88d930d29f1b372d218ff691dea3b6/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=1f0ed17c4e88d930d29f1b372d218ff691dea3b6", "patch": "@@ -5603,7 +5603,7 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n   gcc_assert (!identifier_p (arg) || !IDENTIFIER_OPNAME_P (arg));\n \n   if (TREE_CODE (arg) == COMPONENT_REF && type_unknown_p (arg)\n-      && !really_overloaded_fn (TREE_OPERAND (arg, 1)))\n+      && !really_overloaded_fn (arg))\n     {\n       /* They're trying to take the address of a unique non-static\n \t member function.  This is ill-formed (except in MS-land),"}, {"sha": "b469fdb7b2828d9f3b0c812549c8c42d497e5c08", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f0ed17c4e88d930d29f1b372d218ff691dea3b6/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f0ed17c4e88d930d29f1b372d218ff691dea3b6/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=1f0ed17c4e88d930d29f1b372d218ff691dea3b6", "patch": "@@ -506,9 +506,8 @@ cxx_incomplete_type_diagnostic (location_t loc, const_tree value,\n     case OFFSET_TYPE:\n     bad_member:\n       {\n-\ttree member = TREE_OPERAND (value, 1);\n-\tif (is_overloaded_fn (member))\n-\t  member = get_first_fn (member);\n+\ttree member = get_first_fn (TREE_OPERAND (value, 1));\n+\n \tif (DECL_FUNCTION_MEMBER_P (member)\n \t    && ! flag_ms_extensions)\n \t  emit_diagnostic (diag_kind, loc, 0,"}]}