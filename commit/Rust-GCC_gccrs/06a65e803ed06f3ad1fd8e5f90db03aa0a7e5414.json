{"sha": "06a65e803ed06f3ad1fd8e5f90db03aa0a7e5414", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZhNjVlODAzZWQwNmYzYWQxZmQ4ZTVmOTBkYjAzYWEwYTdlNTQxNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-07-01T08:58:10Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-07-01T08:58:10Z"}, "message": "Simplify ira_setup_alts\n\nira_setup_alts has its own code to calculate the start of the\nconstraint string for each operand/alternative combination,\nbut preprocess_constraints now provides that information in (almost)\nconstant time for non-asm instructions.  Using it here should speed\nup the common case at the cost of potentially slowing down the handling\nof asm statements.\n\nThe real reason for doing this is that a later patch wants to use\nmore of the operand_alternative information.\n\n2019-07-01  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* ira.c (ira_setup_alts): Use preprocess_constraints to get the\n\tconstraint string for each operand/alternative combo.  Only handle\n\t'%' at the start of constraint strings, and look for it outside\n\tthe main loop.\n\nFrom-SVN: r272848", "tree": {"sha": "6940b92b1a8f077ca6550349583923c1ea3259c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6940b92b1a8f077ca6550349583923c1ea3259c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06a65e803ed06f3ad1fd8e5f90db03aa0a7e5414", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06a65e803ed06f3ad1fd8e5f90db03aa0a7e5414", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06a65e803ed06f3ad1fd8e5f90db03aa0a7e5414", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06a65e803ed06f3ad1fd8e5f90db03aa0a7e5414/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "73bb8fe9e915cf3219f16afdc61c308c08aa7659", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73bb8fe9e915cf3219f16afdc61c308c08aa7659", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73bb8fe9e915cf3219f16afdc61c308c08aa7659"}], "stats": {"total": 45, "additions": 17, "deletions": 28}, "files": [{"sha": "d006f50b524b41e8c4b5fded091baaf9fd5fa4c5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a65e803ed06f3ad1fd8e5f90db03aa0a7e5414/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a65e803ed06f3ad1fd8e5f90db03aa0a7e5414/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06a65e803ed06f3ad1fd8e5f90db03aa0a7e5414", "patch": "@@ -1,3 +1,10 @@\n+2019-07-01  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* ira.c (ira_setup_alts): Use preprocess_constraints to get the\n+\tconstraint string for each operand/alternative combo.  Only handle\n+\t'%' at the start of constraint strings, and look for it outside\n+\tthe main loop.\n+\n 2019-07-01  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* ira-int.h (ira_setup_alts, ira_get_dup_out_num): Use"}, {"sha": "4075522ab1dbd55189a7a370a9e584b04621e852", "filename": "gcc/ira.c", "status": "modified", "additions": 10, "deletions": 28, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a65e803ed06f3ad1fd8e5f90db03aa0a7e5414/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a65e803ed06f3ad1fd8e5f90db03aa0a7e5414/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=06a65e803ed06f3ad1fd8e5f90db03aa0a7e5414", "patch": "@@ -1791,60 +1791,42 @@ setup_prohibited_mode_move_regs (void)\n alternative_mask\n ira_setup_alts (rtx_insn *insn)\n {\n-  /* MAP nalt * nop -> start of constraints for given operand and\n-     alternative.  */\n-  static vec<const char *> insn_constraints;\n   int nop, nalt;\n   bool curr_swapped;\n   const char *p;\n   int commutative = -1;\n \n   extract_insn (insn);\n+  preprocess_constraints (insn);\n   alternative_mask preferred = get_preferred_alternatives (insn);\n   alternative_mask alts = 0;\n-  insn_constraints.release ();\n-  insn_constraints.safe_grow_cleared (recog_data.n_operands\n-\t\t\t\t      * recog_data.n_alternatives + 1);\n   /* Check that the hard reg set is enough for holding all\n      alternatives.  It is hard to imagine the situation when the\n      assertion is wrong.  */\n   ira_assert (recog_data.n_alternatives\n \t      <= (int) MAX (sizeof (HARD_REG_ELT_TYPE) * CHAR_BIT,\n \t\t\t    FIRST_PSEUDO_REGISTER));\n+  for (nop = 0; nop < recog_data.n_operands; nop++)\n+    if (recog_data.constraints[nop][0] == '%')\n+      {\n+\tcommutative = nop;\n+\tbreak;\n+      }\n   for (curr_swapped = false;; curr_swapped = true)\n     {\n-      /* Calculate some data common for all alternatives to speed up the\n-\t function.  */\n-      for (nop = 0; nop < recog_data.n_operands; nop++)\n-\t{\n-\t  for (nalt = 0, p = recog_data.constraints[nop];\n-\t       nalt < recog_data.n_alternatives;\n-\t       nalt++)\n-\t    {\n-\t      insn_constraints[nop * recog_data.n_alternatives + nalt] = p;\n-\t      while (*p && *p != ',')\n-\t\t{\n-\t\t  /* We only support one commutative marker, the first\n-\t\t     one.  We already set commutative above.  */\n-\t\t  if (*p == '%' && commutative < 0)\n-\t\t    commutative = nop;\n-\t\t  p++;\n-\t\t}\n-\t      if (*p)\n-\t\tp++;\n-\t    }\n-\t}\n       for (nalt = 0; nalt < recog_data.n_alternatives; nalt++)\n \t{\n \t  if (!TEST_BIT (preferred, nalt) || TEST_BIT (alts, nalt))\n \t    continue;\n \n+\t  const operand_alternative *op_alt\n+\t    = &recog_op_alt[nalt * recog_data.n_operands];\n \t  for (nop = 0; nop < recog_data.n_operands; nop++)\n \t    {\n \t      int c, len;\n \n \t      rtx op = recog_data.operand[nop];\n-\t      p = insn_constraints[nop * recog_data.n_alternatives + nalt];\n+\t      p = op_alt[nop].constraint;\n \t      if (*p == 0 || *p == ',')\n \t\tcontinue;\n \t      "}]}