{"sha": "8286793a2b050a9c51501b0b3737ff73c71d189d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI4Njc5M2EyYjA1MGE5YzUxNTAxYjBiMzczN2ZmNzNjNzFkMTg5ZA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-03-09T19:06:26Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-03-09T19:06:26Z"}, "message": "re PR tree-optimization/84526 (ICE in generic_overlap at gcc/gimple-ssa-warn-restrict.c:927 since r257860)\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/84526\n\t* gimple-ssa-warn-restrict.c (builtin_memref::set_base_and_offset):\n\tRemove dead code.\n\t(builtin_access::generic_overlap): Be prepared to handle non-array\n\tbase objects.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/84526\n\t* gcc.dg/Wrestrict-10.c: New test.\n\t* gcc.dg/Wrestrict-11.c: New test.\n\nFrom-SVN: r258394", "tree": {"sha": "cc73b1389589bc7c3249fa1b253487085b72d0a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc73b1389589bc7c3249fa1b253487085b72d0a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8286793a2b050a9c51501b0b3737ff73c71d189d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8286793a2b050a9c51501b0b3737ff73c71d189d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8286793a2b050a9c51501b0b3737ff73c71d189d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8286793a2b050a9c51501b0b3737ff73c71d189d/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "998fd1413977a70cfeb7bf9180f3b462a7731237", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/998fd1413977a70cfeb7bf9180f3b462a7731237", "html_url": "https://github.com/Rust-GCC/gccrs/commit/998fd1413977a70cfeb7bf9180f3b462a7731237"}], "stats": {"total": 386, "additions": 370, "deletions": 16}, "files": [{"sha": "346262eec23f8de9a7a9b19d9b0f7fb3c5e2591a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8286793a2b050a9c51501b0b3737ff73c71d189d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8286793a2b050a9c51501b0b3737ff73c71d189d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8286793a2b050a9c51501b0b3737ff73c71d189d", "patch": "@@ -1,3 +1,11 @@\n+2018-03-09  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/84526\n+\t* gimple-ssa-warn-restrict.c (builtin_memref::set_base_and_offset):\n+\tRemove dead code.\n+\t(builtin_access::generic_overlap): Be prepared to handle non-array\n+\tbase objects.\n+\n 2018-03-09  Alexandre Oliva <aoliva@redhat.com>\n \n \tPR rtl-optimization/84682"}, {"sha": "25cc032c2da9c038e8a12f892cdb7d5c37745810", "filename": "gcc/gimple-ssa-warn-restrict.c", "status": "modified", "additions": 30, "deletions": 16, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8286793a2b050a9c51501b0b3737ff73c71d189d/gcc%2Fgimple-ssa-warn-restrict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8286793a2b050a9c51501b0b3737ff73c71d189d/gcc%2Fgimple-ssa-warn-restrict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-restrict.c?ref=8286793a2b050a9c51501b0b3737ff73c71d189d", "patch": "@@ -396,6 +396,9 @@ builtin_memref::set_base_and_offset (tree expr)\n   if (TREE_CODE (expr) == ADDR_EXPR)\n     expr = TREE_OPERAND (expr, 0);\n \n+  /* Stash the reference for offset validation.  */\n+  ref = expr;\n+\n   poly_int64 bitsize, bitpos;\n   tree var_off;\n   machine_mode mode;\n@@ -409,37 +412,40 @@ builtin_memref::set_base_and_offset (tree expr)\n   base = get_inner_reference (expr, &bitsize, &bitpos, &var_off,\n \t\t\t      &mode, &sign, &reverse, &vol);\n \n+  /* get_inner_reference is not expected to return null.  */\n+  gcc_assert (base != NULL);\n+\n   poly_int64 bytepos = exact_div (bitpos, BITS_PER_UNIT);\n \n-  HOST_WIDE_INT const_off;\n-  if (!base || !bytepos.is_constant (&const_off))\n+  /* Convert the poly_int64 offset to to offset_int.  The offset\n+     should be constant but be prepared for it not to be just in\n+     case.  */\n+  offset_int cstoff;\n+  if (bytepos.is_constant (&cstoff))\n     {\n-      base = get_base_address (TREE_OPERAND (expr, 0));\n-      return;\n-    }\n+      offrange[0] += cstoff;\n+      offrange[1] += cstoff;\n \n-  offrange[0] += const_off;\n-  offrange[1] += const_off;\n+      /* Besides the reference saved above, also stash the offset\n+\t for validation.  */\n+      if (TREE_CODE (expr) == COMPONENT_REF)\n+\trefoff = cstoff;\n+    }\n+  else\n+    offrange[1] += maxobjsize;\n \n   if (var_off)\n     {\n       if (TREE_CODE (var_off) == INTEGER_CST)\n \t{\n-\t  offset_int cstoff = wi::to_offset (var_off);\n+\t  cstoff = wi::to_offset (var_off);\n \t  offrange[0] += cstoff;\n \t  offrange[1] += cstoff;\n \t}\n       else\n \toffrange[1] += maxobjsize;\n     }\n \n-  /* Stash the reference for offset validation.  */\n-  ref = expr;\n-\n-  /* Also stash the constant offset for offset validation.  */\n-  if (TREE_CODE (expr) == COMPONENT_REF)\n-    refoff = const_off;\n-\n   if (TREE_CODE (base) == MEM_REF)\n     {\n       tree memrefoff = TREE_OPERAND (base, 1);\n@@ -918,12 +924,20 @@ builtin_access::generic_overlap ()\n   if (!overlap_certain)\n     {\n       if (!dstref->strbounded_p && !depends_p)\n+\t/* Memcpy only considers certain overlap.  */\n \treturn false;\n \n       /* There's no way to distinguish an access to the same member\n \t of a structure from one to two distinct members of the same\n \t structure.  Give up to avoid excessive false positives.  */\n-      tree basetype = TREE_TYPE (TREE_TYPE (dstref->base));\n+      tree basetype = TREE_TYPE (dstref->base);\n+\n+      if (POINTER_TYPE_P (basetype))\n+\tbasetype = TREE_TYPE (basetype);\n+      else\n+\twhile (TREE_CODE (basetype) == ARRAY_TYPE)\n+\t  basetype = TREE_TYPE (basetype);\n+\n       if (RECORD_OR_UNION_TYPE_P (basetype))\n \treturn false;\n     }"}, {"sha": "ecd0fb83f371f28b04055c85fdd75dea471d89b8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8286793a2b050a9c51501b0b3737ff73c71d189d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8286793a2b050a9c51501b0b3737ff73c71d189d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8286793a2b050a9c51501b0b3737ff73c71d189d", "patch": "@@ -1,3 +1,9 @@\n+2018-03-09  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/84526\n+\t* gcc.dg/Wrestrict-10.c: New test.\n+\t* gcc.dg/Wrestrict-11.c: New test.\n+\n 2018-03-09  Alexandre Oliva <aoliva@redhat.com>\n \n \tPR rtl-optimization/84682"}, {"sha": "a5a5ff1b5b2f929ead161b354194ca18ce0d6a47", "filename": "gcc/testsuite/gcc.dg/Wrestrict-10.c", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8286793a2b050a9c51501b0b3737ff73c71d189d/gcc%2Ftestsuite%2Fgcc.dg%2FWrestrict-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8286793a2b050a9c51501b0b3737ff73c71d189d/gcc%2Ftestsuite%2Fgcc.dg%2FWrestrict-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWrestrict-10.c?ref=8286793a2b050a9c51501b0b3737ff73c71d189d", "patch": "@@ -0,0 +1,121 @@\n+/* PR tree-optimization/84526 - ICE in generic_overlap\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wrestrict\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+extern void* memcpy (void* restrict, const void* restrict, size_t);\n+extern char* strcat (char* restrict, const char* restrict);\n+extern char* strcpy (char* restrict, const char* restrict);\n+extern char* strncat (char* restrict, const char* restrict, size_t);\n+extern char* strncpy (char* restrict, const char* restrict, size_t);\n+\n+struct\n+{\n+  char a[1];\n+} b;\n+\n+int i;\n+size_t n;\n+\n+void __attribute__ ((noclone, noinline))\n+test_arr_memcpy_1 (void)\n+{\n+  memcpy (&b.a[i], b.a, n);\n+}\n+\n+void __attribute__ ((noclone, noinline))\n+test_arr_memcpy_2 (void)\n+{\n+  memcpy (b.a, &b.a[i], n);\n+}\n+\n+void __attribute__ ((noclone, noinline))\n+test_arr_strcat_1 (void)\n+{\n+  strcat (&b.a[i], b.a);            /* { dg-warning \"\\\\\\[-Wrestrict\" } */\n+}\n+\n+void __attribute__ ((noclone, noinline))\n+test_arr_strcat_2 (void)\n+{\n+  /* This probably deserves a warning.  */\n+  strcpy (b.a, &b.a[i]);\n+}\n+\n+void __attribute__ ((noclone, noinline))\n+test_arr_strncat_1 (void)\n+{\n+  strncat (&b.a[i], b.a, n);        /* { dg-warning \"\\\\\\[-Wrestrict\" } */\n+}\n+\n+void __attribute__ ((noclone, noinline))\n+test_arr_strncat_2 (void)\n+{\n+  strncat (b.a, &b.a[i], n);        /* { dg-warning \"\\\\\\[-Wrestrict\" } */\n+}\n+\n+void __attribute__ ((noclone, noinline))\n+test_arr_strcpy_1 (void)\n+{\n+  strcpy (&b.a[i], b.a);\n+}\n+\n+void __attribute__ ((noclone, noinline))\n+test_arr_strcpy_2 (void)\n+{\n+  strcpy (b.a, &b.a[i]);\n+}\n+\n+\n+struct S {\n+  int a;\n+  char b[10];\n+} d;\n+\n+void __attribute__ ((noclone, noinline))\n+test_obj_memcpy_1 (void)\n+{\n+  memcpy (d.b, (char *) &d, n);\n+}\n+\n+void __attribute__ ((noclone, noinline))\n+test_obj_memcpy_2 (void)\n+{\n+  memcpy ((char *) &d, d.b, n);\n+}\n+\n+void __attribute__ ((noclone, noinline))\n+test_obj_strcpy_1 (void)\n+{\n+  strcpy (d.b, (char *) &d);\n+}\n+\n+void __attribute__ ((noclone, noinline))\n+test_obj_strcpy_2 (void)\n+{\n+  strcpy ((char *) &d, d.b);\n+}\n+\n+void __attribute__ ((noclone, noinline))\n+test_obj_strncat_1 (void)\n+{\n+  strncat (d.b, (char *) &d, n);    /* { dg-warning \"\\\\\\[-Wrestrict\" } */\n+}\n+\n+void __attribute__ ((noclone, noinline))\n+test_obj_strncat_2 (void)\n+{\n+  strncat ((char *) &d, d.b, n);    /* { dg-warning \"\\\\\\[-Wrestrict\" } */\n+}\n+\n+void __attribute__ ((noclone, noinline))\n+test_obj_strncpy_1 (void)\n+{\n+  strncpy (d.b, (char *) &d, n);\n+}\n+\n+void test_obj_strncpy_2 (void)\n+{\n+  strncpy ((char *) &d, d.b, n);\n+}"}, {"sha": "7b4b5aa25279d27594d934698f2190a75ab0180e", "filename": "gcc/testsuite/gcc.dg/Wrestrict-11.c", "status": "added", "additions": 205, "deletions": 0, "changes": 205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8286793a2b050a9c51501b0b3737ff73c71d189d/gcc%2Ftestsuite%2Fgcc.dg%2FWrestrict-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8286793a2b050a9c51501b0b3737ff73c71d189d/gcc%2Ftestsuite%2Fgcc.dg%2FWrestrict-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWrestrict-11.c?ref=8286793a2b050a9c51501b0b3737ff73c71d189d", "patch": "@@ -0,0 +1,205 @@\n+/* PR tree-optimization/84526 - ICE in generic_overlap\n+   Unrelated to the ICE but rather to PR 84095 that introduced it, verify\n+   that calls to strncpy involving multidimensional arrays of structs don't\n+   trigger false positive -Wrestrict warnings.\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wrestrict -ftrack-macro-expansion=0\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+extern char* strcpy (char*, const char*);\n+\n+struct MemArrays\n+{\n+  char a1[4];\n+  char a2[4][4];\n+  char a3[4][4][4];\n+} ma1[4], ma2[4][4], ma3[4][4][4];\n+\n+#define T(dst, src) do {\t\t\t\t\\\n+    strcpy (src, \"123\");\t\t\t\t\\\n+    strcpy (dst, src);\t\t\t\t\t\\\n+  } while (0)\n+\n+\n+void test_ma1_cst (const char *s)\n+{\n+  T (ma1[0].a1, ma1[0].a1);           /* { dg-warning \"\\\\\\[-Wrestrict]\" } */\n+  T (ma1[0].a1, ma1[1].a1);\n+  T (ma1[0].a1, ma1[2].a1);\n+  T (ma1[0].a1, ma1[3].a1);\n+\n+  T (ma1[0].a1, ma1[0].a1);           /* { dg-warning \"\\\\\\[-Wrestrict]\" } */\n+  T (ma1[1].a1, ma1[0].a1);\n+  T (ma1[2].a1, ma1[0].a1);\n+  T (ma1[3].a1, ma1[0].a1);\n+}\n+\n+\n+void test_ma1_var_cst (const char *s, int i)\n+{\n+  T (ma1[i].a1, ma1[0].a1);\n+  T (ma1[i].a1, ma1[1].a1);\n+  T (ma1[i].a1, ma1[2].a1);\n+  T (ma1[i].a1, ma1[3].a1);\n+\n+  T (ma1[0].a1, ma1[i].a1);\n+  T (ma1[1].a1, ma1[i].a1);\n+  T (ma1[2].a1, ma1[i].a1);\n+  T (ma1[3].a1, ma1[i].a1);\n+}\n+\n+\n+void test_ma1_var_var (const char *s, int i, int j)\n+{\n+  T (ma1[i].a1, ma1[j].a1);\n+  T (ma1[i].a1, ma1[j].a1);\n+  T (ma1[i].a1, ma1[j].a1);\n+  T (ma1[i].a1, ma1[j].a1);\n+\n+  T (ma1[i].a1, ma1[j].a1);\n+  T (ma1[i].a1, ma1[j].a1);\n+  T (ma1[i].a1, ma1[j].a1);\n+  T (ma1[i].a1, ma1[j].a1);\n+}\n+\n+\n+void test_ma2_cst (const char *s)\n+{\n+  T (ma2[0][0].a1, ma2[0][0].a1);     /* { dg-warning \"\\\\\\[-Wrestrict]\" } */\n+  T (ma2[0][0].a1, ma2[0][1].a1);\n+  T (ma2[0][0].a1, ma2[0][2].a1);\n+  T (ma2[0][0].a1, ma2[0][3].a1);\n+\n+  T (ma2[0][0].a1, ma2[1][0].a1);\n+  T (ma2[0][0].a1, ma2[1][1].a1);\n+  T (ma2[0][0].a1, ma2[1][2].a1);\n+  T (ma2[0][0].a1, ma2[1][3].a1);\n+\n+  T (ma2[0][0].a1, ma2[2][0].a1);\n+  T (ma2[0][0].a1, ma2[2][1].a1);\n+  T (ma2[0][0].a1, ma2[2][2].a1);\n+  T (ma2[0][0].a1, ma2[2][3].a1);\n+\n+  T (ma2[0][0].a1, ma2[3][0].a1);\n+  T (ma2[0][0].a1, ma2[3][1].a1);\n+  T (ma2[0][0].a1, ma2[3][2].a1);\n+  T (ma2[0][0].a1, ma2[3][3].a1);\n+\n+\n+  T (ma2[0][1].a1, ma2[0][0].a1);\n+  T (ma2[0][1].a1, ma2[0][1].a1);     /* { dg-warning \"\\\\\\[-Wrestrict]\" } */\n+  T (ma2[0][1].a1, ma2[0][2].a1);\n+  T (ma2[0][1].a1, ma2[0][3].a1);\n+\n+  T (ma2[0][1].a1, ma2[1][0].a1);\n+  T (ma2[0][1].a1, ma2[1][1].a1);\n+  T (ma2[0][1].a1, ma2[1][2].a1);\n+  T (ma2[0][1].a1, ma2[1][3].a1);\n+\n+  T (ma2[0][1].a1, ma2[2][0].a1);\n+  T (ma2[0][1].a1, ma2[2][1].a1);\n+  T (ma2[0][1].a1, ma2[2][2].a1);\n+  T (ma2[0][1].a1, ma2[2][3].a1);\n+\n+  T (ma2[0][1].a1, ma2[3][0].a1);\n+  T (ma2[0][1].a1, ma2[3][1].a1);\n+  T (ma2[0][1].a1, ma2[3][2].a1);\n+  T (ma2[0][1].a1, ma2[3][3].a1);\n+\n+\n+  T (ma2[0][2].a1, ma2[0][0].a1);\n+  T (ma2[0][2].a1, ma2[0][1].a1);\n+  T (ma2[0][2].a1, ma2[0][2].a1);     /* { dg-warning \"\\\\\\[-Wrestrict]\" } */\n+  T (ma2[0][2].a1, ma2[0][3].a1);\n+\n+  T (ma2[0][2].a1, ma2[1][0].a1);\n+  T (ma2[0][2].a1, ma2[1][1].a1);\n+  T (ma2[0][2].a1, ma2[1][2].a1);\n+  T (ma2[0][2].a1, ma2[1][3].a1);\n+\n+  T (ma2[0][2].a1, ma2[2][0].a1);\n+  T (ma2[0][2].a1, ma2[2][1].a1);\n+  T (ma2[0][2].a1, ma2[2][2].a1);\n+  T (ma2[0][2].a1, ma2[2][3].a1);\n+\n+  T (ma2[0][2].a1, ma2[3][0].a1);\n+  T (ma2[0][2].a1, ma2[3][1].a1);\n+  T (ma2[0][2].a1, ma2[3][2].a1);\n+  T (ma2[0][2].a1, ma2[3][3].a1);\n+\n+\n+  T (ma2[0][3].a1, ma2[0][0].a1);\n+  T (ma2[0][3].a1, ma2[0][1].a1);\n+  T (ma2[0][3].a1, ma2[0][2].a1);\n+  T (ma2[0][3].a1, ma2[0][3].a1);     /* { dg-warning \"\\\\\\[-Wrestrict]\" } */\n+\n+  T (ma2[0][3].a1, ma2[1][0].a1);\n+  T (ma2[0][3].a1, ma2[1][1].a1);\n+  T (ma2[0][3].a1, ma2[1][2].a1);\n+  T (ma2[0][3].a1, ma2[1][3].a1);\n+\n+  T (ma2[0][3].a1, ma2[2][0].a1);\n+  T (ma2[0][3].a1, ma2[2][1].a1);\n+  T (ma2[0][3].a1, ma2[2][2].a1);\n+  T (ma2[0][3].a1, ma2[2][3].a1);\n+\n+  T (ma2[0][3].a1, ma2[3][0].a1);\n+  T (ma2[0][3].a1, ma2[3][1].a1);\n+  T (ma2[0][3].a1, ma2[3][2].a1);\n+  T (ma2[0][3].a1, ma2[3][3].a1);\n+}\n+\n+\n+void test_ma2_var (int i0, int j0, int i1, int j1)\n+{\n+  T (ma2[i0][j0].a1, ma2[i0][j0].a1);       /* { dg-warning \"\\\\\\[-Wrestrict]\" } */\n+\n+  T (ma2[i0][j0].a1, ma2[i0][j1].a1);       /* { dg-bogus \"\\\\\\[-Wrestrict]\" } */\n+  T (ma2[i0][j0].a1, ma2[i1][j1].a1);       /* { dg-bogus \"\\\\\\[-Wrestrict]\" } */\n+\n+  T (ma2[0][0].a2[i0], ma2[0][0].a2[j0]);   /* { dg-bogus \"\\\\\\[-Wrestrict]\" } */\n+  T (ma2[0][i0].a2[0], ma2[0][i1].a2[0]);   /* { dg-bogus \"\\\\\\[-Wrestrict]\" } */\n+  T (ma2[i0][0].a2[0], ma2[i1][0].a2[0]);   /* { dg-bogus \"\\\\\\[-Wrestrict]\" } */\n+  T (ma2[i0][j0].a2[0], ma2[i1][j1].a2[0]); /* { dg-bogus \"\\\\\\[-Wrestrict]\" } */\n+}\n+\n+\n+void test_p2_var (struct MemArrays **p2, int i0, int j0, int i1, int j1)\n+{\n+  T (p2[i0][j0].a1, p2[i0][j0].a1);         /* { dg-warning \"\\\\\\[-Wrestrict]\" } */\n+\n+  T (p2[i0][j0].a1, p2[i0][j1].a1);\n+  T (p2[i0][j0].a1, p2[i1][j1].a1);\n+\n+  T (p2[0][0].a2[i0], p2[0][0].a2[j0]);\n+  T (p2[0][i0].a2[0], p2[0][i1].a2[0]);\n+  T (p2[i0][0].a2[0], p2[i1][0].a2[0]);\n+  T (p2[i0][j0].a2[0], p2[i1][j1].a2[0]);\n+}\n+\n+\n+void test_ma3_cst (const char *s)\n+{\n+  T (ma3[0][0][0].a1, ma3[0][0][0].a1); /* { dg-warning \"\\\\\\[-Wrestrict]\" } */\n+  T (ma3[0][0][0].a1, ma3[0][0][3].a1);\n+\n+  T (ma3[0][0][0].a1, ma3[0][1][0].a1);\n+  T (ma3[0][0][0].a1, ma3[0][1][3].a1);\n+  T (ma3[0][0][0].a1, ma3[1][0][0].a1);\n+  T (ma3[0][0][0].a1, ma3[1][0][3].a1);\n+  T (ma3[0][0][0].a1, ma3[3][0][3].a1);\n+  T (ma3[0][0][0].a1, ma3[3][3][3].a1);\n+}\n+\n+\n+void test_ma3_var (const char *s,\n+\t\t   int i0, int j0, int k0,\n+\t\t   int i1, int j1, int k1)\n+{\n+  T (ma3[i0][j0][k0].a1, ma3[i0][j0][k0].a1);   /* { dg-warning \"\\\\\\[-Wrestrict]\" } */\n+\n+  T (ma3[i0][j0][k0].a1, ma3[i0][j0][k1].a1);   /* { dg-bogus \"\\\\\\[-Wrestrict]\" } */\n+  T (ma3[i0][j0][k0].a1, ma3[i0][j1][k1].a1);   /* { dg-bogus \"\\\\\\[-Wrestrict]\" } */\n+  T (ma3[i0][j0][k0].a1, ma3[i1][j1][k1].a1);   /* { dg-bogus \"\\\\\\[-Wrestrict]\" } */\n+}"}]}