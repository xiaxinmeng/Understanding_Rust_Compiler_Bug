{"sha": "085f17143f3444e9fedce6501e21d28bedac8702", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg1ZjE3MTQzZjM0NDRlOWZlZGNlNjUwMWUyMWQyOGJlZGFjODcwMg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-05-29T07:29:13Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-05-29T07:29:13Z"}, "message": "combine.c (combine_simplify_rtx): Don't create an if_then_else unless both args are general_operand.\n\n        * combine.c (combine_simplify_rtx): Don't create an if_then_else\n        unless both args are general_operand.  Don't canonicalize plus\n        to ior unless it helps.\n\nFrom-SVN: r34247", "tree": {"sha": "99a6776b677f08f40278071b001f9001a3bb9dd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99a6776b677f08f40278071b001f9001a3bb9dd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/085f17143f3444e9fedce6501e21d28bedac8702", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/085f17143f3444e9fedce6501e21d28bedac8702", "html_url": "https://github.com/Rust-GCC/gccrs/commit/085f17143f3444e9fedce6501e21d28bedac8702", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/085f17143f3444e9fedce6501e21d28bedac8702/comments", "author": null, "committer": null, "parents": [{"sha": "7b40bc6bda732c991abfc3726bf68a886b876d68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b40bc6bda732c991abfc3726bf68a886b876d68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b40bc6bda732c991abfc3726bf68a886b876d68"}], "stats": {"total": 83, "additions": 52, "deletions": 31}, "files": [{"sha": "11cfe533520fe756c29b5ff311ad3b07080524b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/085f17143f3444e9fedce6501e21d28bedac8702/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/085f17143f3444e9fedce6501e21d28bedac8702/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=085f17143f3444e9fedce6501e21d28bedac8702", "patch": "@@ -1,5 +1,9 @@\n 2000-05-29  Richard Henderson  <rth@cygnus.com>\n \n+\t* combine.c (combine_simplify_rtx): Don't create an if_then_else\n+\tunless both args are general_operand.  Don't canonicalize plus\n+\tto ior unless it helps.\n+\n \t* toplev.c (rest_of_compilation): Set no_new_pseudos after flow1;\n \tinstead track register_life_up_to_date.  Toggle no_new_pseudos\n \taround if_convert.  "}, {"sha": "d4af90e54ebc29a0637344995def1a8698b907a5", "filename": "gcc/combine.c", "status": "modified", "additions": 48, "deletions": 31, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/085f17143f3444e9fedce6501e21d28bedac8702/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/085f17143f3444e9fedce6501e21d28bedac8702/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=085f17143f3444e9fedce6501e21d28bedac8702", "patch": "@@ -3589,37 +3589,44 @@ combine_simplify_rtx (x, op0_mode, last, in_dest)\n \t  true = subst (true, pc_rtx, pc_rtx, 0, 0);\n \t  false = subst (false, pc_rtx, pc_rtx, 0, 0);\n \n-\t  /* Restarting if we generate a store-flag expression will cause\n-\t     us to loop.  Just drop through in this case.  */\n-\n-\t  /* If the result values are STORE_FLAG_VALUE and zero, we can\n-\t     just make the comparison operation.  */\n-\t  if (true == const_true_rtx && false == const0_rtx)\n-\t    x = gen_binary (cond_code, mode, cond, cop1);\n-\t  else if (true == const0_rtx && false == const_true_rtx)\n-\t    x = gen_binary (reverse_condition (cond_code), mode, cond, cop1);\n-\n-\t  /* Likewise, we can make the negate of a comparison operation\n-\t     if the result values are - STORE_FLAG_VALUE and zero.  */\n-\t  else if (GET_CODE (true) == CONST_INT\n-\t\t   && INTVAL (true) == - STORE_FLAG_VALUE\n-\t\t   && false == const0_rtx)\n-\t    x = gen_unary (NEG, mode, mode,\n-\t\t\t   gen_binary (cond_code, mode, cond, cop1));\n-\t  else if (GET_CODE (false) == CONST_INT\n-\t\t   && INTVAL (false) == - STORE_FLAG_VALUE\n-\t\t   && true == const0_rtx)\n-\t    x = gen_unary (NEG, mode, mode,\n-\t\t\t   gen_binary (reverse_condition (cond_code), \n-\t\t\t\t       mode, cond, cop1));\n-\t  else\n-\t    return gen_rtx_IF_THEN_ELSE (mode,\n-\t\t\t\t\t gen_binary (cond_code, VOIDmode,\n-\t\t\t\t\t\t     cond, cop1),\n-\t\t\t\t\t true, false);\n+\t  /* If true and false are not general_operands, an if_then_else\n+\t     is unlikely to be simpler.  */\n+\t  if (general_operand (true, VOIDmode)\n+\t      && general_operand (false, VOIDmode))\n+\t    {\n+\t      /* Restarting if we generate a store-flag expression will cause\n+\t\t us to loop.  Just drop through in this case.  */\n+\n+\t      /* If the result values are STORE_FLAG_VALUE and zero, we can\n+\t\t just make the comparison operation.  */\n+\t      if (true == const_true_rtx && false == const0_rtx)\n+\t\tx = gen_binary (cond_code, mode, cond, cop1);\n+\t      else if (true == const0_rtx && false == const_true_rtx)\n+\t\tx = gen_binary (reverse_condition (cond_code),\n+\t\t\t\tmode, cond, cop1);\n+\n+\t      /* Likewise, we can make the negate of a comparison operation\n+\t\t if the result values are - STORE_FLAG_VALUE and zero.  */\n+\t      else if (GET_CODE (true) == CONST_INT\n+\t\t       && INTVAL (true) == - STORE_FLAG_VALUE\n+\t\t       && false == const0_rtx)\n+\t\tx = gen_unary (NEG, mode, mode,\n+\t\t\t       gen_binary (cond_code, mode, cond, cop1));\n+\t      else if (GET_CODE (false) == CONST_INT\n+\t\t       && INTVAL (false) == - STORE_FLAG_VALUE\n+\t\t       && true == const0_rtx)\n+\t\tx = gen_unary (NEG, mode, mode,\n+\t\t\t       gen_binary (reverse_condition (cond_code), \n+\t\t\t\t\t   mode, cond, cop1));\n+\t      else\n+\t\treturn gen_rtx_IF_THEN_ELSE (mode,\n+\t\t\t\t\t     gen_binary (cond_code, VOIDmode,\n+\t\t\t\t\t\t\t cond, cop1),\n+\t\t\t\t\t     true, false);\n \n-\t  code = GET_CODE (x);\n-\t  op0_mode = VOIDmode;\n+\t      code = GET_CODE (x);\n+\t      op0_mode = VOIDmode;\n+\t    }\n \t}\n     }\n \n@@ -4229,7 +4236,17 @@ combine_simplify_rtx (x, op0_mode, last, in_dest)\n       if (GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT\n \t  && (nonzero_bits (XEXP (x, 0), mode)\n \t      & nonzero_bits (XEXP (x, 1), mode)) == 0)\n-\treturn gen_binary (IOR, mode, XEXP (x, 0), XEXP (x, 1));\n+\t{\n+\t  /* Try to simplify the expression further.  */\n+\t  rtx tor = gen_binary (IOR, mode, XEXP (x, 0), XEXP (x, 1));\n+\t  temp = combine_simplify_rtx (tor, mode, last, in_dest);\n+\n+\t  /* If we could, great.  If not, do not go ahead with the IOR\n+\t     replacement, since PLUS appears in many special purpose\n+\t     address arithmetic instructions.  */\n+\t  if (GET_CODE (temp) != CLOBBER && temp != tor)\n+\t    return temp;\n+\t}\n       break;\n \n     case MINUS:"}]}