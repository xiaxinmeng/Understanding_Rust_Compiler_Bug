{"sha": "f5c8b24c731e1b0343cbdcc3438ab4c40e82fc71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVjOGIyNGM3MzFlMWIwMzQzY2JkY2MzNDM4YWI0YzQwZTgyZmM3MQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2013-11-28T16:15:52Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2013-11-28T16:15:52Z"}, "message": "tree-core.h (tree_base): Document use of static_flag for SSA_NAME.\n\ngcc/\n\t* tree-core.h (tree_base): Document use of static_flag for SSA_NAME.\n\t* tree.h (SSA_NAME_ANTI_RANGE_P, SSA_NAME_RANGE_TYPE): New macros.\n\t* tree-ssanames.h (set_range_info): Add range_type argument.\n\t(duplicate_ssa_name_range_info): Likewise.\n\t* tree-ssanames.c (set_range_info): Take the range type as argument\n\tand store it in SSA_NAME_ANTI_RANGE_P.\n\t(duplicate_ssa_name_range_info): Likewise.\n\t(get_range_info): Use SSA_NAME_ANTI_RANGE_P.\n\t(set_nonzero_bits): Update call to set_range_info.\n\t(duplicate_ssa_name_fn): Update call to duplicate_ssa_name_range_info.\n\t* tree-ssa-copy.c (fini_copy_prop): Likewise.\n\t* tree-vrp.c (remove_range_assertions): Update call to set_range_info.\n\t(vrp_finalize): Likewise, passing anti-ranges directly.\n\nFrom-SVN: r205489", "tree": {"sha": "217f4d30b00b58d646c8c06c615dd102545bacf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/217f4d30b00b58d646c8c06c615dd102545bacf3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5c8b24c731e1b0343cbdcc3438ab4c40e82fc71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5c8b24c731e1b0343cbdcc3438ab4c40e82fc71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5c8b24c731e1b0343cbdcc3438ab4c40e82fc71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5c8b24c731e1b0343cbdcc3438ab4c40e82fc71/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3c716922ad6b887c3471cff5b9748d2e3ae3174d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c716922ad6b887c3471cff5b9748d2e3ae3174d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c716922ad6b887c3471cff5b9748d2e3ae3174d"}], "stats": {"total": 120, "additions": 62, "deletions": 58}, "files": [{"sha": "f6db5c52aa7ebb90d6e211f2c97a9d7021ab2b50", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c8b24c731e1b0343cbdcc3438ab4c40e82fc71/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c8b24c731e1b0343cbdcc3438ab4c40e82fc71/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5c8b24c731e1b0343cbdcc3438ab4c40e82fc71", "patch": "@@ -1,3 +1,19 @@\n+2013-11-28  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* tree-core.h (tree_base): Document use of static_flag for SSA_NAME.\n+\t* tree.h (SSA_NAME_ANTI_RANGE_P, SSA_NAME_RANGE_TYPE): New macros.\n+\t* tree-ssanames.h (set_range_info): Add range_type argument.\n+\t(duplicate_ssa_name_range_info): Likewise.\n+\t* tree-ssanames.c (set_range_info): Take the range type as argument\n+\tand store it in SSA_NAME_ANTI_RANGE_P.\n+\t(duplicate_ssa_name_range_info): Likewise.\n+\t(get_range_info): Use SSA_NAME_ANTI_RANGE_P.\n+\t(set_nonzero_bits): Update call to set_range_info.\n+\t(duplicate_ssa_name_fn): Update call to duplicate_ssa_name_range_info.\n+\t* tree-ssa-copy.c (fini_copy_prop): Likewise.\n+\t* tree-vrp.c (remove_range_assertions): Update call to set_range_info.\n+\t(vrp_finalize): Likewise, passing anti-ranges directly.\n+\n 2013-11-28  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/59330"}, {"sha": "f90bae7c35f0649fd67ee7beb26ed6dd6857c618", "filename": "gcc/tree-core.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c8b24c731e1b0343cbdcc3438ab4c40e82fc71/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c8b24c731e1b0343cbdcc3438ab4c40e82fc71/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=f5c8b24c731e1b0343cbdcc3438ab4c40e82fc71", "patch": "@@ -822,6 +822,9 @@ struct GTY(()) tree_base {\n        TRANSACTION_EXPR_OUTER in\n \t   TRANSACTION_EXPR\n \n+       SSA_NAME_ANTI_RANGE_P in\n+\t   SSA_NAME\n+\n    public_flag:\n \n        TREE_OVERFLOW in"}, {"sha": "0dd5e147f3e6cae526f46e689c806874b1ddfae9", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c8b24c731e1b0343cbdcc3438ab4c40e82fc71/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c8b24c731e1b0343cbdcc3438ab4c40e82fc71/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=f5c8b24c731e1b0343cbdcc3438ab4c40e82fc71", "patch": "@@ -576,6 +576,7 @@ fini_copy_prop (void)\n \t\t   && SSA_NAME_RANGE_INFO (var)\n \t\t   && !SSA_NAME_RANGE_INFO (copy_of[i].value))\n \t    duplicate_ssa_name_range_info (copy_of[i].value,\n+\t\t\t\t\t   SSA_NAME_RANGE_TYPE (var),\n \t\t\t\t\t   SSA_NAME_RANGE_INFO (var));\n \t}\n     }"}, {"sha": "ff7639bd1494e9b0bcfae3bc13c912731fc361f5", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c8b24c731e1b0343cbdcc3438ab4c40e82fc71/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c8b24c731e1b0343cbdcc3438ab4c40e82fc71/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=f5c8b24c731e1b0343cbdcc3438ab4c40e82fc71", "patch": "@@ -183,12 +183,14 @@ make_ssa_name_fn (struct function *fn, tree var, gimple stmt)\n   return t;\n }\n \n-/* Store range information MIN, and MAX to tree ssa_name NAME.  */\n+/* Store range information RANGE_TYPE, MIN, and MAX to tree ssa_name NAME.  */\n \n void\n-set_range_info (tree name, double_int min, double_int max)\n+set_range_info (tree name, enum value_range_type range_type, double_int min,\n+\t\tdouble_int max)\n {\n   gcc_assert (!POINTER_TYPE_P (TREE_TYPE (name)));\n+  gcc_assert (range_type == VR_RANGE || range_type == VR_ANTI_RANGE);\n   range_info_def *ri = SSA_NAME_RANGE_INFO (name);\n \n   /* Allocate if not available.  */\n@@ -199,12 +201,16 @@ set_range_info (tree name, double_int min, double_int max)\n       ri->nonzero_bits = double_int::mask (TYPE_PRECISION (TREE_TYPE (name)));\n     }\n \n+  /* Record the range type.  */\n+  if (SSA_NAME_RANGE_TYPE (name) != range_type)\n+    SSA_NAME_ANTI_RANGE_P (name) = (range_type == VR_ANTI_RANGE);\n+\n   /* Set the values.  */\n   ri->min = min;\n   ri->max = max;\n \n   /* If it is a range, try to improve nonzero_bits from the min/max.  */\n-  if (min.cmp (max, TYPE_UNSIGNED (TREE_TYPE (name))) != 1)\n+  if (range_type == VR_RANGE)\n     {\n       int prec = TYPE_PRECISION (TREE_TYPE (name));\n       double_int xorv;\n@@ -230,7 +236,6 @@ set_range_info (tree name, double_int min, double_int max)\n enum value_range_type\n get_range_info (const_tree name, double_int *min, double_int *max)\n {\n-  enum value_range_type range_type;\n   gcc_assert (!POINTER_TYPE_P (TREE_TYPE (name)));\n   gcc_assert (min && max);\n   range_info_def *ri = SSA_NAME_RANGE_INFO (name);\n@@ -241,22 +246,9 @@ get_range_info (const_tree name, double_int *min, double_int *max)\n \t      > 2 * HOST_BITS_PER_WIDE_INT))\n     return VR_VARYING;\n \n-  /* If min > max, it is VR_ANTI_RANGE.  */\n-  if (ri->min.cmp (ri->max, TYPE_UNSIGNED (TREE_TYPE (name))) == 1)\n-    {\n-      /* VR_ANTI_RANGE ~[min, max] is encoded as [max + 1, min - 1].  */\n-      range_type = VR_ANTI_RANGE;\n-      *min = ri->max + double_int_one;\n-      *max = ri->min - double_int_one;\n-    }\n-  else\n-  {\n-    /* Otherwise (when min <= max), it is VR_RANGE.  */\n-    range_type = VR_RANGE;\n-    *min = ri->min;\n-    *max = ri->max;\n-  }\n-  return range_type;\n+  *min = ri->min;\n+  *max = ri->max;\n+  return SSA_NAME_RANGE_TYPE (name);\n }\n \n /* Change non-zero bits bitmask of NAME.  */\n@@ -266,7 +258,7 @@ set_nonzero_bits (tree name, double_int mask)\n {\n   gcc_assert (!POINTER_TYPE_P (TREE_TYPE (name)));\n   if (SSA_NAME_RANGE_INFO (name) == NULL)\n-    set_range_info (name,\n+    set_range_info (name, VR_RANGE,\n \t\t    tree_to_double_int (TYPE_MIN_VALUE (TREE_TYPE (name))),\n \t\t    tree_to_double_int (TYPE_MAX_VALUE (TREE_TYPE (name))));\n   range_info_def *ri = SSA_NAME_RANGE_INFO (name);\n@@ -495,22 +487,26 @@ duplicate_ssa_name_ptr_info (tree name, struct ptr_info_def *ptr_info)\n   SSA_NAME_PTR_INFO (name) = new_ptr_info;\n }\n \n-/* Creates a duplicate of the range_info_def at RANGE_INFO for use by\n-   the SSA name NAME.  */\n+/* Creates a duplicate of the range_info_def at RANGE_INFO of type\n+   RANGE_TYPE for use by the SSA name NAME.  */\n void\n-duplicate_ssa_name_range_info (tree name, struct range_info_def *range_info)\n+duplicate_ssa_name_range_info (tree name, enum value_range_type range_type,\n+\t\t\t       struct range_info_def *range_info)\n {\n   struct range_info_def *new_range_info;\n \n   gcc_assert (!POINTER_TYPE_P (TREE_TYPE (name)));\n   gcc_assert (!SSA_NAME_RANGE_INFO (name));\n+  gcc_assert (!SSA_NAME_ANTI_RANGE_P (name));\n \n   if (!range_info)\n     return;\n \n   new_range_info = ggc_alloc_range_info_def ();\n   *new_range_info = *range_info;\n \n+  gcc_assert (range_type == VR_RANGE || range_type == VR_ANTI_RANGE);\n+  SSA_NAME_ANTI_RANGE_P (name) = (range_type == VR_ANTI_RANGE);\n   SSA_NAME_RANGE_INFO (name) = new_range_info;\n }\n \n@@ -535,7 +531,8 @@ duplicate_ssa_name_fn (struct function *fn, tree name, gimple stmt)\n       struct range_info_def *old_range_info = SSA_NAME_RANGE_INFO (name);\n \n       if (old_range_info)\n-\tduplicate_ssa_name_range_info (new_name, old_range_info);\n+\tduplicate_ssa_name_range_info (new_name, SSA_NAME_RANGE_TYPE (name),\n+\t\t\t\t       old_range_info);\n     }\n \n   return new_name;"}, {"sha": "4f92116dfc77f9f7a1deffa07ca2c932474c977f", "filename": "gcc/tree-ssanames.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c8b24c731e1b0343cbdcc3438ab4c40e82fc71/gcc%2Ftree-ssanames.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c8b24c731e1b0343cbdcc3438ab4c40e82fc71/gcc%2Ftree-ssanames.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.h?ref=f5c8b24c731e1b0343cbdcc3438ab4c40e82fc71", "patch": "@@ -70,7 +70,8 @@ struct GTY (()) range_info_def {\n enum value_range_type { VR_UNDEFINED, VR_RANGE, VR_ANTI_RANGE, VR_VARYING };\n \n /* Sets the value range to SSA.  */\n-extern void set_range_info (tree, double_int, double_int);\n+extern void set_range_info (tree, enum value_range_type, double_int,\n+\t\t\t    double_int);\n /* Gets the value range from SSA.  */\n extern enum value_range_type get_range_info (const_tree, double_int *,\n \t\t\t\t\t     double_int *);\n@@ -93,7 +94,8 @@ extern struct ptr_info_def *get_ptr_info (tree);\n extern tree copy_ssa_name_fn (struct function *, tree, gimple);\n extern void duplicate_ssa_name_ptr_info (tree, struct ptr_info_def *);\n extern tree duplicate_ssa_name_fn (struct function *, tree, gimple);\n-extern void duplicate_ssa_name_range_info (tree, struct range_info_def *);\n+extern void duplicate_ssa_name_range_info (tree, enum value_range_type,\n+\t\t\t\t\t   struct range_info_def *);\n extern void release_defs (gimple);\n extern void replace_ssa_name_symbol (tree, tree);\n "}, {"sha": "ce2de47a0301b0a48a8aa8757921fa24ac759ee1", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 8, "deletions": 31, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c8b24c731e1b0343cbdcc3438ab4c40e82fc71/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c8b24c731e1b0343cbdcc3438ab4c40e82fc71/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=f5c8b24c731e1b0343cbdcc3438ab4c40e82fc71", "patch": "@@ -6596,7 +6596,8 @@ remove_range_assertions (void)\n \t\t    && all_imm_uses_in_stmt_or_feed_cond (var, stmt,\n \t\t\t\t\t\t\t  single_pred (bb)))\n \t\t  {\n-\t\t    set_range_info (var, SSA_NAME_RANGE_INFO (lhs)->min,\n+\t\t    set_range_info (var, SSA_NAME_RANGE_TYPE (lhs),\n+\t\t\t\t    SSA_NAME_RANGE_INFO (lhs)->min,\n \t\t\t\t    SSA_NAME_RANGE_INFO (lhs)->max);\n \t\t    maybe_set_nonzero_bits (bb, var);\n \t\t  }\n@@ -9602,36 +9603,12 @@ vrp_finalize (void)\n \tcontinue;\n \n \tif ((TREE_CODE (vr_value[i]->min) == INTEGER_CST)\n-\t    && (TREE_CODE (vr_value[i]->max) == INTEGER_CST))\n-\t  {\n-\t    if (vr_value[i]->type == VR_RANGE)\n-\t      set_range_info (name,\n-\t\t\t      tree_to_double_int (vr_value[i]->min),\n-\t\t\t      tree_to_double_int (vr_value[i]->max));\n-\t    else if (vr_value[i]->type == VR_ANTI_RANGE)\n-\t      {\n-\t\t/* VR_ANTI_RANGE ~[min, max] is encoded compactly as\n-\t\t   [max + 1, min - 1] without additional attributes.\n-\t\t   When min value > max value, we know that it is\n-\t\t   VR_ANTI_RANGE; it is VR_RANGE otherwise.  */\n-\n-\t\t/* ~[0,0] anti-range is represented as\n-\t\t   range.  */\n-\t\tif (TYPE_UNSIGNED (TREE_TYPE (name))\n-\t\t    && integer_zerop (vr_value[i]->min)\n-\t\t    && integer_zerop (vr_value[i]->max))\n-\t\t  set_range_info (name,\n-\t\t\t\t  double_int_one,\n-\t\t\t\t  double_int::max_value\n-\t\t\t\t  (TYPE_PRECISION (TREE_TYPE (name)), true));\n-\t\telse\n-\t\t  set_range_info (name,\n-\t\t\t\t  tree_to_double_int (vr_value[i]->max)\n-\t\t\t\t  + double_int_one,\n-\t\t\t\t  tree_to_double_int (vr_value[i]->min)\n-\t\t\t\t  - double_int_one);\n-\t      }\n-\t  }\n+\t    && (TREE_CODE (vr_value[i]->max) == INTEGER_CST)\n+\t    && (vr_value[i]->type == VR_RANGE\n+\t\t|| vr_value[i]->type == VR_ANTI_RANGE))\n+\t  set_range_info (name, vr_value[i]->type,\n+\t\t\t  tree_to_double_int (vr_value[i]->min),\n+\t\t\t  tree_to_double_int (vr_value[i]->max));\n       }\n \n   /* Free allocated memory.  */"}, {"sha": "7a95da9850f22033ca321f0b0c110cee8436aafa", "filename": "gcc/tree.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c8b24c731e1b0343cbdcc3438ab4c40e82fc71/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c8b24c731e1b0343cbdcc3438ab4c40e82fc71/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=f5c8b24c731e1b0343cbdcc3438ab4c40e82fc71", "patch": "@@ -1436,6 +1436,14 @@ extern void protected_set_expr_location (tree, location_t);\n #define SSA_NAME_PTR_INFO(N) \\\n    SSA_NAME_CHECK (N)->ssa_name.info.ptr_info\n \n+/* True if SSA_NAME_RANGE_INFO describes an anti-range.  */\n+#define SSA_NAME_ANTI_RANGE_P(N) \\\n+    SSA_NAME_CHECK (N)->base.static_flag\n+\n+/* The type of range described by SSA_NAME_RANGE_INFO.  */\n+#define SSA_NAME_RANGE_TYPE(N) \\\n+    (SSA_NAME_ANTI_RANGE_P (N) ? VR_ANTI_RANGE : VR_RANGE)\n+\n /* Value range info attributes for SSA_NAMEs of non pointer-type variables.  */\n #define SSA_NAME_RANGE_INFO(N) \\\n     SSA_NAME_CHECK (N)->ssa_name.info.range_info"}]}