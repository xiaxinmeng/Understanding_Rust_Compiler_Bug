{"sha": "1f8d3e84eee6918f3be3e12be67b250840750aeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY4ZDNlODRlZWU2OTE4ZjNiZTNlMTJiZTY3YjI1MDg0MDc1MGFlYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-12-19T12:20:58Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-12-19T12:20:58Z"}, "message": "re PR preprocessor/63831 (r217292 causes segfaults with -MM)\n\n\tPR preprocessor/63831\n\t* c-cppbuiltin.c (c_cpp_builtins): Don't define __has_attribute\n\tand __has_cpp_attribute here.\n\t* c-ppoutput.c (init_pp_output): Set cb->has_attribute to\n\tc_common_has_attribute.\n\t* c-common.h (c_common_has_attribute): New prototype.\n\t* c-lex.c (init_c_lex): Set cb->has_attribute to\n\tc_common_has_attribute instead of cb_has_attribute.\n\t(get_token_no_padding): New function.\n\t(cb_has_attribute): Renamed to ...\n\t(c_common_has_attribute): ... this.  No longer static.  Use\n\tget_token_no_padding, require ()s, don't build TREE_LIST\n\tunnecessarily, fix up formatting, adjust diagnostics, call\n\tinit_attributes.\n\n\t* directives.c (lex_macro_node): Remove __has_attribute__ handling.\n\t* internal.h (struct spec_node): Remove n__has_attribute__ field.\n\t(struct lexer_state): Remove in__has_attribute__ field.\n\t* macro.c (_cpp_builtin_macro_text): Handle BT_HAS_ATTRIBUTE.\n\t* identifiers.c (_cpp_init_hashtable): Remove __has_attribute__\n\thandling.\n\t* init.c (builtin_array): Add __has_attribute and __has_cpp_attribute.\n\t(cpp_init_special_builtins): Don't initialize __has_attribute\n\tor __has_cpp_attribute if CLK_ASM or pfile->cb.has_attribute is NULL.\n\t* traditional.c (enum ls): Remove ls_has_attribute,\n\tls_has_attribute_close.\n\t(_cpp_scan_out_logical_line): Remove __has_attribute__ handling.\n\t* include/cpplib.h (enum cpp_builtin_type): Add BT_HAS_ATTRIBUTE.\n\t* pch.c (cpp_read_state): Remove __has_attribute__ handling.\n\t* expr.c (eval_token): Likewise.\n\t(parse_has_attribute): Removed.\n\n\t* c-c++-common/cpp/pr63831-1.c: New test.\n\t* c-c++-common/cpp/pr63831-2.c: New test.\n\nFrom-SVN: r218948", "tree": {"sha": "c196a5cfa64d537aa3ba5756e62095791c4f3ca3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c196a5cfa64d537aa3ba5756e62095791c4f3ca3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f8d3e84eee6918f3be3e12be67b250840750aeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f8d3e84eee6918f3be3e12be67b250840750aeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f8d3e84eee6918f3be3e12be67b250840750aeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f8d3e84eee6918f3be3e12be67b250840750aeb/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8a386c911324b0fdb2a16c14f1420ad0e72540d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a386c911324b0fdb2a16c14f1420ad0e72540d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a386c911324b0fdb2a16c14f1420ad0e72540d4"}], "stats": {"total": 284, "additions": 194, "deletions": 90}, "files": [{"sha": "94e6c34e9e6c0298c817fc3e03fc12130edf088d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8d3e84eee6918f3be3e12be67b250840750aeb/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8d3e84eee6918f3be3e12be67b250840750aeb/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=1f8d3e84eee6918f3be3e12be67b250840750aeb", "patch": "@@ -1,3 +1,20 @@\n+2014-12-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR preprocessor/63831\n+\t* c-cppbuiltin.c (c_cpp_builtins): Don't define __has_attribute\n+\tand __has_cpp_attribute here.\n+\t* c-ppoutput.c (init_pp_output): Set cb->has_attribute to\n+\tc_common_has_attribute.\n+\t* c-common.h (c_common_has_attribute): New prototype.\n+\t* c-lex.c (init_c_lex): Set cb->has_attribute to\n+\tc_common_has_attribute instead of cb_has_attribute.\n+\t(get_token_no_padding): New function.\n+\t(cb_has_attribute): Renamed to ...\n+\t(c_common_has_attribute): ... this.  No longer static.  Use\n+\tget_token_no_padding, require ()s, don't build TREE_LIST\n+\tunnecessarily, fix up formatting, adjust diagnostics, call\n+\tinit_attributes.\n+\n 2014-12-15  Jason Merrill  <jason@redhat.com>\n \n \t* c.opt (-fsized-deallocation, -Wc++14-compat): New."}, {"sha": "c7eebcfc2ba9b328fcc3e655d0f9c3f652bcc06e", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8d3e84eee6918f3be3e12be67b250840750aeb/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8d3e84eee6918f3be3e12be67b250840750aeb/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=1f8d3e84eee6918f3be3e12be67b250840750aeb", "patch": "@@ -959,6 +959,7 @@ extern void c_cpp_builtins_optimize_pragma (cpp_reader *, tree, tree);\n extern bool c_cpp_error (cpp_reader *, int, int, location_t, unsigned int,\n \t\t\t const char *, va_list *)\n      ATTRIBUTE_GCC_DIAG(6,0);\n+extern int c_common_has_attribute (cpp_reader *);\n \n extern bool parse_optimize_options (tree, bool);\n "}, {"sha": "057776ff5045970cddc8a91468d3e51542ba22db", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8d3e84eee6918f3be3e12be67b250840750aeb/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8d3e84eee6918f3be3e12be67b250840750aeb/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=1f8d3e84eee6918f3be3e12be67b250840750aeb", "patch": "@@ -800,11 +800,6 @@ c_cpp_builtins (cpp_reader *pfile)\n   cpp_define (pfile, \"__has_include(STR)=__has_include__(STR)\");\n   cpp_define (pfile, \"__has_include_next(STR)=__has_include_next__(STR)\");\n \n-  /* Set attribute test macros for all C/C++ (not for just C++11 etc.)\n-     The builtin __has_attribute__ is defined in libcpp.  */\n-  cpp_define (pfile, \"__has_attribute(STR)=__has_attribute__(STR)\");\n-  cpp_define (pfile, \"__has_cpp_attribute(STR)=__has_attribute__(STR)\");\n-\n   if (c_dialect_cxx ())\n     {\n       if (flag_weak && SUPPORTS_ONE_ONLY)"}, {"sha": "f67e4900ab47495f1d484ccde994cfb7639807a5", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 63, "deletions": 39, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8d3e84eee6918f3be3e12be67b250840750aeb/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8d3e84eee6918f3be3e12be67b250840750aeb/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=1f8d3e84eee6918f3be3e12be67b250840750aeb", "patch": "@@ -64,7 +64,6 @@ static void cb_ident (cpp_reader *, unsigned int, const cpp_string *);\n static void cb_def_pragma (cpp_reader *, unsigned int);\n static void cb_define (cpp_reader *, unsigned int, cpp_hashnode *);\n static void cb_undef (cpp_reader *, unsigned int, cpp_hashnode *);\n-static int cb_has_attribute (cpp_reader *);\n \f\n void\n init_c_lex (void)\n@@ -89,7 +88,7 @@ init_c_lex (void)\n   cb->def_pragma = cb_def_pragma;\n   cb->valid_pch = c_common_valid_pch;\n   cb->read_pch = c_common_read_pch;\n-  cb->has_attribute = cb_has_attribute;\n+  cb->has_attribute = c_common_has_attribute;\n \n   /* Set the debug callbacks if we can use them.  */\n   if ((debug_info_level == DINFO_LEVEL_VERBOSE\n@@ -288,74 +287,99 @@ cb_undef (cpp_reader * ARG_UNUSED (pfile), source_location loc,\n \t\t\t (const char *) NODE_NAME (node));\n }\n \n+/* Wrapper around cpp_get_token to skip CPP_PADDING tokens\n+   and not consume CPP_EOF.  */\n+static const cpp_token *\n+get_token_no_padding (cpp_reader *pfile)\n+{\n+  for (;;)\n+    {\n+      const cpp_token *ret = cpp_peek_token (pfile, 0);\n+      if (ret->type == CPP_EOF)\n+\treturn ret;\n+      ret = cpp_get_token (pfile);\n+      if (ret->type != CPP_PADDING)\n+\treturn ret;\n+    }\n+}\n+\n /* Callback for has_attribute.  */\n-static int\n-cb_has_attribute (cpp_reader *pfile)\n+int\n+c_common_has_attribute (cpp_reader *pfile)\n {\n   int result = 0;\n-  bool paren = false;\n-  tree attr_ns = NULL_TREE, attr_id = NULL_TREE, attr_name = NULL_TREE;\n+  tree attr_name = NULL_TREE;\n   const cpp_token *token;\n \n-  token = cpp_get_token (pfile);\n-  if (token->type == CPP_OPEN_PAREN)\n+  token = get_token_no_padding (pfile);\n+  if (token->type != CPP_OPEN_PAREN)\n     {\n-      paren = true;\n-      token = cpp_get_token (pfile);\n+      cpp_error (pfile, CPP_DL_ERROR,\n+\t\t \"missing '(' after \\\"__has_attribute\\\"\");\n+      return 0;\n     }\n-\n+  token = get_token_no_padding (pfile);\n   if (token->type == CPP_NAME)\n     {\n-      //node = token->val.node.node;\n-      const cpp_token *nxt_token = cpp_peek_token (pfile, 0);\n-      if (c_dialect_cxx() && nxt_token->type == CPP_SCOPE)\n+      attr_name = get_identifier ((const char *)\n+\t\t\t\t  cpp_token_as_text (pfile, token));\n+      if (c_dialect_cxx ())\n \t{\n-\t  nxt_token = cpp_get_token (pfile); // Eat scope.\n-\t  nxt_token = cpp_get_token (pfile);\n-\t  if (nxt_token->type == CPP_NAME)\n+\t  int idx = 0;\n+\t  const cpp_token *nxt_token;\n+\t  do\n+\t    nxt_token = cpp_peek_token (pfile, idx++);\n+\t  while (nxt_token->type == CPP_PADDING);\n+\t  if (nxt_token->type == CPP_SCOPE)\n \t    {\n-\t      attr_ns = get_identifier (\n-\t\t\t(const char *) cpp_token_as_text (pfile, token));\n-\t      attr_id = get_identifier (\n-\t\t\t(const char *) cpp_token_as_text (pfile, nxt_token));\n-\t      attr_name = build_tree_list (attr_ns, attr_id);\n+\t      get_token_no_padding (pfile); // Eat scope.\n+\t      nxt_token = get_token_no_padding (pfile);\n+\t      if (nxt_token->type == CPP_NAME)\n+\t\t{\n+\t\t  tree attr_ns = attr_name;\n+\t\t  tree attr_id\n+\t\t    = get_identifier ((const char *)\n+\t\t\t\t      cpp_token_as_text (pfile, nxt_token));\n+\t\t  attr_name = build_tree_list (attr_ns, attr_id);\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  cpp_error (pfile, CPP_DL_ERROR,\n+\t\t\t     \"attribute identifier required after scope\");\n+\t\t  attr_name = NULL_TREE;\n+\t\t}\n \t    }\n-\t  else\n-\t    cpp_error (pfile, CPP_DL_ERROR,\n-\t\t       \"attribute identifier required after scope\");\n-\t}\n-      else\n-\t{\n-\t  attr_ns = get_identifier (\"gnu\");\n-\t  attr_id = get_identifier (\n-\t\t    (const char *) cpp_token_as_text (pfile, token));\n-\t  attr_name = build_tree_list (attr_ns, attr_id);\n \t}\n       if (attr_name)\n \t{\n+\t  init_attributes ();\n \t  const struct attribute_spec *attr = lookup_attribute_spec (attr_name);\n \t  if (attr)\n \t    {\n-\t      if (is_attribute_p (\"noreturn\", TREE_VALUE (attr_name)))\n+\t      if (TREE_CODE (attr_name) == TREE_LIST)\n+\t\tattr_name = TREE_VALUE (attr_name);\n+\t      if (is_attribute_p (\"noreturn\", attr_name))\n \t\tresult = 200809;\n-\t      else if (is_attribute_p (\"deprecated\", TREE_VALUE (attr_name)))\n+\t      else if (is_attribute_p (\"deprecated\", attr_name))\n \t\tresult = 201309;\n \t      else\n \t\tresult = 1;\n \t    }\n \t}\n     }\n   else\n-    cpp_error (pfile, CPP_DL_ERROR,\n-\t       \"operator \\\"__has_attribute__\\\" requires an identifier\");\n+    {\n+      cpp_error (pfile, CPP_DL_ERROR,\n+\t\t \"macro \\\"__has_attribute\\\" requires an identifier\");\n+      return 0;\n+    }\n \n-  if (paren && cpp_get_token (pfile)->type != CPP_CLOSE_PAREN)\n+  if (get_token_no_padding (pfile)->type != CPP_CLOSE_PAREN)\n     cpp_error (pfile, CPP_DL_ERROR,\n-\t       \"missing ')' after \\\"__has_attribute__\\\"\");\n+\t       \"missing ')' after \\\"__has_attribute\\\"\");\n \n   return result;\n }\n-\n \f\n /* Read a token and return its type.  Fill *VALUE with its value, if\n    applicable.  Fill *CPP_FLAGS with the token's flags, if it is"}, {"sha": "66fbd7e7976ed1d5ee11faaf5328078b8c0cadb4", "filename": "gcc/c-family/c-ppoutput.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8d3e84eee6918f3be3e12be67b250840750aeb/gcc%2Fc-family%2Fc-ppoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8d3e84eee6918f3be3e12be67b250840750aeb/gcc%2Fc-family%2Fc-ppoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ppoutput.c?ref=1f8d3e84eee6918f3be3e12be67b250840750aeb", "patch": "@@ -151,6 +151,8 @@ init_pp_output (FILE *out_stream)\n       cb->used_undef = cb_used_undef;\n     }\n \n+  cb->has_attribute = c_common_has_attribute;\n+\n   /* Initialize the print structure.  */\n   print.src_line = 1;\n   print.printed = 0;"}, {"sha": "35012180d2498d59930dff64f1fc0feb767fb0d0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8d3e84eee6918f3be3e12be67b250840750aeb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8d3e84eee6918f3be3e12be67b250840750aeb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1f8d3e84eee6918f3be3e12be67b250840750aeb", "patch": "@@ -1,3 +1,9 @@\n+2014-12-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR preprocessor/63831\n+\t* c-c++-common/cpp/pr63831-1.c: New test.\n+\t* c-c++-common/cpp/pr63831-2.c: New test.\n+\n 2014-12-18  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/63723"}, {"sha": "c9e7756406de43bbf1df3b1cc143b35448dcf878", "filename": "gcc/testsuite/c-c++-common/cpp/pr63831-1.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8d3e84eee6918f3be3e12be67b250840750aeb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr63831-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8d3e84eee6918f3be3e12be67b250840750aeb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr63831-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr63831-1.c?ref=1f8d3e84eee6918f3be3e12be67b250840750aeb", "patch": "@@ -0,0 +1,64 @@\n+/* PR preprocessor/63831 */\n+/* { dg-do compile } */\n+\n+#ifdef __has_attribute\n+typedef char T1[__has_attribute (__noreturn__) == 200809 ? 1 : -1];\n+typedef char T2[__has_attribute (alloc_size) == 1 ? 1 : -1];\n+typedef char T3[__has_attribute (non_existent_attribuuuute) == 0 ? 1 : -1];\n+#endif\n+#if __has_attribute (noreturn) == 200809\n+typedef char T4;\n+#endif\n+#define d deprecated\n+typedef char T5[__has_attribute (d) == 201309 ? 1 : -1];\n+T1 t1;\n+T2 t2;\n+T3 t3;\n+T4 t4;\n+T5 t5;\n+#ifdef __cplusplus\n+typedef char T6[__has_attribute (gnu::__noreturn__) == 200809 ? 1 : -1];\n+typedef char T7[__has_attribute (gnu::alloc_size) == 1 ? 1 : -1];\n+typedef char T8[__has_attribute (gnu::non_existent_attribuuuute) == 0 ? 1 : -1];\n+#if __has_attribute (gnu::noreturn) == 200809\n+typedef char T9;\n+#endif\n+#define d2 gnu::deprecated\n+typedef char T10[__has_attribute (d) == 201309 ? 1 : -1];\n+T6 t6;\n+T7 t7;\n+T8 t8;\n+T9 t9;\n+T10 t10;\n+#endif\n+#ifdef __has_cpp_attribute\n+typedef char T11[__has_cpp_attribute (__noreturn__) == 200809 ? 1 : -1];\n+typedef char T12[__has_cpp_attribute (alloc_size) == 1 ? 1 : -1];\n+typedef char T13[__has_cpp_attribute (non_existent_attribuuuute) == 0 ? 1 : -1];\n+#endif\n+#if __has_cpp_attribute (noreturn) == 200809\n+typedef char T14;\n+#endif\n+#define d deprecated\n+typedef char T15[__has_cpp_attribute (d) == 201309 ? 1 : -1];\n+T11 t11;\n+T12 t12;\n+T13 t13;\n+T14 t14;\n+T15 t15;\n+#ifdef __cplusplus\n+typedef char T16[__has_cpp_attribute (gnu::__noreturn__) == 200809 ? 1 : -1];\n+typedef char T17[__has_cpp_attribute (gnu::alloc_size) == 1 ? 1 : -1];\n+typedef char T18[__has_cpp_attribute (gnu::non_existent_attribuuuute) == 0 ? 1 : -1];\n+#if __has_cpp_attribute (gnu::noreturn) == 200809\n+typedef char T19;\n+#endif\n+#define d2 gnu::deprecated\n+typedef char T20[__has_cpp_attribute (d) == 201309 ? 1 : -1];\n+T16 t16;\n+T17 t17;\n+T18 t18;\n+T19 t19;\n+T20 t20;\n+#endif\n+int t21 = __has_attribute (noreturn) + __has_cpp_attribute (__malloc__);"}, {"sha": "cc87d1d9c121eb40a2d851d4780a7a7a114884ea", "filename": "gcc/testsuite/c-c++-common/cpp/pr63831-2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8d3e84eee6918f3be3e12be67b250840750aeb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr63831-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8d3e84eee6918f3be3e12be67b250840750aeb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr63831-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr63831-2.c?ref=1f8d3e84eee6918f3be3e12be67b250840750aeb", "patch": "@@ -0,0 +1,7 @@\n+/* PR preprocessor/63831 */\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps\" } */\n+\n+#include \"pr63831-1.c\"\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "71a2d0d7e922bc2bd35b36f2a2a6ac8747c3625c", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8d3e84eee6918f3be3e12be67b250840750aeb/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8d3e84eee6918f3be3e12be67b250840750aeb/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=1f8d3e84eee6918f3be3e12be67b250840750aeb", "patch": "@@ -1,3 +1,23 @@\n+2014-12-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR preprocessor/63831\n+\t* directives.c (lex_macro_node): Remove __has_attribute__ handling.\n+\t* internal.h (struct spec_node): Remove n__has_attribute__ field.\n+\t(struct lexer_state): Remove in__has_attribute__ field.\n+\t* macro.c (_cpp_builtin_macro_text): Handle BT_HAS_ATTRIBUTE.\n+\t* identifiers.c (_cpp_init_hashtable): Remove __has_attribute__\n+\thandling.\n+\t* init.c (builtin_array): Add __has_attribute and __has_cpp_attribute.\n+\t(cpp_init_special_builtins): Don't initialize __has_attribute\n+\tor __has_cpp_attribute if CLK_ASM or pfile->cb.has_attribute is NULL.\n+\t* traditional.c (enum ls): Remove ls_has_attribute,\n+\tls_has_attribute_close.\n+\t(_cpp_scan_out_logical_line): Remove __has_attribute__ handling.\n+\t* include/cpplib.h (enum cpp_builtin_type): Add BT_HAS_ATTRIBUTE.\n+\t* pch.c (cpp_read_state): Remove __has_attribute__ handling.\n+\t* expr.c (eval_token): Likewise.\n+\t(parse_has_attribute): Removed.\n+\n 2014-12-11  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* directives.c (cpp_define_formatted): Use xvasprintf."}, {"sha": "d0ff56a1861cb41a4e7c849584b5d32ed8ed49e6", "filename": "libcpp/directives.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8d3e84eee6918f3be3e12be67b250840750aeb/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8d3e84eee6918f3be3e12be67b250840750aeb/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=1f8d3e84eee6918f3be3e12be67b250840750aeb", "patch": "@@ -571,10 +571,6 @@ lex_macro_node (cpp_reader *pfile, bool is_def_or_undef)\n \t     || node == pfile->spec_nodes.n__has_include_next__))\n \tcpp_error (pfile, CPP_DL_ERROR,\n \t\t   \"\\\"__has_include__\\\" cannot be used as a macro name\");\n-      else if (is_def_or_undef\n-\t    && node == pfile->spec_nodes.n__has_attribute__)\n-\tcpp_error (pfile, CPP_DL_ERROR,\n-\t\t   \"\\\"__has_attribute__\\\" cannot be used as a macro name\");\n       else if (! (node->flags & NODE_POISONED))\n \treturn node;\n     }"}, {"sha": "c24b640ba16a2bc416213002ee567cad688e40fe", "filename": "libcpp/expr.c", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8d3e84eee6918f3be3e12be67b250840750aeb/libcpp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8d3e84eee6918f3be3e12be67b250840750aeb/libcpp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fexpr.c?ref=1f8d3e84eee6918f3be3e12be67b250840750aeb", "patch": "@@ -65,7 +65,6 @@ static unsigned int interpret_int_suffix (cpp_reader *, const uchar *, size_t);\n static void check_promotion (cpp_reader *, const struct op *);\n \n static cpp_num parse_has_include (cpp_reader *, enum include_type);\n-static cpp_num parse_has_attribute (cpp_reader *);\n \n /* Token type abuse to create unary plus and minus operators.  */\n #define CPP_UPLUS ((enum cpp_ttype) (CPP_LAST_CPP_OP + 1))\n@@ -1055,8 +1054,6 @@ eval_token (cpp_reader *pfile, const cpp_token *token,\n \treturn parse_has_include (pfile, IT_INCLUDE);\n       else if (token->val.node.node == pfile->spec_nodes.n__has_include_next__)\n \treturn parse_has_include (pfile, IT_INCLUDE_NEXT);\n-      else if (token->val.node.node == pfile->spec_nodes.n__has_attribute__)\n-\treturn parse_has_attribute (pfile);\n       else if (CPP_OPTION (pfile, cplusplus)\n \t       && (token->val.node.node == pfile->spec_nodes.n_true\n \t\t   || token->val.node.node == pfile->spec_nodes.n_false))\n@@ -2150,21 +2147,3 @@ parse_has_include (cpp_reader *pfile, enum include_type type)\n \n   return result;\n }\n-\n-/* Handle meeting \"__has_attribute__\" in a preprocessor expression.  */\n-static cpp_num\n-parse_has_attribute (cpp_reader *pfile)\n-{\n-  pfile->state.in__has_attribute__++;\n-\n-  cpp_num result;\n-  result.unsignedp = false;\n-  result.high = 0;\n-  result.overflow = false;\n-\n-  result.low = pfile->cb.has_attribute (pfile);\n-\n-  pfile->state.in__has_attribute__--;\n-\n-  return result;\n-}"}, {"sha": "35d19067495d29dd032f835a42a806cf4fa0690c", "filename": "libcpp/identifiers.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8d3e84eee6918f3be3e12be67b250840750aeb/libcpp%2Fidentifiers.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8d3e84eee6918f3be3e12be67b250840750aeb/libcpp%2Fidentifiers.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fidentifiers.c?ref=1f8d3e84eee6918f3be3e12be67b250840750aeb", "patch": "@@ -72,7 +72,6 @@ _cpp_init_hashtable (cpp_reader *pfile, cpp_hash_table *table)\n   s->n__VA_ARGS__->flags |= NODE_DIAGNOSTIC;\n   s->n__has_include__   = cpp_lookup (pfile, DSC(\"__has_include__\"));\n   s->n__has_include_next__ = cpp_lookup (pfile, DSC(\"__has_include_next__\"));\n-  s->n__has_attribute__   = cpp_lookup (pfile, DSC(\"__has_attribute__\"));\n }\n \n /* Tear down the identifier hash table.  */"}, {"sha": "b36918e1b3756981c8fdc103cfba68cfbcb985cc", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8d3e84eee6918f3be3e12be67b250840750aeb/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8d3e84eee6918f3be3e12be67b250840750aeb/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=1f8d3e84eee6918f3be3e12be67b250840750aeb", "patch": "@@ -676,6 +676,7 @@ enum cpp_builtin_type\n   BT_PRAGMA,\t\t\t/* `_Pragma' operator */\n   BT_TIMESTAMP,\t\t\t/* `__TIMESTAMP__' */\n   BT_COUNTER,\t\t\t/* `__COUNTER__' */\n+  BT_HAS_ATTRIBUTE,\t\t/* `__has_attribute__(x)' */\n   BT_FIRST_USER,\t\t/* User defined builtin macros.  */\n   BT_LAST_USER = BT_FIRST_USER + 31\n };"}, {"sha": "cf0145b6be27ccab0bfce928bed8ad73f750967c", "filename": "libcpp/init.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8d3e84eee6918f3be3e12be67b250840750aeb/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8d3e84eee6918f3be3e12be67b250840750aeb/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=1f8d3e84eee6918f3be3e12be67b250840750aeb", "patch": "@@ -380,6 +380,8 @@ static const struct builtin_macro builtin_array[] =\n   B(\"__LINE__\",\t\t BT_SPECLINE,      true),\n   B(\"__INCLUDE_LEVEL__\", BT_INCLUDE_LEVEL, true),\n   B(\"__COUNTER__\",\t BT_COUNTER,       true),\n+  B(\"__has_attribute\",\t BT_HAS_ATTRIBUTE, true),\n+  B(\"__has_cpp_attribute\", BT_HAS_ATTRIBUTE, true),\n   /* Keep builtins not used for -traditional-cpp at the end, and\n      update init_builtins() if any more are added.  */\n   B(\"_Pragma\",\t\t BT_PRAGMA,        true),\n@@ -460,6 +462,10 @@ cpp_init_special_builtins (cpp_reader *pfile)\n \n   for (b = builtin_array; b < builtin_array + n; b++)\n     {\n+      if (b->value == BT_HAS_ATTRIBUTE\n+\t  && (CPP_OPTION (pfile, lang) == CLK_ASM\n+\t      || pfile->cb.has_attribute == NULL))\n+\tcontinue;\n       cpp_hashnode *hp = cpp_lookup (pfile, b->name, b->len);\n       hp->type = NT_MACRO;\n       hp->flags |= NODE_BUILTIN;"}, {"sha": "427f4c6def6971cd6e7c4b644f53d7e74543213a", "filename": "libcpp/internal.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8d3e84eee6918f3be3e12be67b250840750aeb/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8d3e84eee6918f3be3e12be67b250840750aeb/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=1f8d3e84eee6918f3be3e12be67b250840750aeb", "patch": "@@ -261,9 +261,6 @@ struct lexer_state\n   /* Nonzero if in a __has_include__ or __has_include_next__ statement.  */\n   unsigned char in__has_include__;\n \n-  /* Nonzero if in a __has_attribute__ statement.  */\n-  unsigned char in__has_attribute__;\n-\n   /* Nonzero if prevent_expansion is true only because output is\n      being discarded.  */\n   unsigned char discarding_output;\n@@ -287,7 +284,6 @@ struct spec_nodes\n   cpp_hashnode *n__VA_ARGS__;\t\t/* C99 vararg macros */\n   cpp_hashnode *n__has_include__;\t/* __has_include__ operator */\n   cpp_hashnode *n__has_include_next__;\t/* __has_include_next__ operator */\n-  cpp_hashnode *n__has_attribute__;\t/* __has_attribute__ operator */\n };\n \n typedef struct _cpp_line_note _cpp_line_note;"}, {"sha": "c510e497da4933494d80f4b1fa9bd507c906cf7d", "filename": "libcpp/macro.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8d3e84eee6918f3be3e12be67b250840750aeb/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8d3e84eee6918f3be3e12be67b250840750aeb/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=1f8d3e84eee6918f3be3e12be67b250840750aeb", "patch": "@@ -393,6 +393,10 @@ _cpp_builtin_macro_text (cpp_reader *pfile, cpp_hashnode *node)\n \t    \"__COUNTER__ expanded inside directive with -fdirectives-only\");\n       number = pfile->counter++;\n       break;\n+\n+    case BT_HAS_ATTRIBUTE:\n+      number = pfile->cb.has_attribute (pfile);\n+      break;\n     }\n \n   if (result == NULL)"}, {"sha": "3ff39d7ef0950c9a251b798db089c23f212e04cd", "filename": "libcpp/pch.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8d3e84eee6918f3be3e12be67b250840750aeb/libcpp%2Fpch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8d3e84eee6918f3be3e12be67b250840750aeb/libcpp%2Fpch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fpch.c?ref=1f8d3e84eee6918f3be3e12be67b250840750aeb", "patch": "@@ -835,7 +835,6 @@ cpp_read_state (cpp_reader *r, const char *name, FILE *f,\n     s->n__VA_ARGS__     = cpp_lookup (r, DSC(\"__VA_ARGS__\"));\n     s->n__has_include__ = cpp_lookup (r, DSC(\"__has_include__\"));\n     s->n__has_include_next__ = cpp_lookup (r, DSC(\"__has_include_next__\"));\n-    s->n__has_attribute__ = cpp_lookup (r, DSC(\"__has_attribute__\"));\n   }\n \n   old_state = r->state;"}, {"sha": "3d40c2f2122b8236d1a125c998d1c2a9352fabfc", "filename": "libcpp/traditional.c", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8d3e84eee6918f3be3e12be67b250840750aeb/libcpp%2Ftraditional.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8d3e84eee6918f3be3e12be67b250840750aeb/libcpp%2Ftraditional.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ftraditional.c?ref=1f8d3e84eee6918f3be3e12be67b250840750aeb", "patch": "@@ -76,9 +76,7 @@ enum ls {ls_none = 0,\t\t/* Normal state.  */\n \t ls_predicate,\t\t/* After the predicate, maybe paren?  */\n \t ls_answer,\t\t/* In answer to predicate.  */\n \t ls_has_include,\t/* After __has_include__.  */\n-\t ls_has_include_close,\t/* Looking for ')' of __has_include__.  */\n-\t ls_has_attribute,\t/* After __has_attribute__.  */\n-\t ls_has_attribute_close}; /* Looking for ')' of __has_attribute__.  */\n+\t ls_has_include_close};\t/* Looking for ')' of __has_include__.  */\n \n /* Lexing TODO: Maybe handle space in escaped newlines.  Stop lex.c\n    from recognizing comments and directives during its lexing pass.  */\n@@ -535,12 +533,6 @@ _cpp_scan_out_logical_line (cpp_reader *pfile, cpp_macro *macro)\n \t\t  lex_state = ls_has_include;\n \t\t  continue;\n \t\t}\n-\t      else if (pfile->state.in_expression\n-\t\t       && node == pfile->spec_nodes.n__has_attribute__)\n-\t\t{\n-\t\t  lex_state = ls_has_attribute;\n-\t\t  continue;\n-\t\t}\n \t    }\n \t  break;\n \n@@ -566,8 +558,6 @@ _cpp_scan_out_logical_line (cpp_reader *pfile, cpp_macro *macro)\n \t\tlex_state = ls_defined_close;\n \t      else if (lex_state == ls_has_include)\n \t\tlex_state = ls_has_include_close;\n-\t      else if (lex_state == ls_has_attribute)\n-\t\tlex_state = ls_has_attribute_close;\n \t    }\n \t  break;\n \n@@ -606,8 +596,7 @@ _cpp_scan_out_logical_line (cpp_reader *pfile, cpp_macro *macro)\n \t\t    }\n \t\t}\n \t      else if (lex_state == ls_answer || lex_state == ls_defined_close\n-\t\t\t|| lex_state == ls_has_include_close\n-\t\t\t|| lex_state == ls_has_attribute_close)\n+\t\t\t|| lex_state == ls_has_include_close)\n \t\tlex_state = ls_none;\n \t    }\n \t  break;\n@@ -689,8 +678,7 @@ _cpp_scan_out_logical_line (cpp_reader *pfile, cpp_macro *macro)\n       else if (lex_state == ls_hash\n \t       || lex_state == ls_predicate\n \t       || lex_state == ls_defined\n-\t       || lex_state == ls_has_include\n-\t       || lex_state == ls_has_attribute)\n+\t       || lex_state == ls_has_include)\n \tlex_state = ls_none;\n \n       /* ls_answer and ls_defined_close keep going until ')'.  */"}]}