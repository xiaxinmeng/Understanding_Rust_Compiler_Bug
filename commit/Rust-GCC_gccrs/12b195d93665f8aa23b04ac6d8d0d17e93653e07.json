{"sha": "12b195d93665f8aa23b04ac6d8d0d17e93653e07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJiMTk1ZDkzNjY1ZjhhYTIzYjA0YWM2ZDhkMGQxN2U5MzY1M2UwNw==", "commit": {"author": {"name": "Martin v. L\u00f6wis", "email": "loewis@informatik.hu-berlin.de", "date": "1998-05-21T19:20:37Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-05-21T19:20:37Z"}, "message": "Makefile.in (TREE_H): Add tree-check.h.\n\n\t* Makefile.in (TREE_H): Add tree-check.h.\n\t(tree-check.h, gencheck): New targets.\n\t* gencheck.c: New file.\n\t* tree.c (tree_check, tree_class_check): New functions.\n\t* tree.h (TREE_CHECK, TREE_CLASS_CHECK): Define.\n\t(TYPE_CHECK, DECL_CHECK): Define.\n\tModify all access macros to use generated checking macros.\n\nFrom-SVN: r19934", "tree": {"sha": "bc40046c9415c0c892a2ac847b8cc611b60a2c5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc40046c9415c0c892a2ac847b8cc611b60a2c5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12b195d93665f8aa23b04ac6d8d0d17e93653e07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12b195d93665f8aa23b04ac6d8d0d17e93653e07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12b195d93665f8aa23b04ac6d8d0d17e93653e07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12b195d93665f8aa23b04ac6d8d0d17e93653e07/comments", "author": null, "committer": null, "parents": [{"sha": "9e423e6db21b75a78fb1d636673bfaed94fc979f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e423e6db21b75a78fb1d636673bfaed94fc979f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e423e6db21b75a78fb1d636673bfaed94fc979f"}], "stats": {"total": 477, "additions": 334, "deletions": 143}, "files": [{"sha": "eef746446f2b7558a58a9f05bb4472947d5c7aeb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12b195d93665f8aa23b04ac6d8d0d17e93653e07/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12b195d93665f8aa23b04ac6d8d0d17e93653e07/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=12b195d93665f8aa23b04ac6d8d0d17e93653e07", "patch": "@@ -1,3 +1,13 @@\n+Thu May 21 20:18:13 1998  Martin von Loewis  <loewis@informatik.hu-berlin.de>\n+\n+\t* Makefile.in (TREE_H): Add tree-check.h.\n+\t(tree-check.h, gencheck): New targets.\n+\t* gencheck.c: New file.\n+\t* tree.c (tree_check, tree_class_check): New functions.\n+\t* tree.h (TREE_CHECK, TREE_CLASS_CHECK): Define.\n+\t(TYPE_CHECK, DECL_CHECK): Define.\n+\tModify all access macros to use generated checking macros.\n+\n Wed May 20 23:44:28 EDT 1998  John Wehle  (john@feith.com)\n \n \t* acconfig.h (HAVE_GAS_MAX_SKIP_P2ALIGN): New tag."}, {"sha": "58b4787a1362d963fe60ccf976d5fa2090880dbe", "filename": "gcc/Makefile.in", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12b195d93665f8aa23b04ac6d8d0d17e93653e07/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12b195d93665f8aa23b04ac6d8d0d17e93653e07/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=12b195d93665f8aa23b04ac6d8d0d17e93653e07", "patch": "@@ -729,7 +729,7 @@ DPBIT_FUNCS = _pack_df _unpack_df _addsub_df _mul_df _div_df \\\n CONFIG_H =\n RTL_BASE_H = rtl.h rtl.def gansidecl.h machmode.h machmode.def\n RTL_H = $(RTL_BASE_H) genrtl.h\n-TREE_H = tree.h real.h tree.def gansidecl.h machmode.h machmode.def\n+TREE_H = tree.h real.h tree.def gansidecl.h machmode.h machmode.def tree-check.h\n BASIC_BLOCK_H = basic-block.h bitmap.h\n DEMANGLE_H = demangle.h gansidecl.h\n RECOG_H = recog.h gansidecl.h\n@@ -1365,6 +1365,16 @@ gcc.o: gcc.c $(CONFIG_H) system.h gansidecl.h multilib.h Makefile \\\n   $(DRIVER_DEFINES) \\\n   -c `echo $(srcdir)/gcc.c | sed 's,^\\./,,'`\n \n+tree-check.h: s-check ; @true\n+s-check : tree.def gencheck $(srcdir)/move-if-change\n+\t./gencheck > tmp-check.h\n+\t$(srcdir)/move-if-change tmp-check.h tree-check.h\n+\ttouch s-check\n+\n+gencheck : gencheck.o tree.h tree.def\n+\t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@ \\\n+\t gencheck.o $(HOST_LIBS)\n+\n dumpvers: dumpvers.c\n \n version.o: version.c"}, {"sha": "6b5612ded31ecd5116bcb12ea65e556563e8a9bc", "filename": "gcc/gencheck.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12b195d93665f8aa23b04ac6d8d0d17e93653e07/gcc%2Fgencheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12b195d93665f8aa23b04ac6d8d0d17e93653e07/gcc%2Fgencheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencheck.c?ref=12b195d93665f8aa23b04ac6d8d0d17e93653e07", "patch": "@@ -0,0 +1,62 @@\n+/* Generate check macros for tree codes.\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include <stdio.h>\n+#include \"hconfig.h\"\n+#include \"system.h\"\n+\n+#define DEFTREECODE(SYM, NAME, TYPE, LEN)   STRINGIFY(SYM),\n+\n+char *tree_codes[] = {\n+#include \"tree.def\"\n+(char*)0\n+};\n+\n+void usage ()\n+{\n+  fprintf (stderr,\"Usage: gencheck\\n\");\n+}\n+\n+int main (argc, argv)\n+     int argc;\n+     char *argv[];\n+{\n+  int i;\n+  switch (argc)\n+    {\n+    case 1:\n+      break;\n+    default:\n+      usage ();\n+      exit (1);\n+    }\n+\n+  printf (\"/* This file is generated using gencheck. Do not edit. */\\n\");\n+  for (i = 0; tree_codes[i]; i++)\n+    {\n+      printf (\"#define %s_CHECK(t)\\tTREE_CHECK (t, %s)\\n\",\n+\t      tree_codes[i], tree_codes[i]);\n+      printf (\"#define %s_CHECK1(t)\\tTREE_CHECK1 (t, %s)\\n\",\n+\t      tree_codes[i], tree_codes[i]);\n+    }\n+\n+  return 0;\n+}\n+"}, {"sha": "41704ad6dcfeafd14aee18e7697629702b86f02e", "filename": "gcc/tree.c", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12b195d93665f8aa23b04ac6d8d0d17e93653e07/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12b195d93665f8aa23b04ac6d8d0d17e93653e07/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=12b195d93665f8aa23b04ac6d8d0d17e93653e07", "patch": "@@ -4923,3 +4923,75 @@ get_set_constructor_bytes (init, buffer, wd_size)\n     }\n   return non_const_bits;\n }\n+\n+#ifdef ENABLE_CHECKING\n+/* Complain if the tree code does not match the expected one.  */\n+\n+tree\n+tree_check (node, code, file, line, nofatal)\n+     tree node;\n+     enum tree_code code;\n+     char *file;\n+     int line;\n+     int nofatal;\n+{\n+  if (TREE_CODE (node) != code)\n+    if (nofatal)\n+      return 0;\n+    else\n+      fatal (\"%s:%d: Expect %s, have %s\\n\", file, line,\n+\t     tree_code_name[code], tree_code_name[TREE_CODE (node)]);\n+\n+  return node;\n+}\n+\n+/* Complain if the class of the tree node does not match.  */\n+\n+tree\n+tree_class_check (node, cl, file, line, nofatal)\n+     tree node;\n+     char cl;\n+     char *file;\n+     int line;\n+     int nofatal;\n+{\n+  if (TREE_CODE_CLASS (TREE_CODE (node)) != cl)\n+    if (nofatal)\n+      return 0;\n+    else\n+      fatal (\"%s:%d: Expect '%c', have '%s'\\n\", file, line,\n+\t     cl, tree_code_name[TREE_CODE (node)]);\n+\n+  return node;\n+}\n+/* Complain if the node is not an expression. */\n+\n+tree\n+expr_check (node, ignored, file, line, nofatal)\n+     tree node;\n+     int ignored;\n+     char *file;\n+     int line;\n+     int nofatal;\n+{\n+  switch (TREE_CODE_CLASS (TREE_CODE (node)))\n+    {\n+    case 'r':\n+    case 's':\n+    case 'e':\n+    case '<':\n+    case '1':\n+    case '2':\n+      break;\n+\n+    default:\n+      if (nofatal)\n+\treturn 0;\n+      else\n+\tfatal (\"%s:%d: Expect expression, have '%s'\\n\", file, line,\n+\t       tree_code_name[TREE_CODE (node)]);\n+    }\n+\n+  return node;\n+}\n+#endif"}, {"sha": "440c6645f48ec4cbcc8310ae92000c00d0f35b67", "filename": "gcc/tree.h", "status": "modified", "additions": 179, "deletions": 142, "changes": 321, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12b195d93665f8aa23b04ac6d8d0d17e93653e07/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12b195d93665f8aa23b04ac6d8d0d17e93653e07/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=12b195d93665f8aa23b04ac6d8d0d17e93653e07", "patch": "@@ -301,6 +301,40 @@ struct tree_common\n #define TREE_CODE(NODE) ((enum tree_code) (NODE)->common.code)\n #define TREE_SET_CODE(NODE, VALUE) ((NODE)->common.code = (int) (VALUE))\n \n+/* When checking is enabled, errors will be generated if a tree node\n+   is accessed incorrectly. The macros abort with a fatal error,\n+   except for the *1 variants, which just return 0 on failure.  The\n+   latter variants should only be used for combination checks, which\n+   succeed when one of the checks succeed. The CHAIN_CHECK macro helps\n+   defining such checks.  */\n+\n+#ifdef ENABLE_CHECKING\n+#define DO_CHECK(FUNC, t, param)   FUNC (t, param, __FILE__, __LINE__, 0)\n+#define DO_CHECK1(FUNC, t, param)  FUNC (t, param, __FILE__, __LINE__, 1)\n+#define CHAIN_CHECK(t, c1, c2)     (c1 (t) ? t : c2 (t))\n+#else\n+#define DO_CHECK(FUNC, t, param)   (t)\n+#define DO_CHECK1(FUNC, t, param)  (t)\n+#define CHAIN_CHECK(t, c1, c2)     (t)\n+#endif\n+\n+#define TREE_CHECK(t, code)        DO_CHECK (tree_check, t, code)\n+#define TREE_CHECK1(t, code)       DO_CHECK1 (tree_check, t, code)\n+\n+#include \"tree-check.h\"\n+\n+#define TYPE_CHECK(t)          DO_CHECK (tree_class_check, t, 't')\n+#define TYPE_CHECK1(t)         DO_CHECK1 (tree_class_check, t, 't')\n+#define DECL_CHECK(t)          DO_CHECK (tree_class_check, t, 'd')\n+#define DECL_CHECK1(t)         DO_CHECK1 (tree_class_check, t, 'd')\n+#define CST_CHECK(t)           DO_CHECK (tree_class_check, t, 'c')\n+#define CST_CHECK1(t)          DO_CHECK1 (tree_class_check, t, 'c')\n+#define EXPR_CHECK(t)          DO_CHECK (expr_check, t, 0)\n+\n+/* Chained checks. The last check has to succeed, the others may fail. */\n+#define CST_OR_CONSTRUCTOR_CHECK(t) \\\n+   CHAIN_CHECK (t, CST_CHECK1, CONSTRUCTOR_CHECK)\n+\n /* In all nodes that are expressions, this is the data type of the expression.\n    In POINTER_TYPE nodes, this is the type that the pointer points to.\n    In ARRAY_TYPE nodes, this is the type of the elements.  */\n@@ -511,8 +545,8 @@ struct tree_common\n    If the data type is signed, the value is sign-extended to 2 words\n    even though not all of them may really be in use.\n    In an unsigned constant shorter than 2 words, the extra bits are 0.  */\n-#define TREE_INT_CST_LOW(NODE) ((NODE)->int_cst.int_cst_low)\n-#define TREE_INT_CST_HIGH(NODE) ((NODE)->int_cst.int_cst_high)\n+#define TREE_INT_CST_LOW(NODE) (INTEGER_CST_CHECK (NODE)->int_cst.int_cst_low)\n+#define TREE_INT_CST_HIGH(NODE) (INTEGER_CST_CHECK (NODE)->int_cst.int_cst_high)\n \n #define INT_CST_LT(A, B)  \\\n (TREE_INT_CST_HIGH (A) < TREE_INT_CST_HIGH (B)\t\t\t\\\n@@ -541,14 +575,14 @@ struct tree_int_cst\n    and generally in all kinds of constants that could\n    be given labels (rather than being immediate).  */\n \n-#define TREE_CST_RTL(NODE) ((NODE)->real_cst.rtl)\n+#define TREE_CST_RTL(NODE) (CST_OR_CONSTRUCTOR_CHECK (NODE)->real_cst.rtl)\n \n /* In a REAL_CST node.  */\n /* We can represent a real value as either a `double' or a string.\n    Strings don't allow for any optimization, but they do allow\n    for cross-compilation.  */\n \n-#define TREE_REAL_CST(NODE) ((NODE)->real_cst.real_cst)\n+#define TREE_REAL_CST(NODE) (REAL_CST_CHECK (NODE)->real_cst.real_cst)\n \n #include \"real.h\"\n \n@@ -561,8 +595,8 @@ struct tree_real_cst\n };\n \n /* In a STRING_CST */\n-#define TREE_STRING_LENGTH(NODE) ((NODE)->string.length)\n-#define TREE_STRING_POINTER(NODE) ((NODE)->string.pointer)\n+#define TREE_STRING_LENGTH(NODE) (STRING_CST_CHECK (NODE)->string.length)\n+#define TREE_STRING_POINTER(NODE) (STRING_CST_CHECK (NODE)->string.pointer)\n \n struct tree_string\n {\n@@ -574,8 +608,8 @@ struct tree_string\n };\n \n /* In a COMPLEX_CST node.  */\n-#define TREE_REALPART(NODE) ((NODE)->complex.real)\n-#define TREE_IMAGPART(NODE) ((NODE)->complex.imag)\n+#define TREE_REALPART(NODE) (COMPLEX_CST_CHECK (NODE)->complex.real)\n+#define TREE_IMAGPART(NODE) (COMPLEX_CST_CHECK (NODE)->complex.imag)\n \n struct tree_complex\n {\n@@ -588,8 +622,8 @@ struct tree_complex\n \f\n /* Define fields and accessors for some special-purpose tree nodes.  */\n \n-#define IDENTIFIER_LENGTH(NODE) ((NODE)->identifier.length)\n-#define IDENTIFIER_POINTER(NODE) ((NODE)->identifier.pointer)\n+#define IDENTIFIER_LENGTH(NODE) (IDENTIFIER_NODE_CHECK (NODE)->identifier.length)\n+#define IDENTIFIER_POINTER(NODE) (IDENTIFIER_NODE_CHECK (NODE)->identifier.pointer)\n \n struct tree_identifier\n {\n@@ -599,8 +633,8 @@ struct tree_identifier\n };\n \n /* In a TREE_LIST node.  */\n-#define TREE_PURPOSE(NODE) ((NODE)->list.purpose)\n-#define TREE_VALUE(NODE) ((NODE)->list.value)\n+#define TREE_PURPOSE(NODE) (TREE_LIST_CHECK (NODE)->list.purpose)\n+#define TREE_VALUE(NODE) (TREE_LIST_CHECK (NODE)->list.value)\n \n struct tree_list\n {\n@@ -610,9 +644,9 @@ struct tree_list\n };\n \n /* In a TREE_VEC node.  */\n-#define TREE_VEC_LENGTH(NODE) ((NODE)->vec.length)\n-#define TREE_VEC_ELT(NODE,I) ((NODE)->vec.a[I])\n-#define TREE_VEC_END(NODE) (&((NODE)->vec.a[(NODE)->vec.length]))\n+#define TREE_VEC_LENGTH(NODE) (TREE_VEC_CHECK (NODE)->vec.length)\n+#define TREE_VEC_ELT(NODE,I) (TREE_VEC_CHECK (NODE)->vec.a[I])\n+#define TREE_VEC_END(NODE) (TREE_VEC_CHECK (NODE),&((NODE)->vec.a[(NODE)->vec.length]))\n \n struct tree_vec\n {\n@@ -625,30 +659,30 @@ struct tree_vec\n \n /* In a SAVE_EXPR node.  */\n #define SAVE_EXPR_CONTEXT(NODE) TREE_OPERAND(NODE, 1)\n-#define SAVE_EXPR_RTL(NODE) (*(struct rtx_def **) &(NODE)->exp.operands[2])\n+#define SAVE_EXPR_RTL(NODE) (*(struct rtx_def **) &EXPR_CHECK (NODE)->exp.operands[2])\n #define SAVE_EXPR_NOPLACEHOLDER(NODE) TREE_UNSIGNED (NODE)\n \n /* In a RTL_EXPR node.  */\n-#define RTL_EXPR_SEQUENCE(NODE) (*(struct rtx_def **) &(NODE)->exp.operands[0])\n-#define RTL_EXPR_RTL(NODE) (*(struct rtx_def **) &(NODE)->exp.operands[1])\n+#define RTL_EXPR_SEQUENCE(NODE) (*(struct rtx_def **) &EXPR_CHECK (NODE)->exp.operands[0])\n+#define RTL_EXPR_RTL(NODE) (*(struct rtx_def **) &EXPR_CHECK (NODE)->exp.operands[1])\n \n /* In a CALL_EXPR node.  */\n-#define CALL_EXPR_RTL(NODE) (*(struct rtx_def **) &(NODE)->exp.operands[2])\n+#define CALL_EXPR_RTL(NODE) (*(struct rtx_def **) &EXPR_CHECK (NODE)->exp.operands[2])\n \n /* In a CONSTRUCTOR node.  */\n #define CONSTRUCTOR_ELTS(NODE) TREE_OPERAND (NODE, 1)\n \n /* In ordinary expression nodes.  */\n-#define TREE_OPERAND(NODE, I) ((NODE)->exp.operands[I])\n-#define TREE_COMPLEXITY(NODE) ((NODE)->exp.complexity)\n+#define TREE_OPERAND(NODE, I) (EXPR_CHECK (NODE)->exp.operands[I])\n+#define TREE_COMPLEXITY(NODE) (EXPR_CHECK (NODE)->exp.complexity)\n \n /* In expression with file location information.  */\n #define EXPR_WFL_NODE(NODE) TREE_OPERAND((NODE), 0)\n #define EXPR_WFL_FILENAME(NODE) (IDENTIFIER_POINTER ((NODE)->common.chain))\n #define EXPR_WFL_FILENAME_NODE(NODE) ((NODE)->common.chain)\n-#define EXPR_WFL_LINENO(NODE) ((NODE)->exp.complexity >> 12)\n-#define EXPR_WFL_COLNO(NODE) ((NODE)->exp.complexity & 0xfff)\n-#define EXPR_WFL_LINECOL(NODE) ((NODE)->exp.complexity)\n+#define EXPR_WFL_LINENO(NODE) (EXPR_CHECK (NODE)->exp.complexity >> 12)\n+#define EXPR_WFL_COLNO(NODE) (EXPR_CHECK (NODE)->exp.complexity & 0xfff)\n+#define EXPR_WFL_LINECOL(NODE) (EXPR_CHECK (NODE)->exp.complexity)\n #define EXPR_WFL_SET_LINECOL(NODE, LINE, COL) \\\n   (EXPR_WFL_LINECOL(NODE) = ((LINE) << 12) | ((COL) & 0xfff))\n #define EXPR_WFL_EMIT_LINE_NOTE(NODE) ((NODE)->common.lang_flag_0)\n@@ -661,32 +695,32 @@ struct tree_exp\n };\n \f\n /* In a BLOCK node.  */\n-#define BLOCK_VARS(NODE) ((NODE)->block.vars)\n-#define BLOCK_TYPE_TAGS(NODE) ((NODE)->block.type_tags)\n-#define BLOCK_SUBBLOCKS(NODE) ((NODE)->block.subblocks)\n-#define BLOCK_SUPERCONTEXT(NODE) ((NODE)->block.supercontext)\n+#define BLOCK_VARS(NODE) (BLOCK_CHECK (NODE)->block.vars)\n+#define BLOCK_TYPE_TAGS(NODE) (BLOCK_CHECK (NODE)->block.type_tags)\n+#define BLOCK_SUBBLOCKS(NODE) (BLOCK_CHECK (NODE)->block.subblocks)\n+#define BLOCK_SUPERCONTEXT(NODE) (BLOCK_CHECK (NODE)->block.supercontext)\n /* Note: when changing this, make sure to find the places\n    that use chainon or nreverse.  */\n #define BLOCK_CHAIN(NODE) TREE_CHAIN (NODE)\n-#define BLOCK_ABSTRACT_ORIGIN(NODE) ((NODE)->block.abstract_origin)\n-#define BLOCK_ABSTRACT(NODE) ((NODE)->block.abstract_flag)\n-#define BLOCK_END_NOTE(NODE) ((NODE)->block.end_note)\n+#define BLOCK_ABSTRACT_ORIGIN(NODE) (BLOCK_CHECK (NODE)->block.abstract_origin)\n+#define BLOCK_ABSTRACT(NODE) (BLOCK_CHECK (NODE)->block.abstract_flag)\n+#define BLOCK_END_NOTE(NODE) (BLOCK_CHECK (NODE)->block.end_note)\n /* Nonzero means that this block has separate live range regions */\n-#define BLOCK_LIVE_RANGE_FLAG(NOTE) ((NOTE)->block.live_range_flag)\n+#define BLOCK_LIVE_RANGE_FLAG(NOTE) (BLOCK_CHECK (NOTE)->block.live_range_flag)\n \n /* Nonzero means that this block has a variable declared in it\n    that is split into separate live ranges.  */\n-#define BLOCK_LIVE_RANGE_VAR_FLAG(NOTE) ((NOTE)->block.live_range_var_flag)\n+#define BLOCK_LIVE_RANGE_VAR_FLAG(NOTE) (BLOCK_CHECK (NOTE)->block.live_range_var_flag)\n \n /* Index for marking the start of the block for live ranges.  */\n-#define BLOCK_LIVE_RANGE_START(NOTE) ((NOTE)->block.live_range_start)\n+#define BLOCK_LIVE_RANGE_START(NOTE) (BLOCK_CHECK (NOTE)->block.live_range_start)\n \n /* Index for marking the end of the block for live ranges.  */\n-#define BLOCK_LIVE_RANGE_END(NOTE) ((NOTE)->block.live_range_end)\n+#define BLOCK_LIVE_RANGE_END(NOTE) (BLOCK_CHECK (NOTE)->block.live_range_end)\n \n /* Nonzero means that this block is prepared to handle exceptions\n    listed in the BLOCK_VARS slot.  */\n-#define BLOCK_HANDLER_BLOCK(NODE) ((NODE)->block.handler_block_flag)\n+#define BLOCK_HANDLER_BLOCK(NODE) (BLOCK_CHECK (NODE)->block.handler_block_flag)\n \n struct tree_block\n {\n@@ -712,48 +746,48 @@ struct tree_block\n /* See tree.def for documentation of the use of these fields.\n    Look at the documentation of the various ..._TYPE tree codes.  */\n \n-#define TYPE_UID(NODE) ((NODE)->type.uid)\n-#define TYPE_SIZE(NODE) ((NODE)->type.size)\n-#define TYPE_SIZE_UNIT(NODE) ((NODE)->type.size_unit)\n-#define TYPE_MODE(NODE) ((NODE)->type.mode)\n-#define TYPE_VALUES(NODE) ((NODE)->type.values)\n-#define TYPE_DOMAIN(NODE) ((NODE)->type.values)\n-#define TYPE_FIELDS(NODE) ((NODE)->type.values)\n-#define TYPE_METHODS(NODE) ((NODE)->type.maxval)\n-#define TYPE_VFIELD(NODE) ((NODE)->type.minval)\n-#define TYPE_ARG_TYPES(NODE) ((NODE)->type.values)\n-#define TYPE_METHOD_BASETYPE(NODE) ((NODE)->type.maxval)\n-#define TYPE_OFFSET_BASETYPE(NODE) ((NODE)->type.maxval)\n-#define TYPE_POINTER_TO(NODE) ((NODE)->type.pointer_to)\n-#define TYPE_REFERENCE_TO(NODE) ((NODE)->type.reference_to)\n-#define TYPE_MIN_VALUE(NODE) ((NODE)->type.minval)\n-#define TYPE_MAX_VALUE(NODE) ((NODE)->type.maxval)\n-#define TYPE_PRECISION(NODE) ((NODE)->type.precision)\n-#define TYPE_SYMTAB_ADDRESS(NODE) ((NODE)->type.symtab.address)\n-#define TYPE_SYMTAB_POINTER(NODE) ((NODE)->type.symtab.pointer)\n-#define TYPE_NAME(NODE) ((NODE)->type.name)\n-#define TYPE_NEXT_VARIANT(NODE) ((NODE)->type.next_variant)\n-#define TYPE_MAIN_VARIANT(NODE) ((NODE)->type.main_variant)\n-#define TYPE_BINFO(NODE) ((NODE)->type.binfo)\n-#define TYPE_NONCOPIED_PARTS(NODE) ((NODE)->type.noncopied_parts)\n-#define TYPE_CONTEXT(NODE) ((NODE)->type.context)\n-#define TYPE_OBSTACK(NODE) ((NODE)->type.obstack)\n-#define TYPE_LANG_SPECIFIC(NODE) ((NODE)->type.lang_specific)\n+#define TYPE_UID(NODE) (TYPE_CHECK (NODE)->type.uid)\n+#define TYPE_SIZE(NODE) (TYPE_CHECK (NODE)->type.size)\n+#define TYPE_SIZE_UNIT(NODE) (TYPE_CHECK (NODE)->type.size_unit)\n+#define TYPE_MODE(NODE) (TYPE_CHECK (NODE)->type.mode)\n+#define TYPE_VALUES(NODE) (TYPE_CHECK (NODE)->type.values)\n+#define TYPE_DOMAIN(NODE) (TYPE_CHECK (NODE)->type.values)\n+#define TYPE_FIELDS(NODE) (TYPE_CHECK (NODE)->type.values)\n+#define TYPE_METHODS(NODE) (TYPE_CHECK (NODE)->type.maxval)\n+#define TYPE_VFIELD(NODE) (TYPE_CHECK (NODE)->type.minval)\n+#define TYPE_ARG_TYPES(NODE) (TYPE_CHECK (NODE)->type.values)\n+#define TYPE_METHOD_BASETYPE(NODE) (TYPE_CHECK (NODE)->type.maxval)\n+#define TYPE_OFFSET_BASETYPE(NODE) (TYPE_CHECK (NODE)->type.maxval)\n+#define TYPE_POINTER_TO(NODE) (TYPE_CHECK (NODE)->type.pointer_to)\n+#define TYPE_REFERENCE_TO(NODE) (TYPE_CHECK (NODE)->type.reference_to)\n+#define TYPE_MIN_VALUE(NODE) (TYPE_CHECK (NODE)->type.minval)\n+#define TYPE_MAX_VALUE(NODE) (TYPE_CHECK (NODE)->type.maxval)\n+#define TYPE_PRECISION(NODE) (TYPE_CHECK (NODE)->type.precision)\n+#define TYPE_SYMTAB_ADDRESS(NODE) (TYPE_CHECK (NODE)->type.symtab.address)\n+#define TYPE_SYMTAB_POINTER(NODE) (TYPE_CHECK (NODE)->type.symtab.pointer)\n+#define TYPE_NAME(NODE) (TYPE_CHECK (NODE)->type.name)\n+#define TYPE_NEXT_VARIANT(NODE) (TYPE_CHECK (NODE)->type.next_variant)\n+#define TYPE_MAIN_VARIANT(NODE) (TYPE_CHECK (NODE)->type.main_variant)\n+#define TYPE_BINFO(NODE) (TYPE_CHECK (NODE)->type.binfo)\n+#define TYPE_NONCOPIED_PARTS(NODE) (TYPE_CHECK (NODE)->type.noncopied_parts)\n+#define TYPE_CONTEXT(NODE) (TYPE_CHECK (NODE)->type.context)\n+#define TYPE_OBSTACK(NODE) (TYPE_CHECK (NODE)->type.obstack)\n+#define TYPE_LANG_SPECIFIC(NODE) (TYPE_CHECK (NODE)->type.lang_specific)\n \n /* A TREE_LIST of IDENTIFIER nodes of the attributes that apply\n    to this type.  */\n-#define TYPE_ATTRIBUTES(NODE) ((NODE)->type.attributes)\n+#define TYPE_ATTRIBUTES(NODE) (TYPE_CHECK (NODE)->type.attributes)\n \n /* The alignment necessary for objects of this type.\n    The value is an int, measured in bits.  */\n-#define TYPE_ALIGN(NODE) ((NODE)->type.align)\n+#define TYPE_ALIGN(NODE) (TYPE_CHECK (NODE)->type.align)\n \n #define TYPE_STUB_DECL(NODE) (TREE_CHAIN (NODE))\n \n /* In a RECORD_TYPE, UNION_TYPE or QUAL_UNION_TYPE, it means the type\n    has BLKmode only because it lacks the alignment requirement for\n    its size.  */\n-#define TYPE_NO_FORCE_BLK(NODE) ((NODE)->type.no_force_blk_flag)\n+#define TYPE_NO_FORCE_BLK(NODE) (TYPE_CHECK (NODE)->type.no_force_blk_flag)\n \n /* Nonzero in a type considered volatile as a whole.  */\n #define TYPE_VOLATILE(NODE) ((NODE)->common.volatile_flag)\n@@ -762,34 +796,34 @@ struct tree_block\n #define TYPE_READONLY(NODE) ((NODE)->common.readonly_flag)\n \n /* These flags are available for each language front end to use internally.  */\n-#define TYPE_LANG_FLAG_0(NODE) ((NODE)->type.lang_flag_0)\n-#define TYPE_LANG_FLAG_1(NODE) ((NODE)->type.lang_flag_1)\n-#define TYPE_LANG_FLAG_2(NODE) ((NODE)->type.lang_flag_2)\n-#define TYPE_LANG_FLAG_3(NODE) ((NODE)->type.lang_flag_3)\n-#define TYPE_LANG_FLAG_4(NODE) ((NODE)->type.lang_flag_4)\n-#define TYPE_LANG_FLAG_5(NODE) ((NODE)->type.lang_flag_5)\n-#define TYPE_LANG_FLAG_6(NODE) ((NODE)->type.lang_flag_6)\n+#define TYPE_LANG_FLAG_0(NODE) (TYPE_CHECK (NODE)->type.lang_flag_0)\n+#define TYPE_LANG_FLAG_1(NODE) (TYPE_CHECK (NODE)->type.lang_flag_1)\n+#define TYPE_LANG_FLAG_2(NODE) (TYPE_CHECK (NODE)->type.lang_flag_2)\n+#define TYPE_LANG_FLAG_3(NODE) (TYPE_CHECK (NODE)->type.lang_flag_3)\n+#define TYPE_LANG_FLAG_4(NODE) (TYPE_CHECK (NODE)->type.lang_flag_4)\n+#define TYPE_LANG_FLAG_5(NODE) (TYPE_CHECK (NODE)->type.lang_flag_5)\n+#define TYPE_LANG_FLAG_6(NODE) (TYPE_CHECK (NODE)->type.lang_flag_6)\n \n /* If set in an ARRAY_TYPE, indicates a string type (for languages\n    that distinguish string from array of char).\n    If set in a SET_TYPE, indicates a bitstring type. */\n-#define TYPE_STRING_FLAG(NODE) ((NODE)->type.string_flag)\n+#define TYPE_STRING_FLAG(NODE) (TYPE_CHECK (NODE)->type.string_flag)\n \n /* If non-NULL, this is a upper bound of the size (in bytes) of an\n    object of the given ARRAY_TYPE.  This allows temporaries to be allocated. */\n #define TYPE_ARRAY_MAX_SIZE(ARRAY_TYPE) TYPE_MAX_VALUE (ARRAY_TYPE)\n \n /* Indicates that objects of this type must be initialized by calling a\n    function when they are created.  */\n-#define TYPE_NEEDS_CONSTRUCTING(NODE) ((NODE)->type.needs_constructing_flag)\n+#define TYPE_NEEDS_CONSTRUCTING(NODE) (TYPE_CHECK (NODE)->type.needs_constructing_flag)\n \n /* Indicates that objects of this type (a UNION_TYPE), should be passed\n    the same way that the first union alternative would be passed.  */\n-#define TYPE_TRANSPARENT_UNION(NODE) ((NODE)->type.transparent_union_flag)\n+#define TYPE_TRANSPARENT_UNION(NODE) (TYPE_CHECK (NODE)->type.transparent_union_flag)\n \n /* Indicated that objects of this type should be laid out in as\n    compact a way as possible.  */\n-#define TYPE_PACKED(NODE) ((NODE)->type.packed_flag)\n+#define TYPE_PACKED(NODE) (TYPE_CHECK (NODE)->type.packed_flag)\n \n struct tree_type\n {\n@@ -923,90 +957,90 @@ struct tree_type\n \n /* This is the name of the object as written by the user.\n    It is an IDENTIFIER_NODE.  */\n-#define DECL_NAME(NODE) ((NODE)->decl.name)\n+#define DECL_NAME(NODE) (DECL_CHECK (NODE)->decl.name)\n /* This is the name of the object as the assembler will see it\n    (but before any translations made by ASM_OUTPUT_LABELREF).\n    Often this is the same as DECL_NAME.\n    It is an IDENTIFIER_NODE.  */\n-#define DECL_ASSEMBLER_NAME(NODE) ((NODE)->decl.assembler_name)\n+#define DECL_ASSEMBLER_NAME(NODE) (DECL_CHECK (NODE)->decl.assembler_name)\n /* Records the section name in a section attribute.  Used to pass\n    the name from decl_attributes to make_function_rtl and make_decl_rtl.  */\n-#define DECL_SECTION_NAME(NODE) ((NODE)->decl.section_name)\n+#define DECL_SECTION_NAME(NODE) (DECL_CHECK (NODE)->decl.section_name)\n /*  For FIELD_DECLs, this is the\n     RECORD_TYPE, UNION_TYPE, or QUAL_UNION_TYPE node that the field is\n     a member of.  For VAR_DECL, PARM_DECL, FUNCTION_DECL, LABEL_DECL,\n     and CONST_DECL nodes, this points to either the FUNCTION_DECL for the\n     containing function, the RECORD_TYPE or UNION_TYPE for the containing\n     type, or NULL_TREE if the given decl has \"file scope\".  */\n-#define DECL_CONTEXT(NODE) ((NODE)->decl.context)\n-#define DECL_FIELD_CONTEXT(NODE) ((NODE)->decl.context)\n+#define DECL_CONTEXT(NODE) (DECL_CHECK (NODE)->decl.context)\n+#define DECL_FIELD_CONTEXT(NODE) (DECL_CHECK (NODE)->decl.context)\n /* In a DECL this is the field where configuration dependent machine\n    attributes are store */\n-#define DECL_MACHINE_ATTRIBUTES(NODE) ((NODE)->decl.machine_attributes)\n+#define DECL_MACHINE_ATTRIBUTES(NODE) (DECL_CHECK (NODE)->decl.machine_attributes)\n /* In a FIELD_DECL, this is the field position, counting in bits,\n    of the bit closest to the beginning of the structure.  */\n-#define DECL_FIELD_BITPOS(NODE) ((NODE)->decl.arguments)\n+#define DECL_FIELD_BITPOS(NODE) (DECL_CHECK (NODE)->decl.arguments)\n /* In a FIELD_DECL, this indicates whether the field was a bit-field and\n    if so, the type that was originally specified for it.\n    TREE_TYPE may have been modified (in finish_struct).  */\n-#define DECL_BIT_FIELD_TYPE(NODE) ((NODE)->decl.result)\n+#define DECL_BIT_FIELD_TYPE(NODE) (DECL_CHECK (NODE)->decl.result)\n /* In FUNCTION_DECL, a chain of ..._DECL nodes.  */\n /* VAR_DECL and PARM_DECL reserve the arguments slot\n    for language-specific uses.  */\n-#define DECL_ARGUMENTS(NODE) ((NODE)->decl.arguments)\n+#define DECL_ARGUMENTS(NODE) (DECL_CHECK (NODE)->decl.arguments)\n /* In FUNCTION_DECL, holds the decl for the return value.  */\n-#define DECL_RESULT(NODE) ((NODE)->decl.result)\n+#define DECL_RESULT(NODE) (DECL_CHECK (NODE)->decl.result)\n /* For a TYPE_DECL, holds the \"original\" type.  (TREE_TYPE has the copy.) */\n-#define DECL_ORIGINAL_TYPE(NODE) ((NODE)->decl.result)\n+#define DECL_ORIGINAL_TYPE(NODE) (DECL_CHECK (NODE)->decl.result)\n /* In PARM_DECL, holds the type as written (perhaps a function or array).  */\n-#define DECL_ARG_TYPE_AS_WRITTEN(NODE) ((NODE)->decl.result)\n+#define DECL_ARG_TYPE_AS_WRITTEN(NODE) (DECL_CHECK (NODE)->decl.result)\n /* For a FUNCTION_DECL, holds the tree of BINDINGs.\n    For a VAR_DECL, holds the initial value.\n    For a PARM_DECL, not used--default\n    values for parameters are encoded in the type of the function,\n    not in the PARM_DECL slot.  */\n-#define DECL_INITIAL(NODE) ((NODE)->decl.initial)\n+#define DECL_INITIAL(NODE) (DECL_CHECK (NODE)->decl.initial)\n /* For a PARM_DECL, records the data type used to pass the argument,\n    which may be different from the type seen in the program.  */\n-#define DECL_ARG_TYPE(NODE) ((NODE)->decl.initial)   /* In PARM_DECL.  */\n+#define DECL_ARG_TYPE(NODE) (DECL_CHECK (NODE)->decl.initial)   /* In PARM_DECL.  */\n /* For a FIELD_DECL in a QUAL_UNION_TYPE, records the expression, which\n    if nonzero, indicates that the field occupies the type.  */\n-#define DECL_QUALIFIER(NODE) ((NODE)->decl.initial)\n+#define DECL_QUALIFIER(NODE) (DECL_CHECK (NODE)->decl.initial)\n /* These two fields describe where in the source code the declaration was.  */\n-#define DECL_SOURCE_FILE(NODE) ((NODE)->decl.filename)\n-#define DECL_SOURCE_LINE(NODE) ((NODE)->decl.linenum)\n+#define DECL_SOURCE_FILE(NODE) (DECL_CHECK (NODE)->decl.filename)\n+#define DECL_SOURCE_LINE(NODE) (DECL_CHECK (NODE)->decl.linenum)\n /* Holds the size of the datum, as a tree expression.\n    Need not be constant.  */\n-#define DECL_SIZE(NODE) ((NODE)->decl.size)\n+#define DECL_SIZE(NODE) (DECL_CHECK (NODE)->decl.size)\n /* Holds the alignment required for the datum.  */\n-#define DECL_ALIGN(NODE) ((NODE)->decl.frame_size.u)\n+#define DECL_ALIGN(NODE) (DECL_CHECK (NODE)->decl.frame_size.u)\n /* Holds the machine mode corresponding to the declaration of a variable or\n    field.  Always equal to TYPE_MODE (TREE_TYPE (decl)) except for a\n    FIELD_DECL.  */\n-#define DECL_MODE(NODE) ((NODE)->decl.mode)\n+#define DECL_MODE(NODE) (DECL_CHECK (NODE)->decl.mode)\n /* Holds the RTL expression for the value of a variable or function.  If\n    PROMOTED_MODE is defined, the mode of this expression may not be same\n    as DECL_MODE.  In that case, DECL_MODE contains the mode corresponding\n    to the variable's data type, while the mode\n    of DECL_RTL is the mode actually used to contain the data.  */\n-#define DECL_RTL(NODE) ((NODE)->decl.rtl)\n+#define DECL_RTL(NODE) (DECL_CHECK (NODE)->decl.rtl)\n /* Holds an INSN_LIST of all of the live ranges in which the variable\n    has been moved to a possibly different register.  */\n-#define DECL_LIVE_RANGE_RTL(NODE) ((NODE)->decl.live_range_rtl)\n+#define DECL_LIVE_RANGE_RTL(NODE) (DECL_CHECK (NODE)->decl.live_range_rtl)\n /* For PARM_DECL, holds an RTL for the stack slot or register\n    where the data was actually passed.  */\n-#define DECL_INCOMING_RTL(NODE) ((NODE)->decl.saved_insns.r)\n+#define DECL_INCOMING_RTL(NODE) (DECL_CHECK (NODE)->decl.saved_insns.r)\n /* For FUNCTION_DECL, if it is inline, holds the saved insn chain.  */\n-#define DECL_SAVED_INSNS(NODE) ((NODE)->decl.saved_insns.r)\n+#define DECL_SAVED_INSNS(NODE) (DECL_CHECK (NODE)->decl.saved_insns.r)\n /* For FUNCTION_DECL, if it is inline,\n    holds the size of the stack frame, as an integer.  */\n-#define DECL_FRAME_SIZE(NODE) ((NODE)->decl.frame_size.i)\n+#define DECL_FRAME_SIZE(NODE) (DECL_CHECK (NODE)->decl.frame_size.i)\n /* For FUNCTION_DECL, if it is built-in,\n    this identifies which built-in operation it is.  */\n-#define DECL_FUNCTION_CODE(NODE) ((NODE)->decl.frame_size.f)\n-#define DECL_SET_FUNCTION_CODE(NODE,VAL) ((NODE)->decl.frame_size.f = (VAL))\n+#define DECL_FUNCTION_CODE(NODE) (DECL_CHECK (NODE)->decl.frame_size.f)\n+#define DECL_SET_FUNCTION_CODE(NODE,VAL) (DECL_CHECK (NODE)->decl.frame_size.f = (VAL))\n /* For a FIELD_DECL, holds the size of the member as an integer.  */\n-#define DECL_FIELD_SIZE(NODE) ((NODE)->decl.saved_insns.i)\n+#define DECL_FIELD_SIZE(NODE) (DECL_CHECK (NODE)->decl.saved_insns.i)\n \n /* The DECL_VINDEX is used for FUNCTION_DECLS in two different ways.\n    Before the struct containing the FUNCTION_DECL is laid out,\n@@ -1015,21 +1049,21 @@ struct tree_type\n    function.  When the class is laid out, this pointer is changed\n    to an INTEGER_CST node which is suitable for use as an index\n    into the virtual function table.  */\n-#define DECL_VINDEX(NODE) ((NODE)->decl.vindex)\n+#define DECL_VINDEX(NODE) (DECL_CHECK (NODE)->decl.vindex)\n /* For FIELD_DECLS, DECL_FCONTEXT is the *first* baseclass in\n    which this FIELD_DECL is defined.  This information is needed when\n    writing debugging information about vfield and vbase decls for C++.  */\n-#define DECL_FCONTEXT(NODE) ((NODE)->decl.vindex)\n+#define DECL_FCONTEXT(NODE) (DECL_CHECK (NODE)->decl.vindex)\n \n /* Every ..._DECL node gets a unique number.  */\n-#define DECL_UID(NODE) ((NODE)->decl.uid)\n+#define DECL_UID(NODE) (DECL_CHECK (NODE)->decl.uid)\n \n /* For any sort of a ..._DECL node, this points to the original (abstract)\n    decl node which this decl is an instance of, or else it is NULL indicating\n    that this decl is not an instance of some other decl.  For example,\n    in a nested declaration of an inline function, this points back to the\n    definition.  */\n-#define DECL_ABSTRACT_ORIGIN(NODE) ((NODE)->decl.abstract_origin)\n+#define DECL_ABSTRACT_ORIGIN(NODE) (DECL_CHECK (NODE)->decl.abstract_origin)\n \n /* Nonzero for any sort of ..._DECL node means this decl node represents\n    an inline instance of some original (abstract) decl from an inline function;\n@@ -1038,50 +1072,50 @@ struct tree_type\n \n /* Nonzero if a _DECL means that the name of this decl should be ignored\n    for symbolic debug purposes.  */\n-#define DECL_IGNORED_P(NODE) ((NODE)->decl.ignored_flag)\n+#define DECL_IGNORED_P(NODE) (DECL_CHECK (NODE)->decl.ignored_flag)\n \n /* Nonzero for a given ..._DECL node means that this node represents an\n    \"abstract instance\" of the given declaration (e.g. in the original\n    declaration of an inline function).  When generating symbolic debugging\n    information, we mustn't try to generate any address information for nodes\n    marked as \"abstract instances\" because we don't actually generate\n    any code or allocate any data space for such instances.  */\n-#define DECL_ABSTRACT(NODE) ((NODE)->decl.abstract_flag)\n+#define DECL_ABSTRACT(NODE) (DECL_CHECK (NODE)->decl.abstract_flag)\n \n /* Nonzero if a _DECL means that no warnings should be generated just\n    because this decl is unused.  */\n-#define DECL_IN_SYSTEM_HEADER(NODE) ((NODE)->decl.in_system_header_flag)\n+#define DECL_IN_SYSTEM_HEADER(NODE) (DECL_CHECK (NODE)->decl.in_system_header_flag)\n \n /* Nonzero for a given ..._DECL node means that this node should be\n    put in .common, if possible.  If a DECL_INITIAL is given, and it\n    is not error_mark_node, then the decl cannot be put in .common.  */\n-#define DECL_COMMON(NODE) ((NODE)->decl.common_flag)\n+#define DECL_COMMON(NODE) (DECL_CHECK (NODE)->decl.common_flag)\n \n /* Language-specific decl information.  */\n-#define DECL_LANG_SPECIFIC(NODE) ((NODE)->decl.lang_specific)\n+#define DECL_LANG_SPECIFIC(NODE) (DECL_CHECK (NODE)->decl.lang_specific)\n \n /* In a VAR_DECL or FUNCTION_DECL,\n    nonzero means external reference:\n    do not allocate storage, and refer to a definition elsewhere.  */\n-#define DECL_EXTERNAL(NODE) ((NODE)->decl.external_flag)\n+#define DECL_EXTERNAL(NODE) (DECL_CHECK (NODE)->decl.external_flag)\n \n /* In a TYPE_DECL\n    nonzero means the detail info about this type is not dumped into stabs.\n    Instead it will generate cross reference ('x') of names. \n    This uses the same flag as DECL_EXTERNAL. */\n-#define TYPE_DECL_SUPPRESS_DEBUG(NODE) ((NODE)->decl.external_flag)\n+#define TYPE_DECL_SUPPRESS_DEBUG(NODE) (DECL_CHECK (NODE)->decl.external_flag)\n    \n \n /* In VAR_DECL and PARM_DECL nodes, nonzero means declared `register'.  */\n-#define DECL_REGISTER(NODE) ((NODE)->decl.regdecl_flag)\n+#define DECL_REGISTER(NODE) (DECL_CHECK (NODE)->decl.regdecl_flag)\n /* In LABEL_DECL nodes, nonzero means that an error message about\n    jumping into such a binding contour has been printed for this label.  */\n-#define DECL_ERROR_ISSUED(NODE) ((NODE)->decl.regdecl_flag)\n+#define DECL_ERROR_ISSUED(NODE) (DECL_CHECK (NODE)->decl.regdecl_flag)\n /* In a FIELD_DECL, indicates this field should be bit-packed.  */\n-#define DECL_PACKED(NODE) ((NODE)->decl.regdecl_flag)\n+#define DECL_PACKED(NODE) (DECL_CHECK (NODE)->decl.regdecl_flag)\n /* In a FUNCTION_DECL with a non-zero DECL_CONTEXT, indicates that a\n    static chain is not needed.  */\n-#define DECL_NO_STATIC_CHAIN(NODE) ((NODE)->decl.regdecl_flag)\n+#define DECL_NO_STATIC_CHAIN(NODE) (DECL_CHECK (NODE)->decl.regdecl_flag)\n \n /* Nonzero in a ..._DECL means this variable is ref'd from a nested function.\n    For VAR_DECL nodes, PARM_DECL nodes, and FUNCTION_DECL nodes.\n@@ -1090,11 +1124,11 @@ struct tree_type\n \n    Also set in some languages for variables, etc., outside the normal\n    lexical scope, such as class instance variables.  */\n-#define DECL_NONLOCAL(NODE) ((NODE)->decl.nonlocal_flag)\n+#define DECL_NONLOCAL(NODE) (DECL_CHECK (NODE)->decl.nonlocal_flag)\n \n /* Nonzero in a FUNCTION_DECL means this function can be substituted\n    where it is called.  */\n-#define DECL_INLINE(NODE) ((NODE)->decl.inline_flag)\n+#define DECL_INLINE(NODE) (DECL_CHECK (NODE)->decl.inline_flag)\n \n /* Nonzero in a FUNCTION_DECL means this is a built-in function\n    that is not specified by ansi C and that users are supposed to be allowed\n@@ -1103,54 +1137,54 @@ struct tree_type\n \n /* Nonzero in a FIELD_DECL means it is a bit field, and must be accessed\n    specially.  */\n-#define DECL_BIT_FIELD(NODE) ((NODE)->decl.bit_field_flag)\n+#define DECL_BIT_FIELD(NODE) (DECL_CHECK (NODE)->decl.bit_field_flag)\n /* In a LABEL_DECL, nonzero means label was defined inside a binding\n    contour that restored a stack level and which is now exited.  */\n-#define DECL_TOO_LATE(NODE) ((NODE)->decl.bit_field_flag)\n+#define DECL_TOO_LATE(NODE) (DECL_CHECK (NODE)->decl.bit_field_flag)\n /* In a FUNCTION_DECL, nonzero means a built in function.  */\n-#define DECL_BUILT_IN(NODE) ((NODE)->decl.bit_field_flag)\n+#define DECL_BUILT_IN(NODE) (DECL_CHECK (NODE)->decl.bit_field_flag)\n /* In a VAR_DECL that's static,\n    nonzero if the space is in the text section.  */\n-#define DECL_IN_TEXT_SECTION(NODE) ((NODE)->decl.bit_field_flag)\n+#define DECL_IN_TEXT_SECTION(NODE) (DECL_CHECK (NODE)->decl.bit_field_flag)\n \n /* Used in VAR_DECLs to indicate that the variable is a vtable.\n    Used in FIELD_DECLs for vtable pointers.\n    Used in FUNCTION_DECLs to indicate that the function is virtual.  */\n-#define DECL_VIRTUAL_P(NODE) ((NODE)->decl.virtual_flag)\n+#define DECL_VIRTUAL_P(NODE) (DECL_CHECK (NODE)->decl.virtual_flag)\n \n /* Used to indicate that the linkage status of this DECL is not yet known,\n    so it should not be output now.  */\n-#define DECL_DEFER_OUTPUT(NODE) ((NODE)->decl.defer_output)\n+#define DECL_DEFER_OUTPUT(NODE) (DECL_CHECK (NODE)->decl.defer_output)\n \n /* Used in PARM_DECLs whose type are unions to indicate that the\n    argument should be passed in the same way that the first union\n    alternative would be passed.  */\n-#define DECL_TRANSPARENT_UNION(NODE) ((NODE)->decl.transparent_union)\n+#define DECL_TRANSPARENT_UNION(NODE) (DECL_CHECK (NODE)->decl.transparent_union)\n \n /* Used in FUNCTION_DECLs to indicate that they should be run automatically\n    at the beginning or end of execution.  */\n-#define DECL_STATIC_CONSTRUCTOR(NODE) ((NODE)->decl.static_ctor_flag)\n-#define DECL_STATIC_DESTRUCTOR(NODE) ((NODE)->decl.static_dtor_flag)\n+#define DECL_STATIC_CONSTRUCTOR(NODE) (DECL_CHECK (NODE)->decl.static_ctor_flag)\n+#define DECL_STATIC_DESTRUCTOR(NODE) (DECL_CHECK (NODE)->decl.static_dtor_flag)\n \n /* Used to indicate that this DECL represents a compiler-generated entity.  */\n-#define DECL_ARTIFICIAL(NODE) ((NODE)->decl.artificial_flag)\n+#define DECL_ARTIFICIAL(NODE) (DECL_CHECK (NODE)->decl.artificial_flag)\n \n /* Used to indicate that this DECL has weak linkage.  */\n-#define DECL_WEAK(NODE) ((NODE)->decl.weak_flag)\n+#define DECL_WEAK(NODE) (DECL_CHECK (NODE)->decl.weak_flag)\n \n /* Used in TREE_PUBLIC decls to indicate that copies of this DECL in\n    multiple translation units should be merged.  */\n-#define DECL_ONE_ONLY(NODE) ((NODE)->decl.transparent_union)\n+#define DECL_ONE_ONLY(NODE) (DECL_CHECK (NODE)->decl.transparent_union)\n \n /* Additional flags for language-specific uses.  */\n-#define DECL_LANG_FLAG_0(NODE) ((NODE)->decl.lang_flag_0)\n-#define DECL_LANG_FLAG_1(NODE) ((NODE)->decl.lang_flag_1)\n-#define DECL_LANG_FLAG_2(NODE) ((NODE)->decl.lang_flag_2)\n-#define DECL_LANG_FLAG_3(NODE) ((NODE)->decl.lang_flag_3)\n-#define DECL_LANG_FLAG_4(NODE) ((NODE)->decl.lang_flag_4)\n-#define DECL_LANG_FLAG_5(NODE) ((NODE)->decl.lang_flag_5)\n-#define DECL_LANG_FLAG_6(NODE) ((NODE)->decl.lang_flag_6)\n-#define DECL_LANG_FLAG_7(NODE) ((NODE)->decl.lang_flag_7)\n+#define DECL_LANG_FLAG_0(NODE) (DECL_CHECK (NODE)->decl.lang_flag_0)\n+#define DECL_LANG_FLAG_1(NODE) (DECL_CHECK (NODE)->decl.lang_flag_1)\n+#define DECL_LANG_FLAG_2(NODE) (DECL_CHECK (NODE)->decl.lang_flag_2)\n+#define DECL_LANG_FLAG_3(NODE) (DECL_CHECK (NODE)->decl.lang_flag_3)\n+#define DECL_LANG_FLAG_4(NODE) (DECL_CHECK (NODE)->decl.lang_flag_4)\n+#define DECL_LANG_FLAG_5(NODE) (DECL_CHECK (NODE)->decl.lang_flag_5)\n+#define DECL_LANG_FLAG_6(NODE) (DECL_CHECK (NODE)->decl.lang_flag_6)\n+#define DECL_LANG_FLAG_7(NODE) (DECL_CHECK (NODE)->decl.lang_flag_7)\n \n struct tree_decl\n {\n@@ -2029,6 +2063,9 @@ extern void start_identifier_warnings\tPROTO ((void));\n extern void gcc_obstack_init\t\tPROTO ((struct obstack *));\n extern void init_obstacks\t\tPROTO ((void));\n extern void obfree\t\t\tPROTO ((char *));\n+extern tree tree_check                  PROTO ((tree, enum tree_code, char*, int, int));\n+extern tree tree_class_check            PROTO ((tree, char, char*, int, int));\n+extern tree expr_check                  PROTO ((tree, int, char*, int, int));\n \n /* In function.c */\n extern void setjmp_protect_args\t\tPROTO ((void));"}]}