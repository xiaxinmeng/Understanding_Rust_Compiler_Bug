{"sha": "33d4e9b26c5bbe001c55b9e61b8b46559b800549", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNkNGU5YjI2YzViYmUwMDFjNTViOWU2MWI4YjQ2NTU5YjgwMDU0OQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-01-19T12:11:50Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-01-19T12:11:50Z"}, "message": "debug.cc: Trivial formatting change.\n\n2004-01-19  Paolo Carlini  <pcarlini@suse.de>\n\n\t* src/debug.cc: Trivial formatting change.\n\nFrom-SVN: r76147", "tree": {"sha": "7af3000bc5a4af098e7b0a51525e9a5103e1b7b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7af3000bc5a4af098e7b0a51525e9a5103e1b7b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33d4e9b26c5bbe001c55b9e61b8b46559b800549", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33d4e9b26c5bbe001c55b9e61b8b46559b800549", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33d4e9b26c5bbe001c55b9e61b8b46559b800549", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33d4e9b26c5bbe001c55b9e61b8b46559b800549/comments", "author": null, "committer": null, "parents": [{"sha": "c01a93915185927d45df4c6a375c146d9923fa63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c01a93915185927d45df4c6a375c146d9923fa63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c01a93915185927d45df4c6a375c146d9923fa63"}], "stats": {"total": 98, "additions": 51, "deletions": 47}, "files": [{"sha": "9820e323ad1b7bb1659b23ea2a0d9573a0e45445", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33d4e9b26c5bbe001c55b9e61b8b46559b800549/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33d4e9b26c5bbe001c55b9e61b8b46559b800549/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=33d4e9b26c5bbe001c55b9e61b8b46559b800549", "patch": "@@ -1,3 +1,7 @@\n+2004-01-19  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* src/debug.cc: Trivial formatting change.\n+\n 2004-01-19  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/basic_string.tcc (_S_construct(size_type,"}, {"sha": "22791741fb611dbe06ed32b41fa367b0748a41fb", "filename": "libstdc++-v3/src/debug.cc", "status": "modified", "additions": 47, "deletions": 47, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33d4e9b26c5bbe001c55b9e61b8b46559b800549/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33d4e9b26c5bbe001c55b9e61b8b46559b800549/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc?ref=33d4e9b26c5bbe001c55b9e61b8b46559b800549", "patch": "@@ -585,56 +585,56 @@ namespace __gnu_debug\n \t    continue;\n \t  } \n \t\n-      ++__start;\n-      assert(*__start);\n-      if (*__start == '%')\n-\t{\n-\t  _M_print_word(\"%\");\n-\t  ++__start;\n-\t  continue;\n-\t}\n-      \n-      // Get the parameter number\n-      assert(*__start >= '1' && *__start <= '9');\n-      size_t param = *__start - '0';\n-      --param;\n-      assert(param < _M_num_parameters);\n-      \n-      // '.' separates the parameter number from the field\n-      // name, if there is one.\n-      ++__start;\n-      if (*__start != '.')\n-\t{\n-\tassert(*__start == ';');\n \t++__start;\n-\tbuf[0] = '\\0';\n-\tif (_M_parameters[param]._M_kind == _Parameter::__integer)\n-\t{\n-\t  _M_format_word(buf, bufsize, \"%ld\", \n-\t\t\t _M_parameters[param]._M_variant._M_integer._M_value);\n-\t  _M_print_word(buf);\n-\t}\n-\telse if (_M_parameters[param]._M_kind == _Parameter::__string)\n-\t  _M_print_string(_M_parameters[param]._M_variant._M_string._M_value);\n-\tcontinue;\n-      }\n-      \n-      // Extract the field name we want\n-      enum { max_field_len = 16 };\n-      char field[max_field_len];\n-      int field_idx = 0;\n-      ++__start;\n-      while (*__start != ';')\n-      {\n \tassert(*__start);\n-\tassert(field_idx < max_field_len-1);\n-\tfield[field_idx++] = *__start++;\n-      }\n-      ++__start;\n-      field[field_idx] = 0;\n+\tif (*__start == '%')\n+\t  {\n+\t    _M_print_word(\"%\");\n+\t    ++__start;\n+\t    continue;\n+\t  }\n+\t\n+\t// Get the parameter number\n+\tassert(*__start >= '1' && *__start <= '9');\n+\tsize_t param = *__start - '0';\n+\t--param;\n+\tassert(param < _M_num_parameters);\n       \n-      _M_parameters[param]._M_print_field(this, field);\t\t  \n-    }\n+\t// '.' separates the parameter number from the field\n+\t// name, if there is one.\n+\t++__start;\n+\tif (*__start != '.')\n+\t  {\n+\t    assert(*__start == ';');\n+\t    ++__start;\n+\t    buf[0] = '\\0';\n+\t    if (_M_parameters[param]._M_kind == _Parameter::__integer)\n+\t      {\n+\t\t_M_format_word(buf, bufsize, \"%ld\", \n+\t\t\t       _M_parameters[param]._M_variant._M_integer._M_value);\n+\t\t_M_print_word(buf);\n+\t      }\n+\t    else if (_M_parameters[param]._M_kind == _Parameter::__string)\n+\t      _M_print_string(_M_parameters[param]._M_variant._M_string._M_value);\n+\t    continue;\n+\t  }\n+\t\n+\t// Extract the field name we want\n+\tenum { max_field_len = 16 };\n+\tchar field[max_field_len];\n+\tint field_idx = 0;\n+\t++__start;\n+\twhile (*__start != ';')\n+\t  {\n+\t    assert(*__start);\n+\t    assert(field_idx < max_field_len-1);\n+\t    field[field_idx++] = *__start++;\n+\t  }\n+\t++__start;\n+\tfield[field_idx] = 0;\n+\t\n+\t_M_parameters[param]._M_print_field(this, field);\t\t  \n+      }\n   }\n \n   // Instantiations."}]}