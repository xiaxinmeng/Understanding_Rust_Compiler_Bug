{"sha": "b29fcf3b64a0f2404ab43bb9d884349d09168d51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI5ZmNmM2I2NGEwZjI0MDRhYjQzYmI5ZDg4NDM0OWQwOTE2OGQ1MQ==", "commit": {"author": {"name": "Kugan Vivekanandarajah", "email": "kuganv@linaro.org", "date": "2016-08-04T04:20:01Z"}, "committer": {"name": "Kugan Vivekanandarajah", "email": "kugan@gcc.gnu.org", "date": "2016-08-04T04:20:01Z"}, "message": "tree-vrp.c (set_value_range): Use vrp_equiv_obstack with BITMAP_ALLOC.\n\ngcc/ChangeLog:\n\n2016-08-04  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\t* tree-vrp.c (set_value_range): Use vrp_equiv_obstack with\n\tBITMAP_ALLOC.\n\t(add_equivalence): Likewise.\n\t(get_value_range): Allocate value range with vrp_value_range_pool.\n\t(vrp_initialize): Initialize vrp_equiv_obstack for equiv allocation.\n\t(vrp_finalize): Relase vrp_equiv_obstack and vrp_value_range_pool.\n\nFrom-SVN: r239113", "tree": {"sha": "581333500589395efbcc8e86c945cf9bc2da1f3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/581333500589395efbcc8e86c945cf9bc2da1f3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b29fcf3b64a0f2404ab43bb9d884349d09168d51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b29fcf3b64a0f2404ab43bb9d884349d09168d51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b29fcf3b64a0f2404ab43bb9d884349d09168d51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b29fcf3b64a0f2404ab43bb9d884349d09168d51/comments", "author": null, "committer": null, "parents": [{"sha": "5c5ad8cd638c5c1aa2bd2fb0477e2b893fdda309", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c5ad8cd638c5c1aa2bd2fb0477e2b893fdda309", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c5ad8cd638c5c1aa2bd2fb0477e2b893fdda309"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "8261b41e3f3eca39bf15f07bb5c8519fd5ab26fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29fcf3b64a0f2404ab43bb9d884349d09168d51/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29fcf3b64a0f2404ab43bb9d884349d09168d51/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b29fcf3b64a0f2404ab43bb9d884349d09168d51", "patch": "@@ -1,3 +1,12 @@\n+2016-08-04  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\t* tree-vrp.c (set_value_range): Use vrp_equiv_obstack with\n+\tBITMAP_ALLOC.\n+\t(add_equivalence): Likewise.\n+\t(get_value_range): Allocate value range with vrp_value_range_pool.\n+\t(vrp_initialize): Initialize vrp_equiv_obstack for equiv allocation.\n+\t(vrp_finalize): Relase vrp_equiv_obstack and vrp_value_range_pool.\n+\n 2016-08-03  Peter Bergner  <bergner@vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (rs6000_option_override_internal): Make LRA"}, {"sha": "c0e25cfdf221e3984e9f915800fffa5a18c8d41d", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29fcf3b64a0f2404ab43bb9d884349d09168d51/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29fcf3b64a0f2404ab43bb9d884349d09168d51/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=b29fcf3b64a0f2404ab43bb9d884349d09168d51", "patch": "@@ -59,6 +59,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"case-cfn-macros.h\"\n #include \"params.h\"\n+#include \"alloc-pool.h\"\n \n /* Range of values that can be associated with an SSA_NAME after VRP\n    has executed.  */\n@@ -88,6 +89,10 @@ struct value_range\n \n #define VR_INITIALIZER { VR_UNDEFINED, NULL_TREE, NULL_TREE, NULL }\n \n+/* Allocation pools for tree-vrp allocations.  */\n+static object_allocator<value_range> vrp_value_range_pool (\"Tree VRP value ranges\");\n+static bitmap_obstack vrp_equiv_obstack;\n+\n /* Set of SSA names found live during the RPO traversal of the function\n    for still active basic-blocks.  */\n static sbitmap *live;\n@@ -407,7 +412,7 @@ set_value_range (value_range *vr, enum value_range_type t, tree min,\n      bitmaps, only do it if absolutely necessary.  */\n   if (vr->equiv == NULL\n       && equiv != NULL)\n-    vr->equiv = BITMAP_ALLOC (NULL);\n+    vr->equiv = BITMAP_ALLOC (&vrp_equiv_obstack);\n \n   if (equiv != vr->equiv)\n     {\n@@ -689,7 +694,8 @@ get_value_range (const_tree var)\n     return CONST_CAST (value_range *, &vr_const_varying);\n \n   /* Create a default value range.  */\n-  vr_value[ver] = vr = XCNEW (value_range);\n+  vr_value[ver] = vr = vrp_value_range_pool.allocate ();\n+  memset (vr, 0, sizeof (*vr));\n \n   /* Defer allocating the equivalence set.  */\n   vr->equiv = NULL;\n@@ -818,7 +824,7 @@ add_equivalence (bitmap *equiv, const_tree var)\n   value_range *vr = vr_value[ver];\n \n   if (*equiv == NULL)\n-    *equiv = BITMAP_ALLOC (NULL);\n+    *equiv = BITMAP_ALLOC (&vrp_equiv_obstack);\n   bitmap_set_bit (*equiv, ver);\n   if (vr && vr->equiv)\n     bitmap_ior_into (*equiv, vr->equiv);\n@@ -6967,6 +6973,7 @@ vrp_initialize (void)\n   num_vr_values = num_ssa_names;\n   vr_value = XCNEWVEC (value_range *, num_vr_values);\n   vr_phi_edge_counts = XCNEWVEC (int, num_ssa_names);\n+  bitmap_obstack_initialize (&vrp_equiv_obstack);\n \n   FOR_EACH_BB_FN (bb, cfun)\n     {\n@@ -10291,15 +10298,10 @@ vrp_finalize (bool warn_array_bounds_p)\n   identify_jump_threads ();\n \n   /* Free allocated memory.  */\n-  for (i = 0; i < num_vr_values; i++)\n-    if (vr_value[i])\n-      {\n-\tBITMAP_FREE (vr_value[i]->equiv);\n-\tfree (vr_value[i]);\n-      }\n-\n   free (vr_value);\n   free (vr_phi_edge_counts);\n+  bitmap_obstack_release (&vrp_equiv_obstack);\n+  vrp_value_range_pool.release ();\n \n   /* So that we can distinguish between VRP data being available\n      and not available.  */"}]}