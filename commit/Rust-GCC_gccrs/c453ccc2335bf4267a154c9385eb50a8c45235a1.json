{"sha": "c453ccc2335bf4267a154c9385eb50a8c45235a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ1M2NjYzIzMzViZjQyNjdhMTU0YzkzODVlYjUwYThjNDUyMzVhMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-05-24T12:34:18Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-05-24T12:34:18Z"}, "message": "Use canonicalize_math_after_vectorization_p for FMA folds\n\nThe folds in r260348 kicked in before vectorisation, which hurts\nfor two reasons:\n\n(1) the current suboptimal handling of nothrow meant that we could\n    drop the flag early and so prevent if-conversion\n\n(2) some architectures provide more scalar forms than vector forms\n    (true for Advanced SIMD)\n\n(1) is a bug in itself that needs to be fixed eventually, but delaying\nthe folds is still needed for (2).\n\n2018-05-24  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* match.pd: Delay FMA folds until after vectorization.\n\ngcc/testsuite/\n\t* gcc.dg/vect/vect-fma-1.c: New test.\n\nFrom-SVN: r260639", "tree": {"sha": "a370c4868f5adf7c1f2a37c67c0b608933c93782", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a370c4868f5adf7c1f2a37c67c0b608933c93782"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c453ccc2335bf4267a154c9385eb50a8c45235a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c453ccc2335bf4267a154c9385eb50a8c45235a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c453ccc2335bf4267a154c9385eb50a8c45235a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c453ccc2335bf4267a154c9385eb50a8c45235a1/comments", "author": null, "committer": null, "parents": [{"sha": "0c08e1f85d96dd50de4289f05beb87b83b6d1d83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c08e1f85d96dd50de4289f05beb87b83b6d1d83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c08e1f85d96dd50de4289f05beb87b83b6d1d83"}], "stats": {"total": 161, "additions": 114, "deletions": 47}, "files": [{"sha": "1500fc098cc00824025c87643d81590af5216204", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c453ccc2335bf4267a154c9385eb50a8c45235a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c453ccc2335bf4267a154c9385eb50a8c45235a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c453ccc2335bf4267a154c9385eb50a8c45235a1", "patch": "@@ -1,3 +1,7 @@\n+2018-05-24  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* match.pd: Delay FMA folds until after vectorization.\n+\n 2018-05-24  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \tPR target/83009"}, {"sha": "50f4c882e5ec13fba9fd9f68935e840ea775784b", "filename": "gcc/match.pd", "status": "modified", "additions": 48, "deletions": 47, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c453ccc2335bf4267a154c9385eb50a8c45235a1/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c453ccc2335bf4267a154c9385eb50a8c45235a1/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=c453ccc2335bf4267a154c9385eb50a8c45235a1", "patch": "@@ -4703,59 +4703,60 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t\t      wi::to_wide (@ipos) + isize))\n     (BIT_FIELD_REF @0 @rsize @rpos)))))\n \n-(for fmas (FMA)\n+(if (canonicalize_math_after_vectorization_p ())\n+ (for fmas (FMA)\n+  (simplify\n+   (fmas:c (negate @0) @1 @2)\n+   (IFN_FNMA @0 @1 @2))\n+  (simplify\n+   (fmas @0 @1 (negate @2))\n+   (IFN_FMS @0 @1 @2))\n+  (simplify\n+   (fmas:c (negate @0) @1 (negate @2))\n+   (IFN_FNMS @0 @1 @2))\n+  (simplify\n+   (negate (fmas@3 @0 @1 @2))\n+   (if (single_use (@3))\n+    (IFN_FNMS @0 @1 @2))))\n+\n  (simplify\n-  (fmas:c (negate @0) @1 @2)\n+  (IFN_FMS:c (negate @0) @1 @2)\n+  (IFN_FNMS @0 @1 @2))\n+ (simplify\n+  (IFN_FMS @0 @1 (negate @2))\n+  (IFN_FMA @0 @1 @2))\n+ (simplify\n+  (IFN_FMS:c (negate @0) @1 (negate @2))\n   (IFN_FNMA @0 @1 @2))\n  (simplify\n-  (fmas @0 @1 (negate @2))\n-  (IFN_FMS @0 @1 @2))\n+  (negate (IFN_FMS@3 @0 @1 @2))\n+   (if (single_use (@3))\n+    (IFN_FNMA @0 @1 @2)))\n+\n+ (simplify\n+  (IFN_FNMA:c (negate @0) @1 @2)\n+  (IFN_FMA @0 @1 @2))\n  (simplify\n-  (fmas:c (negate @0) @1 (negate @2))\n+  (IFN_FNMA @0 @1 (negate @2))\n   (IFN_FNMS @0 @1 @2))\n  (simplify\n-  (negate (fmas@3 @0 @1 @2))\n+  (IFN_FNMA:c (negate @0) @1 (negate @2))\n+  (IFN_FMS @0 @1 @2))\n+ (simplify\n+  (negate (IFN_FNMA@3 @0 @1 @2))\n   (if (single_use (@3))\n-   (IFN_FNMS @0 @1 @2))))\n+   (IFN_FMS @0 @1 @2)))\n \n-(simplify\n- (IFN_FMS:c (negate @0) @1 @2)\n- (IFN_FNMS @0 @1 @2))\n-(simplify\n- (IFN_FMS @0 @1 (negate @2))\n- (IFN_FMA @0 @1 @2))\n-(simplify\n- (IFN_FMS:c (negate @0) @1 (negate @2))\n- (IFN_FNMA @0 @1 @2))\n-(simplify\n- (negate (IFN_FMS@3 @0 @1 @2))\n+ (simplify\n+  (IFN_FNMS:c (negate @0) @1 @2)\n+  (IFN_FMS @0 @1 @2))\n+ (simplify\n+  (IFN_FNMS @0 @1 (negate @2))\n+  (IFN_FNMA @0 @1 @2))\n+ (simplify\n+  (IFN_FNMS:c (negate @0) @1 (negate @2))\n+  (IFN_FMA @0 @1 @2))\n+ (simplify\n+  (negate (IFN_FNMS@3 @0 @1 @2))\n   (if (single_use (@3))\n-   (IFN_FNMA @0 @1 @2)))\n-\n-(simplify\n- (IFN_FNMA:c (negate @0) @1 @2)\n- (IFN_FMA @0 @1 @2))\n-(simplify\n- (IFN_FNMA @0 @1 (negate @2))\n- (IFN_FNMS @0 @1 @2))\n-(simplify\n- (IFN_FNMA:c (negate @0) @1 (negate @2))\n- (IFN_FMS @0 @1 @2))\n-(simplify\n- (negate (IFN_FNMA@3 @0 @1 @2))\n- (if (single_use (@3))\n-  (IFN_FMS @0 @1 @2)))\n-\n-(simplify\n- (IFN_FNMS:c (negate @0) @1 @2)\n- (IFN_FMS @0 @1 @2))\n-(simplify\n- (IFN_FNMS @0 @1 (negate @2))\n- (IFN_FNMA @0 @1 @2))\n-(simplify\n- (IFN_FNMS:c (negate @0) @1 (negate @2))\n- (IFN_FMA @0 @1 @2))\n-(simplify\n- (negate (IFN_FNMS@3 @0 @1 @2))\n- (if (single_use (@3))\n-  (IFN_FMA @0 @1 @2)))\n+   (IFN_FMA @0 @1 @2))))"}, {"sha": "a04a3278adfe0747c074d4fccd626a0558f342ec", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c453ccc2335bf4267a154c9385eb50a8c45235a1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c453ccc2335bf4267a154c9385eb50a8c45235a1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c453ccc2335bf4267a154c9385eb50a8c45235a1", "patch": "@@ -1,3 +1,7 @@\n+2018-05-24  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* gcc.dg/vect/vect-fma-1.c: New test.\n+\n 2018-05-24  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* gcc.dg/tree-prof/update-loopch.c: Fix dumpfile name in"}, {"sha": "6b6b4f726e9476ac6a90984e15fdd0839dff8885", "filename": "gcc/testsuite/gcc.dg/vect/vect-fma-1.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c453ccc2335bf4267a154c9385eb50a8c45235a1/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-fma-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c453ccc2335bf4267a154c9385eb50a8c45235a1/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-fma-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-fma-1.c?ref=c453ccc2335bf4267a154c9385eb50a8c45235a1", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-require-effective-target scalar_all_fma } */\n+\n+#include \"tree-vect.h\"\n+\n+#define N (VECTOR_BITS * 11 / 64 + 3)\n+\n+#define DEF(INV)\t\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\\\n+  f_##INV (double *restrict a, double *restrict b,\t\\\n+\t   double *restrict c, double *restrict d)\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\tdouble mb = (INV & 1 ? -b[i] : b[i]);\t\t\\\n+\tdouble mc = c[i];\t\t\t\t\\\n+\tdouble md = (INV & 2 ? -d[i] : d[i]);\t\t\\\n+\tdouble fma = __builtin_fma (mb, mc, md);\t\\\n+\ta[i] = (INV & 4 ? -fma : fma);\t\t\t\\\n+      }\t\t\t\t\t\t\t\\\n+  }\n+\n+#define TEST(INV)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    f_##INV (a, b, c, d);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\tdouble mb = (INV & 1 ? -b[i] : b[i]);\t\t\\\n+\tdouble mc = c[i];\t\t\t\t\\\n+\tdouble md = (INV & 2 ? -d[i] : d[i]);\t\t\\\n+\tdouble fma = __builtin_fma (mb, mc, md);\t\\\n+\tdouble expected = (INV & 4 ? -fma : fma);\t\\\n+\tif (a[i] != expected)\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\\\n+      }\t\t\t\t\t\t\t\\\n+  }\n+\n+#define FOR_EACH_INV(T)\t\\\n+  T (0) T (1) T (2) T (3) T (4) T (5) T (6) T (7)\n+\n+FOR_EACH_INV (DEF)\n+\n+int\n+main (void)\n+{\n+  double a[N], b[N], c[N], d[N];\n+  for (int i = 0; i < N; ++i)\n+    {\n+      b[i] = i % 17;\n+      c[i] = i % 9 + 11;\n+      d[i] = i % 13 + 14;\n+      asm volatile (\"\" ::: \"memory\");\n+    }\n+  FOR_EACH_INV (TEST)\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 8 \"vect\" { target vect_double } } } */"}]}