{"sha": "cc7f509d3c0b3ab63891cf7ca2def0fdfb3642c4", "node_id": "C_kwDOANBUbNoAKGNjN2Y1MDlkM2MwYjNhYjYzODkxY2Y3Y2EyZGVmMGZkZmIzNjQyYzQ", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-12-10T16:17:35Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-12-11T13:46:59Z"}, "message": "d: Expand bsr intrinsic as `clz(arg) ^ (argsize - 1)'\n\nAs well as removing unnecessary casts, this results in less temporaries\nbeing generated during the initial gimple lowering pass.  Otherwise the\ncode generated is identical to the former intrinsic expansion.\n\ngcc/d/ChangeLog:\n\n\t* intrinsics.cc (expand_intrinsic_bsf): Fix comment.\n\t(expand_intrinsic_bsr): Use BIT_XOR_EXPR instead of MINUS_EXPR.", "tree": {"sha": "0644114399957ea67926b08ab5fe87d3b99bbe76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0644114399957ea67926b08ab5fe87d3b99bbe76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc7f509d3c0b3ab63891cf7ca2def0fdfb3642c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc7f509d3c0b3ab63891cf7ca2def0fdfb3642c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc7f509d3c0b3ab63891cf7ca2def0fdfb3642c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc7f509d3c0b3ab63891cf7ca2def0fdfb3642c4/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d13b86f932ff7b9d8f41483fd869c637b67d4dec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d13b86f932ff7b9d8f41483fd869c637b67d4dec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d13b86f932ff7b9d8f41483fd869c637b67d4dec"}], "stats": {"total": 17, "additions": 6, "deletions": 11}, "files": [{"sha": "46380e512c4506d595c5ff0ab8cccc76d1e3cfba", "filename": "gcc/d/intrinsics.cc", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7f509d3c0b3ab63891cf7ca2def0fdfb3642c4/gcc%2Fd%2Fintrinsics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7f509d3c0b3ab63891cf7ca2def0fdfb3642c4/gcc%2Fd%2Fintrinsics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fintrinsics.cc?ref=cc7f509d3c0b3ab63891cf7ca2def0fdfb3642c4", "patch": "@@ -525,7 +525,7 @@ call_builtin_fn (tree callexp, built_in_function code, int n, ...)\n static tree\n expand_intrinsic_bsf (tree callexp)\n {\n-  /* The bsr() intrinsic gets turned into __builtin_ctz(arg).\n+  /* The bsf() intrinsic gets turned into __builtin_ctz(arg).\n      The return value is supposed to be undefined if arg is zero.  */\n   tree arg = CALL_EXPR_ARG (callexp, 0);\n   int argsize = TYPE_PRECISION (TREE_TYPE (arg));\n@@ -554,11 +554,11 @@ expand_intrinsic_bsf (tree callexp)\n static tree\n expand_intrinsic_bsr (tree callexp)\n {\n-  /* The bsr() intrinsic gets turned into (size - 1) - __builtin_clz(arg).\n+  /* The bsr() intrinsic gets turned into __builtin_clz(arg) ^ (size - 1).\n      The return value is supposed to be undefined if arg is zero.  */\n   tree arg = CALL_EXPR_ARG (callexp, 0);\n-  tree type = TREE_TYPE (arg);\n-  int argsize = TYPE_PRECISION (type);\n+  tree type = TREE_TYPE (callexp);\n+  int argsize = TYPE_PRECISION (TREE_TYPE (arg));\n \n   /* Which variant of __builtin_clz* should we call?  */\n   built_in_function code = (argsize <= INT_TYPE_SIZE) ? BUILT_IN_CLZ\n@@ -570,13 +570,8 @@ expand_intrinsic_bsr (tree callexp)\n \n   tree result = call_builtin_fn (callexp, code, 1, arg);\n \n-  /* Handle int -> long conversions.  */\n-  if (TREE_TYPE (result) != type)\n-    result = fold_convert (type, result);\n-\n-  result = fold_build2 (MINUS_EXPR, type,\n-\t\t\tbuild_integer_cst (argsize - 1, type), result);\n-  return fold_convert (TREE_TYPE (callexp), result);\n+  return fold_build2 (BIT_XOR_EXPR, type, result,\n+\t\t      build_integer_cst (argsize - 1, type));\n }\n \n /* Expand a front-end intrinsic call to INTRINSIC, which is either a call to"}]}