{"sha": "e37383993dd7fdd71cbb33b84898bdde368c35af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM3MzgzOTkzZGQ3ZmRkNzFjYmIzM2I4NDg5OGJkZGUzNjhjMzVhZg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2002-10-03T14:40:43Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2002-10-03T14:40:43Z"}, "message": "Autoscroll.java: New file, merge from Classpath.\n\n2002-10-03  Michael Koch  <konqueror@gmx.de>\n\n\t* java/awt/dnd/Autoscroll.java:\n\tNew file, merge from Classpath.\n\t* java/awt/dnd/DragSourceAdapter.java:\n\t(dragExit): Fixed typos in argument type.\n\t(dragDropEnd): Fixed typos in argument type.\n\t* java/awt/dnd/DragSourceDropEvent.java:\n\tNew file, merge from Classpath.\n\t* java/awt/dnd/DropTarget.java:\n\tAdded stubs, merge from Classpath.\n\t* java/awt/dnd/DropTargetAdapter.java:\n\tNew file, merge from Classpath.\n\t* java/awt/dnd/DropTargetContext.java:\n\tNew file, merge from Classpath.\n\t* java/awt/dnd/DropTargetDragEvent.java:\n\tNew file, merge from Classpath.\n\t* java/awt/dnd/DropTargetDropEvent.java:\n\tNew file, merge from Classpath.\n\t* java/awt/dnd/DropTargetEvent.java:\n\tNew file, merge from Classpath.\n\t* java/awt/dnd/DropTargetListener.java:\n\tNew file, merge from Classpath.\n\t* java/awt/dnd/MouseDragGestureRecognizer.java:\n\tNew file, merge from Classpath.\n\t* java/awt/dnd/peer/DropTargetContextPeer.java:\n\tNew file, merge from Classpath.\n\nFrom-SVN: r57777", "tree": {"sha": "97606a77a4158cc8724b7910bf112687a1d71b4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97606a77a4158cc8724b7910bf112687a1d71b4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e37383993dd7fdd71cbb33b84898bdde368c35af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e37383993dd7fdd71cbb33b84898bdde368c35af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e37383993dd7fdd71cbb33b84898bdde368c35af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e37383993dd7fdd71cbb33b84898bdde368c35af/comments", "author": null, "committer": null, "parents": [{"sha": "a8e8f5c359b655106f4d59afc99315d0bb420040", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8e8f5c359b655106f4d59afc99315d0bb420040", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8e8f5c359b655106f4d59afc99315d0bb420040"}], "stats": {"total": 1186, "additions": 1182, "deletions": 4}, "files": [{"sha": "1beed9ea4900f898145aaecd44baf0d9c15b1f0e", "filename": "libjava/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37383993dd7fdd71cbb33b84898bdde368c35af/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37383993dd7fdd71cbb33b84898bdde368c35af/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=e37383993dd7fdd71cbb33b84898bdde368c35af", "patch": "@@ -1,3 +1,31 @@\n+2002-10-03  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/awt/dnd/Autoscroll.java:\n+\tNew file, merge from Classpath.\n+\t* java/awt/dnd/DragSourceAdapter.java:\n+\t(dragExit): Fixed typos in argument type.\n+\t(dragDropEnd): Fixed typos in argument type.\n+\t* java/awt/dnd/DragSourceDropEvent.java:\n+\tNew file, merge from Classpath.\n+\t* java/awt/dnd/DropTarget.java:\n+\tAdded stubs, merge from Classpath.\n+\t* java/awt/dnd/DropTargetAdapter.java:\n+\tNew file, merge from Classpath.\n+\t* java/awt/dnd/DropTargetContext.java:\n+\tNew file, merge from Classpath.\n+\t* java/awt/dnd/DropTargetDragEvent.java:\n+\tNew file, merge from Classpath.\n+\t* java/awt/dnd/DropTargetDropEvent.java:\n+\tNew file, merge from Classpath.\n+\t* java/awt/dnd/DropTargetEvent.java:\n+\tNew file, merge from Classpath.\n+\t* java/awt/dnd/DropTargetListener.java:\n+\tNew file, merge from Classpath.\n+\t* java/awt/dnd/MouseDragGestureRecognizer.java:\n+\tNew file, merge from Classpath.\n+\t* java/awt/dnd/peer/DropTargetContextPeer.java:\n+\tNew file, merge from Classpath.\n+\n 2002-10-03  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/DatagramPacket.java"}, {"sha": "e7d3e28ed320c3a11229ec6b10a97e12e06f32ac", "filename": "libjava/java/awt/dnd/Autoscroll.java", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37383993dd7fdd71cbb33b84898bdde368c35af/libjava%2Fjava%2Fawt%2Fdnd%2FAutoscroll.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37383993dd7fdd71cbb33b84898bdde368c35af/libjava%2Fjava%2Fawt%2Fdnd%2FAutoscroll.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdnd%2FAutoscroll.java?ref=e37383993dd7fdd71cbb33b84898bdde368c35af", "patch": "@@ -0,0 +1,67 @@\n+/* Autoscroll.java --\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.awt.dnd;\n+\n+import java.awt.Point;\n+import java.awt.Insets;\n+\n+/**\n+ * During DnD operations it is possible that a user may wish to drop the\n+ * subject of the operation on a region of a scrollable GUI control that\n+ * is not currently visible to the user.\n+ *\n+ * @author Michael Koch <konqueror@gmx.de>\n+ * @since 1.2\n+ * @status updated to 1.4\n+ */\n+public interface Autoscroll\n+{\n+  /**\n+   * This method returns the Insets describing the autoscrolling region or\n+   * border relative to the geometry of the implementing Component\n+   */\n+  public Insets getAutoscrollInsets ();\n+\n+  /**\n+   * Notify the Component to autoscroll\n+   *\n+   * @param location A Point indicating the location of the cursor that\n+   * triggered this operation\n+   */\n+  public void autoscroll (Point location);\n+} // interface Autoscroll"}, {"sha": "2b2e15541fd0de960f4b99c1adf76acf7776084d", "filename": "libjava/java/awt/dnd/DragSourceAdapter.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37383993dd7fdd71cbb33b84898bdde368c35af/libjava%2Fjava%2Fawt%2Fdnd%2FDragSourceAdapter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37383993dd7fdd71cbb33b84898bdde368c35af/libjava%2Fjava%2Fawt%2Fdnd%2FDragSourceAdapter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdnd%2FDragSourceAdapter.java?ref=e37383993dd7fdd71cbb33b84898bdde368c35af", "patch": "@@ -108,7 +108,7 @@ public void dropActionChanged(DragSourceDragEvent e)\n    *\n    * @param e the event\n    */\n-  public void dragExit(DragSourceDragEvent e)\n+  public void dragExit(DragSourceEvent e)\n   {\n   }\n \n@@ -120,7 +120,7 @@ public void dragExit(DragSourceDragEvent e)\n    *\n    * @param e the event\n    */\n-  public void dragDropEnd(DragSourceDragEvent e)\n+  public void dragDropEnd(DragSourceDropEvent e)\n   {\n   }\n } // class DragSourceAdapter"}, {"sha": "4b70d1bf0b0aca457de8894cde1165718954146c", "filename": "libjava/java/awt/dnd/DragSourceDropEvent.java", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37383993dd7fdd71cbb33b84898bdde368c35af/libjava%2Fjava%2Fawt%2Fdnd%2FDragSourceDropEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37383993dd7fdd71cbb33b84898bdde368c35af/libjava%2Fjava%2Fawt%2Fdnd%2FDragSourceDropEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdnd%2FDragSourceDropEvent.java?ref=e37383993dd7fdd71cbb33b84898bdde368c35af", "patch": "@@ -0,0 +1,84 @@\n+/* DragSourceDragEvent.java --\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.awt.dnd;\n+\n+/**\n+ * @author Michael Koch <konqueror@gmx.de>\n+ * @since 1.2\n+ *\n+ * Written using JDK 1.4.1 Online API\n+ * Status: JDK 1.4 complete\n+ */\n+public class DragSourceDropEvent extends DragSourceEvent\n+{\n+  private final int dropAction;\n+  private final boolean success;\n+\n+  public DragSourceDropEvent (DragSourceContext context)\n+  {\n+    super (context);\n+    this.dropAction = 0;\n+    this.success = false;\n+  }\n+  \n+  public DragSourceDropEvent (DragSourceContext context, int dropAction,\n+                              boolean success)\n+  {\n+    super (context);\n+    this.dropAction = dropAction;\n+    this.success = success;\n+  }\n+\n+  public DragSourceDropEvent (DragSourceContext context, int dropAction,\n+                              boolean success, int x, int y)\n+  {\n+    super (context, x, y);\n+    this.dropAction = dropAction;\n+    this.success = success;\n+  }\n+\n+  public int getDropAction()\n+  {\n+    return dropAction & ((DragSourceContext) source).getSourceActions();\n+  }\n+\n+  public boolean getDropSuccess()\n+  {\n+    return success;\n+  }\n+} // class DragSourceDropEvent"}, {"sha": "9d8174500c57b218b0d8b335f92933e77d01121b", "filename": "libjava/java/awt/dnd/DropTarget.java", "status": "modified", "additions": 180, "deletions": 2, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37383993dd7fdd71cbb33b84898bdde368c35af/libjava%2Fjava%2Fawt%2Fdnd%2FDropTarget.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37383993dd7fdd71cbb33b84898bdde368c35af/libjava%2Fjava%2Fawt%2Fdnd%2FDropTarget.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdnd%2FDropTarget.java?ref=e37383993dd7fdd71cbb33b84898bdde368c35af", "patch": "@@ -36,5 +36,183 @@\n exception statement from your version. */\n \n package java.awt.dnd;\n-/** STUB CLASS ONLY */\n-public class DropTarget {}\n+\n+import java.awt.Point;\n+import java.awt.Component;\n+import java.awt.datatransfer.FlavorMap;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.util.TooManyListenersException;\n+\n+public class DropTarget\n+{\n+  protected static class DropTargetAutoScroller\n+    implements ActionListener\n+  {\n+    protected DropTargetAutoScroller (Component c, Point p)\n+    {\n+    }\n+\n+    protected void updateLocation (Point newLocn)\n+    {\n+    }\n+\n+    protected void stop ()\n+    {\n+    }\n+\n+    public void actionPerformed (ActionEvent e)\n+    {\n+    }\n+  }\n+  \n+  /**\n+   * FIXME\n+   *\n+   * @exception HeadlessException FIXME\n+   */\n+  public DropTarget ()\n+  {\n+  }\n+  \n+  /**\n+   * FIXME\n+   *\n+   * @exception HeadlessException FIXME\n+   */\n+  public DropTarget (Component c, DropTargetListener dtl)\n+  {\n+  }\n+  \n+  /**\n+   * FIXME\n+   *\n+   * @exception HeadlessException FIXME\n+   */\n+  public DropTarget (Component c, int i, DropTargetListener dtl)\n+  {\n+  }\n+  \n+  /**\n+   * FIXME\n+   *\n+   * @exception HeadlessException FIXME\n+   */\n+  public DropTarget (Component c, int i, DropTargetListener dtl, boolean b)\n+  {\n+  }\n+  \n+  /**\n+   * FIXME\n+   *\n+   * @exception HeadlessException FIXME\n+   */\n+  public DropTarget (Component c, int i, DropTargetListener dtl, boolean b,\n+\t\t     FlavorMap fm)\n+  {\n+  }\n+\n+  public void setComponent (Component c)\n+  {\n+  }\n+\n+  public Component getComponent ()\n+  {\n+    return null;\n+  }\n+\n+  public void setDefaultActions (int ops)\n+  {\n+  }\n+\n+  public int getDefaultActions ()\n+  {\n+    return 0;\n+  }\n+\n+  public void setActive(boolean isActive)\n+  {\n+  }\n+\n+  public boolean isActive()\n+  {\n+    return false;\n+  }\n+\n+  /**\n+   * @exception TooManyListenersException FIXME\n+   */\n+  public void addDropTargetListener (DropTargetListener dtl)\n+    throws TooManyListenersException\n+  {\n+  }\n+\n+  public void removeDropTargetListener(DropTargetListener dtl)\n+  {\n+  }\n+\n+  public void dragEnter(DropTargetDragEvent dtde)\n+  {\n+  }\n+\n+  public void dragOver(DropTargetDragEvent dtde)\n+  {\n+  }\n+\n+  public void dropActionChanged(DropTargetDragEvent dtde)\n+  {\n+  }\n+\n+  public void dragExit(DropTargetEvent dte)\n+  {\n+  }\n+\n+  public void drop(DropTargetDropEvent dtde)\n+  {\n+  }\n+\n+  public FlavorMap getFlavorMap()\n+  {\n+    return null;\n+  }\n+\n+  public void setFlavorMap(FlavorMap fm)\n+  {\n+  }\n+\n+  public void addNotify(java.awt.peer.ComponentPeer peer)\n+  {\n+  }\n+\n+  public void removeNotify(java.awt.peer.ComponentPeer peer)\n+  {\n+  }\n+\n+  public DropTargetContext getDropTargetContext()\n+  {\n+    return null;\n+  }\n+\n+  protected DropTargetContext createDropTargetContext()\n+  {\n+    return null;\n+  }\n+\n+  protected DropTarget.DropTargetAutoScroller createDropTargetAutoScroller\n+                                                       (Component c, Point p)\n+  {\n+    return null;\n+  }\n+\n+  protected void initializeAutoscrolling(Point p)\n+  {\n+  }\n+\n+  protected void updateAutoscroll(Point dragCursorLocn)\n+  {\n+  }\n+\n+  protected void clearAutoscroll()\n+  {\n+  }\n+} // class DropTarget"}, {"sha": "4ece882121b2eea9a0253431ffc838e4c36fbcbf", "filename": "libjava/java/awt/dnd/DropTargetAdapter.java", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37383993dd7fdd71cbb33b84898bdde368c35af/libjava%2Fjava%2Fawt%2Fdnd%2FDropTargetAdapter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37383993dd7fdd71cbb33b84898bdde368c35af/libjava%2Fjava%2Fawt%2Fdnd%2FDropTargetAdapter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdnd%2FDropTargetAdapter.java?ref=e37383993dd7fdd71cbb33b84898bdde368c35af", "patch": "@@ -0,0 +1,100 @@\n+/* DragSourceAdapter.java -- drag-and-drop listener adapter\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.awt.dnd;\n+\n+/**\n+ * This class implements <code>DropTargetListener</code>, and implements all methods\n+ * with empty bodies.  This allows a listener interested in implementing only\n+ * a subset of these interfaces to extend this class and override only the\n+ * desired methods.\n+ *\n+ * @author Michael Koch <konqueror@gmx.de>\n+ * @since 1.4\n+ * @status updated to 1.4\n+ */\n+public abstract class DropTargetAdapter\n+  implements DropTargetListener\n+{\n+  /**\n+   * Default constructor.\n+   */\n+  public DropTargetAdapter()\n+  {\n+  }\n+\n+  /**\n+   * Called when the cursor hotspot enters a drop site which will accept the\n+   * drag.\n+   *\n+   * @param e the event\n+   */\n+  public void dragEnter (DropTargetDragEvent e)\n+  {\n+  }\n+\n+  /**\n+   * Called when the cursor hotspot moves inside of a drop site which will\n+   * accept the drag.\n+   *\n+   * @param e the event\n+   */\n+  public void dragOver (DropTargetDragEvent e)\n+  {\n+  }\n+\n+  /**\n+   * Called when the user modifies the drop gesture. This is often the case\n+   * when additional mouse or key events are received during the drag.\n+   *\n+   * @param e the event\n+   */\n+  public void dropActionChanged (DropTargetDragEvent e)\n+  {\n+  }\n+\n+  /**\n+   * Called when the cursor hotspot moves outside of a drop site which will\n+   * accept the drag. This could also happen if the drop site is no longer\n+   * active, or no longer accepts the drag.\n+   *\n+   * @param e the event\n+   */\n+  public void dragExit(DropTargetEvent e)\n+  {\n+  }\n+} // class DropTargetAdapter"}, {"sha": "255ab844e8df2460eae04a6fe3db181c469be9a4", "filename": "libjava/java/awt/dnd/DropTargetContext.java", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37383993dd7fdd71cbb33b84898bdde368c35af/libjava%2Fjava%2Fawt%2Fdnd%2FDropTargetContext.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37383993dd7fdd71cbb33b84898bdde368c35af/libjava%2Fjava%2Fawt%2Fdnd%2FDropTargetContext.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdnd%2FDropTargetContext.java?ref=e37383993dd7fdd71cbb33b84898bdde368c35af", "patch": "@@ -0,0 +1,174 @@\n+/* DropTargetContext.java --\n+   Copyright (C) 2002 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.awt.dnd;\n+\n+import java.awt.dnd.peer.DropTargetContextPeer;\n+import java.io.Serializable;\n+import java.io.IOException;\n+import java.awt.Component;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.util.List;\n+\n+public class DropTargetContext implements Serializable\n+{\n+  protected class TransferableProxy implements Transferable\n+  {\n+    protected boolean isLocal;\n+    protected Transferable transferable;\n+\n+    public DataFlavor[] getTransferDataFlavors ()\n+    {\n+      // FIXME: implement this\n+      return null;\n+    }\n+\n+    public boolean isDataFlavorSupported (DataFlavor flavor)\n+    {\n+      // FIXME: implement this\n+      return false;\n+    }\n+\n+    public Object getTransferData (DataFlavor flavor)\n+      throws UnsupportedFlavorException, IOException\n+    {\n+      // FIXME: implement this\n+      return null;\n+    }\n+  }\n+\n+  private int targetActions;\n+\n+  public DropTarget getDropTarget ()\n+  {\n+    // FIXME: implement this\n+    return null;\n+  }\n+\n+  public Component getComponent ()\n+  {\n+    // FIXME: implement this\n+    return null;\n+  }\n+\n+  public void addNotify (java.awt.dnd.peer.DropTargetContextPeer dtcp)\n+  {\n+    // FIXME: implement this\n+  }\n+\n+  public void removeNotify ()\n+  {\n+    // FIXME: implement this\n+  }\n+\n+  protected void setTargetActions (int actions)\n+  {\n+    targetActions = actions;\n+  }\n+\n+  protected int getTargetActions()\n+  {\n+    return targetActions;\n+  }\n+\n+  /**\n+   * FIXME\n+   *\n+   * @exception InvalidDnDOperationException FIXME\n+   */\n+  public void dropComplete (boolean success)\n+  {\n+    // FIXME: implement this\n+  }\n+\n+  protected void acceptDrag (int dragOperation)\n+  {\n+    // FIXME: implement this\n+  }\n+\n+  protected void rejectDrag ()\n+  {\n+    // FIXME: implement this\n+  }\n+\n+  protected void acceptDrop (int dropOperation)\n+  {\n+    // FIXME: implement this\n+  }\n+\n+  protected void rejectDrop ()\n+  {\n+    // FIXME: implement this\n+  }\n+\n+  protected DataFlavor[] getCurrentDataFlavors ()\n+  {\n+    // FIXME: implement this\n+    return null;\n+  }\n+\n+  protected List getCurrentDataFlavorsAsList ()\n+  {\n+    // FIXME: implement this\n+    return null;\n+  }\n+\n+  protected boolean isDataFlavorSupported (DataFlavor flavor)\n+  {\n+    // FIXME: implement this\n+    return false;\n+  }\n+\n+  /**\n+   * FIXME\n+   *\n+   * @exception InvalidDnDOperationException FIXME\n+   */\n+  protected Transferable getTransferable() throws InvalidDnDOperationException\n+  {\n+    // FIXME: implement this\n+    return null;\n+  }\n+\n+  protected Transferable createTransferableProxy(Transferable t, boolean local)\n+  {\n+    // FIXME: implement this\n+    return null;\n+  }\n+} // class DropTargetContext"}, {"sha": "a22ddc8e32a3649a95958f9ad7dcb2955e2a9652", "filename": "libjava/java/awt/dnd/DropTargetDragEvent.java", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37383993dd7fdd71cbb33b84898bdde368c35af/libjava%2Fjava%2Fawt%2Fdnd%2FDropTargetDragEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37383993dd7fdd71cbb33b84898bdde368c35af/libjava%2Fjava%2Fawt%2Fdnd%2FDropTargetDragEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdnd%2FDropTargetDragEvent.java?ref=e37383993dd7fdd71cbb33b84898bdde368c35af", "patch": "@@ -0,0 +1,107 @@\n+/* DropTargetDragEvent.java --\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.awt.dnd;\n+\n+import java.util.List;\n+import java.awt.Point;\n+import java.awt.datatransfer.DataFlavor;\n+\n+public class DropTargetDragEvent extends DropTargetEvent\n+{\n+  private final int dropAction;\n+  private final int srcActions;\n+  private final Point location;\n+\n+  /**\n+   * FIXME\n+   *\n+   * @exception NullPointerException FIXME\n+   */\n+  public DropTargetDragEvent (DropTargetContext context, Point location,\n+                              int dropAction, int srcActions)\n+  {\n+    super (context);\n+    this.dropAction = dropAction;\n+    this.srcActions = srcActions;\n+    this.location = location;\n+  }\n+\n+  public void acceptDrag (int dragOperation)\n+  {\n+    // FIXME: implement this\n+  }\n+\n+  public DataFlavor[] getCurrentDataFlavors ()\n+  {\n+    // FIXME: implement this\n+    return null;\n+  }\n+  \n+  public List getCurrentDataFlavorsAsList ()\n+  {\n+    // FIXME: implement this\n+    return null;\n+  }\n+  \n+  public int getDropAction()\n+  {\n+    return 0; \n+    //return dropAction & ((DropTargetContext) source).getTargetActions();\n+  }\n+\n+  public Point getLocation ()\n+  {\n+    return location;\n+  }\n+\n+  public int getSourceActions ()\n+  {\n+    return srcActions;\n+  }\n+\n+  public boolean isDataFlavorSupported (DataFlavor df)\n+  {\n+    // FIXME: implement this\n+    return true;\n+  }\n+\n+  public void rejectDrag ()\n+  {\n+    // FIXME: implement this\n+  }\n+} // class DropTargetDragEvent"}, {"sha": "9a14f226302452f4ebfea174d45f82fb96e32eac", "filename": "libjava/java/awt/dnd/DropTargetDropEvent.java", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37383993dd7fdd71cbb33b84898bdde368c35af/libjava%2Fjava%2Fawt%2Fdnd%2FDropTargetDropEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37383993dd7fdd71cbb33b84898bdde368c35af/libjava%2Fjava%2Fawt%2Fdnd%2FDropTargetDropEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdnd%2FDropTargetDropEvent.java?ref=e37383993dd7fdd71cbb33b84898bdde368c35af", "patch": "@@ -0,0 +1,132 @@\n+/* DropTargetDropEvent.java --\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.awt.dnd;\n+\n+import java.awt.Point;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.util.List;\n+\n+public class DropTargetDropEvent extends DropTargetEvent\n+{\n+  private final int dropAction;\n+  private final int srcActions;\n+  private final Point location;\n+  private final boolean isLocal;\n+  \n+  public DropTargetDropEvent (DropTargetContext dtc, Point location,\n+                              int dropAction, int srcActions)\n+  {\n+    super (dtc);\n+    this.dropAction = dropAction;\n+    this.srcActions = srcActions;\n+    this.location = location;\n+    this.isLocal = false;\n+  }\n+\n+  public DropTargetDropEvent (DropTargetContext dtc, Point location,\n+                              int dropAction, int srcActions, boolean isLocal)\n+  {\n+    super (dtc);\n+    this.dropAction = dropAction;\n+    this.srcActions = srcActions;\n+    this.location = location;\n+    this.isLocal = isLocal;\n+  }\n+  \n+  public Point getLocation ()\n+  {\n+    return location;\n+  }\n+\n+  public DataFlavor[] getCurrentDataFlavors ()\n+  {\n+    // FIXME: implement this\n+    return null;\n+  }\n+\n+  public List getCurrentDataFlavorsAsList ()\n+  {\n+    // FIXME: implement this\n+    return null;\n+  }\n+\n+  public boolean isDataFlavorSupported (DataFlavor flavor)\n+  {\n+    // FIXME: implement this\n+    return false;\n+  }\n+\n+  public int getSourceActions ()\n+  {\n+    // FIXME: implement this\n+    return 0;\n+  }\n+\n+  public int getDropAction ()\n+  {\n+    // FIXME: implement this\n+    return 0;\n+  }\n+\n+  public Transferable getTransferable ()\n+  {\n+    // FIXME: implement this\n+    return null;\n+  }\n+\n+  public void acceptDrop (int dropAction)\n+  {\n+    // FIXME: implement this\n+  }\n+\n+  public void rejectDrop ()\n+  {\n+    // FIXME: implement this\n+  }\n+\n+  public void dropComplete (boolean success)\n+  {\n+    // FIXME: implement this\n+  }\n+\n+  public boolean isLocalTransfer()\n+  {\n+    return isLocal;\n+  }\n+} // class DropTargetDropEvent"}, {"sha": "3065c2bc9ecb02d21652b51c88b10079780c34df", "filename": "libjava/java/awt/dnd/DropTargetEvent.java", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37383993dd7fdd71cbb33b84898bdde368c35af/libjava%2Fjava%2Fawt%2Fdnd%2FDropTargetEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37383993dd7fdd71cbb33b84898bdde368c35af/libjava%2Fjava%2Fawt%2Fdnd%2FDropTargetEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdnd%2FDropTargetEvent.java?ref=e37383993dd7fdd71cbb33b84898bdde368c35af", "patch": "@@ -0,0 +1,56 @@\n+/* DropTarget.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.awt.dnd;\n+\n+import java.util.EventObject;\n+\n+public class DropTargetEvent extends EventObject\n+{\n+  protected DropTargetContext context;\n+\n+  public DropTargetEvent (DropTargetContext context)\n+  {\n+    super (context);\n+    this.context = context;\n+  }\n+  \n+  public DropTargetContext getDropTargetContext ()\n+  {\n+    return context;\n+  }\n+}"}, {"sha": "861aa89140e27dd895ecb1f52a026dcd5ad3069e", "filename": "libjava/java/awt/dnd/DropTargetListener.java", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37383993dd7fdd71cbb33b84898bdde368c35af/libjava%2Fjava%2Fawt%2Fdnd%2FDropTargetListener.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37383993dd7fdd71cbb33b84898bdde368c35af/libjava%2Fjava%2Fawt%2Fdnd%2FDropTargetListener.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdnd%2FDropTargetListener.java?ref=e37383993dd7fdd71cbb33b84898bdde368c35af", "patch": "@@ -0,0 +1,89 @@\n+/* DropTargetListener.java -- listen to events during the drop\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package java.awt.dnd;\n+\n+import java.util.EventListener;\n+\n+/**\n+ * @author Michael Koch <konqueror@gmx.de>\n+ * @since 1.2\n+ * @status updated to 1.4\n+ */\n+public interface DropTargetListener extends EventListener\n+{\n+  /**\n+   * Called when the cursor hotspot enters a drop site which will accept the\n+   * drag.\n+   *\n+   * @param e the drag source drag event\n+   */\n+  void dragEnter (DropTargetDragEvent e);\n+\n+  /**\n+   * Called when the cursor hotspot moves inside of a drop site which will\n+   * accept the drag.\n+   *\n+   * @param e the drag source drag event\n+   */\n+  void dragOver (DropTargetDragEvent e);\n+\n+  /**\n+   * Called when the user modifies the drop gesture. This is often the case\n+   * when additional mouse or key events are received during the drag.\n+   *\n+   * @param e the drag source drag event\n+   */\n+  void dropActionChanged (DropTargetDragEvent e);\n+\n+  /**\n+   * Called when the cursor hotspot moves outside of a drop site which will\n+   * accept the drag. This could also happen if the drop site is no longer\n+   * active, or no longer accepts the drag.\n+   *\n+   * @param e the drag source drag event\n+   */\n+  void dragExit (DropTargetEvent e);\n+\n+  /**\n+   * FIXME\n+   *\n+   * @param e the drag source drag event\n+   */\n+  void drop (DropTargetDropEvent e);\n+} // interface DropTargetListener"}, {"sha": "1ef2e6cb4832fd5888d903d295d3d85b90eacb3f", "filename": "libjava/java/awt/dnd/MouseDragGestureRecognizer.java", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37383993dd7fdd71cbb33b84898bdde368c35af/libjava%2Fjava%2Fawt%2Fdnd%2FMouseDragGestureRecognizer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37383993dd7fdd71cbb33b84898bdde368c35af/libjava%2Fjava%2Fawt%2Fdnd%2FMouseDragGestureRecognizer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdnd%2FMouseDragGestureRecognizer.java?ref=e37383993dd7fdd71cbb33b84898bdde368c35af", "patch": "@@ -0,0 +1,118 @@\n+/* MouseDragGestureRecognizer.java --\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.awt.dnd;\n+\n+import java.awt.Component;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.MouseListener;\n+import java.awt.event.MouseMotionListener;\n+\n+/**\n+ * @author Michael Koch <konqueror@gmx.de>\n+ */\n+\n+public abstract class MouseDragGestureRecognizer \n+  extends DragGestureRecognizer\n+  implements MouseListener, MouseMotionListener\n+{\n+  protected MouseDragGestureRecognizer (DragSource ds, Component c, int act,\n+\t\t                        DragGestureListener dgl)\n+  {\n+    super (ds, c, act, dgl);\n+  }\n+\n+  protected MouseDragGestureRecognizer (DragSource ds, Component c, int act)\n+  {\n+    super (ds, c, act);\n+  }\n+\n+  protected MouseDragGestureRecognizer (DragSource ds, Component c)\n+  {\n+    super (ds, c);\n+  }\n+\n+  protected MouseDragGestureRecognizer (DragSource ds)\n+  {\n+    super (ds);\n+  }\n+\n+  protected void registerListeners ()\n+  {\n+    // FIXME: implement this\n+  }\n+\n+  protected void unregisterListeners ()\n+  {\n+    // FIXME: implement this\n+  }\n+\n+  public void mouseClicked (MouseEvent e)\n+  {\n+    // FIXME: implement this\n+  }\n+\n+  public void mousePressed (MouseEvent e)\n+  {\n+    // FIXME: implement this\n+  }\n+\n+  public void mouseReleased (MouseEvent e)\n+  {\n+    // FIXME: implement this\n+  }\n+\n+  public void mouseEntered (MouseEvent e)\n+  {\n+    // FIXME: implement this\n+  }\n+\n+  public void mouseExited (MouseEvent e)\n+  {\n+    // FIXME: implement this\n+  }\n+\n+  public void mouseDragged (MouseEvent e)\n+  {\n+    // FIXME: implement this\n+  }\n+\n+  public void mouseMoved (MouseEvent e)\n+  {\n+    // FIXME: implement this\n+  }\n+} // class MouseDragGestureRecognizer"}, {"sha": "ad166d9800215e1f5feedd37d302d836a14d2621", "filename": "libjava/java/awt/dnd/peer/DropTargetContextPeer.java", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37383993dd7fdd71cbb33b84898bdde368c35af/libjava%2Fjava%2Fawt%2Fdnd%2Fpeer%2FDropTargetContextPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37383993dd7fdd71cbb33b84898bdde368c35af/libjava%2Fjava%2Fawt%2Fdnd%2Fpeer%2FDropTargetContextPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdnd%2Fpeer%2FDropTargetContextPeer.java?ref=e37383993dd7fdd71cbb33b84898bdde368c35af", "patch": "@@ -0,0 +1,45 @@\n+/* DropTargetContextPeer.java -- interface for drag-and-drop peers\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.awt.dnd.peer;\n+\n+/**\n+ * @author Michael Koch <konqueror@gmx.de>\n+ */\n+public interface DropTargetContextPeer\n+{\n+} // interface DropTargetContextPeer"}]}