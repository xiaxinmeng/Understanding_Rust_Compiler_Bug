{"sha": "6d67bea9215e3d0ca6fb9dbd55124907a395f746", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ2N2JlYTkyMTVlM2QwY2E2ZmI5ZGJkNTUxMjQ5MDdhMzk1Zjc0Ng==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-23T11:19:07Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-23T11:19:07Z"}, "message": "[multiple changes]\n\n2017-01-23  Claire Dross  <dross@adacore.com>\n\n\t* exp_spark.adb (Expand_SPARK_Attribute_Reference):  For\n\tattributes which return Universal_Integer, introduce a conversion\n\tto the expected type with the appropriate check flags set.\n\t* sem_res.adb (Resolve_Range): The higher bound can be in Typ's\n\tbase type if the range is null. It may still be invalid if it\n\tis higher than the lower bound. This is checked later in the\n\tcontext in which the range appears.\n\n2017-01-23  Pierre-Marie de Rodat  <derodat@adacore.com>\n\n\t* scos.ads: Introduce a constant to represent ignored\n\tdependencies in SCO_Unit_Table_Entry.\n\nFrom-SVN: r244776", "tree": {"sha": "4472a6bef6d00b44366fb5de0aae988117000ce7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4472a6bef6d00b44366fb5de0aae988117000ce7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d67bea9215e3d0ca6fb9dbd55124907a395f746", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d67bea9215e3d0ca6fb9dbd55124907a395f746", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d67bea9215e3d0ca6fb9dbd55124907a395f746", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d67bea9215e3d0ca6fb9dbd55124907a395f746/comments", "author": null, "committer": null, "parents": [{"sha": "64a4f612f932d54d242f9c0f6594a84c2f764fcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64a4f612f932d54d242f9c0f6594a84c2f764fcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64a4f612f932d54d242f9c0f6594a84c2f764fcc"}], "stats": {"total": 58, "additions": 55, "deletions": 3}, "files": [{"sha": "c2780aeeeb7c7093d6469127c0630d2aa94cd7dd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d67bea9215e3d0ca6fb9dbd55124907a395f746/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d67bea9215e3d0ca6fb9dbd55124907a395f746/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6d67bea9215e3d0ca6fb9dbd55124907a395f746", "patch": "@@ -1,3 +1,18 @@\n+2017-01-23  Claire Dross  <dross@adacore.com>\n+\n+\t* exp_spark.adb (Expand_SPARK_Attribute_Reference):  For\n+\tattributes which return Universal_Integer, introduce a conversion\n+\tto the expected type with the appropriate check flags set.\n+\t* sem_res.adb (Resolve_Range): The higher bound can be in Typ's\n+\tbase type if the range is null. It may still be invalid if it\n+\tis higher than the lower bound. This is checked later in the\n+\tcontext in which the range appears.\n+\n+2017-01-23  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* scos.ads: Introduce a constant to represent ignored\n+\tdependencies in SCO_Unit_Table_Entry.\n+\n 2017-01-23  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_ch9.adb (Expand_N_Protected_Type_Declaration): Remove extra"}, {"sha": "9861c625f4b2d1a4ed0d1a39e6b579904a3eafc5", "filename": "gcc/ada/exp_spark.adb", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d67bea9215e3d0ca6fb9dbd55124907a395f746/gcc%2Fada%2Fexp_spark.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d67bea9215e3d0ca6fb9dbd55124907a395f746/gcc%2Fada%2Fexp_spark.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_spark.adb?ref=6d67bea9215e3d0ca6fb9dbd55124907a395f746", "patch": "@@ -24,6 +24,7 @@\n ------------------------------------------------------------------------------\n \n with Atree;    use Atree;\n+with Checks;   use Checks;\n with Einfo;    use Einfo;\n with Exp_Ch5;  use Exp_Ch5;\n with Exp_Dbug; use Exp_Dbug;\n@@ -148,6 +149,29 @@ package body Exp_SPARK is\n                New_Occurrence_Of (RTE (RE_To_Address), Loc),\n              Parameter_Associations => New_List (Expr)));\n          Analyze_And_Resolve (N, Typ);\n+\n+      --  For attributes which return Universal_Integer, introduce a conversion\n+      --  to the expected type with the appropriate check flags set.\n+\n+      elsif Attr_Id = Attribute_Alignment\n+        or else Attr_Id = Attribute_Bit\n+        or else Attr_Id = Attribute_Bit_Position\n+        or else Attr_Id = Attribute_Descriptor_Size\n+        or else Attr_Id = Attribute_First_Bit\n+        or else Attr_Id = Attribute_Last_Bit\n+        or else Attr_Id = Attribute_Length\n+        or else Attr_Id = Attribute_Max_Size_In_Storage_Elements\n+        or else Attr_Id = Attribute_Pos\n+        or else Attr_Id = Attribute_Position\n+        or else Attr_Id = Attribute_Range_Length\n+        or else Attr_Id = Attribute_Object_Size\n+        or else Attr_Id = Attribute_Size\n+        or else Attr_Id = Attribute_Value_Size\n+        or else Attr_Id = Attribute_VADS_Size\n+        or else Attr_Id = Attribute_Aft\n+        or else Attr_Id = Attribute_Max_Alignment_For_Allocation\n+      then\n+         Apply_Universal_Integer_Attribute_Checks (N);\n       end if;\n    end Expand_SPARK_Attribute_Reference;\n "}, {"sha": "61f6efe2397c5ff790314a32abfe407979512456", "filename": "gcc/ada/scos.ads", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d67bea9215e3d0ca6fb9dbd55124907a395f746/gcc%2Fada%2Fscos.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d67bea9215e3d0ca6fb9dbd55124907a395f746/gcc%2Fada%2Fscos.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscos.ads?ref=6d67bea9215e3d0ca6fb9dbd55124907a395f746", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2009-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2009-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -497,6 +497,11 @@ package SCOs is\n    --  Used to index values in this table. Values start at 1 and are assigned\n    --  sequentially as entries are constructed.\n \n+   Missing_Dep_Num : constant Nat := 0;\n+   --  Represents a dependency number for a dependency that is ignored. SCO\n+   --  information consumers use this to strip units that must be kept out of\n+   --  the coverage analysis.\n+\n    type SCO_Unit_Table_Entry is record\n       File_Name : String_Ptr;\n       --  Pointer to file name in ALI file\n@@ -505,7 +510,9 @@ package SCOs is\n       --  Index for the source file\n \n       Dep_Num : Nat;\n-      --  Dependency number in ALI file\n+      --  Dependency number in ALI file. This is a positive number when the\n+      --  dependency is actually available in the context, it is\n+      --  Missing_Dep_Num otherwise.\n \n       From : Nat;\n       --  Starting index in SCO_Table of SCO information for this unit"}, {"sha": "e2c65f15e0a66fcfe60bd9df7b415b6be31c3e2a", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d67bea9215e3d0ca6fb9dbd55124907a395f746/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d67bea9215e3d0ca6fb9dbd55124907a395f746/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=6d67bea9215e3d0ca6fb9dbd55124907a395f746", "patch": "@@ -9617,8 +9617,14 @@ package body Sem_Res is\n \n    begin\n       Set_Etype (N, Typ);\n+\n+      --  The lower bound should be in Typ. The higher bound can be in Typ's\n+      --  base type if the range is null. It may still be invalid if it is\n+      --  higher than the lower bound. This is checked later in the context in\n+      --  which the range appears.\n+\n       Resolve (L, Typ);\n-      Resolve (H, Typ);\n+      Resolve (H, Base_Type (Typ));\n \n       --  Check for inappropriate range on unordered enumeration type\n "}]}