{"sha": "82cea5e8bf532fda4f25f9a972154900978e3412", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJjZWE1ZThiZjUzMmZkYTRmMjVmOWE5NzIxNTQ5MDA5NzhlMzQxMg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-07-02T09:44:47Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-07-02T09:44:47Z"}, "message": "cfgexpand.c (pass_expand::execute): Deal specially with instructions to be inserted on single successor edge of the...\n\n\t* cfgexpand.c (pass_expand::execute): Deal specially with instructions\n\tto be inserted on single successor edge of the entry block.  Then call\n\tcommit_edge_insertions instead of inserting the instructions manually.\n\t* cfgrtl.c (commit_edge_insertions): Do not verify flow info during\n\tRTL expansion.\n\nFrom-SVN: r272929", "tree": {"sha": "c41d1055ed81e4be8123db769b4f56695e7168f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c41d1055ed81e4be8123db769b4f56695e7168f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82cea5e8bf532fda4f25f9a972154900978e3412", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82cea5e8bf532fda4f25f9a972154900978e3412", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82cea5e8bf532fda4f25f9a972154900978e3412", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82cea5e8bf532fda4f25f9a972154900978e3412/comments", "author": null, "committer": null, "parents": [{"sha": "2e2c9da012227ba12ce89b6a65179e6c830e7e4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e2c9da012227ba12ce89b6a65179e6c830e7e4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e2c9da012227ba12ce89b6a65179e6c830e7e4b"}], "stats": {"total": 51, "additions": 25, "deletions": 26}, "files": [{"sha": "c206ab6e839c163a4dfcc0aea46c9891bc5adcf3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82cea5e8bf532fda4f25f9a972154900978e3412/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82cea5e8bf532fda4f25f9a972154900978e3412/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=82cea5e8bf532fda4f25f9a972154900978e3412", "patch": "@@ -1,3 +1,11 @@\n+2019-07-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* cfgexpand.c (pass_expand::execute): Deal specially with instructions\n+\tto be inserted on single successor edge of the entry block.  Then call\n+\tcommit_edge_insertions instead of inserting the instructions manually.\n+\t* cfgrtl.c (commit_edge_insertions): Do not verify flow info during\n+\tRTL expansion.\n+\n 2019-07-02  Richard Biener  <rguenther@suse.de>\n \n \t* tree-core.h (enum tree_index): Add TI_CHREC_DONT_KNOW and"}, {"sha": "1e84d2c4a4efd5927b02766fb95dd94068752074", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 15, "deletions": 25, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82cea5e8bf532fda4f25f9a972154900978e3412/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82cea5e8bf532fda4f25f9a972154900978e3412/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=82cea5e8bf532fda4f25f9a972154900978e3412", "patch": "@@ -6576,37 +6576,27 @@ pass_expand::execute (function *fun)\n      split edges which edge insertions might do.  */\n   rebuild_jump_labels (get_insns ());\n \n-  FOR_BB_BETWEEN (bb, ENTRY_BLOCK_PTR_FOR_FN (fun),\n-\t\t  EXIT_BLOCK_PTR_FOR_FN (fun), next_bb)\n+  /* If we have a single successor to the entry block, put the pending insns\n+     after parm birth, but before NOTE_INSNS_FUNCTION_BEG.  */\n+  if (single_succ_p (ENTRY_BLOCK_PTR_FOR_FN (fun)))\n     {\n-      edge e;\n-      edge_iterator ei;\n-      for (ei = ei_start (bb->succs); (e = ei_safe_edge (ei)); )\n+      edge e = single_succ_edge (ENTRY_BLOCK_PTR_FOR_FN (fun));\n+      if (e->insns.r)\n \t{\n-\t  if (e->insns.r)\n-\t    {\n-\t      rebuild_jump_labels_chain (e->insns.r);\n-\t      /* Put insns after parm birth, but before\n-\t\t NOTE_INSNS_FUNCTION_BEG.  */\n-\t      if (e->src == ENTRY_BLOCK_PTR_FOR_FN (fun)\n-\t\t  && single_succ_p (ENTRY_BLOCK_PTR_FOR_FN (fun)))\n-\t\t{\n-\t\t  rtx_insn *insns = e->insns.r;\n-\t\t  e->insns.r = NULL;\n-\t\t  if (NOTE_P (parm_birth_insn)\n-\t\t      && NOTE_KIND (parm_birth_insn) == NOTE_INSN_FUNCTION_BEG)\n-\t\t    emit_insn_before_noloc (insns, parm_birth_insn, e->dest);\n-\t\t  else\n-\t\t    emit_insn_after_noloc (insns, parm_birth_insn, e->dest);\n-\t\t}\n-\t      else\n-\t\tcommit_one_edge_insertion (e);\n-\t    }\n+\t  rtx_insn *insns = e->insns.r;\n+\t  e->insns.r = NULL;\n+\t  rebuild_jump_labels_chain (insns);\n+\t  if (NOTE_P (parm_birth_insn)\n+\t      && NOTE_KIND (parm_birth_insn) == NOTE_INSN_FUNCTION_BEG)\n+\t    emit_insn_before_noloc (insns, parm_birth_insn, e->dest);\n \t  else\n-\t    ei_next (&ei);\n+\t    emit_insn_after_noloc (insns, parm_birth_insn, e->dest);\n \t}\n     }\n \n+  /* Otherwise, as well as for other edges, take the usual way.  */\n+  commit_edge_insertions ();\n+\n   /* We're done expanding trees to RTL.  */\n   currently_expanding_to_rtl = 0;\n "}, {"sha": "fb0350daa97ade22dca884087e85b51d46830224", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82cea5e8bf532fda4f25f9a972154900978e3412/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82cea5e8bf532fda4f25f9a972154900978e3412/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=82cea5e8bf532fda4f25f9a972154900978e3412", "patch": "@@ -2105,7 +2105,8 @@ commit_edge_insertions (void)\n      which will be done by fixup_partitions.  */\n   fixup_partitions ();\n \n-  checking_verify_flow_info ();\n+  if (!currently_expanding_to_rtl)\n+    checking_verify_flow_info ();\n \n   FOR_BB_BETWEEN (bb, ENTRY_BLOCK_PTR_FOR_FN (cfun),\n \t\t  EXIT_BLOCK_PTR_FOR_FN (cfun), next_bb)"}]}