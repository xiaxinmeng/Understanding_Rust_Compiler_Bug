{"sha": "ea5062978941d6157696c0d23b18b4342e747aca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE1MDYyOTc4OTQxZDYxNTc2OTZjMGQyM2IxOGI0MzQyZTc0N2FjYQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2004-09-20T17:25:39Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2004-09-20T17:25:39Z"}, "message": "s390.c (s390_frame_info): Added alignment statement for floating point register area on stack.\n\n2004-09-20  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* config/s390/s390.c (s390_frame_info): Added alignment statement for\n\tfloating point register area on stack.\n\nFrom-SVN: r87765", "tree": {"sha": "55ed6551a46e0699037e3bcf5ed66b3148d33a8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55ed6551a46e0699037e3bcf5ed66b3148d33a8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea5062978941d6157696c0d23b18b4342e747aca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea5062978941d6157696c0d23b18b4342e747aca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea5062978941d6157696c0d23b18b4342e747aca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea5062978941d6157696c0d23b18b4342e747aca/comments", "author": null, "committer": null, "parents": [{"sha": "da89fba81fb25d870e75ebf454862752a8562f4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da89fba81fb25d870e75ebf454862752a8562f4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da89fba81fb25d870e75ebf454862752a8562f4c"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "39dc5aabc7028a2a3437dc467ae3d7d344621a5b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5062978941d6157696c0d23b18b4342e747aca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5062978941d6157696c0d23b18b4342e747aca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea5062978941d6157696c0d23b18b4342e747aca", "patch": "@@ -1,3 +1,8 @@\n+2004-09-20  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* config/s390/s390.c (s390_frame_info): Added alignment statement for\n+\tfloating point register area on stack.\n+\n 2004-09-20  Jakub Jelinek  <jakub@redhat.com>\n \n \t* predict.c (expr_expected_value): Use *_CLASS_P macros."}, {"sha": "2dd515b95cb007c89d7573639f55b33758aa8540", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5062978941d6157696c0d23b18b4342e747aca/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5062978941d6157696c0d23b18b4342e747aca/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=ea5062978941d6157696c0d23b18b4342e747aca", "patch": "@@ -5958,8 +5958,11 @@ s390_frame_info (int base_used, int return_addr_used)\n \t}\n       else\n \t{\n+\t  /* On 31 bit we have to care about alignment of the\n+\t     floating point regs to provide fastest access.  */\n \t  cfun_frame_layout.f0_offset \n-\t    = (cfun_frame_layout.gprs_offset\n+\t    = ((cfun_frame_layout.gprs_offset \n+\t\t& ~(STACK_BOUNDARY / BITS_PER_UNIT - 1))\n \t       - 8 * (cfun_fpr_bit_p (0) + cfun_fpr_bit_p (1)));\n \t  \n \t  cfun_frame_layout.f4_offset \n@@ -5996,7 +5999,9 @@ s390_frame_info (int base_used, int return_addr_used)\n     {\n       cfun_frame_layout.frame_size += (cfun_frame_layout.save_backchain_p\n \t\t\t\t       * UNITS_PER_WORD);\n-      \n+\n+      /* No alignment trouble here because f8-f15 are only saved under \n+\t 64 bit.  */\n       cfun_frame_layout.f8_offset = (MIN (MIN (cfun_frame_layout.f0_offset,\n \t\t\t\t\t       cfun_frame_layout.f4_offset),\n \t\t\t\t\t  cfun_frame_layout.gprs_offset)\n@@ -6009,6 +6014,9 @@ s390_frame_info (int base_used, int return_addr_used)\n \t  cfun_frame_layout.frame_size += 8;\n       \n       cfun_frame_layout.frame_size += cfun_gprs_save_area_size;\n+      \n+      /* If under 31 bit an odd number of gprs has to be saved we have to adjust\n+\t the frame size to sustain 8 byte alignment of stack frames.  */\n       cfun_frame_layout.frame_size = ((cfun_frame_layout.frame_size +\n \t\t\t\t       STACK_BOUNDARY / BITS_PER_UNIT - 1)\n \t\t\t\t      & ~(STACK_BOUNDARY / BITS_PER_UNIT - 1));\n@@ -7150,6 +7158,10 @@ s390_gimplify_va_arg (tree valist, tree type, tree *pre_p,\n       indirect_p = 1;\n       reg = gpr;\n       n_reg = 1;\n+\n+      /* TARGET_KERNEL_BACKCHAIN on 31 bit: It is assumed here that no padding\n+\t will be added by s390_frame_info because for va_args always an even\n+\t number of gprs has to be saved r15-r2 = 14 regs.  */\n       sav_ofs = (TARGET_KERNEL_BACKCHAIN\n \t\t ? (TARGET_64BIT ? 4 : 2) * 8 : 2 * UNITS_PER_WORD);\n       sav_scale = UNITS_PER_WORD;\n@@ -7185,6 +7197,10 @@ s390_gimplify_va_arg (tree valist, tree type, tree *pre_p,\n       indirect_p = 0;\n       reg = gpr;\n       n_reg = (size + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n+\n+      /* TARGET_KERNEL_BACKCHAIN on 31 bit: It is assumed here that no padding\n+\twill be added by s390_frame_info because for va_args always an even\n+\tnumber of gprs has to be saved r15-r2 = 14 regs.  */\n       sav_ofs = TARGET_KERNEL_BACKCHAIN ? \n \t(TARGET_64BIT ? 4 : 2) * 8 : 2*UNITS_PER_WORD;\n "}]}