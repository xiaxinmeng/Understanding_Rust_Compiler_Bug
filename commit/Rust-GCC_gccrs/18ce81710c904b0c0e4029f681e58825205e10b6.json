{"sha": "18ce81710c904b0c0e4029f681e58825205e10b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThjZTgxNzEwYzkwNGIwYzBlNDAyOWY2ODFlNTg4MjUyMDVlMTBiNg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-04-02T15:13:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-04-02T15:13:45Z"}, "message": "re PR middle-end/52756 (255.vortex in SPEC CPU 2000 failed to build)\n\n2012-04-02  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/52756\n\t* tree-ssa-threadupdate.c (def_split_header_continue_p): New function.\n\t(thread_through_loop_header): After threading through the loop latch\n\tremove the split part from the loop and clear further threading\n\topportunities that would create a multiple entry loop.\n\n\t* gcc.dg/torture/pr52756.c: New testcase.\n\nFrom-SVN: r186085", "tree": {"sha": "12cfedd860ac2a60929d04de3b2faa9c19e70e6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12cfedd860ac2a60929d04de3b2faa9c19e70e6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18ce81710c904b0c0e4029f681e58825205e10b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18ce81710c904b0c0e4029f681e58825205e10b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18ce81710c904b0c0e4029f681e58825205e10b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18ce81710c904b0c0e4029f681e58825205e10b6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "64f07b66421dde455fed25b2fe4f830b642baf50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64f07b66421dde455fed25b2fe4f830b642baf50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64f07b66421dde455fed25b2fe4f830b642baf50"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "2d4fb1d49d41e1e55483be1fd666752ff6324396", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18ce81710c904b0c0e4029f681e58825205e10b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18ce81710c904b0c0e4029f681e58825205e10b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=18ce81710c904b0c0e4029f681e58825205e10b6", "patch": "@@ -1,3 +1,11 @@\n+2012-04-02  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/52756\n+\t* tree-ssa-threadupdate.c (def_split_header_continue_p): New function.\n+\t(thread_through_loop_header): After threading through the loop latch\n+\tremove the split part from the loop and clear further threading\n+\topportunities that would create a multiple entry loop.\n+\n 2012-04-02  Richard Guenther  <rguenther@suse.de>\n \n \tPR rtl-optimization/52800"}, {"sha": "a10bea7efce59e8a981aee8787db56fda9e5d37f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18ce81710c904b0c0e4029f681e58825205e10b6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18ce81710c904b0c0e4029f681e58825205e10b6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=18ce81710c904b0c0e4029f681e58825205e10b6", "patch": "@@ -1,3 +1,8 @@\n+2012-04-02  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/52756\n+\t* gcc.dg/torture/pr52756.c: New testcase.\n+\n 2012-04-02  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/52803"}, {"sha": "175b414e17d5bd25bdd5aebf2ea19a6d8d2d0003", "filename": "gcc/testsuite/gcc.dg/torture/pr52756.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18ce81710c904b0c0e4029f681e58825205e10b6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr52756.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18ce81710c904b0c0e4029f681e58825205e10b6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr52756.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr52756.c?ref=18ce81710c904b0c0e4029f681e58825205e10b6", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+\n+void Env_FetchObj0AttrOffset (unsigned int NumFields,  int *Status)\n+{\n+  int Found = 0;\n+  if (NumFields)      \n+    while ((*Status == 0) && NumFields-- > 0 && Found == 0)       \n+      Found = 1;\n+}"}, {"sha": "000bd3f2e4014cd6376fceb692543a091704eeac", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18ce81710c904b0c0e4029f681e58825205e10b6/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18ce81710c904b0c0e4029f681e58825205e10b6/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=18ce81710c904b0c0e4029f681e58825205e10b6", "patch": "@@ -826,6 +826,17 @@ determine_bb_domination_status (struct loop *loop, basic_block bb)\n   return (bb_reachable ? DOMST_DOMINATING : DOMST_LOOP_BROKEN);\n }\n \n+/* Return true if BB is part of the new pre-header that is created\n+   when threading the latch to DATA.  */\n+\n+static bool\n+def_split_header_continue_p (const_basic_block bb, const void *data)\n+{\n+  const_basic_block new_header = (const_basic_block) data;\n+  return (bb->loop_father == new_header->loop_father\n+\t  && bb != new_header);\n+}\n+\n /* Thread jumps through the header of LOOP.  Returns true if cfg changes.\n    If MAY_PEEL_LOOP_HEADERS is false, we avoid threading from entry edges\n    to the inside of the loop.  */\n@@ -990,11 +1001,46 @@ thread_through_loop_header (struct loop *loop, bool may_peel_loop_headers)\n \n   if (latch->aux)\n     {\n+      basic_block *bblocks;\n+      unsigned nblocks, i;\n+\n       /* First handle the case latch edge is redirected.  */\n       loop->latch = thread_single_edge (latch);\n       gcc_assert (single_succ (loop->latch) == tgt_bb);\n       loop->header = tgt_bb;\n \n+      /* Remove the new pre-header blocks from our loop.  */\n+      bblocks = XCNEWVEC (basic_block, loop->num_nodes);\n+      nblocks = dfs_enumerate_from (header, 0, def_split_header_continue_p,\n+\t\t\t\t    bblocks, loop->num_nodes, tgt_bb);\n+      for (i = 0; i < nblocks; i++)\n+\t{\n+\t  remove_bb_from_loops (bblocks[i]);\n+\t  add_bb_to_loop (bblocks[i], loop_outer (loop));\n+\t}\n+      free (bblocks);\n+\n+      /* Cancel remaining threading requests that would make the\n+\t loop a multiple entry loop.  */\n+      FOR_EACH_EDGE (e, ei, header->preds)\n+\t{\n+\t  edge e2;\n+\t  if (e->aux == NULL)\n+\t    continue;\n+\n+\t  if (THREAD_TARGET2 (e))\n+\t    e2 = THREAD_TARGET2 (e);\n+\t  else\n+\t    e2 = THREAD_TARGET (e);\n+\n+\t  if (e->src->loop_father != e2->dest->loop_father\n+\t      && e2->dest != loop->header)\n+\t    {\n+\t      free (e->aux);\n+\t      e->aux = NULL;\n+\t    }\n+\t}\n+\n       /* Thread the remaining edges through the former header.  */\n       thread_block (header, false);\n     }"}]}