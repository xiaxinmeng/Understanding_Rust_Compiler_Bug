{"sha": "1edaa8b7e8213a4c89a84e3ea986257d726b39bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVkYWE4YjdlODIxM2E0Yzg5YTg0ZTNlYTk4NjI1N2Q3MjZiMzliZg==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2012-02-29T11:07:01Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2012-02-29T11:07:01Z"}, "message": "avr.md (eqne): New code iterator.\n\n\t* config/avr/avr.md (eqne): New code iterator.\n\t(*dec-and-branchsi): Use it in text peephole's condition.\n\t(*dec-and-branchhi): Ditto.\n\t(*dec-and-branchqi): Ditto.\n\nFrom-SVN: r184658", "tree": {"sha": "b3c06a7a5196c047972d11399b2694a4166e96ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3c06a7a5196c047972d11399b2694a4166e96ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1edaa8b7e8213a4c89a84e3ea986257d726b39bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1edaa8b7e8213a4c89a84e3ea986257d726b39bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1edaa8b7e8213a4c89a84e3ea986257d726b39bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1edaa8b7e8213a4c89a84e3ea986257d726b39bf/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e80cd3b096fc45eb94b332e612052d402d98699d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e80cd3b096fc45eb94b332e612052d402d98699d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e80cd3b096fc45eb94b332e612052d402d98699d"}], "stats": {"total": 620, "additions": 324, "deletions": 296}, "files": [{"sha": "24deed38bc38bd8ab5f65e6b5dfa603efde086b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1edaa8b7e8213a4c89a84e3ea986257d726b39bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1edaa8b7e8213a4c89a84e3ea986257d726b39bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1edaa8b7e8213a4c89a84e3ea986257d726b39bf", "patch": "@@ -1,3 +1,14 @@\n+2012-02-29  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* config/avr/avr.md: Untabify.\n+\n+2012-02-29  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* config/avr/avr.md (eqne): New code iterator.\n+\t(*dec-and-branchsi): Use it in text peephole's condition.\n+\t(*dec-and-branchhi): Ditto.\n+\t(*dec-and-branchqi): Ditto.\n+\n 2012-02-29  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/49939"}, {"sha": "73f273f69471e0bccf289ef16b2b7464b8bbdd35", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 313, "deletions": 296, "changes": 609, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1edaa8b7e8213a4c89a84e3ea986257d726b39bf/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1edaa8b7e8213a4c89a84e3ea986257d726b39bf/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=1edaa8b7e8213a4c89a84e3ea986257d726b39bf", "patch": "@@ -49,14 +49,14 @@\n \n \n (define_constants\n-  [(REG_X\t26)\n-   (REG_Y\t28)\n-   (REG_Z\t30)\n-   (REG_W\t24)\n-   (REG_SP\t32)\n-   (LPM_REGNO\t0)\t; implicit target register of LPM\n-   (TMP_REGNO\t0)\t; temporary register r0\n-   (ZERO_REGNO\t1)\t; zero register r1\n+  [(REG_X       26)\n+   (REG_Y       28)\n+   (REG_Z       30)\n+   (REG_W       24)\n+   (REG_SP      32)\n+   (LPM_REGNO   0)      ; implicit target register of LPM\n+   (TMP_REGNO   0)      ; temporary register r0\n+   (ZERO_REGNO  1)      ; zero register r1\n    ])\n \n (define_c_enum \"unspec\"\n@@ -123,10 +123,10 @@\n                                               (const_int 2043)))\n                                      (const_int 3)\n                                      (const_int 4)))\n-\t (eq_attr \"type\" \"xcall\")\n-\t (if_then_else (match_test \"!AVR_HAVE_JMP_CALL\")\n-\t\t       (const_int 1)\n-\t\t       (const_int 2))]\n+         (eq_attr \"type\" \"xcall\")\n+         (if_then_else (match_test \"!AVR_HAVE_JMP_CALL\")\n+                       (const_int 1)\n+                       (const_int 2))]\n         (const_int 2)))\n \n ;; Lengths of several insns are adjusted in avr.c:adjust_insn_length().\n@@ -232,6 +232,7 @@\n (define_code_iterator any_extend2 [sign_extend zero_extend])\n \n (define_code_iterator xior [xor ior])\n+(define_code_iterator eqne [eq ne])\n \n ;; Define code attributes\n (define_code_attr extend_su\n@@ -271,13 +272,13 @@\n \n (define_expand \"nonlocal_goto_receiver\"\n   [(set (reg:HI REG_Y) \n-\t(unspec_volatile:HI [(const_int 0)] UNSPECV_GOTO_RECEIVER))]\n+        (unspec_volatile:HI [(const_int 0)] UNSPECV_GOTO_RECEIVER))]\n   \"\"\n   {\n     emit_move_insn (virtual_stack_vars_rtx, \n-\t\t    gen_rtx_PLUS (Pmode, hard_frame_pointer_rtx, \n-\t\t\t\t  gen_int_mode (STARTING_FRAME_OFFSET,\n-\t\t\t\t\t\tPmode)));\n+                    gen_rtx_PLUS (Pmode, hard_frame_pointer_rtx, \n+                                  gen_int_mode (STARTING_FRAME_OFFSET,\n+                                                Pmode)));\n   /* This might change the hard frame pointer in ways that aren't\n     apparent to early optimization passes, so force a clobber.  */\n     emit_clobber (hard_frame_pointer_rtx);\n@@ -342,7 +343,7 @@\n     {\n       rtx part = simplify_gen_subreg (QImode, operands[0], <MODE>mode, i);\n       if (part != const0_rtx)\n-\tpart = force_reg (QImode, part);\n+        part = force_reg (QImode, part);\n       emit_insn (gen_pushqi1 (part));\n     }\n   DONE;\n@@ -566,7 +567,7 @@\n \n (define_insn \"*reload_inqi\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=l\")\n-\t(match_operand:QI 1 \"immediate_operand\" \"i\"))\n+        (match_operand:QI 1 \"immediate_operand\" \"i\"))\n    (clobber (match_operand:QI 2 \"register_operand\" \"=&d\"))]\n   \"reload_completed\"\n   \"ldi %2,lo8(%1)\n@@ -577,12 +578,12 @@\n (define_peephole2\n   [(match_scratch:QI 2 \"d\")\n    (set (match_operand:QI 0 \"l_register_operand\" \"\")\n-\t(match_operand:QI 1 \"immediate_operand\" \"\"))]\n+        (match_operand:QI 1 \"immediate_operand\" \"\"))]\n   \"(operands[1] != const0_rtx\n     && operands[1] != const1_rtx\n     && operands[1] != constm1_rtx)\"\n   [(parallel [(set (match_dup 0) (match_dup 1))\n-\t      (clobber (match_dup 2))])]\n+              (clobber (match_dup 2))])]\n   \"\")\n \n ;;============================================================================\n@@ -619,7 +620,7 @@\n   \"(operands[1] != const0_rtx \n     && operands[1] != constm1_rtx)\"\n   [(parallel [(set (match_dup 0) (match_dup 1))\n-\t      (clobber (match_dup 2))])]\n+              (clobber (match_dup 2))])]\n   \"\")\n \n ;; '*' because it is not used in rtl generation, only in above peephole\n@@ -722,7 +723,7 @@\n    && operands[1] != constm1_rtx\"\n   [(parallel [(set (match_dup 0)\n                    (match_dup 1))\n-\t      (clobber (match_dup 2))])]\n+              (clobber (match_dup 2))])]\n   \"\")\n   \n ;; '*' because it is not used in rtl generation.\n@@ -762,7 +763,7 @@\n   \"(operands[1] != const0_rtx\n     && operands[1] != constm1_rtx)\"\n   [(parallel [(set (match_dup 0) (match_dup 1))\n-\t      (clobber (match_dup 2))])]\n+              (clobber (match_dup 2))])]\n   \"\")\n \n ;; '*' because it is not used in rtl generation.\n@@ -1016,8 +1017,8 @@\n \n (define_expand \"addhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"\")\n-\t(plus:HI (match_operand:HI 1 \"register_operand\" \"\")\n-\t\t (match_operand:HI 2 \"nonmemory_operand\" \"\")))]\n+        (plus:HI (match_operand:HI 1 \"register_operand\" \"\")\n+                 (match_operand:HI 2 \"nonmemory_operand\" \"\")))]\n   \"\"\n   {\n     if (CONST_INT_P (operands[2]))\n@@ -1297,7 +1298,7 @@\n (define_insn \"subhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,d\")\n         (minus:HI (match_operand:HI 1 \"register_operand\" \"0,0\")\n-\t\t  (match_operand:HI 2 \"nonmemory_operand\" \"r,i\")))]\n+                  (match_operand:HI 2 \"nonmemory_operand\" \"r,i\")))]\n   \"\"\n   \"@\n \tsub %A0,%A2\\;sbc %B0,%B2\n@@ -1359,8 +1360,8 @@\n \n (define_expand \"mulqi3\"\n   [(set (match_operand:QI 0 \"register_operand\" \"\")\n-\t(mult:QI (match_operand:QI 1 \"register_operand\" \"\")\n-\t\t (match_operand:QI 2 \"register_operand\" \"\")))]\n+        (mult:QI (match_operand:QI 1 \"register_operand\" \"\")\n+                 (match_operand:QI 2 \"register_operand\" \"\")))]\n   \"\"\n   {\n     if (!AVR_HAVE_MUL)\n@@ -1372,8 +1373,8 @@\n \n (define_insn \"*mulqi3_enh\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n-\t(mult:QI (match_operand:QI 1 \"register_operand\" \"r\")\n-\t\t (match_operand:QI 2 \"register_operand\" \"r\")))]\n+        (mult:QI (match_operand:QI 1 \"register_operand\" \"r\")\n+                 (match_operand:QI 2 \"register_operand\" \"r\")))]\n   \"AVR_HAVE_MUL\"\n   \"mul %1,%2\n \tmov %0,r0\n@@ -1385,7 +1386,7 @@\n   [(set (reg:QI 24) (match_operand:QI 1 \"register_operand\" \"\"))\n    (set (reg:QI 22) (match_operand:QI 2 \"register_operand\" \"\"))\n    (parallel [(set (reg:QI 24) (mult:QI (reg:QI 24) (reg:QI 22)))\n-\t      (clobber (reg:QI 22))])\n+              (clobber (reg:QI 22))])\n    (set (match_operand:QI 0 \"register_operand\" \"\") (reg:QI 24))]\n   \"\"\n   \"\")\n@@ -2068,8 +2069,8 @@\n \n (define_insn \"*mulhi3_enh\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=&r\")\n-\t(mult:HI (match_operand:HI 1 \"register_operand\" \"r\")\n-\t\t (match_operand:HI 2 \"register_operand\" \"r\")))]\n+        (mult:HI (match_operand:HI 1 \"register_operand\" \"r\")\n+                 (match_operand:HI 2 \"register_operand\" \"r\")))]\n   \"AVR_HAVE_MUL\"\n   {\n     return REGNO (operands[1]) == REGNO (operands[2])\n@@ -2083,8 +2084,8 @@\n   [(set (reg:HI 24) (match_operand:HI 1 \"register_operand\" \"\"))\n    (set (reg:HI 22) (match_operand:HI 2 \"register_operand\" \"\"))\n    (parallel [(set (reg:HI 24) (mult:HI (reg:HI 24) (reg:HI 22)))\n-\t      (clobber (reg:HI 22))\n-\t      (clobber (reg:QI 21))])\n+              (clobber (reg:HI 22))\n+              (clobber (reg:QI 21))])\n    (set (match_operand:HI 0 \"register_operand\" \"\") (reg:HI 24))]\n   \"\"\n   \"\")\n@@ -2445,9 +2446,9 @@\n   [(set (reg:QI 24) (match_dup 1))\n    (set (reg:QI 22) (match_dup 2))\n    (parallel [(set (reg:QI 24) (div:QI (reg:QI 24) (reg:QI 22)))\n-\t      (set (reg:QI 25) (mod:QI (reg:QI 24) (reg:QI 22)))\n-\t      (clobber (reg:QI 22))\n-\t      (clobber (reg:QI 23))])\n+              (set (reg:QI 25) (mod:QI (reg:QI 24) (reg:QI 22)))\n+              (clobber (reg:QI 22))\n+              (clobber (reg:QI 23))])\n    (set (match_dup 0) (reg:QI 24))\n    (set (match_dup 3) (reg:QI 25))]\n   \"\")\n@@ -2466,7 +2467,7 @@\n  [(parallel [(set (match_operand:QI 0 \"pseudo_register_operand\" \"\") \n                   (udiv:QI (match_operand:QI 1 \"pseudo_register_operand\" \"\") \n                            (match_operand:QI 2 \"pseudo_register_operand\" \"\")))\n-\t     (set (match_operand:QI 3 \"pseudo_register_operand\" \"\") \n+             (set (match_operand:QI 3 \"pseudo_register_operand\" \"\") \n                   (umod:QI (match_dup 1) (match_dup 2)))\n              (clobber (reg:QI 22))\n              (clobber (reg:QI 23))\n@@ -2478,8 +2479,8 @@\n   [(set (reg:QI 24) (match_dup 1))\n    (set (reg:QI 22) (match_dup 2))\n    (parallel [(set (reg:QI 24) (udiv:QI (reg:QI 24) (reg:QI 22)))\n-\t      (set (reg:QI 25) (umod:QI (reg:QI 24) (reg:QI 22)))\n-\t      (clobber (reg:QI 23))])\n+              (set (reg:QI 25) (umod:QI (reg:QI 24) (reg:QI 22)))\n+              (clobber (reg:QI 23))])\n    (set (match_dup 0) (reg:QI 24))\n    (set (match_dup 3) (reg:QI 25))]\n   \"\")\n@@ -2509,9 +2510,9 @@\n   [(set (reg:HI 24) (match_dup 1))\n    (set (reg:HI 22) (match_dup 2))\n    (parallel [(set (reg:HI 22) (div:HI (reg:HI 24) (reg:HI 22)))\n-\t      (set (reg:HI 24) (mod:HI (reg:HI 24) (reg:HI 22)))\n-\t      (clobber (reg:HI 26))\n-\t      (clobber (reg:QI 21))])\n+              (set (reg:HI 24) (mod:HI (reg:HI 24) (reg:HI 22)))\n+              (clobber (reg:HI 26))\n+              (clobber (reg:QI 21))])\n    (set (match_dup 0) (reg:HI 22))\n    (set (match_dup 3) (reg:HI 24))]\n   \"\") \n@@ -2530,7 +2531,7 @@\n   [(parallel [(set (match_operand:HI 0 \"pseudo_register_operand\" \"\") \n                    (udiv:HI (match_operand:HI 1 \"pseudo_register_operand\" \"\")\n                             (match_operand:HI 2 \"pseudo_register_operand\" \"\")))\n-\t      (set (match_operand:HI 3 \"pseudo_register_operand\" \"\") \n+              (set (match_operand:HI 3 \"pseudo_register_operand\" \"\") \n                    (umod:HI (match_dup 1) (match_dup 2)))\n               (clobber (reg:QI 21))\n               (clobber (reg:HI 22))\n@@ -2542,9 +2543,9 @@\n   [(set (reg:HI 24) (match_dup 1))\n    (set (reg:HI 22) (match_dup 2))\n    (parallel [(set (reg:HI 22) (udiv:HI (reg:HI 24) (reg:HI 22)))\n-\t      (set (reg:HI 24) (umod:HI (reg:HI 24) (reg:HI 22)))\n-\t      (clobber (reg:HI 26))\n-\t      (clobber (reg:QI 21))])\n+              (set (reg:HI 24) (umod:HI (reg:HI 24) (reg:HI 22)))\n+              (clobber (reg:HI 26))\n+              (clobber (reg:QI 21))])\n    (set (match_dup 0) (reg:HI 22))\n    (set (match_dup 3) (reg:HI 24))]\n   \"\")\n@@ -2775,9 +2776,9 @@\n   [(set (reg:SI 22) (match_dup 1))\n    (set (reg:SI 18) (match_dup 2))\n    (parallel [(set (reg:SI 18) (div:SI (reg:SI 22) (reg:SI 18)))\n-\t      (set (reg:SI 22) (mod:SI (reg:SI 22) (reg:SI 18)))\n-\t      (clobber (reg:HI 26))\n-\t      (clobber (reg:HI 30))])\n+              (set (reg:SI 22) (mod:SI (reg:SI 22) (reg:SI 18)))\n+              (clobber (reg:HI 26))\n+              (clobber (reg:HI 30))])\n    (set (match_dup 0) (reg:SI 18))\n    (set (match_dup 3) (reg:SI 22))]\n   \"\")\n@@ -2808,9 +2809,9 @@\n   [(set (reg:SI 22) (match_dup 1))\n    (set (reg:SI 18) (match_dup 2))\n    (parallel [(set (reg:SI 18) (udiv:SI (reg:SI 22) (reg:SI 18)))\n-\t      (set (reg:SI 22) (umod:SI (reg:SI 22) (reg:SI 18)))\n-\t      (clobber (reg:HI 26))\n-\t      (clobber (reg:HI 30))])\n+              (set (reg:SI 22) (umod:SI (reg:SI 22) (reg:SI 18)))\n+              (clobber (reg:HI 26))\n+              (clobber (reg:HI 30))])\n    (set (match_dup 0) (reg:SI 18))\n    (set (match_dup 3) (reg:SI 22))]\n   \"\")\n@@ -2897,10 +2898,10 @@\n (define_peephole2 ; andi\n   [(set (match_operand:QI 0 \"d_register_operand\" \"\")\n         (and:QI (match_dup 0)\n-\t        (match_operand:QI 1 \"const_int_operand\" \"\")))\n+                (match_operand:QI 1 \"const_int_operand\" \"\")))\n    (set (match_dup 0)\n         (and:QI (match_dup 0)\n-\t        (match_operand:QI 2 \"const_int_operand\" \"\")))]\n+                (match_operand:QI 2 \"const_int_operand\" \"\")))]\n   \"\"\n   [(set (match_dup 0) (and:QI (match_dup 0) (match_dup 1)))]\n   {\n@@ -3241,17 +3242,17 @@\n \n (define_split ; ashlqi3_const4\n   [(set (match_operand:QI 0 \"d_register_operand\" \"\")\n-\t(ashift:QI (match_dup 0)\n-\t\t   (const_int 4)))]\n+        (ashift:QI (match_dup 0)\n+                   (const_int 4)))]\n   \"\"\n   [(set (match_dup 0) (rotate:QI (match_dup 0) (const_int 4)))\n    (set (match_dup 0) (and:QI (match_dup 0) (const_int -16)))]\n   \"\")\n \n (define_split ; ashlqi3_const5\n   [(set (match_operand:QI 0 \"d_register_operand\" \"\")\n-\t(ashift:QI (match_dup 0)\n-\t\t   (const_int 5)))]\n+        (ashift:QI (match_dup 0)\n+                   (const_int 5)))]\n   \"\"\n   [(set (match_dup 0) (rotate:QI (match_dup 0) (const_int 4)))\n    (set (match_dup 0) (ashift:QI (match_dup 0) (const_int 1)))\n@@ -3260,8 +3261,8 @@\n \n (define_split ; ashlqi3_const6\n   [(set (match_operand:QI 0 \"d_register_operand\" \"\")\n-\t(ashift:QI (match_dup 0)\n-\t\t   (const_int 6)))]\n+        (ashift:QI (match_dup 0)\n+                   (const_int 6)))]\n   \"\"\n   [(set (match_dup 0) (rotate:QI (match_dup 0) (const_int 4)))\n    (set (match_dup 0) (ashift:QI (match_dup 0) (const_int 2)))\n@@ -3390,8 +3391,8 @@\n \n (define_peephole2 ; ashlqi3_l_const4\n   [(set (match_operand:QI 0 \"l_register_operand\" \"\")\n-\t(ashift:QI (match_dup 0)\n-\t\t   (const_int 4)))\n+        (ashift:QI (match_dup 0)\n+                   (const_int 4)))\n    (match_scratch:QI 1 \"d\")]\n   \"\"\n   [(set (match_dup 0) (rotate:QI (match_dup 0) (const_int 4)))\n@@ -3401,8 +3402,8 @@\n \n (define_peephole2 ; ashlqi3_l_const5\n   [(set (match_operand:QI 0 \"l_register_operand\" \"\")\n-\t(ashift:QI (match_dup 0)\n-\t\t   (const_int 5)))\n+        (ashift:QI (match_dup 0)\n+                   (const_int 5)))\n    (match_scratch:QI 1 \"d\")]\n   \"\"\n   [(set (match_dup 0) (rotate:QI (match_dup 0) (const_int 4)))\n@@ -3413,8 +3414,8 @@\n \n (define_peephole2 ; ashlqi3_l_const6\n   [(set (match_operand:QI 0 \"l_register_operand\" \"\")\n-\t(ashift:QI (match_dup 0)\n-\t\t   (const_int 6)))\n+        (ashift:QI (match_dup 0)\n+                   (const_int 6)))\n    (match_scratch:QI 1 \"d\")]\n   \"\"\n   [(set (match_dup 0) (rotate:QI (match_dup 0) (const_int 4)))\n@@ -3426,11 +3427,11 @@\n (define_peephole2\n   [(match_scratch:QI 3 \"d\")\n    (set (match_operand:HI 0 \"register_operand\" \"\")\n-\t(ashift:HI (match_operand:HI 1 \"register_operand\" \"\")\n-\t\t   (match_operand:QI 2 \"const_int_operand\" \"\")))]\n+        (ashift:HI (match_operand:HI 1 \"register_operand\" \"\")\n+                   (match_operand:QI 2 \"const_int_operand\" \"\")))]\n   \"\"\n   [(parallel [(set (match_dup 0) (ashift:HI (match_dup 1) (match_dup 2)))\n-\t      (clobber (match_dup 3))])]\n+              (clobber (match_dup 3))])]\n   \"\")\n \n (define_insn \"*ashlhi3_const\"\n@@ -3449,11 +3450,11 @@\n (define_peephole2\n   [(match_scratch:QI 3 \"d\")\n    (set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(ashift:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t   (match_operand:QI 2 \"const_int_operand\" \"\")))]\n+        (ashift:SI (match_operand:SI 1 \"register_operand\" \"\")\n+                   (match_operand:QI 2 \"const_int_operand\" \"\")))]\n   \"\"\n   [(parallel [(set (match_dup 0) (ashift:SI (match_dup 1) (match_dup 2)))\n-\t      (clobber (match_dup 3))])]\n+              (clobber (match_dup 3))])]\n   \"\")\n \n (define_insn \"*ashlsi3_const\"\n@@ -3564,11 +3565,11 @@\n (define_peephole2\n   [(match_scratch:QI 3 \"d\")\n    (set (match_operand:HI 0 \"register_operand\" \"\")\n-\t(ashiftrt:HI (match_operand:HI 1 \"register_operand\" \"\")\n-\t\t     (match_operand:QI 2 \"const_int_operand\" \"\")))]\n+        (ashiftrt:HI (match_operand:HI 1 \"register_operand\" \"\")\n+                     (match_operand:QI 2 \"const_int_operand\" \"\")))]\n   \"\"\n   [(parallel [(set (match_dup 0) (ashiftrt:HI (match_dup 1) (match_dup 2)))\n-\t      (clobber (match_dup 3))])]\n+              (clobber (match_dup 3))])]\n   \"\")\n \n (define_insn \"*ashrhi3_const\"\n@@ -3587,11 +3588,11 @@\n (define_peephole2\n   [(match_scratch:QI 3 \"d\")\n    (set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t     (match_operand:QI 2 \"const_int_operand\" \"\")))]\n+        (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"\")\n+                     (match_operand:QI 2 \"const_int_operand\" \"\")))]\n   \"\"\n   [(parallel [(set (match_dup 0) (ashiftrt:SI (match_dup 1) (match_dup 2)))\n-\t      (clobber (match_dup 3))])]\n+              (clobber (match_dup 3))])]\n   \"\")\n \n (define_insn \"*ashrsi3_const\"\n@@ -3617,17 +3618,17 @@\n \n (define_split\t; lshrqi3_const4\n   [(set (match_operand:QI 0 \"d_register_operand\" \"\")\n-\t(lshiftrt:QI (match_dup 0)\n-\t\t     (const_int 4)))]\n+        (lshiftrt:QI (match_dup 0)\n+                     (const_int 4)))]\n   \"\"\n   [(set (match_dup 0) (rotate:QI (match_dup 0) (const_int 4)))\n    (set (match_dup 0) (and:QI (match_dup 0) (const_int 15)))]\n   \"\")\n \n (define_split\t; lshrqi3_const5\n   [(set (match_operand:QI 0 \"d_register_operand\" \"\")\n-\t(lshiftrt:QI (match_dup 0)\n-\t\t     (const_int 5)))]\n+        (lshiftrt:QI (match_dup 0)\n+                     (const_int 5)))]\n   \"\"\n   [(set (match_dup 0) (rotate:QI (match_dup 0) (const_int 4)))\n    (set (match_dup 0) (lshiftrt:QI (match_dup 0) (const_int 1)))\n@@ -3636,8 +3637,8 @@\n \n (define_split\t; lshrqi3_const6\n   [(set (match_operand:QI 0 \"d_register_operand\" \"\")\n-\t(lshiftrt:QI (match_dup 0)\n-\t\t     (const_int 6)))]\n+        (lshiftrt:QI (match_dup 0)\n+                     (const_int 6)))]\n   \"\"\n   [(set (match_dup 0) (rotate:QI (match_dup 0) (const_int 4)))\n    (set (match_dup 0) (lshiftrt:QI (match_dup 0) (const_int 2)))\n@@ -3696,8 +3697,8 @@\n \n (define_peephole2 ; lshrqi3_l_const4\n   [(set (match_operand:QI 0 \"l_register_operand\" \"\")\n-\t(lshiftrt:QI (match_dup 0)\n-\t\t     (const_int 4)))\n+        (lshiftrt:QI (match_dup 0)\n+                     (const_int 4)))\n    (match_scratch:QI 1 \"d\")]\n   \"\"\n   [(set (match_dup 0) (rotate:QI (match_dup 0) (const_int 4)))\n@@ -3707,8 +3708,8 @@\n \n (define_peephole2 ; lshrqi3_l_const5\n   [(set (match_operand:QI 0 \"l_register_operand\" \"\")\n-\t(lshiftrt:QI (match_dup 0)\n-\t\t     (const_int 5)))\n+        (lshiftrt:QI (match_dup 0)\n+                     (const_int 5)))\n    (match_scratch:QI 1 \"d\")]\n   \"\"\n   [(set (match_dup 0) (rotate:QI (match_dup 0) (const_int 4)))\n@@ -3719,8 +3720,8 @@\n \n (define_peephole2 ; lshrqi3_l_const6\n   [(set (match_operand:QI 0 \"l_register_operand\" \"\")\n-\t(lshiftrt:QI (match_dup 0)\n-\t\t     (const_int 6)))\n+        (lshiftrt:QI (match_dup 0)\n+                     (const_int 6)))\n    (match_scratch:QI 1 \"d\")]\n   \"\"\n   [(set (match_dup 0) (rotate:QI (match_dup 0) (const_int 4)))\n@@ -3732,11 +3733,11 @@\n (define_peephole2\n   [(match_scratch:QI 3 \"d\")\n    (set (match_operand:HI 0 \"register_operand\" \"\")\n-\t(lshiftrt:HI (match_operand:HI 1 \"register_operand\" \"\")\n-\t\t     (match_operand:QI 2 \"const_int_operand\" \"\")))]\n+        (lshiftrt:HI (match_operand:HI 1 \"register_operand\" \"\")\n+                     (match_operand:QI 2 \"const_int_operand\" \"\")))]\n   \"\"\n   [(parallel [(set (match_dup 0) (lshiftrt:HI (match_dup 1) (match_dup 2)))\n-\t      (clobber (match_dup 3))])]\n+              (clobber (match_dup 3))])]\n   \"\")\n \n (define_insn \"*lshrhi3_const\"\n@@ -3755,11 +3756,11 @@\n (define_peephole2\n   [(match_scratch:QI 3 \"d\")\n    (set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t     (match_operand:QI 2 \"const_int_operand\" \"\")))]\n+        (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"\")\n+                     (match_operand:QI 2 \"const_int_operand\" \"\")))]\n   \"\"\n   [(parallel [(set (match_dup 0) (lshiftrt:SI (match_dup 1) (match_dup 2)))\n-\t      (clobber (match_dup 3))])]\n+              (clobber (match_dup 3))])]\n   \"\")\n \n (define_insn \"*lshrsi3_const\"\n@@ -4140,7 +4141,7 @@\n (define_insn \"*negated_tstqi\"\n   [(set (cc0)\n         (compare (neg:QI (match_operand:QI 0 \"register_operand\" \"r\"))\n-\t\t (const_int 0)))]\n+                 (const_int 0)))]\n   \"(!flag_wrapv && !flag_trapv && flag_strict_overflow)\"\n   \"cp __zero_reg__,%0\"\n   [(set_attr \"cc\" \"compare\")\n@@ -4149,7 +4150,7 @@\n (define_insn \"*reversed_tstqi\"\n   [(set (cc0)\n         (compare (const_int 0)\n-\t\t (match_operand:QI 0 \"register_operand\" \"r\")))]\n+                 (match_operand:QI 0 \"register_operand\" \"r\")))]\n   \"\"\n   \"cp __zero_reg__,%0\"\n [(set_attr \"cc\" \"compare\")\n@@ -4158,7 +4159,7 @@\n (define_insn \"*negated_tsthi\"\n   [(set (cc0)\n         (compare (neg:HI (match_operand:HI 0 \"register_operand\" \"r\"))\n-\t\t (const_int 0)))]\n+                 (const_int 0)))]\n   \"(!flag_wrapv && !flag_trapv && flag_strict_overflow)\"\n   \"cp __zero_reg__,%A0\n \tcpc __zero_reg__,%B0\"\n@@ -4170,7 +4171,7 @@\n (define_insn \"*reversed_tsthi\"\n   [(set (cc0)\n         (compare (const_int 0)\n-\t\t (match_operand:HI 0 \"register_operand\" \"r\")))\n+                 (match_operand:HI 0 \"register_operand\" \"r\")))\n    (clobber (match_scratch:QI 1 \"=X\"))]\n   \"\"\n   \"cp __zero_reg__,%A0\n@@ -4200,7 +4201,7 @@\n (define_insn \"*negated_tstsi\"\n   [(set (cc0)\n         (compare (neg:SI (match_operand:SI 0 \"register_operand\" \"r\"))\n-\t\t (const_int 0)))]\n+                 (const_int 0)))]\n   \"(!flag_wrapv && !flag_trapv && flag_strict_overflow)\"\n   \"cp __zero_reg__,%A0\n \tcpc __zero_reg__,%B0\n@@ -4212,7 +4213,7 @@\n (define_insn \"*reversed_tstsi\"\n   [(set (cc0)\n         (compare (const_int 0)\n-\t\t (match_operand:SI 0 \"register_operand\" \"r\")))\n+                 (match_operand:SI 0 \"register_operand\" \"r\")))\n    (clobber (match_scratch:QI 1 \"=X\"))]\n   \"\"\n   \"cp __zero_reg__,%A0\n@@ -4226,7 +4227,7 @@\n (define_insn \"*cmpqi\"\n   [(set (cc0)\n         (compare (match_operand:QI 0 \"register_operand\"  \"r,r,d\")\n-\t\t (match_operand:QI 1 \"nonmemory_operand\" \"L,r,i\")))]\n+                 (match_operand:QI 1 \"nonmemory_operand\" \"L,r,i\")))]\n   \"\"\n   \"@\n \ttst %0\n@@ -4331,9 +4332,9 @@\n \n (define_expand \"cbranchsi4\"\n   [(parallel [(set (cc0)\n-\t           (compare (match_operand:SI 1 \"register_operand\" \"\")\n-\t                    (match_operand:SI 2 \"nonmemory_operand\" \"\")))\n-\t      (clobber (match_scratch:QI 4 \"\"))])\n+                   (compare (match_operand:SI 1 \"register_operand\" \"\")\n+                            (match_operand:SI 2 \"nonmemory_operand\" \"\")))\n+              (clobber (match_scratch:QI 4 \"\"))])\n    (set (pc)\n         (if_then_else\n               (match_operator 0 \"ordered_comparison_operator\" [(cc0)\n@@ -4356,9 +4357,9 @@\n \n (define_expand \"cbranchhi4\"\n   [(parallel [(set (cc0)\n-\t           (compare (match_operand:HI 1 \"register_operand\" \"\")\n-\t                    (match_operand:HI 2 \"nonmemory_operand\" \"\")))\n-\t      (clobber (match_scratch:QI 4 \"\"))])\n+                   (compare (match_operand:HI 1 \"register_operand\" \"\")\n+                            (match_operand:HI 2 \"nonmemory_operand\" \"\")))\n+              (clobber (match_scratch:QI 4 \"\"))])\n    (set (pc)\n         (if_then_else\n               (match_operator 0 \"ordered_comparison_operator\" [(cc0)\n@@ -4387,25 +4388,25 @@\n (define_insn \"*sbrx_branch<mode>\"\n   [(set (pc)\n         (if_then_else\n-\t (match_operator 0 \"eqne_operator\"\n-\t\t\t [(zero_extract:QIDI\n-\t\t\t   (match_operand:VOID 1 \"register_operand\" \"r\")\n-\t\t\t   (const_int 1)\n-\t\t\t   (match_operand 2 \"const_int_operand\" \"n\"))\n-\t\t\t  (const_int 0)])\n-\t (label_ref (match_operand 3 \"\" \"\"))\n-\t (pc)))]\n+         (match_operator 0 \"eqne_operator\"\n+                         [(zero_extract:QIDI\n+                           (match_operand:VOID 1 \"register_operand\" \"r\")\n+                           (const_int 1)\n+                           (match_operand 2 \"const_int_operand\" \"n\"))\n+                          (const_int 0)])\n+         (label_ref (match_operand 3 \"\" \"\"))\n+         (pc)))]\n   \"\"\n   {\n     return avr_out_sbxx_branch (insn, operands);\n   }\n   [(set (attr \"length\")\n-\t(if_then_else (and (ge (minus (pc) (match_dup 3)) (const_int -2046))\n-\t\t\t   (le (minus (pc) (match_dup 3)) (const_int 2046)))\n-\t\t      (const_int 2)\n-\t\t      (if_then_else (match_test \"!AVR_HAVE_JMP_CALL\")\n-\t\t\t\t    (const_int 2)\n-\t\t\t\t    (const_int 4))))\n+        (if_then_else (and (ge (minus (pc) (match_dup 3)) (const_int -2046))\n+                           (le (minus (pc) (match_dup 3)) (const_int 2046)))\n+                      (const_int 2)\n+                      (if_then_else (match_test \"!AVR_HAVE_JMP_CALL\")\n+                                    (const_int 2)\n+                                    (const_int 4))))\n    (set_attr \"cc\" \"clobber\")])\n \n ;; Same test based on Bitwise AND RTL. Keep this incase gcc changes patterns.\n@@ -4415,13 +4416,13 @@\n (define_insn \"*sbrx_and_branch<mode>\"\n   [(set (pc)\n         (if_then_else\n-\t (match_operator 0 \"eqne_operator\"\n-\t\t\t [(and:QISI\n-\t\t\t   (match_operand:QISI 1 \"register_operand\" \"r\")\n-\t\t\t   (match_operand:QISI 2 \"single_one_operand\" \"n\"))\n-\t\t\t  (const_int 0)])\n-\t (label_ref (match_operand 3 \"\" \"\"))\n-\t (pc)))]\n+         (match_operator 0 \"eqne_operator\"\n+                         [(and:QISI\n+                           (match_operand:QISI 1 \"register_operand\" \"r\")\n+                           (match_operand:QISI 2 \"single_one_operand\" \"n\"))\n+                          (const_int 0)])\n+         (label_ref (match_operand 3 \"\" \"\"))\n+         (pc)))]\n   \"\"\n {\n     HOST_WIDE_INT bitnumber;\n@@ -4430,99 +4431,99 @@\n     return avr_out_sbxx_branch (insn, operands);\n }\n   [(set (attr \"length\")\n-\t(if_then_else (and (ge (minus (pc) (match_dup 3)) (const_int -2046))\n-\t\t\t   (le (minus (pc) (match_dup 3)) (const_int 2046)))\n-\t\t      (const_int 2)\n-\t\t      (if_then_else (match_test \"!AVR_HAVE_JMP_CALL\")\n-\t\t\t\t    (const_int 2)\n-\t\t\t\t    (const_int 4))))\n+        (if_then_else (and (ge (minus (pc) (match_dup 3)) (const_int -2046))\n+                           (le (minus (pc) (match_dup 3)) (const_int 2046)))\n+                      (const_int 2)\n+                      (if_then_else (match_test \"!AVR_HAVE_JMP_CALL\")\n+                                    (const_int 2)\n+                                    (const_int 4))))\n    (set_attr \"cc\" \"clobber\")])\n \n ;; Convert sign tests to bit 7/15/31 tests that match the above insns.\n (define_peephole2\n   [(set (cc0) (compare (match_operand:QI 0 \"register_operand\" \"\")\n-\t\t       (const_int 0)))\n+                       (const_int 0)))\n    (set (pc) (if_then_else (ge (cc0) (const_int 0))\n-\t\t\t   (label_ref (match_operand 1 \"\" \"\"))\n-\t\t\t   (pc)))]\n+                           (label_ref (match_operand 1 \"\" \"\"))\n+                           (pc)))]\n   \"\"\n   [(set (pc) (if_then_else (eq (zero_extract:HI (match_dup 0)\n-\t\t\t\t\t\t(const_int 1)\n-\t\t\t\t\t\t(const_int 7))\n-\t\t\t       (const_int 0))\n-\t\t\t   (label_ref (match_dup 1))\n-\t\t\t   (pc)))]\n+                                                (const_int 1)\n+                                                (const_int 7))\n+                               (const_int 0))\n+                           (label_ref (match_dup 1))\n+                           (pc)))]\n   \"\")\n \n (define_peephole2\n   [(set (cc0) (compare (match_operand:QI 0 \"register_operand\" \"\")\n-\t\t       (const_int 0)))\n+                       (const_int 0)))\n    (set (pc) (if_then_else (lt (cc0) (const_int 0))\n-\t\t\t   (label_ref (match_operand 1 \"\" \"\"))\n-\t\t\t   (pc)))]\n+                           (label_ref (match_operand 1 \"\" \"\"))\n+                           (pc)))]\n   \"\"\n   [(set (pc) (if_then_else (ne (zero_extract:HI (match_dup 0)\n-\t\t\t\t\t\t(const_int 1)\n-\t\t\t\t\t\t(const_int 7))\n-\t\t\t       (const_int 0))\n-\t\t\t   (label_ref (match_dup 1))\n-\t\t\t   (pc)))]\n+                                                (const_int 1)\n+                                                (const_int 7))\n+                               (const_int 0))\n+                           (label_ref (match_dup 1))\n+                           (pc)))]\n   \"\")\n \n (define_peephole2\n   [(parallel [(set (cc0) (compare (match_operand:HI 0 \"register_operand\" \"\")\n-\t\t\t \t  (const_int 0)))\n-\t      (clobber (match_operand:HI 2 \"\"))])\n+                                  (const_int 0)))\n+              (clobber (match_operand:HI 2 \"\"))])\n    (set (pc) (if_then_else (ge (cc0) (const_int 0))\n-\t\t\t   (label_ref (match_operand 1 \"\" \"\"))\n-\t\t\t   (pc)))]\n+                           (label_ref (match_operand 1 \"\" \"\"))\n+                           (pc)))]\n   \"\"\n   [(set (pc) (if_then_else (eq (and:HI (match_dup 0) (const_int -32768))\n-\t\t\t       (const_int 0))\n-\t\t\t   (label_ref (match_dup 1))\n-\t\t\t   (pc)))]\n+                               (const_int 0))\n+                           (label_ref (match_dup 1))\n+                           (pc)))]\n   \"\")\n \n (define_peephole2\n   [(parallel [(set (cc0) (compare (match_operand:HI 0 \"register_operand\" \"\")\n-\t\t\t \t  (const_int 0)))\n-\t      (clobber (match_operand:HI 2 \"\"))])\n+                                  (const_int 0)))\n+              (clobber (match_operand:HI 2 \"\"))])\n    (set (pc) (if_then_else (lt (cc0) (const_int 0))\n-\t\t\t   (label_ref (match_operand 1 \"\" \"\"))\n-\t\t\t   (pc)))]\n+                           (label_ref (match_operand 1 \"\" \"\"))\n+                           (pc)))]\n   \"\"\n   [(set (pc) (if_then_else (ne (and:HI (match_dup 0) (const_int -32768))\n-\t\t\t       (const_int 0))\n-\t\t\t   (label_ref (match_dup 1))\n-\t\t\t   (pc)))]\n+                               (const_int 0))\n+                           (label_ref (match_dup 1))\n+                           (pc)))]\n   \"\")\n \n (define_peephole2\n   [(parallel [(set (cc0) (compare (match_operand:SI 0 \"register_operand\" \"\")\n-\t\t\t \t  (const_int 0)))\n-\t      (clobber (match_operand:SI 2 \"\"))])\n+                                  (const_int 0)))\n+              (clobber (match_operand:SI 2 \"\"))])\n    (set (pc) (if_then_else (ge (cc0) (const_int 0))\n-\t\t\t   (label_ref (match_operand 1 \"\" \"\"))\n-\t\t\t   (pc)))]\n+                           (label_ref (match_operand 1 \"\" \"\"))\n+                           (pc)))]\n   \"\"\n   [(set (pc) (if_then_else (eq (and:SI (match_dup 0) (match_dup 2))\n-\t\t\t       (const_int 0))\n-\t\t\t   (label_ref (match_dup 1))\n-\t\t\t   (pc)))]\n+                               (const_int 0))\n+                           (label_ref (match_dup 1))\n+                           (pc)))]\n   \"operands[2] = GEN_INT (-2147483647 - 1);\")\n \n (define_peephole2\n   [(parallel [(set (cc0) (compare (match_operand:SI 0 \"register_operand\" \"\")\n-\t\t\t \t  (const_int 0)))\n-\t      (clobber (match_operand:SI 2 \"\"))])\n+                                  (const_int 0)))\n+              (clobber (match_operand:SI 2 \"\"))])\n    (set (pc) (if_then_else (lt (cc0) (const_int 0))\n-\t\t\t   (label_ref (match_operand 1 \"\" \"\"))\n-\t\t\t   (pc)))]\n+                           (label_ref (match_operand 1 \"\" \"\"))\n+                           (pc)))]\n   \"\"\n   [(set (pc) (if_then_else (ne (and:SI (match_dup 0) (match_dup 2))\n-\t\t\t       (const_int 0))\n-\t\t\t   (label_ref (match_dup 1))\n-\t\t\t   (pc)))]\n+                               (const_int 0))\n+                           (label_ref (match_dup 1))\n+                           (pc)))]\n   \"operands[2] = GEN_INT (-2147483647 - 1);\")\n \n ;; ************************************************************************\n@@ -4587,8 +4588,8 @@\n (define_insn \"rvbranch\"\n   [(set (pc)\n         (if_then_else (match_operator 1 \"simple_comparison_operator\" \n-\t                [(cc0)\n-                         (const_int 0)])\n+                                      [(cc0)\n+                                       (const_int 0)])\n                       (pc)\n                       (label_ref (match_operand 0 \"\" \"\"))))]\n   \"\"\n@@ -4601,8 +4602,8 @@\n (define_insn \"difficult_rvbranch\"\n   [(set (pc)\n         (if_then_else (match_operator 1 \"difficult_comparison_operator\" \n-\t                [(cc0)\n-                         (const_int 0)])\n+                                      [(cc0)\n+                                       (const_int 0)])\n                       (pc)\n                       (label_ref (match_operand 0 \"\" \"\"))))]\n   \"\"\n@@ -4625,7 +4626,7 @@\n            : \"rjmp %x0\";\n   }\n   [(set (attr \"length\")\n-\t(if_then_else (match_operand 0 \"symbol_ref_operand\" \"\")\t\n+        (if_then_else (match_operand 0 \"symbol_ref_operand\" \"\")\t\n                       (if_then_else (match_test \"!AVR_HAVE_JMP_CALL\")\n                                     (const_int 1)\n                                     (const_int 2))\n@@ -4769,25 +4770,25 @@\n \n (define_expand \"casesi\"\n   [(set (match_dup 6)\n-\t(minus:HI (subreg:HI (match_operand:SI 0 \"register_operand\" \"\") 0)\n-\t\t  (match_operand:HI 1 \"register_operand\" \"\")))\n+        (minus:HI (subreg:HI (match_operand:SI 0 \"register_operand\" \"\") 0)\n+                  (match_operand:HI 1 \"register_operand\" \"\")))\n    (parallel [(set (cc0)\n-\t\t   (compare (match_dup 6)\n-\t\t\t    (match_operand:HI 2 \"register_operand\" \"\")))\n-\t      (clobber (match_scratch:QI 9 \"\"))])\n+                   (compare (match_dup 6)\n+                            (match_operand:HI 2 \"register_operand\" \"\")))\n+              (clobber (match_scratch:QI 9 \"\"))])\n    \n    (set (pc)\n-\t(if_then_else (gtu (cc0)\n-\t\t\t   (const_int 0))\n-\t\t      (label_ref (match_operand 4 \"\" \"\"))\n-\t\t      (pc)))\n+        (if_then_else (gtu (cc0)\n+                           (const_int 0))\n+                      (label_ref (match_operand 4 \"\" \"\"))\n+                      (pc)))\n \n    (set (match_dup 6)\n-\t(plus:HI (match_dup 6) (label_ref (match_operand:HI 3 \"\" \"\"))))\n+        (plus:HI (match_dup 6) (label_ref (match_operand:HI 3 \"\" \"\"))))\n \n    (parallel [(set (pc) (unspec:HI [(match_dup 6)] UNSPEC_INDEX_JMP))\n-\t      (use (label_ref (match_dup 3)))\n-\t      (clobber (match_dup 6))])]\n+              (use (label_ref (match_dup 3)))\n+              (clobber (match_dup 6))])]\n   \"\"\n   {\n     operands[6] = gen_reg_rtx (HImode);\n@@ -4833,21 +4834,21 @@\n ;; Lower half of the I/O space - use sbic/sbis directly.\n (define_insn \"*sbix_branch\"\n   [(set (pc)\n-\t(if_then_else\n-\t (match_operator 0 \"eqne_operator\"\n-\t\t\t [(zero_extract:QIHI\n-\t\t\t   (mem:QI (match_operand 1 \"low_io_address_operand\" \"n\"))\n-\t\t\t   (const_int 1)\n-\t\t\t   (match_operand 2 \"const_int_operand\" \"n\"))\n-\t\t\t  (const_int 0)])\n-\t (label_ref (match_operand 3 \"\" \"\"))\n-\t (pc)))]\n+        (if_then_else\n+         (match_operator 0 \"eqne_operator\"\n+                         [(zero_extract:QIHI\n+                           (mem:QI (match_operand 1 \"low_io_address_operand\" \"n\"))\n+                           (const_int 1)\n+                           (match_operand 2 \"const_int_operand\" \"n\"))\n+                          (const_int 0)])\n+         (label_ref (match_operand 3 \"\" \"\"))\n+         (pc)))]\n   \"\"\n   {\n     return avr_out_sbxx_branch (insn, operands);\n   }\n   [(set (attr \"length\")\n-\t(if_then_else (and (ge (minus (pc) (match_dup 3)) (const_int -2046))\n+        (if_then_else (and (ge (minus (pc) (match_dup 3)) (const_int -2046))\n                            (le (minus (pc) (match_dup 3)) (const_int 2046)))\n                       (const_int 2)\n                       (if_then_else (match_test \"!AVR_HAVE_JMP_CALL\")\n@@ -4858,20 +4859,20 @@\n ;; Tests of bit 7 are pessimized to sign tests, so we need this too...\n (define_insn \"*sbix_branch_bit7\"\n   [(set (pc)\n-\t(if_then_else\n-\t (match_operator 0 \"gelt_operator\"\n-\t\t\t [(mem:QI (match_operand 1 \"low_io_address_operand\" \"n\"))\n-\t\t\t  (const_int 0)])\n-\t (label_ref (match_operand 2 \"\" \"\"))\n-\t (pc)))]\n+        (if_then_else\n+         (match_operator 0 \"gelt_operator\"\n+                         [(mem:QI (match_operand 1 \"low_io_address_operand\" \"n\"))\n+                          (const_int 0)])\n+         (label_ref (match_operand 2 \"\" \"\"))\n+         (pc)))]\n   \"\"\n {\n   operands[3] = operands[2];\n   operands[2] = GEN_INT (7);\n   return avr_out_sbxx_branch (insn, operands);\n }\n   [(set (attr \"length\")\n-\t(if_then_else (and (ge (minus (pc) (match_dup 2)) (const_int -2046))\n+        (if_then_else (and (ge (minus (pc) (match_dup 2)) (const_int -2046))\n                            (le (minus (pc) (match_dup 2)) (const_int 2046)))\n                       (const_int 2)\n                       (if_then_else (match_test \"!AVR_HAVE_JMP_CALL\")\n@@ -4882,21 +4883,21 @@\n ;; Upper half of the I/O space - read port to __tmp_reg__ and use sbrc/sbrs.\n (define_insn \"*sbix_branch_tmp\"\n   [(set (pc)\n-\t(if_then_else\n-\t (match_operator 0 \"eqne_operator\"\n-\t\t\t [(zero_extract:QIHI\n-\t\t\t   (mem:QI (match_operand 1 \"high_io_address_operand\" \"n\"))\n-\t\t\t   (const_int 1)\n-\t\t\t   (match_operand 2 \"const_int_operand\" \"n\"))\n-\t\t\t  (const_int 0)])\n-\t (label_ref (match_operand 3 \"\" \"\"))\n-\t (pc)))]\n+        (if_then_else\n+         (match_operator 0 \"eqne_operator\"\n+                         [(zero_extract:QIHI\n+                           (mem:QI (match_operand 1 \"high_io_address_operand\" \"n\"))\n+                           (const_int 1)\n+                           (match_operand 2 \"const_int_operand\" \"n\"))\n+                          (const_int 0)])\n+         (label_ref (match_operand 3 \"\" \"\"))\n+         (pc)))]\n   \"\"\n   {\n     return avr_out_sbxx_branch (insn, operands);\n   }\n   [(set (attr \"length\")\n-\t(if_then_else (and (ge (minus (pc) (match_dup 3)) (const_int -2046))\n+        (if_then_else (and (ge (minus (pc) (match_dup 3)) (const_int -2046))\n                            (le (minus (pc) (match_dup 3)) (const_int 2045)))\n                       (const_int 3)\n                       (if_then_else (match_test \"!AVR_HAVE_JMP_CALL\")\n@@ -4906,25 +4907,25 @@\n \n (define_insn \"*sbix_branch_tmp_bit7\"\n   [(set (pc)\n-\t(if_then_else\n-\t (match_operator 0 \"gelt_operator\"\n-\t\t\t [(mem:QI (match_operand 1 \"high_io_address_operand\" \"n\"))\n-\t\t\t  (const_int 0)])\n-\t (label_ref (match_operand 2 \"\" \"\"))\n-\t (pc)))]\n+        (if_then_else\n+         (match_operator 0 \"gelt_operator\"\n+                         [(mem:QI (match_operand 1 \"high_io_address_operand\" \"n\"))\n+                          (const_int 0)])\n+         (label_ref (match_operand 2 \"\" \"\"))\n+         (pc)))]\n   \"\"\n {\n   operands[3] = operands[2];\n   operands[2] = GEN_INT (7);\n   return avr_out_sbxx_branch (insn, operands);\n }\n   [(set (attr \"length\")\n-\t(if_then_else (and (ge (minus (pc) (match_dup 2)) (const_int -2046))\n-\t\t\t   (le (minus (pc) (match_dup 2)) (const_int 2045)))\n-\t\t      (const_int 3)\n+        (if_then_else (and (ge (minus (pc) (match_dup 2)) (const_int -2046))\n+                           (le (minus (pc) (match_dup 2)) (const_int 2045)))\n+                      (const_int 3)\n                       (if_then_else (match_test \"!AVR_HAVE_JMP_CALL\")\n-\t\t\t\t    (const_int 3)\n-\t\t\t\t    (const_int 5))))\n+                                    (const_int 3)\n+                                    (const_int 5))))\n    (set_attr \"cc\" \"clobber\")])\n \n ;; ************************* Peepholes ********************************\n@@ -4939,12 +4940,14 @@\n                             (const_int -1)))\n               (clobber (match_operand:QI 1 \"d_register_operand\" \"\"))])\n    (set (pc)\n-        (if_then_else (ne (cc0)\n-                          (const_int 0))\n+        (if_then_else (eqne (cc0)\n+                            (const_int 0))\n                       (label_ref (match_operand 2 \"\" \"\"))\n                       (pc)))]\n   \"\"\n   {\n+    const char *op;\n+    int jump_mode;\n     CC_STATUS_INIT;\n     if (test_hard_reg_class (ADDW_REGS, operands[0]))\n       output_asm_insn (\"sbiw %0,1\" CR_TAB\n@@ -4956,14 +4959,15 @@\n                        \"sbc %C0,__zero_reg__\" CR_TAB\n                        \"sbc %D0,__zero_reg__\", operands);\n \n-    switch (avr_jump_mode (operands[2], insn))\n+    jump_mode = avr_jump_mode (operands[2], insn);\n+    op = ((EQ == <CODE>) ^ (jump_mode == 1)) ? \"brcc\" : \"brcs\";\n+    operands[1] = gen_rtx_CONST_STRING (VOIDmode, op);\n+\n+    switch (jump_mode)\n       {\n-      case 1:\n-        return \"brcc %2\";\n-      case 2:\n-        return \"brcs .+2\\;rjmp %2\";\n-      case 3:\n-        return \"brcs .+4\\;jmp %2\";\n+      case 1: return \"%1 %2\";\n+      case 2: return \"%1 .+2\\;rjmp %2\";\n+      case 3: return \"%1 .+4\\;jmp %2\";\n       }\n \n     gcc_unreachable();\n@@ -4974,32 +4978,35 @@\n   [(set (match_operand:HI 0 \"d_register_operand\" \"\")\n         (plus:HI (match_dup 0)\n                  (const_int -1)))\n-   (parallel\n-    [(set (cc0)\n-          (compare (match_dup 0)\n-\t\t   (const_int -1)))\n-     (clobber (match_operand:QI 1 \"d_register_operand\" \"\"))])\n+   (parallel [(set (cc0)\n+                   (compare (match_dup 0)\n+                            (const_int -1)))\n+              (clobber (match_operand:QI 1 \"d_register_operand\" \"\"))])\n    (set (pc)\n-\t(if_then_else (ne (cc0) (const_int 0))\n-\t\t      (label_ref (match_operand 2 \"\" \"\"))\n-\t\t      (pc)))]\n+        (if_then_else (eqne (cc0)\n+                            (const_int 0))\n+                      (label_ref (match_operand 2 \"\" \"\"))\n+                      (pc)))]\n   \"\"\n   {\n+    const char *op;\n+    int jump_mode;\n     CC_STATUS_INIT;\n     if (test_hard_reg_class (ADDW_REGS, operands[0]))\n       output_asm_insn (\"sbiw %0,1\", operands);\n     else\n       output_asm_insn (\"subi %A0,1\" CR_TAB\n                        \"sbc %B0,__zero_reg__\", operands);\n \n-    switch (avr_jump_mode (operands[2], insn))\n+    jump_mode = avr_jump_mode (operands[2], insn);\n+    op = ((EQ == <CODE>) ^ (jump_mode == 1)) ? \"brcc\" : \"brcs\";\n+    operands[1] = gen_rtx_CONST_STRING (VOIDmode, op);\n+\n+    switch (jump_mode)\n       {\n-      case 1:\n-        return \"brcc %2\";\n-      case 2:\n-        return \"brcs .+2\\;rjmp %2\";\n-      case 3:\n-        return \"brcs .+4\\;jmp %2\";\n+      case 1: return \"%1 %2\";\n+      case 2: return \"%1 .+2\\;rjmp %2\";\n+      case 3: return \"%1 .+4\\;jmp %2\";\n       }\n \n     gcc_unreachable();\n@@ -5017,27 +5024,30 @@\n                             (const_int -1)))\n               (clobber (match_operand:QI 1 \"d_register_operand\" \"\"))])\n    (set (pc)\n-        (if_then_else (ne (cc0)\n-                          (const_int 0))\n+        (if_then_else (eqne (cc0)\n+                            (const_int 0))\n                       (label_ref (match_operand 2 \"\" \"\"))\n                       (pc)))]\n   \"\"\n   {\n+    const char *op;\n+    int jump_mode;\n     CC_STATUS_INIT;\n     if (test_hard_reg_class (ADDW_REGS, operands[0]))\n       output_asm_insn (\"sbiw %0,1\", operands);\n     else\n       output_asm_insn (\"subi %A0,1\" CR_TAB\n                        \"sbc %B0,__zero_reg__\", operands);\n \n-    switch (avr_jump_mode (operands[2], insn))\n+    jump_mode = avr_jump_mode (operands[2], insn);\n+    op = ((EQ == <CODE>) ^ (jump_mode == 1)) ? \"brcc\" : \"brcs\";\n+    operands[1] = gen_rtx_CONST_STRING (VOIDmode, op);\n+\n+    switch (jump_mode)\n       {\n-      case 1:\n-        return \"brcc %2\";\n-      case 2:\n-        return \"brcs .+2\\;rjmp %2\";\n-      case 3:\n-        return \"brcs .+4\\;jmp %2\";\n+      case 1: return \"%1 %2\";\n+      case 2: return \"%1 .+2\\;rjmp %2\";\n+      case 3: return \"%1 .+4\\;jmp %2\";\n       }\n \n     gcc_unreachable();\n@@ -5055,25 +5065,28 @@\n                             (const_int -1)))\n               (clobber (match_operand:QI 1 \"d_register_operand\" \"\"))])\n    (set (pc)\n-        (if_then_else (ne (cc0)\n-                          (const_int 0))\n+        (if_then_else (eqne (cc0)\n+                            (const_int 0))\n                       (label_ref (match_operand 2 \"\" \"\"))\n                       (pc)))]\n   \"\"\n   {\n+    const char *op;\n+    int jump_mode;\n     CC_STATUS_INIT;\n-      output_asm_insn (\"ldi %3,1\"   CR_TAB\n-                       \"sub %A0,%3\" CR_TAB\n-                       \"sbc %B0,__zero_reg__\", operands);\n+    output_asm_insn (\"ldi %3,1\"   CR_TAB\n+                     \"sub %A0,%3\" CR_TAB\n+                     \"sbc %B0,__zero_reg__\", operands);\n \n-    switch (avr_jump_mode (operands[2], insn))\n+    jump_mode = avr_jump_mode (operands[2], insn);\n+    op = ((EQ == <CODE>) ^ (jump_mode == 1)) ? \"brcc\" : \"brcs\";\n+    operands[1] = gen_rtx_CONST_STRING (VOIDmode, op);\n+\n+    switch (jump_mode)\n       {\n-      case 1:\n-        return \"brcc %2\";\n-      case 2:\n-        return \"brcs .+2\\;rjmp %2\";\n-      case 3:\n-        return \"brcs .+4\\;jmp %2\";\n+      case 1: return \"%1 %2\";\n+      case 2: return \"%1 .+2\\;rjmp %2\";\n+      case 3: return \"%1 .+4\\;jmp %2\";\n       }\n \n     gcc_unreachable();\n@@ -5085,28 +5098,32 @@\n         (plus:QI (match_dup 0)\n                  (const_int -1)))\n    (set (cc0)\n-\t(compare (match_dup 0)\n-\t\t (const_int -1)))\n+        (compare (match_dup 0)\n+                 (const_int -1)))\n    (set (pc)\n-\t(if_then_else (ne (cc0) (const_int 0))\n-\t\t      (label_ref (match_operand 1 \"\" \"\"))\n-\t\t      (pc)))]\n+        (if_then_else (eqne (cc0)\n+                            (const_int 0))\n+                      (label_ref (match_operand 1 \"\" \"\"))\n+                      (pc)))]\n   \"\"\n   {\n+    const char *op;\n+    int jump_mode;\n     CC_STATUS_INIT;\n     cc_status.value1 = operands[0];\n     cc_status.flags |= CC_OVERFLOW_UNUSABLE;\n \n     output_asm_insn (\"subi %A0,1\", operands);\n \n-    switch (avr_jump_mode (operands[1], insn))\n+    jump_mode = avr_jump_mode (operands[1], insn);\n+    op = ((EQ == <CODE>) ^ (jump_mode == 1)) ? \"brcc\" : \"brcs\";\n+    operands[0] = gen_rtx_CONST_STRING (VOIDmode, op);\n+\n+    switch (jump_mode)\n       {\n-      case 1:\n-        return \"brcc %1\";\n-      case 2:\n-        return \"brcs .+2\\;rjmp %1\";\n-      case 3:\n-        return \"brcs .+4\\;jmp %1\";\n+      case 1: return \"%0 %1\";\n+      case 2: return \"%0 .+2\\;rjmp %1\";\n+      case 3: return \"%0 .+4\\;jmp %1\";\n       }\n \n     gcc_unreachable();\n@@ -5156,8 +5173,8 @@\n    (set (pc)\n         (if_then_else (ne (cc0)\n                           (const_int 0))\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n-\t\t      (pc)))]\n+                      (label_ref (match_operand 0 \"\" \"\"))\n+                      (pc)))]\n   \"!AVR_HAVE_JMP_CALL\n    || !avr_current_device->errata_skip\"\n   {"}]}