{"sha": "19b76346c046b95ee4360a5c35d1e3a846aba6f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTliNzYzNDZjMDQ2Yjk1ZWU0MzYwYTVjMzVkMWUzYTg0NmFiYTZmNA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2011-06-28T18:59:04Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2011-06-28T18:59:04Z"}, "message": "re PR fortran/49479 (reshape / optionals / zero sized arrays)\n\n2011-06-28  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/49479\n\t* m4/reshape.m4: If source allocation is smaller than one, set it\n\tto one.\n\t* intrinsics/reshape_generic.c:  Likewise.\n\t* generated/reshape_r16.c: Regenerated.\n\t* generated/reshape_c4.c: Regenerated.\n\t* generated/reshape_c16.c: Regenerated.\n\t* generated/reshape_c8.c: Regenerated.\n\t* generated/reshape_r4.c: Regenerated.\n\t* generated/reshape_i4.c: Regenerated.\n\t* generated/reshape_r10.c: Regenerated.\n\t* generated/reshape_r8.c: Regenerated.\n\t* generated/reshape_c10.c: Regenerated.\n\t* generated/reshape_i8.c: Regenerated.\n\t* generated/reshape_i16.c: Regenerated.\n\n2011-06-28  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/49479\n\t* gfortran.dg/reshape_zerosize_3.f90:  New test.\n\nFrom-SVN: r175594", "tree": {"sha": "065be10e884faa1cf29e82bd342b95d03ee62f80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/065be10e884faa1cf29e82bd342b95d03ee62f80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19b76346c046b95ee4360a5c35d1e3a846aba6f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19b76346c046b95ee4360a5c35d1e3a846aba6f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19b76346c046b95ee4360a5c35d1e3a846aba6f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19b76346c046b95ee4360a5c35d1e3a846aba6f4/comments", "author": null, "committer": null, "parents": [{"sha": "6138f9bd8783881a1bd7dcfb917a3bfcefcf8cf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6138f9bd8783881a1bd7dcfb917a3bfcefcf8cf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6138f9bd8783881a1bd7dcfb917a3bfcefcf8cf9"}], "stats": {"total": 197, "additions": 184, "deletions": 13}, "files": [{"sha": "77a408639ac06b6fa73b10e83e1b5028109ad16b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19b76346c046b95ee4360a5c35d1e3a846aba6f4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19b76346c046b95ee4360a5c35d1e3a846aba6f4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=19b76346c046b95ee4360a5c35d1e3a846aba6f4", "patch": "@@ -1,3 +1,8 @@\n+2011-06-28  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/49479\n+\t* gfortran.dg/reshape_zerosize_3.f90:  New test.\n+\n 2011-06-28  Janis Johnson  <janisjo@codesourcery.com>\n \n \t* gcc.target/arm/vfp-ldmdbs.c: Skip for soft float."}, {"sha": "870a76c652ead657377fe5f286cc5bfc1b62ddc6", "filename": "gcc/testsuite/gfortran.dg/reshape_zerosize_3.f90", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19b76346c046b95ee4360a5c35d1e3a846aba6f4/gcc%2Ftestsuite%2Fgfortran.dg%2Freshape_zerosize_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19b76346c046b95ee4360a5c35d1e3a846aba6f4/gcc%2Ftestsuite%2Fgfortran.dg%2Freshape_zerosize_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Freshape_zerosize_3.f90?ref=19b76346c046b95ee4360a5c35d1e3a846aba6f4", "patch": "@@ -0,0 +1,43 @@\n+! { dg-do run }\n+! PR 49479 - this used not to print anything.\n+! Test case by Joost VandeVondele.\n+MODULE M1\n+  IMPLICIT NONE\n+  type foo\n+     character(len=5) :: x\n+  end type foo\n+CONTAINS\n+  SUBROUTINE S1(data)\n+    INTEGER, DIMENSION(:), INTENT(IN), &\n+         OPTIONAL                               :: DATA\n+    character(20) :: line\n+    IF (.not. PRESENT(data)) call abort\n+    write (unit=line,fmt='(I5)') size(data)\n+    if (line /= '    0               ') call abort\n+  END SUBROUTINE S1\n+\n+  subroutine s_type(data)\n+    type(foo), dimension(:), intent(in), optional :: data\n+    character(20) :: line\n+    IF (.not. PRESENT(data)) call abort\n+    write (unit=line,fmt='(I5)') size(data)\n+    if (line /= '    0               ') call abort\n+  end subroutine s_type\n+\n+  SUBROUTINE S2(N)\n+    INTEGER :: N\n+    INTEGER, ALLOCATABLE, DIMENSION(:, :)    :: blki\n+    type(foo), allocatable, dimension(:, :)  :: bar\n+    ALLOCATE(blki(3,N))\n+    allocate (bar(3,n))\n+    blki=0\n+    CALL S1(RESHAPE(blki,(/3*N/)))\n+    call s_type(reshape(bar, (/3*N/)))\n+  END SUBROUTINE S2\n+\n+END MODULE M1\n+\n+USE M1\n+CALL S2(0)\n+END\n+! { dg-final { cleanup-modules \"m1\" } }"}, {"sha": "88ee3638d1784b41915326939b069abf0153dd3d", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19b76346c046b95ee4360a5c35d1e3a846aba6f4/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19b76346c046b95ee4360a5c35d1e3a846aba6f4/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=19b76346c046b95ee4360a5c35d1e3a846aba6f4", "patch": "@@ -1,3 +1,21 @@\n+2011-06-28  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/49479\n+\t* m4/reshape.m4: If source allocation is smaller than one, set it\n+\tto one.\n+\t* intrinsics/reshape_generic.c:  Likewise.\n+\t* generated/reshape_r16.c: Regenerated.\n+\t* generated/reshape_c4.c: Regenerated.\n+\t* generated/reshape_c16.c: Regenerated.\n+\t* generated/reshape_c8.c: Regenerated.\n+\t* generated/reshape_r4.c: Regenerated.\n+\t* generated/reshape_i4.c: Regenerated.\n+\t* generated/reshape_r10.c: Regenerated.\n+\t* generated/reshape_r8.c: Regenerated.\n+\t* generated/reshape_c10.c: Regenerated.\n+\t* generated/reshape_i8.c: Regenerated.\n+\t* generated/reshape_i16.c: Regenerated.\n+\n 2011-06-18  Janne Blomqvist  <jb@gcc.gnu.org>\n \n         PR libfortran/49296"}, {"sha": "44446ebfee895ff2ff61581eea5ed4c4b560dcaa", "filename": "libgfortran/generated/reshape_c10.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19b76346c046b95ee4360a5c35d1e3a846aba6f4/libgfortran%2Fgenerated%2Freshape_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19b76346c046b95ee4360a5c35d1e3a846aba6f4/libgfortran%2Fgenerated%2Freshape_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_c10.c?ref=19b76346c046b95ee4360a5c35d1e3a846aba6f4", "patch": "@@ -97,6 +97,8 @@ reshape_c10 (gfc_array_c10 * const restrict ret,\n \n   if (ret->data == NULL)\n     {\n+      index_type alloc_size;\n+\n       rs = 1;\n       for (n = 0; n < rdim; n++)\n \t{\n@@ -107,7 +109,13 @@ reshape_c10 (gfc_array_c10 * const restrict ret,\n \t  rs *= rex;\n \t}\n       ret->offset = 0;\n-      ret->data = internal_malloc_size ( rs * sizeof (GFC_COMPLEX_10));\n+\n+      if (unlikely (rs < 1))\n+        alloc_size = 1;\n+      else\n+        alloc_size = rs * sizeof (GFC_COMPLEX_10);\n+\n+      ret->data = internal_malloc_size (alloc_size);\n       ret->dtype = (source->dtype & ~GFC_DTYPE_RANK_MASK) | rdim;\n     }\n "}, {"sha": "ca588dc2c93a966104eb85efa8a80d103a426d2e", "filename": "libgfortran/generated/reshape_c16.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19b76346c046b95ee4360a5c35d1e3a846aba6f4/libgfortran%2Fgenerated%2Freshape_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19b76346c046b95ee4360a5c35d1e3a846aba6f4/libgfortran%2Fgenerated%2Freshape_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_c16.c?ref=19b76346c046b95ee4360a5c35d1e3a846aba6f4", "patch": "@@ -97,6 +97,8 @@ reshape_c16 (gfc_array_c16 * const restrict ret,\n \n   if (ret->data == NULL)\n     {\n+      index_type alloc_size;\n+\n       rs = 1;\n       for (n = 0; n < rdim; n++)\n \t{\n@@ -107,7 +109,13 @@ reshape_c16 (gfc_array_c16 * const restrict ret,\n \t  rs *= rex;\n \t}\n       ret->offset = 0;\n-      ret->data = internal_malloc_size ( rs * sizeof (GFC_COMPLEX_16));\n+\n+      if (unlikely (rs < 1))\n+        alloc_size = 1;\n+      else\n+        alloc_size = rs * sizeof (GFC_COMPLEX_16);\n+\n+      ret->data = internal_malloc_size (alloc_size);\n       ret->dtype = (source->dtype & ~GFC_DTYPE_RANK_MASK) | rdim;\n     }\n "}, {"sha": "e16d32c523916104a88bf5f8a3c3b4f38c4ae772", "filename": "libgfortran/generated/reshape_c4.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19b76346c046b95ee4360a5c35d1e3a846aba6f4/libgfortran%2Fgenerated%2Freshape_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19b76346c046b95ee4360a5c35d1e3a846aba6f4/libgfortran%2Fgenerated%2Freshape_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_c4.c?ref=19b76346c046b95ee4360a5c35d1e3a846aba6f4", "patch": "@@ -97,6 +97,8 @@ reshape_c4 (gfc_array_c4 * const restrict ret,\n \n   if (ret->data == NULL)\n     {\n+      index_type alloc_size;\n+\n       rs = 1;\n       for (n = 0; n < rdim; n++)\n \t{\n@@ -107,7 +109,13 @@ reshape_c4 (gfc_array_c4 * const restrict ret,\n \t  rs *= rex;\n \t}\n       ret->offset = 0;\n-      ret->data = internal_malloc_size ( rs * sizeof (GFC_COMPLEX_4));\n+\n+      if (unlikely (rs < 1))\n+        alloc_size = 1;\n+      else\n+        alloc_size = rs * sizeof (GFC_COMPLEX_4);\n+\n+      ret->data = internal_malloc_size (alloc_size);\n       ret->dtype = (source->dtype & ~GFC_DTYPE_RANK_MASK) | rdim;\n     }\n "}, {"sha": "c8da0bc5f6a12e311653c3ac08bb1c668ec26885", "filename": "libgfortran/generated/reshape_c8.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19b76346c046b95ee4360a5c35d1e3a846aba6f4/libgfortran%2Fgenerated%2Freshape_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19b76346c046b95ee4360a5c35d1e3a846aba6f4/libgfortran%2Fgenerated%2Freshape_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_c8.c?ref=19b76346c046b95ee4360a5c35d1e3a846aba6f4", "patch": "@@ -97,6 +97,8 @@ reshape_c8 (gfc_array_c8 * const restrict ret,\n \n   if (ret->data == NULL)\n     {\n+      index_type alloc_size;\n+\n       rs = 1;\n       for (n = 0; n < rdim; n++)\n \t{\n@@ -107,7 +109,13 @@ reshape_c8 (gfc_array_c8 * const restrict ret,\n \t  rs *= rex;\n \t}\n       ret->offset = 0;\n-      ret->data = internal_malloc_size ( rs * sizeof (GFC_COMPLEX_8));\n+\n+      if (unlikely (rs < 1))\n+        alloc_size = 1;\n+      else\n+        alloc_size = rs * sizeof (GFC_COMPLEX_8);\n+\n+      ret->data = internal_malloc_size (alloc_size);\n       ret->dtype = (source->dtype & ~GFC_DTYPE_RANK_MASK) | rdim;\n     }\n "}, {"sha": "43fbefc8ccb80571584f844d14db6cdf6811efc8", "filename": "libgfortran/generated/reshape_i16.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19b76346c046b95ee4360a5c35d1e3a846aba6f4/libgfortran%2Fgenerated%2Freshape_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19b76346c046b95ee4360a5c35d1e3a846aba6f4/libgfortran%2Fgenerated%2Freshape_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_i16.c?ref=19b76346c046b95ee4360a5c35d1e3a846aba6f4", "patch": "@@ -97,6 +97,8 @@ reshape_16 (gfc_array_i16 * const restrict ret,\n \n   if (ret->data == NULL)\n     {\n+      index_type alloc_size;\n+\n       rs = 1;\n       for (n = 0; n < rdim; n++)\n \t{\n@@ -107,7 +109,13 @@ reshape_16 (gfc_array_i16 * const restrict ret,\n \t  rs *= rex;\n \t}\n       ret->offset = 0;\n-      ret->data = internal_malloc_size ( rs * sizeof (GFC_INTEGER_16));\n+\n+      if (unlikely (rs < 1))\n+        alloc_size = 1;\n+      else\n+        alloc_size = rs * sizeof (GFC_INTEGER_16);\n+\n+      ret->data = internal_malloc_size (alloc_size);\n       ret->dtype = (source->dtype & ~GFC_DTYPE_RANK_MASK) | rdim;\n     }\n "}, {"sha": "2c136deeae21a342ae57aeff90468affe499e061", "filename": "libgfortran/generated/reshape_i4.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19b76346c046b95ee4360a5c35d1e3a846aba6f4/libgfortran%2Fgenerated%2Freshape_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19b76346c046b95ee4360a5c35d1e3a846aba6f4/libgfortran%2Fgenerated%2Freshape_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_i4.c?ref=19b76346c046b95ee4360a5c35d1e3a846aba6f4", "patch": "@@ -97,6 +97,8 @@ reshape_4 (gfc_array_i4 * const restrict ret,\n \n   if (ret->data == NULL)\n     {\n+      index_type alloc_size;\n+\n       rs = 1;\n       for (n = 0; n < rdim; n++)\n \t{\n@@ -107,7 +109,13 @@ reshape_4 (gfc_array_i4 * const restrict ret,\n \t  rs *= rex;\n \t}\n       ret->offset = 0;\n-      ret->data = internal_malloc_size ( rs * sizeof (GFC_INTEGER_4));\n+\n+      if (unlikely (rs < 1))\n+        alloc_size = 1;\n+      else\n+        alloc_size = rs * sizeof (GFC_INTEGER_4);\n+\n+      ret->data = internal_malloc_size (alloc_size);\n       ret->dtype = (source->dtype & ~GFC_DTYPE_RANK_MASK) | rdim;\n     }\n "}, {"sha": "c97b747ee6d17f083c51f8ac3dd458c06ede4a6c", "filename": "libgfortran/generated/reshape_i8.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19b76346c046b95ee4360a5c35d1e3a846aba6f4/libgfortran%2Fgenerated%2Freshape_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19b76346c046b95ee4360a5c35d1e3a846aba6f4/libgfortran%2Fgenerated%2Freshape_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_i8.c?ref=19b76346c046b95ee4360a5c35d1e3a846aba6f4", "patch": "@@ -97,6 +97,8 @@ reshape_8 (gfc_array_i8 * const restrict ret,\n \n   if (ret->data == NULL)\n     {\n+      index_type alloc_size;\n+\n       rs = 1;\n       for (n = 0; n < rdim; n++)\n \t{\n@@ -107,7 +109,13 @@ reshape_8 (gfc_array_i8 * const restrict ret,\n \t  rs *= rex;\n \t}\n       ret->offset = 0;\n-      ret->data = internal_malloc_size ( rs * sizeof (GFC_INTEGER_8));\n+\n+      if (unlikely (rs < 1))\n+        alloc_size = 1;\n+      else\n+        alloc_size = rs * sizeof (GFC_INTEGER_8);\n+\n+      ret->data = internal_malloc_size (alloc_size);\n       ret->dtype = (source->dtype & ~GFC_DTYPE_RANK_MASK) | rdim;\n     }\n "}, {"sha": "fa3873e1617f426982689b0a9064d5c9d7b01b31", "filename": "libgfortran/generated/reshape_r10.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19b76346c046b95ee4360a5c35d1e3a846aba6f4/libgfortran%2Fgenerated%2Freshape_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19b76346c046b95ee4360a5c35d1e3a846aba6f4/libgfortran%2Fgenerated%2Freshape_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_r10.c?ref=19b76346c046b95ee4360a5c35d1e3a846aba6f4", "patch": "@@ -97,6 +97,8 @@ reshape_r10 (gfc_array_r10 * const restrict ret,\n \n   if (ret->data == NULL)\n     {\n+      index_type alloc_size;\n+\n       rs = 1;\n       for (n = 0; n < rdim; n++)\n \t{\n@@ -107,7 +109,13 @@ reshape_r10 (gfc_array_r10 * const restrict ret,\n \t  rs *= rex;\n \t}\n       ret->offset = 0;\n-      ret->data = internal_malloc_size ( rs * sizeof (GFC_REAL_10));\n+\n+      if (unlikely (rs < 1))\n+        alloc_size = 1;\n+      else\n+        alloc_size = rs * sizeof (GFC_REAL_10);\n+\n+      ret->data = internal_malloc_size (alloc_size);\n       ret->dtype = (source->dtype & ~GFC_DTYPE_RANK_MASK) | rdim;\n     }\n "}, {"sha": "c2b6556b0176d02b38143f92c80a2e2af960f4b1", "filename": "libgfortran/generated/reshape_r16.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19b76346c046b95ee4360a5c35d1e3a846aba6f4/libgfortran%2Fgenerated%2Freshape_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19b76346c046b95ee4360a5c35d1e3a846aba6f4/libgfortran%2Fgenerated%2Freshape_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_r16.c?ref=19b76346c046b95ee4360a5c35d1e3a846aba6f4", "patch": "@@ -97,6 +97,8 @@ reshape_r16 (gfc_array_r16 * const restrict ret,\n \n   if (ret->data == NULL)\n     {\n+      index_type alloc_size;\n+\n       rs = 1;\n       for (n = 0; n < rdim; n++)\n \t{\n@@ -107,7 +109,13 @@ reshape_r16 (gfc_array_r16 * const restrict ret,\n \t  rs *= rex;\n \t}\n       ret->offset = 0;\n-      ret->data = internal_malloc_size ( rs * sizeof (GFC_REAL_16));\n+\n+      if (unlikely (rs < 1))\n+        alloc_size = 1;\n+      else\n+        alloc_size = rs * sizeof (GFC_REAL_16);\n+\n+      ret->data = internal_malloc_size (alloc_size);\n       ret->dtype = (source->dtype & ~GFC_DTYPE_RANK_MASK) | rdim;\n     }\n "}, {"sha": "2b859fca7d892dae7c7c5dbf281b134c4ea35311", "filename": "libgfortran/generated/reshape_r4.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19b76346c046b95ee4360a5c35d1e3a846aba6f4/libgfortran%2Fgenerated%2Freshape_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19b76346c046b95ee4360a5c35d1e3a846aba6f4/libgfortran%2Fgenerated%2Freshape_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_r4.c?ref=19b76346c046b95ee4360a5c35d1e3a846aba6f4", "patch": "@@ -97,6 +97,8 @@ reshape_r4 (gfc_array_r4 * const restrict ret,\n \n   if (ret->data == NULL)\n     {\n+      index_type alloc_size;\n+\n       rs = 1;\n       for (n = 0; n < rdim; n++)\n \t{\n@@ -107,7 +109,13 @@ reshape_r4 (gfc_array_r4 * const restrict ret,\n \t  rs *= rex;\n \t}\n       ret->offset = 0;\n-      ret->data = internal_malloc_size ( rs * sizeof (GFC_REAL_4));\n+\n+      if (unlikely (rs < 1))\n+        alloc_size = 1;\n+      else\n+        alloc_size = rs * sizeof (GFC_REAL_4);\n+\n+      ret->data = internal_malloc_size (alloc_size);\n       ret->dtype = (source->dtype & ~GFC_DTYPE_RANK_MASK) | rdim;\n     }\n "}, {"sha": "49b23524fdba01506620cd429fb77bf65821e97c", "filename": "libgfortran/generated/reshape_r8.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19b76346c046b95ee4360a5c35d1e3a846aba6f4/libgfortran%2Fgenerated%2Freshape_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19b76346c046b95ee4360a5c35d1e3a846aba6f4/libgfortran%2Fgenerated%2Freshape_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_r8.c?ref=19b76346c046b95ee4360a5c35d1e3a846aba6f4", "patch": "@@ -97,6 +97,8 @@ reshape_r8 (gfc_array_r8 * const restrict ret,\n \n   if (ret->data == NULL)\n     {\n+      index_type alloc_size;\n+\n       rs = 1;\n       for (n = 0; n < rdim; n++)\n \t{\n@@ -107,7 +109,13 @@ reshape_r8 (gfc_array_r8 * const restrict ret,\n \t  rs *= rex;\n \t}\n       ret->offset = 0;\n-      ret->data = internal_malloc_size ( rs * sizeof (GFC_REAL_8));\n+\n+      if (unlikely (rs < 1))\n+        alloc_size = 1;\n+      else\n+        alloc_size = rs * sizeof (GFC_REAL_8);\n+\n+      ret->data = internal_malloc_size (alloc_size);\n       ret->dtype = (source->dtype & ~GFC_DTYPE_RANK_MASK) | rdim;\n     }\n "}, {"sha": "5b39711cea67fd35a081d77bb67f316f033c5133", "filename": "libgfortran/intrinsics/reshape_generic.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19b76346c046b95ee4360a5c35d1e3a846aba6f4/libgfortran%2Fintrinsics%2Freshape_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19b76346c046b95ee4360a5c35d1e3a846aba6f4/libgfortran%2Fintrinsics%2Freshape_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Freshape_generic.c?ref=19b76346c046b95ee4360a5c35d1e3a846aba6f4", "patch": "@@ -85,6 +85,8 @@ reshape_internal (parray *ret, parray *source, shape_type *shape,\n \n   if (ret->data == NULL)\n     {\n+      index_type alloc_size;\n+\n       rs = 1;\n       for (n = 0; n < rdim; n++)\n \t{\n@@ -95,7 +97,14 @@ reshape_internal (parray *ret, parray *source, shape_type *shape,\n \t  rs *= rex;\n \t}\n       ret->offset = 0;\n-      ret->data = internal_malloc_size ( rs * size );\n+\n+      if (unlikely (rs < 1))\n+\talloc_size = 1;\n+      else\n+\talloc_size = rs * size;\n+\n+      ret->data = internal_malloc_size (alloc_size);\n+\n       ret->dtype = (source->dtype & ~GFC_DTYPE_RANK_MASK) | rdim;\n     }\n "}, {"sha": "d1486f3942e4fa8d22a370bb5940a6cdfd728595", "filename": "libgfortran/m4/reshape.m4", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19b76346c046b95ee4360a5c35d1e3a846aba6f4/libgfortran%2Fm4%2Freshape.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19b76346c046b95ee4360a5c35d1e3a846aba6f4/libgfortran%2Fm4%2Freshape.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Freshape.m4?ref=19b76346c046b95ee4360a5c35d1e3a846aba6f4", "patch": "@@ -101,6 +101,8 @@ reshape_'rtype_ccode` ('rtype` * const restrict ret,\n \n   if (ret->data == NULL)\n     {\n+      index_type alloc_size;\n+\n       rs = 1;\n       for (n = 0; n < rdim; n++)\n \t{\n@@ -111,7 +113,13 @@ reshape_'rtype_ccode` ('rtype` * const restrict ret,\n \t  rs *= rex;\n \t}\n       ret->offset = 0;\n-      ret->data = internal_malloc_size ( rs * sizeof ('rtype_name`));\n+\n+      if (unlikely (rs < 1))\n+        alloc_size = 1;\n+      else\n+        alloc_size = rs * sizeof ('rtype_name`);\n+\n+      ret->data = internal_malloc_size (alloc_size);\n       ret->dtype = (source->dtype & ~GFC_DTYPE_RANK_MASK) | rdim;\n     }\n "}]}