{"sha": "c68cae86bbe78100f263cc73ba9cbe452778f9e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY4Y2FlODZiYmU3ODEwMGYyNjNjYzczYmE5Y2JlNDUyNzc4ZjllNA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-02T19:22:35Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-02T19:25:18Z"}, "message": "C++: Module-specific tree flags\n\n\tgcc/cp/\n\t* cp-tree.h (DECL_MODULE_PURVIEW_P, DECL_MODULE_IMPORT_P)\n\t(DECL_MODULE_ENTITY_P): New.\n\t(DECL_MODULE_PENDING_SPECIALIZATIONS_P): New.\n\t(DECL_MODULE_PENDING_MEMBERS_P): New.\n\t(DECL_MODULE_ATTACHMENTS_P): New.\n\t(DECL_MODULE_EXPORT_P): New.\n\t(struct lang_decl_base): Shrink sel field.  Add new\n\tmodule-specific fields.", "tree": {"sha": "8095fdde5d39b7b8e1bad229925e4189d12888b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8095fdde5d39b7b8e1bad229925e4189d12888b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c68cae86bbe78100f263cc73ba9cbe452778f9e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c68cae86bbe78100f263cc73ba9cbe452778f9e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c68cae86bbe78100f263cc73ba9cbe452778f9e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c68cae86bbe78100f263cc73ba9cbe452778f9e4/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f461a883bab76c9075ebb1083c9a23af24c201b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f461a883bab76c9075ebb1083c9a23af24c201b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f461a883bab76c9075ebb1083c9a23af24c201b"}], "stats": {"total": 62, "additions": 57, "deletions": 5}, "files": [{"sha": "3b67e7ae76aada57cc56d8935f8ffbb50fc3275f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 57, "deletions": 5, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68cae86bbe78100f263cc73ba9cbe452778f9e4/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68cae86bbe78100f263cc73ba9cbe452778f9e4/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c68cae86bbe78100f263cc73ba9cbe452778f9e4", "patch": "@@ -488,6 +488,7 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n       CALL_EXPR_ORDERED_ARGS (in CALL_EXPR, AGGR_INIT_EXPR)\n       DECLTYPE_FOR_REF_CAPTURE (in DECLTYPE_TYPE)\n       CONSTRUCTOR_C99_COMPOUND_LITERAL (in CONSTRUCTOR)\n+      DECL_MODULE_EXPORT_P (in _DECL)\n       OVL_NESTED_P (in OVERLOAD)\n       LAMBDA_EXPR_INSTANTIATED (in LAMBDA_EXPR)\n       Reserved for DECL_MODULE_EXPORT (in DECL_)\n@@ -1644,6 +1645,46 @@ check_constraint_info (tree t)\n #define CONSTRAINED_PARM_PROTOTYPE(NODE) \\\n   DECL_INITIAL (TYPE_DECL_CHECK (NODE))\n \n+/* Module defines.  */\n+// Too many _DECLS: FUNCTION,VAR,TYPE,TEMPLATE,CONCEPT or NAMESPACE\n+#define DECL_MODULE_CHECK(NODE) (NODE)\n+\n+/* In the purview of a module (including header unit).  */\n+#define DECL_MODULE_PURVIEW_P(N) \\\n+  (DECL_LANG_SPECIFIC (DECL_MODULE_CHECK (N))->u.base.module_purview_p)\n+\n+/* True if the live version of the decl was imported.  */\n+#define DECL_MODULE_IMPORT_P(NODE) \\\n+  (DECL_LANG_SPECIFIC (DECL_MODULE_CHECK (NODE))->u.base.module_import_p)\n+\n+/* True if this decl is in the entity hash & array.  This means that\n+   some variant was imported, even if DECL_MODULE_IMPORT_P is false.  */\n+#define DECL_MODULE_ENTITY_P(NODE) \\\n+  (DECL_LANG_SPECIFIC (DECL_MODULE_CHECK (NODE))->u.base.module_entity_p)\n+\n+/* True if there are unloaded specializations keyed to this template.  */\n+#define DECL_MODULE_PENDING_SPECIALIZATIONS_P(NODE)\t\\\n+  (DECL_LANG_SPECIFIC (TEMPLATE_DECL_CHECK (NODE))\t\\\n+   ->u.base.module_pending_p)\n+\n+/* True if this class has unloaded members.  These should be loaded\n+   before we do member lookups.   */\n+#define DECL_MODULE_PENDING_MEMBERS_P(NODE)\t\t\\\n+  (DECL_LANG_SPECIFIC (TYPE_DECL_CHECK (NODE))\t\t\\\n+   ->u.base.module_pending_p)\n+\n+/* DECL that has attached decls for ODR-relatedness.  */\n+#define DECL_MODULE_ATTACHMENTS_P(NODE)\t\t\t\\\n+  (DECL_LANG_SPECIFIC (TREE_CHECK2(NODE,FUNCTION_DECL,VAR_DECL))\\\n+   ->u.base.module_pending_p)\n+\n+/* Whether this is an exported DECL.  Held on any decl that can appear\n+   at namespace scope (function, var, type, template, const or\n+   namespace).  templates copy from their template_result, consts have\n+   it for unscoped enums.  */\n+#define DECL_MODULE_EXPORT_P(NODE) TREE_LANG_FLAG_3 (NODE)\n+\n+\f\n /* The list of local parameters introduced by this requires-expression,\n    in the form of a chain of PARM_DECLs.  */\n #define REQUIRES_EXPR_PARMS(NODE) \\\n@@ -2655,15 +2696,15 @@ enum lang_decl_selector\n /* Flags shared by all forms of DECL_LANG_SPECIFIC.\n \n    Some of the flags live here only to make lang_decl_min/fn smaller.  Do\n-   not make this struct larger than 32 bits; instead, make sel smaller.  */\n+   not make this struct larger than 32 bits.  */\n \n struct GTY(()) lang_decl_base {\n-  /* Larger than necessary for faster access.  */\n-  ENUM_BITFIELD(lang_decl_selector) selector : 16;\n+  ENUM_BITFIELD(lang_decl_selector) selector : 3;\n   ENUM_BITFIELD(languages) language : 1;\n   unsigned use_template : 2;\n   unsigned not_really_extern : 1;\t   /* var or fn */\n   unsigned initialized_in_class : 1;\t   /* var or fn */\n+\n   unsigned threadprivate_or_deleted_p : 1; /* var or fn */\n   /* anticipated_p is no longer used for anticipated_decls (fn, type\n      or template).  It is used as DECL_OMP_PRIVATIZED_MEMBER in\n@@ -2672,11 +2713,22 @@ struct GTY(()) lang_decl_base {\n   unsigned friend_or_tls : 1;\t\t   /* var, fn, type or template */\n   unsigned unknown_bound_p : 1;\t\t   /* var */\n   unsigned odr_used : 1;\t\t   /* var or fn */\n-  unsigned spare : 1;\n   unsigned concept_p : 1;                  /* applies to vars and functions */\n   unsigned var_declared_inline_p : 1;\t   /* var */\n   unsigned dependent_init_p : 1;\t   /* var */\n-  /* 2 spare bits */\n+\n+  /* The following apply to VAR, FUNCTION, TYPE, CONCEPT, TEMPLATE,\n+     NAMESPACE decls.  */\n+  unsigned module_purview_p : 1;\t   /* in module purview (not GMF) */\n+  unsigned module_import_p : 1;     \t   /* from an import */\n+  unsigned module_entity_p : 1;\t\t   /* is in the entitity ary &\n+\t\t\t\t\t      hash.  */\n+  /* TEMPLATE_DECL has specializations or,\n+     TYPE_DECL has class members yet to load, or\n+     VAR_DECL or FUNCTION_DECL has attached decls.     */\n+  unsigned module_pending_p : 1;\n+\n+  /* 12 spare bits.  */\n };\n \n /* True for DECL codes which have template info and access.  */"}]}