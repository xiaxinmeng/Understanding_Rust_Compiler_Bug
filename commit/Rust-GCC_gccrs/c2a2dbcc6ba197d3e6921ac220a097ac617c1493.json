{"sha": "c2a2dbcc6ba197d3e6921ac220a097ac617c1493", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJhMmRiY2M2YmExOTdkM2U2OTIxYWMyMjBhMDk3YWM2MTdjMTQ5Mw==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2014-08-04T13:17:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-04T13:17:46Z"}, "message": "aspects.ads, [...]: Add entries for aspect Obsolescent.\n\n2014-08-04  Robert Dewar  <dewar@adacore.com>\n\n\t* aspects.ads, aspects.adb: Add entries for aspect Obsolescent.\n\t* gnat_rm.texi: Add documentation for aspect Obsolescent.\n\t* sem_ch13.adb (Analyze_Aspect_Specifications): Implement aspect\n\tObsolescent.\n\t(Check_Aspect_At_Freeze_Point): Add dummy entry for pragma Obsolescent.\n\t* s-osprim-mingw.adb: Minor reformatting.\n\t* sem_res.adb (Is_Atomic_Ref_With_Address): New function\n\t(Resolve_Indexed_Component): Rework warnings for non-atomic access\n\t(Resolve_Selected_Component): Add warnings for non-atomic access.\n\nFrom-SVN: r213588", "tree": {"sha": "de160f44f4e92149fac97ee73db9bac04386ffea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de160f44f4e92149fac97ee73db9bac04386ffea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2a2dbcc6ba197d3e6921ac220a097ac617c1493", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2a2dbcc6ba197d3e6921ac220a097ac617c1493", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2a2dbcc6ba197d3e6921ac220a097ac617c1493", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2a2dbcc6ba197d3e6921ac220a097ac617c1493/comments", "author": null, "committer": null, "parents": [{"sha": "6cf7eae6899491ba8759f8da6a86c8e27073d6f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cf7eae6899491ba8759f8da6a86c8e27073d6f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cf7eae6899491ba8759f8da6a86c8e27073d6f9"}], "stats": {"total": 130, "additions": 103, "deletions": 27}, "files": [{"sha": "2423d29a62e9a8e658f699165b04ee5a51a0283d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a2dbcc6ba197d3e6921ac220a097ac617c1493/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a2dbcc6ba197d3e6921ac220a097ac617c1493/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c2a2dbcc6ba197d3e6921ac220a097ac617c1493", "patch": "@@ -1,3 +1,15 @@\n+2014-08-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* aspects.ads, aspects.adb: Add entries for aspect Obsolescent.\n+\t* gnat_rm.texi: Add documentation for aspect Obsolescent.\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): Implement aspect\n+\tObsolescent.\n+\t(Check_Aspect_At_Freeze_Point): Add dummy entry for pragma Obsolescent.\n+\t* s-osprim-mingw.adb: Minor reformatting.\n+\t* sem_res.adb (Is_Atomic_Ref_With_Address): New function\n+\t(Resolve_Indexed_Component): Rework warnings for non-atomic access\n+\t(Resolve_Selected_Component): Add warnings for non-atomic access.\n+\n 2014-08-04  Doug Rupp  <rupp@adacore.com>\n \n \t* g-calend.adb (timeval_to_duration, duration_to_timeval): Change sec"}, {"sha": "82f0c911a679794c42b492cb9ebd85dbefc0ebdb", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a2dbcc6ba197d3e6921ac220a097ac617c1493/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a2dbcc6ba197d3e6921ac220a097ac617c1493/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=c2a2dbcc6ba197d3e6921ac220a097ac617c1493", "patch": "@@ -546,6 +546,7 @@ package body Aspects is\n     Aspect_Machine_Radix                => Aspect_Machine_Radix,\n     Aspect_No_Elaboration_Code_All      => Aspect_No_Elaboration_Code_All,\n     Aspect_No_Return                    => Aspect_No_Return,\n+    Aspect_Obsolescent                  => Aspect_Obsolescent,\n     Aspect_Object_Size                  => Aspect_Object_Size,\n     Aspect_Output                       => Aspect_Output,\n     Aspect_Pack                         => Aspect_Pack,"}, {"sha": "a7477bef66fcd77c5401fcd70a8061c84c8cfac2", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a2dbcc6ba197d3e6921ac220a097ac617c1493/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a2dbcc6ba197d3e6921ac220a097ac617c1493/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=c2a2dbcc6ba197d3e6921ac220a097ac617c1493", "patch": "@@ -109,6 +109,7 @@ package Aspects is\n       Aspect_Linker_Section,                -- GNAT\n       Aspect_Machine_Radix,\n       Aspect_Object_Size,                   -- GNAT\n+      Aspect_Obsolescent,                   -- GNAT\n       Aspect_Output,\n       Aspect_Part_Of,                       -- GNAT\n       Aspect_Post,\n@@ -333,6 +334,7 @@ package Aspects is\n       Aspect_Linker_Section            => Expression,\n       Aspect_Machine_Radix             => Expression,\n       Aspect_Object_Size               => Expression,\n+      Aspect_Obsolescent               => Optional_Expression,\n       Aspect_Output                    => Name,\n       Aspect_Part_Of                   => Expression,\n       Aspect_Post                      => Expression,\n@@ -433,6 +435,7 @@ package Aspects is\n       Aspect_No_Elaboration_Code_All      => Name_No_Elaboration_Code_All,\n       Aspect_No_Return                    => Name_No_Return,\n       Aspect_Object_Size                  => Name_Object_Size,\n+      Aspect_Obsolescent                  => Name_Obsolescent,\n       Aspect_Output                       => Name_Output,\n       Aspect_Pack                         => Name_Pack,\n       Aspect_Part_Of                      => Name_Part_Of,\n@@ -688,6 +691,7 @@ package Aspects is\n       Aspect_Initial_Condition            => Never_Delay,\n       Aspect_Initializes                  => Never_Delay,\n       Aspect_No_Elaboration_Code_All      => Never_Delay,\n+      Aspect_Obsolescent                  => Never_Delay,\n       Aspect_Part_Of                      => Never_Delay,\n       Aspect_Refined_Depends              => Never_Delay,\n       Aspect_Refined_Global               => Never_Delay,"}, {"sha": "c782ea3b65cc278f49fffe3796c14960742b487e", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a2dbcc6ba197d3e6921ac220a097ac617c1493/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a2dbcc6ba197d3e6921ac220a097ac617c1493/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=c2a2dbcc6ba197d3e6921ac220a097ac617c1493", "patch": "@@ -313,6 +313,7 @@ Implementation Defined Aspects\n * Aspect Linker_Section::\n * Aspect No_Elaboration_Code_All::\n * Aspect Object_Size::\n+* Aspect Obsolescent::\n * Aspect Part_Of::\n * Aspect Persistent_BSS::\n * Aspect Predicate::\n@@ -8068,6 +8069,7 @@ clause.\n * Aspect Lock_Free::\n * Aspect No_Elaboration_Code_All::\n * Aspect Object_Size::\n+* Aspect Obsolescent::\n * Aspect Part_Of::\n * Aspect Persistent_BSS::\n * Aspect Predicate::\n@@ -8350,6 +8352,14 @@ statement for a program unit.\n This aspect is equivalent to an @code{Object_Size} attribute definition\n clause.\n \n+@node Aspect Obsolescent\n+@unnumberedsec Aspect Obsolescent\n+@findex Obsolsecent\n+@noindent\n+This aspect is equivalent to an @code{Obsolescent} pragma. Note that the\n+evaluation of this aspect happens at the point of occurrence, it is not\n+delayed until the freeze point.\n+\n @node Aspect Part_Of\n @unnumberedsec Aspect Part_Of\n @findex Part_Of"}, {"sha": "f8a41dd509ced5584a3e0d4f04c5766f6877195e", "filename": "gcc/ada/s-osprim-mingw.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a2dbcc6ba197d3e6921ac220a097ac617c1493/gcc%2Fada%2Fs-osprim-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a2dbcc6ba197d3e6921ac220a097ac617c1493/gcc%2Fada%2Fs-osprim-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osprim-mingw.adb?ref=c2a2dbcc6ba197d3e6921ac220a097ac617c1493", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1998-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1998-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -87,15 +87,15 @@ package body System.OS_Primitives is\n    --  the base data for the changes to get undetected.\n \n    type Signature_Type is mod 2**32;\n-   Signature     : Signature_Type := 0;\n+   Signature : Signature_Type := 0;\n    pragma Atomic (Signature);\n \n    procedure Get_Base_Time (Data : out Clock_Data);\n    --  Retrieve the base time and base ticks. These values will be used by\n    --  clock to compute the current time by adding to it a fraction of the\n-   --  performance counter. This is for the implementation of a\n-   --  high-resolution clock. Note that this routine does not change the base\n-   --  monotonic values used by the monotonic clock.\n+   --  performance counter. This is for the implementation of a high-resolution\n+   --  clock. Note that this routine does not change the base monotonic values\n+   --  used by the monotonic clock.\n \n    -----------\n    -- Clock --"}, {"sha": "a73712bfb5f239ea55963baae6b5282bd9c73030", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a2dbcc6ba197d3e6921ac220a097ac617c1493/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a2dbcc6ba197d3e6921ac220a097ac617c1493/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=c2a2dbcc6ba197d3e6921ac220a097ac617c1493", "patch": "@@ -2388,6 +2388,25 @@ package body Sem_Ch13 is\n                   goto Continue;\n                end Initializes;\n \n+               --  Obsolescent\n+\n+               when Aspect_Obsolescent => declare\n+                  Args : List_Id;\n+\n+               begin\n+                  if No (Expr) then\n+                     Args := No_List;\n+                  else\n+                     Args := New_List (\n+                       Make_Pragma_Argument_Association (Sloc (Expr),\n+                         Expression => Relocate_Node (Expr)));\n+                  end if;\n+\n+                  Make_Aitem_Pragma\n+                    (Pragma_Argument_Associations => Args,\n+                     Pragma_Name                  => Chars (Id));\n+               end;\n+\n                --  Part_Of\n \n                when Aspect_Part_Of =>\n@@ -8758,6 +8777,7 @@ package body Sem_Ch13 is\n               Aspect_Implicit_Dereference      |\n               Aspect_Initial_Condition         |\n               Aspect_Initializes               |\n+              Aspect_Obsolescent               |\n               Aspect_Part_Of                   |\n               Aspect_Post                      |\n               Aspect_Postcondition             |"}, {"sha": "f45e07e06ccd8a64598c7e49609dcf3d6dc90ae4", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 51, "deletions": 22, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a2dbcc6ba197d3e6921ac220a097ac617c1493/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a2dbcc6ba197d3e6921ac220a097ac617c1493/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=c2a2dbcc6ba197d3e6921ac220a097ac617c1493", "patch": "@@ -128,6 +128,11 @@ package body Sem_Res is\n    --  for restriction No_Direct_Boolean_Operators. This procedure also handles\n    --  the style check for Style_Check_Boolean_And_Or.\n \n+   function Is_Atomic_Ref_With_Address (N : Node_Id) return Boolean;\n+   --  N is either an indexed component or a selected component. This function\n+   --  returns true if the prefix refers to an object that has an address\n+   --  clause (the case in which we may want to issue a warning).\n+\n    function Is_Definite_Access_Type (E : Entity_Id) return Boolean;\n    --  Determine whether E is an access type declared by an access declaration,\n    --  and not an (anonymous) allocator type.\n@@ -1131,6 +1136,29 @@ package body Sem_Res is\n       end if;\n    end Check_Parameterless_Call;\n \n+   --------------------------------\n+   -- Is_Atomic_Ref_With_Address --\n+   --------------------------------\n+\n+   function Is_Atomic_Ref_With_Address (N : Node_Id) return Boolean is\n+      Pref : constant Node_Id := Prefix (N);\n+\n+   begin\n+      if not Is_Entity_Name (Pref) then\n+         return False;\n+\n+      else\n+         declare\n+            Pent : constant Entity_Id := Entity (Pref);\n+            Ptyp : constant Entity_Id := Etype (Pent);\n+         begin\n+            return not Is_Access_Type (Ptyp)\n+              and then (Is_Atomic (Ptyp) or else Is_Atomic (Pent))\n+              and then Present (Address_Clause (Pent));\n+         end;\n+      end if;\n+   end Is_Atomic_Ref_With_Address;\n+\n    -----------------------------\n    -- Is_Definite_Access_Type --\n    -----------------------------\n@@ -7973,19 +8001,20 @@ package body Sem_Res is\n          Eval_Indexed_Component (N);\n       end if;\n \n-      --  If the array type is atomic, and is packed, and we are in a left side\n-      --  context, then this is worth a warning, since we have a situation\n-      --  where the access to the component may cause extra read/writes of\n-      --  the atomic array object, which could be considered unexpected.\n+      --  If the array type is atomic, and the component is not atomic, then\n+      --  this is worth a warning, since we have a situation where the access\n+      --  to the component may cause extra read/writes of the atomic array\n+      --  object, or partial word accesses, which could be unexpected.\n \n       if Nkind (N) = N_Indexed_Component\n-        and then (Is_Atomic (Array_Type)\n-                   or else (Is_Entity_Name (Prefix (N))\n-                             and then Is_Atomic (Entity (Prefix (N)))))\n-        and then Is_Bit_Packed_Array (Array_Type)\n-        and then Is_LHS (N) = Yes\n+        and then Is_Atomic_Ref_With_Address (N)\n+        and then not (Has_Atomic_Components (Array_Type)\n+                       or else (Is_Entity_Name (Prefix (N))\n+                                 and then Has_Atomic_Components\n+                                            (Entity (Prefix (N)))))\n+        and then not Is_Atomic (Component_Type (Array_Type))\n       then\n-         Error_Msg_N (\"??assignment to component of packed atomic array\",\n+         Error_Msg_N (\"??access to non-atomic component of atomic array\",\n                       Prefix (N));\n          Error_Msg_N (\"??\\may cause unexpected accesses to atomic object\",\n                       Prefix (N));\n@@ -9293,7 +9322,7 @@ package body Sem_Res is\n    procedure Resolve_Selected_Component (N : Node_Id; Typ : Entity_Id) is\n       Comp  : Entity_Id;\n       Comp1 : Entity_Id        := Empty; -- prevent junk warning\n-      P     : constant Node_Id := Prefix  (N);\n+      P     : constant Node_Id := Prefix (N);\n       S     : constant Node_Id := Selector_Name (N);\n       T     : Entity_Id        := Etype (P);\n       I     : Interp_Index;\n@@ -9470,22 +9499,22 @@ package body Sem_Res is\n       --  Note: No Eval processing is required, because the prefix is of a\n       --  record type, or protected type, and neither can possibly be static.\n \n-      --  If the array type is atomic, and is packed, and we are in a left side\n-      --  context, then this is worth a warning, since we have a situation\n-      --  where the access to the component may cause extra read/writes of the\n-      --  atomic array object, which could be considered unexpected.\n+      --  If the record type is atomic, and the component is non-atomic, then\n+      --  this is worth a warning, since we have a situation where the access\n+      --  to the component may cause extra read/writes of the atomic array\n+      --  object, or partial word accesses, both of which may be unexpected.\n \n       if Nkind (N) = N_Selected_Component\n-        and then (Is_Atomic (T)\n-                   or else (Is_Entity_Name (Prefix (N))\n-                             and then Is_Atomic (Entity (Prefix (N)))))\n-        and then Is_Packed (T)\n-        and then Is_LHS (N) = Yes\n+        and then Is_Atomic_Ref_With_Address (N)\n+        and then not Is_Atomic (Entity (S))\n+        and then not Is_Atomic (Etype (Entity (S)))\n       then\n          Error_Msg_N\n-           (\"??assignment to component of packed atomic record\", Prefix (N));\n+           (\"??access to non-atomic component of atomic record\",\n+            Prefix (N));\n          Error_Msg_N\n-           (\"\\??may cause unexpected accesses to atomic object\", Prefix (N));\n+           (\"\\??may cause unexpected accesses to atomic object\",\n+            Prefix (N));\n       end if;\n \n       Analyze_Dimension (N);"}]}