{"sha": "2b71f4a4f8515c5d0919fc5c220f427e7c837e7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI3MWY0YTRmODUxNWM1ZDA5MTlmYzVjMjIwZjQyN2U3YzgzN2U3Zg==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-09-04T15:13:40Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-09-04T15:13:40Z"}, "message": "options.texi: Document that Var and Init are required if CPP is given.\n\ngcc/ChangeLog:\n\n2014-09-04  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\t* doc/options.texi: Document that Var and Init are required if CPP\n\tis given.\n\t* optc-gen.awk: Require Var and Init if CPP is given.\n\t* common.opt (Wpedantic): Use Init.\n\nlibcpp/ChangeLog:\n\n2014-09-04  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\t* macro.c (replace_args): Use cpp_pedwarning, cpp_warning and\n\tCPP_W flags.\n\t* include/cpplib.h: Add CPP_W_C90_C99_COMPAT and CPP_W_PEDANTIC.\n\t* init.c (cpp_create_reader): Do not init to -1 here.\n\t* expr.c (num_binary_op): Use cpp_pedwarning.\n\ngcc/c-family/ChangeLog:\n\n2014-09-04  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\t* c.opt (Wc90-c99-compat,Wc++-compat,Wcomment,Wendif-labels,\n\tWinvalid-pch,Wlong-long,Wmissing-include-dirs,Wmultichar,Wpedantic,\n\t(Wdate-time,Wtraditional,Wundef,Wvariadic-macros): Add CPP, Var\n\tand Init.\n\t* c-opts.c (c_common_handle_option): Do not handle here.\n\t(sanitize_cpp_opts): Likewise.\n\t* c-common.c (struct reason_option_codes_t): Handle\n\tCPP_W_C90_C99_COMPAT and CPP_W_PEDANTIC.\n\ngcc/testsuite/ChangeLog:\n\n2014-09-04  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\t* gcc.dg/cpp/endif-pedantic2.c: More general options do not\n\toverride specific ones, but specific ones do.\n\nFrom-SVN: r214904", "tree": {"sha": "c7538be5564ae0acb2315138a89ce1f3cc020b22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7538be5564ae0acb2315138a89ce1f3cc020b22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b71f4a4f8515c5d0919fc5c220f427e7c837e7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b71f4a4f8515c5d0919fc5c220f427e7c837e7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b71f4a4f8515c5d0919fc5c220f427e7c837e7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b71f4a4f8515c5d0919fc5c220f427e7c837e7f/comments", "author": null, "committer": null, "parents": [{"sha": "6bf5ce8f85c50886913d6f26a248f4c4c1445bd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bf5ce8f85c50886913d6f26a248f4c4c1445bd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bf5ce8f85c50886913d6f26a248f4c4c1445bd2"}], "stats": {"total": 180, "additions": 101, "deletions": 79}, "files": [{"sha": "a2db9c2f8a6dae7f8d80593531b53129461931a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b71f4a4f8515c5d0919fc5c220f427e7c837e7f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b71f4a4f8515c5d0919fc5c220f427e7c837e7f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b71f4a4f8515c5d0919fc5c220f427e7c837e7f", "patch": "@@ -1,3 +1,10 @@\n+2014-09-04  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* doc/options.texi: Document that Var and Init are required if CPP\n+\tis given.\n+\t* optc-gen.awk: Require Var and Init if CPP is given.\n+\t* common.opt (Wpedantic): Use Init.\n+\n 2014-09-04  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (special_handling_values): Add"}, {"sha": "0f2e6d193bf44cf521aab8e59dad50631cda7e78", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b71f4a4f8515c5d0919fc5c220f427e7c837e7f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b71f4a4f8515c5d0919fc5c220f427e7c837e7f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=2b71f4a4f8515c5d0919fc5c220f427e7c837e7f", "patch": "@@ -1,3 +1,14 @@\n+2014-09-04  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* c.opt (Wc90-c99-compat,Wc++-compat,Wcomment,Wendif-labels,\n+\tWinvalid-pch,Wlong-long,Wmissing-include-dirs,Wmultichar,Wpedantic,\n+\t(Wdate-time,Wtraditional,Wundef,Wvariadic-macros): Add CPP, Var\n+\tand Init.\n+\t* c-opts.c (c_common_handle_option): Do not handle here.\n+\t(sanitize_cpp_opts): Likewise.\n+\t* c-common.c (struct reason_option_codes_t): Handle\n+\tCPP_W_C90_C99_COMPAT and CPP_W_PEDANTIC.\n+\n 2014-09-03  Marek Polacek  <polacek@redhat.com>\n \n \t* c.opt (Wlogical-not-parentheses): Enable by -Wall."}, {"sha": "baa8415a5074eb4c4ec7097be321f231caaf32b0", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b71f4a4f8515c5d0919fc5c220f427e7c837e7f/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b71f4a4f8515c5d0919fc5c220f427e7c837e7f/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=2b71f4a4f8515c5d0919fc5c220f427e7c837e7f", "patch": "@@ -9676,6 +9676,7 @@ struct reason_option_codes_t\n \n static const struct reason_option_codes_t option_codes[] = {\n   {CPP_W_BUILTIN_MACRO_REDEFINED,\tOPT_Wbuiltin_macro_redefined},\n+  {CPP_W_C90_C99_COMPAT,                OPT_Wc90_c99_compat},\n   {CPP_W_COMMENTS,\t\t\tOPT_Wcomment},\n   {CPP_W_CXX_OPERATOR_NAMES,\t\tOPT_Wc___compat},\n   {CPP_W_DATE_TIME,\t\t\tOPT_Wdate_time},\n@@ -9687,6 +9688,7 @@ static const struct reason_option_codes_t option_codes[] = {\n   {CPP_W_MISSING_INCLUDE_DIRS,          OPT_Wmissing_include_dirs},\n   {CPP_W_MULTICHAR,\t\t\tOPT_Wmultichar},\n   {CPP_W_NORMALIZE,\t\t\tOPT_Wnormalized_},\n+  {CPP_W_PEDANTIC,                      OPT_Wpedantic},\n   {CPP_W_TRADITIONAL,\t\t\tOPT_Wtraditional},\n   {CPP_W_TRIGRAPHS,\t\t\tOPT_Wtrigraphs},\n   {CPP_W_UNDEF,\t\t\t\tOPT_Wundef},"}, {"sha": "b701022ce1019d78ac4551eb40ce037a409b2919", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 10, "deletions": 31, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b71f4a4f8515c5d0919fc5c220f427e7c837e7f/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b71f4a4f8515c5d0919fc5c220f427e7c837e7f/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=2b71f4a4f8515c5d0919fc5c220f427e7c837e7f", "patch": "@@ -384,14 +384,6 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       cpp_opts->warn_num_sign_change = value;\n       break;\n \n-    case OPT_Wc___compat:\n-      cpp_opts->warn_cxx_operator_names = value;\n-      break;\n-\n-    case OPT_Wlong_long:\n-      cpp_opts->cpp_warn_long_long = value;\n-      break;\n-\n     case OPT_Wnormalized_:\n       /* FIXME: Move all this to c.opt.  */\n       if (kind == DK_ERROR)\n@@ -415,10 +407,6 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n \t  break;\n \t}\n \n-    case OPT_Wtraditional:\n-      cpp_opts->cpp_warn_traditional = value;\n-      break;\n-\n     case OPT_Wunknown_pragmas:\n       /* Set to greater than 1, so that even unknown pragmas in\n \t system headers will be warned about.  */\n@@ -634,14 +622,6 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n \terror (\"output filename specified twice\");\n       break;\n \n-      /* We need to handle the -Wpedantic switch here, rather than in\n-\t c_common_post_options, so that a subsequent -Wno-endif-labels\n-\t is not overridden.  */\n-    case OPT_Wpedantic:\n-      cpp_opts->cpp_pedantic = 1;\n-      cpp_opts->warn_endif_labels = 1;\n-      break;\n-\n     case OPT_print_objc_runtime_info:\n       print_struct_values = 1;\n       break;\n@@ -1269,20 +1249,19 @@ sanitize_cpp_opts (void)\n \n   cpp_opts->unsigned_char = !flag_signed_char;\n   cpp_opts->stdc_0_in_system_headers = STDC_0_IN_SYSTEM_HEADERS;\n-  cpp_opts->cpp_warn_c90_c99_compat = warn_c90_c99_compat;\n \n   /* Wlong-long is disabled by default. It is enabled by:\n       [-Wpedantic | -Wtraditional] -std=[gnu|c]++98 ; or\n-      [-Wpedantic | -Wtraditional] -std=non-c99 ; or\n-      -Wc90-c99-compat, if specified.\n-\n-      Either -Wlong-long or -Wno-long-long override any other settings.  */\n-  if (warn_long_long == -1 && warn_c90_c99_compat != -1)\n-    warn_long_long = warn_c90_c99_compat;\n-  else if (warn_long_long == -1)\n-    warn_long_long = ((pedantic || warn_traditional)\n-\t\t      && (c_dialect_cxx () ? cxx_dialect == cxx98 : !flag_isoc99));\n-  cpp_opts->cpp_warn_long_long = warn_long_long;\n+      [-Wpedantic | -Wtraditional] -std=non-c99 \n+\n+      Either -Wlong-long or -Wno-long-long override any other settings.\n+      ??? These conditions should be handled in c.opt.  */\n+  if (warn_long_long == -1)\n+    {\n+      warn_long_long = ((pedantic || warn_traditional)\n+\t\t\t&& (c_dialect_cxx () ? cxx_dialect == cxx98 : !flag_isoc99));\n+      cpp_opts->cpp_warn_long_long = warn_long_long;\n+    }\n \n   /* If we're generating preprocessor output, emit current directory\n      if explicitly requested or if debugging information is enabled."}, {"sha": "d1c5c056b76b0a19c37d51d0b1f387b9697ff30c", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b71f4a4f8515c5d0919fc5c220f427e7c837e7f/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b71f4a4f8515c5d0919fc5c220f427e7c837e7f/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=2b71f4a4f8515c5d0919fc5c220f427e7c837e7f", "patch": "@@ -296,15 +296,15 @@ C ObjC C++ ObjC++ CPP(warn_builtin_macro_redefined) Var(cpp_warn_builtin_macro_r\n Warn when a built-in preprocessor macro is undefined or redefined\n \n Wc90-c99-compat\n-C ObjC Var(warn_c90_c99_compat) Init(-1) Warning\n+C ObjC CPP(cpp_warn_c90_c99_compat) Var(warn_c90_c99_compat) Init(-1) Warning\n Warn about features not present in ISO C90, but present in ISO C99\n \n Wc99-c11-compat\n C ObjC Var(warn_c99_c11_compat) Init(-1) Warning\n Warn about features not present in ISO C99, but present in ISO C11\n \n Wc++-compat\n-C ObjC Var(warn_cxx_compat) Warning\n+C ObjC Var(warn_cxx_compat) CPP(warn_cxx_operator_names) Init(0) Warning\n Warn about C constructs that are not in the common subset of C and C++\n \n Wc++0x-compat\n@@ -328,7 +328,7 @@ C ObjC C++ ObjC++ Var(warn_clobbered) Warning EnabledBy(Wextra)\n Warn about variables that might be changed by \\\"longjmp\\\" or \\\"vfork\\\"\n \n Wcomment\n-C ObjC C++ ObjC++ CPP(warn_comments) Var(cpp_warn_comment) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n+C ObjC C++ ObjC++ CPP(warn_comments) Var(cpp_warn_comment) Init(0) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n Warn about possibly nested block comments, and C++ comments spanning more than one physical line\n \n Wcomments\n@@ -392,7 +392,7 @@ C ObjC C++ ObjC++ Var(warn_empty_body) Warning EnabledBy(Wextra)\n Warn about an empty body in an if or else statement\n \n Wendif-labels\n-C ObjC C++ ObjC++ CPP(warn_endif_labels) Var(cpp_warn_endif_labels) Init(1) Warning\n+C ObjC C++ ObjC++ CPP(warn_endif_labels) Var(cpp_warn_endif_labels) Init(1) Warning LangEnabledBy(C ObjC C++ ObjC++,Wpedantic)\n Warn about stray tokens after #elif and #endif\n \n Wenum-compare\n@@ -503,7 +503,7 @@ C++ ObjC++ Var(warn_invalid_offsetof) Init(1) Warning\n Warn about invalid uses of the \\\"offsetof\\\" macro\n \n Winvalid-pch\n-C ObjC C++ ObjC++ CPP(warn_invalid_pch) Var(cpp_warn_invalid_pch) Warning\n+C ObjC C++ ObjC++ CPP(warn_invalid_pch) Var(cpp_warn_invalid_pch) Init(0) Warning\n Warn about PCH files that are found but not used\n \n Wjump-misses-init\n@@ -523,7 +523,7 @@ C ObjC C++ ObjC++ Var(warn_logical_not_paren) Warning LangEnabledBy(C ObjC C++ O\n Warn when logical not is used on the left hand side operand of a comparison\n \n Wlong-long\n-C ObjC C++ ObjC++ Var(warn_long_long) Init(-1) Warning\n+C ObjC C++ ObjC++ CPP(cpp_warn_long_long) Var(warn_long_long) Init(-1) Warning LangEnabledBy(C ObjC,Wc90-c99-compat)\n Do not warn about using \\\"long long\\\" when -pedantic\n \n Wmain\n@@ -583,7 +583,7 @@ C ObjC C++ ObjC++ Alias(Wsuggest-attribute=format)\n ;\n \n Wmissing-include-dirs\n-C ObjC C++ ObjC++ CPP(warn_missing_include_dirs) Var(cpp_warn_missing_include_dirs) Warning\n+C ObjC C++ ObjC++ CPP(warn_missing_include_dirs) Var(cpp_warn_missing_include_dirs) Init(0) Warning\n Warn about user-specified include directories that do not exist\n \n Wmissing-parameter-type\n@@ -598,7 +598,7 @@ Wmudflap\n C ObjC C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n \n Wmultichar\n-C ObjC C++ ObjC++ CPP(warn_multichar) Var(cpp_warn_multichar) Warning\n+C ObjC C++ ObjC++ CPP(warn_multichar) Var(cpp_warn_multichar) Init(0) Warning\n Warn about use of multi-character character constants\n \n Wnarrowing\n@@ -674,7 +674,7 @@ C ObjC C++ ObjC++ Var(warn_parentheses) Warning LangEnabledBy(C ObjC C++ ObjC++,\n Warn about possibly missing parentheses\n \n Wpedantic\n-C ObjC C++ ObjC++ Warning\n+C ObjC C++ ObjC++ CPP(cpp_pedantic) Warning\n ; Documented in common.opt\n \n Wpmf-conversions\n@@ -702,7 +702,7 @@ C ObjC C++ ObjC++ Var(warn_pragmas) Init(1) Warning\n Warn about misuses of pragmas\n \n Wdate-time\n-C ObjC C++ ObjC++ CPP(warn_date_time) Var(cpp_warn_date_time) Warning\n+C ObjC C++ ObjC++ CPP(warn_date_time) Var(cpp_warn_date_time) Init(0) Warning\n Warn about __TIME__, __DATE__ and __TIMESTAMP__ usage\n \n Wproperty-assign-default\n@@ -786,7 +786,7 @@ C ObjC C++ ObjC++ Warning\n ; Documented in common.opt\n \n Wtraditional\n-C ObjC Var(warn_traditional) Warning\n+C ObjC CPP(cpp_warn_traditional) Var(warn_traditional) Init(0) Warning\n Warn about features not present in traditional C\n \n Wtraditional-conversion\n@@ -802,7 +802,7 @@ ObjC ObjC++ Var(warn_undeclared_selector) Warning\n Warn about @selector()s without previously declared methods\n \n Wundef\n-C ObjC C++ ObjC++ CPP(warn_undef) Var(cpp_warn_undef) Warning\n+C ObjC C++ ObjC++ CPP(warn_undef) Var(cpp_warn_undef) Init(0) Warning\n Warn if an undefined macro is used in an #if directive\n \n Wuninitialized\n@@ -838,7 +838,7 @@ C ObjC C++ ObjC++ Var(warn_unused_result) Init(1) Warning\n Warn if a caller of a function, marked with attribute warn_unused_result, does not use its return value\n \n Wvariadic-macros\n-C ObjC C++ ObjC++ CPP(warn_variadic_macros) Var(cpp_warn_variadic_macros) Warning LangEnabledBy(C ObjC C++ ObjC++,Wpedantic)\n+C ObjC C++ ObjC++ CPP(warn_variadic_macros) Var(cpp_warn_variadic_macros) Init(0) Warning LangEnabledBy(C ObjC C++ ObjC++,Wpedantic)\n Warn about using variadic macros\n \n Wvariadic-macros"}, {"sha": "7d78803f329d892855bc3108f974b95706590ba6", "filename": "gcc/common.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b71f4a4f8515c5d0919fc5c220f427e7c837e7f/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b71f4a4f8515c5d0919fc5c220f427e7c837e7f/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=2b71f4a4f8515c5d0919fc5c220f427e7c837e7f", "patch": "@@ -604,7 +604,7 @@ Common Var(warn_padded) Warning\n Warn when padding is required to align structure members\n \n Wpedantic\n-Common Var(pedantic) Warning\n+Common Var(pedantic) Init(0) Warning\n Issue warnings needed for strict compliance to the standard\n \n Wreturn-local-addr"}, {"sha": "df52cdbfab3b318509823df38a0ee201c89cc309", "filename": "gcc/doc/options.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b71f4a4f8515c5d0919fc5c220f427e7c837e7f/gcc%2Fdoc%2Foptions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b71f4a4f8515c5d0919fc5c220f427e7c837e7f/gcc%2Fdoc%2Foptions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Foptions.texi?ref=2b71f4a4f8515c5d0919fc5c220f427e7c837e7f", "patch": "@@ -485,6 +485,7 @@ to determine if a precompiled header file matches.\n \n @item CPP(@var{var})\n The state of this option should be kept in sync with the preprocessor\n-option @var{var}.\n+option @var{var}.  If this property is set, then properties @code{Var}\n+and @code{Init} must be set as well.\n \n @end table"}, {"sha": "ecb225c163ad6cfe21a7295589124865145010df", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b71f4a4f8515c5d0919fc5c220f427e7c837e7f/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b71f4a4f8515c5d0919fc5c220f427e7c837e7f/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=2b71f4a4f8515c5d0919fc5c220f427e7c837e7f", "patch": "@@ -500,11 +500,20 @@ for (i = 0; i < n_opts; i++) {\n     }\n \n     cpp_option = nth_arg(0, opt_args(\"CPP\", flags[i]));\n-    opt_var_name = var_name(flags[i]);\n-    if (cpp_option != \"\" && opt_var_name != \"\") {\n-        print \"    case \" opt_enum(opts[i]) \":\"\n-        print \"      cpp_opts->\" cpp_option \" = opts->x_\" opt_var_name \";\"\n-        print \"      break;\"\n+    if (cpp_option != \"\") {\n+        opt_var_name = var_name(flags[i]);\n+        init = opt_args(\"Init\", flags[i])\n+        if (opt_var_name != \"\" && init != \"\") {\n+            print \"    case \" opt_enum(opts[i]) \":\"\n+            print \"      cpp_opts->\" cpp_option \" = opts->x_\" opt_var_name \";\"\n+            print \"      break;\"\n+        } else if (opt_var_name == \"\" && init == \"\") {\n+            print \"#error CPP() requires setting Init() and Var() for \" opts[i]\n+        } else if (opt_var_name != \"\") {\n+            print \"#error CPP() requires setting Init() for \" opts[i]\n+        } else {\n+            print \"#error CPP() requires setting Var() for \" opts[i]\n+        }\n     }\n }\n print \"    default:    \""}, {"sha": "2a7e605a107d0babbf2fe834b502838c58be88c6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b71f4a4f8515c5d0919fc5c220f427e7c837e7f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b71f4a4f8515c5d0919fc5c220f427e7c837e7f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2b71f4a4f8515c5d0919fc5c220f427e7c837e7f", "patch": "@@ -1,3 +1,8 @@\n+2014-09-04  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* gcc.dg/cpp/endif-pedantic2.c: More general options do not\n+\toverride specific ones, but specific ones do.\n+\n 2014-09-04  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/swaps-p8-13.c: New test."}, {"sha": "fd014f6a5011a8770e2f106d2710d343a7513899", "filename": "gcc/testsuite/gcc.dg/cpp/endif-pedantic2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b71f4a4f8515c5d0919fc5c220f427e7c837e7f/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fendif-pedantic2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b71f4a4f8515c5d0919fc5c220f427e7c837e7f/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fendif-pedantic2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fendif-pedantic2.c?ref=2b71f4a4f8515c5d0919fc5c220f427e7c837e7f", "patch": "@@ -1,7 +1,7 @@\n /* Copyright (C) 2002 Free Software Foundation, Inc.  */\n \n /* { dg-do preprocess } */\n-/* { dg-options \"-Wno-endif-labels -pedantic-errors\" } */\n+/* { dg-options \"-Wno-endif-labels -pedantic-errors -Wendif-labels\" } */\n \n /* Tests combinations of -pedantic and -Wno-endif-labels; see extratokens2.c\n    for more general tests.  */"}, {"sha": "890b7fc6897cb85942ad1c35d65d5e7386fb59e8", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b71f4a4f8515c5d0919fc5c220f427e7c837e7f/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b71f4a4f8515c5d0919fc5c220f427e7c837e7f/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=2b71f4a4f8515c5d0919fc5c220f427e7c837e7f", "patch": "@@ -1,3 +1,11 @@\n+2014-09-04  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* macro.c (replace_args): Use cpp_pedwarning, cpp_warning and\n+\tCPP_W flags.\n+\t* include/cpplib.h: Add CPP_W_C90_C99_COMPAT and CPP_W_PEDANTIC.\n+\t* init.c (cpp_create_reader): Do not init to -1 here.\n+\t* expr.c (num_binary_op): Use cpp_pedwarning.\n+\n 2014-08-29  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* directives.c (check_eol_1): New."}, {"sha": "003fcb0560ecb6812130a77ee9719541a8bfbfc8", "filename": "libcpp/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b71f4a4f8515c5d0919fc5c220f427e7c837e7f/libcpp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b71f4a4f8515c5d0919fc5c220f427e7c837e7f/libcpp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fexpr.c?ref=2b71f4a4f8515c5d0919fc5c220f427e7c837e7f", "patch": "@@ -1880,8 +1880,8 @@ num_binary_op (cpp_reader *pfile, cpp_num lhs, cpp_num rhs, enum cpp_ttype op)\n     default: /* case CPP_COMMA: */\n       if (CPP_PEDANTIC (pfile) && (!CPP_OPTION (pfile, c99)\n \t\t\t\t   || !pfile->state.skip_eval))\n-\tcpp_error (pfile, CPP_DL_PEDWARN,\n-\t\t   \"comma operator in operand of #if\");\n+\tcpp_pedwarning (pfile, CPP_W_PEDANTIC,\n+\t\t\t\"comma operator in operand of #if\");\n       lhs = rhs;\n       break;\n     }"}, {"sha": "28cb495d42563c152da3ff8eb662326670eb526b", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b71f4a4f8515c5d0919fc5c220f427e7c837e7f/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b71f4a4f8515c5d0919fc5c220f427e7c837e7f/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=2b71f4a4f8515c5d0919fc5c220f427e7c837e7f", "patch": "@@ -939,7 +939,9 @@ enum {\n   CPP_W_INVALID_PCH,\n   CPP_W_WARNING_DIRECTIVE,\n   CPP_W_LITERAL_SUFFIX,\n-  CPP_W_DATE_TIME\n+  CPP_W_DATE_TIME,\n+  CPP_W_PEDANTIC,\n+  CPP_W_C90_C99_COMPAT\n };\n \n /* Output a diagnostic of some kind.  */"}, {"sha": "d61237490a4dfa787f905793eca32d8355a28194", "filename": "libcpp/init.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b71f4a4f8515c5d0919fc5c220f427e7c837e7f/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b71f4a4f8515c5d0919fc5c220f427e7c837e7f/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=2b71f4a4f8515c5d0919fc5c220f427e7c837e7f", "patch": "@@ -185,6 +185,7 @@ cpp_create_reader (enum c_lang lang, cpp_hash_table *table,\n   CPP_OPTION (pfile, operator_names) = 1;\n   CPP_OPTION (pfile, warn_trigraphs) = 2;\n   CPP_OPTION (pfile, warn_endif_labels) = 1;\n+  CPP_OPTION (pfile, cpp_warn_c90_c99_compat) = -1;\n   CPP_OPTION (pfile, cpp_warn_deprecated) = 1;\n   CPP_OPTION (pfile, cpp_warn_long_long) = 0;\n   CPP_OPTION (pfile, dollars_in_ident) = 1;"}, {"sha": "8fa977057406dc58a4360e1cddc936da930a78ad", "filename": "libcpp/macro.c", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b71f4a4f8515c5d0919fc5c220f427e7c837e7f/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b71f4a4f8515c5d0919fc5c220f427e7c837e7f/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=2b71f4a4f8515c5d0919fc5c220f427e7c837e7f", "patch": "@@ -1776,35 +1776,32 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n \t    paste_flag =\n \t      (const cpp_token **) tokens_buff_last_token_ptr (buff);\n \t}\n-      else if (CPP_PEDANTIC (pfile) && ! macro->syshdr\n-\t       && ! CPP_OPTION (pfile, c99)\n-\t       && ! cpp_in_system_header (pfile))\n+      else if (CPP_PEDANTIC (pfile) && ! CPP_OPTION (pfile, c99)\n+\t       && ! macro->syshdr && ! cpp_in_system_header (pfile))\n \t{\n \t  if (CPP_OPTION (pfile, cplusplus))\n-\t    cpp_error (pfile, CPP_DL_PEDWARN,\n-\t\t       \"invoking macro %s argument %d: \"\n-\t\t       \"empty macro arguments are undefined\"\n-\t\t       \" in ISO C++98\",\n-\t\t       NODE_NAME (node),\n-\t\t       src->val.macro_arg.arg_no);\n+\t    cpp_pedwarning (pfile, CPP_W_PEDANTIC,\n+\t\t\t    \"invoking macro %s argument %d: \"\n+\t\t\t    \"empty macro arguments are undefined\"\n+\t\t\t    \" in ISO C++98\",\n+\t\t\t    NODE_NAME (node), src->val.macro_arg.arg_no);\n \t  else if (CPP_OPTION (pfile, cpp_warn_c90_c99_compat))\n-\t    cpp_error (pfile, CPP_DL_PEDWARN,\n-\t\t       \"invoking macro %s argument %d: \"\n-\t\t       \"empty macro arguments are undefined\"\n-\t\t       \" in ISO C90\",\n-\t\t       NODE_NAME (node),\n-\t\t       src->val.macro_arg.arg_no);\n+\t    cpp_pedwarning (pfile, \n+\t\t\t    CPP_OPTION (pfile, cpp_warn_c90_c99_compat) > 0\n+\t\t\t    ? CPP_W_C90_C99_COMPAT : CPP_W_PEDANTIC,\n+\t\t\t    \"invoking macro %s argument %d: \"\n+\t\t\t    \"empty macro arguments are undefined\"\n+\t\t\t    \" in ISO C90\",\n+\t\t\t    NODE_NAME (node), src->val.macro_arg.arg_no);\n \t}\n       else if (CPP_OPTION (pfile, cpp_warn_c90_c99_compat) > 0\n-\t       && ! macro->syshdr\n-\t       && ! cpp_in_system_header (pfile)\n-\t       && ! CPP_OPTION (pfile, cplusplus))\n-\tcpp_error (pfile, CPP_DL_WARNING,\n-\t\t   \"invoking macro %s argument %d: \"\n-\t\t   \"empty macro arguments are undefined\"\n-\t\t   \" in ISO C90\",\n-\t\t   NODE_NAME (node),\n-\t\t   src->val.macro_arg.arg_no);\n+\t       && ! CPP_OPTION (pfile, cplusplus)\n+\t       && ! macro->syshdr && ! cpp_in_system_header (pfile))\n+\tcpp_warning (pfile, CPP_W_C90_C99_COMPAT,\n+\t\t     \"invoking macro %s argument %d: \"\n+\t\t     \"empty macro arguments are undefined\"\n+\t\t     \" in ISO C90\",\n+\t\t     NODE_NAME (node), src->val.macro_arg.arg_no);\n \n       /* Avoid paste on RHS (even case count == 0).  */\n       if (!pfile->state.in_directive && !(src->flags & PASTE_LEFT))"}]}