{"sha": "badeac77f55276d047b3cc202e4ddd49ba643d8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFkZWFjNzdmNTUyNzZkMDQ3YjNjYzIwMmU0ZGRkNDliYTY0M2Q4YQ==", "commit": {"author": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2020-10-19T13:50:44Z"}, "committer": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2020-10-19T19:54:31Z"}, "message": "testsuite: Enable and adjust powerpc fold-vec-extract/insert testcases.\n\nThis patch enables a number of testcases on non-Linux targets, adjusts\nthe target requirements, and updates the expected results.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/powerpc/fold-vec-extract-char.p7.c: Remove target.\n\t* gcc.target/powerpc/fold-vec-extract-char.p8.c: Remove target.\n\t* gcc.target/powerpc/fold-vec-extract-char.p9.c: Remove target.\n\tExpect 3 addi for ilp32.\n\t* gcc.target/powerpc/fold-vec-extract-double.p7.c: Remove target.\n\tAdd -mbig-endian for Linux.\n\t* gcc.target/powerpc/fold-vec-extract-double.p8.c: Remove target.\n\t* gcc.target/powerpc/fold-vec-extract-float.p7.c: Remove target.\n\t* gcc.target/powerpc/fold-vec-extract-float.p8.c: Remove target.\n\t* gcc.target/powerpc/fold-vec-extract-float.p9.c: Require lp64.\n\t* gcc.target/powerpc/fold-vec-extract-int.p7.c: Remove target.\n\t* gcc.target/powerpc/fold-vec-extract-int.p8.c: Remove target.\n\t* gcc.target/powerpc/fold-vec-extract-int.p9.c: Remove target.\n\tExpect 3 addi for ilp32.\n\t* gcc.target/powerpc/fold-vec-extract-longlong.p7.c: Remove target.\n\tExpect 4 addi for ilp32.\n\t* gcc.target/powerpc/fold-vec-extract-longlong.p8.c: Remove target.\n\tExpect 4 addi for ilp32.\n\t* gcc.target/powerpc/fold-vec-extract-longlong.p9.c: Require lp64.\n\t* gcc.target/powerpc/fold-vec-extract-short.p7.c: Remove target.\n\t* gcc.target/powerpc/fold-vec-extract-short.p8.c: Remove target.\n\t* gcc.target/powerpc/fold-vec-extract-short.p9.c: Require lp64.\n\t* gcc.target/powerpc/fold-vec-insert-char-p8.c: Remove target.\n\t* gcc.target/powerpc/fold-vec-insert-char-p9.c: Remove target.\n\t* gcc.target/powerpc/fold-vec-insert-double.c: Remove target.\n\t* gcc.target/powerpc/fold-vec-insert-float-p8.c: Remove target.\n\t* gcc.target/powerpc/fold-vec-insert-float-p9.c: Remove target.\n\t* gcc.target/powerpc/fold-vec-insert-int-p8.c: Remove target.\n\t* gcc.target/powerpc/fold-vec-insert-int-p9.c: Remove target.\n\tRequire 8 addi for ilp32.\n\t* gcc.target/powerpc/fold-vec-insert-longlong.c: Remove target.\n\t* gcc.target/powerpc/fold-vec-insert-short-p8.c: Remove target.\n\t* gcc.target/powerpc/fold-vec-insert-short-p9.c: Remove target.\n\t* gcc.target/powerpc/fold-vec-select-double.c: Remove target.\n\t* gcc.target/powerpc/fold-vec-select-float.c: Remove target.\n\t* gcc.target/powerpc/fold-vec-splats-int.c: Require lp64.\n\t* gcc.target/powerpc/fold-vec-splats-longlong.c: Require lp64.", "tree": {"sha": "a8dc14ead0b5d3f199d69db2bd6319d3d5246c1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8dc14ead0b5d3f199d69db2bd6319d3d5246c1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/badeac77f55276d047b3cc202e4ddd49ba643d8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/badeac77f55276d047b3cc202e4ddd49ba643d8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/badeac77f55276d047b3cc202e4ddd49ba643d8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/badeac77f55276d047b3cc202e4ddd49ba643d8a/comments", "author": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b003c4b14b3f889e6707db68d2c6545eda7a203b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b003c4b14b3f889e6707db68d2c6545eda7a203b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b003c4b14b3f889e6707db68d2c6545eda7a203b"}], "stats": {"total": 76, "additions": 39, "deletions": 37}, "files": [{"sha": "42599c214e4302a21e0ef4c57b050a521ffabbcd", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-extract-char.p7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-char.p7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-char.p7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-char.p7.c?ref=badeac77f55276d047b3cc202e4ddd49ba643d8a", "patch": "@@ -1,7 +1,7 @@\n /* Verify that overloaded built-ins for vec_extract() with char\n    inputs produce the right code with a power7 (BE) target.  */\n \n-/* { dg-do compile { target { powerpc*-*-linux* } } } */\n+/* { dg-do compile } */\n /* { dg-require-effective-target powerpc_vsx_ok } */\n /* { dg-options \"-mdejagnu-cpu=power7 -O2\" } */\n "}, {"sha": "f3b9556b2e6508f82dbe97f2b4d5fead686ab86f", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-extract-char.p8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-char.p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-char.p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-char.p8.c?ref=badeac77f55276d047b3cc202e4ddd49ba643d8a", "patch": "@@ -1,7 +1,7 @@\n /* Verify that overloaded built-ins for vec_extract() with char\n    inputs produce the right code with a P8 (LE or BE) target.  */\n \n-/* { dg-do compile { target { powerpc*-*-linux* } } } */\n+/* { dg-do compile } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n /* { dg-options \"-mdejagnu-cpu=power8 -O2\" } */\n "}, {"sha": "ff03c9a722b9479cb8edb3c265f48b841f88851b", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-extract-char.p9.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-char.p9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-char.p9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-char.p9.c?ref=badeac77f55276d047b3cc202e4ddd49ba643d8a", "patch": "@@ -1,7 +1,7 @@\n /* Verify that overloaded built-ins for vec_extract() with char\n    inputs produce the right code with a P9 (LE) target.  */\n \n-/* { dg-do compile { target { powerpc*-*-linux* } } } */\n+/* { dg-do compile } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n /* { dg-options \"-mdejagnu-cpu=power9 -O2 \" } */\n \n@@ -12,7 +12,7 @@\n \n /* { dg-final { scan-assembler-times \"stxv\" 6 { target ilp32 } } } */\n /* { dg-final { scan-assembler-times \"lbz\" 6 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times \"addi\" 6 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times \"addi\" 3 { target ilp32 } } } */\n \n \n #include <altivec.h>"}, {"sha": "cbf6cffbeba17dfe4de65cef9c5294d3992c2cc4", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-extract-double.p7.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-double.p7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-double.p7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-double.p7.c?ref=badeac77f55276d047b3cc202e4ddd49ba643d8a", "patch": "@@ -1,9 +1,10 @@\n /* Verify that overloaded built-ins for vec_extract() with\n    double inputs produce the right code.  */\n \n-/* { dg-do compile { target { powerpc*-*-linux* } } } */\n+/* { dg-do compile } */\n /* { dg-require-effective-target powerpc_altivec_ok } */\n-/* { dg-options \"-mdejagnu-cpu=power7 -O2 -mbig-endian\" } */\n+/* { dg-options \"-mdejagnu-cpu=power7 -O2\" } */\n+/* { dg-additional-options \"-mbig-endian\" { target powerpc*-*-linux* } } */\n \n // targeting P7 (BE), 2 tests.\n // P7 constants: xxpermdi"}, {"sha": "2b8dbb0182ab74d14ccd0e2d00c33496388292ac", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-extract-double.p8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-double.p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-double.p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-double.p8.c?ref=badeac77f55276d047b3cc202e4ddd49ba643d8a", "patch": "@@ -1,7 +1,7 @@\n /* Verify that overloaded built-ins for vec_extract() with\n    double inputs produce the right code with a P8 (LE or BE) target.  */\n \n-/* { dg-do compile { target { powerpc*-*-linux* } } } */\n+/* { dg-do compile } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n /* { dg-options \"-mdejagnu-cpu=power8 -O2\" } */\n "}, {"sha": "c9abb6c1f352c26a988792debfd5e6a2bc402d6e", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-extract-float.p7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-float.p7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-float.p7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-float.p7.c?ref=badeac77f55276d047b3cc202e4ddd49ba643d8a", "patch": "@@ -1,7 +1,7 @@\n /* Verify that overloaded built-ins for vec_extract() with float\n    inputs produce the right code with a P7 (BE) target.  */\n \n-/* { dg-do compile { target { powerpc*-*-linux* } } } */\n+/* { dg-do compile } */\n /* { dg-require-effective-target powerpc_vsx_ok } */\n /* { dg-options \"-mdejagnu-cpu=power7 -O2 \" } */\n "}, {"sha": "68eeeede4b3075dd6d6d333856e279bed64db8a9", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-extract-float.p8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-float.p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-float.p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-float.p8.c?ref=badeac77f55276d047b3cc202e4ddd49ba643d8a", "patch": "@@ -1,7 +1,7 @@\n /* Verify that overloaded built-ins for vec_extract() with float\n    inputs produce the right code with a P8 (LE or BE) target.  */\n \n-/* { dg-do compile { target { powerpc*-*-linux* } } } */\n+/* { dg-do compile } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n /* { dg-options \"-mdejagnu-cpu=power8 -O2\" } */\n "}, {"sha": "1acd477ebd68410be83abd9e5d6cc9a25f1bb335", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-extract-float.p9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-float.p9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-float.p9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-float.p9.c?ref=badeac77f55276d047b3cc202e4ddd49ba643d8a", "patch": "@@ -1,7 +1,7 @@\n /* Verify that overloaded built-ins for vec_extract() with float\n    inputs produce the right code.  */\n \n-/* { dg-do compile { target { powerpc*-*-linux* && le } } } */\n+/* { dg-do compile { target lp64 } } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n /* { dg-options \"-mdejagnu-cpu=power9 -O2 \" } */\n "}, {"sha": "418762e3948a5805e96505da50b6fd1022aaa8e3", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-extract-int.p7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-int.p7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-int.p7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-int.p7.c?ref=badeac77f55276d047b3cc202e4ddd49ba643d8a", "patch": "@@ -1,7 +1,7 @@\n /* Verify that overloaded built-ins for vec_extract() with int\n    inputs produce the right code with a P7 (BE) target.  */\n \n-/* { dg-do compile { target { powerpc*-*-linux* } } } */\n+/* { dg-do compile } */\n /* { dg-require-effective-target powerpc_vsx_ok } */\n /* { dg-options \"-mdejagnu-cpu=power7 -O2 \" } */\n "}, {"sha": "d1e3b62373f801286ee78f07c4925d458eaa761f", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-extract-int.p8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-int.p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-int.p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-int.p8.c?ref=badeac77f55276d047b3cc202e4ddd49ba643d8a", "patch": "@@ -1,7 +1,7 @@\n /* Verify that overloaded built-ins for vec_extract() with int\n    inputs produce the right code with a P8 (LE or BE) target.  */\n \n-/* { dg-do compile { target { powerpc*-*-linux* } } } */\n+/* { dg-do compile } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n /* { dg-options \"-mdejagnu-cpu=power8 -O2\" } */\n "}, {"sha": "868b673cdaf7ef05d5c800d2c97837851f66b56a", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-extract-int.p9.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-int.p9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-int.p9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-int.p9.c?ref=badeac77f55276d047b3cc202e4ddd49ba643d8a", "patch": "@@ -1,7 +1,7 @@\n /* Verify that overloaded built-ins for vec_extract() with int\n    inputs produce the right code with a P9 (LE) target.  */\n \n-/* { dg-do compile { target { powerpc*-*-linux* } } } */\n+/* { dg-do compile } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n /* { dg-options \"-mdejagnu-cpu=power9 -O2 \" } */\n \n@@ -18,7 +18,7 @@\n /* { dg-final { scan-assembler-times {\\madd\\M} 3 { target ilp32 } } } */\n /* { dg-final { scan-assembler-times {\\mstxv\\M} 6 { target ilp32 } } } */\n /* { dg-final { scan-assembler-times {\\mlwz\\M} 6 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\maddi\\M} 6 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\maddi\\M} 3 { target ilp32 } } } */\n \n \n #include <altivec.h>"}, {"sha": "033d21c9a436a2c23d3c5f9dce23169d62ab9373", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-extract-longlong.p7.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-longlong.p7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-longlong.p7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-longlong.p7.c?ref=badeac77f55276d047b3cc202e4ddd49ba643d8a", "patch": "@@ -1,7 +1,7 @@\n /* Verify that overloaded built-ins for vec_extract() with long long\n    inputs produce the right code with a P8 (LE or BE) target.  */\n \n-/* { dg-do compile { target { powerpc*-*-linux* } } } */\n+/* { dg-do compile } */\n /* { dg-require-effective-target powerpc_vsx_ok } */\n /* { dg-options \"-mdejagnu-cpu=power7 -O2\" } */\n \n@@ -21,7 +21,8 @@\n /* { dg-final { scan-assembler-times {\\mli\\M} 3 { target lp64 } } } */\n /* -m32 target with constant test uses (+2)li where the -m64 has an ld */\n /* { dg-final { scan-assembler-times {\\mli\\M} 5 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\maddi\\M} 6 } } */\n+/* { dg-final { scan-assembler-times {\\maddi\\M} 6 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {\\maddi\\M} 4 { target ilp32 } } } */\n /* { dg-final { scan-assembler-times {\\mstxvd2x\\M|\\mstvx\\M} 3 } } */\n /* { dg-final { scan-assembler-times {\\mrldic\\M|\\mrlwinm\\M} 3 } } */\n /* { dg-final { scan-assembler-times {\\mldx\\M} 3 { target lp64 } } } */"}, {"sha": "0b624d262e1fffaec3230a4fbd44d481ff31752a", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-extract-longlong.p8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-longlong.p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-longlong.p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-longlong.p8.c?ref=badeac77f55276d047b3cc202e4ddd49ba643d8a", "patch": "@@ -1,7 +1,7 @@\n /* Verify that overloaded built-ins for vec_extract() with long long\n    inputs produce the right code with a P8 (LE or BE) target.  */\n \n-/* { dg-do compile { target { powerpc*-*-linux* } } } */\n+/* { dg-do compile } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n /* { dg-options \"-mdejagnu-cpu=power8 -O2\" } */\n \n@@ -17,7 +17,7 @@\n /* { dg-final { scan-assembler-times {\\mstxvd2x\\M|\\mstxvw4x\\M} 4 { target ilp32 } } } */\n /* { dg-final { scan-assembler-times {\\madd\\M} 3 { target ilp32 } } } */\n /* { dg-final { scan-assembler-times {\\mlwz\\M} 11 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\maddi\\M} 6 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\maddi\\M} 4 { target ilp32 } } } */\n /* { dg-final { scan-assembler-times {\\mmfvsrd\\M} 6 { target lp64 } } } */\n /* { dg-final { scan-assembler-times {\\mmtvsrd\\M} 3 { target lp64 } } } */\n /* { dg-final { scan-assembler-times {\\mxxpermdi\\M} 3 { target le } } } */"}, {"sha": "e7e1c5648027d80301f18895231d6359d00eeec9", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-extract-longlong.p9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-longlong.p9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-longlong.p9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-longlong.p9.c?ref=badeac77f55276d047b3cc202e4ddd49ba643d8a", "patch": "@@ -1,7 +1,7 @@\n /* Verify that overloaded built-ins for vec_extract() with long long\n    inputs produce the right code for a P9 (LE) target.  */\n \n-/* { dg-do compile { target { powerpc*-*-linux* && le } } } */\n+/* { dg-do compile { target lp64 } } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n /* { dg-options \"-mdejagnu-cpu=power9 -O2\" } */\n "}, {"sha": "46e943faa6a41d9491df36d7705a32ab10a44677", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-extract-short.p7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-short.p7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-short.p7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-short.p7.c?ref=badeac77f55276d047b3cc202e4ddd49ba643d8a", "patch": "@@ -1,7 +1,7 @@\n /* Verify that overloaded built-ins for vec_extract() with short\n    inputs produce the right code for a P7 (BE) target.  */\n \n-/* { dg-do compile { target { powerpc*-*-linux* } } } */\n+/* { dg-do compile } */\n /* { dg-require-effective-target powerpc_vsx_ok } */\n /* { dg-options \"-mdejagnu-cpu=power7 -O2\" } */\n "}, {"sha": "00685aca1367b5dcdd2a98116ad5c86d1622c8c1", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-extract-short.p8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-short.p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-short.p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-short.p8.c?ref=badeac77f55276d047b3cc202e4ddd49ba643d8a", "patch": "@@ -1,7 +1,7 @@\n /* Verify that overloaded built-ins for vec_extract() with short\n    inputs produce the right results with a P8 (LE or BE) target.  */\n \n-/* { dg-do compile { target { powerpc*-*-linux* } } } */\n+/* { dg-do compile } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n /* { dg-options \"-mdejagnu-cpu=power8 -O2\" } */\n "}, {"sha": "5651986bd0c2906faf2c4e94e5574ebd47c56996", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-extract-short.p9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-short.p9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-short.p9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-short.p9.c?ref=badeac77f55276d047b3cc202e4ddd49ba643d8a", "patch": "@@ -1,7 +1,7 @@\n /* Verify that overloaded built-ins for vec_extract() with short\n    inputs produce the right code for a P9 (LE) target.  */\n \n-/* { dg-do compile { target { powerpc*-*-linux* && le } } } */\n+/* { dg-do compile { target lp64 } } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n /* { dg-options \"-mdejagnu-cpu=power9 -O2\" } */\n "}, {"sha": "39fd4df6d424e0a6ba357d901c65efcc2545c6c4", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-char-p8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-char-p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-char-p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-char-p8.c?ref=badeac77f55276d047b3cc202e4ddd49ba643d8a", "patch": "@@ -1,7 +1,7 @@\n /* Verify that overloaded built-ins for vec_insert () with char\n    inputs produce the right codegen.  */\n \n-/* { dg-do compile { target { powerpc*-*-linux* } } } */\n+/* { dg-do compile } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n /* { dg-options \"-O2 -mdejagnu-cpu=power8\" } */\n "}, {"sha": "ae1daada4c0fe9b3fd868000281c8d262b4289bf", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-char-p9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-char-p9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-char-p9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-char-p9.c?ref=badeac77f55276d047b3cc202e4ddd49ba643d8a", "patch": "@@ -1,7 +1,7 @@\n /* Verify that overloaded built-ins for vec_insert () with char\n    inputs produce the right codegen.  */\n \n-/* { dg-do compile { target { powerpc*-*-linux* } } } */\n+/* { dg-do compile } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n /* { dg-options \"-O2 -mdejagnu-cpu=power9\" } */\n "}, {"sha": "120579cba23d2a30d73d64ca4442255449a80806", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-double.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-double.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-double.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-double.c?ref=badeac77f55276d047b3cc202e4ddd49ba643d8a", "patch": "@@ -1,7 +1,7 @@\n /* Verify that overloaded built-ins for vec_insert with \n    double inputs produce the right codegen.  */\n \n-/* { dg-do compile { target { powerpc*-*-linux* } } } */\n+/* { dg-do compile } */\n /* { dg-require-effective-target powerpc_vsx_ok } */\n /* { dg-options \"-mvsx -O2\" } */\n "}, {"sha": "76039bc45f510712b5088d8f0d4c88bcf20a1d00", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-float-p8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-float-p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-float-p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-float-p8.c?ref=badeac77f55276d047b3cc202e4ddd49ba643d8a", "patch": "@@ -1,7 +1,7 @@\n /* Verify that overloaded built-ins for vec_insert with float\n    inputs produce the right codegen.  Power8 variant.  */\n \n-/* { dg-do compile { target { powerpc*-*-linux* } } } */\n+/* { dg-do compile } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n /* { dg-options \"-O2 -mdejagnu-cpu=power8\" } */\n "}, {"sha": "3819fe67375fc23ed6e4dde56d9de49ea9f04a68", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-float-p9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-float-p9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-float-p9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-float-p9.c?ref=badeac77f55276d047b3cc202e4ddd49ba643d8a", "patch": "@@ -1,7 +1,7 @@\n /* Verify that overloaded built-ins for vec_insert with float\n    inputs produce the right codegen.  Power9 variant.  */\n \n-/* { dg-do compile { target { powerpc*-*-linux* } } } */\n+/* { dg-do compile } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n /* { dg-options \"-O2 -mdejagnu-cpu=power9\" } */\n "}, {"sha": "0f2bdd71d60c13936e50b73d8ec95f613ab1a4d6", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-int-p8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-int-p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-int-p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-int-p8.c?ref=badeac77f55276d047b3cc202e4ddd49ba643d8a", "patch": "@@ -1,7 +1,7 @@\n /* Verify that overloaded built-ins for vec_insert() with int\n    inputs produce the right codegen.  Power8 variant.  */\n \n-/* { dg-do compile { target { powerpc*-*-linux* } } } */\n+/* { dg-do compile } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n /* { dg-options \"-O2 -mdejagnu-cpu=power8\" } */\n "}, {"sha": "81ac1f1a00a344af5a5b8a703ef19a5d1a6b5e58", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-int-p9.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-int-p9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-int-p9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-int-p9.c?ref=badeac77f55276d047b3cc202e4ddd49ba643d8a", "patch": "@@ -1,7 +1,7 @@\n /* Verify that overloaded built-ins for vec_insert() with int\n    inputs produce the right codegen.  Power9 variant.  */\n \n-/* { dg-do compile { target { powerpc*-*-linux* } } } */\n+/* { dg-do compile } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n /* { dg-options \"-O2 -mdejagnu-cpu=power9\" } */\n \n@@ -59,7 +59,7 @@ testui2_cst(unsigned int x, vector unsigned int v)\n /* { dg-final { scan-assembler-times {\\mxxinsertw\\M} 4 { target lp64 } } } */\n \n \n-/* { dg-final { scan-assembler-times {\\maddi\\M} 12 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\maddi\\M} 8 { target ilp32 } } } */\n /* { dg-final { scan-assembler-times {\\mstw\\M} 8 { target ilp32 } } } */\n /* { dg-final { scan-assembler-times {\\mlxv\\M} 8 { target ilp32 } } } */\n /* { dg-final { scan-assembler-times {\\mlvewx\\M} 4 { target ilp32 } } } */"}, {"sha": "e9698986788325700ff60bc26b18c7cc4fd031c3", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-longlong.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-longlong.c?ref=badeac77f55276d047b3cc202e4ddd49ba643d8a", "patch": "@@ -1,7 +1,7 @@\n /* Verify that overloaded built-ins for vec_insert() with long long\n    inputs produce the right codegen.  */\n \n-/* { dg-do compile { target { powerpc*-*-linux* } } } */\n+/* { dg-do compile } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n /* { dg-options \"-O2 -mdejagnu-cpu=power8\" } */\n "}, {"sha": "0a73db7120c349d22ebba067ced0b3a5a80921bb", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-short-p8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-short-p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-short-p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-short-p8.c?ref=badeac77f55276d047b3cc202e4ddd49ba643d8a", "patch": "@@ -1,7 +1,7 @@\n /* Verify that overloaded built-ins for vec_insert() with short\n    inputs produce the right codegen.  Power8 variant.  */\n \n-/* { dg-do compile { target { powerpc*-*-linux* } } } */\n+/* { dg-do compile } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n /* { dg-options \"-O2 -mdejagnu-cpu=power8\" } */\n "}, {"sha": "0f3504258aa3e42ef95b485344fa000cdf3bffa4", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-insert-short-p9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-short-p9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-short-p9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-insert-short-p9.c?ref=badeac77f55276d047b3cc202e4ddd49ba643d8a", "patch": "@@ -1,7 +1,7 @@\n /* Verify that overloaded built-ins for vec_insert() with short\n    inputs produce the right codegen.  Power9 variant.  */\n \n-/* { dg-do compile { target { powerpc*-*-linux* } } } */\n+/* { dg-do compile } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n /* { dg-options \"-O2 -mdejagnu-cpu=power9\" } */\n "}, {"sha": "bb7dce10f017aed4b7aaee5ef5ebd962c068df43", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-select-double.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-select-double.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-select-double.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-select-double.c?ref=badeac77f55276d047b3cc202e4ddd49ba643d8a", "patch": "@@ -1,7 +1,7 @@\n /* Verify that overloaded built-ins for vec_sel with \n    double inputs for VSX produce the right code.  */\n \n-/* { dg-do compile { target { powerpc*-*-linux* } } } */\n+/* { dg-do compile } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n /* { dg-options \"-mdejagnu-cpu=power8 -O2\" } */\n "}, {"sha": "1656fbff2ca5c30f3f1c871ba6c0e9c208b428fa", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-select-float.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-select-float.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-select-float.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-select-float.c?ref=badeac77f55276d047b3cc202e4ddd49ba643d8a", "patch": "@@ -1,7 +1,7 @@\n /* Verify that overloaded built-ins for vec_sel with float \n    inputs for VSX produce the right code.  */\n \n-/* { dg-do compile { target { powerpc*-*-linux* } } } */\n+/* { dg-do compile } */\n /* { dg-require-effective-target powerpc_vsx_ok } */\n /* { dg-options \"-maltivec -O2\" } */\n "}, {"sha": "dff0f55959958086449a9ead2695e3620047683e", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-splats-int.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splats-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splats-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splats-int.c?ref=badeac77f55276d047b3cc202e4ddd49ba643d8a", "patch": "@@ -1,7 +1,7 @@\n /* Verify that overloaded built-ins for vec_splat with int\n    inputs produce the right code.  */\n \n-/* { dg-do compile { target { powerpc*-*-linux* && lp64 } } } */\n+/* { dg-do compile { target lp64 } } */\n /* { dg-require-effective-target powerpc_altivec_ok } */\n /* { dg-options \"-maltivec -O2 \" } */\n "}, {"sha": "242565017fa7b9d5de0506f99904ce96b62cd6eb", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-splats-longlong.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splats-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/badeac77f55276d047b3cc202e4ddd49ba643d8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splats-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splats-longlong.c?ref=badeac77f55276d047b3cc202e4ddd49ba643d8a", "patch": "@@ -1,7 +1,7 @@\n /* Verify that overloaded built-ins for vec_splat with long long\n    inputs produce the right code.  */\n \n-/* { dg-do compile { target { powerpc*-*-linux* && lp64 } } } */\n+/* { dg-do compile { target lp64 } } */\n /* { dg-require-effective-target powerpc_vsx_ok } */\n /* { dg-options \"-mvsx -O2\" } */\n "}]}