{"sha": "da0a441de5c8856c2d0a7e4f0b565170e54a40cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGEwYTQ0MWRlNWM4ODU2YzJkMGE3ZTRmMGI1NjUxNzBlNTRhNDBjZg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2010-09-06T22:32:26Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2010-09-06T22:32:26Z"}, "message": "re PR target/43137 (redundant register move for sign extending)\n\n\tPR target/43137\n\t* config/arm/iterators.md (qhs_zextenddi_cond, qhs_sextenddi_cond):\n\tNew define_mode_attrs.\n\t* config/arm/arm.md (zero_extendsidi2, arm_zero_extendsidi2,\n\tarm_exxtendsidi2, arm_extendsidi2): Delete patterns.\n\t(zero_extend<mode>di2, extend<mode>di2 and related splits): New.\n\t(thumb1_zero_extendhisi2): Remove code to handle LABEL_REFs.\n\tRemove pool_range attribute.\n\t(arm_zero_extendhisi2, arm_zero_extendhisi2_v6, arm_zero_extendqisi2,\n\tarm_zero_extendqisi2_v6, thumb1_zero_extendqisi2_v6): Remove\n\tpool_range and neg_pool_range attributes.\n\t* config/arm/thumb2.md (thumb2_zero_extendsidi2,\n\tthumb2_zero_extendhidi2, thumb2_zero_extendqidi2, thumb2_extendsidi2,\n\tthumb2_extendhidi2, thumb2_extendqidi2): Delete.\n\n\tPR target/43137\n\t* gcc.target/arm/pr43137.c: New test.\n\nFrom-SVN: r163935", "tree": {"sha": "0cfdb90e958130de9cdff42717b68fbef46ba4f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cfdb90e958130de9cdff42717b68fbef46ba4f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da0a441de5c8856c2d0a7e4f0b565170e54a40cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da0a441de5c8856c2d0a7e4f0b565170e54a40cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da0a441de5c8856c2d0a7e4f0b565170e54a40cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da0a441de5c8856c2d0a7e4f0b565170e54a40cf/comments", "author": null, "committer": null, "parents": [{"sha": "5c599206d359e16c9f9e132c06e6bed53b360e29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c599206d359e16c9f9e132c06e6bed53b360e29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c599206d359e16c9f9e132c06e6bed53b360e29"}], "stats": {"total": 334, "additions": 111, "deletions": 223}, "files": [{"sha": "f5850181f1d11ea33b15c221107766dd00ab466e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da0a441de5c8856c2d0a7e4f0b565170e54a40cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da0a441de5c8856c2d0a7e4f0b565170e54a40cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da0a441de5c8856c2d0a7e4f0b565170e54a40cf", "patch": "@@ -1,3 +1,20 @@\n+2010-09-07  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\tPR target/43137\n+\t* config/arm/iterators.md (qhs_zextenddi_cond, qhs_sextenddi_cond):\n+\tNew define_mode_attrs.\n+\t* config/arm/arm.md (zero_extendsidi2, arm_zero_extendsidi2,\n+\tarm_exxtendsidi2, arm_extendsidi2): Delete patterns.\n+\t(zero_extend<mode>di2, extend<mode>di2 and related splits): New.\n+\t(thumb1_zero_extendhisi2): Remove code to handle LABEL_REFs.\n+\tRemove pool_range attribute.\n+\t(arm_zero_extendhisi2, arm_zero_extendhisi2_v6, arm_zero_extendqisi2,\n+\tarm_zero_extendqisi2_v6, thumb1_zero_extendqisi2_v6): Remove\n+\tpool_range and neg_pool_range attributes.\n+\t* config/arm/thumb2.md (thumb2_zero_extendsidi2,\n+\tthumb2_zero_extendhidi2, thumb2_zero_extendqidi2, thumb2_extendsidi2,\n+\tthumb2_extendhidi2, thumb2_extendqidi2): Delete.\n+\n 2010-09-06  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/linux-unwind.h (x86_fallback_frame_state): Properly"}, {"sha": "fbc72d3098ecc68671aeb160a05c514ae61d00ee", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 75, "deletions": 84, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da0a441de5c8856c2d0a7e4f0b565170e54a40cf/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da0a441de5c8856c2d0a7e4f0b565170e54a40cf/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=da0a441de5c8856c2d0a7e4f0b565170e54a40cf", "patch": "@@ -4037,71 +4037,80 @@\n \f\n ;; Zero and sign extension instructions.\n \n-(define_expand \"zero_extendsidi2\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"\")\n-        (zero_extend:DI (match_operand:SI 1 \"s_register_operand\" \"\")))]\n-  \"TARGET_32BIT\"\n-  \"\"\n+(define_insn \"zero_extend<mode>di2\"\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+        (zero_extend:DI (match_operand:QHSI 1 \"nonimmediate_operand\" \"rm\")))]\n+  \"TARGET_32BIT <qhs_zextenddi_cond>\"\n+  \"#\"\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"ce_count\" \"2\")\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n-(define_insn \"*arm_zero_extendsidi2\"\n+(define_insn \"extend<mode>di2\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n-        (zero_extend:DI (match_operand:SI 1 \"s_register_operand\" \"r\")))]\n-  \"TARGET_ARM\"\n-  \"*\n-    if (REGNO (operands[1])\n-        != REGNO (operands[0]) + (WORDS_BIG_ENDIAN ? 1 : 0))\n-      output_asm_insn (\\\"mov%?\\\\t%Q0, %1\\\", operands);\n-    return \\\"mov%?\\\\t%R0, #0\\\";\n-  \"\n+        (sign_extend:DI (match_operand:QHSI 1 \"nonimmediate_operand\" \"rm\")))]\n+  \"TARGET_32BIT <qhs_sextenddi_cond>\"\n+  \"#\"\n   [(set_attr \"length\" \"8\")\n-   (set_attr \"insn\" \"mov\")\n+   (set_attr \"ce_count\" \"2\")\n+   (set_attr \"shift\" \"1\")\n    (set_attr \"predicable\" \"yes\")]\n )\n \n-(define_expand \"zero_extendqidi2\"\n-  [(set (match_operand:DI                 0 \"s_register_operand\"  \"\")\n-\t(zero_extend:DI (match_operand:QI 1 \"nonimmediate_operand\" \"\")))]\n+;; Splits for all extensions to DImode\n+(define_split\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"\")\n+        (zero_extend:DI (match_operand 1 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_32BIT\"\n-  \"\"\n-)\n-\n-(define_insn \"*arm_zero_extendqidi2\"\n-  [(set (match_operand:DI                 0 \"s_register_operand\"  \"=r,r\")\n-\t(zero_extend:DI (match_operand:QI 1 \"nonimmediate_operand\" \"r,m\")))]\n-  \"TARGET_ARM\"\n-  \"@\n-   and%?\\\\t%Q0, %1, #255\\;mov%?\\\\t%R0, #0\n-   ldr%(b%)\\\\t%Q0, %1\\;mov%?\\\\t%R0, #0\"\n-  [(set_attr \"length\" \"8\")\n-   (set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\" \"*,load_byte\")\n-   (set_attr \"pool_range\" \"*,4092\")\n-   (set_attr \"neg_pool_range\" \"*,4084\")]\n-)\n+  [(set (match_dup 0) (match_dup 1))]\n+{\n+  rtx insn;\n+  rtx lo_part = gen_lowpart (SImode, operands[0]);\n+  enum machine_mode src_mode = GET_MODE (operands[1]);\n+\n+  if (REG_P (operands[0])\n+      && !reg_overlap_mentioned_p (operands[0], operands[1]))\n+    emit_clobber (operands[0]);\n+  if (!REG_P (lo_part) || src_mode != SImode\n+      || !rtx_equal_p (lo_part, operands[1]))\n+    {\n+      if (src_mode == SImode)\n+        emit_move_insn (lo_part, operands[1]);\n+      else\n+        emit_insn (gen_rtx_SET (VOIDmode, lo_part,\n+\t\t\t\tgen_rtx_ZERO_EXTEND (SImode, operands[1])));\n+      operands[1] = lo_part;\n+    }\n+  operands[0] = gen_highpart (SImode, operands[0]);\n+  operands[1] = const0_rtx;\n+})\n \n-(define_expand \"extendsidi2\"\n+(define_split\n   [(set (match_operand:DI 0 \"s_register_operand\" \"\")\n-        (sign_extend:DI (match_operand:SI 1 \"s_register_operand\" \"\")))]\n+        (sign_extend:DI (match_operand 1 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_32BIT\"\n-  \"\"\n-)\n+  [(set (match_dup 0) (ashiftrt:SI (match_dup 1) (const_int 31)))]\n+{\n+  rtx lo_part = gen_lowpart (SImode, operands[0]);\n+  enum machine_mode src_mode = GET_MODE (operands[1]);\n \n-(define_insn \"*arm_extendsidi2\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n-        (sign_extend:DI (match_operand:SI 1 \"s_register_operand\" \"r\")))]\n-  \"TARGET_ARM\"\n-  \"*\n-    if (REGNO (operands[1])\n-        != REGNO (operands[0]) + (WORDS_BIG_ENDIAN ? 1 : 0))\n-      output_asm_insn (\\\"mov%?\\\\t%Q0, %1\\\", operands);\n-    return \\\"mov%?\\\\t%R0, %Q0, asr #31\\\";\n-  \"\n-  [(set_attr \"length\" \"8\")\n-   (set_attr \"shift\" \"1\")\n-   (set_attr \"insn\" \"mov\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n+  if (REG_P (operands[0])\n+      && !reg_overlap_mentioned_p (operands[0], operands[1]))\n+    emit_clobber (operands[0]);\n+\n+  if (!REG_P (lo_part) || src_mode != SImode\n+      || !rtx_equal_p (lo_part, operands[1]))\n+    {\n+      if (src_mode == SImode)\n+        emit_move_insn (lo_part, operands[1]);\n+      else\n+        emit_insn (gen_rtx_SET (VOIDmode, lo_part,\n+\t\t\t\tgen_rtx_SIGN_EXTEND (SImode, operands[1])));\n+      operands[1] = lo_part;\n+    }\n+  operands[0] = gen_highpart (SImode, operands[0]);\n+})\n \n (define_expand \"zero_extendhisi2\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n@@ -4137,26 +4146,22 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=l,l\")\n \t(zero_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"l,m\")))]\n   \"TARGET_THUMB1\"\n-  \"*\n+{\n   rtx mem;\n \n   if (which_alternative == 0 && arm_arch6)\n-    return \\\"uxth\\\\t%0, %1\\\";\n+    return \"uxth\\t%0, %1\";\n   if (which_alternative == 0)\n-    return \\\"#\\\";\n+    return \"#\";\n \n   mem = XEXP (operands[1], 0);\n \n   if (GET_CODE (mem) == CONST)\n     mem = XEXP (mem, 0);\n     \n-  if (GET_CODE (mem) == LABEL_REF)\n-    return \\\"ldr\\\\t%0, %1\\\";\n-    \n   if (GET_CODE (mem) == PLUS)\n     {\n       rtx a = XEXP (mem, 0);\n-      rtx b = XEXP (mem, 1);\n \n       /* This can happen due to bugs in reload.  */\n       if (GET_CODE (a) == REG && REGNO (a) == SP_REGNUM)\n@@ -4165,24 +4170,19 @@\n           ops[0] = operands[0];\n           ops[1] = a;\n       \n-          output_asm_insn (\\\"mov\t%0, %1\\\", ops);\n+          output_asm_insn (\"mov\\t%0, %1\", ops);\n \n           XEXP (mem, 0) = operands[0];\n        }\n-\n-      else if (   GET_CODE (a) == LABEL_REF\n-\t       && GET_CODE (b) == CONST_INT)\n-        return \\\"ldr\\\\t%0, %1\\\";\n     }\n     \n-  return \\\"ldrh\\\\t%0, %1\\\";\n-  \"\n+  return \"ldrh\\t%0, %1\";\n+}\n   [(set_attr_alternative \"length\"\n \t\t\t [(if_then_else (eq_attr \"is_arch6\" \"yes\")\n \t\t\t\t       (const_int 2) (const_int 4))\n \t\t\t (const_int 4)])\n-   (set_attr \"type\" \"alu_shift,load_byte\")\n-   (set_attr \"pool_range\" \"*,60\")]\n+   (set_attr \"type\" \"alu_shift,load_byte\")]\n )\n \n (define_insn \"*arm_zero_extendhisi2\"\n@@ -4193,9 +4193,7 @@\n    #\n    ldr%(h%)\\\\t%0, %1\"\n   [(set_attr \"type\" \"alu_shift,load_byte\")\n-   (set_attr \"predicable\" \"yes\")\n-   (set_attr \"pool_range\" \"*,256\")\n-   (set_attr \"neg_pool_range\" \"*,244\")]\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"*arm_zero_extendhisi2_v6\"\n@@ -4206,9 +4204,7 @@\n    uxth%?\\\\t%0, %1\n    ldr%(h%)\\\\t%0, %1\"\n   [(set_attr \"type\" \"alu_shift,load_byte\")\n-   (set_attr \"predicable\" \"yes\")\n-   (set_attr \"pool_range\" \"*,256\")\n-   (set_attr \"neg_pool_range\" \"*,244\")]\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"*arm_zero_extendhisi2addsi\"\n@@ -4277,9 +4273,8 @@\n   \"@\n    uxtb\\\\t%0, %1\n    ldrb\\\\t%0, %1\"\n-  [(set_attr \"length\" \"2,2\")\n-   (set_attr \"type\" \"alu_shift,load_byte\")\n-   (set_attr \"pool_range\" \"*,32\")]\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"type\" \"alu_shift,load_byte\")]\n )\n \n (define_insn \"*arm_zero_extendqisi2\"\n@@ -4291,9 +4286,7 @@\n    ldr%(b%)\\\\t%0, %1\\\\t%@ zero_extendqisi2\"\n   [(set_attr \"length\" \"8,4\")\n    (set_attr \"type\" \"alu_shift,load_byte\")\n-   (set_attr \"predicable\" \"yes\")\n-   (set_attr \"pool_range\" \"*,4096\")\n-   (set_attr \"neg_pool_range\" \"*,4084\")]\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"*arm_zero_extendqisi2_v6\"\n@@ -4304,9 +4297,7 @@\n    uxtb%(%)\\\\t%0, %1\n    ldr%(b%)\\\\t%0, %1\\\\t%@ zero_extendqisi2\"\n   [(set_attr \"type\" \"alu_shift,load_byte\")\n-   (set_attr \"predicable\" \"yes\")\n-   (set_attr \"pool_range\" \"*,4096\")\n-   (set_attr \"neg_pool_range\" \"*,4084\")]\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"*arm_zero_extendqisi2addsi\""}, {"sha": "9d06f9e70ce5290c8d9d26483af27957d6828335", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da0a441de5c8856c2d0a7e4f0b565170e54a40cf/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da0a441de5c8856c2d0a7e4f0b565170e54a40cf/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=da0a441de5c8856c2d0a7e4f0b565170e54a40cf", "patch": "@@ -370,6 +370,11 @@\n ;; Widen. Result is half the number of elements, but widened to double-width.\n (define_mode_attr V_unpack   [(V16QI \"V8HI\") (V8HI \"V4SI\") (V4SI \"V2DI\")])\n \n+;; Conditions to be used in extend<mode>di patterns.\n+(define_mode_attr qhs_zextenddi_cond [(SI \"\") (HI \"&& arm_arch6\") (QI \"\")])\n+(define_mode_attr qhs_sextenddi_cond [(SI \"\") (HI \"&& arm_arch6\")\n+\t\t\t\t      (QI \"&& arm_arch6\")])\n+\n ;;----------------------------------------------------------------------------\n ;; Code attributes\n ;;----------------------------------------------------------------------------"}, {"sha": "9ccb4d81f455642ef784f7093865564563f10b33", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 0, "deletions": 139, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da0a441de5c8856c2d0a7e4f0b565170e54a40cf/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da0a441de5c8856c2d0a7e4f0b565170e54a40cf/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=da0a441de5c8856c2d0a7e4f0b565170e54a40cf", "patch": "@@ -557,145 +557,6 @@\n \n ;; Zero and sign extension instructions.\n \n-(define_insn_and_split \"*thumb2_zero_extendsidi2\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n-        (zero_extend:DI (match_operand:SI 1 \"s_register_operand\" \"r\")))]\n-  \"TARGET_THUMB2\"\n-  \"mov%?\\\\t%Q0, %1\\;mov%?\\\\t%R0, #0\"\n-  \"&& reload_completed\"\n-  [(set (match_dup 0) (match_dup 1))]\n-  \"\n-  {\n-    rtx lo_part = gen_lowpart (SImode, operands[0]);\n-    if (!REG_P (lo_part) || REGNO (lo_part) != REGNO (operands[1]))\n-      emit_move_insn (lo_part, operands[1]);\n-    operands[0] = gen_highpart (SImode, operands[0]);\n-    operands[1] = const0_rtx;\n-  }\n-  \"\n-  [(set_attr \"length\" \"8\")\n-   (set_attr \"ce_count\" \"2\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn_and_split \"*thumb2_zero_extendhidi2\"\n-  [(set (match_operand:DI                 0 \"s_register_operand\"  \"=r,r\")\n-\t(zero_extend:DI (match_operand:HI 1 \"nonimmediate_operand\" \"r,m\")))]\n-  \"TARGET_THUMB2\"\n-  \"@\n-   uxth%?\\\\t%Q0, %1\\;mov%?\\\\t%R0, #0\n-   ldr%(h%)\\\\t%Q0, %1\\;mov%?\\\\t%R0, #0\"\n-  \"&& reload_completed\"\n-  [(set (match_dup 0) (zero_extend:SI (match_dup 1)))\n-   (set (match_dup 2) (match_dup 3))]\n-  \"\n-  {\n-    operands[2] = gen_highpart (SImode, operands[0]);\n-    operands[0] = gen_lowpart (SImode, operands[0]);\n-    operands[3] = const0_rtx;\n-  }\n-  \"\n-  [(set_attr \"length\" \"8\")\n-   (set_attr \"ce_count\" \"2\")\n-   (set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\" \"*,load_byte\")\n-   (set_attr \"pool_range\" \"*,4092\")\n-   (set_attr \"neg_pool_range\" \"*,250\")]\n-)\n-\n-(define_insn_and_split \"*thumb2_zero_extendqidi2\"\n-  [(set (match_operand:DI                 0 \"s_register_operand\"  \"=r,r\")\n-\t(zero_extend:DI (match_operand:QI 1 \"nonimmediate_operand\" \"r,m\")))]\n-  \"TARGET_THUMB2\"\n-  \"@\n-   uxtb%?\\\\t%Q0, %1\\;mov%?\\\\t%R0, #0\n-   ldr%(b%)\\\\t%Q0, %1\\;mov%?\\\\t%R0, #0\"\n-  \"&& reload_completed\"\n-  [(set (match_dup 0) (zero_extend:SI (match_dup 1)))\n-   (set (match_dup 2) (match_dup 3))]\n-  \"\n-  {\n-    operands[2] = gen_highpart (SImode, operands[0]);\n-    operands[0] = gen_lowpart (SImode, operands[0]);\n-    operands[3] = const0_rtx;\n-  }\n-  \"\n-  [(set_attr \"length\" \"8\")\n-   (set_attr \"ce_count\" \"2\")\n-   (set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\" \"*,load_byte\")\n-   (set_attr \"pool_range\" \"*,4092\")\n-   (set_attr \"neg_pool_range\" \"*,250\")]\n-)\n-\n-(define_insn_and_split \"*thumb2_extendsidi2\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n-        (sign_extend:DI (match_operand:SI 1 \"s_register_operand\" \"r\")))]\n-  \"TARGET_THUMB2\"\n-  \"mov%?\\\\t%Q0, %1\\;asr?\\\\t%R0, %1, #31\"\n-  \"&& reload_completed\"\n-  [(set (match_dup 0) (ashiftrt:SI (match_dup 1) (const_int 31)))]\n-  {\n-    rtx lo_part = gen_lowpart (SImode, operands[0]);\n-\n-    if (!REG_P (lo_part) || REGNO (lo_part) != REGNO (operands[1]))\n-      emit_move_insn (lo_part, operands[1]);\n-    operands[0] = gen_highpart (SImode, operands[0]);\n-  }\n-  [(set_attr \"length\" \"8\")\n-   (set_attr \"ce_count\" \"2\")\n-   (set_attr \"shift\" \"1\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn_and_split \"*thumb2_extendhidi2\"\n-  [(set (match_operand:DI                 0 \"s_register_operand\"  \"=r,r\")\n-\t(sign_extend:DI (match_operand:HI 1 \"nonimmediate_operand\" \"r,m\")))]\n-  \"TARGET_THUMB2\"\n-  \"@\n-   sxth%?\\\\t%Q0, %1\\;asr%?\\\\t%R0, %Q0, #31\n-   ldrsh%?\\\\t%Q0, %1\\;asr%?\\\\t%R0, %Q0, #31\"\n-  \"&& reload_completed\"\n-  [(set (match_dup 0) (sign_extend:SI (match_dup 1)))\n-   (set (match_dup 2) (ashiftrt:SI (match_dup 0) (const_int 31)))]\n-  \"\n-  {\n-    operands[2] = gen_highpart (SImode, operands[0]);\n-    operands[0] = gen_lowpart (SImode, operands[0]);\n-  }\n-  \"\n-  [(set_attr \"length\" \"8\")\n-   (set_attr \"ce_count\" \"2\")\n-   (set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\" \"*,load_byte\")\n-   (set_attr \"pool_range\" \"*,4092\")\n-   (set_attr \"neg_pool_range\" \"*,250\")]\n-)\n-\n-(define_insn_and_split \"*thumb2_extendqidi2\"\n-  [(set (match_operand:DI                 0 \"s_register_operand\"  \"=r,r\")\n-\t(sign_extend:DI (match_operand:QI 1 \"nonimmediate_operand\" \"r,m\")))]\n-  \"TARGET_THUMB2\"\n-  \"@\n-   sxtb%?\\\\t%Q0, %1\\;asr%?\\\\t%R0, %Q0, #31\n-   ldrsb%?\\\\t%Q0, %1\\;asr%?\\\\t%R0, %Q0, #31\"\n-  \"&& reload_completed\"\n-  [(set (match_dup 0) (sign_extend:SI (match_dup 1)))\n-   (set (match_dup 2) (ashiftrt:SI (match_dup 0) (const_int 31)))]\n-  \"\n-  {\n-    operands[2] = gen_highpart (SImode, operands[0]);\n-    operands[0] = gen_lowpart (SImode, operands[0]);\n-  }\n-  \"\n-  [(set_attr \"length\" \"8\")\n-   (set_attr \"ce_count\" \"2\")\n-   (set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\" \"*,load_byte\")\n-   (set_attr \"pool_range\" \"*,4092\")\n-   (set_attr \"neg_pool_range\" \"*,250\")]\n-)\n-\n ;; All supported Thumb2 implementations are armv6, so only that case is\n ;; provided.\n (define_insn \"*thumb2_extendqisi_v6\""}, {"sha": "99c91b4c3e0aa62e110a14bd3a07270df80f1bd0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da0a441de5c8856c2d0a7e4f0b565170e54a40cf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da0a441de5c8856c2d0a7e4f0b565170e54a40cf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=da0a441de5c8856c2d0a7e4f0b565170e54a40cf", "patch": "@@ -1,3 +1,8 @@\n+2010-09-07  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\tPR target/43137\n+\t* gcc.target/arm/pr43137.c: New test.\n+\n 2010-09-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/36931"}, {"sha": "3fb381227f997c6e187cbbea9aca8c0dade4d032", "filename": "gcc/testsuite/gcc.target/arm/pr43137.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da0a441de5c8856c2d0a7e4f0b565170e54a40cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr43137.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da0a441de5c8856c2d0a7e4f0b565170e54a40cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr43137.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr43137.c?ref=da0a441de5c8856c2d0a7e4f0b565170e54a40cf", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-options \"-O2\" }  */\n+/* { dg-final { scan-assembler-not \"mov\\tr1, r\\[1-9\\]\" } } */\n+\n+int foo();\n+long long bar22()\n+{\n+  int result = foo();\n+  return result;\n+}"}]}