{"sha": "693a61283b6ac0e39bd611a46867752baa29d0d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkzYTYxMjgzYjZhYzBlMzliZDYxMWE0Njg2Nzc1MmJhYTI5ZDBkNA==", "commit": {"author": {"name": "Gavin Romig-Koch", "email": "gavin@cygnus.com", "date": "1999-07-06T12:34:50Z"}, "committer": {"name": "Gavin Romig-Koch", "email": "gavin@gcc.gnu.org", "date": "1999-07-06T12:34:50Z"}, "message": "For gcc:\n\n\t* c-common.c (unsigned_type,signed_type,signed_or_unsigned_type) :\n\tMerged from c-typeck.c and cp/typeck.c.\n\t* c-typeck.c (unsigned_type,signed_type,signed_or_unsigned_type) :\n\tMerged into c-common.\nFor gcc/cp:\n\t* typeck.c (unsigned_type,signed_type,signed_or_unsigned_type) :\n\tMerged into c-common.\n\nFrom-SVN: r27956", "tree": {"sha": "51510ed940d18c2fdab307244c95d77f464cf287", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51510ed940d18c2fdab307244c95d77f464cf287"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/693a61283b6ac0e39bd611a46867752baa29d0d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/693a61283b6ac0e39bd611a46867752baa29d0d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/693a61283b6ac0e39bd611a46867752baa29d0d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/693a61283b6ac0e39bd611a46867752baa29d0d4/comments", "author": null, "committer": null, "parents": [{"sha": "1b87232aed3022fbfba58c3cc88dcd2eae32dde3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b87232aed3022fbfba58c3cc88dcd2eae32dde3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b87232aed3022fbfba58c3cc88dcd2eae32dde3"}], "stats": {"total": 301, "additions": 110, "deletions": 191}, "files": [{"sha": "0f7b8a456c8bf66ba265eba1ab89c9de7ff83e2f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/693a61283b6ac0e39bd611a46867752baa29d0d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/693a61283b6ac0e39bd611a46867752baa29d0d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=693a61283b6ac0e39bd611a46867752baa29d0d4", "patch": "@@ -1,3 +1,10 @@\n+Tue Jul  6 15:25:32 1999  Gavin Romig-Koch  <gavin@cygnus.com>\n+\n+\t* c-common.c (unsigned_type,signed_type,signed_or_unsigned_type) :\n+\tMerged from c-typeck.c and cp/typeck.c.\n+\t* c-typeck.c (unsigned_type,signed_type,signed_or_unsigned_type) :\n+\tMerged into c-common.\n+\n Tue Jul  6 13:06:01 1999  Dave Brolley  <brolley@cygnus.com>\n \n \t* c-lex.c (errorcount): Declare it."}, {"sha": "42fc250c96146fe9e7b3c2bd73b92bd4eea00788", "filename": "gcc/c-common.c", "status": "modified", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/693a61283b6ac0e39bd611a46867752baa29d0d4/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/693a61283b6ac0e39bd611a46867752baa29d0d4/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=693a61283b6ac0e39bd611a46867752baa29d0d4", "patch": "@@ -2162,6 +2162,104 @@ type_for_mode (mode, unsignedp)\n \n   return 0;\n }\n+\n+/* Return an unsigned type the same as TYPE in other respects. */\n+tree\n+unsigned_type (type)\n+     tree type;\n+{\n+  tree type1 = TYPE_MAIN_VARIANT (type);\n+  if (type1 == signed_char_type_node || type1 == char_type_node)\n+    return unsigned_char_type_node;\n+  if (type1 == integer_type_node)\n+    return unsigned_type_node;\n+  if (type1 == short_integer_type_node)\n+    return short_unsigned_type_node;\n+  if (type1 == long_integer_type_node)\n+    return long_unsigned_type_node;\n+  if (type1 == long_long_integer_type_node)\n+    return long_long_unsigned_type_node;\n+  if (type1 == widest_integer_literal_type_node)\n+    return widest_unsigned_literal_type_node;\n+#if HOST_BITS_PER_WIDE_INT >= 64\n+  if (type1 == intTI_type_node)\n+    return unsigned_intTI_type_node;\n+#endif\n+  if (type1 == intDI_type_node)\n+    return unsigned_intDI_type_node;\n+  if (type1 == intSI_type_node)\n+    return unsigned_intSI_type_node;\n+  if (type1 == intHI_type_node)\n+    return unsigned_intHI_type_node;\n+  if (type1 == intQI_type_node)\n+    return unsigned_intQI_type_node;\n+\n+  return signed_or_unsigned_type (1, type);\n+}\n+\n+/* Return a signed type the same as TYPE in other respects.  */\n+\n+tree\n+signed_type (type)\n+     tree type;\n+{\n+  tree type1 = TYPE_MAIN_VARIANT (type);\n+  if (type1 == unsigned_char_type_node || type1 == char_type_node)\n+    return signed_char_type_node;\n+  if (type1 == unsigned_type_node)\n+    return integer_type_node;\n+  if (type1 == short_unsigned_type_node)\n+    return short_integer_type_node;\n+  if (type1 == long_unsigned_type_node)\n+    return long_integer_type_node;\n+  if (type1 == long_long_unsigned_type_node)\n+    return long_long_integer_type_node;\n+  if (type1 == widest_unsigned_literal_type_node)\n+    return widest_integer_literal_type_node;\n+#if HOST_BITS_PER_WIDE_INT >= 64\n+  if (type1 == unsigned_intTI_type_node)\n+    return intTI_type_node;\n+#endif\n+  if (type1 == unsigned_intDI_type_node)\n+    return intDI_type_node;\n+  if (type1 == unsigned_intSI_type_node)\n+    return intSI_type_node;\n+  if (type1 == unsigned_intHI_type_node)\n+    return intHI_type_node;\n+  if (type1 == unsigned_intQI_type_node)\n+    return intQI_type_node;\n+\n+  return signed_or_unsigned_type (0, type);\n+}\n+\n+/* Return a type the same as TYPE except unsigned or\n+   signed according to UNSIGNEDP.  */\n+\n+tree\n+signed_or_unsigned_type (unsignedp, type)\n+     int unsignedp;\n+     tree type;\n+{\n+  if (! INTEGRAL_TYPE_P (type)\n+      || TREE_UNSIGNED (type) == unsignedp)\n+    return type;\n+\n+  if (TYPE_PRECISION (type) == TYPE_PRECISION (signed_char_type_node))\n+    return unsignedp ? unsigned_char_type_node : signed_char_type_node;\n+  if (TYPE_PRECISION (type) == TYPE_PRECISION (integer_type_node)) \n+    return unsignedp ? unsigned_type_node : integer_type_node;\n+  if (TYPE_PRECISION (type) == TYPE_PRECISION (short_integer_type_node)) \n+    return unsignedp ? short_unsigned_type_node : short_integer_type_node;\n+  if (TYPE_PRECISION (type) == TYPE_PRECISION (long_integer_type_node)) \n+    return unsignedp ? long_unsigned_type_node : long_integer_type_node;\n+  if (TYPE_PRECISION (type) == TYPE_PRECISION (long_long_integer_type_node)) \n+    return (unsignedp ? long_long_unsigned_type_node\n+\t    : long_long_integer_type_node);\n+  if (TYPE_PRECISION (type) == TYPE_PRECISION (widest_integer_literal_type_node)) \n+    return (unsignedp ? widest_unsigned_literal_type_node\n+\t    : widest_integer_literal_type_node);\n+  return type;\n+}\n \f\n /* Return the minimum number of bits needed to represent VALUE in a\n    signed or unsigned type, UNSIGNEDP says which.  */"}, {"sha": "d4749cda234b0af8574b5985d84e95a8cde86fdc", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 0, "deletions": 90, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/693a61283b6ac0e39bd611a46867752baa29d0d4/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/693a61283b6ac0e39bd611a46867752baa29d0d4/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=693a61283b6ac0e39bd611a46867752baa29d0d4", "patch": "@@ -722,96 +722,6 @@ self_promoting_type_p (type)\n   return 1;\n }\n \f\n-/* Return an unsigned type the same as TYPE in other respects.  */\n-\n-tree\n-unsigned_type (type)\n-     tree type;\n-{\n-  tree type1 = TYPE_MAIN_VARIANT (type);\n-  if (type1 == signed_char_type_node || type1 == char_type_node)\n-    return unsigned_char_type_node;\n-  if (type1 == integer_type_node)\n-    return unsigned_type_node;\n-  if (type1 == short_integer_type_node)\n-    return short_unsigned_type_node;\n-  if (type1 == long_integer_type_node)\n-    return long_unsigned_type_node;\n-  if (type1 == long_long_integer_type_node)\n-    return long_long_unsigned_type_node;\n-  if (type1 == widest_integer_literal_type_node)\n-    return widest_unsigned_literal_type_node;\n-  if (type1 == intDI_type_node)\n-    return unsigned_intDI_type_node;\n-  if (type1 == intSI_type_node)\n-    return unsigned_intSI_type_node;\n-  if (type1 == intHI_type_node)\n-    return unsigned_intHI_type_node;\n-  if (type1 == intQI_type_node)\n-    return unsigned_intQI_type_node;\n-\n-  return signed_or_unsigned_type (1, type);\n-}\n-\n-/* Return a signed type the same as TYPE in other respects.  */\n-\n-tree\n-signed_type (type)\n-     tree type;\n-{\n-  tree type1 = TYPE_MAIN_VARIANT (type);\n-  if (type1 == unsigned_char_type_node || type1 == char_type_node)\n-    return signed_char_type_node;\n-  if (type1 == unsigned_type_node)\n-    return integer_type_node;\n-  if (type1 == short_unsigned_type_node)\n-    return short_integer_type_node;\n-  if (type1 == long_unsigned_type_node)\n-    return long_integer_type_node;\n-  if (type1 == long_long_unsigned_type_node)\n-    return long_long_integer_type_node;\n-  if (type1 == widest_unsigned_literal_type_node)\n-    return widest_integer_literal_type_node;\n-  if (type1 == unsigned_intDI_type_node)\n-    return intDI_type_node;\n-  if (type1 == unsigned_intSI_type_node)\n-    return intSI_type_node;\n-  if (type1 == unsigned_intHI_type_node)\n-    return intHI_type_node;\n-  if (type1 == unsigned_intQI_type_node)\n-    return intQI_type_node;\n-\n-  return signed_or_unsigned_type (0, type);\n-}\n-\n-/* Return a type the same as TYPE except unsigned or\n-   signed according to UNSIGNEDP.  */\n-\n-tree\n-signed_or_unsigned_type (unsignedp, type)\n-     int unsignedp;\n-     tree type;\n-{\n-  if ((! INTEGRAL_TYPE_P (type) && ! POINTER_TYPE_P (type))\n-      || TREE_UNSIGNED (type) == unsignedp)\n-    return type;\n-  if (TYPE_PRECISION (type) == TYPE_PRECISION (signed_char_type_node))\n-    return unsignedp ? unsigned_char_type_node : signed_char_type_node;\n-  if (TYPE_PRECISION (type) == TYPE_PRECISION (integer_type_node)) \n-    return unsignedp ? unsigned_type_node : integer_type_node;\n-  if (TYPE_PRECISION (type) == TYPE_PRECISION (short_integer_type_node)) \n-    return unsignedp ? short_unsigned_type_node : short_integer_type_node;\n-  if (TYPE_PRECISION (type) == TYPE_PRECISION (long_integer_type_node)) \n-    return unsignedp ? long_unsigned_type_node : long_integer_type_node;\n-  if (TYPE_PRECISION (type) == TYPE_PRECISION (long_long_integer_type_node)) \n-    return (unsignedp ? long_long_unsigned_type_node\n-\t    : long_long_integer_type_node);\n-  if (TYPE_PRECISION (type) == TYPE_PRECISION (widest_integer_literal_type_node)) \n-    return (unsignedp ? widest_unsigned_literal_type_node\n-\t    : widest_integer_literal_type_node);\n-  return type;\n-}\n-\n /* Compute the value of the `sizeof' operator.  */\n \n tree"}, {"sha": "dc76bc356c211fa8a3a9909066507b7c0094a1a9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/693a61283b6ac0e39bd611a46867752baa29d0d4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/693a61283b6ac0e39bd611a46867752baa29d0d4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=693a61283b6ac0e39bd611a46867752baa29d0d4", "patch": "@@ -1,3 +1,8 @@\n+1999-07-06  Gavin Romig-Koch  <gavin@cygnus.com>\n+\n+\t* typeck.c (unsigned_type,signed_type,signed_or_unsigned_type) :\n+\tMerged into c-common.\n+\n 1999-07-05  Dave Brolley  <brolley@cygnus.com>\n \n \t* lex.c (errorcount): Declare it."}, {"sha": "8829d9d91f56b616c747596d395a42fe4c86e923", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 0, "deletions": 101, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/693a61283b6ac0e39bd611a46867752baa29d0d4/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/693a61283b6ac0e39bd611a46867752baa29d0d4/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=693a61283b6ac0e39bd611a46867752baa29d0d4", "patch": "@@ -1456,107 +1456,6 @@ self_promoting_args_p (parms)\n   return 1;\n }\n \f\n-/* Return an unsigned type the same as TYPE in other respects.\n-\n-   C++: must make these work for type variants as well.  */\n-\n-tree\n-unsigned_type (type)\n-     tree type;\n-{\n-  tree type1 = TYPE_MAIN_VARIANT (type);\n-  if (type1 == signed_char_type_node || type1 == char_type_node)\n-    return unsigned_char_type_node;\n-  if (type1 == integer_type_node)\n-    return unsigned_type_node;\n-  if (type1 == short_integer_type_node)\n-    return short_unsigned_type_node;\n-  if (type1 == long_integer_type_node)\n-    return long_unsigned_type_node;\n-  if (type1 == long_long_integer_type_node)\n-    return long_long_unsigned_type_node;\n-  if (type1 == widest_integer_literal_type_node)\n-    return widest_unsigned_literal_type_node;\n-#if HOST_BITS_PER_WIDE_INT >= 64\n-  if (type1 == intTI_type_node)\n-    return unsigned_intTI_type_node;\n-#endif\n-  if (type1 == intDI_type_node)\n-    return unsigned_intDI_type_node;\n-  if (type1 == intSI_type_node)\n-    return unsigned_intSI_type_node;\n-  if (type1 == intHI_type_node)\n-    return unsigned_intHI_type_node;\n-  if (type1 == intQI_type_node)\n-    return unsigned_intQI_type_node;\n-\n-  return signed_or_unsigned_type (1, type);\n-}\n-\n-/* Return a signed type the same as TYPE in other respects.  */\n-\n-tree\n-signed_type (type)\n-     tree type;\n-{\n-  tree type1 = TYPE_MAIN_VARIANT (type);\n-  if (type1 == unsigned_char_type_node || type1 == char_type_node)\n-    return signed_char_type_node;\n-  if (type1 == unsigned_type_node)\n-    return integer_type_node;\n-  if (type1 == short_unsigned_type_node)\n-    return short_integer_type_node;\n-  if (type1 == long_unsigned_type_node)\n-    return long_integer_type_node;\n-  if (type1 == long_long_unsigned_type_node)\n-    return long_long_integer_type_node;\n-  if (type1 == widest_unsigned_literal_type_node)\n-    return widest_integer_literal_type_node;\n-#if HOST_BITS_PER_WIDE_INT >= 64\n-  if (type1 == unsigned_intTI_type_node)\n-    return intTI_type_node;\n-#endif\n-  if (type1 == unsigned_intDI_type_node)\n-    return intDI_type_node;\n-  if (type1 == unsigned_intSI_type_node)\n-    return intSI_type_node;\n-  if (type1 == unsigned_intHI_type_node)\n-    return intHI_type_node;\n-  if (type1 == unsigned_intQI_type_node)\n-    return intQI_type_node;\n-\n-  return signed_or_unsigned_type (0, type);\n-}\n-\n-/* Return a type the same as TYPE except unsigned or\n-   signed according to UNSIGNEDP.  */\n-\n-tree\n-signed_or_unsigned_type (unsignedp, type)\n-     int unsignedp;\n-     tree type;\n-{\n-  if (! INTEGRAL_TYPE_P (type)\n-      || TREE_UNSIGNED (type) == unsignedp)\n-    return type;\n-\n-  if (TYPE_PRECISION (type) == TYPE_PRECISION (signed_char_type_node))\n-    return unsignedp ? unsigned_char_type_node : signed_char_type_node;\n-  if (TYPE_PRECISION (type) == TYPE_PRECISION (integer_type_node)) \n-    return unsignedp ? unsigned_type_node : integer_type_node;\n-  if (TYPE_PRECISION (type) == TYPE_PRECISION (short_integer_type_node)) \n-    return unsignedp ? short_unsigned_type_node : short_integer_type_node;\n-  if (TYPE_PRECISION (type) == TYPE_PRECISION (long_integer_type_node)) \n-    return unsignedp ? long_unsigned_type_node : long_integer_type_node;\n-  if (TYPE_PRECISION (type) == TYPE_PRECISION (long_long_integer_type_node)) \n-    return (unsignedp ? long_long_unsigned_type_node\n-\t    : long_long_integer_type_node);\n-  if (TYPE_PRECISION (type) == TYPE_PRECISION (widest_integer_literal_type_node)) \n-    return (unsignedp ? widest_unsigned_literal_type_node\n-\t    : widest_integer_literal_type_node);\n-  return type;\n-}\n-\n /* Compute the value of the `sizeof' operator.  */\n \n tree"}]}