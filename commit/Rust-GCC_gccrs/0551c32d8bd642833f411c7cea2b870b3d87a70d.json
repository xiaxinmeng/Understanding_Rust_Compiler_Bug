{"sha": "0551c32d8bd642833f411c7cea2b870b3d87a70d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU1MWMzMmQ4YmQ2NDI4MzNmNDExYzdjZWEyYjg3MGIzZDg3YTcwZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-08-24T21:40:24Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-08-24T21:40:24Z"}, "message": "stmt.c (expand_asm_operands): Treat EXTRA_CONSTRAINT like g or X.\n\n\t* stmt.c (expand_asm_operands): Treat EXTRA_CONSTRAINT like g or X.\n\n\t* config/ia64/ia64-protos.h: Update.\n\t* config/ia64/ia64.c (gr_register_operand): New.\n\t(fr_register_operand, grfr_register_operand): New.\n\t(gr_nonimmediate_operand, grfr_nonimmediate_operand): New.\n\t(grfr_reg_or_8bit_operand): New.\n\t(gr_reg_or_0_operand): Rename from reg_or_0_operand and\n\tuse gr_register_operand.\n\t(gr_reg_or_5bit_operand, gr_reg_or_6bit_operand): Likewise.\n\t(gr_reg_or_8bit_operand, gr_reg_or_8bit_adjusted_operand): Likewise.\n\t(gr_reg_or_8bit_and_adjusted_operand): Likewise.\n\t(gr_reg_or_14bit_operand, gr_reg_or_22bit_operand): Likewise.\n\t(fr_reg_or_fp01_operand): Likewise.\n\t(not_postinc_memory_operand): New.\n\t(ia64_split_timode): Remove unused variables.\n\t(rtx_needs_barrier): Check arguments to cmpxchg.\n\t(builtin_description): Remove.\n\t(bdesc_2argsi, bdesc_2argdi): Remove.\n\t(ia64_init_builtins): Declare all builtins directly.\n\t(ia64_expand_fetch_and_op): Rewrite to be called from\n\tia64_expand_builtin directly.  Use expand_binop and co.\n\t(ia64_expand_op_and_fetch): Likewise.\n\t(ia64_expand_compare_and_swap): Likewise.\n\t(ia64_expand_binop_builtin): Remove.\n\t(ia64_expand_lock_test_and_set): New.\n\t(ia64_expand_lock_release): New.\n\t(ia64_expand_builtin): Use them.\n\t* config/ia64/ia64.h (CONSTRAINT_OK_FOR_S): New.\n\t(EXTRA_CONSTRAINT): Use it.\n\t(PREDICATE_CODES): Update.\n\t* config/ia64/ia64.md (*): Use gr_register_operand and co.\n\t(mf): Indicate that we set memory as well as use it.\n\t(fetchadd_acq_si): Show memory being modified as well.\n\t(fetchadd_acq_di, cmpxchg_acq_si, cmpxchg_acq_di): Likewise.\n\t(val_compare_and_swap_si, val_compare_and_swap_di): Remove.\n\t(lock_test_and_set_si, lock_test_and_set_di): Remove.\n\t(fetch_and_add_si, fetch_and_sub_si, fetch_and_or_si): Remove.\n\t(fetch_and_and_si, fetch_and_xor_si, fetch_and_nand_si): Remove.\n\t(fetch_and_add_di, fetch_and_sub_di, fetch_and_or_di): Remove.\n\t(fetch_and_and_di, fetch_and_xor_di, fetch_and_nand_di): Remove.\n\t(add_and_fetch_di, sub_and_fetch_di, or_and_fetch_di): Remove.\n\t(and_and_fetch_di, xor_and_fetch_di, nand_and_fetch_di): Remove.\n\t(add_and_fetch_si, sub_and_fetch_si, or_and_fetch_si): Remove.\n\t(and_and_fetch_si, xor_and_fetch_si, nand_and_fetch_si): Remove.\n\t* config/ia64/ia64intrin.h (*): Cast result to the appropriate\n\treturn type.  Pretty print definitions.\n\nFrom-SVN: r35956", "tree": {"sha": "918cbf3582921819ef884152684496a332c4558c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/918cbf3582921819ef884152684496a332c4558c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0551c32d8bd642833f411c7cea2b870b3d87a70d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0551c32d8bd642833f411c7cea2b870b3d87a70d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0551c32d8bd642833f411c7cea2b870b3d87a70d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0551c32d8bd642833f411c7cea2b870b3d87a70d/comments", "author": null, "committer": null, "parents": [{"sha": "7c866fb5223248c7f8ebf7bb462da9e765557f20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c866fb5223248c7f8ebf7bb462da9e765557f20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c866fb5223248c7f8ebf7bb462da9e765557f20"}], "stats": {"total": 2324, "additions": 1116, "deletions": 1208}, "files": [{"sha": "f346a883db63f264752370b2b4f901619e90f5e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0551c32d8bd642833f411c7cea2b870b3d87a70d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0551c32d8bd642833f411c7cea2b870b3d87a70d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0551c32d8bd642833f411c7cea2b870b3d87a70d", "patch": "@@ -1,3 +1,53 @@\n+2000-08-24  Richard Henderson  <rth@cygnus.com>\n+\n+\t* stmt.c (expand_asm_operands): Treat EXTRA_CONSTRAINT like g or X.\n+\n+\t* config/ia64/ia64-protos.h: Update.\n+\t* config/ia64/ia64.c (gr_register_operand): New.\n+\t(fr_register_operand, grfr_register_operand): New.\n+\t(gr_nonimmediate_operand, grfr_nonimmediate_operand): New.\n+\t(grfr_reg_or_8bit_operand): New.\n+\t(gr_reg_or_0_operand): Rename from reg_or_0_operand and \n+\tuse gr_register_operand.\n+\t(gr_reg_or_5bit_operand, gr_reg_or_6bit_operand): Likewise.\n+\t(gr_reg_or_8bit_operand, gr_reg_or_8bit_adjusted_operand): Likewise.\n+\t(gr_reg_or_8bit_and_adjusted_operand): Likewise.\n+\t(gr_reg_or_14bit_operand, gr_reg_or_22bit_operand): Likewise.\n+\t(fr_reg_or_fp01_operand): Likewise.\n+\t(not_postinc_memory_operand): New.\n+\t(ia64_split_timode): Remove unused variables.\n+\t(rtx_needs_barrier): Check arguments to cmpxchg.\n+\t(builtin_description): Remove.\n+\t(bdesc_2argsi, bdesc_2argdi): Remove.\n+\t(ia64_init_builtins): Declare all builtins directly.\n+\t(ia64_expand_fetch_and_op): Rewrite to be called from\n+\tia64_expand_builtin directly.  Use expand_binop and co.\n+\t(ia64_expand_op_and_fetch): Likewise.\n+\t(ia64_expand_compare_and_swap): Likewise.\n+\t(ia64_expand_binop_builtin): Remove.\n+\t(ia64_expand_lock_test_and_set): New.\n+\t(ia64_expand_lock_release): New.\n+\t(ia64_expand_builtin): Use them.\n+\t* config/ia64/ia64.h (CONSTRAINT_OK_FOR_S): New.\n+\t(EXTRA_CONSTRAINT): Use it.\n+\t(PREDICATE_CODES): Update.\n+\t* config/ia64/ia64.md (*): Use gr_register_operand and co.\n+\t(mf): Indicate that we set memory as well as use it.\n+\t(fetchadd_acq_si): Show memory being modified as well.\n+\t(fetchadd_acq_di, cmpxchg_acq_si, cmpxchg_acq_di): Likewise. \n+\t(val_compare_and_swap_si, val_compare_and_swap_di): Remove.\n+\t(lock_test_and_set_si, lock_test_and_set_di): Remove.\n+\t(fetch_and_add_si, fetch_and_sub_si, fetch_and_or_si): Remove.\n+\t(fetch_and_and_si, fetch_and_xor_si, fetch_and_nand_si): Remove.\n+\t(fetch_and_add_di, fetch_and_sub_di, fetch_and_or_di): Remove.\n+\t(fetch_and_and_di, fetch_and_xor_di, fetch_and_nand_di): Remove.\n+\t(add_and_fetch_di, sub_and_fetch_di, or_and_fetch_di): Remove.\n+\t(and_and_fetch_di, xor_and_fetch_di, nand_and_fetch_di): Remove.\n+\t(add_and_fetch_si, sub_and_fetch_si, or_and_fetch_si): Remove.\n+\t(and_and_fetch_si, xor_and_fetch_si, nand_and_fetch_si): Remove.\n+\t* config/ia64/ia64intrin.h (*): Cast result to the appropriate\n+\treturn type.  Pretty print definitions.\n+\n 2000-08-24  Jim Wilson  <wilson@cygnus.com>\n \n \t* config/ia64/ia64.md (movdi): Don't call gen_movdi_symbolic if"}, {"sha": "8aead0ab855edf937e8b726889654554d46b6331", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0551c32d8bd642833f411c7cea2b870b3d87a70d/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0551c32d8bd642833f411c7cea2b870b3d87a70d/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=0551c32d8bd642833f411c7cea2b870b3d87a70d", "patch": "@@ -34,23 +34,30 @@ extern int symbolic_operand PARAMS((rtx, enum machine_mode));\n extern int function_operand PARAMS((rtx, enum machine_mode));\n extern int setjmp_operand PARAMS((rtx, enum machine_mode));\n extern int move_operand PARAMS((rtx, enum machine_mode));\n-extern int reg_or_0_operand PARAMS((rtx, enum machine_mode));\n-extern int reg_or_5bit_operand PARAMS((rtx, enum machine_mode));\n-extern int reg_or_6bit_operand PARAMS((rtx, enum machine_mode));\n-extern int reg_or_8bit_operand PARAMS((rtx, enum machine_mode));\n-extern int reg_or_8bit_adjusted_operand PARAMS((rtx, enum machine_mode));\n-extern int reg_or_8bit_and_adjusted_operand PARAMS((rtx, enum machine_mode));\n-extern int reg_or_14bit_operand PARAMS((rtx, enum machine_mode));\n-extern int reg_or_22bit_operand PARAMS((rtx, enum machine_mode));\n+extern int gr_register_operand PARAMS((rtx, enum machine_mode));\n+extern int fr_register_operand PARAMS((rtx, enum machine_mode));\n+extern int grfr_register_operand PARAMS((rtx, enum machine_mode));\n+extern int gr_nonimmediate_operand PARAMS((rtx, enum machine_mode));\n+extern int grfr_nonimmediate_operand PARAMS((rtx, enum machine_mode));\n+extern int gr_reg_or_0_operand PARAMS((rtx, enum machine_mode));\n+extern int gr_reg_or_5bit_operand PARAMS((rtx, enum machine_mode));\n+extern int gr_reg_or_6bit_operand PARAMS((rtx, enum machine_mode));\n+extern int gr_reg_or_8bit_operand PARAMS((rtx, enum machine_mode));\n+extern int grfr_reg_or_8bit_operand PARAMS((rtx, enum machine_mode));\n+extern int gr_reg_or_8bit_adjusted_operand PARAMS((rtx, enum machine_mode));\n+extern int gr_reg_or_8bit_and_adjusted_operand PARAMS((rtx, enum machine_mode));\n+extern int gr_reg_or_14bit_operand PARAMS((rtx, enum machine_mode));\n+extern int gr_reg_or_22bit_operand PARAMS((rtx, enum machine_mode));\n extern int shift_count_operand PARAMS((rtx, enum machine_mode));\n extern int shift_32bit_count_operand PARAMS((rtx, enum machine_mode));\n extern int shladd_operand PARAMS((rtx, enum machine_mode));\n extern int fetchadd_operand PARAMS((rtx, enum machine_mode));\n-extern int reg_or_fp01_operand PARAMS((rtx, enum machine_mode));\n+extern int fr_reg_or_fp01_operand PARAMS((rtx, enum machine_mode));\n extern int normal_comparison_operator PARAMS((rtx, enum machine_mode));\n extern int adjusted_comparison_operator PARAMS((rtx, enum machine_mode));\n extern int call_multiple_values_operation PARAMS((rtx, enum machine_mode));\n extern int destination_operand PARAMS((rtx, enum machine_mode));\n+extern int not_postinc_memory_operand PARAMS((rtx, enum machine_mode));\n extern int predicate_operator PARAMS((rtx, enum machine_mode));\n extern int ar_lc_reg_operand PARAMS((rtx, enum machine_mode));\n extern int ar_ccv_reg_operand PARAMS((rtx, enum machine_mode));\n@@ -72,10 +79,6 @@ extern void ia64_function_epilogue PARAMS((FILE *, int));\n \n extern int ia64_direct_return PARAMS((void));\n extern void ia64_expand_load_address PARAMS((rtx, rtx));\n-extern void ia64_expand_fetch_and_op PARAMS ((enum fetchop_code,\n-\t\t\t\t\t      enum machine_mode, rtx []));\n-extern void ia64_expand_op_and_fetch PARAMS ((enum fetchop_code,\n-\t\t\t\t\t      enum machine_mode, rtx []));\n \n extern void ia64_initialize_trampoline PARAMS((rtx, rtx, rtx));\n extern void ia64_print_operand_address PARAMS((FILE *, rtx));"}, {"sha": "f73972963d9feac1244c839dd99824f17dd0e948", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 511, "deletions": 407, "changes": 918, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0551c32d8bd642833f411c7cea2b870b3d87a70d/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0551c32d8bd642833f411c7cea2b870b3d87a70d/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=0551c32d8bd642833f411c7cea2b870b3d87a70d", "patch": "@@ -105,6 +105,9 @@ static void finish_spill_pointers PARAMS ((void));\n static rtx spill_restore_mem PARAMS ((rtx, HOST_WIDE_INT));\n static void do_spill PARAMS ((rtx (*)(rtx, rtx, rtx), rtx, HOST_WIDE_INT, rtx));\n static void do_restore PARAMS ((rtx (*)(rtx, rtx, rtx), rtx, HOST_WIDE_INT));\n+static rtx gen_movdi_x PARAMS ((rtx, rtx, rtx));\n+static rtx gen_fr_spill_x PARAMS ((rtx, rtx, rtx));\n+static rtx gen_fr_restore_x PARAMS ((rtx, rtx, rtx));\n \n static enum machine_mode hfa_element_mode PARAMS ((tree, int));\n static void fix_range PARAMS ((const char *));\n@@ -114,9 +117,17 @@ static void ia64_mark_machine_status PARAMS ((struct function *));\n static void emit_insn_group_barriers PARAMS ((rtx));\n static void emit_predicate_relation_info PARAMS ((rtx));\n static int process_set PARAMS ((FILE *, rtx));\n-static rtx ia64_expand_compare_and_swap PARAMS ((enum insn_code, tree,\n-\t\t\t\t\t\t rtx, int));\n-static rtx ia64_expand_binop_builtin PARAMS ((enum insn_code, tree, rtx));\n+\n+static rtx ia64_expand_fetch_and_op PARAMS ((optab, enum machine_mode,\n+\t\t\t\t\t     tree, rtx));\n+static rtx ia64_expand_op_and_fetch PARAMS ((optab, enum machine_mode,\n+\t\t\t\t\t     tree, rtx));\n+static rtx ia64_expand_compare_and_swap PARAMS ((enum machine_mode, int,\n+\t\t\t\t\t\t tree, rtx));\n+static rtx ia64_expand_lock_test_and_set PARAMS ((enum machine_mode,\n+\t\t\t\t\t\t  tree, rtx));\n+static rtx ia64_expand_lock_release PARAMS ((enum machine_mode, tree, rtx));\n+\n \f\n /* Return 1 if OP is a valid operand for the MEM of a CALL insn.  */\n \n@@ -306,64 +317,175 @@ move_operand (op, mode)\n   return general_operand (op, mode);\n }\n \n-/* Return 1 if OP is a register operand, or zero.  */\n+/* Return 1 if OP is a register operand that is (or could be) a GR reg.  */\n+\n+int\n+gr_register_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  if (! register_operand (op, mode))\n+    return 0;\n+  if (GET_CODE (op) == SUBREG)\n+    op = SUBREG_REG (op);\n+  if (GET_CODE (op) == REG)\n+    {\n+      unsigned int regno = REGNO (op);\n+      if (regno < FIRST_PSEUDO_REGISTER)\n+\treturn GENERAL_REGNO_P (regno);\n+    }\n+  return 1;\n+}\n+\n+/* Return 1 if OP is a register operand that is (or could be) an FR reg.  */\n+\n+int\n+fr_register_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  if (! register_operand (op, mode))\n+    return 0;\n+  if (GET_CODE (op) == SUBREG)\n+    op = SUBREG_REG (op);\n+  if (GET_CODE (op) == REG)\n+    {\n+      unsigned int regno = REGNO (op);\n+      if (regno < FIRST_PSEUDO_REGISTER)\n+\treturn FR_REGNO_P (regno);\n+    }\n+  return 1;\n+}\n+\n+/* Return 1 if OP is a register operand that is (or could be) a GR/FR reg.  */\n+\n+int\n+grfr_register_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  if (! register_operand (op, mode))\n+    return 0;\n+  if (GET_CODE (op) == SUBREG)\n+    op = SUBREG_REG (op);\n+  if (GET_CODE (op) == REG)\n+    {\n+      unsigned int regno = REGNO (op);\n+      if (regno < FIRST_PSEUDO_REGISTER)\n+\treturn GENERAL_REGNO_P (regno) || FR_REGNO_P (regno);\n+    }\n+  return 1;\n+}\n+\n+/* Return 1 if OP is a nonimmediate operand that is (or could be) a GR reg.  */\n+\n+int\n+gr_nonimmediate_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  if (! nonimmediate_operand (op, mode))\n+    return 0;\n+  if (GET_CODE (op) == SUBREG)\n+    op = SUBREG_REG (op);\n+  if (GET_CODE (op) == REG)\n+    {\n+      unsigned int regno = REGNO (op);\n+      if (regno < FIRST_PSEUDO_REGISTER)\n+\treturn GENERAL_REGNO_P (regno);\n+    }\n+  return 1;\n+}\n+\n+/* Return 1 if OP is a nonimmediate operand that is a GR/FR reg.  */\n+\n+int\n+grfr_nonimmediate_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  if (! nonimmediate_operand (op, mode))\n+    return 0;\n+  if (GET_CODE (op) == SUBREG)\n+    op = SUBREG_REG (op);\n+  if (GET_CODE (op) == REG)\n+    {\n+      unsigned int regno = REGNO (op);\n+      if (regno < FIRST_PSEUDO_REGISTER)\n+\treturn GENERAL_REGNO_P (regno) || FR_REGNO_P (regno);\n+    }\n+  return 1;\n+}\n+\n+/* Return 1 if OP is a GR register operand, or zero.  */\n \n int\n-reg_or_0_operand (op, mode)\n+gr_reg_or_0_operand (op, mode)\n      rtx op;\n      enum machine_mode mode;\n {\n-  return (op == const0_rtx || register_operand (op, mode));\n+  return (op == const0_rtx || gr_register_operand (op, mode));\n }\n \n-/* Return 1 if OP is a register operand, or a 5 bit immediate operand.  */\n+/* Return 1 if OP is a GR register operand, or a 5 bit immediate operand.  */\n \n int\n-reg_or_5bit_operand (op, mode)\n+gr_reg_or_5bit_operand (op, mode)\n      rtx op;\n      enum machine_mode mode;\n {\n   return ((GET_CODE (op) == CONST_INT && INTVAL (op) >= 0 && INTVAL (op) < 32)\n \t  || GET_CODE (op) == CONSTANT_P_RTX\n-\t  || register_operand (op, mode));\n+\t  || gr_register_operand (op, mode));\n }\n \n-/* Return 1 if OP is a register operand, or a 6 bit immediate operand.  */\n+/* Return 1 if OP is a GR register operand, or a 6 bit immediate operand.  */\n \n int\n-reg_or_6bit_operand (op, mode)\n+gr_reg_or_6bit_operand (op, mode)\n      rtx op;\n      enum machine_mode mode;\n {\n   return ((GET_CODE (op) == CONST_INT && CONST_OK_FOR_M (INTVAL (op)))\n \t  || GET_CODE (op) == CONSTANT_P_RTX\n-\t  || register_operand (op, mode));\n+\t  || gr_register_operand (op, mode));\n }\n \n-/* Return 1 if OP is a register operand, or an 8 bit immediate operand.  */\n+/* Return 1 if OP is a GR register operand, or an 8 bit immediate operand.  */\n \n int\n-reg_or_8bit_operand (op, mode)\n+gr_reg_or_8bit_operand (op, mode)\n      rtx op;\n      enum machine_mode mode;\n {\n   return ((GET_CODE (op) == CONST_INT && CONST_OK_FOR_K (INTVAL (op)))\n \t  || GET_CODE (op) == CONSTANT_P_RTX\n-\t  || register_operand (op, mode));\n+\t  || gr_register_operand (op, mode));\n }\n \n+/* Return 1 if OP is a GR/FR register operand, or an 8 bit immediate.  */\n+\n+int\n+grfr_reg_or_8bit_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  return ((GET_CODE (op) == CONST_INT && CONST_OK_FOR_K (INTVAL (op)))\n+\t  || GET_CODE (op) == CONSTANT_P_RTX\n+\t  || grfr_register_operand (op, mode));\n+}\n \n /* Return 1 if OP is a register operand, or an 8 bit adjusted immediate\n    operand.  */\n \n int\n-reg_or_8bit_adjusted_operand (op, mode)\n+gr_reg_or_8bit_adjusted_operand (op, mode)\n      rtx op;\n      enum machine_mode mode;\n {\n   return ((GET_CODE (op) == CONST_INT && CONST_OK_FOR_L (INTVAL (op)))\n \t  || GET_CODE (op) == CONSTANT_P_RTX\n-\t  || register_operand (op, mode));\n+\t  || gr_register_operand (op, mode));\n }\n \n /* Return 1 if OP is a register operand, or is valid for both an 8 bit\n@@ -372,38 +494,38 @@ reg_or_8bit_adjusted_operand (op, mode)\n    so we need the union of the immediates accepted by GT and LT.  */\n \n int\n-reg_or_8bit_and_adjusted_operand (op, mode)\n+gr_reg_or_8bit_and_adjusted_operand (op, mode)\n      rtx op;\n      enum machine_mode mode;\n {\n   return ((GET_CODE (op) == CONST_INT && CONST_OK_FOR_K (INTVAL (op))\n \t   && CONST_OK_FOR_L (INTVAL (op)))\n \t  || GET_CODE (op) == CONSTANT_P_RTX\n-\t  || register_operand (op, mode));\n+\t  || gr_register_operand (op, mode));\n }\n \n /* Return 1 if OP is a register operand, or a 14 bit immediate operand.  */\n \n int\n-reg_or_14bit_operand (op, mode)\n+gr_reg_or_14bit_operand (op, mode)\n      rtx op;\n      enum machine_mode mode;\n {\n   return ((GET_CODE (op) == CONST_INT && CONST_OK_FOR_I (INTVAL (op)))\n \t  || GET_CODE (op) == CONSTANT_P_RTX\n-\t  || register_operand (op, mode));\n+\t  || gr_register_operand (op, mode));\n }\n \n /* Return 1 if OP is a register operand, or a 22 bit immediate operand.  */\n \n int\n-reg_or_22bit_operand (op, mode)\n+gr_reg_or_22bit_operand (op, mode)\n      rtx op;\n      enum machine_mode mode;\n {\n   return ((GET_CODE (op) == CONST_INT && CONST_OK_FOR_J (INTVAL (op)))\n \t  || GET_CODE (op) == CONSTANT_P_RTX\n-\t  || register_operand (op, mode));\n+\t  || gr_register_operand (op, mode));\n }\n \n /* Return 1 if OP is a 6 bit immediate operand.  */\n@@ -458,13 +580,12 @@ fetchadd_operand (op, mode)\n /* Return 1 if OP is a floating-point constant zero, one, or a register.  */\n \n int\n-reg_or_fp01_operand (op, mode)\n+fr_reg_or_fp01_operand (op, mode)\n      rtx op;\n      enum machine_mode mode;\n {\n   return ((GET_CODE (op) == CONST_DOUBLE && CONST_DOUBLE_OK_FOR_G (op))\n-\t  || GET_CODE (op) == CONSTANT_P_RTX\n-\t  || register_operand (op, mode));\n+\t  || fr_register_operand (op, mode));\n }\n \n /* Like nonimmediate_operand, but don't allow MEMs that try to use a\n@@ -484,6 +605,17 @@ destination_operand (op, mode)\n   return 1;\n }\n \n+/* Like memory_operand, but don't allow post-increments.  */\n+\n+int\n+not_postinc_memory_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  return (memory_operand (op, mode)\n+\t  && GET_RTX_CLASS (GET_CODE (XEXP (op, 0))) != 'a');\n+}\n+\n /* Return 1 if this is a comparison operator, which accepts an normal 8-bit\n    signed immediate operand.  */\n \n@@ -620,7 +752,7 @@ tfreg_or_fp01_operand (op, mode)\n {\n   if (GET_CODE (op) == SUBREG)\n     return 0;\n-  return reg_or_fp01_operand (op, mode);\n+  return fr_reg_or_fp01_operand (op, mode);\n }\n \f\n /* Return 1 if the operands of a move are ok.  */\n@@ -767,9 +899,7 @@ ia64_split_timode (out, in, scratch)\n \n     case MEM:\n       {\n-\tHOST_WIDE_INT offset;\n \trtx base = XEXP (in, 0);\n-\trtx offset_rtx;\n \n \tswitch (GET_CODE (base))\n \t  {\n@@ -3832,12 +3962,16 @@ rtx_needs_barrier (x, flags, pred)\n \t  break;\n \n         case 12: /* mf */\n-        case 13: /* cmpxchg_acq */\n         case 19: /* fetchadd_acq */\n \tcase 20: /* mov = ar.bsp */\n \tcase 21: /* flushrs */\n           break;\n \n+        case 13: /* cmpxchg_acq */\n+\t  need_barrier = rtx_needs_barrier (XVECEXP (x, 0, 1), flags, pred);\n+\t  need_barrier |= rtx_needs_barrier (XVECEXP (x, 0, 2), flags, pred);\n+\t  break;\n+\n \tdefault:\n \t  abort ();\n \t}\n@@ -4569,81 +4703,10 @@ process_for_unwind_directive (asm_out_file, insn)\n     }\n }\n \n-#define def_builtin(name, type, code) \\\n-  builtin_function ((name), (type), (code), BUILT_IN_MD, NULL_PTR)\n-\n-struct builtin_description\n-{\n-  enum insn_code icode;\n-  const char *name;\n-  enum ia64_builtins code;\n-  enum rtx_code comparison;\n-  unsigned int flag;\n-};\n-\n-/* All 32 bit intrinsics that take 2 arguments. */\n-static struct builtin_description bdesc_2argsi[] =\n-{\n-  { CODE_FOR_fetch_and_add_si, \"__sync_fetch_and_add_si\",\n-    IA64_BUILTIN_FETCH_AND_ADD_SI, 0, 0 },\n-  { CODE_FOR_fetch_and_sub_si, \"__sync_fetch_and_sub_si\",\n-    IA64_BUILTIN_FETCH_AND_SUB_SI, 0, 0 },\n-  { CODE_FOR_fetch_and_or_si, \"__sync_fetch_and_or_si\",\n-    IA64_BUILTIN_FETCH_AND_OR_SI, 0, 0 },\n-  { CODE_FOR_fetch_and_and_si, \"__sync_fetch_and_and_si\",\n-    IA64_BUILTIN_FETCH_AND_AND_SI, 0, 0 },\n-  { CODE_FOR_fetch_and_xor_si, \"__sync_fetch_and_xor_si\",\n-    IA64_BUILTIN_FETCH_AND_XOR_SI, 0, 0 },\n-  { CODE_FOR_fetch_and_nand_si, \"__sync_fetch_and_nand_si\",\n-    IA64_BUILTIN_FETCH_AND_NAND_SI, 0, 0 },\n-  { CODE_FOR_add_and_fetch_si, \"__sync_add_and_fetch_si\",\n-    IA64_BUILTIN_ADD_AND_FETCH_SI, 0, 0 },\n-  { CODE_FOR_sub_and_fetch_si, \"__sync_sub_and_fetch_si\",\n-    IA64_BUILTIN_SUB_AND_FETCH_SI, 0, 0 },\n-  { CODE_FOR_or_and_fetch_si, \"__sync_or_and_fetch_si\",\n-    IA64_BUILTIN_OR_AND_FETCH_SI, 0, 0 },\n-  { CODE_FOR_and_and_fetch_si, \"__sync_and_and_fetch_si\",\n-    IA64_BUILTIN_AND_AND_FETCH_SI, 0, 0 },\n-  { CODE_FOR_xor_and_fetch_si, \"__sync_xor_and_fetch_si\",\n-    IA64_BUILTIN_XOR_AND_FETCH_SI, 0, 0 },\n-  { CODE_FOR_nand_and_fetch_si, \"__sync_nand_and_fetch_si\",\n-    IA64_BUILTIN_NAND_AND_FETCH_SI, 0, 0 }\n-};\n-\n-/* All 64 bit intrinsics that take 2 arguments. */\n-static struct builtin_description bdesc_2argdi[] =\n-{\n-  { CODE_FOR_fetch_and_add_di, \"__sync_fetch_and_add_di\",\n-    IA64_BUILTIN_FETCH_AND_ADD_DI, 0, 0 },\n-  { CODE_FOR_fetch_and_sub_di, \"__sync_fetch_and_sub_di\",\n-    IA64_BUILTIN_FETCH_AND_SUB_DI, 0, 0 },\n-  { CODE_FOR_fetch_and_or_di, \"__sync_fetch_and_or_di\",\n-    IA64_BUILTIN_FETCH_AND_OR_DI, 0, 0 },\n-  { CODE_FOR_fetch_and_and_di, \"__sync_fetch_and_and_di\",\n-    IA64_BUILTIN_FETCH_AND_AND_DI, 0, 0 },\n-  { CODE_FOR_fetch_and_xor_di, \"__sync_fetch_and_xor_di\",\n-    IA64_BUILTIN_FETCH_AND_XOR_DI, 0, 0 },\n-  { CODE_FOR_fetch_and_nand_di, \"__sync_fetch_and_nand_di\",\n-    IA64_BUILTIN_FETCH_AND_NAND_DI, 0, 0 },\n-  { CODE_FOR_add_and_fetch_di, \"__sync_add_and_fetch_di\",\n-    IA64_BUILTIN_ADD_AND_FETCH_DI, 0, 0 },\n-  { CODE_FOR_sub_and_fetch_di, \"__sync_sub_and_fetch_di\",\n-    IA64_BUILTIN_SUB_AND_FETCH_DI, 0, 0 },\n-  { CODE_FOR_or_and_fetch_di, \"__sync_or_and_fetch_di\",\n-    IA64_BUILTIN_OR_AND_FETCH_DI, 0, 0 },\n-  { CODE_FOR_and_and_fetch_di, \"__sync_and_and_fetch_di\",\n-    IA64_BUILTIN_AND_AND_FETCH_DI, 0, 0 },\n-  { CODE_FOR_xor_and_fetch_di, \"__sync_xor_and_fetch_di\",\n-    IA64_BUILTIN_XOR_AND_FETCH_DI, 0, 0 },\n-  { CODE_FOR_nand_and_fetch_di, \"__sync_nand_and_fetch_di\",\n-    IA64_BUILTIN_NAND_AND_FETCH_DI, 0, 0 }\n-};\n-\n+\f\n void\n ia64_init_builtins ()\n {\n-  size_t i;\n-\n   tree psi_type_node = build_pointer_type (integer_type_node);\n   tree pdi_type_node = build_pointer_type (long_integer_type_node);\n   tree endlink = tree_cons (NULL_TREE, void_type_node, NULL_TREE);\n@@ -4664,8 +4727,8 @@ ia64_init_builtins ()\n                                       tree_cons (NULL_TREE,\n \t\t\t\t\t\t long_integer_type_node,\n                                                  tree_cons (NULL_TREE,\n-\t\t\t\t\t\t\t    long_integer_type_node,\n-                                                            endlink))));\n+\t\t\t\t\t\t\tlong_integer_type_node,\n+\t\t\t\t\t\t\tendlink))));\n   /* __sync_synchronize */\n   tree void_ftype_void\n     = build_function_type (void_type_node, endlink);\n@@ -4693,15 +4756,15 @@ ia64_init_builtins ()\n     = build_function_type (void_type_node, tree_cons (NULL_TREE, pdi_type_node,\n \t\t\t\t\t\t      endlink));\n \n+#define def_builtin(name, type, code) \\\n+  builtin_function ((name), (type), (code), BUILT_IN_MD, NULL_PTR)\n+\n   def_builtin (\"__sync_val_compare_and_swap_si\", si_ftype_psi_si_si,\n \t       IA64_BUILTIN_VAL_COMPARE_AND_SWAP_SI);\n-\n   def_builtin (\"__sync_val_compare_and_swap_di\", di_ftype_pdi_di_di,\n \t       IA64_BUILTIN_VAL_COMPARE_AND_SWAP_DI);\n-\n   def_builtin (\"__sync_bool_compare_and_swap_si\", si_ftype_psi_si_si,\n \t       IA64_BUILTIN_BOOL_COMPARE_AND_SWAP_SI);\n-\n   def_builtin (\"__sync_bool_compare_and_swap_di\", di_ftype_pdi_di_di,\n \t       IA64_BUILTIN_BOOL_COMPARE_AND_SWAP_DI);\n \n@@ -4710,13 +4773,10 @@ ia64_init_builtins ()\n \n   def_builtin (\"__sync_lock_test_and_set_si\", si_ftype_psi_si,\n \t       IA64_BUILTIN_LOCK_TEST_AND_SET_SI);\n-\n   def_builtin (\"__sync_lock_test_and_set_di\", di_ftype_pdi_di,\n \t       IA64_BUILTIN_LOCK_TEST_AND_SET_DI);\n-\n   def_builtin (\"__sync_lock_release_si\", void_ftype_psi,\n \t       IA64_BUILTIN_LOCK_RELEASE_SI);\n-\n   def_builtin (\"__sync_lock_release_di\", void_ftype_pdi,\n \t       IA64_BUILTIN_LOCK_RELEASE_DI);\n \n@@ -4728,191 +4788,201 @@ ia64_init_builtins ()\n \t       build_function_type (void_type_node, endlink), \n \t       IA64_BUILTIN_FLUSHRS);\n \n-  /* Add all builtins that are operations on two args. */\n-  for (i = 0; i < sizeof(bdesc_2argsi) / sizeof *bdesc_2argsi; i++)\n-    def_builtin (bdesc_2argsi[i].name, si_ftype_psi_si, bdesc_2argsi[i].code);\n-  for (i = 0; i < sizeof(bdesc_2argdi) / sizeof *bdesc_2argdi; i++)\n-    def_builtin (bdesc_2argdi[i].name, si_ftype_psi_si, bdesc_2argdi[i].code);\n+  def_builtin (\"__sync_fetch_and_add_si\", si_ftype_psi_si,\n+\t       IA64_BUILTIN_FETCH_AND_ADD_SI);\n+  def_builtin (\"__sync_fetch_and_sub_si\", si_ftype_psi_si,\n+\t       IA64_BUILTIN_FETCH_AND_SUB_SI);\n+  def_builtin (\"__sync_fetch_and_or_si\", si_ftype_psi_si,\n+\t       IA64_BUILTIN_FETCH_AND_OR_SI);\n+  def_builtin (\"__sync_fetch_and_and_si\", si_ftype_psi_si,\n+\t       IA64_BUILTIN_FETCH_AND_AND_SI);\n+  def_builtin (\"__sync_fetch_and_xor_si\", si_ftype_psi_si,\n+\t       IA64_BUILTIN_FETCH_AND_XOR_SI);\n+  def_builtin (\"__sync_fetch_and_nand_si\", si_ftype_psi_si,\n+\t       IA64_BUILTIN_FETCH_AND_NAND_SI);\n+\n+  def_builtin (\"__sync_add_and_fetch_si\", si_ftype_psi_si,\n+\t       IA64_BUILTIN_ADD_AND_FETCH_SI);\n+  def_builtin (\"__sync_sub_and_fetch_si\", si_ftype_psi_si,\n+\t       IA64_BUILTIN_SUB_AND_FETCH_SI);\n+  def_builtin (\"__sync_or_and_fetch_si\", si_ftype_psi_si,\n+\t       IA64_BUILTIN_OR_AND_FETCH_SI);\n+  def_builtin (\"__sync_and_and_fetch_si\", si_ftype_psi_si,\n+\t       IA64_BUILTIN_AND_AND_FETCH_SI);\n+  def_builtin (\"__sync_xor_and_fetch_si\", si_ftype_psi_si,\n+\t       IA64_BUILTIN_XOR_AND_FETCH_SI);\n+  def_builtin (\"__sync_nand_and_fetch_si\", si_ftype_psi_si,\n+\t       IA64_BUILTIN_NAND_AND_FETCH_SI);\n+\n+  def_builtin (\"__sync_fetch_and_add_di\", di_ftype_pdi_di,\n+\t       IA64_BUILTIN_FETCH_AND_ADD_DI);\n+  def_builtin (\"__sync_fetch_and_sub_di\", di_ftype_pdi_di,\n+\t       IA64_BUILTIN_FETCH_AND_SUB_DI);\n+  def_builtin (\"__sync_fetch_and_or_di\", di_ftype_pdi_di,\n+\t       IA64_BUILTIN_FETCH_AND_OR_DI);\n+  def_builtin (\"__sync_fetch_and_and_di\", di_ftype_pdi_di,\n+\t       IA64_BUILTIN_FETCH_AND_AND_DI);\n+  def_builtin (\"__sync_fetch_and_xor_di\", di_ftype_pdi_di,\n+\t       IA64_BUILTIN_FETCH_AND_XOR_DI);\n+  def_builtin (\"__sync_fetch_and_nand_di\", di_ftype_pdi_di,\n+\t       IA64_BUILTIN_FETCH_AND_NAND_DI);\n+\n+  def_builtin (\"__sync_add_and_fetch_di\", di_ftype_pdi_di,\n+\t       IA64_BUILTIN_ADD_AND_FETCH_DI);\n+  def_builtin (\"__sync_sub_and_fetch_di\", di_ftype_pdi_di,\n+\t       IA64_BUILTIN_SUB_AND_FETCH_DI);\n+  def_builtin (\"__sync_or_and_fetch_di\", di_ftype_pdi_di,\n+\t       IA64_BUILTIN_OR_AND_FETCH_DI);\n+  def_builtin (\"__sync_and_and_fetch_di\", di_ftype_pdi_di,\n+\t       IA64_BUILTIN_AND_AND_FETCH_DI);\n+  def_builtin (\"__sync_xor_and_fetch_di\", di_ftype_pdi_di,\n+\t       IA64_BUILTIN_XOR_AND_FETCH_DI);\n+  def_builtin (\"__sync_nand_and_fetch_di\", di_ftype_pdi_di,\n+\t       IA64_BUILTIN_NAND_AND_FETCH_DI);\n+\n+#undef def_builtin\n }\n \n /* Expand fetch_and_op intrinsics.  The basic code sequence is:\n \n      mf\n-     ldsz return = [ptr];\n-     tmp = return;\n+     tmp = [ptr];\n      do {\n-       oldval = tmp;\n+       ret = tmp;\n        ar.ccv = tmp;\n        tmp <op>= value;\n        cmpxchgsz.acq tmp = [ptr], tmp\n-       cmpxchgsz.acq tmp = [ptr], tmp\n-     } while (tmp != oldval)\n+     } while (tmp != ret)\n */\n-void\n-ia64_expand_fetch_and_op (code, mode, operands)\n-     enum fetchop_code code;\n+\n+static rtx\n+ia64_expand_fetch_and_op (binoptab, mode, arglist, target)\n+     optab binoptab;\n      enum machine_mode mode;\n-     rtx operands[];\n+     tree arglist;\n+     rtx target;\n {\n-  rtx mfreg = gen_rtx_MEM (BLKmode, gen_rtx_REG (mode, GR_REG (1)));\n-  rtx oldval, newlabel, tmp_reg, ccv;\n+  rtx ret, label, tmp, ccv, insn, mem, value;\n+  tree arg0, arg1;\n \n-  emit_insn (gen_mf (mfreg));\n-  tmp_reg = gen_reg_rtx (mode);\n-  oldval = gen_reg_rtx (mode);\n-  ccv = gen_rtx_REG (mode, AR_CCV_REGNUM);\n+  arg0 = TREE_VALUE (arglist);\n+  arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+  mem = expand_expr (arg0, NULL_RTX, Pmode, 0);\n+  value = expand_expr (arg1, NULL_RTX, mode, 0);\n \n-  emit_move_insn (operands[0], operands[1]);\n-  emit_move_insn (tmp_reg, operands[0]);\n+  mem = gen_rtx_MEM (mode, force_reg (Pmode, mem));\n+  MEM_VOLATILE_P (mem) = 1;\n \n-  newlabel = gen_label_rtx ();\n-  emit_label (newlabel);\n-  emit_move_insn (oldval, tmp_reg);\n-  emit_move_insn (ccv, tmp_reg);\n+  if (target && register_operand (target, mode))\n+    ret = target;\n+  else\n+    ret = gen_reg_rtx (mode);\n \n-  /* Perform the specific operation. */\n-  switch (code)\n-  {\n-  case IA64_ADD_OP:\n+  emit_insn (gen_mf ());\n+\n+  /* Special case for fetchadd instructions.  */\n+  if (binoptab == add_optab && fetchadd_operand (value, VOIDmode))\n     {\n-      rtx reg;\n-      if (GET_CODE (operands[2]) == CONST_INT)\n-\treg = gen_reg_rtx (mode);\n-      else\n-        reg = operands[2];\n       if (mode == SImode)\n-\t{\n-\t  if (reg != operands[2])\n-\t    emit_insn (gen_movsi (reg, operands[2]));\n-\t  emit_insn (gen_addsi3 (tmp_reg, tmp_reg, reg));\n-\t}\n+        insn = gen_fetchadd_acq_si (ret, mem, value);\n       else\n-        {\n-\t  if (reg != operands[2])\n-\t    emit_insn (gen_movdi (reg, operands[2]));\n-\t  emit_insn (gen_adddi3 (tmp_reg, tmp_reg, reg));\n-\t}\n-      break;\n+        insn = gen_fetchadd_acq_di (ret, mem, value);\n+      emit_insn (insn);\n+      return ret;\n     }\n \n-  case IA64_SUB_OP:\n-    if (mode == SImode)\n-      emit_insn (gen_subsi3 (tmp_reg, tmp_reg, operands[2]));\n-    else\n-      emit_insn (gen_subdi3 (tmp_reg, tmp_reg, operands[2]));\n-    break;\n-\n-  case IA64_OR_OP:\n-    emit_insn (gen_iordi3 (tmp_reg, tmp_reg, operands[2]));\n-    break;\n-\n-  case IA64_AND_OP:\n-    emit_insn (gen_anddi3 (tmp_reg, tmp_reg, operands[2]));\n-    break;\n-\n-  case IA64_XOR_OP:\n-    emit_insn (gen_xordi3 (tmp_reg, tmp_reg, operands[2]));\n-    break;\n-\n-  case IA64_NAND_OP:\n-    emit_insn (gen_anddi3 (tmp_reg, tmp_reg, operands[2]));\n-    if (mode == SImode)\n-      emit_insn (gen_one_cmplsi2 (tmp_reg, operands[0]));\n-    else\n-      emit_insn (gen_one_cmpldi2 (tmp_reg, operands[0]));\n-    break;\n-\n-  default:\n-    break;\n-  }\n+  tmp = gen_reg_rtx (mode);\n+  ccv = gen_rtx_REG (mode, AR_CCV_REGNUM);\n+  emit_move_insn (tmp, mem);\n+\n+  label = gen_label_rtx ();\n+  emit_label (label);\n+  emit_move_insn (ret, tmp);\n+  emit_move_insn (ccv, tmp);\n+\n+  /* Perform the specific operation.  Special case NAND by noticing\n+     one_cmpl_optab instead.  */\n+  if (binoptab == one_cmpl_optab)\n+    {\n+      tmp = expand_unop (mode, binoptab, tmp, NULL, OPTAB_WIDEN);\n+      binoptab = and_optab;\n+    }\n+  tmp = expand_binop (mode, binoptab, tmp, value, tmp, 1, OPTAB_WIDEN);\n \n   if (mode == SImode)\n-    emit_insn (gen_cmpxchg_acq_si (tmp_reg, operands[1], tmp_reg, ccv));\n+    insn = gen_cmpxchg_acq_si (tmp, mem, tmp, ccv);\n   else\n-    emit_insn (gen_cmpxchg_acq_di (tmp_reg, operands[1], tmp_reg, ccv));\n+    insn = gen_cmpxchg_acq_di (tmp, mem, tmp, ccv);\n+  emit_insn (insn);\n+\n+  emit_cmp_and_jump_insns (tmp, ret, NE, 0, mode, 1, 0, label);\n \n-  emit_cmp_and_jump_insns (tmp_reg, oldval, NE, 0, mode, 1, 0, newlabel);\n+  return ret;\n }\n \n /* Expand op_and_fetch intrinsics.  The basic code sequence is:\n \n      mf\n-     ldsz return = [ptr];\n+     tmp = [ptr];\n      do {\n-       oldval = tmp;\n+       old = tmp;\n        ar.ccv = tmp;\n-       return = tmp + value;\n-       cmpxchgsz.acq tmp = [ptr], return\n-     } while (tmp != oldval)\n+       ret = tmp + value;\n+       cmpxchgsz.acq tmp = [ptr], ret\n+     } while (tmp != old)\n */\n-void\n-ia64_expand_op_and_fetch (code, mode, operands)\n-     enum fetchop_code code;\n+\n+static rtx\n+ia64_expand_op_and_fetch (binoptab, mode, arglist, target)\n+     optab binoptab;\n      enum machine_mode mode;\n-     rtx operands[];\n+     tree arglist;\n+     rtx target;\n {\n-  rtx mfreg = gen_rtx_MEM (BLKmode, gen_rtx_REG (mode, GR_REG (1)));\n-  rtx oldval, newlabel, tmp_reg, ccv;\n+  rtx old, label, tmp, ret, ccv, insn, mem, value;\n+  tree arg0, arg1;\n+\n+  arg0 = TREE_VALUE (arglist);\n+  arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+  mem = expand_expr (arg0, NULL_RTX, Pmode, 0);\n+  value = expand_expr (arg1, NULL_RTX, mode, 0);\n \n-  emit_insn (gen_mf (mfreg));\n-  tmp_reg = gen_reg_rtx (mode);\n+  mem = gen_rtx_MEM (mode, force_reg (Pmode, mem));\n+  MEM_VOLATILE_P (mem) = 1;\n+\n+  if (target && ! register_operand (target, mode))\n+    target = NULL_RTX;\n+\n+  emit_insn (gen_mf ());\n+  tmp = gen_reg_rtx (mode);\n+  old = gen_reg_rtx (mode);\n   ccv = gen_rtx_REG (mode, AR_CCV_REGNUM);\n \n-  emit_move_insn (tmp_reg, operands[1]);  \n+  emit_move_insn (tmp, mem);\n \n-  newlabel = gen_label_rtx ();\n-  emit_label (newlabel);\n-  oldval = gen_reg_rtx (mode);\n-  emit_move_insn (oldval, tmp_reg);\n-  emit_move_insn (ccv, tmp_reg);\n+  label = gen_label_rtx ();\n+  emit_label (label);\n+  emit_move_insn (old, tmp);\n+  emit_move_insn (ccv, tmp);\n \n-  /* Perform the specific operation. */\n-  switch (code)\n-  {\n-  case IA64_ADD_OP:\n-    if (mode == SImode)\n-      emit_insn (gen_addsi3 (operands[0], tmp_reg, operands[2]));\n-    else\n-      emit_insn (gen_adddi3 (operands[0], tmp_reg, operands[2]));\n-    break;\n-\n-  case IA64_SUB_OP:\n-    if (mode == SImode)\n-      emit_insn (gen_subsi3 (operands[0], tmp_reg, operands[2]));\n-    else\n-      emit_insn (gen_subdi3 (operands[0], tmp_reg, operands[2]));\n-    break;\n-\n-  case IA64_OR_OP:\n-    emit_insn (gen_iordi3 (operands[0], tmp_reg, operands[2]));\n-    break;\n-\n-  case IA64_AND_OP:\n-    emit_insn (gen_anddi3 (operands[0], tmp_reg, operands[2]));\n-    break;\n-\n-  case IA64_XOR_OP:\n-    emit_insn (gen_xordi3 (operands[0], tmp_reg, operands[2]));\n-    break;\n-\n-  case IA64_NAND_OP:\n-    emit_insn (gen_anddi3 (operands[0], tmp_reg, operands[2]));\n-    if (mode == SImode)\n-      emit_insn (gen_one_cmplsi2 (operands[0], operands[0]));\n-    else\n-      emit_insn (gen_one_cmpldi2 (operands[0], operands[0]));\n-    break;\n-\n-  default:\n-    break;\n-  }\n+  /* Perform the specific operation.  Special case NAND by noticing\n+     one_cmpl_optab instead.  */\n+  if (binoptab == one_cmpl_optab)\n+    {\n+      tmp = expand_unop (mode, binoptab, tmp, NULL, OPTAB_WIDEN);\n+      binoptab = and_optab;\n+    }\n+  ret = expand_binop (mode, binoptab, tmp, value, target, 1, OPTAB_WIDEN);\n \n   if (mode == SImode)\n-    emit_insn (gen_cmpxchg_acq_si (tmp_reg, operands[1], operands[0], ccv));\n+    insn = gen_cmpxchg_acq_si (tmp, mem, ret, ccv);\n   else\n-    emit_insn (gen_cmpxchg_acq_di (tmp_reg, operands[1], operands[0], ccv));\n+    insn = gen_cmpxchg_acq_di (tmp, mem, ret, ccv);\n+  emit_insn (insn);\n+\n+  emit_cmp_and_jump_insns (tmp, old, NE, 0, mode, 1, 0, label);\n \n-  emit_cmp_and_jump_insns (tmp_reg, oldval, NE, 0, mode, 1, 0, newlabel);\n+  return ret;\n }\n \n /* Expand val_ and bool_compare_and_swap.  For val_ we want:\n@@ -4924,88 +4994,111 @@ ia64_expand_op_and_fetch (code, mode, operands)\n \n    For bool_ it's the same except return ret == oldval.\n */\n+\n static rtx\n-ia64_expand_compare_and_swap (icode, arglist, target, boolcode)\n-     enum insn_code icode;\n+ia64_expand_compare_and_swap (mode, boolp, arglist, target)\n+     enum machine_mode mode;\n+     int boolp;\n      tree arglist;\n      rtx target;\n-     int boolcode;\n {\n   tree arg0, arg1, arg2;\n-  rtx op0, op1, op2, pat;\n-  enum machine_mode tmode, mode0, mode1, mode2;\n+  rtx mem, old, new, ccv, tmp, insn;\n \n   arg0 = TREE_VALUE (arglist);\n   arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n   arg2 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n-  op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-  op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n-  op2 = expand_expr (arg2, NULL_RTX, VOIDmode, 0);\n-  tmode = insn_data[icode].operand[0].mode;\n-  mode0 = insn_data[icode].operand[1].mode;\n-  mode1 = insn_data[icode].operand[2].mode;\n-  mode2 = insn_data[icode].operand[3].mode;\n-\n-  op0 = gen_rtx_MEM (mode0, copy_to_mode_reg (Pmode, op0));\n-  if (! (*insn_data[icode].operand[2].predicate) (op1, mode1))\n-    op1 = copy_to_mode_reg (mode1, op1);\n-  if (! (*insn_data[icode].operand[3].predicate) (op2, mode2))\n-    op2 = copy_to_mode_reg (mode2, op2);\n-  if (target == 0\n-      || GET_MODE (target) != tmode\n-      || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n-    target = gen_reg_rtx (tmode);\n-\n-  pat = GEN_FCN (icode) (target, op0, op1, op2);\n-  if (! pat)\n-    return 0;\n-  emit_insn (pat);\n-  if (boolcode)\n+  mem = expand_expr (arg0, NULL_RTX, Pmode, 0);\n+  old = expand_expr (arg1, NULL_RTX, mode, 0);\n+  new = expand_expr (arg2, NULL_RTX, mode, 0);\n+\n+  mem = gen_rtx_MEM (mode, force_reg (Pmode, mem));\n+  MEM_VOLATILE_P (mem) = 1;\n+\n+  if (! register_operand (old, mode))\n+    old = copy_to_mode_reg (mode, old);\n+  if (! register_operand (new, mode))\n+    new = copy_to_mode_reg (mode, new);\n+\n+  if (! boolp && target && register_operand (target, mode))\n+    tmp = target;\n+  else\n+    tmp = gen_reg_rtx (mode);\n+\n+  ccv = gen_rtx_REG (mode, AR_CCV_REGNUM);\n+  emit_move_insn (ccv, old);\n+  emit_insn (gen_mf ());\n+  if (mode == SImode)\n+    insn = gen_cmpxchg_acq_si (tmp, mem, new, ccv);\n+  else\n+    insn = gen_cmpxchg_acq_di (tmp, mem, new, ccv);\n+  emit_insn (insn);\n+\n+  if (boolp)\n     {\n-      if (tmode == SImode)\n-        {\n-          emit_insn (gen_cmpsi (target, op1));\n-          emit_insn (gen_seq (gen_lowpart (DImode, target)));\n-        }\n-      else\n-        {\n-          emit_insn (gen_cmpdi (target, op1));\n-          emit_insn (gen_seq (target));\n-        }\n+      if (! target)\n+\ttarget = gen_reg_rtx (mode);\n+      return emit_store_flag_force (target, EQ, tmp, old, mode, 1, 1);\n     }\n-  return target;\n+  else\n+    return tmp;\n }\n \n-/* Expand all intrinsics that take 2 arguments. */\n+/* Expand lock_test_and_set.  I.e. `xchgsz ret = [ptr], new'.  */\n+\n static rtx\n-ia64_expand_binop_builtin (icode, arglist, target)\n-     enum insn_code icode;\n+ia64_expand_lock_test_and_set (mode, arglist, target)\n+     enum machine_mode mode;\n      tree arglist;\n      rtx target;\n {\n-  rtx pat;\n-  tree arg0 = TREE_VALUE (arglist);\n-  tree arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n-  rtx op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-  rtx op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n-  enum machine_mode tmode = insn_data[icode].operand[0].mode;\n-  enum machine_mode mode0 = insn_data[icode].operand[1].mode;\n-  enum machine_mode mode1 = insn_data[icode].operand[2].mode;\n-\n-  if (! target\n-      || GET_MODE (target) != tmode\n-      || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n-    target = gen_reg_rtx (tmode);\n-\n-  op0 = gen_rtx_MEM (mode0, copy_to_mode_reg (Pmode, op0));\n-  if (! (*insn_data[icode].operand[2].predicate) (op1, mode1))\n-    op1 = copy_to_mode_reg (mode1, op1);\n-\n-  pat = GEN_FCN (icode) (target, op0, op1);\n-  if (! pat)\n-    return 0;\n-  emit_insn (pat);\n-  return target;\n+  tree arg0, arg1;\n+  rtx mem, new, ret, insn;\n+\n+  arg0 = TREE_VALUE (arglist);\n+  arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+  mem = expand_expr (arg0, NULL_RTX, Pmode, 0);\n+  new = expand_expr (arg1, NULL_RTX, mode, 0);\n+\n+  mem = gen_rtx_MEM (mode, force_reg (Pmode, mem));\n+  MEM_VOLATILE_P (mem) = 1;\n+  if (! register_operand (new, mode))\n+    new = copy_to_mode_reg (mode, new);\n+\n+  if (target && register_operand (target, mode))\n+    ret = target;\n+  else\n+    ret = gen_reg_rtx (mode);\n+\n+  if (mode == SImode)\n+    insn = gen_xchgsi (ret, mem, new);\n+  else\n+    insn = gen_xchgdi (ret, mem, new);\n+  emit_insn (insn);\n+\n+  return ret;\n+}\n+\n+/* Expand lock_release.  I.e. `stsz.rel [ptr] = r0'.  */\n+\n+static rtx\n+ia64_expand_lock_release (mode, arglist, target)\n+     enum machine_mode mode;\n+     tree arglist;\n+     rtx target ATTRIBUTE_UNUSED;\n+{\n+  tree arg0;\n+  rtx mem;\n+\n+  arg0 = TREE_VALUE (arglist);\n+  mem = expand_expr (arg0, NULL_RTX, Pmode, 0);\n+\n+  mem = gen_rtx_MEM (mode, force_reg (Pmode, mem));\n+  MEM_VOLATILE_P (mem) = 1;\n+\n+  emit_move_insn (mem, const0_rtx);\n+\n+  return const0_rtx;\n }\n \n rtx\n@@ -5016,126 +5109,137 @@ ia64_expand_builtin (exp, target, subtarget, mode, ignore)\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n      int ignore ATTRIBUTE_UNUSED;\n {\n-  rtx op0, op1, pat;\n-  rtx tmp_reg;\n-  tree arg0, arg1;\n-  tree arglist = TREE_OPERAND (exp, 1);\n   tree fndecl = TREE_OPERAND (TREE_OPERAND (exp, 0), 0);\n   unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n-  enum machine_mode tmode, mode0, mode1;\n-  enum insn_code icode;\n-  size_t i;\n-  struct builtin_description *d;\n+  tree arglist = TREE_OPERAND (exp, 1);\n \n   switch (fcode)\n     {\n     case IA64_BUILTIN_BOOL_COMPARE_AND_SWAP_SI:\n-      return ia64_expand_compare_and_swap (CODE_FOR_val_compare_and_swap_si,\n-\t\t\t\t\t   arglist, target, 1);\n-\n     case IA64_BUILTIN_VAL_COMPARE_AND_SWAP_SI:\n-      return ia64_expand_compare_and_swap (CODE_FOR_val_compare_and_swap_si,\n-\t\t\t\t\t   arglist, target, 0);\n+    case IA64_BUILTIN_LOCK_TEST_AND_SET_SI:\n+    case IA64_BUILTIN_LOCK_RELEASE_SI:\n+    case IA64_BUILTIN_FETCH_AND_ADD_SI:\n+    case IA64_BUILTIN_FETCH_AND_SUB_SI:\n+    case IA64_BUILTIN_FETCH_AND_OR_SI:\n+    case IA64_BUILTIN_FETCH_AND_AND_SI:\n+    case IA64_BUILTIN_FETCH_AND_XOR_SI:\n+    case IA64_BUILTIN_FETCH_AND_NAND_SI:\n+    case IA64_BUILTIN_ADD_AND_FETCH_SI:\n+    case IA64_BUILTIN_SUB_AND_FETCH_SI:\n+    case IA64_BUILTIN_OR_AND_FETCH_SI:\n+    case IA64_BUILTIN_AND_AND_FETCH_SI:\n+    case IA64_BUILTIN_XOR_AND_FETCH_SI:\n+    case IA64_BUILTIN_NAND_AND_FETCH_SI:\n+      mode = SImode;\n+      break;\n \n     case IA64_BUILTIN_BOOL_COMPARE_AND_SWAP_DI:\n-      return ia64_expand_compare_and_swap (CODE_FOR_val_compare_and_swap_di,\n-\t\t\t\t\t   arglist, target, 1);\n+    case IA64_BUILTIN_VAL_COMPARE_AND_SWAP_DI:\n+    case IA64_BUILTIN_LOCK_TEST_AND_SET_DI:\n+    case IA64_BUILTIN_LOCK_RELEASE_DI:\n+    case IA64_BUILTIN_FETCH_AND_ADD_DI:\n+    case IA64_BUILTIN_FETCH_AND_SUB_DI:\n+    case IA64_BUILTIN_FETCH_AND_OR_DI:\n+    case IA64_BUILTIN_FETCH_AND_AND_DI:\n+    case IA64_BUILTIN_FETCH_AND_XOR_DI:\n+    case IA64_BUILTIN_FETCH_AND_NAND_DI:\n+    case IA64_BUILTIN_ADD_AND_FETCH_DI:\n+    case IA64_BUILTIN_SUB_AND_FETCH_DI:\n+    case IA64_BUILTIN_OR_AND_FETCH_DI:\n+    case IA64_BUILTIN_AND_AND_FETCH_DI:\n+    case IA64_BUILTIN_XOR_AND_FETCH_DI:\n+    case IA64_BUILTIN_NAND_AND_FETCH_DI:\n+      mode = DImode;\n+      break;\n \n+    default:\n+      break;\n+    }\n+\n+  switch (fcode)\n+    {\n+    case IA64_BUILTIN_BOOL_COMPARE_AND_SWAP_SI:\n+    case IA64_BUILTIN_BOOL_COMPARE_AND_SWAP_DI:\n+      return ia64_expand_compare_and_swap (mode, 1, arglist, target);\n+\n+    case IA64_BUILTIN_VAL_COMPARE_AND_SWAP_SI:\n     case IA64_BUILTIN_VAL_COMPARE_AND_SWAP_DI:\n-      return ia64_expand_compare_and_swap (CODE_FOR_val_compare_and_swap_di,\n-\t\t\t\t\t   arglist, target, 0);\n+      return ia64_expand_compare_and_swap (mode, 0, arglist, target);\n \n     case IA64_BUILTIN_SYNCHRONIZE:\n-      /* Pass a volatile memory operand. */\n-      tmp_reg = gen_rtx_REG (DImode, GR_REG(0));\n-      target = gen_rtx_MEM (BLKmode, tmp_reg);\n-      emit_insn (gen_mf (target));\n+      emit_insn (gen_mf ());\n       return const0_rtx;\n \n     case IA64_BUILTIN_LOCK_TEST_AND_SET_SI:\n-      icode = CODE_FOR_lock_test_and_set_si;\n-      arg0 = TREE_VALUE (arglist);\n-      arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n-      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-      op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n-      tmode = insn_data[icode].operand[0].mode;\n-      mode0 = insn_data[icode].operand[1].mode;\n-      mode1 = insn_data[icode].operand[2].mode;\n-      op0 = gen_rtx_MEM (mode0, copy_to_mode_reg (Pmode, op0));\n-      if (! (*insn_data[icode].operand[2].predicate) (op1, mode1))\n-        op1 = copy_to_mode_reg (mode1, op1);\n-      if (target == 0\n-          || GET_MODE (target) != tmode\n-          || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n-        target = gen_reg_rtx (tmode);\n-      pat = GEN_FCN (icode) (target, op0, op1);\n-      if (! pat)\n-        return 0;\n-      emit_insn (pat);\n-      return target;\n-\n     case IA64_BUILTIN_LOCK_TEST_AND_SET_DI:\n-      icode = CODE_FOR_lock_test_and_set_di;\n-      arg0 = TREE_VALUE (arglist);\n-      arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n-      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-      op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n-      tmode = insn_data[icode].operand[0].mode;\n-      mode0 = insn_data[icode].operand[1].mode;\n-      mode1 = insn_data[icode].operand[2].mode;\n-      op0 = gen_rtx_MEM (mode0, copy_to_mode_reg (Pmode, op0));\n-      if (! (*insn_data[icode].operand[2].predicate) (op1, mode1))\n-        op1 = copy_to_mode_reg (mode1, op1);\n-      if (target == 0\n-          || GET_MODE (target) != tmode\n-          || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n-        target = gen_reg_rtx (tmode);\n-      pat = GEN_FCN (icode) (target, op0, op1);\n-      if (! pat)\n-        return 0;\n-      emit_insn (pat);\n-      return target;\n+      return ia64_expand_lock_test_and_set (mode, arglist, target);\n \n     case IA64_BUILTIN_LOCK_RELEASE_SI:\n-      arg0 = TREE_VALUE (arglist);\n-      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-      op0 = gen_rtx_MEM (SImode, copy_to_mode_reg (Pmode, op0));\n-      MEM_VOLATILE_P (op0) = 1;\n-      emit_insn (gen_movsi (op0, GEN_INT(0)));\n-      return const0_rtx;\n-\n     case IA64_BUILTIN_LOCK_RELEASE_DI:\n-      arg0 = TREE_VALUE (arglist);\n-      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-      op0 = gen_rtx_MEM (DImode, copy_to_mode_reg (Pmode, op0));\n-      MEM_VOLATILE_P (op0) = 1;\n-      emit_insn (gen_movdi (op0, GEN_INT(0)));\n-      return const0_rtx;\n+      return ia64_expand_lock_release (mode, arglist, target);\n \n     case IA64_BUILTIN_BSP:\n-      {\n-\trtx reg = gen_reg_rtx (DImode);\n-\temit_insn (gen_bsp_value (reg));\n-\treturn reg;\n-      }\n+      if (! target || ! register_operand (target, DImode))\n+\ttarget = gen_reg_rtx (DImode);\n+      emit_insn (gen_bsp_value (target));\n+      return target;\n \n     case IA64_BUILTIN_FLUSHRS:\n       emit_insn (gen_flushrs ());\n       return const0_rtx;\n \n+    case IA64_BUILTIN_FETCH_AND_ADD_SI:\n+    case IA64_BUILTIN_FETCH_AND_ADD_DI:\n+      return ia64_expand_fetch_and_op (add_optab, mode, arglist, target);\n+\n+    case IA64_BUILTIN_FETCH_AND_SUB_SI:\n+    case IA64_BUILTIN_FETCH_AND_SUB_DI:\n+      return ia64_expand_fetch_and_op (sub_optab, mode, arglist, target);\n+\n+    case IA64_BUILTIN_FETCH_AND_OR_SI:\n+    case IA64_BUILTIN_FETCH_AND_OR_DI:\n+      return ia64_expand_fetch_and_op (ior_optab, mode, arglist, target);\n+\n+    case IA64_BUILTIN_FETCH_AND_AND_SI:\n+    case IA64_BUILTIN_FETCH_AND_AND_DI:\n+      return ia64_expand_fetch_and_op (and_optab, mode, arglist, target);\n+\n+    case IA64_BUILTIN_FETCH_AND_XOR_SI:\n+    case IA64_BUILTIN_FETCH_AND_XOR_DI:\n+      return ia64_expand_fetch_and_op (xor_optab, mode, arglist, target);\n+\n+    case IA64_BUILTIN_FETCH_AND_NAND_SI:\n+    case IA64_BUILTIN_FETCH_AND_NAND_DI:\n+      return ia64_expand_fetch_and_op (one_cmpl_optab, mode, arglist, target);\n+\n+    case IA64_BUILTIN_ADD_AND_FETCH_SI:\n+    case IA64_BUILTIN_ADD_AND_FETCH_DI:\n+      return ia64_expand_op_and_fetch (add_optab, mode, arglist, target);\n+\n+    case IA64_BUILTIN_SUB_AND_FETCH_SI:\n+    case IA64_BUILTIN_SUB_AND_FETCH_DI:\n+      return ia64_expand_op_and_fetch (sub_optab, mode, arglist, target);\n+\n+    case IA64_BUILTIN_OR_AND_FETCH_SI:\n+    case IA64_BUILTIN_OR_AND_FETCH_DI:\n+      return ia64_expand_op_and_fetch (ior_optab, mode, arglist, target);\n+\n+    case IA64_BUILTIN_AND_AND_FETCH_SI:\n+    case IA64_BUILTIN_AND_AND_FETCH_DI:\n+      return ia64_expand_op_and_fetch (and_optab, mode, arglist, target);\n+\n+    case IA64_BUILTIN_XOR_AND_FETCH_SI:\n+    case IA64_BUILTIN_XOR_AND_FETCH_DI:\n+      return ia64_expand_op_and_fetch (xor_optab, mode, arglist, target);\n+\n+    case IA64_BUILTIN_NAND_AND_FETCH_SI:\n+    case IA64_BUILTIN_NAND_AND_FETCH_DI:\n+      return ia64_expand_op_and_fetch (one_cmpl_optab, mode, arglist, target);\n+\n     default:\n       break;\n     }\n \n-  /* Expand all 32 bit intrinsics that take 2 arguments. */\n-  for (i=0, d = bdesc_2argsi; i < sizeof (bdesc_2argsi) / sizeof *d; i++, d++)\n-    if (d->code == fcode)\n-      return ia64_expand_binop_builtin (d->icode, arglist, target);\n-\n-  /* Expand all 64 bit intrinsics that take 2 arguments. */\n-  for (i=0, d = bdesc_2argdi; i < sizeof (bdesc_2argdi) / sizeof *d; i++, d++)\n-    if (d->code == fcode)\n-      return ia64_expand_binop_builtin (d->icode, arglist, target);\n-\n-  return 0;\n+  return NULL_RTX;\n }"}, {"sha": "2410ecd5e855f25dd3f5ef47494a9c0a67a63676", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0551c32d8bd642833f411c7cea2b870b3d87a70d/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0551c32d8bd642833f411c7cea2b870b3d87a70d/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=0551c32d8bd642833f411c7cea2b870b3d87a70d", "patch": "@@ -1114,10 +1114,16 @@ enum reg_class\n /* 1..4 for shladd arguments.  */\n #define CONSTRAINT_OK_FOR_R(VALUE) \\\n   (GET_CODE (VALUE) == CONST_INT && INTVAL (VALUE) >= 1 && INTVAL (VALUE) <= 4)\n+/* Non-post-inc memory for asms and other unsavory creatures.  */\n+#define CONSTRAINT_OK_FOR_S(VALUE)\t\t\t\t\\\n+  (GET_CODE (VALUE) == MEM\t\t\t\t\t\\\n+   && GET_RTX_CLASS (GET_CODE (XEXP ((VALUE), 0))) != 'a'\t\\\n+   && (reload_in_progress || memory_operand ((VALUE), VOIDmode)))\n \n #define EXTRA_CONSTRAINT(VALUE, C) \\\n   ((C) == 'Q' ? CONSTRAINT_OK_FOR_Q (VALUE)\t\\\n    : (C) == 'R' ? CONSTRAINT_OK_FOR_R (VALUE)\t\\\n+   : (C) == 'S' ? CONSTRAINT_OK_FOR_S (VALUE)\t\\\n    : 0)\n \f\n /* Basic Stack Layout */\n@@ -2642,24 +2648,31 @@ do {\t\t\t\t\t\t\t\t\t\\\n { \"function_operand\", {SYMBOL_REF}},\t\t\t\t\t\\\n { \"setjmp_operand\", {SYMBOL_REF}},\t\t\t\t\t\\\n { \"destination_operand\", {SUBREG, REG, MEM}},\t\t\t\t\\\n+{ \"not_postinc_memory_operand\", {MEM}},\t\t\t\t\t\\\n { \"move_operand\", {SUBREG, REG, MEM, CONST_INT, CONST_DOUBLE,\t\t\\\n \t\t     CONSTANT_P_RTX, SYMBOL_REF, CONST, LABEL_REF}},\t\\\n-{ \"reg_or_0_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\\\n-{ \"reg_or_5bit_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}},\t\\\n-{ \"reg_or_6bit_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}},\t\\\n-{ \"reg_or_8bit_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}},\t\\\n-{ \"reg_or_8bit_adjusted_operand\", {SUBREG, REG, CONST_INT,\t\t\\\n+{ \"gr_register_operand\", {SUBREG, REG}},\t\t\t\t\\\n+{ \"fr_register_operand\", {SUBREG, REG}},\t\t\t\t\\\n+{ \"grfr_register_operand\", {SUBREG, REG}},\t\t\t\t\\\n+{ \"gr_nonimmediate_operand\", {SUBREG, REG, MEM}},\t\t\t\\\n+{ \"grfr_nonimmediate_operand\", {SUBREG, REG, MEM}},\t\t\t\\\n+{ \"gr_reg_or_0_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\\\n+{ \"gr_reg_or_5bit_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}},\t\\\n+{ \"gr_reg_or_6bit_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}},\t\\\n+{ \"gr_reg_or_8bit_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}},\t\\\n+{ \"grfr_reg_or_8bit_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}}, \\\n+{ \"gr_reg_or_8bit_adjusted_operand\", {SUBREG, REG, CONST_INT,\t\t\\\n \t\t\t\t     CONSTANT_P_RTX}},\t\t\t\\\n-{ \"reg_or_8bit_and_adjusted_operand\", {SUBREG, REG, CONST_INT,\t\t\\\n+{ \"gr_reg_or_8bit_and_adjusted_operand\", {SUBREG, REG, CONST_INT,\t\\\n \t\t\t\t\t CONSTANT_P_RTX}},\t\t\\\n-{ \"reg_or_14bit_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}},\t\\\n-{ \"reg_or_22bit_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}},\t\\\n+{ \"gr_reg_or_14bit_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}}, \\\n+{ \"gr_reg_or_22bit_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}}, \\\n { \"shift_count_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}},\t\\\n { \"shift_32bit_count_operand\", {SUBREG, REG, CONST_INT,\t\t\t\\\n \t\t\t\t  CONSTANT_P_RTX}},\t\t\t\\\n { \"shladd_operand\", {CONST_INT}},\t\t\t\t\t\\\n { \"fetchadd_operand\", {CONST_INT}},\t\t\t\t\t\\\n-{ \"reg_or_fp01_operand\", {SUBREG, REG, CONST_DOUBLE}},\t\t\t\\\n+{ \"fr_reg_or_fp01_operand\", {SUBREG, REG, CONST_DOUBLE}},\t\t\\\n { \"normal_comparison_operator\", {EQ, NE, GT, LE, GTU, LEU}},\t\t\\\n { \"adjusted_comparison_operator\", {LT, GE, LTU, GEU}},\t\t\t\\\n { \"call_multiple_values_operation\", {PARALLEL}},\t\t\t\\"}, {"sha": "b8cd92c26618da39496c727c71b19a6faec35042", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 381, "deletions": 716, "changes": 1097, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0551c32d8bd642833f411c7cea2b870b3d87a70d/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0551c32d8bd642833f411c7cea2b870b3d87a70d/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=0551c32d8bd642833f411c7cea2b870b3d87a70d", "patch": "@@ -931,22 +931,22 @@\n ;; Signed conversions from a smaller integer to a larger integer\n \n (define_insn \"extendqidi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(sign_extend:DI (match_operand:QI 1 \"register_operand\" \"r\")))]\n+  [(set (match_operand:DI 0 \"gr_register_operand\" \"=r\")\n+\t(sign_extend:DI (match_operand:QI 1 \"gr_register_operand\" \"r\")))]\n   \"\"\n   \"sxt1 %0 = %1\"\n   [(set_attr \"type\" \"I\")])\n \n (define_insn \"extendhidi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(sign_extend:DI (match_operand:HI 1 \"register_operand\" \"r\")))]\n+  [(set (match_operand:DI 0 \"gr_register_operand\" \"=r\")\n+\t(sign_extend:DI (match_operand:HI 1 \"gr_register_operand\" \"r\")))]\n   \"\"\n   \"sxt2 %0 = %1\"\n   [(set_attr \"type\" \"I\")])\n \n (define_insn \"extendsidi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,*f\")\n-\t(sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r,*f\")))]\n+  [(set (match_operand:DI 0 \"grfr_register_operand\" \"=r,*f\")\n+\t(sign_extend:DI (match_operand:SI 1 \"grfr_register_operand\" \"r,*f\")))]\n   \"\"\n   \"@\n    sxt4 %0 = %1\n@@ -956,26 +956,27 @@\n ;; Unsigned conversions from a smaller integer to a larger integer\n \n (define_insn \"zero_extendqidi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(zero_extend:DI (match_operand:QI 1 \"nonimmediate_operand\" \"r,m\")))]\n+  [(set (match_operand:DI 0 \"gr_register_operand\" \"=r,r\")\n+\t(zero_extend:DI (match_operand:QI 1 \"gr_nonimmediate_operand\" \"r,m\")))]\n   \"\"\n   \"@\n    zxt1 %0 = %1\n    ld1%O1 %0 = %1%P1\"\n   [(set_attr \"type\" \"I,M\")])\n \n (define_insn \"zero_extendhidi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(zero_extend:DI (match_operand:HI 1 \"nonimmediate_operand\" \"r,m\")))]\n+  [(set (match_operand:DI 0 \"gr_register_operand\" \"=r,r\")\n+\t(zero_extend:DI (match_operand:HI 1 \"gr_nonimmediate_operand\" \"r,m\")))]\n   \"\"\n   \"@\n    zxt2 %0 = %1\n    ld2%O1 %0 = %1%P1\"\n   [(set_attr \"type\" \"I,M\")])\n \n (define_insn \"zero_extendsidi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r,*f\")\n-\t(zero_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"r,m,*f\")))]\n+  [(set (match_operand:DI 0 \"grfr_register_operand\" \"=r,r,*f\")\n+\t(zero_extend:DI\n+\t  (match_operand:SI 1 \"grfr_nonimmediate_operand\" \"r,m,*f\")))]\n   \"\"\n   \"@\n    zxt4 %0 = %1\n@@ -991,8 +992,8 @@\n ;; would let combine merge the thing into adjacent insns.\n \n (define_insn_and_split \"extendsfdf2\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n-\t(float_extend:DF (match_operand:SF 1 \"register_operand\" \"0,f\")))]\n+  [(set (match_operand:DF 0 \"fr_register_operand\" \"=f,f\")\n+\t(float_extend:DF (match_operand:SF 1 \"fr_register_operand\" \"0,f\")))]\n   \"\"\n   \"mov %0 = %1\"\n   \"reload_completed\"\n@@ -1001,8 +1002,8 @@\n   [(set_attr \"type\" \"F\")])\n \n (define_insn_and_split \"extendsftf2\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f,f\")\n-\t(float_extend:TF (match_operand:SF 1 \"register_operand\" \"0,f\")))]\n+  [(set (match_operand:TF 0 \"fr_register_operand\" \"=f,f\")\n+\t(float_extend:TF (match_operand:SF 1 \"fr_register_operand\" \"0,f\")))]\n   \"\"\n   \"mov %0 = %1\"\n   \"reload_completed\"\n@@ -1011,8 +1012,8 @@\n   [(set_attr \"type\" \"F\")])\n \n (define_insn_and_split \"extenddftf2\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f,f\")\n-\t(float_extend:TF (match_operand:DF 1 \"register_operand\" \"0,f\")))]\n+  [(set (match_operand:TF 0 \"fr_register_operand\" \"=f,f\")\n+\t(float_extend:TF (match_operand:DF 1 \"fr_register_operand\" \"0,f\")))]\n   \"\"\n   \"mov %0 = %1\"\n   \"reload_completed\"\n@@ -1021,96 +1022,96 @@\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"truncdfsf2\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(float_truncate:SF (match_operand:DF 1 \"register_operand\" \"f\")))]\n+  [(set (match_operand:SF 0 \"fr_register_operand\" \"=f\")\n+\t(float_truncate:SF (match_operand:DF 1 \"fr_register_operand\" \"f\")))]\n   \"\"\n   \"fnorm.s %0 = %1%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"trunctfsf2\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(float_truncate:SF (match_operand:TF 1 \"register_operand\" \"f\")))]\n+  [(set (match_operand:SF 0 \"fr_register_operand\" \"=f\")\n+\t(float_truncate:SF (match_operand:TF 1 \"fr_register_operand\" \"f\")))]\n   \"\"\n   \"fnorm.s %0 = %1%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"trunctfdf2\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(float_truncate:DF (match_operand:TF 1 \"register_operand\" \"f\")))]\n+  [(set (match_operand:DF 0 \"fr_register_operand\" \"=f\")\n+\t(float_truncate:DF (match_operand:TF 1 \"fr_register_operand\" \"f\")))]\n   \"\"\n   \"fnorm.d %0 = %1%B0\"\n   [(set_attr \"type\" \"F\")])\n \n ;; Convert between signed integer types and floating point.\n \n (define_insn \"floatditf2\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n-\t(float:TF (match_operand:DI 1 \"register_operand\" \"f\")))]\n+  [(set (match_operand:TF 0 \"fr_register_operand\" \"=f\")\n+\t(float:TF (match_operand:DI 1 \"fr_register_operand\" \"f\")))]\n   \"\"\n   \"fcvt.xf %0 = %1\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"fix_truncsfdi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=f\")\n-\t(fix:DI (match_operand:SF 1 \"register_operand\" \"f\")))]\n+  [(set (match_operand:DI 0 \"fr_register_operand\" \"=f\")\n+\t(fix:DI (match_operand:SF 1 \"fr_register_operand\" \"f\")))]\n   \"\"\n   \"fcvt.fx.trunc %0 = %1%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"fix_truncdfdi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=f\")\n-\t(fix:DI (match_operand:DF 1 \"register_operand\" \"f\")))]\n+  [(set (match_operand:DI 0 \"fr_register_operand\" \"=f\")\n+\t(fix:DI (match_operand:DF 1 \"fr_register_operand\" \"f\")))]\n   \"\"\n   \"fcvt.fx.trunc %0 = %1%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"fix_trunctfdi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=f\")\n-\t(fix:DI (match_operand:TF 1 \"register_operand\" \"f\")))]\n+  [(set (match_operand:DI 0 \"fr_register_operand\" \"=f\")\n+\t(fix:DI (match_operand:TF 1 \"fr_register_operand\" \"f\")))]\n   \"\"\n   \"fcvt.fx.trunc %0 = %1%B0\"\n   [(set_attr \"type\" \"F\")])\n \n ;; Convert between unsigned integer types and floating point.\n \n (define_insn \"floatunsdisf2\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(unsigned_float:SF (match_operand:DI 1 \"register_operand\" \"f\")))]\n+  [(set (match_operand:SF 0 \"fr_register_operand\" \"=f\")\n+\t(unsigned_float:SF (match_operand:DI 1 \"fr_register_operand\" \"f\")))]\n   \"\"\n   \"fcvt.xuf.s %0 = %1%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"floatunsdidf2\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(unsigned_float:DF (match_operand:DI 1 \"register_operand\" \"f\")))]\n+  [(set (match_operand:DF 0 \"fr_register_operand\" \"=f\")\n+\t(unsigned_float:DF (match_operand:DI 1 \"fr_register_operand\" \"f\")))]\n   \"\"\n   \"fcvt.xuf.d %0 = %1%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"floatunsditf2\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n-\t(unsigned_float:TF (match_operand:DI 1 \"register_operand\" \"f\")))]\n+  [(set (match_operand:TF 0 \"fr_register_operand\" \"=f\")\n+\t(unsigned_float:TF (match_operand:DI 1 \"fr_register_operand\" \"f\")))]\n   \"\"\n   \"fcvt.xuf %0 = %1%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"fixuns_truncsfdi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=f\")\n-\t(unsigned_fix:DI (match_operand:SF 1 \"register_operand\" \"f\")))]\n+  [(set (match_operand:DI 0 \"fr_register_operand\" \"=f\")\n+\t(unsigned_fix:DI (match_operand:SF 1 \"fr_register_operand\" \"f\")))]\n   \"\"\n   \"fcvt.fxu.trunc %0 = %1%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"fixuns_truncdfdi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=f\")\n-\t(unsigned_fix:DI (match_operand:DF 1 \"register_operand\" \"f\")))]\n+  [(set (match_operand:DI 0 \"fr_register_operand\" \"=f\")\n+\t(unsigned_fix:DI (match_operand:DF 1 \"fr_register_operand\" \"f\")))]\n   \"\"\n   \"fcvt.fxu.trunc %0 = %1%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"fixuns_trunctfdi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=f\")\n-\t(unsigned_fix:DI (match_operand:TF 1 \"register_operand\" \"f\")))]\n+  [(set (match_operand:DI 0 \"fr_register_operand\" \"=f\")\n+\t(unsigned_fix:DI (match_operand:TF 1 \"fr_register_operand\" \"f\")))]\n   \"\"\n   \"fcvt.fxu.trunc %0 = %1%B0\"\n   [(set_attr \"type\" \"F\")])\n@@ -1122,17 +1123,17 @@\n ;; ::::::::::::::::::::\n \n (define_insn \"extv\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(sign_extract:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+  [(set (match_operand:DI 0 \"gr_register_operand\" \"=r\")\n+\t(sign_extract:DI (match_operand:DI 1 \"gr_register_operand\" \"r\")\n \t\t\t (match_operand:DI 2 \"const_int_operand\" \"n\")\n \t\t\t (match_operand:DI 3 \"const_int_operand\" \"n\")))]\n   \"\"\n   \"extr %0 = %1, %3, %2\"\n   [(set_attr \"type\" \"I\")])\n \n (define_insn \"extzv\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(zero_extract:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+  [(set (match_operand:DI 0 \"gr_register_operand\" \"=r\")\n+\t(zero_extract:DI (match_operand:DI 1 \"gr_register_operand\" \"r\")\n \t\t\t (match_operand:DI 2 \"const_int_operand\" \"n\")\n \t\t\t (match_operand:DI 3 \"const_int_operand\" \"n\")))]\n   \"\"\n@@ -1149,7 +1150,7 @@\n ;; where source2 != dest.\n \n (define_expand \"insv\"\n-  [(set (zero_extract:DI (match_operand:DI 0 \"register_operand\" \"\")\n+  [(set (zero_extract:DI (match_operand:DI 0 \"gr_register_operand\" \"\")\n \t\t\t (match_operand:DI 1 \"const_int_operand\" \"\")\n \t\t\t (match_operand:DI 2 \"const_int_operand\" \"\"))\n \t(match_operand:DI 3 \"nonmemory_operand\" \"\"))]\n@@ -1225,19 +1226,19 @@\n }\")\n \n (define_insn \"*insv_internal\"\n-  [(set (zero_extract:DI (match_operand:DI 0 \"register_operand\" \"+r\")\n+  [(set (zero_extract:DI (match_operand:DI 0 \"gr_register_operand\" \"+r\")\n \t\t\t (match_operand:DI 1 \"const_int_operand\" \"n\")\n \t\t\t (match_operand:DI 2 \"const_int_operand\" \"n\"))\n \t(match_operand:DI 3 \"nonmemory_operand\" \"rP\"))]\n-  \"(register_operand (operands[3], DImode) && INTVAL (operands[1]) <= 16)\n+  \"(gr_register_operand (operands[3], DImode) && INTVAL (operands[1]) <= 16)\n    || operands[3] == const0_rtx || operands[3] == constm1_rtx\"\n   \"dep %0 = %3, %0, %2, %1\"\n   [(set_attr \"type\" \"I\")])\n \n ;; Combine doesn't like to create bitfield insertions into zero.\n (define_insn \"*depz_internal\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(and:DI (ashift:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+  [(set (match_operand:DI 0 \"gr_register_operand\" \"=r\")\n+\t(and:DI (ashift:DI (match_operand:DI 1 \"gr_register_operand\" \"r\")\n \t\t\t   (match_operand:DI 2 \"const_int_operand\" \"n\"))\n \t\t(match_operand:DI 3 \"const_int_operand\" \"n\")))]\n   \"CONST_OK_FOR_M (INTVAL (operands[2]))\n@@ -1250,10 +1251,10 @@\n   [(set_attr \"type\" \"I\")])\n \n (define_insn \"shift_mix4left\"\n-  [(set (zero_extract:DI (match_operand:DI 0 \"register_operand\" \"+r\")\n+  [(set (zero_extract:DI (match_operand:DI 0 \"gr_register_operand\" \"+r\")\n \t\t\t (const_int 32) (const_int 0))\n-\t(match_operand:DI 1 \"register_operand\" \"r\"))\n-   (clobber (match_operand:DI 2 \"register_operand\" \"=r\"))]\n+\t(match_operand:DI 1 \"gr_register_operand\" \"r\"))\n+   (clobber (match_operand:DI 2 \"gr_register_operand\" \"=r\"))]\n   \"\"\n   \"#\"\n   [(set_attr \"type\" \"unknown\")])\n@@ -1282,28 +1283,29 @@\n   \"operands[3] = operands[2];\")\n \n (define_insn \"*mix4left\"\n-  [(set (zero_extract:DI (match_operand:DI 0 \"register_operand\" \"+r\")\n+  [(set (zero_extract:DI (match_operand:DI 0 \"gr_register_operand\" \"+r\")\n \t\t\t (const_int 32) (const_int 0))\n-\t(lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+\t(lshiftrt:DI (match_operand:DI 1 \"gr_register_operand\" \"r\")\n \t\t     (const_int 32)))]\n   \"\"\n   \"mix4.l %0 = %0, %r1\"\n   [(set_attr \"type\" \"I\")])\n \n (define_insn \"mix4right\"\n-  [(set (zero_extract:DI (match_operand:DI 0 \"register_operand\" \"+r\")\n+  [(set (zero_extract:DI (match_operand:DI 0 \"gr_register_operand\" \"+r\")\n \t\t\t (const_int 32) (const_int 32))\n-\t(match_operand:DI 1 \"reg_or_0_operand\" \"rO\"))]\n+\t(match_operand:DI 1 \"gr_reg_or_0_operand\" \"rO\"))]\n   \"\"\n   \"mix4.r %0 = %r1, %0\"\n   [(set_attr \"type\" \"I\")])\n \n ;; This is used by the rotrsi3 pattern.\n \n (define_insn \"*mix4right_3op\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(ior:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n-\t\t(ashift:DI (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"r\"))\n+  [(set (match_operand:DI 0 \"gr_register_operand\" \"=r\")\n+\t(ior:DI (zero_extend:DI (match_operand:SI 1 \"gr_register_operand\" \"r\"))\n+\t\t(ashift:DI (zero_extend:DI\n+\t\t\t     (match_operand:SI 2 \"gr_register_operand\" \"r\"))\n \t\t\t   (const_int 32))))]\n   \"\"\n   \"mix4.r %0 = %2, %1\"\n@@ -1317,9 +1319,9 @@\n ;; ::::::::::::::::::::\n \n (define_insn \"addsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r\")\n-\t(plus:SI (match_operand:SI 1 \"register_operand\" \"%r,r,a\")\n-\t\t (match_operand:SI 2 \"reg_or_22bit_operand\" \"r,I,J\")))]\n+  [(set (match_operand:SI 0 \"gr_register_operand\" \"=r,r,r\")\n+\t(plus:SI (match_operand:SI 1 \"gr_register_operand\" \"%r,r,a\")\n+\t\t (match_operand:SI 2 \"gr_reg_or_22bit_operand\" \"r,I,J\")))]\n   \"\"\n   \"@\n   add %0 = %1, %2\n@@ -1328,69 +1330,69 @@\n   [(set_attr \"type\" \"A\")])\n \n (define_insn \"*addsi3_plus1\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(plus:SI (plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t\t  (match_operand:SI 2 \"register_operand\" \"r\"))\n+  [(set (match_operand:SI 0 \"gr_register_operand\" \"=r\")\n+\t(plus:SI (plus:SI (match_operand:SI 1 \"gr_register_operand\" \"r\")\n+\t\t\t  (match_operand:SI 2 \"gr_register_operand\" \"r\"))\n \t\t (const_int 1)))]\n   \"\"\n   \"add %0 = %1, %2, 1\"\n   [(set_attr \"type\" \"A\")])\n \n (define_insn \"*addsi3_plus1_alt\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+  [(set (match_operand:SI 0 \"gr_register_operand\" \"=r\")\n+\t(plus:SI (mult:SI (match_operand:SI 1 \"gr_register_operand\" \"r\")\n \t\t\t  (const_int 2))\n \t\t (const_int 1)))]\n   \"\"\n   \"add %0 = %1, %1, 1\"\n   [(set_attr \"type\" \"A\")])\n \n (define_insn \"*addsi3_shladd\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+  [(set (match_operand:SI 0 \"gr_register_operand\" \"=r\")\n+\t(plus:SI (mult:SI (match_operand:SI 1 \"gr_register_operand\" \"r\")\n \t\t\t  (match_operand:SI 2 \"shladd_operand\" \"n\"))\n-\t\t (match_operand:SI 3 \"register_operand\" \"r\")))]\n+\t\t (match_operand:SI 3 \"gr_register_operand\" \"r\")))]\n   \"\"\n   \"shladd %0 = %1, %S2, %3\"\n   [(set_attr \"type\" \"A\")])\n \n (define_insn \"subsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(minus:SI (match_operand:SI 1 \"reg_or_8bit_operand\" \"rK\")\n-\t\t  (match_operand:SI 2 \"register_operand\" \"r\")))]\n+  [(set (match_operand:SI 0 \"gr_register_operand\" \"=r\")\n+\t(minus:SI (match_operand:SI 1 \"gr_reg_or_8bit_operand\" \"rK\")\n+\t\t  (match_operand:SI 2 \"gr_register_operand\" \"r\")))]\n   \"\"\n   \"sub %0 = %1, %2\"\n   [(set_attr \"type\" \"A\")])\n \n (define_insn \"*subsi3_minus1\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(plus:SI (not:SI (match_operand:SI 1 \"register_operand\" \"r\"))\n-\t\t (match_operand:SI 2 \"register_operand\" \"r\")))]\n+  [(set (match_operand:SI 0 \"gr_register_operand\" \"=r\")\n+\t(plus:SI (not:SI (match_operand:SI 1 \"gr_register_operand\" \"r\"))\n+\t\t (match_operand:SI 2 \"gr_register_operand\" \"r\")))]\n   \"\"\n   \"sub %0 = %2, %1, 1\"\n   [(set_attr \"type\" \"A\")])\n \n ;; ??? Could add maddsi3 patterns patterned after the madddi3 patterns.\n \n (define_insn \"mulsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=f\")\n-\t(mult:SI (match_operand:SI 1 \"register_operand\" \"f\")\n+  [(set (match_operand:SI 0 \"fr_register_operand\" \"=f\")\n+\t(mult:SI (match_operand:SI 1 \"fr_register_operand\" \"f\")\n \t\t (match_operand:SI 2 \"nonmemory_operand\" \"f\")))]\n   \"\"\n   \"xma.l %0 = %1, %2, f0%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"negsi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(neg:SI (match_operand:SI 1 \"register_operand\" \"r\")))]\n+  [(set (match_operand:SI 0 \"gr_register_operand\" \"=r\")\n+\t(neg:SI (match_operand:SI 1 \"gr_register_operand\" \"r\")))]\n   \"\"\n   \"sub %0 = r0, %1\"\n   [(set_attr \"type\" \"A\")])\n \n (define_expand \"abssi2\"\n   [(set (match_dup 2)\n-\t(ge:CC (match_operand:SI 1 \"register_operand\" \"\") (const_int 0)))\n-   (set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(ge:CC (match_operand:SI 1 \"gr_register_operand\" \"\") (const_int 0)))\n+   (set (match_operand:SI 0 \"gr_register_operand\" \"\")\n \t(if_then_else:SI (eq:CC (match_dup 2) (const_int 0))\n \t\t\t (neg:SI (match_dup 1))\n \t\t\t (match_dup 1)))]\n@@ -1402,9 +1404,9 @@\n \n (define_expand \"sminsi3\"\n   [(set (match_dup 3)\n-\t(ge:CC (match_operand:SI 1 \"register_operand\" \"\")\n-\t       (match_operand:SI 2 \"register_operand\" \"\")))\n-   (set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(ge:CC (match_operand:SI 1 \"gr_register_operand\" \"\")\n+\t       (match_operand:SI 2 \"gr_register_operand\" \"\")))\n+   (set (match_operand:SI 0 \"gr_register_operand\" \"\")\n \t(if_then_else:SI (ne:CC (match_dup 3) (const_int 0))\n \t\t\t (match_dup 2) (match_dup 1)))]\n   \"\"\n@@ -1415,9 +1417,9 @@\n \n (define_expand \"smaxsi3\"\n   [(set (match_dup 3)\n-\t(ge:CC (match_operand:SI 1 \"register_operand\" \"\")\n-\t       (match_operand:SI 2 \"register_operand\" \"\")))\n-   (set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(ge:CC (match_operand:SI 1 \"gr_register_operand\" \"\")\n+\t       (match_operand:SI 2 \"gr_register_operand\" \"\")))\n+   (set (match_operand:SI 0 \"gr_register_operand\" \"\")\n \t(if_then_else:SI (ne:CC (match_dup 3) (const_int 0))\n \t\t\t (match_dup 1) (match_dup 2)))]\n   \"\"\n@@ -1428,9 +1430,9 @@\n \n (define_expand \"uminsi3\"\n   [(set (match_dup 3)\n-\t(geu:CC (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t(match_operand:SI 2 \"register_operand\" \"\")))\n-   (set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(geu:CC (match_operand:SI 1 \"gr_register_operand\" \"\")\n+\t\t(match_operand:SI 2 \"gr_register_operand\" \"\")))\n+   (set (match_operand:SI 0 \"gr_register_operand\" \"\")\n \t(if_then_else:SI (ne:CC (match_dup 3) (const_int 0))\n \t\t\t (match_dup 2) (match_dup 1)))]\n   \"\"\n@@ -1441,9 +1443,9 @@\n \n (define_expand \"umaxsi3\"\n   [(set (match_dup 3)\n-\t(geu:CC (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t(match_operand:SI 2 \"register_operand\" \"\")))\n-   (set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(geu:CC (match_operand:SI 1 \"gr_register_operand\" \"\")\n+\t\t(match_operand:SI 2 \"gr_register_operand\" \"\")))\n+   (set (match_operand:SI 0 \"gr_register_operand\" \"\")\n \t(if_then_else:SI (ne:CC (match_dup 3) (const_int 0))\n \t\t\t (match_dup 1) (match_dup 2)))]\n   \"\"\n@@ -1460,9 +1462,9 @@\n ;; ::::::::::::::::::::\n \n (define_insn \"adddi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r,r\")\n-\t(plus:DI (match_operand:DI 1 \"register_operand\" \"%r,r,a\")\n-\t\t (match_operand:DI 2 \"reg_or_22bit_operand\" \"r,I,J\")))]\n+  [(set (match_operand:DI 0 \"gr_register_operand\" \"=r,r,r\")\n+\t(plus:DI (match_operand:DI 1 \"gr_register_operand\" \"%r,r,a\")\n+\t\t (match_operand:DI 2 \"gr_reg_or_22bit_operand\" \"r,I,J\")))]\n   \"\"\n   \"@\n   add %0 = %1, %2\n@@ -1471,9 +1473,9 @@\n   [(set_attr \"type\" \"A\")])\n \n (define_insn \"*adddi3_plus1\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(plus:DI (plus:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t\t  (match_operand:DI 2 \"register_operand\" \"r\"))\n+  [(set (match_operand:DI 0 \"gr_register_operand\" \"=r\")\n+\t(plus:DI (plus:DI (match_operand:DI 1 \"gr_register_operand\" \"r\")\n+\t\t\t  (match_operand:DI 2 \"gr_register_operand\" \"r\"))\n \t\t (const_int 1)))]\n   \"\"\n   \"add %0 = %1, %2, 1\"\n@@ -1483,34 +1485,34 @@\n ;; eliminator hack handle it, which results in the 1 being forced into\n ;; a register, but not more ugliness here.\n (define_insn \"*adddi3_plus1_alt\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(plus:DI (mult:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+  [(set (match_operand:DI 0 \"gr_register_operand\" \"=r\")\n+\t(plus:DI (mult:DI (match_operand:DI 1 \"gr_register_operand\" \"r\")\n \t\t\t  (const_int 2))\n \t\t (const_int 1)))]\n   \"\"\n   \"add %0 = %1, %1, 1\"\n   [(set_attr \"type\" \"A\")])\n \n (define_insn \"subdi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(minus:DI (match_operand:DI 1 \"reg_or_8bit_operand\" \"rK\")\n-\t\t  (match_operand:DI 2 \"register_operand\" \"r\")))]\n+  [(set (match_operand:DI 0 \"gr_register_operand\" \"=r\")\n+\t(minus:DI (match_operand:DI 1 \"gr_reg_or_8bit_operand\" \"rK\")\n+\t\t  (match_operand:DI 2 \"gr_register_operand\" \"r\")))]\n   \"\"\n   \"sub %0 = %1, %2\"\n   [(set_attr \"type\" \"A\")])\n \n (define_insn \"*subdi3_minus1\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(plus:DI (not:DI (match_operand:DI 1 \"register_operand\" \"r\"))\n-\t\t (match_operand:DI 2 \"register_operand\" \"r\")))]\n+  [(set (match_operand:DI 0 \"gr_register_operand\" \"=r\")\n+\t(plus:DI (not:DI (match_operand:DI 1 \"gr_register_operand\" \"r\"))\n+\t\t (match_operand:DI 2 \"gr_register_operand\" \"r\")))]\n   \"\"\n   \"sub %0 = %2, %1, 1\"\n   [(set_attr \"type\" \"A\")])\n \n (define_insn \"muldi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=f\")\n-\t(mult:DI (match_operand:DI 1 \"register_operand\" \"f\")\n-\t\t (match_operand:DI 2 \"register_operand\" \"f\")))]\n+  [(set (match_operand:DI 0 \"fr_register_operand\" \"=f\")\n+\t(mult:DI (match_operand:DI 1 \"fr_register_operand\" \"f\")\n+\t\t (match_operand:DI 2 \"fr_register_operand\" \"f\")))]\n   \"\"\n   \"xma.l %0 = %1, %2, f0%B0\"\n   [(set_attr \"type\" \"F\")])\n@@ -1527,10 +1529,10 @@\n ;; ??? Maybe we should change how adds are canonicalized.\n \n (define_insn \"*madddi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=f\")\n-\t(plus:DI (mult:DI (match_operand:DI 1 \"register_operand\" \"f\")\n-\t\t\t  (match_operand:DI 2 \"register_operand\" \"f\"))\n-\t\t (match_operand:DI 3 \"register_operand\" \"f\")))\n+  [(set (match_operand:DI 0 \"fr_register_operand\" \"=f\")\n+\t(plus:DI (mult:DI (match_operand:DI 1 \"fr_register_operand\" \"f\")\n+\t\t\t  (match_operand:DI 2 \"fr_register_operand\" \"f\"))\n+\t\t (match_operand:DI 3 \"fr_register_operand\" \"f\")))\n    (clobber (match_scratch:DI 4 \"=X\"))]\n   \"\"\n   \"xma.l %0 = %1, %2, %3%B0\"\n@@ -1563,7 +1565,7 @@\n \t(plus:DI (plus:DI (mult:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t\t\t   (match_operand:DI 2 \"register_operand\" \"\"))\n \t\t\t  (match_operand:DI 3 \"register_operand\" \"\"))\n-\t\t (match_operand:DI 4 \"reg_or_14bit_operand\" \"\")))\n+\t\t (match_operand:DI 4 \"gr_reg_or_14bit_operand\" \"\")))\n    (clobber (match_scratch:DI 5 \"\"))]\n   \"reload_completed\"\n   [(parallel [(set (match_dup 5) (plus:DI (mult:DI (match_dup 1) (match_dup 2))\n@@ -1579,38 +1581,42 @@\n ;; to generate them.\n \n (define_insn \"smuldi3_highpart\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=f\")\n+  [(set (match_operand:DI 0 \"fr_register_operand\" \"=f\")\n \t(truncate:DI\n \t (lshiftrt:TI\n-\t  (mult:TI (sign_extend:TI (match_operand:DI 1 \"register_operand\" \"f\"))\n-\t\t   (sign_extend:TI (match_operand:DI 2 \"register_operand\" \"f\")))\n+\t  (mult:TI (sign_extend:TI\n+\t\t     (match_operand:DI 1 \"fr_register_operand\" \"f\"))\n+\t\t   (sign_extend:TI\n+\t\t     (match_operand:DI 2 \"fr_register_operand\" \"f\")))\n \t  (const_int 64))))]\n   \"\"\n   \"xma.h %0 = %1, %2, f0%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"umuldi3_highpart\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=f\")\n+  [(set (match_operand:DI 0 \"fr_register_operand\" \"=f\")\n \t(truncate:DI\n \t (lshiftrt:TI\n-\t  (mult:TI (zero_extend:TI (match_operand:DI 1 \"register_operand\" \"f\"))\n-\t\t   (zero_extend:TI (match_operand:DI 2 \"register_operand\" \"f\")))\n+\t  (mult:TI (zero_extend:TI\n+\t\t     (match_operand:DI 1 \"fr_register_operand\" \"f\"))\n+\t\t   (zero_extend:TI\n+\t\t     (match_operand:DI 2 \"fr_register_operand\" \"f\")))\n \t  (const_int 64))))]\n   \"\"\n   \"xma.hu %0 = %1, %2, f0%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"negdi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(neg:DI (match_operand:DI 1 \"register_operand\" \"r\")))]\n+  [(set (match_operand:DI 0 \"gr_register_operand\" \"=r\")\n+\t(neg:DI (match_operand:DI 1 \"gr_register_operand\" \"r\")))]\n   \"\"\n   \"sub %0 = r0, %1\"\n   [(set_attr \"type\" \"A\")])\n \n (define_expand \"absdi2\"\n   [(set (match_dup 2)\n-\t(ge:CC (match_operand:DI 1 \"register_operand\" \"\") (const_int 0)))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(ge:CC (match_operand:DI 1 \"gr_register_operand\" \"\") (const_int 0)))\n+   (set (match_operand:DI 0 \"gr_register_operand\" \"\")\n \t(if_then_else:DI (eq:CC (match_dup 2) (const_int 0))\n \t\t\t (neg:DI (match_dup 1))\n \t\t\t (match_dup 1)))]\n@@ -1622,9 +1628,9 @@\n \n (define_expand \"smindi3\"\n   [(set (match_dup 3)\n-\t(ge:CC (match_operand:DI 1 \"register_operand\" \"\")\n-\t       (match_operand:DI 2 \"register_operand\" \"\")))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(ge:CC (match_operand:DI 1 \"gr_register_operand\" \"\")\n+\t       (match_operand:DI 2 \"gr_register_operand\" \"\")))\n+   (set (match_operand:DI 0 \"gr_register_operand\" \"\")\n \t(if_then_else:DI (ne:CC (match_dup 3) (const_int 0))\n \t\t\t (match_dup 2) (match_dup 1)))]\n   \"\"\n@@ -1635,9 +1641,9 @@\n \n (define_expand \"smaxdi3\"\n   [(set (match_dup 3)\n-\t(ge:CC (match_operand:DI 1 \"register_operand\" \"\")\n-\t       (match_operand:DI 2 \"register_operand\" \"\")))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(ge:CC (match_operand:DI 1 \"gr_register_operand\" \"\")\n+\t       (match_operand:DI 2 \"gr_register_operand\" \"\")))\n+   (set (match_operand:DI 0 \"gr_register_operand\" \"\")\n \t(if_then_else:DI (ne:CC (match_dup 3) (const_int 0))\n \t\t\t (match_dup 1) (match_dup 2)))]\n   \"\"\n@@ -1648,9 +1654,9 @@\n \n (define_expand \"umindi3\"\n   [(set (match_dup 3)\n-\t(geu:CC (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t(match_operand:DI 2 \"register_operand\" \"\")))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(geu:CC (match_operand:DI 1 \"gr_register_operand\" \"\")\n+\t\t(match_operand:DI 2 \"gr_register_operand\" \"\")))\n+   (set (match_operand:DI 0 \"gr_register_operand\" \"\")\n \t(if_then_else:DI (ne:CC (match_dup 3) (const_int 0))\n \t\t\t (match_dup 2) (match_dup 1)))]\n   \"\"\n@@ -1661,9 +1667,9 @@\n \n (define_expand \"umaxdi3\"\n   [(set (match_dup 3)\n-\t(geu:CC (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t(match_operand:DI 2 \"register_operand\" \"\")))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(geu:CC (match_operand:DI 1 \"gr_register_operand\" \"\")\n+\t\t(match_operand:DI 2 \"gr_register_operand\" \"\")))\n+   (set (match_operand:DI 0 \"gr_register_operand\" \"\")\n \t(if_then_else:DI (ne:CC (match_dup 3) (const_int 0))\n \t\t\t (match_dup 1) (match_dup 2)))]\n   \"\"\n@@ -1674,12 +1680,12 @@\n \n (define_expand \"ffsdi2\"\n   [(set (match_dup 6)\n-\t(eq:CC (match_operand:DI 1 \"register_operand\" \"\") (const_int 0)))\n+\t(eq:CC (match_operand:DI 1 \"gr_register_operand\" \"\") (const_int 0)))\n    (set (match_dup 2) (plus:DI (match_dup 1) (const_int -1)))\n    (set (match_dup 5) (const_int 0))\n    (set (match_dup 3) (xor:DI (match_dup 1) (match_dup 2)))\n    (set (match_dup 4) (unspec:DI [(match_dup 3)] 8))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n+   (set (match_operand:DI 0 \"gr_register_operand\" \"\")\n \t(if_then_else:DI (ne:CC (match_dup 6) (const_int 0))\n \t\t\t (match_dup 5) (match_dup 4)))]\n   \"\"\n@@ -1693,8 +1699,8 @@\n }\")\n \n (define_insn \"*popcnt\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")] 8))]\n+  [(set (match_operand:DI 0 \"gr_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:DI 1 \"gr_register_operand\" \"r\")] 8))]\n   \"\"\n   \"popcnt %0 = %1\"\n   [(set_attr \"type\" \"I\")])\n@@ -1707,99 +1713,99 @@\n ;; ::::::::::::::::::::\n \n (define_insn \"addsf3\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(plus:SF (match_operand:SF 1 \"register_operand\" \"%f\")\n-\t\t (match_operand:SF 2 \"reg_or_fp01_operand\" \"fG\")))]\n+  [(set (match_operand:SF 0 \"fr_register_operand\" \"=f\")\n+\t(plus:SF (match_operand:SF 1 \"fr_register_operand\" \"%f\")\n+\t\t (match_operand:SF 2 \"fr_reg_or_fp01_operand\" \"fG\")))]\n   \"\"\n   \"fadd.s %0 = %1, %F2%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"subsf3\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(minus:SF (match_operand:SF 1 \"reg_or_fp01_operand\" \"fG\")\n-\t\t  (match_operand:SF 2 \"reg_or_fp01_operand\" \"fG\")))]\n+  [(set (match_operand:SF 0 \"fr_register_operand\" \"=f\")\n+\t(minus:SF (match_operand:SF 1 \"fr_reg_or_fp01_operand\" \"fG\")\n+\t\t  (match_operand:SF 2 \"fr_reg_or_fp01_operand\" \"fG\")))]\n   \"\"\n   \"fsub.s %0 = %F1, %F2%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"mulsf3\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(mult:SF (match_operand:SF 1 \"register_operand\" \"%f\")\n-\t\t (match_operand:SF 2 \"register_operand\" \"f\")))]\n+  [(set (match_operand:SF 0 \"fr_register_operand\" \"=f\")\n+\t(mult:SF (match_operand:SF 1 \"fr_register_operand\" \"%f\")\n+\t\t (match_operand:SF 2 \"fr_register_operand\" \"f\")))]\n   \"\"\n   \"fmpy.s %0 = %1, %2%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"abssf2\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(abs:SF (match_operand:SF 1 \"register_operand\" \"f\")))]\n+  [(set (match_operand:SF 0 \"fr_register_operand\" \"=f\")\n+\t(abs:SF (match_operand:SF 1 \"fr_register_operand\" \"f\")))]\n   \"\"\n   \"fabs %0 = %1%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"negsf2\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(neg:SF (match_operand:SF 1 \"register_operand\" \"f\")))]\n+  [(set (match_operand:SF 0 \"fr_register_operand\" \"=f\")\n+\t(neg:SF (match_operand:SF 1 \"fr_register_operand\" \"f\")))]\n   \"\"\n   \"fneg %0 = %1%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"*nabssf2\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(neg:SF (abs:SF (match_operand:SF 1 \"register_operand\" \"f\"))))]\n+  [(set (match_operand:SF 0 \"fr_register_operand\" \"=f\")\n+\t(neg:SF (abs:SF (match_operand:SF 1 \"fr_register_operand\" \"f\"))))]\n   \"\"\n   \"fnegabs %0 = %1%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"minsf3\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(smin:SF (match_operand:SF 1 \"register_operand\" \"f\")\n-\t\t (match_operand:SF 2 \"reg_or_fp01_operand\" \"fG\")))]\n+  [(set (match_operand:SF 0 \"fr_register_operand\" \"=f\")\n+\t(smin:SF (match_operand:SF 1 \"fr_register_operand\" \"f\")\n+\t\t (match_operand:SF 2 \"fr_reg_or_fp01_operand\" \"fG\")))]\n   \"\"\n   \"fmin %0 = %1, %F2%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"maxsf3\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(smax:SF (match_operand:SF 1 \"register_operand\" \"f\")\n-\t\t (match_operand:SF 2 \"reg_or_fp01_operand\" \"fG\")))]\n+  [(set (match_operand:SF 0 \"fr_register_operand\" \"=f\")\n+\t(smax:SF (match_operand:SF 1 \"fr_register_operand\" \"f\")\n+\t\t (match_operand:SF 2 \"fr_reg_or_fp01_operand\" \"fG\")))]\n   \"\"\n   \"fmax %0 = %1, %F2%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"*maddsf3\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(plus:SF (mult:SF (match_operand:SF 1 \"register_operand\" \"f\")\n-\t\t\t  (match_operand:SF 2 \"register_operand\" \"f\"))\n-\t\t (match_operand:SF 3 \"reg_or_fp01_operand\" \"fG\")))]\n+  [(set (match_operand:SF 0 \"fr_register_operand\" \"=f\")\n+\t(plus:SF (mult:SF (match_operand:SF 1 \"fr_register_operand\" \"f\")\n+\t\t\t  (match_operand:SF 2 \"fr_register_operand\" \"f\"))\n+\t\t (match_operand:SF 3 \"fr_reg_or_fp01_operand\" \"fG\")))]\n   \"\"\n   \"fma.s %0 = %1, %2, %F3%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"*msubsf3\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(minus:SF (mult:SF (match_operand:SF 1 \"register_operand\" \"f\")\n-\t\t\t   (match_operand:SF 2 \"register_operand\" \"f\"))\n-\t\t  (match_operand:SF 3 \"reg_or_fp01_operand\" \"fG\")))]\n+  [(set (match_operand:SF 0 \"fr_register_operand\" \"=f\")\n+\t(minus:SF (mult:SF (match_operand:SF 1 \"fr_register_operand\" \"f\")\n+\t\t\t   (match_operand:SF 2 \"fr_register_operand\" \"f\"))\n+\t\t  (match_operand:SF 3 \"fr_reg_or_fp01_operand\" \"fG\")))]\n   \"\"\n   \"fms.s %0 = %1, %2, %F3%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"*nmulsf3\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(neg:SF (mult:SF (match_operand:SF 1 \"register_operand\" \"f\")\n-\t\t\t (match_operand:SF 2 \"register_operand\" \"f\"))))]\n+  [(set (match_operand:SF 0 \"fr_register_operand\" \"=f\")\n+\t(neg:SF (mult:SF (match_operand:SF 1 \"fr_register_operand\" \"f\")\n+\t\t\t (match_operand:SF 2 \"fr_register_operand\" \"f\"))))]\n   \"\"\n   \"fnmpy.s %0 = %1, %2%B0\"\n   [(set_attr \"type\" \"F\")])\n \n ;; ??? Is it possible to canonicalize this as (minus (reg) (mult))?\n \n (define_insn \"*nmaddsf3\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(plus:SF (neg:SF (mult:SF (match_operand:SF 1 \"register_operand\" \"f\")\n-\t\t\t\t  (match_operand:SF 2 \"register_operand\" \"f\")))\n-\t\t (match_operand:SF 3 \"reg_or_fp01_operand\" \"fG\")))]\n+  [(set (match_operand:SF 0 \"fr_register_operand\" \"=f\")\n+\t(plus:SF (neg:SF (mult:SF (match_operand:SF 1 \"fr_register_operand\" \"f\")\n+\t\t\t\t  (match_operand:SF 2 \"fr_register_operand\" \"f\")))\n+\t\t (match_operand:SF 3 \"fr_reg_or_fp01_operand\" \"fG\")))]\n   \"\"\n   \"fnma.s %0 = %1, %2, %F3%B0\"\n   [(set_attr \"type\" \"F\")])\n@@ -1812,99 +1818,99 @@\n ;; ::::::::::::::::::::\n \n (define_insn \"adddf3\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(plus:DF (match_operand:DF 1 \"register_operand\" \"%f\")\n-\t\t (match_operand:DF 2 \"reg_or_fp01_operand\" \"fG\")))]\n+  [(set (match_operand:DF 0 \"fr_register_operand\" \"=f\")\n+\t(plus:DF (match_operand:DF 1 \"fr_register_operand\" \"%f\")\n+\t\t (match_operand:DF 2 \"fr_reg_or_fp01_operand\" \"fG\")))]\n   \"\"\n   \"fadd.d %0 = %1, %F2%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"subdf3\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(minus:DF (match_operand:DF 1 \"reg_or_fp01_operand\" \"fG\")\n-\t\t  (match_operand:DF 2 \"reg_or_fp01_operand\" \"fG\")))]\n+  [(set (match_operand:DF 0 \"fr_register_operand\" \"=f\")\n+\t(minus:DF (match_operand:DF 1 \"fr_reg_or_fp01_operand\" \"fG\")\n+\t\t  (match_operand:DF 2 \"fr_reg_or_fp01_operand\" \"fG\")))]\n   \"\"\n   \"fsub.d %0 = %F1, %F2%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"muldf3\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(mult:DF (match_operand:DF 1 \"register_operand\" \"f\")\n-\t\t (match_operand:DF 2 \"register_operand\" \"f\")))]\n+  [(set (match_operand:DF 0 \"fr_register_operand\" \"=f\")\n+\t(mult:DF (match_operand:DF 1 \"fr_register_operand\" \"f\")\n+\t\t (match_operand:DF 2 \"fr_register_operand\" \"f\")))]\n   \"\"\n   \"fmpy.d %0 = %1, %2%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"absdf2\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(abs:DF (match_operand:DF 1 \"register_operand\" \"f\")))]\n+  [(set (match_operand:DF 0 \"fr_register_operand\" \"=f\")\n+\t(abs:DF (match_operand:DF 1 \"fr_register_operand\" \"f\")))]\n   \"\"\n   \"fabs %0 = %1%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"negdf2\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(neg:DF (match_operand:DF 1 \"register_operand\" \"f\")))]\n+  [(set (match_operand:DF 0 \"fr_register_operand\" \"=f\")\n+\t(neg:DF (match_operand:DF 1 \"fr_register_operand\" \"f\")))]\n   \"\"\n   \"fneg %0 = %1%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"*nabsdf2\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(neg:DF (abs:DF (match_operand:DF 1 \"register_operand\" \"f\"))))]\n+  [(set (match_operand:DF 0 \"fr_register_operand\" \"=f\")\n+\t(neg:DF (abs:DF (match_operand:DF 1 \"fr_register_operand\" \"f\"))))]\n   \"\"\n   \"fnegabs %0 = %1%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"mindf3\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(smin:DF (match_operand:DF 1 \"register_operand\" \"f\")\n-\t\t (match_operand:DF 2 \"reg_or_fp01_operand\" \"fG\")))]\n+  [(set (match_operand:DF 0 \"fr_register_operand\" \"=f\")\n+\t(smin:DF (match_operand:DF 1 \"fr_register_operand\" \"f\")\n+\t\t (match_operand:DF 2 \"fr_reg_or_fp01_operand\" \"fG\")))]\n   \"\"\n   \"fmin %0 = %1, %F2%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"maxdf3\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(smax:DF (match_operand:DF 1 \"register_operand\" \"f\")\n-\t\t (match_operand:DF 2 \"reg_or_fp01_operand\" \"fG\")))]\n+  [(set (match_operand:DF 0 \"fr_register_operand\" \"=f\")\n+\t(smax:DF (match_operand:DF 1 \"fr_register_operand\" \"f\")\n+\t\t (match_operand:DF 2 \"fr_reg_or_fp01_operand\" \"fG\")))]\n   \"\"\n   \"fmax %0 = %1, %F2%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"*madddf3\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(plus:DF (mult:DF (match_operand:DF 1 \"register_operand\" \"f\")\n-\t\t\t  (match_operand:DF 2 \"register_operand\" \"f\"))\n-\t\t (match_operand:DF 3 \"reg_or_fp01_operand\" \"fG\")))]\n+  [(set (match_operand:DF 0 \"fr_register_operand\" \"=f\")\n+\t(plus:DF (mult:DF (match_operand:DF 1 \"fr_register_operand\" \"f\")\n+\t\t\t  (match_operand:DF 2 \"fr_register_operand\" \"f\"))\n+\t\t (match_operand:DF 3 \"fr_reg_or_fp01_operand\" \"fG\")))]\n   \"\"\n   \"fma.d %0 = %1, %2, %F3%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"*msubdf3\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(minus:DF (mult:DF (match_operand:DF 1 \"register_operand\" \"f\")\n-\t\t\t   (match_operand:DF 2 \"register_operand\" \"f\"))\n-\t\t  (match_operand:DF 3 \"reg_or_fp01_operand\" \"fG\")))]\n+  [(set (match_operand:DF 0 \"fr_register_operand\" \"=f\")\n+\t(minus:DF (mult:DF (match_operand:DF 1 \"fr_register_operand\" \"f\")\n+\t\t\t   (match_operand:DF 2 \"fr_register_operand\" \"f\"))\n+\t\t  (match_operand:DF 3 \"fr_reg_or_fp01_operand\" \"fG\")))]\n   \"\"\n   \"fms.d %0 = %1, %2, %F3%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"*nmuldf3\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(neg:DF (mult:DF (match_operand:DF 1 \"register_operand\" \"f\")\n-\t\t\t (match_operand:DF 2 \"register_operand\" \"f\"))))]\n+  [(set (match_operand:DF 0 \"fr_register_operand\" \"=f\")\n+\t(neg:DF (mult:DF (match_operand:DF 1 \"fr_register_operand\" \"f\")\n+\t\t\t (match_operand:DF 2 \"fr_register_operand\" \"f\"))))]\n   \"\"\n   \"fnmpy.d %0 = %1, %2%B0\"\n   [(set_attr \"type\" \"F\")])\n \n ;; ??? Is it possible to canonicalize this as (minus (reg) (mult))?\n \n (define_insn \"*nmadddf3\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(plus:DF (neg:DF (mult:DF (match_operand:DF 1 \"register_operand\" \"f\")\n-\t\t\t\t  (match_operand:DF 2 \"register_operand\" \"f\")))\n-\t\t (match_operand:DF 3 \"reg_or_fp01_operand\" \"fG\")))]\n+  [(set (match_operand:DF 0 \"fr_register_operand\" \"=f\")\n+\t(plus:DF (neg:DF (mult:DF (match_operand:DF 1 \"fr_register_operand\" \"f\")\n+\t\t\t\t  (match_operand:DF 2 \"fr_register_operand\" \"f\")))\n+\t\t (match_operand:DF 3 \"fr_reg_or_fp01_operand\" \"fG\")))]\n   \"\"\n   \"fnma.d %0 = %1, %2, %F3%B0\"\n   [(set_attr \"type\" \"F\")])\n@@ -1916,68 +1922,68 @@\n ;; ::::::::::::::::::::\n \n (define_insn \"addtf3\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n+  [(set (match_operand:TF 0 \"fr_register_operand\" \"=f\")\n \t(plus:TF (match_operand:TF 1 \"tfreg_or_fp01_operand\" \"fG\")\n \t\t (match_operand:TF 2 \"tfreg_or_fp01_operand\" \"fG\")))]\n   \"\"\n   \"fadd %0 = %F1, %F2%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"subtf3\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n+  [(set (match_operand:TF 0 \"fr_register_operand\" \"=f\")\n \t(minus:TF (match_operand:TF 1 \"tfreg_or_fp01_operand\" \"fG\")\n \t\t  (match_operand:TF 2 \"tfreg_or_fp01_operand\" \"fG\")))]\n   \"\"\n   \"fsub %0 = %F1, %F2%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"multf3\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n+  [(set (match_operand:TF 0 \"fr_register_operand\" \"=f\")\n \t(mult:TF (match_operand:TF 1 \"tfreg_or_fp01_operand\" \"fG\")\n \t\t (match_operand:TF 2 \"tfreg_or_fp01_operand\" \"fG\")))]\n   \"\"\n   \"fmpy %0 = %F1, %F2%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"abstf2\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n+  [(set (match_operand:TF 0 \"fr_register_operand\" \"=f\")\n \t(abs:TF (match_operand:TF 1 \"tfreg_or_fp01_operand\" \"fG\")))]\n   \"\"\n   \"fabs %0 = %F1%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"negtf2\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n+  [(set (match_operand:TF 0 \"fr_register_operand\" \"=f\")\n \t(neg:TF (match_operand:TF 1 \"tfreg_or_fp01_operand\" \"fG\")))]\n   \"\"\n   \"fneg %0 = %F1%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"*nabstf2\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n+  [(set (match_operand:TF 0 \"fr_register_operand\" \"=f\")\n \t(neg:TF (abs:TF (match_operand:TF 1 \"tfreg_or_fp01_operand\" \"fG\"))))]\n   \"\"\n   \"fnegabs %0 = %F1%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"mintf3\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n+  [(set (match_operand:TF 0 \"fr_register_operand\" \"=f\")\n \t(smin:TF (match_operand:TF 1 \"tfreg_or_fp01_operand\" \"fG\")\n \t\t (match_operand:TF 2 \"tfreg_or_fp01_operand\" \"fG\")))]\n   \"\"\n   \"fmin %0 = %F1, %F2%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"maxtf3\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n+  [(set (match_operand:TF 0 \"fr_register_operand\" \"=f\")\n \t(smax:TF (match_operand:TF 1 \"tfreg_or_fp01_operand\" \"fG\")\n \t\t (match_operand:TF 2 \"tfreg_or_fp01_operand\" \"fG\")))]\n   \"\"\n   \"fmax %0 = %F1, %F2%B0\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"*maddtf3\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n+  [(set (match_operand:TF 0 \"fr_register_operand\" \"=f\")\n \t(plus:TF (mult:TF (match_operand:TF 1 \"tfreg_or_fp01_operand\" \"fG\")\n \t\t\t  (match_operand:TF 2 \"tfreg_or_fp01_operand\" \"fG\"))\n \t\t (match_operand:TF 3 \"tfreg_or_fp01_operand\" \"fG\")))]\n@@ -1986,7 +1992,7 @@\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"*msubtf3\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n+  [(set (match_operand:TF 0 \"fr_register_operand\" \"=f\")\n \t(minus:TF (mult:TF (match_operand:TF 1 \"tfreg_or_fp01_operand\" \"fG\")\n \t\t\t   (match_operand:TF 2 \"tfreg_or_fp01_operand\" \"fG\"))\n \t\t  (match_operand:TF 3 \"tfreg_or_fp01_operand\" \"fG\")))]\n@@ -1995,7 +2001,7 @@\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"*nmultf3\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n+  [(set (match_operand:TF 0 \"fr_register_operand\" \"=f\")\n \t(neg:TF (mult:TF (match_operand:TF 1 \"tfreg_or_fp01_operand\" \"fG\")\n \t\t\t (match_operand:TF 2 \"tfreg_or_fp01_operand\" \"fG\"))))]\n   \"\"\n@@ -2005,7 +2011,7 @@\n ;; ??? Is it possible to canonicalize this as (minus (reg) (mult))?\n \n (define_insn \"*nmaddtf3\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n+  [(set (match_operand:TF 0 \"fr_register_operand\" \"=f\")\n \t(plus:TF (neg:TF (mult:TF\n \t\t\t  (match_operand:TF 1 \"tfreg_or_fp01_operand\" \"fG\")\n \t\t\t  (match_operand:TF 2 \"tfreg_or_fp01_operand\" \"fG\")))\n@@ -2021,9 +2027,9 @@\n ;; ::::::::::::::::::::\n \n (define_expand \"ashlsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(ashift:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t   (match_operand:SI 2 \"reg_or_5bit_operand\" \"\")))]\n+  [(set (match_operand:SI 0 \"gr_register_operand\" \"\")\n+\t(ashift:SI (match_operand:SI 1 \"gr_register_operand\" \"\")\n+\t\t   (match_operand:SI 2 \"gr_reg_or_5bit_operand\" \"\")))]\n   \"\"\n   \"\n {\n@@ -2038,9 +2044,9 @@\n }\")\n \n (define_insn \"*ashlsi3_internal\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r\")\n-\t(ashift:SI (match_operand:SI 1 \"register_operand\" \"r,r,r\")\n-\t\t   (match_operand:DI 2 \"reg_or_5bit_operand\" \"R,n,r\")))]\n+  [(set (match_operand:SI 0 \"gr_register_operand\" \"=r,r,r\")\n+\t(ashift:SI (match_operand:SI 1 \"gr_register_operand\" \"r,r,r\")\n+\t\t   (match_operand:DI 2 \"gr_reg_or_5bit_operand\" \"R,n,r\")))]\n   \"\"\n   \"@\n    shladd %0 = %1, %2, r0\n@@ -2049,9 +2055,9 @@\n   [(set_attr \"type\" \"A,I,I\")])\n \n (define_expand \"ashrsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t     (match_operand:SI 2 \"reg_or_5bit_operand\" \"\")))]\n+  [(set (match_operand:SI 0 \"gr_register_operand\" \"\")\n+\t(ashiftrt:SI (match_operand:SI 1 \"gr_register_operand\" \"\")\n+\t\t     (match_operand:SI 2 \"gr_reg_or_5bit_operand\" \"\")))]\n   \"\"\n   \"\n {\n@@ -2071,9 +2077,9 @@\n }\")\n \n (define_expand \"lshrsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t     (match_operand:SI 2 \"reg_or_5bit_operand\" \"\")))]\n+  [(set (match_operand:SI 0 \"gr_register_operand\" \"\")\n+\t(lshiftrt:SI (match_operand:SI 1 \"gr_register_operand\" \"\")\n+\t\t     (match_operand:SI 2 \"gr_reg_or_5bit_operand\" \"\")))]\n   \"\"\n   \"\n {\n@@ -2097,12 +2103,12 @@\n \n (define_expand \"rotrsi3\"\n   [(set (match_dup 3)\n-\t(ior:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"\"))\n+\t(ior:DI (zero_extend:DI (match_operand:SI 1 \"gr_register_operand\" \"\"))\n \t\t(ashift:DI (zero_extend:DI (match_dup 1)) (const_int 32))))\n    (set (match_dup 3)\n \t(lshiftrt:DI (match_dup 3)\n \t\t     (match_operand:DI 2 \"nonmemory_operand\" \"\")))\n-   (set (match_operand:SI 0 \"register_operand\" \"\") (match_dup 4))]\n+   (set (match_operand:SI 0 \"gr_register_operand\" \"\") (match_dup 4))]\n   \"\"\n   \"\n {\n@@ -2119,9 +2125,9 @@\n ;; ::::::::::::::::::::\n \n (define_insn \"ashldi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(ashift:DI (match_operand:DI 1 \"register_operand\" \"r,r\")\n-\t\t   (match_operand:DI 2 \"reg_or_6bit_operand\" \"R,rM\")))]\n+  [(set (match_operand:DI 0 \"gr_register_operand\" \"=r,r\")\n+\t(ashift:DI (match_operand:DI 1 \"gr_register_operand\" \"r,r\")\n+\t\t   (match_operand:DI 2 \"gr_reg_or_6bit_operand\" \"R,rM\")))]\n   \"\"\n   \"@\n    shladd %0 = %1, %2, r0\n@@ -2131,10 +2137,10 @@\n ;; ??? Maybe combine this with the multiply and add instruction?\n \n (define_insn \"*shladd\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(plus:DI (mult:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+  [(set (match_operand:DI 0 \"gr_register_operand\" \"=r\")\n+\t(plus:DI (mult:DI (match_operand:DI 1 \"gr_register_operand\" \"r\")\n \t\t\t  (match_operand:DI 2 \"shladd_operand\" \"n\"))\n-\t\t (match_operand:DI 3 \"register_operand\" \"r\")))]\n+\t\t (match_operand:DI 3 \"gr_register_operand\" \"r\")))]\n   \"\"\n   \"shladd %0 = %1, %S2, %3\"\n   [(set_attr \"type\" \"A\")])\n@@ -2148,8 +2154,8 @@\n ;; incorrectly.\n \n (define_insn_and_split \"*shladd_elim\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n-\t(plus:DI (plus:DI (mult:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+  [(set (match_operand:DI 0 \"gr_register_operand\" \"=&r\")\n+\t(plus:DI (plus:DI (mult:DI (match_operand:DI 1 \"gr_register_operand\" \"r\")\n \t\t\t\t   (match_operand:DI 2 \"shladd_operand\" \"n\"))\n \t\t\t  (match_operand:DI 3 \"nonmemory_operand\" \"r\"))\n \t\t (match_operand:DI 4 \"nonmemory_operand\" \"rI\")))]\n@@ -2163,17 +2169,17 @@\n   [(set_attr \"type\" \"unknown\")])\n \n (define_insn \"ashrdi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t     (match_operand:DI 2 \"reg_or_6bit_operand\" \"rM\")))]\n+  [(set (match_operand:DI 0 \"gr_register_operand\" \"=r\")\n+\t(ashiftrt:DI (match_operand:DI 1 \"gr_register_operand\" \"r\")\n+\t\t     (match_operand:DI 2 \"gr_reg_or_6bit_operand\" \"rM\")))]\n   \"\"\n   \"shr %0 = %1, %2\"\n   [(set_attr \"type\" \"I\")])\n \n (define_insn \"lshrdi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t     (match_operand:DI 2 \"reg_or_6bit_operand\" \"rM\")))]\n+  [(set (match_operand:DI 0 \"gr_register_operand\" \"=r\")\n+\t(lshiftrt:DI (match_operand:DI 1 \"gr_register_operand\" \"r\")\n+\t\t     (match_operand:DI 2 \"gr_reg_or_6bit_operand\" \"rM\")))]\n   \"\"\n   \"shr.u %0 = %1, %2\"\n   [(set_attr \"type\" \"I\")])\n@@ -2184,8 +2190,8 @@\n ;; verify that we have an appropriate constant in the expander.\n \n (define_expand \"rotrdi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(rotatert:DI (match_operand:DI 1 \"register_operand\" \"\")\n+  [(set (match_operand:DI 0 \"gr_register_operand\" \"\")\n+\t(rotatert:DI (match_operand:DI 1 \"gr_register_operand\" \"\")\n \t\t     (match_operand:DI 2 \"nonmemory_operand\" \"\")))]\n   \"\"\n   \"\n@@ -2195,8 +2201,8 @@\n }\")\n \n (define_insn \"*rotrdi3_internal\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(rotatert:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+  [(set (match_operand:DI 0 \"gr_register_operand\" \"=r\")\n+\t(rotatert:DI (match_operand:DI 1 \"gr_register_operand\" \"r\")\n \t\t     (match_operand:DI 2 \"shift_count_operand\" \"M\")))]\n   \"\"\n   \"shrp %0 = %1, %1, %2\"\n@@ -2224,8 +2230,8 @@\n ;; one_cmplsi2 pattern.\n \n (define_insn \"one_cmplsi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(not:SI (match_operand:SI 1 \"register_operand\" \"r\")))]\n+  [(set (match_operand:SI 0 \"gr_register_operand\" \"=r\")\n+\t(not:SI (match_operand:SI 1 \"gr_register_operand\" \"r\")))]\n   \"\"\n   \"andcm %0 = -1, %1\"\n   [(set_attr \"type\" \"A\")])\n@@ -2237,48 +2243,48 @@\n ;; ::::::::::::::::::::\n \n (define_insn \"anddi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,*f\")\n-\t(and:DI (match_operand:DI 1 \"register_operand\" \"%r,*f\")\n-\t\t(match_operand:DI 2 \"reg_or_8bit_operand\" \"rK,*f\")))]\n+  [(set (match_operand:DI 0 \"grfr_register_operand\" \"=r,*f\")\n+\t(and:DI (match_operand:DI 1 \"grfr_register_operand\" \"%r,*f\")\n+\t\t(match_operand:DI 2 \"grfr_reg_or_8bit_operand\" \"rK,*f\")))]\n   \"\"\n   \"@\n    and %0 = %2, %1\n    fand %0 = %2, %1%B0\"\n   [(set_attr \"type\" \"A,F\")])\n \n (define_insn \"*andnot\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,*f\")\n-\t(and:DI (not:DI (match_operand:DI 1 \"register_operand\" \"r,*f\"))\n-\t\t(match_operand:DI 2 \"reg_or_8bit_operand\" \"rK,*f\")))]\n+  [(set (match_operand:DI 0 \"grfr_register_operand\" \"=r,*f\")\n+\t(and:DI (not:DI (match_operand:DI 1 \"grfr_register_operand\" \"r,*f\"))\n+\t\t(match_operand:DI 2 \"grfr_reg_or_8bit_operand\" \"rK,*f\")))]\n   \"\"\n   \"@\n    andcm %0 = %2, %1\n    fandcm %0 = %2, %1%B0\"\n   [(set_attr \"type\" \"A,F\")])\n \n (define_insn \"iordi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,*f\")\n-\t(ior:DI (match_operand:DI 1 \"register_operand\" \"%r,*f\")\n-\t\t(match_operand:DI 2 \"reg_or_8bit_operand\" \"rK,*f\")))]\n+  [(set (match_operand:DI 0 \"grfr_register_operand\" \"=r,*f\")\n+\t(ior:DI (match_operand:DI 1 \"grfr_register_operand\" \"%r,*f\")\n+\t\t(match_operand:DI 2 \"grfr_reg_or_8bit_operand\" \"rK,*f\")))]\n   \"\"\n   \"@\n    or %0 = %2, %1\n    for %0 = %2, %1%B0\"\n   [(set_attr \"type\" \"A,F\")])\n \n (define_insn \"xordi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,*f\")\n-\t(xor:DI (match_operand:DI 1 \"register_operand\" \"%r,*f\")\n-\t\t(match_operand:DI 2 \"reg_or_8bit_operand\" \"rK,*f\")))]\n+  [(set (match_operand:DI 0 \"grfr_register_operand\" \"=r,*f\")\n+\t(xor:DI (match_operand:DI 1 \"grfr_register_operand\" \"%r,*f\")\n+\t\t(match_operand:DI 2 \"grfr_reg_or_8bit_operand\" \"rK,*f\")))]\n   \"\"\n   \"@\n    xor %0 = %2, %1\n    fxor %0 = %2, %1%B0\"\n   [(set_attr \"type\" \"A,F\")])\n \n (define_insn \"one_cmpldi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(not:DI (match_operand:DI 1 \"register_operand\" \"r\")))]\n+  [(set (match_operand:DI 0 \"gr_register_operand\" \"=r\")\n+\t(not:DI (match_operand:DI 1 \"gr_register_operand\" \"r\")))]\n   \"\"\n   \"andcm %0 = -1, %1\"\n   [(set_attr \"type\" \"A\")])\n@@ -2291,8 +2297,8 @@\n \n (define_expand \"cmpsi\"\n   [(set (cc0)\n-        (compare (match_operand:SI 0 \"register_operand\" \"\")\n-  \t\t (match_operand:SI 1 \"reg_or_8bit_and_adjusted_operand\" \"\")))]\n+        (compare (match_operand:SI 0 \"gr_register_operand\" \"\")\n+  \t\t (match_operand:SI 1 \"gr_reg_or_8bit_and_adjusted_operand\" \"\")))]\n   \"\"\n   \"\n {\n@@ -2303,8 +2309,8 @@\n \n (define_expand \"cmpdi\"\n   [(set (cc0)\n-        (compare (match_operand:DI 0 \"register_operand\" \"\")\n-  \t\t (match_operand:DI 1 \"reg_or_8bit_and_adjusted_operand\" \"\")))]\n+        (compare (match_operand:DI 0 \"gr_register_operand\" \"\")\n+  \t\t (match_operand:DI 1 \"gr_reg_or_8bit_and_adjusted_operand\" \"\")))]\n   \"\"\n   \"\n {\n@@ -2315,8 +2321,8 @@\n \n (define_expand \"cmpsf\"\n   [(set (cc0)\n-        (compare (match_operand:SF 0 \"reg_or_fp01_operand\" \"\")\n-  \t\t (match_operand:SF 1 \"reg_or_fp01_operand\" \"\")))]\n+        (compare (match_operand:SF 0 \"fr_reg_or_fp01_operand\" \"\")\n+  \t\t (match_operand:SF 1 \"fr_reg_or_fp01_operand\" \"\")))]\n   \"\"\n   \"\n {\n@@ -2327,8 +2333,8 @@\n \n (define_expand \"cmpdf\"\n   [(set (cc0)\n-        (compare (match_operand:DF 0 \"reg_or_fp01_operand\" \"\")\n-  \t\t (match_operand:DF 1 \"reg_or_fp01_operand\" \"\")))]\n+        (compare (match_operand:DF 0 \"fr_reg_or_fp01_operand\" \"\")\n+  \t\t (match_operand:DF 1 \"fr_reg_or_fp01_operand\" \"\")))]\n   \"\"\n   \"\n {\n@@ -2352,55 +2358,53 @@\n (define_insn \"*cmpsi_normal\"\n   [(set (match_operand:CC 0 \"register_operand\" \"=c\")\n \t(match_operator:CC 1 \"normal_comparison_operator\"\n-\t\t\t   [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t    (match_operand:SI 3 \"reg_or_8bit_operand\" \"rK\")]))]\n+\t   [(match_operand:SI 2 \"gr_register_operand\" \"r\")\n+\t    (match_operand:SI 3 \"gr_reg_or_8bit_operand\" \"rK\")]))]\n   \"\"\n   \"cmp4.%C1 %0, %I0 = %3, %2\"\n   [(set_attr \"type\" \"A\")])\n \n (define_insn \"*cmpsi_adjusted\"\n   [(set (match_operand:CC 0 \"register_operand\" \"=c\")\n \t(match_operator:CC 1 \"adjusted_comparison_operator\"\n-\t\t\t   [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t    (match_operand:SI 3 \"reg_or_8bit_adjusted_operand\"\n-\t\t\t\t\t      \"rL\")]))]\n+\t   [(match_operand:SI 2 \"gr_register_operand\" \"r\")\n+\t    (match_operand:SI 3 \"gr_reg_or_8bit_adjusted_operand\" \"rL\")]))]\n   \"\"\n   \"cmp4.%C1 %0, %I0 = %3, %2\"\n   [(set_attr \"type\" \"A\")])\n \n (define_insn \"*cmpdi_normal\"\n   [(set (match_operand:CC 0 \"register_operand\" \"=c\")\n \t(match_operator:CC 1 \"normal_comparison_operator\"\n-\t\t\t   [(match_operand:DI 2 \"register_operand\" \"r\")\n-\t\t\t    (match_operand:DI 3 \"reg_or_8bit_operand\" \"rK\")]))]\n+\t   [(match_operand:DI 2 \"gr_register_operand\" \"r\")\n+\t    (match_operand:DI 3 \"gr_reg_or_8bit_operand\" \"rK\")]))]\n   \"\"\n   \"cmp.%C1 %0, %I0 = %3, %2\"\n   [(set_attr \"type\" \"A\")])\n \n (define_insn \"*cmpdi_adjusted\"\n   [(set (match_operand:CC 0 \"register_operand\" \"=c\")\n \t(match_operator:CC 1 \"adjusted_comparison_operator\"\n-\t\t\t   [(match_operand:DI 2 \"register_operand\" \"r\")\n-\t\t\t    (match_operand:DI 3 \"reg_or_8bit_adjusted_operand\"\n-\t\t\t\t\t      \"rL\")]))]\n+\t   [(match_operand:DI 2 \"gr_register_operand\" \"r\")\n+\t    (match_operand:DI 3 \"gr_reg_or_8bit_adjusted_operand\" \"rL\")]))]\n   \"\"\n   \"cmp.%C1 %0, %I0 = %3, %2\"\n   [(set_attr \"type\" \"A\")])\n \n (define_insn \"*cmpsf_internal\"\n   [(set (match_operand:CC 0 \"register_operand\" \"=c\")\n \t(match_operator:CC 1 \"comparison_operator\"\n-\t\t\t   [(match_operand:SF 2 \"reg_or_fp01_operand\" \"fG\")\n-\t\t\t    (match_operand:SF 3 \"reg_or_fp01_operand\" \"fG\")]))]\n+\t   [(match_operand:SF 2 \"fr_reg_or_fp01_operand\" \"fG\")\n+\t    (match_operand:SF 3 \"fr_reg_or_fp01_operand\" \"fG\")]))]\n   \"\"\n   \"fcmp.%D1 %0, %I0 = %F2, %F3\"\n   [(set_attr \"type\" \"F\")])\n \n (define_insn \"*cmpdf_internal\"\n   [(set (match_operand:CC 0 \"register_operand\" \"=c\")\n \t(match_operator:CC 1 \"comparison_operator\"\n-\t\t\t   [(match_operand:DF 2 \"reg_or_fp01_operand\" \"fG\")\n-\t\t\t    (match_operand:DF 3 \"reg_or_fp01_operand\" \"fG\")]))]\n+\t   [(match_operand:DF 2 \"fr_reg_or_fp01_operand\" \"fG\")\n+\t    (match_operand:DF 3 \"fr_reg_or_fp01_operand\" \"fG\")]))]\n   \"\"\n   \"fcmp.%D1 %0, %I0 = %F2, %F3\"\n   [(set_attr \"type\" \"F\")])\n@@ -2418,7 +2422,7 @@\n \n (define_insn \"*bit_zero\"\n   [(set (match_operand:CC 0 \"register_operand\" \"=c\")\n-\t(eq:CC (zero_extract:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+\t(eq:CC (zero_extract:DI (match_operand:DI 1 \"gr_register_operand\" \"r\")\n \t\t\t\t(const_int 1)\n \t\t\t\t(match_operand:DI 2 \"immediate_operand\" \"n\"))\n \t       (const_int 0)))]\n@@ -2428,7 +2432,7 @@\n \n (define_insn \"*bit_one\"\n   [(set (match_operand:CC 0 \"register_operand\" \"=c\")\n-\t(ne:CC (zero_extract:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+\t(ne:CC (zero_extract:DI (match_operand:DI 1 \"gr_register_operand\" \"r\")\n \t\t\t\t(const_int 1)\n \t\t\t\t(match_operand:DI 2 \"immediate_operand\" \"n\"))\n \t       (const_int 0)))]\n@@ -2767,7 +2771,7 @@\n   [(set (match_dup 1)\n \t(eq:CC (match_dup 2)\n \t       (match_dup 3)))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n+   (set (match_operand:DI 0 \"gr_register_operand\" \"\")\n \t(ne:DI (match_dup 1) (const_int 0)))]\n   \"\"\n   \"\n@@ -2781,7 +2785,7 @@\n   [(set (match_dup 1)\n \t(ne:CC (match_dup 2)\n \t       (match_dup 3)))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n+   (set (match_operand:DI 0 \"gr_register_operand\" \"\")\n \t(ne:DI (match_dup 1) (const_int 0)))]\n   \"\"\n   \"\n@@ -2795,7 +2799,7 @@\n   [(set (match_dup 1)\n \t(lt:CC (match_dup 2)\n \t       (match_dup 3)))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n+   (set (match_operand:DI 0 \"gr_register_operand\" \"\")\n \t(ne:DI (match_dup 1) (const_int 0)))]\n   \"\"\n   \"\n@@ -2809,7 +2813,7 @@\n   [(set (match_dup 1)\n \t(le:CC (match_dup 2)\n \t       (match_dup 3)))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n+   (set (match_operand:DI 0 \"gr_register_operand\" \"\")\n \t(ne:DI (match_dup 1) (const_int 0)))]\n   \"\"\n   \"\n@@ -2823,7 +2827,7 @@\n   [(set (match_dup 1)\n \t(gt:CC (match_dup 2)\n \t       (match_dup 3)))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n+   (set (match_operand:DI 0 \"gr_register_operand\" \"\")\n \t(ne:DI (match_dup 1) (const_int 0)))]\n   \"\"\n   \"\n@@ -2837,7 +2841,7 @@\n   [(set (match_dup 1)\n \t(ge:CC (match_dup 2)\n \t       (match_dup 3)))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n+   (set (match_operand:DI 0 \"gr_register_operand\" \"\")\n \t(ne:DI (match_dup 1) (const_int 0)))]\n   \"\"\n   \"\n@@ -2851,7 +2855,7 @@\n   [(set (match_dup 1)\n \t(ltu:CC (match_dup 2)\n \t\t(match_dup 3)))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n+   (set (match_operand:DI 0 \"gr_register_operand\" \"\")\n \t(ne:DI (match_dup 1) (const_int 0)))]\n   \"\"\n   \"\n@@ -2865,7 +2869,7 @@\n   [(set (match_dup 1)\n \t(leu:CC (match_dup 2)\n \t\t(match_dup 3)))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n+   (set (match_operand:DI 0 \"gr_register_operand\" \"\")\n \t(ne:DI (match_dup 1) (const_int 0)))]\n   \"\"\n   \"\n@@ -2879,7 +2883,7 @@\n   [(set (match_dup 1)\n \t(gtu:CC (match_dup 2)\n \t\t(match_dup 3)))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n+   (set (match_operand:DI 0 \"gr_register_operand\" \"\")\n \t(ne:DI (match_dup 1) (const_int 0)))]\n   \"\"\n   \"\n@@ -2893,7 +2897,7 @@\n   [(set (match_dup 1)\n \t(geu:CC (match_dup 2)\n \t\t(match_dup 3)))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n+   (set (match_operand:DI 0 \"gr_register_operand\" \"\")\n \t(ne:DI (match_dup 1) (const_int 0)))]\n   \"\"\n   \"\n@@ -2907,7 +2911,7 @@\n   [(set (match_dup 1)\n \t(unordered:CC (match_dup 2)\n \t\t      (match_dup 3)))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n+   (set (match_operand:DI 0 \"gr_register_operand\" \"\")\n \t(ne:DI (match_dup 1) (const_int 0)))]\n   \"\"\n   \"\n@@ -2921,7 +2925,7 @@\n   [(set (match_dup 1)\n \t(ordered:CC (match_dup 2)\n \t\t      (match_dup 3)))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n+   (set (match_operand:DI 0 \"gr_register_operand\" \"\")\n \t(ne:DI (match_dup 1) (const_int 0)))]\n   \"\"\n   \"\n@@ -2934,18 +2938,12 @@\n ;; Don't allow memory as destination here, because cmov/cmov/st is more\n ;; efficient than mov/mov/cst/cst.\n \n-(define_insn \"*sne_internal\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+(define_insn_and_split \"*sne_internal\"\n+  [(set (match_operand:DI 0 \"gr_register_operand\" \"=r\")\n \t(ne:DI (match_operand:CC 1 \"register_operand\" \"c\")\n \t       (const_int 0)))]\n   \"\"\n   \"#\"\n-  [(set_attr \"type\" \"unknown\")])\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(ne:DI (match_operand:CC 1 \"register_operand\" \"\")\n-\t       (const_int 0)))]\n   \"reload_completed\"\n   [(set (match_dup 0)\n \t(if_then_else:DI (ne:CC (match_dup 1) (const_int 0))\n@@ -2955,24 +2953,17 @@\n \t(if_then_else:DI (ne:CC (match_dup 1) (const_int 0))\n \t\t\t (match_dup 0)\n \t\t\t (const_int 0)))]\n-  \"\")\n+  \"\"\n+  [(set_attr \"type\" \"unknown\")])\n \n ;; ??? Unknown if this can be matched.\n \n-(define_insn \"*seq_internal\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+(define_insn_and_split \"*seq_internal\"\n+  [(set (match_operand:DI 0 \"gr_register_operand\" \"=r\")\n \t(eq:DI (match_operand:CC 1 \"register_operand\" \"c\")\n \t       (const_int 0)))]\n   \"\"\n   \"#\"\n-  [(set_attr \"type\" \"unknown\")])\n-\n-;; ??? Unknown if this can be matched.\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(eq:DI (match_operand:CC 1 \"register_operand\" \"\")\n-\t       (const_int 0)))]\n   \"reload_completed\"\n   [(set (match_dup 0)\n \t(if_then_else:DI (eq:CC (match_dup 1) (const_int 0))\n@@ -2982,7 +2973,8 @@\n \t(if_then_else:DI (eq:CC (match_dup 1) (const_int 0))\n \t\t\t (match_dup 0)\n \t\t\t (const_int 0)))]\n-  \"\")\n+  \"\"\n+  [(set_attr \"type\" \"unknown\")])\n \n \f\n ;; ::::::::::::::::::::\n@@ -3064,13 +3056,13 @@\n ;; Absolute value pattern.\n \n (define_insn \"*absdi2_internal\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+  [(set (match_operand:DI 0 \"gr_register_operand\" \"=r,r\")\n \t(if_then_else:DI\n \t  (match_operator:CC 4 \"predicate_operator\"\n \t    [(match_operand:CC 1 \"register_operand\" \"c,c\")\n \t     (const_int 0)])\n-\t  (neg:DI (match_operand:DI 2 \"reg_or_22bit_operand\" \"rI,rI\"))\n-\t  (match_operand:DI 3 \"reg_or_22bit_operand\" \"0,rI\")))]\n+\t  (neg:DI (match_operand:DI 2 \"gr_reg_or_22bit_operand\" \"rI,rI\"))\n+\t  (match_operand:DI 3 \"gr_reg_or_22bit_operand\" \"0,rI\")))]\n   \"\"\n   \"#\"\n   [(set_attr \"type\" \"A,unknown\")\n@@ -3082,8 +3074,8 @@\n \t  (match_operator:CC 4 \"predicate_operator\"\n \t    [(match_operand:CC 1 \"register_operand\" \"c,c\")\n \t     (const_int 0)])\n-\t  (neg:DI (match_operand:DI 2 \"reg_or_22bit_operand\" \"\"))\n-\t  (match_operand:DI 3 \"reg_or_22bit_operand\" \"\")))]\n+\t  (neg:DI (match_operand:DI 2 \"gr_reg_or_22bit_operand\" \"\"))\n+\t  (match_operand:DI 3 \"gr_reg_or_22bit_operand\" \"\")))]\n   \"reload_completed && rtx_equal_p (operands[0], operands[3])\"\n   [(cond_exec\n      (match_dup 4)\n@@ -3097,8 +3089,8 @@\n \t  (match_operator:CC 4 \"predicate_operator\"\n \t    [(match_operand:CC 1 \"register_operand\" \"c,c\")\n \t     (const_int 0)])\n-\t  (neg:DI (match_operand:DI 2 \"reg_or_22bit_operand\" \"\"))\n-\t  (match_operand:DI 3 \"reg_or_22bit_operand\" \"\")))]\n+\t  (neg:DI (match_operand:DI 2 \"gr_reg_or_22bit_operand\" \"\"))\n+\t  (match_operand:DI 3 \"gr_reg_or_22bit_operand\" \"\")))]\n   \"reload_completed\"\n   [(cond_exec\n      (match_dup 4)\n@@ -3145,13 +3137,13 @@\n   [(set_attr \"predicable\" \"no\")])\n \n (define_insn \"*abssi2_internal\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+  [(set (match_operand:SI 0 \"gr_register_operand\" \"=r,r\")\n \t(if_then_else:SI\n \t  (match_operator:CC 4 \"predicate_operator\"\n \t    [(match_operand:CC 1 \"register_operand\" \"c,c\")\n \t     (const_int 0)])\n-\t  (neg:SI (match_operand:SI 3 \"reg_or_22bit_operand\" \"rI,rI\"))\n-\t  (match_operand:SI 2 \"reg_or_22bit_operand\" \"0,rI\")))]\n+\t  (neg:SI (match_operand:SI 3 \"gr_reg_or_22bit_operand\" \"rI,rI\"))\n+\t  (match_operand:SI 2 \"gr_reg_or_22bit_operand\" \"0,rI\")))]\n   \"\"\n   \"#\"\n   [(set_attr \"type\" \"A,unknown\")\n@@ -3163,8 +3155,8 @@\n \t  (match_operator:CC 4 \"predicate_operator\"\n \t    [(match_operand:CC 1 \"register_operand\" \"c,c\")\n \t     (const_int 0)])\n-\t  (neg:SI (match_operand:SI 2 \"reg_or_22bit_operand\" \"\"))\n-\t  (match_operand:SI 3 \"reg_or_22bit_operand\" \"\")))]\n+\t  (neg:SI (match_operand:SI 2 \"gr_reg_or_22bit_operand\" \"\"))\n+\t  (match_operand:SI 3 \"gr_reg_or_22bit_operand\" \"\")))]\n   \"reload_completed && rtx_equal_p (operands[0], operands[3])\"\n   [(cond_exec\n      (match_dup 4)\n@@ -3178,8 +3170,8 @@\n \t  (match_operator:CC 4 \"predicate_operator\"\n \t    [(match_operand:CC 1 \"register_operand\" \"c,c\")\n \t     (const_int 0)])\n-\t  (neg:SI (match_operand:SI 2 \"reg_or_22bit_operand\" \"\"))\n-\t  (match_operand:SI 3 \"reg_or_22bit_operand\" \"\")))]\n+\t  (neg:SI (match_operand:SI 2 \"gr_reg_or_22bit_operand\" \"\"))\n+\t  (match_operand:SI 3 \"gr_reg_or_22bit_operand\" \"\")))]\n   \"reload_completed\"\n   [(cond_exec\n      (match_dup 4)\n@@ -3617,7 +3609,7 @@\n (define_insn \"prologue_allocate_stack\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r,r\")\n \t(plus:DI (match_operand:DI 1 \"register_operand\" \"%r,r,a\")\n-\t\t (match_operand:DI 2 \"reg_or_22bit_operand\" \"r,I,J\")))\n+\t\t (match_operand:DI 2 \"gr_reg_or_22bit_operand\" \"r,I,J\")))\n    (set (match_operand:DI 3 \"register_operand\" \"=r,r,r\")\n \t(match_dup 3))]\n   \"\"\n@@ -3860,409 +3852,82 @@\n \f\n ;;; Intrinsics support.\n \n-(define_insn \"mf\"\n-  [(unspec [(match_operand:BLK 0 \"memory_operand\" \"m\")] 12)]\n+(define_expand \"mf\"\n+  [(set (mem:BLK (match_dup 0))\n+\t(unspec:BLK [(mem:BLK (match_dup 0))] 12))]\n+  \"\"\n+  \"\n+{\n+  operands[0] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (DImode));\n+  MEM_VOLATILE_P (operands[0]) = 1;\n+}\")\n+\n+(define_insn \"*mf_internal\"\n+  [(set (match_operand:BLK 0 \"\" \"\")\n+\t(unspec:BLK [(match_operand:BLK 1 \"\" \"\")] 12))]\n   \"\"\n   \"mf\"\n   [(set_attr \"type\" \"M\")])\n \n (define_insn \"fetchadd_acq_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (unspec:SI [(match_operand:SI 1 \"memory_operand\" \"m\")\n-                    (match_operand:SI 2 \"fetchadd_operand\" \"n\")] 19))]\n+  [(set (match_operand:SI 0 \"gr_register_operand\" \"=r\")\n+\t(match_dup 1))\n+   (set (match_operand:SI 1 \"not_postinc_memory_operand\" \"+S\")\n+\t(unspec:SI [(match_dup 1)\n+\t\t    (match_operand:SI 2 \"fetchadd_operand\" \"n\")] 19))]\n   \"\"\n   \"fetchadd4.acq %0 = %1, %2\"\n   [(set_attr \"type\" \"M\")])\n \n (define_insn \"fetchadd_acq_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (unspec:DI [(match_operand:DI 1 \"memory_operand\" \"m\")\n-                    (match_operand:DI 2 \"fetchadd_operand\" \"n\")] 19))]\n+  [(set (match_operand:DI 0 \"gr_register_operand\" \"=r\")\n+\t(match_dup 1))\n+   (set (match_operand:DI 1 \"not_postinc_memory_operand\" \"+S\")\n+\t(unspec:DI [(match_dup 1)\n+\t\t    (match_operand:DI 2 \"fetchadd_operand\" \"n\")] 19))]\n   \"\"\n   \"fetchadd8.acq %0 = %1, %2\"\n   [(set_attr \"type\" \"M\")])\n \n (define_insn \"cmpxchg_acq_si\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (unspec:SI [(match_operand:SI 1 \"memory_operand\" \"m\")\n-                    (match_operand:SI 2 \"register_operand\" \"r\")\n+  [(set (match_operand:SI 0 \"gr_register_operand\" \"=r\")\n+\t(match_dup 1))\n+   (set (match_operand:SI 1 \"not_postinc_memory_operand\" \"+S\")\n+        (unspec:SI [(match_dup 1)\n+                    (match_operand:SI 2 \"gr_register_operand\" \"r\")\n \t\t    (match_operand:SI 3 \"ar_ccv_reg_operand\" \"\")] 13))]\n   \"\"\n   \"cmpxchg4.acq %0 = %1, %2, %3\"\n   [(set_attr \"type\" \"M\")])\n \n (define_insn \"cmpxchg_acq_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (unspec:DI [(match_operand:DI 1 \"memory_operand\" \"m\")\n-                    (match_operand:DI 2 \"register_operand\" \"r\")\n-                    (match_operand:DI 3 \"ar_ccv_reg_operand\" \"\")] 13))]\n+  [(set (match_operand:DI 0 \"gr_register_operand\" \"=r\")\n+\t(match_dup 1))\n+   (set (match_operand:DI 1 \"not_postinc_memory_operand\" \"+S\")\n+        (unspec:DI [(match_dup 1)\n+                    (match_operand:DI 2 \"gr_register_operand\" \"r\")\n+\t\t    (match_operand:DI 3 \"ar_ccv_reg_operand\" \"\")] 13))]\n   \"\"\n   \"cmpxchg8.acq %0 = %1, %2, %3\"\n   [(set_attr \"type\" \"M\")])\n \n-(define_expand \"val_compare_and_swap_si\"\n-  [(match_operand:SI 0 \"register_operand\" \"\")\n-   (match_operand:SI 1 \"memory_operand\" \"\")\n-   (match_operand:SI 2 \"register_operand\" \"\")\n-   (match_operand:SI 3 \"register_operand\" \"\")]\n-  \"\"\n-  \"\n-{\n-  rtx target = gen_rtx_MEM (BLKmode, gen_rtx_REG (DImode, GR_REG (1)));\n-  rtx ccv = gen_rtx_REG (SImode, AR_CCV_REGNUM);\n-  emit_move_insn (ccv, operands[2]);\n-  emit_insn (gen_mf (target));\n-  emit_insn (gen_cmpxchg_acq_si (operands[0], operands[1], operands[3], ccv));\n-  DONE;\n-}\")\n-\n-(define_expand \"val_compare_and_swap_di\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"memory_operand\" \"\")\n-   (match_operand:DI 2 \"register_operand\" \"\")\n-   (match_operand:DI 3 \"register_operand\" \"\")]\n-  \"\"\n-  \"\n-{\n-  rtx target = gen_rtx_MEM (BLKmode, gen_rtx_REG (DImode, GR_REG (1)));\n-  rtx ccv = gen_rtx_REG (DImode, AR_CCV_REGNUM);\n-  emit_move_insn (ccv, operands[2]);\n-  emit_insn (gen_mf (target));\n-  emit_insn (gen_cmpxchg_acq_di (operands[0], operands[1], operands[3], ccv));\n-  DONE;\n-}\")\n-\n (define_insn \"xchgsi\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (match_operand:SI 1 \"memory_operand\" \"+m\"))\n+  [(set (match_operand:SI 0 \"gr_register_operand\" \"=r\")\n+        (match_operand:SI 1 \"not_postinc_memory_operand\" \"+S\"))\n    (set (match_dup 1)\n-        (match_operand:SI 2 \"register_operand\" \"r\"))]\n+        (match_operand:SI 2 \"gr_register_operand\" \"r\"))]\n   \"\"\n   \"xchg4 %0 = %1, %2\"\n   [(set_attr \"type\" \"M\")])\n \n (define_insn \"xchgdi\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (match_operand:DI 1 \"memory_operand\" \"+m\"))\n+  [(set (match_operand:DI 0 \"gr_register_operand\" \"=r\")\n+        (match_operand:DI 1 \"not_postinc_memory_operand\" \"+S\"))\n    (set (match_dup 1)\n-        (match_operand:DI 2 \"register_operand\" \"r\"))]\n+        (match_operand:DI 2 \"gr_register_operand\" \"r\"))]\n   \"\"\n   \"xchg8 %0 = %1, %2\"\n   [(set_attr \"type\" \"M\")])\n-\n-(define_expand \"lock_test_and_set_si\"\n-  [(match_operand:SI 0 \"register_operand\" \"\")\n-   (match_operand:SI 1 \"memory_operand\" \"\")\n-   (match_operand:SI 2 \"register_operand\" \"\")]\n-  \"\"\n-  \"\n-{\n-  emit_insn (gen_xchgsi (operands[0], operands[1], operands[2]));\n-  DONE;\n-}\")\n-\n-(define_expand \"lock_test_and_set_di\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"memory_operand\" \"\")\n-   (match_operand:DI 2 \"register_operand\" \"\")]\n-  \"\"\n-  \"\n-{\n-  emit_insn (gen_xchgdi (operands[0], operands[1], operands[2]));\n-  DONE;\n-}\")\n-\n-(define_expand \"fetch_and_add_si\"\n-  [(match_operand:SI 0 \"register_operand\" \"\")\n-   (match_operand:SI 1 \"memory_operand\" \"\")\n-   (match_operand:SI 2 \"nonmemory_operand\" \"\")]\n-  \"\"\n-  \"\n-{\n-  int x;\n-\n-  if (GET_CODE (operands[2]) == CONST_INT)\n-    {\n-      x = INTVAL(operands[2]);\n-      if (x == -16 || x == -8 || x == -4 || x == -1 ||\n-          x ==  16 || x ==  8 || x ==  4 || x ==  1)\n-        {\n-          emit_insn (gen_fetchadd_acq_si (operands[0], operands[1],\n-\t\t\t\t\t  operands[2]));\n-          DONE;\n-        }\n-    }\n-\n-  ia64_expand_fetch_and_op (IA64_ADD_OP, SImode, operands);\n-  DONE;\n-}\")\n-\n-(define_expand \"fetch_and_sub_si\"\n-  [(match_operand:SI 0 \"register_operand\" \"\")\n-   (match_operand:SI 1 \"memory_operand\" \"\")\n-   (match_operand:SI 2 \"register_operand\" \"\")]\n-  \"\"\n-  \"\n-{\n-  ia64_expand_fetch_and_op (IA64_SUB_OP, SImode, operands);\n-  DONE;\n-}\")\n-\n-(define_expand \"fetch_and_or_si\"\n-  [(match_operand:SI 0 \"register_operand\" \"\")\n-   (match_operand:SI 1 \"memory_operand\" \"\")\n-   (match_operand:SI 2 \"register_operand\" \"\")]\n-  \"\"\n-  \"\n-{\n-  ia64_expand_fetch_and_op (IA64_OR_OP, SImode, operands);\n-  DONE;\n-}\")\n-\n-(define_expand \"fetch_and_and_si\"\n-  [(match_operand:SI 0 \"register_operand\" \"\")\n-   (match_operand:SI 1 \"memory_operand\" \"\")\n-   (match_operand:SI 2 \"register_operand\" \"\")]\n-  \"\"\n-  \"\n-{\n-  ia64_expand_fetch_and_op (IA64_AND_OP, SImode, operands);\n-  DONE;\n-}\")\n-\n-(define_expand \"fetch_and_xor_si\"\n-  [(match_operand:SI 0 \"register_operand\" \"\")\n-   (match_operand:SI 1 \"memory_operand\" \"\")\n-   (match_operand:SI 2 \"register_operand\" \"\")]\n-  \"\"\n-  \"\n-{\n-  ia64_expand_fetch_and_op (IA64_XOR_OP, SImode, operands);\n-  DONE;\n-}\")\n-\n-(define_expand \"fetch_and_nand_si\"\n-  [(match_operand:SI 0 \"register_operand\" \"\")\n-   (match_operand:SI 1 \"memory_operand\" \"\")\n-   (match_operand:SI 2 \"register_operand\" \"\")]\n-  \"\"\n-  \"\n-{\n-  ia64_expand_fetch_and_op (IA64_NAND_OP, SImode, operands);\n-  DONE;\n-}\")\n-\n-(define_expand \"fetch_and_add_di\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"memory_operand\" \"\")\n-   (match_operand:DI 2 \"nonmemory_operand\" \"\")]\n-  \"\"\n-  \"\n-{\n-  int x;\n-\n-  if (GET_CODE (operands[2]) == CONST_INT)\n-    {\n-      x = INTVAL(operands[2]);\n-      if (x == -16 || x == -8 || x == -4 || x == -1 ||\n-          x ==  16 || x ==  8 || x ==  4 || x ==  1)\n-        {\n-          emit_insn (gen_fetchadd_acq_di (operands[0], operands[1],\n-\t\t\t\t\t  operands[2]));\n-          DONE;\n-        }\n-    }\n-\n-  ia64_expand_fetch_and_op (IA64_ADD_OP, DImode, operands);\n-  DONE;\n-}\")\n-\n-(define_expand \"fetch_and_sub_di\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"memory_operand\" \"\")\n-   (match_operand:DI 2 \"register_operand\" \"\")]\n-  \"\"\n-  \"\n-{\n-  ia64_expand_fetch_and_op (IA64_SUB_OP, DImode, operands);\n-  DONE;\n-}\")\n-\n-(define_expand \"fetch_and_or_di\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"memory_operand\" \"\")\n-   (match_operand:DI 2 \"register_operand\" \"\")]\n-  \"\"\n-  \"\n-{\n-  ia64_expand_fetch_and_op (IA64_OR_OP, DImode, operands);\n-  DONE;\n-}\")\n-\n-(define_expand \"fetch_and_and_di\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"memory_operand\" \"\")\n-   (match_operand:DI 2 \"register_operand\" \"\")]\n-  \"\"\n-  \"\n-{\n-  ia64_expand_fetch_and_op (IA64_AND_OP, DImode, operands);\n-  DONE;\n-}\")\n-\n-(define_expand \"fetch_and_xor_di\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"memory_operand\" \"\")\n-   (match_operand:DI 2 \"register_operand\" \"\")]\n-  \"\"\n-  \"\n-{\n-  ia64_expand_fetch_and_op (IA64_XOR_OP, DImode, operands);\n-  DONE;\n-}\")\n-\n-(define_expand \"fetch_and_nand_di\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"memory_operand\" \"\")\n-   (match_operand:DI 2 \"register_operand\" \"\")]\n-  \"\"\n-  \"\n-{\n-  ia64_expand_fetch_and_op (IA64_NAND_OP, DImode, operands);\n-  DONE;\n-}\")\n-\n-(define_expand \"add_and_fetch_di\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"memory_operand\" \"\")\n-   (match_operand:DI 2 \"register_operand\" \"\")]\n-  \"\"\n-  \"\n-{\n-  ia64_expand_op_and_fetch (IA64_ADD_OP, DImode, operands);\n-  DONE;\n-}\")\n-\n-(define_expand \"sub_and_fetch_di\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"memory_operand\" \"\")\n-   (match_operand:DI 2 \"register_operand\" \"\")]\n-  \"\"\n-  \"\n-{\n-  ia64_expand_op_and_fetch (IA64_SUB_OP, DImode, operands);\n-  DONE;\n-}\")\n-\n-(define_expand \"or_and_fetch_di\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"memory_operand\" \"\")\n-   (match_operand:DI 2 \"register_operand\" \"\")]\n-  \"\"\n-  \"\n-{\n-  ia64_expand_op_and_fetch (IA64_OR_OP, DImode, operands);\n-  DONE;\n-}\")\n-\n-(define_expand \"and_and_fetch_di\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"memory_operand\" \"\")\n-   (match_operand:DI 2 \"register_operand\" \"\")]\n-  \"\"\n-  \"\n-{\n-  ia64_expand_op_and_fetch (IA64_AND_OP, DImode, operands);\n-  DONE;\n-}\")\n-\n-(define_expand \"xor_and_fetch_di\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"memory_operand\" \"\")\n-   (match_operand:DI 2 \"register_operand\" \"\")]\n-  \"\"\n-  \"\n-{\n-  ia64_expand_op_and_fetch (IA64_XOR_OP, DImode, operands);\n-  DONE;\n-}\")\n-\n-(define_expand \"nand_and_fetch_di\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"memory_operand\" \"\")\n-   (match_operand:DI 2 \"register_operand\" \"\")]\n-  \"\"\n-  \"\n-{\n-  ia64_expand_op_and_fetch (IA64_NAND_OP, DImode, operands);\n-  DONE;\n-}\")\n-\n-(define_expand \"add_and_fetch_si\"\n-  [(match_operand:SI 0 \"register_operand\" \"\")\n-   (match_operand:SI 1 \"memory_operand\" \"\")\n-   (match_operand:SI 2 \"register_operand\" \"\")]\n-  \"\"\n-  \"\n-{\n-  ia64_expand_op_and_fetch (IA64_ADD_OP, SImode, operands);\n-  DONE;\n-}\")\n-\n-(define_expand \"sub_and_fetch_si\"\n-  [(match_operand:SI 0 \"register_operand\" \"\")\n-   (match_operand:SI 1 \"memory_operand\" \"\")\n-   (match_operand:SI 2 \"register_operand\" \"\")]\n-  \"\"\n-  \"\n-{\n-  ia64_expand_op_and_fetch (IA64_SUB_OP, SImode, operands);\n-  DONE;\n-}\")\n-\n-(define_expand \"or_and_fetch_si\"\n-  [(match_operand:SI 0 \"register_operand\" \"\")\n-   (match_operand:SI 1 \"memory_operand\" \"\")\n-   (match_operand:SI 2 \"register_operand\" \"\")]\n-  \"\"\n-  \"\n-{\n-  ia64_expand_op_and_fetch (IA64_OR_OP, SImode, operands);\n-  DONE;\n-}\")\n-\n-(define_expand \"and_and_fetch_si\"\n-  [(match_operand:SI 0 \"register_operand\" \"\")\n-   (match_operand:SI 1 \"memory_operand\" \"\")\n-   (match_operand:SI 2 \"register_operand\" \"\")]\n-  \"\"\n-  \"\n-{\n-  ia64_expand_op_and_fetch (IA64_AND_OP, SImode, operands);\n-  DONE;\n-}\")\n-\n-(define_expand \"xor_and_fetch_si\"\n-  [(match_operand:SI 0 \"register_operand\" \"\")\n-   (match_operand:SI 1 \"memory_operand\" \"\")\n-   (match_operand:SI 2 \"register_operand\" \"\")]\n-  \"\"\n-  \"\n-{\n-  ia64_expand_op_and_fetch (IA64_XOR_OP, SImode, operands);\n-  DONE;\n-}\")\n-\n-(define_expand \"nand_and_fetch_si\"\n-  [(match_operand:SI 0 \"register_operand\" \"\")\n-   (match_operand:SI 1 \"memory_operand\" \"\")\n-   (match_operand:SI 2 \"register_operand\" \"\")]\n-  \"\"\n-  \"\n-{\n-  ia64_expand_op_and_fetch (IA64_NAND_OP, SImode, operands);\n-  DONE;\n-}\")\n \f\n ;; Predication.\n "}, {"sha": "0910ed8f25d73ed9debadfd3cd8e7e685b90e528", "filename": "gcc/config/ia64/ia64intrin.h", "status": "modified", "additions": 127, "deletions": 55, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0551c32d8bd642833f411c7cea2b870b3d87a70d/gcc%2Fconfig%2Fia64%2Fia64intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0551c32d8bd642833f411c7cea2b870b3d87a70d/gcc%2Fconfig%2Fia64%2Fia64intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64intrin.h?ref=0551c32d8bd642833f411c7cea2b870b3d87a70d", "patch": "@@ -1,60 +1,132 @@\n #ifndef _IA64INTRIN_H_INCLUDED\n #define _IA64INTRIN_H_INCLUDED\n \n-void __sync_synchronize (void);\n-\n-int  __sync_val_compare_and_swap_si (int *, int, int);\n-long __sync_val_compare_and_swap_di (long *, long, long);\n-#define __sync_val_compare_and_swap(A,B,C) ((sizeof (*(A)) == sizeof(int)) ? __sync_val_compare_and_swap_si((int *)(A),(int)(B),(int)(C)) : __sync_val_compare_and_swap_di((long *)(A),(long)(B),(long)(C)))\n-\n-int  __sync_bool_compare_and_swap_si (int *, int, int);\n-long __sync_bool_compare_and_swap_di (long *, long, long);\n-#define __sync_bool_compare_and_swap(A,B,C) ((sizeof (*(A)) == sizeof(int)) ? __sync_bool_compare_and_swap_si((int *)(A),(int)(B),(int)(C)) : __sync_bool_compare_and_swap_di((long *)(A),(long)(B),(long)(C)))\n-\n-void __sync_lock_release_si (int *);\n-void __sync_lock_release_di (long *);\n-#define __sync_lock_release(A) ((sizeof (*(A)) == sizeof(int)) ? __sync_lock_release_si((int *)(A)) : __sync_lock_release_di((long *)(A)))\n-\n-int  __sync_lock_test_and_set_si (int *, int);\n-long __sync_lock_test_and_set_di (long *, long);\n-#define __sync_lock_test_and_set(A,B) ((sizeof (*(A)) == sizeof(int)) ? __sync_lock_test_and_set_si((int *)(A),(int)(B)) : __sync_lock_test_and_set_di((long *)(A),(long)(B)))\n-\n-int  __sync_fetch_and_add_si  (int *, int);\n-int  __sync_fetch_and_sub_si  (int *, int);\n-int  __sync_fetch_and_and_si  (int *, int);\n-int  __sync_fetch_and_or_si   (int *, int);\n-int  __sync_fetch_and_xor_si  (int *, int);\n-int  __sync_fetch_and_nand_si (int *, int);\n-long __sync_fetch_and_add_di  (long *, long);\n-long __sync_fetch_and_sub_di  (long *, long);\n-long __sync_fetch_and_and_di  (long *, long);\n-long __sync_fetch_and_or_di   (long *, long);\n-long __sync_fetch_and_xor_di  (long *, long);\n-long __sync_fetch_and_nand_di (long *, long);\n-#define __sync_fetch_and_add(A,B) ((sizeof (*(A)) == sizeof(int)) ? __sync_fetch_and_add_si((int *)(A),(int)(B)) : __sync_fetch_and_add_di((long *)(A),(long)(B)))\n-#define __sync_fetch_and_sub(A,B) ((sizeof (*(A)) == sizeof(int)) ? __sync_fetch_and_sub_si((int *)(A),(int)(B)) : __sync_fetch_and_sub_di((long *)(A),(long)(B)))\n-#define __sync_fetch_and_and(A,B) ((sizeof (*(A)) == sizeof(int)) ? __sync_fetch_and_and_si((int *)(A),(int)(B)) : __sync_fetch_and_and_di((long *)(A),(long)(B)))\n-#define __sync_fetch_and_or(A,B) ((sizeof (*(A)) == sizeof(int)) ? __sync_fetch_and_or_si((int *)(A),(int)(B)) : __sync_fetch_and_or_di((long *)(A),(long)(B)))\n-#define __sync_fetch_and_xor(A,B) ((sizeof (*(A)) == sizeof(int)) ? __sync_fetch_and_xor_si((int *)(A),(int)(B)) : __sync_fetch_and_xor_di((long *)(A),(long)(B)))\n-#define __sync_fetch_and_nand(A,B) ((sizeof (*(A)) == sizeof(int)) ? __sync_fetch_and_nand_si((int *)(A),(int)(B)) : __sync_fetch_and_nand_di((long *)(A),(long)(B)))\n-\n-int  __sync_add_and_fetch_si  (int *, int);\n-int  __sync_sub_and_fetch_si  (int *, int);\n-int  __sync_and_and_fetch_si  (int *, int);\n-int  __sync_or_and_fetch_si   (int *, int);\n-int  __sync_xor_and_fetch_si  (int *, int);\n-int  __sync_nand_and_fetch_si (int *, int);\n-long __sync_add_and_fetch_di  (long *, long);\n-long __sync_sub_and_fetch_di  (long *, long);\n-long __sync_and_and_fetch_di  (long *, long);\n-long __sync_or_and_fetch_di   (long *, long);\n-long __sync_xor_and_fetch_di  (long *, long);\n-long __sync_nand_and_fetch_di (long *, long);\n-#define __sync_add_and_fetch(A,B) ((sizeof (*(A)) == sizeof(int)) ? __sync_add_and_fetch_si((int *)(A),(int)(B)) : __sync_add_and_fetch_di((long *)(A),(long)(B)))\n-#define __sync_sub_and_fetch(A,B) ((sizeof (*(A)) == sizeof(int)) ? __sync_sub_and_fetch_si((int *)(A),(int)(B)) : __sync_sub_and_fetch_di((long *)(A),(long)(B)))\n-#define __sync_and_and_fetch(A,B) ((sizeof (*(A)) == sizeof(int)) ? __sync_and_and_fetch_si((int *)(A),(int)(B)) : __sync_and_and_fetch_di((long *)(A),(long)(B)))\n-#define __sync_or_and_fetch(A,B) ((sizeof (*(A)) == sizeof(int)) ? __sync_or_and_fetch_si((int *)(A),(int)(B)) : __sync_or_and_fetch_di((long *)(A),(long)(B)))\n-#define __sync_xor_and_fetch(A,B) ((sizeof (*(A)) == sizeof(int)) ? __sync_xor_and_fetch_si((int *)(A),(int)(B)) : __sync_xor_and_fetch_di((long *)(A),(long)(B)))\n-#define __sync_nand_and_fetch(A,B) ((sizeof (*(A)) == sizeof(int)) ? __sync_nand_and_fetch_si((int *)(A),(int)(B)) : __sync_nand_and_fetch_di((long *)(A),(long)(B)))\n+/* Actually, everything is a compiler builtin, but just so\n+   there's no confusion... */\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+extern void __sync_synchronize (void);\n+\n+extern int __sync_val_compare_and_swap_si (int *, int, int);\n+extern long __sync_val_compare_and_swap_di (long *, long, long);\n+#define __sync_val_compare_and_swap(PTR, OLD, NEW)\t\t\t\\\n+ ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n+  ? (__typeof__(*(PTR)))\t\t\t\t\t\t\\\n+    __sync_val_compare_and_swap_si((int *)(PTR),(int)(OLD),(int)(NEW))\t\\\n+  : (__typeof__(*(PTR)))\t\t\t\t\t\t\\\n+    __sync_val_compare_and_swap_di((long *)(PTR),(long)(OLD),(long)(NEW)))\n+\n+extern int __sync_bool_compare_and_swap_si (int *, int, int);\n+extern long __sync_bool_compare_and_swap_di (long *, long, long);\n+#define __sync_bool_compare_and_swap(PTR, OLD, NEW)\t\t\t\\\n+ ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n+  ? (__typeof__(*(PTR)))\t\t\t\t\t\t\\\n+    __sync_bool_compare_and_swap_si((int *)(PTR),(int)(OLD),(int)(NEW))\t\\\n+  : (__typeof__(*(PTR)))\t\t\t\t\t\t\\\n+    __sync_bool_compare_and_swap_di((long *)(PTR),(long)(OLD),(long)(NEW)))\n+\n+extern void __sync_lock_release_si (int *);\n+extern void __sync_lock_release_di (long *);\n+#define __sync_lock_release(PTR)\t\t\\\n+  ((sizeof (*(PTR)) == sizeof(int))\t\t\\\n+   ? __sync_lock_release_si((int *)(PTR))\t\\\n+   : __sync_lock_release_di((long *)(PTR)))\n+\n+extern int __sync_lock_test_and_set_si (int *, int);\n+extern long __sync_lock_test_and_set_di (long *, long);\n+#define __sync_lock_test_and_set(PTR,VAL)\t\t\t\t\\\n+ ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n+  ? (__typeof__(*(PTR))) __sync_lock_test_and_set_si((int *)(PTR),(int)(VAL)) \\\n+  : (__typeof__(*(PTR))) __sync_lock_test_and_set_di((long *)(PTR),(long)(VAL)))\n+\n+extern int __sync_fetch_and_add_si (int *, int);\n+extern long __sync_fetch_and_add_di (long *, long);\n+#define __sync_fetch_and_add(PTR,VAL)\t\t\t\t\t\\\n+ ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n+  ? (__typeof__(*(PTR))) __sync_fetch_and_add_si((int *)(PTR),(int)(VAL)) \\\n+  : (__typeof__(*(PTR))) __sync_fetch_and_add_di((long *)(PTR),(long)(VAL)))\n+\n+extern int __sync_fetch_and_sub_si (int *, int);\n+extern long __sync_fetch_and_sub_di (long *, long);\n+#define __sync_fetch_and_sub(PTR,VAL)\t\t\t\t\t\\\n+ ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n+  ? (__typeof__(*(PTR))) __sync_fetch_and_sub_si((int *)(PTR),(int)(VAL)) \\\n+  : (__typeof__(*(PTR))) __sync_fetch_and_sub_di((long *)(PTR),(long)(VAL)))\n+\n+extern int __sync_fetch_and_and_si (int *, int);\n+extern long __sync_fetch_and_and_di (long *, long);\n+#define __sync_fetch_and_and(PTR,VAL)\t\t\t\t\t\\\n+ ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n+  ? (__typeof__(*(PTR))) __sync_fetch_and_and_si((int *)(PTR),(int)(VAL)) \\\n+  : (__typeof__(*(PTR))) __sync_fetch_and_and_di((long *)(PTR),(long)(VAL)))\n+\n+extern int __sync_fetch_and_or_si (int *, int);\n+extern long __sync_fetch_and_or_di (long *, long);\n+#define __sync_fetch_and_or(PTR,VAL)\t\t\t\t\t\\\n+ ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n+  ? (__typeof__(*(PTR))) __sync_fetch_and_or_si((int *)(PTR),(int)(VAL)) \\\n+  : (__typeof__(*(PTR))) __sync_fetch_and_or_di((long *)(PTR),(long)(VAL)))\n+\n+extern int __sync_fetch_and_xor_si (int *, int);\n+extern long __sync_fetch_and_xor_di (long *, long);\n+#define __sync_fetch_and_xor(PTR,VAL)\t\t\t\t\t\\\n+ ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n+  ? (__typeof__(*(PTR))) __sync_fetch_and_xor_si((int *)(PTR),(int)(VAL)) \\\n+  : (__typeof__(*(PTR))) __sync_fetch_and_xor_di((long *)(PTR),(long)(VAL)))\n+\n+extern int __sync_fetch_and_nand_si (int *, int);\n+extern long __sync_fetch_and_nand_di (long *, long);\n+#define __sync_fetch_and_nand(PTR,VAL)\t\t\t\t\t\\\n+ ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n+  ? (__typeof__(*(PTR))) __sync_fetch_and_nand_si((int *)(PTR),(int)(VAL)) \\\n+  : (__typeof__(*(PTR))) __sync_fetch_and_nand_di((long *)(PTR),(long)(VAL)))\n+\n+extern int __sync_add_and_fetch_si (int *, int);\n+extern long __sync_add_and_fetch_di (long *, long);\n+#define __sync_add_and_fetch(PTR,VAL)\t\t\t\t\t\\\n+ ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n+  ? (__typeof__(*(PTR))) __sync_add_and_fetch_si((int *)(PTR),(int)(VAL)) \\\n+  : (__typeof__(*(PTR))) __sync_add_and_fetch_di((long *)(PTR),(long)(VAL)))\n+\n+extern int __sync_sub_and_fetch_si (int *, int);\n+extern long __sync_sub_and_fetch_di (long *, long);\n+#define __sync_sub_and_fetch(PTR,VAL)\t\t\t\t\t\\\n+ ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n+  ? (__typeof__(*(PTR))) __sync_sub_and_fetch_si((int *)(PTR),(int)(VAL)) \\\n+  : (__typeof__(*(PTR))) __sync_sub_and_fetch_di((long *)(PTR),(long)(VAL)))\n+\n+extern int __sync_and_and_fetch_si (int *, int);\n+extern long __sync_and_and_fetch_di (long *, long);\n+#define __sync_and_and_fetch(PTR,VAL)\t\t\t\t\t\\\n+ ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n+  ? (__typeof__(*(PTR))) __sync_and_and_fetch_si((int *)(PTR),(int)(VAL)) \\\n+  : (__typeof__(*(PTR))) __sync_and_and_fetch_di((long *)(PTR),(long)(VAL)))\n+\n+extern int __sync_or_and_fetch_si (int *, int);\n+extern long __sync_or_and_fetch_di (long *, long);\n+#define __sync_or_and_fetch(PTR,VAL)\t\t\t\t\t\\\n+ ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n+  ? (__typeof__(*(PTR))) __sync_or_and_fetch_si((int *)(PTR),(int)(VAL)) \\\n+  : (__typeof__(*(PTR))) __sync_or_and_fetch_di((long *)(PTR),(long)(VAL)))\n+\n+extern int __sync_xor_and_fetch_si (int *, int);\n+extern long __sync_xor_and_fetch_di (long *, long);\n+#define __sync_xor_and_fetch(PTR,VAL)\t\t\t\t\t\\\n+ ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n+  ? (__typeof__(*(PTR))) __sync_xor_and_fetch_si((int *)(PTR),(int)(VAL)) \\\n+  : (__typeof__(*(PTR))) __sync_xor_and_fetch_di((long *)(PTR),(long)(VAL)))\n+\n+extern int __sync_nand_and_fetch_si (int *, int);\n+extern long __sync_nand_and_fetch_di (long *, long);\n+#define __sync_nand_and_fetch(PTR,VAL)\t\t\t\t\t\\\n+ ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n+  ? (__typeof__(*(PTR))) __sync_nand_and_fetch_si((int *)(PTR),(int)(VAL)) \\\n+  : (__typeof__(*(PTR))) __sync_nand_and_fetch_di((long *)(PTR),(long)(VAL)))\n+\n+#ifdef __cplusplus\n+}\n+#endif\n \n #endif"}, {"sha": "d0dbb9ed76205ac2340feffc102fa652a6bc78d2", "filename": "gcc/stmt.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0551c32d8bd642833f411c7cea2b870b3d87a70d/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0551c32d8bd642833f411c7cea2b870b3d87a70d/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=0551c32d8bd642833f411c7cea2b870b3d87a70d", "patch": "@@ -1489,9 +1489,6 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \t  case 's':  case 'i':  case 'n':\n \t  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':\n \t  case 'N':  case 'O':  case 'P':  case ',':\n-#ifdef EXTRA_CONSTRAINT\n-\t  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':\n-#endif\n \t    break;\n \n \t  case '0':  case '1':  case '2':  case '3':  case '4':\n@@ -1511,6 +1508,9 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \t    break;\n \n \t  case 'g':  case 'X':\n+#ifdef EXTRA_CONSTRAINT\n+\t  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':\n+#endif\n \t    allows_reg = 1;\n \t    allows_mem = 1;\n \t    break;\n@@ -1643,13 +1643,10 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \n \t  case '<':  case '>':\n \t  case '?':  case '!':  case '*':\n-\t  case 'E':  case 'F':  case 'G':  case 'H':  case 'X':\n+\t  case 'E':  case 'F':  case 'G':  case 'H':\n \t  case 's':  case 'i':  case 'n':\n \t  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':\n \t  case 'N':  case 'O':  case 'P':  case ',':\n-#ifdef EXTRA_CONSTRAINT\n-\t  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':\n-#endif\n \t    break;\n \n \t    /* Whether or not a numeric constraint allows a register is\n@@ -1688,7 +1685,11 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \t    allows_reg = 1;\n \t    break;\n \n-\t  case 'g':\n+\t  case 'g':  case 'X':\n+#ifdef EXTRA_CONSTRAINT\n+\t  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':\n+#endif\n+\n \t    allows_reg = 1;\n \t    allows_mem = 1;\n \t    break;"}]}