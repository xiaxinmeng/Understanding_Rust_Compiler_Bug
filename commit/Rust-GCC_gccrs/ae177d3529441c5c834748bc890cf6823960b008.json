{"sha": "ae177d3529441c5c834748bc890cf6823960b008", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWUxNzdkMzUyOTQ0MWM1YzgzNDc0OGJjODkwY2Y2ODIzOTYwYjAwOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-06-04T15:16:00Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-06-04T15:16:00Z"}, "message": "PR c++/61806 - missed SFINAE with partial specialization.\n\n\t* cp-tree.h (deferring_access_check_sentinel): Add deferring_kind\n\tparameter to constructor.\n\t* pt.c (instantiate_class_template_1): Enable access checking\n\tbefore call to most_specialized_partial_spec.\n\nFrom-SVN: r261151", "tree": {"sha": "8c2bcb9e7a4d2d05d42477516dee59e8ca226f01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c2bcb9e7a4d2d05d42477516dee59e8ca226f01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae177d3529441c5c834748bc890cf6823960b008", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae177d3529441c5c834748bc890cf6823960b008", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae177d3529441c5c834748bc890cf6823960b008", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae177d3529441c5c834748bc890cf6823960b008/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8566678b9da3db996f7566ecb691be07ff376c8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8566678b9da3db996f7566ecb691be07ff376c8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8566678b9da3db996f7566ecb691be07ff376c8f"}], "stats": {"total": 58, "additions": 51, "deletions": 7}, "files": [{"sha": "c07371ee3a6b3c670e400d8d65e9ff9069c4afeb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae177d3529441c5c834748bc890cf6823960b008/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae177d3529441c5c834748bc890cf6823960b008/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ae177d3529441c5c834748bc890cf6823960b008", "patch": "@@ -1,5 +1,11 @@\n 2018-06-04  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/61806 - missed SFINAE with partial specialization.\n+\t* cp-tree.h (deferring_access_check_sentinel): Add deferring_kind\n+\tparameter to constructor.\n+\t* pt.c (instantiate_class_template_1): Enable access checking\n+\tbefore call to most_specialized_partial_spec.\n+\n \tPR c++/85765 - SFINAE and non-type default template arg.\n \t* pt.c (type_unification_real): Do full semantic processing if\n \tsubstituting a partial args list replaces all template parms."}, {"sha": "f2016f173bd58c9130d983c69611ead4980b59d1", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae177d3529441c5c834748bc890cf6823960b008/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae177d3529441c5c834748bc890cf6823960b008/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ae177d3529441c5c834748bc890cf6823960b008", "patch": "@@ -6807,9 +6807,9 @@ extern bool perform_or_defer_access_check\t(tree, tree, tree,\n \n struct deferring_access_check_sentinel\n {\n-  deferring_access_check_sentinel ()\n+  deferring_access_check_sentinel (enum deferring_kind kind = dk_deferred)\n   {\n-    push_deferring_access_checks (dk_deferred);\n+    push_deferring_access_checks (kind);\n   }\n   ~deferring_access_check_sentinel ()\n   {"}, {"sha": "aad68a3264316fd04d0010f1ebdc50367cc1d957", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae177d3529441c5c834748bc890cf6823960b008/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae177d3529441c5c834748bc890cf6823960b008/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ae177d3529441c5c834748bc890cf6823960b008", "patch": "@@ -10850,6 +10850,10 @@ instantiate_class_template_1 (tree type)\n   /* Mark the type as in the process of being defined.  */\n   TYPE_BEING_DEFINED (type) = 1;\n \n+  /* We may be in the middle of deferred access check.  Disable\n+     it now.  */\n+  deferring_access_check_sentinel acs (dk_no_deferred);\n+\n   /* Determine what specialization of the original template to\n      instantiate.  */\n   t = most_specialized_partial_spec (type, tf_warning_or_error);\n@@ -10889,10 +10893,6 @@ instantiate_class_template_1 (tree type)\n   if (! push_tinst_level (type))\n     return type;\n \n-  /* We may be in the middle of deferred access check.  Disable\n-     it now.  */\n-  push_deferring_access_checks (dk_no_deferred);\n-\n   int saved_unevaluated_operand = cp_unevaluated_operand;\n   int saved_inhibit_evaluation_warnings = c_inhibit_evaluation_warnings;\n \n@@ -11373,7 +11373,6 @@ instantiate_class_template_1 (tree type)\n   maximum_field_alignment = saved_maximum_field_alignment;\n   if (!fn_context)\n     pop_from_top_level ();\n-  pop_deferring_access_checks ();\n   pop_tinst_level ();\n \n   /* The vtable for a template class can be emitted in any translation"}, {"sha": "7ad38497c0b87b9a6cc8d8fbf7bb63dbb25e42a0", "filename": "gcc/testsuite/g++.dg/cpp0x/sfinae63.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae177d3529441c5c834748bc890cf6823960b008/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae63.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae177d3529441c5c834748bc890cf6823960b008/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae63.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae63.C?ref=ae177d3529441c5c834748bc890cf6823960b008", "patch": "@@ -0,0 +1,39 @@\n+// PR c++/61806\n+// { dg-do compile { target c++11 } }\n+\n+struct true_type \n+{\n+  static const bool value = true;\n+};\n+\n+struct false_type \n+{\n+  static const bool value = false;\n+};\n+\n+template<class T>\n+T&& declval();\n+\n+template<typename> struct check { typedef void type; };\n+\n+template<typename T, typename Enable = void>\n+struct has_public_f : false_type {};\n+\n+template<typename T>\n+struct has_public_f<\n+    T,\n+    typename check<\n+        decltype(\n+            declval<T&>().f()\n+        )\n+    >::type\n+> : true_type {};\n+\n+\n+struct Spub  { public: void f(); };\n+struct Spriv { private: void f(); };\n+\n+static_assert( has_public_f<Spub>::value, \"Ouch\");\n+static_assert(!has_public_f<Spriv>::value, \"Ouch\");\n+\n+int main() {}"}]}