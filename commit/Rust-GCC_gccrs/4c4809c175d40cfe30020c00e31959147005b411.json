{"sha": "4c4809c175d40cfe30020c00e31959147005b411", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM0ODA5YzE3NWQ0MGNmZTMwMDIwYzAwZTMxOTU5MTQ3MDA1YjQxMQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-10-16T22:37:53Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-10-16T22:37:53Z"}, "message": "[multiple changes]\n\n\n2003-10-16  Petur Runolfsson  <peturr02@ru.is>\n\n\tPR libstdc++/8610\n\tPR libstdc++/11450\n\tPR libstdc++/11543\n\tPR libstdc++/12065\n\t* config/io/basic_file_stdio.cc (__basic_file::seekoff):\n\tChange return value from streampos to streamoff.\n\t(__basic_file::seekpos): Delete.\n\t* config/io/basic_file_stdio.h: Same.\n\t* config/io/c_io_stdio.h: Remove streamoff and wstreamsize typedefs.\n\t* include/Makefile.am (bits_headers): Add bits/postypes.h.\n\t* include/bits/char_traits.h: Include bits/postypes.h instead of\n\tbits/fpos.h.\n\t* include/bits/fstream.tcc (basic_filebuf::open,\n\tbasic_filebuf::pbackfail): Don't use < or >= to compare pos_type\n\tvalues, use == and != instead.\n\t(basic_filebuf::_M_seek): Use explicit conversion from streamoff\n\tto pos_type.\n\t(basic_filebuf::imbue):  Don't use ! on pos_type values, use\n\t== instead. Don't use __check_facet(_M_codecvt) unless is_open().\n\t* include/bits/postypes.h: New file.\n\tAdd __streamoff_base_type typedef, streamsize.\n\t(streamoff, streampos, wstreampos): Define typedefs, with\n\tstreamoff defined as...\n\t(streamoff): New class. Document implementation defined\n\taspects.\n\t(fpos): New implementation. Document implementation defined\n\taspects.\n\t* include/bits/sstream.tcc (basic_stringbuf::seekpos): Use\n\texplicit conversion from pos_type to off_type.\n\t* include/std/std_iosfwd.h: Include bits/postypes.h instead\n\tof bits/fpos.h.\n\t* testsuite/27_io/basic_filebuf/seekoff/char/11543.cc: New test.\n\t* testsuite/27_io/basic_filebuf/seekoff/wchar_t/11543.cc: New test.\n\t* testsuite/27_io/fpos/11450.cc: New test.\n\t* testsuite/27_io/fpos/mbstate_t/12065.cc: New test.\n\t* testsuite/27_io/fpos/mbstate_t/4_neg.cc: New test.\n\t* testsuite/27_io/types/3.cc: New test.\n\n2003-10-16  Benjamin Kosnik  <bkoz@redhat.com>\n\n        * configure.host: Remove fpos_include_dir.\n        * configure.ac: Remove FPOS_INC_SRCDIR.\n        * configure: Regenerate.\n        * acinclude.m4 (GLIBCXX_ENABLE_CSTDIO): Remove FPOS_H.\n        * aclocal.m4: Regenerate.\n        * include/Makefile.am (host_headers): Remove fpos.h.\n        (bits_headers): Add postypes.h.\n        * include/Makefile.in: Regenerate.\n        * config/os/gnu-linux/fposh: Remove.\n        * config/os/generic/fpos.h: Remove.\n\n        * testsuite/27_io/basic_filebuf/seekoff/char/1-in.cc: Fixup.\n        * testsuite/27_io/basic_filebuf/seekoff/char/1-io.cc: Same.\n        * testsuite/27_io/basic_filebuf/seekoff/char/1-out.cc: Same.\n        * testsuite/27_io/basic_filebuf/seekoff/char/2-in.cc: Same.\n        * testsuite/27_io/basic_filebuf/seekoff/char/2-io.cc: Same.\n        * testsuite/27_io/basic_filebuf/seekoff/char/2-out.cc: Same.\n        * testsuite/27_io/basic_filebuf/seekpos/char/1-in.cc: Same.\n        * testsuite/27_io/basic_filebuf/seekpos/char/1-io.cc: Same.\n        * testsuite/27_io/basic_filebuf/seekpos/char/1-out.cc: Same.\n        * testsuite/27_io/basic_filebuf/seekpos/char/2-in.cc: Same.\n        * testsuite/27_io/basic_filebuf/seekpos/char/2-io.cc: Same.\n        * testsuite/27_io/basic_filebuf/seekpos/char/2-out.cc: Same.\n        * testsuite/27_io/basic_istream/seekg/char/2.cc: Same.\n        * testsuite/27_io/basic_stringbuf/seekoff/char/1.cc: Same.\n        * testsuite/27_io/basic_stringbuf/seekpos/char/1.cc: Same.\n        * testsuite/27_io/fpos/mbstate_t/3.cc: Same.\n        * testsuite/27_io/objects/char/10.cc: Same.\n\nFrom-SVN: r72582", "tree": {"sha": "ace03b23724b8ff5b0ec175af9fd1e176033b3cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ace03b23724b8ff5b0ec175af9fd1e176033b3cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c4809c175d40cfe30020c00e31959147005b411", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c4809c175d40cfe30020c00e31959147005b411", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c4809c175d40cfe30020c00e31959147005b411", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c4809c175d40cfe30020c00e31959147005b411/comments", "author": null, "committer": null, "parents": [{"sha": "dc17fe76617d48a706bc27d96f1bcb138c1f7b8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc17fe76617d48a706bc27d96f1bcb138c1f7b8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc17fe76617d48a706bc27d96f1bcb138c1f7b8c"}], "stats": {"total": 1285, "additions": 900, "deletions": 385}, "files": [{"sha": "cd0c934200f21786653fd06855ec5cd821a0af20", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -1,3 +1,74 @@\n+2003-10-16  Petur Runolfsson  <peturr02@ru.is>\n+\n+\tPR libstdc++/8610\n+\tPR libstdc++/11450\n+\tPR libstdc++/11543\n+\tPR libstdc++/12065\n+\t* config/io/basic_file_stdio.cc (__basic_file::seekoff):\n+\tChange return value from streampos to streamoff.\n+\t(__basic_file::seekpos): Delete.\n+\t* config/io/basic_file_stdio.h: Same.\n+\t* config/io/c_io_stdio.h: Remove streamoff and wstreamsize typedefs.\n+\t* include/Makefile.am (bits_headers): Add bits/postypes.h.\n+\t* include/bits/char_traits.h: Include bits/postypes.h instead of\n+\tbits/fpos.h.\n+\t* include/bits/fstream.tcc (basic_filebuf::open,\n+\tbasic_filebuf::pbackfail): Don't use < or >= to compare pos_type\n+\tvalues, use == and != instead.\n+\t(basic_filebuf::_M_seek): Use explicit conversion from streamoff\n+\tto pos_type.\n+\t(basic_filebuf::imbue):  Don't use ! on pos_type values, use\n+\t== instead. Don't use __check_facet(_M_codecvt) unless is_open().\n+\t* include/bits/postypes.h: New file.\n+\tAdd __streamoff_base_type typedef, streamsize.\n+\t(streamoff, streampos, wstreampos): Define typedefs, with\n+\tstreamoff defined as...\n+\t(streamoff): New class. Document implementation defined\n+\taspects.\n+\t(fpos): New implementation. Document implementation defined\n+\taspects.\n+\t* include/bits/sstream.tcc (basic_stringbuf::seekpos): Use\n+\texplicit conversion from pos_type to off_type.\n+\t* include/std/std_iosfwd.h: Include bits/postypes.h instead\n+\tof bits/fpos.h.\n+\t* testsuite/27_io/basic_filebuf/seekoff/char/11543.cc: New test.\n+\t* testsuite/27_io/basic_filebuf/seekoff/wchar_t/11543.cc: New test.\n+\t* testsuite/27_io/fpos/11450.cc: New test.\n+\t* testsuite/27_io/fpos/mbstate_t/12065.cc: New test.\n+\t* testsuite/27_io/fpos/mbstate_t/4_neg.cc: New test.\n+\t* testsuite/27_io/types/3.cc: New test.\n+\n+2003-10-16  Benjamin Kosnik  <bkoz@redhat.com>\n+ \n+        * configure.host: Remove fpos_include_dir.\n+        * configure.ac: Remove FPOS_INC_SRCDIR.\n+        * configure: Regenerate.\n+        * acinclude.m4 (GLIBCXX_ENABLE_CSTDIO): Remove FPOS_H.\n+        * aclocal.m4: Regenerate.\n+        * include/Makefile.am (host_headers): Remove fpos.h.\n+        (bits_headers): Add postypes.h.\n+        * include/Makefile.in: Regenerate.\n+        * config/os/gnu-linux/fposh: Remove.\n+        * config/os/generic/fpos.h: Remove.\n+ \n+        * testsuite/27_io/basic_filebuf/seekoff/char/1-in.cc: Fixup.\n+        * testsuite/27_io/basic_filebuf/seekoff/char/1-io.cc: Same.\n+        * testsuite/27_io/basic_filebuf/seekoff/char/1-out.cc: Same.\n+        * testsuite/27_io/basic_filebuf/seekoff/char/2-in.cc: Same.\n+        * testsuite/27_io/basic_filebuf/seekoff/char/2-io.cc: Same.\n+        * testsuite/27_io/basic_filebuf/seekoff/char/2-out.cc: Same.\n+        * testsuite/27_io/basic_filebuf/seekpos/char/1-in.cc: Same.\n+        * testsuite/27_io/basic_filebuf/seekpos/char/1-io.cc: Same.\n+        * testsuite/27_io/basic_filebuf/seekpos/char/1-out.cc: Same.\n+        * testsuite/27_io/basic_filebuf/seekpos/char/2-in.cc: Same.\n+        * testsuite/27_io/basic_filebuf/seekpos/char/2-io.cc: Same.\n+        * testsuite/27_io/basic_filebuf/seekpos/char/2-out.cc: Same.\n+        * testsuite/27_io/basic_istream/seekg/char/2.cc: Same.\n+        * testsuite/27_io/basic_stringbuf/seekoff/char/1.cc: Same.\n+        * testsuite/27_io/basic_stringbuf/seekpos/char/1.cc: Same.\n+        * testsuite/27_io/fpos/mbstate_t/3.cc: Same.\n+        * testsuite/27_io/objects/char/10.cc: Same.\n+\n 2003-10-16  Paolo Carlini  <pcarlini@suse.de>\n \n \t* src/locale.cc (locale::locale(const char*)): ... one"}, {"sha": "57875a17dc4e77a69e015948348d64fa9c3b9b68", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -1153,11 +1153,7 @@ AC_DEFUN(GLIBCXX_ENABLE_CSTDIO, [\n       ;;\n   esac\n \n-  dnl Set directory for fpos.h\n-  FPOS_H=$fpos_include_dir\n-\n   AC_SUBST(CSTDIO_H)\n-  AC_SUBST(FPOS_H)\n   AC_SUBST(BASIC_FILE_H)\n   AC_SUBST(BASIC_FILE_CC)\n ])"}, {"sha": "9d7e3ac4922b31b26b665ea6e9da4beabd351dae", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -1166,11 +1166,7 @@ AC_DEFUN(GLIBCXX_ENABLE_CSTDIO, [\n       ;;\n   esac\n \n-  dnl Set directory for fpos.h\n-  FPOS_H=$fpos_include_dir\n-\n   AC_SUBST(CSTDIO_H)\n-  AC_SUBST(FPOS_H)\n   AC_SUBST(BASIC_FILE_H)\n   AC_SUBST(BASIC_FILE_CC)\n ])"}, {"sha": "a74ac07e890b89da03f3ea34421e024ed4f3a62f", "filename": "libstdc++-v3/config/io/basic_file_stdio.cc", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -260,14 +260,10 @@ namespace std\n     return __ret;\n   }\n \n-  streampos\n+  streamoff\n   __basic_file<char>::seekoff(streamoff __off, ios_base::seekdir __way)\n   { return lseek(this->fd(), __off, __way); }\n \n-  streampos\n-  __basic_file<char>::seekpos(streampos __pos)\n-  { return lseek(this->fd(), __pos, ios_base::beg); }\n-\n   int \n   __basic_file<char>::sync() \n   { return fflush(_M_cfile); }"}, {"sha": "212ebbe8dc7a7e6e78b25f9957f88a7db1f18c47", "filename": "libstdc++-v3/config/io/basic_file_stdio.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -97,12 +97,9 @@ namespace std\n       streamsize \n       xsgetn(char* __s, streamsize __n);\n \n-      streampos\n+      streamoff\n       seekoff(streamoff __off, ios_base::seekdir __way);\n \n-      streampos\n-      seekpos(streampos __pos);\n-\n       int \n       sync();\n "}, {"sha": "c9ae432217101aa9a9e558c0b1791f69f7eaed45", "filename": "libstdc++-v3/config/io/c_io_stdio.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_stdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_stdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_stdio.h?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -38,13 +38,6 @@\n \n namespace std \n {\n-  // for fpos.h\n-  typedef long  \tstreamoff;\n-  typedef ptrdiff_t\tstreamsize; // Signed integral type\n-#if _GLIBCXX_USE_WCHAR_T\n-  typedef ptrdiff_t\twstreamsize;\n-#endif\n-\n   typedef __gthread_mutex_t __c_lock;\n \n   // for basic_file.h"}, {"sha": "869749088f5ac865b245c5e5384b82d7231864f6", "filename": "libstdc++-v3/config/os/generic/fpos.h", "status": "removed", "additions": 0, "deletions": 118, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc17fe76617d48a706bc27d96f1bcb138c1f7b8c/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Ffpos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc17fe76617d48a706bc27d96f1bcb138c1f7b8c/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Ffpos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Ffpos.h?ref=dc17fe76617d48a706bc27d96f1bcb138c1f7b8c", "patch": "@@ -1,118 +0,0 @@\n-// File position object and stream types, generic version -*- C++ -*-\n-\n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2003\n-// Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 27 Input/output library\n-//\n-\n-/** @file fpos.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-#ifndef _CPP_BITS_FPOS_H\n-#define _CPP_BITS_FPOS_H 1\n-\n-#pragma GCC system_header\n-\n-#include <bits/c++io.h>\n-#include <cwchar> \t// For mbstate_t.\n-\n-namespace std\n-{\n-  // 27.4.1  Types\n-\n-  // [27.4.3] template class fpos\n-  /**\n-   *  @doctodo\n-  */\n-  template<typename _StateT>\n-    class fpos\n-    {\n-    private:\n-      streamoff \t_M_off;\n-      _StateT \t\t_M_st;\n-\n-    public:\n-      _StateT\n-      state() const  { return _M_st; }\n-\n-      void \n-      state(_StateT __st)  { _M_st = __st; }\n-\n-      fpos(): _M_off(streamoff()), _M_st(_StateT()) { }\n-\n-      // NB: The standard defines only the implicit copy ctor and the\n-      // previous two members.  The rest is a \"conforming extension\".\n-      fpos(streamoff __off, _StateT __st = _StateT())\n-      :  _M_off(__off), _M_st(__st) { }\n-\n-      operator streamoff() const { return _M_off; }\n-\n-      fpos& \n-      operator+=(streamoff __off) { _M_off += __off; return *this; }\n-\n-      fpos& \n-      operator-=(streamoff __off) { _M_off -= __off; return *this; }\n-\n-      fpos \n-      operator+(streamoff __off) \n-      { \n-\tfpos __t(*this); \n-\t__t += __off;\n-\treturn __t;\n-      }\n-\n-      fpos      \n-      operator-(streamoff __off) \n-      { \n-\tfpos __t(*this); \n-\t__t -= __off; \n-\treturn __t;\n-      }\n-\n-      bool  \n-      operator==(const fpos& __pos) const\n-      { return _M_off == __pos._M_off; }\n-\n-      bool  \n-      operator!=(const fpos& __pos) const\n-      { return !(*this == __pos); }\n-    };\n-\n-  /// 27.2, paragraph 10 about fpos/char_traits circularity\n-  typedef fpos<mbstate_t> \t\tstreampos;\n-#  ifdef _GLIBCXX_USE_WCHAR_T\n-  /// 27.2, paragraph 10 about fpos/char_traits circularity\n-  typedef fpos<mbstate_t> \t\twstreampos;\n-#  endif\n-}  // namespace std\n-\n-#endif "}, {"sha": "3f7900686dce1ebf47bb70fc87e2c1c27ab99715", "filename": "libstdc++-v3/config/os/gnu-linux/fpos.h", "status": "removed", "additions": 0, "deletions": 144, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc17fe76617d48a706bc27d96f1bcb138c1f7b8c/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Ffpos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc17fe76617d48a706bc27d96f1bcb138c1f7b8c/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Ffpos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Ffpos.h?ref=dc17fe76617d48a706bc27d96f1bcb138c1f7b8c", "patch": "@@ -1,144 +0,0 @@\n-// File position object and stream types, GNU version -*- C++ -*-\n-\n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2003 \n-// Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 27 Input/output library\n-//\n-\n-/** @file fpos.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-#ifndef _CPP_BITS_FPOS_H\n-#define _CPP_BITS_FPOS_H 1\n-\n-#pragma GCC system_header\n-\n-#include <bits/c++io.h>\n-#include <cwchar> \t// For mbstate_t.\n-\n-namespace std\n-{\n-  // 27.4.1  Types\n-\n-  // [27.4.3] template class fpos\n-  /**\n-   *  @doctodo\n-  */\n-  template<typename _StateT>\n-    class fpos\n-    {\n-    private:\n-      fpos_t\t\t_M_pos;\n-\n-    public:\n-      _StateT\n-      state() const;\n-\n-      void \n-      state(_StateT __st);\n-\n-      fpos() : _M_pos(fpos_t()) { }\n-\n-      // NB: The standard defines only the implicit copy ctor and the\n-      // previous two members.  The rest is a \"conforming extension\".\n-      fpos(streamoff __off, _StateT __st = _StateT());\n-\n-      fpos(const fpos_t& __pos) : _M_pos(__pos) { }\n-\n-      operator streamoff() const { return _M_pos.__pos; }\n-\n-      operator fpos_t() const { return _M_pos; }\n-\n-      fpos& \n-      operator+=(streamoff __off) \n-      { \n-\t_M_pos.__pos += __off; \n-\treturn *this; \n-      }\n-\n-      fpos& \n-      operator-=(streamoff __off) \n-      { \n-\t_M_pos.__pos -= __off; \n-\treturn *this; \n-      }\n-\n-      fpos \n-      operator+(streamoff __off) \n-      { \n-\tfpos __t(*this); \n-\t__t += __off;\n-\treturn __t;\n-      }\n-\n-      fpos      \n-      operator-(streamoff __off) \n-      { \n-\tfpos __t(*this); \n-\t__t -= __off; \n-\treturn __t;\n-      }\n-\n-      bool  \n-      operator==(const fpos& __pos) const\n-      { return _M_pos.__pos == __pos._M_pos.__pos; }\n-\n-      bool  \n-      operator!=(const fpos& __pos) const\n-      { return !(*this == __pos); }\n-    };\n-\n-  template<>\n-    inline mbstate_t\n-    fpos<mbstate_t>::state() const { return _M_pos.__state; }\n-\n-  template<>\n-    inline void \n-    fpos<mbstate_t>::state(mbstate_t __st) { _M_pos.__state = __st; }\n-\n-  template<>\n-    inline \n-    fpos<mbstate_t>::fpos(streamoff __off, mbstate_t __st) : _M_pos(fpos_t())\n-    { \n-      _M_pos.__pos = __off;\n-      _M_pos.__state = __st;\n-    }\n-\n-  /// 27.2, paragraph 10 about fpos/char_traits circularity\n-  typedef fpos<mbstate_t> \t\tstreampos;\n-#  ifdef _GLIBCXX_USE_WCHAR_T\n-  /// 27.2, paragraph 10 about fpos/char_traits circularity\n-  typedef fpos<mbstate_t> \t\twstreampos;\n-#  endif\n-}  // namespace std\n-\n-#endif "}, {"sha": "c888d97abcb2a880fdda41735e36b99d2524171c", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -308,7 +308,7 @@ ac_includes_default=\"\\\n # include <unistd.h>\n #endif\"\n \n-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS libtool_VERSION multi_basedir build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO AMTAR install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM AWK SET_MAKE am__leading_dot glibcxx_builddir glibcxx_srcdir toplevel_srcdir CC ac_ct_CC EXEEXT OBJEXT CXX ac_ct_CXX CFLAGS CXXFLAGS LN_S AS ac_ct_AS AR ac_ct_AR RANLIB ac_ct_RANLIB MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT LIBTOOL CXXCPP CPPFLAGS enable_shared enable_static GLIBCXX_HOSTED_TRUE GLIBCXX_HOSTED_FALSE LIBUNWIND_FLAG GLIBCXX_BUILD_PCH_TRUE GLIBCXX_BUILD_PCH_FALSE glibcxx_PCHFLAGS CSTDIO_H FPOS_H BASIC_FILE_H BASIC_FILE_CC CPP EGREP check_msgfmt glibcxx_MOFILES glibcxx_POFILES glibcxx_localedir USE_NLS CLOCALE_H CCODECVT_H CMESSAGES_H CCODECVT_CC CCOLLATE_CC CCTYPE_CC CMESSAGES_CC CMONEY_CC CNUMERIC_CC CTIME_H CTIME_CC CLOCALE_CC CLOCALE_INTERNAL_H C_INCLUDE_DIR GLIBCXX_C_HEADERS_C_TRUE GLIBCXX_C_HEADERS_C_FALSE GLIBCXX_C_HEADERS_C_STD_TRUE GLIBCXX_C_HEADERS_C_STD_FALSE GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE glibcxx_thread_h DEBUG_FLAGS GLIBCXX_BUILD_DEBUG_TRUE GLIBCXX_BUILD_DEBUG_FALSE EXTRA_CXX_FLAGS WERROR SECTION_FLAGS SECTION_LDFLAGS OPT_LDFLAGS LIBMATHOBJS SYMVER_MAP port_specific_symbol_files GLIBCXX_BUILD_VERSIONED_SHLIB_TRUE GLIBCXX_BUILD_VERSIONED_SHLIB_FALSE baseline_dir GLIBCXX_TEST_WCHAR_T_TRUE GLIBCXX_TEST_WCHAR_T_FALSE GLIBCXX_TEST_ABI_TRUE GLIBCXX_TEST_ABI_FALSE ATOMICITY_INC_SRCDIR FPOS_INC_SRCDIR OS_INC_SRCDIR glibcxx_prefixdir gxx_include_dir glibcxx_toolexecdir glibcxx_toolexeclibdir GLIBCXX_INCLUDES TOPLEVEL_INCLUDES OPTIMIZE_CXXFLAGS WARN_FLAGS LIBSUPCXX_PICFLAGS LIBOBJS LTLIBOBJS'\n+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS libtool_VERSION multi_basedir build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO AMTAR install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM AWK SET_MAKE am__leading_dot glibcxx_builddir glibcxx_srcdir toplevel_srcdir CC ac_ct_CC EXEEXT OBJEXT CXX ac_ct_CXX CFLAGS CXXFLAGS LN_S AS ac_ct_AS AR ac_ct_AR RANLIB ac_ct_RANLIB MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT LIBTOOL CXXCPP CPPFLAGS enable_shared enable_static GLIBCXX_HOSTED_TRUE GLIBCXX_HOSTED_FALSE LIBUNWIND_FLAG GLIBCXX_BUILD_PCH_TRUE GLIBCXX_BUILD_PCH_FALSE glibcxx_PCHFLAGS CSTDIO_H BASIC_FILE_H BASIC_FILE_CC CPP EGREP check_msgfmt glibcxx_MOFILES glibcxx_POFILES glibcxx_localedir USE_NLS CLOCALE_H CCODECVT_H CMESSAGES_H CCODECVT_CC CCOLLATE_CC CCTYPE_CC CMESSAGES_CC CMONEY_CC CNUMERIC_CC CTIME_H CTIME_CC CLOCALE_CC CLOCALE_INTERNAL_H C_INCLUDE_DIR GLIBCXX_C_HEADERS_C_TRUE GLIBCXX_C_HEADERS_C_FALSE GLIBCXX_C_HEADERS_C_STD_TRUE GLIBCXX_C_HEADERS_C_STD_FALSE GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE glibcxx_thread_h DEBUG_FLAGS GLIBCXX_BUILD_DEBUG_TRUE GLIBCXX_BUILD_DEBUG_FALSE EXTRA_CXX_FLAGS WERROR SECTION_FLAGS SECTION_LDFLAGS OPT_LDFLAGS LIBMATHOBJS SYMVER_MAP port_specific_symbol_files GLIBCXX_BUILD_VERSIONED_SHLIB_TRUE GLIBCXX_BUILD_VERSIONED_SHLIB_FALSE baseline_dir GLIBCXX_TEST_WCHAR_T_TRUE GLIBCXX_TEST_WCHAR_T_FALSE GLIBCXX_TEST_ABI_TRUE GLIBCXX_TEST_ABI_FALSE ATOMICITY_INC_SRCDIR OS_INC_SRCDIR glibcxx_prefixdir gxx_include_dir glibcxx_toolexecdir glibcxx_toolexeclibdir GLIBCXX_INCLUDES TOPLEVEL_INCLUDES OPTIMIZE_CXXFLAGS WARN_FLAGS LIBSUPCXX_PICFLAGS LIBOBJS LTLIBOBJS'\n ac_subst_files=''\n \n # Initialize some variables set by options.\n@@ -5059,9 +5059,6 @@ echo \"${ECHO_T}stdio\" >&6\n       ;;\n   esac\n \n-    FPOS_H=$fpos_include_dir\n-\n-\n \n \n \n@@ -61549,8 +61546,6 @@ done\n # uses it, and it only gets used in this file.)\n ATOMICITY_INC_SRCDIR=config/${atomicity_include_dir}\n OS_INC_SRCDIR=config/${os_include_dir}\n-FPOS_INC_SRCDIR=config/${fpos_include_dir}\n-\n \n \n \n@@ -62644,7 +62639,6 @@ s,@GLIBCXX_BUILD_PCH_TRUE@,$GLIBCXX_BUILD_PCH_TRUE,;t t\n s,@GLIBCXX_BUILD_PCH_FALSE@,$GLIBCXX_BUILD_PCH_FALSE,;t t\n s,@glibcxx_PCHFLAGS@,$glibcxx_PCHFLAGS,;t t\n s,@CSTDIO_H@,$CSTDIO_H,;t t\n-s,@FPOS_H@,$FPOS_H,;t t\n s,@BASIC_FILE_H@,$BASIC_FILE_H,;t t\n s,@BASIC_FILE_CC@,$BASIC_FILE_CC,;t t\n s,@CPP@,$CPP,;t t\n@@ -62694,7 +62688,6 @@ s,@GLIBCXX_TEST_WCHAR_T_FALSE@,$GLIBCXX_TEST_WCHAR_T_FALSE,;t t\n s,@GLIBCXX_TEST_ABI_TRUE@,$GLIBCXX_TEST_ABI_TRUE,;t t\n s,@GLIBCXX_TEST_ABI_FALSE@,$GLIBCXX_TEST_ABI_FALSE,;t t\n s,@ATOMICITY_INC_SRCDIR@,$ATOMICITY_INC_SRCDIR,;t t\n-s,@FPOS_INC_SRCDIR@,$FPOS_INC_SRCDIR,;t t\n s,@OS_INC_SRCDIR@,$OS_INC_SRCDIR,;t t\n s,@glibcxx_prefixdir@,$glibcxx_prefixdir,;t t\n s,@gxx_include_dir@,$gxx_include_dir,;t t"}, {"sha": "893b6f8a946ca4f488eda0f5aced83bac1e05fc8", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -261,9 +261,7 @@ GLIBCXX_CONFIGURE_TESTSUITE\n # uses it, and it only gets used in this file.)\n ATOMICITY_INC_SRCDIR=config/${atomicity_include_dir}\n OS_INC_SRCDIR=config/${os_include_dir}\n-FPOS_INC_SRCDIR=config/${fpos_include_dir}\n AC_SUBST(ATOMICITY_INC_SRCDIR)\n-AC_SUBST(FPOS_INC_SRCDIR)\n AC_SUBST(OS_INC_SRCDIR)\n \n # Determine cross-compile flags and AM_CONDITIONALs."}, {"sha": "3b800238824df0f760d85bf25b3199e1e4d8c244", "filename": "libstdc++-v3/configure.host", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.host?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -30,8 +30,6 @@\n #   abi_baseline_pair      directory name for ABI compat testing,\n #                          defaults to host_cpu-host_os (as per config.guess)\n #\n-#   fpos_include_dir       directory for definition of fpos template\n-#\n #   atomicity_include_dir  location of atomicity.h,\n #                          defaults to cpu_include_dir\n #\n@@ -59,7 +57,6 @@\n # systems out there.  :-)\n c_model=c_std\n c_compatibility=no\n-fpos_include_dir=\"os/generic\"\n \n # HOST-SPECIFIC OVERRIDES\n # Set any CPU-dependent bits.\n@@ -149,7 +146,6 @@ case \"${host_os}\" in\n     ;;\n   gnu* | linux*)\n     os_include_dir=\"os/gnu-linux\"\n-    fpos_include_dir=$os_include_dir\n     ;;\n   hpux*)\n     os_include_dir=\"os/hpux\""}, {"sha": "862b0a3a8a00996158f1802d879bd7181cb5fa09", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -118,6 +118,7 @@ bits_headers = \\\n \t${bits_srcdir}/localefwd.h \\\n \t${bits_srcdir}/mask_array.h \\\n \t${bits_srcdir}/ostream.tcc \\\n+\t${bits_srcdir}/postypes.h \\\n \t${bits_srcdir}/stream_iterator.h \\\n \t${bits_srcdir}/streambuf_iterator.h \\\n \t${bits_srcdir}/slice_array.h \\\n@@ -311,8 +312,7 @@ host_headers = \\\n \t${host_srcdir}/ctype_inline.h \\\n \t${host_srcdir}/ctype_noninline.h \\\n \t${host_srcdir}/os_defines.h \\\n-\t${glibcxx_srcdir}/$(ATOMICITY_INC_SRCDIR)/atomicity.h \\\n-\t${glibcxx_srcdir}/$(FPOS_INC_SRCDIR)/fpos.h\n+\t${glibcxx_srcdir}/$(ATOMICITY_INC_SRCDIR)/atomicity.h \n \n # Non-installed host_header files.\n host_headers_noinst = \\"}, {"sha": "1db9bfcd555fa637648bd311df10d8ae65ffad67", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated by automake 1.7.6 from Makefile.am.\n+# Makefile.in generated by automake 1.7.8 from Makefile.am.\n # @configure_input@\n \n # Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003\n@@ -80,8 +80,6 @@ ECHO_T = @ECHO_T@\n EGREP = @EGREP@\n EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n-FPOS_H = @FPOS_H@\n-FPOS_INC_SRCDIR = @FPOS_INC_SRCDIR@\n GLIBCXX_BUILD_DEBUG_FALSE = @GLIBCXX_BUILD_DEBUG_FALSE@\n GLIBCXX_BUILD_DEBUG_TRUE = @GLIBCXX_BUILD_DEBUG_TRUE@\n GLIBCXX_BUILD_PCH_FALSE = @GLIBCXX_BUILD_PCH_FALSE@\n@@ -316,6 +314,7 @@ bits_headers = \\\n \t${bits_srcdir}/localefwd.h \\\n \t${bits_srcdir}/mask_array.h \\\n \t${bits_srcdir}/ostream.tcc \\\n+\t${bits_srcdir}/postypes.h \\\n \t${bits_srcdir}/stream_iterator.h \\\n \t${bits_srcdir}/streambuf_iterator.h \\\n \t${bits_srcdir}/slice_array.h \\\n@@ -491,12 +490,12 @@ c_compatibility_headers = \\\n \t${c_compatibility_srcdir}/wchar.h \\\n \t${c_compatibility_srcdir}/wctype.h\n \n-@GLIBCXX_C_HEADERS_C_STD_FALSE@c_base_headers_extra = \n \n # Some of the different \"C\" header models need extra files.\n # Some \"C\" header schemes require the \"C\" compatibility headers.\n # For --enable-cheaders=c_std\n @GLIBCXX_C_HEADERS_C_STD_TRUE@c_base_headers_extra = ${c_base_srcdir}/cmath.tcc\n+@GLIBCXX_C_HEADERS_C_STD_FALSE@c_base_headers_extra = \n @GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE@c_compatibility_headers_extra = \n \n @GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE@c_compatibility_headers_extra = ${c_compatibility_headers}\n@@ -508,8 +507,7 @@ host_headers = \\\n \t${host_srcdir}/ctype_inline.h \\\n \t${host_srcdir}/ctype_noninline.h \\\n \t${host_srcdir}/os_defines.h \\\n-\t${glibcxx_srcdir}/$(ATOMICITY_INC_SRCDIR)/atomicity.h \\\n-\t${glibcxx_srcdir}/$(FPOS_INC_SRCDIR)/fpos.h\n+\t${glibcxx_srcdir}/$(ATOMICITY_INC_SRCDIR)/atomicity.h \n \n \n # Non-installed host_header files.\n@@ -539,10 +537,10 @@ pch_input = ${host_builddir}/stdc++.h\n pch_output_builddir = ${host_builddir}/stdc++.h.gch\n pch_source = ${glibcxx_srcdir}/include/stdc++.h\n PCHFLAGS = -Winvalid-pch -Wno-deprecated -x c++-header $(CXXFLAGS)\n-@GLIBCXX_BUILD_PCH_TRUE@pch_build = ${pch_input}\n @GLIBCXX_BUILD_PCH_FALSE@pch_build = \n-@GLIBCXX_BUILD_PCH_TRUE@pch_install = install-pch\n+@GLIBCXX_BUILD_PCH_TRUE@pch_build = ${pch_input}\n @GLIBCXX_BUILD_PCH_FALSE@pch_install = \n+@GLIBCXX_BUILD_PCH_TRUE@pch_install = install-pch\n \n # List of all timestamp files.  By keeping only one copy of this list, both\n # CLEANFILES and all-local are kept up-to-date.\n@@ -571,7 +569,8 @@ CONFIG_CLEAN_FILES =\n depcomp =\n am__depfiles_maybe =\n DIST_SOURCES =\n-DIST_COMMON = $(top_srcdir)/fragment.am Makefile.am Makefile.in\n+DIST_COMMON = $(srcdir)/Makefile.in $(top_srcdir)/fragment.am \\\n+\tMakefile.am\n all: all-am\n \n .SUFFIXES:\n@@ -654,7 +653,7 @@ clean-generic:\n \t-test -z \"$(CLEANFILES)\" || rm -f $(CLEANFILES)\n \n distclean-generic:\n-\t-rm -f Makefile $(CONFIG_CLEAN_FILES)\n+\t-rm -f $(CONFIG_CLEAN_FILES)\n \n maintainer-clean-generic:\n \t@echo \"This command is intended for maintainers to use\"\n@@ -664,7 +663,7 @@ clean: clean-am\n clean-am: clean-generic clean-libtool mostlyclean-am\n \n distclean: distclean-am\n-\n+\t-rm -f Makefile\n distclean-am: clean-am distclean-generic distclean-libtool\n \n dvi: dvi-am\n@@ -686,7 +685,7 @@ install-man:\n installcheck-am:\n \n maintainer-clean: maintainer-clean-am\n-\n+\t-rm -f Makefile\n maintainer-clean-am: distclean-am maintainer-clean-generic\n \n mostlyclean: mostlyclean-am"}, {"sha": "34479755e850b8a9825c08f46d535aa28942f6e3", "filename": "libstdc++-v3/include/bits/char_traits.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -44,7 +44,7 @@\n \n #include <cstring>            // For memmove, memset, memchr\n #include <bits/stl_algobase.h>// For copy, lexicographical_compare, fill_n\n-#include <bits/fpos.h>        // For streampos\n+#include <bits/postypes.h>    // For streampos\n \n namespace __gnu_cxx\n {"}, {"sha": "a93459a71f3477764106240fc198fbbe98cb9b36", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 32, "deletions": 20, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -106,7 +106,8 @@ namespace std\n \n \t      // 27.8.1.3,4\n \t      if ((__mode & ios_base::ate) \n-\t\t  && this->seekoff(0, ios_base::end, __mode) < 0)\n+\t\t  && this->seekoff(0, ios_base::end, __mode)\n+\t\t  == pos_type(off_type(-1)))\n \t\tthis->close();\n \t      else\n \t\t__ret = this;\n@@ -333,7 +334,7 @@ namespace std\n \t      this->gbump(-1);\n \t      __tmp = traits_type::to_int_type(*this->gptr());\n \t    }\n-\t  else if (this->seekoff(-1, ios_base::cur) >= 0)\n+\t  else if (this->seekoff(-1, ios_base::cur) != pos_type(off_type(-1)))\n \t    {\n \t      __tmp = this->underflow();\n \t      if (traits_type::eq_int_type(__tmp, __ret))\n@@ -653,7 +654,7 @@ namespace std\n \t}\n \t  \n       // Returns pos_type(off_type(-1)) in case of failure.\n-      pos_type __ret = _M_file.seekoff(__off, __way);\n+      pos_type __ret (_M_file.seekoff(__off, __way));\n \t  \n       _M_reading = false;\n       _M_writing = false;\n@@ -673,24 +674,35 @@ namespace std\n     basic_filebuf<_CharT, _Traits>::\n     imbue(const locale& __loc)\n     {\n-      const bool __testbeg = !this->seekoff(0, ios_base::cur, this->_M_mode);\n-      const bool __teststate = __check_facet(_M_codecvt).encoding() == -1;\n-\n-      if (this->_M_buf_locale != __loc \n-\t  && (!this->is_open() || (__testbeg && !__teststate)))\n+      if (this->_M_buf_locale != __loc)\n \t{\n-\t  this->_M_buf_locale = __loc;\n-\t  if (__builtin_expect(has_facet<__codecvt_type>(__loc), true))\n-\t    _M_codecvt = &use_facet<__codecvt_type>(__loc);\n-\t  else\n-\t    _M_codecvt = 0;\n-\n-\t  // NB This may require the reconversion of previously\n-\t  // converted chars. This in turn may cause the\n-\t  // reconstruction of the original file. YIKES!!  This\n-\t  // implementation interprets this requirement as requiring\n-\t  // the file position be at the beginning, and a stateless\n-\t  // encoding, or that the filebuf be closed. Opinions may differ.\n+\t  bool __testfail = false;\n+\t  if (this->is_open())\n+\t    {\n+\t      const bool __testbeg =\n+\t\tthis->seekoff(0, ios_base::cur, this->_M_mode) ==\n+\t\tpos_type(off_type(0));\n+\t      const bool __teststate =\n+\t\t__check_facet(_M_codecvt).encoding() == -1;\n+\n+\t      __testfail = !__testbeg || __teststate;\n+\t    }\n+\n+\t  if (!__testfail)\n+\t    {\n+\t      this->_M_buf_locale = __loc;\n+\t      if (__builtin_expect(has_facet<__codecvt_type>(__loc), true))\n+\t\t_M_codecvt = &use_facet<__codecvt_type>(__loc);\n+\t      else\n+\t\t_M_codecvt = 0;\n+\n+\t      // NB This may require the reconversion of previously\n+\t      // converted chars. This in turn may cause the\n+\t      // reconstruction of the original file. YIKES!!  This\n+\t      // implementation interprets this requirement as requiring\n+\t      // the file position be at the beginning, and a stateless\n+\t      // encoding, or that the filebuf be closed. Opinions may differ.\n+\t    }\n \t}\n       _M_last_overflowed = false;\t\n     }"}, {"sha": "50781ba6a50e9fb01e431a9df404b81587819795", "filename": "libstdc++-v3/include/bits/postypes.h", "status": "added", "additions": 253, "deletions": 0, "changes": 253, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpostypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpostypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpostypes.h?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -0,0 +1,253 @@\n+// Position types -*- C++ -*-\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2003 \n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 27.4.1 - Types\n+// ISO C++ 14882: 27.4.3 - Template class fpos\n+//\n+\n+/** @file postypes.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n+#ifndef _GLIBCXX_POSTYPES_H\n+#define _GLIBCXX_POSTYPES_H 1\n+\n+#pragma GCC system_header\n+\n+#include <cwchar> // For mbstate_t\n+\n+namespace std\n+{\n+  // The types streamoff, streampos and wstreampos and the class\n+  // template fpos<> are described in clauses 21.1.2, 21.1.3, 27.1.2,\n+  // 27.2, 27.4.1, 27.4.3 and D.6. Despite all this verbage, the\n+  // behaviour of these types is mostly implementation defined or\n+  // unspecified. The behaviour in this implementation is as noted\n+  // below.  \n+  typedef long  \t__streamoff_base_type;\n+  typedef ptrdiff_t\tstreamsize; // Signed integral type\n+\n+  template<typename _StateT>\n+    class fpos;\n+\n+  // Class streamoff is an implementation defined type that meets the\n+  // requirements for streamoff. It stores an offset as a signed\n+  // integer.  Note: this class is an implementation detail.\n+  class streamoff\n+  {\n+  private:\n+    __streamoff_base_type _M_off;\n+\n+  public:\n+    // Nothing in the standard requires that streamoff can be default\n+    // constructed. In this implementation a default constructor that\n+    // stores the value 0 is provided.\n+    streamoff()\n+    : _M_off(0) { }\n+\n+    // The standard only requires that streamoff can be constructed\n+    // from streamsize using the constructor syntax. This\n+    // implementation also allows implicit conversion from integer\n+    // types to streamoff.\n+    streamoff(__streamoff_base_type __off)\n+    : _M_off(__off) { }\n+\n+    // The standard requires that streamoff can be constructed from\n+    // instances of fpos using the constructor syntax, but gives no\n+    // semantics for this construction. In this implementation it\n+    // extracts the offset stored by the fpos object.\n+    // Note: In versions of GCC up to and including GCC 3.3, implicit\n+    // conversion from fpos to streamoff was allowed. This constructor\n+    // has now been made explicit to improve type safety.\n+    template<typename _StateT>\n+      explicit\n+      streamoff(const fpos<_StateT>&);\n+\n+    // The standard requires that streamsize can be constructed from\n+    // streamoff using the constructor syntax. This implementation\n+    // also allows implicit conversion. This allows streamoff objects\n+    // to be used in arithmetic expressions and to be compared against\n+    // each other and integer types.\n+    operator __streamoff_base_type() const\n+    { return _M_off; }\n+\n+    // This implementation allows the use of operators +=, -=, ++ and\n+    // -- on streamoff objects.\n+    streamoff&\n+    operator+=(__streamoff_base_type __off)\n+    {\n+      _M_off += __off;\n+      return *this;\n+    }\n+\n+    streamoff&\n+    operator-=(__streamoff_base_type __off)\n+    {\n+      _M_off -= __off;\n+      return *this;\n+    }\n+  };\n+\n+  // In clauses 21.1.3.1 and 27.4.1 streamoff is described as an\n+  // implementation defined type. In this implementation it is a\n+  // distinct class type.\n+  // Note: In versions of GCC up to and including GCC 3.3, streamoff\n+  // was typedef long.\n+  typedef class streamoff streamoff;\n+\n+  // The standard fails to place any requiremens on the template\n+  // argument StateT. In this implementation StateT must be\n+  // DefaultConstructible, CopyConstructible and Assignable.  The\n+  // standard only requires that fpos should contain a member of type\n+  // StateT. In this implementation it also contains an offset stored\n+  // as a signed integer.\n+  template<typename _StateT>\n+    class fpos\n+    {\n+    private:\n+      friend class streamoff;\n+\n+      __streamoff_base_type _M_off;\n+      _StateT _M_state;\n+\n+    public:\n+      // The standard doesn't require that fpos objects can be default\n+      // constructed. This implementation provides a default\n+      // constructor that initializes the offset to 0 and default\n+      // constructs the state.\n+      fpos()\n+      : _M_off(0), _M_state() { }\n+\n+      // The standard requires implicit conversion from integers to\n+      // fpos, but gives no meaningful semantics for this\n+      // conversion. In this implementation this constructor stores\n+      // the integer as the offset and default constructs the state.\n+      fpos(__streamoff_base_type __off)\n+      : _M_off(__off), _M_state() { }\n+\n+      // The standard requires that fpos objects can be constructed\n+      // from streamoff objects using the constructor syntax, and\n+      // fails to give any meaningful semantics. In this\n+      // implementation implicit conversion is also allowed, and this\n+      // constructor stores the streamoff as the offset and default\n+      // constructs the state.\n+      fpos(const streamoff& __off)\n+      : _M_off(__off), _M_state() { }\n+\n+      void\n+      state(_StateT __st)\n+      { _M_state = __st; }\n+\n+      _StateT\n+      state() const\n+      { return _M_state; }\n+\n+      // The standard only requires that operator== must be an\n+      // equivalence relation. In this implementation two fpos<StateT>\n+      // objects belong to the same equivalence class if the contained\n+      // offsets compare equal.\n+      bool\n+      operator==(const fpos& __other) const\n+      { return _M_off == __other._M_off; }\n+\n+      bool\n+      operator!=(const fpos& __other) const\n+      { return _M_off != __other._M_off; }\n+\n+      // The standard requires that this operator must be defined, but\n+      // gives no semantics. In this implemenation it just adds it's\n+      // argument to the stored offset and returns *this.\n+      fpos&\n+      operator+=(const streamoff& __off)\n+      {\n+\t_M_off += __off;\n+\treturn *this;\n+      }\n+\n+      // The standard requires that this operator must be defined, but\n+      // gives no semantics. In this implemenation it just subtracts\n+      // it's argument from the stored offset and returns *this.\n+      fpos&\n+      operator-=(const streamoff& __off)\n+      {\n+\t_M_off -= __off;\n+\treturn *this;\n+      }\n+\n+      // The standard requires that this operator must be defined, but\n+      // defines it's semantics only in terms of operator-. In this\n+      // implementation it constructs a copy of *this, adds the\n+      // argument to that copy using operator+= and then returns the\n+      // copy.\n+      fpos\n+      operator+(const streamoff& __off) const\n+      {\n+\tfpos __pos(*this);\n+\t__pos += __off;\n+\treturn __pos;\n+      }\n+\n+      // The standard requires that this operator must be defined, but\n+      // defines it's semantics only in terms of operator+. In this\n+      // implementation it constructs a copy of *this, subtracts the\n+      // argument from that copy using operator-= and then returns the\n+      // copy.\n+      fpos\n+      operator-(const streamoff& __off) const\n+      {\n+\tfpos __pos(*this);\n+\t__pos -= __off;\n+\treturn __pos;\n+      }\n+\n+      // The standard requires that this operator must be defined, but\n+      // defines it's semantics only in terms of operator+. In this\n+      // implementation it returns the difference between the offset\n+      // stored in *this and in the argument.\n+      streamoff\n+      operator-(const fpos& __other) const\n+      { return _M_off - __other._M_off; }\n+    };\n+\n+  template<typename _StateT>\n+    inline\n+    streamoff::streamoff(const fpos<_StateT>& __pos)\n+    : _M_off(__pos._M_off) { }\n+\n+  // Clauses 21.1.3.1 and 21.1.3.2 describe streampos and wstreampos\n+  // as implementation defined types, but clause 27.2 requires that\n+  // they must both be typedefs for fpos<mbstate_t>\n+  typedef fpos<mbstate_t> streampos;\n+  typedef fpos<mbstate_t> wstreampos;\n+} // namespace std\n+\n+#endif"}, {"sha": "dfa1d6810bd3131cc9f5e29d0dcdb950ee5ace50", "filename": "libstdc++-v3/include/bits/sstream.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -185,7 +185,7 @@ namespace std\n       \n       if (_M_string.capacity())\n \t{\n-\t  off_type __pos = __sp; // Use streamoff operator to do conversion.\n+\t  off_type __pos (__sp);\n \t  const bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;\n \t  const bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;\n \t  char_type* __beg = __testin ? this->eback() : this->pbase();"}, {"sha": "050b9e8bab727b1886aab9bb6083baa6fe0d9d5b", "filename": "libstdc++-v3/include/std/std_iosfwd.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iosfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iosfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iosfwd.h?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -44,9 +44,10 @@\n \n #include <bits/c++config.h>\n #include <bits/c++locale.h> \n+#include <bits/c++io.h> \n #include <cctype>\t\t// For isspace, etc.\n #include <bits/stringfwd.h> \t// For string forward declarations.\n-#include <bits/fpos.h>\n+#include <bits/postypes.h>\n #include <bits/functexcept.h>\n \n namespace std "}, {"sha": "bef5cf7329bee6c4dbec80fa2dc2f2b608c9d289", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/char/1-in.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F1-in.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F1-in.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F1-in.cc?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -65,7 +65,7 @@ void test05()\n     strmsz_1 = fb.in_avail(); \n     pt_1 = fb.pubseekoff(2, ios_base::beg);\n     strmsz_2 = fb.in_avail(); \n-    off_1 = pt_1;\n+    off_1 = off_type(pt_1);\n     VERIFY( off_1 > 0 );\n     c1 = fb.snextc(); //current in pointer +1\n     VERIFY( c1 == '9' );\n@@ -81,7 +81,7 @@ void test05()\n \n     //cur\n     pt_2 = fb.pubseekoff(2, ios_base::cur);\n-    off_2 = pt_2;\n+    off_2 = off_type(pt_2);\n     VERIFY( (off_2 == (off_1 + 2 + 1 + 1)) );\n     c1 = fb.snextc(); //current in pointer +1\n     VERIFY( c1 == '1' );\n@@ -98,7 +98,7 @@ void test05()\n \n     //end\n     pt_2 = fb.pubseekoff(0, ios_base::end);\n-    off_1 = pt_2;\n+    off_1 = off_type(pt_2);\n     VERIFY( off_1 > off_2 ); //weak, but don't know exactly where it ends\n     c3 = fb.sputc('\\n');\n     strmsz_1 = fb.sputn(\"because because because. . .\", 28);  "}, {"sha": "b6a8c0cb67d18711fdc84bd8343fdff6406dabfb", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/char/1-io.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F1-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F1-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F1-io.cc?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -65,7 +65,7 @@ void test05()\n     strmsz_1 = fb.in_avail(); \n     pt_1 = fb.pubseekoff(2, ios_base::beg);\n     strmsz_2 = fb.in_avail(); \n-    off_1 = pt_1;\n+    off_1 = off_type(pt_1);\n     VERIFY( off_1 > 0 );\n     c1 = fb.snextc(); //current in pointer +1\n     VERIFY( c1 == '9' );\n@@ -81,7 +81,7 @@ void test05()\n \n     //cur\n     pt_2 = fb.pubseekoff(2, ios_base::cur);\n-    off_2 = pt_2;\n+    off_2 = off_type(pt_2);\n     VERIFY( (off_2 == (off_1 + 2 + 1 + 1)) );\n     c1 = fb.snextc(); //current in pointer +1\n     VERIFY( c1 == '1' );\n@@ -96,7 +96,7 @@ void test05()\n \n     //end\n     pt_2 = fb.pubseekoff(0, ios_base::end);\n-    off_1 = pt_2;\n+    off_1 = off_type(pt_2);\n     VERIFY( off_1 > off_2 ); //weak, but don't know exactly where it ends\n     c3 = fb.sputc('\\n');\n     strmsz_1 = fb.sputn(\"because because because. . .\", 28);  "}, {"sha": "1cd29316acdcf43858792e39e4dd965da30f39be", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/char/1-out.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F1-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F1-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F1-out.cc?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -66,7 +66,7 @@ void test05()\n     strmsz_1 = fb.in_avail(); \n     pt_1 = fb.pubseekoff(2, ios_base::beg);\n     strmsz_2 = fb.in_avail(); \n-    off_1 = pt_1;\n+    off_1 = off_type(pt_1);\n     VERIFY( off_1 > 0 );\n     c1 = fb.snextc(); //current in pointer +1\n     VERIFY( c1 == traits_type::eof() );\n@@ -82,7 +82,7 @@ void test05()\n \n     //cur\n     pt_2 = fb.pubseekoff(2, ios_base::cur);\n-    off_2 = pt_2;\n+    off_2 = off_type(pt_2);\n     VERIFY( (off_2 == (off_1 + 2 + 1 + 1)) );\n     c1 = fb.snextc(); //current in pointer +1\n     VERIFY( c1 == traits_type::eof() );\n@@ -97,7 +97,7 @@ void test05()\n \n     //end\n     pt_2 = fb.pubseekoff(0, ios_base::end);\n-    off_1 = pt_2;\n+    off_1 = off_type(pt_2);\n     VERIFY( off_1 > off_2 ); //weak, but don't know exactly where it ends\n     c3 = fb.sputc('\\n');\n     strmsz_1 = fb.sputn(\"because because because. . .\", 28);  "}, {"sha": "dccebbc77f951361469602e19e7874b02509e169", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/char/11543.cc", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F11543.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F11543.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F11543.cc?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -0,0 +1,152 @@\n+// Copyright (C) 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+struct MyState\n+{\n+};\n+\n+struct MyCharTraits : std::char_traits<char>\n+{\n+  typedef std::fpos<MyState> pos_type;\n+  typedef MyState state_type;\n+};\n+\n+namespace std\n+{\n+  template <>\n+    class codecvt<char, char, MyState> :\n+      public locale::facet, public codecvt_base\n+    {\n+    public:\n+      typedef char intern_type;\n+      typedef char extern_type;\n+      typedef MyState state_type;\n+    \n+      explicit codecvt(size_t refs = 0)\n+      : locale::facet(refs) { }\n+    \n+      result out(state_type& state, const intern_type* from,\n+\t\t const intern_type* from_end,  const intern_type*& from_next,\n+\t\t extern_type* to, extern_type* to_limit,\n+\t\t extern_type*& to_next) const\n+      { return do_out(state, from, from_end, from_next,\n+\t\t      to, to_limit, to_next); }\n+\n+      result unshift(state_type& state, extern_type* to, extern_type* to_limit,\n+\t\t     extern_type*& to_next) const\n+      { return do_unshift(state, to, to_limit, to_next); }\n+\n+      result in(state_type& state, const extern_type* from,\n+\t\tconst extern_type* from_end, const extern_type*& from_next,\n+\t\tintern_type* to, intern_type* to_limit,\n+\t\tintern_type*& to_next) const\n+      { return do_in(state, from, from_end, from_next,\n+\t\t     to, to_limit, to_next); }\n+\n+      int encoding() const throw()\n+      { return do_encoding(); }\n+      \n+      bool always_noconv() const throw()\n+      { return do_always_noconv(); }\n+\n+      int length(state_type& state, const extern_type* from,\n+\t\t const extern_type* end, size_t max) const\n+      { return do_length(state, from, end, max); }\n+\n+      int max_length() const throw()\n+      { return do_max_length(); }\n+    \n+      static locale::id id;\n+    \n+    protected:\n+      virtual ~codecvt();\n+\n+      virtual result do_out(state_type&, const intern_type* from,\n+\t\t\t    const intern_type*, const intern_type*& from_next,\n+\t\t\t    extern_type* to, extern_type*,\n+\t\t\t    extern_type*& to_next) const\n+      {\n+\tfrom_next = from;\n+\tto_next = to;\n+\treturn noconv;\n+      }\n+\n+      virtual result do_in(state_type&, const extern_type* from,\n+\t\t\t   const extern_type*, const extern_type*& from_next,\n+\t\t\t   intern_type* to, intern_type*,\n+\t\t\t   intern_type*& to_next) const\n+      {\n+\tfrom_next = from;\n+\tto_next = to;\n+\treturn noconv;\n+      }\n+\n+      virtual result do_unshift(state_type&, extern_type*, extern_type*,\n+\t\t\t\textern_type*&) const\n+      { return noconv; }\n+\n+      virtual int do_encoding() const throw()\n+      { return 1; }\n+\n+      virtual bool do_always_noconv() const throw()\n+      { return true; }\n+\n+      virtual int do_length(state_type&, const extern_type* from,\n+\t\t\t    const extern_type* end, size_t max) const\n+      {\n+\tsize_t len = end - from;\n+\treturn std::min(max, len);\n+      }\n+\n+      virtual int do_max_length() const throw()\n+      { return 1; }\n+    };\n+  \n+  locale::id codecvt<char, char, MyState>::id;\n+\n+  codecvt<char, char, MyState>::~codecvt()\n+  { }\n+}\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::locale loc(std::locale::classic(),\n+\t\t  new std::codecvt<char, char, MyState>);\n+  std::basic_filebuf<char, MyCharTraits> fb;\n+  fb.pubimbue(loc);\n+  fb.open(\"tmp_11543\", std::ios_base::out);\n+  VERIFY( fb.is_open() );\n+  MyCharTraits::pos_type pos = fb.pubseekoff(0, std::ios_base::beg);\n+  VERIFY( pos != MyCharTraits::pos_type(MyCharTraits::off_type(-1)) );\n+  fb.close();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "96ac5821a714702abe1f442815b3f9cc157e229a", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/char/2-in.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F2-in.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F2-in.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F2-in.cc?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -66,7 +66,7 @@ void test05()\n     strmsz_1 = fb.in_avail(); \n     pt_1 = fb.pubseekoff(2, ios_base::beg);\n     strmsz_2 = fb.in_avail(); \n-    off_1 = pt_1;\n+    off_1 = off_type(pt_1);\n     VERIFY( off_1 > 0 );\n     c1 = fb.snextc(); //current in pointer +1\n     VERIFY( c1 == '9' );\n@@ -82,7 +82,7 @@ void test05()\n \n     //cur\n     pt_2 = fb.pubseekoff(2, ios_base::cur);\n-    off_2 = pt_2;\n+    off_2 = off_type(pt_2);\n     VERIFY( (off_2 == (off_1 + 2 + 1 + 1)) );\n     c1 = fb.snextc(); //current in pointer +1\n     VERIFY( c1 == '1' );\n@@ -99,7 +99,7 @@ void test05()\n \n     //end\n     pt_2 = fb.pubseekoff(0, ios_base::end);\n-    off_1 = pt_2;\n+    off_1 = off_type(pt_2);\n     VERIFY( off_1 > off_2 ); //weak, but don't know exactly where it ends\n     c3 = fb.sputc('\\n');\n     strmsz_1 = fb.sputn(\"because because because. . .\", 28);  "}, {"sha": "f636bbbeffd68c58f6956db8b9cbb49d9d941bdc", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/char/2-io.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F2-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F2-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F2-io.cc?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -65,7 +65,7 @@ void test05()\n     strmsz_1 = fb.in_avail(); \n     pt_1 = fb.pubseekoff(2, ios_base::beg);\n     strmsz_2 = fb.in_avail(); \n-    off_1 = pt_1;\n+    off_1 = off_type(pt_1);\n     VERIFY( off_1 > 0 );\n     c1 = fb.snextc(); //current in pointer +1\n     VERIFY( c1 == '9' );\n@@ -81,7 +81,7 @@ void test05()\n \n     //cur\n     pt_2 = fb.pubseekoff(2, ios_base::cur);\n-    off_2 = pt_2;\n+    off_2 = off_type(pt_2);\n     VERIFY( (off_2 == (off_1 + 2 + 1 + 1)) );\n     c1 = fb.snextc(); //current in pointer +1\n     VERIFY( c1 == '1' );\n@@ -96,7 +96,7 @@ void test05()\n \n     //end\n     pt_2 = fb.pubseekoff(0, ios_base::end);\n-    off_1 = pt_2;\n+    off_1 = off_type(pt_2);\n     VERIFY( off_1 > off_2 ); //weak, but don't know exactly where it ends\n     c3 = fb.sputc('\\n');\n     strmsz_1 = fb.sputn(\"because because because. . .\", 28);  "}, {"sha": "2f78957444ef917e6538e2158fcb2e3903bb7316", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/char/2-out.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F2-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F2-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F2-out.cc?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -66,7 +66,7 @@ void test05()\n     strmsz_1 = fb.in_avail(); \n     pt_1 = fb.pubseekoff(2, ios_base::beg);\n     strmsz_2 = fb.in_avail(); \n-    off_1 = pt_1;\n+    off_1 = off_type(pt_1);\n     VERIFY( off_1 > 0 );\n     c1 = fb.snextc(); //current in pointer +1\n     VERIFY( c1 == traits_type::eof() );\n@@ -82,7 +82,7 @@ void test05()\n \n     //cur\n     pt_2 = fb.pubseekoff(2, ios_base::cur);\n-    off_2 = pt_2;\n+    off_2 = off_type(pt_2);\n     VERIFY( (off_2 == (off_1 + 2 + 1 + 1)) );\n     c1 = fb.snextc(); //current in pointer +1\n     VERIFY( c1 == traits_type::eof() );\n@@ -97,7 +97,7 @@ void test05()\n \n     //end\n     pt_2 = fb.pubseekoff(0, ios_base::end);\n-    off_1 = pt_2;\n+    off_1 = off_type(pt_2);\n     VERIFY( off_1 > off_2 ); //weak, but don't know exactly where it ends\n     c3 = fb.sputc('\\n');\n     strmsz_1 = fb.sputn(\"because because because. . .\", 28);  "}, {"sha": "9684fe30cead16c790d4ad7ac65564204256b582", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/wchar_t/11543.cc", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fwchar_t%2F11543.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fwchar_t%2F11543.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fwchar_t%2F11543.cc?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -0,0 +1,142 @@\n+// Copyright (C) 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+struct MyState\n+{\n+};\n+\n+struct MyCharTraits : std::char_traits<wchar_t>\n+{\n+  typedef std::fpos<MyState> pos_type;\n+  typedef MyState state_type;\n+};\n+\n+namespace std\n+{\n+  template <>\n+    class codecvt<wchar_t, char, MyState> :\n+      public locale::facet, public codecvt_base\n+    {\n+    public:\n+      typedef wchar_t intern_type;\n+      typedef char extern_type;\n+      typedef MyState state_type;\n+    \n+      explicit codecvt(size_t refs = 0)\n+      : locale::facet(refs) { }\n+    \n+      result out(state_type& state, const intern_type* from,\n+\t\t const intern_type* from_end,  const intern_type*& from_next,\n+\t\t extern_type* to, extern_type* to_limit,\n+\t\t extern_type*& to_next) const\n+      { return do_out(state, from, from_end, from_next,\n+\t\t      to, to_limit, to_next); }\n+\n+      result unshift(state_type& state, extern_type* to, extern_type* to_limit,\n+\t\t     extern_type*& to_next) const\n+      { return do_unshift(state, to, to_limit, to_next); }\n+\n+      result in(state_type& state, const extern_type* from,\n+\t\tconst extern_type* from_end, const extern_type*& from_next,\n+\t\tintern_type* to, intern_type* to_limit,\n+\t\tintern_type*& to_next) const\n+      { return do_in(state, from, from_end, from_next,\n+\t\t     to, to_limit, to_next); }\n+\n+      int encoding() const throw()\n+      { return do_encoding(); }\n+      \n+      bool always_noconv() const throw()\n+      { return do_always_noconv(); }\n+\n+      int length(state_type& state, const extern_type* from,\n+\t\t const extern_type* end, size_t max) const\n+      { return do_length(state, from, end, max); }\n+\n+      int max_length() const throw()\n+      { return do_max_length(); }\n+    \n+      static locale::id id;\n+    \n+    protected:\n+      virtual ~codecvt();\n+\n+      virtual result do_out(state_type&, const intern_type*,\n+\t\t\t    const intern_type*, const intern_type*&,\n+\t\t\t    extern_type*, extern_type*, extern_type*&) const\n+      { return error; }\n+\n+      virtual result do_in(state_type&, const extern_type*, const extern_type*,\n+\t\t\t   const extern_type*&, intern_type*, intern_type*,\n+\t\t\t   intern_type*&) const\n+      { return error; }\n+\n+      virtual result do_unshift(state_type&, extern_type*, extern_type*,\n+\t\t\t\textern_type*&) const\n+      { return noconv; }\n+\n+      virtual int do_encoding() const throw()\n+      { return 1; }\n+\n+      virtual bool do_always_noconv() const throw()\n+      { return false; }\n+\n+      virtual int do_length(state_type&, const extern_type* from,\n+\t\t\t    const extern_type* end, size_t max) const\n+      {\n+\tsize_t len = end - from;\n+\treturn std::min(max, len);\n+      }\n+\n+      virtual int do_max_length() const throw()\n+      { return 1; }\n+    };\n+  \n+  locale::id codecvt<wchar_t, char, MyState>::id;\n+\n+  codecvt<wchar_t, char, MyState>::~codecvt()\n+  { }\n+}\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::locale loc(std::locale::classic(),\n+\t\t  new std::codecvt<wchar_t, char, MyState>);\n+  std::basic_filebuf<wchar_t, MyCharTraits> fb;\n+  fb.pubimbue(loc);\n+  fb.open(\"tmp_11543\", std::ios_base::out);\n+  VERIFY( fb.is_open() );\n+  MyCharTraits::pos_type pos = fb.pubseekoff(0, std::ios_base::beg);\n+  VERIFY( pos != MyCharTraits::pos_type(MyCharTraits::off_type(-1)) );\n+  fb.close();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "bf7756b7a1c090de02da2d6e5d272948efadb459", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/char/1-in.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F1-in.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F1-in.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F1-in.cc?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -63,7 +63,7 @@ void test05()\n \n     // beg\n     pt_1 = fb.pubseekoff(78, ios_base::beg);\n-    off_1 = pt_1;\n+    off_1 = off_type(pt_1);\n     VERIFY( off_1 > 0 );\n     c1 = fb.snextc(); //current in pointer +1\n     VERIFY( c1 == 't' );\n@@ -77,15 +77,15 @@ void test05()\n     c3 = fb.sgetc();\n     fb.pubsync(); //resets pointers\n     pt_2 = fb.pubseekpos(pt_1);\n-    off_2 = pt_2;\n+    off_2 = off_type(pt_2);\n     VERIFY( off_1 == off_2 );\n     c3 = fb.snextc(); //current in pointer +1\n     VERIFY( c2 == traits_type::eof() );\n     VERIFY( c2 != c3 );\n \n     // end\n     pt_1 = fb.pubseekoff(0, ios_base::end);\n-    off_1 = pt_1;\n+    off_1 = off_type(pt_1);\n     VERIFY( off_1 > off_2 );\n     fb.sputn(\"\\nof the wonderful things he does!!\\nok\", 37);\n     fb.pubsync();"}, {"sha": "eea3be8108fbfc5b2f7e465f234ff604fd10f98a", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/char/1-io.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F1-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F1-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F1-io.cc?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -63,7 +63,7 @@ void test05()\n \n     // beg\n     pt_1 = fb.pubseekoff(78, ios_base::beg);\n-    off_1 = pt_1;\n+    off_1 = off_type(pt_1);\n     VERIFY( off_1 > 0 );\n     c1 = fb.snextc(); //current in pointer +1\n     VERIFY( c1 == 't' );\n@@ -77,14 +77,14 @@ void test05()\n     c3 = fb.sgetc();\n     fb.pubsync(); //resets pointers\n     pt_2 = fb.pubseekpos(pt_1);\n-    off_2 = pt_2;\n+    off_2 = off_type(pt_2);\n     VERIFY( off_1 == off_2 );\n     c3 = fb.snextc(); //current in pointer +1\n     VERIFY( c2 == c3 );\n \n     // end\n     pt_1 = fb.pubseekoff(0, ios_base::end);\n-    off_1 = pt_1;\n+    off_1 = off_type(pt_1);\n     VERIFY( off_1 > off_2 );\n     fb.sputn(\"\\nof the wonderful things he does!!\\nok\", 37);\n     fb.pubsync();"}, {"sha": "cc29a27204d889b380b2f2b6f7bdd1428ee8f191", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/char/1-out.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F1-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F1-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F1-out.cc?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -64,7 +64,7 @@ void test05()\n \n     // beg\n     pt_1 = fb.pubseekoff(78, ios_base::beg);\n-    off_1 = pt_1;\n+    off_1 = off_type(pt_1);\n     VERIFY( off_1 > 0 );\n     c1 = fb.snextc(); //current in pointer +1\n     VERIFY( c1 == traits_type::eof() );\n@@ -78,15 +78,15 @@ void test05()\n     c3 = fb.sgetc();\n     fb.pubsync(); //resets pointers\n     pt_2 = fb.pubseekpos(pt_1);\n-    off_2 = pt_2;\n+    off_2 = off_type(pt_2);\n     VERIFY( off_1 == off_2 );\n     c3 = fb.snextc(); //current in pointer +1\n     VERIFY( c2 != c3 );\n     VERIFY( c3 == traits_type::eof() );\n \n     // end\n     pt_1 = fb.pubseekoff(0, ios_base::end);\n-    off_1 = pt_1;\n+    off_1 = off_type(pt_1);\n     VERIFY( off_1 > off_2 );\n     fb.sputn(\"\\nof the wonderful things he does!!\\nok\", 37);\n     fb.pubsync();"}, {"sha": "4bead04ca9b8c1a60800222d4be5113ce48cad1b", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/char/2-in.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F2-in.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F2-in.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F2-in.cc?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -64,7 +64,7 @@ void test05()\n \n     // beg\n     pt_1 = fb.pubseekoff(78, ios_base::beg);\n-    off_1 = pt_1;\n+    off_1 = off_type(pt_1);\n     VERIFY( off_1 > 0 );\n     c1 = fb.snextc(); //current in pointer +1\n     VERIFY( c1 == 't' );\n@@ -78,15 +78,15 @@ void test05()\n     c3 = fb.sgetc();\n     fb.pubsync(); //resets pointers\n     pt_2 = fb.pubseekpos(pt_1);\n-    off_2 = pt_2;\n+    off_2 = off_type(pt_2);\n     VERIFY( off_1 == off_2 );\n     c3 = fb.snextc(); //current in pointer +1\n     VERIFY( c2 == traits_type::eof() );\n     VERIFY( c2 != c3 );\n \n     // end\n     pt_1 = fb.pubseekoff(0, ios_base::end);\n-    off_1 = pt_1;\n+    off_1 = off_type(pt_1);\n     VERIFY( off_1 > off_2 );\n     fb.sputn(\"\\nof the wonderful things he does!!\\nok\", 37);\n     fb.pubsync();"}, {"sha": "73fb8b55ff62879bcfe72bcfd0358043dc701c65", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/char/2-io.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F2-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F2-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F2-io.cc?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -63,7 +63,7 @@ void test05()\n \n     // beg\n     pt_1 = fb.pubseekoff(78, ios_base::beg);\n-    off_1 = pt_1;\n+    off_1 = off_type(pt_1);\n     VERIFY( off_1 > 0 );\n     c1 = fb.snextc(); //current in pointer +1\n     VERIFY( c1 == 't' );\n@@ -77,14 +77,14 @@ void test05()\n     c3 = fb.sgetc();\n     fb.pubsync(); //resets pointers\n     pt_2 = fb.pubseekpos(pt_1);\n-    off_2 = pt_2;\n+    off_2 = off_type(pt_2);\n     VERIFY( off_1 == off_2 );\n     c3 = fb.snextc(); //current in pointer +1\n     VERIFY( c2 == c3 );\n \n     // end\n     pt_1 = fb.pubseekoff(0, ios_base::end);\n-    off_1 = pt_1;\n+    off_1 = off_type(pt_1);\n     VERIFY( off_1 > off_2 );\n     fb.sputn(\"\\nof the wonderful things he does!!\\nok\", 37);\n     fb.pubsync();"}, {"sha": "df145735df2b3c1e9b0a887bda28f3e273bccc03", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/char/2-out.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F2-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F2-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F2-out.cc?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -64,7 +64,7 @@ void test05()\n \n     // beg\n     pt_1 = fb.pubseekoff(78, ios_base::beg);\n-    off_1 = pt_1;\n+    off_1 = off_type(pt_1);\n     VERIFY( off_1 > 0 );\n     c1 = fb.snextc(); //current in pointer +1\n     VERIFY( c1 == traits_type::eof() );\n@@ -78,15 +78,15 @@ void test05()\n     c3 = fb.sgetc();\n     fb.pubsync(); //resets pointers\n     pt_2 = fb.pubseekpos(pt_1);\n-    off_2 = pt_2;\n+    off_2 = off_type(pt_2);\n     VERIFY( off_1 == off_2 );\n     c3 = fb.snextc(); //current in pointer +1\n     VERIFY( c2 != c3 );\n     VERIFY( c3 == traits_type::eof() );\n \n     // end\n     pt_1 = fb.pubseekoff(0, ios_base::end);\n-    off_1 = pt_1;\n+    off_1 = off_type(pt_1);\n     VERIFY( off_1 > off_2 );\n     fb.sputn(\"\\nof the wonderful things he does!!\\nok\", 37);\n     fb.pubsync();"}, {"sha": "33cb81276a0c141dceca388760e1991df6b7e787", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/seekg/char/2.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fseekg%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fseekg%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fseekg%2Fchar%2F2.cc?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -36,7 +36,8 @@ void test01()\n   int count1 = ist.gcount();\n   ist.seekg(pos);\n   int count2 = ist.gcount();\n-  ist.seekg(pos, ios::beg);\n+  VERIFY( count1 == count2 );\n+  ist.seekg(ios::off_type(pos), ios::beg);\n   count2 = ist.gcount();\n   VERIFY( count1 == count2 );\n }"}, {"sha": "08e5afbce51af37f2eda05a049c07a162d85c149", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/seekoff/char/1.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekoff%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekoff%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekoff%2Fchar%2F1.cc?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -63,7 +63,7 @@ void test04()\n   //IN|OUT\n   //beg\n   pt_1 = strb_01.pubseekoff(2, std::ios_base::beg);\n-  off_1 = pt_1;\n+  off_1 = off_type(pt_1);\n   VERIFY( off_1 >= 0 );\n   c1 = strb_01.snextc(); //current in pointer +1\n   VERIFY( c1 == 'o' );\n@@ -72,12 +72,12 @@ void test04()\n   VERIFY( strb_01.str() == str_tmp );\n   //cur\n   pt_1 = strb_01.pubseekoff(2, std::ios_base::cur);\n-  off_1 = pt_1;\n+  off_1 = off_type(pt_1);\n   VERIFY( off_1 == -1 ); // can't seekoff for in and out + cur in sstreams\n   pt_1 = strb_01.pubseekoff(2, std::ios_base::cur, std::ios_base::in);\n-  off_1 = pt_1;\n+  off_1 = off_type(pt_1);\n   pt_2 = strb_01.pubseekoff(2, std::ios_base::cur, std::ios_base::in);\n-  off_2 = pt_2;\n+  off_2 = off_type(pt_2);\n   VERIFY( off_2 == off_1 + 2 );\n   c1 = strb_01.snextc(); //current in pointer + 1\n   VERIFY( c1 == ' ' );\n@@ -86,7 +86,7 @@ void test04()\n   VERIFY( strb_01.str() == str_tmp );\n   //end\n   pt_2 = strb_01.pubseekoff(2, std::ios_base::end);\n-  off_1 = pt_2;\n+  off_1 = off_type(pt_2);\n   VERIFY( off_1 == -1 ); // not a valid position\n   VERIFY( strb_01.str() == str_tmp );\n   // end part two (from the filebuf tests)"}, {"sha": "c84dbcd47a77e9942d9c8a2b9d5f9567322fae71", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/seekpos/char/1.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekpos%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekpos%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekpos%2Fchar%2F1.cc?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -63,18 +63,18 @@ void test04()\n   //IN|OUT\n   //beg\n   pt_1 = strb_01.pubseekoff(2, std::ios_base::beg);\n-  off_1 = pt_1;\n+  off_1 = off_type(pt_1);\n   VERIFY( off_1 >= 0 );\n   pt_1 = strb_01.pubseekoff(0, std::ios_base::cur, std::ios_base::out);\n-  off_1 = pt_1;\n+  off_1 = off_type(pt_1);\n   c1 = strb_01.snextc(); //current in pointer +1\n   VERIFY( c1 == 'o' );\n   c2 = strb_01.sputc('x');  //test current out pointer\n   str_tmp = std::string(\"myxonos. . . or what?\");\n   VERIFY( strb_01.str() == str_tmp );\n   strb_01.pubsync(); //resets pointers\n   pt_2 = strb_01.pubseekpos(pt_1, std::ios_base::in|std::ios_base::out);\n-  off_2 = pt_2;\n+  off_2 = off_type(pt_2);\n   VERIFY( off_1 == off_2 );\n   c3 = strb_01.snextc(); //current in pointer +1\n   VERIFY( c1 == c3 );"}, {"sha": "18e8765d838c568ab0c81aa1a65f8935a1a4f236", "filename": "libstdc++-v3/testsuite/27_io/fpos/11450.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F11450.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F11450.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F11450.cc?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -0,0 +1,43 @@\n+// Copyright (C) 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.4.3 fpos\n+\n+#include <ios>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/11450\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;  \n+\n+  std::fpos<int> p;\n+  VERIFY( p.state() == 0 );\n+  p.state(42);\n+  VERIFY( p.state() == 42 );\n+\n+  std::fpos<int> q = p + static_cast<std::streamoff>(1);\n+  VERIFY( q.state() == 42 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "908d58018b474e369acca8fb95ec5d9a3dd01ee6", "filename": "libstdc++-v3/testsuite/27_io/fpos/mbstate_t/12065.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2Fmbstate_t%2F12065.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2Fmbstate_t%2F12065.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2Fmbstate_t%2F12065.cc?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -0,0 +1,47 @@\n+// Copyright (C) 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.4.3 fpos\n+\n+#include <typeinfo>\n+#include <ios>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/12065\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::streampos p(0);\n+  const std::streampos q(0);\n+  std::streamoff o(0);\n+\n+  VERIFY( typeid(p + o) == typeid(std::streampos) );\n+  VERIFY( typeid(q + o) == typeid(std::streampos) );\n+  VERIFY( typeid(p - o) == typeid(std::streampos) );\n+  VERIFY( typeid(q - o) == typeid(std::streampos) );\n+  VERIFY( typeid(p - q) == typeid(std::streamoff) );\n+  VERIFY( typeid(q - p) == typeid(std::streamoff) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "0458bb6a039ded1cb595dde15ba675af883f7c39", "filename": "libstdc++-v3/testsuite/27_io/fpos/mbstate_t/3.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2Fmbstate_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2Fmbstate_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2Fmbstate_t%2F3.cc?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -41,9 +41,8 @@ void test03()\n   std::streamoff off01;\n   \n   // casts to const streamoff\n-  // (yes, I know this is weak code)\n   const std::streampos pos01 = 0;\n-  off01 = pos01;\n+  off01 = std::streamoff(pos01);\n \n   // equality/inequality with const args\n   const std::streampos pos02(54);"}, {"sha": "ace81eb2669734dddcd00717a16872771c1fe5e0", "filename": "libstdc++-v3/testsuite/27_io/fpos/mbstate_t/4_neg.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2Fmbstate_t%2F4_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2Fmbstate_t%2F4_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2Fmbstate_t%2F4_neg.cc?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -0,0 +1,42 @@\n+// Copyright (C) 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.4.3 fpos\n+\n+// { dg-do compile }\n+\n+#include <ios>\n+\n+void test04()\n+{\n+  std::streampos pos;\n+  long n;\n+\n+  // Implicit conversion\n+  n = pos; // { dg-error \"cannot convert\" }\n+\n+  // Explicit conversion\n+  n = static_cast<long>(pos); // { dg-error \"invalid static_cast\" }\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}"}, {"sha": "ff55907eef0ed6c1e0687d766c53a63e94a2d5cb", "filename": "libstdc++-v3/testsuite/27_io/objects/char/10.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F10.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F10.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F10.cc?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -50,7 +50,7 @@ void test10()\n   streamoff n = p2 - p1;\n   VERIFY( n > 0 );\n \t\n-  for (streamoff i = 0; i < n; ++i)\n+  for (int i = 0; i < n; ++i)\n     {\n       streampos p3 = cin.tellg();\n       VERIFY( streamoff(p3) == i );"}, {"sha": "40ea32b63994c1dc69c130596a41dffa71a718af", "filename": "libstdc++-v3/testsuite/27_io/types/3.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ftypes%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4809c175d40cfe30020c00e31959147005b411/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ftypes%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ftypes%2F3.cc?ref=4c4809c175d40cfe30020c00e31959147005b411", "patch": "@@ -0,0 +1,50 @@\n+// Copyright (C) 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.4.3  streamoff\n+\n+#include <ios>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+void check(std::streamsize n)\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  VERIFY( std::streamsize(std::streamoff(n)) == n );\n+}\n+\n+void test03()\n+{\n+  check(0);\n+  check(-1);\n+  check(1);\n+  check(std::numeric_limits<std::streamsize>::min());\n+  check(std::numeric_limits<std::streamsize>::min() + 1);\n+  check(std::numeric_limits<std::streamsize>::min() / 2);\n+  check(std::numeric_limits<std::streamsize>::max());\n+  check(std::numeric_limits<std::streamsize>::max() - 1);\n+  check(std::numeric_limits<std::streamsize>::max() / 2);\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}]}