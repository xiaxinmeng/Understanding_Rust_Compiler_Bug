{"sha": "c7137fcc7cbc1f1f14f9fed75adcc6bd8f1d418c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzcxMzdmY2M3Y2JjMWYxZjE0ZjlmZWQ3NWFkY2M2YmQ4ZjFkNDE4Yw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-29T13:55:39Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-29T13:55:39Z"}, "message": "rs6000: Fix rs6000_atomic_assign_expand_fenv [PR94826]\n\nThis is the rs6000 version of the earlier committed x86, aarch64 and arm\nfixes, as create_tmp_var_raw is used because the C FE can call this outside\nof function context, we need to make sure the first references to those\nVAR_DECLs are through a TARGET_EXPR, so that it gets gimple_add_tmp_var\nmarked in whatever function it gets expanded in.  Without that DECL_CONTEXT\nis NULL and the vars aren't added as local decls of the containing function.\n\n2020-04-29  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/94826\n\t* config/rs6000/rs6000.c (rs6000_atomic_assign_expand_fenv): Use\n\tTARGET_EXPR instead of MODIFY_EXPR for first assignment to\n\tfenv_var, fenv_clear and old_fenv variables.  For fenv_addr\n\ttake address of TARGET_EXPR of fenv_var with void_node initializer.\n\tFormatting fixes.", "tree": {"sha": "26182eb998ac9a22e72e252a5216b2252cf843f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26182eb998ac9a22e72e252a5216b2252cf843f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7137fcc7cbc1f1f14f9fed75adcc6bd8f1d418c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7137fcc7cbc1f1f14f9fed75adcc6bd8f1d418c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7137fcc7cbc1f1f14f9fed75adcc6bd8f1d418c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7137fcc7cbc1f1f14f9fed75adcc6bd8f1d418c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1657178f59bf0c5b269a668bcdcc432fac3bbdd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1657178f59bf0c5b269a668bcdcc432fac3bbdd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1657178f59bf0c5b269a668bcdcc432fac3bbdd0"}], "stats": {"total": 38, "additions": 26, "deletions": 12}, "files": [{"sha": "80064da83ce756432b38c2be19cb17dc94684909", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7137fcc7cbc1f1f14f9fed75adcc6bd8f1d418c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7137fcc7cbc1f1f14f9fed75adcc6bd8f1d418c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c7137fcc7cbc1f1f14f9fed75adcc6bd8f1d418c", "patch": "@@ -1,3 +1,12 @@\n+2020-04-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/94826\n+\t* config/rs6000/rs6000.c (rs6000_atomic_assign_expand_fenv): Use\n+\tTARGET_EXPR instead of MODIFY_EXPR for first assignment to\n+\tfenv_var, fenv_clear and old_fenv variables.  For fenv_addr\n+\ttake address of TARGET_EXPR of fenv_var with void_node initializer.\n+\tFormatting fixes.\n+\n 2020-04-29  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n \n \tPR tree-optimization/94774"}, {"sha": "017e7704366f59d760f26d212fdba3168b9f88c7", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7137fcc7cbc1f1f14f9fed75adcc6bd8f1d418c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7137fcc7cbc1f1f14f9fed75adcc6bd8f1d418c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c7137fcc7cbc1f1f14f9fed75adcc6bd8f1d418c", "patch": "@@ -26012,7 +26012,9 @@ rs6000_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n \n       tree fenv_var = create_tmp_var_raw (double_type_node);\n       TREE_ADDRESSABLE (fenv_var) = 1;\n-      tree fenv_addr = build1 (ADDR_EXPR, double_ptr_type_node, fenv_var);\n+      tree fenv_addr = build1 (ADDR_EXPR, double_ptr_type_node,\n+\t\t\t       build4 (TARGET_EXPR, double_type_node, fenv_var,\n+\t\t\t\t       void_node, NULL_TREE, NULL_TREE));\n \n       *hold = build_call_expr (atomic_hold_decl, 1, fenv_addr);\n       *clear = build_call_expr (atomic_clear_decl, 0);\n@@ -26035,12 +26037,13 @@ rs6000_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n \n   /* Mask to clear everything except for the rounding modes and non-IEEE\n      arithmetic flag.  */\n-  const unsigned HOST_WIDE_INT hold_exception_mask =\n-    HOST_WIDE_INT_C (0xffffffff00000007);\n+  const unsigned HOST_WIDE_INT hold_exception_mask\n+    = HOST_WIDE_INT_C (0xffffffff00000007);\n \n   tree fenv_var = create_tmp_var_raw (double_type_node);\n \n-  tree hold_mffs = build2 (MODIFY_EXPR, void_type_node, fenv_var, call_mffs);\n+  tree hold_mffs = build4 (TARGET_EXPR, double_type_node, fenv_var, call_mffs,\n+\t\t\t   NULL_TREE, NULL_TREE);\n \n   tree fenv_llu = build1 (VIEW_CONVERT_EXPR, uint64_type_node, fenv_var);\n   tree fenv_llu_and = build2 (BIT_AND_EXPR, uint64_type_node, fenv_llu,\n@@ -26064,12 +26067,13 @@ rs6000_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n \n   /* Mask to clear everything except for the rounding modes and non-IEEE\n      arithmetic flag.  */\n-  const unsigned HOST_WIDE_INT clear_exception_mask =\n-    HOST_WIDE_INT_C (0xffffffff00000000);\n+  const unsigned HOST_WIDE_INT clear_exception_mask\n+    = HOST_WIDE_INT_C (0xffffffff00000000);\n \n   tree fenv_clear = create_tmp_var_raw (double_type_node);\n \n-  tree clear_mffs = build2 (MODIFY_EXPR, void_type_node, fenv_clear, call_mffs);\n+  tree clear_mffs = build4 (TARGET_EXPR, double_type_node, fenv_clear,\n+\t\t\t    call_mffs, NULL_TREE, NULL_TREE);\n \n   tree fenv_clean_llu = build1 (VIEW_CONVERT_EXPR, uint64_type_node, fenv_clear);\n   tree fenv_clear_llu_and = build2 (BIT_AND_EXPR, uint64_type_node,\n@@ -26094,13 +26098,14 @@ rs6000_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n                                 (*(uint64_t*)fenv_var 0x1ff80fff);\n      __builtin_mtfsf (0xff, fenv_update);  */\n \n-  const unsigned HOST_WIDE_INT update_exception_mask =\n-    HOST_WIDE_INT_C (0xffffffff1fffff00);\n-  const unsigned HOST_WIDE_INT new_exception_mask =\n-    HOST_WIDE_INT_C (0x1ff80fff);\n+  const unsigned HOST_WIDE_INT update_exception_mask\n+    = HOST_WIDE_INT_C (0xffffffff1fffff00);\n+  const unsigned HOST_WIDE_INT new_exception_mask\n+    = HOST_WIDE_INT_C (0x1ff80fff);\n \n   tree old_fenv = create_tmp_var_raw (double_type_node);\n-  tree update_mffs = build2 (MODIFY_EXPR, void_type_node, old_fenv, call_mffs);\n+  tree update_mffs = build4 (TARGET_EXPR, double_type_node, old_fenv,\n+\t\t\t     call_mffs, NULL_TREE, NULL_TREE);\n \n   tree old_llu = build1 (VIEW_CONVERT_EXPR, uint64_type_node, old_fenv);\n   tree old_llu_and = build2 (BIT_AND_EXPR, uint64_type_node, old_llu,"}]}