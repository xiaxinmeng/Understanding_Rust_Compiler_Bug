{"sha": "3c4774e08c6f61917d4743fbc78d4c553a666c12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M0Nzc0ZTA4YzZmNjE5MTdkNDc0M2ZiYzc4ZDRjNTUzYTY2NmMxMg==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@st.com", "date": "2005-11-22T22:57:35Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2005-11-22T22:57:35Z"}, "message": "Preparatory work for PR target/21623:\n\n\t* alpha.c (secondary_reload_class): Rename to:\n\t(alpha_secondary_reload_class).\n\t* alpha.h, alpha-protos.h: Likewise.\n\t* mn10300.c (secondary_reload_class): Rename to:\n\t(mn10300_secondary_reload_class).\n\t* mn10300.h, mn10300-protos.h: Likewise.\n\t* pa.c (secondary_reload_class): Rename to:\n\t(pa_secondary_reload_class).\n\t* pa.h, pa-protos.h: Likewise.\n\t* rs6000.c (secondary_reload_class): Rename to:\n\trs6000_secondary_reload_class.\n\t* rs6000.h, rs6000-protos.h: Likewise.\n\nFrom-SVN: r107381", "tree": {"sha": "b0760a3b1c64e0c178b27c0d814620d8f1c89979", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0760a3b1c64e0c178b27c0d814620d8f1c89979"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c4774e08c6f61917d4743fbc78d4c553a666c12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c4774e08c6f61917d4743fbc78d4c553a666c12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c4774e08c6f61917d4743fbc78d4c553a666c12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c4774e08c6f61917d4743fbc78d4c553a666c12/comments", "author": null, "committer": null, "parents": [{"sha": "73e5b024f8319702a462d3b9760347a89c68e75b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73e5b024f8319702a462d3b9760347a89c68e75b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73e5b024f8319702a462d3b9760347a89c68e75b"}], "stats": {"total": 60, "additions": 39, "deletions": 21}, "files": [{"sha": "d4789389e1ba16834d4c6ba2e01d3ca6aed5fa77", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c4774e08c6f61917d4743fbc78d4c553a666c12/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c4774e08c6f61917d4743fbc78d4c553a666c12/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c4774e08c6f61917d4743fbc78d4c553a666c12", "patch": "@@ -1,3 +1,19 @@\n+2005-11-22  J\"orn Rennecke <joern.rennecke@st.com>\n+\n+\tPreparatory work for PR target/21623:\n+\t* alpha.c (secondary_reload_class): Rename to:\n+\t(alpha_secondary_reload_class).\n+\t* alpha.h, alpha-protos.h: Likewise.\n+\t* mn10300.c (secondary_reload_class): Rename to:\n+\t(mn10300_secondary_reload_class).\n+\t* mn10300.h, mn10300-protos.h: Likewise.\n+\t* pa.c (secondary_reload_class): Rename to:\n+\t(pa_secondary_reload_class).\n+\t* pa.h, pa-protos.h: Likewise.\n+\t* rs6000.c (secondary_reload_class): Rename to:\n+\trs6000_secondary_reload_class.\n+\t* rs6000.h, rs6000-protos.h: Likewise.\n+\n 2005-11-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR middle-end/22561"}, {"sha": "f6b237a1c0f1e86488feb5c788121503d5967c91", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c4774e08c6f61917d4743fbc78d4c553a666c12/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c4774e08c6f61917d4743fbc78d4c553a666c12/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=3c4774e08c6f61917d4743fbc78d4c553a666c12", "patch": "@@ -53,8 +53,9 @@ extern rtx split_small_symbolic_operand (rtx);\n extern void get_aligned_mem (rtx, rtx *, rtx *);\n extern rtx get_unaligned_address (rtx, int);\n extern enum reg_class alpha_preferred_reload_class (rtx, enum reg_class);\n-extern enum reg_class secondary_reload_class (enum reg_class,\n-\t\t\t\t\t      enum machine_mode, rtx, int);\n+extern enum reg_class alpha_secondary_reload_class (enum reg_class,\n+\t\t\t\t\t\t    enum machine_mode, rtx,\n+\t\t\t\t\t\t    int);\n \n extern void alpha_set_memflags (rtx, rtx);\n extern bool alpha_split_const_mov (enum machine_mode, rtx *);"}, {"sha": "840a933da8a8dac617cf9093cdc22efdf55f722f", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c4774e08c6f61917d4743fbc78d4c553a666c12/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c4774e08c6f61917d4743fbc78d4c553a666c12/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=3c4774e08c6f61917d4743fbc78d4c553a666c12", "patch": "@@ -1597,7 +1597,7 @@ alpha_preferred_reload_class(rtx x, enum reg_class class)\n    from register elimination into a DImode fp register.  */\n \n enum reg_class\n-secondary_reload_class (enum reg_class class, enum machine_mode mode,\n+alpha_secondary_reload_class (enum reg_class class, enum machine_mode mode,\n \t\t\trtx x, int in)\n {\n   if ((mode == QImode || mode == HImode) && ! TARGET_BWX)"}, {"sha": "ed02c9f3e8ede630b404a736f5bdb5f374400898", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c4774e08c6f61917d4743fbc78d4c553a666c12/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c4774e08c6f61917d4743fbc78d4c553a666c12/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=3c4774e08c6f61917d4743fbc78d4c553a666c12", "patch": "@@ -672,10 +672,10 @@ enum reg_class {\n    FP register.  */\n \n #define SECONDARY_INPUT_RELOAD_CLASS(CLASS,MODE,IN) \\\n-  secondary_reload_class((CLASS), (MODE), (IN), 1)\n+  alpha_secondary_reload_class((CLASS), (MODE), (IN), 1)\n \n #define SECONDARY_OUTPUT_RELOAD_CLASS(CLASS,MODE,OUT) \\\n-  secondary_reload_class((CLASS), (MODE), (OUT), 0)\n+  alpha_secondary_reload_class((CLASS), (MODE), (OUT), 0)\n \n /* If we are copying between general and FP registers, we need a memory\n    location unless the FIX extension is available.  */"}, {"sha": "1566ccc5b8a418630e3f824feb055cf56a808683", "filename": "gcc/config/mn10300/mn10300-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c4774e08c6f61917d4743fbc78d4c553a666c12/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c4774e08c6f61917d4743fbc78d4c553a666c12/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h?ref=3c4774e08c6f61917d4743fbc78d4c553a666c12", "patch": "@@ -36,8 +36,8 @@ extern void mn10300_print_reg_list (FILE *, int);\n extern int mn10300_get_live_callee_saved_regs (void);\n extern void mn10300_gen_multiple_store (int);\n extern void notice_update_cc (rtx, rtx);\n-extern enum reg_class secondary_reload_class (enum reg_class,\n-\t\t\t\t\t      enum machine_mode, rtx);\n+extern enum reg_class mn10300_secondary_reload_class (enum reg_class,\n+\t\t\t\t\t\t      enum machine_mode, rtx);\n extern const char *output_tst (rtx, rtx);\n extern int store_multiple_operation (rtx, enum machine_mode);\n extern int symbolic_operand (rtx, enum machine_mode);"}, {"sha": "f63d77846db5b99d74e3f6ff479abe4b4cf6d226", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c4774e08c6f61917d4743fbc78d4c553a666c12/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c4774e08c6f61917d4743fbc78d4c553a666c12/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=3c4774e08c6f61917d4743fbc78d4c553a666c12", "patch": "@@ -1337,7 +1337,8 @@ store_multiple_operation (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n \n    We might be able to simplify this.  */\n enum reg_class\n-secondary_reload_class (enum reg_class class, enum machine_mode mode, rtx in)\n+mn10300_secondary_reload_class (enum reg_class class, enum machine_mode mode,\n+\t\t\t\trtx in)\n {\n   /* Memory loads less than a full word wide can't have an\n      address or stack pointer destination.  They must use"}, {"sha": "84dd106f994569a06304b536a4ab4a3d9be1f379", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c4774e08c6f61917d4743fbc78d4c553a666c12/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c4774e08c6f61917d4743fbc78d4c553a666c12/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=3c4774e08c6f61917d4743fbc78d4c553a666c12", "patch": "@@ -425,7 +425,7 @@ enum reg_class {\n   (!TARGET_AM33 && (MODE == QImode || MODE == HImode) ? DATA_REGS : CLASS)\n \n #define SECONDARY_RELOAD_CLASS(CLASS,MODE,IN) \\\n-  secondary_reload_class(CLASS,MODE,IN)\n+  mn10300_secondary_reload_class(CLASS,MODE,IN)\n \n /* Return the maximum number of consecutive registers\n    needed to represent mode MODE in a register of class CLASS.  */"}, {"sha": "d0daf72f6bac697707aace95d2dd587ca46a66b8", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c4774e08c6f61917d4743fbc78d4c553a666c12/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c4774e08c6f61917d4743fbc78d4c553a666c12/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=3c4774e08c6f61917d4743fbc78d4c553a666c12", "patch": "@@ -106,8 +106,8 @@ extern int emit_move_sequence (rtx *, enum machine_mode, rtx);\n extern int emit_hpdiv_const (rtx *, int);\n extern int is_function_label_plus_const (rtx);\n extern int jump_in_call_delay (rtx);\n-extern enum reg_class secondary_reload_class (enum reg_class,\n-\t\t\t\t\t      enum machine_mode, rtx);\n+extern enum reg_class pa_secondary_reload_class (enum reg_class,\n+\t\t\t\t\t\t enum machine_mode, rtx);\n extern int hppa_fpstore_bypass_p (rtx, rtx);\n extern int attr_length_millicode_call (rtx);\n extern int attr_length_call (rtx, int);"}, {"sha": "0eeb163ea58ccc223a7c9fba89865da047479ea5", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c4774e08c6f61917d4743fbc78d4c553a666c12/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c4774e08c6f61917d4743fbc78d4c553a666c12/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=3c4774e08c6f61917d4743fbc78d4c553a666c12", "patch": "@@ -5576,7 +5576,7 @@ output_arg_descriptor (rtx call_insn)\n    It might be worthwhile to try and make this a leaf function too.  */\n \n enum reg_class\n-secondary_reload_class (enum reg_class class, enum machine_mode mode, rtx in)\n+pa_secondary_reload_class (enum reg_class class, enum machine_mode mode, rtx in)\n {\n   int regno, is_symbolic;\n \n@@ -5589,7 +5589,7 @@ secondary_reload_class (enum reg_class class, enum machine_mode mode, rtx in)\n     return R1_REGS;\n \n   /* Profiling showed the PA port spends about 1.3% of its compilation\n-     time in true_regnum from calls inside secondary_reload_class.  */\n+     time in true_regnum from calls inside pa_secondary_reload_class.  */\n \n   if (GET_CODE (in) == REG)\n     {\n@@ -5628,7 +5628,7 @@ secondary_reload_class (enum reg_class class, enum machine_mode mode, rtx in)\n     in = XEXP (in, 0);\n \n   /* Profiling has showed GCC spends about 2.6% of its compilation\n-     time in symbolic_operand from calls inside secondary_reload_class.\n+     time in symbolic_operand from calls inside pa_secondary_reload_class.\n \n      We use an inline copy and only compute its return value once to avoid\n      useless work.  */"}, {"sha": "17870385cf5d09b48e6123df42ce3b10752e28e7", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c4774e08c6f61917d4743fbc78d4c553a666c12/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c4774e08c6f61917d4743fbc78d4c553a666c12/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=3c4774e08c6f61917d4743fbc78d4c553a666c12", "patch": "@@ -535,7 +535,7 @@ extern struct rtx_def *hppa_pic_save_rtx (void);\n #define SECONDARY_RELOAD_CLASS(CLASS,MODE,IN) \\\n   ((CLASS == BASE_REG_CLASS && GET_CODE (IN) == REG\t\t\\\n     && REGNO (IN) < FIRST_PSEUDO_REGISTER)\t\t\t\\\n-   ? NO_REGS : secondary_reload_class (CLASS, MODE, IN))\n+   ? NO_REGS : pa_secondary_reload_class (CLASS, MODE, IN))\n \n #define MAYBE_FP_REG_CLASS_P(CLASS) \\\n   reg_classes_intersect_p ((CLASS), FP_REGS)"}, {"sha": "fe04d81f43e2fa22a3316b038c2337982e46267d", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c4774e08c6f61917d4743fbc78d4c553a666c12/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c4774e08c6f61917d4743fbc78d4c553a666c12/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=3c4774e08c6f61917d4743fbc78d4c553a666c12", "patch": "@@ -64,8 +64,8 @@ extern int insvdi_rshift_rlwimi_p (rtx, rtx, rtx);\n extern int registers_ok_for_quad_peep (rtx, rtx);\n extern int mems_ok_for_quad_peep (rtx, rtx);\n extern bool gpr_or_gpr_p (rtx, rtx);\n-extern enum reg_class secondary_reload_class (enum reg_class,\n-\t\t\t\t\t      enum machine_mode, rtx);\n+extern enum reg_class rs6000_secondary_reload_class (enum reg_class,\n+\t\t\t\t\t\t     enum machine_mode, rtx);\n extern int ccr_bit (rtx, int);\n extern int extract_MB (rtx);\n extern int extract_ME (rtx);"}, {"sha": "11ce9eea3c00b24439ff4abf5acd87dd6341d64c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c4774e08c6f61917d4743fbc78d4c553a666c12/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c4774e08c6f61917d4743fbc78d4c553a666c12/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=3c4774e08c6f61917d4743fbc78d4c553a666c12", "patch": "@@ -9761,9 +9761,9 @@ mems_ok_for_quad_peep (rtx mem1, rtx mem2)\n    NO_REGS is returned.  */\n \n enum reg_class\n-secondary_reload_class (enum reg_class class,\n-\t\t\tenum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t\trtx in)\n+rs6000_secondary_reload_class (enum reg_class class,\n+\t\t\t       enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\t       rtx in)\n {\n   int regno;\n "}, {"sha": "8dc2d02301004e5ff09083467f40d3428d176c8c", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c4774e08c6f61917d4743fbc78d4c553a666c12/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c4774e08c6f61917d4743fbc78d4c553a666c12/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=3c4774e08c6f61917d4743fbc78d4c553a666c12", "patch": "@@ -1187,7 +1187,7 @@ enum reg_class\n    NO_REGS is returned.  */\n \n #define SECONDARY_RELOAD_CLASS(CLASS,MODE,IN) \\\n-  secondary_reload_class (CLASS, MODE, IN)\n+  rs6000_secondary_reload_class (CLASS, MODE, IN)\n \n /* If we are copying between FP or AltiVec registers and anything\n    else, we need a memory location.  */"}]}