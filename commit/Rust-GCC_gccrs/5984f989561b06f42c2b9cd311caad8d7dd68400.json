{"sha": "5984f989561b06f42c2b9cd311caad8d7dd68400", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk4NGY5ODk1NjFiMDZmNDJjMmI5Y2QzMTFjYWFkOGQ3ZGQ2ODQwMA==", "commit": {"author": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2005-04-27T07:30:36Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2005-04-27T07:30:36Z"}, "message": "[multiple changes]\n\n2005-04-27  Michael Koch  <konqueror@gmx.de>\n\n\t* java/nio/charset/Charset.java (providers2): Renamed from 'providers'\n\tto work around CNI limitation.\n\n2005-04-27  Sven de Marothy  <sven@physto.se>\n\n\t* java/nio/charset/Charset.java:\n\t(defaultCharset()): New method.\n\tStatus updated to 1.5\n\n2005-04-27  Sven de Marothy  <sven@physto.se>\n\n\t* java/nio/charset/Charset.java: Cached encoders shouldn't be static.\n\n2005-04-27  Sven de Marothy  <sven@physto.se>\n\n\t* java/nio/charset/Charset.java: Reset cached de/encoders.\n\n2005-04-27  Robert Schuster <thebohemian@gmx.net>\n\n\t* java/nio/charset/Charset.java (forName): Throws\n\tIllegalArgumentException when argument is null\n\tand added documentation.\n\n2005-04-27  Ito Kazumitsu  <kaz@maczuka.gcd.org>\n\n\t* java/nio/charset/Charset.java (providers):\n\tNew method to make an array of CharsetProviders defined in\n\tMETA-INF/services/java.nio.charset.spi.CharsetProvider.\n\t(charsetForName, availableCharsets): Use the\n\tnew method providers().\n\nFrom-SVN: r98816", "tree": {"sha": "2230e265e2fee37824170f078c70e23e4b6b2340", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2230e265e2fee37824170f078c70e23e4b6b2340"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5984f989561b06f42c2b9cd311caad8d7dd68400", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5984f989561b06f42c2b9cd311caad8d7dd68400", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5984f989561b06f42c2b9cd311caad8d7dd68400", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5984f989561b06f42c2b9cd311caad8d7dd68400/comments", "author": null, "committer": null, "parents": [{"sha": "fbf5558065bc2bd017d5d44864bacdaa68686081", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbf5558065bc2bd017d5d44864bacdaa68686081", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbf5558065bc2bd017d5d44864bacdaa68686081"}], "stats": {"total": 139, "additions": 116, "deletions": 23}, "files": [{"sha": "871eae93ba4377b0ed9f30151b4a8ec098346047", "filename": "libjava/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5984f989561b06f42c2b9cd311caad8d7dd68400/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5984f989561b06f42c2b9cd311caad8d7dd68400/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=5984f989561b06f42c2b9cd311caad8d7dd68400", "patch": "@@ -1,3 +1,36 @@\n+2005-04-27  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/nio/charset/Charset.java (providers2): Renamed from 'providers'\n+\tto work around CNI limitation.\n+\n+2005-04-27  Sven de Marothy  <sven@physto.se>\n+\n+\t* java/nio/charset/Charset.java:\n+\t(defaultCharset()): New method.\n+\tStatus updated to 1.5\n+\n+2005-04-27  Sven de Marothy  <sven@physto.se>\n+\n+\t* java/nio/charset/Charset.java: Cached encoders shouldn't be static.\n+\n+2005-04-27  Sven de Marothy  <sven@physto.se>\n+\n+\t* java/nio/charset/Charset.java: Reset cached de/encoders.\n+\n+2005-04-27  Robert Schuster <thebohemian@gmx.net>\n+\n+\t* java/nio/charset/Charset.java (forName): Throws\n+\tIllegalArgumentException when argument is null\n+\tand added documentation.\n+\n+2005-04-27  Ito Kazumitsu  <kaz@maczuka.gcd.org>\n+\n+\t* java/nio/charset/Charset.java (providers):\n+\tNew method to make an array of CharsetProviders defined in\n+\tMETA-INF/services/java.nio.charset.spi.CharsetProvider.\n+\t(charsetForName, availableCharsets): Use the\n+\tnew method providers().\n+\n 2005-04-26  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/InetAddress.java: Made all hexadecimal numbers lowercase."}, {"sha": "703d0232fbcb2e7b03f7b7f17dd72aa863886bde", "filename": "libjava/java/nio/charset/Charset.java", "status": "modified", "additions": 83, "deletions": 23, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5984f989561b06f42c2b9cd311caad8d7dd68400/libjava%2Fjava%2Fnio%2Fcharset%2FCharset.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5984f989561b06f42c2b9cd311caad8d7dd68400/libjava%2Fjava%2Fnio%2Fcharset%2FCharset.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fcharset%2FCharset.java?ref=5984f989561b06f42c2b9cd311caad8d7dd68400", "patch": "@@ -40,12 +40,17 @@\n \n import gnu.java.nio.charset.Provider;\n \n+import java.io.BufferedReader;\n+import java.io.InputStreamReader;\n+import java.net.URL;\n import java.nio.ByteBuffer;\n import java.nio.CharBuffer;\n import java.nio.charset.spi.CharsetProvider;\n import java.util.Collections;\n+import java.util.Enumeration;\n import java.util.HashSet;\n import java.util.Iterator;\n+import java.util.LinkedHashSet;\n import java.util.Locale;\n import java.util.Set;\n import java.util.SortedMap;\n@@ -57,18 +62,14 @@\n  */\n public abstract class Charset implements Comparable\n {\n-  private static CharsetEncoder cachedEncoder;\n-  private static CharsetDecoder cachedDecoder;\n+  private CharsetEncoder cachedEncoder;\n+  private CharsetDecoder cachedDecoder;\n  \n-  static\n-  {\n-    synchronized (Charset.class)\n-      {\n-        cachedEncoder = null;\n-        cachedDecoder = null;\n-      }\n-  }\n-\n+  /**\n+   * Charset providers.\n+   */\n+  private static CharsetProvider[] providers;\n+  \n   private final String canonicalName;\n   private final String[] aliases;\n   \n@@ -82,6 +83,8 @@ protected Charset (String canonicalName, String[] aliases)\n             checkName (aliases[i]);\n       }\n \n+    cachedEncoder = null;\n+    cachedDecoder = null;\n     this.canonicalName = canonicalName;\n     this.aliases = aliases;\n   }\n@@ -138,8 +141,6 @@ public static Charset forName (String charsetName)\n     Charset cs = charsetForName (charsetName);\n     if (cs == null)\n       throw new UnsupportedCharsetException (charsetName);\n-    cachedDecoder = null;\n-    cachedEncoder = null;\n     return cs;\n   }\n \n@@ -154,30 +155,88 @@ public static Charset forName (String charsetName)\n   private static Charset charsetForName(String charsetName)\n   {\n     checkName (charsetName);\n-    return provider ().charsetForName (charsetName);\n+    Charset cs = null;\n+    CharsetProvider[] providers = providers2();\n+    for (int i = 0; i < providers.length; i++)\n+      {\n+        cs = providers[i].charsetForName(charsetName);\n+        if (cs != null)\n+\t  break;\n+      }\n+    return cs;\n   }\n \n   public static SortedMap availableCharsets()\n   {\n     TreeMap charsets = new TreeMap(String.CASE_INSENSITIVE_ORDER);\n \n-    for (Iterator i = provider ().charsets (); i.hasNext (); )\n+    CharsetProvider[] providers = providers2();\n+    for (int j = 0; j < providers.length; j++)\n       {\n-        Charset cs = (Charset) i.next ();\n-        charsets.put (cs.name (), cs);\n+        for (Iterator i = providers[j].charsets(); i.hasNext(); )\n+          {\n+            Charset cs = (Charset) i.next();\n+            charsets.put(cs.name(), cs);\n+          }\n       }\n \n     return Collections.unmodifiableSortedMap(charsets);\n   }\n \n-  // XXX: we need to support multiple providers, reading them from\n-  // java.nio.charset.spi.CharsetProvider in the resource directory\n-  // META-INF/services\n   private static CharsetProvider provider()\n   {\n+      try {\n+\t  String s = System.getProperty(\"charset.provider\");\n+\t  if(s != null){\n+\t      CharsetProvider p =\n+\t\t  (CharsetProvider) ((Class.forName(s)).newInstance());\n+\t      return p;\n+\t      }\n+\t  } catch(Exception e){}\n     return Provider.provider();\n   }\n \n+  /**\n+   * We need to support multiple providers, reading them from\n+   * java.nio.charset.spi.CharsetProvider in the resource directory\n+   * META-INF/services.\n+   */\n+  private static CharsetProvider[] providers2()\n+  {\n+    if (providers == null)\n+      {\n+        try\n+          {\n+            Enumeration en = ClassLoader.getSystemResources\n+\t      (\"META-INF/services/java.nio.charset.spi.CharsetProvider\");\n+            LinkedHashSet set = new LinkedHashSet();\n+            set.add(provider());\n+            while (en.hasMoreElements())\n+              {\n+                BufferedReader rdr = new BufferedReader(new InputStreamReader\n+                  (((URL) (en.nextElement())).openStream()));\n+                while (true)\n+                  {\n+                    String s = rdr.readLine();\n+                    if (s == null)\n+\t\t      break;\n+                    CharsetProvider p =\n+\t\t      (CharsetProvider) ((Class.forName(s)).newInstance());\n+                    set.add(p);\n+                  }\n+               }\n+\n+            providers = new CharsetProvider[set.size()];\n+            set.toArray(providers);\n+          }\n+        catch (Exception e)\n+          {\n+            throw new RuntimeException(e);\n+          }\n+      }\n+    return providers;\n+  }\n+\n   public final String name ()\n   {\n     return canonicalName;\n@@ -238,8 +297,8 @@ public final ByteBuffer encode (CharBuffer cb)\n                 cachedEncoder = newEncoder ()\n                   .onMalformedInput (CodingErrorAction.REPLACE)\n                   .onUnmappableCharacter (CodingErrorAction.REPLACE);\n-              }\n-\n+              } else\n+ \t        cachedEncoder.reset();\n             return cachedEncoder.encode (cb);\n           }\n       }\n@@ -269,7 +328,8 @@ public final CharBuffer decode (ByteBuffer bb)\n                 cachedDecoder = newDecoder ()\n                   .onMalformedInput (CodingErrorAction.REPLACE)\n                   .onUnmappableCharacter (CodingErrorAction.REPLACE);\n-              }\n+              } else\n+ \t        cachedDecoder.reset();\n \n             return cachedDecoder.decode (bb);\n           }"}]}