{"sha": "30de16328a546dd06011235d86ef573dc2ffba6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBkZTE2MzI4YTU0NmRkMDYwMTEyMzVkODZlZjU3M2RjMmZmYmE2ZQ==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2009-08-12T14:32:31Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2009-08-12T14:32:31Z"}, "message": "Prepare expressions to be good phi arguments.\n\n2009-08-11  Sebastian Pop  <sebastian.pop@amd.com>\n\n\tPR middle-end/40980\n\t* sese.c (convert_for_phi_arg): New.\n\t(add_guard_exit_phis): Use convert_for_phi_arg.\n\n\t* testsuite/gfortran.dg/graphite/id-17.f: New.\n\nFrom-SVN: r150694", "tree": {"sha": "283fef24a62d6d0e162a392a4ac2a0c78b3137b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/283fef24a62d6d0e162a392a4ac2a0c78b3137b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30de16328a546dd06011235d86ef573dc2ffba6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30de16328a546dd06011235d86ef573dc2ffba6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30de16328a546dd06011235d86ef573dc2ffba6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30de16328a546dd06011235d86ef573dc2ffba6e/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c31ebfa3a8b00106ebad9658b526d41aaa5cf19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c31ebfa3a8b00106ebad9658b526d41aaa5cf19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c31ebfa3a8b00106ebad9658b526d41aaa5cf19"}], "stats": {"total": 85, "additions": 66, "deletions": 19}, "files": [{"sha": "bf7518ea8a7fc7a31a8e16a559c49dca3d93be04", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30de16328a546dd06011235d86ef573dc2ffba6e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30de16328a546dd06011235d86ef573dc2ffba6e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30de16328a546dd06011235d86ef573dc2ffba6e", "patch": "@@ -1,3 +1,9 @@\n+2009-08-12  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR middle-end/40980\n+\t* sese.c (convert_for_phi_arg): New.\n+\t(add_guard_exit_phis): Use convert_for_phi_arg.\n+\n 2009-08-12  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-sese-to-poly.c (pdr_add_data_dimensions): Dont add"}, {"sha": "1a0e3fa15542916a285ff14d487cc38ffc16f16d", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30de16328a546dd06011235d86ef573dc2ffba6e/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30de16328a546dd06011235d86ef573dc2ffba6e/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=30de16328a546dd06011235d86ef573dc2ffba6e", "patch": "@@ -1,3 +1,11 @@\n+2009-08-11  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR middle-end/40980\n+\t* sese.c (convert_for_phi_arg): New.\n+\t(add_guard_exit_phis): Use convert_for_phi_arg.\n+\n+\t* testsuite/gfortran.dg/graphite/id-17.f: New.\n+\n 2009-08-11  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-sese-to-poly.c (pdr_add_data_dimensions): Dont add"}, {"sha": "394d465f098732e63a5946043b4a63788e0bfcf1", "filename": "gcc/sese.c", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30de16328a546dd06011235d86ef573dc2ffba6e/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30de16328a546dd06011235d86ef573dc2ffba6e/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=30de16328a546dd06011235d86ef573dc2ffba6e", "patch": "@@ -1085,6 +1085,31 @@ default_before_guard (htab_t before_guard, tree old_name)\n   return res;\n }\n \n+/* Prepares EXPR to be a good phi argument when the phi result is\n+   RES.  Insert needed statements on edge E.  */\n+\n+static tree\n+convert_for_phi_arg (tree expr, tree res, edge e)\n+{\n+  tree type = TREE_TYPE (res);\n+\n+  if (TREE_TYPE (expr) != type)\n+    expr = fold_convert (type, expr);\n+\n+  if (TREE_CODE (expr) != SSA_NAME\n+      && !is_gimple_min_invariant (expr))\n+    {\n+      tree var = create_tmp_var (type, \"var\");\n+      gimple_seq stmts;\n+\n+      expr = build2 (MODIFY_EXPR, type, var, expr);\n+      expr = force_gimple_operand (expr, &stmts, true, NULL);\n+      gsi_insert_seq_on_edge_immediate (e, stmts);\n+    }\n+\n+  return expr;\n+}\n+\n /* Helper function for htab_traverse in insert_guard_phis.  */\n \n static int\n@@ -1095,33 +1120,20 @@ add_guard_exit_phis (void **slot, void *s)\n   basic_block bb = i->bb;\n   edge true_edge = i->true_edge;\n   edge false_edge = i->false_edge;\n+  tree res = entry->old_name;\n   tree name1 = entry->expr;\n-  tree name2 = default_before_guard (i->before_guard, entry->old_name);\n+  tree name2 = default_before_guard (i->before_guard, res);\n   gimple phi;\n-  tree res;\n-  gimple_seq stmts;\n \n   /* Nothing to be merged if the name before the guard is the same as\n      the one after.  */\n   if (name1 == name2)\n     return 1;\n \n-  if (TREE_TYPE (name1) != TREE_TYPE (name2))\n-    name1 = fold_convert (TREE_TYPE (name2), name1);\n+  name1 = convert_for_phi_arg (name1, res, true_edge);\n+  name2 = convert_for_phi_arg (name2, res, false_edge);\n \n-  if (TREE_CODE (name1) != SSA_NAME\n-      && (TREE_CODE (name2) != SSA_NAME\n-\t  || is_gimple_reg (name2)))\n-    {\n-      tree type = TREE_TYPE (name2);\n-      tree var = create_tmp_var (type, \"var\");\n-\n-      name1 = build2 (MODIFY_EXPR, type, var, name1);\n-      name1 = force_gimple_operand (name1, &stmts, true, NULL);\n-      gsi_insert_seq_on_edge_immediate (true_edge, stmts);\n-    }\n-\n-  phi = create_phi_node (entry->old_name, bb);\n+  phi = create_phi_node (res, bb);\n   res = create_new_def_for (gimple_phi_result (phi), phi,\n \t\t\t    gimple_phi_result_ptr (phi));\n \n@@ -1136,7 +1148,7 @@ add_guard_exit_phis (void **slot, void *s)\n /* Iterate over RENAME_MAP and get tuples of the form (OLD, NAME1).\n    If there is a correspondent tuple (OLD, NAME2) in BEFORE_GUARD,\n    with NAME1 different than NAME2, then insert in BB the phi node:\n-   \n+\n    | RES = phi (NAME1 (on TRUE_EDGE), NAME2 (on FALSE_EDGE))\"\n \n    if there is no tuple for OLD in BEFORE_GUARD, insert"}, {"sha": "02148b6275fc4ee7fd70ffdc1a0486841f0e5769", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30de16328a546dd06011235d86ef573dc2ffba6e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30de16328a546dd06011235d86ef573dc2ffba6e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=30de16328a546dd06011235d86ef573dc2ffba6e", "patch": "@@ -1,3 +1,8 @@\n+2009-08-12  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR middle-end/40980\n+\t* testsuite/gfortran.dg/graphite/id-17.f: New.\n+\n 2009-08-12  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* testsuite/gcc.dg/graphite/interchange-6.c: Un-XFAIL."}, {"sha": "4bebed016782973257988944e6b4dd2fbf400791", "filename": "gcc/testsuite/gfortran.dg/graphite/id-17.f", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30de16328a546dd06011235d86ef573dc2ffba6e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-17.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30de16328a546dd06011235d86ef573dc2ffba6e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-17.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-17.f?ref=30de16328a546dd06011235d86ef573dc2ffba6e", "patch": "@@ -0,0 +1,16 @@\n+      SUBROUTINE SPECTOP(Dr,N)\n+      DIMENSION d1(0:32,0:32) , Dr(0:32,0:32) , x(0:32)\n+      DO k = 0 , N\n+         fctr2 = o\n+         DO j = 0 , N\n+            fctr = fctr1*fctr2\n+            IF ( j.NE.k ) THEN\n+               d1(k,j) = ck*fctr/(cj*(x(k)-x(j)))\n+            ENDIF\n+            fctr2 = -o*fctr2\n+         ENDDO\n+         DO j = 0 , N\n+            Dr(k,j) = d1(N-k,N-j)\n+         ENDDO\n+      ENDDO\n+      END"}]}