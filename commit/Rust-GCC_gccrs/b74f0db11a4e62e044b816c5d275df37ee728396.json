{"sha": "b74f0db11a4e62e044b816c5d275df37ee728396", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc0ZjBkYjExYTRlNjJlMDQ0YjgxNmM1ZDI3NWRmMzdlZTcyODM5Ng==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-08-18T18:20:43Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-08-18T18:20:43Z"}, "message": "Simplify allocator usage in unordered containers\n\n\t* include/bits/hashtable_policy.h (_ReuseOrAllocNode): Remove\n\t__value_alloc_type and __value_alloc_traits typedefs.\n\t(_ReuseOrAllocNode::operator()): Call construct and destroy on the\n\tnode allocator.\n\t(_Hashtable_alloc): Simplify __value_alloc_traits typedef.\n\t(_Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&...)): Call\n\tconstruct on the node allocator.\n\t(_Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_type*)): Call\n\tdestroy on the node allocator.\n\nFrom-SVN: r251187", "tree": {"sha": "dec6b13dd44f54c12b79f3d530854f5703c4f009", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dec6b13dd44f54c12b79f3d530854f5703c4f009"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b74f0db11a4e62e044b816c5d275df37ee728396", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b74f0db11a4e62e044b816c5d275df37ee728396", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b74f0db11a4e62e044b816c5d275df37ee728396", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b74f0db11a4e62e044b816c5d275df37ee728396/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f661e57ee8fef0b121ec2d79f9e5fea20932c2ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f661e57ee8fef0b121ec2d79f9e5fea20932c2ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f661e57ee8fef0b121ec2d79f9e5fea20932c2ae"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "1b17da249d2c9d5786f0388273333d30d3b21a78", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74f0db11a4e62e044b816c5d275df37ee728396/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74f0db11a4e62e044b816c5d275df37ee728396/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b74f0db11a4e62e044b816c5d275df37ee728396", "patch": "@@ -1,5 +1,15 @@\n 2017-08-18  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/hashtable_policy.h (_ReuseOrAllocNode): Remove\n+\t__value_alloc_type and __value_alloc_traits typedefs.\n+\t(_ReuseOrAllocNode::operator()): Call construct and destroy on the\n+\tnode allocator.\n+\t(_Hashtable_alloc): Simplify __value_alloc_traits typedef.\n+\t(_Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&...)): Call\n+\tconstruct on the node allocator.\n+\t(_Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_type*)): Call\n+\tdestroy on the node allocator.\n+\n \tPR libstdc++/81891\n \t* include/bits/hashtable.h (_Hashtable(_InputIterator, _InputIterator,\n \tsize_type, const _H1&, const _H2&, const _Hash&, const _Equal&,"}, {"sha": "5f2d8776aaaed2e6549a5c4b50d2f2bf50efb09b", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74f0db11a4e62e044b816c5d275df37ee728396/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74f0db11a4e62e044b816c5d275df37ee728396/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=b74f0db11a4e62e044b816c5d275df37ee728396", "patch": "@@ -111,9 +111,6 @@ namespace __detail\n     private:\n       using __node_alloc_type = _NodeAlloc;\n       using __hashtable_alloc = _Hashtable_alloc<__node_alloc_type>;\n-      using __value_alloc_type = typename __hashtable_alloc::__value_alloc_type;\n-      using __value_alloc_traits =\n-\ttypename __hashtable_alloc::__value_alloc_traits;\n       using __node_alloc_traits =\n \ttypename __hashtable_alloc::__node_alloc_traits;\n       using __node_type = typename __hashtable_alloc::__node_type;\n@@ -135,18 +132,17 @@ namespace __detail\n \t      __node_type* __node = _M_nodes;\n \t      _M_nodes = _M_nodes->_M_next();\n \t      __node->_M_nxt = nullptr;\n-\t      __value_alloc_type __a(_M_h._M_node_allocator());\n-\t      __value_alloc_traits::destroy(__a, __node->_M_valptr());\n+\t      auto& __a = _M_h._M_node_allocator();\n+\t      __node_alloc_traits::destroy(__a, __node->_M_valptr());\n \t      __try\n \t\t{\n-\t\t  __value_alloc_traits::construct(__a, __node->_M_valptr(),\n-\t\t\t\t\t\t  std::forward<_Arg>(__arg));\n+\t\t  __node_alloc_traits::construct(__a, __node->_M_valptr(),\n+\t\t\t\t\t\t std::forward<_Arg>(__arg));\n \t\t}\n \t      __catch(...)\n \t\t{\n \t\t  __node->~__node_type();\n-\t\t  __node_alloc_traits::deallocate(_M_h._M_node_allocator(),\n-\t\t\t\t\t\t  __node, 1);\n+\t\t  __node_alloc_traits::deallocate(__a, __node, 1);\n \t\t  __throw_exception_again;\n \t\t}\n \t      return __node;\n@@ -2000,10 +1996,8 @@ namespace __detail\n       // Use __gnu_cxx to benefit from _S_always_equal and al.\n       using __node_alloc_traits = __gnu_cxx::__alloc_traits<__node_alloc_type>;\n \n-      using __value_type = typename __node_type::value_type;\n-      using __value_alloc_type =\n-\t__alloc_rebind<__node_alloc_type, __value_type>;\n-      using __value_alloc_traits = std::allocator_traits<__value_alloc_type>;\n+      using __value_alloc_traits = typename __node_alloc_traits::template\n+\trebind_traits<typename __node_type::value_type>;\n \n       using __node_base = __detail::_Hash_node_base;\n       using __bucket_type = __node_base*;      \n@@ -2057,10 +2051,10 @@ namespace __detail\n \t__node_type* __n = std::__addressof(*__nptr);\n \t__try\n \t  {\n-\t    __value_alloc_type __a(_M_node_allocator());\n \t    ::new ((void*)__n) __node_type;\n-\t    __value_alloc_traits::construct(__a, __n->_M_valptr(),\n-\t\t\t\t\t    std::forward<_Args>(__args)...);\n+\t    __node_alloc_traits::construct(_M_node_allocator(),\n+\t\t\t\t\t   __n->_M_valptr(),\n+\t\t\t\t\t   std::forward<_Args>(__args)...);\n \t    return __n;\n \t  }\n \t__catch(...)\n@@ -2076,8 +2070,7 @@ namespace __detail\n     {\n       typedef typename __node_alloc_traits::pointer _Ptr;\n       auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);\n-      __value_alloc_type __a(_M_node_allocator());\n-      __value_alloc_traits::destroy(__a, __n->_M_valptr());\n+      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());\n       __n->~__node_type();\n       __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);\n     }"}]}