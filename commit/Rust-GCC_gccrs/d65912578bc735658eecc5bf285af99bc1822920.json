{"sha": "d65912578bc735658eecc5bf285af99bc1822920", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY1OTEyNTc4YmM3MzU2NThlZWNjNWJmMjg1YWY5OWJjMTgyMjkyMA==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2017-12-01T19:54:29Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2017-12-01T19:54:29Z"}, "message": "[AArch64] Fix address printing on ILP32\n\nFix address printing for ILP32.  The md file uses 'a' in assembler\ntemplates for symbolic addresses in adrp/add, which end up calling\naarch64_print_operand_address.  However in ILP32 these are not valid\nmemory addresses (being ptr_mode rather than Pmode), so the assert\ntriggers.  Since it is incorrect to use symbols in memory addresses\n(besides literal pool accesses), change the 'a' to 'c' in the md file.\n\nSkip one failing test in ILP32 which combines the 'p' modifier with the 'a'\nassembler template to fake a memory reference.\n\n    gcc/\n\t* config/aarch64/aarch64.md (call_insn): Use %c rather than %a.\n\t(call_value_insn): Likewise.\n\t(sibcall_insn): Likewise.\n\t(sibcall_value_insn): Likewise.\n\t(movsi_aarch64): Likewise.\n\t(movdi_aarch64): Likewise.\n\t(add_losym_): Likewise.\n\t(ldr_got_small_): Likewise.\n\t(ldr_got_small_sidi): Likewise.\n\t(ldr_got_small_28k_): Likewise.\n\t(ldr_got_small_28k_sidi): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_print_address_internal):\n\tMove output_addr_const to symbolic case. Add error check.\n    testsuite/\n\t* gcc.dg/asm-4.c: Skip on AArch64 with ILP32 as test is incorrect.\n\nFrom-SVN: r255333", "tree": {"sha": "55062a5dd197fb661a3817d0c061847b963860e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55062a5dd197fb661a3817d0c061847b963860e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d65912578bc735658eecc5bf285af99bc1822920", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d65912578bc735658eecc5bf285af99bc1822920", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d65912578bc735658eecc5bf285af99bc1822920", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d65912578bc735658eecc5bf285af99bc1822920/comments", "author": null, "committer": null, "parents": [{"sha": "8a302cb2b3cfc170254cf1d9fdc4dc2a681c15d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a302cb2b3cfc170254cf1d9fdc4dc2a681c15d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a302cb2b3cfc170254cf1d9fdc4dc2a681c15d1"}], "stats": {"total": 50, "additions": 37, "deletions": 13}, "files": [{"sha": "4018af7e58874f5ef6df2fae9cae092a3492b69c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d65912578bc735658eecc5bf285af99bc1822920/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d65912578bc735658eecc5bf285af99bc1822920/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d65912578bc735658eecc5bf285af99bc1822920", "patch": "@@ -1,3 +1,19 @@\n+2017-12-01  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/aarch64/aarch64.md (call_insn): Use %c rather than %a.\n+\t(call_value_insn): Likewise.\n+\t(sibcall_insn): Likewise.\n+\t(sibcall_value_insn): Likewise.\n+\t(movsi_aarch64): Likewise.\n+\t(movdi_aarch64): Likewise.\n+\t(add_losym_): Likewise.\n+\t(ldr_got_small_): Likewise.\n+\t(ldr_got_small_sidi): Likewise.\n+\t(ldr_got_small_28k_): Likewise.\n+\t(ldr_got_small_28k_sidi): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_print_address_internal):\n+\tMove output_addr_const to symbolic case. Add error check.\n+\n 2017-12-01  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/predicates.md (plus16_Q_operand): New predicate."}, {"sha": "75a6c0d0421354d7c0759292947eb5d407f5b703", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d65912578bc735658eecc5bf285af99bc1822920/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d65912578bc735658eecc5bf285af99bc1822920/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=d65912578bc735658eecc5bf285af99bc1822920", "patch": "@@ -5713,10 +5713,11 @@ aarch64_print_address_internal (FILE *f, machine_mode mode, rtx x, RTX_CODE op)\n \treturn;\n \n       case ADDRESS_SYMBOLIC:\n-\tbreak;\n+\toutput_addr_const (f, x);\n+\treturn;\n       }\n \n-  output_addr_const (f, x);\n+  output_operand_lossage (\"invalid operand for '%%%c'\", op);\n }\n \n /* Print address 'x' of a LDP/STP with mode 'mode'.  */"}, {"sha": "f1e2a07ef46401bbde64dd617245629e0f3075b6", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d65912578bc735658eecc5bf285af99bc1822920/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d65912578bc735658eecc5bf285af99bc1822920/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=d65912578bc735658eecc5bf285af99bc1822920", "patch": "@@ -749,7 +749,7 @@\n   \"\"\n   \"@\n   blr\\\\t%0\n-  bl\\\\t%a0\"\n+  bl\\\\t%c0\"\n   [(set_attr \"type\" \"call, call\")]\n )\n \n@@ -775,7 +775,7 @@\n   \"\"\n   \"@\n   blr\\\\t%1\n-  bl\\\\t%a1\"\n+  bl\\\\t%c1\"\n   [(set_attr \"type\" \"call, call\")]\n )\n \n@@ -811,7 +811,7 @@\n   \"SIBLING_CALL_P (insn)\"\n   \"@\n    br\\\\t%0\n-   b\\\\t%a0\"\n+   b\\\\t%c0\"\n   [(set_attr \"type\" \"branch, branch\")]\n )\n \n@@ -824,7 +824,7 @@\n   \"SIBLING_CALL_P (insn)\"\n   \"@\n    br\\\\t%1\n-   b\\\\t%a1\"\n+   b\\\\t%c1\"\n   [(set_attr \"type\" \"branch, branch\")]\n )\n \n@@ -946,7 +946,7 @@\n    ldr\\\\t%s0, %1\n    str\\\\t%w1, %0\n    str\\\\t%s1, %0\n-   adr\\\\t%x0, %a1\n+   adr\\\\t%x0, %c1\n    adrp\\\\t%x0, %A1\n    fmov\\\\t%s0, %w1\n    fmov\\\\t%w0, %s1\n@@ -981,7 +981,7 @@\n    ldr\\\\t%d0, %1\n    str\\\\t%x1, %0\n    str\\\\t%d1, %0\n-   adr\\\\t%x0, %a1\n+   adr\\\\t%x0, %c1\n    adrp\\\\t%x0, %A1\n    fmov\\\\t%d0, %x1\n    fmov\\\\t%x0, %d1\n@@ -5401,7 +5401,7 @@\n \t(lo_sum:P (match_operand:P 1 \"register_operand\" \"r\")\n \t\t  (match_operand 2 \"aarch64_valid_symref\" \"S\")))]\n   \"\"\n-  \"add\\\\t%<w>0, %<w>1, :lo12:%a2\"\n+  \"add\\\\t%<w>0, %<w>1, :lo12:%c2\"\n   [(set_attr \"type\" \"alu_imm\")]\n )\n \n@@ -5412,7 +5412,7 @@\n \t\t\t      (match_operand:PTR 2 \"aarch64_valid_symref\" \"S\")))]\n \t\t    UNSPEC_GOTSMALLPIC))]\n   \"\"\n-  \"ldr\\\\t%<w>0, [%1, #:got_lo12:%a2]\"\n+  \"ldr\\\\t%<w>0, [%1, #:got_lo12:%c2]\"\n   [(set_attr \"type\" \"load_<ldst_sz>\")]\n )\n \n@@ -5424,7 +5424,7 @@\n \t\t\t     (match_operand:DI 2 \"aarch64_valid_symref\" \"S\")))]\n \t\t    UNSPEC_GOTSMALLPIC)))]\n   \"TARGET_ILP32\"\n-  \"ldr\\\\t%w0, [%1, #:got_lo12:%a2]\"\n+  \"ldr\\\\t%w0, [%1, #:got_lo12:%c2]\"\n   [(set_attr \"type\" \"load_4\")]\n )\n \n@@ -5435,7 +5435,7 @@\n \t\t\t      (match_operand:PTR 2 \"aarch64_valid_symref\" \"S\")))]\n \t\t    UNSPEC_GOTSMALLPIC28K))]\n   \"\"\n-  \"ldr\\\\t%<w>0, [%1, #:<got_modifier>:%a2]\"\n+  \"ldr\\\\t%<w>0, [%1, #:<got_modifier>:%c2]\"\n   [(set_attr \"type\" \"load_<ldst_sz>\")]\n )\n \n@@ -5447,7 +5447,7 @@\n \t\t\t     (match_operand:DI 2 \"aarch64_valid_symref\" \"S\")))]\n \t\t    UNSPEC_GOTSMALLPIC28K)))]\n   \"TARGET_ILP32\"\n-  \"ldr\\\\t%w0, [%1, #:gotpage_lo14:%a2]\"\n+  \"ldr\\\\t%w0, [%1, #:gotpage_lo14:%c2]\"\n   [(set_attr \"type\" \"load_4\")]\n )\n "}, {"sha": "c86275d2551958c1f821c19a9bf5b34398a5f32f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d65912578bc735658eecc5bf285af99bc1822920/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d65912578bc735658eecc5bf285af99bc1822920/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d65912578bc735658eecc5bf285af99bc1822920", "patch": "@@ -1,3 +1,7 @@\n+2017-12-01  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* gcc.dg/asm-4.c: Skip on AArch64 with ILP32 as test is incorrect.\n+\n 2017-12-01  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/83224"}, {"sha": "6cbbfd0d51f26955f6d31a5df1b458a564090c90", "filename": "gcc/testsuite/gcc.dg/asm-4.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d65912578bc735658eecc5bf285af99bc1822920/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d65912578bc735658eecc5bf285af99bc1822920/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-4.c?ref=d65912578bc735658eecc5bf285af99bc1822920", "patch": "@@ -1,6 +1,9 @@\n /* { dg-do compile } */\n /* { dg-options \"\" } */\n \n+/* \"p\" modifier can't be used to generate a valid memory address with ILP32.  */\n+/* { dg-skip-if \"\" { aarch64*-*-* && ilp32 } } */\n+\n int main()\n {\n   int x, y, z;"}]}