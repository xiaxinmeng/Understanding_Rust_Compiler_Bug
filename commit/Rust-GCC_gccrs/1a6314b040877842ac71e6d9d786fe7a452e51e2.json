{"sha": "1a6314b040877842ac71e6d9d786fe7a452e51e2", "node_id": "C_kwDOANBUbNoAKDFhNjMxNGIwNDA4Nzc4NDJhYzcxZTZkOWQ3ODZmZTdhNDUyZTUxZTI", "commit": {"author": {"name": "Sebastian Huber", "email": "sebastian.huber@embedded-brains.de", "date": "2022-03-31T09:37:56Z"}, "committer": {"name": "Sebastian Huber", "email": "sebastian.huber@embedded-brains.de", "date": "2022-04-28T18:46:49Z"}, "message": "gcov: Add open mode parameter to gcov_do_dump()\n\ngcc/\n\n\t* gcov-tool.cc (gcov_do_dump): Add mode parameter.\n\t(gcov_output_files): Open files for reading and writing.\n\nlibgcc/\n\n\t* libgcov-driver-system.c (gcov_exit_open_gcda_file): Add mode\n\tparameter.  Pass mode to gcov_open() calls.\n\t* libgcov-driver.c (dump_one_gcov):  Add mode parameter.  Pass mode to\n\tgcov_exit_open_gcda_file() call.\n\t(gcov_do_dump): Add mode parameter.  Pass mode to dump_one_gcov()\n\tcalls.\n\t(__gcov_dump_one):  Open file for reading and writing.", "tree": {"sha": "7fe7a84ae4991b50d62030080634245de82fbb4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fe7a84ae4991b50d62030080634245de82fbb4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a6314b040877842ac71e6d9d786fe7a452e51e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a6314b040877842ac71e6d9d786fe7a452e51e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a6314b040877842ac71e6d9d786fe7a452e51e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a6314b040877842ac71e6d9d786fe7a452e51e2/comments", "author": {"login": "sebhub", "id": 932056, "node_id": "MDQ6VXNlcjkzMjA1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/932056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebhub", "html_url": "https://github.com/sebhub", "followers_url": "https://api.github.com/users/sebhub/followers", "following_url": "https://api.github.com/users/sebhub/following{/other_user}", "gists_url": "https://api.github.com/users/sebhub/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebhub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebhub/subscriptions", "organizations_url": "https://api.github.com/users/sebhub/orgs", "repos_url": "https://api.github.com/users/sebhub/repos", "events_url": "https://api.github.com/users/sebhub/events{/privacy}", "received_events_url": "https://api.github.com/users/sebhub/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sebhub", "id": 932056, "node_id": "MDQ6VXNlcjkzMjA1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/932056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebhub", "html_url": "https://github.com/sebhub", "followers_url": "https://api.github.com/users/sebhub/followers", "following_url": "https://api.github.com/users/sebhub/following{/other_user}", "gists_url": "https://api.github.com/users/sebhub/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebhub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebhub/subscriptions", "organizations_url": "https://api.github.com/users/sebhub/orgs", "repos_url": "https://api.github.com/users/sebhub/repos", "events_url": "https://api.github.com/users/sebhub/events{/privacy}", "received_events_url": "https://api.github.com/users/sebhub/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d170ecc9fcb386bd5f62eb86dd6e411e6fcb4cef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d170ecc9fcb386bd5f62eb86dd6e411e6fcb4cef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d170ecc9fcb386bd5f62eb86dd6e411e6fcb4cef"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "d712715cf7ee2f0242f43421fbf7c7c53c9627fe", "filename": "gcc/gcov-tool.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a6314b040877842ac71e6d9d786fe7a452e51e2/gcc%2Fgcov-tool.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a6314b040877842ac71e6d9d786fe7a452e51e2/gcc%2Fgcov-tool.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-tool.cc?ref=1a6314b040877842ac71e6d9d786fe7a452e51e2", "patch": "@@ -46,7 +46,7 @@ extern int gcov_profile_overlap (struct gcov_info*, struct gcov_info*);\n extern int gcov_profile_normalize (struct gcov_info*, gcov_type);\n extern int gcov_profile_scale (struct gcov_info*, float, int, int);\n extern struct gcov_info* gcov_read_profile_dir (const char*, int);\n-extern void gcov_do_dump (struct gcov_info *, int);\n+extern void gcov_do_dump (struct gcov_info *, int, int);\n extern const char *gcov_get_filename (struct gcov_info *list);\n extern void gcov_set_verbose (void);\n \n@@ -124,7 +124,7 @@ gcov_output_files (const char *out, struct gcov_info *profile)\n     fatal_error (input_location, \"output file %s already exists in folder %s\",\n \t\t filename, out);\n \n-  gcov_do_dump (profile, 0);\n+  gcov_do_dump (profile, 0, 0);\n \n   ret = chdir (pwd);\n   if (ret)"}, {"sha": "ac405c38e3a5d9c517d1c924f321ef93cdd2a195", "filename": "libgcc/libgcov-driver-system.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a6314b040877842ac71e6d9d786fe7a452e51e2/libgcc%2Flibgcov-driver-system.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a6314b040877842ac71e6d9d786fe7a452e51e2/libgcc%2Flibgcov-driver-system.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-driver-system.c?ref=1a6314b040877842ac71e6d9d786fe7a452e51e2", "patch": "@@ -261,7 +261,8 @@ allocate_filename_struct (struct gcov_filename *gf)\n \n static int\n gcov_exit_open_gcda_file (struct gcov_info *gi_ptr,\n-\t\t\t  struct gcov_filename *gf)\n+\t\t\t  struct gcov_filename *gf,\n+\t\t\t  int mode)\n {\n   int append_slash = 0;\n   const char *fname = gi_ptr->filename;\n@@ -309,7 +310,7 @@ gcov_exit_open_gcda_file (struct gcov_info *gi_ptr,\n \n   gf->filename = replace_filename_variables (gf->filename);\n \n-  if (!gcov_open (gf->filename, 0))\n+  if (!gcov_open (gf->filename, mode))\n     {\n       /* Open failed likely due to missed directory.\n          Create directory and retry to open file. */\n@@ -318,7 +319,7 @@ gcov_exit_open_gcda_file (struct gcov_info *gi_ptr,\n           fprintf (stderr, \"profiling:%s:Skip\\n\", gf->filename);\n           return -1;\n         }\n-      if (!gcov_open (gf->filename, 0))\n+      if (!gcov_open (gf->filename, mode))\n         {\n           fprintf (stderr, \"profiling:%s:Cannot open\\n\", gf->filename);\n           return -1;"}, {"sha": "10831e84b611f5db4af18d07c7a4c608118caeb2", "filename": "libgcc/libgcov-driver.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a6314b040877842ac71e6d9d786fe7a452e51e2/libgcc%2Flibgcov-driver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a6314b040877842ac71e6d9d786fe7a452e51e2/libgcc%2Flibgcov-driver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-driver.c?ref=1a6314b040877842ac71e6d9d786fe7a452e51e2", "patch": "@@ -595,14 +595,14 @@ write_one_data (const struct gcov_info *gi_ptr,\n static void\n dump_one_gcov (struct gcov_info *gi_ptr, struct gcov_filename *gf,\n \t       unsigned run_counted ATTRIBUTE_UNUSED,\n-\t       gcov_type run_max ATTRIBUTE_UNUSED)\n+\t       gcov_type run_max ATTRIBUTE_UNUSED, int mode)\n {\n   struct gcov_summary summary = {};\n   int error;\n   gcov_unsigned_t tag;\n   fn_buffer = 0;\n \n-  error = gcov_exit_open_gcda_file (gi_ptr, gf);\n+  error = gcov_exit_open_gcda_file (gi_ptr, gf, mode);\n   if (error == -1)\n     return;\n \n@@ -649,13 +649,13 @@ read_fatal:;\n \n /* Dump all the coverage counts for the program. It first computes program\n    summary and then traverses gcov_list list and dumps the gcov_info\n-   objects one by one.  */\n+   objects one by one.  Use MODE to open files.  */\n \n #if !IN_GCOV_TOOL\n static\n #endif\n void\n-gcov_do_dump (struct gcov_info *list, int run_counted)\n+gcov_do_dump (struct gcov_info *list, int run_counted, int mode)\n {\n   struct gcov_info *gi_ptr;\n   struct gcov_filename gf;\n@@ -678,7 +678,7 @@ gcov_do_dump (struct gcov_info *list, int run_counted)\n   /* Now merge each file.  */\n   for (gi_ptr = list; gi_ptr; gi_ptr = gi_ptr->next)\n     {\n-      dump_one_gcov (gi_ptr, &gf, run_counted, run_max);\n+      dump_one_gcov (gi_ptr, &gf, run_counted, run_max, mode);\n       free (gf.filename);\n     }\n \n@@ -701,7 +701,7 @@ __gcov_dump_one (struct gcov_root *root)\n   if (root->dumped)\n     return;\n \n-  gcov_do_dump (root->list, root->run_counted);\n+  gcov_do_dump (root->list, root->run_counted, 0);\n   \n   root->dumped = 1;\n   root->run_counted = 1;"}]}