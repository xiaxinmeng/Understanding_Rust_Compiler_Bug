{"sha": "666fdc46bc848984ee7d2906f2dfe10e1ee5d535", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY2ZmRjNDZiYzg0ODk4NGVlN2QyOTA2ZjJkZmUxMGUxZWU1ZDUzNQ==", "commit": {"author": {"name": "Jim Wilson", "email": "jimw@sifive.com", "date": "2018-06-30T21:52:01Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2018-06-30T21:52:01Z"}, "message": "RISC-V: Add patterns to convert AND mask to two shifts.\n\n\tgcc/\n\t* config/riscv/predicates.md (p2m1_shift_operand): New.\n\t(high_mask_shift_operand): New.\n\t* config/riscv/riscv.md (lshrsi3_zero_extend_3+1): New combiner\n\tpattern using p2m1_shift_operand.\n\t(lshsi3_zero_extend_3+2): New combiner pattern using\n\thigh_mask_shift_operand.\n\n\tgcc/testsuite/\n\t* gcc.target/riscv/shift-shift-1.c: New.\n\t* gcc.target/riscv/shift-shift-2.c: New.\n\t* gcc.target/riscv/shift-shift-3.c: New.\n\nFrom-SVN: r262278", "tree": {"sha": "dfcba939f1bcd8dc96d335edf960ac2bf2c767a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfcba939f1bcd8dc96d335edf960ac2bf2c767a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/666fdc46bc848984ee7d2906f2dfe10e1ee5d535", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/666fdc46bc848984ee7d2906f2dfe10e1ee5d535", "html_url": "https://github.com/Rust-GCC/gccrs/commit/666fdc46bc848984ee7d2906f2dfe10e1ee5d535", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/666fdc46bc848984ee7d2906f2dfe10e1ee5d535/comments", "author": null, "committer": null, "parents": [{"sha": "3330053ecaafe8bca82cc3845be9b2d01a614eb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3330053ecaafe8bca82cc3845be9b2d01a614eb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3330053ecaafe8bca82cc3845be9b2d01a614eb1"}], "stats": {"total": 131, "additions": 131, "deletions": 0}, "files": [{"sha": "509af92f3d4d75f476df639bfb065ad1e35098a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666fdc46bc848984ee7d2906f2dfe10e1ee5d535/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666fdc46bc848984ee7d2906f2dfe10e1ee5d535/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=666fdc46bc848984ee7d2906f2dfe10e1ee5d535", "patch": "@@ -1,3 +1,12 @@\n+2018-06-30  Jim Wilson  <jimw@sifive.com>\n+\n+\t* config/riscv/predicates.md (p2m1_shift_operand): New.\n+\t(high_mask_shift_operand): New.\n+\t* config/riscv/riscv.md (lshrsi3_zero_extend_3+1): New combiner\n+\tpattern using p2m1_shift_operand.\n+\t(lshsi3_zero_extend_3+2): New combiner pattern using\n+\thigh_mask_shift_operand.\n+\n 2018-06-30  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vect-patterns.c (vect_get_external_def_edge): New function,"}, {"sha": "cffc831bbc73bd2cb33d48717168e673d2ec0d8c", "filename": "gcc/config/riscv/predicates.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666fdc46bc848984ee7d2906f2dfe10e1ee5d535/gcc%2Fconfig%2Friscv%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666fdc46bc848984ee7d2906f2dfe10e1ee5d535/gcc%2Fconfig%2Friscv%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fpredicates.md?ref=666fdc46bc848984ee7d2906f2dfe10e1ee5d535", "patch": "@@ -71,6 +71,26 @@\n   return !LUI_OPERAND (INTVAL (op)) && !SMALL_OPERAND (INTVAL (op));\n })\n \n+(define_predicate \"p2m1_shift_operand\"\n+  (match_code \"const_int\")\n+{\n+  int val = exact_log2 (INTVAL (op) + 1);\n+  if (val < 12)\n+    return false;\n+  return true;\n+ })\n+\n+(define_predicate \"high_mask_shift_operand\"\n+  (match_code \"const_int\")\n+{\n+  int val1 = clz_hwi (~ INTVAL (op));\n+  int val0 = ctz_hwi (INTVAL (op));\n+  if ((val0 + val1 == BITS_PER_WORD)\n+      && val0 > 31 && val0 < 64)\n+    return true;\n+  return false;\n+})\n+\n (define_predicate \"move_operand\"\n   (match_operand 0 \"general_operand\")\n {"}, {"sha": "7b411f0538e2891ed1607e238c45a270bf88a7cb", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666fdc46bc848984ee7d2906f2dfe10e1ee5d535/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666fdc46bc848984ee7d2906f2dfe10e1ee5d535/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=666fdc46bc848984ee7d2906f2dfe10e1ee5d535", "patch": "@@ -1711,6 +1711,38 @@\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"mode\" \"SI\")])\n \n+;; Handle AND with 2^N-1 for N from 12 to XLEN.  This can be split into\n+;; two logical shifts.  Otherwise it requires 3 instructions: lui,\n+;; xor/addi/srli, and.\n+(define_split\n+  [(set (match_operand:GPR 0 \"register_operand\")\n+\t(and:GPR (match_operand:GPR 1 \"register_operand\")\n+\t\t (match_operand:GPR 2 \"p2m1_shift_operand\")))]\n+  \"\"\n+ [(set (match_dup 0)\n+       (ashift:GPR (match_dup 1) (match_dup 2)))\n+  (set (match_dup 0)\n+       (lshiftrt:GPR (match_dup 0) (match_dup 2)))]\n+{\n+  operands[2] = GEN_INT (BITS_PER_WORD\n+\t\t\t - exact_log2 (INTVAL (operands[2]) + 1));\n+})\n+  \n+;; Handle AND with 0xF...F0...0 where there are 32 to 63 zeros.  This can be\n+;; split into two shifts.  Otherwise it requires 3 instructions: li, sll, and.\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(and:DI (match_operand:DI 1 \"register_operand\")\n+\t\t(match_operand:DI 2 \"high_mask_shift_operand\")))]\n+  \"TARGET_64BIT\"\n+  [(set (match_dup 0)\n+\t(lshiftrt:DI (match_dup 1) (match_dup 2)))\n+   (set (match_dup 0)\n+\t(ashift:DI (match_dup 0) (match_dup 2)))]\n+{\n+  operands[2] = GEN_INT (ctz_hwi (INTVAL (operands[2])));\n+})\n+\n ;;\n ;;  ....................\n ;;"}, {"sha": "7992353a903412503ea5e58eb704ab7d3067f173", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666fdc46bc848984ee7d2906f2dfe10e1ee5d535/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666fdc46bc848984ee7d2906f2dfe10e1ee5d535/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=666fdc46bc848984ee7d2906f2dfe10e1ee5d535", "patch": "@@ -1,3 +1,9 @@\n+2018-06-30  Jim Wilson  <jimw@sifive.com>\n+\n+\t* gcc.target/riscv/shift-shift-1.c: New.\n+\t* gcc.target/riscv/shift-shift-2.c: New.\n+\t* gcc.target/riscv/shift-shift-3.c: New.\n+\n 2018-06-30  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.dg/vect/vect-widen-mult-extern-1.c: New test."}, {"sha": "a5343a31b140d4072659469666eb06b57e2b6e5f", "filename": "gcc/testsuite/gcc.target/riscv/shift-shift-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666fdc46bc848984ee7d2906f2dfe10e1ee5d535/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshift-shift-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666fdc46bc848984ee7d2906f2dfe10e1ee5d535/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshift-shift-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshift-shift-1.c?ref=666fdc46bc848984ee7d2906f2dfe10e1ee5d535", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gc -mabi=ilp32 -O\" } */\n+\n+/* Test for lshrsi3_zero_extend_3+1 pattern that uses p2m1_shift_operand.  */\n+unsigned int\n+sub1 (unsigned int i)\n+{\n+  return (i << 1) >> 1;\n+}\n+\n+unsigned int\n+sub2 (unsigned int i)\n+{\n+  return (i << 20) >> 20;\n+}\n+/* { dg-final { scan-assembler-times \"slli\" 2 } } */\n+/* { dg-final { scan-assembler-times \"srli\" 2 } } */"}, {"sha": "3f07e7776e73ce53a68398b86cba35705077b434", "filename": "gcc/testsuite/gcc.target/riscv/shift-shift-2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666fdc46bc848984ee7d2906f2dfe10e1ee5d535/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshift-shift-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666fdc46bc848984ee7d2906f2dfe10e1ee5d535/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshift-shift-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshift-shift-2.c?ref=666fdc46bc848984ee7d2906f2dfe10e1ee5d535", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc -mabi=lp64 -O\" } */\n+\n+/* Test for lshrsi3_zero_extend_3+1 pattern that uses p2m1_shift_operand.  */\n+unsigned int\n+sub1 (unsigned int i)\n+{\n+  return (i << 1) >> 1;\n+}\n+\n+unsigned int\n+sub2 (unsigned int i)\n+{\n+  return (i << 20) >> 20;\n+}\n+\n+unsigned long\n+sub3 (unsigned long i)\n+{\n+  return (i << 1) >> 1;\n+}\n+\n+unsigned long\n+sub4 (unsigned long i)\n+{\n+  return (i << 52) >> 52;\n+}\n+/* { dg-final { scan-assembler-times \"slli\" 4 } } */\n+/* { dg-final { scan-assembler-times \"srli\" 4 } } */"}, {"sha": "c974e75b38a9b701cfb404e9b633786b3f51474f", "filename": "gcc/testsuite/gcc.target/riscv/shift-shift-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666fdc46bc848984ee7d2906f2dfe10e1ee5d535/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshift-shift-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666fdc46bc848984ee7d2906f2dfe10e1ee5d535/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshift-shift-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshift-shift-3.c?ref=666fdc46bc848984ee7d2906f2dfe10e1ee5d535", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc -mabi=lp64 -O\" } */\n+\n+/* Test for lshrsi3_zero_extend_3+2 pattern that uses\n+   high_mask_shift_operand.  */\n+unsigned long\n+sub1 (unsigned long i)\n+{\n+  return (i >> 32) << 32;\n+}\n+\n+unsigned long\n+sub2 (unsigned long i)\n+{\n+  return (i >> 63) << 63;\n+}\n+/* { dg-final { scan-assembler-times \"slli\" 2 } } */\n+/* { dg-final { scan-assembler-times \"srli\" 2 } } */"}]}