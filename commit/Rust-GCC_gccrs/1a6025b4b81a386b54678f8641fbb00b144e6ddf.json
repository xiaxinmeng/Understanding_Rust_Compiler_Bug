{"sha": "1a6025b4b81a386b54678f8641fbb00b144e6ddf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE2MDI1YjRiODFhMzg2YjU0Njc4Zjg2NDFmYmIwMGIxNDRlNmRkZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2001-05-21T15:39:19Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-05-21T15:39:19Z"}, "message": "cp-tree.def (START_CATCH_STMT): Lose.\n\n        * cp-tree.def (START_CATCH_STMT): Lose.\n        * dump.c (cp_dump_tree): Don't dump it.  Do dump HANDLER_PARMS.\n        * tree.c (cp_statement_code_p): Don't case it.\n        * semantics.c (cp_expand_stmt): Likewise.\n        * except.c (expand_start_catch_block): Don't start any blocks.\n        Return the type.\n        (expand_end_catch_block): Don't end any blocks.\n        * parse.y (handler): Don't pass anything from finish_handler_parms\n        to finish_handler.\n        * pt.c (tsubst_expr): Likewise.\n        * semantics.c (begin_handler): Call note_level_for_catch here.\n        (finish_handler_parms): Don't return anything.\n        (genrtl_catch_block, begin_catch_block): Lose.\n        (genrtl_handler): Call expand_start_catch here.\n        * cp-tree.h (START_CATCH_TYPE): Lose.\n        (HANDLER_TYPE): New.\n\nFrom-SVN: r42388", "tree": {"sha": "39cca1e9568d70f1c02863d9d447b7fd3eb0d235", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39cca1e9568d70f1c02863d9d447b7fd3eb0d235"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a6025b4b81a386b54678f8641fbb00b144e6ddf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a6025b4b81a386b54678f8641fbb00b144e6ddf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a6025b4b81a386b54678f8641fbb00b144e6ddf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a6025b4b81a386b54678f8641fbb00b144e6ddf/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0fd0b7ee985eb454ead3a28f6a017065780e9587", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fd0b7ee985eb454ead3a28f6a017065780e9587", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fd0b7ee985eb454ead3a28f6a017065780e9587"}], "stats": {"total": 131, "additions": 52, "deletions": 79}, "files": [{"sha": "55427d6674b1459c405d121509cba07aa883110f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a6025b4b81a386b54678f8641fbb00b144e6ddf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a6025b4b81a386b54678f8641fbb00b144e6ddf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1a6025b4b81a386b54678f8641fbb00b144e6ddf", "patch": "@@ -1,3 +1,27 @@\n+2001-05-21  Jason Merrill  <jason_merrill@redhat.com>\n+\n+\t* cp-tree.def (START_CATCH_STMT): Lose.\n+\t* dump.c (cp_dump_tree): Don't dump it.  Do dump HANDLER_PARMS.\n+\t* tree.c (cp_statement_code_p): Don't case it.\n+\t* semantics.c (cp_expand_stmt): Likewise.\n+\t* cp-tree.h (START_CATCH_TYPE): Lose.\n+\t(HANDLER_TYPE): New.\n+\t* except.c (expand_start_catch_block): Don't start any blocks.\n+\tReturn the type.\n+\t(expand_end_catch_block): Don't end any blocks.\n+\t* parse.y (handler): Don't pass anything from finish_handler_parms\n+\tto finish_handler.\n+\t* pt.c (tsubst_expr): Likewise.\n+\t* semantics.c (begin_handler): Call note_level_for_catch here.\n+\t(finish_handler_parms): Don't return anything.\n+\t(genrtl_catch_block, begin_catch_block): Lose.\n+\t(genrtl_handler): Call expand_start_catch here.\n+\n+2001-05-18  Jason Merrill  <jason_merrill@redhat.com>\n+\n+\t* class.c (build_vtable): Set DECL_ASSEMBLER_NAME for vtables here.\n+\t(get_vtable_decl, build_vtt): Not here.\n+\n 2001-05-20  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/2781"}, {"sha": "62f263269887fd4f980dee63cbace23d6cc24b7a", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a6025b4b81a386b54678f8641fbb00b144e6ddf/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a6025b4b81a386b54678f8641fbb00b144e6ddf/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=1a6025b4b81a386b54678f8641fbb00b144e6ddf", "patch": "@@ -229,14 +229,14 @@ DEFTREECODE (CTOR_STMT, \"ctor_stmt\", 'e', 0)\n    constructed.  If, after this point, the CLEANUP_DECL goes out of\n    scope, the CLEANUP_EXPR must be run.  */\n DEFTREECODE (CLEANUP_STMT, \"cleanup_stmt\", 'e', 2)\n-/* A START_CATCH_STMT marks the beginning of a catch handler for the\n-   the START_CATCH_TYPE.  If this is CATCH_ALL_TYPE, then the handler\n-   catches all types.  */\n-DEFTREECODE (START_CATCH_STMT, \"start_catch_stmt\", 'e', 0)\n DEFTREECODE (CTOR_INITIALIZER, \"ctor_initializer\", 'e', 2)\n DEFTREECODE (RETURN_INIT, \"return_init\", 'e', 2)\n DEFTREECODE (TRY_BLOCK, \"try_block\", 'e', 2)\n DEFTREECODE (EH_SPEC_BLOCK, \"eh_spec_block\", 'e', 2)\n+/* A HANDLER wraps a catch handler for the HANDLER_TYPE.  If this is\n+   CATCH_ALL_TYPE, then the handler catches all types.  The declaration of\n+   the catch variable is in HANDLER_PARMS, and the body block in\n+   HANDLER_BODY.  */\n DEFTREECODE (HANDLER, \"handler\", 'e', 2)\n \n /* A MUST_NOT_THROW_EXPR wraps an expression that may not"}, {"sha": "91e723b60a684f4b3f8b6f849709fa22de8b06f3", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a6025b4b81a386b54678f8641fbb00b144e6ddf/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a6025b4b81a386b54678f8641fbb00b144e6ddf/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=1a6025b4b81a386b54678f8641fbb00b144e6ddf", "patch": "@@ -3061,8 +3061,8 @@ enum ptrmemfunc_vbit_where_t\n #define FN_TRY_BLOCK_P(NODE)    TREE_LANG_FLAG_3 (TRY_BLOCK_CHECK (NODE))\n #define HANDLER_PARMS(NODE)     TREE_OPERAND (HANDLER_CHECK (NODE), 0)\n #define HANDLER_BODY(NODE)      TREE_OPERAND (HANDLER_CHECK (NODE), 1)\n+#define HANDLER_TYPE(NODE)\tTREE_TYPE (HANDLER_CHECK (NODE))\n #define SUBOBJECT_CLEANUP(NODE) TREE_OPERAND (SUBOBJECT_CHECK (NODE), 0)\n-#define START_CATCH_TYPE(NODE)  TREE_TYPE (START_CATCH_STMT_CHECK (NODE))\n \n /* Nonzero if this CTOR_STMT is for the beginning of a constructor.  */\n #define CTOR_BEGIN_P(NODE) \\\n@@ -4005,7 +4005,7 @@ extern cp_printer *cp_printers[256];\n /* in except.c */\n extern void init_exception_processing\t\tPARAMS ((void));\n extern tree expand_start_catch_block\t\tPARAMS ((tree));\n-extern void expand_end_catch_block\t\tPARAMS ((tree));\n+extern void expand_end_catch_block\t\tPARAMS ((void));\n extern void expand_builtin_throw\t\tPARAMS ((void));\n extern void expand_eh_spec_block\t        PARAMS ((tree));\n extern void expand_exception_blocks\t\tPARAMS ((void));\n@@ -4271,9 +4271,9 @@ extern void finish_function_try_block           PARAMS ((tree));\n extern void finish_function_handler_sequence    PARAMS ((tree));\n extern void finish_cleanup_try_block            PARAMS ((tree));\n extern tree begin_handler                       PARAMS ((void));\n-extern tree finish_handler_parms                PARAMS ((tree, tree));\n+extern void finish_handler_parms                PARAMS ((tree, tree));\n extern void begin_catch_block                   PARAMS ((tree));\n-extern void finish_handler                      PARAMS ((tree, tree));\n+extern void finish_handler                      PARAMS ((tree));\n extern void finish_cleanup                      PARAMS ((tree, tree));\n extern tree begin_compound_stmt                 PARAMS ((int));\n extern tree finish_compound_stmt                PARAMS ((int, tree));"}, {"sha": "6706ebf657b1065ddbb5bfec7815287e6d09c3f9", "filename": "gcc/cp/dump.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a6025b4b81a386b54678f8641fbb00b144e6ddf/gcc%2Fcp%2Fdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a6025b4b81a386b54678f8641fbb00b144e6ddf/gcc%2Fcp%2Fdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdump.c?ref=1a6025b4b81a386b54678f8641fbb00b144e6ddf", "patch": "@@ -230,6 +230,7 @@ cp_dump_tree (di, t)\n \n     case HANDLER:\n       dump_stmt (di, t);\n+      dump_child (\"parm\", HANDLER_PARMS (t));\n       dump_child (\"body\", HANDLER_BODY (t));\n       dump_next_stmt (di, t);\n       break;\n@@ -246,12 +247,6 @@ cp_dump_tree (di, t)\n       dump_next_stmt (di, t);\n       break;\n \n-    case START_CATCH_STMT:\n-      dump_stmt (di, t);\n-      queue_and_dump_type (di, t);\n-      dump_next_stmt (di, t);\n-      break;\n-\n     case USING_STMT:\n       dump_stmt (di, t);\n       dump_child (\"nmsp\", USING_STMT_NAMESPACE (t));"}, {"sha": "458590a8f57251fdc5fd0dae6c962ff3e3140b14", "filename": "gcc/cp/except.c", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a6025b4b81a386b54678f8641fbb00b144e6ddf/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a6025b4b81a386b54678f8641fbb00b144e6ddf/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=1a6025b4b81a386b54678f8641fbb00b144e6ddf", "patch": "@@ -391,8 +391,6 @@ tree\n expand_start_catch_block (decl)\n      tree decl;\n {\n-  tree compound_stmt_1;\n-  tree compound_stmt_2;\n   tree exp = NULL_TREE;\n   tree type;\n   bool is_java;\n@@ -404,16 +402,10 @@ expand_start_catch_block (decl)\n   if (decl && !complete_ptr_ref_or_void_ptr_p (TREE_TYPE (decl), NULL_TREE))\n     decl = NULL_TREE;\n \n-  /* Create a binding level for the eh_info and the exception object\n-     cleanup.  */\n-  compound_stmt_1 = begin_compound_stmt (/*has_no_scope=*/0);\n-  note_level_for_catch ();\n-\n   if (decl)\n     type = prepare_eh_type (TREE_TYPE (decl));\n   else\n     type = NULL_TREE;\n-  begin_catch_block (type);\n \n   is_java = false;\n   if (decl)\n@@ -452,13 +444,10 @@ expand_start_catch_block (decl)\n   if (! is_java)\n     push_eh_cleanup (type);\n \n-  /* Create a binding level for the parm.  */\n-  compound_stmt_2 = begin_compound_stmt (/*has_no_scope=*/0);\n-\n   if (decl)\n     initialize_handler_parm (decl, exp);\n \n-  return build_tree_list (compound_stmt_1, compound_stmt_2);\n+  return type;\n }\n \n \n@@ -467,12 +456,8 @@ expand_start_catch_block (decl)\n    the label to jump to if this catch block didn't match.  */\n \n void\n-expand_end_catch_block (blocks)\n-     tree blocks;\n+expand_end_catch_block ()\n {\n-  tree compound_stmt_1 = blocks ? TREE_PURPOSE (blocks): NULL_TREE;\n-  tree compound_stmt_2 = blocks ? TREE_VALUE (blocks): NULL_TREE;\n-\n   if (! doing_eh (1))\n     return;\n \n@@ -482,11 +467,6 @@ expand_end_catch_block (blocks)\n       && (DECL_CONSTRUCTOR_P (current_function_decl)\n \t  || DECL_DESTRUCTOR_P (current_function_decl)))\n     finish_expr_stmt (build_throw (NULL_TREE));\n-\n-  /* Cleanup the EH parameter.  */\n-  finish_compound_stmt (/*has_no_scope=*/0, compound_stmt_2);\n-  /* Cleanup the EH object.  */\n-  finish_compound_stmt (/*has_no_scope=*/0, compound_stmt_1);\n }\n \n tree"}, {"sha": "356e645bbbcb2c2041c15dc781def3fac9b7aa21", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a6025b4b81a386b54678f8641fbb00b144e6ddf/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a6025b4b81a386b54678f8641fbb00b144e6ddf/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=1a6025b4b81a386b54678f8641fbb00b144e6ddf", "patch": "@@ -3518,11 +3518,11 @@ handler_seq:\n \n handler:\n \t  CATCH\n-                { $<ttype>$ = begin_handler(); }\n+                { $<ttype>$ = begin_handler (); }\n           handler_args\n-                { $<ttype>$ = finish_handler_parms ($3, $<ttype>2); }\n+                { finish_handler_parms ($3, $<ttype>2); }\n \t  compstmt\n-                { finish_handler ($<ttype>4, $<ttype>2); }\n+                { finish_handler ($<ttype>2); }\n \t;\n \n type_specifier_seq:"}, {"sha": "19de9614e44dac96cd921055042c78dcaf499a89", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a6025b4b81a386b54678f8641fbb00b144e6ddf/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a6025b4b81a386b54678f8641fbb00b144e6ddf/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1a6025b4b81a386b54678f8641fbb00b144e6ddf", "patch": "@@ -7448,7 +7448,6 @@ tsubst_expr (t, args, complain, in_decl)\n     case HANDLER:\n       {\n \ttree decl;\n-\ttree blocks;\n \n \tprep_stmt (t);\n \tstmt = begin_handler ();\n@@ -7463,9 +7462,9 @@ tsubst_expr (t, args, complain, in_decl)\n \t  }\n \telse\n \t  decl = NULL_TREE;\n-\tblocks = finish_handler_parms (decl, stmt);\n+\tfinish_handler_parms (decl, stmt);\n \ttsubst_expr (HANDLER_BODY (t), args, complain, in_decl);\n-\tfinish_handler (blocks, stmt);\n+\tfinish_handler (stmt);\n       }\n       break;\n "}, {"sha": "fe62bc5420e1a8afb045cc4451e60a35888eeea5", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a6025b4b81a386b54678f8641fbb00b144e6ddf/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a6025b4b81a386b54678f8641fbb00b144e6ddf/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=1a6025b4b81a386b54678f8641fbb00b144e6ddf", "patch": "@@ -54,7 +54,6 @@ static void emit_associated_thunks PARAMS ((tree));\n static void genrtl_try_block PARAMS ((tree));\n static void genrtl_eh_spec_block PARAMS ((tree));\n static void genrtl_handler PARAMS ((tree));\n-static void genrtl_catch_block PARAMS ((tree));\n static void genrtl_ctor_stmt PARAMS ((tree));\n static void genrtl_subobject PARAMS ((tree));\n static void genrtl_named_return_value PARAMS ((void));\n@@ -721,6 +720,8 @@ genrtl_handler (t)\n      tree t;\n {\n   genrtl_do_pushlevel ();\n+  if (!processing_template_decl)\n+    expand_start_catch (HANDLER_TYPE (t));\n   expand_stmt (HANDLER_BODY (t));\n   if (!processing_template_decl)\n     expand_end_catch ();\n@@ -734,21 +735,23 @@ begin_handler ()\n   tree r;\n   r = build_stmt (HANDLER, NULL_TREE, NULL_TREE);\n   add_stmt (r);\n+  /* Create a binding level for the eh_info and the exception object\n+     cleanup.  */\n   do_pushlevel ();\n+  note_level_for_catch ();\n   return r;\n }\n \n /* Finish the handler-parameters for a handler, which may be given by\n    HANDLER.  DECL is the declaration for the catch parameter, or NULL\n    if this is a `catch (...)' clause.  */\n \n-tree\n+void\n finish_handler_parms (decl, handler)\n      tree decl;\n      tree handler;\n {\n-  tree blocks = NULL_TREE;\n-\n+  tree type = NULL_TREE;\n   if (processing_template_decl)\n     {\n       if (decl)\n@@ -757,47 +760,24 @@ finish_handler_parms (decl, handler)\n \t  decl = push_template_decl (decl);\n \t  add_decl_stmt (decl);\n \t  RECHAIN_STMTS (handler, HANDLER_PARMS (handler));\n+\t  type = TREE_TYPE (decl);\n \t}\n     }\n   else\n-    blocks = expand_start_catch_block (decl);\n-\n-  if (decl)\n-    TREE_TYPE (handler) = TREE_TYPE (decl);\n+    type = expand_start_catch_block (decl);\n \n-  return blocks;\n-}\n-\n-/* Generate the RTL for a START_CATCH_STMT. */\n-\n-static void\n-genrtl_catch_block (type)\n-     tree type;\n-{\n-  expand_start_catch (type);\n-}\n-\n-/* Note the beginning of a handler for TYPE.  This function is called\n-   at the point to which control should be transferred when an\n-   appropriately-typed exception is thrown.  */\n-\n-void\n-begin_catch_block (type)\n-     tree type;\n-{\n-  add_stmt (build (START_CATCH_STMT, type));\n+  HANDLER_TYPE (handler) = type;\n }\n \n /* Finish a handler, which may be given by HANDLER.  The BLOCKs are\n    the return value from the matching call to finish_handler_parms.  */\n \n void\n-finish_handler (blocks, handler)\n-     tree blocks;\n+finish_handler (handler)\n      tree handler;\n {\n   if (!processing_template_decl)\n-      expand_end_catch_block (blocks);\n+    expand_end_catch_block ();\n   do_poplevel ();\n   RECHAIN_STMTS (handler, HANDLER_BODY (handler));\n }\n@@ -2167,10 +2147,6 @@ cp_expand_stmt (t)\n       genrtl_decl_cleanup (CLEANUP_DECL (t), CLEANUP_EXPR (t));\n       break;\n \n-    case START_CATCH_STMT:\n-      genrtl_catch_block (TREE_TYPE (t));\n-      break;\n-\n     case CTOR_STMT:\n       genrtl_ctor_stmt (t);\n       break;"}, {"sha": "65ba7f6c55d967fc4287a471d516671a0f16bd22", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a6025b4b81a386b54678f8641fbb00b144e6ddf/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a6025b4b81a386b54678f8641fbb00b144e6ddf/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=1a6025b4b81a386b54678f8641fbb00b144e6ddf", "patch": "@@ -1031,7 +1031,6 @@ cp_statement_code_p (code)\n     {\n     case SUBOBJECT:\n     case CLEANUP_STMT:\n-    case START_CATCH_STMT:\n     case CTOR_STMT:\n     case CTOR_INITIALIZER:\n     case RETURN_INIT:"}]}