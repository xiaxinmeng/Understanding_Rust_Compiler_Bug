{"sha": "f19c9228fc48df0ca59f7f9b1ba8408f7c145153", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE5YzkyMjhmYzQ4ZGYwY2E1OWY3ZjliMWJhODQwOGY3YzE0NTE1Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2000-05-11T14:20:31Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2000-05-11T14:20:31Z"}, "message": "except.c (find_exception_handler_labels_1): New function.\n\n\t* except.c (find_exception_handler_labels_1): New function.\n\t(find_exception_handler_labels): Split into two functions, dive\n\tinto CALL_PLACEHOLDERs when looking for exception handler labels.\n\nFrom-SVN: r33849", "tree": {"sha": "e6c0a6564f15c8dad10774af017a4fc028a9790f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6c0a6564f15c8dad10774af017a4fc028a9790f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f19c9228fc48df0ca59f7f9b1ba8408f7c145153", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f19c9228fc48df0ca59f7f9b1ba8408f7c145153", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f19c9228fc48df0ca59f7f9b1ba8408f7c145153", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f19c9228fc48df0ca59f7f9b1ba8408f7c145153/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "36348eab5d4b9507868787c0a908a3f08d0105a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36348eab5d4b9507868787c0a908a3f08d0105a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36348eab5d4b9507868787c0a908a3f08d0105a7"}], "stats": {"total": 52, "additions": 37, "deletions": 15}, "files": [{"sha": "8ecc00896a6f0227df017e570ed9334d88ef18e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19c9228fc48df0ca59f7f9b1ba8408f7c145153/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19c9228fc48df0ca59f7f9b1ba8408f7c145153/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f19c9228fc48df0ca59f7f9b1ba8408f7c145153", "patch": "@@ -1,3 +1,9 @@\n+2000-05-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* except.c (find_exception_handler_labels_1): New function.\n+\t(find_exception_handler_labels): Split into two functions, dive\n+\tinto CALL_PLACEHOLDERs when looking for exception handler labels.\n+\n 2000-05-11 Stan Cox <scox@cygnus.com>\n \n \t* regrename.c (replace_reg_in_block): Improve REG_DEAD handling."}, {"sha": "2926b5a295b5da55ee19dbf6e1f953dad933d2b0", "filename": "gcc/except.c", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19c9228fc48df0ca59f7f9b1ba8408f7c145153/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19c9228fc48df0ca59f7f9b1ba8408f7c145153/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=f19c9228fc48df0ca59f7f9b1ba8408f7c145153", "patch": "@@ -2388,27 +2388,18 @@ emit_eh_context ()\n       }\n }\n \n-/* Scan the current insns and build a list of handler labels. The\n-   resulting list is placed in the global variable exception_handler_labels.\n+/* Scan the insn chain F and build a list of handler labels. The\n+   resulting list is placed in the global variable exception_handler_labels.  */\n \n-   It is called after the last exception handling region is added to\n-   the current function (when the rtl is almost all built for the\n-   current function) and before the jump optimization pass.  */\n-\n-void\n-find_exception_handler_labels ()\n+static void\n+find_exception_handler_labels_1 (f)\n+     rtx f;\n {\n   rtx insn;\n \n-  exception_handler_labels = NULL_RTX;\n-\n-  /* If we aren't doing exception handling, there isn't much to check.  */\n-  if (! doing_eh (0))\n-    return;\n-\n   /* For each start of a region, add its label to the list.  */\n \n-  for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n+  for (insn = f; insn; insn = NEXT_INSN (insn))\n     {\n       struct handler_info* ptr;\n       if (GET_CODE (insn) == NOTE\n@@ -2427,9 +2418,34 @@ find_exception_handler_labels ()\n                                ptr->handler_label, exception_handler_labels);\n             }\n \t}\n+      else if (GET_CODE (insn) == CALL_INSN\n+\t       && GET_CODE (PATTERN (insn)) == CALL_PLACEHOLDER)\n+\t{\n+\t  find_exception_handler_labels_1 (XEXP (PATTERN (insn), 0));\n+\t  find_exception_handler_labels_1 (XEXP (PATTERN (insn), 1));\n+\t  find_exception_handler_labels_1 (XEXP (PATTERN (insn), 2));\n+\t}\n     }\n }\n \n+/* Scan the current insns and build a list of handler labels. The\n+   resulting list is placed in the global variable exception_handler_labels.\n+\n+   It is called after the last exception handling region is added to\n+   the current function (when the rtl is almost all built for the\n+   current function) and before the jump optimization pass.  */\n+void\n+find_exception_handler_labels ()\n+{\n+  exception_handler_labels = NULL_RTX;\n+\n+  /* If we aren't doing exception handling, there isn't much to check.  */\n+  if (! doing_eh (0))\n+    return;\n+\n+  find_exception_handler_labels_1 (get_insns ());\n+}     \n+\n /* Return a value of 1 if the parameter label number is an exception handler\n    label. Return 0 otherwise. */\n "}]}