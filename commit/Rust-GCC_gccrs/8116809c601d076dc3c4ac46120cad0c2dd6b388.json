{"sha": "8116809c601d076dc3c4ac46120cad0c2dd6b388", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODExNjgwOWM2MDFkMDc2ZGMzYzRhYzQ2MTIwY2FkMGMyZGQ2YjM4OA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-06-23T11:58:25Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-06-23T11:58:25Z"}, "message": "genrecog.c (pred_table): Remove the entry for mode_independent_operand.\n\n\t* genrecog.c (pred_table): Remove the entry for\n\tmode_independent_operand.\n\t* recog.c (next_insns_test_no_inequality): Remove.\n\t(mode_independent_operand): Likewise.\n\t* recog.h: Remove the prototype for mode_independent_operand.\n\nFrom-SVN: r68360", "tree": {"sha": "fec517badf657435fd0cc376a1fbb74717f22a0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fec517badf657435fd0cc376a1fbb74717f22a0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8116809c601d076dc3c4ac46120cad0c2dd6b388", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8116809c601d076dc3c4ac46120cad0c2dd6b388", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8116809c601d076dc3c4ac46120cad0c2dd6b388", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8116809c601d076dc3c4ac46120cad0c2dd6b388/comments", "author": null, "committer": null, "parents": [{"sha": "802a99073ffb4a56ad84ef91341815bdcf1580e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/802a99073ffb4a56ad84ef91341815bdcf1580e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/802a99073ffb4a56ad84ef91341815bdcf1580e4"}], "stats": {"total": 65, "additions": 9, "deletions": 56}, "files": [{"sha": "4e5a1783a72c6a776863303ce29543874dabcc46", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8116809c601d076dc3c4ac46120cad0c2dd6b388/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8116809c601d076dc3c4ac46120cad0c2dd6b388/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8116809c601d076dc3c4ac46120cad0c2dd6b388", "patch": "@@ -1,3 +1,11 @@\n+2003-06-23  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* genrecog.c (pred_table): Remove the entry for\n+\tmode_independent_operand.\n+\t* recog.c (next_insns_test_no_inequality): Remove.\n+\t(mode_independent_operand): Likewise.\n+\t* recog.h: Remove the prototype for mode_independent_operand.\n+\n 2003-06-22  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300.c (output_simode_bld): Use rotxl.l to"}, {"sha": "217f3ad0c7a9752a7702ccfff0c1d85c4c997936", "filename": "gcc/genrecog.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8116809c601d076dc3c4ac46120cad0c2dd6b388/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8116809c601d076dc3c4ac46120cad0c2dd6b388/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=8116809c601d076dc3c4ac46120cad0c2dd6b388", "patch": "@@ -212,9 +212,7 @@ static const struct pred_table\n   {\"indirect_operand\", {SUBREG, MEM}},\n   {\"comparison_operator\", {EQ, NE, LE, LT, GE, GT, LEU, LTU, GEU, GTU,\n \t\t\t   UNORDERED, ORDERED, UNEQ, UNGE, UNGT, UNLE,\n-\t\t\t   UNLT, LTGT}},\n-  {\"mode_independent_operand\", {CONST_INT, CONST_DOUBLE, CONST, SYMBOL_REF,\n-\t\t\t\tLABEL_REF, SUBREG, REG, MEM, ADDRESSOF}}\n+\t\t\t   UNLT, LTGT}}\n };\n \n #define NUM_KNOWN_PREDS ARRAY_SIZE (preds)"}, {"sha": "c539a38773408420b22cc05123d1e61e80f13e1e", "filename": "gcc/recog.c", "status": "modified", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8116809c601d076dc3c4ac46120cad0c2dd6b388/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8116809c601d076dc3c4ac46120cad0c2dd6b388/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=8116809c601d076dc3c4ac46120cad0c2dd6b388", "patch": "@@ -727,34 +727,6 @@ next_insn_tests_no_inequality (insn)\n \t   || GET_CODE (next) == CALL_INSN)\n \t  && ! inequality_comparisons_p (PATTERN (next)));\n }\n-\n-#if 0  /* This is useless since the insn that sets the cc's\n-\t  must be followed immediately by the use of them.  */\n-/* Return 1 if the CC value set up by INSN is not used.  */\n-\n-int\n-next_insns_test_no_inequality (insn)\n-     rtx insn;\n-{\n-  rtx next = NEXT_INSN (insn);\n-\n-  for (; next != 0; next = NEXT_INSN (next))\n-    {\n-      if (GET_CODE (next) == CODE_LABEL\n-\t  || GET_CODE (next) == BARRIER)\n-\treturn 1;\n-      if (GET_CODE (next) == NOTE)\n-\tcontinue;\n-      if (inequality_comparisons_p (PATTERN (next)))\n-\treturn 0;\n-      if (sets_cc0_p (PATTERN (next)) == 1)\n-\treturn 1;\n-      if (! reg_mentioned_p (cc0_rtx, PATTERN (next)))\n-\treturn 1;\n-    }\n-  return 1;\n-}\n-#endif\n #endif\n \f\n /* This is used by find_single_use to locate an rtx that contains exactly one\n@@ -2056,30 +2028,6 @@ mode_dependent_address_p (addr)\n  win: ATTRIBUTE_UNUSED_LABEL\n   return 1;\n }\n-\n-/* Return 1 if OP is a general operand\n-   other than a memory ref with a mode dependent address.  */\n-\n-int\n-mode_independent_operand (op, mode)\n-     enum machine_mode mode;\n-     rtx op;\n-{\n-  rtx addr;\n-\n-  if (! general_operand (op, mode))\n-    return 0;\n-\n-  if (GET_CODE (op) != MEM)\n-    return 1;\n-\n-  addr = XEXP (op, 0);\n-  GO_IF_MODE_DEPENDENT_ADDRESS (addr, lose);\n-  return 1;\n-  /* Label `lose' might (not) be used via GO_IF_MODE_DEPENDENT_ADDRESS.  */\n- lose: ATTRIBUTE_UNUSED_LABEL\n-  return 0;\n-}\n \f\n /* Like extract_insn, but save insn extracted and don't extract again, when\n    called again for the same insn expecting that recog_data still contain the"}, {"sha": "76349b63bbbe688e5ad8c971ce7b11ecb27f985c", "filename": "gcc/recog.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8116809c601d076dc3c4ac46120cad0c2dd6b388/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8116809c601d076dc3c4ac46120cad0c2dd6b388/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=8116809c601d076dc3c4ac46120cad0c2dd6b388", "patch": "@@ -112,7 +112,6 @@ extern int push_operand\t\t\tPARAMS ((rtx, enum machine_mode));\n extern int pop_operand\t\t\tPARAMS ((rtx, enum machine_mode));\n extern int memory_operand\t\tPARAMS ((rtx, enum machine_mode));\n extern int indirect_operand\t\tPARAMS ((rtx, enum machine_mode));\n-extern int mode_independent_operand\tPARAMS ((rtx, enum machine_mode));\n extern int comparison_operator\t\tPARAMS ((rtx, enum machine_mode));\n \n extern int offsettable_memref_p\t\tPARAMS ((rtx));"}]}