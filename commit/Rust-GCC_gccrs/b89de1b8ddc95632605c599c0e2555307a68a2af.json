{"sha": "b89de1b8ddc95632605c599c0e2555307a68a2af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg5ZGUxYjhkZGM5NTYzMjYwNWM1OTljMGUyNTU1MzA3YTY4YTJhZg==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2016-11-23T17:17:35Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2016-11-23T17:17:35Z"}, "message": "[Patch 4/17] Implement TARGET_C_EXCESS_PRECISION for m68k\n\ngcc/\n\n\t* config/m68k/m68k.c (m68k_excess_precision): New.\n\t(TARGET_C_EXCESS_PRECISION): Define.\n\nFrom-SVN: r242774", "tree": {"sha": "a128fc2fda7f3ceaac3644fd20a8a3f6c6be5874", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a128fc2fda7f3ceaac3644fd20a8a3f6c6be5874"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b89de1b8ddc95632605c599c0e2555307a68a2af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b89de1b8ddc95632605c599c0e2555307a68a2af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b89de1b8ddc95632605c599c0e2555307a68a2af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b89de1b8ddc95632605c599c0e2555307a68a2af/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "638108bd6748d7c38dceac491a62c6ce5355850d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/638108bd6748d7c38dceac491a62c6ce5355850d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/638108bd6748d7c38dceac491a62c6ce5355850d"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "30fbed63c884ae04c1eee1134fb223d60210347f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89de1b8ddc95632605c599c0e2555307a68a2af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89de1b8ddc95632605c599c0e2555307a68a2af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b89de1b8ddc95632605c599c0e2555307a68a2af", "patch": "@@ -1,3 +1,8 @@\n+2016-11-23  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/m68k/m68k.c (m68k_excess_precision): New.\n+\t(TARGET_C_EXCESS_PRECISION): Define.\n+\n 2016-11-23  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/s390/s390.c (s390_excess_precision): New."}, {"sha": "7bc26bf17e69eeef98ed2be75aa4c35909afb7e6", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89de1b8ddc95632605c599c0e2555307a68a2af/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89de1b8ddc95632605c599c0e2555307a68a2af/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=b89de1b8ddc95632605c599c0e2555307a68a2af", "patch": "@@ -183,6 +183,8 @@ static rtx m68k_function_arg (cumulative_args_t, machine_mode,\n static bool m68k_cannot_force_const_mem (machine_mode mode, rtx x);\n static bool m68k_output_addr_const_extra (FILE *, rtx);\n static void m68k_init_sync_libfuncs (void) ATTRIBUTE_UNUSED;\n+static enum flt_eval_method\n+m68k_excess_precision (enum excess_precision_type);\n \f\n /* Initialize the GCC target structure.  */\n \n@@ -323,6 +325,9 @@ static void m68k_init_sync_libfuncs (void) ATTRIBUTE_UNUSED;\n #undef TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA\n #define TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA m68k_output_addr_const_extra\n \n+#undef TARGET_C_EXCESS_PRECISION\n+#define TARGET_C_EXCESS_PRECISION m68k_excess_precision\n+\n /* The value stored by TAS.  */\n #undef TARGET_ATOMIC_TEST_AND_SET_TRUEVAL\n #define TARGET_ATOMIC_TEST_AND_SET_TRUEVAL 128\n@@ -6534,4 +6539,36 @@ m68k_epilogue_uses (int regno ATTRIBUTE_UNUSED)\n \t      == m68k_fk_interrupt_handler));\n }\n \n+\n+/* Implement TARGET_C_EXCESS_PRECISION.\n+\n+   Set the value of FLT_EVAL_METHOD in float.h.  When using 68040 fp\n+   instructions, we get proper intermediate rounding, otherwise we\n+   get extended precision results.  */\n+\n+static enum flt_eval_method\n+m68k_excess_precision (enum excess_precision_type type)\n+{\n+  switch (type)\n+    {\n+      case EXCESS_PRECISION_TYPE_FAST:\n+\t/* The fastest type to promote to will always be the native type,\n+\t   whether that occurs with implicit excess precision or\n+\t   otherwise.  */\n+\treturn FLT_EVAL_METHOD_PROMOTE_TO_FLOAT;\n+      case EXCESS_PRECISION_TYPE_STANDARD:\n+      case EXCESS_PRECISION_TYPE_IMPLICIT:\n+\t/* Otherwise, the excess precision we want when we are\n+\t   in a standards compliant mode, and the implicit precision we\n+\t   provide can be identical.  */\n+\tif (TARGET_68040 || ! TARGET_68881)\n+\t  return FLT_EVAL_METHOD_PROMOTE_TO_FLOAT;\n+\n+\treturn FLT_EVAL_METHOD_PROMOTE_TO_LONG_DOUBLE;\n+      default:\n+\tgcc_unreachable ();\n+    }\n+  return FLT_EVAL_METHOD_UNPREDICTABLE;\n+}\n+\n #include \"gt-m68k.h\""}]}