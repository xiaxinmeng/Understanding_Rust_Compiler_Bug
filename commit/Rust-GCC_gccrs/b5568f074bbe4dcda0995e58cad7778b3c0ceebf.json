{"sha": "b5568f074bbe4dcda0995e58cad7778b3c0ceebf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU1NjhmMDc0YmJlNGRjZGEwOTk1ZTU4Y2FkNzc3OGIzYzBjZWViZg==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2005-08-15T17:58:58Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2005-08-15T17:58:58Z"}, "message": "rs6000.md (QHSI): New mode macro.\n\n\t* config/rs6000/rs6000.md (QHSI): New mode macro.\n\t(wd): Extend mode attr for QImode and HImode\n\t(dbits): New mode attr.\n\t(zero_extend<mode>di2): Convert to mode macro.\n\nFrom-SVN: r103118", "tree": {"sha": "f347340efc5959ab31197e86548747d77ab7deb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f347340efc5959ab31197e86548747d77ab7deb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5568f074bbe4dcda0995e58cad7778b3c0ceebf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5568f074bbe4dcda0995e58cad7778b3c0ceebf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5568f074bbe4dcda0995e58cad7778b3c0ceebf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5568f074bbe4dcda0995e58cad7778b3c0ceebf/comments", "author": null, "committer": null, "parents": [{"sha": "7741b4512db528fa42a12f9e5decdf306b13f289", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7741b4512db528fa42a12f9e5decdf306b13f289", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7741b4512db528fa42a12f9e5decdf306b13f289"}], "stats": {"total": 177, "additions": 28, "deletions": 149}, "files": [{"sha": "59c74826582f5f756c00f8bbc759f53cffed38a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5568f074bbe4dcda0995e58cad7778b3c0ceebf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5568f074bbe4dcda0995e58cad7778b3c0ceebf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5568f074bbe4dcda0995e58cad7778b3c0ceebf", "patch": "@@ -1,3 +1,10 @@\n+2005-08-15  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.md (QHSI): New mode macro.\n+\t(wd): Extend mode attr for QImode and HImode\n+\t(dbits): New mode attr.\n+\t(zero_extend<mode>di2): Convert to mode macro.\n+\n 2005-08-15  Steve Ellcey  <sje@cup.hp.com>\n \n \tPR target/21841"}, {"sha": "7fbe2e5b67d05d39892d106384fac538ec191185", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 21, "deletions": 149, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5568f074bbe4dcda0995e58cad7778b3c0ceebf/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5568f074bbe4dcda0995e58cad7778b3c0ceebf/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=b5568f074bbe4dcda0995e58cad7778b3c0ceebf", "patch": "@@ -134,6 +134,9 @@\n ; Any supported integer mode that fits in one register.\n (define_mode_macro INT1 [QI HI SI (DI \"TARGET_POWERPC64\")])\n \n+; extend modes for DImode\n+(define_mode_macro QHSI [QI HI SI])\n+\n ; SImode or DImode, even if DImode doesn't fit in GPRs.\n (define_mode_macro SDI [SI DI])\n \n@@ -149,42 +152,45 @@\n \n ; Various instructions that come in SI and DI forms.\n ; A generic w/d attribute, for things like cmpw/cmpd.\n-(define_mode_attr wd [(SI \"w\") (DI \"d\")])\n+(define_mode_attr wd [(QI \"b\") (HI \"h\") (SI \"w\") (DI \"d\")])\n+\n+; DImode bits\n+(define_mode_attr dbits [(QI \"56\") (HI \"48\") (SI \"32\")])\n \n \f\n ;; Start with fixed-point load and store insns.  Here we put only the more\n ;; complex forms.  Basic data transfer is done later.\n \n-(define_expand \"zero_extendqidi2\"\n+(define_expand \"zero_extend<mode>di2\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(zero_extend:DI (match_operand:QI 1 \"gpc_reg_operand\" \"\")))]\n+\t(zero_extend:DI (match_operand:QHSI 1 \"gpc_reg_operand\" \"\")))]\n   \"TARGET_POWERPC64\"\n   \"\")\n \n-(define_insn \"\"\n+(define_insn \"*zero_extend<mode>di2_internal1\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(zero_extend:DI (match_operand:QI 1 \"reg_or_mem_operand\" \"m,r\")))]\n+\t(zero_extend:DI (match_operand:QHSI 1 \"reg_or_mem_operand\" \"m,r\")))]\n   \"TARGET_POWERPC64\"\n   \"@\n-   lbz%U1%X1 %0,%1\n-   rldicl %0,%1,0,56\"\n+   l<wd>z%U1%X1 %0,%1\n+   rldicl %0,%1,0,<dbits>\"\n   [(set_attr \"type\" \"load,*\")])\n \n-(define_insn \"\"\n+(define_insn \"*zero_extend<mode>di2_internal2\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (zero_extend:DI (match_operand:QI 1 \"gpc_reg_operand\" \"r,r\"))\n+\t(compare:CC (zero_extend:DI (match_operand:QHSI 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:DI 2 \"=r,r\"))]\n   \"TARGET_64BIT\"\n   \"@\n-   rldicl. %2,%1,0,56\n+   rldicl. %2,%1,0,<dbits>\n    #\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n   [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC (zero_extend:DI (match_operand:QI 1 \"gpc_reg_operand\" \"\"))\n+\t(compare:CC (zero_extend:DI (match_operand:QHSI 1 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:DI 2 \"\"))]\n   \"TARGET_POWERPC64 && reload_completed\"\n@@ -195,22 +201,22 @@\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_insn \"\"\n+(define_insn \"*zero_extend<mode>di2_internal3\"\n   [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (zero_extend:DI (match_operand:QI 1 \"gpc_reg_operand\" \"r,r\"))\n+\t(compare:CC (zero_extend:DI (match_operand:QHSI 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(zero_extend:DI (match_dup 1)))]\n   \"TARGET_64BIT\"\n   \"@\n-   rldicl. %0,%1,0,56\n+   rldicl. %0,%1,0,<dbits>\n    #\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n   [(set (match_operand:CC 2 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC (zero_extend:DI (match_operand:QI 1 \"gpc_reg_operand\" \"\"))\n+\t(compare:CC (zero_extend:DI (match_operand:QHSI 1 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n \t(zero_extend:DI (match_dup 1)))]\n@@ -280,73 +286,6 @@\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_expand \"zero_extendhidi2\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(zero_extend:DI (match_operand:HI 1 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_POWERPC64\"\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(zero_extend:DI (match_operand:HI 1 \"reg_or_mem_operand\" \"m,r\")))]\n-  \"TARGET_POWERPC64\"\n-  \"@\n-   lhz%U1%X1 %0,%1\n-   rldicl %0,%1,0,48\"\n-  [(set_attr \"type\" \"load,*\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (zero_extend:DI (match_operand:HI 1 \"gpc_reg_operand\" \"r,r\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 2 \"=r,r\"))]\n-  \"TARGET_64BIT\"\n-  \"@\n-   rldicl. %2,%1,0,48\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC (zero_extend:DI (match_operand:HI 1 \"gpc_reg_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 2 \"\"))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n-  [(set (match_dup 2)\n-\t(zero_extend:DI (match_dup 1)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 2)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (zero_extend:DI (match_operand:HI 1 \"gpc_reg_operand\" \"r,r\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(zero_extend:DI (match_dup 1)))]\n-  \"TARGET_64BIT\"\n-  \"@\n-   rldicl. %0,%1,0,48\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 2 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC (zero_extend:DI (match_operand:HI 1 \"gpc_reg_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(zero_extend:DI (match_dup 1)))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n-  [(set (match_dup 0)\n-\t(zero_extend:DI (match_dup 1)))\n-   (set (match_dup 2)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n (define_expand \"extendhidi2\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n \t(sign_extend:DI (match_operand:HI 1 \"gpc_reg_operand\" \"\")))]\n@@ -414,73 +353,6 @@\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_expand \"zero_extendsidi2\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(zero_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_POWERPC64\"\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(zero_extend:DI (match_operand:SI 1 \"reg_or_mem_operand\" \"m,r\")))]\n-  \"TARGET_POWERPC64\"\n-  \"@\n-   lwz%U1%X1 %0,%1\n-   rldicl %0,%1,0,32\"\n-  [(set_attr \"type\" \"load,*\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (zero_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 2 \"=r,r\"))]\n-  \"TARGET_64BIT\"\n-  \"@\n-   rldicl. %2,%1,0,32\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC (zero_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 2 \"\"))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n-  [(set (match_dup 2)\n-\t(zero_extend:DI (match_dup 1)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 2)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (zero_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(zero_extend:DI (match_dup 1)))]\n-  \"TARGET_64BIT\"\n-  \"@\n-   rldicl. %0,%1,0,32\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 2 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC (zero_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(zero_extend:DI (match_dup 1)))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n-  [(set (match_dup 0)\n-\t(zero_extend:DI (match_dup 1)))\n-   (set (match_dup 2)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n (define_expand \"extendsidi2\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n \t(sign_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"\")))]"}]}