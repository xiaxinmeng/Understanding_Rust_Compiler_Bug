{"sha": "182190f2b3a236eb30bd717981e1f2c9b51cea06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTgyMTkwZjJiM2EyMzZlYjMwYmQ3MTc5ODFlMWYyYzliNTFjZWEwNg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2015-11-11T14:24:09Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-11-11T14:24:09Z"}, "message": "gimplify.c (enum omp_region_type): Add ORT_ACC, ORT_ACC_DATA, ORT_ACC_PARALLEL, ORT_ACC_KERNELS.\n\n\tgcc/\n\t* gcc/gimplify.c (enum  omp_region_type): Add ORT_ACC,\n\tORT_ACC_DATA, ORT_ACC_PARALLEL, ORT_ACC_KERNELS.  Adjust ORT_NONE.\n\t(gimple_add_tmp_var): Add ORT_ACC checks.\n\t(gimplify_var_or_parm_decl): Likewise.\n\t(omp_firstprivatize_variable): Likewise. Use ORT_TARGET_DATA as a\n\tmask.\n\t(omp_add_variable): Look in outer contexts for openacc and allow\n\treductions with other sharing. Add ORT_ACC and ORT_TARGET_DATA\n\tchecks.\n\t(omp_notice_variable, omp_is_private, omp_check_private): Add\n\tORT_ACC checks.\n\t(gimplify_scan_omp_clauses: Treat ORT_ACC as ORT_WORKSHARE.\n\tPermit private openacc reductions.\n\t(gimplify_oacc_cache): Specify ORT_ACC.\n\t(gimplify_omp_workshare): Adjust OpenACC region types.\n\t(gimplify_omp_target_update): Likewise.\n\t* gcc/omp-low.c (scan_sharing_clauses): Remove Openacc\n\tfirstprivate sorry.\n\t(lower-rec_input_clauses): Don't handle openacc firstprivate\n\treferences here.\n\t(lower_omp_target): Emit initializers for openacc firstprivate vars.\n\n\tgcc/testsuite/\n\t* gfortran.dg/goacc/private-3.f95: Remove xfail.\n\t* gfortran.dg/goacc/combined_loop.f90: Remove xfail.\n\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c-c++-common/loop-red-v-2.c: Remove xfail.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-red-w-2.c: Remove xfail.\n\t* testsuite/libgomp.oacc-c-c++-common/firstprivate-1.c: New.\n\t* testsuite/libgomp.oacc-c-c++-common/firstprivate-2.c: New.\n\nCo-Authored-By: Cesar Philippidis <cesar@codesourcery.com>\n\nFrom-SVN: r230169", "tree": {"sha": "295e38d6632d00a37b02d200a9f7a761f46af3f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/295e38d6632d00a37b02d200a9f7a761f46af3f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/182190f2b3a236eb30bd717981e1f2c9b51cea06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/182190f2b3a236eb30bd717981e1f2c9b51cea06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/182190f2b3a236eb30bd717981e1f2c9b51cea06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/182190f2b3a236eb30bd717981e1f2c9b51cea06/comments", "author": null, "committer": null, "parents": [{"sha": "7700cd858ff97a257d6f48b0d079780f445821da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7700cd858ff97a257d6f48b0d079780f445821da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7700cd858ff97a257d6f48b0d079780f445821da"}], "stats": {"total": 350, "additions": 278, "deletions": 72}, "files": [{"sha": "b3bbc21c87ac87af911f300ea6435366868554be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182190f2b3a236eb30bd717981e1f2c9b51cea06/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182190f2b3a236eb30bd717981e1f2c9b51cea06/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=182190f2b3a236eb30bd717981e1f2c9b51cea06", "patch": "@@ -1,3 +1,29 @@\n+2015-11-11  Nathan Sidwell  <nathan@codesourcery.com>\n+\t    Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\tgcc/\n+\t* gcc/gimplify.c (enum  omp_region_type): Add ORT_ACC,\n+\tORT_ACC_DATA, ORT_ACC_PARALLEL, ORT_ACC_KERNELS.  Adjust ORT_NONE.\n+\t(gimple_add_tmp_var): Add ORT_ACC checks.\n+\t(gimplify_var_or_parm_decl): Likewise.\n+\t(omp_firstprivatize_variable): Likewise. Use ORT_TARGET_DATA as a\n+\tmask.\n+\t(omp_add_variable): Look in outer contexts for openacc and allow\n+\treductions with other sharing. Add ORT_ACC and ORT_TARGET_DATA\n+\tchecks.\n+\t(omp_notice_variable, omp_is_private, omp_check_private): Add\n+\tORT_ACC checks.\n+\t(gimplify_scan_omp_clauses: Treat ORT_ACC as ORT_WORKSHARE.\n+\tPermit private openacc reductions.\n+\t(gimplify_oacc_cache): Specify ORT_ACC.\n+\t(gimplify_omp_workshare): Adjust OpenACC region types.\n+\t(gimplify_omp_target_update): Likewise.\n+\t* gcc/omp-low.c (scan_sharing_clauses): Remove Openacc\n+\tfirstprivate sorry.\n+\t(lower-rec_input_clauses): Don't handle openacc firstprivate\n+\treferences here.\n+\t(lower_omp_target): Emit initializers for openacc firstprivate vars.\n+\n 2015-11-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR target/67265"}, {"sha": "66e5168746f05c0b120383391f03ab8ea7901972", "filename": "gcc/gimplify.c", "status": "modified", "additions": 99, "deletions": 42, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182190f2b3a236eb30bd717981e1f2c9b51cea06/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182190f2b3a236eb30bd717981e1f2c9b51cea06/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=182190f2b3a236eb30bd717981e1f2c9b51cea06", "patch": "@@ -95,22 +95,34 @@ enum gimplify_omp_var_data\n \n enum omp_region_type\n {\n-  ORT_WORKSHARE = 0,\n-  ORT_SIMD = 1,\n-  ORT_PARALLEL = 2,\n-  ORT_COMBINED_PARALLEL = 3,\n-  ORT_TASK = 4,\n-  ORT_UNTIED_TASK = 5,\n-  ORT_TEAMS = 8,\n-  ORT_COMBINED_TEAMS = 9,\n+  ORT_WORKSHARE = 0x00,\n+  ORT_SIMD \t= 0x01,\n+\n+  ORT_PARALLEL\t= 0x02,\n+  ORT_COMBINED_PARALLEL = 0x03,\n+\n+  ORT_TASK\t= 0x04,\n+  ORT_UNTIED_TASK = 0x05,\n+\n+  ORT_TEAMS\t= 0x08,\n+  ORT_COMBINED_TEAMS = 0x09,\n+\n   /* Data region.  */\n-  ORT_TARGET_DATA = 16,\n+  ORT_TARGET_DATA = 0x10,\n+\n   /* Data region with offloading.  */\n-  ORT_TARGET = 32,\n-  ORT_COMBINED_TARGET = 33,\n+  ORT_TARGET\t= 0x20,\n+  ORT_COMBINED_TARGET = 0x21,\n+\n+  /* OpenACC variants.  */\n+  ORT_ACC\t= 0x40,  /* A generic OpenACC region.  */\n+  ORT_ACC_DATA\t= ORT_ACC | ORT_TARGET_DATA, /* Data construct.  */\n+  ORT_ACC_PARALLEL = ORT_ACC | ORT_TARGET,  /* Parallel construct */\n+  ORT_ACC_KERNELS  = ORT_ACC | ORT_TARGET | 0x80,  /* Kernels construct.  */\n+\n   /* Dummy OpenMP region, used to disable expansion of\n      DECL_VALUE_EXPRs in taskloop pre body.  */\n-  ORT_NONE = 64\n+  ORT_NONE\t= 0x100\n };\n \n /* Gimplify hashtable helper.  */\n@@ -689,7 +701,8 @@ gimple_add_tmp_var (tree tmp)\n \t  struct gimplify_omp_ctx *ctx = gimplify_omp_ctxp;\n \t  while (ctx\n \t\t && (ctx->region_type == ORT_WORKSHARE\n-\t\t     || ctx->region_type == ORT_SIMD))\n+\t\t     || ctx->region_type == ORT_SIMD\n+\t\t     || ctx->region_type == ORT_ACC))\n \t    ctx = ctx->outer_context;\n \t  if (ctx)\n \t    omp_add_variable (ctx, tmp, GOVD_LOCAL | GOVD_SEEN);\n@@ -1804,7 +1817,8 @@ gimplify_var_or_parm_decl (tree *expr_p)\n \t  struct gimplify_omp_ctx *ctx = gimplify_omp_ctxp;\n \t  while (ctx\n \t\t && (ctx->region_type == ORT_WORKSHARE\n-\t\t     || ctx->region_type == ORT_SIMD))\n+\t\t     || ctx->region_type == ORT_SIMD\n+\t\t     || ctx->region_type == ORT_ACC))\n \t    ctx = ctx->outer_context;\n \t  if (!ctx && !nonlocal_vlas->add (decl))\n \t    {\n@@ -5579,7 +5593,8 @@ omp_firstprivatize_variable (struct gimplify_omp_ctx *ctx, tree decl)\n \t}\n       else if (ctx->region_type != ORT_WORKSHARE\n \t       && ctx->region_type != ORT_SIMD\n-\t       && ctx->region_type != ORT_TARGET_DATA)\n+\t       && ctx->region_type != ORT_ACC\n+\t       && !(ctx->region_type & ORT_TARGET_DATA))\n \tomp_add_variable (ctx, decl, GOVD_FIRSTPRIVATE);\n \n       ctx = ctx->outer_context;\n@@ -5667,11 +5682,13 @@ omp_add_variable (struct gimplify_omp_ctx *ctx, tree decl, unsigned int flags)\n       /* We shouldn't be re-adding the decl with the same data\n \t sharing class.  */\n       gcc_assert ((n->value & GOVD_DATA_SHARE_CLASS & flags) == 0);\n-      /* The only combination of data sharing classes we should see is\n-\t FIRSTPRIVATE and LASTPRIVATE.  */\n       nflags = n->value | flags;\n-      gcc_assert ((nflags & GOVD_DATA_SHARE_CLASS)\n-\t\t  == (GOVD_FIRSTPRIVATE | GOVD_LASTPRIVATE)\n+      /* The only combination of data sharing classes we should see is\n+\t FIRSTPRIVATE and LASTPRIVATE.  However, OpenACC permits\n+\t reduction variables to be used in data sharing clauses.  */\n+      gcc_assert ((ctx->region_type & ORT_ACC) != 0\n+\t\t  || ((nflags & GOVD_DATA_SHARE_CLASS)\n+\t\t      == (GOVD_FIRSTPRIVATE | GOVD_LASTPRIVATE))\n \t\t  || (flags & GOVD_DATA_SHARE_CLASS) == 0);\n       n->value = nflags;\n       return;\n@@ -5968,20 +5985,47 @@ omp_notice_variable (struct gimplify_omp_ctx *ctx, tree decl, bool in_code)\n \t      else if (is_scalar)\n \t\tnflags |= GOVD_FIRSTPRIVATE;\n \t    }\n-\t  tree type = TREE_TYPE (decl);\n-\t  if (nflags == flags\n-\t      && gimplify_omp_ctxp->target_firstprivatize_array_bases\n-\t      && lang_hooks.decls.omp_privatize_by_reference (decl))\n-\t    type = TREE_TYPE (type);\n-\t  if (nflags == flags\n-\t      && !lang_hooks.types.omp_mappable_type (type))\n+\n+\t  struct gimplify_omp_ctx *octx = ctx->outer_context;\n+\t  if ((ctx->region_type & ORT_ACC) && octx)\n \t    {\n-\t      error (\"%qD referenced in target region does not have \"\n-\t\t     \"a mappable type\", decl);\n-\t      nflags |= GOVD_MAP | GOVD_EXPLICIT;\n+\t      /* Look in outer OpenACC contexts, to see if there's a\n+\t\t data attribute for this variable.  */\n+\t      omp_notice_variable (octx, decl, in_code);\n+\n+\t      for (; octx; octx = octx->outer_context)\n+\t\t{\n+\t\t  if (!(octx->region_type & (ORT_TARGET_DATA | ORT_TARGET)))\n+\t\t    break;\n+\t\t  splay_tree_node n2\n+\t\t    = splay_tree_lookup (octx->variables,\n+\t\t\t\t\t (splay_tree_key) decl);\n+\t\t  if (n2)\n+\t\t    {\n+\t\t      nflags |= GOVD_MAP;\n+\t\t      goto found_outer;\n+\t\t    }\n+\t\t}\n \t    }\n-\t  else if (nflags == flags)\n-\t    nflags |= GOVD_MAP;\n+\n+\t  {\n+\t    tree type = TREE_TYPE (decl);\n+\n+\t    if (nflags == flags\n+\t\t&& gimplify_omp_ctxp->target_firstprivatize_array_bases\n+\t\t&& lang_hooks.decls.omp_privatize_by_reference (decl))\n+\t      type = TREE_TYPE (type);\n+\t    if (nflags == flags\n+\t\t&& !lang_hooks.types.omp_mappable_type (type))\n+\t      {\n+\t\terror (\"%qD referenced in target region does not have \"\n+\t\t       \"a mappable type\", decl);\n+\t\tnflags |= GOVD_MAP | GOVD_EXPLICIT;\n+\t      }\n+\t    else if (nflags == flags)\n+\t      nflags |= GOVD_MAP;\n+\t  }\n+\tfound_outer:\n \t  omp_add_variable (ctx, decl, nflags);\n \t}\n       else\n@@ -5998,7 +6042,8 @@ omp_notice_variable (struct gimplify_omp_ctx *ctx, tree decl, bool in_code)\n     {\n       if (ctx->region_type == ORT_WORKSHARE\n \t  || ctx->region_type == ORT_SIMD\n-\t  || ctx->region_type == ORT_TARGET_DATA)\n+\t  || ctx->region_type == ORT_ACC\n+\t  || (ctx->region_type & ORT_TARGET_DATA) != 0)\n \tgoto do_outer;\n \n       flags = omp_default_clause (ctx, decl, in_code, flags);\n@@ -6112,7 +6157,8 @@ omp_is_private (struct gimplify_omp_ctx *ctx, tree decl, int simd)\n     }\n \n   if (ctx->region_type != ORT_WORKSHARE\n-      && ctx->region_type != ORT_SIMD)\n+      && ctx->region_type != ORT_SIMD\n+      && ctx->region_type != ORT_ACC)\n     return false;\n   else if (ctx->outer_context)\n     return omp_is_private (ctx->outer_context, decl, simd);\n@@ -6168,7 +6214,8 @@ omp_check_private (struct gimplify_omp_ctx *ctx, tree decl, bool copyprivate)\n \t}\n     }\n   while (ctx->region_type == ORT_WORKSHARE\n-\t || ctx->region_type == ORT_SIMD);\n+\t || ctx->region_type == ORT_SIMD\n+\t || ctx->region_type == ORT_ACC);\n   return false;\n }\n \n@@ -6311,7 +6358,8 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t\tomp_notice_variable (outer_ctx->outer_context, decl, true);\n \t    }\n \t  else if (outer_ctx\n-\t\t   && outer_ctx->region_type == ORT_WORKSHARE\n+\t\t   && (outer_ctx->region_type == ORT_WORKSHARE\n+\t\t       || outer_ctx->region_type == ORT_ACC)\n \t\t   && outer_ctx->combined_loop\n \t\t   && splay_tree_lookup (outer_ctx->variables,\n \t\t\t\t\t (splay_tree_key) decl) == NULL\n@@ -6335,7 +6383,9 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t  goto do_add;\n \tcase OMP_CLAUSE_REDUCTION:\n \t  flags = GOVD_REDUCTION | GOVD_SEEN | GOVD_EXPLICIT;\n-\t  check_non_private = \"reduction\";\n+\t  /* OpenACC permits reductions on private variables.  */\n+\t  if (!(region_type & ORT_ACC))\n+\t    check_non_private = \"reduction\";\n \t  decl = OMP_CLAUSE_DECL (c);\n \t  if (TREE_CODE (decl) == MEM_REF)\n \t    {\n@@ -7704,7 +7754,7 @@ gimplify_oacc_cache (tree *expr_p, gimple_seq *pre_p)\n {\n   tree expr = *expr_p;\n \n-  gimplify_scan_omp_clauses (&OACC_CACHE_CLAUSES (expr), pre_p, ORT_WORKSHARE,\n+  gimplify_scan_omp_clauses (&OACC_CACHE_CLAUSES (expr), pre_p, ORT_ACC,\n \t\t\t     OACC_CACHE);\n   gimplify_adjust_omp_clauses (pre_p, &OACC_CACHE_CLAUSES (expr), OACC_CACHE);\n \n@@ -7833,7 +7883,9 @@ gimplify_omp_for (tree *expr_p, gimple_seq *pre_p)\n     case OMP_FOR:\n     case CILK_FOR:\n     case OMP_DISTRIBUTE:\n+      break;\n     case OACC_LOOP:\n+      ort = ORT_ACC;\n       break;\n     case OMP_TASKLOOP:\n       if (find_omp_clause (OMP_FOR_CLAUSES (for_stmt), OMP_CLAUSE_UNTIED))\n@@ -8895,10 +8947,14 @@ gimplify_omp_workshare (tree *expr_p, gimple_seq *pre_p)\n       ort = OMP_TARGET_COMBINED (expr) ? ORT_COMBINED_TARGET : ORT_TARGET;\n       break;\n     case OACC_KERNELS:\n+      ort = ORT_ACC_KERNELS;\n+      break;\n     case OACC_PARALLEL:\n-      ort = ORT_TARGET;\n+      ort = ORT_ACC_PARALLEL;\n       break;\n     case OACC_DATA:\n+      ort = ORT_ACC_DATA;\n+      break;\n     case OMP_TARGET_DATA:\n       ort = ORT_TARGET_DATA;\n       break;\n@@ -8920,7 +8976,7 @@ gimplify_omp_workshare (tree *expr_p, gimple_seq *pre_p)\n \tpop_gimplify_context (g);\n       else\n \tpop_gimplify_context (NULL);\n-      if (ort == ORT_TARGET_DATA)\n+      if ((ort & ORT_TARGET_DATA) != 0)\n \t{\n \t  enum built_in_function end_ix;\n \t  switch (TREE_CODE (expr))\n@@ -8995,17 +9051,18 @@ gimplify_omp_target_update (tree *expr_p, gimple_seq *pre_p)\n   tree expr = *expr_p;\n   int kind;\n   gomp_target *stmt;\n+  enum omp_region_type ort = ORT_WORKSHARE;\n \n   switch (TREE_CODE (expr))\n     {\n     case OACC_ENTER_DATA:\n-      kind = GF_OMP_TARGET_KIND_OACC_ENTER_EXIT_DATA;\n-      break;\n     case OACC_EXIT_DATA:\n       kind = GF_OMP_TARGET_KIND_OACC_ENTER_EXIT_DATA;\n+      ort = ORT_ACC;\n       break;\n     case OACC_UPDATE:\n       kind = GF_OMP_TARGET_KIND_OACC_UPDATE;\n+      ort = ORT_ACC;\n       break;\n     case OMP_TARGET_UPDATE:\n       kind = GF_OMP_TARGET_KIND_UPDATE;\n@@ -9020,7 +9077,7 @@ gimplify_omp_target_update (tree *expr_p, gimple_seq *pre_p)\n       gcc_unreachable ();\n     }\n   gimplify_scan_omp_clauses (&OMP_STANDALONE_CLAUSES (expr), pre_p,\n-\t\t\t     ORT_WORKSHARE, TREE_CODE (expr));\n+\t\t\t     ort, TREE_CODE (expr));\n   gimplify_adjust_omp_clauses (pre_p, &OMP_STANDALONE_CLAUSES (expr),\n \t\t\t       TREE_CODE (expr));\n   stmt = gimple_build_omp_target (NULL, kind, OMP_STANDALONE_CLAUSES (expr));"}, {"sha": "51b471cff5a51b493ff50c7f0322c71e99a7db01", "filename": "gcc/omp-low.c", "status": "modified", "additions": 71, "deletions": 22, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182190f2b3a236eb30bd717981e1f2c9b51cea06/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182190f2b3a236eb30bd717981e1f2c9b51cea06/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=182190f2b3a236eb30bd717981e1f2c9b51cea06", "patch": "@@ -1896,12 +1896,6 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \t  /* FALLTHRU */\n \n \tcase OMP_CLAUSE_FIRSTPRIVATE:\n-\t  if (is_gimple_omp_oacc (ctx->stmt))\n-\t    {\n-\t      sorry (\"clause not supported yet\");\n-\t      break;\n-\t    }\n-\t  /* FALLTHRU */\n \tcase OMP_CLAUSE_LINEAR:\n \t  decl = OMP_CLAUSE_DECL (c);\n \tdo_private:\n@@ -2167,12 +2161,6 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \t  /* FALLTHRU */\n \n \tcase OMP_CLAUSE_FIRSTPRIVATE:\n-\t  if (is_gimple_omp_oacc (ctx->stmt))\n-\t    {\n-\t      sorry (\"clause not supported yet\");\n-\t      break;\n-\t    }\n-\t  /* FALLTHRU */\n \tcase OMP_CLAUSE_PRIVATE:\n \tcase OMP_CLAUSE_LINEAR:\n \tcase OMP_CLAUSE_IS_DEVICE_PTR:\n@@ -4684,7 +4672,7 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t  gimplify_assign (ptr, x, ilist);\n \t\t}\n \t    }\n-\t  else if (is_reference (var))\n+\t  else if (is_reference (var) && !is_oacc_parallel (ctx))\n \t    {\n \t      /* For references that are being privatized for Fortran,\n \t\t allocate new backing storage for the new pointer\n@@ -14911,7 +14899,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n   tree child_fn, t, c;\n   gomp_target *stmt = as_a <gomp_target *> (gsi_stmt (*gsi_p));\n   gbind *tgt_bind, *bind, *dep_bind = NULL;\n-  gimple_seq tgt_body, olist, ilist, new_body;\n+  gimple_seq tgt_body, olist, ilist, fplist, new_body;\n   location_t loc = gimple_location (stmt);\n   bool offloaded, data_region;\n   unsigned int map_cnt = 0;\n@@ -14963,6 +14951,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n   child_fn = ctx->cb.dst_fn;\n \n   push_gimplify_context ();\n+  fplist = NULL;\n \n   for (c = clauses; c ; c = OMP_CLAUSE_CHAIN (c))\n     switch (OMP_CLAUSE_CODE (c))\n@@ -15007,6 +14996,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t  /* FALLTHRU */\n       case OMP_CLAUSE_TO:\n       case OMP_CLAUSE_FROM:\n+      oacc_firstprivate:\n \tvar = OMP_CLAUSE_DECL (c);\n \tif (!DECL_P (var))\n \t  {\n@@ -15029,6 +15019,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t  }\n \n \tif (offloaded\n+\t    && OMP_CLAUSE_CODE (c) == OMP_CLAUSE_MAP\n \t    && (OMP_CLAUSE_MAP_KIND (c) == GOMP_MAP_FIRSTPRIVATE_POINTER\n \t\t|| OMP_CLAUSE_MAP_KIND (c) == GOMP_MAP_FIRSTPRIVATE_REFERENCE))\n \t  {\n@@ -15057,17 +15048,40 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t    x = build_receiver_ref (var, true, ctx);\n \t    tree new_var = lookup_decl (var, ctx);\n \n-\t    if (OMP_CLAUSE_MAP_KIND (c) == GOMP_MAP_POINTER\n+\t    if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_MAP\n+\t\t&& OMP_CLAUSE_MAP_KIND (c) == GOMP_MAP_POINTER\n \t\t&& !OMP_CLAUSE_MAP_ZERO_BIAS_ARRAY_SECTION (c)\n \t\t&& TREE_CODE (TREE_TYPE (var)) == ARRAY_TYPE)\n \t      x = build_simple_mem_ref (x);\n-\t    SET_DECL_VALUE_EXPR (new_var, x);\n-\t    DECL_HAS_VALUE_EXPR_P (new_var) = 1;\n+\t    if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_FIRSTPRIVATE)\n+\t      {\n+\t\tgcc_assert (is_gimple_omp_oacc (ctx->stmt));\n+\t\tif (is_reference (new_var))\n+\t\t  {\n+\t\t    /* Create a local object to hold the instance\n+\t\t       value.  */\n+\t\t    tree type = TREE_TYPE (TREE_TYPE (new_var));\n+\t\t    const char *id = IDENTIFIER_POINTER (DECL_NAME (new_var));\n+\t\t    tree inst = create_tmp_var (type, id);\n+\t\t    gimplify_assign (inst, fold_indirect_ref (x), &fplist);\n+\t\t    x = build_fold_addr_expr (inst);\n+\t\t  }\n+\t\tgimplify_assign (new_var, x, &fplist);\n+\t      }\n+\t    else if (DECL_P (new_var))\n+\t      {\n+\t\tSET_DECL_VALUE_EXPR (new_var, x);\n+\t\tDECL_HAS_VALUE_EXPR_P (new_var) = 1;\n+\t      }\n+\t    else\n+\t      gcc_unreachable ();\n \t  }\n \tmap_cnt++;\n \tbreak;\n \n       case OMP_CLAUSE_FIRSTPRIVATE:\n+\tif (is_oacc_parallel (ctx))\n+\t  goto oacc_firstprivate;\n \tmap_cnt++;\n \tvar = OMP_CLAUSE_DECL (c);\n \tif (!is_reference (var)\n@@ -15092,6 +15106,8 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \tbreak;\n \n       case OMP_CLAUSE_PRIVATE:\n+\tif (is_gimple_omp_oacc (ctx->stmt))\n+\t  break;\n \tvar = OMP_CLAUSE_DECL (c);\n \tif (is_variable_sized (var))\n \t  {\n@@ -15195,9 +15211,11 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \n \t  default:\n \t    break;\n+\n \t  case OMP_CLAUSE_MAP:\n \t  case OMP_CLAUSE_TO:\n \t  case OMP_CLAUSE_FROM:\n+\t  oacc_firstprivate_map:\n \t    nc = c;\n \t    ovar = OMP_CLAUSE_DECL (c);\n \t    if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_MAP\n@@ -15248,9 +15266,9 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t\tx = build_sender_ref (ovar, ctx);\n \n \t\tif (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_MAP\n-\t\t\t && OMP_CLAUSE_MAP_KIND (c) == GOMP_MAP_POINTER\n-\t\t\t && !OMP_CLAUSE_MAP_ZERO_BIAS_ARRAY_SECTION (c)\n-\t\t\t && TREE_CODE (TREE_TYPE (ovar)) == ARRAY_TYPE)\n+\t\t    && OMP_CLAUSE_MAP_KIND (c) == GOMP_MAP_POINTER\n+\t\t    && !OMP_CLAUSE_MAP_ZERO_BIAS_ARRAY_SECTION (c)\n+\t\t    && TREE_CODE (TREE_TYPE (ovar)) == ARRAY_TYPE)\n \t\t  {\n \t\t    gcc_assert (offloaded);\n \t\t    tree avar\n@@ -15261,6 +15279,15 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t\t    avar = build_fold_addr_expr (avar);\n \t\t    gimplify_assign (x, avar, &ilist);\n \t\t  }\n+\t\telse if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_FIRSTPRIVATE)\n+\t\t  {\n+\t\t    gcc_assert (is_gimple_omp_oacc (ctx->stmt));\n+\t\t    if (!is_reference (var))\n+\t\t      var = build_fold_addr_expr (var);\n+\t\t    else\n+\t\t      talign = TYPE_ALIGN_UNIT (TREE_TYPE (TREE_TYPE (ovar)));\n+\t\t    gimplify_assign (x, var, &ilist);\n+\t\t  }\n \t\telse if (is_gimple_reg (var))\n \t\t  {\n \t\t    gcc_assert (offloaded);\n@@ -15289,7 +15316,17 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t\t    gimplify_assign (x, var, &ilist);\n \t\t  }\n \t      }\n-\t    s = OMP_CLAUSE_SIZE (c);\n+\t    s = NULL_TREE;\n+\t    if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_FIRSTPRIVATE)\n+\t      {\n+\t\tgcc_checking_assert (is_gimple_omp_oacc (ctx->stmt));\n+\t\ts = TREE_TYPE (ovar);\n+\t\tif (TREE_CODE (s) == REFERENCE_TYPE)\n+\t\t  s = TREE_TYPE (s);\n+\t\ts = TYPE_SIZE_UNIT (s);\n+\t      }\n+\t    else\n+\t      s = OMP_CLAUSE_SIZE (c);\n \t    if (s == NULL_TREE)\n \t      s = TYPE_SIZE_UNIT (TREE_TYPE (ovar));\n \t    s = fold_convert (size_type_node, s);\n@@ -15330,6 +15367,11 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t\t      tkind_zero = tkind;\n \t\t  }\n \t\tbreak;\n+\t      case OMP_CLAUSE_FIRSTPRIVATE:\n+\t\tgcc_checking_assert (is_gimple_omp_oacc (ctx->stmt));\n+\t\ttkind = GOMP_MAP_TO;\n+\t\ttkind_zero = tkind;\n+\t\tbreak;\n \t      case OMP_CLAUSE_TO:\n \t\ttkind = GOMP_MAP_TO;\n \t\ttkind_zero = tkind;\n@@ -15369,6 +15411,8 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t    break;\n \n \t  case OMP_CLAUSE_FIRSTPRIVATE:\n+\t    if (is_oacc_parallel (ctx))\n+\t      goto oacc_firstprivate_map;\n \t    ovar = OMP_CLAUSE_DECL (c);\n \t    if (is_reference (ovar))\n \t      talign = TYPE_ALIGN_UNIT (TREE_TYPE (TREE_TYPE (ovar)));\n@@ -15543,6 +15587,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n       gimple_seq_add_stmt (&new_body,\n \t  \t\t   gimple_build_assign (ctx->receiver_decl, t));\n     }\n+  gimple_seq_add_seq (&new_body, fplist);\n \n   if (offloaded || data_region)\n     {\n@@ -15554,6 +15599,8 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t  default:\n \t    break;\n \t  case OMP_CLAUSE_FIRSTPRIVATE:\n+\t    if (is_gimple_omp_oacc (ctx->stmt))\n+\t      break;\n \t    var = OMP_CLAUSE_DECL (c);\n \t    if (is_reference (var)\n \t\t|| is_gimple_reg_type (TREE_TYPE (var)))\n@@ -15639,6 +15686,8 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t      }\n \t    break;\n \t  case OMP_CLAUSE_PRIVATE:\n+\t    if (is_gimple_omp_oacc (ctx->stmt))\n+\t      break;\n \t    var = OMP_CLAUSE_DECL (c);\n \t    if (is_reference (var))\n \t      {\n@@ -15727,7 +15776,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n       /* Handle GOMP_MAP_FIRSTPRIVATE_{POINTER,REFERENCE} in second pass,\n \t so that firstprivate vars holding OMP_CLAUSE_SIZE if needed\n \t are already handled.  */\n-      for (c = clauses; c ; c = OMP_CLAUSE_CHAIN (c))\n+      for (c = clauses; c; c = OMP_CLAUSE_CHAIN (c))\n \tswitch (OMP_CLAUSE_CODE (c))\n \t  {\n \t    tree var;"}, {"sha": "6c2c07a006f6108443310eeb1eb7dbfe68d711b6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182190f2b3a236eb30bd717981e1f2c9b51cea06/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182190f2b3a236eb30bd717981e1f2c9b51cea06/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=182190f2b3a236eb30bd717981e1f2c9b51cea06", "patch": "@@ -1,3 +1,8 @@\n+2015-11-11  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* gfortran.dg/goacc/private-3.f95: Remove xfail.\n+\t* gfortran.dg/goacc/combined_loop.f90: Remove xfail.\n+\n 2015-11-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.target/i386/pr67265.c: New test."}, {"sha": "6507ddaf33e190f9627487464831f92bff88f1cd", "filename": "gcc/testsuite/gfortran.dg/goacc/combined_loop.f90", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182190f2b3a236eb30bd717981e1f2c9b51cea06/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcombined_loop.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182190f2b3a236eb30bd717981e1f2c9b51cea06/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcombined_loop.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcombined_loop.f90?ref=182190f2b3a236eb30bd717981e1f2c9b51cea06", "patch": "@@ -1,6 +1,4 @@\n ! { dg-do compile } \n-! <http://news.gmane.org/find-root.php?message_id=%3C563B78B5.5090506%40acm.org%3E>\n-! { dg-xfail-if \"TODO\" { *-*-* } }\n \n !\n ! PR fortran/64726"}, {"sha": "349026350d4fb66df8f3d800023541bdcc35d3a5", "filename": "gcc/testsuite/gfortran.dg/goacc/private-3.f95", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182190f2b3a236eb30bd717981e1f2c9b51cea06/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivate-3.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182190f2b3a236eb30bd717981e1f2c9b51cea06/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivate-3.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivate-3.f95?ref=182190f2b3a236eb30bd717981e1f2c9b51cea06", "patch": "@@ -1,6 +1,4 @@\n ! { dg-do compile }\n-! <http://news.gmane.org/find-root.php?message_id=%3C563B78B5.5090506%40acm.org%3E>\n-! { dg-xfail-if \"TODO\" { *-*-* } }\n \n ! test for private variables in a reduction clause\n "}, {"sha": "406c57203256cd1a295c50e2706379b355645128", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182190f2b3a236eb30bd717981e1f2c9b51cea06/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182190f2b3a236eb30bd717981e1f2c9b51cea06/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=182190f2b3a236eb30bd717981e1f2c9b51cea06", "patch": "@@ -1,3 +1,8 @@\n+2015-11-1  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/firstprivate-1.c: New.\n+\t* testsuite/libgomp.oacc-c-c++-common/firstprivate-2.c: New.\n+\n 2015-11-09  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* testsuite/libgomp.oacc-c-c++-common/firstprivate-1.c: Remove"}, {"sha": "7f5d3d376177ba7b84bc3918e2e92c14d85fbbda", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/firstprivate-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182190f2b3a236eb30bd717981e1f2c9b51cea06/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffirstprivate-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182190f2b3a236eb30bd717981e1f2c9b51cea06/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffirstprivate-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffirstprivate-1.c?ref=182190f2b3a236eb30bd717981e1f2c9b51cea06", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+\n+#include  <openacc.h>\n+\n+int main ()\n+{\n+  int ok = 1;\n+  int val = 2;\n+  int ary[32];\n+  int ondev = 0;\n+\n+  for (int i = 0; i < 32; i++)\n+    ary[i] = ~0;\n+  \n+#pragma acc parallel num_gangs (32) copy (ok) firstprivate (val) copy(ary, ondev)\n+  {\n+    ondev = acc_on_device (acc_device_not_host);\n+#pragma acc loop gang(static:1)\n+    for (unsigned i = 0; i < 32; i++)\n+      {\n+\tif (val != 2)\n+\t  ok = 0;\n+\tval += i;\n+\tary[i] = val;\n+      }\n+  }\n+\n+  if (ondev)\n+    {\n+      if (!ok)\n+\treturn 1;\n+      if (val != 2)\n+\treturn 1;\n+\n+      for (int i = 0; i < 32; i++)\n+\tif (ary[i] != 2 + i)\n+\t  return 1;\n+    }\n+  \n+  return 0;\n+}"}, {"sha": "9666542fd8243dc45b698d20192bf7ba3636dd15", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/firstprivate-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182190f2b3a236eb30bd717981e1f2c9b51cea06/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffirstprivate-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182190f2b3a236eb30bd717981e1f2c9b51cea06/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffirstprivate-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffirstprivate-2.c?ref=182190f2b3a236eb30bd717981e1f2c9b51cea06", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+\n+#include  <openacc.h>\n+\n+int main ()\n+{\n+  int ok = 1;\n+  int val = 2;\n+\n+#pragma acc data copy(val)\n+  {\n+#pragma acc parallel present (val)\n+    {\n+      val = 7;\n+    }\n+\n+#pragma acc parallel firstprivate (val) copy(ok)\n+    {\n+      ok  = val == 7;\n+      val = 9;\n+    }\n+\n+  }\n+\n+  if (!ok)\n+    return 1;\n+  if(val != 7)\n+    return 1;\n+\n+  return 0;\n+}"}, {"sha": "e66732da32c1e39dc09903324e7bd01c7499d9c9", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-red-v-2.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182190f2b3a236eb30bd717981e1f2c9b51cea06/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-v-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182190f2b3a236eb30bd717981e1f2c9b51cea06/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-v-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-v-2.c?ref=182190f2b3a236eb30bd717981e1f2c9b51cea06", "patch": "@@ -1,7 +1,5 @@\n /* { dg-do run } */\n /* { dg-additional-options \"-O2\" */\n-/* <http://news.gmane.org/find-root.php?message_id=%3C563B78B5.5090506%40acm.org%3E>\n-   { dg-xfail-if \"TODO\" { *-*-* } } */\n \n #include <stdio.h>\n "}, {"sha": "0059077b6851fd1262f7679563fe6ac835c54e49", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-red-w-2.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/182190f2b3a236eb30bd717981e1f2c9b51cea06/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-w-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/182190f2b3a236eb30bd717981e1f2c9b51cea06/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-w-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-w-2.c?ref=182190f2b3a236eb30bd717981e1f2c9b51cea06", "patch": "@@ -1,7 +1,5 @@\n /* { dg-do run } */\n /* { dg-additional-options \"-O2\" */\n-/* <http://news.gmane.org/find-root.php?message_id=%3C563B78B5.5090506%40acm.org%3E>\n-   { dg-xfail-if \"TODO\" { *-*-* } } */\n \n #include <stdio.h>\n "}]}