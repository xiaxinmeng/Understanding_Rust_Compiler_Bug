{"sha": "2fb63453bdd24fff367b4ddb18c59b3972520728", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZiNjM0NTNiZGQyNGZmZjM2N2I0ZGRiMThjNTliMzk3MjUyMDcyOA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-08-21T01:06:45Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-08-21T01:06:45Z"}, "message": "char_traits.h (char_traits<char16_t>:: assign(char_type*, size_t, char_type), [...]): For now, just open-code.\n\n2008-08-20  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/char_traits.h (char_traits<char16_t>::\n\tassign(char_type*, size_t, char_type), char_traits<char32_t>::\n\tassign(char_type*, size_t, char_type)): For now, just open-code.\n\nFrom-SVN: r139367", "tree": {"sha": "2e4ee542aaf467e4a1311861caa337d01556f1a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e4ee542aaf467e4a1311861caa337d01556f1a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fb63453bdd24fff367b4ddb18c59b3972520728", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fb63453bdd24fff367b4ddb18c59b3972520728", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fb63453bdd24fff367b4ddb18c59b3972520728", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fb63453bdd24fff367b4ddb18c59b3972520728/comments", "author": null, "committer": null, "parents": [{"sha": "0dd8c9bc6977ef0620f87c3c7ee75675570f4269", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dd8c9bc6977ef0620f87c3c7ee75675570f4269", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dd8c9bc6977ef0620f87c3c7ee75675570f4269"}], "stats": {"total": 44, "additions": 31, "deletions": 13}, "files": [{"sha": "64bfa342384d919ec16d56f6be485454c4fc69d6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fb63453bdd24fff367b4ddb18c59b3972520728/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fb63453bdd24fff367b4ddb18c59b3972520728/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2fb63453bdd24fff367b4ddb18c59b3972520728", "patch": "@@ -1,3 +1,9 @@\n+2008-08-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/char_traits.h (char_traits<char16_t>::\n+\tassign(char_type*, size_t, char_type), char_traits<char32_t>::\n+\tassign(char_type*, size_t, char_type)): For now, just open-code.\n+\n 2008-08-20  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/33979 (partial)"}, {"sha": "77a634b66a34525fd0632a580460a71f9ac19d94", "filename": "libstdc++-v3/include/bits/char_traits.h", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fb63453bdd24fff367b4ddb18c59b3972520728/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fb63453bdd24fff367b4ddb18c59b3972520728/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h?ref=2fb63453bdd24fff367b4ddb18c59b3972520728", "patch": "@@ -298,7 +298,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return __c1 == __c2; }\n \n       static int_type\n-      eof() { return static_cast<int_type>(_CHAR_TRAITS_EOF); }\n+      eof()\n+      { return static_cast<int_type>(_CHAR_TRAITS_EOF); }\n \n       static int_type\n       not_eof(const int_type& __c)\n@@ -354,17 +355,20 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return wmemset(__s, __a, __n); }\n \n       static char_type\n-      to_char_type(const int_type& __c) { return char_type(__c); }\n+      to_char_type(const int_type& __c)\n+      { return char_type(__c); }\n \n       static int_type\n-      to_int_type(const char_type& __c) { return int_type(__c); }\n+      to_int_type(const char_type& __c)\n+      { return int_type(__c); }\n \n       static bool\n       eq_int_type(const int_type& __c1, const int_type& __c2)\n       { return __c1 == __c2; }\n \n       static int_type\n-      eof() { return static_cast<int_type>(WEOF); }\n+      eof()\n+      { return static_cast<int_type>(WEOF); }\n \n       static int_type\n       not_eof(const int_type& __c)\n@@ -447,23 +451,27 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       static char_type*\n       assign(char_type* __s, size_t __n, char_type __a)\n-      { \n-\tstd::fill_n(__s, __n, __a);\n+      {\n+\tfor (size_t __i = 0; __i < __n; ++__i)\n+\t  assign(__s[__i], __a);\n \treturn __s;\n       }\n \n       static char_type\n-      to_char_type(const int_type& __c) { return char_type(__c); }\n+      to_char_type(const int_type& __c)\n+      { return char_type(__c); }\n \n       static int_type\n-      to_int_type(const char_type& __c) { return int_type(__c); }\n+      to_int_type(const char_type& __c)\n+      { return int_type(__c); }\n \n       static bool\n       eq_int_type(const int_type& __c1, const int_type& __c2)\n       { return __c1 == __c2; }\n \n       static int_type\n-      eof() { return static_cast<int_type>(-1); }\n+      eof()\n+      { return static_cast<int_type>(-1); }\n \n       static int_type\n       not_eof(const int_type& __c)\n@@ -537,22 +545,26 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       static char_type*\n       assign(char_type* __s, size_t __n, char_type __a)\n       {\n-\tstd::fill_n(__s, __n, __a);\n+\tfor (size_t __i = 0; __i < __n; ++__i)\n+\t  assign(__s[__i], __a);\n \treturn __s;\n       }\n \n       static char_type\n-      to_char_type(const int_type& __c) { return char_type(__c); }\n+      to_char_type(const int_type& __c)\n+      { return char_type(__c); }\n \n       static int_type\n-      to_int_type(const char_type& __c) { return int_type(__c); }\n+      to_int_type(const char_type& __c)\n+      { return int_type(__c); }\n \n       static bool\n       eq_int_type(const int_type& __c1, const int_type& __c2)\n       { return __c1 == __c2; }\n \n       static int_type\n-      eof() { return static_cast<int_type>(-1); }\n+      eof()\n+      { return static_cast<int_type>(-1); }\n \n       static int_type\n       not_eof(const int_type& __c)"}]}