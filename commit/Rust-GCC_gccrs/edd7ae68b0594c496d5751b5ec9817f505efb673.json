{"sha": "edd7ae68b0594c496d5751b5ec9817f505efb673", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRkN2FlNjhiMDU5NGM0OTZkNTc1MWI1ZWM5ODE3ZjUwNWVmYjY3Mw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-12-03T14:08:07Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-12-03T14:08:07Z"}, "message": "builtins.c (target_percent_c): Export.\n\n2014-12-03  Richard Biener  <rguenther@suse.de>\n\n\t* builtins.c (target_percent_c): Export.\n\t(fold_builtin_fprintf): Move to gimple-fold.c.\n\t(fold_builtin_2): Do not fold fprintf functions.\n\t(fold_builtin_3): Likewise.\n\t(fold_builtin_4): Remove.\n\t(fold_builtin_n): Do not call fold_builtin_4.\n\t* builtins.h (target_percent_c): Declare.\n\t* gimple-fold.c (gimple_fold_builtin_fprintf): Move from\n\tbuiltins.c and gimplify.\n\t(gimple_fold_builtin): Fold fprintf, fprintf_unlocked, vfprintf,\n\tfprintf_chk and vfprintf_chk here.\n\nFrom-SVN: r218317", "tree": {"sha": "c7f622237ef97db023009d3796ab4d7043f038cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7f622237ef97db023009d3796ab4d7043f038cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edd7ae68b0594c496d5751b5ec9817f505efb673", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edd7ae68b0594c496d5751b5ec9817f505efb673", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edd7ae68b0594c496d5751b5ec9817f505efb673", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edd7ae68b0594c496d5751b5ec9817f505efb673/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2f35958cd5f5a303446e390cf532b4b1b0500c16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f35958cd5f5a303446e390cf532b4b1b0500c16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f35958cd5f5a303446e390cf532b4b1b0500c16"}], "stats": {"total": 313, "additions": 149, "deletions": 164}, "files": [{"sha": "aa6175eb50cc0dbbff7d96c230dda6b653503934", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edd7ae68b0594c496d5751b5ec9817f505efb673/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edd7ae68b0594c496d5751b5ec9817f505efb673/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=edd7ae68b0594c496d5751b5ec9817f505efb673", "patch": "@@ -1,3 +1,17 @@\n+2014-12-03  Richard Biener  <rguenther@suse.de>\n+\n+\t* builtins.c (target_percent_c): Export.\n+\t(fold_builtin_fprintf): Move to gimple-fold.c.\n+\t(fold_builtin_2): Do not fold fprintf functions.\n+\t(fold_builtin_3): Likewise.\n+\t(fold_builtin_4): Remove.\n+\t(fold_builtin_n): Do not call fold_builtin_4.\n+\t* builtins.h (target_percent_c): Declare.\n+\t* gimple-fold.c (gimple_fold_builtin_fprintf): Move from\n+\tbuiltins.c and gimplify.\n+\t(gimple_fold_builtin): Fold fprintf, fprintf_unlocked, vfprintf,\n+\tfprintf_chk and vfprintf_chk here.\n+\n 2014-12-03  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/64153"}, {"sha": "beb4c05bfbb76d8bec47bef433639686baa344e0", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 157, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edd7ae68b0594c496d5751b5ec9817f505efb673/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edd7ae68b0594c496d5751b5ec9817f505efb673/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=edd7ae68b0594c496d5751b5ec9817f505efb673", "patch": "@@ -195,7 +195,6 @@ static tree fold_builtin_0 (location_t, tree, bool);\n static tree fold_builtin_1 (location_t, tree, tree, bool);\n static tree fold_builtin_2 (location_t, tree, tree, tree, bool);\n static tree fold_builtin_3 (location_t, tree, tree, tree, tree, bool);\n-static tree fold_builtin_4 (location_t, tree, tree, tree, tree, tree, bool);\n static tree fold_builtin_varargs (location_t, tree, tree*, int, bool);\n \n static tree fold_builtin_strpbrk (location_t, tree, tree, tree);\n@@ -213,14 +212,12 @@ static void maybe_emit_sprintf_chk_warning (tree, enum built_in_function);\n static void maybe_emit_free_warning (tree);\n static tree fold_builtin_object_size (tree, tree);\n static tree fold_builtin_printf (location_t, tree, tree, tree, bool, enum built_in_function);\n-static tree fold_builtin_fprintf (location_t, tree, tree, tree, tree, bool,\n-\t\t\t\t  enum built_in_function);\n \n static unsigned HOST_WIDE_INT target_newline;\n unsigned HOST_WIDE_INT target_percent;\n static unsigned HOST_WIDE_INT target_c;\n static unsigned HOST_WIDE_INT target_s;\n-static char target_percent_c[3];\n+char target_percent_c[3];\n char target_percent_s[3];\n static char target_percent_s_newline[4];\n static tree do_mpfr_arg1 (tree, tree, int (*)(mpfr_ptr, mpfr_srcptr, mp_rnd_t),\n@@ -10481,12 +10478,6 @@ fold_builtin_2 (location_t loc, tree fndecl, tree arg0, tree arg1, bool ignore)\n \t\t\t\t    arg1, NULL_TREE, ignore, fcode);\n     break;\n \n-    case BUILT_IN_FPRINTF:\n-    case BUILT_IN_FPRINTF_UNLOCKED:\n-    case BUILT_IN_VFPRINTF:\n-      return fold_builtin_fprintf (loc, fndecl, arg0, arg1, NULL_TREE,\n-\t\t\t\t   ignore, fcode);\n-\n     case BUILT_IN_ATOMIC_ALWAYS_LOCK_FREE:\n       return fold_builtin_atomic_always_lock_free (arg0, arg1);\n \n@@ -10548,21 +10539,6 @@ fold_builtin_3 (location_t loc, tree fndecl,\n \treturn fold_builtin_printf (loc, fndecl, arg1, arg2, ignore, fcode);\n     break;\n \n-    case BUILT_IN_FPRINTF:\n-    case BUILT_IN_FPRINTF_UNLOCKED:\n-    case BUILT_IN_VFPRINTF:\n-      return fold_builtin_fprintf (loc, fndecl, arg0, arg1, arg2,\n-\t\t\t\t   ignore, fcode);\n-\n-    case BUILT_IN_FPRINTF_CHK:\n-    case BUILT_IN_VFPRINTF_CHK:\n-      if (!validate_arg (arg1, INTEGER_TYPE)\n-\t  || TREE_SIDE_EFFECTS (arg1))\n-\treturn NULL_TREE;\n-      else\n-\treturn fold_builtin_fprintf (loc, fndecl, arg0, arg2, NULL_TREE,\n-\t\t\t\t     ignore, fcode);\n-\n     case BUILT_IN_EXPECT:\n       return fold_builtin_expect (loc, arg0, arg1, arg2);\n \n@@ -10595,35 +10571,6 @@ fold_builtin_3 (location_t loc, tree fndecl,\n   return NULL_TREE;\n }\n \n-/* Fold a call to built-in function FNDECL with 4 arguments, ARG0, ARG1,\n-   ARG2, and ARG3.  IGNORE is true if the result of the function call is\n-   ignored.  This function returns NULL_TREE if no simplification was\n-   possible.  */\n-\n-static tree\n-fold_builtin_4 (location_t loc, tree fndecl,\n-\t\ttree arg0, tree arg1, tree arg2, tree arg3, bool ignore)\n-{\n-  enum built_in_function fcode = DECL_FUNCTION_CODE (fndecl);\n-\n-  switch (fcode)\n-    {\n-    case BUILT_IN_FPRINTF_CHK:\n-    case BUILT_IN_VFPRINTF_CHK:\n-      if (!validate_arg (arg1, INTEGER_TYPE)\n-\t  || TREE_SIDE_EFFECTS (arg1))\n-\treturn NULL_TREE;\n-      else\n-\treturn fold_builtin_fprintf (loc, fndecl, arg0, arg2, arg3,\n-\t\t\t\t     ignore, fcode);\n-    break;\n-\n-    default:\n-      break;\n-    }\n-  return NULL_TREE;\n-}\n-\n /* Fold a call to built-in function FNDECL.  ARGS is an array of NARGS\n    arguments.  IGNORE is true if the result of the\n    function call is ignored.  This function returns NULL_TREE if no\n@@ -10648,10 +10595,6 @@ fold_builtin_n (location_t loc, tree fndecl, tree *args, int nargs, bool ignore)\n     case 3:\n       ret = fold_builtin_3 (loc, fndecl, args[0], args[1], args[2], ignore);\n       break;\n-    case 4:\n-      ret = fold_builtin_4 (loc, fndecl, args[0], args[1], args[2], args[3],\n- \t\t\t    ignore);\n-      break;\n     default:\n       ret = fold_builtin_varargs (loc, fndecl, args, nargs, ignore);\n       break;\n@@ -11977,105 +11920,6 @@ fold_builtin_printf (location_t loc, tree fndecl, tree fmt,\n   return fold_convert_loc (loc, TREE_TYPE (TREE_TYPE (fndecl)), call);\n }\n \n-/* Fold a call to the {,v}fprintf{,_unlocked} and __{,v}printf_chk builtins.\n-   FP, FMT, and ARG are the arguments to the call.  We don't fold calls with\n-   more than 3 arguments, and ARG may be null in the 2-argument case.\n-\n-   Return NULL_TREE if no simplification was possible, otherwise return the\n-   simplified form of the call as a tree.  FCODE is the BUILT_IN_*\n-   code of the function to be simplified.  */\n-\n-static tree\n-fold_builtin_fprintf (location_t loc, tree fndecl, tree fp,\n-\t\t      tree fmt, tree arg, bool ignore,\n-\t\t      enum built_in_function fcode)\n-{\n-  tree fn_fputc, fn_fputs, call = NULL_TREE;\n-  const char *fmt_str = NULL;\n-\n-  /* If the return value is used, don't do the transformation.  */\n-  if (! ignore)\n-    return NULL_TREE;\n-\n-  /* Verify the required arguments in the original call.  */\n-  if (!validate_arg (fp, POINTER_TYPE))\n-    return NULL_TREE;\n-  if (!validate_arg (fmt, POINTER_TYPE))\n-    return NULL_TREE;\n-\n-  /* Check whether the format is a literal string constant.  */\n-  fmt_str = c_getstr (fmt);\n-  if (fmt_str == NULL)\n-    return NULL_TREE;\n-\n-  if (fcode == BUILT_IN_FPRINTF_UNLOCKED)\n-    {\n-      /* If we're using an unlocked function, assume the other\n-\t unlocked functions exist explicitly.  */\n-      fn_fputc = builtin_decl_explicit (BUILT_IN_FPUTC_UNLOCKED);\n-      fn_fputs = builtin_decl_explicit (BUILT_IN_FPUTS_UNLOCKED);\n-    }\n-  else\n-    {\n-      fn_fputc = builtin_decl_implicit (BUILT_IN_FPUTC);\n-      fn_fputs = builtin_decl_implicit (BUILT_IN_FPUTS);\n-    }\n-\n-  if (!init_target_chars ())\n-    return NULL_TREE;\n-\n-  /* If the format doesn't contain % args or %%, use strcpy.  */\n-  if (strchr (fmt_str, target_percent) == NULL)\n-    {\n-      if (fcode != BUILT_IN_VFPRINTF && fcode != BUILT_IN_VFPRINTF_CHK\n-\t  && arg)\n-\treturn NULL_TREE;\n-\n-      /* If the format specifier was \"\", fprintf does nothing.  */\n-      if (fmt_str[0] == '\\0')\n-\t{\n-\t  /* If FP has side-effects, just wait until gimplification is\n-\t     done.  */\n-\t  if (TREE_SIDE_EFFECTS (fp))\n-\t    return NULL_TREE;\n-\n-\t  return build_int_cst (TREE_TYPE (TREE_TYPE (fndecl)), 0);\n-\t}\n-\n-      /* When \"string\" doesn't contain %, replace all cases of\n-\t fprintf (fp, string) with fputs (string, fp).  The fputs\n-\t builtin will take care of special cases like length == 1.  */\n-      if (fn_fputs)\n-\tcall = build_call_expr_loc (loc, fn_fputs, 2, fmt, fp);\n-    }\n-\n-  /* The other optimizations can be done only on the non-va_list variants.  */\n-  else if (fcode == BUILT_IN_VFPRINTF || fcode == BUILT_IN_VFPRINTF_CHK)\n-    return NULL_TREE;\n-\n-  /* If the format specifier was \"%s\", call __builtin_fputs (arg, fp).  */\n-  else if (strcmp (fmt_str, target_percent_s) == 0)\n-    {\n-      if (!arg || !validate_arg (arg, POINTER_TYPE))\n-\treturn NULL_TREE;\n-      if (fn_fputs)\n-\tcall = build_call_expr_loc (loc, fn_fputs, 2, arg, fp);\n-    }\n-\n-  /* If the format specifier was \"%c\", call __builtin_fputc (arg, fp).  */\n-  else if (strcmp (fmt_str, target_percent_c) == 0)\n-    {\n-      if (!arg || !validate_arg (arg, INTEGER_TYPE))\n-\treturn NULL_TREE;\n-      if (fn_fputc)\n-\tcall = build_call_expr_loc (loc, fn_fputc, 2, arg, fp);\n-    }\n-\n-  if (!call)\n-    return NULL_TREE;\n-  return fold_convert_loc (loc, TREE_TYPE (TREE_TYPE (fndecl)), call);\n-}\n-\n /* Initialize format string characters in the target charset.  */\n \n bool"}, {"sha": "c857c94063c8a69a714429428a584fd25b7da6d8", "filename": "gcc/builtins.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edd7ae68b0594c496d5751b5ec9817f505efb673/gcc%2Fbuiltins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edd7ae68b0594c496d5751b5ec9817f505efb673/gcc%2Fbuiltins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.h?ref=edd7ae68b0594c496d5751b5ec9817f505efb673", "patch": "@@ -91,5 +91,6 @@ extern const char *c_getstr (tree);\n extern bool init_target_chars (void);\n extern unsigned HOST_WIDE_INT target_percent;\n extern char target_percent_s[3];\n+extern char target_percent_c[3];\n \n #endif"}, {"sha": "3f1a11f6d4bdb17370ac7202e5ada13d9b7a6f43", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 133, "deletions": 7, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edd7ae68b0594c496d5751b5ec9817f505efb673/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edd7ae68b0594c496d5751b5ec9817f505efb673/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=edd7ae68b0594c496d5751b5ec9817f505efb673", "patch": "@@ -2453,6 +2453,108 @@ gimple_fold_builtin_snprintf (gimple_stmt_iterator *gsi)\n   return false;\n }\n \n+/* Fold a call to the {,v}fprintf{,_unlocked} and __{,v}printf_chk builtins.\n+   FP, FMT, and ARG are the arguments to the call.  We don't fold calls with\n+   more than 3 arguments, and ARG may be null in the 2-argument case.\n+\n+   Return NULL_TREE if no simplification was possible, otherwise return the\n+   simplified form of the call as a tree.  FCODE is the BUILT_IN_*\n+   code of the function to be simplified.  */\n+\n+static bool \n+gimple_fold_builtin_fprintf (gimple_stmt_iterator *gsi,\n+\t\t\t     tree fp, tree fmt, tree arg,\n+\t\t\t     enum built_in_function fcode)\n+{\n+  gcall *stmt = as_a <gcall *> (gsi_stmt (*gsi));\n+  tree fn_fputc, fn_fputs;\n+  const char *fmt_str = NULL;\n+\n+  /* If the return value is used, don't do the transformation.  */\n+  if (gimple_call_lhs (stmt) != NULL_TREE)\n+    return false;\n+\n+  /* Check whether the format is a literal string constant.  */\n+  fmt_str = c_getstr (fmt);\n+  if (fmt_str == NULL)\n+    return false;\n+\n+  if (fcode == BUILT_IN_FPRINTF_UNLOCKED)\n+    {\n+      /* If we're using an unlocked function, assume the other\n+\t unlocked functions exist explicitly.  */\n+      fn_fputc = builtin_decl_explicit (BUILT_IN_FPUTC_UNLOCKED);\n+      fn_fputs = builtin_decl_explicit (BUILT_IN_FPUTS_UNLOCKED);\n+    }\n+  else\n+    {\n+      fn_fputc = builtin_decl_implicit (BUILT_IN_FPUTC);\n+      fn_fputs = builtin_decl_implicit (BUILT_IN_FPUTS);\n+    }\n+\n+  if (!init_target_chars ())\n+    return false;\n+\n+  /* If the format doesn't contain % args or %%, use strcpy.  */\n+  if (strchr (fmt_str, target_percent) == NULL)\n+    {\n+      if (fcode != BUILT_IN_VFPRINTF && fcode != BUILT_IN_VFPRINTF_CHK\n+\t  && arg)\n+\treturn false;\n+\n+      /* If the format specifier was \"\", fprintf does nothing.  */\n+      if (fmt_str[0] == '\\0')\n+\t{\n+\t  replace_call_with_value (gsi, NULL_TREE);\n+\t  return true;\n+\t}\n+\n+      /* When \"string\" doesn't contain %, replace all cases of\n+\t fprintf (fp, string) with fputs (string, fp).  The fputs\n+\t builtin will take care of special cases like length == 1.  */\n+      if (fn_fputs)\n+\t{\n+\t  gcall *repl = gimple_build_call (fn_fputs, 2, fmt, fp);\n+\t  replace_call_with_call_and_fold (gsi, repl);\n+\t  return true;\n+\t}\n+    }\n+\n+  /* The other optimizations can be done only on the non-va_list variants.  */\n+  else if (fcode == BUILT_IN_VFPRINTF || fcode == BUILT_IN_VFPRINTF_CHK)\n+    return false;\n+\n+  /* If the format specifier was \"%s\", call __builtin_fputs (arg, fp).  */\n+  else if (strcmp (fmt_str, target_percent_s) == 0)\n+    {\n+      if (!arg || ! POINTER_TYPE_P (TREE_TYPE (arg)))\n+\treturn false;\n+      if (fn_fputs)\n+\t{\n+\t  gcall *repl = gimple_build_call (fn_fputs, 2, arg, fp);\n+\t  replace_call_with_call_and_fold (gsi, repl);\n+\t  return true;\n+\t}\n+    }\n+\n+  /* If the format specifier was \"%c\", call __builtin_fputc (arg, fp).  */\n+  else if (strcmp (fmt_str, target_percent_c) == 0)\n+    {\n+      if (!arg\n+\t  || ! useless_type_conversion_p (integer_type_node, TREE_TYPE (arg)))\n+\treturn false;\n+      if (fn_fputc)\n+\t{\n+\t  gcall *repl = gimple_build_call (fn_fputc, 2, arg, fp);\n+\t  replace_call_with_call_and_fold (gsi, repl);\n+\t  return true;\n+\t}\n+    }\n+\n+  return false;\n+}\n+\n+\n \n /* Fold a call to __builtin_strlen with known length LEN.  */\n \n@@ -2483,7 +2585,9 @@ gimple_fold_builtin (gimple_stmt_iterator *gsi)\n   if (avoid_folding_inline_builtin (callee))\n     return false;\n \n-  switch (DECL_FUNCTION_CODE (callee))\n+  unsigned n = gimple_call_num_args (stmt);\n+  enum built_in_function fcode = DECL_FUNCTION_CODE (callee);\n+  switch (fcode)\n     {\n     case BUILT_IN_BZERO:\n       return gimple_fold_builtin_memset (gsi, integer_zero_node,\n@@ -2506,7 +2610,7 @@ gimple_fold_builtin (gimple_stmt_iterator *gsi)\n \t\t\t\t\t    gimple_call_arg (stmt, 1), 3);\n     case BUILT_IN_SPRINTF_CHK:\n     case BUILT_IN_VSPRINTF_CHK:\n-      return gimple_fold_builtin_sprintf_chk (gsi, DECL_FUNCTION_CODE (callee));\n+      return gimple_fold_builtin_sprintf_chk (gsi, fcode);\n     case BUILT_IN_STRCAT_CHK:\n       return gimple_fold_builtin_strcat_chk (gsi);\n     case BUILT_IN_STRNCAT_CHK:\n@@ -2540,30 +2644,52 @@ gimple_fold_builtin (gimple_stmt_iterator *gsi)\n \t\t\t\t\t     gimple_call_arg (stmt, 1),\n \t\t\t\t\t     gimple_call_arg (stmt, 2),\n \t\t\t\t\t     gimple_call_arg (stmt, 3),\n-\t\t\t\t\t     DECL_FUNCTION_CODE (callee));\n+\t\t\t\t\t     fcode);\n     case BUILT_IN_STRCPY_CHK:\n     case BUILT_IN_STPCPY_CHK:\n       return gimple_fold_builtin_stxcpy_chk (gsi,\n \t\t\t\t\t     gimple_call_arg (stmt, 0),\n \t\t\t\t\t     gimple_call_arg (stmt, 1),\n \t\t\t\t\t     gimple_call_arg (stmt, 2),\n-\t\t\t\t\t     DECL_FUNCTION_CODE (callee));\n+\t\t\t\t\t     fcode);\n     case BUILT_IN_STRNCPY_CHK:\n     case BUILT_IN_STPNCPY_CHK:\n       return gimple_fold_builtin_stxncpy_chk (gsi,\n \t\t\t\t\t      gimple_call_arg (stmt, 0),\n \t\t\t\t\t      gimple_call_arg (stmt, 1),\n \t\t\t\t\t      gimple_call_arg (stmt, 2),\n \t\t\t\t\t      gimple_call_arg (stmt, 3),\n-\t\t\t\t\t      DECL_FUNCTION_CODE (callee));\n+\t\t\t\t\t      fcode);\n     case BUILT_IN_SNPRINTF_CHK:\n     case BUILT_IN_VSNPRINTF_CHK:\n-      return gimple_fold_builtin_snprintf_chk (gsi,\n-\t\t\t\t\t       DECL_FUNCTION_CODE (callee));\n+      return gimple_fold_builtin_snprintf_chk (gsi, fcode);\n     case BUILT_IN_SNPRINTF:\n       return gimple_fold_builtin_snprintf (gsi);\n     case BUILT_IN_SPRINTF:\n       return gimple_fold_builtin_sprintf (gsi);\n+    case BUILT_IN_FPRINTF:\n+    case BUILT_IN_FPRINTF_UNLOCKED:\n+    case BUILT_IN_VFPRINTF:\n+      if (n == 2 || n == 3)\n+\treturn gimple_fold_builtin_fprintf (gsi,\n+\t\t\t\t\t    gimple_call_arg (stmt, 0),\n+\t\t\t\t\t    gimple_call_arg (stmt, 1),\n+\t\t\t\t\t    n == 3\n+\t\t\t\t\t    ? gimple_call_arg (stmt, 2)\n+\t\t\t\t\t    : NULL_TREE,\n+\t\t\t\t\t    fcode);\n+      break;\n+    case BUILT_IN_FPRINTF_CHK:\n+    case BUILT_IN_VFPRINTF_CHK:\n+      if (n == 3 || n == 4)\n+\treturn gimple_fold_builtin_fprintf (gsi,\n+\t\t\t\t\t    gimple_call_arg (stmt, 0),\n+\t\t\t\t\t    gimple_call_arg (stmt, 2),\n+\t\t\t\t\t    n == 4\n+\t\t\t\t\t    ? gimple_call_arg (stmt, 3)\n+\t\t\t\t\t    : NULL_TREE,\n+\t\t\t\t\t    fcode);\n+      break;\n     default:;\n     }\n "}]}