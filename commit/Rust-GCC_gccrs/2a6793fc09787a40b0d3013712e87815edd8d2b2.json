{"sha": "2a6793fc09787a40b0d3013712e87815edd8d2b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE2NzkzZmMwOTc4N2E0MGIwZDMwMTM3MTJlODc4MTVlZGQ4ZDJiMg==", "commit": {"author": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2011-01-12T11:04:14Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2011-01-12T11:04:14Z"}, "message": "Object1.h: Add copyright header, update comments.\n\n\ngcc/testsuite:\n\n\t* objc-obj-c++-shared/Object1.h: Add copyright header, update\n\tcomments.  Add a TEST_SUITE_ADDITIONS category for GNU runtime.\n\tAmend NeXT version to declare a TEST_SUITE_ADDITIONS carrying the\n\tmethods missing from the OBJC2 Object.\n\t* objc-obj-c++-shared/Object1-implementation.h: Add copyright header.\n\tAmend implementation to use a TEST_SUITE_ADDITIONS category for both GNU\n\tand NeXT runtimes.\n\t* objc-obj-c++-shared/Object1.mm: Remove redundant header, update \n\tcomments.\n\t* objc-obj-c++-shared/Object1.m: Likewise.\n\t* objc.dg/encode-3.m: Update header use.  Amend to be API2 compatible.\n\t* objc.dg/proto-qual-1.m: Likewise.\n\t* obj-c++.dg/proto-lossage-3.mm: Likewise.\n\t* obj-c++.dg/proto-qual-1.mm: Likewise.\n\nFrom-SVN: r168705", "tree": {"sha": "36b4b2f8be05718577b7e06c95b14aac9fda1642", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36b4b2f8be05718577b7e06c95b14aac9fda1642"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a6793fc09787a40b0d3013712e87815edd8d2b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a6793fc09787a40b0d3013712e87815edd8d2b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a6793fc09787a40b0d3013712e87815edd8d2b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a6793fc09787a40b0d3013712e87815edd8d2b2/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d72ae3bf1063575af1853c40ec75eee4818b8c3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d72ae3bf1063575af1853c40ec75eee4818b8c3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d72ae3bf1063575af1853c40ec75eee4818b8c3c"}], "stats": {"total": 438, "additions": 316, "deletions": 122}, "files": [{"sha": "78dbf6e89c2b89b24c87e1345275424d41ea07e5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a6793fc09787a40b0d3013712e87815edd8d2b2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a6793fc09787a40b0d3013712e87815edd8d2b2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2a6793fc09787a40b0d3013712e87815edd8d2b2", "patch": "@@ -1,3 +1,20 @@\n+2011-01-12  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* objc-obj-c++-shared/Object1.h: Add copyright header, update\n+\tcomments.  Add a TEST_SUITE_ADDITIONS category for GNU runtime.\n+\tAmend NeXT version to declare a TEST_SUITE_ADDITIONS carrying the\n+\tmethods missing from the OBJC2 Object.\n+\t* objc-obj-c++-shared/Object1-implementation.h: Add copyright header.\n+\tAmend implementation to use a TEST_SUITE_ADDITIONS category for both GNU\n+\tand NeXT runtimes.\n+\t* objc-obj-c++-shared/Object1.mm: Remove redundant header, update \n+\tcomments.\n+\t* objc-obj-c++-shared/Object1.m: Likewise.\n+\t* objc.dg/encode-3.m: Update header use.  Amend to be API2 compatible.\n+\t* objc.dg/proto-qual-1.m: Likewise.\n+\t* obj-c++.dg/proto-lossage-3.mm: Likewise.\n+\t* obj-c++.dg/proto-qual-1.mm: Likewise.\n+\n 2011-01-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR testsuite/33033"}, {"sha": "8a6623ecda0f21cc3849507d858571471ee44449", "filename": "gcc/testsuite/obj-c++.dg/proto-lossage-3.mm", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a6793fc09787a40b0d3013712e87815edd8d2b2/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a6793fc09787a40b0d3013712e87815edd8d2b2/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-3.mm?ref=2a6793fc09787a40b0d3013712e87815edd8d2b2", "patch": "@@ -3,9 +3,10 @@\n    Problem report and original fix by richard@brainstorm.co.uk.  */\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+/* { dg-additional-sources \"../objc-obj-c++-shared/Object1.mm\" } */\n+\n+#include \"../objc-obj-c++-shared/next-mapping.h\"\n #include \"../objc-obj-c++-shared/Protocol1.h\"\n-#include <objc/objc.h>\n-#include <objc/Object.h>\n \n @protocol NoInstanceMethods\n + testMethod;"}, {"sha": "959181b86417ac24a995644d763f6713a512f9c7", "filename": "gcc/testsuite/obj-c++.dg/proto-qual-1.mm", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a6793fc09787a40b0d3013712e87815edd8d2b2/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-qual-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a6793fc09787a40b0d3013712e87815edd8d2b2/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-qual-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-qual-1.mm?ref=2a6793fc09787a40b0d3013712e87815edd8d2b2", "patch": "@@ -3,12 +3,14 @@\n \n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n-#include \"../objc-obj-c++-shared/Protocol1.h\"\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n #ifndef __NEXT_RUNTIME__\n #include <objc/objc-api.h>\n #endif\n-#include <stdio.h>\n-#include <stdlib.h>\n+#include \"../objc-obj-c++-shared/next-mapping.h\"\n+#include <objc/Protocol.h>\n \n /* The encoded parameter sizes will be rounded up to match pointer alignment.  */\n #define ROUND(s,a) (a * ((s + a - 1) / a))\n@@ -30,8 +32,11 @@ + (oneway void)retainArgument:(out bycopy id)arg1 with:(in signed char **)arg2 {\n - (bycopy) address:(byref inout id)location with:(out short unsigned **)arg2 { return nil; }\n @end\n \n-Protocol *proto = @protocol(Retain);\n+Protocol *proto;\n struct objc_method_description *meth;\n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+struct objc_method_description meth_object;\n+#endif\n unsigned totsize, offs0, offs1, offs2, offs3, offs4, offs5, offs6, offs7;\n \n static void scan_initial(const char *pattern) {\n@@ -42,10 +47,23 @@ static void scan_initial(const char *pattern) {\n }\n \n int main(void) {\n+  proto = @protocol(Retain);\n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+  meth_object = protocol_getMethodDescription (proto, @selector(address:with:),\n+\t\t\t\t\t\tYES, YES);\n+  meth = &meth_object;\n+#else\n   meth = [proto descriptionForInstanceMethod: @selector(address:with:)];\n+#endif\n   scan_initial(\"O@%u@%u:%uNR@%uo^^S%u\");\n   CHECK_IF(offs3 == offs2 + aligned_sizeof(id) && totsize == offs3 + aligned_sizeof(unsigned));\n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+  meth_object = protocol_getMethodDescription (proto,  @selector(retainArgument:with:),\n+\t\t\t\t\t\tYES, NO);\n+  meth = &meth_object;\n+#else\n   meth = [proto descriptionForClassMethod: @selector(retainArgument:with:)];\n+#endif\n   scan_initial(\"Vv%u@%u:%uOo@%un^*%u\");\n   CHECK_IF(offs3 == offs2 + aligned_sizeof(id) && totsize == offs3 + aligned_sizeof(char **));\n   return 0;"}, {"sha": "0dc36b10c0fbef369491ff75a753b864d505df26", "filename": "gcc/testsuite/objc-obj-c++-shared/Object1-implementation.h", "status": "modified", "additions": 139, "deletions": 32, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a6793fc09787a40b0d3013712e87815edd8d2b2/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1-implementation.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a6793fc09787a40b0d3013712e87815edd8d2b2/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1-implementation.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1-implementation.h?ref=2a6793fc09787a40b0d3013712e87815edd8d2b2", "patch": "@@ -1,62 +1,169 @@\n-/* This provides a minimal implementation of the Object root class.\n- * It is split from the definition so that it can be placed\n- * at the end of source files that require it.  This reduces\n- * clutter in .s and other internmediate code while debugging.\n-*/\n+/* Compatibility code between APIs and ABIs for the objc test suite.\n+   Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+   Contributed by Iain Sandoe \n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* \n+ * Implementation of a compatibility layer for the ObjC* test-suite.\n+ *\n+ * Four cases:\n+ *   GNU \n+ *      Uses the 'old' Object with API and ABI = 0.\n+ *      Compatibility methods are added.\n+ *   NeXT pre-Darwin9\n+ *      Uses the 'old' Object with API and ABI = 0.\n+ *   NeXT Darwin >= 9 with no implementation of ABI 2\n+ *      Uses API 2 and ABI 0 for m32, uses the 'old' Object'\n+ *      Uses API 2 for m64 but only compile tests can be expected to work.\n+ *   NeXT Darwin >= 9 with __OBJC2__\n+ *      Uses API 2 and ABI 0 for m32, uses the 'old' Object'\n+ *      Uses API 2 and ABI 2 - the libobjc implementation of Object is very\n+ *      basic, and we add a category to expand this for test-suite use.\n+ */\n+\n #ifndef _OBJC_OBJECT1_IMPLEMENTATION_H_\n #define _OBJC_OBJECT1_IMPLEMENTATION_H_\n-#ifdef DO_NEXT_M64_OBJECT_IMPLEMENTATION\n+\n+#include \"Object1.h\"\n+\n+#ifndef __NEXT_RUNTIME__\n+\n+/* Save us from repeating this.  */\n+@implementation Object (TEST_SUITE_ADDITIONS)\n++ initialize \n+{\n+  return self;\n+}\n+@end\n+\n+#else\n+\n+/* For NeXT pre-Darwin 9 or m32 we need do nothing.  */\n+\n+#  if NEXT_OBJC_ABI_VERSION >= 2 \n+\n+/* Pick up the API=2 header.  */\n+#    include <objc/runtime.h>\n+\n+#    ifndef __OBJC2__\n+\n+/* On a Darwin system >= 9 when there is no __OBJC2__ compiler, the testcases\n+   will not link.  So we provide a dummy Object for this purpose.  */\n+\n @implementation Object\n \n-+ initialize {\n-     return self;\n++ (Class) class \n+{\n+  return self;\n }\n-- init {\n-     return self;\n+\n+- (BOOL)isEqual: (id)anObject\n+{\n+  return self == anObject;\n }\n \n-+ class {\n-    return object_getClass(self);\n+@end\n+#    endif  /* __OBJC2__ */\n+\n+/* In any case, since the library does not provide a complete (enough) \n+   implementation we need to provide the additions.  */\n+\n+@implementation Object (TEST_SUITE_ADDITIONS)\n+\n++ initialize \n+{\n+  return self;\n }\n \n-+ new {\n-     return [[self alloc] init];\n+- init \n+{\n+  return self;\n }\n \n-+ free {\n-     return nil;\n+- (Class) class \n+{\n+  return isa;\n }\n \n-- free {\n-     return object_dispose(self);\n++ (Class) superclass\n+{\n+  return class_getSuperclass(object_getClass(self));\n }\n \n-+ alloc {\n-     return class_createInstance(self, 0);\n++ new \n+{\n+  return [[self alloc] init];\n }\n \n++ free \n+{\n+  return nil;\n+}\n \n-- class {\n-     return isa;\n+- free \n+{\n+  return object_dispose(self);\n }\n \n++ alloc \n+{\n+  return class_createInstance (self, 0);\n+}\n \n-- superclass {\n-     return class_getSuperclass([self class]);\n+- (Class) superclass {\n+  return class_getSuperclass([self class]);\n }\n \n - (const char *) name {\n-     return class_getName([self class]);\n+  return class_getName([self class]);\n }\n \n -(BOOL)conformsTo:(Protocol *)protocol {\n-     Class cls;\n-     for (cls = [self class]; cls; cls = [cls superclass]) {\n-         if (class_conformsToProtocol(cls, protocol)) return YES;\n-     }\n-     return NO;\n+  Class cls;\n+  for (cls = [self class]; cls; cls = [cls superclass]) \n+    {\n+      if (class_conformsToProtocol(cls, protocol)) \n+\treturn YES;\n+    }\n+  return NO;\n }\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+extern int printf (const char *, ...);\n+extern void abort (void);\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* This is a helper to catch cases where we need to add more functionality\n+   to our test-suite category - more informative than fail with 'does not \n+   respond to forward:'  */\n+- forward: (SEL)sel : (marg_list)args\n+{\n+  const char * onam = object_getClassName (self);\n+  const char * snam = sel_getName (sel);\n+  printf (\"%s: tried to forward: %s\\n\", onam, snam);\n+  abort ();\n+}\n @end\n-#endif /* NEEDS_OBJECT_IMPLEMENTATION */\n-#endif /* _OBJC_OBJECT1_IMPLEMENTATION_H_ */\n\\ No newline at end of file\n+\n+#   endif /* NEXT_OBJC_ABI_VERSION >= 2  */\n+#  endif /* __NEXT_RUNTIME__ */\n+#endif /* _OBJC_OBJECT1_IMPLEMENTATION_H_ */"}, {"sha": "293d0468ff7abd4e397c80da230808c551d884d6", "filename": "gcc/testsuite/objc-obj-c++-shared/Object1.h", "status": "modified", "additions": 77, "deletions": 52, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a6793fc09787a40b0d3013712e87815edd8d2b2/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a6793fc09787a40b0d3013712e87815edd8d2b2/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1.h?ref=2a6793fc09787a40b0d3013712e87815edd8d2b2", "patch": "@@ -1,56 +1,88 @@\n-/* Object definition taken from <objc/Object.h>\n+/* Compatibility code between APIs and ABIs for the objc test suite.\n+   Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+   Contributed by Iain Sandoe \n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* \n+ * Compatibility header.\n+ *\n+ * Four cases:\n+ *   GNU \n+ *      Uses the 'old' Object with API and ABI = 0.\n+ *      Compatibility methods are added.\n+ *   NeXT pre-Darwin9\n+ *      Uses the 'old' Object with API and ABI = 0.\n+ *   NeXT Darwin >= 9 with no implementation of ABI 2\n+ *      Uses API 2 and ABI 0 for m32, uses the 'old' Object'\n+ *      Uses API 2 for m64 but only compile tests can be expected to work.\n+ *   NeXT Darwin >= 9 with __OBJC2__\n+ *      Uses API 2 and ABI 0 for m32, uses the 'old' Object'\n+ *      Uses API 2 and ABI 2 - the libobjc implementation of Object is very\n+ *      basic, and we add a category to expand this for test-suite use.\n  */\n #ifndef _OBJC_OBJECT1_H_\n #define _OBJC_OBJECT1_H_\n \n-#undef DO_NEXT_M64_OBJECT_IMPLEMENTATION\n-\n-#ifndef __NEXT_RUNTIME__\n+#ifndef __NEXT_RUNTIME__ \n+/* Case 1 = GNU. */\n #  include <objc/Object.h>\n-#else\n+/* NeXT requires a +initialize (or forward:) method, and it makes testcases more\n+   readable if the conditional code can be reduced, so we add one to the GNU tests \n+   too.  This saves us from having to introduce it every time.  */\n+@interface Object (TEST_SUITE_ADDITIONS)\n++ initialize;\n+@end\n+\n+#else /* NeXT */\n+\n #  include \"next-abi.h\"\n-#  ifndef NEXT_OBJC_USE_NEW_INTERFACE\n-/* We are on a next system, or version, that is happy to compile V0 ABI */\n+#  if !defined(NEXT_OBJC_ABI_VERSION) || (NEXT_OBJC_ABI_VERSION < 2)\n+/* Cases 2, Case 3/m32 and 4/m32 are handled as default.  */\n #    include <objc/Object.h>\n #  else\n-#    if (NEXT_OBJC_ABI_VERSION==0)\n-/* We are on a system that has V0 ABI implementation in libobjc.dylib.\n- * However, we need to use the new accessors and pretend that the \n- * structures are opaque to avoid 'deprecated' warnings\n- */\n-#      include <objc/Object.h>\n-#    else\n-/* We are on a system that includes a V2 ABI Object in libobjc.dylib.\n-*/\n-#      ifdef __OBJC2__\n-/* ... and we have a V2 ABI compiler ..  */\n-#        include <objc/Object.h>\n-#      else\n-/* We can't access the Object definition in libobjc.dylib because\n- * we can't yet generate OBJC2 code.\n- *\n- * So we'll roll our own Object - purely for the sake of compile\n- * checks - the code is unlikely to run...\n-*/\n-#        ifndef _OBJC_OBJECT_H_\n-#        define _OBJC_OBJECT_H_\n-\n-#include <stdarg.h>\n-#import <objc/objc-runtime.h>\n+#    include <objc/objc.h>\n \n /* This is a cut-down Object with only the methods currently required\n-   by the testsuite declared.\n-   \n-   For those executables that require an implementation (to link) this\n-   can be provided in a given test by placing:\n-   #include \"path/to/objc-c++shared/Object1-implementation.h\"\n-   at the end of the source for the test.\n+   by the testsuite declared.  The implementation is provided in \n+   Object1-implementation.h\n */\n \n-@interface Object \n+/* The m64 libobjc implementation of Object provides only the 'class' and\n+   isEqual: methods.  \n+   \n+   We add the others required as a test-suite category. \n+   \n+   Please leave the unimplemented methods as comments - so that they can\n+   be inserted as required by future tests.  */\n+\n+@interface Object\n {\n-\tClass isa; /* A pointer to the instance's class structure */\n+  Class isa;\n }\n++ (Class) class;\n+- (BOOL)isEqual: (id)anObject;\n+@end\n+\n+/* Dummy definition.  */\n+typedef void * marg_list;\n+\n+@interface Object (TEST_SUITE_ADDITIONS)\n+\n + initialize;\n - init;\n \n@@ -63,16 +95,14 @@\n //- copyFromZone:(void *)zone;\n //- (void *)zone;\n \n-+ class;\n-//+ superclass;\n+- (Class) class;\n++ (Class) superclass;\n //+ (const char *) name;\n-- class;\n-- superclass;\n+//- superclass;\n - (const char *) name;\n \n //- self;\n //- (unsigned int) hash;\n-//-(BOOL) isEqual:anObject;\n \n /* Testing inheritance relationships */\n \n@@ -135,16 +165,11 @@\n \n /* Forwarding */\n \n-//- forward: (SEL)sel : (marg_list)args;\n+- forward: (SEL)sel : (marg_list)args;\n //- performv: (SEL)sel : (marg_list)args;\n \n @end\n \n-#define DO_NEXT_M64_OBJECT_IMPLEMENTATION\n-\n-#        endif /* _OBJC_OBJECT_H_ */\n-#      endif /* __OBJC2__ */\n-#      endif /* ABI=0 */\n-#    endif /* NEXT_OBJC_USE_NEW_INTERFACE */\n-#   endif /* __NEXT_RUNTIME__ */\n+#    endif /* NeXT case 3 & 4 m64 */\n+#  endif /* NEXT */\n #endif /* _OBJC_OBJECT1_H_ */"}, {"sha": "d5fe4c086117ebb09695d377ff6f90190f7b3ec6", "filename": "gcc/testsuite/objc-obj-c++-shared/Object1.m", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a6793fc09787a40b0d3013712e87815edd8d2b2/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a6793fc09787a40b0d3013712e87815edd8d2b2/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1.m?ref=2a6793fc09787a40b0d3013712e87815edd8d2b2", "patch": "@@ -1,11 +1,4 @@\n-#import \"Object1.h\"\n-/* This will generate the code if required - as determined by\n-   the headr above.  It is kept like this to keep one code file\n-   shared between dg-xxxx tests that can ask for an extra source\n-   and the objc/{compile,execute}/xxx tests that have to include\n-   the implementation explicitly.\n-   \n-   For cases/targets that don't require the generation of the\n-   Object implementation, this should result in an empty object.\n+/* This will generate compatibility code for the test-suite provided as a\n+   category on Object.\n */\n-#import \"Object1-implementation.h\"\n+#include \"Object1-implementation.h\""}, {"sha": "04fdd0562a30239f68a8c37bf582e6fcd0045738", "filename": "gcc/testsuite/objc-obj-c++-shared/Object1.mm", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a6793fc09787a40b0d3013712e87815edd8d2b2/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a6793fc09787a40b0d3013712e87815edd8d2b2/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1.mm?ref=2a6793fc09787a40b0d3013712e87815edd8d2b2", "patch": "@@ -1,11 +1,4 @@\n-#import \"Object1.h\"\n-/* This will generate the code if required - as determined by\n-   the headr above.  It is kept like this to keep one code file\n-   shared between dg-xxxx tests that can ask for an extra source\n-   and the objc/{compile,execute}/xxx tests that have to include\n-   the implementation explicitly.\n-   \n-   For cases/targets that don't require the generation of the\n-   Object implementation, this should result in an empty object.\n+/* This will generate compatibility code for the test-suite provided as a\n+   category on Object.\n */\n #import \"Object1-implementation.h\""}, {"sha": "c1327c1e62463fb37db07fec4f8650d280c5090d", "filename": "gcc/testsuite/objc.dg/encode-3.m", "status": "modified", "additions": 33, "deletions": 10, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a6793fc09787a40b0d3013712e87815edd8d2b2/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a6793fc09787a40b0d3013712e87815edd8d2b2/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-3.m?ref=2a6793fc09787a40b0d3013712e87815edd8d2b2", "patch": "@@ -3,19 +3,15 @@\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include \"../objc-obj-c++-shared/Protocol1.h\"\n #include <stdio.h>\n #include <stdlib.h>\n \n-#ifdef __cplusplus\n-#define ProtoBool bool\n-#else\n-#define ProtoBool _Bool\n-#endif\n-\n #ifndef __NEXT_RUNTIME__\n-#include <objc/objc-api.h>\n+#  include <objc/objc-api.h>\n #endif\n+#include \"../objc-obj-c++-shared/objc-test-suite-types.h\"\n+#include \"../objc-obj-c++-shared/next-mapping.h\"\n+#include <objc/Protocol.h>\n \n extern int sscanf(const char *str, const char *format, ...);\n extern void abort(void);\n@@ -38,8 +34,11 @@ + (Enum *)getEnum:(XXPoint *)pt enum:(enum Enum)e bool:(ObjCBool)b;\n + (ProtoBool **)getBool:(ObjCBool **)b;\n @end\n \n-Protocol *proto = @protocol(Proto);\n+Protocol *proto;\n struct objc_method_description *meth;\n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+struct objc_method_description meth_object;\n+#endif\n unsigned totsize, offs0, offs1, offs2, offs3, offs4, offs5, offs6, offs7;\n \n static void scan_initial(const char *pattern) {\n@@ -51,8 +50,14 @@ static void scan_initial(const char *pattern) {\n \n int main(void) {\n   const char *string;\n-\n+  proto = @protocol(Proto);\n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+  meth_object = protocol_getMethodDescription (proto,\n+\t\t   @selector(char:float:double:unsigned:short:long:), YES, YES);\n+  meth = &meth_object;\n+#else\n   meth = [proto descriptionForInstanceMethod: @selector(char:float:double:unsigned:short:long:)];\n+#endif\n   if (sizeof (long) == 8)\n     string = \"v%u@%u:%uc%uf%ud%uI%us%uq%u\";\n   else\n@@ -61,11 +66,23 @@ int main(void) {\n   CHECK_IF(offs3 == offs2 + sizeof(int) && offs4 == offs3 + sizeof(float));\n   CHECK_IF(offs5 == offs4 + sizeof(double) && offs6 == offs5 + sizeof(unsigned));\n   CHECK_IF(offs7 == offs6 + sizeof(int) && totsize == offs7 + sizeof(long));\n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+  meth_object = protocol_getMethodDescription (proto,\n+\t\t  @selector(setRect:withBool:withInt:), YES, YES);\n+  meth = &meth_object;\n+#else\n   meth = [proto descriptionForInstanceMethod: @selector(setRect:withBool:withInt:)];\n+#endif\n   scan_initial(\"^v%u@%u:%u{_XXRect={?=ff(__XXAngle=II)}{?=dd}^{_XXRect}}%uB%ui%u\");\n   CHECK_IF(offs3 == offs2 + sizeof(XXRect) && offs4 == offs3 + sizeof(int));\n   CHECK_IF(totsize == offs4 + sizeof(int));\n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+  meth_object = protocol_getMethodDescription (proto,\n+\t\t  @selector(getEnum:enum:bool:), YES, NO);\n+  meth = &meth_object; \n+#else\n   meth = [proto descriptionForClassMethod: @selector(getEnum:enum:bool:)];\n+#endif\n \n   /* Here we have the complication that 'enum Enum' could be encoded\n      as 'i' on __NEXT_RUNTIME_, and (most likely) as 'I' on the GNU\n@@ -83,7 +100,13 @@ int main(void) {\n \n   CHECK_IF(offs3 == offs2 + sizeof(XXPoint *) && offs4 == offs3 + sizeof(enum Enum));\n   CHECK_IF(totsize == offs4 + sizeof(int));  /* 'ObjCBool' is really 'char' */\n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+  meth_object = protocol_getMethodDescription (proto,\n+\t\t  @selector(getBool:), YES, NO);\n+  meth = &meth_object;\n+#else\n   meth = [proto descriptionForClassMethod: @selector(getBool:)];         \n+#endif\n   scan_initial(\"^^B%u@%u:%u^*%u\");\n   CHECK_IF(totsize == offs2 + sizeof(ObjCBool **));\n   return 0;"}, {"sha": "59daec5a42a60414b609345c94265d870ac71e39", "filename": "gcc/testsuite/objc.dg/proto-qual-1.m", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a6793fc09787a40b0d3013712e87815edd8d2b2/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-qual-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a6793fc09787a40b0d3013712e87815edd8d2b2/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-qual-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-qual-1.m?ref=2a6793fc09787a40b0d3013712e87815edd8d2b2", "patch": "@@ -1,13 +1,14 @@\n /* Check that protocol qualifiers are compiled and encoded properly.  */\n /* Author: Ziemowit Laski <zlaski@apple.com>  */\n-/* { dg-options \"\" } */\n+\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include \"../objc-obj-c++-shared/Protocol1.h\"\n+#include <objc/Protocol.h>\n #ifndef __NEXT_RUNTIME__\n #include <objc/objc-api.h>\n #endif\n+#include \"../objc-obj-c++-shared/next-mapping.h\"\n \n /* The encoded parameter sizes will be rounded up to match pointer alignment.  */\n #define ROUND(s,a) (a * ((s + a - 1) / a))\n@@ -31,8 +32,11 @@ + (oneway void)retainArgument:(out bycopy id)arg1 with:(in signed char **)arg2 {\n - (bycopy) address:(byref inout id)location with:(out short unsigned **)arg2 { return nil; }\n @end\n \n-Protocol *proto = @protocol(Retain);\n+Protocol *proto;\n struct objc_method_description *meth;\n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+struct objc_method_description meth_object;\n+#endif\n unsigned totsize, offs0, offs1, offs2, offs3, offs4, offs5, offs6, offs7;\n \n static void scan_initial(const char *pattern) {\n@@ -43,10 +47,23 @@ static void scan_initial(const char *pattern) {\n }\n \n int main(void) {\n+  proto = @protocol(Retain);\n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+  meth_object = protocol_getMethodDescription (proto,\n+\t\t  @selector(address:with:), YES, YES);\n+  meth = &meth_object;\n+#else\n   meth = [proto descriptionForInstanceMethod: @selector(address:with:)];\n+#endif\n   scan_initial(\"O@%u@%u:%uNR@%uo^^S%u\");\n   CHECK_IF(offs3 == offs2 + aligned_sizeof(id) && totsize == offs3 + aligned_sizeof(unsigned));\n+#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+  meth_object = protocol_getMethodDescription (proto,\n+\t\t  @selector(retainArgument:with:), YES, NO);\n+  meth = &meth_object;\n+#else\n   meth = [proto descriptionForClassMethod: @selector(retainArgument:with:)];\n+#endif\n   scan_initial(\"Vv%u@%u:%uOo@%un^*%u\");\n   CHECK_IF(offs3 == offs2 + aligned_sizeof(id) && totsize == offs3 + aligned_sizeof(char **));\n   return 0;"}]}