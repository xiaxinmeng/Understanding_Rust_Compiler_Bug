{"sha": "f56c5d5d5bd85f893847ee74885ac2f17172b918", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU2YzVkNWQ1YmQ4NWY4OTM4NDdlZTc0ODg1YWMyZjE3MTcyYjkxOA==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobias.schlueter@physik.uni-muenchen.de", "date": "2004-07-18T13:00:34Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2004-07-18T13:00:34Z"}, "message": "re PR fortran/16465 (parser chokes with ffixed-line-length-7)\n\nPR fortran/16465\n* lang.opt (ffixed-line-length-none, ffixed-line-length-): New\noptions.\n(ffixed-line-length-80, ffixed-line-length-132): Remove.\n* options.c (gfc_handle_options): Deal with changed options.\n* scanner.c (load_line): Change second arg to 'char **',\nallocate if pointing to NULL. Keep track of buffer's length.\nAdapt buffer size to overlong lines. Pad lines to full length\nin fixed form.\n(load_file): Adapt to new interface of load_line.\n\nFrom-SVN: r84891", "tree": {"sha": "24c3eb4bb41b68910dfda108e20201c7d79da360", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24c3eb4bb41b68910dfda108e20201c7d79da360"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f56c5d5d5bd85f893847ee74885ac2f17172b918", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f56c5d5d5bd85f893847ee74885ac2f17172b918", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f56c5d5d5bd85f893847ee74885ac2f17172b918", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f56c5d5d5bd85f893847ee74885ac2f17172b918/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cdc381b1ac0289703497f510cdcdb5a08f26ec8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cdc381b1ac0289703497f510cdcdb5a08f26ec8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cdc381b1ac0289703497f510cdcdb5a08f26ec8"}], "stats": {"total": 103, "additions": 81, "deletions": 22}, "files": [{"sha": "01cedd8f1af549a0ecb7692c88002e056336d1a3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56c5d5d5bd85f893847ee74885ac2f17172b918/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56c5d5d5bd85f893847ee74885ac2f17172b918/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f56c5d5d5bd85f893847ee74885ac2f17172b918", "patch": "@@ -1,3 +1,16 @@\n+2004-07-18  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\tPR fortran/16465\n+\t* lang.opt (ffixed-line-length-none, ffixed-line-length-): New\n+\toptions.\n+\t(ffixed-line-length-80, ffixed-line-length-132): Remove.\n+\t* options.c (gfc_handle_options): Deal with changed options.\n+\t* scanner.c (load_line): Change second arg to 'char **',\n+\tallocate if pointing to NULL. Keep track of buffer's length.\n+\tAdapt buffer size to overlong lines. Pad lines to full length\n+\tin fixed form.\n+\t(load_file): Adapt to new interface of load_line.\n+\n 2004-07-17  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* trans.h (builtin_function): Declare."}, {"sha": "6e6912c154baa14d2437885481253d46061b47a7", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56c5d5d5bd85f893847ee74885ac2f17172b918/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56c5d5d5bd85f893847ee74885ac2f17172b918/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=f56c5d5d5bd85f893847ee74885ac2f17172b918", "patch": "@@ -97,13 +97,13 @@ fimplicit-none\n F95\n Specify that no implicit typing is allowed, unless overridden by explicit IMPLICIT statements\n \n-ffixed-line-length-80\n+ffixed-line-length-none\n F95 RejectNegative\n-Use 80 character line width in fixed mode\n+Allow arbitrary character line width in fixed mode\n \n-ffixed-line-length-132\n-F95 RejectNegative\n-Use 132 character line width in fixed mode\n+ffixed-line-length-\n+F95 RejectNegative Joined UInteger\n+-ffixed-line-length-<n>\t\tUse n as character line width in fixed mode\n \n fmax-identifier-length=\n F95 RejectNegative Joined UInteger"}, {"sha": "c8dc3293efde68795d86db61a6f614b4b43c3018", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56c5d5d5bd85f893847ee74885ac2f17172b918/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56c5d5d5bd85f893847ee74885ac2f17172b918/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=f56c5d5d5bd85f893847ee74885ac2f17172b918", "patch": "@@ -260,12 +260,14 @@ gfc_handle_option (size_t scode, const char *arg, int value)\n       gfc_option.flag_repack_arrays = value;\n       break;\n \n-    case OPT_ffixed_line_length_80:\n-      gfc_option.fixed_line_length = 80;\n+    case OPT_ffixed_line_length_none:\n+      gfc_option.fixed_line_length = 0;\n       break;\n \n-    case OPT_ffixed_line_length_132:\n-      gfc_option.fixed_line_length = 132;\n+    case OPT_ffixed_line_length_:\n+      if (value != 0 && value < 7)\n+\tgfc_fatal_error (\"Fixed line length must be at least seven.\");\n+      gfc_option.fixed_line_length = value;\n       break;\n \n     case OPT_fmax_identifier_length_:"}, {"sha": "ae473d809927d2d026b9808fb6532ceb654371fd", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 57, "deletions": 13, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56c5d5d5bd85f893847ee74885ac2f17172b918/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56c5d5d5bd85f893847ee74885ac2f17172b918/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=f56c5d5d5bd85f893847ee74885ac2f17172b918", "patch": "@@ -671,26 +671,49 @@ gfc_gobble_whitespace (void)\n }\n \n \n-/* Load a single line into the buffer.  We truncate lines that are too\n-   long.  In fixed mode, we expand a tab that occurs within the\n-   statement label region to expand to spaces that leave the next\n-   character in the source region.  */\n+/* Load a single line into pbuf.\n+\n+   If pbuf points to a NULL pointer, it is allocated.\n+   We truncate lines that are too long, unless we're dealing with\n+   preprocessor lines or if the option -ffixed-line-length-none is set,\n+   in which case we reallocate the buffer to fit the entire line, if\n+   need be.\n+   In fixed mode, we expand a tab that occurs within the statement\n+   label region to expand to spaces that leave the next character in\n+   the source region.  */\n \n static void\n-load_line (FILE * input, char *buffer, char *filename, int linenum)\n+load_line (FILE * input, char **pbuf, char *filename, int linenum)\n {\n   int c, maxlen, i, trunc_flag, preprocessor_flag;\n+  static int buflen = 0;\n+  char *buffer;\n+\n+  /* Detemine the maximum allowed line length.  */\n+  if (gfc_current_form == FORM_FREE)\n+    maxlen = GFC_MAX_LINE;\n+  else\n+    maxlen = gfc_option.fixed_line_length;\n+\n+  if (*pbuf == NULL)\n+    {\n+      /* Allocate the line buffer, storing its length into buflen.  */\n+      if (maxlen > 0)\n+\tbuflen = maxlen;\n+      else\n+\tbuflen = GFC_MAX_LINE;\n \n-  maxlen = (gfc_current_form == FORM_FREE) \n-    ? 132 \n-    : gfc_option.fixed_line_length;\n+      *pbuf = gfc_getmem (buflen + 1);\n+    }\n \n   i = 0;\n+  buffer = *pbuf;\n \n   preprocessor_flag = 0;\n   c = fgetc (input);\n   if (c == '#')\n-    /* Don't truncate preprocessor lines.  */\n+    /* In order to not truncate preprocessor lines, we have to\n+       remember that this is one.  */\n     preprocessor_flag = 1;\n   ungetc (c, input);\n \n@@ -729,8 +752,17 @@ load_line (FILE * input, char *buffer, char *filename, int linenum)\n       *buffer++ = c;\n       i++;\n \n-      if (i >= maxlen && !preprocessor_flag)\n-\t{\t\t\t/* Truncate the rest of the line.  */\n+      if (i >= buflen && (maxlen == 0 || preprocessor_flag))\n+\t{\n+\t  /* Reallocate line buffer to double size to hold the\n+\t     overlong line.  */\n+\t  buflen = buflen * 2;\n+\t  *pbuf = xrealloc (*pbuf, buflen);\n+\t  buffer = (*pbuf)+i;\n+\t}\n+      else if (i >= buflen)\n+\t{\t\t\t\n+\t  /* Truncate the rest of the line.  */\n \t  trunc_flag = 1;\n \n \t  for (;;)\n@@ -753,6 +785,14 @@ load_line (FILE * input, char *buffer, char *filename, int linenum)\n \t}\n     }\n \n+  /* Pad lines to the selected line length in fixed form.  */\n+  if (gfc_current_form == FORM_FIXED\n+      && gfc_option.fixed_line_length > 0\n+      && !preprocessor_flag\n+      && c != EOF)\n+    while (i++ < buflen)\n+      *buffer++ = ' ';\n+\n   *buffer = '\\0';\n }\n \n@@ -925,7 +965,7 @@ include_line (char *line)\n static try\n load_file (char *filename, bool initial)\n {\n-  char line[GFC_MAX_LINE+1];\n+  char *line;\n   gfc_linebuf *b;\n   gfc_file *f;\n   FILE *input;\n@@ -963,10 +1003,11 @@ load_file (char *filename, bool initial)\n   f->up = current_file;\n   current_file = f;\n   current_file->line = 1;\n+  line = NULL;\n \n   for (;;) \n     {\n-      load_line (input, line, filename, current_file->line);\n+      load_line (input, &line, filename, current_file->line);\n \n       len = strlen (line);\n       if (feof (input) && len == 0)\n@@ -1003,6 +1044,9 @@ load_file (char *filename, bool initial)\n       line_tail = b;\n     }\n \n+  /* Release the line buffer allocated in load_line.  */\n+  gfc_free (line);\n+\n   fclose (input);\n \n   current_file = current_file->up;"}]}