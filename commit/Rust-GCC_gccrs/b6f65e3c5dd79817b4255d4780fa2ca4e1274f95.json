{"sha": "b6f65e3c5dd79817b4255d4780fa2ca4e1274f95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZmNjVlM2M1ZGQ3OTgxN2I0MjU1ZDQ3ODBmYTJjYTRlMTI3NGY5NQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-04-03T03:07:40Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-04-03T03:07:40Z"}, "message": "builtins.c (dummy_object): Use build_int_cst instead of convert.\n\n\n\t* builtins.c (dummy_object): Use build_int_cst instead of convert.\n\t* tree-ssa-ccp.c (maybe_fold_stmt_addition): Use fold_convert\n\tinstead of convert.\n\t* dojump.c (do_jump): Likewise.\n\t* expr.h (ADD_PARM_SIZE, SUB_PARM_SIZE, ARGS_SIZE_TREE): Likewise.\n\t* gimplify.c (gimple_boolify, gimplify_init_constructor,\n\tgimplify_boolean_expr): Likewise.\n\t* emit-rtl.c (set_mem_attributes_minus_bitpos): Likewise.\n\t* varasm.c (array_size_for_constructor): Likewise.\n\t* tree-object-size.c (compute_object_offset): Likewise.\n\nFrom-SVN: r112633", "tree": {"sha": "064485fefb93789485a6ad2a21503d015fe218a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/064485fefb93789485a6ad2a21503d015fe218a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6f65e3c5dd79817b4255d4780fa2ca4e1274f95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6f65e3c5dd79817b4255d4780fa2ca4e1274f95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6f65e3c5dd79817b4255d4780fa2ca4e1274f95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6f65e3c5dd79817b4255d4780fa2ca4e1274f95/comments", "author": null, "committer": null, "parents": [{"sha": "ce674fb62aac244b11351dbc9e4290107e33fd78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce674fb62aac244b11351dbc9e4290107e33fd78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce674fb62aac244b11351dbc9e4290107e33fd78"}], "stats": {"total": 101, "additions": 58, "deletions": 43}, "files": [{"sha": "dbe991a41666707fe1a28679b8ff79752bb4af28", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6f65e3c5dd79817b4255d4780fa2ca4e1274f95/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6f65e3c5dd79817b4255d4780fa2ca4e1274f95/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6f65e3c5dd79817b4255d4780fa2ca4e1274f95", "patch": "@@ -1,3 +1,16 @@\n+2006-04-02  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* builtins.c (dummy_object): Use build_int_cst instead of convert.\n+\t* tree-ssa-ccp.c (maybe_fold_stmt_addition): Use fold_convert\n+\tinstead of convert.\n+\t* dojump.c (do_jump): Likewise.\n+\t* expr.h (ADD_PARM_SIZE, SUB_PARM_SIZE, ARGS_SIZE_TREE): Likewise.\n+\t* gimplify.c (gimple_boolify, gimplify_init_constructor,\n+\tgimplify_boolean_expr): Likewise.\n+\t* emit-rtl.c (set_mem_attributes_minus_bitpos): Likewise.\n+\t* varasm.c (array_size_for_constructor): Likewise.\n+\t* tree-object-size.c (compute_object_offset): Likewise.\n+\n 2006-04-02  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/26977"}, {"sha": "763d5b2f34cdbe568847c9e3df2671ed7f75c471", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6f65e3c5dd79817b4255d4780fa2ca4e1274f95/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6f65e3c5dd79817b4255d4780fa2ca4e1274f95/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=b6f65e3c5dd79817b4255d4780fa2ca4e1274f95", "patch": "@@ -4295,7 +4295,7 @@ build_va_arg_indirect_ref (tree addr)\n static tree\n dummy_object (tree type)\n {\n-  tree t = convert (build_pointer_type (type), null_pointer_node);\n+  tree t = build_int_cst (build_pointer_type (type), 0);\n   return build1 (INDIRECT_REF, type, t);\n }\n "}, {"sha": "3be77a7dbe6aa644e7c1fb88a4a7599af23cba6b", "filename": "gcc/dojump.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6f65e3c5dd79817b4255d4780fa2ca4e1274f95/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6f65e3c5dd79817b4255d4780fa2ca4e1274f95/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=b6f65e3c5dd79817b4255d4780fa2ca4e1274f95", "patch": "@@ -277,7 +277,7 @@ do_jump (tree exp, rtx if_false_label, rtx if_true_label)\n           && (cmp_optab->handlers[(int) TYPE_MODE (type)].insn_code\n               != CODE_FOR_nothing))\n         {\n-          do_jump (convert (type, exp), if_false_label, if_true_label);\n+          do_jump (fold_convert (type, exp), if_false_label, if_true_label);\n           break;\n         }\n       goto normal;\n@@ -336,7 +336,7 @@ do_jump (tree exp, rtx if_false_label, rtx if_true_label)\n             && (cmp_optab->handlers[(int) TYPE_MODE (type)].insn_code\n \t\t!= CODE_FOR_nothing))\n           {\n-            do_jump (convert (type, exp), if_false_label, if_true_label);\n+            do_jump (fold_convert (type, exp), if_false_label, if_true_label);\n             break;\n           }\n         goto normal;"}, {"sha": "9607bf6965360320e49506cc8b524ddd1f2e8ab5", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6f65e3c5dd79817b4255d4780fa2ca4e1274f95/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6f65e3c5dd79817b4255d4780fa2ca4e1274f95/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=b6f65e3c5dd79817b4255d4780fa2ca4e1274f95", "patch": "@@ -1,6 +1,7 @@\n /* Emit RTL for the GCC expander.\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -1596,8 +1597,9 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n \t\t\t\t     index, low_bound);\n \n \t      off_tree = size_binop (PLUS_EXPR,\n-\t\t\t\t     size_binop (MULT_EXPR, convert (sizetype,\n-\t\t\t\t\t\t\t\t     index),\n+\t\t\t\t     size_binop (MULT_EXPR,\n+\t\t\t\t\t\t fold_convert (sizetype,\n+\t\t\t\t\t\t\t       index),\n \t\t\t\t\t\t unit_size),\n \t\t\t\t     off_tree);\n \t      t2 = TREE_OPERAND (t2, 0);"}, {"sha": "9ba5d4e7da9b112dfcfa90e185c19ee1c23cd81e", "filename": "gcc/expr.h", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6f65e3c5dd79817b4255d4780fa2ca4e1274f95/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6f65e3c5dd79817b4255d4780fa2ca4e1274f95/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=b6f65e3c5dd79817b4255d4780fa2ca4e1274f95", "patch": "@@ -29,8 +29,8 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"rtl.h\"\n /* For optimize_size */\n #include \"flags.h\"\n-/* For host_integerp, tree_low_cst, convert, size_binop, ssize_int, TREE_CODE,\n-   TYPE_SIZE, int_size_in_bytes,    */\n+/* For host_integerp, tree_low_cst, fold_convert, size_binop, ssize_int,\n+   TREE_CODE, TYPE_SIZE, int_size_in_bytes,    */\n #include \"tree.h\"\n /* For GET_MODE_BITSIZE, word_mode */\n #include \"machmode.h\"\n@@ -123,36 +123,36 @@ struct locate_and_pad_arg_data\n \n /* Add the value of the tree INC to the `struct args_size' TO.  */\n \n-#define ADD_PARM_SIZE(TO, INC)\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-  tree inc = (INC);\t\t\t\t\t\\\n-  if (host_integerp (inc, 0))\t\t\t\t\\\n-    (TO).constant += tree_low_cst (inc, 0);\t\t\\\n-  else if ((TO).var == 0)\t\t\t\t\\\n-    (TO).var = convert (ssizetype, inc);\t\t\\\n-  else\t\t\t\t\t\t\t\\\n-    (TO).var = size_binop (PLUS_EXPR, (TO).var,\t\t\\\n-\t\t\t   convert (ssizetype, inc));\t\\\n+#define ADD_PARM_SIZE(TO, INC)\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\\\n+  tree inc = (INC);\t\t\t\t\t\t\\\n+  if (host_integerp (inc, 0))\t\t\t\t\t\\\n+    (TO).constant += tree_low_cst (inc, 0);\t\t\t\\\n+  else if ((TO).var == 0)\t\t\t\t\t\\\n+    (TO).var = fold_convert (ssizetype, inc);\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\\\n+    (TO).var = size_binop (PLUS_EXPR, (TO).var,\t\t\t\\\n+\t\t\t   fold_convert (ssizetype, inc));\t\\\n } while (0)\n \n-#define SUB_PARM_SIZE(TO, DEC)\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-  tree dec = (DEC);\t\t\t\t\t\\\n-  if (host_integerp (dec, 0))\t\t\t\t\\\n-    (TO).constant -= tree_low_cst (dec, 0);\t\t\\\n-  else if ((TO).var == 0)\t\t\t\t\\\n-    (TO).var = size_binop (MINUS_EXPR, ssize_int (0),\t\\\n-\t\t\t   convert (ssizetype, dec));\t\\\n-  else\t\t\t\t\t\t\t\\\n-    (TO).var = size_binop (MINUS_EXPR, (TO).var,\t\\\n-\t\t\t   convert (ssizetype, dec));\t\\\n+#define SUB_PARM_SIZE(TO, DEC)\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\\\n+  tree dec = (DEC);\t\t\t\t\t\t\\\n+  if (host_integerp (dec, 0))\t\t\t\t\t\\\n+    (TO).constant -= tree_low_cst (dec, 0);\t\t\t\\\n+  else if ((TO).var == 0)\t\t\t\t\t\\\n+    (TO).var = size_binop (MINUS_EXPR, ssize_int (0),\t\t\\\n+\t\t\t   fold_convert (ssizetype, dec));\t\\\n+  else\t\t\t\t\t\t\t\t\\\n+    (TO).var = size_binop (MINUS_EXPR, (TO).var,\t\t\\\n+\t\t\t   fold_convert (ssizetype, dec));\t\\\n } while (0)\n \n /* Convert the implicit sum in a `struct args_size' into a tree\n    of type ssizetype.  */\n #define ARGS_SIZE_TREE(SIZE)\t\t\t\t\t\\\n ((SIZE).var == 0 ? ssize_int ((SIZE).constant)\t\t\t\\\n- : size_binop (PLUS_EXPR, convert (ssizetype, (SIZE).var),\t\\\n+ : size_binop (PLUS_EXPR, fold_convert (ssizetype, (SIZE).var),\t\\\n \t       ssize_int ((SIZE).constant)))\n \n /* Convert the implicit sum in a `struct args_size' into an rtx.  */"}, {"sha": "797877ebf70737852803a8849c866e5197cb7769", "filename": "gcc/gimplify.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6f65e3c5dd79817b4255d4780fa2ca4e1274f95/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6f65e3c5dd79817b4255d4780fa2ca4e1274f95/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=b6f65e3c5dd79817b4255d4780fa2ca4e1274f95", "patch": "@@ -2340,7 +2340,7 @@ gimple_boolify (tree expr)\n     default:\n       /* Other expressions that get here must have boolean values, but\n \t might need to be converted to the appropriate mode.  */\n-      return convert (boolean_type_node, expr);\n+      return fold_convert (boolean_type_node, expr);\n     }\n }\n \n@@ -3042,7 +3042,7 @@ gimplify_init_constructor (tree *expr_p, tree *pre_p,\n \ti = VEC_index (constructor_elt, elts, 1)->value;\n \tif (r == NULL || i == NULL)\n \t  {\n-\t    tree zero = convert (TREE_TYPE (type), integer_zero_node);\n+\t    tree zero = fold_convert (TREE_TYPE (type), integer_zero_node);\n \t    if (r == NULL)\n \t      r = zero;\n \t    if (i == NULL)\n@@ -3545,8 +3545,8 @@ gimplify_boolean_expr (tree *expr_p)\n   tree type = TREE_TYPE (*expr_p);\n \n   *expr_p = build3 (COND_EXPR, type, *expr_p,\n-\t\t    convert (type, boolean_true_node),\n-\t\t    convert (type, boolean_false_node));\n+\t\t    fold_convert (type, boolean_true_node),\n+\t\t    fold_convert (type, boolean_false_node));\n \n   return GS_OK;\n }"}, {"sha": "9c510bbc00f091fad9e2a0f5538df7f711b45bdb", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6f65e3c5dd79817b4255d4780fa2ca4e1274f95/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6f65e3c5dd79817b4255d4780fa2ca4e1274f95/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=b6f65e3c5dd79817b4255d4780fa2ca4e1274f95", "patch": "@@ -1,5 +1,5 @@\n /* __builtin_object_size (ptr, object_size_type) computation\n-   Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Jakub Jelinek <jakub@redhat.com>\n \n This file is part of GCC.\n@@ -134,7 +134,7 @@ compute_object_offset (tree expr, tree var)\n \t  code = MINUS_EXPR;\n \t  t = fold_build1 (NEGATE_EXPR, TREE_TYPE (t), t);\n \t}\n-      t = convert (sizetype, t);\n+      t = fold_convert (sizetype, t);\n       off = size_binop (MULT_EXPR, TYPE_SIZE_UNIT (TREE_TYPE (expr)), t);\n       break;\n "}, {"sha": "83dce72770b12518951d22ece553668f8dc5cdae", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6f65e3c5dd79817b4255d4780fa2ca4e1274f95/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6f65e3c5dd79817b4255d4780fa2ca4e1274f95/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=b6f65e3c5dd79817b4255d4780fa2ca4e1274f95", "patch": "@@ -1,5 +1,5 @@\n /* Conditional constant propagation pass for the GNU compiler.\n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006\n    Free Software Foundation, Inc.\n    Adapted from original RTL SSA-CCP by Daniel Berlin <dberlin@dberlin.org>\n    Adapted to GIMPLE trees by Diego Novillo <dnovillo@redhat.com>\n@@ -1879,15 +1879,15 @@ maybe_fold_stmt_addition (tree expr)\n \t      if (TREE_CODE (min_idx) != INTEGER_CST)\n \t\tbreak;\n \n-\t      array_idx = convert (TREE_TYPE (min_idx), array_idx);\n+\t      array_idx = fold_convert (TREE_TYPE (min_idx), array_idx);\n \t      if (!integer_zerop (min_idx))\n \t\tarray_idx = int_const_binop (MINUS_EXPR, array_idx,\n \t\t\t\t\t     min_idx, 0);\n \t    }\n \t}\n \n       /* Convert the index to a byte offset.  */\n-      array_idx = convert (sizetype, array_idx);\n+      array_idx = fold_convert (sizetype, array_idx);\n       array_idx = int_const_binop (MULT_EXPR, array_idx, elt_size, 0);\n \n       /* Update the operands for the next round, or for folding.  */"}, {"sha": "2d8a6bfe81aa35ef2e7326878f12ae77ee227c18", "filename": "gcc/varasm.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6f65e3c5dd79817b4255d4780fa2ca4e1274f95/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6f65e3c5dd79817b4255d4780fa2ca4e1274f95/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=b6f65e3c5dd79817b4255d4780fa2ca4e1274f95", "patch": "@@ -4137,7 +4137,7 @@ array_size_for_constructor (tree val)\n {\n   tree max_index, i;\n   unsigned HOST_WIDE_INT cnt;\n-  tree index, value;\n+  tree index, value, tmp;\n \n   /* This code used to attempt to handle string constants that are not\n      arrays of single-bytes, but nothing else does, so there's no point in\n@@ -4158,9 +4158,9 @@ array_size_for_constructor (tree val)\n     return 0;\n \n   /* Compute the total number of array elements.  */\n-  i = size_binop (MINUS_EXPR, convert (sizetype, max_index),\n-\t\t  convert (sizetype,\n-\t\t\t   TYPE_MIN_VALUE (TYPE_DOMAIN (TREE_TYPE (val)))));\n+  tmp = TYPE_MIN_VALUE (TYPE_DOMAIN (TREE_TYPE (val)));\n+  i = size_binop (MINUS_EXPR, fold_convert (sizetype, max_index),\n+\t\t  fold_convert (sizetype, tmp));\n   i = size_binop (PLUS_EXPR, i, build_int_cst (sizetype, 1));\n \n   /* Multiply by the array element unit size to find number of bytes.  */"}]}