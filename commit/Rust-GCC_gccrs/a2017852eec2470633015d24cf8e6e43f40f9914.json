{"sha": "a2017852eec2470633015d24cf8e6e43f40f9914", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIwMTc4NTJlZWMyNDcwNjMzMDE1ZDI0Y2Y4ZTZlNDNmNDBmOTkxNA==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2004-07-14T16:27:37Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2004-07-14T16:27:37Z"}, "message": "pa.c (fix_range): New function to mark a range(s) of registers as fixed registers.\n\n\t* pa.c (fix_range): New function to mark a range(s) of registers as\n\tfixed registers.\n\t(override_options): Call fix_range if the -mfixed-range option string\n\tis not empty.\n\t* pa.h (TARGET_OPTIONS): Add -mfixed-range option.\n\t* doc/invoke.texi (-mfixed-range): Document new option.\n\nFrom-SVN: r84690", "tree": {"sha": "9f9a3089b2a9e3e6784a35fb260aa6bfacd50583", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f9a3089b2a9e3e6784a35fb260aa6bfacd50583"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2017852eec2470633015d24cf8e6e43f40f9914", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2017852eec2470633015d24cf8e6e43f40f9914", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2017852eec2470633015d24cf8e6e43f40f9914", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2017852eec2470633015d24cf8e6e43f40f9914/comments", "author": null, "committer": null, "parents": [{"sha": "90ea9897a0940659bc41355d41573fde6c35617a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90ea9897a0940659bc41355d41573fde6c35617a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90ea9897a0940659bc41355d41573fde6c35617a"}], "stats": {"total": 136, "additions": 120, "deletions": 16}, "files": [{"sha": "b24e2245dc993b3a1aa97f5678ff02ff00d063e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2017852eec2470633015d24cf8e6e43f40f9914/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2017852eec2470633015d24cf8e6e43f40f9914/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a2017852eec2470633015d24cf8e6e43f40f9914", "patch": "@@ -1,3 +1,12 @@\n+2004-07-14  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* pa.c (fix_range): New function to mark a range(s) of registers as\n+\tfixed registers.\n+\t(override_options): Call fix_range if the -mfixed-range option string\n+\tis not empty.\n+\t* pa.h (TARGET_OPTIONS): Add -mfixed-range option.\n+\t* doc/invoke.texi (-mfixed-range): Document new option.\n+\n 2004-07-14  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/rs6000.c (function_arg_padding): Do not pad SFmode"}, {"sha": "ebe7a52abaa64879006330a6fe947bff98f92fdc", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 87, "deletions": 7, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2017852eec2470633015d24cf8e6e43f40f9914/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2017852eec2470633015d24cf8e6e43f40f9914/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=a2017852eec2470633015d24cf8e6e43f40f9914", "patch": "@@ -86,6 +86,7 @@ hppa_fpstore_bypass_p (rtx out_insn, rtx in_insn)\n #endif\n \n static void copy_reg_pointer (rtx, rtx);\n+static void fix_range (const char *);\n static int hppa_address_cost (rtx);\n static bool hppa_rtx_costs (rtx, int, int, int *);\n static inline rtx force_mode (enum machine_mode, rtx);\n@@ -152,18 +153,21 @@ static bool pa_pass_by_reference (CUMULATIVE_ARGS *ca, enum machine_mode,\n rtx hppa_compare_op0, hppa_compare_op1;\n enum cmp_type hppa_branch_type;\n \n-/* Which cpu we are scheduling for.  */\n-enum processor_type pa_cpu;\n-\n-/* String to hold which cpu we are scheduling for.  */\n-const char *pa_cpu_string;\n-\n /* Which architecture we are generating code for.  */\n enum architecture_type pa_arch;\n \n /* String to hold which architecture we are generating code for.  */\n const char *pa_arch_string;\n \n+/* String used with the -mfixed-range= option.  */\n+const char *pa_fixed_range_string;\n+\n+/* Which cpu we are scheduling for.  */\n+enum processor_type pa_cpu;\n+\n+/* String to hold which cpu we are scheduling for.  */\n+const char *pa_cpu_string;\n+\n /* Counts for the number of callee-saved general and floating point\n    registers which were saved by the current function's prologue.  */\n static int gr_saved, fr_saved;\n@@ -280,6 +284,79 @@ static size_t n_deferred_plabels = 0;\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n+/* Parse the -mfixed-range= option string.  */\n+\n+static void\n+fix_range (const char *const_str)\n+{\n+  int i, first, last;\n+  char *str, *dash, *comma;\n+\n+  /* str must be of the form REG1'-'REG2{,REG1'-'REG} where REG1 and\n+     REG2 are either register names or register numbers.  The effect\n+     of this option is to mark the registers in the range from REG1 to\n+     REG2 as ``fixed'' so they won't be used by the compiler.  This is\n+     used, e.g., to ensure that kernel mode code doesn't use f32-f127.  */\n+\n+  i = strlen (const_str);\n+  str = (char *) alloca (i + 1);\n+  memcpy (str, const_str, i + 1);\n+\n+  while (1)\n+    {\n+      dash = strchr (str, '-');\n+      if (!dash)\n+\t{\n+\t  warning (\"value of -mfixed-range must have form REG1-REG2\");\n+\t  return;\n+\t}\n+      *dash = '\\0';\n+\n+      comma = strchr (dash + 1, ',');\n+      if (comma)\n+\t*comma = '\\0';\n+\n+      first = decode_reg_name (str);\n+      if (first < 0)\n+\t{\n+\t  warning (\"unknown register name: %s\", str);\n+\t  return;\n+\t}\n+\n+      last = decode_reg_name (dash + 1);\n+      if (last < 0)\n+\t{\n+\t  warning (\"unknown register name: %s\", dash + 1);\n+\t  return;\n+\t}\n+\n+      *dash = '-';\n+\n+      if (first > last)\n+\t{\n+\t  warning (\"%s-%s is an empty range\", str, dash + 1);\n+\t  return;\n+\t}\n+\n+      for (i = first; i <= last; ++i)\n+\tfixed_regs[i] = call_used_regs[i] = 1;\n+\n+      if (!comma)\n+\tbreak;\n+\n+      *comma = ',';\n+      str = comma + 1;\n+    }\n+\n+  /* Check if all floating point registers have been fixed.  */\n+  for (i = FP_REG_FIRST; i <= FP_REG_LAST; i++)\n+    if (!fixed_regs[i])\n+      break;\n+\n+  if (i > FP_REG_LAST)\n+    target_flags |= MASK_DISABLE_FPREGS;\n+}\n+\n void\n override_options (void)\n {\n@@ -321,7 +398,7 @@ override_options (void)\n       warning (\"unknown -mschedule= option (%s).\\nValid options are 700, 7100, 7100LC, 7200, 7300, and 8000\\n\", pa_cpu_string);\n     }\n \n-  /* Set the instruction set architecture.  */\n+  /* Set the instruction architecture.  */\n   if (pa_arch_string && ! strcmp (pa_arch_string, \"1.0\"))\n     {\n       pa_arch_string = \"1.0\";\n@@ -346,6 +423,9 @@ override_options (void)\n       warning (\"unknown -march= option (%s).\\nValid options are 1.0, 1.1, and 2.0\\n\", pa_arch_string);\n     }\n \n+  if (pa_fixed_range_string)\n+    fix_range (pa_fixed_range_string);\n+\n   /* Unconditional branches in the delay slot are not compatible with dwarf2\n      call frame information.  There is no benefit in using this optimization\n      on PA8000 and later processors.  */"}, {"sha": "9e259f308b9fe4c1346e9d224e821f8e221ce60d", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2017852eec2470633015d24cf8e6e43f40f9914/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2017852eec2470633015d24cf8e6e43f40f9914/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=a2017852eec2470633015d24cf8e6e43f40f9914", "patch": "@@ -45,12 +45,6 @@ enum processor_type\n   PROCESSOR_8000\n };\n \n-/* For -mschedule= option.  */\n-extern const char *pa_cpu_string;\n-extern enum processor_type pa_cpu;\n-\n-#define pa_cpu_attr ((enum attr_cpu)pa_cpu)\n-\n /* Which architecture to generate code for.  */\n \n enum architecture_type\n@@ -66,6 +60,15 @@ struct rtx_def;\n extern const char *pa_arch_string;\n extern enum architecture_type pa_arch;\n \n+/* For -mfixed-range= option.  */\n+extern const char *pa_fixed_range_string;\n+\n+/* For -mschedule= option.  */\n+extern const char *pa_cpu_string;\n+extern enum processor_type pa_cpu;\n+\n+#define pa_cpu_attr ((enum attr_cpu)pa_cpu)\n+\n /* Print subsidiary information on the compiler version in use.  */\n \n #define TARGET_VERSION fputs (\" (hppa)\", stderr);\n@@ -306,10 +309,13 @@ extern int target_flags;\n \n #define TARGET_OPTIONS\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-  { \"schedule=\",\t\t&pa_cpu_string,\t\t\t\t\\\n-    N_(\"Specify CPU for scheduling purposes\"), 0},\t\t\t\\\n   { \"arch=\",\t\t\t&pa_arch_string,\t\t\t\\\n-    N_(\"Specify architecture for code generation.  Values are 1.0, 1.1, and 2.0.  2.0 requires gas snapshot 19990413 or later.\"), 0}\\\n+    N_(\"Specify PA-RISC architecture for code generation.  \"\t\t\\\n+       \"Values are 1.0, 1.1 and 2.0.\"), 0},\t\t\t\t\\\n+  { \"fixed-range=\",\t\t&pa_fixed_range_string,\t\t\t\\\n+    N_(\"Specify range of registers to make fixed\"), 0},\t\t\t\\\n+  { \"schedule=\",\t\t&pa_cpu_string,\t\t\t\t\\\n+    N_(\"Specify CPU for scheduling purposes\"), 0}\t\t\t\\\n }\n \n /* Support for a compile-time default CPU, et cetera.  The rules are:"}, {"sha": "7bf2d40259da8313cbe79615977620c0a6d5ce3a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2017852eec2470633015d24cf8e6e43f40f9914/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2017852eec2470633015d24cf8e6e43f40f9914/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a2017852eec2470633015d24cf8e6e43f40f9914", "patch": "@@ -461,6 +461,7 @@ in the following sections.\n @gccoptlist{-march=@var{architecture-type} @gol\n -mbig-switch  -mdisable-fpregs  -mdisable-indexing @gol\n -mfast-indirect-calls  -mgas  -mgnu-ld   -mhp-ld @gol\n+-mfixed-range=@var{register-range} @gol\n -mjump-in-delay -mlinker-opt -mlong-calls @gol\n -mlong-load-store  -mno-big-switch  -mno-disable-fpregs @gol\n -mno-disable-indexing  -mno-fast-indirect-calls  -mno-gas @gol\n@@ -7720,6 +7721,14 @@ allows GCC to emit code which performs faster indirect calls.\n This option will not work in the presence of shared libraries or nested\n functions.\n \n+@item -mfixed-range=@var{register-range}\n+@opindex mfixed-range\n+Generate code treating the given register range as fixed registers.\n+A fixed register is one that the register allocator can not use.  This is\n+useful when compiling kernel code.  A register range is specified as\n+two registers separated by a dash.  Multiple register ranges can be\n+specified separated by a comma.\n+\n @item -mlong-load-store\n @opindex mlong-load-store\n Generate 3-instruction load and store sequences as sometimes required by"}]}