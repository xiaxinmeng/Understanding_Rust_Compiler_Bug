{"sha": "de1b5c17fd1418f01f0a57d03023c21d888dc97c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGUxYjVjMTdmZDE0MThmMDFmMGE1N2QwMzAyM2MyMWQ4ODhkYzk3Yw==", "commit": {"author": {"name": "Martin Uecker", "email": "uecker@eecs.berkeley.edu", "date": "2015-01-14T06:50:19Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-01-14T06:50:19Z"}, "message": "tree-vrp.c (check_array_ref): Emit more warnings for warn_array_bounds >= 2.\n\n\t* tree-vrp.c (check_array_ref): Emit more warnings\n\tfor warn_array_bounds >= 2.\n\t* common.opt: New option -Warray-bounds=.\n\t* doc/invoke.texi: Document -Warray-bounds=.\n\n\t* c.opt: New option -Warray-bounds=.\n\n\t* gcc.dg/Warray-bounds-11.c: New test-case.\n\nFrom-SVN: r219577", "tree": {"sha": "21b0cb6a9549584b52bb45238be9c976079b63c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21b0cb6a9549584b52bb45238be9c976079b63c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de1b5c17fd1418f01f0a57d03023c21d888dc97c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de1b5c17fd1418f01f0a57d03023c21d888dc97c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de1b5c17fd1418f01f0a57d03023c21d888dc97c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de1b5c17fd1418f01f0a57d03023c21d888dc97c/comments", "author": {"login": "uecker", "id": 2036635, "node_id": "MDQ6VXNlcjIwMzY2MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/2036635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uecker", "html_url": "https://github.com/uecker", "followers_url": "https://api.github.com/users/uecker/followers", "following_url": "https://api.github.com/users/uecker/following{/other_user}", "gists_url": "https://api.github.com/users/uecker/gists{/gist_id}", "starred_url": "https://api.github.com/users/uecker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uecker/subscriptions", "organizations_url": "https://api.github.com/users/uecker/orgs", "repos_url": "https://api.github.com/users/uecker/repos", "events_url": "https://api.github.com/users/uecker/events{/privacy}", "received_events_url": "https://api.github.com/users/uecker/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2ca1ca6581aea9475feed78d5d4daafdb5d1ee3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ca1ca6581aea9475feed78d5d4daafdb5d1ee3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ca1ca6581aea9475feed78d5d4daafdb5d1ee3b"}], "stats": {"total": 140, "additions": 137, "deletions": 3}, "files": [{"sha": "dd6ad6bd78e9e774cffcd245cf778cf869ea1b10", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de1b5c17fd1418f01f0a57d03023c21d888dc97c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de1b5c17fd1418f01f0a57d03023c21d888dc97c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=de1b5c17fd1418f01f0a57d03023c21d888dc97c", "patch": "@@ -1,3 +1,10 @@\n+2015-01-13  Martin Uecker <uecker@eecs.berkeley.edu>\n+\n+\t* tree-vrp.c (check_array_ref): Emit more warnings\n+\tfor warn_array_bounds >= 2.\n+\t* common.opt: New option -Warray-bounds=.\n+\t* doc/invoke.texi: Document -Warray-bounds=.\n+\n 2015-01-14  Chung-Ju Wu  <jasonwucj@gmail.com>\n \n \t* config/nds32/nds32.opt (mforce-fp-as-gp): Remove."}, {"sha": "1efb75ac13cb747007a32635f05cb27352f767c1", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de1b5c17fd1418f01f0a57d03023c21d888dc97c/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de1b5c17fd1418f01f0a57d03023c21d888dc97c/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=de1b5c17fd1418f01f0a57d03023c21d888dc97c", "patch": "@@ -1,3 +1,7 @@\n+2015-01-13  Martin Uecker <uecker@eecs.berkeley.edu>\n+\n+\t* c.opt: New option -Warray-bounds=.\n+\n 2015-01-09  Michael Collison  <michael.collison@linaro.org>\n \n \t* array-notation-common.c: Include hash-set.h, machmode.h,"}, {"sha": "e61fc567c9e5c81b795e13a3580290f82dc158da", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de1b5c17fd1418f01f0a57d03023c21d888dc97c/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de1b5c17fd1418f01f0a57d03023c21d888dc97c/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=de1b5c17fd1418f01f0a57d03023c21d888dc97c", "patch": "@@ -279,6 +279,10 @@ Warray-bounds\n LangEnabledBy(C ObjC C++ ObjC++,Wall)\n ; in common.opt\n \n+Warray-bounds=\n+LangEnabledBy(C ObjC C++ ObjC++,Wall,1,0)\n+; in common.opt\n+\n Wassign-intercept\n ObjC ObjC++ Var(warn_assign_intercept) Warning\n Warn whenever an Objective-C assignment is being intercepted by the garbage collector"}, {"sha": "3d1987559a881d42443989839a412fe051dc75dd", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de1b5c17fd1418f01f0a57d03023c21d888dc97c/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de1b5c17fd1418f01f0a57d03023c21d888dc97c/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=de1b5c17fd1418f01f0a57d03023c21d888dc97c", "patch": "@@ -529,6 +529,10 @@ Warray-bounds\n Common Var(warn_array_bounds) Warning\n Warn if an array is accessed out of bounds\n \n+Warray-bounds=\n+Common Joined RejectNegative UInteger Var(warn_array_bounds) Warning\n+Warn if an array is accessed out of bounds\n+\n Wattributes\n Common Var(warn_attributes) Init(1) Warning\n Warn about inappropriate attribute usage"}, {"sha": "0a04d34d039f7ccd6ae6ca535ec5a607508c6703", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de1b5c17fd1418f01f0a57d03023c21d888dc97c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de1b5c17fd1418f01f0a57d03023c21d888dc97c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=de1b5c17fd1418f01f0a57d03023c21d888dc97c", "patch": "@@ -240,7 +240,7 @@ Objective-C and Objective-C++ Dialects}.\n @gccoptlist{-fsyntax-only  -fmax-errors=@var{n}  -Wpedantic @gol\n -pedantic-errors @gol\n -w  -Wextra  -Wall  -Waddress  -Waggregate-return  @gol\n--Waggressive-loop-optimizations -Warray-bounds @gol\n+-Waggressive-loop-optimizations -Warray-bounds -Warray-bounds=@var{n} @gol\n -Wbool-compare @gol\n -Wno-attributes -Wno-builtin-macro-redefined @gol\n -Wc90-c99-compat -Wc99-c11-compat @gol\n@@ -3389,7 +3389,7 @@ Options} and @ref{Objective-C and Objective-C++ Dialect Options}.\n @option{-Wall} turns on the following warning flags:\n \n @gccoptlist{-Waddress   @gol\n--Warray-bounds @r{(only with} @option{-O2}@r{)}  @gol\n+-Warray-bounds=1 @r{(only with} @option{-O2}@r{)}  @gol\n -Wc++11-compat  -Wc++14-compat@gol\n -Wchar-subscripts  @gol\n -Wenum-compare @r{(in C/ObjC; this is on by default in C++)} @gol\n@@ -4303,12 +4303,26 @@ Warn about overriding virtual functions that are not marked with the override\n keyword.\n \n @item -Warray-bounds\n+@itemx -Warray-bounds=@var{n}\n @opindex Wno-array-bounds\n @opindex Warray-bounds\n This option is only active when @option{-ftree-vrp} is active\n (default for @option{-O2} and above). It warns about subscripts to arrays\n that are always out of bounds. This warning is enabled by @option{-Wall}.\n \n+@table @gcctabopt\n+@item -Warray-bounds=1\n+This is the warning level of @option{-Warray-bounds} and is enabled\n+by @option{-Wall}; higher levels are not, and must be explicitly requested.\n+\n+@item -Warray-bounds=2\n+This warning level also warns about out of bounds access for\n+arrays at the end of a struct and for arrays accessed through\n+pointers. This warning level may give a larger number of\n+false positives and is deactivated by default.\n+@end table\n+\n+\n @item -Wbool-compare\n @opindex Wno-bool-compare\n @opindex Wbool-compare"}, {"sha": "c07074bae8a45cc4076da1c65e22a7072b7681c3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de1b5c17fd1418f01f0a57d03023c21d888dc97c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de1b5c17fd1418f01f0a57d03023c21d888dc97c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=de1b5c17fd1418f01f0a57d03023c21d888dc97c", "patch": "@@ -1,3 +1,7 @@\n+2015-01-13  Martin Uecker <uecker@eecs.berkeley.edu>\n+\n+\t* gcc.dg/Warray-bounds-11.c: New test-case.\n+\n 2015-01-14  Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n \n \t* gcc.target/mips/octeon3-pipe-1.c: New test."}, {"sha": "2e684987e8eceee9855c144d8912b5de8221705e", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-11.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de1b5c17fd1418f01f0a57d03023c21d888dc97c/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de1b5c17fd1418f01f0a57d03023c21d888dc97c/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-11.c?ref=de1b5c17fd1418f01f0a57d03023c21d888dc97c", "patch": "@@ -0,0 +1,96 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -Warray-bounds=2\" } */\n+\n+extern void* malloc(unsigned long x);\n+\n+int e[3];\n+\n+struct f { int f[3]; };\n+\n+extern void bar(int v[]);\n+\n+struct h {\n+\n+\tint i;\n+\tint j[];\n+};\n+\n+struct h0 {\n+\n+\tint i;\n+\tint j[0];\n+};\n+\n+struct h0b {\n+\n+\tint i;\n+\tint j[0];\n+\tint k;\n+};\n+\n+struct h1 {\n+\n+\tint i;\n+\tint j[1];\n+};\n+\n+struct h1b {\n+\n+\tint i;\n+\tint j[1];\n+\tint k;\n+};\n+\n+struct h3 {\n+\n+\tint i;\n+\tint j[3];\n+};\n+\n+struct h3b {\n+\n+\tint i;\n+\tint j[3];\n+\tint k;\n+};\n+\n+void foo(int (*a)[3])\n+{\n+\t(*a)[4] = 1;\t/* { dg-warning \"subscript is above array bound\" } */\n+\ta[0][0] = 1;\t// ok\n+\ta[1][0] = 1;\t// ok\n+\ta[1][4] = 1;\t/* { dg-warning \"subscript is above array bound\" } */\n+\n+\tint c[3] = { 0 };\n+\n+\tc[4] = 1;\t/* { dg-warning \"subscript is above array bound\" } */\n+\n+\te[4] = 1;\t/* { dg-warning \"subscript is above array bound\" } */\n+\n+\tstruct f f;\n+\tf.f[4] = 1;\t/* { dg-warning \"subscript is above array bound\" } */\n+\n+\tstruct h* h = malloc(sizeof(struct h) + 3 * sizeof(int));\n+\tstruct h0* h0 = malloc(sizeof(struct h0) + 3 * sizeof(int));\n+\tstruct h1* h1 = malloc(sizeof(struct h1) + 3 * sizeof(int));\n+\tstruct h3* h3 = malloc(sizeof(struct h3));\n+\n+\th->j[4] = 1;\t// flexible array member\n+\th0->j[4] = 1;\t// zero-sized array extension\n+\th1->j[4] = 1;\t/* { dg-warning \"subscript is above array bound\" } */\n+\th3->j[4] = 1;\t/* { dg-warning \"subscript is above array bound\" } */\n+\n+\tstruct h0b* h0b = malloc(sizeof(struct h) + 3 * sizeof(int));\n+\tstruct h1b* h1b = malloc(sizeof(struct h1b) + 3 * sizeof(int));\n+\tstruct h3b* h3b = malloc(sizeof(struct h3b));\n+//\th0b->j[4] = 1;\n+\th1b->j[4] = 1;;\t/* { dg-warning \"subscript is above array bound\" } */\n+\th3b->j[4] = 1;;\t/* { dg-warning \"subscript is above array bound\" } */\n+\n+\t// make sure nothing gets optimized away\n+\tbar(*a);\n+\tbar(c);\n+\tbar(e);\n+\tbar(f.f);\n+}\n+"}, {"sha": "2e0b158ab0db2be909ce7a5f213c65142128c1b0", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de1b5c17fd1418f01f0a57d03023c21d888dc97c/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de1b5c17fd1418f01f0a57d03023c21d888dc97c/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=de1b5c17fd1418f01f0a57d03023c21d888dc97c", "patch": "@@ -6498,7 +6498,8 @@ check_array_ref (location_t location, tree ref, bool ignore_off_by_one)\n   /* Accesses to trailing arrays via pointers may access storage\n      beyond the types array bounds.  */\n   base = get_base_address (ref);\n-  if (base && TREE_CODE (base) == MEM_REF)\n+  if ((warn_array_bounds < 2)\n+      && base && TREE_CODE (base) == MEM_REF)\n     {\n       tree cref, next = NULL_TREE;\n "}]}