{"sha": "b5e3577030b315d4f6adda285c3d01b0b845263e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVlMzU3NzAzMGIzMTVkNGY2YWRkYTI4NWMzZDAxYjBiODQ1MjYzZQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-11-25T10:46:10Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-11-25T10:46:10Z"}, "message": "re PR target/50566 ([avr]: Add support for better logging similar to -mdeb)\n\n\tPR target/50566\n\t* config/avr/avr-protos.h (avr_log_t): Add field .builtin.\n\t* config/avr/avr-log.c (avr_log_set_avr_log): Initialize it.\n\tDon't bypass TARGET_ALL_DEBUG.  Print self-info with ?.\n\t(avr_log_vadump): Support %D and %X to print double_int.\n\t(avr_double_int_pop_digit): New static function.\n\t(avr_dump_double_int_hex): New static function.\n\nFrom-SVN: r181718", "tree": {"sha": "61d10def4ccb3f218c436b11a2a1a7b646ed6ade", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61d10def4ccb3f218c436b11a2a1a7b646ed6ade"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5e3577030b315d4f6adda285c3d01b0b845263e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5e3577030b315d4f6adda285c3d01b0b845263e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5e3577030b315d4f6adda285c3d01b0b845263e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5e3577030b315d4f6adda285c3d01b0b845263e/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c07e938571456e3275e323af1229292a81a6edea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c07e938571456e3275e323af1229292a81a6edea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c07e938571456e3275e323af1229292a81a6edea"}], "stats": {"total": 97, "additions": 88, "deletions": 9}, "files": [{"sha": "9091465a3b4ddbbaeef0b89b5e672a27c359c94f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e3577030b315d4f6adda285c3d01b0b845263e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e3577030b315d4f6adda285c3d01b0b845263e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5e3577030b315d4f6adda285c3d01b0b845263e", "patch": "@@ -1,3 +1,13 @@\n+2011-11-25  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/50566\n+\t* config/avr/avr-protos.h (avr_log_t): Add field .builtin.\n+\t* config/avr/avr-log.c (avr_log_set_avr_log): Initialize it.\n+\tDon't bypass TARGET_ALL_DEBUG.  Print self-info with ?.\n+\t(avr_log_vadump): Support %D and %X to print double_int.\n+\t(avr_double_int_pop_digit): New static function.\n+\t(avr_dump_double_int_hex): New static function.\n+\n 2011-11-24  Enkovich Ilya  <ilya.enkovich@intel.com>\n \n \tPR target/51287"}, {"sha": "3c4bccfa282b79cd2cacbe630370880102ff2a15", "filename": "gcc/config/avr/avr-log.c", "status": "modified", "additions": 77, "deletions": 9, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e3577030b315d4f6adda285c3d01b0b845263e/gcc%2Fconfig%2Favr%2Favr-log.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e3577030b315d4f6adda285c3d01b0b845263e/gcc%2Fconfig%2Favr%2Favr-log.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-log.c?ref=b5e3577030b315d4f6adda285c3d01b0b845263e", "patch": "@@ -49,6 +49,8 @@\n   C: enum rtx_code\n   m: enum machine_mode\n   R: enum reg_class\n+  D: double_int (signed decimal)\n+  X: double_int (unsigned hex)\n   L: insn list\n   H: location_t\n \n@@ -82,9 +84,9 @@ static void avr_log_vadump (FILE*, const char*, va_list);\n \n /* As we have no variadic macros, avr_edump maps to a call to\n    avr_log_set_caller_e which saves __FUNCTION__ to avr_log_caller and\n-   returns a function pointer to avr_log_fdump_e.  avr_fdump_e\n+   returns a function pointer to avr_log_fdump_e.  avr_log_fdump_e\n    gets the printf-like arguments and calls avr_log_vadump, the\n-   worker function. avr_fdump works the same way.  */\n+   worker function.  avr_fdump works the same way.  */\n \n /* Provide avr_log_fdump_e/f so that avr_log_set_caller_e/_f can return\n    their address.  */\n@@ -135,6 +137,49 @@ avr_log_set_caller_f (const char *caller)\n   return avr_log_fdump_f;\n }\n \n+\n+/* Copy-paste from double-int.c:double_int_split_digit (it's static there).\n+   Splits last digit of *CST (taken as unsigned) in BASE and returns it.  */\n+\n+static unsigned\n+avr_double_int_pop_digit (double_int *cst, unsigned base)\n+{\n+  unsigned HOST_WIDE_INT resl, reml;\n+  HOST_WIDE_INT resh, remh;\n+\n+  div_and_round_double (FLOOR_DIV_EXPR, true, cst->low, cst->high, base, 0,\n+\t\t\t&resl, &resh, &reml, &remh);\n+  cst->high = resh;\n+  cst->low = resl;\n+\n+  return reml;\n+}\n+\n+\n+/* Dump VAL as hex value to FILE.  */\n+\n+static void\n+avr_dump_double_int_hex (FILE *file, double_int val)\n+{\n+  unsigned digit[4];\n+\n+  digit[0] = avr_double_int_pop_digit (&val, 1 << 16);\n+  digit[1] = avr_double_int_pop_digit (&val, 1 << 16);\n+  digit[2] = avr_double_int_pop_digit (&val, 1 << 16);\n+  digit[3] = avr_double_int_pop_digit (&val, 1 << 16);\n+\n+  fprintf (file, \"0x\");\n+\n+  if (digit[3] | digit[2])\n+    fprintf (file, \"%04x%04x\", digit[3], digit[2]);\n+\n+  if (digit[3] | digit[2] | digit[1] | digit[0])\n+    fprintf (file, \"%04x%04x\", digit[1], digit[0]);\n+  else\n+    fprintf (file, \"0\");\n+}\n+\n+\n /* Worker function implementing the %-codes and forwarding to\n    respective print/dump function.  */\n \n@@ -189,6 +234,14 @@ avr_log_vadump (FILE *file, const char *fmt, va_list ap)\n               fprintf (file, \"%d\", va_arg (ap, int));\n               break;\n               \n+            case 'D':\n+              dump_double_int (file, va_arg (ap, double_int), false);\n+              break;\n+\n+            case 'X':\n+              avr_dump_double_int_hex (file, va_arg (ap, double_int));\n+              break;\n+              \n             case 'x':\n               fprintf (file, \"%x\", va_arg (ap, int));\n               break;\n@@ -251,7 +304,7 @@ avr_log_vadump (FILE *file, const char *fmt, va_list ap)\n                 location_t loc = va_arg (ap, location_t);\n                 \n                 if (BUILTINS_LOCATION == loc)\n-                  fprintf (file, \"<BUILTIN-LOCATION\");\n+                  fprintf (file, \"<BUILTIN-LOCATION>\");\n                 else if (UNKNOWN_LOCATION == loc)\n                   fprintf (file, \"<UNKNOWN-LOCATION>\");\n                 else\n@@ -306,21 +359,33 @@ avr_log_vadump (FILE *file, const char *fmt, va_list ap)\n void\n avr_log_set_avr_log (void)\n {\n-  if (avr_log_details)\n+  bool all = TARGET_ALL_DEBUG != 0;\n+  \n+  if (all || avr_log_details)\n     {\n       /* Adding , at beginning and end of string makes searching easier.  */\n       \n       char *str = (char*) alloca (3 + strlen (avr_log_details));\n+      bool info;\n       \n       str[0] = ',';\n       strcat (stpcpy (str+1, avr_log_details), \",\");\n-      \n-#define SET_DUMP_DETAIL(S)                                              \\\n-      avr_log.S = (TARGET_ALL_DEBUG                                     \\\n-                   || NULL != strstr (str, \",\" #S \",\")                  \\\n-                   || NULL != strstr (str, \",all,\"))\n+\n+      all |= NULL != strstr (str, \",all,\");\n+      info = NULL != strstr (str, \",?,\");\n+\n+      if (info)\n+        fprintf (stderr, \"\\n-mlog=\");\n+\n+#define SET_DUMP_DETAIL(S)                                       \\\n+      do {                                                       \\\n+        avr_log.S = (all || NULL != strstr (str, \",\" #S \",\"));   \\\n+        if (info)                                                \\\n+          fprintf (stderr, #S \",\");                              \\\n+      } while (0)\n \n       SET_DUMP_DETAIL (address_cost);\n+      SET_DUMP_DETAIL (builtin);\n       SET_DUMP_DETAIL (constraints);\n       SET_DUMP_DETAIL (legitimate_address_p);\n       SET_DUMP_DETAIL (legitimize_address);\n@@ -329,5 +394,8 @@ avr_log_set_avr_log (void)\n       SET_DUMP_DETAIL (rtx_costs);\n \n #undef SET_DUMP_DETAIL\n+\n+      if (info)\n+        fprintf (stderr, \"?\\n\\n\");\n     }\n }"}, {"sha": "c5ed5f0df042d5c077391a13f906761c2d289aa1", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e3577030b315d4f6adda285c3d01b0b845263e/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e3577030b315d4f6adda285c3d01b0b845263e/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=b5e3577030b315d4f6adda285c3d01b0b845263e", "patch": "@@ -142,6 +142,7 @@ extern void avr_log_set_avr_log (void);\n typedef struct\n {\n   unsigned address_cost :1;\n+  unsigned builtin :1;\n   unsigned constraints :1;\n   unsigned legitimate_address_p :1;\n   unsigned legitimize_address :1;"}]}