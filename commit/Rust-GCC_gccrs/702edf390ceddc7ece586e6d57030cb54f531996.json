{"sha": "702edf390ceddc7ece586e6d57030cb54f531996", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAyZWRmMzkwY2VkZGM3ZWNlNTg2ZTZkNTcwMzBjYjU0ZjUzMTk5Ng==", "commit": {"author": {"name": "John David Anglin", "email": "dave@hiauly1.hia.nrc.ca", "date": "2000-09-06T06:09:15Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-09-06T06:09:15Z"}, "message": "John David Anglin <dave@hiauly1.hia.nrc.ca>\n\n        * gettext.h (nls_uint32): Choose via INT_MAX instead of UINT_MAX.\n\nFrom-SVN: r36180", "tree": {"sha": "fb453c9c8959d4f2dcb6b263c7adda57d05e5d21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb453c9c8959d4f2dcb6b263c7adda57d05e5d21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/702edf390ceddc7ece586e6d57030cb54f531996", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/702edf390ceddc7ece586e6d57030cb54f531996", "html_url": "https://github.com/Rust-GCC/gccrs/commit/702edf390ceddc7ece586e6d57030cb54f531996", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/702edf390ceddc7ece586e6d57030cb54f531996/comments", "author": null, "committer": null, "parents": [{"sha": "53c5b5d77ff445b5a98cf6bc2dcfb6fdd8ca478f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53c5b5d77ff445b5a98cf6bc2dcfb6fdd8ca478f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53c5b5d77ff445b5a98cf6bc2dcfb6fdd8ca478f"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "1754c116dd3ff77ad440476ef0f5fd51585f4170", "filename": "gcc/intl/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/702edf390ceddc7ece586e6d57030cb54f531996/gcc%2Fintl%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/702edf390ceddc7ece586e6d57030cb54f531996/gcc%2Fintl%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintl%2FChangeLog?ref=702edf390ceddc7ece586e6d57030cb54f531996", "patch": "@@ -1,3 +1,7 @@\n+2000-09-05  John David Anglin <dave@hiauly1.hia.nrc.ca>\n+\n+\t* gettext.h (nls_uint32): Choose via INT_MAX instead of UINT_MAX.\n+\n 2000-08-02  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* dcgettext.c (find_msg): Initialize act before loop."}, {"sha": "7daee9417ec319812168ebbad70a4135d93ce800", "filename": "gcc/intl/gettext.h", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/702edf390ceddc7ece586e6d57030cb54f531996/gcc%2Fintl%2Fgettext.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/702edf390ceddc7ece586e6d57030cb54f531996/gcc%2Fintl%2Fgettext.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintl%2Fgettext.h?ref=702edf390ceddc7ece586e6d57030cb54f531996", "patch": "@@ -39,30 +39,27 @@\n    alternative approach is to use autoconf's AC_CHECK_SIZEOF macro, but\n    doing that would require that the configure script compile and *run*\n    the resulting executable.  Locally running cross-compiled executables\n-   is usually not possible.  */\n+   is usually not possible.  We use the maximum values for signed int's\n+   for the test to avoid using `U' suffixes.  */\n \n-#if __STDC__\n-# define UINT_MAX_32_BITS 4294967295U\n-#else\n-# define UINT_MAX_32_BITS 0xFFFFFFFF\n-#endif\n+#define INT_MAX_32_BITS 2147483647\n \n-/* If UINT_MAX isn't defined, assume it's a 32-bit type.\n+/* If INT_MAX isn't defined, assume it's a 32-bit type.\n    This should be valid for all systems GNU cares about because\n    that doesn't include 16-bit systems, and only modern systems\n    (that certainly have <limits.h>) have 64+-bit integral types.  */\n \n-#ifndef UINT_MAX\n-# define UINT_MAX UINT_MAX_32_BITS\n+#ifndef INT_MAX\n+# define INT_MAX INT_MAX_32_BITS\n #endif\n \n-#if UINT_MAX == UINT_MAX_32_BITS\n+#if INT_MAX == INT_MAX_32_BITS\n typedef unsigned nls_uint32;\n #else\n-# if USHRT_MAX == UINT_MAX_32_BITS\n+# if SHRT_MAX == INT_MAX_32_BITS\n typedef unsigned short nls_uint32;\n # else\n-#  if ULONG_MAX == UINT_MAX_32_BITS\n+#  if LONG_MAX == INT_MAX_32_BITS\n typedef unsigned long nls_uint32;\n #  else\n   /* The following line is intended to throw an error.  Using #error is"}]}