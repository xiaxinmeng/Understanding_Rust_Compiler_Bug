{"sha": "49d729eaee6bf42c46bbe3182b26b7f15a3909b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDlkNzI5ZWFlZTZiZjQyYzQ2YmJlMzE4MmIyNmI3ZjE1YTM5MDliNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-05-23T22:48:51Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-05-23T22:48:51Z"}, "message": "Refactor path construction from null terminated iterator ranges\n\nMove duplicated code to new _S_string_from_iter function and fix\nconstraints to accept iterators with const value type.\n\n\t* include/bits/fs_path.h (path::__is_encoded_char): Change from class\n\ttemplate to alias template.\n\t(path::__value_type_is_char): Use remove_const_t.\n\t(path:_S_string_from_iter): New helper function.\n\t(path::_S_convert(InputIter, __null_terminated))\n\t(path::_S_convert_loc(InputIter, __null_terminated, const locale&)):\n\tUse _S_string_from_iter.\n\t(path::string<_CharT, _Allocator>(const _Allocator&)): Allow sharing\n\trep for COW strings.\n\t* include/experimental/bits/fs_path.h (path::__is_encoded_char):\n\tChange from class template to alias template.\n\t(path::__value_type_is_char): Use remove_const.\n\t(path:_S_string_from_iter): New helper function.\n\t(path::_S_convert(InputIter, __null_terminated))\n\t(path::_S_convert_loc(InputIter, __null_terminated, const locale&)):\n\tUse _S_string_from_iter.\n\t* testsuite/27_io/filesystem/path/append/source.cc: Test appending\n\twide strings.\n\t* testsuite/27_io/filesystem/path/concat/strings.cc: Check for exact\n\tstring equality, not path equivalence.\n\t* testsuite/27_io/filesystem/path/construct/format.cc: Check\n\tconstruction from std::string and std::wstring and input iterators.\n\t* testsuite/27_io/filesystem/path/construct/locale.cc: Check\n\tconstruction from iterators.\n\t* testsuite/experimental/filesystem/path/concat/strings.cc: Check for\n\texact string equality, not path equivalence.\n\t* testsuite/experimental/filesystem/path/construct/locale.cc: Check\n\tconstruction from iterators.\n\nFrom-SVN: r260628", "tree": {"sha": "d08da15f28a50c0b6346de87dbfc4b14d3327da7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d08da15f28a50c0b6346de87dbfc4b14d3327da7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49d729eaee6bf42c46bbe3182b26b7f15a3909b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49d729eaee6bf42c46bbe3182b26b7f15a3909b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49d729eaee6bf42c46bbe3182b26b7f15a3909b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49d729eaee6bf42c46bbe3182b26b7f15a3909b5/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2aece9c19970ad94abeeca4f85782f50799abdfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aece9c19970ad94abeeca4f85782f50799abdfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aece9c19970ad94abeeca4f85782f50799abdfc"}], "stats": {"total": 368, "additions": 270, "deletions": 98}, "files": [{"sha": "9fa9d1f4cf5a221e2f8d4335b26f0300f92f4f22", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d729eaee6bf42c46bbe3182b26b7f15a3909b5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d729eaee6bf42c46bbe3182b26b7f15a3909b5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=49d729eaee6bf42c46bbe3182b26b7f15a3909b5", "patch": "@@ -1,5 +1,34 @@\n 2018-05-23  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/fs_path.h (path::__is_encoded_char): Change from class\n+\ttemplate to alias template.\n+\t(path::__value_type_is_char): Use remove_const_t.\n+\t(path:_S_string_from_iter): New helper function.\n+\t(path::_S_convert(InputIter, __null_terminated))\n+\t(path::_S_convert_loc(InputIter, __null_terminated, const locale&)):\n+\tUse _S_string_from_iter.\n+\t(path::string<_CharT, _Allocator>(const _Allocator&)): Allow sharing\n+\trep for COW strings.\n+\t* include/experimental/bits/fs_path.h (path::__is_encoded_char):\n+\tChange from class template to alias template.\n+\t(path::__value_type_is_char): Use remove_const.\n+\t(path:_S_string_from_iter): New helper function.\n+\t(path::_S_convert(InputIter, __null_terminated))\n+\t(path::_S_convert_loc(InputIter, __null_terminated, const locale&)):\n+\tUse _S_string_from_iter.\n+\t* testsuite/27_io/filesystem/path/append/source.cc: Test appending\n+\twide strings.\n+\t* testsuite/27_io/filesystem/path/concat/strings.cc: Check for exact\n+\tstring equality, not path equivalence.\n+\t* testsuite/27_io/filesystem/path/construct/format.cc: Check\n+\tconstruction from std::string and std::wstring and input iterators.\n+\t* testsuite/27_io/filesystem/path/construct/locale.cc: Check\n+\tconstruction from iterators.\n+\t* testsuite/experimental/filesystem/path/concat/strings.cc: Check for\n+\texact string equality, not path equivalence.\n+\t* testsuite/experimental/filesystem/path/construct/locale.cc: Check\n+\tconstruction from iterators.\n+\n \t* include/bits/fs_path.h (path::_M_type): Change default member\n \tinitializer to _Filename.\n \t(path::begin): Create past-the-end iterator for empty path."}, {"sha": "2dbde74e0d4c22448d055a40078fdbbfa0d7c853", "filename": "libstdc++-v3/include/bits/fs_path.h", "status": "modified", "additions": 30, "deletions": 33, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d729eaee6bf42c46bbe3182b26b7f15a3909b5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d729eaee6bf42c46bbe3182b26b7f15a3909b5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h?ref=49d729eaee6bf42c46bbe3182b26b7f15a3909b5", "patch": "@@ -65,8 +65,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   /// A filesystem path.\n   class path\n   {\n-    template<typename _CharT>\n-      struct __is_encoded_char : std::false_type { };\n+    template<typename _CharT, typename _Ch = remove_const_t<_CharT>>\n+      using __is_encoded_char\n+\t= __or_<is_same<_Ch, char>, is_same<_Ch, wchar_t>,\n+\t\tis_same<_Ch, char16_t>, is_same<_Ch, char32_t>>;\n \n     template<typename _Iter,\n \t     typename _Iter_traits = std::iterator_traits<_Iter>>\n@@ -144,7 +146,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t     typename _Iter = decltype(_S_range_begin(std::declval<_Tp>())),\n \t     typename _Val = typename std::iterator_traits<_Iter>::value_type>\n       using __value_type_is_char\n-\t= typename std::enable_if<std::is_same<_Val, char>::value>::type;\n+\t= std::enable_if_t<std::is_same_v<std::remove_const_t<_Val>, char>>;\n \n   public:\n #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n@@ -391,6 +393,20 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     iterator begin() const;\n     iterator end() const;\n \n+    // Create a basic_string by reading until a null character.\n+    template<typename _InputIterator,\n+\t     typename _Traits = std::iterator_traits<_InputIterator>,\n+\t     typename _CharT\n+\t       = typename std::remove_cv_t<typename _Traits::value_type>>\n+      static std::basic_string<_CharT>\n+      _S_string_from_iter(_InputIterator __source)\n+      {\n+\tstd::basic_string<_CharT> __str;\n+\tfor (_CharT __ch = *__source; __ch != _CharT(); __ch = *++__source)\n+\t  __str.push_back(__ch);\n+\treturn __str;\n+      }\n+\n   private:\n     enum class _Type : unsigned char {\n \t_Multi, _Root_name, _Root_dir, _Filename\n@@ -443,11 +459,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       static string_type\n       _S_convert(_InputIterator __src, __null_terminated)\n       {\n-\tusing _Tp = typename std::iterator_traits<_InputIterator>::value_type;\n-\tstd::basic_string<typename remove_cv<_Tp>::type> __tmp;\n-\tfor (; *__src != _Tp{}; ++__src)\n-\t  __tmp.push_back(*__src);\n-\treturn _S_convert(__tmp.c_str(), __tmp.c_str() + __tmp.size());\n+\tauto __s = _S_string_from_iter(__src);\n+\treturn _S_convert(__s.c_str(), __s.c_str() + __s.size());\n       }\n \n     static string_type\n@@ -467,10 +480,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       _S_convert_loc(_InputIterator __src, __null_terminated,\n \t\t     const std::locale& __loc)\n       {\n-\tstd::string __tmp;\n-\twhile (*__src != '\\0')\n-\t  __tmp.push_back(*__src++);\n-\treturn _S_convert_loc(__tmp.data(), __tmp.data()+__tmp.size(), __loc);\n+\tstd::string __s = _S_string_from_iter(__src);\n+\treturn _S_convert_loc(__s.data(), __s.data() + __s.size(), __loc);\n       }\n \n     template<typename _CharT, typename _Traits, typename _Allocator>\n@@ -500,25 +511,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     _Type _M_type = _Type::_Filename;\n   };\n \n-  template<>\n-    struct path::__is_encoded_char<char> : std::true_type\n-    { using value_type = char; };\n-\n-  template<>\n-    struct path::__is_encoded_char<wchar_t> : std::true_type\n-    { using value_type = wchar_t; };\n-\n-  template<>\n-    struct path::__is_encoded_char<char16_t> : std::true_type\n-    { using value_type = char16_t; };\n-\n-  template<>\n-    struct path::__is_encoded_char<char32_t> : std::true_type\n-    { using value_type = char32_t; };\n-\n-  template<typename _Tp>\n-    struct path::__is_encoded_char<const _Tp> : __is_encoded_char<_Tp> { };\n-\n   inline void swap(path& __lhs, path& __rhs) noexcept { __lhs.swap(__rhs); }\n \n   size_t hash_value(const path& __p) noexcept;\n@@ -915,11 +907,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     path::string(const _Allocator& __a) const\n     {\n       if constexpr (is_same_v<_CharT, value_type>)\n+\t{\n #if _GLIBCXX_USE_CXX11_ABI\n-\treturn { _M_pathname, __a };\n+\t  return { _M_pathname, __a };\n #else\n-\treturn { _M_pathname, string_type::size_type(0), __a };\n+\t  if constexpr (is_same_v<_Allocator, string_type::allocator_type>)\n+\t    return _M_pathname;\n+\t  else\n+\t    return { _M_pathname, string_type::size_type(0), __a };\n #endif\n+\t}\n       else\n \treturn _S_str_convert<_CharT, _Traits>(_M_pathname, __a);\n     }"}, {"sha": "3ce2cd95b733bb417e229e34cf22baf6ea4b2cc8", "filename": "libstdc++-v3/include/experimental/bits/fs_path.h", "status": "modified", "additions": 26, "deletions": 32, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d729eaee6bf42c46bbe3182b26b7f15a3909b5/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d729eaee6bf42c46bbe3182b26b7f15a3909b5/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h?ref=49d729eaee6bf42c46bbe3182b26b7f15a3909b5", "patch": "@@ -79,8 +79,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   /// A filesystem path.\n   class path\n   {\n-    template<typename _CharT>\n-      struct __is_encoded_char : std::false_type { };\n+    template<typename _CharT,\n+\t     typename _Ch = typename remove_const<_CharT>::type>\n+      using __is_encoded_char\n+\t= __or_<is_same<_Ch, char>, is_same<_Ch, wchar_t>,\n+\t\tis_same<_Ch, char16_t>, is_same<_Ch, char32_t>>;\n \n     template<typename _Iter,\n \t     typename _Iter_traits = std::iterator_traits<_Iter>>\n@@ -161,8 +164,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     template<typename _Tp,\n \t     typename _Iter = decltype(_S_range_begin(std::declval<_Tp>())),\n \t     typename _Val = typename std::iterator_traits<_Iter>::value_type>\n-      using __value_type_is_char\n-\t= typename std::enable_if<std::is_same<_Val, char>::value>::type;\n+      using __value_type_is_char = typename std::enable_if<\n+\tstd::is_same<typename std::remove_const<_Val>::type, char>::value\n+\t>::type;\n \n   public:\n #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n@@ -378,6 +382,20 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     iterator begin() const;\n     iterator end() const;\n \n+    // Create a basic_string by reading until a null character.\n+    template<typename _InputIterator,\n+\t     typename _Traits = std::iterator_traits<_InputIterator>,\n+\t     typename _CharT\n+\t       = typename std::remove_cv<typename _Traits::value_type>::type>\n+      static std::basic_string<_CharT>\n+      _S_string_from_iter(_InputIterator __source)\n+      {\n+\tstd::basic_string<_CharT> __str;\n+\tfor (_CharT __ch = *__source; __ch != _CharT(); __ch = *++__source)\n+\t  __str.push_back(__ch);\n+\treturn __str;\n+      }\n+\n   private:\n     enum class _Type : unsigned char {\n \t_Multi, _Root_name, _Root_dir, _Filename\n@@ -427,11 +445,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       static string_type\n       _S_convert(_InputIterator __src, __null_terminated)\n       {\n-\tusing _Tp = typename std::iterator_traits<_InputIterator>::value_type;\n-\tstd::basic_string<typename remove_cv<_Tp>::type> __tmp;\n-\tfor (; *__src != _Tp{}; ++__src)\n-\t  __tmp.push_back(*__src);\n-\treturn _S_convert(__tmp.c_str(), __tmp.c_str() + __tmp.size());\n+\tauto __s = _S_string_from_iter(__src);\n+\treturn _S_convert(__s.c_str(), __s.c_str() + __s.size());\n       }\n \n     static string_type\n@@ -451,10 +466,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       _S_convert_loc(_InputIterator __src, __null_terminated,\n \t\t     const std::locale& __loc)\n       {\n-\tstd::string __tmp;\n-\twhile (*__src != '\\0')\n-\t  __tmp.push_back(*__src++);\n-\treturn _S_convert_loc(__tmp.data(), __tmp.data()+__tmp.size(), __loc);\n+\tstd::string __s = _S_string_from_iter(__src);\n+\treturn _S_convert_loc(__s.data(), __s.data() + __s.size(), __loc);\n       }\n \n     bool _S_is_dir_sep(value_type __ch)\n@@ -594,25 +607,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     std::string _M_what = _M_gen_what();\n   };\n \n-  template<>\n-    struct path::__is_encoded_char<char> : std::true_type\n-    { using value_type = char; };\n-\n-  template<>\n-    struct path::__is_encoded_char<wchar_t> : std::true_type\n-    { using value_type = wchar_t; };\n-\n-  template<>\n-    struct path::__is_encoded_char<char16_t> : std::true_type\n-    { using value_type = char16_t; };\n-\n-  template<>\n-    struct path::__is_encoded_char<char32_t> : std::true_type\n-    { using value_type = char32_t; };\n-\n-  template<typename _Tp>\n-    struct path::__is_encoded_char<const _Tp> : __is_encoded_char<_Tp> { };\n-\n   struct path::_Cmpt : path\n   {\n     _Cmpt(string_type __s, _Type __t, size_t __pos)"}, {"sha": "df917c9c5e85f66cab8d25bcf27ea2a6c2fc2a82", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/append/source.cc", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d729eaee6bf42c46bbe3182b26b7f15a3909b5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fappend%2Fsource.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d729eaee6bf42c46bbe3182b26b7f15a3909b5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fappend%2Fsource.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fappend%2Fsource.cc?ref=49d729eaee6bf42c46bbe3182b26b7f15a3909b5", "patch": "@@ -36,7 +36,8 @@ using __gnu_test::compare_paths;\n // path::append(InputIterator first, InputIterator last)\n // Equivalent to: return operator/=(path(first, last));\n \n-void test(const path& p, std::string_view s)\n+template<typename Char>\n+void test(const path& p, const Char* s)\n {\n   path expected = p;\n   expected /= path(s);\n@@ -47,8 +48,8 @@ void test(const path& p, std::string_view s)\n   path func = p;\n   func.append(s);\n \n-  __gnu_test::test_container<const char, __gnu_test::input_iterator_wrapper>\n-    input_range(s.begin(), s.end());\n+  __gnu_test::test_container<const Char, __gnu_test::input_iterator_wrapper>\n+    input_range(s, s + std::char_traits<Char>::length(s));\n   path range = p;\n   range.append(input_range.begin(), input_range.end());\n \n@@ -94,7 +95,21 @@ test03()\n {\n   for (const path& p : __gnu_test::test_paths)\n     for (const path& q : __gnu_test::test_paths)\n-      test(p, q.native());\n+    {\n+      test(p, q.c_str());\n+      if constexpr (!std::is_same_v<path::value_type, char>)\n+\ttest(p, q.string().c_str());\n+    }\n+}\n+\n+void\n+test04()\n+{\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  test(  \"foo\", L\"/bar\" );\n+  test( L\"foo\",  \"/bar\" );\n+  test( L\"foo\", L\"/bar\" );\n+#endif\n }\n \n int\n@@ -103,4 +118,5 @@ main()\n   test01();\n   test02();\n   test03();\n+  test04();\n }"}, {"sha": "67637890c7f7550cb181a36835d5ca5b194f3e13", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/concat/strings.cc", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d729eaee6bf42c46bbe3182b26b7f15a3909b5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconcat%2Fstrings.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d729eaee6bf42c46bbe3182b26b7f15a3909b5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconcat%2Fstrings.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconcat%2Fstrings.cc?ref=49d729eaee6bf42c46bbe3182b26b7f15a3909b5", "patch": "@@ -23,30 +23,38 @@\n \n #include <filesystem>\n #include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n \n using std::filesystem::path;\n \n void\n test01()\n {\n   path p(\"/\");\n-  p += path::string_type(\"foo\");\n-  VERIFY( p.filename() == \"foo\" );\n+  p += \"foo\";\n+  VERIFY( p.filename().string() == \"foo\" );\n   p += \"bar\";\n-  VERIFY( p.filename() == \"foobar\" );\n+  VERIFY( p.filename().string() == \"foobar\" );\n   p += '/';\n-  VERIFY( p.parent_path() == \"/foobar\" && p.filename() == \"\" );\n+  VERIFY( p.parent_path().string() == \"/foobar\" );\n+  VERIFY( p.filename().string() == \"\" );\n #if _GLIBCXX_USE_WCHAR_T\n+  VERIFY( p.parent_path().wstring() == L\"/foobar\" );\n+  VERIFY( p.filename().wstring() == L\"\" );\n   p += L\"baz.txt\";\n #else\n   p += \"baz.txt\";\n #endif\n-  VERIFY( p.filename() == \"baz.txt\" );\n+  VERIFY( p.filename().string() == \"baz.txt\" );\n   p.concat(\"/dir/\");\n-  VERIFY( p.parent_path() == \"/foobar/baz.txt/dir\" && p.filename() == \"\" );\n-  std::string file = \"file\";\n-  p.concat(file.begin(), file.end());\n-  VERIFY( p.filename() == \"file\" );\n+  // N.B. on Windows p.parent_path() is \"/foobar\\\\baz.txt\\\\dir\"\n+  VERIFY( p.parent_path() == path(\"/foobar/baz.txt/dir\")  );\n+  VERIFY( p.filename().string() == \"\" );\n+  const char file[] = \"file\";\n+  __gnu_test::test_container<const char, __gnu_test::input_iterator_wrapper>\n+    input(file, file + 4);\n+  p.concat(input.begin(), input.end());\n+  VERIFY( p.filename().string() == file );\n }\n \n int"}, {"sha": "a793451aadac06fa68c77d7b23df636443913763", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/construct/format.cc", "status": "modified", "additions": 63, "deletions": 11, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d729eaee6bf42c46bbe3182b26b7f15a3909b5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconstruct%2Fformat.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d729eaee6bf42c46bbe3182b26b7f15a3909b5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconstruct%2Fformat.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconstruct%2Fformat.cc?ref=49d729eaee6bf42c46bbe3182b26b7f15a3909b5", "patch": "@@ -20,13 +20,16 @@\n // { dg-require-filesystem-ts \"\" }\n \n #include <filesystem>\n+#include <string.h>\n #include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n \n using std::filesystem::path;\n \n void\n test01()\n {\n+  // path(string_type&&, format)\n   auto s = [&]() -> path::string_type { return \"foo/bar\"; };\n   path p0(s());\n   path p1(s(), path::auto_format);\n@@ -40,6 +43,7 @@ test01()\n void\n test02()\n {\n+  // path(const Source&, format)\n   path::string_type s = \"foo/bar\";\n   path p0(s);\n   path p1(s, path::auto_format);\n@@ -53,7 +57,8 @@ test02()\n void\n test03()\n {\n-  const char* s = \"foo/bar\";\n+  // path(const Source&, format)\n+  std::string s = \"foo/bar\";\n   path p0(s);\n   path p1(s, path::auto_format);\n   VERIFY( p1 == p0 );\n@@ -66,19 +71,57 @@ test03()\n void\n test04()\n {\n-  const char s[] = \"foo/bar\";\n-  path p0(std::begin(s), std::end(s));\n-  path p1(std::begin(s), std::end(s), path::auto_format);\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  // path(const Source&, format)\n+  std::wstring s = L\"foo/bar\";\n+  path p0(s);\n+  path p1(s, path::auto_format);\n   VERIFY( p1 == p0 );\n-  path p2(std::begin(s), std::end(s), path::native_format);\n+  path p2(s, path::native_format);\n   VERIFY( p2 == p0 );\n-  path p3(std::begin(s), std::end(s), path::generic_format);\n+  path p3(s, path::generic_format);\n   VERIFY( p3 == p0 );\n+#endif\n }\n \n void\n test05()\n {\n+  // path(const Source&, format)\n+  const char* s = \"foo/bar\";\n+  path p0(s);\n+  path p1(s, path::auto_format);\n+  VERIFY( p1 == p0 );\n+  path p2(s, path::native_format);\n+  VERIFY( p2 == p0 );\n+  path p3(s, path::generic_format);\n+  VERIFY( p3 == p0 );\n+}\n+\n+void\n+test06()\n+{\n+  // path(InputIterator, InputIterator, format)\n+  const char s[] = \"foo/bar\";\n+  using namespace __gnu_test;\n+  const test_container<const char, input_iterator_wrapper> c(s, s + strlen(s));\n+  auto c0 = c;\n+  path p0(std::begin(c0), std::end(c0));\n+  auto c1 = c;\n+  path p1(std::begin(c1), std::end(c1), path::auto_format);\n+  VERIFY( p1 == p0 );\n+  auto c2 = c;\n+  path p2(std::begin(c2), std::end(c2), path::native_format);\n+  VERIFY( p2 == p0 );\n+  auto c3 = c;\n+  path p3(std::begin(c3), std::end(c3), path::generic_format);\n+  VERIFY( p3 == p0 );\n+}\n+\n+void\n+test07()\n+{\n+  // path(const Source&, const locale&, format)\n   const char* s = \"foo/bar\";\n   std::locale loc;\n   path p0(s, loc);\n@@ -91,16 +134,23 @@ test05()\n }\n \n void\n-test06()\n+test08()\n {\n+  // path(InputIterator, InputIterator, const locale&, format)\n   const char s[] = \"foo/bar\";\n+  using namespace __gnu_test;\n+  const test_container<const char, input_iterator_wrapper> c(s, s + strlen(s));\n   std::locale loc;\n-  path p0(std::begin(s), std::end(s), loc);\n-  path p1(std::begin(s), std::end(s), loc, path::auto_format);\n+  auto c0 = c;\n+  path p0(std::begin(c0), std::end(c0), loc);\n+  auto c1 = c;\n+  path p1(std::begin(c1), std::end(c1), loc, path::auto_format);\n   VERIFY( p1 == p0 );\n-  path p2(std::begin(s), std::end(s), loc, path::native_format);\n+  auto c2 = c;\n+  path p2(std::begin(c2), std::end(c2), loc, path::native_format);\n   VERIFY( p2 == p0 );\n-  path p3(std::begin(s), std::end(s), loc, path::generic_format);\n+  auto c3 = c;\n+  path p3(std::begin(c3), std::end(c3), loc, path::generic_format);\n   VERIFY( p3 == p0 );\n }\n \n@@ -113,4 +163,6 @@ main()\n   test04();\n   test05();\n   test06();\n+  test07();\n+  test08();\n }"}, {"sha": "c32c647e16792f212ff9250db75dab2be6b32b13", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/construct/locale.cc", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d729eaee6bf42c46bbe3182b26b7f15a3909b5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconstruct%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d729eaee6bf42c46bbe3182b26b7f15a3909b5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconstruct%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconstruct%2Flocale.cc?ref=49d729eaee6bf42c46bbe3182b26b7f15a3909b5", "patch": "@@ -23,6 +23,7 @@\n \n #include <filesystem>\n #include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n \n using std::filesystem::path;\n \n@@ -33,8 +34,41 @@ test01()\n   VERIFY( p.native() == \"/foo/bar\" );\n }\n \n+void\n+test02()\n+{\n+  using __gnu_test::test_container;\n+  using __gnu_test::input_iterator_wrapper;\n+  // Test with input iterators and const value_types\n+\n+  const std::locale loc;\n+  const std::string s = \"foo/bar/\";\n+  const path p0(s);\n+\n+  test_container<char, input_iterator_wrapper>\n+      r1((char*)s.c_str(), (char*)s.c_str() + s.size());\n+  path p1(r1.begin(), r1.end(), loc);\n+  VERIFY( p1 == p0 );\n+\n+  test_container<char, input_iterator_wrapper>\n+    r2((char*)s.c_str(), (char*)s.c_str() + s.size() + 1); // includes null-terminator\n+  path p2(r2.begin(), loc);\n+  VERIFY( p2 == p0 );\n+\n+  test_container<const char, input_iterator_wrapper>\n+    r3(s.c_str(), s.c_str() + s.size());\n+  path p3(r3.begin(), r3.end(), loc);\n+  VERIFY( p3 == p0 );\n+\n+  test_container<const char, input_iterator_wrapper>\n+    r4(s.c_str(), s.c_str() + s.size() + 1); // includes null-terminator\n+  path p4(r4.begin(), loc);\n+  VERIFY( p4 == p0 );\n+}\n+\n int\n main()\n {\n   test01();\n+  test02();\n }"}, {"sha": "37ea0ebb798fb8c75a88d89f9c1c32adb6e8482c", "filename": "libstdc++-v3/testsuite/experimental/filesystem/path/concat/strings.cc", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d729eaee6bf42c46bbe3182b26b7f15a3909b5/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fconcat%2Fstrings.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d729eaee6bf42c46bbe3182b26b7f15a3909b5/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fconcat%2Fstrings.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fconcat%2Fstrings.cc?ref=49d729eaee6bf42c46bbe3182b26b7f15a3909b5", "patch": "@@ -23,30 +23,38 @@\n \n #include <experimental/filesystem>\n #include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n \n using std::experimental::filesystem::path;\n \n void\n test01()\n {\n   path p(\"/\");\n-  p += path::string_type(\"foo\");\n-  VERIFY( p.filename() == \"foo\" );\n+  p += std::string(\"foo\");\n+  VERIFY( p.filename().string() == \"foo\" );\n   p += \"bar\";\n-  VERIFY( p.filename() == \"foobar\" );\n+  VERIFY( p.filename().string() == \"foobar\" );\n   p += '/';\n-  VERIFY( p.parent_path() == \"/foobar\" && p.filename() == \".\" );\n+  VERIFY( p.parent_path().string() == \"/foobar\" );\n+  VERIFY( p.filename().string() == \".\" );\n #if _GLIBCXX_USE_WCHAR_T\n+  VERIFY( p.parent_path().wstring() == L\"/foobar\" );\n+  VERIFY( p.filename().wstring() == L\".\" );\n   p += L\"baz.txt\";\n #else\n   p += \"baz.txt\";\n #endif\n-  VERIFY( p.filename() == \"baz.txt\" );\n+  VERIFY( p.filename().string() == \"baz.txt\" );\n   p.concat(\"/dir/\");\n-  VERIFY( p.parent_path() == \"/foobar/baz.txt/dir\" && p.filename() == \".\" );\n-  std::string file = \"file\";\n-  p.concat(file.begin(), file.end());\n-  VERIFY( p.filename() == \"file\" );\n+  // N.B. on Windows p.parent_path() is \"/foobar\\\\baz.txt\\\\dir\"\n+  VERIFY( p.parent_path() == path(\"/foobar/baz.txt/dir\") );\n+  VERIFY( p.filename().string() == \".\" );\n+  const char file[] = \"file\";\n+  __gnu_test::test_container<const char, __gnu_test::input_iterator_wrapper>\n+    input(file, file + 4);\n+  p.concat(input.begin(), input.end());\n+  VERIFY( p.filename().string() == file );\n }\n \n int"}, {"sha": "3ca16edc2d7e725ba31dbdd3387fa56239afe0a7", "filename": "libstdc++-v3/testsuite/experimental/filesystem/path/construct/locale.cc", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d729eaee6bf42c46bbe3182b26b7f15a3909b5/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fconstruct%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d729eaee6bf42c46bbe3182b26b7f15a3909b5/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fconstruct%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fconstruct%2Flocale.cc?ref=49d729eaee6bf42c46bbe3182b26b7f15a3909b5", "patch": "@@ -23,6 +23,7 @@\n \n #include <experimental/filesystem>\n #include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n \n using std::experimental::filesystem::path;\n \n@@ -33,8 +34,41 @@ test01()\n   VERIFY( p.string() == \"/foo/bar\" );\n }\n \n+void\n+test02()\n+{\n+  using __gnu_test::test_container;\n+  using __gnu_test::input_iterator_wrapper;\n+  // Test with input iterators and const value_types\n+\n+  const std::locale loc;\n+  const std::string s = \"foo/bar/\";\n+  const path p0(s);\n+\n+  test_container<char, input_iterator_wrapper>\n+      r1((char*)s.c_str(), (char*)s.c_str() + s.size());\n+  path p1(r1.begin(), r1.end(), loc);\n+  VERIFY( p1 == p0 );\n+\n+  test_container<char, input_iterator_wrapper>\n+    r2((char*)s.c_str(), (char*)s.c_str() + s.size() + 1); // includes null-terminator\n+  path p2(r2.begin(), loc);\n+  VERIFY( p2 == p0 );\n+\n+  test_container<const char, input_iterator_wrapper>\n+    r3(s.c_str(), s.c_str() + s.size());\n+  path p3(r3.begin(), r3.end(), loc);\n+  VERIFY( p3 == p0 );\n+\n+  test_container<const char, input_iterator_wrapper>\n+    r4(s.c_str(), s.c_str() + s.size() + 1); // includes null-terminator\n+  path p4(r4.begin(), loc);\n+  VERIFY( p4 == p0 );\n+}\n+\n int\n main()\n {\n   test01();\n+  test02();\n }"}]}