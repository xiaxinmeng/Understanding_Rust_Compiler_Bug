{"sha": "d6f77715ea2c787e01a4cd67fc3554b043abe2b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZmNzc3MTVlYTJjNzg3ZTAxYTRjZDY3ZmMzNTU0YjA0M2FiZTJiMg==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2008-02-12T04:08:41Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2008-02-12T04:08:41Z"}, "message": "avr.h (AVR_HAVE_RAMPZ): Define.\n\n\t* config/avr/avr.h (AVR_HAVE_RAMPZ): Define.\n\t* config/avr/avr.c (expand_prologue): Save RAMPZ register.\n\t(expand_epilogue): Restore RAMPZ register.\n\t* config/avr/avr.md (RAMPZ_ADDR): New constant.\n\nFrom-SVN: r132252", "tree": {"sha": "3f10bc35bd4e46779dfc0ba2ab513f8e88fbf83e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f10bc35bd4e46779dfc0ba2ab513f8e88fbf83e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6f77715ea2c787e01a4cd67fc3554b043abe2b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6f77715ea2c787e01a4cd67fc3554b043abe2b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6f77715ea2c787e01a4cd67fc3554b043abe2b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6f77715ea2c787e01a4cd67fc3554b043abe2b2/comments", "author": null, "committer": null, "parents": [{"sha": "46abada07fd5354741fa2d12147b0ff22b858fb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46abada07fd5354741fa2d12147b0ff22b858fb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46abada07fd5354741fa2d12147b0ff22b858fb4"}], "stats": {"total": 44, "additions": 36, "deletions": 8}, "files": [{"sha": "e7eca81277ad74a8052cac5417c450606e92021e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f77715ea2c787e01a4cd67fc3554b043abe2b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f77715ea2c787e01a4cd67fc3554b043abe2b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d6f77715ea2c787e01a4cd67fc3554b043abe2b2", "patch": "@@ -1,3 +1,10 @@\n+2008-02-12  Anatoly Sokolov <aesok@post.ru>\n+\n+\t* config/avr/avr.h (AVR_HAVE_RAMPZ): Define.\n+\t* config/avr/avr.c (expand_prologue): Save RAMPZ register.\n+\t(expand_epilogue): Restore RAMPZ register.\n+\t* config/avr/avr.md (RAMPZ_ADDR): New constant.\n+\n 2008-02-11  Kai Tietz  <kai.tietz@onevision.com>\n \n \t* config/i386/cygwin.asm: (__alloca): Correct calling"}, {"sha": "68c0f18130a0c82e48c174ef8b82c3b31c8c0b5e", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f77715ea2c787e01a4cd67fc3554b043abe2b2/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f77715ea2c787e01a4cd67fc3554b043abe2b2/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=d6f77715ea2c787e01a4cd67fc3554b043abe2b2", "patch": "@@ -586,6 +586,7 @@ void\n expand_prologue (void)\n {\n   int live_seq;\n+  HARD_REG_SET set;\n   int minimize;\n   HOST_WIDE_INT size = get_frame_size();\n   /* Define templates for push instructions.  */\n@@ -609,6 +610,7 @@ expand_prologue (void)\n       return;\n     }\n \n+  avr_regs_to_save (&set);\n   live_seq = sequent_regs_live ();\n   minimize = (TARGET_CALL_PROLOGUES\n \t      && !cfun->machine->is_interrupt\n@@ -639,7 +641,18 @@ expand_prologue (void)\n       RTX_FRAME_RELATED_P (insn) = 1;\n       insn = emit_move_insn (pushbyte, tmp_reg_rtx);\n       RTX_FRAME_RELATED_P (insn) = 1;\n-      \n+\n+      /* Push RAMPZ.  */\n+      if(AVR_HAVE_RAMPZ \n+         && (TEST_HARD_REG_BIT (set, REG_Z) && TEST_HARD_REG_BIT (set, REG_Z + 1)))\n+        {\n+          insn = emit_move_insn (tmp_reg_rtx, \n+                                 gen_rtx_MEM (QImode, GEN_INT (RAMPZ_ADDR)));\n+          RTX_FRAME_RELATED_P (insn) = 1;\n+          insn = emit_move_insn (pushbyte, tmp_reg_rtx);\n+          RTX_FRAME_RELATED_P (insn) = 1;\n+        }\n+\t\n       /* Clear zero reg.  */\n       insn = emit_move_insn (zero_reg_rtx, const0_rtx);\n       RTX_FRAME_RELATED_P (insn) = 1;\n@@ -660,8 +673,6 @@ expand_prologue (void)\n     }\n   else\n     {\n-      HARD_REG_SET set;\n-      avr_regs_to_save (&set);\n       int reg;\n       for (reg = 0; reg < 32; ++reg)\n         {\n@@ -811,6 +822,7 @@ expand_epilogue (void)\n {\n   int reg;\n   int live_seq;\n+  HARD_REG_SET set;      \n   int minimize;\n   HOST_WIDE_INT size = get_frame_size();\n   \n@@ -821,6 +833,7 @@ expand_epilogue (void)\n       return;\n     }\n \n+  avr_regs_to_save (&set);\n   live_seq = sequent_regs_live ();\n   minimize = (TARGET_CALL_PROLOGUES\n \t      && !cfun->machine->is_interrupt\n@@ -895,15 +908,21 @@ expand_epilogue (void)\n \t    }\n \t}\n       /* Restore used registers.  */\n-      HARD_REG_SET set;      \n-      avr_regs_to_save (&set);\n       for (reg = 31; reg >= 0; --reg)\n         {\n           if (TEST_HARD_REG_BIT (set, reg))\n               emit_insn (gen_popqi (gen_rtx_REG (QImode, reg)));\n         }\n       if (cfun->machine->is_interrupt || cfun->machine->is_signal)\n         {\n+          /* Restore RAMPZ using tmp reg as scratch.  */\n+\t  if(AVR_HAVE_RAMPZ \n+             && (TEST_HARD_REG_BIT (set, REG_Z) && TEST_HARD_REG_BIT (set, REG_Z + 1)))\n+            {\n+\t      emit_insn (gen_popqi (tmp_reg_rtx));\n+\t      emit_move_insn (gen_rtx_MEM(QImode, GEN_INT(RAMPZ_ADDR)), \n+\t\t\t      tmp_reg_rtx);\n+\t    }\n \n           /* Restore SREG using tmp reg as scratch.  */\n           emit_insn (gen_popqi (tmp_reg_rtx));"}, {"sha": "d28cc1f479b71887ccdf2cbd27fc2340af8b43f0", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f77715ea2c787e01a4cd67fc3554b043abe2b2/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f77715ea2c787e01a4cd67fc3554b043abe2b2/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=d6f77715ea2c787e01a4cd67fc3554b043abe2b2", "patch": "@@ -1,7 +1,7 @@\n /* Definitions of target machine for GNU compiler,\n    for ATMEL AVR at90s8515, ATmega103/103L, ATmega603/603L microcontrollers.\n-   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, \n+   2008 Free Software Foundation, Inc.\n    Contributed by Denis Chertykov (denisc@overta.ru)\n \n This file is part of GCC.\n@@ -99,6 +99,7 @@ extern GTY(()) section *progmem_section;\n #define AVR_HAVE_MUL (avr_have_mul_p)\n #define AVR_HAVE_MOVW (avr_have_movw_lpmx_p)\n #define AVR_HAVE_LPMX (avr_have_movw_lpmx_p)\n+#define AVR_HAVE_RAMPZ (avr_current_arch->have_elpm)\n \n #define AVR_2_BYTE_PC 1\n #define AVR_3_BYTE_PC 0"}, {"sha": "68a6aa152e8da4a2e178d49b3218edbd32ff3e13", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f77715ea2c787e01a4cd67fc3554b043abe2b2/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f77715ea2c787e01a4cd67fc3554b043abe2b2/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=d6f77715ea2c787e01a4cd67fc3554b043abe2b2", "patch": "@@ -1,7 +1,7 @@\n ;; -*- Mode: Scheme -*-\n ;;   Machine description for GNU compiler,\n ;;   for ATMEL AVR micro controllers.\n-;;   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2006, 2007\n+;;   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2006, 2007, 2008\n ;;   Free Software Foundation, Inc.\n ;;   Contributed by Denis Chertykov (denisc@overta.ru)\n \n@@ -47,6 +47,7 @@\n    (ZERO_REGNO\t1)\t; zero register r1\n    \n    (SREG_ADDR   0x5F)\n+   (RAMPZ_ADDR  0x5B)\n    \n    (UNSPEC_STRLEN\t0)\n    (UNSPEC_INDEX_JMP\t1)"}]}