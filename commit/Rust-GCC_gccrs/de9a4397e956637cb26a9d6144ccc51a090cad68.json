{"sha": "de9a4397e956637cb26a9d6144ccc51a090cad68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU5YTQzOTdlOTU2NjM3Y2IyNmE5ZDYxNDRjY2M1MWEwOTBjYWQ2OA==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-08-10T18:46:10Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-08-10T18:46:10Z"}, "message": "re PR middle-end/20644 (bogus uninitialized warning on unused variable)\n\n2008-08-10  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\tPR middle-end/20644\n\t* tree-ssa.c (struct walk_data): Add new flag\n\twarn_possibly_uninitialized.\n\t(warn_uninitialized_var): Use it.\n\t(warn_uninitialized_vars): New.\n\t(execute_early_warn_uninitialized): Call it.\n\t(execute_late_warn_uninitialized): Likewise.\ntestsuite/\n\t* gcc.dg/uninit-pr20644-O0.c: New.\n\t* gcc.dg/uninit-pr20644.c: New.\n\nFrom-SVN: r138933", "tree": {"sha": "2e853c76bf4b389350eb7d5baab1a61affb8af4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e853c76bf4b389350eb7d5baab1a61affb8af4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de9a4397e956637cb26a9d6144ccc51a090cad68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de9a4397e956637cb26a9d6144ccc51a090cad68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de9a4397e956637cb26a9d6144ccc51a090cad68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de9a4397e956637cb26a9d6144ccc51a090cad68/comments", "author": null, "committer": null, "parents": [{"sha": "21c9aaf983c7c43e78893a24be40634adc443614", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21c9aaf983c7c43e78893a24be40634adc443614", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21c9aaf983c7c43e78893a24be40634adc443614"}], "stats": {"total": 86, "additions": 83, "deletions": 3}, "files": [{"sha": "bda376e0302d0cddf6c54936e5235e5951e44869", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9a4397e956637cb26a9d6144ccc51a090cad68/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9a4397e956637cb26a9d6144ccc51a090cad68/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=de9a4397e956637cb26a9d6144ccc51a090cad68", "patch": "@@ -1,3 +1,13 @@\n+2008-08-10  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR middle-end/20644\n+\t* tree-ssa.c (struct walk_data): Add new flag\n+\twarn_possibly_uninitialized.\n+\t(warn_uninitialized_var): Use it.\n+\t(warn_uninitialized_vars): New.\n+\t(execute_early_warn_uninitialized): Call it.\n+\t(execute_late_warn_uninitialized): Likewise.\n+\n 2008-08-09  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR middle-end/36238"}, {"sha": "2ebd473c2228d39890a1475774a08267f22ce42b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9a4397e956637cb26a9d6144ccc51a090cad68/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9a4397e956637cb26a9d6144ccc51a090cad68/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=de9a4397e956637cb26a9d6144ccc51a090cad68", "patch": "@@ -1,3 +1,9 @@\n+2008-08-10  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR middle-end/20644\n+\t* gcc.dg/uninit-pr20644-O0.c: New.\n+\t* gcc.dg/uninit-pr20644.c: New.\n+\n 2008-08-10  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR 36901"}, {"sha": "092d41164953067651a0bb7ceff3c65c9bbf189d", "filename": "gcc/testsuite/gcc.dg/uninit-pr20644-O0.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9a4397e956637cb26a9d6144ccc51a090cad68/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr20644-O0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9a4397e956637cb26a9d6144ccc51a090cad68/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr20644-O0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr20644-O0.c?ref=de9a4397e956637cb26a9d6144ccc51a090cad68", "patch": "@@ -0,0 +1,24 @@\n+/* PR 20644 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -Wuninitialized\" } */\n+int foo ()\n+{\n+  int i = 0;\n+  int j;\n+\n+  if (1 == i)\n+    return j; /* { dg-bogus \"uninitialized\" \"uninitialized\" { xfail *-*-* } 10 } */\n+\n+  return 0;\n+}\n+\n+int bar ()\n+{\n+  int i = 1;\n+  int j; \n+\n+  if (1 == i)\n+    return j; /* { dg-warning \"uninitialized\" \"uninitialized\" { target *-*-* } 21 } */\n+\n+  return 0;\n+}"}, {"sha": "e13910becd12cb45808fdb9610b9de95761a9dd7", "filename": "gcc/testsuite/gcc.dg/uninit-pr20644.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9a4397e956637cb26a9d6144ccc51a090cad68/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr20644.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9a4397e956637cb26a9d6144ccc51a090cad68/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr20644.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr20644.c?ref=de9a4397e956637cb26a9d6144ccc51a090cad68", "patch": "@@ -0,0 +1,24 @@\n+/* PR 20644 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wuninitialized\" } */\n+int foo ()\n+{\n+  int i = 0;\n+  int j;\n+\n+  if (1 == i)\n+    return j;\n+\n+  return 0;\n+}\n+\n+int bar ()\n+{\n+  int i = 1;\n+  int j;\n+\n+  if (1 == i)\n+    return j; /* { dg-warning \"uninitialized\" \"uninitialized\" { target *-*-* } 18 } */\n+\n+  return 0;\n+}"}, {"sha": "74968bf5539290def53b162b636f914f68f340bc", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9a4397e956637cb26a9d6144ccc51a090cad68/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9a4397e956637cb26a9d6144ccc51a090cad68/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=de9a4397e956637cb26a9d6144ccc51a090cad68", "patch": "@@ -1430,6 +1430,7 @@ warn_uninit (tree t, const char *gmsgid, void *data)\n struct walk_data {\n   gimple stmt;\n   bool always_executed;\n+  bool warn_possibly_uninitialized;\n };\n \n /* Called via walk_tree, look for SSA_NAMEs that have empty definitions\n@@ -1450,7 +1451,7 @@ warn_uninitialized_var (tree *tp, int *walk_subtrees, void *data_)\n       if (data->always_executed)\n         warn_uninit (t, \"%qD is used uninitialized in this function\",\n \t\t     data->stmt);\n-      else\n+      else if (data->warn_possibly_uninitialized)\n         warn_uninit (t, \"%qD may be used uninitialized in this function\",\n \t\t     data->stmt);\n       *walk_subtrees = 0;\n@@ -1496,12 +1497,14 @@ warn_uninitialized_phi (gimple phi)\n }\n \n static unsigned int\n-execute_early_warn_uninitialized (void)\n+warn_uninitialized_vars (bool warn_possibly_uninitialized)\n {\n   gimple_stmt_iterator gsi;\n   basic_block bb;\n   struct walk_data data;\n \n+  data.warn_possibly_uninitialized = warn_possibly_uninitialized;\n+\n   calculate_dominance_info (CDI_POST_DOMINATORS);\n \n   FOR_EACH_BB (bb)\n@@ -1520,6 +1523,19 @@ execute_early_warn_uninitialized (void)\n   return 0;\n }\n \n+static unsigned int\n+execute_early_warn_uninitialized (void)\n+{\n+  /* Currently, this pass runs always but\n+     execute_late_warn_uninitialized only runs with optimization. With\n+     optimization we want to warn about possible uninitialized as late\n+     as possible, thus don't do it here.  However, without\n+     optimization we need to warn here about \"may be uninitialized\".\n+  */\n+  warn_uninitialized_vars (/*warn_possibly_uninitialized=*/!optimize);\n+  return 0;\n+}\n+\n static unsigned int\n execute_late_warn_uninitialized (void)\n {\n@@ -1529,7 +1545,7 @@ execute_late_warn_uninitialized (void)\n   /* Re-do the plain uninitialized variable check, as optimization may have\n      straightened control flow.  Do this first so that we don't accidentally\n      get a \"may be\" warning when we'd have seen an \"is\" warning later.  */\n-  execute_early_warn_uninitialized ();\n+  warn_uninitialized_vars (/*warn_possibly_uninitialized=*/1);\n \n   FOR_EACH_BB (bb)\n     for (gsi = gsi_start_phis (bb); !gsi_end_p (gsi); gsi_next (&gsi))"}]}