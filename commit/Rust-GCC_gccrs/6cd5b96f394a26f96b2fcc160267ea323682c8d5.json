{"sha": "6cd5b96f394a26f96b2fcc160267ea323682c8d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNkNWI5NmYzOTRhMjZmOTZiMmZjYzE2MDI2N2VhMzIzNjgyYzhkNQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2007-04-23T00:39:17Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2007-04-23T00:39:17Z"}, "message": "libstdc++.exp (libstdc++_init): Use the same flags for remote host testing we use for local host testing.\n\n\t* testsuite/lib/libstdc++.exp (libstdc++_init): Use the same flags\n\tfor remote host testing we use for local host testing.  Copy all\n\ttestsuite headers to the remote host\n\t(v3_target_compile_as_c): Use remote_exec, not just exec.\n\nFrom-SVN: r124051", "tree": {"sha": "830006b15916d8099e530ecc07c4625416c8d09c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/830006b15916d8099e530ecc07c4625416c8d09c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cd5b96f394a26f96b2fcc160267ea323682c8d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cd5b96f394a26f96b2fcc160267ea323682c8d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cd5b96f394a26f96b2fcc160267ea323682c8d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cd5b96f394a26f96b2fcc160267ea323682c8d5/comments", "author": null, "committer": null, "parents": [{"sha": "69c786646da49b0446ccff38bc3db4f7fc8291d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69c786646da49b0446ccff38bc3db4f7fc8291d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69c786646da49b0446ccff38bc3db4f7fc8291d6"}], "stats": {"total": 82, "additions": 55, "deletions": 27}, "files": [{"sha": "497b9d73dfade7eba0db04df89cbe48d0f7aa371", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd5b96f394a26f96b2fcc160267ea323682c8d5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd5b96f394a26f96b2fcc160267ea323682c8d5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6cd5b96f394a26f96b2fcc160267ea323682c8d5", "patch": "@@ -1,3 +1,10 @@\n+2007-04-22  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* testsuite/lib/libstdc++.exp (libstdc++_init): Use the same flags\n+\tfor remote host testing we use for local host testing.  Copy all\n+\ttestsuite headers to the remote host\n+\t(v3_target_compile_as_c): Use remote_exec, not just exec.\n+\n 2007-04-22  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/functional: Formatting fixes."}, {"sha": "f00bb846fc92262f229420fe1a808022cbede4c2", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 48, "deletions": 27, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd5b96f394a26f96b2fcc160267ea323682c8d5/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd5b96f394a26f96b2fcc160267ea323682c8d5/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=6cd5b96f394a26f96b2fcc160267ea323682c8d5", "patch": "@@ -171,31 +171,47 @@ proc libstdc++_init { testfile } {\n \tset compiler [transform \"g++\"]\n     }\n \n-    # Do a bunch of handstands and backflips for cross compiling and\n-    # finding simulators...\n+    # Default settings.\n+    set cxx [transform \"g++\"]\n+    set cxxflags \"-g -O2 -D_GLIBCXX_ASSERT -fmessage-length=0\" \n+    set cxxldflags \"\"\n+    # Locate testsuite_hooks.h and other testsuite headers.\n+    set includes \"-I${srcdir}/util\"\n+    # Adapt the defaults for special circumstances.\n     if [is_remote host] {\n-        set header [remote_download host ${blddir}/testsuite/util/testsuite_hooks.h]\n-        if { $header == \"\" } {\n-            verbose -log \"Unable to download ${blddir}/testsuite/util/testsuite_hooks.h to host.\"\n-            return \"untested\"\n-        }\n-      set cxx [transform \"g++\"]\n-      set cxxflags \"-ggdb3\"\n-      set cxxldflags \"\"\n-      set includes \"-I./\"\n-    } else {\n+\t# A remote host does not, in general, have access to the\n+\t# $srcdir so we copy the testsuite headers into the current\n+\t# directory, and then add that to the search path.\n+\tforeach src [glob \"${srcdir}/util/*.h\" \\\n+\t\t          \"${srcdir}/util/*.cc\" \\\n+ \t\t          \"${srcdir}/util/*/*.hpp\" \\\n+\t\t          \"${srcdir}/util/*/*.cc\" \\\n+\t\t\t  \"${srcdir}/util/*/*.hpp\" \\\n+\t\t          \"${srcdir}/util/*/*/*.cc\" \\\n+\t\t\t  \"${srcdir}/util/*/*/*.hpp\" \\\n+\t\t          \"${srcdir}/util/*/*/*/*.cc\" \\\n+  \t\t\t  \"${srcdir}/util/*/*/*/*.hpp\" \\\n+\t\t          \"${srcdir}/util/*/*/*/*/*.cc\" \\\n+  \t\t\t  \"${srcdir}/util/*/*/*/*/*.hpp\" ] {\n+\t    # Remove everything up to \"util/...\"\n+\t    set dst [string range $src [string length \"${srcdir}/\"] end]\n+\t    # Create the directory containing the file.\n+\t    set dir [file dirname $dst]\n+\t    remote_exec host \"mkdir\" [list \"-p\" \"$dir\"]\n+\t    # Download teh file.\n+\t    set result [remote_download host $src $dst]\n+\t    if { $result == \"\" } {\n+\t\tverbose -log \"Unable to download ${srcdir}/${f} to host.\"\n+\t\treturn \"untested\"\n+\t    }\n+\t}\n+\tset includes \"-Iutil\"\n+    } elseif { [file exists $flags_file] } {\n         # If we find a testsuite_flags file, we're testing in the build dir.\n-        if { [file exists $flags_file] } {\n-            set cxx [exec sh $flags_file --build-cxx]\n-            set cxxflags [exec sh $flags_file --cxxflags]\n-            set cxxldflags [exec sh $flags_file --cxxldflags]\n-            set includes [exec sh $flags_file --build-includes]\n-        } else {\n-            set cxx [transform \"g++\"]\n-            set cxxldflags \"\"\n-            set cxxflags \"-g -O2 -D_GLIBCXX_ASSERT -fmessage-length=0\" \n-            set includes \"-I${srcdir}/util\"\n-        }\n+\tset cxx [exec sh $flags_file --build-cxx]\n+\tset cxxflags [exec sh $flags_file --cxxflags]\n+        set cxxldflags [exec sh $flags_file --cxxldflags]\n+\tset includes [exec sh $flags_file --build-includes]\n     }\n \n     # Always use MO files built by this test harness.\n@@ -376,11 +392,16 @@ proc v3_target_compile_as_c { source dest type options } {\n \n     # This is needed for \"C\" tests, as this type of test may need the\n     # C++ includes. And if we're not testing in the build directory,\n-    # the includes variable is not likely to include the necessary info.\n+    # the includes variable is not likely to include the necessary\n+    # info.\n     if { ![file exists $flags_file] } {\n-\tset version [exec ${cc} -dumpversion]\n-\tset machine [exec ${cc} -dumpmachine]\n-\tset comp_base_dir [file dirname [file dirname [file dirname [file dirname [file dirname [exec ${cc} --print-prog-name=cc1]]]]]]\n+\tset version [remote_exec host ${cc} -dumpversion]\n+\tset version [lindex $version 1]\n+\tset machine [remote_exec exec ${cc} -dumpmachine]\n+\tset machine [lindex $machine 1]\n+\tset comp_base_dir [remote_exec host ${cc} --print-prog-name=cc1]\n+\tset comp_base_dir [lindex $comp_base_dir 1]\n+\tset comp_base_dir [file dirname [file dirname [file dirname [file dirname [file dirname $comp_base_dir]]]]]\n \tset includesbase \"${comp_base_dir}/include/c++/${version}\"\n \tset includestarget \"${includesbase}/${machine}\"\n \tset cc_final [concat $cc_final \"-I$includesbase -I$includestarget\"]"}]}