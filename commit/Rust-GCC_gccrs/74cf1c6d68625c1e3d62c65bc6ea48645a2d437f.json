{"sha": "74cf1c6d68625c1e3d62c65bc6ea48645a2d437f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRjZjFjNmQ2ODYyNWMxZTNkNjJjNjViYzZlYTQ4NjQ1YTJkNDM3Zg==", "commit": {"author": {"name": "Robin Kirkham", "email": "rjk@mlb.dmt.csiro.au", "date": "1998-01-22T23:10:15Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-01-22T23:10:15Z"}, "message": "m68k.h (TARGET_SWITCHES): -mcpu32 now clears MASK_68881.\n\n        * m68k.h (TARGET_SWITCHES): -mcpu32 now clears MASK_68881.\n        (MACHINE_STATE_m68010_up): Replaced __mc68332__ with __mcpu32__.\n        * m68k/m68k-none.h(CPP_FPU_SPEC): Update relative to TARGET_SWITCHES.\n        (CPP_SPEC, ASM_SPEC, CC1_SPEC): Likewise.\n        (CPP_SPEC): -m68332 defines both __mc68332 and __mcpu32__.\n        * m68k/t-m68kbare (MULTILIB_OPTIONS): Add mcpu32.\n        (MULTILIB_MATCHES): -m68332 now uses mcpu32 libraries, not m68000.\n        (MULTILIB_EXCEPTIONS): Don't build 68881 libraries for m68000,\n        mcpu32 or m5200.\n        * longlong.h: Replace __mc68332__ with __mcpu32__.\n\nFrom-SVN: r17450", "tree": {"sha": "9488e12c498b0a9b4a380217c910def6e0433e6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9488e12c498b0a9b4a380217c910def6e0433e6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74cf1c6d68625c1e3d62c65bc6ea48645a2d437f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74cf1c6d68625c1e3d62c65bc6ea48645a2d437f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74cf1c6d68625c1e3d62c65bc6ea48645a2d437f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74cf1c6d68625c1e3d62c65bc6ea48645a2d437f/comments", "author": null, "committer": null, "parents": [{"sha": "77474480a46b6d1ceface7404f67cf2a3ac44c7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77474480a46b6d1ceface7404f67cf2a3ac44c7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77474480a46b6d1ceface7404f67cf2a3ac44c7a"}], "stats": {"total": 107, "additions": 67, "deletions": 40}, "files": [{"sha": "4731b18c9c3874462db42f099a67a7c45fe2d6ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74cf1c6d68625c1e3d62c65bc6ea48645a2d437f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74cf1c6d68625c1e3d62c65bc6ea48645a2d437f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74cf1c6d68625c1e3d62c65bc6ea48645a2d437f", "patch": "@@ -1,3 +1,16 @@\n+Fri Jan 23 00:08:55 1998  Robin Kirkham\t<rjk@mlb.dmt.csiro.au>\n+\n+\t* m68k.h (TARGET_SWITCHES): -mcpu32 now clears MASK_68881.\n+\t(MACHINE_STATE_m68010_up): Replaced __mc68332__ with __mcpu32__.\n+\t* m68k/m68k-none.h(CPP_FPU_SPEC): Update relative to TARGET_SWITCHES.\n+\t(CPP_SPEC, ASM_SPEC, CC1_SPEC): Likewise.\n+\t(CPP_SPEC): -m68332 defines both __mc68332 and __mcpu32__.\n+\t* m68k/t-m68kbare (MULTILIB_OPTIONS): Add mcpu32.\n+\t(MULTILIB_MATCHES): -m68332 now uses mcpu32 libraries, not m68000.\n+\t(MULTILIB_EXCEPTIONS): Don't build 68881 libraries for m68000,\n+\tmcpu32 or m5200.\n+\t* longlong.h: Replace __mc68332__ with __mcpu32__.\n+\n Thu Jan 22 19:55:40 PST 1998 Jeff Law  (law@cygnus.com)\n \n \t* version.c: Bump for snapshot."}, {"sha": "c48ac3dfacc98ac7a4c3ac1181153b196dfaf93b", "filename": "gcc/config/m68k/m68k-none.h", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74cf1c6d68625c1e3d62c65bc6ea48645a2d437f/gcc%2Fconfig%2Fm68k%2Fm68k-none.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74cf1c6d68625c1e3d62c65bc6ea48645a2d437f/gcc%2Fconfig%2Fm68k%2Fm68k-none.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-none.h?ref=74cf1c6d68625c1e3d62c65bc6ea48645a2d437f", "patch": "@@ -72,12 +72,12 @@ Boston, MA 02111-1307, USA.  */\n #if TARGET_CPU_DEFAULT == M68K_CPU_m68302\n #define CPP_CPU_DEFAULT_SPEC \"%{!ansi:-Dmc68302 } -D__mc68302 -D__mc68302__\"\n #define ASM_CPU_DEFAULT_SPEC \"-mc68302\"\n-#define CC1_CPU_DEFAULT_SPEC \"-m68000\"\n+#define CC1_CPU_DEFAULT_SPEC \"-m68302\"\n #else\n #if TARGET_CPU_DEFAULT == M68K_CPU_m68332\n-#define CPP_CPU_DEFAULT_SPEC \"%{!ansi:-Dmc68332 } -D__mc68332 -D__mc68332__\"\n+#define CPP_CPU_DEFAULT_SPEC \"%{!ansi:-Dmc68332 -Dmcpu32 } -D__mc68332 -D__mc68332__ -D__mcpu32 -D__mcpu32__\"\n #define ASM_CPU_DEFAULT_SPEC \"-mc68332\"\n-#define CC1_CPU_DEFAULT_SPEC \"-m68020 -mnobitfield %{!m68881:-msoft-float}\"\n+#define CC1_CPU_DEFAULT_SPEC \"-m68332\"\n #else\n Unrecognized value in TARGET_CPU_DEFAULT.\n #endif\n@@ -92,20 +92,21 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n #undef CPP_PREDEFINES\n #define CPP_PREDEFINES \"-Dmc68000\"\n \n-/* Define one of __HAVE_68881__, __HAVE_FPA__, or nothing (soft float), appropriately.  */\n+/* Define one of __HAVE_68881__, __HAVE_FPA__, __HAVE_SKY__, or nothing \n+   (soft float), appropriately.  */\n #undef CPP_FPU_SPEC\n #if TARGET_DEFAULT & MASK_68881\n-/* ??? Why isn't m68302 treated like m68000 here?  */\n-#define CPP_FPU_SPEC \\\n-\"%{!mc68000:%{!m68000:%{!m68332:%{!m5200:%{!msoft-float:%{mfpa:-D__HAVE_FPA__ }%{!mfpa:-D__HAVE_68881__ }}}}}}\"\n+#define CPP_FPU_SPEC \"\\\n+%{!mc68000:%{!m68000:%{!m68302:%{!mcpu32:%{!m68332:%{!m5200:%{!msoft-float:%{!mno-68881:%{!mfpa:%{!msky:-D__HAVE_68881__ }}}}}}}}}} \\\n+%{m68881:-D__HAVE_68881__ }%{mfpa:-D__HAVE_FPA__ }%{msky:-D__HAVE_SKY__ }\"\n #else\n /* This can't currently happen, but we code it anyway to show how it's done.  */\n #if TARGET_DEFAULT & MASK_FPA\n #define CPP_FPU_SPEC \\\n \"%{!msoft-float:%{m68881:-D__HAVE_68881__ }%{!m68881:-D__HAVE_FPA__ }}\"\n #else\n-#define CPP_FPU_SPEC \\\n-\"%{m68881:-D__HAVE_68881__ }%{mfpa:-D__HAVE_FPA__ }\"\n+#define CPP_FPU_SPEC \"\\\n+%{m68881:-D__HAVE_68881__ }%{mfpa:-D__HAVE_FPA__ }%{msky:-D__HAVE_SKY__ }\"\n #endif\n #endif\n \n@@ -120,8 +121,10 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n    -m68040: define mc68040\n    -m68060: define mc68060\n    -m68020-40: define mc68020 mc68030 mc68040\n-   -m68302: define mc68302\n-   -m68332: define mc68332\n+   -m68020-60: define mc68020 mc68030 mc68040 mc68060\n+   -m68302: define mc68302 \n+   -m68332: define mc68332 mcpu32\n+   -mcpu32: define mcpu32\n    -m5200: define mcf5200\n    default: define as above appropriately\n \n@@ -130,29 +133,25 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n \n #undef CPP_SPEC\n #define CPP_SPEC \"\\\n-%(cpp_fpu) \\\n-%{!ansi:%{m68010:-Dmc68010 }%{m68020:-Dmc68020 }%{mc68020:-Dmc68020 }%{m68030:-Dmc68030 }%{m68040:-Dmc68040 }%{m68020-40:-Dmc68020 -Dmc68030 -Dmc68040 }%{m68060:-Dmc68060 }%{m68302:-Dmc68302 }%{m68332:-Dmc68332 }%{m5200:-Dmcf5200 }} \\\n-%{m68010:-D__mc68010__ -D__mc68010 }%{m68020:-D__mc68020__ -D__mc68020 }%{mc68020:-D__mc68020__ -D__mc68020 }%{m68030:-D__mc68030__ -D__mc68030 }%{m68040:-D__mc68040__ -D__mc68040 }%{m68020-40:-D__mc68020__ -D__mc68030__ -D__mc68040__ -D__mc68020 -D__mc68030 -D__mc68040 }%{mc68060:-D__mc68060__ -D__mc68060 }%{m68302:-D__mc68302__ -D__mc68302 }%{m68332:-D__mc68332__ -D__mc68332 }%{m5200:-D__mcf5200__ -D__mcf5200 } \\\n-%{!mc68000:%{!m68000:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68060:%{!m68302:%{!m68332:%{!m5200:%(cpp_cpu_default)}}}}}}}}}}}} \\\n+%(cpp_fpu)%{!ansi:%{m68302:-Dmc68302 }%{m68010:-Dmc68010 }%{m68020:-Dmc68020 }%{mc68020:-Dmc68020 }%{m68030:-Dmc68030 }%{m68040:-Dmc68040 }%{m68020-40:-Dmc68020 -Dmc68030 -Dmc68040 }%{m68020-60:-Dmc68020 -Dmc68030 -Dmc68040 -Dmc68060 }%{m68060:-Dmc68060 }%{mcpu32:-Dmcpu32 } %{m68332:-Dmc68332 -Dmcpu32 }%{m5200:-Dmcf5200 }} \\\n+%{m68302:-D__mc68302__ -D__mc68302 }%{m68010:-D__mc68010__ -D__mc68010 }%{m68020:-D__mc68020__ -D__mc68020 }%{mc68020:-D__mc68020__ -D__mc68020 }%{m68030:-D__mc68030__ -D__mc68030 }%{m68040:-D__mc68040__ -D__mc68040 }%{m68020-40:-D__mc68020__ -D__mc68030__ -D__mc68040__ -D__mc68020 -D__mc68030 -D__mc68040 }%{m68020-60:-D__mc68020__ -D__mc68030__ -D__mc68040__ -D__mc68020 -D__mc68030 -D__mc68040 -D__mc68060__ -D__mc68060 }%{m68060:-D__mc68060__ -D__mc68060 }%{mcpu32:-D__mcpu32__ -D__mcpu32 }%{m68332:-D__mc68332__ -D__mc68332 -D__mcpu32__ -D__mcpu32 }%{m5200:-D__mcf5200__ -D__mcf5200 } \\\n+%{!mc68000:%{!m68000:%{!m68302:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68020-60:%{!m68060:%{!mcpu32: %{!m68332:%{!m5200:%(cpp_cpu_default)}}}}}}}}}}}}}} \\\n %(cpp_subtarget) \\\n \"\n \n /* Pass flags to gas indicating which type of processor we have.  */\n \n #undef ASM_SPEC\n #define ASM_SPEC \"\\\n-%{m68851}%{mno-68851}%{m68881}%{mno-68881}%{msoft-float:-mno-68881 } \\\n-%{m68000}%{mc68000}%{m68010}%{m68020}%{mc68020}%{m68030}%{m68040}%{m68020-40:-mc68040}%{m68060}%{m68302}%{m68332}%{m5200} \\\n-%{!mc68000:%{!m68000:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68060:%{!m68302:%{!m68332:%{!m5200:%(asm_cpu_default)}}}}}}}}}}}} \\\n+%{m68851}%{mno-68851}%{m68881}%{mno-68881}%{msoft-float:-mno-68881 }%{m68000}%{m68302}%{mc68000}%{m68010}%{m68020}%{mc68020}%{m68030}%{m68040}%{m68020-40:-mc68040 }%{m68020-60:-mc68040 }%{m68060}%{mcpu32}%{m68332}%{m5200}%{!mc68000:%{!m68000:%{!m68302:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68020-60:%{!m68060:%{!mcpu32:%{!m68332:%{!m5200:%(asm_cpu_default) }}}}}}}}}}}}}} \\\n \"\n \n+/* cc1/cc1plus always receives all the -m flags. If the specs strings above \n+   are consistent with the TARGET_OPTIONS flags in m68k.h, there should be no\n+   need for any further cc1/cc1plus specs.  */\n+\n #undef CC1_SPEC\n-#define CC1_SPEC \"\\\n-%{m68000:%{!m68881:-msoft-float }}%{m68302:-m68000 }%{m68332:-m68020 -mnobitfield %{!m68881:-msoft-float }} \\\n-\"\n-/* ??? Is this needed?\n-%{!m68000:%{!mc68000:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68302:%{!m68332:%(cc1_cpu_default)}}}}}}}}}}\n-*/\n+#define CC1_SPEC \"\"\n \n /* This macro defines names of additional specifications to put in the specs\n    that can be used in various specifications like CC1_SPEC.  Its definition"}, {"sha": "b3fb611a13899faf733e58fa95a0b6e50eb57545", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74cf1c6d68625c1e3d62c65bc6ea48645a2d437f/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74cf1c6d68625c1e3d62c65bc6ea48645a2d437f/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=74cf1c6d68625c1e3d62c65bc6ea48645a2d437f", "patch": "@@ -165,17 +165,18 @@ extern int target_flags;\n     { \"68060\", - (MASK_5200|MASK_68040)},\t\t\t\t\\\n     { \"68060\", (MASK_68020|MASK_68881|MASK_BITFIELD\t\t\t\\\n \t\t|MASK_68040_ONLY|MASK_68060)},\t\t\t\t\\\n-    { \"5200\", - (MASK_68060|MASK_68040|MASK_68020|MASK_BITFIELD|MASK_68881)}, \\\n+    { \"5200\", - (MASK_68060|MASK_68040|MASK_68020|MASK_BITFIELD\t\t\\\n+\t\t|MASK_68881)},\t\t\t\t\t\t\\\n     { \"5200\", (MASK_5200)},\t\t\t\t\t\t\\\n     { \"68851\", 0},\t\t\t\t\t\t\t\\\n     { \"no-68851\", 0},\t\t\t\t\t\t\t\\\n     { \"68302\", - (MASK_5200|MASK_68060|MASK_68040|MASK_68040_ONLY\t\\\n \t\t  |MASK_68020|MASK_BITFIELD|MASK_68881)},\t\t\\\n     { \"68332\", - (MASK_5200|MASK_68060|MASK_68040|MASK_68040_ONLY\t\\\n-\t\t  |MASK_BITFIELD)},\t\t\t\t\t\\\n+\t\t  |MASK_BITFIELD|MASK_68881)},\t\t\t\t\\\n     { \"68332\", MASK_68020},\t\t\t\t\t\t\\\n     { \"cpu32\", - (MASK_5200|MASK_68060|MASK_68040|MASK_68040_ONLY\t\\\n-\t\t  |MASK_BITFIELD)},\t\t\t\t\t\\\n+\t\t  |MASK_BITFIELD|MASK_68881)},\t\t\t\t\\\n     { \"cpu32\", MASK_68020},\t\t\t\t\t\t\\\n     { \"align-int\", MASK_ALIGN_INT },\t\t\t\t\t\\\n     { \"no-align-int\", -MASK_ALIGN_INT },\t\t\t\t\\\n@@ -1040,7 +1041,7 @@ while(0)\n \t|| defined(__mc68020__) || defined(mc68020) \\\n \t|| defined(__mc68030__) || defined(mc68030) \\\n \t|| defined(__mc68040__) || defined(mc68040) \\\n-\t|| defined(__mc68332__) || defined(mc68332)\n+\t|| defined(__mcpu32__) || defined(mcpu32)\n #define MACHINE_STATE_m68010_up\n #endif\n "}, {"sha": "d334eabfc1e5a7c3e260e5ad28056823f430fdd0", "filename": "gcc/config/m68k/t-m68kbare", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74cf1c6d68625c1e3d62c65bc6ea48645a2d437f/gcc%2Fconfig%2Fm68k%2Ft-m68kbare", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74cf1c6d68625c1e3d62c65bc6ea48645a2d437f/gcc%2Fconfig%2Fm68k%2Ft-m68kbare", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ft-m68kbare?ref=74cf1c6d68625c1e3d62c65bc6ea48645a2d437f", "patch": "@@ -15,10 +15,10 @@ xfgnulib.c: $(srcdir)/config/m68k/fpgnulib.c\n \techo '#define EXTFLOAT' > xfgnulib.c\n \tcat $(srcdir)/config/m68k/fpgnulib.c >> xfgnulib.c\n \n-MULTILIB_OPTIONS = m68000/m68020/m5200 m68881/msoft-float\n+MULTILIB_OPTIONS = m68000/m68020/m5200/mcpu32 m68881/msoft-float\n MULTILIB_DIRNAMES =\n-MULTILIB_MATCHES = m68000=mc68000 m68000=m68302 m68000=m68332 m68020=mc68020 m68020=m68040\n-MULTILIB_EXCEPTIONS = *m5200/*m68881 *m5200/*msoft-float\n+MULTILIB_MATCHES = m68000=mc68000 m68000=m68302 mcpu32=m68332 m68020=mc68020 m68020=m68040 m68020=m68060\n+MULTILIB_EXCEPTIONS = m68000/msoft-float m5200/m68881 m5200/msoft-float mcpu32/m68881 mcpu32/msoft-float\n \n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib"}, {"sha": "f6beef2c5fbd67bf634cf3dbdec898ac4e8bb426", "filename": "gcc/invoke.texi", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74cf1c6d68625c1e3d62c65bc6ea48645a2d437f/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74cf1c6d68625c1e3d62c65bc6ea48645a2d437f/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=74cf1c6d68625c1e3d62c65bc6ea48645a2d437f", "patch": "@@ -205,7 +205,7 @@ in the following sections.\n @smallexample\n @emph{M680x0 Options}\n -m68000  -m68020  -m68020-40  -m68020-60  -m68030  -m68040\n--m68060  -m5200  -m68881  -mbitfield  -mc68000  -mc68020  -mfpa\n+-m68060  -mcpu32 -m5200  -m68881  -mbitfield  -mc68000  -mc68020  -mfpa\n -mnobitfield  -mrtd  -mshort  -msoft-float  -malign-int\n \n @emph{VAX Options}\n@@ -2917,6 +2917,9 @@ given below.\n Generate output for a 68000.  This is the default\n when the compiler is configured for 68000-based systems.\n \n+Use this option for microcontrollers with a 68000 or EC000 core,\n+including the 68008, 68302, 68306, 68307, 68322, 68328 and 68356.\n+\n @item -m68020\n @itemx -mc68020\n Generate output for a 68020.  This is the default\n@@ -2936,21 +2939,32 @@ Generate output for a 68040.  This is the default when the compiler is\n configured for 68040-based systems.\n \n This option inhibits the use of 68881/68882 instructions that have to be\n-emulated by software on the 68040.  If your 68040 does not have code to\n-emulate those instructions, use @samp{-m68040}.\n+emulated by software on the 68040.  Use this option if your 68040 does not\n+have code to emulate those instructions.\n \n @item -m68060\n Generate output for a 68060.  This is the default when the compiler is\n configured for 68060-based systems.\n \n This option inhibits the use of 68020 and 68881/68882 instructions that\n-have to be emulated by software on the 68060.  If your 68060 does not\n-have code to emulate those instructions, use @samp{-m68060}.\n+have to be emulated by software on the 68060.  Use this option if your 68060\n+does not have code to emulate those instructions.\n+\n+@item -mcpu32\n+Generate output for a CPU32. This is the default\n+when the compiler is configured for CPU32-based systems.\n+\n+Use this option for microcontrollers with a\n+CPU32 or CPU32+ core, including the 68330, 68331, 68332, 68333, 68334,\n+68336, 68340, 68341, 68349 and 68360.\n \n @item -m5200\n Generate output for a 520X \"coldfire\" family cpu.  This is the default\n when the compiler is configured for 520X-based systems.\n \n+Use this option for microcontroller with a 5200 core, including \n+the MCF5202, MCF5203, MCF5204 and MCF5202.\n+\n \n @item -m68020-40\n Generate output for a 68040, without using any of the new instructions.\n@@ -2980,8 +2994,8 @@ cross-compilation.  The embedded targets @samp{m68k-*-aout} and\n Consider type @code{int} to be 16 bits wide, like @code{short int}.\n \n @item -mnobitfield\n-Do not use the bit-field instructions.  The @samp{-m68000} option\n-implies @w{@samp{-mnobitfield}}.\n+Do not use the bit-field instructions.  The @samp{-m68000}, @samp{-mcpu32}\n+and @samp{-m5200} options imply @w{@samp{-mnobitfield}}.\n \n @item -mbitfield\n Do use the bit-field instructions.  The @samp{-m68020} option implies\n@@ -3009,7 +3023,7 @@ function with too many arguments.  (Normally, extra arguments are\n harmlessly ignored.)\n \n The @code{rtd} instruction is supported by the 68010, 68020, 68030,\n-68040, and 68060 processors, but not by the 68000 or 5200.\n+68040, 68060 and CPU32 processors, but not by the 68000 or 5200.\n \n @item -malign-int\n @itemx -mno-align-int"}, {"sha": "f86f894714d1efe5004a8337692931654295c9e6", "filename": "gcc/longlong.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74cf1c6d68625c1e3d62c65bc6ea48645a2d437f/gcc%2Flonglong.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74cf1c6d68625c1e3d62c65bc6ea48645a2d437f/gcc%2Flonglong.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flonglong.h?ref=74cf1c6d68625c1e3d62c65bc6ea48645a2d437f", "patch": "@@ -488,7 +488,7 @@ UDItype __umulsidi3 (USItype, USItype);\n #if defined (__mc68020__) || defined(mc68020) \\\n \t|| defined(__mc68030__) || defined(mc68030) \\\n \t|| defined(__mc68040__) || defined(mc68040) \\\n-\t|| defined(__mc68332__) || defined(mc68332) \\\n+\t|| defined(__mcpu32__) || defined(mcpu32) \\\n \t|| defined(__NeXT__)\n #define umul_ppmm(w1, w0, u, v) \\\n   __asm__ (\"mulu%.l %3,%1:%0\"\t\t\t\t\t\t\\"}]}