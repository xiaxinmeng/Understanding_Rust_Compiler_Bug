{"sha": "939409afced0a24eb36b7bda1d98244f8a18e65d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM5NDA5YWZjZWQwYTI0ZWIzNmI3YmRhMWQ5ODI0NGY4YTE4ZTY1ZA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2007-02-16T03:38:22Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2007-02-16T03:38:22Z"}, "message": "re PR middle-end/30391 (ICE at -O1 with conditional expressions and GIMPLE_MODIFY_STMT)\n\n\n\tPR middle-end/30391\n\t* tree.c (expr_align): Handle MODIFY_EXPR.  GIMPLE_MODIFY_STMT\n\tshould be unreachable.\n\t(build2_stat): Allow construction of MODIFY_EXPR at any time.\n\tFor the time being redirect GIMPLE_MODIFY_STMT to the new\n\t(renamed) build_gimple_modify_stmt_stat.\n\t(build2_gimple_stat): Rename to...\n\t(build_gimple_modify_stmt_stat): Now longer take a CODE argument.\n\tAlways build a GIMPLE_MODIFY_STMT node.\n\t* tree.h (build2_gimple, build2_gimple_stat): Delete.\n\t(build_gimple_modify_stmt, build_gimple_modify_stmt_stat): New\n\tdeclarations.\n\n\t* tree-cfg.c (factor_computed_gotos, tree_merge_blocks,\n\tgimplify_val): Use build_gimple_modify_stmt instead of build2_gimple.\n\t* tree-complex.c (set_component_ssa_name, expand_complex_move,\n\texpand_complex_div_wide): Likewise.\n\t* tree-ssa-dom.c (record_equivalences_from_stmt): Likewise.\n\t* tree-ssa-loop-im.c (schedule_sm): Likewise.\n\t* tree-ssa-loop-ivopts.c (rewrite_use_nonlinear_expr): Likewise.\n\t* tree-ssa-loop-manip.c (create_iv): Likewise.\n\t* tree-ssa-phiopt.c (conditional_replacement, minmax_replacement,\n\tabs_replacement): Likewise.\n\t* tree-ssa-pre.c (create_expression_by_pieces, poolify_modify_stmt,\n\trealify_fake_stores): Likewise.\n\n\t* builtins.c (std_expand_builtin_va_start): Build a MODIFY_EXPR\n\tnode rather than a GIMPLE_MODIFY_STMT node.\n\t(std_gimpify_va_arg_expr, expand_builtin_va_copy,\n\tfold_builtin_memset, fold_builtin_memory_op, do_mpfr_sincos):\n\tLikewise.\n\t(integer_valued_real_p): Handle MODIFY_EXPR, not GIMPLE_MODIFY_STMT.\n\t* expr.c (expand_expr_real_1): Handle both MODIFY_EXPR and\n\tGIMPLE_MODIFY_STMT.\n\n\t* gfortran.dg/pr30391-1.f90: New test case.\n\nFrom-SVN: r122030", "tree": {"sha": "ab46b6fc569996fc94b0894059374459f6e9ad7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab46b6fc569996fc94b0894059374459f6e9ad7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/939409afced0a24eb36b7bda1d98244f8a18e65d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/939409afced0a24eb36b7bda1d98244f8a18e65d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/939409afced0a24eb36b7bda1d98244f8a18e65d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/939409afced0a24eb36b7bda1d98244f8a18e65d/comments", "author": null, "committer": null, "parents": [{"sha": "3c32c87f609a47e126044ce2d3f29701fa2c4dcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c32c87f609a47e126044ce2d3f29701fa2c4dcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c32c87f609a47e126044ce2d3f29701fa2c4dcc"}], "stats": {"total": 216, "additions": 131, "deletions": 85}, "files": [{"sha": "d2991a04852ec6bd3462c1c6d46527241449330a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/939409afced0a24eb36b7bda1d98244f8a18e65d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/939409afced0a24eb36b7bda1d98244f8a18e65d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=939409afced0a24eb36b7bda1d98244f8a18e65d", "patch": "@@ -1,3 +1,40 @@\n+2007-02-15  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/30391\n+\t* tree.c (expr_align): Handle MODIFY_EXPR.  GIMPLE_MODIFY_STMT\n+\tshould be unreachable.\n+\t(build2_stat): Allow construction of MODIFY_EXPR at any time.\n+\tFor the time being redirect GIMPLE_MODIFY_STMT to the new\n+\t(renamed) build_gimple_modify_stmt_stat.\n+\t(build2_gimple_stat): Rename to...\n+\t(build_gimple_modify_stmt_stat): Now longer take a CODE argument.\n+\tAlways build a GIMPLE_MODIFY_STMT node.\n+\t* tree.h (build2_gimple, build2_gimple_stat): Delete.\n+\t(build_gimple_modify_stmt, build_gimple_modify_stmt_stat): New\n+\tdeclarations.\n+\n+\t* tree-cfg.c (factor_computed_gotos, tree_merge_blocks,\n+\tgimplify_val): Use build_gimple_modify_stmt instead of build2_gimple.\n+\t* tree-complex.c (set_component_ssa_name, expand_complex_move,\n+\texpand_complex_div_wide): Likewise.\n+\t* tree-ssa-dom.c (record_equivalences_from_stmt): Likewise.\n+\t* tree-ssa-loop-im.c (schedule_sm): Likewise.\n+\t* tree-ssa-loop-ivopts.c (rewrite_use_nonlinear_expr): Likewise.\n+\t* tree-ssa-loop-manip.c (create_iv): Likewise.\n+\t* tree-ssa-phiopt.c (conditional_replacement, minmax_replacement,\n+\tabs_replacement): Likewise.\n+\t* tree-ssa-pre.c (create_expression_by_pieces, poolify_modify_stmt,\n+\trealify_fake_stores): Likewise.\n+\n+\t* builtins.c (std_expand_builtin_va_start): Build a MODIFY_EXPR\n+\tnode rather than a GIMPLE_MODIFY_STMT node.\n+\t(std_gimpify_va_arg_expr, expand_builtin_va_copy,\n+\tfold_builtin_memset, fold_builtin_memory_op, do_mpfr_sincos):\n+\tLikewise.\n+\t(integer_valued_real_p): Handle MODIFY_EXPR, not GIMPLE_MODIFY_STMT.\n+\t* expr.c (expand_expr_real_1): Handle both MODIFY_EXPR and\n+\tGIMPLE_MODIFY_STMT.\n+\n 2007-02-15  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR middle-end/30433"}, {"sha": "79d62d99f44dab276da8eefb3f36fb6a68822e77", "filename": "gcc/builtins.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/939409afced0a24eb36b7bda1d98244f8a18e65d/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/939409afced0a24eb36b7bda1d98244f8a18e65d/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=939409afced0a24eb36b7bda1d98244f8a18e65d", "patch": "@@ -4544,7 +4544,7 @@ std_expand_builtin_va_start (tree valist, rtx nextarg)\n {\n   tree t;\n \n-  t = build2 (GIMPLE_MODIFY_STMT, TREE_TYPE (valist), valist,\n+  t = build2 (MODIFY_EXPR, TREE_TYPE (valist), valist,\n \t      make_tree (ptr_type_node, nextarg));\n   TREE_SIDE_EFFECTS (t) = 1;\n \n@@ -4613,12 +4613,12 @@ std_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n       && !integer_zerop (TYPE_SIZE (type)))\n     {\n       t = fold_convert (TREE_TYPE (valist), size_int (boundary - 1));\n-      t = build2 (GIMPLE_MODIFY_STMT, TREE_TYPE (valist), valist_tmp,\n+      t = build2 (MODIFY_EXPR, TREE_TYPE (valist), valist_tmp,\n \t\t  build2 (PLUS_EXPR, TREE_TYPE (valist), valist_tmp, t));\n       gimplify_and_add (t, pre_p);\n \n       t = fold_convert (TREE_TYPE (valist), size_int (-boundary));\n-      t = build2 (GIMPLE_MODIFY_STMT, TREE_TYPE (valist), valist_tmp,\n+      t = build2 (MODIFY_EXPR, TREE_TYPE (valist), valist_tmp,\n \t\t  build2 (BIT_AND_EXPR, TREE_TYPE (valist), valist_tmp, t));\n       gimplify_and_add (t, pre_p);\n     }\n@@ -4657,7 +4657,7 @@ std_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n   /* Compute new value for AP.  */\n   t = fold_convert (TREE_TYPE (valist), rounded_size);\n   t = build2 (PLUS_EXPR, TREE_TYPE (valist), valist_tmp, t);\n-  t = build2 (GIMPLE_MODIFY_STMT, TREE_TYPE (valist), valist, t);\n+  t = build2 (MODIFY_EXPR, TREE_TYPE (valist), valist, t);\n   gimplify_and_add (t, pre_p);\n \n   addr = fold_convert (build_pointer_type (type), addr);\n@@ -4821,7 +4821,7 @@ expand_builtin_va_copy (tree exp)\n \n   if (TREE_CODE (va_list_type_node) != ARRAY_TYPE)\n     {\n-      t = build2 (GIMPLE_MODIFY_STMT, va_list_type_node, dst, src);\n+      t = build2 (MODIFY_EXPR, va_list_type_node, dst, src);\n       TREE_SIDE_EFFECTS (t) = 1;\n       expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n     }\n@@ -6933,7 +6933,7 @@ integer_valued_real_p (tree t)\n       return integer_valued_real_p (TREE_OPERAND (t, 0));\n \n     case COMPOUND_EXPR:\n-    case GIMPLE_MODIFY_STMT:\n+    case MODIFY_EXPR:\n     case BIND_EXPR:\n       return integer_valued_real_p (GENERIC_TREE_OPERAND (t, 1));\n \n@@ -8302,7 +8302,7 @@ fold_builtin_memset (tree dest, tree c, tree len, tree type, bool ignore)\n     }\n \n   ret = build_int_cst_type (TREE_TYPE (var), cval);\n-  ret = build2 (GIMPLE_MODIFY_STMT, TREE_TYPE (var), var, ret);\n+  ret = build2 (MODIFY_EXPR, TREE_TYPE (var), var, ret);\n   if (ignore)\n     return ret;\n \n@@ -8449,7 +8449,7 @@ fold_builtin_memory_op (tree dest, tree src, tree len, tree type, bool ignore, i\n \texpr = fold_convert (TREE_TYPE (destvar), srcvar);\n       else\n \texpr = fold_build1 (VIEW_CONVERT_EXPR, TREE_TYPE (destvar), srcvar);\n-      expr = build2 (GIMPLE_MODIFY_STMT, TREE_TYPE (destvar), destvar, expr);\n+      expr = build2 (MODIFY_EXPR, TREE_TYPE (destvar), destvar, expr);\n     }\n \n   if (ignore)\n@@ -12097,10 +12097,10 @@ do_mpfr_sincos (tree arg, tree arg_sinp, tree arg_cosp)\n \t\t  && TYPE_MAIN_VARIANT (TREE_TYPE (arg_cosp)) == TYPE_MAIN_VARIANT (type))\n \t        {\n \t\t  /* Set the values. */\n-\t\t  result_s = fold_build2 (GIMPLE_MODIFY_STMT, type, arg_sinp,\n+\t\t  result_s = fold_build2 (MODIFY_EXPR, type, arg_sinp,\n \t\t      \t\t\t  result_s);\n \t\t  TREE_SIDE_EFFECTS (result_s) = 1;\n-\t\t  result_c = fold_build2 (GIMPLE_MODIFY_STMT, type, arg_cosp,\n+\t\t  result_c = fold_build2 (MODIFY_EXPR, type, arg_cosp,\n \t\t      \t\t\t  result_c);\n \t\t  TREE_SIDE_EFFECTS (result_c) = 1;\n \t\t  /* Combine the assignments into a compound expr.  */"}, {"sha": "f624d95c4158f3a2f68e0cf6e4032bbb1114f075", "filename": "gcc/expr.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/939409afced0a24eb36b7bda1d98244f8a18e65d/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/939409afced0a24eb36b7bda1d98244f8a18e65d/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=939409afced0a24eb36b7bda1d98244f8a18e65d", "patch": "@@ -8665,6 +8665,15 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \ttarget = expand_vec_cond_expr (exp, target);\n \treturn target;\n \n+    case MODIFY_EXPR:\n+      {\n+\ttree lhs = TREE_OPERAND (exp, 0);\n+\ttree rhs = TREE_OPERAND (exp, 1);\n+\tgcc_assert (ignore);\n+\texpand_assignment (lhs, rhs);\n+\treturn const0_rtx;\n+      }\n+\n     case GIMPLE_MODIFY_STMT:\n       {\n \ttree lhs = GIMPLE_STMT_OPERAND (exp, 0);\n@@ -8700,7 +8709,6 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t  }\n \n \texpand_assignment (lhs, rhs);\n-\n \treturn const0_rtx;\n       }\n "}, {"sha": "56519172654ada74bb2cffed1dead6fb5b24b346", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/939409afced0a24eb36b7bda1d98244f8a18e65d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/939409afced0a24eb36b7bda1d98244f8a18e65d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=939409afced0a24eb36b7bda1d98244f8a18e65d", "patch": "@@ -1,3 +1,8 @@\n+2007-02-15  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/30391\n+\t* gfortran.dg/pr30391-1.f90: New test case.\n+\n 2007-02-15  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR middle-end/30433"}, {"sha": "28ca75427184473025c6c1ba735cc851333927d8", "filename": "gcc/testsuite/gfortran.dg/pr30391-1.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/939409afced0a24eb36b7bda1d98244f8a18e65d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr30391-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/939409afced0a24eb36b7bda1d98244f8a18e65d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr30391-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr30391-1.f90?ref=939409afced0a24eb36b7bda1d98244f8a18e65d", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do compile }\n+! { dg-options \"-O1\" }\n+SUBROUTINE check_for_overlap (cell_length)\n+  REAL, DIMENSION(1:3), INTENT(IN), OPTIONAL :: cell_length\n+  REAL, DIMENSION(1:3) :: abc, box_length\n+\n+  IF (PRESENT(cell_length)) THEN\n+    box_length(1:3)=abc(1:3)\n+  ENDIF\n+END SUBROUTINE check_for_overlap"}, {"sha": "4d6957fc6037901bfb4f38e3831943b52c7d8398", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/939409afced0a24eb36b7bda1d98244f8a18e65d/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/939409afced0a24eb36b7bda1d98244f8a18e65d/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=939409afced0a24eb36b7bda1d98244f8a18e65d", "patch": "@@ -294,8 +294,8 @@ factor_computed_gotos (void)\n \t    }\n \n \t  /* Copy the original computed goto's destination into VAR.  */\n-\t  assignment = build2_gimple (GIMPLE_MODIFY_STMT,\n-\t\t\t              var, GOTO_DESTINATION (last));\n+\t  assignment = build_gimple_modify_stmt (var,\n+\t\t\t\t\t\t GOTO_DESTINATION (last));\n \t  bsi_insert_before (&bsi, assignment, BSI_SAME_STMT);\n \n \t  /* And re-vector the computed goto to the new destination.  */\n@@ -1260,7 +1260,7 @@ tree_merge_blocks (basic_block a, basic_block b)\n \t     with ordering of phi nodes.  This is because A is the single\n \t     predecessor of B, therefore results of the phi nodes cannot\n \t     appear as arguments of the phi nodes.  */\n-\t  copy = build2_gimple (GIMPLE_MODIFY_STMT, def, use);\n+\t  copy = build_gimple_modify_stmt (def, use);\n \t  bsi_insert_after (&bsi, copy, BSI_NEW_STMT);\n \t  SSA_NAME_DEF_STMT (def) = copy;\n           remove_phi_node (phi, NULL, false);\n@@ -5646,7 +5646,7 @@ gimplify_val (block_stmt_iterator *bsi, tree type, tree exp)\n     return exp;\n \n   t = make_rename_temp (type, NULL);\n-  new_stmt = build2_gimple (GIMPLE_MODIFY_STMT, t, exp);\n+  new_stmt = build_gimple_modify_stmt (t, exp);\n \n   orig_stmt = bsi_stmt (*bsi);\n   SET_EXPR_LOCUS (new_stmt, EXPR_LOCUS (orig_stmt));"}, {"sha": "a64ec1805c59772be6a039592d4cb666b0f6b01e", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/939409afced0a24eb36b7bda1d98244f8a18e65d/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/939409afced0a24eb36b7bda1d98244f8a18e65d/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=939409afced0a24eb36b7bda1d98244f8a18e65d", "patch": "@@ -1,5 +1,5 @@\n /* Lower complex number operations to scalar operations.\n-   Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n \n This file is part of GCC.\n    \n@@ -532,7 +532,7 @@ set_component_ssa_name (tree ssa_name, bool imag_p, tree value)\n   \n   /* Do all the work to assign VALUE to COMP.  */\n   value = force_gimple_operand (value, &list, false, NULL);\n-  last = build2_gimple (GIMPLE_MODIFY_STMT, comp, value);\n+  last = build_gimple_modify_stmt (comp, value);\n   append_to_statement_list (last, &list);\n \n   gcc_assert (SSA_NAME_DEF_STMT (comp) == NULL);\n@@ -773,7 +773,7 @@ expand_complex_move (block_stmt_iterator *bsi, tree stmt, tree type,\n       i = extract_component (bsi, rhs, 1, false);\n \n       x = build1 (REALPART_EXPR, inner_type, unshare_expr (lhs));\n-      x = build2_gimple (GIMPLE_MODIFY_STMT, x, r);\n+      x = build_gimple_modify_stmt (x, r);\n       bsi_insert_before (bsi, x, BSI_SAME_STMT);\n \n       if (stmt == bsi_stmt (*bsi))\n@@ -785,7 +785,7 @@ expand_complex_move (block_stmt_iterator *bsi, tree stmt, tree type,\n       else\n \t{\n \t  x = build1 (IMAGPART_EXPR, inner_type, unshare_expr (lhs));\n-\t  x = build2_gimple (GIMPLE_MODIFY_STMT, x, i);\n+\t  x = build_gimple_modify_stmt (x, i);\n \t  bsi_insert_before (bsi, x, BSI_SAME_STMT);\n \n \t  stmt = bsi_stmt (*bsi);\n@@ -1115,9 +1115,9 @@ expand_complex_div_wide (block_stmt_iterator *bsi, tree inner_type,\n \n      if (bb_true)\n        {\n-\t t1 = build2_gimple (GIMPLE_MODIFY_STMT, rr, tr);\n+\t t1 = build_gimple_modify_stmt (rr, tr);\n \t bsi_insert_before (bsi, t1, BSI_SAME_STMT);\n-\t t1 = build2_gimple (GIMPLE_MODIFY_STMT, ri, ti);\n+\t t1 = build_gimple_modify_stmt (ri, ti);\n \t bsi_insert_before (bsi, t1, BSI_SAME_STMT);\n \t bsi_remove (bsi, true);\n        }\n@@ -1154,9 +1154,9 @@ expand_complex_div_wide (block_stmt_iterator *bsi, tree inner_type,\n \n      if (bb_false)\n        {\n-\t t1 = build2_gimple (GIMPLE_MODIFY_STMT, rr, tr);\n+\t t1 = build_gimple_modify_stmt (rr, tr);\n \t bsi_insert_before (bsi, t1, BSI_SAME_STMT);\n-\t t1 = build2_gimple (GIMPLE_MODIFY_STMT, ri, ti);\n+\t t1 = build_gimple_modify_stmt (ri, ti);\n \t bsi_insert_before (bsi, t1, BSI_SAME_STMT);\n \t bsi_remove (bsi, true);\n        }"}, {"sha": "888c5ee7bde7727b97e218685bd5ff544ca68c2a", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/939409afced0a24eb36b7bda1d98244f8a18e65d/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/939409afced0a24eb36b7bda1d98244f8a18e65d/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=939409afced0a24eb36b7bda1d98244f8a18e65d", "patch": "@@ -1,5 +1,5 @@\n /* SSA Dominator optimizations for trees\n-   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n+   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n    Free Software Foundation, Inc.\n    Contributed by Diego Novillo <dnovillo@redhat.com>\n \n@@ -1623,7 +1623,7 @@ record_equivalences_from_stmt (tree stmt, int may_optimize_p, stmt_ann_t ann)\n       if (rhs)\n \t{\n \t  /* Build a new statement with the RHS and LHS exchanged.  */\n-\t  new = build2_gimple (GIMPLE_MODIFY_STMT, rhs, lhs);\n+\t  new = build_gimple_modify_stmt (rhs, lhs);\n \n \t  create_ssa_artificial_load_stmt (new, stmt);\n "}, {"sha": "316c3d2c1b6260d69e5e7340742b30a6a302c123", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/939409afced0a24eb36b7bda1d98244f8a18e65d/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/939409afced0a24eb36b7bda1d98244f8a18e65d/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=939409afced0a24eb36b7bda1d98244f8a18e65d", "patch": "@@ -1,5 +1,5 @@\n /* Loop invariant motion.\n-   Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n    \n This file is part of GCC.\n    \n@@ -1053,7 +1053,7 @@ schedule_sm (struct loop *loop, VEC (edge, heap) *exits, tree ref,\n       LIM_DATA (aref->stmt)->sm_done = true;\n \n   /* Emit the load & stores.  */\n-  load = build2_gimple (GIMPLE_MODIFY_STMT, tmp_var, ref);\n+  load = build_gimple_modify_stmt (tmp_var, ref);\n   get_stmt_ann (load)->common.aux = xcalloc (1, sizeof (struct lim_aux_data));\n   LIM_DATA (load)->max_loop = loop;\n   LIM_DATA (load)->tgt_loop = loop;\n@@ -1064,7 +1064,7 @@ schedule_sm (struct loop *loop, VEC (edge, heap) *exits, tree ref,\n \n   for (i = 0; VEC_iterate (edge, exits, i, ex); i++)\n     {\n-      store = build2_gimple (GIMPLE_MODIFY_STMT, unshare_expr (ref), tmp_var);\n+      store = build_gimple_modify_stmt (unshare_expr (ref), tmp_var);\n       bsi_insert_on_edge (ex, store);\n     }\n }"}, {"sha": "8223facd6dd71966e87b0864635fe880c3c09f4b", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/939409afced0a24eb36b7bda1d98244f8a18e65d/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/939409afced0a24eb36b7bda1d98244f8a18e65d/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=939409afced0a24eb36b7bda1d98244f8a18e65d", "patch": "@@ -1,5 +1,5 @@\n /* Induction variable optimizations.\n-   Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n    \n This file is part of GCC.\n    \n@@ -4946,7 +4946,7 @@ rewrite_use_nonlinear_expr (struct ivopts_data *data,\n     {\n       if (stmts)\n \tbsi_insert_after (&bsi, stmts, BSI_CONTINUE_LINKING);\n-      ass = build2_gimple (GIMPLE_MODIFY_STMT, tgt, op);\n+      ass = build_gimple_modify_stmt (tgt, op);\n       bsi_insert_after (&bsi, ass, BSI_NEW_STMT);\n       remove_statement (use->stmt, false);\n       SSA_NAME_DEF_STMT (tgt) = ass;"}, {"sha": "bce9890d6a48d22b3ee70c1a91b884e9831ee868", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/939409afced0a24eb36b7bda1d98244f8a18e65d/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/939409afced0a24eb36b7bda1d98244f8a18e65d/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=939409afced0a24eb36b7bda1d98244f8a18e65d", "patch": "@@ -103,8 +103,9 @@ create_iv (tree base, tree step, tree var, struct loop *loop,\n   if (stmts)\n     bsi_insert_on_edge_immediate (pe, stmts);\n \n-  stmt = build2_gimple (GIMPLE_MODIFY_STMT, va,\n-\t\t        build2 (incr_op, TREE_TYPE (base), vb, step));\n+  stmt = build_gimple_modify_stmt (va,\n+\t\t\t\t   build2 (incr_op, TREE_TYPE (base),\n+\t\t\t\t\t   vb, step));\n   SSA_NAME_DEF_STMT (va) = stmt;\n   if (after)\n     bsi_insert_after (incr_pos, stmt, BSI_NEW_STMT);"}, {"sha": "f8e96bd3929d777e511d29fff1caa59f6077c221", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/939409afced0a24eb36b7bda1d98244f8a18e65d/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/939409afced0a24eb36b7bda1d98244f8a18e65d/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=939409afced0a24eb36b7bda1d98244f8a18e65d", "patch": "@@ -1,5 +1,5 @@\n /* Optimization of PHI nodes by converting them into straightline code.\n-   Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -439,7 +439,7 @@ conditional_replacement (basic_block cond_bb, basic_block middle_bb,\n \t\t     TREE_OPERAND (old_result, 0),\n \t\t     TREE_OPERAND (old_result, 1));\n \n-      new1 = build2_gimple (GIMPLE_MODIFY_STMT, new_var, new1);\n+      new1 = build_gimple_modify_stmt (new_var, new1);\n       SSA_NAME_DEF_STMT (new_var) = new1;\n \n       bsi_insert_after (&bsi, new1, BSI_NEW_STMT);\n@@ -470,7 +470,7 @@ conditional_replacement (basic_block cond_bb, basic_block middle_bb,\n       || (e1 == true_edge && integer_onep (arg1))\n       || (e1 == false_edge && integer_zerop (arg1)))\n     {\n-      new = build2_gimple (GIMPLE_MODIFY_STMT, new_var1, cond);\n+      new = build_gimple_modify_stmt (new_var1, cond);\n     }\n   else\n     {\n@@ -514,14 +514,14 @@ conditional_replacement (basic_block cond_bb, basic_block middle_bb,\n \t  tmp = create_tmp_var (TREE_TYPE (op0), NULL);\n \t  add_referenced_var (tmp);\n \t  cond_tmp = make_ssa_name (tmp, NULL);\n-\t  new = build2_gimple (GIMPLE_MODIFY_STMT, cond_tmp, op0);\n+\t  new = build_gimple_modify_stmt (cond_tmp, op0);\n \t  SSA_NAME_DEF_STMT (cond_tmp) = new;\n \n \t  bsi_insert_after (&bsi, new, BSI_NEW_STMT);\n \t  cond = fold_convert (TREE_TYPE (result), cond_tmp);\n \t}\n \n-      new = build2_gimple (GIMPLE_MODIFY_STMT, new_var1, cond);\n+      new = build_gimple_modify_stmt (new_var1, cond);\n     }\n \n   bsi_insert_after (&bsi, new, BSI_NEW_STMT);\n@@ -853,8 +853,7 @@ minmax_replacement (basic_block cond_bb, basic_block middle_bb,\n \n   /* Emit the statement to compute min/max.  */\n   result = duplicate_ssa_name (PHI_RESULT (phi), NULL);\n-  new = build2_gimple (GIMPLE_MODIFY_STMT, result,\n-\t\t       build2 (minmax, type, arg0, arg1));\n+  new = build_gimple_modify_stmt (result, build2 (minmax, type, arg0, arg1));\n   SSA_NAME_DEF_STMT (result) = new;\n   bsi = bsi_last (cond_bb);\n   bsi_insert_before (&bsi, new, BSI_NEW_STMT);\n@@ -966,8 +965,8 @@ abs_replacement (basic_block cond_bb, basic_block middle_bb,\n     lhs = result;\n \n   /* Build the modify expression with abs expression.  */\n-  new = build2_gimple (GIMPLE_MODIFY_STMT,\n-\t\t       lhs, build1 (ABS_EXPR, TREE_TYPE (lhs), rhs));\n+  new = build_gimple_modify_stmt (lhs,\n+\t\t\t\t  build1 (ABS_EXPR, TREE_TYPE (lhs), rhs));\n   SSA_NAME_DEF_STMT (lhs) = new;\n \n   bsi = bsi_last (cond_bb);\n@@ -978,8 +977,9 @@ abs_replacement (basic_block cond_bb, basic_block middle_bb,\n       /* Get the right BSI.  We want to insert after the recently\n \t added ABS_EXPR statement (which we know is the first statement\n \t in the block.  */\n-      new = build2_gimple (GIMPLE_MODIFY_STMT,\n-\t\t           result, build1 (NEGATE_EXPR, TREE_TYPE (lhs), lhs));\n+      new = build_gimple_modify_stmt (result,\n+\t\t\t\t      build1 (NEGATE_EXPR, TREE_TYPE (lhs),\n+\t\t\t\t\t      lhs));\n       SSA_NAME_DEF_STMT (result) = new;\n \n       bsi_insert_after (&bsi, new, BSI_NEW_STMT);"}, {"sha": "5e47a43ab16f1749bc4386913fab049a6ad32b6d", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/939409afced0a24eb36b7bda1d98244f8a18e65d/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/939409afced0a24eb36b7bda1d98244f8a18e65d/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=939409afced0a24eb36b7bda1d98244f8a18e65d", "patch": "@@ -1,5 +1,6 @@\n /* SSA-PRE for trees.\n-   Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+   Free Software Foundation, Inc.\n    Contributed by Daniel Berlin <dan@dberlin.org> and Steven Bosscher\n    <stevenb@suse.de>\n \n@@ -2606,7 +2607,7 @@ create_expression_by_pieces (basic_block block, tree expr, tree stmts)\n       || TREE_CODE (TREE_TYPE (expr)) == VECTOR_TYPE)\n     DECL_GIMPLE_REG_P (temp) = 1;\n \n-  newexpr = build2_gimple (GIMPLE_MODIFY_STMT, temp, newexpr);\n+  newexpr = build_gimple_modify_stmt (temp, newexpr);\n   name = make_ssa_name (temp, newexpr);\n   GIMPLE_STMT_OPERAND (newexpr, 0) = name;\n   NECESSARY (newexpr) = 0;\n@@ -3385,7 +3386,7 @@ static tree\n poolify_modify_stmt (tree op1, tree op2)\n {\n   if (modify_expr_template == NULL)\n-    modify_expr_template = build2_gimple (GIMPLE_MODIFY_STMT, op1, op2);\n+    modify_expr_template = build_gimple_modify_stmt (op1, op2);\n \n   GIMPLE_STMT_OPERAND (modify_expr_template, 0) = op1;\n   GIMPLE_STMT_OPERAND (modify_expr_template, 1) = op2;\n@@ -3486,7 +3487,7 @@ realify_fake_stores (void)\n       if (NECESSARY (stmt))\n \t{\n \t  block_stmt_iterator bsi;\n-\t  tree newstmt;\n+\t  tree newstmt, tmp;\n \n \t  /* Mark the temp variable as referenced */\n \t  add_referenced_var (SSA_NAME_VAR (GIMPLE_STMT_OPERAND (stmt, 0)));\n@@ -3497,9 +3498,9 @@ realify_fake_stores (void)\n \t     as a plain ssa name copy.  */\n \t  bsi = bsi_for_stmt (stmt);\n \t  bsi_prev (&bsi);\n-\t  newstmt = build2_gimple (GIMPLE_MODIFY_STMT,\n-\t\t\t           GIMPLE_STMT_OPERAND (stmt, 0),\n-\t\t\t    \t   GIMPLE_STMT_OPERAND (bsi_stmt (bsi), 1));\n+\t  tmp = GIMPLE_STMT_OPERAND (bsi_stmt (bsi), 1);\n+\t  newstmt = build_gimple_modify_stmt (GIMPLE_STMT_OPERAND (stmt, 0),\n+\t\t\t\t\t      tmp);\n \t  SSA_NAME_DEF_STMT (GIMPLE_STMT_OPERAND (newstmt, 0)) = newstmt;\n \t  bsi_insert_before (&bsi, newstmt, BSI_SAME_STMT);\n \t  bsi = bsi_for_stmt (stmt);"}, {"sha": "d9982e8b2eca662a8b9cc939f34ee095347aa9d0", "filename": "gcc/tree.c", "status": "modified", "additions": 15, "deletions": 33, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/939409afced0a24eb36b7bda1d98244f8a18e65d/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/939409afced0a24eb36b7bda1d98244f8a18e65d/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=939409afced0a24eb36b7bda1d98244f8a18e65d", "patch": "@@ -1896,14 +1896,11 @@ expr_align (tree t)\n       align1 = TYPE_ALIGN (TREE_TYPE (t));\n       return MAX (align0, align1);\n \n-    case MODIFY_EXPR:\n-      /* FIXME tuples: It is unclear to me if this function, which\n-         is only called from ADA, is called on gimple or non gimple\n-         trees.  Let's assume it's from gimple trees unless we hit\n-         this abort.  */\n+    case GIMPLE_MODIFY_STMT:\n+      /* We should never ask for the alignment of a gimple statement.  */\n       gcc_unreachable ();\n \n-    case SAVE_EXPR:         case COMPOUND_EXPR:       case GIMPLE_MODIFY_STMT:\n+    case SAVE_EXPR:         case COMPOUND_EXPR:       case MODIFY_EXPR:\n     case INIT_EXPR:         case TARGET_EXPR:         case WITH_CLEANUP_EXPR:\n     case CLEANUP_POINT_EXPR:\n       /* These don't change the alignment of an object.  */\n@@ -3062,16 +3059,14 @@ build2_stat (enum tree_code code, tree tt, tree arg0, tree arg1 MEM_STAT_DECL)\n \n   gcc_assert (TREE_CODE_LENGTH (code) == 2);\n \n-  if (code == MODIFY_EXPR && cfun && cfun->gimplified)\n-    {\n-      /* We should be talking GIMPLE_MODIFY_STMT by now.  */\n-      gcc_unreachable ();\n-    }\n-\n-  /* FIXME tuples: For now let's be lazy; later we must rewrite all\n-     build2 calls to build2_gimple calls.  */\n-  if (TREE_CODE_CLASS (code) == tcc_gimple_stmt)\n-    return build2_gimple (code, arg0, arg1);\n+#if 1\n+  /* FIXME tuples: Statement's aren't expressions!  */\n+  if (code == GIMPLE_MODIFY_STMT)\n+    return build_gimple_modify_stmt_stat (arg0, arg1 PASS_MEM_STAT);\n+#else\n+  /* Must use build_gimple_modify_stmt to construct GIMPLE_MODIFY_STMTs.  */\n+  gcc_assert (code != GIMPLE_MODIFY_STMT);\n+#endif\n \n   t = make_node_stat (code PASS_MEM_STAT);\n   TREE_TYPE (t) = tt;\n@@ -3104,31 +3099,18 @@ build2_stat (enum tree_code code, tree tt, tree arg0, tree arg1 MEM_STAT_DECL)\n }\n \n \n-/* Similar as build2_stat, but for GIMPLE tuples.  For convenience's sake,\n-   arguments and return type are trees.  */\n+/* Build a GIMPLE_MODIFY_STMT node.  This tree code doesn't have a\n+   type, so we can't use build2 (a.k.a. build2_stat).  */\n \n tree\n-build2_gimple_stat (enum tree_code code, tree arg0, tree arg1 MEM_STAT_DECL)\n+build_gimple_modify_stmt_stat (tree arg0, tree arg1 MEM_STAT_DECL)\n {\n-  bool side_effects;\n   tree t;\n \n-  gcc_assert (TREE_CODE_LENGTH (code) == 2);\n-\n-  t = make_node_stat (code PASS_MEM_STAT);\n-\n-  side_effects = TREE_SIDE_EFFECTS (t);\n-\n+  t = make_node_stat (GIMPLE_MODIFY_STMT PASS_MEM_STAT);\n   /* ?? We don't care about setting flags for tuples...  */\n   GIMPLE_STMT_OPERAND (t, 0) = arg0;\n   GIMPLE_STMT_OPERAND (t, 1) = arg1;\n-\n-  /* ...except perhaps side_effects and volatility.  ?? */\n-  TREE_SIDE_EFFECTS (t) = side_effects;\n-  TREE_THIS_VOLATILE (t) = (TREE_CODE_CLASS (code) == tcc_reference\n-\t             \t    && arg0 && TREE_THIS_VOLATILE (arg0));\n-\n-\n   return t;\n }\n "}, {"sha": "b656e1bfa489f8f45d91e0b43aabdda6b71c9165", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/939409afced0a24eb36b7bda1d98244f8a18e65d/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/939409afced0a24eb36b7bda1d98244f8a18e65d/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=939409afced0a24eb36b7bda1d98244f8a18e65d", "patch": "@@ -3684,8 +3684,6 @@ extern tree build1_stat (enum tree_code, tree, tree MEM_STAT_DECL);\n #define build1(c,t1,t2) build1_stat (c,t1,t2 MEM_STAT_INFO)\n extern tree build2_stat (enum tree_code, tree, tree, tree MEM_STAT_DECL);\n #define build2(c,t1,t2,t3) build2_stat (c,t1,t2,t3 MEM_STAT_INFO)\n-extern tree build2_gimple_stat (enum tree_code, tree, tree MEM_STAT_DECL);\n-#define build2_gimple(c,t1,t2) build2_gimple_stat (c,t1,t2 MEM_STAT_INFO)\n extern tree build3_stat (enum tree_code, tree, tree, tree, tree MEM_STAT_DECL);\n #define build3(c,t1,t2,t3,t4) build3_stat (c,t1,t2,t3,t4 MEM_STAT_INFO)\n extern tree build4_stat (enum tree_code, tree, tree, tree, tree,\n@@ -3699,6 +3697,10 @@ extern tree build7_stat (enum tree_code, tree, tree, tree, tree, tree,\n #define build7(c,t1,t2,t3,t4,t5,t6,t7,t8) \\\n   build7_stat (c,t1,t2,t3,t4,t5,t6,t7,t8 MEM_STAT_INFO)\n \n+extern tree build_gimple_modify_stmt_stat (tree, tree MEM_STAT_DECL);\n+#define build_gimple_modify_stmt(t1,t2) \\\n+  build_gimple_modify_stmt_stat (t1,t2 MEM_STAT_INFO)\n+\n extern tree build_int_cst (tree, HOST_WIDE_INT);\n extern tree build_int_cst_type (tree, HOST_WIDE_INT);\n extern tree build_int_cstu (tree, unsigned HOST_WIDE_INT);"}]}