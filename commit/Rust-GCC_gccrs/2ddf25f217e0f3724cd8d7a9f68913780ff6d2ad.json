{"sha": "2ddf25f217e0f3724cd8d7a9f68913780ff6d2ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRkZjI1ZjIxN2UwZjM3MjRjZDhkN2E5ZjY4OTEzNzgwZmY2ZDJhZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-02-18T16:39:13Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-02-18T16:39:13Z"}, "message": "locale_facets.h (money_get<>::_M_extract): New, helper for do_get.\n\n2004-02-18  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/locale_facets.h (money_get<>::_M_extract):\n\tNew, helper for do_get.\n\t(money_put<>::_M_insert): Likewise, for do_put.\n\t* include/bits/locale_facets.tcc (money_get<>::_M_extract,\n\tmoney_put<>::_M_insert): Define.\n\t(money_get<>::do_get(long double&), money_get<>::do_get(\n\tstring_type&), money_put::do_put(long double),\n\tmoney_put::do_put(const string_type&)): Use the helpers.\n\nFrom-SVN: r78037", "tree": {"sha": "ca114112e053067519f6d2b352174abe71764b3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca114112e053067519f6d2b352174abe71764b3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ddf25f217e0f3724cd8d7a9f68913780ff6d2ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ddf25f217e0f3724cd8d7a9f68913780ff6d2ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ddf25f217e0f3724cd8d7a9f68913780ff6d2ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ddf25f217e0f3724cd8d7a9f68913780ff6d2ad/comments", "author": null, "committer": null, "parents": [{"sha": "99cc786a17d1c0d9e592a925627f6cc99475cf9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99cc786a17d1c0d9e592a925627f6cc99475cf9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99cc786a17d1c0d9e592a925627f6cc99475cf9d"}], "stats": {"total": 149, "additions": 90, "deletions": 59}, "files": [{"sha": "f6428ad86bbc7d34f30919838f0eb431110a6b9a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddf25f217e0f3724cd8d7a9f68913780ff6d2ad/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddf25f217e0f3724cd8d7a9f68913780ff6d2ad/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2ddf25f217e0f3724cd8d7a9f68913780ff6d2ad", "patch": "@@ -1,3 +1,14 @@\n+2004-02-18  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/locale_facets.h (money_get<>::_M_extract):\n+\tNew, helper for do_get.\n+\t(money_put<>::_M_insert): Likewise, for do_put.\n+\t* include/bits/locale_facets.tcc (money_get<>::_M_extract,\n+\tmoney_put<>::_M_insert): Define.\n+\t(money_get<>::do_get(long double&), money_get<>::do_get(\n+\tstring_type&), money_put::do_put(long double),\n+\tmoney_put::do_put(const string_type&)): Use the helpers.\n+\n 2004-02-18  Paolo Carlini  <pcarlini@suse.de>\n \n \t* config/io/basic_file_stdio.cc (__gnu_internal::xwritev):"}, {"sha": "889c778c92e2b20d2e0f6a026391404fb879ee60", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddf25f217e0f3724cd8d7a9f68913780ff6d2ad/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddf25f217e0f3724cd8d7a9f68913780ff6d2ad/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=2ddf25f217e0f3724cd8d7a9f68913780ff6d2ad", "patch": "@@ -4056,6 +4056,10 @@ namespace std\n       virtual iter_type\n       do_get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,\n \t     ios_base::iostate& __err, string_type& __digits) const;\n+\n+      iter_type\n+      _M_extract(iter_type __s, iter_type __end, bool __intl, ios_base& __io,\n+\t\t ios_base::iostate& __err, string_type& __digits) const;     \n     };\n \n   template<typename _CharT, typename _InIter>\n@@ -4189,6 +4193,10 @@ namespace std\n       virtual iter_type\n       do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,\n \t     const string_type& __digits) const;\n+\n+      iter_type\n+      _M_insert(iter_type __s, bool __intl, ios_base& __io, char_type __fill,\n+\t\tconst string_type& __digits) const;\n     };\n \n   template<typename _CharT, typename _OutIter>"}, {"sha": "7ccb946f36c75efe8f23a91236a8c2a3dbe61ba9", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 71, "deletions": 59, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddf25f217e0f3724cd8d7a9f68913780ff6d2ad/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddf25f217e0f3724cd8d7a9f68913780ff6d2ad/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=2ddf25f217e0f3724cd8d7a9f68913780ff6d2ad", "patch": "@@ -1130,31 +1130,11 @@ namespace std\n       return __s;\n     }\n \n-\n-  template<typename _CharT, typename _InIter>\n-    _InIter\n-    money_get<_CharT, _InIter>::\n-    do_get(iter_type __beg, iter_type __end, bool __intl, ios_base& __io,\n-\t   ios_base::iostate& __err, long double& __units) const\n-    {\n-      string_type __str;\n-      __beg = this->do_get(__beg, __end, __intl, __io, __err, __str);\n-\n-      const int __cs_size = __str.size() + 1;\n-      char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n-      const locale __loc = __io.getloc();\n-      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);\n-      const _CharT* __wcs = __str.c_str();\n-      __ctype.narrow(__wcs, __wcs + __cs_size, char(), __cs);\n-      std::__convert_to_v(__cs, __units, __err, _S_get_c_locale());\n-      return __beg;\n-    }\n-\n   template<typename _CharT, typename _InIter>\n     _InIter\n     money_get<_CharT, _InIter>::\n-    do_get(iter_type __beg, iter_type __end, bool __intl, ios_base& __io,\n-\t   ios_base::iostate& __err, string_type& __units) const\n+    _M_extract(iter_type __beg, iter_type __end, bool __intl, ios_base& __io,\n+\t       ios_base::iostate& __err, string_type& __units) const\n     {\n       // These contortions are quite unfortunate.\n       typedef moneypunct<_CharT, true>\t\t__money_true;\n@@ -1358,53 +1338,41 @@ namespace std\n       return __beg;\n     }\n \n-  template<typename _CharT, typename _OutIter>\n-    _OutIter\n-    money_put<_CharT, _OutIter>::\n-    do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,\n-\t   long double __units) const\n+  template<typename _CharT, typename _InIter>\n+    _InIter\n+    money_get<_CharT, _InIter>::\n+    do_get(iter_type __beg, iter_type __end, bool __intl, ios_base& __io,\n+\t   ios_base::iostate& __err, long double& __units) const\n     {\n+      string_type __str;\n+      __beg = _M_extract(__beg, __end, __intl, __io, __err, __str);\n+\n+      const int __cs_size = __str.size() + 1;\n+      char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n       const locale __loc = __io.getloc();\n       const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);\n-#ifdef _GLIBCXX_USE_C99\n-      // First try a buffer perhaps big enough.\n-      int __cs_size = 64;\n-      char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n-      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-      // 328. Bad sprintf format modifier in money_put<>::do_put()\n-      int __len = std::__convert_from_v(__cs, __cs_size, \"%.0Lf\", __units,\n-\t\t\t\t\t_S_get_c_locale());\n-      // If the buffer was not large enough, try again with the correct size.\n-      if (__len >= __cs_size)\n-\t{\n-\t  __cs_size = __len + 1;\n-\t  __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n-\t  __len = std::__convert_from_v(__cs, __cs_size, \"%.0Lf\", __units,\n-\t\t\t\t\t_S_get_c_locale());\n-\t}\n-#else\n-      // max_exponent10 + 1 for the integer part, + 2 for sign and '\\0'.\n-      const int __cs_size = numeric_limits<long double>::max_exponent10 + 3;\n-      char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n-      int __len = std::__convert_from_v(__cs, 0, \"%.0Lf\", __units,\n-\t\t\t\t\t_S_get_c_locale());\n-#endif\n-      _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)\n-\t\t\t\t\t\t\t   * __cs_size));\n-      __ctype.widen(__cs, __cs + __len, __ws);\n-      const string_type __digits(__ws, __len);\n-      return this->do_put(__s, __intl, __io, __fill, __digits);\n+      const _CharT* __wcs = __str.c_str();\n+      __ctype.narrow(__wcs, __wcs + __cs_size, char(), __cs);\n+      std::__convert_to_v(__cs, __units, __err, _S_get_c_locale());\n+      return __beg;\n     }\n \n+  template<typename _CharT, typename _InIter>\n+    _InIter\n+    money_get<_CharT, _InIter>::\n+    do_get(iter_type __beg, iter_type __end, bool __intl, ios_base& __io,\n+\t   ios_base::iostate& __err, string_type& __units) const\n+    { return _M_extract(__beg, __end, __intl, __io, __err, __units); }\n+\n   template<typename _CharT, typename _OutIter>\n     _OutIter\n     money_put<_CharT, _OutIter>::\n-    do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,\n-\t   const string_type& __digits) const\n+    _M_insert(iter_type __s, bool __intl, ios_base& __io, char_type __fill,\n+\t      const string_type& __digits) const\n     {\n       typedef typename string_type::size_type\tsize_type;\n       typedef money_base::part\t\t\tpart;\n-\n+      \n       const locale __loc = __io.getloc();\n       const size_type __width = static_cast<size_type>(__io.width());\n \n@@ -1556,9 +1524,53 @@ namespace std\n \t  __s = std::__write(__s, __res.data(), __len);\n \t}\n       __io.width(0);\n-      return __s;\n+      return __s;    \n     }\n \n+  template<typename _CharT, typename _OutIter>\n+    _OutIter\n+    money_put<_CharT, _OutIter>::\n+    do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,\n+\t   long double __units) const\n+    {\n+      const locale __loc = __io.getloc();\n+      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);\n+#ifdef _GLIBCXX_USE_C99\n+      // First try a buffer perhaps big enough.\n+      int __cs_size = 64;\n+      char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 328. Bad sprintf format modifier in money_put<>::do_put()\n+      int __len = std::__convert_from_v(__cs, __cs_size, \"%.0Lf\", __units,\n+\t\t\t\t\t_S_get_c_locale());\n+      // If the buffer was not large enough, try again with the correct size.\n+      if (__len >= __cs_size)\n+\t{\n+\t  __cs_size = __len + 1;\n+\t  __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n+\t  __len = std::__convert_from_v(__cs, __cs_size, \"%.0Lf\", __units,\n+\t\t\t\t\t_S_get_c_locale());\n+\t}\n+#else\n+      // max_exponent10 + 1 for the integer part, + 2 for sign and '\\0'.\n+      const int __cs_size = numeric_limits<long double>::max_exponent10 + 3;\n+      char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n+      int __len = std::__convert_from_v(__cs, 0, \"%.0Lf\", __units,\n+\t\t\t\t\t_S_get_c_locale());\n+#endif\n+      _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)\n+\t\t\t\t\t\t\t   * __cs_size));\n+      __ctype.widen(__cs, __cs + __len, __ws);\n+      const string_type __digits(__ws, __len);\n+      return _M_insert(__s, __intl, __io, __fill, __digits);\n+    }\n+\n+  template<typename _CharT, typename _OutIter>\n+    _OutIter\n+    money_put<_CharT, _OutIter>::\n+    do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,\n+\t   const string_type& __digits) const\n+    { return _M_insert(__s, __intl, __io, __fill, __digits); }\n \n   // NB: Not especially useful. Without an ios_base object or some\n   // kind of locale reference, we are left clawing at the air where"}]}