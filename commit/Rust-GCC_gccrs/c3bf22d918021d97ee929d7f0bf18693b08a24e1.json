{"sha": "c3bf22d918021d97ee929d7f0bf18693b08a24e1", "node_id": "C_kwDOANBUbNoAKGMzYmYyMmQ5MTgwMjFkOTdlZTkyOWQ3ZjBiZjE4NjkzYjA4YTI0ZTE", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-02-22T00:18:49Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-02-22T00:18:49Z"}, "message": "Daily bump.", "tree": {"sha": "8f864c092352323128c6b9cb2107f311ea56613f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f864c092352323128c6b9cb2107f311ea56613f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3bf22d918021d97ee929d7f0bf18693b08a24e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3bf22d918021d97ee929d7f0bf18693b08a24e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3bf22d918021d97ee929d7f0bf18693b08a24e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3bf22d918021d97ee929d7f0bf18693b08a24e1/comments", "author": null, "committer": null, "parents": [{"sha": "8f6369157917a4371b5d66dfe82b84aded3b8268", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f6369157917a4371b5d66dfe82b84aded3b8268", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f6369157917a4371b5d66dfe82b84aded3b8268"}], "stats": {"total": 1129, "additions": 1128, "deletions": 1}, "files": [{"sha": "4363149898e841e1480c2665581f0c7dab4c3916", "filename": "gcc/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3bf22d918021d97ee929d7f0bf18693b08a24e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3bf22d918021d97ee929d7f0bf18693b08a24e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c3bf22d918021d97ee929d7f0bf18693b08a24e1", "patch": "@@ -1,3 +1,47 @@\n+2023-02-21  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/108830\n+\t* doc/invoke.texi: Document -fno-analyzer-suppress-followups.\n+\n+2023-02-21  Max Filippov  <jcmvbkbc@gmail.com>\n+\n+\tPR target/108876\n+\t* config/xtensa/xtensa.cc (xtensa_expand_epilogue): Drop emit_use\n+\tfor A0_REG.\n+\t* config/xtensa/xtensa.md (sibcall, sibcall_internal)\n+\t(sibcall_value, sibcall_value_internal): Add 'use' expression\n+\tfor A0_REG.\n+\n+2023-02-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/108691\n+\t* tree-ssa-dce.cc (eliminate_unnecessary_stmts): Remove\n+\tassert about calls_setjmp not becoming true when it was false.\n+\n+2023-02-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/108793\n+\t* tree-ssa-loop-niter.cc (number_of_iterations_until_wrap):\n+\tUse convert operands to niter_type when computing num.\n+\n+2023-02-21  Richard Biener  <rguenther@suse.de>\n+\n+\tRevert:\n+\t2023-02-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/108691\n+\t* tree-cfg.cc (notice_special_calls): When the CFG is built\n+\thonor gimple_call_ctrl_altering_p.\n+\t* cfgexpand.cc (expand_call_stmt): Clear cfun->calls_setjmp\n+\ttemporarily if the call is not control-altering.\n+\t* calls.cc (emit_call_1): Do not add REG_SETJMP if\n+\tcfun->calls_setjmp is not set.  Do not alter cfun->calls_setjmp.\n+\n+2023-02-21  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n+\n+\t* config/xtensa/xtensa.cc (xtensa_call_save_reg): Change to return\n+\ttrue if register A0 (return address register) when -Og is specified.\n+\n 2023-02-20  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/predicates.md"}, {"sha": "e7a865097776ef5f52d6403892e8ba61674c6d61", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3bf22d918021d97ee929d7f0bf18693b08a24e1/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3bf22d918021d97ee929d7f0bf18693b08a24e1/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=c3bf22d918021d97ee929d7f0bf18693b08a24e1", "patch": "@@ -1 +1 @@\n-20230221\n+20230222"}, {"sha": "000360c31df146cc80e3f19b1ccccc5cef83c559", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3bf22d918021d97ee929d7f0bf18693b08a24e1/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3bf22d918021d97ee929d7f0bf18693b08a24e1/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=c3bf22d918021d97ee929d7f0bf18693b08a24e1", "patch": "@@ -1,3 +1,20 @@\n+2023-02-21  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/108830\n+\t* analyzer.opt (fanalyzer-suppress-followups): New option.\n+\t* engine.cc (impl_region_model_context::warn): Terminate the path\n+\tif the diagnostic's terminate_path_p vfunc returns true and\n+\t-fanalyzer-suppress-followups is true (the default).\n+\t(impl_sm_context::warn): Likewise, for both overloads.\n+\t* pending-diagnostic.h (pending_diagnostic::terminate_path_p): New\n+\tvfunc.\n+\t* program-state.cc (program_state::on_edge): Terminate the path if\n+\tthe ctxt requests it during updating the edge.\n+\t* region-model.cc (poisoned_value_diagnostic::terminate_path_p):\n+\tNew vfunc.\n+\t* sm-malloc.cc (null_deref::terminate_path_p): New vfunc.\n+\t(null_arg::terminate_path_p): New vfunc.\n+\n 2023-02-16  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/108806"}, {"sha": "bac136694c8b1a8a471fa91d1cdabc54ac640b8b", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3bf22d918021d97ee929d7f0bf18693b08a24e1/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3bf22d918021d97ee929d7f0bf18693b08a24e1/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=c3bf22d918021d97ee929d7f0bf18693b08a24e1", "patch": "@@ -1,3 +1,23 @@\n+2023-02-21  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* Make-lang.in (D_FRONTEND_OBJS): Add d/location.o.\n+\t* d-lang.cc (d_init_options): Update for new front-end interface.\n+\t(d_post_options): Call Loc::set after handling options.\n+\t* dmd/MERGE: Merge upstream dmd 09faa4eacd.\n+\t* dmd/VERSION: Bump version to v2.102.0-beta.1.\n+\n+2023-02-21  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-codegen.cc (d_build_call): Remove front-end expansion of\n+\tside-effects in a call expression.\n+\t* d-gimplify.cc (d_gimplify_call_expr): Gimplify the callee before its\n+\targuments.\n+\n+2023-02-21  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* decl.cc (DeclVisitor::visit (FuncDeclaration *)): Set\n+\tdoing_semantic_analysis_p before calling functionSemantic3.\n+\n 2023-01-02  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gdc.texi: Bump @copyrights-d year."}, {"sha": "45591f130828c4a578f9bf3ee68cc978ebb817e7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3bf22d918021d97ee929d7f0bf18693b08a24e1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3bf22d918021d97ee929d7f0bf18693b08a24e1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c3bf22d918021d97ee929d7f0bf18693b08a24e1", "patch": "@@ -1,3 +1,12 @@\n+2023-02-21  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/96025\n+\t* parse.cc (check_function_result_typed): Improve type check of\n+\tspecification expression for character length and return status.\n+\t(parse_spec): Use status from above.\n+\t* resolve.cc (resolve_fntype): Prevent use of invalid specification\n+\texpression for character length.\n+\n 2023-02-16  Patrick Palka  <ppalka@redhat.com>\n \n \t* gfortran.h: Mechanically drop static from static inline"}, {"sha": "214daee85bfe76c7e328ff2a575211cde30e3ffd", "filename": "gcc/rust/ChangeLog", "status": "modified", "additions": 839, "deletions": 0, "changes": 839, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3bf22d918021d97ee929d7f0bf18693b08a24e1/gcc%2Frust%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3bf22d918021d97ee929d7f0bf18693b08a24e1/gcc%2Frust%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FChangeLog?ref=c3bf22d918021d97ee929d7f0bf18693b08a24e1", "patch": "@@ -1,3 +1,842 @@\n+2023-02-21  Raiki Tamura  <tamaron1203@gmail.com>\n+\n+\t* backend/rust-builtins.cc (BuiltinsContext::setup_math_fns): New functions.\n+\n+2023-02-21  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* backend/rust-constexpr.cc (get_nth_callarg): Remove function.\n+\t(rs_bind_parameters_in_call): Use CALL_EXPR_ARG instead.\n+\t(potential_constant_expression_1): Likewise.\n+\n+2023-02-21  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* lang.opt: Fix ordering of file.\n+\n+2023-02-21  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* backend/rust-compile-type.cc (TyTyResolveCompile::visit): Remove unused parameters.\n+\t* backend/rust-constexpr.cc (constant_value_1): Likewise.\n+\t(fold_non_dependent_init): Likewise.\n+\t* backend/rust-tree.cc (publicly_uniquely_derived_p): Likewise.\n+\t(instantiation_dependent_expression_p): Likewise.\n+\t(type_has_nontrivial_copy_init): Likewise.\n+\t(is_normal_capture_proxy): Likewise.\n+\t(resolve_nondeduced_context): Likewise.\n+\t(undeduced_auto_decl): Likewise.\n+\t(require_deduced_type): Likewise.\n+\t* checks/errors/privacy/rust-privacy-reporter.cc (PrivacyReporter::visit): Likewise.\n+\t* checks/errors/privacy/rust-reachability.cc (ReachabilityVisitor::visit): Likewise.\n+\t* checks/errors/privacy/rust-visibility-resolver.cc (VisibilityResolver::visit): Likewise.\n+\t* checks/errors/rust-const-checker.cc (ConstChecker::visit): Likewise.\n+\t* checks/errors/rust-unsafe-checker.cc (UnsafeChecker::visit): Likewise.\n+\t* checks/lints/rust-lint-marklive.cc (MarkLive::go): Likewise.\n+\t* checks/lints/rust-lint-unused-var.cc (unused_var_walk_fn): Likewise.\n+\t* expand/rust-macro-builtins.cc (try_expand_single_string_literal): Likewise.\n+\t(try_expand_many_expr): Likewise.\n+\t(parse_single_string_literal): Likewise.\n+\t(MacroBuiltin::assert_handler): Likewise.\n+\t(MacroBuiltin::file_handler): Likewise.\n+\t(MacroBuiltin::column_handler): Likewise.\n+\t(MacroBuiltin::concat_handler): Likewise.\n+\t(MacroBuiltin::env_handler): Likewise.\n+\t(MacroBuiltin::line_handler): Likewise.\n+\t* hir/rust-ast-lower-base.cc (ASTLoweringBase::visit): Likewise.\n+\t(ASTLoweringBase::handle_doc_item_attribute): Likewise.\n+\t* hir/rust-hir-dump.cc (Dump::visit): Likewise.\n+\t* hir/tree/rust-hir-full-test.cc (ConstGenericParam::accept_vis): Likewise.\n+\t* lex/rust-lex.cc (Lexer::parse_utf8_escape): Likewise.\n+\t(Lexer::parse_string): Likewise.\n+\t(Lexer::parse_char_or_lifetime): Likewise.\n+\t* lex/rust-lex.h: Likewise.\n+\t* metadata/rust-export-metadata.cc: Likewise.\n+\t* resolve/rust-ast-resolve-expr.cc (ResolveExpr::visit): Likewise.\n+\t* resolve/rust-ast-resolve-type.cc (ResolveType::visit): Likewise.\n+\t(ResolveTypeToCanonicalPath::visit): Likewise.\n+\t* resolve/rust-ast-verify-assignee.h: Likewise.\n+\t* resolve/rust-early-name-resolver.cc (EarlyNameResolver::visit): Likewise.\n+\t* typecheck/rust-hir-type-check-expr.h: Likewise.\n+\t* typecheck/rust-hir-type-check-item.h: Likewise.\n+\t* typecheck/rust-hir-type-check-pattern.cc (TypeCheckPattern::visit): Likewise.\n+\t* typecheck/rust-tyty-rules.h: Likewise.\n+\t* util/rust-attributes.cc (AttributeChecker::visit): Likewise.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* hir/tree/rust-hir-expr.h: Add const `get_method_name`.\n+\t* hir/tree/rust-hir-full-decls.h (struct GenericArgs): Move from `struct`...\n+\t(class GenericArgs): ...to `class`.\n+\t* hir/tree/rust-hir-path.h (struct GenericArgs): Likewise.\n+\t(class GenericArgs): Clear `type_args` in copy constructor.\n+\t* typecheck/rust-hir-type-check-expr.cc (TypeCheckExpr::visit): Reorder\n+\tdebug print.\n+\t* typecheck/rust-tyty.h: Add default constructors for `SubstitutionArgumentMappings`.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* backend/rust-compile-context.cc (Context::push_closure_context): New function.\n+\t(Context::pop_closure_context): Likewise.\n+\t(Context::insert_closure_binding): Likewise.\n+\t(Context::lookup_closure_binding): Likewise.\n+\t* backend/rust-compile-context.h: Declare new functions and closure mappings.\n+\t* backend/rust-compile-expr.cc (CompileExpr::visit): Visit captures properly.\n+\t(CompileExpr::generate_closure_function): Compile captures properly.\n+\t* backend/rust-compile-resolve-path.cc (ResolvePathRef::resolve): Check for\n+\tclosure bindings.\n+\t* backend/rust-compile-type.cc (TyTyResolveCompile::visit): Compile capture list's\n+\ttypes as well.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* typecheck/rust-hir-type-check-expr.cc (TypeCheckExpr::visit): Pass captures\n+\tproperly to `TyTy::ClosureType` constructor.\n+\t* typecheck/rust-tyty.cc (ClosureType::as_string): Fix string representation.\n+\t(ClosureType::clone): Pass `captures` argument.\n+\t* typecheck/rust-tyty.h: Add `captures` field.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* resolve/rust-ast-resolve-expr.cc (ResolveExpr::visit): Use proper closure\n+\tcontexts.\n+\t* resolve/rust-name-resolver.cc (Scope::lookup_decl_type): New function.\n+\t(Scope::lookup_rib_for_decl): Likewise.\n+\t(Resolver::insert_resolved_name): Insert captured items.\n+\t(Resolver::push_closure_context): New function.\n+\t(Resolver::pop_closure_context): Likewise.\n+\t(Resolver::insert_captured_item): Likewise.\n+\t(Resolver::decl_needs_capture): Likewise.\n+\t(Resolver::get_captures): Likewise.\n+\t* resolve/rust-name-resolver.h: Declare new functions.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* resolve/rust-ast-resolve-expr.cc (ResolveExpr::visit): Add Rib argument.\n+\t(ResolveExpr::resolve_closure_param): Likewise.\n+\t* resolve/rust-ast-resolve-implitem.h: Likewise.\n+\t* resolve/rust-ast-resolve-item.cc (ResolveTraitItems::visit): Likewise.\n+\t(ResolveItem::visit): Likewise.\n+\t* resolve/rust-ast-resolve-pattern.cc (PatternDeclaration::visit): Likewise.\n+\t* resolve/rust-ast-resolve-pattern.h: Likewise.\n+\t* resolve/rust-ast-resolve-stmt.h: Likewise.\n+\t* resolve/rust-ast-resolve-toplevel.h: Likewise.\n+\t* resolve/rust-ast-resolve-type.h: Likewise.\n+\t* resolve/rust-name-resolver.cc (Rib::lookup_decl_type): Likewise.\n+\t(Scope::insert): Likewise.\n+\t(Resolver::insert_builtin_types): Likewise.\n+\t* resolve/rust-name-resolver.h: Likewise.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* resolve/rust-name-resolver.cc (MKBUILTIN_TYPE): Remove macro.\n+\t(Rib::Rib): Remove `mappings` field.\n+\t(Resolver::generate_builtins): Use `setup_builtin` instead of macro.\n+\t(Resolver::setup_builtin): New function.\n+\t* resolve/rust-name-resolver.h: Declare `setup_builtin`, add FIXME\n+\tcomment.\n+\n+2023-02-21  Raiki Tamura  <tamaron1203@gmail.com>\n+\n+\t* lex/rust-lex.cc (Lexer::Lexer): Add `dump_lex` boolean flag.\n+\t(Lexer::skip_token): Dump tokens if flag is enabled.\n+\t(Lexer::dump_and_skip): New function.\n+\t* lex/rust-lex.h: Include optional.h and declare functions.\n+\t* parse/rust-parse-impl.h (Parser::debug_dump_lex_output): Remove old\n+\tunused function.\n+\t* parse/rust-parse.h: Likewise.\n+\t* rust-session-manager.cc (Session::compile_crate): Pass lexer dump\n+\toption to lexer.\n+\t(Session::dump_lex): New function.\n+\t* util/rust-optional.h: Add missing constructor.\n+\n+2023-02-21  Dave  <dme2223@gmail.com>\n+\n+\t* ast/rust-item.h: Remoe default location for Visibility class.\n+\t* parse/rust-parse-impl.h (Parser::parse_visibility): Pass proper location\n+\twhen instantiating visibilities.\n+\n+2023-02-21  Jakub Dupak  <dev@jakubdupak.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): Fix dumping of fn params.\n+\n+2023-02-21  Jakub Dupak  <dev@jakubdupak.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): Remove extraneous string when\n+\tdumping statements.\n+\n+2023-02-21  Jakub Dupak  <dev@jakubdupak.com>\n+\n+\t* ast/rust-ast-dump.cc: Remove unused include.\n+\n+2023-02-21  Jakub Dupak  <dev@jakubdupak.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): Add missing visitor.\n+\t* ast/rust-ast-dump.h: Likewise.\n+\n+2023-02-21  Jakub Dupak  <dev@jakubdupak.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): Add missing visitor.\n+\n+2023-02-21  Jakub Dupak  <dev@jakubdupak.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): Add missing visitor.\n+\n+2023-02-21  Jakub Dupak  <dev@jakubdupak.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): Add missing visitor.\n+\n+2023-02-21  Jakub Dupak  <dev@jakubdupak.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): Add missing visitor.\n+\n+2023-02-21  Jakub Dupak  <dev@jakubdupak.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): Add missing visitor.\n+\n+2023-02-21  Jakub Dupak  <dev@jakubdupak.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): Add missing visitor.\n+\n+2023-02-21  Jakub Dupak  <dev@jakubdupak.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): Add missing visitor.\n+\t* ast/rust-ast-dump.h: Add missing getter declaration.\n+\t* ast/rust-ast-full-test.cc (BareFunctionType::as_string): Fix bare function\n+\tstring representation.\n+\t* ast/rust-type.h (class BareFunctionType): Declare said getter.\n+\n+2023-02-21  Jakub Dupak  <dev@jakubdupak.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): Add missing visitor.\n+\n+2023-02-21  Jakub Dupak  <dev@jakubdupak.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): Add missing tuple type visitor.\n+\n+2023-02-21  Jakub Dupak  <dev@jakubdupak.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): Add missing never type visitor.\n+\n+2023-02-21  Jakub Dupak  <dev@jakubdupak.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): Add missing RawPointer visitor.\n+\n+2023-02-21  Jakub Dupak  <dev@jakubdupak.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): Add missing array visitor\n+\n+2023-02-21  Jakub Dupak  <dev@jakubdupak.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): Add missing slice visitor.\n+\n+2023-02-21  Jakub Dupak  <dev@jakubdupak.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): Add missing visitors.\n+\t* ast/rust-ast-dump.h: Likewise.\n+\t* ast/rust-ast.h: Add `get_lifetime_bounds` method.\n+\t* ast/rust-item.h: Add missing getter for lifetimes.\n+\t* ast/rust-type.h: Likewise.\n+\n+2023-02-21  Jakub Dupak  <dev@jakubdupak.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): Add new reference visitor wrapper.\n+\t* ast/rust-ast-dump.h: Declare it.\n+\t* ast/rust-item.h: Add mutable visibility getters.\n+\n+2023-02-21  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* typecheck/rust-tyty-call.cc (TypeCheckCallExpr::visit): Fix extra call\n+\tto `delete`.\n+\n+2023-02-21  Dave  <dme2223@gmail.com>\n+\n+\t* ast/rust-item.h: Add location member.\n+\t* hir/rust-ast-lower.cc (translate_visibility): Pass location argument.\n+\t* hir/tree/rust-hir-item.h: Fix constructor to accept Location argument.\n+\n+2023-02-21  Raiki Tamura  <tamaron1203@gmail.com>\n+\n+\t* util/rust-lang-item.h: Add handling for `phantom_data` lang item.\n+\n+2023-02-21  Jakub Dupak  <dev@jakubdupak.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): Add handling for unit structures.\n+\n+2023-02-21  Jakub Dupak  <dev@jakubdupak.com>\n+\n+\t* ast/rust-ast-dump.h: Fix documentation.\n+\n+2023-02-21  Jakub Dupak  <dev@jakubdupak.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::go): Use new API.\n+\t(Dump::format_function_param): Refactor.\n+\t(Dump::visit_items_joined_by_separator): New function.\n+\t(Dump::emit_attrib): Refactor.\n+\t(Dump::visit_as_line): New function.\n+\t(Dump::visit_items_as_lines): Likewise.\n+\t(Dump::visit_items_as_block): Likewise.\n+\t(Dump::visit): Use new API.\n+\t(Dump::emit_visibility): Likewise.\n+\t(Dump::emit_indented_string): Likewise.\n+\t(Dump::emit_generic_params): Likewise.\n+\t(Dump::format_tuple_field): Likewise.\n+\t(Dump::format_struct_field): Likewise.\n+\t(Dump::format_function_common): Likewise.\n+\t(Dump::visit_function_common): Likewise.\n+\t* ast/rust-ast-dump.h: Declare new functions and add documentation.\n+\n+2023-02-21  Jakub Dupak  <dev@jakubdupak.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): Add new visit function for overloading.\n+\t* ast/rust-ast-dump.h: Add documentation for layer.\n+\n+2023-02-21  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* backend/rust-builtins.cc (BuiltinsContext::setup_atomic_fns): Declare atomic\n+\tload intrinsics.\n+\t* backend/rust-compile-intrinsic.cc (atomic_load_handler_inner): New handler.\n+\t(atomic_load_handler): Likewise.\n+\t(unchecked_op_handler): Remove `static` function qualifier.\n+\t(build_atomic_builtin_name): Handle load intrinsics.\n+\t(atomic_store_handler_inner): New handler.\n+\n+2023-02-21  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* backend/rust-compile-intrinsic.cc (check_for_basic_integer_type): New function.\n+\t(build_atomic_builtin_name): Use HIR Type instead of `tree`.\n+\t(atomic_store_handler_inner): Cleanup error handling.\n+\t(unchecked_op_inner): Likewise.\n+\n+2023-02-21  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* backend/rust-compile-intrinsic.cc (wrapping_op_handler): Refactor to return\n+\tan `std::function`.\n+\t(wrapping_op_handler_inner): Rename.\n+\t(wrapping_add_handler): Remove function.\n+\t(wrapping_sub_handler): Likewise.\n+\t(wrapping_mul_handler): Likewise.\n+\n+2023-02-21  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* backend/rust-compile-intrinsic.cc (is_basic_integer_type): New function.\n+\t(unchecked_op_inner): New handler.\n+\t(unchecked_op_handler): New handler.\n+\n+2023-02-21  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* backend/rust-builtins.cc (BuiltinsContext::setup_atomic_fns): New function.\n+\t(BuiltinsContext::setup): Call `setup_atomic_fns`.\n+\t* backend/rust-builtins.h: Declare `setup_atomic_fns`.\n+\t* backend/rust-compile-intrinsic.cc (atomic_store_handler_inner): New function.\n+\t(atomic_store_handler): New handler.\n+\t(make_unsigned_long_tree): Add helper around making unsigned long trees.\n+\t(prefetch_data_handler): Use `make_unsigned_long_tree`.\n+\t(build_atomic_builtin_name): New function.\n+\n+2023-02-21  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* backend/rust-constexpr.cc (build_anon_member_initialization): Workaround uninitialized\n+\tvalues.\n+\t(build_data_member_initialization): Likewise.\n+\n+2023-02-21  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* backend/rust-compile-intrinsic.cc (sorry_handler): New intrinsic handler.\n+\n+2023-02-21  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* expand/rust-macro-builtins.cc (MacroBuiltin::assert): Rename to...\n+\t(MacroBuiltin::assert_handler): ..this.\n+\t(MacroBuiltin::file): Rename to...\n+\t(MacroBuiltin::file_handler): ..this.\n+\t(MacroBuiltin::column): Rename to...\n+\t(MacroBuiltin::column_handler): ..this.\n+\t(MacroBuiltin::include_bytes): Rename to...\n+\t(MacroBuiltin::include_bytes_handler): ..this.\n+\t(MacroBuiltin::include_str): Rename to...\n+\t(MacroBuiltin::include_str_handler): ..this.\n+\t(MacroBuiltin::compile_error): Rename to...\n+\t(MacroBuiltin::compile_error_handler): ..this.\n+\t(MacroBuiltin::concat): Rename to...\n+\t(MacroBuiltin::concat_handler): ..this.\n+\t(MacroBuiltin::env): Rename to...\n+\t(MacroBuiltin::env_handler): ..this.\n+\t(MacroBuiltin::cfg): Rename to...\n+\t(MacroBuiltin::cfg_handler): ..this.\n+\t(MacroBuiltin::include): Rename to...\n+\t(MacroBuiltin::include_handler): ..this.\n+\t(MacroBuiltin::line): Rename to...\n+\t(MacroBuiltin::line_handler): ..this.\n+\t* expand/rust-macro-builtins.h: Rename all handlers.\n+\t* util/rust-hir-map.cc (Mappings::insert_macro_def): Use new handler\n+\tnames.\n+\n+2023-02-21  Simon Cook  <simon.cook@embecosm.com>\n+\n+\t* util/rust-inline-visitor.h: Remove some offending system includes.\n+\n+2023-02-21  YizhePKU  <yizhe@pku.edu.cn>\n+\n+\t* util/rust-inline-visitor.h: New file.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* backend/rust-compile-expr.cc (CompileExpr::visit): Refactor checking of closures.\n+\t(CompileExpr::generate_possible_fn_trait_call): New function.\n+\t* backend/rust-compile-expr.h: Declare `generate_possible_fn_trait_call`.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* typecheck/rust-tyty-bounds.cc (TypeCheckBase::get_predicate_from_bound): Add missing\n+\timplementation.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* Make-lang.in: Compile rust-ast-lower-type.cc.\n+\t* ast/rust-path.h: Add `get_locus` method to `TypePathFunction`.\n+\t* hir/rust-ast-lower-base.cc (ASTLowerTypePath::visit): Move implementation to\n+\trust-ast-lower-type.cc.\n+\t(ASTLowerQualifiedPathInType::visit): Likewise.\n+\t(ASTLoweringType::visit): Likewise.\n+\t* hir/rust-ast-lower-type.h: Move implementations to source file.\n+\t* hir/tree/rust-hir-path.h: Likewise.\n+\t* hir/rust-ast-lower-type.cc: New file.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* resolve/rust-ast-resolve-type.cc (ResolveRelativeTypePath::go): Add missing handling of\n+\tfunction case.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* backend/rust-compile-context.h: Add new functions: `insert_closure_decl` and\n+\t`lookup_closure_decl`.\n+\t* backend/rust-compile-expr.cc (CompileExpr::visit): Start compiling Closures properly.\n+\t(CompileExpr::generate_closure_function): New function.\n+\t(CompileExpr::generate_closure_fntype): Likewise.\n+\t* backend/rust-compile-expr.h: Declare `generate_closure_function` and\n+\t`generate_closure_fntype`.\n+\t* backend/rust-compile-type.cc (TyTyResolveCompile::visit): Visit closure types properly.\n+\t* backend/rust-mangle.cc (legacy_mangle_name): Add support for closures.\n+\t* backend/rust-tree.h (RS_CLOSURE_FLAG): Add new tree macro.\n+\t(RS_CLOSURE_TYPE_P): And checking for it on tree nodes.\n+\t* typecheck/rust-tyty.cc (ClosureType::is_equal): Add implementation.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* hir/tree/rust-hir-expr.h: Add `get_params` method.\n+\t* typecheck/rust-hir-type-check-expr.cc (TypeCheckExpr::visit): Typecheck closure nodes.\n+\t(TypeCheckExpr::resolve_fn_trait_call): New function.\n+\t* typecheck/rust-hir-type-check-expr.h: Declare `resolve_fn_trait_call` and\n+\t`resolve_possible_fn_trait_call_method_name`.\n+\t* typecheck/rust-hir-type-check.h: Declare `get_context_type`.\n+\t* typecheck/rust-tyctx.cc (TypeCheckContextItem::get_context_type): New function.\n+\t* typecheck/rust-tyty-cmp.h: Visit closures properly.\n+\t* typecheck/rust-tyty-rules.h: Likewise.\n+\t* typecheck/rust-tyty.cc (BaseType::bounds_compatible): Add commented out assertin.\n+\t(ClosureType::as_string): Implement it.\n+\t(ClosureType::clone): Fix closure cloning.\n+\t(ClosureType::setup_fn_once_output): New function.\n+\t* typecheck/rust-tyty.h: Improve `ClosureType` class and declare `setup_fn_once_output`.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* checks/errors/rust-const-checker.cc (ConstChecker::visit): Visit closures properly.\n+\t* checks/errors/rust-unsafe-checker.cc (UnsafeChecker::visit): Likewise.\n+\t* checks/lints/rust-lint-marklive.h: Likewise.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* typecheck/rust-hir-type-check-expr.cc (TypeCheckExpr::visit): Simplify method\n+\tcall type checking \tby removing visitor and instead using one static cast. Use the\n+\tnew interface.\n+\t* typecheck/rust-tyty-call.cc (TypeCheckMethodCallExpr::visit): Likewise.\n+\t(TypeCheckMethodCallExpr::go): Likewise.\n+\t(TypeCheckMethodCallExpr::check): Likewise.\n+\t* typecheck/rust-tyty-call.h (class TypeCheckMethodCallExpr): Likewise.\n+\t(class Argument): Likewise.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* resolve/rust-ast-resolve-expr.cc (ResolveExpr::visit): Visit closure properly when\n+\tname resolving.\n+\t(ResolveExpr::resolve_closure_param): Implement closure name resolving.\n+\t* resolve/rust-ast-resolve-expr.h: Declare visitors for closure types.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* hir/rust-ast-lower-pattern.cc (ASTLoweringPattern::ASTLoweringPattern):\n+\tImprove formatting.\n+\t(ASTLoweringPattern::translate): Likewise.\n+\t* hir/rust-ast-lower-pattern.h: Likewise.\n+\t* resolve/rust-ast-resolve-expr.h: Likewise.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* Make-lang.in: Add new object file for expression lowering.\n+\t* ast/rust-expr.h: Move implementation of expr lowering to source file.\n+\t* backend/rust-compile-block.h: Likewise.\n+\t* backend/rust-compile-expr.cc (CompileExpr::visit): Likewise.\n+\t* backend/rust-compile-expr.h: Likewise.\n+\t* checks/errors/privacy/rust-privacy-reporter.cc (PrivacyReporter::visit): Likewise.\n+\t* checks/errors/privacy/rust-privacy-reporter.h: Likewise.\n+\t* checks/errors/rust-const-checker.cc (ConstChecker::visit): Likewise.\n+\t* checks/errors/rust-const-checker.h: Likewise.\n+\t* checks/errors/rust-unsafe-checker.cc (UnsafeChecker::visit): Likewise.\n+\t* checks/errors/rust-unsafe-checker.h: Likewise.\n+\t* hir/rust-ast-lower-base.h: Likewise.\n+\t* hir/rust-ast-lower-expr.h (RUST_AST_LOWER_EXPR): Likewise.\n+\t* hir/rust-ast-lower.cc (ASTLoweringBase::lower_closure_param): Likewise.\n+\t* hir/rust-hir-dump.cc (Dump::visit): Likewise.\n+\t* hir/rust-hir-dump.h: Likewise.\n+\t* hir/tree/rust-hir-expr.h (class ClosureExpr): Likewise.\n+\t(class ClosureExprInner): Likewise.\n+\t(class ClosureExprInnerTyped): Likewise.\n+\t* hir/tree/rust-hir-full-decls.h (class ClosureExprInner): Likewise.\n+\t(class ClosureExprInnerTyped): Likewise.\n+\t* hir/tree/rust-hir-full-test.cc (ClosureExprInnerTyped::as_string): Likewise.\n+\t(ClosureExprInner::as_string): Likewise.\n+\t(ClosureExprInner::accept_vis): Likewise.\n+\t(ClosureExpr::accept_vis): Likewise.\n+\t(ClosureExprInnerTyped::accept_vis): Likewise.\n+\t* hir/tree/rust-hir-visitor.h: Likewise.\n+\t* hir/tree/rust-hir.h (class Expr): Likewise.\n+\t* typecheck/rust-hir-type-check-expr.cc (TypeCheckExpr::visit): Likewise.\n+\t* typecheck/rust-hir-type-check-expr.h: Likewise.\n+\t* hir/rust-ast-lower-expr.cc: New file.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* util/rust-lang-item.h: Add handling for `fn_once_output`.\n+\n+2023-02-21  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* ast/rust-ast-fragment.cc (Fragment::Fragment): Add better APIs.\n+\t(Fragment::complete): New function.\n+\t(Fragment::unexpanded): New function.\n+\t* ast/rust-ast-fragment.h: Declare new APIs and add documentation.\n+\t* expand/rust-attribute-visitor.h: Use new Fragment API.\n+\t* expand/rust-macro-builtins.cc (MacroBuiltin::file): Likewise.\n+\t(MacroBuiltin::column): Likewise.\n+\t(MacroBuiltin::include_bytes): Likewise.\n+\t(MacroBuiltin::include_str): Likewise.\n+\t(MacroBuiltin::concat): Likewise.\n+\t(MacroBuiltin::env): Likewise.\n+\t(MacroBuiltin::cfg): Likewise.\n+\t(MacroBuiltin::include): Likewise.\n+\t(MacroBuiltin::line): Likewise.\n+\t* expand/rust-macro-expand.cc (parse_many): Likewise.\n+\t(transcribe_expression): Likewise.\n+\t(transcribe_type): Likewise.\n+\t* expand/rust-macro-expand.h (struct MacroExpander): Likewise.\n+\n+2023-02-21  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* ast/rust-ast.h (class ASTFragment): Remove old ASTFragment class.\n+\t* ast/rust-macro.h (class MacroRulesDefinition): Use new Fragment API.\n+\t* expand/rust-attribute-visitor.h: Likewise.\n+\t* expand/rust-macro-builtins.cc (macro_end_token): Likewise.\n+\t(MacroBuiltin::assert): Likewise.\n+\t(MacroBuiltin::file): Likewise.\n+\t(MacroBuiltin::column): Likewise.\n+\t(MacroBuiltin::include_bytes): Likewise.\n+\t(MacroBuiltin::include_str): Likewise.\n+\t(MacroBuiltin::compile_error): Likewise.\n+\t(MacroBuiltin::concat): Likewise.\n+\t(MacroBuiltin::env): Likewise.\n+\t(MacroBuiltin::cfg): Likewise.\n+\t(MacroBuiltin::include): Likewise.\n+\t(MacroBuiltin::line): Likewise.\n+\t* expand/rust-macro-builtins.h: Likewise.\n+\t* expand/rust-macro-expand.cc (MacroExpander::expand_decl_macro): Likewise.\n+\t(MacroExpander::expand_invoc): Likewise.\n+\t(MacroExpander::match_repetition): Likewise.\n+\t(parse_many): Likewise.\n+\t(transcribe_many_items): Likewise.\n+\t(transcribe_many_ext): Likewise.\n+\t(transcribe_many_trait_items): Likewise.\n+\t(transcribe_many_impl_items): Likewise.\n+\t(transcribe_many_trait_impl_items): Likewise.\n+\t(transcribe_expression): Likewise.\n+\t(transcribe_type): Likewise.\n+\t(transcribe_on_delimiter): Likewise.\n+\t(tokens_to_str): Likewise.\n+\t* expand/rust-macro-expand.h (struct MacroExpander): Likewise.\n+\t* util/rust-hir-map.cc (Mappings::insert_macro_def): Likewise.\n+\n+2023-02-21  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* Make-lang.in: Add `rust-ast-fragment.o` object file.\n+\t* ast/rust-ast-fragment.cc: New file.\n+\t* ast/rust-ast-fragment.h: New file.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* typecheck/rust-hir-trait-resolve.cc (TraitResolver::resolve_trait): Check if a\n+\ttrait query is currently in progress.\n+\t* typecheck/rust-hir-type-check.h (class TraitQueryGuard): Add helpers around\n+\tchecking for trait queries and inserting them.\n+\n+2023-02-21  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): Add missing visitors for macro definition dumping.\n+\t(get_delimiters): New function.\n+\t* ast/rust-ast-dump.h: Declare `get_delimiters` and add documentation.\n+\t* ast/rust-macro.h: Add `get_token_tree` method.\n+\n+2023-02-21  Jakub Dupak  <dev@jakubdupak.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): Properly handle unloaded modules.\n+\n+2023-02-21  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): Fix formatting when dumping modules.\n+\n+2023-02-21  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): Dump items in modules properly.\n+\n+2023-02-21  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* ast/rust-ast-dump.cc: Emit visibility when dumping items.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* hir/rust-ast-lower-base.h (class ItemWrapper): New class.\n+\t* hir/rust-ast-lower-base.cc (ASTLoweringBase::handle_outer_attributes): Use\n+\t`ItemWrapper` class.\n+\t(ASTLoweringBase::handle_doc_item_attribute): Likewise.\n+\t(ASTLoweringBase::handle_lang_item_attribute): Likewise.\n+\t* hir/rust-ast-lower-implitem.h: Check outer attributes on items.\n+\t* hir/tree/rust-hir-item.h: Add `get_trait_locus` methods.\n+\t* hir/tree/rust-hir.h: Likewise.\n+\t* util/rust-hir-map.h: Add defId mappings and associated functions.\n+\t* util/rust-hir-map.cc (Mappings::insert_defid_mapping): Implement insertion to said\n+\tmappings.\n+\t(Mappings::lookup_trait_item_defid): And looking up said mappings.\n+\n+2023-02-21  Jakub Dupak  <dev@jakubdupak.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): Add code for dumping type aliases.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* typecheck/rust-hir-trait-resolve.cc (TraitResolver::TraitResolver): Do not nullptr init\n+\t`resolved_trait_reference` anymore.\n+\t(TraitResolver::resolve_path): Simplify function and rename to...\n+\t(TraitResolver::resolve_path_to_trait): ...this.\n+\t(TraitResolver::lookup_path): Use new interface.\n+\t* typecheck/rust-hir-trait-resolve.h (class TraitResolver): Do not inherit `HIRFullVisitor`\n+\tclass anymore.\n+\n+2023-02-21  David Faust  <david.faust@oracle.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): Add dump for RangeExprs.\n+\n+2023-02-21  David Faust  <david.faust@oracle.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): Add dump for, BorrowExpr, DereferenceExpr,\n+\tErrorPropagationExpr, NegationExpr, TypeCastExpr and GroupedExpr.\n+\n+2023-02-21  David Faust  <david.faust@oracle.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): Add dump code for ArrayExpr.\n+\n+2023-02-21  David Faust  <david.faust@oracle.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): Add dumps for ComparisonExpr and\n+\tLazyBooleanExpr.\n+\n+2023-02-21  David Faust  <david.faust@oracle.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): Fix IfExpr formatting.\n+\n+2023-02-21  David Faust  <david.faust@oracle.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): Fix block formatting.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* typecheck/rust-autoderef.cc: Add support for multiple resolution candidates.\n+\t* typecheck/rust-hir-dot-operator.cc (MethodResolver::MethodResolver): Edit\n+\t`try_result` field and change constructor.\n+\t(MethodResolver::Probe): Return set of candidates instead of singular candidate.\n+\t(MethodResolver::select): Add better implementation to account for multiple\n+\tcandidates.\n+\t* typecheck/rust-hir-dot-operator.h (struct MethodCandidate): Overload comparison\n+\toperator in order to store them in `std::set`.\n+\t* typecheck/rust-hir-inherent-impl-overlap.h: Do not fail assertion on missing type.\n+\t* typecheck/rust-hir-type-check-expr.cc (TypeCheckExpr::visit): Adapt code to use\n+\tmultiple candidates.\n+\t* typecheck/rust-tyty.cc (set_cmp_autoderef_mode): Add code to handle automatic\n+\tderefs properly.\n+\t(reset_cmp_autoderef_mode): Add helper function to reset said mode.\n+\t* typecheck/rust-tyty.h (set_cmp_autoderef_mode): Declare function.\n+\t(reset_cmp_autoderef_mode): Likewise.\n+\t* typecheck/rust-tyty-cmp.h: Add handling of `autoderef_cmp_flag`\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* util/rust-abi.cc (get_abi_from_string): Add missing \"rust-call\"\n+\tpossibility for ABI variant.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* util/rust-lang-item.h: Add `fn_once` lang item.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* backend/rust-compile.cc: Add note about missing support for super\n+\ttraits.\n+\t* typecheck/rust-tyty.cc (BaseType::satisfies_bound): New function.\n+\t(BaseType::bounds_compatible): New function.\n+\t(DynamicObjectType::get_object_items): New function.\n+\t* typecheck/rust-hir-trait-ref.h: Use new API to perform type resolution\n+\ton dyn objects.\n+\n+2023-02-21  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* Make-lang.in: Compile early name resolver.\n+\t* expand/rust-attribute-visitor.cc (AttrVisitor::visit): Move macro\n+\tname resolution.\n+\t* expand/rust-macro-builtins.cc (try_expand_macro_expression): Run ENR\n+\twhen recursively expanding macros.\n+\t* expand/rust-macro-expand.cc (MacroExpander::expand_invoc): No longer\n+\tperform name resolution in `expand_invoc`.\n+\t* expand/rust-macro-expand.h (struct MacroExpander): Keep ENR within\n+\tMacroExpander.\n+\t* rust-session-manager.cc (Session::expansion): Run ENR.\n+\t* resolve/rust-early-name-resolver.cc: New file.\n+\t* resolve/rust-early-name-resolver.h: New file.\n+\n+2023-02-21  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* ast/rust-path.h: Add `accept_vis` method to `GenericArg` class.\n+\n+2023-02-21  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* resolve/rust-ast-resolve-item.cc (ResolveItem::visit): Add note for\n+\tglob import resolving.\n+\n+2023-02-21  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* util/rust-hir-map.h: Add new mappings.\n+\t* util/rust-hir-map.cc (Mappings::insert_macro_invocation): Add insertion\n+\tfunction into mappings.\n+\t(Mappings::lookup_macro_invocation): Add lookup function for mappings.\n+\n+2023-02-21  Marc Poulhi\u00e8s  <dkm@kataplop.net>\n+\n+\t* parse/rust-parse-impl.h (Parser::parse_stmt_or_expr_without_block):\n+\tCheck if `expr` is valid after parsing it.\n+\n+2023-02-21  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* backend/rust-builtins.cc (BuiltinsContext::setup): Declare prefetch\n+\tintrinsics.\n+\t* backend/rust-compile-intrinsic.cc (enum class Prefetch): Add kinds of\n+\tprefetch intrinsics.\n+\t(prefetch_data_handler): New function.\n+\t(prefetch_read_data): Likewise.\n+\t(prefetch_write_data): Likewise.\n+\n+2023-02-21  David Faust  <david.faust@oracle.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): Fill empty functions for\n+\tstructs, enums and unions.\n+\n+2023-02-21  David Faust  <david.faust@oracle.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::format_tuple_field): New.\n+\t(Dump::format_struct_field): New.\n+\t* ast/rust-ast-dump.h (format_tuple_field): New.\n+\t(format_struct_field): New.\n+\n+2023-02-21  David Faust  <david.faust@oracle.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): move generic params dump ...\n+\t(Dump::emit_generic_params): ... here.\n+\t* ast/rust-ast-dump.h (emit_generic_params): New.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* typecheck/rust-hir-trait-ref.h (lookup_trait_item): Add lookup\n+\tin super_trait.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* backend/rust-compile-expr.cc\n+\t(CompileExpr::resolve_method_address): Use auto and minor change\n+\tin candidate init.\n+\t* typecheck/rust-hir-type-check-path.cc\n+\t(TypeCheckExpr::resolve_segments): Likewise.\n+\t* typecheck/rust-hir-type-check-type.cc: Likewise.\n+\t* backend/rust-compile-resolve-path.cc\n+\t(HIRCompileBase::query_compile): Likewise. Removecall to\n+\tset_ty_ref.\n+\t* typecheck/rust-hir-path-probe.h (struct PathProbeCandidate): Add\n+\tlocus initializer in ctor, implement get_defid.\n+\t(class PathProbeType::Probe): return a set instead of vector.\n+\tAdjust class impl.\n+\t(class ReportMultipleCandidateError): Do not inherit from\n+\tHIRImplVisitor anymore and remove corresponding impl. Adjust for\n+\tchange in Probe. Simplify Report handling.\n+\t(class PathProbeImplTrait::Probe): Adjust return type.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* typecheck/rust-hir-type-check-enumitem.cc\n+\t(TypeCheckEnumItem::visit): Adjust VariantDef ctor calls with\n+\tDefID.\n+\t* typecheck/rust-hir-type-check-item.cc (TypeCheckItem::visit):\n+\tLikewise.\n+\t* typecheck/rust-tyty.h (VariantDef): Add defid parameter to ctor.\n+\n+2023-02-21  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* Make-lang.in: Add `rust-builtins.o` as target\n+\t* backend/rust-builtins.h: Refactor to new file.\n+\t* backend/rust-builtins.cc: New file.\n+\n+2023-02-21  David Faust  <david.faust@oracle.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): Implement visitor for If\n+\texpressions.\n+\n+2023-02-21  David Faust  <david.faust@oracle.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): Dump assignment and compound\n+\tassignment expressions.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* typecheck/rust-hir-type-check-base.cc (TypeCheckBase::query_type):\n+\tCheck for recursive queries.\n+\t* typecheck/rust-hir-type-check.h: New functions: `query_completed`,\n+\t`query_in_progress`, `insert_query`.\n+\t* typecheck/rust-tyty-bounds.cc (TypeBoundsProbe::scan): Use `query_type` API.\n+\n+2023-02-21  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::emit_visibility): New function.\n+\t(Dump::visit): Call into `emit_visibility`.\n+\t(Dump::format_function_common): Likewise.\n+\t* ast/rust-ast-dump.h: Declare `emit_visibility`.\n+\n+2023-02-21  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* ast/rust-item.h: Rename get_public_vis_type.\n+\t* hir/rust-ast-lower.cc (translate_visibility): Use new name.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* resolve/rust-name-resolver.h: Add miscellenaous item mappings.\n+\t* resolve/rust-name-resolver.cc (Resolver::insert_resolved_misc): Use\n+\tnew mappings.\n+\t(Resolver::lookup_resolved_misc): Likewise.\n+\t* typecheck/rust-hir-type-check-path.cc (TypeCheckExpr::resolve_segments):\n+\tAdapt function to insert into miscelleanous mappings.\n+\t* checks/lints/rust-lint-marklive.cc (MarkLive::find_ref_node_id):\n+\tAllow lookup in miscelleanous mappings in mark-live phase.\n+\n 2023-02-20  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* backend/rust-tree.cc: Include memmodel.h."}, {"sha": "31bd634b31c7db862e6f469916236e3e9ecf4388", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 168, "deletions": 0, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3bf22d918021d97ee929d7f0bf18693b08a24e1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3bf22d918021d97ee929d7f0bf18693b08a24e1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c3bf22d918021d97ee929d7f0bf18693b08a24e1", "patch": "@@ -1,3 +1,171 @@\n+2023-02-21  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/108830\n+\t* gcc.dg/analyzer/attribute-nonnull.c: Update for\n+\t-Wanalyzer-use-of-uninitialized-value terminating analysis along\n+\ta path.\n+\t* gcc.dg/analyzer/call-summaries-2.c: Likewise.\n+\t* gcc.dg/analyzer/data-model-1.c: Likewise.\n+\t* gcc.dg/analyzer/data-model-5.c: Likewise.\n+\t* gcc.dg/analyzer/doom-s_sound-pr108867.c: New test.\n+\t* gcc.dg/analyzer/memset-CVE-2017-18549-1.c: Add\n+\t-fno-analyzer-suppress-followups.\n+\t* gcc.dg/analyzer/null-deref-pr108830.c: New test.\n+\t* gcc.dg/analyzer/pipe-1.c: Add -fno-analyzer-suppress-followups.\n+\t* gcc.dg/analyzer/pipe-void-return.c: Likewise.\n+\t* gcc.dg/analyzer/pipe2-1.c: Likewise.\n+\t* gcc.dg/analyzer/pr101547.c: Update for\n+\t-Wanalyzer-use-of-uninitialized-value terminating analysis along\n+\ta path.\n+\t* gcc.dg/analyzer/pr101875.c: Likewise.\n+\t* gcc.dg/analyzer/pr104224-split.c: New test, based on...\n+\t* gcc.dg/analyzer/pr104224.c: Add\n+\t-fno-analyzer-suppress-followups.\n+\t* gcc.dg/analyzer/realloc-2.c: Add\n+\t-fno-analyzer-suppress-followups.\n+\t* gcc.dg/analyzer/realloc-3.c: Likewise.\n+\t* gcc.dg/analyzer/realloc-5.c: Likewise.\n+\t* gcc.dg/analyzer/stdarg-1-ms_abi.c: Likewise.\n+\t* gcc.dg/analyzer/stdarg-1-sysv_abi.c: Likewise.\n+\t* gcc.dg/analyzer/stdarg-1.c: Likewise.\n+\t* gcc.dg/analyzer/symbolic-1.c: Likewise.\n+\t* gcc.dg/analyzer/symbolic-7.c: Update for\n+\t-Wanalyzer-use-of-uninitialized-value terminating analysis along a\n+\tpath.\n+\t* gcc.dg/analyzer/uninit-4.c: Likewise.\n+\t* gcc.dg/analyzer/uninit-8.c: New test.\n+\t* gcc.dg/analyzer/uninit-pr94713.c: Update for\n+\t-Wanalyzer-use-of-uninitialized-value terminating analysis along a\n+\tpath.\n+\t* gcc.dg/analyzer/zlib-6a.c: Add -fno-analyzer-suppress-followups.\n+\n+2023-02-21  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/96025\n+\t* gfortran.dg/pr96025.f90: New test.\n+\n+2023-02-21  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* gdc.dg/simd2a.d: Update.\n+\t* gdc.dg/simd2b.d: Update.\n+\t* gdc.dg/simd2c.d: Update.\n+\t* gdc.dg/simd2d.d: Update.\n+\t* gdc.dg/simd2e.d: Update.\n+\t* gdc.dg/simd2f.d: Update.\n+\t* gdc.dg/simd2g.d: Update.\n+\t* gdc.dg/simd2h.d: Update.\n+\t* gdc.dg/simd2i.d: Update.\n+\t* gdc.dg/simd2j.d: Update.\n+\n+2023-02-21  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* gdc.dg/ctfeintrinsics.d: New test.\n+\n+2023-02-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/108691\n+\t* gcc.dg/pr108691.c: New testcase.\n+\n+2023-02-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/108793\n+\t* gcc.dg/torture/pr108793.c: New testcase.\n+\n+2023-02-21  Raiki Tamura  <tamaron1203@gmail.com>\n+\n+\t* rust/compile/torture/intrinsics-math.rs: New test.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* rust/debug/chartype.rs: Skip testcases on Darwin architectures.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* rust/execute/torture/closure3.rs: New test.\n+\n+2023-02-21  Raiki Tamura  <tamaron1203@gmail.com>\n+\n+\t* rust/compile/torture/phantom_data.rs: New test.\n+\n+2023-02-21  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* rust/compile/torture/intrinsics-3.rs:\n+\t* rust/execute/torture/atomic_load.rs: New test.\n+\n+2023-02-21  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* rust/compile/torture/intrinsics-5.rs: Fix error message.\n+\n+2023-02-21  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* rust/compile/torture/intrinsics-6.rs: New test.\n+\t* rust/compile/torture/intrinsics-7.rs: New test.\n+\n+2023-02-21  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* rust/compile/torture/intrinsics-4.rs: New test.\n+\t* rust/compile/torture/intrinsics-5.rs: New test.\n+\t* rust/execute/torture/atomic_store.rs: New test.\n+\n+2023-02-21  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* rust/compile/torture/intrinsics-3.rs: New test.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* rust/execute/torture/closure2.rs: New test.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* rust/execute/torture/closure1.rs: New test.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* rust/compile/issue-1589.rs: New test.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* rust/compile/generics7.rs: Fix test with missing assertion.\n+\t* rust/execute/torture/operator_overload_9.rs: Fix test assertion.\n+\n+2023-02-21  Marc Poulhi\u00e8s  <dkm@kataplop.net>\n+\n+\t* rust/compile/missing_closing_paren.rs: New test.\n+\n+2023-02-21  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* rust/execute/torture/prefetch_data.rs: New test.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* rust/compile/torture/issue-1555.rs: New test.\n+\n+2023-02-21  Faisal Abbas  <faisal.abbas@elastica.co>\n+\n+\t* rust/compile/const9.rs: New test.\n+\n+2023-02-21  Philip Herron  <philip.herron@embecosm.com>\n+\n+\t* rust/compile/issue-1272.rs: New test.\n+\n+2023-02-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/108868\n+\t* gcc.dg/pr108868.c: New testcase.\n+\n+2023-02-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/108855\n+\t* gcc.dg/pr108855.c: New testcase.\n+\n+2023-02-21  Richard Biener  <rguenther@suse.de>\n+\n+\tRevert:\n+\t2023-02-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/108691\n+\t* gcc.dg/pr108691.c: New testcase.\n+\n 2023-02-20  Jakub Jelinek  <jakub2redhat.com>\n \n \tPR target/108862"}, {"sha": "8399862344de22bc45fc71f053d1427ec20ac82b", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3bf22d918021d97ee929d7f0bf18693b08a24e1/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3bf22d918021d97ee929d7f0bf18693b08a24e1/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=c3bf22d918021d97ee929d7f0bf18693b08a24e1", "patch": "@@ -1,3 +1,33 @@\n+2023-02-21  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* src/MERGE: Merge upstream phobos e5a521ab2.\n+\n+2023-02-21  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* libdruntime/MERGE: Merge upstream druntime 09faa4eacd.\n+\t* src/MERGE: Merge upstream phobos 13ef27a56.\n+\t* testsuite/libphobos.exceptions/refcounted.d: Add test for chained\n+\treference counted exceptions.\n+\t* testsuite/libphobos.shared/finalize.d: Add dg-warning for deprecated\n+\tfactory interfaces.\n+\t* testsuite/libphobos.gc/issue22843.d: New test.\n+\n+2023-02-21  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* libdruntime/gcc/backtrace.d (simpleErrorCallback): Add @nogc.\n+\t(LibBacktrace.initLibBacktrace): Likewise.\n+\t(LibBacktrace.this): Likewise.\n+\t(UnwindBacktrace.this): Likewise.\n+\t(getBacktrace): Likewise.\n+\t(getBacktraceSymbols): Likewise.\n+\t* libdruntime/gcc/libbacktrace.d.in (backtrace_create_state):\n+\tLikewise.\n+\t(backtrace_full): Likewise.\n+\t(backtrace_simple): Likewise.\n+\t(backtrace_print): Likewise.\n+\t(backtrace_pcinfo): Likewise.\n+\t(backtrace_syminfo): Likewise.\n+\n 2023-02-13  Lorenzo Salvadore  <developer@lorenzosalvadore.it>\n \n \tPR d/107469"}]}