{"sha": "c01fe45120921336cd37363f723fbf04e29b28a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAxZmU0NTEyMDkyMTMzNmNkMzczNjNmNzIzZmJmMDRlMjliMjhhNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-05-30T10:38:00Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-05-30T10:38:00Z"}, "message": "decl.c (gnat_to_gnu_entity): Adjust warning message.\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity): Adjust warning message.\n\tFix nits in comments.\n\t* gcc-interface/misc.c (gnat_init_gcc_eh): Likewise.\n\t* gcc-interface/trans.c (gigi): Likewise.\n\t(Attribute_to_gnu): Likewise.\n\t(Case_Statement_to_gnu): Likewise.\n\t(gnat_to_gnu): Adjust warning message.\n\t* gcc-interface/utils.c (create_var_decl_1): Fix nits in comments.\n\t(build_vms_descriptor32): Likewise.\n\nFrom-SVN: r160048", "tree": {"sha": "6e6e4d7b93573bd22f6892bea0085c055fef83f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e6e4d7b93573bd22f6892bea0085c055fef83f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c01fe45120921336cd37363f723fbf04e29b28a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c01fe45120921336cd37363f723fbf04e29b28a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c01fe45120921336cd37363f723fbf04e29b28a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c01fe45120921336cd37363f723fbf04e29b28a7/comments", "author": null, "committer": null, "parents": [{"sha": "f59292da17890842161b449aac15909dcceeeaaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f59292da17890842161b449aac15909dcceeeaaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f59292da17890842161b449aac15909dcceeeaaf"}], "stats": {"total": 53, "additions": 35, "deletions": 18}, "files": [{"sha": "53a4260eb32446995a6a341d9ddbef2d78d42ae9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01fe45120921336cd37363f723fbf04e29b28a7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01fe45120921336cd37363f723fbf04e29b28a7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c01fe45120921336cd37363f723fbf04e29b28a7", "patch": "@@ -1,3 +1,15 @@\n+2010-05-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Adjust warning message.\n+\tFix nits in comments.\n+\t* gcc-interface/misc.c (gnat_init_gcc_eh): Likewise.\n+\t* gcc-interface/trans.c (gigi): Likewise.\n+\t(Attribute_to_gnu): Likewise.\n+\t(Case_Statement_to_gnu): Likewise.\n+\t(gnat_to_gnu): Adjust warning message.\n+\t* gcc-interface/utils.c (create_var_decl_1): Fix nits in comments.\n+\t(build_vms_descriptor32): Likewise.\n+\n 2010-05-27  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* gcc-interface/decl.c: Pretend to be a backend file by undefining"}, {"sha": "71679fd1cbc8873cec035ddefd25af4cb4cbf34b", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01fe45120921336cd37363f723fbf04e29b28a7/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01fe45120921336cd37363f723fbf04e29b28a7/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=c01fe45120921336cd37363f723fbf04e29b28a7", "patch": "@@ -448,7 +448,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t the regular processing take place, which leaves us with a regular\n \t exception data object for VMS exceptions too.  The condition code\n \t mapping is taken care of by the front end and the bitmasking by the\n-\t runtime library.  */\n+\t run-time library.  */\n       goto object;\n \n     case E_Discriminant:\n@@ -1220,7 +1220,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\tif (TREE_CODE (TYPE_SIZE_UNIT (gnu_alloc_type)) == INTEGER_CST\n \t\t    && TREE_OVERFLOW (TYPE_SIZE_UNIT (gnu_alloc_type))\n \t\t    && !Is_Imported (gnat_entity))\n-\t\t  post_error (\"?Storage_Error will be raised at run-time!\",\n+\t\t  post_error (\"?`Storage_Error` will be raised at run time!\",\n \t\t\t      gnat_entity);\n \n \t\tgnu_expr\n@@ -3713,7 +3713,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \tgnu_type = ptr_void_type_node;\n       else\n \t{\n-\t  /* The runtime representation is the equivalent type.  */\n+\t  /* The run-time representation is the equivalent type.  */\n \t  gnu_type = gnat_to_gnu_type (gnat_equiv_type);\n \t  maybe_present = true;\n \t}"}, {"sha": "a80afbdc80e393a2e9e42db23385c11f6b501737", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01fe45120921336cd37363f723fbf04e29b28a7/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01fe45120921336cd37363f723fbf04e29b28a7/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=c01fe45120921336cd37363f723fbf04e29b28a7", "patch": "@@ -460,10 +460,10 @@ gnat_init_gcc_eh (void)\n      right exception regions.  */\n   using_eh_for_cleanups ();\n \n-  /* Turn on -fexceptions and -fnon-call-exceptions. The first one triggers\n-     the generation of the necessary exception runtime tables. The second one\n-     is useful for two reasons: 1/ we map some asynchronous signals like SEGV\n-     to exceptions, so we need to ensure that the insns which can lead to such\n+  /* Turn on -fexceptions and -fnon-call-exceptions.  The first one triggers\n+     the generation of the necessary exception tables.  The second one is\n+     useful for two reasons: 1/ we map some asynchronous signals like SEGV to\n+     exceptions, so we need to ensure that the insns which can lead to such\n      signals are correctly attached to the exception region they pertain to,\n      2/ Some calls to pure subprograms are handled as libcall blocks and then\n      marked as \"cannot trap\" if the flag is not set (see emit_libcall_block)."}, {"sha": "632862e07003ab04f6adc5d124eb6f86ff41d426", "filename": "gcc/ada/gcc-interface/targtyps.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01fe45120921336cd37363f723fbf04e29b28a7/gcc%2Fada%2Fgcc-interface%2Ftargtyps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01fe45120921336cd37363f723fbf04e29b28a7/gcc%2Fada%2Fgcc-interface%2Ftargtyps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftargtyps.c?ref=c01fe45120921336cd37363f723fbf04e29b28a7", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                                  Body                                    *\n  *                                                                          *\n- *          Copyright (C) 1992-2009, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2010, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *"}, {"sha": "1732069b699b6443f51fb60f64ecdcf5b8d42339", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01fe45120921336cd37363f723fbf04e29b28a7/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01fe45120921336cd37363f723fbf04e29b28a7/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=c01fe45120921336cd37363f723fbf04e29b28a7", "patch": "@@ -358,7 +358,7 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n   void_ftype = build_function_type (void_type_node, NULL_TREE);\n   ptr_void_ftype = build_pointer_type (void_ftype);\n \n-  /* Now declare runtime functions.  */\n+  /* Now declare run-time functions.  */\n   t = tree_cons (NULL_TREE, void_type_node, NULL_TREE);\n \n   /* malloc is a function declaration tree for a function to allocate\n@@ -1683,7 +1683,7 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n \tgnu_result = SUBSTITUTE_PLACEHOLDER_IN_EXPR (gnu_result, gnu_prefix);\n \n \t/* Cache the expression we have just computed.  Since we want to do it\n-\t   at runtime, we force the use of a SAVE_EXPR and let the gimplifier\n+\t   at run time, we force the use of a SAVE_EXPR and let the gimplifier\n \t   create the temporary.  */\n \tif (pa)\n \t  {\n@@ -1930,8 +1930,8 @@ Case_Statement_to_gnu (Node_Id gnat_node)\n       is parenthesized. This still has the Etype of the name, but since it is\n       not a name, para 7 does not apply, and we need to go to the base type.\n       This is the only case where parenthesization affects the dynamic\n-      semantics (i.e. the range of possible values at runtime that is covered\n-      by the others alternative.\n+      semantics (i.e. the range of possible values at run time that is covered\n+      by the others alternative).\n \n       Another exception is if the subtype of the expression is non-static.  In\n       that case, we also have to use the base type.  */\n@@ -2002,7 +2002,7 @@ Case_Statement_to_gnu (Node_Id gnat_node)\n \t    }\n \n \t  /* If the case value is a subtype that raises Constraint_Error at\n-\t     run-time because of a wrong bound, then gnu_low or gnu_high is\n+\t     run time because of a wrong bound, then gnu_low or gnu_high is\n \t     not translated into an INTEGER_CST.  In such a case, we need\n \t     to ensure that the when statement is not added in the tree,\n \t     otherwise it will crash the gimplifier.  */\n@@ -5566,7 +5566,7 @@ gnat_to_gnu (Node_Id gnat_node)\n   /* If the result is a constant that overflowed, raise Constraint_Error.  */\n   if (TREE_CODE (gnu_result) == INTEGER_CST && TREE_OVERFLOW (gnu_result))\n     {\n-      post_error (\"Constraint_Error will be raised at run-time?\", gnat_node);\n+      post_error (\"?`Constraint_Error` will be raised at run time\", gnat_node);\n       gnu_result\n \t= build1 (NULL_EXPR, gnu_result_type,\n \t\t  build_call_raise (CE_Overflow_Check_Failed, gnat_node,"}, {"sha": "f10b788fe1a1dbe62811fafbaf6a5268b14c0339", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01fe45120921336cd37363f723fbf04e29b28a7/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01fe45120921336cd37363f723fbf04e29b28a7/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=c01fe45120921336cd37363f723fbf04e29b28a7", "patch": "@@ -1380,7 +1380,7 @@ create_var_decl_1 (tree var_name, tree asm_name, tree type, tree var_init,\n \n   /* For an external constant whose initializer is not absolute, do not emit\n      debug info.  In DWARF this would mean a global relocation in a read-only\n-     section which runs afoul of the PE-COFF runtime relocation mechanism.  */\n+     section which runs afoul of the PE-COFF run-time relocation mechanism.  */\n   if (extern_flag\n       && constant_p\n       && initializer_constant_valid_p (var_init, TREE_TYPE (var_init))\n@@ -2445,7 +2445,7 @@ build_vms_descriptor32 (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n \t       make_descriptor_field (\"CLASS\", gnat_type_for_size (8, 1),\n \t\t\t\t      record_type, size_int (klass)));\n \n-  /* Of course this will crash at run-time if the address space is not\n+  /* Of course this will crash at run time if the address space is not\n      within the low 32 bits, but there is nothing else we can do.  */\n   pointer32_type = build_pointer_type_for_mode (type, SImode, false);\n "}, {"sha": "f6848fccd788b12f4702892c464697501777459d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01fe45120921336cd37363f723fbf04e29b28a7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01fe45120921336cd37363f723fbf04e29b28a7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c01fe45120921336cd37363f723fbf04e29b28a7", "patch": "@@ -1,3 +1,8 @@\n+2010-05-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/array11.adb: Adjust dg-warning directive.\n+\t* gnat.dg/object_overflow.adb: Likewise.\n+\n 2010-05-29  Sebastian Pop  <sebastian.pop@amd.com>\n \n \tPR middle-end/44306"}, {"sha": "7be61c4b63198fa39b856f7a9fe9f9a1abed756c", "filename": "gcc/testsuite/gnat.dg/array11.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01fe45120921336cd37363f723fbf04e29b28a7/gcc%2Ftestsuite%2Fgnat.dg%2Farray11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01fe45120921336cd37363f723fbf04e29b28a7/gcc%2Ftestsuite%2Fgnat.dg%2Farray11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Farray11.adb?ref=c01fe45120921336cd37363f723fbf04e29b28a7", "patch": "@@ -9,7 +9,7 @@ procedure Array11 is\n   type Arr2 is array (Long_Integer) of aliased Rec; -- { dg-warning \"padded\" }\n \n   A1 : Arr1;\n-  A2 : Arr2; -- { dg-warning \"Storage_Error will be raised\" }\n+  A2 : Arr2; -- { dg-warning \"Storage_Error\" }\n \n begin\n   null;"}, {"sha": "41b6184feacd3204d745501826e1ea9d99f9afec", "filename": "gcc/testsuite/gnat.dg/object_overflow.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01fe45120921336cd37363f723fbf04e29b28a7/gcc%2Ftestsuite%2Fgnat.dg%2Fobject_overflow.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01fe45120921336cd37363f723fbf04e29b28a7/gcc%2Ftestsuite%2Fgnat.dg%2Fobject_overflow.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fobject_overflow.adb?ref=c01fe45120921336cd37363f723fbf04e29b28a7", "patch": "@@ -5,7 +5,7 @@ procedure Object_Overflow is\n   procedure Proc (x : Boolean) is begin null; end;\n \n   type Arr is array(Long_Integer) of Boolean;\n-  Obj : Arr; -- { dg-warning \"Storage_Error will be raised\" }\n+  Obj : Arr; -- { dg-warning \"Storage_Error\" }\n \n begin\n   Obj(1) := True;"}]}