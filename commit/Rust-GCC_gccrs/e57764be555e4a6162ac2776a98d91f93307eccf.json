{"sha": "e57764be555e4a6162ac2776a98d91f93307eccf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU3NzY0YmU1NTVlNGE2MTYyYWMyNzc2YTk4ZDkxZjkzMzA3ZWNjZg==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@gmail.com", "date": "2020-02-13T10:32:05Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gmail.com", "date": "2020-02-13T10:32:05Z"}, "message": "[ARC] Use TARGET_INSN_COST.\n\nTARGET_INSN_COST gives us a better control over the instruction costs\nthan classical RTX_COSTS.  A simple cost scheme is in place for the\ntime being, when optimizing for size, the cost is given by the\ninstruction length. When optimizing for speed, the cost is 1 for any\nrecognized instruction, and 2 for any load/store instruction.  The\nlatter one can be overwritten by using cost attribute for an\ninstruction.  Due to this change, we need to update also a number of\ninstruction patterns with a new predicate to better reflect the costs.\n\ngcc/\nxxxx-xx-xx  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/arc.c (arc_insn_cost): New function.\n\t(TARGET_INSN_COST): Define.\n\t* config/arc/arc.md (cost): New attribute.\n\t(add_n): Use arc_nonmemory_operand.\n\t(ashlsi3_insn): Likewise, also update constraints.\n\t(ashrsi3_insn): Likewise.\n\t(rotrsi3): Likewise.\n\t(add_shift): Likewise.\n\t* config/arc/predicates.md (arc_nonmemory_operand): New predicate.\n\ntestsuite/\nxxxx-xx-xx  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* gcc.target/arc/or-cnst-size2.c: Update test.", "tree": {"sha": "2a81d3623a529a1fb8a6500d1fe1bad1f7c16c88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a81d3623a529a1fb8a6500d1fe1bad1f7c16c88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e57764be555e4a6162ac2776a98d91f93307eccf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e57764be555e4a6162ac2776a98d91f93307eccf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e57764be555e4a6162ac2776a98d91f93307eccf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e57764be555e4a6162ac2776a98d91f93307eccf/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dca38c43c98cd02a961306d42f3e8cbc2269b5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dca38c43c98cd02a961306d42f3e8cbc2269b5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dca38c43c98cd02a961306d42f3e8cbc2269b5d"}], "stats": {"total": 122, "additions": 99, "deletions": 23}, "files": [{"sha": "96a6b8037d56f613e7b086370c5b045e0d051bb3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e57764be555e4a6162ac2776a98d91f93307eccf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e57764be555e4a6162ac2776a98d91f93307eccf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e57764be555e4a6162ac2776a98d91f93307eccf", "patch": "@@ -1,3 +1,15 @@\n+2020-02-13  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.c (arc_insn_cost): New function.\n+\t(TARGET_INSN_COST): Define.\n+\t* config/arc/arc.md (cost): New attribute.\n+\t(add_n): Use arc_nonmemory_operand.\n+\t(ashlsi3_insn): Likewise, also update constraints.\n+\t(ashrsi3_insn): Likewise.\n+\t(rotrsi3): Likewise.\n+\t(add_shift): Likewise.\n+\t* config/arc/predicates.md (arc_nonmemory_operand): New predicate.\n+\n 2020-02-13  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc.md (mulsidi_600): Correctly select mlo/mhi"}, {"sha": "7a9fe08f31dfcfd721fab9f4acba299465063537", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e57764be555e4a6162ac2776a98d91f93307eccf/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e57764be555e4a6162ac2776a98d91f93307eccf/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=e57764be555e4a6162ac2776a98d91f93307eccf", "patch": "@@ -11757,6 +11757,55 @@ arc_can_use_return_insn (void)\n \t  && !ARC_INTERRUPT_P (arc_compute_function_type (cfun)));\n }\n \n+/* Helper for INSN_COST.\n+\n+   Per Segher Boessenkool: rtx_costs computes the cost for any rtx (an\n+   insn, a set, a set source, any random piece of one).  set_src_cost,\n+   set_rtx_cost, etc. are helper functions that use that.\n+\n+   Those functions do not work for parallels.  Also, costs are not\n+   additive like this simplified model assumes.  Also, more complex\n+   backends tend to miss many cases in their rtx_costs function.\n+\n+   Many passes that want costs want to know the cost of a full insn.  Like\n+   combine.  That's why I created insn_cost: it solves all of the above\n+   problems.  */\n+\n+static int\n+arc_insn_cost (rtx_insn *insn, bool speed)\n+{\n+  int cost;\n+  if (recog_memoized (insn) < 0)\n+    return 0;\n+\n+  /* If optimizing for size, we want the insn size.  */\n+  if (!speed)\n+    return get_attr_length (insn);\n+\n+  /* Use cost if provided.  */\n+  cost = get_attr_cost (insn);\n+  if (cost > 0)\n+    return cost;\n+\n+  /* For speed make a simple cost model: memory access is more\n+     expensive than any other instruction.  */\n+  enum attr_type type = get_attr_type (insn);\n+\n+  switch (type)\n+    {\n+    case TYPE_LOAD:\n+    case TYPE_STORE:\n+      cost = COSTS_N_INSNS (2);\n+      break;\n+\n+    default:\n+      cost = COSTS_N_INSNS (1);\n+      break;\n+    }\n+\n+  return cost;\n+}\n+\n #undef TARGET_USE_ANCHORS_FOR_SYMBOL_P\n #define TARGET_USE_ANCHORS_FOR_SYMBOL_P arc_use_anchors_for_symbol_p\n \n@@ -11778,6 +11827,9 @@ arc_can_use_return_insn (void)\n #undef TARGET_MEMORY_MOVE_COST\n #define TARGET_MEMORY_MOVE_COST arc_memory_move_cost\n \n+#undef  TARGET_INSN_COST\n+#define TARGET_INSN_COST arc_insn_cost\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-arc.h\""}, {"sha": "3a7bf7d6f5dc1ae3acea78bdca013ff00cc73730", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e57764be555e4a6162ac2776a98d91f93307eccf/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e57764be555e4a6162ac2776a98d91f93307eccf/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=e57764be555e4a6162ac2776a98d91f93307eccf", "patch": "@@ -228,6 +228,10 @@\n   ]\n )\n \n+;; What is the insn_cost for this insn?  The target hook can still override\n+;; this.  For optimizing for size the \"length\" attribute is used instead.\n+(define_attr \"cost\" \"\" (const_int 0))\n+\n (define_attr \"is_sfunc\" \"no,yes\" (const_string \"no\"))\n \n ;; Insn type.  Used to default other attribute values.\n@@ -3127,9 +3131,9 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n   [(set (match_operand:SI 0 \"dest_reg_operand\" \"=q,r,r\")\n \t(plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"q,r,r\")\n \t\t\t  (match_operand:SI 2 \"_2_4_8_operand\" \"\"))\n-\t\t (match_operand:SI 3 \"nonmemory_operand\" \"0,r,Csz\")))]\n+\t\t (match_operand:SI 3 \"arc_nonmemory_operand\" \"0,r,Csz\")))]\n   \"\"\n-  \"add%z2%?\\\\t%0,%3,%1%&\"\n+  \"add%z2%?\\\\t%0,%3,%1\"\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"length\" \"*,4,8\")\n    (set_attr \"predicable\" \"yes,no,no\")\n@@ -3560,26 +3564,26 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n ; to truncate a symbol in a u6 immediate; but that's rather exotic, so only\n ; provide one alternatice for this, without condexec support.\n (define_insn \"*ashlsi3_insn\"\n-  [(set (match_operand:SI 0 \"dest_reg_operand\"           \"=Rcq,Rcqq,Rcqq,Rcw, w,   w\")\n-\t(ashift:SI (match_operand:SI 1 \"nonmemory_operand\" \"!0,Rcqq,   0,  0, c,cCsz\")\n-\t\t   (match_operand:SI 2 \"nonmemory_operand\"  \"K,  K,RcqqM, cL,cL,cCal\")))]\n+  [(set (match_operand:SI 0 \"dest_reg_operand\"                 \"=q,q, q, r, r,   r\")\n+\t(ashift:SI (match_operand:SI 1 \"arc_nonmemory_operand\" \"!0,q, 0, 0, r,rCsz\")\n+\t\t   (match_operand:SI 2 \"nonmemory_operand\"      \"K,K,qM,rL,rL,rCal\")))]\n   \"TARGET_BARREL_SHIFTER\n    && (register_operand (operands[1], SImode)\n        || register_operand (operands[2], SImode))\"\n-  \"asl%? %0,%1,%2%&\"\n+  \"asl%?\\\\t%0,%1,%2\"\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"iscompact\" \"maybe,maybe,maybe,false,false,false\")\n    (set_attr \"predicable\" \"no,no,no,yes,no,no\")\n    (set_attr \"cond\" \"canuse,nocond,canuse,canuse,nocond,nocond\")])\n \n (define_insn \"*ashrsi3_insn\"\n-  [(set (match_operand:SI 0 \"dest_reg_operand\"             \"=Rcq,Rcqq,Rcqq,Rcw, w,   w\")\n-\t(ashiftrt:SI (match_operand:SI 1 \"nonmemory_operand\" \"!0,Rcqq,   0,  0, c,cCsz\")\n-\t\t     (match_operand:SI 2 \"nonmemory_operand\"  \"K,  K,RcqqM, cL,cL,cCal\")))]\n+  [(set (match_operand:SI 0 \"dest_reg_operand\"                   \"=q,q, q, r, r,   r\")\n+\t(ashiftrt:SI (match_operand:SI 1 \"arc_nonmemory_operand\" \"!0,q, 0, 0, r,rCsz\")\n+\t\t     (match_operand:SI 2 \"nonmemory_operand\"      \"K,K,qM,rL,rL,rCal\")))]\n   \"TARGET_BARREL_SHIFTER\n    && (register_operand (operands[1], SImode)\n        || register_operand (operands[2], SImode))\"\n-  \"asr%? %0,%1,%2%&\"\n+  \"asr%?\\\\t%0,%1,%2\"\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"iscompact\" \"maybe,maybe,maybe,false,false,false\")\n    (set_attr \"predicable\" \"no,no,no,yes,no,no\")\n@@ -3600,11 +3604,11 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n    (set_attr \"cond\" \"canuse,nocond,canuse,canuse,nocond,nocond\")])\n \n (define_insn \"rotrsi3\"\n-  [(set (match_operand:SI 0 \"dest_reg_operand\"             \"=Rcw, w,   w\")\n-\t(rotatert:SI (match_operand:SI 1 \"register_operand\"  \" 0,cL,cCsz\")\n-\t\t     (match_operand:SI 2 \"nonmemory_operand\" \"cL,cL,cCal\")))]\n+  [(set (match_operand:SI 0 \"dest_reg_operand\"                    \"=r, r,   r\")\n+\t(rotatert:SI (match_operand:SI 1 \"arc_nonmemory_operand\"  \" 0,rL,rCsz\")\n+\t\t     (match_operand:SI 2 \"nonmemory_operand\"      \"rL,rL,rCal\")))]\n   \"TARGET_BARREL_SHIFTER\"\n-  \"ror%? %0,%1,%2\"\n+  \"ror%?\\\\t%0,%1,%2\"\n   [(set_attr \"type\" \"shift,shift,shift\")\n    (set_attr \"predicable\" \"yes,no,no\")\n    (set_attr \"length\" \"4,4,8\")])\n@@ -4336,16 +4340,15 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n \t(ashift:SI (match_operand:SI 1 \"register_operand\" \"\")\n \t\t   (match_operand:SI 2 \"_1_2_3_operand\" \"\")))\n   (set (match_operand:SI 3 \"dest_reg_operand\" \"\")\n-       (plus:SI (match_operand:SI 4 \"nonmemory_operand\" \"\")\n-\t\t(match_operand:SI 5 \"nonmemory_operand\" \"\")))]\n+       (plus:SI (match_operand:SI 4 \"arc_nonmemory_operand\" \"\")\n+\t\t(match_operand:SI 5 \"arc_nonmemory_operand\" \"\")))]\n   \"(true_regnum (operands[4]) == true_regnum (operands[0])\n        || true_regnum (operands[5]) == true_regnum (operands[0]))\n    && (peep2_reg_dead_p (2, operands[0])\n-       || (true_regnum (operands[3]) == true_regnum (operands[0])))\n-   && !(optimize_size && satisfies_constraint_I (operands[4]))\n-   && !(optimize_size && satisfies_constraint_I (operands[5]))\"\n- ;; the preparation statements take care to put proper operand in operands[4]\n- ;; operands[4] will always contain the correct operand. This is added to satisfy commutativity\n+       || (true_regnum (operands[3]) == true_regnum (operands[0])))\"\n+ ;; the preparation statements take care to put proper operand in\n+ ;; operands[4] operands[4] will always contain the correct\n+ ;; operand. This is added to satisfy commutativity\n   [(set (match_dup 3)\n \t(plus:SI (mult:SI (match_dup 1)\n \t\t\t  (match_dup 2))\n@@ -6422,7 +6425,7 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=q,r,r\")\n \t(plus:SI (ashift:SI (match_operand:SI 1 \"register_operand\" \"q,r,r\")\n \t\t\t    (match_operand:SI 2 \"_1_2_3_operand\" \"\"))\n-\t\t (match_operand:SI 3 \"nonmemory_operand\"  \"0,r,Csz\")))]\n+\t\t (match_operand:SI 3 \"arc_nonmemory_operand\"  \"0,r,Csz\")))]\n   \"\"\n   \"add%2%?\\\\t%0,%3,%1\"\n   [(set_attr \"length\" \"*,4,8\")"}, {"sha": "2ad476d575570ddaf13ccd3a1d20b02da6b8eba3", "filename": "gcc/config/arc/predicates.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e57764be555e4a6162ac2776a98d91f93307eccf/gcc%2Fconfig%2Farc%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e57764be555e4a6162ac2776a98d91f93307eccf/gcc%2Fconfig%2Farc%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fpredicates.md?ref=e57764be555e4a6162ac2776a98d91f93307eccf", "patch": "@@ -795,3 +795,8 @@\n   {\n    return arc_check_multi (op, false);\n })\n+\n+(define_predicate \"arc_nonmemory_operand\"\n+  (ior (match_test \"register_operand (op, mode)\")\n+       (and (match_code \"const_int, symbol_ref\")\n+\t    (match_test \"!optimize_size\"))))"}, {"sha": "572042662d6cac697833481bc03795cea58f8813", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e57764be555e4a6162ac2776a98d91f93307eccf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e57764be555e4a6162ac2776a98d91f93307eccf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e57764be555e4a6162ac2776a98d91f93307eccf", "patch": "@@ -1,3 +1,7 @@\n+2020-02-13  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* gcc.target/arc/or-cnst-size2.c: Update test.\n+\n 2020-02-13  Claudiu Zissulescu  <claziss@synopsys.com>\n \tPetro Karashchenko  <petro.karashchenko@ring.com>\n "}, {"sha": "8fa1e65c7f653bf7537db34c3b8ac3b303f4624a", "filename": "gcc/testsuite/gcc.target/arc/or-cnst-size2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e57764be555e4a6162ac2776a98d91f93307eccf/gcc%2Ftestsuite%2Fgcc.target%2Farc%2For-cnst-size2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e57764be555e4a6162ac2776a98d91f93307eccf/gcc%2Ftestsuite%2Fgcc.target%2Farc%2For-cnst-size2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2For-cnst-size2.c?ref=e57764be555e4a6162ac2776a98d91f93307eccf", "patch": "@@ -9,4 +9,4 @@ int foo (void)\n }\n \n /* { dg-final { scan-assembler \"tst\" } } */\n-/* { dg-final { scan-assembler \"bset.eq\" } } */\n+/* { dg-final { scan-assembler \"bset\" } } */"}]}