{"sha": "c9ba330781f41dd3e35d1c775a3a3eeaa0b4c61e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzliYTMzMDc4MWY0MWRkM2UzNWQxYzc3NWEzYTNlZWFhMGI0YzYxZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-06-28T17:52:51Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-06-28T17:52:51Z"}, "message": "re PR tree-optimization/53645 (Missed optimization for vector integer division lowering)\n\n\tPR tree-optimization/53645\n\t* tree-vect-generic.c (expand_vector_divmod): Use MULT_HIGHPART_EXPR\n\tinstead of VEC_WIDEN_MULT_{HI,LO}_EXPR followed by VEC_PERM_EXPR\n\tif possible.\n\n\t* gcc.c-torture/execute/pr53645-2.c: New test.\n\nFrom-SVN: r189052", "tree": {"sha": "87b2d741d1edf9831c99a4abe29c9a44b7479e69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87b2d741d1edf9831c99a4abe29c9a44b7479e69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9ba330781f41dd3e35d1c775a3a3eeaa0b4c61e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9ba330781f41dd3e35d1c775a3a3eeaa0b4c61e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9ba330781f41dd3e35d1c775a3a3eeaa0b4c61e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9ba330781f41dd3e35d1c775a3a3eeaa0b4c61e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b04ffa565302de59ad22d8211925f78c52b042e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b04ffa565302de59ad22d8211925f78c52b042e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b04ffa565302de59ad22d8211925f78c52b042e5"}], "stats": {"total": 221, "additions": 184, "deletions": 37}, "files": [{"sha": "86d0176d3993f60f72c60ae09cd831624b23f02b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9ba330781f41dd3e35d1c775a3a3eeaa0b4c61e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9ba330781f41dd3e35d1c775a3a3eeaa0b4c61e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c9ba330781f41dd3e35d1c775a3a3eeaa0b4c61e", "patch": "@@ -1,3 +1,10 @@\n+2012-06-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/53645\n+\t* tree-vect-generic.c (expand_vector_divmod): Use MULT_HIGHPART_EXPR\n+\tinstead of VEC_WIDEN_MULT_{HI,LO}_EXPR followed by VEC_PERM_EXPR\n+\tif possible.\n+\n 2012-06-28  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR 53595"}, {"sha": "20e38a0a99d0133f41c393a1a1527a2874f13832", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9ba330781f41dd3e35d1c775a3a3eeaa0b4c61e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9ba330781f41dd3e35d1c775a3a3eeaa0b4c61e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c9ba330781f41dd3e35d1c775a3a3eeaa0b4c61e", "patch": "@@ -1,3 +1,8 @@\n+2012-06-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/53645\n+\t* gcc.c-torture/execute/pr53645-2.c: New test.\n+\n 2012-06-28  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/53790"}, {"sha": "a03dd2ef8dc23524fe809156b146f83f00c0699b", "filename": "gcc/testsuite/gcc.c-torture/execute/pr53645-2.c", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9ba330781f41dd3e35d1c775a3a3eeaa0b4c61e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr53645-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9ba330781f41dd3e35d1c775a3a3eeaa0b4c61e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr53645-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr53645-2.c?ref=c9ba330781f41dd3e35d1c775a3a3eeaa0b4c61e", "patch": "@@ -0,0 +1,120 @@\n+/* PR tree-optimization/53645 */\n+\n+typedef unsigned short int UV __attribute__((vector_size (16)));\n+typedef short int SV __attribute__((vector_size (16)));\n+extern void abort (void);\n+\n+#define TEST(a, b, c, d, e, f, g, h) \\\n+__attribute__((noinline)) void\t\t\t\\\n+uq##a##b##c##d##e##f##g##h (UV *x, UV *y) \t\\\n+{\t\t\t\t\t\t\\\n+  *x = *y / ((UV) { a, b, c, d, e, f, g, h });\t\\\n+}\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+__attribute__((noinline)) void\t\t\t\\\n+ur##a##b##c##d##e##f##g##h (UV *x, UV *y) \t\\\n+{\t\t\t\t\t\t\\\n+  *x = *y % ((UV) { a, b, c, d, e, f, g, h });\t\\\n+}\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+__attribute__((noinline)) void\t\t\t\\\n+sq##a##b##c##d##e##f##g##h (SV *x, SV *y) \t\\\n+{\t\t\t\t\t\t\\\n+  *x = *y / ((SV) { a, b, c, d, e, f, g, h });\t\\\n+}\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+__attribute__((noinline)) void\t\t\t\\\n+sr##a##b##c##d##e##f##g##h (SV *x, SV *y) \t\\\n+{\t\t\t\t\t\t\\\n+  *x = *y % ((SV) { a, b, c, d, e, f, g, h });\t\\\n+}\n+\n+#define TESTS \\\n+TEST (4, 4, 4, 4, 4, 4, 4, 4)\t\t\\\n+TEST (1, 4, 2, 8, 16, 64, 32, 128)\t\\\n+TEST (3, 3, 3, 3, 3, 3, 3, 3)\t\t\\\n+TEST (6, 5, 6, 5, 6, 5, 6, 5)\t\t\\\n+TEST (14, 14, 14, 6, 14, 6, 14, 14)\t\\\n+TEST (7, 7, 7, 7, 7, 7, 7, 7)\t\t\\\n+\n+TESTS\n+\n+UV u[] =\n+  { ((UV) { 73U, 65531U, 0U, 174U, 921U, 65535U, 17U, 178U }),\n+    ((UV) { 1U, 8173U, 65535U, 65472U, 12U, 29612U, 128U, 8912U }) };\n+SV s[] =\n+  { ((SV) { 73, -9123, 32761, 8191, 16371, 1201, 12701, 9999 }),\n+    ((SV) { 9903, -1, -7323, 0, -7, -323, 9124, -9199 }) };\n+\n+int\n+main ()\n+{\n+  UV ur, ur2;\n+  SV sr, sr2;\n+  int i;\n+#undef TEST\n+#define TEST(a, b, c, d, e, f, g, h)\t\t\t\\\n+    uq##a##b##c##d##e##f##g##h (&ur, u + i);\t\t\\\n+    if (ur[0] != u[i][0] / a || ur[3] != u[i][3] / d)\t\\\n+     abort ();\t\t\t\t\t\t\\\n+    asm volatile (\"\" : : \"r\" (&ur) : \"memory\");\t\t\\\n+    if (ur[2] != u[i][2] / c || ur[1] != u[i][1] / b)\t\\\n+     abort ();\t\t\t\t\t\t\\\n+    asm volatile (\"\" : : \"r\" (&ur) : \"memory\");\t\t\\\n+    if (ur[4] != u[i][4] / e || ur[7] != u[i][7] / h)\t\\\n+     abort ();\t\t\t\t\t\t\\\n+    asm volatile (\"\" : : \"r\" (&ur) : \"memory\");\t\t\\\n+    if (ur[6] != u[i][6] / g || ur[5] != u[i][5] / f)\t\\\n+     abort ();\t\t\t\t\t\t\\\n+    asm volatile (\"\" : : \"r\" (&ur) : \"memory\");\t\t\\\n+    ur##a##b##c##d##e##f##g##h (&ur, u + i);\t\t\\\n+    if (ur[0] != u[i][0] % a || ur[3] != u[i][3] % d)\t\\\n+     abort ();\t\t\t\t\t\t\\\n+    asm volatile (\"\" : : \"r\" (&ur) : \"memory\");\t\t\\\n+    if (ur[2] != u[i][2] % c || ur[1] != u[i][1] % b)\t\\\n+     abort ();\t\t\t\t\t\t\\\n+    asm volatile (\"\" : : \"r\" (&ur) : \"memory\");\t\t\\\n+    if (ur[4] != u[i][4] % e || ur[7] != u[i][7] % h)\t\\\n+     abort ();\t\t\t\t\t\t\\\n+    asm volatile (\"\" : : \"r\" (&ur) : \"memory\");\t\t\\\n+    if (ur[6] != u[i][6] % g || ur[5] != u[i][5] % f)\t\\\n+     abort ();\t\t\t\t\t\t\\\n+    asm volatile (\"\" : : \"r\" (&ur) : \"memory\");\n+  for (i = 0; i < sizeof (u) / sizeof (u[0]); i++)\n+    {\n+      TESTS\n+    }\n+#undef TEST\n+#define TEST(a, b, c, d, e, f, g, h)\t\t\t\\\n+    sq##a##b##c##d##e##f##g##h (&sr, s + i);\t\t\\\n+    if (sr[0] != s[i][0] / a || sr[3] != s[i][3] / d)\t\\\n+     abort ();\t\t\t\t\t\t\\\n+    asm volatile (\"\" : : \"r\" (&sr) : \"memory\");\t\t\\\n+    if (sr[2] != s[i][2] / c || sr[1] != s[i][1] / b)\t\\\n+     abort ();\t\t\t\t\t\t\\\n+    asm volatile (\"\" : : \"r\" (&sr) : \"memory\");\t\t\\\n+    if (sr[4] != s[i][4] / e || sr[7] != s[i][7] / h)\t\\\n+     abort ();\t\t\t\t\t\t\\\n+    asm volatile (\"\" : : \"r\" (&sr) : \"memory\");\t\t\\\n+    if (sr[6] != s[i][6] / g || sr[5] != s[i][5] / f)\t\\\n+     abort ();\t\t\t\t\t\t\\\n+    asm volatile (\"\" : : \"r\" (&sr) : \"memory\");\t\t\\\n+    sr##a##b##c##d##e##f##g##h (&sr, s + i);\t\t\\\n+    if (sr[0] != s[i][0] % a || sr[3] != s[i][3] % d)\t\\\n+     abort ();\t\t\t\t\t\t\\\n+    asm volatile (\"\" : : \"r\" (&sr) : \"memory\");\t\t\\\n+    if (sr[2] != s[i][2] % c || sr[1] != s[i][1] % b)\t\\\n+     abort ();\t\t\t\t\t\t\\\n+    asm volatile (\"\" : : \"r\" (&sr) : \"memory\");\t\t\\\n+    if (sr[4] != s[i][4] % e || sr[7] != s[i][7] % h)\t\\\n+     abort ();\t\t\t\t\t\t\\\n+    asm volatile (\"\" : : \"r\" (&sr) : \"memory\");\t\t\\\n+    if (sr[6] != s[i][6] % g || sr[5] != s[i][5] % f)\t\\\n+     abort ();\t\t\t\t\t\t\\\n+    asm volatile (\"\" : : \"r\" (&sr) : \"memory\");\n+  for (i = 0; i < sizeof (s) / sizeof (s[0]); i++)\n+    {\n+      TESTS\n+    }\n+  return 0;\n+}"}, {"sha": "c83db5e1e30498a1f4c317f7894535822acdede2", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 52, "deletions": 37, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9ba330781f41dd3e35d1c775a3a3eeaa0b4c61e/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9ba330781f41dd3e35d1c775a3a3eeaa0b4c61e/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=c9ba330781f41dd3e35d1c775a3a3eeaa0b4c61e", "patch": "@@ -455,7 +455,7 @@ expand_vector_divmod (gimple_stmt_iterator *gsi, tree type, tree op0,\n   unsigned HOST_WIDE_INT mask = GET_MODE_MASK (TYPE_MODE (TREE_TYPE (type)));\n   optab op;\n   tree *vec;\n-  unsigned char *sel;\n+  unsigned char *sel = NULL;\n   tree cur_op, mhi, mlo, mulcst, perm_mask, wider_type, tem;\n \n   if (prec > HOST_BITS_PER_WIDE_INT)\n@@ -744,26 +744,34 @@ expand_vector_divmod (gimple_stmt_iterator *gsi, tree type, tree op0,\n   if (mode == -2 || BYTES_BIG_ENDIAN != WORDS_BIG_ENDIAN)\n     return NULL_TREE;\n \n-  op = optab_for_tree_code (VEC_WIDEN_MULT_LO_EXPR, type, optab_default);\n-  if (op == NULL\n-      || optab_handler (op, TYPE_MODE (type)) == CODE_FOR_nothing)\n-    return NULL_TREE;\n-  op = optab_for_tree_code (VEC_WIDEN_MULT_HI_EXPR, type, optab_default);\n-  if (op == NULL\n-      || optab_handler (op, TYPE_MODE (type)) == CODE_FOR_nothing)\n-    return NULL_TREE;\n-  sel = XALLOCAVEC (unsigned char, nunits);\n-  for (i = 0; i < nunits; i++)\n-    sel[i] = 2 * i + (BYTES_BIG_ENDIAN ? 0 : 1);\n-  if (!can_vec_perm_p (TYPE_MODE (type), false, sel))\n-    return NULL_TREE;\n-  wider_type\n-    = build_vector_type (build_nonstandard_integer_type (prec * 2, unsignedp),\n-\t\t\t nunits / 2);\n-  if (GET_MODE_CLASS (TYPE_MODE (wider_type)) != MODE_VECTOR_INT\n-      || GET_MODE_BITSIZE (TYPE_MODE (wider_type))\n-\t != GET_MODE_BITSIZE (TYPE_MODE (type)))\n-    return NULL_TREE;\n+  op = optab_for_tree_code (MULT_HIGHPART_EXPR, type, optab_default);\n+  if (op != NULL\n+      && optab_handler (op, TYPE_MODE (type)) != CODE_FOR_nothing)\n+    wider_type = NULL_TREE;\n+  else\n+    {\n+      op = optab_for_tree_code (VEC_WIDEN_MULT_LO_EXPR, type, optab_default);\n+      if (op == NULL\n+\t  || optab_handler (op, TYPE_MODE (type)) == CODE_FOR_nothing)\n+\treturn NULL_TREE;\n+      op = optab_for_tree_code (VEC_WIDEN_MULT_HI_EXPR, type, optab_default);\n+      if (op == NULL\n+\t  || optab_handler (op, TYPE_MODE (type)) == CODE_FOR_nothing)\n+\treturn NULL_TREE;\n+      sel = XALLOCAVEC (unsigned char, nunits);\n+      for (i = 0; i < nunits; i++)\n+\tsel[i] = 2 * i + (BYTES_BIG_ENDIAN ? 0 : 1);\n+      if (!can_vec_perm_p (TYPE_MODE (type), false, sel))\n+\treturn NULL_TREE;\n+      wider_type\n+\t= build_vector_type (build_nonstandard_integer_type (prec * 2,\n+\t\t\t\t\t\t\t     unsignedp),\n+\t\t\t     nunits / 2);\n+      if (GET_MODE_CLASS (TYPE_MODE (wider_type)) != MODE_VECTOR_INT\n+\t  || GET_MODE_BITSIZE (TYPE_MODE (wider_type))\n+\t     != GET_MODE_BITSIZE (TYPE_MODE (type)))\n+\treturn NULL_TREE;\n+    }\n \n   cur_op = op0;\n \n@@ -772,7 +780,7 @@ expand_vector_divmod (gimple_stmt_iterator *gsi, tree type, tree op0,\n     case 0:\n       gcc_assert (unsignedp);\n       /* t1 = oprnd0 >> pre_shift;\n-\t t2 = (type) (t1 w* ml >> prec);\n+\t t2 = t1 h* ml;\n \t q = t2 >> post_shift;  */\n       cur_op = add_rshift (gsi, type, cur_op, pre_shifts);\n       if (cur_op == NULL_TREE)\n@@ -801,30 +809,37 @@ expand_vector_divmod (gimple_stmt_iterator *gsi, tree type, tree op0,\n   for (i = 0; i < nunits; i++)\n     vec[i] = build_int_cst (TREE_TYPE (type), mulc[i]);\n   mulcst = build_vector (type, vec);\n-  for (i = 0; i < nunits; i++)\n-    vec[i] = build_int_cst (TREE_TYPE (type), sel[i]);\n-  perm_mask = build_vector (type, vec);\n-  mhi = gimplify_build2 (gsi, VEC_WIDEN_MULT_HI_EXPR, wider_type,\n-\t\t\t cur_op, mulcst);\n-  mhi = gimplify_build1 (gsi, VIEW_CONVERT_EXPR, type, mhi);\n-  mlo = gimplify_build2 (gsi, VEC_WIDEN_MULT_LO_EXPR, wider_type,\n-\t\t\t cur_op, mulcst);\n-  mlo = gimplify_build1 (gsi, VIEW_CONVERT_EXPR, type, mlo);\n-  if (BYTES_BIG_ENDIAN)\n-    cur_op = gimplify_build3 (gsi, VEC_PERM_EXPR, type, mhi, mlo, perm_mask);\n+  if (wider_type == NULL_TREE)\n+    cur_op = gimplify_build2 (gsi, MULT_HIGHPART_EXPR, type, cur_op, mulcst);\n   else\n-    cur_op = gimplify_build3 (gsi, VEC_PERM_EXPR, type, mlo, mhi, perm_mask);\n+    {\n+      for (i = 0; i < nunits; i++)\n+\tvec[i] = build_int_cst (TREE_TYPE (type), sel[i]);\n+      perm_mask = build_vector (type, vec);\n+      mhi = gimplify_build2 (gsi, VEC_WIDEN_MULT_HI_EXPR, wider_type,\n+\t\t\t     cur_op, mulcst);\n+      mhi = gimplify_build1 (gsi, VIEW_CONVERT_EXPR, type, mhi);\n+      mlo = gimplify_build2 (gsi, VEC_WIDEN_MULT_LO_EXPR, wider_type,\n+\t\t\t     cur_op, mulcst);\n+      mlo = gimplify_build1 (gsi, VIEW_CONVERT_EXPR, type, mlo);\n+      if (BYTES_BIG_ENDIAN)\n+\tcur_op = gimplify_build3 (gsi, VEC_PERM_EXPR, type, mhi, mlo,\n+\t\t\t\t  perm_mask);\n+      else\n+\tcur_op = gimplify_build3 (gsi, VEC_PERM_EXPR, type, mlo, mhi,\n+\t\t\t\t  perm_mask);\n+    }\n \n   switch (mode)\n     {\n     case 0:\n       /* t1 = oprnd0 >> pre_shift;\n-\t t2 = (type) (t1 w* ml >> prec);\n+\t t2 = t1 h* ml;\n \t q = t2 >> post_shift;  */\n       cur_op = add_rshift (gsi, type, cur_op, post_shifts);\n       break;\n     case 1:\n-      /* t1 = (type) (oprnd0 w* ml >> prec);\n+      /* t1 = oprnd0 h* ml;\n \t t2 = oprnd0 - t1;\n \t t3 = t2 >> 1;\n \t t4 = t1 + t3;\n@@ -848,7 +863,7 @@ expand_vector_divmod (gimple_stmt_iterator *gsi, tree type, tree op0,\n     case 3:\n     case 4:\n     case 5:\n-      /* t1 = (type) (oprnd0 w* ml >> prec);\n+      /* t1 = oprnd0 h* ml;\n \t t2 = t1; [ iff (mode & 2) != 0 ]\n \t t2 = t1 + oprnd0; [ iff (mode & 2) == 0 ]\n \t t3 = t2 >> post_shift;"}]}