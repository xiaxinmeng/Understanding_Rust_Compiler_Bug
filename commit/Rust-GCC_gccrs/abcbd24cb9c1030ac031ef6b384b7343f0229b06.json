{"sha": "abcbd24cb9c1030ac031ef6b384b7343f0229b06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJjYmQyNGNiOWMxMDMwYWMwMzFlZjZiMzg0YjczNDNmMDIyOWIwNg==", "commit": {"author": {"name": "Samuel Tardieu", "email": "sam@rfc1149.net", "date": "2008-08-10T20:13:24Z"}, "committer": {"name": "Samuel Tardieu", "email": "sam@gcc.gnu.org", "date": "2008-08-10T20:13:24Z"}, "message": "exp_ch4.adb (Expand_N_Op_Expon): Force evaluation of left argument even when right argument is 0.\n\n2008-08-10  Samuel Tardieu  <sam@rfc1149.net>\n            Robert Dewar <dewar@adacore.com>\n    gcc/ada/\n\t* exp_ch4.adb (Expand_N_Op_Expon): Force evaluation of\n\tleft argument even when right argument is 0.\n\t(Expand_N_Op_Mod): Ditto when right argument is 1.\n\t(Expand_N_Op_Multiply): Ditto when any argument is 0.\n\t(Expand_N_Op_Rem): Ditto when right argument is 1.\n\n2008-08-10  Samuel Tardieu  <sam@rfc1149.net>\n    gcc/testsuite/\n\t* gnat.dg/exp0_eval.adb: New.\n\nCo-Authored-By: Robert Dewar <dewar@adacore.com>\n\nFrom-SVN: r138934", "tree": {"sha": "adc53e4a662c5d421fc83892ae5ba0ff878bc824", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adc53e4a662c5d421fc83892ae5ba0ff878bc824"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abcbd24cb9c1030ac031ef6b384b7343f0229b06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abcbd24cb9c1030ac031ef6b384b7343f0229b06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abcbd24cb9c1030ac031ef6b384b7343f0229b06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abcbd24cb9c1030ac031ef6b384b7343f0229b06/comments", "author": {"login": "samueltardieu", "id": 44656, "node_id": "MDQ6VXNlcjQ0NjU2", "avatar_url": "https://avatars.githubusercontent.com/u/44656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samueltardieu", "html_url": "https://github.com/samueltardieu", "followers_url": "https://api.github.com/users/samueltardieu/followers", "following_url": "https://api.github.com/users/samueltardieu/following{/other_user}", "gists_url": "https://api.github.com/users/samueltardieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/samueltardieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samueltardieu/subscriptions", "organizations_url": "https://api.github.com/users/samueltardieu/orgs", "repos_url": "https://api.github.com/users/samueltardieu/repos", "events_url": "https://api.github.com/users/samueltardieu/events{/privacy}", "received_events_url": "https://api.github.com/users/samueltardieu/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "de9a4397e956637cb26a9d6144ccc51a090cad68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de9a4397e956637cb26a9d6144ccc51a090cad68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de9a4397e956637cb26a9d6144ccc51a090cad68"}], "stats": {"total": 107, "additions": 92, "deletions": 15}, "files": [{"sha": "41a76470647a34c9381b034b75272c17c81fa438", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abcbd24cb9c1030ac031ef6b384b7343f0229b06/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abcbd24cb9c1030ac031ef6b384b7343f0229b06/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=abcbd24cb9c1030ac031ef6b384b7343f0229b06", "patch": "@@ -1,3 +1,12 @@\n+2008-08-10  Samuel Tardieu  <sam@rfc1149.net>\n+            Robert Dewar <dewar@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Op_Expon): Force evaluation of\n+\tleft argument even when right argument is 0.\n+\t(Expand_N_Op_Mod): Ditto when right argument is 1.\n+\t(Expand_N_Op_Multiply): Ditto when any argument is 0.\n+\t(Expand_N_Op_Rem): Ditto when right argument is 1.\n+\n 2008-08-09  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* gcc-interface/misc.c (gnat_handle_option): Replace set_Wunused"}, {"sha": "2f95a84207d4785cfd6be83fb37db225d58e0fc6", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 48, "deletions": 15, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abcbd24cb9c1030ac031ef6b384b7343f0229b06/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abcbd24cb9c1030ac031ef6b384b7343f0229b06/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=abcbd24cb9c1030ac031ef6b384b7343f0229b06", "patch": "@@ -5471,6 +5471,13 @@ package body Exp_Ch4 is\n             --  X ** 0 = 1 (or 1.0)\n \n             if Expv = 0 then\n+\n+               --  Call Remove_Side_Effects to ensure that any side effects\n+               --  in the ignored left operand (in particular function calls\n+               --  to user defined functions) are properly executed.\n+\n+               Remove_Side_Effects (Base);\n+\n                if Ekind (Typ) in Integer_Kind then\n                   Xnode := Make_Integer_Literal (Loc, Intval => 1);\n                else\n@@ -5945,6 +5952,12 @@ package body Exp_Ch4 is\n            and then Compile_Time_Known_Value (Right)\n            and then Expr_Value (Right) = Uint_1\n          then\n+            --  Call Remove_Side_Effects to ensure that any side effects in\n+            --  the ignored left operand (in particular function calls to\n+            --  user defined functions) are properly executed.\n+\n+            Remove_Side_Effects (Left);\n+\n             Rewrite (N, Make_Integer_Literal (Loc, 0));\n             Analyze_And_Resolve (N, Typ);\n             return;\n@@ -5993,17 +6006,17 @@ package body Exp_Ch4 is\n    --------------------------\n \n    procedure Expand_N_Op_Multiply (N : Node_Id) is\n-      Loc  : constant Source_Ptr := Sloc (N);\n-      Lop  : constant Node_Id    := Left_Opnd (N);\n-      Rop  : constant Node_Id    := Right_Opnd (N);\n+      Loc : constant Source_Ptr := Sloc (N);\n+      Lop : constant Node_Id    := Left_Opnd (N);\n+      Rop : constant Node_Id    := Right_Opnd (N);\n \n-      Lp2  : constant Boolean :=\n-               Nkind (Lop) = N_Op_Expon\n-                 and then Is_Power_Of_2_For_Shift (Lop);\n+      Lp2 : constant Boolean :=\n+              Nkind (Lop) = N_Op_Expon\n+                and then Is_Power_Of_2_For_Shift (Lop);\n \n-      Rp2  : constant Boolean :=\n-               Nkind (Rop) = N_Op_Expon\n-                 and then Is_Power_Of_2_For_Shift (Rop);\n+      Rp2 : constant Boolean :=\n+              Nkind (Rop) = N_Op_Expon\n+                and then Is_Power_Of_2_For_Shift (Rop);\n \n       Ltyp : constant Entity_Id  := Etype (Lop);\n       Rtyp : constant Entity_Id  := Etype (Rop);\n@@ -6016,14 +6029,28 @@ package body Exp_Ch4 is\n \n       if Is_Integer_Type (Typ) then\n \n-         --  N * 0 = 0 * N = 0 for integer types\n+         --  N * 0 = 0 for integer types\n \n-         if (Compile_Time_Known_Value (Rop)\n-              and then Expr_Value (Rop) = Uint_0)\n-           or else\n-            (Compile_Time_Known_Value (Lop)\n-              and then Expr_Value (Lop) = Uint_0)\n+         if Compile_Time_Known_Value (Rop)\n+           and then Expr_Value (Rop) = Uint_0\n          then\n+            --  Call Remove_Side_Effects to ensure that any side effects in\n+            --  the ignored left operand (in particular function calls to\n+            --  user defined functions) are properly executed.\n+\n+            Remove_Side_Effects (Lop);\n+\n+            Rewrite (N, Make_Integer_Literal (Loc, Uint_0));\n+            Analyze_And_Resolve (N, Typ);\n+            return;\n+         end if;\n+\n+         --  Similar handling for 0 * N = 0\n+\n+         if Compile_Time_Known_Value (Lop)\n+           and then Expr_Value (Lop) = Uint_0\n+         then\n+            Remove_Side_Effects (Rop);\n             Rewrite (N, Make_Integer_Literal (Loc, Uint_0));\n             Analyze_And_Resolve (N, Typ);\n             return;\n@@ -6502,6 +6529,12 @@ package body Exp_Ch4 is\n         and then Compile_Time_Known_Value (Right)\n         and then Expr_Value (Right) = Uint_1\n       then\n+         --  Call Remove_Side_Effects to ensure that any side effects in the\n+         --  ignored left operand (in particular function calls to user defined\n+         --  functions) are properly executed.\n+\n+         Remove_Side_Effects (Left);\n+\n          Rewrite (N, Make_Integer_Literal (Loc, 0));\n          Analyze_And_Resolve (N, Typ);\n          return;"}, {"sha": "002ffafff0d7d1b51dc7b1427ac8174610203323", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abcbd24cb9c1030ac031ef6b384b7343f0229b06/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abcbd24cb9c1030ac031ef6b384b7343f0229b06/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=abcbd24cb9c1030ac031ef6b384b7343f0229b06", "patch": "@@ -1,3 +1,7 @@\n+2008-08-10  Samuel Tardieu  <sam@rfc1149.net>\n+\n+\t* gnat.dg/exp0_eval.adb: New.\n+\n 2008-08-10  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR middle-end/20644"}, {"sha": "11edd7d097c225a7e795cde5ce579347990eea3c", "filename": "gcc/testsuite/gnat.dg/exp0_eval.adb", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abcbd24cb9c1030ac031ef6b384b7343f0229b06/gcc%2Ftestsuite%2Fgnat.dg%2Fexp0_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abcbd24cb9c1030ac031ef6b384b7343f0229b06/gcc%2Ftestsuite%2Fgnat.dg%2Fexp0_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fexp0_eval.adb?ref=abcbd24cb9c1030ac031ef6b384b7343f0229b06", "patch": "@@ -0,0 +1,31 @@\n+-- { dg-do run }\n+with Interfaces; use Interfaces;\n+procedure Exp0_Eval is\n+\n+   F_Count : Natural := 0;\n+\n+   function F return Integer is\n+   begin\n+      F_Count := F_Count + 1;\n+      return 1;\n+   end F;\n+\n+   function F return Unsigned_32 is\n+   begin\n+      F_Count := F_Count + 1;\n+      return 1;\n+   end F;\n+\n+   R : constant Integer :=\n+     F ** 0 +\n+     F * 0 +\n+     0 * F +\n+     Integer (Unsigned_32'(F) mod 1) +\n+     Integer (Unsigned_32'(F) rem 1);\n+   pragma Warnings (Off, R);\n+begin\n+   if F_Count /= 5 then\n+      raise Program_Error\n+        with \"incorrect numbers of calls to F:\" & F_Count'Img;\n+   end if;\n+end Exp0_Eval;"}]}