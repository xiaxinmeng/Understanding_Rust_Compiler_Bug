{"sha": "eb069ae8819c3a84d7f78becc5501e21ee3a9554", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWIwNjlhZTg4MTljM2E4NGQ3Zjc4YmVjYzU1MDFlMjFlZTNhOTU1NA==", "commit": {"author": {"name": "Mark Eggleston", "email": "markeggleston@gcc.gnu.org", "date": "2020-05-07T07:02:02Z"}, "committer": {"name": "Mark Eggleston", "email": "markeggleston@gcc.gnu.org", "date": "2020-05-20T13:28:41Z"}, "message": "Fortran  : ProcPtr function results: 'ppr@' in error message PR39695\n\nThe value 'ppr@' is set in the name of result symbol, the actual\nname of the symbol is in the procedure name symbol pointed\nto by the result symbol's namespace (ns). When reporting errors for\nsymbols that have the proc_pointer attribute check whether the\nresult attribute is set and set the name accordingly.\n\n2020-05-20  Mark Eggleston  <markeggleston@gcc.gnu.org>\n\ngcc/fortran/\n\n\tPR fortran/39695\n\t* resolve.c (resolve_fl_procedure): Set name depending on\n\twhether the result attribute is set.  For PROCEDURE/RESULT\n\tconflict use the name in sym->ns->proc_name->name.\n\t* symbol.c (gfc_add_type): Add check for function and result\n\tattributes use sym->ns->proc_name->name if both are set.\n\tWhere the symbol cannot have a type use the name in\n\tsym->ns->proc_name->name.\n\n2020-05-20  Mark Eggleston  <markeggleston@gcc.gnu.org>\n\ngcc/testsuite/\n\n\tPR fortran/39695\n\t* gfortran.dg/pr39695_1.f90: New test.\n\t* gfortran.dg/pr39695_2.f90: New test.\n\t* gfortran.dg/pr39695_3.f90: New test.\n\t* gfortran.dg/pr39695_4.f90: New test.", "tree": {"sha": "fa0a916ef7b46b7456bf985868f2f4bda258165f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa0a916ef7b46b7456bf985868f2f4bda258165f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb069ae8819c3a84d7f78becc5501e21ee3a9554", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb069ae8819c3a84d7f78becc5501e21ee3a9554", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb069ae8819c3a84d7f78becc5501e21ee3a9554", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb069ae8819c3a84d7f78becc5501e21ee3a9554/comments", "author": null, "committer": null, "parents": [{"sha": "4623a6f2d026b6b6dcd4c9b6f26e96cf5e52b4ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4623a6f2d026b6b6dcd4c9b6f26e96cf5e52b4ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4623a6f2d026b6b6dcd4c9b6f26e96cf5e52b4ac"}], "stats": {"total": 77, "additions": 73, "deletions": 4}, "files": [{"sha": "fb0e47c76246d1a7a93a10ecf0b01752290fe986", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb069ae8819c3a84d7f78becc5501e21ee3a9554/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb069ae8819c3a84d7f78becc5501e21ee3a9554/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=eb069ae8819c3a84d7f78becc5501e21ee3a9554", "patch": "@@ -1,3 +1,14 @@\n+2020-05-20  Mark Eggleston  <markeggleston@gcc.gnu.org>\n+\n+\tPR fortran/39695\n+\t* resolve.c (resolve_fl_procedure): Set name depending on\n+\twhether the result attribute is set.  For PROCEDURE/RESULT\n+\tconflict use the name in sym->ns->proc_name->name.\n+\t* symbol.c (gfc_add_type): Add check for function and result\n+\tattributes use sym->ns->proc_name->name if both are set.\n+\tWhere the symbol cannot have a type use the name in\n+\tsym->ns->proc_name->name.\n+\n 2020-05-18  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/95053"}, {"sha": "aaee5eb6b9b95b10870ca9ae0e609dc002a4ec0d", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb069ae8819c3a84d7f78becc5501e21ee3a9554/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb069ae8819c3a84d7f78becc5501e21ee3a9554/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=eb069ae8819c3a84d7f78becc5501e21ee3a9554", "patch": "@@ -13125,8 +13125,10 @@ resolve_fl_procedure (gfc_symbol *sym, int mp_flag)\n     {\n       if (sym->attr.proc_pointer)\n \t{\n+\t  const char* name = (sym->attr.result ? sym->ns->proc_name->name\n+\t\t\t\t\t       : sym->name);\n \t  gfc_error (\"Procedure pointer %qs at %L shall not be elemental\",\n-\t\t     sym->name, &sym->declared_at);\n+\t\t     name, &sym->declared_at);\n \t  return false;\n \t}\n       if (sym->attr.dummy)\n@@ -13213,7 +13215,7 @@ resolve_fl_procedure (gfc_symbol *sym, int mp_flag)\n       if (sym->attr.subroutine && sym->attr.result)\n \t{\n \t  gfc_error (\"PROCEDURE attribute conflicts with RESULT attribute \"\n-\t\t     \"in %qs at %L\", sym->name, &sym->declared_at);\n+\t\t     \"in %qs at %L\", sym->ns->proc_name->name, &sym->declared_at);\n \t  return false;\n \t}\n       if (sym->attr.external && sym->attr.function && !sym->attr.module_procedure"}, {"sha": "b96706138c9f4d6ffeabc8441fde7ce344aa2ce2", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb069ae8819c3a84d7f78becc5501e21ee3a9554/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb069ae8819c3a84d7f78becc5501e21ee3a9554/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=eb069ae8819c3a84d7f78becc5501e21ee3a9554", "patch": "@@ -2004,9 +2004,12 @@ gfc_add_type (gfc_symbol *sym, gfc_typespec *ts, locus *where)\n \tgfc_error (\"Symbol %qs at %L conflicts with symbol from module %qs, \"\n \t\t   \"use-associated at %L\", sym->name, where, sym->module,\n \t\t   &sym->declared_at);\n+      else if (sym->attr.function && sym->attr.result)\n+\tgfc_error (\"Symbol %qs at %L already has basic type of %s\",\n+\t\t   sym->ns->proc_name->name, where, gfc_basic_typename (type));\n       else\n \tgfc_error (\"Symbol %qs at %L already has basic type of %s\", sym->name,\n-\t\t where, gfc_basic_typename (type));\n+\t\t   where, gfc_basic_typename (type));\n       return false;\n     }\n \n@@ -2024,7 +2027,7 @@ gfc_add_type (gfc_symbol *sym, gfc_typespec *ts, locus *where)\n       || (flavor == FL_PROCEDURE && sym->attr.subroutine)\n       || flavor == FL_DERIVED || flavor == FL_NAMELIST)\n     {\n-      gfc_error (\"Symbol %qs at %L cannot have a type\", sym->name, where);\n+      gfc_error (\"Symbol %qs at %L cannot have a type\", sym->ns->proc_name->name, where);\n       return false;\n     }\n "}, {"sha": "d62db054a159cedb8386712ad4d282089370f2cc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb069ae8819c3a84d7f78becc5501e21ee3a9554/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb069ae8819c3a84d7f78becc5501e21ee3a9554/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eb069ae8819c3a84d7f78becc5501e21ee3a9554", "patch": "@@ -1,3 +1,11 @@\n+2020-05-20  Mark Eggleston  <markeggleston@gcc.gnu.org>\n+\n+\tPR fortran/39695\n+\t* gfortran.dg/pr39695_1.f90: New test.\n+\t* gfortran.dg/pr39695_2.f90: New test.\n+\t* gfortran.dg/pr39695_3.f90: New test.\n+\t* gfortran.dg/pr39695_4.f90: New test.\n+\n 2020-05-20  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/95223"}, {"sha": "4c4b3045f69c4573eb8ababe156ebcae3625b6b5", "filename": "gcc/testsuite/gfortran.dg/pr39695_1.f90", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb069ae8819c3a84d7f78becc5501e21ee3a9554/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr39695_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb069ae8819c3a84d7f78becc5501e21ee3a9554/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr39695_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr39695_1.f90?ref=eb069ae8819c3a84d7f78becc5501e21ee3a9554", "patch": "@@ -0,0 +1,8 @@\n+! { dg-do compile }\n+!\n+\n+function f()\n+  intrinsic :: sin\n+  procedure(sin), pointer :: f ! { dg-error \"Procedure pointer 'f'\" }\n+  f => sin\n+end function f"}, {"sha": "8534724959a7a23cac7526b99c32a3a351a60edc", "filename": "gcc/testsuite/gfortran.dg/pr39695_2.f90", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb069ae8819c3a84d7f78becc5501e21ee3a9554/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr39695_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb069ae8819c3a84d7f78becc5501e21ee3a9554/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr39695_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr39695_2.f90?ref=eb069ae8819c3a84d7f78becc5501e21ee3a9554", "patch": "@@ -0,0 +1,12 @@\n+! { dg-do compile }\n+!\n+\n+function g()\n+ interface\n+    subroutine g()\n+    end subroutine g\n+  end interface\n+  pointer g\n+  real g   ! { dg-error \"Symbol 'g' at .1. cannot have a type\" }\n+end function\n+"}, {"sha": "661e2540bb3e898d2b166460bbbe27805c87c5b5", "filename": "gcc/testsuite/gfortran.dg/pr39695_3.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb069ae8819c3a84d7f78becc5501e21ee3a9554/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr39695_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb069ae8819c3a84d7f78becc5501e21ee3a9554/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr39695_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr39695_3.f90?ref=eb069ae8819c3a84d7f78becc5501e21ee3a9554", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+!\n+\n+function g()\n+ interface\n+    subroutine g()   ! { dg-error \"RESULT attribute in 'g'\" }\n+    end subroutine g\n+  end interface\n+  real g             ! { dg-error \"Symbol 'g' at .1. cannot have a type\" }\n+end function\n+"}, {"sha": "ecb0a43929fec99d5b71f37b4f6404f413feb8b8", "filename": "gcc/testsuite/gfortran.dg/pr39695_4.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb069ae8819c3a84d7f78becc5501e21ee3a9554/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr39695_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb069ae8819c3a84d7f78becc5501e21ee3a9554/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr39695_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr39695_4.f90?ref=eb069ae8819c3a84d7f78becc5501e21ee3a9554", "patch": "@@ -0,0 +1,14 @@\n+! { dg-do compile }\n+!\n+\n+function g()\n+  implicit none\n+  interface\n+    function g()\n+      integer g\n+    end function g\n+  end interface\n+  pointer g\n+  real g   ! { dg-error \"Symbol 'g' at .1. already has basic type of INTEGER\" }\n+end function\n+"}]}