{"sha": "7c1583bdd87c147898d0e2dc5b45c1017027884c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2MxNTgzYmRkODdjMTQ3ODk4ZDBlMmRjNWI0NWMxMDE3MDI3ODg0Yw==", "commit": {"author": {"name": "Kito Cheng", "email": "kito.cheng@gmail.com", "date": "2018-04-08T09:02:31Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2018-04-08T09:02:31Z"}, "message": "[NDS32] Implement e8 pipeline.\n\ngcc/\n\t* config.gcc (nds32*-*-*): Check that e8 is valid to --with-cpu.\n\t* config/nds32/nds32-e8.md: New file.\n\t* config/nds32/nds32-opts.h (nds32-cpu_type): Add CPU_E8.\n\t* config/nds32/nds32-pipelines-auxiliary.c: Implementation for e8\n\tpipeline.\n\t* config/nds32/nds32-protos.h: More declarations for e8 pipeline.\n\t* config/nds32/nds32.md (pipeline_model): Add e8.\n\t* config/nds32/nds32.opt (mcpu): Support e8 pipeline cpus.\n\t* config/nds32/pipelines.md: Include e8 settings.\n\nCo-Authored-By: Chung-Ju Wu <jasonwucj@gmail.com>\n\nFrom-SVN: r259220", "tree": {"sha": "fa703cdca8a2a8107f03f481949eb0f5db799bd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa703cdca8a2a8107f03f481949eb0f5db799bd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c1583bdd87c147898d0e2dc5b45c1017027884c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c1583bdd87c147898d0e2dc5b45c1017027884c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c1583bdd87c147898d0e2dc5b45c1017027884c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c1583bdd87c147898d0e2dc5b45c1017027884c/comments", "author": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8fd5214127adf2ee03865aa89f671cadded3fb9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fd5214127adf2ee03865aa89f671cadded3fb9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fd5214127adf2ee03865aa89f671cadded3fb9c"}], "stats": {"total": 518, "additions": 514, "deletions": 4}, "files": [{"sha": "970224ec842ad7890eb214c81259b2cb4770db1d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1583bdd87c147898d0e2dc5b45c1017027884c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1583bdd87c147898d0e2dc5b45c1017027884c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c1583bdd87c147898d0e2dc5b45c1017027884c", "patch": "@@ -1,3 +1,16 @@\n+2018-04-08  Kito Cheng  <kito.cheng@gmail.com>\n+\t    Chung-Ju Wu  <jasonwucj@gmail.com>\n+\n+\t* config.gcc (nds32*-*-*): Check that e8 is valid to --with-cpu.\n+\t* config/nds32/nds32-e8.md: New file.\n+\t* config/nds32/nds32-opts.h (nds32-cpu_type): Add CPU_E8.\n+\t* config/nds32/nds32-pipelines-auxiliary.c: Implementation for e8\n+\tpipeline.\n+\t* config/nds32/nds32-protos.h: More declarations for e8 pipeline.\n+\t* config/nds32/nds32.md (pipeline_model): Add e8.\n+\t* config/nds32/nds32.opt (mcpu): Support e8 pipeline cpus.\n+\t* config/nds32/pipelines.md: Include e8 settings.\n+\n 2018-04-08  Kito Cheng  <kito.cheng@gmail.com>\n \t    Chung-Ju Wu  <jasonwucj@gmail.com>\n "}, {"sha": "6fed7bc77405acd130f6cb2471d0bd051ce52305", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1583bdd87c147898d0e2dc5b45c1017027884c/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1583bdd87c147898d0e2dc5b45c1017027884c/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=7c1583bdd87c147898d0e2dc5b45c1017027884c", "patch": "@@ -4315,11 +4315,11 @@ case \"${target}\" in\n \t\t\"\")\n \t\t\twith_cpu=n9\n \t\t\t;;\n-\t\tn6 | n8 | s8 | n9)\n+\t\tn6 | n8 | e8 | s8 | n9)\n \t\t\t# OK\n \t\t\t;;\n \t\t*)\n-\t\t\techo \"Cannot accept --with-cpu=$with_cpu, available values are: n6 n8 s8 n9\" 1>&2\n+\t\t\techo \"Cannot accept --with-cpu=$with_cpu, available values are: n6 n8 e8 s8 n9\" 1>&2\n \t\t\texit 1\n \t\t\t;;\n \t\tesac"}, {"sha": "a4424778a402cc19a2f80f5545d7e3e4736f3018", "filename": "gcc/config/nds32/nds32-e8.md", "status": "added", "additions": 329, "deletions": 0, "changes": 329, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1583bdd87c147898d0e2dc5b45c1017027884c/gcc%2Fconfig%2Fnds32%2Fnds32-e8.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1583bdd87c147898d0e2dc5b45c1017027884c/gcc%2Fconfig%2Fnds32%2Fnds32-e8.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-e8.md?ref=7c1583bdd87c147898d0e2dc5b45c1017027884c", "patch": "@@ -0,0 +1,329 @@\n+;; Pipeline descriptions of Andes NDS32 cpu for GNU compiler\n+;; Copyright (C) 2012-2018 Free Software Foundation, Inc.\n+;; Contributed by Andes Technology Corporation.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+\n+;; ------------------------------------------------------------------------\n+;; Define E8 pipeline settings.\n+;; ------------------------------------------------------------------------\n+\n+(define_automaton \"nds32_e8_machine\")\n+\n+;; ------------------------------------------------------------------------\n+;; Pipeline Stages\n+;; ------------------------------------------------------------------------\n+;; IF - Instruction Fetch\n+;; II - Instruction Issue / Address Generation\n+;; EX - Instruction Execution\n+;; EXD - Psuedo Stage / Load Data Completion\n+\n+(define_cpu_unit \"e8_ii\" \"nds32_e8_machine\")\n+(define_cpu_unit \"e8_ex\" \"nds32_e8_machine\")\n+\n+(define_insn_reservation \"nds_e8_unknown\" 1\n+  (and (eq_attr \"type\" \"unknown\")\n+       (eq_attr \"pipeline_model\" \"e8\"))\n+  \"e8_ii, e8_ex\")\n+\n+(define_insn_reservation \"nds_e8_misc\" 1\n+  (and (eq_attr \"type\" \"misc\")\n+       (eq_attr \"pipeline_model\" \"e8\"))\n+  \"e8_ii, e8_ex\")\n+\n+(define_insn_reservation \"nds_e8_alu\" 1\n+  (and (eq_attr \"type\" \"alu\")\n+       (eq_attr \"pipeline_model\" \"e8\"))\n+  \"e8_ii, e8_ex\")\n+\n+(define_insn_reservation \"nds_e8_load\" 1\n+  (and (match_test \"nds32::load_single_p (insn)\")\n+       (eq_attr \"pipeline_model\" \"e8\"))\n+  \"e8_ii, e8_ex\")\n+\n+(define_insn_reservation \"nds_e8_store\" 1\n+  (and (match_test \"nds32::store_single_p (insn)\")\n+       (eq_attr \"pipeline_model\" \"e8\"))\n+  \"e8_ii, e8_ex\")\n+\n+(define_insn_reservation \"nds_e8_load_multiple_1\" 1\n+  (and (and (eq_attr \"type\" \"load_multiple\")\n+\t    (eq_attr \"combo\" \"1\"))\n+       (eq_attr \"pipeline_model\" \"e8\"))\n+  \"e8_ii, e8_ex\")\n+\n+(define_insn_reservation \"nds_e8_load_multiple_2\" 1\n+  (and (ior (and (eq_attr \"type\" \"load_multiple\")\n+\t\t (eq_attr \"combo\" \"2\"))\n+\t    (match_test \"nds32::load_double_p (insn)\"))\n+       (eq_attr \"pipeline_model\" \"e8\"))\n+  \"e8_ii, e8_ii+e8_ex, e8_ex\")\n+\n+(define_insn_reservation \"nds_e8_load_multiple_3\" 1\n+  (and (and (eq_attr \"type\" \"load_multiple\")\n+\t    (eq_attr \"combo\" \"3\"))\n+       (eq_attr \"pipeline_model\" \"e8\"))\n+  \"e8_ii, (e8_ii+e8_ex)*2, e8_ex\")\n+\n+(define_insn_reservation \"nds_e8_load_multiple_4\" 1\n+  (and (and (eq_attr \"type\" \"load_multiple\")\n+\t    (eq_attr \"combo\" \"4\"))\n+       (eq_attr \"pipeline_model\" \"e8\"))\n+  \"e8_ii, (e8_ii+e8_ex)*3, e8_ex\")\n+\n+(define_insn_reservation \"nds_e8_load_multiple_5\" 1\n+  (and (and (eq_attr \"type\" \"load_multiple\")\n+\t    (eq_attr \"combo\" \"5\"))\n+       (eq_attr \"pipeline_model\" \"e8\"))\n+  \"e8_ii, (e8_ii+e8_ex)*4, e8_ex\")\n+\n+(define_insn_reservation \"nds_e8_load_multiple_6\" 1\n+  (and (and (eq_attr \"type\" \"load_multiple\")\n+\t    (eq_attr \"combo\" \"6\"))\n+       (eq_attr \"pipeline_model\" \"e8\"))\n+  \"e8_ii, (e8_ii+e8_ex)*5, e8_ex\")\n+\n+(define_insn_reservation \"nds_e8_load_multiple_7\" 1\n+  (and (and (eq_attr \"type\" \"load_multiple\")\n+\t    (eq_attr \"combo\" \"7\"))\n+       (eq_attr \"pipeline_model\" \"e8\"))\n+  \"e8_ii, (e8_ii+e8_ex)*6, e8_ex\")\n+\n+(define_insn_reservation \"nds_e8_load_multiple_8\" 1\n+  (and (and (eq_attr \"type\" \"load_multiple\")\n+\t    (eq_attr \"combo\" \"8\"))\n+       (eq_attr \"pipeline_model\" \"e8\"))\n+  \"e8_ii, (e8_ii+e8_ex)*7, e8_ex\")\n+\n+(define_insn_reservation \"nds_e8_load_multiple_12\" 1\n+  (and (and (eq_attr \"type\" \"load_multiple\")\n+\t    (eq_attr \"combo\" \"12\"))\n+       (eq_attr \"pipeline_model\" \"e8\"))\n+  \"e8_ii, (e8_ii+e8_ex)*11, e8_ex\")\n+\n+(define_insn_reservation \"nds_e8_store_multiple_1\" 1\n+  (and (and (eq_attr \"type\" \"store_multiple\")\n+\t    (eq_attr \"combo\" \"1\"))\n+       (eq_attr \"pipeline_model\" \"e8\"))\n+  \"e8_ii, e8_ex\")\n+\n+(define_insn_reservation \"nds_e8_store_multiple_2\" 1\n+  (and (ior (and (eq_attr \"type\" \"store_multiple\")\n+\t\t (eq_attr \"combo\" \"2\"))\n+\t    (match_test \"nds32::store_double_p (insn)\"))\n+       (eq_attr \"pipeline_model\" \"e8\"))\n+  \"e8_ii, e8_ii+e8_ex, e8_ex\")\n+\n+(define_insn_reservation \"nds_e8_store_multiple_3\" 1\n+  (and (and (eq_attr \"type\" \"store_multiple\")\n+\t    (eq_attr \"combo\" \"3\"))\n+       (eq_attr \"pipeline_model\" \"e8\"))\n+  \"e8_ii, (e8_ii+e8_ex)*2, e8_ex\")\n+\n+(define_insn_reservation \"nds_e8_store_multiple_4\" 1\n+  (and (and (eq_attr \"type\" \"store_multiple\")\n+\t    (eq_attr \"combo\" \"4\"))\n+       (eq_attr \"pipeline_model\" \"e8\"))\n+  \"e8_ii, (e8_ii+e8_ex)*3, e8_ex\")\n+\n+(define_insn_reservation \"nds_e8_store_multiple_5\" 1\n+  (and (and (eq_attr \"type\" \"store_multiple\")\n+\t    (eq_attr \"combo\" \"5\"))\n+       (eq_attr \"pipeline_model\" \"e8\"))\n+  \"e8_ii, (e8_ii+e8_ex)*4, e8_ex\")\n+\n+(define_insn_reservation \"nds_e8_store_multiple_6\" 1\n+  (and (and (eq_attr \"type\" \"store_multiple\")\n+\t    (eq_attr \"combo\" \"6\"))\n+       (eq_attr \"pipeline_model\" \"e8\"))\n+  \"e8_ii, (e8_ii+e8_ex)*5, e8_ex\")\n+\n+(define_insn_reservation \"nds_e8_store_multiple_7\" 1\n+  (and (and (eq_attr \"type\" \"store_multiple\")\n+\t    (eq_attr \"combo\" \"7\"))\n+       (eq_attr \"pipeline_model\" \"e8\"))\n+  \"e8_ii, (e8_ii+e8_ex)*6, e8_ex\")\n+\n+(define_insn_reservation \"nds_e8_store_multiple_8\" 1\n+  (and (and (eq_attr \"type\" \"store_multiple\")\n+\t    (eq_attr \"combo\" \"8\"))\n+       (eq_attr \"pipeline_model\" \"e8\"))\n+  \"e8_ii, (e8_ii+e8_ex)*7, e8_ex\")\n+\n+(define_insn_reservation \"nds_e8_store_multiple_12\" 1\n+  (and (and (eq_attr \"type\" \"store_multiple\")\n+\t    (eq_attr \"combo\" \"12\"))\n+       (eq_attr \"pipeline_model\" \"e8\"))\n+  \"e8_ii, (e8_ii+e8_ex)*11, e8_ex\")\n+\n+(define_insn_reservation \"nds_e8_mul_fast\" 1\n+  (and (match_test \"nds32_mul_config != MUL_TYPE_SLOW\")\n+       (and (eq_attr \"type\" \"mul\")\n+\t    (eq_attr \"pipeline_model\" \"e8\")))\n+  \"e8_ii, e8_ex\")\n+\n+(define_insn_reservation \"nds_e8_mul_slow\" 1\n+  (and (match_test \"nds32_mul_config == MUL_TYPE_SLOW\")\n+       (and (eq_attr \"type\" \"mul\")\n+\t    (eq_attr \"pipeline_model\" \"e8\")))\n+  \"e8_ii, e8_ex*16\")\n+\n+(define_insn_reservation \"nds_e8_mac_fast\" 1\n+  (and (match_test \"nds32_mul_config != MUL_TYPE_SLOW\")\n+       (and (eq_attr \"type\" \"mac\")\n+\t    (eq_attr \"pipeline_model\" \"e8\")))\n+  \"e8_ii, e8_ii+e8_ex, e8_ex\")\n+\n+(define_insn_reservation \"nds_e8_mac_slow\" 1\n+  (and (match_test \"nds32_mul_config == MUL_TYPE_SLOW\")\n+       (and (eq_attr \"type\" \"mac\")\n+\t    (eq_attr \"pipeline_model\" \"e8\")))\n+  \"e8_ii, (e8_ii+e8_ex)*16, e8_ex\")\n+\n+(define_insn_reservation \"nds_e8_div\" 1\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"pipeline_model\" \"e8\"))\n+  \"e8_ii, (e8_ii+e8_ex)*36, e8_ex\")\n+\n+(define_insn_reservation \"nds_e8_branch\" 1\n+  (and (eq_attr \"type\" \"branch\")\n+       (eq_attr \"pipeline_model\" \"e8\"))\n+  \"e8_ii, e8_ex\")\n+\n+;; ------------------------------------------------------------------------\n+;; Comment Notations and Bypass Rules\n+;; ------------------------------------------------------------------------\n+;; Producers (LHS)\n+;;   LD\n+;;     Load data from the memory and produce the loaded data. The result is\n+;;     ready at EXD.\n+;;   LMW(N, M)\n+;;     There are N micro-operations within an instruction that loads multiple\n+;;     words. The result produced by the M-th micro-operation is sent to\n+;;     consumers. The result is ready at EXD.\n+;;   ADDR_OUT\n+;;     Most load/store instructions can produce an address output if updating\n+;;     the base register is required. The result is ready at EX, which is\n+;;     produced by ALU.\n+;;   ALU, MOVD44, MUL, MAC\n+;;     The result is ready at EX.\n+;;   DIV_Rs\n+;;     A division instruction saves the quotient result to Rt and saves the\n+;;     remainder result to Rs. The instruction is separated into two micro-\n+;;     operations. The first micro-operation writes to Rt, and the seconde\n+;;     one writes to Rs. Each of the results is ready at EX.\n+;;\n+;; Consumers (RHS)\n+;;   ALU, MUL, DIV\n+;;     Require operands at EX.\n+;;   ADDR_IN_MOP(N)\n+;;      N denotes the address input is required by the N-th micro-operation.\n+;;      Such operand is required at II.\n+;;   ST\n+;;     A store instruction requires its data at EX.\n+;;   SMW(N, M)\n+;;     There are N micro-operations within an instruction that stores multiple\n+;;     words. Each M-th micro-operation requires its data at EX.\n+;;   BR_COND\n+;;     If a branch instruction is conditional, its input data is required at EX.\n+\n+;; LD -> ADDR_IN_MOP(1)\n+(define_bypass 2\n+  \"nds_e8_load\"\n+  \"nds_e8_branch,\\\n+   nds_e8_load, nds_e8_store,\\\n+   nds_e8_load_multiple_1,nds_e8_load_multiple_2, nds_e8_load_multiple_3,\\\n+   nds_e8_load_multiple_4,nds_e8_load_multiple_5, nds_e8_load_multiple_6,\\\n+   nds_e8_load_multiple_7,nds_e8_load_multiple_8, nds_e8_load_multiple_12,\\\n+   nds_e8_store_multiple_1,nds_e8_store_multiple_2, nds_e8_store_multiple_3,\\\n+   nds_e8_store_multiple_4,nds_e8_store_multiple_5, nds_e8_store_multiple_6,\\\n+   nds_e8_store_multiple_7,nds_e8_store_multiple_8, nds_e8_store_multiple_12\"\n+  \"nds32_e8_load_to_ii_p\"\n+)\n+\n+;; LD -> ALU, MUL, MAC, DIV, BR_COND, ST, SMW(N, 1)\n+(define_bypass 2\n+  \"nds_e8_load\"\n+  \"nds_e8_alu,\n+   nds_e8_mul_fast, nds_e8_mul_slow,\\\n+   nds_e8_mac_fast, nds_e8_mac_slow,\\\n+   nds_e8_div,\\\n+   nds_e8_branch,\\\n+   nds_e8_store,\\\n+   nds_e8_store_multiple_1,nds_e8_store_multiple_2, nds_e8_store_multiple_3,\\\n+   nds_e8_store_multiple_4,nds_e8_store_multiple_5, nds_e8_store_multiple_6,\\\n+   nds_e8_store_multiple_7,nds_e8_store_multiple_8, nds_e8_store_multiple_12\"\n+  \"nds32_e8_load_to_ex_p\"\n+)\n+\n+;; ALU, MOVD44, MUL, MAC, DIV_Rs, LD_bi, ADDR_OUT -> ADDR_IN_MOP(1)\n+(define_bypass 2\n+  \"nds_e8_alu,\n+   nds_e8_mul_fast, nds_e8_mul_slow,\\\n+   nds_e8_mac_fast, nds_e8_mac_slow,\\\n+   nds_e8_div,\\\n+   nds_e8_load, nds_e8_store,\\\n+   nds_e8_load_multiple_1,nds_e8_load_multiple_2, nds_e8_load_multiple_3,\\\n+   nds_e8_load_multiple_4,nds_e8_load_multiple_5, nds_e8_load_multiple_6,\\\n+   nds_e8_load_multiple_7,nds_e8_load_multiple_8, nds_e8_load_multiple_12,\\\n+   nds_e8_store_multiple_1,nds_e8_store_multiple_2, nds_e8_store_multiple_3,\\\n+   nds_e8_store_multiple_4,nds_e8_store_multiple_5, nds_e8_store_multiple_6,\\\n+   nds_e8_store_multiple_7,nds_e8_store_multiple_8, nds_e8_store_multiple_12\"\n+  \"nds_e8_branch,\\\n+   nds_e8_load, nds_e8_store,\\\n+   nds_e8_load_multiple_1,nds_e8_load_multiple_2, nds_e8_load_multiple_3,\\\n+   nds_e8_load_multiple_4,nds_e8_load_multiple_5, nds_e8_load_multiple_6,\\\n+   nds_e8_load_multiple_7,nds_e8_load_multiple_8, nds_e8_load_multiple_12,\\\n+   nds_e8_store_multiple_1,nds_e8_store_multiple_2, nds_e8_store_multiple_3,\\\n+   nds_e8_store_multiple_4,nds_e8_store_multiple_5, nds_e8_store_multiple_6,\\\n+   nds_e8_store_multiple_7,nds_e8_store_multiple_8, nds_e8_store_multiple_12\"\n+  \"nds32_e8_ex_to_ii_p\"\n+)\n+\n+;; LMW(N, N) -> ADDR_IN_MOP(1)\n+(define_bypass 2\n+  \"nds_e8_load_multiple_1,nds_e8_load_multiple_2, nds_e8_load_multiple_3,\\\n+   nds_e8_load_multiple_4,nds_e8_load_multiple_5, nds_e8_load_multiple_6,\\\n+   nds_e8_load_multiple_7,nds_e8_load_multiple_8, nds_e8_load_multiple_12\"\n+  \"nds_e8_branch,\\\n+   nds_e8_load, nds_e8_store,\\\n+   nds_e8_load_multiple_1,nds_e8_load_multiple_2, nds_e8_load_multiple_3,\\\n+   nds_e8_load_multiple_4,nds_e8_load_multiple_5, nds_e8_load_multiple_6,\\\n+   nds_e8_load_multiple_7,nds_e8_load_multiple_8, nds_e8_load_multiple_12,\\\n+   nds_e8_store_multiple_1,nds_e8_store_multiple_2, nds_e8_store_multiple_3,\\\n+   nds_e8_store_multiple_4,nds_e8_store_multiple_5, nds_e8_store_multiple_6,\\\n+   nds_e8_store_multiple_7,nds_e8_store_multiple_8, nds_e8_store_multiple_12\"\n+  \"nds32_e8_last_load_to_ii_p\"\n+)\n+\n+;; LMW(N, N) -> ALU, MUL, MAC, DIV, BR_COND, ST, SMW(N, 1)\n+(define_bypass 2\n+  \"nds_e8_load_multiple_1,nds_e8_load_multiple_2, nds_e8_load_multiple_3,\\\n+   nds_e8_load_multiple_4,nds_e8_load_multiple_5, nds_e8_load_multiple_6,\\\n+   nds_e8_load_multiple_7,nds_e8_load_multiple_8, nds_e8_load_multiple_12\"\n+  \"nds_e8_alu,\n+   nds_e8_mul_fast, nds_e8_mul_slow,\\\n+   nds_e8_mac_fast, nds_e8_mac_slow,\\\n+   nds_e8_div,\\\n+   nds_e8_branch,\\\n+   nds_e8_store,\\\n+   nds_e8_store_multiple_1,nds_e8_store_multiple_2, nds_e8_store_multiple_3,\\\n+   nds_e8_store_multiple_4,nds_e8_store_multiple_5, nds_e8_store_multiple_6,\\\n+   nds_e8_store_multiple_7,nds_e8_store_multiple_8, nds_e8_store_multiple_12\"\n+  \"nds32_e8_last_load_to_ex_p\"\n+)"}, {"sha": "8a19899e3da8ef5171db0db88d563003b05fe5db", "filename": "gcc/config/nds32/nds32-opts.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1583bdd87c147898d0e2dc5b45c1017027884c/gcc%2Fconfig%2Fnds32%2Fnds32-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1583bdd87c147898d0e2dc5b45c1017027884c/gcc%2Fconfig%2Fnds32%2Fnds32-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-opts.h?ref=7c1583bdd87c147898d0e2dc5b45c1017027884c", "patch": "@@ -39,6 +39,7 @@ enum nds32_cpu_type\n {\n   CPU_N6,\n   CPU_N8,\n+  CPU_E8,\n   CPU_N9,\n   CPU_SIMPLE\n };"}, {"sha": "def793fa52e09c854e0aa2c2b292c1069a16a58e", "filename": "gcc/config/nds32/nds32-pipelines-auxiliary.c", "status": "modified", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1583bdd87c147898d0e2dc5b45c1017027884c/gcc%2Fconfig%2Fnds32%2Fnds32-pipelines-auxiliary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1583bdd87c147898d0e2dc5b45c1017027884c/gcc%2Fconfig%2Fnds32%2Fnds32-pipelines-auxiliary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-pipelines-auxiliary.c?ref=7c1583bdd87c147898d0e2dc5b45c1017027884c", "patch": "@@ -445,6 +445,42 @@ n8_consumed_by_ex_p (rtx_insn *consumer, rtx def_reg)\n   return reg_overlap_p (def_reg, use_rtx);\n }\n \n+/* Check the dependency between the producer defining DEF_REG and CONSUMER\n+   requiring input operand at AG (II).  */\n+bool\n+e8_consumed_by_addr_in_p (rtx_insn *consumer, rtx def_reg)\n+{\n+  return n8_consumed_by_addr_in_p (consumer, def_reg);\n+}\n+\n+/* Check the dependency between the producer defining DEF_REG and CONSUMER\n+   requiring input operand at EX.  */\n+bool\n+e8_consumed_by_ex_p (rtx_insn *consumer, rtx def_reg)\n+{\n+  rtx use_rtx;\n+\n+  switch (get_attr_type (consumer))\n+    {\n+    case TYPE_ALU:\n+    case TYPE_STORE:\n+      use_rtx = SET_SRC (PATTERN (consumer));\n+      break;\n+\n+    case TYPE_MUL:\n+    case TYPE_MAC:\n+    case TYPE_DIV:\n+    case TYPE_BRANCH:\n+    case TYPE_STORE_MULTIPLE:\n+      return n8_consumed_by_ex_p (consumer, def_reg);\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  return reg_overlap_p (def_reg, use_rtx);\n+}\n+\n /* Check the dependency between the producer defining DEF_REG and CONSUMER\n    requiring input operand at EX.  */\n bool\n@@ -762,6 +798,108 @@ nds32_n8_last_load_to_ex_p (rtx_insn *producer, rtx_insn *consumer)\n   return n8_consumed_by_ex_p (consumer, last_def_reg);\n }\n \n+/* Guard functions for E8 cores.  */\n+\n+bool\n+nds32_e8_load_to_ii_p (rtx_insn *producer, rtx_insn *consumer)\n+{\n+  rtx def_reg = SET_DEST (PATTERN (producer));\n+\n+  return e8_consumed_by_addr_in_p (consumer, def_reg);\n+}\n+\n+bool\n+nds32_e8_load_to_ex_p (rtx_insn *producer, rtx_insn *consumer)\n+{\n+  rtx def_reg = SET_DEST (PATTERN (producer));\n+\n+  return e8_consumed_by_ex_p (consumer, def_reg);\n+}\n+\n+bool\n+nds32_e8_ex_to_ii_p (rtx_insn *producer, rtx_insn *consumer)\n+{\n+  rtx def_reg;\n+\n+  switch (get_attr_type (producer))\n+    {\n+    case TYPE_ALU:\n+      /* No data hazards if AGEN's input is produced by MOVI or SETHI.  */\n+      if (GET_CODE (PATTERN (producer)) == SET)\n+\t{\n+\t  rtx dest = SET_DEST (PATTERN (producer));\n+\t  rtx src = SET_SRC (PATTERN (producer));\n+\n+\t  if ((REG_P (dest) || GET_CODE (dest) == SUBREG)\n+\t      && (GET_CODE (src) == CONST_INT || GET_CODE (src) == HIGH))\n+\t    return false;\n+\t}\n+\n+      def_reg = SET_DEST (PATTERN (producer));\n+      break;\n+\n+    case TYPE_MUL:\n+    case TYPE_MAC:\n+      def_reg = SET_DEST (PATTERN (producer));\n+      break;\n+\n+    case TYPE_DIV:\n+      if (INSN_CODE (producer) == CODE_FOR_divmodsi4\n+\t  || INSN_CODE (producer) == CODE_FOR_udivmodsi4)\n+\t{\n+\t  rtx def_reg1 = SET_DEST (parallel_element (producer, 0));\n+\t  rtx def_reg2 = SET_DEST (parallel_element (producer, 1));\n+\n+\t  return (e8_consumed_by_addr_in_p (consumer, def_reg1)\n+\t\t  || e8_consumed_by_addr_in_p (consumer, def_reg2));\n+\t}\n+\n+      def_reg = SET_DEST (PATTERN (producer));\n+      break;\n+\n+    case TYPE_LOAD:\n+    case TYPE_STORE:\n+    case TYPE_LOAD_MULTIPLE:\n+    case TYPE_STORE_MULTIPLE:\n+      if (!post_update_insn_p (producer))\n+\treturn false;\n+\n+      def_reg = extract_base_reg (producer);\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  return e8_consumed_by_addr_in_p (consumer, def_reg);\n+}\n+\n+bool\n+nds32_e8_last_load_to_ii_p (rtx_insn *producer, rtx_insn *consumer)\n+{\n+  rtx last_def_reg = extract_nth_access_reg (producer, -1);\n+\n+  if (last_def_reg == NULL_RTX)\n+    return false;\n+\n+  gcc_assert (REG_P (last_def_reg) || GET_CODE (last_def_reg) == SUBREG);\n+\n+  return e8_consumed_by_addr_in_p (consumer, last_def_reg);\n+}\n+\n+bool\n+nds32_e8_last_load_to_ex_p (rtx_insn *producer, rtx_insn *consumer)\n+{\n+  rtx last_def_reg = extract_nth_access_reg (producer, -1);\n+\n+  if (last_def_reg == NULL_RTX)\n+    return false;\n+\n+  gcc_assert (REG_P (last_def_reg) || GET_CODE (last_def_reg) == SUBREG);\n+\n+  return e8_consumed_by_ex_p (consumer, last_def_reg);\n+}\n+\n /* Guard functions for N9 cores.  */\n \n /* Check dependencies from MM to EX.  */"}, {"sha": "5aefa0700e8ee77a0d99ef948e5e60d97ce32df9", "filename": "gcc/config/nds32/nds32-protos.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1583bdd87c147898d0e2dc5b45c1017027884c/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1583bdd87c147898d0e2dc5b45c1017027884c/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h?ref=7c1583bdd87c147898d0e2dc5b45c1017027884c", "patch": "@@ -107,6 +107,12 @@ extern bool nds32_n8_last_load_to_ii_p (rtx_insn *, rtx_insn *);\n extern bool nds32_n8_last_load_two_to_ii_p (rtx_insn *, rtx_insn *);\n extern bool nds32_n8_last_load_to_ex_p (rtx_insn *, rtx_insn *);\n \n+extern bool nds32_e8_load_to_ii_p (rtx_insn *, rtx_insn *);\n+extern bool nds32_e8_load_to_ex_p (rtx_insn *, rtx_insn *);\n+extern bool nds32_e8_ex_to_ii_p (rtx_insn *, rtx_insn *);\n+extern bool nds32_e8_last_load_to_ii_p (rtx_insn *, rtx_insn *);\n+extern bool nds32_e8_last_load_to_ex_p (rtx_insn *, rtx_insn *);\n+\n extern bool nds32_n9_2r1w_mm_to_ex_p (rtx_insn *, rtx_insn *);\n extern bool nds32_n9_3r2w_mm_to_ex_p (rtx_insn *, rtx_insn *);\n extern bool nds32_n9_last_load_to_ex_p (rtx_insn *, rtx_insn *);"}, {"sha": "1bc36e4c139cf0c63e9ead2723631fd5505262bb", "filename": "gcc/config/nds32/nds32.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1583bdd87c147898d0e2dc5b45c1017027884c/gcc%2Fconfig%2Fnds32%2Fnds32.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1583bdd87c147898d0e2dc5b45c1017027884c/gcc%2Fconfig%2Fnds32%2Fnds32.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.md?ref=7c1583bdd87c147898d0e2dc5b45c1017027884c", "patch": "@@ -56,9 +56,10 @@\n ;; ------------------------------------------------------------------------\n \n ;; CPU pipeline model.\n-(define_attr \"pipeline_model\" \"n8,n9,simple\"\n+(define_attr \"pipeline_model\" \"n8,e8,n9,simple\"\n   (const\n-    (cond [(match_test \"nds32_cpu_option == CPU_N6 || nds32_cpu_option == CPU_N8\")  (const_string \"n8\")\n+    (cond [(match_test \"nds32_cpu_option == CPU_E8\")  (const_string \"e8\")\n+\t   (match_test \"nds32_cpu_option == CPU_N6 || nds32_cpu_option == CPU_N8\")  (const_string \"n8\")\n \t   (match_test \"nds32_cpu_option == CPU_N9\")  (const_string \"n9\")\n \t   (match_test \"nds32_cpu_option == CPU_SIMPLE\") (const_string \"simple\")]\n \t  (const_string \"n9\"))))"}, {"sha": "f5f31eb21b919153a9f3267a9b39113142e964c7", "filename": "gcc/config/nds32/nds32.opt", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1583bdd87c147898d0e2dc5b45c1017027884c/gcc%2Fconfig%2Fnds32%2Fnds32.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1583bdd87c147898d0e2dc5b45c1017027884c/gcc%2Fconfig%2Fnds32%2Fnds32.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.opt?ref=7c1583bdd87c147898d0e2dc5b45c1017027884c", "patch": "@@ -198,6 +198,21 @@ Enum(nds32_cpu_type) String(s8) Value(CPU_N8)\n EnumValue\n Enum(nds32_cpu_type) String(s801) Value(CPU_N8)\n \n+EnumValue\n+Enum(nds32_cpu_type) String(e8) Value(CPU_E8)\n+\n+EnumValue\n+Enum(nds32_cpu_type) String(e801) Value(CPU_E8)\n+\n+EnumValue\n+Enum(nds32_cpu_type) String(n820) Value(CPU_E8)\n+\n+EnumValue\n+Enum(nds32_cpu_type) String(s830) Value(CPU_E8)\n+\n+EnumValue\n+Enum(nds32_cpu_type) String(e830) Value(CPU_E8)\n+\n EnumValue\n Enum(nds32_cpu_type) String(n9) Value(CPU_N9)\n "}, {"sha": "03701fce2ee499c61ca887b68b26cf295b227cfa", "filename": "gcc/config/nds32/pipelines.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1583bdd87c147898d0e2dc5b45c1017027884c/gcc%2Fconfig%2Fnds32%2Fpipelines.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1583bdd87c147898d0e2dc5b45c1017027884c/gcc%2Fconfig%2Fnds32%2Fpipelines.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fpipelines.md?ref=7c1583bdd87c147898d0e2dc5b45c1017027884c", "patch": "@@ -23,6 +23,13 @@\n ;; ------------------------------------------------------------------------\n (include \"nds32-n8.md\")\n \n+\n+;; ------------------------------------------------------------------------\n+;; Include E8 pipeline settings.\n+;; ------------------------------------------------------------------------\n+(include \"nds32-e8.md\")\n+\n+\n ;; ------------------------------------------------------------------------\n ;; Include N9/N10 pipeline settings.\n ;; ------------------------------------------------------------------------"}]}