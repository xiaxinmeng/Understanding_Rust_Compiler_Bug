{"sha": "33124e84a822225b1a2bc5a157da4d22212df624", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzMxMjRlODRhODIyMjI1YjFhMmJjNWExNTdkYTRkMjIyMTJkZjYyNA==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2010-09-12T20:33:15Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2010-09-12T20:33:15Z"}, "message": "frv.h (REGISTER_MOVE_COST, [...]): Remove.\n\n\t* config/frv/frv.h (REGISTER_MOVE_COST, MEMORY_MOVE_COST): Remove.\n\t* config/frv/frv-protos.h (frv_register_move_cost): Remove.\n\t* config/frv/frv.c (frv_register_move_cost): Make static. Change\n\targuments type to reg_class_t. Add mode argument.\n\t(frv_memory_move_cost): New.\n\t(TARGET_REGISTER_MOVE_COSTS, TARGET_MEMORY_MOVE_COSTS): Define.\n\nFrom-SVN: r164233", "tree": {"sha": "799990809d4d43520e3c8c8dd49a3ba51c29c1df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/799990809d4d43520e3c8c8dd49a3ba51c29c1df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33124e84a822225b1a2bc5a157da4d22212df624", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33124e84a822225b1a2bc5a157da4d22212df624", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33124e84a822225b1a2bc5a157da4d22212df624", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33124e84a822225b1a2bc5a157da4d22212df624/comments", "author": null, "committer": null, "parents": [{"sha": "2cea21ddb8c390d1d9d7cc38e4c93a1722699c39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cea21ddb8c390d1d9d7cc38e4c93a1722699c39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cea21ddb8c390d1d9d7cc38e4c93a1722699c39"}], "stats": {"total": 76, "additions": 33, "deletions": 43}, "files": [{"sha": "db8a1fd63cdb3df67b5d56c7734fd17996a05f89", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33124e84a822225b1a2bc5a157da4d22212df624/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33124e84a822225b1a2bc5a157da4d22212df624/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=33124e84a822225b1a2bc5a157da4d22212df624", "patch": "@@ -1,3 +1,12 @@\n+2010-09-12  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/frv/frv.h (REGISTER_MOVE_COST, MEMORY_MOVE_COST): Remove.\n+\t* config/frv/frv-protos.h (frv_register_move_cost): Remove.\n+\t* config/frv/frv.c (frv_register_move_cost): Make static. Change\n+\targuments type to reg_class_t. Add mode argument.\n+\t(frv_memory_move_cost): New.\n+\t(TARGET_REGISTER_MOVE_COSTS, TARGET_MEMORY_MOVE_COSTS): Define.\n+\n 2010-09-12  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* config/arm/arm.md (arm_ashldi3_1bit, arm_ashrdi3_1bit,"}, {"sha": "976a71e2ef6a343c3e7c16fb48b432c92d5ce92b", "filename": "gcc/config/frv/frv-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33124e84a822225b1a2bc5a157da4d22212df624/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33124e84a822225b1a2bc5a157da4d22212df624/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h?ref=33124e84a822225b1a2bc5a157da4d22212df624", "patch": "@@ -111,7 +111,6 @@ extern enum machine_mode frv_select_cc_mode (enum rtx_code, rtx, rtx);\n #endif\t/* RTX_CODE */\n \n extern int direct_return_p\t\t(void);\n-extern int frv_register_move_cost\t(enum reg_class, enum reg_class);\n extern int frv_issue_rate\t\t(void);\n extern int frv_acc_group\t\t(rtx);\n "}, {"sha": "8560bc14a8e403150367868db57de68787195b69", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33124e84a822225b1a2bc5a157da4d22212df624/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33124e84a822225b1a2bc5a157da4d22212df624/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=33124e84a822225b1a2bc5a157da4d22212df624", "patch": "@@ -371,6 +371,10 @@ static void frv_setup_incoming_varargs\t\t(CUMULATIVE_ARGS *,\n static rtx frv_expand_builtin_saveregs\t\t(void);\n static void frv_expand_builtin_va_start\t\t(tree, rtx);\n static bool frv_rtx_costs\t\t\t(rtx, int, int, int*, bool);\n+static int frv_register_move_cost\t\t(enum machine_mode,\n+\t\t\t\t\t\t reg_class_t, reg_class_t);\n+static int frv_memory_move_cost\t\t\t(enum machine_mode,\n+\t\t\t\t\t\t reg_class_t, bool);\n static void frv_asm_out_constructor\t\t(rtx, int);\n static void frv_asm_out_destructor\t\t(rtx, int);\n static bool frv_function_symbol_referenced_p\t(rtx);\n@@ -432,6 +436,10 @@ static bool frv_class_likely_spilled_p \t\t(reg_class_t);\n #define TARGET_INIT_LIBFUNCS frv_init_libfuncs\n #undef TARGET_IN_SMALL_DATA_P\n #define TARGET_IN_SMALL_DATA_P frv_in_small_data_p\n+#undef TARGET_REGISTER_MOVE_COST\n+#define TARGET_REGISTER_MOVE_COST frv_register_move_cost\n+#undef TARGET_MEMORY_MOVE_COST\n+#define TARGET_MEMORY_MOVE_COST frv_memory_move_cost\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS frv_rtx_costs\n #undef TARGET_ASM_CONSTRUCTOR\n@@ -6908,28 +6916,16 @@ frv_select_cc_mode (enum rtx_code code, rtx x, rtx y)\n     }\n }\n \f\n-/* A C expression for the cost of moving data from a register in class FROM to\n-   one in class TO.  The classes are expressed using the enumeration values\n-   such as `GENERAL_REGS'.  A value of 4 is the default; other values are\n-   interpreted relative to that.\n-\n-   It is not required that the cost always equal 2 when FROM is the same as TO;\n-   on some machines it is expensive to move between registers if they are not\n-   general registers.\n-\n-   If reload sees an insn consisting of a single `set' between two hard\n-   registers, and if `REGISTER_MOVE_COST' applied to their classes returns a\n-   value of 2, reload does not check to ensure that the constraints of the insn\n-   are met.  Setting a cost of other than 2 will allow reload to verify that\n-   the constraints are met.  You should do this if the `movM' pattern's\n-   constraints do not allow such copying.  */\n+\n+/* Worker function for TARGET_REGISTER_MOVE_COST.  */\n \n #define HIGH_COST 40\n #define MEDIUM_COST 3\n #define LOW_COST 1\n \n-int\n-frv_register_move_cost (enum reg_class from, enum reg_class to)\n+static int\n+frv_register_move_cost (enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\treg_class_t from, reg_class_t to)\n {\n   switch (from)\n     {\n@@ -7012,6 +7008,17 @@ frv_register_move_cost (enum reg_class from, enum reg_class to)\n \n   return HIGH_COST;\n }\n+\n+/* Worker function for TARGET_MEMORY_MOVE_COST.  */\n+\n+static int\n+frv_memory_move_cost (enum machine_mode mode ATTRIBUTE_UNUSED,\n+                      reg_class_t rclass ATTRIBUTE_UNUSED,\n+                      bool in ATTRIBUTE_UNUSED)\n+{\n+  return 4;\n+}\n+\n \f\n /* Implementation of TARGET_ASM_INTEGER.  In the FRV case we need to\n    use \".picptr\" to generate safe relocations for PIC code.  We also"}, {"sha": "75acccb54e1bf0c19d23f45525a88d65e7b5c490", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33124e84a822225b1a2bc5a157da4d22212df624/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33124e84a822225b1a2bc5a157da4d22212df624/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=33124e84a822225b1a2bc5a157da4d22212df624", "patch": "@@ -1946,31 +1946,6 @@ __asm__(\"\\n\"\t\t\t\t\t\t\t\t\\\n \f\n /* Describing Relative Costs of Operations.  */\n \n-/* A C expression for the cost of moving data from a register in class FROM to\n-   one in class TO.  The classes are expressed using the enumeration values\n-   such as `GENERAL_REGS'.  A value of 4 is the default; other values are\n-   interpreted relative to that.\n-\n-   It is not required that the cost always equal 2 when FROM is the same as TO;\n-   on some machines it is expensive to move between registers if they are not\n-   general registers.\n-\n-   If reload sees an insn consisting of a single `set' between two hard\n-   registers, and if `REGISTER_MOVE_COST' applied to their classes returns a\n-   value of 2, reload does not check to ensure that the constraints of the insn\n-   are met.  Setting a cost of other than 2 will allow reload to verify that\n-   the constraints are met.  You should do this if the `movM' pattern's\n-   constraints do not allow such copying.  */\n-#define REGISTER_MOVE_COST(MODE, FROM, TO) frv_register_move_cost (FROM, TO)\n-\n-/* A C expression for the cost of moving data of mode M between a register and\n-   memory.  A value of 2 is the default; this cost is relative to those in\n-   `REGISTER_MOVE_COST'.\n-\n-   If moving between registers and memory is more expensive than between two\n-   registers, you should define this macro to express the relative cost.  */\n-#define MEMORY_MOVE_COST(M,C,I) 4\n-\n /* A C expression for the cost of a branch instruction.  A value of 1 is the\n    default; other values are interpreted relative to that.  */\n #define BRANCH_COST(speed_p, predictable_p) frv_branch_cost_int"}]}