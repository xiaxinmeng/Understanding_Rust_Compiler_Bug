{"sha": "87891d5eafe8d1de90b9d9b056eca81c508d1c77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc4OTFkNWVhZmU4ZDFkZTkwYjlkOWIwNTZlY2E4MWM1MDhkMWM3Nw==", "commit": {"author": {"name": "Sergei Trofimovich", "email": "siarheit@google.com", "date": "2020-07-14T06:48:42Z"}, "committer": {"name": "Sergei Trofimovich", "email": "siarheit@google.com", "date": "2020-07-20T19:46:30Z"}, "message": "sparc/sparc64: use crtendS.o for default-pie executables [PR96190]\n\nIn --enable-default-pie mode compiler should switch from\nusing crtend.o to crtendS.o. On sparc it is especially important\nbecause crtend.o contains PIC-unfriendly code.\n\nWe use GNU_USER_TARGET_ENDFILE_SPEC as a baseline spec to get\ncrtendS.o instead of crtend.o in !no-pie mode.\n\ngcc:\n\n2020-07-14  Sergei Trofimovich  <siarheit@google.com>\n\n\tPR target/96190\n\t* config/sparc/linux.h (ENDFILE_SPEC): Use GNU_USER_TARGET_ENDFILE_SPEC\n\tto get crtendS.o for !no-pie mode.\n\t* config/sparc/linux64.h (ENDFILE_SPEC): Ditto.", "tree": {"sha": "2d00b11328673304d65108966fdce7de759c43fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d00b11328673304d65108966fdce7de759c43fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87891d5eafe8d1de90b9d9b056eca81c508d1c77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87891d5eafe8d1de90b9d9b056eca81c508d1c77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87891d5eafe8d1de90b9d9b056eca81c508d1c77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87891d5eafe8d1de90b9d9b056eca81c508d1c77/comments", "author": {"login": "trofi", "id": 226650, "node_id": "MDQ6VXNlcjIyNjY1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/226650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trofi", "html_url": "https://github.com/trofi", "followers_url": "https://api.github.com/users/trofi/followers", "following_url": "https://api.github.com/users/trofi/following{/other_user}", "gists_url": "https://api.github.com/users/trofi/gists{/gist_id}", "starred_url": "https://api.github.com/users/trofi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trofi/subscriptions", "organizations_url": "https://api.github.com/users/trofi/orgs", "repos_url": "https://api.github.com/users/trofi/repos", "events_url": "https://api.github.com/users/trofi/events{/privacy}", "received_events_url": "https://api.github.com/users/trofi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "trofi", "id": 226650, "node_id": "MDQ6VXNlcjIyNjY1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/226650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trofi", "html_url": "https://github.com/trofi", "followers_url": "https://api.github.com/users/trofi/followers", "following_url": "https://api.github.com/users/trofi/following{/other_user}", "gists_url": "https://api.github.com/users/trofi/gists{/gist_id}", "starred_url": "https://api.github.com/users/trofi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trofi/subscriptions", "organizations_url": "https://api.github.com/users/trofi/orgs", "repos_url": "https://api.github.com/users/trofi/repos", "events_url": "https://api.github.com/users/trofi/events{/privacy}", "received_events_url": "https://api.github.com/users/trofi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d1c5b4957db2cb07f1053b7b87767275497d52e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d1c5b4957db2cb07f1053b7b87767275497d52e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d1c5b4957db2cb07f1053b7b87767275497d52e"}], "stats": {"total": 20, "additions": 4, "deletions": 16}, "files": [{"sha": "63853e60c039977669fd1845074b612f6d050c66", "filename": "gcc/config/sparc/linux.h", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87891d5eafe8d1de90b9d9b056eca81c508d1c77/gcc%2Fconfig%2Fsparc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87891d5eafe8d1de90b9d9b056eca81c508d1c77/gcc%2Fconfig%2Fsparc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux.h?ref=87891d5eafe8d1de90b9d9b056eca81c508d1c77", "patch": "@@ -27,16 +27,10 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-/* Provide a ENDFILE_SPEC appropriate for GNU/Linux.  Here we tack on\n-   the GNU/Linux magical crtend.o file (see crtstuff.c) which\n-   provides part of the support for getting C++ file-scope static\n-   object constructed before entering `main', followed by a normal\n-   GNU/Linux \"finalizer\" file, `crtn.o'.  */\n-\n #undef  ENDFILE_SPEC\n #define ENDFILE_SPEC \\\n-  \"%{shared|pie:crtendS.o%s;:crtend.o%s} crtn.o%s\\\n-   %{Ofast|ffast-math|funsafe-math-optimizations:crtfastmath.o%s}\"\n+  GNU_USER_TARGET_ENDFILE_SPEC \\\n+  \"%{Ofast|ffast-math|funsafe-math-optimizations:crtfastmath.o%s}\"\n \n /* -mcpu=native handling only makes sense with compiler running on\n    a SPARC chip.  */"}, {"sha": "19ce84d7adb046991cd27aca323274dd2582564e", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87891d5eafe8d1de90b9d9b056eca81c508d1c77/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87891d5eafe8d1de90b9d9b056eca81c508d1c77/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=87891d5eafe8d1de90b9d9b056eca81c508d1c77", "patch": "@@ -44,16 +44,10 @@ along with GCC; see the file COPYING3.  If not see\n #undef ASM_CPU64_DEFAULT_SPEC\n #define ASM_CPU64_DEFAULT_SPEC \"-Av9a\"\n \n-/* Provide a ENDFILE_SPEC appropriate for GNU/Linux.  Here we tack on\n-   the GNU/Linux magical crtend.o file (see crtstuff.c) which\n-   provides part of the support for getting C++ file-scope static\n-   object constructed before entering `main', followed by a normal\n-   GNU/Linux \"finalizer\" file, `crtn.o'.  */\n-\n #undef\tENDFILE_SPEC\n #define ENDFILE_SPEC \\\n-  \"%{shared|pie:crtendS.o%s;:crtend.o%s} crtn.o%s\\\n-   %{Ofast|ffast-math|funsafe-math-optimizations:crtfastmath.o%s}\"\n+  GNU_USER_TARGET_ENDFILE_SPEC \\\n+  \"%{Ofast|ffast-math|funsafe-math-optimizations:crtfastmath.o%s}\"\n \n /* The default code model.  */\n #undef SPARC_DEFAULT_CMODEL"}]}