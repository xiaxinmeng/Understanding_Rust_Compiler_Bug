{"sha": "ee896276f6483832d45c9280915367c825c32098", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU4OTYyNzZmNjQ4MzgzMmQ0NWM5MjgwOTE1MzY3YzgyNWMzMjA5OA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-07-02T21:05:08Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-07-02T21:05:08Z"}, "message": "P0887R1 The identity metafunction\n\n\t* include/std/type_traits (type_identity, type_identity_t): Define\n        for C++2a.\n\t* testsuite/20_util/type_identity/requirements/alias_decl.cc: New.\n\t* testsuite/20_util/type_identity/requirements/\n\texplicit_instantiation.cc:New.\n\t* testsuite/20_util/type_identity/requirements/typedefs.cc: New.\n\nFrom-SVN: r262319", "tree": {"sha": "107fdf2482d18e2dad783a2337526e15a89460c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/107fdf2482d18e2dad783a2337526e15a89460c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee896276f6483832d45c9280915367c825c32098", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee896276f6483832d45c9280915367c825c32098", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee896276f6483832d45c9280915367c825c32098", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee896276f6483832d45c9280915367c825c32098/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e112d53acae3d4ce8783d8fd5f396cc45443c010", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e112d53acae3d4ce8783d8fd5f396cc45443c010", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e112d53acae3d4ce8783d8fd5f396cc45443c010"}], "stats": {"total": 173, "additions": 173, "deletions": 0}, "files": [{"sha": "c6e84be460234808bb0b8a242210804723c40529", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee896276f6483832d45c9280915367c825c32098/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee896276f6483832d45c9280915367c825c32098/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ee896276f6483832d45c9280915367c825c32098", "patch": "@@ -1,5 +1,13 @@\n 2018-07-02  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tP0887R1 The identity metafunction\n+\t* include/std/type_traits (type_identity, type_identity_t): Define\n+\tfor C++2a.\n+\t* testsuite/20_util/type_identity/requirements/alias_decl.cc: New.\n+\t* testsuite/20_util/type_identity/requirements/\n+\texplicit_instantiation.cc:New.\n+\t* testsuite/20_util/type_identity/requirements/typedefs.cc: New.\n+\n \t* include/bits/regex.h (sub_match::operator string_type): Call str().\n \t(sub_match::compare): Use _M_str() instead of str().\n \t(sub_match::_M_compare): New public function."}, {"sha": "b2d3380f024694843d584a49c71d6c51acab4081", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee896276f6483832d45c9280915367c825c32098/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee896276f6483832d45c9280915367c825c32098/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=ee896276f6483832d45c9280915367c825c32098", "patch": "@@ -2996,6 +2996,13 @@ template <typename _From, typename _To>\n   template<typename _Tp>\n     using remove_cvref_t = __remove_cvref_t<_Tp>;\n \n+  /// Identity metafunction.\n+  template<typename _Tp>\n+    struct type_identity { using type = _Tp; };\n+\n+  template<typename _Tp>\n+    using type_identity_t = typename type_identity<_Tp>::type;\n+\n #endif // C++2a\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "6729d1182733bea0eb01a3771a67d2902902377c", "filename": "libstdc++-v3/testsuite/20_util/type_identity/requirements/alias_decl.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee896276f6483832d45c9280915367c825c32098/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftype_identity%2Frequirements%2Falias_decl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee896276f6483832d45c9280915367c825c32098/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftype_identity%2Frequirements%2Falias_decl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftype_identity%2Frequirements%2Falias_decl.cc?ref=ee896276f6483832d45c9280915367c825c32098", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+//\n+#include <type_traits>\n+\n+using namespace std;\n+\n+template<typename T, typename = std::type_identity_t<T>>\n+  struct test; // undefined\n+\n+template<typename T>\n+  struct test<T, T> : std::true_type { };\n+\n+static_assert( test<const int>{}, \"type_identity_t<const int>\" );\n+static_assert( test<volatile int>{}, \"type_identity_t<volatile int>\" );\n+static_assert( test<unsigned>{}, \"type_identity_t<unsigned>\" );\n+static_assert( test<char>{}, \"type_identity_t<char>\" );\n+static_assert( test<signed char>{}, \"type_identity_t<signed char>\" );"}, {"sha": "07387e719ce13a14c6c062a73a4f61128a352f2f", "filename": "libstdc++-v3/testsuite/20_util/type_identity/requirements/explicit_instantiation.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee896276f6483832d45c9280915367c825c32098/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftype_identity%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee896276f6483832d45c9280915367c825c32098/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftype_identity%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftype_identity%2Frequirements%2Fexplicit_instantiation.cc?ref=ee896276f6483832d45c9280915367c825c32098", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct type_identity<test_type>;\n+}"}, {"sha": "77f0cba9b4c52493905ecf8568c2da9d296051a0", "filename": "libstdc++-v3/testsuite/20_util/type_identity/requirements/typedefs.cc", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee896276f6483832d45c9280915367c825c32098/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftype_identity%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee896276f6483832d45c9280915367c825c32098/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftype_identity%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftype_identity%2Frequirements%2Ftypedefs.cc?ref=ee896276f6483832d45c9280915367c825c32098", "patch": "@@ -0,0 +1,94 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <type_traits>\n+\n+template<typename T, typename = typename std::type_identity<T>::type>\n+  struct test; // undefined\n+\n+template<typename T>\n+  struct test<T, T> : std::true_type { };\n+\n+enum test_enum { };\n+struct test_class { };\n+struct incomplete_class;\n+\n+void test01()\n+{\n+  static_assert(test<float>::value, \"\");\n+  static_assert(test<const unsigned int>::value, \"\");\n+  static_assert(test<const unsigned int>::value, \"\");\n+  static_assert(test<volatile unsigned int>::value, \"\");\n+  static_assert(test<const volatile unsigned int>::value, \"\");\n+  static_assert(test<const unsigned char>::value, \"\");\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  static_assert(test<volatile wchar_t>::value, \"\" );\n+#endif\n+\n+  // Pointers\n+  static_assert(test<void*>::value, \"\");\n+  static_assert(test<long*>::value, \"\");\n+  // References\n+  static_assert(test<short&>::value, \"\");\n+  static_assert(test<char&&>::value, \"\");\n+  static_assert(test<int*&>::value, \"\");\n+  // Arrays\n+  static_assert(test<int[]>::value, \"\");\n+  static_assert(test<int[2]>::value, \"\");\n+  static_assert(test<int[2][3]>::value, \"\");\n+  static_assert(test<int(*)[2]>::value, \"\");\n+  static_assert(test<int(&)[2]>::value, \"\");\n+\n+  static_assert(test<test_enum>::value, \"\");\n+  static_assert(test<test_class>::value, \"\");\n+  static_assert(test<incomplete_class>::value, \"\");\n+\n+  // Functions\n+  static_assert(test<void(*)()>::value, \"\");\n+  static_assert(test<int(*)(int) noexcept>::value, \"\");\n+  static_assert(test<void(&)()>::value, \"\");\n+  static_assert(test<long(&)(long) noexcept>::value, \"\");\n+  static_assert(test<void()>::value, \"\");\n+  static_assert(test<int(int, int)>::value, \"\");\n+  static_assert(test<void() noexcept>::value, \"\");\n+  static_assert(test<int(int, int) noexcept>::value, \"\");\n+\n+  // Abominable function types\n+  static_assert(test<void(int) const>::value, \"\");\n+  static_assert(test<void(int) const volatile>::value, \"\");\n+\n+  // Pointers to members\n+  static_assert(test<int incomplete_class::*>::value, \"\");\n+  static_assert(test<void(incomplete_class::*)(int)>::value, \"\");\n+  static_assert(test<void(incomplete_class::*)(int) noexcept>::value, \"\");\n+  static_assert(test<void(incomplete_class::*)() const>::value, \"\");\n+  static_assert(test<void(incomplete_class::*)() &>::value, \"\");\n+  static_assert(test<void(incomplete_class::*)() &&>::value, \"\");\n+  static_assert(test<void(incomplete_class::*)() volatile &&>::value, \"\");\n+\n+#ifndef __STRICT_ANSI__\n+  // GNU Extensions.\n+#ifdef _GLIBCXX_USE_INT128\n+  static_assert(test<unsigned __int128>::value, \"\");\n+  static_assert(test<unsigned __int128>::value, \"\");\n+#endif\n+#endif\n+}"}]}