{"sha": "9b95612ecf4e64e443ab38d7673b39972d78daa8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI5NTYxMmVjZjRlNjRlNDQzYWIzOGQ3NjczYjM5OTcyZDc4ZGFhOA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2013-11-27T02:26:25Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2013-11-27T02:26:25Z"}, "message": "Fix checking of gimple types\n\n\t* gengtype.c (struct seen_tag): New.\n\t(already_seen_tag): New.\n\t(mark_tag_as_seen): New.\n\t(walk_subclasses): Support having multiple subclasses using the\n\tsame tag by tracking which tags have already been seen, and using\n\tthis to avoid adding duplicate cases to the \"switch\" statement.\n\tThe call to already_seen_tag introduces an O(N^2) when running\n\tgengtype on N, the number of tags, due to the repeated linear\n\tsearch, but currently max(N) is relatively small (the number of\n\tGSS codes, which is 26).\n\t(walk_type): Pass in a seen_tag for use by the walk_subclasses\n\trecursion.\n\n\t* gimple.def (GIMPLE_OMP_ATOMIC_STORE, GIMPLE_OMP_RETURN): Rename\n\tunderlying GSS values for these codes (from GSS_OMP_ATOMIC_STORE to\n\tGSS_OMP_ATOMIC_STORE_LAYOUT) to make clear that although\n\tGIMPLE_OMP_RETURN happens to share the data layout of\n\tGIMPLE_OMP_ATOMIC_STORE, they are not otherwise related.\n\t(GIMPLE_OMP_PARALLEL, GIMPLE_OMP_TARGET): Likewise, rename\n\tunderlying GSS value from GSS_OMP_PARALLEL to\n\tGSS_OMP_PARALLEL_LAYOUT to make clear that these gimple codes are\n\tnot directly related; they merely share in-memory layout.\n\t(GIMPLE_OMP_SINGLE, GIMPLE_OMP_TEAMS): Likewise, rename GSS values\n\tfor these two codes from GSS_OMP_SINGLE to GSS_OMP_SINGLE_LAYOUT.\n\n\t* gsstruct.def (GSS_OMP_PARALLEL, gimple_statement_omp_parallel):\n\tRename to...\n\t(GSS_OMP_PARALLEL_LAYOUT, gimple_statement_omp_parallel_layout):\n\t...these.\n\t(GSS_OMP_SINGLE, gimple_statement_omp_single): Rename to...\n\t(GSS_OMP_SINGLE_LAYOUT, gimple_statement_omp_single_layout):\n\t...these.\n\t(GSS_OMP_ATOMIC_STORE, gimple_statement_omp_atomic_store): Rename\n\tto...\n\t(GSS_OMP_ATOMIC_STORE_LAYOUT, gimple_statement_omp_atomic_store):\n\t...these.\n\n\t* gimple.h (gimple_statement_resx): New subclass of\n\tgimple_statement_eh_ctrl, with the invariant that\n\tstmt->code == GIMPLE_RESX.\n\t(gimple_statement_eh_dispatch): New subclass of\n\tgimple_statement_eh_ctrl, with the invariant that\n\tstmt->code == GIMPLE_EH_DISPATH.\n\n\t(gimple_statement_omp_parallel): The existing class expressed\n\ta layout (GSS_OMP_PARALLEL), but the codes with that layout\n\tare not all related, so it makes more sense for this class to\n\texpress a *code* (GIMPLE_OMP_PARALLEL).  GSS_OMP_PARALLEL has\n\tbeen renamed to GSS_OMP_PARALLEL_LAYOUT to express this, so\n\trename the existing gimple_statement_omp_parallel class to...\n\t(gimple_statement_omp_parallel_layout): ...this, expressing\n\ta statement of structure layout GSS_OMP_PARALLEL_LAYOUT.\n\t(gimple_statement_omp_taskreg): New subclass of\n\tgimple_statement_omp_parallel_layout, expressing the invariant\n\tthat the code is one of GIMPLE_OMP_PARALLEL or GIMPLE_OMP_TASK,\n\tas used by the various gimple_omp_taskreg_ accessors.\n\t(gimple_statement_omp_parallel): Reintroduce this class, this time\n\tas a subclass of gimple_statement_omp_taskreg to express the\n\tinvariant stmt->code == GIMPLE_OMP_PARALLEL.\n\t(gimple_statement_omp_target) New class, subclassing\n\tgimple_statement_omp_parallel_layout, to express the invariant\n\tstmt->code == GIMPLE_OMP_TARGET.\n\t(gimple_statement_omp_task): Update to inherit from\n\tgimple_statement_omp_taskreg rather than\n\tgimple_statement_omp_parallel.\n\n\t(gimple_statement_omp_single): Rename to...\n\t(gimple_statement_omp_single_layout): ...this, expressing the\n\tinvariant that the layout is GSS_OMP_SINGLE_LAYOUT.\n\t(gimple_statement_omp_single): ...and reintroduce this name as\n\ta subclass of gimple_statement_omp_single_layout, expressing\n\tthe invariant that code == GIMPLE_OMP_SINGLE.\n\t(gimple_statement_omp_teams): New class, subclassing\n\tgimple_statement_omp_single_layout, for the code GIMPLE_OMP_TEAMS.\n\n\t(gimple_statement_omp_atomic_store): Rename to...\n\t(gimple_statement_omp_atomic_store_layout): ...this, expressing\n\tthe invariant that the layout is GSS_OMP_ATOMIC_STORE_LAYOUT.\n\t(gimple_statement_omp_atomic_store): ...and reintroduce this\n\tname as a subclass of gimple_statement_omp_atomic_store_layout\n\twith code == GIMPLE_OMP_ATOMIC_STORE.\n\t(gimple_statement_omp_return): New class, subclassing\n\tgimple_statement_omp_atomic_store_layout for the code\n\tGIMPLE_OMP_RETURN.\n\n\t(is_a_helper <gimple_statement_eh_ctrl>::test): Delete.\n\t(is_a_helper <gimple_statement_resx>::test): New.\n\t(is_a_helper <gimple_statement_eh_dispatch>::test): New.\n\t(is_a_helper <gimple_statement_omp_atomic_store>::test): Only\n\tcheck for GIMPLE_OMP_ATOMIC_STORE, not for GIMPLE_OMP_RETURN.\n\t(is_a_helper <gimple_statement_omp_return>::test): New.\n\t(is_a_helper <gimple_statement_omp_taskreg>::test): New.\n\t(is_a_helper <gimple_statement_omp_parallel>::test): Only check\n\tfor GIMPLE_OMP_PARALLEL, not for GIMPLE_OMP_TASK or\n\tGIMPLE_OMP_TARGET.\n\t(is_a_helper <gimple_statement_omp_target>::test): New.\n\t(is_a_helper <gimple_statement_omp_single>::test): Only check\n\tfor GIMPLE_OMP_SINGLE, not for GIMPLE_OMP_TEAMS.\n\t(is_a_helper <gimple_statement_omp_teams>::test): New.\n\n\t(is_a_helper <const gimple_statement_eh_ctrl>::test): Delete.\n\t(is_a_helper <const gimple_statement_resx>::test): New.\n\t(is_a_helper <const gimple_statement_eh_dispatch>::test): New.\n\t(is_a_helper <const gimple_statement_omp_atomic_store>::test): Only\n\tcheck for GIMPLE_OMP_ATOMIC_STORE, not for GIMPLE_OMP_RETURN.\n\t(is_a_helper <const gimple_statement_omp_return>::test): New.\n\t(is_a_helper <const gimple_statement_omp_taskreg>::test): New.\n\t(is_a_helper <const gimple_statement_omp_parallel>::test): Only\n\tcheck for GIMPLE_OMP_PARALLEL, not for GIMPLE_OMP_TASK or\n\tGIMPLE_OMP_TARGET.\n\t(is_a_helper <const gimple_statement_omp_target>::test): New.\n\t(is_a_helper <const gimple_statement_omp_single>::test): Only\n\tcheck for GIMPLE_OMP_SINGLE, not for GIMPLE_OMP_TEAMS.\n\t(is_a_helper <const gimple_statement_omp_teams>::test): New.\n\n\t(gimple_omp_return_set_lhs, gimple_omp_return_lhs,\n\tgimple_omp_return_lhs_ptr): Replace bogus downcasts to\n\tgimple_statement_omp_atomic_store with downcasts to\n\tgimple_statement_omp_return, thus requiring that the code be\n\tGIMPLE_OMP_RETURN.\n\t(gimple_resx_region, gimple_resx_set_region): Replace bogus\n\tdowncasts to gimple_statement_eh_ctrl with downcasts to\n\tgimple_statement_resx, thus requiring that the code be\n\tGIMPLE_RESX.\n\t(gimple_eh_dispatch_region, gimple_eh_dispatch_set_region):\n\tReplace bogus downcasts to const gimple_statement_eh_ctrl with\n\tdowncasts to gimple_statement_eh_dispatch, thus requiring that\n\tthe code be GIMPLE_EH_DISPATCH.\n\t(gimple_omp_taskreg_clauses, gimple_omp_taskreg_clauses_ptr)\n\tgimple_omp_taskreg_set_clauses, gimple_omp_taskreg_child_fn,\n\tgimple_omp_taskreg_child_fn_ptr, gimple_omp_taskreg_set_child_fn,\n\tgimple_omp_taskreg_data_arg, gimple_omp_taskreg_data_arg_ptr,\n\tgimple_omp_taskreg_set_data_arg): Replace bogus downcasts to\n\tgimple_statement_omp_parallel with downcasts to\n\tgimple_statement_omp_taskreg, thus requiring that the code be\n\teither GIMPLE_OMP_PARALLEL or GIMPLE_OMP_TASK.\n\t(gimple_omp_target_clauses, gimple_omp_target_clauses_ptr\n\tgimple_omp_target_set_clauses, gimple_omp_target_child_fn\n\tgimple_omp_target_child_fn_ptr, gimple_omp_target_set_child_fn\n\tgimple_omp_target_data_arg, gimple_omp_target_data_arg_ptr\n\tgimple_omp_target_set_data_arg): Replace bogus downcasts to\n\tgimple_statement_omp_parallel with downcasts to\n\tgimple_statement_omp_target, thus requiring that the code be\n\tGIMPLE_OMP_TARGET.\n\t(gimple_omp_teams_clauses, gimple_omp_teams_clauses_ptr\n\tgimple_omp_teams_set_clauses): Replace bogus downcasts to\n\tgimple_statement_omp_single with downcasts to\n\tgimple_statement_omp_teams, thus requiring that the code be\n\tGIMPLE_OMP_TEAMS.\n\n\t* gimple.c (gimple_build_resx): Fix bogus as_a<> to use\n\tgimple_statement_resx.\n\t(gimple_build_eh_dispatch): Fix bogus as_a<> to use\n\tgimple_statement_eh_dispatch.\n\nFrom-SVN: r205428", "tree": {"sha": "f5f612a3b7357f3aed086fc81067a0543df7116f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5f612a3b7357f3aed086fc81067a0543df7116f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b95612ecf4e64e443ab38d7673b39972d78daa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b95612ecf4e64e443ab38d7673b39972d78daa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b95612ecf4e64e443ab38d7673b39972d78daa8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b95612ecf4e64e443ab38d7673b39972d78daa8/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "815ca4d336e254a4869946343460afc8ff6b21c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/815ca4d336e254a4869946343460afc8ff6b21c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/815ca4d336e254a4869946343460afc8ff6b21c7"}], "stats": {"total": 579, "additions": 458, "deletions": 121}, "files": [{"sha": "abb3b3f56b2ff9c1b0579c4a06a7fce2fa491f83", "filename": "gcc/ChangeLog", "status": "modified", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b95612ecf4e64e443ab38d7673b39972d78daa8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b95612ecf4e64e443ab38d7673b39972d78daa8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b95612ecf4e64e443ab38d7673b39972d78daa8", "patch": "@@ -1,3 +1,160 @@\n+2013-11-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gengtype.c (struct seen_tag): New.\n+\t(already_seen_tag): New.\n+\t(mark_tag_as_seen): New.\n+\t(walk_subclasses): Support having multiple subclasses using the\n+\tsame tag by tracking which tags have already been seen, and using\n+\tthis to avoid adding duplicate cases to the \"switch\" statement.\n+\tThe call to already_seen_tag introduces an O(N^2) when running\n+\tgengtype on N, the number of tags, due to the repeated linear\n+\tsearch, but currently max(N) is relatively small (the number of\n+\tGSS codes, which is 26).\n+\t(walk_type): Pass in a seen_tag for use by the walk_subclasses\n+\trecursion.\n+\n+\t* gimple.def (GIMPLE_OMP_ATOMIC_STORE, GIMPLE_OMP_RETURN): Rename\n+\tunderlying GSS values for these codes (from GSS_OMP_ATOMIC_STORE to\n+\tGSS_OMP_ATOMIC_STORE_LAYOUT) to make clear that although\n+\tGIMPLE_OMP_RETURN happens to share the data layout of\n+\tGIMPLE_OMP_ATOMIC_STORE, they are not otherwise related.\n+\t(GIMPLE_OMP_PARALLEL, GIMPLE_OMP_TARGET): Likewise, rename\n+\tunderlying GSS value from GSS_OMP_PARALLEL to\n+\tGSS_OMP_PARALLEL_LAYOUT to make clear that these gimple codes are\n+\tnot directly related; they merely share in-memory layout.\n+\t(GIMPLE_OMP_SINGLE, GIMPLE_OMP_TEAMS): Likewise, rename GSS values\n+\tfor these two codes from GSS_OMP_SINGLE to GSS_OMP_SINGLE_LAYOUT.\n+\n+\t* gsstruct.def (GSS_OMP_PARALLEL, gimple_statement_omp_parallel):\n+\tRename to...\n+\t(GSS_OMP_PARALLEL_LAYOUT, gimple_statement_omp_parallel_layout):\n+\t...these.\n+\t(GSS_OMP_SINGLE, gimple_statement_omp_single): Rename to...\n+\t(GSS_OMP_SINGLE_LAYOUT, gimple_statement_omp_single_layout):\n+\t...these.\n+\t(GSS_OMP_ATOMIC_STORE, gimple_statement_omp_atomic_store): Rename\n+\tto...\n+\t(GSS_OMP_ATOMIC_STORE_LAYOUT, gimple_statement_omp_atomic_store):\n+\t...these.\n+\n+\t* gimple.h (gimple_statement_resx): New subclass of\n+\tgimple_statement_eh_ctrl, with the invariant that\n+\tstmt->code == GIMPLE_RESX.\n+\t(gimple_statement_eh_dispatch): New subclass of\n+\tgimple_statement_eh_ctrl, with the invariant that\n+\tstmt->code == GIMPLE_EH_DISPATH.\n+\n+\t(gimple_statement_omp_parallel): The existing class expressed\n+\ta layout (GSS_OMP_PARALLEL), but the codes with that layout\n+\tare not all related, so it makes more sense for this class to\n+\texpress a *code* (GIMPLE_OMP_PARALLEL).  GSS_OMP_PARALLEL has\n+\tbeen renamed to GSS_OMP_PARALLEL_LAYOUT to express this, so\n+\trename the existing gimple_statement_omp_parallel class to...\n+\t(gimple_statement_omp_parallel_layout): ...this, expressing\n+\ta statement of structure layout GSS_OMP_PARALLEL_LAYOUT.\n+\t(gimple_statement_omp_taskreg): New subclass of\n+\tgimple_statement_omp_parallel_layout, expressing the invariant\n+\tthat the code is one of GIMPLE_OMP_PARALLEL or GIMPLE_OMP_TASK,\n+\tas used by the various gimple_omp_taskreg_ accessors.\n+\t(gimple_statement_omp_parallel): Reintroduce this class, this time\n+\tas a subclass of gimple_statement_omp_taskreg to express the\n+\tinvariant stmt->code == GIMPLE_OMP_PARALLEL.\n+\t(gimple_statement_omp_target) New class, subclassing\n+\tgimple_statement_omp_parallel_layout, to express the invariant\n+\tstmt->code == GIMPLE_OMP_TARGET.\n+\t(gimple_statement_omp_task): Update to inherit from\n+\tgimple_statement_omp_taskreg rather than\n+\tgimple_statement_omp_parallel.\n+\n+\t(gimple_statement_omp_single): Rename to...\n+\t(gimple_statement_omp_single_layout): ...this, expressing the\n+\tinvariant that the layout is GSS_OMP_SINGLE_LAYOUT.\n+\t(gimple_statement_omp_single): ...and reintroduce this name as\n+\ta subclass of gimple_statement_omp_single_layout, expressing\n+\tthe invariant that code == GIMPLE_OMP_SINGLE.\n+\t(gimple_statement_omp_teams): New class, subclassing\n+\tgimple_statement_omp_single_layout, for the code GIMPLE_OMP_TEAMS.\n+\n+\t(gimple_statement_omp_atomic_store): Rename to...\n+\t(gimple_statement_omp_atomic_store_layout): ...this, expressing\n+\tthe invariant that the layout is GSS_OMP_ATOMIC_STORE_LAYOUT.\n+\t(gimple_statement_omp_atomic_store): ...and reintroduce this\n+\tname as a subclass of gimple_statement_omp_atomic_store_layout\n+\twith code == GIMPLE_OMP_ATOMIC_STORE.\n+\t(gimple_statement_omp_return): New class, subclassing\n+\tgimple_statement_omp_atomic_store_layout for the code\n+\tGIMPLE_OMP_RETURN.\n+\n+\t(is_a_helper <gimple_statement_eh_ctrl>::test): Delete.\n+\t(is_a_helper <gimple_statement_resx>::test): New.\n+\t(is_a_helper <gimple_statement_eh_dispatch>::test): New.\n+\t(is_a_helper <gimple_statement_omp_atomic_store>::test): Only\n+\tcheck for GIMPLE_OMP_ATOMIC_STORE, not for GIMPLE_OMP_RETURN.\n+\t(is_a_helper <gimple_statement_omp_return>::test): New.\n+\t(is_a_helper <gimple_statement_omp_taskreg>::test): New.\n+\t(is_a_helper <gimple_statement_omp_parallel>::test): Only check\n+\tfor GIMPLE_OMP_PARALLEL, not for GIMPLE_OMP_TASK or\n+\tGIMPLE_OMP_TARGET.\n+\t(is_a_helper <gimple_statement_omp_target>::test): New.\n+\t(is_a_helper <gimple_statement_omp_single>::test): Only check\n+\tfor GIMPLE_OMP_SINGLE, not for GIMPLE_OMP_TEAMS.\n+\t(is_a_helper <gimple_statement_omp_teams>::test): New.\n+\n+\t(is_a_helper <const gimple_statement_eh_ctrl>::test): Delete.\n+\t(is_a_helper <const gimple_statement_resx>::test): New.\n+\t(is_a_helper <const gimple_statement_eh_dispatch>::test): New.\n+\t(is_a_helper <const gimple_statement_omp_atomic_store>::test): Only\n+\tcheck for GIMPLE_OMP_ATOMIC_STORE, not for GIMPLE_OMP_RETURN.\n+\t(is_a_helper <const gimple_statement_omp_return>::test): New.\n+\t(is_a_helper <const gimple_statement_omp_taskreg>::test): New.\n+\t(is_a_helper <const gimple_statement_omp_parallel>::test): Only\n+\tcheck for GIMPLE_OMP_PARALLEL, not for GIMPLE_OMP_TASK or\n+\tGIMPLE_OMP_TARGET.\n+\t(is_a_helper <const gimple_statement_omp_target>::test): New.\n+\t(is_a_helper <const gimple_statement_omp_single>::test): Only\n+\tcheck for GIMPLE_OMP_SINGLE, not for GIMPLE_OMP_TEAMS.\n+\t(is_a_helper <const gimple_statement_omp_teams>::test): New.\n+\n+\t(gimple_omp_return_set_lhs, gimple_omp_return_lhs,\n+\tgimple_omp_return_lhs_ptr): Replace bogus downcasts to\n+\tgimple_statement_omp_atomic_store with downcasts to\n+\tgimple_statement_omp_return, thus requiring that the code be\n+\tGIMPLE_OMP_RETURN.\n+\t(gimple_resx_region, gimple_resx_set_region): Replace bogus\n+\tdowncasts to gimple_statement_eh_ctrl with downcasts to\n+\tgimple_statement_resx, thus requiring that the code be\n+\tGIMPLE_RESX.\n+\t(gimple_eh_dispatch_region, gimple_eh_dispatch_set_region):\n+\tReplace bogus downcasts to const gimple_statement_eh_ctrl with\n+\tdowncasts to gimple_statement_eh_dispatch, thus requiring that\n+\tthe code be GIMPLE_EH_DISPATCH.\n+\t(gimple_omp_taskreg_clauses, gimple_omp_taskreg_clauses_ptr)\n+\tgimple_omp_taskreg_set_clauses, gimple_omp_taskreg_child_fn,\n+\tgimple_omp_taskreg_child_fn_ptr, gimple_omp_taskreg_set_child_fn,\n+\tgimple_omp_taskreg_data_arg, gimple_omp_taskreg_data_arg_ptr,\n+\tgimple_omp_taskreg_set_data_arg): Replace bogus downcasts to\n+\tgimple_statement_omp_parallel with downcasts to\n+\tgimple_statement_omp_taskreg, thus requiring that the code be\n+\teither GIMPLE_OMP_PARALLEL or GIMPLE_OMP_TASK.\n+\t(gimple_omp_target_clauses, gimple_omp_target_clauses_ptr\n+\tgimple_omp_target_set_clauses, gimple_omp_target_child_fn\n+\tgimple_omp_target_child_fn_ptr, gimple_omp_target_set_child_fn\n+\tgimple_omp_target_data_arg, gimple_omp_target_data_arg_ptr\n+\tgimple_omp_target_set_data_arg): Replace bogus downcasts to\n+\tgimple_statement_omp_parallel with downcasts to\n+\tgimple_statement_omp_target, thus requiring that the code be\n+\tGIMPLE_OMP_TARGET.\n+\t(gimple_omp_teams_clauses, gimple_omp_teams_clauses_ptr\n+\tgimple_omp_teams_set_clauses): Replace bogus downcasts to\n+\tgimple_statement_omp_single with downcasts to\n+\tgimple_statement_omp_teams, thus requiring that the code be\n+\tGIMPLE_OMP_TEAMS.\n+\n+\t* gimple.c (gimple_build_resx): Fix bogus as_a<> to use\n+\tgimple_statement_resx.\n+\t(gimple_build_eh_dispatch): Fix bogus as_a<> to use\n+\tgimple_statement_eh_dispatch.\n+\n 2013-11-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/59014"}, {"sha": "ca7ce4d968e8f46b83603fa0e8a296f3b28aae56", "filename": "gcc/gengtype.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b95612ecf4e64e443ab38d7673b39972d78daa8/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b95612ecf4e64e443ab38d7673b39972d78daa8/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=9b95612ecf4e64e443ab38d7673b39972d78daa8", "patch": "@@ -2657,15 +2657,48 @@ get_string_option (options_p opt, const char *key)\n   return NULL;\n }\n \n+/* Machinery for avoiding duplicate tags within switch statements.  */\n+struct seen_tag\n+{\n+  const char *tag;\n+  struct seen_tag *next;\n+};\n+\n+int\n+already_seen_tag (struct seen_tag *seen_tags, const char *tag)\n+{\n+  /* Linear search, so O(n^2), but n is currently small.  */\n+  while (seen_tags)\n+    {\n+      if (!strcmp (seen_tags->tag, tag))\n+\treturn 1;\n+      seen_tags = seen_tags->next;\n+    }\n+  /* Not yet seen this tag. */\n+  return 0;\n+}\n+\n+void\n+mark_tag_as_seen (struct seen_tag **seen_tags, const char *tag)\n+{\n+  /* Add to front of linked list. */\n+  struct seen_tag *new_node = XCNEW (struct seen_tag);\n+  new_node->tag = tag;\n+  new_node->next = *seen_tags;\n+  *seen_tags = new_node;\n+}\n+\n static void\n-walk_subclasses (type_p base, struct walk_type_data *d)\n+walk_subclasses (type_p base, struct walk_type_data *d,\n+\t\t struct seen_tag **seen_tags)\n {\n   for (type_p sub = base->u.s.first_subclass; sub != NULL;\n        sub = sub->u.s.next_sibling_class)\n     {\n       const char *type_tag = get_string_option (sub->u.s.opt, \"tag\");\n-      if (type_tag)\n+      if (type_tag && !already_seen_tag (*seen_tags, type_tag))\n \t{\n+\t  mark_tag_as_seen (seen_tags, type_tag);\n \t  oprintf (d->of, \"%*scase %s:\\n\", d->indent, \"\", type_tag);\n \t  d->indent += 2;\n \t  oprintf (d->of, \"%*s{\\n\", d->indent, \"\");\n@@ -2681,7 +2714,7 @@ walk_subclasses (type_p base, struct walk_type_data *d)\n \t  oprintf (d->of, \"%*sbreak;\\n\", d->indent, \"\");\n \t  d->indent -= 2;\n \t}\n-      walk_subclasses (sub, d);\n+      walk_subclasses (sub, d, seen_tags);\n     }\n }\n \n@@ -3228,7 +3261,8 @@ walk_type (type_p t, struct walk_type_data *d)\n \telse if (desc)\n \t  {\n \t    /* Add cases to handle subclasses.  */\n-\t    walk_subclasses (t, d);\n+\t    struct seen_tag *tags = NULL;\n+\t    walk_subclasses (t, d, &tags);\n \n \t    /* Ensure that if someone forgets a \"tag\" option that we don't\n \t       silent fail to traverse that subclass's fields.  */"}, {"sha": "ead487e8e5fd189ca45e9ac16b1ae5777dd8344d", "filename": "gcc/gimple.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b95612ecf4e64e443ab38d7673b39972d78daa8/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b95612ecf4e64e443ab38d7673b39972d78daa8/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=9b95612ecf4e64e443ab38d7673b39972d78daa8", "patch": "@@ -701,8 +701,8 @@ gimple_build_wce (gimple_seq cleanup)\n gimple\n gimple_build_resx (int region)\n {\n-  gimple_statement_eh_ctrl *p =\n-    as_a <gimple_statement_eh_ctrl> (\n+  gimple_statement_resx *p =\n+    as_a <gimple_statement_resx> (\n       gimple_build_with_ops (GIMPLE_RESX, ERROR_MARK, 0));\n   p->region = region;\n   return p;\n@@ -751,8 +751,8 @@ gimple_build_switch (tree index, tree default_label, vec<tree> args)\n gimple\n gimple_build_eh_dispatch (int region)\n {\n-  gimple_statement_eh_ctrl *p =\n-    as_a <gimple_statement_eh_ctrl> (\n+  gimple_statement_eh_dispatch *p =\n+    as_a <gimple_statement_eh_dispatch> (\n       gimple_build_with_ops (GIMPLE_EH_DISPATCH, ERROR_MARK, 0));\n   p->region = region;\n   return p;"}, {"sha": "ff1ef4307ed77d1f260feb6a6153ae3935d628b9", "filename": "gcc/gimple.def", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b95612ecf4e64e443ab38d7673b39972d78daa8/gcc%2Fgimple.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b95612ecf4e64e443ab38d7673b39972d78daa8/gcc%2Fgimple.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.def?ref=9b95612ecf4e64e443ab38d7673b39972d78daa8", "patch": "@@ -221,7 +221,7 @@ DEFGSCODE(GIMPLE_NOP, \"gimple_nop\", GSS_BASE)\n DEFGSCODE(GIMPLE_OMP_ATOMIC_LOAD, \"gimple_omp_atomic_load\",\n \t  GSS_OMP_ATOMIC_LOAD)\n DEFGSCODE(GIMPLE_OMP_ATOMIC_STORE, \"gimple_omp_atomic_store\",\n-\t  GSS_OMP_ATOMIC_STORE)\n+\t  GSS_OMP_ATOMIC_STORE_LAYOUT)\n \n /* GIMPLE_OMP_CONTINUE marks the location of the loop or sections\n    iteration in partially lowered OpenMP code.  */\n@@ -300,7 +300,7 @@ DEFGSCODE(GIMPLE_OMP_ORDERED, \"gimple_omp_ordered\", GSS_OMP)\n    DATA_ARG is a local variable in the parent function containing data\n    to be shared with CHILD_FN.  This is used to implement all the data\n    sharing clauses.  */\n-DEFGSCODE(GIMPLE_OMP_PARALLEL, \"gimple_omp_parallel\", GSS_OMP_PARALLEL)\n+DEFGSCODE(GIMPLE_OMP_PARALLEL, \"gimple_omp_parallel\", GSS_OMP_PARALLEL_LAYOUT)\n \n /* GIMPLE_OMP_TASK <BODY, CLAUSES, CHILD_FN, DATA_ARG, COPY_FN,\n \t\t    ARG_SIZE, ARG_ALIGN> represents\n@@ -329,7 +329,7 @@ DEFGSCODE(GIMPLE_OMP_PARALLEL, \"gimple_omp_parallel\", GSS_OMP_PARALLEL)\n DEFGSCODE(GIMPLE_OMP_TASK, \"gimple_omp_task\", GSS_OMP_TASK)\n \n /* OMP_RETURN marks the end of an OpenMP directive.  */\n-DEFGSCODE(GIMPLE_OMP_RETURN, \"gimple_omp_return\", GSS_OMP_ATOMIC_STORE)\n+DEFGSCODE(GIMPLE_OMP_RETURN, \"gimple_omp_return\", GSS_OMP_ATOMIC_STORE_LAYOUT)\n \n /* OMP_SECTION <BODY> represents #pragma omp section.\n    BODY is the sequence of statements in the section body.  */\n@@ -351,7 +351,7 @@ DEFGSCODE(GIMPLE_OMP_SECTIONS_SWITCH, \"gimple_omp_sections_switch\", GSS_BASE)\n /* GIMPLE_OMP_SINGLE <BODY, CLAUSES> represents #pragma omp single\n    BODY is the sequence of statements inside the single section.\n    CLAUSES is an OMP_CLAUSE chain holding the associated clauses.  */\n-DEFGSCODE(GIMPLE_OMP_SINGLE, \"gimple_omp_single\", GSS_OMP_SINGLE)\n+DEFGSCODE(GIMPLE_OMP_SINGLE, \"gimple_omp_single\", GSS_OMP_SINGLE_LAYOUT)\n \n /* GIMPLE_OMP_TARGET <BODY, CLAUSES, CHILD_FN> represents\n    #pragma omp target {,data,update}\n@@ -364,12 +364,12 @@ DEFGSCODE(GIMPLE_OMP_SINGLE, \"gimple_omp_single\", GSS_OMP_SINGLE)\n    DATA_ARG is a vec of 3 local variables in the parent function\n    containing data to be mapped to CHILD_FN.  This is used to\n    implement the MAP clauses.  */\n-DEFGSCODE(GIMPLE_OMP_TARGET, \"gimple_omp_target\", GSS_OMP_PARALLEL)\n+DEFGSCODE(GIMPLE_OMP_TARGET, \"gimple_omp_target\", GSS_OMP_PARALLEL_LAYOUT)\n \n /* GIMPLE_OMP_TEAMS <BODY, CLAUSES> represents #pragma omp teams\n    BODY is the sequence of statements inside the single section.\n    CLAUSES is an OMP_CLAUSE chain holding the associated clauses.  */\n-DEFGSCODE(GIMPLE_OMP_TEAMS, \"gimple_omp_teams\", GSS_OMP_SINGLE)\n+DEFGSCODE(GIMPLE_OMP_TEAMS, \"gimple_omp_teams\", GSS_OMP_SINGLE_LAYOUT)\n \n /* GIMPLE_PREDICT <PREDICT, OUTCOME> specifies a hint for branch prediction.\n "}, {"sha": "6d221fa7aa5437da755450de5514980f423750b6", "filename": "gcc/gimple.h", "status": "modified", "additions": 250, "deletions": 104, "changes": 354, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b95612ecf4e64e443ab38d7673b39972d78daa8/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b95612ecf4e64e443ab38d7673b39972d78daa8/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=9b95612ecf4e64e443ab38d7673b39972d78daa8", "patch": "@@ -408,6 +408,20 @@ struct GTY((tag(\"GSS_EH_CTRL\")))\n   int region;\n };\n \n+struct GTY((tag(\"GSS_EH_CTRL\")))\n+  gimple_statement_resx : public gimple_statement_eh_ctrl\n+{\n+  /* No extra fields; adds invariant:\n+       stmt->code == GIMPLE_RESX.  */\n+};\n+\n+struct GTY((tag(\"GSS_EH_CTRL\")))\n+  gimple_statement_eh_dispatch : public gimple_statement_eh_ctrl\n+{\n+  /* No extra fields; adds invariant:\n+       stmt->code == GIMPLE_EH_DISPATH.  */\n+};\n+\n \n /* GIMPLE_TRY */\n \n@@ -535,10 +549,9 @@ struct GTY((tag(\"GSS_OMP_FOR\")))\n };\n \n \n-/* GIMPLE_OMP_PARALLEL */\n-\n-struct GTY((tag(\"GSS_OMP_PARALLEL\")))\n-  gimple_statement_omp_parallel : public gimple_statement_omp\n+/* GIMPLE_OMP_PARALLEL, GIMPLE_OMP_TARGET */\n+struct GTY((tag(\"GSS_OMP_PARALLEL_LAYOUT\")))\n+  gimple_statement_omp_parallel_layout : public gimple_statement_omp\n {\n   /* [ WORD 1-7 ] : base class */\n \n@@ -555,11 +568,35 @@ struct GTY((tag(\"GSS_OMP_PARALLEL\")))\n   tree data_arg;\n };\n \n+/* GIMPLE_OMP_PARALLEL or GIMPLE_TASK */\n+struct GTY((tag(\"GSS_OMP_PARALLEL_LAYOUT\")))\n+  gimple_statement_omp_taskreg : public gimple_statement_omp_parallel_layout\n+{\n+    /* No extra fields; adds invariant:\n+         stmt->code == GIMPLE_OMP_PARALLEL\n+\t || stmt->code == GIMPLE_OMP_TASK.  */\n+};\n+\n+\n+/* GIMPLE_OMP_PARALLEL */\n+struct GTY((tag(\"GSS_OMP_PARALLEL_LAYOUT\")))\n+  gimple_statement_omp_parallel : public gimple_statement_omp_taskreg\n+{\n+    /* No extra fields; adds invariant:\n+         stmt->code == GIMPLE_OMP_PARALLEL.  */\n+};\n+\n+struct GTY((tag(\"GSS_OMP_PARALLEL_LAYOUT\")))\n+  gimple_statement_omp_target : public gimple_statement_omp_parallel_layout\n+{\n+    /* No extra fields; adds invariant:\n+         stmt->code == GIMPLE_OMP_TARGET.  */\n+};\n \n /* GIMPLE_OMP_TASK */\n \n struct GTY((tag(\"GSS_OMP_TASK\")))\n-  gimple_statement_omp_task : public gimple_statement_omp_parallel\n+  gimple_statement_omp_task : public gimple_statement_omp_taskreg\n {\n   /* [ WORD 1-10 ] : base class */\n \n@@ -611,17 +648,31 @@ struct GTY((tag(\"GSS_OMP_CONTINUE\")))\n   tree control_use;\n };\n \n-/* GIMPLE_OMP_SINGLE, GIMPLE_OMP_TARGET, GIMPLE_OMP_TEAMS */\n+/* GIMPLE_OMP_SINGLE, GIMPLE_OMP_TEAMS */\n \n-struct GTY((tag(\"GSS_OMP_SINGLE\")))\n-  gimple_statement_omp_single : public gimple_statement_omp\n+struct GTY((tag(\"GSS_OMP_SINGLE_LAYOUT\")))\n+  gimple_statement_omp_single_layout : public gimple_statement_omp\n {\n   /* [ WORD 1-7 ] : base class */\n \n   /* [ WORD 7 ]  */\n   tree clauses;\n };\n \n+struct GTY((tag(\"GSS_OMP_SINGLE_LAYOUT\")))\n+  gimple_statement_omp_single : public gimple_statement_omp_single_layout\n+{\n+    /* No extra fields; adds invariant:\n+         stmt->code == GIMPLE_OMP_SINGLE.  */\n+};\n+\n+struct GTY((tag(\"GSS_OMP_SINGLE_LAYOUT\")))\n+  gimple_statement_omp_teams : public gimple_statement_omp_single_layout\n+{\n+    /* No extra fields; adds invariant:\n+         stmt->code == GIMPLE_OMP_TEAMS.  */\n+};\n+\n \n /* GIMPLE_OMP_ATOMIC_LOAD.\n    Note: This is based on gimple_statement_base, not g_s_omp, because g_s_omp\n@@ -639,15 +690,31 @@ struct GTY((tag(\"GSS_OMP_ATOMIC_LOAD\")))\n /* GIMPLE_OMP_ATOMIC_STORE.\n    See note on GIMPLE_OMP_ATOMIC_LOAD.  */\n \n-struct GTY((tag(\"GSS_OMP_ATOMIC_STORE\")))\n-  gimple_statement_omp_atomic_store : public gimple_statement_base\n+struct GTY((tag(\"GSS_OMP_ATOMIC_STORE_LAYOUT\")))\n+  gimple_statement_omp_atomic_store_layout : public gimple_statement_base\n {\n   /* [ WORD 1-6 ] : base class */\n \n   /* [ WORD 7 ]  */\n   tree val;\n };\n \n+struct GTY((tag(\"GSS_OMP_ATOMIC_STORE_LAYOUT\")))\n+  gimple_statement_omp_atomic_store :\n+    public gimple_statement_omp_atomic_store_layout\n+{\n+    /* No extra fields; adds invariant:\n+         stmt->code == GIMPLE_OMP_ATOMIC_STORE.  */\n+};\n+\n+struct GTY((tag(\"GSS_OMP_ATOMIC_STORE_LAYOUT\")))\n+  gimple_statement_omp_return :\n+    public gimple_statement_omp_atomic_store_layout\n+{\n+    /* No extra fields; adds invariant:\n+         stmt->code == GIMPLE_OMP_RETURN.  */\n+};\n+\n /* GIMPLE_TRANSACTION.  */\n \n /* Bits to be stored in the GIMPLE_TRANSACTION subcode.  */\n@@ -730,9 +797,17 @@ is_a_helper <gimple_statement_catch>::test (gimple gs)\n template <>\n template <>\n inline bool\n-is_a_helper <gimple_statement_eh_ctrl>::test (gimple gs)\n+is_a_helper <gimple_statement_resx>::test (gimple gs)\n+{\n+  return gs->code == GIMPLE_RESX;\n+}\n+\n+template <>\n+template <>\n+inline bool\n+is_a_helper <gimple_statement_eh_dispatch>::test (gimple gs)\n {\n-  return gs->code == GIMPLE_RESX || gs->code == GIMPLE_EH_DISPATCH;\n+  return gs->code == GIMPLE_EH_DISPATCH;\n }\n \n template <>\n@@ -772,7 +847,15 @@ template <>\n inline bool\n is_a_helper <gimple_statement_omp_atomic_store>::test (gimple gs)\n {\n-  return gs->code == GIMPLE_OMP_ATOMIC_STORE || gs->code == GIMPLE_OMP_RETURN;\n+  return gs->code == GIMPLE_OMP_ATOMIC_STORE;\n+}\n+\n+template <>\n+template <>\n+inline bool\n+is_a_helper <gimple_statement_omp_return>::test (gimple gs)\n+{\n+  return gs->code == GIMPLE_OMP_RETURN;\n }\n \n template <>\n@@ -799,12 +882,28 @@ is_a_helper <gimple_statement_omp_for>::test (gimple gs)\n   return gs->code == GIMPLE_OMP_FOR;\n }\n \n+template <>\n+template <>\n+inline bool\n+is_a_helper <gimple_statement_omp_taskreg>::test (gimple gs)\n+{\n+  return gs->code == GIMPLE_OMP_PARALLEL || gs->code == GIMPLE_OMP_TASK;\n+}\n+\n template <>\n template <>\n inline bool\n is_a_helper <gimple_statement_omp_parallel>::test (gimple gs)\n {\n-  return gs->code == GIMPLE_OMP_PARALLEL || gs->code == GIMPLE_OMP_TASK || gs->code == GIMPLE_OMP_TARGET;\n+  return gs->code == GIMPLE_OMP_PARALLEL;\n+}\n+\n+template <>\n+template <>\n+inline bool\n+is_a_helper <gimple_statement_omp_target>::test (gimple gs)\n+{\n+  return gs->code == GIMPLE_OMP_TARGET;\n }\n \n template <>\n@@ -820,7 +919,15 @@ template <>\n inline bool\n is_a_helper <gimple_statement_omp_single>::test (gimple gs)\n {\n-  return gs->code == GIMPLE_OMP_SINGLE || gs->code == GIMPLE_OMP_TEAMS;\n+  return gs->code == GIMPLE_OMP_SINGLE;\n+}\n+\n+template <>\n+template <>\n+inline bool\n+is_a_helper <gimple_statement_omp_teams>::test (gimple gs)\n+{\n+  return gs->code == GIMPLE_OMP_TEAMS;\n }\n \n template <>\n@@ -898,9 +1005,17 @@ is_a_helper <const gimple_statement_catch>::test (const_gimple gs)\n template <>\n template <>\n inline bool\n-is_a_helper <const gimple_statement_eh_ctrl>::test (const_gimple gs)\n+is_a_helper <const gimple_statement_resx>::test (const_gimple gs)\n {\n-  return gs->code == GIMPLE_RESX || gs->code == GIMPLE_EH_DISPATCH;\n+  return gs->code == GIMPLE_RESX;\n+}\n+\n+template <>\n+template <>\n+inline bool\n+is_a_helper <const gimple_statement_eh_dispatch>::test (const_gimple gs)\n+{\n+  return gs->code == GIMPLE_EH_DISPATCH;\n }\n \n template <>\n@@ -924,7 +1039,15 @@ template <>\n inline bool\n is_a_helper <const gimple_statement_omp_atomic_store>::test (const_gimple gs)\n {\n-  return gs->code == GIMPLE_OMP_ATOMIC_STORE || gs->code == GIMPLE_OMP_RETURN;\n+  return gs->code == GIMPLE_OMP_ATOMIC_STORE;\n+}\n+\n+template <>\n+template <>\n+inline bool\n+is_a_helper <const gimple_statement_omp_return>::test (const_gimple gs)\n+{\n+  return gs->code == GIMPLE_OMP_RETURN;\n }\n \n template <>\n@@ -951,12 +1074,28 @@ is_a_helper <const gimple_statement_omp_for>::test (const_gimple gs)\n   return gs->code == GIMPLE_OMP_FOR;\n }\n \n+template <>\n+template <>\n+inline bool\n+is_a_helper <const gimple_statement_omp_taskreg>::test (const_gimple gs)\n+{\n+  return gs->code == GIMPLE_OMP_PARALLEL || gs->code == GIMPLE_OMP_TASK;\n+}\n+\n template <>\n template <>\n inline bool\n is_a_helper <const gimple_statement_omp_parallel>::test (const_gimple gs)\n {\n-  return gs->code == GIMPLE_OMP_PARALLEL || gs->code == GIMPLE_OMP_TASK || gs->code == GIMPLE_OMP_TARGET;\n+  return gs->code == GIMPLE_OMP_PARALLEL;\n+}\n+\n+template <>\n+template <>\n+inline bool\n+is_a_helper <const gimple_statement_omp_target>::test (const_gimple gs)\n+{\n+  return gs->code == GIMPLE_OMP_TARGET;\n }\n \n template <>\n@@ -972,7 +1111,15 @@ template <>\n inline bool\n is_a_helper <const gimple_statement_omp_single>::test (const_gimple gs)\n {\n-  return gs->code == GIMPLE_OMP_SINGLE || gs->code == GIMPLE_OMP_TEAMS;\n+  return gs->code == GIMPLE_OMP_SINGLE;\n+}\n+\n+template <>\n+template <>\n+inline bool\n+is_a_helper <const gimple_statement_omp_teams>::test (const_gimple gs)\n+{\n+  return gs->code == GIMPLE_OMP_TEAMS;\n }\n \n template <>\n@@ -1753,9 +1900,9 @@ gimple_omp_return_nowait_p (const_gimple g)\n static inline void\n gimple_omp_return_set_lhs (gimple g, tree lhs)\n {\n-  gimple_statement_omp_atomic_store *omp_atomic_store_stmt =\n-    as_a <gimple_statement_omp_atomic_store> (g);\n-  omp_atomic_store_stmt->val = lhs;\n+  gimple_statement_omp_return *omp_return_stmt =\n+    as_a <gimple_statement_omp_return> (g);\n+  omp_return_stmt->val = lhs;\n }\n \n \n@@ -1764,9 +1911,9 @@ gimple_omp_return_set_lhs (gimple g, tree lhs)\n static inline tree\n gimple_omp_return_lhs (const_gimple g)\n {\n-  const gimple_statement_omp_atomic_store *omp_atomic_store_stmt =\n-    as_a <const gimple_statement_omp_atomic_store> (g);\n-  return omp_atomic_store_stmt->val;\n+  const gimple_statement_omp_return *omp_return_stmt =\n+    as_a <const gimple_statement_omp_return> (g);\n+  return omp_return_stmt->val;\n }\n \n \n@@ -1775,9 +1922,9 @@ gimple_omp_return_lhs (const_gimple g)\n static inline tree *\n gimple_omp_return_lhs_ptr (gimple g)\n {\n-  gimple_statement_omp_atomic_store *omp_atomic_store_stmt =\n-    as_a <gimple_statement_omp_atomic_store> (g);\n-  return &omp_atomic_store_stmt->val;\n+  gimple_statement_omp_return *omp_return_stmt =\n+    as_a <gimple_statement_omp_return> (g);\n+  return &omp_return_stmt->val;\n }\n \n \n@@ -3780,39 +3927,38 @@ gimple_phi_arg_has_location (gimple gs, size_t i)\n static inline int\n gimple_resx_region (const_gimple gs)\n {\n-  const gimple_statement_eh_ctrl *eh_ctrl_stmt =\n-    as_a <const gimple_statement_eh_ctrl> (gs);\n-  return eh_ctrl_stmt->region;\n+  const gimple_statement_resx *resx_stmt =\n+    as_a <const gimple_statement_resx> (gs);\n+  return resx_stmt->region;\n }\n \n /* Set REGION to be the region number for GIMPLE_RESX GS.  */\n \n static inline void\n gimple_resx_set_region (gimple gs, int region)\n {\n-  gimple_statement_eh_ctrl *eh_ctrl_stmt =\n-    as_a <gimple_statement_eh_ctrl> (gs);\n-  eh_ctrl_stmt->region = region;\n+  gimple_statement_resx *resx_stmt = as_a <gimple_statement_resx> (gs);\n+  resx_stmt->region = region;\n }\n \n /* Return the region number for GIMPLE_EH_DISPATCH GS.  */\n \n static inline int\n gimple_eh_dispatch_region (const_gimple gs)\n {\n-  const gimple_statement_eh_ctrl *eh_ctrl_stmt =\n-    as_a <const gimple_statement_eh_ctrl> (gs);\n-  return eh_ctrl_stmt->region;\n+  const gimple_statement_eh_dispatch *eh_dispatch_stmt =\n+    as_a <const gimple_statement_eh_dispatch> (gs);\n+  return eh_dispatch_stmt->region;\n }\n \n /* Set REGION to be the region number for GIMPLE_EH_DISPATCH GS.  */\n \n static inline void\n gimple_eh_dispatch_set_region (gimple gs, int region)\n {\n-  gimple_statement_eh_ctrl *eh_ctrl_stmt =\n-    as_a <gimple_statement_eh_ctrl> (gs);\n-  eh_ctrl_stmt->region = region;\n+  gimple_statement_eh_dispatch *eh_dispatch_stmt =\n+    as_a <gimple_statement_eh_dispatch> (gs);\n+  eh_dispatch_stmt->region = region;\n }\n \n /* Return the number of labels associated with the switch statement GS.  */\n@@ -4650,9 +4796,9 @@ gimple_omp_task_set_data_arg (gimple gs, tree data_arg)\n static inline tree\n gimple_omp_taskreg_clauses (const_gimple gs)\n {\n-  const gimple_statement_omp_parallel *omp_parallel_stmt =\n-    as_a <const gimple_statement_omp_parallel> (gs);\n-  return omp_parallel_stmt->clauses;\n+  const gimple_statement_omp_taskreg *omp_taskreg_stmt =\n+    as_a <const gimple_statement_omp_taskreg> (gs);\n+  return omp_taskreg_stmt->clauses;\n }\n \n \n@@ -4661,9 +4807,9 @@ gimple_omp_taskreg_clauses (const_gimple gs)\n static inline tree *\n gimple_omp_taskreg_clauses_ptr (gimple gs)\n {\n-  gimple_statement_omp_parallel *omp_parallel_stmt =\n-    as_a <gimple_statement_omp_parallel> (gs);\n-  return &omp_parallel_stmt->clauses;\n+  gimple_statement_omp_taskreg *omp_taskreg_stmt =\n+    as_a <gimple_statement_omp_taskreg> (gs);\n+  return &omp_taskreg_stmt->clauses;\n }\n \n \n@@ -4673,9 +4819,9 @@ gimple_omp_taskreg_clauses_ptr (gimple gs)\n static inline void\n gimple_omp_taskreg_set_clauses (gimple gs, tree clauses)\n {\n-  gimple_statement_omp_parallel *omp_parallel_stmt =\n-    as_a <gimple_statement_omp_parallel> (gs);\n-  omp_parallel_stmt->clauses = clauses;\n+  gimple_statement_omp_taskreg *omp_taskreg_stmt =\n+    as_a <gimple_statement_omp_taskreg> (gs);\n+  omp_taskreg_stmt->clauses = clauses;\n }\n \n \n@@ -4684,9 +4830,9 @@ gimple_omp_taskreg_set_clauses (gimple gs, tree clauses)\n static inline tree\n gimple_omp_taskreg_child_fn (const_gimple gs)\n {\n-  const gimple_statement_omp_parallel *omp_parallel_stmt =\n-    as_a <const gimple_statement_omp_parallel> (gs);\n-  return omp_parallel_stmt->child_fn;\n+  const gimple_statement_omp_taskreg *omp_taskreg_stmt =\n+    as_a <const gimple_statement_omp_taskreg> (gs);\n+  return omp_taskreg_stmt->child_fn;\n }\n \n /* Return a pointer to the child function used to hold the body of\n@@ -4695,9 +4841,9 @@ gimple_omp_taskreg_child_fn (const_gimple gs)\n static inline tree *\n gimple_omp_taskreg_child_fn_ptr (gimple gs)\n {\n-  gimple_statement_omp_parallel *omp_parallel_stmt =\n-    as_a <gimple_statement_omp_parallel> (gs);\n-  return &omp_parallel_stmt->child_fn;\n+  gimple_statement_omp_taskreg *omp_taskreg_stmt =\n+    as_a <gimple_statement_omp_taskreg> (gs);\n+  return &omp_taskreg_stmt->child_fn;\n }\n \n \n@@ -4706,9 +4852,9 @@ gimple_omp_taskreg_child_fn_ptr (gimple gs)\n static inline void\n gimple_omp_taskreg_set_child_fn (gimple gs, tree child_fn)\n {\n-  gimple_statement_omp_parallel *omp_parallel_stmt =\n-    as_a <gimple_statement_omp_parallel> (gs);\n-  omp_parallel_stmt->child_fn = child_fn;\n+  gimple_statement_omp_taskreg *omp_taskreg_stmt =\n+    as_a <gimple_statement_omp_taskreg> (gs);\n+  omp_taskreg_stmt->child_fn = child_fn;\n }\n \n \n@@ -4718,9 +4864,9 @@ gimple_omp_taskreg_set_child_fn (gimple gs, tree child_fn)\n static inline tree\n gimple_omp_taskreg_data_arg (const_gimple gs)\n {\n-  const gimple_statement_omp_parallel *omp_parallel_stmt =\n-    as_a <const gimple_statement_omp_parallel> (gs);\n-  return omp_parallel_stmt->data_arg;\n+  const gimple_statement_omp_taskreg *omp_taskreg_stmt =\n+    as_a <const gimple_statement_omp_taskreg> (gs);\n+  return omp_taskreg_stmt->data_arg;\n }\n \n \n@@ -4729,9 +4875,9 @@ gimple_omp_taskreg_data_arg (const_gimple gs)\n static inline tree *\n gimple_omp_taskreg_data_arg_ptr (gimple gs)\n {\n-  gimple_statement_omp_parallel *omp_parallel_stmt =\n-    as_a <gimple_statement_omp_parallel> (gs);\n-  return &omp_parallel_stmt->data_arg;\n+  gimple_statement_omp_taskreg *omp_taskreg_stmt =\n+    as_a <gimple_statement_omp_taskreg> (gs);\n+  return &omp_taskreg_stmt->data_arg;\n }\n \n \n@@ -4740,9 +4886,9 @@ gimple_omp_taskreg_data_arg_ptr (gimple gs)\n static inline void\n gimple_omp_taskreg_set_data_arg (gimple gs, tree data_arg)\n {\n-  gimple_statement_omp_parallel *omp_parallel_stmt =\n-    as_a <gimple_statement_omp_parallel> (gs);\n-  omp_parallel_stmt->data_arg = data_arg;\n+  gimple_statement_omp_taskreg *omp_taskreg_stmt =\n+    as_a <gimple_statement_omp_taskreg> (gs);\n+  omp_taskreg_stmt->data_arg = data_arg;\n }\n \n \n@@ -4883,9 +5029,9 @@ gimple_omp_single_set_clauses (gimple gs, tree clauses)\n static inline tree\n gimple_omp_target_clauses (const_gimple gs)\n {\n-  const gimple_statement_omp_parallel *omp_parallel_stmt =\n-    as_a <const gimple_statement_omp_parallel> (gs);\n-  return omp_parallel_stmt->clauses;\n+  const gimple_statement_omp_target *omp_target_stmt =\n+    as_a <const gimple_statement_omp_target> (gs);\n+  return omp_target_stmt->clauses;\n }\n \n \n@@ -4894,9 +5040,9 @@ gimple_omp_target_clauses (const_gimple gs)\n static inline tree *\n gimple_omp_target_clauses_ptr (gimple gs)\n {\n-  gimple_statement_omp_parallel *omp_parallel_stmt =\n-    as_a <gimple_statement_omp_parallel> (gs);\n-  return &omp_parallel_stmt->clauses;\n+  gimple_statement_omp_target *omp_target_stmt =\n+    as_a <gimple_statement_omp_target> (gs);\n+  return &omp_target_stmt->clauses;\n }\n \n \n@@ -4905,9 +5051,9 @@ gimple_omp_target_clauses_ptr (gimple gs)\n static inline void\n gimple_omp_target_set_clauses (gimple gs, tree clauses)\n {\n-  gimple_statement_omp_parallel *omp_parallel_stmt =\n-    as_a <gimple_statement_omp_parallel> (gs);\n-  omp_parallel_stmt->clauses = clauses;\n+  gimple_statement_omp_target *omp_target_stmt =\n+    as_a <gimple_statement_omp_target> (gs);\n+  omp_target_stmt->clauses = clauses;\n }\n \n \n@@ -4937,9 +5083,9 @@ gimple_omp_target_set_kind (gimple g, int kind)\n static inline tree\n gimple_omp_target_child_fn (const_gimple gs)\n {\n-  const gimple_statement_omp_parallel *omp_parallel_stmt =\n-    as_a <const gimple_statement_omp_parallel> (gs);\n-  return omp_parallel_stmt->child_fn;\n+  const gimple_statement_omp_target *omp_target_stmt =\n+    as_a <const gimple_statement_omp_target> (gs);\n+  return omp_target_stmt->child_fn;\n }\n \n /* Return a pointer to the child function used to hold the body of\n@@ -4948,9 +5094,9 @@ gimple_omp_target_child_fn (const_gimple gs)\n static inline tree *\n gimple_omp_target_child_fn_ptr (gimple gs)\n {\n-  gimple_statement_omp_parallel *omp_parallel_stmt =\n-    as_a <gimple_statement_omp_parallel> (gs);\n-  return &omp_parallel_stmt->child_fn;\n+  gimple_statement_omp_target *omp_target_stmt =\n+    as_a <gimple_statement_omp_target> (gs);\n+  return &omp_target_stmt->child_fn;\n }\n \n \n@@ -4959,9 +5105,9 @@ gimple_omp_target_child_fn_ptr (gimple gs)\n static inline void\n gimple_omp_target_set_child_fn (gimple gs, tree child_fn)\n {\n-  gimple_statement_omp_parallel *omp_parallel_stmt =\n-    as_a <gimple_statement_omp_parallel> (gs);\n-  omp_parallel_stmt->child_fn = child_fn;\n+  gimple_statement_omp_target *omp_target_stmt =\n+    as_a <gimple_statement_omp_target> (gs);\n+  omp_target_stmt->child_fn = child_fn;\n }\n \n \n@@ -4971,9 +5117,9 @@ gimple_omp_target_set_child_fn (gimple gs, tree child_fn)\n static inline tree\n gimple_omp_target_data_arg (const_gimple gs)\n {\n-  const gimple_statement_omp_parallel *omp_parallel_stmt =\n-    as_a <const gimple_statement_omp_parallel> (gs);\n-  return omp_parallel_stmt->data_arg;\n+  const gimple_statement_omp_target *omp_target_stmt =\n+    as_a <const gimple_statement_omp_target> (gs);\n+  return omp_target_stmt->data_arg;\n }\n \n \n@@ -4982,9 +5128,9 @@ gimple_omp_target_data_arg (const_gimple gs)\n static inline tree *\n gimple_omp_target_data_arg_ptr (gimple gs)\n {\n-  gimple_statement_omp_parallel *omp_parallel_stmt =\n-    as_a <gimple_statement_omp_parallel> (gs);\n-  return &omp_parallel_stmt->data_arg;\n+  gimple_statement_omp_target *omp_target_stmt =\n+    as_a <gimple_statement_omp_target> (gs);\n+  return &omp_target_stmt->data_arg;\n }\n \n \n@@ -4993,9 +5139,9 @@ gimple_omp_target_data_arg_ptr (gimple gs)\n static inline void\n gimple_omp_target_set_data_arg (gimple gs, tree data_arg)\n {\n-  gimple_statement_omp_parallel *omp_parallel_stmt =\n-    as_a <gimple_statement_omp_parallel> (gs);\n-  omp_parallel_stmt->data_arg = data_arg;\n+  gimple_statement_omp_target *omp_target_stmt =\n+    as_a <gimple_statement_omp_target> (gs);\n+  omp_target_stmt->data_arg = data_arg;\n }\n \n \n@@ -5004,9 +5150,9 @@ gimple_omp_target_set_data_arg (gimple gs, tree data_arg)\n static inline tree\n gimple_omp_teams_clauses (const_gimple gs)\n {\n-  const gimple_statement_omp_single *omp_single_stmt =\n-    as_a <const gimple_statement_omp_single> (gs);\n-  return omp_single_stmt->clauses;\n+  const gimple_statement_omp_teams *omp_teams_stmt =\n+    as_a <const gimple_statement_omp_teams> (gs);\n+  return omp_teams_stmt->clauses;\n }\n \n \n@@ -5015,9 +5161,9 @@ gimple_omp_teams_clauses (const_gimple gs)\n static inline tree *\n gimple_omp_teams_clauses_ptr (gimple gs)\n {\n-  gimple_statement_omp_single *omp_single_stmt =\n-    as_a <gimple_statement_omp_single> (gs);\n-  return &omp_single_stmt->clauses;\n+  gimple_statement_omp_teams *omp_teams_stmt =\n+    as_a <gimple_statement_omp_teams> (gs);\n+  return &omp_teams_stmt->clauses;\n }\n \n \n@@ -5026,9 +5172,9 @@ gimple_omp_teams_clauses_ptr (gimple gs)\n static inline void\n gimple_omp_teams_set_clauses (gimple gs, tree clauses)\n {\n-  gimple_statement_omp_single *omp_single_stmt =\n-    as_a <gimple_statement_omp_single> (gs);\n-  omp_single_stmt->clauses = clauses;\n+  gimple_statement_omp_teams *omp_teams_stmt =\n+    as_a <gimple_statement_omp_teams> (gs);\n+  omp_teams_stmt->clauses = clauses;\n }\n \n "}, {"sha": "82f1f52a6f53b78427a5f0969d596bc59e984f8b", "filename": "gcc/gsstruct.def", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b95612ecf4e64e443ab38d7673b39972d78daa8/gcc%2Fgsstruct.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b95612ecf4e64e443ab38d7673b39972d78daa8/gcc%2Fgsstruct.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgsstruct.def?ref=9b95612ecf4e64e443ab38d7673b39972d78daa8", "patch": "@@ -43,11 +43,11 @@ DEFGSSTRUCT(GSS_WCE, gimple_statement_wce, false)\n DEFGSSTRUCT(GSS_OMP, gimple_statement_omp, false)\n DEFGSSTRUCT(GSS_OMP_CRITICAL, gimple_statement_omp_critical, false)\n DEFGSSTRUCT(GSS_OMP_FOR, gimple_statement_omp_for, false)\n-DEFGSSTRUCT(GSS_OMP_PARALLEL, gimple_statement_omp_parallel, false)\n+DEFGSSTRUCT(GSS_OMP_PARALLEL_LAYOUT, gimple_statement_omp_parallel_layout, false)\n DEFGSSTRUCT(GSS_OMP_TASK, gimple_statement_omp_task, false)\n DEFGSSTRUCT(GSS_OMP_SECTIONS, gimple_statement_omp_sections, false)\n-DEFGSSTRUCT(GSS_OMP_SINGLE, gimple_statement_omp_single, false)\n+DEFGSSTRUCT(GSS_OMP_SINGLE_LAYOUT, gimple_statement_omp_single_layout, false)\n DEFGSSTRUCT(GSS_OMP_CONTINUE, gimple_statement_omp_continue, false)\n DEFGSSTRUCT(GSS_OMP_ATOMIC_LOAD, gimple_statement_omp_atomic_load, false)\n-DEFGSSTRUCT(GSS_OMP_ATOMIC_STORE, gimple_statement_omp_atomic_store, false)\n+DEFGSSTRUCT(GSS_OMP_ATOMIC_STORE_LAYOUT, gimple_statement_omp_atomic_store, false)\n DEFGSSTRUCT(GSS_TRANSACTION, gimple_statement_transaction, false)"}]}