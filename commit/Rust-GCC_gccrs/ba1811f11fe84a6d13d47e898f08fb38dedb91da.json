{"sha": "ba1811f11fe84a6d13d47e898f08fb38dedb91da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmExODExZjExZmU4NGE2ZDEzZDQ3ZTg5OGYwOGZiMzhkZWRiOTFkYQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1993-01-14T20:10:31Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1993-01-14T20:10:31Z"}, "message": "Build include files in build directory when doing make all.\n\nFrom-SVN: r3242", "tree": {"sha": "d759eef5bceb4f30e9b8525965fa60ae2ea7c221", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d759eef5bceb4f30e9b8525965fa60ae2ea7c221"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba1811f11fe84a6d13d47e898f08fb38dedb91da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba1811f11fe84a6d13d47e898f08fb38dedb91da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba1811f11fe84a6d13d47e898f08fb38dedb91da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba1811f11fe84a6d13d47e898f08fb38dedb91da/comments", "author": null, "committer": null, "parents": [{"sha": "7e8b33d90609e7738a4cba6b69df7a0c532285b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e8b33d90609e7738a4cba6b69df7a0c532285b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e8b33d90609e7738a4cba6b69df7a0c532285b6"}], "stats": {"total": 220, "additions": 111, "deletions": 109}, "files": [{"sha": "840af2f5591d69dab807d028dc913e97da56c754", "filename": "gcc/Makefile.in", "status": "modified", "additions": 108, "deletions": 106, "changes": 214, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1811f11fe84a6d13d47e898f08fb38dedb91da/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1811f11fe84a6d13d47e898f08fb38dedb91da/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=ba1811f11fe84a6d13d47e898f08fb38dedb91da", "patch": "@@ -88,6 +88,10 @@ CCLIBFLAGS = -O\n # Version of ar to use when compiling libgcc1.a.\n OLDAR = ar\n \n+# Target to use when installing include directory.  Either\n+# install-headers-tar or install-headers-cpio.\n+INSTALL_HEADERS_DIR = install-headers-tar\n+\n # The GCC to use for compiling libgcc2.a, enquire, and cross-test.\n # Usually the one we just built.\n # Don't use this as a dependency--use $(GCC_PASSES) or $(GCC_PARTS).\n@@ -209,12 +213,13 @@ LIB1FUNCS_EXTRA =\n # Assembler files should have names ending in `.asm'.\n LIB2FUNCS_EXTRA = \n \n+# Default float.h source to use for cross-compiler.\n+CROSS_FLOAT_H=float.h-cross\n+\n # Program to convert libraries.\n LIBCONVERT = \n \n # Control whether header files are installed.\n-# We will change this to install-fixincludes eventually.\n-# It would be useful for people to try this now.\n INSTALL_HEADERS=install-headers\n \n # Select which version of fixincludes to use (I.E. regular versus SVR4)\n@@ -257,7 +262,10 @@ HOST_OBSTACK=$(OBSTACK)\n ALL=all.internal\n \n # Choose the real install target.\n-INSTALL_TARGET=install-native\n+INSTALL_TARGET=install-normal\n+\n+# Source for float.h.  Overridden by cross-make.\n+FLOAT_H=float.h-nat\n \n # End of variables for you to override.\n \n@@ -404,10 +412,6 @@ LIB2FUNCS = _muldi3 _divdi3 _moddi3 _udivdi3 _umoddi3 _negdi2 \\\n USER_H = va-alpha.h va-i860.h va-i960.h va-mips.h va-m88k.h \\\n     va-pa.h va-pyr.h va-sparc.h va-spur.h proto.h $(EXTRA_HEADERS)\n \n-# All the header files that are installed for users from GCC itself.\n-INSTALLED_H = float.h stddef.h stdarg.h varargs.h $(USER_H) limits.h \\\n-    syslimits.h\n-\n # The files that \"belong\" in CONFIG_H are deliberately omitted\n # because having them there would not be useful in actual practice.\n # All they would do is cause complete recompilation every time\n@@ -429,15 +433,15 @@ Makefile: $(srcdir)/Makefile.in $(srcdir)/configure $(srcdir)/version.c \\\n \n all.internal: start.encap rest.encap\n # This is what to compile if making a cross-compiler.\n-all.cross: native gcc-cross specs libgcc.a cross-test $(EXTRA_PARTS)\n+all.cross: native gcc-cross specs libgcc.a stmp-headers cross-test $(EXTRA_PARTS)\n # This is what to compile if making gcc with a cross-compiler.\n all.build: native xgcc $(EXTRA_PARTS)\n # This is what must be made before installing GCC and converting libraries.\n start.encap: native xgcc specs $(LIBGCC1) xlimits.h\n # Use this to make a GCC that will be used only to recompile GCC.\n for-bootstrap: start.encap libgcc.a\n # These can't be made, with COFF encapsulation, until after GCC can run.\n-rest.encap: libgcc.a float.h  $(EXTRA_PARTS)\n+rest.encap: libgcc.a stmp-headers $(EXTRA_PARTS)\n # This is what is made with the host's compiler\n # whether making a cross compiler or not.\n native: config.status cpp $(LANGUAGES) $(EXTRA_PASSES) $(EXTRA_PROGRAMS) $(USE_COLLECT2)\n@@ -500,9 +504,17 @@ cc1plus:$(P) $(CPLUS_OBJS) $(OBJS) $(LIBDEPS)\n cc1obj:$(P) $(OBJC_OBJS) $(OBJS) $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o cc1obj $(OBJC_OBJS) $(OBJS) $(LIBS)\n \n-float.h: enquire\n-\t-./enquire -f > tmp-float.h\n-\tmv tmp-float.h float.h\n+# Copy float.h from its source.\n+float.h: $(FLOAT_H)\n+\tcp $(FLOAT_H) float.h\n+\n+# Create float.h source for the native machine.\n+float.h-nat: enquire\n+\t-./enquire -f > float.h-nat\n+\n+# Create a dummy float.h source for a cross-compiler.\n+float.h-cross:\n+\techo \"#error float.h values not known for cross-compiler\" > float.h-cross\n \n # Used to compile enquire with standard cc, but have forgotten why.\n # Let's try with GCC.\n@@ -1240,6 +1252,57 @@ test-protoize-simple: ./protoize ./unprotoize $(GCC_PASSES)\n \tdiff $(srcdir)/protoize.c tmp-proto.c | cat\n \t-rm -f tmp-proto.[cso]\n \f\n+# Build the include directory.  The stamp files are stmp-* rather than\n+# stamp-* so that mostlyclean does not force the include directory to\n+# be rebuilt.\n+\n+stmp-headers: stmp-fixincludes $(USER_H) gvarargs.h gstdarg.h gstddef.h gsyslimits.h xlimits.h float.h\n+# Copy in the headers provided with gcc.\n+# The sed command gets just the last file name component;\n+# this is necessary because VPATH could add a dirname.\n+# Using basename would be simpler, but some systems don't have it.\n+\tobjdir=`pwd`; \\\n+\tcd $(srcdir); \\\n+\tfor file in $(USER_H); do \\\n+\t  realfile=`echo $$file | sed -e 's|.*/\\([^/]*\\)$$|\\1|'`; \\\n+\t  cp $$realfile $$objdir/include; \\\n+\t  chmod a+r $$objdir/include/$$realfile; \\\n+\tdone\n+\t-cd include; \\\n+\tif [ -f limits.h ]; then \\\n+\t  rm -f syslimits.h; \\\n+\t  mv limits.h syslimits.h; \\\n+\telse \\\n+\t  cp $(srcdir)/gsyslimits.h syslimits.h; \\\n+\tfi\n+\tchmod a+r include/syslimits.h\n+\tcp $(srcdir)/gvarargs.h include/varargs.h\n+\tchmod a+r include/varargs.h\n+\tcp $(srcdir)/gstdarg.h include/stdarg.h\n+\tchmod a+r include/stdarg.h\n+\tcp $(srcdir)/gstddef.h include/stddef.h\n+\tchmod a+r include/stddef.h\n+\tcp xlimits.h include/limits.h\n+\tchmod a+r include/limits.h\n+\tcp float.h include/float.h\n+\tchmod a+r include/float.h\n+# Install the README\n+\tcp $(srcdir)/README-fixinc include/README\n+\tchmod a+r include/README\n+\ttouch stmp-headers\n+\n+# Build fixed copies of system files.\n+stmp-fixincludes: $(srcdir)/$(FIXINCLUDES)\n+\trm -rf include\n+\tmkdir include\n+\tfor dir in $(SYSTEM_HEADER_DIR) $(OTHER_FIXINCLUDES_DIRS); do \\\n+\t  if [ -d $$dir ]; \\\n+\t  then \\\n+\t    $(srcdir)/$(FIXINCLUDES) include $$dir $(srcdir); \\\n+\t  else true; fi; \\\n+\tdone\n+\ttouch stmp-fixincludes\n+\f\n # Remake the info files.\n \n doc: $(srcdir)/cpp.info $(srcdir)/gcc.info\n@@ -1317,6 +1380,8 @@ clean: mostlyclean\n # but what better way is there?\n \t-rm -f libgcc.a libgcc1.a libgcc2.a libgcc2.ready libgcc1.null\n \t-rm -f *.dvi\n+# Delete the include directory.\n+\t-rm -rf stmp-* include\n \n # Delete all files that users would normally create\n # while building and installing GCC.\n@@ -1347,20 +1412,14 @@ realclean: distclean\n \t-rm -f gplus.info* gplus.??s gplus.*aux\n \f\n # Entry points `install' and `uninstall'.\n-# Also temporarily `install-fixincludes' could replace `install-headers'.\n # Also use `install-collect2' to install collect2 when the config files don't.\n \n # The semicolon is to prevent the install.sh -> install default rule\n # from doing anything.\n install: $(INSTALL_TARGET) ;\n \n-# Copy the files of native compiler into directories where they will be run.\n-install-native: install-common install-libgcc $(INSTALL_HEADERS) \\\n-   install-man\n-\n-# Copy the files of cross compiler into directories where they will be run.\n-install-cross: install-common install-common-headers \\\n-   install-man install-libgcc\n+# Copy the compiler files into directories where they will be run.\n+install-normal: install-common install-libgcc $(INSTALL_HEADERS) install-man\n \n # Do nothing while making gcc with a cross-compiler. The person who\n # makes gcc for the target machine has to know how to put a complete\n@@ -1496,37 +1555,41 @@ install-libobjc: libobjc.a install-dir\n \t  chmod a-x $(libsubdir)/libobjc.a; \\\n \telse true; fi\n \n-# Install all the header files for native compiler.\n-install-headers: install-common-headers install-float-h install-limits-h\n+# Install all the header files built in the include subdirectory.\n+install-headers: install-include-dir $(INSTALL_HEADERS_DIR) install-assert-h\n+# Fix symlinks to absolute paths in the installed include directory to\n+# point to the installed directory, not the build directory.\n+\t-files=`cd $(libsubdir)/include; find . -type l -print 2>/dev/null`; \\\n+\tif [ $$? -eq 0 ]; then \\\n+\t  dir=`cd include; pwd`; \\\n+\t  for i in $$files; do \\\n+\t    dest=`ls -ld $(libsubdir)/include/$$i | sed -n 's/.*-> //p'`; \\\n+\t    if expr \"$$dest\" : \"$$dir.*\" > /dev/null; then \\\n+\t      rm -f $(libsubdir)/include/$$i; \\\n+\t      ln -s $(libsubdir)/include`echo \"$$dest\" | sed \"s|$$dir||\"` $(libsubdir)/include/$$i; \\\n+\t    fi; \\\n+\t  done; \\\n+\tfi\n \n-# Install float.h for native compiler.\n-install-float-h: float.h install-dir\n-\t-rm -f $(libsubdir)/include/float.h\n-\t$(INSTALL_DATA) float.h $(libsubdir)/include/float.h\n-\tchmod a-x $(libsubdir)/include/float.h\n+# Create or recreate the gcc private include file directory.\n+install-include-dir:\n+\t-rm -rf $(libsubdir)/include\n+\tmkdir $(libsubdir)/include\n+\t-chmod a+rx $(libsubdir)/include\n+\n+# Install the include directory using tar.\n+install-headers-tar: stmp-headers install-include-dir\n+\t( cd include; tar cf - . ) | (cd $(libsubdir)/include; tar xpBf - )\n+\n+# Install the include directory using cpio.\n+install-headers-cpio: stmp-headers install-include-dir\n+\t( cd include; find . -print | cpio -pdum $(libsubdir)/include )\n \n-# Install limits.h.\n-install-limits-h: xlimits.h install-dir\n-\t-rm -f $(libsubdir)/include/limits.h\n-\t$(INSTALL_DATA) xlimits.h $(libsubdir)/include/limits.h\n-\tchmod a-x $(libsubdir)/include/limits.h\n-\n-# Install the fixed headers that are the same for all machines.\n-install-common-headers: install-dir $(USER_H) gvarargs.h gstdarg.h gstddef.h gsyslimits.h assert.h\n-\t-if [ -d $(libsubdir)/include ] ; then true ; else mkdir $(libsubdir)/include ; fi\n-\t-chmod ugo+rx $(libsubdir)/include\n-# Must compute $(libsubdir) before the cd; the awk script won't work after.\n-\tshelllibsubdir=$(libsubdir); \\\n-\tcd $(srcdir); \\\n-\tfor file in $(USER_H); do \\\n-\t   rm -f $$shelllibsubdir/include/`basename $$file`; \\\n-\t   $(INSTALL_DATA) `basename $$file` $$shelllibsubdir/include/`basename $$file`; \\\n-\t   chmod a-x $$shelllibsubdir/include/`basename $$file`; \\\n-\tdone\n # Put assert.h in /usr/local/include, so it won't override GNU libc's assert.h.\n # Don't replace the assert.h already there if it is not from GCC.\n # This code would be simpler if it tested for -f ... && ! grep ...\n # but supposedly the ! operator is missing in sh on some systems.\n+install-assert-h: assert.h install-dir\n \tif [ -f $(assertdir)/assert.h ]; \\\n \tthen \\\n \t  if grep \"__eprintf\" $(assertdir)/assert.h >/dev/null; \\\n@@ -1541,67 +1604,6 @@ install-common-headers: install-dir $(USER_H) gvarargs.h gstdarg.h gstddef.h gsy\n \t  $(INSTALL_DATA) $(srcdir)/assert.h $(assertdir)/assert.h; \\\n \t  chmod a-x $(assertdir)/assert.h; \\\n \tfi\n-\t-rm -f $(libsubdir)/include/syslimits.h\n-\t$(INSTALL_DATA) $(srcdir)/gsyslimits.h $(libsubdir)/include/syslimits.h\n-\tchmod a-x $(libsubdir)/include/syslimits.h\n-\t-rm -f $(libsubdir)/include/varargs.h\n-\t$(INSTALL_DATA) $(srcdir)/gvarargs.h $(libsubdir)/include/varargs.h\n-\tchmod a-x $(libsubdir)/include/varargs.h\n-\t-rm -f $(libsubdir)/include/stdarg.h\n-\t$(INSTALL_DATA) $(srcdir)/gstdarg.h $(libsubdir)/include/stdarg.h\n-\tchmod a-x $(libsubdir)/include/stdarg.h\n-\t-rm -f $(libsubdir)/include/stddef.h\n-\t$(INSTALL_DATA) $(srcdir)/gstddef.h $(libsubdir)/include/stddef.h\n-\tchmod a-x $(libsubdir)/include/stddef.h\n-# This is turned off because fixinc.svr4 can now get it directly from srcdir.\n-## Copy byteorder.h into the object file directory \n-## so that fixinc.svr4 can get at it if necessary.\n-## If the dirs are the same, this won't do anything.\n-## Delete file first in case it is read-only\n-#\t-if [ x`cd $(srcdir);pwd` != x`pwd` ]; then rm -f byteorder.h; else true; fi\n-#\t-cp $(srcdir)/byteorder.h . > /dev/null 2>&1\n-\n-# $(libsubdir)/include:\n-#\t-if [ -d $(libsubdir)/include ] ; then true ; else mkdir $(libsubdir)/include ; fi\n-#\t-chmod ugo+rx $(libsubdir)/include\n-\n-# This appears not to work.  It isn't clear how to fix it.\n-# $(libsubdir)/include/README: $(libsubdir)/include $(srcdir)/$(FIXINCLUDES)\n-#\tLIB=$(libsubdir)/include $(srcdir)/$(FIXINCLUDES)\n-#\t$(INSTALL_DATA) $(srcdir)/fixincludes-README $@\n-#\tchmod a-x $@\n-\n-# Run fixincludes in the proper directory.\n-install-fixincludes: install-headers\n-\trm -rf $(libsubdir)/tmp\n-\tmkdir $(libsubdir)/tmp\n-# Move aside the headers that come from GCC; delete all else.\n-# The sed command gets just the last file name component;\n-# this is necessary because VPATH could add a dirname.\n-# Using basename would be simpler, but some systems don't have it.\n-\tcd $(libsubdir)/include; \\\n-\tfor file in $(INSTALLED_H); do \\\n-\t  realfile=`echo $$file | sed -e 's|.*/\\([^/]*\\)$$|\\1|'`; \\\n-\t  mv $$realfile ../tmp; \\\n-\tdone; \\\n-\trm -rf *\n-# Install fixed copies of system files.\n-\tfor dir in $(SYSTEM_HEADER_DIR) $(OTHER_FIXINCLUDES_DIRS); do \\\n-\t  if [ -d $$dir ]; \\\n-\t  then \\\n-\t    $(srcdir)/$(FIXINCLUDES) $(libsubdir)/include $$dir $(srcdir); \\\n-\t  else true; fi; \\\n-\tdone\n-\t-cd $(libsubdir)/include; \\\n-\tif [ -f limits.h ]; then \\\n-\t  rm -f ../tmp/syslimits.h; \\\n-\t  cp limits.h ../tmp/syslimits.h; \\\n-\telse true; fi\n-# Bring back gcc's header files.\n-\tcd $(libsubdir)/include; mv ../tmp/* .; rmdir ../tmp\n-# Install the README\n-\t$(INSTALL_DATA) $(srcdir)/README-fixinc $(libsubdir)/include/README\n-\tchmod a-x $(libsubdir)/include/README\n \n # Use this target to install the program `collect2' under the name `ld'.\n install-collect2: collect2"}, {"sha": "80bcbcf8a94cdcbae6130450508ada0836952e04", "filename": "gcc/cross-make", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba1811f11fe84a6d13d47e898f08fb38dedb91da/gcc%2Fcross-make", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba1811f11fe84a6d13d47e898f08fb38dedb91da/gcc%2Fcross-make", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcross-make?ref=ba1811f11fe84a6d13d47e898f08fb38dedb91da", "patch": "@@ -13,11 +13,11 @@ RANLIB_TEST = $(RANLIB_TEST_FOR_TARGET)\n # Dir to search for system headers.  Normally /usr/include.\n SYSTEM_HEADER_DIR = $(tooldir)/include\n \n-# Cause installation using install-cross.\n-INSTALL_TARGET = install-cross\n-\n # Don't try to compile the things we can't compile.\n ALL = all.cross\n \n+# Use cross-compiler version of float.h.\n+FLOAT_H = $(CROSS_FLOAT_H)\n+\n # Don't install assert.h in /usr/local/include.\n assertdir = $(tooldir)/include"}]}