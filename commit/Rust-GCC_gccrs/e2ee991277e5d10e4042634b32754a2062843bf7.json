{"sha": "e2ee991277e5d10e4042634b32754a2062843bf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJlZTk5MTI3N2U1ZDEwZTQwNDI2MzRiMzI3NTRhMjA2Mjg0M2JmNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-04-26T00:43:09Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-04-26T00:43:09Z"}, "message": "calls.c (expand_call): Disable tail call generation once rtx_equal_function_value_matters is false.\n\n        * calls.c (expand_call): Disable tail call generation once\n        rtx_equal_function_value_matters is false.\n\n        * reg-stack.c (convert_regs_1): Treat EDGE_ABNORMAL_CALL edges\n        like EDGE_EH edges.\n\nFrom-SVN: r33431", "tree": {"sha": "2764dc0cca7a5f315ad3eeb6388d3fcd74e059f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2764dc0cca7a5f315ad3eeb6388d3fcd74e059f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2ee991277e5d10e4042634b32754a2062843bf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2ee991277e5d10e4042634b32754a2062843bf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2ee991277e5d10e4042634b32754a2062843bf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2ee991277e5d10e4042634b32754a2062843bf7/comments", "author": null, "committer": null, "parents": [{"sha": "1cfdcc15effc096604f32fb88ddc1ad8f67aab07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cfdcc15effc096604f32fb88ddc1ad8f67aab07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cfdcc15effc096604f32fb88ddc1ad8f67aab07"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "9cbe4c8f751d3bf282828db5370645467945a19f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2ee991277e5d10e4042634b32754a2062843bf7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2ee991277e5d10e4042634b32754a2062843bf7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e2ee991277e5d10e4042634b32754a2062843bf7", "patch": "@@ -1,4 +1,12 @@\n-2000-04-26  Jason Merrill  <jason@casey.cygnus.com>\n+2000-04-25  Richard Henderson  <rth@cygnus.com>\n+\n+\t* calls.c (expand_call): Disable tail call generation once\n+\trtx_equal_function_value_matters is false.\n+\n+\t* reg-stack.c (convert_regs_1): Treat EDGE_ABNORMAL_CALL edges\n+\tlike EDGE_EH edges.\n+\n+2000-04-25  Jason Merrill  <jason@casey.cygnus.com>\n \n \t* dwarf2out.c (add_bound_info): Don't crash on an unexpanded SAVE_EXPR.\n "}, {"sha": "0e8138f2462071b83cd152e573cb48fbd57bf4dc", "filename": "gcc/calls.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2ee991277e5d10e4042634b32754a2062843bf7/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2ee991277e5d10e4042634b32754a2062843bf7/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=e2ee991277e5d10e4042634b32754a2062843bf7", "patch": "@@ -2106,11 +2106,18 @@ expand_call (exp, target, ignore)\n      pushed these optimizations into -O2.  Don't try if we're already\n      expanding a call, as that means we're an argument.  Similarly, if\n      there's pending loops or cleanups we know there's code to follow\n-     the call.  */\n+     the call.\n+\n+     If rtx_equal_function_value_matters is false, that means we've \n+     finished with regular parsing.  Which means that some of the\n+     machinery we use to generate tail-calls is no longer in place.\n+     This is most often true of sjlj-exceptions, which we couldn't\n+     tail-call to anyway.  */\n \n   try_tail_call = 0;\n   if (flag_optimize_sibling_calls\n       && currently_expanding_call == 1\n+      && rtx_equal_function_value_matters\n       && stmt_loop_nest_empty ()\n       && ! any_pending_cleanups (1))\n     {"}, {"sha": "75725610dfaef5cee06657988f366ce5350ff062", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2ee991277e5d10e4042634b32754a2062843bf7/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2ee991277e5d10e4042634b32754a2062843bf7/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=e2ee991277e5d10e4042634b32754a2062843bf7", "patch": "@@ -2550,7 +2550,7 @@ convert_regs_1 (file, block)\n       /* Care for EH edges specially.  The normal return path may return\n \t a value in st(0), but the EH path will not, and there's no need\n \t to add popping code to the edge.  */\n-      if (e->flags & EDGE_EH)\n+      if (e->flags & (EDGE_EH | EDGE_ABNORMAL_CALL))\n \t{\n \t  /* Assert that the lifetimes are as we expect -- one value\n \t     live at st(0) on the end of the source block, and no"}]}