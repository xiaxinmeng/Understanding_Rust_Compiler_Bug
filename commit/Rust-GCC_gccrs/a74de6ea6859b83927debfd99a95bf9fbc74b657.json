{"sha": "a74de6ea6859b83927debfd99a95bf9fbc74b657", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc0ZGU2ZWE2ODU5YjgzOTI3ZGViZmQ5OWE5NWJmOWZiYzc0YjY1Nw==", "commit": {"author": {"name": "Craig Burley", "email": "burley@gnu.org", "date": "1998-08-05T11:19:05Z"}, "committer": {"name": "Dave Love", "email": "fx@gcc.gnu.org", "date": "1998-08-05T11:19:05Z"}, "message": "com.c (ffecom_convert_narrow_, [...]): Allow conversion from pointer to same-sized integer...\n\nTue Aug  4 16:59:39 1998  Craig Burley  <burley@gnu.org>\n\t* com.c (ffecom_convert_narrow_, ffecom_convert_widen_):\n\tAllow conversion from pointer to same-sized integer,\n\tto fix invoking SIGNAL as a function.\n\n[[Split portion of a mixed commit.]]\n\nFrom-SVN: r21617.2", "tree": {"sha": "c485faacf988fb08a67553e024d1f38d10a03917", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c485faacf988fb08a67553e024d1f38d10a03917"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a74de6ea6859b83927debfd99a95bf9fbc74b657", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a74de6ea6859b83927debfd99a95bf9fbc74b657", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a74de6ea6859b83927debfd99a95bf9fbc74b657", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a74de6ea6859b83927debfd99a95bf9fbc74b657/comments", "author": null, "committer": null, "parents": [{"sha": "a16be296490bc7b31d2718accf4334a3f51d9758", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a16be296490bc7b31d2718accf4334a3f51d9758", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a16be296490bc7b31d2718accf4334a3f51d9758"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "d9fd6ef121818139cf87dc253ab8be2f2e40668d", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a74de6ea6859b83927debfd99a95bf9fbc74b657/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a74de6ea6859b83927debfd99a95bf9fbc74b657/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=a74de6ea6859b83927debfd99a95bf9fbc74b657", "patch": "@@ -1,3 +1,9 @@\n+Tue Aug  4 16:59:39 1998  Craig Burley  <burley@gnu.org>\n+\n+\t* com.c (ffecom_convert_narrow_, ffecom_convert_widen_):\n+\tAllow conversion from pointer to same-sized integer,\n+\tto fix invoking SIGNAL as a function.\n+\n 1998-07-26  Dave Love  <d.love@dl.ac.uk>\n \n \t* BUGS, INSTALL, NEWS: Rebuilt."}, {"sha": "fc1f6a5fc7718e23fa866925c4155c87e063fb18", "filename": "gcc/f/com.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a74de6ea6859b83927debfd99a95bf9fbc74b657/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a74de6ea6859b83927debfd99a95bf9fbc74b657/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=a74de6ea6859b83927debfd99a95bf9fbc74b657", "patch": "@@ -922,8 +922,11 @@ ffecom_convert_narrow_ (type, expr)\n   assert (code != ENUMERAL_TYPE);\n   if (code == INTEGER_TYPE)\n     {\n-      assert (TREE_CODE (TREE_TYPE (e)) == INTEGER_TYPE);\n-      assert (TYPE_PRECISION (type) <= TYPE_PRECISION (TREE_TYPE (e)));\n+      assert ((TREE_CODE (TREE_TYPE (e)) == INTEGER_TYPE\n+\t       && TYPE_PRECISION (type) <= TYPE_PRECISION (TREE_TYPE (e)))\n+\t      || (TREE_CODE (TREE_TYPE (e)) == POINTER_TYPE\n+\t\t  && (TYPE_PRECISION (type)\n+\t\t      == TREE_INT_CST_LOW (TYPE_SIZE (TREE_TYPE (e))))));\n       return fold (convert_to_integer (type, e));\n     }\n   if (code == POINTER_TYPE)\n@@ -992,8 +995,11 @@ ffecom_convert_widen_ (type, expr)\n   assert (code != ENUMERAL_TYPE);\n   if (code == INTEGER_TYPE)\n     {\n-      assert (TREE_CODE (TREE_TYPE (e)) == INTEGER_TYPE);\n-      assert (TYPE_PRECISION (type) >= TYPE_PRECISION (TREE_TYPE (e)));\n+      assert ((TREE_CODE (TREE_TYPE (e)) == INTEGER_TYPE\n+\t       && TYPE_PRECISION (type) >= TYPE_PRECISION (TREE_TYPE (e)))\n+\t      || (TREE_CODE (TREE_TYPE (e)) == POINTER_TYPE\n+\t\t  && (TYPE_PRECISION (type)\n+\t\t      == TREE_INT_CST_LOW (TYPE_SIZE (TREE_TYPE (e))))));\n       return fold (convert_to_integer (type, e));\n     }\n   if (code == POINTER_TYPE)"}]}