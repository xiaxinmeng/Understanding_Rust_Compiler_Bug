{"sha": "796621e8c274bfce5c7f3f1d23126267b91f102f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk2NjIxZThjMjc0YmZjZTVjN2YzZjFkMjMxMjYyNjdiOTFmMTAyZg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-04-24T09:46:17Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-04-24T09:46:17Z"}, "message": "New GCOV_TAG_FUNCTION layout\n\n\tNew GCOV_TAG_FUNCTION layout\n\t* coverage.c (struct function_list): Replace name with ident.\n\t(struct counts_entry): Likewise.\n\t(fn_ident): New.\n\t(htab_counts_entry_hash, htab_counts_entry_eq,\n\thtab_counts_entry_del): Adjust.\n\t(reads_count_file, get_coverage_counts,\n\tcoverage_begin_output, coverage_end_function): Adjust.\n\t(build_fn_info_type, build_fn_info_value): Likewise.\n\t* gcov-dump.c (tag_function): Adjust.\n\t* gcov-io.c (gcov_write_string, gcov_read_string): Not in LIBGCOV.\n\t* gcov-io.h (gcov_write_string, gcov_read_string): Not in LIBGCOV.\n\t* gcov.c (struct function_info): Add ident.\n\t(read_graph_file, read_count_file): Adjust.\n\t* libgcov.c (gcov_exit): Adjust.\n\nFrom-SVN: r66035", "tree": {"sha": "1dff424ee79b2287699dd3e721d653f4dbfa039f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dff424ee79b2287699dd3e721d653f4dbfa039f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/796621e8c274bfce5c7f3f1d23126267b91f102f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/796621e8c274bfce5c7f3f1d23126267b91f102f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/796621e8c274bfce5c7f3f1d23126267b91f102f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/796621e8c274bfce5c7f3f1d23126267b91f102f/comments", "author": null, "committer": null, "parents": [{"sha": "374ca7f74e476db1cf06296eea9ca4bce8b2264a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/374ca7f74e476db1cf06296eea9ca4bce8b2264a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/374ca7f74e476db1cf06296eea9ca4bce8b2264a"}], "stats": {"total": 161, "additions": 89, "deletions": 72}, "files": [{"sha": "a4dd1da3859fd3b0cd3c88da17bbc4268dc01303", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/796621e8c274bfce5c7f3f1d23126267b91f102f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/796621e8c274bfce5c7f3f1d23126267b91f102f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=796621e8c274bfce5c7f3f1d23126267b91f102f", "patch": "@@ -1,3 +1,21 @@\n+2003-04-24  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tNew GCOV_TAG_FUNCTION layout\n+\t* coverage.c (struct function_list): Replace name with ident.\n+\t(struct counts_entry): Likewise.\n+\t(fn_ident): New.\n+\t(htab_counts_entry_hash, htab_counts_entry_eq,\n+\thtab_counts_entry_del): Adjust.\n+\t(reads_count_file, get_coverage_counts,\n+\tcoverage_begin_output, coverage_end_function): Adjust.\n+\t(build_fn_info_type, build_fn_info_value): Likewise.\n+\t* gcov-dump.c (tag_function): Adjust.\n+\t* gcov-io.c (gcov_write_string, gcov_read_string): Not in LIBGCOV.\n+\t* gcov-io.h (gcov_write_string, gcov_read_string): Not in LIBGCOV.\n+\t* gcov.c (struct function_info): Add ident.\n+\t(read_graph_file, read_count_file): Adjust.\n+\t* libgcov.c (gcov_exit): Adjust.\n+\n 2003-04-23  Richard Henderson  <rth@redhat.com>\n \n \tPR opt/8300"}, {"sha": "9d7e0893905ea819b9c3acba61248bcbd6b985c0", "filename": "gcc/coverage.c", "status": "modified", "additions": 31, "deletions": 43, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/796621e8c274bfce5c7f3f1d23126267b91f102f/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/796621e8c274bfce5c7f3f1d23126267b91f102f/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=796621e8c274bfce5c7f3f1d23126267b91f102f", "patch": "@@ -50,7 +50,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n struct function_list\n {\n   struct function_list *next; \t /* next function */\n-  const char *name; \t\t /* function name */\n+  unsigned ident; \t\t /* function ident */\n   unsigned checksum;\t         /* function checksum */\n   unsigned n_ctrs[GCOV_COUNTERS];/* number of counters.  */\n };\n@@ -59,7 +59,7 @@ struct function_list\n typedef struct counts_entry\n {\n   /* We hash by  */\n-  char *function_name;\n+  unsigned ident;\n   unsigned ctr;\n   \n   /* Store  */\n@@ -72,6 +72,7 @@ typedef struct counts_entry\n   \n } counts_entry_t;\n \n+static unsigned fn_ident = 1;\n static struct function_list *functions_head = 0;\n static struct function_list **functions_tail = &functions_head;\n \n@@ -118,7 +119,7 @@ htab_counts_entry_hash (of)\n {\n   const counts_entry_t *entry = of;\n \n-  return htab_hash_string (entry->function_name) ^ entry->ctr;\n+  return entry->ident * GCOV_COUNTERS + entry->ctr;\n }\n \n static int\n@@ -129,8 +130,7 @@ htab_counts_entry_eq (of1, of2)\n   const counts_entry_t *entry1 = of1;\n   const counts_entry_t *entry2 = of2;\n \n-  return !strcmp (entry1->function_name, entry2->function_name)\n-    && entry1->ctr == entry2->ctr;\n+  return entry1->ident == entry2->ident && entry1->ctr == entry2->ctr;\n }\n \n static void\n@@ -139,7 +139,6 @@ htab_counts_entry_del (of)\n {\n   counts_entry_t *entry = of;\n \n-  free (entry->function_name);\n   free (entry->counts);\n   free (entry);\n }\n@@ -149,7 +148,7 @@ htab_counts_entry_del (of)\n static void\n read_counts_file ()\n {\n-  char *function_name_buffer = NULL;\n+  unsigned fn_ident = 0;\n   unsigned version, ix, checksum = -1;\n   counts_entry_t *summaried = NULL;\n   unsigned seen_summary = 0;\n@@ -193,9 +192,7 @@ read_counts_file ()\n       offset = gcov_position ();\n       if (tag == GCOV_TAG_FUNCTION)\n \t{\n-\t  const char *string = gcov_read_string ();\n-\t  free (function_name_buffer);\n-\t  function_name_buffer = string ? xstrdup (string) : NULL;\n+\t  fn_ident = gcov_read_unsigned ();\n \t  checksum = gcov_read_unsigned ();\n \t  if (seen_summary)\n \t    {\n@@ -231,13 +228,13 @@ read_counts_file ()\n \t      entry->summary.sum_max += csum->sum_max;\n \t    }\n \t}\n-      else if (GCOV_TAG_IS_COUNTER (tag) && function_name_buffer)\n+      else if (GCOV_TAG_IS_COUNTER (tag) && fn_ident)\n \t{\n \t  counts_entry_t **slot, *entry, elt;\n \t  unsigned n_counts = length / 8;\n \t  unsigned ix;\n \n-\t  elt.function_name = function_name_buffer;\n+\t  elt.ident = fn_ident;\n \t  elt.ctr = GCOV_COUNTER_FOR_TAG (tag);\n \n \t  slot = (counts_entry_t **) htab_find_slot\n@@ -246,7 +243,7 @@ read_counts_file ()\n \t  if (!entry)\n \t    {\n \t      *slot = entry = xcalloc (1, sizeof (counts_entry_t));\n-\t      entry->function_name = xstrdup (elt.function_name);\n+\t      entry->ident = elt.ident;\n \t      entry->ctr = elt.ctr;\n \t      entry->checksum = checksum;\n \t      entry->summary.num = n_counts;\n@@ -255,7 +252,7 @@ read_counts_file ()\n \t  else if (entry->checksum != checksum\n \t\t   || entry->summary.num != n_counts)\n \t    {\n-\t      warning (\"profile mismatch for `%s'\", function_name_buffer);\n+\t      warning (\"coverage mismatch for function %u\", fn_ident);\n \t      htab_delete (counts_hash);\n \t      break;\n \t    }\n@@ -281,7 +278,6 @@ read_counts_file ()\n \t}\n     }\n \n-  free (function_name_buffer);\n   gcov_close ();\n }\n \n@@ -304,24 +300,24 @@ get_coverage_counts (unsigned counter, unsigned expected,\n       return NULL;\n     }\n \n-  elt.function_name\n-    = (char *) IDENTIFIER_POINTER\n-    (DECL_ASSEMBLER_NAME (current_function_decl));\n+  elt.ident = fn_ident;\n   elt.ctr = counter;\n   entry = htab_find (counts_hash, &elt);\n   if (!entry)\n     {\n-      warning (\"No profile for function '%s' found.\", elt.function_name);\n+      warning (\"no coverage for function '%s' found.\", IDENTIFIER_POINTER\n+\t       (DECL_ASSEMBLER_NAME (current_function_decl)));\n       return 0;\n     }\n   \n   if (expected != entry->summary.num\n       || compute_checksum () != entry->checksum)\n     {\n-      warning (\"profile mismatch for `%s'\", elt.function_name);\n+      warning (\"coverage mismatch for `%s'\", IDENTIFIER_POINTER\n+\t       (DECL_ASSEMBLER_NAME (current_function_decl)));\n       return NULL;\n     }\n-\n+  \n   if (summary)\n     *summary = &entry->summary;\n \n@@ -426,9 +422,10 @@ coverage_begin_output ()\n       \n       /* Announce function */\n       offset = gcov_write_tag (GCOV_TAG_FUNCTION);\n+      gcov_write_unsigned (fn_ident);\n+      gcov_write_unsigned (compute_checksum ());\n       gcov_write_string (IDENTIFIER_POINTER\n \t\t\t (DECL_ASSEMBLER_NAME (current_function_decl)));\n-      gcov_write_unsigned (compute_checksum ());\n       gcov_write_string (file);\n       gcov_write_unsigned (line);\n       gcov_write_length (offset);\n@@ -456,15 +453,14 @@ coverage_end_function ()\n     {\n       struct function_list *item;\n       \n-      /* ??? Probably should re-use the existing struct function.  */\n       item = xmalloc (sizeof (struct function_list));\n       \n       *functions_tail = item;\n       functions_tail = &item->next;\n \t\n       item->next = 0;\n-      item->name = xstrdup (IDENTIFIER_POINTER\n-\t\t\t    (DECL_ASSEMBLER_NAME (current_function_decl)));\n+      /* It would be nice to use the unique source location. */\n+      item->ident = fn_ident;\n       item->checksum = compute_checksum ();\n       for (i = 0; i != GCOV_COUNTERS; i++)\n \t{\n@@ -476,6 +472,7 @@ coverage_end_function ()\n       fn_ctr_mask = 0;\n     }\n   bbg_function_announced = 0;\n+  fn_ident++;\n }\n \n /* Creates the gcov_fn_info RECORD_TYPE.  */\n@@ -486,13 +483,10 @@ build_fn_info_type (counters)\n {\n   tree type = (*lang_hooks.types.make_type) (RECORD_TYPE);\n   tree field, fields;\n-  tree string_type =\n-\t  build_pointer_type (build_qualified_type (char_type_node,\n-\t\t\t\t\t\t    TYPE_QUAL_CONST));\n   tree array_type;\n   \n-  /* name */\n-  fields = build_decl (FIELD_DECL, NULL_TREE, string_type);\n+  /* ident */\n+  fields = build_decl (FIELD_DECL, NULL_TREE, unsigned_type_node);\n \n   /* checksum */\n   field = build_decl (FIELD_DECL, NULL_TREE, unsigned_type_node);\n@@ -523,20 +517,13 @@ build_fn_info_value (function, type)\n {\n   tree value = NULL_TREE;\n   tree fields = TYPE_FIELDS (type);\n-  size_t name_len = strlen (function->name);\n-  tree fname = build_string (name_len + 1, function->name);\n-  tree string_type =\n-\t  build_pointer_type (build_qualified_type (char_type_node,\n-\t\t\t\t\t\t    TYPE_QUAL_CONST));\n   unsigned ix;\n   tree array_value = NULL_TREE;\n   \n-  /* name */\n-  TREE_TYPE (fname) =\n-\t  build_array_type (char_type_node,\n-\t\t\t    build_index_type (build_int_2 (name_len, 0)));\n+  /* ident */\n   value = tree_cons (fields,\n-\t\t     build1 (ADDR_EXPR, string_type, fname),\n+\t\t     convert (unsigned_type_node,\n+\t\t\t      build_int_2 (function->ident, 0)),\n \t\t     value);\n   fields = TREE_CHAIN (fields);\n   \n@@ -854,16 +841,17 @@ coverage_init (filename)\n {\n   int len = strlen (filename);\n \n+  /* Name of da file.  */\n   da_file_name = (char *) xmalloc (len + strlen (GCOV_DATA_SUFFIX) + 1);\n   strcpy (da_file_name, filename);\n   strcat (da_file_name, GCOV_DATA_SUFFIX);\n   \n-  read_counts_file ();\n-\n-  /* Open the bbg output file.  */\n+  /* Name of bbg file.  */\n   bbg_file_name = (char *) xmalloc (len + strlen (GCOV_GRAPH_SUFFIX) + 1);\n   strcpy (bbg_file_name, filename);\n   strcat (bbg_file_name, GCOV_GRAPH_SUFFIX);\n+\n+  read_counts_file ();\n }\n \n /* Performs file-level cleanup.  Close graph file, generate coverage"}, {"sha": "818c6efed1132fb782734fd914790af72c8e9dd4", "filename": "gcc/gcov-dump.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/796621e8c274bfce5c7f3f1d23126267b91f102f/gcc%2Fgcov-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/796621e8c274bfce5c7f3f1d23126267b91f102f/gcc%2Fgcov-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-dump.c?ref=796621e8c274bfce5c7f3f1d23126267b91f102f", "patch": "@@ -254,15 +254,17 @@ tag_function (filename, tag, length)\n      unsigned tag ATTRIBUTE_UNUSED;\n      unsigned length ATTRIBUTE_UNUSED;\n {\n-  const char *name;\n   unsigned long pos = gcov_position ();\n   \n-  name = gcov_read_string ();\n-  printf (\" `%s'\", name ? name : \"NULL\");\n-  printf (\" checksum=0x%08x\", gcov_read_unsigned ());\n+  printf (\" ident=%u\", gcov_read_unsigned ());\n+  printf (\", checksum=0x%08x\", gcov_read_unsigned ());\n \n   if (gcov_position () - pos < length)\n     {\n+      const char *name;\n+      \n+      name = gcov_read_string ();\n+      printf (\", `%s'\", name ? name : \"NULL\");\n       name = gcov_read_string ();\n       printf (\" %s\", name ? name : \"NULL\");\n       printf (\":%u\", gcov_read_unsigned ());"}, {"sha": "2f2a87fdb217780164b5406564fcd7ef172d9026", "filename": "gcc/gcov-io.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/796621e8c274bfce5c7f3f1d23126267b91f102f/gcc%2Fgcov-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/796621e8c274bfce5c7f3f1d23126267b91f102f/gcc%2Fgcov-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.c?ref=796621e8c274bfce5c7f3f1d23126267b91f102f", "patch": "@@ -222,6 +222,7 @@ gcov_write_counter (gcov_type value)\n }\n #endif /* IN_LIBGCOV */\n \n+#if !IN_LIBGCOV\n /* Write STRING to coverage file.  Sets error flag on file\n    error, overflow flag on overflow */\n \n@@ -254,6 +255,7 @@ gcov_write_string (const char *string)\n       memcpy (buffer + 4 + length, &pad, rem);\n     }\n }\n+#endif\n \n /* Write a tag TAG and reserve space for the record length. Return a\n    value to be used for gcov_write_length.  */\n@@ -396,6 +398,7 @@ gcov_read_counter ()\n    buffer, or NULL on empty string. You must copy the string before\n    calling another gcov function.  */\n \n+#if !IN_LIBGCOV\n GCOV_LINKAGE const char *\n gcov_read_string ()\n {\n@@ -407,6 +410,7 @@ gcov_read_string ()\n   length += 4 - (length & 3);\n   return (const char *) gcov_read_bytes (length);\n }\n+#endif\n \n GCOV_LINKAGE void\n gcov_read_summary (struct gcov_summary *summary)"}, {"sha": "df5fb976543372018f59b419bb48692095edbb42", "filename": "gcc/gcov-io.h", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/796621e8c274bfce5c7f3f1d23126267b91f102f/gcc%2Fgcov-io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/796621e8c274bfce5c7f3f1d23126267b91f102f/gcc%2Fgcov-io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.h?ref=796621e8c274bfce5c7f3f1d23126267b91f102f", "patch": "@@ -95,10 +95,11 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    file and [a1..ff] for the counter file.\n \n    The basic block graph file contains the following records\n-   \tbbg:  function-graph*\n+   \tbbg:  unit function-graph*\n+\tunit: header int32:checksum string:source\n \tfunction-graph: announce_function basic_blocks {arcs | lines}*\n-\tannounce_function: header string:name int32:checksum\n-\t\tstring:source int32:lineno\n+\tannounce_function: header int32:ident int32:checksum\n+\t\tstring:name string:source int32:lineno\n \tbasic_block: header int32:flags*\n \tarcs: header int32:block_no arc*\n \tarc:  int32:dest_block int32:flags\n@@ -123,9 +124,10 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    blocks they are for.\n \n    The data file contains the following records.\n-        da:   {function-data* summary:object summary:program*}*\n+        da: {unit function-data* summary:object summary:program*}*\n+\tunit: header int32:checksum\n         function-data:\tannounce_function arc_counts\n-\tannounce_function: header string:name int32:checksum\n+\tannounce_function: header int32:ident int32:checksum\n \tarc_counts: header int64:count*\n \tsummary: int32:checksum {count-summary}GCOV_COUNTERS\n \tcount-summary:\tint32:num int32:runs int64:sum\n@@ -279,7 +281,7 @@ struct gcov_summary\n    explicitly calculate the correct array stride.  */\n struct gcov_fn_info\n {\n-  const char *name;\t        /* (mangled) name of function */\n+  unsigned ident;               /* unique ident of function */\n   unsigned checksum;\t\t/* function checksum */\n   unsigned n_ctrs[0];\t\t/* instrumented counters */\n };\n@@ -339,8 +341,9 @@ GCOV_LINKAGE unsigned char *gcov_write_bytes (unsigned);\n GCOV_LINKAGE void gcov_write_unsigned (unsigned);\n #if IN_LIBGCOV\n GCOV_LINKAGE void gcov_write_counter (gcov_type);\n-#endif\n+#else\n GCOV_LINKAGE void gcov_write_string (const char *);\n+#endif\n GCOV_LINKAGE unsigned long gcov_write_tag (unsigned);\n GCOV_LINKAGE void gcov_write_length (unsigned long /*position*/);\n #if IN_LIBGCOV\n@@ -350,9 +353,10 @@ GCOV_LINKAGE void gcov_write_summary (unsigned, const struct gcov_summary *);\n GCOV_LINKAGE const unsigned char *gcov_read_bytes (unsigned);\n GCOV_LINKAGE unsigned gcov_read_unsigned (void);\n GCOV_LINKAGE gcov_type gcov_read_counter (void);\n+#if !IN_LIBGCOV\n GCOV_LINKAGE const char *gcov_read_string (void);\n+#endif\n GCOV_LINKAGE void gcov_read_summary (struct gcov_summary *);\n-\n static unsigned long gcov_position (void);\n static void gcov_seek (unsigned long /*base*/, unsigned /*length */);\n static unsigned long gcov_seek_end (void);"}, {"sha": "40e16cf92ed2a0fe45312b8798c3a75b9c2b56b8", "filename": "gcc/gcov.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/796621e8c274bfce5c7f3f1d23126267b91f102f/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/796621e8c274bfce5c7f3f1d23126267b91f102f/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=796621e8c274bfce5c7f3f1d23126267b91f102f", "patch": "@@ -168,6 +168,7 @@ typedef struct function_info\n {\n   /* Name of function.  */\n   char *name;\n+  unsigned ident;\n   unsigned checksum;\n \n   /* Array of basic blocks.  */\n@@ -744,21 +745,23 @@ read_graph_file ()\n       unsigned tag = gcov_read_unsigned ();\n       unsigned length = gcov_read_unsigned ();\n       unsigned long base = gcov_position ();\n-      \n+\n       if (tag == GCOV_TAG_FUNCTION)\n \t{\n \t  char *function_name;\n-\t  unsigned checksum, lineno;\n+\t  unsigned ident, checksum, lineno;\n \t  source_t *src;\n \t  function_t *probe, *prev;\n \n-\t  function_name = xstrdup (gcov_read_string ());\n+\t  ident = gcov_read_unsigned ();\n \t  checksum = gcov_read_unsigned ();\n+\t  function_name = xstrdup (gcov_read_string ());\n \t  src = find_source (gcov_read_string ());\n \t  lineno = gcov_read_unsigned ();\n \t  \n \t  fn = (function_t *)xcalloc (1, sizeof (function_t));\n \t  fn->name = function_name;\n+\t  fn->ident = ident;\n \t  fn->checksum = checksum;\n \t  fn->src = src;\n \t  fn->line = lineno;\n@@ -1015,7 +1018,7 @@ read_count_file ()\n \tprogram_count++;\n       else if (tag == GCOV_TAG_FUNCTION)\n \t{\n-\t  const char *function_name = gcov_read_string ();\n+\t  unsigned ident = gcov_read_unsigned ();\n \t  struct function_info *fn_n = functions;\n \n \t  for (fn = fn ? fn->next : NULL; ; fn = fn->next)\n@@ -1026,11 +1029,11 @@ read_count_file ()\n \t\tfn_n = NULL;\n \t      else\n \t\t{\n-\t\t  fnotice (stderr, \"%s:unknown function `%s'\\n\",\n-\t\t\t   da_file_name, function_name);\n+\t\t  fnotice (stderr, \"%s:unknown function `%u'\\n\",\n+\t\t\t   da_file_name, ident);\n \t\t  break;\n \t\t}\n-\t      if (!strcmp (fn->name, function_name))\n+\t      if (fn->ident == ident)\n \t\tbreak;\n \t    }\n "}, {"sha": "a40611494fcbd3806e851aad7d029b1d95dc7cd2", "filename": "gcc/libgcov.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/796621e8c274bfce5c7f3f1d23126267b91f102f/gcc%2Flibgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/796621e8c274bfce5c7f3f1d23126267b91f102f/gcc%2Flibgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcov.c?ref=796621e8c274bfce5c7f3f1d23126267b91f102f", "patch": "@@ -203,27 +203,26 @@ gcov_exit (void)\n \t    }\n \t  \n \t  /* Merge execution counts for each function.  */\n-\t  for (f_ix = gi_ptr->n_functions, fi_ptr = gi_ptr->functions; f_ix--;\n+\t  for (f_ix = gi_ptr->n_functions, fi_ptr = gi_ptr->functions;\n+\t       f_ix--;\n \t       fi_ptr = (const struct gcov_fn_info *)\n \t\t ((const char *) fi_ptr + fi_stride))\n \t    {\n \t      tag = gcov_read_unsigned ();\n \t      length = gcov_read_unsigned ();\n \n \t      /* Check function */\n-\t      if (tag != GCOV_TAG_FUNCTION)\n+\t      if (tag != GCOV_TAG_FUNCTION\n+\t\t  || gcov_read_unsigned () != fi_ptr->ident\n+\t\t  || gcov_read_unsigned () != fi_ptr->checksum)\n \t\t{\n \t\tread_mismatch:;\n \t\t  fprintf (stderr, \"profiling:%s:Merge mismatch for %s\\n\",\n \t\t\t   gi_ptr->filename,\n-\t\t\t   fi_ptr ? fi_ptr->name : \"summaries\");\n+\t\t\t   f_ix + 1 ? \"function\" : \"summaries\");\n \t\t  goto read_fatal;\n \t\t}\n \n-\t      if (strcmp (gcov_read_string (), fi_ptr->name)\n-\t\t  || gcov_read_unsigned () != fi_ptr->checksum)\n-\t\tgoto read_mismatch;\n-\n \t      for (c_ix = t_ix = 0; t_ix != GCOV_COUNTERS; t_ix++)\n \t\tif ((1 << t_ix) & gi_ptr->ctr_mask)\n \t\t  {\n@@ -284,9 +283,8 @@ gcov_exit (void)\n       if (!summary_pos)\n \tmemset (&program, 0, sizeof (program));\n \n-      fi_ptr = 0;\n-      \n       /* Merge the summaries.  */\n+      f_ix = ~0u;\n       for (t_ix = c_ix = 0,\n \t     cs_obj = object.ctrs, cs_tobj = this_object.ctrs,\n \t     cs_prg = program.ctrs, cs_tprg = this_program.ctrs,\n@@ -346,7 +344,7 @@ gcov_exit (void)\n \t{\n \t  /* Announce function.  */\n \t  base = gcov_write_tag (GCOV_TAG_FUNCTION);\n-\t  gcov_write_string (fi_ptr->name);\n+\t  gcov_write_unsigned (fi_ptr->ident);\n \t  gcov_write_unsigned (fi_ptr->checksum);\n \t  gcov_write_length (base);\n "}]}