{"sha": "303e1d56c6214940a633c2b8ea7da2d81c15bd4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAzZTFkNTZjNjIxNDk0MGE2MzNjMmI4ZWE3ZGEyZDgxYzE1YmQ0ZA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2015-01-08T21:52:35Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-01-08T21:52:35Z"}, "message": "jit: New API entrypoint: gcc_jit_context_get_last_error\n\ngcc/jit/ChangeLog:\n\t* docs/topics/contexts.rst (Error-handling): Document new\n\tentrypoint gcc_jit_context_get_last_error.\n\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n\t* jit-recording.c (gcc::jit::recording::context::context):\n\tInitialize new fields \"m_last_error_str\" and\n\t\"m_owns_last_error_str\".\n\t(gcc::jit::recording::context::~context): Clean up\n\tm_last_error_str, if needed.\n\t(gcc::jit::recording::context::add_error_va): Update\n\tm_last_error_str and m_owns_last_error_str, freeing the old\n\tvalue if appropriate.\n\t(gcc::jit::recording::context::get_last_error): New function.\n\t* jit-recording.h (gcc::jit::recording::context::get_last_error):\n\tNew function.\n\t(gcc::jit::recording::context): New fields m_last_error_str and\n\tm_owns_last_error_str.\n\t* libgccjit.c (gcc_jit_context_get_last_error): New function.\n\t* libgccjit.h (gcc_jit_context_get_last_error): New declaration.\n\t* libgccjit.map (gcc_jit_context_get_last_error): New function.\n\ngcc/testsuite/ChangeLog:\n\t* jit.dg/test-error-block-in-wrong-function.c (verify_code):\n\tVerify the result of gcc_jit_context_get_last_error.\n\t* jit.dg/test-error-null-passed-to-api.c (verify_code): Likewise.\n\nFrom-SVN: r219363", "tree": {"sha": "66af508dfe03e5522c875f84f66abfeeeabbcd9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66af508dfe03e5522c875f84f66abfeeeabbcd9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/303e1d56c6214940a633c2b8ea7da2d81c15bd4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/303e1d56c6214940a633c2b8ea7da2d81c15bd4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/303e1d56c6214940a633c2b8ea7da2d81c15bd4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/303e1d56c6214940a633c2b8ea7da2d81c15bd4d/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "204a913bda3c3228723ea13e41c9dd831c362b33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/204a913bda3c3228723ea13e41c9dd831c362b33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/204a913bda3c3228723ea13e41c9dd831c362b33"}], "stats": {"total": 891, "additions": 505, "deletions": 386}, "files": [{"sha": "b1af4f53deb0e2b50352613190f7e426d81428a3", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303e1d56c6214940a633c2b8ea7da2d81c15bd4d/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303e1d56c6214940a633c2b8ea7da2d81c15bd4d/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=303e1d56c6214940a633c2b8ea7da2d81c15bd4d", "patch": "@@ -1,3 +1,25 @@\n+2015-01-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* docs/topics/contexts.rst (Error-handling): Document new\n+\tentrypoint gcc_jit_context_get_last_error.\n+\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n+\t* jit-recording.c (gcc::jit::recording::context::context):\n+\tInitialize new fields \"m_last_error_str\" and\n+\t\"m_owns_last_error_str\".\n+\t(gcc::jit::recording::context::~context): Clean up\n+\tm_last_error_str, if needed.\n+\t(gcc::jit::recording::context::add_error_va): Update\n+\tm_last_error_str and m_owns_last_error_str, freeing the old\n+\tvalue if appropriate.\n+\t(gcc::jit::recording::context::get_last_error): New function.\n+\t* jit-recording.h (gcc::jit::recording::context::get_last_error):\n+\tNew function.\n+\t(gcc::jit::recording::context): New fields m_last_error_str and\n+\tm_owns_last_error_str.\n+\t* libgccjit.c (gcc_jit_context_get_last_error): New function.\n+\t* libgccjit.h (gcc_jit_context_get_last_error): New declaration.\n+\t* libgccjit.map (gcc_jit_context_get_last_error): New function.\n+\n 2015-01-08  David Malcolm  <dmalcolm@redhat.com>\n \n \t* Make-lang.in (jit_OBJS): Add jit/jit-logging.o."}, {"sha": "d489d46527a3ef728e44fa11a7718552b78a8202", "filename": "gcc/jit/docs/_build/texinfo/libgccjit.texi", "status": "modified", "additions": 400, "deletions": 382, "changes": 782, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303e1d56c6214940a633c2b8ea7da2d81c15bd4d/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303e1d56c6214940a633c2b8ea7da2d81c15bd4d/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi?ref=303e1d56c6214940a633c2b8ea7da2d81c15bd4d"}, {"sha": "3dc313c7c93fca4463114026bf20a426b2afb5f3", "filename": "gcc/jit/docs/topics/contexts.rst", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303e1d56c6214940a633c2b8ea7da2d81c15bd4d/gcc%2Fjit%2Fdocs%2Ftopics%2Fcontexts.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303e1d56c6214940a633c2b8ea7da2d81c15bd4d/gcc%2Fjit%2Fdocs%2Ftopics%2Fcontexts.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fcontexts.rst?ref=303e1d56c6214940a633c2b8ea7da2d81c15bd4d", "patch": "@@ -123,7 +123,9 @@ In general, if an error occurs when using an API entrypoint, the\n entrypoint returns NULL.  You don't have to check everywhere for NULL\n results, since the API handles a NULL being passed in for any\n argument by issuing another error.  This typically leads to a cascade of\n-followup error messages, but is safe (albeit verbose).\n+followup error messages, but is safe (albeit verbose).  The first error\n+message is usually the one to pay attention to, since it is likely to\n+be responsible for all of the rest:\n \n .. function:: const char *\\\n               gcc_jit_context_get_first_error (gcc_jit_context *ctxt)\n@@ -135,6 +137,20 @@ followup error messages, but is safe (albeit verbose).\n \n    If no errors occurred, this will be NULL.\n \n+If you are wrapping the C API for a higher-level language that supports\n+exception-handling, you may instead by interested in the last error that\n+occurred on the context, so that you can embed this in an exception:\n+\n+.. function:: const char *\\\n+              gcc_jit_context_get_last_error (gcc_jit_context *ctxt)\n+\n+   Returns the last error message that occurred on the context.\n+\n+   The returned string is valid for the rest of the lifetime of the\n+   context.\n+\n+   If no errors occurred, this will be NULL.\n+\n Debugging\n ---------\n "}, {"sha": "a9ff3002e32bfb97f20f19a4e26760e02759041a", "filename": "gcc/jit/jit-recording.c", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303e1d56c6214940a633c2b8ea7da2d81c15bd4d/gcc%2Fjit%2Fjit-recording.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303e1d56c6214940a633c2b8ea7da2d81c15bd4d/gcc%2Fjit%2Fjit-recording.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.c?ref=303e1d56c6214940a633c2b8ea7da2d81c15bd4d", "patch": "@@ -175,6 +175,8 @@ recording::context::context (context *parent_ctxt)\n     m_error_count (0),\n     m_first_error_str (NULL),\n     m_owns_first_error_str (false),\n+    m_last_error_str (NULL),\n+    m_owns_last_error_str (false),\n     m_mementos (),\n     m_compound_types (),\n     m_functions (),\n@@ -230,6 +232,10 @@ recording::context::~context ()\n \n   if (m_owns_first_error_str)\n     free (m_first_error_str);\n+\n+  if (m_owns_last_error_str)\n+    if (m_last_error_str != m_first_error_str)\n+      free (m_last_error_str);\n }\n \n /* Add the given mememto to the list of those tracked by this\n@@ -984,9 +990,12 @@ recording::context::add_error_va (location *loc, const char *fmt, va_list ap)\n       m_first_error_str = const_cast <char *> (errmsg);\n       m_owns_first_error_str = has_ownership;\n     }\n-  else\n-    if (has_ownership)\n-      free (malloced_msg);\n+\n+  if (m_owns_last_error_str)\n+    if (m_last_error_str != m_first_error_str)\n+      free (m_last_error_str);\n+  m_last_error_str = const_cast <char *> (errmsg);\n+  m_owns_last_error_str = has_ownership;\n \n   m_error_count++;\n }\n@@ -1003,6 +1012,18 @@ recording::context::get_first_error () const\n   return m_first_error_str;\n }\n \n+/* Get the message for the last error that occurred on this context, or\n+   NULL if no errors have occurred on it.\n+\n+   Implements the post-error-checking part of\n+   gcc_jit_context_get_last_error.  */\n+\n+const char *\n+recording::context::get_last_error () const\n+{\n+  return m_last_error_str;\n+}\n+\n /* Lazily generate and record a recording::type representing an opaque\n    struct named \"FILE\".\n "}, {"sha": "94179938d414d0077f4ea15dbc40bfee436b0f59", "filename": "gcc/jit/jit-recording.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303e1d56c6214940a633c2b8ea7da2d81c15bd4d/gcc%2Fjit%2Fjit-recording.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303e1d56c6214940a633c2b8ea7da2d81c15bd4d/gcc%2Fjit%2Fjit-recording.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.h?ref=303e1d56c6214940a633c2b8ea7da2d81c15bd4d", "patch": "@@ -235,6 +235,9 @@ class context : public log_user\n   const char *\n   get_first_error () const;\n \n+  const char *\n+  get_last_error () const;\n+\n   bool errors_occurred () const\n   {\n     if (m_parent_ctxt)\n@@ -261,6 +264,9 @@ class context : public log_user\n   char *m_first_error_str;\n   bool m_owns_first_error_str;\n \n+  char *m_last_error_str;\n+  bool m_owns_last_error_str;\n+\n   char *m_str_options[GCC_JIT_NUM_STR_OPTIONS];\n   int m_int_options[GCC_JIT_NUM_INT_OPTIONS];\n   bool m_bool_options[GCC_JIT_NUM_BOOL_OPTIONS];"}, {"sha": "34f201ef035752f3de6491c5bd0ed6c88a1c0fc4", "filename": "gcc/jit/libgccjit.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303e1d56c6214940a633c2b8ea7da2d81c15bd4d/gcc%2Fjit%2Flibgccjit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303e1d56c6214940a633c2b8ea7da2d81c15bd4d/gcc%2Fjit%2Flibgccjit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.c?ref=303e1d56c6214940a633c2b8ea7da2d81c15bd4d", "patch": "@@ -2161,6 +2161,20 @@ gcc_jit_context_get_first_error (gcc_jit_context *ctxt)\n   return ctxt->get_first_error ();\n }\n \n+/* Public entrypoint.  See description in libgccjit.h.\n+\n+   After error-checking, the real work is done by the\n+   gcc::jit::recording::context::get_last_error method in\n+   jit-recording.c.  */\n+\n+const char *\n+gcc_jit_context_get_last_error (gcc_jit_context *ctxt)\n+{\n+  RETURN_NULL_IF_FAIL (ctxt, NULL, NULL, \"NULL context\");\n+\n+  return ctxt->get_last_error ();\n+}\n+\n /* Public entrypoint.  See description in libgccjit.h.\n \n    After error-checking, the real work is done by the"}, {"sha": "953c665388b96963d054ed23f92b6be4b5d273ad", "filename": "gcc/jit/libgccjit.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303e1d56c6214940a633c2b8ea7da2d81c15bd4d/gcc%2Fjit%2Flibgccjit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303e1d56c6214940a633c2b8ea7da2d81c15bd4d/gcc%2Fjit%2Flibgccjit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.h?ref=303e1d56c6214940a633c2b8ea7da2d81c15bd4d", "patch": "@@ -279,6 +279,16 @@ gcc_jit_context_set_logfile (gcc_jit_context *ctxt,\n extern const char *\n gcc_jit_context_get_first_error (gcc_jit_context *ctxt);\n \n+/* To be called after a compile, this gives the last error message\n+   that occurred on the context.\n+\n+   The returned string is valid for the rest of the lifetime of the\n+   context.\n+\n+   If no errors occurred, this will be NULL.  */\n+extern const char *\n+gcc_jit_context_get_last_error (gcc_jit_context *ctxt);\n+\n /* Locate a given function within the built machine code.\n    This will need to be cast to a function pointer of the\n    correct type before it can be called. */"}, {"sha": "dc2fa6f3b5c804b0d120ab6cca75da524e20d938", "filename": "gcc/jit/libgccjit.map", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303e1d56c6214940a633c2b8ea7da2d81c15bd4d/gcc%2Fjit%2Flibgccjit.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303e1d56c6214940a633c2b8ea7da2d81c15bd4d/gcc%2Fjit%2Flibgccjit.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.map?ref=303e1d56c6214940a633c2b8ea7da2d81c15bd4d", "patch": "@@ -36,6 +36,7 @@\n     gcc_jit_context_enable_dump;\n     gcc_jit_context_get_builtin_function;\n     gcc_jit_context_get_first_error;\n+    gcc_jit_context_get_last_error;\n     gcc_jit_context_get_type;\n     gcc_jit_context_get_int_type;\n     gcc_jit_context_new_array_access;"}, {"sha": "6e19a07f85bf72ac0b3013118892a1cddd92b646", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303e1d56c6214940a633c2b8ea7da2d81c15bd4d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303e1d56c6214940a633c2b8ea7da2d81c15bd4d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=303e1d56c6214940a633c2b8ea7da2d81c15bd4d", "patch": "@@ -1,3 +1,9 @@\n+2015-01-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* jit.dg/test-error-block-in-wrong-function.c (verify_code):\n+\tVerify the result of gcc_jit_context_get_last_error.\n+\t* jit.dg/test-error-null-passed-to-api.c (verify_code): Likewise.\n+\n 2015-01-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/63989"}, {"sha": "285fcb0b3dd71031253017c96a2b60803ed4d7e6", "filename": "gcc/testsuite/jit.dg/test-error-block-in-wrong-function.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303e1d56c6214940a633c2b8ea7da2d81c15bd4d/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-block-in-wrong-function.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303e1d56c6214940a633c2b8ea7da2d81c15bd4d/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-block-in-wrong-function.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-block-in-wrong-function.c?ref=303e1d56c6214940a633c2b8ea7da2d81c15bd4d", "patch": "@@ -62,4 +62,7 @@ verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n \t\t      \" source block initial is in function test_fn\"\n \t\t      \" whereas target block block_within_other_fn\"\n \t\t      \" is in function other_fn\");\n+  /* Example of a testcase in which the last error != first error.  */\n+  CHECK_STRING_VALUE (gcc_jit_context_get_last_error (ctxt),\n+\t\t      \"unterminated block in other_fn: block_within_other_fn\");\n }"}, {"sha": "2fab453c1a0d0bc0f7c9db25dc4eebf192ec1232", "filename": "gcc/testsuite/jit.dg/test-error-null-passed-to-api.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303e1d56c6214940a633c2b8ea7da2d81c15bd4d/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-null-passed-to-api.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303e1d56c6214940a633c2b8ea7da2d81c15bd4d/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-null-passed-to-api.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-null-passed-to-api.c?ref=303e1d56c6214940a633c2b8ea7da2d81c15bd4d", "patch": "@@ -27,5 +27,7 @@ verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n   /* Verify that the correct error message was emitted.  */\n   CHECK_STRING_VALUE (gcc_jit_context_get_first_error (ctxt),\n \t\t      \"gcc_jit_context_new_function: NULL return_type\");\n+  CHECK_STRING_VALUE (gcc_jit_context_get_last_error (ctxt),\n+\t\t      \"gcc_jit_context_new_function: NULL return_type\");\n }\n "}]}