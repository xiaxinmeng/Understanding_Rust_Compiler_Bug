{"sha": "7d4f48b5b85b20df4f1acc19a3f1326d37a8bf6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q0ZjQ4YjViODViMjBkZjRmMWFjYzE5YTNmMTMyNmQzN2E4YmY2YQ==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2016-07-05T18:33:18Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2016-07-05T18:33:18Z"}, "message": "Implement LWG 2509,\n\n\tany_cast doesn't work with rvalue reference targets and cannot\n\tmove with a value target.\n\t* include/experimental/any (any(_ValueType&&)): Constrain and\n\tadd an overload that doesn't forward.\n\t(any_cast(any&&)): Constrain and add an overload that moves.\n\t* testsuite/experimental/any/misc/any_cast.cc: Add tests for\n\tthe functionality added by LWG 2509.\n\nFrom-SVN: r238022", "tree": {"sha": "bac6ae817f1101d9ed774592f2b848b5c7ffea8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bac6ae817f1101d9ed774592f2b848b5c7ffea8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d4f48b5b85b20df4f1acc19a3f1326d37a8bf6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d4f48b5b85b20df4f1acc19a3f1326d37a8bf6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d4f48b5b85b20df4f1acc19a3f1326d37a8bf6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d4f48b5b85b20df4f1acc19a3f1326d37a8bf6a/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98d44e93bfde113ced834cc65dd9d11231a94114", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98d44e93bfde113ced834cc65dd9d11231a94114", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98d44e93bfde113ced834cc65dd9d11231a94114"}], "stats": {"total": 79, "additions": 76, "deletions": 3}, "files": [{"sha": "d888864600e6e07280200c221758d5cc3b5bbe44", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d4f48b5b85b20df4f1acc19a3f1326d37a8bf6a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d4f48b5b85b20df4f1acc19a3f1326d37a8bf6a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7d4f48b5b85b20df4f1acc19a3f1326d37a8bf6a", "patch": "@@ -1,3 +1,14 @@\n+2016-07-05  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tImplement LWG 2509,\n+\tany_cast doesn't work with rvalue reference targets and cannot\n+\tmove with a value target.\n+\t* include/experimental/any (any(_ValueType&&)): Constrain and\n+\tadd an overload that doesn't forward.\n+\t(any_cast(any&&)): Constrain and add an overload that moves.\n+\t* testsuite/experimental/any/misc/any_cast.cc: Add tests for\n+\tthe functionality added by LWG 2509.\n+\n 2016-07-04  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* testsuite/23_containers/vector/modifiers/emplace/self_emplace.cc:"}, {"sha": "96ad5762f66ec4cd54deccd2da4ade50af98caf0", "filename": "libstdc++-v3/include/experimental/any", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d4f48b5b85b20df4f1acc19a3f1326d37a8bf6a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d4f48b5b85b20df4f1acc19a3f1326d37a8bf6a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany?ref=7d4f48b5b85b20df4f1acc19a3f1326d37a8bf6a", "patch": "@@ -158,7 +158,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     /// Construct with a copy of @p __value as the contained object.\n     template <typename _ValueType, typename _Tp = _Decay<_ValueType>,\n-\t      typename _Mgr = _Manager<_Tp>>\n+\t      typename _Mgr = _Manager<_Tp>,\n+              typename enable_if<is_constructible<_Tp, _ValueType&&>::value,\n+                                 bool>::type = true>\n       any(_ValueType&& __value)\n       : _M_manager(&_Mgr::_S_manage)\n       {\n@@ -167,6 +169,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t      \"The contained object must be CopyConstructible\");\n       }\n \n+    /// Construct with a copy of @p __value as the contained object.\n+    template <typename _ValueType, typename _Tp = _Decay<_ValueType>,\n+\t      typename _Mgr = _Manager<_Tp>,\n+              typename enable_if<!is_constructible<_Tp, _ValueType&&>::value,\n+                                 bool>::type = false>\n+      any(_ValueType&& __value)\n+      : _M_manager(&_Mgr::_S_manage)\n+      {\n+        _Mgr::_S_create(_M_storage, __value);\n+\tstatic_assert(is_copy_constructible<_Tp>::value,\n+\t\t      \"The contained object must be CopyConstructible\");\n+      }\n+\n     /// Destructor, calls @c clear()\n     ~any() { clear(); }\n \n@@ -377,7 +392,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __throw_bad_any_cast();\n     }\n \n-  template<typename _ValueType>\n+  template<typename _ValueType,\n+           typename enable_if<!is_move_constructible<_ValueType>::value\n+                              || is_lvalue_reference<_ValueType>::value,\n+                              bool>::type = true>\n     inline _ValueType any_cast(any&& __any)\n     {\n       static_assert(any::__is_valid_cast<_ValueType>(),\n@@ -387,6 +405,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *__p;\n       __throw_bad_any_cast();\n     }\n+\n+  template<typename _ValueType,\n+           typename enable_if<is_move_constructible<_ValueType>::value\n+                              && !is_lvalue_reference<_ValueType>::value,\n+                              bool>::type = false>\n+    inline _ValueType any_cast(any&& __any)\n+    {\n+      static_assert(any::__is_valid_cast<_ValueType>(),\n+\t  \"Template argument must be a reference or CopyConstructible type\");\n+      auto __p = any_cast<remove_reference_t<_ValueType>>(&__any);\n+      if (__p)\n+\treturn std::move(*__p);\n+      __throw_bad_any_cast();\n+    }\n   // @}\n \n   template<typename _Tp>"}, {"sha": "bb0f754f54943c6df4eea504f24785146ce52122", "filename": "libstdc++-v3/testsuite/experimental/any/misc/any_cast.cc", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d4f48b5b85b20df4f1acc19a3f1326d37a8bf6a/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fmisc%2Fany_cast.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d4f48b5b85b20df4f1acc19a3f1326d37a8bf6a/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fmisc%2Fany_cast.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fmisc%2Fany_cast.cc?ref=7d4f48b5b85b20df4f1acc19a3f1326d37a8bf6a", "patch": "@@ -77,8 +77,38 @@ void test02()\n   }\n }\n \n+static int move_count = 0;\n+\n+void test03()\n+{\n+  struct MoveEnabled\n+  {\n+    MoveEnabled(MoveEnabled&&)\n+    {\n+      ++move_count;\n+    }\n+    MoveEnabled() = default;\n+    MoveEnabled(const MoveEnabled&) = default;\n+  };\n+  MoveEnabled m;\n+  MoveEnabled m2 = any_cast<MoveEnabled>(any(m));\n+  VERIFY(move_count == 1);\n+  MoveEnabled&& m3 = any_cast<MoveEnabled&&>(any(m));\n+  VERIFY(move_count == 1);\n+  struct MoveDeleted\n+  {\n+    MoveDeleted(MoveDeleted&&) = delete;\n+    MoveDeleted() = default;\n+    MoveDeleted(const MoveDeleted&) = default;\n+  };\n+  MoveDeleted md;\n+  MoveDeleted&& md2 = any_cast<MoveDeleted>(any(std::move(md)));\n+  MoveDeleted&& md3 = any_cast<MoveDeleted&&>(any(std::move(md)));\n+}\n+\n int main()\n {\n   test01();\n   test02();\n+  test03();\n }"}, {"sha": "82957a1f5447eb325de37721054d2bbdf2b379fd", "filename": "libstdc++-v3/testsuite/experimental/any/misc/any_cast_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d4f48b5b85b20df4f1acc19a3f1326d37a8bf6a/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fmisc%2Fany_cast_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d4f48b5b85b20df4f1acc19a3f1326d37a8bf6a/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fmisc%2Fany_cast_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fmisc%2Fany_cast_neg.cc?ref=7d4f48b5b85b20df4f1acc19a3f1326d37a8bf6a", "patch": "@@ -26,5 +26,5 @@ void test01()\n   using std::experimental::any_cast;\n \n   const any y(1);\n-  any_cast<int&>(y); // { dg-error \"qualifiers\" \"\" { target { *-*-* } } 353 }\n+  any_cast<int&>(y); // { dg-error \"qualifiers\" \"\" { target { *-*-* } } 368 }\n }"}]}