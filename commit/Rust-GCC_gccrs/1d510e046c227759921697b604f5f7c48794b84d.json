{"sha": "1d510e046c227759921697b604f5f7c48794b84d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ1MTBlMDQ2YzIyNzc1OTkyMTY5N2I2MDRmNWY3YzQ4Nzk0Yjg0ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-04-05T21:33:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-04-05T21:33:37Z"}, "message": "re PR c++/70336 (Incorrect Wconversion warning)\n\n\tPR c++/70336\n\t* match.pd (nested int casts): Limit to GIMPLE.\n\n\t* c-c++-common/pr70336.c: New test.\n\t* gcc.dg/torture/builtin-isinf_sign-1.c (foo): Guard tests\n\tno longer optimized away at -O0 with #ifndef __OPTIMIZE__.\n\nFrom-SVN: r234764", "tree": {"sha": "6532eab8da41c214202d112a76fe6627a36000fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6532eab8da41c214202d112a76fe6627a36000fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d510e046c227759921697b604f5f7c48794b84d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d510e046c227759921697b604f5f7c48794b84d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d510e046c227759921697b604f5f7c48794b84d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d510e046c227759921697b604f5f7c48794b84d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "84278ed9e8f6ebef5f72f933171779041b1564b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84278ed9e8f6ebef5f72f933171779041b1564b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84278ed9e8f6ebef5f72f933171779041b1564b3"}], "stats": {"total": 54, "additions": 53, "deletions": 1}, "files": [{"sha": "e5e195fd746b29a55fa067309e9de37af0886b88", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d510e046c227759921697b604f5f7c48794b84d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d510e046c227759921697b604f5f7c48794b84d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d510e046c227759921697b604f5f7c48794b84d", "patch": "@@ -1,3 +1,8 @@\n+2016-04-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/70336\n+\t* match.pd (nested int casts): Limit to GIMPLE.\n+\n 2016-04-05  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/66223"}, {"sha": "75aa6013b2e2d2c26fb8d11cec7eecc2d91a30d6", "filename": "gcc/match.pd", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d510e046c227759921697b604f5f7c48794b84d/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d510e046c227759921697b604f5f7c48794b84d/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=1d510e046c227759921697b604f5f7c48794b84d", "patch": "@@ -1554,7 +1554,8 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \n     /* A truncation to an unsigned type (a zero-extension) should be\n        canonicalized as bitwise and of a mask.  */\n-    (if (final_int && inter_int && inside_int\n+    (if (GIMPLE /* PR70366: doing this in GENERIC breaks -Wconversion.  */\n+\t && final_int && inter_int && inside_int\n \t && final_prec == inside_prec\n \t && final_prec > inter_prec\n \t && inter_unsignedp)"}, {"sha": "e0ef05bf31b18977571f796864045d5f4fa88dc0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d510e046c227759921697b604f5f7c48794b84d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d510e046c227759921697b604f5f7c48794b84d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1d510e046c227759921697b604f5f7c48794b84d", "patch": "@@ -1,3 +1,10 @@\n+2016-04-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/70336\n+\t* c-c++-common/pr70336.c: New test.\n+\t* gcc.dg/torture/builtin-isinf_sign-1.c (foo): Guard tests\n+\tno longer optimized away at -O0 with #ifndef __OPTIMIZE__.\n+\n 2016-04-05  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/66223"}, {"sha": "095bd569b18374bff00b3d576389bf16655c8ee5", "filename": "gcc/testsuite/c-c++-common/pr70336.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d510e046c227759921697b604f5f7c48794b84d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr70336.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d510e046c227759921697b604f5f7c48794b84d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr70336.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr70336.c?ref=1d510e046c227759921697b604f5f7c48794b84d", "patch": "@@ -0,0 +1,37 @@\n+/* PR c++/70336 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wconversion\" } */\n+\n+void\n+f1 (unsigned char * x, int y, int z)\n+{\n+  x[z / 8] |= (unsigned char) (0x80 >> y);\t/* { dg-bogus \"may alter its value\" } */\n+}\n+\n+unsigned char\n+f2 (unsigned char x, int y)\n+{\n+  x = x | (unsigned char) (0x80 >> y);\t\t/* { dg-bogus \"may alter its value\" } */\n+  return x;\n+}\n+\n+unsigned char\n+f3 (unsigned char x, int y)\n+{\n+  x = x | (unsigned char) (y & 255);\t\t/* { dg-bogus \"may alter its value\" } */\n+  return x;\n+}\n+\n+unsigned char\n+f4 (unsigned char x, unsigned char y)\n+{\n+  x = x | (unsigned char) (y & 255);\t\t/* { dg-bogus \"may alter its value\" } */\n+  return x;\n+}\n+\n+unsigned char\n+f5 (unsigned char x, int y)\n+{\n+  x = (unsigned char) (y & 255);\t\t/* { dg-bogus \"may alter its value\" } */\n+  return x;\n+}"}, {"sha": "adfffcdb824ef1b4cb0a37a71017adc1fd441de8", "filename": "gcc/testsuite/gcc.dg/torture/builtin-isinf_sign-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d510e046c227759921697b604f5f7c48794b84d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-isinf_sign-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d510e046c227759921697b604f5f7c48794b84d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-isinf_sign-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-isinf_sign-1.c?ref=1d510e046c227759921697b604f5f7c48794b84d", "patch": "@@ -24,6 +24,7 @@ foo (float f, double d, long double ld)\n       != (__builtin_isinf(ld) ? (__builtin_signbitl(ld) ? -1 : 1) : 0))\n     link_error (__LINE__);\n \n+#ifdef __OPTIMIZE__\n   /* In boolean contexts, GCC will fold the inner conditional\n      expression to 1.  So isinf_sign folds to plain isinf.  */\n \n@@ -33,6 +34,7 @@ foo (float f, double d, long double ld)\n     link_error (__LINE__);\n   if ((_Bool)__builtin_isinf_sign(ld) != (__builtin_isinf(ld) != 0))\n     link_error (__LINE__);\n+#endif\n \n   if ((__builtin_isinf_sign(f) != 0) != (__builtin_isinf(f) != 0))\n     link_error (__LINE__);"}]}