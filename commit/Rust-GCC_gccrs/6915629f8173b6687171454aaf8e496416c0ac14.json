{"sha": "6915629f8173b6687171454aaf8e496416c0ac14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkxNTYyOWY4MTczYjY2ODcxNzE0NTRhYWY4ZTQ5NjQxNmMwYWMxNA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2000-11-25T04:42:27Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2000-11-25T04:42:27Z"}, "message": "sh.md (GOTaddr2picreg, [...]): Don't set current_function_uses_pic_offset_table.\n\n* config/sh/sh.md (GOTaddr2picreg, symGOT2reg, symGOTOFF2reg,\nsymPLT_label2reg, call, call_value): Don't set\ncurrent_function_uses_pic_offset_table.\n* config/sh/sh.h (CONDITIONAL_REGISTER_USAGE): Don't mark\nPIC_OFFSET_TABLE_REGNUM as call_used, so that calc_live_regs\ntakes it into account.\n(FINALIZE_PIC): Delete, useless.\n(LEGITIMATE_CONSTANT_P): Delete, unused.\n* config/sh/sh.c (sh_expand_prologue): Don't use\ncurrent_function_uses_pic_offset_table.  Don't special-case\nPIC_OFFSET_TABLE_REGNUM.  Initialize it if it's ever live and\nPIC is enabled.\n(sh_expand_epilogue, initial_elimination_offset): Don't\nspecial case PIC_OFFSET_TABLE_REGNUM.\n\nFrom-SVN: r37731", "tree": {"sha": "8cdf9687f6be59ac3e43bc96907242c380ac840c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cdf9687f6be59ac3e43bc96907242c380ac840c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6915629f8173b6687171454aaf8e496416c0ac14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6915629f8173b6687171454aaf8e496416c0ac14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6915629f8173b6687171454aaf8e496416c0ac14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6915629f8173b6687171454aaf8e496416c0ac14/comments", "author": null, "committer": null, "parents": [{"sha": "2d01e4457601734bdd414a89d74d87f79cc49d7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d01e4457601734bdd414a89d74d87f79cc49d7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d01e4457601734bdd414a89d74d87f79cc49d7a"}], "stats": {"total": 105, "additions": 35, "deletions": 70}, "files": [{"sha": "7111b1345855933905a776cd43e932dcb22fd935", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6915629f8173b6687171454aaf8e496416c0ac14/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6915629f8173b6687171454aaf8e496416c0ac14/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6915629f8173b6687171454aaf8e496416c0ac14", "patch": "@@ -1,3 +1,20 @@\n+2000-11-25  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* config/sh/sh.md (GOTaddr2picreg, symGOT2reg, symGOTOFF2reg,\n+\tsymPLT_label2reg, call, call_value): Don't set\n+\tcurrent_function_uses_pic_offset_table.\n+\t* config/sh/sh.h (CONDITIONAL_REGISTER_USAGE): Don't mark\n+\tPIC_OFFSET_TABLE_REGNUM as call_used, so that calc_live_regs\n+\ttakes it into account.\n+\t(FINALIZE_PIC): Delete, useless.\n+\t(LEGITIMATE_CONSTANT_P): Delete, unused.\n+\t* config/sh/sh.c (sh_expand_prologue): Don't use\n+\tcurrent_function_uses_pic_offset_table.  Don't special-case\n+\tPIC_OFFSET_TABLE_REGNUM.  Initialize it if it's ever live and\n+\tPIC is enabled.\n+\t(sh_expand_epilogue, initial_elimination_offset): Don't\n+\tspecial case PIC_OFFSET_TABLE_REGNUM.\n+\n 2000-11-25  Alexandre Oliva  <aoliva@redhat.com>, NIIBE Yutaka  <gniibe@m17n.org>\n \n \t* config/sh/sh-protos.h (symbol_ref_operand): Declare."}, {"sha": "b17295f76ae1ea44ee3923366d6f7486e166d90d", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 3, "deletions": 34, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6915629f8173b6687171454aaf8e496416c0ac14/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6915629f8173b6687171454aaf8e496416c0ac14/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=6915629f8173b6687171454aaf8e496416c0ac14", "patch": "@@ -3949,29 +3949,11 @@ sh_expand_prologue ()\n      that already happens to be at the function start into the prologue.  */\n   if (target_flags != save_flags)\n     emit_insn (gen_toggle_sz ());\n-  if (flag_pic && (current_function_uses_pic_offset_table\n-\t\t   || regs_ever_live[PIC_OFFSET_TABLE_REGNUM]))\n-    {\n-      if ((live_regs_mask & (1 << PIC_OFFSET_TABLE_REGNUM)) != 0)\n-\tabort ();\n-      d += UNITS_PER_WORD;\n-      live_regs_mask |= (1 << PIC_OFFSET_TABLE_REGNUM);\n-    }\n+    \n   push_regs (live_regs_mask, live_regs_mask2);\n \n-  if (flag_pic && (current_function_uses_pic_offset_table\n-\t\t   || regs_ever_live[PIC_OFFSET_TABLE_REGNUM]))\n-    {\n-      rtx insn = get_last_insn ();\n-      rtx insn_end = emit_insn (gen_GOTaddr2picreg ());\n-      while (insn != insn_end)\n-\t{\n-\t  insn = NEXT_INSN (insn);\n-\t  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_MAYBE_DEAD,\n-\t\t\t\t\t\tconst0_rtx,\n-\t\t\t\t\t\tREG_NOTES (insn));\n-\t}\n-    }\n+  if (flag_pic && regs_ever_live[PIC_OFFSET_TABLE_REGNUM])\n+    emit_insn (gen_GOTaddr2picreg ());\n \n   if (target_flags != save_flags)\n     emit_insn (gen_toggle_sz ());\n@@ -3997,14 +3979,6 @@ sh_expand_epilogue ()\n \n   live_regs_mask = calc_live_regs (&d, &live_regs_mask2);\n \n-  if (flag_pic && current_function_uses_pic_offset_table)\n-    {\n-      if ((live_regs_mask & (1 << PIC_OFFSET_TABLE_REGNUM)) != 0)\n-\tabort ();\n-      live_regs_mask |= (1 << PIC_OFFSET_TABLE_REGNUM);\n-      d += UNITS_PER_WORD;\n-    }\n-\n   frame_size = rounded_frame_size (d);\n \n   if (frame_pointer_needed)\n@@ -4435,11 +4409,6 @@ initial_elimination_offset (from, to)\n \n   int live_regs_mask, live_regs_mask2;\n   live_regs_mask = calc_live_regs (&regs_saved, &live_regs_mask2);\n-  if (flag_pic && current_function_uses_pic_offset_table)\n-    {\n-      regs_saved++;\n-      live_regs_mask |= (1 << PIC_OFFSET_TABLE_REGNUM);\n-    }\n   total_auto_space = rounded_frame_size (regs_saved);\n   target_flags = save_flags;\n "}, {"sha": "b79a1fd7b984ca6a6196cdc856f027d216db800b", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6915629f8173b6687171454aaf8e496416c0ac14/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6915629f8173b6687171454aaf8e496416c0ac14/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=6915629f8173b6687171454aaf8e496416c0ac14", "patch": "@@ -81,10 +81,7 @@ extern int code_for_indirect_jump_scratch;\n \t}\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (flag_pic)\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\t\t\t\t\\\n-      call_used_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n+    fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\t\t\t\t\\\n   /* Hitachi saves and restores mac registers on call.  */\t\t\\\n   if (TARGET_HITACHI && ! TARGET_NOMACSAVE)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n@@ -1782,16 +1779,6 @@ do\t\t\t\t\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n while (0)\n \n-#define FINALIZE_PIC\t\t\t\t\t\t\t\\\n-  current_function_uses_pic_offset_table |= profile_flag | profile_block_flag\n-\n-/* We can't directly access anything that contains a symbol,\n-   nor can we indirect via the constant pool.  */\n-#define LEGITIMATE_PIC_OPERAND_P(X)\t\t\t\t\\\n-\t(! nonpic_symbol_mentioned_p (X)\t\t\t\\\n-\t && (! CONSTANT_POOL_ADDRESS_P (X)\t\t\t\\\n-\t     || ! nonpic_symbol_mentioned_p (get_pool_constant (X))))\n-\n #define SYMBOLIC_CONST_P(X)\t\\\n ((GET_CODE (X) == SYMBOL_REF || GET_CODE (X) == LABEL_REF)\t\\\n   && nonpic_symbol_mentioned_p (X))"}, {"sha": "9e8e6683b4571e003de76868fd0eeecbc633eee8", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6915629f8173b6687171454aaf8e496416c0ac14/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6915629f8173b6687171454aaf8e496416c0ac14/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=6915629f8173b6687171454aaf8e496416c0ac14", "patch": "@@ -3502,7 +3502,6 @@\n       && GET_CODE (XEXP (operands[0], 0)) == SYMBOL_REF)\n     {\n       emit_call_insn (gen_call_pcrel (XEXP (operands[0], 0), operands[1]));\n-      current_function_uses_pic_offset_table = 1;\n       DONE;\n     }\n   else\n@@ -3524,7 +3523,6 @@\n     {\n       emit_call_insn (gen_call_value_pcrel (operands[0], XEXP (operands[1], 0),\n \t\t\t\t\t    operands[2]));\n-      current_function_uses_pic_offset_table = 1;\n       DONE;\n     }\n   else\n@@ -3641,7 +3639,6 @@\n   \"\" \"\n {\n   operands[0] = pic_offset_table_rtx;\n-  current_function_uses_pic_offset_table = 1;\n   operands[1] = gen_rtx_SYMBOL_REF (VOIDmode, GOT_SYMBOL_NAME);\n }\n \")\n@@ -3674,7 +3671,6 @@\n   \"\n {\n   operands[2] = pic_offset_table_rtx;\n-  current_function_uses_pic_offset_table = 1;\n }\")\n \n (define_expand \"symGOTOFF2reg\"\n@@ -3685,7 +3681,6 @@\n   \"\n {\n   operands[2] = pic_offset_table_rtx;\n-  current_function_uses_pic_offset_table = 1;\n }\")\n \n (define_expand \"symPLT_label2reg\"\n@@ -3697,23 +3692,20 @@\n \t\t(const (plus:SI\n \t\t\t(match_operand:SI 2 \"\" \"\")\n \t\t\t(const_int 2))))))\n-   (use (match_dup 3))]\n-  ;; Even though the PIC register is not really used by the call\n-  ;; sequence in which this is expanded, the PLT code assumes the PIC\n-  ;; register is set, so we must not skip its initialization.  Since\n-  ;; we only use this expand as part of calling sequences, and never\n-  ;; to take the address of a function, this is the best point to\n-  ;; insert the (use).  Using the PLT to take the address of a\n-  ;; function would be wrong, not only because the PLT entry could\n-  ;; then be called from a function that doesn't initialize the PIC\n-  ;; register to the proper GOT, but also because pointers to the same\n-  ;; function might not compare equal, should they be set by different\n-  ;; shared libraries.\n-  \"\" \"\n-{\n-  operands[3] = pic_offset_table_rtx;\n-  current_function_uses_pic_offset_table = 1;\n-}\")\n+   ;; Even though the PIC register is not really used by the call\n+   ;; sequence in which this is expanded, the PLT code assumes the PIC\n+   ;; register is set, so we must not skip its initialization.  Since\n+   ;; we only use this expand as part of calling sequences, and never\n+   ;; to take the address of a function, this is the best point to\n+   ;; insert the (use).  Using the PLT to take the address of a\n+   ;; function would be wrong, not only because the PLT entry could\n+   ;; then be called from a function that doesn't initialize the PIC\n+   ;; register to the proper GOT, but also because pointers to the\n+   ;; same function might not compare equal, should they be set by\n+   ;; different shared libraries.\n+   (use (reg:SI PIC_REG))]\n+  \"\"\n+  \"\")\n \n ;; case instruction for switch statements.\n "}]}