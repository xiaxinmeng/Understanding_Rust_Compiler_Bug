{"sha": "c0dbd22d2eebf14210473be5c37da77083dbbf5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBkYmQyMmQyZWViZjE0MjEwNDczYmU1YzM3ZGE3NzA4M2RiYmY1Zg==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2016-10-12T08:29:01Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2016-10-12T08:29:01Z"}, "message": "DWARF: fix scoping for descriptions of local types\n\nIn Ada, it is possible to have nested subprograms in the following\nconfiguration:\n\n    procedure Parent is\n       type T;\n       [...]\n       procedure Child (Value : T) is\n       begin\n          [...]\n       end Child;\n    begin\n       [...]\n    end Parent;\n\nAs we currently generate debugging information for Child first before\nParent, the debug info for T appears in global scope since the DIE for\nParent does not exist yet.\n\nThis patch makes sure that when we generate early debug info for a\nnested function, we trigger generation for the parent function first.\n\ngcc/\n\n\t* dwarf2out.c (dwarf2out_early_global_decl): For nested\n\tfunctions, call dwarf2out_decl on the parent function first.\n\ngcc/testsuite/\n\n\t* gnat.dg/debug9.adb: New testcase.\n\nFrom-SVN: r241023", "tree": {"sha": "c5f5321659839c89f2291ef5a48899111d8d7548", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5f5321659839c89f2291ef5a48899111d8d7548"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0dbd22d2eebf14210473be5c37da77083dbbf5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0dbd22d2eebf14210473be5c37da77083dbbf5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0dbd22d2eebf14210473be5c37da77083dbbf5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0dbd22d2eebf14210473be5c37da77083dbbf5f/comments", "author": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7d7f92889b79484dc5e13f63e396a9f540b6206a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d7f92889b79484dc5e13f63e396a9f540b6206a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d7f92889b79484dc5e13f63e396a9f540b6206a"}], "stats": {"total": 72, "additions": 72, "deletions": 0}, "files": [{"sha": "b39089633f14b750c19c5903bb4574e83c5b0975", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0dbd22d2eebf14210473be5c37da77083dbbf5f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0dbd22d2eebf14210473be5c37da77083dbbf5f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c0dbd22d2eebf14210473be5c37da77083dbbf5f", "patch": "@@ -1,3 +1,8 @@\n+2016-10-12  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* dwarf2out.c (dwarf2out_early_global_decl): For nested\n+\tfunctions, call dwarf2out_decl on the parent function first.\n+\n 2016-10-12  Richard Biener  <rguenther@suse.de>\n \n \t* match.pd ((X /[ex] A) * A -> X): Remove unnecessary constraint"}, {"sha": "f03e9aa4f2f46b96cbc2b03d0c310873db972772", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0dbd22d2eebf14210473be5c37da77083dbbf5f/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0dbd22d2eebf14210473be5c37da77083dbbf5f/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=c0dbd22d2eebf14210473be5c37da77083dbbf5f", "patch": "@@ -23902,6 +23902,16 @@ dwarf2out_early_global_decl (tree decl)\n \t  if (!DECL_STRUCT_FUNCTION (decl))\n \t    goto early_decl_exit;\n \n+\t  /* For nested functions, emit DIEs for the parents first so that all\n+\t     nested DIEs are generated at the proper scope in the first\n+\t     shot.  */\n+\t  tree context = decl_function_context (decl);\n+\t  if (context != NULL)\n+\t    {\n+\t      current_function_decl = context;\n+\t      dwarf2out_decl (context);\n+\t    }\n+\n \t  current_function_decl = decl;\n \t}\n       dwarf2out_decl (decl);"}, {"sha": "27d84131b0f7022db646d37d74d9bc815a0c1c52", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0dbd22d2eebf14210473be5c37da77083dbbf5f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0dbd22d2eebf14210473be5c37da77083dbbf5f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c0dbd22d2eebf14210473be5c37da77083dbbf5f", "patch": "@@ -1,3 +1,7 @@\n+2016-10-12  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* gnat.dg/debug9.adb: New testcase.\n+\n 2016-10-12  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/vrp35.c: Adjust."}, {"sha": "a15069faf21b8d068d322db1a35695aba33d5220", "filename": "gcc/testsuite/gnat.dg/debug9.adb", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0dbd22d2eebf14210473be5c37da77083dbbf5f/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0dbd22d2eebf14210473be5c37da77083dbbf5f/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug9.adb?ref=c0dbd22d2eebf14210473be5c37da77083dbbf5f", "patch": "@@ -0,0 +1,53 @@\n+--  The aim of this test is to check that Ada types appear in the proper\n+--  context in the debug info.\n+--\n+--  Checking this directly would be really tedious just scanning for assembly\n+--  lines, so instead we rely on DWARFv4's .debug_types sections, which must be\n+--  created only for global-scope types. Checking the number of .debug_types is\n+--  some hackish way to check that types are output in the proper context (i.e.\n+--  at global or local scope).\n+--\n+--  { dg-options \"-g -gdwarf-4 -cargs -fdebug-types-section -dA\" }\n+--  { dg-final { scan-assembler-times \"\\\\(DIE \\\\(0x\\[a-f0-9\\]*\\\\) DW_TAG_type_unit\\\\)\" 0 } }\n+\n+procedure Debug9 is\n+   type Array_Type is array (Natural range <>) of Integer;\n+   type Record_Type (L1, L2 : Natural) is record\n+      I1 : Integer;\n+      A1 : Array_Type (1 .. L1);\n+      I2 : Integer;\n+      A2 : Array_Type (1 .. L2);\n+      I3 : Integer;\n+   end record;\n+\n+   function Get (L1, L2 : Natural) return Record_Type is\n+      Result : Record_Type (L1, L2);\n+   begin\n+      Result.I1 := 1;\n+      for I in Result.A1'Range loop\n+         Result.A1 (I) := I;\n+      end loop;\n+      Result.I2 := 2;\n+      for I in Result.A2'Range loop\n+         Result.A2 (I) := I;\n+      end loop;\n+      Result.I3 := 3;\n+      return Result;\n+   end Get;\n+\n+   R1 : Record_Type := Get (0, 0);\n+   R2 : Record_Type := Get (1, 0);\n+   R3 : Record_Type := Get (0, 1);\n+   R4 : Record_Type := Get (2, 2);\n+\n+   procedure Process (R : Record_Type) is\n+   begin\n+      null;\n+   end Process;\n+\n+begin\n+   Process (R1);\n+   Process (R2);\n+   Process (R3);\n+   Process (R4);\n+end Debug9;"}]}