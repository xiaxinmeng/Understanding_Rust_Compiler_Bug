{"sha": "2f03073ff24bbb005d52db7e2b7a5ea32bb01140", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmYwMzA3M2ZmMjRiYmIwMDVkNTJkYjdlMmI3YTVlYTMyYmIwMTE0MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-07-04T21:40:56Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-07-04T21:40:56Z"}, "message": "omp-expand.c (expand_omp_for_static_nochunk): Don't emit GOMP_loop_start at the start of second worksharing loop in a scan.\n\n\t* omp-expand.c (expand_omp_for_static_nochunk): Don't emit\n\tGOMP_loop_start at the start of second worksharing loop in a scan.\n\tFor nowait, don't emit GOMP_loop_end_nowait at the end of first\n\tworksharing loop in a scan even if there are conditional lastprivates,\n\tand do emit GOMP_loop_end_nowait at the end of second worksharing loop.\n\n\t* testsuite/libgomp.c/scan-9.c: New test.\n\t* testsuite/libgomp.c/scan-10.c: New test.\n\nFrom-SVN: r273095", "tree": {"sha": "861f13c464eff0a038edfad8ace1666e05fc8213", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/861f13c464eff0a038edfad8ace1666e05fc8213"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f03073ff24bbb005d52db7e2b7a5ea32bb01140", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f03073ff24bbb005d52db7e2b7a5ea32bb01140", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f03073ff24bbb005d52db7e2b7a5ea32bb01140", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f03073ff24bbb005d52db7e2b7a5ea32bb01140/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "61afc8f8f0406f00e3020e862bb07c3b48ff26ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61afc8f8f0406f00e3020e862bb07c3b48ff26ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61afc8f8f0406f00e3020e862bb07c3b48ff26ca"}], "stats": {"total": 252, "additions": 250, "deletions": 2}, "files": [{"sha": "c51ba758cf63a128d0f4b919a4d35e3cf02820c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f03073ff24bbb005d52db7e2b7a5ea32bb01140/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f03073ff24bbb005d52db7e2b7a5ea32bb01140/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f03073ff24bbb005d52db7e2b7a5ea32bb01140", "patch": "@@ -1,3 +1,11 @@\n+2019-07-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* omp-expand.c (expand_omp_for_static_nochunk): Don't emit\n+\tGOMP_loop_start at the start of second worksharing loop in a scan.\n+\tFor nowait, don't emit GOMP_loop_end_nowait at the end of first\n+\tworksharing loop in a scan even if there are conditional lastprivates,\n+\tand do emit GOMP_loop_end_nowait at the end of second worksharing loop.\n+\n 2019-07-04  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-ssa-alias.c (nonoverlapping_component_refs_since_match_p):"}, {"sha": "1de445b6911270e003bb2ca642f6c2526c379d51", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f03073ff24bbb005d52db7e2b7a5ea32bb01140/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f03073ff24bbb005d52db7e2b7a5ea32bb01140/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=2f03073ff24bbb005d52db7e2b7a5ea32bb01140", "patch": "@@ -3744,7 +3744,9 @@ expand_omp_for_static_nochunk (struct omp_region *region,\n       cond_var = OMP_CLAUSE_DECL (c);\n     }\n   if (fd->have_reductemp\n-      || fd->have_pointer_condtemp\n+      /* For scan, we don't want to reinitialize condtemp before the\n+\t second loop.  */\n+      || (fd->have_pointer_condtemp && !fd->have_scantemp)\n       || fd->have_nonctrl_scantemp)\n     {\n       tree t1 = build_int_cst (long_integer_type_node, 0);\n@@ -4235,7 +4237,8 @@ expand_omp_for_static_nochunk (struct omp_region *region,\n       else\n \tgsi_insert_after (&gsi, omp_build_barrier (t), GSI_SAME_STMT);\n     }\n-  else if (fd->have_pointer_condtemp)\n+  else if ((fd->have_pointer_condtemp || fd->have_scantemp)\n+\t   && !fd->have_nonctrl_scantemp)\n     {\n       tree fn = builtin_decl_explicit (BUILT_IN_GOMP_LOOP_END_NOWAIT);\n       gcall *g = gimple_build_call (fn, 0);"}, {"sha": "01a8714ef744fce622ea970ddbfa8ed977043bc0", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f03073ff24bbb005d52db7e2b7a5ea32bb01140/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f03073ff24bbb005d52db7e2b7a5ea32bb01140/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=2f03073ff24bbb005d52db7e2b7a5ea32bb01140", "patch": "@@ -1,3 +1,8 @@\n+2019-07-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/libgomp.c/scan-9.c: New test.\n+\t* testsuite/libgomp.c/scan-10.c: New test.\n+\n 2019-07-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* testsuite/libgomp.c++/scan-1.C: New test."}, {"sha": "0005ce109b205a550b68098ae13d91b14448f0c6", "filename": "libgomp/testsuite/libgomp.c/scan-10.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f03073ff24bbb005d52db7e2b7a5ea32bb01140/libgomp%2Ftestsuite%2Flibgomp.c%2Fscan-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f03073ff24bbb005d52db7e2b7a5ea32bb01140/libgomp%2Ftestsuite%2Flibgomp.c%2Fscan-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fscan-10.c?ref=2f03073ff24bbb005d52db7e2b7a5ea32bb01140", "patch": "@@ -0,0 +1,116 @@\n+/* { dg-require-effective-target size32plus } */\n+\n+extern void abort (void);\n+int r, a[1024], b[1024], x, y, z;\n+\n+__attribute__((noipa)) void\n+foo (int *a, int *b)\n+{\n+  #pragma omp for reduction (inscan, +:r) lastprivate (conditional: z) firstprivate (x) private (y)\n+  for (int i = 0; i < 1024; i++)\n+    {\n+      { b[i] = r; if ((i & 1) == 0 && i < 937) z = r; }\n+      #pragma omp scan exclusive(r)\n+      { y = a[i]; r += y + x + 12; }\n+    }\n+}\n+\n+__attribute__((noipa)) int\n+bar (void)\n+{\n+  int s = 0;\n+  #pragma omp parallel\n+  #pragma omp for reduction (inscan, +:s) firstprivate (x) private (y) lastprivate (z)\n+  for (int i = 0; i < 1024; i++)\n+    {\n+      { y = s; b[i] = y + x + 12; }\n+      #pragma omp scan exclusive(s)\n+      { y = 2 * a[i]; s += y; z = y; }\n+    }\n+  return s;\n+}\n+\n+__attribute__((noipa)) void\n+baz (int *a, int *b)\n+{\n+  #pragma omp parallel for reduction (inscan, +:r) firstprivate (x) lastprivate (x)\n+  for (int i = 0; i < 1024; i++)\n+    {\n+      b[i] = r;\n+      #pragma omp scan exclusive(r)\n+      { r += a[i] + x + 12; if (i == 1023) x = 29; }\n+    }\n+}\n+\n+__attribute__((noipa)) int\n+qux (void)\n+{\n+  int s = 0;\n+  #pragma omp parallel for reduction (inscan, +:s) lastprivate (conditional: x, y)\n+  for (int i = 0; i < 1024; i++)\n+    {\n+      { b[i] = s; if ((a[i] & 1) == 0 && i < 829) y = a[i]; }\n+      #pragma omp scan exclusive(s)\n+      { s += 2 * a[i]; if ((a[i] & 1) == 1 && i < 825) x = a[i]; }\n+    }\n+  return s;\n+}\n+\n+int\n+main ()\n+{\n+  int s = 0;\n+  x = -12;\n+  for (int i = 0; i < 1024; ++i)\n+    {\n+      a[i] = i;\n+      b[i] = -1;\n+      asm (\"\" : \"+g\" (i));\n+    }\n+  #pragma omp parallel\n+  foo (a, b);\n+  if (r != 1024 * 1023 / 2 || x != -12 || z != b[936])\n+    abort ();\n+  for (int i = 0; i < 1024; ++i)\n+    {\n+      if (b[i] != s)\n+\tabort ();\n+      else\n+\tb[i] = 25;\n+      s += i;\n+    }\n+  if (bar () != 1024 * 1023 || x != -12 || z != 2 * 1023)\n+    abort ();\n+  s = 0;\n+  for (int i = 0; i < 1024; ++i)\n+    {\n+      if (b[i] != s)\n+\tabort ();\n+      else\n+\tb[i] = -1;\n+      s += 2 * i;\n+    }\n+  r = 0;\n+  baz (a, b);\n+  if (r != 1024 * 1023 / 2 || x != 29)\n+    abort ();\n+  s = 0;\n+  for (int i = 0; i < 1024; ++i)\n+    {\n+      if (b[i] != s)\n+\tabort ();\n+      else\n+\tb[i] = -25;\n+      s += i;\n+    }\n+  if (qux () != 1024 * 1023 || x != 823 || y != 828)\n+    abort ();\n+  s = 0;\n+  for (int i = 0; i < 1024; ++i)\n+    {\n+      if (b[i] != s)\n+\tabort ();\n+      s += 2 * i;\n+    }\n+  return 0;\n+}"}, {"sha": "822752306ae81eb5a19d53b96697819972f433d7", "filename": "libgomp/testsuite/libgomp.c/scan-9.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f03073ff24bbb005d52db7e2b7a5ea32bb01140/libgomp%2Ftestsuite%2Flibgomp.c%2Fscan-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f03073ff24bbb005d52db7e2b7a5ea32bb01140/libgomp%2Ftestsuite%2Flibgomp.c%2Fscan-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fscan-9.c?ref=2f03073ff24bbb005d52db7e2b7a5ea32bb01140", "patch": "@@ -0,0 +1,116 @@\n+/* { dg-require-effective-target size32plus } */\n+\n+extern void abort (void);\n+int r, a[1024], b[1024], x, y, z;\n+\n+__attribute__((noipa)) void\n+foo (int *a, int *b)\n+{\n+  #pragma omp for reduction (inscan, +:r) lastprivate (conditional: z) firstprivate (x) private (y)\n+  for (int i = 0; i < 1024; i++)\n+    {\n+      { y = a[i]; r += y + x + 12; }\n+      #pragma omp scan inclusive(r)\n+      { b[i] = r; if ((i & 1) == 0 && i < 937) z = r; }\n+    }\n+}\n+\n+__attribute__((noipa)) int\n+bar (void)\n+{\n+  int s = 0;\n+  #pragma omp parallel\n+  #pragma omp for reduction (inscan, +:s) firstprivate (x) private (y) lastprivate (z)\n+  for (int i = 0; i < 1024; i++)\n+    {\n+      { y = 2 * a[i]; s += y; z = y; }\n+      #pragma omp scan inclusive(s)\n+      { y = s; b[i] = y + x + 12; }\n+    }\n+  return s;\n+}\n+\n+__attribute__((noipa)) void\n+baz (int *a, int *b)\n+{\n+  #pragma omp parallel for reduction (inscan, +:r) firstprivate (x) lastprivate (x)\n+  for (int i = 0; i < 1024; i++)\n+    {\n+      { r += a[i] + x + 12; if (i == 1023) x = 29; }\n+      #pragma omp scan inclusive(r)\n+      b[i] = r;\n+    }\n+}\n+\n+__attribute__((noipa)) int\n+qux (void)\n+{\n+  int s = 0;\n+  #pragma omp parallel for reduction (inscan, +:s) lastprivate (conditional: x, y)\n+  for (int i = 0; i < 1024; i++)\n+    {\n+      { s += 2 * a[i]; if ((a[i] & 1) == 1 && i < 825) x = a[i]; }\n+      #pragma omp scan inclusive(s)\n+      { b[i] = s; if ((a[i] & 1) == 0 && i < 829) y = a[i]; }\n+    }\n+  return s;\n+}\n+\n+int\n+main ()\n+{\n+  int s = 0;\n+  x = -12;\n+  for (int i = 0; i < 1024; ++i)\n+    {\n+      a[i] = i;\n+      b[i] = -1;\n+      asm (\"\" : \"+g\" (i));\n+    }\n+  #pragma omp parallel\n+  foo (a, b);\n+  if (r != 1024 * 1023 / 2 || x != -12 || z != b[936])\n+    abort ();\n+  for (int i = 0; i < 1024; ++i)\n+    {\n+      s += i;\n+      if (b[i] != s)\n+\tabort ();\n+      else\n+\tb[i] = 25;\n+    }\n+  if (bar () != 1024 * 1023 || x != -12 || z != 2 * 1023)\n+    abort ();\n+  s = 0;\n+  for (int i = 0; i < 1024; ++i)\n+    {\n+      s += 2 * i;\n+      if (b[i] != s)\n+\tabort ();\n+      else\n+\tb[i] = -1;\n+    }\n+  r = 0;\n+  baz (a, b);\n+  if (r != 1024 * 1023 / 2 || x != 29)\n+    abort ();\n+  s = 0;\n+  for (int i = 0; i < 1024; ++i)\n+    {\n+      s += i;\n+      if (b[i] != s)\n+\tabort ();\n+      else\n+\tb[i] = -25;\n+    }\n+  if (qux () != 1024 * 1023 || x != 823 || y != 828)\n+    abort ();\n+  s = 0;\n+  for (int i = 0; i < 1024; ++i)\n+    {\n+      s += 2 * i;\n+      if (b[i] != s)\n+\tabort ();\n+    }\n+  return 0;\n+}"}]}