{"sha": "149061188c7c6ddf27663c8c00b7574fc8d0fd23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ5MDYxMTg4YzdjNmRkZjI3NjYzYzhjMDBiNzU3NGZjOGQwZmQyMw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-04-30T01:38:14Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-05-14T01:13:32Z"}, "message": "c++: Check attributes on friend declarations [PR99032]\n\nThis patch implements [dcl.attr.grammar]/5: \"If an attribute-specifier-seq\nappertains to a friend declaration ([class.friend]), that declaration shall\nbe a definition.\"\n\nThis restriction applies to C++11-style attributes as well as GNU\nattributes with the exception that we allow GNU attributes that require\na type, such as vector_size to continue accepting code as in attrib63.C.\nThere are various forms of friend declarations, we have friend\ntemplates, C++11 extended friend declarations, and so on.  In some cases\nwe already ignore the attribute and warn that it was ignored.  But\ncertain cases weren't diagnosed, and with this patch we'll give a hard\nerror.  I tried hard not to emit both a warning and error and I think it\nworked out.\n\nJason provided the cp_parser_decl_specifier_seq hunk to detect using\nstandard attributes in the middle of decl-specifiers, which is invalid.\n\nCo-authored-by: Jason Merrill <jason@redhat.com>\n\ngcc/cp/ChangeLog:\n\n\tPR c++/99032\n\t* cp-tree.h (any_non_type_attribute_p): Declare.\n\t* decl.c (grokdeclarator): Diagnose when an attribute appertains to\n\ta friend declaration that is not a definition.\n\t* decl2.c (any_non_type_attribute_p): New.\n\t* parser.c (cp_parser_decl_specifier_seq): Diagnose standard attributes\n\tin the middle of decl-specifiers.\n\t(cp_parser_elaborated_type_specifier): Diagnose when an attribute\n\tappertains to a friend declaration that is not a definition.\n\t(cp_parser_member_declaration): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/99032\n\t* g++.dg/cpp0x/friend7.C: New test.\n\t* g++.dg/cpp0x/gen-attrs-4.C: Add dg-error.\n\t* g++.dg/cpp0x/gen-attrs-39-1.C: Likewise.\n\t* g++.dg/cpp0x/gen-attrs-74.C: New test.\n\t* g++.dg/ext/attrib63.C: New test.", "tree": {"sha": "73ad0e8a10cdf67cb96a97cd2909cdaacf2dbe44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73ad0e8a10cdf67cb96a97cd2909cdaacf2dbe44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/149061188c7c6ddf27663c8c00b7574fc8d0fd23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/149061188c7c6ddf27663c8c00b7574fc8d0fd23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/149061188c7c6ddf27663c8c00b7574fc8d0fd23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/149061188c7c6ddf27663c8c00b7574fc8d0fd23/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9af11c7f156bede9aa28410073acbab7b0fa0fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9af11c7f156bede9aa28410073acbab7b0fa0fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9af11c7f156bede9aa28410073acbab7b0fa0fe"}], "stats": {"total": 115, "additions": 112, "deletions": 3}, "files": [{"sha": "580db914d406ea144b1a57ee2eb862aa97c289bd", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/149061188c7c6ddf27663c8c00b7574fc8d0fd23/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/149061188c7c6ddf27663c8c00b7574fc8d0fd23/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=149061188c7c6ddf27663c8c00b7574fc8d0fd23", "patch": "@@ -6763,6 +6763,7 @@ extern tree grokbitfield (const cp_declarator *, cp_decl_specifier_seq *,\n \t\t\t  tree, tree, tree);\n extern tree splice_template_attributes\t\t(tree *, tree);\n extern bool any_dependent_type_attributes_p\t(tree);\n+extern bool any_non_type_attribute_p\t\t(tree);\n extern tree cp_reconstruct_complex_type\t\t(tree, tree);\n extern bool attributes_naming_typedef_ok\t(tree);\n extern void cplus_decl_attributes\t\t(tree *, tree, int);"}, {"sha": "17511f09e792df43d97a4b523d067940c0343749", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/149061188c7c6ddf27663c8c00b7574fc8d0fd23/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/149061188c7c6ddf27663c8c00b7574fc8d0fd23/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=149061188c7c6ddf27663c8c00b7574fc8d0fd23", "patch": "@@ -13741,6 +13741,11 @@ grokdeclarator (const cp_declarator *declarator,\n \n \tif (friendp)\n \t  {\n+\t    if (attrlist && !funcdef_flag\n+\t\t/* Hack to allow attributes like vector_size on a friend.  */\n+\t\t&& any_non_type_attribute_p (*attrlist))\n+\t      error_at (id_loc, \"attribute appertains to a friend \"\n+\t\t\t\"declaration that is not a definition\");\n \t    /* Friends are treated specially.  */\n \t    if (ctype == current_class_type)\n \t      ;  /* We already issued a permerror.  */"}, {"sha": "8e4dd6b544a3fba1915c6df1bdc3c2cc91e5cd74", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/149061188c7c6ddf27663c8c00b7574fc8d0fd23/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/149061188c7c6ddf27663c8c00b7574fc8d0fd23/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=149061188c7c6ddf27663c8c00b7574fc8d0fd23", "patch": "@@ -1331,6 +1331,20 @@ any_dependent_type_attributes_p (tree attrs)\n   return false;\n }\n \n+/* True if ATTRS contains any attribute that does not require a type.  */\n+\n+bool\n+any_non_type_attribute_p (tree attrs)\n+{\n+  for (tree a = attrs; a; a = TREE_CHAIN (a))\n+    {\n+      const attribute_spec *as = lookup_attribute_spec (get_attribute_name (a));\n+      if (as && !as->type_required)\n+\treturn true;\n+    }\n+  return false;\n+}\n+\n /* Return true iff ATTRS are acceptable attributes to be applied in-place\n    to a typedef which gives a previously unnamed class or enum a name for\n    linkage purposes.  */"}, {"sha": "c0b579559546f85784e580c3ea8408bc8dbf0541", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/149061188c7c6ddf27663c8c00b7574fc8d0fd23/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/149061188c7c6ddf27663c8c00b7574fc8d0fd23/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=149061188c7c6ddf27663c8c00b7574fc8d0fd23", "patch": "@@ -15146,6 +15146,16 @@ cp_parser_decl_specifier_seq (cp_parser* parser,\n       if (!found_decl_spec)\n \tbreak;\n \n+      if (decl_specs->std_attributes)\n+\t{\n+\t  error_at (decl_specs->locations[ds_std_attribute],\n+\t\t    \"standard attributes in middle of decl-specifiers\");\n+\t  inform (decl_specs->locations[ds_std_attribute],\n+\t\t  \"standard attributes must precede the decl-specifiers to \"\n+\t\t  \"apply to the declaration, or follow them to apply to \"\n+\t\t  \"the type\");\n+\t}\n+\n       decl_specs->any_specifiers_p = true;\n       /* After we see one decl-specifier, further decl-specifiers are\n \t always optional.  */\n@@ -19764,11 +19774,15 @@ cp_parser_elaborated_type_specifier (cp_parser* parser,\n \t       && ! processing_explicit_instantiation)\n \twarning (OPT_Wattributes,\n \t\t \"attributes ignored on template instantiation\");\n+      else if (is_friend && attributes)\n+\terror (\"attribute appertains to a friend declaration that is not \"\n+\t       \"a definition\");\n       else if (is_declaration && cp_parser_declares_only_class_p (parser))\n \tcplus_decl_attributes (&type, attributes, (int) ATTR_FLAG_TYPE_IN_PLACE);\n       else\n \twarning (OPT_Wattributes,\n-\t\t \"attributes ignored on elaborated-type-specifier that is not a forward declaration\");\n+\t\t \"attributes ignored on elaborated-type-specifier that is \"\n+\t\t \"not a forward declaration\");\n     }\n \n   if (tag_type == enum_type)\n@@ -26054,6 +26068,13 @@ cp_parser_member_declaration (cp_parser* parser)\n \t\t error_at (decl_spec_token_start->location,\n \t\t\t   \"friend declaration does not name a class or \"\n \t\t\t   \"function\");\n+\t       /* Give an error if an attribute cannot appear here, as per\n+\t\t  [dcl.attr.grammar]/5.  But not when declares_class_or_enum:\n+\t\t  we ignore attributes in elaborated-type-specifiers.  */\n+\t       else if (!declares_class_or_enum && decl_specifiers.attributes)\n+\t\t error_at (decl_spec_token_start->location,\n+\t\t\t   \"attribute appertains to a friend declaration \"\n+\t\t\t   \"that is not a definition\");\n \t       else\n \t\t make_friend_class (current_class_type, type,\n \t\t\t\t    /*complain=*/true);"}, {"sha": "734b367cd2b98f4f7dfdb684046c2e002322f921", "filename": "gcc/testsuite/g++.dg/cpp0x/friend7.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/149061188c7c6ddf27663c8c00b7574fc8d0fd23/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffriend7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/149061188c7c6ddf27663c8c00b7574fc8d0fd23/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffriend7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffriend7.C?ref=149061188c7c6ddf27663c8c00b7574fc8d0fd23", "patch": "@@ -0,0 +1,40 @@\n+// PR c++/99032\n+// { dg-do compile { target c++11 } }\n+\n+class X { };\n+template<typename T1, typename T2>\n+void foo (T1, T2);\n+\n+struct S {\n+  [[deprecated]] friend void f(); // { dg-error \"attribute appertains\" }\n+  [[deprecated]] friend void f2() { }\n+  __attribute__((deprecated)) friend void f3(); // { dg-error \"attribute appertains\" }\n+  friend void f3 [[deprecated]] (); // { dg-error \"attribute appertains\" }\n+  friend void f4 [[deprecated]] () { }\n+  [[deprecated]] friend void; // { dg-error \"attribute appertains\" }\n+  __attribute__((deprecated)) friend int; // { dg-error \"attribute appertains\" }\n+  friend __attribute__((deprecated)) int; // { dg-error \"attribute appertains\" }\n+  friend int __attribute__((deprecated)); // { dg-error \"attribute appertains\" }\n+  [[deprecated]] friend X; // { dg-error \"attribute appertains\" }\n+  [[deprecated]] friend class N; // { dg-warning \"attribute ignored\" }\n+  friend class [[deprecated]] N2; // { dg-error \"attribute appertains\" }\n+  friend class __attribute__((deprecated)) N3; // { dg-error \"attribute appertains\" }\n+  [[deprecated]] friend void foo<>(int, int); // { dg-error \"attribute appertains\" }\n+  [[deprecated]] friend void ::foo(int, int); // { dg-error \"attribute appertains\" }\n+  // { dg-bogus \"should have\" \"PR100339\" { xfail *-*-* } .-1 }\n+};\n+\n+template<typename T>\n+class node { };\n+\n+template<typename T>\n+struct A {\n+  [[deprecated]] friend T; // { dg-error \"attribute appertains\" }\n+  [[deprecated]] friend class node<T>; // { dg-warning \"attribute ignored\" }\n+  template<typename>\n+  [[deprecated]] friend class A; // { dg-warning \"attribute ignored\" }\n+  template<typename>\n+  [[deprecated]] friend void bar () { }\n+  template<typename>\n+  [[deprecated]] friend void baz (); // { dg-error \"attribute appertains\" }\n+};"}, {"sha": "4010ba7724cf330559adcae46daa55ef595aea91", "filename": "gcc/testsuite/g++.dg/cpp0x/gen-attrs-39-1.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/149061188c7c6ddf27663c8c00b7574fc8d0fd23/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-39-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/149061188c7c6ddf27663c8c00b7574fc8d0fd23/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-39-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-39-1.C?ref=149061188c7c6ddf27663c8c00b7574fc8d0fd23", "patch": "@@ -2,7 +2,8 @@\n \n int fragile_block(void) {\n   typedef \n-  [[gnu::aligned (16)]] // { dg-warning \"ignored\" }\n+  [[gnu::aligned (16)]] // { dg-error \"standard attributes in middle of decl-specifiers\" }\n+// { dg-warning \"attribute ignored\" \"\" { target *-*-* } .-1 }\n   struct  {\n     int i;\n   } XmmUint16;"}, {"sha": "c120aeddf957b4d725ecdcfe8eb6ce093b3e8c2d", "filename": "gcc/testsuite/g++.dg/cpp0x/gen-attrs-4.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/149061188c7c6ddf27663c8c00b7574fc8d0fd23/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/149061188c7c6ddf27663c8c00b7574fc8d0fd23/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-4.C?ref=149061188c7c6ddf27663c8c00b7574fc8d0fd23", "patch": "@@ -13,7 +13,8 @@ int one_third [[noreturn]] [[gnu::unused]] (void);\n int [[gnu::unused]] one_half(); // { dg-warning \"ignored\" }\n \n static\n-[[noreturn]] // { dg-warning \"ignored\" }\n+[[noreturn]] // { dg-error \"standard attributes in middle of decl-specifiers\" }\n+// { dg-warning \"attribute ignored\" \"\" { target *-*-* } .-1 }\n void two [[gnu::unused]] (void) {}\n \n "}, {"sha": "7e17bc8b661a1858049ed93e044def743b2aac63", "filename": "gcc/testsuite/g++.dg/cpp0x/gen-attrs-74.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/149061188c7c6ddf27663c8c00b7574fc8d0fd23/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-74.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/149061188c7c6ddf27663c8c00b7574fc8d0fd23/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-74.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-74.C?ref=149061188c7c6ddf27663c8c00b7574fc8d0fd23", "patch": "@@ -0,0 +1,10 @@\n+// { dg-do compile { target c++11 } }\n+// A C++11 attribute cannot appear in the middle of the decl-specifier-seq,\n+// only before it (in which case it appertains to the declaration) or at\n+// the end (in which case it appertains to the type).\n+\n+struct S {\n+  friend [[deprecated]] void; // { dg-error \"standard attributes in middle of decl-specifiers\" }\n+  friend [[deprecated]] int fn(); // { dg-error \"standard attributes in middle of decl-specifiers\" }\n+  // { dg-warning \"attribute ignored\" \"\" { target *-*-* } .-1 }\n+};"}, {"sha": "e515a2bf6ee35dc7cae0962f219d9a0114f83f7e", "filename": "gcc/testsuite/g++.dg/ext/attrib63.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/149061188c7c6ddf27663c8c00b7574fc8d0fd23/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib63.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/149061188c7c6ddf27663c8c00b7574fc8d0fd23/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib63.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib63.C?ref=149061188c7c6ddf27663c8c00b7574fc8d0fd23", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do compile }\n+\n+#define vector __attribute__((vector_size(16)))\n+class A {\n+  friend vector float f();\n+  __attribute__((deprecated)) friend void f2(); // { dg-error \"attribute appertains\" }\n+  friend __attribute__((deprecated, vector_size(16))) float f3(); // { dg-error \"attribute appertains\" }\n+  friend __attribute__((vector_size(16), deprecated)) float f4(); // { dg-error \"attribute appertains\" }\n+};\n+\n+vector float vf;\n+vector float\n+f ()\n+{\n+  return vf;\n+}"}]}