{"sha": "d80ffa4333c6084ecbefe8ca60c7826d7b888518", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgwZmZhNDMzM2M2MDg0ZWNiZWZlOGNhNjBjNzgyNmQ3Yjg4ODUxOA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1991-12-01T05:07:43Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1991-12-01T05:07:43Z"}, "message": "Initial revision\n\nFrom-SVN: r90", "tree": {"sha": "5ca2604f7fa584167a8c8f54d50f63884c12c83b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ca2604f7fa584167a8c8f54d50f63884c12c83b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d80ffa4333c6084ecbefe8ca60c7826d7b888518", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d80ffa4333c6084ecbefe8ca60c7826d7b888518", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d80ffa4333c6084ecbefe8ca60c7826d7b888518", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d80ffa4333c6084ecbefe8ca60c7826d7b888518/comments", "author": null, "committer": null, "parents": [{"sha": "94160706d800e90b93bb60cf76a8a852f04af501", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94160706d800e90b93bb60cf76a8a852f04af501", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94160706d800e90b93bb60cf76a8a852f04af501"}], "stats": {"total": 283, "additions": 283, "deletions": 0}, "files": [{"sha": "7705810c3d0791a21a2ef0dd5771bc0450389aa0", "filename": "gcc/config/i860/bsd.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d80ffa4333c6084ecbefe8ca60c7826d7b888518/gcc%2Fconfig%2Fi860%2Fbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d80ffa4333c6084ecbefe8ca60c7826d7b888518/gcc%2Fconfig%2Fi860%2Fbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fbsd.h?ref=d80ffa4333c6084ecbefe8ca60c7826d7b888518", "patch": "@@ -0,0 +1,5 @@\n+#include \"i860.h\"\n+\n+/* BSD UN*X systems use BSD STABS debugging info.  */\n+\n+#define DBX_DEBUGGING_INFO"}, {"sha": "71ac839f4414504b5f1d3607a608da4d5334d6a5", "filename": "gcc/config/m68k/tower.h", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d80ffa4333c6084ecbefe8ca60c7826d7b888518/gcc%2Fconfig%2Fm68k%2Ftower.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d80ffa4333c6084ecbefe8ca60c7826d7b888518/gcc%2Fconfig%2Fm68k%2Ftower.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ftower.h?ref=d80ffa4333c6084ecbefe8ca60c7826d7b888518", "patch": "@@ -0,0 +1,103 @@\n+/* Definitions of target machine for GNU compiler.\n+   Copyright (C) 1990 Free Software Foundation, Inc.\n+\n+   Written by Robert Andersson, International Systems, Oslo, Norway.\n+   Please send bug reports, questions and improvements to ra@intsys.no.\n+\n+   For NCR Tower 32/4x0 and 32/6x0 running System V Release 3.\n+   I don't have access to 200/700/800/850 machines, so I don't know if it\n+   works on those as well.  It shouldn't be far from it however.\n+   The hardware floating point support is completely untested, as I do\n+   not have access to a machine with a 6888x FPU in it.\n+   It does not work on the System V Release 2 based OS releases.  Making it\n+   work will not be easy, due to the silly way in which stack expansion is\n+   implemented in the OS.\n+\n+   This file is included in tower-as.h.\n+   Do *NOT* include this file directly.\n+\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+\n+#include \"m68k.h\"\n+\n+\n+/* See m68k.h.  5 means 68020 with no 68881.  */\n+\n+#define TARGET_DEFAULT 5\n+\n+/* Names to predefine in the preprocessor for this target machine.  */\n+\n+#define CPP_PREDEFINES \"-Dunix -Dtower32 -Dtower32_200\"\n+\n+#if 0  /* It is incorrect to test these symbols.\n+\t  They describe the host, not the target.\n+\t  It should not matter which model is specified.  */\n+#ifdef tower32_600\n+#define CPP_PREDEFINES \"-Dunix -Dtower32 -Dtower32_600\"\n+#endif\n+#ifdef tower32_700\n+#define CPP_PREDEFINES \"-Dunix -Dtower32 -Dtower32_700\"\n+#endif\n+#ifdef tower32_800\n+#define CPP_PREDEFINES \"-Dunix -Dtower32 -Dtower32_800\"\n+#endif\n+#ifdef tower32_850\n+#define CPP_PREDEFINES \"-Dunix -Dtower32 -Dtower32_850\"\n+#endif\n+#endif\n+\n+/* The startfiles and libraries depend on the -p and -m68881 options.\n+   The Tower does not support the -pg option.  */\n+\n+#define LINK_SPEC                                              \\\n+\"%{p:%{m68881:-L/usr/lib/fp/libp} -L/usr/lib/libp}             \\\n+ %{m68881:-L/usr/lib/fp}\"\n+\n+#define LIB_SPEC \"-lc %{m68881:/usr/lib/fp/crtn.o}%{!m68881:/lib/crtn.o}\"\n+\n+/* Use mem* functions, recognize #ident lines.  */\n+\n+#define TARGET_MEM_FUNCTIONS\n+#define IDENT_DIRECTIVE\n+\n+/* This is only used in g++, don't prepend underscore.  */\n+\n+#define NO_UNDERSCORES\n+\n+/* Every structure and union's size must be a multiple of two bytes.  */\n+\n+#define STRUCTURE_SIZE_BOUNDARY 16\n+\n+/* All register names should have a leading % character.  */\n+\n+#undef REGISTER_NAMES\n+#define REGISTER_NAMES \\\n+{\"%d0\", \"%d1\", \"%d2\", \"%d3\", \"%d4\", \"%d5\", \"%d6\", \"%d7\",                      \\\n+ \"%a0\", \"%a1\", \"%a2\", \"%a3\", \"%a4\", \"%a5\", \"%a6\", \"%sp\",                      \\\n+ \"%fp0\", \"%fp1\", \"%fp2\", \"%fp3\", \"%fp4\", \"%fp5\", \"%fp6\", \"%fp7\",              \\\n+ \"%fpa0\", \"%fpa1\", \"%fpa2\", \"%fpa3\", \"%fpa4\", \"%fpa5\", \"%fpa6\", \"%fpa7\",      \\\n+ \"%fpa8\", \"%fpa9\", \"%fpa10\", \"%fpa11\", \"%fpa12\", \"%fpa13\", \"%fpa14\", \"%fpa15\",\\\n+ \"%fpa16\",\"%fpa17\", \"%fpa18\", \"%fpa19\", \"%fpa20\", \"%fpa21\", \"%fpa22\",\"%fpa23\",\\\n+ \"%fpa24\",\"%fpa25\", \"%fpa26\", \"%fpa27\", \"%fpa28\", \"%fpa29\", \"%fpa30\",\"%fpa31\"}\n+\n+/* We do not want leading underscores.  */\n+\n+#undef ASM_OUTPUT_LABELREF\n+#define ASM_OUTPUT_LABELREF(FILE,NAME)  \\\n+  fprintf (FILE, \"%s\", NAME)"}, {"sha": "bd4d254e4b4304664eb7b443efe953f0312efce8", "filename": "gcc/config/m88k/luna.h", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d80ffa4333c6084ecbefe8ca60c7826d7b888518/gcc%2Fconfig%2Fm88k%2Fluna.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d80ffa4333c6084ecbefe8ca60c7826d7b888518/gcc%2Fconfig%2Fm88k%2Fluna.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fluna.h?ref=d80ffa4333c6084ecbefe8ca60c7826d7b888518", "patch": "@@ -0,0 +1,46 @@\n+/* Definitions of target machine for GNU compiler.\n+   Motorola m88100 running Omron Luna/88k.\n+   Copyright (C) 1991 Free Software Foundation, Inc.\n+   Contributed by Jeffery Friedl (jfriedl@omron.co.jp)\n+   Currently supported by Tom Wood (wood@dg-rtp.dg.com)\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* The Omron Luna/88k is MACH and uses BSD a.out, not COFF or ELF.  */\n+#ifndef MACH\n+#define MACH\n+#endif\n+#define DBX_DEBUGGING_INFO\n+\n+#include \"m88k.h\"\n+\n+/* Identify the compiler.  */\n+#undef  VERSION_INFO1\n+#define VERSION_INFO1 \"Omron Luna/88k, \"\n+\n+/* Macros to be automatically defined.  */\n+#undef\tCPP_PREDEFINES\n+#define CPP_PREDEFINES \\\n+    \"-DMACH -Dmc88100 -Dm88k -Dunix -Dluna -Dluna88k -D__CLASSIFY_TYPE__=2\"\n+\n+/* Specify extra dir to search for include files.  */\n+#undef\tSYSTEM_INCLUDE_DIR\n+#define SYSTEM_INCLUDE_DIR \"/usr/mach/include\"\n+\n+/* For the Omron Luna/88k, a float function returns a double in traditional\n+   mode (and a float in ansi mode).  */\n+#undef TRADITIONAL_RETURN_FLOAT"}, {"sha": "2c0653119e01c8abc8c55b01135e2c1f314cf135", "filename": "gcc/config/ns32k/sequent.h", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d80ffa4333c6084ecbefe8ca60c7826d7b888518/gcc%2Fconfig%2Fns32k%2Fsequent.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d80ffa4333c6084ecbefe8ca60c7826d7b888518/gcc%2Fconfig%2Fns32k%2Fsequent.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fsequent.h?ref=d80ffa4333c6084ecbefe8ca60c7826d7b888518", "patch": "@@ -0,0 +1,114 @@\n+/* Definitions of target machine for GNU compiler.  SEQUENT NS32000 version.\n+   Copyright (C) 1987 Free Software Foundation, Inc.\n+   Contributed by Michael Tiemann (tiemann@mcc.com)\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* Two flags to control how addresses are printed in assembler insns.  */\n+#define SEQUENT_ADDRESS_BUG 1\n+#define SEQUENT_BASE_REGS\n+\n+#include \"ns32k.h\"\n+\n+/* This is BSD, so it wants DBX format.  */\n+#define DBX_DEBUGGING_INFO\n+\n+/* Sequent has some changes in the format of DBX symbols.  */\n+#define DBX_NO_XREFS 1\n+\n+/* Don't split DBX symbols into continuations.  */\n+#define DBX_CONTIN_LENGTH 0\n+\n+#define TARGET_DEFAULT 9  /* 32332 with 32081 (guessing) */\n+\n+/* Print subsidiary information on the compiler version in use.  */\n+#undef TARGET_VERSION\n+#define TARGET_VERSION fprintf (stderr, \" (32000, Sequent syntax)\");\n+\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-Dns32000 -Dsequent -Dunix\"\n+\n+/* Link with libg.a when debugging, for dbx's sake.  */\n+\n+#define LIB_SPEC \"%{g:-lg} %{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p} \"\n+\n+/* This is how to align the code that follows an unconditional branch.\n+   Don't define it, since it confuses the assembler (we hear).  */\n+\n+#undef ASM_OUTPUT_ALIGN_CODE\n+\n+/* Assember pseudo-op for shared data segment. */\n+#define SHARED_SECTION_ASM_OP \".shdata\"\n+\n+/* Control how stack adjust insns are output.  */\n+#define SEQUENT_ADJUST_STACK\n+\n+/* %$ means print the prefix for an immediate operand.\n+   On the sequent, no prefix is used for such.  */\n+\n+#undef PRINT_OPERAND\n+#define PRINT_OPERAND(FILE, X, CODE)  \\\n+{ if (CODE == '$') ;\t\t\t\t\t\t\t\\\n+  else if (CODE == '?');\t\t\t\t\t\t\\\n+  else if (GET_CODE (X) == REG)\t\t\t\t\t\t\\\n+    fprintf (FILE, \"%s\", reg_names[REGNO (X)]);\t\t\t\t\\\n+  else if (GET_CODE (X) == MEM)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      rtx xfoo;\t\t\t\t\t\t\t\t\\\n+      xfoo = XEXP (X, 0);\t\t\t\t\t\t\\\n+      switch (GET_CODE (xfoo))\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\tcase MEM:\t\t\t\t\t\t\t\\\n+\t  if (GET_CODE (XEXP (xfoo, 0)) == REG)\t\t\t\t\\\n+\t    if (REGNO (XEXP (xfoo, 0)) == STACK_POINTER_REGNUM)\t\t\\\n+\t      fprintf (FILE, \"0(0(sp))\");\t\t\t\t\\\n+\t    else fprintf (FILE, \"0(0(%s))\",\t\t\t\t\\\n+\t\t\t  reg_names[REGNO (XEXP (xfoo, 0))]);\t\t\\\n+\t  else\t\t\t\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t      fprintf (FILE, \"0(\");\t\t\t\t\t\\\n+\t      output_address (xfoo);\t\t\t\t\t\\\n+\t      putc (')', FILE);\t\t\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n+\t  break;\t\t\t\t\t\t\t\\\n+\tcase REG:\t\t\t\t\t\t\t\\\n+\t  fprintf (FILE, \"0(%s)\", reg_names[REGNO (xfoo)]);\t\t\\\n+\t  break;\t\t\t\t\t\t\t\\\n+\tcase PRE_DEC:\t\t\t\t\t\t\t\\\n+\tcase POST_INC:\t\t\t\t\t\t\t\\\n+\t  fprintf (FILE, \"tos\");\t\t\t\t\t\\\n+\t  break;\t\t\t\t\t\t\t\\\n+\tcase CONST_INT:\t\t\t\t\t\t\t\\\n+\t  fprintf (FILE, \"@%d\", INTVAL (xfoo));\t\t\t\t\\\n+\t  break;\t\t\t\t\t\t\t\\\n+\tdefault:\t\t\t\t\t\t\t\\\n+\t  output_address (xfoo);\t\t\t\t\t\\\n+\t  break;\t\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  else if (GET_CODE (X) == CONST_DOUBLE && GET_MODE (X) != DImode)\t\\\n+    if (GET_MODE (X) == DFmode)\t\t\t\t\t\t\\\n+      { union { double d; int i[2]; } u;\t\t\t\t\\\n+\tu.i[0] = CONST_DOUBLE_LOW (X); u.i[1] = CONST_DOUBLE_HIGH (X);\t\\\n+\tfprintf (FILE, \"0d%.20e\", u.d); }\t\t\t\t\\\n+    else { union { double d; int i[2]; } u;\t\t\t\t\\\n+\t   u.i[0] = CONST_DOUBLE_LOW (X); u.i[1] = CONST_DOUBLE_HIGH (X); \\\n+\t   fprintf (FILE, \"0f%.20e\", u.d); }\t\t\t\t\\\n+  else output_addr_const (FILE, X); }\n+\n+#undef PRINT_OPERAND_ADDRESS\n+#define PRINT_OPERAND_ADDRESS(FILE, ADDR)  print_operand_address(FILE, ADDR)"}, {"sha": "6d61e27cf9d0a09398ceb2b018523aaeee8c3c1c", "filename": "gcc/config/sparc/sun4o3.h", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d80ffa4333c6084ecbefe8ca60c7826d7b888518/gcc%2Fconfig%2Fsparc%2Fsun4o3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d80ffa4333c6084ecbefe8ca60c7826d7b888518/gcc%2Fconfig%2Fsparc%2Fsun4o3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsun4o3.h?ref=d80ffa4333c6084ecbefe8ca60c7826d7b888518", "patch": "@@ -0,0 +1,15 @@\n+#include \"sparc.h\"\n+\n+/* Define the Sun-asm flag, which is necessary for Sun 4 with os version 3.  */\n+#undef TARGET_DEFAULT\n+#define TARGET_DEFAULT 7\n+\n+#undef FUNCTION_PROFILER\n+#define FUNCTION_PROFILER(FILE, LABELNO)  \\\n+  fprintf (FILE, \"\\tsethi %%hi(LP%d),%%o0\\n\\tcall .mcount\\n\\tor %%lo(LP%d),%%o0,%%o0\\n\", \\\n+\t   (LABELNO), (LABELNO))\n+\n+/* LINK_SPEC is needed only for Sunos 4.  */\n+\n+#undef LINK_SPEC\n+"}]}