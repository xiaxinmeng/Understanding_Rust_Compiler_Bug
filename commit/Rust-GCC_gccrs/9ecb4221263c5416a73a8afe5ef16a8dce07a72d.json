{"sha": "9ecb4221263c5416a73a8afe5ef16a8dce07a72d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVjYjQyMjEyNjNjNTQxNmE3M2E4YWZlNWVmMTZhOGRjZTA3YTcyZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-09T15:09:09Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2020-01-09T15:09:09Z"}, "message": "Fix tree-nrv.c ICE for direct internal functions\n\npass_return_slot::execute has:\n\n\t      /* Ignore internal functions without direct optabs,\n\t\t those are expanded specially and aggregate_value_p\n\t\t on their result might result in undesirable warnings\n\t\t with some backends.  */\n\t      && (!gimple_call_internal_p (stmt)\n\t\t  || direct_internal_fn_p (gimple_call_internal_fn (stmt)))\n\t      && aggregate_value_p (TREE_TYPE (gimple_call_lhs (stmt)),\n\t\t\t\t    gimple_call_fndecl (stmt)))\n\nBut what the comment says applies to directly-mapped internal functions\ntoo, since they're only used if the target supports them without a\nlibcall.\n\nThis was triggering an ICE on the attached testcase.  The svld3 call\nis folded to an IFN_LOAD_LANES, which returns an array of vectors with\nVNx48QImode.  Since no such return type can exist in C, the target hook\nwas complaining about an unexpected use of SVE modes.  (And we want to\nkeep asserting for that, so that we don't accidentally define an ABI for\nan unexpected corner case.)\n\n2020-01-09  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-nrv.c (pass_return_slot::execute): Handle all internal\n\tfunctions the same way, rather than singling out those that\n\taren't mapped directly to optabs.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/acle/general/nrv_1.c: New test.\n\nFrom-SVN: r280048", "tree": {"sha": "7962d0e0f7a857ec1d2a4740d0741069c0d60ce0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7962d0e0f7a857ec1d2a4740d0741069c0d60ce0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ecb4221263c5416a73a8afe5ef16a8dce07a72d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ecb4221263c5416a73a8afe5ef16a8dce07a72d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ecb4221263c5416a73a8afe5ef16a8dce07a72d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ecb4221263c5416a73a8afe5ef16a8dce07a72d/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "482b2b43e5101921ad94e51e052a18b353f8a3f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/482b2b43e5101921ad94e51e052a18b353f8a3f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/482b2b43e5101921ad94e51e052a18b353f8a3f5"}], "stats": {"total": 37, "additions": 31, "deletions": 6}, "files": [{"sha": "a33a3518622ed8eda3b55dc34f0460e2b4926bd0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ecb4221263c5416a73a8afe5ef16a8dce07a72d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ecb4221263c5416a73a8afe5ef16a8dce07a72d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ecb4221263c5416a73a8afe5ef16a8dce07a72d", "patch": "@@ -1,3 +1,9 @@\n+2020-01-09  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-nrv.c (pass_return_slot::execute): Handle all internal\n+\tfunctions the same way, rather than singling out those that\n+\taren't mapped directly to optabs.\n+\n 2020-01-09  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* target.def (compatible_vector_types_p): New target hook."}, {"sha": "cdb8e0df72a23e6901eda40f2d511acd32ebe04f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ecb4221263c5416a73a8afe5ef16a8dce07a72d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ecb4221263c5416a73a8afe5ef16a8dce07a72d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9ecb4221263c5416a73a8afe5ef16a8dce07a72d", "patch": "@@ -1,3 +1,7 @@\n+2020-01-09  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/acle/general/nrv_1.c: New test.\n+\n 2020-01-09  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/pcs/gnu_vectors_1.c: New test."}, {"sha": "360a3e40780ecf3de023fb89bb5b7218b0cbf446", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general/nrv_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ecb4221263c5416a73a8afe5ef16a8dce07a72d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fnrv_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ecb4221263c5416a73a8afe5ef16a8dce07a72d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fnrv_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fnrv_1.c?ref=9ecb4221263c5416a73a8afe5ef16a8dce07a72d", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-options \"-O -msve-vector-bits=256\" } */\n+\n+#include <arm_sve.h>\n+\n+typedef uint8_t v32qi __attribute__((vector_size (32)));\n+\n+struct triple { v32qi v0, v1, v2; };\n+\n+struct triple f (uint8_t *ptr)\n+{\n+  svuint8x3_t data = svld3 (svptrue_b8 (), ptr);\n+  struct triple res;\n+  res.v0 = svget3 (data, 0);\n+  res.v1 = svget3 (data, 1);\n+  res.v2 = svget3 (data, 2);\n+  return res;\n+}"}, {"sha": "9d17a104f34c33bd979253afee819e6baaea53b8", "filename": "gcc/tree-nrv.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ecb4221263c5416a73a8afe5ef16a8dce07a72d/gcc%2Ftree-nrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ecb4221263c5416a73a8afe5ef16a8dce07a72d/gcc%2Ftree-nrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nrv.c?ref=9ecb4221263c5416a73a8afe5ef16a8dce07a72d", "patch": "@@ -378,12 +378,10 @@ pass_return_slot::execute (function *fun)\n \t  if (stmt\n \t      && gimple_call_lhs (stmt)\n \t      && !gimple_call_return_slot_opt_p (stmt)\n-\t      /* Ignore internal functions without direct optabs,\n-\t\t those are expanded specially and aggregate_value_p\n-\t\t on their result might result in undesirable warnings\n-\t\t with some backends.  */\n-\t      && (!gimple_call_internal_p (stmt)\n-\t\t  || direct_internal_fn_p (gimple_call_internal_fn (stmt)))\n+\t      /* Ignore internal functions, those are expanded specially\n+\t\t and aggregate_value_p on their result might result in\n+\t\t undesirable warnings with some backends.  */\n+\t      && !gimple_call_internal_p (stmt)\n \t      && aggregate_value_p (TREE_TYPE (gimple_call_lhs (stmt)),\n \t\t\t\t    gimple_call_fndecl (stmt)))\n \t    {"}]}