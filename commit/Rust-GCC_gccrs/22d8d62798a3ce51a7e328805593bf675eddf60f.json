{"sha": "22d8d62798a3ce51a7e328805593bf675eddf60f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJkOGQ2Mjc5OGEzY2U1MWE3ZTMyODgwNTU5M2JmNjc1ZWRkZjYwZg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2004-11-10T17:24:19Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-11-10T17:24:19Z"}, "message": "sparc.c (function_arg_union_value): New 'slotno' argument.\n\n\t* config/sparc/sparc.c (function_arg_union_value): New 'slotno'\n\targument.  When the union is passed in the 6th slot, build a\n\tPARALLEL with only one element.\n\t(function_arg): Adjust call to function_arg_union_value.\n\t(function_value): Likewise.\n\nFrom-SVN: r90396", "tree": {"sha": "519d44fed7e51de0d70afcb9657d3224501a3194", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/519d44fed7e51de0d70afcb9657d3224501a3194"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22d8d62798a3ce51a7e328805593bf675eddf60f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22d8d62798a3ce51a7e328805593bf675eddf60f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22d8d62798a3ce51a7e328805593bf675eddf60f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22d8d62798a3ce51a7e328805593bf675eddf60f/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d05f9c39a3a6e7d9a95de9c134d13c1a34f1c70d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d05f9c39a3a6e7d9a95de9c134d13c1a34f1c70d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d05f9c39a3a6e7d9a95de9c134d13c1a34f1c70d"}], "stats": {"total": 54, "additions": 49, "deletions": 5}, "files": [{"sha": "23d6473b9f9c4ffa687af670ef8688a8a2b4f290", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d8d62798a3ce51a7e328805593bf675eddf60f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d8d62798a3ce51a7e328805593bf675eddf60f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22d8d62798a3ce51a7e328805593bf675eddf60f", "patch": "@@ -1,3 +1,11 @@\n+2004-11-10  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* config/sparc/sparc.c (function_arg_union_value): New 'slotno'\n+\targument.  When the union is passed in the 6th slot, build a\n+\tPARALLEL with only one element.\n+\t(function_arg): Adjust call to function_arg_union_value.\n+\t(function_value): Likewise.\n+\n 2004-11-10  Fariborz Jahanian <fjahanian@apple.com>\n \n \tPR tree-optimization/17892"}, {"sha": "87e30d49d79c8842c4e9958edcc54afa6fd3714d", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d8d62798a3ce51a7e328805593bf675eddf60f/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d8d62798a3ce51a7e328805593bf675eddf60f/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=22d8d62798a3ce51a7e328805593bf675eddf60f", "patch": "@@ -5241,7 +5241,7 @@ static void function_arg_record_value_2\n static void function_arg_record_value_1\n  (tree, HOST_WIDE_INT, struct function_arg_record_value_parms *, bool);\n static rtx function_arg_record_value (tree, enum machine_mode, int, int, int);\n-static rtx function_arg_union_value (int, enum machine_mode, int);\n+static rtx function_arg_union_value (int, enum machine_mode, int, int);\n \n /* A subroutine of function_arg_record_value.  Traverse the structure\n    recursively and determine how many registers will be required.  */\n@@ -5608,7 +5608,8 @@ function_arg_record_value (tree type, enum machine_mode mode,\n    REGNO is the hard register the union will be passed in.  */\n \n static rtx\n-function_arg_union_value (int size, enum machine_mode mode, int regno)\n+function_arg_union_value (int size, enum machine_mode mode, int slotno,\n+\t\t\t  int regno)\n {\n   int nwords = ROUND_ADVANCE (size), i;\n   rtx regs;\n@@ -5617,6 +5618,9 @@ function_arg_union_value (int size, enum machine_mode mode, int regno)\n   if (nwords == 0)\n     return gen_rtx_REG (mode, regno);\n \n+  if (slotno == SPARC_INT_ARG_MAX - 1)\n+    nwords = 1;\n+\n   regs = gen_rtx_PARALLEL (mode, rtvec_alloc (nwords));\n \n   for (i = 0; i < nwords; i++)\n@@ -5717,7 +5721,7 @@ function_arg (const struct sparc_args *cum, enum machine_mode mode,\n       if (size > 16)\n \tabort (); /* shouldn't get here */\n \n-      return function_arg_union_value (size, mode, regno);\n+      return function_arg_union_value (size, mode, slotno, regno);\n     }\n   else if (type && TREE_CODE (type) == VECTOR_TYPE)\n     {\n@@ -6107,7 +6111,7 @@ function_value (tree type, enum machine_mode mode, int incoming_p)\n \t  if (size > 32)\n \t    abort (); /* shouldn't get here */\n \n-\t  return function_arg_union_value (size, mode, regbase);\n+\t  return function_arg_union_value (size, mode, 0, regbase);\n \t}\n       else if (AGGREGATE_TYPE_P (type))\n \t{\n@@ -6130,7 +6134,7 @@ function_value (tree type, enum machine_mode mode, int incoming_p)\n \t     try to be unduly clever, and simply follow the ABI\n \t     for unions in that case.  */\n \t  if (mode == BLKmode)\n-\t    return function_arg_union_value (bytes, mode, regbase);\n+\t    return function_arg_union_value (bytes, mode, 0, regbase);\n \t  else\n \t    mclass = MODE_INT;\n \t}"}, {"sha": "08932778d9fabbf44987ec3ecc43458775c02918", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d8d62798a3ce51a7e328805593bf675eddf60f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d8d62798a3ce51a7e328805593bf675eddf60f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=22d8d62798a3ce51a7e328805593bf675eddf60f", "patch": "@@ -1,3 +1,7 @@\n+2004-11-10  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* gcc.dg/union-2.c: New test.\n+\n 2004-11-10  Fariborz Jahanian <fjahanian@apple.com>\n \n         * gcc.c-torture/execute/ieee/unsafe-fp-assoc-1.c: "}, {"sha": "edc8a7abf114b98668ba41a98cb1dd5f1f7e90ea", "filename": "gcc/testsuite/gcc.dg/union-2.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d8d62798a3ce51a7e328805593bf675eddf60f/gcc%2Ftestsuite%2Fgcc.dg%2Funion-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d8d62798a3ce51a7e328805593bf675eddf60f/gcc%2Ftestsuite%2Fgcc.dg%2Funion-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funion-2.c?ref=22d8d62798a3ce51a7e328805593bf675eddf60f", "patch": "@@ -0,0 +1,28 @@\n+/* This used to segfault on SPARC 64-bit at runtime because\n+   the stack pointer was clobbered by the function call.   */\n+\n+/* { dg-do run } */\n+\n+#include <stdarg.h>\n+\n+union U\n+{\n+  long l1[2];\n+};\n+\n+union U u;\n+\n+void foo (int z, ...)\n+{\n+  int i;\n+  va_list ap;\n+  va_start(ap,z);\n+  i = va_arg(ap, int);\n+  va_end(ap);\n+}\n+\n+int main(void)\n+{\n+  foo (1, 1, 1, 1, 1, u);\n+  return 0;\n+}"}]}