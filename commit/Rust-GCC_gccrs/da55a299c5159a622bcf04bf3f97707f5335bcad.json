{"sha": "da55a299c5159a622bcf04bf3f97707f5335bcad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE1NWEyOTljNTE1OWE2MjJiY2YwNGJmM2Y5NzcwN2Y1MzM1YmNhZA==", "commit": {"author": {"name": "Than McIntosh", "email": "thanm@google.com", "date": "2017-05-12T16:36:50Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-05-12T16:36:50Z"}, "message": "compiler: add calling Bfunction Backend::call_expression\n    \n    Pass in the calling (containing) Bfunction when invoking the Backend\n    method call_expression(), so as to handle the case where generation of\n    the call forces the creation of a temp var within the calling\n    function.\n    \n    Reviewed-on: https://go-review.googlesource.com/43270\n\nFrom-SVN: r247981", "tree": {"sha": "6ae18ad0b0ccac78b05dd11e1c152bafdda97e4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ae18ad0b0ccac78b05dd11e1c152bafdda97e4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da55a299c5159a622bcf04bf3f97707f5335bcad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da55a299c5159a622bcf04bf3f97707f5335bcad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da55a299c5159a622bcf04bf3f97707f5335bcad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da55a299c5159a622bcf04bf3f97707f5335bcad/comments", "author": {"login": "thanm", "id": 12280172, "node_id": "MDQ6VXNlcjEyMjgwMTcy", "avatar_url": "https://avatars.githubusercontent.com/u/12280172?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thanm", "html_url": "https://github.com/thanm", "followers_url": "https://api.github.com/users/thanm/followers", "following_url": "https://api.github.com/users/thanm/following{/other_user}", "gists_url": "https://api.github.com/users/thanm/gists{/gist_id}", "starred_url": "https://api.github.com/users/thanm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thanm/subscriptions", "organizations_url": "https://api.github.com/users/thanm/orgs", "repos_url": "https://api.github.com/users/thanm/repos", "events_url": "https://api.github.com/users/thanm/events{/privacy}", "received_events_url": "https://api.github.com/users/thanm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9dd19976b1b01fd5490fe9f3e840153db8a9610b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dd19976b1b01fd5490fe9f3e840153db8a9610b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dd19976b1b01fd5490fe9f3e840153db8a9610b"}], "stats": {"total": 36, "additions": 24, "deletions": 12}, "files": [{"sha": "59b4e6eeb6bb6977efddd5ecf4a96a8b8c9621be", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da55a299c5159a622bcf04bf3f97707f5335bcad/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da55a299c5159a622bcf04bf3f97707f5335bcad/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=da55a299c5159a622bcf04bf3f97707f5335bcad", "patch": "@@ -1,3 +1,7 @@\n+2017-05-12  Than McIntosh  <thanm@google.com>\n+\n+\t* go-gcc.cc (Gcc_backend::call_expression): Add caller parameter.\n+\n 2017-05-11  Ian Lance Taylor  <iant@google.com>\n \n \tPR go/64238"}, {"sha": "a7977fe03c134caea7cc56b8f972b4aa940d47ca", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da55a299c5159a622bcf04bf3f97707f5335bcad/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da55a299c5159a622bcf04bf3f97707f5335bcad/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=da55a299c5159a622bcf04bf3f97707f5335bcad", "patch": "@@ -348,7 +348,8 @@ class Gcc_backend : public Backend\n   array_index_expression(Bexpression* array, Bexpression* index, Location);\n \n   Bexpression*\n-  call_expression(Bexpression* fn, const std::vector<Bexpression*>& args,\n+  call_expression(Bfunction* caller, Bexpression* fn,\n+                  const std::vector<Bexpression*>& args,\n                   Bexpression* static_chain, Location);\n \n   Bexpression*\n@@ -1892,9 +1893,11 @@ Gcc_backend::array_index_expression(Bexpression* array, Bexpression* index,\n \n // Create an expression for a call to FN_EXPR with FN_ARGS.\n Bexpression*\n-Gcc_backend::call_expression(Bexpression* fn_expr,\n+Gcc_backend::call_expression(Bfunction*, // containing fcn for call\n+                             Bexpression* fn_expr,\n                              const std::vector<Bexpression*>& fn_args,\n-                             Bexpression* chain_expr, Location location)\n+                             Bexpression* chain_expr,\n+                             Location location)\n {\n   tree fn = fn_expr->get_tree();\n   if (fn == error_mark_node || TREE_TYPE(fn) == error_mark_node)"}, {"sha": "02219862b359a68b31aa631b3ef84a31490c6e3d", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da55a299c5159a622bcf04bf3f97707f5335bcad/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da55a299c5159a622bcf04bf3f97707f5335bcad/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=da55a299c5159a622bcf04bf3f97707f5335bcad", "patch": "@@ -1,4 +1,4 @@\n-d5bfa6cebb19a154cbfbc53f6e647d2ca7adef68\n+2f21020c9f61b31bd04d5b814aaa27bf976bf07a\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "9951a72e45cede3c8065ad73f225140a44102fbc", "filename": "gcc/go/gofrontend/backend.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da55a299c5159a622bcf04bf3f97707f5335bcad/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da55a299c5159a622bcf04bf3f97707f5335bcad/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fbackend.h?ref=da55a299c5159a622bcf04bf3f97707f5335bcad", "patch": "@@ -372,9 +372,11 @@ class Backend\n   virtual Bexpression*\n   array_index_expression(Bexpression* array, Bexpression* index, Location) = 0;\n \n-  // Create an expression for a call to FN with ARGS.\n+  // Create an expression for a call to FN with ARGS, taking place within\n+  // caller CALLER.\n   virtual Bexpression*\n-  call_expression(Bexpression* fn, const std::vector<Bexpression*>& args,\n+  call_expression(Bfunction *caller, Bexpression* fn,\n+                  const std::vector<Bexpression*>& args,\n \t\t  Bexpression* static_chain, Location) = 0;\n \n   // Return an expression that allocates SIZE bytes on the stack."}, {"sha": "c5e9a0b6a562eccf07e8c9b403ff90fda206ac6c", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da55a299c5159a622bcf04bf3f97707f5335bcad/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da55a299c5159a622bcf04bf3f97707f5335bcad/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=da55a299c5159a622bcf04bf3f97707f5335bcad", "patch": "@@ -10290,13 +10290,16 @@ Call_expression::do_get_backend(Translate_context* context)\n       bfn = gogo->backend()->convert_expression(bft, bfn, location);\n     }\n \n-  Bexpression* call = gogo->backend()->call_expression(bfn, fn_args,\n-\t\t\t\t\t\t       bclosure, location);\n+  Bfunction* bfunction = NULL;\n+  if (context->function())\n+    bfunction = context->function()->func_value()->get_decl();\n+  Bexpression* call = gogo->backend()->call_expression(bfunction, bfn,\n+                                                       fn_args, bclosure,\n+                                                       location);\n \n   if (this->results_ != NULL)\n     {\n       Bexpression* bcall_ref = this->call_result_ref(context);\n-      Bfunction* bfunction = context->function()->func_value()->get_decl();\n       Bstatement* assn_stmt =\n           gogo->backend()->assignment_statement(bfunction,\n                                                 bcall_ref, call, location);"}, {"sha": "b076b87b4911acf3cad3eaba2f297f5c1693660c", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da55a299c5159a622bcf04bf3f97707f5335bcad/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da55a299c5159a622bcf04bf3f97707f5335bcad/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=da55a299c5159a622bcf04bf3f97707f5335bcad", "patch": "@@ -708,8 +708,8 @@ Gogo::init_imports(std::vector<Bstatement*>& init_stmts, Bfunction *bfunction)\n       Bexpression* pfunc_code =\n           this->backend()->function_code_expression(pfunc, unknown_loc);\n       Bexpression* pfunc_call =\n-\tthis->backend()->call_expression(pfunc_code, empty_args,\n-\t\t\t\t\t NULL, unknown_loc);\n+          this->backend()->call_expression(bfunction, pfunc_code, empty_args,\n+                                           NULL, unknown_loc);\n       init_stmts.push_back(this->backend()->expression_statement(bfunction,\n                                                                  pfunc_call));\n     }\n@@ -1498,7 +1498,7 @@ Gogo::write_globals()\n       Bfunction* initfn = func->get_or_make_decl(this, *p);\n       Bexpression* func_code =\n           this->backend()->function_code_expression(initfn, func_loc);\n-      Bexpression* call = this->backend()->call_expression(func_code,\n+      Bexpression* call = this->backend()->call_expression(initfn, func_code,\n                                                            empty_args,\n \t\t\t\t\t\t\t   NULL, func_loc);\n       Bstatement* ist = this->backend()->expression_statement(initfn, call);"}]}