{"sha": "63b1a6ba010fa4972aac204b0cd61c2e51787ef7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNiMWE2YmEwMTBmYTQ5NzJhYWMyMDRiMGNkNjFjMmU1MTc4N2VmNw==", "commit": {"author": {"name": "Scott Snyder", "email": "snyder@fnal.gov", "date": "2003-02-25T06:27:10Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2003-02-25T06:27:10Z"}, "message": "re PR libstdc++/9811 (incorrect documentation for std::map::lower_bound, etc.)\n\n2003-02-25  Scott Snyder  <snyder@fnal.gov>\n\n\tPR libstdc++/9811\n\t* include/bits/stl_map.h (lower_bound, upper_bound, equal_range):\n\tCorrect documentation.\n\t* include/bits/stl_multimap.h (lower_bound, upper_bound,\n\tequal_range): Likewise.\n\nFrom-SVN: r63396", "tree": {"sha": "ac8e19e33ecfffa4314a290b4b61705a5e40c651", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac8e19e33ecfffa4314a290b4b61705a5e40c651"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63b1a6ba010fa4972aac204b0cd61c2e51787ef7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63b1a6ba010fa4972aac204b0cd61c2e51787ef7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63b1a6ba010fa4972aac204b0cd61c2e51787ef7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63b1a6ba010fa4972aac204b0cd61c2e51787ef7/comments", "author": null, "committer": null, "parents": [{"sha": "bacbf399101298a583c477bc068ec397cac42937", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bacbf399101298a583c477bc068ec397cac42937", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bacbf399101298a583c477bc068ec397cac42937"}], "stats": {"total": 106, "additions": 56, "deletions": 50}, "files": [{"sha": "acab22f60bd68ed10af8ea929d665060070a4ded", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63b1a6ba010fa4972aac204b0cd61c2e51787ef7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63b1a6ba010fa4972aac204b0cd61c2e51787ef7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=63b1a6ba010fa4972aac204b0cd61c2e51787ef7", "patch": "@@ -1,3 +1,11 @@\n+2003-02-25  Scott Snyder  <snyder@fnal.gov>\n+\n+\tPR libstdc++/9811\n+\t* include/bits/stl_map.h (lower_bound, upper_bound, equal_range):\n+\tCorrect documentation.\n+\t* include/bits/stl_multimap.h (lower_bound, upper_bound,\n+\tequal_range): Likewise.\n+\n 2003-02-24  Paolo Carlini  <pcarlini@unitus.it>\n \n \tPR libstdc++/9825"}, {"sha": "853ef3ec03278f99c8b7690c833a2c488429a0af", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 29, "deletions": 32, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63b1a6ba010fa4972aac204b0cd61c2e51787ef7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63b1a6ba010fa4972aac204b0cd61c2e51787ef7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=63b1a6ba010fa4972aac204b0cd61c2e51787ef7", "patch": "@@ -496,13 +496,13 @@ namespace std\n     /**\n      *  @brief Finds the beginning of a subsequence matching given key.\n      *  @param  x  Key of (key, value) pair to be located.\n-     *  @return  Iterator pointing to first element matching given key, or\n-     *           end() if not found.\n+     *  @return  Iterator pointing to first element equal to or greater\n+     *           than key, or end().\n      *\n-     *  This function is useful only with multimaps.  It returns the first\n-     *  element of a subsequence of elements that matches the given key.  If\n-     *  unsuccessful it returns an iterator pointing to the first element that\n-     *  has a greater value than given key or end() if no such element exists.\n+     *  This function returns the first element of a subsequence of elements\n+     *  that matches the given key.  If unsuccessful it returns an iterator\n+     *  pointing to the first element that has a greater value than given key\n+     *  or end() if no such element exists.\n     */\n     iterator\n     lower_bound(const key_type& __x) { return _M_t.lower_bound(__x); }\n@@ -511,33 +511,30 @@ namespace std\n      *  @brief Finds the beginning of a subsequence matching given key.\n      *  @param  x  Key of (key, value) pair to be located.\n      *  @return  Read-only (constant) iterator pointing to first element\n-     *           matching given key, or end() if not found.\n+     *           equal to or greater than key, or end().\n      *\n-     *  This function is useful only with multimaps.  It returns the first\n-     *  element of a subsequence of elements that matches the given key.  If\n-     *  unsuccessful the iterator will point to the next greatest element or,\n-     *  if no such greater element exists, to end().\n+     *  This function returns the first element of a subsequence of elements\n+     *  that matches the given key.  If unsuccessful it returns an iterator\n+     *  pointing to the first element that has a greater value than given key\n+     *  or end() if no such element exists.\n     */\n     const_iterator\n     lower_bound(const key_type& __x) const { return _M_t.lower_bound(__x); }\n   \n     /**\n      *  @brief Finds the end of a subsequence matching given key.\n      *  @param  x  Key of (key, value) pair to be located.\n-     *  @return Iterator pointing to last element matching given key.\n-     *\n-     *  This function only makes sense with multimaps.\n+     *  @return Iterator pointing to the first element\n+     *          greater than key, or end().\n     */\n     iterator\n     upper_bound(const key_type& __x) { return _M_t.upper_bound(__x); }\n   \n     /**\n      *  @brief Finds the end of a subsequence matching given key.\n      *  @param  x  Key of (key, value) pair to be located.\n-     *  @return  Read-only (constant) iterator pointing to last element matching\n-     *           given key.\n-     *\n-     *  This function only makes sense with multimaps.\n+     *  @return  Read-only (constant) iterator pointing to first iterator\n+     *           greater than key, or end().\n     */\n     const_iterator\n     upper_bound(const key_type& __x) const\n@@ -549,14 +546,14 @@ namespace std\n      *  @return  Pair of iterators that possibly points to the subsequence\n      *           matching given key.\n      *\n-     *  This function returns a pair of which the first\n-     *  element possibly points to the first element matching the given key\n-     *  and the second element possibly points to the last element matching the\n-     *  given key.  If unsuccessful the first element of the returned pair will\n-     *  contain an iterator pointing to the next greatest element or, if no such\n-     *  greater element exists, to end().\n+     *  This function is equivalent to\n+     *  @code\n+     *    std::make_pair(c.lower_bound(val),\n+     *                   c.upper_bound(val))\n+     *  @endcode\n+     *  (but is faster than making the calls separately).\n      *\n-     *  This function only makes sense for multimaps.\n+     *  This function probably only makes sense for multimaps.\n     */\n     pair<iterator,iterator>\n     equal_range(const key_type& __x)\n@@ -568,14 +565,14 @@ namespace std\n      *  @return  Pair of read-only (constant) iterators that possibly points to\n      *           the subsequence matching given key.\n      *\n-     *  This function returns a pair of which the first\n-     *  element possibly points to the first element matching the given key\n-     *  and the second element possibly points to the last element matching the\n-     *  given key.  If unsuccessful the first element of the returned pair will\n-     *  contain an iterator pointing to the next greatest element or, if no such\n-     *  a greater element exists, to end().\n+     *  This function is equivalent to\n+     *  @code\n+     *    std::make_pair(c.lower_bound(val),\n+     *                   c.upper_bound(val))\n+     *  @endcode\n+     *  (but is faster than making the calls separately).\n      *\n-     *  This function only makes sense for multimaps.\n+     *  This function probably only makes sense for multimaps.\n     */\n     pair<const_iterator,const_iterator>\n     equal_range(const key_type& __x) const"}, {"sha": "f35e3a21239003535984903f7f1e90e0e7bd12f5", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63b1a6ba010fa4972aac204b0cd61c2e51787ef7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63b1a6ba010fa4972aac204b0cd61c2e51787ef7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=63b1a6ba010fa4972aac204b0cd61c2e51787ef7", "patch": "@@ -479,8 +479,8 @@ namespace std\n     /**\n      *  @brief Finds the beginning of a subsequence matching given key.\n      *  @param  x  Key of (key, value) pair to be located.\n-     *  @return  Iterator pointing to first element matching given key, or\n-     *           end() if not found.\n+     *  @return  Iterator pointing to first element equal to or greater\n+     *           than key, or end().\n      *\n      *  This function returns the first element of a subsequence of elements\n      *  that matches the given key.  If unsuccessful it returns an iterator\n@@ -494,7 +494,7 @@ namespace std\n      *  @brief Finds the beginning of a subsequence matching given key.\n      *  @param  x  Key of (key, value) pair to be located.\n      *  @return  Read-only (constant) iterator pointing to first element\n-     *           matching given key, or end() if not found.\n+     *           equal to or greater than key, or end().\n      *\n      *  This function returns the first element of a subsequence of elements\n      *  that matches the given key.  If unsuccessful the iterator will point\n@@ -507,16 +507,17 @@ namespace std\n     /**\n      *  @brief Finds the end of a subsequence matching given key.\n      *  @param  x  Key of (key, value) pair to be located.\n-     *  @return Iterator pointing to last element matching given key.\n+     *  @return Iterator pointing to the first element\n+     *          greater than key, or end().\n     */\n     iterator\n     upper_bound(const key_type& __x) { return _M_t.upper_bound(__x); }\n   \n     /**\n      *  @brief Finds the end of a subsequence matching given key.\n      *  @param  x  Key of (key, value) pair to be located.\n-     *  @return  Read-only (constant) iterator pointing to last element matching\n-     *           given key.\n+     *  @return  Read-only (constant) iterator pointing to first iterator\n+     *           greater than key, or end().\n     */\n     const_iterator\n     upper_bound(const key_type& __x) const { return _M_t.upper_bound(__x); }\n@@ -527,12 +528,12 @@ namespace std\n      *  @return  Pair of iterators that possibly points to the subsequence\n      *           matching given key.\n      *\n-     *  This function returns a pair of which the first\n-     *  element possibly points to the first element matching the given key\n-     *  and the second element possibly points to the last element matching the\n-     *  given key.  If unsuccessful the first element of the returned pair will\n-     *  contain an iterator pointing to the next greatest element or, if no such\n-     *  greater element exists, to end().\n+     *  This function is equivalent to\n+     *  @code\n+     *    std::make_pair(c.lower_bound(val),\n+     *                   c.upper_bound(val))\n+     *  @endcode\n+     *  (but is faster than making the calls separately).\n     */\n     pair<iterator,iterator>\n     equal_range(const key_type& __x) { return _M_t.equal_range(__x); }\n@@ -543,12 +544,12 @@ namespace std\n      *  @return  Pair of read-only (constant) iterators that possibly points to\n      *           the subsequence matching given key.\n      *\n-     *  This function returns a pair of which the first\n-     *  element possibly points to the first element matching the given key\n-     *  and the second element possibly points to the last element matching the\n-     *  given key.  If unsuccessful the first element of the returned pair will\n-     *  contain an iterator pointing to the next greatest element or, if no such\n-     *  a greater element exists, to end().\n+     *  This function is equivalent to\n+     *  @code\n+     *    std::make_pair(c.lower_bound(val),\n+     *                   c.upper_bound(val))\n+     *  @endcode\n+     *  (but is faster than making the calls separately).\n     */\n     pair<const_iterator,const_iterator>\n     equal_range(const key_type& __x) const { return _M_t.equal_range(__x); }"}]}