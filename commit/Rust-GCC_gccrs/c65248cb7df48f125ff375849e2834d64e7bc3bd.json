{"sha": "c65248cb7df48f125ff375849e2834d64e7bc3bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY1MjQ4Y2I3ZGY0OGYxMjVmZjM3NTg0OWUyODM0ZDY0ZTdiYzNiZA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2016-09-09T16:59:43Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2016-09-09T16:59:43Z"}, "message": "Define TS 18661-1 type width macros in <limits.h> and <stdint.h>.\n\nTS 18661-1 defines <limits.h> and <stdint.h> macros for widths of\nstandard integer types and the typedefs defined in, or whose limits\nare defined in, <stdint.h>.  (The connection to the main\nfloating-point subject matter of TS 18661-1 is that these are intended\nto be used with the fromfp functions to convert from floating point to\ninteger types of any width in any rounding direction, though these\nmacros may be of more general use.)\n\nThis patch implements support for these macros in GCC's <limits.h> and\n<stdint.h>.  To avoid needing to implement fixincludes for system\nheaders where GCC wraps the system libc's <stdint.h> in hosted mode,\nthe test for the <stdint.h> macros uses -ffreestanding (I'll add the\nmacros to glibc's headers separately) - but as usual for new features\nin these headers, platforms (primarily OpenBSD) that use USER_H to\navoid using GCC's headers at all will have failures until the system\nheaders have the feature added or appropriate fixincludes are\nimplemented.\n\nThe header macros are implemented using appropriate new predefined\nmacros, with the code avoiding defining more such macros than\nnecessary (so one predefined macro suffices for corresponding signed\nand unsigned types, while no such predefined macros are needed for the\nexact-width types such as int8_t).\n\nBootstrapped with no regressions on x86_64-pc-linux-gnu.\n\ngcc:\n\t* doc/cpp.texi (__SCHAR_WIDTH__, __SHRT_WIDTH__, __INT_WIDTH__)\n\t(__LONG_WIDTH__, __LONG_LONG_WIDTH__, __PTRDIFF_WIDTH__)\n\t(__SIG_ATOMIC_WIDTH__, __SIZE_WIDTH__, __WCHAR_WIDTH__)\n\t(__WINT_WIDTH__, __INT_LEAST8_WIDTH__, __INT_LEAST16_WIDTH__)\n\t(__INT_LEAST32_WIDTH__, __INT_LEAST64_WIDTH__)\n\t(__INT_FAST8_WIDTH__, __INT_FAST16_WIDTH__, __INT_FAST32_WIDTH__)\n\t(__INT_FAST64_WIDTH__, __INTPTR_WIDTH__, __INTMAX_WIDTH__):\n\tDocument.\n\t* ginclude/stdint-gcc.h [__STDC_WANT_IEC_60559_BFP_EXT__]: Define\n\twidth macros from TS 18661-1.\n\t* glimits.h [__STDC_WANT_IEC_60559_BFP_EXT__]: Likewise.\n\ngcc/c-family:\n\t* c-cppbuiltin.c (builtin_define_type_width): New function.\n\t(builtin_define_stdint_macros, c_cpp_builtins): Define type width\n\tmacros.\n\ngcc/testsuite:\n\t* gcc.dg/limits-width-1.c, gcc.dg/stdint-width-1.c: New tests.\n\nFrom-SVN: r240048", "tree": {"sha": "203edf6dac268d0512d76ad0811fbc5af7098ad4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/203edf6dac268d0512d76ad0811fbc5af7098ad4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c65248cb7df48f125ff375849e2834d64e7bc3bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c65248cb7df48f125ff375849e2834d64e7bc3bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c65248cb7df48f125ff375849e2834d64e7bc3bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c65248cb7df48f125ff375849e2834d64e7bc3bd/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac376b15df246bc673b0e14074a4f19d39762480", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac376b15df246bc673b0e14074a4f19d39762480", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac376b15df246bc673b0e14074a4f19d39762480"}], "stats": {"total": 489, "additions": 482, "deletions": 7}, "files": [{"sha": "9818a8637676582f462095830843d21df6ae421b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65248cb7df48f125ff375849e2834d64e7bc3bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65248cb7df48f125ff375849e2834d64e7bc3bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c65248cb7df48f125ff375849e2834d64e7bc3bd", "patch": "@@ -1,3 +1,17 @@\n+2016-09-09  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* doc/cpp.texi (__SCHAR_WIDTH__, __SHRT_WIDTH__, __INT_WIDTH__)\n+\t(__LONG_WIDTH__, __LONG_LONG_WIDTH__, __PTRDIFF_WIDTH__)\n+\t(__SIG_ATOMIC_WIDTH__, __SIZE_WIDTH__, __WCHAR_WIDTH__)\n+\t(__WINT_WIDTH__, __INT_LEAST8_WIDTH__, __INT_LEAST16_WIDTH__)\n+\t(__INT_LEAST32_WIDTH__, __INT_LEAST64_WIDTH__)\n+\t(__INT_FAST8_WIDTH__, __INT_FAST16_WIDTH__, __INT_FAST32_WIDTH__)\n+\t(__INT_FAST64_WIDTH__, __INTPTR_WIDTH__, __INTMAX_WIDTH__):\n+\tDocument.\n+\t* ginclude/stdint-gcc.h [__STDC_WANT_IEC_60559_BFP_EXT__]: Define\n+\twidth macros from TS 18661-1.\n+\t* glimits.h [__STDC_WANT_IEC_60559_BFP_EXT__]: Likewise.\n+\n 2016-09-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/77516"}, {"sha": "331be699edb4424b29689dc380a4d330542eb8a0", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65248cb7df48f125ff375849e2834d64e7bc3bd/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65248cb7df48f125ff375849e2834d64e7bc3bd/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=c65248cb7df48f125ff375849e2834d64e7bc3bd", "patch": "@@ -1,3 +1,9 @@\n+2016-09-09  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-cppbuiltin.c (builtin_define_type_width): New function.\n+\t(builtin_define_stdint_macros, c_cpp_builtins): Define type width\n+\tmacros.\n+\n 2016-09-07  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-common.c (get_cpp_ttype_from_string_type): Handle being passed"}, {"sha": "33382766a974afb1087ddb121da2bd98304ef492", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 74, "deletions": 7, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65248cb7df48f125ff375849e2834d64e7bc3bd/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65248cb7df48f125ff375849e2834d64e7bc3bd/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=c65248cb7df48f125ff375849e2834d64e7bc3bd", "patch": "@@ -54,6 +54,7 @@ static void builtin_define_stdint_macros (void);\n static void builtin_define_constants (const char *, tree);\n static void builtin_define_type_max (const char *, tree);\n static void builtin_define_type_minmax (const char *, const char *, tree);\n+static void builtin_define_type_width (const char *, tree, tree);\n static void builtin_define_float_constants (const char *,\n \t\t\t\t\t    const char *,\n \t\t\t\t\t    const char *,\n@@ -435,9 +436,15 @@ builtin_define_stdint_macros (void)\n   builtin_define_constants (\"__INTMAX_C\", intmax_type_node);\n   builtin_define_type_max (\"__UINTMAX_MAX__\", uintmax_type_node);\n   builtin_define_constants (\"__UINTMAX_C\", uintmax_type_node);\n+  builtin_define_type_width (\"__INTMAX_WIDTH__\", intmax_type_node,\n+\t\t\t     uintmax_type_node);\n   if (sig_atomic_type_node)\n-    builtin_define_type_minmax (\"__SIG_ATOMIC_MIN__\", \"__SIG_ATOMIC_MAX__\",\n-\t\t\t\tsig_atomic_type_node);\n+    {\n+      builtin_define_type_minmax (\"__SIG_ATOMIC_MIN__\", \"__SIG_ATOMIC_MAX__\",\n+\t\t\t\t  sig_atomic_type_node);\n+      builtin_define_type_width (\"__SIG_ATOMIC_WIDTH__\", sig_atomic_type_node,\n+\t\t\t\t NULL_TREE);\n+    }\n   if (int8_type_node)\n     builtin_define_type_max (\"__INT8_MAX__\", int8_type_node);\n   if (int16_type_node)\n@@ -458,21 +465,32 @@ builtin_define_stdint_macros (void)\n     {\n       builtin_define_type_max (\"__INT_LEAST8_MAX__\", int_least8_type_node);\n       builtin_define_constants (\"__INT8_C\", int_least8_type_node);\n+      builtin_define_type_width (\"__INT_LEAST8_WIDTH__\", int_least8_type_node,\n+\t\t\t\t uint_least8_type_node);\n     }\n   if (int_least16_type_node)\n     {\n       builtin_define_type_max (\"__INT_LEAST16_MAX__\", int_least16_type_node);\n       builtin_define_constants (\"__INT16_C\", int_least16_type_node);\n+      builtin_define_type_width (\"__INT_LEAST16_WIDTH__\",\n+\t\t\t\t int_least16_type_node,\n+\t\t\t\t uint_least16_type_node);\n     }\n   if (int_least32_type_node)\n     {\n       builtin_define_type_max (\"__INT_LEAST32_MAX__\", int_least32_type_node);\n       builtin_define_constants (\"__INT32_C\", int_least32_type_node);\n+      builtin_define_type_width (\"__INT_LEAST32_WIDTH__\",\n+\t\t\t\t int_least32_type_node,\n+\t\t\t\t uint_least32_type_node);\n     }\n   if (int_least64_type_node)\n     {\n       builtin_define_type_max (\"__INT_LEAST64_MAX__\", int_least64_type_node);\n       builtin_define_constants (\"__INT64_C\", int_least64_type_node);\n+      builtin_define_type_width (\"__INT_LEAST64_WIDTH__\",\n+\t\t\t\t int_least64_type_node,\n+\t\t\t\t uint_least64_type_node);\n     }\n   if (uint_least8_type_node)\n     {\n@@ -495,13 +513,29 @@ builtin_define_stdint_macros (void)\n       builtin_define_constants (\"__UINT64_C\", uint_least64_type_node);\n     }\n   if (int_fast8_type_node)\n-    builtin_define_type_max (\"__INT_FAST8_MAX__\", int_fast8_type_node);\n+    {\n+      builtin_define_type_max (\"__INT_FAST8_MAX__\", int_fast8_type_node);\n+      builtin_define_type_width (\"__INT_FAST8_WIDTH__\", int_fast8_type_node,\n+\t\t\t\t uint_fast8_type_node);\n+    }\n   if (int_fast16_type_node)\n-    builtin_define_type_max (\"__INT_FAST16_MAX__\", int_fast16_type_node);\n+    {\n+      builtin_define_type_max (\"__INT_FAST16_MAX__\", int_fast16_type_node);\n+      builtin_define_type_width (\"__INT_FAST16_WIDTH__\", int_fast16_type_node,\n+\t\t\t\t uint_fast16_type_node);\n+    }\n   if (int_fast32_type_node)\n-    builtin_define_type_max (\"__INT_FAST32_MAX__\", int_fast32_type_node);\n+    {\n+      builtin_define_type_max (\"__INT_FAST32_MAX__\", int_fast32_type_node);\n+      builtin_define_type_width (\"__INT_FAST32_WIDTH__\", int_fast32_type_node,\n+\t\t\t\t uint_fast32_type_node);\n+    }\n   if (int_fast64_type_node)\n-    builtin_define_type_max (\"__INT_FAST64_MAX__\", int_fast64_type_node);\n+    {\n+      builtin_define_type_max (\"__INT_FAST64_MAX__\", int_fast64_type_node);\n+      builtin_define_type_width (\"__INT_FAST64_WIDTH__\", int_fast64_type_node,\n+\t\t\t\t uint_fast64_type_node);\n+    }\n   if (uint_fast8_type_node)\n     builtin_define_type_max (\"__UINT_FAST8_MAX__\", uint_fast8_type_node);\n   if (uint_fast16_type_node)\n@@ -511,7 +545,11 @@ builtin_define_stdint_macros (void)\n   if (uint_fast64_type_node)\n     builtin_define_type_max (\"__UINT_FAST64_MAX__\", uint_fast64_type_node);\n   if (intptr_type_node)\n-    builtin_define_type_max (\"__INTPTR_MAX__\", intptr_type_node);\n+    {\n+      builtin_define_type_max (\"__INTPTR_MAX__\", intptr_type_node);\n+      builtin_define_type_width (\"__INTPTR_WIDTH__\", intptr_type_node,\n+\t\t\t\t uintptr_type_node);\n+    }\n   if (uintptr_type_node)\n     builtin_define_type_max (\"__UINTPTR_MAX__\", uintptr_type_node);\n }\n@@ -946,6 +984,24 @@ c_cpp_builtins (cpp_reader *pfile)\n   builtin_define_type_max (\"__PTRDIFF_MAX__\", ptrdiff_type_node);\n   builtin_define_type_max (\"__SIZE_MAX__\", size_type_node);\n \n+  /* These are needed for TS 18661-1.  */\n+  builtin_define_type_width (\"__SCHAR_WIDTH__\", signed_char_type_node,\n+\t\t\t     unsigned_char_type_node);\n+  builtin_define_type_width (\"__SHRT_WIDTH__\", short_integer_type_node,\n+\t\t\t     short_unsigned_type_node);\n+  builtin_define_type_width (\"__INT_WIDTH__\", integer_type_node,\n+\t\t\t     unsigned_type_node);\n+  builtin_define_type_width (\"__LONG_WIDTH__\", long_integer_type_node,\n+\t\t\t     long_unsigned_type_node);\n+  builtin_define_type_width (\"__LONG_LONG_WIDTH__\",\n+\t\t\t     long_long_integer_type_node,\n+\t\t\t     long_long_unsigned_type_node);\n+  builtin_define_type_width (\"__WCHAR_WIDTH__\", underlying_wchar_type_node,\n+\t\t\t     NULL_TREE);\n+  builtin_define_type_width (\"__WINT_WIDTH__\", wint_type_node, NULL_TREE);\n+  builtin_define_type_width (\"__PTRDIFF_WIDTH__\", ptrdiff_type_node, NULL_TREE);\n+  builtin_define_type_width (\"__SIZE_WIDTH__\", size_type_node, NULL_TREE);\n+\n   if (c_dialect_cxx ())\n     for (i = 0; i < NUM_INT_N_ENTS; i ++)\n       if (int_n_enabled_p[i])\n@@ -1693,4 +1749,15 @@ builtin_define_type_minmax (const char *min_macro, const char *max_macro,\n     }\n }\n \n+/* Define WIDTH_MACRO for the width of TYPE.  If TYPE2 is not NULL,\n+   both types must have the same width.  */\n+\n+static void\n+builtin_define_type_width (const char *width_macro, tree type, tree type2)\n+{\n+  if (type2 != NULL_TREE)\n+    gcc_assert (TYPE_PRECISION (type) == TYPE_PRECISION (type2));\n+  builtin_define_with_int_value (width_macro, TYPE_PRECISION (type));\n+}\n+\n #include \"gt-c-family-c-cppbuiltin.h\""}, {"sha": "bd89a0eb53fd21e0ca7d74d0931b2d33752f5115", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65248cb7df48f125ff375849e2834d64e7bc3bd/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65248cb7df48f125ff375849e2834d64e7bc3bd/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=c65248cb7df48f125ff375849e2834d64e7bc3bd", "patch": "@@ -2247,6 +2247,33 @@ these macros directly; instead, include the appropriate headers.  Some\n of these macros may not be defined on particular systems if GCC does\n not provide a @file{stdint.h} header on those systems.\n \n+@item __SCHAR_WIDTH__\n+@itemx __SHRT_WIDTH__\n+@itemx __INT_WIDTH__\n+@itemx __LONG_WIDTH__\n+@itemx __LONG_LONG_WIDTH__\n+@itemx __PTRDIFF_WIDTH__\n+@itemx __SIG_ATOMIC_WIDTH__\n+@itemx __SIZE_WIDTH__\n+@itemx __WCHAR_WIDTH__\n+@itemx __WINT_WIDTH__\n+@itemx __INT_LEAST8_WIDTH__\n+@itemx __INT_LEAST16_WIDTH__\n+@itemx __INT_LEAST32_WIDTH__\n+@itemx __INT_LEAST64_WIDTH__\n+@itemx __INT_FAST8_WIDTH__\n+@itemx __INT_FAST16_WIDTH__\n+@itemx __INT_FAST32_WIDTH__\n+@itemx __INT_FAST64_WIDTH__\n+@itemx __INTPTR_WIDTH__\n+@itemx __INTMAX_WIDTH__\n+Defined to the widths of the corresponding types.  They exist to make\n+the implementations of @file{limits.h} and @file{stdint.h} make\n+correctly.  You should not use these macros directly; instead, include\n+the appropriate headers.  Some of these macros may not be defined on\n+particular systems if GCC does not provide a @file{stdint.h} header on\n+those systems.\n+\n @item __SIZEOF_INT__\n @itemx __SIZEOF_LONG__\n @itemx __SIZEOF_LONG_LONG__"}, {"sha": "610e118a97c694085e65a9dbc51aa132783b07b7", "filename": "gcc/ginclude/stdint-gcc.h", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65248cb7df48f125ff375849e2834d64e7bc3bd/gcc%2Fginclude%2Fstdint-gcc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65248cb7df48f125ff375849e2834d64e7bc3bd/gcc%2Fginclude%2Fstdint-gcc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fstdint-gcc.h?ref=c65248cb7df48f125ff375849e2834d64e7bc3bd", "patch": "@@ -260,4 +260,105 @@ typedef __UINTMAX_TYPE__ uintmax_t;\n #endif /* (!defined __cplusplus || __cplusplus >= 201103L\n \t   || defined __STDC_CONSTANT_MACROS) */\n \n+#ifdef __STDC_WANT_IEC_60559_BFP_EXT__\n+/* TS 18661-1 widths of integer types.  */\n+\n+#ifdef __INT8_TYPE__\n+# undef INT8_WIDTH\n+# define INT8_WIDTH 8\n+#endif\n+#ifdef __UINT8_TYPE__\n+# undef UINT8_WIDTH\n+# define UINT8_WIDTH 8\n+#endif\n+#ifdef __INT16_TYPE__\n+# undef INT16_WIDTH\n+# define INT16_WIDTH 16\n+#endif\n+#ifdef __UINT16_TYPE__\n+# undef UINT16_WIDTH\n+# define UINT16_WIDTH 16\n+#endif\n+#ifdef __INT32_TYPE__\n+# undef INT32_WIDTH\n+# define INT32_WIDTH 32\n+#endif\n+#ifdef __UINT32_TYPE__\n+# undef UINT32_WIDTH\n+# define UINT32_WIDTH 32\n+#endif\n+#ifdef __INT64_TYPE__\n+# undef INT64_WIDTH\n+# define INT64_WIDTH 64\n+#endif\n+#ifdef __UINT64_TYPE__\n+# undef UINT64_WIDTH\n+# define UINT64_WIDTH 64\n+#endif\n+\n+#undef INT_LEAST8_WIDTH\n+#define INT_LEAST8_WIDTH __INT_LEAST8_WIDTH__\n+#undef UINT_LEAST8_WIDTH\n+#define UINT_LEAST8_WIDTH __INT_LEAST8_WIDTH__\n+#undef INT_LEAST16_WIDTH\n+#define INT_LEAST16_WIDTH __INT_LEAST16_WIDTH__\n+#undef UINT_LEAST16_WIDTH\n+#define UINT_LEAST16_WIDTH __INT_LEAST16_WIDTH__\n+#undef INT_LEAST32_WIDTH\n+#define INT_LEAST32_WIDTH __INT_LEAST32_WIDTH__\n+#undef UINT_LEAST32_WIDTH\n+#define UINT_LEAST32_WIDTH __INT_LEAST32_WIDTH__\n+#undef INT_LEAST64_WIDTH\n+#define INT_LEAST64_WIDTH __INT_LEAST64_WIDTH__\n+#undef UINT_LEAST64_WIDTH\n+#define UINT_LEAST64_WIDTH __INT_LEAST64_WIDTH__\n+\n+#undef INT_FAST8_WIDTH\n+#define INT_FAST8_WIDTH __INT_FAST8_WIDTH__\n+#undef UINT_FAST8_WIDTH\n+#define UINT_FAST8_WIDTH __INT_FAST8_WIDTH__\n+#undef INT_FAST16_WIDTH\n+#define INT_FAST16_WIDTH __INT_FAST16_WIDTH__\n+#undef UINT_FAST16_WIDTH\n+#define UINT_FAST16_WIDTH __INT_FAST16_WIDTH__\n+#undef INT_FAST32_WIDTH\n+#define INT_FAST32_WIDTH __INT_FAST32_WIDTH__\n+#undef UINT_FAST32_WIDTH\n+#define UINT_FAST32_WIDTH __INT_FAST32_WIDTH__\n+#undef INT_FAST64_WIDTH\n+#define INT_FAST64_WIDTH __INT_FAST64_WIDTH__\n+#undef UINT_FAST64_WIDTH\n+#define UINT_FAST64_WIDTH __INT_FAST64_WIDTH__\n+\n+#ifdef __INTPTR_TYPE__\n+# undef INTPTR_WIDTH\n+# define INTPTR_WIDTH __INTPTR_WIDTH__\n+#endif\n+#ifdef __UINTPTR_TYPE__\n+# undef UINTPTR_WIDTH\n+# define UINTPTR_WIDTH __INTPTR_WIDTH__\n+#endif\n+\n+#undef INTMAX_WIDTH\n+#define INTMAX_WIDTH __INTMAX_WIDTH__\n+#undef UINTMAX_WIDTH\n+#define UINTMAX_WIDTH __INTMAX_WIDTH__\n+\n+#undef PTRDIFF_WIDTH\n+#define PTRDIFF_WIDTH __PTRDIFF_WIDTH__\n+\n+#undef SIG_ATOMIC_WIDTH\n+#define SIG_ATOMIC_WIDTH __SIG_ATOMIC_WIDTH__\n+\n+#undef SIZE_WIDTH\n+#define SIZE_WIDTH __SIZE_WIDTH__\n+\n+#undef WCHAR_WIDTH\n+#define WCHAR_WIDTH __WCHAR_WIDTH__\n+\n+#undef WINT_WIDTH\n+#define WINT_WIDTH __WINT_WIDTH__\n+\n+#endif\n+\n #endif /* _GCC_STDINT_H */"}, {"sha": "3967bfe5a0e658cc70bc3bde4ad40e0e4b3c13b1", "filename": "gcc/glimits.h", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65248cb7df48f125ff375849e2834d64e7bc3bd/gcc%2Fglimits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65248cb7df48f125ff375849e2834d64e7bc3bd/gcc%2Fglimits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglimits.h?ref=c65248cb7df48f125ff375849e2834d64e7bc3bd", "patch": "@@ -123,4 +123,30 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n # define ULONG_LONG_MAX (LONG_LONG_MAX * 2ULL + 1ULL)\n #endif\n \n+#ifdef __STDC_WANT_IEC_60559_BFP_EXT__\n+/* TS 18661-1 widths of integer types.  */\n+# undef CHAR_WIDTH\n+# define CHAR_WIDTH __SCHAR_WIDTH__\n+# undef SCHAR_WIDTH\n+# define SCHAR_WIDTH __SCHAR_WIDTH__\n+# undef UCHAR_WIDTH\n+# define UCHAR_WIDTH __SCHAR_WIDTH__\n+# undef SHRT_WIDTH\n+# define SHRT_WIDTH __SHRT_WIDTH__\n+# undef USHRT_WIDTH\n+# define USHRT_WIDTH __SHRT_WIDTH__\n+# undef INT_WIDTH\n+# define INT_WIDTH __INT_WIDTH__\n+# undef UINT_WIDTH\n+# define UINT_WIDTH __INT_WIDTH__\n+# undef LONG_WIDTH\n+# define LONG_WIDTH __LONG_WIDTH__\n+# undef ULONG_WIDTH\n+# define ULONG_WIDTH __LONG_WIDTH__\n+# undef LLONG_WIDTH\n+# define LLONG_WIDTH __LONG_LONG_WIDTH__\n+# undef ULLONG_WIDTH\n+# define ULLONG_WIDTH __LONG_LONG_WIDTH__\n+#endif\n+\n #endif /* _LIMITS_H___ */"}, {"sha": "00691b571170497c098370ce52e52846a50846f2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65248cb7df48f125ff375849e2834d64e7bc3bd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65248cb7df48f125ff375849e2834d64e7bc3bd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c65248cb7df48f125ff375849e2834d64e7bc3bd", "patch": "@@ -1,3 +1,7 @@\n+2016-09-09  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/limits-width-1.c, gcc.dg/stdint-width-1.c: New tests.\n+\n 2016-09-08  Steven G. Kargl  <kargl@gcc.gnu.org>\n \t    Louis Krupp      <lkrupp@gcc.gnu.org>\n "}, {"sha": "7a87014526cc5117992bc8d0253e993a0eb45900", "filename": "gcc/testsuite/gcc.dg/limits-width-1.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65248cb7df48f125ff375849e2834d64e7bc3bd/gcc%2Ftestsuite%2Fgcc.dg%2Flimits-width-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65248cb7df48f125ff375849e2834d64e7bc3bd/gcc%2Ftestsuite%2Fgcc.dg%2Flimits-width-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flimits-width-1.c?ref=c65248cb7df48f125ff375849e2834d64e7bc3bd", "patch": "@@ -0,0 +1,55 @@\n+/* Test TS 18661-1 width macros in <limits.h>.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11\" } */\n+\n+#define __STDC_WANT_IEC_60559_BFP_EXT__\n+#include <limits.h>\n+\n+#define CHECK_WIDTH(TYPE, MAX, WIDTH)\t\t\t\t\t\\\n+  _Static_assert ((MAX >> ((TYPE) -1 < 0 ? (WIDTH - 2) : (WIDTH - 1))) == 1, \\\n+\t\t  \"width must match type\")\n+\n+#ifndef CHAR_WIDTH\n+# error \"missing CHAR_WIDTH\"\n+#endif\n+CHECK_WIDTH (char, CHAR_MAX, CHAR_WIDTH);\n+#ifndef SCHAR_WIDTH\n+# error \"missing SCHAR_WIDTH\"\n+#endif\n+CHECK_WIDTH (signed char, SCHAR_MAX, SCHAR_WIDTH);\n+#ifndef UCHAR_WIDTH\n+# error \"missing UCHAR_WIDTH\"\n+#endif\n+CHECK_WIDTH (unsigned char, UCHAR_MAX, UCHAR_WIDTH);\n+#ifndef SHRT_WIDTH\n+# error \"missing SHRT_WIDTH\"\n+#endif\n+CHECK_WIDTH (signed short, SHRT_MAX, SHRT_WIDTH);\n+#ifndef USHRT_WIDTH\n+# error \"missing USHRT_WIDTH\"\n+#endif\n+CHECK_WIDTH (unsigned short, USHRT_MAX, USHRT_WIDTH);\n+#ifndef INT_WIDTH\n+# error \"missing INT_WIDTH\"\n+#endif\n+CHECK_WIDTH (signed int, INT_MAX, INT_WIDTH);\n+#ifndef UINT_WIDTH\n+# error \"missing UINT_WIDTH\"\n+#endif\n+CHECK_WIDTH (unsigned int, UINT_MAX, UINT_WIDTH);\n+#ifndef LONG_WIDTH\n+# error \"missing LONG_WIDTH\"\n+#endif\n+CHECK_WIDTH (signed long, LONG_MAX, LONG_WIDTH);\n+#ifndef ULONG_WIDTH\n+# error \"missing ULONG_WIDTH\"\n+#endif\n+CHECK_WIDTH (unsigned long, ULONG_MAX, ULONG_WIDTH);\n+#ifndef LLONG_WIDTH\n+# error \"missing LLONG_WIDTH\"\n+#endif\n+CHECK_WIDTH (signed long long, LLONG_MAX, LLONG_WIDTH);\n+#ifndef ULLONG_WIDTH\n+# error \"missing ULLONG_WIDTH\"\n+#endif\n+CHECK_WIDTH (unsigned long long, ULLONG_MAX, ULLONG_WIDTH);"}, {"sha": "a28feee38db0a3766cf5e21e160b3aac7ccffad0", "filename": "gcc/testsuite/gcc.dg/stdint-width-1.c", "status": "added", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65248cb7df48f125ff375849e2834d64e7bc3bd/gcc%2Ftestsuite%2Fgcc.dg%2Fstdint-width-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65248cb7df48f125ff375849e2834d64e7bc3bd/gcc%2Ftestsuite%2Fgcc.dg%2Fstdint-width-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstdint-width-1.c?ref=c65248cb7df48f125ff375849e2834d64e7bc3bd", "patch": "@@ -0,0 +1,175 @@\n+/* Test TS 18661-1 width macros in <stdint.h>.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -ffreestanding\" } */\n+\n+#include <stddef.h>\n+#define __STDC_WANT_IEC_60559_BFP_EXT__\n+#include <stdint.h>\n+#ifndef SIGNAL_SUPPRESS\n+#include <signal.h>\n+#endif\n+typedef __WINT_TYPE__ wint_t;\n+\n+#define CHECK_WIDTH(TYPE, MAX, WIDTH)\t\t\t\t\t\\\n+  _Static_assert ((MAX >> ((TYPE) -1 < 0 ? (WIDTH - 2) : (WIDTH - 1))) == 1, \\\n+\t\t  \"width must match type\")\n+\n+#ifdef INT8_MAX\n+# ifndef INT8_WIDTH\n+#  error \"missing INT8_WIDTH\"\n+# endif\n+CHECK_WIDTH (int8_t, INT8_MAX, INT8_WIDTH);\n+#endif\n+#ifdef INT16_MAX\n+# ifndef INT16_WIDTH\n+#  error \"missing INT16_WIDTH\"\n+# endif\n+CHECK_WIDTH (int16_t, INT16_MAX, INT16_WIDTH);\n+#endif\n+#ifdef INT32_MAX\n+# ifndef INT32_WIDTH\n+#  error \"missing INT32_WIDTH\"\n+# endif\n+CHECK_WIDTH (int32_t, INT32_MAX, INT32_WIDTH);\n+#endif\n+#ifdef INT64_MAX\n+# ifndef INT64_WIDTH\n+#  error \"missing INT64_WIDTH\"\n+# endif\n+CHECK_WIDTH (int64_t, INT64_MAX, INT64_WIDTH);\n+#endif\n+#ifdef UINT8_MAX\n+# ifndef UINT8_WIDTH\n+#  error \"missing UINT8_WIDTH\"\n+# endif\n+CHECK_WIDTH (uint8_t, UINT8_MAX, UINT8_WIDTH);\n+#endif\n+#ifdef UINT16_MAX\n+# ifndef UINT16_WIDTH\n+#  error \"missing UINT16_WIDTH\"\n+# endif\n+CHECK_WIDTH (uint16_t, UINT16_MAX, UINT16_WIDTH);\n+#endif\n+#ifdef UINT32_MAX\n+# ifndef UINT32_WIDTH\n+#  error \"missing UINT32_WIDTH\"\n+# endif\n+CHECK_WIDTH (uint32_t, UINT32_MAX, UINT32_WIDTH);\n+#endif\n+#ifdef UINT64_MAX\n+# ifndef UINT64_WIDTH\n+#  error \"missing UINT64_WIDTH\"\n+# endif\n+CHECK_WIDTH (uint64_t, UINT64_MAX, UINT64_WIDTH);\n+#endif\n+\n+#ifndef INT_LEAST8_WIDTH\n+# error \"missing INT_LEAST8_WIDTH\"\n+#endif\n+CHECK_WIDTH (int_least8_t, INT_LEAST8_MAX, INT_LEAST8_WIDTH);\n+#ifndef INT_LEAST16_WIDTH\n+# error \"missing INT_LEAST16_WIDTH\"\n+#endif\n+CHECK_WIDTH (int_least16_t, INT_LEAST16_MAX, INT_LEAST16_WIDTH);\n+#ifndef INT_LEAST32_WIDTH\n+# error \"missing INT_LEAST32_WIDTH\"\n+#endif\n+CHECK_WIDTH (int_least32_t, INT_LEAST32_MAX, INT_LEAST32_WIDTH);\n+#ifndef INT_LEAST64_WIDTH\n+# error \"missing INT_LEAST64_WIDTH\"\n+#endif\n+CHECK_WIDTH (int_least64_t, INT_LEAST64_MAX, INT_LEAST64_WIDTH);\n+#ifndef INT_LEAST8_WIDTH\n+# error \"missing INT_LEAST8_WIDTH\"\n+#endif\n+CHECK_WIDTH (uint_least8_t, UINT_LEAST8_MAX, UINT_LEAST8_WIDTH);\n+#ifndef UINT_LEAST16_WIDTH\n+# error \"missing UINT_LEAST16_WIDTH\"\n+#endif\n+CHECK_WIDTH (uint_least16_t, UINT_LEAST16_MAX, UINT_LEAST16_WIDTH);\n+#ifndef UINT_LEAST32_WIDTH\n+# error \"missing UINT_LEAST32_WIDTH\"\n+#endif\n+CHECK_WIDTH (uint_least32_t, UINT_LEAST32_MAX, UINT_LEAST32_WIDTH);\n+#ifndef UINT_LEAST64_WIDTH\n+# error \"missing UINT_LEAST64_WIDTH\"\n+#endif\n+CHECK_WIDTH (uint_least64_t, UINT_LEAST64_MAX, UINT_LEAST64_WIDTH);\n+\n+#ifndef INT_FAST8_WIDTH\n+# error \"missing INT_FAST8_WIDTH\"\n+#endif\n+CHECK_WIDTH (int_fast8_t, INT_FAST8_MAX, INT_FAST8_WIDTH);\n+#ifndef INT_FAST16_WIDTH\n+# error \"missing INT_FAST16_WIDTH\"\n+#endif\n+CHECK_WIDTH (int_fast16_t, INT_FAST16_MAX, INT_FAST16_WIDTH);\n+#ifndef INT_FAST32_WIDTH\n+# error \"missing INT_FAST32_WIDTH\"\n+#endif\n+CHECK_WIDTH (int_fast32_t, INT_FAST32_MAX, INT_FAST32_WIDTH);\n+#ifndef INT_FAST64_WIDTH\n+# error \"missing INT_FAST64_WIDTH\"\n+#endif\n+CHECK_WIDTH (int_fast64_t, INT_FAST64_MAX, INT_FAST64_WIDTH);\n+#ifndef INT_FAST8_WIDTH\n+# error \"missing INT_FAST8_WIDTH\"\n+#endif\n+CHECK_WIDTH (uint_fast8_t, UINT_FAST8_MAX, UINT_FAST8_WIDTH);\n+#ifndef UINT_FAST16_WIDTH\n+# error \"missing UINT_FAST16_WIDTH\"\n+#endif\n+CHECK_WIDTH (uint_fast16_t, UINT_FAST16_MAX, UINT_FAST16_WIDTH);\n+#ifndef UINT_FAST32_WIDTH\n+# error \"missing UINT_FAST32_WIDTH\"\n+#endif\n+CHECK_WIDTH (uint_fast32_t, UINT_FAST32_MAX, UINT_FAST32_WIDTH);\n+#ifndef UINT_FAST64_WIDTH\n+# error \"missing UINT_FAST64_WIDTH\"\n+#endif\n+CHECK_WIDTH (uint_fast64_t, UINT_FAST64_MAX, UINT_FAST64_WIDTH);\n+\n+#ifdef INTPTR_MAX\n+# ifndef INTPTR_WIDTH\n+#  error \"missing INTPTR_WIDTH\"\n+# endif\n+CHECK_WIDTH (intptr_t, INTPTR_MAX, INTPTR_WIDTH);\n+#endif\n+#ifdef UINTPTR_MAX\n+# ifndef UINTPTR_WIDTH\n+#  error \"missing UINTPTR_WIDTH\"\n+# endif\n+CHECK_WIDTH (uintptr_t, UINTPTR_MAX, UINTPTR_WIDTH);\n+#endif\n+\n+#ifndef INTMAX_WIDTH\n+# error \"missing INTMAX_WIDTH\"\n+#endif\n+CHECK_WIDTH (intmax_t, INTMAX_MAX, INTMAX_WIDTH);\n+#ifndef UINTMAX_WIDTH\n+# error \"missing UINTMAX_WIDTH\"\n+#endif\n+CHECK_WIDTH (uintmax_t, UINTMAX_MAX, UINTMAX_WIDTH);\n+\n+#ifndef PTRDIFF_WIDTH\n+# error \"missing PTRDIFF_WIDTH\"\n+#endif\n+CHECK_WIDTH (ptrdiff_t, PTRDIFF_MAX, PTRDIFF_WIDTH);\n+#ifndef SIGNAL_SUPPRESS\n+# ifndef SIG_ATOMIC_WIDTH\n+#  error \"missing SIG_ATOMIC_WIDTH\"\n+# endif\n+CHECK_WIDTH (sig_atomic_t, SIG_ATOMIC_MAX, SIG_ATOMIC_WIDTH);\n+#endif\n+#ifndef SIZE_WIDTH\n+# error \"missing SIZE_WIDTH\"\n+#endif\n+CHECK_WIDTH (size_t, SIZE_MAX, SIZE_WIDTH);\n+#ifndef WCHAR_WIDTH\n+# error \"missing WCHAR_WIDTH\"\n+#endif\n+CHECK_WIDTH (wchar_t, WCHAR_MAX, WCHAR_WIDTH);\n+#ifndef WINT_WIDTH\n+# error \"missing WINT_WIDTH\"\n+#endif\n+CHECK_WIDTH (wint_t, WINT_MAX, WINT_WIDTH);"}]}