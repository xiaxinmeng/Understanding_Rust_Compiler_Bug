{"sha": "076a7055bbc9d840bf675beae019246ef7a93f3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc2YTcwNTViYmM5ZDg0MGJmNjc1YmVhZTAxOTI0NmVmN2E5M2YzZQ==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-05-25T13:56:13Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-05-25T13:56:13Z"}, "message": "objc-act.c (objc_build_constructor): Take a VEC instead of a tree.\n\n\t* objc-act.c (objc_build_constructor): Take a VEC instead of a tree.\n\tUse build_constructor instead of build_constructor_from_list.\n\t(objc_build_string_object): Build a VEC argument for\n\tobjc_build_constructor.\n\t(init_def_list): Likewise.\n\t(init_objc_symtab): Likewise.\n\t(init_module_descriptor): Likewise.\n\t(generate_static_references): Likewise.\n\t(build_selector_translation_table): Likewise.\n\t(build_descriptor_table_initializer): Likewise.\n\t(generate_descriptor_table): Likewise.\n\t(build_protocol_initializer): Likewise.\n\t(build_ivar_list_initializer): Likewise.\n\t(generate_ivars_list): Likewise.\n\t(build_dispatch_table_initializer): Likewise.\n\t(generate_dispatch_table): Likewise.\n\t(generate_protocol_list): Likewise.\n\t(build_category_initializer): Likewise.\n\t(build_shared_structure_initializer): Likewise.\n\t(generate_objc_image_info): Likewise.\n\nFrom-SVN: r159821", "tree": {"sha": "92df6041a60bcc29a0ead6b3ad41d52c94af2081", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92df6041a60bcc29a0ead6b3ad41d52c94af2081"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/076a7055bbc9d840bf675beae019246ef7a93f3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/076a7055bbc9d840bf675beae019246ef7a93f3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/076a7055bbc9d840bf675beae019246ef7a93f3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/076a7055bbc9d840bf675beae019246ef7a93f3e/comments", "author": null, "committer": null, "parents": [{"sha": "1ab55d697053c12ee2d9a1227c87a264c648e5da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ab55d697053c12ee2d9a1227c87a264c648e5da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ab55d697053c12ee2d9a1227c87a264c648e5da"}], "stats": {"total": 421, "additions": 218, "deletions": 203}, "files": [{"sha": "c78ca3753971da020f01ff9e907d4761dc35cac2", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076a7055bbc9d840bf675beae019246ef7a93f3e/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076a7055bbc9d840bf675beae019246ef7a93f3e/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=076a7055bbc9d840bf675beae019246ef7a93f3e", "patch": "@@ -1,3 +1,26 @@\n+2010-05-25  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* objc-act.c (objc_build_constructor): Take a VEC instead of a tree.\n+\tUse build_constructor instead of build_constructor_from_list.\n+\t(objc_build_string_object): Build a VEC argument for\n+\tobjc_build_constructor.\n+\t(init_def_list): Likewise.\n+\t(init_objc_symtab): Likewise.\n+\t(init_module_descriptor): Likewise.\n+\t(generate_static_references): Likewise.\n+\t(build_selector_translation_table): Likewise.\n+\t(build_descriptor_table_initializer): Likewise.\n+\t(generate_descriptor_table): Likewise.\n+\t(build_protocol_initializer): Likewise.\n+\t(build_ivar_list_initializer): Likewise.\n+\t(generate_ivars_list): Likewise.\n+\t(build_dispatch_table_initializer): Likewise.\n+\t(generate_dispatch_table): Likewise.\n+\t(generate_protocol_list): Likewise.\n+\t(build_category_initializer): Likewise.\n+\t(build_shared_structure_initializer): Likewise.\n+\t(generate_objc_image_info): Likewise.\n+\n 2010-04-30  Iain Sandoe  <iains@gcc.gnu.org>\n \n \tPR objc++/32052"}, {"sha": "db5862f1a5b903635da221bb69f4db58ce4f5900", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 195, "deletions": 203, "changes": 398, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076a7055bbc9d840bf675beae019246ef7a93f3e/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076a7055bbc9d840bf675beae019246ef7a93f3e/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=076a7055bbc9d840bf675beae019246ef7a93f3e", "patch": "@@ -151,7 +151,7 @@ static void finish_objc (void);\n \n /* Code generation.  */\n \n-static tree objc_build_constructor (tree, tree);\n+static tree objc_build_constructor (tree, VEC(constructor_elt,gc) *);\n static tree build_objc_method_call (location_t, int, tree, tree, tree, tree);\n static tree get_proto_encoding (tree);\n static tree lookup_interface (tree);\n@@ -1937,7 +1937,7 @@ string_eq (const void *ptr1, const void *ptr2)\n tree\n objc_build_string_object (tree string)\n {\n-  tree initlist, constructor, constant_string_class;\n+  tree constructor, constant_string_class;\n   int length;\n   tree fields, addr;\n   struct string_descriptor *desc, key;\n@@ -1988,27 +1988,25 @@ objc_build_string_object (tree string)\n   if (!desc)\n     {\n       tree var;\n+      VEC(constructor_elt,gc) *v = NULL;\n       *loc = desc = GGC_NEW (struct string_descriptor);\n       desc->literal = string;\n \n       /* GNU:    (NXConstantString *) & ((__builtin_ObjCString) { NULL, string, length })  */\n       /* NeXT:   (NSConstantString *) & ((__builtin_ObjCString) { isa, string, length })   */\n       fields = TYPE_FIELDS (internal_const_str_type);\n-      initlist\n-\t= build_tree_list (fields,\n-\t\t\t   flag_next_runtime\n-\t\t\t   ? build_unary_op (input_location,\n-\t\t\t\t\t     ADDR_EXPR, string_class_decl, 0)\n-\t\t\t   : build_int_cst (NULL_TREE, 0));\n+      CONSTRUCTOR_APPEND_ELT (v, fields,\n+\t\t\t      flag_next_runtime\n+\t\t\t      ? build_unary_op (input_location,\n+\t\t\t\t\t\tADDR_EXPR, string_class_decl, 0)\n+\t\t\t      : build_int_cst (NULL_TREE, 0));\n       fields = TREE_CHAIN (fields);\n-      initlist = tree_cons (fields, build_unary_op (input_location,\n-\t\t\t\t\t\t    ADDR_EXPR, string, 1),\n-\t\t\t    initlist);\n+      CONSTRUCTOR_APPEND_ELT (v, fields,\n+\t\t\t      build_unary_op (input_location,\n+\t\t\t\t\t      ADDR_EXPR, string, 1));\n       fields = TREE_CHAIN (fields);\n-      initlist = tree_cons (fields, build_int_cst (NULL_TREE, length),\n- \t\t\t    initlist);\n-      constructor = objc_build_constructor (internal_const_str_type,\n-\t\t\t\t\t    nreverse (initlist));\n+      CONSTRUCTOR_APPEND_ELT (v, fields, build_int_cst (NULL_TREE, length));\n+      constructor = objc_build_constructor (internal_const_str_type, v);\n \n       if (!flag_next_runtime)\n \tconstructor\n@@ -2077,9 +2075,9 @@ objc_add_static_instance (tree constructor, tree class_decl)\n    with type TYPE and elements ELTS.  */\n \n static tree\n-objc_build_constructor (tree type, tree elts)\n+objc_build_constructor (tree type, VEC(constructor_elt,gc) *elts)\n {\n-  tree constructor = build_constructor_from_list (type, elts);\n+  tree constructor = build_constructor (type, elts);\n \n   TREE_CONSTANT (constructor) = 1;\n   TREE_STATIC (constructor) = 1;\n@@ -2156,8 +2154,9 @@ build_objc_symtab_template (void)\n static tree\n init_def_list (tree type)\n {\n-  tree expr, initlist = NULL_TREE;\n+  tree expr;\n   struct imp_entry *impent;\n+  VEC(constructor_elt,gc) *v = NULL;\n \n   if (imp_count)\n     for (impent = imp_list; impent; impent = impent->next)\n@@ -2166,7 +2165,7 @@ init_def_list (tree type)\n \t  {\n \t    expr = build_unary_op (input_location,\n \t\t\t\t   ADDR_EXPR, impent->class_decl, 0);\n-\t    initlist = tree_cons (NULL_TREE, expr, initlist);\n+\t    CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, expr);\n \t  }\n       }\n \n@@ -2177,58 +2176,58 @@ init_def_list (tree type)\n \t  {\n \t    expr = build_unary_op (input_location,\n \t\t\t\t   ADDR_EXPR, impent->class_decl, 0);\n-\t    initlist = tree_cons (NULL_TREE, expr, initlist);\n+\t    CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, expr);\n \t  }\n       }\n \n   if (!flag_next_runtime)\n     {\n       /* statics = { ..., _OBJC_STATIC_INSTANCES, ... }  */\n-      tree expr;\n-\n       if (static_instances_decl)\n \texpr = build_unary_op (input_location,\n \t\t\t       ADDR_EXPR, static_instances_decl, 0);\n       else\n \texpr = build_int_cst (NULL_TREE, 0);\n \n-      initlist = tree_cons (NULL_TREE, expr, initlist);\n+      CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, expr);\n     }\n \n-  return objc_build_constructor (type, nreverse (initlist));\n+  return objc_build_constructor (type, v);\n }\n \n /* Construct the initial value for all of _objc_symtab.  */\n \n static tree\n init_objc_symtab (tree type)\n {\n-  tree initlist;\n+  VEC(constructor_elt,gc) *v = NULL;\n \n   /* sel_ref_cnt = { ..., 5, ... } */\n \n-  initlist = build_tree_list (NULL_TREE,\n-\t\t\t      build_int_cst (long_integer_type_node, 0));\n+  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE,\n+\t\t\t  build_int_cst (long_integer_type_node, 0));\n \n   /* refs = { ..., _OBJC_SELECTOR_TABLE, ... } */\n \n   if (flag_next_runtime || ! sel_ref_chain)\n-    initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), initlist);\n+    CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, build_int_cst (NULL_TREE, 0));\n   else\n-    initlist\n-      = tree_cons (NULL_TREE,\n-\t\t   convert (build_pointer_type (objc_selector_type),\n-\t\t\t    build_unary_op (input_location, ADDR_EXPR,\n-\t\t\t\t\t    UOBJC_SELECTOR_TABLE_decl, 1)),\n-\t\t   initlist);\n+    {\n+      tree expr = build_unary_op (input_location, ADDR_EXPR,\n+\t\t\t\t  UOBJC_SELECTOR_TABLE_decl, 1);\n+\n+      CONSTRUCTOR_APPEND_ELT (v, NULL_TREE,\n+\t\t\t      convert (build_pointer_type (objc_selector_type),\n+\t\t\t\t       expr));\n+    }\n \n   /* cls_def_cnt = { ..., 5, ... } */\n \n-  initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, imp_count), initlist);\n+  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, build_int_cst (NULL_TREE, imp_count));\n \n   /* cat_def_cnt = { ..., 5, ... } */\n \n-  initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, cat_count), initlist);\n+  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, build_int_cst (NULL_TREE, cat_count));\n \n   /* cls_def = { ..., { &Foo, &Bar, ...}, ... } */\n \n@@ -2238,11 +2237,10 @@ init_objc_symtab (tree type)\n       tree field = TYPE_FIELDS (type);\n       field = TREE_CHAIN (TREE_CHAIN (TREE_CHAIN (TREE_CHAIN (field))));\n \n-      initlist = tree_cons (NULL_TREE, init_def_list (TREE_TYPE (field)),\n-\t\t\t    initlist);\n+      CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, init_def_list (TREE_TYPE (field)));\n     }\n \n-  return objc_build_constructor (type, nreverse (initlist));\n+  return objc_build_constructor (type, v);\n }\n \n /* Generate forward declarations for metadata such as\n@@ -2303,24 +2301,25 @@ generate_objc_symtab_decl (void)\n static tree\n init_module_descriptor (tree type)\n {\n-  tree initlist, expr;\n+  tree expr;\n+  VEC(constructor_elt,gc) *v = NULL;\n \n   /* version = { 1, ... } */\n \n   expr = build_int_cst (long_integer_type_node, OBJC_VERSION);\n-  initlist = build_tree_list (NULL_TREE, expr);\n+  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, expr);\n \n   /* size = { ..., sizeof (struct _objc_module), ... } */\n \n   expr = convert (long_integer_type_node,\n \t\t  size_in_bytes (objc_module_template));\n-  initlist = tree_cons (NULL_TREE, expr, initlist);\n+  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, expr);\n \n   /* Don't provide any file name for security reasons. */\n   /* name = { ..., \"\", ... } */\n \n   expr = add_objc_string (get_identifier (\"\"), class_names);\n-  initlist = tree_cons (NULL_TREE, expr, initlist);\n+  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, expr);\n \n   /* symtab = { ..., _OBJC_SYMBOLS, ... } */\n \n@@ -2329,9 +2328,9 @@ init_module_descriptor (tree type)\n \t\t\t   ADDR_EXPR, UOBJC_SYMBOLS_decl, 0);\n   else\n     expr = build_int_cst (NULL_TREE, 0);\n-  initlist = tree_cons (NULL_TREE, expr, initlist);\n+  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, expr);\n \n-  return objc_build_constructor (type, nreverse (initlist));\n+  return objc_build_constructor (type, v);\n }\n \n /* Write out the data structures to describe Objective C classes defined.\n@@ -2489,19 +2488,22 @@ get_objc_string_decl (tree ident, enum string_section section)\n static void\n generate_static_references (void)\n {\n-  tree decls = NULL_TREE, expr = NULL_TREE;\n-  tree class_name, klass, decl, initlist;\n+  tree expr = NULL_TREE;\n+  tree class_name, klass, decl;\n   tree cl_chain, in_chain, type\n     = build_array_type (build_pointer_type (void_type_node), NULL_TREE);\n   int num_inst, num_class;\n   char buf[256];\n+  VEC(constructor_elt,gc) *decls = NULL;\n \n   if (flag_next_runtime)\n     abort ();\n \n   for (cl_chain = objc_static_instances, num_class = 0;\n        cl_chain; cl_chain = TREE_CHAIN (cl_chain), num_class++)\n     {\n+      VEC(constructor_elt,gc) *v = NULL;\n+\n       for (num_inst = 0, in_chain = TREE_PURPOSE (cl_chain);\n \t   in_chain; num_inst++, in_chain = TREE_CHAIN (in_chain));\n \n@@ -2511,31 +2513,31 @@ generate_static_references (void)\n       /* Output {class_name, ...}.  */\n       klass = TREE_VALUE (cl_chain);\n       class_name = get_objc_string_decl (OBJC_TYPE_NAME (klass), class_names);\n-      initlist = build_tree_list (NULL_TREE,\n-\t\t\t\t  build_unary_op (input_location, \n-\t\t\t\t\t\t  ADDR_EXPR, class_name, 1));\n+      CONSTRUCTOR_APPEND_ELT (v, NULL_TREE,\n+\t\t\t      build_unary_op (input_location, \n+\t\t\t\t\t      ADDR_EXPR, class_name, 1));\n \n       /* Output {..., instance, ...}.  */\n       for (in_chain = TREE_PURPOSE (cl_chain);\n \t   in_chain; in_chain = TREE_CHAIN (in_chain))\n \t{\n \t  expr = build_unary_op (input_location,\n \t\t\t\t ADDR_EXPR, TREE_VALUE (in_chain), 1);\n-\t  initlist = tree_cons (NULL_TREE, expr, initlist);\n+\t  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, expr);\n \t}\n \n       /* Output {..., NULL}.  */\n-      initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), initlist);\n+      CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, build_int_cst (NULL_TREE, 0));\n \n-      expr = objc_build_constructor (TREE_TYPE (decl), nreverse (initlist));\n+      expr = objc_build_constructor (TREE_TYPE (decl), v);\n       finish_var_decl (decl, expr);\n-      decls\n-\t= tree_cons (NULL_TREE, build_unary_op (input_location,\n-\t\t\t\t\t\tADDR_EXPR, decl, 1), decls);\n+      CONSTRUCTOR_APPEND_ELT (decls, NULL_TREE,\n+\t\t\t      build_unary_op (input_location,\n+\t\t\t\t\t      ADDR_EXPR, decl, 1));\n     }\n \n-  decls = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), decls);\n-  expr = objc_build_constructor (type, nreverse (decls));\n+  CONSTRUCTOR_APPEND_ELT (decls, NULL_TREE, build_int_cst (NULL_TREE, 0));\n+  expr = objc_build_constructor (type, decls);\n   static_instances_decl = start_var_decl (type, \"_OBJC_STATIC_INSTANCES\");\n   finish_var_decl (static_instances_decl, expr);\n }\n@@ -2582,9 +2584,10 @@ build_selector (tree ident)\n static void\n build_selector_translation_table (void)\n {\n-  tree chain, initlist = NULL_TREE;\n+  tree chain;\n   int offset = 0;\n   tree decl = NULL_TREE;\n+  VEC(constructor_elt,gc) *inits = NULL;\n \n   for (chain = sel_ref_chain; chain; chain = TREE_CHAIN (chain))\n     {\n@@ -2629,35 +2632,37 @@ build_selector_translation_table (void)\n \t{\n \t  if (flag_typed_selectors)\n \t    {\n-\t      tree eltlist = NULL_TREE;\n+\t      VEC(constructor_elt,gc) *v = NULL;\n \t      tree encoding = get_proto_encoding (TREE_PURPOSE (chain));\n-\t      eltlist = tree_cons (NULL_TREE, expr, NULL_TREE);\n-\t      eltlist = tree_cons (NULL_TREE, encoding, eltlist);\n-\t      expr = objc_build_constructor (objc_selector_template,\n-\t\t\t\t\t     nreverse (eltlist));\n+\t      CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, expr);\n+\t      CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, encoding);\n+\t      expr = objc_build_constructor (objc_selector_template, v);\n \t    }\n \n-\t  initlist = tree_cons (NULL_TREE, expr, initlist);\n+\t  CONSTRUCTOR_APPEND_ELT (inits, NULL_TREE, expr);\n \t}\n     }\n \n   if (! flag_next_runtime)\n     {\n       /* Cause the selector table (previously forward-declared)\n-\t to be actually output.  */\n-      initlist = tree_cons (NULL_TREE,\n-\t\t\t    flag_typed_selectors\n-\t\t\t    ? objc_build_constructor\n-\t\t\t      (objc_selector_template,\n-\t\t\t       tree_cons (NULL_TREE,\n-\t\t\t\t\t  build_int_cst (NULL_TREE, 0),\n-\t\t\t\t\t  tree_cons (NULL_TREE,\n-\t\t\t\t\t\t     build_int_cst (NULL_TREE, 0),\n-\t\t\t\t\t\t     NULL_TREE)))\n-\t\t\t    : build_int_cst (NULL_TREE, 0), initlist);\n-      initlist = objc_build_constructor (TREE_TYPE (UOBJC_SELECTOR_TABLE_decl),\n-\t\t\t\t\t nreverse (initlist));\n-      finish_var_decl (UOBJC_SELECTOR_TABLE_decl, initlist);\n+\t to be actually output.\t */\n+      tree expr;\n+\n+      if (flag_typed_selectors)\n+\t{\n+\t  VEC(constructor_elt,gc) *v = NULL;\n+\t  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, build_int_cst (NULL_TREE, 0));\n+\t  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, build_int_cst (NULL_TREE, 0));\n+\t  expr = objc_build_constructor (objc_selector_template, v);\n+\t}\n+      else\n+\texpr = build_int_cst (NULL_TREE, 0);\n+\n+      CONSTRUCTOR_APPEND_ELT (inits, NULL_TREE, expr);\n+      expr = objc_build_constructor (TREE_TYPE (UOBJC_SELECTOR_TABLE_decl),\n+\t\t\t\t     inits);\n+      finish_var_decl (UOBJC_SELECTOR_TABLE_decl, expr);\n     }\n }\n \n@@ -4270,32 +4275,26 @@ build_protocol_template (void)\n static tree\n build_descriptor_table_initializer (tree type, tree entries)\n {\n-  tree initlist = NULL_TREE;\n+  VEC(constructor_elt,gc) *inits = NULL;\n \n   do\n     {\n-      tree eltlist = NULL_TREE;\n+      VEC(constructor_elt,gc) *elts = NULL;\n \n-      eltlist\n-\t= tree_cons (NULL_TREE,\n-\t\t     build_selector (METHOD_SEL_NAME (entries)), NULL_TREE);\n-      eltlist\n-\t= tree_cons (NULL_TREE,\n-\t\t     add_objc_string (METHOD_ENCODING (entries),\n-\t\t\t\t      meth_var_types),\n-\t\t     eltlist);\n+      CONSTRUCTOR_APPEND_ELT (elts, NULL_TREE,\n+\t\t\t      build_selector (METHOD_SEL_NAME (entries)));\n+      CONSTRUCTOR_APPEND_ELT (elts, NULL_TREE,\n+\t\t\t      add_objc_string (METHOD_ENCODING (entries),\n+\t\t\t\t\t       meth_var_types));\n \n-      initlist\n-\t= tree_cons (NULL_TREE,\n-\t\t     objc_build_constructor (type, nreverse (eltlist)),\n-\t\t     initlist);\n+      CONSTRUCTOR_APPEND_ELT (inits, NULL_TREE,\n+\t\t\t      objc_build_constructor (type, elts));\n \n       entries = TREE_CHAIN (entries);\n     }\n   while (entries);\n \n-  return objc_build_constructor (build_array_type (type, 0),\n-\t\t\t\t nreverse (initlist));\n+  return objc_build_constructor (build_array_type (type, 0), inits);\n }\n \n /* struct objc_method_prototype_list {\n@@ -4453,14 +4452,15 @@ static tree\n generate_descriptor_table (tree type, const char *name, int size, tree list,\n \t\t\t   tree proto)\n {\n-  tree decl, initlist;\n+  tree decl;\n+  VEC(constructor_elt,gc) *v = NULL;\n \n   decl = start_var_decl (type, synth_id_with_class_suffix (name, proto));\n \n-  initlist = build_tree_list (NULL_TREE, build_int_cst (NULL_TREE, size));\n-  initlist = tree_cons (NULL_TREE, list, initlist);\n+  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, build_int_cst (NULL_TREE, size));\n+  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, list);\n \n-  finish_var_decl (decl, objc_build_constructor (type, nreverse (initlist)));\n+  finish_var_decl (decl, objc_build_constructor (type, v));\n \n   return decl;\n }\n@@ -4785,40 +4785,41 @@ build_protocol_initializer (tree type, tree protocol_name,\n \t\t\t    tree protocol_list, tree instance_methods,\n \t\t\t    tree class_methods)\n {\n-  tree initlist = NULL_TREE, expr;\n+  tree expr;\n   tree cast_type = build_pointer_type\n \t\t   (xref_tag (RECORD_TYPE,\n \t\t\t      get_identifier (UTAG_CLASS)));\n+  VEC(constructor_elt,gc) *inits = NULL;\n \n   /* Filling the \"isa\" in with one allows the runtime system to\n      detect that the version change...should remove before final release.  */\n \n   expr = build_int_cst (cast_type, PROTOCOL_VERSION);\n-  initlist = tree_cons (NULL_TREE, expr, initlist);\n-  initlist = tree_cons (NULL_TREE, protocol_name, initlist);\n-  initlist = tree_cons (NULL_TREE, protocol_list, initlist);\n+  CONSTRUCTOR_APPEND_ELT (inits, NULL_TREE, expr);\n+  CONSTRUCTOR_APPEND_ELT (inits, NULL_TREE, protocol_name);\n+  CONSTRUCTOR_APPEND_ELT (inits, NULL_TREE, protocol_list);\n \n   if (!instance_methods)\n-    initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), initlist);\n+    CONSTRUCTOR_APPEND_ELT (inits, NULL_TREE, build_int_cst (NULL_TREE, 0));\n   else\n     {\n       expr = convert (objc_method_proto_list_ptr,\n \t\t      build_unary_op (input_location, \n \t\t\t\t      ADDR_EXPR, instance_methods, 0));\n-      initlist = tree_cons (NULL_TREE, expr, initlist);\n+      CONSTRUCTOR_APPEND_ELT (inits, NULL_TREE, expr);\n     }\n \n   if (!class_methods)\n-    initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), initlist);\n+    CONSTRUCTOR_APPEND_ELT (inits, NULL_TREE, build_int_cst (NULL_TREE, 0));\n   else\n     {\n       expr = convert (objc_method_proto_list_ptr,\n \t\t      build_unary_op (input_location, \n \t\t\t\t      ADDR_EXPR, class_methods, 0));\n-      initlist = tree_cons (NULL_TREE, expr, initlist);\n+      CONSTRUCTOR_APPEND_ELT (inits, NULL_TREE, expr);\n     }\n \n-  return objc_build_constructor (type, nreverse (initlist));\n+  return objc_build_constructor (type, inits);\n }\n \f\n /* struct _objc_category {\n@@ -5229,21 +5230,21 @@ build_method_list_template (tree list_type, int size)\n static tree\n build_ivar_list_initializer (tree type, tree field_decl)\n {\n-  tree initlist = NULL_TREE;\n+  VEC(constructor_elt,gc) *inits = NULL;\n \n   do\n     {\n-      tree ivar = NULL_TREE;\n+      VEC(constructor_elt,gc) *ivar = NULL;\n+      tree id;\n \n       /* Set name.  */\n       if (DECL_NAME (field_decl))\n-\tivar = tree_cons (NULL_TREE,\n-\t\t\t  add_objc_string (DECL_NAME (field_decl),\n-\t\t\t\t\t   meth_var_names),\n-\t\t\t  ivar);\n+\tCONSTRUCTOR_APPEND_ELT (ivar, NULL_TREE,\n+\t\t\t\tadd_objc_string (DECL_NAME (field_decl),\n+\t\t\t\t\t\t meth_var_names));\n       else\n \t/* Unnamed bit-field ivar (yuck).  */\n-\tivar = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), ivar);\n+\tCONSTRUCTOR_APPEND_ELT (ivar, NULL_TREE, build_int_cst (NULL_TREE, 0));\n \n       /* Set type.  */\n       encode_field_decl (field_decl,\n@@ -5252,43 +5253,38 @@ build_ivar_list_initializer (tree type, tree field_decl)\n \n       /* Null terminate string.  */\n       obstack_1grow (&util_obstack, 0);\n-      ivar\n-\t= tree_cons\n-\t  (NULL_TREE,\n-\t   add_objc_string (get_identifier (XOBFINISH (&util_obstack, char *)),\n-\t\t\t    meth_var_types),\n-\t   ivar);\n+      id = add_objc_string (get_identifier (XOBFINISH (&util_obstack, char *)),\n+                            meth_var_types);\n+      CONSTRUCTOR_APPEND_ELT (ivar, NULL_TREE, id);\n       obstack_free (&util_obstack, util_firstobj);\n \n       /* Set offset.  */\n-      ivar = tree_cons (NULL_TREE, byte_position (field_decl), ivar);\n-      initlist = tree_cons (NULL_TREE,\n-\t\t\t    objc_build_constructor (type, nreverse (ivar)),\n-\t\t\t    initlist);\n+      CONSTRUCTOR_APPEND_ELT (ivar, NULL_TREE, byte_position (field_decl));\n+      CONSTRUCTOR_APPEND_ELT (inits, NULL_TREE,\n+\t\t\t      objc_build_constructor (type, ivar));\n       do\n \tfield_decl = TREE_CHAIN (field_decl);\n       while (field_decl && TREE_CODE (field_decl) != FIELD_DECL);\n     }\n   while (field_decl);\n \n-  return objc_build_constructor (build_array_type (type, 0),\n-\t\t\t\t nreverse (initlist));\n+  return objc_build_constructor (build_array_type (type, 0), inits);\n }\n \n static tree\n generate_ivars_list (tree type, const char *name, int size, tree list)\n {\n-  tree decl, initlist;\n+  tree decl;\n+  VEC(constructor_elt,gc) *inits = NULL;\n \n   decl = start_var_decl (type, synth_id_with_class_suffix\n \t\t\t       (name, objc_implementation_context));\n \n-  initlist = build_tree_list (NULL_TREE, build_int_cst (NULL_TREE, size));\n-  initlist = tree_cons (NULL_TREE, list, initlist);\n+  CONSTRUCTOR_APPEND_ELT (inits, NULL_TREE, build_int_cst (NULL_TREE, size));\n+  CONSTRUCTOR_APPEND_ELT (inits, NULL_TREE, list);\n \n   finish_var_decl (decl,\n-\t\t   objc_build_constructor (TREE_TYPE (decl),\n-\t\t\t\t\t   nreverse (initlist)));\n+\t\t   objc_build_constructor (TREE_TYPE (decl), inits));\n \n   return decl;\n }\n@@ -5356,43 +5352,38 @@ generate_ivar_lists (void)\n static tree\n build_dispatch_table_initializer (tree type, tree entries)\n {\n-  tree initlist = NULL_TREE;\n+  VEC(constructor_elt,gc) *inits = NULL;\n \n   do\n     {\n-      tree elemlist = NULL_TREE;\n+      VEC(constructor_elt,gc) *elems = NULL;\n+      tree expr;\n \n-      elemlist = tree_cons (NULL_TREE,\n-\t\t\t    build_selector (METHOD_SEL_NAME (entries)),\n-\t\t\t    NULL_TREE);\n+      CONSTRUCTOR_APPEND_ELT (elems, NULL_TREE,\n+\t\t\t      build_selector (METHOD_SEL_NAME (entries)));\n \n       /* Generate the method encoding if we don't have one already.  */\n       if (! METHOD_ENCODING (entries))\n \tMETHOD_ENCODING (entries) =\n \t  encode_method_prototype (entries);\n \n-      elemlist = tree_cons (NULL_TREE,\n-\t\t\t    add_objc_string (METHOD_ENCODING (entries),\n-\t\t\t\t\t     meth_var_types),\n-\t\t\t    elemlist);\n+      CONSTRUCTOR_APPEND_ELT (elems, NULL_TREE,\n+\t\t\t      add_objc_string (METHOD_ENCODING (entries),\n+\t\t\t\t\t       meth_var_types));\n \n-      elemlist\n-\t= tree_cons (NULL_TREE,\n-\t\t     convert (ptr_type_node,\n-\t\t\t      build_unary_op (input_location, ADDR_EXPR,\n-\t\t\t\t\t      METHOD_DEFINITION (entries), 1)),\n-\t\t     elemlist);\n+      expr = convert (ptr_type_node,\n+\t\t      build_unary_op (input_location, ADDR_EXPR,\n+\t\t\t\t      METHOD_DEFINITION (entries), 1));\n+      CONSTRUCTOR_APPEND_ELT (elems, NULL_TREE, expr);\n \n-      initlist = tree_cons (NULL_TREE,\n-\t\t\t    objc_build_constructor (type, nreverse (elemlist)),\n-\t\t\t    initlist);\n+      CONSTRUCTOR_APPEND_ELT (inits, NULL_TREE,\n+\t\t\t      objc_build_constructor (type, elems));\n \n       entries = TREE_CHAIN (entries);\n     }\n   while (entries);\n \n-  return objc_build_constructor (build_array_type (type, 0),\n-\t\t\t\t nreverse (initlist));\n+  return objc_build_constructor (build_array_type (type, 0), inits);\n }\n \n /* To accomplish method prototyping without generating all kinds of\n@@ -5433,18 +5424,18 @@ build_method_template (void)\n static tree\n generate_dispatch_table (tree type, const char *name, int size, tree list)\n {\n-  tree decl, initlist;\n+  tree decl;\n+  VEC(constructor_elt,gc) *v = NULL;\n \n   decl = start_var_decl (type, synth_id_with_class_suffix\n \t\t\t       (name, objc_implementation_context));\n \n-  initlist = build_tree_list (NULL_TREE, build_int_cst (NULL_TREE, 0));\n-  initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, size), initlist);\n-  initlist = tree_cons (NULL_TREE, list, initlist);\n+  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, build_int_cst (NULL_TREE, 0));\n+  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, build_int_cst (NULL_TREE, size));\n+  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, list);\n \n   finish_var_decl (decl,\n-\t\t   objc_build_constructor (TREE_TYPE (decl),\n-\t\t\t\t\t   nreverse (initlist)));\n+\t\t   objc_build_constructor (TREE_TYPE (decl), v));\n \n   return decl;\n }\n@@ -5532,10 +5523,10 @@ generate_dispatch_tables (void)\n static tree\n generate_protocol_list (tree i_or_p)\n {\n-  tree initlist;\n   tree refs_decl, lproto, e, plist;\n   int size = 0;\n   const char *ref_name;\n+  VEC(constructor_elt,gc) *v = NULL;\n \n   if (TREE_CODE (i_or_p) == CLASS_INTERFACE_TYPE\n       || TREE_CODE (i_or_p) == CATEGORY_INTERFACE_TYPE)\n@@ -5552,9 +5543,9 @@ generate_protocol_list (tree i_or_p)\n       size++;\n \n   /* Build initializer.  */\n-  initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), NULL_TREE);\n+  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, build_int_cst (NULL_TREE, 0));\n   e = build_int_cst (build_pointer_type (objc_protocol_template), size);\n-  initlist = tree_cons (NULL_TREE, e, initlist);\n+  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, e);\n \n   for (lproto = plist; lproto; lproto = TREE_CHAIN (lproto))\n     {\n@@ -5565,7 +5556,7 @@ generate_protocol_list (tree i_or_p)\n \t{\n \t  e = build_unary_op (input_location, ADDR_EXPR, \n \t\t\t      PROTOCOL_FORWARD_DECL (pval), 0);\n-\t  initlist = tree_cons (NULL_TREE, e, initlist);\n+          CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, e);\n \t}\n     }\n \n@@ -5586,8 +5577,8 @@ generate_protocol_list (tree i_or_p)\n \t\tbuild_index_type (build_int_cst (NULL_TREE, size + 2))),\n \t       ref_name);\n \n-  finish_var_decl (refs_decl, objc_build_constructor (TREE_TYPE (refs_decl),\n-  \t\t\t\t\t\t      nreverse (initlist)));\n+  finish_var_decl (refs_decl,\n+                   objc_build_constructor (TREE_TYPE (refs_decl), v));\n \n   return refs_decl;\n }\n@@ -5597,44 +5588,45 @@ build_category_initializer (tree type, tree cat_name, tree class_name,\n \t\t\t    tree instance_methods, tree class_methods,\n \t\t\t    tree protocol_list)\n {\n-  tree initlist = NULL_TREE, expr;\n+  tree expr;\n+  VEC(constructor_elt,gc) *v = NULL;\n \n-  initlist = tree_cons (NULL_TREE, cat_name, initlist);\n-  initlist = tree_cons (NULL_TREE, class_name, initlist);\n+  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, cat_name);\n+  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, class_name);\n \n   if (!instance_methods)\n-    initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), initlist);\n+    CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, build_int_cst (NULL_TREE, 0));\n   else\n     {\n       expr = convert (objc_method_list_ptr,\n \t\t      build_unary_op (input_location, ADDR_EXPR, \n \t\t\t\t      instance_methods, 0));\n-      initlist = tree_cons (NULL_TREE, expr, initlist);\n+      CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, expr);\n     }\n   if (!class_methods)\n-    initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), initlist);\n+    CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, build_int_cst (NULL_TREE, 0));\n   else\n     {\n       expr = convert (objc_method_list_ptr,\n \t\t      build_unary_op (input_location, ADDR_EXPR, \n \t\t\t\t      class_methods, 0));\n-      initlist = tree_cons (NULL_TREE, expr, initlist);\n+      CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, expr);\n     }\n \n   /* protocol_list = */\n   if (!protocol_list)\n-     initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), initlist);\n+    CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, build_int_cst (NULL_TREE, 0));\n   else\n     {\n       expr = convert (build_pointer_type\n \t\t      (build_pointer_type\n \t\t       (objc_protocol_template)),\n \t\t      build_unary_op (input_location, ADDR_EXPR, \n \t\t\t\t      protocol_list, 0));\n-      initlist = tree_cons (NULL_TREE, expr, initlist);\n+      CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, expr);\n     }\n \n-  return objc_build_constructor (type, nreverse (initlist));\n+  return objc_build_constructor (type, v);\n }\n \n /* struct _objc_class {\n@@ -5665,88 +5657,88 @@ build_shared_structure_initializer (tree type, tree isa, tree super,\n \t\t\t\t    tree dispatch_table, tree ivar_list,\n \t\t\t\t    tree protocol_list)\n {\n-  tree initlist = NULL_TREE, expr;\n+  tree expr;\n+  VEC(constructor_elt,gc) *v = NULL;\n \n   /* isa = */\n-  initlist = tree_cons (NULL_TREE, isa, initlist);\n+  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, isa);\n \n   /* super_class = */\n-  initlist = tree_cons (NULL_TREE, super, initlist);\n+  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, super);\n \n   /* name = */\n-  initlist = tree_cons (NULL_TREE, default_conversion (name), initlist);\n+  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, default_conversion (name));\n \n   /* version = */\n-  initlist = tree_cons (NULL_TREE, build_int_cst (long_integer_type_node, 0),\n-\t\t\tinitlist);\n+  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE,\n+                          build_int_cst (long_integer_type_node, 0));\n \n   /* info = */\n-  initlist = tree_cons (NULL_TREE,\n-\t\t\tbuild_int_cst (long_integer_type_node, status),\n-\t\t\tinitlist);\n+  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE,\n+                          build_int_cst (long_integer_type_node, status));\n \n   /* instance_size = */\n-  initlist = tree_cons (NULL_TREE, convert (long_integer_type_node, size),\n-\t\t\tinitlist);\n+  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE,\n+                          convert (long_integer_type_node, size));\n \n   /* objc_ivar_list = */\n   if (!ivar_list)\n-    initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), initlist);\n+    CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, build_int_cst (NULL_TREE, 0));\n   else\n     {\n       expr = convert (objc_ivar_list_ptr,\n \t\t      build_unary_op (input_location, ADDR_EXPR, \n \t\t\t\t      ivar_list, 0));\n-      initlist = tree_cons (NULL_TREE, expr, initlist);\n+      CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, expr);\n     }\n \n   /* objc_method_list = */\n   if (!dispatch_table)\n-    initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), initlist);\n+    CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, build_int_cst (NULL_TREE, 0));\n   else\n     {\n       expr = convert (objc_method_list_ptr,\n \t\t      build_unary_op (input_location, ADDR_EXPR, \n \t\t\t\t      dispatch_table, 0));\n-      initlist = tree_cons (NULL_TREE, expr, initlist);\n+      CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, expr);\n     }\n \n   if (flag_next_runtime)\n     /* method_cache = */\n-    initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), initlist);\n+    CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, build_int_cst (NULL_TREE, 0));\n   else\n     {\n       /* dtable = */\n-      initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), initlist);\n+      CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, build_int_cst (NULL_TREE, 0));\n \n       /* subclass_list = */\n-      initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), initlist);\n+      CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, build_int_cst (NULL_TREE, 0));\n \n       /* sibling_class = */\n-      initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), initlist);\n+      CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, build_int_cst (NULL_TREE, 0));\n     }\n \n   /* protocol_list = */\n   if (! protocol_list)\n-    initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), initlist);\n+    CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, build_int_cst (NULL_TREE, 0));\n   else\n     {\n       expr = convert (build_pointer_type\n \t\t      (build_pointer_type\n \t\t       (objc_protocol_template)),\n \t\t      build_unary_op (input_location, ADDR_EXPR, \n \t\t\t\t      protocol_list, 0));\n-      initlist = tree_cons (NULL_TREE, expr, initlist);\n+      CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, expr);\n     }\n \n   if (flag_next_runtime)\n     /* sel_id = NULL */\n-    initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), initlist);\n+    CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, build_int_cst (NULL_TREE, 0));\n \n   /* gc_object_type = NULL */\n-  initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), initlist);\n+  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, build_int_cst (NULL_TREE, 0));\n \n-  return objc_build_constructor (type, nreverse (initlist));\n+  return objc_build_constructor (type, v);\n }\n \n /* Retrieve category interface CAT_NAME (if any) associated with CLASS.  */\n@@ -9512,21 +9504,21 @@ handle_impent (struct imp_entry *impent)\n static void\n generate_objc_image_info (void)\n {\n-  tree decl, initlist;\n+  tree decl;\n   int flags\n     = ((flag_replace_objc_classes && imp_list ? 1 : 0)\n        | (flag_objc_gc ? 2 : 0));\n+  VEC(constructor_elt,gc) *v = NULL;\n \n   decl = start_var_decl (build_array_type\n \t\t\t (integer_type_node,\n \t\t\t  build_index_type (build_int_cst (NULL_TREE, 2 - 1))),\n \t\t\t \"_OBJC_IMAGE_INFO\");\n \n-  initlist = build_tree_list (NULL_TREE, build_int_cst (NULL_TREE, 0));\n-  initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, flags), initlist);\n-  initlist = objc_build_constructor (TREE_TYPE (decl), nreverse (initlist));\n+  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, build_int_cst (NULL_TREE, 0));\n+  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, build_int_cst (NULL_TREE, flags));\n \n-  finish_var_decl (decl, initlist);\n+  finish_var_decl (decl, objc_build_constructor (TREE_TYPE (decl), v));\n }\n \n /* Look up ID as an instance variable.  OTHER contains the result of"}]}