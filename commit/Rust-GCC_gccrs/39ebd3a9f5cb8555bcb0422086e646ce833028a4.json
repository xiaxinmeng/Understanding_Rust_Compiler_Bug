{"sha": "39ebd3a9f5cb8555bcb0422086e646ce833028a4", "node_id": "C_kwDOANBUbNoAKDM5ZWJkM2E5ZjVjYjg1NTViY2IwNDIyMDg2ZTY0NmNlODMzMDI4YTQ", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2022-12-21T11:41:25Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2022-12-21T11:41:25Z"}, "message": "Make -fwhole-program to work with incremental LTO linking\n\nUpdate documentation of -fwhole-program which was wrongly\nclaiming that it is useless with LTO whole it is useful for LTO without plugin\nand extends -fwhole-program to also work with incremental linking.\nThis is useful when building kernel where the incremental link is de-facto fina\nbinary and only some explicitly marked symbols needs to remain.\n\nBootstrapped/regtested x86_64-linux, comitted.\n\ngcc/ChangeLog:\n\n2022-12-21  Jan Hubicka  <hubicka@ucw.cz>\n\n\t* doc/invoke.texi: Fix documentation of -fwhole-program with LTO\n\tand document behaviour for incremental linking.\n\ngcc/lto/ChangeLog:\n\n2022-12-21  Jan Hubicka  <hubicka@ucw.cz>\n\n\t* lto-common.cc (lto_resolution_read): With incremental linking\n\tand whole program ignore turn LDPR_PREVAILING_DEF_IRONLY to\n\tLDPR_PREVAILING_DEF_IRONLY_EXP\n\t* lto-lang.cc (lto_post_options): Do not clear flag_whole_program\n\tfor incremental link", "tree": {"sha": "18b06befdc9a62afaaddc00c2daefc21c71a58d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18b06befdc9a62afaaddc00c2daefc21c71a58d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39ebd3a9f5cb8555bcb0422086e646ce833028a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39ebd3a9f5cb8555bcb0422086e646ce833028a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39ebd3a9f5cb8555bcb0422086e646ce833028a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39ebd3a9f5cb8555bcb0422086e646ce833028a4/comments", "author": null, "committer": null, "parents": [{"sha": "88709c4a1e6f8b69a33897a1ab46b8d66c4569c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88709c4a1e6f8b69a33897a1ab46b8d66c4569c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88709c4a1e6f8b69a33897a1ab46b8d66c4569c4"}], "stats": {"total": 21, "additions": 17, "deletions": 4}, "files": [{"sha": "da9ad1068fbf6427cb94d9baf2c1a9a474af5efc", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ebd3a9f5cb8555bcb0422086e646ce833028a4/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ebd3a9f5cb8555bcb0422086e646ce833028a4/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=39ebd3a9f5cb8555bcb0422086e646ce833028a4", "patch": "@@ -13719,9 +13719,12 @@ compiled.  All public functions and variables with the exception of @code{main}\n and those merged by attribute @code{externally_visible} become static functions\n and in effect are optimized more aggressively by interprocedural optimizers.\n \n-This option should not be used in combination with @option{-flto}.\n-Instead relying on a linker plugin should provide safer and more precise\n-information.\n+With @option{-flto} this option has a limited use.  In most cases the\n+precise list of symbols used or exported from the binary is known the\n+resolution info passed to the link-time optimizer by the linker plugin.  It is\n+still useful if no linker plugin is used or during incremental link step when\n+final code is produced (with @option{-flto}\n+@option{-flinker-output=nolto-rel}).\n \n @item -flto[=@var{n}]\n @opindex flto"}, {"sha": "125064ba47ec550ade609be6a4d481a7cc64ed7c", "filename": "gcc/lto/lto-common.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ebd3a9f5cb8555bcb0422086e646ce833028a4/gcc%2Flto%2Flto-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ebd3a9f5cb8555bcb0422086e646ce833028a4/gcc%2Flto%2Flto-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-common.cc?ref=39ebd3a9f5cb8555bcb0422086e646ce833028a4", "patch": "@@ -2118,6 +2118,17 @@ lto_resolution_read (splay_tree file_ids, FILE *resolution, lto_file *file)\n \t  if (strcmp (lto_resolution_str[j], r_str) == 0)\n \t    {\n \t      r = (enum ld_plugin_symbol_resolution) j;\n+\t      /* Incremental linking together with -fwhole-program may seem\n+\t\t somewhat contradictionary (as the point of incremental linking\n+\t\t is to allow re-linking with more symbols later) but it is\n+\t\t used to build LTO kernel.  We want to hide all symbols that\n+\t\t are not explicitely marked as exported and thus turn\n+\t\t LDPR_PREVAILING_DEF_IRONLY_EXP\n+\t\t to LDPR_PREVAILING_DEF_IRONLY.  */\n+\t      if (flag_whole_program\n+\t\t  && flag_incremental_link == INCREMENTAL_LINK_NOLTO\n+\t\t  && r == LDPR_PREVAILING_DEF_IRONLY_EXP)\n+\t\tr = LDPR_PREVAILING_DEF_IRONLY;\n \t      break;\n \t    }\n \t}"}, {"sha": "7018dfae4a50222a19b587ed9f76663ebb7f65b5", "filename": "gcc/lto/lto-lang.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ebd3a9f5cb8555bcb0422086e646ce833028a4/gcc%2Flto%2Flto-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ebd3a9f5cb8555bcb0422086e646ce833028a4/gcc%2Flto%2Flto-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.cc?ref=39ebd3a9f5cb8555bcb0422086e646ce833028a4", "patch": "@@ -901,7 +901,6 @@ lto_post_options (const char **pfilename ATTRIBUTE_UNUSED)\n       break;\n \n     case LTO_LINKER_OUTPUT_NOLTOREL: /* .o: incremental link producing asm  */\n-      flag_whole_program = 0;\n       flag_incremental_link = INCREMENTAL_LINK_NOLTO;\n       break;\n "}]}