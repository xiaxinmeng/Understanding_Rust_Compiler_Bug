{"sha": "fde65a89fad742c2dca8ad50452e482d22f3c1b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRlNjVhODlmYWQ3NDJjMmRjYThhZDUwNDUyZTQ4MmQyMmYzYzFiMg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-20T08:50:59Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-20T08:50:59Z"}, "message": "Add pass_va_arg_by_reference\n\nThis patch splits out a common idiom from the va_arg gimplification\nroutines, so that there's only one place to update later.\n\n2019-08-20  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* calls.h (pass_va_arg_by_reference): Declare.\n\t* calls.c (pass_va_arg_by_reference): New function.\n\t* config/aarch64/aarch64.c (aarch64_gimplify_va_arg_expr): Use it.\n\t* config/alpha/alpha.c (alpha_gimplify_va_arg): Likewise.\n\t* config/gcn/gcn.c (gcn_gimplify_va_arg_expr): Likewise.\n\t* config/i386/i386.c (ix86_gimplify_va_arg): Likewise.\n\t* config/ia64/ia64.c (ia64_gimplify_va_arg): Likewise.\n\t* config/mips/mips.c (mips_std_gimplify_va_arg_expr): Likewise.\n\t(mips_gimplify_va_arg_expr): Likewise.\n\t* config/msp430/msp430.c (msp430_gimplify_va_arg_expr): Likewise.\n\t* config/pa/pa.c (hppa_gimplify_va_arg_expr): Likewise.\n\t* config/rs6000/rs6000-call.c (rs6000_gimplify_va_arg): Likewise.\n\t* config/s390/s390.c (s390_gimplify_va_arg): Likewise.\n\t* config/sparc/sparc.c (sparc_gimplify_va_arg): Likewise.\n\t* config/spu/spu.c (spu_gimplify_va_arg_expr): Likewise.\n\t* config/tilegx/tilegx.c (tilegx_gimplify_va_arg_expr): Likewise.\n\t* config/tilepro/tilepro.c (tilepro_gimplify_va_arg_expr): Likewise.\n\t* config/visium/visium.c (visium_gimplify_va_arg): Likewise.\n\t* config/xtensa/xtensa.c (xtensa_gimplify_va_arg_expr): Likewise.\n\t* targhooks.c (std_gimplify_va_arg_expr): Likewise.\n\nFrom-SVN: r274695", "tree": {"sha": "a1289bba8e74147f153b1d6b186772b35160a7aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1289bba8e74147f153b1d6b186772b35160a7aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fde65a89fad742c2dca8ad50452e482d22f3c1b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fde65a89fad742c2dca8ad50452e482d22f3c1b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fde65a89fad742c2dca8ad50452e482d22f3c1b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fde65a89fad742c2dca8ad50452e482d22f3c1b2/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f386ca413862152954a0ac73a7a2294fd6bbae1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f386ca413862152954a0ac73a7a2294fd6bbae1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f386ca413862152954a0ac73a7a2294fd6bbae1a"}], "stats": {"total": 73, "additions": 51, "deletions": 22}, "files": [{"sha": "81d672f8970b901f506a160cb7ddd5bf83629115", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fde65a89fad742c2dca8ad50452e482d22f3c1b2", "patch": "@@ -1,3 +1,26 @@\n+2019-08-20  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* calls.h (pass_va_arg_by_reference): Declare.\n+\t* calls.c (pass_va_arg_by_reference): New function.\n+\t* config/aarch64/aarch64.c (aarch64_gimplify_va_arg_expr): Use it.\n+\t* config/alpha/alpha.c (alpha_gimplify_va_arg): Likewise.\n+\t* config/gcn/gcn.c (gcn_gimplify_va_arg_expr): Likewise.\n+\t* config/i386/i386.c (ix86_gimplify_va_arg): Likewise.\n+\t* config/ia64/ia64.c (ia64_gimplify_va_arg): Likewise.\n+\t* config/mips/mips.c (mips_std_gimplify_va_arg_expr): Likewise.\n+\t(mips_gimplify_va_arg_expr): Likewise.\n+\t* config/msp430/msp430.c (msp430_gimplify_va_arg_expr): Likewise.\n+\t* config/pa/pa.c (hppa_gimplify_va_arg_expr): Likewise.\n+\t* config/rs6000/rs6000-call.c (rs6000_gimplify_va_arg): Likewise.\n+\t* config/s390/s390.c (s390_gimplify_va_arg): Likewise.\n+\t* config/sparc/sparc.c (sparc_gimplify_va_arg): Likewise.\n+\t* config/spu/spu.c (spu_gimplify_va_arg_expr): Likewise.\n+\t* config/tilegx/tilegx.c (tilegx_gimplify_va_arg_expr): Likewise.\n+\t* config/tilepro/tilepro.c (tilepro_gimplify_va_arg_expr): Likewise.\n+\t* config/visium/visium.c (visium_gimplify_va_arg): Likewise.\n+\t* config/xtensa/xtensa.c (xtensa_gimplify_va_arg_expr): Likewise.\n+\t* targhooks.c (std_gimplify_va_arg_expr): Likewise.\n+\n 2019-08-20  Richard Biener  <rguenther@suse.de>\n \n \tPR target/91498"}, {"sha": "f49f052bd4af8fb258acd67a31c13e6622bae30a", "filename": "gcc/calls.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=fde65a89fad742c2dca8ad50452e482d22f3c1b2", "patch": "@@ -927,6 +927,15 @@ pass_by_reference (CUMULATIVE_ARGS *ca, machine_mode mode,\n \t\t\t\t\t  type, named_arg);\n }\n \n+/* Return true if TYPE should be passed by reference when passed to\n+   the \"...\" arguments of a function.  */\n+\n+bool\n+pass_va_arg_by_reference (tree type)\n+{\n+  return pass_by_reference (NULL, TYPE_MODE (type), type, false);\n+}\n+\n /* Return true if TYPE, which is passed by reference, should be callee\n    copied instead of caller copied.  */\n "}, {"sha": "2f41fa34abb21a58af943015950ee19f981b8b5f", "filename": "gcc/calls.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fcalls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fcalls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.h?ref=fde65a89fad742c2dca8ad50452e482d22f3c1b2", "patch": "@@ -35,6 +35,7 @@ extern void fixup_tail_calls (void);\n \n extern bool pass_by_reference (CUMULATIVE_ARGS *, machine_mode,\n \t\t\t       tree, bool);\n+extern bool pass_va_arg_by_reference (tree);\n extern bool reference_callee_copied (CUMULATIVE_ARGS *, machine_mode,\n \t\t\t\t     tree, bool);\n extern void maybe_warn_alloc_args_overflow (tree, tree, tree[2], int[2]);"}, {"sha": "bbcafa951c94f7dfe2a8effd39cb60257d8d2f5d", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=fde65a89fad742c2dca8ad50452e482d22f3c1b2", "patch": "@@ -14271,7 +14271,7 @@ aarch64_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n   HOST_WIDE_INT size, rsize, adjust, align;\n   tree t, u, cond1, cond2;\n \n-  indirect_p = pass_by_reference (NULL, TYPE_MODE (type), type, false);\n+  indirect_p = pass_va_arg_by_reference (type);\n   if (indirect_p)\n     type = build_pointer_type (type);\n "}, {"sha": "74ca95e12a8e7b7c5e75dbcfaf8e900be638b03a", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=fde65a89fad742c2dca8ad50452e482d22f3c1b2", "patch": "@@ -6330,7 +6330,7 @@ alpha_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n   t = fold_convert (build_nonstandard_integer_type (64, 0), offset_field);\n   offset = get_initialized_tmp_var (t, pre_p, NULL);\n \n-  indirect = pass_by_reference (NULL, TYPE_MODE (type), type, false);\n+  indirect = pass_va_arg_by_reference (type);\n \n   if (indirect)\n     {"}, {"sha": "0826c819dd61a0b737a1796478f291e70d3464c1", "filename": "gcc/config/gcn/gcn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fconfig%2Fgcn%2Fgcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fconfig%2Fgcn%2Fgcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.c?ref=fde65a89fad742c2dca8ad50452e482d22f3c1b2", "patch": "@@ -2493,7 +2493,7 @@ gcn_gimplify_va_arg_expr (tree valist, tree type,\n   tree t, u;\n   bool indirect;\n \n-  indirect = pass_by_reference (NULL, TYPE_MODE (type), type, 0);\n+  indirect = pass_va_arg_by_reference (type);\n   if (indirect)\n     {\n       type = ptr;"}, {"sha": "e6244eafaac488fb4f272627879e32ea1d53800c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=fde65a89fad742c2dca8ad50452e482d22f3c1b2", "patch": "@@ -4307,7 +4307,7 @@ ix86_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n   ovf = build3 (COMPONENT_REF, TREE_TYPE (f_ovf), valist, f_ovf, NULL_TREE);\n   sav = build3 (COMPONENT_REF, TREE_TYPE (f_sav), valist, f_sav, NULL_TREE);\n \n-  indirect_p = pass_by_reference (NULL, TYPE_MODE (type), type, false);\n+  indirect_p = pass_va_arg_by_reference (type);\n   if (indirect_p)\n     type = build_pointer_type (type);\n   size = arg_int_size_in_bytes (type);"}, {"sha": "4449151b6e1467060a49f90ef274e7a5976d78f5", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=fde65a89fad742c2dca8ad50452e482d22f3c1b2", "patch": "@@ -5147,7 +5147,7 @@ ia64_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n \t\t      gimple_seq *post_p)\n {\n   /* Variable sized types are passed by reference.  */\n-  if (pass_by_reference (NULL, TYPE_MODE (type), type, false))\n+  if (pass_va_arg_by_reference (type))\n     {\n       tree ptrtype = build_pointer_type (type);\n       tree addr = std_gimplify_va_arg_expr (valist, ptrtype, pre_p, post_p);"}, {"sha": "fd5d78d1d13b47bd95a2b57ee04d601b1ceea80e", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=fde65a89fad742c2dca8ad50452e482d22f3c1b2", "patch": "@@ -6780,7 +6780,7 @@ mips_std_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n   unsigned HOST_WIDE_INT align, boundary;\n   bool indirect;\n \n-  indirect = pass_by_reference (NULL, TYPE_MODE (type), type, false);\n+  indirect = pass_va_arg_by_reference (type);\n   if (indirect)\n     type = build_pointer_type (type);\n \n@@ -6867,7 +6867,7 @@ mips_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n   tree addr;\n   bool indirect_p;\n \n-  indirect_p = pass_by_reference (NULL, TYPE_MODE (type), type, 0);\n+  indirect_p = pass_va_arg_by_reference (type);\n   if (indirect_p)\n     type = build_pointer_type (type);\n "}, {"sha": "84762f9edb431e17abbda85db8e86a1d56e41c11", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=fde65a89fad742c2dca8ad50452e482d22f3c1b2", "patch": "@@ -856,7 +856,7 @@ msp430_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n   unsigned HOST_WIDE_INT align, boundary;\n   bool indirect;\n \n-  indirect = pass_by_reference (NULL, TYPE_MODE (type), type, false);\n+  indirect = pass_va_arg_by_reference (type);\n   if (indirect)\n     type = build_pointer_type (type);\n "}, {"sha": "778e1364540612a494a8be1ddc217348cec03211", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=fde65a89fad742c2dca8ad50452e482d22f3c1b2", "patch": "@@ -6377,7 +6377,7 @@ hppa_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n       unsigned int size, ofs;\n       bool indirect;\n \n-      indirect = pass_by_reference (NULL, TYPE_MODE (type), type, 0);\n+      indirect = pass_va_arg_by_reference (type);\n       if (indirect)\n \t{\n \t  type = ptr;"}, {"sha": "f7c5384e92eff110a53998b67af90d11bc9e277a", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=fde65a89fad742c2dca8ad50452e482d22f3c1b2", "patch": "@@ -2690,7 +2690,7 @@ rs6000_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n   int regalign = 0;\n   gimple *stmt;\n \n-  if (pass_by_reference (NULL, TYPE_MODE (type), type, false))\n+  if (pass_va_arg_by_reference (type))\n     {\n       t = rs6000_gimplify_va_arg (valist, ptrtype, pre_p, post_p);\n       return build_va_arg_indirect_ref (t);"}, {"sha": "4ea600a832521397cd6edd8acfa207014fa6e960", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=fde65a89fad742c2dca8ad50452e482d22f3c1b2", "patch": "@@ -12476,7 +12476,7 @@ s390_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n \n   s390_check_type_for_vector_abi (type, true, false);\n \n-  if (pass_by_reference (NULL, TYPE_MODE (type), type, false))\n+  if (pass_va_arg_by_reference (type))\n     {\n       if (TARGET_DEBUG_ARG)\n \t{"}, {"sha": "e5cf9a8dfb1ef799c8aeca1a1b0ba2c87e9254f0", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=fde65a89fad742c2dca8ad50452e482d22f3c1b2", "patch": "@@ -7935,7 +7935,7 @@ sparc_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n   bool indirect;\n   tree ptrtype = build_pointer_type (type);\n \n-  if (pass_by_reference (NULL, TYPE_MODE (type), type, false))\n+  if (pass_va_arg_by_reference (type))\n     {\n       indirect = true;\n       size = rsize = UNITS_PER_WORD;"}, {"sha": "50bf40e865bc6272b05036454ed7832af59b9ed4", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=fde65a89fad742c2dca8ad50452e482d22f3c1b2", "patch": "@@ -4053,8 +4053,7 @@ spu_gimplify_va_arg_expr (tree valist, tree type, gimple_seq * pre_p,\n \n   /* if an object is dynamically sized, a pointer to it is passed\n      instead of the object itself. */\n-  pass_by_reference_p = pass_by_reference (NULL, TYPE_MODE (type), type,\n-\t\t\t\t\t   false);\n+  pass_by_reference_p = pass_va_arg_by_reference (type);\n   if (pass_by_reference_p)\n     type = build_pointer_type (type);\n   size = int_size_in_bytes (type);"}, {"sha": "849fda551b63688990af4051c8d8940d1ab435cd", "filename": "gcc/config/tilegx/tilegx.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.c?ref=fde65a89fad742c2dca8ad50452e482d22f3c1b2", "patch": "@@ -471,8 +471,7 @@ tilegx_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n \n   /* If an object is dynamically sized, a pointer to it is passed\n      instead of the object itself.  */\n-  pass_by_reference_p = pass_by_reference (NULL, TYPE_MODE (type), type,\n-\t\t\t\t\t   false);\n+  pass_by_reference_p = pass_va_arg_by_reference (type);\n \n   if (pass_by_reference_p)\n     type = build_pointer_type (type);"}, {"sha": "8091ee05922daf6c669efbe7a31d600305592652", "filename": "gcc/config/tilepro/tilepro.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Ftilepro.c?ref=fde65a89fad742c2dca8ad50452e482d22f3c1b2", "patch": "@@ -419,8 +419,7 @@ tilepro_gimplify_va_arg_expr (tree valist, tree type, gimple_seq * pre_p,\n \n   /* if an object is dynamically sized, a pointer to it is passed\n      instead of the object itself.  */\n-  pass_by_reference_p = pass_by_reference (NULL, TYPE_MODE (type), type,\n-\t\t\t\t\t   false);\n+  pass_by_reference_p = pass_va_arg_by_reference (type);\n \n   if (pass_by_reference_p)\n     type = build_pointer_type (type);"}, {"sha": "4ff331362f7daf931a3d4b4de059b54d0a26aa80", "filename": "gcc/config/visium/visium.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fconfig%2Fvisium%2Fvisium.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fconfig%2Fvisium%2Fvisium.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.c?ref=fde65a89fad742c2dca8ad50452e482d22f3c1b2", "patch": "@@ -1637,8 +1637,7 @@ visium_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n   tree f_ovfl, f_gbase, f_fbase, f_gbytes, f_fbytes;\n   tree ovfl, base, bytes;\n   HOST_WIDE_INT size, rsize;\n-  const bool by_reference_p\n-    = pass_by_reference (NULL, TYPE_MODE (type), type, false);\n+  const bool by_reference_p = pass_va_arg_by_reference (type);\n   const bool float_reg_arg_p\n     = (TARGET_FPU && !by_reference_p\n        && ((GET_MODE_CLASS (TYPE_MODE (type)) == MODE_FLOAT"}, {"sha": "9c90c146896040119be1366d8f93a43dcae41b05", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=fde65a89fad742c2dca8ad50452e482d22f3c1b2", "patch": "@@ -3252,7 +3252,7 @@ xtensa_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n   tree lab_false, lab_over, lab_false2;\n   bool indirect;\n \n-  indirect = pass_by_reference (NULL, TYPE_MODE (type), type, false);\n+  indirect = pass_va_arg_by_reference (type);\n   if (indirect)\n     type = build_pointer_type (type);\n "}, {"sha": "8a83ce8332c295dd19d7639f30d79b7580b561b8", "filename": "gcc/targhooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde65a89fad742c2dca8ad50452e482d22f3c1b2/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=fde65a89fad742c2dca8ad50452e482d22f3c1b2", "patch": "@@ -2177,7 +2177,7 @@ std_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n   if (ARGS_GROW_DOWNWARD)\n     gcc_unreachable ();\n \n-  indirect = pass_by_reference (NULL, TYPE_MODE (type), type, false);\n+  indirect = pass_va_arg_by_reference (type);\n   if (indirect)\n     type = build_pointer_type (type);\n "}]}