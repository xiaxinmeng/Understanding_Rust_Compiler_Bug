{"sha": "b222082eee8ef6df2023bc00c085f90bd15bf238", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjIyMjA4MmVlZThlZjZkZjIwMjNiYzAwYzA4NWY5MGJkMTViZjIzOA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@freesoft.cz", "date": "1999-04-15T00:19:03Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-04-15T00:19:03Z"}, "message": "i386.md (notsi, [...]): Call memory_address_displacement_length instead of memory_address_length.\n\n        * i386.md (notsi, nothi, xorsi, xorhi, and xorqi patterns): Call\n        memory_address_displacement_length instead of memory_address_length.\n        * i386.c (memory_address_info): Renamed from memory_address_length.\n        Accept new argument DISP_LENGTH.  All callers changed.  If DISP_LENGTH,\n        then return the displacement length.  Else return length of the\n        entire memory address.  Handle MULT case correctly.\n        * i386.h (memory_address_info): Update declaration.\n        * i386.md (memory_bit_test): Fix paren error.\n\nCo-Authored-By: Jeffrey A Law <law@cygnus.com>\n\nFrom-SVN: r26465", "tree": {"sha": "8900c6151c018b897e3095560b6584c140cc2792", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8900c6151c018b897e3095560b6584c140cc2792"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b222082eee8ef6df2023bc00c085f90bd15bf238", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b222082eee8ef6df2023bc00c085f90bd15bf238", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b222082eee8ef6df2023bc00c085f90bd15bf238", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b222082eee8ef6df2023bc00c085f90bd15bf238/comments", "author": null, "committer": null, "parents": [{"sha": "a3e924fcb59eb9d3f506904576d92c7b90df6c32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3e924fcb59eb9d3f506904576d92c7b90df6c32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3e924fcb59eb9d3f506904576d92c7b90df6c32"}], "stats": {"total": 171, "additions": 100, "deletions": 71}, "files": [{"sha": "3739e5f3de85aaa61fd80ab8cb8b4c7566ca62f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b222082eee8ef6df2023bc00c085f90bd15bf238/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b222082eee8ef6df2023bc00c085f90bd15bf238/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b222082eee8ef6df2023bc00c085f90bd15bf238", "patch": "@@ -1,3 +1,16 @@\n+Thu Apr 15 01:03:21 1999  Jan Hubicka <hubicka@freesoft.cz>\n+\t\t\t  Jeff Law <law@cygnus.com>\n+\n+\t* i386.md (notsi, nothi, xorsi, xorhi, and xorqi patterns): Call\n+\tmemory_address_displacement_length instead of memory_address_length.\n+\t* i386.c (memory_address_info): Renamed from memory_address_length.\n+\tAccept new argument DISP_LENGTH.  All callers changed.  If DISP_LENGTH,\n+\tthen return the displacement length.  Else return length of the\n+\tentire memory address.  Handle MULT case correctly.\n+\t* i386.h (memory_address_info): Update declaration.\n+\n+\t* i386.md (memory_bit_test): Fix paren error.\n+\n Wed Apr 14 21:29:18 1999  Andrew Haley  <aph@cygnus.com>\n \n \t* flow.c: (make_edges): Always make edges from a basic block"}, {"sha": "5665800bcb371a907c603d0349b1e76965302ad0", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b222082eee8ef6df2023bc00c085f90bd15bf238/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b222082eee8ef6df2023bc00c085f90bd15bf238/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b222082eee8ef6df2023bc00c085f90bd15bf238", "patch": "@@ -5610,12 +5610,16 @@ output_ashlsi3 (operands)\n   return AS2 (sal%L0,%2,%0);\n }\n \n-/* Calculate the length of the memory address in the instruction\n-   encoding.  Does not include the one-byte modrm, opcode, or prefix.  */\n+/* Given the memory address ADDR, calculate the length of the address or\n+   the length of just the displacement (controlled by DISP_LENGTH).\n+  \n+   The length returned does not include the one-byte modrm, opcode,\n+   or prefix.  */\n \n int\n-memory_address_length (addr)\n+memory_address_info (addr, disp_length)\n      rtx addr;\n+     int disp_length;\n {\n   rtx base, index, disp, scale;\n   rtx op0, op1;\n@@ -5709,6 +5713,11 @@ memory_address_length (addr)\n   if (base == frame_pointer_rtx && !disp)\n     disp = const0_rtx;\n \n+  /* Scaling can not be encoded without base or displacement.  \n+     Except for scale == 1 where we can encode reg + reg instead of reg * 2.  */\n+  if (!base && index && scale != 1)\n+    disp = const0_rtx;\n+\n   /* Find the length of the displacement constant.  */\n   len = 0;\n   if (disp)\n@@ -5720,8 +5729,9 @@ memory_address_length (addr)\n \tlen = 4;\n     }\n \n-  /* An index requires the two-byte modrm form.  */\n-  if (index)\n+  /* An index requires the two-byte modrm form.  Not important\n+     if we are computing just length of the displacement.  */\n+  if (index && ! disp_length)\n     len += 1;\n \n   return len;"}, {"sha": "1d752c7b47255f3f4fd1c46ea44e774c43203491", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b222082eee8ef6df2023bc00c085f90bd15bf238/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b222082eee8ef6df2023bc00c085f90bd15bf238/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=b222082eee8ef6df2023bc00c085f90bd15bf238", "patch": "@@ -2766,7 +2766,7 @@ extern char *output_fp_conditional_move ();\n extern int ix86_can_use_return_insn_p ();\n extern int small_shift_operand ();\n extern char *output_ashlsi3 ();\n-extern int memory_address_length ();\n+extern int memory_address_info ();\n \n #ifdef NOTYET\n extern struct rtx_def *copy_all_rtx ();"}, {"sha": "da131099ec563433208c3054905b5bace8dd71b1", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 71, "deletions": 65, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b222082eee8ef6df2023bc00c085f90bd15bf238/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b222082eee8ef6df2023bc00c085f90bd15bf238/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=b222082eee8ef6df2023bc00c085f90bd15bf238", "patch": "@@ -4497,7 +4497,7 @@ byte_xor_operation:\n \t    if (intval == 0xff\n                 && (!TARGET_PENTIUM || optimize_size\n                     || (GET_CODE (operands[0]) == MEM \n-                        && memory_address_length (XEXP (operands[0], 0)) != 0)))\n+                        && memory_address_info (XEXP (operands[0], 0), 1))))\n \t      return AS1 (not%B0,%b0);\n \n \t    if (intval != INTVAL (operands[2]))\n@@ -4516,7 +4516,7 @@ byte_xor_operation:\n \t      if (intval == 0xff \n                   && (!TARGET_PENTIUM || optimize_size\n                       || (GET_CODE (operands[0]) == MEM \n-                          && memory_address_length (XEXP (operands[0], 0)) != 0)))\n+                          && memory_address_info (XEXP (operands[0], 0), 1))))\n \t\treturn AS1 (not%B0,%h0);\n \n \t      operands[2] = GEN_INT (intval);\n@@ -4576,7 +4576,7 @@ byte_xor_operation:\n \t  if (INTVAL (operands[2]) == 0xff \n               && (!TARGET_PENTIUM || optimize_size\n                   || (GET_CODE (operands[0]) == MEM \n-                      && memory_address_length (XEXP (operands[0], 0)) != 0)))\n+                      && memory_address_info (XEXP (operands[0], 0), 1))))\n \t    return AS1 (not%B0,%b0);\n \n \t  return AS2 (xor%B0,%2,%b0);\n@@ -4593,7 +4593,7 @@ byte_xor_operation:\n \t  if (INTVAL (operands[2]) == 0xff\n               && (!TARGET_PENTIUM || optimize_size\n                   || (GET_CODE (operands[0]) == MEM \n-                      && memory_address_length (XEXP (operands[0], 0)) != 0)))\n+                      && memory_address_info (XEXP (operands[0], 0), 1))))\n \t    return AS1 (not%B0,%h0);\n \n \t  return AS2 (xor%B0,%2,%h0);\n@@ -4881,81 +4881,87 @@ byte_xor_operation:\n \t(not:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")))]\n   \"\"\n   \"*\n-/* A Pentium NOT is not pariable.  Output it only in case of complex\n-   memory address, because XOR will be inpariable anyway because\n-   of immediate/displacement rule.  */\n+{\n+  /* A Pentium NOT is not pariable.  Output it only in case of complex\n+     memory address, because XOR will be inpariable anyway because\n+     of immediate/displacement rule.  */\n \n-if (TARGET_PENTIUM && !optimize_size\n-    && (GET_CODE (operands[0]) != MEM \n-        || memory_address_length (XEXP (operands[0], 0)) == 0))\n-  {\n-    rtx xops[2];\n-    xops[0] = operands[0];\n-    xops[1] = GEN_INT (0xffffffff);\n-    output_asm_insn (AS2 (xor%L0,%1,%0), xops);\n-    RET;\n-  }\n-else\n-  return AS1 (not%L0,%0);\")\n+  if (TARGET_PENTIUM && !optimize_size\n+      && (GET_CODE (operands[0]) != MEM \n+\t  || memory_address_info (XEXP (operands[0], 0), 1) == 0))\n+    {\n+      rtx xops[2];\n+      xops[0] = operands[0];\n+      xops[1] = GEN_INT (0xffffffff);\n+      output_asm_insn (AS2 (xor%L0,%1,%0), xops);\n+      RET;\n+    }\n+  else\n+    return AS1 (not%L0,%0);\n+}\")\n \n (define_insn \"one_cmplhi2\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(not:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")))]\n   \"\"\n   \"*\n-/* A Pentium NOT is not pariable.  Output it only in case of complex\n-   memory address, because XOR will be inpariable anyway because\n-   of immediate/displacement rule.  */\n+{\n+  /* A Pentium NOT is not pariable.  Output it only in case of complex\n+     memory address, because XOR will be inpariable anyway because\n+     of immediate/displacement rule.  */\n \n-if (TARGET_PENTIUM && !optimize_size\n-    && (GET_CODE (operands[0]) != MEM \n-        || memory_address_length (XEXP (operands[0], 0)) == 0))\n-  {\n-    rtx xops[2];\n-    xops[0] = operands[0];\n-    xops[1] = GEN_INT (0xffff);\n-    if (REG_P (operands[0])\n-        && i386_cc_probably_useless_p (insn))\n-     {\n-        CC_STATUS_INIT;\n-        output_asm_insn (AS2 (xor%L0,%1,%k0), xops);\n-     }\n-    else\n-      output_asm_insn (AS2 (xor%W0,%1,%0), xops);\n-    RET;\n-  }\n-else\n-  {\n-    if (REG_P (operands[0])\n-        && i386_cc_probably_useless_p (insn))\n-     {\n-        CC_STATUS_INIT;\n-        return AS1 (not%L0,%k0);\n-     }\n-    return AS1 (not%W0,%0);\n-  }\")\n+  if (TARGET_PENTIUM && !optimize_size\n+      && (GET_CODE (operands[0]) != MEM \n+\t  || memory_address_info (XEXP (operands[0], 0), 1) == 0))\n+    {\n+      rtx xops[2];\n+      xops[0] = operands[0];\n+      xops[1] = GEN_INT (0xffff);\n+      if (REG_P (operands[0])\n+\t  && i386_cc_probably_useless_p (insn))\n+       {\n+\t  CC_STATUS_INIT;\n+\t  output_asm_insn (AS2 (xor%L0,%1,%k0), xops);\n+       }\n+      else\n+\toutput_asm_insn (AS2 (xor%W0,%1,%0), xops);\n+      RET;\n+    }\n+  else\n+    {\n+      if (REG_P (operands[0])\n+\t  && i386_cc_probably_useless_p (insn))\n+\t{\n+\t  CC_STATUS_INIT;\n+\t  return AS1 (not%L0,%k0);\n+\t}\n+      return AS1 (not%W0,%0);\n+    }\n+}\")\n \n (define_insn \"one_cmplqi2\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(not:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")))]\n   \"\"\n   \"*\n-/* A Pentium NOT is not pariable.  Output it only in case of complex\n-   memory address, because XOR will be inpariable anyway because\n-   of immediate/displacement rule.  */\n+{\n+  /* A Pentium NOT is not pariable.  Output it only in case of complex\n+     memory address, because XOR will be inpariable anyway because\n+     of immediate/displacement rule.  */\n \n-if (TARGET_PENTIUM && !optimize_size\n-    && (GET_CODE (operands[0]) != MEM \n-        || memory_address_length (XEXP (operands[0], 0)) == 0))\n-  {\n-    rtx xops[2];\n-    xops[0] = operands[0];\n-    xops[1] = GEN_INT (0xff);\n-    output_asm_insn (AS2 (xor%B0,%1,%0), xops);\n-    RET;\n-  }\n-else\n-  return AS1 (not%B0,%0);\")\n+  if (TARGET_PENTIUM && !optimize_size\n+      && (GET_CODE (operands[0]) != MEM \n+\t  || memory_address_info (XEXP (operands[0], 0), 1) == 0))\n+    {\n+      rtx xops[2];\n+      xops[0] = operands[0];\n+      xops[1] = GEN_INT (0xff);\n+      output_asm_insn (AS2 (xor%B0,%1,%0), xops);\n+      RET;\n+    }\n+  else\n+    return AS1 (not%B0,%0);\n+}\")\n \f\n ;;- arithmetic shift instructions\n \n@@ -5729,7 +5735,7 @@ else\n   mask = ((1 << INTVAL (operands[1])) - 1) << INTVAL (operands[2]);\n   operands[1] = GEN_INT (mask);\n \n-  if (! REG_P (operands[0]) || QI_REG_P (operands[0])\n+  if ((! REG_P (operands[0]) || QI_REG_P (operands[0]))\n       /* A Pentium test is pairable only with eax. Not with ah or al.  */\n       && (! REG_P (operands[0]) || REGNO (operands[0]) || !TARGET_PENTIUM\n           || optimize_size))"}]}