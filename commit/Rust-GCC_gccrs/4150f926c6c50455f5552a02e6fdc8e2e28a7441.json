{"sha": "4150f926c6c50455f5552a02e6fdc8e2e28a7441", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE1MGY5MjZjNmM1MDQ1NWY1NTUyYTAyZTZmZGM4ZTJlMjhhNzQ0MQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2010-09-28T06:11:05Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-09-28T06:11:05Z"}, "message": "sse.md (*avx_<umaxmin:code><mode>3): Split from *avx_<maxmin:code><mode>3.\n\n\t* config/i386/sse.md (*avx_<umaxmin:code><mode>3):\n\tSplit from *avx_<maxmin:code><mode>3.\n\t(*avx_<smaxmin:code><mode>3): Ditto.\n\t* config/i386/i386.md (maxmin): Remove code iterator.\n\nFrom-SVN: r164676", "tree": {"sha": "f3e33d6deacc5520b198e1f6f533f2533a28c0e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3e33d6deacc5520b198e1f6f533f2533a28c0e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4150f926c6c50455f5552a02e6fdc8e2e28a7441", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4150f926c6c50455f5552a02e6fdc8e2e28a7441", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4150f926c6c50455f5552a02e6fdc8e2e28a7441", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4150f926c6c50455f5552a02e6fdc8e2e28a7441/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b34d5cd74a1695bed73e0787c501fd14ebf7f865", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b34d5cd74a1695bed73e0787c501fd14ebf7f865", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b34d5cd74a1695bed73e0787c501fd14ebf7f865"}], "stats": {"total": 65, "additions": 41, "deletions": 24}, "files": [{"sha": "b60b287db46332b15dfaccf04e4e031bf18cebc1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4150f926c6c50455f5552a02e6fdc8e2e28a7441/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4150f926c6c50455f5552a02e6fdc8e2e28a7441/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4150f926c6c50455f5552a02e6fdc8e2e28a7441", "patch": "@@ -1,3 +1,10 @@\n+2010-09-28  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (*avx_<umaxmin:code><mode>3):\n+\tSplit from *avx_<maxmin:code><mode>3.\n+\t(*avx_<smaxmin:code><mode>3): Ditto.\n+\t* config/i386/i386.md (maxmin): Remove code iterator.\n+\n 2010-09-27  Ian Lance Taylor  <iant@google.com>\n \n \t* config/i386/i386.c (ix86_supports_split_stack): -fsplit-stack"}, {"sha": "dfbe16047b3c313b366252ae79f4e30dacfa12bd", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4150f926c6c50455f5552a02e6fdc8e2e28a7441/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4150f926c6c50455f5552a02e6fdc8e2e28a7441/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=4150f926c6c50455f5552a02e6fdc8e2e28a7441", "patch": "@@ -462,7 +462,7 @@\n \n ;; Set when REX opcode prefix is used.\n (define_attr \"prefix_rex\" \"\"\n-  (cond [(ne (symbol_ref \"!TARGET_64BIT\") (const_int 0))\n+  (cond [(eq (symbol_ref \"TARGET_64BIT\") (const_int 0))\n \t   (const_int 0)\n \t (and (eq_attr \"mode\" \"DI\")\n \t      (and (eq_attr \"type\" \"!push,pop,call,callv,leave,ibr\")\n@@ -713,9 +713,6 @@\n ;; Mapping of unsigned max and min\n (define_code_iterator umaxmin [umax umin])\n \n-;; Mapping of signed/unsigned max and min\n-(define_code_iterator maxmin [smax smin umax umin])\n-\n ;; Base name for integer and FP insn mnemonic\n (define_code_attr maxmin_int [(smax \"maxs\") (smin \"mins\")\n \t\t\t      (umax \"maxu\") (umin \"minu\")])"}, {"sha": "60a310b91e8a006eaa1d59f66c41a4ab991de901", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4150f926c6c50455f5552a02e6fdc8e2e28a7441/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4150f926c6c50455f5552a02e6fdc8e2e28a7441/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=4150f926c6c50455f5552a02e6fdc8e2e28a7441", "patch": "@@ -499,19 +499,6 @@\n   return true;\n })\n \n-;; True for any non-virtual or eliminable register.  Used in places where\n-;; instantiation of such a register may cause the pattern to not be recognized.\n-(define_predicate \"register_no_elim_operand\"\n-  (match_operand 0 \"register_operand\")\n-{\n-  if (GET_CODE (op) == SUBREG)\n-    op = SUBREG_REG (op);\n-  return !(op == arg_pointer_rtx\n-\t   || op == frame_pointer_rtx\n-\t   || IN_RANGE (REGNO (op),\n-\t\t\tFIRST_PSEUDO_REGISTER, LAST_VIRTUAL_REGISTER));\n-})\n-\n ;; P6 processors will jump to the address after the decrement when %esp\n ;; is used as a call operand, so they will execute return address as a code.\n ;; See Pentium Pro errata 70, Pentium 2 errata A33 and Pentium 3 errata E17.\n@@ -528,6 +515,19 @@\n   return register_no_elim_operand (op, mode);\n })\n \n+;; True for any non-virtual or eliminable register.  Used in places where\n+;; instantiation of such a register may cause the pattern to not be recognized.\n+(define_predicate \"register_no_elim_operand\"\n+  (match_operand 0 \"register_operand\")\n+{\n+  if (GET_CODE (op) == SUBREG)\n+    op = SUBREG_REG (op);\n+  return !(op == arg_pointer_rtx\n+\t   || op == frame_pointer_rtx\n+\t   || IN_RANGE (REGNO (op),\n+\t\t\tFIRST_PSEUDO_REGISTER, LAST_VIRTUAL_REGISTER));\n+})\n+\n ;; Similarly, but include the stack pointer.  This is used to prevent esp\n ;; from being used as an index reg.\n (define_predicate \"index_register_operand\""}, {"sha": "1784da9d05c94bc73a9fcf780f025d87c7b1c51e", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4150f926c6c50455f5552a02e6fdc8e2e28a7441/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4150f926c6c50455f5552a02e6fdc8e2e28a7441/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=4150f926c6c50455f5552a02e6fdc8e2e28a7441", "patch": "@@ -6031,18 +6031,16 @@\n \n (define_insn \"*avx_<code><mode>3\"\n   [(set (match_operand:SSEMODE124 0 \"register_operand\" \"=x\")\n-\t(maxmin:SSEMODE124\n+\t(umaxmin:SSEMODE124\n \t  (match_operand:SSEMODE124 1 \"nonimmediate_operand\" \"%x\")\n \t  (match_operand:SSEMODE124 2 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_AVX && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n   \"vp<maxmin_int><ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n    (set (attr \"prefix_extra\")\n-     (if_then_else\n-       (ne (symbol_ref \"<MODE>mode != ((<CODE> == SMAX || <CODE> == SMIN) ? V8HImode : V16QImode)\")\n-\t   (const_int 0))\n-       (const_string \"1\")\n-       (const_string \"0\")))\n+     (if_then_else (match_operand:V16QI 0 \"\" \"\")\n+       (const_string \"0\")\n+       (const_string \"1\")))\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -6065,6 +6063,21 @@\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn \"*avx_<code><mode>3\"\n+  [(set (match_operand:SSEMODE124 0 \"register_operand\" \"=x\")\n+\t(smaxmin:SSEMODE124\n+\t  (match_operand:SSEMODE124 1 \"nonimmediate_operand\" \"%x\")\n+\t  (match_operand:SSEMODE124 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_AVX && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+  \"vp<maxmin_int><ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"sseiadd\")\n+   (set (attr \"prefix_extra\")\n+     (if_then_else (match_operand:V8HI 0 \"\" \"\")\n+       (const_string \"0\")\n+       (const_string \"1\")))\n+   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n (define_expand \"<code>v8hi3\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"\")\n \t(smaxmin:V8HI\n@@ -6917,7 +6930,7 @@\n }\n   [(set_attr \"type\" \"sselog\")\n    (set (attr \"prefix_extra\")\n-     (if_then_else (match_operand:V8HI 0 \"register_operand\" \"\")\n+     (if_then_else (match_operand:V8HI 0 \"\" \"\")\n        (const_string \"0\")\n        (const_string \"1\")))\n    (set_attr \"length_immediate\" \"1\")"}]}