{"sha": "7c9f20fcfdc2d8453df88ceb7e693debfcd678c0", "node_id": "C_kwDOANBUbNoAKDdjOWYyMGZjZmRjMmQ4NDUzZGY4OGNlYjdlNjkzZGViZmNkNjc4YzA", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-01-11T11:07:16Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-01-11T11:59:12Z"}, "message": "tree-optimization/108352 - FSM threads creating irreducible loops\n\nThe following relaxes a heuristic that prevents creating irreducible\nloops from FSM threads not covering multi-way branches.  Instead of\nallowing threads that adhere to\n\n      && (n_insns * (unsigned) param_fsm_scale_path_stmts\n          > (m_path.length () *\n             (unsigned) param_fsm_scale_path_blocks))\n\nwith reasoning \"We also consider it worth creating an irreducible inner loop if\nthe number of copied statement is low relative to the length of the path --\nin that case there's little the traditional loop optimizer would have done\nanyway, so an irreducible loop is not so bad.\" that I cannot make much\nsense of the following patch changes that to only allow those after\nloop optimization and when they are (scaled) short:\n\n      && (!(cfun->curr_properties & PROP_loop_opts_done)\n          || (m_n_insns * param_fsm_scale_path_stmts\n              >= param_max_jump_thread_duplication_stmts)))\n\nThis allows us to get rid of --param fsm-scale-path-blocks which\nprevious to the bisected revision allowed an enlarged path covering\nthe original allowance (but we do not consider that enlarged path\nnow because enlarging it doesn't add any information).\n\n\tPR tree-optimization/108352\n\t* tree-ssa-threadbackward.cc\n\t(back_threader_profitability::profitable_path_p): Adjust\n\theuristic that allows non-multi-way branch threads creating\n\tirreducible loops.\n\t* doc/invoke.texi (--param fsm-scale-path-blocks): Remove.\n\t(--param fsm-scale-path-stmts): Adjust.\n\t* params.opt (--param=fsm-scale-path-blocks=): Remove.\n\t(-param=fsm-scale-path-stmts=): Adjust description.\n\n\t* gcc.dg/tree-ssa/ssa-thread-21.c: New testcase.\n\t* gcc.dg/tree-ssa/vrp46.c: Remove --param fsm-scale-path-blocks=1.", "tree": {"sha": "ae9ddd3b4be364259c04da871207ce9c95921efd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae9ddd3b4be364259c04da871207ce9c95921efd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c9f20fcfdc2d8453df88ceb7e693debfcd678c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c9f20fcfdc2d8453df88ceb7e693debfcd678c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c9f20fcfdc2d8453df88ceb7e693debfcd678c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c9f20fcfdc2d8453df88ceb7e693debfcd678c0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "445a48a226ffd530b37bcdc13b6bdca94ba2e122", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/445a48a226ffd530b37bcdc13b6bdca94ba2e122", "html_url": "https://github.com/Rust-GCC/gccrs/commit/445a48a226ffd530b37bcdc13b6bdca94ba2e122"}], "stats": {"total": 59, "additions": 37, "deletions": 22}, "files": [{"sha": "701c228bd0a824dee52c7d4e23c9f687000cd3d6", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9f20fcfdc2d8453df88ceb7e693debfcd678c0/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9f20fcfdc2d8453df88ceb7e693debfcd678c0/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7c9f20fcfdc2d8453df88ceb7e693debfcd678c0", "patch": "@@ -15981,16 +15981,13 @@ Max. size of loc list for which reverse ops should be added.\n \n @item fsm-scale-path-stmts\n Scale factor to apply to the number of statements in a threading path\n-when comparing to the number of (scaled) blocks.\n+crossing a loop backedge when comparing to\n+@option{--param=max-jump-thread-duplication-stmts}.\n \n @item uninit-control-dep-attempts\n Maximum number of nested calls to search for control dependencies\n during uninitialized variable analysis.\n \n-@item fsm-scale-path-blocks\n-Scale factor to apply to the number of blocks in a threading path\n-when comparing to the number of (scaled) statements.\n-\n @item sched-autopref-queue-depth\n Hardware autoprefetcher scheduler model control flag.\n Number of lookahead cycles the model looks into; at '"}, {"sha": "929131254d2fad4fc5ce1b6730e08301e33f3b41", "filename": "gcc/params.opt", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9f20fcfdc2d8453df88ceb7e693debfcd678c0/gcc%2Fparams.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9f20fcfdc2d8453df88ceb7e693debfcd678c0/gcc%2Fparams.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.opt?ref=7c9f20fcfdc2d8453df88ceb7e693debfcd678c0", "patch": "@@ -134,13 +134,9 @@ Maximum number of basic blocks before EVRP uses a sparse cache.\n Common Joined UInteger Var(param_evrp_switch_limit) Init(50) Optimization Param\n Maximum number of outgoing edges in a switch before EVRP will not process it.\n \n--param=fsm-scale-path-blocks=\n-Common Joined UInteger Var(param_fsm_scale_path_blocks) Init(3) IntegerRange(1, 10) Param Optimization\n-Scale factor to apply to the number of blocks in a threading path when comparing to the number of (scaled) statements.\n-\n -param=fsm-scale-path-stmts=\n Common Joined UInteger Var(param_fsm_scale_path_stmts) Init(2) IntegerRange(1, 10) Param Optimization\n-Scale factor to apply to the number of statements in a threading path when comparing to the number of (scaled) blocks.\n+Scale factor to apply to the number of statements in a threading path crossing a loop backedge when comparing to max-jump-thread-duplication-stmts.\n \n -param=gcse-after-reload-critical-fraction=\n Common Joined UInteger Var(param_gcse_after_reload_critical_fraction) Init(10) Param Optimization"}, {"sha": "16537ccfb61ea53e2c445d34b0b9641394247e20", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-thread-21.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9f20fcfdc2d8453df88ceb7e693debfcd678c0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9f20fcfdc2d8453df88ceb7e693debfcd678c0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-21.c?ref=7c9f20fcfdc2d8453df88ceb7e693debfcd678c0", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-thread2-stats -fdump-tree-optimized\" } */\n+\n+long a;\n+int b;\n+void bar64_(void);\n+void foo();\n+int main() {\n+  char c = 0;\n+  unsigned d = 10;\n+  int e = 2;\n+  for (; d; d--) {\n+    bar64_();\n+    b = d;\n+    e && (c = (e = 0) != 4) > 1;\n+  }\n+  if (c < 1)\n+    foo();\n+  a = b;\n+}\n+\n+/* We need to perform a non-multi-way branch FSM thread creating an\n+   irreducible loop in thread2 to allow followup threading to\n+   remove the call to foo ().  */\n+/* { dg-final { scan-tree-dump \"Jumps threaded: 1\" \"thread2\" } } */\n+/* { dg-final { scan-tree-dump-not \"foo\" \"optimized\" } } */"}, {"sha": "6d3f75209d1319962adac91bfc8abe20f5107d65", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp46.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9f20fcfdc2d8453df88ceb7e693debfcd678c0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp46.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9f20fcfdc2d8453df88ceb7e693debfcd678c0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp46.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp46.c?ref=7c9f20fcfdc2d8453df88ceb7e693debfcd678c0", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1 --param fsm-scale-path-blocks=1\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n \n int func_81 (int);\n int func_98 (int);"}, {"sha": "fcbb95b08beb246b16b8c8dbc1b954149a0d5e2f", "filename": "gcc/tree-ssa-threadbackward.cc", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9f20fcfdc2d8453df88ceb7e693debfcd678c0/gcc%2Ftree-ssa-threadbackward.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9f20fcfdc2d8453df88ceb7e693debfcd678c0/gcc%2Ftree-ssa-threadbackward.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadbackward.cc?ref=7c9f20fcfdc2d8453df88ceb7e693debfcd678c0", "patch": "@@ -868,22 +868,18 @@ back_threader_profitability::profitable_path_p (const vec<basic_block> &m_path,\n      a multiway branch, in which case we have deemed it worth losing\n      other loop optimizations later.\n \n-     We also consider it worth creating an irreducible inner loop if\n-     the number of copied statement is low relative to the length of\n-     the path -- in that case there's little the traditional loop\n-     optimizer would have done anyway, so an irreducible loop is not\n-     so bad.  */\n+     We also consider it worth creating an irreducible inner loop after\n+     loop optimizations if the number of copied statement is low.  */\n   if (!m_threaded_multiway_branch\n       && *creates_irreducible_loop\n-      && (m_n_insns * (unsigned) param_fsm_scale_path_stmts\n-\t  > (m_path.length () *\n-\t     (unsigned) param_fsm_scale_path_blocks)))\n-\n+      && (!(cfun->curr_properties & PROP_loop_opts_done)\n+\t  || (m_n_insns * param_fsm_scale_path_stmts\n+\t      >= param_max_jump_thread_duplication_stmts)))\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file,\n-\t\t \"  FAIL: Would create irreducible loop without threading \"\n-\t\t \"multiway branch.\\n\");\n+\t\t \"  FAIL: Would create irreducible loop early without \"\n+\t\t \"threading multiway branch.\\n\");\n       /* We compute creates_irreducible_loop only late.  */\n       return false;\n     }"}]}