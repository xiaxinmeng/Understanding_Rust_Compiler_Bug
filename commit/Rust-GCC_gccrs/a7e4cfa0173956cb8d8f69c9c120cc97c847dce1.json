{"sha": "a7e4cfa0173956cb8d8f69c9c120cc97c847dce1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdlNGNmYTAxNzM5NTZjYjhkOGY2OWM5YzEyMGNjOTdjODQ3ZGNlMQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-09-09T23:24:34Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-09T23:24:34Z"}, "message": "cp-tree.h (EXPR_STMT_ASSIGNS_THIS): New macro.\n\n\t* cp-tree.h (EXPR_STMT_ASSIGNS_THIS): New macro.\n\t(STMT_IS_FULL_EXPR_P): Likewise.\n\t(STMT_LINENO_FOR_FN_P): Likewise.\n\t(prep_stmt): New function.\n\t(building_stmt_tree): Tweak for safety.\n\t* pt.c (tsubst_expr): Use prep_stmt throughout.\n\t(add_tree): Move it to semantics.c\n\t* semantics.c (add_tree): Move it here.\n\t(finish_expr_stmt_real): New function.\n\t(finish_expr_stmt): Use it.\n\t(finish_if_stmt_cond): Use FINISH_COND.\n\t(finish_while_stmt_cond): Likewise.\n\t(finish_for_cond): Likewise.\n\t(finish_stmt_tree): Tweak line-number handling.\n\t(prep_stmt): New function.\n\t(expand_stmt): Use it.\n\nFrom-SVN: r29249", "tree": {"sha": "b4fbf98bc15df13a05c3c62243c777017b11dd9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4fbf98bc15df13a05c3c62243c777017b11dd9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7e4cfa0173956cb8d8f69c9c120cc97c847dce1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7e4cfa0173956cb8d8f69c9c120cc97c847dce1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7e4cfa0173956cb8d8f69c9c120cc97c847dce1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7e4cfa0173956cb8d8f69c9c120cc97c847dce1/comments", "author": null, "committer": null, "parents": [{"sha": "3b71623bf39b0934ee76d0223130de7dd6a44509", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b71623bf39b0934ee76d0223130de7dd6a44509", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b71623bf39b0934ee76d0223130de7dd6a44509"}], "stats": {"total": 213, "additions": 144, "deletions": 69}, "files": [{"sha": "f90f80498d17059a029f972c295288733896b7b0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7e4cfa0173956cb8d8f69c9c120cc97c847dce1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7e4cfa0173956cb8d8f69c9c120cc97c847dce1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a7e4cfa0173956cb8d8f69c9c120cc97c847dce1", "patch": "@@ -1,5 +1,22 @@\n 1999-09-09  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* cp-tree.h (EXPR_STMT_ASSIGNS_THIS): New macro.\n+\t(STMT_IS_FULL_EXPR_P): Likewise.\n+\t(STMT_LINENO_FOR_FN_P): Likewise.\n+\t(prep_stmt): New function.\n+\t(building_stmt_tree): Tweak for safety.\n+\t* pt.c (tsubst_expr): Use prep_stmt throughout.\n+\t(add_tree): Move it to semantics.c\n+\t* semantics.c (add_tree): Move it here.\n+\t(finish_expr_stmt_real): New function.\n+\t(finish_expr_stmt): Use it.\n+\t(finish_if_stmt_cond): Use FINISH_COND.\n+\t(finish_while_stmt_cond): Likewise.\n+\t(finish_for_cond): Likewise.\n+\t(finish_stmt_tree): Tweak line-number handling.\n+\t(prep_stmt): New function.\n+\t(expand_stmt): Use it.\n+\t\n \t* cp-tree.h (begin_switch_stmt): Adjust prototype.\n \t(finish_switch_cond): Likewise.\n \t* parse.y (simple_stmt): Adjust accordingly."}, {"sha": "bb47e9bd6217953942274e4c19dd55bde4da0ddb", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7e4cfa0173956cb8d8f69c9c120cc97c847dce1/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7e4cfa0173956cb8d8f69c9c120cc97c847dce1/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a7e4cfa0173956cb8d8f69c9c120cc97c847dce1", "patch": "@@ -29,6 +29,7 @@ Boston, MA 02111-1307, USA.  */\n /* Usage of TREE_LANG_FLAG_?:\n    0: BINFO_MARKED (BINFO nodes).\n       COMPOUND_STMT_NO_SCOPE (in COMPOUND_STMT).\n+      EXPR_STMT_ASSIGNS_THIS (in EXPR_STMT).\n       NEW_EXPR_USE_GLOBAL (in NEW_EXPR).\n       DELETE_EXPR_USE_GLOBAL (in DELETE_EXPR).\n       LOOKUP_EXPR_GLOBAL (in LOOKUP_EXPR).\n@@ -49,12 +50,14 @@ Boston, MA 02111-1307, USA.  */\n       INHERITED_VALUE_BINDING_P (in CPLUS_BINDING)\n       BASELINK_P (in TREE_LIST)\n       ICS_ELLIPSIS_FLAG (in _CONV)\n+      STMT_IS_FULL_EXPR_P (in _STMT)\n    2: IDENTIFIER_OPNAME_P.\n       BINFO_VBASE_MARKED.\n       BINFO_FIELDS_MARKED.\n       TYPE_VIRTUAL_P.\n       ICS_THIS_FLAG (in _CONV)\n-      BINDING_HAS_LEVEL_P (In CPLUS_BINDING)\n+      STMT_LINENO_FOR_FN_P (in _STMT)\n+      BINDING_HAS_LEVEL_P (in CPLUS_BINDING)\n    3: TYPE_USES_VIRTUAL_BASECLASSES (in a class TYPE).\n       BINFO_VTABLE_PATH_MARKED.\n       BINFO_PUSHDECLS_MARKED.\n@@ -1816,6 +1819,15 @@ struct lang_decl\n    constructor call, rather than an ordinary function call.  */\n #define AGGR_INIT_VIA_CTOR_P(NODE) TREE_LANG_FLAG_0 (NODE)\n \n+/* Nonzero if this statement contained the first assigned to `this' in\n+   the current function.  (Of course, one cannot assign to `this' in\n+   ANSI/ISO C++, but we still support assignments to this with\n+   -fthis-is-variable.)  */\n+#define EXPR_STMT_ASSIGNS_THIS(NODE) TREE_LANG_FLAG_0 ((NODE))\n+\n+/* Nonzero if this statement should be considered a full-expression.  */\n+#define STMT_IS_FULL_EXPR_P(NODE) TREE_LANG_FLAG_1 ((NODE))\n+\n /* The TYPE_MAIN_DECL for a class template type is a TYPE_DECL, not a\n    TEMPLATE_DECL.  This macro determines whether or not a given class\n    type is really a template type, as opposed to an instantiation or\n@@ -2430,10 +2442,17 @@ extern int flag_new_for_scope;\n #define ASM_VOLATILE_P(NODE)\t\t\t\\\n   (ASM_CV_QUAL ((NODE)) != NULL_TREE)\n \n-/* The line-number at which a statement began.  */\n+/* The line-number at which a statement began.  But if\n+   STMT_LINENO_FOR_FN_P does holds, then this macro gives the\n+   line number for the end of the current function instead.  */\n #define STMT_LINENO(NODE)\t\t\t\\\n   (TREE_COMPLEXITY ((NODE)))\n \n+/* If non-zero, the STMT_LINENO for NODE is the line at which the\n+   function ended.  */\n+#define STMT_LINENO_FOR_FN_P(NODE) \t\t\\\n+  (TREE_LANG_FLAG_2 ((NODE)))\n+\n /* The parameters for a call-declarator.  */\n #define CALL_DECLARATOR_PARMS(NODE) \\\n   (TREE_PURPOSE (TREE_OPERAND ((NODE), 1)))\n@@ -3635,10 +3654,11 @@ extern tree expand_stmt                         PROTO((tree));\n extern void expand_body                         PROTO((tree));\n extern void begin_stmt_tree                     PROTO((tree));\n extern void finish_stmt_tree                    PROTO((tree));\n+extern void prep_stmt                           PROTO((tree));\n /* Non-zero if we are presently building a statement tree, rather\n    than expanding each statement as we encounter it.  */\n-#define building_stmt_tree() \\\n-  (processing_template_decl || !expanding_p)\n+#define building_stmt_tree()\t\t\t\t\t  \\\n+  (current_function && (processing_template_decl || !expanding_p))\n \n /* in spew.c */\n extern void init_spew\t\t\t\tPROTO((void));"}, {"sha": "9fd1f2f23b92ce85012f4356b290cd80621a5ab6", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7e4cfa0173956cb8d8f69c9c120cc97c847dce1/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7e4cfa0173956cb8d8f69c9c120cc97c847dce1/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a7e4cfa0173956cb8d8f69c9c120cc97c847dce1", "patch": "@@ -7235,13 +7235,15 @@ tsubst_expr (t, args, complain, in_decl)\n   switch (TREE_CODE (t))\n     {\n     case RETURN_INIT:\n+      prep_stmt (t);\n       finish_named_return_value\n \t(TREE_OPERAND (t, 0),\n \t tsubst_expr (TREE_OPERAND (t, 1), args, /*complain=*/1, in_decl));\n       tsubst_expr (TREE_CHAIN (t), args, complain, in_decl);\n       break;\n \n     case CTOR_INITIALIZER:\n+      prep_stmt (t);\n       current_member_init_list\n \t= tsubst_expr_values (TREE_OPERAND (t, 0), args);\n       current_base_init_list\n@@ -7251,13 +7253,18 @@ tsubst_expr (t, args, complain, in_decl)\n       break;\n \n     case RETURN_STMT:\n-      lineno = STMT_LINENO (t);\n+      prep_stmt (t);\n       finish_return_stmt (tsubst_expr (RETURN_EXPR (t),\n \t\t\t\t       args, complain, in_decl));\n       break;\n \n     case EXPR_STMT:\n-      lineno = STMT_LINENO (t);\n+      prep_stmt (t);\n+      /* If we're doing tsubst'ing, then we should not yet have done\n+\t semantic analysisy, so we should not know that this statement\n+\t assigns to the `this' pointer.  */\n+      my_friendly_assert (EXPR_STMT_ASSIGNS_THIS (t) == 0,\n+\t\t\t  19990831);\n       finish_expr_stmt (tsubst_expr (EXPR_STMT_EXPR (t),\n \t\t\t\t     args, complain, in_decl));\n       break;\n@@ -7268,7 +7275,7 @@ tsubst_expr (t, args, complain, in_decl)\n \ttree decl;\n \ttree init;\n \n-\tlineno = STMT_LINENO (t);\n+\tprep_stmt (t);\n \tdecl = DECL_STMT_DECL (t);\n \tif (TREE_CODE (decl) == LABEL_DECL)\n \t  finish_label_decl (DECL_NAME (decl));\n@@ -7296,7 +7303,7 @@ tsubst_expr (t, args, complain, in_decl)\n     case FOR_STMT:\n       {\n \ttree tmp;\n-\tlineno = STMT_LINENO (t);\n+\tprep_stmt (t);\n \n \tstmt = begin_for_stmt ();\n \tfor (tmp = FOR_INIT_STMT (t); tmp; tmp = TREE_CHAIN (tmp))\n@@ -7314,7 +7321,7 @@ tsubst_expr (t, args, complain, in_decl)\n \n     case WHILE_STMT:\n       {\n-\tlineno = STMT_LINENO (t);\n+\tprep_stmt (t);\n \tstmt = begin_while_stmt ();\n \tfinish_while_stmt_cond (tsubst_expr (WHILE_COND (t),\n \t\t\t\t\t     args, complain, in_decl),\n@@ -7326,7 +7333,7 @@ tsubst_expr (t, args, complain, in_decl)\n \n     case DO_STMT:\n       {\n-\tlineno = STMT_LINENO (t);\n+\tprep_stmt (t);\n \tstmt = begin_do_stmt ();\n \ttsubst_expr (DO_BODY (t), args, complain, in_decl);\n \tfinish_do_body (stmt);\n@@ -7340,7 +7347,7 @@ tsubst_expr (t, args, complain, in_decl)\n       {\n \ttree tmp;\n \n-\tlineno = STMT_LINENO (t);\n+\tprep_stmt (t);\n \tstmt = begin_if_stmt ();\n \tfinish_if_stmt_cond (tsubst_expr (IF_COND (t),\n \t\t\t\t\t  args, complain, in_decl),\n@@ -7367,7 +7374,7 @@ tsubst_expr (t, args, complain, in_decl)\n       {\n \ttree substmt;\n \n-\tlineno = STMT_LINENO (t);\n+\tprep_stmt (t);\n \tstmt = begin_compound_stmt (COMPOUND_STMT_NO_SCOPE (t));\n \tfor (substmt = COMPOUND_BODY (t); \n \t     substmt != NULL_TREE;\n@@ -7378,20 +7385,20 @@ tsubst_expr (t, args, complain, in_decl)\n       break;\n \n     case BREAK_STMT:\n-      lineno = STMT_LINENO (t);\n+      prep_stmt (t);\n       finish_break_stmt ();\n       break;\n \n     case CONTINUE_STMT:\n-      lineno = STMT_LINENO (t);\n+      prep_stmt (t);\n       finish_continue_stmt ();\n       break;\n \n     case SWITCH_STMT:\n       {\n \ttree val;\n \n-\tlineno = STMT_LINENO (t);\n+\tprep_stmt (t);\n \tstmt = begin_switch_stmt ();\n \tval = tsubst_expr (SWITCH_COND (t), args, complain, in_decl);\n \tfinish_switch_cond (val, stmt);\n@@ -7401,6 +7408,7 @@ tsubst_expr (t, args, complain, in_decl)\n       break;\n \n     case CASE_LABEL:\n+      prep_stmt (t);\n       finish_case_label (tsubst_expr (CASE_LOW (t), args, complain, in_decl),\n \t\t\t tsubst_expr (CASE_HIGH (t), args, complain, in_decl));\n       break;\n@@ -7411,7 +7419,7 @@ tsubst_expr (t, args, complain, in_decl)\n       break;\n \n     case GOTO_STMT:\n-      lineno = STMT_LINENO (t);\n+      prep_stmt (t);\n       t = GOTO_DESTINATION (t);\n       if (TREE_CODE (t) != LABEL_DECL)\n \t/* Computed goto's must be tsubst'd into.  On the other hand,\n@@ -7424,7 +7432,7 @@ tsubst_expr (t, args, complain, in_decl)\n       break;\n \n     case ASM_STMT:\n-      lineno = STMT_LINENO (t);\n+      prep_stmt (t);\n       finish_asm_stmt (ASM_CV_QUAL (t),\n \t\t       tsubst_expr (ASM_STRING (t), args, complain, in_decl),\n \t\t       tsubst_expr (ASM_OUTPUTS (t), args, complain, in_decl),\n@@ -7434,7 +7442,7 @@ tsubst_expr (t, args, complain, in_decl)\n       break;\n \n     case TRY_BLOCK:\n-      lineno = STMT_LINENO (t);\n+      prep_stmt (t);\n       stmt = begin_try_block ();\n       tsubst_expr (TRY_STMTS (t), args, complain, in_decl);\n       finish_try_block (stmt);\n@@ -7452,7 +7460,7 @@ tsubst_expr (t, args, complain, in_decl)\n       break;\n \n     case HANDLER:\n-      lineno = STMT_LINENO (t);\n+      prep_stmt (t);\n       stmt = begin_handler ();\n       if (HANDLER_PARMS (t))\n \texpand_start_catch_block\n@@ -7466,7 +7474,7 @@ tsubst_expr (t, args, complain, in_decl)\n       break;\n \n     case TAG_DEFN:\n-      lineno = STMT_LINENO (t);\n+      prep_stmt (t);\n       t = TREE_TYPE (t);\n       if (TREE_CODE (t) == ENUMERAL_TYPE)\n \ttsubst (t, args, complain, NULL_TREE);\n@@ -9853,14 +9861,6 @@ tsubst_expr_values (t, argvec)\n   return first;\n }\n \n-void\n-add_tree (t)\n-     tree t;\n-{\n-  last_tree = TREE_CHAIN (last_tree) = t;\n-}\n-\n-\n void\n begin_tree ()\n {"}, {"sha": "0b65dee105cf80a30b486ba7b4385531316d4884", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 79, "deletions": 41, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7e4cfa0173956cb8d8f69c9c120cc97c847dce1/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7e4cfa0173956cb8d8f69c9c120cc97c847dce1/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=a7e4cfa0173956cb8d8f69c9c120cc97c847dce1", "patch": "@@ -44,6 +44,7 @@\n static void expand_stmts PROTO((tree));\n static void do_pushlevel PROTO((void));\n static tree do_poplevel PROTO((void));\n+static void finish_expr_stmt_real PROTO((tree, int));\n static tree expand_cond PROTO((tree));\n \n /* When parsing a template, LAST_TREE contains the last statement\n@@ -75,11 +76,29 @@ static tree expand_cond PROTO((tree));\n       substmt = cond;\t\t\t\t\\\n   } while (0)\n   \n-/* Finish an expression-statement, whose EXPRESSION is as indicated.  */\n+/* T is a statement.  Add it to the statement-tree.  */\n \n-void \n-finish_expr_stmt (expr)\n+void\n+add_tree (t)\n+     tree t;\n+{\n+  /* Add T to the statement-tree.  */\n+  last_tree = TREE_CHAIN (last_tree) = t;\n+\n+  /* When we expand a statement-tree, we must know whether or not the\n+     statements are full-expresions.  We record that fact here.  */\n+  if (building_stmt_tree ())\n+    STMT_IS_FULL_EXPR_P (last_tree) = stmts_are_full_exprs_p;\n+}\n+\n+/* Finish an expression-statement, whose EXPRESSION is as indicated.\n+   If ASSIGNED_THIS is non-zero, then this statement just assigned to\n+   the `this' pointer.  */\n+\n+static void \n+finish_expr_stmt_real (expr, assigned_this)\n      tree expr;\n+     int assigned_this;\n {\n   if (expr != NULL_TREE)\n     {\n@@ -109,13 +128,27 @@ finish_expr_stmt (expr)\n \t}\n     }\n \n+  /* If this statement assigned to the `this' pointer, record that\n+     fact for finish_stmt.  */\n+  if (assigned_this)\n+    current_function_just_assigned_this = 1;\n+\n   finish_stmt ();\n \n   /* This was an expression-statement, so we save the type of the\n      expression.  */\n   last_expr_type = expr ? TREE_TYPE (expr) : NULL_TREE;\n }\n \n+/* Like finish_expr_stmt_real, but ASSIGNS_THIS is always zero.  */\n+\n+void\n+finish_expr_stmt (expr)\n+     tree expr;\n+{\n+  finish_expr_stmt_real (expr, /*assigns_this=*/0);\n+}\n+\n /* Begin an if-statement.  Returns a newly created IF_STMT if\n    appropriate.  */\n \n@@ -146,12 +179,7 @@ finish_if_stmt_cond (cond, if_stmt)\n      tree if_stmt;\n {\n   if (building_stmt_tree ())\n-    {\n-      if (last_tree != if_stmt)\n-\tRECHAIN_STMTS_FROM_LAST (if_stmt, IF_COND (if_stmt));\n-      else\n-\tIF_COND (if_stmt) = cond;\n-    }\n+    FINISH_COND (cond, if_stmt, IF_COND (if_stmt));\n   else\n     {\n       emit_line_note (input_filename, lineno);\n@@ -244,12 +272,7 @@ finish_while_stmt_cond (cond, while_stmt)\n      tree while_stmt;\n {\n   if (building_stmt_tree ())\n-    {\n-      if (last_tree != while_stmt)\n-\tRECHAIN_STMTS_FROM_LAST (while_stmt, WHILE_COND (while_stmt)); \n-      else\n-\tTREE_OPERAND (while_stmt, 0) = cond;\n-    }\n+    FINISH_COND (cond, while_stmt, WHILE_COND (while_stmt));\n   else\n     {\n       emit_line_note (input_filename, lineno);\n@@ -409,12 +432,7 @@ finish_for_cond (cond, for_stmt)\n      tree for_stmt;\n {\n   if (building_stmt_tree ())\n-    {\n-      if (last_tree != for_stmt)\n-\tRECHAIN_STMTS_FROM_LAST (for_stmt, FOR_COND (for_stmt));\n-      else\n-\tFOR_COND (for_stmt) = cond;\n-    }\n+    FINISH_COND (cond, for_stmt, FOR_COND (for_stmt));\n   else\n     {\n       emit_line_note (input_filename, lineno);\n@@ -1973,7 +1991,28 @@ void\n finish_stmt_tree (fn)\n      tree fn;\n {\n-  DECL_SAVED_TREE (fn) = TREE_CHAIN (DECL_SAVED_TREE (fn));\n+  tree stmt;\n+  \n+  /* Remove the fake extra statement added in begin_stmt_tree.  */\n+  stmt = TREE_CHAIN (DECL_SAVED_TREE (fn));\n+  DECL_SAVED_TREE (fn) = stmt;\n+\n+  /* The line-number recorded in the outermost statement in a function\n+     is the line number of the end of the function.  */\n+  STMT_LINENO (stmt) = lineno;\n+  STMT_LINENO_FOR_FN_P (stmt) = 1;\n+}\n+\n+/* We're about to expand T, a statement.  Set up appropriate context\n+   for the substitution.  */\n+\n+void\n+prep_stmt (t)\n+     tree t;\n+{\n+  if (!STMT_LINENO_FOR_FN_P (t))\n+    lineno = STMT_LINENO (t);\n+  stmts_are_full_exprs_p = STMT_IS_FULL_EXPR_P (t);\n }\n \n /* Some statements, like for-statements or if-statements, require a\n@@ -2013,19 +2052,28 @@ tree\n expand_stmt (t)\n      tree t;\n {\n+  int saved_stmts_are_full_exprs_p;\n+  tree rval;\n+\n   if (t == NULL_TREE || t == error_mark_node)\n     return NULL_TREE;\n \n+  /* Assume we'll have nothing to return.  */\n+  rval = NULL_TREE;\n+\n+  /* Set up context appropriately for handling this statement.  */\n+  saved_stmts_are_full_exprs_p = stmts_are_full_exprs_p;\n+  prep_stmt (t);\n+\n   switch (TREE_CODE (t))\n     {\n     case RETURN_STMT:\n-      lineno = STMT_LINENO (t);\n       finish_return_stmt (RETURN_EXPR (t));\n       break;\n \n     case EXPR_STMT:\n-      lineno = STMT_LINENO (t);\n-      finish_expr_stmt (EXPR_STMT_EXPR (t));\n+      finish_expr_stmt_real (EXPR_STMT_EXPR (t),\n+\t\t\t     EXPR_STMT_ASSIGNS_THIS (t));\n       break;\n \n     case DECL_STMT:\n@@ -2064,7 +2112,6 @@ expand_stmt (t)\n       {\n \ttree tmp;\n \n-\tlineno = STMT_LINENO (t);\n \tbegin_for_stmt ();\n \tfor (tmp = FOR_INIT_STMT (t); tmp; tmp = TREE_CHAIN (tmp))\n \t  expand_stmt (tmp);\n@@ -2079,7 +2126,6 @@ expand_stmt (t)\n \n     case WHILE_STMT:\n       {\n-\tlineno = STMT_LINENO (t);\n \tbegin_while_stmt ();\n \tfinish_while_stmt_cond (expand_cond (WHILE_COND (t)), NULL_TREE);\n \texpand_stmt (WHILE_BODY (t));\n@@ -2089,7 +2135,6 @@ expand_stmt (t)\n \n     case DO_STMT:\n       {\n-\tlineno = STMT_LINENO (t);\n \tbegin_do_stmt ();\n \texpand_stmt (DO_BODY (t));\n \tfinish_do_body (NULL_TREE);\n@@ -2098,7 +2143,6 @@ expand_stmt (t)\n       break;\n \n     case IF_STMT:\n-      lineno = STMT_LINENO (t);\n       begin_if_stmt ();\n       finish_if_stmt_cond (expand_cond (IF_COND (t)), NULL_TREE);\n       if (THEN_CLAUSE (t))\n@@ -2116,27 +2160,24 @@ expand_stmt (t)\n       break;\n \n     case COMPOUND_STMT:\n-      lineno = STMT_LINENO (t);\n       begin_compound_stmt (COMPOUND_STMT_NO_SCOPE (t));\n       expand_stmts (COMPOUND_BODY (t));\n-      return finish_compound_stmt (COMPOUND_STMT_NO_SCOPE (t), \n+      rval = finish_compound_stmt (COMPOUND_STMT_NO_SCOPE (t), \n \t\t\t\t   NULL_TREE);\n+      break;\n \n     case BREAK_STMT:\n-      lineno = STMT_LINENO (t);\n       finish_break_stmt ();\n       break;\n \n     case CONTINUE_STMT:\n-      lineno = STMT_LINENO (t);\n       finish_continue_stmt ();\n       break;\n \n     case SWITCH_STMT:\n       {\n \ttree cond;\n \n-\tlineno = STMT_LINENO (t);\n \tbegin_switch_stmt ();\n \tcond = expand_cond (SWITCH_COND (t));\n \tfinish_switch_cond (cond, NULL_TREE);\n@@ -2150,26 +2191,22 @@ expand_stmt (t)\n       break;\n \n     case LABEL_STMT:\n-      lineno = STMT_LINENO (t);\n       finish_label_stmt (DECL_NAME (LABEL_STMT_LABEL (t)));\n       break;\n \n     case GOTO_STMT:\n-      lineno = STMT_LINENO (t);\n       if (TREE_CODE (GOTO_DESTINATION (t)) == LABEL_DECL)\n \tfinish_goto_stmt (DECL_NAME (GOTO_DESTINATION (t)));\n       else\n \tfinish_goto_stmt (GOTO_DESTINATION (t));\n       break;\n \n     case ASM_STMT:\n-      lineno = STMT_LINENO (t);\n       finish_asm_stmt (ASM_CV_QUAL (t), ASM_STRING (t), ASM_OUTPUTS\n \t\t       (t), ASM_INPUTS (t), ASM_CLOBBERS (t));\n       break;\n \n     case TRY_BLOCK:\n-      lineno = STMT_LINENO (t);\n       if (CLEANUP_P (t))\n \t{\n \t  expand_eh_region_start ();\n@@ -2187,7 +2224,6 @@ expand_stmt (t)\n       break;\n \n     case HANDLER:\n-      lineno = STMT_LINENO (t);\n       begin_handler ();\n       if (HANDLER_PARMS (t))\n \texpand_start_catch_block (DECL_STMT_DECL (HANDLER_PARMS (t)));\n@@ -2199,7 +2235,6 @@ expand_stmt (t)\n       break;\n \n     case SUBOBJECT:\n-      lineno = STMT_LINENO (t);\n       finish_subobject (SUBOBJECT_CLEANUP (t));\n       break;\n \n@@ -2208,7 +2243,10 @@ expand_stmt (t)\n       break;\n     }\n \n-  return NULL_TREE;\n+  /* Restore saved state.  */\n+  stmts_are_full_exprs_p = saved_stmts_are_full_exprs_p;\n+\n+  return rval;\n }\n \n /* Generate RTL for FN.  */"}]}