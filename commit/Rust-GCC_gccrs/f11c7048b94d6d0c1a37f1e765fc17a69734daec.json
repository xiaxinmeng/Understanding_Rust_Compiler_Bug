{"sha": "f11c7048b94d6d0c1a37f1e765fc17a69734daec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjExYzcwNDhiOTRkNmQwYzFhMzdmMWU3NjVmYzE3YTY5NzM0ZGFlYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-02-07T21:27:55Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-02-07T21:27:55Z"}, "message": "re PR c++/56241 (ICE in toplev.c:332 on invalid)\n\n\tPR c++/56241\n\t* init.c (build_vec_init): Don't append NULL values into new_vec.\n\t(build_zero_init_1): Don't push anything into v if recursive call\n\treturned NULL_TREE.\n\t(build_value_init_noctor): Don't push anything into v if\n\tbuild_value_init call returned NULL_TREE.\n\n\t* g++.dg/parse/crash61.C: New test.\n\nFrom-SVN: r195866", "tree": {"sha": "00eb9d8c1970a6ee44878a9aedfc5bdd8718e67a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00eb9d8c1970a6ee44878a9aedfc5bdd8718e67a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f11c7048b94d6d0c1a37f1e765fc17a69734daec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f11c7048b94d6d0c1a37f1e765fc17a69734daec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f11c7048b94d6d0c1a37f1e765fc17a69734daec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f11c7048b94d6d0c1a37f1e765fc17a69734daec/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "12eabbda6bd7fab8482c288ed30c73b15c49680c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12eabbda6bd7fab8482c288ed30c73b15c49680c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12eabbda6bd7fab8482c288ed30c73b15c49680c"}], "stats": {"total": 55, "additions": 39, "deletions": 16}, "files": [{"sha": "6d29ff62c727c77feaa7c7a569e9d96d6304e136", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f11c7048b94d6d0c1a37f1e765fc17a69734daec/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f11c7048b94d6d0c1a37f1e765fc17a69734daec/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f11c7048b94d6d0c1a37f1e765fc17a69734daec", "patch": "@@ -1,5 +1,12 @@\n 2013-02-07  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/56241\n+\t* init.c (build_vec_init): Don't append NULL values into new_vec.\n+\t(build_zero_init_1): Don't push anything into v if recursive call\n+\treturned NULL_TREE.\n+\t(build_value_init_noctor): Don't push anything into v if\n+\tbuild_value_init call returned NULL_TREE.\n+\n \tPR c++/56239\n \t* parser.c (cp_parser_token_starts_cast_expression): Renamed to...\n \t(cp_parser_tokens_start_cast_expression): ... this.  Change parameter"}, {"sha": "6f46404760ebb40c6c82c9f94530313749cb7142", "filename": "gcc/cp/init.c", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f11c7048b94d6d0c1a37f1e765fc17a69734daec/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f11c7048b94d6d0c1a37f1e765fc17a69734daec/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=f11c7048b94d6d0c1a37f1e765fc17a69734daec", "patch": "@@ -253,8 +253,6 @@ build_zero_init_1 (tree type, tree nelts, bool static_storage_p,\n \t{\n \t  constructor_elt ce;\n \n-\t  vec_alloc (v, 1);\n-\n \t  /* If this is a one element array, we just use a regular init.  */\n \t  if (tree_int_cst_equal (size_zero_node, max_index))\n \t    ce.index = size_zero_node;\n@@ -265,7 +263,11 @@ build_zero_init_1 (tree type, tree nelts, bool static_storage_p,\n \t  ce.value = build_zero_init_1 (TREE_TYPE (type),\n \t\t\t\t\t /*nelts=*/NULL_TREE,\n \t\t\t\t\t static_storage_p, NULL_TREE);\n-\t  v->quick_push (ce);\n+\t  if (ce.value)\n+\t    {\n+\t      vec_alloc (v, 1);\n+\t      v->quick_push (ce);\n+\t    }\n \t}\n \n       /* Build a constructor to contain the initializations.  */\n@@ -447,25 +449,27 @@ build_value_init_noctor (tree type, tsubst_flags_t complain)\n \t{\n \t  constructor_elt ce;\n \n-\t  vec_alloc (v, 1);\n-\n \t  /* If this is a one element array, we just use a regular init.  */\n \t  if (tree_int_cst_equal (size_zero_node, max_index))\n \t    ce.index = size_zero_node;\n \t  else\n \t    ce.index = build2 (RANGE_EXPR, sizetype, size_zero_node, max_index);\n \n \t  ce.value = build_value_init (TREE_TYPE (type), complain);\n-\t  v->quick_push (ce);\n+\t  if (ce.value)\n+\t    {\n+\t      if (ce.value == error_mark_node)\n+\t\treturn error_mark_node;\n \n-\t  if (ce.value == error_mark_node)\n-\t    return error_mark_node;\n+\t      vec_alloc (v, 1);\n+\t      v->quick_push (ce);\n \n-\t  /* We shouldn't have gotten here for anything that would need\n-\t     non-trivial initialization, and gimplify_init_ctor_preeval\n-\t     would need to be fixed to allow it.  */\n-\t  gcc_assert (TREE_CODE (ce.value) != TARGET_EXPR\n-\t\t      && TREE_CODE (ce.value) != AGGR_INIT_EXPR);\n+\t      /* We shouldn't have gotten here for anything that would need\n+\t\t non-trivial initialization, and gimplify_init_ctor_preeval\n+\t\t would need to be fixed to allow it.  */\n+\t      gcc_assert (TREE_CODE (ce.value) != TARGET_EXPR\n+\t\t\t  && TREE_CODE (ce.value) != AGGR_INIT_EXPR);\n+\t    }\n \t}\n \n       /* Build a constructor to contain the initializations.  */\n@@ -3469,9 +3473,12 @@ build_vec_init (tree base, tree maxindex, tree init,\n \t      else\n \t\t{\n \t\t  if (do_static_init)\n-\t\t    CONSTRUCTOR_APPEND_ELT (new_vec, field,\n-\t\t\t\t\t    build_zero_init (TREE_TYPE (e),\n-\t\t\t\t\t\t\t     NULL_TREE, true));\n+\t\t    {\n+\t\t      tree value = build_zero_init (TREE_TYPE (e), NULL_TREE,\n+\t\t\t\t\t\t    true);\n+\t\t      if (value)\n+\t\t\tCONSTRUCTOR_APPEND_ELT (new_vec, field, value);\n+\t\t    }\n \t\t  saw_non_const = true;\n \t\t}\n \t    }"}, {"sha": "c8ce975535d63f6483f5e9e185c57b86e4e77b9e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f11c7048b94d6d0c1a37f1e765fc17a69734daec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f11c7048b94d6d0c1a37f1e765fc17a69734daec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f11c7048b94d6d0c1a37f1e765fc17a69734daec", "patch": "@@ -1,5 +1,8 @@\n 2013-02-07  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/56241\n+\t* g++.dg/parse/crash61.C: New test.\n+\n \tPR c++/56239\n \t* g++.dg/parse/pr56239.C: New test.\n "}, {"sha": "790df0e4bc43173e6200702c1278295894f28c90", "filename": "gcc/testsuite/g++.dg/parse/crash61.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f11c7048b94d6d0c1a37f1e765fc17a69734daec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash61.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f11c7048b94d6d0c1a37f1e765fc17a69734daec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash61.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash61.C?ref=f11c7048b94d6d0c1a37f1e765fc17a69734daec", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/56241\n+// { dg-do compile }\n+\n+struct pair { constexpr pair (const) : }; // { dg-error \"\" }\n+template <0> make_pair () {}\t\t  // { dg-error \"\" }\n+pair prefix[] = { 0, make_pair }\t  // { dg-error \"\" }"}]}