{"sha": "8f89ba7c3d2dfae641be91eda966504e594573ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY4OWJhN2MzZDJkZmFlNjQxYmU5MWVkYTk2NjUwNGU1OTQ1NzNlZg==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2010-07-12T11:57:16Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2010-07-12T11:57:16Z"}, "message": "re PR pch/14940 (PCH largefile test fails on various platforms)\n\n\tPR pch/14940\n\t* config/host-solaris.c (mmap_fixed): New function.\n\t(sol_gt_pch_get_address): Use it.\n\t(sol_gt_pch_use_address): Likewise.\n\nFrom-SVN: r162074", "tree": {"sha": "eb5fdfca019674f894b750c24737d58970ebbf78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb5fdfca019674f894b750c24737d58970ebbf78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f89ba7c3d2dfae641be91eda966504e594573ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f89ba7c3d2dfae641be91eda966504e594573ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f89ba7c3d2dfae641be91eda966504e594573ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f89ba7c3d2dfae641be91eda966504e594573ef/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ae6a0535822d2ca38d3347f3ef6e890bd7039f75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae6a0535822d2ca38d3347f3ef6e890bd7039f75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae6a0535822d2ca38d3347f3ef6e890bd7039f75"}], "stats": {"total": 76, "additions": 46, "deletions": 30}, "files": [{"sha": "47a87affe3f14868acd4e1fcc6dcbe587a35c32b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f89ba7c3d2dfae641be91eda966504e594573ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f89ba7c3d2dfae641be91eda966504e594573ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f89ba7c3d2dfae641be91eda966504e594573ef", "patch": "@@ -1,3 +1,10 @@\n+2010-07-12  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\tPR pch/14940\n+\t* config/host-solaris.c (mmap_fixed): New function.\n+\t(sol_gt_pch_get_address): Use it.\n+\t(sol_gt_pch_use_address): Likewise.\n+\n 2010-07-12  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config.gcc (i[34567]86-*-solaris2*): Default with_arch_32 to"}, {"sha": "835832b9c21f33be7e0df1c566c74b8bfacf82b2", "filename": "gcc/config/host-solaris.c", "status": "modified", "additions": 39, "deletions": 30, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f89ba7c3d2dfae641be91eda966504e594573ef/gcc%2Fconfig%2Fhost-solaris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f89ba7c3d2dfae641be91eda966504e594573ef/gcc%2Fconfig%2Fhost-solaris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fhost-solaris.c?ref=8f89ba7c3d2dfae641be91eda966504e594573ef", "patch": "@@ -30,6 +30,41 @@\n #undef HOST_HOOKS_GT_PCH_USE_ADDRESS\n #define HOST_HOOKS_GT_PCH_USE_ADDRESS sol_gt_pch_use_address\n \n+/* Before Solaris 11, the mmap ADDR parameter is mostly ignored without\n+   MAP_FIXED set.  Before we give up, search the desired address space with\n+   mincore to see if the space is really free.  */\n+\n+static void *\n+mmap_fixed (void *addr, size_t len, int prot, int flags, int fd, off_t off)\n+{\n+  void *base;\n+\n+  base = mmap ((caddr_t) addr, len, prot, flags, fd, off);\n+  \n+  if (base != addr)\n+    {\n+      size_t page_size = getpagesize();\n+      char one_byte;\n+      size_t i;\n+\n+      if (base != (void *) MAP_FAILED)\n+\tmunmap ((caddr_t) base, len);\n+\n+      errno = 0;\n+      for (i = 0; i < len; i += page_size)\n+\tif (mincore ((char *)addr + i, page_size, (char *) &one_byte) == -1\n+\t    && errno == ENOMEM)\n+\t  continue; /* The page is not mapped.  */\n+\telse\n+\t  break;\n+\n+      if (i >= len)\n+\tbase = mmap ((caddr_t) addr, len, prot, flags | MAP_FIXED, fd, off);\n+    }\n+\n+  return base;\n+}\n+\n /* For various ports, try to guess a fixed spot in the vm space\n    that's probably free.  Based on McDougall, Mauro, Solaris Internals, 2nd\n    ed., p.460-461, fig. 9-3, 9-4, 9-5.  */\n@@ -55,8 +90,8 @@ sol_gt_pch_get_address (size_t size, int fd)\n {\n   void *addr;\n \n-  addr = mmap ((caddr_t) TRY_EMPTY_VM_SPACE, size, PROT_READ | PROT_WRITE,\n-\t       MAP_PRIVATE, fd, 0);\n+  addr = mmap_fixed ((caddr_t) TRY_EMPTY_VM_SPACE, size,\n+\t\t     PROT_READ | PROT_WRITE, MAP_PRIVATE, fd, 0);\n \n   /* If we failed the map, that means there's *no* free space.  */\n   if (addr == (void *) MAP_FAILED)\n@@ -81,34 +116,8 @@ sol_gt_pch_use_address (void *base, size_t size, int fd, size_t offset)\n   if (size == 0)\n     return -1;\n \n-  addr = mmap ((caddr_t) base, size, PROT_READ | PROT_WRITE, MAP_PRIVATE,\n-\t       fd, offset);\n-\n-  /* Solaris isn't good about honoring the mmap START parameter\n-     without MAP_FIXED set.  Before we give up, search the desired\n-     address space with mincore to see if the space is really free.  */\n-  if (addr != base)\n-    {\n-      size_t page_size = getpagesize();\n-      char one_byte;\n-      size_t i;\n-\n-      if (addr != (void *) MAP_FAILED)\n-\tmunmap ((caddr_t) addr, size);\n-\n-      errno = 0;\n-      for (i = 0; i < size; i += page_size)\n-\tif (mincore ((char *)base + i, page_size, (char *) &one_byte) == -1\n-\t    && errno == ENOMEM)\n-\t  continue; /* The page is not mapped.  */\n-\telse\n-\t  break;\n-\n-      if (i >= size)\n-\taddr = mmap ((caddr_t) base, size, \n-\t\t     PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_FIXED,\n-\t\t     fd, offset);\n-    }\n+  addr = mmap_fixed ((caddr_t) base, size,\n+\t\t     PROT_READ | PROT_WRITE, MAP_PRIVATE, fd, offset);\n \n   return addr == base ? 1 : -1;\n }"}]}