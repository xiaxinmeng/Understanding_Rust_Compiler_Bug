{"sha": "07fba8d6f2da481c8d2915e66d49525c65ca04d6", "node_id": "C_kwDOANBUbNoAKDA3ZmJhOGQ2ZjJkYTQ4MWM4ZDI5MTVlNjZkNDk1MjVjNjVjYTA0ZDY", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-01-31T22:13:25Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-03T06:57:38Z"}, "message": "RISC-V: Add vsll.vx C++ API tests\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/vsll_vx-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vsll_vx-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vsll_vx-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vsll_vx_m-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vsll_vx_m-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vsll_vx_m-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vsll_vx_mu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vsll_vx_mu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vsll_vx_mu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vsll_vx_tu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vsll_vx_tu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vsll_vx_tu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vsll_vx_tum-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vsll_vx_tum-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vsll_vx_tum-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vsll_vx_tumu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vsll_vx_tumu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vsll_vx_tumu-3.c: New test.", "tree": {"sha": "abc90be54a731517fc4f5be4064cf7a5e8a44981", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abc90be54a731517fc4f5be4064cf7a5e8a44981"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07fba8d6f2da481c8d2915e66d49525c65ca04d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07fba8d6f2da481c8d2915e66d49525c65ca04d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07fba8d6f2da481c8d2915e66d49525c65ca04d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07fba8d6f2da481c8d2915e66d49525c65ca04d6/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f890b9e76f98b00a063a4fa9913c715fa3196ab0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f890b9e76f98b00a063a4fa9913c715fa3196ab0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f890b9e76f98b00a063a4fa9913c715fa3196ab0"}], "stats": {"total": 5256, "additions": 5256, "deletions": 0}, "files": [{"sha": "bae766913e7d7bdd78bef47457d8b5b1b72d5ec5", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsll_vx-1.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx-1.c?ref=07fba8d6f2da481c8d2915e66d49525c65ca04d6", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsll_vx_i8mf8(vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf8(op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll_vx_i8mf4(vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf4(op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll_vx_i8mf2(vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf2(op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll_vx_i8m1(vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m1(op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll_vx_i8m2(vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m2(op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll_vx_i8m4(vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m4(op1,shift,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll_vx_i8m8(vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m8(op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll_vx_i16mf4(vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf4(op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll_vx_i16mf2(vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf2(op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll_vx_i16m1(vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m1(op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll_vx_i16m2(vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m2(op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll_vx_i16m4(vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m4(op1,shift,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll_vx_i16m8(vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m8(op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll_vx_i32mf2(vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32mf2(op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll_vx_i32m1(vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m1(op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll_vx_i32m2(vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m2(op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll_vx_i32m4(vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m4(op1,shift,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll_vx_i32m8(vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m8(op1,shift,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll_vx_i64m1(vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m1(op1,shift,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll_vx_i64m2(vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m2(op1,shift,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll_vx_i64m4(vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m4(op1,shift,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll_vx_i64m8(vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m8(op1,shift,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll_vx_u8mf8(vuint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf8(op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll_vx_u8mf4(vuint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf4(op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll_vx_u8mf2(vuint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf2(op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll_vx_u8m1(vuint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m1(op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll_vx_u8m2(vuint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m2(op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll_vx_u8m4(vuint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m4(op1,shift,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll_vx_u8m8(vuint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m8(op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll_vx_u16mf4(vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf4(op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll_vx_u16mf2(vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf2(op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll_vx_u16m1(vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m1(op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll_vx_u16m2(vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m2(op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll_vx_u16m4(vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m4(op1,shift,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll_vx_u16m8(vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m8(op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll_vx_u32mf2(vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32mf2(op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll_vx_u32m1(vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m1(op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll_vx_u32m2(vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m2(op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll_vx_u32m4(vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m4(op1,shift,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll_vx_u32m8(vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m8(op1,shift,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll_vx_u64m1(vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m1(op1,shift,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll_vx_u64m2(vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m2(op1,shift,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll_vx_u64m4(vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m4(op1,shift,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll_vx_u64m8(vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m8(op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */"}, {"sha": "04e28e842eb23bb4328b4ae26471466306c01c54", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsll_vx-2.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx-2.c?ref=07fba8d6f2da481c8d2915e66d49525c65ca04d6", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsll_vx_i8mf8(vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf8(op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll_vx_i8mf4(vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf4(op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll_vx_i8mf2(vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf2(op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll_vx_i8m1(vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m1(op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll_vx_i8m2(vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m2(op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll_vx_i8m4(vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m4(op1,shift,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll_vx_i8m8(vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m8(op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll_vx_i16mf4(vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf4(op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll_vx_i16mf2(vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf2(op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll_vx_i16m1(vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m1(op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll_vx_i16m2(vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m2(op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll_vx_i16m4(vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m4(op1,shift,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll_vx_i16m8(vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m8(op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll_vx_i32mf2(vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32mf2(op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll_vx_i32m1(vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m1(op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll_vx_i32m2(vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m2(op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll_vx_i32m4(vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m4(op1,shift,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll_vx_i32m8(vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m8(op1,shift,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll_vx_i64m1(vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m1(op1,shift,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll_vx_i64m2(vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m2(op1,shift,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll_vx_i64m4(vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m4(op1,shift,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll_vx_i64m8(vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m8(op1,shift,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll_vx_u8mf8(vuint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf8(op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll_vx_u8mf4(vuint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf4(op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll_vx_u8mf2(vuint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf2(op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll_vx_u8m1(vuint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m1(op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll_vx_u8m2(vuint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m2(op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll_vx_u8m4(vuint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m4(op1,shift,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll_vx_u8m8(vuint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m8(op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll_vx_u16mf4(vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf4(op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll_vx_u16mf2(vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf2(op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll_vx_u16m1(vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m1(op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll_vx_u16m2(vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m2(op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll_vx_u16m4(vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m4(op1,shift,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll_vx_u16m8(vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m8(op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll_vx_u32mf2(vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32mf2(op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll_vx_u32m1(vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m1(op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll_vx_u32m2(vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m2(op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll_vx_u32m4(vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m4(op1,shift,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll_vx_u32m8(vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m8(op1,shift,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll_vx_u64m1(vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m1(op1,shift,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll_vx_u64m2(vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m2(op1,shift,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll_vx_u64m4(vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m4(op1,shift,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll_vx_u64m8(vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m8(op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */"}, {"sha": "521c51a54ae1a29212ae9ad896d6d6f185f25947", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsll_vx-3.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx-3.c?ref=07fba8d6f2da481c8d2915e66d49525c65ca04d6", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsll_vx_i8mf8(vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf8(op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll_vx_i8mf4(vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf4(op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll_vx_i8mf2(vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf2(op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll_vx_i8m1(vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m1(op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll_vx_i8m2(vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m2(op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll_vx_i8m4(vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m4(op1,shift,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll_vx_i8m8(vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m8(op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll_vx_i16mf4(vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf4(op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll_vx_i16mf2(vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf2(op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll_vx_i16m1(vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m1(op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll_vx_i16m2(vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m2(op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll_vx_i16m4(vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m4(op1,shift,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll_vx_i16m8(vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m8(op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll_vx_i32mf2(vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32mf2(op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll_vx_i32m1(vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m1(op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll_vx_i32m2(vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m2(op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll_vx_i32m4(vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m4(op1,shift,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll_vx_i32m8(vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m8(op1,shift,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll_vx_i64m1(vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m1(op1,shift,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll_vx_i64m2(vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m2(op1,shift,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll_vx_i64m4(vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m4(op1,shift,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll_vx_i64m8(vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m8(op1,shift,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll_vx_u8mf8(vuint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf8(op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll_vx_u8mf4(vuint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf4(op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll_vx_u8mf2(vuint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf2(op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll_vx_u8m1(vuint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m1(op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll_vx_u8m2(vuint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m2(op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll_vx_u8m4(vuint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m4(op1,shift,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll_vx_u8m8(vuint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m8(op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll_vx_u16mf4(vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf4(op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll_vx_u16mf2(vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf2(op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll_vx_u16m1(vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m1(op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll_vx_u16m2(vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m2(op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll_vx_u16m4(vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m4(op1,shift,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll_vx_u16m8(vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m8(op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll_vx_u32mf2(vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32mf2(op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll_vx_u32m1(vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m1(op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll_vx_u32m2(vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m2(op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll_vx_u32m4(vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m4(op1,shift,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll_vx_u32m8(vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m8(op1,shift,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll_vx_u64m1(vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m1(op1,shift,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll_vx_u64m2(vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m2(op1,shift,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll_vx_u64m4(vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m4(op1,shift,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll_vx_u64m8(vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m8(op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */"}, {"sha": "6538b6ff016d7213695641f418cc44a0090dfad1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsll_vx_m-1.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_m-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_m-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_m-1.c?ref=07fba8d6f2da481c8d2915e66d49525c65ca04d6", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsll_vx_i8mf8_m(vbool64_t mask,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf8_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll_vx_i8mf4_m(vbool32_t mask,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf4_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll_vx_i8mf2_m(vbool16_t mask,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf2_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll_vx_i8m1_m(vbool8_t mask,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m1_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll_vx_i8m2_m(vbool4_t mask,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m2_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll_vx_i8m4_m(vbool2_t mask,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m4_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll_vx_i8m8_m(vbool1_t mask,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m8_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll_vx_i16mf4_m(vbool64_t mask,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf4_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll_vx_i16mf2_m(vbool32_t mask,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf2_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll_vx_i16m1_m(vbool16_t mask,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m1_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll_vx_i16m2_m(vbool8_t mask,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m2_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll_vx_i16m4_m(vbool4_t mask,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m4_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll_vx_i16m8_m(vbool2_t mask,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m8_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll_vx_i32mf2_m(vbool64_t mask,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32mf2_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll_vx_i32m1_m(vbool32_t mask,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m1_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll_vx_i32m2_m(vbool16_t mask,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m2_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll_vx_i32m4_m(vbool8_t mask,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m4_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll_vx_i32m8_m(vbool4_t mask,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m8_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll_vx_i64m1_m(vbool64_t mask,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m1_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll_vx_i64m2_m(vbool32_t mask,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m2_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll_vx_i64m4_m(vbool16_t mask,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m4_m(mask,op1,shift,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll_vx_i64m8_m(vbool8_t mask,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m8_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll_vx_u8mf8_m(vbool64_t mask,vuint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf8_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll_vx_u8mf4_m(vbool32_t mask,vuint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf4_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll_vx_u8mf2_m(vbool16_t mask,vuint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf2_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll_vx_u8m1_m(vbool8_t mask,vuint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m1_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll_vx_u8m2_m(vbool4_t mask,vuint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m2_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll_vx_u8m4_m(vbool2_t mask,vuint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m4_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll_vx_u8m8_m(vbool1_t mask,vuint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m8_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll_vx_u16mf4_m(vbool64_t mask,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf4_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll_vx_u16mf2_m(vbool32_t mask,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf2_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll_vx_u16m1_m(vbool16_t mask,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m1_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll_vx_u16m2_m(vbool8_t mask,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m2_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll_vx_u16m4_m(vbool4_t mask,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m4_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll_vx_u16m8_m(vbool2_t mask,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m8_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll_vx_u32mf2_m(vbool64_t mask,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32mf2_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll_vx_u32m1_m(vbool32_t mask,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m1_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll_vx_u32m2_m(vbool16_t mask,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m2_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll_vx_u32m4_m(vbool8_t mask,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m4_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll_vx_u32m8_m(vbool4_t mask,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m8_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll_vx_u64m1_m(vbool64_t mask,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m1_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll_vx_u64m2_m(vbool32_t mask,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m2_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll_vx_u64m4_m(vbool16_t mask,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m4_m(mask,op1,shift,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll_vx_u64m8_m(vbool8_t mask,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m8_m(mask,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */"}, {"sha": "cecee8154f31f4456d1535842761397e5b1c4750", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsll_vx_m-2.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_m-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_m-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_m-2.c?ref=07fba8d6f2da481c8d2915e66d49525c65ca04d6", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsll_vx_i8mf8_m(vbool64_t mask,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf8_m(mask,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll_vx_i8mf4_m(vbool32_t mask,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf4_m(mask,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll_vx_i8mf2_m(vbool16_t mask,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf2_m(mask,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll_vx_i8m1_m(vbool8_t mask,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m1_m(mask,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll_vx_i8m2_m(vbool4_t mask,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m2_m(mask,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll_vx_i8m4_m(vbool2_t mask,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m4_m(mask,op1,shift,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll_vx_i8m8_m(vbool1_t mask,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m8_m(mask,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll_vx_i16mf4_m(vbool64_t mask,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf4_m(mask,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll_vx_i16mf2_m(vbool32_t mask,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf2_m(mask,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll_vx_i16m1_m(vbool16_t mask,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m1_m(mask,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll_vx_i16m2_m(vbool8_t mask,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m2_m(mask,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll_vx_i16m4_m(vbool4_t mask,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m4_m(mask,op1,shift,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll_vx_i16m8_m(vbool2_t mask,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m8_m(mask,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll_vx_i32mf2_m(vbool64_t mask,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32mf2_m(mask,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll_vx_i32m1_m(vbool32_t mask,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m1_m(mask,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll_vx_i32m2_m(vbool16_t mask,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m2_m(mask,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll_vx_i32m4_m(vbool8_t mask,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m4_m(mask,op1,shift,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll_vx_i32m8_m(vbool4_t mask,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m8_m(mask,op1,shift,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll_vx_i64m1_m(vbool64_t mask,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m1_m(mask,op1,shift,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll_vx_i64m2_m(vbool32_t mask,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m2_m(mask,op1,shift,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll_vx_i64m4_m(vbool16_t mask,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m4_m(mask,op1,shift,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll_vx_i64m8_m(vbool8_t mask,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m8_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll_vx_u8mf8_m(vbool64_t mask,vuint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf8_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll_vx_u8mf4_m(vbool32_t mask,vuint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf4_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll_vx_u8mf2_m(vbool16_t mask,vuint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf2_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll_vx_u8m1_m(vbool8_t mask,vuint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m1_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll_vx_u8m2_m(vbool4_t mask,vuint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m2_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll_vx_u8m4_m(vbool2_t mask,vuint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m4_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll_vx_u8m8_m(vbool1_t mask,vuint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m8_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll_vx_u16mf4_m(vbool64_t mask,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf4_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll_vx_u16mf2_m(vbool32_t mask,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf2_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll_vx_u16m1_m(vbool16_t mask,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m1_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll_vx_u16m2_m(vbool8_t mask,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m2_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll_vx_u16m4_m(vbool4_t mask,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m4_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll_vx_u16m8_m(vbool2_t mask,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m8_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll_vx_u32mf2_m(vbool64_t mask,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32mf2_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll_vx_u32m1_m(vbool32_t mask,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m1_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll_vx_u32m2_m(vbool16_t mask,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m2_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll_vx_u32m4_m(vbool8_t mask,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m4_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll_vx_u32m8_m(vbool4_t mask,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m8_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll_vx_u64m1_m(vbool64_t mask,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m1_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll_vx_u64m2_m(vbool32_t mask,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m2_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll_vx_u64m4_m(vbool16_t mask,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m4_m(mask,op1,shift,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll_vx_u64m8_m(vbool8_t mask,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m8_m(mask,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */"}, {"sha": "a60498ecc079570dd30f5e598af965c5a9c413db", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsll_vx_m-3.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_m-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_m-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_m-3.c?ref=07fba8d6f2da481c8d2915e66d49525c65ca04d6", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsll_vx_i8mf8_m(vbool64_t mask,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf8_m(mask,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll_vx_i8mf4_m(vbool32_t mask,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf4_m(mask,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll_vx_i8mf2_m(vbool16_t mask,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf2_m(mask,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll_vx_i8m1_m(vbool8_t mask,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m1_m(mask,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll_vx_i8m2_m(vbool4_t mask,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m2_m(mask,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll_vx_i8m4_m(vbool2_t mask,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m4_m(mask,op1,shift,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll_vx_i8m8_m(vbool1_t mask,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m8_m(mask,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll_vx_i16mf4_m(vbool64_t mask,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf4_m(mask,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll_vx_i16mf2_m(vbool32_t mask,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf2_m(mask,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll_vx_i16m1_m(vbool16_t mask,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m1_m(mask,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll_vx_i16m2_m(vbool8_t mask,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m2_m(mask,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll_vx_i16m4_m(vbool4_t mask,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m4_m(mask,op1,shift,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll_vx_i16m8_m(vbool2_t mask,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m8_m(mask,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll_vx_i32mf2_m(vbool64_t mask,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32mf2_m(mask,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll_vx_i32m1_m(vbool32_t mask,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m1_m(mask,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll_vx_i32m2_m(vbool16_t mask,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m2_m(mask,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll_vx_i32m4_m(vbool8_t mask,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m4_m(mask,op1,shift,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll_vx_i32m8_m(vbool4_t mask,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m8_m(mask,op1,shift,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll_vx_i64m1_m(vbool64_t mask,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m1_m(mask,op1,shift,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll_vx_i64m2_m(vbool32_t mask,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m2_m(mask,op1,shift,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll_vx_i64m4_m(vbool16_t mask,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m4_m(mask,op1,shift,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll_vx_i64m8_m(vbool8_t mask,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m8_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll_vx_u8mf8_m(vbool64_t mask,vuint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf8_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll_vx_u8mf4_m(vbool32_t mask,vuint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf4_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll_vx_u8mf2_m(vbool16_t mask,vuint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf2_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll_vx_u8m1_m(vbool8_t mask,vuint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m1_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll_vx_u8m2_m(vbool4_t mask,vuint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m2_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll_vx_u8m4_m(vbool2_t mask,vuint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m4_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll_vx_u8m8_m(vbool1_t mask,vuint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m8_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll_vx_u16mf4_m(vbool64_t mask,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf4_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll_vx_u16mf2_m(vbool32_t mask,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf2_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll_vx_u16m1_m(vbool16_t mask,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m1_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll_vx_u16m2_m(vbool8_t mask,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m2_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll_vx_u16m4_m(vbool4_t mask,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m4_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll_vx_u16m8_m(vbool2_t mask,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m8_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll_vx_u32mf2_m(vbool64_t mask,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32mf2_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll_vx_u32m1_m(vbool32_t mask,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m1_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll_vx_u32m2_m(vbool16_t mask,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m2_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll_vx_u32m4_m(vbool8_t mask,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m4_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll_vx_u32m8_m(vbool4_t mask,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m8_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll_vx_u64m1_m(vbool64_t mask,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m1_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll_vx_u64m2_m(vbool32_t mask,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m2_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll_vx_u64m4_m(vbool16_t mask,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m4_m(mask,op1,shift,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll_vx_u64m8_m(vbool8_t mask,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m8_m(mask,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */"}, {"sha": "6e1730d2372d36d0f562256bd751dcd159d41f43", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsll_vx_mu-1.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_mu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_mu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_mu-1.c?ref=07fba8d6f2da481c8d2915e66d49525c65ca04d6", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsll_vx_i8mf8_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf8_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll_vx_i8mf4_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf4_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll_vx_i8mf2_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf2_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll_vx_i8m1_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m1_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll_vx_i8m2_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m2_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll_vx_i8m4_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m4_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll_vx_i8m8_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m8_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll_vx_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf4_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll_vx_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf2_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll_vx_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m1_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll_vx_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m2_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll_vx_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m4_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll_vx_i16m8_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m8_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll_vx_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32mf2_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll_vx_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m1_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll_vx_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m2_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll_vx_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m4_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll_vx_i32m8_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m8_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll_vx_i64m1_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m1_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll_vx_i64m2_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m2_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll_vx_i64m4_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m4_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll_vx_i64m8_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m8_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll_vx_u8mf8_mu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf8_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll_vx_u8mf4_mu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf4_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll_vx_u8mf2_mu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf2_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll_vx_u8m1_mu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m1_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll_vx_u8m2_mu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m2_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll_vx_u8m4_mu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m4_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll_vx_u8m8_mu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m8_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll_vx_u16mf4_mu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf4_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll_vx_u16mf2_mu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf2_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll_vx_u16m1_mu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m1_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll_vx_u16m2_mu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m2_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll_vx_u16m4_mu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m4_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll_vx_u16m8_mu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m8_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll_vx_u32mf2_mu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32mf2_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll_vx_u32m1_mu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m1_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll_vx_u32m2_mu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m2_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll_vx_u32m4_mu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m4_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll_vx_u32m8_mu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m8_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll_vx_u64m1_mu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m1_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll_vx_u64m2_mu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m2_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll_vx_u64m4_mu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m4_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll_vx_u64m8_mu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m8_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */"}, {"sha": "ddc2a1d91409e5461f587f651cf698f169cda415", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsll_vx_mu-2.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_mu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_mu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_mu-2.c?ref=07fba8d6f2da481c8d2915e66d49525c65ca04d6", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsll_vx_i8mf8_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf8_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll_vx_i8mf4_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf4_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll_vx_i8mf2_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf2_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll_vx_i8m1_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m1_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll_vx_i8m2_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m2_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll_vx_i8m4_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m4_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll_vx_i8m8_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m8_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll_vx_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf4_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll_vx_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf2_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll_vx_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m1_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll_vx_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m2_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll_vx_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m4_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll_vx_i16m8_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m8_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll_vx_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32mf2_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll_vx_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m1_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll_vx_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m2_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll_vx_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m4_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll_vx_i32m8_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m8_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll_vx_i64m1_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m1_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll_vx_i64m2_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m2_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll_vx_i64m4_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m4_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll_vx_i64m8_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m8_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll_vx_u8mf8_mu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf8_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll_vx_u8mf4_mu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf4_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll_vx_u8mf2_mu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf2_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll_vx_u8m1_mu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m1_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll_vx_u8m2_mu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m2_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll_vx_u8m4_mu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m4_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll_vx_u8m8_mu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m8_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll_vx_u16mf4_mu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf4_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll_vx_u16mf2_mu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf2_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll_vx_u16m1_mu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m1_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll_vx_u16m2_mu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m2_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll_vx_u16m4_mu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m4_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll_vx_u16m8_mu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m8_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll_vx_u32mf2_mu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32mf2_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll_vx_u32m1_mu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m1_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll_vx_u32m2_mu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m2_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll_vx_u32m4_mu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m4_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll_vx_u32m8_mu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m8_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll_vx_u64m1_mu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m1_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll_vx_u64m2_mu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m2_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll_vx_u64m4_mu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m4_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll_vx_u64m8_mu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m8_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */"}, {"sha": "26a38a39cb7551e662bf02fe94b8f96aaebf2e95", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsll_vx_mu-3.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_mu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_mu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_mu-3.c?ref=07fba8d6f2da481c8d2915e66d49525c65ca04d6", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsll_vx_i8mf8_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf8_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll_vx_i8mf4_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf4_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll_vx_i8mf2_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf2_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll_vx_i8m1_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m1_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll_vx_i8m2_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m2_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll_vx_i8m4_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m4_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll_vx_i8m8_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m8_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll_vx_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf4_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll_vx_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf2_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll_vx_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m1_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll_vx_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m2_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll_vx_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m4_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll_vx_i16m8_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m8_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll_vx_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32mf2_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll_vx_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m1_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll_vx_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m2_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll_vx_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m4_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll_vx_i32m8_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m8_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll_vx_i64m1_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m1_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll_vx_i64m2_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m2_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll_vx_i64m4_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m4_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll_vx_i64m8_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m8_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll_vx_u8mf8_mu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf8_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll_vx_u8mf4_mu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf4_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll_vx_u8mf2_mu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf2_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll_vx_u8m1_mu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m1_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll_vx_u8m2_mu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m2_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll_vx_u8m4_mu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m4_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll_vx_u8m8_mu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m8_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll_vx_u16mf4_mu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf4_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll_vx_u16mf2_mu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf2_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll_vx_u16m1_mu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m1_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll_vx_u16m2_mu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m2_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll_vx_u16m4_mu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m4_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll_vx_u16m8_mu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m8_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll_vx_u32mf2_mu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32mf2_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll_vx_u32m1_mu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m1_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll_vx_u32m2_mu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m2_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll_vx_u32m4_mu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m4_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll_vx_u32m8_mu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m8_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll_vx_u64m1_mu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m1_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll_vx_u64m2_mu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m2_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll_vx_u64m4_mu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m4_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll_vx_u64m8_mu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m8_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */"}, {"sha": "628f6d9101b65ee9fdf91b39b583d524db5fd1ba", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsll_vx_tu-1.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_tu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_tu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_tu-1.c?ref=07fba8d6f2da481c8d2915e66d49525c65ca04d6", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsll_vx_i8mf8_tu(vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf8_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll_vx_i8mf4_tu(vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf4_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll_vx_i8mf2_tu(vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf2_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll_vx_i8m1_tu(vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m1_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll_vx_i8m2_tu(vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m2_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll_vx_i8m4_tu(vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m4_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll_vx_i8m8_tu(vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m8_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll_vx_i16mf4_tu(vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf4_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll_vx_i16mf2_tu(vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf2_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll_vx_i16m1_tu(vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m1_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll_vx_i16m2_tu(vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m2_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll_vx_i16m4_tu(vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m4_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll_vx_i16m8_tu(vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m8_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll_vx_i32mf2_tu(vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32mf2_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll_vx_i32m1_tu(vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m1_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll_vx_i32m2_tu(vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m2_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll_vx_i32m4_tu(vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m4_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll_vx_i32m8_tu(vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m8_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll_vx_i64m1_tu(vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m1_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll_vx_i64m2_tu(vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m2_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll_vx_i64m4_tu(vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m4_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll_vx_i64m8_tu(vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m8_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll_vx_u8mf8_tu(vuint8mf8_t merge,vuint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf8_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll_vx_u8mf4_tu(vuint8mf4_t merge,vuint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf4_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll_vx_u8mf2_tu(vuint8mf2_t merge,vuint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf2_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll_vx_u8m1_tu(vuint8m1_t merge,vuint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m1_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll_vx_u8m2_tu(vuint8m2_t merge,vuint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m2_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll_vx_u8m4_tu(vuint8m4_t merge,vuint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m4_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll_vx_u8m8_tu(vuint8m8_t merge,vuint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m8_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll_vx_u16mf4_tu(vuint16mf4_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf4_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll_vx_u16mf2_tu(vuint16mf2_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf2_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll_vx_u16m1_tu(vuint16m1_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m1_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll_vx_u16m2_tu(vuint16m2_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m2_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll_vx_u16m4_tu(vuint16m4_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m4_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll_vx_u16m8_tu(vuint16m8_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m8_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll_vx_u32mf2_tu(vuint32mf2_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32mf2_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll_vx_u32m1_tu(vuint32m1_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m1_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll_vx_u32m2_tu(vuint32m2_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m2_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll_vx_u32m4_tu(vuint32m4_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m4_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll_vx_u32m8_tu(vuint32m8_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m8_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll_vx_u64m1_tu(vuint64m1_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m1_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll_vx_u64m2_tu(vuint64m2_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m2_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll_vx_u64m4_tu(vuint64m4_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m4_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll_vx_u64m8_tu(vuint64m8_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m8_tu(merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */"}, {"sha": "11688aaf9a701b19cf8b5f042cdbca2370e63b38", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsll_vx_tu-2.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_tu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_tu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_tu-2.c?ref=07fba8d6f2da481c8d2915e66d49525c65ca04d6", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsll_vx_i8mf8_tu(vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf8_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll_vx_i8mf4_tu(vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf4_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll_vx_i8mf2_tu(vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf2_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll_vx_i8m1_tu(vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m1_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll_vx_i8m2_tu(vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m2_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll_vx_i8m4_tu(vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m4_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll_vx_i8m8_tu(vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m8_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll_vx_i16mf4_tu(vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf4_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll_vx_i16mf2_tu(vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf2_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll_vx_i16m1_tu(vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m1_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll_vx_i16m2_tu(vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m2_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll_vx_i16m4_tu(vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m4_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll_vx_i16m8_tu(vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m8_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll_vx_i32mf2_tu(vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32mf2_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll_vx_i32m1_tu(vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m1_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll_vx_i32m2_tu(vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m2_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll_vx_i32m4_tu(vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m4_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll_vx_i32m8_tu(vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m8_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll_vx_i64m1_tu(vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m1_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll_vx_i64m2_tu(vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m2_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll_vx_i64m4_tu(vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m4_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll_vx_i64m8_tu(vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m8_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll_vx_u8mf8_tu(vuint8mf8_t merge,vuint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf8_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll_vx_u8mf4_tu(vuint8mf4_t merge,vuint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf4_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll_vx_u8mf2_tu(vuint8mf2_t merge,vuint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf2_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll_vx_u8m1_tu(vuint8m1_t merge,vuint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m1_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll_vx_u8m2_tu(vuint8m2_t merge,vuint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m2_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll_vx_u8m4_tu(vuint8m4_t merge,vuint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m4_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll_vx_u8m8_tu(vuint8m8_t merge,vuint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m8_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll_vx_u16mf4_tu(vuint16mf4_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf4_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll_vx_u16mf2_tu(vuint16mf2_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf2_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll_vx_u16m1_tu(vuint16m1_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m1_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll_vx_u16m2_tu(vuint16m2_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m2_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll_vx_u16m4_tu(vuint16m4_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m4_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll_vx_u16m8_tu(vuint16m8_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m8_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll_vx_u32mf2_tu(vuint32mf2_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32mf2_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll_vx_u32m1_tu(vuint32m1_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m1_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll_vx_u32m2_tu(vuint32m2_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m2_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll_vx_u32m4_tu(vuint32m4_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m4_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll_vx_u32m8_tu(vuint32m8_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m8_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll_vx_u64m1_tu(vuint64m1_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m1_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll_vx_u64m2_tu(vuint64m2_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m2_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll_vx_u64m4_tu(vuint64m4_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m4_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll_vx_u64m8_tu(vuint64m8_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m8_tu(merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */"}, {"sha": "4038ff4e6a3bef98c7c88d7a9d0fb4ebbe80cd2d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsll_vx_tu-3.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_tu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_tu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_tu-3.c?ref=07fba8d6f2da481c8d2915e66d49525c65ca04d6", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsll_vx_i8mf8_tu(vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf8_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll_vx_i8mf4_tu(vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf4_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll_vx_i8mf2_tu(vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf2_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll_vx_i8m1_tu(vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m1_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll_vx_i8m2_tu(vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m2_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll_vx_i8m4_tu(vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m4_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll_vx_i8m8_tu(vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m8_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll_vx_i16mf4_tu(vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf4_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll_vx_i16mf2_tu(vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf2_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll_vx_i16m1_tu(vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m1_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll_vx_i16m2_tu(vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m2_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll_vx_i16m4_tu(vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m4_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll_vx_i16m8_tu(vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m8_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll_vx_i32mf2_tu(vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32mf2_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll_vx_i32m1_tu(vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m1_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll_vx_i32m2_tu(vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m2_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll_vx_i32m4_tu(vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m4_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll_vx_i32m8_tu(vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m8_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll_vx_i64m1_tu(vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m1_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll_vx_i64m2_tu(vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m2_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll_vx_i64m4_tu(vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m4_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll_vx_i64m8_tu(vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m8_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll_vx_u8mf8_tu(vuint8mf8_t merge,vuint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf8_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll_vx_u8mf4_tu(vuint8mf4_t merge,vuint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf4_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll_vx_u8mf2_tu(vuint8mf2_t merge,vuint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf2_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll_vx_u8m1_tu(vuint8m1_t merge,vuint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m1_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll_vx_u8m2_tu(vuint8m2_t merge,vuint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m2_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll_vx_u8m4_tu(vuint8m4_t merge,vuint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m4_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll_vx_u8m8_tu(vuint8m8_t merge,vuint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m8_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll_vx_u16mf4_tu(vuint16mf4_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf4_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll_vx_u16mf2_tu(vuint16mf2_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf2_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll_vx_u16m1_tu(vuint16m1_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m1_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll_vx_u16m2_tu(vuint16m2_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m2_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll_vx_u16m4_tu(vuint16m4_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m4_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll_vx_u16m8_tu(vuint16m8_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m8_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll_vx_u32mf2_tu(vuint32mf2_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32mf2_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll_vx_u32m1_tu(vuint32m1_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m1_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll_vx_u32m2_tu(vuint32m2_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m2_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll_vx_u32m4_tu(vuint32m4_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m4_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll_vx_u32m8_tu(vuint32m8_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m8_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll_vx_u64m1_tu(vuint64m1_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m1_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll_vx_u64m2_tu(vuint64m2_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m2_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll_vx_u64m4_tu(vuint64m4_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m4_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll_vx_u64m8_tu(vuint64m8_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m8_tu(merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 2 } } */"}, {"sha": "a51f8b365470bfe6ed75ebe019ebdefd4c0790a8", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsll_vx_tum-1.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_tum-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_tum-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_tum-1.c?ref=07fba8d6f2da481c8d2915e66d49525c65ca04d6", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsll_vx_i8mf8_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf8_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll_vx_i8mf4_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf4_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll_vx_i8mf2_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf2_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll_vx_i8m1_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m1_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll_vx_i8m2_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m2_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll_vx_i8m4_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m4_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll_vx_i8m8_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m8_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll_vx_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf4_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll_vx_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf2_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll_vx_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m1_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll_vx_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m2_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll_vx_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m4_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll_vx_i16m8_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m8_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll_vx_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32mf2_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll_vx_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m1_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll_vx_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m2_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll_vx_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m4_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll_vx_i32m8_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m8_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll_vx_i64m1_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m1_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll_vx_i64m2_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m2_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll_vx_i64m4_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m4_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll_vx_i64m8_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m8_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll_vx_u8mf8_tum(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf8_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll_vx_u8mf4_tum(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf4_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll_vx_u8mf2_tum(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf2_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll_vx_u8m1_tum(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m1_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll_vx_u8m2_tum(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m2_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll_vx_u8m4_tum(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m4_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll_vx_u8m8_tum(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m8_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll_vx_u16mf4_tum(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf4_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll_vx_u16mf2_tum(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf2_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll_vx_u16m1_tum(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m1_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll_vx_u16m2_tum(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m2_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll_vx_u16m4_tum(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m4_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll_vx_u16m8_tum(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m8_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll_vx_u32mf2_tum(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32mf2_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll_vx_u32m1_tum(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m1_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll_vx_u32m2_tum(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m2_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll_vx_u32m4_tum(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m4_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll_vx_u32m8_tum(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m8_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll_vx_u64m1_tum(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m1_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll_vx_u64m2_tum(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m2_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll_vx_u64m4_tum(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m4_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll_vx_u64m8_tum(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m8_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */"}, {"sha": "0465ab4330a003734c705588b8271adc5ce8a296", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsll_vx_tum-2.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_tum-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_tum-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_tum-2.c?ref=07fba8d6f2da481c8d2915e66d49525c65ca04d6", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsll_vx_i8mf8_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf8_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll_vx_i8mf4_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf4_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll_vx_i8mf2_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf2_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll_vx_i8m1_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m1_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll_vx_i8m2_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m2_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll_vx_i8m4_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m4_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll_vx_i8m8_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m8_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll_vx_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf4_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll_vx_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf2_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll_vx_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m1_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll_vx_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m2_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll_vx_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m4_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll_vx_i16m8_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m8_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll_vx_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32mf2_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll_vx_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m1_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll_vx_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m2_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll_vx_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m4_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll_vx_i32m8_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m8_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll_vx_i64m1_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m1_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll_vx_i64m2_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m2_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll_vx_i64m4_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m4_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll_vx_i64m8_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m8_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll_vx_u8mf8_tum(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf8_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll_vx_u8mf4_tum(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf4_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll_vx_u8mf2_tum(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf2_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll_vx_u8m1_tum(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m1_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll_vx_u8m2_tum(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m2_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll_vx_u8m4_tum(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m4_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll_vx_u8m8_tum(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m8_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll_vx_u16mf4_tum(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf4_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll_vx_u16mf2_tum(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf2_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll_vx_u16m1_tum(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m1_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll_vx_u16m2_tum(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m2_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll_vx_u16m4_tum(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m4_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll_vx_u16m8_tum(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m8_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll_vx_u32mf2_tum(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32mf2_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll_vx_u32m1_tum(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m1_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll_vx_u32m2_tum(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m2_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll_vx_u32m4_tum(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m4_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll_vx_u32m8_tum(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m8_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll_vx_u64m1_tum(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m1_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll_vx_u64m2_tum(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m2_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll_vx_u64m4_tum(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m4_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll_vx_u64m8_tum(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m8_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */"}, {"sha": "3481d4d441e23c24cbe48a960683712c792e7a82", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsll_vx_tum-3.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_tum-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_tum-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_tum-3.c?ref=07fba8d6f2da481c8d2915e66d49525c65ca04d6", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsll_vx_i8mf8_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf8_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll_vx_i8mf4_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf4_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll_vx_i8mf2_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf2_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll_vx_i8m1_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m1_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll_vx_i8m2_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m2_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll_vx_i8m4_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m4_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll_vx_i8m8_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m8_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll_vx_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf4_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll_vx_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf2_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll_vx_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m1_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll_vx_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m2_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll_vx_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m4_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll_vx_i16m8_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m8_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll_vx_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32mf2_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll_vx_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m1_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll_vx_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m2_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll_vx_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m4_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll_vx_i32m8_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m8_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll_vx_i64m1_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m1_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll_vx_i64m2_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m2_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll_vx_i64m4_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m4_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll_vx_i64m8_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m8_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll_vx_u8mf8_tum(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf8_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll_vx_u8mf4_tum(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf4_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll_vx_u8mf2_tum(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf2_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll_vx_u8m1_tum(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m1_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll_vx_u8m2_tum(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m2_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll_vx_u8m4_tum(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m4_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll_vx_u8m8_tum(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m8_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll_vx_u16mf4_tum(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf4_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll_vx_u16mf2_tum(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf2_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll_vx_u16m1_tum(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m1_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll_vx_u16m2_tum(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m2_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll_vx_u16m4_tum(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m4_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll_vx_u16m8_tum(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m8_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll_vx_u32mf2_tum(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32mf2_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll_vx_u32m1_tum(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m1_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll_vx_u32m2_tum(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m2_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll_vx_u32m4_tum(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m4_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll_vx_u32m8_tum(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m8_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll_vx_u64m1_tum(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m1_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll_vx_u64m2_tum(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m2_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll_vx_u64m4_tum(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m4_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll_vx_u64m8_tum(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m8_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */"}, {"sha": "50aa03156a9dba5c9a7f57b049ef9066d01c5ede", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsll_vx_tumu-1.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_tumu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_tumu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_tumu-1.c?ref=07fba8d6f2da481c8d2915e66d49525c65ca04d6", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsll_vx_i8mf8_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf8_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll_vx_i8mf4_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf4_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll_vx_i8mf2_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf2_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll_vx_i8m1_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m1_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll_vx_i8m2_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m2_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll_vx_i8m4_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m4_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll_vx_i8m8_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m8_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll_vx_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf4_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll_vx_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf2_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll_vx_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m1_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll_vx_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m2_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll_vx_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m4_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll_vx_i16m8_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m8_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll_vx_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32mf2_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll_vx_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m1_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll_vx_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m2_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll_vx_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m4_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll_vx_i32m8_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m8_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll_vx_i64m1_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m1_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll_vx_i64m2_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m2_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll_vx_i64m4_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m4_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll_vx_i64m8_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m8_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll_vx_u8mf8_tumu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf8_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll_vx_u8mf4_tumu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf4_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll_vx_u8mf2_tumu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf2_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll_vx_u8m1_tumu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m1_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll_vx_u8m2_tumu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m2_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll_vx_u8m4_tumu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m4_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll_vx_u8m8_tumu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m8_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll_vx_u16mf4_tumu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf4_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll_vx_u16mf2_tumu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf2_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll_vx_u16m1_tumu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m1_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll_vx_u16m2_tumu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m2_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll_vx_u16m4_tumu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m4_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll_vx_u16m8_tumu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m8_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll_vx_u32mf2_tumu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32mf2_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll_vx_u32m1_tumu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m1_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll_vx_u32m2_tumu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m2_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll_vx_u32m4_tumu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m4_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll_vx_u32m8_tumu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m8_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll_vx_u64m1_tumu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m1_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll_vx_u64m2_tumu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m2_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll_vx_u64m4_tumu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m4_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll_vx_u64m8_tumu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m8_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */"}, {"sha": "0e7cb71ef41290643a0221b5668d4e11d694ebaf", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsll_vx_tumu-2.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_tumu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_tumu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_tumu-2.c?ref=07fba8d6f2da481c8d2915e66d49525c65ca04d6", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsll_vx_i8mf8_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf8_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll_vx_i8mf4_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf4_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll_vx_i8mf2_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf2_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll_vx_i8m1_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m1_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll_vx_i8m2_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m2_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll_vx_i8m4_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m4_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll_vx_i8m8_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m8_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll_vx_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf4_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll_vx_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf2_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll_vx_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m1_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll_vx_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m2_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll_vx_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m4_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll_vx_i16m8_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m8_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll_vx_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32mf2_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll_vx_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m1_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll_vx_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m2_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll_vx_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m4_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll_vx_i32m8_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m8_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll_vx_i64m1_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m1_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll_vx_i64m2_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m2_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll_vx_i64m4_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m4_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll_vx_i64m8_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m8_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll_vx_u8mf8_tumu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf8_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll_vx_u8mf4_tumu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf4_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll_vx_u8mf2_tumu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf2_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll_vx_u8m1_tumu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m1_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll_vx_u8m2_tumu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m2_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll_vx_u8m4_tumu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m4_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll_vx_u8m8_tumu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m8_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll_vx_u16mf4_tumu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf4_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll_vx_u16mf2_tumu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf2_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll_vx_u16m1_tumu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m1_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll_vx_u16m2_tumu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m2_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll_vx_u16m4_tumu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m4_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll_vx_u16m8_tumu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m8_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll_vx_u32mf2_tumu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32mf2_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll_vx_u32m1_tumu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m1_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll_vx_u32m2_tumu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m2_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll_vx_u32m4_tumu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m4_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll_vx_u32m8_tumu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m8_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll_vx_u64m1_tumu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m1_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll_vx_u64m2_tumu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m2_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll_vx_u64m4_tumu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m4_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll_vx_u64m8_tumu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m8_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */"}, {"sha": "0ccfb2e71a21a9c1bf997685f75626c0da67157e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsll_vx_tumu-3.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_tumu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07fba8d6f2da481c8d2915e66d49525c65ca04d6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_tumu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsll_vx_tumu-3.c?ref=07fba8d6f2da481c8d2915e66d49525c65ca04d6", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsll_vx_i8mf8_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf8_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll_vx_i8mf4_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf4_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll_vx_i8mf2_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8mf2_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll_vx_i8m1_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m1_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll_vx_i8m2_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m2_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll_vx_i8m4_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m4_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll_vx_i8m8_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i8m8_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll_vx_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf4_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll_vx_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16mf2_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll_vx_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m1_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll_vx_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m2_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll_vx_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m4_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll_vx_i16m8_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i16m8_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll_vx_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32mf2_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll_vx_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m1_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll_vx_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m2_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll_vx_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m4_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll_vx_i32m8_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i32m8_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll_vx_i64m1_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m1_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll_vx_i64m2_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m2_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll_vx_i64m4_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m4_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll_vx_i64m8_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_i64m8_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll_vx_u8mf8_tumu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf8_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll_vx_u8mf4_tumu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf4_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll_vx_u8mf2_tumu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8mf2_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll_vx_u8m1_tumu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m1_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll_vx_u8m2_tumu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m2_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll_vx_u8m4_tumu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m4_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll_vx_u8m8_tumu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u8m8_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll_vx_u16mf4_tumu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf4_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll_vx_u16mf2_tumu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16mf2_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll_vx_u16m1_tumu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m1_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll_vx_u16m2_tumu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m2_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll_vx_u16m4_tumu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m4_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll_vx_u16m8_tumu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u16m8_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll_vx_u32mf2_tumu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32mf2_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll_vx_u32m1_tumu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m1_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll_vx_u32m2_tumu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m2_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll_vx_u32m4_tumu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m4_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll_vx_u32m8_tumu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u32m8_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll_vx_u64m1_tumu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m1_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll_vx_u64m2_tumu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m2_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll_vx_u64m4_tumu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m4_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll_vx_u64m8_tumu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vsll_vx_u64m8_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vsll\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */"}]}