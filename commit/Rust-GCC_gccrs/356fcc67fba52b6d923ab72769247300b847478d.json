{"sha": "356fcc67fba52b6d923ab72769247300b847478d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU2ZmNjNjdmYmE1MmI2ZDkyM2FiNzI3NjkyNDczMDBiODQ3NDc4ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-10-20T07:35:48Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-10-20T07:35:48Z"}, "message": "re PR target/82158 (_Noreturn functions that do return clobber caller's registers on ARM32 (but not other arches))\n\n\tPR target/82158\n\t* tree-cfg.c (pass_warn_function_return::execute): In noreturn\n\tfunctions when optimizing replace GIMPLE_RETURN stmts with\n\tcalls to __builtin_unreachable ().\n\n\t* gcc.dg/tree-ssa/noreturn-1.c: New test.\n\nFrom-SVN: r253926", "tree": {"sha": "5acbfd4819b74914f7d5f76e0f31a2aed423642d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5acbfd4819b74914f7d5f76e0f31a2aed423642d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/356fcc67fba52b6d923ab72769247300b847478d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/356fcc67fba52b6d923ab72769247300b847478d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/356fcc67fba52b6d923ab72769247300b847478d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/356fcc67fba52b6d923ab72769247300b847478d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9a45ffbd122d77a87c49d05b936a9d162625c5d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a45ffbd122d77a87c49d05b936a9d162625c5d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a45ffbd122d77a87c49d05b936a9d162625c5d8"}], "stats": {"total": 70, "additions": 68, "deletions": 2}, "files": [{"sha": "42d98733299d3cb8b0b4d27d50b3e356894769f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/356fcc67fba52b6d923ab72769247300b847478d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/356fcc67fba52b6d923ab72769247300b847478d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=356fcc67fba52b6d923ab72769247300b847478d", "patch": "@@ -1,5 +1,10 @@\n 2017-10-20  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/82158\n+\t* tree-cfg.c (pass_warn_function_return::execute): In noreturn\n+\tfunctions when optimizing replace GIMPLE_RETURN stmts with\n+\tcalls to __builtin_unreachable ().\n+\n \tPR sanitizer/82595\n \t* config/gnu-user.h (LIBTSAN_EARLY_SPEC): Add libtsan_preinit.o\n \tfor -fsanitize=thread link of executables."}, {"sha": "35cc34e6cb20660b511ccddb78e4e8a9d2a185b7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/356fcc67fba52b6d923ab72769247300b847478d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/356fcc67fba52b6d923ab72769247300b847478d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=356fcc67fba52b6d923ab72769247300b847478d", "patch": "@@ -1,5 +1,8 @@\n 2017-10-20  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/82158\n+\t* gcc.dg/tree-ssa/noreturn-1.c: New test.\n+\n \tPR target/82370\n \t* gcc.target/i386/avx-pr82370.c: New test.\n \t* gcc.target/i386/avx2-pr82370.c: New test."}, {"sha": "ae7ee42fabcba5ceb4fdeca800b3ae938eb520a3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/noreturn-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/356fcc67fba52b6d923ab72769247300b847478d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fnoreturn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/356fcc67fba52b6d923ab72769247300b847478d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fnoreturn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fnoreturn-1.c?ref=356fcc67fba52b6d923ab72769247300b847478d", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } *\n+/* { dg-options \"-O2 -fdump-tree-ssa -std=gnu11\" } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_unreachable\" 4 \"ssa\" } } */\n+\n+void bar1 (void);\n+void bar2 (void);\n+void bar3 (void);\n+void bar4 (void);\n+\n+_Noreturn void\n+foo1 (int *p, int y)\n+{\n+  bar1 ();\n+  *p = y;\n+  return;\t/* { dg-warning \"function declared 'noreturn' has a 'return' statement\" } */\n+}\t\t/* { dg-warning \"'noreturn' function does return\" \"\" { target *-*-* } .-1 } */\n+\n+_Noreturn void\n+foo2 (int *p, int y)\n+{\n+  bar2 ();\n+  *p = y;\n+}\t\t/* { dg-warning \"'noreturn' function does return\" } */\n+\n+_Noreturn void\n+foo3 (int *p, int y)\n+{\n+  if (y > 10)\n+    return;\t/* { dg-warning \"function declared 'noreturn' has a 'return' statement\" } */\n+  bar3 ();\n+  *p = y;\n+  return;\t/* { dg-warning \"function declared 'noreturn' has a 'return' statement\" } */\n+}\t\t/* { dg-warning \"'noreturn' function does return\" } */\n+\n+_Noreturn void\n+foo4 (int *p, int y)\n+{\n+  if (y > 10)\n+    return;\t/* { dg-warning \"function declared 'noreturn' has a 'return' statement\" } */\n+  bar4 ();\n+  *p = y;\n+}\t\t/* { dg-warning \"'noreturn' function does return\" } */"}, {"sha": "ae1cdb33f53af277b12c6c5c3becda8b10103110", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/356fcc67fba52b6d923ab72769247300b847478d/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/356fcc67fba52b6d923ab72769247300b847478d/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=356fcc67fba52b6d923ab72769247300b847478d", "patch": "@@ -9077,13 +9077,29 @@ pass_warn_function_return::execute (function *fun)\n       && EDGE_COUNT (EXIT_BLOCK_PTR_FOR_FN (fun)->preds) > 0)\n     {\n       location = UNKNOWN_LOCATION;\n-      FOR_EACH_EDGE (e, ei, EXIT_BLOCK_PTR_FOR_FN (fun)->preds)\n+      for (ei = ei_start (EXIT_BLOCK_PTR_FOR_FN (fun)->preds);\n+\t   (e = ei_safe_edge (ei)); )\n \t{\n \t  last = last_stmt (e->src);\n \t  if ((gimple_code (last) == GIMPLE_RETURN\n \t       || gimple_call_builtin_p (last, BUILT_IN_RETURN))\n-\t      && (location = gimple_location (last)) != UNKNOWN_LOCATION)\n+\t      && location == UNKNOWN_LOCATION\n+\t      && (location = gimple_location (last)) != UNKNOWN_LOCATION\n+\t      && !optimize)\n \t    break;\n+\t  /* When optimizing, replace return stmts in noreturn functions\n+\t     with __builtin_unreachable () call.  */\n+\t  if (optimize && gimple_code (last) == GIMPLE_RETURN)\n+\t    {\n+\t      tree fndecl = builtin_decl_implicit (BUILT_IN_UNREACHABLE);\n+\t      gimple *new_stmt = gimple_build_call (fndecl, 0);\n+\t      gimple_set_location (new_stmt, gimple_location (last));\n+\t      gimple_stmt_iterator gsi = gsi_for_stmt (last);\n+\t      gsi_replace (&gsi, new_stmt, true);\n+\t      remove_edge (e);\n+\t    }\n+\t  else\n+\t    ei_next (&ei);\n \t}\n       if (location == UNKNOWN_LOCATION)\n \tlocation = cfun->function_end_locus;"}]}