{"sha": "019d6598357659e05640cf762b75e18953f70fe9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE5ZDY1OTgzNTc2NTllMDU2NDBjZjc2MmI3NWUxODk1M2Y3MGZlOQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2016-07-07T11:50:55Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2016-07-07T11:50:55Z"}, "message": "tree-scalar-evolution.c (iv_can_overflow_p): export.\n\n\n\t* tree-scalar-evolution.c (iv_can_overflow_p): export.\n\t* tree-scalar-evolution.h (iv_can_overflow_p): Declare.\n\t* tree-ssa-loop-ivopts.c (alloc_iv): Use it.\n\nFrom-SVN: r238088", "tree": {"sha": "64d511f44bec7f6041625ffaa3457e25ff29165e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64d511f44bec7f6041625ffaa3457e25ff29165e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/019d6598357659e05640cf762b75e18953f70fe9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/019d6598357659e05640cf762b75e18953f70fe9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/019d6598357659e05640cf762b75e18953f70fe9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/019d6598357659e05640cf762b75e18953f70fe9/comments", "author": null, "committer": null, "parents": [{"sha": "275792f2ebb69bc081c4ea764c75ddfd565f640c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/275792f2ebb69bc081c4ea764c75ddfd565f640c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/275792f2ebb69bc081c4ea764c75ddfd565f640c"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "fca1bac78e47ac7dc027dc5ee756b7c899566fb0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019d6598357659e05640cf762b75e18953f70fe9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019d6598357659e05640cf762b75e18953f70fe9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=019d6598357659e05640cf762b75e18953f70fe9", "patch": "@@ -1,3 +1,9 @@\n+2016-07-07  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-scalar-evolution.c (iv_can_overflow_p): export.\n+\t* tree-scalar-evolution.h (iv_can_overflow_p): Declare.\n+\t* tree-ssa-loop-ivopts.c (alloc_iv): Use it.\n+\n 2016-07-07  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \tPR ipa/71624"}, {"sha": "2097d81b6cbb25e7e048e44d7d7c49831f6307e1", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019d6598357659e05640cf762b75e18953f70fe9/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019d6598357659e05640cf762b75e18953f70fe9/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=019d6598357659e05640cf762b75e18953f70fe9", "patch": "@@ -3317,7 +3317,7 @@ scev_reset (void)\n    use this test even for derived IVs not computed every iteration or\n    hypotetical IVs to be inserted into code.  */\n \n-static bool\n+bool\n iv_can_overflow_p (struct loop *loop, tree type, tree base, tree step)\n {\n   widest_int nit;"}, {"sha": "382d71751cca28e33ec75d4112360fd7d22000c4", "filename": "gcc/tree-scalar-evolution.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019d6598357659e05640cf762b75e18953f70fe9/gcc%2Ftree-scalar-evolution.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019d6598357659e05640cf762b75e18953f70fe9/gcc%2Ftree-scalar-evolution.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.h?ref=019d6598357659e05640cf762b75e18953f70fe9", "patch": "@@ -38,6 +38,7 @@ extern unsigned int scev_const_prop (void);\n extern bool expression_expensive_p (tree);\n extern bool simple_iv (struct loop *, struct loop *, tree, struct affine_iv *,\n \t\t       bool);\n+extern bool iv_can_overflow_p (struct loop *, tree, tree, tree);\n extern tree compute_overall_effect_of_inner_loop (struct loop *, tree);\n \n /* Returns the basic block preceding LOOP, or the CFG entry block when"}, {"sha": "6b403f5b72fb4e668a7ee2f8c1a9f2f6032d8505", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019d6598357659e05640cf762b75e18953f70fe9/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019d6598357659e05640cf762b75e18953f70fe9/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=019d6598357659e05640cf762b75e18953f70fe9", "patch": "@@ -1181,6 +1181,10 @@ alloc_iv (struct ivopts_data *data, tree base, tree step,\n   iv->biv_p = false;\n   iv->nonlin_use = NULL;\n   iv->ssa_name = NULL_TREE;\n+  if (!no_overflow\n+       && !iv_can_overflow_p (data->current_loop, TREE_TYPE (base),\n+\t\t\t      base, step))\n+    no_overflow = true;\n   iv->no_overflow = no_overflow;\n   iv->have_address_use = false;\n "}]}