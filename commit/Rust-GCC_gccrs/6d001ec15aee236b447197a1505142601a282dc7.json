{"sha": "6d001ec15aee236b447197a1505142601a282dc7", "node_id": "C_kwDOANBUbNoAKDZkMDAxZWMxNWFlZTIzNmI0NDcxOTdhMTUwNTE0MjYwMWEyODJkYzc", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-08-10T00:16:43Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-08-10T00:16:43Z"}, "message": "Daily bump.", "tree": {"sha": "a370832af4eda58f9736183081e12df9a4568d5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a370832af4eda58f9736183081e12df9a4568d5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d001ec15aee236b447197a1505142601a282dc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d001ec15aee236b447197a1505142601a282dc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d001ec15aee236b447197a1505142601a282dc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d001ec15aee236b447197a1505142601a282dc7/comments", "author": null, "committer": null, "parents": [{"sha": "bddd8d86e3036e480158ba9219ee3f290ba652ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bddd8d86e3036e480158ba9219ee3f290ba652ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bddd8d86e3036e480158ba9219ee3f290ba652ce"}], "stats": {"total": 161, "additions": 160, "deletions": 1}, "files": [{"sha": "94508380d6dca9fea2ffa93b1875a4178faee4ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d001ec15aee236b447197a1505142601a282dc7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d001ec15aee236b447197a1505142601a282dc7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d001ec15aee236b447197a1505142601a282dc7", "patch": "@@ -1,3 +1,98 @@\n+2022-08-09  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* config/i386/i386-features.cc (scalar_chain::convert_compare):\n+\tCreate new pseudos only when/if needed.  Add support for TEST,\n+\ti.e. (COMPARE (AND x y) (const_int 0)), using UNSPEC_PTEST.\n+\tWhen broadcasting V2DImode and V4SImode use new pseudo register.\n+\t(timode_scalar_chain::convert_op): Do nothing if operand is\n+\talready V1TImode.  Avoid generating useless SUBREG conversions,\n+\ti.e. (SUBREG:V1TImode (REG:V1TImode) 0).  Handle CONST_WIDE_INT\n+\tin addition to CONST_INT by using CONST_SCALAR_INT_P.\n+\t(convertible_comparison_p): Use CONST_SCALAR_INT_P to match both\n+\tCONST_WIDE_INT and CONST_INT.  Recognize new *testti_doubleword\n+\tpattern as an STV candidate.\n+\t(timode_scalar_to_vector_candidate_p): Allow CONST_SCALAR_INT_P\n+\toperands in binary logic operations.\n+\t* config/i386/i386.cc (ix86_rtx_costs) <case UNSPEC>: Add costs\n+\tfor UNSPEC_PTEST; a PTEST that performs an AND has the same cost\n+\tas regular PTEST, i.e. cost->sse_op.\n+\t* config/i386/i386.md (*testti_doubleword): New pre-reload\n+\tdefine_insn_and_split that recognizes comparison of TI mode AND\n+\tagainst zero.\n+\t* config/i386/sse.md (*ptest<mode>_and): New pre-reload\n+\tdefine_insn_and_split that recognizes UNSPEC_PTEST of identical\n+\tAND operands.\n+\n+2022-08-09  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/21137\n+\tPR tree-optimization/98954\n+\t* fold-const.cc (fold_binary_loc): Remove optimizations to\n+\toptimize ((X >> C1) & C2) ==/!= 0.\n+\t* match.pd (cmp (bit_and (lshift @0 @1) @2) @3): Remove wi::ctz\n+\tcheck, and handle all values of INTEGER_CSTs @2 and @3.\n+\t(cmp (bit_and (rshift @0 @1) @2) @3): Likewise, remove wi::clz\n+\tchecks, and handle all values of INTEGER_CSTs @2 and @3.\n+\n+2022-08-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* doc/invoke.texi (Static Analyzer Options): Add notes on which\n+\tfunctions the analyzer has hardcoded knowledge of.\n+\n+2022-08-09  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn.cc (gcn_function_value): Allow vector return values.\n+\t(num_arg_regs): Allow vector arguments.\n+\t(gcn_function_arg): Likewise.\n+\t(gcn_function_arg_advance): Likewise.\n+\t(gcn_arg_partial_bytes): Likewise.\n+\t(gcn_return_in_memory): Likewise.\n+\t(gcn_expand_epilogue): Get return value from v8.\n+\t* config/gcn/gcn.h (RETURN_VALUE_REG): Set to v8.\n+\t(FIRST_PARM_REG): USE FIRST_SGPR_REG for clarity.\n+\t(FIRST_VPARM_REG): New.\n+\t(FUNCTION_ARG_REGNO_P): Allow vector parameters.\n+\t(struct gcn_args): Add vnum field.\n+\t(LIBCALL_VALUE): All vector return values.\n+\t* config/gcn/gcn.md (gcn_call_value): Add vector constraints.\n+\t(gcn_call_value_indirect): Likewise.\n+\n+2022-08-09  Richard Biener  <rguenther@suse.de>\n+\n+\t* omp-expand.cc (expand_omp_atomic_load): Emit GIMPLE\n+\tdirectly.  Avoid update_ssa when in SSA form.\n+\t(expand_omp_atomic_store): Likewise.\n+\t(expand_omp_atomic_fetch_op): Avoid update_ssa when in SSA\n+\tform.\n+\t(expand_omp_atomic_pipeline): Likewise.\n+\t(expand_omp_atomic_mutex): Likewise.\n+\t* tree-parloops.cc (gen_parallel_loop): Use\n+\tTODO_update_ssa_no_phi after loop_version.\n+\n+2022-08-09  Richard Biener  <rguenther@suse.de>\n+\n+\t* doc/invoke.texi (max-fsm-thread-length): Remove.\n+\t* params.opt (max-fsm-thread-length): Likewise.\n+\t* tree-ssa-threadbackward.cc\n+\t(back_threader_profitability::profitable_path_p): Do not\n+\tcheck max-fsm-thread-length.\n+\n+2022-08-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106514\n+\t* params.opt (max-jump-thread-paths): New.\n+\t* doc/invoke.texi (max-jump-thread-paths): Document.\n+\t* tree-ssa-threadbackward.cc (back_threader::find_paths_to_names):\n+\tHonor max-jump-thread-paths, take overall_path argument.\n+\t(back_threader::find_paths): Pass 1 as initial overall_path.\n+\n+2022-08-09  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR middle-end/106492\n+\t* omp-low.cc (lower_rec_input_clauses): Add missing folding\n+\tto data type of linear-clause list item.\n+\n 2022-08-08  Andrew MacLeod  <amacleod@redhat.com>\n \n \tPR tree-optimization/106556"}, {"sha": "9049af15948f12d6ea4eae416b269556f29a54f3", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d001ec15aee236b447197a1505142601a282dc7/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d001ec15aee236b447197a1505142601a282dc7/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=6d001ec15aee236b447197a1505142601a282dc7", "patch": "@@ -1 +1 @@\n-20220809\n+20220810"}, {"sha": "b16971b9eafdae4cd058f7275d0af473c9baf002", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d001ec15aee236b447197a1505142601a282dc7/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d001ec15aee236b447197a1505142601a282dc7/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=6d001ec15aee236b447197a1505142601a282dc7", "patch": "@@ -1,3 +1,9 @@\n+2022-08-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106573\n+\t* region-model.cc (region_model::on_call_pre): Ensure that we call\n+\tget_arg_svalue on all arguments.\n+\n 2022-08-05  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/105947"}, {"sha": "0af724b18a1ec4f9043aa18c6fd8bcb562a43a05", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d001ec15aee236b447197a1505142601a282dc7/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d001ec15aee236b447197a1505142601a282dc7/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=6d001ec15aee236b447197a1505142601a282dc7", "patch": "@@ -1,3 +1,17 @@\n+2022-08-09  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/106563\n+\t* decl.cc (DeclVisitor::visit (FuncDeclaration *)): Set semanticRun\n+\tbefore generating its symbol.\n+\t(function_defined_in_root_p): New function.\n+\t(function_needs_inline_definition_p): New function.\n+\t(maybe_build_decl_tree): New function.\n+\t(get_symbol_decl): Call maybe_build_decl_tree before returning symbol.\n+\t(start_function): Use function_defined_in_root_p instead of inline\n+\ttest for locally defined symbols.\n+\t(set_linkage_for_decl): Check for inline functions before private or\n+\tprotected symbols.\n+\n 2022-08-08  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/106555"}, {"sha": "314b8310b0ed3b5828fe2320a681be7f8c59d058", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d001ec15aee236b447197a1505142601a282dc7/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d001ec15aee236b447197a1505142601a282dc7/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=6d001ec15aee236b447197a1505142601a282dc7", "patch": "@@ -1,3 +1,8 @@\n+2022-08-09  Vibhav Pant  <vibhavp@gmail.com>\n+\n+\t* libgccjit.h (LIBGCCJIT_HAVE_gcc_jit_context_new_bitcast): Move\n+\tdefinition out of comment.\n+\n 2022-07-28  David Malcolm  <dmalcolm@redhat.com>\n \n \t* docs/internals/index.rst: Remove reference to \".c\" extensions"}, {"sha": "9a31d8d23ec85e6b0cc496d8fc805e324848b641", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d001ec15aee236b447197a1505142601a282dc7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d001ec15aee236b447197a1505142601a282dc7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6d001ec15aee236b447197a1505142601a282dc7", "patch": "@@ -1,3 +1,42 @@\n+2022-08-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106573\n+\t* gcc.dg/analyzer/error-uninit.c: New test.\n+\t* gcc.dg/analyzer/fd-uninit-1.c: New test.\n+\t* gcc.dg/analyzer/file-uninit-1.c: New test.\n+\n+2022-08-09  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.target/i386/sse4_1-stv-8.c: New test case.\n+\n+2022-08-09  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/21137\n+\tPR tree-optimization/98954\n+\t* gcc.dg/fold-eqandshift-4.c: New test case.\n+\n+2022-08-09  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/106563\n+\t* gdc.dg/torture/torture.exp (srcdir): New proc.\n+\t* gdc.dg/torture/imports/pr106563math.d: New test.\n+\t* gdc.dg/torture/imports/pr106563regex.d: New test.\n+\t* gdc.dg/torture/imports/pr106563uni.d: New test.\n+\t* gdc.dg/torture/pr106563.d: New test.\n+\n+2022-08-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106514\n+\t* gcc.dg/tree-ssa/ssa-thread-16.c: New testcase.\n+\t* gcc.dg/tree-ssa/ssa-thread-17.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-7.c: Adjust.\n+\n+2022-08-09  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR middle-end/106492\n+\t* g++.dg/gomp/pr106492.C: New test.\n+\n 2022-08-08  Andrew MacLeod  <amacleod@redhat.com>\n \n \tPR tree-optimization/106556"}]}