{"sha": "9789ba46f6c647ed2f893c8785585338b30c9847", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc4OWJhNDZmNmM2NDdlZDJmODkzYzg3ODU1ODUzMzhiMzBjOTg0Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-11-02T13:39:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-11-02T13:39:46Z"}, "message": "re PR c++/41774 (ice: vector VEC(visibility,base) pop domain error, in pop_visibility at c-pragma.c:757)\n\n\tPR c++/41774\n\t* c-pragma.c (visstack): Change into vector of ints rather than\n\tenum symbol_visibility.\n\t(push_visibility): Add kind argument, push default_visibility together\n\twith kind.\n\t(pop_visibility): Add kind argument, return true if successful, fail\n\tif visibility stack is empty or if stack top is of different kind.\n\t(handle_pragma_visibility): Don't check length of visstack, instead\n\tcall pop_visibility and issue diagnostics if it failed.  Pass 0\n\tas last argument to push_visibility and pop_visibility.\n\t* c-pragma.h (push_visibility): Add kind argument.\n\t(pop_visibility): Likewise.  Return bool instead of void.\n\n\t* name-lookup.c (handle_namespace_attrs): Pass 1 as last argument to\n\tpush_visibility.\n\t* parser.c (cp_parser_namespace_definition): Pass 1 as argument to\n\tpop_visibility.\n\t* rtti.c (push_abi_namespace): Pass 2 as last argument to\n\tpush_visibility.\n\t(pop_abi_namespace): Pass 2 as argument to pop_visibility.\n\n\t* g++.dg/ext/visibility/namespace3.C: New test.\n\nFrom-SVN: r153805", "tree": {"sha": "f1e838ec9a46d86a7ba26afebc76472b3823676e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1e838ec9a46d86a7ba26afebc76472b3823676e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9789ba46f6c647ed2f893c8785585338b30c9847", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9789ba46f6c647ed2f893c8785585338b30c9847", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9789ba46f6c647ed2f893c8785585338b30c9847", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9789ba46f6c647ed2f893c8785585338b30c9847/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3f252b91b1e4fd540f0e9e40a4ead814a011ec6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f252b91b1e4fd540f0e9e40a4ead814a011ec6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f252b91b1e4fd540f0e9e40a4ead814a011ec6e"}], "stats": {"total": 89, "additions": 66, "deletions": 23}, "files": [{"sha": "721c69e6482f614d6e65a05b59faa9b32e2ace99", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9789ba46f6c647ed2f893c8785585338b30c9847/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9789ba46f6c647ed2f893c8785585338b30c9847/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9789ba46f6c647ed2f893c8785585338b30c9847", "patch": "@@ -1,3 +1,18 @@\n+2009-11-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/41774\n+\t* c-pragma.c (visstack): Change into vector of ints rather than\n+\tenum symbol_visibility.\n+\t(push_visibility): Add kind argument, push default_visibility together\n+\twith kind.\n+\t(pop_visibility): Add kind argument, return true if successful, fail\n+\tif visibility stack is empty or if stack top is of different kind.\n+\t(handle_pragma_visibility): Don't check length of visstack, instead\n+\tcall pop_visibility and issue diagnostics if it failed.  Pass 0\n+\tas last argument to push_visibility and pop_visibility.\n+\t* c-pragma.h (push_visibility): Add kind argument.\n+\t(pop_visibility): Likewise.  Return bool instead of void.\n+\n 2009-11-01  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree.def (TARGET_MEM_REF): Update comment."}, {"sha": "f28164487070a369d949ebc9da707335d023c527", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9789ba46f6c647ed2f893c8785585338b30c9847/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9789ba46f6c647ed2f893c8785585338b30c9847/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=9789ba46f6c647ed2f893c8785585338b30c9847", "patch": "@@ -723,19 +723,20 @@ maybe_apply_renaming_pragma (tree decl, tree asmname)\n #ifdef HANDLE_PRAGMA_VISIBILITY\n static void handle_pragma_visibility (cpp_reader *);\n \n-typedef enum symbol_visibility visibility;\n-DEF_VEC_I (visibility);\n-DEF_VEC_ALLOC_I (visibility, heap);\n-static VEC (visibility, heap) *visstack;\n+static VEC (int, heap) *visstack;\n \n /* Push the visibility indicated by STR onto the top of the #pragma\n-   visibility stack.  */\n+   visibility stack.  KIND is 0 for #pragma GCC visibility, 1 for\n+   C++ namespace with visibility attribute and 2 for C++ builtin\n+   ABI namespace.  push_visibility/pop_visibility calls must have\n+   matching KIND, it is not allowed to push visibility using one\n+   KIND and pop using a different one.  */\n \n void\n-push_visibility (const char *str)\n+push_visibility (const char *str, int kind)\n {\n-  VEC_safe_push (visibility, heap, visstack,\n-\t\t default_visibility);\n+  VEC_safe_push (int, heap, visstack,\n+\t\t ((int) default_visibility) | (kind << 8));\n   if (!strcmp (str, \"default\"))\n     default_visibility = VISIBILITY_DEFAULT;\n   else if (!strcmp (str, \"internal\"))\n@@ -749,14 +750,21 @@ push_visibility (const char *str)\n   visibility_options.inpragma = 1;\n }\n \n-/* Pop a level of the #pragma visibility stack.  */\n+/* Pop a level of the #pragma visibility stack.  Return true if\n+   successful.  */\n \n-void\n-pop_visibility (void)\n+bool\n+pop_visibility (int kind)\n {\n-  default_visibility = VEC_pop (visibility, visstack);\n+  if (!VEC_length (int, visstack))\n+    return false;\n+  if ((VEC_last (int, visstack) >> 8) != kind)\n+    return false;\n+  default_visibility\n+    = (enum symbol_visibility) (VEC_pop (int, visstack) & 0xff);\n   visibility_options.inpragma\n-    = VEC_length (visibility, visstack) != 0;\n+    = VEC_length (int, visstack) != 0;\n+  return true;\n }\n \n /* Sets the default visibility for symbols to something other than that\n@@ -785,10 +793,8 @@ handle_pragma_visibility (cpp_reader *dummy ATTRIBUTE_UNUSED)\n     {\n       if (pop == action)\n \t{\n-\t  if (!VEC_length (visibility, visstack))\n+\t  if (! pop_visibility (0))\n \t    GCC_BAD (\"no matching push for %<#pragma GCC visibility pop%>\");\n-\t  else\n-\t    pop_visibility ();\n \t}\n       else\n \t{\n@@ -798,7 +804,7 @@ handle_pragma_visibility (cpp_reader *dummy ATTRIBUTE_UNUSED)\n \t  if (token != CPP_NAME)\n \t    GCC_BAD (\"malformed #pragma GCC visibility push\");\n \t  else\n-\t    push_visibility (IDENTIFIER_POINTER (x));\n+\t    push_visibility (IDENTIFIER_POINTER (x), 0);\n \t  if (pragma_lex (&x) != CPP_CLOSE_PAREN)\n \t    GCC_BAD (\"missing %<(%> after %<#pragma GCC visibility push%> - ignored\");\n \t}"}, {"sha": "eab23db6cd9a6ce79deafee99190828bfab6eef6", "filename": "gcc/c-pragma.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9789ba46f6c647ed2f893c8785585338b30c9847/gcc%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9789ba46f6c647ed2f893c8785585338b30c9847/gcc%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.h?ref=9789ba46f6c647ed2f893c8785585338b30c9847", "patch": "@@ -95,8 +95,8 @@ extern struct cpp_reader* parse_in;\n    visibility is not supported on the host OS platform the\n    statements are ignored.  */\n #define HANDLE_PRAGMA_VISIBILITY 1\n-extern void push_visibility (const char *);\n-extern void pop_visibility (void);\n+extern void push_visibility (const char *, int);\n+extern bool pop_visibility (int);\n \n extern void init_pragma (void);\n "}, {"sha": "044b56897472ddd55d0e34e82586f6e6b138147f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9789ba46f6c647ed2f893c8785585338b30c9847/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9789ba46f6c647ed2f893c8785585338b30c9847/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9789ba46f6c647ed2f893c8785585338b30c9847", "patch": "@@ -1,3 +1,14 @@\n+2009-11-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/41774\n+\t* name-lookup.c (handle_namespace_attrs): Pass 1 as last argument to\n+\tpush_visibility.\n+\t* parser.c (cp_parser_namespace_definition): Pass 1 as argument to\n+\tpop_visibility.\n+\t* rtti.c (push_abi_namespace): Pass 2 as last argument to\n+\tpush_visibility.\n+\t(pop_abi_namespace): Pass 2 as argument to pop_visibility.\n+\n 2009-10-31  Jason Merrill  <jason@redhat.com>\n \n \t* tree.c (cv_unqualified): New fn."}, {"sha": "25c8ac0aa626f311de8720cbdb2a0a3afaf73973", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9789ba46f6c647ed2f893c8785585338b30c9847/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9789ba46f6c647ed2f893c8785585338b30c9847/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=9789ba46f6c647ed2f893c8785585338b30c9847", "patch": "@@ -3219,7 +3219,7 @@ handle_namespace_attrs (tree ns, tree attributes)\n \t\t     \"%qD attribute is meaningless since members of the \"\n \t\t     \"anonymous namespace get local symbols\", name);\n \n-\t  push_visibility (TREE_STRING_POINTER (x));\n+\t  push_visibility (TREE_STRING_POINTER (x), 1);\n \t  saw_vis = true;\n \t}\n       else"}, {"sha": "b24d6b1c0e9f53e826ea05e8a2aa3bcb5881d629", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9789ba46f6c647ed2f893c8785585338b30c9847/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9789ba46f6c647ed2f893c8785585338b30c9847/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=9789ba46f6c647ed2f893c8785585338b30c9847", "patch": "@@ -12846,7 +12846,7 @@ cp_parser_namespace_definition (cp_parser* parser)\n \n #ifdef HANDLE_PRAGMA_VISIBILITY\n   if (has_visibility)\n-    pop_visibility ();\n+    pop_visibility (1);\n #endif\n \n   /* Finish the namespace.  */"}, {"sha": "3fb6d11c0ce9b03a69a285556377e672539472c1", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9789ba46f6c647ed2f893c8785585338b30c9847/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9789ba46f6c647ed2f893c8785585338b30c9847/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=9789ba46f6c647ed2f893c8785585338b30c9847", "patch": "@@ -128,13 +128,13 @@ static void\n push_abi_namespace (void)\n {\n   push_nested_namespace (abi_node);\n-  push_visibility (\"default\");\n+  push_visibility (\"default\", 2);\n }\n \n static void\n pop_abi_namespace (void)\n {\n-  pop_visibility ();\n+  pop_visibility (2);\n   pop_nested_namespace (abi_node);\n }\n "}, {"sha": "dd4995629428c041a3989f700b1e4d79eeee2723", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9789ba46f6c647ed2f893c8785585338b30c9847/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9789ba46f6c647ed2f893c8785585338b30c9847/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9789ba46f6c647ed2f893c8785585338b30c9847", "patch": "@@ -1,3 +1,8 @@\n+2009-11-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/41774\n+\t* g++.dg/ext/visibility/namespace3.C: New test.\n+\n 2009-11-01  Jason Merrill  <jason@redhat.com>\n \n \t* gcc.dg/tree-ssa/restrict-1.c: Move to c-c++-common."}, {"sha": "a07abdcd89a0aa3d2c9cfc4b900a7f3f16f322d4", "filename": "gcc/testsuite/g++.dg/ext/visibility/namespace3.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9789ba46f6c647ed2f893c8785585338b30c9847/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fnamespace3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9789ba46f6c647ed2f893c8785585338b30c9847/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fnamespace3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fnamespace3.C?ref=9789ba46f6c647ed2f893c8785585338b30c9847", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/41774\n+// { dg-do compile }\n+\n+namespace std __attribute__ ((__visibility__ (\"default\"))) {\n+#pragma GCC visibility pop\t// { dg-warning \"no matching push for\" }\n+}"}]}