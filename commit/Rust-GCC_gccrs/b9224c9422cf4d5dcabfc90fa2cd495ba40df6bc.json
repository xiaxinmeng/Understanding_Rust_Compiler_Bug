{"sha": "b9224c9422cf4d5dcabfc90fa2cd495ba40df6bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkyMjRjOTQyMmNmNGQ1ZGNhYmZjOTBmYTJjZDQ5NWJhNDBkZjZiYw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-11-21T11:47:02Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-11-21T11:47:02Z"}, "message": "profile.c (compute_branch_probabilites): Compute probabilities for entry/exit edges; estimate probabilities for zero counts.\n\n\t* profile.c (compute_branch_probabilites):  Compute probabilities\n\tfor entry/exit edges; estimate probabilities for zero counts.\n\nFrom-SVN: r47242", "tree": {"sha": "b19b0cb46992c15fd662305fdbc553515cd42c12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b19b0cb46992c15fd662305fdbc553515cd42c12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9224c9422cf4d5dcabfc90fa2cd495ba40df6bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9224c9422cf4d5dcabfc90fa2cd495ba40df6bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9224c9422cf4d5dcabfc90fa2cd495ba40df6bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9224c9422cf4d5dcabfc90fa2cd495ba40df6bc/comments", "author": null, "committer": null, "parents": [{"sha": "1258ee8070967d846e414cfc231cdb39b5de7c69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1258ee8070967d846e414cfc231cdb39b5de7c69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1258ee8070967d846e414cfc231cdb39b5de7c69"}], "stats": {"total": 77, "additions": 52, "deletions": 25}, "files": [{"sha": "41a53e2f281950fc3e54ab5563fde9f0302de4dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9224c9422cf4d5dcabfc90fa2cd495ba40df6bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9224c9422cf4d5dcabfc90fa2cd495ba40df6bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9224c9422cf4d5dcabfc90fa2cd495ba40df6bc", "patch": "@@ -1,3 +1,8 @@\n+Wed Nov 21 12:38:37 CET 2001  Jan Hubicka\n+\n+\t* profile.c (compute_branch_probabilites):  Compute probabilities\n+\tfor entry/exit edges; estimate probabilities for zero counts.\n+\n 2001-11-21  Jakub Jelinek  <jakub@redhat.com>\n \n \t* explow.c (probe_stack_range): Use LCT_NORMAL as second argument"}, {"sha": "1aea55969bd0ec2d65baa6f7f3f07ea2936ed238", "filename": "gcc/profile.c", "status": "modified", "additions": 47, "deletions": 25, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9224c9422cf4d5dcabfc90fa2cd495ba40df6bc/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9224c9422cf4d5dcabfc90fa2cd495ba40df6bc/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=b9224c9422cf4d5dcabfc90fa2cd495ba40df6bc", "patch": "@@ -411,38 +411,32 @@ compute_branch_probabilities ()\n   num_never_executed = 0;\n   num_branches = 0;\n \n-  for (i = 0; i < n_basic_blocks; i++)\n+  for (i = 0; i <= n_basic_blocks + 1; i++)\n     {\n-      basic_block bb = BASIC_BLOCK (i);\n+      basic_block bb = GCOV_INDEX_TO_BB (i);\n       edge e;\n       gcov_type total;\n       rtx note;\n \n       total = bb->count;\n       if (total)\n-\tfor (e = bb->succ; e; e = e->succ_next)\n-\t  {\n-\t      e->probability = (e->count * REG_BR_PROB_BASE + total / 2) / total;\n-\t      if (e->probability < 0 || e->probability > REG_BR_PROB_BASE)\n-\t\t{\n-\t\t  error (\"Corrupted profile info: prob for %d-%d thought to be %d\",\n-\t\t\t e->src->index, e->dest->index, e->probability);\n-\t\t  e->probability = REG_BR_PROB_BASE / 2;\n-\t\t}\n-\t  }\n-      if (any_condjump_p (bb->end)\n-\t  && bb->succ->succ_next)\n \t{\n-\t  int prob;\n-\t  edge e;\n-\n-\t  if (total == 0)\n-\t    prob = -1;\n-\t  else\n-\t  if (total == -1)\n-\t    num_never_executed++;\n-\t  else\n+\t  for (e = bb->succ; e; e = e->succ_next)\n \t    {\n+\t\te->probability = (e->count * REG_BR_PROB_BASE + total / 2) / total;\n+\t\tif (e->probability < 0 || e->probability > REG_BR_PROB_BASE)\n+\t\t  {\n+\t\t    error (\"Corrupted profile info: prob for %d-%d thought to be %d\",\n+\t\t\t   e->src->index, e->dest->index, e->probability);\n+\t\t    e->probability = REG_BR_PROB_BASE / 2;\n+\t\t  }\n+\t    }\n+\t  if (bb->index >= 0\n+\t      && any_condjump_p (bb->end)\n+\t      && bb->succ->succ_next)\n+\t    {\n+\t      int prob;\n+\t      edge e;\n \t      int index;\n \n \t      /* Find the branch edge.  It is possible that we do have fake\n@@ -467,9 +461,37 @@ compute_branch_probabilities ()\n \t\tREG_NOTES (bb->end)\n \t\t  = gen_rtx_EXPR_LIST (REG_BR_PROB, GEN_INT (prob),\n \t\t\t\t       REG_NOTES (bb->end));\n+\t      num_branches++;\n \t    }\n-\t  num_branches++;\n-\n+\t}\n+      /* Otherwise distribute the probabilities evenly so we get sane sum.\n+\t Use simple heuristics that if there are normal edges, give all abnormals\n+\t frequency of 0, otherwise distribute the frequency over abnormals\n+\t (this is the case of noreturn calls).  */\n+      else\n+\t{\n+\t  for (e = bb->succ; e; e = e->succ_next)\n+\t    if (!(e->flags & (EDGE_COMPLEX | EDGE_FAKE)))\n+\t      total ++;\n+\t  if (total)\n+\t    {\n+\t      for (e = bb->succ; e; e = e->succ_next)\n+\t\tif (!(e->flags & (EDGE_COMPLEX | EDGE_FAKE)))\n+\t\t  e->probability = REG_BR_PROB_BASE / total;\n+\t\telse\n+\t\t  e->probability = 0;\n+\t    }\n+\t  else\n+\t    {\n+\t      for (e = bb->succ; e; e = e->succ_next)\n+\t\ttotal ++;\n+\t      for (e = bb->succ; e; e = e->succ_next)\n+\t\te->probability = REG_BR_PROB_BASE / total;\n+\t    }\n+\t  if (bb->index >= 0\n+\t      && any_condjump_p (bb->end)\n+\t      && bb->succ->succ_next)\n+\t    num_branches++, num_never_executed;\n \t}\n     }\n "}]}