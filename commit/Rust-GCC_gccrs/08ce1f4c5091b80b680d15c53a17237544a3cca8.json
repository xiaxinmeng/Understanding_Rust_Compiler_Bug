{"sha": "08ce1f4c5091b80b680d15c53a17237544a3cca8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhjZTFmNGM1MDkxYjgwYjY4MGQxNWM1M2ExNzIzNzU0NGEzY2NhOA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-06-14T07:37:24Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-06-14T09:13:55Z"}, "message": "tree-optimization/101031 - fix strlen opt invalidation logic\n\nstrlen opt uses ao_ref_init_from_ptr_and_size to prepare alias\nqueries to invalidate its knowledge about strings.  It constrains\nthe size using the number of known-nonzero chars and adds one\nfor a terminating nul - without knowing whether such nul exists\nor even fits the object.  The latter is now a problem since the\noracle disambiguates an access of size two (as built so) against\na store to a plain char variable (where a terminating nul does not\nfit).  The fix is to instead increment max_size but leave size to\nthe number of chars we know are accessed.\n\n2021-06-14  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/101031\n\t* tree-ssa-strlen.c (maybe_invalidate): Increment max_size\n\tinstead of size when accounting for a possibly string\n\tterminating nul.\n\n\t* gcc.dg/torture/pr101031.c: New testcase.", "tree": {"sha": "921989e2ead403e12865d41574b5b273d17b24e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/921989e2ead403e12865d41574b5b273d17b24e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08ce1f4c5091b80b680d15c53a17237544a3cca8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08ce1f4c5091b80b680d15c53a17237544a3cca8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08ce1f4c5091b80b680d15c53a17237544a3cca8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08ce1f4c5091b80b680d15c53a17237544a3cca8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44b1502070d770927e001c570ed3c636e7303248", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44b1502070d770927e001c570ed3c636e7303248", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44b1502070d770927e001c570ed3c636e7303248"}], "stats": {"total": 47, "additions": 39, "deletions": 8}, "files": [{"sha": "daf3bcf44eb0e607813e75d91cbb4a93d1a59531", "filename": "gcc/testsuite/gcc.dg/torture/pr101031.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08ce1f4c5091b80b680d15c53a17237544a3cca8/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr101031.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08ce1f4c5091b80b680d15c53a17237544a3cca8/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr101031.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr101031.c?ref=08ce1f4c5091b80b680d15c53a17237544a3cca8", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+\n+int a;\n+char b, e;\n+static char *c = &b;\n+static long d;\n+void f(void);\n+void __attribute__((noipa)) h() {\n+  int g = 0;\n+  for (; g < 2; ++g) {\n+    d = *c;\n+    *c = 1;\n+    b = 0;\n+  }\n+  f();\n+}\n+void __attribute__((noipa)) f() {\n+  if (d++)\n+    c = &e;\n+  for (; a;)\n+    ;\n+}\n+int main() {\n+  h();\n+  if (b != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "6add8c99032df09bf282d4917b2b29f02697b175", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08ce1f4c5091b80b680d15c53a17237544a3cca8/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08ce1f4c5091b80b680d15c53a17237544a3cca8/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=08ce1f4c5091b80b680d15c53a17237544a3cca8", "patch": "@@ -1284,16 +1284,19 @@ maybe_invalidate (gimple *stmt, bool zero_write = false)\n \tcontinue;\n \n       ao_ref r;\n-      tree size = NULL_TREE;\n-      if (si->nonzero_chars)\n+      tree size = si->nonzero_chars;\n+      ao_ref_init_from_ptr_and_size (&r, si->ptr, size);\n+      /* Include the terminating nul in the size of the string\n+\t to consider when determining possible clobber.  But do not\n+\t add it to 'size' since we don't know whether it would\n+\t actually fit the allocated area.  */\n+      if (known_size_p (r.size))\n \t{\n-\t  /* Include the terminating nul in the size of the string\n-\t     to consider when determining possible clobber.  */\n-\t  tree type = TREE_TYPE (si->nonzero_chars);\n-\t  size = fold_build2 (PLUS_EXPR, type, si->nonzero_chars,\n-\t\t\t      build_int_cst (type, 1));\n+\t  if (known_le (r.size, HOST_WIDE_INT_MAX - BITS_PER_UNIT))\n+\t    r.max_size += BITS_PER_UNIT;\n+\t  else\n+\t    r.max_size = -1;\n \t}\n-      ao_ref_init_from_ptr_and_size (&r, si->ptr, size);\n       if (stmt_may_clobber_ref_p_1 (stmt, &r))\n \t{\n \t  if (dump_file && (dump_flags & TDF_DETAILS))"}]}