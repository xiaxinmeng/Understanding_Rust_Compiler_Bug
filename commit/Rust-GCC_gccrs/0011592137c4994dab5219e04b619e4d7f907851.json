{"sha": "0011592137c4994dab5219e04b619e4d7f907851", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAxMTU5MjEzN2M0OTk0ZGFiNTIxOWUwNGI2MTllNGQ3ZjkwNzg1MQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2012-04-27T06:12:49Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2012-04-27T06:12:49Z"}, "message": "re PR tree-optimization/51879 (Missed tail merging with non-const/pure calls)\n\n2012-04-27  Tom de Vries  <tom@codesourcery.com>\n\n\tPR tree-optimization/51879\n\t* tree-ssa-sccvn.h (struct vn_reference_s): Add result_vdef field.\n\t* tree-ssa-sccvn.c (mark_use_processed): New function, factored out\n\tof ...\n\t(defs_to_varying): ... here.  Don't set use_processed.\n\t(visit_reference_op_call): Handle gimple_vdef.\n\tHandle case that lhs is NULL_TREE.\n\t(visit_use): Use mark_use_processed.  Handle calls with side-effect\n\tusing visit_reference_op_call.\n\nFrom-SVN: r186894", "tree": {"sha": "32d5a292be572938e2863ca0e7b28ffebd4f377e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32d5a292be572938e2863ca0e7b28ffebd4f377e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0011592137c4994dab5219e04b619e4d7f907851", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0011592137c4994dab5219e04b619e4d7f907851", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0011592137c4994dab5219e04b619e4d7f907851", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0011592137c4994dab5219e04b619e4d7f907851/comments", "author": null, "committer": null, "parents": [{"sha": "c9dd1d39400fb807be9bf615d2b257189a1e83e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9dd1d39400fb807be9bf615d2b257189a1e83e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9dd1d39400fb807be9bf615d2b257189a1e83e5"}], "stats": {"total": 125, "additions": 91, "deletions": 34}, "files": [{"sha": "c4865775f622a7a72c120fa0438284b9370b85fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0011592137c4994dab5219e04b619e4d7f907851/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0011592137c4994dab5219e04b619e4d7f907851/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0011592137c4994dab5219e04b619e4d7f907851", "patch": "@@ -1,3 +1,15 @@\n+2012-04-27  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR tree-optimization/51879\n+\t* tree-ssa-sccvn.h (struct vn_reference_s): Add result_vdef field.\n+\t* tree-ssa-sccvn.c (mark_use_processed): New function, factored out\n+\tof ...\n+\t(defs_to_varying): ... here.  Don't set use_processed.\n+\t(visit_reference_op_call): Handle gimple_vdef.\n+\tHandle case that lhs is NULL_TREE.\n+\t(visit_use): Use mark_use_processed.  Handle calls with side-effect\n+\tusing visit_reference_op_call.\n+\n 2012-04-26  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* sched-deps.c (fixup_sched_groups): Rename to..."}, {"sha": "e9e6bfa7c70f36ea5b9f4b5122d2bd76428d26bf", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 78, "deletions": 34, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0011592137c4994dab5219e04b619e4d7f907851/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0011592137c4994dab5219e04b619e4d7f907851/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=0011592137c4994dab5219e04b619e4d7f907851", "patch": "@@ -2525,6 +2525,30 @@ set_ssa_val_to (tree from, tree to)\n   return false;\n }\n \n+/* Mark as processed all the definitions in the defining stmt of USE, or\n+   the USE itself.  */\n+\n+static void\n+mark_use_processed (tree use)\n+{\n+  ssa_op_iter iter;\n+  def_operand_p defp;\n+  gimple stmt = SSA_NAME_DEF_STMT (use);\n+\n+  if (SSA_NAME_IS_DEFAULT_DEF (use) || gimple_code (stmt) == GIMPLE_PHI)\n+    {\n+      VN_INFO (use)->use_processed = true;\n+      return;\n+    }\n+\n+  FOR_EACH_SSA_DEF_OPERAND (defp, stmt, iter, SSA_OP_ALL_DEFS)\n+    {\n+      tree def = DEF_FROM_PTR (defp);\n+\n+      VN_INFO (def)->use_processed = true;\n+    }\n+}\n+\n /* Set all definitions in STMT to value number to themselves.\n    Return true if a value number changed. */\n \n@@ -2538,8 +2562,6 @@ defs_to_varying (gimple stmt)\n   FOR_EACH_SSA_DEF_OPERAND (defp, stmt, iter, SSA_OP_ALL_DEFS)\n     {\n       tree def = DEF_FROM_PTR (defp);\n-\n-      VN_INFO (def)->use_processed = true;\n       changed |= set_ssa_val_to (def, def);\n     }\n   return changed;\n@@ -2598,34 +2620,49 @@ visit_reference_op_call (tree lhs, gimple stmt)\n {\n   bool changed = false;\n   struct vn_reference_s vr1;\n-  tree result;\n+  vn_reference_t vnresult = NULL;\n   tree vuse = gimple_vuse (stmt);\n+  tree vdef = gimple_vdef (stmt);\n \n   vr1.vuse = vuse ? SSA_VAL (vuse) : NULL_TREE;\n   vr1.operands = valueize_shared_reference_ops_from_call (stmt);\n   vr1.type = gimple_expr_type (stmt);\n   vr1.set = 0;\n   vr1.hashcode = vn_reference_compute_hash (&vr1);\n-  result = vn_reference_lookup_1 (&vr1, NULL);\n-  if (result)\n+  vn_reference_lookup_1 (&vr1, &vnresult);\n+\n+  if (vnresult)\n     {\n-      changed = set_ssa_val_to (lhs, result);\n-      if (TREE_CODE (result) == SSA_NAME\n-\t  && VN_INFO (result)->has_constants)\n-\tVN_INFO (lhs)->has_constants = true;\n+      if (vnresult->result_vdef)\n+\tchanged |= set_ssa_val_to (vdef, vnresult->result_vdef);\n+\n+      if (!vnresult->result && lhs)\n+\tvnresult->result = lhs;\n+\n+      if (vnresult->result && lhs)\n+\t{\n+\t  changed |= set_ssa_val_to (lhs, vnresult->result);\n+\n+\t  if (VN_INFO (vnresult->result)->has_constants)\n+\t    VN_INFO (lhs)->has_constants = true;\n+\t}\n     }\n   else\n     {\n       void **slot;\n       vn_reference_t vr2;\n-      changed = set_ssa_val_to (lhs, lhs);\n+      if (vdef)\n+\tchanged |= set_ssa_val_to (vdef, vdef);\n+      if (lhs)\n+\tchanged |= set_ssa_val_to (lhs, lhs);\n       vr2 = (vn_reference_t) pool_alloc (current_info->references_pool);\n       vr2->vuse = vr1.vuse;\n       vr2->operands = valueize_refs (create_reference_ops_from_call (stmt));\n       vr2->type = vr1.type;\n       vr2->set = vr1.set;\n       vr2->hashcode = vr1.hashcode;\n       vr2->result = lhs;\n+      vr2->result_vdef = vdef;\n       slot = htab_find_slot_with_hash (current_info->references,\n \t\t\t\t       vr2, vr2->hashcode, INSERT);\n       if (*slot)\n@@ -2795,7 +2832,6 @@ visit_reference_op_store (tree lhs, tree op, gimple stmt)\n \t going to valueize the references in-place.  */\n       if ((vdef = gimple_vdef (stmt)))\n \t{\n-\t  VN_INFO (vdef)->use_processed = true;\n \t  changed |= set_ssa_val_to (vdef, vdef);\n \t}\n \n@@ -2817,7 +2853,6 @@ visit_reference_op_store (tree lhs, tree op, gimple stmt)\n       def = gimple_vdef (stmt);\n       use = gimple_vuse (stmt);\n \n-      VN_INFO (def)->use_processed = true;\n       changed |= set_ssa_val_to (def, SSA_VAL (use));\n     }\n \n@@ -3167,7 +3202,7 @@ visit_use (tree use)\n   bool changed = false;\n   gimple stmt = SSA_NAME_DEF_STMT (use);\n \n-  VN_INFO (use)->use_processed = true;\n+  mark_use_processed (use);\n \n   gcc_assert (!SSA_NAME_IN_FREE_LIST (use));\n   if (dump_file && (dump_flags & TDF_DETAILS)\n@@ -3186,8 +3221,7 @@ visit_use (tree use)\n     {\n       if (gimple_code (stmt) == GIMPLE_PHI)\n \tchanged = visit_phi (stmt);\n-      else if (!gimple_has_lhs (stmt)\n-\t       || gimple_has_volatile_ops (stmt))\n+      else if (gimple_has_volatile_ops (stmt))\n \tchanged = defs_to_varying (stmt);\n       else if (is_gimple_assign (stmt))\n \t{\n@@ -3349,34 +3383,44 @@ visit_use (tree use)\n \n \t  /* ???  We could try to simplify calls.  */\n \n-\t  if (stmt_has_constants (stmt)\n-\t      && TREE_CODE (lhs) == SSA_NAME)\n-\t    VN_INFO (lhs)->has_constants = true;\n-\t  else if (TREE_CODE (lhs) == SSA_NAME)\n+\t  if (lhs && TREE_CODE (lhs) == SSA_NAME)\n \t    {\n-\t      /* We reset expr and constantness here because we may\n-\t\t have been value numbering optimistically, and\n-\t\t iterating. They may become non-constant in this case,\n-\t\t even if they were optimistically constant. */\n-\t      VN_INFO (lhs)->has_constants = false;\n-\t      VN_INFO (lhs)->expr = NULL_TREE;\n+\t      if (stmt_has_constants (stmt))\n+\t\tVN_INFO (lhs)->has_constants = true;\n+\t      else\n+\t\t{\n+\t\t  /* We reset expr and constantness here because we may\n+\t\t     have been value numbering optimistically, and\n+\t\t     iterating.  They may become non-constant in this case,\n+\t\t     even if they were optimistically constant.  */\n+\t\t  VN_INFO (lhs)->has_constants = false;\n+\t\t  VN_INFO (lhs)->expr = NULL_TREE;\n+\t\t}\n+\n+\t      if (SSA_NAME_OCCURS_IN_ABNORMAL_PHI (lhs))\n+\t\t{\n+\t\t  changed = defs_to_varying (stmt);\n+\t\t  goto done;\n+\t\t}\n \t    }\n \n-\t  if (TREE_CODE (lhs) == SSA_NAME\n-\t      && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (lhs))\n-\t    changed = defs_to_varying (stmt);\n \t  /* ???  We should handle stores from calls.  */\n-\t  else if (TREE_CODE (lhs) == SSA_NAME)\n+\t  if (!gimple_call_internal_p (stmt)\n+\t      && (gimple_call_flags (stmt) & (ECF_PURE | ECF_CONST)\n+\t\t  /* If the call has side effects, subsequent calls won't have\n+\t\t     the same incoming vuse, so it's save to assume\n+\t\t     equality.  */\n+\t\t  || gimple_has_side_effects (stmt))\n+\t      && ((lhs && TREE_CODE (lhs) == SSA_NAME)\n+\t\t  || (!lhs && gimple_vdef (stmt))))\n \t    {\n-\t      if (!gimple_call_internal_p (stmt)\n-\t\t  && gimple_call_flags (stmt) & (ECF_PURE | ECF_CONST))\n-\t\tchanged = visit_reference_op_call (lhs, stmt);\n-\t      else\n-\t\tchanged = defs_to_varying (stmt);\n+\t      changed = visit_reference_op_call (lhs, stmt);\n \t    }\n \t  else\n \t    changed = defs_to_varying (stmt);\n \t}\n+      else\n+\tchanged = defs_to_varying (stmt);\n     }\n  done:\n   return changed;"}, {"sha": "a4f294f0788cd44f11473a423949268d0b069d9c", "filename": "gcc/tree-ssa-sccvn.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0011592137c4994dab5219e04b619e4d7f907851/gcc%2Ftree-ssa-sccvn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0011592137c4994dab5219e04b619e4d7f907851/gcc%2Ftree-ssa-sccvn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.h?ref=0011592137c4994dab5219e04b619e4d7f907851", "patch": "@@ -110,6 +110,7 @@ typedef struct vn_reference_s\n   tree type;\n   VEC (vn_reference_op_s, heap) *operands;\n   tree result;\n+  tree result_vdef;\n } *vn_reference_t;\n typedef const struct vn_reference_s *const_vn_reference_t;\n "}]}