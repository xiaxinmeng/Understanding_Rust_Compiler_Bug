{"sha": "39d45901b349d70579241a01327f7fb2d7f1973d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzlkNDU5MDFiMzQ5ZDcwNTc5MjQxYTAxMzI3ZjdmYjJkN2YxOTczZA==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-06-28T20:07:32Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-06-28T20:07:32Z"}, "message": "choose-temp.c (choose_temp_base): Restore original variant of this function for compatibility.\n\n        * choose-temp.c (choose_temp_base): Restore original variant of\n        this function for compatibility.\n        (make_temp_file): This is the new, preferred interface to create\n        temporary files.\n        * collect2.c (choose_temp_base): Delete declaration.\n        (make_temp_file): Declare.\n        (temp_filename_length, temp_filename): Delete.\n        (main): Use make_temp_file to get temporary files.  Use --lang-c\n        to force the resulting ctort/dtor file to be compiled with the C\n        compiler.  Make sure to remove temporary files on all exit paths.\n        * gcc.c (make_temp_file): Provide prototype if MKTEMP_EACH_FILE is\n        defined.\n        (choose_temp_base): Only provide prototype if MKTEMP_EACH_FILE is\n        not defined.\n        (do_spec): Use make_temp_file if MKTEMP_EACH_FILE is defined.\n\nFrom-SVN: r20784", "tree": {"sha": "090fc13e4457409b9fd5f4c8b2fe0006c1e8ba1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/090fc13e4457409b9fd5f4c8b2fe0006c1e8ba1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39d45901b349d70579241a01327f7fb2d7f1973d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39d45901b349d70579241a01327f7fb2d7f1973d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39d45901b349d70579241a01327f7fb2d7f1973d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39d45901b349d70579241a01327f7fb2d7f1973d/comments", "author": null, "committer": null, "parents": [{"sha": "b0d45b7466551a15e6734144b03e13397af90a14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0d45b7466551a15e6734144b03e13397af90a14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0d45b7466551a15e6734144b03e13397af90a14"}], "stats": {"total": 108, "additions": 86, "deletions": 22}, "files": [{"sha": "225395a8fecd266cc58f170d07e887df5f933661", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39d45901b349d70579241a01327f7fb2d7f1973d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39d45901b349d70579241a01327f7fb2d7f1973d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=39d45901b349d70579241a01327f7fb2d7f1973d", "patch": "@@ -1,3 +1,21 @@\n+Sun Jun 28 20:58:51 1998  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* choose-temp.c (choose_temp_base): Restore original variant of\n+\tthis function for compatibility.\n+\t(make_temp_file): This is the new, preferred interface to create\n+\ttemporary files.\n+\t* collect2.c (choose_temp_base): Delete declaration.\n+\t(make_temp_file): Declare.\n+\t(temp_filename_length, temp_filename): Delete.\n+\t(main): Use make_temp_file to get temporary files.  Use --lang-c\n+\tto force the resulting ctort/dtor file to be compiled with the C\n+\tcompiler.  Make sure to remove temporary files on all exit paths.\n+\t* gcc.c (make_temp_file): Provide prototype if MKTEMP_EACH_FILE is\n+\tdefined.\n+\t(choose_temp_base): Only provide prototype if MKTEMP_EACH_FILE is\n+\tnot defined.\n+\t(do_spec): Use make_temp_file if MKTEMP_EACH_FILE is defined.\n+\n Sun Jun 28 08:57:09 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* configure.in (GCC_NEED_DECLARATIONS): Add strerror, getcwd and"}, {"sha": "e012c6a4b798fd1755a5890ed7852fcd10d59e85", "filename": "gcc/choose-temp.c", "status": "modified", "additions": 49, "deletions": 2, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39d45901b349d70579241a01327f7fb2d7f1973d/gcc%2Fchoose-temp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39d45901b349d70579241a01327f7fb2d7f1973d/gcc%2Fchoose-temp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fchoose-temp.c?ref=39d45901b349d70579241a01327f7fb2d7f1973d", "patch": "@@ -17,7 +17,7 @@ License along with libiberty; see the file COPYING.LIB.  If not,\n write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* This file exports one function: choose_temp_base.  */\n+/* This file exports two functions: choose_temp_base and make_temp_file.  */\n \n /* This file lives in at least two places: libiberty and gcc.\n    Don't change one without the other.  */\n@@ -102,10 +102,57 @@ try (dir, base)\n /* Return a prefix for temporary file names or NULL if unable to find one.\n    The current directory is chosen if all else fails so the program is\n    exited if a temporary directory can't be found (mktemp fails).\n-   The buffer for the result is obtained with xmalloc.  */\n+   The buffer for the result is obtained with xmalloc. \n+\n+   This function is provided for backwards compatability only.  It use\n+   is not recommended.  */\n \n char *\n choose_temp_base ()\n+{\n+  char *base = 0;\n+  char *temp_filename;\n+  int len;\n+  static char tmp[] = { DIR_SEPARATOR, 't', 'm', 'p', 0 };\n+  static char usrtmp[] = { DIR_SEPARATOR, 'u', 's', 'r', DIR_SEPARATOR, 't', 'm', 'p', 0 };\n+\n+  base = try (getenv (\"TMPDIR\"), base);\n+  base = try (getenv (\"TMP\"), base);\n+  base = try (getenv (\"TEMP\"), base);\n+\n+#ifdef P_tmpdir\n+  base = try (P_tmpdir, base);\n+#endif\n+\n+  /* Try /usr/tmp, then /tmp.  */\n+  base = try (usrtmp, base);\n+  base = try (tmp, base);\n+ \n+  /* If all else fails, use the current directory!  */\n+  if (base == 0)\n+    base = \".\";\n+\n+  len = strlen (base);\n+  temp_filename = xmalloc (len + 1 /*DIR_SEPARATOR*/\n+\t\t\t   + strlen (TEMP_FILE) + 1);\n+  strcpy (temp_filename, base);\n+\n+  if (len != 0\n+      && temp_filename[len-1] != '/'\n+      && temp_filename[len-1] != DIR_SEPARATOR)\n+    temp_filename[len++] = DIR_SEPARATOR;\n+  strcpy (temp_filename + len, TEMP_FILE);\n+\n+  mktemp (temp_filename);\n+  if (strlen (temp_filename) == 0)\n+    abort ();\n+  return temp_filename;\n+}\n+/* Return a temporary file name (as a string) or NULL if unable to create\n+   one.  */\n+\n+char *\n+make_temp_file ()\n {\n   char *base = 0;\n   char *temp_filename;"}, {"sha": "7c6e2b3adc0f94c748860dcb26e1e5ad4e38d6a4", "filename": "gcc/collect2.c", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39d45901b349d70579241a01327f7fb2d7f1973d/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39d45901b349d70579241a01327f7fb2d7f1973d/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=39d45901b349d70579241a01327f7fb2d7f1973d", "patch": "@@ -60,7 +60,7 @@ Boston, MA 02111-1307, USA.  */\n #define WEXITSTATUS(S) (((S) & 0xff00) >> 8)\n #endif\n \n-extern char *choose_temp_base ();\n+extern char *make_temp_file ();\n \f\n /* On certain systems, we have code that works by scanning the object file\n    directly.  But this code uses system-specific header files and library\n@@ -204,8 +204,6 @@ int debug;\t\t\t\t/* true if -debug */\n \n static int shared_obj;\t\t        /* true if -shared */\n \n-static int   temp_filename_length;\t/* Length of temp_filename */\n-static char *temp_filename;\t\t/* Base of temp filenames */\n static char *c_file;\t\t\t/* <xxx>.c for constructor/destructor list.  */\n static char *o_file;\t\t\t/* <xxx>.o for constructor/destructor list.  */\n #ifdef COLLECT_EXPORT_LIST\n@@ -932,7 +930,7 @@ main (argc, argv)\n   char **object_lst\t= (char **) xcalloc (sizeof (char *), argc);\n   char **object\t\t= object_lst;\n   int first_file;\n-  int num_c_args\t= argc+7;\n+  int num_c_args\t= argc+8;\n \n #ifdef DEBUG\n   debug = 1;\n@@ -1131,23 +1129,15 @@ main (argc, argv)\n   *ld1++ = *ld2++ = ld_file_name;\n \n   /* Make temp file names.  */\n-  temp_filename = choose_temp_base ();\n-  temp_filename_length = strlen (temp_filename);\n-  c_file = xcalloc (temp_filename_length + sizeof (\".c\"), 1);\n-  o_file = xcalloc (temp_filename_length + sizeof (\".o\"), 1);\n+  c_file = make_temp_file ();\n+  o_file = make_temp_file ();\n #ifdef COLLECT_EXPORT_LIST\n-  export_file = xmalloc (temp_filename_length + sizeof (\".x\"));\n-  import_file = xmalloc (temp_filename_length + sizeof (\".p\"));\n-#endif\n-  ldout = xmalloc (temp_filename_length + sizeof (\".ld\"));\n-  sprintf (ldout, \"%s.ld\", temp_filename);\n-  sprintf (c_file, \"%s.c\", temp_filename);\n-  sprintf (o_file, \"%s.o\", temp_filename);\n-#ifdef COLLECT_EXPORT_LIST\n-  sprintf (export_file, \"%s.x\", temp_filename);\n-  sprintf (import_file, \"%s.p\", temp_filename);\n+  export_file = make_temp_file ();\n+  import_file = make_temp_file ();\n #endif\n+  ldout = make_temp_file ();\n   *c_ptr++ = c_file_name;\n+  *c_ptr++ = \"-lang-c\";\n   *c_ptr++ = \"-c\";\n   *c_ptr++ = \"-o\";\n   *c_ptr++ = o_file;\n@@ -1435,6 +1425,8 @@ main (argc, argv)\n       if (import_file != 0 && import_file[0])\n \tmaybe_unlink (import_file);\n #endif\n+      maybe_unlink (c_file);\n+      maybe_unlink (o_file);\n       return 0;\n     }\n \n@@ -1485,6 +1477,8 @@ main (argc, argv)\n       maybe_unlink (export_file);\n       maybe_unlink (import_file);\n #endif\n+      maybe_unlink (c_file);\n+      maybe_unlink (o_file);\n       return 0;\n     }\n "}, {"sha": "09b03326a681eba2df86ddd3a9a9fa984b2f7af0", "filename": "gcc/gcc.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39d45901b349d70579241a01327f7fb2d7f1973d/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39d45901b349d70579241a01327f7fb2d7f1973d/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=39d45901b349d70579241a01327f7fb2d7f1973d", "patch": "@@ -121,7 +121,6 @@ static char dir_separator_str[] = {DIR_SEPARATOR, 0};\n #define GET_ENVIRONMENT(ENV_VALUE,ENV_NAME) ENV_VALUE = getenv (ENV_NAME)\n #endif\n \n-extern char *choose_temp_base PROTO((void));\n extern char *my_strerror PROTO((int));\n \n #ifndef HAVE_KILL\n@@ -1269,6 +1268,9 @@ static int argbuf_index;\n #define MKTEMP_EACH_FILE\n \n #ifdef MKTEMP_EACH_FILE\n+\n+extern char *make_temp_file PROTO((void));\n+\n /* This is the list of suffixes and codes (%g/%u/%U) and the associated\n    temp file.  */\n \n@@ -1280,8 +1282,11 @@ static struct temp_name {\n   int filename_length;\t/* strlen (filename).  */\n   struct temp_name *next;\n } *temp_names;\n+#else\n+extern char *choose_temp_base PROTO((void));\n #endif\n \n+\n /* Number of commands executed so far.  */\n \n static int execution_count;\n@@ -3512,7 +3517,7 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t\t    t->length = p - suffix;\n \t\t    t->suffix = save_string (suffix, p - suffix);\n \t\t    t->unique = (c != 'g');\n-\t\t    temp_filename = choose_temp_base ();\n+\t\t    temp_filename = make_temp_file ();\n \t\t    temp_filename_length = strlen (temp_filename);\n \t\t    t->filename = temp_filename;\n \t\t    t->filename_length = temp_filename_length;"}]}