{"sha": "d6df67efcd64255f685a4556c20690f56315dad0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZkZjY3ZWZjZDY0MjU1ZjY4NWE0NTU2YzIwNjkwZjU2MzE1ZGFkMA==", "commit": {"author": {"name": "Keith Seitz", "email": "keiths@redhat.com", "date": "2007-02-05T21:28:55Z"}, "committer": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2007-02-05T21:28:55Z"}, "message": "jvmti.cc (_envListLock): Change type to ReentrantReadWriteLock.\n\n        * jvmti.cc (_envListLock): Change type to\n        ReentrantReadWriteLock.\n        (_Jv_JVMTI_DisposeEnvironment): Switch to read/write\n        lock.\n        (check_enabled_event): Likewise.\n        (_Jv_GetJVMTIEnv): Likewise.\n        (_Jv_JVMTI_Init): Likewise.\n        (_Jv_JVMTI_PostEvent): Likewise.\n\nFrom-SVN: r121616", "tree": {"sha": "d4863bf6028c926ecb508c99f8e3d11a44e1d50f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4863bf6028c926ecb508c99f8e3d11a44e1d50f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6df67efcd64255f685a4556c20690f56315dad0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6df67efcd64255f685a4556c20690f56315dad0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6df67efcd64255f685a4556c20690f56315dad0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6df67efcd64255f685a4556c20690f56315dad0/comments", "author": {"login": "shtiek", "id": 107581324, "node_id": "U_kgDOBmmPjA", "avatar_url": "https://avatars.githubusercontent.com/u/107581324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shtiek", "html_url": "https://github.com/shtiek", "followers_url": "https://api.github.com/users/shtiek/followers", "following_url": "https://api.github.com/users/shtiek/following{/other_user}", "gists_url": "https://api.github.com/users/shtiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/shtiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shtiek/subscriptions", "organizations_url": "https://api.github.com/users/shtiek/orgs", "repos_url": "https://api.github.com/users/shtiek/repos", "events_url": "https://api.github.com/users/shtiek/events{/privacy}", "received_events_url": "https://api.github.com/users/shtiek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cefde4f5c76fdfd0d855bde0732fdb2b34f9404a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cefde4f5c76fdfd0d855bde0732fdb2b34f9404a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cefde4f5c76fdfd0d855bde0732fdb2b34f9404a"}], "stats": {"total": 88, "additions": 55, "deletions": 33}, "files": [{"sha": "4b244ff957c8ccacc731b201b56e01064fee6363", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6df67efcd64255f685a4556c20690f56315dad0/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6df67efcd64255f685a4556c20690f56315dad0/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=d6df67efcd64255f685a4556c20690f56315dad0", "patch": "@@ -1,3 +1,14 @@\n+2007-02-05  Keith Seitz  <keiths@redhat.com>\n+\n+\t* jvmti.cc (_envListLock): Change type to\n+\tReentrantReadWriteLock.\n+\t(_Jv_JVMTI_DisposeEnvironment): Switch to read/write\n+\tlock.\n+\t(check_enabled_event): Likewise.\n+\t(_Jv_GetJVMTIEnv): Likewise.\n+\t(_Jv_JVMTI_Init): Likewise.\n+\t(_Jv_JVMTI_PostEvent): Likewise. \n+\n 2007-02-05  Keith Seitz  <keiths@redhat.com>\n \n \t* gnu/classpath/jdwp/natVMVirtualMachine.cc"}, {"sha": "e14bd7c50056c72dbbc2edf33949851bb1bf612f", "filename": "libjava/jvmti.cc", "status": "modified", "additions": 44, "deletions": 33, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6df67efcd64255f685a4556c20690f56315dad0/libjava%2Fjvmti.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6df67efcd64255f685a4556c20690f56315dad0/libjava%2Fjvmti.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjvmti.cc?ref=d6df67efcd64255f685a4556c20690f56315dad0", "patch": "@@ -27,7 +27,6 @@ details.  */\n \n #include <java/lang/Class.h>\n #include <java/lang/ClassLoader.h>\n-#include <java/lang/Object.h>\n #include <java/lang/OutOfMemoryError.h>\n #include <java/lang/Thread.h>\n #include <java/lang/ThreadGroup.h>\n@@ -37,6 +36,8 @@ details.  */\n #include <java/lang/reflect/Modifier.h>\n #include <java/util/Collection.h>\n #include <java/util/HashMap.h>\n+#include <java/util/concurrent/locks/Lock.h>\n+#include <java/util/concurrent/locks/ReentrantReadWriteLock.h>\n #include <java/net/URL.h>\n \n static void check_enabled_events (void);\n@@ -103,7 +104,8 @@ struct jvmti_env_list\n   struct jvmti_env_list *next;\n };\n static struct jvmti_env_list *_jvmtiEnvironments = NULL;\n-static java::lang::Object *_envListLock = NULL;\n+static java::util::concurrent::locks::\n+ReentrantReadWriteLock *_envListLock = NULL;\n #define FOREACH_ENVIRONMENT(Ele) \\\n   for (Ele = _jvmtiEnvironments; Ele != NULL; Ele = Ele->next)\n \n@@ -896,7 +898,7 @@ _Jv_JVMTI_DisposeEnvironment (jvmtiEnv *env)\n     return JVMTI_ERROR_INVALID_ENVIRONMENT;\n   else\n     {\n-      JvSynchronize dummy (_envListLock);\n+      _envListLock->writeLock ()->lock ();\n       if (_jvmtiEnvironments->env == env)\n \t{\n \t  struct jvmti_env_list *next = _jvmtiEnvironments->next;\n@@ -909,12 +911,16 @@ _Jv_JVMTI_DisposeEnvironment (jvmtiEnv *env)\n \t  while (e->next != NULL && e->next->env != env)\n \t    e = e->next;\n \t  if (e->next == NULL)\n-\t    return JVMTI_ERROR_INVALID_ENVIRONMENT;\n+\t    {\n+\t      _envListLock->writeLock ()->unlock ();\n+\t      return JVMTI_ERROR_INVALID_ENVIRONMENT;\n+\t    }\n \n \t  struct jvmti_env_list *next = e->next->next;\n \t  _Jv_Free (e->next);\n \t  e->next = next;\n \t}\n+      _envListLock->writeLock ()->unlock ();\n     }\n \n   _Jv_Free (env);\n@@ -1215,18 +1221,24 @@ check_enabled_event (jvmtiEvent type)\n \n   int index = EVENT_INDEX (type); // safe since caller checks this\n \n-  JvSynchronize dummy (_envListLock);\n-  struct jvmti_env_list *e;\n-  FOREACH_ENVIRONMENT (e)\n+  if (_jvmtiEnvironments != NULL)\n     {\n-      char *addr\n-\t= reinterpret_cast<char *> (&e->env->callbacks) + offset;\n-      void **callback = reinterpret_cast<void **> (addr);\n-      if (e->env->enabled[index] && *callback != NULL)\n+      _envListLock->readLock ()->lock ();\n+      struct jvmti_env_list *e;\n+      FOREACH_ENVIRONMENT (e)\n \t{\n-\t  *enabled = true;\n-\t  return;\n+\t  char *addr\n+\t    = reinterpret_cast<char *> (&e->env->callbacks) + offset;\n+\t  void **callback = reinterpret_cast<void **> (addr);\n+\t  if (e->env->enabled[index] && *callback != NULL)\n+\t    {\n+\t      *enabled = true;\n+\t      _envListLock->readLock ()->unlock ();\n+\t      return;\n+\t    }\n \t}\n+\n+      _envListLock->readLock ()->unlock ();\n     }\n \n   *enabled = false;\n@@ -1739,24 +1751,22 @@ _Jv_GetJVMTIEnv (void)\n   _Jv_JVMTIEnv *env\n     = (_Jv_JVMTIEnv *) _Jv_MallocUnchecked (sizeof (_Jv_JVMTIEnv));\n   env->p = &_Jv_JVMTI_Interface;\n+  struct jvmti_env_list *element\n+    = (struct jvmti_env_list *) _Jv_MallocUnchecked (sizeof (struct jvmti_env_list));\n+  element->env = env;\n+  element->next = NULL;\n \n-  {\n-    JvSynchronize dummy (_envListLock);\n-    struct jvmti_env_list *element\n-      = (struct jvmti_env_list *) _Jv_MallocUnchecked (sizeof (struct jvmti_env_list));\n-    element->env = env;\n-    element->next = NULL;\n-\n-    if (_jvmtiEnvironments == NULL)\n-      _jvmtiEnvironments = element;\n-    else\n-      {\n-\tstruct jvmti_env_list *e;\n-\tfor (e = _jvmtiEnvironments; e->next != NULL; e = e->next)\n-\t  ;\n-\te->next = element;\n-      }\n-  }\n+  _envListLock->writeLock ()->lock ();\n+  if (_jvmtiEnvironments == NULL)\n+    _jvmtiEnvironments = element;\n+  else\n+    {\n+      struct jvmti_env_list *e;\n+      for (e = _jvmtiEnvironments; e->next != NULL; e = e->next)\n+\t;\n+      e->next = element;\n+    }\n+  _envListLock->writeLock ()->unlock ();\n \n   /* Mark JVMTI active. This is used to force the interpreter\n      to use either debugging or non-debugging code. Once JVMTI\n@@ -1769,7 +1779,8 @@ void\n _Jv_JVMTI_Init ()\n {\n   _jvmtiEnvironments = NULL;\n-  _envListLock = new java::lang::Object ();\n+  _envListLock\n+    = new java::util::concurrent::locks::ReentrantReadWriteLock ();\n \n   // No environments, so this should set all JVMTI:: members to false\n   check_enabled_events ();\n@@ -2133,7 +2144,7 @@ _Jv_JVMTI_PostEvent (jvmtiEvent type, jthread event_thread, ...)\n   va_list args;\n   va_start (args, event_thread);\n \n-  JvSynchronize dummy (_envListLock);\n+  _envListLock->readLock ()->lock ();\n   struct jvmti_env_list *e;\n   FOREACH_ENVIRONMENT (e)\n     {\n@@ -2149,6 +2160,6 @@ _Jv_JVMTI_PostEvent (jvmtiEvent type, jthread event_thread, ...)\n \t  post_event (e->env, type, event_thread, args);\n \t}\n     }\n-\n+  _envListLock->readLock ()->unlock ();\n   va_end (args);\n }"}]}