{"sha": "11b6d80dad4f423797ef4b9068d74758f88aa432", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFiNmQ4MGRhZDRmNDIzNzk3ZWY0YjkwNjhkNzQ3NThmODhhYTQzMg==", "commit": {"author": {"name": "Craig Burley", "email": "craig@jcb-sc.com", "date": "1999-06-04T08:14:19Z"}, "committer": {"name": "Craig Burley", "email": "burley@gcc.gnu.org", "date": "1999-06-04T08:14:19Z"}, "message": "add item to missing features\n\nFrom-SVN: r27350", "tree": {"sha": "d1f752b011b8e1446e6aeb6bee0928aaf3b60ab6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1f752b011b8e1446e6aeb6bee0928aaf3b60ab6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11b6d80dad4f423797ef4b9068d74758f88aa432", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11b6d80dad4f423797ef4b9068d74758f88aa432", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11b6d80dad4f423797ef4b9068d74758f88aa432", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11b6d80dad4f423797ef4b9068d74758f88aa432/comments", "author": null, "committer": null, "parents": [{"sha": "ecfa9fccd5f008ee2dbf23851c171eb254b7e174", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecfa9fccd5f008ee2dbf23851c171eb254b7e174", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecfa9fccd5f008ee2dbf23851c171eb254b7e174"}], "stats": {"total": 64, "additions": 63, "deletions": 1}, "files": [{"sha": "19ef84655ed63bc8385ccbd3952e47e1259695d2", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b6d80dad4f423797ef4b9068d74758f88aa432/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b6d80dad4f423797ef4b9068d74758f88aa432/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=11b6d80dad4f423797ef4b9068d74758f88aa432", "patch": "@@ -1,3 +1,8 @@\n+Fri Jun  4 10:09:50 1999  Craig Burley  <craig@jcb-sc.com>\n+\n+\t* g77.texi (Missing Features): Add `Better Warnings'\n+\titem.\n+\n Fri May 28 16:51:41 1999  Craig Burley  <craig@jcb-sc.com>\n \n \t* g77.texi: Fix thinko."}, {"sha": "fb393a01cd8c5f55e56480f794cb27ed47821127", "filename": "gcc/f/g77.texi", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b6d80dad4f423797ef4b9068d74758f88aa432/gcc%2Ff%2Fg77.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b6d80dad4f423797ef4b9068d74758f88aa432/gcc%2Ff%2Fg77.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77.texi?ref=11b6d80dad4f423797ef4b9068d74758f88aa432", "patch": "@@ -2,7 +2,7 @@\n @c %**start of header\n @setfilename g77.info\n \n-@set last-update 1999-05-28\n+@set last-update 1999-06-04\n @set copyrights-g77 1995-1999\n \n @include root.texi\n@@ -11428,6 +11428,7 @@ New facilities:\n * Increasing Precision/Range::\n \n Better diagnostics:\n+* Better Warnings::\n * Gracefully Handle Sensible Bad Code::\n * Non-standard Conversions::\n * Non-standard Intrinsics::\n@@ -12174,6 +12175,62 @@ are thread-safe, nor does @code{g77} have support for parallel processing\n processors).\n A package such as PVM might help here.\n \n+@node Better Warnings\n+@subsection Better Warnings\n+\n+Because of how @code{g77} generates code via the back end,\n+it doesn't always provide warnings the user wants.\n+Consider:\n+\n+@smallexample\n+PROGRAM X\n+PRINT *, A\n+END\n+@end smallexample\n+\n+Currently, the above is not flagged as a case of\n+using an uninitialized variable,\n+because @code{g77} generates a run-time library call that looks,\n+to the GBE, like it might actually @emph{modify} @samp{A} at run time.\n+(And, in fact, depending on the previous run-time library call,\n+it would!)\n+\n+Fixing this requires one of the following:\n+\n+@itemize @bullet\n+@item\n+Switch to new library, @code{libg77}, that provides\n+a more ``clean'' interface,\n+vis-a-vis input, output, and modified arguments,\n+so the GBE can tell what's going on.\n+\n+This would provide a pretty big performance improvement,\n+at least theoretically, and, ultimately, in practice,\n+for some types of code.\n+\n+@item\n+Have @code{g77} pass a pointer to a temporary\n+containing a copy of @samp{A},\n+instead of to @samp{A} itself.\n+The GBE would then complain about the copy operation\n+involving a potentially uninitialized variable.\n+\n+This might also provide a performance boost for some code,\n+because @samp{A} might then end up living in a register,\n+which could help with inner loops.\n+\n+@item\n+Have @code{g77} use a GBE construct similar to @code{ADDR_EXPR}\n+but with extra information on the fact that the\n+item pointed to won't be modified\n+(a la @code{const} in C).\n+\n+Probably the best solution for now, but not quite trivial\n+to implement in the general case.\n+Worth considering after @code{g77} 0.6 is considered\n+pretty solid.\n+@end itemize\n+\n @node Gracefully Handle Sensible Bad Code\n @subsection Gracefully Handle Sensible Bad Code\n "}]}