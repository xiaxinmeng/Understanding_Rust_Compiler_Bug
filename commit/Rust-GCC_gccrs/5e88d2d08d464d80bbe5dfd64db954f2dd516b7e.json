{"sha": "5e88d2d08d464d80bbe5dfd64db954f2dd516b7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU4OGQyZDA4ZDQ2NGQ4MGJiZTVkZmQ2NGRiOTU0ZjJkZDUxNmI3ZQ==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2017-06-21T19:53:26Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2017-06-21T19:53:26Z"}, "message": "PR libstdc++/80675, PR libstdc++/80940\n\n* include/std/istream:\n(__is_convertible_to_basic_istream_test(basic_istream<_Ch, _Up>*)): New.\n(__do_is_convertible_to_basic_istream_impl): Likewise.\n(__is_convertible_to_basic_istream_impl): Likewise.\n(__is_convertible_to_basic_istream): Use the new base.\n(__rvalue_istream_type): New.\n(operator>>(_Istream&&, _Tp&&)): Use the new helper alias\nfor the SFINAE check, convert to the helper alias type before\ndoing the actual extraction.\n* include/std/ostream:\n(__is_convertible_to_basic_ostream_test(basic_ostream<_Ch, _Up>*)): New.\n(__do_is_convertible_to_basic_ostream_impl): Likewise.\n(__is_convertible_to_basic_ostream_impl): Likewise.\n(__is_convertible_to_basic_ostream): Use the new base.\n(__rvalue_ostream_type): New.\n(operator<<(_Ostream&&, const _Tp&)): Use the new helper alias\nfor the SFINAE check, convert to the helper alias type before\ndoing the actual insertion.\n* testsuite/27_io/rvalue_streams-2.cc: Add new tests.\n\nFrom-SVN: r249468", "tree": {"sha": "682442a25a4dfb8a09356142015098db8fe62801", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/682442a25a4dfb8a09356142015098db8fe62801"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e88d2d08d464d80bbe5dfd64db954f2dd516b7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e88d2d08d464d80bbe5dfd64db954f2dd516b7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e88d2d08d464d80bbe5dfd64db954f2dd516b7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e88d2d08d464d80bbe5dfd64db954f2dd516b7e/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb8d1b01b3a2198c67d04a3a077bc7c55aaaa31c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb8d1b01b3a2198c67d04a3a077bc7c55aaaa31c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb8d1b01b3a2198c67d04a3a077bc7c55aaaa31c"}], "stats": {"total": 188, "additions": 159, "deletions": 29}, "files": [{"sha": "f2076a479f514683a42360f360e00504a09b5fac", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e88d2d08d464d80bbe5dfd64db954f2dd516b7e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e88d2d08d464d80bbe5dfd64db954f2dd516b7e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5e88d2d08d464d80bbe5dfd64db954f2dd516b7e", "patch": "@@ -1,3 +1,27 @@\n+2017-06-21  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tPR libstdc++/80675\n+\tPR libstdc++/80940\n+\t* include/std/istream:\n+\t(__is_convertible_to_basic_istream_test(basic_istream<_Ch, _Up>*)): New.\n+\t(__do_is_convertible_to_basic_istream_impl): Likewise.\n+\t(__is_convertible_to_basic_istream_impl): Likewise.\n+\t(__is_convertible_to_basic_istream): Use the new base.\n+\t(__rvalue_istream_type): New.\n+\t(operator>>(_Istream&&, _Tp&&)): Use the new helper alias\n+\tfor the SFINAE check, convert to the helper alias type before\n+\tdoing the actual extraction.\n+\t* include/std/ostream:\n+\t(__is_convertible_to_basic_ostream_test(basic_ostream<_Ch, _Up>*)): New.\n+\t(__do_is_convertible_to_basic_ostream_impl): Likewise.\n+\t(__is_convertible_to_basic_ostream_impl): Likewise.\n+\t(__is_convertible_to_basic_ostream): Use the new base.\n+\t(__rvalue_ostream_type): New.\n+\t(operator<<(_Ostream&&, const _Tp&)): Use the new helper alias\n+\tfor the SFINAE check, convert to the helper alias type before\n+\tdoing the actual insertion.\n+\t* testsuite/27_io/rvalue_streams-2.cc: Add new tests.\n+\n 2017-06-21  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \t* config/abi/post/aarch64-linux-gnu/baseline_symbols.txt: Update."}, {"sha": "1fa25555771a46e41aa1937cee3c179dace50e17", "filename": "libstdc++-v3/include/std/istream", "status": "modified", "additions": 39, "deletions": 13, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e88d2d08d464d80bbe5dfd64db954f2dd516b7e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e88d2d08d464d80bbe5dfd64db954f2dd516b7e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream?ref=5e88d2d08d464d80bbe5dfd64db954f2dd516b7e", "patch": "@@ -908,20 +908,39 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     ws(basic_istream<_CharT, _Traits>& __is);\n \n #if __cplusplus >= 201103L\n+  template<typename _Ch, typename _Up>\n+    basic_istream<_Ch, _Up>&\n+    __is_convertible_to_basic_istream_test(basic_istream<_Ch, _Up>*);\n+\n+  template<typename _Tp, typename = void>\n+    struct __is_convertible_to_basic_istream_impl\n+    {\n+      using __istream_type = void;\n+    };\n \n   template<typename _Tp>\n-    struct __is_convertible_to_basic_istream\n+    using __do_is_convertible_to_basic_istream_impl =\n+    decltype(__is_convertible_to_basic_istream_test\n+\t     (declval<typename remove_reference<_Tp>::type*>()));\n+\n+  template<typename _Tp>\n+    struct __is_convertible_to_basic_istream_impl\n+    <_Tp,\n+     __void_t<__do_is_convertible_to_basic_istream_impl<_Tp>>>\n     {\n-      template<typename _Ch, typename _Up>\n-      static basic_istream<_Ch, _Up>& __check(basic_istream<_Ch, _Up>*);\n+      using __istream_type =\n+\t__do_is_convertible_to_basic_istream_impl<_Tp>;\n+    };\n \n-      static void __check(...);\n+  template<typename _Tp>\n+    struct __is_convertible_to_basic_istream\n+    : __is_convertible_to_basic_istream_impl<_Tp>\n+    {\n     public:\n-      using istream_type =\n-\tdecltype(__check(declval<typename remove_reference<_Tp>::type*>()));\n-      using type = __not_<is_same<istream_type, void>>;\n+      using type = __not_<is_void<\n+        typename __is_convertible_to_basic_istream_impl<_Tp>::__istream_type>>;\n       constexpr static bool value = type::value;\n-  };\n+    };\n \n   template<typename _Istream, typename _Tp, typename = void>\n     struct __is_extractable : false_type {};\n@@ -932,6 +951,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t      >> declval<_Tp>())>>\n     : true_type {};\n \n+  template<typename _Istream>\n+    using __rvalue_istream_type =\n+      typename __is_convertible_to_basic_istream<\n+\t_Istream>::__istream_type;\n+\n   // [27.7.1.6] Rvalue stream extraction\n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // 2328. Rvalue stream extraction should use perfect forwarding\n@@ -949,13 +973,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline\n     typename enable_if<__and_<__not_<is_lvalue_reference<_Istream>>,\n \t\t\t      __is_convertible_to_basic_istream<_Istream>,\n-\t\t\t      __is_extractable<_Istream&, _Tp&&>>::value,\n-\t\t       typename __is_convertible_to_basic_istream<\n-\t\t\t _Istream>::istream_type>::type\n+\t\t\t      __is_extractable<\n+\t\t\t\t__rvalue_istream_type<_Istream>,\n+\t\t\t\t_Tp&&>>::value,\n+\t\t       __rvalue_istream_type<_Istream>>::type\n     operator>>(_Istream&& __is, _Tp&& __x)\n     {\n-      __is >> std::forward<_Tp>(__x);\n-      return __is;\n+      __rvalue_istream_type<_Istream> __ret_is = __is;\n+      __ret_is >> std::forward<_Tp>(__x);\n+      return __ret_is;\n     }\n #endif // C++11\n "}, {"sha": "f7cab03c84125056a48e28882f9d1b1793ec202c", "filename": "libstdc++-v3/include/std/ostream", "status": "modified", "additions": 43, "deletions": 16, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e88d2d08d464d80bbe5dfd64db954f2dd516b7e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e88d2d08d464d80bbe5dfd64db954f2dd516b7e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream?ref=5e88d2d08d464d80bbe5dfd64db954f2dd516b7e", "patch": "@@ -613,19 +613,39 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return __os.flush(); }\n \n #if __cplusplus >= 201103L\n+  template<typename _Ch, typename _Up>\n+    basic_ostream<_Ch, _Up>&\n+    __is_convertible_to_basic_ostream_test(basic_ostream<_Ch, _Up>*);\n+\n+  template<typename _Tp, typename = void>\n+    struct __is_convertible_to_basic_ostream_impl\n+    {\n+      using __ostream_type = void;\n+    };\n+\n+  template<typename _Tp>\n+    using __do_is_convertible_to_basic_ostream_impl =\n+    decltype(__is_convertible_to_basic_ostream_test\n+\t     (declval<typename remove_reference<_Tp>::type*>()));\n+\n+  template<typename _Tp>\n+    struct __is_convertible_to_basic_ostream_impl\n+    <_Tp,\n+     __void_t<__do_is_convertible_to_basic_ostream_impl<_Tp>>>\n+    {\n+      using __ostream_type =\n+\t__do_is_convertible_to_basic_ostream_impl<_Tp>;\n+    };\n+\n   template<typename _Tp>\n     struct __is_convertible_to_basic_ostream\n-  {\n-    template<typename _Ch, typename _Up>\n-    static basic_ostream<_Ch, _Up>& __check(basic_ostream<_Ch, _Up>*);\n-\n-    static void __check(...);\n-  public:\n-    using ostream_type =\n-      decltype(__check(declval<typename remove_reference<_Tp>::type*>()));\n-    using type = __not_<is_same<ostream_type, void>>;\n-    constexpr static bool value = type::value;\n-  };\n+    : __is_convertible_to_basic_ostream_impl<_Tp>\n+    {\n+    public:\n+      using type = __not_<is_void<\n+        typename __is_convertible_to_basic_ostream_impl<_Tp>::__ostream_type>>;\n+      constexpr static bool value = type::value;\n+    };\n \n   template<typename _Ostream, typename _Tp, typename = void>\n     struct __is_insertable : false_type {};\n@@ -636,6 +656,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t     << declval<const _Tp&>())>>\n \t\t\t\t    : true_type {};\n \n+  template<typename _Ostream>\n+    using __rvalue_ostream_type =\n+      typename __is_convertible_to_basic_ostream<\n+\t_Ostream>::__ostream_type;\n+\n   /**\n    *  @brief  Generic inserter for rvalue stream\n    *  @param  __os  An input stream.\n@@ -650,13 +675,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline\n     typename enable_if<__and_<__not_<is_lvalue_reference<_Ostream>>,\n \t\t\t      __is_convertible_to_basic_ostream<_Ostream>,\n-\t\t\t      __is_insertable<_Ostream&, const _Tp&>>::value,\n-\t\t       typename __is_convertible_to_basic_ostream<\n-\t\t\t _Ostream>::ostream_type>::type\n+\t\t\t      __is_insertable<\n+\t\t\t\t__rvalue_ostream_type<_Ostream>,\n+\t\t\t\tconst _Tp&>>::value,\n+\t\t       __rvalue_ostream_type<_Ostream>>::type\n     operator<<(_Ostream&& __os, const _Tp& __x)\n     {\n-      __os << __x;\n-      return __os;\n+      __rvalue_ostream_type<_Ostream> __ret_os = __os;\n+      __ret_os << __x;\n+      return __ret_os;\n     }\n #endif // C++11\n "}, {"sha": "9c20274d5415e610bc0c73009ab25b7bef9f5b4e", "filename": "libstdc++-v3/testsuite/27_io/rvalue_streams-2.cc", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e88d2d08d464d80bbe5dfd64db954f2dd516b7e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Frvalue_streams-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e88d2d08d464d80bbe5dfd64db954f2dd516b7e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Frvalue_streams-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Frvalue_streams-2.cc?ref=5e88d2d08d464d80bbe5dfd64db954f2dd516b7e", "patch": "@@ -24,11 +24,64 @@ struct A {};\n void operator<<(std::ostream&, const A&) { }\n void operator>>(std::istream&, A&) { }\n \n+class MyStream : private std::ostream, private std::istream\n+{\n+public:\n+  MyStream& operator <<(const char*)\n+  {\n+    return *this;\n+  }\n+  MyStream& operator >>(int&)\n+  {\n+    return *this;\n+  }\n+};\n+\n+class MyStream2\n+{\n+public:\n+  MyStream2& operator <<(const char*)\n+  {\n+    return *this;\n+  }\n+  MyStream2& operator >>(int&)\n+  {\n+    return *this;\n+  }\n+private:\n+  operator std::ostream&();\n+  operator std::istream&();\n+};\n+\n+struct X { };\n+\n+std::ostream& operator<<(std::ostream& os, const X&) { return os; }\n+std::istream& operator>>(std::istream& is, X&&) { return is; }\n+\n+struct O : std::ostream { };\n+\n+void operator<<(O&, X) = delete;\n+\n+struct I : std::istream { };\n+\n+void operator>>(I&, X) = delete;\n+\n // PR libstdc++/65543\n+// PR libstdc++/80675\n+// PR libstdc++/80940\n int main()\n {\n   A a;\n \n   std::ostringstream() << a;\n   std::istringstream() >> a;\n+  MyStream stream{};\n+  stream << \"aaa\";\n+  int msi;\n+  stream >> msi;\n+  MyStream2 stream2{};\n+  stream2 << \"aaa\";\n+  stream2 >> msi;\n+  O{} << X{};\n+  I{} >> X{};\n }"}]}