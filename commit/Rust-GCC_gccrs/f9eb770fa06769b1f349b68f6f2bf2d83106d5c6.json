{"sha": "f9eb770fa06769b1f349b68f6f2bf2d83106d5c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjllYjc3MGZhMDY3NjliMWYzNDliNjhmNmYyYmYyZDgzMTA2ZDVjNg==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2015-05-19T15:38:59Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-05-19T15:38:59Z"}, "message": "vqmovn.c: New file.\n\n2015-05-19  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vqmovn.c: New file.\n\nFrom-SVN: r223372", "tree": {"sha": "f89f50fda0c0165c9bf13615ae9c3f5c515e71a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f89f50fda0c0165c9bf13615ae9c3f5c515e71a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9eb770fa06769b1f349b68f6f2bf2d83106d5c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9eb770fa06769b1f349b68f6f2bf2d83106d5c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9eb770fa06769b1f349b68f6f2bf2d83106d5c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9eb770fa06769b1f349b68f6f2bf2d83106d5c6/comments", "author": null, "committer": null, "parents": [{"sha": "c799797ddfe3b0d779dc0a9d9549067b0a6558cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c799797ddfe3b0d779dc0a9d9549067b0a6558cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c799797ddfe3b0d779dc0a9d9549067b0a6558cf"}], "stats": {"total": 138, "additions": 138, "deletions": 0}, "files": [{"sha": "8d4ceb7b056e264eb2f23b75e3c5207dbca5c5af", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9eb770fa06769b1f349b68f6f2bf2d83106d5c6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9eb770fa06769b1f349b68f6f2bf2d83106d5c6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f9eb770fa06769b1f349b68f6f2bf2d83106d5c6", "patch": "@@ -1,3 +1,7 @@\n+2015-05-19  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vqmovn.c: New file.\n+\n 2015-05-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/66187"}, {"sha": "45c2db9480ac1034bf1a7c0d4d79673abf7eaf74", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqmovn.c", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9eb770fa06769b1f349b68f6f2bf2d83106d5c6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqmovn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9eb770fa06769b1f349b68f6f2bf2d83106d5c6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqmovn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqmovn.c?ref=f9eb770fa06769b1f349b68f6f2bf2d83106d5c6", "patch": "@@ -0,0 +1,134 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected values of cumulative_saturation flag.  */\n+int VECT_VAR(expected_cumulative_sat,int,8,8) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,32,2) = 0;\n+int VECT_VAR(expected_cumulative_sat,uint,8,8) = 0;\n+int VECT_VAR(expected_cumulative_sat,uint,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat,uint,32,2) = 0;\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0x12, 0x12, 0x12, 0x12,\n+\t\t\t\t       0x12, 0x12, 0x12, 0x12 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0x1278, 0x1278, 0x1278, 0x1278 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0x12345678, 0x12345678 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0x82, 0x82, 0x82, 0x82,\n+\t\t\t\t\t0x82, 0x82, 0x82, 0x82 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0x8765, 0x8765, 0x8765, 0x8765 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0x87654321, 0x87654321 };\n+\n+/* Expected values of cumulative_saturation flag when saturation occurs.  */\n+int VECT_VAR(expected_cumulative_sat1,int,8,8) = 1;\n+int VECT_VAR(expected_cumulative_sat1,int,16,4) = 1;\n+int VECT_VAR(expected_cumulative_sat1,int,32,2) = 1;\n+int VECT_VAR(expected_cumulative_sat1,uint,8,8) = 1;\n+int VECT_VAR(expected_cumulative_sat1,uint,16,4) = 1;\n+int VECT_VAR(expected_cumulative_sat1,uint,32,2) = 1;\n+\n+/* Expected results when saturation occurs.  */\n+VECT_VAR_DECL(expected1,int,8,8) [] = { 0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t0x7f, 0x7f, 0x7f, 0x7f };\n+VECT_VAR_DECL(expected1,int,16,4) [] = { 0x7fff, 0x7fff, 0x7fff, 0x7fff };\n+VECT_VAR_DECL(expected1,int,32,2) [] = { 0x7fffffff, 0x7fffffff };\n+VECT_VAR_DECL(expected1,uint,8,8) [] = { 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t 0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected1,uint,16,4) [] = { 0xffff, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL(expected1,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n+\n+#define INSN_NAME vqmovn\n+#define TEST_MSG \"VQMOVN\"\n+\n+#define FNNAME1(NAME) void exec_ ## NAME (void)\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+FNNAME (INSN_NAME)\n+{\n+  /* Basic test: y=OP(x), then store the result.  */\n+#define TEST_UNARY_OP1(INSN, T1, T2, W, W2, N, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+  Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, T1, W, N));\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n+    INSN##_##T2##W2(VECT_VAR(vector, T1, W2, N));\t\t\t\\\n+  vst1##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\t\\\n+\t\t VECT_VAR(vector_res, T1, W, N));\t\t\t\\\n+  CHECK_CUMULATIVE_SAT(TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+#define TEST_UNARY_OP(INSN, T1, T2, W, W2, N, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+  TEST_UNARY_OP1(INSN, T1, T2, W, W2, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+  /* No need for 64 bits variants.  */\n+  DECL_VARIABLE(vector, int, 16, 8);\n+  DECL_VARIABLE(vector, int, 32, 4);\n+  DECL_VARIABLE(vector, int, 64, 2);\n+  DECL_VARIABLE(vector, uint, 16, 8);\n+  DECL_VARIABLE(vector, uint, 32, 4);\n+  DECL_VARIABLE(vector, uint, 64, 2);\n+\n+  DECL_VARIABLE(vector_res, int, 8, 8);\n+  DECL_VARIABLE(vector_res, int, 16, 4);\n+  DECL_VARIABLE(vector_res, int, 32, 2);\n+  DECL_VARIABLE(vector_res, uint, 8, 8);\n+  DECL_VARIABLE(vector_res, uint, 16, 4);\n+  DECL_VARIABLE(vector_res, uint, 32, 2);\n+\n+  clean_results ();\n+\n+  /* Fill input vector with arbitrary values.  */\n+  VDUP(vector, q, int, s, 16, 8, 0x12);\n+  VDUP(vector, q, int, s, 32, 4, 0x1278);\n+  VDUP(vector, q, int, s, 64, 2, 0x12345678);\n+  VDUP(vector, q, uint, u, 16, 8, 0x82);\n+  VDUP(vector, q, uint, u, 32, 4, 0x8765);\n+  VDUP(vector, q, uint, u, 64, 2, 0x87654321);\n+\n+  /* Apply a unary operator named INSN_NAME.  */\n+#define CMT \"\"\n+  TEST_UNARY_OP(INSN_NAME, int, s, 8, 16, 8, expected_cumulative_sat, CMT);\n+  TEST_UNARY_OP(INSN_NAME, int, s, 16, 32, 4, expected_cumulative_sat, CMT);\n+  TEST_UNARY_OP(INSN_NAME, int, s, 32, 64, 2, expected_cumulative_sat, CMT);\n+  TEST_UNARY_OP(INSN_NAME, uint, u, 8, 16, 8, expected_cumulative_sat, CMT);\n+  TEST_UNARY_OP(INSN_NAME, uint, u, 16, 32, 4, expected_cumulative_sat, CMT);\n+  TEST_UNARY_OP(INSN_NAME, uint, u, 32, 64, 2, expected_cumulative_sat, CMT);\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected, CMT);\n+\n+\n+  /* Fill input vector with arbitrary values which cause cumulative\n+     saturation.  */\n+  VDUP(vector, q, int, s, 16, 8, 0x1234);\n+  VDUP(vector, q, int, s, 32, 4, 0x12345678);\n+  VDUP(vector, q, int, s, 64, 2, 0x1234567890ABLL);\n+  VDUP(vector, q, uint, u, 16, 8, 0x8234);\n+  VDUP(vector, q, uint, u, 32, 4, 0x87654321);\n+  VDUP(vector, q, uint, u, 64, 2, 0x8765432187654321ULL);\n+\n+  /* Apply a unary operator named INSN_NAME.  */\n+#undef CMT\n+#define CMT \" (with saturation)\"\n+  TEST_UNARY_OP(INSN_NAME, int, s, 8, 16, 8, expected_cumulative_sat1, CMT);\n+  TEST_UNARY_OP(INSN_NAME, int, s, 16, 32, 4, expected_cumulative_sat1, CMT);\n+  TEST_UNARY_OP(INSN_NAME, int, s, 32, 64, 2, expected_cumulative_sat1, CMT);\n+  TEST_UNARY_OP(INSN_NAME, uint, u, 8, 16, 8, expected_cumulative_sat1, CMT);\n+  TEST_UNARY_OP(INSN_NAME, uint, u, 16, 32, 4, expected_cumulative_sat1, CMT);\n+  TEST_UNARY_OP(INSN_NAME, uint, u, 32, 64, 2, expected_cumulative_sat1, CMT);\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected1, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected1, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected1, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected1, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected1, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected1, CMT);\n+}\n+\n+int main (void)\n+{\n+  exec_vqmovn ();\n+  return 0;\n+}"}]}