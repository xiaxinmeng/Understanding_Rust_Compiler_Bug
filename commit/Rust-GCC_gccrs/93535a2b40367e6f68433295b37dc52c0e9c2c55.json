{"sha": "93535a2b40367e6f68433295b37dc52c0e9c2c55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM1MzVhMmI0MDM2N2U2ZjY4NDMzMjk1YjM3ZGM1MmMwZTljMmM1NQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-06-03T10:28:25Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-06-03T10:30:04Z"}, "message": "[OpenMP] Fix mapping of artificial variables (PR94874)\n\ngcc/c-family/ChangeLog:\n\n\t* c-common.h (c_omp_predetermined_mapping): Declare.\n\t* c-omp.c (c_omp_predetermined_mapping): New.\n\ngcc/c/ChangeLog:\n\n\t* c-objc-common.h (LANG_HOOKS_OMP_PREDETERMINED_MAPPING): Redefine.\n\ngcc/cp/ChangeLog:\n\n\t* cp-gimplify.c (cxx_omp_predetermined_mapping): New.\n\t* cp-objcp-common.h (LANG_HOOKS_OMP_PREDETERMINED_MAPPING): Redfine.\n\t* cp-tree.h (cxx_omp_predetermined_mapping): Declare.\n\ngcc/fortran/ChangeLog:\n\n\t* f95-lang.c (LANG_HOOKS_OMP_PREDETERMINED_MAPPING): Redefine.\n\t* trans-openmp.c (gfc_omp_predetermined_mapping): New.\n\t* trans.h (gfc_omp_predetermined_mapping): Declare.\n\ngcc/ChangeLog:\n\n\t* gimplify.c (omp_notice_variable): Use new hook.\n\t* langhooks-def.h (lhd_omp_predetermined_mapping): Declare.\n\t(LANG_HOOKS_OMP_PREDETERMINED_MAPPING): Define\n\t(LANG_HOOKS_DECLS): Add it.\n\t* langhooks.c (lhd_omp_predetermined_sharing): Remove bogus unused attr.\n\t(lhd_omp_predetermined_mapping): New.\n\t* langhooks.h (struct lang_hooks_for_decls): Add new hook.\n\ngcc/testsuite/ChangeLog\n2020-06-03  Thomas Schwinge  <thomas@codesourcery.com>\n\t    Tobias Burnus  <tobias@codesourcery.com>\n\n\tPR middle-end/94874\n\t* c-c++-common/gomp/pr94874.c: New.", "tree": {"sha": "3fd7c1567794717f5f0e8b88717e9106ab8748dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fd7c1567794717f5f0e8b88717e9106ab8748dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93535a2b40367e6f68433295b37dc52c0e9c2c55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93535a2b40367e6f68433295b37dc52c0e9c2c55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93535a2b40367e6f68433295b37dc52c0e9c2c55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93535a2b40367e6f68433295b37dc52c0e9c2c55/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dda71670514e88dcd9b913c44c0ee64d8c3d6da9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dda71670514e88dcd9b913c44c0ee64d8c3d6da9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dda71670514e88dcd9b913c44c0ee64d8c3d6da9"}], "stats": {"total": 139, "additions": 134, "deletions": 5}, "files": [{"sha": "c74b23db05c8df48058d7fe6dbdf00976d73c759", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93535a2b40367e6f68433295b37dc52c0e9c2c55/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93535a2b40367e6f68433295b37dc52c0e9c2c55/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=93535a2b40367e6f68433295b37dc52c0e9c2c55", "patch": "@@ -1206,6 +1206,7 @@ extern tree c_omp_declare_simd_clauses_to_numbers (tree, tree);\n extern void c_omp_declare_simd_clauses_to_decls (tree, tree);\n extern bool c_omp_predefined_variable (tree);\n extern enum omp_clause_default_kind c_omp_predetermined_sharing (tree);\n+extern enum omp_clause_defaultmap_kind c_omp_predetermined_mapping (tree);\n extern tree c_omp_check_context_selector (location_t, tree);\n extern void c_omp_mark_declare_variant (location_t, tree, tree);\n extern const char *c_omp_map_clause_name (tree, bool);"}, {"sha": "6f8fba350eda9d70b396a88c62acea5159e928f1", "filename": "gcc/c-family/c-omp.c", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93535a2b40367e6f68433295b37dc52c0e9c2c55/gcc%2Fc-family%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93535a2b40367e6f68433295b37dc52c0e9c2c55/gcc%2Fc-family%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-omp.c?ref=93535a2b40367e6f68433295b37dc52c0e9c2c55", "patch": "@@ -2104,7 +2104,8 @@ c_omp_predefined_variable (tree decl)\n   return false;\n }\n \n-/* True if OpenMP sharing attribute of DECL is predetermined.  */\n+/* OMP_CLAUSE_DEFAULT_UNSPECIFIED unless OpenMP sharing attribute of DECL\n+   is predetermined.  */\n \n enum omp_clause_default_kind\n c_omp_predetermined_sharing (tree decl)\n@@ -2123,6 +2124,27 @@ c_omp_predetermined_sharing (tree decl)\n   return OMP_CLAUSE_DEFAULT_UNSPECIFIED;\n }\n \n+/* OMP_CLAUSE_DEFAULTMAP_CATEGORY_UNSPECIFIED unless OpenMP mapping attribute\n+   of DECL is predetermined.  */\n+\n+enum omp_clause_defaultmap_kind\n+c_omp_predetermined_mapping (tree decl)\n+{\n+  /* Predetermine artificial variables holding integral values, those\n+     are usually result of gimplify_one_sizepos or SAVE_EXPR\n+     gimplification.  */\n+  if (VAR_P (decl)\n+      && DECL_ARTIFICIAL (decl)\n+      && INTEGRAL_TYPE_P (TREE_TYPE (decl)))\n+    return OMP_CLAUSE_DEFAULTMAP_FIRSTPRIVATE;\n+\n+  if (c_omp_predefined_variable (decl))\n+    return OMP_CLAUSE_DEFAULTMAP_TO;\n+\n+  return OMP_CLAUSE_DEFAULTMAP_CATEGORY_UNSPECIFIED;\n+}\n+\n+\n /* Diagnose errors in an OpenMP context selector, return CTX if\n    it is correct or error_mark_node otherwise.  */\n "}, {"sha": "5471fc7e35519d30ef25c7bcf1c804c9fc490c27", "filename": "gcc/c/c-objc-common.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93535a2b40367e6f68433295b37dc52c0e9c2c55/gcc%2Fc%2Fc-objc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93535a2b40367e6f68433295b37dc52c0e9c2c55/gcc%2Fc%2Fc-objc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-objc-common.h?ref=93535a2b40367e6f68433295b37dc52c0e9c2c55", "patch": "@@ -107,6 +107,9 @@ along with GCC; see the file COPYING3.  If not see\n #undef LANG_HOOKS_OMP_PREDETERMINED_SHARING\n #define LANG_HOOKS_OMP_PREDETERMINED_SHARING c_omp_predetermined_sharing\n \n+#undef LANG_HOOKS_OMP_PREDETERMINED_MAPPING\n+#define LANG_HOOKS_OMP_PREDETERMINED_MAPPING c_omp_predetermined_mapping\n+\n #undef LANG_HOOKS_OMP_CLAUSE_COPY_CTOR\n #define LANG_HOOKS_OMP_CLAUSE_COPY_CTOR c_omp_clause_copy_ctor\n "}, {"sha": "6c29be9d8368dcd0352e282fd8f3c66193f6574f", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93535a2b40367e6f68433295b37dc52c0e9c2c55/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93535a2b40367e6f68433295b37dc52c0e9c2c55/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=93535a2b40367e6f68433295b37dc52c0e9c2c55", "patch": "@@ -2267,7 +2267,8 @@ cxx_omp_const_qual_no_mutable (tree decl)\n   return false;\n }\n \n-/* True if OpenMP sharing attribute of DECL is predetermined.  */\n+/* OMP_CLAUSE_DEFAULT_UNSPECIFIED unless OpenMP sharing attribute\n+   of DECL is predetermined.  */\n \n enum omp_clause_default_kind\n cxx_omp_predetermined_sharing_1 (tree decl)\n@@ -2321,6 +2322,25 @@ cxx_omp_predetermined_sharing (tree decl)\n   return OMP_CLAUSE_DEFAULT_UNSPECIFIED;\n }\n \n+enum omp_clause_defaultmap_kind\n+cxx_omp_predetermined_mapping (tree decl)\n+{\n+  /* Predetermine artificial variables holding integral values, those\n+     are usually result of gimplify_one_sizepos or SAVE_EXPR\n+     gimplification.  */\n+  if (VAR_P (decl)\n+      && DECL_ARTIFICIAL (decl)\n+      && INTEGRAL_TYPE_P (TREE_TYPE (decl))\n+      && !(DECL_LANG_SPECIFIC (decl)\n+\t   && DECL_OMP_PRIVATIZED_MEMBER (decl)))\n+    return OMP_CLAUSE_DEFAULTMAP_FIRSTPRIVATE;\n+\n+  if (c_omp_predefined_variable (decl))\n+    return OMP_CLAUSE_DEFAULTMAP_TO;\n+\n+  return OMP_CLAUSE_DEFAULTMAP_CATEGORY_UNSPECIFIED;\n+}\n+\n /* Finalize an implicitly determined clause.  */\n \n void"}, {"sha": "de8d606fe2c9e7ad6b172b26222213eca218b6ab", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93535a2b40367e6f68433295b37dc52c0e9c2c55/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93535a2b40367e6f68433295b37dc52c0e9c2c55/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=93535a2b40367e6f68433295b37dc52c0e9c2c55", "patch": "@@ -162,6 +162,8 @@ extern tree cxx_simulate_enum_decl (location_t, const char *,\n \n #undef LANG_HOOKS_OMP_PREDETERMINED_SHARING\n #define LANG_HOOKS_OMP_PREDETERMINED_SHARING cxx_omp_predetermined_sharing\n+#undef LANG_HOOKS_OMP_PREDETERMINED_MAPPING\n+#define LANG_HOOKS_OMP_PREDETERMINED_MAPPING cxx_omp_predetermined_mapping\n #undef LANG_HOOKS_OMP_CLAUSE_DEFAULT_CTOR\n #define LANG_HOOKS_OMP_CLAUSE_DEFAULT_CTOR cxx_omp_clause_default_ctor\n #undef LANG_HOOKS_OMP_CLAUSE_COPY_CTOR"}, {"sha": "1775b0a4327b81720083af90a22fed0eb7467531", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93535a2b40367e6f68433295b37dc52c0e9c2c55/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93535a2b40367e6f68433295b37dc52c0e9c2c55/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=93535a2b40367e6f68433295b37dc52c0e9c2c55", "patch": "@@ -7781,6 +7781,7 @@ extern void cp_genericize\t\t\t(tree);\n extern bool cxx_omp_const_qual_no_mutable\t(tree);\n extern enum omp_clause_default_kind cxx_omp_predetermined_sharing_1 (tree);\n extern enum omp_clause_default_kind cxx_omp_predetermined_sharing (tree);\n+extern enum omp_clause_defaultmap_kind cxx_omp_predetermined_mapping (tree);\n extern tree cxx_omp_clause_default_ctor\t\t(tree, tree, tree);\n extern tree cxx_omp_clause_copy_ctor\t\t(tree, tree, tree);\n extern tree cxx_omp_clause_assign_op\t\t(tree, tree, tree);"}, {"sha": "da8c35f47b099f3fa59c5e786b80c22e16c14f39", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93535a2b40367e6f68433295b37dc52c0e9c2c55/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93535a2b40367e6f68433295b37dc52c0e9c2c55/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=93535a2b40367e6f68433295b37dc52c0e9c2c55", "patch": "@@ -118,6 +118,7 @@ static const struct attribute_spec gfc_attribute_table[] =\n #undef LANG_HOOKS_OMP_CHECK_OPTIONAL_ARGUMENT\n #undef LANG_HOOKS_OMP_PRIVATIZE_BY_REFERENCE\n #undef LANG_HOOKS_OMP_PREDETERMINED_SHARING\n+#undef LANG_HOOKS_OMP_PREDETERMINED_MAPPING\n #undef LANG_HOOKS_OMP_REPORT_DECL\n #undef LANG_HOOKS_OMP_CLAUSE_DEFAULT_CTOR\n #undef LANG_HOOKS_OMP_CLAUSE_COPY_CTOR\n@@ -153,6 +154,7 @@ static const struct attribute_spec gfc_attribute_table[] =\n #define LANG_HOOKS_OMP_CHECK_OPTIONAL_ARGUMENT\tgfc_omp_check_optional_argument\n #define LANG_HOOKS_OMP_PRIVATIZE_BY_REFERENCE\tgfc_omp_privatize_by_reference\n #define LANG_HOOKS_OMP_PREDETERMINED_SHARING\tgfc_omp_predetermined_sharing\n+#define LANG_HOOKS_OMP_PREDETERMINED_MAPPING\tgfc_omp_predetermined_mapping\n #define LANG_HOOKS_OMP_REPORT_DECL\t\tgfc_omp_report_decl\n #define LANG_HOOKS_OMP_CLAUSE_DEFAULT_CTOR\tgfc_omp_clause_default_ctor\n #define LANG_HOOKS_OMP_CLAUSE_COPY_CTOR\t\tgfc_omp_clause_copy_ctor"}, {"sha": "7e2f6256c4372625a54a07f066cd14fd446081d3", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93535a2b40367e6f68433295b37dc52c0e9c2c55/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93535a2b40367e6f68433295b37dc52c0e9c2c55/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=93535a2b40367e6f68433295b37dc52c0e9c2c55", "patch": "@@ -207,7 +207,8 @@ gfc_omp_privatize_by_reference (const_tree decl)\n   return false;\n }\n \n-/* True if OpenMP sharing attribute of DECL is predetermined.  */\n+/* OMP_CLAUSE_DEFAULT_UNSPECIFIED unless OpenMP sharing attribute\n+   of DECL is predetermined.  */\n \n enum omp_clause_default_kind\n gfc_omp_predetermined_sharing (tree decl)\n@@ -278,6 +279,28 @@ gfc_omp_predetermined_sharing (tree decl)\n   return OMP_CLAUSE_DEFAULT_UNSPECIFIED;\n }\n \n+\n+/* OMP_CLAUSE_DEFAULTMAP_CATEGORY_UNSPECIFIED unless OpenMP mapping attribute\n+   of DECL is predetermined.  */\n+\n+enum omp_clause_defaultmap_kind\n+gfc_omp_predetermined_mapping (tree decl)\n+{\n+  if (DECL_ARTIFICIAL (decl)\n+      && ! GFC_DECL_RESULT (decl)\n+      && ! (DECL_LANG_SPECIFIC (decl)\n+\t    && GFC_DECL_SAVED_DESCRIPTOR (decl)))\n+    return OMP_CLAUSE_DEFAULTMAP_TO;\n+\n+  /* These are either array or derived parameters, or vtables.  */\n+  if (VAR_P (decl) && TREE_READONLY (decl)\n+      && (TREE_STATIC (decl) || DECL_EXTERNAL (decl)))\n+    return OMP_CLAUSE_DEFAULTMAP_TO;\n+\n+  return OMP_CLAUSE_DEFAULTMAP_CATEGORY_UNSPECIFIED;\n+}\n+\n+\n /* Return decl that should be used when reporting DEFAULT(NONE)\n    diagnostics.  */\n "}, {"sha": "e126fe927826b2cdf356ccbe4450b71d04c70e34", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93535a2b40367e6f68433295b37dc52c0e9c2c55/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93535a2b40367e6f68433295b37dc52c0e9c2c55/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=93535a2b40367e6f68433295b37dc52c0e9c2c55", "patch": "@@ -803,6 +803,7 @@ tree gfc_omp_check_optional_argument (tree, bool);\n tree gfc_omp_array_data (tree, bool);\n bool gfc_omp_privatize_by_reference (const_tree);\n enum omp_clause_default_kind gfc_omp_predetermined_sharing (tree);\n+enum omp_clause_defaultmap_kind gfc_omp_predetermined_mapping (tree);\n tree gfc_omp_report_decl (tree);\n tree gfc_omp_clause_default_ctor (tree, tree, tree);\n tree gfc_omp_clause_copy_ctor (tree, tree, tree);"}, {"sha": "cb08b26dc65e7be0706f4eb1dc4a0de096c5c5c3", "filename": "gcc/gimplify.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93535a2b40367e6f68433295b37dc52c0e9c2c55/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93535a2b40367e6f68433295b37dc52c0e9c2c55/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=93535a2b40367e6f68433295b37dc52c0e9c2c55", "patch": "@@ -7432,6 +7432,7 @@ omp_notice_variable (struct gimplify_omp_ctx *ctx, tree decl, bool in_code)\n \t      if (!is_declare_target)\n \t\t{\n \t\t  int gdmk;\n+\t\t  enum omp_clause_defaultmap_kind kind;\n \t\t  if (TREE_CODE (TREE_TYPE (decl)) == POINTER_TYPE\n \t\t      || (TREE_CODE (TREE_TYPE (decl)) == REFERENCE_TYPE\n \t\t\t  && (TREE_CODE (TREE_TYPE (TREE_TYPE (decl)))\n@@ -7441,7 +7442,17 @@ omp_notice_variable (struct gimplify_omp_ctx *ctx, tree decl, bool in_code)\n \t\t    gdmk = GDMK_SCALAR;\n \t\t  else\n \t\t    gdmk = GDMK_AGGREGATE;\n-\t\t  if (ctx->defaultmap[gdmk] == 0)\n+\t\t  kind = lang_hooks.decls.omp_predetermined_mapping (decl);\n+\t\t  if (kind != OMP_CLAUSE_DEFAULTMAP_CATEGORY_UNSPECIFIED)\n+\t\t    {\n+\t\t      if (kind == OMP_CLAUSE_DEFAULTMAP_FIRSTPRIVATE)\n+\t\t\tnflags |= GOVD_FIRSTPRIVATE;\n+\t\t      else if (kind == OMP_CLAUSE_DEFAULTMAP_TO)\n+\t\t\tnflags |= GOVD_MAP | GOVD_MAP_TO_ONLY;\n+\t\t      else\n+\t\t\tgcc_unreachable ();\n+\t\t    }\n+\t\t  else if (ctx->defaultmap[gdmk] == 0)\n \t\t    {\n \t\t      tree d = lang_hooks.decls.omp_report_decl (decl);\n \t\t      error (\"%qE not specified in enclosing %<target%>\","}, {"sha": "6e4e2cc9367d3f5eca5f43af8a8c3552975f7e81", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93535a2b40367e6f68433295b37dc52c0e9c2c55/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93535a2b40367e6f68433295b37dc52c0e9c2c55/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=93535a2b40367e6f68433295b37dc52c0e9c2c55", "patch": "@@ -79,6 +79,7 @@ extern bool lhd_handle_option (size_t, const char *, HOST_WIDE_INT, int,\n /* Declarations for tree gimplification hooks.  */\n extern int lhd_gimplify_expr (tree *, gimple_seq *, gimple_seq *);\n extern enum omp_clause_default_kind lhd_omp_predetermined_sharing (tree);\n+extern enum omp_clause_defaultmap_kind lhd_omp_predetermined_mapping (tree);\n extern tree lhd_omp_assignment (tree, tree, tree);\n extern void lhd_omp_finish_clause (tree, gimple_seq *);\n struct gimplify_omp_ctx;\n@@ -246,6 +247,7 @@ extern tree lhd_unit_size_without_reusable_padding (tree);\n #define LANG_HOOKS_OMP_CHECK_OPTIONAL_ARGUMENT hook_tree_tree_bool_null\n #define LANG_HOOKS_OMP_PRIVATIZE_BY_REFERENCE hook_bool_const_tree_false\n #define LANG_HOOKS_OMP_PREDETERMINED_SHARING lhd_omp_predetermined_sharing\n+#define LANG_HOOKS_OMP_PREDETERMINED_MAPPING lhd_omp_predetermined_mapping\n #define LANG_HOOKS_OMP_REPORT_DECL lhd_pass_through_t\n #define LANG_HOOKS_OMP_DISREGARD_VALUE_EXPR hook_bool_tree_bool_false\n #define LANG_HOOKS_OMP_PRIVATE_DEBUG_CLAUSE hook_bool_tree_bool_false\n@@ -274,6 +276,7 @@ extern tree lhd_unit_size_without_reusable_padding (tree);\n   LANG_HOOKS_OMP_CHECK_OPTIONAL_ARGUMENT, \\\n   LANG_HOOKS_OMP_PRIVATIZE_BY_REFERENCE, \\\n   LANG_HOOKS_OMP_PREDETERMINED_SHARING, \\\n+  LANG_HOOKS_OMP_PREDETERMINED_MAPPING, \\\n   LANG_HOOKS_OMP_REPORT_DECL, \\\n   LANG_HOOKS_OMP_DISREGARD_VALUE_EXPR, \\\n   LANG_HOOKS_OMP_PRIVATE_DEBUG_CLAUSE, \\"}, {"sha": "1cb7cda5b79309491bd89d3752a9a5b2a445120f", "filename": "gcc/langhooks.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93535a2b40367e6f68433295b37dc52c0e9c2c55/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93535a2b40367e6f68433295b37dc52c0e9c2c55/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=93535a2b40367e6f68433295b37dc52c0e9c2c55", "patch": "@@ -579,13 +579,24 @@ lhd_expr_to_decl (tree expr, bool *tc ATTRIBUTE_UNUSED, bool *se ATTRIBUTE_UNUSE\n    predetermined, OMP_CLAUSE_DEFAULT_UNSPECIFIED otherwise.  */\n \n enum omp_clause_default_kind\n-lhd_omp_predetermined_sharing (tree decl ATTRIBUTE_UNUSED)\n+lhd_omp_predetermined_sharing (tree decl)\n {\n   if (DECL_ARTIFICIAL (decl))\n     return OMP_CLAUSE_DEFAULT_SHARED;\n   return OMP_CLAUSE_DEFAULT_UNSPECIFIED;\n }\n \n+/* Return sharing kind if OpenMP mapping attribute of DECL is\n+   predetermined, OMP_CLAUSE_DEFAULTMAP_CATEGORY_UNSPECIFIED otherwise.  */\n+\n+enum omp_clause_defaultmap_kind\n+lhd_omp_predetermined_mapping (tree decl)\n+{\n+  if (DECL_ARTIFICIAL (decl))\n+    return OMP_CLAUSE_DEFAULTMAP_TO;\n+  return OMP_CLAUSE_DEFAULTMAP_CATEGORY_UNSPECIFIED;\n+}\n+\n /* Generate code to copy SRC to DST.  */\n \n tree"}, {"sha": "2bd5a67cd3703ecc4affa9cd9fcdc2cc622a3315", "filename": "gcc/langhooks.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93535a2b40367e6f68433295b37dc52c0e9c2c55/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93535a2b40367e6f68433295b37dc52c0e9c2c55/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=93535a2b40367e6f68433295b37dc52c0e9c2c55", "patch": "@@ -252,6 +252,10 @@ struct lang_hooks_for_decls\n      predetermined, OMP_CLAUSE_DEFAULT_UNSPECIFIED otherwise.  */\n   enum omp_clause_default_kind (*omp_predetermined_sharing) (tree);\n \n+  /* Return mapping kind if OpenMP mapping attribute of DECL is\n+     predetermined, OMP_CLAUSE_DEFAULTMAP_CATEGORY_UNSPECIFIED otherwise.  */\n+  enum omp_clause_defaultmap_kind (*omp_predetermined_mapping) (tree);\n+\n   /* Return decl that should be reported for DEFAULT(NONE) failure\n      diagnostics.  Usually the DECL passed in.  */\n   tree (*omp_report_decl) (tree);"}, {"sha": "9c67f83a5dad20962fc414f3c8667fd55701c532", "filename": "gcc/testsuite/c-c++-common/gomp/pr94874.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93535a2b40367e6f68433295b37dc52c0e9c2c55/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr94874.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93535a2b40367e6f68433295b37dc52c0e9c2c55/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr94874.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr94874.c?ref=93535a2b40367e6f68433295b37dc52c0e9c2c55", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-fdump-tree-gimple\" } */\n+\n+#include <stddef.h>\n+\n+size_t\n+vla (int array_li)\n+{\n+  float array[array_li];\n+  size_t size1, size2;\n+\n+#pragma omp parallel default(none) shared(size1, array)\n+  size1 = sizeof array;\n+\n+#pragma omp target defaultmap(none) map(from:size2) map(alloc:array)\n+  size2 = sizeof array;\n+\n+  return size1 + size2;\n+}\n+\n+/* { dg-final { scan-tree-dump \"omp parallel .*shared\\\\(array_li\\.\\[0-9\\]\\\\)\" \"gimple\" } } */\n+/* C */\n+/* { dg-final { scan-tree-dump \"omp target .*private\\\\(array_li\\.\\[0-9\\]\\\\)\" \"gimple\" { target { ! c++ } } } } */\n+/* C++ */\n+/* { dg-final { scan-tree-dump \"omp target .*firstprivate\\\\(array_li\\.\\[0-9\\]\\\\)\" \"gimple\" { target { c++ } } } } */"}]}