{"sha": "ddd0fd173a12111f9cb6747d7714b976f870c70b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRkMGZkMTczYTEyMTExZjljYjY3NDdkNzcxNGI5NzZmODcwYzcwYg==", "commit": {"author": {"name": "Lewis Hyatt", "email": "lhyatt@gmail.com", "date": "2019-12-11T14:52:31Z"}, "committer": {"name": "Lewis Hyatt", "email": "lhyatt@gcc.gnu.org", "date": "2019-12-11T14:52:31Z"}, "message": "Adds multibyte awareness to pretty-print.c\n\n2019-12-11  Lewis Hyatt  <lhyatt@gmail.com>\n\n\tPR 91853\n\t* pretty-print.c (pp_quoted_string): Avoid hex-escaping valid\n\tmultibyte input.  Fix off-by-one-bug printing the last byte before a\n\thex-escaped output.\n\t(pp_character): Don't apply line wrapping in the middle of multibyte\n\tcharacters.\n\t(test_utf8): New test.\n\t(pretty_print_c_tests): Call the new test.\n\nFrom-SVN: r279226", "tree": {"sha": "8d32b41f3680899710d7acc75390cb28dd9cf351", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d32b41f3680899710d7acc75390cb28dd9cf351"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddd0fd173a12111f9cb6747d7714b976f870c70b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddd0fd173a12111f9cb6747d7714b976f870c70b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddd0fd173a12111f9cb6747d7714b976f870c70b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddd0fd173a12111f9cb6747d7714b976f870c70b/comments", "author": null, "committer": null, "parents": [{"sha": "0dc4e690ce92e2ee4e97ab430d6fb063dd3f4a22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dc4e690ce92e2ee4e97ab430d6fb063dd3f4a22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dc4e690ce92e2ee4e97ab430d6fb063dd3f4a22"}], "stats": {"total": 72, "additions": 71, "deletions": 1}, "files": [{"sha": "7841619fa61ef58c87de6617f4831a26f75af782", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd0fd173a12111f9cb6747d7714b976f870c70b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd0fd173a12111f9cb6747d7714b976f870c70b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ddd0fd173a12111f9cb6747d7714b976f870c70b", "patch": "@@ -1,3 +1,14 @@\n+2019-12-11  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\tPR 91853\n+\t* pretty-print.c (pp_quoted_string): Avoid hex-escaping valid\n+\tmultibyte input.  Fix off-by-one-bug printing the last byte before a\n+\thex-escaped output.\n+\t(pp_character): Don't apply line wrapping in the middle of multibyte\n+\tcharacters.\n+\t(test_utf8): New test.\n+\t(pretty_print_c_tests): Call the new test.\n+\n 2019-12-11  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* config/arm/arm-cpus.in (ALL_SIMD_EXTERNAL): New fgroup."}, {"sha": "511ef0ab0afabe2abbe1318b9e95167b40700ece", "filename": "gcc/pretty-print.c", "status": "modified", "additions": 60, "deletions": 1, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd0fd173a12111f9cb6747d7714b976f870c70b/gcc%2Fpretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd0fd173a12111f9cb6747d7714b976f870c70b/gcc%2Fpretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.c?ref=ddd0fd173a12111f9cb6747d7714b976f870c70b", "patch": "@@ -699,6 +699,8 @@ mingw_ansi_fputs (const char *str, FILE *fp)\n \n #endif /* __MINGW32__ */\n \n+static int\n+decode_utf8_char (const unsigned char *, size_t len, unsigned int *);\n static void pp_quoted_string (pretty_printer *, const char *, size_t = -1);\n \n /* Overwrite the given location/range within this text_info's rich_location.\n@@ -1689,6 +1691,8 @@ void\n pp_character (pretty_printer *pp, int c)\n {\n   if (pp_is_wrapping_line (pp)\n+      /* If printing UTF-8, don't wrap in the middle of a sequence.  */\n+      && (((unsigned int) c) & 0xC0) != 0x80\n       && pp_remaining_character_count_for_line (pp) <= 0)\n     {\n       pp_newline (pp);\n@@ -1729,8 +1733,22 @@ pp_quoted_string (pretty_printer *pp, const char *str, size_t n /* = -1 */)\n       if (ISPRINT (*ps))\n \t  continue;\n \n+      /* Don't escape a valid UTF-8 extended char.  */\n+      const unsigned char *ups = (const unsigned char *) ps;\n+      if (*ups & 0x80)\n+\t{\n+\t  unsigned int extended_char;\n+\t  const int valid_utf8_len = decode_utf8_char (ups, n, &extended_char);\n+\t  if (valid_utf8_len > 0)\n+\t    {\n+\t      ps += valid_utf8_len - 1;\n+\t      n -= valid_utf8_len - 1;\n+\t      continue;\n+\t    }\n+\t}\n+\n       if (last < ps)\n-\tpp_maybe_wrap_text (pp, last, ps - 1);\n+\tpp_maybe_wrap_text (pp, last, ps);\n \n       /* Append the hexadecimal value of the character.  Allocate a buffer\n \t that's large enough for a 32-bit char plus the hex prefix.  */\n@@ -2377,6 +2395,46 @@ test_urls ()\n   }\n }\n \n+/* Test multibyte awareness.  */\n+static void test_utf8 ()\n+{\n+\n+  /* Check that pp_quoted_string leaves valid UTF-8 alone.  */\n+  {\n+    pretty_printer pp;\n+    const char *s = \"\\xf0\\x9f\\x98\\x82\";\n+    pp_quoted_string (&pp, s);\n+    ASSERT_STREQ (pp_formatted_text (&pp), s);\n+  }\n+\n+  /* Check that pp_quoted_string escapes non-UTF-8 nonprintable bytes.  */\n+  {\n+    pretty_printer pp;\n+    pp_quoted_string (&pp, \"\\xf0!\\x9f\\x98\\x82\");\n+    ASSERT_STREQ (pp_formatted_text (&pp),\n+\t\t  \"\\\\xf0!\\\\x9f\\\\x98\\\\x82\");\n+  }\n+\n+  /* Check that pp_character will line-wrap at the beginning of a UTF-8\n+     sequence, but not in the middle.  */\n+  {\n+      pretty_printer pp (3);\n+      const char s[] = \"---\\xf0\\x9f\\x98\\x82\";\n+      for (int i = 0; i != sizeof (s) - 1; ++i)\n+\tpp_character (&pp, s[i]);\n+      pp_newline (&pp);\n+      for (int i = 1; i != sizeof (s) - 1; ++i)\n+\tpp_character (&pp, s[i]);\n+      pp_character (&pp, '-');\n+      ASSERT_STREQ (pp_formatted_text (&pp),\n+\t\t    \"---\\n\"\n+\t\t    \"\\xf0\\x9f\\x98\\x82\\n\"\n+\t\t    \"--\\xf0\\x9f\\x98\\x82\\n\"\n+\t\t    \"-\");\n+  }\n+\n+}\n+\n /* Run all of the selftests within this file.  */\n \n void\n@@ -2386,6 +2444,7 @@ pretty_print_c_tests ()\n   test_pp_format ();\n   test_prefixes_and_wrapping ();\n   test_urls ();\n+  test_utf8 ();\n }\n \n } // namespace selftest"}]}