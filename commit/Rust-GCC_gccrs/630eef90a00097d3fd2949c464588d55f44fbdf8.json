{"sha": "630eef90a00097d3fd2949c464588d55f44fbdf8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMwZWVmOTBhMDAwOTdkM2ZkMjk0OWM0NjQ1ODhkNTVmNDRmYmRmOA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-12-30T23:05:16Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-12-30T23:05:16Z"}, "message": "i386-protos.h: Remove prototype for const_int_1_operand.\n\n\t* config/i386/i386-protos.h: Remove prototype for\n\tconst_int_1_operand.\n\t* config/i386/i386.c (const_int_1_operand): Remove.\n\t* config/i386/i386.h (PREDICATE_CODES): Remove\n\tconst_int_1_operand.\n\t* config/i386/i386.md: Replace all uses of const_int_1_operand\n\twith const1_operand.\n\t* config/i386/pentium.md: Likewise.\n\nFrom-SVN: r75247", "tree": {"sha": "90637794aeb472933feb4764417e4eeb4c133f14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90637794aeb472933feb4764417e4eeb4c133f14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/630eef90a00097d3fd2949c464588d55f44fbdf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/630eef90a00097d3fd2949c464588d55f44fbdf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/630eef90a00097d3fd2949c464588d55f44fbdf8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/630eef90a00097d3fd2949c464588d55f44fbdf8/comments", "author": null, "committer": null, "parents": [{"sha": "e5e95ba046cfaf57d9eded8641d913fea268346a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5e95ba046cfaf57d9eded8641d913fea268346a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5e95ba046cfaf57d9eded8641d913fea268346a"}], "stats": {"total": 93, "additions": 47, "deletions": 46}, "files": [{"sha": "0259b1814088c17c388e88f57277550bda5eff7e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630eef90a00097d3fd2949c464588d55f44fbdf8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630eef90a00097d3fd2949c464588d55f44fbdf8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=630eef90a00097d3fd2949c464588d55f44fbdf8", "patch": "@@ -1,3 +1,14 @@\n+2003-12-30  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/i386/i386-protos.h: Remove prototype for\n+\tconst_int_1_operand.\n+\t* config/i386/i386.c (const_int_1_operand): Remove.\n+\t* config/i386/i386.h (PREDICATE_CODES): Remove\n+\tconst_int_1_operand.\n+\t* config/i386/i386.md: Replace all uses of const_int_1_operand\n+\twith const1_operand.\n+\t* config/i386/pentium.md: Likewise.\n+\n 2003-12-30  Geoffrey Keating  <geoffk@greed.local>\n \n \t* doc/tm.texi (PREFERRED_RELOAD_CLASS): Describe use of NO_REGS"}, {"sha": "66817c8cfeb939113de5287a1e67fe9eed9cbb11", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630eef90a00097d3fd2949c464588d55f44fbdf8/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630eef90a00097d3fd2949c464588d55f44fbdf8/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=630eef90a00097d3fd2949c464588d55f44fbdf8", "patch": "@@ -59,7 +59,6 @@ extern int x86_64_nonmemory_operand (rtx, enum machine_mode);\n extern int x86_64_szext_nonmemory_operand (rtx, enum machine_mode);\n extern int x86_64_immediate_operand (rtx, enum machine_mode);\n extern int x86_64_zext_immediate_operand (rtx, enum machine_mode);\n-extern int const_int_1_operand (rtx, enum machine_mode);\n extern int symbolic_operand (rtx, enum machine_mode);\n extern int tls_symbolic_operand (rtx, enum machine_mode);\n extern int global_dynamic_symbolic_operand (rtx, enum machine_mode);"}, {"sha": "6a49d4212d329e3325154fb657909f5b28fc53aa", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630eef90a00097d3fd2949c464588d55f44fbdf8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630eef90a00097d3fd2949c464588d55f44fbdf8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=630eef90a00097d3fd2949c464588d55f44fbdf8", "patch": "@@ -3419,14 +3419,6 @@ x86_64_zext_immediate_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n   return x86_64_zero_extended_value (op);\n }\n \n-/* Return nonzero if OP is (const_int 1), else return zero.  */\n-\n-int\n-const_int_1_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n-{\n-  return op == const1_rtx;\n-}\n-\n /* Return nonzero if OP is CONST_INT >= 1 and <= 31 (a valid operand\n    for shift & compare patterns, as shifting by 0 does not change flags),\n    else return zero.  */"}, {"sha": "69777b31a306f670c76094891e2fbcd4beeb6224", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630eef90a00097d3fd2949c464588d55f44fbdf8/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630eef90a00097d3fd2949c464588d55f44fbdf8/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=630eef90a00097d3fd2949c464588d55f44fbdf8", "patch": "@@ -2921,7 +2921,6 @@ do {\t\t\t\t\t\t\\\n   {\"x86_64_zext_immediate_operand\", {CONST_INT, CONST_DOUBLE, CONST,\t\\\n \t\t\t\t       SYMBOL_REF, LABEL_REF}},\t\t\\\n   {\"shiftdi_operand\", {SUBREG, REG, MEM}},\t\t\t\t\\\n-  {\"const_int_1_operand\", {CONST_INT}},\t\t\t\t\t\\\n   {\"const_int_1_31_operand\", {CONST_INT}},\t\t\t\t\\\n   {\"symbolic_operand\", {SYMBOL_REF, LABEL_REF, CONST}},\t\t\t\\\n   {\"aligned_operand\", {CONST_INT, CONST_DOUBLE, CONST, SYMBOL_REF,\t\\"}, {"sha": "0562cc3a40a0afb9091d4be71180f2b7d4a7d9f6", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630eef90a00097d3fd2949c464588d55f44fbdf8/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630eef90a00097d3fd2949c464588d55f44fbdf8/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=630eef90a00097d3fd2949c464588d55f44fbdf8", "patch": "@@ -11174,7 +11174,7 @@\n (define_insn \"*ashrdi3_1_one_bit_rex64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n-\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+\t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (ASHIFTRT, DImode, operands)\n    && (TARGET_SHIFT1 || optimize_size)\"\n@@ -11204,7 +11204,7 @@\n   [(set (reg 17)\n \t(compare\n \t  (ashiftrt:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n-\t\t       (match_operand:QI 2 \"const_int_1_operand\" \"\"))\n+\t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n \t  (const_int 0)))\n    (set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:DI (match_dup 1) (match_dup 2)))]\n@@ -11363,7 +11363,7 @@\n (define_insn \"*ashrsi3_1_one_bit\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n-\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+\t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\n    && (TARGET_SHIFT1 || optimize_size)\"\n@@ -11377,7 +11377,7 @@\n (define_insn \"*ashrsi3_1_one_bit_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t\t\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\"))))\n+\t\t\t\t     (match_operand:QI 2 \"const1_operand\" \"\"))))\n    (clobber (reg:CC 17))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\n    && (TARGET_SHIFT1 || optimize_size)\"\n@@ -11416,7 +11416,7 @@\n   [(set (reg 17)\n \t(compare\n \t  (ashiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n-\t\t       (match_operand:QI 2 \"const_int_1_operand\" \"\"))\n+\t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n \t  (const_int 0)))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:SI (match_dup 1) (match_dup 2)))]\n@@ -11434,7 +11434,7 @@\n   [(set (reg 17)\n \t(compare\n \t  (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t\t       (match_operand:QI 2 \"const_int_1_operand\" \"\"))\n+\t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n \t  (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI (ashiftrt:SI (match_dup 1) (match_dup 2))))]\n@@ -11487,7 +11487,7 @@\n (define_insn \"*ashrhi3_1_one_bit\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n-\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+\t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"ix86_binary_operator_ok (ASHIFTRT, HImode, operands)\n    && (TARGET_SHIFT1 || optimize_size)\"\n@@ -11517,7 +11517,7 @@\n   [(set (reg 17)\n \t(compare\n \t  (ashiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n-\t\t       (match_operand:QI 2 \"const_int_1_operand\" \"\"))\n+\t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n \t  (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:HI (match_dup 1) (match_dup 2)))]\n@@ -11559,7 +11559,7 @@\n (define_insn \"*ashrqi3_1_one_bit\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(ashiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n-\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+\t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\n    && (TARGET_SHIFT1 || optimize_size)\"\n@@ -11573,7 +11573,7 @@\n (define_insn \"*ashrqi3_1_one_bit_slp\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm\"))\n \t(ashiftrt:QI (match_dup 0)\n-\t\t     (match_operand:QI 1 \"const_int_1_operand\" \"\")))\n+\t\t     (match_operand:QI 1 \"const1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\n    && (! TARGET_PARTIAL_REG_STALL || optimize_size)\n@@ -11617,7 +11617,7 @@\n   [(set (reg 17)\n \t(compare\n \t  (ashiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n-\t\t       (match_operand:QI 2 \"const_int_1_operand\" \"I\"))\n+\t\t       (match_operand:QI 2 \"const1_operand\" \"I\"))\n \t  (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(ashiftrt:QI (match_dup 1) (match_dup 2)))]\n@@ -11671,7 +11671,7 @@\n (define_insn \"*lshrdi3_1_one_bit_rex64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n-\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+\t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\n    && (TARGET_SHIFT1 || optimize_size)\"\n@@ -11701,7 +11701,7 @@\n   [(set (reg 17)\n \t(compare\n \t  (lshiftrt:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n-\t\t       (match_operand:QI 2 \"const_int_1_operand\" \"\"))\n+\t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n \t  (const_int 0)))\n    (set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:DI (match_dup 1) (match_dup 2)))]\n@@ -11781,7 +11781,7 @@\n (define_insn \"*lshrsi3_1_one_bit\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n-\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+\t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\n    && (TARGET_SHIFT1 || optimize_size)\"\n@@ -11795,7 +11795,7 @@\n (define_insn \"*lshrsi3_1_one_bit_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(lshiftrt:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"0\"))\n-\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+\t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\n    && (TARGET_SHIFT1 || optimize_size)\"\n@@ -11835,7 +11835,7 @@\n   [(set (reg 17)\n \t(compare\n \t  (lshiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n-\t\t       (match_operand:QI 2 \"const_int_1_operand\" \"\"))\n+\t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n \t  (const_int 0)))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:SI (match_dup 1) (match_dup 2)))]\n@@ -11853,7 +11853,7 @@\n   [(set (reg 17)\n \t(compare\n \t  (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t\t       (match_operand:QI 2 \"const_int_1_operand\" \"\"))\n+\t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n \t  (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(lshiftrt:DI (zero_extend:DI (match_dup 1)) (match_dup 2)))]\n@@ -11906,7 +11906,7 @@\n (define_insn \"*lshrhi3_1_one_bit\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n-\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+\t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\n    && (TARGET_SHIFT1 || optimize_size)\"\n@@ -11936,7 +11936,7 @@\n   [(set (reg 17)\n \t(compare\n \t  (lshiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n-\t\t       (match_operand:QI 2 \"const_int_1_operand\" \"\"))\n+\t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n \t  (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:HI (match_dup 1) (match_dup 2)))]\n@@ -11978,7 +11978,7 @@\n (define_insn \"*lshrqi3_1_one_bit\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(lshiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n-\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+\t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\n    && (TARGET_SHIFT1 || optimize_size)\"\n@@ -11992,7 +11992,7 @@\n (define_insn \"*lshrqi3_1_one_bit_slp\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm\"))\n \t(lshiftrt:QI (match_dup 0)\n-\t\t     (match_operand:QI 1 \"const_int_1_operand\" \"\")))\n+\t\t     (match_operand:QI 1 \"const1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n    && (TARGET_SHIFT1 || optimize_size)\"\n@@ -12035,7 +12035,7 @@\n   [(set (reg 17)\n \t(compare\n \t  (lshiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n-\t\t       (match_operand:QI 2 \"const_int_1_operand\" \"\"))\n+\t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n \t  (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(lshiftrt:QI (match_dup 1) (match_dup 2)))]\n@@ -12079,7 +12079,7 @@\n (define_insn \"*rotlsi3_1_one_bit_rex64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n \t(rotate:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n-\t\t   (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+\t\t   (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (ROTATE, DImode, operands)\n    && (TARGET_SHIFT1 || optimize_size)\"\n@@ -12113,7 +12113,7 @@\n (define_insn \"*rotlsi3_1_one_bit\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(rotate:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n-\t\t   (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+\t\t   (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"ix86_binary_operator_ok (ROTATE, SImode, operands)\n    && (TARGET_SHIFT1 || optimize_size)\"\n@@ -12128,7 +12128,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n \t  (rotate:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\"))))\n+\t\t     (match_operand:QI 2 \"const1_operand\" \"\"))))\n    (clobber (reg:CC 17))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (ROTATE, SImode, operands)\n    && (TARGET_SHIFT1 || optimize_size)\"\n@@ -12172,7 +12172,7 @@\n (define_insn \"*rotlhi3_1_one_bit\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(rotate:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n-\t\t   (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+\t\t   (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"ix86_binary_operator_ok (ROTATE, HImode, operands)\n    && (TARGET_SHIFT1 || optimize_size)\"\n@@ -12206,7 +12206,7 @@\n (define_insn \"*rotlqi3_1_one_bit_slp\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm\"))\n \t(rotate:QI (match_dup 0)\n-\t\t   (match_operand:QI 1 \"const_int_1_operand\" \"\")))\n+\t\t   (match_operand:QI 1 \"const1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n    && (TARGET_SHIFT1 || optimize_size)\"\n@@ -12220,7 +12220,7 @@\n (define_insn \"*rotlqi3_1_one_bit\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(rotate:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n-\t\t   (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+\t\t   (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"ix86_binary_operator_ok (ROTATE, QImode, operands)\n    && (TARGET_SHIFT1 || optimize_size)\"\n@@ -12267,7 +12267,7 @@\n (define_insn \"*rotrdi3_1_one_bit_rex64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n \t(rotatert:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n-\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+\t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (ROTATERT, DImode, operands)\n    && (TARGET_SHIFT1 || optimize_size)\"\n@@ -12301,7 +12301,7 @@\n (define_insn \"*rotrsi3_1_one_bit\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(rotatert:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n-\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+\t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"ix86_binary_operator_ok (ROTATERT, SImode, operands)\n    && (TARGET_SHIFT1 || optimize_size)\"\n@@ -12316,7 +12316,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n \t  (rotatert:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t\t       (match_operand:QI 2 \"const_int_1_operand\" \"\"))))\n+\t\t       (match_operand:QI 2 \"const1_operand\" \"\"))))\n    (clobber (reg:CC 17))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (ROTATERT, SImode, operands)\n    && (TARGET_SHIFT1 || optimize_size)\"\n@@ -12363,7 +12363,7 @@\n (define_insn \"*rotrhi3_one_bit\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(rotatert:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n-\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+\t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"ix86_binary_operator_ok (ROTATERT, HImode, operands)\n    && (TARGET_SHIFT1 || optimize_size)\"\n@@ -12397,7 +12397,7 @@\n (define_insn \"*rotrqi3_1_one_bit\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(rotatert:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n-\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+\t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"ix86_binary_operator_ok (ROTATERT, QImode, operands)\n    && (TARGET_SHIFT1 || optimize_size)\"\n@@ -12411,7 +12411,7 @@\n (define_insn \"*rotrqi3_1_one_bit_slp\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm\"))\n \t(rotatert:QI (match_dup 0)\n-\t\t     (match_operand:QI 1 \"const_int_1_operand\" \"\")))\n+\t\t     (match_operand:QI 1 \"const1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n    && (TARGET_SHIFT1 || optimize_size)\""}, {"sha": "5fec8113b7371015b98d1db7a68271bbef0404ed", "filename": "gcc/config/i386/pentium.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630eef90a00097d3fd2949c464588d55f44fbdf8/gcc%2Fconfig%2Fi386%2Fpentium.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630eef90a00097d3fd2949c464588d55f44fbdf8/gcc%2Fconfig%2Fi386%2Fpentium.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpentium.md?ref=630eef90a00097d3fd2949c464588d55f44fbdf8", "patch": "@@ -51,13 +51,13 @@\n \t      (match_operand 2 \"const_int_operand\" \"\"))\n \t   (const_string \"pu\")\n \t (and (eq_attr \"type\" \"rotate\")\n-\t      (match_operand 2 \"const_int_1_operand\" \"\"))\n+\t      (match_operand 2 \"const1_operand\" \"\"))\n \t   (const_string \"pu\")\n \t (and (eq_attr \"type\" \"ishift1\")\n \t      (match_operand 1 \"const_int_operand\" \"\"))\n \t   (const_string \"pu\")\n \t (and (eq_attr \"type\" \"rotate1\")\n-\t      (match_operand 1 \"const_int_1_operand\" \"\"))\n+\t      (match_operand 1 \"const1_operand\" \"\"))\n \t   (const_string \"pu\")\n \t (and (eq_attr \"type\" \"call\")\n \t      (match_operand 0 \"constant_call_address_operand\" \"\"))"}]}