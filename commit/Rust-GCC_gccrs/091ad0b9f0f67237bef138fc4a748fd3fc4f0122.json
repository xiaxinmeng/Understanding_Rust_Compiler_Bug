{"sha": "091ad0b9f0f67237bef138fc4a748fd3fc4f0122", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDkxYWQwYjlmMGY2NzIzN2JlZjEzOGZjNGE3NDhmZDNmYzRmMDEyMg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-04-03T10:33:45Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-04-03T10:33:45Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r673", "tree": {"sha": "6f8e0d587e2cf1cd543cad5fe5378774b435752a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f8e0d587e2cf1cd543cad5fe5378774b435752a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/091ad0b9f0f67237bef138fc4a748fd3fc4f0122", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/091ad0b9f0f67237bef138fc4a748fd3fc4f0122", "html_url": "https://github.com/Rust-GCC/gccrs/commit/091ad0b9f0f67237bef138fc4a748fd3fc4f0122", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/091ad0b9f0f67237bef138fc4a748fd3fc4f0122/comments", "author": null, "committer": null, "parents": [{"sha": "76124f95a08c16ba11277ea52404e57ea9473e46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76124f95a08c16ba11277ea52404e57ea9473e46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76124f95a08c16ba11277ea52404e57ea9473e46"}], "stats": {"total": 35, "additions": 22, "deletions": 13}, "files": [{"sha": "f33dba9898e9d233f607acdcc190e87e160009d5", "filename": "gcc/explow.c", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091ad0b9f0f67237bef138fc4a748fd3fc4f0122/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091ad0b9f0f67237bef138fc4a748fd3fc4f0122/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=091ad0b9f0f67237bef138fc4a748fd3fc4f0122", "patch": "@@ -688,12 +688,15 @@ round_push (size)\n    Any required stack pointer alignment is preserved.\n \n    SIZE is an rtx representing the size of the area.\n-   TARGET is a place in which the address can be placed.  */\n+   TARGET is a place in which the address can be placed.\n+\n+   KNOWN_ALIGN is the alignment (in bits) that we know SIZE has.  */\n \n rtx\n-allocate_dynamic_stack_space (size, target)\n+allocate_dynamic_stack_space (size, target, known_align)\n      rtx size;\n      rtx target;\n+     int known_align;\n {\n   /* Ensure the size is in the proper mode.  */\n   if (GET_MODE (size) != VOIDmode && GET_MODE (size) != Pmode)\n@@ -761,11 +764,14 @@ allocate_dynamic_stack_space (size, target)\n      way of knowing which systems have this problem.  So we avoid even\n      momentarily mis-aligning the stack.  */\n \n-  size = round_push (size);\n+  if (known_align % STACK_BOUNDARY != 0)\n+    size = round_push (size);\n \n   do_pending_stack_adjust ();\n \n-  if (target == 0)\n+  /* Don't use a TARGET that isn't a pseudo.  */\n+  if (target == 0 || GET_CODE (target) != REG\n+      || REGNO (target) < FIRST_PSEUDO_REGISTER)\n     target = gen_reg_rtx (Pmode);\n \n #ifndef STACK_GROWS_DOWNWARD\n@@ -797,15 +803,18 @@ allocate_dynamic_stack_space (size, target)\n #endif\n \n #ifdef MUST_ALIGN\n-  target = expand_divmod (0, CEIL_DIV_EXPR, Pmode, target,\n-\t\t\t  gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t   BIGGEST_ALIGNMENT / BITS_PER_UNIT),\n-\t\t\t  0, 1);\n-\n-  target = expand_mult (Pmode, target,\n-\t\t\tgen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t BIGGEST_ALIGNMENT / BITS_PER_UNIT),\n-\t\t\t0, 1);\n+  if (known_align % BIGGEST_ALIGNMENT != 0)\n+    {\n+      target = expand_divmod (0, CEIL_DIV_EXPR, Pmode, target,\n+\t\t\t      gen_rtx (CONST_INT, VOIDmode,\n+\t\t\t\t       BIGGEST_ALIGNMENT / BITS_PER_UNIT),\n+\t\t\t      0, 1);\n+\n+      target = expand_mult (Pmode, target,\n+\t\t\t    gen_rtx (CONST_INT, VOIDmode,\n+\t\t\t\t     BIGGEST_ALIGNMENT / BITS_PER_UNIT),\n+\t\t\t    0, 1);\n+    }\n #endif\n   \n   /* Some systems require a particular insn to refer to the stack"}]}