{"sha": "0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNhZGJmYWE4OTgwNWNlNGQxYjkzYmVkMDRjMTBkN2M3YmYxZjZlMg==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2013-08-23T22:16:08Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2013-08-23T22:16:08Z"}, "message": "re PR other/57324 (Undefined behavior issues found with clang's -fsanitize=undefined)\n\n2013-08-24  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR other/57324\n\t* hwint.h (HOST_WIDE_INT_UC, HOST_WIDE_INT_1U, HOST_WIDE_INT_M1,\n\tHOST_WIDE_INT_M1U): New macros.\n\t* fold-const.c (sign_bit_p, build_range_check, fold_unary_loc,\n\tfold_binary_loc, fold_ternary_loc): Use the new macros. Use an\n\tunsigned -1 for lshift.\n\t* cse.c (cse_insn): Likewise.\n\t* double-int.c (rshift_double, lshift_double): Likewise.\n\t* builtins.c (fold_builtin_bitop): Likewise.\n\t* combine.c (force_to_mode): Likewise.\n\t* tree.c (integer_pow2p, tree_log2, tree_floor_log2): Likewise.\n\t* simplify-rtx.c (simplify_const_unary_operation,\n\tsimplify_const_binary_operation): Likewise.\n\t* tree-stdarg.c (va_list_counter_bump, va_list_ptr_read,\n\tcheck_va_list_escapes): Likewise.\n\t* rtlanal.c (nonzero_bits1): Likewise.\n\t* expmed.c (expand_smod_pow2): Likewise.\n\t* tree-ssa-structalias.c (UNKNOWN_OFFSET): Use HOST_WIDE_INT_MIN.\n\nFrom-SVN: r201953", "tree": {"sha": "fd1a5007e3c6c876ebf4f1982aa74584d82afc0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd1a5007e3c6c876ebf4f1982aa74584d82afc0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4500f676e138a5ea3337ebd47745d8b49ba775b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4500f676e138a5ea3337ebd47745d8b49ba775b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4500f676e138a5ea3337ebd47745d8b49ba775b5"}], "stats": {"total": 125, "additions": 73, "deletions": 52}, "files": [{"sha": "a659a860124485c3669f9c92f5f14f913a71f06a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2", "patch": "@@ -1,3 +1,24 @@\n+2013-08-24  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR other/57324\n+\t* hwint.h (HOST_WIDE_INT_UC, HOST_WIDE_INT_1U, HOST_WIDE_INT_M1,\n+\tHOST_WIDE_INT_M1U): New macros.\n+\t* fold-const.c (sign_bit_p, build_range_check, fold_unary_loc,\n+\tfold_binary_loc, fold_ternary_loc): Use the new macros. Use an\n+\tunsigned -1 for lshift.\n+\t* cse.c (cse_insn): Likewise.\n+\t* double-int.c (rshift_double, lshift_double): Likewise.\n+\t* builtins.c (fold_builtin_bitop): Likewise.\n+\t* combine.c (force_to_mode): Likewise.\n+\t* tree.c (integer_pow2p, tree_log2, tree_floor_log2): Likewise.\n+\t* simplify-rtx.c (simplify_const_unary_operation,\n+\tsimplify_const_binary_operation): Likewise.\n+\t* tree-stdarg.c (va_list_counter_bump, va_list_ptr_read,\n+\tcheck_va_list_escapes): Likewise.\n+\t* rtlanal.c (nonzero_bits1): Likewise.\n+\t* expmed.c (expand_smod_pow2): Likewise.\n+\t* tree-ssa-structalias.c (UNKNOWN_OFFSET): Use HOST_WIDE_INT_MIN.\n+\n 2013-08-23  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.c (cgraph_turn_edge_to_speculative): Mark target node"}, {"sha": "d8baad15e8efb2e4eeba8f5a438ed248a4e7bd1d", "filename": "gcc/builtins.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2", "patch": "@@ -8133,14 +8133,13 @@ fold_builtin_bitop (tree fndecl, tree arg)\n \t{\n \t  hi = TREE_INT_CST_HIGH (arg);\n \t  if (width < HOST_BITS_PER_DOUBLE_INT)\n-\t    hi &= ~((unsigned HOST_WIDE_INT) (-1)\n-\t\t    << (width - HOST_BITS_PER_WIDE_INT));\n+\t    hi &= ~(HOST_WIDE_INT_M1U << (width - HOST_BITS_PER_WIDE_INT));\n \t}\n       else\n \t{\n \t  hi = 0;\n \t  if (width < HOST_BITS_PER_WIDE_INT)\n-\t    lo &= ~((unsigned HOST_WIDE_INT) (-1) << width);\n+\t    lo &= ~(HOST_WIDE_INT_M1U << width);\n \t}\n \n       switch (DECL_FUNCTION_CODE (fndecl))\n@@ -8179,13 +8178,13 @@ fold_builtin_bitop (tree fndecl, tree arg)\n \t      && (hi & ((unsigned HOST_WIDE_INT) 1\n \t\t\t<< (width - HOST_BITS_PER_WIDE_INT - 1))) != 0)\n \t    {\n-\t      hi = ~hi & ~((unsigned HOST_WIDE_INT) (-1)\n+\t      hi = ~hi & ~(HOST_WIDE_INT_M1U\n \t\t\t   << (width - HOST_BITS_PER_WIDE_INT - 1));\n \t      lo = ~lo;\n \t    }\n \t  else if (width <= HOST_BITS_PER_WIDE_INT\n \t\t   && (lo & ((unsigned HOST_WIDE_INT) 1 << (width - 1))) != 0)\n-\t    lo = ~lo & ~((unsigned HOST_WIDE_INT) (-1) << (width - 1));\n+\t    lo = ~lo & ~(HOST_WIDE_INT_M1U << (width - 1));\n \t  if (hi != 0)\n \t    result = width - floor_log2 (hi) - 2 - HOST_BITS_PER_WIDE_INT;\n \t  else if (lo != 0)"}, {"sha": "fc566c55c16649f4d9dd2f5f3a51d4ad2f5d59d6", "filename": "gcc/combine.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2", "patch": "@@ -8129,8 +8129,8 @@ force_to_mode (rtx x, enum machine_mode mode, unsigned HOST_WIDE_INT mask,\n \t      /* If MODE is narrower than HOST_WIDE_INT and CVAL is a negative\n \t\t number, sign extend it.  */\n \t      if (width > 0 && width < HOST_BITS_PER_WIDE_INT\n-\t\t  && (cval & ((unsigned HOST_WIDE_INT) 1 << (width - 1))) != 0)\n-\t\tcval |= (unsigned HOST_WIDE_INT) -1 << width;\n+\t\t  && (cval & (HOST_WIDE_INT_1U << (width - 1))) != 0)\n+\t\tcval |= HOST_WIDE_INT_M1U << width;\n \n \t      y = simplify_gen_binary (AND, GET_MODE (x),\n \t\t\t\t       XEXP (x, 0), GEN_INT (cval));\n@@ -8158,8 +8158,8 @@ force_to_mode (rtx x, enum machine_mode mode, unsigned HOST_WIDE_INT mask,\n \t   number, sign extend it.  */\n \n \tif (width < HOST_BITS_PER_WIDE_INT\n-\t    && (smask & ((unsigned HOST_WIDE_INT) 1 << (width - 1))) != 0)\n-\t  smask |= (unsigned HOST_WIDE_INT) (-1) << width;\n+\t    && (smask & (HOST_WIDE_INT_1U << (width - 1))) != 0)\n+\t  smask |= HOST_WIDE_INT_M1U << width;\n \n \tif (CONST_INT_P (XEXP (x, 1))\n \t    && exact_log2 (- smask) >= 0"}, {"sha": "b96af19f9e45a1fa933e70ffaf0400aac8648aae", "filename": "gcc/cse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2", "patch": "@@ -5381,7 +5381,7 @@ cse_insn (rtx insn)\n \t      && CONST_INT_P (width)\n \t      && INTVAL (width) < HOST_BITS_PER_WIDE_INT\n \t      && ! (INTVAL (src_const)\n-\t\t    & ((HOST_WIDE_INT) (-1) << INTVAL (width))))\n+\t\t    & (HOST_WIDE_INT_M1U << INTVAL (width))))\n \t    /* Exception: if the value is constant,\n \t       and it won't be truncated, record it.  */\n \t    ;"}, {"sha": "7eaad659279bfdf8e0d2170641675c4bf9157573", "filename": "gcc/double-int.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2/gcc%2Fdouble-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2/gcc%2Fdouble-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdouble-int.c?ref=0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2", "patch": "@@ -271,13 +271,13 @@ rshift_double (unsigned HOST_WIDE_INT l1, HOST_WIDE_INT h1,\n     ;\n   else if ((prec - count) >= HOST_BITS_PER_WIDE_INT)\n     {\n-      *hv &= ~((HOST_WIDE_INT) (-1) << (prec - count - HOST_BITS_PER_WIDE_INT));\n+      *hv &= ~(HOST_WIDE_INT_M1U << (prec - count - HOST_BITS_PER_WIDE_INT));\n       *hv |= signmask << (prec - count - HOST_BITS_PER_WIDE_INT);\n     }\n   else\n     {\n       *hv = signmask;\n-      *lv &= ~((unsigned HOST_WIDE_INT) (-1) << (prec - count));\n+      *lv &= ~(HOST_WIDE_INT_M1U << (prec - count));\n       *lv |= signmask << (prec - count);\n     }\n }\n@@ -328,13 +328,13 @@ lshift_double (unsigned HOST_WIDE_INT l1, HOST_WIDE_INT h1,\n     ;\n   else if (prec >= HOST_BITS_PER_WIDE_INT)\n     {\n-      *hv &= ~((HOST_WIDE_INT) (-1) << (prec - HOST_BITS_PER_WIDE_INT));\n+      *hv &= ~(HOST_WIDE_INT_M1U << (prec - HOST_BITS_PER_WIDE_INT));\n       *hv |= signmask << (prec - HOST_BITS_PER_WIDE_INT);\n     }\n   else\n     {\n       *hv = signmask;\n-      *lv &= ~((unsigned HOST_WIDE_INT) (-1) << prec);\n+      *lv &= ~(HOST_WIDE_INT_M1U << prec);\n       *lv |= signmask << prec;\n     }\n }"}, {"sha": "d18f09f4889cc6d886097bebb0be954ff0787853", "filename": "gcc/expmed.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2", "patch": "@@ -3697,11 +3697,11 @@ expand_smod_pow2 (enum machine_mode mode, rtx op0, HOST_WIDE_INT d)\n   masklow = ((HOST_WIDE_INT) 1 << logd) - 1;\n   if (GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT)\n     {\n-      masklow |= (HOST_WIDE_INT) -1 << (GET_MODE_BITSIZE (mode) - 1);\n+      masklow |= HOST_WIDE_INT_M1U << (GET_MODE_BITSIZE (mode) - 1);\n       maskhigh = -1;\n     }\n   else\n-    maskhigh = (HOST_WIDE_INT) -1\n+    maskhigh = HOST_WIDE_INT_M1U\n \t\t << (GET_MODE_BITSIZE (mode) - HOST_BITS_PER_WIDE_INT - 1);\n \n   temp = expand_binop (mode, and_optab, op0,\n@@ -3715,7 +3715,7 @@ expand_smod_pow2 (enum machine_mode mode, rtx op0, HOST_WIDE_INT d)\n \n   temp = expand_binop (mode, sub_optab, result, const1_rtx, result,\n \t\t       0, OPTAB_LIB_WIDEN);\n-  masklow = (HOST_WIDE_INT) -1 << logd;\n+  masklow = HOST_WIDE_INT_M1U << logd;\n   maskhigh = -1;\n   temp = expand_binop (mode, ior_optab, temp,\n \t\t       immed_double_const (masklow, maskhigh, mode),"}, {"sha": "1e0e7e5f98578ba1e4f878d1ab1c2af023224a74", "filename": "gcc/fold-const.c", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2", "patch": "@@ -3740,8 +3740,7 @@ sign_bit_p (tree exp, const_tree val)\n       hi = (unsigned HOST_WIDE_INT) 1 << (width - HOST_BITS_PER_WIDE_INT - 1);\n       lo = 0;\n \n-      mask_hi = ((unsigned HOST_WIDE_INT) -1\n-\t\t >> (HOST_BITS_PER_DOUBLE_INT - width));\n+      mask_hi = (HOST_WIDE_INT_M1U >> (HOST_BITS_PER_DOUBLE_INT - width));\n       mask_lo = -1;\n     }\n   else\n@@ -3750,8 +3749,7 @@ sign_bit_p (tree exp, const_tree val)\n       lo = (unsigned HOST_WIDE_INT) 1 << (width - 1);\n \n       mask_hi = 0;\n-      mask_lo = ((unsigned HOST_WIDE_INT) -1\n-\t\t >> (HOST_BITS_PER_WIDE_INT - width));\n+      mask_lo = (HOST_WIDE_INT_M1U >> (HOST_BITS_PER_WIDE_INT - width));\n     }\n \n   /* We mask off those bits beyond TREE_TYPE (exp) so that we can\n@@ -4325,7 +4323,7 @@ build_range_check (location_t loc, tree type, tree exp, int in_p,\n       else\n \t{\n \t  hi = ((HOST_WIDE_INT) 1 << (prec - HOST_BITS_PER_WIDE_INT - 1)) - 1;\n-\t  lo = (unsigned HOST_WIDE_INT) -1;\n+\t  lo = HOST_WIDE_INT_M1U;\n \t}\n \n       if (TREE_INT_CST_HIGH (high) == hi && TREE_INT_CST_LOW (high) == lo)\n@@ -8096,7 +8094,7 @@ fold_unary_loc (location_t loc, enum tree_code code, tree type, tree op0)\n \t      unsigned HOST_WIDE_INT cst;\n \n \t      cst = tree_low_cst (and1, 1);\n-\t      cst &= (HOST_WIDE_INT) -1\n+\t      cst &= HOST_WIDE_INT_M1U\n \t\t     << (TYPE_PRECISION (TREE_TYPE (and1)) - 1);\n \t      change = (cst == 0);\n #ifdef LOAD_EXTEND_OP\n@@ -11277,7 +11275,7 @@ fold_binary_loc (location_t loc,\n \t       w <<= 1)\n \t    {\n \t      unsigned HOST_WIDE_INT mask\n-\t\t= (unsigned HOST_WIDE_INT) -1 >> (HOST_BITS_PER_WIDE_INT - w);\n+\t\t= HOST_WIDE_INT_M1U >> (HOST_BITS_PER_WIDE_INT - w);\n \t      if (((c1.low | c2.low) & mask) == mask\n \t\t  && (c1.low & ~mask) == 0 && c1.high == 0)\n \t\t{\n@@ -12297,7 +12295,7 @@ fold_binary_loc (location_t loc,\n       /* X / -1 is -X.  */\n       if (!TYPE_UNSIGNED (type)\n \t  && TREE_CODE (arg1) == INTEGER_CST\n-\t  && TREE_INT_CST_LOW (arg1) == (unsigned HOST_WIDE_INT) -1\n+\t  && TREE_INT_CST_LOW (arg1) == HOST_WIDE_INT_M1U\n \t  && TREE_INT_CST_HIGH (arg1) == -1)\n \treturn fold_convert_loc (loc, type, negate_expr (arg0));\n \n@@ -12380,7 +12378,7 @@ fold_binary_loc (location_t loc,\n       /* X % -1 is zero.  */\n       if (!TYPE_UNSIGNED (type)\n \t  && TREE_CODE (arg1) == INTEGER_CST\n-\t  && TREE_INT_CST_LOW (arg1) == (unsigned HOST_WIDE_INT) -1\n+\t  && TREE_INT_CST_LOW (arg1) == HOST_WIDE_INT_M1U\n \t  && TREE_INT_CST_HIGH (arg1) == -1)\n \treturn omit_one_operand_loc (loc, type, integer_zero_node, arg0);\n \n@@ -13535,7 +13533,7 @@ fold_binary_loc (location_t loc,\n \t\telse\n \t\t  {\n \t\t    max_lo = signed_max_lo;\n-\t\t    min_lo = ((unsigned HOST_WIDE_INT) -1 << (width - 1));\n+\t\t    min_lo = (HOST_WIDE_INT_M1U << (width - 1));\n \t\t    min_hi = -1;\n \t\t  }\n \t      }\n@@ -13556,7 +13554,7 @@ fold_binary_loc (location_t loc,\n \t\telse\n \t\t  {\n \t\t    max_hi = signed_max_hi;\n-\t\t    min_hi = ((unsigned HOST_WIDE_INT) -1 << (width - 1));\n+\t\t    min_hi = (HOST_WIDE_INT_M1U << (width - 1));\n \t\t  }\n \t      }\n \n@@ -14175,24 +14173,24 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n \n \t      if (outer_width > HOST_BITS_PER_WIDE_INT)\n \t\t{\n-\t\t  mask_hi = ((unsigned HOST_WIDE_INT) -1\n+\t\t  mask_hi = (HOST_WIDE_INT_M1U\n \t\t\t     >> (HOST_BITS_PER_DOUBLE_INT - outer_width));\n \t\t  mask_lo = -1;\n \t\t}\n \t      else\n \t\t{\n \t\t  mask_hi = 0;\n-\t\t  mask_lo = ((unsigned HOST_WIDE_INT) -1\n+\t\t  mask_lo = (HOST_WIDE_INT_M1U\n \t\t\t     >> (HOST_BITS_PER_WIDE_INT - outer_width));\n \t\t}\n \t      if (inner_width > HOST_BITS_PER_WIDE_INT)\n \t\t{\n-\t\t  mask_hi &= ~((unsigned HOST_WIDE_INT) -1\n+\t\t  mask_hi &= ~(HOST_WIDE_INT_M1U\n \t\t\t       >> (HOST_BITS_PER_WIDE_INT - inner_width));\n \t\t  mask_lo = 0;\n \t\t}\n \t      else\n-\t\tmask_lo &= ~((unsigned HOST_WIDE_INT) -1\n+\t\tmask_lo &= ~(HOST_WIDE_INT_M1U\n \t\t\t     >> (HOST_BITS_PER_WIDE_INT - inner_width));\n \n \t      if ((TREE_INT_CST_HIGH (arg1) & mask_hi) == mask_hi"}, {"sha": "9930baac100e2b6857b169cf5a4ea07bea58f789", "filename": "gcc/hwint.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2/gcc%2Fhwint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2/gcc%2Fhwint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhwint.h?ref=0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2", "patch": "@@ -110,7 +110,11 @@ extern char sizeof_long_long_must_be_8[sizeof(long long) == 8 ? 1 : -1];\n #endif\n \n \n+#define HOST_WIDE_INT_UC(X) HOST_WIDE_INT_C(X ## U)\n #define HOST_WIDE_INT_1 HOST_WIDE_INT_C(1)\n+#define HOST_WIDE_INT_1U HOST_WIDE_INT_UC(1)\n+#define HOST_WIDE_INT_M1 HOST_WIDE_INT_C(-1)\n+#define HOST_WIDE_INT_M1U HOST_WIDE_INT_UC(-1)\n \n /* This is a magic identifier which allows GCC to figure out the type\n    of HOST_WIDE_INT for %wd specifier checks.  You must issue this"}, {"sha": "c15037e96451c1fef66d4ac81862736b3e1c2994", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2", "patch": "@@ -4034,7 +4034,7 @@ nonzero_bits1 (const_rtx x, enum machine_mode mode, const_rtx known_x,\n \t  && mode_width < BITS_PER_WORD\n \t  && (UINTVAL (x) & ((unsigned HOST_WIDE_INT) 1 << (mode_width - 1)))\n \t     != 0)\n-\treturn UINTVAL (x) | ((unsigned HOST_WIDE_INT) (-1) << mode_width);\n+\treturn UINTVAL (x) | (HOST_WIDE_INT_M1U << mode_width);\n #endif\n \n       return UINTVAL (x);"}, {"sha": "65a59062a4823829918ef39af79330512a5133fb", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2", "patch": "@@ -2018,14 +2018,13 @@ simplify_const_unary_operation (enum rtx_code code, enum machine_mode mode,\n \t  /* Test against the signed lower bound.  */\n \t  if (width > HOST_BITS_PER_WIDE_INT)\n \t    {\n-\t      th = (unsigned HOST_WIDE_INT) (-1)\n-\t\t   << (width - HOST_BITS_PER_WIDE_INT - 1);\n+\t      th = HOST_WIDE_INT_M1U << (width - HOST_BITS_PER_WIDE_INT - 1);\n \t      tl = 0;\n \t    }\n \t  else\n \t    {\n \t      th = -1;\n-\t      tl = (unsigned HOST_WIDE_INT) (-1) << (width - 1);\n+\t      tl = HOST_WIDE_INT_M1U << (width - 1);\n \t    }\n \t  real_from_integer (&t, VOIDmode, tl, th, 0);\n \t  if (REAL_VALUES_LESS (x, t))\n@@ -4191,7 +4190,7 @@ simplify_const_binary_operation (enum rtx_code code, enum machine_mode mode,\n \n \t  /* Sign-extend the result for arithmetic right shifts.  */\n \t  if (code == ASHIFTRT && arg0s < 0 && arg1 > 0)\n-\t    val |= ((unsigned HOST_WIDE_INT) (-1)) << (width - arg1);\n+\t    val |= HOST_WIDE_INT_M1U << (width - arg1);\n \t  break;\n \n \tcase ROTATERT:"}, {"sha": "991a6b5800e286bce0457c177d9cbb42cdb5cd96", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2", "patch": "@@ -482,7 +482,7 @@ struct constraint_expr\n };\n \n /* Use 0x8000... as special unknown offset.  */\n-#define UNKNOWN_OFFSET ((HOST_WIDE_INT)-1 << (HOST_BITS_PER_WIDE_INT-1))\n+#define UNKNOWN_OFFSET HOST_WIDE_INT_MIN\n \n typedef struct constraint_expr ce_s;\n static void get_constraint_for_1 (tree, vec<ce_s> *, bool, bool);"}, {"sha": "e4eb60ae04295c6f58fe0bd7ccfb24d4a2615e2e", "filename": "gcc/tree-stdarg.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2/gcc%2Ftree-stdarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2/gcc%2Ftree-stdarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-stdarg.c?ref=0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2", "patch": "@@ -105,7 +105,7 @@ reachable_at_most_once (basic_block va_arg_bb, basic_block va_start_bb)\n \n \n /* For statement COUNTER = RHS, if RHS is COUNTER + constant,\n-   return constant, otherwise return (unsigned HOST_WIDE_INT) -1.\n+   return constant, otherwise return HOST_WIDE_INT_M1U.\n    GPR_P is true if this is GPR counter.  */\n \n static unsigned HOST_WIDE_INT\n@@ -149,7 +149,7 @@ va_list_counter_bump (struct stdarg_info *si, tree counter, tree rhs,\n       stmt = SSA_NAME_DEF_STMT (lhs);\n \n       if (!is_gimple_assign (stmt) || gimple_assign_lhs (stmt) != lhs)\n-\treturn (unsigned HOST_WIDE_INT) -1;\n+\treturn HOST_WIDE_INT_M1U;\n \n       rhs_code = gimple_assign_rhs_code (stmt);\n       rhs1 = gimple_assign_rhs1 (stmt);\n@@ -182,21 +182,21 @@ va_list_counter_bump (struct stdarg_info *si, tree counter, tree rhs,\n \t}\n \n       if (get_gimple_rhs_class (rhs_code) != GIMPLE_SINGLE_RHS)\n-\treturn (unsigned HOST_WIDE_INT) -1;\n+\treturn HOST_WIDE_INT_M1U;\n \n       rhs = gimple_assign_rhs1 (stmt);\n       if (TREE_CODE (counter) != TREE_CODE (rhs))\n-\treturn (unsigned HOST_WIDE_INT) -1;\n+\treturn HOST_WIDE_INT_M1U;\n \n       if (TREE_CODE (counter) == COMPONENT_REF)\n \t{\n \t  if (get_base_address (counter) != get_base_address (rhs)\n \t      || TREE_CODE (TREE_OPERAND (rhs, 1)) != FIELD_DECL\n \t      || TREE_OPERAND (counter, 1) != TREE_OPERAND (rhs, 1))\n-\t    return (unsigned HOST_WIDE_INT) -1;\n+\t    return HOST_WIDE_INT_M1U;\n \t}\n       else if (counter != rhs)\n-\treturn (unsigned HOST_WIDE_INT) -1;\n+\treturn HOST_WIDE_INT_M1U;\n \n       lhs = NULL;\n     }\n@@ -401,7 +401,7 @@ va_list_ptr_read (struct stdarg_info *si, tree ap, tree tem)\n   if (! si->compute_sizes)\n     return false;\n \n-  if (va_list_counter_bump (si, ap, tem, true) == (unsigned HOST_WIDE_INT) -1)\n+  if (va_list_counter_bump (si, ap, tem, true) == HOST_WIDE_INT_M1U)\n     return false;\n \n   /* Note the temporary, as we need to track whether it doesn't escape\n@@ -504,7 +504,7 @@ check_va_list_escapes (struct stdarg_info *si, tree lhs, tree rhs)\n     }\n \n   if (va_list_counter_bump (si, si->va_start_ap, lhs, true)\n-      == (unsigned HOST_WIDE_INT) -1)\n+      == HOST_WIDE_INT_M1U)\n     {\n       si->va_list_escapes = true;\n       return;"}, {"sha": "8f6ccde258417d5bb92ad21269dbaa59a3a0d9c6", "filename": "gcc/tree.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2", "patch": "@@ -2051,12 +2051,12 @@ integer_pow2p (const_tree expr)\n   if (prec == HOST_BITS_PER_DOUBLE_INT)\n     ;\n   else if (prec > HOST_BITS_PER_WIDE_INT)\n-    high &= ~((HOST_WIDE_INT) (-1) << (prec - HOST_BITS_PER_WIDE_INT));\n+    high &= ~(HOST_WIDE_INT_M1U << (prec - HOST_BITS_PER_WIDE_INT));\n   else\n     {\n       high = 0;\n       if (prec < HOST_BITS_PER_WIDE_INT)\n-\tlow &= ~((HOST_WIDE_INT) (-1) << prec);\n+\tlow &= ~(HOST_WIDE_INT_M1U << prec);\n     }\n \n   if (high == 0 && low == 0)\n@@ -2115,12 +2115,12 @@ tree_log2 (const_tree expr)\n   if (prec == HOST_BITS_PER_DOUBLE_INT)\n     ;\n   else if (prec > HOST_BITS_PER_WIDE_INT)\n-    high &= ~((HOST_WIDE_INT) (-1) << (prec - HOST_BITS_PER_WIDE_INT));\n+    high &= ~(HOST_WIDE_INT_M1U << (prec - HOST_BITS_PER_WIDE_INT));\n   else\n     {\n       high = 0;\n       if (prec < HOST_BITS_PER_WIDE_INT)\n-\tlow &= ~((HOST_WIDE_INT) (-1) << prec);\n+\tlow &= ~(HOST_WIDE_INT_M1U << prec);\n     }\n \n   return (high != 0 ? HOST_BITS_PER_WIDE_INT + exact_log2 (high)\n@@ -2152,12 +2152,12 @@ tree_floor_log2 (const_tree expr)\n   if (prec == HOST_BITS_PER_DOUBLE_INT || prec == 0)\n     ;\n   else if (prec > HOST_BITS_PER_WIDE_INT)\n-    high &= ~((HOST_WIDE_INT) (-1) << (prec - HOST_BITS_PER_WIDE_INT));\n+    high &= ~(HOST_WIDE_INT_M1U << (prec - HOST_BITS_PER_WIDE_INT));\n   else\n     {\n       high = 0;\n       if (prec < HOST_BITS_PER_WIDE_INT)\n-\tlow &= ~((HOST_WIDE_INT) (-1) << prec);\n+\tlow &= ~(HOST_WIDE_INT_M1U << prec);\n     }\n \n   return (high != 0 ? HOST_BITS_PER_WIDE_INT + floor_log2 (high)"}]}