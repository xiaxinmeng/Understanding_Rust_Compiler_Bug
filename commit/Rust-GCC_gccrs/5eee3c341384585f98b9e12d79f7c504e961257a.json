{"sha": "5eee3c341384585f98b9e12d79f7c504e961257a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVlZTNjMzQxMzg0NTg1Zjk4YjllMTJkNzlmN2M1MDRlOTYxMjU3YQ==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2015-08-26T12:58:52Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2015-08-26T12:58:52Z"}, "message": "[AArch64][TLSLE][1/3] Add the option \"-mtls-size\"\n\n2015-08-26  Jiong Wang  <jiong.wang@arm.com>\n\ngcc/\n  * config/aarch64/aarch64.opt (mtls-size): New entry.\n  * config/aarch64/aarch64.c (initialize_aarch64_tls_size): New function.\n  (aarch64_override_options_internal): Call initialize_aarch64_tls_size.\n  * doc/invoke.texi (AArch64 Options): Document -mtls-size.\n\nFrom-SVN: r227212", "tree": {"sha": "876537c0141b005e0ba2dbd82afd31b3b5e3759f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/876537c0141b005e0ba2dbd82afd31b3b5e3759f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5eee3c341384585f98b9e12d79f7c504e961257a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eee3c341384585f98b9e12d79f7c504e961257a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5eee3c341384585f98b9e12d79f7c504e961257a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eee3c341384585f98b9e12d79f7c504e961257a/comments", "author": null, "committer": null, "parents": [{"sha": "5e2d7d0d833d0ca558ccda8701dcab29a190d773", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e2d7d0d833d0ca558ccda8701dcab29a190d773", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e2d7d0d833d0ca558ccda8701dcab29a190d773"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "609646b8f2374a726b5e172ecb6d5e7e02fb322e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eee3c341384585f98b9e12d79f7c504e961257a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eee3c341384585f98b9e12d79f7c504e961257a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5eee3c341384585f98b9e12d79f7c504e961257a", "patch": "@@ -1,3 +1,10 @@\n+2015-08-26  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64.opt (mtls-size): New entry.\n+\t* config/aarch64/aarch64.c (initialize_aarch64_tls_size): New function.\n+\t(aarch64_override_options_internal): Call initialize_aarch64_tls_size.\n+\t* doc/invoke.texi (AArch64 Options): Document -mtls-size.\n+\n 2015-08-26  Matthew Wahab  <matthew.wahab@arm.com>\n \n \t* gcc/config/arm/arm-cores.def: Add FL_FOR_ARCH flag for each"}, {"sha": "1df1e8c25df233db85d5ebeb48812ca44cf42f32", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eee3c341384585f98b9e12d79f7c504e961257a/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eee3c341384585f98b9e12d79f7c504e961257a/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=5eee3c341384585f98b9e12d79f7c504e961257a", "patch": "@@ -7492,6 +7492,40 @@ aarch64_parse_one_override_token (const char* token,\n   return;\n }\n \n+/* A checking mechanism for the implementation of the tls size.  */\n+\n+static void\n+initialize_aarch64_tls_size (struct gcc_options *opts)\n+{\n+  if (aarch64_tls_size == 0)\n+    aarch64_tls_size = 24;\n+\n+  switch (opts->x_aarch64_cmodel_var)\n+    {\n+    case AARCH64_CMODEL_TINY:\n+      /* Both the default and maximum TLS size allowed under tiny is 1M which\n+\t needs two instructions to address, so we clamp the size to 24.  */\n+      if (aarch64_tls_size > 24)\n+\taarch64_tls_size = 24;\n+      break;\n+    case AARCH64_CMODEL_SMALL:\n+      /* The maximum TLS size allowed under small is 4G.  */\n+      if (aarch64_tls_size > 32)\n+\taarch64_tls_size = 32;\n+      break;\n+    case AARCH64_CMODEL_LARGE:\n+      /* The maximum TLS size allowed under large is 16E.\n+\t FIXME: 16E should be 64bit, we only support 48bit offset now.  */\n+      if (aarch64_tls_size > 48)\n+\taarch64_tls_size = 48;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  return;\n+}\n+\n /* Parse STRING looking for options in the format:\n      string\t:: option:string\n      option\t:: name=substring\n@@ -7584,6 +7618,7 @@ aarch64_override_options_internal (struct gcc_options *opts)\n     }\n \n   initialize_aarch64_code_model (opts);\n+  initialize_aarch64_tls_size (opts);\n \n   aarch64_override_options_after_change_1 (opts);\n }"}, {"sha": "8642bdb74f33f7aaa6a1025530384a53d7b9f461", "filename": "gcc/config/aarch64/aarch64.opt", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eee3c341384585f98b9e12d79f7c504e961257a/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eee3c341384585f98b9e12d79f7c504e961257a/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.opt?ref=5eee3c341384585f98b9e12d79f7c504e961257a", "patch": "@@ -96,6 +96,25 @@ mtls-dialect=\n Target RejectNegative Joined Enum(tls_type) Var(aarch64_tls_dialect) Init(TLS_DESCRIPTORS) Save\n Specify TLS dialect\n \n+mtls-size=\n+Target RejectNegative Joined Var(aarch64_tls_size) Enum(aarch64_tls_size)\n+Specifies bit size of immediate TLS offsets.  Valid values are 12, 24, 32, 48.\n+\n+Enum\n+Name(aarch64_tls_size) Type(int)\n+\n+EnumValue\n+Enum(aarch64_tls_size) String(12) Value(12)\n+\n+EnumValue\n+Enum(aarch64_tls_size) String(24) Value(24)\n+\n+EnumValue\n+Enum(aarch64_tls_size) String(32) Value(32)\n+\n+EnumValue\n+Enum(aarch64_tls_size) String(48) Value(48)\n+\n march=\n Target RejectNegative ToLower Joined Var(aarch64_arch_string)\n -march=ARCH\tUse features of architecture ARCH"}, {"sha": "f990befd55762637e0610df192ca3ec701edfa92", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eee3c341384585f98b9e12d79f7c504e961257a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eee3c341384585f98b9e12d79f7c504e961257a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=5eee3c341384585f98b9e12d79f7c504e961257a", "patch": "@@ -514,6 +514,7 @@ Objective-C and Objective-C++ Dialects}.\n -mstrict-align @gol\n -momit-leaf-frame-pointer  -mno-omit-leaf-frame-pointer @gol\n -mtls-dialect=desc  -mtls-dialect=traditional @gol\n+-mtls-size=@var{size} @gol\n -mfix-cortex-a53-835769  -mno-fix-cortex-a53-835769 @gol\n -mfix-cortex-a53-843419  -mno-fix-cortex-a53-843419 @gol\n -march=@var{name}  -mcpu=@var{name}  -mtune=@var{name}}\n@@ -12409,6 +12410,11 @@ of TLS variables.  This is the default.\n Use traditional TLS as the thread-local storage mechanism for dynamic accesses\n of TLS variables.\n \n+@item -mtls-size=@var{size}\n+@opindex mtls-size\n+Specify bit size of immediate TLS offsets.  Valid values are 12, 24, 32, 48.\n+This option depends on binutils higher than 2.25.\n+\n @item -mfix-cortex-a53-835769\n @itemx -mno-fix-cortex-a53-835769\n @opindex mfix-cortex-a53-835769"}]}