{"sha": "5b1265cc8651f7395ee2009ccd610eadd8fdedf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWIxMjY1Y2M4NjUxZjczOTVlZTIwMDljY2Q2MTBlYWRkOGZkZWRmNw==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-09-29T12:53:24Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-09-29T12:53:24Z"}, "message": "[multiple changes]\n\n2017-09-29  Justin Squirek  <squirek@adacore.com>\n\n\t* sem_ch8.adb (Note_Redundant_Use): Add guard to protect against false\n\tredundant warnings.\n\n2017-09-29  Yannick Moy  <moy@adacore.com>\n\n\t* sinput-c.adb: Remove unused with-clause on Ada.Unchecked_Conversion.\n\n2017-09-29  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* doc/gnat_rm/representation_clauses_and_pragmas.rst: Minor rewording.\n\t* doc/gnat_rm/implementation_defined_pragmas.rst (Optimize_Alignment):\n\tDocument the effect of pragma Optimize_Alignment (Space) on non-packed\n\trecord types.\n\t* gnat_rm.texi: Regenerate.\n\nFrom-SVN: r253284", "tree": {"sha": "fb72d81fbf379d5d9c327cfb9b48ec4427952477", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb72d81fbf379d5d9c327cfb9b48ec4427952477"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b1265cc8651f7395ee2009ccd610eadd8fdedf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b1265cc8651f7395ee2009ccd610eadd8fdedf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b1265cc8651f7395ee2009ccd610eadd8fdedf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b1265cc8651f7395ee2009ccd610eadd8fdedf7/comments", "author": null, "committer": null, "parents": [{"sha": "5e865972a403481d8407c757e51681ffe4b1ddf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e865972a403481d8407c757e51681ffe4b1ddf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e865972a403481d8407c757e51681ffe4b1ddf3"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "582dcbbc845865c2f2ab22a634ec0e4448125383", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b1265cc8651f7395ee2009ccd610eadd8fdedf7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b1265cc8651f7395ee2009ccd610eadd8fdedf7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5b1265cc8651f7395ee2009ccd610eadd8fdedf7", "patch": "@@ -1,3 +1,20 @@\n+2017-09-29  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_ch8.adb (Note_Redundant_Use): Add guard to protect against false\n+\tredundant warnings.\n+\n+2017-09-29  Yannick Moy  <moy@adacore.com>\n+\n+\t* sinput-c.adb: Remove unused with-clause on Ada.Unchecked_Conversion.\n+\n+2017-09-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* doc/gnat_rm/representation_clauses_and_pragmas.rst: Minor rewording.\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst (Optimize_Alignment):\n+\tDocument the effect of pragma Optimize_Alignment (Space) on non-packed\n+\trecord types.\n+\t* gnat_rm.texi: Regenerate.\n+\n 2017-09-25  Justin Squirek  <squirek@adacore.com>\n \n \t* aspects.adb, bindgen.adb, clean.adb, erroutc.adb, exp_ch13.adb,"}, {"sha": "1281758ac16b044b1d45061384bb2a3e0484566b", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_pragmas.rst", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b1265cc8651f7395ee2009ccd610eadd8fdedf7/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b1265cc8651f7395ee2009ccd610eadd8fdedf7/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst?ref=5b1265cc8651f7395ee2009ccd610eadd8fdedf7", "patch": "@@ -4120,6 +4120,9 @@ Specifying SPACE also disables alignment promotions for standalone objects,\n which occur when the compiler increases the alignment of a specific object\n without changing the alignment of its type.\n \n+Specifying SPACE also disables component reordering in unpacked record types,\n+which can result in larger sizes in order to meet alignment requirements.\n+\n Specifying TIME causes larger default alignments to be chosen in the case of\n small types with sizes that are not a power of 2. For example, consider:\n "}, {"sha": "5ad8e03748460cd0690027605aaaf3ea5c5d37a6", "filename": "gcc/ada/doc/gnat_rm/representation_clauses_and_pragmas.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b1265cc8651f7395ee2009ccd610eadd8fdedf7/gcc%2Fada%2Fdoc%2Fgnat_rm%2Frepresentation_clauses_and_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b1265cc8651f7395ee2009ccd610eadd8fdedf7/gcc%2Fada%2Fdoc%2Fgnat_rm%2Frepresentation_clauses_and_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Frepresentation_clauses_and_pragmas.rst?ref=5b1265cc8651f7395ee2009ccd610eadd8fdedf7", "patch": "@@ -64,7 +64,7 @@ values are as follows:\n \n * *Records*.\n \n-  For the normal non-packed case, the alignment of a record is equal to\n+  For the normal unpacked case, the alignment of a record is equal to\n   the maximum alignment of any of its components.  For tagged records, this\n   includes the implicit access type used for the tag.  If a pragma ``Pack``\n   is used and all components are packable (see separate section on pragma"}, {"sha": "8ed58c4fc7fa8016d4c76607fa805cc65fddc1e1", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b1265cc8651f7395ee2009ccd610eadd8fdedf7/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b1265cc8651f7395ee2009ccd610eadd8fdedf7/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=5b1265cc8651f7395ee2009ccd610eadd8fdedf7", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT Reference Manual , Sep 13, 2017\n+GNAT Reference Manual , Sep 29, 2017\n \n AdaCore\n \n@@ -5547,6 +5547,9 @@ Specifying SPACE also disables alignment promotions for standalone objects,\n which occur when the compiler increases the alignment of a specific object\n without changing the alignment of its type.\n \n+Specifying SPACE also disables component reordering in unpacked record types,\n+which can result in larger sizes in order to meet alignment requirements.\n+\n Specifying TIME causes larger default alignments to be chosen in the case of\n small types with sizes that are not a power of 2. For example, consider:\n \n@@ -18099,7 +18102,7 @@ will be as described for elementary types, e.g. a packed array of length\n @item \n @emph{Records}.\n \n-For the normal non-packed case, the alignment of a record is equal to\n+For the normal unpacked case, the alignment of a record is equal to\n the maximum alignment of any of its components.  For tagged records, this\n includes the implicit access type used for the tag.  If a pragma @code{Pack}\n is used and all components are packable (see separate section on pragma"}, {"sha": "3eec5717f680c004312f834286a66160d87f6911", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b1265cc8651f7395ee2009ccd610eadd8fdedf7/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b1265cc8651f7395ee2009ccd610eadd8fdedf7/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=5b1265cc8651f7395ee2009ccd610eadd8fdedf7", "patch": "@@ -9322,7 +9322,7 @@ package body Sem_Ch8 is\n \n          end if;\n \n-         if Present (Redundant) then\n+         if Present (Redundant) and then Parent (Redundant) /= Prev_Use then\n             --  Make sure we are looking at most-descendant use_package_clause\n             --  by traversing the chain with Find_Most_Prev and then verifying\n             --  there is no scope manipulation via Most_Descendant_Use_Clause."}, {"sha": "645f0da647ba911a973b3b12c8c39975a3510671", "filename": "gcc/ada/sinput-c.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b1265cc8651f7395ee2009ccd610eadd8fdedf7/gcc%2Fada%2Fsinput-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b1265cc8651f7395ee2009ccd610eadd8fdedf7/gcc%2Fada%2Fsinput-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput-c.adb?ref=5b1265cc8651f7395ee2009ccd610eadd8fdedf7", "patch": "@@ -28,8 +28,6 @@ with Opt;    use Opt;\n with Output; use Output;\n with System; use System;\n \n-with Ada.Unchecked_Conversion;\n-\n pragma Warnings (Off);\n --  This package is used also by gnatcoll\n with System.OS_Lib; use System.OS_Lib;"}]}