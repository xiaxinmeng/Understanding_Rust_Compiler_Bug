{"sha": "60efb1fee9b8985829abf4ed9958691783c2604e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBlZmIxZmVlOWI4OTg1ODI5YWJmNGVkOTk1ODY5MTc4M2MyNjA0ZQ==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-09T06:49:16Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-10T04:29:28Z"}, "message": "Remove copysign post_reload splitter for scalar modes.\n\nIt can generate better code just like avx512dq-abs-copysign-1.c\nshows.\n\ngcc/ChangeLog:\n\n\t* config/i386/i386-expand.c (ix86_expand_copysign): Expand\n\tright into ANDNOT + AND + IOR, using paradoxical subregs.\n\t(ix86_split_copysign_const): Remove.\n\t(ix86_split_copysign_var): Ditto.\n\t* config/i386/i386-protos.h (ix86_split_copysign_const): Dotto.\n\t(ix86_split_copysign_var): Ditto.\n\t* config/i386/i386.md (@copysign<mode>3_const): Ditto.\n\t(@copysign<mode>3_var): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512dq-abs-copysign-1.c: Adjust testcase.\n\t* gcc.target/i386/avx512vl-abs-copysign-1.c: Adjust testcase.", "tree": {"sha": "06253a9d8baf103822cb7adf13fbf5c97a01461f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06253a9d8baf103822cb7adf13fbf5c97a01461f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60efb1fee9b8985829abf4ed9958691783c2604e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60efb1fee9b8985829abf4ed9958691783c2604e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60efb1fee9b8985829abf4ed9958691783c2604e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60efb1fee9b8985829abf4ed9958691783c2604e/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f84e2f0b7b022123232eb30d579984a8c1880782", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f84e2f0b7b022123232eb30d579984a8c1880782", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f84e2f0b7b022123232eb30d579984a8c1880782"}], "stats": {"total": 206, "additions": 30, "deletions": 176}, "files": [{"sha": "0c1aec585fed648465ce1439efd038cebcdece5d", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 26, "deletions": 126, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60efb1fee9b8985829abf4ed9958691783c2604e/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60efb1fee9b8985829abf4ed9958691783c2604e/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=60efb1fee9b8985829abf4ed9958691783c2604e", "patch": "@@ -2115,13 +2115,9 @@ void\n ix86_expand_copysign (rtx operands[])\n {\n   machine_mode mode, vmode;\n-  rtx dest, op0, op1, mask;\n+  rtx dest, op0, op1, mask, op2, op3;\n \n-  dest = operands[0];\n-  op0 = operands[1];\n-  op1 = operands[2];\n-\n-  mode = GET_MODE (dest);\n+  mode = GET_MODE (operands[0]);\n \n   if (mode == SFmode)\n     vmode = V4SFmode;\n@@ -2132,136 +2128,40 @@ ix86_expand_copysign (rtx operands[])\n   else\n     gcc_unreachable ();\n \n-  mask = ix86_build_signbit_mask (vmode, 0, 0);\n-\n-  if (CONST_DOUBLE_P (op0))\n+  if (rtx_equal_p (operands[1], operands[2]))\n     {\n-      if (real_isneg (CONST_DOUBLE_REAL_VALUE (op0)))\n-\top0 = simplify_unary_operation (ABS, mode, op0, mode);\n-\n-      if (mode == SFmode || mode == DFmode)\n-\t{\n-\t  if (op0 == CONST0_RTX (mode))\n-\t    op0 = CONST0_RTX (vmode);\n-\t  else\n-\t    {\n-\t      rtx v = ix86_build_const_vector (vmode, false, op0);\n-\n-\t      op0 = force_reg (vmode, v);\n-\t    }\n-\t}\n-      else if (op0 != CONST0_RTX (mode))\n-\top0 = force_reg (mode, op0);\n-\n-      emit_insn (gen_copysign3_const (mode, dest, op0, op1, mask));\n-    }\n-  else\n-    {\n-      rtx nmask = ix86_build_signbit_mask (vmode, 0, 1);\n-\n-      emit_insn (gen_copysign3_var\n-\t\t (mode, dest, NULL_RTX, op0, op1, nmask, mask));\n-    }\n-}\n-\n-/* Deconstruct a copysign operation into bit masks.  Operand 0 is known to\n-   be a constant, and so has already been expanded into a vector constant.  */\n-\n-void\n-ix86_split_copysign_const (rtx operands[])\n-{\n-  machine_mode mode, vmode;\n-  rtx dest, op0, mask, x;\n-\n-  dest = operands[0];\n-  op0 = operands[1];\n-  mask = operands[3];\n-\n-  mode = GET_MODE (dest);\n-  vmode = GET_MODE (mask);\n-\n-  dest = lowpart_subreg (vmode, dest, mode);\n-  x = gen_rtx_AND (vmode, dest, mask);\n-  emit_insn (gen_rtx_SET (dest, x));\n-\n-  if (op0 != CONST0_RTX (vmode))\n-    {\n-      x = gen_rtx_IOR (vmode, dest, op0);\n-      emit_insn (gen_rtx_SET (dest, x));\n-    }\n-}\n-\n-/* Deconstruct a copysign operation into bit masks.  Operand 0 is variable,\n-   so we have to do two masks.  */\n-\n-void\n-ix86_split_copysign_var (rtx operands[])\n-{\n-  machine_mode mode, vmode;\n-  rtx dest, scratch, op0, op1, mask, nmask, x;\n-\n-  dest = operands[0];\n-  scratch = operands[1];\n-  op0 = operands[2];\n-  op1 = operands[3];\n-  nmask = operands[4];\n-  mask = operands[5];\n-\n-  mode = GET_MODE (dest);\n-  vmode = GET_MODE (mask);\n-\n-  if (rtx_equal_p (op0, op1))\n-    {\n-      /* Shouldn't happen often (it's useless, obviously), but when it does\n-\t we'd generate incorrect code if we continue below.  */\n-      emit_move_insn (dest, op0);\n+      emit_move_insn (operands[0], operands[1]);\n       return;\n     }\n \n-  if (REG_P (mask) && REGNO (dest) == REGNO (mask))\t/* alternative 0 */\n-    {\n-      gcc_assert (REGNO (op1) == REGNO (scratch));\n-\n-      x = gen_rtx_AND (vmode, scratch, mask);\n-      emit_insn (gen_rtx_SET (scratch, x));\n+  dest = lowpart_subreg (vmode, operands[0], mode);\n+  op1 = lowpart_subreg (vmode, operands[2], mode);\n+  mask = ix86_build_signbit_mask (vmode, 0, 0);\n \n-      dest = mask;\n-      op0 = lowpart_subreg (vmode, op0, mode);\n-      x = gen_rtx_NOT (vmode, dest);\n-      x = gen_rtx_AND (vmode, x, op0);\n-      emit_insn (gen_rtx_SET (dest, x));\n-    }\n-  else\n+  if (CONST_DOUBLE_P (operands[1]))\n     {\n-      if (REGNO (op1) == REGNO (scratch))\t\t/* alternative 1,3 */\n-\t{\n-\t  x = gen_rtx_AND (vmode, scratch, mask);\n-\t}\n-      else\t\t\t\t\t\t/* alternative 2,4 */\n+      op0 = simplify_unary_operation (ABS, mode, operands[1], mode);\n+      /* Optimize for 0, simplify b = copy_signf (0.0f, a) to b = mask & a.  */\n+      if (op0 == CONST0_RTX (mode))\n \t{\n-          gcc_assert (REGNO (mask) == REGNO (scratch));\n-          op1 = lowpart_subreg (vmode, op1, mode);\n-\t  x = gen_rtx_AND (vmode, scratch, op1);\n+\t  emit_move_insn (dest, gen_rtx_AND (vmode, mask, op1));\n+\t  return;\n \t}\n-      emit_insn (gen_rtx_SET (scratch, x));\n \n-      if (REGNO (op0) == REGNO (dest))\t\t\t/* alternative 1,2 */\n-\t{\n-\t  dest = lowpart_subreg (vmode, op0, mode);\n-\t  x = gen_rtx_AND (vmode, dest, nmask);\n-\t}\n-      else\t\t\t\t\t\t/* alternative 3,4 */\n-\t{\n-          gcc_assert (REGNO (nmask) == REGNO (dest));\n-\t  dest = nmask;\n-\t  op0 = lowpart_subreg (vmode, op0, mode);\n-\t  x = gen_rtx_AND (vmode, dest, op0);\n-\t}\n-      emit_insn (gen_rtx_SET (dest, x));\n+      if (GET_MODE_SIZE (mode) < 16)\n+\top0 = ix86_build_const_vector (vmode, false, op0);\n+      op0 = force_reg (vmode, op0);\n     }\n-\n-  x = gen_rtx_IOR (vmode, dest, scratch);\n-  emit_insn (gen_rtx_SET (dest, x));\n+  else\n+    op0 = lowpart_subreg (vmode, operands[1], mode);\n+\n+  op2 = gen_reg_rtx (vmode);\n+  op3 = gen_reg_rtx (vmode);\n+  emit_move_insn (op2, gen_rtx_AND (vmode,\n+\t\t\t\t    gen_rtx_NOT (vmode, mask),\n+\t\t\t\t    op0));\n+  emit_move_insn (op3, gen_rtx_AND (vmode, mask, op1));\n+  emit_move_insn (dest, gen_rtx_IOR (vmode, op2, op3));\n }\n \n /* Expand an xorsign operation.  */"}, {"sha": "dcae34b915e826e7a1adaf2a8e9e618c0cf19269", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60efb1fee9b8985829abf4ed9958691783c2604e/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60efb1fee9b8985829abf4ed9958691783c2604e/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=60efb1fee9b8985829abf4ed9958691783c2604e", "patch": "@@ -135,8 +135,6 @@ extern void ix86_expand_fp_absneg_operator (enum rtx_code, machine_mode,\n extern void ix86_split_fp_absneg_operator (enum rtx_code, machine_mode,\n \t\t\t\t\t   rtx[]);\n extern void ix86_expand_copysign (rtx []);\n-extern void ix86_split_copysign_const (rtx []);\n-extern void ix86_split_copysign_var (rtx []);\n extern void ix86_expand_xorsign (rtx []);\n extern bool ix86_unary_operator_ok (enum rtx_code, machine_mode, rtx[]);\n extern bool ix86_match_ccmode (rtx, machine_mode);"}, {"sha": "ba0058dad81ed13beadaf2f3a601a5937eace3ed", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60efb1fee9b8985829abf4ed9958691783c2604e/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60efb1fee9b8985829abf4ed9958691783c2604e/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=60efb1fee9b8985829abf4ed9958691783c2604e", "patch": "@@ -10861,50 +10861,6 @@\n    || (TARGET_SSE && (<MODE>mode == TFmode))\"\n   \"ix86_expand_copysign (operands); DONE;\")\n \n-(define_insn_and_split \"@copysign<mode>3_const\"\n-  [(set (match_operand:SSEMODEF 0 \"register_operand\" \"=Yv\")\n-\t(unspec:SSEMODEF\n-\t  [(match_operand:<ssevecmodef> 1 \"nonimm_or_0_operand\" \"YvmC\")\n-\t   (match_operand:SSEMODEF 2 \"register_operand\" \"0\")\n-\t   (match_operand:<ssevecmodef> 3 \"nonimmediate_operand\" \"Yvm\")]\n-\t  UNSPEC_COPYSIGN))]\n-  \"(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n-   || (TARGET_SSE && (<MODE>mode == TFmode))\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(const_int 0)]\n-  \"ix86_split_copysign_const (operands); DONE;\")\n-\n-(define_insn \"@copysign<mode>3_var\"\n-  [(set (match_operand:SSEMODEF 0 \"register_operand\" \"=Yv,Yv,Yv,Yv,Yv\")\n-\t(unspec:SSEMODEF\n-\t  [(match_operand:SSEMODEF 2 \"register_operand\"\t\"Yv,0,0,Yv,Yv\")\n-\t   (match_operand:SSEMODEF 3 \"register_operand\"\t\"1,1,Yv,1,Yv\")\n-\t   (match_operand:<ssevecmodef> 4\n-\t     \"nonimmediate_operand\" \"X,Yvm,Yvm,0,0\")\n-\t   (match_operand:<ssevecmodef> 5\n-\t     \"nonimmediate_operand\" \"0,Yvm,1,Yvm,1\")]\n-\t  UNSPEC_COPYSIGN))\n-   (clobber (match_scratch:<ssevecmodef> 1 \"=Yv,Yv,Yv,Yv,Yv\"))]\n-  \"(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n-   || (TARGET_SSE && (<MODE>mode == TFmode))\"\n-  \"#\")\n-\n-(define_split\n-  [(set (match_operand:SSEMODEF 0 \"register_operand\")\n-\t(unspec:SSEMODEF\n-\t  [(match_operand:SSEMODEF 2 \"register_operand\")\n-\t   (match_operand:SSEMODEF 3 \"register_operand\")\n-\t   (match_operand:<ssevecmodef> 4)\n-\t   (match_operand:<ssevecmodef> 5)]\n-\t  UNSPEC_COPYSIGN))\n-   (clobber (match_scratch:<ssevecmodef> 1))]\n-  \"((SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n-    || (TARGET_SSE && (<MODE>mode == TFmode)))\n-   && reload_completed\"\n-  [(const_int 0)]\n-  \"ix86_split_copysign_var (operands); DONE;\")\n-\n (define_expand \"xorsign<mode>3\"\n   [(match_operand:MODEF 0 \"register_operand\")\n    (match_operand:MODEF 1 \"register_operand\")"}, {"sha": "0107df7741aec90dfaec850b25d1a9d0d60bfb28", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-abs-copysign-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60efb1fee9b8985829abf4ed9958691783c2604e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-abs-copysign-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60efb1fee9b8985829abf4ed9958691783c2604e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-abs-copysign-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-abs-copysign-1.c?ref=60efb1fee9b8985829abf4ed9958691783c2604e", "patch": "@@ -64,8 +64,8 @@ f6 (double x)\n }\n \n /* { dg-final { scan-assembler \"vandps\\[^\\n\\r\\]*xmm16\" } } */\n-/* { dg-final { scan-assembler \"vorps\\[^\\n\\r\\]*xmm16\" } } */\n+/* { dg-final { scan-assembler \"vpternlogd\\[^\\n\\r\\]*xmm16\" } } */\n /* { dg-final { scan-assembler \"vxorps\\[^\\n\\r\\]*xmm16\" } } */\n /* { dg-final { scan-assembler \"vandpd\\[^\\n\\r\\]*xmm18\" } } */\n-/* { dg-final { scan-assembler \"vorpd\\[^\\n\\r\\]*xmm18\" } } */\n+/* { dg-final { scan-assembler \"vpternlogq\\[^\\n\\r\\]*xmm18\" } } */\n /* { dg-final { scan-assembler \"vxorpd\\[^\\n\\r\\]*xmm18\" } } */"}, {"sha": "b27335b9d99e280362b004f809d51b055e0f9715", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-abs-copysign-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60efb1fee9b8985829abf4ed9958691783c2604e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-abs-copysign-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60efb1fee9b8985829abf4ed9958691783c2604e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-abs-copysign-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-abs-copysign-1.c?ref=60efb1fee9b8985829abf4ed9958691783c2604e", "patch": "@@ -64,8 +64,8 @@ f6 (double x)\n }\n \n /* { dg-final { scan-assembler \"vpandd\\[^\\n\\r\\]*xmm16\" } } */\n-/* { dg-final { scan-assembler \"vpord\\[^\\n\\r\\]*xmm16\" } } */\n+/* { dg-final { scan-assembler \"vpternlogd\\[^\\n\\r\\]*xmm16\" } } */\n /* { dg-final { scan-assembler \"vpxord\\[^\\n\\r\\]*xmm16\" } } */\n /* { dg-final { scan-assembler \"vpandq\\[^\\n\\r\\]*xmm18\" } } */\n-/* { dg-final { scan-assembler \"vporq\\[^\\n\\r\\]*xmm18\" } } */\n+/* { dg-final { scan-assembler \"vpternlogq\\[^\\n\\r\\]*xmm18\" } } */\n /* { dg-final { scan-assembler \"vpxorq\\[^\\n\\r\\]*xmm18\" } } */"}]}