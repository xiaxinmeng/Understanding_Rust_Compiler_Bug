{"sha": "236fecbf44a87814987887e5d3f03c4b8bf0c294", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM2ZmVjYmY0NGE4NzgxNDk4Nzg4N2U1ZDNmMDNjNGI4YmYwYzI5NA==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2009-04-29T13:29:08Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-29T13:29:08Z"}, "message": "sem_ch3.adb (Analyze_Object_Declaration): Disable error message associated with dyamically tagged expressions if...\n\n2009-04-29  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch3.adb (Analyze_Object_Declaration): Disable error message\n\tassociated with dyamically tagged expressions if the expression\n\tinitializing a tagged type corresponds with a non default CPP\n\tconstructor.\n\t(OK_For_Limited_Init): CPP constructor calls are OK for initialization\n\tof limited type objects.\n\n\t* sem_ch5.adb (Analyze_Assignment): Improve the error message reported\n\twhen a CPP constructor is called in an assignment. Disable also the\n\terror message associated with dyamically tagged expressions if the\n\texporession initializing a tagged type corresponds with a non default\n\tCPP constructor.\n\n\t* sem_prag.adb (Analyze_Pragma): Remove code disabling the use of\n\tnon-default C++ constructors.\n\n\t* sem_util.ads, sem_util.adb (Is_CPP_Constructor_Call): New subprogram.\n\n\t* exp_tss.ads, exp_tss.adb (Base_Init_Proc): Add support for\n\tnon-default constructors.\n\t(Init_Proc): Add support for non-default constructors.\n\n\t* exp_disp.adb (Set_Default_Constructor): Removed.\n\t(Set_CPP_Constructors): Code based in removed Set_Default_Constructor\n\tbut extending its functionality to handle non-default constructors.\n\n\t* exp_aggr.adb (Build_Record_Aggr_Code): Add support for non-default\n\tconstructors. Minor code cleanup removing unrequired label and goto\n\tstatement.\n\n\t* exp_ch3.adb (Build_Initialization_Call): Add support for non-default\n\tconstructors.\n\t(Build_Init_Statements): Add support for non-default constructors.\n\t(Expand_N_Object_Declaration): Add support for non-default constructors.\n\t(Freeze_Record_Type): Replace call to Set_Default_Constructor by call\n\tto Set_CPP_Constructors.\n\n\t* exp_ch5.adb (Expand_N_Assignment_Statement): Add support for\n\tnon-default constructors.\n\tRequired to handle its use in build-in-place statements.\n\n\t* gnat_rm.texi (CPP_Constructor): Document new extended use of this\n\tpragma for non-default C++ constructors and the new compiler support\n\tthat allows the use of these constructors in record components, limited\n\taggregates, and extended return statements.\n\nFrom-SVN: r146966", "tree": {"sha": "11c0c448c05a05a2157e938de8190ca731911a8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11c0c448c05a05a2157e938de8190ca731911a8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/236fecbf44a87814987887e5d3f03c4b8bf0c294", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/236fecbf44a87814987887e5d3f03c4b8bf0c294", "html_url": "https://github.com/Rust-GCC/gccrs/commit/236fecbf44a87814987887e5d3f03c4b8bf0c294", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/236fecbf44a87814987887e5d3f03c4b8bf0c294/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0ec21a5bb7586e74425f162f1527b508309f3345", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ec21a5bb7586e74425f162f1527b508309f3345", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ec21a5bb7586e74425f162f1527b508309f3345"}], "stats": {"total": 430, "additions": 330, "deletions": 100}, "files": [{"sha": "7b3f1fbb6789be4a52eeae3e45caa5fa8f768670", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236fecbf44a87814987887e5d3f03c4b8bf0c294/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236fecbf44a87814987887e5d3f03c4b8bf0c294/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=236fecbf44a87814987887e5d3f03c4b8bf0c294", "patch": "@@ -1,3 +1,51 @@\n+2009-04-29  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Object_Declaration): Disable error message\n+\tassociated with dyamically tagged expressions if the expression\n+\tinitializing a tagged type corresponds with a non default CPP\n+\tconstructor.\n+\t(OK_For_Limited_Init): CPP constructor calls are OK for initialization\n+\tof limited type objects.\n+\n+\t* sem_ch5.adb (Analyze_Assignment): Improve the error message reported\n+\twhen a CPP constructor is called in an assignment. Disable also the\n+\terror message associated with dyamically tagged expressions if the\n+\texporession initializing a tagged type corresponds with a non default\n+\tCPP constructor.\n+\n+\t* sem_prag.adb (Analyze_Pragma): Remove code disabling the use of\n+\tnon-default C++ constructors.\n+\n+\t* sem_util.ads, sem_util.adb (Is_CPP_Constructor_Call): New subprogram.\n+\n+\t* exp_tss.ads, exp_tss.adb (Base_Init_Proc): Add support for\n+\tnon-default constructors.\n+\t(Init_Proc): Add support for non-default constructors.\n+\n+\t* exp_disp.adb (Set_Default_Constructor): Removed.\n+\t(Set_CPP_Constructors): Code based in removed Set_Default_Constructor\n+\tbut extending its functionality to handle non-default constructors.\n+\n+\t* exp_aggr.adb (Build_Record_Aggr_Code): Add support for non-default\n+\tconstructors. Minor code cleanup removing unrequired label and goto\n+\tstatement.\n+\n+\t* exp_ch3.adb (Build_Initialization_Call): Add support for non-default\n+\tconstructors.\n+\t(Build_Init_Statements): Add support for non-default constructors.\n+\t(Expand_N_Object_Declaration): Add support for non-default constructors.\n+\t(Freeze_Record_Type): Replace call to Set_Default_Constructor by call\n+\tto Set_CPP_Constructors.\n+\n+\t* exp_ch5.adb (Expand_N_Assignment_Statement): Add support for\n+\tnon-default constructors.\n+\tRequired to handle its use in build-in-place statements.\n+\n+\t* gnat_rm.texi (CPP_Constructor): Document new extended use of this\n+\tpragma for non-default C++ constructors and the new compiler support\n+\tthat allows the use of these constructors in record components, limited\n+\taggregates, and extended return statements.\n+\n 2009-04-29  Vincent Celier  <celier@adacore.com>\n \n \t* prj-part.adb (Parse_Single_Project): Do not attempt to find a"}, {"sha": "516905f88732298ce52945b946493da9791e48be", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236fecbf44a87814987887e5d3f03c4b8bf0c294/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236fecbf44a87814987887e5d3f03c4b8bf0c294/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=236fecbf44a87814987887e5d3f03c4b8bf0c294", "patch": "@@ -2775,10 +2775,24 @@ package body Exp_Aggr is\n       while Present (Comp) loop\n          Selector := Entity (First (Choices (Comp)));\n \n+         --  C++ constructors\n+\n+         if Is_CPP_Constructor_Call (Expression (Comp)) then\n+            Append_List_To (L,\n+              Build_Initialization_Call (Loc,\n+                Id_Ref => Make_Selected_Component (Loc,\n+                            Prefix => New_Copy_Tree (Target),\n+                            Selector_Name => New_Occurrence_Of (Selector,\n+                                                                   Loc)),\n+                Typ    => Etype (Selector),\n+                Enclos_Type => Typ,\n+                With_Default_Init => True,\n+                Constructor_Ref => Expression (Comp)));\n+\n          --  Ada 2005 (AI-287): For each default-initialized component generate\n          --  a call to the corresponding IP subprogram if available.\n \n-         if Box_Present (Comp)\n+         elsif Box_Present (Comp)\n            and then Has_Non_Null_Base_Init_Proc (Etype (Selector))\n          then\n             if Ekind (Selector) /= E_Discriminant then\n@@ -2822,12 +2836,9 @@ package body Exp_Aggr is\n                 Enclos_Type => Typ,\n                 With_Default_Init => True));\n \n-            goto Next_Comp;\n-         end if;\n-\n          --  Prepare for component assignment\n \n-         if Ekind (Selector) /= E_Discriminant\n+         elsif Ekind (Selector) /= E_Discriminant\n            or else Nkind (N) = N_Extension_Aggregate\n          then\n             --  All the discriminants have now been assigned\n@@ -3107,8 +3118,6 @@ package body Exp_Aggr is\n             end;\n          end if;\n \n-         <<Next_Comp>>\n-\n          Next (Comp);\n       end loop;\n "}, {"sha": "5ba57dea13439c43512af2230a61fcfe253edc2d", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 62, "deletions": 11, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236fecbf44a87814987887e5d3f03c4b8bf0c294/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236fecbf44a87814987887e5d3f03c4b8bf0c294/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=236fecbf44a87814987887e5d3f03c4b8bf0c294", "patch": "@@ -1368,22 +1368,35 @@ package body Exp_Ch3 is\n       In_Init_Proc      : Boolean := False;\n       Enclos_Type       : Entity_Id := Empty;\n       Discr_Map         : Elist_Id := New_Elmt_List;\n-      With_Default_Init : Boolean := False) return List_Id\n+      With_Default_Init : Boolean := False;\n+      Constructor_Ref   : Node_Id := Empty) return List_Id\n    is\n-      First_Arg      : Node_Id;\n+      Res            : constant List_Id := New_List;\n+      Arg            : Node_Id;\n       Args           : List_Id;\n-      Decls          : List_Id;\n+      Controller_Typ : Entity_Id;\n       Decl           : Node_Id;\n+      Decls          : List_Id;\n       Discr          : Entity_Id;\n-      Arg            : Node_Id;\n-      Proc           : constant Entity_Id := Base_Init_Proc (Typ);\n-      Init_Type      : constant Entity_Id := Etype (First_Formal (Proc));\n-      Full_Init_Type : constant Entity_Id := Underlying_Type (Init_Type);\n-      Res            : constant List_Id   := New_List;\n+      First_Arg      : Node_Id;\n+      Full_Init_Type : Entity_Id;\n       Full_Type      : Entity_Id := Typ;\n-      Controller_Typ : Entity_Id;\n+      Init_Type      : Entity_Id;\n+      Proc           : Entity_Id;\n \n    begin\n+      pragma Assert (Constructor_Ref = Empty\n+        or else Is_CPP_Constructor_Call (Constructor_Ref));\n+\n+      if No (Constructor_Ref) then\n+         Proc := Base_Init_Proc (Typ);\n+      else\n+         Proc := Base_Init_Proc (Typ, Entity (Name (Constructor_Ref)));\n+      end if;\n+\n+      Init_Type      := Etype (First_Formal (Proc));\n+      Full_Init_Type := Underlying_Type (Init_Type);\n+\n       --  Nothing to do if the Init_Proc is null, unless Initialize_Scalars\n       --  is active (in which case we make the call anyway, since in the\n       --  actual compiled client it may be non null).\n@@ -1579,6 +1592,10 @@ package body Exp_Ch3 is\n         and then Chars (Selector_Name (Id_Ref)) = Name_uParent\n       then\n          Append_To (Args, New_Occurrence_Of (Standard_False, Loc));\n+\n+      elsif Present (Constructor_Ref) then\n+         Append_List_To (Args,\n+           New_Copy_List (Parameter_Associations (Constructor_Ref)));\n       end if;\n \n       Append_To (Res,\n@@ -2589,7 +2606,21 @@ package body Exp_Ch3 is\n                --  Case of explicit initialization\n \n                if Present (Expression (Decl)) then\n-                  Stmts := Build_Assignment (Id, Expression (Decl));\n+                  if Is_CPP_Constructor_Call (Expression (Decl)) then\n+                     Stmts :=\n+                       Build_Initialization_Call\n+                         (Loc,\n+                          Make_Selected_Component (Loc,\n+                            Prefix => Make_Identifier (Loc, Name_uInit),\n+                            Selector_Name => New_Occurrence_Of (Id, Loc)),\n+                          Typ,\n+                          In_Init_Proc => True,\n+                          Enclos_Type => Rec_Type,\n+                          Discr_Map => Discr_Map,\n+                          Constructor_Ref => Expression (Decl));\n+                  else\n+                     Stmts := Build_Assignment (Id, Expression (Decl));\n+                  end if;\n \n                --  Case of composite component with its own Init_Proc\n \n@@ -4622,6 +4653,26 @@ package body Exp_Ch3 is\n                              (Access_Disp_Table (Base_Type (Typ)))),\n                           Loc))));\n \n+            elsif Is_Tagged_Type (Typ)\n+              and then Is_CPP_Constructor_Call (Expr)\n+            then\n+               --  The call to the initialization procedure does NOT freeze the\n+               --  object being initialized.\n+\n+               Id_Ref := New_Reference_To (Def_Id, Loc);\n+               Set_Must_Not_Freeze (Id_Ref);\n+               Set_Assignment_OK (Id_Ref);\n+\n+               Insert_Actions_After (Init_After,\n+                 Build_Initialization_Call (Loc, Id_Ref, Typ,\n+                   Constructor_Ref => Expr));\n+\n+               --  We remove here the original call to the constructor\n+               --  to avoid its management in the backend\n+\n+               Set_Expression (N, Empty);\n+               return;\n+\n             --  For discrete types, set the Is_Known_Valid flag if the\n             --  initializing value is known to be valid.\n \n@@ -5629,7 +5680,7 @@ package body Exp_Ch3 is\n \n          if Is_CPP_Class (Def_Id) then\n             Set_All_DT_Position (Def_Id);\n-            Set_Default_Constructor (Def_Id);\n+            Set_CPP_Constructors (Def_Id);\n \n             --  Create the tag entities with a minimum decoration\n "}, {"sha": "6738ae958f9a0951c630735ee923a5de0e9650d1", "filename": "gcc/ada/exp_ch3.ads", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236fecbf44a87814987887e5d3f03c4b8bf0c294/gcc%2Fada%2Fexp_ch3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236fecbf44a87814987887e5d3f03c4b8bf0c294/gcc%2Fada%2Fexp_ch3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.ads?ref=236fecbf44a87814987887e5d3f03c4b8bf0c294", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -67,7 +67,8 @@ package Exp_Ch3 is\n       In_Init_Proc      : Boolean := False;\n       Enclos_Type       : Entity_Id := Empty;\n       Discr_Map         : Elist_Id := New_Elmt_List;\n-      With_Default_Init : Boolean := False) return List_Id;\n+      With_Default_Init : Boolean := False;\n+      Constructor_Ref   : Node_Id := Empty) return List_Id;\n    --  Builds a call to the initialization procedure for the base type of Typ,\n    --  passing it the object denoted by Id_Ref, plus additional parameters as\n    --  appropriate for the type (the _Master, for task types, for example).\n@@ -88,6 +89,9 @@ package Exp_Ch3 is\n    --  Ada 2005 (AI-287): With_Default_Init is used to indicate that the\n    --  initialization call corresponds to a default initialized component\n    --  of an aggregate.\n+   --\n+   --  Constructor_Ref is a call to a constructor subprogram. It is currently\n+   --  used only to support C++ constructors.\n \n    procedure Build_Master_Renaming (N : Node_Id; T : Entity_Id);\n    --  If the designated type of an access type is a task type or contains"}, {"sha": "23dc728f98887e67548475feeb232a129210cd34", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 55, "deletions": 36, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236fecbf44a87814987887e5d3f03c4b8bf0c294/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236fecbf44a87814987887e5d3f03c4b8bf0c294/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=236fecbf44a87814987887e5d3f03c4b8bf0c294", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -6965,57 +6965,76 @@ package body Exp_Disp is\n       end if;\n    end Set_All_DT_Position;\n \n-   -----------------------------\n-   -- Set_Default_Constructor --\n-   -----------------------------\n+   --------------------------\n+   -- Set_CPP_Constructors --\n+   --------------------------\n \n-   procedure Set_Default_Constructor (Typ : Entity_Id) is\n+   procedure Set_CPP_Constructors (Typ : Entity_Id) is\n       Loc   : Source_Ptr;\n       Init  : Entity_Id;\n-      Param : Entity_Id;\n       E     : Entity_Id;\n+      Found : Boolean := False;\n+      P     : Node_Id;\n+      Parms : List_Id;\n \n    begin\n-      --  Look for the default constructor entity. For now only the\n-      --  default constructor has the flag Is_Constructor.\n+      --  Look for the constructor entities\n \n       E := Next_Entity (Typ);\n-      while Present (E)\n-        and then (Ekind (E) /= E_Function or else not Is_Constructor (E))\n-      loop\n+      while Present (E) loop\n+         if Ekind (E) = E_Function\n+           and then Is_Constructor (E)\n+         then\n+            --  Create the init procedure\n+\n+            Found := True;\n+            Loc   := Sloc (E);\n+            Init  := Make_Defining_Identifier (Loc, Make_Init_Proc_Name (Typ));\n+            Parms :=\n+              New_List (\n+                Make_Parameter_Specification (Loc,\n+                  Defining_Identifier =>\n+                    Make_Defining_Identifier (Loc, Name_X),\n+                  Parameter_Type =>\n+                    New_Reference_To (Typ, Loc)));\n+\n+            if Present (Parameter_Specifications (Parent (E))) then\n+               P := First (Parameter_Specifications (Parent (E)));\n+               while Present (P) loop\n+                  Append_To (Parms,\n+                    Make_Parameter_Specification (Loc,\n+                      Defining_Identifier =>\n+                        Make_Defining_Identifier (Loc,\n+                          Chars (Defining_Identifier (P))),\n+                      Parameter_Type => New_Copy_Tree (Parameter_Type (P))));\n+                  Next (P);\n+               end loop;\n+            end if;\n+\n+            Discard_Node (\n+              Make_Subprogram_Declaration (Loc,\n+                Make_Procedure_Specification (Loc,\n+                  Defining_Unit_Name => Init,\n+                  Parameter_Specifications => Parms)));\n+\n+            Set_Init_Proc (Typ, Init);\n+            Set_Is_Imported    (Init);\n+            Set_Interface_Name (Init, Interface_Name (E));\n+            Set_Convention     (Init, Convention_C);\n+            Set_Is_Public      (Init);\n+            Set_Has_Completion (Init);\n+         end if;\n+\n          Next_Entity (E);\n       end loop;\n \n-      --  Create the init procedure\n-\n-      if Present (E) then\n-         Loc   := Sloc (E);\n-         Init  := Make_Defining_Identifier (Loc, Make_Init_Proc_Name (Typ));\n-         Param := Make_Defining_Identifier (Loc, Name_X);\n-\n-         Discard_Node (\n-           Make_Subprogram_Declaration (Loc,\n-             Make_Procedure_Specification (Loc,\n-               Defining_Unit_Name => Init,\n-               Parameter_Specifications => New_List (\n-                 Make_Parameter_Specification (Loc,\n-                   Defining_Identifier => Param,\n-                   Parameter_Type      => New_Reference_To (Typ, Loc))))));\n-\n-         Set_Init_Proc (Typ, Init);\n-         Set_Is_Imported    (Init);\n-         Set_Interface_Name (Init, Interface_Name (E));\n-         Set_Convention     (Init, Convention_C);\n-         Set_Is_Public      (Init);\n-         Set_Has_Completion (Init);\n-\n       --  If there are no constructors, mark the type as abstract since we\n       --  won't be able to declare objects of that type.\n \n-      else\n+      if not Found then\n          Set_Is_Abstract_Type (Typ);\n       end if;\n-   end Set_Default_Constructor;\n+   end Set_CPP_Constructors;\n \n    --------------------------\n    -- Set_DTC_Entity_Value --"}, {"sha": "c91798f24509fc3be2c888779b87bb424170a534", "filename": "gcc/ada/exp_disp.ads", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236fecbf44a87814987887e5d3f03c4b8bf0c294/gcc%2Fada%2Fexp_disp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236fecbf44a87814987887e5d3f03c4b8bf0c294/gcc%2Fada%2Fexp_disp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.ads?ref=236fecbf44a87814987887e5d3f03c4b8bf0c294", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -328,10 +328,13 @@ package Exp_Disp is\n    --  Class case check that no pragma CPP_Virtual is missing and that the\n    --  DT_Position are coherent\n \n-   procedure Set_Default_Constructor (Typ : Entity_Id);\n-   --  Typ is a CPP_Class type. Create the Init procedure of that type to\n-   --  be the default constructor (i.e. the function returning this type,\n-   --  having a pragma CPP_Constructor and no parameter)\n+   procedure Set_CPP_Constructors (Typ : Entity_Id);\n+   --  Typ is a CPP_Class type. Create the Init procedures of that type\n+   --  required to handle its default and non-default constructors. The\n+   --  functions to which pragma CPP_Constructor is applied in the sources\n+   --  are functions returning this type, and having an implicit access to the\n+   --  target object in its first argument; such implicit argument is explicit\n+   --  in the IP procedures built here.\n \n    procedure Set_DTC_Entity_Value\n      (Tagged_Type : Entity_Id;"}, {"sha": "c7e03660d9487062da52d543b3aef36da4ad3f8e", "filename": "gcc/ada/exp_tss.adb", "status": "modified", "additions": 65, "deletions": 8, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236fecbf44a87814987887e5d3f03c4b8bf0c294/gcc%2Fada%2Fexp_tss.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236fecbf44a87814987887e5d3f03c4b8bf0c294/gcc%2Fada%2Fexp_tss.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_tss.adb?ref=236fecbf44a87814987887e5d3f03c4b8bf0c294", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -27,6 +27,7 @@ with Atree;    use Atree;\n with Einfo;    use Einfo;\n with Elists;   use Elists;\n with Exp_Util; use Exp_Util;\n+with Nlists;   use Nlists;\n with Lib;      use Lib;\n with Restrict; use Restrict;\n with Rident;   use Rident;\n@@ -40,7 +41,10 @@ package body Exp_Tss is\n    -- Base_Init_Proc --\n    --------------------\n \n-   function Base_Init_Proc (Typ : Entity_Id) return Entity_Id is\n+   function Base_Init_Proc\n+     (Typ : Entity_Id;\n+      Ref : Entity_Id := Empty) return Entity_Id\n+   is\n       Full_Type : E;\n       Proc      : Entity_Id;\n \n@@ -55,6 +59,7 @@ package body Exp_Tss is\n \n       if No (Full_Type) then\n          return Empty;\n+\n       elsif Is_Concurrent_Type (Full_Type)\n         and then Present (Corresponding_Record_Type (Base_Type (Full_Type)))\n       then\n@@ -63,16 +68,17 @@ package body Exp_Tss is\n          --  and possibly an itype.\n \n          return Init_Proc\n-            (Base_Type (Corresponding_Record_Type (Base_Type (Full_Type))));\n+           (Base_Type (Corresponding_Record_Type (Base_Type (Full_Type))),\n+            Ref);\n \n       else\n-         Proc := Init_Proc (Base_Type (Full_Type));\n+         Proc := Init_Proc (Base_Type (Full_Type), Ref);\n \n          if No (Proc)\n            and then Is_Composite_Type (Full_Type)\n            and then Is_Derived_Type (Full_Type)\n          then\n-            return Init_Proc (Root_Type (Full_Type));\n+            return Init_Proc (Root_Type (Full_Type), Ref);\n          else\n             return Proc;\n          end if;\n@@ -183,9 +189,14 @@ package body Exp_Tss is\n    -- Init_Proc --\n    ---------------\n \n-   function Init_Proc (Typ : Entity_Id) return Entity_Id is\n+   function Init_Proc\n+     (Typ  : Entity_Id;\n+      Ref  : Entity_Id := Empty) return Entity_Id\n+   is\n       FN   : constant Node_Id := Freeze_Node (Typ);\n       Elmt : Elmt_Id;\n+      E1   : Entity_Id;\n+      E2   : Entity_Id;\n \n    begin\n       if No (FN) then\n@@ -194,11 +205,57 @@ package body Exp_Tss is\n       elsif No (TSS_Elist (FN)) then\n          return Empty;\n \n-      else\n+      elsif No (Ref) then\n          Elmt := First_Elmt (TSS_Elist (FN));\n          while Present (Elmt) loop\n             if Is_Init_Proc (Node (Elmt)) then\n-               return Node (Elmt);\n+               if not Is_CPP_Class (Typ) then\n+                  return Node (Elmt);\n+\n+               --  In case of CPP classes we are searching here for the\n+               --  default constructor and hence we must skip non-default\n+               --  constructors (if any)\n+\n+               elsif No (Next\n+                         (First\n+                          (Parameter_Specifications (Parent (Node (Elmt))))))\n+               then\n+                  return Node (Elmt);\n+               end if;\n+            end if;\n+\n+            Next_Elmt (Elmt);\n+         end loop;\n+\n+      --  Non-default constructors are currently supported only in the\n+      --  context of interfacing with C++\n+\n+      else pragma Assert (Is_CPP_Class (Typ));\n+\n+         --  Use the referenced function to locate the IP procedure that\n+         --  corresponds with the C++ constructor\n+\n+         Elmt := First_Elmt (TSS_Elist (FN));\n+         while Present (Elmt) loop\n+            if Is_Init_Proc (Node (Elmt)) then\n+               E1 := Next_Formal (First_Formal (Node (Elmt)));\n+               E2 := First_Formal (Ref);\n+\n+               while Present (E1) and then Present (E2) loop\n+                  if Chars (E1) /= Chars (E2)\n+                    or else Ekind (E1) /= Ekind (E2)\n+                    or else Etype (E1) /= Etype (E2)\n+                  then\n+                     exit;\n+                  end if;\n+\n+                  E1 := Next_Formal (E1);\n+                  E2 := Next_Formal (E2);\n+               end loop;\n+\n+               if No (E1) and then No (E2) then\n+                  return Node (Elmt);\n+               end if;\n             end if;\n \n             Next_Elmt (Elmt);"}, {"sha": "b81199ccf292f102b1502a21c06e26952dd08c1f", "filename": "gcc/ada/exp_tss.ads", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236fecbf44a87814987887e5d3f03c4b8bf0c294/gcc%2Fada%2Fexp_tss.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236fecbf44a87814987887e5d3f03c4b8bf0c294/gcc%2Fada%2Fexp_tss.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_tss.ads?ref=236fecbf44a87814987887e5d3f03c4b8bf0c294", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -187,8 +187,9 @@ package Exp_Tss is\n    --  used to initially install a TSS in the case where the subprogram for the\n    --  TSS has already been created and its declaration processed.\n \n-   function Init_Proc (Typ : Entity_Id) return Entity_Id;\n-   pragma Inline (Init_Proc);\n+   function Init_Proc\n+     (Typ : Entity_Id;\n+      Ref : Entity_Id := Empty) return Entity_Id;\n    --  Obtains the _init TSS entry for the given type. This function call is\n    --  equivalent to TSS (Typ, Name_uInit). The _init TSS is the procedure\n    --  used to initialize otherwise uninitialized instances of a type. If\n@@ -198,14 +199,21 @@ package Exp_Tss is\n    --  the corresponding base type (see Base_Init_Proc function). A special\n    --  case arises for concurrent types. Such types do not themselves have an\n    --  init proc TSS, but initialization is required. The init proc used is\n-   --  the one for the corresponding record type (see Base_Init_Proc).\n+   --  the one for the corresponding record type (see Base_Init_Proc). If\n+   --  Ref is present it is call to a subprogram whose profile matches the\n+   --  profile of the required constructor (this argument is used to handle\n+   --  non-default CPP constructors).\n \n-   function Base_Init_Proc (Typ : Entity_Id) return Entity_Id;\n+   function Base_Init_Proc\n+     (Typ : Entity_Id;\n+      Ref : Entity_Id := Empty) return Entity_Id;\n    --  Obtains the _Init TSS entry from the base type of the entity, and also\n    --  deals with going indirect through the Corresponding_Record_Type field\n    --  for concurrent objects (which are initialized with the initialization\n-   --  routine for the corresponding record type). Returns Empty if there is\n-   --  no _Init TSS entry for the base type.\n+   --  routine for the corresponding record type). Returns Empty if there is no\n+   --  _Init TSS entry for the base type. If Ref is present it is a call to a\n+   --  subprogram whose profile matches the profile of the required constructor\n+   --  (this argument is used to handle non-default CPP constructors).\n \n    procedure Set_Init_Proc (Typ : Entity_Id; Init : Entity_Id);\n    pragma Inline (Set_Init_Proc);"}, {"sha": "509717f681d8a3efb2c513cc81d1c7322fbf04d1", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236fecbf44a87814987887e5d3f03c4b8bf0c294/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236fecbf44a87814987887e5d3f03c4b8bf0c294/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=236fecbf44a87814987887e5d3f03c4b8bf0c294", "patch": "@@ -1542,19 +1542,30 @@ must be of one of the following forms:\n @end itemize\n \n @noindent\n-where @var{T} is a tagged type to which the pragma @code{CPP_Class} applies.\n+where @var{T} is a tagged limited type imported from C++ with pragma\n+@code{Import} and @code{Convention} = @code{CPP}.\n \n The first form is the default constructor, used when an object of type\n-@var{T} is created on the Ada side with no explicit constructor.  Other\n-constructors (including the copy constructor, which is simply a special\n+@var{T} is created on the Ada side with no explicit constructor.  The\n+second form covers all the non-default constructors of the type.\n+Constructors (including the copy constructor, which is simply a special\n case of the second form in which the one and only argument is of type\n-@var{T}), can only appear in two contexts:\n+@var{T}), can only appear in the following contexts:\n \n @itemize @bullet\n @item\n On the right side of an initialization of an object of type @var{T}.\n @item\n+On the right side of an initialization of a record component of type @var{T}.\n+@item\n In an extension aggregate for an object of a type derived from @var{T}.\n+@item\n+In an Ada 2005 limited aggregate.\n+@item\n+In an Ada 2005 nested limited aggregate.\n+@item\n+In an Ada 2005 limited aggregate that initializes an object built in\n+place by an extended return statement.\n @end itemize\n \n @noindent\n@@ -1564,8 +1575,10 @@ argument (the object being initialized) at the implementation\n level.  GNAT issues the appropriate call, whatever it is, to get the\n object properly initialized.\n \n-In the case of derived objects, you may use one of two possible forms\n-for declaring and creating an object:\n+In the case of objects of derived types, in addition to the use of Ada\n+2005 limited aggregates and extended return statements, you may also\n+use one of the following two possible forms for declaring and creating\n+an object:\n \n @itemize @bullet\n @item @code{New_Object : Derived_T}\n@@ -1580,9 +1593,7 @@ constructor is called and the extension aggregate indicates the explicit\n values of the extension fields.\n \n If no constructors are imported, it is impossible to create any objects\n-on the Ada side.  If no default constructor is imported, only the\n-initialization forms using an explicit call to a constructor are\n-permitted.\n+on the Ada side and the type is implicitly declared abstract.\n \n Pragma @code{CPP_Constructor} is intended primarily for automatic generation\n using an automatic binding generator tool."}, {"sha": "9bd9a00126052f831982aba484828d13cb826ba4", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236fecbf44a87814987887e5d3f03c4b8bf0c294/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236fecbf44a87814987887e5d3f03c4b8bf0c294/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=236fecbf44a87814987887e5d3f03c4b8bf0c294", "patch": "@@ -2656,6 +2656,7 @@ package body Sem_Ch3 is\n          if (Is_Class_Wide_Type (Etype (E)) or else Is_Dynamically_Tagged (E))\n            and then Is_Tagged_Type (T)\n            and then not Is_Class_Wide_Type (T)\n+           and then not Is_CPP_Constructor_Call (E)\n          then\n             Error_Msg_N (\"dynamically tagged expression not allowed!\", E);\n          end if;\n@@ -15311,9 +15312,10 @@ package body Sem_Ch3 is\n \n    function OK_For_Limited_Init (Exp : Node_Id) return Boolean is\n    begin\n-      return Ada_Version >= Ada_05\n-        and then not Debug_Flag_Dot_L\n-        and then OK_For_Limited_Init_In_05 (Exp);\n+      return Is_CPP_Constructor_Call (Exp)\n+        or else (Ada_Version >= Ada_05\n+                  and then not Debug_Flag_Dot_L\n+                  and then OK_For_Limited_Init_In_05 (Exp));\n    end OK_For_Limited_Init;\n \n    -------------------------------"}, {"sha": "37975bc73a7b62313e522faa9b5e198b2dc75f0a", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236fecbf44a87814987887e5d3f03c4b8bf0c294/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236fecbf44a87814987887e5d3f03c4b8bf0c294/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=236fecbf44a87814987887e5d3f03c4b8bf0c294", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -436,9 +436,15 @@ package body Sem_Ch5 is\n         and then not Assignment_OK (Original_Node (Lhs))\n         and then not Is_Value_Type (T1)\n       then\n-         Error_Msg_N\n-           (\"left hand of assignment must not be limited type\", Lhs);\n-         Explain_Limited_Type (T1, Lhs);\n+         --  CPP constructors can only be called in declarations\n+\n+         if Is_CPP_Constructor_Call (Rhs) then\n+            Error_Msg_N (\"invalid use of 'C'P'P constructor\", Rhs);\n+         else\n+            Error_Msg_N\n+              (\"left hand of assignment must not be limited type\", Lhs);\n+            Explain_Limited_Type (T1, Lhs);\n+         end if;\n          return;\n \n       --  Enforce RM 3.9.3 (8): left-hand side cannot be abstract\n@@ -543,6 +549,7 @@ package body Sem_Ch5 is\n            or else (Is_Dynamically_Tagged (Rhs)\n                      and then not Is_Access_Type (T1)))\n         and then not Is_Class_Wide_Type (T1)\n+        and then not Is_CPP_Constructor_Call (Rhs)\n       then\n          Error_Msg_N (\"dynamically tagged expression not allowed!\", Rhs);\n "}, {"sha": "926f750405d1987a420c703f2376991706e8d42f", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236fecbf44a87814987887e5d3f03c4b8bf0c294/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236fecbf44a87814987887e5d3f03c4b8bf0c294/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=236fecbf44a87814987887e5d3f03c4b8bf0c294", "patch": "@@ -6201,13 +6201,8 @@ package body Sem_Prag is\n                   Process_Interface_Name (Def_Id, Arg2, Arg3);\n                end if;\n \n-               if No (Parameter_Specifications (Parent (Def_Id))) then\n-                  Set_Has_Completion (Def_Id);\n-                  Set_Is_Constructor (Def_Id);\n-               else\n-                  Error_Pragma_Arg\n-                    (\"non-default constructors not implemented\", Arg1);\n-               end if;\n+               Set_Has_Completion (Def_Id);\n+               Set_Is_Constructor (Def_Id);\n \n             else\n                Error_Pragma_Arg"}, {"sha": "d7e85261dfe4062cb31f53b056a5e9349f7d1919", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236fecbf44a87814987887e5d3f03c4b8bf0c294/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236fecbf44a87814987887e5d3f03c4b8bf0c294/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=236fecbf44a87814987887e5d3f03c4b8bf0c294", "patch": "@@ -5518,6 +5518,19 @@ package body Sem_Util is\n       return False;\n    end Is_Controlling_Limited_Procedure;\n \n+   -----------------------------\n+   -- Is_CPP_Constructor_Call --\n+   -----------------------------\n+\n+   function Is_CPP_Constructor_Call (N : Node_Id) return Boolean is\n+   begin\n+      return Nkind (N) = N_Function_Call\n+        and then Is_Class_Wide_Type (Etype (N))\n+        and then Is_CPP_Class (Etype (Etype (N)))\n+        and then Is_Constructor (Entity (Name (N)))\n+        and then Is_Imported (Entity (Name (N)));\n+   end Is_CPP_Constructor_Call;\n+\n    ----------------------------------------------\n    -- Is_Dependent_Component_Of_Mutable_Object --\n    ----------------------------------------------"}, {"sha": "9e2d3ffcf1e7c7e326f973786c63b724ef085459", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236fecbf44a87814987887e5d3f03c4b8bf0c294/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236fecbf44a87814987887e5d3f03c4b8bf0c294/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=236fecbf44a87814987887e5d3f03c4b8bf0c294", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -644,6 +644,9 @@ package Sem_Util is\n    --  Ada 2005 (AI-345): Determine whether Proc_Nam is a primitive procedure\n    --  of a limited interface with a controlling first parameter.\n \n+   function Is_CPP_Constructor_Call (N : Node_Id) return Boolean;\n+   --  Returns True if N is a call to a CPP constructor\n+\n    function Is_Dependent_Component_Of_Mutable_Object\n      (Object : Node_Id) return Boolean;\n    --  Returns True if Object is the name of a subcomponent that"}]}