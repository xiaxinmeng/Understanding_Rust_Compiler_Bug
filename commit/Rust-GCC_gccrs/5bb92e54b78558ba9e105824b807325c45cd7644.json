{"sha": "5bb92e54b78558ba9e105824b807325c45cd7644", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJiOTJlNTRiNzg1NThiYTllMTA1ODI0YjgwNzMyNWM0NWNkNzY0NA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-05-24T22:21:34Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-05-24T22:21:34Z"}, "message": "libgo: Make os.setenv_c work on systems without setenv.\n\nFrom-SVN: r174147", "tree": {"sha": "a17569556c9f8bfb53e143af4d2f41428e34e44b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a17569556c9f8bfb53e143af4d2f41428e34e44b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bb92e54b78558ba9e105824b807325c45cd7644", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bb92e54b78558ba9e105824b807325c45cd7644", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bb92e54b78558ba9e105824b807325c45cd7644", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bb92e54b78558ba9e105824b807325c45cd7644/comments", "author": null, "committer": null, "parents": [{"sha": "657730879110d20c9aa1de4f085a99e0ef6127de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/657730879110d20c9aa1de4f085a99e0ef6127de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/657730879110d20c9aa1de4f085a99e0ef6127de"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "d604392323a2ebed0257abfd683c872c3e1736e3", "filename": "libgo/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bb92e54b78558ba9e105824b807325c45cd7644/libgo%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bb92e54b78558ba9e105824b807325c45cd7644/libgo%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfig.h.in?ref=5bb92e54b78558ba9e105824b807325c45cd7644", "patch": "@@ -24,6 +24,9 @@\n /* Define to 1 if you have the `random' function. */\n #undef HAVE_RANDOM\n \n+/* Define to 1 if you have the `setenv' function. */\n+#undef HAVE_SETENV\n+\n /* Define to 1 if you have the `srandom' function. */\n #undef HAVE_SRANDOM\n "}, {"sha": "4bf5a2e609694a517e0c8ba3e1e3343b8ad30115", "filename": "libgo/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bb92e54b78558ba9e105824b807325c45cd7644/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bb92e54b78558ba9e105824b807325c45cd7644/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=5bb92e54b78558ba9e105824b807325c45cd7644", "patch": "@@ -14271,7 +14271,7 @@ else\n fi\n \n \n-for ac_func in srandom random strerror_r strsignal wait4 mincore\n+for ac_func in srandom random strerror_r strsignal wait4 mincore setenv\n do :\n   as_ac_var=`$as_echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n ac_fn_c_check_func \"$LINENO\" \"$ac_func\" \"$as_ac_var\""}, {"sha": "8a5ffb723a423fbe1cec68f1eb4200911b14a513", "filename": "libgo/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bb92e54b78558ba9e105824b807325c45cd7644/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bb92e54b78558ba9e105824b807325c45cd7644/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=5bb92e54b78558ba9e105824b807325c45cd7644", "patch": "@@ -431,7 +431,7 @@ esac\n AC_CHECK_HEADERS(sys/mman.h syscall.h sys/epoll.h sys/ptrace.h sys/syscall.h sys/user.h sys/utsname.h sys/select.h)\n AM_CONDITIONAL(HAVE_SYS_MMAN_H, test \"$ac_cv_header_sys_mman_h\" = yes)\n \n-AC_CHECK_FUNCS(srandom random strerror_r strsignal wait4 mincore)\n+AC_CHECK_FUNCS(srandom random strerror_r strsignal wait4 mincore setenv)\n AM_CONDITIONAL(HAVE_STRERROR_R, test \"$ac_cv_func_strerror_r\" = yes)\n AM_CONDITIONAL(HAVE_WAIT4, test \"$ac_cv_func_wait4\" = yes)\n "}, {"sha": "9c93f52668e058481df4d5847a59ff081cd6d4f1", "filename": "libgo/runtime/go-setenv.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bb92e54b78558ba9e105824b807325c45cd7644/libgo%2Fruntime%2Fgo-setenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bb92e54b78558ba9e105824b807325c45cd7644/libgo%2Fruntime%2Fgo-setenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-setenv.c?ref=5bb92e54b78558ba9e105824b807325c45cd7644", "patch": "@@ -4,6 +4,8 @@\n    Use of this source code is governed by a BSD-style\n    license that can be found in the LICENSE file.  */\n \n+#include \"config.h\"\n+\n #include <stddef.h>\n #include <stdlib.h>\n \n@@ -25,24 +27,38 @@ setenv_c (struct __go_string k, struct __go_string v)\n \n   ks = k.__data;\n   kn = NULL;\n+  vs = v.__data;\n+  vn = NULL;\n+\n+#ifdef HAVE_SETENV\n+\n   if (ks[k.__length] != 0)\n     {\n       kn = __go_alloc (k.__length + 1);\n-      __builtin_memcpy (kn, k.__data, k.__length);\n+      __builtin_memcpy (kn, ks, k.__length);\n       ks = kn;\n     }\n \n-  vs = v.__data;\n-  vn = NULL;\n   if (vs[v.__length] != 0)\n     {\n       vn = __go_alloc (v.__length + 1);\n-      __builtin_memcpy (vn, v.__data, v.__length);\n+      __builtin_memcpy (vn, vs, v.__length);\n       vs = vn;\n     }\n \n   setenv ((const char *) ks, (const char *) vs, 1);\n \n+#else /* !defined(HAVE_SETENV) */\n+\n+  kn = malloc (k.__length + v.__length + 2);\n+  __builtin_memcpy (kn, ks, k.__length);\n+  kn[k.__length] = '=';\n+  __builtin_memcpy (kn + k.__length + 1, vs, v.__length);\n+  kn[k.__length + v.__length + 1] = '\\0';\n+  putenv ((char *) kn);\n+\n+#endif /* !defined(HAVE_SETENV) */\n+\n   if (kn != NULL)\n     __go_free (kn);\n   if (vn != NULL)"}]}