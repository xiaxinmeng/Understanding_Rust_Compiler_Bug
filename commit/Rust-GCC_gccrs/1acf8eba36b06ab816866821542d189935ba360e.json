{"sha": "1acf8eba36b06ab816866821542d189935ba360e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFjZjhlYmEzNmIwNmFiODE2ODY2ODIxNTQyZDE4OTkzNWJhMzYwZQ==", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2020-05-18T22:25:16Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:14Z"}, "message": "Add type resolution to CallExpr\n\nMore work will be added here but there is enough to start working\non the initial AST -> Gimple transformations now.", "tree": {"sha": "43446a57ac5ba7fbf43058181d5bbfb2a5cc8340", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43446a57ac5ba7fbf43058181d5bbfb2a5cc8340"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1acf8eba36b06ab816866821542d189935ba360e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1acf8eba36b06ab816866821542d189935ba360e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1acf8eba36b06ab816866821542d189935ba360e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1acf8eba36b06ab816866821542d189935ba360e/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2be82f24b4150c0c71ae45c17e11a7a159c2dcc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2be82f24b4150c0c71ae45c17e11a7a159c2dcc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2be82f24b4150c0c71ae45c17e11a7a159c2dcc4"}], "stats": {"total": 126, "additions": 120, "deletions": 6}, "files": [{"sha": "0105a8b181d66be96706acd285377e594364beed", "filename": "gcc/rust/analysis/rust-resolution.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1acf8eba36b06ab816866821542d189935ba360e/gcc%2Frust%2Fanalysis%2Frust-resolution.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1acf8eba36b06ab816866821542d189935ba360e/gcc%2Frust%2Fanalysis%2Frust-resolution.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-resolution.h?ref=1acf8eba36b06ab816866821542d189935ba360e", "patch": "@@ -238,6 +238,7 @@ class Resolution : public AST::ASTVisitor\n   std::vector<AST::IdentifierPattern> letPatternBuffer;\n   std::vector<AST::Type *> typeBuffer;\n   std::vector<std::string> typeComparisonBuffer;\n+  std::vector<AST::Function *> functionLookup;\n };\n \n } // namespace Analysis"}, {"sha": "4c032b0dd700d3900785eb52ea5822314b3bb5bd", "filename": "gcc/rust/analysis/rust-scan.cc", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1acf8eba36b06ab816866821542d189935ba360e/gcc%2Frust%2Fanalysis%2Frust-scan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1acf8eba36b06ab816866821542d189935ba360e/gcc%2Frust%2Fanalysis%2Frust-scan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-scan.cc?ref=1acf8eba36b06ab816866821542d189935ba360e", "patch": "@@ -12,6 +12,20 @@ TopLevelScan::TopLevelScan (AST::Crate &crate) : crate (crate)\n \n TopLevelScan::~TopLevelScan () {}\n \n+AST::Function *\n+TopLevelScan::lookupFunction (AST::Expr *expr)\n+{\n+  auto before = fnLookup.size ();\n+  expr->accept_vis (*this);\n+  if (fnLookup.size () > before)\n+    {\n+      AST::Function *fndecl = fnLookup.back ();\n+      fnLookup.pop_back ();\n+      return fndecl;\n+    }\n+  return NULL;\n+}\n+\n void\n TopLevelScan::visit (AST::Token &tok)\n {}\n@@ -43,7 +57,15 @@ TopLevelScan::visit (AST::MacroInvocationSemi &macro)\n // rust-path.h\n void\n TopLevelScan::visit (AST::PathInExpression &path)\n-{}\n+{\n+  auto it = functions.find (path.as_string ());\n+  bool foundFndecl = it != functions.end ();\n+  if (foundFndecl)\n+    {\n+      fnLookup.push_back (it->second);\n+      return;\n+    }\n+}\n \n void\n TopLevelScan::visit (AST::TypePathSegment &segment)"}, {"sha": "e898d4101de3691413641b496954bc5e19a4b595", "filename": "gcc/rust/analysis/rust-scan.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1acf8eba36b06ab816866821542d189935ba360e/gcc%2Frust%2Fanalysis%2Frust-scan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1acf8eba36b06ab816866821542d189935ba360e/gcc%2Frust%2Fanalysis%2Frust-scan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-scan.h?ref=1acf8eba36b06ab816866821542d189935ba360e", "patch": "@@ -15,6 +15,8 @@ class TopLevelScan : public AST::ASTVisitor\n \n   ~TopLevelScan ();\n \n+  AST::Function *lookupFunction (AST::Expr *expr);\n+\n   // visitor impl\n   // rust-ast.h\n   // virtual void visit(AttrInput& attr_input);\n@@ -223,6 +225,8 @@ class TopLevelScan : public AST::ASTVisitor\n private:\n   std::map<std::string, AST::Function *> functions;\n   AST::Crate &crate;\n+\n+  std::vector<AST::Function *> fnLookup;\n };\n \n } // namespace Analysis"}, {"sha": "004542032e191966e23061b878bbb45c760734d6", "filename": "gcc/rust/analysis/rust-type-resolution.cc", "status": "modified", "additions": 89, "deletions": 5, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1acf8eba36b06ab816866821542d189935ba360e/gcc%2Frust%2Fanalysis%2Frust-type-resolution.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1acf8eba36b06ab816866821542d189935ba360e/gcc%2Frust%2Fanalysis%2Frust-type-resolution.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-type-resolution.cc?ref=1acf8eba36b06ab816866821542d189935ba360e", "patch": "@@ -22,6 +22,8 @@ namespace Analysis {\n TypeResolution::TypeResolution (AST::Crate &crate, TopLevelScan &toplevel)\n   : Resolution (crate, toplevel)\n {\n+  functionScope.Push ();\n+\n   // push all builtin types - this is probably too basic for future needs\n   ADD_BUILTIN_TYPE (\"u8\", typeScope);\n   ADD_BUILTIN_TYPE (\"u16\", typeScope);\n@@ -43,6 +45,7 @@ TypeResolution::TypeResolution (AST::Crate &crate, TopLevelScan &toplevel)\n \n TypeResolution::~TypeResolution ()\n {\n+  functionScope.Pop ();\n   typeScope.Pop ();\n   scope.Pop ();\n }\n@@ -67,13 +70,26 @@ bool\n TypeResolution::typesAreCompatible (AST::Type *lhs, AST::Type *rhs,\n \t\t\t\t    Location locus)\n {\n+  auto before = typeComparisonBuffer.size ();\n   lhs->accept_vis (*this);\n+  if (typeComparisonBuffer.size () <= before)\n+    {\n+      rust_error_at (locus, \"failed to understand type for lhs\");\n+      return false;\n+    }\n+\n+  auto lhsTypeStr = typeComparisonBuffer.back ();\n+  typeComparisonBuffer.pop_back ();\n+\n   rhs->accept_vis (*this);\n+  if (typeComparisonBuffer.size () <= before)\n+    {\n+      rust_error_at (locus, \"failed to understand type for rhs\");\n+      return false;\n+    }\n \n   auto rhsTypeStr = typeComparisonBuffer.back ();\n   typeComparisonBuffer.pop_back ();\n-  auto lhsTypeStr = typeComparisonBuffer.back ();\n-  typeComparisonBuffer.pop_back ();\n \n   // FIXME this needs to handle the cases of an i8 going into an i32 which is\n   // compatible\n@@ -87,6 +103,22 @@ TypeResolution::typesAreCompatible (AST::Type *lhs, AST::Type *rhs,\n   return true;\n }\n \n+AST::Function *\n+TypeResolution::lookupFndecl (AST::Expr *expr)\n+{\n+  size_t before = functionLookup.size ();\n+  expr->accept_vis (*this);\n+  if (functionLookup.size () > before)\n+    {\n+      auto fndecl = functionLookup.back ();\n+      functionLookup.pop_back ();\n+      return fndecl;\n+    }\n+\n+  rust_error_at (expr->get_locus_slow (), \"failed to lookup function\");\n+  return NULL;\n+}\n+\n void\n TypeResolution::visit (AST::Token &tok)\n {}\n@@ -129,7 +161,20 @@ TypeResolution::visit (AST::MacroInvocationSemi &macro)\n void\n TypeResolution::visit (AST::PathInExpression &path)\n {\n-  printf (\"PathInExpression: %s\\n\", path.as_string ().c_str ());\n+  // look up in the functionScope else lookup in the toplevel scan\n+  AST::Function *fndecl = NULL;\n+  if (functionScope.Lookup (path.as_string (), &fndecl))\n+    {\n+      functionLookup.push_back (fndecl);\n+      return;\n+    }\n+\n+  fndecl = toplevel.lookupFunction (&path);\n+  if (fndecl != NULL)\n+    {\n+      functionLookup.push_back (fndecl);\n+      return;\n+    }\n }\n \n void\n@@ -394,7 +439,35 @@ TypeResolution::visit (AST::EnumExprFieldless &expr)\n void\n TypeResolution::visit (AST::CallExpr &expr)\n {\n-  printf (\"CallExpr: %s\\n\", expr.as_string ().c_str ());\n+  auto fndecl = lookupFndecl (expr.function.get ());\n+  if (fndecl == NULL)\n+    return;\n+\n+  typeBuffer.push_back (fndecl->return_type.get ());\n+\n+  auto before = typeBuffer.size ();\n+  for (auto &item : expr.params)\n+    item->accept_vis (*this);\n+\n+  auto numInferedParams = typeBuffer.size () - before;\n+  if (numInferedParams != expr.params.size ())\n+    {\n+      rust_error_at (expr.locus, \"Failed to infer all parameters\");\n+      return;\n+    }\n+\n+  auto offs = numInferedParams - 1;\n+  for (auto it = fndecl->function_params.rbegin ();\n+       it != fndecl->function_params.rend (); ++it)\n+    {\n+      AST::Type *argument = typeBuffer.back ();\n+      typeBuffer.pop_back ();\n+\n+      if (!typesAreCompatible (it->type.get (), argument,\n+\t\t\t       expr.params[offs]->get_locus_slow ()))\n+\treturn;\n+      offs--;\n+    }\n }\n \n void\n@@ -538,7 +611,9 @@ TypeResolution::visit (AST::Function &function)\n   // always emit the function with return type in the event of nil return type\n   // its  a marker for a void function\n   scope.Insert (function.function_name, function.return_type.get ());\n+  functionScope.Insert (function.function_name, &function);\n \n+  functionScope.Push ();\n   scope.Push ();\n   for (auto &param : function.function_params)\n     {\n@@ -562,6 +637,7 @@ TypeResolution::visit (AST::Function &function)\n     }\n \n   scope.Pop ();\n+  functionScope.Pop ();\n }\n \n void\n@@ -758,9 +834,10 @@ TypeResolution::visit (AST::LetStmt &stmt)\n   AST::Type *inferedType = NULL;\n   if (stmt.has_init_expr ())\n     {\n+      auto before = typeBuffer.size ();\n       stmt.init_expr->accept_vis (*this);\n \n-      if (typeBuffer.empty ())\n+      if (typeBuffer.size () <= before)\n \t{\n \t  rust_error_at (\n \t    stmt.init_expr->get_locus_slow (),\n@@ -770,6 +847,13 @@ TypeResolution::visit (AST::LetStmt &stmt)\n \n       inferedType = typeBuffer.back ();\n       typeBuffer.pop_back ();\n+\n+      if (inferedType == NULL)\n+\t{\n+\t  rust_error_at (stmt.init_expr->get_locus_slow (),\n+\t\t\t \"void type found for statement initialisation\");\n+\t  return;\n+\t}\n     }\n \n   if (stmt.has_type () && stmt.has_init_expr ())"}, {"sha": "58d36dbfea0356e60a5812ffdcb491c91ec2e133", "filename": "gcc/rust/analysis/rust-type-resolution.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1acf8eba36b06ab816866821542d189935ba360e/gcc%2Frust%2Fanalysis%2Frust-type-resolution.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1acf8eba36b06ab816866821542d189935ba360e/gcc%2Frust%2Fanalysis%2Frust-type-resolution.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-type-resolution.h?ref=1acf8eba36b06ab816866821542d189935ba360e", "patch": "@@ -220,6 +220,9 @@ class TypeResolution : public Resolution\n   TypeResolution (AST::Crate &crate, TopLevelScan &toplevel);\n   bool go () override;\n   bool typesAreCompatible (AST::Type *lhs, AST::Type *rhs, Location locus);\n+  AST::Function *lookupFndecl (AST::Expr *expr);\n+\n+  Scope<AST::Function *> functionScope;\n };\n \n } // namespace Analysis"}]}