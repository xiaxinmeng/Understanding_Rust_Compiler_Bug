{"sha": "93ac832f1846e4867aa6537f76f510fab8e3e87d", "node_id": "C_kwDOANBUbNoAKDkzYWM4MzJmMTg0NmU0ODY3YWE2NTM3Zjc2ZjUxMGZhYjhlM2U4N2Q", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-10-07T14:12:29Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-10-15T16:00:41Z"}, "message": "Ranger : Do not process abnormal ssa-names.\n\n\t* gimple-range-fold.h (gimple_range_ssa_p): Don't process names\n\tthat occur in abnormal phis.\n\t* gimple-range.cc (gimple_ranger::range_on_edge): Return false for\n\tabnormal and EH edges.\n\t* gimple-ssa-evrp.c (rvrp_folder::value_of_expr): Ditto.\n\t(rvrp_folder::value_on_edge): Ditto.\n\t(rvrp_folder::value_of_stmt): Ditto.\n\t(hybrid_folder::value_of_expr): Ditto for ranger queries.\n\t(hybrid_folder::value_on_edge): Ditto.\n\t(hybrid_folder::value_of_stmt): Ditto.\n\t* value-query.cc (gimple_range_global): Always return a range if\n\tthe type is supported.", "tree": {"sha": "886ff8d895cff2de9887de2a77ad4e48d5d6f324", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/886ff8d895cff2de9887de2a77ad4e48d5d6f324"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93ac832f1846e4867aa6537f76f510fab8e3e87d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93ac832f1846e4867aa6537f76f510fab8e3e87d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93ac832f1846e4867aa6537f76f510fab8e3e87d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93ac832f1846e4867aa6537f76f510fab8e3e87d/comments", "author": null, "committer": null, "parents": [{"sha": "a10794eafb151b9274d673dfae93459d437cbe4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a10794eafb151b9274d673dfae93459d437cbe4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a10794eafb151b9274d673dfae93459d437cbe4a"}], "stats": {"total": 47, "additions": 39, "deletions": 8}, "files": [{"sha": "350e2c4e039b77b0fba623333e7b8fca9b5d47cb", "filename": "gcc/gimple-range-fold.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93ac832f1846e4867aa6537f76f510fab8e3e87d/gcc%2Fgimple-range-fold.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93ac832f1846e4867aa6537f76f510fab8e3e87d/gcc%2Fgimple-range-fold.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-fold.h?ref=93ac832f1846e4867aa6537f76f510fab8e3e87d", "patch": "@@ -93,6 +93,7 @@ gimple_range_ssa_p (tree exp)\n {\n   if (exp && TREE_CODE (exp) == SSA_NAME &&\n       !SSA_NAME_IS_VIRTUAL_OPERAND (exp) &&\n+      !SSA_NAME_OCCURS_IN_ABNORMAL_PHI (exp) &&\n       irange::supports_type_p (TREE_TYPE (exp)))\n     return exp;\n   return NULL_TREE;"}, {"sha": "85ef9745593c6eef7021ec664921736327a8ac9a", "filename": "gcc/gimple-range.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93ac832f1846e4867aa6537f76f510fab8e3e87d/gcc%2Fgimple-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93ac832f1846e4867aa6537f76f510fab8e3e87d/gcc%2Fgimple-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range.cc?ref=93ac832f1846e4867aa6537f76f510fab8e3e87d", "patch": "@@ -180,6 +180,10 @@ gimple_ranger::range_on_edge (irange &r, edge e, tree name)\n   int_range_max edge_range;\n   gcc_checking_assert (irange::supports_type_p (TREE_TYPE (name)));\n \n+  // Do not process values along abnormal or EH edges.\n+  if (e->flags & (EDGE_ABNORMAL|EDGE_EH))\n+    return false;\n+\n   unsigned idx;\n   if ((idx = tracer.header (\"range_on_edge (\")))\n     {"}, {"sha": "7f2055501a0587504301ffc7c154da4e569eaad5", "filename": "gcc/gimple-ssa-evrp.c", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93ac832f1846e4867aa6537f76f510fab8e3e87d/gcc%2Fgimple-ssa-evrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93ac832f1846e4867aa6537f76f510fab8e3e87d/gcc%2Fgimple-ssa-evrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-evrp.c?ref=93ac832f1846e4867aa6537f76f510fab8e3e87d", "patch": "@@ -137,6 +137,9 @@ class rvrp_folder : public substitute_and_fold_engine\n \n   tree value_of_expr (tree name, gimple *s = NULL) OVERRIDE\n   {\n+    // Shortcircuit subst_and_fold callbacks for abnormal ssa_names.\n+    if (TREE_CODE (name) == SSA_NAME && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (name))\n+      return NULL;\n     tree ret = m_ranger->value_of_expr (name, s);\n     if (!ret && supported_pointer_equiv_p (name))\n       ret = m_pta->get_equiv (name);\n@@ -145,6 +148,9 @@ class rvrp_folder : public substitute_and_fold_engine\n \n   tree value_on_edge (edge e, tree name) OVERRIDE\n   {\n+    // Shortcircuit subst_and_fold callbacks for abnormal ssa_names.\n+    if (TREE_CODE (name) == SSA_NAME && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (name))\n+      return NULL;\n     tree ret = m_ranger->value_on_edge (e, name);\n     if (!ret && supported_pointer_equiv_p (name))\n       ret = m_pta->get_equiv (name);\n@@ -153,6 +159,9 @@ class rvrp_folder : public substitute_and_fold_engine\n \n   tree value_of_stmt (gimple *s, tree name = NULL) OVERRIDE\n   {\n+    // Shortcircuit subst_and_fold callbacks for abnormal ssa_names.\n+    if (TREE_CODE (name) == SSA_NAME && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (name))\n+      return NULL;\n     return m_ranger->value_of_stmt (s, name);\n   }\n \n@@ -283,9 +292,15 @@ tree\n hybrid_folder::value_of_expr (tree op, gimple *stmt)\n {\n   tree evrp_ret = evrp_folder::value_of_expr (op, stmt);\n-  tree ranger_ret = m_ranger->value_of_expr (op, stmt);\n-  if (!ranger_ret && supported_pointer_equiv_p (op))\n-    ranger_ret = m_pta->get_equiv (op);\n+  tree ranger_ret;\n+  if (TREE_CODE (op) == SSA_NAME && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (op))\n+    ranger_ret = NULL;\n+  else\n+    {\n+      ranger_ret = m_ranger->value_of_expr (op, stmt);\n+      if (!ranger_ret && supported_pointer_equiv_p (op))\n+\tranger_ret = m_pta->get_equiv (op);\n+    }\n   return choose_value (evrp_ret, ranger_ret);\n }\n \n@@ -295,9 +310,15 @@ hybrid_folder::value_on_edge (edge e, tree op)\n   // Call evrp::value_of_expr directly.  Otherwise another dual call is made\n   // via hybrid_folder::value_of_expr, but without an edge.\n   tree evrp_ret = evrp_folder::value_of_expr (op, NULL);\n-  tree ranger_ret = m_ranger->value_on_edge (e, op);\n-  if (!ranger_ret && supported_pointer_equiv_p (op))\n-    ranger_ret = m_pta->get_equiv (op);\n+  tree ranger_ret;\n+  if (TREE_CODE (op) == SSA_NAME && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (op))\n+    ranger_ret = NULL;\n+  else\n+    {\n+      ranger_ret = m_ranger->value_on_edge (e, op);\n+      if (!ranger_ret && supported_pointer_equiv_p (op))\n+\tranger_ret = m_pta->get_equiv (op);\n+    }\n   return choose_value (evrp_ret, ranger_ret);\n }\n \n@@ -312,7 +333,11 @@ hybrid_folder::value_of_stmt (gimple *stmt, tree op)\n   else\n     evrp_ret = NULL_TREE;\n \n-  tree ranger_ret = m_ranger->value_of_stmt (stmt, op);\n+  tree ranger_ret;\n+  if (op && TREE_CODE (op) == SSA_NAME && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (op))\n+    ranger_ret = NULL;\n+  else\n+    ranger_ret = m_ranger->value_of_stmt (stmt, op);\n   return choose_value (evrp_ret, ranger_ret);\n }\n "}, {"sha": "ab133aab1142968ebcae0352f000315f26d4e01d", "filename": "gcc/value-query.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93ac832f1846e4867aa6537f76f510fab8e3e87d/gcc%2Fvalue-query.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93ac832f1846e4867aa6537f76f510fab8e3e87d/gcc%2Fvalue-query.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-query.cc?ref=93ac832f1846e4867aa6537f76f510fab8e3e87d", "patch": "@@ -416,8 +416,9 @@ get_range_global (irange &r, tree name)\n value_range\n gimple_range_global (tree name)\n {\n-  gcc_checking_assert (gimple_range_ssa_p (name));\n   tree type = TREE_TYPE (name);\n+  gcc_checking_assert (TREE_CODE (name) == SSA_NAME\n+\t\t       && irange::supports_type_p (type));\n \n   if (SSA_NAME_IS_DEFAULT_DEF (name) || (cfun && cfun->after_inlining)\n       || is_a<gphi *> (SSA_NAME_DEF_STMT (name)))"}]}