{"sha": "88a1f47fae962c02535f5422d1298a385be92c86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhhMWY0N2ZhZTk2MmMwMjUzNWY1NDIyZDEyOThhMzg1YmU5MmM4Ng==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-10-28T19:45:32Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-10-28T19:45:32Z"}, "message": "frv-protos.h (frv_function_arg): Delete.\n\n\t* config/frv/frv-protos.h (frv_function_arg): Delete.\n\t(frv_function_arg_advance): Delete.\n\t* config/frv/frv.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n\t* config/frv/frv.c (frv_function_arg): Rename to...\n\t(frv_function_arg_1): Make static.  Take const_tree and bool\n\targuments.\n\t(frv_function_arg, frv_function_incoming_arg): New functions.\n\t(frv_function_arg_advance): Make static.  Take a const_tree and\n\ta bool.\n\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_INCOMING_ARG): Define.\n\t(TARGET_FUNCTION_ARG_ADVANCE): Define.\n\nFrom-SVN: r166033", "tree": {"sha": "7c3bc5cdc1e196cbd160499eb643f05b72258049", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c3bc5cdc1e196cbd160499eb643f05b72258049"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88a1f47fae962c02535f5422d1298a385be92c86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88a1f47fae962c02535f5422d1298a385be92c86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88a1f47fae962c02535f5422d1298a385be92c86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88a1f47fae962c02535f5422d1298a385be92c86/comments", "author": null, "committer": null, "parents": [{"sha": "46e0720d661b7642c7a8339db07f1dc5f4a79aa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46e0720d661b7642c7a8339db07f1dc5f4a79aa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46e0720d661b7642c7a8339db07f1dc5f4a79aa7"}], "stats": {"total": 91, "additions": 47, "deletions": 44}, "files": [{"sha": "de9a4758dc281a35c6fdf63971a4b14922cdf2c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a1f47fae962c02535f5422d1298a385be92c86/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a1f47fae962c02535f5422d1298a385be92c86/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88a1f47fae962c02535f5422d1298a385be92c86", "patch": "@@ -1,3 +1,17 @@\n+2010-10-28  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/frv/frv-protos.h (frv_function_arg): Delete.\n+\t(frv_function_arg_advance): Delete.\n+\t* config/frv/frv.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n+\t* config/frv/frv.c (frv_function_arg): Rename to...\n+\t(frv_function_arg_1): Make static.  Take const_tree and bool\n+\targuments.\n+\t(frv_function_arg, frv_function_incoming_arg): New functions.\n+\t(frv_function_arg_advance): Make static.  Take a const_tree and\n+\ta bool.\n+\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_INCOMING_ARG): Define.\n+\t(TARGET_FUNCTION_ARG_ADVANCE): Define.\n+\n 2010-10-28  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/46153"}, {"sha": "af9f1cdd7e218de9d00f0e232123132f43db19cc", "filename": "gcc/config/frv/frv-protos.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a1f47fae962c02535f5422d1298a385be92c86/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a1f47fae962c02535f5422d1298a385be92c86/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h?ref=88a1f47fae962c02535f5422d1298a385be92c86", "patch": "@@ -53,13 +53,6 @@ extern void frv_init_cumulative_args\t\t(CUMULATIVE_ARGS *, tree,\n \t\t\t\t\t\t rtx, tree, int);\n \n extern int frv_function_arg_boundary\t\t(enum machine_mode, tree);\n-extern rtx frv_function_arg\t\t\t(CUMULATIVE_ARGS *,\n-\t\t\t\t\t\t enum machine_mode,\n-\t\t\t\t\t\t tree, int, int);\n-\n-extern void frv_function_arg_advance\t\t(CUMULATIVE_ARGS *,\n-\t\t\t\t\t\t enum machine_mode,\n-\t\t\t\t\t\t tree, int);\n extern bool frv_function_value_regno_p\t\t(const unsigned int);\n #endif /* TREE_CODE */\n "}, {"sha": "adc69117c4beb1a5843bc943715161ed001155d2", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a1f47fae962c02535f5422d1298a385be92c86/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a1f47fae962c02535f5422d1298a385be92c86/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=88a1f47fae962c02535f5422d1298a385be92c86", "patch": "@@ -388,6 +388,12 @@ static rtx frv_struct_value_rtx\t\t\t(tree, int);\n static bool frv_must_pass_in_stack (enum machine_mode mode, const_tree type);\n static int frv_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t  tree, bool);\n+static rtx frv_function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t     const_tree, bool);\n+static rtx frv_function_incoming_arg (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t\t      const_tree, bool);\n+static void frv_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t\t       const_tree, bool);\n static void frv_output_dwarf_dtprel\t\t(FILE *, int, rtx)\n   ATTRIBUTE_UNUSED;\n static reg_class_t frv_secondary_reload\t\t(bool, rtx, reg_class_t,\n@@ -486,6 +492,12 @@ static const struct default_options frv_option_optimization_table[] =\n #define TARGET_PASS_BY_REFERENCE hook_pass_by_reference_must_pass_in_stack\n #undef TARGET_ARG_PARTIAL_BYTES\n #define TARGET_ARG_PARTIAL_BYTES frv_arg_partial_bytes\n+#undef TARGET_FUNCTION_ARG\n+#define TARGET_FUNCTION_ARG frv_function_arg\n+#undef TARGET_FUNCTION_INCOMING_ARG\n+#define TARGET_FUNCTION_INCOMING_ARG frv_function_incoming_arg\n+#undef TARGET_FUNCTION_ARG_ADVANCE\n+#define TARGET_FUNCTION_ARG_ADVANCE frv_function_arg_advance\n \n #undef TARGET_EXPAND_BUILTIN_SAVEREGS\n #define TARGET_EXPAND_BUILTIN_SAVEREGS frv_expand_builtin_saveregs\n@@ -3190,12 +3202,10 @@ frv_function_arg_boundary (enum machine_mode mode ATTRIBUTE_UNUSED,\n   return BITS_PER_WORD;\n }\n \n-rtx\n-frv_function_arg (CUMULATIVE_ARGS *cum,\n-                  enum machine_mode mode,\n-                  tree type ATTRIBUTE_UNUSED,\n-                  int named,\n-                  int incoming ATTRIBUTE_UNUSED)\n+static rtx\n+frv_function_arg_1 (const CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t    const_tree type ATTRIBUTE_UNUSED, bool named,\n+\t\t    bool incoming ATTRIBUTE_UNUSED)\n {\n   enum machine_mode xmode = (mode == BLKmode) ? SImode : mode;\n   int arg_num = *cum;\n@@ -3229,6 +3239,20 @@ frv_function_arg (CUMULATIVE_ARGS *cum,\n   return ret;\n }\n \n+static rtx\n+frv_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t  const_tree type, bool named)\n+{\n+  return frv_function_arg_1 (cum, mode, type, named, false);\n+}\n+\n+static rtx\n+frv_function_incoming_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t\t   const_tree type, bool named)\n+{\n+  return frv_function_arg_1 (cum, mode, type, named, true);\n+}\n+\n \f\n /* A C statement (sans semicolon) to update the summarizer variable CUM to\n    advance past an argument in the argument list.  The values MODE, TYPE and\n@@ -3239,11 +3263,11 @@ frv_function_arg (CUMULATIVE_ARGS *cum,\n    the stack.  The compiler knows how to track the amount of stack space used\n    for arguments without any special help.  */\n \n-void\n+static void\n frv_function_arg_advance (CUMULATIVE_ARGS *cum,\n                           enum machine_mode mode,\n-                          tree type ATTRIBUTE_UNUSED,\n-                          int named)\n+                          const_tree type ATTRIBUTE_UNUSED,\n+                          bool named)\n {\n   enum machine_mode xmode = (mode == BLKmode) ? SImode : mode;\n   int bytes = GET_MODE_SIZE (xmode);"}, {"sha": "fc0f2930dc34bc3e9f87918528a3cb753427baea", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a1f47fae962c02535f5422d1298a385be92c86/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a1f47fae962c02535f5422d1298a385be92c86/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=88a1f47fae962c02535f5422d1298a385be92c86", "patch": "@@ -1546,23 +1546,6 @@ typedef struct frv_stack {\n \n #define FRV_NUM_ARG_REGS        6\n \n-#define FUNCTION_ARG(CUM, MODE, TYPE, NAMED)                    \\\n-  frv_function_arg (&CUM, MODE, TYPE, NAMED, FALSE)\n-\n-/* Define this macro if the target machine has \"register windows\", so that the\n-   register in which a function sees an arguments is not necessarily the same\n-   as the one in which the caller passed the argument.\n-\n-   For such machines, `FUNCTION_ARG' computes the register in which the caller\n-   passes the value, and `FUNCTION_INCOMING_ARG' should be defined in a similar\n-   fashion to tell the function being called where the arguments will arrive.\n-\n-   If `FUNCTION_INCOMING_ARG' is not defined, `FUNCTION_ARG' serves both\n-   purposes.  */\n-\n-#define FUNCTION_INCOMING_ARG(CUM, MODE, TYPE, NAMED)\t\t\t\\\n-  frv_function_arg (&CUM, MODE, TYPE, NAMED, TRUE)\n-\n /* A C type for declaring a variable that is used as the first argument of\n    `FUNCTION_ARG' and other related values.  For some target machines, the type\n    `int' suffices and can hold the number of bytes of argument so far.\n@@ -1605,17 +1588,6 @@ typedef struct frv_stack {\n #define INIT_CUMULATIVE_INCOMING_ARGS(CUM, FNTYPE, LIBNAME) \\\n   frv_init_cumulative_args (&CUM, FNTYPE, LIBNAME, NULL, TRUE)\n \n-/* A C statement (sans semicolon) to update the summarizer variable CUM to\n-   advance past an argument in the argument list.  The values MODE, TYPE and\n-   NAMED describe that argument.  Once this is done, the variable CUM is\n-   suitable for analyzing the *following* argument with `FUNCTION_ARG', etc.\n-\n-   This macro need not do anything if the argument in question was passed on\n-   the stack.  The compiler knows how to track the amount of stack space used\n-   for arguments without any special help.  */\n-#define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)\t\t\t\\\n-  frv_function_arg_advance (&CUM, MODE, TYPE, NAMED)\n-\n /* If defined, a C expression that gives the alignment boundary, in bits, of an\n    argument with the specified mode and type.  If it is not defined,\n    `PARM_BOUNDARY' is used for all arguments.  */"}]}