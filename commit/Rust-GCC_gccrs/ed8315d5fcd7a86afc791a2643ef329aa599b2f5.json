{"sha": "ed8315d5fcd7a86afc791a2643ef329aa599b2f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ4MzE1ZDVmY2Q3YTg2YWZjNzkxYTI2NDNlZjMyOWFhNTk5YjJmNQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-08-29T15:22:55Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-08-29T15:22:55Z"}, "message": "re PR libfortran/32989 (GETARG intrinsic)\n\n\tPR fortran/32989\n\n\t* iresolve.c (gfc_resolve_getarg): Handle non-default integer\n\tkinds.\n\t* check.c (gfc_check_getarg): New function\n\t* intrinsic.h: Add prototype for gfc_check_getarg.\n\t* intrinsic.c (add_subroutines): Add reference to gfc_check_getarg.\n\t* intrinsic.texi (GETARG): Adjust documentation.\n\n\t* gfortran.fortran-torture/execute/getarg_1.f90: Add check for\n\tnon-default integer kind arguments.\n\nFrom-SVN: r127905", "tree": {"sha": "774547a136c573b57623fceaa8560b1cbbe1cd1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/774547a136c573b57623fceaa8560b1cbbe1cd1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed8315d5fcd7a86afc791a2643ef329aa599b2f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed8315d5fcd7a86afc791a2643ef329aa599b2f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed8315d5fcd7a86afc791a2643ef329aa599b2f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed8315d5fcd7a86afc791a2643ef329aa599b2f5/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3f07bd6a09f916ff4497db5b7675b5891a5627d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3f07bd6a09f916ff4497db5b7675b5891a5627d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3f07bd6a09f916ff4497db5b7675b5891a5627d"}], "stats": {"total": 87, "additions": 71, "deletions": 16}, "files": [{"sha": "f87dc8fba8874fdd999e4eb6faeb598c992048de", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8315d5fcd7a86afc791a2643ef329aa599b2f5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8315d5fcd7a86afc791a2643ef329aa599b2f5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ed8315d5fcd7a86afc791a2643ef329aa599b2f5", "patch": "@@ -1,3 +1,13 @@\n+2007-08-29  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/32989\n+\t* iresolve.c (gfc_resolve_getarg): Handle non-default integer\n+\tkinds.\n+\t* check.c (gfc_check_getarg): New function\n+\t* intrinsic.h: Add prototype for gfc_check_getarg.\n+\t* intrinsic.c (add_subroutines): Add reference to gfc_check_getarg.\n+\t* intrinsic.texi (GETARG): Adjust documentation.\n+\n 2007-08-29  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \t    Tobias Burnus  <burnus@gcc.gnu.org>\n "}, {"sha": "ed824feb6a58a23bf7d968b27f805bea92157852", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8315d5fcd7a86afc791a2643ef329aa599b2f5/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8315d5fcd7a86afc791a2643ef329aa599b2f5/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=ed8315d5fcd7a86afc791a2643ef329aa599b2f5", "patch": "@@ -3233,6 +3233,28 @@ gfc_check_getcwd_sub (gfc_expr *cwd, gfc_expr *status)\n }\n \n \n+try\n+gfc_check_getarg (gfc_expr *pos, gfc_expr *value)\n+{\n+  if (type_check (pos, 0, BT_INTEGER) == FAILURE)\n+    return FAILURE;\n+\n+  if (pos->ts.kind > gfc_default_integer_kind)\n+    {\n+      gfc_error (\"'%s' argument of '%s' intrinsic at %L must be of a kind \"\n+\t\t \"not wider than the default kind (%d)\",\n+\t\t gfc_current_intrinsic_arg[0], gfc_current_intrinsic,\n+\t\t &pos->where, gfc_default_integer_kind);\n+      return FAILURE;\n+    }\n+\n+  if (type_check (value, 1, BT_CHARACTER) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+\n try\n gfc_check_getlog (gfc_expr *msg)\n {"}, {"sha": "0c5c17733325723b08d77e7dc4d25084e5d3a591", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8315d5fcd7a86afc791a2643ef329aa599b2f5/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8315d5fcd7a86afc791a2643ef329aa599b2f5/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=ed8315d5fcd7a86afc791a2643ef329aa599b2f5", "patch": "@@ -2377,7 +2377,7 @@ add_subroutines (void)\n     *val = \"value\", *num = \"number\", *name = \"name\",\n     *trim_name = \"trim_name\", *ut = \"unit\", *han = \"handler\",\n     *sec = \"seconds\", *res = \"result\", *of = \"offset\", *md = \"mode\",\n-    *whence = \"whence\";\n+    *whence = \"whence\", *pos = \"pos\";\n \n   int di, dr, dc, dl, ii;\n \n@@ -2461,8 +2461,8 @@ add_subroutines (void)\n \t      REQUIRED);\n \n   add_sym_2s (\"getarg\", GFC_ISYM_GETARG, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n-\t      NULL, NULL, gfc_resolve_getarg,\n-\t      c, BT_INTEGER, di, REQUIRED, vl, BT_CHARACTER, dc, REQUIRED);\n+\t      gfc_check_getarg, NULL, gfc_resolve_getarg,\n+\t      pos, BT_INTEGER, di, REQUIRED, val, BT_CHARACTER, dc, REQUIRED);\n \n   add_sym_1s (\"getlog\", GFC_ISYM_GETLOG, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_getlog, NULL, gfc_resolve_getlog, c, BT_CHARACTER,"}, {"sha": "1d2c6c1ab6b0518d6fd2f2ffc9b5af99da2d8d82", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8315d5fcd7a86afc791a2643ef329aa599b2f5/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8315d5fcd7a86afc791a2643ef329aa599b2f5/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=ed8315d5fcd7a86afc791a2643ef329aa599b2f5", "patch": "@@ -154,6 +154,7 @@ try gfc_check_flush (gfc_expr *);\n try gfc_check_free (gfc_expr *);\n try gfc_check_fstat_sub (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_gerror (gfc_expr *);\n+try gfc_check_getarg (gfc_expr *, gfc_expr *);\n try gfc_check_getlog (gfc_expr *);\n try gfc_check_move_alloc (gfc_expr *, gfc_expr *);\n try gfc_check_mvbits (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *,"}, {"sha": "876015b4f87b81c7fa24fbf8fe96e4f61e920668", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8315d5fcd7a86afc791a2643ef329aa599b2f5/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8315d5fcd7a86afc791a2643ef329aa599b2f5/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=ed8315d5fcd7a86afc791a2643ef329aa599b2f5", "patch": "@@ -4609,21 +4609,22 @@ GNU extension\n Subroutine\n \n @item @emph{Syntax}:\n-@code{CALL GETARG(N, ARG)}\n+@code{CALL GETARG(POS, VALUE)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{N}   @tab Shall be of type @code{INTEGER(4)}, @math{@var{N} \\geq 0}\n-@item @var{ARG} @tab Shall be of type @code{CHARACTER(*)}. \n+@item @var{POS}   @tab Shall be of type @code{INTEGER} and not wider than\n+the default integer kind; @math{@var{POS} \\geq 0}\n+@item @var{VALUE} @tab Shall be of type @code{CHARACTER(*)}. \n @end multitable\n \n @item @emph{Return value}:\n-After @code{GETARG} returns, the @var{ARG} argument holds the @var{N}th \n-command line argument. If @var{ARG} can not hold the argument, it is \n-truncated to fit the length of @var{ARG}. If there are less than @var{N}\n-arguments specified at the command line, @var{ARG} will be filled with blanks.\n-If @math{@var{N} = 0}, @var{ARG} is set to the name of the program (on systems\n-that support this feature).\n+After @code{GETARG} returns, the @var{VALUE} argument holds the\n+@var{POS}th command line argument. If @var{VALUE} can not hold the\n+argument, it is truncated to fit the length of @var{VALUE}. If there are\n+less than @var{POS} arguments specified at the command line, @var{VALUE}\n+will be filled with blanks. If @math{@var{POS} = 0}, @var{VALUE} is set\n+to the name of the program (on systems that support this feature).\n \n @item @emph{Example}:\n @smallexample"}, {"sha": "73f5d73bc455b1f141722d078e4bc93650b0e151", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8315d5fcd7a86afc791a2643ef329aa599b2f5/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8315d5fcd7a86afc791a2643ef329aa599b2f5/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=ed8315d5fcd7a86afc791a2643ef329aa599b2f5", "patch": "@@ -2675,9 +2675,18 @@ void\n gfc_resolve_getarg (gfc_code *c)\n {\n   const char *name;\n-  int kind;\n-  kind = gfc_default_integer_kind;\n-  name = gfc_get_string (PREFIX (\"getarg_i%d\"), kind);\n+\n+  if (c->ext.actual->expr->ts.kind != gfc_default_integer_kind)\n+    {\n+      gfc_typespec ts;\n+\n+      ts.type = BT_INTEGER;\n+      ts.kind = gfc_default_integer_kind;\n+\n+      gfc_convert_type (c->ext.actual->expr, &ts, 2);\n+    }\n+\n+  name = gfc_get_string (PREFIX (\"getarg_i%d\"), gfc_default_integer_kind);\n   c->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n }\n "}, {"sha": "8390c4b67fe707b3e5d08953dfdf6978dde15d43", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8315d5fcd7a86afc791a2643ef329aa599b2f5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8315d5fcd7a86afc791a2643ef329aa599b2f5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ed8315d5fcd7a86afc791a2643ef329aa599b2f5", "patch": "@@ -1,3 +1,9 @@\n+2007-08-29  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/32989\n+\t* gfortran.fortran-torture/execute/getarg_1.f90: Add check for\n+\tnon-default integer kind arguments.\n+\n 2007-08-29  Tobias Burnus  <burnus@gcc.gnu.org>\n \n \tPR fortran/33105"}, {"sha": "7189991f7ebb630ae51cae6568e07b06dfb94922", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/getarg_1.f90", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8315d5fcd7a86afc791a2643ef329aa599b2f5/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fgetarg_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8315d5fcd7a86afc791a2643ef329aa599b2f5/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fgetarg_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fgetarg_1.f90?ref=ed8315d5fcd7a86afc791a2643ef329aa599b2f5", "patch": "@@ -1,12 +1,18 @@\n ! Check that getarg does somethig sensible.\n program getarg_1\n-  CHARACTER*10 ARGS\n+  CHARACTER*10 ARGS, ARGS2\n   INTEGER*4 I\n+  INTEGER*2 I2\n   I = 0\n   CALL GETARG(I,ARGS)\n   ! This should return the invoking command.  The actual value depends \n   ! on the OS, but a blank string is wrong no matter what.\n   ! ??? What about deep embedded systems?\n+\n+  I2 = 0\n+  CALL GETARG(I2,ARGS2)\n+  if (args2.ne.args) call abort\n+\n   if (args.eq.'') call abort\n   I = 1\n   CALL GETARG(I,ARGS)"}]}