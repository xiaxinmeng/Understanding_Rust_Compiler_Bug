{"sha": "271eeb1818da892c0143019e29d20780dcadac8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcxZWViMTgxOGRhODkyYzAxNDMwMTllMjlkMjA3ODBkY2FkYWM4ZQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2017-11-17T17:26:43Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-11-17T17:26:43Z"}, "message": "gimple-ssa-evrp.c (evrp_dom_walker): Add cleanup method.\n\n\t* gimple-ssa-evrp.c (evrp_dom_walker): Add cleanup method.\n\tAdd private copy constructor and move assignment operators.\n\tPrivatize methods and class data where trivially possible.\n\t(evrp_dom_walker::cleanup): New function, extracted from\n\texecute_early_vrp.  Simplify access to class data.\n\nFrom-SVN: r254882", "tree": {"sha": "fd6ecc1600e32401083f09cd6a390432373ece05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd6ecc1600e32401083f09cd6a390432373ece05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/271eeb1818da892c0143019e29d20780dcadac8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/271eeb1818da892c0143019e29d20780dcadac8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/271eeb1818da892c0143019e29d20780dcadac8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/271eeb1818da892c0143019e29d20780dcadac8e/comments", "author": null, "committer": null, "parents": [{"sha": "00fbd2ddc4d9ac01508f4ce0ce021f9d6663a93e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00fbd2ddc4d9ac01508f4ce0ce021f9d6663a93e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00fbd2ddc4d9ac01508f4ce0ce021f9d6663a93e"}], "stats": {"total": 86, "additions": 53, "deletions": 33}, "files": [{"sha": "e947df58c131a376a11c8968e871cd9365aa0d03", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/271eeb1818da892c0143019e29d20780dcadac8e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/271eeb1818da892c0143019e29d20780dcadac8e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=271eeb1818da892c0143019e29d20780dcadac8e", "patch": "@@ -1,5 +1,11 @@\n 2017-11-17  Jeff Law  <law@redhat.com>\n \n+\t* gimple-ssa-evrp.c (evrp_dom_walker): Add cleanup method.\n+\tAdd private copy constructor and move assignment operators.\n+\tPrivatize methods and class data where trivially possible.\n+\t(evrp_dom_walker::cleanup): New function, extracted from\n+\texecute_early_vrp.  Simplify access to class data.\n+\n \t* vr-values.h (get_output_for_vrp): Prototype.\n \t* vr-values.c (get_output_for_vrp): New function extracted from\n \tvrp_visit_assignment_or_call and extract_range_from_stmt."}, {"sha": "029752ecd40aa60439a15e4ee724f1f798fe654d", "filename": "gcc/gimple-ssa-evrp.c", "status": "modified", "additions": 47, "deletions": 33, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/271eeb1818da892c0143019e29d20780dcadac8e/gcc%2Fgimple-ssa-evrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/271eeb1818da892c0143019e29d20780dcadac8e/gcc%2Fgimple-ssa-evrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-evrp.c?ref=271eeb1818da892c0143019e29d20780dcadac8e", "patch": "@@ -73,11 +73,15 @@ class evrp_dom_walker : public dom_walker\n     }\n   virtual edge before_dom_children (basic_block);\n   virtual void after_dom_children (basic_block);\n+  void cleanup (void);\n+\n+ private:\n+  DISABLE_COPY_AND_ASSIGN (evrp_dom_walker);\n   void push_value_range (tree var, value_range *vr);\n   value_range *pop_value_range (tree var);\n   value_range *try_find_new_range (tree, tree op, tree_code code, tree limit);\n \n-  /* Cond_stack holds the old VR.  */\n+  /* STACK holds the old VR.  */\n   auto_vec<std::pair <tree, value_range*> > stack;\n   bitmap need_eh_cleanup;\n   auto_vec<gimple *> stmts_to_fixup;\n@@ -509,44 +513,22 @@ evrp_dom_walker::pop_value_range (tree var)\n   return vr;\n }\n \n+/* Perform any cleanups after the main phase of EVRP has completed.  */\n \n-/* Main entry point for the early vrp pass which is a simplified non-iterative\n-   version of vrp where basic blocks are visited in dominance order.  Value\n-   ranges discovered in early vrp will also be used by ipa-vrp.  */\n-\n-static unsigned int\n-execute_early_vrp ()\n+void\n+evrp_dom_walker::cleanup (void)\n {\n-  edge e;\n-  edge_iterator ei;\n-  basic_block bb;\n-\n-  loop_optimizer_init (LOOPS_NORMAL | LOOPS_HAVE_RECORDED_EXITS);\n-  rewrite_into_loop_closed_ssa (NULL, TODO_update_ssa);\n-  scev_initialize ();\n-  calculate_dominance_info (CDI_DOMINATORS);\n-  FOR_EACH_BB_FN (bb, cfun)\n-    {\n-      bb->flags &= ~BB_VISITED;\n-      FOR_EACH_EDGE (e, ei, bb->preds)\n-\te->flags |= EDGE_EXECUTABLE;\n-    }\n-\n-  /* Walk stmts in dominance order and propagate VRP.  */\n-  evrp_dom_walker walker;\n-  walker.walk (ENTRY_BLOCK_PTR_FOR_FN (cfun));\n-\n   if (dump_file)\n     {\n       fprintf (dump_file, \"\\nValue ranges after Early VRP:\\n\\n\");\n-      walker.vr_values.dump_all_value_ranges (dump_file);\n+      vr_values.dump_all_value_ranges (dump_file);\n       fprintf (dump_file, \"\\n\");\n     }\n \n   /* Remove stmts in reverse order to make debug stmt creation possible.  */\n-  while (! walker.stmts_to_remove.is_empty ())\n+  while (! stmts_to_remove.is_empty ())\n     {\n-      gimple *stmt = walker.stmts_to_remove.pop ();\n+      gimple *stmt = stmts_to_remove.pop ();\n       if (dump_file && dump_flags & TDF_DETAILS)\n \t{\n \t  fprintf (dump_file, \"Removing dead stmt \");\n@@ -564,18 +546,50 @@ execute_early_vrp ()\n \t}\n     }\n \n-  if (!bitmap_empty_p (walker.need_eh_cleanup))\n-    gimple_purge_all_dead_eh_edges (walker.need_eh_cleanup);\n+  if (!bitmap_empty_p (need_eh_cleanup))\n+    gimple_purge_all_dead_eh_edges (need_eh_cleanup);\n \n   /* Fixup stmts that became noreturn calls.  This may require splitting\n      blocks and thus isn't possible during the dominator walk.  Do this\n      in reverse order so we don't inadvertedly remove a stmt we want to\n      fixup by visiting a dominating now noreturn call first.  */\n-  while (!walker.stmts_to_fixup.is_empty ())\n+  while (!stmts_to_fixup.is_empty ())\n     {\n-      gimple *stmt = walker.stmts_to_fixup.pop ();\n+      gimple *stmt = stmts_to_fixup.pop ();\n       fixup_noreturn_call (stmt);\n     }\n+}\n+\n+/* Main entry point for the early vrp pass which is a simplified non-iterative\n+   version of vrp where basic blocks are visited in dominance order.  Value\n+   ranges discovered in early vrp will also be used by ipa-vrp.  */\n+\n+static unsigned int\n+execute_early_vrp ()\n+{\n+  edge e;\n+  edge_iterator ei;\n+  basic_block bb;\n+\n+  /* Ideally this setup code would move into the ctor for the dominator\n+     walk.  However, this setup can change the number of blocks which\n+     invalidates the internal arrays that are set up by the dominator\n+     walker.  */\n+  loop_optimizer_init (LOOPS_NORMAL | LOOPS_HAVE_RECORDED_EXITS);\n+  rewrite_into_loop_closed_ssa (NULL, TODO_update_ssa);\n+  scev_initialize ();\n+  calculate_dominance_info (CDI_DOMINATORS);\n+  FOR_EACH_BB_FN (bb, cfun)\n+    {\n+      bb->flags &= ~BB_VISITED;\n+      FOR_EACH_EDGE (e, ei, bb->preds)\n+\te->flags |= EDGE_EXECUTABLE;\n+    }\n+\n+  /* Walk stmts in dominance order and propagate VRP.  */\n+  evrp_dom_walker walker;\n+  walker.walk (ENTRY_BLOCK_PTR_FOR_FN (cfun));\n+  walker.cleanup ();\n \n   scev_finalize ();\n   loop_optimizer_finalize ();"}]}