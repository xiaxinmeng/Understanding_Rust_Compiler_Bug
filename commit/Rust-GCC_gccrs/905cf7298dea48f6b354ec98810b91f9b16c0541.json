{"sha": "905cf7298dea48f6b354ec98810b91f9b16c0541", "node_id": "C_kwDOANBUbNoAKDkwNWNmNzI5OGRlYTQ4ZjZiMzU0ZWM5ODgxMGI5MWY5YjE2YzA1NDE", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-02-15T16:57:09Z"}, "committer": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-03-30T11:52:30Z"}, "message": "libproc_macro: Add Punct rust type implementation\n\nAdd the implementation for the Punct rust type in libproc_macro.\nChangeLog:\n\n\t* librust/proc_macro/rust/bridge.rs: Add punct module.\n\t* librust/proc_macro/rust/punct.rs: Add Punct bridge.\n\t* librust/proc_macro/rust/bridge/punct.rs: Add Punct internals.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "6044c6f67151c02fe6dc57e60853a085b6fe6359", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6044c6f67151c02fe6dc57e60853a085b6fe6359"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/905cf7298dea48f6b354ec98810b91f9b16c0541", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/905cf7298dea48f6b354ec98810b91f9b16c0541", "html_url": "https://github.com/Rust-GCC/gccrs/commit/905cf7298dea48f6b354ec98810b91f9b16c0541", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/905cf7298dea48f6b354ec98810b91f9b16c0541/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95016480c62e0c26d0456282344f48a55ce74f3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95016480c62e0c26d0456282344f48a55ce74f3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95016480c62e0c26d0456282344f48a55ce74f3c"}], "stats": {"total": 56, "additions": 40, "deletions": 16}, "files": [{"sha": "b3b28c0237f6751219e4ae39e9be80c5fcc5f69a", "filename": "librust/proc_macro/rust/bridge.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/905cf7298dea48f6b354ec98810b91f9b16c0541/librust%2Fproc_macro%2Frust%2Fbridge.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/905cf7298dea48f6b354ec98810b91f9b16c0541/librust%2Fproc_macro%2Frust%2Fbridge.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Fbridge.rs?ref=905cf7298dea48f6b354ec98810b91f9b16c0541", "patch": "@@ -1,2 +1,3 @@\n pub mod ident;\n+pub mod punct;\n pub mod span;"}, {"sha": "57487eac93047aafdbde5ba05f1897ada69bfe16", "filename": "librust/proc_macro/rust/bridge/punct.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/905cf7298dea48f6b354ec98810b91f9b16c0541/librust%2Fproc_macro%2Frust%2Fbridge%2Fpunct.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/905cf7298dea48f6b354ec98810b91f9b16c0541/librust%2Fproc_macro%2Frust%2Fbridge%2Fpunct.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Fbridge%2Fpunct.rs?ref=905cf7298dea48f6b354ec98810b91f9b16c0541", "patch": "@@ -0,0 +1,23 @@\n+use bridge::span::Span;\n+use Spacing;\n+\n+#[repr(C)]\n+#[derive(Clone, Debug)]\n+pub struct Punct {\n+    pub(crate) ch: char,\n+    pub(crate) spacing: Spacing,\n+}\n+\n+impl Punct {\n+    pub fn new(ch: char, spacing: Spacing) -> Self {\n+        Punct { ch, spacing }\n+    }\n+\n+    pub fn span(&self) -> Span {\n+        Span {}\n+    }\n+\n+    pub fn set_span(&mut self, span: Span) {\n+        let _ = span;\n+    }\n+}"}, {"sha": "cbd64fc55a5a30d8858a6aaa7dd6579a567277f6", "filename": "librust/proc_macro/rust/punct.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/905cf7298dea48f6b354ec98810b91f9b16c0541/librust%2Fproc_macro%2Frust%2Fpunct.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/905cf7298dea48f6b354ec98810b91f9b16c0541/librust%2Fproc_macro%2Frust%2Fpunct.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Fpunct.rs?ref=905cf7298dea48f6b354ec98810b91f9b16c0541", "patch": "@@ -1,7 +1,9 @@\n+use bridge;\n use std::fmt;\n use Span;\n \n /// Describes the context of a [`Punct`] relatively to the next token.\n+#[repr(C)]\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub enum Spacing {\n     /// A [`Punct`] is not immediately followed by another `Punct`.\n@@ -16,9 +18,7 @@ pub enum Spacing {\n /// Multi-character operators like `+=` are represented as two instances of\n /// `Punct` with different forms of `Spacing` returned.\n #[derive(Clone)]\n-pub struct Punct {\n-    // Internal implementation details.\n-}\n+pub struct Punct(pub(crate) bridge::punct::Punct);\n \n impl Punct {\n     /// Creates a new `Punct` from a given character and spacing.\n@@ -32,34 +32,34 @@ impl Punct {\n     ///\n     /// This function will panic if the `ch` argument is not a valid\n     /// punctuation character allowed by the language.\n-    pub fn new(_ch: char, _spacing: Spacing) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn new(ch: char, spacing: Spacing) -> Self {\n+        Punct(bridge::punct::Punct::new(ch, spacing))\n     }\n \n     /// Get the value for this punctuation character as `char`.\n     pub fn as_char(&self) -> char {\n-        todo!(\"Implement this function\")\n+        self.0.ch\n     }\n \n     /// Get the [`Spacing`] of this punctuation character, indicating whether\n     /// the following character can be combined into a multi-character operator\n     /// or not.\n     pub fn spacing(&self) -> Spacing {\n-        todo!(\"Implement this function\")\n+        self.0.spacing\n     }\n \n     /// Get the [`Span`] for this punctuation character.\n     pub fn span(&self) -> Span {\n-        todo!(\"Implement this function\")\n+        Span(self.0.span())\n     }\n \n     /// Set the span for this punctuation character.\n     ///\n     /// # Arguments\n     ///\n     /// * `span` - The new span value.\n-    pub fn set_span(&mut self, _span: Span) {\n-        todo!(\"Implement this function\")\n+    pub fn set_span(&mut self, span: Span) {\n+        self.0.set_span(span.0);\n     }\n }\n \n@@ -70,19 +70,19 @@ impl fmt::Display for Punct {\n }\n \n impl fmt::Debug for Punct {\n-    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        todo!(\"Implement this function\")\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        self.0.fmt(f)\n     }\n }\n \n impl PartialEq<char> for Punct {\n-    fn eq(&self, _rhs: &char) -> bool {\n-        todo!(\"Implement this function\")\n+    fn eq(&self, rhs: &char) -> bool {\n+        self.0.ch == *rhs\n     }\n }\n \n impl PartialEq<Punct> for char {\n-    fn eq(&self, _rhs: &Punct) -> bool {\n-        todo!(\"Implement this function\")\n+    fn eq(&self, rhs: &Punct) -> bool {\n+        *self == rhs.0.ch\n     }\n }"}]}