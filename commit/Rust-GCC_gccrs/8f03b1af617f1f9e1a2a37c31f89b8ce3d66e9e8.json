{"sha": "8f03b1af617f1f9e1a2a37c31f89b8ce3d66e9e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYwM2IxYWY2MTdmMWY5ZTFhMmEzN2MzMWY4OWI4Y2UzZDY2ZTllOA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-07-13T12:40:00Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-07-13T12:40:00Z"}, "message": "Remove last change.\n\nFrom-SVN: r7764", "tree": {"sha": "43b22d5aeb73fbdb43ced74575f1082a7403db9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43b22d5aeb73fbdb43ced74575f1082a7403db9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f03b1af617f1f9e1a2a37c31f89b8ce3d66e9e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f03b1af617f1f9e1a2a37c31f89b8ce3d66e9e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f03b1af617f1f9e1a2a37c31f89b8ce3d66e9e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f03b1af617f1f9e1a2a37c31f89b8ce3d66e9e8/comments", "author": null, "committer": null, "parents": [{"sha": "4c7bdca61729c4ae0a2393564fe24689094abc40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c7bdca61729c4ae0a2393564fe24689094abc40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c7bdca61729c4ae0a2393564fe24689094abc40"}], "stats": {"total": 18, "additions": 0, "deletions": 18}, "files": [{"sha": "fc611902aa4d9036d39dcf0ee0d98822b836cf25", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f03b1af617f1f9e1a2a37c31f89b8ce3d66e9e8/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f03b1af617f1f9e1a2a37c31f89b8ce3d66e9e8/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=8f03b1af617f1f9e1a2a37c31f89b8ce3d66e9e8", "patch": "@@ -3751,24 +3751,6 @@ fold (expr)\n \t      && operand_equal_p (TREE_OPERAND (arg0, 1), arg1, 0))\n \t    return TREE_OPERAND (arg0, 0);\n \n-\t  /* If we have ((A / C1) * C2) with C1 and C2 constant,\n-\t     C2 >= C1, and the division an unsigned CEIL_DIV_EXPR,\n-\t     we know that the addition that's part of the CEIL_DIV_EXPR\n-\t     cannot overflow while the generic CEIL_DIV_EXPR does not.\n-\t     So convert it into a TRUNC_DIV_EXPR of an add.  */\n-\t  if (TREE_CODE (arg0) == CEIL_DIV_EXPR && TREE_UNSIGNED (type)\n-\t      && TREE_CODE (arg1) == INTEGER_CST\n-\t      && TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST\n-\t      && ! tree_int_cst_lt (arg1, TREE_OPERAND (arg0, 1)))\n-\t    return\n-\t      build (MULT_EXPR, type,\n-\t\t     build (TRUNC_DIV_EXPR, type,\n-\t\t\t    build (PLUS_EXPR, type,\n-\t\t\t\t   TREE_OPERAND (TREE_OPERAND (arg0, 0), 0)),\n-\t\t\t    const_binop (MINUS_EXPR, TREE_OPERAND (arg0, 1),\n-\t\t\t\t\t integer_one_node, 0)),\n-\t\t     arg1);\n-\t\t\t\t \n \t  /* (a * (1 << b)) is (a << b)  */\n \t  if (TREE_CODE (arg1) == LSHIFT_EXPR\n \t      && integer_onep (TREE_OPERAND (arg1, 0)))"}]}