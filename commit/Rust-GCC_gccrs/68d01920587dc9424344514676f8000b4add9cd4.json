{"sha": "68d01920587dc9424344514676f8000b4add9cd4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhkMDE5MjA1ODdkYzk0MjQzNDQ1MTQ2NzZmODAwMGI0YWRkOWNkNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-10-15T21:25:55Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-10-15T21:25:55Z"}, "message": "PR c++/77945 - constexpr and trivial copy\n\n\t* constexpr.c (maybe_simplify_trivial_copy): New.\n\t(cxx_eval_store_expression): Call it.\n\t* call.c (build_over_call): Use unsigned char for trivial copy.\n\nFrom-SVN: r241204", "tree": {"sha": "c94ec9046c17252cbf66d9b7b135d8464b37c85c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c94ec9046c17252cbf66d9b7b135d8464b37c85c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68d01920587dc9424344514676f8000b4add9cd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68d01920587dc9424344514676f8000b4add9cd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68d01920587dc9424344514676f8000b4add9cd4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68d01920587dc9424344514676f8000b4add9cd4/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f9e9d32f79409fd2f4d7bc73d3576a33fac9b715", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9e9d32f79409fd2f4d7bc73d3576a33fac9b715", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9e9d32f79409fd2f4d7bc73d3576a33fac9b715"}], "stats": {"total": 46, "additions": 45, "deletions": 1}, "files": [{"sha": "54ffee800429e49735027ba3b57c7c9f150675cb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d01920587dc9424344514676f8000b4add9cd4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d01920587dc9424344514676f8000b4add9cd4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=68d01920587dc9424344514676f8000b4add9cd4", "patch": "@@ -1,3 +1,10 @@\n+2016-10-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/77945\n+\t* constexpr.c (maybe_simplify_trivial_copy): New.\n+\t(cxx_eval_store_expression): Call it.\n+\t* call.c (build_over_call): Use unsigned char for trivial copy.\n+\n 2016-10-14  Jason Merrill  <jason@redhat.com>\n \n \tImplement P0017R1, C++17 aggregates with bases."}, {"sha": "4c19d2ffcd381beab145cb04cd8d007a2f332b09", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d01920587dc9424344514676f8000b4add9cd4/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d01920587dc9424344514676f8000b4add9cd4/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=68d01920587dc9424344514676f8000b4add9cd4", "patch": "@@ -7909,7 +7909,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \t  arg2 = TYPE_SIZE_UNIT (as_base);\n \t  arg0 = cp_build_addr_expr (to, complain);\n \n-\t  array_type = build_array_type (char_type_node,\n+\t  array_type = build_array_type (unsigned_char_type_node,\n \t\t\t\t\t build_index_type\n \t\t\t\t\t   (size_binop (MINUS_EXPR,\n \t\t\t\t\t\t\targ2, size_int (1))));"}, {"sha": "3c4fcfaeef931b0568ab0691d7b885ca22e6550e", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d01920587dc9424344514676f8000b4add9cd4/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d01920587dc9424344514676f8000b4add9cd4/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=68d01920587dc9424344514676f8000b4add9cd4", "patch": "@@ -3206,6 +3206,26 @@ var_in_maybe_constexpr_fn (tree t)\n   return var_in_constexpr_fn (t);\n }\n \n+/* We're assigning INIT to TARGET.  In do_build_copy_constructor and\n+   build_over_call we implement trivial copy of a class with tail padding using\n+   assignment of character arrays, which is valid in normal code, but not in\n+   constexpr evaluation.  We don't need to worry about clobbering tail padding\n+   in constexpr evaluation, so strip the type punning.  */\n+\n+static void\n+maybe_simplify_trivial_copy (tree &target, tree &init)\n+{\n+  if (TREE_CODE (target) == MEM_REF\n+      && TREE_CODE (init) == MEM_REF\n+      && TREE_TYPE (target) == TREE_TYPE (init)\n+      && TREE_CODE (TREE_TYPE (target)) == ARRAY_TYPE\n+      && TREE_TYPE (TREE_TYPE (target)) == unsigned_char_type_node)\n+    {\n+      target = build_fold_indirect_ref (TREE_OPERAND (target, 0));\n+      init = build_fold_indirect_ref (TREE_OPERAND (init, 0));\n+    }\n+}\n+\n /* Evaluate an INIT_EXPR or MODIFY_EXPR.  */\n \n static tree\n@@ -3222,6 +3242,9 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n \n   /* First we figure out where we're storing to.  */\n   tree target = TREE_OPERAND (t, 0);\n+\n+  maybe_simplify_trivial_copy (target, init);\n+\n   tree type = TREE_TYPE (target);\n   target = cxx_eval_constant_expression (ctx, target,\n \t\t\t\t\t true,"}, {"sha": "d24111465e391b95a6be126a5b9d1e240bd0e83a", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-trivial2.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d01920587dc9424344514676f8000b4add9cd4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-trivial2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d01920587dc9424344514676f8000b4add9cd4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-trivial2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-trivial2.C?ref=68d01920587dc9424344514676f8000b4add9cd4", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/77945\n+// { dg-do compile { target c++11 } }\n+\n+struct T \n+{ \n+    int x = 0; \n+    bool y = 0; \n+    constexpr T() {}\n+};\n+\n+int main()\n+{\n+    constexpr T t = (T{} = T{});\n+}"}]}