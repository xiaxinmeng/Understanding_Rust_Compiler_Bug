{"sha": "e59f7d3da148f6cd979808d1b5342b507a3918df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU5ZjdkM2RhMTQ4ZjZjZDk3OTgwOGQxYjUzNDJiNTA3YTM5MThkZg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-11-11T05:56:47Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-11-11T05:56:47Z"}, "message": "unicosmk.h (ASM_OUTPUT_DOUBLE, [...]): Fix format specifier warning.\n\n\t* alpha/unicosmk.h (ASM_OUTPUT_DOUBLE, ASM_OUTPUT_FLOAT): Fix\n\tformat specifier warning.\n\t* convex.h (ASM_OUTPUT_BYTE): Likewise.\n\t* elfos.h (ALIGN_ASM_OP): Undef before defining.\n\t* i386/att.h (ASM_GENERATE_INTERNAL_LABEL): Fix format specifier\n\twarning.\n\t* i386/bsd.h (ASM_GENERATE_INTERNAL_LABEL): Likewise.\n\t* i386/gas.h (ASM_GENERATE_INTERNAL_LABEL): Likewise.\n\t* i386-interix.h (gen_stdcall_suffix): Prototype.\n\t* i386.h (ASM_OUTPUT_BYTE): Fix format specifier warning.\n\t* i386elf.h (ASM_OUTPUT_FLOAT, ASM_OUTPUT_DOUBLE,\n\tASM_OUTPUT_LONG_DOUBLE): Likewise.\n\t* i386/interix.c (gen_stdcall_suffix): Const-ify.\n\t* i386/next.h (ASM_OUTPUT_LONG_DOUBLE, ASM_OUTPUT_DOUBLE,\n\tASM_OUTPUT_FLOAT, ASM_GENERATE_INTERNAL_LABEL): Fix format\n\tspecifier warnings.\n\t* i386/osfrose.h (ASM_GENERATE_INTERNAL_LABEL): Likewise.\n\t* i386/ptx4-i.h (ASM_OUTPUT_FLOAT, ASM_OUTPUT_DOUBLE,\n\tASM_OUTPUT_LONG_DOUBLE): Likewise.\n\t* i386/sco5.h (ASM_GENERATE_INTERNAL_LABEL): Likewise.\n\t* i386/sequent.h (ASM_GENERATE_INTERNAL_LABEL): Likewise.\n\t* i386/sun386.h (ASM_GENERATE_INTERNAL_LABEL): Likewise.\n\t* i386/svr3dbx.h (ASM_GENERATE_INTERNAL_LABEL): Likewise.\n\t* m68k/3b1.h (ASM_OUTPUT_DOUBLE, ASM_OUTPUT_LONG_DOUBLE,\n\tASM_OUTPUT_FLOAT, ASM_GENERATE_INTERNAL_LABEL): Likewise.\n\t* m68k/altos3068.h (ASM_OUTPUT_FLOAT_OPERAND): Likewise.\n\t* m68k/amix.h (ASM_OUTPUT_ASCII, ASM_GENERATE_INTERNAL_LABEL):\n\tLikewise.\n\t* m68k/atari.h (ASM_OUTPUT_ASCII, ASM_GENERATE_INTERNAL_LABEL):\n\tLikewise.\n\t* m68k/crds.h (ASM_OUTPUT_DOUBLE, PRINT_OPERAND): Likewise.\n\t* m68k/dpx2.h (ASM_OUTPUT_LONG_DOUBLE, ASM_OUTPUT_DOUBLE,\n\tASM_OUTPUT_FLOAT, ASM_OUTPUT_BYTE, ASM_OUTPUT_FLOAT_OPERAND):\n\tLikewise.\n\t* m68k/hp320.h (ASM_OUTPUT_LONG_DOUBLE, ASM_OUTPUT_BYTE):\n\tLikewise.\n\t* m68k.h (ASM_GENERATE_INTERNAL_LABEL, ASM_OUTPUT_BYTE):\n\tLikewise.\n\t* m68k/m68kv4.h (ASM_OUTPUT_ASCII): Delete unused variable.\n\t* m68k/mot3300.h (ASM_OUTPUT_BYTE): Fix format specifier warning.\n\t* m68k/news.h (PRINT_OPERAND): Likewise.\n\t* m68k/next.h (ASM_OUTPUT_DOUBLE, ASM_OUTPUT_FLOAT,\n\tASM_OUTPUT_FLOAT_OPERAND, ASM_OUTPUT_DOUBLE_OPERAND): Likewise.\n\t* m68k/next21.h (ASM_OUTPUT_FLOAT_OPERAND): Likewise.\n\t* m68k/plexus.h (ASM_SPEC): Insert space between macro name and\n\tdefinition.\n\t* m68k/sgs.h (ASM_OUTPUT_LONG_DOUBLE, ASM_OUTPUT_DOUBLE,\n\tASM_OUTPUT_FLOAT, ASM_OUTPUT_ASCII, ASM_OUTPUT_FLOAT_OPERAND,\n\tASM_OUTPUT_DOUBLE_OPERAND): Fix format specifier warnings.\n\t* m68k/sun3.h (ASM_OUTPUT_FLOAT_OPERAND): Likewise.\n\t* m68k/tower-as.h (ASM_GENERATE_INTERNAL_LABEL, ASM_OUTPUT_DOUBLE,\n\tASM_OUTPUT_LONG_DOUBLE, ASM_OUTPUT_FLOAT, ASM_OUTPUT_BYTE,\n\tPRINT_OPERAND): Likewise.\n\t* m88k/m88k.h (ASM_GENERATE_INTERNAL_LABEL, ASM_OUTPUT_BYTE):\n\tLikewise.\n\t* mips/elf.h (PUT_SDB_SIZE, ASM_DECLARE_OBJECT_NAME): Likewise.\n\t* mips/elf64.h (PUT_SDB_SIZE, ASM_DECLARE_OBJECT_NAME): Likewise.\n\t* mips/iris5gas.h (PUT_SDB_SIZE): Likewise.\n\t* mips/linux.h (ASM_DECLARE_OBJECT_NAME): Likewise.\n\t* mips.c (mips_output_external_libcall): Mark parameter with\n\tATTRIBUTE_UNUSED.\n\t(mips_asm_file_start): Move variable into the scope where it's\n\tused.\n\t* mips.h (PUT_SDB_INT_VAL, PUT_SDB_SIZE): Likewise.\n\t* mips/netbsd.h (ASM_DECLARE_OBJECT_NAME): Likewise.\n\t* mips/sni-gas.h (PUT_SDB_SIZE): Likewise.\n\t* ns32k/encore.h (ASM_GENERATE_INTERNAL_LABEL): Likewise.\n\t* ns32k.c (print_operand): Likewise.\n\t* pa.c (print_operand, output_div_insn): Likewise.\n\t* pa.h (ASM_OUTPUT_MI_THUNK, ASM_GENERATE_INTERNAL_LABEL,\n\tASM_OUTPUT_BYTE, PRINT_OPERAND_ADDRESS): Likewise.\n\t* pa/pa64-hpux.h (UNIQUE_SECTION): Const-ify.\n\t* sparc/linux.h (ASM_GENERATE_INTERNAL_LABEL): Fix format\n\tspecifier warnings.\n\t* sparc/linux64.h (ASM_GENERATE_INTERNAL_LABEL): Likewise.\n\t* sparc/pbd.h (ASM_GENERATE_INTERNAL_LABEL): Likewise.\n\t(ASM_OUTPUT_SOURCE_LINE): Don't list macro arguments in undef.\n\t* sparc/vxsim.h (ASM_GENERATE_INTERNAL_LABEL): Fix format\n\tspecifier warnings.\n\t* svr3.h (ASM_GENERATE_INTERNAL_LABEL): Likewise.\n\n\t* sdbout.c (sdbout_end_epilogue): Mark parameter with\n\tATTRIBUTE_UNUSED.\n\t* varasm.c (assemble_global): Likewise.\n\nFrom-SVN: r46922", "tree": {"sha": "95474a2715b7f90c6ffc078b9baa0ff980975fc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95474a2715b7f90c6ffc078b9baa0ff980975fc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e59f7d3da148f6cd979808d1b5342b507a3918df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e59f7d3da148f6cd979808d1b5342b507a3918df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e59f7d3da148f6cd979808d1b5342b507a3918df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e59f7d3da148f6cd979808d1b5342b507a3918df/comments", "author": null, "committer": null, "parents": [{"sha": "3e619f14331e9c3daa0af310640ef182e9e75e23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e619f14331e9c3daa0af310640ef182e9e75e23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e619f14331e9c3daa0af310640ef182e9e75e23"}], "stats": {"total": 374, "additions": 249, "deletions": 125}, "files": [{"sha": "e2782cb351a7692531917c7d29d028e0b4597b0f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -1,3 +1,90 @@\n+2001-11-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* alpha/unicosmk.h (ASM_OUTPUT_DOUBLE, ASM_OUTPUT_FLOAT): Fix\n+\tformat specifier warning.\n+\t* convex.h (ASM_OUTPUT_BYTE): Likewise.\n+\t* elfos.h (ALIGN_ASM_OP): Undef before defining.\n+\t* i386/att.h (ASM_GENERATE_INTERNAL_LABEL): Fix format specifier\n+\twarning.\n+\t* i386/bsd.h (ASM_GENERATE_INTERNAL_LABEL): Likewise.\n+\t* i386/gas.h (ASM_GENERATE_INTERNAL_LABEL): Likewise.\n+\t* i386-interix.h (gen_stdcall_suffix): Prototype.\n+\t* i386.h (ASM_OUTPUT_BYTE): Fix format specifier warning.\n+\t* i386elf.h (ASM_OUTPUT_FLOAT, ASM_OUTPUT_DOUBLE,\n+\tASM_OUTPUT_LONG_DOUBLE): Likewise.\n+\t* i386/interix.c (gen_stdcall_suffix): Const-ify.\n+\t* i386/next.h (ASM_OUTPUT_LONG_DOUBLE, ASM_OUTPUT_DOUBLE,\n+\tASM_OUTPUT_FLOAT, ASM_GENERATE_INTERNAL_LABEL): Fix format\n+\tspecifier warnings.\n+\t* i386/osfrose.h (ASM_GENERATE_INTERNAL_LABEL): Likewise.\n+\t* i386/ptx4-i.h (ASM_OUTPUT_FLOAT, ASM_OUTPUT_DOUBLE,\n+\tASM_OUTPUT_LONG_DOUBLE): Likewise.\n+\t* i386/sco5.h (ASM_GENERATE_INTERNAL_LABEL): Likewise.\n+\t* i386/sequent.h (ASM_GENERATE_INTERNAL_LABEL): Likewise.\n+\t* i386/sun386.h (ASM_GENERATE_INTERNAL_LABEL): Likewise.\n+\t* i386/svr3dbx.h (ASM_GENERATE_INTERNAL_LABEL): Likewise.\n+\t* m68k/3b1.h (ASM_OUTPUT_DOUBLE, ASM_OUTPUT_LONG_DOUBLE,\n+\tASM_OUTPUT_FLOAT, ASM_GENERATE_INTERNAL_LABEL): Likewise.\n+\t* m68k/altos3068.h (ASM_OUTPUT_FLOAT_OPERAND): Likewise.\n+\t* m68k/amix.h (ASM_OUTPUT_ASCII, ASM_GENERATE_INTERNAL_LABEL):\n+\tLikewise.\n+\t* m68k/atari.h (ASM_OUTPUT_ASCII, ASM_GENERATE_INTERNAL_LABEL):\n+\tLikewise.\n+\t* m68k/crds.h (ASM_OUTPUT_DOUBLE, PRINT_OPERAND): Likewise.\n+\t* m68k/dpx2.h (ASM_OUTPUT_LONG_DOUBLE, ASM_OUTPUT_DOUBLE,\n+\tASM_OUTPUT_FLOAT, ASM_OUTPUT_BYTE, ASM_OUTPUT_FLOAT_OPERAND):\n+\tLikewise.\n+\t* m68k/hp320.h (ASM_OUTPUT_LONG_DOUBLE, ASM_OUTPUT_BYTE):\n+\tLikewise.\n+\t* m68k.h (ASM_GENERATE_INTERNAL_LABEL, ASM_OUTPUT_BYTE):\n+\tLikewise.\n+\t* m68k/m68kv4.h (ASM_OUTPUT_ASCII): Delete unused variable.\n+\t* m68k/mot3300.h (ASM_OUTPUT_BYTE): Fix format specifier warning.\n+\t* m68k/news.h (PRINT_OPERAND): Likewise.\n+\t* m68k/next.h (ASM_OUTPUT_DOUBLE, ASM_OUTPUT_FLOAT,\n+\tASM_OUTPUT_FLOAT_OPERAND, ASM_OUTPUT_DOUBLE_OPERAND): Likewise.\n+\t* m68k/next21.h (ASM_OUTPUT_FLOAT_OPERAND): Likewise.\n+\t* m68k/plexus.h (ASM_SPEC): Insert space between macro name and\n+\tdefinition.\n+\t* m68k/sgs.h (ASM_OUTPUT_LONG_DOUBLE, ASM_OUTPUT_DOUBLE,\n+\tASM_OUTPUT_FLOAT, ASM_OUTPUT_ASCII, ASM_OUTPUT_FLOAT_OPERAND,\n+\tASM_OUTPUT_DOUBLE_OPERAND): Fix format specifier warnings.\n+\t* m68k/sun3.h (ASM_OUTPUT_FLOAT_OPERAND): Likewise.\n+\t* m68k/tower-as.h (ASM_GENERATE_INTERNAL_LABEL, ASM_OUTPUT_DOUBLE,\n+\tASM_OUTPUT_LONG_DOUBLE, ASM_OUTPUT_FLOAT, ASM_OUTPUT_BYTE,\n+\tPRINT_OPERAND): Likewise.\n+\t* m88k/m88k.h (ASM_GENERATE_INTERNAL_LABEL, ASM_OUTPUT_BYTE):\n+\tLikewise.\n+\t* mips/elf.h (PUT_SDB_SIZE, ASM_DECLARE_OBJECT_NAME): Likewise.\n+\t* mips/elf64.h (PUT_SDB_SIZE, ASM_DECLARE_OBJECT_NAME): Likewise.\n+\t* mips/iris5gas.h (PUT_SDB_SIZE): Likewise.\n+\t* mips/linux.h (ASM_DECLARE_OBJECT_NAME): Likewise.\n+\t* mips.c (mips_output_external_libcall): Mark parameter with\n+\tATTRIBUTE_UNUSED.\n+\t(mips_asm_file_start): Move variable into the scope where it's\n+\tused.\n+\t* mips.h (PUT_SDB_INT_VAL, PUT_SDB_SIZE): Likewise.\n+\t* mips/netbsd.h (ASM_DECLARE_OBJECT_NAME): Likewise.\n+\t* mips/sni-gas.h (PUT_SDB_SIZE): Likewise.\n+\t* ns32k/encore.h (ASM_GENERATE_INTERNAL_LABEL): Likewise.\n+\t* ns32k.c (print_operand): Likewise.\n+\t* pa.c (print_operand, output_div_insn): Likewise.\n+\t* pa.h (ASM_OUTPUT_MI_THUNK, ASM_GENERATE_INTERNAL_LABEL,\n+\tASM_OUTPUT_BYTE, PRINT_OPERAND_ADDRESS): Likewise.\n+\t* pa/pa64-hpux.h (UNIQUE_SECTION): Const-ify.\n+\t* sparc/linux.h (ASM_GENERATE_INTERNAL_LABEL): Fix format\n+\tspecifier warnings.\n+\t* sparc/linux64.h (ASM_GENERATE_INTERNAL_LABEL): Likewise.\n+\t* sparc/pbd.h (ASM_GENERATE_INTERNAL_LABEL): Likewise.\n+\t(ASM_OUTPUT_SOURCE_LINE): Don't list macro arguments in undef.\n+\t* sparc/vxsim.h (ASM_GENERATE_INTERNAL_LABEL): Fix format\n+\tspecifier warnings.\n+\t* svr3.h (ASM_GENERATE_INTERNAL_LABEL): Likewise.\n+\n+\t* sdbout.c (sdbout_end_epilogue): Mark parameter with\n+\tATTRIBUTE_UNUSED.\n+\t* varasm.c (assemble_global): Likewise.\n+\n 2001-11-11  H.J. Lu <hjl@gnu.org>\n \n \t* config.gcc: Add \"elfos.h svr4.h\" to $tm_file for Linux/mips."}, {"sha": "87f9603b3407dd2a2fe76474bdf95238f3aa6ac8", "filename": "gcc/config/alpha/unicosmk.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Falpha%2Funicosmk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Falpha%2Funicosmk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Funicosmk.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -431,7 +431,7 @@ ssib_section ()\t\t\t\\\n #define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\\\n   do { long t[2];\t\t\t\t\t\\\n        REAL_VALUE_TO_TARGET_DOUBLE ((VALUE), t);\t\\\n-       fprintf (FILE, \"\\t.quad ^X%x\\n\", t[0]);\t\t\\\n+       fprintf (FILE, \"\\t.quad ^X%lx\\n\", t[0]);\t\t\\\n   } while(0)\n #endif\n  \n@@ -452,13 +452,13 @@ ssib_section ()\t\t\t\\\n #define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\\\n   do { long t;\t\t\t\t\t\t\\\n        REAL_VALUE_TO_TARGET_SINGLE ((VALUE), t);\t\\\n-       fprintf (FILE, \"\\t.long ^X%x\\n\", t & 0xffffffff);\\\n+       fprintf (FILE, \"\\t.long ^X%lx\\n\", t & 0xffffffff);\\\n   } while (0)\n #else\n #define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\\\n   do { long t;\t\t\t\t\t\t\\\n        REAL_VALUE_TO_TARGET_SINGLE ((VALUE), t);\t\\\n-       fprintf (FILE, \"\\t.long ^X%x\\n\", (t >> 32) & 0xffffffff);\\\n+       fprintf (FILE, \"\\t.long ^X%lx\\n\", (t >> 32) & 0xffffffff);\\\n   } while(0)\n #endif\n "}, {"sha": "50d5bafd54d049e7a1ea13016b4b2cde6a5eda11", "filename": "gcc/config/convex/convex.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fconvex%2Fconvex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fconvex%2Fconvex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -1311,7 +1311,7 @@ enum reg_class {\n /* This is how to output an assembler line for a numeric constant byte.  */\n \n #define ASM_OUTPUT_BYTE(FILE,VALUE)  \\\n-  fprintf (FILE, \"\\tds.b %#x\\n\", (VALUE))\n+  fprintf (FILE, \"\\tds.b %#x\\n\", (int)(VALUE))\n \n /* This is how to output a string */\n "}, {"sha": "5c64afbc1a626afb568ce458fb1e3efef7c3040e", "filename": "gcc/config/elfos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Felfos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Felfos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felfos.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -165,6 +165,7 @@ Boston, MA 02111-1307, USA.  */\n    make sure that the location counter for the .rodata section gets pro-\n    perly re-aligned prior to the actual beginning of the jump table.  */\n \n+#undef ALIGN_ASM_OP\n #define ALIGN_ASM_OP \"\\t.align\\t\"\n \n #ifndef ASM_OUTPUT_BEFORE_CASE_LABEL"}, {"sha": "39bb1799f9739324b15a8608fe823f7d783ddd2e", "filename": "gcc/config/i386/att.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fi386%2Fatt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fi386%2Fatt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fatt.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -91,7 +91,7 @@ do\t\t\t\t\t\t\t\t\\\n \n #undef ASM_GENERATE_INTERNAL_LABEL\n #define ASM_GENERATE_INTERNAL_LABEL(BUF,PREFIX,NUMBER)\t\\\n-  sprintf ((BUF), \"%s%s%d\", LOCAL_LABEL_PREFIX, (PREFIX), (NUMBER))\n+  sprintf ((BUF), \"%s%s%ld\", LOCAL_LABEL_PREFIX, (PREFIX), (long)(NUMBER))\n \n /* This is how to output an internal numbered label where\n    PREFIX is the class of label and NUM is the number within the class.  */"}, {"sha": "6473cae88f79cd0e2ceb996eb5a53a2feb607c25", "filename": "gcc/config/i386/bsd.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fi386%2Fbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fi386%2Fbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbsd.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -96,10 +96,10 @@ Boston, MA 02111-1307, USA.  */\n \n #ifdef NO_UNDERSCORES\n #define ASM_GENERATE_INTERNAL_LABEL(BUF,PREFIX,NUMBER)\t\\\n-    sprintf ((BUF), \"*.%s%d\", (PREFIX), (NUMBER))\n+    sprintf ((BUF), \"*.%s%ld\", (PREFIX), (long)(NUMBER))\n #else\n #define ASM_GENERATE_INTERNAL_LABEL(BUF,PREFIX,NUMBER)\t\\\n-    sprintf ((BUF), \"*%s%d\", (PREFIX), (NUMBER))\n+    sprintf ((BUF), \"*%s%ld\", (PREFIX), (long)(NUMBER))\n #endif\n \n /* This is how to output an internal numbered label where"}, {"sha": "4c392966244722a798cd91e5cf7e9fd9b31d061c", "filename": "gcc/config/i386/gas.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fi386%2Fgas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fi386%2Fgas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgas.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -150,7 +150,7 @@ Boston, MA 02111-1307, USA.  */\n \n #undef ASM_GENERATE_INTERNAL_LABEL\n #define ASM_GENERATE_INTERNAL_LABEL(BUF,PREFIX,NUMBER)\t\\\n-    sprintf ((BUF), \".%s%d\", (PREFIX), (NUMBER))\n+    sprintf ((BUF), \".%s%ld\", (PREFIX), (long)(NUMBER))\n \n /* This is how to output an internal numbered label where\n    PREFIX is the class of label and NUM is the number within the class.  */"}, {"sha": "f94d9c873532e7a9426dc6e3df8e888937e901d6", "filename": "gcc/config/i386/i386-interix.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-interix.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -350,7 +350,8 @@ while (0)\n \n    stddef renaming does NOT apply to Alpha.  */\n \n-char *gen_stdcall_suffix ();\n+union tree_node;\n+const char *gen_stdcall_suffix PARAMS ((union tree_node *));\n \n #undef ENCODE_SECTION_INFO\n #define ENCODE_SECTION_INFO(DECL) \t\t\t\t\t\\"}, {"sha": "be2af29793049c4d2a4c97ebc3a4b485e4e651f4", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -2974,7 +2974,7 @@ do { long l;\t\t\t\t\t\t\\\n /* This is how to output an assembler line for a numeric constant byte.  */\n \n #define ASM_OUTPUT_BYTE(FILE,VALUE)  \\\n-  asm_fprintf ((FILE), \"%s0x%x\\n\", ASM_BYTE_OP, (VALUE))\n+  asm_fprintf ((FILE), \"%s0x%x\\n\", ASM_BYTE_OP, (int) (VALUE))\n \n /* This is how to output an insn to push a register on the stack.\n    It need not be very fast code.  */"}, {"sha": "352c3e17b7095c3ac588aba3e3a9fa5b2a7bb839", "filename": "gcc/config/i386/i386elf.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fi386%2Fi386elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fi386%2Fi386elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386elf.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -57,7 +57,7 @@ Boston, MA 02111-1307, USA.  */\n do { long value;\t\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_SINGLE ((VALUE), value);\t\t\t\\\n      if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n-         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, value);\t\t\t\\\n+         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, (int) value);\t\t\\\n      else\t\t\t\t\t\t\t\t\\\n          fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value);\t\t\t\\\n    } while (0)\n@@ -73,8 +73,8 @@ do { long value[2];\t\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_DOUBLE ((VALUE), value);\t\t\t\\\n      if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n        {\t\t\t\t\t\t\t\t\\\n-         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, value[0]);\t\t\\\n-         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, value[1]);\t\t\\\n+         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, (int) value[0]);\t\t\\\n+         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, (int) value[1]);\t\t\\\n        }\t\t\t\t\t\t\t\t\\\n      else\t\t\t\t\t\t\t\t\\\n        {\t\t\t\t\t\t\t\t\\\n@@ -90,9 +90,9 @@ do { long value[3];\t\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_LONG_DOUBLE ((VALUE), value);\t\t\t\\\n      if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n        {\t\t\t\t\t\t\t\t\\\n-         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, value[0]);\t\t\\\n-         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, value[1]);\t\t\\\n-         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, value[2]);\t\t\\\n+         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, (int) value[0]);\t\t\\\n+         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, (int) value[1]);\t\t\\\n+         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, (int) value[2]);\t\t\\\n        }\t\t\t\t\t\t\t\t\\\n      else\t\t\t\t\t\t\t\t\\\n        {\t\t\t\t\t\t\t\t\\"}, {"sha": "8ea2c6e171f2571e5d1f364bdc03b1288ecd980c", "filename": "gcc/config/i386/interix.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fi386%2Finterix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fi386%2Finterix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Finterix.c?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -31,14 +31,14 @@ Boston, MA 02111-1307, USA.  */\n    suffix consisting of an atsign (@) followed by the number of bytes of \n    arguments */\n \n-char *\n+const char *\n gen_stdcall_suffix (decl)\n   tree decl;\n {\n   int total = 0;\n   /* ??? This probably should use XSTR (XEXP (DECL_RTL (decl), 0), 0) instead\n      of DECL_ASSEMBLER_NAME.  */\n-  char *asmname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n+  const char *const asmname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n   char *newsym;\n \n   if (TYPE_ARG_TYPES (TREE_TYPE (decl)))"}, {"sha": "02ca452e75fa2c6ea3cd0bdc7ee44dcfbf9d0068", "filename": "gcc/config/i386/next.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fi386%2Fnext.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fi386%2Fnext.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnext.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -50,7 +50,7 @@ Boston, MA 02111-1307, USA.  */\n     REAL_VALUE_TO_TARGET_LONG_DOUBLE (VALUE, hex);\t\t\t\\\n     if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n       fprintf (FILE, \"\\t.long 0x%x\\n\\t.long 0x%x\\n\\t.long 0x%x\\n\",\t\\\n-\t\thex[0], hex[1], hex[2]);\t\t\t\t\\\n+\t\t(int) hex[0], (int) hex[1], (int) hex[2]);\t\t\\\n     else\t\t\t\t\t\t\t\t\\\n       fprintf (FILE, \"\\t.long 0x%lx\\n\\t.long 0x%lx\\n\\t.long 0x%lx\\n\",\t\\\n \t\thex[0], hex[1], hex[2]);\t\t\t\t\\\n@@ -64,7 +64,8 @@ Boston, MA 02111-1307, USA.  */\n     long hex[2];\t\t\t\t\t\t\t\\\n     REAL_VALUE_TO_TARGET_DOUBLE (VALUE, hex);\t\t\t\t\\\n     if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t.long 0x%x\\n\\t.long 0x%x\\n\", hex[0], hex[1]);\t\\\n+      fprintf (FILE, \"\\t.long 0x%x\\n\\t.long 0x%x\\n\",\t\t\t\\\n+        (int) hex[0], (int) hex[1]);\t\t\t\t\t\\\n     else\t\t\t\t\t\t\t\t\\\n       fprintf (FILE, \"\\t.long 0x%lx\\n\\t.long 0x%lx\\n\", hex[0], hex[1]);\t\\\n   } while (0)\n@@ -79,7 +80,7 @@ Boston, MA 02111-1307, USA.  */\n     long hex;\t\t\t\t\t\t\t\t\\\n     REAL_VALUE_TO_TARGET_SINGLE (VALUE, hex);\t\t\t\t\\\n     if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t.long 0x%x\\n\", hex);\t\t\t\t\\\n+      fprintf (FILE, \"\\t.long 0x%x\\n\", (int) hex);\t\t\t\\\n     else\t\t\t\t\t\t\t\t\\\n       fprintf (FILE, \"\\t.long 0x%lx\\n\", hex);\t\t\t\t\\\n   } while (0)\n@@ -143,7 +144,7 @@ Boston, MA 02111-1307, USA.  */\n \n #undef\tASM_GENERATE_INTERNAL_LABEL\n #define ASM_GENERATE_INTERNAL_LABEL(BUF,PREFIX,NUMBER)\t\\\n-    sprintf ((BUF), \"*%s%d\", (PREFIX), (NUMBER))\n+    sprintf ((BUF), \"*%s%ld\", (PREFIX), (long)(NUMBER))\n \n #undef ASM_OUTPUT_INTERNAL_LABEL\n #define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM)\t\\"}, {"sha": "36d6345685b31c807a53bb2d4c28aea13bedcd13", "filename": "gcc/config/i386/osfrose.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fi386%2Fosfrose.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fi386%2Fosfrose.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fosfrose.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -294,8 +294,8 @@ while (0)\n \n #undef\tASM_GENERATE_INTERNAL_LABEL\n #define ASM_GENERATE_INTERNAL_LABEL(BUF,PREFIX,NUMBER)\t\t\t\\\n-    sprintf ((BUF), \"*%s%s%d\", (TARGET_UNDERSCORES) ? \"\" : \".\",\t\t\\\n-\t     (PREFIX), (NUMBER))\n+    sprintf ((BUF), \"*%s%s%ld\", (TARGET_UNDERSCORES) ? \"\" : \".\",\t\\\n+\t     (PREFIX), (long)(NUMBER))\n \n /* This is how to output an internal numbered label where\n    PREFIX is the class of label and NUM is the number within the class.  */"}, {"sha": "edb14e38b8ff05ac13f338ad0d9f2f326f71ae6b", "filename": "gcc/config/i386/ptx4-i.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fi386%2Fptx4-i.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fi386%2Fptx4-i.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fptx4-i.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -50,7 +50,7 @@ Boston, MA 02111-1307, USA.  */\n do { long value;\t\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_SINGLE ((VALUE), value);\t\t\t\\\n      if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n-         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, value);\t\t\t\\\n+         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, (int) value);\t\t\\\n      else\t\t\t\t\t\t\t\t\\\n          fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value);\t\t\t\\\n    } while (0)\n@@ -66,8 +66,8 @@ do { long value[2];\t\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_DOUBLE ((VALUE), value);\t\t\t\\\n      if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n        {\t\t\t\t\t\t\t\t\\\n-         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, value[0]);\t\t\\\n-         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, value[1]);\t\t\\\n+         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, (int) value[0]);\t\t\\\n+         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, (int) value[1]);\t\t\\\n        }\t\t\t\t\t\t\t\t\\\n      else\t\t\t\t\t\t\t\t\\\n        {\t\t\t\t\t\t\t\t\\\n@@ -83,9 +83,9 @@ do { long value[3];\t\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_LONG_DOUBLE ((VALUE), value);\t\t\t\\\n      if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n        {\t\t\t\t\t\t\t\t\\\n-         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, value[0]);\t\t\\\n-         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, value[1]);\t\t\\\n-         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, value[2]);\t\t\\\n+         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, (int) value[0]);\t\t\\\n+         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, (int) value[1]);\t\t\\\n+         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, (int) value[2]);\t\t\\\n        }\t\t\t\t\t\t\t\t\\\n      else\t\t\t\t\t\t\t\t\\\n        {\t\t\t\t\t\t\t\t\\"}, {"sha": "000207c8df5e609ad5820fe91f21a5e1b789a24f", "filename": "gcc/config/i386/sco5.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fi386%2Fsco5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fi386%2Fsco5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsco5.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -232,9 +232,9 @@ do {\t\t\t\t\t\t\t\t\t \\\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL, PREFIX, NUM)\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_ELF)\t\t\t\t\t\t\t\\\n-    sprintf (LABEL, \"*.%s%d\", (PREFIX), (NUM));\t\t\t\t\\\n+    sprintf (LABEL, \"*.%s%ld\", (PREFIX), (long)(NUM));\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n-    sprintf (LABEL, \".%s%d\", (PREFIX), (NUM));\t\t\t\t\\\n+    sprintf (LABEL, \".%s%ld\", (PREFIX), (long)(NUM));\t\t\t\\\n } while (0)\n \n #undef ASM_OUTPUT_ALIGNED_COMMON"}, {"sha": "cffc50ae1e222e8f57318340124b1a8647a002a3", "filename": "gcc/config/i386/sequent.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fi386%2Fsequent.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fi386%2Fsequent.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsequent.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -135,7 +135,7 @@ Boston, MA 02111-1307, USA.  */\n \n #undef ASM_GENERATE_INTERNAL_LABEL\n #define ASM_GENERATE_INTERNAL_LABEL(BUF,PREFIX,NUMBER)\\\n-  sprintf ((BUF), \"*.%s%d\", (PREFIX), (NUMBER))\n+  sprintf ((BUF), \"*.%s%ld\", (PREFIX), (long)(NUMBER))\n \n #undef ASM_OUTPUT_INTERNAL_LABEL\n #define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM)\\"}, {"sha": "182f83b96da69fa9470933aaf9c0b96ae61455ee", "filename": "gcc/config/i386/sun386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fi386%2Fsun386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fi386%2Fsun386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsun386.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -129,7 +129,7 @@ do\t\t\t\t\t\t\t\t\\\n    This is suitable for output with `assemble_name'.  */\n \n #define ASM_GENERATE_INTERNAL_LABEL(BUF,PREFIX,NUMBER)\t\\\n-  sprintf ((BUF), \"*.%s%d\", (PREFIX), (NUMBER))\n+  sprintf ((BUF), \"*.%s%ld\", (PREFIX), (long)(NUMBER))\n \n /* The prefix to add to user-visible assembler symbols.  */\n "}, {"sha": "b0e4237aa4ab57c1bb2381285dbb0bdbdf3f902d", "filename": "gcc/config/i386/svr3dbx.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fi386%2Fsvr3dbx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fi386%2Fsvr3dbx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsvr3dbx.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -33,7 +33,7 @@ Boston, MA 02111-1307, USA.  */\n \n #undef ASM_GENERATE_INTERNAL_LABEL\n #define ASM_GENERATE_INTERNAL_LABEL(BUF,PREFIX,NUMBER)\t\\\n-    sprintf ((BUF), \"*.%s%d\", (PREFIX), (NUMBER))\n+    sprintf ((BUF), \"*.%s%ld\", (PREFIX), (long)(NUMBER))\n \n /* With the current gas, .align N aligns to an N-byte boundary.\n    This is done to be compatible with the system assembler."}, {"sha": "343114128b53623b1559d1e175368985724121df", "filename": "gcc/config/m68k/3b1.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2F3b1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2F3b1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2F3b1.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -132,22 +132,22 @@ output_file_directive ((FILE), main_input_filename)\n #define ASM_OUTPUT_DOUBLE(FILE,VALUE)  \\\n do { long l[2];\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_DOUBLE (VALUE, l);\t\t\\\n-     fprintf (FILE, \"\\tlong 0x%x,0x%x\\n\", l[0], l[1]); \\\n+     fprintf (FILE, \"\\tlong 0x%lx,0x%lx\\n\", l[0], l[1]); \\\n    } while (0)\n \n #undef ASM_OUTPUT_LONG_DOUBLE\n #define ASM_OUTPUT_LONG_DOUBLE(FILE,VALUE)  \t\t\t\t\\\n do { long l[3];\t\t\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_LONG_DOUBLE (VALUE, l);\t\t\t\\\n-     fprintf (FILE, \"\\tlong 0x%x,0x%x,0x%x\\n\", l[0], l[1], l[2]);\t\\\n+     fprintf (FILE, \"\\tlong 0x%lx,0x%lx,0x%lx\\n\", l[0], l[1], l[2]);\t\\\n    } while (0)\n \n /* This is how to output an assembler line defining a `float' constant.  */\n \n #define ASM_OUTPUT_FLOAT(FILE,VALUE)  \\\n do { long l;\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\\\n-     fprintf ((FILE), \"\\tlong 0x%x\\n\", l);\t\\\n+     fprintf ((FILE), \"\\tlong 0x%lx\\n\", l);\t\\\n    } while (0)\n \n #define ASM_OUTPUT_ALIGN(FILE,LOG)\t\\\n@@ -348,7 +348,7 @@ do { long l;\t\t\t\t\t\\\n     }}\n \n #define ASM_GENERATE_INTERNAL_LABEL(LABEL, PREFIX, NUM)\t\\\n-  sprintf ((LABEL), \"%s%%%d\", (PREFIX), (NUM))\n+  sprintf ((LABEL), \"%s%%%ld\", (PREFIX), (long)(NUM))\n \n #define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM)\t\\\n     fprintf (FILE, \"%s%%%d:\\n\", PREFIX, NUM)"}, {"sha": "c13e6086a032ae87d63777540aebae8e002ddf63", "filename": "gcc/config/m68k/altos3068.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Faltos3068.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Faltos3068.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Faltos3068.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -110,7 +110,7 @@ Boston, MA 02111-1307, USA.  */\n           long l;\t\t\t\t\t\t\\\n           REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\t\\\n           if (sizeof (int) == sizeof (long))\t\t\t\\\n-            asm_fprintf ((FILE), \"%I0x%x\", l);\t\t\t\\\n+            asm_fprintf ((FILE), \"%I0x%x\", (int) l);\t\t\\\n           else\t\t\t\t\t\t\t\\\n             asm_fprintf ((FILE), \"%I0x%lx\", l);\t\t\t\\\n         }\t\t\t\t\t\t\t\\"}, {"sha": "1fbdcc3d7f35e4910a56ed79bed7192b92949e13", "filename": "gcc/config/m68k/amix.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Famix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Famix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Famix.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -100,7 +100,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef ASM_OUTPUT_ASCII\n #define ASM_OUTPUT_ASCII(FILE,PTR,LEN)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\\\n-  register int sp = 0, lp = 0, ch;\t\t\t\t\\\n+  register int sp = 0, ch;\t\t\t\t\t\\\n   fprintf ((FILE), \"%s\", BYTE_ASM_OP);\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\\\n     ch = (PTR)[sp];\t\t\t\t\t\t\\\n@@ -137,9 +137,9 @@ do {\t\t\t\t\t\t\t\t\\\n #undef ASM_GENERATE_INTERNAL_LABEL\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n   if (flag_pic && !strcmp(PREFIX,\"LC\"))\t\t\t\\\n-    sprintf (LABEL, \"*%s%%%d\", PREFIX, NUM);\t\t\\\n+    sprintf (LABEL, \"*%s%%%ld\", PREFIX, (long)(NUM));\t\t\\\n   else\t\t\t\t\t\t\t\\\n-    sprintf (LABEL, \"*%s%s%d\", LOCAL_LABEL_PREFIX, PREFIX, NUM)\n+    sprintf (LABEL, \"*%s%s%ld\", LOCAL_LABEL_PREFIX, PREFIX, (long)(NUM))\n \n #undef ASM_OUTPUT_INTERNAL_LABEL\n #define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM)\t\\"}, {"sha": "8e1ddff9a7eac067d30d55977c787e312966c969", "filename": "gcc/config/m68k/atari.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Fatari.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Fatari.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fatari.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -60,7 +60,7 @@ int switch_table_difference_label_flag;\n #undef ASM_OUTPUT_ASCII\n #define ASM_OUTPUT_ASCII(FILE,PTR,LEN)\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n-  register int sp = 0, lp = 0, ch;\t\t\t\t\\\n+  register int sp = 0, ch;\t\t\t\t\t\\\n   fprintf ((FILE), \"%s\", BYTE_ASM_OP);\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\\\n     ch = (PTR)[sp];\t\t\t\t\t\t\\\n@@ -94,9 +94,9 @@ int switch_table_difference_label_flag;\n #undef ASM_GENERATE_INTERNAL_LABEL\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n   if (flag_pic && !strcmp(PREFIX,\"LC\"))\t\t\t\\\n-    sprintf (LABEL, \"*%s%%%d\", PREFIX, NUM);\t\t\\\n+    sprintf (LABEL, \"*%s%%%ld\", PREFIX, (long)(NUM));\t\\\n   else\t\t\t\t\t\t\t\\\n-    sprintf (LABEL, \"*%s%s%d\", LOCAL_LABEL_PREFIX, PREFIX, NUM)\n+    sprintf (LABEL, \"*%s%s%ld\", LOCAL_LABEL_PREFIX, PREFIX, (long)(NUM))\n \n #undef ASM_OUTPUT_INTERNAL_LABEL\n #define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM)\t\\"}, {"sha": "9a34ceef22e62609ec775dac22c859106e468680", "filename": "gcc/config/m68k/crds.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Fcrds.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Fcrds.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fcrds.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -157,11 +157,11 @@ Boston, MA 02111-1307, USA.  */\n \n /* This is how to output an assembler line defining a `double' constant.  */\n \n-#undef ASM_OUTPUT_DOUBLE\n+#undef ASM_OUTPUT_DOUBLE   \n #define ASM_OUTPUT_DOUBLE(FILE,VALUE)  \\\n do { long l[2];\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_DOUBLE (VALUE, l);\t\t\\\n-     fprintf (FILE, \"\\t.long 0x%x, 0x%x\\n\", l[0], l[1]);\t\\\n+     fprintf (FILE, \"\\t.long 0x%lx, 0x%lx\\n\", l[0], l[1]);\t\\\n    } while (0)\n \n /*unos has no .skip :-( */\n@@ -300,7 +300,7 @@ do {  int i;\t\t\t\t\t\t\t\t\\\n \tASM_OUTPUT_FLOAT_OPERAND (CODE, FILE, r);\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n         { REAL_VALUE_TO_TARGET_SINGLE (r, l);\t\t\t\t\\\n-          fprintf (FILE, \"$0x%x\", l); } }\t\t\t\t\\\n+          fprintf (FILE, \"$0x%lx\", l); } }\t\t\t\t\\\n   else if (GET_CODE (X) == CONST_DOUBLE && GET_MODE (X) == DFmode)\t\\\n     { REAL_VALUE_TYPE r;\t\t\t\t\t\t\\\n       REAL_VALUE_FROM_CONST_DOUBLE (r, X);\t\t\t\t\\"}, {"sha": "27aa342cb50427aafe0a58ea14dd31774c8912cf", "filename": "gcc/config/m68k/dpx2.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Fdpx2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Fdpx2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fdpx2.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -279,7 +279,7 @@ Boston, MA 02111-1307, USA.  */\n do { long l[3];\t\t\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_LONG_DOUBLE (VALUE, l);\t\t\t\\\n      if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n-       fprintf (FILE, \"\\tdc.l $%x,$%x,$%x\\n\", l[0], l[1], l[2]);\t\\\n+       fprintf (FILE, \"\\tdc.l $%x,$%x,$%x\\n\", (int)l[0], (int)l[1], (int)l[2]); \\\n      else\t\t\t\t\t\t\t\t\\\n        fprintf (FILE, \"\\tdc.l $%lx,$%lx,$%lx\\n\", l[0], l[1], l[2]);\t\\\n    } while (0)\n@@ -295,7 +295,7 @@ do { long l[3];\t\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_DOUBLE(FILE,VALUE)  \\\n do { long l[2];\t\t\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_DOUBLE (VALUE, l);\t\t\t        \\\n-     fprintf (FILE, \"\\tdc.l $%x,$%x\\n\", l[0], l[1]);            \t\\\n+     fprintf (FILE, \"\\tdc.l $%lx,$%lx\\n\", l[0], l[1]);            \t\\\n    } while (0)\n \n \n@@ -305,7 +305,7 @@ do { long l[2];\t\t\t\t\t\t\t\t\\\n do { long l;\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\t\\\n      if (sizeof (int) == sizeof (long))\t\t\t\\\n-       fprintf (FILE, \"\\tdc.l $%x\\n\", l);\t\t\\\n+       fprintf (FILE, \"\\tdc.l $%x\\n\", (int) l);\t\t\\\n      else\t\t\t\t\t\t\\\n        fprintf (FILE, \"\\tdc.l $%lx\\n\", l);\t\t\\\n    } while (0)\n@@ -333,7 +333,7 @@ do { long l;\t\t\t\t\t\t\\\n /* This is how to output an assembler line for a numeric constant byte.  */\n #undef ASM_OUTPUT_BYTE\n #define ASM_OUTPUT_BYTE(FILE,VALUE)  \\\n-  fprintf (FILE, \"\\tdc.b $%x\\n\", (VALUE))\n+  fprintf (FILE, \"\\tdc.b $%x\\n\", (int)(VALUE))\n \n /* This is how to output an element of a case-vector that is absolute.\n    (The 68000 does not use such vectors,\n@@ -367,7 +367,7 @@ do { long l;\t\t\t\t\t\t\\\n           long l;\t\t\t\t\t\t\\\n           REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\t\\\n           if (sizeof (int) == sizeof (long))\t\t\t\\\n-            asm_fprintf ((FILE), \"%I$%x\", l);\t\t\t\\\n+            asm_fprintf ((FILE), \"%I$%x\", (int) l);\t\t\\\n           else\t\t\t\t\t\t\t\\\n             asm_fprintf ((FILE), \"%I$%lx\", l);\t\t\t\\\n         }\t\t\t\t\t\t\t\\"}, {"sha": "03617b430742b9f85b47d41a04f04eff10fe59eb", "filename": "gcc/config/m68k/hp320.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Fhp320.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Fhp320.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fhp320.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -283,7 +283,7 @@ do{  if (PREFIX[0] == 'L' && PREFIX[1] == 'I')\t\t\\\n #define ASM_OUTPUT_LONG_DOUBLE(FILE,VALUE)  \t\t\t\t\\\n do { long l[3];\t\t\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_LONG_DOUBLE (VALUE, l);\t\t\t\\\n-     fprintf (FILE, \"\\tlong 0x%x,0x%x,0x%x\\n\", l[0], l[1], l[2]);\t\\\n+     fprintf (FILE, \"\\tlong 0x%lx,0x%lx,0x%lx\\n\", l[0], l[1], l[2]);\t\\\n    } while (0)\n   \n /* This is how to output an assembler line defining an `int' constant.  */\n@@ -308,7 +308,7 @@ do { long l[3];\t\t\t\t\t\t\t\t\\\n /* This is how to output an assembler line for a numeric constant byte.  */\n \n #define ASM_OUTPUT_BYTE(FILE,VALUE)  \\\n-  fprintf (FILE, \"\\tbyte 0x%x\\n\", (VALUE))\n+  fprintf (FILE, \"\\tbyte 0x%x\\n\", (int)(VALUE))\n \n #define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE)  \\\n   fprintf (FILE, \"\\tlong L%d\\n\", VALUE)"}, {"sha": "b0e0e25a9cd2da3be8a2c2fea6380f899e22288b", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -1952,7 +1952,7 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n    This is suitable for output with `assemble_name'.  */\n \n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n-  sprintf (LABEL, \"*%s%s%d\", LOCAL_LABEL_PREFIX, PREFIX, NUM)\n+  sprintf (LABEL, \"*%s%s%ld\", LOCAL_LABEL_PREFIX, PREFIX, (long)(NUM))\n \n /* This is how to output a `long double' extended real constant.  */\n   \n@@ -2000,7 +2000,7 @@ do { long l;\t\t\t\t\t\t\\\n /* This is how to output an assembler line for a numeric constant byte.  */\n \n #define ASM_OUTPUT_BYTE(FILE,VALUE)  \\\n-  fprintf (FILE, \"\\t.byte 0x%x\\n\", (VALUE))\n+  fprintf (FILE, \"\\t.byte 0x%x\\n\", (int)(VALUE))\n \n /* This is how to output an insn to push a register on the stack.\n    It need not be very fast code.  */"}, {"sha": "060b13bfc5004de1d4da5fa36a9b1cec5d2733c7", "filename": "gcc/config/m68k/m68kelf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Fm68kelf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Fm68kelf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68kelf.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -180,7 +180,7 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_OUTPUT_ASCII\n #define ASM_OUTPUT_ASCII(FILE,PTR,LEN)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\\\n-  register int sp = 0, lp = 0, ch;\t\t\t\t\\\n+  register int sp = 0, ch;\t\t\t\t\t\\\n   fprintf ((FILE), \"%s\", BYTE_ASM_OP);\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\\\n     ch = (PTR)[sp];\t\t\t\t\t\t\\"}, {"sha": "4d26e4227311e8289d622d3e1742dc41be3c7c4f", "filename": "gcc/config/m68k/m68kv4.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Fm68kv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Fm68kv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68kv4.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -215,7 +215,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef ASM_OUTPUT_ASCII\n #define ASM_OUTPUT_ASCII(FILE,PTR,LEN)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\\\n-  register int sp = 0, lp = 0, ch;\t\t\t\t\\\n+  register int sp = 0, ch;\t\t\t\t\t\\\n   fprintf ((FILE), \"%s\", BYTE_ASM_OP);\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\\\n     ch = (PTR)[sp];\t\t\t\t\t\t\\"}, {"sha": "4b96a50ce4c88e489d41bbd8d503e024c130ccc8", "filename": "gcc/config/m68k/mot3300.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Fmot3300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Fmot3300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fmot3300.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -365,7 +365,7 @@ do { long l;\t\t\t\t\t\\\n \n #undef ASM_OUTPUT_BYTE\n #define ASM_OUTPUT_BYTE(FILE,VALUE)  \\\n-  fprintf (FILE, \"\\t%s 0x%x\\n\", ASM_BYTE, (VALUE))\n+  fprintf (FILE, \"\\t%s 0x%x\\n\", ASM_BYTE, (int)(VALUE))\n \n /* This is how to output an assembler line\n    that says to advance the location counter"}, {"sha": "8e556439b0fc6362243f25b0d4229565a89b7c50", "filename": "gcc/config/m68k/news.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Fnews.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Fnews.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fnews.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -285,7 +285,7 @@ do { char dstr[30];\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n         { long l;\t\t\t\t\t\t\t\\\n           REAL_VALUE_TO_TARGET_SINGLE (r, l);\t\t\t\t\\\n-          fprintf (FILE, \"#0x%x\", l);\t\t\t\t\t\\\n+          fprintf (FILE, \"#0x%lx\", l);\t\t\t\t\t\\\n         }}\t\t\t\t\t\t\t\t\\\n   else if (GET_CODE (X) == CONST_DOUBLE && GET_MODE (X) == XFmode)\t\\\n     { REAL_VALUE_TYPE r;\t\t\t\t\t\t\\"}, {"sha": "1e2d10d527e54ecb1f14157a74c35d56eca8d71e", "filename": "gcc/config/m68k/next.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Fnext.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Fnext.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fnext.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -47,7 +47,7 @@ Boston, MA 02111-1307, USA.  */\n   do {\t\t\t\t\t\t\t\t\t\\\n     long hex[2];\t\t\t\t\t\t\t\\\n     REAL_VALUE_TO_TARGET_DOUBLE (VALUE, hex);\t\t\t\t\\\n-    fprintf (FILE, \"\\t.long 0x%x\\n\\t.long 0x%x\\n\", hex[0], hex[1]);\t\\\n+    fprintf (FILE, \"\\t.long 0x%lx\\n\\t.long 0x%lx\\n\", hex[0], hex[1]);\t\\\n   } while (0)\n #else\n #define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\t\t\\\n@@ -74,7 +74,7 @@ Boston, MA 02111-1307, USA.  */\n   do {\t\t\t\t\t\t\t\t\t\\\n     long hex;\t\t\t\t\t\t\t\t\\\n     REAL_VALUE_TO_TARGET_SINGLE (VALUE, hex);\t\t\t\t\\\n-    fprintf (FILE, \"\\t.long 0x%x\\n\", hex);\t\t\t\t\\\n+    fprintf (FILE, \"\\t.long 0x%lx\\n\", hex);\t\t\t\t\\\n   } while (0)\n #else\n #define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\t\t\\\n@@ -99,7 +99,7 @@ Boston, MA 02111-1307, USA.  */\n   do {\t\t\t\t\t\t\t\t\t\\\n     long hex;\t\t\t\t\t\t\t\t\\\n     REAL_VALUE_TO_TARGET_SINGLE (VALUE, hex);\t\t\t\t\\\n-    fprintf (FILE, \"#0%c%x\", (CODE) == 'f' ? 'b' : 'x', hex);\t\t\\\n+    fprintf (FILE, \"#0%c%lx\", (CODE) == 'f' ? 'b' : 'x', hex);\t\t\\\n   } while (0)\n #else\n #define ASM_OUTPUT_FLOAT_OPERAND(CODE,FILE,VALUE)\t\t\\\n@@ -109,7 +109,7 @@ Boston, MA 02111-1307, USA.  */\n           long l;\t\t\t\t\t\t\\\n           REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\t\\\n           if (sizeof (int) == sizeof (long))\t\t\t\\\n-            asm_fprintf ((FILE), \"%I0x%x\", l);\t\t\t\\\n+            asm_fprintf ((FILE), \"%I0x%x\", (int) l);\t\t\\\n           else\t\t\t\t\t\t\t\\\n             asm_fprintf ((FILE), \"%I0x%lx\", l);\t\t\t\\\n         }\t\t\t\t\t\t\t\\\n@@ -134,7 +134,7 @@ Boston, MA 02111-1307, USA.  */\n   do {\t\t\t\t\t\t\t\t\t\\\n     long hex[2];\t\t\t\t\t\t\t\\\n     REAL_VALUE_TO_TARGET_DOUBLE (VALUE, hex);\t\t\t\t\\\n-    fprintf (FILE, \"#0b%x%08x\", hex[0], hex[1]);\t\t\t\\\n+    fprintf (FILE, \"#0b%lx%08lx\", hex[0], hex[1]);\t\t\t\\\n   } while (0)\n #else\n #define ASM_OUTPUT_DOUBLE_OPERAND(FILE,VALUE)\t\t\t\t\\"}, {"sha": "5040aa6a92f122a2333884bdcb4a61c7023390c9", "filename": "gcc/config/m68k/next21.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Fnext21.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Fnext21.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fnext21.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -69,7 +69,7 @@ Boston, MA 02111-1307, USA.  */\n           long l;\t\t\t\t\t\t\\\n           REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\t\\\n           if (sizeof (int) == sizeof (long))\t\t\t\\\n-            asm_fprintf ((FILE), \"%I0x%x\", l);\t\t\t\\\n+            asm_fprintf ((FILE), \"%I0x%x\", (int) l);\t\t\\\n           else\t\t\t\t\t\t\t\\\n             asm_fprintf ((FILE), \"%I0x%lx\", l);\t\t\t\\\n         }\t\t\t\t\t\t\t\\"}, {"sha": "0ad980b15e10eb2422b59e97a9bd7b79b6159f9c", "filename": "gcc/config/m68k/plexus.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Fplexus.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Fplexus.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fplexus.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -46,7 +46,7 @@ Boston, MA 02111-1307, USA.  */\n #define CPP_PREDEFINES \"-Dm68 -Dunix -Dplexus -Asystem=unix  -Acpu=m68k -Amachine=m68k\"\n \n #if TARGET_DEFAULT & MASK_68020\n-#define ASM_SPEC\\\n+#define ASM_SPEC \\\n \"%{m68000:-mc68000}%{mc68000:-mc68000}%{!mc68000:%{!m68000:-mc68020}}\"\n #undef STRICT_ALIGNMENT\n #define STRICT_ALIGNMENT 0"}, {"sha": "0c5eb596d1f692c32c3b24027edad98b3c4f89b4", "filename": "gcc/config/m68k/sgs.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Fsgs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Fsgs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fsgs.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -115,7 +115,7 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_LONG_DOUBLE(FILE,VALUE)  \t\t\t\\\n do { long l[3];\t\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_LONG_DOUBLE (VALUE, l);\t\t\\\n-     fprintf ((FILE), \"%s0x%x,0x%x,0x%x\\n\", LONG_ASM_OP,\t\\\n+     fprintf ((FILE), \"%s0x%lx,0x%lx,0x%lx\\n\", LONG_ASM_OP,\t\\\n \t     l[0], l[1], l[2]);\t\t\t\t\t\\\n    } while (0)\n \n@@ -125,7 +125,7 @@ do { long l[3];\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\\\n do { long l[2];\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_DOUBLE (VALUE, l);\t\t\\\n-     fprintf ((FILE), \"%s0x%x,0x%x\\n\", LONG_ASM_OP,\t\\\n+     fprintf ((FILE), \"%s0x%lx,0x%lx\\n\", LONG_ASM_OP,\t\\\n \t      l[0], l[1]);\t\t\t\t\\\n    } while (0)\n \n@@ -135,7 +135,7 @@ do { long l[2];\t\t\t\t\t\t\\\n #define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\\\n do { long l;\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\t\\\n-     fprintf ((FILE), \"%s0x%x\\n\", LONG_ASM_OP, l);\t\\\n+     fprintf ((FILE), \"%s0x%lx\\n\", LONG_ASM_OP, l);\t\\\n    } while (0)\n \n /* This is how to output an assembler line that says to advance the\n@@ -157,7 +157,7 @@ do { long l;\t\t\t\t\t\t\\\n \n #define ASM_OUTPUT_ASCII(FILE,PTR,LEN)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\\\n-  register int sp = 0, lp = 0, ch;\t\t\t\t\\\n+  register int sp = 0, ch;\t\t\t\t\t\\\n   fprintf ((FILE), \"%s\", BYTE_ASM_OP);\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\\\n     ch = (PTR)[sp];\t\t\t\t\t\t\\\n@@ -213,14 +213,14 @@ do {\t\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_FLOAT_OPERAND(CODE,FILE,VALUE)\t\\\n   do { long l;\t\t\t\t\t\t\\\n        REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\t\\\n-       asm_fprintf ((FILE), \"%I0x%x\", l);\t\t\\\n+       asm_fprintf ((FILE), \"%I0x%lx\", l);\t\t\\\n      } while (0)\n   \n #undef ASM_OUTPUT_DOUBLE_OPERAND\n #define ASM_OUTPUT_DOUBLE_OPERAND(FILE,VALUE)\t\t\\\n   do { long l[2];\t\t\t\t\t\\\n        REAL_VALUE_TO_TARGET_DOUBLE (VALUE, l);\t\t\\\n-       asm_fprintf ((FILE), \"%I0x%x%08x\", l[0], l[1]);\t\\\n+       asm_fprintf ((FILE), \"%I0x%lx%08lx\", l[0], l[1]);\\\n      } while (0)\n \n /* How to output a block of SIZE zero bytes.  Note that the `space' pseudo,"}, {"sha": "4dd393baccf5384ae125240e348863548949f357", "filename": "gcc/config/m68k/sun2o4.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Fsun2o4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Fsun2o4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fsun2o4.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -146,7 +146,7 @@ Boston, MA 02111-1307, USA.  */\n           long l;\t\t\t\t\t\t\\\n           REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\t\\\n           if (sizeof (int) == sizeof (long))\t\t\t\\\n-            asm_fprintf ((FILE), \"%I0x%x\", l);\t\t\t\\\n+            asm_fprintf ((FILE), \"%I0x%x\", (int) l);\t\t\\\n           else\t\t\t\t\t\t\t\\\n             asm_fprintf ((FILE), \"%I0x%lx\", l);\t\t\t\\\n         }\t\t\t\t\t\t\t\\"}, {"sha": "e8265630dff013907038dfc21afd82bf2969d10d", "filename": "gcc/config/m68k/sun3.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Fsun3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Fsun3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fsun3.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -242,7 +242,7 @@ Boston, MA 02111-1307, USA.  */\n           long l;\t\t\t\t\t\t\\\n           REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\t\\\n           if (sizeof (int) == sizeof (long))\t\t\t\\\n-            asm_fprintf ((FILE), \"%I0x%x\", l);\t\t\t\\\n+            asm_fprintf ((FILE), \"%I0x%x\", (int) l);\t\t\\\n           else\t\t\t\t\t\t\t\\\n             asm_fprintf ((FILE), \"%I0x%lx\", l);\t\t\t\\\n         }\t\t\t\t\t\t\t\\"}, {"sha": "6dd60dc5ee5b36836723c2c273dec3e965708e13", "filename": "gcc/config/m68k/tower-as.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Ftower-as.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm68k%2Ftower-as.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ftower-as.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -244,7 +244,7 @@ Boston, MA 02111-1307, USA.  */\n \n #undef ASM_GENERATE_INTERNAL_LABEL\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL, PREFIX, NUM)\t\\\n-  sprintf ((LABEL), \"%s%%%d\", (PREFIX), (NUM))\n+  sprintf ((LABEL), \"%s%%%ld\", (PREFIX), (long)(NUM))\n \n #undef ASM_OUTPUT_INTERNAL_LABEL\n #define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM)\t\\\n@@ -259,21 +259,21 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_DOUBLE(FILE,VALUE)  \\\n do { long l[2];\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_DOUBLE (VALUE, l);\t\t\\\n-     fprintf (FILE, \"\\tlong 0x%x,0x%x\\n\", l[0], l[1]); \\\n+     fprintf (FILE, \"\\tlong 0x%lx,0x%lx\\n\", l[0], l[1]); \\\n    } while (0)\n \n #undef ASM_OUTPUT_LONG_DOUBLE\n #define ASM_OUTPUT_LONG_DOUBLE(FILE,VALUE)  \t\t\t\t\\\n do { long l[3];\t\t\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_LONG_DOUBLE (VALUE, l);\t\t\t\\\n-     fprintf (FILE, \"\\tlong 0x%x,0x%x,0x%x\\n\", l[0], l[1], l[2]);\t\\\n+     fprintf (FILE, \"\\tlong 0x%lx,0x%lx,0x%lx\\n\", l[0], l[1], l[2]);\t\\\n    } while (0)\n \n #undef ASM_OUTPUT_FLOAT\n #define ASM_OUTPUT_FLOAT(FILE,VALUE)  \\\n do { long l;\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\\\n-     fprintf ((FILE), \"\\tlong 0x%x\\n\", l);\t\\\n+     fprintf ((FILE), \"\\tlong 0x%lx\\n\", l);\t\\\n    } while (0)\n \n /* This is how to output an assembler line defining an `int' constant.  */\n@@ -302,7 +302,7 @@ do { long l;\t\t\t\t\t\\\n \n #undef ASM_OUTPUT_BYTE\n #define ASM_OUTPUT_BYTE(FILE,VALUE)  \\\n-  fprintf (FILE, \"\\tbyte 0x%x\\n\", (VALUE))\n+  fprintf (FILE, \"\\tbyte 0x%x\\n\", (int)(VALUE))\n \n #undef ASM_OUTPUT_ADDR_VEC_ELT\n #define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE)  \\\n@@ -364,7 +364,7 @@ do { long l;\t\t\t\t\t\\\n     { REAL_VALUE_TYPE r; long l;\t\t\t\t\t\\\n       REAL_VALUE_FROM_CONST_DOUBLE (r, X);\t\t\t\t\\\n       REAL_VALUE_TO_TARGET_SINGLE (r, l);\t\t\t\t\\\n-      fprintf (FILE, \"&0x%x\", l); }\t\t\t\t\t\\\n+      fprintf (FILE, \"&0x%lx\", l); }\t\t\t\t\t\\\n   else if (GET_CODE (X) == CONST_DOUBLE && GET_MODE (X) == DFmode)\t\\\n     { REAL_VALUE_TYPE r; int i[2];\t\t\t\t\t\\\n       REAL_VALUE_FROM_CONST_DOUBLE (r, X);\t\t\t\t\\"}, {"sha": "cee7096bc9def564684a580da6d2d5a100b6e950", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -2005,7 +2005,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n \n #undef ASM_GENERATE_INTERNAL_LABEL\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\t\t\\\n-  sprintf (LABEL, TARGET_SVR4 ? \"*.%s%d\" : \"*@%s%d\", PREFIX, NUM)\n+  sprintf (LABEL, TARGET_SVR4 ? \"*.%s%ld\" : \"*@%s%ld\", PREFIX, (long)(NUM))\n \n /* Internal macro to get a single precision floating point value into\n    an int, so we can print its value in hex.  */\n@@ -2079,7 +2079,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n \n /* This is how to output an assembler line for a numeric constant byte.  */\n #define ASM_OUTPUT_BYTE(FILE,VALUE)  \\\n-  fprintf (FILE, \"%s0x%x\\n\", CHAR_ASM_OP, (VALUE))\n+  fprintf (FILE, \"%s0x%x\\n\", CHAR_ASM_OP, (int)(VALUE))\n \n /* The single-byte pseudo-op is the default.  Override svr[34].h.  */\n #undef\tASM_BYTE_OP"}, {"sha": "5add2f12d604558882b1ec3b24b4bae4e9104449", "filename": "gcc/config/mips/elf.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fmips%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fmips%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -38,7 +38,9 @@ Boston, MA 02111-1307, USA.  */\n #define PUT_SDB_SIZE(a)\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\\\n   extern FILE *asm_out_text_file;\t\t\t\\\n-  fprintf (asm_out_text_file, \"\\t.esize\\t%d;\", (a));\t\\\n+  fprintf (asm_out_text_file, \"\\t.esize\\t\");\t\t\\\n+  fprintf (asm_out_text_file, HOST_WIDE_INT_PRINT_DEC, (HOST_WIDE_INT) (a)); \\\n+  fprintf (asm_out_text_file, \";\");\t\t       \t\\\n } while (0)\n \n #undef PUT_SDB_TYPE\n@@ -151,7 +153,10 @@ do {\t\t\t\t\t\t\t\t\t\\\n \tsize_directive_output = 1;\t\t\t\t\t\\\n \tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n \tassemble_name (FILE, NAME);\t\t\t\t\t\\\n-\tfprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL)));\t\\\n+\tfprintf (FILE, \",\");\t\t\t\t\t\t\\\n+\tfprintf (FILE, HOST_WIDE_INT_PRINT_DEC,\t\t\t\t\\\n+\t  int_size_in_bytes (TREE_TYPE (DECL)));\t\t\t\\\n+\tfprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n     mips_declare_object (FILE, NAME, \"\", \":\\n\", 0);\t\t\t\\\n   } while (0)"}, {"sha": "130dbe747bc639f77733af11232f41b8116bc2b4", "filename": "gcc/config/mips/elf64.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fmips%2Felf64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fmips%2Felf64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf64.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -66,7 +66,9 @@ Boston, MA 02111-1307, USA.  */\n #define PUT_SDB_SIZE(a)\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\\\n   extern FILE *asm_out_text_file;\t\t\t\\\n-  fprintf (asm_out_text_file, \"\\t.esize\\t%d;\", (a));\t\\\n+  fprintf (asm_out_text_file, \"\\t.esize\\t\");\t\t\\\n+  fprintf (asm_out_text_file, HOST_WIDE_INT_PRINT_DEC, (HOST_WIDE_INT) (a)); \\\n+  fprintf (asm_out_text_file, \";\");\t\t       \t\\\n } while (0)\n \n #undef PUT_SDB_TYPE\n@@ -133,7 +135,10 @@ do {\t\t\t\t\t\t\\\n \tsize_directive_output = 1;\t\t\t\t\t\\\n \tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n \tassemble_name (FILE, NAME);\t\t\t\t\t\\\n-\tfprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL)));\t\\\n+\tfprintf (FILE, \",\");\t\t\t\t\t\t\\\n+\tfprintf (FILE, HOST_WIDE_INT_PRINT_DEC,\t\t\t\t\\\n+\t  int_size_in_bytes (TREE_TYPE (DECL)));\t\t\t\\\n+\tfprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n     mips_declare_object (FILE, NAME, \"\", \":\\n\", 0);\t\t\t\\\n   } while (0)"}, {"sha": "c6454c223b5b1a50ef7a015e29d5160346799a47", "filename": "gcc/config/mips/iris5gas.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fmips%2Firis5gas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fmips%2Firis5gas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis5gas.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -23,7 +23,9 @@\n #define PUT_SDB_SIZE(a)                                       \\\n do {                                                  \\\n   extern FILE *asm_out_text_file;                     \\\n-  fprintf (asm_out_text_file, \"\\t.esize\\t%d;\", (a));  \\\n+  fprintf (asm_out_text_file, \"\\t.esize\\t\");          \\\n+  fprintf (asm_out_text_file, HOST_WIDE_INT_PRINT_DEC, (HOST_WIDE_INT) (a)); \\\n+  fprintf (asm_out_text_file, \";\");                   \\\n } while (0)\n \n #undef PUT_SDB_TYPE"}, {"sha": "b51ee2b3da2a7a72779047776c30541e85d793de", "filename": "gcc/config/mips/linux.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fmips%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fmips%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Flinux.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -84,8 +84,10 @@ do {\t\t\t\t\t\t\t\t\\\n \tsize_directive_output = 1;\t\t\t\t\\\n \tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\\\n \tassemble_name (FILE, NAME);\t\t\t\t\\\n-\tfprintf (FILE, \",%d\\n\",\t\t\t\t\t\\\n+\tfprintf (FILE, \",\");\t\t\t\t\t\\\n+\tfprintf (FILE, HOST_WIDE_INT_PRINT_DEC,\t\t\t\\\n \t\t int_size_in_bytes (TREE_TYPE (DECL)));\t\t\\\n+\tfprintf (FILE, \"\\n\");\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\\\n     mips_declare_object (FILE, NAME, \"\", \":\\n\", 0);\t\t\\\n   } while (0)"}, {"sha": "dedad2eac2c87d27f6fd242451f86e927497cebc", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -5852,7 +5852,7 @@ mips_output_external (file, decl, name)\n #ifdef ASM_OUTPUT_UNDEF_FUNCTION\n int\n mips_output_external_libcall (file, name)\n-     FILE *file;\n+     FILE *file ATTRIBUTE_UNUSED;\n      const char *name;\n {\n   register struct extern_list *p;\n@@ -6090,8 +6090,6 @@ void\n mips_asm_file_start (stream)\n      FILE *stream;\n {\n-  const char * abi_string = NULL;\n-\n   ASM_OUTPUT_SOURCE_FILENAME (stream, main_input_filename);\n \n   /* Versions of the MIPS assembler before 2.20 generate errors if a branch\n@@ -6111,6 +6109,7 @@ mips_asm_file_start (stream)\n \t bits.  GDB needs this information in order to be able to correctly\n \t debug these binaries. See the function mips_gdbarch_init() in\n \t gdb/mips-tdep.c.  */\n+      const char * abi_string = NULL;\n \n       switch (mips_abi)\n \t{"}, {"sha": "2a6dd441157d9af4482fcc0c32945be26309dbdc", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -1275,7 +1275,9 @@ do {\t\t\t\t\t\t\t\\\n #define PUT_SDB_INT_VAL(a)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\\\n   extern FILE *asm_out_text_file;\t\t\t\\\n-  fprintf (asm_out_text_file, \"\\t.val\\t%d;\", (a));\t\\\n+  fprintf (asm_out_text_file, \"\\t.val\\t\");\t\t\\\n+  fprintf (asm_out_text_file, HOST_WIDE_INT_PRINT_DEC, (HOST_WIDE_INT)(a)); \\\n+  fprintf (asm_out_text_file, \";\");\t\t\t\\\n } while (0)\n \n #define PUT_SDB_VAL(a)\t\t\t\t\t\\\n@@ -1317,7 +1319,9 @@ do {\t\t\t\t\t\t\t\\\n #define PUT_SDB_SIZE(a)\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\\\n   extern FILE *asm_out_text_file;\t\t\t\\\n-  fprintf (asm_out_text_file, \"\\t.size\\t%d;\", (a));\t\\\n+  fprintf (asm_out_text_file, \"\\t.size\\t\");\t\t\\\n+  fprintf (asm_out_text_file, HOST_WIDE_INT_PRINT_DEC, (HOST_WIDE_INT)(a)); \\\n+  fprintf (asm_out_text_file, \";\");\t\t\t\\\n } while (0)\n \n #define PUT_SDB_DIM(a)\t\t\t\t\t\\"}, {"sha": "09229f149b310e9559689e0096d2d0c5dd149e28", "filename": "gcc/config/mips/netbsd.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fnetbsd.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -152,7 +152,10 @@ Boston, MA 02111-1307, USA.  */\n \tsize_directive_output = 1;\t\t\t\t\t\\\n \tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n \tassemble_name (FILE, NAME);\t\t\t\t\t\\\n-\tfprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL)));\t\\\n+\tfprintf (FILE, \",\");\t\t\t\t\t\t\\\n+\tfprintf (FILE, HOST_WIDE_INT_PRINT_DEC,\t\t\t\t\\\n+\t  int_size_in_bytes (TREE_TYPE (DECL)));\t\t\t\\\n+\tfprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n     ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t\\\n   } while (0)"}, {"sha": "e79c074405f7d95b4e8f0c03dd9a98cd3a7f8b08", "filename": "gcc/config/mips/sni-gas.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fmips%2Fsni-gas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fmips%2Fsni-gas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsni-gas.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -11,10 +11,12 @@\n    avoid conflicting with ELF directives.  These are only recognized\n    by gas, anyhow, not the native assembler.  */\n #undef PUT_SDB_SIZE\n-#define PUT_SDB_SIZE(a)                                       \\\n+#define PUT_SDB_SIZE(a)                               \\\n do {                                                  \\\n   extern FILE *asm_out_text_file;                     \\\n-  fprintf (asm_out_text_file, \"\\t.esize\\t%d;\", (a));  \\\n+  fprintf (asm_out_text_file, \"\\t.esize\\t\");          \\\n+  fprintf (asm_out_text_file, HOST_WIDE_INT_PRINT_DEC, (HOST_WIDE_INT) (a)); \\\n+  fprintf (asm_out_text_file, \";\");                   \\\n } while (0)\n \n #undef PUT_SDB_TYPE"}, {"sha": "be86c6cbdfc0f95626ad2c1afef2d81151a6b763", "filename": "gcc/config/ns32k/encore.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fns32k%2Fencore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fns32k%2Fencore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fencore.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -87,7 +87,7 @@ output_file_directive ((FILE), main_input_filename)\n  */\n \n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\t\t\\\n-\tsprintf (LABEL, \"*.%s%d\", PREFIX, NUM)\n+\tsprintf (LABEL, \"*.%s%ld\", PREFIX, (long)(NUM))\n #define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM)\t\t\t\\\n \tfprintf (FILE, \".%s%d:\\n\", PREFIX, NUM)\n #define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL)\t\t\\"}, {"sha": "264245e3c2a3ddb416287388cd62cbf0a369d9eb", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -1145,7 +1145,7 @@ print_operand (file, x, code)\n \t  {\n \t    union { float f; long l; } uu;\n \t    uu.f = u.d;\n-\t    fprintf (file, \"0Fx%08x\", uu.l);\n+\t    fprintf (file, \"0Fx%08lx\", uu.l);\n \t  }\n #else\n \t  fprintf (file, \"0f%.20e\", u.d); "}, {"sha": "4f592c88a3c76a9f4832ebcb6a38c625e0054865", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -4218,21 +4218,21 @@ print_operand (file, x, code)\n     case 'k':\n       if (GET_CODE (x) == CONST_INT)\n \t{\n-\t  fprintf (file, \"%d\", ~INTVAL (x));\n+\t  fprintf (file, HOST_WIDE_INT_PRINT_DEC, ~INTVAL (x));\n \t  return;\n \t}\n       abort ();\n     case 'Q':\n       if (GET_CODE (x) == CONST_INT)\n \t{\n-\t  fprintf (file, \"%d\", 64 - (INTVAL (x) & 63));\n+\t  fprintf (file, HOST_WIDE_INT_PRINT_DEC, 64 - (INTVAL (x) & 63));\n \t  return;\n \t}\n       abort ();\n     case 'L':\n       if (GET_CODE (x) == CONST_INT)\n \t{\n-\t  fprintf (file, \"%d\", 32 - (INTVAL (x) & 31));\n+\t  fprintf (file, HOST_WIDE_INT_PRINT_DEC, 32 - (INTVAL (x) & 31));\n \t  return;\n \t}\n       abort ();\n@@ -4246,14 +4246,14 @@ print_operand (file, x, code)\n     case 'p':\n       if (GET_CODE (x) == CONST_INT)\n \t{\n-\t  fprintf (file, \"%d\", 63 - (INTVAL (x) & 63));\n+\t  fprintf (file, HOST_WIDE_INT_PRINT_DEC, 63 - (INTVAL (x) & 63));\n \t  return;\n \t}\n       abort ();\n     case 'P':\n       if (GET_CODE (x) == CONST_INT)\n \t{\n-\t  fprintf (file, \"%d\", 31 - (INTVAL (x) & 31));\n+\t  fprintf (file, HOST_WIDE_INT_PRINT_DEC, 31 - (INTVAL (x) & 31));\n \t  return;\n \t}\n       abort ();\n@@ -4595,13 +4595,15 @@ output_div_insn (operands, unsignedp, insn)\n \t}\n       if (unsignedp)\n \t{\n-\t  sprintf (buf, \"$$divU_%d\", INTVAL (operands[0]));\n+\t  sprintf (buf, \"$$divU_\");\n+\t  sprintf (buf + 7, HOST_WIDE_INT_PRINT_DEC, INTVAL (operands[0]));\n \t  return output_millicode_call (insn,\n \t\t\t\t\tgen_rtx_SYMBOL_REF (SImode, buf));\n \t}\n       else\n \t{\n-\t  sprintf (buf, \"$$divI_%d\", INTVAL (operands[0]));\n+\t  sprintf (buf, \"$$divI_\");\n+\t  sprintf (buf + 7, HOST_WIDE_INT_PRINT_DEC, INTVAL (operands[0]));\n \t  return output_millicode_call (insn,\n \t\t\t\t\tgen_rtx_SYMBOL_REF (SImode, buf));\n \t}"}, {"sha": "22542f956a0861bcfa8968203bc5456bd59d818e", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -865,10 +865,19 @@ extern enum cmp_type hppa_branch_type;\n   STRIP_NAME_ENCODING (target_name, target_name); \\\n   pa_output_function_prologue (FILE, 0); \\\n   if (VAL_14_BITS_P (DELTA)) \\\n-    fprintf (FILE, \"\\tb %s\\n\\tldo %d(%%r26),%%r26\\n\", target_name, DELTA); \\\n+    { \\\n+      fprintf (FILE, \"\\tb %s\\n\\tldo \", target_name); \\\n+      fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, DELTA); \\\n+      fprintf (FILE, \"(%%r26),%%r26\\n\"); \\\n+    } \\\n   else \\\n-    fprintf (FILE, \"\\taddil L%%%d,%%r26\\n\\tb %s\\n\\tldo R%%%d(%%r1),%%r26\\n\", \\\n-\t     DELTA, target_name, DELTA); \\\n+    { \\\n+      fprintf (FILE, \"\\taddil L%%\"); \\\n+      fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, DELTA); \\\n+      fprintf (FILE, \",%%r26\\n\\tb %s\\n\\tldo R%%\", target_name); \\\n+      fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, DELTA); \\\n+      fprintf (FILE, \"(%%r1),%%r26\\n\"); \\\n+    } \\\n   fprintf (FILE, \"\\n\\t.EXIT\\n\\t.PROCEND\\n\"); \\\n }\n \n@@ -1724,7 +1733,7 @@ while (0)\n    This is suitable for output with `assemble_name'.  */\n \n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n-  sprintf (LABEL, \"*%c$%s%04d\", (PREFIX)[0], (PREFIX) + 1, NUM)\n+  sprintf (LABEL, \"*%c$%s%04ld\", (PREFIX)[0], (PREFIX) + 1, (long)(NUM))\n \n /* This is how to output an assembler line defining a `double' constant.  */\n \n@@ -1770,7 +1779,7 @@ while (0)\n /* This is how to output an assembler line for a numeric constant byte.  */\n \n #define ASM_OUTPUT_BYTE(FILE,VALUE)  \\\n-  fprintf (FILE, \"\\t.byte 0x%x\\n\", (VALUE))\n+  fprintf (FILE, \"\\t.byte 0x%x\\n\", (int)(VALUE))\n \n /* C string constants giving the pseudo-op to use for a sequence of\n    2, 4, and 8 byte unaligned constants.  dwarf2out.c needs these.  */\n@@ -1912,7 +1921,8 @@ while (0)\n       fputs (\")\", FILE);\t\t\t\t\t\t\\\n       break;\t\t\t\t\t\t\t\t\\\n     case CONST_INT:\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"%d(%%r0)\", INTVAL (addr));\t\t\t\\\n+      fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, INTVAL (addr));\t\t\\\n+      fprintf (FILE, \"(%%r0)\");\t\t\t\t\t\t\\\n       break;\t\t\t\t\t\t\t\t\\\n     default:\t\t\t\t\t\t\t\t\\\n       output_addr_const (FILE, addr);\t\t\t\t\t\\"}, {"sha": "2da2023e039615b8fd0111829f53e720a06238df", "filename": "gcc/config/pa/pa64-hpux.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -152,9 +152,9 @@ const_section ()\t\t\t\t\t\t\t\\\n #define UNIQUE_SECTION(DECL,RELOC)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\\\n   int len;\t\t\t\t\t\t\t\\\n-  char *name, *string, *prefix;\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-  name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (DECL));\t\\\n+  char *string;\t\t\t\t\t\t\t\\\n+  const char *prefix,\t\t\t\t\t\t\\\n+    *const name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (DECL));\\\n \t\t\t\t\t\t\t\t\\\n   if (! DECL_ONE_ONLY (DECL))\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\"}, {"sha": "78fcda5f6fc5baae3de66d32a12f347658f97281", "filename": "gcc/config/sparc/linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fsparc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fsparc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -227,7 +227,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #undef  ASM_GENERATE_INTERNAL_LABEL\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n-  sprintf (LABEL, \"*.L%s%d\", PREFIX, NUM)\n+  sprintf (LABEL, \"*.L%s%ld\", PREFIX, (long)(NUM))\n \n \f\n /* Define for support of TFmode long double and REAL_ARITHMETIC."}, {"sha": "a15f8710b1234da6f5bf835e7d3b96e715fcf5b2", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -353,7 +353,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #undef  ASM_GENERATE_INTERNAL_LABEL\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n-  sprintf (LABEL, \"*.L%s%d\", PREFIX, NUM)\n+  sprintf (LABEL, \"*.L%s%ld\", PREFIX, (long)(NUM))\n \n /* Define the names of various pseudo-ops used by the Sparc/svr4 assembler.\n    ??? If ints are 64 bits then UNALIGNED_INT_ASM_OP (defined elsewhere) is"}, {"sha": "bf61741318d513417bcc2d61281767b76b605069", "filename": "gcc/config/sparc/pbd.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fsparc%2Fpbd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fsparc%2Fpbd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fpbd.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -120,7 +120,7 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_GENERATE_INTERNAL_LABEL\n \n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)                   \\\n-        sprintf (LABEL, \"*.%s%d\", PREFIX, NUM)\n+        sprintf (LABEL, \"*.%s%ld\", PREFIX, (long)(NUM))\n \n \n /* This is how to output an internal numbered label where\n@@ -146,7 +146,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* This is needed for SunOS 4.0, and should not hurt for 3.2\n    versions either.  */\n-#undef ASM_OUTPUT_SOURCE_LINE(file, line) \n+#undef ASM_OUTPUT_SOURCE_LINE\n #define ASM_OUTPUT_SOURCE_LINE(file, line)\t\t\\\n   { static int sym_lineno = 1;\t\t\t\t\\\n     fprintf (file, \".stabn 68,0,%d,.LM%d\\n.LM%d:\\n\",\t\\"}, {"sha": "9573dbe1312c900bfd2c5e728b92202f5bb3d75b", "filename": "gcc/config/sparc/vxsim.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fsparc%2Fvxsim.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fsparc%2Fvxsim.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fvxsim.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -90,7 +90,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #undef  ASM_GENERATE_INTERNAL_LABEL\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n-  sprintf (LABEL, \"*.L%s%d\", PREFIX, NUM)\n+  sprintf (LABEL, \"*.L%s%ld\", PREFIX, (long)(NUM))\n \n \f\n "}, {"sha": "b1b9eceabfb120534f414d64f2505491df5070ba", "filename": "gcc/config/svr3.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fsvr3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fconfig%2Fsvr3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsvr3.h?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -187,7 +187,7 @@ Boston, MA 02111-1307, USA.\n \n #undef ASM_GENERATE_INTERNAL_LABEL\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n-  sprintf (LABEL, \"*%s%s%d\", LOCAL_LABEL_PREFIX, PREFIX, NUM)\n+  sprintf (LABEL, \"*%s%s%ld\", LOCAL_LABEL_PREFIX, PREFIX, (long)(NUM))\n \n /* We want local labels to start with period if made with asm_fprintf.  */\n #undef LOCAL_LABEL_PREFIX"}, {"sha": "8a6ea31ab79f8b317f61be39f367f14976c83792", "filename": "gcc/sdbout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -1679,7 +1679,7 @@ sdbout_end_function (line)\n static void\n sdbout_end_epilogue ()\n {\n-  const char *const name\n+  const char *const name ATTRIBUTE_UNUSED\n     = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (current_function_decl));\n \n #ifdef PUT_SDB_EPILOGUE_END"}, {"sha": "cb1cd16ff432e56fbba8d1b4d4de6ee003aac5ba", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7d3da148f6cd979808d1b5342b507a3918df/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=e59f7d3da148f6cd979808d1b5342b507a3918df", "patch": "@@ -1805,7 +1805,7 @@ assemble_external_libcall (fun)\n \n void\n assemble_global (name)\n-     const char *name;\n+     const char *name ATTRIBUTE_UNUSED;\n {\n   ASM_GLOBALIZE_LABEL (asm_out_file, name);\n }"}]}