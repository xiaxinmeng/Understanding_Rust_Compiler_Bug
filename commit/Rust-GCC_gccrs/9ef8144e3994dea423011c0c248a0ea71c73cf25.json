{"sha": "9ef8144e3994dea423011c0c248a0ea71c73cf25", "node_id": "C_kwDOANBUbNoAKDllZjgxNDRlMzk5NGRlYTQyMzAxMWMwYzI0OGEwZWE3MWM3M2NmMjU", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-11-18T08:48:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-18T08:48:08Z"}, "message": "Merge #1636\n\n1636: Add location to AST::Visibility r=CohenArthur a=dme2\n\nHi. I've added location to AST::Visibility, but it's possible I may have missed some steps here.\r\n\r\nFixes #1183. \n\nCo-authored-by: Dave <dme2223@gmail.com>", "tree": {"sha": "358b50f30b9764fea0735b85a98f7c360eaf36b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/358b50f30b9764fea0735b85a98f7c360eaf36b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ef8144e3994dea423011c0c248a0ea71c73cf25", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjd0bICRBK7hj4Ov3rIwAA2r8IAEAvB4pcO0Eiqyfv0FgMq8DS\naQNZODYoTFITftOz0koL9hPhcjywLKzxNneOAjv55dJb1gbQMW9Fb68mAvqQzes6\nL+FYEQ5rqw0UrMts3qTB3riPDWukQoDsE370fPpCRw/TRXm+UieUbcldxpMl+Fqg\nABVHh9S5po6Kpw2UMka4UZYca7m6FiZmwKTvMx9GhAyR+fUZrh2CTJjwmIx6XPGc\nSTdwd996nunK34GQSWo+h3x0iCQeAIQbgcMghu7fKROgmxULsaG97V46iyDT2tDg\nFNmW0hzcBcx37bJczRNn9ohtQ8jpli2JXWxmPFi/Io7/zPYWfirWkkyRUGWMcWI=\n=mxff\n-----END PGP SIGNATURE-----\n", "payload": "tree 358b50f30b9764fea0735b85a98f7c360eaf36b5\nparent d8e9850b7f818f56fcf7e945003556db349db536\nparent bea720bef773efce55391ef005b7be990b9bfc50\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1668761288 +0000\ncommitter GitHub <noreply@github.com> 1668761288 +0000\n\nMerge #1636\n\n1636: Add location to AST::Visibility r=CohenArthur a=dme2\n\nHi. I've added location to AST::Visibility, but it's possible I may have missed some steps here.\r\n\r\nFixes #1183. \n\nCo-authored-by: Dave <dme2223@gmail.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ef8144e3994dea423011c0c248a0ea71c73cf25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ef8144e3994dea423011c0c248a0ea71c73cf25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ef8144e3994dea423011c0c248a0ea71c73cf25/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8e9850b7f818f56fcf7e945003556db349db536", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8e9850b7f818f56fcf7e945003556db349db536", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8e9850b7f818f56fcf7e945003556db349db536"}, {"sha": "bea720bef773efce55391ef005b7be990b9bfc50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bea720bef773efce55391ef005b7be990b9bfc50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bea720bef773efce55391ef005b7be990b9bfc50"}], "stats": {"total": 64, "additions": 40, "deletions": 24}, "files": [{"sha": "b91aec0d3afd8048a8ef82ce41493f71b279b28e", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ef8144e3994dea423011c0c248a0ea71c73cf25/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ef8144e3994dea423011c0c248a0ea71c73cf25/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=9ef8144e3994dea423011c0c248a0ea71c73cf25", "patch": "@@ -627,13 +627,14 @@ struct Visibility\n   VisType vis_type;\n   // Only assigned if vis_type is IN_PATH\n   SimplePath in_path;\n+  Location locus;\n \n   // should this store location info?\n \n public:\n   // Creates a Visibility - TODO make constructor protected or private?\n-  Visibility (VisType vis_type, SimplePath in_path)\n-    : vis_type (vis_type), in_path (std::move (in_path))\n+  Visibility (VisType vis_type, SimplePath in_path, Location locus)\n+    : vis_type (vis_type), in_path (std::move (in_path)), locus (locus)\n   {}\n \n   VisType get_vis_type () const { return vis_type; }\n@@ -650,10 +651,13 @@ struct Visibility\n   // Returns whether visibility is public or not.\n   bool is_public () const { return vis_type != PRIV && !is_error (); }\n \n+  Location get_locus () const { return locus; }\n+\n+  // empty?\n   // Creates an error visibility.\n   static Visibility create_error ()\n   {\n-    return Visibility (PUB_IN_PATH, SimplePath::create_empty ());\n+    return Visibility (PUB_IN_PATH, SimplePath::create_empty (), Location ());\n   }\n \n   // Unique pointer custom clone function\n@@ -665,42 +669,50 @@ struct Visibility\n    * is one idea but may be too resource-intensive. */\n \n   // Creates a public visibility with no further features/arguments.\n-  static Visibility create_public ()\n+  // empty?\n+  static Visibility create_public (Location pub_vis_location)\n   {\n-    return Visibility (PUB, SimplePath::create_empty ());\n+    return Visibility (PUB, SimplePath::create_empty (), pub_vis_location);\n   }\n \n   // Creates a public visibility with crate-relative paths\n-  static Visibility create_crate (Location crate_tok_location)\n+  static Visibility create_crate (Location crate_tok_location,\n+\t\t\t\t  Location crate_vis_location)\n   {\n     return Visibility (PUB_CRATE,\n-\t\t       SimplePath::from_str (\"crate\", crate_tok_location));\n+\t\t       SimplePath::from_str (\"crate\", crate_tok_location),\n+\t\t       crate_vis_location);\n   }\n \n   // Creates a public visibility with self-relative paths\n-  static Visibility create_self (Location self_tok_location)\n+  static Visibility create_self (Location self_tok_location,\n+\t\t\t\t Location self_vis_location)\n   {\n     return Visibility (PUB_SELF,\n-\t\t       SimplePath::from_str (\"self\", self_tok_location));\n+\t\t       SimplePath::from_str (\"self\", self_tok_location),\n+\t\t       self_vis_location);\n   }\n \n   // Creates a public visibility with parent module-relative paths\n-  static Visibility create_super (Location super_tok_location)\n+  static Visibility create_super (Location super_tok_location,\n+\t\t\t\t  Location super_vis_location)\n   {\n     return Visibility (PUB_SUPER,\n-\t\t       SimplePath::from_str (\"super\", super_tok_location));\n+\t\t       SimplePath::from_str (\"super\", super_tok_location),\n+\t\t       super_vis_location);\n   }\n \n   // Creates a private visibility\n   static Visibility create_private ()\n   {\n-    return Visibility (PRIV, SimplePath::create_empty ());\n+    return Visibility (PRIV, SimplePath::create_empty (), Location ());\n   }\n \n   // Creates a public visibility with a given path or whatever.\n-  static Visibility create_in_path (SimplePath in_path)\n+  static Visibility create_in_path (SimplePath in_path,\n+\t\t\t\t    Location in_path_vis_location)\n   {\n-    return Visibility (PUB_IN_PATH, std::move (in_path));\n+    return Visibility (PUB_IN_PATH, std::move (in_path), in_path_vis_location);\n   }\n \n   std::string as_string () const;\n@@ -3841,8 +3853,8 @@ class ExternalItem\n public:\n   virtual ~ExternalItem () {}\n \n-  /* TODO: spec syntax rules state that \"MacroInvocationSemi\" can be used as \n-   * ExternalItem, but text body isn't so clear. Adding MacroInvocationSemi \n+  /* TODO: spec syntax rules state that \"MacroInvocationSemi\" can be used as\n+   * ExternalItem, but text body isn't so clear. Adding MacroInvocationSemi\n    * support would require a lot of refactoring. */\n \n   // Returns whether item has outer attributes."}, {"sha": "bffef4c361cde1ebfe067710391009eb09a4e35b", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ef8144e3994dea423011c0c248a0ea71c73cf25/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ef8144e3994dea423011c0c248a0ea71c73cf25/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=9ef8144e3994dea423011c0c248a0ea71c73cf25", "patch": "@@ -50,7 +50,8 @@ translate_visibility (const AST::Visibility &vis)\n     case AST::Visibility::PUB_SUPER:\n     case AST::Visibility::PUB_IN_PATH:\n       return Visibility (Visibility::VisType::RESTRICTED,\n-\t\t\t ASTLoweringSimplePath::translate (vis.get_path ()));\n+\t\t\t ASTLoweringSimplePath::translate (vis.get_path ()),\n+\t\t\t vis.get_locus ());\n       break;\n     }\n "}, {"sha": "4420a0de0765ba9dfdf162c18cc9db0b96df3303", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ef8144e3994dea423011c0c248a0ea71c73cf25/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ef8144e3994dea423011c0c248a0ea71c73cf25/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=9ef8144e3994dea423011c0c248a0ea71c73cf25", "patch": "@@ -571,13 +571,15 @@ struct Visibility\n private:\n   VisType vis_type;\n   HIR::SimplePath path;\n+  Location locus;\n \n   // should this store location info?\n \n public:\n   Visibility (VisType vis_type,\n-\t      HIR::SimplePath path = HIR::SimplePath::create_empty ())\n-    : vis_type (vis_type), path (std::move (path))\n+\t      HIR::SimplePath path = HIR::SimplePath::create_empty (),\n+\t      Location locus = Location ())\n+    : vis_type (vis_type), path (std::move (path)), locus (locus)\n   {}\n \n   // Returns whether visibility is in an error state."}, {"sha": "5642990c14be442740406cad20d7a36aeac5a54b", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ef8144e3994dea423011c0c248a0ea71c73cf25/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ef8144e3994dea423011c0c248a0ea71c73cf25/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=9ef8144e3994dea423011c0c248a0ea71c73cf25", "patch": "@@ -2128,12 +2128,13 @@ Parser<ManagedTokenSource>::parse_visibility ()\n       return AST::Visibility::create_private ();\n     }\n \n+  auto vis_loc = lexer.peek_token ()->get_locus ();\n   lexer.skip_token ();\n \n   // create simple pub visibility if no parentheses\n   if (lexer.peek_token ()->get_id () != LEFT_PAREN)\n     {\n-      return AST::Visibility::create_public ();\n+      return AST::Visibility::create_public (vis_loc);\n       // or whatever\n     }\n \n@@ -2149,19 +2150,19 @@ Parser<ManagedTokenSource>::parse_visibility ()\n \n       skip_token (RIGHT_PAREN);\n \n-      return AST::Visibility::create_crate (path_loc);\n+      return AST::Visibility::create_crate (path_loc, vis_loc);\n     case SELF:\n       lexer.skip_token ();\n \n       skip_token (RIGHT_PAREN);\n \n-      return AST::Visibility::create_self (path_loc);\n+      return AST::Visibility::create_self (path_loc, vis_loc);\n     case SUPER:\n       lexer.skip_token ();\n \n       skip_token (RIGHT_PAREN);\n \n-      return AST::Visibility::create_super (path_loc);\n+      return AST::Visibility::create_super (path_loc, vis_loc);\n       case IN: {\n \tlexer.skip_token ();\n \n@@ -2179,7 +2180,7 @@ Parser<ManagedTokenSource>::parse_visibility ()\n \n \tskip_token (RIGHT_PAREN);\n \n-\treturn AST::Visibility::create_in_path (std::move (path));\n+\treturn AST::Visibility::create_in_path (std::move (path), vis_loc);\n       }\n     default:\n       add_error (Error (t->get_locus (), \"unexpected token %qs in visibility\","}]}