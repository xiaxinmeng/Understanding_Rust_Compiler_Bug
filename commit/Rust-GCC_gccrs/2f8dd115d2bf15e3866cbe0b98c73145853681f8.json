{"sha": "2f8dd115d2bf15e3866cbe0b98c73145853681f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY4ZGQxMTVkMmJmMTVlMzg2NmNiZTBiOThjNzMxNDU4NTM2ODFmOA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2002-07-21T21:59:03Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-07-21T21:59:03Z"}, "message": "c-lex.c (GET_ENVIRONMENT): Remove.\n\n\t* c-lex.c (GET_ENVIRONMENT): Remove.\n\t* collect2.c (GET_ENV_PATH_LIST): Remove.\n\t(prefix_from_env): Use GET_ENVIRONMENT.\n\t* cppinit.c (GET_ENV_PATH_LIST): Remove.\n\t(init_standard_includes): Use GET_ENVIRONMENT.\n\t* defaults.h (GET_ENVIRONMENT): Define here if not already.\n\t* gcc.c (GET_ENV_PATH_LIST): Remove.\n\t(make_relative_prefix, process_command): Update.\n\t* protoize.c (GET_ENV_PATH_LIST): Remove.\n\t(do_processing): Update.\njava:\n\t* jcf-path.c (GET_ENV_PATH_LIST): Remove.\n\t(jcf_path_init): Use GET_ENVIRONMENT.\n\nFrom-SVN: r55630", "tree": {"sha": "be763ce5fbb67290826f0a1e1d85a628e5409dca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be763ce5fbb67290826f0a1e1d85a628e5409dca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f8dd115d2bf15e3866cbe0b98c73145853681f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f8dd115d2bf15e3866cbe0b98c73145853681f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f8dd115d2bf15e3866cbe0b98c73145853681f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f8dd115d2bf15e3866cbe0b98c73145853681f8/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "565083069d08d22e1c8882948fba1e90dcde1388", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/565083069d08d22e1c8882948fba1e90dcde1388", "html_url": "https://github.com/Rust-GCC/gccrs/commit/565083069d08d22e1c8882948fba1e90dcde1388"}], "stats": {"total": 77, "additions": 36, "deletions": 41}, "files": [{"sha": "29dad05254c68e8a78f5a775c50543e3d71a4a52", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f8dd115d2bf15e3866cbe0b98c73145853681f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f8dd115d2bf15e3866cbe0b98c73145853681f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f8dd115d2bf15e3866cbe0b98c73145853681f8", "patch": "@@ -1,3 +1,16 @@\n+2002-07-21  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* c-lex.c (GET_ENVIRONMENT): Remove.\n+\t* collect2.c (GET_ENV_PATH_LIST): Remove.\n+\t(prefix_from_env): Use GET_ENVIRONMENT.\n+\t* cppinit.c (GET_ENV_PATH_LIST): Remove.\n+\t(init_standard_includes): Use GET_ENVIRONMENT.\n+\t* defaults.h (GET_ENVIRONMENT): Define here if not already.\n+\t* gcc.c (GET_ENV_PATH_LIST): Remove.\n+\t(make_relative_prefix, process_command): Update.\n+\t* protoize.c (GET_ENV_PATH_LIST): Remove.\n+\t(do_processing): Update.\n+\n 2002-07-21  Gabriel Dos Reis  <gdr@nerim.net>\n \n \t* c-decl.c (build_array_declarator): Say 'ISO C90', not 'ISO C89'."}, {"sha": "bf5c424740f49c99bb0241c100623b23afb6e165", "filename": "gcc/c-lex.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f8dd115d2bf15e3866cbe0b98c73145853681f8/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f8dd115d2bf15e3866cbe0b98c73145853681f8/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=2f8dd115d2bf15e3866cbe0b98c73145853681f8", "patch": "@@ -44,9 +44,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"mbchar.h\"\n #include <locale.h>\n #endif /* MULTIBYTE_CHARS */\n-#ifndef GET_ENVIRONMENT\n-#define GET_ENVIRONMENT(ENV_VALUE,ENV_NAME) ((ENV_VALUE) = getenv (ENV_NAME))\n-#endif\n \n /* The current line map.  */\n static const struct line_map *map;"}, {"sha": "537c076f939d906bad19c44200372c524cc2800c", "filename": "gcc/collect2.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f8dd115d2bf15e3866cbe0b98c73145853681f8/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f8dd115d2bf15e3866cbe0b98c73145853681f8/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=2f8dd115d2bf15e3866cbe0b98c73145853681f8", "patch": "@@ -246,10 +246,6 @@ int pexecute_pid;\n /* Defined in the automatically-generated underscore.c.  */\n extern int prepends_underscore;\n \n-#ifndef GET_ENV_PATH_LIST\n-#define GET_ENV_PATH_LIST(VAR,NAME)\tdo { (VAR) = getenv (NAME); } while (0)\n-#endif\n-\n /* Structure to hold all the directories in which to search for files to\n    execute.  */\n \n@@ -753,7 +749,7 @@ prefix_from_env (env, pprefix)\n      struct path_prefix *pprefix;\n {\n   const char *p;\n-  GET_ENV_PATH_LIST (p, env);\n+  GET_ENVIRONMENT (p, env);\n \n   if (p)\n     prefix_from_string (p, pprefix);"}, {"sha": "a6be4aa67365dbf1f794ee9e0314dde7a7689aa1", "filename": "gcc/cppinit.c", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f8dd115d2bf15e3866cbe0b98c73145853681f8/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f8dd115d2bf15e3866cbe0b98c73145853681f8/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=2f8dd115d2bf15e3866cbe0b98c73145853681f8", "patch": "@@ -29,12 +29,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #include \"mkdeps.h\"\n #include \"cppdefault.h\"\n \n-/* Predefined symbols, built-in macros, and the default include path.  */\n-\n-#ifndef GET_ENV_PATH_LIST\n-#define GET_ENV_PATH_LIST(VAR,NAME)\tdo { (VAR) = getenv (NAME); } while (0)\n-#endif\n-\n /* Windows does not natively support inodes, and neither does MSDOS.\n    Cygwin's emulation can generate non-unique inodes, so don't use it.\n    VMS has non-numeric inodes.  */\n@@ -729,23 +723,23 @@ init_standard_includes (pfile)\n      etc. specify an additional list of directories to be searched as\n      if specified with -isystem, for the language indicated.  */\n \n-  GET_ENV_PATH_LIST (path, \"CPATH\");\n+  GET_ENVIRONMENT (path, \"CPATH\");\n   if (path != 0 && *path != 0)\n     path_include (pfile, path, BRACKET);\n \n   switch ((CPP_OPTION (pfile, objc) << 1) + CPP_OPTION (pfile, cplusplus))\n     {\n     case 0:\n-      GET_ENV_PATH_LIST (path, \"C_INCLUDE_PATH\");\n+      GET_ENVIRONMENT (path, \"C_INCLUDE_PATH\");\n       break;\n     case 1:\n-      GET_ENV_PATH_LIST (path, \"CPLUS_INCLUDE_PATH\");\n+      GET_ENVIRONMENT (path, \"CPLUS_INCLUDE_PATH\");\n       break;\n     case 2:\n-      GET_ENV_PATH_LIST (path, \"OBJC_INCLUDE_PATH\");\n+      GET_ENVIRONMENT (path, \"OBJC_INCLUDE_PATH\");\n       break;\n     case 3:\n-      GET_ENV_PATH_LIST (path, \"OBJCPLUS_INCLUDE_PATH\");\n+      GET_ENVIRONMENT (path, \"OBJCPLUS_INCLUDE_PATH\");\n       break;\n     }\n   if (path != 0 && *path != 0)"}, {"sha": "b542e5361387fbd907d12bdf2abe50a476e409dd", "filename": "gcc/defaults.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f8dd115d2bf15e3866cbe0b98c73145853681f8/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f8dd115d2bf15e3866cbe0b98c73145853681f8/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=2f8dd115d2bf15e3866cbe0b98c73145853681f8", "patch": "@@ -23,6 +23,10 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #ifndef GCC_DEFAULTS_H\n #define GCC_DEFAULTS_H\n \n+#ifndef GET_ENVIRONMENT\n+#define GET_ENVIRONMENT(VALUE, NAME) do { (VALUE) = getenv (NAME); } while (0)\n+#endif\n+\n /* Define default standard character escape sequences.  */\n #ifndef TARGET_BELL\n #  define TARGET_BELL 007"}, {"sha": "73ae1987ef98eede42d20cc24765c780bfcac387", "filename": "gcc/gcc.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f8dd115d2bf15e3866cbe0b98c73145853681f8/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f8dd115d2bf15e3866cbe0b98c73145853681f8/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=2f8dd115d2bf15e3866cbe0b98c73145853681f8", "patch": "@@ -125,10 +125,6 @@ static const char dir_separator_str[] = { DIR_SEPARATOR, 0 };\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-#ifndef GET_ENV_PATH_LIST\n-#define GET_ENV_PATH_LIST(VAR,NAME)\tdo { (VAR) = getenv (NAME); } while (0)\n-#endif\n-\n /* Most every one is fine with LIBRARY_PATH.  For some, it conflicts.  */\n #ifndef LIBRARY_PATH_ENV\n #define LIBRARY_PATH_ENV \"LIBRARY_PATH\"\n@@ -2352,7 +2348,7 @@ make_relative_prefix (progname, bin_prefix, prefix)\n     {\n       char *temp;\n \n-      GET_ENV_PATH_LIST (temp, \"PATH\");\n+      GET_ENVIRONMENT (temp, \"PATH\");\n       if (temp)\n \t{\n \t  char *startp, *endp, *nstore;\n@@ -3169,7 +3165,7 @@ process_command (argc, argv)\n   int j;\n #endif\n \n-  GET_ENV_PATH_LIST (gcc_exec_prefix, \"GCC_EXEC_PREFIX\");\n+  GET_ENVIRONMENT (gcc_exec_prefix, \"GCC_EXEC_PREFIX\");\n \n   n_switches = 0;\n   n_infiles = 0;\n@@ -3282,7 +3278,7 @@ process_command (argc, argv)\n   /* COMPILER_PATH and LIBRARY_PATH have values\n      that are lists of directory names with colons.  */\n \n-  GET_ENV_PATH_LIST (temp, \"COMPILER_PATH\");\n+  GET_ENVIRONMENT (temp, \"COMPILER_PATH\");\n   if (temp)\n     {\n       const char *startp, *endp;\n@@ -3317,7 +3313,7 @@ process_command (argc, argv)\n \t}\n     }\n \n-  GET_ENV_PATH_LIST (temp, LIBRARY_PATH_ENV);\n+  GET_ENVIRONMENT (temp, LIBRARY_PATH_ENV);\n   if (temp && *cross_compile == '0')\n     {\n       const char *startp, *endp;\n@@ -3350,7 +3346,7 @@ process_command (argc, argv)\n     }\n \n   /* Use LPATH like LIBRARY_PATH (for the CMU build program).  */\n-  GET_ENV_PATH_LIST (temp, \"LPATH\");\n+  GET_ENVIRONMENT (temp, \"LPATH\");\n   if (temp && *cross_compile == '0')\n     {\n       const char *startp, *endp;"}, {"sha": "601e766175f7410620924c0599c5f9688b1dcc52", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f8dd115d2bf15e3866cbe0b98c73145853681f8/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f8dd115d2bf15e3866cbe0b98c73145853681f8/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=2f8dd115d2bf15e3866cbe0b98c73145853681f8", "patch": "@@ -1,3 +1,8 @@\n+2002-07-21  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* jcf-path.c (GET_ENV_PATH_LIST): Remove.\n+\t(jcf_path_init): Use GET_ENVIRONMENT.\n+\n 2002-07-10  Roger Sayle  <roger@eyesopen.com>\n \t    Zack Weinberg <zack@codesourcery.com>\n "}, {"sha": "ce05088ba81525d86c08e0444cae6a0f818200ee", "filename": "gcc/java/jcf-path.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f8dd115d2bf15e3866cbe0b98c73145853681f8/gcc%2Fjava%2Fjcf-path.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f8dd115d2bf15e3866cbe0b98c73145853681f8/gcc%2Fjava%2Fjcf-path.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-path.c?ref=2f8dd115d2bf15e3866cbe0b98c73145853681f8", "patch": "@@ -30,12 +30,6 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n \n #include \"jcf.h\"\n \n-/* Some boilerplate that really belongs in a header.  */\n-\n-#ifndef GET_ENV_PATH_LIST\n-#define GET_ENV_PATH_LIST(VAR,NAME)\tdo { (VAR) = getenv (NAME); } while (0)\n-#endif\n-\n /* By default, colon separates directories in a path.  */\n #ifndef PATH_SEPARATOR\n #define PATH_SEPARATOR ':'\n@@ -244,7 +238,7 @@ jcf_path_init ()\n   sep[0] = DIR_SEPARATOR;\n   sep[1] = '\\0';\n \n-  GET_ENV_PATH_LIST (cp, \"GCC_EXEC_PREFIX\");\n+  GET_ENVIRONMENT (cp, \"GCC_EXEC_PREFIX\");\n   if (cp)\n     {\n       try = alloca (strlen (cp) + 50);\n@@ -315,7 +309,7 @@ jcf_path_init ()\n \tjcf_path_extdirs_arg (extdirs);\n     }\n \n-  GET_ENV_PATH_LIST (cp, \"CLASSPATH\");\n+  GET_ENVIRONMENT (cp, \"CLASSPATH\");\n   add_path (&classpath_env, cp, 0);\n }\n "}, {"sha": "61d583c0ceba649c5999cf33c25a44f6a5661a82", "filename": "gcc/protoize.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f8dd115d2bf15e3866cbe0b98c73145853681f8/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f8dd115d2bf15e3866cbe0b98c73145853681f8/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=2f8dd115d2bf15e3866cbe0b98c73145853681f8", "patch": "@@ -128,10 +128,6 @@ static const char * const standard_exec_prefix = STANDARD_EXEC_PREFIX;\n static const char * const target_machine = DEFAULT_TARGET_MACHINE;\n static const char * const target_version = DEFAULT_TARGET_VERSION;\n \n-#ifndef GET_ENV_PATH_LIST\n-#define GET_ENV_PATH_LIST(VAR,NAME)\tdo { (VAR) = getenv (NAME); } while (0)\n-#endif\n-\n #endif /* !defined (UNPROTOIZE) */\n \n /* Suffix of aux_info files.  */\n@@ -4415,7 +4411,7 @@ do_processing ()\n     }\n   else\n     {\n-      GET_ENV_PATH_LIST (default_syscalls_dir, \"GCC_EXEC_PREFIX\");\n+      GET_ENVIRONMENT (default_syscalls_dir, \"GCC_EXEC_PREFIX\");\n       if (!default_syscalls_dir)\n \t{\n \t  default_syscalls_dir = standard_exec_prefix;"}]}