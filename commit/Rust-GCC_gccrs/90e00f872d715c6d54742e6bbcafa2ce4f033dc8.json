{"sha": "90e00f872d715c6d54742e6bbcafa2ce4f033dc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBlMDBmODcyZDcxNWM2ZDU0NzQyZTZiYmNhZmEyY2U0ZjAzM2RjOA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-04-17T18:19:44Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-04-17T18:19:44Z"}, "message": "re PR go/65755 (incorrect reflection of struct fields with gccgo)\n\n\tPR go/65755\ncompiler, runtime, reflect: Use reflection string for type comparisons.\n\nChange the runtime and reflect libraries to always use only\nthe type reflection string to determine whether two types are\nequal.  It previously used the PkgPath and Name values for a\ntype name, but that required a PkgPath that did not match the\ngc compiler.\n\nChange the compiler to use the same PkgPath value as the gc\ncompiler in all cases.\n\nChange the compiler to put the receiver type in the reflection\nstring for a type defined inside a method.\n\nFrom-SVN: r222194", "tree": {"sha": "e4fe10e347023d58baaa566c58cf2424111004f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4fe10e347023d58baaa566c58cf2424111004f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90e00f872d715c6d54742e6bbcafa2ce4f033dc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90e00f872d715c6d54742e6bbcafa2ce4f033dc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90e00f872d715c6d54742e6bbcafa2ce4f033dc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90e00f872d715c6d54742e6bbcafa2ce4f033dc8/comments", "author": null, "committer": null, "parents": [{"sha": "fdce7c12f37a334c1af1ee86b7f7755cf98a5bca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdce7c12f37a334c1af1ee86b7f7755cf98a5bca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdce7c12f37a334c1af1ee86b7f7755cf98a5bca"}], "stats": {"total": 69, "additions": 20, "deletions": 49}, "files": [{"sha": "7a7a1039be16e3ef48bdef19f56f1510c482e094", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 19, "deletions": 31, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e00f872d715c6d54742e6bbcafa2ce4f033dc8/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e00f872d715c6d54742e6bbcafa2ce4f033dc8/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=90e00f872d715c6d54742e6bbcafa2ce4f033dc8", "patch": "@@ -2253,22 +2253,7 @@ Type::uncommon_type_constructor(Gogo* gogo, Type* uncommon_type,\n \t  const std::string& pkgpath(package == NULL\n \t\t\t\t     ? gogo->pkgpath()\n \t\t\t\t     : package->pkgpath());\n-\t  n.assign(pkgpath);\n-\t  unsigned int index;\n-\t  const Named_object* in_function = name->in_function(&index);\n-\t  if (in_function != NULL)\n-\t    {\n-\t      n.append(1, '.');\n-\t      n.append(Gogo::unpack_hidden_name(in_function->name()));\n-\t      if (index > 0)\n-\t\t{\n-\t\t  char buf[30];\n-\t\t  snprintf(buf, sizeof buf, \"%u\", index);\n-\t\t  n.append(1, '.');\n-\t\t  n.append(buf);\n-\t\t}\n-\t    }\n-\t  s = Expression::make_string(n, bloc);\n+\t  s = Expression::make_string(pkgpath, bloc);\n \t  vals->push_back(Expression::make_unary(OPERATOR_AND, s, bloc));\n \t}\n     }\n@@ -9102,22 +9087,17 @@ Named_type::do_reflection(Gogo* gogo, std::string* ret) const\n     }\n   if (!this->is_builtin())\n     {\n-      // We handle -fgo-prefix and -fgo-pkgpath differently here for\n-      // compatibility with how the compiler worked before\n-      // -fgo-pkgpath was introduced.  When -fgo-pkgpath is specified,\n-      // we use it to make a unique reflection string, so that the\n-      // type canonicalization in the reflect package will work.  In\n-      // order to be compatible with the gc compiler, we put tabs into\n-      // the package path, so that the reflect methods can discard it.\n+      // When -fgo-pkgpath or -fgo-prefix is specified, we use it to\n+      // make a unique reflection string, so that the type\n+      // canonicalization in the reflect package will work.  In order\n+      // to be compatible with the gc compiler, we put tabs into the\n+      // package path, so that the reflect methods can discard it.\n       const Package* package = this->named_object_->package();\n-      if (gogo->pkgpath_from_option())\n-\t{\n-\t  ret->push_back('\\t');\n-\t  ret->append(package != NULL\n-\t\t      ? package->pkgpath_symbol()\n-\t\t      : gogo->pkgpath_symbol());\n-\t  ret->push_back('\\t');\n-\t}\n+      ret->push_back('\\t');\n+      ret->append(package != NULL\n+\t\t  ? package->pkgpath_symbol()\n+\t\t  : gogo->pkgpath_symbol());\n+      ret->push_back('\\t');\n       ret->append(package != NULL\n \t\t  ? package->package_name()\n \t\t  : gogo->package_name());\n@@ -9126,6 +9106,14 @@ Named_type::do_reflection(Gogo* gogo, std::string* ret) const\n   if (this->in_function_ != NULL)\n     {\n       ret->push_back('\\t');\n+      const Typed_identifier* rcvr =\n+\tthis->in_function_->func_value()->type()->receiver();\n+      if (rcvr != NULL)\n+\t{\n+\t  Named_type* rcvr_type = rcvr->type()->deref()->named_type();\n+\t  ret->append(Gogo::unpack_hidden_name(rcvr_type->name()));\n+\t  ret->push_back('.');\n+\t}\n       ret->append(Gogo::unpack_hidden_name(this->in_function_->name()));\n       ret->push_back('$');\n       if (this->in_function_index_ > 0)"}, {"sha": "7f0c6a85a0dde3fe187b39c8ab5bd3cb74040f2d", "filename": "libgo/go/reflect/type.go", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e00f872d715c6d54742e6bbcafa2ce4f033dc8/libgo%2Fgo%2Freflect%2Ftype.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e00f872d715c6d54742e6bbcafa2ce4f033dc8/libgo%2Fgo%2Freflect%2Ftype.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Ftype.go?ref=90e00f872d715c6d54742e6bbcafa2ce4f033dc8", "patch": "@@ -1940,13 +1940,7 @@ func canonicalize(t Type) Type {\n \tif t == nil {\n \t\treturn nil\n \t}\n-\tu := t.uncommon()\n-\tvar s string\n-\tif u == nil || u.PkgPath() == \"\" {\n-\t\ts = t.rawString()\n-\t} else {\n-\t\ts = u.PkgPath() + \".\" + u.Name()\n-\t}\n+\ts := t.rawString()\n \tcanonicalTypeLock.RLock()\n \tif r, ok := canonicalType[s]; ok {\n \t\tcanonicalTypeLock.RUnlock()"}, {"sha": "90079f2202750ea16b79a8995b5e25efab500d47", "filename": "libgo/runtime/go-typedesc-equal.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e00f872d715c6d54742e6bbcafa2ce4f033dc8/libgo%2Fruntime%2Fgo-typedesc-equal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e00f872d715c6d54742e6bbcafa2ce4f033dc8/libgo%2Fruntime%2Fgo-typedesc-equal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-typedesc-equal.c?ref=90e00f872d715c6d54742e6bbcafa2ce4f033dc8", "patch": "@@ -24,16 +24,5 @@ __go_type_descriptors_equal (const struct __go_type_descriptor *td1,\n     return 0;\n   if (td1->__code != td2->__code || td1->__hash != td2->__hash)\n     return 0;\n-  if (td1->__uncommon != NULL && td1->__uncommon->__name != NULL)\n-    {\n-      if (td2->__uncommon == NULL || td2->__uncommon->__name == NULL)\n-\treturn 0;\n-      return (__go_ptr_strings_equal (td1->__uncommon->__name,\n-\t\t\t\t      td2->__uncommon->__name)\n-\t      && __go_ptr_strings_equal (td1->__uncommon->__pkg_path,\n-\t\t\t\t\t td2->__uncommon->__pkg_path));\n-    }\n-  if (td2->__uncommon != NULL && td2->__uncommon->__name != NULL)\n-    return 0;\n   return __go_ptr_strings_equal (td1->__reflection, td2->__reflection);\n }"}]}