{"sha": "e11c4b7f837bc6b4c22b1f5bf41a9d0608d256be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTExYzRiN2Y4MzdiYzZiNGMyMmIxZjViZjQxYTlkMDYwOGQyNTZiZQ==", "commit": {"author": {"name": "Feng Xue", "email": "fxue@os.amperecomputing.com", "date": "2020-08-31T07:00:52Z"}, "committer": {"name": "Feng Xue", "email": "fxue@os.amperecomputing.com", "date": "2020-08-31T08:34:56Z"}, "message": "ipa/96806 - Fix ICE in ipa-cp due to integer addition overflow\n\n2020-08-31  Feng Xue  <fxue@os.amperecomputing.com>\n\ngcc/\n\tPR tree-optimization/96806\n\t* ipa-cp.c (decide_about_value): Use safe_add to avoid cost addition\n\toverflow.\n\ngcc/testsuite/\n\tPR tree-optimization/96806\n\t* g++.dg/ipa/pr96806.C: New test.", "tree": {"sha": "ffb9d8482bb15ce646ace8e502a9e502ea2de5e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffb9d8482bb15ce646ace8e502a9e502ea2de5e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e11c4b7f837bc6b4c22b1f5bf41a9d0608d256be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e11c4b7f837bc6b4c22b1f5bf41a9d0608d256be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e11c4b7f837bc6b4c22b1f5bf41a9d0608d256be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e11c4b7f837bc6b4c22b1f5bf41a9d0608d256be/comments", "author": {"login": "feng-xue-ampere", "id": 95893536, "node_id": "U_kgDOBbc4IA", "avatar_url": "https://avatars.githubusercontent.com/u/95893536?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feng-xue-ampere", "html_url": "https://github.com/feng-xue-ampere", "followers_url": "https://api.github.com/users/feng-xue-ampere/followers", "following_url": "https://api.github.com/users/feng-xue-ampere/following{/other_user}", "gists_url": "https://api.github.com/users/feng-xue-ampere/gists{/gist_id}", "starred_url": "https://api.github.com/users/feng-xue-ampere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feng-xue-ampere/subscriptions", "organizations_url": "https://api.github.com/users/feng-xue-ampere/orgs", "repos_url": "https://api.github.com/users/feng-xue-ampere/repos", "events_url": "https://api.github.com/users/feng-xue-ampere/events{/privacy}", "received_events_url": "https://api.github.com/users/feng-xue-ampere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "feng-xue-ampere", "id": 95893536, "node_id": "U_kgDOBbc4IA", "avatar_url": "https://avatars.githubusercontent.com/u/95893536?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feng-xue-ampere", "html_url": "https://github.com/feng-xue-ampere", "followers_url": "https://api.github.com/users/feng-xue-ampere/followers", "following_url": "https://api.github.com/users/feng-xue-ampere/following{/other_user}", "gists_url": "https://api.github.com/users/feng-xue-ampere/gists{/gist_id}", "starred_url": "https://api.github.com/users/feng-xue-ampere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feng-xue-ampere/subscriptions", "organizations_url": "https://api.github.com/users/feng-xue-ampere/orgs", "repos_url": "https://api.github.com/users/feng-xue-ampere/repos", "events_url": "https://api.github.com/users/feng-xue-ampere/events{/privacy}", "received_events_url": "https://api.github.com/users/feng-xue-ampere/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0106300f6c3f7bae5eb1c46dbd45aa07c94e1b15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0106300f6c3f7bae5eb1c46dbd45aa07c94e1b15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0106300f6c3f7bae5eb1c46dbd45aa07c94e1b15"}], "stats": {"total": 61, "additions": 57, "deletions": 4}, "files": [{"sha": "b3e7d41ea10108db9ab62b389d0a829d7b7dd462", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11c4b7f837bc6b4c22b1f5bf41a9d0608d256be/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11c4b7f837bc6b4c22b1f5bf41a9d0608d256be/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=e11c4b7f837bc6b4c22b1f5bf41a9d0608d256be", "patch": "@@ -5481,11 +5481,11 @@ decide_about_value (struct cgraph_node *node, int index, HOST_WIDE_INT offset,\n \t\t\t\t   freq_sum, count_sum,\n \t\t\t\t   val->local_size_cost)\n       && !good_cloning_opportunity_p (node,\n-\t\t\t\t      val->local_time_benefit\n-\t\t\t\t      + val->prop_time_benefit,\n+\t\t\t\t      safe_add (val->local_time_benefit,\n+\t\t\t\t\t\tval->prop_time_benefit),\n \t\t\t\t      freq_sum, count_sum,\n-\t\t\t\t      val->local_size_cost\n-\t\t\t\t      + val->prop_size_cost))\n+\t\t\t\t      safe_add (val->local_size_cost,\n+\t\t\t\t\t\tval->prop_size_cost)))\n     return false;\n \n   if (dump_file)"}, {"sha": "28fdf7787a12ecc4995c15855bb64320bf0d6f38", "filename": "gcc/testsuite/g++.dg/ipa/pr96806.C", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11c4b7f837bc6b4c22b1f5bf41a9d0608d256be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr96806.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11c4b7f837bc6b4c22b1f5bf41a9d0608d256be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr96806.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr96806.C?ref=e11c4b7f837bc6b4c22b1f5bf41a9d0608d256be", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do compile } */                                                                        \n+/* { dg-options \"-std=c++11 -O -fipa-cp -fipa-cp-clone --param=ipa-cp-max-recursive-depth=94 --param=logical-op-non-short-circuit=0\" } */\n+\n+enum a {};\n+struct m;\n+struct n {\n+  a d;\n+};\n+int o(int, int);\n+struct p {\n+  char d;\n+  char aa;\n+  p *ab;\n+  bool q() const {\n+    int h = d & 4;\n+    return h;\n+  }\n+  char r() const { return aa; }\n+  int s(const m *, bool) const;\n+} l;\n+struct t {\n+  p *ac;\n+  p *u() { return ac; }\n+  p *v(int);\n+};\n+int w(const p *, const p *, const m *, int = 0);\n+struct m : n {\n+  struct {\n+    t *ad;\n+  } ae;\n+  char x() const;\n+  p *y(int z) const { return ae.ad ? nullptr : ae.ad->v(z); }\n+} j;\n+int w(const p *z, const p *af, const m *ag, int ah) {\n+  int a, g = z->s(ag, true), i = af->s(ag, true);\n+  if (af->q()) {\n+    if (ag->x())\n+      return 0;\n+    ah++;\n+    char b = af->r();\n+    p *c = ag->y(b), *e = ag->ae.ad->u();\n+    int d = w(z, c, ag, ah), f = w(z, af ? e : af->ab, ag, ah);\n+    a = f ? d : f;\n+    return a;\n+  }\n+  if (g || i == 1)\n+    return ag->d ? o(g, i) : o(g, i);\n+  return 0;\n+}\n+void ai() {\n+  for (p k;;)\n+    w(&k, &l, &j);\n+}"}]}