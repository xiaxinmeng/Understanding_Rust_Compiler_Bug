{"sha": "a4ce9883e672803a8c3fb3e41948a71864fb925e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRjZTk4ODNlNjcyODAzYThjM2ZiM2U0MTk0OGE3MTg2NGZiOTI1ZQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2009-12-16T00:49:41Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2009-12-16T00:49:41Z"}, "message": "invoke.texi, [...]: Fix typos.\n\n\t* doc/invoke.texi, doc/options.texi, doc/plugins.texi,\n\tdoc/tm.texi: Fix typos.\n\nFrom-SVN: r155281", "tree": {"sha": "9865a14734004817baf473050220b5353ccac257", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9865a14734004817baf473050220b5353ccac257"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4ce9883e672803a8c3fb3e41948a71864fb925e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4ce9883e672803a8c3fb3e41948a71864fb925e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4ce9883e672803a8c3fb3e41948a71864fb925e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4ce9883e672803a8c3fb3e41948a71864fb925e/comments", "author": null, "committer": null, "parents": [{"sha": "dc899dbd822868367b32c9fe2656239163e94029", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc899dbd822868367b32c9fe2656239163e94029", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc899dbd822868367b32c9fe2656239163e94029"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "cfc2a438ae102ac8b91d52f7d15e0222fa22afe5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4ce9883e672803a8c3fb3e41948a71864fb925e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4ce9883e672803a8c3fb3e41948a71864fb925e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a4ce9883e672803a8c3fb3e41948a71864fb925e", "patch": "@@ -1,3 +1,8 @@\n+2009-12-16  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* doc/invoke.texi, doc/options.texi, doc/plugins.texi,\n+\tdoc/tm.texi: Fix typos.\n+\n 2009-12-15  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* doc/extend.texi (Function Attributes, Extended Asm):"}, {"sha": "e1bb2073b3095b3010a0280f4d7a78428716478d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4ce9883e672803a8c3fb3e41948a71864fb925e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4ce9883e672803a8c3fb3e41948a71864fb925e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a4ce9883e672803a8c3fb3e41948a71864fb925e", "patch": "@@ -15533,11 +15533,11 @@ held in @code{r13} are now pushed onto the stack.\n \n Note, common variables (variables which have not been initialised) and\n constants are not placed into the small data area as they are assigned\n-to other sections in the output executeable.\n+to other sections in the output executable.\n \n The default value is zero, which disables this feature.  Note, this\n feature is not enabled by default with higher optimization levels\n-(@option{-O2} etc) because of the potentially deterimental effects of\n+(@option{-O2} etc) because of the potentially detrimental effects of\n reserving register @code{r13}.  It is up to the programmer to\n experiment and discover whether this feature is of benefit to their\n program.\n@@ -15562,7 +15562,7 @@ default option.\n @opindex mmax-constant-size\n Specifies the maxium size, in bytes, of a constant that can be used as\n an operand in a RX instruction.  Although the RX instruction set does\n-allow consants of up to 4 bytes in length to be used in instructions,\n+allow constants of up to 4 bytes in length to be used in instructions,\n a longer value equates to a longer instruction.  Thus in some\n circumstances it can be beneficial to restrict the size of constants\n that are used in instructions.  Constants that are too big are instead\n@@ -16812,7 +16812,7 @@ that MinGW-specific thread support is to be used.\n @opindex municode\n This option is available for mingw-w64 targets.  It specifies\n that the UNICODE macro is getting pre-defined and that the\n-unicode capable runtime startup code is choosen.\n+unicode capable runtime startup code is chosen.\n \n @item -mwin32\n @opindex mwin32"}, {"sha": "284ea49cdfe84853aca235920d4518cc96762e8a", "filename": "gcc/doc/options.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4ce9883e672803a8c3fb3e41948a71864fb925e/gcc%2Fdoc%2Foptions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4ce9883e672803a8c3fb3e41948a71864fb925e/gcc%2Fdoc%2Foptions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Foptions.texi?ref=a4ce9883e672803a8c3fb3e41948a71864fb925e", "patch": "@@ -85,7 +85,7 @@ configurations and yet the masks always need to be defined.\n @section Option properties\n \n The second field of an option record can specify any of the following\n-properties.  When an option takes an argument, it is enlosed in parentheses\n+properties.  When an option takes an argument, it is enclosed in parentheses\n following the option property name.  The parser that handles option files\n is quite simplistic, and will be tricked by any nested parentheses within\n the argument text itself; in this case, the entire option argument can"}, {"sha": "d446f9fd5c68955e04eb835c67c02f5ca32e9e0d", "filename": "gcc/doc/plugins.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4ce9883e672803a8c3fb3e41948a71864fb925e/gcc%2Fdoc%2Fplugins.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4ce9883e672803a8c3fb3e41948a71864fb925e/gcc%2Fdoc%2Fplugins.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fplugins.texi?ref=a4ce9883e672803a8c3fb3e41948a71864fb925e", "patch": "@@ -399,7 +399,7 @@ When a pass is first added to one of the pass lists, the event\n @section Building GCC plugins\n \n If plugins are enabled, GCC installs the headers needed to build a\n-plugin (somehwere in the installation tree, e.g. under\n+plugin (somewhere in the installation tree, e.g. under\n @file{/usr/local}).  In particular a @file{plugin/include} directory\n is installed, containing all the header files needed to build plugins.\n "}, {"sha": "5616b4809879617b2d7f056914380c7a72976bd8", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4ce9883e672803a8c3fb3e41948a71864fb925e/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4ce9883e672803a8c3fb3e41948a71864fb925e/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=a4ce9883e672803a8c3fb3e41948a71864fb925e", "patch": "@@ -9933,7 +9933,7 @@ contained within the @var{superset} named address space.  Pointers to\n a named address space that is a subset of another named address space\n will be converted automatically without a cast if used together in\n arithmetic operations.  Pointers to a superset address space can be\n-converted to pointers to a subset address space via explict casts.\n+converted to pointers to a subset address space via explicit casts.\n @end deftypefn\n \n @deftypefn {Target Hook} {rtx} TARGET_ADDR_SPACE_CONVERT (rtx @var{op}, tree @var{from_type}, tree @var{to_type})\n@@ -11038,7 +11038,7 @@ On some architectures it can take multiple instructions to synthesize\n a constant.  If there is another constant already in a register that\n is close enough in value then it is preferable that the new constant\n is computed from this register using immediate addition or\n-substraction.  We accomplish this through CSE.  Besides the value of\n+subtraction.  We accomplish this through CSE.  Besides the value of\n the constant we also add a lower and an upper constant anchor to the\n available expressions.  These are then queried when encountering new\n constants.  The anchors are computed by rounding the constant up and"}]}