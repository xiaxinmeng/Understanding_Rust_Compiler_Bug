{"sha": "a344c9f188b249e29a638930e6ce33ad53e35da6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM0NGM5ZjE4OGIyNDllMjlhNjM4OTMwZTZjZTMzYWQ1M2UzNWRhNg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2010-11-21T17:19:37Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2010-11-21T17:19:37Z"}, "message": "re PR rtl-optimization/46571 (bootstrap comparison failure in fortran/trans-openmp.c)\n\nPR rtl-optimization/46571\n\t* gcse.c (hash_scan_set): Use next_nonnote_nondebug_insn.\n\t(compute_hash_table_work): Use NONDEBUG_INSN_P.\n\nFrom-SVN: r167007", "tree": {"sha": "812c351874a7ff34a140e48a1a3a66773b493d84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/812c351874a7ff34a140e48a1a3a66773b493d84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a344c9f188b249e29a638930e6ce33ad53e35da6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a344c9f188b249e29a638930e6ce33ad53e35da6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a344c9f188b249e29a638930e6ce33ad53e35da6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a344c9f188b249e29a638930e6ce33ad53e35da6/comments", "author": null, "committer": null, "parents": [{"sha": "2dc211c5ff5a257604c71766495b8790a3cf6471", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dc211c5ff5a257604c71766495b8790a3cf6471", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dc211c5ff5a257604c71766495b8790a3cf6471"}], "stats": {"total": 134, "additions": 131, "deletions": 3}, "files": [{"sha": "a8113345299b8c73817acb27523b6ff4a1dc2421", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a344c9f188b249e29a638930e6ce33ad53e35da6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a344c9f188b249e29a638930e6ce33ad53e35da6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a344c9f188b249e29a638930e6ce33ad53e35da6", "patch": "@@ -1,3 +1,9 @@\n+2010-11-21  Richard Henderson  <rth@redhat.com>\n+\n+\tPR rtl-optimization/46571\n+\t* gcse.c (hash_scan_set): Use next_nonnote_nondebug_insn.\n+\t(compute_hash_table_work): Use NONDEBUG_INSN_P.\n+\n 2010-11-21  Paul Koning  <ni1d@arrl.net>\n \n \t* config/mips/pdp11.md (negsi2): Fix wrong code."}, {"sha": "9ff0da82f1ee4e80ae5249af8bdca3463660fc2b", "filename": "gcc/gcse.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a344c9f188b249e29a638930e6ce33ad53e35da6/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a344c9f188b249e29a638930e6ce33ad53e35da6/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=a344c9f188b249e29a638930e6ce33ad53e35da6", "patch": "@@ -1460,7 +1460,7 @@ hash_scan_set (rtx pat, rtx insn, struct hash_table_d *table)\n \t\t  modified.  Here we want to search from INSN+1 on, but\n \t\t  oprs_available_p searches from INSN on.  */\n \t       && (insn == BB_END (BLOCK_FOR_INSN (insn))\n-\t\t   || (tmp = next_nonnote_insn (insn)) == NULL_RTX\n+\t\t   || (tmp = next_nonnote_nondebug_insn (insn)) == NULL_RTX\n \t\t   || BLOCK_FOR_INSN (tmp) != BLOCK_FOR_INSN (insn)\n \t\t   || oprs_available_p (pat, tmp)))\n \tinsert_set_in_table (pat, insn, table);\n@@ -1748,7 +1748,7 @@ compute_hash_table_work (struct hash_table_d *table)\n \t determine when registers and memory are first and last set.  */\n       FOR_BB_INSNS (current_bb, insn)\n \t{\n-\t  if (! INSN_P (insn))\n+\t  if (!NONDEBUG_INSN_P (insn))\n \t    continue;\n \n \t  if (CALL_P (insn))\n@@ -1771,7 +1771,7 @@ compute_hash_table_work (struct hash_table_d *table)\n \n       /* The next pass builds the hash table.  */\n       FOR_BB_INSNS (current_bb, insn)\n-\tif (INSN_P (insn))\n+\tif (NONDEBUG_INSN_P (insn))\n \t  hash_scan_insn (insn, table);\n     }\n "}, {"sha": "ac55f4965d352cce3e04b0c215e3ca7d85118e7e", "filename": "gcc/testsuite/gcc.dg/pr46571.c", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a344c9f188b249e29a638930e6ce33ad53e35da6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr46571.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a344c9f188b249e29a638930e6ce33ad53e35da6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr46571.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr46571.c?ref=a344c9f188b249e29a638930e6ce33ad53e35da6", "patch": "@@ -0,0 +1,122 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fcompare-debug\" } */\n+\n+typedef union tree_node *tree;\n+typedef unsigned int source_location;\n+enum tree_code\n+{\n+  MINUS_EXPR,\n+  MULT_EXPR,\n+};\n+struct tree_omp_clause\n+{\n+  union omp_clause_subcode\n+  {\n+    enum tree_code reduction_code;\n+  } subcode;\n+};\n+union tree_node\n+{\n+  struct tree_omp_clause omp_clause;\n+};\n+enum tree_index\n+{\n+  TI_ERROR_MARK,\n+};\n+typedef struct\n+{\n+  unsigned allocatable:1;\n+  unsigned dimension:1;\n+  unsigned codimension:1;\n+  unsigned external:1;\n+  unsigned optional:1;\n+  unsigned pointer:1;\n+  unsigned contiguous:1;\n+  unsigned referenced:1;\n+} symbol_attribute;\n+typedef unsigned int gfc_char_t;\n+typedef struct gfc_linebuf\n+{\n+  source_location location;\n+} gfc_linebuf;\n+typedef struct\n+{\n+  gfc_char_t *nextc;\n+  gfc_linebuf *lb;\n+} locus;\n+typedef struct\n+{\n+  struct gfc_symbol *sym;\n+  struct gfc_namelist *next;\n+} gfc_namelist;\n+enum\n+{\n+  OMP_LIST_PLUS,\n+  OMP_LIST_REDUCTION_FIRST = OMP_LIST_PLUS,\n+  OMP_LIST_MULT,\n+  OMP_LIST_SUB,\n+  OMP_LIST_NUM\n+};\n+typedef struct gfc_omp_clauses\n+{\n+  gfc_namelist *lists[OMP_LIST_NUM];\n+} gfc_omp_clauses;\n+typedef struct gfc_symbol\n+{\n+  symbol_attribute attr;\n+} gfc_symbol;\n+typedef struct gfc_code\n+{\n+  locus loc;\n+  union\n+  {\n+    gfc_omp_clauses *omp_clauses;\n+  } ext;\n+} gfc_code;\n+typedef struct\n+{\n+} stmtblock_t;\n+\n+static tree\n+gfc_trans_omp_reduction_list (gfc_namelist * namelist, tree list,\n+\t\t\t      enum tree_code reduction_code, locus where)\n+{\n+  for (; namelist != ((void *) 0); namelist = namelist->next)\n+    if (namelist->sym->attr.referenced)\n+      {\n+\ttree node = build_omp_clause (where.lb->location);\n+\tnode->omp_clause.subcode.reduction_code = reduction_code;\n+\tgfc_trans_omp_array_reduction (namelist->sym, where);\n+      }\n+}\n+\n+static tree\n+gfc_trans_omp_clauses (stmtblock_t * block, gfc_omp_clauses * clauses,\n+\t\t       locus where)\n+{\n+  tree omp_clauses = (tree) ((void *) 0);\n+  int list;\n+  for (list = 0; list < OMP_LIST_NUM; list++)\n+    {\n+      gfc_namelist *n = clauses->lists[list];\n+      enum tree_code reduction_code;\n+      if (n == ((void *) 0))\n+\tcontinue;\n+      switch (list)\n+\t{\n+\tcase OMP_LIST_MULT:\n+\t  reduction_code = MULT_EXPR;\n+\t  break;\n+\tcase OMP_LIST_SUB:\n+\t  reduction_code = MINUS_EXPR;\n+\t}\n+      gfc_trans_omp_reduction_list (n, omp_clauses, reduction_code, where);\n+    }\n+}\n+\n+void\n+gfc_trans_omp_parallel_workshare (gfc_code * code)\n+{\n+  stmtblock_t block;\n+  gfc_trans_omp_clauses (&block, code->ext.omp_clauses, code->loc);\n+}"}]}