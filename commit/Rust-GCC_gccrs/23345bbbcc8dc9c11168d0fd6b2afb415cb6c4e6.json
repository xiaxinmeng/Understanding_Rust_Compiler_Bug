{"sha": "23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjMzNDViYmJjYzhkYzljMTExNjhkMGZkNmIyYWZiNDE1Y2I2YzRlNg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-03-14T21:47:50Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-03-14T21:47:50Z"}, "message": "/home/neil/diffs/include.log\n\nFrom-SVN: r64373", "tree": {"sha": "f86d032aa7796736ae3b48b9d527b9b116caa900", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f86d032aa7796736ae3b48b9d527b9b116caa900"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "98d2dec7e3268ca0baee90e2d89da4d75fe4c193", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98d2dec7e3268ca0baee90e2d89da4d75fe4c193", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98d2dec7e3268ca0baee90e2d89da4d75fe4c193"}], "stats": {"total": 244, "additions": 137, "deletions": 107}, "files": [{"sha": "6b7d28cfacc35c92f1fb55e1bd8885d1f07c27c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6", "patch": "@@ -1,3 +1,36 @@\n+2003-03-14  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* Makefile.in: Update.\n+\t* c-common.h (fe_file_change, pp_file_change): New.\n+\t* c-lex.c (init_c_lex): Don't set cb_file_change.\n+\t(c_common_parse_file): Move to c-opts.c.\n+\t(cb_file_change): Rename fe_file_change.\n+\t* c-opts.c: Include debug.h.\n+\t(warn_unused_macros, include_cursor): New.\n+\t(push_command_line_include, cb_file_change): New.\n+\t(COMMAND_LINE_OPTIONS): Handle -include.\n+\t(c_common_decode_option): Use local warn_unused_macros.\n+\tHandle OPT_include.\n+\t(c_common_post_options): Set file change callback.\n+\t(handle_deferred_opts): Skip -include.  Don't free the array.\n+\t(c_common_init): Call cpp_finish_options here, and push an\n+\tinitial -include file.\n+\t* c-ppoutput.c (cb_file_change): Rename pp_file_change.\n+\t(preprocess_file): Don't call cpp_finish_options.\n+\t(init_pp_output): Don't set the file change callback.\n+\t(pp_file_change): Return if no line commands or no output.\n+\t* cpphash.h (next_include_file, first_unused_line): Remove.\n+\t* cppinit.c (include_head, include_tail): Remove.\n+\t(cpp_destroy): Don't free -include chain.\n+\t(cpp_finish_options): Don't handle -include, or worry about\n+\t-Wunused-macros.\n+\t(_cpp_maybe_push_include_file): Remove.\n+\t(COMMAND_LINE_OPTIONS, cpp_handle_option): Don't handle -include.\n+\t* cpplib.c (_cpp_pop_buffer): Don't handle -include.\n+\t* cppmacro.c (_cpp_warn_if_unused_macro, _cpp_create_definition):\n+\tUsed flag is set based upon the state of the warn_unused_macros\n+\tflag, and so use of first_unused_line is unnecessary.\n+\n Thu Mar 13 18:39:42 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* cselib.c (clear_table): Do not take argument; always clear just"}, {"sha": "f1d5e9136f894fbb8d69412a9deb0cb6912609c3", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6", "patch": "@@ -1308,9 +1308,9 @@ c-common.o : c-common.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n c-pretty-print.o : c-pretty-print.c c-pretty-print.h pretty-print.h \\\n \t$(C_COMMON_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) real.h\n \n-c-opts.o : c-opts.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H) \\\n+c-opts.o : c-opts.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n         c-pragma.h flags.h toplev.h langhooks.h tree-inline.h diagnostic.h \\\n-\tintl.h\n+\tintl.h debug.h $(C_COMMON_H)\n \n c-cppbuiltin.o : c-cppbuiltin.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t$(TREE_H) $(C_COMMON_H) c-pragma.h flags.h toplev.h langhooks.h \\"}, {"sha": "472cb50770e8b911fc9a1e53377b503c551741fd", "filename": "gcc/c-common.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6", "patch": "@@ -1,6 +1,6 @@\n /* Definitions for c-common.c.\n    Copyright (C) 1987, 1993, 1994, 1995, 1997, 1998,\n-   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -1295,9 +1295,11 @@ extern void c_common_write_pch\t\t\tPARAMS ((void));\n extern void builtin_define_with_value\t\tPARAMS ((const char *,\n \t\t\t\t\t\t\t const char *, int));\n extern void c_stddef_cpp_builtins\t\tPARAMS ((void));\n+extern void fe_file_change\t\tPARAMS ((const struct line_map *));\n \n /* In c-ppoutput.c  */\n extern void init_pp_output\t\t\tPARAMS ((FILE *));\n extern void preprocess_file\t\t\tPARAMS ((cpp_reader *));\n+extern void pp_file_change\t\tPARAMS ((const struct line_map *));\n \n #endif /* ! GCC_C_COMMON_H */"}, {"sha": "7256c5a74feb8c39ec7b4ae5aabef5405a58292f", "filename": "gcc/c-lex.c", "status": "modified", "additions": 2, "deletions": 29, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6", "patch": "@@ -86,7 +86,6 @@ static int dump_one_header\tPARAMS ((splay_tree_node, void *));\n static void cb_line_change     PARAMS ((cpp_reader *, const cpp_token *, int));\n static void cb_ident\t\tPARAMS ((cpp_reader *, unsigned int,\n \t\t\t\t\t const cpp_string *));\n-static void cb_file_change    PARAMS ((cpp_reader *, const struct line_map *));\n static void cb_def_pragma\tPARAMS ((cpp_reader *, unsigned int));\n static void cb_define\t\tPARAMS ((cpp_reader *, unsigned int,\n \t\t\t\t\t cpp_hashnode *));\n@@ -116,7 +115,6 @@ init_c_lex ()\n   cb->register_builtins = cb_register_builtins;\n   cb->line_change = cb_line_change;\n   cb->ident = cb_ident;\n-  cb->file_change = cb_file_change;\n   cb->def_pragma = cb_def_pragma;\n   cb->valid_pch = c_common_valid_pch;\n   cb->read_pch = c_common_read_pch;\n@@ -131,30 +129,6 @@ init_c_lex ()\n     }\n }\n \n-/* A thin wrapper around the real parser that initializes the \n-   integrated preprocessor after debug output has been initialized.\n-   Also, make sure the start_source_file debug hook gets called for\n-   the primary source file.  */\n-\n-void\n-c_common_parse_file (set_yydebug)\n-     int set_yydebug ATTRIBUTE_UNUSED;\n-{\n-#if YYDEBUG != 0\n-  yydebug = set_yydebug;\n-#else\n-  warning (\"YYDEBUG not defined\");\n-#endif\n-\n-  (*debug_hooks->start_source_file) (lineno, input_filename);\n-  cpp_finish_options (parse_in);\n-\n-  pch_init();\n-  \n-  yyparse ();\n-  free_parser_stacks ();\n-}\n-\n struct c_fileinfo *\n get_fileinfo (name)\n      const char *name;\n@@ -245,9 +219,8 @@ cb_line_change (pfile, token, parsing_args)\n   src_lineno = SOURCE_LINE (map, token->line);\n }\n \n-static void\n-cb_file_change (pfile, new_map)\n-     cpp_reader *pfile ATTRIBUTE_UNUSED;\n+void\n+fe_file_change (new_map)\n      const struct line_map *new_map;\n {\n   unsigned int to_line = SOURCE_LINE (new_map, new_map->to_line);"}, {"sha": "b931bbe4d56f64e0eecc3832eedd2955277775eb", "filename": "gcc/c-opts.c", "status": "modified", "additions": 85, "deletions": 5, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6", "patch": "@@ -34,6 +34,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"intl.h\"\n #include \"cppdefault.h\"\n #include \"c-incpath.h\"\n+#include \"debug.h\"\t\t/* For debug_hooks.  */\n \n #ifndef TARGET_SYSTEM_ROOT\n # define TARGET_SYSTEM_ROOT NULL\n@@ -78,9 +79,15 @@ static bool std_cxx_inc = true;\n /* If the quote chain has been split by -I-.  */\n static bool quote_chain_split;\n \n+/* If -Wunused-macros.  */\n+static bool warn_unused_macros;\n+\n /* Number of deferred options, deferred options array size.  */\n static size_t deferred_count, deferred_size;\n \n+/* Number of deferred options scanned for -include.  */\n+static size_t include_cursor;\n+\n static void missing_arg PARAMS ((size_t));\n static size_t find_opt PARAMS ((const char *, int));\n static void set_Wimplicit PARAMS ((int));\n@@ -95,6 +102,8 @@ static void check_deps_environment_vars PARAMS ((void));\n static void handle_deferred_opts PARAMS ((void));\n static void sanitize_cpp_opts PARAMS ((void));\n static void add_prefixed_path PARAMS ((const char *, size_t));\n+static void push_command_line_include PARAMS ((void));\n+static void cb_file_change PARAMS ((cpp_reader *, const struct line_map *));\n \n #ifndef STDC_0_IN_SYSTEM_HEADERS\n #define STDC_0_IN_SYSTEM_HEADERS 0\n@@ -288,6 +297,7 @@ static void add_prefixed_path PARAMS ((const char *, size_t));\n   OPT(\"fxref\",\t\t\tCL_CXX,   OPT_fxref)\t\t\t     \\\n   OPT(\"gen-decls\",\t\tCL_OBJC,  OPT_gen_decls)\t\t     \\\n   OPT(\"idirafter\",              CL_ALL | CL_ARG, OPT_idirafter)              \\\n+  OPT(\"include\",                CL_ALL | CL_ARG, OPT_include)\t\t     \\\n   OPT(\"iprefix\",\t\tCL_ALL | CL_ARG, OPT_iprefix)\t\t     \\\n   OPT(\"isysroot\",               CL_ALL | CL_ARG, OPT_isysroot)               \\\n   OPT(\"isystem\",                CL_ALL | CL_ARG, OPT_isystem)                \\\n@@ -1040,7 +1050,7 @@ c_common_decode_option (argc, argv)\n       break;\n \n     case OPT_Wunused_macros:\n-      cpp_opts->warn_unused_macros = on;\n+      warn_unused_macros = on;\n       break;\n \n     case OPT_Wwrite_strings:\n@@ -1323,6 +1333,10 @@ c_common_decode_option (argc, argv)\n       add_path (xstrdup (arg), AFTER, 0);\n       break;\n \n+    case OPT_include:\n+      defer_opt (code, arg);\n+      break;\n+\n     case OPT_iprefix:\n       iprefix = arg;\n       break;\n@@ -1521,6 +1535,8 @@ c_common_post_options (pfilename)\n       lineno = 0;\n     }\n \n+  cpp_get_callbacks (parse_in)->file_change = cb_file_change;\n+\n   /* NOTE: we use in_fname here, not the one supplied.  */\n   *pfilename = cpp_read_main_file (parse_in, in_fname, ident_hash);\n \n@@ -1550,8 +1566,9 @@ c_common_init ()\n \n   if (flag_preprocess_only)\n     {\n-      if (main_input_filename)\n-\tpreprocess_file (parse_in);\n+      cpp_finish_options (parse_in);\n+      push_command_line_include ();\n+      preprocess_file (parse_in);\n       return false;\n     }\n \n@@ -1561,6 +1578,28 @@ c_common_init ()\n   return true;\n }\n \n+/* A thin wrapper around the real parser that initializes the \n+   integrated preprocessor after debug output has been initialized.\n+   Also, make sure the start_source_file debug hook gets called for\n+   the primary source file.  */\n+void\n+c_common_parse_file (set_yydebug)\n+     int set_yydebug ATTRIBUTE_UNUSED;\n+{\n+#if YYDEBUG != 0\n+  yydebug = set_yydebug;\n+#else\n+  warning (\"YYDEBUG not defined\");\n+#endif\n+\n+  (*debug_hooks->start_source_file) (lineno, input_filename);\n+  cpp_finish_options (parse_in);\n+  push_command_line_include ();\n+  pch_init();\n+  yyparse ();\n+  free_parser_stacks ();\n+}\n+\n /* Common finish hook for the C, ObjC and C++ front ends.  */\n void\n c_common_finish ()\n@@ -1654,12 +1693,13 @@ handle_deferred_opts ()\n \t  cpp_add_dependency_target (parse_in, opt->arg, opt->code == OPT_MQ);\n \t  break;\n \n+\tcase OPT_include:\n+\t  break;\n+\n \tdefault:\n \t  abort ();\n \t}\n     }\n-\n-  free (deferred_opts);\n }\n \n /* These settings are appropriate for GCC, but not necessarily so for\n@@ -1717,6 +1757,46 @@ add_prefixed_path (suffix, chain)\n   add_path (path, chain, 0);\n }\n \n+/* Give CPP the next file given by -include, if any.  */\n+static void\n+push_command_line_include ()\n+{\n+  if (cpp_opts->preprocessed)\n+    return;\n+    \n+  while (include_cursor < deferred_count)\n+    {\n+      struct deferred_opt *opt = &deferred_opts[include_cursor++];\n+      \n+      if (opt->code == OPT_include && cpp_push_include (parse_in, opt->arg))\n+\treturn;\n+    }\n+\n+  if (include_cursor == deferred_count)\n+    {\n+      /* Restore the line map from <command line>.  */\n+      cpp_rename_file (parse_in, main_input_filename);\n+      /* -Wunused-macros should only warn about macros defined hereafter.  */\n+      cpp_opts->warn_unused_macros = warn_unused_macros;\n+      include_cursor++;\n+    }\n+}\n+\n+/* File change callback.  Has to handle -include files.  */\n+static void\n+cb_file_change (pfile, new_map)\n+     cpp_reader *pfile ATTRIBUTE_UNUSED;\n+     const struct line_map *new_map;\n+{\n+  if (flag_preprocess_only)\n+    pp_file_change (new_map);\n+  else\n+    fe_file_change (new_map);\n+\n+  if (new_map->reason == LC_LEAVE && MAIN_FILE_P (new_map))\n+    push_command_line_include ();\n+}\n+\n /* Set the C 89 standard (with 1994 amendments if C94, without GNU\n    extensions if ISO).  There is no concept of gnu94.  */\n static void"}, {"sha": "c4e312169e0d740237b2de8023666d5b40b0e757", "filename": "gcc/c-ppoutput.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6/gcc%2Fc-ppoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6/gcc%2Fc-ppoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-ppoutput.c?ref=23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6", "patch": "@@ -58,16 +58,13 @@ static void cb_include\tPARAMS ((cpp_reader *, unsigned int,\n \t\t\t\t const unsigned char *, const cpp_token *));\n static void cb_ident\t  PARAMS ((cpp_reader *, unsigned int,\n \t\t\t\t   const cpp_string *));\n-static void cb_file_change PARAMS ((cpp_reader *, const struct line_map *));\n static void cb_def_pragma PARAMS ((cpp_reader *, unsigned int));\n \n /* Preprocess and output.  */\n void\n preprocess_file (pfile)\n      cpp_reader *pfile;\n {\n-  cpp_finish_options (pfile);\n-\n   /* A successful cpp_read_main_file guarantees that we can call\n      cpp_scan_nooutput or cpp_get_token next.  */\n   if (flag_no_output)\n@@ -110,8 +107,6 @@ init_pp_output (out_stream)\n \t  cb->ident      = cb_ident;\n \t  cb->def_pragma = cb_def_pragma;\n \t}\n-      if (!flag_no_line_commands)\n-\tcb->file_change = cb_file_change;\n     }\n \n   if (flag_dump_includes)\n@@ -368,18 +363,20 @@ cb_include (pfile, line, dir, header)\n    described in MAP.  From this point on, the old print.map might be\n    pointing to freed memory, and so must not be dereferenced.  */\n \n-static void\n-cb_file_change (pfile, map)\n-     cpp_reader *pfile;\n+void\n+pp_file_change (map)\n      const struct line_map *map;\n {\n   const char *flags = \"\";\n \n+  if (flag_no_line_commands || flag_no_output)\n+    return;\n+\n   /* First time?  */\n   if (print.map == NULL)\n     {\n       /* Avoid printing foo.i when the main file is foo.c.  */\n-      if (!CPP_OPTION (pfile, preprocessed))\n+      if (!cpp_get_options (parse_in)->preprocessed)\n \tprint_line (map, map->from_line, flags);\n     }\n   else"}, {"sha": "bc0d099599bfc3e2efed4099ac62197f2b6539ce", "filename": "gcc/cpphash.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6", "patch": "@@ -332,11 +332,6 @@ struct cpp_reader\n   /* If in_directive, the directive if known.  */\n   const struct directive *directive;\n \n-  /* The next -include-d file; NULL if they all are done.  If it\n-     points to NULL, the last one is in progress, and\n-     _cpp_maybe_push_include_file has yet to restore the line map.  */\n-  struct pending_option **next_include_file;\n-\n   /* Search paths for include files.  */\n   struct cpp_path *quote_include;\t/* \"\" */\n   struct cpp_path *bracket_include;\t/* <> */\n@@ -368,9 +363,6 @@ struct cpp_reader\n      for include files.  (Altered as we get more of them.)  */\n   unsigned int max_include_len;\n \n-  /* Macros on or after this line are warned about if unused.  */\n-  unsigned int first_unused_line;\n-\n   /* Date and time text.  Calculated together if either is requested.  */\n   const uchar *date;\n   const uchar *time;"}, {"sha": "6eeedf8fbeb9b2694b4af656bcc7c72c00b663bd", "filename": "gcc/cppinit.c", "status": "modified", "additions": 2, "deletions": 40, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6", "patch": "@@ -48,7 +48,6 @@ struct cpp_pending\n {\n   struct pending_option *directive_head, *directive_tail;\n   struct pending_option *imacros_head, *imacros_tail;\n-  struct pending_option *include_head, *include_tail;\n };\n \n #ifdef __STDC__\n@@ -278,7 +277,6 @@ cpp_destroy (pfile)\n   cpp_context *context, *contextn;\n   tokenrun *run, *runn;\n \n-  free_chain (CPP_OPTION (pfile, pending)->include_head);\n   free (CPP_OPTION (pfile, pending));\n   free (pfile->op_stack);\n \n@@ -603,8 +601,6 @@ cpp_finish_options (pfile)\n     {\n       struct pending_option *p;\n \n-      /* Prevent -Wunused-macros with command-line redefinitions.  */\n-      pfile->first_unused_line = (unsigned int) -1;\n       _cpp_do_file_change (pfile, LC_RENAME, _(\"<built-in>\"), 1, 0);\n       init_builtins (pfile);\n       _cpp_do_file_change (pfile, LC_RENAME, _(\"<command line>\"), 1, 0);\n@@ -617,42 +613,12 @@ cpp_finish_options (pfile)\n       for (p = CPP_OPTION (pfile, pending)->imacros_head; p; p = p->next)\n \tif (cpp_push_include (pfile, p->arg))\n \t  cpp_scan_nooutput (pfile);\n-\n-      pfile->next_include_file = &CPP_OPTION (pfile, pending)->include_head;\n-      _cpp_maybe_push_include_file (pfile);\n     }\n \n-  pfile->first_unused_line = pfile->line;\n-\n   free_chain (CPP_OPTION (pfile, pending)->imacros_head);\n   free_chain (CPP_OPTION (pfile, pending)->directive_head);\n }\n \n-/* Push the next buffer on the stack given by -include, if any.  */\n-void\n-_cpp_maybe_push_include_file (pfile)\n-     cpp_reader *pfile;\n-{\n-  if (pfile->next_include_file)\n-    {\n-      struct pending_option *head = *pfile->next_include_file;\n-\n-      while (head && !cpp_push_include (pfile, head->arg))\n-\thead = head->next;\n-\n-      if (head)\n-\tpfile->next_include_file = &head->next;\n-      else\n-\t{\n-\t  /* All done; restore the line map from <command line>.  */\n-\t  _cpp_do_file_change (pfile, LC_RENAME,\n-\t\t\t       pfile->line_maps.maps[0].to_file, 1, 0);\n-\t  /* Don't come back here again.  */\n-\t  pfile->next_include_file = NULL;\n-\t}\n-    }\n-}\n-\n /* This is called at the end of preprocessing.  It pops the last\n    buffer and writes dependency output, and returns the number of\n    errors.\n@@ -723,7 +689,7 @@ new_pending_directive (pend, text, handler)\n   DEF_OPT(\"D\",                        no_mac, OPT_D)                          \\\n   DEF_OPT(\"U\",                        no_mac, OPT_U)                          \\\n   DEF_OPT(\"imacros\",                  no_fil, OPT_imacros)                    \\\n-  DEF_OPT(\"include\",                  no_fil, OPT_include)\n+\n \n #define DEF_OPT(text, msg, code) code,\n enum opt_code\n@@ -887,18 +853,14 @@ cpp_handle_option (pfile, argc, argv)\n \tcase OPT_U:\n \t  new_pending_directive (pend, arg, cpp_undef);\n \t  break;\n-\tcase OPT_include:\n \tcase OPT_imacros:\n \t  {\n \t    struct pending_option *o = (struct pending_option *)\n \t      xmalloc (sizeof (struct pending_option));\n \t    o->arg = arg;\n \t    o->next = NULL;\n \n-\t    if (opt_code == OPT_include)\n-\t      APPEND (pend, include, o);\n-\t    else\n-\t      APPEND (pend, imacros, o);\n+\t    APPEND (pend, imacros, o);\n \t  }\n \t  break;\n \t}"}, {"sha": "7d2d965247721a14c283af342e7538f386236833", "filename": "gcc/cpplib.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6", "patch": "@@ -1,6 +1,6 @@\n /* CPP Library. (Directive handling.)\n    Copyright (C) 1986, 1987, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n    Contributed by Per Bothner, 1994-95.\n    Based on CCCP program by Paul Rubin, June 1986\n    Adapted to ANSI C, Richard Stallman, Jan 1987\n@@ -2072,14 +2072,7 @@ _cpp_pop_buffer (pfile)\n \n       /* Don't generate a callback for popping the main file.  */\n       if (pfile->buffer)\n-\t{\n-\t  _cpp_do_file_change (pfile, LC_LEAVE, 0, 0, 0);\n-\n-\t  /* If this is the main file, there may be some -include\n-\t     files left to push.  */\n-\t  if (!pfile->buffer->prev)\n-\t    _cpp_maybe_push_include_file (pfile);\n-\t}\n+\t_cpp_do_file_change (pfile, LC_LEAVE, 0, 0, 0);\n     }\n }\n "}, {"sha": "94fa8583a8ad27618545c9dd2e01073fef049ed7", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6", "patch": "@@ -1,6 +1,6 @@\n /* Part of CPP library.  (Macro and #define handling.)\n    Copyright (C) 1986, 1987, 1989, 1992, 1993, 1994, 1995, 1996, 1998,\n-   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n    Written by Per Bothner, 1994.\n    Based on CCCP program by Paul Rubin, June 1986\n    Adapted to ANSI C, Richard Stallman, Jan 1987\n@@ -89,8 +89,6 @@ _cpp_warn_if_unused_macro (pfile, node, v)\n       cpp_macro *macro = node->value.macro;\n \n       if (!macro->used\n-\t  /* Skip front-end built-ins and command line macros.  */\n-\t  && macro->line >= pfile->first_unused_line\n \t  && MAIN_FILE_P (lookup_line (&pfile->line_maps, macro->line)))\n \tcpp_error_with_line (pfile, DL_WARNING, macro->line, 0,\n \t\t\t     \"macro \\\"%s\\\" is not used\", NODE_NAME (node));\n@@ -1568,7 +1566,7 @@ _cpp_create_definition (pfile, node)\n   macro->params = 0;\n   macro->paramc = 0;\n   macro->variadic = 0;\n-  macro->used = 0;\n+  macro->used = !CPP_OPTION (pfile, warn_unused_macros);\n   macro->count = 0;\n   macro->fun_like = 0;\n   /* To suppress some diagnostics.  */"}]}