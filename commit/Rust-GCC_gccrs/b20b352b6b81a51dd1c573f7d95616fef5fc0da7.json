{"sha": "b20b352b6b81a51dd1c573f7d95616fef5fc0da7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjIwYjM1MmI2YjgxYTUxZGQxYzU3M2Y3ZDk1NjE2ZmVmNWZjMGRhNw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-06-23T16:11:56Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-06-23T16:11:56Z"}, "message": "ChangeLog.1: Fix a typo.\n\n\t* ChangeLog.1: Fix a typo.\n\t* cfgrtl.c: Fix comment typos.\n\t* dwarf2out.c: Likewise.\n\t* expmed.c: Likewise.\n\t* genrecog.c: Likewise.\n\t* jump.c: Likewise.\n\t* rtlanal.c: Likewise.\n\t* ssa-dce.c: Likewise.\n\t* toplev.c: Likewise.\n\nFrom-SVN: r68374", "tree": {"sha": "0fe31bea0d01030fd2ba7ea329026ce77a9c5b7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fe31bea0d01030fd2ba7ea329026ce77a9c5b7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b20b352b6b81a51dd1c573f7d95616fef5fc0da7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b20b352b6b81a51dd1c573f7d95616fef5fc0da7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b20b352b6b81a51dd1c573f7d95616fef5fc0da7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b20b352b6b81a51dd1c573f7d95616fef5fc0da7/comments", "author": null, "committer": null, "parents": [{"sha": "63519d234d38de2a971d61c9eb275fa84bc79913", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63519d234d38de2a971d61c9eb275fa84bc79913", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63519d234d38de2a971d61c9eb275fa84bc79913"}], "stats": {"total": 40, "additions": 26, "deletions": 14}, "files": [{"sha": "6b629efbca723055e95634c52d6344febdaf86a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20b352b6b81a51dd1c573f7d95616fef5fc0da7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20b352b6b81a51dd1c573f7d95616fef5fc0da7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b20b352b6b81a51dd1c573f7d95616fef5fc0da7", "patch": "@@ -1,3 +1,15 @@\n+2003-06-23  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* ChangeLog.1: Fix a typo.\n+\t* cfgrtl.c: Fix comment typos.\n+\t* dwarf2out.c: Likewise.\n+\t* expmed.c: Likewise.\n+\t* genrecog.c: Likewise.\n+\t* jump.c: Likewise.\n+\t* rtlanal.c: Likewise.\n+\t* ssa-dce.c: Likewise.\n+\t* toplev.c: Likewise.\n+\n 2003-06-23  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* doc/extend.texi: Fix typos."}, {"sha": "b99a93754a3a284f4488a224b9f2d4b1359aac2e", "filename": "gcc/ChangeLog.1", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20b352b6b81a51dd1c573f7d95616fef5fc0da7/gcc%2FChangeLog.1", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20b352b6b81a51dd1c573f7d95616fef5fc0da7/gcc%2FChangeLog.1", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.1?ref=b20b352b6b81a51dd1c573f7d95616fef5fc0da7", "patch": "@@ -3212,7 +3212,7 @@ Tue Mar 16 13:44:50 1999  Jim Wilson  <wilson@cygnus.com>\n \tunless it's necessary.\n \n \t* cpplib.h (parse_marker): Removed.\n-\t(struct cpp_buffer): Line_base is now a unsigned char *; add\n+\t(struct cpp_buffer): Line_base is now an unsigned char *; add\n \t`mark' [long], remove `marks' [struct parse_marker *].\n \t(parse_set_mark, parse_clear_mark, parse_goto_mark): Update\n \tprototypes."}, {"sha": "569a6049882c93c28a244fdff0fcefe05eb5147a", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20b352b6b81a51dd1c573f7d95616fef5fc0da7/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20b352b6b81a51dd1c573f7d95616fef5fc0da7/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=b20b352b6b81a51dd1c573f7d95616fef5fc0da7", "patch": "@@ -899,7 +899,7 @@ force_nonfallthru_and_redirect (edge e, basic_block target)\n \n   /* In the case the last instruction is conditional jump to the next\n      instruction, first redirect the jump itself and then continue\n-     by creating an basic block afterwards to redirect fallthru edge.  */\n+     by creating a basic block afterwards to redirect fallthru edge.  */\n   if (e->src != ENTRY_BLOCK_PTR && e->dest != EXIT_BLOCK_PTR\n       && any_condjump_p (e->src->end)\n       /* When called from cfglayout, fallthru edges do not"}, {"sha": "c16afa1c52e4918a1f9d7dbd8d52d66cc327637d", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20b352b6b81a51dd1c573f7d95616fef5fc0da7/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20b352b6b81a51dd1c573f7d95616fef5fc0da7/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=b20b352b6b81a51dd1c573f7d95616fef5fc0da7", "patch": "@@ -9351,7 +9351,7 @@ add_data_member_location_attribute (die, decl)\n   add_AT_loc (die, DW_AT_data_member_location, loc_descr);\n }\n \n-/* Attach an DW_AT_const_value attribute for a variable or a parameter which\n+/* Attach a DW_AT_const_value attribute for a variable or a parameter which\n    does not have a \"location\" either in memory or in a register.  These\n    things can arise in GNU C when a constant is passed as an actual parameter\n    to an inlined function.  They can also arise in C++ where declared\n@@ -9683,7 +9683,7 @@ rtl_for_decl_location (decl)\n   return rtl;\n }\n \n-/* Generate *either* an DW_AT_location attribute or else an DW_AT_const_value\n+/* Generate *either* a DW_AT_location attribute or else a DW_AT_const_value\n    data attribute for a variable or a parameter.  We generate the\n    DW_AT_const_value attribute only in those cases where the given variable\n    or parameter does not have a true \"location\" either in memory or in a\n@@ -9787,7 +9787,7 @@ tree_add_const_value_attribute (var_die, decl)\n     }\n }\n \n-/* Generate an DW_AT_name attribute given some string value to be included as\n+/* Generate a DW_AT_name attribute given some string value to be included as\n    the value of the attribute.  */\n \n static void\n@@ -9804,7 +9804,7 @@ add_name_attribute (die, name_string)\n     }\n }\n \n-/* Generate an DW_AT_comp_dir attribute for DIE.  */\n+/* Generate a DW_AT_comp_dir attribute for DIE.  */\n \n static void\n add_comp_dir_attribute (die)\n@@ -10236,7 +10236,7 @@ add_src_coords_attributes (die, decl)\n   add_AT_unsigned (die, DW_AT_decl_line, DECL_SOURCE_LINE (decl));\n }\n \n-/* Add an DW_AT_name attribute and source coordinate attribute for the\n+/* Add a DW_AT_name attribute and source coordinate attribute for the\n    given decl, but only if it actually has a name.  */\n \n static void\n@@ -10380,7 +10380,7 @@ class_scope_p (context_die)\n \n /* Many forms of DIEs require a \"type description\" attribute.  This\n    routine locates the proper \"type descriptor\" die for the type given\n-   by 'type', and adds an DW_AT_type attribute below the given die.  */\n+   by 'type', and adds a DW_AT_type attribute below the given die.  */\n \n static void\n add_type_attribute (object_die, type, decl_const, decl_volatile, context_die)"}, {"sha": "ff0f7f61bade1a90a61595b41efd993011db166f", "filename": "gcc/expmed.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20b352b6b81a51dd1c573f7d95616fef5fc0da7/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20b352b6b81a51dd1c573f7d95616fef5fc0da7/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=b20b352b6b81a51dd1c573f7d95616fef5fc0da7", "patch": "@@ -3950,7 +3950,7 @@ expand_divmod (rem_flag, code, mode, op0, op1, target, unsignedp)\n \t{\n \t  /* Try to produce the remainder without producing the quotient.\n \t     If we seem to have a divmod pattern that does not require widening,\n-\t     don't try widening here.  We should really have an WIDEN argument\n+\t     don't try widening here.  We should really have a WIDEN argument\n \t     to expand_twoval_binop, since what we'd really like to do here is\n \t     1) try a mod insn in compute_mode\n \t     2) try a divmod insn in compute_mode"}, {"sha": "dcfa6d8425f7da9a3d504b66b4ed5002a9d994aa", "filename": "gcc/genrecog.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20b352b6b81a51dd1c573f7d95616fef5fc0da7/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20b352b6b81a51dd1c573f7d95616fef5fc0da7/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=b20b352b6b81a51dd1c573f7d95616fef5fc0da7", "patch": "@@ -2477,7 +2477,7 @@ make_insn_sequence (rtx insn, enum routine_type type)\n   switch (type)\n     {\n     case RECOG:\n-      /* If this is an DEFINE_INSN and X is a PARALLEL, see if it ends\n+      /* If this is a DEFINE_INSN and X is a PARALLEL, see if it ends\n \t with a group of CLOBBERs of (hard) registers or MATCH_SCRATCHes.\n \t If so, set up to recognize the pattern without these CLOBBERs.  */\n "}, {"sha": "a7d7dc21c7e3b8ce8fe5ac6fe3ffdda364420472", "filename": "gcc/jump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20b352b6b81a51dd1c573f7d95616fef5fc0da7/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20b352b6b81a51dd1c573f7d95616fef5fc0da7/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=b20b352b6b81a51dd1c573f7d95616fef5fc0da7", "patch": "@@ -760,7 +760,7 @@ reversed_comparison_code_parts (code, arg0, arg1, insn)\n   return UNKNOWN;\n }\n \n-/* An wrapper around the previous function to take COMPARISON as rtx\n+/* A wrapper around the previous function to take COMPARISON as rtx\n    expression.  This simplifies many callers.  */\n enum rtx_code\n reversed_comparison_code (comparison, insn)"}, {"sha": "f23df4ed753a4d2a37659d5c8ba2245696eb28df", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20b352b6b81a51dd1c573f7d95616fef5fc0da7/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20b352b6b81a51dd1c573f7d95616fef5fc0da7/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=b20b352b6b81a51dd1c573f7d95616fef5fc0da7", "patch": "@@ -3435,7 +3435,7 @@ subreg_offset_representable_p (xregno, xmode, offset, ymode)\n     abort ();\n #endif\n \n-  /* The XMODE value can be seen as an vector of NREGS_XMODE\n+  /* The XMODE value can be seen as a vector of NREGS_XMODE\n      values.  The subreg must represent an lowpart of given field.\n      Compute what field it is.  */\n   offset -= subreg_lowpart_offset (ymode, "}, {"sha": "43354ff50b61667e0e326cf76202c22de80fb844", "filename": "gcc/ssa-dce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20b352b6b81a51dd1c573f7d95616fef5fc0da7/gcc%2Fssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20b352b6b81a51dd1c573f7d95616fef5fc0da7/gcc%2Fssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssa-dce.c?ref=b20b352b6b81a51dd1c573f7d95616fef5fc0da7", "patch": "@@ -83,7 +83,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \f\n /* A map from blocks to the edges on which they are control dependent.  */\n typedef struct {\n-  /* An dynamically allocated array.  The Nth element corresponds to\n+  /* A dynamically allocated array.  The Nth element corresponds to\n      the block with index N + 2.  The Ith bit in the bitmap is set if\n      that block is dependent on the Ith edge.  */\n   bitmap *data;"}, {"sha": "defb5afebc85a7c05b66c48a76c48e738943eefe", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20b352b6b81a51dd1c573f7d95616fef5fc0da7/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20b352b6b81a51dd1c573f7d95616fef5fc0da7/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=b20b352b6b81a51dd1c573f7d95616fef5fc0da7", "patch": "@@ -634,7 +634,7 @@ int flag_finite_math_only = 0;\n int flag_trapping_math = 1;\n \n /* Nonzero means disable transformations observable by signaling NaNs.\n-   This option implies that any operation on a IEEE signaling NaN can\n+   This option implies that any operation on an IEEE signaling NaN can\n    generate a (user-visible) trap.  */\n \n int flag_signaling_nans = 0;"}]}