{"sha": "61a1397b0635f1d301dd9a7f4ff5adac9010acb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFhMTM5N2IwNjM1ZjFkMzAxZGQ5YTdmNGZmNWFkYWM5MDEwYWNiMQ==", "commit": {"author": {"name": "John Wehle", "email": "john@feith.com", "date": "1999-04-07T10:25:42Z"}, "committer": {"name": "John Wehle", "email": "wehle@gcc.gnu.org", "date": "1999-04-07T10:25:42Z"}, "message": "i386.c (output_move_memory): Remove.\n\n\t* i386.c (output_move_memory): Remove.\n\t* i386.h: Likewise.\n\t* i386.md (movsi, movhi, movstricthi, movqi, movstrictqi,\n\tmovsf, movdf, movxf, movdi): Check no_new_pseudos instead\n\tof (reload_in_progress | reload_completed).\n\nFrom-SVN: r26258", "tree": {"sha": "1a75201b8af820760064d2a467424c75f1936b66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a75201b8af820760064d2a467424c75f1936b66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61a1397b0635f1d301dd9a7f4ff5adac9010acb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61a1397b0635f1d301dd9a7f4ff5adac9010acb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61a1397b0635f1d301dd9a7f4ff5adac9010acb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61a1397b0635f1d301dd9a7f4ff5adac9010acb1/comments", "author": {"login": "jlwehle", "id": 46985578, "node_id": "MDQ6VXNlcjQ2OTg1NTc4", "avatar_url": "https://avatars.githubusercontent.com/u/46985578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlwehle", "html_url": "https://github.com/jlwehle", "followers_url": "https://api.github.com/users/jlwehle/followers", "following_url": "https://api.github.com/users/jlwehle/following{/other_user}", "gists_url": "https://api.github.com/users/jlwehle/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlwehle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlwehle/subscriptions", "organizations_url": "https://api.github.com/users/jlwehle/orgs", "repos_url": "https://api.github.com/users/jlwehle/repos", "events_url": "https://api.github.com/users/jlwehle/events{/privacy}", "received_events_url": "https://api.github.com/users/jlwehle/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1530be84fcd15570f9885c29a8cc94880ecd6d57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1530be84fcd15570f9885c29a8cc94880ecd6d57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1530be84fcd15570f9885c29a8cc94880ecd6d57"}], "stats": {"total": 147, "additions": 18, "deletions": 129}, "files": [{"sha": "816008177a9bc7aa3fcb533108dad248b19a2ad0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61a1397b0635f1d301dd9a7f4ff5adac9010acb1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61a1397b0635f1d301dd9a7f4ff5adac9010acb1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61a1397b0635f1d301dd9a7f4ff5adac9010acb1", "patch": "@@ -1,3 +1,12 @@\n+Wed Apr  7 13:16:22 EDT 1999  John Wehle  (john@feith.com)\n+\n+\t* i386.c (output_move_memory): Remove.\n+\t* i386.h: Likewise.\n+\n+\t* i386.md (movsi, movhi, movstricthi, movqi, movstrictqi,\n+\tmovsf, movdf, movxf, movdi): Check no_new_pseudos instead\n+\tof (reload_in_progress | reload_completed).\n+\n Wed Apr  7 03:16:45 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* alpha.c (reg_no_subreg_operand): New function."}, {"sha": "adec5a2c9622141f1d0113b6e5815530a68d267e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 119, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61a1397b0635f1d301dd9a7f4ff5adac9010acb1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61a1397b0635f1d301dd9a7f4ff5adac9010acb1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=61a1397b0635f1d301dd9a7f4ff5adac9010acb1", "patch": "@@ -1480,125 +1480,6 @@ output_move_pushmem (operands, insn, length, tmp_start, n_operands)\n   return \"\";\n }\n \f\n-/* Output the appropriate code to move data between two memory locations */\n-\n-char *\n-output_move_memory (operands, insn, length, tmp_start, n_operands)\n-     rtx operands[];\n-     rtx insn;\n-     int length;\n-     int tmp_start;\n-     int n_operands;\n-{\n-  struct\n-    {\n-      char *load;\n-      char *store;\n-      rtx   xops[3];\n-    } tmp_info[MAX_TMPS];\n-\n-  rtx dest = operands[0];\n-  rtx src  = operands[1];\n-  rtx qi_tmp = NULL_RTX;\n-  int max_tmps = 0;\n-  int offset = 0;\n-  int i, num_tmps;\n-  rtx xops[3];\n-\n-  if (GET_CODE (dest) == MEM\n-      && GET_CODE (XEXP (dest, 0)) == PRE_INC\n-      && XEXP (XEXP (dest, 0), 0) == stack_pointer_rtx)\n-    return output_move_pushmem (operands, insn, length, tmp_start, n_operands);\n-\n-  if (! offsettable_memref_p (src))\n-    fatal_insn (\"Source is not offsettable\", insn);\n-\n-  if (! offsettable_memref_p (dest))\n-    fatal_insn (\"Destination is not offsettable\", insn);\n-\n-  /* Figure out which temporary registers we have available */\n-  for (i = tmp_start; i < n_operands; i++)\n-    {\n-      if (GET_CODE (operands[i]) == REG)\n-\t{\n-\t  if ((length & 1) != 0 && qi_tmp == 0 && QI_REG_P (operands[i]))\n-\t    qi_tmp = operands[i];\n-\n-\t  if (reg_overlap_mentioned_p (operands[i], dest))\n-\t    fatal_insn (\"Temporary register overlaps the destination\", insn);\n-\n-\t  if (reg_overlap_mentioned_p (operands[i], src))\n-\t    fatal_insn (\"Temporary register overlaps the source\", insn);\n-\n-\t  tmp_info[max_tmps++].xops[2] = operands[i];\n-\t  if (max_tmps == MAX_TMPS)\n-\t    break;\n-\t}\n-    }\n-\n-  if (max_tmps == 0)\n-    fatal_insn (\"No scratch registers were found to do memory->memory moves\",\n-\t\tinsn);\n-\n-  if ((length & 1) != 0)\n-    {\n-      if (qi_tmp == 0)\n-\tfatal_insn (\"No byte register found when moving odd # of bytes.\",\n-\t\t    insn);\n-    }\n-\n-  while (length > 1)\n-    {\n-      for (num_tmps = 0; num_tmps < max_tmps; num_tmps++)\n-\t{\n-\t  if (length >= 4)\n-\t    {\n-\t      tmp_info[num_tmps].load    = AS2(mov%L0,%1,%2);\n-\t      tmp_info[num_tmps].store   = AS2(mov%L0,%2,%0);\n-\t      tmp_info[num_tmps].xops[0]\n-\t\t= adj_offsettable_operand (dest, offset);\n-\t      tmp_info[num_tmps].xops[1]\n-\t\t= adj_offsettable_operand (src, offset);\n-\n-\t      offset += 4;\n-\t      length -= 4;\n-\t    }\n-\n-\t  else if (length >= 2)\n-\t    {\n-\t      tmp_info[num_tmps].load    = AS2(mov%W0,%1,%2);\n-\t      tmp_info[num_tmps].store   = AS2(mov%W0,%2,%0);\n-\t      tmp_info[num_tmps].xops[0]\n-\t\t= adj_offsettable_operand (dest, offset);\n-\t      tmp_info[num_tmps].xops[1]\n-\t\t= adj_offsettable_operand (src, offset);\n-\n-\t      offset += 2;\n-\t      length -= 2;\n-\t    }\n-\t  else\n-\t    break;\n-\t}\n-\n-      for (i = 0; i < num_tmps; i++)\n-\toutput_asm_insn (tmp_info[i].load, tmp_info[i].xops);\n-\n-      for (i = 0; i < num_tmps; i++)\n-\toutput_asm_insn (tmp_info[i].store, tmp_info[i].xops);\n-    }\n-\n-  if (length == 1)\n-    {\n-      xops[0] = adj_offsettable_operand (dest, offset);\n-      xops[1] = adj_offsettable_operand (src, offset);\n-      xops[2] = qi_tmp;\n-      output_asm_insn (AS2(mov%B0,%1,%2), xops);\n-      output_asm_insn (AS2(mov%B0,%2,%0), xops);\n-    }\n-\n-  return \"\";\n-}\n-\f\n int\n standard_80387_constant_p (x)\n      rtx x;"}, {"sha": "994d15717628f5b2dca7d602dff874a68cc38c35", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61a1397b0635f1d301dd9a7f4ff5adac9010acb1/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61a1397b0635f1d301dd9a7f4ff5adac9010acb1/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=61a1397b0635f1d301dd9a7f4ff5adac9010acb1", "patch": "@@ -2717,7 +2717,6 @@ extern void output_op_from_reg ();\n extern void output_to_reg ();\n extern char *singlemove_string ();\n extern char *output_move_double ();\n-extern char *output_move_memory ();\n extern char *output_move_pushmem ();\n extern int standard_80387_constant_p ();\n extern char *output_move_const_single ();"}, {"sha": "df87d5cf1b2ad7f156c4ada59a576d59c0295443", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61a1397b0635f1d301dd9a7f4ff5adac9010acb1/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61a1397b0635f1d301dd9a7f4ff5adac9010acb1/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=61a1397b0635f1d301dd9a7f4ff5adac9010acb1", "patch": "@@ -926,7 +926,7 @@\n \n   /* Don't generate memory->memory moves, go through a register */\n   else if (TARGET_MOVE\n-\t   && (reload_in_progress | reload_completed) == 0\n+\t   && no_new_pseudos == 0\n \t   && GET_CODE (operands[0]) == MEM\n \t   && GET_CODE (operands[1]) == MEM)\n     {\n@@ -1032,7 +1032,7 @@\n {\n   /* Don't generate memory->memory moves, go through a register */\n   if (TARGET_MOVE\n-      && (reload_in_progress | reload_completed) == 0\n+      && no_new_pseudos == 0\n       && GET_CODE (operands[0]) == MEM\n       && GET_CODE (operands[1]) == MEM)\n     {\n@@ -1096,7 +1096,7 @@\n {\n   /* Don't generate memory->memory moves, go through a register */\n   if (TARGET_MOVE\n-      && (reload_in_progress | reload_completed) == 0\n+      && no_new_pseudos == 0\n       && GET_CODE (operands[0]) == MEM\n       && GET_CODE (operands[1]) == MEM)\n     {\n@@ -1166,7 +1166,7 @@\n {\n   /* Don't generate memory->memory moves, go through a register */\n   if (TARGET_MOVE\n-      && (reload_in_progress | reload_completed) == 0\n+      && no_new_pseudos == 0\n       && GET_CODE (operands[0]) == MEM\n       && GET_CODE (operands[1]) == MEM)\n     {\n@@ -1228,7 +1228,7 @@\n {\n   /* Don't generate memory->memory moves, go through a register */\n   if (TARGET_MOVE\n-      && (reload_in_progress | reload_completed) == 0\n+      && no_new_pseudos == 0\n       && GET_CODE (operands[0]) == MEM\n       && GET_CODE (operands[1]) == MEM)\n     {\n@@ -1314,7 +1314,7 @@\n {\n   /* Don't generate memory->memory moves, go through a register */\n   if (TARGET_MOVE\n-      && (reload_in_progress | reload_completed) == 0\n+      && no_new_pseudos == 0\n       && GET_CODE (operands[0]) == MEM\n       && GET_CODE (operands[1]) == MEM)\n     {\n@@ -1436,7 +1436,7 @@\n {\n   /* Don't generate memory->memory moves, go through a register */\n   if (TARGET_MOVE\n-      && (reload_in_progress | reload_completed) == 0\n+      && no_new_pseudos == 0\n       && GET_CODE (operands[0]) == MEM\n       && GET_CODE (operands[1]) == MEM)\n     {\n@@ -1559,7 +1559,7 @@\n {\n   /* Don't generate memory->memory moves, go through a register */\n   if (TARGET_MOVE\n-      && (reload_in_progress | reload_completed) == 0\n+      && no_new_pseudos == 0\n       && GET_CODE (operands[0]) == MEM\n       && GET_CODE (operands[1]) == MEM)\n     {\n@@ -1657,7 +1657,7 @@\n {\n   /* Don't generate memory->memory moves, go through a register */\n   if (TARGET_MOVE\n-      && (reload_in_progress | reload_completed) == 0\n+      && no_new_pseudos == 0\n       && GET_CODE (operands[0]) == MEM\n       && GET_CODE (operands[1]) == MEM)\n     {"}]}