{"sha": "2c21b2473c74b876e97469cf4a60abcc48739ae6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmMyMWIyNDczYzc0Yjg3NmU5NzQ2OWNmNGE2MGFiY2M0ODczOWFlNg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-10-29T02:26:16Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-10-29T02:26:16Z"}, "message": "c-semantics.c (make_rtl_for_local_static): Don't clobber DECL_ASSEMBLER_NAME.\n\n\t* c-semantics.c (make_rtl_for_local_static): Don't clobber\n\tDECL_ASSEMBLER_NAME.\n\nFrom-SVN: r37112", "tree": {"sha": "d1c3df024ddadb0b374b3547f068b61a7b3c1f4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1c3df024ddadb0b374b3547f068b61a7b3c1f4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c21b2473c74b876e97469cf4a60abcc48739ae6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c21b2473c74b876e97469cf4a60abcc48739ae6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c21b2473c74b876e97469cf4a60abcc48739ae6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c21b2473c74b876e97469cf4a60abcc48739ae6/comments", "author": null, "committer": null, "parents": [{"sha": "8763704d9b467684ec6a50a5d37fe904b15aea33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8763704d9b467684ec6a50a5d37fe904b15aea33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8763704d9b467684ec6a50a5d37fe904b15aea33"}], "stats": {"total": 32, "additions": 24, "deletions": 8}, "files": [{"sha": "876b6671bafa8cb42869c8a0186c914bf12ffddd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c21b2473c74b876e97469cf4a60abcc48739ae6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c21b2473c74b876e97469cf4a60abcc48739ae6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2c21b2473c74b876e97469cf4a60abcc48739ae6", "patch": "@@ -1,3 +1,8 @@\n+2000-10-28  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* c-semantics.c (make_rtl_for_local_static): Don't clobber\n+\tDECL_ASSEMBLER_NAME.\n+\n 2000-10-28  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* configure.in: Determine and substitute gcc_version_full."}, {"sha": "f85284157227291795dcb696022795a00496c232", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c21b2473c74b876e97469cf4a60abcc48739ae6/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c21b2473c74b876e97469cf4a60abcc48739ae6/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=2c21b2473c74b876e97469cf4a60abcc48739ae6", "patch": "@@ -281,14 +281,25 @@ make_rtl_for_local_static (decl)\n   if (TREE_ASM_WRITTEN (decl))\n     return;\n \n-  if (DECL_ASSEMBLER_NAME (decl) != DECL_NAME (decl))\n-    {\n-      /* The only way this situaton can occur is if the\n-\t user specified a name for this DECL using the\n-\t `attribute' syntax.  */\n-      asmspec = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n-      DECL_ASSEMBLER_NAME (decl) = DECL_NAME (decl);\n-    }\n+  /* If the DECL_ASSEMBLER_NAME is not the same as the DECL_NAME, then\n+     either we already created RTL for this DECL (and since it was a\n+     local variable, its DECL_ASSMEMBLER_NAME got hacked up to prevent\n+     clashes with other local statics with the same name by a previous\n+     call to make_decl_rtl), or the user explicitly requested a\n+     particular assembly name for this variable, using the GNU\n+     extension for this purpose:\n+\n+       int i asm (\"j\");\n+\n+     There's no way to know which case we're in, here.  But, it turns\n+     out we're safe.  If there's already RTL, then\n+     rest_of_decl_compilation ignores the ASMSPEC parameter, so we\n+     may as well not pass it in.  If there isn't RTL, then we didn't\n+     already create RTL, which means that the modification to\n+     DECL_ASSEMBLER_NAME came only via the explicit extension.  */\n+  if (DECL_ASSEMBLER_NAME (decl) != DECL_NAME (decl)\n+      && !DECL_RTL (decl))\n+    asmspec = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n \n   rest_of_decl_compilation (decl, asmspec, /*top_level=*/0, /*at_end=*/0);\n }"}]}