{"sha": "0abbc99c023b99e9fad6308f9a0cdfc1599b5b31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFiYmM5OWMwMjNiOTllOWZhZDYzMDhmOWEwY2RmYzE1OTliNWIzMQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2019-03-25T20:43:36Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-03-25T20:43:36Z"}, "message": "re PR c++/84661 (internal compiler error: Segmentation fault (strip_array_types()))\n\n/cp\n2019-03-25  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/84661\n\tPR c++/85013\n\t* parser.c (cp_parser_binary_expression): Don't call cp_fully_fold\n\tto undo the disabling of warnings.\n\n/testsuite\n2019-03-25  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/84661\n\tPR c++/85013\n\t* g++.dg/concepts/pr84661.C: New.\n\t* g++.dg/torture/pr85013.C: Likewise.\n\nFrom-SVN: r269923", "tree": {"sha": "13d977da98f04d907ddc64e1e4ef130468a172bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13d977da98f04d907ddc64e1e4ef130468a172bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0abbc99c023b99e9fad6308f9a0cdfc1599b5b31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0abbc99c023b99e9fad6308f9a0cdfc1599b5b31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0abbc99c023b99e9fad6308f9a0cdfc1599b5b31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0abbc99c023b99e9fad6308f9a0cdfc1599b5b31/comments", "author": null, "committer": null, "parents": [{"sha": "b25e675d7de70c530a1ac50f726179c9fd54f161", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b25e675d7de70c530a1ac50f726179c9fd54f161", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b25e675d7de70c530a1ac50f726179c9fd54f161"}], "stats": {"total": 50, "additions": 38, "deletions": 12}, "files": [{"sha": "703c0f11696ba0c23a4a842e292f75b5b331c256", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0abbc99c023b99e9fad6308f9a0cdfc1599b5b31/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0abbc99c023b99e9fad6308f9a0cdfc1599b5b31/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0abbc99c023b99e9fad6308f9a0cdfc1599b5b31", "patch": "@@ -1,3 +1,10 @@\n+2019-03-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/84661\n+\tPR c++/85013\n+\t* parser.c (cp_parser_binary_expression): Don't call cp_fully_fold\n+\tto undo the disabling of warnings.\n+\n 2019-03-25  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/87748 - substitution failure error with decltype."}, {"sha": "4119d2a32659980937a32f203fb4f3da2fec7139", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0abbc99c023b99e9fad6308f9a0cdfc1599b5b31/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0abbc99c023b99e9fad6308f9a0cdfc1599b5b31/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=0abbc99c023b99e9fad6308f9a0cdfc1599b5b31", "patch": "@@ -9443,6 +9443,7 @@ cp_parser_binary_expression (cp_parser* parser, bool cast_p,\n {\n   cp_parser_expression_stack stack;\n   cp_parser_expression_stack_entry *sp = &stack[0];\n+  cp_parser_expression_stack_entry *disable_warnings_sp = NULL;\n   cp_parser_expression_stack_entry current;\n   cp_expr rhs;\n   cp_token *token;\n@@ -9506,12 +9507,14 @@ cp_parser_binary_expression (cp_parser* parser, bool cast_p,\n \n       /* For \"false && x\" or \"true || x\", x will never be executed;\n \t disable warnings while evaluating it.  */\n-      if (current.tree_type == TRUTH_ANDIF_EXPR)\n-\tc_inhibit_evaluation_warnings +=\n-\t  cp_fully_fold (current.lhs) == truthvalue_false_node;\n-      else if (current.tree_type == TRUTH_ORIF_EXPR)\n-\tc_inhibit_evaluation_warnings +=\n-\t  cp_fully_fold (current.lhs) == truthvalue_true_node;\n+      if ((current.tree_type == TRUTH_ANDIF_EXPR\n+\t   && cp_fully_fold (current.lhs) == truthvalue_false_node)\n+\t  || (current.tree_type == TRUTH_ORIF_EXPR\n+\t      && cp_fully_fold (current.lhs) == truthvalue_true_node))\n+\t{\n+\t  disable_warnings_sp = sp;\n+\t  ++c_inhibit_evaluation_warnings;\n+\t}\n \n       /* Extract another operand.  It may be the RHS of this expression\n \t or the LHS of a new, higher priority expression.  */\n@@ -9557,12 +9560,11 @@ cp_parser_binary_expression (cp_parser* parser, bool cast_p,\n \t}\n \n       /* Undo the disabling of warnings done above.  */\n-      if (current.tree_type == TRUTH_ANDIF_EXPR)\n-\tc_inhibit_evaluation_warnings -=\n-\t  cp_fully_fold (current.lhs) == truthvalue_false_node;\n-      else if (current.tree_type == TRUTH_ORIF_EXPR)\n-\tc_inhibit_evaluation_warnings -=\n-\t  cp_fully_fold (current.lhs) == truthvalue_true_node;\n+      if (sp == disable_warnings_sp)\n+\t{\n+\t  disable_warnings_sp = NULL;\n+\t  --c_inhibit_evaluation_warnings;\n+\t}\n \n       if (warn_logical_not_paren\n \t  && TREE_CODE_CLASS (current.tree_type) == tcc_comparison"}, {"sha": "00d17404dda3f9430d3130c1477bf1090d22f39c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0abbc99c023b99e9fad6308f9a0cdfc1599b5b31/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0abbc99c023b99e9fad6308f9a0cdfc1599b5b31/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0abbc99c023b99e9fad6308f9a0cdfc1599b5b31", "patch": "@@ -1,3 +1,10 @@\n+2019-03-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/84661\n+\tPR c++/85013\n+\t* g++.dg/concepts/pr84661.C: New.\n+\t* g++.dg/torture/pr85013.C: Likewise.\n+\n 2019-03-25  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/89214 - ICE when initializing aggregates with bases."}, {"sha": "3f63863e4c8f0cdfcf74aaf56b1c02f93e206647", "filename": "gcc/testsuite/g++.dg/concepts/pr84661.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0abbc99c023b99e9fad6308f9a0cdfc1599b5b31/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr84661.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0abbc99c023b99e9fad6308f9a0cdfc1599b5b31/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr84661.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr84661.C?ref=0abbc99c023b99e9fad6308f9a0cdfc1599b5b31", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do compile { target c++14 } }\n+// { dg-additional-options \"-fconcepts\" }\n+\n+struct S {\n+  int &a;\n+  void foo (decltype(((a = 0) || ((auto)))));  // { dg-error \"expected\" }\n+};"}, {"sha": "6da3e2efbf5e6d9eb4482e735914203eddf9014d", "filename": "gcc/testsuite/g++.dg/torture/pr85013.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0abbc99c023b99e9fad6308f9a0cdfc1599b5b31/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr85013.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0abbc99c023b99e9fad6308f9a0cdfc1599b5b31/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr85013.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr85013.C?ref=0abbc99c023b99e9fad6308f9a0cdfc1599b5b31", "patch": "@@ -0,0 +1,3 @@\n+// { dg-additional-options \"-std=c++14 -fconcepts\" }\n+\n+a(decltype((0 > 1e91 && 1e31 && (auto))));  // { dg-error \"expected\" }"}]}