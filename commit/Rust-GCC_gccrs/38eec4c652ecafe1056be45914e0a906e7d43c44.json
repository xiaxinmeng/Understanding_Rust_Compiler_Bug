{"sha": "38eec4c652ecafe1056be45914e0a906e7d43c44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhlZWM0YzY1MmVjYWZlMTA1NmJlNDU5MTRlMGE5MDZlN2Q0M2M0NA==", "commit": {"author": {"name": "Ulrich Weigand", "email": "ulrich.weigand@linaro.org", "date": "2012-06-26T09:05:48Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2012-06-26T09:05:48Z"}, "message": "re PR regression/53729 (PR53636 fix caused bb-slp-16.c to FAIL on sparc64 and powerpc64)\n\n\tPR tree-optimization/53729\n\tPR tree-optimization/53636\n\t* tree-vect-slp.c (vect_slp_analyze_bb_1): Delay call to\n\tvect_verify_datarefs_alignment until after statements have\n\tbeen marked as relevant/irrelevant.\n\t* tree-vect-data-refs.c (vect_verify_datarefs_alignment):\n\tSkip irrelevant statements.\n\t(vect_enhance_data_refs_alignment): Use STMT_VINFO_RELEVANT_P\n\tinstead of STMT_VINFO_RELEVANT.\n\t(vect_get_data_access_cost): Do not check for supportable\n\talignment before calling vect_get_load_cost/vect_get_store_cost.\n\t* tree-vect-stmts.c (vect_get_store_cost): Do not abort when\n\thandling unsupported alignment.\n\t(vect_get_load_cost): Likewise.\n\nFrom-SVN: r188979", "tree": {"sha": "cd00eac064512bb0c8c0e08fc883a8a88233df53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd00eac064512bb0c8c0e08fc883a8a88233df53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38eec4c652ecafe1056be45914e0a906e7d43c44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38eec4c652ecafe1056be45914e0a906e7d43c44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38eec4c652ecafe1056be45914e0a906e7d43c44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38eec4c652ecafe1056be45914e0a906e7d43c44/comments", "author": null, "committer": null, "parents": [{"sha": "e4ae19bc4c940dcc7bc89eecd60d75dc7e17dd5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4ae19bc4c940dcc7bc89eecd60d75dc7e17dd5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4ae19bc4c940dcc7bc89eecd60d75dc7e17dd5c"}], "stats": {"total": 74, "additions": 54, "deletions": 20}, "files": [{"sha": "356d201696d9f18b22692481c77365cea21eedcf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38eec4c652ecafe1056be45914e0a906e7d43c44/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38eec4c652ecafe1056be45914e0a906e7d43c44/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=38eec4c652ecafe1056be45914e0a906e7d43c44", "patch": "@@ -1,3 +1,20 @@\n+2012-06-26  Ulrich Weigand  <ulrich.weigand@linaro.org>\n+\n+\tPR tree-optimization/53729\n+\tPR tree-optimization/53636\n+\t* tree-vect-slp.c (vect_slp_analyze_bb_1): Delay call to\n+\tvect_verify_datarefs_alignment until after statements have\n+\tbeen marked as relevant/irrelevant.\n+\t* tree-vect-data-refs.c (vect_verify_datarefs_alignment):\n+\tSkip irrelevant statements.\n+\t(vect_enhance_data_refs_alignment): Use STMT_VINFO_RELEVANT_P\n+\tinstead of STMT_VINFO_RELEVANT.\n+\t(vect_get_data_access_cost): Do not check for supportable\n+\talignment before calling vect_get_load_cost/vect_get_store_cost.\n+\t* tree-vect-stmts.c (vect_get_store_cost): Do not abort when\n+\thandling unsupported alignment.\n+\t(vect_get_load_cost): Likewise.\n+\n 2012-06-25  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* config/rl78/rl78.h: Do not undefine DONT_USE_BUILTIN_SETJMP."}, {"sha": "34afd05671d0087297c0a7fcfdb5a38228f495b8", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38eec4c652ecafe1056be45914e0a906e7d43c44/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38eec4c652ecafe1056be45914e0a906e7d43c44/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=38eec4c652ecafe1056be45914e0a906e7d43c44", "patch": "@@ -1094,6 +1094,9 @@ vect_verify_datarefs_alignment (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo)\n       gimple stmt = DR_STMT (dr);\n       stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n \n+      if (!STMT_VINFO_RELEVANT_P (stmt_info))\n+\tcontinue;\n+\n       /* For interleaving, only the alignment of the first access matters. \n          Skip statements marked as not vectorizable.  */\n       if ((STMT_VINFO_GROUPED_ACCESS (stmt_info)\n@@ -1213,17 +1216,11 @@ vect_get_data_access_cost (struct data_reference *dr,\n   loop_vec_info loop_vinfo = STMT_VINFO_LOOP_VINFO (stmt_info);\n   int vf = LOOP_VINFO_VECT_FACTOR (loop_vinfo);\n   int ncopies = vf / nunits;\n-  bool supportable_dr_alignment = vect_supportable_dr_alignment (dr, true);\n \n-  if (!supportable_dr_alignment)\n-    *inside_cost = VECT_MAX_COST;\n+  if (DR_IS_READ (dr))\n+    vect_get_load_cost (dr, ncopies, true, inside_cost, outside_cost);\n   else\n-    {\n-      if (DR_IS_READ (dr))\n-        vect_get_load_cost (dr, ncopies, true, inside_cost, outside_cost);\n-      else\n-        vect_get_store_cost (dr, ncopies, inside_cost);\n-    }\n+    vect_get_store_cost (dr, ncopies, inside_cost);\n \n   if (vect_print_dump_info (REPORT_COST))\n     fprintf (vect_dump, \"vect_get_data_access_cost: inside_cost = %d, \"\n@@ -1537,7 +1534,7 @@ vect_enhance_data_refs_alignment (loop_vec_info loop_vinfo)\n       stmt = DR_STMT (dr);\n       stmt_info = vinfo_for_stmt (stmt);\n \n-      if (!STMT_VINFO_RELEVANT (stmt_info))\n+      if (!STMT_VINFO_RELEVANT_P (stmt_info))\n \tcontinue;\n \n       /* For interleaving, only the alignment of the first access"}, {"sha": "5d11552a1a08bd4992717c918ce83b50ff16cb10", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38eec4c652ecafe1056be45914e0a906e7d43c44/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38eec4c652ecafe1056be45914e0a906e7d43c44/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=38eec4c652ecafe1056be45914e0a906e7d43c44", "patch": "@@ -2050,16 +2050,6 @@ vect_slp_analyze_bb_1 (basic_block bb)\n       return NULL;\n     }\n \n-   if (!vect_verify_datarefs_alignment (NULL, bb_vinfo))\n-    {\n-      if (vect_print_dump_info (REPORT_UNVECTORIZED_LOCATIONS))\n-        fprintf (vect_dump, \"not vectorized: unsupported alignment in basic \"\n-                            \"block.\\n\");\n-\n-      destroy_bb_vec_info (bb_vinfo);\n-      return NULL;\n-    }\n-\n   /* Check the SLP opportunities in the basic block, analyze and build SLP\n      trees.  */\n   if (!vect_analyze_slp (NULL, bb_vinfo))\n@@ -2082,6 +2072,16 @@ vect_slp_analyze_bb_1 (basic_block bb)\n       vect_mark_slp_stmts_relevant (SLP_INSTANCE_TREE (instance));\n     }\n \n+   if (!vect_verify_datarefs_alignment (NULL, bb_vinfo))\n+    {\n+      if (vect_print_dump_info (REPORT_UNVECTORIZED_LOCATIONS))\n+        fprintf (vect_dump, \"not vectorized: unsupported alignment in basic \"\n+                            \"block.\\n\");\n+\n+      destroy_bb_vec_info (bb_vinfo);\n+      return NULL;\n+    }\n+\n   if (!vect_slp_analyze_operations (bb_vinfo))\n     {\n       if (vect_print_dump_info (REPORT_UNVECTORIZED_LOCATIONS))"}, {"sha": "010181c3124d99cae783251f55d0f88247721ffd", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38eec4c652ecafe1056be45914e0a906e7d43c44/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38eec4c652ecafe1056be45914e0a906e7d43c44/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=38eec4c652ecafe1056be45914e0a906e7d43c44", "patch": "@@ -931,6 +931,16 @@ vect_get_store_cost (struct data_reference *dr, int ncopies,\n         break;\n       }\n \n+    case dr_unaligned_unsupported:\n+      {\n+        *inside_cost = VECT_MAX_COST;\n+\n+        if (vect_print_dump_info (REPORT_COST))\n+          fprintf (vect_dump, \"vect_model_store_cost: unsupported access.\");\n+\n+        break;\n+      }\n+\n     default:\n       gcc_unreachable ();\n     }\n@@ -1094,6 +1104,16 @@ vect_get_load_cost (struct data_reference *dr, int ncopies,\n         break;\n       }\n \n+    case dr_unaligned_unsupported:\n+      {\n+        *inside_cost = VECT_MAX_COST;\n+\n+        if (vect_print_dump_info (REPORT_COST))\n+          fprintf (vect_dump, \"vect_model_load_cost: unsupported access.\");\n+\n+        break;\n+      }\n+\n     default:\n       gcc_unreachable ();\n     }"}]}