{"sha": "ca58211b7de19f4fc94944836891f6e275e74412", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E1ODIxMWI3ZGUxOWY0ZmM5NDk0NDgzNjg5MWY2ZTI3NWU3NDQxMg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2006-10-13T15:59:03Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2006-10-13T15:59:03Z"}, "message": "../svn-commit.tmp\n\nFrom-SVN: r117696", "tree": {"sha": "e0e884867515d0a183ff624faa1b1cb6826bbf92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0e884867515d0a183ff624faa1b1cb6826bbf92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca58211b7de19f4fc94944836891f6e275e74412", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca58211b7de19f4fc94944836891f6e275e74412", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca58211b7de19f4fc94944836891f6e275e74412", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca58211b7de19f4fc94944836891f6e275e74412/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e1bb14caf9a04993d5158e9bdcee8524ea6f32db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1bb14caf9a04993d5158e9bdcee8524ea6f32db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1bb14caf9a04993d5158e9bdcee8524ea6f32db"}], "stats": {"total": 85, "additions": 66, "deletions": 19}, "files": [{"sha": "d62801bdbba5d072300479f6366164c4978cdd78", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca58211b7de19f4fc94944836891f6e275e74412/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca58211b7de19f4fc94944836891f6e275e74412/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca58211b7de19f4fc94944836891f6e275e74412", "patch": "@@ -1,3 +1,15 @@\n+2006-10-13  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR c/29092\n+\n+        * c-typeck.c (digest_init): Always allow initializing vectors\n+\tthat have static storage duration with compound literals.\n+\t* tree.c (build_type_attribute_qual_variant): New, based on\n+\tbuild_type_attribute_variant.\n+\t(build_type_attribute_variant): Rewrite using the former.\n+\t(make_vector_type): Use build_type_attribute_qual_variant to build\n+\ttype variants.  Use type_hash_canon on the others.\n+\n 2006-10-13  Daniel Berlin <dberlin@dberlin.org>\n \t    Ramana Radhakrishnan  <ramana.radhakrishnan@celunite.com>\n "}, {"sha": "2534c25e75dd80513a2aaf9d580cdf71076e6fcd", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca58211b7de19f4fc94944836891f6e275e74412/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca58211b7de19f4fc94944836891f6e275e74412/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=ca58211b7de19f4fc94944836891f6e275e74412", "patch": "@@ -4719,12 +4719,14 @@ digest_init (tree type, tree init, bool strict_string, int require_constant)\n \t   conversion.  */\n \tinside_init = convert (type, inside_init);\n \n-      if (require_constant && !flag_isoc99\n+      if (require_constant\n+\t  && (code == VECTOR_TYPE || !flag_isoc99)\n \t  && TREE_CODE (inside_init) == COMPOUND_LITERAL_EXPR)\n \t{\n \t  /* As an extension, allow initializing objects with static storage\n \t     duration with compound literals (which are then treated just as\n-\t     the brace enclosed list they contain).  */\n+\t     the brace enclosed list they contain).  Also allow this for\n+\t     vectors, as we can only assign them with compound literals.  */\n \t  tree decl = COMPOUND_LITERAL_EXPR_DECL (inside_init);\n \t  inside_init = DECL_INITIAL (decl);\n \t}"}, {"sha": "bd4013b703f7497765d7ab04cbe4db49d9869369", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca58211b7de19f4fc94944836891f6e275e74412/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca58211b7de19f4fc94944836891f6e275e74412/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ca58211b7de19f4fc94944836891f6e275e74412", "patch": "@@ -1,3 +1,7 @@\n+2006-10-13  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* gcc.dg/simd-5.c, gcc.dg/simd-6: New testcases.\n+\n 2006-10-13 Paul Thomas <pault@gcc.gnu.org>\n \n \tPR fortran/29373"}, {"sha": "31a13d92edc6a8894ac0e3884eb8e5e2f29ab7c2", "filename": "gcc/testsuite/gcc.dg/simd-5.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca58211b7de19f4fc94944836891f6e275e74412/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca58211b7de19f4fc94944836891f6e275e74412/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-5.c?ref=ca58211b7de19f4fc94944836891f6e275e74412", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -std=gnu89\" } */\n+\n+/* Ensure that we don't need a typedef to initialize a vector type.  */\n+#define vector __attribute__ ((vector_size (8)))\n+vector char x = (vector char) {1,2,3,4,5,6,7,8}; /* { dg-bogus \"initializer\" } */\n+vector char y = (vector short) {1,2,3,4}; /* { dg-error \"initializer\" } */"}, {"sha": "b1d244ad5bbc711777db735f7e338fcaf0e02e33", "filename": "gcc/testsuite/gcc.dg/simd-6.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca58211b7de19f4fc94944836891f6e275e74412/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca58211b7de19f4fc94944836891f6e275e74412/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-6.c?ref=ca58211b7de19f4fc94944836891f6e275e74412", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -std=gnu99\" } */\n+\n+/* Ensure that we don't need a typedef to initialize a vector type.  */\n+#define vector __attribute__ ((vector_size (8)))\n+vector char x = (vector char) {1,2,3,4,5,6,7,8}; /* { dg-bogus \"initializer\" } */\n+vector char y = (vector short) {1,2,3,4}; /* { dg-error \"initializer\" } */"}, {"sha": "916d058b3822d806ad5891e6eae00342a0f02e80", "filename": "gcc/tree.c", "status": "modified", "additions": 32, "deletions": 17, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca58211b7de19f4fc94944836891f6e275e74412/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca58211b7de19f4fc94944836891f6e275e74412/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=ca58211b7de19f4fc94944836891f6e275e74412", "patch": "@@ -165,7 +165,6 @@ static int int_cst_hash_eq (const void *, const void *);\n static void print_type_hash_statistics (void);\n static void print_debug_expr_statistics (void);\n static void print_value_expr_statistics (void);\n-static tree make_vector_type (tree, int, enum machine_mode);\n static int type_hash_marked_p (const void *);\n static unsigned int type_hash_list (tree, hashval_t);\n static unsigned int attribute_hash_list (tree, hashval_t);\n@@ -3356,12 +3355,12 @@ iterative_hash_host_wide_int (HOST_WIDE_INT val, hashval_t val2)\n }\n \n /* Return a type like TTYPE except that its TYPE_ATTRIBUTE\n-   is ATTRIBUTE.\n+   is ATTRIBUTE and its qualifiers are QUALS.\n \n    Record such modified types already made so we don't make duplicates.  */\n \n-tree\n-build_type_attribute_variant (tree ttype, tree attribute)\n+static tree\n+build_type_attribute_qual_variant (tree ttype, tree attribute, int quals)\n {\n   if (! attribute_list_equal (TYPE_ATTRIBUTES (ttype), attribute))\n     {\n@@ -3412,13 +3411,25 @@ build_type_attribute_variant (tree ttype, tree attribute)\n \t}\n \n       ntype = type_hash_canon (hashcode, ntype);\n-      ttype = build_qualified_type (ntype, TYPE_QUALS (ttype));\n+      ttype = build_qualified_type (ntype, quals);\n     }\n \n   return ttype;\n }\n \n \n+/* Return a type like TTYPE except that its TYPE_ATTRIBUTE\n+   is ATTRIBUTE.\n+\n+   Record such modified types already made so we don't make duplicates.  */\n+\n+tree\n+build_type_attribute_variant (tree ttype, tree attribute)\n+{\n+  return build_type_attribute_qual_variant (ttype, attribute,\n+\t\t\t\t\t    TYPE_QUALS (ttype));\n+}\n+\n /* Return nonzero if IDENT is a valid name for attribute ATTR,\n    or zero if not.\n \n@@ -6384,8 +6395,18 @@ omp_clause_operand_check_failed (int idx, tree t, const char *file,\n static tree\n make_vector_type (tree innertype, int nunits, enum machine_mode mode)\n {\n-  tree t = make_node (VECTOR_TYPE);\n+  tree t;\n+  hashval_t hashcode = 0;\n+\n+  /* Build a main variant, based on the main variant of the inner type, then\n+     use it to build the variant we return.  */\n+  if (TYPE_ATTRIBUTES (innertype) || TYPE_QUALS (innertype))\n+    return build_type_attribute_qual_variant (\n+\t    make_vector_type (TYPE_MAIN_VARIANT (innertype), nunits, mode),\n+\t    TYPE_ATTRIBUTES (innertype),\n+\t    TYPE_QUALS (innertype));\n \n+  t = make_node (VECTOR_TYPE);\n   TREE_TYPE (t) = TYPE_MAIN_VARIANT (innertype);\n   SET_TYPE_VECTOR_SUBPARTS (t, nunits);\n   TYPE_MODE (t) = mode;\n@@ -6410,17 +6431,10 @@ make_vector_type (tree innertype, int nunits, enum machine_mode mode)\n     TYPE_UID (rt) = TYPE_UID (t);\n   }\n \n-  /* Build our main variant, based on the main variant of the inner type.  */\n-  if (TYPE_MAIN_VARIANT (innertype) != innertype)\n-    {\n-      tree innertype_main_variant = TYPE_MAIN_VARIANT (innertype);\n-      unsigned int hash = TYPE_HASH (innertype_main_variant);\n-      TYPE_MAIN_VARIANT (t)\n-        = type_hash_canon (hash, make_vector_type (innertype_main_variant,\n-\t\t\t\t\t\t   nunits, mode));\n-    }\n-\n-  return t;\n+  hashcode = iterative_hash_host_wide_int (VECTOR_TYPE, hashcode);\n+  hashcode = iterative_hash_host_wide_int (mode, hashcode);\n+  hashcode = iterative_hash_object (TYPE_HASH (innertype), hashcode);\n+  return type_hash_canon (hashcode, t);\n }\n \n static tree\n@@ -6883,6 +6897,7 @@ build_vector_type (tree innertype, int nunits)\n   return make_vector_type (innertype, nunits, VOIDmode);\n }\n \n+\n /* Build RESX_EXPR with given REGION_NUMBER.  */\n tree\n build_resx (int region_number)"}]}