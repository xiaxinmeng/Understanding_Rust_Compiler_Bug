{"sha": "377535881166969dba43794f298170978d797ef6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc3NTM1ODgxMTY2OTY5ZGJhNDM3OTRmMjk4MTcwOTc4ZDc5N2VmNg==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-10-16T10:40:25Z"}, "committer": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-10-16T10:40:31Z"}, "message": "arm: Fix wrong code generated for mve scatter store with writeback intrinsics with -O2 (PR97271).\n\nThis patch fixes (PR97271) the wrong code-gen for mve scatter store with writeback intrinsics with -O2.\n\n$cat bug.c\nvoid\nfoo (uint32x4_t * addr, const int offset, int32x4_t value)\n{\n  vstrwq_scatter_base_wb_s32 (addr, 8, value);\n}\n\n$ arm-none-eabi-gcc  bug.c -S -O2 -march=armv8.1-m.main+mve -mfloat-abi=hard -o -\nWithout this patch:\n...\nfoo:\n\tvldrw.32\tq3, [r0]\n\tvstrw.u32       q0, [q3, #8]!  ---> (A)\n\tvldr.64 d4, .L3\n\tvldr.64 d5, .L3+8\n\tvldrw.32\tq3, [r0]\n\tvstrw.u32       q2, [q3, #8]!  ---> (B)\n\tbx      lr\n...\n\nWith this patch:\n...\nfoo:\n\tvldrw.32\tq3, [r0]\n\tvstrw.u32       q0, [q3, #8]!  --> (C)\n\tvstrw.32\tq3, [r0]\n\tbx      lr\n...\n\nWithout this patch 2 vstrw assembly instructions (A and B) are generated for vstrwq_scatter_base_wb_s32\nintrinsic where as fix generates only one vstrw assembly instruction (C).\n\ngcc/ChangeLog:\n\n2020-10-06  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\tPR target/97291\n\t* config/arm/arm-builtins.c (arm_strsbwbs_qualifiers): Modify array.\n\t(arm_strsbwbu_qualifiers): Likewise.\n\t(arm_strsbwbs_p_qualifiers): Likewise.\n\t(arm_strsbwbu_p_qualifiers): Likewise.\n\t* config/arm/arm_mve.h (__arm_vstrdq_scatter_base_wb_s64): Modify\n\tfunction definition.\n\t(__arm_vstrdq_scatter_base_wb_u64): Likewise.\n\t(__arm_vstrdq_scatter_base_wb_p_s64): Likewise.\n\t(__arm_vstrdq_scatter_base_wb_p_u64): Likewise.\n\t(__arm_vstrwq_scatter_base_wb_p_s32): Likewise.\n\t(__arm_vstrwq_scatter_base_wb_p_u32): Likewise.\n\t(__arm_vstrwq_scatter_base_wb_s32): Likewise.\n\t(__arm_vstrwq_scatter_base_wb_u32): Likewise.\n\t(__arm_vstrwq_scatter_base_wb_f32): Likewise.\n\t(__arm_vstrwq_scatter_base_wb_p_f32): Likewise.\n\t* config/arm/arm_mve_builtins.def (vstrwq_scatter_base_wb_add_u): Remove\n\texpansion for the builtin.\n\t(vstrwq_scatter_base_wb_add_s): Likewise.\n\t(vstrwq_scatter_base_wb_add_f): Likewise.\n\t(vstrdq_scatter_base_wb_add_u): Likewise.\n\t(vstrdq_scatter_base_wb_add_s): Likewise.\n\t(vstrwq_scatter_base_wb_p_add_u): Likewise.\n\t(vstrwq_scatter_base_wb_p_add_s): Likewise.\n\t(vstrwq_scatter_base_wb_p_add_f): Likewise.\n\t(vstrdq_scatter_base_wb_p_add_u): Likewise.\n\t(vstrdq_scatter_base_wb_p_add_s): Likewise.\n\t* config/arm/mve.md (mve_vstrwq_scatter_base_wb_<supf>v4si): Remove\n\texpand.\n\t(mve_vstrwq_scatter_base_wb_add_<supf>v4si): Likewise.\n\t(mve_vstrwq_scatter_base_wb_<supf>v4si_insn): Rename pattern to ...\n\t(mve_vstrwq_scatter_base_wb_<supf>v4si): This.\n\t(mve_vstrwq_scatter_base_wb_p_<supf>v4si): Remove expand.\n\t(mve_vstrwq_scatter_base_wb_p_add_<supf>v4si): Likewise.\n\t(mve_vstrwq_scatter_base_wb_p_<supf>v4si_insn): Rename pattern to ...\n\t(mve_vstrwq_scatter_base_wb_p_<supf>v4si): This.\n\t(mve_vstrwq_scatter_base_wb_fv4sf): Remove expand.\n\t(mve_vstrwq_scatter_base_wb_add_fv4sf): Likewise.\n\t(mve_vstrwq_scatter_base_wb_fv4sf_insn): Rename pattern to ...\n\t(mve_vstrwq_scatter_base_wb_fv4sf): This.\n\t(mve_vstrwq_scatter_base_wb_p_fv4sf): Remove expand.\n\t(mve_vstrwq_scatter_base_wb_p_add_fv4sf): Likewise.\n\t(mve_vstrwq_scatter_base_wb_p_fv4sf_insn): Rename pattern to ...\n\t(mve_vstrwq_scatter_base_wb_p_fv4sf): This.\n\t(mve_vstrdq_scatter_base_wb_<supf>v2di): Remove expand.\n\t(mve_vstrdq_scatter_base_wb_add_<supf>v2di): Likewise.\n\t(mve_vstrdq_scatter_base_wb_<supf>v2di_insn): Rename pattern to ...\n\t(mve_vstrdq_scatter_base_wb_<supf>v2di): This.\n\t(mve_vstrdq_scatter_base_wb_p_<supf>v2di): Remove expand.\n\t(mve_vstrdq_scatter_base_wb_p_add_<supf>v2di): Likewise.\n\t(mve_vstrdq_scatter_base_wb_p_<supf>v2di_insn): Rename pattern to ...\n\t(mve_vstrdq_scatter_base_wb_p_<supf>v2di): This.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/97291\n\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_wb_p_s64.c: Modify.\n\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_wb_p_u64.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_wb_s64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_wb_u64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_p_f32.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_p_s32.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_p_u32.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_u32.c: Likewise.", "tree": {"sha": "47985fbe7275f35676ad318c44b275a58c135746", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47985fbe7275f35676ad318c44b275a58c135746"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/377535881166969dba43794f298170978d797ef6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/377535881166969dba43794f298170978d797ef6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/377535881166969dba43794f298170978d797ef6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/377535881166969dba43794f298170978d797ef6/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e27c8cc931f6b48a732f69b0f9d48d4166ab5522", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e27c8cc931f6b48a732f69b0f9d48d4166ab5522", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e27c8cc931f6b48a732f69b0f9d48d4166ab5522"}], "stats": {"total": 284, "additions": 32, "deletions": 252}, "files": [{"sha": "db505a4cbf9d19155a4ddecb40877b5cc7ee95e6", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/377535881166969dba43794f298170978d797ef6/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/377535881166969dba43794f298170978d797ef6/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=377535881166969dba43794f298170978d797ef6", "patch": "@@ -811,23 +811,23 @@ arm_ldrgbwbu_z_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n \n static enum arm_type_qualifiers\n arm_strsbwbs_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n-  = { qualifier_void, qualifier_unsigned, qualifier_const, qualifier_none};\n+  = { qualifier_unsigned, qualifier_unsigned, qualifier_const, qualifier_none};\n #define STRSBWBS_QUALIFIERS (arm_strsbwbs_qualifiers)\n \n static enum arm_type_qualifiers\n arm_strsbwbu_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n-  = { qualifier_void, qualifier_unsigned, qualifier_const, qualifier_unsigned};\n+  = { qualifier_unsigned, qualifier_unsigned, qualifier_const, qualifier_unsigned};\n #define STRSBWBU_QUALIFIERS (arm_strsbwbu_qualifiers)\n \n static enum arm_type_qualifiers\n arm_strsbwbs_p_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n-  = { qualifier_void, qualifier_unsigned, qualifier_const,\n+  = { qualifier_unsigned, qualifier_unsigned, qualifier_const,\n       qualifier_none, qualifier_unsigned};\n #define STRSBWBS_P_QUALIFIERS (arm_strsbwbs_p_qualifiers)\n \n static enum arm_type_qualifiers\n arm_strsbwbu_p_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n-  = { qualifier_void, qualifier_unsigned, qualifier_const,\n+  = { qualifier_unsigned, qualifier_unsigned, qualifier_const,\n       qualifier_unsigned, qualifier_unsigned};\n #define STRSBWBU_P_QUALIFIERS (arm_strsbwbu_p_qualifiers)\n "}, {"sha": "6c0d1e2e634a32196eb31079166a7733dcd3a4b6", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/377535881166969dba43794f298170978d797ef6/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/377535881166969dba43794f298170978d797ef6/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=377535881166969dba43794f298170978d797ef6", "patch": "@@ -13956,64 +13956,56 @@ __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vstrdq_scatter_base_wb_s64 (uint64x2_t * __addr, const int __offset, int64x2_t __value)\n {\n-  __builtin_mve_vstrdq_scatter_base_wb_sv2di (*__addr, __offset, __value);\n-  __builtin_mve_vstrdq_scatter_base_wb_add_sv2di (*__addr, __offset, *__addr);\n+  *__addr = __builtin_mve_vstrdq_scatter_base_wb_sv2di (*__addr, __offset, __value);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vstrdq_scatter_base_wb_u64 (uint64x2_t * __addr, const int __offset, uint64x2_t __value)\n {\n-  __builtin_mve_vstrdq_scatter_base_wb_uv2di (*__addr, __offset, __value);\n-  __builtin_mve_vstrdq_scatter_base_wb_add_uv2di (*__addr, __offset, *__addr);\n+  *__addr = __builtin_mve_vstrdq_scatter_base_wb_uv2di (*__addr, __offset, __value);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vstrdq_scatter_base_wb_p_s64 (uint64x2_t * __addr, const int __offset, int64x2_t __value, mve_pred16_t __p)\n {\n-  __builtin_mve_vstrdq_scatter_base_wb_p_sv2di (*__addr, __offset, __value, __p);\n-  __builtin_mve_vstrdq_scatter_base_wb_p_add_sv2di (*__addr, __offset, *__addr, __p);\n+ *__addr =  __builtin_mve_vstrdq_scatter_base_wb_p_sv2di (*__addr, __offset, __value, __p);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vstrdq_scatter_base_wb_p_u64 (uint64x2_t * __addr, const int __offset, uint64x2_t __value, mve_pred16_t __p)\n {\n-  __builtin_mve_vstrdq_scatter_base_wb_p_uv2di (*__addr, __offset, __value, __p);\n-  __builtin_mve_vstrdq_scatter_base_wb_p_add_uv2di (*__addr, __offset, *__addr, __p);\n+  *__addr = __builtin_mve_vstrdq_scatter_base_wb_p_uv2di (*__addr, __offset, __value, __p);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vstrwq_scatter_base_wb_p_s32 (uint32x4_t * __addr, const int __offset, int32x4_t __value, mve_pred16_t __p)\n {\n-  __builtin_mve_vstrwq_scatter_base_wb_p_sv4si (*__addr, __offset, __value, __p);\n-  __builtin_mve_vstrwq_scatter_base_wb_p_add_sv4si (*__addr, __offset, *__addr, __p);\n+  *__addr = __builtin_mve_vstrwq_scatter_base_wb_p_sv4si (*__addr, __offset, __value, __p);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vstrwq_scatter_base_wb_p_u32 (uint32x4_t * __addr, const int __offset, uint32x4_t __value, mve_pred16_t __p)\n {\n-  __builtin_mve_vstrwq_scatter_base_wb_p_uv4si (*__addr, __offset, __value, __p);\n-  __builtin_mve_vstrwq_scatter_base_wb_p_add_uv4si (*__addr, __offset, *__addr, __p);\n+  *__addr = __builtin_mve_vstrwq_scatter_base_wb_p_uv4si (*__addr, __offset, __value, __p);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vstrwq_scatter_base_wb_s32 (uint32x4_t * __addr, const int __offset, int32x4_t __value)\n {\n-  __builtin_mve_vstrwq_scatter_base_wb_sv4si (*__addr, __offset, __value);\n-  __builtin_mve_vstrwq_scatter_base_wb_add_sv4si (*__addr, __offset, *__addr);\n+  *__addr = __builtin_mve_vstrwq_scatter_base_wb_sv4si (*__addr, __offset, __value);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vstrwq_scatter_base_wb_u32 (uint32x4_t * __addr, const int __offset, uint32x4_t __value)\n {\n-  __builtin_mve_vstrwq_scatter_base_wb_uv4si (*__addr, __offset, __value);\n-  __builtin_mve_vstrwq_scatter_base_wb_add_uv4si (*__addr, __offset, *__addr);\n+  *__addr = __builtin_mve_vstrwq_scatter_base_wb_uv4si (*__addr, __offset, __value);\n }\n \n __extension__ extern __inline uint8x16_t\n@@ -19128,16 +19120,14 @@ __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vstrwq_scatter_base_wb_f32 (uint32x4_t * __addr, const int __offset, float32x4_t __value)\n {\n-  __builtin_mve_vstrwq_scatter_base_wb_fv4sf (*__addr, __offset, __value);\n-  __builtin_mve_vstrwq_scatter_base_wb_add_fv4sf (*__addr, __offset, *__addr);\n+  *__addr = __builtin_mve_vstrwq_scatter_base_wb_fv4sf (*__addr, __offset, __value);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vstrwq_scatter_base_wb_p_f32 (uint32x4_t * __addr, const int __offset, float32x4_t __value, mve_pred16_t __p)\n {\n-  __builtin_mve_vstrwq_scatter_base_wb_p_fv4sf (*__addr, __offset, __value, __p);\n-  __builtin_mve_vstrwq_scatter_base_wb_p_add_fv4sf (*__addr, __offset, *__addr, __p);\n+  *__addr = __builtin_mve_vstrwq_scatter_base_wb_p_fv4sf (*__addr, __offset, __value, __p);\n }\n \n __extension__ extern __inline float16x8_t"}, {"sha": "f38926ffd8e44f63d25a8fb9bf8f7d8680570ef0", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/377535881166969dba43794f298170978d797ef6/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/377535881166969dba43794f298170978d797ef6/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=377535881166969dba43794f298170978d797ef6", "patch": "@@ -826,19 +826,9 @@ VAR3 (QUADOP_UNONE_UNONE_UNONE_IMM_UNONE, vidupq_m_n_u, v16qi, v8hi, v4si)\n VAR3 (TERNOP_UNONE_UNONE_UNONE_IMM, vdwdupq_n_u, v16qi, v4si, v8hi)\n VAR3 (TERNOP_UNONE_UNONE_UNONE_IMM, viwdupq_n_u, v16qi, v4si, v8hi)\n VAR1 (STRSBWBU, vstrwq_scatter_base_wb_u, v4si)\n-VAR1 (STRSBWBU, vstrwq_scatter_base_wb_add_u, v4si)\n-VAR1 (STRSBWBU, vstrwq_scatter_base_wb_add_s, v4si)\n-VAR1 (STRSBWBU, vstrwq_scatter_base_wb_add_f, v4sf)\n VAR1 (STRSBWBU, vstrdq_scatter_base_wb_u, v2di)\n-VAR1 (STRSBWBU, vstrdq_scatter_base_wb_add_u, v2di)\n-VAR1 (STRSBWBU, vstrdq_scatter_base_wb_add_s, v2di)\n VAR1 (STRSBWBU_P, vstrwq_scatter_base_wb_p_u, v4si)\n-VAR1 (STRSBWBU_P, vstrwq_scatter_base_wb_p_add_u, v4si)\n-VAR1 (STRSBWBU_P, vstrwq_scatter_base_wb_p_add_s, v4si)\n-VAR1 (STRSBWBU_P, vstrwq_scatter_base_wb_p_add_f, v4sf)\n VAR1 (STRSBWBU_P, vstrdq_scatter_base_wb_p_u, v2di)\n-VAR1 (STRSBWBU_P, vstrdq_scatter_base_wb_p_add_u, v2di)\n-VAR1 (STRSBWBU_P, vstrdq_scatter_base_wb_p_add_s, v2di)\n VAR1 (STRSBWBS, vstrwq_scatter_base_wb_s, v4si)\n VAR1 (STRSBWBS, vstrwq_scatter_base_wb_f, v4sf)\n VAR1 (STRSBWBS, vstrdq_scatter_base_wb_s, v2di)"}, {"sha": "5dad38899bedc58e6628a80b8636ba3e33ada314", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 8, "deletions": 188, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/377535881166969dba43794f298170978d797ef6/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/377535881166969dba43794f298170978d797ef6/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=377535881166969dba43794f298170978d797ef6", "patch": "@@ -9700,38 +9700,10 @@\n   [(set_attr \"type\" \"mve_move\")\n    (set_attr \"length\"\"8\")])\n \n-(define_expand \"mve_vstrwq_scatter_base_wb_<supf>v4si\"\n-  [(match_operand:V4SI 0 \"s_register_operand\" \"=w\")\n-   (match_operand:SI 1 \"mve_vldrd_immediate\" \"Ri\")\n-   (match_operand:V4SI 2 \"s_register_operand\" \"w\")\n-   (unspec:V4SI [(const_int 0)] VSTRWSBWBQ)]\n-  \"TARGET_HAVE_MVE\"\n-{\n-  rtx ignore_wb = gen_reg_rtx (V4SImode);\n-  emit_insn (\n-  gen_mve_vstrwq_scatter_base_wb_<supf>v4si_insn (ignore_wb, operands[0],\n-\t\t\t\t\t\t  operands[1], operands[2]));\n-  DONE;\n-})\n-\n-(define_expand \"mve_vstrwq_scatter_base_wb_add_<supf>v4si\"\n-  [(match_operand:V4SI 0 \"s_register_operand\" \"=w\")\n-   (match_operand:SI 1 \"mve_vldrd_immediate\" \"Ri\")\n-   (match_operand:V4SI 2 \"s_register_operand\" \"0\")\n-   (unspec:V4SI [(const_int 0)] VSTRWSBWBQ)]\n-  \"TARGET_HAVE_MVE\"\n-{\n-  rtx ignore_vec = gen_reg_rtx (V4SImode);\n-  emit_insn (\n-  gen_mve_vstrwq_scatter_base_wb_<supf>v4si_insn (operands[0], operands[2],\n-\t\t\t\t\t\t  operands[1], ignore_vec));\n-  DONE;\n-})\n-\n ;;\n-;; [vstrwq_scatter_base_wb_s vstrdq_scatter_base_wb_u]\n+;; [vstrwq_scatter_base_wb_s vstrwq_scatter_base_wb_u]\n ;;\n-(define_insn \"mve_vstrwq_scatter_base_wb_<supf>v4si_insn\"\n+(define_insn \"mve_vstrwq_scatter_base_wb_<supf>v4si\"\n   [(set (mem:BLK (scratch))\n \t(unspec:BLK\n \t\t[(match_operand:V4SI 1 \"s_register_operand\" \"0\")\n@@ -9753,42 +9725,10 @@\n }\n   [(set_attr \"length\" \"4\")])\n \n-(define_expand \"mve_vstrwq_scatter_base_wb_p_<supf>v4si\"\n-  [(match_operand:V4SI 0 \"s_register_operand\" \"=w\")\n-   (match_operand:SI 1 \"mve_vldrd_immediate\" \"Ri\")\n-   (match_operand:V4SI 2 \"s_register_operand\" \"w\")\n-   (match_operand:HI 3 \"vpr_register_operand\")\n-   (unspec:V4SI [(const_int 0)] VSTRWSBWBQ)]\n-  \"TARGET_HAVE_MVE\"\n-{\n-  rtx ignore_wb = gen_reg_rtx (V4SImode);\n-  emit_insn (\n-  gen_mve_vstrwq_scatter_base_wb_p_<supf>v4si_insn (ignore_wb, operands[0],\n-\t\t\t\t\t\t    operands[1], operands[2],\n-\t\t\t\t\t\t    operands[3]));\n-  DONE;\n-})\n-\n-(define_expand \"mve_vstrwq_scatter_base_wb_p_add_<supf>v4si\"\n-  [(match_operand:V4SI 0 \"s_register_operand\" \"=w\")\n-   (match_operand:SI 1 \"mve_vldrd_immediate\" \"Ri\")\n-   (match_operand:V4SI 2 \"s_register_operand\" \"0\")\n-   (match_operand:HI 3 \"vpr_register_operand\")\n-   (unspec:V4SI [(const_int 0)] VSTRWSBWBQ)]\n-  \"TARGET_HAVE_MVE\"\n-{\n-  rtx ignore_vec = gen_reg_rtx (V4SImode);\n-  emit_insn (\n-  gen_mve_vstrwq_scatter_base_wb_p_<supf>v4si_insn (operands[0], operands[2],\n-\t\t\t\t\t\t    operands[1], ignore_vec,\n-\t\t\t\t\t\t    operands[3]));\n-  DONE;\n-})\n-\n ;;\n ;; [vstrwq_scatter_base_wb_p_s vstrwq_scatter_base_wb_p_u]\n ;;\n-(define_insn \"mve_vstrwq_scatter_base_wb_p_<supf>v4si_insn\"\n+(define_insn \"mve_vstrwq_scatter_base_wb_p_<supf>v4si\"\n  [(set (mem:BLK (scratch))\n        (unspec:BLK\n \t\t[(match_operand:V4SI 1 \"s_register_operand\" \"0\")\n@@ -9811,38 +9751,10 @@\n }\n   [(set_attr \"length\" \"8\")])\n \n-(define_expand \"mve_vstrwq_scatter_base_wb_fv4sf\"\n-  [(match_operand:V4SI 0 \"s_register_operand\" \"=w\")\n-   (match_operand:SI 1 \"mve_vldrd_immediate\" \"Ri\")\n-   (match_operand:V4SF 2 \"s_register_operand\" \"w\")\n-   (unspec:V4SI [(const_int 0)] VSTRWQSBWB_F)]\n-  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n-{\n-  rtx ignore_wb = gen_reg_rtx (V4SImode);\n-  emit_insn (\n-  gen_mve_vstrwq_scatter_base_wb_fv4sf_insn (ignore_wb,operands[0],\n-\t\t\t\t\t     operands[1], operands[2]));\n-  DONE;\n-})\n-\n-(define_expand \"mve_vstrwq_scatter_base_wb_add_fv4sf\"\n-  [(match_operand:V4SI 0 \"s_register_operand\" \"=w\")\n-   (match_operand:SI 1 \"mve_vldrd_immediate\" \"Ri\")\n-   (match_operand:V4SI 2 \"s_register_operand\" \"0\")\n-   (unspec:V4SI [(const_int 0)] VSTRWQSBWB_F)]\n-  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n-{\n-  rtx ignore_vec = gen_reg_rtx (V4SFmode);\n-  emit_insn (\n-  gen_mve_vstrwq_scatter_base_wb_fv4sf_insn (operands[0], operands[2],\n-\t\t\t\t\t     operands[1], ignore_vec));\n-  DONE;\n-})\n-\n ;;\n ;; [vstrwq_scatter_base_wb_f]\n ;;\n-(define_insn \"mve_vstrwq_scatter_base_wb_fv4sf_insn\"\n+(define_insn \"mve_vstrwq_scatter_base_wb_fv4sf\"\n  [(set (mem:BLK (scratch))\n        (unspec:BLK\n \t\t[(match_operand:V4SI 1 \"s_register_operand\" \"0\")\n@@ -9864,42 +9776,10 @@\n }\n   [(set_attr \"length\" \"4\")])\n \n-(define_expand \"mve_vstrwq_scatter_base_wb_p_fv4sf\"\n-  [(match_operand:V4SI 0 \"s_register_operand\" \"=w\")\n-   (match_operand:SI 1 \"mve_vldrd_immediate\" \"Ri\")\n-   (match_operand:V4SF 2 \"s_register_operand\" \"w\")\n-   (match_operand:HI 3 \"vpr_register_operand\")\n-   (unspec:V4SI [(const_int 0)] VSTRWQSBWB_F)]\n-  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n-{\n-  rtx ignore_wb = gen_reg_rtx (V4SImode);\n-  emit_insn (\n-  gen_mve_vstrwq_scatter_base_wb_p_fv4sf_insn (ignore_wb, operands[0],\n-\t\t\t\t\t       operands[1], operands[2],\n-\t\t\t\t\t       operands[3]));\n-  DONE;\n-})\n-\n-(define_expand \"mve_vstrwq_scatter_base_wb_p_add_fv4sf\"\n-  [(match_operand:V4SI 0 \"s_register_operand\" \"=w\")\n-   (match_operand:SI 1 \"mve_vldrd_immediate\" \"Ri\")\n-   (match_operand:V4SI 2 \"s_register_operand\" \"0\")\n-   (match_operand:HI 3 \"vpr_register_operand\")\n-   (unspec:V4SI [(const_int 0)] VSTRWQSBWB_F)]\n-  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n-{\n-  rtx ignore_vec = gen_reg_rtx (V4SFmode);\n-  emit_insn (\n-  gen_mve_vstrwq_scatter_base_wb_p_fv4sf_insn (operands[0], operands[2],\n-\t\t\t\t\t       operands[1], ignore_vec,\n-\t\t\t\t\t       operands[3]));\n-  DONE;\n-})\n-\n ;;\n ;; [vstrwq_scatter_base_wb_p_f]\n ;;\n-(define_insn \"mve_vstrwq_scatter_base_wb_p_fv4sf_insn\"\n+(define_insn \"mve_vstrwq_scatter_base_wb_p_fv4sf\"\n  [(set (mem:BLK (scratch))\n        (unspec:BLK\n \t\t[(match_operand:V4SI 1 \"s_register_operand\" \"0\")\n@@ -9922,38 +9802,10 @@\n }\n   [(set_attr \"length\" \"8\")])\n \n-(define_expand \"mve_vstrdq_scatter_base_wb_<supf>v2di\"\n-  [(match_operand:V2DI 0 \"s_register_operand\" \"=w\")\n-   (match_operand:SI 1 \"mve_vldrd_immediate\" \"Ri\")\n-   (match_operand:V2DI 2 \"s_register_operand\" \"w\")\n-   (unspec:V2DI [(const_int 0)] VSTRDSBWBQ)]\n-  \"TARGET_HAVE_MVE\"\n-{\n-  rtx ignore_wb = gen_reg_rtx (V2DImode);\n-  emit_insn (\n-  gen_mve_vstrdq_scatter_base_wb_<supf>v2di_insn (ignore_wb, operands[0],\n-\t\t\t\t\t\t  operands[1], operands[2]));\n-  DONE;\n-})\n-\n-(define_expand \"mve_vstrdq_scatter_base_wb_add_<supf>v2di\"\n-  [(match_operand:V2DI 0 \"s_register_operand\" \"=w\")\n-   (match_operand:SI 1 \"mve_vldrd_immediate\" \"Ri\")\n-   (match_operand:V2DI 2 \"s_register_operand\" \"0\")\n-   (unspec:V2DI [(const_int 0)] VSTRDSBWBQ)]\n-  \"TARGET_HAVE_MVE\"\n-{\n-  rtx ignore_vec = gen_reg_rtx (V2DImode);\n-  emit_insn (\n-  gen_mve_vstrdq_scatter_base_wb_<supf>v2di_insn (operands[0], operands[2],\n-\t\t\t\t\t\t  operands[1], ignore_vec));\n-  DONE;\n-})\n-\n ;;\n ;; [vstrdq_scatter_base_wb_s vstrdq_scatter_base_wb_u]\n ;;\n-(define_insn \"mve_vstrdq_scatter_base_wb_<supf>v2di_insn\"\n+(define_insn \"mve_vstrdq_scatter_base_wb_<supf>v2di\"\n   [(set (mem:BLK (scratch))\n \t(unspec:BLK\n \t\t[(match_operand:V2DI 1 \"s_register_operand\" \"0\")\n@@ -9975,42 +9827,10 @@\n }\n   [(set_attr \"length\" \"4\")])\n \n-(define_expand \"mve_vstrdq_scatter_base_wb_p_<supf>v2di\"\n-  [(match_operand:V2DI 0 \"s_register_operand\" \"=w\")\n-   (match_operand:SI 1 \"mve_vldrd_immediate\" \"Ri\")\n-   (match_operand:V2DI 2 \"s_register_operand\" \"w\")\n-   (match_operand:HI 3 \"vpr_register_operand\")\n-   (unspec:V2DI [(const_int 0)] VSTRDSBWBQ)]\n-  \"TARGET_HAVE_MVE\"\n-{\n-  rtx ignore_wb = gen_reg_rtx (V2DImode);\n-  emit_insn (\n-  gen_mve_vstrdq_scatter_base_wb_p_<supf>v2di_insn (ignore_wb, operands[0],\n-\t\t\t\t\t\t    operands[1], operands[2],\n-\t\t\t\t\t\t    operands[3]));\n-  DONE;\n-})\n-\n-(define_expand \"mve_vstrdq_scatter_base_wb_p_add_<supf>v2di\"\n-  [(match_operand:V2DI 0 \"s_register_operand\" \"=w\")\n-   (match_operand:SI 1 \"mve_vldrd_immediate\" \"Ri\")\n-   (match_operand:V2DI 2 \"s_register_operand\" \"0\")\n-   (match_operand:HI 3 \"vpr_register_operand\")\n-   (unspec:V2DI [(const_int 0)] VSTRDSBWBQ)]\n-  \"TARGET_HAVE_MVE\"\n-{\n-  rtx ignore_vec = gen_reg_rtx (V2DImode);\n-  emit_insn (\n-  gen_mve_vstrdq_scatter_base_wb_p_<supf>v2di_insn (operands[0], operands[2],\n-\t\t\t\t\t\t    operands[1], ignore_vec,\n-\t\t\t\t\t\t    operands[3]));\n-  DONE;\n-})\n-\n ;;\n ;; [vstrdq_scatter_base_wb_p_s vstrdq_scatter_base_wb_p_u]\n ;;\n-(define_insn \"mve_vstrdq_scatter_base_wb_p_<supf>v2di_insn\"\n+(define_insn \"mve_vstrdq_scatter_base_wb_p_<supf>v2di\"\n   [(set (mem:BLK (scratch))\n \t(unspec:BLK\n \t\t[(match_operand:V2DI 1 \"s_register_operand\" \"0\")\n@@ -10028,7 +9848,7 @@\n    ops[0] = operands[1];\n    ops[1] = operands[2];\n    ops[2] = operands[3];\n-   output_asm_insn (\"vpst\\;\\tvstrdt.u64\\t%q2, [%q0, %1]!\",ops);\n+   output_asm_insn (\"vpst;vstrdt.u64\\t%q2, [%q0, %1]!\",ops);\n    return \"\";\n }\n   [(set_attr \"length\" \"8\")])"}, {"sha": "319188b706fb737aef49dfd3a6e64545a63f2087", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_wb_p_s64.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/377535881166969dba43794f298170978d797ef6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_wb_p_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/377535881166969dba43794f298170978d797ef6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_wb_p_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_wb_p_s64.c?ref=377535881166969dba43794f298170978d797ef6", "patch": "@@ -10,12 +10,10 @@ foo (uint64x2_t * addr, const int offset, int64x2_t value, mve_pred16_t p)\n   vstrdq_scatter_base_wb_p_s64 (addr, 8, value, p);\n }\n \n-/* { dg-final { scan-assembler \"vstrdt.u64\"  }  } */\n-\n void\n foo1 (uint64x2_t * addr, const int offset, int64x2_t value, mve_pred16_t p)\n {\n   vstrdq_scatter_base_wb_p (addr, 8, value, p);\n }\n \n-/* { dg-final { scan-assembler \"vstrdt.u64\"  }  } */\n+/* { dg-final { scan-assembler-times \"vstrdt.u64\\tq\\[0-9\\]+, \\\\\\[q\\[0-9\\]+, #\\[0-9\\]+\\\\\\]!\" 2 } } */"}, {"sha": "940b5421c840a1841d7e018abeef2342ab653f1b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_wb_p_u64.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/377535881166969dba43794f298170978d797ef6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_wb_p_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/377535881166969dba43794f298170978d797ef6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_wb_p_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_wb_p_u64.c?ref=377535881166969dba43794f298170978d797ef6", "patch": "@@ -10,12 +10,10 @@ foo (uint64x2_t * addr, const int offset, uint64x2_t value, mve_pred16_t p)\n   vstrdq_scatter_base_wb_p_u64 (addr, 8, value, p);\n }\n \n-/* { dg-final { scan-assembler \"vstrdt.u64\"  }  } */\n-\n void\n foo1 (uint64x2_t * addr, const int offset, uint64x2_t value, mve_pred16_t p)\n {\n   vstrdq_scatter_base_wb_p (addr, 8, value, p);\n }\n \n-/* { dg-final { scan-assembler \"vstrdt.u64\"  }  } */\n+/* { dg-final { scan-assembler-times \"vstrdt.u64\\tq\\[0-9\\]+, \\\\\\[q\\[0-9\\]+, #\\[0-9\\]+\\\\\\]!\" 2 } } */"}, {"sha": "33926d5c9e2e85188b222a9c903a966c52195fa5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_wb_s64.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/377535881166969dba43794f298170978d797ef6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_wb_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/377535881166969dba43794f298170978d797ef6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_wb_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_wb_s64.c?ref=377535881166969dba43794f298170978d797ef6", "patch": "@@ -10,12 +10,10 @@ foo (uint64x2_t * addr, const int offset, int64x2_t value)\n   vstrdq_scatter_base_wb_s64 (addr, 8, value);\n }\n \n-/* { dg-final { scan-assembler \"vstrd.u64\"  }  } */\n-\n void\n foo1 (uint64x2_t * addr, const int offset, int64x2_t value)\n {\n   vstrdq_scatter_base_wb (addr, 8, value);\n }\n \n-/* { dg-final { scan-assembler \"vstrd.u64\"  }  } */\n+/* { dg-final { scan-assembler-times \"vstrd.u64\\tq\\[0-9\\]+, \\\\\\[q\\[0-9\\]+, #\\[0-9\\]+\\\\\\]!\" 2 } } */"}, {"sha": "b7ffcf9b5dd13db0f4785c3ee55231ec2b75d240", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrdq_scatter_base_wb_u64.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/377535881166969dba43794f298170978d797ef6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_wb_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/377535881166969dba43794f298170978d797ef6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_wb_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrdq_scatter_base_wb_u64.c?ref=377535881166969dba43794f298170978d797ef6", "patch": "@@ -10,12 +10,10 @@ foo (uint64x2_t * addr, const int offset, uint64x2_t value)\n   vstrdq_scatter_base_wb_u64 (addr, 8, value);\n }\n \n-/* { dg-final { scan-assembler \"vstrd.u64\"  }  } */\n-\n void\n foo1 (uint64x2_t * addr, const int offset, uint64x2_t value)\n {\n   vstrdq_scatter_base_wb (addr, 8, value);\n }\n \n-/* { dg-final { scan-assembler \"vstrd.u64\"  }  } */\n+/* { dg-final { scan-assembler-times \"vstrd.u64\\tq\\[0-9\\]+, \\\\\\[q\\[0-9\\]+, #\\[0-9\\]+\\\\\\]!\" 2 } } */"}, {"sha": "b2cc6e555aeb0ce5415cefe2970b8d7a711661f3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_f32.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/377535881166969dba43794f298170978d797ef6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/377535881166969dba43794f298170978d797ef6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_f32.c?ref=377535881166969dba43794f298170978d797ef6", "patch": "@@ -10,12 +10,10 @@ foo (uint32x4_t * addr, const int offset, float32x4_t value)\n   vstrwq_scatter_base_wb_f32 (addr, 8, value);\n }\n \n-/* { dg-final { scan-assembler \"vstrw.u32\"  }  } */\n-\n void\n foo1 (uint32x4_t * addr, const int offset, float32x4_t value)\n {\n   vstrwq_scatter_base_wb (addr, 8, value);\n }\n \n-/* { dg-final { scan-assembler \"vstrw.u32\"  }  } */\n+/* { dg-final { scan-assembler-times \"vstrw.u32\\tq\\[0-9\\]+, \\\\\\[q\\[0-9\\]+, #\\[0-9\\]+\\\\\\]!\" 2 } } */"}, {"sha": "4befd49d7b92b0fc4de4988db91f9eec7b3d33ec", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_p_f32.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/377535881166969dba43794f298170978d797ef6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_p_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/377535881166969dba43794f298170978d797ef6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_p_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_p_f32.c?ref=377535881166969dba43794f298170978d797ef6", "patch": "@@ -10,12 +10,10 @@ foo (uint32x4_t * addr, const int offset, float32x4_t value, mve_pred16_t p)\n   vstrwq_scatter_base_wb_p_f32 (addr, 8, value, p);\n }\n \n-/* { dg-final { scan-assembler \"vstrwt.u32\"  }  } */\n-\n void\n foo1 (uint32x4_t * addr, const int offset, float32x4_t value, mve_pred16_t p)\n {\n   vstrwq_scatter_base_wb_p (addr, 8, value, p);\n }\n \n-/* { dg-final { scan-assembler \"vstrwt.u32\"  }  } */\n+/* { dg-final { scan-assembler-times \"vstrwt.u32\\tq\\[0-9\\]+, \\\\\\[q\\[0-9\\]+, #\\[0-9\\]+\\\\\\]!\" 2 } } */"}, {"sha": "dfb1827c4f08232b63ceccf89b2604fec2890a3f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_p_s32.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/377535881166969dba43794f298170978d797ef6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/377535881166969dba43794f298170978d797ef6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_p_s32.c?ref=377535881166969dba43794f298170978d797ef6", "patch": "@@ -10,12 +10,10 @@ foo (uint32x4_t * addr, const int offset, int32x4_t value, mve_pred16_t p)\n   vstrwq_scatter_base_wb_p_s32 (addr, 8, value, p);\n }\n \n-/* { dg-final { scan-assembler \"vstrwt.u32\"  }  } */\n-\n void\n foo1 (uint32x4_t * addr, const int offset, int32x4_t value, mve_pred16_t p)\n {\n   vstrwq_scatter_base_wb_p (addr, 8, value, p);\n }\n \n-/* { dg-final { scan-assembler \"vstrwt.u32\"  }  } */\n+/* { dg-final { scan-assembler-times \"vstrwt.u32\\tq\\[0-9\\]+, \\\\\\[q\\[0-9\\]+, #\\[0-9\\]+\\\\\\]!\" 2 } } */"}, {"sha": "4eb78c600be9749fca86e289c67e388f78753532", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_p_u32.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/377535881166969dba43794f298170978d797ef6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/377535881166969dba43794f298170978d797ef6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_p_u32.c?ref=377535881166969dba43794f298170978d797ef6", "patch": "@@ -10,12 +10,10 @@ foo (uint32x4_t * addr, const int offset, uint32x4_t value, mve_pred16_t p)\n   vstrwq_scatter_base_wb_p_u32 (addr, 8, value, p);\n }\n \n-/* { dg-final { scan-assembler \"vstrwt.u32\"  }  } */\n-\n void\n foo1 (uint32x4_t * addr, const int offset, uint32x4_t value, mve_pred16_t p)\n {\n   vstrwq_scatter_base_wb_p (addr, 8, value, p);\n }\n \n-/* { dg-final { scan-assembler \"vstrwt.u32\"  }  } */\n+/* { dg-final { scan-assembler-times \"vstrwt.u32\\tq\\[0-9\\]+, \\\\\\[q\\[0-9\\]+, #\\[0-9\\]+\\\\\\]!\" 2 } } */"}, {"sha": "618dbaf5aa69421ee80aca62904ce915306c54fd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_s32.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/377535881166969dba43794f298170978d797ef6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/377535881166969dba43794f298170978d797ef6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_s32.c?ref=377535881166969dba43794f298170978d797ef6", "patch": "@@ -10,12 +10,10 @@ foo (uint32x4_t * addr, const int offset, int32x4_t value)\n   vstrwq_scatter_base_wb_s32 (addr, 8, value);\n }\n \n-/* { dg-final { scan-assembler \"vstrw.u32\"  }  } */\n-\n void\n foo1 (uint32x4_t * addr, const int offset, int32x4_t value)\n {\n   vstrwq_scatter_base_wb (addr, 8, value);\n }\n \n-/* { dg-final { scan-assembler \"vstrw.u32\"  }  } */\n+/* { dg-final { scan-assembler-times \"vstrw.u32\\tq\\[0-9\\]+, \\\\\\[q\\[0-9\\]+, #\\[0-9\\]+\\\\\\]!\" 2 } } */"}, {"sha": "912a4590cf54b10a91caee8d4ccc24ce59ab7950", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_wb_u32.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/377535881166969dba43794f298170978d797ef6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/377535881166969dba43794f298170978d797ef6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_wb_u32.c?ref=377535881166969dba43794f298170978d797ef6", "patch": "@@ -10,12 +10,10 @@ foo (uint32x4_t * addr, uint32x4_t value)\n   vstrwq_scatter_base_wb_u32 (addr, 8, value);\n }\n \n-/* { dg-final { scan-assembler \"vstrw.u32\"  }  } */\n-\n void\n foo1 (uint32x4_t * addr, uint32x4_t value)\n {\n   vstrwq_scatter_base_wb (addr, 8, value);\n }\n \n-/* { dg-final { scan-assembler \"vstrw.u32\"  }  } */\n+/* { dg-final { scan-assembler-times \"vstrw.u32\\tq\\[0-9\\]+, \\\\\\[q\\[0-9\\]+, #\\[0-9\\]+\\\\\\]!\" 2 } } */"}]}