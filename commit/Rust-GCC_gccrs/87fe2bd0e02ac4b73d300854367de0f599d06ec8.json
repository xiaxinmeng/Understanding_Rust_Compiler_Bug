{"sha": "87fe2bd0e02ac4b73d300854367de0f599d06ec8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdmZTJiZDBlMDJhYzRiNzNkMzAwODU0MzY3ZGUwZjU5OWQwNmVjOA==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-08-20T22:23:45Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-08-20T22:23:45Z"}, "message": "re PR middle-end/179 (-Wuninitialized missing warning with &var)\n\n2008-08-21  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\tPR middle-end/179\n\t* tree-ssa.c (warn_uninit): Do not warn for variables that can be\n\tinitialized outside the current module.\n\t(warn_uninitialized_var): Ignore left-hand side when walking the\n\ttrees. Ignore address expressions. Examine VUSE operands in gimple\n\tstatements with a variable declaration on the right-hand side.\ntestsuite/\n\t* gcc.dg/uninit-6.c (make_something): Remove XFAIL.\n\t* gcc.dg/uninit-6-O0.c (make_something): Remove XFAIL.\n\t* gcc.dg/uninit-B.c (baz): Remove XFAIL.\n\t* gcc.dg/uninit-B-2.c: New.\n\t* gcc.dg/uninit-B-O0-2.c: New.\n\t* gcc.dg/uninit-pr19430-O0.c: New.\n\t* gcc.dg/uninit-pr19430.c: New.\n\t* gcc.dg/uninit-pr19430-2.c: New.\n\nFrom-SVN: r139347", "tree": {"sha": "660ae75a4cdf11380c42d11680fdb1c7ead51a82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/660ae75a4cdf11380c42d11680fdb1c7ead51a82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87fe2bd0e02ac4b73d300854367de0f599d06ec8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87fe2bd0e02ac4b73d300854367de0f599d06ec8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87fe2bd0e02ac4b73d300854367de0f599d06ec8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87fe2bd0e02ac4b73d300854367de0f599d06ec8/comments", "author": null, "committer": null, "parents": [{"sha": "7735154d75efdab60161db87b086ee2c3572d512", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7735154d75efdab60161db87b086ee2c3572d512", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7735154d75efdab60161db87b086ee2c3572d512"}], "stats": {"total": 205, "additions": 202, "deletions": 3}, "files": [{"sha": "3621422d627bec2463b71f6926bb26f852413552", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87fe2bd0e02ac4b73d300854367de0f599d06ec8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87fe2bd0e02ac4b73d300854367de0f599d06ec8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87fe2bd0e02ac4b73d300854367de0f599d06ec8", "patch": "@@ -1,3 +1,12 @@\n+2008-08-21  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR middle-end/179\n+\t* tree-ssa.c (warn_uninit): Do not warn for variables that can be\n+\tinitialized outside the current module.\n+\t(warn_uninitialized_var): Ignore left-hand side when walking the\n+\ttrees. Ignore address expressions. Examine VUSE operands in gimple\n+\tstatements with a variable declaration on the right-hand side.\n+\n 2008-08-20  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \tPR bootstrap/37155"}, {"sha": "e8a0678a37bd39bdb3b716ec6ca23fec943533da", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87fe2bd0e02ac4b73d300854367de0f599d06ec8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87fe2bd0e02ac4b73d300854367de0f599d06ec8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=87fe2bd0e02ac4b73d300854367de0f599d06ec8", "patch": "@@ -1,3 +1,15 @@\n+2008-08-21  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR middle-end/179\n+\t* gcc.dg/uninit-6.c (make_something): Remove XFAIL.\n+\t* gcc.dg/uninit-6-O0.c (make_something): Remove XFAIL.\n+\t* gcc.dg/uninit-B.c (baz): Remove XFAIL.\n+\t* gcc.dg/uninit-B-2.c: New.\n+\t* gcc.dg/uninit-B-O0-2.c: New.\n+\t* gcc.dg/uninit-pr19430-O0.c: New.\n+\t* gcc.dg/uninit-pr19430.c: New.\n+\t* gcc.dg/uninit-pr19430-2.c: New.\n+\n 2008-08-20  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR c++/35158"}, {"sha": "f4588305ffa3aaf6b578b4bfd57cfaf3b981e78c", "filename": "gcc/testsuite/gcc.dg/uninit-6-O0.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87fe2bd0e02ac4b73d300854367de0f599d06ec8/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-6-O0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87fe2bd0e02ac4b73d300854367de0f599d06ec8/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-6-O0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-6-O0.c?ref=87fe2bd0e02ac4b73d300854367de0f599d06ec8", "patch": "@@ -39,7 +39,7 @@ make_something(int a, int b, int c)\n     rv = malloc (sizeof (struct tree));\n     rv->car = 0;\n \n-    APPEND(rv, field, INTEGER_T, a);  /* { dg-bogus \"field\" \"uninitialized variable warning\" { xfail *-*-* } } */\n+    APPEND(rv, field, INTEGER_T, a);  /* { dg-bogus \"field\" \"uninitialized variable warning\" } */\n     APPEND(rv, field, PTR_T, b);\n     APPEND(rv, field, INTEGER_T, c);\n "}, {"sha": "009e124fccf8972f22ba720224f7400f22f85c89", "filename": "gcc/testsuite/gcc.dg/uninit-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87fe2bd0e02ac4b73d300854367de0f599d06ec8/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87fe2bd0e02ac4b73d300854367de0f599d06ec8/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-6.c?ref=87fe2bd0e02ac4b73d300854367de0f599d06ec8", "patch": "@@ -39,7 +39,7 @@ make_something(int a, int b, int c)\n     rv = malloc (sizeof (struct tree));\n     rv->car = 0;\n \n-    APPEND(rv, field, INTEGER_T, a);  /* { dg-bogus \"field\" \"uninitialized variable warning\" { xfail *-*-* } } */\n+    APPEND(rv, field, INTEGER_T, a);  /* { dg-bogus \"field\" \"uninitialized variable warning\" } */\n     APPEND(rv, field, PTR_T, b);\n     APPEND(rv, field, INTEGER_T, c);\n "}, {"sha": "ee8a885817bd21a78e9ad8c9084820c9a7e34f23", "filename": "gcc/testsuite/gcc.dg/uninit-B-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87fe2bd0e02ac4b73d300854367de0f599d06ec8/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-B-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87fe2bd0e02ac4b73d300854367de0f599d06ec8/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-B-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-B-2.c?ref=87fe2bd0e02ac4b73d300854367de0f599d06ec8", "patch": "@@ -0,0 +1,16 @@\n+/* Origin: PR c/179 inverse of uninit-B-O0.c, we should not warn.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wuninitialized\" } */\n+extern void foo (int *);\n+extern void bar (int);\n+\n+void\n+baz (void)\n+{\n+  int i;\n+  foo (&i); /* { dg-bogus \"is used uninitialized\" \"uninit i warning\" } */\n+  if (i) \n+    bar (i);\n+}\n+\n+"}, {"sha": "dfa3de97e0ca89644e986edff7e2ba9b21f97b5d", "filename": "gcc/testsuite/gcc.dg/uninit-B-O0-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87fe2bd0e02ac4b73d300854367de0f599d06ec8/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-B-O0-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87fe2bd0e02ac4b73d300854367de0f599d06ec8/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-B-O0-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-B-O0-2.c?ref=87fe2bd0e02ac4b73d300854367de0f599d06ec8", "patch": "@@ -0,0 +1,16 @@\n+/* Origin: PR c/179 inverse of uninit-B-O0.c, we should not warn.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -Wuninitialized\" } */\n+extern void foo (int *);\n+extern void bar (int);\n+\n+void\n+baz (void)\n+{\n+  int i;\n+  foo (&i); /* { dg-bogus \"is used uninitialized\" \"uninit i warning\" } */\n+  if (i) \n+    bar (i);\n+}\n+\n+"}, {"sha": "adb1461d951087ee9658887be607d73e9b51b1b1", "filename": "gcc/testsuite/gcc.dg/uninit-B.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87fe2bd0e02ac4b73d300854367de0f599d06ec8/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-B.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87fe2bd0e02ac4b73d300854367de0f599d06ec8/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-B.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-B.c?ref=87fe2bd0e02ac4b73d300854367de0f599d06ec8", "patch": "@@ -9,7 +9,7 @@ void\n baz (void)\n {\n   int i;\n-  if (i) /* { dg-warning \"uninit\" \"uninit i warning\" { xfail *-*-* } } */\n+  if (i) /* { dg-warning \"is used uninitialized\" \"uninit i warning\" } */\n     bar (i);\n   foo (&i);\n }"}, {"sha": "361a6a0bbdab5878d7c641374894947587a1738a", "filename": "gcc/testsuite/gcc.dg/uninit-pr19430-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87fe2bd0e02ac4b73d300854367de0f599d06ec8/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr19430-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87fe2bd0e02ac4b73d300854367de0f599d06ec8/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr19430-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr19430-2.c?ref=87fe2bd0e02ac4b73d300854367de0f599d06ec8", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wuninitialized\" } */\n+\n+int  *p, *q;\n+\n+int foo (int b)\n+{\n+  int i, j = 0;\n+  int *x;\n+  p = &i;\n+  q = &j;\n+  if (b)\n+    x = p;\n+  else\n+    x = q;\n+  return *x;\n+}\n+"}, {"sha": "4ce258653d6d55435577d8897d8a8deb5524bd00", "filename": "gcc/testsuite/gcc.dg/uninit-pr19430-O0.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87fe2bd0e02ac4b73d300854367de0f599d06ec8/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr19430-O0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87fe2bd0e02ac4b73d300854367de0f599d06ec8/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr19430-O0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr19430-O0.c?ref=87fe2bd0e02ac4b73d300854367de0f599d06ec8", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -Wuninitialized\" } */\n+extern int bar (int);\n+extern void baz (int *);\n+\n+int\n+foo (int i)\n+{\n+  int j; /* { dg-warning \"'j' may be used uninitialized in this function\" \"uninitialized\" { xfail *-*-* } 9 } */\n+\n+  if (bar (i)) {\n+    baz (&j);\n+  } else {\n+  }\n+\n+  return j;\n+}\n+\n+\n+int foo2( void ) {\n+  int rc;  /* { dg-warning \"'rc' is used uninitialized in this function\" \"uninitialized\" { xfail *-*-* } 21 } */\n+  return rc;\n+  *&rc = 0;\n+}\n+\n+extern int printf(const char *, ...);\n+void frob(int *pi);\n+\n+int main(void)\n+{\n+  int i; \n+  printf(\"i = %d\\n\", i); /* { dg-warning \"'i' is used uninitialized in this function\" \"uninitialized\" { xfail *-*-* } 32 } */\n+  frob(&i);\n+\n+  return 0;\n+}\n+\n+void foo3(int*);\n+void bar3(void) { \n+  int x; \n+  if(x) /* { dg-warning \"'x' is used uninitialized in this function\" \"uninitialized\" { xfail *-*-* } 41 } */\n+    foo3(&x); \n+}"}, {"sha": "ecf9c0096275ca7d040b86e3b1568365f0fc1b0a", "filename": "gcc/testsuite/gcc.dg/uninit-pr19430.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87fe2bd0e02ac4b73d300854367de0f599d06ec8/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr19430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87fe2bd0e02ac4b73d300854367de0f599d06ec8/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr19430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr19430.c?ref=87fe2bd0e02ac4b73d300854367de0f599d06ec8", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wuninitialized\" } */\n+extern int bar (int);\n+extern void baz (int *);\n+int\n+foo (int i)\n+{\n+  int j; /* { dg-warning \"'j' may be used uninitialized in this function\" \"uninitialized\" { xfail *-*-* } 8 } */\n+\n+  if (bar (i)) { \n+    baz (&j);\n+  } else {\n+  }\n+\n+  return j;\n+}\n+\n+\n+\n+int foo2( void ) {\n+  int rc;  /* { dg-warning \"'rc' is used uninitialized in this function\" } */\n+  return rc;\n+  *&rc = 0;\n+}\n+\n+extern int printf(const char *, ...);\n+void frob(int *pi);\n+\n+int main(void)\n+{\n+  int i; \n+  printf(\"i = %d\\n\", i); /* { dg-warning \"'i' is used uninitialized in this function\" } */\n+  frob(&i);\n+\n+  return 0;\n+}\n+\n+void foo3(int*);\n+void bar3(void) { \n+  int x; \n+  if(x) /* { dg-warning \"'x' is used uninitialized in this function\" \"uninitialized\" } */\n+    foo3(&x); \n+}"}, {"sha": "eed15c6773f7f03067e848f656123577572677a6", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87fe2bd0e02ac4b73d300854367de0f599d06ec8/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87fe2bd0e02ac4b73d300854367de0f599d06ec8/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=87fe2bd0e02ac4b73d300854367de0f599d06ec8", "patch": "@@ -1411,6 +1411,10 @@ warn_uninit (tree t, const char *gmsgid, void *data)\n   if (TREE_NO_WARNING (var))\n     return;\n \n+  /* Do not warn if it can be initialized outside this module.  */\n+  if (is_global_var (var))\n+    return;\n+  \n   location = (context != NULL && gimple_has_location (context))\n \t     ? gimple_location (context)\n \t     : DECL_SOURCE_LOCATION (var);\n@@ -1443,8 +1447,46 @@ warn_uninitialized_var (tree *tp, int *walk_subtrees, void *data_)\n   struct walk_data *data = (struct walk_data *) wi->info;\n   tree t = *tp;\n \n+  /* We do not care about LHS.  */\n+  if (wi->is_lhs)\n+    return NULL_TREE;\n+\n   switch (TREE_CODE (t))\n     {\n+    case ADDR_EXPR:\n+      /* Taking the address of an uninitialized variable does not\n+\t count as using it.  */\n+      *walk_subtrees = 0;\n+      break;\n+\n+    case VAR_DECL:\n+      {\n+\t/* A VAR_DECL in the RHS of a gimple statement may mean that\n+\t   this variable is loaded from memory.  */\n+\tuse_operand_p vuse;\n+\ttree op;\n+\n+\t/* If there is not gimple stmt, \n+\t   or alias information has not been computed,\n+\t   then we cannot check VUSE ops.  */\n+\tif (data->stmt == NULL\n+            || !gimple_aliases_computed_p (cfun))\n+\t  return NULL_TREE;\n+\n+\tvuse = SINGLE_SSA_USE_OPERAND (data->stmt, SSA_OP_VUSE);\n+\tif (vuse == NULL_USE_OPERAND_P)\n+\t    return NULL_TREE;\n+\n+\top = USE_FROM_PTR (vuse);\n+\tif (t != SSA_NAME_VAR (op) \n+\t    || !SSA_NAME_IS_DEFAULT_DEF (op))\n+\t  return NULL_TREE;\n+\t/* If this is a VUSE of t and it is the default definition,\n+\t   then warn about op.  */\n+\tt = op;\n+\t/* Fall through into SSA_NAME.  */\n+      }\n+\n     case SSA_NAME:\n       /* We only do data flow with SSA_NAMEs, so that's all we\n \t can warn about.  */"}]}