{"sha": "b56119876b871d6eb330fa06bb6ea16f32d5b68a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU2MTE5ODc2Yjg3MWQ2ZWIzMzBmYTA2YmI2ZWExNmYzMmQ1YjY4YQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-05-28T12:48:54Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-05-28T12:48:54Z"}, "message": "lto-wrapper.c (run_gcc): With -save-temps generate a user-visible ltrans filename.\n\n2010-05-28  Richard Guenther  <rguenther@suse.de>\n\n\t* lto-wrapper.c (run_gcc): With -save-temps generate a\n\tuser-visible ltrans filename.  Fixup ltrans unit numbering.\n\n\tlto/\n\t* lto.c (prefix_name_with_star): Removed.\n\t(strip_extension): Likewise.\n\t(get_filename_for_set): Likewise.\n\t(lto_write_ltrans_list): Fold into ...\n\t(lto_wpa_write_files): ... this.  Name LTRANS units\n\tby suffixing the ltrans output list filename.\n\t(do_whole_program_analysis): Adjust.\n\nFrom-SVN: r159967", "tree": {"sha": "5aa4ad3639ee9491cd94586d51f36ed76ad99dc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5aa4ad3639ee9491cd94586d51f36ed76ad99dc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b56119876b871d6eb330fa06bb6ea16f32d5b68a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b56119876b871d6eb330fa06bb6ea16f32d5b68a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b56119876b871d6eb330fa06bb6ea16f32d5b68a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b56119876b871d6eb330fa06bb6ea16f32d5b68a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d4048208a4c81eca9372664003b09922b9d5d1aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4048208a4c81eca9372664003b09922b9d5d1aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4048208a4c81eca9372664003b09922b9d5d1aa"}], "stats": {"total": 254, "additions": 74, "deletions": 180}, "files": [{"sha": "8925b5a666934d2a7b9b7c1aee5378b79542866d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b56119876b871d6eb330fa06bb6ea16f32d5b68a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b56119876b871d6eb330fa06bb6ea16f32d5b68a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b56119876b871d6eb330fa06bb6ea16f32d5b68a", "patch": "@@ -1,3 +1,8 @@\n+2010-05-28  Richard Guenther  <rguenther@suse.de>\n+\n+\t* lto-wrapper.c (run_gcc): With -save-temps generate a\n+\tuser-visible ltrans filename.  Fixup ltrans unit numbering.\n+\n 2010-05-28  Kai Tietz  <kai.tietz@onevision.com>\n \n \t* c-common.c (c_common_nodes_and_builtins): Replace use"}, {"sha": "dda272bd1d9faaf24986a604bdb5fb080567b92b", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b56119876b871d6eb330fa06bb6ea16f32d5b68a/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b56119876b871d6eb330fa06bb6ea16f32d5b68a/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=b56119876b871d6eb330fa06bb6ea16f32d5b68a", "patch": "@@ -407,13 +407,21 @@ run_gcc (unsigned argc, char *argv[])\n       if (linker_output)\n \t{\n \t  char *dumpbase = (char *) xmalloc (strlen (linker_output)\n-\t\t\t\t\t     + sizeof(\".wpa\") + 1);\n+\t\t\t\t\t     + sizeof (\".wpa\") + 1);\n \t  strcpy (dumpbase, linker_output);\n \t  strcat (dumpbase, \".wpa\");\n \t  argv_ptr[0] = dumpbase;\n \t}\n \n-      ltrans_output_file = make_temp_file (\".ltrans.out\");\n+      if (linker_output && debug)\n+\t{\n+\t  ltrans_output_file = (char *) xmalloc (strlen (linker_output)\n+\t\t\t\t\t\t + sizeof (\".ltrans.out\") + 1);\n+\t  strcpy (ltrans_output_file, linker_output);\n+\t  strcat (ltrans_output_file, \".ltrans.out\");\n+\t}\n+      else\n+\tltrans_output_file = make_temp_file (\".ltrans.out\");\n       list_option_full = (char *) xmalloc (sizeof (char) *\n \t\t         (strlen (ltrans_output_file) + list_option_len + 1));\n       tmp = list_option_full;\n@@ -516,7 +524,7 @@ run_gcc (unsigned argc, char *argv[])\n \t\t\t\t      + sizeof(DUMPBASE_SUFFIX) + 1);\n \t      snprintf (dumpbase,\n \t\t\tstrlen (linker_output) + sizeof(DUMPBASE_SUFFIX),\n-\t\t\t\"%s.ltrans%u\", linker_output, nr);\n+\t\t\t\"%s.ltrans%u\", linker_output, i);\n \t      argv_ptr[0] = dumpbase;\n \t    }\n "}, {"sha": "fb71dc30c73d2ec799bc1799469f31651a18108b", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b56119876b871d6eb330fa06bb6ea16f32d5b68a/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b56119876b871d6eb330fa06bb6ea16f32d5b68a/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=b56119876b871d6eb330fa06bb6ea16f32d5b68a", "patch": "@@ -1,3 +1,13 @@\n+2010-05-28  Richard Guenther  <rguenther@suse.de>\n+\n+\t* lto.c (prefix_name_with_star): Removed.\n+\t(strip_extension): Likewise.\n+\t(get_filename_for_set): Likewise.\n+\t(lto_write_ltrans_list): Fold into ...\n+\t(lto_wpa_write_files): ... this.  Name LTRANS units\n+\tby suffixing the ltrans output list filename.\n+\t(do_whole_program_analysis): Adjust.\n+\n 2010-05-27  Joseph Myers  <joseph@codesourcery.com>\n \n \t* lto.c: Include diagnostic-core.h instead of diagnostic.h."}, {"sha": "37d57bbc58ff18d61065249b1cec4850a4ea76ff", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 48, "deletions": 177, "changes": 225, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b56119876b871d6eb330fa06bb6ea16f32d5b68a/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b56119876b871d6eb330fa06bb6ea16f32d5b68a/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=b56119876b871d6eb330fa06bb6ea16f32d5b68a", "patch": "@@ -848,123 +848,29 @@ lto_promote_cross_file_statics (void)\n }\n \n \n-/* Given a file name FNAME, return a string with FNAME prefixed with '*'.  */\n-\n-static char *\n-prefix_name_with_star (const char *fname)\n-{\n-  char *star_fname;\n-  size_t len;\n-  \n-  len = strlen (fname) + 1 + 1;\n-  star_fname = XNEWVEC (char, len);\n-  snprintf (star_fname, len, \"*%s\", fname);\n-\n-  return star_fname;\n-}\n-\n-\n-/* Return a copy of FNAME without the .o extension.  */\n-\n-static char *\n-strip_extension (const char *fname)\n-{\n-  char *s = XNEWVEC (char, strlen (fname) - 2 + 1);\n-  gcc_assert (strstr (fname, \".o\"));\n-  snprintf (s, strlen (fname) - 2 + 1, \"%s\", fname);\n-\n-  return s;\n-}\n-\n-\n-/* Return a file name associated with cgraph node set SET.  This may\n-   be a new temporary file name if SET needs to be processed by\n-   LTRANS, or the original file name if all the nodes in SET belong to\n-   the same input file.  */\n-\n-static char *\n-get_filename_for_set (cgraph_node_set set)\n-{\n-  char *fname = NULL;\n-  static const size_t max_fname_len = 100;\n-\n-  /* Create a new temporary file to store SET.  To facilitate\n-     debugging, use file names from SET as part of the new\n-     temporary file name.  */\n-  cgraph_node_set_iterator si;\n-  struct pointer_set_t *pset = pointer_set_create ();\n-  for (si = csi_start (set); !csi_end_p (si); csi_next (&si))\n-    {\n-      struct cgraph_node *n = csi_node (si);\n-      const char *node_fname;\n-      char *f;\n-\n-      /* Don't use the same file name more than once.  */\n-      if (pointer_set_insert (pset, n->local.lto_file_data))\n-\tcontinue;\n-\n-      /* The first file name found in SET determines the output\n-\t directory.  For the remaining files, we use their\n-\t base names.  */\n-      node_fname = n->local.lto_file_data->file_name;\n-      if (fname == NULL)\n-\t{\n-\t  fname = strip_extension (node_fname);\n-\t  continue;\n-\t}\n-\n-      f = strip_extension (lbasename (node_fname));\n-\n-      /* If the new name causes an excessively long file name,\n-\t make the last component \"___\" to indicate overflow.  */\n-      if (strlen (fname) + strlen (f) > max_fname_len - 3)\n-\t{\n-\t  fname = reconcat (fname, fname, \"___\", NULL);\n-\t  break;\n-\t}\n-      else\n-\t{\n-\t  fname = reconcat (fname, fname, \"_\", f, NULL);\n-\t  free (f);\n-\t}\n-    }\n-\n-  pointer_set_destroy (pset);\n-\n-  if (!fname)\n-    {\n-      /* Since SET does not need to be processed by LTRANS, use\n-\t the original file name and mark it with a '*' prefix so that\n-\t lto_execute_ltrans knows not to process it.  */\n-      cgraph_node_set_iterator si = csi_start (set);\n-      struct cgraph_node *first = csi_node (si);\n-      fname = prefix_name_with_star (first->local.lto_file_data->file_name);\n-    }\n-  else\n-    {\n-      /* Add the extension .wpa.o to indicate that this file has been\n-\t produced by WPA.  */\n-      fname = reconcat (fname, fname, \".wpa.o\", NULL);\n-      gcc_assert (fname);\n-    }\n-\n-  return fname;\n-}\n-\n static lto_file *current_lto_file;\n \n \n-/* Write all output files in WPA mode.  Returns a NULL-terminated array of\n-   output file names.  */\n+/* Write all output files in WPA mode and the file with the list of\n+   LTRANS units.  */\n \n-static char **\n+static void\n lto_wpa_write_files (void)\n {\n-  char **output_files;\n-  unsigned i, n_sets, last_out_file_ix, num_out_files;\n+  unsigned i, n_sets;\n   lto_file *file;\n   cgraph_node_set set;\n   varpool_node_set vset;\n+  FILE *ltrans_output_list_stream;\n+  char *temp_filename;\n+  size_t blen;\n+\n+  /* Open the LTRANS output list.  */\n+  if (!ltrans_output_list)\n+    fatal_error (\"no LTRANS output list filename provided\");\n+  ltrans_output_list_stream = fopen (ltrans_output_list, \"w\");\n+  if (ltrans_output_list_stream == NULL)\n+    fatal_error (\"opening LTRANS output list %s: %m\", ltrans_output_list);\n \n   timevar_push (TV_WHOPR_WPA);\n \n@@ -987,86 +893,57 @@ lto_wpa_write_files (void)\n \n   timevar_push (TV_WHOPR_WPA_IO);\n \n-  /* The number of output files depends on the number of input files\n-     and how many callgraph node sets we create.  Reserve enough space\n-     for the maximum of these two.  */\n-  num_out_files = MAX (VEC_length (cgraph_node_set, lto_cgraph_node_sets),\n-                       num_in_fnames);\n-  output_files = XNEWVEC (char *, num_out_files + 1);\n+  /* Generate a prefix for the LTRANS unit files.  */\n+  blen = strlen (ltrans_output_list);\n+  temp_filename = (char *) xmalloc (blen + sizeof (\"2147483648.o\"));\n+  strcpy (temp_filename, ltrans_output_list);\n+  if (blen > sizeof (\".out\")\n+      && strcmp (temp_filename + blen - sizeof (\".out\") + 1,\n+\t\t \".out\") == 0)\n+    temp_filename[blen - sizeof (\".out\") + 1] = '\\0';\n+  blen = strlen (temp_filename);\n \n   n_sets = VEC_length (cgraph_node_set, lto_cgraph_node_sets);\n   for (i = 0; i < n_sets; i++)\n     {\n-      char *temp_filename;\n+      size_t len;\n \n       set = VEC_index (cgraph_node_set, lto_cgraph_node_sets, i);\n       vset = VEC_index (varpool_node_set, lto_varpool_node_sets, i);\n-      temp_filename = get_filename_for_set (set);\n-      output_files[i] = temp_filename;\n-\n-      if (cgraph_node_set_nonempty_p (set) || varpool_node_set_nonempty_p (vset))\n-\t{\n-\t  /* Write all the nodes in SET to TEMP_FILENAME.  */\n-\t  file = lto_obj_file_open (temp_filename, true);\n-\t  if (!file)\n-\t    fatal_error (\"lto_obj_file_open() failed\");\n-\n-\t  if (!quiet_flag)\n-\t    fprintf (stderr, \" %s\", temp_filename);\n-\n-\t  lto_set_current_out_file (file);\n-\n-\t  ipa_write_optimization_summaries (set, vset);\n-\n-\t  lto_set_current_out_file (NULL);\n-\t  lto_obj_file_close (file);\n-\t}\n-    }\n-\n-  last_out_file_ix = n_sets;\n-\n-  lto_stats.num_output_files += n_sets;\n-\n-  output_files[last_out_file_ix] = NULL;\n-\n-  timevar_pop (TV_WHOPR_WPA_IO);\n-\n-  return output_files;\n-}\n+      if (!cgraph_node_set_nonempty_p (set)\n+\t  && !varpool_node_set_nonempty_p (vset))\n+\tcontinue;\n \n-/* Perform local transformations (LTRANS) on the files in the NULL-terminated\n-   FILES array.  These should have been written previously by\n-   lto_wpa_write_files ().  Transformations are performed via executing\n-   COLLECT_GCC for reach file.  */\n+      /* Write all the nodes in SET.  */\n+      sprintf (temp_filename + blen, \"%u.o\", i);\n+      file = lto_obj_file_open (temp_filename, true);\n+      if (!file)\n+\tfatal_error (\"lto_obj_file_open() failed\");\n \n-static void\n-lto_write_ltrans_list (char *const *files)\n-{\n-  FILE *ltrans_output_list_stream = NULL;\n-  unsigned i;\n+      if (!quiet_flag)\n+\tfprintf (stderr, \" %s\", temp_filename);\n \n-  /* Open the LTRANS output list.  */\n-  if (!ltrans_output_list)\n-    error (\"no LTRANS output filename provided\");\n+      lto_set_current_out_file (file);\n \n-  ltrans_output_list_stream = fopen (ltrans_output_list, \"w\");\n-  if (ltrans_output_list_stream == NULL)\n-    error (\"opening LTRANS output list %s: %m\", ltrans_output_list);\n+      ipa_write_optimization_summaries (set, vset);\n \n-  for (i = 0; files[i]; ++i)\n-    {\n-      size_t len;\n+      lto_set_current_out_file (NULL);\n+      lto_obj_file_close (file);\n \n-      len = strlen (files[i]);\n-      if (fwrite (files[i], 1, len, ltrans_output_list_stream) < len\n+      len = strlen (temp_filename);\n+      if (fwrite (temp_filename, 1, len, ltrans_output_list_stream) < len\n \t  || fwrite (\"\\n\", 1, 1, ltrans_output_list_stream) < 1)\n-\terror (\"writing to LTRANS output list %s: %m\",\n-\t       ltrans_output_list);\n+\tfatal_error (\"writing to LTRANS output list %s: %m\",\n+\t\t     ltrans_output_list);\n     }\n \n+  lto_stats.num_output_files += n_sets;\n+\n   /* Close the LTRANS output list.  */\n   if (fclose (ltrans_output_list_stream))\n-    error (\"closing LTRANS output list %s: %m\", ltrans_output_list);\n+    fatal_error (\"closing LTRANS output list %s: %m\", ltrans_output_list);\n+\n+  timevar_pop (TV_WHOPR_WPA_IO);\n }\n \n \n@@ -1793,8 +1670,6 @@ materialize_cgraph (void)\n static void\n do_whole_program_analysis (void)\n {\n-  char **output_files;\n-\n   /* Note that since we are in WPA mode, materialize_cgraph will not\n      actually read in all the function bodies.  It only materializes\n      the decls and cgraph nodes so that analysis can be performed.  */\n@@ -1829,7 +1704,7 @@ do_whole_program_analysis (void)\n       fprintf (stderr, \"\\nStreaming out\");\n       fflush (stderr);\n     }\n-  output_files = lto_wpa_write_files ();\n+  lto_wpa_write_files ();\n   ggc_collect ();\n   if (!quiet_flag)\n     fprintf (stderr, \"\\n\");\n@@ -1843,10 +1718,6 @@ do_whole_program_analysis (void)\n   /* Show the LTO report before launching LTRANS.  */\n   if (flag_lto_report)\n     print_lto_report ();\n-\n-  lto_write_ltrans_list (output_files);\n-\n-  XDELETEVEC (output_files);\n }\n \n "}]}