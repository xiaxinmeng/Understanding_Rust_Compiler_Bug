{"sha": "ce91e74c187986865c3de8fbd871242183afa93d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U5MWU3NGMxODc5ODY4NjVjM2RlOGZiZDg3MTI0MjE4M2FmYTkzZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2005-06-24T15:14:04Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2005-06-24T15:14:04Z"}, "message": "tree-optimize.c (init_tree_optimization_passes): Fix flags of all_passes and all_ipa_passes.\n\n\n\t* tree-optimize.c (init_tree_optimization_passes): Fix flags of\n\tall_passes and all_ipa_passes.\n\n\t* c-common.c: Include cgraph.h\n\t(handle_externally_visible_attribute): New function.\n\t(c_common_att): Add \"externally_visible\" attribute.\n\t* cgraph.c (decide_is_variable_needed): Obey externally\n\tvisible flag.\n\t(cgraph_varpool_finalize_decl): Avoid redundant checking.\n\t* cgraph.h (struct cgraph_node): New flag externally_visible.\n\t(decide_is_function_needed): Obey externally visible flag.\n\t(cgraph_finalize_function): Avoid redundant checks.\n\t(cgraph_function_and_variable_visibility): Bring symbols local\n\twhen asked for.\n\t* common.opt (fwhole-program): New flag.\n\n\t* doc/invoke.texi (-fwhole-program): Document.\n\nFrom-SVN: r101295", "tree": {"sha": "cb74c75feb0a3380d0f1a108528cdc35a05f7892", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb74c75feb0a3380d0f1a108528cdc35a05f7892"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce91e74c187986865c3de8fbd871242183afa93d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce91e74c187986865c3de8fbd871242183afa93d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce91e74c187986865c3de8fbd871242183afa93d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce91e74c187986865c3de8fbd871242183afa93d/comments", "author": null, "committer": null, "parents": [{"sha": "62765fb14a52c42422b31938deb5893ebe13e735", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62765fb14a52c42422b31938deb5893ebe13e735", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62765fb14a52c42422b31938deb5893ebe13e735"}], "stats": {"total": 164, "additions": 156, "deletions": 8}, "files": [{"sha": "f1c680c5b820d064d1ce46c3991e1163e96cdde2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce91e74c187986865c3de8fbd871242183afa93d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce91e74c187986865c3de8fbd871242183afa93d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ce91e74c187986865c3de8fbd871242183afa93d", "patch": "@@ -1,3 +1,23 @@\n+2005-06-24  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-optimize.c (init_tree_optimization_passes): Fix flags of\n+\tall_passes and all_ipa_passes.\n+\n+\t* c-common.c: Include cgraph.h\n+\t(handle_externally_visible_attribute): New function.\n+\t(c_common_att): Add \"externally_visible\" attribute.\n+\t* cgraph.c (decide_is_variable_needed): Obey externally\n+\tvisible flag.\n+\t(cgraph_varpool_finalize_decl): Avoid redundant checking.\n+\t* cgraph.h (struct cgraph_node): New flag externally_visible.\n+\t(decide_is_function_needed): Obey externally visible flag.\n+\t(cgraph_finalize_function): Avoid redundant checks.\n+\t(cgraph_function_and_variable_visibility): Bring symbols local\n+\twhen asked for.\n+\t* common.opt (fwhole-program): New flag.\n+\n+\t* doc/invoke.texi (-fwhole-program): Document.\n+\n 2005-06-24  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR 22171"}, {"sha": "c9ebb58cf8b0f2c3aee6ad10ecf11c84b8d21dae", "filename": "gcc/c-common.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce91e74c187986865c3de8fbd871242183afa93d/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce91e74c187986865c3de8fbd871242183afa93d/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=ce91e74c187986865c3de8fbd871242183afa93d", "patch": "@@ -47,6 +47,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tree-mudflap.h\"\n #include \"opts.h\"\n #include \"real.h\"\n+#include \"cgraph.h\"\n \n cpp_reader *parse_in;\t\t/* Declared in c-pragma.h.  */\n \n@@ -514,6 +515,8 @@ static tree handle_always_inline_attribute (tree *, tree, tree, int,\n \t\t\t\t\t    bool *);\n static tree handle_used_attribute (tree *, tree, tree, int, bool *);\n static tree handle_unused_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_externally_visible_attribute (tree *, tree, tree, int,\n+\t\t\t\t\t\t bool *);\n static tree handle_const_attribute (tree *, tree, tree, int, bool *);\n static tree handle_transparent_union_attribute (tree *, tree, tree,\n \t\t\t\t\t\tint, bool *);\n@@ -580,6 +583,8 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_used_attribute },\n   { \"unused\",                 0, 0, false, false, false,\n \t\t\t      handle_unused_attribute },\n+  { \"externally_visible\",     0, 0, true,  false, false,\n+\t\t\t      handle_externally_visible_attribute },\n   /* The same comments as for noreturn attributes apply to const ones.  */\n   { \"const\",                  0, 0, true,  false, false,\n \t\t\t      handle_const_attribute },\n@@ -4129,6 +4134,47 @@ handle_unused_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n   return NULL_TREE;\n }\n \n+/* Handle a \"externally_visible\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_externally_visible_attribute (tree *pnode, tree name,\n+\t\t\t\t     tree ARG_UNUSED (args),\n+\t\t\t\t     int ARG_UNUSED (flags),\n+\t\t\t\t     bool *no_add_attrs)\n+{\n+  tree node = *pnode;\n+\n+  if ((!TREE_STATIC (node) && TREE_CODE (node) != FUNCTION_DECL)\n+      || !TREE_PUBLIC (node))\n+    {\n+      warning (OPT_Wattributes,\n+\t       \"%qE attribute have effect only on public objects\", name);\n+      *no_add_attrs = true;\n+    }\n+  else if (TREE_CODE (node) == FUNCTION_DECL)\n+    {\n+      struct cgraph_node *n = cgraph_node (node);\n+      n->local.externally_visible = true;\n+      if (n->local.finalized)\n+\tcgraph_mark_needed_node (n);\n+    }\n+  else if (TREE_CODE (node) == VAR_DECL)\n+    {\n+      struct cgraph_varpool_node *n = cgraph_varpool_node (node);\n+      n->externally_visible = true;\n+      if (n->finalized)\n+\tcgraph_varpool_mark_needed_node (n);\n+    }\n+  else\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Handle a \"const\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n "}, {"sha": "af84ebf21567205dd26f79d75bd2d9ff306b56b6", "filename": "gcc/cgraph.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce91e74c187986865c3de8fbd871242183afa93d/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce91e74c187986865c3de8fbd871242183afa93d/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=ce91e74c187986865c3de8fbd871242183afa93d", "patch": "@@ -807,7 +807,8 @@ bool\n decide_is_variable_needed (struct cgraph_varpool_node *node, tree decl)\n {\n   /* If the user told us it is used, then it must be so.  */\n-  if (lookup_attribute (\"used\", DECL_ATTRIBUTES (decl)))\n+  if (node->externally_visible\n+      || lookup_attribute (\"used\", DECL_ATTRIBUTES (decl)))\n     return true;\n \n   /* ??? If the assembler name is set by hand, it is possible to assemble\n@@ -863,7 +864,7 @@ cgraph_varpool_finalize_decl (tree decl)\n   /* Since we reclaim unreachable nodes at the end of every language\n      level unit, we need to be conservative about possible entry points\n      there.  */\n-  if (TREE_PUBLIC (decl) && !DECL_COMDAT (decl) && !DECL_EXTERNAL (decl))\n+  else if (TREE_PUBLIC (decl) && !DECL_COMDAT (decl) && !DECL_EXTERNAL (decl))\n     cgraph_varpool_mark_needed_node (node);\n   if (cgraph_global_info_ready || !flag_unit_at_a_time)\n     cgraph_varpool_assemble_pending_decls ();"}, {"sha": "9b7306bbbee88fbe6adeb7521d41831c4b9a75d4", "filename": "gcc/cgraph.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce91e74c187986865c3de8fbd871242183afa93d/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce91e74c187986865c3de8fbd871242183afa93d/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=ce91e74c187986865c3de8fbd871242183afa93d", "patch": "@@ -159,6 +159,8 @@ struct cgraph_node GTY((chain_next (\"%h.next\"), chain_prev (\"%h.previous\")))\n   bool analyzed;\n   /* Set when function is scheduled to be assembled.  */\n   bool output;\n+  /* Set when function is visible by other units.  */\n+  bool externally_visible;\n   /* Set for aliases once they got through assemble_alias.  */\n   bool alias;\n };"}, {"sha": "f3d718d8bcf63ce7e532c8e4065c38a09a5c775d", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce91e74c187986865c3de8fbd871242183afa93d/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce91e74c187986865c3de8fbd871242183afa93d/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=ce91e74c187986865c3de8fbd871242183afa93d", "patch": "@@ -189,9 +189,16 @@ static bool\n decide_is_function_needed (struct cgraph_node *node, tree decl)\n {\n   tree origin;\n+  if (MAIN_NAME_P (DECL_NAME (decl))\n+      && TREE_PUBLIC (decl))\n+    {\n+      node->local.externally_visible = true;\n+      return true;\n+    }\n \n   /* If the user told us it is used, then it must be so.  */\n-  if (lookup_attribute (\"used\", DECL_ATTRIBUTES (decl)))\n+  if (node->local.externally_visible\n+      || lookup_attribute (\"used\", DECL_ATTRIBUTES (decl)))\n     return true;\n \n   /* ??? If the assembler name is set by hand, it is possible to assemble\n@@ -209,7 +216,8 @@ decide_is_function_needed (struct cgraph_node *node, tree decl)\n \n   /* Externally visible functions must be output.  The exception is\n      COMDAT functions that must be output only when they are needed.  */\n-  if (TREE_PUBLIC (decl) && !DECL_COMDAT (decl) && !DECL_EXTERNAL (decl))\n+  if ((TREE_PUBLIC (decl) && !flag_whole_program)\n+      && !DECL_COMDAT (decl) && !DECL_EXTERNAL (decl))\n     return true;\n \n   /* Constructors and destructors are reachable from the runtime by\n@@ -428,7 +436,7 @@ cgraph_finalize_function (tree decl, bool nested)\n   /* Since we reclaim unreachable nodes at the end of every language\n      level unit, we need to be conservative about possible entry points\n      there.  */\n-  if (TREE_PUBLIC (decl) && !DECL_COMDAT (decl) && !DECL_EXTERNAL (decl))\n+  if ((TREE_PUBLIC (decl) && !DECL_COMDAT (decl) && !DECL_EXTERNAL (decl)))\n     cgraph_mark_reachable_node (node);\n \n   /* If not unit at a time, go ahead and emit everything we've found\n@@ -1059,7 +1067,13 @@ cgraph_function_and_variable_visibility (void)\n       if (node->reachable\n \t  && (DECL_COMDAT (node->decl)\n \t      || (TREE_PUBLIC (node->decl) && !DECL_EXTERNAL (node->decl))))\n-\tnode->local.externally_visible = 1;\n+\tnode->local.externally_visible = true;\n+      if (!node->local.externally_visible && node->analyzed\n+\t  && !DECL_EXTERNAL (node->decl))\n+\t{\n+\t  gcc_assert (flag_whole_program || !TREE_PUBLIC (node->decl));\n+\t  TREE_PUBLIC (node->decl) = 0;\n+\t}\n       node->local.local = (!node->needed\n \t\t\t   && node->analyzed\n \t\t\t   && !DECL_EXTERNAL (node->decl)\n@@ -1070,6 +1084,11 @@ cgraph_function_and_variable_visibility (void)\n       if (vnode->needed\n \t  && (DECL_COMDAT (vnode->decl) || TREE_PUBLIC (vnode->decl)))\n \tvnode->externally_visible = 1;\n+      if (!vnode->externally_visible)\n+\t{\n+\t  gcc_assert (flag_whole_program || !TREE_PUBLIC (vnode->decl));\n+\t  TREE_PUBLIC (vnode->decl) = 0;\n+\t}\n      gcc_assert (TREE_STATIC (vnode->decl));\n     }\n "}, {"sha": "f1e27d5773c4eb13e927e3e4b90013b40805a1a9", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce91e74c187986865c3de8fbd871242183afa93d/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce91e74c187986865c3de8fbd871242183afa93d/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=ce91e74c187986865c3de8fbd871242183afa93d", "patch": "@@ -986,6 +986,10 @@ fweb\n Common Report Var(flag_web) Init(0)\n Construct webs and split unrelated uses of single variable\n \n+fwhole-program\n+Common Report Var(flag_whole_program) Init(0)\n+Perform whole program optimizations\n+\n fwrapv\n Common Report Var(flag_wrapv)\n Assume signed arithmetic overflow wraps around"}, {"sha": "c0363ddbe0f7665a587454ee4ea4069777e08fba", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce91e74c187986865c3de8fbd871242183afa93d/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce91e74c187986865c3de8fbd871242183afa93d/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=ce91e74c187986865c3de8fbd871242183afa93d", "patch": "@@ -1525,7 +1525,8 @@ attributes are currently defined for functions on all targets:\n @code{format}, @code{format_arg}, @code{no_instrument_function},\n @code{section}, @code{constructor}, @code{destructor}, @code{used},\n @code{unused}, @code{deprecated}, @code{weak}, @code{malloc},\n-@code{alias}, @code{warn_unused_result} and @code{nonnull}.  Several other\n+@code{alias}, @code{warn_unused_result}, @code{nonnull}\n+and @code{externally_visible}.  Several other\n attributes are defined for functions on particular target systems.  Other\n attributes, including @code{section} are supported for variables declarations\n (@pxref{Variable Attributes}) and for types (@pxref{Type Attributes}).\n@@ -2345,6 +2346,12 @@ also be used with non-function declarations.  Weak symbols are supported\n for ELF targets, and also for a.out targets when using the GNU assembler\n and linker.\n \n+@item externally_visible\n+@cindex @code{externally_visible} attribute.\n+This attribute, attached to a global variable or function nullify\n+effect of @option{-fwhole-program} command line option, so the object\n+remain visible outside the current compilation unit\n+\n @end table\n \n You can specify multiple attributes in a declaration by separating them"}, {"sha": "4e229b03c86b156d81dce4116d7e8c8aa5fc7bce", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce91e74c187986865c3de8fbd871242183afa93d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce91e74c187986865c3de8fbd871242183afa93d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ce91e74c187986865c3de8fbd871242183afa93d", "patch": "@@ -335,7 +335,7 @@ Objective-C and Objective-C++ Dialects}.\n -ftree-dominator-opts -ftree-dse -ftree-copyrename -ftree-sink @gol\n -ftree-ch -ftree-sra -ftree-ter -ftree-lrs -ftree-fre -ftree-vectorize @gol\n -ftree-salias -fweb @gol\n--ftree-copy-prop -ftree-store-ccp -ftree-store-copy-prop @gol\n+-ftree-copy-prop -ftree-store-ccp -ftree-store-copy-prop -fwhole-program @gol\n --param @var{name}=@var{value}\n -O  -O0  -O1  -O2  -O3  -Os}\n \n@@ -5256,6 +5256,19 @@ Enabled at levels @option{-O2}, @option{-O3}, @option{-Os},\n on targets where the default format for debugging information supports\n variable tracking.\n \n+@item -fwhole-program\n+@opindex fwhole-program\n+Assume that the current compilation unit represents whole program being\n+compiled.  All public functions and variables with the exception of @code{main}\n+and those marged by attribute @code{externally_visible} become static functions\n+and in a affect gets more aggresively optimized by interprocedural optimizers.\n+While this option is equivalent to proper use of @code{static} keyword for\n+programs consitsting of single file, in combination with option\n+@option{--combine} this flag can be used to compile most of smaller scale C\n+programs since the functions and variables become local for the whole combined\n+compilation unit, not for the single source file itself.\n+\n+\n @item -fno-cprop-registers\n @opindex fno-cprop-registers\n After register allocation and post-register allocation instruction splitting,"}, {"sha": "503bb0992cde6672cfb2d7c808031366a76dafb4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce91e74c187986865c3de8fbd871242183afa93d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce91e74c187986865c3de8fbd871242183afa93d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ce91e74c187986865c3de8fbd871242183afa93d", "patch": "@@ -1,3 +1,8 @@\n+2005-06-22  Jan Hubicka  <jh@suse.cz>\n+\n+\t* wholeprogram-1.c: New testcase.\n+\t* wholeprogram-2.c: New testcase.\n+\n 2005-06-24  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR 22171"}, {"sha": "9d0af1f2391f85b789129c04709ad8deaf6af013", "filename": "gcc/testsuite/gcc.dg/tree-ssa/wholeprogram-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce91e74c187986865c3de8fbd871242183afa93d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fwholeprogram-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce91e74c187986865c3de8fbd871242183afa93d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fwholeprogram-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fwholeprogram-1.c?ref=ce91e74c187986865c3de8fbd871242183afa93d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-options \"-O2 -fdump-tree-optimized -fwhole-program\" } */\n+int b[100];\n+void abort (void);\n+\n+void\n+large_function ()\n+{\n+  int i;\n+  for (i = 0; i < 99; i++)\n+    if (b[i] / (b[i+1] + 1))\n+      abort ();\n+}\n+\n+main ()\n+{\n+  large_function ();\n+}\n+\n+/* Function should be inlined as called once.  */\n+/* { dg-final { scan-tree-dump-not \"large_function\" \"optimized\"} } */\n+\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */\n+"}, {"sha": "bbdd0dd48ccc59d2517acc55424c7350c959c3e1", "filename": "gcc/testsuite/gcc.dg/tree-ssa/wholeprogram-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce91e74c187986865c3de8fbd871242183afa93d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fwholeprogram-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce91e74c187986865c3de8fbd871242183afa93d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fwholeprogram-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fwholeprogram-2.c?ref=ce91e74c187986865c3de8fbd871242183afa93d", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-options \"-O2 -fdump-tree-optimized -fwhole-program\" } */\n+__attribute__ ((externally_visible))\n+void\n+externally_visible_function ()\n+{\n+}\n+/* { dg-final { scan-tree-dump \"externally_visible_function\" \"optimized\"} } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}]}