{"sha": "2366e7c600b5d2306acfd13b4324d77cea66859d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM2NmU3YzYwMGI1ZDIzMDZhY2ZkMTNiNDMyNGQ3N2NlYTY2ODU5ZA==", "commit": {"author": {"name": "Pascal Obry", "email": "obry@adacore.com", "date": "2005-07-07T09:41:29Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-07-07T09:41:29Z"}, "message": "g-socthi-mingw.adb (C_Inet_Addr): New body used to convert the returned type on Windows.\n\n2005-07-07  Pascal Obry  <obry@adacore.com>\n\n\t* g-socthi-mingw.adb (C_Inet_Addr): New body used to convert the\n\treturned type on Windows.\n\n\t* g-socthi-mingw.ads (C_Inet_Addr): Remove pragma Import for this\n\troutine.\n\n\t* g-socket.adb (Inet_Addr): Check for empty Image and raises an\n\texception in this case.\n\tSimplify the code as \"Image (Image'Range)\" = \"Image\".\n\nFrom-SVN: r101691", "tree": {"sha": "42d3d9e228b315764a37741113a5eb88a8f05e7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42d3d9e228b315764a37741113a5eb88a8f05e7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2366e7c600b5d2306acfd13b4324d77cea66859d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2366e7c600b5d2306acfd13b4324d77cea66859d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2366e7c600b5d2306acfd13b4324d77cea66859d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2366e7c600b5d2306acfd13b4324d77cea66859d/comments", "author": {"login": "TurboGit", "id": 467069, "node_id": "MDQ6VXNlcjQ2NzA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/467069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TurboGit", "html_url": "https://github.com/TurboGit", "followers_url": "https://api.github.com/users/TurboGit/followers", "following_url": "https://api.github.com/users/TurboGit/following{/other_user}", "gists_url": "https://api.github.com/users/TurboGit/gists{/gist_id}", "starred_url": "https://api.github.com/users/TurboGit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TurboGit/subscriptions", "organizations_url": "https://api.github.com/users/TurboGit/orgs", "repos_url": "https://api.github.com/users/TurboGit/repos", "events_url": "https://api.github.com/users/TurboGit/events{/privacy}", "received_events_url": "https://api.github.com/users/TurboGit/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "41f12ed0a94c98482e4f7fe97d2be03db8faaa77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41f12ed0a94c98482e4f7fe97d2be03db8faaa77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41f12ed0a94c98482e4f7fe97d2be03db8faaa77"}], "stats": {"total": 102, "additions": 61, "deletions": 41}, "files": [{"sha": "a562647499041914bdb5212136875420e954eefc", "filename": "gcc/ada/g-socket.adb", "status": "modified", "additions": 34, "deletions": 38, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2366e7c600b5d2306acfd13b4324d77cea66859d/gcc%2Fada%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2366e7c600b5d2306acfd13b4324d77cea66859d/gcc%2Fada%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.adb?ref=2366e7c600b5d2306acfd13b4324d77cea66859d", "patch": "@@ -117,8 +117,8 @@ package body GNAT.Sockets is\n    function Resolve_Error\n      (Error_Value : Integer;\n       From_Errno  : Boolean := True) return Error_Type;\n-   --  Associate an enumeration value (error_type) to en error value\n-   --  (errno). From_Errno prevents from mixing h_errno with errno.\n+   --  Associate an enumeration value (error_type) to en error value (errno).\n+   --  From_Errno prevents from mixing h_errno with errno.\n \n    function To_Name   (N  : String) return Name_Type;\n    function To_String (HN : Name_Type) return String;\n@@ -143,11 +143,10 @@ package body GNAT.Sockets is\n    function Image\n      (Val :  Inet_Addr_VN_Type;\n       Hex :  Boolean := False) return String;\n-   --  Output an array of inet address components either in\n-   --  hexadecimal or in decimal mode.\n+   --  Output an array of inet address components in hex or decimal mode\n \n    function Is_IP_Address (Name : String) return Boolean;\n-   --  Return true when Name is an IP address in standard dot notation.\n+   --  Return true when Name is an IP address in standard dot notation\n \n    function To_In_Addr (Addr : Inet_Addr_Type) return Thin.In_Addr;\n    function To_Inet_Addr (Addr : In_Addr) return Inet_Addr_Type;\n@@ -163,12 +162,11 @@ package body GNAT.Sockets is\n    --  Separate Val in seconds and microseconds\n \n    procedure Raise_Socket_Error (Error : Integer);\n-   --  Raise Socket_Error with an exception message describing\n-   --  the error code.\n+   --  Raise Socket_Error with an exception message describing the error code\n \n    procedure Raise_Host_Error (Error : Integer);\n-   --  Raise Host_Error exception with message describing error code\n-   --  (note hstrerror seems to be obsolete).\n+   --  Raise Host_Error exception with message describing error code (note\n+   --  hstrerror seems to be obsolete).\n \n    procedure Narrow (Item : in out Socket_Set_Type);\n    --  Update Last as it may be greater than the real last socket\n@@ -434,8 +432,8 @@ package body GNAT.Sockets is\n          Raise_Socket_Error (Socket_Errno);\n       end if;\n \n-      --  If Select was resumed because of read signalling socket,\n-      --  read this data and remove socket from set.\n+      --  If Select was resumed because of read signalling socket, read this\n+      --  data and remove socket from set.\n \n       if Is_Set (RSet, Selector.R_Sig_Socket) then\n          Clear (RSet, Selector.R_Sig_Socket);\n@@ -457,8 +455,7 @@ package body GNAT.Sockets is\n          Status := Expired;\n       end if;\n \n-      --  Update RSet, WSet and ESet in regard to their new socket\n-      --  sets.\n+      --  Update RSet, WSet and ESet in regard to their new socket sets\n \n       Narrow (RSet);\n       Narrow (WSet);\n@@ -499,7 +496,6 @@ package body GNAT.Sockets is\n       Socket : Socket_Type)\n    is\n       Last : aliased C.int := C.int (Item.Last);\n-\n    begin\n       if Item.Last /= No_Socket then\n          Remove_Socket_From_Set (Item.Set, C.int (Socket));\n@@ -519,15 +515,13 @@ package body GNAT.Sockets is\n    begin\n       begin\n          Close_Socket (Selector.R_Sig_Socket);\n-\n       exception\n          when Socket_Error =>\n             null;\n       end;\n \n       begin\n          Close_Socket (Selector.W_Sig_Socket);\n-\n       exception\n          when Socket_Error =>\n             null;\n@@ -616,7 +610,6 @@ package body GNAT.Sockets is\n \n          when N_Bytes_To_Read =>\n             Request.Size := Natural (Arg);\n-\n       end case;\n    end Control_Socket;\n \n@@ -651,13 +644,14 @@ package body GNAT.Sockets is\n \n    begin\n       --  We open two signalling sockets. One of them is used to send data to\n-      --  send data to the other, which is included in a C_Select socket set.\n-      --  The communication is used to force the call to C_Select to complete,\n-      --  and the waiting task to resume its execution.\n+      --  the other, which is included in a C_Select socket set. The\n+      --  communication is used to force the call to C_Select to complete, and\n+      --  the waiting task to resume its execution.\n \n       --  Create a listening socket\n \n       S0 := C_Socket (Constants.AF_INET, Constants.SOCK_STREAM, 0);\n+\n       if S0 = Failure then\n          Raise_Socket_Error (Socket_Errno);\n       end if;\n@@ -671,6 +665,7 @@ package body GNAT.Sockets is\n       Sin.Sin_Port := 0;\n \n       Res := C_Bind (S0, Sin'Address, Len);\n+\n       if Res = Failure then\n          Err := Socket_Errno;\n          Res := C_Close (S0);\n@@ -819,10 +814,8 @@ package body GNAT.Sockets is\n    begin\n       if Stream = null then\n          raise Socket_Error;\n-\n       elsif Stream.all in Datagram_Socket_Stream_Type then\n          return Datagram_Socket_Stream_Type (Stream.all).From;\n-\n       else\n          return Get_Peer_Name (Stream_Socket_Stream_Type (Stream.all).Socket);\n       end if;\n@@ -898,7 +891,6 @@ package body GNAT.Sockets is\n \n       declare\n          HE : constant Host_Entry_Type := To_Host_Entry (Res.all);\n-\n       begin\n          Task_Lock.Unlock;\n          return HE;\n@@ -1154,7 +1146,6 @@ package body GNAT.Sockets is\n       procedure Img10 (V : Inet_Addr_Comp_Type) is\n          Img : constant String := V'Img;\n          Len : constant Natural := Img'Length - 1;\n-\n       begin\n          Buffer (Length .. Length + Len - 1) := Img (2 .. Img'Last);\n          Length := Length + Len;\n@@ -1243,8 +1234,14 @@ package body GNAT.Sockets is\n       --  has the same in_addr_t value as Failure, and thus cannot be\n       --  properly returned by inet_addr(3).\n \n-      if Image (Image'Range) = \"255.255.255.255\" then\n+      if Image = \"255.255.255.255\" then\n          return Broadcast_Inet_Addr;\n+\n+      --  Special case for an empty Image as on some platforms (e.g. Windows)\n+      --  calling Inet_Addr(\"\") will not return an error.\n+\n+      elsif Image = \"\" then\n+         Raise_Socket_Error (Constants.EINVAL);\n       end if;\n \n       Img := New_String (Image);\n@@ -1457,8 +1454,8 @@ package body GNAT.Sockets is\n \n          Last  := Index;\n \n-         --  Exit when all or zero data received. Zero means that\n-         --  the socket peer is closed.\n+         --  Exit when all or zero data received. Zero means that the socket\n+         --  peer is closed.\n \n          exit when Index < First or else Index = Max;\n \n@@ -1484,8 +1481,8 @@ package body GNAT.Sockets is\n          Receive_Socket (Stream.Socket, Item (First .. Max), Index);\n          Last  := Index;\n \n-         --  Exit when all or zero data received. Zero means that\n-         --  the socket peer is closed.\n+         --  Exit when all or zero data received. Zero means that the socket\n+         --  peer is closed.\n \n          exit when Index < First or else Index = Max;\n \n@@ -1964,7 +1961,6 @@ package body GNAT.Sockets is\n \n    function Stream (Socket : Socket_Type) return Stream_Access is\n       S : Stream_Socket_Stream_Access;\n-\n    begin\n       S := new Stream_Socket_Stream_Type;\n       S.Socket := Socket;\n@@ -1992,13 +1988,13 @@ package body GNAT.Sockets is\n \n       Aliases : constant Chars_Ptr_Array :=\n                   Chars_Ptr_Pointers.Value (E.H_Aliases);\n-      --  H_Aliases points to a list of name aliases. The list is\n-      --  terminated by a NULL pointer.\n+      --  H_Aliases points to a list of name aliases. The list is terminated by\n+      --  a NULL pointer.\n \n       Addresses : constant In_Addr_Access_Array :=\n                     In_Addr_Access_Pointers.Value (E.H_Addr_List);\n-      --  H_Addr_List points to a list of binary addresses (in network\n-      --  byte order). The list is terminated by a NULL pointer.\n+      --  H_Addr_List points to a list of binary addresses (in network byte\n+      --  order). The list is terminated by a NULL pointer.\n       --\n       --  H_Length is not used because it is currently only set to 4.\n       --  H_Addrtype is always AF_INET\n@@ -2201,8 +2197,8 @@ package body GNAT.Sockets is\n             Index,\n             Stream.To);\n \n-         --  Exit when all or zero data sent. Zero means that the\n-         --  socket has been closed by peer.\n+         --  Exit when all or zero data sent. Zero means that the socket has\n+         --  been closed by peer.\n \n          exit when Index < First or else Index = Max;\n \n@@ -2230,8 +2226,8 @@ package body GNAT.Sockets is\n       loop\n          Send_Socket (Stream.Socket, Item (First .. Max), Index);\n \n-         --  Exit when all or zero data sent. Zero means that the\n-         --  socket has been closed by peer.\n+         --  Exit when all or zero data sent. Zero means that the socket has\n+         --  been closed by peer.\n \n          exit when Index < First or else Index = Max;\n "}, {"sha": "9c12bdfbf31ddeb95c7a10ca5f86fd97bd0f0329", "filename": "gcc/ada/g-socthi-mingw.adb", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2366e7c600b5d2306acfd13b4324d77cea66859d/gcc%2Fada%2Fg-socthi-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2366e7c600b5d2306acfd13b4324d77cea66859d/gcc%2Fada%2Fg-socthi-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-mingw.adb?ref=2366e7c600b5d2306acfd13b4324d77cea66859d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---              Copyright (C) 2001-2004 Ada Core Technologies, Inc.         --\n+--                     Copyright (C) 2001-2005 AdaCore                      --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -409,6 +409,31 @@ package body GNAT.Sockets.Thin is\n       return Res;\n    end C_Select;\n \n+   -----------------\n+   -- C_Inet_Addr --\n+   -----------------\n+\n+   function C_Inet_Addr\n+     (Cp : C.Strings.chars_ptr) return C.int\n+   is\n+      use type C.unsigned_long;\n+\n+      function Internal_Inet_Addr\n+        (Cp : C.Strings.chars_ptr) return C.unsigned_long;\n+      pragma Import (Stdcall, Internal_Inet_Addr, \"inet_addr\");\n+\n+      Res : C.unsigned_long;\n+   begin\n+      Res := Internal_Inet_Addr (Cp);\n+\n+      if Res = C.unsigned_long'Last then\n+         --  This value is returned in case of error\n+         return -1;\n+      else\n+         return C.int (Internal_Inet_Addr (Cp));\n+      end if;\n+   end C_Inet_Addr;\n+\n    --------------\n    -- C_Writev --\n    --------------"}, {"sha": "71fe4fe638d7d2901f8dcf9b1557ed1dd0b31042", "filename": "gcc/ada/g-socthi-mingw.ads", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2366e7c600b5d2306acfd13b4324d77cea66859d/gcc%2Fada%2Fg-socthi-mingw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2366e7c600b5d2306acfd13b4324d77cea66859d/gcc%2Fada%2Fg-socthi-mingw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-mingw.ads?ref=2366e7c600b5d2306acfd13b4324d77cea66859d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---              Copyright (C) 2001-2004 Ada Core Technologies, Inc.         --\n+--                     Copyright (C) 2001-2005 AdaCore                      --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -395,7 +395,6 @@ private\n    pragma Import (Stdcall, C_Getservbyport, \"getservbyport\");\n    pragma Import (Stdcall, C_Getsockname, \"getsockname\");\n    pragma Import (Stdcall, C_Getsockopt, \"getsockopt\");\n-   pragma Import (Stdcall, C_Inet_Addr, \"inet_addr\");\n    pragma Import (Stdcall, C_Ioctl, \"ioctlsocket\");\n    pragma Import (Stdcall, C_Listen, \"listen\");\n    pragma Import (Stdcall, C_Recv, \"recv\");"}]}