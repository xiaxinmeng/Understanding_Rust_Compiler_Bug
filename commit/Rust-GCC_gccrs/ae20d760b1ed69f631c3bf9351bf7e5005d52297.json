{"sha": "ae20d760b1ed69f631c3bf9351bf7e5005d52297", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWUyMGQ3NjBiMWVkNjlmNjMxYzNiZjkzNTFiZjdlNTAwNWQ1MjI5Nw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-01-31T10:03:06Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-01-31T10:03:06Z"}, "message": "re PR rtl-optimization/84071 (wrong elimination of zero-extension after sign-extended load)\n\n\tPR rtl-optimization/84071\n\t* combine.c (record_dead_and_set_regs_1): Record the source unmodified\n\tfor a paradoxical SUBREG on a WORD_REGISTER_OPERATIONS target.\n\nFrom-SVN: r257224", "tree": {"sha": "74ff7d61b777917ffbe16c5ebde09800a71ae57b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74ff7d61b777917ffbe16c5ebde09800a71ae57b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae20d760b1ed69f631c3bf9351bf7e5005d52297", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae20d760b1ed69f631c3bf9351bf7e5005d52297", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae20d760b1ed69f631c3bf9351bf7e5005d52297", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae20d760b1ed69f631c3bf9351bf7e5005d52297/comments", "author": null, "committer": null, "parents": [{"sha": "b6fb257bd6fe6a4d03937a8c3cee6ff4dfa1002a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6fb257bd6fe6a4d03937a8c3cee6ff4dfa1002a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6fb257bd6fe6a4d03937a8c3cee6ff4dfa1002a"}], "stats": {"total": 55, "additions": 50, "deletions": 5}, "files": [{"sha": "5c1977907f1aedc5546336276172e39893a29ddc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae20d760b1ed69f631c3bf9351bf7e5005d52297/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae20d760b1ed69f631c3bf9351bf7e5005d52297/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae20d760b1ed69f631c3bf9351bf7e5005d52297", "patch": "@@ -1,3 +1,9 @@\n+2018-01-31  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR rtl-optimization/84071\n+\t* combine.c (record_dead_and_set_regs_1): Record the source unmodified\n+\tfor a paradoxical SUBREG on a WORD_REGISTER_OPERATIONS target.\n+\n 2018-01-31  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc.c (arc_handle_aux_attribute): New function."}, {"sha": "b14b248800e25e6f418d885f873a5e05b54b3502", "filename": "gcc/combine.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae20d760b1ed69f631c3bf9351bf7e5005d52297/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae20d760b1ed69f631c3bf9351bf7e5005d52297/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=ae20d760b1ed69f631c3bf9351bf7e5005d52297", "patch": "@@ -13245,18 +13245,25 @@ record_dead_and_set_regs_1 (rtx dest, const_rtx setter, void *data)\n   if (REG_P (dest))\n     {\n       /* If we are setting the whole register, we know its value.  Otherwise\n-\t show that we don't know the value.  We can handle SUBREG in\n-\t some cases.  */\n+\t show that we don't know the value.  We can handle a SUBREG if it's\n+\t the low part, but we must be careful with paradoxical SUBREGs on\n+\t RISC architectures because we cannot strip e.g. an extension around\n+\t a load and record the naked load since the RTL middle-end considers\n+\t that the upper bits are defined according to LOAD_EXTEND_OP.  */\n       if (GET_CODE (setter) == SET && dest == SET_DEST (setter))\n \trecord_value_for_reg (dest, record_dead_insn, SET_SRC (setter));\n       else if (GET_CODE (setter) == SET\n \t       && GET_CODE (SET_DEST (setter)) == SUBREG\n \t       && SUBREG_REG (SET_DEST (setter)) == dest\n-\t       && known_le (GET_MODE_PRECISION (GET_MODE (dest)), BITS_PER_WORD)\n+\t       && known_le (GET_MODE_PRECISION (GET_MODE (dest)),\n+\t\t\t    BITS_PER_WORD)\n \t       && subreg_lowpart_p (SET_DEST (setter)))\n \trecord_value_for_reg (dest, record_dead_insn,\n-\t\t\t      gen_lowpart (GET_MODE (dest),\n-\t\t\t\t\t\t       SET_SRC (setter)));\n+\t\t\t      WORD_REGISTER_OPERATIONS\n+\t\t\t      && paradoxical_subreg_p (SET_DEST (setter))\n+\t\t\t      ? SET_SRC (setter)\n+\t\t\t      : gen_lowpart (GET_MODE (dest),\n+\t\t\t\t\t     SET_SRC (setter)));\n       else\n \trecord_value_for_reg (dest, record_dead_insn, NULL_RTX);\n     }"}, {"sha": "13d8e643c57f22511539788ccdc3a623fb24ce24", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae20d760b1ed69f631c3bf9351bf7e5005d52297/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae20d760b1ed69f631c3bf9351bf7e5005d52297/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ae20d760b1ed69f631c3bf9351bf7e5005d52297", "patch": "@@ -1,3 +1,7 @@\n+2018-01-31  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.c-torture/execute/20180131-1.c: New test.\n+\n 2018-01-31  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* gcc.target/arc/taux-1.c: New test."}, {"sha": "76e264bf9671134cc0ccfb2695cdcd4e5e316533", "filename": "gcc/testsuite/gcc.c-torture/execute/20180131-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae20d760b1ed69f631c3bf9351bf7e5005d52297/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20180131-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae20d760b1ed69f631c3bf9351bf7e5005d52297/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20180131-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20180131-1.c?ref=ae20d760b1ed69f631c3bf9351bf7e5005d52297", "patch": "@@ -0,0 +1,28 @@\n+/* PR rtl-optimization/84071 */\n+/* Reported by Wilco <wilco@gcc.gnu.org> */\n+\n+extern void abort (void);\n+\n+typedef union \n+{\n+  signed short ss;\n+  unsigned short us;\n+  int x;\n+} U;\n+\n+int f(int x, int y, int z, int a, U u) __attribute__((noclone, noinline));\n+\n+int f(int x, int y, int z, int a, U u)\n+{\n+  return (u.ss <= 0) + u.us;\n+}\n+\n+int main (void)\n+{\n+  U u = { .ss = -1 };\n+\n+  if (f (0, 0, 0, 0, u) != (1 << sizeof (short) * 8))\n+    abort ();\n+\n+  return 0;\n+}"}]}