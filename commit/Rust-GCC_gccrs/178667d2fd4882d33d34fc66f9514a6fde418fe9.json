{"sha": "178667d2fd4882d33d34fc66f9514a6fde418fe9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc4NjY3ZDJmZDQ4ODJkMzNkMzRmYzY2Zjk1MTRhNmZkZTQxOGZlOQ==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2017-12-04T15:38:20Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2017-12-04T15:38:20Z"}, "message": "combine: Remove use_crosses_set_p\n\nThis removes use_crosses_set_p, and uses modified_between_p instead\neverywhere it was used.  This improves optimisation.\n\n\n\t* combine.c: Adjust comment.\n\t(use_crosses_set_p): Delete.\n\t(can_combine_p): Use modified_between_p instead of use_crosses_set_p.\n\t(try_combine): Ditto.\n\nFrom-SVN: r255384", "tree": {"sha": "4f379a6c4582df47d55a02247686ff012d847a25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f379a6c4582df47d55a02247686ff012d847a25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/178667d2fd4882d33d34fc66f9514a6fde418fe9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/178667d2fd4882d33d34fc66f9514a6fde418fe9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/178667d2fd4882d33d34fc66f9514a6fde418fe9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/178667d2fd4882d33d34fc66f9514a6fde418fe9/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "86502ecfe41ae0ba0b3698be199797496e77c8c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86502ecfe41ae0ba0b3698be199797496e77c8c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86502ecfe41ae0ba0b3698be199797496e77c8c1"}], "stats": {"total": 76, "additions": 14, "deletions": 62}, "files": [{"sha": "4b072b4ceec1a91f30cd6afd3e8bfd053e1f6de9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178667d2fd4882d33d34fc66f9514a6fde418fe9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178667d2fd4882d33d34fc66f9514a6fde418fe9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=178667d2fd4882d33d34fc66f9514a6fde418fe9", "patch": "@@ -1,3 +1,10 @@\n+2017-12-04  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* combine.c: Adjust comment.\n+\t(use_crosses_set_p): Delete.\n+\t(can_combine_p): Use modified_between_p instead of use_crosses_set_p.\n+\t(try_combine): Ditto.\n+\n 2017-12-04  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/83255"}, {"sha": "34c89a129e1e11c1265c6a3fe2c1fa3cef83022a", "filename": "gcc/combine.c", "status": "modified", "additions": 7, "deletions": 62, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178667d2fd4882d33d34fc66f9514a6fde418fe9/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178667d2fd4882d33d34fc66f9514a6fde418fe9/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=178667d2fd4882d33d34fc66f9514a6fde418fe9", "patch": "@@ -39,7 +39,7 @@ along with GCC; see the file COPYING3.  If not see\n    insn as having a logical link to the preceding insn.  The same is true\n    for an insn explicitly using CC0.\n \n-   We check (with use_crosses_set_p) to avoid combining in such a way\n+   We check (with modified_between_p) to avoid combining in such a way\n    as to move a computation to a place where its value would be different.\n \n    Combination is done by mathematically substituting the previous\n@@ -482,7 +482,6 @@ static void record_dead_and_set_regs_1 (rtx, const_rtx, void *);\n static void record_dead_and_set_regs (rtx_insn *);\n static int get_last_value_validate (rtx *, rtx_insn *, int, int);\n static rtx get_last_value (const_rtx);\n-static int use_crosses_set_p (const_rtx, int);\n static void reg_dead_at_p_1 (rtx, const_rtx, void *);\n static int reg_dead_at_p (rtx, rtx_insn *);\n static void move_deaths (rtx, rtx, int, rtx_insn *, rtx *);\n@@ -2011,7 +2010,7 @@ can_combine_p (rtx_insn *insn, rtx_insn *i3, rtx_insn *pred ATTRIBUTE_UNUSED,\n       || (! all_adjacent\n \t  && (((!MEM_P (src)\n \t\t|| ! find_reg_note (insn, REG_EQUIV, src))\n-\t       && use_crosses_set_p (src, DF_INSN_LUID (insn)))\n+\t       && modified_between_p (src, insn, i3))\n \t      || (GET_CODE (src) == ASM_OPERANDS && MEM_VOLATILE_P (src))\n \t      || GET_CODE (src) == UNSPEC_VOLATILE))\n       /* Don't combine across a CALL_INSN, because that would possibly\n@@ -3699,7 +3698,7 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n \t}\n       else if (m_split_insn && NEXT_INSN (NEXT_INSN (m_split_insn)) == NULL_RTX\n \t       && (next_nonnote_nondebug_insn (i2) == i3\n-\t\t   || ! use_crosses_set_p (PATTERN (m_split_insn), DF_INSN_LUID (i2))))\n+\t\t   || !modified_between_p (PATTERN (m_split_insn), i2, i3)))\n \t{\n \t  rtx i2set, i3set;\n \t  rtx newi3pat = PATTERN (NEXT_INSN (m_split_insn));\n@@ -3763,7 +3762,7 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n \t      || can_change_dest_mode (i2dest, added_sets_2,\n \t\t\t\t       GET_MODE (*split)))\n \t  && (next_nonnote_nondebug_insn (i2) == i3\n-\t      || ! use_crosses_set_p (*split, DF_INSN_LUID (i2)))\n+\t      || !modified_between_p (*split, i2, i3))\n \t  /* We can't overwrite I2DEST if its value is still used by\n \t     NEWPAT.  */\n \t  && ! reg_referenced_p (i2dest, newpat))\n@@ -3954,8 +3953,7 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n \t   && GET_CODE (XVECEXP (newpat, 0, 1)) == SET\n \t   && rtx_equal_p (SET_SRC (XVECEXP (newpat, 0, 1)),\n \t\t\t   XEXP (SET_SRC (XVECEXP (newpat, 0, 0)), 0))\n-\t   && ! use_crosses_set_p (SET_SRC (XVECEXP (newpat, 0, 1)),\n-\t\t\t\t   DF_INSN_LUID (i2))\n+\t   && !modified_between_p (SET_SRC (XVECEXP (newpat, 0, 1)), i2, i3)\n \t   && GET_CODE (SET_DEST (XVECEXP (newpat, 0, 1))) != ZERO_EXTRACT\n \t   && GET_CODE (SET_DEST (XVECEXP (newpat, 0, 1))) != STRICT_LOW_PART\n \t   && ! (temp_expr = SET_DEST (XVECEXP (newpat, 0, 1)),\n@@ -4029,7 +4027,7 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n \t be first.  The PARALLEL might also have been pre-existing in i3,\n \t so we need to make sure that we won't wrongly hoist a SET to i2\n \t that would conflict with a death note present in there.  */\n-      if (!use_crosses_set_p (SET_SRC (set1), DF_INSN_LUID (i2))\n+      if (!modified_between_p (SET_SRC (set1), i2, i3)\n \t  && !(REG_P (SET_DEST (set1))\n \t       && find_reg_note (i2, REG_DEAD, SET_DEST (set1)))\n \t  && !(GET_CODE (SET_DEST (set1)) == SUBREG\n@@ -4044,7 +4042,7 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n \t  newi2pat = set1;\n \t  newpat = set0;\n \t}\n-      else if (!use_crosses_set_p (SET_SRC (set0), DF_INSN_LUID (i2))\n+      else if (!modified_between_p (SET_SRC (set0), i2, i3)\n \t       && !(REG_P (SET_DEST (set0))\n \t\t    && find_reg_note (i2, REG_DEAD, SET_DEST (set0)))\n \t       && !(GET_CODE (SET_DEST (set0)) == SUBREG\n@@ -13661,59 +13659,6 @@ get_last_value (const_rtx x)\n   return 0;\n }\n \f\n-/* Return nonzero if expression X refers to a REG or to memory\n-   that is set in an instruction more recent than FROM_LUID.  */\n-\n-static int\n-use_crosses_set_p (const_rtx x, int from_luid)\n-{\n-  const char *fmt;\n-  int i;\n-  enum rtx_code code = GET_CODE (x);\n-\n-  if (code == REG)\n-    {\n-      unsigned int regno = REGNO (x);\n-      unsigned endreg = END_REGNO (x);\n-\n-#ifdef PUSH_ROUNDING\n-      /* Don't allow uses of the stack pointer to be moved,\n-\t because we don't know whether the move crosses a push insn.  */\n-      if (regno == STACK_POINTER_REGNUM && PUSH_ARGS)\n-\treturn 1;\n-#endif\n-      for (; regno < endreg; regno++)\n-\t{\n-\t  reg_stat_type *rsp = &reg_stat[regno];\n-\t  if (rsp->last_set\n-\t      && rsp->last_set_label == label_tick\n-\t      && DF_INSN_LUID (rsp->last_set) > from_luid)\n-\t    return 1;\n-\t}\n-      return 0;\n-    }\n-\n-  if (code == MEM && mem_last_set > from_luid)\n-    return 1;\n-\n-  fmt = GET_RTX_FORMAT (code);\n-\n-  for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n-    {\n-      if (fmt[i] == 'E')\n-\t{\n-\t  int j;\n-\t  for (j = XVECLEN (x, i) - 1; j >= 0; j--)\n-\t    if (use_crosses_set_p (XVECEXP (x, i, j), from_luid))\n-\t      return 1;\n-\t}\n-      else if (fmt[i] == 'e'\n-\t       && use_crosses_set_p (XEXP (x, i), from_luid))\n-\treturn 1;\n-    }\n-  return 0;\n-}\n-\f\n /* Define three variables used for communication between the following\n    routines.  */\n "}]}