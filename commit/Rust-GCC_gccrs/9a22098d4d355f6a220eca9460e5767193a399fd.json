{"sha": "9a22098d4d355f6a220eca9460e5767193a399fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWEyMjA5OGQ0ZDM1NWY2YTIyMGVjYTk0NjBlNTc2NzE5M2EzOTlmZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-05-10T14:13:32Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-05-10T14:13:32Z"}, "message": "* tree.c (verify_type): Verify TYPE_BINFO and TYPE_VALUES_RAW.\n\nFrom-SVN: r222980", "tree": {"sha": "ad2f0123d0d8b6b62b92ec4bdc22a683ac285454", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad2f0123d0d8b6b62b92ec4bdc22a683ac285454"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a22098d4d355f6a220eca9460e5767193a399fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a22098d4d355f6a220eca9460e5767193a399fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a22098d4d355f6a220eca9460e5767193a399fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a22098d4d355f6a220eca9460e5767193a399fd/comments", "author": null, "committer": null, "parents": [{"sha": "22fa926f19ae0ebbeec9598592b0cecc9e3fcd87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22fa926f19ae0ebbeec9598592b0cecc9e3fcd87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22fa926f19ae0ebbeec9598592b0cecc9e3fcd87"}], "stats": {"total": 168, "additions": 166, "deletions": 2}, "files": [{"sha": "3ca24f33d0cd887e13f55e761db67824340a292b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a22098d4d355f6a220eca9460e5767193a399fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a22098d4d355f6a220eca9460e5767193a399fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a22098d4d355f6a220eca9460e5767193a399fd", "patch": "@@ -1,3 +1,7 @@\n+2015-05-09  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* tree.c (verify_type): Verify TYPE_BINFO and TYPE_VALUES_RAW.\n+\n 2015-05-09  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR tree-optimization/64454"}, {"sha": "fbedc1d52e35aaed96dbc2e7c730e5fe44982da9", "filename": "gcc/tree.c", "status": "modified", "additions": 162, "deletions": 2, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a22098d4d355f6a220eca9460e5767193a399fd/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a22098d4d355f6a220eca9460e5767193a399fd/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=9a22098d4d355f6a220eca9460e5767193a399fd", "patch": "@@ -12623,7 +12623,7 @@ verify_type (const_tree t)\n     {\n       /* FIXME: The following check should pass:\n \t  useless_type_conversion_p (const_cast <tree> (t), TREE_TYPE (TYPE_MIN_VALUE (t))\n-\t bud does not for C sizetypes in LTO.  */\n+\t but does not for C sizetypes in LTO.  */\n     }\n   else if (TYPE_MINVAL (t))\n     {\n@@ -12669,7 +12669,7 @@ verify_type (const_tree t)\n     {\n       /* FIXME: The following check should pass:\n \t  useless_type_conversion_p (const_cast <tree> (t), TREE_TYPE (TYPE_MAX_VALUE (t))\n-\t bud does not for C sizetypes in LTO.  */\n+\t but does not for C sizetypes in LTO.  */\n     }\n   else if (TREE_CODE (t) == ARRAY_TYPE)\n     {\n@@ -12688,6 +12688,166 @@ verify_type (const_tree t)\n       error_found = true;\n     }\n \n+  /* Check various uses of TYPE_BINFO.  */\n+  if (RECORD_OR_UNION_TYPE_P (t))\n+    {\n+      if (!TYPE_BINFO (t))\n+\t;\n+      else if (TREE_CODE (TYPE_BINFO (t)) != TREE_BINFO)\n+\t{\n+\t  error (\"TYPE_BINFO is not TREE_BINFO\");\n+\t  debug_tree (TYPE_BINFO (t));\n+\t  error_found = true;\n+\t}\n+      /* FIXME: Java builds invalid empty binfos that do not have\n+         TREE_TYPE set.  */\n+      else if (TREE_TYPE (TYPE_BINFO (t)) != TYPE_MAIN_VARIANT (t) && 0)\n+\t{\n+\t  error (\"TYPE_BINFO type is not TYPE_MAIN_VARIANT\");\n+\t  debug_tree (TREE_TYPE (TYPE_BINFO (t)));\n+\t  error_found = true;\n+\t}\n+    }\n+  else if (TYPE_LANG_SLOT_1 (t) && in_lto_p)\n+    {\n+      error (\"TYPE_LANG_SLOT_1 (binfo) field is non-NULL\");\n+      debug_tree (TYPE_LANG_SLOT_1 (t));\n+      error_found = true;\n+    }\n+\n+  /* Check various uses of TYPE_VALUES_RAW.  */\n+  if (TREE_CODE (t) == ENUMERAL_TYPE)\n+    for (tree l = TYPE_VALUES (t); l; l = TREE_CHAIN (l))\n+      {\n+\ttree value = TREE_VALUE (l);\n+\ttree name = TREE_PURPOSE (l);\n+\n+\t/* C FE porduce INTEGER_CST of INTEGER_TYPE, while C++ FE uses\n+ \t   CONST_DECL of ENUMERAL TYPE.  */\n+\tif (TREE_CODE (value) != INTEGER_CST && TREE_CODE (value) != CONST_DECL)\n+\t  {\n+\t    error (\"Enum value is not CONST_DECL or INTEGER_CST\");\n+\t    debug_tree (value);\n+\t    debug_tree (name);\n+\t    error_found = true;\n+\t  }\n+\tif (TREE_CODE (TREE_TYPE (value)) != INTEGER_TYPE\n+\t    && !useless_type_conversion_p (const_cast <tree> (t), TREE_TYPE (value)))\n+\t  {\n+\t    error (\"Enum value type is not INTEGER_TYPE nor convertible to the enum\");\n+\t    debug_tree (value);\n+\t    debug_tree (name);\n+\t    error_found = true;\n+\t  }\n+\tif (TREE_CODE (name) != IDENTIFIER_NODE)\n+\t  {\n+\t    error (\"Enum value name is not IDENTIFIER_NODE\");\n+\t    debug_tree (value);\n+\t    debug_tree (name);\n+\t    error_found = true;\n+\t  }\n+      }\n+  else if (TREE_CODE (t) == ARRAY_TYPE)\n+    {\n+      if (TYPE_DOMAIN (t) && TREE_CODE (TYPE_DOMAIN (t)) != INTEGER_TYPE)\n+\t{\n+\t  error (\"Array TYPE_DOMAIN is not integer type\");\n+\t  debug_tree (TYPE_DOMAIN (t));\n+\t  error_found = true;\n+\t}\n+    }\n+  else if (RECORD_OR_UNION_TYPE_P (t))\n+    for (tree fld = TYPE_FIELDS (t); fld; fld = TREE_CHAIN (fld))\n+      {\n+\t/* TODO: verify properties of decls.  */\n+\tif (TREE_CODE (fld) == FIELD_DECL)\n+\t  ;\n+\telse if (TREE_CODE (fld) == TYPE_DECL)\n+\t  ;\n+\telse if (TREE_CODE (fld) == CONST_DECL)\n+\t  ;\n+\telse if (TREE_CODE (fld) == VAR_DECL)\n+\t  ;\n+\telse if (TREE_CODE (fld) == TEMPLATE_DECL)\n+\t  ;\n+\telse if (TREE_CODE (fld) == USING_DECL)\n+\t  ;\n+\telse\n+\t  {\n+\t    error (\"Wrong tree in TYPE_FIELDS list\");\n+\t    debug_tree (fld);\n+\t    error_found = true;\n+\t  }\n+      }\n+  else if (TREE_CODE (t) == INTEGER_TYPE\n+\t   || TREE_CODE (t) == BOOLEAN_TYPE\n+\t   || TREE_CODE (t) == OFFSET_TYPE\n+\t   || TREE_CODE (t) == REFERENCE_TYPE\n+\t   || TREE_CODE (t) == NULLPTR_TYPE\n+\t   || TREE_CODE (t) == POINTER_TYPE)\n+    {\n+      if (TYPE_CACHED_VALUES_P (t) != (TYPE_CACHED_VALUES (t) != NULL))\n+\t{\n+\t  error (\"TYPE_CACHED_VALUES_P is %i while TYPE_CACHED_VALUES is %p\",\n+\t\t TYPE_CACHED_VALUES_P (t), (void *)TYPE_CACHED_VALUES (t));\n+\t  error_found = true;\n+\t}\n+      else if (TYPE_CACHED_VALUES_P (t) && TREE_CODE (TYPE_CACHED_VALUES (t)) != TREE_VEC)\n+\t{\n+\t  error (\"TYPE_CACHED_VALUES is not TREE_VEC\");\n+\t  debug_tree (TYPE_CACHED_VALUES (t));\n+\t  error_found = true;\n+\t}\n+      /* Verify just enough of cache to ensure that no one copied it to new type.\n+ \t All copying should go by copy_node that should clear it.  */\n+      else if (TYPE_CACHED_VALUES_P (t))\n+\t{\n+\t  int i;\n+\t  for (i = 0; i < TREE_VEC_LENGTH (TYPE_CACHED_VALUES (t)); i++)\n+\t    if (TREE_VEC_ELT (TYPE_CACHED_VALUES (t), i)\n+\t\t&& TREE_TYPE (TREE_VEC_ELT (TYPE_CACHED_VALUES (t), i)) != t)\n+\t      {\n+\t\terror (\"wrong TYPE_CACHED_VALUES entry\");\n+\t\tdebug_tree (TREE_VEC_ELT (TYPE_CACHED_VALUES (t), i));\n+\t\terror_found = true;\n+\t\tbreak;\n+\t      }\n+\t}\n+    }\n+  else if (TREE_CODE (t) == FUNCTION_TYPE || TREE_CODE (t) == METHOD_TYPE)\n+    for (tree l = TYPE_ARG_TYPES (t); l; l = TREE_CHAIN (l))\n+      {\n+\tif (TREE_PURPOSE (l))\n+\t  {\n+\t    error (\"TREE_PURPOSE is non-NULL in TYPE_ARG_TYPES list\");\n+\t    debug_tree (l);\n+\t    error_found = true;\n+\t  }\n+\tif (!TYPE_P (TREE_VALUE (l)))\n+\t  {\n+\t    error (\"Wrong entry in TYPE_ARG_TYPES list\");\n+\t    debug_tree (l);\n+\t    error_found = true;\n+\t  }\n+      }\n+  else if (!is_lang_specific (t) && TYPE_VALUES_RAW (t))\n+    {\n+      error (\"TYPE_VALUES_RAW field is non-NULL\");\n+      debug_tree (TYPE_VALUES_RAW (t));\n+      error_found = true;\n+    }\n+  if (TREE_CODE (t) != INTEGER_TYPE\n+      && TREE_CODE (t) != BOOLEAN_TYPE\n+      && TREE_CODE (t) != OFFSET_TYPE\n+      && TREE_CODE (t) != REFERENCE_TYPE\n+      && TREE_CODE (t) != NULLPTR_TYPE\n+      && TREE_CODE (t) != POINTER_TYPE\n+      && TYPE_CACHED_VALUES_P (t))\n+    {\n+      error (\"TYPE_CACHED_VALUES_P is set while it should not\");\n+      error_found = true;\n+    }\n+\n \n   if (error_found)\n     {"}]}