{"sha": "dfad806e1e15414f07060d2953f8f8b8f4586e24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZhZDgwNmUxZTE1NDE0ZjA3MDYwZDI5NTNmOGY4YjhmNDU4NmUyNA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2007-03-07T07:18:41Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2007-03-07T07:18:41Z"}, "message": "dwarf2out.c (is_inlined_entry_point): New\n\n* dwarf2out.c (is_inlined_entry_point): New\n(add_high_low_attributes): Emit DW_AT_entry_pc along with\nDW_AT_ranges if the first subblock is the entry point.\n\nFrom-SVN: r122650", "tree": {"sha": "4441bb1e926b9a7914c8b7ba50680245ac7a0bf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4441bb1e926b9a7914c8b7ba50680245ac7a0bf4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfad806e1e15414f07060d2953f8f8b8f4586e24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfad806e1e15414f07060d2953f8f8b8f4586e24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfad806e1e15414f07060d2953f8f8b8f4586e24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfad806e1e15414f07060d2953f8f8b8f4586e24/comments", "author": null, "committer": null, "parents": [{"sha": "3eb3cf05c0920517935067e613adf16672f7ea4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eb3cf05c0920517935067e613adf16672f7ea4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eb3cf05c0920517935067e613adf16672f7ea4b"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "236b40e1698c40b00648e69bd85fe47b160fcc72", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfad806e1e15414f07060d2953f8f8b8f4586e24/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfad806e1e15414f07060d2953f8f8b8f4586e24/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dfad806e1e15414f07060d2953f8f8b8f4586e24", "patch": "@@ -1,3 +1,9 @@\n+2007-03-07  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* dwarf2out.c (is_inlined_entry_point): New\n+\t(add_high_low_attributes): Emit DW_AT_entry_pc along with\n+\tDW_AT_ranges if the first subblock is the entry point.\n+\n 2007-03-06  David Daney  <ddaney@avtrex.com>\n \n \t* doc/install.texi (mips-*-*): Change recommended binutils"}, {"sha": "476f6ebf794c70bbdd531eae318397dc7b7214f1", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfad806e1e15414f07060d2953f8f8b8f4586e24/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfad806e1e15414f07060d2953f8f8b8f4586e24/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=dfad806e1e15414f07060d2953f8f8b8f4586e24", "patch": "@@ -12233,6 +12233,36 @@ add_call_src_coords_attributes (tree stmt, dw_die_ref die)\n   add_AT_unsigned (die, DW_AT_call_line, s.line);\n }\n \n+\n+/* If STMT's abstract origin is a function declaration and STMT's\n+   first subblock's abstract origin is the function's outermost block,\n+   then we're looking at the main entry point.  */\n+static bool\n+is_inlined_entry_point (tree stmt)\n+{\n+  tree decl, block;\n+\n+  if (!stmt || TREE_CODE (stmt) != BLOCK)\n+    return false;\n+\n+  decl = block_ultimate_origin (stmt);\n+\n+  if (!decl || TREE_CODE (decl) != FUNCTION_DECL)\n+    return false;\n+\n+  block = BLOCK_SUBBLOCKS (stmt);\n+\n+  if (block)\n+    {\n+      if (TREE_CODE (block) != BLOCK)\n+\treturn false;\n+\n+      block = block_ultimate_origin (block);\n+    }\n+\n+  return block == DECL_INITIAL (decl);\n+}\n+\n /* A helper function for gen_lexical_block_die and gen_inlined_subroutine_die.\n    Add low_pc and high_pc attributes to the DIE for a block STMT.  */\n \n@@ -12245,6 +12275,13 @@ add_high_low_attributes (tree stmt, dw_die_ref die)\n     {\n       tree chain;\n \n+      if (is_inlined_entry_point (stmt))\n+\t{\n+\t  ASM_GENERATE_INTERNAL_LABEL (label, BLOCK_BEGIN_LABEL,\n+\t\t\t\t       BLOCK_NUMBER (stmt));\n+\t  add_AT_lbl_id (die, DW_AT_entry_pc, label);\n+\t}\n+\n       add_AT_range_list (die, DW_AT_ranges, add_ranges (stmt));\n \n       chain = BLOCK_FRAGMENT_CHAIN (stmt);"}]}