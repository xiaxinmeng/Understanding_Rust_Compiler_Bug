{"sha": "828d4cf0c9778ede598a93b89924485aa5833772", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI4ZDRjZjBjOTc3OGVkZTU5OGE5M2I4OTkyNDQ4NWFhNTgzMzc3Mg==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2011-08-29T08:49:48Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T08:49:48Z"}, "message": "par_sco.adb, [...]: Record pragma name for each SCO statement corresponding to a pragma.\n\n2011-08-29  Thomas Quinot  <quinot@adacore.com>\n\n\t* par_sco.adb, scos.adb, scos.ads, put_scos.adb, get_scos.adb: Record\n\tpragma name for each SCO statement corresponding to a pragma.\n\nFrom-SVN: r178164", "tree": {"sha": "f67cc903fe5ea42f60eac20e9f66128b794cf152", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f67cc903fe5ea42f60eac20e9f66128b794cf152"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/828d4cf0c9778ede598a93b89924485aa5833772", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/828d4cf0c9778ede598a93b89924485aa5833772", "html_url": "https://github.com/Rust-GCC/gccrs/commit/828d4cf0c9778ede598a93b89924485aa5833772", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/828d4cf0c9778ede598a93b89924485aa5833772/comments", "author": null, "committer": null, "parents": [{"sha": "5cd7bb153885a9019abec99103faa3b9420e4298", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cd7bb153885a9019abec99103faa3b9420e4298", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cd7bb153885a9019abec99103faa3b9420e4298"}], "stats": {"total": 260, "additions": 156, "deletions": 104}, "files": [{"sha": "971cb8f1fb3d96881c99cc495689e79cc6c48d3f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828d4cf0c9778ede598a93b89924485aa5833772/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828d4cf0c9778ede598a93b89924485aa5833772/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=828d4cf0c9778ede598a93b89924485aa5833772", "patch": "@@ -1,3 +1,8 @@\n+2011-08-29  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* par_sco.adb, scos.adb, scos.ads, put_scos.adb, get_scos.adb: Record\n+\tpragma name for each SCO statement corresponding to a pragma.\n+\n 2011-08-29  Arnaud Charlet  <charlet@adacore.com>\n \n \t* opt.ads: Minor editing."}, {"sha": "1cc0706cec68947841d4b8e07d25df433df469de", "filename": "gcc/ada/get_scos.adb", "status": "modified", "additions": 65, "deletions": 42, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828d4cf0c9778ede598a93b89924485aa5833772/gcc%2Fada%2Fget_scos.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828d4cf0c9778ede598a93b89924485aa5833772/gcc%2Fada%2Fget_scos.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fget_scos.adb?ref=828d4cf0c9778ede598a93b89924485aa5833772", "patch": "@@ -23,8 +23,11 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with SCOs;  use SCOs;\n-with Types; use Types;\n+pragma Ada_2005;\n+\n+with SCOs;   use SCOs;\n+with Snames; use Snames;\n+with Types;  use Types;\n \n with Ada.IO_Exceptions; use Ada.IO_Exceptions;\n \n@@ -193,6 +196,10 @@ procedure Get_SCOs is\n       end loop;\n    end Skip_Spaces;\n \n+   Buf : String (1 .. 32_768);\n+   N   : Natural;\n+   --  Scratch buffer, and index into it\n+\n --  Start of processing for Get_Scos\n \n begin\n@@ -228,39 +235,32 @@ begin\n \n             --  Scan out dependency number and file name\n \n-            declare\n-               Ptr : String_Ptr := new String (1 .. 32768);\n-               N   : Integer;\n-\n-            begin\n-               Skip_Spaces;\n-               Dnum := Get_Int;\n-\n-               Skip_Spaces;\n+            Skip_Spaces;\n+            Dnum := Get_Int;\n \n-               N := 0;\n-               while Nextc > ' ' loop\n-                  N := N + 1;\n-                  Ptr.all (N) := Getc;\n-               end loop;\n+            Skip_Spaces;\n \n-               --  Make new unit table entry (will fill in To later)\n+            N := 0;\n+            while Nextc > ' ' loop\n+               N := N + 1;\n+               Buf (N) := Getc;\n+            end loop;\n \n-               SCO_Unit_Table.Append (\n-                 (File_Name => new String'(Ptr.all (1 .. N)),\n-                  Dep_Num   => Dnum,\n-                  From      => SCO_Table.Last + 1,\n-                  To        => 0));\n+            --  Make new unit table entry (will fill in To later)\n \n-               Free (Ptr);\n-            end;\n+            SCO_Unit_Table.Append (\n+              (File_Name => new String'(Buf (1 .. N)),\n+               Dep_Num   => Dnum,\n+               From      => SCO_Table.Last + 1,\n+               To        => 0));\n \n          --  Statement entry\n \n          when 'S' | 's' =>\n             declare\n                Typ : Character;\n                Key : Character;\n+               Pid : Pragma_Id;\n \n             begin\n                --  If continuation, reset Last indication in last entry\n@@ -290,16 +290,33 @@ begin\n                      Typ := ' ';\n                   else\n                      Skipc;\n+                     if Typ = 'P' and then Nextc not in '1' .. '9' then\n+                        N := 1;\n+                        loop\n+                           Buf (N) := Getc;\n+                           exit when Nextc = ':';\n+                           N := N + 1;\n+                        end loop;\n+                        begin\n+                           Pid := Pragma_Id'Value (Buf (1 .. N));\n+                        exception\n+                           when Constraint_Error =>\n+                              Pid := Unknown_Pragma;\n+                        end;\n+                        Skipc;\n+                     end if;\n                   end if;\n \n                   Get_Source_Location_Range (Loc1, Loc2);\n \n-                  Add_SCO\n-                    (C1   => Key,\n-                     C2   => Typ,\n-                     From => Loc1,\n-                     To   => Loc2,\n-                     Last => At_EOL);\n+                  SCO_Table.Append\n+                    ((C1          => Key,\n+                      C2          => Typ,\n+                      From        => Loc1,\n+                      To          => Loc2,\n+                      Last        => At_EOL,\n+                      Pragma_Sloc => No_Location,\n+                      Pragma_Name => Pid));\n \n                   exit when At_EOL;\n                   Key := 's';\n@@ -326,12 +343,13 @@ begin\n                   Get_Source_Location (Loc);\n                end if;\n \n-               Add_SCO\n-                 (C1   => Dtyp,\n-                  C2   => ' ',\n-                  From => Loc,\n-                  To   => No_Source_Location,\n-                  Last => False);\n+               SCO_Table.Append\n+                 ((C1     => Dtyp,\n+                   C2     => ' ',\n+                   From   => Loc,\n+                   To     => No_Source_Location,\n+                   Last   => False,\n+                   others => <>));\n             end;\n \n             --  Loop through terms in complex expression\n@@ -342,11 +360,12 @@ begin\n                   Cond := C;\n                   Skipc;\n                   Get_Source_Location_Range (Loc1, Loc2);\n-                  Add_SCO\n-                    (C2   => Cond,\n-                     From => Loc1,\n-                     To   => Loc2,\n-                     Last => False);\n+                  SCO_Table.Append\n+                    ((C2     => Cond,\n+                      From   => Loc1,\n+                      To     => Loc2,\n+                      Last   => False,\n+                      others => <>));\n \n                elsif C = '!' or else\n                      C = '&' or else\n@@ -358,7 +377,11 @@ begin\n                      Loc : Source_Location;\n                   begin\n                      Get_Source_Location (Loc);\n-                     Add_SCO (C1 => C, From => Loc, Last => False);\n+                     SCO_Table.Append\n+                       ((C1     => C,\n+                         From   => Loc,\n+                         Last   => False,\n+                         others => <>));\n                   end;\n \n                elsif C = ' ' then"}, {"sha": "29ae2ef2fa2feb0ca0d4c415f5861357f17b5b05", "filename": "gcc/ada/par_sco.adb", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828d4cf0c9778ede598a93b89924485aa5833772/gcc%2Fada%2Fpar_sco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828d4cf0c9778ede598a93b89924485aa5833772/gcc%2Fada%2Fpar_sco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.adb?ref=828d4cf0c9778ede598a93b89924485aa5833772", "patch": "@@ -124,7 +124,8 @@ package body Par_SCO is\n       From        : Source_Ptr;\n       To          : Source_Ptr;\n       Last        : Boolean;\n-      Pragma_Sloc : Source_Ptr := No_Location);\n+      Pragma_Sloc : Source_Ptr := No_Location;\n+      Pragma_Name : Pragma_Id  := Unknown_Pragma);\n    --  Append an entry to SCO_Table with fields set as per arguments\n \n    procedure Traverse_Declarations_Or_Statements  (L : List_Id);\n@@ -916,7 +917,8 @@ package body Par_SCO is\n       From        : Source_Ptr;\n       To          : Source_Ptr;\n       Last        : Boolean;\n-      Pragma_Sloc : Source_Ptr := No_Location)\n+      Pragma_Sloc : Source_Ptr := No_Location;\n+      Pragma_Name : Pragma_Id  := Unknown_Pragma)\n    is\n       function To_Source_Location (S : Source_Ptr) return Source_Location;\n       --  Converts Source_Ptr value to Source_Location (line/col) format\n@@ -939,13 +941,14 @@ package body Par_SCO is\n    --  Start of processing for Set_Table_Entry\n \n    begin\n-      Add_SCO\n-        (C1          => C1,\n-         C2          => C2,\n-         From        => To_Source_Location (From),\n-         To          => To_Source_Location (To),\n-         Last        => Last,\n-         Pragma_Sloc => Pragma_Sloc);\n+      SCO_Table.Append\n+        ((C1          => C1,\n+          C2          => C2,\n+          From        => To_Source_Location (From),\n+          To          => To_Source_Location (To),\n+          Last        => Last,\n+          Pragma_Sloc => Pragma_Sloc,\n+          Pragma_Name => Pragma_Name));\n    end Set_Table_Entry;\n \n    -----------------------------------------\n@@ -957,6 +960,7 @@ package body Par_SCO is\n    --  since they are shared by recursive calls to this procedure.\n \n    type SC_Entry is record\n+      N    : Node_Id;\n       From : Source_Ptr;\n       To   : Source_Ptr;\n       Typ  : Character;\n@@ -1080,6 +1084,7 @@ package body Par_SCO is\n             declare\n                SCE         : SC_Entry renames SC.Table (J);\n                Pragma_Sloc : Source_Ptr := No_Location;\n+               Pragma_Name : Pragma_Id  := Unknown_Pragma;\n             begin\n                --  For the case of a statement SCO for a pragma controlled by\n                --  Set_SCO_Pragma_Enabled, set Pragma_Sloc so that the SCO (and\n@@ -1090,6 +1095,10 @@ package body Par_SCO is\n                   Pragma_Sloc := SCE.From;\n                   Condition_Pragma_Hash_Table.Set\n                     (Pragma_Sloc, SCO_Table.Last + 1);\n+                  Pragma_Name := Get_Pragma_Id (Sinfo.Pragma_Name (SCE.N));\n+\n+               elsif SCE.Typ = 'P' then\n+                  Pragma_Name := Get_Pragma_Id (Sinfo.Pragma_Name (SCE.N));\n                end if;\n \n                Set_Table_Entry\n@@ -1098,7 +1107,8 @@ package body Par_SCO is\n                   From        => SCE.From,\n                   To          => SCE.To,\n                   Last        => (J = SC_Last),\n-                  Pragma_Sloc => Pragma_Sloc);\n+                  Pragma_Sloc => Pragma_Sloc,\n+                  Pragma_Name => Pragma_Name);\n             end;\n          end loop;\n \n@@ -1134,7 +1144,7 @@ package body Par_SCO is\n          T : Source_Ptr;\n       begin\n          Sloc_Range (N, F, T);\n-         SC.Append ((F, T, Typ));\n+         SC.Append ((N, F, T, Typ));\n       end Extend_Statement_Sequence;\n \n       procedure Extend_Statement_Sequence\n@@ -1147,7 +1157,7 @@ package body Par_SCO is\n       begin\n          Sloc_Range (From, F, Dummy);\n          Sloc_Range (To, Dummy, T);\n-         SC.Append ((F, T, Typ));\n+         SC.Append ((From, F, T, Typ));\n       end Extend_Statement_Sequence;\n \n       -----------------------------"}, {"sha": "95c4609a9a3a228906f5b3deb493d830ab0793c4", "filename": "gcc/ada/put_scos.adb", "status": "modified", "additions": 39, "deletions": 7, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828d4cf0c9778ede598a93b89924485aa5833772/gcc%2Fada%2Fput_scos.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828d4cf0c9778ede598a93b89924485aa5833772/gcc%2Fada%2Fput_scos.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fput_scos.adb?ref=828d4cf0c9778ede598a93b89924485aa5833772", "patch": "@@ -25,6 +25,7 @@\n \n with Par_SCO; use Par_SCO;\n with SCOs;    use SCOs;\n+with Snames;  use Snames;\n \n procedure Put_SCOs is\n    Ctr : Nat;\n@@ -35,6 +36,9 @@ procedure Put_SCOs is\n    procedure Output_Source_Location (Loc : Source_Location);\n    --  Output source location in line:col format\n \n+   procedure Output_String (S : String);\n+   --  Output S\n+\n    ------------------\n    -- Output_Range --\n    ------------------\n@@ -57,6 +61,17 @@ procedure Put_SCOs is\n       Write_Info_Nat  (Nat (Loc.Col));\n    end Output_Source_Location;\n \n+   -------------------\n+   -- Output_String --\n+   -------------------\n+\n+   procedure Output_String (S : String) is\n+   begin\n+      for J in S'Range loop\n+         Write_Info_Char (S (J));\n+      end loop;\n+   end Output_String;\n+\n --  Start of processing for Put_SCOs\n \n begin\n@@ -81,9 +96,7 @@ begin\n             Write_Info_Nat (SUT.Dep_Num);\n             Write_Info_Char (' ');\n \n-            for N in SUT.File_Name'Range loop\n-               Write_Info_Char (SUT.File_Name (N));\n-            end loop;\n+            Output_String (SUT.File_Name.all);\n \n             Write_Info_Terminate;\n          end if;\n@@ -125,11 +138,30 @@ begin\n \n                         Write_Info_Char (' ');\n \n-                        if SCO_Table.Table (Start).C2 /= ' ' then\n-                           Write_Info_Char (SCO_Table.Table (Start).C2);\n-                        end if;\n+                        declare\n+                           Sent : SCO_Table_Entry\n+                                    renames SCO_Table.Table (Start);\n+                        begin\n+                           if Sent.C2 /= ' ' then\n+                              Write_Info_Char (Sent.C2);\n+                              if Sent.C2 = 'P'\n+                                   and then Sent.Pragma_Name /= Unknown_Pragma\n+                              then\n+                                 declare\n+                                    Pnam : constant String :=\n+                                             Sent.Pragma_Name'Img;\n+                                 begin\n+                                    --  Strip leading \"PRAGMA_\"\n+\n+                                    Output_String\n+                                      (Pnam (Pnam'First + 7 .. Pnam'Last));\n+                                    Write_Info_Char (':');\n+                                 end;\n+                              end if;\n+                           end if;\n \n-                        Output_Range (SCO_Table.Table (Start));\n+                           Output_Range (Sent);\n+                        end;\n \n                         --  Increment entry counter (up to 6 entries per line,\n                         --  continuation lines are marked Cs)."}, {"sha": "b7df692de3a3e95f42e4ee3eb9fbf54a6a1123b4", "filename": "gcc/ada/scos.adb", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828d4cf0c9778ede598a93b89924485aa5833772/gcc%2Fada%2Fscos.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828d4cf0c9778ede598a93b89924485aa5833772/gcc%2Fada%2Fscos.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscos.adb?ref=828d4cf0c9778ede598a93b89924485aa5833772", "patch": "@@ -25,22 +25,6 @@\n \n package body SCOs is\n \n-   -------------\n-   -- Add_SCO --\n-   -------------\n-\n-   procedure Add_SCO\n-     (From        : Source_Location := No_Source_Location;\n-      To          : Source_Location := No_Source_Location;\n-      C1          : Character       := ' ';\n-      C2          : Character       := ' ';\n-      Last        : Boolean         := False;\n-      Pragma_Sloc : Source_Ptr      := No_Location)\n-   is\n-   begin\n-      SCO_Table.Append ((From, To, C1, C2, Last, Pragma_Sloc));\n-   end Add_SCO;\n-\n    ----------------\n    -- Initialize --\n    ----------------"}, {"sha": "7c0bb820d548a1eb2cf6b96a850fb45963d0a8bd", "filename": "gcc/ada/scos.ads", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828d4cf0c9778ede598a93b89924485aa5833772/gcc%2Fada%2Fscos.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828d4cf0c9778ede598a93b89924485aa5833772/gcc%2Fada%2Fscos.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscos.ads?ref=828d4cf0c9778ede598a93b89924485aa5833772", "patch": "@@ -28,7 +28,11 @@\n --  the ALI file, and by Get_SCO/Put_SCO to read and write the text form that\n --  is used in the ALI file.\n \n-with Types; use Types;\n+with Snames; use Snames;\n+--  Note: used for Pragma_Id only, no other feature from Snames should be used,\n+--  as a simplified version is maintained in Xcov.\n+\n+with Types;  use Types;\n \n with GNAT.Table;\n \n@@ -143,18 +147,18 @@ package SCOs is\n    --    where each sloc-range corresponds to a single statement, and * is\n    --    one of:\n \n-   --      t  type declaration\n-   --      s  subtype declaration\n-   --      o  object declaration\n-   --      r  renaming declaration\n-   --      i  generic instantiation\n-   --      C  CASE statement (from CASE through end of expression)\n-   --      E  EXIT statement\n-   --      F  FOR loop statement (from FOR through end of iteration scheme)\n-   --      I  IF statement (from IF through end of condition)\n-   --      P  PRAGMA\n-   --      R  extended RETURN statement\n-   --      W  WHILE loop statement (from WHILE through end of condition)\n+   --      t        type declaration\n+   --      s        subtype declaration\n+   --      o        object declaration\n+   --      r        renaming declaration\n+   --      i        generic instantiation\n+   --      C        CASE statement (from CASE through end of expression)\n+   --      E        EXIT statement\n+   --      F        FOR loop (from FOR through end of iteration scheme)\n+   --      I        IF statement (from IF through end of condition)\n+   --      P[name:] PRAGMA with the indicated name\n+   --      R        extended RETURN statement\n+   --      W        WHILE loop statement (from WHILE through end of condition)\n \n    --      Note: for I and W, condition above is in the RM syntax sense (this\n    --      condition is a decision in SCO terminology).\n@@ -352,16 +356,19 @@ package SCOs is\n    No_Source_Location : Source_Location := (No_Line_Number, No_Column_Number);\n \n    type SCO_Table_Entry is record\n-      From : Source_Location;\n-      To   : Source_Location;\n-      C1   : Character;\n-      C2   : Character;\n-      Last : Boolean;\n+      From : Source_Location := No_Source_Location;\n+      To   : Source_Location := No_Source_Location;\n+      C1   : Character       := ' ';\n+      C2   : Character       := ' ';\n+      Last : Boolean         := False;\n \n       Pragma_Sloc : Source_Ptr := No_Location;\n       --  For the statement SCO for a pragma, or for any expression SCO nested\n       --  in a pragma Debug/Assert/PPC, location of PRAGMA token (used for\n       --  control of SCO output, value not recorded in ALI file).\n+\n+      Pragma_Name : Pragma_Id := Unknown_Pragma;\n+      --  For the statement SCO for a pragma, gives the pragma name\n    end record;\n \n    package SCO_Table is new GNAT.Table (\n@@ -486,13 +493,4 @@ package SCOs is\n    procedure Initialize;\n    --  Reset tables for a new compilation\n \n-   procedure Add_SCO\n-     (From        : Source_Location := No_Source_Location;\n-      To          : Source_Location := No_Source_Location;\n-      C1          : Character       := ' ';\n-      C2          : Character       := ' ';\n-      Last        : Boolean         := False;\n-      Pragma_Sloc : Source_Ptr      := No_Location);\n-   --  Adds one entry to SCO table with given field values\n-\n end SCOs;"}]}