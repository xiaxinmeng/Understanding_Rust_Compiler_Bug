{"sha": "7c2e3b9b525dd16f20ec372f867b3d2d1d4feb20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2MyZTNiOWI1MjVkZDE2ZjIwZWMzNzJmODY3YjNkMmQxZDRmZWIyMA==", "commit": {"author": {"name": "Godmar Back", "email": "gback@cs.utah.edu", "date": "1999-11-18T03:59:48Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "1999-11-18T03:59:48Z"}, "message": "typeck.c: (lookup_java_method): search all inherited interfaces when...\n\nWed Nov  3 15:20:02 MST 1999  Godmar Back <gback@cs.utah.edu>\n\n        * typeck.c: (lookup_java_method):  search all inherited\n        interfaces when looking up interface method.\n\nFrom-SVN: r30566", "tree": {"sha": "37384a8f1d7fcf9d2abb90b7b44b7013c39a41fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37384a8f1d7fcf9d2abb90b7b44b7013c39a41fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c2e3b9b525dd16f20ec372f867b3d2d1d4feb20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c2e3b9b525dd16f20ec372f867b3d2d1d4feb20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c2e3b9b525dd16f20ec372f867b3d2d1d4feb20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c2e3b9b525dd16f20ec372f867b3d2d1d4feb20/comments", "author": null, "committer": null, "parents": [{"sha": "13aa2d0521d1ec7ad385511d24ee1ef68ce9a79d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13aa2d0521d1ec7ad385511d24ee1ef68ce9a79d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13aa2d0521d1ec7ad385511d24ee1ef68ce9a79d"}], "stats": {"total": 61, "additions": 56, "deletions": 5}, "files": [{"sha": "e2d8fa868cc036f321bf5ae5ea6fafb8d4d69382", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c2e3b9b525dd16f20ec372f867b3d2d1d4feb20/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c2e3b9b525dd16f20ec372f867b3d2d1d4feb20/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=7c2e3b9b525dd16f20ec372f867b3d2d1d4feb20", "patch": "@@ -16,6 +16,11 @@ Tue Nov  9 12:12:38 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \t* class.c (finish_class): Emit inlined methods if any native\n \tmethods exist in the class.  Fixes PR gcj/85.\n \n+Wed Nov  3 15:20:02 MST 1999  Godmar Back <gback@cs.utah.edu>\n+\n+\t* typeck.c: (lookup_java_method):  search all inherited\n+\tinterfaces when looking up interface method.\n+\n Mon Nov  1 23:42:00 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \n \t* parse.y (method_header:): Issue error message for rule `type"}, {"sha": "331de1c9fb61be282dac7b9898c69f87bb7a90ed", "filename": "gcc/java/typeck.c", "status": "modified", "additions": 51, "deletions": 5, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c2e3b9b525dd16f20ec372f867b3d2d1d4feb20/gcc%2Fjava%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c2e3b9b525dd16f20ec372f867b3d2d1d4feb20/gcc%2Fjava%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Ftypeck.c?ref=7c2e3b9b525dd16f20ec372f867b3d2d1d4feb20", "patch": "@@ -743,21 +743,67 @@ lookup_argument_method (clas, method_name, method_signature)\n    (Contrast lookup_argument_method, which ignores return type.) */\n \n tree\n-lookup_java_method (clas, method_name, method_signature)\n-     tree clas, method_name, method_signature;\n+lookup_java_method (searched_class, method_name, method_signature)\n+     tree searched_class, method_name, method_signature;\n {\n   tree method;\n-  while (clas != NULL_TREE)\n+  tree currently_searched = searched_class;\n+\n+  while (currently_searched != NULL_TREE)\n     {\n-      for (method = TYPE_METHODS (clas);\n+      for (method = TYPE_METHODS (currently_searched);\n \t   method != NULL_TREE;  method = TREE_CHAIN (method))\n \t{\n \t  tree method_sig = build_java_signature (TREE_TYPE (method));\n \t  if (DECL_NAME (method) == method_name \n \t      && method_sig == method_signature)\n \t    return method;\n \t}\n-      clas = CLASSTYPE_SUPER (clas);\n+      currently_searched = CLASSTYPE_SUPER (currently_searched);\n+    }\n+\n+  /* If this class is an interface class, search its superinterfaces as\n+   * well.  A superinterface is not an interface's superclass: a\n+   * super interface is implemented by the interface.\n+   */\n+\n+  currently_searched = searched_class;\n+  if (CLASS_INTERFACE (TYPE_NAME (currently_searched)))\n+    {\n+      int i;\n+      int interface_len = \n+\tTREE_VEC_LENGTH (TYPE_BINFO_BASETYPES (currently_searched)) - 1;\n+\n+      for (i = interface_len; i > 0; i--)\n+       {\n+         tree child = \n+\t   TREE_VEC_ELT (TYPE_BINFO_BASETYPES (currently_searched), i);\n+         tree iclass = BINFO_TYPE (child);\n+\n+         /* If the superinterface hasn't been loaded yet, do so now.  */\n+         if (! CLASS_LOADED_P (iclass))\n+           load_class (iclass, 1);\n+\n+         for (method = TYPE_METHODS (iclass);\n+              method != NULL_TREE;  method = TREE_CHAIN (method))\n+           {\n+             tree method_sig = build_java_signature (TREE_TYPE (method));\n+\n+             if (DECL_NAME (method) == method_name \n+\t\t && method_sig == method_signature)\n+               return method;\n+           }\n+\n+         /* it could be defined in a supersuperinterface */\n+         if (CLASS_INTERFACE (TYPE_NAME (iclass)))\n+           {\n+             method = lookup_java_method (iclass, \n+\t\t\t\t\t  method_name, \n+\t\t\t\t\t  method_signature);\n+             if (method != NULL_TREE) \n+\t       return method;\n+           }\n+       }\n     }\n   return NULL_TREE;\n }"}]}