{"sha": "d24a32a1860b9d5a23ccca40cc70d165cd285e8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI0YTMyYTE4NjBiOWQ1YTIzY2NjYTQwY2M3MGQxNjVjZDI4NWU4Yg==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2007-07-20T01:29:43Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2007-07-20T01:29:43Z"}, "message": "tree-ssa-loop-niter.c (assert_loop_rolls_lt): Convert the operands of compare to the same type.\n\n\t* tree-ssa-loop-niter.c (assert_loop_rolls_lt): Convert the operands\n\tof compare to the same type.\n\t* cfgloopmanip.c (add_loop): Update information about loop exits.\n\t(loop_version): Remove the innermost loop requirement.\n\t* tree-ssa-loop-manip.c (determine_exit_conditions): Convert bounds\n\tto sizetype for pointers.\n\nFrom-SVN: r126796", "tree": {"sha": "c81b2b6144d7b5c7ede0be2fbe0f15356a34c424", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c81b2b6144d7b5c7ede0be2fbe0f15356a34c424"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d24a32a1860b9d5a23ccca40cc70d165cd285e8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d24a32a1860b9d5a23ccca40cc70d165cd285e8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d24a32a1860b9d5a23ccca40cc70d165cd285e8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d24a32a1860b9d5a23ccca40cc70d165cd285e8b/comments", "author": null, "committer": null, "parents": [{"sha": "9143267b2119f7cded46e34402ec37665a9f045a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9143267b2119f7cded46e34402ec37665a9f045a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9143267b2119f7cded46e34402ec37665a9f045a"}], "stats": {"total": 40, "additions": 31, "deletions": 9}, "files": [{"sha": "4a999b0281ddae277e3b9e922e420e094db3f6d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d24a32a1860b9d5a23ccca40cc70d165cd285e8b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d24a32a1860b9d5a23ccca40cc70d165cd285e8b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d24a32a1860b9d5a23ccca40cc70d165cd285e8b", "patch": "@@ -1,3 +1,12 @@\n+2007-07-20  Zdenek Dvorak  <dvorakz@suse.cz>\n+\n+\t* tree-ssa-loop-niter.c (assert_loop_rolls_lt): Convert the operands\n+\tof compare to the same type.\n+\t* cfgloopmanip.c (add_loop): Update information about loop exits.\n+\t(loop_version): Remove the innermost loop requirement.\n+\t* tree-ssa-loop-manip.c (determine_exit_conditions): Convert bounds\n+\tto sizetype for pointers.\n+\n 2007-07-18  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* Makefile.in (D32PBIT_FUNCS): Add _sd_to_tf and _tf_to_sd."}, {"sha": "83c4c570c5a9625e5190b9aaaeb540f821fab586", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d24a32a1860b9d5a23ccca40cc70d165cd285e8b/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d24a32a1860b9d5a23ccca40cc70d165cd285e8b/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=d24a32a1860b9d5a23ccca40cc70d165cd285e8b", "patch": "@@ -411,6 +411,8 @@ add_loop (struct loop *loop, struct loop *outer)\n   basic_block *bbs;\n   int i, n;\n   struct loop *subloop;\n+  edge e;\n+  edge_iterator ei;\n \n   /* Add it to loop structure.  */\n   place_new_loop (loop);\n@@ -441,6 +443,15 @@ add_loop (struct loop *loop, struct loop *outer)\n \t}\n     }\n \n+  /* Update the information about loop exit edges.  */\n+  for (i = 0; i < n; i++)\n+    {\n+      FOR_EACH_EDGE (e, ei, bbs[i]->succs)\n+\t{\n+\t  rescan_loop_exit (e, false, false);\n+\t}\n+    }\n+\n   free (bbs);\n }\n \n@@ -1283,10 +1294,6 @@ loop_version (struct loop *loop,\n   struct loop *nloop;\n   basic_block cond_bb;\n \n-  /* CHECKME: Loop versioning does not handle nested loop at this point.  */\n-  if (loop->inner)\n-    return NULL;\n-\n   /* Record entry and latch edges for the loop */\n   entry = loop_preheader_edge (loop);\n   irred_flag = entry->flags & EDGE_IRREDUCIBLE_LOOP;"}, {"sha": "35bf97895b56528f19b1e8ea08bb3590dfb3d4b9", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d24a32a1860b9d5a23ccca40cc70d165cd285e8b/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d24a32a1860b9d5a23ccca40cc70d165cd285e8b/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=d24a32a1860b9d5a23ccca40cc70d165cd285e8b", "patch": "@@ -670,13 +670,17 @@ determine_exit_conditions (struct loop *loop, struct tree_niter_desc *desc,\n   tree base = desc->control.base;\n   tree step = desc->control.step;\n   tree bound = desc->bound;\n-  tree type = TREE_TYPE (base);\n+  tree type = TREE_TYPE (step);\n   tree bigstep, delta;\n   tree min = lower_bound_in_type (type, type);\n   tree max = upper_bound_in_type (type, type);\n   enum tree_code cmp = desc->cmp;\n   tree cond = boolean_true_node, assum;\n \n+  /* For pointers, do the arithmetics in the type of step (sizetype).  */\n+  base = fold_convert (type, base);\n+  bound = fold_convert (type, bound);\n+\n   *enter_cond = boolean_false_node;\n   *exit_base = NULL_TREE;\n   *exit_step = NULL_TREE;"}, {"sha": "fdce4be01d479c8e404b54ec3a1eddc10b71df19", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d24a32a1860b9d5a23ccca40cc70d165cd285e8b/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d24a32a1860b9d5a23ccca40cc70d165cd285e8b/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=d24a32a1860b9d5a23ccca40cc70d165cd285e8b", "patch": "@@ -918,8 +918,9 @@ assert_loop_rolls_lt (tree type, affine_iv *iv0, affine_iv *iv1,\n \n       /* And then we can compute iv0->base - diff, and compare it with\n \t iv1->base.  */      \n-      mbzl = fold_build2 (MINUS_EXPR, type1, iv0->base, diff);\n-      mbzr = iv1->base;\n+      mbzl = fold_build2 (MINUS_EXPR, type1, \n+\t\t\t  fold_convert (type1, iv0->base), diff);\n+      mbzr = fold_convert (type1, iv1->base);\n     }\n   else\n     {\n@@ -934,8 +935,9 @@ assert_loop_rolls_lt (tree type, affine_iv *iv0, affine_iv *iv1,\n \t\t\t\t    iv1->base, bound);\n \t}\n \n-      mbzl = iv0->base;\n-      mbzr = fold_build2 (MINUS_EXPR, type1, iv1->base, diff);\n+      mbzl = fold_convert (type1, iv0->base);\n+      mbzr = fold_build2 (MINUS_EXPR, type1,\n+\t\t\t  fold_convert (type1, iv1->base), diff);\n     }\n \n   if (!integer_nonzerop (assumption))"}]}