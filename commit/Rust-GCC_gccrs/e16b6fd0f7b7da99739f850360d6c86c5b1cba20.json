{"sha": "e16b6fd0f7b7da99739f850360d6c86c5b1cba20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE2YjZmZDBmN2I3ZGE5OTczOWY4NTAzNjBkNmM4NmM1YjFjYmEyMA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2011-03-31T13:28:29Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2011-03-31T13:28:29Z"}, "message": "tree-ssa-forwprop.c (forward_propagate_into_cond): Avoid typo potentially leading to null pointer dereference.\n\n\n\t* tree-ssa-forwprop.c (forward_propagate_into_cond): Avoid \n\ttypo potentially leading to null pointer dereference.\n\n\t* caller-save.c (new_saved_hard_reg): Eliminate return value.\n\t(setup_save_areas): Corresponding changes to avoid useless\n\tassignments.\n\n\t* jump.c (reversed_comparison_code_parts): Avoid successive return\n\tstatements when REVERSE_CONDITION is defined.\n\n\t* expr.c (expand_assignment): Avoid useless assignments.\n\t(expand_expr_real_1): Likewise.\n\t(expand_expr_real_2): Avoid useless statements.\n\n\t* tree-ssa-phiopt.c (minmax_replacement): Avoid useless statement.\n\n\t* cfgexpand.c (expand_gimple_basic_block): Avoid useless assignment.\n\n\t* tree-ssa-dce.c (mark_stmt_if_obviously_necessary): Avoid useless\n\tstatements.\n\n\t* stmt.c (expand_expr_stmt): Avoid useless assignment.\n\nFrom-SVN: r171780", "tree": {"sha": "9825cddc84870c8f20906bf543d746a838379d92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9825cddc84870c8f20906bf543d746a838379d92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e16b6fd0f7b7da99739f850360d6c86c5b1cba20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e16b6fd0f7b7da99739f850360d6c86c5b1cba20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e16b6fd0f7b7da99739f850360d6c86c5b1cba20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e16b6fd0f7b7da99739f850360d6c86c5b1cba20/comments", "author": null, "committer": null, "parents": [{"sha": "eb1eb91413b50038212d148bf651c40e4d0e32f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb1eb91413b50038212d148bf651c40e4d0e32f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb1eb91413b50038212d148bf651c40e4d0e32f9"}], "stats": {"total": 60, "additions": 36, "deletions": 24}, "files": [{"sha": "f33051f814f3742c3d1184e90a0a6d51fb93b9a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e16b6fd0f7b7da99739f850360d6c86c5b1cba20/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e16b6fd0f7b7da99739f850360d6c86c5b1cba20/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e16b6fd0f7b7da99739f850360d6c86c5b1cba20", "patch": "@@ -1,3 +1,28 @@\n+2011-03-31  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-forwprop.c (forward_propagate_into_cond): Avoid \n+\ttypo potentially leading to null pointer dereference.\n+\n+\t* caller-save.c (new_saved_hard_reg): Eliminate return value.\n+\t(setup_save_areas): Corresponding changes to avoid useless\n+\tassignments.\n+\n+\t* jump.c (reversed_comparison_code_parts): Avoid successive return\n+\tstatements when REVERSE_CONDITION is defined.\n+\n+\t* expr.c (expand_assignment): Avoid useless assignments.\n+\t(expand_expr_real_1): Likewise.\n+\t(expand_expr_real_2): Avoid useless statements.\n+\n+\t* tree-ssa-phiopt.c (minmax_replacement): Avoid useless statement.\n+\n+\t* cfgexpand.c (expand_gimple_basic_block): Avoid useless assignment.\n+\n+\t* tree-ssa-dce.c (mark_stmt_if_obviously_necessary): Avoid useless\n+\tstatements.\n+\n+\t* stmt.c (expand_expr_stmt): Avoid useless assignment.\n+\n 2011-03-31  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR target/47109"}, {"sha": "369b55c230285947d365dfc91b7e3a1fbfb10c89", "filename": "gcc/caller-save.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e16b6fd0f7b7da99739f850360d6c86c5b1cba20/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e16b6fd0f7b7da99739f850360d6c86c5b1cba20/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=e16b6fd0f7b7da99739f850360d6c86c5b1cba20", "patch": "@@ -82,7 +82,7 @@ static int reg_restore_code (int, enum machine_mode);\n \n struct saved_hard_reg;\n static void initiate_saved_hard_regs (void);\n-static struct saved_hard_reg *new_saved_hard_reg (int, int);\n+static void new_saved_hard_reg (int, int);\n static void finish_saved_hard_regs (void);\n static int saved_hard_reg_compare_func (const void *, const void *);\n \n@@ -346,7 +346,7 @@ initiate_saved_hard_regs (void)\n \n /* Allocate and return new saved hard register with given REGNO and\n    CALL_FREQ.  */\n-static struct saved_hard_reg *\n+static void\n new_saved_hard_reg (int regno, int call_freq)\n {\n   struct saved_hard_reg *saved_reg;\n@@ -359,7 +359,6 @@ new_saved_hard_reg (int regno, int call_freq)\n   saved_reg->call_freq = call_freq;\n   saved_reg->first_p = FALSE;\n   saved_reg->next = -1;\n-  return saved_reg;\n }\n \n /* Free memory allocated for the saved hard registers.  */\n@@ -463,7 +462,7 @@ setup_save_areas (void)\n \t    if (hard_reg_map[regno] != NULL)\n \t      hard_reg_map[regno]->call_freq += freq;\n \t    else\n-\t      saved_reg = new_saved_hard_reg (regno, freq);\n+\t      new_saved_hard_reg (regno, freq);\n \t    SET_HARD_REG_BIT (hard_regs_used, regno);\n \t  }\n       /* Look through all live pseudos, mark their hard registers.  */\n@@ -483,7 +482,7 @@ setup_save_areas (void)\n \t\tif (hard_reg_map[r] != NULL)\n \t\t  hard_reg_map[r]->call_freq += freq;\n \t\telse\n-\t\t  saved_reg = new_saved_hard_reg (r, freq);\n+\t\t  new_saved_hard_reg (r, freq);\n \t\t SET_HARD_REG_BIT (hard_regs_to_save, r);\n \t\t SET_HARD_REG_BIT (hard_regs_used, r);\n \t      }"}, {"sha": "cdd7d0356155e47be9adaeac21d7a8ab4b7f2494", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e16b6fd0f7b7da99739f850360d6c86c5b1cba20/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e16b6fd0f7b7da99739f850360d6c86c5b1cba20/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=e16b6fd0f7b7da99739f850360d6c86c5b1cba20", "patch": "@@ -3576,7 +3576,7 @@ expand_gimple_basic_block (basic_block bb)\n \t      val = gen_rtx_VAR_LOCATION\n \t\t(mode, var, (rtx)value, VAR_INIT_STATUS_INITIALIZED);\n \n-\t      val = emit_debug_insn (val);\n+\t      emit_debug_insn (val);\n \n \t      if (dump_file && (dump_flags & TDF_DETAILS))\n \t\t{"}, {"sha": "ca61804068049889d8a305a43bcddd59e0da684d", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e16b6fd0f7b7da99739f850360d6c86c5b1cba20/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e16b6fd0f7b7da99739f850360d6c86c5b1cba20/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=e16b6fd0f7b7da99739f850360d6c86c5b1cba20", "patch": "@@ -4124,7 +4124,7 @@ expand_assignment (tree to, tree from, bool nontemporal)\n   /* Don't crash if the lhs of the assignment was erroneous.  */\n   if (TREE_CODE (to) == ERROR_MARK)\n     {\n-      result = expand_normal (from);\n+      expand_normal (from);\n       return;\n     }\n \n@@ -8170,7 +8170,6 @@ expand_expr_real_2 (sepops ops, rtx target, enum machine_mode tmode,\n     case VEC_UNPACK_LO_EXPR:\n       {\n \top0 = expand_normal (treeop0);\n-\tthis_optab = optab_for_tree_code (code, type, optab_default);\n \ttemp = expand_widen_pattern_expr (ops, op0, NULL_RTX, NULL_RTX,\n \t\t\t\t\t  target, unsignedp);\n \tgcc_assert (temp);\n@@ -8182,9 +8181,6 @@ expand_expr_real_2 (sepops ops, rtx target, enum machine_mode tmode,\n       {\n \top0 = expand_normal (treeop0);\n \t/* The signedness is determined from input operand.  */\n-\tthis_optab = optab_for_tree_code (code,\n-\t\t\t\t\t  TREE_TYPE (treeop0),\n-\t\t\t\t\t  optab_default);\n \ttemp = expand_widen_pattern_expr\n \t  (ops, op0, NULL_RTX, NULL_RTX,\n \t   target, TYPE_UNSIGNED (TREE_TYPE (treeop0)));\n@@ -8334,7 +8330,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t{\n \t  temp = expand_expr (exp, NULL_RTX, VOIDmode, modifier);\n \t  if (MEM_P (temp))\n-\t    temp = copy_to_reg (temp);\n+\t    copy_to_reg (temp);\n \t  return const0_rtx;\n \t}\n "}, {"sha": "8adfbfd5c405f80b71213544e24f6beccabd20df", "filename": "gcc/jump.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e16b6fd0f7b7da99739f850360d6c86c5b1cba20/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e16b6fd0f7b7da99739f850360d6c86c5b1cba20/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=e16b6fd0f7b7da99739f850360d6c86c5b1cba20", "patch": "@@ -308,8 +308,9 @@ reversed_comparison_code_parts (enum rtx_code code, const_rtx arg0,\n     {\n #ifdef REVERSE_CONDITION\n       return REVERSE_CONDITION (code, mode);\n-#endif\n+#else\n       return reverse_condition (code);\n+#endif\n     }\n \n   /* Try a few special cases based on the comparison code.  */"}, {"sha": "1a9f9e505dab04e091d4de183590d788fb478418", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e16b6fd0f7b7da99739f850360d6c86c5b1cba20/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e16b6fd0f7b7da99739f850360d6c86c5b1cba20/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=e16b6fd0f7b7da99739f850360d6c86c5b1cba20", "patch": "@@ -1455,7 +1455,7 @@ expand_expr_stmt (tree exp)\n       if (TYPE_MODE (type) == VOIDmode)\n \t;\n       else if (TYPE_MODE (type) != BLKmode)\n-\tvalue = copy_to_reg (value);\n+\tcopy_to_reg (value);\n       else\n \t{\n \t  rtx lab = gen_label_rtx ();"}, {"sha": "c46836da1086ffbe7b6f32940cfbdb4764ee1a58", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e16b6fd0f7b7da99739f850360d6c86c5b1cba20/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e16b6fd0f7b7da99739f850360d6c86c5b1cba20/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=e16b6fd0f7b7da99739f850360d6c86c5b1cba20", "patch": "@@ -271,8 +271,6 @@ mark_operand_necessary (tree op)\n static void\n mark_stmt_if_obviously_necessary (gimple stmt, bool aggressive)\n {\n-  tree lhs = NULL_TREE;\n-\n   /* With non-call exceptions, we have to assume that all statements could\n      throw.  If a statement may throw, it is inherently necessary.  */\n   if (cfun->can_throw_non_call_exceptions && stmt_could_throw_p (stmt))\n@@ -311,12 +309,6 @@ mark_stmt_if_obviously_necessary (gimple stmt, bool aggressive)\n \t}\n       if (!gimple_call_lhs (stmt))\n         return;\n-      lhs = gimple_call_lhs (stmt);\n-      /* Fall through */\n-\n-    case GIMPLE_ASSIGN:\n-      if (!lhs)\n-        lhs = gimple_assign_lhs (stmt);\n       break;\n \n     case GIMPLE_DEBUG:"}, {"sha": "aaed6cb689e17bba27163d1ff2043b7a44c858a6", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e16b6fd0f7b7da99739f850360d6c86c5b1cba20/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e16b6fd0f7b7da99739f850360d6c86c5b1cba20/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=e16b6fd0f7b7da99739f850360d6c86c5b1cba20", "patch": "@@ -553,7 +553,7 @@ forward_propagate_into_cond (gimple_stmt_iterator *gsi_p)\n       {\n \tname = cond;\n \tdef_stmt = get_prop_source_stmt (name, true, NULL);\n-\tif (def_stmt || !can_propagate_from (def_stmt))\n+\tif (!def_stmt || !can_propagate_from (def_stmt))\n \t  return did_something;\n \n \trhs0 = gimple_assign_rhs1 (def_stmt);"}, {"sha": "6b15ae09488be00fd039c369a32d06f5e1331d81", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e16b6fd0f7b7da99739f850360d6c86c5b1cba20/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e16b6fd0f7b7da99739f850360d6c86c5b1cba20/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=e16b6fd0f7b7da99739f850360d6c86c5b1cba20", "patch": "@@ -695,7 +695,6 @@ minmax_replacement (basic_block cond_bb, basic_block middle_bb,\n \n   cond = last_stmt (cond_bb);\n   cmp = gimple_cond_code (cond);\n-  result = PHI_RESULT (phi);\n \n   /* This transformation is only valid for order comparisons.  Record which\n      operand is smaller/larger if the result of the comparison is true.  */"}]}