{"sha": "e73ca788c64a1f44fa0cdc3aa0a862f7fbc84276", "node_id": "C_kwDOANBUbNoAKGU3M2NhNzg4YzY0YTFmNDRmYTBjZGMzYWEwYTg2MmY3ZmJjODQyNzY", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-10-26T00:17:15Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-10-26T00:17:15Z"}, "message": "Daily bump.", "tree": {"sha": "189d475ea604056853d88c6dc11a47ee2c41b68d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/189d475ea604056853d88c6dc11a47ee2c41b68d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e73ca788c64a1f44fa0cdc3aa0a862f7fbc84276", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e73ca788c64a1f44fa0cdc3aa0a862f7fbc84276", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e73ca788c64a1f44fa0cdc3aa0a862f7fbc84276", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e73ca788c64a1f44fa0cdc3aa0a862f7fbc84276/comments", "author": null, "committer": null, "parents": [{"sha": "65f5fa23844b55e3c6359e1612e6fdd4d10950d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65f5fa23844b55e3c6359e1612e6fdd4d10950d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65f5fa23844b55e3c6359e1612e6fdd4d10950d0"}], "stats": {"total": 280, "additions": 279, "deletions": 1}, "files": [{"sha": "6b8ba1df2d842cd418da25b975629e2ab0ce28f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73ca788c64a1f44fa0cdc3aa0a862f7fbc84276/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73ca788c64a1f44fa0cdc3aa0a862f7fbc84276/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e73ca788c64a1f44fa0cdc3aa0a862f7fbc84276", "patch": "@@ -1,3 +1,147 @@\n+2022-10-25  Eugene Rozenfeld  <erozen@microsoft.com>\n+\n+\t* auto-profile.cc (get_combined_location): Include discriminator in the\n+\treturned combined location.\n+\t(read_function_instance): Read discriminators from profiles.\n+\n+2022-10-25  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/107304\n+\t* expr.cc (get_inner_reference): Always use TYPE_MODE for vector\n+\tfield with vector raw mode.\n+\n+2022-10-25  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/rs6000.md (CCEITHER): Delete.\n+\t(CCANY): New.\n+\t(un): Delete.\n+\t(isel_<un>signed_<GPR:mode>): Rename to...\n+\t(isel_<CCANY:mode>_<GPR:mode>): ... this.  Adjust.\n+\t(*isel_reversed_<un>signed_<GPR:mode>): Rename to...\n+\t(*isel_reversed_<CCANY:mode>_<GPR:mode>): ... this.  Adjust.\n+\t(setbc_<un>signed_<GPR:mode>): Rename to...\n+\t(setbc_<CCANY:mode>_<GPR:mode>C): ... this.  Adjust.\"\n+\t(*setbcr_<un>signed_<GPR:mode>): Rename to ...\n+\t(*setbcr_<CCANY:mode>_<GPR:mode>): ... this.  Adjust.\n+\t(*setnbc_<un>signed_<GPR:mode>): Rename to ...\n+\t(*setnbc_<CCANY:mode>_<GPR:mode>): ... this.  Adjust.\n+\t(*setnbcr_<un>signed_<GPR:mode>): Rename to ...\n+\t(*setnbcr_<CCANY:mode>_<GPR:mode>): ... this.  Adjust.\n+\t(eq<mode>3 for GPR): Adjust.\n+\t(ne<mode>3 for GPR): Adjust.\n+\t* config/rs6000/rs6000-string.cc (do_isel): Adjust.\n+\t* config/rs6000/rs6000.cc (rs6000_emit_int_cmove): Adjust.\n+\n+2022-10-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107176\n+\tPR tree-optimization/66375\n+\tPR tree-optimization/42512\n+\t* tree-scalar-evolution.cc (follow_ssa_edge_expr): Revert\n+\tthe PR66375 fix, do not not associate PLUS_EXPR to be able\n+\tto use tail-recursion.\n+\t(follow_ssa_edge_binary): Likewise.\n+\t(interpret_loop_phi): Revert PR42512 fix, do not throw\n+\taway analyze_evolution_in_loop result after the fact.\n+\t(follow_ssa_edge_expr): When reaching halting_phi initalize\n+\tthe evolution to the symbolic value of the PHI result.\n+\t(add_to_evolution_1): When adding the first evolution verify\n+\twe can handle the expression wrapping the symbolic evolution\n+\tand replace that in full using the initial condition.\n+\t(class scev_dfs): New, contains ...\n+\t(follow_ssa_edge_expr, follow_ssa_edge_binary,\n+\tfollow_ssa_edge_in_condition_phi_branch,\n+\tfollow_ssa_edge_in_condition_phi,\n+\tfollow_ssa_edge_inner_loop_phi,\n+\tadd_to_evolution, add_to_evolution_1): ... these with\n+\tloop and halting_phi arguments in class data.\n+\t(scev_dfs::get_ev): New toplevel DFS entry, start with\n+\ta chrec_dont_know evolution.\n+\t(analyze_evolution_in_loop): Use scev_dfs.\n+\n+2022-10-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* profile.cc (branch_prob): Be prepared for ignored functions with\n+\tDECL_SOURCE_LOCATION set to UNKNOWN_LOCATION.\n+\n+2022-10-25  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-scalar-evolution.cc (follow_ssa_edge_expr): Move\n+\tSTRIP_USELESS_TYPE_CONVERSIONS to where it matters.\n+\n+2022-10-25  Tejas Joshi  <TejasSanjay.Joshi@amd.com>\n+\n+\t* common/config/i386/i386-common.cc (processor_alias_table): Use\n+\tCPU_ZNVER3 for znver4.\n+\t* config/i386/znver.md: Remove znver4 reservations.\n+\n+2022-10-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gimplify.cc (gimple_boolify): Fix comment typos, prduce -> produce\n+\tand There -> These.\n+\n+2022-10-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/107368\n+\t* gimplify.cc (gimplify_call_expr): For complex IFN_ASSUME\n+\tconditions call gimple_boolify on the condition.\n+\n+2022-10-25  YunQiang Su  <yunqiang.su@cipunited.com>\n+\n+\t* config.gcc: add -with-compact-branches=policy build option.\n+\t* doc/install.texi: Likewise.\n+\t* config/mips/mips.h: Likewise.\n+\n+2022-10-25  YunQiang Su  <yunqiang.su@cipunited.com>\n+\n+\t* config/mips/mips.cc (mips_option_override): not trigger error\n+\tfor compact-branches=always for pre-R6.\n+\t* config/mips/mips.h (TARGET_RTP_PIC): not trigger error for\n+\tcompact-branches=always for pre-R6.\n+\t(TARGET_CB_NEVER): Likewise.\n+\t(TARGET_CB_ALWAYS): Likewise.\n+\t(struct mips_cpu_info): define macros for compact branch policy.\n+\t* doc/invoke.texi: Document \"always\" with pre-R6.\n+\n+2022-10-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/107369\n+\t* gimplify.cc (gimplify_call_expr): If seen_error, handle complex\n+\tIFN_ASSUME the same as for -O0.\n+\n+2022-10-25  YunQiang Su  <yunqiang.su@cipunited.com>\n+\n+\t* configure.ac: AC_DEFINE(ENABLE_MULTIARCH, 1)\n+\t* configure: Regenerated.\n+\t* config.in: Regenerated.\n+\t* config/mips/mips.h: don't define STANDARD_STARTFILE_PREFIX_1\n+\t  if ENABLE_MULTIARCH is defined.\n+\t* config/mips/t-linux64: define correct multiarch path when\n+\t  multiarch is enabled.\n+\n+2022-10-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/100756\n+\t* tree-ssa-loop-niter.cc (expand_simple_operations): Also\n+\texpand multiplications by invariants.\n+\n+2022-10-25  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR tree-optimization/107338\n+\t* tree-vect-patterns.cc (vect_recog_bitfield_ref_pattern): Move\n+\tshfit_n calculation before the adjustments for widening loads.\n+\n+2022-10-25  Martin Liska  <mliska@suse.cz>\n+\n+\t* common/config/riscv/riscv-common.cc\n+\t  (riscv_get_valid_option_values): Get out of ifdef.\n+\n+2022-10-25  Martin Liska  <mliska@suse.cz>\n+\n+\tPR target/107364\n+\t* common/config/i386/i386-cpuinfo.h (enum processor_vendor):\n+\tFix pedantic warning.\n+\n 2022-10-24  Martin Liska  <mliska@suse.cz>\n \n \tPR analyzer/107366"}, {"sha": "03e9228fa2a1516e09eb33385b121f92fb7108c5", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73ca788c64a1f44fa0cdc3aa0a862f7fbc84276/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73ca788c64a1f44fa0cdc3aa0a862f7fbc84276/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=e73ca788c64a1f44fa0cdc3aa0a862f7fbc84276", "patch": "@@ -1 +1 @@\n-20221025\n+20221026"}, {"sha": "550515c50c21cfdda690ced8ffdddfba683e313d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73ca788c64a1f44fa0cdc3aa0a862f7fbc84276/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73ca788c64a1f44fa0cdc3aa0a862f7fbc84276/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e73ca788c64a1f44fa0cdc3aa0a862f7fbc84276", "patch": "@@ -1,3 +1,70 @@\n+2022-10-25  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* parser.cc (synthesize_implicit_template_parm): Fix thinko about\n+\tmark the new parm DECL_VIRTUAL_P.  Avoid unneccessary tree_last call.\n+\n+2022-10-25  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* constraint.cc (resolve_function_concept_overload): Explicitly\n+\tpass complain=tf_none to coerce_template_parms.\n+\t(resolve_concept_check): Likewise.\n+\t(normalize_concept_check): Likewise.\n+\t* cp-tree.h (coerce_template_parms): Declare the main overload\n+\tand default its last parameter to true.  Remove wrapper overloads.\n+\t* pt.cc (determine_specialization): Adjust calls to\n+\tcoerce_template_parms and coerce_innermost_template_parms after\n+\tremoving their last parameter.\n+\t(coerce_template_args_for_ttp): Likewise.\n+\t(coerce_ttp_args_for_tta): Likewise.\n+\t(coerce_template_template_parms): Likewise.\n+\t(coerce_template_parms): Remove use_default_args parameter and\n+\tadjust function comment.  Document default argument.  Remove\n+\twrapper overloads.  No longer static.\n+\t(coerce_innermost_template_parms): Remove use_default_args\n+\tparameter.  Default require_all_args to true.\n+\t(lookup_template_class): As with determine_specialization.\n+\t(finish_template_variable): Likewise.\n+\t(tsubst_decl): Likewise.\n+\t(instantiate_alias_template): Likewise.\n+\t(fn_type_unification): Likewise.\n+\t(resolve_overloaded_unification): Likewise.\n+\t(resolve_nondeduced_context): Likewise.\n+\t(get_partial_spec_bindings): Likewise.\n+\n+2022-10-25  Jason Merrill  <jason@redhat.com>\n+\n+\t* constexpr.cc (find_failing_clause_r): Re-add the call to\n+\tcontextual_conv_bool.\n+\n+2022-10-25  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/106848\n+\tPR c++/102600\n+\t* module.cc (trees_out::core_vals): Stream TYPE_MAX_VALUE and\n+\tTYPE_MIN_VALUE of ENUMERAL_TYPE.\n+\t(trees_in::core_vals): Likewise.\n+\t(trees_out::write_enum_def): Don't stream them here.\n+\t(trees_in::read_enum_def): Likewise.\n+\n+2022-10-25  Jason Merrill  <jason@redhat.com>\n+\n+\t* constexpr.cc (class constexpr_global_ctx): Add modifiable field,\n+\tget_value, get_value_ptr, put_value, remove_value, flush_modifiable\n+\tmember functions.\n+\t(class modifiable_tracker): New.\n+\t(cxx_eval_internal_function): Use it.\n+\t(diagnose_failing_condition): Strip CLEANUP_POINT_EXPR.\n+\n+2022-10-25  Jason Merrill  <jason@redhat.com>\n+\n+\t* constexpr.cc (fold_operand): New function.\n+\t(find_failing_clause_r): Add const.\n+\t(find_failing_clause): Add const.\n+\t(diagnose_failing_condition): Add ctx parameter.\n+\t(cxx_eval_internal_function): Pass it.\n+\t* semantics.cc (diagnose_failing_condition): Move to constexpr.cc.\n+\t* cp-tree.h: Adjust.\n+\n 2022-10-24  Jason Merrill  <jason@redhat.com>\n \n \t* cp-gimplify.cc (fold_builtin_source_location)"}, {"sha": "09c41086d3531dec6fde9eacfe891d521a0aa5f8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73ca788c64a1f44fa0cdc3aa0a862f7fbc84276/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73ca788c64a1f44fa0cdc3aa0a862f7fbc84276/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e73ca788c64a1f44fa0cdc3aa0a862f7fbc84276", "patch": "@@ -1,3 +1,70 @@\n+2022-10-25  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/106848\n+\tPR c++/102600\n+\t* g++.dg/modules/enum-9_a.H: New test.\n+\t* g++.dg/modules/enum-9_b.C: New test.\n+\t* g++.dg/modules/enum-10_a.H: New test.\n+\t* g++.dg/modules/enum-10_b.C: New test.\n+\t* g++.dg/modules/enum-11_a.H: New test.\n+\t* g++.dg/modules/enum-11_b.C: New test.\n+\n+2022-10-25  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/107304\n+\t* gcc.target/i386/pr107304.c: New test.\n+\n+2022-10-25  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp23/attr-assume9.C: New test.\n+\t* g++.dg/cpp23/attr-assume10.C: New test.\n+\n+2022-10-25  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp23/attr-assume2.C: Expect constant values.\n+\n+2022-10-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107176\n+\tPR tree-optimization/66375\n+\tPR tree-optimization/42512\n+\t* gcc.dg/torture/pr107176.c: New testcase.\n+\n+2022-10-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/coverage1.ads: New test.\n+\t* gnat.dg/specs/variant_part.ads: Minor tweak.\n+\t* gnat.dg/specs/weak1.ads: Add dg directive.\n+\n+2022-10-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/107368\n+\t* gcc.dg/attr-assume-5.c: New test.\n+\n+2022-10-25  YunQiang Su  <yunqiang.su@cipunited.com>\n+\n+\t* gcc.target/mips/compact-branches-1.c: add isa_rev>=6.\n+\t* gcc.target/mips/mips.exp: don't add -mipsXXr6 option for\n+\t-mcompact-branches=always. It is usable for pre-R6 now.\n+\t* gcc.target/mips/compact-branches-8.c: New test.\n+\t* gcc.target/mips/compact-branches-9.c: New test.\n+\n+2022-10-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/107369\n+\t* gcc.dg/attr-assume-4.c: New test.\n+\t* g++.dg/cpp23/attr-assume8.C: New test.\n+\n+2022-10-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/100756\n+\t* gcc.dg/vect/pr100756.c: New testcase.\n+\n+2022-10-25  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_vect_long_long): Add\n+\tsupport for powerpc*-*-*.\n+\n 2022-10-24  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/107349"}]}