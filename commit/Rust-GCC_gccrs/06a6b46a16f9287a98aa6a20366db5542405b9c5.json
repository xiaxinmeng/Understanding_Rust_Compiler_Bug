{"sha": "06a6b46a16f9287a98aa6a20366db5542405b9c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZhNmI0NmExNmY5Mjg3YTk4YWE2YTIwMzY2ZGI1NTQyNDA1YjljNQ==", "commit": {"author": {"name": "Kugan Vivekanandarajah", "email": "kuganv@linaro.org", "date": "2018-11-12T23:43:56Z"}, "committer": {"name": "Kugan Vivekanandarajah", "email": "kugan@gcc.gnu.org", "date": "2018-11-12T23:43:56Z"}, "message": "re PR target/86677 (popcount builtin detection is breaking some kernel build)\n\ngcc/ChangeLog:\n\n2018-11-13  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\tPR middle-end/86677\n\tPR middle-end/87528\n\t* tree-scalar-evolution.c (expression_expensive_p): Make BUILTIN POPCOUNT\n\tas expensive when backend does not define it.\n\ngcc/testsuite/ChangeLog:\n\n2018-11-13  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\tPR middle-end/86677\n\tPR middle-end/87528\n\t* g++.dg/tree-ssa/pr86544.C: Run only for target supporting popcount\n\tpattern.\n\t* gcc.dg/tree-ssa/popcount.c: Likewise.\n\t* gcc.dg/tree-ssa/popcount2.c: Likewise.\n\t* gcc.dg/tree-ssa/popcount3.c: Likewise.\n\t* gcc.target/aarch64/popcount4.c: New test.\n\t* lib/target-supports.exp (check_effective_target_popcountl): New.\n\nFrom-SVN: r266039", "tree": {"sha": "8a3db6b424f625a58894ced2c6cd0e7152ca17eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a3db6b424f625a58894ced2c6cd0e7152ca17eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06a6b46a16f9287a98aa6a20366db5542405b9c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06a6b46a16f9287a98aa6a20366db5542405b9c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06a6b46a16f9287a98aa6a20366db5542405b9c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06a6b46a16f9287a98aa6a20366db5542405b9c5/comments", "author": null, "committer": null, "parents": [{"sha": "240ae287a189d21ea15c93bba1f774ee69e673a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/240ae287a189d21ea15c93bba1f774ee69e673a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/240ae287a189d21ea15c93bba1f774ee69e673a7"}], "stats": {"total": 81, "additions": 81, "deletions": 0}, "files": [{"sha": "16ecf33dc349934fcb1308baf73c61a946d0df21", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a6b46a16f9287a98aa6a20366db5542405b9c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a6b46a16f9287a98aa6a20366db5542405b9c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06a6b46a16f9287a98aa6a20366db5542405b9c5", "patch": "@@ -1,3 +1,10 @@\n+2018-11-13  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\tPR middle-end/86677\n+\tPR middle-end/87528\n+\t* tree-scalar-evolution.c (expression_expensive_p): Make BUILTIN POPCOUNT\n+\tas expensive when backend does not define it.\n+\n 2018-11-12  Fredrik Noring  <noring@nocrew.org>\n \n \t* config.gcc: Update with-llsc defaults for MIPS r5900."}, {"sha": "cff23eee5a1594afd80ec043de601da65763ad0b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a6b46a16f9287a98aa6a20366db5542405b9c5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a6b46a16f9287a98aa6a20366db5542405b9c5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=06a6b46a16f9287a98aa6a20366db5542405b9c5", "patch": "@@ -1,3 +1,15 @@\n+2018-11-13  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\tPR middle-end/86677\n+\tPR middle-end/87528\n+\t* g++.dg/tree-ssa/pr86544.C: Run only for target supporting popcount\n+\tpattern.\n+\t* gcc.dg/tree-ssa/popcount.c: Likewise.\n+\t* gcc.dg/tree-ssa/popcount2.c: Likewise.\n+\t* gcc.dg/tree-ssa/popcount3.c: Likewise.\n+\t* gcc.target/aarch64/popcount4.c: New test.\n+\t* lib/target-supports.exp (check_effective_target_popcountl): New.\n+\n 2018-11-12  Martin Liska  <mliska@suse.cz>\n \n \tPR gcov-profile/87442"}, {"sha": "ef438916a8019320564f444ace08e2f4b4190684", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr86544.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a6b46a16f9287a98aa6a20366db5542405b9c5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr86544.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a6b46a16f9287a98aa6a20366db5542405b9c5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr86544.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr86544.C?ref=06a6b46a16f9287a98aa6a20366db5542405b9c5", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile } */\n+/* { dg-require-effective-target popcountl } */\n /* { dg-options \"-O2 -fdump-tree-phiopt4 -fdump-tree-optimized\" } */\n \n int PopCount (long b) {"}, {"sha": "b4694109411a4631697463519acbe7d9df65bf6e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/popcount.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a6b46a16f9287a98aa6a20366db5542405b9c5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpopcount.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a6b46a16f9287a98aa6a20366db5542405b9c5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpopcount.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpopcount.c?ref=06a6b46a16f9287a98aa6a20366db5542405b9c5", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile } */\n+/* { dg-require-effective-target popcountl } */\n /* { dg-options \"-O3 -fdump-tree-optimized -fno-tree-ch\" } */\n \n extern int foo (int);"}, {"sha": "ef73e345573de721833e98e89c252640a55f7c60", "filename": "gcc/testsuite/gcc.dg/tree-ssa/popcount2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a6b46a16f9287a98aa6a20366db5542405b9c5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpopcount2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a6b46a16f9287a98aa6a20366db5542405b9c5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpopcount2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpopcount2.c?ref=06a6b46a16f9287a98aa6a20366db5542405b9c5", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do run } */\n+/* { dg-require-effective-target popcountl } */\n /* { dg-options \"-O2 -fno-tree-ch -fdump-tree-optimized\" } */\n \n int"}, {"sha": "ef438916a8019320564f444ace08e2f4b4190684", "filename": "gcc/testsuite/gcc.dg/tree-ssa/popcount3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a6b46a16f9287a98aa6a20366db5542405b9c5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpopcount3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a6b46a16f9287a98aa6a20366db5542405b9c5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpopcount3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpopcount3.c?ref=06a6b46a16f9287a98aa6a20366db5542405b9c5", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile } */\n+/* { dg-require-effective-target popcountl } */\n /* { dg-options \"-O2 -fdump-tree-phiopt4 -fdump-tree-optimized\" } */\n \n int PopCount (long b) {"}, {"sha": "ee55b2e335223053ca024e95b7a13aa4af32550e", "filename": "gcc/testsuite/gcc.target/aarch64/popcount4.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a6b46a16f9287a98aa6a20366db5542405b9c5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpopcount4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a6b46a16f9287a98aa6a20366db5542405b9c5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpopcount4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpopcount4.c?ref=06a6b46a16f9287a98aa6a20366db5542405b9c5", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized -mgeneral-regs-only\" } */\n+\n+int PopCount (long b) {\n+    int c = 0;\n+\n+    while (b) {\n+\tb &= b - 1;\n+\tc++;\n+    }\n+    return c;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"__builtin_popcount\" 0 \"optimized\" } } */"}, {"sha": "8e16efcd6401e1c9a03113f84b4a07c3675cc747", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a6b46a16f9287a98aa6a20366db5542405b9c5/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a6b46a16f9287a98aa6a20366db5542405b9c5/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=06a6b46a16f9287a98aa6a20366db5542405b9c5", "patch": "@@ -6522,6 +6522,17 @@ proc check_effective_target_sync_long_long { } {\n     }\n }\n \n+# Return 1 if the target supports popcount on long.\n+\n+proc check_effective_target_popcountl { } {\n+    return [check_no_messages_and_pattern popcountl \"!\\\\(call\" rtl-expand {\n+\tint foo (long b)\n+\t  {\n+\t    return __builtin_popcountl (b);\n+\t  }\n+    } \"\" ]\n+}\n+\n # Return 1 if the target supports atomic operations on \"long long\"\n # and can execute them.\n #"}, {"sha": "964712ca7674bfb43bc0c89ae38eaf2a552fab0a", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a6b46a16f9287a98aa6a20366db5542405b9c5/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a6b46a16f9287a98aa6a20366db5542405b9c5/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=06a6b46a16f9287a98aa6a20366db5542405b9c5", "patch": "@@ -257,7 +257,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"backend.h\"\n+#include \"target.h\"\n #include \"rtl.h\"\n+#include \"optabs-query.h\"\n #include \"tree.h\"\n #include \"gimple.h\"\n #include \"ssa.h\"\n@@ -282,6 +284,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-fold.h\"\n #include \"tree-into-ssa.h\"\n #include \"builtins.h\"\n+#include \"case-cfn-macros.h\"\n \n static tree analyze_scalar_evolution_1 (struct loop *, tree);\n static tree analyze_scalar_evolution_for_address_of (struct loop *loop,\n@@ -3500,6 +3503,36 @@ expression_expensive_p (tree expr)\n     {\n       tree arg;\n       call_expr_arg_iterator iter;\n+      /* Even though is_inexpensive_builtin might say true, we will get a\n+\t library call for popcount when backend does not have an instruction\n+\t to do so.  We consider this to be expenseive and generate\n+\t __builtin_popcount only when backend defines it.  */\n+      combined_fn cfn = get_call_combined_fn (expr);\n+      switch (cfn)\n+\t{\n+\tCASE_CFN_POPCOUNT:\n+\t  /* Check if opcode for popcount is available in the mode required.  */\n+\t  if (optab_handler (popcount_optab,\n+\t\t\t     TYPE_MODE (TREE_TYPE (CALL_EXPR_ARG (expr, 0))))\n+\t      == CODE_FOR_nothing)\n+\t    {\n+\t      machine_mode mode;\n+\t      mode = TYPE_MODE (TREE_TYPE (CALL_EXPR_ARG (expr, 0)));\n+\t      scalar_int_mode int_mode;\n+\n+\t      /* If the mode is of 2 * UNITS_PER_WORD size, we can handle\n+\t\t double-word popcount by emitting two single-word popcount\n+\t\t instructions.  */\n+\t      if (is_a <scalar_int_mode> (mode, &int_mode)\n+\t\t  && GET_MODE_SIZE (int_mode) == 2 * UNITS_PER_WORD\n+\t\t  && (optab_handler (popcount_optab, word_mode)\n+\t\t      != CODE_FOR_nothing))\n+\t\t  break;\n+\t      return true;\n+\t    }\n+\tdefault:\n+\t  break;\n+\t}\n \n       if (!is_inexpensive_builtin (get_callee_fndecl (expr)))\n \treturn true;"}]}