{"sha": "4ef36ac7d0cfd23f8f72744796d2d118fd7f1c7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVmMzZhYzdkMGNmZDIzZjhmNzI3NDQ3OTZkMmQxMThmZDdmMWM3ZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-16T12:41:13Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-16T12:41:13Z"}, "message": "[multiple changes]\n\n2015-10-16  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* inline.adb (Subp_Info): Remove Listed component.\n\t(Add_Inlined_Subprogram): Take an entity instead of an index.\n\tDo not set Listed component to True.\n\t(New_Entry): Do not initialize Listed component to False.\n\t(Analyze_Inlined_Bodies): Do not test Listed component\n\t(Must_Inline): Add calls not in the main unit only\n\tif they are in a subprogram that can be inlined outside its unit.\n\t(Add_Inlined_Body): Move test around and add comment.\n\n2015-10-16  Arnaud Charlet  <charlet@adacore.com>\n\n\t* sinfo.ads, einfo.ads: monir clean ups.\n\nFrom-SVN: r228883", "tree": {"sha": "53c0e66ce676fad0a93522f1beb9fe11cdb13b38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53c0e66ce676fad0a93522f1beb9fe11cdb13b38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ef36ac7d0cfd23f8f72744796d2d118fd7f1c7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ef36ac7d0cfd23f8f72744796d2d118fd7f1c7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ef36ac7d0cfd23f8f72744796d2d118fd7f1c7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ef36ac7d0cfd23f8f72744796d2d118fd7f1c7d/comments", "author": null, "committer": null, "parents": [{"sha": "ed616c6c35baa352a8a60c5e2e7ae661acc5089c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed616c6c35baa352a8a60c5e2e7ae661acc5089c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed616c6c35baa352a8a60c5e2e7ae661acc5089c"}], "stats": {"total": 107, "additions": 61, "deletions": 46}, "files": [{"sha": "d745cca7704da37178e8476c51a56e2621a5cf80", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef36ac7d0cfd23f8f72744796d2d118fd7f1c7d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef36ac7d0cfd23f8f72744796d2d118fd7f1c7d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4ef36ac7d0cfd23f8f72744796d2d118fd7f1c7d", "patch": "@@ -1,3 +1,18 @@\n+2015-10-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* inline.adb (Subp_Info): Remove Listed component.\n+\t(Add_Inlined_Subprogram): Take an entity instead of an index.\n+\tDo not set Listed component to True.\n+\t(New_Entry): Do not initialize Listed component to False.\n+\t(Analyze_Inlined_Bodies): Do not test Listed component\n+\t(Must_Inline): Add calls not in the main unit only\n+\tif they are in a subprogram that can be inlined outside its unit.\n+\t(Add_Inlined_Body): Move test around and add comment.\n+\n+2015-10-16  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sinfo.ads, einfo.ads: monir clean ups.\n+\n 2015-10-16  Arnaud Charlet  <charlet@adacore.com>\n \n \t* usage.adb, debug.adb, a-except.adb, a-except.ads, a-except-2005.adb,"}, {"sha": "07d9a9518c8c449dbe27ed1342dd7e8727ccdfdb", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef36ac7d0cfd23f8f72744796d2d118fd7f1c7d/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef36ac7d0cfd23f8f72744796d2d118fd7f1c7d/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=4ef36ac7d0cfd23f8f72744796d2d118fd7f1c7d", "patch": "@@ -120,7 +120,7 @@ package Einfo is\n \n --  For functions that are not inlined, there is no restriction on the body,\n --  and XEINFO generates a direct reference in the C header file which allows\n---  the C code in the  backend to directly call the corresponding Ada body.\n+--  the C code in the backend to directly call the corresponding Ada body.\n \n ----------------------------------\n -- Handling of Type'Size Values --\n@@ -1613,7 +1613,7 @@ package Einfo is\n --       generic entities before the corresponding generic body has been seen.\n --       If a package has a forward instantiation, we cannot inline subprograms\n --       appearing in the same package because the placement requirements of\n---       the instance will conflict with the  linear elaboration of front-end\n+--       the instance will conflict with the linear elaboration of front-end\n --       inlining.\n \n --    Has_Fully_Qualified_Name (Flag173)\n@@ -2436,7 +2436,7 @@ package Einfo is\n \n --    Is_Fixed_Point_Type (synthesized)\n --       Applies to all entities, true for decimal and ordinary fixed\n---       point types and subtypes\n+--       point types and subtypes.\n \n --    Is_Floating_Point_Type (synthesized)\n --       Applies to all entities, true for float types and subtypes\n@@ -2633,7 +2633,7 @@ package Einfo is\n \n --    Is_Invariant_Procedure (Flag257)\n --       Defined in functions an procedures. Set for a generated invariant\n---       procedure to identify it easily in the\n+--       procedure to identify it easily in the.\n \n --    Is_Itype (Flag91)\n --       Defined in all entities. Set to indicate that a type is an Itype,\n@@ -2913,7 +2913,7 @@ package Einfo is\n \n --    Is_Private_Type (synthesized)\n --       Applies to all entities, true for private types and subtypes,\n---       as well as for record with private types as subtypes\n+--       as well as for record with private types as subtypes.\n \n --    Is_Processed_Transient (Flag252)\n --       Defined in variables, loop parameters, and constants, including the\n@@ -2972,7 +2972,7 @@ package Einfo is\n \n --    Is_Record_Type (synthesized)\n --       Applies to all entities, true for record types and subtypes,\n---       includes class-wide types and subtypes (which are also records)\n+--       includes class-wide types and subtypes (which are also records).\n \n --    Is_Remote_Call_Interface (Flag62)\n --       Defined in all entities. Set in E_Package and E_Generic_Package\n@@ -3070,7 +3070,7 @@ package Einfo is\n --       vtable (i.e. the one to be extended by derivation).\n \n --    Is_Tagged_Type (Flag55)\n---       Defined in all entities. Set for an entity that is a tagged type.\n+--       Defined in all entities. Set for an entity that is a tagged type\n \n --    Is_Task_Interface (synthesized)\n --       Defined in types that are interfaces. True if interface is declared as\n@@ -3501,7 +3501,7 @@ package Einfo is\n --       access type, or if an explicit pragma No_Strict_Aliasing applies.\n \n --    No_Tagged_Streams_Pragma (Node32)\n---       Present in  all subtype and type entities. Set for tagged types and\n+--       Present in all subtype and type entities. Set for tagged types and\n --       subtypes (i.e. entities with Is_Tagged_Type set True) if a valid\n --       pragma/aspect applies to the type.\n \n@@ -3659,7 +3659,7 @@ package Einfo is\n --    Parameter_Mode (synthesized)\n --       Applies to formal parameter entities. This is a synonym for Ekind,\n --       used when obtaining the formal kind of a formal parameter (the result\n---       is one of E_[In/Out/In_Out]_Parameter)\n+--       is one of E_[In/Out/In_Out]_Parameter).\n \n --    Parent_Subtype (Node19) [base type only]\n --       Defined in E_Record_Type. Set only for derived tagged types, in which\n@@ -3981,7 +3981,7 @@ package Einfo is\n --       Indicates the number of scopes that statically enclose the declaration\n --       of the unit or type. Library units have a depth of zero. Note that\n --       record types can act as scopes but do NOT have this field set (see\n---       Scope_Depth above)\n+--       Scope_Depth above).\n \n --    Scope_Depth_Set (synthesized)\n --       Applies to a special predicate function that returns a Boolean value\n@@ -4501,7 +4501,7 @@ package Einfo is\n --  The classification of program entities which follows is a refinement of\n --  the list given in RM 3.1(1). E.g., separate entities denote subtypes of\n --  different type classes. Ada 95 entities include class wide types,\n---  protected types, subprogram types, generalized access types,  generic\n+--  protected types, subprogram types, generalized access types, generic\n --  formal derived types and generic formal packages.\n \n --  The order chosen for these kinds allows us to classify related entities\n@@ -4664,7 +4664,7 @@ package Einfo is\n \n       E_Access_Attribute_Type,\n       --  An access type created for an access attribute (such as 'Access,\n-      --  'Unrestricted_Access and Unchecked_Access)\n+      --  'Unrestricted_Access and Unchecked_Access).\n \n       E_Allocator_Type,\n       --  A special internal type used to label allocators and references to\n@@ -4893,7 +4893,7 @@ package Einfo is\n \n       E_Protected_Body,\n       --  A protected body. This entity serves almost no function, since all\n-      --  semantic analysis uses the protected entity (E_Protected_Type)\n+      --  semantic analysis uses the protected entity (E_Protected_Type).\n \n       E_Task_Body,\n       --  A task body. This entity serves almost no function, since all\n@@ -6445,7 +6445,7 @@ package Einfo is\n    --  types, and a field in the type entities contains a value of the\n    --  following type indicating which alignment choice applies. For full\n    --  details of the meaning of these alignment types, see description\n-   --  of the Component_Alignment pragma\n+   --  of the Component_Alignment pragma.\n \n    type Component_Alignment_Kind is (\n       Calign_Default,          -- default alignment\n@@ -6469,9 +6469,9 @@ package Einfo is\n    --  attributes are procedural, and require some small amount of\n    --  computation. Of course, from the point of view of a user of this\n    --  package, the distinction is not visible (even the field information\n-   --  provided below should be disregarded, as it is subject to  change\n-   --  without notice). A number of  attributes appear as lists: lists of\n-   --  formals,  lists of actuals, of discriminants, etc. For these, pairs\n+   --  provided below should be disregarded, as it is subject to change\n+   --  without notice). A number of attributes appear as lists: lists of\n+   --  formals, lists of actuals, of discriminants, etc. For these, pairs\n    --  of functions are defined, which take the form:\n \n    --      function First_Thing (E : Enclosing_Construct) return Thing;\n@@ -7116,7 +7116,8 @@ package Einfo is\n    --  whether an Ekind value belongs to a specified kind, for example the\n    --  function Is_Elementary_Type tests if its argument is in Elementary_Kind.\n    --  In some cases, the test is of an entity attribute (e.g. in the case of\n-   --  Is_Generic_Type where the Ekind does not provide the needed information)\n+   --  Is_Generic_Type where the Ekind does not provide the needed\n+   --  information).\n \n    function Is_Access_Type                      (Id : E) return B;\n    function Is_Access_Protected_Subprogram_Type (Id : E) return B;\n@@ -8035,7 +8036,7 @@ package Einfo is\n \n    procedure Write_Entity_Flags (Id : Entity_Id; Prefix : String);\n    --  Writes a series of entries giving a line for each flag that is\n-   --  set to True. Each line is prefixed by the given string\n+   --  set to True. Each line is prefixed by the given string.\n \n    procedure Write_Entity_Info (Id : Entity_Id; Prefix : String);\n    --  A debugging procedure to write out information about an entity"}, {"sha": "d68a972a6a747aca6fbff82e87a73d2e900d7723", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef36ac7d0cfd23f8f72744796d2d118fd7f1c7d/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef36ac7d0cfd23f8f72744796d2d118fd7f1c7d/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=4ef36ac7d0cfd23f8f72744796d2d118fd7f1c7d", "patch": "@@ -158,7 +158,6 @@ package body Inline is\n       Name        : Entity_Id  := Empty;\n       Next        : Subp_Index := No_Subp;\n       First_Succ  : Succ_Index := No_Succ;\n-      Listed      : Boolean    := False;\n       Main_Call   : Boolean    := False;\n       Processed   : Boolean    := False;\n    end record;\n@@ -180,8 +179,8 @@ package body Inline is\n    --  called, and for the inlined subprogram that contains the call. If\n    --  the call is in the main compilation unit, Caller is Empty.\n \n-   procedure Add_Inlined_Subprogram (Index : Subp_Index);\n-   --  Add the subprogram to the list of inlined subprogram for the unit\n+   procedure Add_Inlined_Subprogram (E : Entity_Id);\n+   --  Add subprogram E to the list of inlined subprogram for the unit\n \n    function Add_Subp (E : Entity_Id) return Subp_Index;\n    --  Make entry in Inlined table for subprogram E, or return table index\n@@ -347,15 +346,19 @@ package body Inline is\n             return Inline_Package;\n          end if;\n \n-         --  The call is not in the main unit. See if it is in some inlined\n-         --  subprogram. If so, inline the call and, if the inlining level is\n-         --  set to 1, stop there; otherwise also compile the package as above.\n+         --  The call is not in the main unit. See if it is in some subprogram\n+         --  that can be inlined outside its unit. If so, inline the call and,\n+         --  if the inlining level is set to 1, stop there; otherwise also\n+         --  compile the package as above.\n \n          Scop := Current_Scope;\n          while Scope (Scop) /= Standard_Standard\n            and then not Is_Child_Unit (Scop)\n          loop\n-            if Is_Overloadable (Scop) and then Is_Inlined (Scop) then\n+            if Is_Overloadable (Scop)\n+              and then Is_Inlined (Scop)\n+              and then not Is_Nested (Scop)\n+            then\n                Add_Call (E, Scop);\n \n                if Inline_Level = 1 then\n@@ -378,6 +381,15 @@ package body Inline is\n    begin\n       Append_New_Elmt (N, To => Backend_Calls);\n \n+      --  Skip subprograms that cannot be inlined outside their unit\n+\n+      if Is_Abstract_Subprogram (E)\n+        or else Convention (E) = Convention_Protected\n+        or else Is_Nested (E)\n+      then\n+         return;\n+      end if;\n+\n       --  Find unit containing E, and add to list of inlined bodies if needed.\n       --  If the body is already present, no need to load any other unit. This\n       --  is the case for an initialization procedure, which appears in the\n@@ -391,13 +403,6 @@ package body Inline is\n       --  no enclosing package to retrieve. In this case, it is the body of\n       --  the function that will have to be loaded.\n \n-      if Is_Abstract_Subprogram (E)\n-        or else Is_Nested (E)\n-        or else Convention (E) = Convention_Protected\n-      then\n-         return;\n-      end if;\n-\n       Level := Must_Inline;\n \n       if Level /= Dont_Inline then\n@@ -475,8 +480,7 @@ package body Inline is\n    -- Add_Inlined_Subprogram --\n    ----------------------------\n \n-   procedure Add_Inlined_Subprogram (Index : Subp_Index) is\n-      E    : constant Entity_Id := Inlined.Table (Index).Name;\n+   procedure Add_Inlined_Subprogram (E : Entity_Id) is\n       Decl : constant Node_Id   := Parent (Declaration_Node (E));\n       Pack : constant Entity_Id := Get_Code_Unit_Entity (E);\n \n@@ -538,8 +542,6 @@ package body Inline is\n       else\n          Register_Backend_Not_Inlined_Subprogram (E);\n       end if;\n-\n-      Inlined.Table (Index).Listed := True;\n    end Add_Inlined_Subprogram;\n \n    ------------------------\n@@ -606,7 +608,6 @@ package body Inline is\n          Inlined.Table (Inlined.Last).Name        := E;\n          Inlined.Table (Inlined.Last).Next        := No_Subp;\n          Inlined.Table (Inlined.Last).First_Succ  := No_Succ;\n-         Inlined.Table (Inlined.Last).Listed      := False;\n          Inlined.Table (Inlined.Last).Main_Call   := False;\n          Inlined.Table (Inlined.Last).Processed   := False;\n       end New_Entry;\n@@ -832,7 +833,7 @@ package body Inline is\n          --  as part of an inlined package, but are not themselves called. An\n          --  accurate computation of just those subprograms that are needed\n          --  requires that we perform a transitive closure over the call graph,\n-         --  starting from calls in the main program.\n+         --  starting from calls in the main compilation unit.\n \n          for Index in Inlined.First .. Inlined.Last loop\n             if not Is_Called (Inlined.Table (Index).Name) then\n@@ -879,10 +880,8 @@ package body Inline is\n          --  subprograms for the unit.\n \n          for Index in Inlined.First .. Inlined.Last loop\n-            if Is_Called (Inlined.Table (Index).Name)\n-              and then not Inlined.Table (Index).Listed\n-            then\n-               Add_Inlined_Subprogram (Index);\n+            if Is_Called (Inlined.Table (Index).Name) then\n+               Add_Inlined_Subprogram (Inlined.Table (Index).Name);\n             end if;\n          end loop;\n "}, {"sha": "ab610c38e0e999ea3cbc527acf2a00269a495288", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef36ac7d0cfd23f8f72744796d2d118fd7f1c7d/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef36ac7d0cfd23f8f72744796d2d118fd7f1c7d/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=4ef36ac7d0cfd23f8f72744796d2d118fd7f1c7d", "patch": "@@ -1905,7 +1905,7 @@ package Sinfo is\n    --    body, and no entities of the with'ed unit are referenced by the spec\n    --    (an entity may still be referenced in the body, so this flag is used\n    --    to generate the proper message (see Sem_Util.Check_Unused_Withs for\n-   --    full details)\n+   --    full details).\n \n    --  No_Initialization (Flag13-Sem)\n    --    Present in N_Object_Declaration and N_Allocator to indicate that the\n@@ -3634,7 +3634,7 @@ package Sinfo is\n       --  INDEXED_COMPONENT ::= PREFIX (EXPRESSION {, EXPRESSION})\n \n       --  Note: the parser may generate this node in some situations where it\n-      --  should be a function call. The semantic  pass must correct this\n+      --  should be a function call. The semantic pass must correct this\n       --  misidentification (which is inevitable at the parser level).\n \n       --  N_Indexed_Component\n@@ -4571,7 +4571,7 @@ package Sinfo is\n       --    {LABEL} SIMPLE_STATEMENT | {LABEL} COMPOUND_STATEMENT\n \n       --  There is no explicit node in the tree for a statement. Instead, the\n-      --  individual statement appears directly. Labels are treated  as a\n+      --  individual statement appears directly. Labels are treated as a\n       --  kind of statement, i.e. they are linked into a statement list at\n       --  the point they appear, so the labeled statement appears following\n       --  the label or labels in the statement list."}]}