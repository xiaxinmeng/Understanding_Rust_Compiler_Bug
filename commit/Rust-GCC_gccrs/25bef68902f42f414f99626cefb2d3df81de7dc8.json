{"sha": "25bef68902f42f414f99626cefb2d3df81de7dc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjViZWY2ODkwMmY0MmY0MTRmOTk2MjZjZWZiMmQzZGY4MWRlN2RjOA==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-01-12T16:47:27Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-01-12T16:51:05Z"}, "message": "arm: Add movmisalign patterns for MVE (PR target/97875)\n\nThis patch adds new movmisalign<mode>_mve_load and store patterns for\nMVE to help vectorization. They are very similar to their Neon\ncounterparts, but use different iterators and instructions.\n\nIndeed MVE supports less vectors modes than Neon, so we use the\nMVE_VLD_ST iterator where Neon uses VQX.\n\nSince the supported modes are different from the ones valid for\narithmetic operators, we introduce two new sets of macros:\n\nARM_HAVE_NEON_<MODE>_LDST\n  true if Neon has vector load/store instructions for <MODE>\n\nARM_HAVE_<MODE>_LDST\n  true if any vector extension has vector load/store instructions for <MODE>\n\nWe move the movmisalign<mode> expander from neon.md to vec-commond.md, and\nreplace the TARGET_NEON enabler with ARM_HAVE_<MODE>_LDST.\n\nThe patch also updates the mve-vneg.c test to scan for the better code\ngeneration when loading and storing the vectors involved: it checks\nthat no 'orr' instruction is generated to cope with misalignment at\nruntime.\nThis test was chosen among the other mve tests, but any other should\nbe OK. Using a plain vector copy loop (dest[i] = a[i]) is not a good\ntest because the compiler chooses to use memcpy.\n\nFor instance we now generate:\ntest_vneg_s32x4:\n\tvldrw.32       q3, [r1]\n\tvneg.s32  q3, q3\n\tvstrw.32       q3, [r0]\n\tbx      lr\n\ninstead of:\ntest_vneg_s32x4:\n\torr     r3, r1, r0\n\tlsls    r3, r3, #28\n\tbne     .L15\n\tvldrw.32\tq3, [r1]\n\tvneg.s32  q3, q3\n\tvstrw.32\tq3, [r0]\n\tbx      lr\n\t.L15:\n\tpush    {r4, r5}\n\tldrd    r2, r3, [r1, #8]\n\tldrd    r5, r4, [r1]\n\trsbs    r2, r2, #0\n\trsbs    r5, r5, #0\n\trsbs    r4, r4, #0\n\trsbs    r3, r3, #0\n\tstrd    r5, r4, [r0]\n\tpop     {r4, r5}\n\tstrd    r2, r3, [r0, #8]\n\tbx      lr\n\n2021-01-12  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tPR target/97875\n\tgcc/\n\t* config/arm/arm.h (ARM_HAVE_NEON_V8QI_LDST): New macro.\n\t(ARM_HAVE_NEON_V16QI_LDST, ARM_HAVE_NEON_V4HI_LDST): Likewise.\n\t(ARM_HAVE_NEON_V8HI_LDST, ARM_HAVE_NEON_V2SI_LDST): Likewise.\n\t(ARM_HAVE_NEON_V4SI_LDST, ARM_HAVE_NEON_V4HF_LDST): Likewise.\n\t(ARM_HAVE_NEON_V8HF_LDST, ARM_HAVE_NEON_V4BF_LDST): Likewise.\n\t(ARM_HAVE_NEON_V8BF_LDST, ARM_HAVE_NEON_V2SF_LDST): Likewise.\n\t(ARM_HAVE_NEON_V4SF_LDST, ARM_HAVE_NEON_DI_LDST): Likewise.\n\t(ARM_HAVE_NEON_V2DI_LDST): Likewise.\n\t(ARM_HAVE_V8QI_LDST, ARM_HAVE_V16QI_LDST): Likewise.\n\t(ARM_HAVE_V4HI_LDST, ARM_HAVE_V8HI_LDST): Likewise.\n\t(ARM_HAVE_V2SI_LDST, ARM_HAVE_V4SI_LDST, ARM_HAVE_V4HF_LDST): Likewise.\n\t(ARM_HAVE_V8HF_LDST, ARM_HAVE_V4BF_LDST, ARM_HAVE_V8BF_LDST): Likewise.\n\t(ARM_HAVE_V2SF_LDST, ARM_HAVE_V4SF_LDST, ARM_HAVE_DI_LDST): Likewise.\n\t(ARM_HAVE_V2DI_LDST): Likewise.\n\t* config/arm/mve.md (*movmisalign<mode>_mve_store): New pattern.\n\t(*movmisalign<mode>_mve_load): New pattern.\n\t* config/arm/neon.md (movmisalign<mode>): Move to ...\n\t* config/arm/vec-common.md: ... here.\n\n\tPR target/97875\n\tgcc/testsuite/\n\t* gcc.target/arm/simd/mve-vneg.c: Update test.", "tree": {"sha": "24bbdf9a5a3b7389861080065547b173c5587700", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24bbdf9a5a3b7389861080065547b173c5587700"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25bef68902f42f414f99626cefb2d3df81de7dc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25bef68902f42f414f99626cefb2d3df81de7dc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25bef68902f42f414f99626cefb2d3df81de7dc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25bef68902f42f414f99626cefb2d3df81de7dc8/comments", "author": null, "committer": null, "parents": [{"sha": "cf2ac1c30af0fa783c8d72e527904dda5d8cc330", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf2ac1c30af0fa783c8d72e527904dda5d8cc330", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf2ac1c30af0fa783c8d72e527904dda5d8cc330"}], "stats": {"total": 114, "additions": 89, "deletions": 25}, "files": [{"sha": "6bc03ada0bffd63f760c35009924c69e86213c62", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bef68902f42f414f99626cefb2d3df81de7dc8/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bef68902f42f414f99626cefb2d3df81de7dc8/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=25bef68902f42f414f99626cefb2d3df81de7dc8", "patch": "@@ -1151,6 +1151,46 @@ extern const int arm_arch_cde_coproc_bits[];\n #define ARM_HAVE_V8HF_ARITH (ARM_HAVE_NEON_V8HF_ARITH || TARGET_HAVE_MVE_FLOAT)\n #define ARM_HAVE_V4SF_ARITH (ARM_HAVE_NEON_V4SF_ARITH || TARGET_HAVE_MVE_FLOAT)\n \n+/* The conditions under which vector modes are supported by load/store\n+   instructions using Neon.  */\n+\n+#define ARM_HAVE_NEON_V8QI_LDST TARGET_NEON\n+#define ARM_HAVE_NEON_V16QI_LDST TARGET_NEON\n+#define ARM_HAVE_NEON_V4HI_LDST TARGET_NEON\n+#define ARM_HAVE_NEON_V8HI_LDST TARGET_NEON\n+#define ARM_HAVE_NEON_V2SI_LDST TARGET_NEON\n+#define ARM_HAVE_NEON_V4SI_LDST TARGET_NEON\n+#define ARM_HAVE_NEON_V4HF_LDST TARGET_NEON_FP16INST\n+#define ARM_HAVE_NEON_V8HF_LDST TARGET_NEON_FP16INST\n+#define ARM_HAVE_NEON_V4BF_LDST TARGET_BF16_SIMD\n+#define ARM_HAVE_NEON_V8BF_LDST TARGET_BF16_SIMD\n+#define ARM_HAVE_NEON_V2SF_LDST TARGET_NEON\n+#define ARM_HAVE_NEON_V4SF_LDST TARGET_NEON\n+#define ARM_HAVE_NEON_DI_LDST TARGET_NEON\n+#define ARM_HAVE_NEON_V2DI_LDST TARGET_NEON\n+\n+/* The conditions under which vector modes are supported by load/store\n+   instructions by any vector extension.  */\n+\n+#define ARM_HAVE_V8QI_LDST (ARM_HAVE_NEON_V8QI_LDST || TARGET_REALLY_IWMMXT)\n+#define ARM_HAVE_V4HI_LDST (ARM_HAVE_NEON_V4HI_LDST || TARGET_REALLY_IWMMXT)\n+#define ARM_HAVE_V2SI_LDST (ARM_HAVE_NEON_V2SI_LDST || TARGET_REALLY_IWMMXT)\n+\n+#define ARM_HAVE_V16QI_LDST (ARM_HAVE_NEON_V16QI_LDST || TARGET_HAVE_MVE)\n+#define ARM_HAVE_V8HI_LDST (ARM_HAVE_NEON_V8HI_LDST || TARGET_HAVE_MVE)\n+#define ARM_HAVE_V4SI_LDST (ARM_HAVE_NEON_V4SI_LDST || TARGET_HAVE_MVE)\n+#define ARM_HAVE_DI_LDST ARM_HAVE_NEON_DI_LDST\n+#define ARM_HAVE_V2DI_LDST ARM_HAVE_NEON_V2DI_LDST\n+\n+#define ARM_HAVE_V4HF_LDST ARM_HAVE_NEON_V4HF_LDST\n+#define ARM_HAVE_V2SF_LDST ARM_HAVE_NEON_V2SF_LDST\n+\n+#define ARM_HAVE_V4BF_LDST ARM_HAVE_NEON_V4BF_LDST\n+#define ARM_HAVE_V8BF_LDST ARM_HAVE_NEON_V8BF_LDST\n+\n+#define ARM_HAVE_V8HF_LDST (ARM_HAVE_NEON_V8HF_LDST || TARGET_HAVE_MVE_FLOAT)\n+#define ARM_HAVE_V4SF_LDST (ARM_HAVE_NEON_V4SF_LDST || TARGET_HAVE_MVE_FLOAT)\n+\n /* The register numbers in sequence, for passing to arm_gen_load_multiple.  */\n extern int arm_regs_in_sequence[];\n "}, {"sha": "7fb69aae119853994dd3e5eb1f30d641937b91ff", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bef68902f42f414f99626cefb2d3df81de7dc8/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bef68902f42f414f99626cefb2d3df81de7dc8/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=25bef68902f42f414f99626cefb2d3df81de7dc8", "patch": "@@ -10825,3 +10825,26 @@\n   [(set_attr \"type\" \"coproc\")\n    (set_attr \"length\" \"8\")]\n )\n+\n+(define_insn \"*movmisalign<mode>_mve_store\"\n+  [(set (match_operand:MVE_VLD_ST 0 \"neon_permissive_struct_operand\"\t     \"=Um\")\n+\t(unspec:MVE_VLD_ST [(match_operand:MVE_VLD_ST 1 \"s_register_operand\" \" w\")]\n+\t UNSPEC_MISALIGNED_ACCESS))]\n+  \"((TARGET_HAVE_MVE && VALID_MVE_SI_MODE (<MODE>mode))\n+    || (TARGET_HAVE_MVE_FLOAT && VALID_MVE_SF_MODE (<MODE>mode)))\n+   && !BYTES_BIG_ENDIAN && unaligned_access\"\n+  \"vstr<V_sz_elem1>.<V_sz_elem>\\t%q1, %E0\"\n+  [(set_attr \"type\" \"mve_store\")]\n+)\n+\n+\n+(define_insn \"*movmisalign<mode>_mve_load\"\n+  [(set (match_operand:MVE_VLD_ST 0 \"s_register_operand\"\t\t\t\t \"=w\")\n+\t(unspec:MVE_VLD_ST [(match_operand:MVE_VLD_ST 1 \"neon_permissive_struct_operand\" \" Um\")]\n+\t UNSPEC_MISALIGNED_ACCESS))]\n+  \"((TARGET_HAVE_MVE && VALID_MVE_SI_MODE (<MODE>mode))\n+    || (TARGET_HAVE_MVE_FLOAT && VALID_MVE_SF_MODE (<MODE>mode)))\n+   && !BYTES_BIG_ENDIAN && unaligned_access\"\n+  \"vldr<V_sz_elem1>.<V_sz_elem>\\t%q0, %E1\"\n+  [(set_attr \"type\" \"mve_load\")]\n+)"}, {"sha": "317b98e56200ea23c2c523742b2c627ad737ebe4", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bef68902f42f414f99626cefb2d3df81de7dc8/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bef68902f42f414f99626cefb2d3df81de7dc8/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=25bef68902f42f414f99626cefb2d3df81de7dc8", "patch": "@@ -280,31 +280,6 @@\n   neon_disambiguate_copy (operands, dest, src, 4);\n })\n \n-(define_expand \"movmisalign<mode>\"\n-  [(set (match_operand:VDQX 0 \"neon_perm_struct_or_reg_operand\")\n-\t(unspec:VDQX [(match_operand:VDQX 1 \"neon_perm_struct_or_reg_operand\")]\n-\t\t     UNSPEC_MISALIGNED_ACCESS))]\n-  \"TARGET_NEON && !BYTES_BIG_ENDIAN && unaligned_access\"\n-{\n-  rtx adjust_mem;\n-  /* This pattern is not permitted to fail during expansion: if both arguments\n-     are non-registers (e.g. memory := constant, which can be created by the\n-     auto-vectorizer), force operand 1 into a register.  */\n-  if (!s_register_operand (operands[0], <MODE>mode)\n-      && !s_register_operand (operands[1], <MODE>mode))\n-    operands[1] = force_reg (<MODE>mode, operands[1]);\n-\n-  if (s_register_operand (operands[0], <MODE>mode))\n-    adjust_mem = operands[1];\n-  else\n-    adjust_mem = operands[0];\n-\n-  /* Legitimize address.  */\n-  if (!neon_vector_mem_operand (adjust_mem, 2, true))\n-    XEXP (adjust_mem, 0) = force_reg (Pmode, XEXP (adjust_mem, 0));\n-\n-})\n-\n (define_insn \"*movmisalign<mode>_neon_store\"\n   [(set (match_operand:VDX 0 \"neon_permissive_struct_operand\"\t\"=Um\")\n \t(unspec:VDX [(match_operand:VDX 1 \"s_register_operand\" \" w\")]"}, {"sha": "32387e11d61b9041d71a176117f370aefef761d0", "filename": "gcc/config/arm/vec-common.md", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bef68902f42f414f99626cefb2d3df81de7dc8/gcc%2Fconfig%2Farm%2Fvec-common.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bef68902f42f414f99626cefb2d3df81de7dc8/gcc%2Fconfig%2Farm%2Fvec-common.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvec-common.md?ref=25bef68902f42f414f99626cefb2d3df81de7dc8", "patch": "@@ -215,3 +215,26 @@\n \t\t      && ARM_HAVE_<MODE>_ARITH)) && !BYTES_BIG_ENDIAN\"\n )\n \n+(define_expand \"movmisalign<mode>\"\n+ [(set (match_operand:VDQX 0 \"neon_perm_struct_or_reg_operand\")\n+\t(unspec:VDQX [(match_operand:VDQX 1 \"neon_perm_struct_or_reg_operand\")]\n+\t UNSPEC_MISALIGNED_ACCESS))]\n+ \"ARM_HAVE_<MODE>_LDST && !BYTES_BIG_ENDIAN && unaligned_access\"\n+{\n+ rtx adjust_mem;\n+ /* This pattern is not permitted to fail during expansion: if both arguments\n+    are non-registers (e.g. memory := constant, which can be created by the\n+    auto-vectorizer), force operand 1 into a register.  */\n+ if (!s_register_operand (operands[0], <MODE>mode)\n+     && !s_register_operand (operands[1], <MODE>mode))\n+   operands[1] = force_reg (<MODE>mode, operands[1]);\n+\n+ if (s_register_operand (operands[0], <MODE>mode))\n+   adjust_mem = operands[1];\n+ else\n+   adjust_mem = operands[0];\n+\n+ /* Legitimize address.  */\n+ if (!neon_vector_mem_operand (adjust_mem, 2, true))\n+   XEXP (adjust_mem, 0) = force_reg (Pmode, XEXP (adjust_mem, 0));\n+})"}, {"sha": "7945a060e25feafc9c2e9c2454c77a20fec57d8d", "filename": "gcc/testsuite/gcc.target/arm/simd/mve-vneg.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bef68902f42f414f99626cefb2d3df81de7dc8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vneg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bef68902f42f414f99626cefb2d3df81de7dc8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vneg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vneg.c?ref=25bef68902f42f414f99626cefb2d3df81de7dc8", "patch": "@@ -47,3 +47,6 @@ FUNC(f, float, 16, 8, -, vneg)\n    functions above.  */\n /* { dg-final { scan-assembler-times {vneg.s[0-9]+  q[0-9]+, q[0-9]+} 6 } } */\n /* { dg-final { scan-assembler-times {vneg.f[0-9]+  q[0-9]+, q[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vldr[bhw].[0-9]+\\tq[0-9]+} 8 } } */\n+/* { dg-final { scan-assembler-times {vstr[bhw].[0-9]+\\tq[0-9]+} 8 } } */\n+/* { dg-final { scan-assembler-not {orr\\tr[0-9]+, r[0-9]+, r[0-9]+} } } */"}]}