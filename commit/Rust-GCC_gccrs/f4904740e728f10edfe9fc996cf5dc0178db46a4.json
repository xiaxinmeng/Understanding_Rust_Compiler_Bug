{"sha": "f4904740e728f10edfe9fc996cf5dc0178db46a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ5MDQ3NDBlNzI4ZjEwZWRmZTlmYzk5NmNmNWRjMDE3OGRiNDZhNA==", "commit": {"author": {"name": "Kirill Yukhin", "email": "kirill.yukhin@intel.com", "date": "2015-08-05T08:01:19Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2015-08-05T08:01:19Z"}, "message": "Disable AVX-512VL insns for scalar mode operands on -march=knl.\n\ngcc/\n\t* config/i386/i386.md (define_attr \"isa\"): Addd avx512vl and\n\tnoavx512vl.\n\t(define_attr \"enabled\"): Handle avx521vl and noavx512vl.\n\t* config/i386/sse.md (define_insn \"vec_dupv2df<mask_name>\"): Split\n\tAVX-512 alternative out of SSE.\n\t(define_insn \"*vec_concatv2df\"): Ditto.\n\nFrom-SVN: r226612", "tree": {"sha": "a21df0931af42eddedbc45c499c4e18f640fe74a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a21df0931af42eddedbc45c499c4e18f640fe74a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4904740e728f10edfe9fc996cf5dc0178db46a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4904740e728f10edfe9fc996cf5dc0178db46a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4904740e728f10edfe9fc996cf5dc0178db46a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4904740e728f10edfe9fc996cf5dc0178db46a4/comments", "author": null, "committer": null, "parents": [{"sha": "0ea424263f9ebacd98be64e19a31972196a40b65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ea424263f9ebacd98be64e19a31972196a40b65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ea424263f9ebacd98be64e19a31972196a40b65"}], "stats": {"total": 46, "additions": 32, "deletions": 14}, "files": [{"sha": "f6717cda27504989fdd354df8a3a7e0b69716ac7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4904740e728f10edfe9fc996cf5dc0178db46a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4904740e728f10edfe9fc996cf5dc0178db46a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f4904740e728f10edfe9fc996cf5dc0178db46a4", "patch": "@@ -1,3 +1,12 @@\n+2015-08-05  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\t* config/i386/i386.md (define_attr \"isa\"): Addd avx512vl and\n+\tnoavx512vl.\n+\t(define_attr \"enabled\"): Handle avx521vl and noavx512vl.\n+\t* config/i386/sse.md (define_insn \"vec_dupv2df<mask_name>\"): Split\n+\tAVX-512 alternative out of SSE.\n+\t(define_insn \"*vec_concatv2df\"): Ditto.\n+\n 2015-08-05  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \t* config/i386/i386.c (bdesc_args): Rename CODE_FOR_sse4_1_ptest into"}, {"sha": "9ffe9aaa6501415c4ae14b3dbd7e97e7cbc52745", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4904740e728f10edfe9fc996cf5dc0178db46a4/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4904740e728f10edfe9fc996cf5dc0178db46a4/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f4904740e728f10edfe9fc996cf5dc0178db46a4", "patch": "@@ -784,7 +784,8 @@\n (define_attr \"isa\" \"base,x64,x64_sse4,x64_sse4_noavx,x64_avx,nox64,\n \t\t    sse2,sse2_noavx,sse3,sse4,sse4_noavx,avx,noavx,\n \t\t    avx2,noavx2,bmi,bmi2,fma4,fma,avx512f,noavx512f,\n-\t\t    fma_avx512f,avx512bw,noavx512bw,avx512dq,noavx512dq\"\n+\t\t    fma_avx512f,avx512bw,noavx512bw,avx512dq,noavx512dq,\n+\t\t    avx512vl,noavx512vl\"\n   (const_string \"base\"))\n \n (define_attr \"enabled\" \"\"\n@@ -819,6 +820,8 @@\n \t (eq_attr \"isa\" \"noavx512bw\") (symbol_ref \"!TARGET_AVX512BW\")\n \t (eq_attr \"isa\" \"avx512dq\") (symbol_ref \"TARGET_AVX512DQ\")\n \t (eq_attr \"isa\" \"noavx512dq\") (symbol_ref \"!TARGET_AVX512DQ\")\n+\t (eq_attr \"isa\" \"avx512vl\") (symbol_ref \"TARGET_AVX512VL\")\n+\t (eq_attr \"isa\" \"noavx512vl\") (symbol_ref \"!TARGET_AVX512VL\")\n \t]\n \t(const_int 1)))\n "}, {"sha": "a24a318e900698cda7b752823b28400e2f2fa272", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4904740e728f10edfe9fc996cf5dc0178db46a4/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4904740e728f10edfe9fc996cf5dc0178db46a4/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=f4904740e728f10edfe9fc996cf5dc0178db46a4", "patch": "@@ -8648,44 +8648,50 @@\n    (set_attr \"mode\" \"DF,DF,V1DF,V1DF,V1DF,V2DF,V1DF,V1DF,V1DF\")])\n \n (define_insn \"vec_dupv2df<mask_name>\"\n-  [(set (match_operand:V2DF 0 \"register_operand\"     \"=x,v\")\n+  [(set (match_operand:V2DF 0 \"register_operand\"     \"=x,x,v\")\n \t(vec_duplicate:V2DF\n-\t  (match_operand:DF 1 \"nonimmediate_operand\" \" 0,vm\")))]\n+\t  (match_operand:DF 1 \"nonimmediate_operand\" \" 0,xm,vm\")))]\n   \"TARGET_SSE2 && <mask_avx512vl_condition>\"\n   \"@\n    unpcklpd\\t%0, %0\n-   %vmovddup\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n-  [(set_attr \"isa\" \"noavx,sse3\")\n+   %vmovddup\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\n+   vmovddup\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  [(set_attr \"isa\" \"noavx,sse3,avx512vl\")\n    (set_attr \"type\" \"sselog1\")\n-   (set_attr \"prefix\" \"orig,maybe_vex\")\n-   (set_attr \"mode\" \"V2DF,DF\")])\n+   (set_attr \"prefix\" \"orig,maybe_vex,evex\")\n+   (set_attr \"mode\" \"V2DF,DF,DF\")])\n \n (define_insn \"*vec_concatv2df\"\n-  [(set (match_operand:V2DF 0 \"register_operand\"     \"=x,v,v,x,x,v,x,x\")\n+  [(set (match_operand:V2DF 0 \"register_operand\"     \"=x,x,v,x,v,x,x,v,x,x\")\n \t(vec_concat:V2DF\n-\t  (match_operand:DF 1 \"nonimmediate_operand\" \" 0,v,m,0,x,m,0,0\")\n-\t  (match_operand:DF 2 \"vector_move_operand\"  \" x,v,1,m,m,C,x,m\")))]\n+\t  (match_operand:DF 1 \"nonimmediate_operand\" \" 0,x,v,m,m,0,x,m,0,0\")\n+\t  (match_operand:DF 2 \"vector_move_operand\"  \" x,x,v,1,1,m,m,C,x,m\")))]\n   \"TARGET_SSE\n    && (!(MEM_P (operands[1]) && MEM_P (operands[2]))\n        || (TARGET_SSE3 && rtx_equal_p (operands[1], operands[2])))\"\n   \"@\n    unpcklpd\\t{%2, %0|%0, %2}\n    vunpcklpd\\t{%2, %1, %0|%0, %1, %2}\n+   vunpcklpd\\t{%2, %1, %0|%0, %1, %2}\n    %vmovddup\\t{%1, %0|%0, %1}\n+   vmovddup\\t{%1, %0|%0, %1}\n    movhpd\\t{%2, %0|%0, %2}\n    vmovhpd\\t{%2, %1, %0|%0, %1, %2}\n    %vmovsd\\t{%1, %0|%0, %1}\n    movlhps\\t{%2, %0|%0, %2}\n    movhps\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"isa\" \"sse2_noavx,avx,sse3,sse2_noavx,avx,sse2,noavx,noavx\")\n+  [(set_attr \"isa\" \"sse2_noavx,avx,avx512vl,sse3,avx512vl,sse2_noavx,avx,sse2,noavx,noavx\")\n    (set (attr \"type\")\n      (if_then_else\n        (eq_attr \"alternative\" \"0,1,2\")\n        (const_string \"sselog\")\n        (const_string \"ssemov\")))\n-   (set_attr \"prefix_data16\" \"*,*,*,1,*,*,*,*\")\n-   (set_attr \"prefix\" \"orig,vex,maybe_vex,orig,vex,maybe_vex,orig,orig\")\n-   (set_attr \"mode\" \"V2DF,V2DF,DF,V1DF,V1DF,DF,V4SF,V2SF\")])\n+   (set (attr \"prefix_data16\")\n+\t(if_then_else (eq_attr \"alternative\" \"5\")\n+\t\t      (const_string \"1\")\n+\t\t      (const_string \"*\")))\n+   (set_attr \"prefix\" \"orig,vex,evex,maybe_vex,evex,orig,vex,maybe_vex,orig,orig\")\n+   (set_attr \"mode\" \"V2DF,V2DF,V2DF, DF, DF, V1DF,V1DF,DF,V4SF,V2SF\")])\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;"}]}