{"sha": "a418679d8d389c0960a17eded96bb9ddb7e33cb6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQxODY3OWQ4ZDM4OWMwOTYwYTE3ZWRlZDk2YmI5ZGRiN2UzM2NiNg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2006-08-24T13:30:45Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2006-08-24T13:30:45Z"}, "message": "re PR debug/26881 (internal compiler error in dwarf2out_finish)\n\n\tPR debug/26881\n\t* cgraph.c: Fix comments.\n\t(cgraph_varpool_mark_needed_node): Mark only variables not already\n\toutput to file.\n\t* cgraphunit.c: Update comments; include gt-cgraphunit.h\n\t(cgraph_varpool_assembled_nodes_queue): New static variable.\n\t(cgraph_varpool_assemble_decl): Record output decls for debug out code.\n\t(cgraph_varpool_output_debug_info): New function.\n\t(cgraph_finalize_compilation_unit, cgraph_optimize): Call it.\n\t* Makefile.in: Add gt-cgraphunit.h\n\t* gcc.dg/debug/pr26881.c: New file.\n\nFrom-SVN: r116374", "tree": {"sha": "2478b3f5d0e0838e0af2b96bb6f0306cfbf4000d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2478b3f5d0e0838e0af2b96bb6f0306cfbf4000d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a418679d8d389c0960a17eded96bb9ddb7e33cb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a418679d8d389c0960a17eded96bb9ddb7e33cb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a418679d8d389c0960a17eded96bb9ddb7e33cb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a418679d8d389c0960a17eded96bb9ddb7e33cb6/comments", "author": null, "committer": null, "parents": [{"sha": "96f4873b16293268e23759c39dc03f1eca20ea1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96f4873b16293268e23759c39dc03f1eca20ea1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96f4873b16293268e23759c39dc03f1eca20ea1f"}], "stats": {"total": 106, "additions": 83, "deletions": 23}, "files": [{"sha": "a201c69d3ba1f72e55ee398cacaaa3865f4b435b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a418679d8d389c0960a17eded96bb9ddb7e33cb6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a418679d8d389c0960a17eded96bb9ddb7e33cb6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a418679d8d389c0960a17eded96bb9ddb7e33cb6", "patch": "@@ -1,3 +1,16 @@\n+2006-08-24  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR debug/26881\n+\t* cgraph.c: Fix comments.\n+\t(cgraph_varpool_mark_needed_node): Mark only variables not already\n+\toutput to file.\n+\t* cgraphunit.c: Update comments; include gt-cgraphunit.h\n+\t(cgraph_varpool_assembled_nodes_queue): New static variable.\n+\t(cgraph_varpool_assemble_decl): Record output decls for debug out code.\n+\t(cgraph_varpool_output_debug_info): New function.\n+\t(cgraph_finalize_compilation_unit, cgraph_optimize): Call it.\n+\t* Makefile.in: Add gt-cgraphunit.h\n+\n 2006-08-24  Jan Hubicka  <jh@suse.cz>\n \n \t* predict.c (probability_reliable_p): New predicate."}, {"sha": "db1619c8c004a5a3746249e75b00d4f07ab06bac", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a418679d8d389c0960a17eded96bb9ddb7e33cb6/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a418679d8d389c0960a17eded96bb9ddb7e33cb6/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=a418679d8d389c0960a17eded96bb9ddb7e33cb6", "patch": "@@ -2290,7 +2290,8 @@ cgraphunit.o : cgraphunit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) langhooks.h $(TREE_INLINE_H) toplev.h $(FLAGS_H) $(GGC_H) \\\n    $(TARGET_H) $(CGRAPH_H) intl.h pointer-set.h $(FUNCTION_H) $(TREE_GIMPLE_H) \\\n    $(TREE_FLOW_H) tree-pass.h $(C_COMMON_H) debug.h $(DIAGNOSTIC_H) \\\n-   $(FIBHEAP_H) output.h $(PARAMS_H) $(RTL_H) $(TIMEVAR_H) ipa-prop.h\n+   $(FIBHEAP_H) output.h $(PARAMS_H) $(RTL_H) $(TIMEVAR_H) ipa-prop.h \\\n+   gt-cgraphunit.h\n ipa.o : ipa.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(CGRAPH_H) \n ipa-prop.o : ipa-prop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h  \\\n    langhooks.h $(GGC_H) $(TARGET_H) $(CGRAPH_H) ipa-prop.h \\\n@@ -2867,7 +2868,7 @@ GTFILES = $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/ipa-reference.c $(srcdir)/tree-ssa-structalias.h \\\n   $(srcdir)/tree-ssa-structalias.c \\\n   $(srcdir)/c-pragma.h $(srcdir)/omp-low.c \\\n-  $(srcdir)/targhooks.c $(out_file) \\\n+  $(srcdir)/targhooks.c $(srcdir)/cgraphunit.c $(out_file) \\\n   @all_gtfiles@\n \n GTFILES_FILES_LANGS = @all_gtfiles_files_langs@\n@@ -2899,7 +2900,7 @@ gt-tree-profile.h gt-tree-ssa-address.h \\\n gt-tree-ssanames.h gt-tree-iterator.h gt-gimplify.h \\\n gt-tree-phinodes.h gt-tree-nested.h \\\n gt-tree-ssa-operands.h gt-tree-ssa-propagate.h \\\n-gt-tree-ssa-structalias.h gt-ipa-inline.h \\\n+gt-tree-ssa-structalias.h gt-ipa-inline.h gt-cgraphunit.h \\\n gt-stringpool.h gt-targhooks.h gt-omp-low.h : s-gtype ; @true\n \n define echo_quoted_to_gtyp"}, {"sha": "372b90d5eaa7dc55f6ced4dd3f396219557795a1", "filename": "gcc/cgraph.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a418679d8d389c0960a17eded96bb9ddb7e33cb6/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a418679d8d389c0960a17eded96bb9ddb7e33cb6/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=a418679d8d389c0960a17eded96bb9ddb7e33cb6", "patch": "@@ -47,9 +47,9 @@ The callgraph:\n     be accessed in such an invisible way and it shall be considered an\n     entry point to the callgraph.\n \n-    Intraprocedural information:\n+    Interprocedural information:\n \n-      Callgraph is place to store data needed for intraprocedural optimization.\n+      Callgraph is place to store data needed for interprocedural optimization.\n       All data structures are divided into three components: local_info that\n       is produced while analyzing the function, global_info that is result\n       of global walking of the callgraph on the end of compilation and\n@@ -921,7 +921,8 @@ cgraph_varpool_reset_queue (void)\n void\n cgraph_varpool_mark_needed_node (struct cgraph_varpool_node *node)\n {\n-  if (!node->needed && node->finalized)\n+  if (!node->needed && node->finalized\n+      && !TREE_ASM_WRITTEN (node->decl))\n     cgraph_varpool_enqueue_needed_node (node);\n   node->needed = 1;\n }"}, {"sha": "053359277ad0fee867719c4a48ff9d5ab7ef321e", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 41, "deletions": 17, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a418679d8d389c0960a17eded96bb9ddb7e33cb6/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a418679d8d389c0960a17eded96bb9ddb7e33cb6/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=a418679d8d389c0960a17eded96bb9ddb7e33cb6", "patch": "@@ -1,4 +1,4 @@\n-/* Callgraph based intraprocedural optimizations.\n+/* Callgraph based interprocedural optimizations.\n    Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n    Contributed by Jan Hubicka\n \n@@ -20,7 +20,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n 02110-1301, USA.  */\n \n /* This module implements main driver of compilation process as well as\n-   few basic intraprocedural optimizers.\n+   few basic interprocedural optimizers.\n \n    The main scope of this file is to act as an interface in between\n    tree based frontends and the backend (and middle end)\n@@ -174,6 +174,9 @@ static tree record_reference (tree *, int *, void *);\n static void cgraph_output_pending_asms (void);\n static void cgraph_increase_alignment (void);\n \n+/* Lists all assembled variables to be sent to debugger output later on.  */\n+static GTY(()) struct cgraph_varpool_node *cgraph_varpool_assembled_nodes_queue;\n+\n /* Records tree nodes seen in record_reference.  Simply using\n    walk_tree_without_duplicates doesn't guarantee each node is visited\n    once because it gets a new htab upon each recursive call from\n@@ -856,18 +859,7 @@ cgraph_varpool_assemble_decl (struct cgraph_varpool_node *node)\n       && (TREE_CODE (decl) != VAR_DECL || !DECL_HAS_VALUE_EXPR_P (decl)))\n     {\n       assemble_variable (decl, 0, 1, 0);\n-      /* Local static variables are never seen by check_global_declarations\n-\t so we need to output debug info by hand.  */\n-      if (DECL_CONTEXT (decl)\n-\t  && (TREE_CODE (DECL_CONTEXT (decl)) == BLOCK\n-\t      || TREE_CODE (DECL_CONTEXT (decl)) == FUNCTION_DECL)\n-\t  && errorcount == 0 && sorrycount == 0)\n-\t{\n-\t  timevar_push (TV_SYMOUT);\n-\t  (*debug_hooks->global_decl) (decl);\n-\t  timevar_pop (TV_SYMOUT);\n-\t}\n-      return true;\n+      return TREE_ASM_WRITTEN (decl);\n     }\n \n   return false;\n@@ -893,11 +885,39 @@ cgraph_varpool_assemble_pending_decls (void)\n \n       cgraph_varpool_nodes_queue = cgraph_varpool_nodes_queue->next_needed;\n       if (cgraph_varpool_assemble_decl (node))\n-\tchanged = true;\n-      node->next_needed = NULL;\n+\t{\n+\t  changed = true;\n+\t  node->next_needed = cgraph_varpool_assembled_nodes_queue;\n+\t  cgraph_varpool_assembled_nodes_queue = node;\n+\t  node->finalized = 1;\n+\t}\n+      else\n+        node->next_needed = NULL;\n     }\n   return changed;\n }\n+/* Output all variables enqueued to be assembled.  */\n+static void\n+cgraph_varpool_output_debug_info (void)\n+{\n+  timevar_push (TV_SYMOUT);\n+  if (errorcount == 0 && sorrycount == 0)\n+    while (cgraph_varpool_assembled_nodes_queue)\n+      {\n+\tstruct cgraph_varpool_node *node = cgraph_varpool_assembled_nodes_queue;\n+\n+\t/* Local static variables are never seen by check_global_declarations\n+\t   so we need to output debug info by hand.  */\n+\tif (DECL_CONTEXT (node->decl)\n+\t    && (TREE_CODE (DECL_CONTEXT (node->decl)) == BLOCK\n+\t\t|| TREE_CODE (DECL_CONTEXT (node->decl)) == FUNCTION_DECL)\n+\t    && errorcount == 0 && sorrycount == 0)\n+\t     (*debug_hooks->global_decl) (node->decl);\n+\tcgraph_varpool_assembled_nodes_queue = node->next_needed;\n+\tnode->next_needed = 0;\n+      }\n+  timevar_pop (TV_SYMOUT);\n+}\n \n /* Output all asm statements we have stored up to be output.  */\n \n@@ -1043,6 +1063,7 @@ cgraph_finalize_compilation_unit (void)\n     {\n       cgraph_output_pending_asms ();\n       cgraph_assemble_pending_functions ();\n+      cgraph_varpool_output_debug_info ();\n       return;\n     }\n \n@@ -1495,6 +1516,7 @@ cgraph_optimize (void)\n     {\n       cgraph_output_pending_asms ();\n       cgraph_varpool_assemble_pending_decls ();\n+      cgraph_varpool_output_debug_info ();\n       return;\n     }\n \n@@ -1506,7 +1528,7 @@ cgraph_optimize (void)\n \n   timevar_push (TV_CGRAPHOPT);\n   if (!quiet_flag)\n-    fprintf (stderr, \"Performing intraprocedural optimizations\\n\");\n+    fprintf (stderr, \"Performing interprocedural optimizations\\n\");\n \n   cgraph_function_and_variable_visibility ();\n   if (cgraph_dump_file)\n@@ -1551,6 +1573,7 @@ cgraph_optimize (void)\n       cgraph_varpool_remove_unreferenced_decls ();\n \n       cgraph_varpool_assemble_pending_decls ();\n+      cgraph_varpool_output_debug_info ();\n     }\n \n   if (cgraph_dump_file)\n@@ -1891,3 +1914,4 @@ save_inline_function_body (struct cgraph_node *node)\n   return first_clone;\n }\n \n+#include \"gt-cgraphunit.h\""}, {"sha": "92a3acbe7216c15972ce308b3f497cbab82be01a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a418679d8d389c0960a17eded96bb9ddb7e33cb6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a418679d8d389c0960a17eded96bb9ddb7e33cb6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a418679d8d389c0960a17eded96bb9ddb7e33cb6", "patch": "@@ -1,3 +1,8 @@\n+2006-08-24  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR debug/26881\n+\t* gcc.dg/debug/pr26881.c: New file.\n+\n 2006-08-23  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/28788"}, {"sha": "156a2c4550f83e1dbd710ade8fb3d211de944098", "filename": "gcc/testsuite/gcc.dg/debug/pr26881.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a418679d8d389c0960a17eded96bb9ddb7e33cb6/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fpr26881.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a418679d8d389c0960a17eded96bb9ddb7e33cb6/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fpr26881.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fpr26881.c?ref=a418679d8d389c0960a17eded96bb9ddb7e33cb6", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-g -O0\" } */\n+int\n+main (int argc, char **argv)\n+{\n+  if (0)\n+    {\n+      static union\n+      {\n+      }\n+      u;\n+      typedef char tt;\n+      static tt c[8];\n+      return c[0] == 0x01 && c[1] == 0x02;\n+    }\n+}"}]}