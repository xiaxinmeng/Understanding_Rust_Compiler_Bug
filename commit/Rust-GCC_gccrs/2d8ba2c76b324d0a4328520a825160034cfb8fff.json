{"sha": "2d8ba2c76b324d0a4328520a825160034cfb8fff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ4YmEyYzc2YjMyNGQwYTQzMjg1MjBhODI1MTYwMDM0Y2ZiOGZmZg==", "commit": {"author": {"name": "Lee Millward", "email": "lee.millward@codesourcery.com", "date": "2006-08-09T18:43:06Z"}, "committer": {"name": "Lee Millward", "email": "lmillward@gcc.gnu.org", "date": "2006-08-09T18:43:06Z"}, "message": "re PR c++/28637 (ICE on invalid template parameter)\n\n2006-08-09  Lee Millward  <lee.millward@codesourcery.com>\n\n       PR c++/28637\n       * pt.c (coerce_template_parms): Copy across the\n       invalid template arguments to the new template inner arguments.\n       (retrieve_specialization): Robustify.\n\n       * g++.dg/template/void3.C: New test.\n\n       PR c++/28638\n       * pt.c (coerce_template_template_parms): Robustify.\n       \n       * g++.dg/template/void4.C: New test.\n\n       PR c++/28639\n       * error.c (dump_template_parms): Robustify.\n\n       PR c++/28640\n       * pt.c (redeclare_class_template): Robustify\n\n       * g++.dg/template/void5.C: New test.\n\n       PR c++/28641\n       * pt.c (type_unification_real): Robustify.\n\nFrom-SVN: r116043", "tree": {"sha": "ba6a351afa64d05f3f2c625dcbef7f1651b2475e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba6a351afa64d05f3f2c625dcbef7f1651b2475e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d8ba2c76b324d0a4328520a825160034cfb8fff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d8ba2c76b324d0a4328520a825160034cfb8fff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d8ba2c76b324d0a4328520a825160034cfb8fff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d8ba2c76b324d0a4328520a825160034cfb8fff/comments", "author": null, "committer": null, "parents": [{"sha": "cef6b86c004ea1b65ca4178e569c388fb07a347e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cef6b86c004ea1b65ca4178e569c388fb07a347e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cef6b86c004ea1b65ca4178e569c388fb07a347e"}], "stats": {"total": 90, "additions": 83, "deletions": 7}, "files": [{"sha": "1106f86b0c77c2dbbaedff6c53f41217008f569f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8ba2c76b324d0a4328520a825160034cfb8fff/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8ba2c76b324d0a4328520a825160034cfb8fff/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2d8ba2c76b324d0a4328520a825160034cfb8fff", "patch": "@@ -1,3 +1,22 @@\n+2006-08-09  Lee Millward  <lee.millward@codesourcery.com>\n+\n+       PR c++/28637\n+       * pt.c (coerce_template_parms): Copy across the\n+       invalid template arguments to the new template inner arguments.\n+       (retrieve_specialization): Robustify.\n+\n+       PR c++/28638\n+       * pt.c (coerce_template_template_parms): Robustify.\n+\n+       PR c++/28639\n+       * error.c (dump_template_parms): Robustify.\n+\n+       PR c++/28640\n+       * pt.c (redeclare_class_template): Robustify.\n+\n+       PR c++/28641\n+       * pt.c (type_unification_real): Robustify.\n+\t\n 2006-08-03  Lee Millward  <lee.millward@codesourcery.com>\n \n        PR c++/28347"}, {"sha": "f87355893cbc2922e999be1c9be24cb3dc75609d", "filename": "gcc/cp/error.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8ba2c76b324d0a4328520a825160034cfb8fff/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8ba2c76b324d0a4328520a825160034cfb8fff/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=2d8ba2c76b324d0a4328520a825160034cfb8fff", "patch": "@@ -1242,7 +1242,15 @@ dump_template_parms (tree info, int primary, int flags)\n \n       for (ix = 0; ix != len; ix++)\n \t{\n-\t  tree parm = TREE_VALUE (TREE_VEC_ELT (parms, ix));\n+\t  tree parm;\n+\n+          if (TREE_VEC_ELT (parms, ix) == error_mark_node)\n+            {\n+              pp_identifier (cxx_pp, \"<template parameter error>\");\n+              continue;\n+            }\n+\n+          parm = TREE_VALUE (TREE_VEC_ELT (parms, ix));\n \n \t  if (ix)\n \t    pp_separate_with_comma (cxx_pp);"}, {"sha": "c744759899b9cac32e8a17c3e404aabfc3151fa1", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8ba2c76b324d0a4328520a825160034cfb8fff/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8ba2c76b324d0a4328520a825160034cfb8fff/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=2d8ba2c76b324d0a4328520a825160034cfb8fff", "patch": "@@ -816,6 +816,9 @@ static tree\n retrieve_specialization (tree tmpl, tree args,\n \t\t\t bool class_specializations_p)\n {\n+  if (args == error_mark_node)\n+    return NULL_TREE;\n+\n   gcc_assert (TREE_CODE (tmpl) == TEMPLATE_DECL);\n \n   /* There should be as many levels of arguments as there are\n@@ -3320,10 +3323,19 @@ redeclare_class_template (tree type, tree parms)\n \n   for (i = 0; i < TREE_VEC_LENGTH (tmpl_parms); ++i)\n     {\n-      tree tmpl_parm = TREE_VALUE (TREE_VEC_ELT (tmpl_parms, i));\n-      tree parm = TREE_VALUE (TREE_VEC_ELT (parms, i));\n-      tree tmpl_default = TREE_PURPOSE (TREE_VEC_ELT (tmpl_parms, i));\n-      tree parm_default = TREE_PURPOSE (TREE_VEC_ELT (parms, i));\n+      tree tmpl_parm;\n+      tree parm;\n+      tree tmpl_default;\n+      tree parm_default;\n+\n+      if (TREE_VEC_ELT (tmpl_parms, i) == error_mark_node\n+          || TREE_VEC_ELT (parms, i) == error_mark_node)\n+        continue;\n+\n+      tmpl_parm = TREE_VALUE (TREE_VEC_ELT (tmpl_parms, i));\n+      parm = TREE_VALUE (TREE_VEC_ELT (parms, i));\n+      tmpl_default = TREE_PURPOSE (TREE_VEC_ELT (tmpl_parms, i));\n+      parm_default = TREE_PURPOSE (TREE_VEC_ELT (parms, i));\n \n       /* TMPL_PARM and PARM can be either TYPE_DECL, PARM_DECL, or\n \t TEMPLATE_DECL.  */\n@@ -3785,7 +3797,8 @@ coerce_template_template_parms (tree parm_parms,\n \n   for (i = 0; i < nparms; ++i)\n     {\n-      if (TREE_VEC_ELT (parm_parms, i) == error_mark_node)\n+      if (TREE_VEC_ELT (parm_parms, i) == error_mark_node\n+          || TREE_VEC_ELT (arg_parms, i) == error_mark_node)\n         continue;\n \n       parm = TREE_VALUE (TREE_VEC_ELT (parm_parms, i));\n@@ -4073,7 +4086,10 @@ coerce_template_parms (tree parms,\n       parm = TREE_VEC_ELT (parms, i);\n  \n       if (parm == error_mark_node)\n+      {\n+        TREE_VEC_ELT (new_inner_args, i) = error_mark_node;\n         continue;\n+      }\n \n       /* Calculate the Ith argument.  */\n       if (i < nargs)\n@@ -9788,7 +9804,12 @@ type_unification_real (tree tparms,\n     for (i = 0; i < ntparms; i++)\n       if (!TREE_VEC_ELT (targs, i))\n \t{\n-\t  tree tparm = TREE_VALUE (TREE_VEC_ELT (tparms, i));\n+\t  tree tparm;\n+\n+          if (TREE_VEC_ELT (tparms, i) == error_mark_node)\n+            continue;\n+\n+          tparm = TREE_VALUE (TREE_VEC_ELT (tparms, i));\n \n \t  /* If this is an undeduced nontype parameter that depends on\n \t     a type parameter, try another pass; its type may have been"}, {"sha": "26af1f4959c910c1783648c55e042b1c141ea88b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8ba2c76b324d0a4328520a825160034cfb8fff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8ba2c76b324d0a4328520a825160034cfb8fff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2d8ba2c76b324d0a4328520a825160034cfb8fff", "patch": "@@ -1,3 +1,14 @@\n+2006-08-09  Lee Millward  <lee.millward@codesourcery.com>\n+\n+       PR c++/28637\n+       * g++.dg/template/void3.C: New test.\n+\n+       PR c++/28638\n+       * g++.dg/template/void4.C: New test.\n+\n+`       PR c++/28640\n+       * g++.dg/template/void5.C: New test.\n+\t\n 2006-08-07  Danny Smith  <dannysmith@users.sourceforge.net>\n \n \t* g++.dg/ext/visibility/class1.C (dg-require-visibility): Move"}, {"sha": "6526a2a47be1db3ebe1421a8e70457a8bad4b7e8", "filename": "gcc/testsuite/g++.dg/template/void3.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8ba2c76b324d0a4328520a825160034cfb8fff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8ba2c76b324d0a4328520a825160034cfb8fff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid3.C?ref=2d8ba2c76b324d0a4328520a825160034cfb8fff", "patch": "@@ -0,0 +1,5 @@\n+//PR c++/28637\n+\n+template<void> struct A {};  // { dg-error \"not a valid type\" }\n+A<0> a;\n+"}, {"sha": "7d264fbf10bc47670d38aa04d23284f61bc2f171", "filename": "gcc/testsuite/g++.dg/template/void4.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8ba2c76b324d0a4328520a825160034cfb8fff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8ba2c76b324d0a4328520a825160034cfb8fff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid4.C?ref=2d8ba2c76b324d0a4328520a825160034cfb8fff", "patch": "@@ -0,0 +1,7 @@\n+//PR c++/28638\n+\n+template<void> struct A;  // { dg-error \"not a valid type\" }\n+\n+template<template<int> class> struct B {};\n+\n+B<A> b;"}, {"sha": "bef9b91f680626d57102bb5ac29c4ffe925eb727", "filename": "gcc/testsuite/g++.dg/template/void5.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8ba2c76b324d0a4328520a825160034cfb8fff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8ba2c76b324d0a4328520a825160034cfb8fff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvoid5.C?ref=2d8ba2c76b324d0a4328520a825160034cfb8fff", "patch": "@@ -0,0 +1,5 @@\n+//PR c++/28640\n+\n+template<void> struct A; // { dg-error \"not a valid type\" }\n+template<int> struct A;\n+ "}]}