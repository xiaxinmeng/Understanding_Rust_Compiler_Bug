{"sha": "d814176c58cadb0c551501d3c37880f63e85b988", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgxNDE3NmM1OGNhZGIwYzU1MTUwMWQzYzM3ODgwZjYzZTg1Yjk4OA==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2009-11-25T04:30:41Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2009-11-25T04:30:41Z"}, "message": "tree-scalar-evolution.c (instantiate_scev_3): New.\n\n2009-09-01  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* tree-scalar-evolution.c (instantiate_scev_3): New.\n\t(instantiate_scev_1): Move code in instantiate_scev_3.\n\nFrom-SVN: r154537", "tree": {"sha": "2b1a86cb49bebeed9343e06802b94a607bc74b0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b1a86cb49bebeed9343e06802b94a607bc74b0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d814176c58cadb0c551501d3c37880f63e85b988", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d814176c58cadb0c551501d3c37880f63e85b988", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d814176c58cadb0c551501d3c37880f63e85b988", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d814176c58cadb0c551501d3c37880f63e85b988/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec6636ebd828017e1af5b0515cf48149b13003b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec6636ebd828017e1af5b0515cf48149b13003b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec6636ebd828017e1af5b0515cf48149b13003b7"}], "stats": {"total": 81, "additions": 55, "deletions": 26}, "files": [{"sha": "135ee8f8d5940de347e9f8be55ea1c0eb98b454d", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d814176c58cadb0c551501d3c37880f63e85b988/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d814176c58cadb0c551501d3c37880f63e85b988/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=d814176c58cadb0c551501d3c37880f63e85b988", "patch": "@@ -1,3 +1,8 @@\n+2009-09-01  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* tree-scalar-evolution.c (instantiate_scev_3): New.\n+\t(instantiate_scev_1): Move code in instantiate_scev_3.\n+\n 2009-09-01  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* tree-scalar-evolution.c (instantiate_scev_poly): New."}, {"sha": "11a9bf6c34988a18ea622e073c345d939ee65992", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 50, "deletions": 26, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d814176c58cadb0c551501d3c37880f63e85b988/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d814176c58cadb0c551501d3c37880f63e85b988/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=d814176c58cadb0c551501d3c37880f63e85b988", "patch": "@@ -2376,6 +2376,53 @@ instantiate_scev_bitnot (basic_block instantiate_below,\n   return chrec;\n }\n \n+/* Analyze all the parameters of the chrec, between INSTANTIATE_BELOW\n+   and EVOLUTION_LOOP, that were left under a symbolic form.\n+\n+   CHREC is an expression with 3 operands to be instantiated.\n+\n+   CACHE is the cache of already instantiated values.\n+\n+   FOLD_CONVERSIONS should be set to true when the conversions that\n+   may wrap in signed/pointer type are folded, as long as the value of\n+   the chrec is preserved.\n+\n+   SIZE_EXPR is used for computing the size of the expression to be\n+   instantiated, and to stop if it exceeds some limit.  */\n+\n+static tree\n+instantiate_scev_3 (basic_block instantiate_below,\n+\t\t    struct loop *evolution_loop, tree chrec,\n+\t\t    bool fold_conversions, htab_t cache, int size_expr)\n+{\n+  tree op1, op2;\n+  tree op0 = instantiate_scev_1 (instantiate_below, evolution_loop,\n+\t\t\t\t TREE_OPERAND (chrec, 0),\n+\t\t\t\t fold_conversions, cache, size_expr);\n+  if (op0 == chrec_dont_know)\n+    return chrec_dont_know;\n+\n+  op1 = instantiate_scev_1 (instantiate_below, evolution_loop,\n+\t\t\t    TREE_OPERAND (chrec, 1),\n+\t\t\t    fold_conversions, cache, size_expr);\n+  if (op1 == chrec_dont_know)\n+    return chrec_dont_know;\n+\n+  op2 = instantiate_scev_1 (instantiate_below, evolution_loop,\n+\t\t\t    TREE_OPERAND (chrec, 2),\n+\t\t\t    fold_conversions, cache, size_expr);\n+  if (op2 == chrec_dont_know)\n+    return chrec_dont_know;\n+\n+  if (op0 == TREE_OPERAND (chrec, 0)\n+      && op1 == TREE_OPERAND (chrec, 1)\n+      && op2 == TREE_OPERAND (chrec, 2))\n+    return chrec;\n+\n+  return fold_build3 (TREE_CODE (chrec),\n+\t\t      TREE_TYPE (chrec), op0, op1, op2);\n+}\n+\n /* Analyze all the parameters of the chrec, between INSTANTIATE_BELOW\n    and EVOLUTION_LOOP, that were left under a symbolic form.\n \n@@ -2395,7 +2442,7 @@ instantiate_scev_1 (basic_block instantiate_below,\n \t\t    struct loop *evolution_loop, tree chrec,\n \t\t    bool fold_conversions, htab_t cache, int size_expr)\n {\n-  tree op0, op1, op2;\n+  tree op0, op1;\n \n   /* Give up if the expression is larger than the MAX that we allow.  */\n   if (size_expr++ > PARAM_VALUE (PARAM_SCEV_MAX_EXPR_SIZE))\n@@ -2447,31 +2494,8 @@ instantiate_scev_1 (basic_block instantiate_below,\n   switch (TREE_CODE_LENGTH (TREE_CODE (chrec)))\n     {\n     case 3:\n-      op0 = instantiate_scev_1 (instantiate_below, evolution_loop,\n-\t\t\t\tTREE_OPERAND (chrec, 0),\n-\t\t\t\tfold_conversions, cache, size_expr);\n-      if (op0 == chrec_dont_know)\n-\treturn chrec_dont_know;\n-\n-      op1 = instantiate_scev_1 (instantiate_below, evolution_loop,\n-\t\t\t\tTREE_OPERAND (chrec, 1),\n-\t\t\t\tfold_conversions, cache, size_expr);\n-      if (op1 == chrec_dont_know)\n-\treturn chrec_dont_know;\n-\n-      op2 = instantiate_scev_1 (instantiate_below, evolution_loop,\n-\t\t\t\tTREE_OPERAND (chrec, 2),\n-\t\t\t\tfold_conversions, cache, size_expr);\n-      if (op2 == chrec_dont_know)\n-        return chrec_dont_know;\n-\n-      if (op0 == TREE_OPERAND (chrec, 0)\n-\t  && op1 == TREE_OPERAND (chrec, 1)\n-\t  && op2 == TREE_OPERAND (chrec, 2))\n-\treturn chrec;\n-\n-      return fold_build3 (TREE_CODE (chrec),\n-\t\t\t  TREE_TYPE (chrec), op0, op1, op2);\n+      return instantiate_scev_3 (instantiate_below, evolution_loop, chrec,\n+\t\t\t\t fold_conversions, cache, size_expr);\n \n     case 2:\n       op0 = instantiate_scev_1 (instantiate_below, evolution_loop,"}]}