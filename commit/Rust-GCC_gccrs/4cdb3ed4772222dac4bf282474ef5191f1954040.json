{"sha": "4cdb3ed4772222dac4bf282474ef5191f1954040", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNkYjNlZDQ3NzIyMjJkYWM0YmYyODI0NzRlZjUxOTFmMTk1NDA0MA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1995-12-06T11:50:21Z"}, "committer": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1995-12-06T11:50:21Z"}, "message": "(attributes): Rearrange order, so that condition clobbering can be automatically determined for call insns.\n\n(attributes): Rearrange order, so that condition clobbering\n\tcan be automatically determined for call insns.\n\t(attribute cpu): Add new cpu ARM7.\n\t(attribute type): Add new type MULT.\n\t(attribute prog_mode): New attribute.\n\t(attribute conds): Clobbering of call insns can now be determined\n\tusing prog_mode attribute.\n\t(function units \"write_buf\", \"write_blockage\"): Model the write buffer\n\tas two function units, so that conflicts are avoided more often.\n\t(funcion unit \"core\"): New function unit, so that elapsed cycles can\n\tbe more accurately determined.\n\t(all anonymous patterns): Add names.\n\t(mulsidi3, umulsidi3): New patterns available with fast multiply\n\tvariants.\n\t(all call insns): The conds attribute is now determined automatically.\n\t(zero_extendhisi): Expand for architecture 4 variants if appropriate.\n\t(*zero_extendhisi_insn): New pattern.\n\t(extendqi{hi,si}, extendhisi): Expand for architecture 4 variants if\n\tappropriate.\n\t(*extendhisi_insn, *extendqihi, *extendqisi): New patterns.\n\t(storehi_single_op): New expand.\n\t(movhi): Handle architecture 4 expansion.\n\t(*movhi_insn_arch4): New pattern.\n\t(*movhi_*): Adjust applicability conditions to handle architecture 4.\n\t(reload_outdf): Handle pre/post inc/dec reloads.\n\t(tablejump): Delete.\n\t(matcher for optimized tablejump): delete.\n\t(casesi): New expand.\n\t(casesi_internal): New pattern.\n\t(*movsi_insn): Much simpified now that constants are handled\n\tproperly.\n\t(movaddr): New expand.\n\t(movsf, movdf): No need to force constants into the pool any more.\n\t(*movdf_hard_insn): Much simplified.\n\t(consttable_4, consttable_8, consttable_end, align_4): New patterns\n\tfor supporting embedded constants.\n\nFrom-SVN: r10682", "tree": {"sha": "d0a1cff1ca7c7a31d9e0858a8645224b87b62dfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0a1cff1ca7c7a31d9e0858a8645224b87b62dfb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cdb3ed4772222dac4bf282474ef5191f1954040", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cdb3ed4772222dac4bf282474ef5191f1954040", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cdb3ed4772222dac4bf282474ef5191f1954040", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cdb3ed4772222dac4bf282474ef5191f1954040/comments", "author": null, "committer": null, "parents": [{"sha": "11c1a2072cd38efb08abd30773d698e00b26f7b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11c1a2072cd38efb08abd30773d698e00b26f7b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11c1a2072cd38efb08abd30773d698e00b26f7b6"}], "stats": {"total": 1067, "additions": 608, "deletions": 459}, "files": [{"sha": "6bdcd8081932f093a69d9e1ddc4def356a8d09bc", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 608, "deletions": 459, "changes": 1067, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdb3ed4772222dac4bf282474ef5191f1954040/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdb3ed4772222dac4bf282474ef5191f1954040/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=4cdb3ed4772222dac4bf282474ef5191f1954040", "patch": "@@ -34,44 +34,28 @@\n ;;   the mode is MODE_FLOAT\n ;; 2 `push multiple' operation: operand 0 is the first register.  Subsequent\n ;;   registers are in parallel (use...) expressions.\n+;; 3 A symbol that has been treated properly for pic usage, that is, we\n+;;   will add the pic_register value to it before trying to dereference it.\n \f\n ;; Attributes\n \n-; condition codes: this one is used by final_prescan_insn to speed up\n-; conditionalizing instructions.  It saves having to scan the rtl to see if\n-; it uses or alters the condition codes.\n-\n-; USE means that the condition codes are used by the insn in the process of\n-; outputting code, this means (at present) that we can't use the insn in\n-; inlined branches\n-\n-; SET means that the purpose of the insn is to set the condition codes in a\n-; well defined manner.\n-\n-; CLOB means that the condition codes are altered in an undefined manner, if\n-; they are altered at all\n-\n-; JUMP_CLOB is used when the conditions are not defined if a branch is taken,\n-; but are if the branch wasn't taken; the effect is to limit the branch\n-; elimination scanning.\n-\n-; NOCOND means that the condition codes are neither altered nor affect the\n-; output of this insn\n-\n-(define_attr \"conds\" \"use,set,clob,jump_clob,nocond\"\n-\t(const_string \"nocond\"))\n+; PROG_MODE attribute is used to determine whether condition codes are\n+; clobbered by a call insn: they are if in prog32 mode.  This is controlled\n+; by the -mapcs-{32,26} flag, and possibly the -mcpu=... option.\n+(define_attr \"prog_mode\" \"prog26,prog32\" (const (symbol_ref \"arm_prog_mode\")))\n \n ; CPU attribute is used to determine whether condition codes are clobbered\n ; by a call insn: on the arm6 they are if in 32-bit addressing mode; on the\n ; arm2 and arm3 the condition codes are restored by the return.\n \n-(define_attr \"cpu\" \"arm2,arm3,arm6\" (const (symbol_ref \"arm_cpu_attr\")))\n+(define_attr \"cpu\" \"arm2,arm3,arm6,arm7\"\n+\t(const (symbol_ref \"arm_cpu_attr\")))\n \n ; Floating Point Unit.  If we only have floating point emulation, then there\n ; is no point in scheduling the floating point insns.  (Well, for best\n ; performance we should try and group them together).\n \n-(define_attr \"fpu\" \"fpa,fpe\" (const (symbol_ref \"arm_fpu_attr\")))\n+(define_attr \"fpu\" \"fpa,fpe2,fpe3\" (const (symbol_ref \"arm_fpu_attr\")))\n \n ; LENGTH of an instruction (in bytes)\n (define_attr \"length\" \"\" (const_int 4))\n@@ -88,6 +72,7 @@\n \n ; Classification of each insn\n ; normal\tany data instruction that doesn't hit memory or fp regs\n+; mult\t\ta multiply instruction\n ; block\t\tblockage insn, this blocks all functional units\n ; float\t\ta floating point arithmetic operation (subject to expansion)\n ; fdivx\t\tXFmode floating point division\n@@ -113,15 +98,48 @@\n ; store4\tstore 4 words\n ;\n (define_attr \"type\"\n-\t\"normal,block,float,fdivx,fdivd,fdivs,fmul,ffmul,farith,ffarith,float_em,f_load,f_store,f_mem_r,r_mem_f,f_2_r,r_2_f,call,load,store1,store2,store3,store4\" \n+\t\"normal,mult,block,float,fdivx,fdivd,fdivs,fmul,ffmul,farith,ffarith,float_em,f_load,f_store,f_mem_r,r_mem_f,f_2_r,r_2_f,call,load,store1,store2,store3,store4\" \n \t(const_string \"normal\"))\n \n+; condition codes: this one is used by final_prescan_insn to speed up\n+; conditionalizing instructions.  It saves having to scan the rtl to see if\n+; it uses or alters the condition codes.\n+\n+; USE means that the condition codes are used by the insn in the process of\n+; outputting code, this means (at present) that we can't use the insn in\n+; inlined branches\n+\n+; SET means that the purpose of the insn is to set the condition codes in a\n+; well defined manner.\n+\n+; CLOB means that the condition codes are altered in an undefined manner, if\n+; they are altered at all\n+\n+; JUMP_CLOB is used when the conditions are not defined if a branch is taken,\n+; but are if the branch wasn't taken; the effect is to limit the branch\n+; elimination scanning.\n+\n+; NOCOND means that the condition codes are neither altered nor affect the\n+; output of this insn\n+\n+(define_attr \"conds\" \"use,set,clob,jump_clob,nocond\"\n+\t(if_then_else (eq_attr \"type\" \"call\")\n+\t (if_then_else (eq_attr \"prog_mode\" \"prog32\")\n+\t  (const_string \"clob\") (const_string \"nocond\"))\n+\t (const_string \"nocond\")))\n+\n (define_attr \"write_conflict\" \"no,yes\"\n   (if_then_else (eq_attr \"type\"\n \t\t \"block,float_em,f_load,f_store,f_mem_r,r_mem_f,call,load\")\n \t\t(const_string \"yes\")\n \t\t(const_string \"no\")))\n \n+(define_attr \"core_cycles\" \"single,multi\"\n+  (if_then_else (eq_attr \"type\"\n+\t\t \"normal,float,fdivx,fdivd,fdivs,fmul,ffmul,farith,ffarith\")\n+\t\t(const_string \"single\")\n+\t        (const_string \"multi\")))\n+\n ; The write buffer on some of the arm6 processors is hard to model exactly.\n ; There is room in the buffer for up to two addresses and up to eight words\n ; of memory, but the two needn't be split evenly.  When writing the two\n@@ -169,16 +187,46 @@\n (define_function_unit \"fpa_mem\" 1 0 (and (eq_attr \"fpu\" \"fpa\")\n \t\t\t\t\t (eq_attr \"type\" \"f_load\")) 3 1)\n \n-(define_function_unit \"write_buf\" 1 2 (eq_attr \"type\" \"store1\") 3 3\n+(define_function_unit \"write_buf\" 1 2 (eq_attr \"type\" \"store1\") 5 3)\n+(define_function_unit \"write_buf\" 1 2 (eq_attr \"type\" \"store2\") 7 4)\n+(define_function_unit \"write_buf\" 1 2 (eq_attr \"type\" \"store3\") 9 5)\n+(define_function_unit \"write_buf\" 1 2 (eq_attr \"type\" \"store4\") 11 6)\n+(define_function_unit \"write_buf\" 1 2 (eq_attr \"type\" \"r_mem_f\") 5 3)\n+\n+;; The write_blockage unit models (partially), the fact that writes will stall\n+;; until the write buffer empties.\n+\n+(define_function_unit \"write_blockage\" 1 0 (eq_attr \"type\" \"store1\") 5 5\n \t[(eq_attr \"write_conflict\" \"yes\")])\n-(define_function_unit \"write_buf\" 1 2 (eq_attr \"type\" \"store2\") 5 5\n+(define_function_unit \"write_blockage\" 1 0 (eq_attr \"type\" \"store2\") 7 7\n \t[(eq_attr \"write_conflict\" \"yes\")])\n-(define_function_unit \"write_buf\" 1 2 (eq_attr \"type\" \"store3\") 7 7\n+(define_function_unit \"write_blockage\" 1 0 (eq_attr \"type\" \"store3\") 9 9\n \t[(eq_attr \"write_conflict\" \"yes\")])\n-(define_function_unit \"write_buf\" 1 2 (eq_attr \"type\" \"store4\") 9 9\n+(define_function_unit \"write_blockage\" 1 0 (eq_attr \"type\" \"store4\") 11 11\n \t[(eq_attr \"write_conflict\" \"yes\")])\n-(define_function_unit \"write_buf\" 1 2 (eq_attr \"type\" \"r_mem_f\") 3 3\n+(define_function_unit \"write_blockage\" 1 0 (eq_attr \"type\" \"r_mem_f\") 5 5\n \t[(eq_attr \"write_conflict\" \"yes\")])\n+(define_function_unit \"write_blockage\" 1 0 \n+\t(eq_attr \"write_conflict\" \"yes\") 1 1)\n+\n+(define_function_unit \"core\" 1 1 (eq_attr \"core_cycles\" \"single\") 1 1)\n+\n+(define_function_unit \"core\" 1 1 (eq_attr \"type\" \"load\") 2 2)\n+\n+(define_function_unit \"core\" 1 1 (eq_attr \"type\" \"mult\") 16 16)\n+\n+(define_function_unit \"core\" 1 1 (eq_attr \"type\" \"store1\") 2 2)\n+\n+(define_function_unit \"core\" 1 1 (eq_attr \"type\" \"store2\") 3 3)\n+\n+(define_function_unit \"core\" 1 1 (eq_attr \"type\" \"store3\") 4 4)\n+\n+(define_function_unit \"core\" 1 1 (eq_attr \"type\" \"store4\") 5 5)\n+\n+(define_function_unit \"core\" 1 1\n+  (and (eq_attr \"core_cycles\" \"multi\")\n+       (eq_attr \"type\" \"!mult,load,store2,store3,store4\")) 32 32)\n+\n \f\n ;; Note: For DImode insns, there is normally no reason why operands should\n ;; not be in the same register, what we don't want is for something being\n@@ -196,7 +244,7 @@\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8\")])\n \n-(define_insn \"\"\n+(define_insn \"*adddi_sesidi_di\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n \t(plus:DI (sign_extend:DI\n \t\t  (match_operand:SI 1 \"s_register_operand\" \"r,r\"))\n@@ -207,7 +255,7 @@\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8\")])\n \n-(define_insn \"\"\n+(define_insn \"*adddi_zesidi_di\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n \t(plus:DI (zero_extend:DI\n \t\t  (match_operand:SI 1 \"s_register_operand\" \"r,r\"))\n@@ -247,7 +295,7 @@\n   DONE;\n \")\n \n-(define_insn \"\"\n+(define_insn \"*addsi3_insn\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n \t(plus:SI (match_operand:SI 1 \"s_register_operand\" \"r,r,r\")\n \t\t (match_operand:SI 2 \"reg_or_int_operand\" \"rI,L,?n\")))]\n@@ -258,7 +306,7 @@\n    #\"\n [(set_attr \"length\" \"4,4,16\")])\n \n-(define_insn \"\"\n+(define_insn \"*addsi3_compare0\"\n   [(set (reg:CC_NOOV 24)\n \t(compare:CC_NOOV\n \t (plus:SI (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n@@ -272,7 +320,7 @@\n    sub%?s\\\\t%0, %1, #%n2\"\n [(set_attr \"conds\" \"set\")])\n \n-(define_insn \"\"\n+(define_insn \"*addsi3_compareneg\"\n   [(set (reg:CC 24)\n \t(compare:CC (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n \t\t    (neg:SI (match_operand:SI 2 \"arm_add_operand\" \"rI,L\"))))\n@@ -372,7 +420,7 @@\n    suf%?d\\\\t%0, %1, #%N2\"\n [(set_attr \"type\" \"farith\")])\n \n-(define_insn \"\"\n+(define_insn \"*adddf_df_esfdf\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f,f\")\n \t(plus:DF (float_extend:DF\n \t\t  (match_operand:SF 1 \"s_register_operand\" \"f,f\"))\n@@ -383,7 +431,7 @@\n    suf%?d\\\\t%0, %1, #%N2\"\n [(set_attr \"type\" \"farith\")])\n \n-(define_insn \"\"\n+(define_insn \"*adddf_df_esfdf\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(plus:DF (match_operand:DF 1 \"s_register_operand\" \"f\")\n \t\t (float_extend:DF\n@@ -392,7 +440,7 @@\n   \"adf%?d\\\\t%0, %1, %2\"\n [(set_attr \"type\" \"farith\")])\n \n-(define_insn \"\"\n+(define_insn \"*adddf_esfdf_esfdf\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(plus:DF (float_extend:DF \n \t\t  (match_operand:SF 1 \"s_register_operand\" \"f\"))\n@@ -422,7 +470,7 @@\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8\")])\n \n-(define_insn \"\"\n+(define_insn \"*subdi_di_zesidi\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n \t(minus:DI (match_operand:DI 1 \"s_register_operand\" \"?r,0\")\n \t\t  (zero_extend:DI\n@@ -433,7 +481,7 @@\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8\")])\n \n-(define_insn \"\"\n+(define_insn \"*subdi_di_sesidi\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n \t(minus:DI (match_operand:DI 1 \"s_register_operand\" \"r,0\")\n \t\t  (sign_extend:DI\n@@ -444,7 +492,7 @@\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8\")])\n \n-(define_insn \"\"\n+(define_insn \"*subdi_zesidi_di\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n \t(minus:DI (zero_extend:DI\n \t\t   (match_operand:SI 2 \"s_register_operand\" \"r,r\"))\n@@ -455,7 +503,7 @@\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8\")])\n \n-(define_insn \"\"\n+(define_insn \"*subdi_sesidi_di\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n \t(minus:DI (sign_extend:DI\n \t\t   (match_operand:SI 2 \"s_register_operand\" \"r,r\"))\n@@ -466,7 +514,7 @@\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8\")])\n \n-(define_insn \"\"\n+(define_insn \"*subdi_zesidi_zesidi\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n \t(minus:DI (zero_extend:DI\n \t\t   (match_operand:SI 1 \"s_register_operand\" \"r\"))\n@@ -494,7 +542,7 @@\n     }\n \")\n \n-(define_insn \"\"\n+(define_insn \"*subsi3_insn\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(minus:SI (match_operand:SI 1 \"reg_or_int_operand\" \"rI,?n\")\n \t\t  (match_operand:SI 2 \"s_register_operand\" \"r,r\")))]\n@@ -516,7 +564,7 @@\n   DONE;\n \")\n \n-(define_insn \"\"\n+(define_insn \"*subsi3_compare0\"\n   [(set (reg:CC_NOOV 24)\n \t(compare:CC_NOOV (minus:SI (match_operand:SI 1 \"arm_rhs_operand\" \"r,I\")\n \t\t\t\t (match_operand:SI 2 \"arm_rhs_operand\" \"rI,r\"))\n@@ -561,7 +609,7 @@\n    rsf%?d\\\\t%0, %2, %1\"\n [(set_attr \"type\" \"farith\")])\n \n-(define_insn \"\"\n+(define_insn \"*subdf_esfdf_df\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(minus:DF (float_extend:DF\n \t\t   (match_operand:SF 1 \"s_register_operand\" \"f\"))\n@@ -570,7 +618,7 @@\n   \"suf%?d\\\\t%0, %1, %2\"\n [(set_attr \"type\" \"farith\")])\n \n-(define_insn \"\"\n+(define_insn \"*subdf_df_esfdf\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f,f\")\n \t(minus:DF (match_operand:DF 1 \"fpu_rhs_operand\" \"f,G\")\n \t\t  (float_extend:DF\n@@ -581,7 +629,7 @@\n    rsf%?d\\\\t%0, %2, %1\"\n [(set_attr \"type\" \"farith\")])\n \n-(define_insn \"\"\n+(define_insn \"*subdf_esfdf_esfdf\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(minus:DF (float_extend:DF\n \t\t   (match_operand:SF 1 \"s_register_operand\" \"f\"))\n@@ -609,9 +657,10 @@\n \t(mult:SI (match_operand:SI 2 \"s_register_operand\" \"r,r\")\n \t\t (match_operand:SI 1 \"s_register_operand\" \"%?r,0\")))]\n   \"\"\n-  \"mul%?\\\\t%0, %2, %1\")\n+  \"mul%?\\\\t%0, %2, %1\"\n+[(set_attr \"type\" \"mult\")])\n \n-(define_insn \"\"\n+(define_insn \"*mulsi3_compare0\"\n   [(set (reg:CC_NOOV 24)\n \t(compare:CC_NOOV (mult:SI\n \t\t\t  (match_operand:SI 2 \"s_register_operand\" \"r,r\")\n@@ -621,9 +670,10 @@\n \t(mult:SI (match_dup 2) (match_dup 1)))]\n   \"\"\n   \"mul%?s\\\\t%0, %2, %1\"\n-[(set_attr \"conds\" \"set\")])\n+[(set_attr \"conds\" \"set\")\n+ (set_attr \"type\" \"mult\")])\n \n-(define_insn \"\"\n+(define_insn \"*mulsi_compare0_scratch\"\n   [(set (reg:CC_NOOV 24)\n \t(compare:CC_NOOV (mult:SI\n \t\t\t  (match_operand:SI 2 \"s_register_operand\" \"r,r\")\n@@ -632,20 +682,22 @@\n    (clobber (match_scratch:SI 0 \"=&r,&r\"))]\n   \"\"\n   \"mul%?s\\\\t%0, %2, %1\"\n-[(set_attr \"conds\" \"set\")])\n+[(set_attr \"conds\" \"set\")\n+ (set_attr \"type\" \"mult\")])\n \n ;; Unnamed templates to match MLA instruction.\n \n-(define_insn \"\"\n+(define_insn \"*mulsi3addsi\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=&r,&r,&r,&r\")\n \t(plus:SI\n \t  (mult:SI (match_operand:SI 2 \"s_register_operand\" \"r,r,r,r\")\n \t\t   (match_operand:SI 1 \"s_register_operand\" \"%r,0,r,0\"))\n \t  (match_operand:SI 3 \"s_register_operand\" \"?r,r,0,0\")))]\n   \"\"\n-  \"mla%?\\\\t%0, %2, %1, %3\")\n+  \"mla%?\\\\t%0, %2, %1, %3\"\n+[(set_attr \"type\" \"mult\")])\n \n-(define_insn \"\"\n+(define_insn \"*mulsi3addsi_compare0\"\n   [(set (reg:CC_NOOV 24)\n \t(compare:CC_NOOV (plus:SI\n \t\t\t  (mult:SI\n@@ -658,9 +710,10 @@\n \t\t (match_dup 3)))]\n   \"\"\n   \"mla%?s\\\\t%0, %2, %1, %3\"\n-[(set_attr \"conds\" \"set\")])\n+[(set_attr \"conds\" \"set\")\n+ (set_attr \"type\" \"mult\")])\n \n-(define_insn \"\"\n+(define_insn \"*mulsi3addsi_compare0_scratch\"\n   [(set (reg:CC_NOOV 24)\n \t(compare:CC_NOOV (plus:SI\n \t\t\t  (mult:SI\n@@ -671,7 +724,28 @@\n    (clobber (match_scratch:SI 0 \"=&r,&r,&r,&r\"))]\n   \"\"\n   \"mla%?s\\\\t%0, %2, %1, %3\"\n-[(set_attr \"conds\" \"set\")])\n+[(set_attr \"conds\" \"set\")\n+ (set_attr \"type\" \"mult\")])\n+\n+(define_insn \"mulsidi3\"\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=&r\")\n+      (mult:DI (sign_extend:DI\n+                (match_operand:SI 1 \"s_register_operand\" \"%r\"))\n+               (sign_extend:DI\n+               (match_operand:SI 2 \"s_register_operand\" \"r\"))))]\n+  \"arm_fast_multiply\"\n+  \"smull%?\\\\t%0, %R0, %1, %2\"\n+[(set_attr \"type\" \"mult\")])\n+\n+(define_insn \"umulsidi3\"\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=&r\")\n+      (mult:DI (zero_extend:DI\n+                (match_operand:SI 1 \"s_register_operand\" \"%r\"))\n+               (zero_extend:DI\n+                (match_operand:SI 2 \"s_register_operand\" \"r\"))))]\n+  \"arm_fast_multiply\"\n+  \"umull%?\\\\t%0, %R0, %1, %2\"\n+[(set_attr \"type\" \"mult\")])\n \n (define_insn \"mulsf3\"\n   [(set (match_operand:SF 0 \"s_register_operand\" \"=f\")\n@@ -689,7 +763,7 @@\n   \"muf%?d\\\\t%0, %1, %2\"\n [(set_attr \"type\" \"fmul\")])\n \n-(define_insn \"\"\n+(define_insn \"*muldf_esfdf_df\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(mult:DF (float_extend:DF\n \t\t  (match_operand:SF 1 \"s_register_operand\" \"f\"))\n@@ -698,7 +772,7 @@\n   \"muf%?d\\\\t%0, %1, %2\"\n [(set_attr \"type\" \"fmul\")])\n \n-(define_insn \"\"\n+(define_insn \"*muldf_df_esfdf\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(mult:DF (match_operand:DF 1 \"s_register_operand\" \"f\")\n \t\t (float_extend:DF\n@@ -707,7 +781,7 @@\n   \"muf%?d\\\\t%0, %1, %2\"\n [(set_attr \"type\" \"fmul\")])\n \n-(define_insn \"\"\n+(define_insn \"*muldf_esfdf_esfdf\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(mult:DF (float_extend:DF\n \t\t  (match_operand:SF 1 \"s_register_operand\" \"f\"))\n@@ -747,7 +821,7 @@\n    rdf%?d\\\\t%0, %2, %1\"\n [(set_attr \"type\" \"fdivd\")])\n \n-(define_insn \"\"\n+(define_insn \"*divdf_esfdf_df\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(div:DF (float_extend:DF\n \t\t (match_operand:SF 1 \"s_register_operand\" \"f\"))\n@@ -756,7 +830,7 @@\n   \"dvf%?d\\\\t%0, %1, %2\"\n [(set_attr \"type\" \"fdivd\")])\n \n-(define_insn \"\"\n+(define_insn \"*divdf_df_esfdf\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(div:DF (match_operand:DF 1 \"fpu_rhs_operand\" \"fG\")\n \t\t(float_extend:DF\n@@ -765,7 +839,7 @@\n   \"rdf%?d\\\\t%0, %2, %1\"\n [(set_attr \"type\" \"fdivd\")])\n \n-(define_insn \"\"\n+(define_insn \"*divdf_esfdf_esfdf\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(div:DF (float_extend:DF\n \t\t (match_operand:SF 1 \"s_register_operand\" \"f\"))\n@@ -803,7 +877,7 @@\n   \"rmf%?d\\\\t%0, %1, %2\"\n [(set_attr \"type\" \"fdivd\")])\n \n-(define_insn \"\"\n+(define_insn \"*moddf_esfdf_df\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(mod:DF (float_extend:DF\n \t\t (match_operand:SF 1 \"s_register_operand\" \"f\"))\n@@ -812,7 +886,7 @@\n   \"rmf%?d\\\\t%0, %1, %2\"\n [(set_attr \"type\" \"fdivd\")])\n \n-(define_insn \"\"\n+(define_insn \"*moddf_df_esfdf\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(mod:DF (match_operand:DF 1 \"s_register_operand\" \"f\")\n \t\t(float_extend:DF\n@@ -821,7 +895,7 @@\n   \"rmf%?d\\\\t%0, %1, %2\"\n [(set_attr \"type\" \"fdivd\")])\n \n-(define_insn \"\"\n+(define_insn \"*moddf_esfdf_esfdf\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(mod:DF (float_extend:DF\n \t\t (match_operand:SF 1 \"s_register_operand\" \"f\"))\n@@ -849,7 +923,7 @@\n   \"and%?\\\\t%0, %1, %2\\;and%?\\\\t%R0, %R1, %R2\"\n [(set_attr \"length\" \"8\")])\n \n-(define_insn \"\"\n+(define_insn \"*anddi_zesidi_di\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n \t(and:DI (zero_extend:DI\n \t\t (match_operand:SI 2 \"s_register_operand\" \"r,r\"))\n@@ -858,7 +932,7 @@\n   \"and%?\\\\t%0, %1, %2\\;mov%?\\\\t%R0, #0\"\n [(set_attr \"length\" \"8\")])\n \n-(define_insn \"\"\n+(define_insn \"*anddi_sesdi_di\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n \t(and:DI (sign_extend:DI\n \t\t (match_operand:SI 2 \"s_register_operand\" \"r,r\"))\n@@ -883,7 +957,7 @@\n     }\n \")\n \n-(define_insn \"\"\n+(define_insn \"*andsi3_insn\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n \t(and:SI (match_operand:SI 1 \"s_register_operand\" \"r,r,r\")\n \t\t(match_operand:SI 2 \"reg_or_int_operand\" \"rI,K,?n\")))]\n@@ -907,7 +981,7 @@\n   DONE;\n \")\n \n-(define_insn \"\"\n+(define_insn \"*andsi3_compare0\"\n   [(set (reg:CC_NOOV 24)\n \t(compare:CC_NOOV\n \t (and:SI (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n@@ -921,7 +995,7 @@\n    bic%?s\\\\t%0, %1, #%B2\"\n [(set_attr \"conds\" \"set\")])\n \n-(define_insn \"\"\n+(define_insn \"*andsi3_compare0_scratch\"\n   [(set (reg:CC_NOOV 24)\n \t(compare:CC_NOOV\n \t (and:SI (match_operand:SI 0 \"s_register_operand\" \"r,r\")\n@@ -934,7 +1008,7 @@\n    bic%?s\\\\t%3, %0, #%B1\"\n [(set_attr \"conds\" \"set\")])\n \n-(define_insn \"\"\n+(define_insn \"*zeroextractsi_compare0_scratch\"\n   [(set (reg:CC_NOOV 24)\n \t(compare:CC_NOOV (zero_extract:SI\n \t\t\t  (match_operand:SI 0 \"s_register_operand\" \"r\")\n@@ -959,7 +1033,7 @@\n \"\n [(set_attr \"conds\" \"set\")])\n \n-(define_insn \"\"\n+(define_insn \"*zeroextractqi_compare0_scratch\"\n   [(set (reg:CC_NOOV 24)\n \t(compare:CC_NOOV (zero_extract:SI\n \t\t\t  (match_operand:QI 0 \"memory_operand\" \"m\")\n@@ -986,15 +1060,15 @@\n  (set_attr \"length\" \"8\")])\n \n ;; constants for op 2 will never be given to these patterns.\n-(define_insn \"\"\n+(define_insn \"*anddi_notdi_di\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n \t(and:DI (not:DI (match_operand:DI 2 \"s_register_operand\" \"r,0\"))\n \t\t(match_operand:DI 1 \"s_register_operand\" \"0,r\")))]\n   \"\"\n   \"bic%?\\\\t%0, %1, %2\\;bic%?\\\\t%R0, %R1, %R2\"\n [(set_attr \"length\" \"8\")])\n   \n-(define_insn \"\"\n+(define_insn \"*anddi_notzesidi_di\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n \t(and:DI (not:DI (zero_extend:DI\n \t\t\t (match_operand:SI 2 \"s_register_operand\" \"r,r\")))\n@@ -1005,7 +1079,7 @@\n    bic%?\\\\t%0, %1, %2\\;mov%?\\\\t%R0, %R1\"\n [(set_attr \"length\" \"4,8\")])\n   \n-(define_insn \"\"\n+(define_insn \"*anddi_notsesidi_di\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n \t(and:DI (not:DI (sign_extend:DI\n \t\t\t (match_operand:SI 2 \"s_register_operand\" \"r,r\")))\n@@ -1014,14 +1088,14 @@\n   \"bic%?\\\\t%0, %1, %2\\;bic%?\\\\t%R0, %R1, %2, asr #31\"\n [(set_attr \"length\" \"8\")])\n   \n-(define_insn \"\"\n+(define_insn \"*andsi_notsi_si\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(and:SI (not:SI (match_operand:SI 2 \"s_register_operand\" \"r\"))\n \t\t(match_operand:SI 1 \"s_register_operand\" \"r\")))]\n   \"\"\n   \"bic%?\\\\t%0, %1, %2\")\n \n-(define_insn \"\"\n+(define_insn \"*andsi_notsi_si_compare0\"\n   [(set (reg:CC_NOOV 24)\n \t(compare:CC_NOOV\n \t (and:SI (not:SI (match_operand:SI 2 \"s_register_operand\" \"r\"))\n@@ -1033,7 +1107,7 @@\n   \"bic%?s\\\\t%0, %1, %2\"\n [(set_attr \"conds\" \"set\")])\n \n-(define_insn \"\"\n+(define_insn \"*andsi_notsi_si_compare0_scratch\"\n   [(set (reg:CC_NOOV 24)\n \t(compare:CC_NOOV\n \t (and:SI (not:SI (match_operand:SI 2 \"s_register_operand\" \"r\"))\n@@ -1052,7 +1126,7 @@\n   \"orr%?\\\\t%0, %1, %2\\;orr%?\\\\t%R0, %R1, %R2\"\n [(set_attr \"length\" \"8\")])\n \n-(define_insn \"\"\n+(define_insn \"*iordi_zesidi_di\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n \t(ior:DI (zero_extend:DI\n \t\t (match_operand:SI 2 \"s_register_operand\" \"r,r\"))\n@@ -1063,7 +1137,7 @@\n    orr%?\\\\t%0, %1, %2\\;mov%?\\\\t%R0, %R1\"\n [(set_attr \"length\" \"4,8\")])\n \n-(define_insn \"\"\n+(define_insn \"*iordi_sesidi_di\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n \t(ior:DI (sign_extend:DI\n \t\t (match_operand:SI 2 \"s_register_operand\" \"r,r\"))\n@@ -1088,7 +1162,7 @@\n     }\n \")\n \n-(define_insn \"\"\n+(define_insn \"*iorsi3_insn\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(ior:SI (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n \t\t(match_operand:SI 2 \"reg_or_int_operand\" \"rI,?n\")))]\n@@ -1110,7 +1184,7 @@\n   DONE;\n \")\n   \n-(define_insn \"\"\n+(define_insn \"*iorsi3_compare0\"\n   [(set (reg:CC_NOOV 24)\n \t(compare:CC_NOOV (ior:SI (match_operand:SI 1 \"s_register_operand\" \"%r\")\n \t\t\t\t (match_operand:SI 2 \"arm_rhs_operand\" \"rI\"))\n@@ -1121,7 +1195,7 @@\n   \"orr%?s\\\\t%0, %1, %2\"\n [(set_attr \"conds\" \"set\")])\n \n-(define_insn \"\"\n+(define_insn \"*iorsi3_compare0_scratch\"\n   [(set (reg:CC_NOOV 24)\n \t(compare:CC_NOOV (ior:SI (match_operand:SI 1 \"s_register_operand\" \"%r\")\n \t\t\t\t (match_operand:SI 2 \"arm_rhs_operand\" \"rI\"))\n@@ -1139,7 +1213,7 @@\n   \"eor%?\\\\t%0, %1, %2\\;eor%?\\\\t%R0, %R1, %R2\"\n [(set_attr \"length\" \"8\")])\n \n-(define_insn \"\"\n+(define_insn \"*xordi_zesidi_di\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n \t(xor:DI (zero_extend:DI\n \t\t (match_operand:SI 2 \"s_register_operand\" \"r,r\"))\n@@ -1150,7 +1224,7 @@\n    eor%?\\\\t%0, %1, %2\\;mov%?\\\\t%R0, %R1\"\n [(set_attr \"length\" \"4,8\")])\n \n-(define_insn \"\"\n+(define_insn \"*xordi_sesidi_di\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n \t(xor:DI (sign_extend:DI\n \t\t (match_operand:SI 2 \"s_register_operand\" \"r,r\"))\n@@ -1166,7 +1240,7 @@\n   \"\"\n   \"eor%?\\\\t%0, %1, %2\")\n \n-(define_insn \"\"\n+(define_insn \"*xorsi3_compare0\"\n   [(set (reg:CC_NOOV 24)\n \t(compare:CC_NOOV (xor:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n \t\t\t\t (match_operand:SI 2 \"arm_rhs_operand\" \"rI\"))\n@@ -1177,7 +1251,7 @@\n   \"eor%?s\\\\t%0, %1, %2\"\n [(set_attr \"conds\" \"set\")])\n \n-(define_insn \"\"\n+(define_insn \"*xorsi3_compare0_scratch\"\n   [(set (reg:CC_NOOV 24)\n \t(compare:CC_NOOV (xor:SI (match_operand:SI 0 \"s_register_operand\" \"r\")\n \t\t\t\t (match_operand:SI 1 \"arm_rhs_operand\" \"rI\"))\n@@ -1203,7 +1277,7 @@\n   \"\"\n )\n \n-(define_insn \"\"\n+(define_insn \"*andsi_iorsi3_notsi\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=&r,&r,&r\")\n \t(and:SI (ior:SI (match_operand:SI 1 \"s_register_operand\" \"r,r,0\")\n \t\t\t(match_operand:SI 2 \"arm_rhs_operand\" \"rI,0,rI\"))\n@@ -1268,7 +1342,7 @@\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8,8,12\")])\n \n-(define_insn \"\"\n+(define_insn \"*store_minmansi\"\n   [(set (match_operand:SI 0 \"memory_operand\" \"=m\")\n \t(match_operator:SI 3 \"minmax_operator\"\n \t [(match_operand:SI 1 \"s_register_operand\" \"r\")\n@@ -1287,7 +1361,7 @@\n  (set_attr \"length\" \"12\")\n  (set_attr \"type\" \"store1\")])\n \n-(define_insn \"\"\n+(define_insn \"*minmax_arithsi\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(match_operator:SI 4 \"shiftable_operator\"\n \t [(match_operator:SI 5 \"minmax_operator\"\n@@ -1382,15 +1456,15 @@\n     operands[2] = GEN_INT (INTVAL (operands[2]) % 32);\n \")\n \n-(define_insn \"\"\n+(define_insn \"*shiftsi3\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(match_operator:SI 3 \"shift_operator\"\n \t [(match_operand:SI 1 \"s_register_operand\" \"r\")\n \t  (match_operand:SI 2 \"reg_or_int_operand\" \"rM\")]))]\n   \"\"\n   \"mov%?\\\\t%0, %1%S3\")\n \n-(define_insn \"\"\n+(define_insn \"*shiftsi3_compare0\"\n   [(set (reg:CC_NOOV 24)\n \t(compare:CC_NOOV (match_operator:SI 3 \"shift_operator\"\n \t\t\t  [(match_operand:SI 1 \"s_register_operand\" \"r\")\n@@ -1402,7 +1476,7 @@\n   \"mov%?s\\\\t%0, %1%S3\"\n [(set_attr \"conds\" \"set\")])\n \n-(define_insn \"\"\n+(define_insn \"*shiftsi3_compare0_scratch\"\n   [(set (reg:CC_NOOV 24)\n \t(compare:CC_NOOV (match_operator:SI 3 \"shift_operator\"\n \t\t\t  [(match_operand:SI 1 \"s_register_operand\" \"r\")\n@@ -1413,15 +1487,15 @@\n   \"mov%?s\\\\t%0, %1%S3\"\n [(set_attr \"conds\" \"set\")])\n \n-(define_insn \"\"\n+(define_insn \"*notsi_shiftsi\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(not:SI (match_operator:SI 3 \"shift_operator\"\n \t\t [(match_operand:SI 1 \"s_register_operand\" \"r\")\n \t\t  (match_operand:SI 2 \"arm_rhs_operand\" \"rM\")])))]\n   \"\"\n   \"mvn%?\\\\t%0, %1%S3\")\n \n-(define_insn \"\"\n+(define_insn \"*notsi_shiftsi_compare0\"\n   [(set (reg:CC_NOOV 24)\n \t(compare:CC_NOOV (not:SI (match_operator:SI 3 \"shift_operator\"\n \t\t\t  [(match_operand:SI 1 \"s_register_operand\" \"r\")\n@@ -1433,7 +1507,7 @@\n   \"mvn%?s\\\\t%0, %1%S3\"\n [(set_attr \"conds\" \"set\")])\n \n-(define_insn \"\"\n+(define_insn \"*not_shiftsi_compare0_scratch\"\n   [(set (reg:CC_NOOV 24)\n \t(compare:CC_NOOV (not:SI (match_operator:SI 3 \"shift_operator\"\n \t\t\t  [(match_operand:SI 1 \"s_register_operand\" \"r\")\n@@ -1475,7 +1549,7 @@\n   \"mnf%?d\\\\t%0, %1\"\n [(set_attr \"type\" \"ffarith\")])\n \n-(define_insn \"\"\n+(define_insn \"*negdf_esfdf\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(neg:DF (float_extend:DF\n \t\t (match_operand:SF 1 \"s_register_operand\" \"f\"))))]\n@@ -1506,7 +1580,7 @@\n [(set_attr \"conds\" \"clob,*\")\n  (set_attr \"length\" \"8\")])\n \n-(define_insn \"\"\n+(define_insn \"*neg_abssi2\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,&r\")\n \t(neg:SI (abs:SI (match_operand:SI 1 \"s_register_operand\" \"0,r\"))))\n    (clobber (reg 24))]\n@@ -1531,7 +1605,7 @@\n   \"abs%?d\\\\t%0, %1\"\n [(set_attr \"type\" \"ffarith\")])\n \n-(define_insn \"\"\n+(define_insn \"*absdf_esfdf\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(abs:DF (float_extend:DF\n \t\t (match_operand:SF 1 \"s_register_operand\" \"f\"))))]\n@@ -1560,7 +1634,7 @@\n   \"sqt%?d\\\\t%0, %1\"\n [(set_attr \"type\" \"float_em\")])\n \n-(define_insn \"\"\n+(define_insn \"*sqrtdf_esfdf\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(sqrt:DF (float_extend:DF\n \t\t  (match_operand:SF 1 \"s_register_operand\" \"f\"))))]\n@@ -1589,7 +1663,7 @@\n   \"sin%?d\\\\t%0, %1\"\n [(set_attr \"type\" \"float_em\")])\n \n-(define_insn \"\"\n+(define_insn \"*sindf_esfdf\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(unspec:DF [(float_extend:DF\n \t\t     (match_operand:SF 1 \"s_register_operand\" \"f\"))] 0))]\n@@ -1618,7 +1692,7 @@\n   \"cos%?d\\\\t%0, %1\"\n [(set_attr \"type\" \"float_em\")])\n \n-(define_insn \"\"\n+(define_insn \"*cosdf_esfdf\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(unspec:DF [(float_extend:DF\n \t\t     (match_operand:SF 1 \"s_register_operand\" \"f\"))] 1))]\n@@ -1646,7 +1720,7 @@\n   \"\"\n   \"mvn%?\\\\t%0, %1\")\n \n-(define_insn \"\"\n+(define_insn \"*notsi_compare0\"\n   [(set (reg:CC_NOOV 24)\n \t(compare:CC_NOOV (not:SI (match_operand:SI 1 \"s_register_operand\" \"r\"))\n \t\t\t (const_int 0)))\n@@ -1656,7 +1730,7 @@\n   \"mvn%?s\\\\t%0, %1\"\n [(set_attr \"conds\" \"set\")])\n \n-(define_insn \"\"\n+(define_insn \"*notsi_compare0_scratch\"\n   [(set (reg:CC_NOOV 24)\n \t(compare:CC_NOOV (not:SI (match_operand:SI 1 \"s_register_operand\" \"r\"))\n \t\t\t (const_int 0)))\n@@ -1777,6 +1851,12 @@\n   \"\"\n   \"\n {\n+  if (arm_arch4 && GET_CODE (operands[1]) == MEM)\n+    {\n+      emit_insn (gen_rtx (SET, VOIDmode, operands[0],\n+\t\t\t  gen_rtx (ZERO_EXTEND, SImode, operands[1])));\n+      DONE;\n+    }\n   if (TARGET_SHORT_BY_BYTES && GET_CODE (operands[1]) == MEM)\n     {\n       emit_insn (gen_movhi_bytes (operands[0], operands[1]));\n@@ -1788,6 +1868,13 @@\n   operands[2] = gen_reg_rtx (SImode); \n }\")\n \n+(define_insn \"*zero_extendhisi_insn\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(zero_extend:SI (match_operand:HI 1 \"memory_operand\" \"m\")))]\n+  \"arm_arch4\"\n+  \"ldr%?h\\\\t%0, %1\"\n+[(set_attr \"type\" \"load\")])\n+\n (define_expand \"zero_extendqisi2\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(zero_extend:SI\n@@ -1802,7 +1889,7 @@\n     }\n \")\n \n-(define_insn \"\"\n+(define_insn \"*load_extendqisi\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(zero_extend:SI (match_operand:QI 1 \"memory_operand\" \"m\")))]\n   \"\"\n@@ -1818,7 +1905,7 @@\n    (set (match_dup 0) (and:SI (match_dup 2) (const_int 255)))]\n   \"\")\n \n-(define_insn \"\"\n+(define_insn \"*compareqi_eq0\"\n   [(set (reg:CC_NOOV 24)\n \t(compare:CC_NOOV (match_operand:QI 0 \"s_register_operand\" \"r\")\n \t\t\t (const_int 0)))]\n@@ -1836,6 +1923,13 @@\n   \"\"\n   \"\n { \n+  if (arm_arch4 && GET_CODE (operands[1]) == MEM)\n+    {\n+      emit_insn (gen_rtx (SET, VOIDmode, operands[0],\n+\t\t gen_rtx (SIGN_EXTEND, SImode, operands[1])));\n+      DONE;\n+    }\n+\n   if (TARGET_SHORT_BY_BYTES && GET_CODE (operands[1]) == MEM)\n     {\n       emit_insn (gen_extendhisi2_mem (operands[0], operands[1]));\n@@ -1874,18 +1968,42 @@\n     }\n \")\n \n+(define_insn \"*extendhisi_insn\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(sign_extend:SI (match_operand:HI 1 \"memory_operand\" \"m\")))]\n+  \"arm_arch4\"\n+  \"ldr%?sh\\\\t%0, %1\"\n+[(set_attr \"type\" \"load\")])\n+\n (define_expand \"extendqihi2\"\n   [(set (match_dup 2)\n-\t(ashift:SI (match_operand:QI 1 \"s_register_operand\" \"\")\n+\t(ashift:SI (match_operand:QI 1 \"general_operand\" \"\")\n \t\t   (const_int 24)))\n    (set (match_operand:HI 0 \"s_register_operand\" \"\")\n \t(ashiftrt:SI (match_dup 2)\n \t\t     (const_int 24)))]\n   \"\"\n   \"\n-{ operands[0] = gen_lowpart (SImode, operands[0]);\n+{\n+  if (arm_arch4 && GET_CODE (operands[1]) == MEM)\n+    {\n+      emit_insn (gen_rtx (SET, VOIDmode, operands[0],\n+\t\t\t  gen_rtx (SIGN_EXTEND, HImode, operands[1])));\n+      DONE;\n+    }\n+  if (! s_register_operand (operands[1], QImode))\n+    operands[1] = copy_to_mode_reg (QImode, operands[1]);\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n   operands[1] = gen_lowpart (SImode, operands[1]);\n-  operands[2] = gen_reg_rtx (SImode); }\")\n+  operands[2] = gen_reg_rtx (SImode);\n+}\")\n+\n+(define_insn \"*extendqihi_insn\"\n+  [(set (match_operand:HI 0 \"s_register_operand\" \"=r\")\n+\t(sign_extend:HI (match_operand:QI 1 \"memory_operand\" \"o<>\")))]\n+  \"arm_arch4\"\n+  \"ldr%?sb\\\\t%0, %1\"\n+[(set_attr \"type\" \"load\")])\n \n (define_expand \"extendqisi2\"\n   [(set (match_dup 2)\n@@ -1896,8 +2014,25 @@\n \t\t     (const_int 24)))]\n   \"\"\n   \"\n-{ operands[1] = gen_lowpart (SImode, operands[1]);\n-  operands[2] = gen_reg_rtx (SImode); }\")\n+{\n+  if (arm_arch4 && GET_CODE (operands[1]) == MEM)\n+    {\n+      emit_insn (gen_rtx (SET, VOIDmode, operands[0],\n+\t\t\t  gen_rtx (SIGN_EXTEND, SImode, operands[1])));\n+      DONE;\n+    }\n+  if (! s_register_operand (operands[1], QImode))\n+    operands[1] = copy_to_mode_reg (QImode, operands[1]);\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n+  operands[2] = gen_reg_rtx (SImode);\n+}\")\n+\n+(define_insn \"*extendqisi_insn\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(sign_extend:SI (match_operand:QI 1 \"memory_operand\" \"o<>\")))]\n+  \"arm_arch4\"\n+  \"ldr%?sb\\\\t%0, %1\"\n+[(set_attr \"type\" \"load\")])\n \n (define_insn \"extendsfdf2\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n@@ -1984,14 +2119,14 @@\n \n \n (define_insn \"movdi\"\n-  [(set (match_operand:DI 0 \"di_operand\" \"=r,r,r,o<>,r\")\n-\t(match_operand:DI 1 \"di_operand\" \"rIK,n,o<>,r,F\"))]\n+  [(set (match_operand:DI 0 \"di_operand\" \"=r,r,o<>\")\n+\t(match_operand:DI 1 \"di_operand\" \"rIK,mi,r\"))]\n   \"\"\n   \"*\n   return (output_move_double (operands));\n \"\n-[(set_attr \"length\" \"8,32,8,8,32\")\n- (set_attr \"type\" \"*,*,load,store2,*\")])\n+[(set_attr \"length\" \"8,8,8\")\n+ (set_attr \"type\" \"*,load,store2\")])\n \n (define_expand \"movsi\"\n   [(set (match_operand:SI 0 \"general_operand\" \"\")\n@@ -2013,66 +2148,17 @@\n     }\n \")\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=r,r,r,r,m,r,r\")\n-\t(match_operand:SI 1 \"general_operand\"  \"R,m,K,rI,r,S,?n\"))]\n-  \"(register_operand (operands[0], SImode)\n-    && (GET_CODE (operands[1]) != SYMBOL_REF\n-\t|| CONSTANT_ADDRESS_P (operands[1])))\n+(define_insn \"*movsi_insn\"\n+  [(set (match_operand:SI 0 \"general_operand\" \"=r,r,r,m\")\n+\t(match_operand:SI 1 \"general_operand\"  \"rI,K,mi,r\"))]\n+  \"register_operand (operands[0], SImode)\n    || register_operand (operands[1], SImode)\"\n-  \"*\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      /* NB Calling get_attr_length may cause the insn to be re-extracted... */\n-      if (get_attr_length (insn) == 8)\n-\t{\n-\t  /* ... so modify the operands here.  */\n-\t  operands[1] = XEXP (operands[1], 0);\n-\t  output_asm_insn (\\\"sub%?\\\\t%0, %|pc, #(8 + . - %a1) & ~4095\\\",\n-\t\t\t   operands);\n-\t  output_asm_insn (\\\"ldr%?\\\\t%0, [%0, #- ((4 + . - %a1) & 4095)]\\\",\n-\t\t\t   operands);\n-\t}\n-      else\n-\t{\n-\t  /* ... and here.  */\n-\t  operands[1] = XEXP (operands[1], 0);\n-\t  output_asm_insn (\\\"ldr%?\\\\t%0, [%|pc, %1 - . - 8]\\\", operands);\n-\t}\n-      return \\\"\\\";\n-\n-    case 1:\n-      if (GET_CODE (XEXP (operands[1], 0)) == SYMBOL_REF\n-\t  &&  CONSTANT_POOL_ADDRESS_P (XEXP (operands[1], 0)))\n-\tabort ();\n-      return \\\"ldr%?\\\\t%0, %1\\\";\n-\n-    case 3:\n-      return \\\"mov%?\\\\t%0, %1\\\";\n-    case 2:\n-      return \\\"mvn%?\\\\t%0, #%B1\\\";\n-    case 4:\n-      return \\\"str%?\\\\t%1, %0\\\";\n-    case 5:\n-      return output_load_symbol (insn, operands);\n-    case 6:\n-      return \\\"#\\\";\n-    }\n-\"\n-[(set (attr \"length\")\n-      (cond [(eq_attr \"alternative\" \"0\")\n-             (if_then_else\n-              (gt (minus \n-                   (pc)\n-                   (symbol_ref \"const_pool_offset (XEXP (operands[1], 0))\"))\n-                  (const_int 4087))\n-              (const_int 8)\n-              (const_int 4))\n-             (ior (eq_attr \"alternative\" \"5\")\n-\t\t  (eq_attr \"alternative\" \"6\")) (const_int 16)]\n-            (const_int 4)))\n- (set_attr \"type\" \"load,load,*,*,store1,*,*\")])\n+  \"@\n+   mov%?\\\\t%0, %1\n+   mvn%?\\\\t%0, #%B1\n+   ldr%?\\\\t%0, %1\n+   str%?\\\\t%1, %0\"\n+[(set_attr \"type\" \"*,*,load,store1\")])\n \n (define_split\n   [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n@@ -2086,11 +2172,28 @@\n   DONE;\n \")\n \n+(define_expand \"movaddr\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(match_operand:DI 1 \"address_operand\" \"\"))]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"*movaddr_insn\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(match_operand:DI 1 \"address_operand\" \"p\"))]\n+  \"reload_completed\n+   && (GET_CODE (operands[1]) == LABEL_REF\n+       || (GET_CODE (operands[1]) == CONST\n+\t   && GET_CODE (XEXP (operands[1], 0)) == PLUS\n+\t   && GET_CODE (XEXP (XEXP (operands[1], 0), 0)) == LABEL_REF\n+\t   && GET_CODE (XEXP (XEXP (operands[1], 0), 1)) == CONST_INT))\"\n+  \"adr%?\\\\t%0, %a1\")\n+\n ;; If copying one reg to another we can set the condition codes according to\n ;; its value.  Such a move is common after a return from subroutine and the\n ;; result is being tested against zero.\n \n-(define_insn \"\"\n+(define_insn \"*movsi_compare0\"\n   [(set (reg:CC 24) (compare (match_operand:SI 1 \"s_register_operand\" \"0,r\")\n \t\t\t     (const_int 0)))\n    (set (match_operand:SI 0 \"s_register_operand\" \"=r,r\") (match_dup 1))]\n@@ -2199,6 +2302,15 @@\n }\n \")\n \n+(define_expand \"storehi_single_op\"\n+  [(set (match_operand:HI 0 \"memory_operand\" \"\")\n+\t(match_operand:HI 1 \"general_operand\" \"\"))]\n+  \"arm_arch4\"\n+  \"\n+  if (! s_register_operand (operands[1], HImode))\n+    operands[1] = copy_to_mode_reg (HImode, operands[1]);\n+\")\n+\n (define_expand \"movhi\"\n   [(set (match_operand:HI 0 \"general_operand\" \"\")\n \t(match_operand:HI 1 \"general_operand\" \"\"))]\n@@ -2211,6 +2323,11 @@\n     {\n       if (GET_CODE (operands[0]) == MEM)\n \t{\n+\t  if (arm_arch4)\n+\t    {\n+\t      emit_insn (gen_storehi_single_op (operands[0], operands[1]));\n+\t      DONE;\n+\t    }\n \t  if (GET_CODE (operands[1]) == CONST_INT)\n \t    emit_insn (gen_storeinthi (XEXP (operands[0], 0), operands[1]));\n \t  else\n@@ -2247,16 +2364,19 @@\n \t  emit_insn (gen_movsi (reg, GEN_INT (val)));\n \t  operands[1] = gen_rtx (SUBREG, HImode, reg, 0);\n \t}\n-      else if (TARGET_SHORT_BY_BYTES && GET_CODE (operands[1]) == MEM)\n-        {\n-\t  rtx reg = gen_reg_rtx (SImode);\n-\t  emit_insn (gen_movhi_bytes (reg, operands[1]));\n-\t  operands[1] = gen_lowpart (HImode, reg);\n-\t}\n-      else if (BYTES_BIG_ENDIAN && GET_CODE (operands[1]) == MEM)\n+      else if (! arm_arch4)\n \t{\n-\t  emit_insn (gen_movhi_bigend (operands[0], operands[1]));\n-\t  DONE;\n+\t  if (TARGET_SHORT_BY_BYTES && GET_CODE (operands[1]) == MEM)\n+\t    {\n+\t      rtx reg = gen_reg_rtx (SImode);\n+\t      emit_insn (gen_movhi_bytes (reg, operands[1]));\n+\t      operands[1] = gen_lowpart (HImode, reg);\n+\t    }\n+\t  else if (BYTES_BIG_ENDIAN && GET_CODE (operands[1]) == MEM)\n+\t    {\n+\t      emit_insn (gen_movhi_bigend (operands[0], operands[1]));\n+\t      DONE;\n+\t    }\n \t}\n     }\n }\n@@ -2303,10 +2423,25 @@\n \n ;; Pattern to recognise insn generated default case above\n \n-(define_insn \"\"\n+(define_insn \"*movhi_insn_arch4\"\n+  [(set (match_operand:HI 0 \"general_operand\" \"=r,r,r,m\")\n+\t(match_operand:HI 1 \"general_operand\"  \"rI,K,m,r\"))]\n+  \"arm_arch4\n+   && (GET_CODE (operands[1]) != CONST_INT\n+       || const_ok_for_arm (INTVAL (operands[1]))\n+       || const_ok_for_arm (~INTVAL (operands[1])))\"\n+  \"@\n+   mov%?\\\\t%0, %1\\\\t%@ movhi\n+   mvn%?\\\\t%0, #%B1\\\\t%@ movhi\n+   ldr%?h\\\\t%0, %1\\\\t%@ movhi\n+   str%?h\\\\t%1, %0\\\\t%@ movhi\"\n+[(set_attr \"type\" \"*,*,load,store1\")])\n+\n+(define_insn \"*movhi_insn_littleend\"\n   [(set (match_operand:HI 0 \"general_operand\" \"=r,r,r\")\n \t(match_operand:HI 1 \"general_operand\"  \"rI,K,m\"))]\n-  \"! BYTES_BIG_ENDIAN\n+  \"! arm_arch4\n+   && ! BYTES_BIG_ENDIAN\n    && ! TARGET_SHORT_BY_BYTES\n    && (GET_CODE (operands[1]) != CONST_INT\n        || const_ok_for_arm (INTVAL (operands[1]))\n@@ -2317,10 +2452,11 @@\n    ldr%?\\\\t%0, %1\\\\t%@ movhi\"\n [(set_attr \"type\" \"*,*,load\")])\n \n-(define_insn \"\"\n+(define_insn \"*movhi_insn_bigend\"\n   [(set (match_operand:HI 0 \"s_register_operand\" \"=r,r,r\")\n \t(match_operand:HI 1 \"general_operand\"  \"rI,K,m\"))]\n-  \"BYTES_BIG_ENDIAN\n+  \"! arm_arch4\n+   && BYTES_BIG_ENDIAN\n    && ! TARGET_SHORT_BY_BYTES\n    && (GET_CODE (operands[1]) != CONST_INT\n        || const_ok_for_arm (INTVAL (operands[1]))\n@@ -2332,7 +2468,7 @@\n [(set_attr \"type\" \"*,*,load\")\n  (set_attr \"length\" \"4,4,8\")])\n \n-(define_insn \"\"\n+(define_insn \"*loadhi_si_bigend\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(rotate:SI (subreg:SI (match_operand:HI 1 \"memory_operand\" \"m\") 0)\n \t\t   (const_int 16)))]\n@@ -2341,7 +2477,7 @@\n   \"ldr%?\\\\t%0, %1\\\\t%@ movhi_bigend\"\n [(set_attr \"type\" \"load\")])\n \n-(define_insn \"\"\n+(define_insn \"*movhi_bytes\"\n   [(set (match_operand:HI 0 \"s_register_operand\" \"=r,r\")\n \t(match_operand:HI 1 \"arm_rhs_operand\"  \"rI,K\"))]\n   \"TARGET_SHORT_BY_BYTES\"\n@@ -2392,7 +2528,7 @@\n \")\n \n \n-(define_insn \"\"\n+(define_insn \"*movqi_insn\"\n   [(set (match_operand:QI 0 \"general_operand\" \"=r,r,r,m\")\n \t(match_operand:QI 1 \"general_operand\" \"rI,K,m,r\"))]\n   \"register_operand (operands[0], QImode)\n@@ -2409,37 +2545,13 @@\n \t(match_operand:SF 1 \"general_operand\" \"\"))]\n   \"\"\n   \"\n-  if (GET_CODE (operands[1]) == CONST_DOUBLE\n-      && (TARGET_SOFT_FLOAT\n-\t  || (GET_CODE (operands[0]) == REG\n-\t      && REGNO (operands[0]) < 16)\n-\t  || ! (const_double_rtx_ok_for_fpu (operands[1])\n-\t\t|| neg_const_double_rtx_ok_for_fpu (operands[1]))))\n-    {\n-      extern int optimize;\n-      rtx mem = force_const_mem (SFmode, operands[1]);\n-      rtx addr;\n-\n-      if (reload_in_progress || reload_completed)\n-\taddr = gen_rtx (REG, SImode, REGNO (operands[0]));\n-      else\n-        addr = gen_reg_rtx (SImode);\n-      if (optimize == 0)\n-\t{\n-\t  rtx ptr = force_const_mem (SImode, XEXP (mem, 0));\n-\t  emit_insn (gen_movsi (addr, ptr));\n-\t}\n-      else\n-\temit_insn (gen_movsi (addr, XEXP (mem, 0)));\n-      operands[1] = gen_rtx (MEM, SFmode, addr);\n-    }\n   if (GET_CODE (operands[0]) == MEM)\n     operands[1] = force_reg (SFmode, operands[1]);\n \")\n \n-(define_insn \"\"\n+(define_insn \"*movsf_hard_insn\"\n   [(set (match_operand:SF 0 \"general_operand\" \"=f,f,f,m,f,r,r,r,m\")\n-\t(match_operand:SF 1 \"general_operand\" \"fG,H,m,f,r,f,r,m,r\"))]\n+\t(match_operand:SF 1 \"general_operand\" \"fG,H,mE,f,r,f,r,mE,r\"))]\n   \"TARGET_HARD_FLOAT\n    && (GET_CODE (operands[0]) != MEM || register_operand (operands[1], SFmode))\"\n   \"@\n@@ -2462,7 +2574,7 @@\n \n (define_insn \"*movsf_soft_insn\"\n   [(set (match_operand:SF 0 \"general_operand\" \"=r,r,m\")\n-\t(match_operand:SF 1 \"general_operand\" \"r,m,r\"))]\n+\t(match_operand:SF 1 \"general_operand\" \"r,mE,r\"))]\n   \"TARGET_SOFT_FLOAT\n    && (GET_CODE (operands[0]) != MEM || register_operand (operands[1], SFmode))\"\n   \"@\n@@ -2477,30 +2589,6 @@\n \t(match_operand:DF 1 \"general_operand\" \"\"))]\n   \"\"\n   \"\n-  if (GET_CODE (operands[1]) == CONST_DOUBLE\n-      && (TARGET_SOFT_FLOAT\n-\t  || (GET_CODE (operands[0]) == REG\n-\t      && REGNO (operands[0]) < 16)\n-\t  || ! (const_double_rtx_ok_for_fpu (operands[1])\n-\t\t|| neg_const_double_rtx_ok_for_fpu (operands[1]))))\n-    {\n-      extern int optimize;\n-      rtx mem = force_const_mem (DFmode, operands[1]);\n-      rtx addr;\n-\n-      if (reload_in_progress || reload_completed)\n-\taddr = gen_rtx (REG, SImode, REGNO (operands[0]));\n-      else\n-\taddr = gen_reg_rtx (SImode);\n-      if (optimize == 0)\n-\t{\n-\t  rtx ptr = force_const_mem (SImode, XEXP (mem, 0));\n-\t  emit_insn (gen_movsi (addr, ptr));\n-\t}\n-      else\n-\temit_insn (gen_movsi (addr, XEXP (mem, 0)));\n-      operands[1] = gen_rtx (MEM, DFmode, addr);\n-    }\n   if (GET_CODE (operands[0]) == MEM)\n     operands[1] = force_reg (DFmode, operands[1]);\n \")\n@@ -2513,72 +2601,79 @@\n    (match_operand:SI 2 \"s_register_operand\" \"=&r\")]\n   \"\"\n   \"\n-  if (GET_CODE (XEXP (operands[0], 0)) == REG)\n+{\n+  enum rtx_code code = GET_CODE (XEXP (operands[0], 0));\n+\n+  if (code == REG)\n     operands[2] = XEXP (operands[0], 0);\n+  else if (code == POST_INC || code == PRE_DEC)\n+    {\n+      operands[0] = gen_rtx (SUBREG, DImode, operands[0], 0);\n+      operands[1] = gen_rtx (SUBREG, DImode, operands[1], 0);\n+      emit_insn (gen_movdi (operands[0], operands[1]));\n+      DONE;\n+    }\n+  else if (code == PRE_INC)\n+    {\n+      rtx reg = XEXP (XEXP (operands[0], 0), 0);\n+      emit_insn (gen_addsi3 (reg, reg, GEN_INT (8)));\n+      operands[2] = reg;\n+    }\n+  else if (code == POST_DEC)\n+    operands[2] = XEXP (XEXP (operands[0], 0), 0);\n   else\n     emit_insn (gen_addsi3 (operands[2], XEXP (XEXP (operands[0], 0), 0),\n \t\t\t   XEXP (XEXP (operands[0], 0), 1)));\n+\n   emit_insn (gen_rtx (SET, VOIDmode, gen_rtx (MEM, DFmode, operands[2]),\n \t\t      operands[1]));\n+\n+  if (code == POST_DEC)\n+    emit_insn (gen_addsi3 (operands[2], operands[2], GEN_INT (-8)));\n+\n   DONE;\n+}\n \")\n \n-(define_insn \"\"\n-  [(set (match_operand:DF 0 \"general_operand\" \"=r,Q#m,r,f,f,f,f,m,!f,!r,r\")\n-\t(match_operand:DF 1 \"general_operand\" \n-\t \t\"Q,r,?o,?f,!G,!H,m,f,r,f,??r\"))]\n+(define_insn \"*movdf_hard_insn\"\n+  [(set (match_operand:DF 0 \"general_operand\" \"=r,Q,r,m,r,f,f,f,m,!f,!r\")\n+\t(match_operand:DF 1 \"general_operand\" \"Q,r,r,r,mF,fG,H,mF,f,r,f\"))]\n   \"TARGET_HARD_FLOAT\n-   && (GET_CODE (operands[0]) != MEM || register_operand (operands[1], DFmode))\"\n+   && (GET_CODE (operands[0]) != MEM\n+       || register_operand (operands[1], DFmode))\"\n   \"*\n {\n   rtx ops[3];\n \n   switch (which_alternative)\n     {\n-    case 0:\n-      return \\\"ldm%?ia\\\\t%m1, {%0, %R0}\\\\t%@ double\\\";\n-\n-    case 1:\n-      return \\\"stm%?ia\\\\t%m0, {%1, %R1}\\\\t%@ double\\\";\n-\n-    case 2:\n-      ops[0] = operands[0];\n-      ops[1] = XEXP (XEXP (operands[1], 0), 0);\n-      ops[2] = XEXP (XEXP (operands[1], 0), 1);\n-      if (!INTVAL (ops[2]) || const_ok_for_arm (INTVAL (ops[2])))\n-\toutput_asm_insn (\\\"add%?\\\\t%0, %1, %2\\\", ops);\n-      else\n-\toutput_asm_insn (\\\"sub%?\\\\t%0, %1, #%n2\\\", ops);\n-      return \\\"ldm%?ia\\\\t%0, {%0, %R0}\\\\t%@ double\\\";\n-\n-    case 3:\n-    case 4:\n-      return \\\"mvf%?d\\\\t%0, %1\\\";\n-\n-    case 5: return \\\"mnf%?d\\\\t%0, #%N1\\\";\n-    case 6: return \\\"ldf%?d\\\\t%0, %1\\\";\n-    case 7: return \\\"stf%?d\\\\t%1, %0\\\";\n-    case 8: return output_mov_double_fpu_from_arm (operands);\n-    case 9: return output_mov_double_arm_from_fpu (operands);\n-    case 10: return output_move_double (operands);\n+    case 0: return \\\"ldm%?ia\\\\t%m1, {%0, %R0}\\\\t%@ double\\\";\n+    case 1: return \\\"stm%?ia\\\\t%m0, {%1, %R1}\\\\t%@ double\\\";\n+    case 2: case 3: case 4: return output_move_double (operands);\n+    case 5: return \\\"mvf%?d\\\\t%0, %1\\\";\n+    case 6: return \\\"mnf%?d\\\\t%0, #%N1\\\";\n+    case 7: return \\\"ldf%?d\\\\t%0, %1\\\";\n+    case 8: return \\\"stf%?d\\\\t%1, %0\\\";\n+    case 9: return output_mov_double_fpu_from_arm (operands);\n+    case 10: return output_mov_double_arm_from_fpu (operands);\n     }\n }\n \"\n-[(set_attr \"length\" \"4,4,8,4,4,4,4,4,8,8,8\")\n- (set_attr \"type\" \n-\"load,store2,load,ffarith,ffarith,ffarith,f_load,f_store,r_mem_f,f_mem_r,*\")])\n+[(set_attr \"length\" \"4,4,8,8,8,4,4,4,4,8,8\")\n+ (set_attr \"type\"\n+\"load,store2,*,store2,load,ffarith,ffarith,f_load,f_store,r_mem_f,f_mem_r\")])\n \n ;; Software floating point version.  This is essentially the same as movdi.\n ;; Do not use `f' as a constraint to prevent reload from ever trying to use\n ;; an `f' reg.\n \n (define_insn \"*movdf_soft_insn\"\n-  [(set (match_operand:DF 0 \"soft_df_operand\" \"=r,r,o<>,r\")\n-\t(match_operand:DF 1 \"soft_df_operand\" \"r,o<>,r,F\"))]\n+  [(set (match_operand:DF 0 \"soft_df_operand\" \"=r,r,m\")\n+\t(match_operand:DF 1 \"soft_df_operand\" \"r,mF,r\"))]\n   \"TARGET_SOFT_FLOAT\"\n   \"* return output_move_double (operands);\"\n-[(set_attr \"length\" \"8,8,8,32\")\n- (set_attr \"type\" \"*,load,store2,*\")])\n+[(set_attr \"length\" \"8,8,8\")\n+ (set_attr \"type\" \"*,load,store2\")])\n \n (define_expand \"movxf\"\n   [(set (match_operand:XF 0 \"general_operand\" \"\")\n@@ -2589,7 +2684,7 @@\n ;; Even when the XFmode patterns aren't enabled, we enable this after\n ;; reloading so that we can push floating point registers in the prologue.\n \n-(define_insn \"\"\n+(define_insn \"*movxf_hard_insn\"\n   [(set (match_operand:XF 0 \"general_operand\" \"=f,f,f,m,f,r,r\")\n \t(match_operand:XF 1 \"general_operand\" \"fG,H,m,f,r,f,r\"))]\n   \"TARGET_HARD_FLOAT && (ENABLE_XF_PATTERNS || reload_completed)\"\n@@ -2637,7 +2732,7 @@\n \n ;; Load multiple with write-back\n \n-(define_insn \"\"\n+(define_insn \"*ldmsi_postinc\"\n   [(match_parallel 0 \"load_multiple_operation\"\n                    [(set (match_operand:SI 1 \"s_register_operand\" \"+r\")\n                          (plus:SI (match_dup 1)\n@@ -2662,7 +2757,7 @@\n \n ;; Ordinary load multiple\n \n-(define_insn \"\"\n+(define_insn \"*ldmsi\"\n   [(match_parallel 0 \"load_multiple_operation\"\n                    [(set (match_operand:SI 1 \"s_register_operand\" \"=r\")\n                          (match_operand:SI 2 \"indirect_operand\" \"Q\"))])]\n@@ -2706,7 +2801,7 @@\n \n ;; Store multiple with write-back\n \n-(define_insn \"\"\n+(define_insn \"*stmsi_postinc\"\n   [(match_parallel 0 \"store_multiple_operation\"\n                    [(set (match_operand:SI 1 \"s_register_operand\" \"+r\")\n                          (plus:SI (match_dup 1)\n@@ -2736,7 +2831,7 @@\n \n ;; Ordinary store multiple\n \n-(define_insn \"\"\n+(define_insn \"*stmsi\"\n   [(match_parallel 0 \"store_multiple_operation\"\n                    [(set (match_operand:SI 2 \"indirect_operand\" \"=Q\")\n                          (match_operand:SI 1 \"s_register_operand\" \"r\"))])]\n@@ -2836,7 +2931,7 @@\n }\n \")\n \n-(define_insn \"\"\n+(define_insn \"*cmpsi_insn\"\n   [(set (match_operand 0 \"cc_register\" \"\")\n \t(compare (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n \t\t (match_operand:SI 2 \"arm_add_operand\" \"rI,L\")))]\n@@ -2846,15 +2941,15 @@\n    cmn%?\\\\t%1, #%n2\"\n [(set_attr \"conds\" \"set\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmpsi_negsi\"\n   [(set (match_operand 0 \"cc_register\" \"\")\n \t(compare (match_operand:SI 1 \"s_register_operand\" \"r\")\n \t\t (neg:SI (match_operand:SI 2 \"s_register_operand\" \"r\"))))]\n   \"\"\n   \"cmn%?\\\\t%1, %2\"\n [(set_attr \"conds\" \"set\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmpsi_shiftsi\"\n   [(set (match_operand 0 \"cc_register\" \"\")\n \t(compare (match_operand:SI 1 \"s_register_operand\" \"r\")\n \t\t (match_operator:SI 2 \"shift_operator\"\n@@ -2864,7 +2959,7 @@\n   \"cmp%?\\\\t%1, %3%S2\"\n [(set_attr \"conds\" \"set\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmpsi_neg_shiftsi\"\n   [(set (match_operand 0 \"cc_register\" \"\")\n \t(compare (match_operand:SI 1 \"s_register_operand\" \"r\")\n \t\t (neg:SI (match_operator:SI 2 \"shift_operator\"\n@@ -2874,7 +2969,7 @@\n   \"cmn%?\\\\t%1, %3%S2\"\n [(set_attr \"conds\" \"set\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmpsf_insn\"\n   [(set (reg:CCFP 24)\n \t(compare:CCFP (match_operand:SF 0 \"s_register_operand\" \"f,f\")\n \t\t      (match_operand:SF 1 \"fpu_add_operand\" \"fG,H\")))]\n@@ -2885,7 +2980,7 @@\n [(set_attr \"conds\" \"set\")\n  (set_attr \"type\" \"f_2_r\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmpdf_insn\"\n   [(set (reg:CCFP 24)\n \t(compare:CCFP (match_operand:DF 0 \"s_register_operand\" \"f,f\")\n \t\t      (match_operand:DF 1 \"fpu_add_operand\" \"fG,H\")))]\n@@ -2896,7 +2991,7 @@\n [(set_attr \"conds\" \"set\")\n  (set_attr \"type\" \"f_2_r\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmpesfdf_df\"\n   [(set (reg:CCFP 24)\n \t(compare:CCFP (float_extend:DF\n \t\t       (match_operand:SF 0 \"s_register_operand\" \"f,f\"))\n@@ -2908,7 +3003,7 @@\n [(set_attr \"conds\" \"set\")\n  (set_attr \"type\" \"f_2_r\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmpdf_esfdf\"\n   [(set (reg:CCFP 24)\n \t(compare:CCFP (match_operand:DF 0 \"s_register_operand\" \"f\")\n \t\t      (float_extend:DF\n@@ -2918,7 +3013,7 @@\n [(set_attr \"conds\" \"set\")\n  (set_attr \"type\" \"f_2_r\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmpxf_insn\"\n   [(set (reg:CCFP 24)\n \t(compare:CCFP (match_operand:XF 0 \"s_register_operand\" \"f,f\")\n \t\t      (match_operand:XF 1 \"fpu_add_operand\" \"fG,H\")))]\n@@ -2929,7 +3024,7 @@\n [(set_attr \"conds\" \"set\")\n  (set_attr \"type\" \"f_2_r\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmpsf_trap\"\n   [(set (reg:CCFPE 24)\n \t(compare:CCFPE (match_operand:SF 0 \"s_register_operand\" \"f,f\")\n \t\t       (match_operand:SF 1 \"fpu_add_operand\" \"fG,H\")))]\n@@ -2940,7 +3035,7 @@\n [(set_attr \"conds\" \"set\")\n  (set_attr \"type\" \"f_2_r\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmpdf_trap\"\n   [(set (reg:CCFPE 24)\n \t(compare:CCFPE (match_operand:DF 0 \"s_register_operand\" \"f,f\")\n \t\t       (match_operand:DF 1 \"fpu_add_operand\" \"fG,H\")))]\n@@ -2951,7 +3046,7 @@\n [(set_attr \"conds\" \"set\")\n  (set_attr \"type\" \"f_2_r\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmp_esfdf_df_trap\"\n   [(set (reg:CCFPE 24)\n \t(compare:CCFPE (float_extend:DF\n \t\t\t(match_operand:SF 0 \"s_register_operand\" \"f,f\"))\n@@ -2963,7 +3058,7 @@\n [(set_attr \"conds\" \"set\")\n  (set_attr \"type\" \"f_2_r\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmp_df_esfdf_trap\"\n   [(set (reg:CCFPE 24)\n \t(compare:CCFPE (match_operand:DF 0 \"s_register_operand\" \"f\")\n \t\t       (float_extend:DF\n@@ -2973,7 +3068,7 @@\n [(set_attr \"conds\" \"set\")\n  (set_attr \"type\" \"f_2_r\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmpxf_trap\"\n   [(set (reg:CCFPE 24)\n \t(compare:CCFPE (match_operand:XF 0 \"s_register_operand\" \"f,f\")\n \t\t       (match_operand:XF 1 \"fpu_add_operand\" \"fG,H\")))]\n@@ -2990,7 +3085,7 @@\n ; mode changes of the condition codes aren't lost by this even though we don't\n ; specify what they are.\n \n-(define_insn \"\"\n+(define_insn \"*delted_compare\"\n   [(set (match_operand 0 \"cc_register\" \"\") (match_dup 0))]\n   \"\"\n   \"\\\\t%@ deleted compare\"\n@@ -3132,7 +3227,7 @@\n \n ;; patterns to match conditional branch insns\n \n-(define_insn \"\"\n+(define_insn \"*condbranch\"\n   [(set (pc)\n \t(if_then_else (match_operator 1 \"comparison_operator\"\n \t\t\t\t\t[(reg 24) (const_int 0)])\n@@ -3152,7 +3247,7 @@\n }\"\n [(set_attr \"conds\" \"use\")])\n \n-(define_insn \"\"\n+(define_insn \"*condbranch_reversed\"\n   [(set (pc)\n \t(if_then_else (match_operator 1 \"comparison_operator\"\n \t\t\t\t\t[(reg 24) (const_int 0)])\n@@ -3285,15 +3380,15 @@\n }\n \")\n \n-(define_insn \"\"\n+(define_insn \"*mov_scc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(match_operator:SI 1 \"comparison_operator\" [(reg 24) (const_int 0)]))]\n   \"\"\n   \"mov%D1\\\\t%0, #0\\;mov%d1\\\\t%0, #1\"\n [(set_attr \"conds\" \"use\")\n  (set_attr \"length\" \"8\")])\n \n-(define_insn \"\"\n+(define_insn \"*mov_negscc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(neg:SI (match_operator:SI 1 \"comparison_operator\"\n \t\t [(reg 24) (const_int 0)])))]\n@@ -3302,7 +3397,7 @@\n [(set_attr \"conds\" \"use\")\n  (set_attr \"length\" \"8\")])\n \n-(define_insn \"\"\n+(define_insn \"*mov_notscc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(not:SI (match_operator:SI 1 \"comparison_operator\"\n \t\t [(reg 24) (const_int 0)])))]\n@@ -3430,35 +3525,27 @@\n   \"\"\n   \"\")\n \n-(define_insn \"\"\n+(define_insn \"*call_reg\"\n   [(call (mem:SI (match_operand:SI 0 \"s_register_operand\" \"r\"))\n          (match_operand 1 \"\" \"g\"))\n    (clobber (reg:SI 14))]\n   \"\"\n   \"*\n   return output_call (operands);\n \"\n-[(set (attr \"conds\")\n-      (if_then_else (eq_attr \"cpu\" \"arm6\")\n-\t\t    (const_string \"clob\")\n-\t\t    (const_string \"nocond\")))\n ;; length is worst case, normally it is only two\n- (set_attr \"length\" \"12\")\n+[(set_attr \"length\" \"12\")\n  (set_attr \"type\" \"call\")])\n \n-(define_insn \"\"\n+(define_insn \"*call_mem\"\n   [(call (mem:SI (match_operand 0 \"memory_operand\" \"m\"))\n \t (match_operand 1 \"general_operand\" \"g\"))\n    (clobber (reg:SI 14))]\n   \"\"\n   \"*\n   return output_call_mem (operands);\n \"\n-[(set (attr \"conds\")\n-      (if_then_else (eq_attr \"cpu\" \"arm6\")\n-\t\t    (const_string \"clob\")\n-\t\t    (const_string \"nocond\")))\n- (set_attr \"length\" \"12\")\n+[(set_attr \"length\" \"12\")\n  (set_attr \"type\" \"call\")])\n \n (define_expand \"call_value\"\n@@ -3469,7 +3556,7 @@\n   \"\"\n   \"\")\n \n-(define_insn \"\"\n+(define_insn \"*call_value_reg\"\n   [(set (match_operand 0 \"\" \"=rf\")\n         (call (mem:SI (match_operand:SI 1 \"s_register_operand\" \"r\"))\n \t      (match_operand 2 \"general_operand\" \"g\")))\n@@ -3478,14 +3565,10 @@\n   \"*\n   return output_call (&operands[1]);\n \"\n-[(set (attr \"conds\")\n-      (if_then_else (eq_attr \"cpu\" \"arm6\")\n-\t\t    (const_string \"clob\")\n-\t\t    (const_string \"nocond\")))\n- (set_attr \"length\" \"12\")\n+[(set_attr \"length\" \"12\")\n  (set_attr \"type\" \"call\")])\n \n-(define_insn \"\"\n+(define_insn \"*call_value_mem\"\n   [(set (match_operand 0 \"\" \"=rf\")\n \t(call (mem:SI (match_operand 1 \"memory_operand\" \"m\"))\n \t(match_operand 2 \"general_operand\" \"g\")))\n@@ -3494,40 +3577,28 @@\n   \"*\n   return output_call_mem (&operands[1]);\n \"\n-[(set (attr \"conds\")\n-      (if_then_else (eq_attr \"cpu\" \"arm6\")\n-\t\t    (const_string \"clob\")\n-\t\t    (const_string \"nocond\")))\n- (set_attr \"length\" \"12\")\n+[(set_attr \"length\" \"12\")\n  (set_attr \"type\" \"call\")])\n \n ;; Allow calls to SYMBOL_REFs specially as they are not valid general addresses\n ;; The 'a' causes the operand to be treated as an address, i.e. no '#' output.\n \n-(define_insn \"\"\n-  [(call (mem:SI (match_operand:SI 0 \"\" \"i\"))\n+(define_insn \"*call_symbol\"\n+  [(call (mem:SI (match_operand:SI 0 \"\" \"X\"))\n \t (match_operand:SI 1 \"general_operand\" \"g\"))\n    (clobber (reg:SI 14))]\n   \"GET_CODE (operands[0]) == SYMBOL_REF\"\n   \"bl%?\\\\t%a0\"\n-[(set (attr \"conds\")\n-      (if_then_else (eq_attr \"cpu\" \"arm6\")\n-\t\t    (const_string \"clob\")\n-\t\t    (const_string \"nocond\")))\n- (set_attr \"type\" \"call\")])\n+[(set_attr \"type\" \"call\")])\n \n-(define_insn \"\"\n+(define_insn \"*call_value_symbol\"\n   [(set (match_operand 0 \"s_register_operand\" \"=rf\")\n-\t(call (mem:SI (match_operand:SI 1 \"\" \"i\"))\n+\t(call (mem:SI (match_operand:SI 1 \"\" \"X\"))\n \t(match_operand:SI 2 \"general_operand\" \"g\")))\n    (clobber (reg:SI 14))]\n   \"GET_CODE(operands[1]) == SYMBOL_REF\"\n   \"bl%?\\\\t%a1\"\n-[(set (attr \"conds\")\n-      (if_then_else (eq_attr \"cpu\" \"arm6\")\n-\t\t    (const_string \"clob\")\n-\t\t    (const_string \"nocond\")))\n- (set_attr \"type\" \"call\")])\n+[(set_attr \"type\" \"call\")])\n \n ;; Often the return insn will be the same as loading from memory, so set attr\n (define_insn \"return\"\n@@ -3546,7 +3617,7 @@\n }\"\n [(set_attr \"type\" \"load\")])\n \n-(define_insn \"\"\n+(define_insn \"*cond_return\"\n   [(set (pc)\n         (if_then_else (match_operator 0 \"comparison_operator\"\n \t\t       [(reg 24) (const_int 0)])\n@@ -3567,7 +3638,7 @@\n [(set_attr \"conds\" \"use\")\n  (set_attr \"type\" \"load\")])\n \n-(define_insn \"\"\n+(define_insn \"*cond_return_inverted\"\n   [(set (pc)\n         (if_then_else (match_operator 0 \"comparison_operator\"\n \t\t       [(reg 24) (const_int 0)])\n@@ -3631,28 +3702,56 @@\n [(set_attr \"length\" \"0\")\n  (set_attr \"type\" \"block\")])\n \n-(define_insn \"tablejump\"\n-  [(set (pc)\n-\t(match_operand:SI 0 \"s_register_operand\" \"r\"))\n-   (use (label_ref (match_operand 1 \"\" \"\")))]\n+(define_expand \"casesi\"\n+  [(match_operand:SI 0 \"s_register_operand\" \"\")\t; index to jump on\n+   (match_operand:SI 1 \"immediate_operand\" \"\")\t; lower bound\n+   (match_operand:SI 2 \"immediate_operand\" \"\")\t; total range\n+   (match_operand:SI 3 \"\" \"\")\t\t\t; table label\n+   (match_operand:SI 4 \"\" \"\")]\t\t\t; Out of range label\n   \"\"\n-  \"mov%?\\\\t%|pc, %0\\\\t%@ table jump, label %l1\")\n+  \"\n+{\n+  rtx reg;\n+  if (operands[1] != const0_rtx)\n+    {\n+      reg = gen_reg_rtx (SImode);\n+      emit_insn (gen_addsi3 (reg, operands[0],\n+\t\t\t     GEN_INT (-INTVAL (operands[1]))));\n+      operands[0] = reg;\n+    }\n+\n+  if (! const_ok_for_arm (INTVAL (operands[2])))\n+    operands[2] = force_reg (SImode, operands[2]);\n \n-(define_insn \"\"\n+  emit_jump_insn (gen_casesi_internal (operands[0], operands[2], operands[3],\n+\t\t\t\t       operands[4]));\n+  DONE;\n+}\")\n+\n+(define_insn \"casesi_internal\"\n   [(set (pc)\n-\t(match_operand:SI 0 \"memory_operand\" \"m\"))\n-   (use (label_ref (match_operand 1 \"\" \"\")))]\n+\t(if_then_else\n+\t (leu (match_operand:SI 0 \"s_register_operand\" \"r\")\n+\t      (match_operand:SI 1 \"arm_rhs_operand\" \"rI\"))\n+\t (mem:SI (plus:SI (mult:SI (match_dup 0) (const_int 4))\n+\t\t\t  (label_ref (match_operand 2 \"\" \"\"))))\n+\t (label_ref (match_operand 3 \"\" \"\"))))]\n   \"\"\n-  \"ldr%?\\\\t%|pc, %0\\\\t%@ table jump, label %l1\"\n-[(set_attr \"type\" \"load\")])\n+  \"*\n+  if (flag_pic)\n+    return \\\"cmp\\\\t%0, %1\\;addls\\\\t%|pc, %|pc, %0, asl #2\\;b\\\\t%l3\\\";\n+  return \\\"cmp\\\\t%0, %1\\;ldrls\\\\t%|pc, [%|pc, %0, asl #2]\\;b\\\\t%l3\\\";\n+\"\n+[(set_attr \"conds\" \"clob\")\n+ (set_attr \"length\" \"12\")])\n \n (define_insn \"indirect_jump\"\n   [(set (pc)\n \t(match_operand:SI 0 \"s_register_operand\" \"r\"))]\n   \"\"\n   \"mov%?\\\\t%|pc, %0\\\\t%@ indirect jump\")\n \n-(define_insn \"\"\n+(define_insn \"*load_indirect_jump\"\n   [(set (pc)\n \t(match_operand:SI 0 \"memory_operand\" \"m\"))]\n   \"\"\n@@ -3668,7 +3767,7 @@\n \f\n ;; Patterns to allow combination of arithmetic, cond code and shifts\n \n-(define_insn \"\"\n+(define_insn \"*arith_shiftsi\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n         (match_operator:SI 1 \"shiftable_operator\"\n           [(match_operator:SI 3 \"shift_operator\"\n@@ -3678,7 +3777,7 @@\n   \"\"\n   \"%i1%?\\\\t%0, %2, %4%S3\")\n \n-(define_insn \"\"\n+(define_insn \"*arith_shiftsi_compare0\"\n   [(set (reg:CC_NOOV 24)\n         (compare:CC_NOOV (match_operator:SI 1 \"shiftable_operator\"\n \t\t          [(match_operator:SI 3 \"shift_operator\"\n@@ -3693,7 +3792,7 @@\n   \"%i1%?s\\\\t%0, %2, %4%S3\"\n [(set_attr \"conds\" \"set\")])\n \n-(define_insn \"\"\n+(define_insn \"*arith_shiftsi_compare0_scratch\"\n   [(set (reg:CC_NOOV 24)\n         (compare:CC_NOOV (match_operator:SI 1 \"shiftable_operator\"\n \t\t          [(match_operator:SI 3 \"shift_operator\"\n@@ -3706,7 +3805,7 @@\n   \"%i1%?s\\\\t%0, %2, %4%S3\"\n [(set_attr \"conds\" \"set\")])\n \n-(define_insn \"\"\n+(define_insn \"*sub_shiftsi\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(minus:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n \t\t  (match_operator:SI 2 \"shift_operator\"\n@@ -3715,7 +3814,7 @@\n   \"\"\n   \"sub%?\\\\t%0, %1, %3%S2\")\n \n-(define_insn \"\"\n+(define_insn \"*sub_shiftsi_compare0\"\n   [(set (reg:CC_NOOV 24)\n \t(compare:CC_NOOV\n \t (minus:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n@@ -3730,7 +3829,7 @@\n   \"sub%?s\\\\t%0, %1, %3%S2\"\n [(set_attr \"conds\" \"set\")])\n \n-(define_insn \"\"\n+(define_insn \"*sub_shiftsi_compare0_scratch\"\n   [(set (reg:CC_NOOV 24)\n \t(compare:CC_NOOV\n \t (minus:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n@@ -3751,7 +3850,7 @@\n ;; how to reload pseudos that haven't got hard registers; the constraints will\n ;; sort everything out.\n \n-(define_insn \"\"\n+(define_insn \"*reload_mulsi3\"\n   [(set (match_operand:SI 0 \"\" \"=&r\")\n \t(plus:SI (plus:SI (match_operator:SI 5 \"shift_operator\"\n \t\t\t   [(match_operand:SI 3 \"\" \"r\")\n@@ -3768,7 +3867,7 @@\n ; we have no idea how long the add_immediate is, it could be up to 4.\n [(set_attr \"length\" \"20\")])\n \n-(define_insn \"\"\n+(define_insn \"*relaod_mulsi_compare0\"\n   [(set (reg:CC_NOOV 24)\n \t(compare:CC_NOOV (plus:SI\n \t\t\t  (plus:SI \n@@ -3790,7 +3889,7 @@\n [(set_attr \"conds\" \"set\")\n  (set_attr \"length\" \"20\")])\n \n-(define_insn \"\"\n+(define_insn \"*reload_mulsi_compare0_scratch\"\n   [(set (reg:CC_NOOV 24)\n \t(compare:CC_NOOV (plus:SI\n \t\t\t  (plus:SI \n@@ -3812,7 +3911,7 @@\n ;; These are similar, but are needed when the mla pattern contains the\n ;; eliminated register as operand 3.\n \n-(define_insn \"\"\n+(define_insn \"*reload_muladdsi\"\n   [(set (match_operand:SI 0 \"\" \"=&r,&r\")\n \t(plus:SI (plus:SI (mult:SI (match_operand:SI 1 \"\" \"%0,r\")\n \t\t\t\t   (match_operand:SI 2 \"\" \"r,r\"))\n@@ -3825,9 +3924,10 @@\n   operands[1] = operands[0];\n   return output_add_immediate (operands);\n \"\n-[(set_attr \"length\" \"20\")])\n+[(set_attr \"length\" \"20\")\n+ (set_attr \"type\" \"mult\")])\n \n-(define_insn \"\"\n+(define_insn \"*reload_muladdsi_compare0\"\n   [(set (reg:CC_NOOV 24)\n \t(compare:CC_NOOV (plus:SI (plus:SI (mult:SI\n \t\t\t\t\t    (match_operand:SI 3 \"\" \"r\")\n@@ -3845,9 +3945,10 @@\n   return \\\"\\\";\n \"\n [(set_attr \"length\" \"20\")\n- (set_attr \"conds\" \"set\")])\n+ (set_attr \"conds\" \"set\")\n+ (set_attr \"type\" \"mult\")])\n \n-(define_insn \"\"\n+(define_insn \"*reload_muladdsi_compare0_scratch\"\n   [(set (reg:CC_NOOV 24)\n \t(compare:CC_NOOV (plus:SI (plus:SI (mult:SI\n \t\t\t\t\t    (match_operand:SI 3 \"\" \"r\")\n@@ -3862,12 +3963,12 @@\n   return \\\"mla%?s\\\\t%0, %3, %4, %0\\\";\n \"\n [(set_attr \"length\" \"20\")\n- (set_attr \"conds\" \"set\")])\n-\n+ (set_attr \"conds\" \"set\")\n+ (set_attr \"type\" \"mult\")])\n \n \f\n \n-(define_insn \"\"\n+(define_insn \"*and_scc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(and:SI (match_operator 1 \"comparison_operator\"\n \t\t [(match_operand 3 \"reversible_cc_register\" \"\") (const_int 0)])\n@@ -3877,7 +3978,7 @@\n [(set_attr \"conds\" \"use\")\n  (set_attr \"length\" \"8\")])\n \n-(define_insn \"\"\n+(define_insn \"*ior_scc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(ior:SI (match_operator 2 \"comparison_operator\"\n \t\t [(reg 24) (const_int 0)])\n@@ -3889,7 +3990,7 @@\n [(set_attr \"conds\" \"use\")\n  (set_attr \"length\" \"4,8\")])\n \n-(define_insn \"\"\n+(define_insn \"*compare_scc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(match_operator 1 \"comparison_operator\"\n \t [(match_operand:SI 2 \"s_register_operand\" \"r,r\")\n@@ -3918,7 +4019,7 @@\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"12\")])\n \n-(define_insn \"\"\n+(define_insn \"*ior_compare_compare\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=&r\")\n \t(ior:SI (match_operator 1 \"comparison_operator\"\n \t\t [(match_operand:SI 2 \"s_register_operand\" \"r\")\n@@ -3997,7 +4098,7 @@\n ;; tell the final prescan branch eliminator code that full branch inlining\n ;; can't be done.\n \n-(define_insn \"\"\n+(define_insn \"*impossible_cond_compare\"\n   [(set (pc)\n \t(if_then_else\n \t (ne (ior:SI (match_operator 5 \"comparison_operator\"\n@@ -4037,7 +4138,7 @@\n [(set_attr \"conds\" \"jump_clob\")\n  (set_attr \"length\" \"16\")])\n \n-(define_insn \"\"\n+(define_insn \"*condition_compare_ior\"\n   [(set (reg:CC 24)\n \t(compare:CC\n \t (ior:CC (match_operator 4 \"comparison_operator\"\n@@ -4075,7 +4176,7 @@\n [(set_attr \"conds\" \"set\")\n  (set_attr \"length\" \"8\")])\n \n-(define_insn \"\"\n+(define_insn \"*cond_move\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n \t(if_then_else (match_operator 3 \"equality_operator\"\n \t\t       [(match_operator 4 \"comparison_operator\"\n@@ -4102,7 +4203,7 @@\n [(set_attr \"conds\" \"use\")\n  (set_attr \"length\" \"4,4,8\")])\n \n-(define_insn \"\"\n+(define_insn \"*cond_arith\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n         (match_operator:SI 5 \"shiftable_operator\" \n \t [(match_operator:SI 4 \"comparison_operator\"\n@@ -4127,7 +4228,7 @@\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"12\")])\n \n-(define_insn \"\"\n+(define_insn \"*cond_sub\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n         (minus:SI (match_operand:SI 1 \"s_register_operand\" \"0,?r\")\n \t\t  (match_operator:SI 4 \"comparison_operator\"\n@@ -4144,7 +4245,7 @@\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8,12\")])\n \n-(define_insn \"\"\n+(define_insn \"*and_scc_scc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=&r\")\n \t(and:SI (match_operator 1 \"comparison_operator\"\n \t\t [(match_operand:SI 2 \"s_register_operand\" \"r\")\n@@ -4236,7 +4337,7 @@\n ;; tell the final prescan branch eliminator code that full branch inlining\n ;; can't be done.\n \n-(define_insn \"\"\n+(define_insn \"*impossible_cond_branch_and\"\n   [(set (pc)\n \t(if_then_else\n \t (eq (and:SI (match_operator 1 \"comparison_operator\"\n@@ -4278,7 +4379,7 @@\n [(set_attr \"conds\" \"jump_clob\")\n  (set_attr \"length\" \"16\")])\n \n-(define_insn \"\"\n+(define_insn \"*negscc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(neg:SI (match_operator 3 \"comparison_operator\"\n \t\t [(match_operand:SI 1 \"s_register_operand\" \"r\")\n@@ -4364,7 +4465,7 @@\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8,8,12\")])\n \n-(define_insn \"\"\n+(define_insn \"*ifcompare_arith_arith\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(if_then_else:SI (match_operator 9 \"comparison_operator\"\n \t\t\t  [(match_operand:SI 5 \"s_register_operand\" \"r,r\")\n@@ -4383,7 +4484,7 @@\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"12\")])\n \n-(define_insn \"\"\n+(define_insn \"*ifcompare_arith_move\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(if_then_else:SI (match_operator 6 \"comparison_operator\"\n \t\t\t  [(match_operand:SI 2 \"s_register_operand\" \"r,r\")\n@@ -4428,7 +4529,7 @@\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8,12\")])\n \n-(define_insn \"\"\n+(define_insn \"*ifcompare_move_arith\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(if_then_else:SI (match_operator 6 \"comparison_operator\"\n \t\t\t  [(match_operand:SI 4 \"s_register_operand\" \"r,r\")\n@@ -4474,7 +4575,7 @@\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8,12\")])\n \n-(define_insn \"\"\n+(define_insn \"*ifcompare_plus_move\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(if_then_else:SI (match_operator 6 \"comparison_operator\"\n \t\t\t  [(match_operand:SI 4 \"s_register_operand\" \"r,r\")\n@@ -4510,7 +4611,7 @@\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8,12\")])\n \n-(define_insn \"\"\n+(define_insn \"*ifcompare_move_plus\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(if_then_else:SI (match_operator 6 \"comparison_operator\"\n \t\t\t  [(match_operand:SI 4 \"s_register_operand\" \"r,r\")\n@@ -4546,7 +4647,7 @@\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8,12\")])\n \n-(define_insn \"\"\n+(define_insn \"ifcompare_move_not\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(if_then_else:SI (match_operator 5 \"comparison_operator\"\n \t\t\t  [(match_operand:SI 3 \"s_register_operand\" \"r,r\")\n@@ -4560,7 +4661,7 @@\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8,12\")])\n \n-(define_insn \"\"\n+(define_insn \"*ifcompare_not_move\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r,r\")\n \t(if_then_else:SI \n \t (match_operator 5 \"comparison_operator\"\n@@ -4579,7 +4680,7 @@\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8,8,12,12\")])\n \n-(define_insn \"\"\n+(define_insn \"*ifcompare_shift_move\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r,r\")\n \t(if_then_else:SI\n \t (match_operator 6 \"comparison_operator\"\n@@ -4599,7 +4700,7 @@\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8,8,12,12\")])\n \n-(define_insn \"\"\n+(define_insn \"ifcompare_move_shift\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r,r\")\n \t(if_then_else:SI\n \t (match_operator 6 \"comparison_operator\"\n@@ -4619,7 +4720,7 @@\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8,8,12,12\")])\n \n-(define_insn \"\"\n+(define_insn \"*ifcompare_shift_shift\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(if_then_else:SI\n \t (match_operator 7 \"comparison_operator\"\n@@ -4639,7 +4740,7 @@\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"12\")])\n \n-(define_insn \"\"\n+(define_insn \"*ifcompare_not_arith\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(if_then_else:SI\n \t (match_operator 6 \"comparison_operator\"\n@@ -4657,7 +4758,7 @@\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"12\")])\n \n-(define_insn \"\"\n+(define_insn \"*if_compare_arith_not\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(if_then_else:SI\n \t (match_operator 6 \"comparison_operator\"\n@@ -4675,7 +4776,7 @@\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"12\")])\n \n-(define_insn \"\"\n+(define_insn \"*ifcompare_neg_move\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r,r\")\n \t(if_then_else:SI\n \t (match_operator 5 \"comparison_operator\"\n@@ -4693,7 +4794,7 @@\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8,8,12,12\")])\n \n-(define_insn \"\"\n+(define_insn \"*ifcompare_move_neg\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r,r\")\n \t(if_then_else:SI\n \t (match_operator 5 \"comparison_operator\"\n@@ -4711,7 +4812,7 @@\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8,8,12,12\")])\n \n-(define_insn \"\"\n+(define_insn \"*arith_adjacentmem\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(match_operator:SI 1 \"shiftable_operator\"\n \t [(match_operand:SI 2 \"memory_operand\" \"m\")\n@@ -4795,7 +4896,7 @@\n ;; We reject the frame pointer if it occurs anywhere in these patterns since\n ;; elimination will cause too many headaches.\n \n-(define_insn \"\"\n+(define_insn \"*strqi_preinc\"\n   [(set (mem:QI (plus:SI (match_operand:SI 1 \"s_register_operand\" \"%0\")\n \t\t\t (match_operand:SI 2 \"index_operand\" \"rJ\")))\n \t(match_operand:QI 3 \"s_register_operand\" \"r\"))\n@@ -4808,7 +4909,7 @@\n   \"str%?b\\\\t%3, [%0, %2]!\"\n [(set_attr \"type\" \"store1\")])\n \n-(define_insn \"\"\n+(define_insn \"*strqi_predec\"\n   [(set (mem:QI (minus:SI (match_operand:SI 1 \"s_register_operand\" \"0\")\n \t\t\t  (match_operand:SI 2 \"s_register_operand\" \"r\")))\n \t(match_operand:QI 3 \"s_register_operand\" \"r\"))\n@@ -4821,7 +4922,7 @@\n   \"str%?b\\\\t%3, [%0, -%2]!\"\n [(set_attr \"type\" \"store1\")])\n \n-(define_insn \"\"\n+(define_insn \"*loadqi_preinc\"\n   [(set (match_operand:QI 3 \"s_register_operand\" \"=r\")\n \t(mem:QI (plus:SI (match_operand:SI 1 \"s_register_operand\" \"%0\")\n \t\t\t (match_operand:SI 2 \"index_operand\" \"rJ\"))))\n@@ -4834,7 +4935,7 @@\n   \"ldr%?b\\\\t%3, [%0, %2]!\"\n [(set_attr \"type\" \"load\")])\n \n-(define_insn \"\"\n+(define_insn \"*loadqi_predec\"\n   [(set (match_operand:QI 3 \"s_register_operand\" \"=r\")\n \t(mem:QI (minus:SI (match_operand:SI 1 \"s_register_operand\" \"0\")\n \t\t\t  (match_operand:SI 2 \"s_register_operand\" \"r\"))))\n@@ -4847,7 +4948,7 @@\n   \"ldr%?b\\\\t%3, [%0, -%2]!\"\n [(set_attr \"type\" \"load\")])\n \n-(define_insn \"\"\n+(define_insn \"*loadqisi_preinc\"\n   [(set (match_operand:SI 3 \"s_register_operand\" \"=r\")\n \t(zero_extend:SI\n \t (mem:QI (plus:SI (match_operand:SI 1 \"s_register_operand\" \"%0\")\n@@ -4861,7 +4962,7 @@\n   \"ldr%?b\\\\t%3, [%0, %2]!\\\\t%@ z_extendqisi\"\n [(set_attr \"type\" \"load\")])\n \n-(define_insn \"\"\n+(define_insn \"*loadqisi_predec\"\n   [(set (match_operand:SI 3 \"s_register_operand\" \"=r\")\n \t(zero_extend:SI\n \t (mem:QI (minus:SI (match_operand:SI 1 \"s_register_operand\" \"0\")\n@@ -4875,7 +4976,7 @@\n   \"ldr%?b\\\\t%3, [%0, -%2]!\\\\t%@ z_extendqisi\"\n [(set_attr \"type\" \"load\")])\n \n-(define_insn \"\"\n+(define_insn \"*strsi_preinc\"\n   [(set (mem:SI (plus:SI (match_operand:SI 1 \"s_register_operand\" \"%0\")\n \t\t\t (match_operand:SI 2 \"index_operand\" \"rJ\")))\n \t(match_operand:SI 3 \"s_register_operand\" \"r\"))\n@@ -4888,7 +4989,7 @@\n   \"str%?\\\\t%3, [%0, %2]!\"\n [(set_attr \"type\" \"store1\")])\n \n-(define_insn \"\"\n+(define_insn \"*strqi_predec\"\n   [(set (mem:SI (minus:SI (match_operand:SI 1 \"s_register_operand\" \"0\")\n \t\t\t  (match_operand:SI 2 \"s_register_operand\" \"r\")))\n \t(match_operand:SI 3 \"s_register_operand\" \"r\"))\n@@ -4901,7 +5002,7 @@\n   \"str%?\\\\t%3, [%0, -%2]!\"\n [(set_attr \"type\" \"store1\")])\n \n-(define_insn \"\"\n+(define_insn \"*loadsi_preinc\"\n   [(set (match_operand:SI 3 \"s_register_operand\" \"=r\")\n \t(mem:SI (plus:SI (match_operand:SI 1 \"s_register_operand\" \"%0\")\n \t\t\t (match_operand:SI 2 \"index_operand\" \"rJ\"))))\n@@ -4914,7 +5015,7 @@\n   \"ldr%?\\\\t%3, [%0, %2]!\"\n [(set_attr \"type\" \"load\")])\n \n-(define_insn \"\"\n+(define_insn \"*loadsi_predec\"\n   [(set (match_operand:SI 3 \"s_register_operand\" \"=r\")\n \t(mem:SI (minus:SI (match_operand:SI 1 \"s_register_operand\" \"0\")\n \t\t\t  (match_operand:SI 2 \"s_register_operand\" \"r\"))))\n@@ -4927,7 +5028,7 @@\n   \"ldr%?\\\\t%3, [%0, -%2]!\"\n [(set_attr \"type\" \"load\")])\n \n-(define_insn \"\"\n+(define_insn \"*loadhi_preinc\"\n   [(set (match_operand:HI 3 \"s_register_operand\" \"=r\")\n \t(mem:HI (plus:SI (match_operand:SI 1 \"s_register_operand\" \"%0\")\n \t\t\t (match_operand:SI 2 \"index_operand\" \"rJ\"))))\n@@ -4942,7 +5043,7 @@\n   \"ldr%?\\\\t%3, [%0, %2]!\\\\t%@ loadhi\"\n [(set_attr \"type\" \"load\")])\n \n-(define_insn \"\"\n+(define_insn \"*loadhi_predec\"\n   [(set (match_operand:HI 3 \"s_register_operand\" \"=r\")\n \t(mem:HI (minus:SI (match_operand:SI 1 \"s_register_operand\" \"0\")\n \t\t\t  (match_operand:SI 2 \"s_register_operand\" \"r\"))))\n@@ -4957,7 +5058,7 @@\n   \"ldr%?\\\\t%3, [%0, -%2]!\\\\t%@ loadhi\"\n [(set_attr \"type\" \"load\")])\n \n-(define_insn \"\"\n+(define_insn \"*strqi_shiftpreinc\"\n   [(set (mem:QI (plus:SI (match_operator:SI 2 \"shift_operator\"\n \t\t\t  [(match_operand:SI 3 \"s_register_operand\" \"r\")\n \t\t\t   (match_operand:SI 4 \"const_shift_operand\" \"n\")])\n@@ -4972,7 +5073,7 @@\n   \"str%?b\\\\t%5, [%0, %3%S2]!\"\n [(set_attr \"type\" \"store1\")])\n \n-(define_insn \"\"\n+(define_insn \"*strqi_shiftpredec\"\n   [(set (mem:QI (minus:SI (match_operand:SI 1 \"s_register_operand\" \"0\")\n \t\t\t  (match_operator:SI 2 \"shift_operator\"\n \t\t\t   [(match_operand:SI 3 \"s_register_operand\" \"r\")\n@@ -4987,7 +5088,7 @@\n   \"str%?b\\\\t%5, [%0, -%3%S2]!\"\n [(set_attr \"type\" \"store1\")])\n \n-(define_insn \"\"\n+(define_insn \"*loadqi_shiftpreinc\"\n   [(set (match_operand:QI 5 \"s_register_operand\" \"=r\")\n \t(mem:QI (plus:SI (match_operator:SI 2 \"shift_operator\"\n \t\t\t  [(match_operand:SI 3 \"s_register_operand\" \"r\")\n@@ -5002,7 +5103,7 @@\n   \"ldr%?b\\\\t%5, [%0, %3%S2]!\"\n [(set_attr \"type\" \"load\")])\n \n-(define_insn \"\"\n+(define_insn \"*loadqi_shiftpredec\"\n   [(set (match_operand:QI 5 \"s_register_operand\" \"=r\")\n \t(mem:QI (minus:SI (match_operand:SI 1 \"s_register_operand\" \"0\")\n \t\t\t  (match_operator:SI 2 \"shift_operator\"\n@@ -5017,7 +5118,7 @@\n   \"ldr%?b\\\\t%5, [%0, -%3%S2]!\"\n [(set_attr \"type\" \"load\")])\n \n-(define_insn \"\"\n+(define_insn \"*strsi_shiftpreinc\"\n   [(set (mem:SI (plus:SI (match_operator:SI 2 \"shift_operator\"\n \t\t\t  [(match_operand:SI 3 \"s_register_operand\" \"r\")\n \t\t\t   (match_operand:SI 4 \"const_shift_operand\" \"n\")])\n@@ -5032,7 +5133,7 @@\n   \"str%?\\\\t%5, [%0, %3%S2]!\"\n [(set_attr \"type\" \"store1\")])\n \n-(define_insn \"\"\n+(define_insn \"*strsi_shiftpredec\"\n   [(set (mem:SI (minus:SI (match_operand:SI 1 \"s_register_operand\" \"0\")\n \t\t\t  (match_operator:SI 2 \"shift_operator\"\n \t\t\t   [(match_operand:SI 3 \"s_register_operand\" \"r\")\n@@ -5047,7 +5148,7 @@\n   \"str%?\\\\t%5, [%0, -%3%S2]!\"\n [(set_attr \"type\" \"store1\")])\n \n-(define_insn \"\"\n+(define_insn \"*loadqi_shiftpreinc\"\n   [(set (match_operand:SI 5 \"s_register_operand\" \"=r\")\n \t(mem:SI (plus:SI (match_operator:SI 2 \"shift_operator\"\n \t\t\t  [(match_operand:SI 3 \"s_register_operand\" \"r\")\n@@ -5062,7 +5163,7 @@\n   \"ldr%?\\\\t%5, [%0, %3%S2]!\"\n [(set_attr \"type\" \"load\")])\n \n-(define_insn \"\"\n+(define_insn \"*loadqi_shiftpredec\"\n   [(set (match_operand:SI 5 \"s_register_operand\" \"=r\")\n \t(mem:SI (minus:SI (match_operand:SI 1 \"s_register_operand\" \"0\")\n \t\t\t  (match_operator:SI 2 \"shift_operator\"\n@@ -5077,7 +5178,7 @@\n   \"ldr%?\\\\t%5, [%0, -%3%S2]!\"\n [(set_attr \"type\" \"load\")])\n \n-(define_insn \"\"\n+(define_insn \"*loadhi_shiftpreinc\"\n   [(set (match_operand:HI 5 \"s_register_operand\" \"=r\")\n \t(mem:HI (plus:SI (match_operator:SI 2 \"shift_operator\"\n \t\t\t  [(match_operand:SI 3 \"s_register_operand\" \"r\")\n@@ -5094,7 +5195,7 @@\n   \"ldr%?\\\\t%5, [%0, %3%S2]!\\\\t%@ loadhi\"\n [(set_attr \"type\" \"load\")])\n \n-(define_insn \"\"\n+(define_insn \"*loadhi_shiftpredec\"\n   [(set (match_operand:HI 5 \"s_register_operand\" \"=r\")\n \t(mem:HI (minus:SI (match_operand:SI 1 \"s_register_operand\" \"0\")\n \t\t\t  (match_operator:SI 2 \"shift_operator\"\n@@ -5322,7 +5423,7 @@\n ;; calculations.\n \n (define_peephole\n-  [(parallel [(call (mem:SI (match_operand:SI 0 \"\" \"i\"))\n+  [(parallel [(call (mem:SI (match_operand:SI 0 \"\" \"X\"))\n \t\t\t  (match_operand:SI 1 \"general_operand\" \"g\"))\n \t\t    (clobber (reg:SI 14))])\n    (return)]\n@@ -5345,15 +5446,12 @@\n   output_return_instruction (NULL, FALSE);\n   return \\\"b%?\\\\t%a0\\\";\n }\"\n-[(set (attr \"conds\")\n-      (if_then_else (eq_attr \"cpu\" \"arm6\")\n-\t\t    (const_string \"clob\")\n-\t\t    (const_string \"nocond\")))\n+[(set_attr \"type\" \"call\")\n  (set_attr \"length\" \"8\")])\n \n (define_peephole\n   [(parallel [(set (match_operand 0 \"s_register_operand\" \"=rf\")\n-\t\t   (call (mem:SI (match_operand:SI 1 \"\" \"i\"))\n+\t\t   (call (mem:SI (match_operand:SI 1 \"\" \"X\"))\n \t\t\t (match_operand:SI 2 \"general_operand\" \"g\")))\n \t      (clobber (reg:SI 14))])\n    (return)]\n@@ -5376,18 +5474,15 @@\n   output_return_instruction (NULL, FALSE);\n   return \\\"b%?\\\\t%a1\\\";\n }\"\n-[(set (attr \"conds\")\n-      (if_then_else (eq_attr \"cpu\" \"arm6\")\n-\t\t    (const_string \"clob\")\n-\t\t    (const_string \"nocond\")))\n+[(set_attr \"type\" \"call\")\n  (set_attr \"length\" \"8\")])\n \n ;; As above but when this function is not void, we must be returning the\n ;; result of the called subroutine.\n \n (define_peephole\n   [(parallel [(set (match_operand 0 \"s_register_operand\" \"=rf\")\n-\t\t   (call (mem:SI (match_operand:SI 1 \"\" \"i\"))\n+\t\t   (call (mem:SI (match_operand:SI 1 \"\" \"X\"))\n \t\t\t (match_operand:SI 2 \"general_operand\" \"g\")))\n \t      (clobber (reg:SI 14))])\n    (use (match_dup 0))\n@@ -5411,10 +5506,7 @@\n   output_return_instruction (NULL, FALSE);\n   return \\\"b%?\\\\t%a1\\\";\n }\"\n-[(set (attr \"conds\")\n-      (if_then_else (eq_attr \"cpu\" \"arm6\")\n-\t\t    (const_string \"clob\")\n-\t\t    (const_string \"nocond\")))\n+[(set_attr \"type\" \"call\")\n  (set_attr \"length\" \"8\")])\n \n ;; If calling a subroutine and then jumping back to somewhere else, but not\n@@ -5425,7 +5517,7 @@\n ;; not this is possible, this is the same as the sparc does.\n \n (define_peephole\n-  [(parallel[(call (mem:SI (match_operand:SI 0 \"\" \"i\"))\n+  [(parallel[(call (mem:SI (match_operand:SI 0 \"\" \"X\"))\n                    (match_operand:SI 1 \"general_operand\" \"g\"))\n              (clobber (reg:SI 14))])\n    (set (pc)\n@@ -5460,18 +5552,15 @@\n     }\n   return \\\"b%?\\\\t%a0\\\";\n }\"\n-[(set (attr \"conds\")\n-      (if_then_else (eq_attr \"cpu\" \"arm6\")\n-\t\t    (const_string \"clob\")\n-\t\t    (const_string \"nocond\")))\n+[(set_attr \"type\" \"call\")\n  (set (attr \"length\")\n-      (if_then_else (eq_attr \"cpu\" \"arm6\")\n+      (if_then_else (eq_attr \"prog_mode\" \"prog32\")\n \t\t    (const_int 8)\n \t\t    (const_int 12)))])\n \n (define_peephole\n   [(parallel[(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t\t  (call (mem:SI (match_operand:SI 1 \"\" \"i\"))\n+\t\t  (call (mem:SI (match_operand:SI 1 \"\" \"X\"))\n                         (match_operand:SI 2 \"general_operand\" \"g\")))\n              (clobber (reg:SI 14))])\n    (set (pc)\n@@ -5506,12 +5595,9 @@\n     }\n   return \\\"b%?\\\\t%a1\\\";\n }\"\n-[(set (attr \"conds\")\n-      (if_then_else (eq_attr \"cpu\" \"arm6\")\n-\t\t    (const_string \"clob\")\n-\t\t    (const_string \"nocond\")))\n+[(set_attr \"type\" \"call\")\n  (set (attr \"length\")\n-      (if_then_else (eq_attr \"cpu\" \"arm6\")\n+      (if_then_else (eq_attr \"prog_mode\" \"prog32\")\n \t\t    (const_int 8)\n \t\t    (const_int 12)))])\n \n@@ -5557,7 +5643,7 @@\n ;; needed.  Combine doesn't eliminate these because by the time it sees the\n ;; branch it no-longer knows that the data came from memory.\n \n-(define_insn \"\"\n+(define_insn \"*loadqi_compare\"\n   [(set (reg:CC_NOOV 24)\n \t(compare:CC_NOOV\n \t (ashift:SI (subreg:SI (match_operand:QI 0 \"memory_operand\" \"m\") 0)\n@@ -5615,7 +5701,7 @@\n \")\n \n \n-(define_insn \"\"\n+(define_insn \"*cond_move_not\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(if_then_else:SI (match_operator 4 \"comparison_operator\"\n \t\t\t  [(match_operand 3 \"reversible_cc_register\" \"\")\n@@ -5633,7 +5719,7 @@\n ;; The next two patterns occur when an AND operation is followed by a\n ;; scc insn sequence \n \n-(define_insn \"\"\n+(define_insn \"*sign_extract_onebit\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(sign_extract:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n \t\t\t (const_int 1)\n@@ -5647,7 +5733,7 @@\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8\")])\n \n-(define_insn \"\"\n+(define_insn \"*not_signextract_onebit\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(not:SI\n \t (sign_extract:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n@@ -5666,7 +5752,7 @@\n ;; Push multiple registers to the stack.  The first register is in the\n ;; unspec part of the insn; subsequent registers are in parallel (use ...)\n ;; expressions.\n-(define_insn \"\"\n+(define_insn \"*push_multi\"\n   [(match_parallel 2 \"multi_register_push\"\n     [(set (match_operand:BLK 0 \"memory_operand\" \"=m\")\n \t  (unspec:BLK [(match_operand:SI 1 \"s_register_operand\" \"r\")] 2))])]\n@@ -5683,7 +5769,7 @@\n \tabort ();\n       return \\\"\\\";\n     }\n-  strcpy (pattern, \\\"stmfd\\\\t%m0!, {%|%1\\\");\n+  strcpy (pattern, \\\"stmfd\\\\t%m0!, {%1\\\");\n   for (i = 1; i < XVECLEN (operands[2], 0); i++)\n     {\n       strcat (pattern, \\\", %|\\\");\n@@ -5695,3 +5781,66 @@\n   return \\\"\\\";\n }\"\n [(set_attr \"type\" \"store4\")])\n+\n+;; Special patterns for dealing with the constant pool\n+\n+(define_insn \"consttable_4\"\n+  [(unspec_volatile [(match_operand 0 \"\" \"\")] 2)]\n+  \"\"\n+  \"*\n+{\n+  switch (GET_MODE_CLASS (GET_MODE (operands[0])))\n+    {\n+    case MODE_FLOAT:\n+    {\n+      union real_extract u;\n+      bcopy ((char *) &CONST_DOUBLE_LOW (operands[0]), (char *) &u, sizeof u);\n+      assemble_real (u.d, GET_MODE (operands[0]));\n+      break;\n+    }\n+    default:\n+      assemble_integer (operands[0], 4, 1);\n+      break;\n+    }\n+  return \\\"\\\";\n+}\"\n+[(set_attr \"length\" \"4\")])\n+\n+(define_insn \"consttable_8\"\n+  [(unspec_volatile [(match_operand 0 \"\" \"\")] 3)]\n+  \"\"\n+  \"*\n+{\n+  switch (GET_MODE_CLASS (GET_MODE (operands[0])))\n+    {\n+    case MODE_FLOAT:\n+    {\n+      union real_extract u;\n+      bcopy ((char *) &CONST_DOUBLE_LOW (operands[0]), (char *) &u, sizeof u);\n+      assemble_real (u.d, GET_MODE (operands[0]));\n+      break;\n+    }\n+    default:\n+      assemble_integer (operands[0], 8, 1);\n+      break;\n+    }\n+  return \\\"\\\";\n+}\"\n+[(set_attr \"length\" \"8\")])\n+\n+(define_insn \"consttable_end\"\n+  [(unspec_volatile [(const_int 0)] 4)]\n+  \"\"\n+  \"*\n+  text_section ();\n+  return \\\"\\\";\n+\")\n+\n+(define_insn \"align_4\"\n+  [(unspec_volatile [(const_int 0)] 5)]\n+  \"\"\n+  \"*\n+  readonly_data_section ();\n+  assemble_align (32);\n+  return \\\"\\\";\n+\")"}]}