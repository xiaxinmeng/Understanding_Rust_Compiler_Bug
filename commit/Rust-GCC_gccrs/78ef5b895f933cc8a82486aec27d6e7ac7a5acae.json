{"sha": "78ef5b895f933cc8a82486aec27d6e7ac7a5acae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhlZjViODk1ZjkzM2NjOGE4MjQ4NmFlYzI3ZDZlN2FjN2E1YWNhZQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-04-04T22:19:58Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-04-04T22:19:58Z"}, "message": "c-common.c (truthvalue_conversion): Rename, update.\n\n\t* c-common.c (truthvalue_conversion): Rename, update.\n\t* c-common.h (c_common_truthvalue_conversion): New.\n\t* c-convert.c (convert): Update.\n\t* c-lang.c (LANG_HOOKS_TRUTHVALUE_CONVERSION): Redefine.\n\t* c-parse.in (expr_no_commas, if_prefix, select_or_iter_stmt): Update.\n\t* c-typeck.c (build_binary_op, build_unary_op,\n\tbuild_conditional_expr): Update.\n\t* fold-const.c (constant_boolean_node, fold): Use langhook.\n\t* langhooks-def.h (LANGHOOK_INITIALIZER): Update.\n\t* langhooks.h (struct lang_hooks): New hook.\n\t* stmt.c (expand_decl_cleanup): Use langhook.\n\t* tree.h (truthvalue_conversion): Remove.\nada:\n\t* gigi.h (truthvalue_conversion): Rename.\n\t* misc.c (LANG_HOOKS_TRUTHVALUE_CONVERSION): Redefine.\n\t* trans.c (tree_transform): Update.\n\t* utils2.c (truthvalue_conversion): Rename, update.\n\t(build_binary_op, build_unary_op): Update.\ncp:\n\t* cp-lang.c (LANG_HOOKS_TRUTHVALUE_CONVERSION): Redefine.\n\t* cvt.c: Update comment.\n\t* init.c (expand_cleanup_for_base): Update.\n\t* semantics.c (finish_parenthesized_expr): Update.\n\t* typeck.c (cp_truthvalue_conversion): Update.\nf:\n\t* com.c (LANG_HOOKS_TRUTHVALUE_CONVERSION): Redefine.\n\t(truthvalue_conversion): Rename.  Update.  Make static.\n\t(ffecom_truth_value): Update.\njava:\n\t* expr.c (truthvalue_conversion): Rename.  Update.\n\t(expand_compare): Update.\n\t* java-tree.h (java_truthvalue_conversion): New.\n\t* lang.c (LANG_HOOKS_TRUTHVALUE_CONVERSION): Redefine.\nobjc:\n\t* objc-lang.c (LANG_HOOKS_TRUTHVALUE_CONVERSION): Redefine.\n\nFrom-SVN: r51880", "tree": {"sha": "50dc6fe5e989dd9c497bfef9c4a8a5e5f0a8ba33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50dc6fe5e989dd9c497bfef9c4a8a5e5f0a8ba33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78ef5b895f933cc8a82486aec27d6e7ac7a5acae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78ef5b895f933cc8a82486aec27d6e7ac7a5acae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78ef5b895f933cc8a82486aec27d6e7ac7a5acae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/comments", "author": null, "committer": null, "parents": [{"sha": "3900216066f8f2b9a8362daf4da8b225018e69d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3900216066f8f2b9a8362daf4da8b225018e69d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3900216066f8f2b9a8362daf4da8b225018e69d7"}], "stats": {"total": 226, "additions": 146, "deletions": 80}, "files": [{"sha": "23ad1a99fbb35d835e372c5b968c5f75af2242ac", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=78ef5b895f933cc8a82486aec27d6e7ac7a5acae", "patch": "@@ -1,3 +1,11 @@\n+2002-04-04  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* gigi.h (truthvalue_conversion): Rename.\n+\t* misc.c (LANG_HOOKS_TRUTHVALUE_CONVERSION): Redefine.\n+\t* trans.c (tree_transform): Update.\n+\t* utils2.c (truthvalue_conversion): Rename, update.\n+\t(build_binary_op, build_unary_op): Update.\n+\n 2002-04-04  Laurent Guerby  <guerby@acm.org>\n \n \t* make.adb: Implement -margs, remove restriction about file name placement."}, {"sha": "4819ac9f31bca335d1c4813319fca0d6f547887a", "filename": "gcc/ada/gigi.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fada%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fada%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgigi.h?ref=78ef5b895f933cc8a82486aec27d6e7ac7a5acae", "patch": "@@ -654,7 +654,7 @@ extern tree unchecked_convert\t\tPARAMS ((tree, tree));\n    The resulting type should always be the same as the input type.\n    This function is simpler than the corresponding C version since\n    the only possible operands will be things of Boolean type.  */\n-extern tree truthvalue_conversion      PARAMS((tree));\n+extern tree gnat_truthvalue_conversion      PARAMS((tree));\n \n /* Return the base type of TYPE.  */\n extern tree get_base_type\tPARAMS((tree));"}, {"sha": "1246d4b03d860c808ec81236e4f18bcd5f16dae9", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=78ef5b895f933cc8a82486aec27d6e7ac7a5acae", "patch": "@@ -116,6 +116,8 @@ static rtx gnat_expand_expr\t\tPARAMS ((tree, rtx, enum machine_mode,\n #define LANG_HOOKS_EXPAND_EXPR\t\tgnat_expand_expr\n #undef LANG_HOOKS_MARK_ADDRESSABLE\n #define LANG_HOOKS_MARK_ADDRESSABLE\tgnat_mark_addressable\n+#undef LANG_HOOKS_TRUTHVALUE_CONVERSION\n+#define LANG_HOOKS_TRUTHVALUE_CONVERSION gnat_truthvalue_conversion\n #undef LANG_HOOKS_PRINT_DECL\n #define LANG_HOOKS_PRINT_DECL\t\tgnat_print_decl\n #undef LANG_HOOKS_PRINT_TYPE"}, {"sha": "38ae69c99daf080746ad2863369e66f23fd2cf09", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=78ef5b895f933cc8a82486aec27d6e7ac7a5acae", "patch": "@@ -1907,7 +1907,7 @@ tree_transform (gnat_node)\n \n \tgnu_result_type = get_unpadded_type (Etype (gnat_node));\n \tgnu_result = build_cond_expr (gnu_result_type,\n-\t\t\t\t      truthvalue_conversion (gnu_cond),\n+\t\t\t\t      gnat_truthvalue_conversion (gnu_cond),\n \t\t\t\t      gnu_true, gnu_false);\n       }\n       break;\n@@ -2411,9 +2411,8 @@ tree_transform (gnat_node)\n \t      TREE_LOOP_ID (get_gnu_tree (Entity (Name (gnat_node))));\n \n \tif (Present (Condition (gnat_node)))\n-\t  gnu_cond\n-\t    = invert_truthvalue\n-\t      (truthvalue_conversion (gnat_to_gnu (Condition (gnat_node))));\n+\t  gnu_cond = invert_truthvalue (gnat_truthvalue_conversion\n+\t\t\t\t\t(gnat_to_gnu (Condition (gnat_node))));\n \n \tset_lineno (gnat_node, 1);\n \texpand_exit_loop_if_false (loop_id, gnu_cond);"}, {"sha": "6d76a4149ce2ce9fb68e3f79d58f4c398d564128", "filename": "gcc/ada/utils2.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fada%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fada%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils2.c?ref=78ef5b895f933cc8a82486aec27d6e7ac7a5acae", "patch": "@@ -66,7 +66,7 @@ static tree build_simple_component_ref\tPARAMS ((tree, tree, tree));\n    the only possible operands will be things of Boolean type.  */\n \n tree\n-truthvalue_conversion (expr)\n+gnat_truthvalue_conversion (expr)\n      tree expr;\n {\n   tree type = TREE_TYPE (expr);\n@@ -85,13 +85,14 @@ truthvalue_conversion (expr)\n \n     case COND_EXPR:\n       /* Distribute the conversion into the arms of a COND_EXPR.  */\n-      return fold (build (COND_EXPR, type, TREE_OPERAND (expr, 0),\n-\t\t\t  truthvalue_conversion (TREE_OPERAND (expr, 1)),\n-\t\t\t  truthvalue_conversion (TREE_OPERAND (expr, 2))));\n+      return fold\n+\t(build (COND_EXPR, type, TREE_OPERAND (expr, 0),\n+\t\tgnat_truthvalue_conversion (TREE_OPERAND (expr, 1)),\n+\t\tgnat_truthvalue_conversion (TREE_OPERAND (expr, 2))));\n \n     case WITH_RECORD_EXPR:\n       return build (WITH_RECORD_EXPR, type,\n-\t\t    truthvalue_conversion (TREE_OPERAND (expr, 0)),\n+\t\t    gnat_truthvalue_conversion (TREE_OPERAND (expr, 0)),\n \t\t    TREE_OPERAND (expr, 1));\n \n     default:\n@@ -983,8 +984,8 @@ build_binary_op (op_code, result_type, left_operand, right_operand)\n     case TRUTH_AND_EXPR:\n     case TRUTH_OR_EXPR:\n     case TRUTH_XOR_EXPR:\n-      left_operand = truthvalue_conversion (left_operand);\n-      right_operand = truthvalue_conversion (right_operand);\n+      left_operand = gnat_truthvalue_conversion (left_operand);\n+      right_operand = gnat_truthvalue_conversion (right_operand);\n       goto common;\n \n     case BIT_AND_EXPR:\n@@ -1115,7 +1116,7 @@ build_unary_op (op_code, result_type, operand)\n       if (result_type != base_type)\n \tgigi_abort (508);\n \n-      result = invert_truthvalue (truthvalue_conversion (operand));\n+      result = invert_truthvalue (gnat_truthvalue_conversion (operand));\n       break;\n \n     case ATTR_ADDR_EXPR:"}, {"sha": "1c9f4a017547d44fe4aa31d5f6c1edc00e175a33", "filename": "gcc/c-common.c", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=78ef5b895f933cc8a82486aec27d6e7ac7a5acae", "patch": "@@ -1577,8 +1577,9 @@ min_precision (value, unsignedp)\n   return log + 1 + ! unsignedp;\n }\n \f\n-/* Print an error message for invalid operands to arith operation CODE.\n-   NOP_EXPR is used as a special case (see truthvalue_conversion).  */\n+/* Print an error message for invalid operands to arith operation\n+   CODE.  NOP_EXPR is used as a special case (see\n+   c_common_truthvalue_conversion).  */\n \n void\n binary_op_error (code)\n@@ -2106,7 +2107,7 @@ pointer_int_sum (resultcode, ptrop, intop)\n    The resulting type should always be `boolean_type_node'.  */\n \n tree\n-truthvalue_conversion (expr)\n+c_common_truthvalue_conversion (expr)\n      tree expr;\n {\n   if (TREE_CODE (expr) == ERROR_MARK)\n@@ -2172,32 +2173,32 @@ truthvalue_conversion (expr)\n     case COMPLEX_EXPR:\n       return build_binary_op ((TREE_SIDE_EFFECTS (TREE_OPERAND (expr, 1))\n \t\t\t       ? TRUTH_OR_EXPR : TRUTH_ORIF_EXPR),\n-\t\t\t      truthvalue_conversion (TREE_OPERAND (expr, 0)),\n-\t\t\t      truthvalue_conversion (TREE_OPERAND (expr, 1)),\n+\t\tc_common_truthvalue_conversion (TREE_OPERAND (expr, 0)),\n+\t\tc_common_truthvalue_conversion (TREE_OPERAND (expr, 1)),\n \t\t\t      0);\n \n     case NEGATE_EXPR:\n     case ABS_EXPR:\n     case FLOAT_EXPR:\n     case FFS_EXPR:\n       /* These don't change whether an object is non-zero or zero.  */\n-      return truthvalue_conversion (TREE_OPERAND (expr, 0));\n+      return c_common_truthvalue_conversion (TREE_OPERAND (expr, 0));\n \n     case LROTATE_EXPR:\n     case RROTATE_EXPR:\n       /* These don't change whether an object is zero or non-zero, but\n \t we can't ignore them if their second arg has side-effects.  */\n       if (TREE_SIDE_EFFECTS (TREE_OPERAND (expr, 1)))\n \treturn build (COMPOUND_EXPR, boolean_type_node, TREE_OPERAND (expr, 1),\n-\t\t      truthvalue_conversion (TREE_OPERAND (expr, 0)));\n+\t\t      c_common_truthvalue_conversion (TREE_OPERAND (expr, 0)));\n       else\n-\treturn truthvalue_conversion (TREE_OPERAND (expr, 0));\n+\treturn c_common_truthvalue_conversion (TREE_OPERAND (expr, 0));\n \n     case COND_EXPR:\n       /* Distribute the conversion into the arms of a COND_EXPR.  */\n       return fold (build (COND_EXPR, boolean_type_node, TREE_OPERAND (expr, 0),\n-\t\t\t  truthvalue_conversion (TREE_OPERAND (expr, 1)),\n-\t\t\t  truthvalue_conversion (TREE_OPERAND (expr, 2))));\n+\t\tc_common_truthvalue_conversion (TREE_OPERAND (expr, 1)),\n+\t\tc_common_truthvalue_conversion (TREE_OPERAND (expr, 2))));\n \n     case CONVERT_EXPR:\n       /* Don't cancel the effect of a CONVERT_EXPR from a REFERENCE_TYPE,\n@@ -2210,7 +2211,7 @@ truthvalue_conversion (expr)\n       /* If this is widening the argument, we can ignore it.  */\n       if (TYPE_PRECISION (TREE_TYPE (expr))\n \t  >= TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (expr, 0))))\n-\treturn truthvalue_conversion (TREE_OPERAND (expr, 0));\n+\treturn c_common_truthvalue_conversion (TREE_OPERAND (expr, 0));\n       break;\n \n     case MINUS_EXPR:\n@@ -2255,12 +2256,12 @@ truthvalue_conversion (expr)\n \n   if (TREE_CODE (TREE_TYPE (expr)) == COMPLEX_TYPE)\n     {\n-      tree tem = save_expr (expr);\n+      tree t = save_expr (expr);\n       return (build_binary_op\n \t      ((TREE_SIDE_EFFECTS (expr)\n \t\t? TRUTH_OR_EXPR : TRUTH_ORIF_EXPR),\n-\t       truthvalue_conversion (build_unary_op (REALPART_EXPR, tem, 0)),\n-\t       truthvalue_conversion (build_unary_op (IMAGPART_EXPR, tem, 0)),\n+\tc_common_truthvalue_conversion (build_unary_op (REALPART_EXPR, t, 0)),\n+\tc_common_truthvalue_conversion (build_unary_op (IMAGPART_EXPR, t, 0)),\n \t       0));\n     }\n "}, {"sha": "462e5bd7933870e8c0e734035d933ece3e265e87", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=78ef5b895f933cc8a82486aec27d6e7ac7a5acae", "patch": "@@ -513,6 +513,7 @@ extern tree c_common_type_for_size\t\tPARAMS ((unsigned int, int));\n extern tree c_common_unsigned_type\t\tPARAMS ((tree));\n extern tree c_common_signed_type\t\tPARAMS ((tree));\n extern tree c_common_signed_or_unsigned_type\tPARAMS ((int, tree));\n+extern tree c_common_truthvalue_conversion\tPARAMS ((tree));\n extern void c_apply_type_quals_to_decl\t\tPARAMS ((int, tree));\n extern tree c_sizeof\t\t\t\tPARAMS ((tree));\n extern tree c_alignof\t\t\t\tPARAMS ((tree));"}, {"sha": "b38eab2dbabb1e0a391454432ac06469aeaf7fbf", "filename": "gcc/c-convert.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fc-convert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fc-convert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-convert.c?ref=78ef5b895f933cc8a82486aec27d6e7ac7a5acae", "patch": "@@ -42,7 +42,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    Here is a list of all the functions that assume that widening and\n    narrowing is always done with a NOP_EXPR:\n      In convert.c, convert_to_integer.\n-     In c-typeck.c, build_binary_op (boolean ops), and truthvalue_conversion.\n+     In c-typeck.c, build_binary_op (boolean ops), and\n+\tc_common_truthvalue_conversion.\n      In expr.c: expand_expr, for operands of a MULT_EXPR.\n      In fold-const.c: fold.\n      In tree.c: get_narrower and get_unwidened.  */\n@@ -90,9 +91,9 @@ convert (type, expr)\n     return fold (convert_to_integer (type, e));\n   if (code == BOOLEAN_TYPE)\n     {\n-      tree t = truthvalue_conversion (expr);\n-      /* If truthvalue_conversion returns a NOP_EXPR, we must fold it here\n-\t to avoid infinite recursion between fold () and convert ().  */\n+      tree t = c_common_truthvalue_conversion (expr);\n+      /* If it returns a NOP_EXPR, we must fold it here to avoid\n+\t infinite recursion between fold () and convert ().  */\n       if (TREE_CODE (t) == NOP_EXPR)\n \treturn fold (build1 (NOP_EXPR, type, TREE_OPERAND (t, 0)));\n       else"}, {"sha": "57d81968fe468c8b7e9f4f468bb192cd05182e3a", "filename": "gcc/c-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=78ef5b895f933cc8a82486aec27d6e7ac7a5acae", "patch": "@@ -58,6 +58,8 @@ static void c_post_options PARAMS ((void));\n #define LANG_HOOKS_MARK_ADDRESSABLE c_mark_addressable\n #undef LANG_HOOKS_PARSE_FILE\n #define LANG_HOOKS_PARSE_FILE c_common_parse_file\n+#undef LANG_HOOKS_TRUTHVALUE_CONVERSION\n+#define LANG_HOOKS_TRUTHVALUE_CONVERSION c_common_truthvalue_conversion\n #undef LANG_HOOKS_INSERT_DEFAULT_ATTRIBUTES\n #define LANG_HOOKS_INSERT_DEFAULT_ATTRIBUTES c_insert_default_attributes\n #undef LANG_HOOKS_FINISH_INCOMPLETE_DECL"}, {"sha": "e6d61378b9bd941db045507d1e9089df3472e928", "filename": "gcc/c-parse.in", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=78ef5b895f933cc8a82486aec27d6e7ac7a5acae", "patch": "@@ -566,19 +566,22 @@ expr_no_commas:\n \t| expr_no_commas '^' expr_no_commas\n \t\t{ $$ = parser_build_binary_op ($2, $1, $3); }\n \t| expr_no_commas ANDAND\n-\t\t{ $1 = truthvalue_conversion (default_conversion ($1));\n+\t\t{ $1 = c_common_truthvalue_conversion\n+\t\t    (default_conversion ($1));\n \t\t  skip_evaluation += $1 == boolean_false_node; }\n \t  expr_no_commas\n \t\t{ skip_evaluation -= $1 == boolean_false_node;\n \t\t  $$ = parser_build_binary_op (TRUTH_ANDIF_EXPR, $1, $4); }\n \t| expr_no_commas OROR\n-\t\t{ $1 = truthvalue_conversion (default_conversion ($1));\n+\t\t{ $1 = c_common_truthvalue_conversion\n+\t\t    (default_conversion ($1));\n \t\t  skip_evaluation += $1 == boolean_true_node; }\n \t  expr_no_commas\n \t\t{ skip_evaluation -= $1 == boolean_true_node;\n \t\t  $$ = parser_build_binary_op (TRUTH_ORIF_EXPR, $1, $4); }\n \t| expr_no_commas '?'\n-\t\t{ $1 = truthvalue_conversion (default_conversion ($1));\n+\t\t{ $1 = c_common_truthvalue_conversion\n+\t\t    (default_conversion ($1));\n \t\t  skip_evaluation += $1 == boolean_false_node; }\n           expr ':'\n \t\t{ skip_evaluation += (($1 == boolean_true_node)\n@@ -591,7 +594,8 @@ expr_no_commas:\n \t\t    pedwarn (\"ISO C forbids omitting the middle term of a ?: expression\");\n \t\t  /* Make sure first operand is calculated only once.  */\n \t\t  $<ttype>2 = save_expr ($1);\n-\t\t  $1 = truthvalue_conversion (default_conversion ($<ttype>2));\n+\t\t  $1 = c_common_truthvalue_conversion\n+\t\t    (default_conversion ($<ttype>2));\n \t\t  skip_evaluation += $1 == boolean_true_node; }\n \t  ':' expr_no_commas\n \t\t{ skip_evaluation -= $1 == boolean_true_node;\n@@ -606,7 +610,8 @@ expr_no_commas:\n \t| expr_no_commas ASSIGN expr_no_commas\n \t\t{ char class;\n \t\t  $$ = build_modify_expr ($1, $2, $3);\n-\t\t  /* This inhibits warnings in truthvalue_conversion.  */\n+\t\t  /* This inhibits warnings in\n+\t\t     c_common_truthvalue_conversion.  */\n \t\t  class = TREE_CODE_CLASS (TREE_CODE ($$));\n \t\t  if (IS_EXPR_CODE_CLASS (class))\n \t\t    C_SET_EXP_ORIGINAL_CODE ($$, ERROR_MARK);\n@@ -2189,7 +2194,7 @@ if_prefix:\n           IF\n                 { $<ttype>$ = c_begin_if_stmt (); }\n             '(' expr ')'\n-\t\t{ c_expand_start_cond (truthvalue_conversion ($4), \n+\t\t{ c_expand_start_cond (c_common_truthvalue_conversion ($4), \n \t\t\t\t       compstmt_count,$<ttype>2);\n \t\t  $<itype>$ = stmt_count;\n \t\t  if_stmt_file = $<filename>-2;\n@@ -2301,15 +2306,15 @@ select_or_iter_stmt:\n                 { stmt_count++; \n \t\t  $<ttype>$ = c_begin_while_stmt (); }\n \t  '(' expr ')'\n-                { $4 = truthvalue_conversion ($4);\n-\t\t  c_finish_while_stmt_cond (truthvalue_conversion ($4),\n-\t\t\t\t\t    $<ttype>2);\n+                { $4 = c_common_truthvalue_conversion ($4);\n+\t\t  c_finish_while_stmt_cond\n+\t\t    (c_common_truthvalue_conversion ($4), $<ttype>2);\n \t\t  $<ttype>$ = add_stmt ($<ttype>2); }\n \t  c99_block_lineno_labeled_stmt\n \t\t{ RECHAIN_STMTS ($<ttype>6, WHILE_BODY ($<ttype>6)); }\n \t| do_stmt_start\n \t  '(' expr ')' ';'\n-                { DO_COND ($1) = truthvalue_conversion ($3); }\n+                { DO_COND ($1) = c_common_truthvalue_conversion ($3); }\n \t| do_stmt_start error\n  \t\t{ }\n \t| FOR\n@@ -2321,7 +2326,8 @@ select_or_iter_stmt:\n \t\t  RECHAIN_STMTS ($<ttype>2, FOR_INIT_STMT ($<ttype>2)); }\n \t  xexpr ';'\n                 { if ($6) \n-\t\t    FOR_COND ($<ttype>2) = truthvalue_conversion ($6); }\n+\t\t    FOR_COND ($<ttype>2)\n+\t\t      = c_common_truthvalue_conversion ($6); }\n \t  xexpr ')'\n \t\t{ FOR_EXPR ($<ttype>2) = $9; }\n \t  c99_block_lineno_labeled_stmt"}, {"sha": "91abd80a4ba456530bb7f704b33194faeb416ede", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=78ef5b895f933cc8a82486aec27d6e7ac7a5acae", "patch": "@@ -2084,8 +2084,8 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t     but that does not mean the operands should be\n \t     converted to ints!  */\n \t  result_type = integer_type_node;\n-\t  op0 = truthvalue_conversion (op0);\n-\t  op1 = truthvalue_conversion (op1);\n+\t  op0 = c_common_truthvalue_conversion (op0);\n+\t  op1 = c_common_truthvalue_conversion (op1);\n \t  converted = 1;\n \t}\n       break;\n@@ -2801,7 +2801,7 @@ build_unary_op (code, xarg, flag)\n \t  error (\"wrong type argument to unary exclamation mark\");\n \t  return error_mark_node;\n \t}\n-      arg = truthvalue_conversion (arg);\n+      arg = c_common_truthvalue_conversion (arg);\n       return invert_truthvalue (arg);\n \n     case NOP_EXPR:\n@@ -3365,7 +3365,7 @@ build_conditional_expr (ifexp, op1, op2)\n   tree result_type = NULL;\n   tree orig_op1 = op1, orig_op2 = op2;\n \n-  ifexp = truthvalue_conversion (default_conversion (ifexp));\n+  ifexp = c_common_truthvalue_conversion (default_conversion (ifexp));\n \n #if 0 /* Produces wrong result if within sizeof.  */\n   /* Don't promote the operands separately if they promote"}, {"sha": "cd2e9193ef0c71cf2042ff2db1b83abede17d10a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=78ef5b895f933cc8a82486aec27d6e7ac7a5acae", "patch": "@@ -1,3 +1,11 @@\n+2002-04-04  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* cp-lang.c (LANG_HOOKS_TRUTHVALUE_CONVERSION): Redefine.\n+\t* cvt.c: Update comment.\n+\t* init.c (expand_cleanup_for_base): Update.\n+\t* semantics.c (finish_parenthesized_expr): Update.\n+\t* typeck.c (cp_truthvalue_conversion): Update.\n+\n 2002-04-04  Jason Merrill  <jason@redhat.com>\n \n \t* semantics.c (finish_eh_cleanup): New fn."}, {"sha": "0292719d341afab3bf9bf255a146fdb2bcb2ef6c", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=78ef5b895f933cc8a82486aec27d6e7ac7a5acae", "patch": "@@ -62,6 +62,8 @@ static bool cxx_warn_unused_global_decl PARAMS ((tree));\n #define LANG_HOOKS_UNSAVE_EXPR_NOW cxx_unsave_expr_now\n #undef LANG_HOOKS_MAYBE_BUILD_CLEANUP\n #define LANG_HOOKS_MAYBE_BUILD_CLEANUP cxx_maybe_build_cleanup\n+#undef LANG_HOOKS_TRUTHVALUE_CONVERSION\n+#define LANG_HOOKS_TRUTHVALUE_CONVERSION c_common_truthvalue_conversion\n #undef LANG_HOOKS_INSERT_DEFAULT_ATTRIBUTES\n #define LANG_HOOKS_INSERT_DEFAULT_ATTRIBUTES cxx_insert_default_attributes\n #undef LANG_HOOKS_MARK_TREE"}, {"sha": "d0f9945fdaf36c4f787c90645d1927d226c50407", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=78ef5b895f933cc8a82486aec27d6e7ac7a5acae", "patch": "@@ -52,7 +52,7 @@ static void warn_ref_binding PARAMS ((tree, tree, tree));\n    narrowing is always done with a NOP_EXPR:\n      In convert.c, convert_to_integer.\n      In c-typeck.c, build_binary_op_nodefault (boolean ops),\n-        and truthvalue_conversion.\n+        and c_common_truthvalue_conversion.\n      In expr.c: expand_expr, for operands of a MULT_EXPR.\n      In fold-const.c: fold.\n      In tree.c: get_narrower and get_unwidened."}, {"sha": "57b3dba4658f8fa2042e444091173d18bfc72143", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=78ef5b895f933cc8a82486aec27d6e7ac7a5acae", "patch": "@@ -841,7 +841,7 @@ expand_cleanup_for_base (binfo, flag)\n \t  (current_class_ref, binfo, base_dtor_identifier, NULL_TREE));\n   if (flag)\n     expr = fold (build (COND_EXPR, void_type_node,\n-\t\t\ttruthvalue_conversion (flag),\n+\t\t\tc_common_truthvalue_conversion (flag),\n \t\t\texpr, integer_zero_node));\n \n   finish_eh_cleanup (expr);"}, {"sha": "39f9567d06362238c552c7289a9606e4b3b099c2", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=78ef5b895f933cc8a82486aec27d6e7ac7a5acae", "patch": "@@ -1140,7 +1140,7 @@ finish_parenthesized_expr (expr)\n      tree expr;\n {\n   if (IS_EXPR_CODE_CLASS (TREE_CODE_CLASS (TREE_CODE (expr))))\n-    /* This inhibits warnings in truthvalue_conversion.  */\n+    /* This inhibits warnings in c_common_truthvalue_conversion.  */\n     C_SET_EXP_ORIGINAL_CODE (expr, ERROR_MARK); \n \n   if (TREE_CODE (expr) == OFFSET_REF)"}, {"sha": "593e2bb7eface0a954fda73b4bc596e07bfb2c53", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=78ef5b895f933cc8a82486aec27d6e7ac7a5acae", "patch": "@@ -4191,8 +4191,9 @@ build_x_unary_op (code, xarg)\n   return exp;\n }\n \n-/* Like truthvalue_conversion, but handle pointer-to-member constants, where\n-   a null value is represented by an INTEGER_CST of -1.  */\n+/* Like c_common_truthvalue_conversion, but handle pointer-to-member\n+   constants, where a null value is represented by an INTEGER_CST of\n+   -1.  */\n \n tree\n cp_truthvalue_conversion (expr)\n@@ -4202,7 +4203,7 @@ cp_truthvalue_conversion (expr)\n   if (TYPE_PTRMEM_P (type))\n     return build_binary_op (NE_EXPR, expr, integer_zero_node, 1);\n   else\n-    return truthvalue_conversion (expr);\n+    return c_common_truthvalue_conversion (expr);\n }\n \n /* Just like cp_truthvalue_conversion, but we want a CLEANUP_POINT_EXPR.  */"}, {"sha": "d522ff853b440321246b8c1cfd93c095be1a4006", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=78ef5b895f933cc8a82486aec27d6e7ac7a5acae", "patch": "@@ -1,3 +1,9 @@\n+Thu Apr  4 23:29:48 2002  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* com.c (LANG_HOOKS_TRUTHVALUE_CONVERSION): Redefine.\n+\t(truthvalue_conversion): Rename.  Update.  Make static.\n+\t(ffecom_truth_value): Update.\n+\n Mon Apr  1 21:39:36 2002  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* com.c (LANG_HOOKS_MARK_ADDRESSABLE): Redefine."}, {"sha": "f99c209c73879b78bac9118ed0289f88192b527c", "filename": "gcc/f/com.c", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=78ef5b895f933cc8a82486aec27d6e7ac7a5acae", "patch": "@@ -267,6 +267,7 @@ static tree ffe_unsigned_type PARAMS ((tree));\n static tree ffe_signed_type PARAMS ((tree));\n static tree ffe_signed_or_unsigned_type PARAMS ((int, tree));\n static bool ffe_mark_addressable PARAMS ((tree));\n+static tree ffe_truthvalue_conversion PARAMS ((tree));\n static void ffecom_init_decl_processing PARAMS ((void));\n static tree ffecom_arglist_expr_ (const char *argstring, ffebld args);\n static tree ffecom_widest_expr_type_ (ffebld list);\n@@ -13012,7 +13013,7 @@ ffecom_temp_label ()\n tree\n ffecom_truth_value (tree expr)\n {\n-  return truthvalue_conversion (expr);\n+  return ffe_truthvalue_conversion (expr);\n }\n \n /* Return the inversion of a truth value (the inversion of what\n@@ -14236,6 +14237,8 @@ static void ffe_mark_tree (tree);\n #define LANG_HOOKS_DECL_PRINTABLE_NAME\tffe_printable_name\n #undef  LANG_HOOKS_PRINT_ERROR_FUNCTION\n #define LANG_HOOKS_PRINT_ERROR_FUNCTION ffe_print_error_function\n+#undef  LANG_HOOKS_TRUTHVALUE_CONVERSION\n+#define LANG_HOOKS_TRUTHVALUE_CONVERSION ffe_truthvalue_conversion\n \n #undef  LANG_HOOKS_TYPE_FOR_MODE\n #define LANG_HOOKS_TYPE_FOR_MODE\tffe_type_for_mode\n@@ -14841,8 +14844,8 @@ ffe_signed_type (type)\n \n    The resulting type should always be `integer_type_node'.  */\n \n-tree\n-truthvalue_conversion (expr)\n+static tree\n+ffe_truthvalue_conversion (expr)\n      tree expr;\n {\n   if (TREE_CODE (expr) == ERROR_MARK)\n@@ -14919,31 +14922,31 @@ truthvalue_conversion (expr)\n       return ffecom_2 ((TREE_SIDE_EFFECTS (TREE_OPERAND (expr, 1))\n \t\t\t? TRUTH_OR_EXPR : TRUTH_ORIF_EXPR),\n \t\t       integer_type_node,\n-\t\t       truthvalue_conversion (TREE_OPERAND (expr, 0)),\n-\t\t       truthvalue_conversion (TREE_OPERAND (expr, 1)));\n+\t\t       ffe_truthvalue_conversion (TREE_OPERAND (expr, 0)),\n+\t\t       ffe_truthvalue_conversion (TREE_OPERAND (expr, 1)));\n \n     case NEGATE_EXPR:\n     case ABS_EXPR:\n     case FLOAT_EXPR:\n     case FFS_EXPR:\n       /* These don't change whether an object is non-zero or zero.  */\n-      return truthvalue_conversion (TREE_OPERAND (expr, 0));\n+      return ffe_truthvalue_conversion (TREE_OPERAND (expr, 0));\n \n     case LROTATE_EXPR:\n     case RROTATE_EXPR:\n       /* These don't change whether an object is zero or non-zero, but\n \t we can't ignore them if their second arg has side-effects.  */\n       if (TREE_SIDE_EFFECTS (TREE_OPERAND (expr, 1)))\n \treturn build (COMPOUND_EXPR, integer_type_node, TREE_OPERAND (expr, 1),\n-\t\t      truthvalue_conversion (TREE_OPERAND (expr, 0)));\n+\t\t      ffe_truthvalue_conversion (TREE_OPERAND (expr, 0)));\n       else\n-\treturn truthvalue_conversion (TREE_OPERAND (expr, 0));\n+\treturn ffe_truthvalue_conversion (TREE_OPERAND (expr, 0));\n \n     case COND_EXPR:\n       /* Distribute the conversion into the arms of a COND_EXPR.  */\n       return fold (build (COND_EXPR, integer_type_node, TREE_OPERAND (expr, 0),\n-\t\t\t  truthvalue_conversion (TREE_OPERAND (expr, 1)),\n-\t\t\t  truthvalue_conversion (TREE_OPERAND (expr, 2))));\n+\t\t\t  ffe_truthvalue_conversion (TREE_OPERAND (expr, 1)),\n+\t\t\t  ffe_truthvalue_conversion (TREE_OPERAND (expr, 2))));\n \n     case CONVERT_EXPR:\n       /* Don't cancel the effect of a CONVERT_EXPR from a REFERENCE_TYPE,\n@@ -14956,7 +14959,7 @@ truthvalue_conversion (expr)\n       /* If this is widening the argument, we can ignore it.  */\n       if (TYPE_PRECISION (TREE_TYPE (expr))\n \t  >= TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (expr, 0))))\n-\treturn truthvalue_conversion (TREE_OPERAND (expr, 0));\n+\treturn ffe_truthvalue_conversion (TREE_OPERAND (expr, 0));\n       break;\n \n     case MINUS_EXPR:\n@@ -15001,12 +15004,12 @@ truthvalue_conversion (expr)\n \t    ((TREE_SIDE_EFFECTS (expr)\n \t      ? TRUTH_OR_EXPR : TRUTH_ORIF_EXPR),\n \t     integer_type_node,\n-\t     truthvalue_conversion (ffecom_1 (REALPART_EXPR,\n-\t\t\t\t\t      TREE_TYPE (TREE_TYPE (expr)),\n-\t\t\t\t\t      expr)),\n-\t     truthvalue_conversion (ffecom_1 (IMAGPART_EXPR,\n-\t\t\t\t\t      TREE_TYPE (TREE_TYPE (expr)),\n-\t\t\t\t\t      expr))));\n+\t     ffe_truthvalue_conversion (ffecom_1 (REALPART_EXPR,\n+\t\t\t\t\t\t  TREE_TYPE (TREE_TYPE (expr)),\n+\t\t\t\t\t\t  expr)),\n+\t     ffe_truthvalue_conversion (ffecom_1 (IMAGPART_EXPR,\n+\t\t\t\t\t\t  TREE_TYPE (TREE_TYPE (expr)),\n+\t\t\t\t\t\t  expr))));\n \n   return ffecom_2 (NE_EXPR, integer_type_node,\n \t\t   expr,"}, {"sha": "10a92fe412b98685305af89995785972053a8e13", "filename": "gcc/fold-const.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=78ef5b895f933cc8a82486aec27d6e7ac7a5acae", "patch": "@@ -4139,8 +4139,8 @@ constant_boolean_node (value, type)\n   if (type == integer_type_node)\n     return value ? integer_one_node : integer_zero_node;\n   else if (TREE_CODE (type) == BOOLEAN_TYPE)\n-    return truthvalue_conversion (value ? integer_one_node :\n-\t\t\t\t  integer_zero_node);\n+    return (*lang_hooks.truthvalue_conversion) (value ? integer_one_node :\n+\t\t\t\t\t\tinteger_zero_node);\n   else\n     {\n       tree t = build_int_2 (value, 0);\n@@ -6405,7 +6405,7 @@ fold (expr)\n \n       TREE_TYPE (t1) = type;\n       if (TREE_CODE (type) == BOOLEAN_TYPE)\n-\treturn truthvalue_conversion (t1);\n+\treturn (*lang_hooks.truthvalue_conversion) (t1);\n       return t1;\n \n     case COND_EXPR:"}, {"sha": "ae7090115283617ee6c9f69b9288747c20fc8af6", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=78ef5b895f933cc8a82486aec27d6e7ac7a5acae", "patch": "@@ -1,3 +1,10 @@\n+2002-04-04  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* expr.c (truthvalue_conversion): Rename.  Update.\n+\t(expand_compare): Update.\n+\t* java-tree.h (java_truthvalue_conversion): New.\n+\t* lang.c (LANG_HOOKS_TRUTHVALUE_CONVERSION): Redefine.\n+\n 2002-04-01  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* java-tree.h (java_mark_addressable): New."}, {"sha": "bba81d5e6833cedec6c8bf0f46ffcf1ca256eac2", "filename": "gcc/java/expr.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=78ef5b895f933cc8a82486aec27d6e7ac7a5acae", "patch": "@@ -152,7 +152,7 @@ init_expr_processing()\n }\n \n tree\n-truthvalue_conversion (expr)\n+java_truthvalue_conversion (expr)\n      tree expr;\n {\n   /* It is simpler and generates better code to have only TRUTH_*_EXPR\n@@ -183,19 +183,19 @@ truthvalue_conversion (expr)\n     case FLOAT_EXPR:\n     case FFS_EXPR:\n       /* These don't change whether an object is non-zero or zero.  */\n-      return truthvalue_conversion (TREE_OPERAND (expr, 0));\n+      return java_truthvalue_conversion (TREE_OPERAND (expr, 0));\n \n     case COND_EXPR:\n       /* Distribute the conversion into the arms of a COND_EXPR.  */\n       return fold (build (COND_EXPR, boolean_type_node, TREE_OPERAND (expr, 0),\n-                          truthvalue_conversion (TREE_OPERAND (expr, 1)),\n-                          truthvalue_conversion (TREE_OPERAND (expr, 2))));\n+                          java_truthvalue_conversion (TREE_OPERAND (expr, 1)),\n+                          java_truthvalue_conversion (TREE_OPERAND (expr, 2))));\n \n     case NOP_EXPR:\n       /* If this is widening the argument, we can ignore it.  */\n       if (TYPE_PRECISION (TREE_TYPE (expr))\n           >= TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (expr, 0))))\n-        return truthvalue_conversion (TREE_OPERAND (expr, 0));\n+        return java_truthvalue_conversion (TREE_OPERAND (expr, 0));\n       /* fall through to default */\n \n     default:\n@@ -1656,7 +1656,7 @@ expand_compare (condition, value1, value2, target_pc)\n {\n   tree target = lookup_label (target_pc);\n   tree cond = fold (build (condition, boolean_type_node, value1, value2));\n-  expand_start_cond (truthvalue_conversion (cond), 0);\n+  expand_start_cond (java_truthvalue_conversion (cond), 0);\n   expand_goto (target);\n   expand_end_cond ();\n }"}, {"sha": "84a2afb76ca76d8b91a5d0c8a060020538de391f", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=78ef5b895f933cc8a82486aec27d6e7ac7a5acae", "patch": "@@ -1045,6 +1045,7 @@ extern tree java_type_for_size PARAMS ((unsigned int, int));\n extern tree java_unsigned_type PARAMS ((tree));\n extern tree java_signed_type PARAMS ((tree));\n extern tree java_signed_or_unsigned_type PARAMS ((int, tree));\n+extern tree java_truthvalue_conversion PARAMS ((tree));\n extern void add_assume_compiled PARAMS ((const char *, int));\n extern tree lookup_class PARAMS ((tree));\n extern tree lookup_java_constructor PARAMS ((tree, tree));"}, {"sha": "dbd41ee03c13bcf10f393b33bdc22cd9d551c949", "filename": "gcc/java/lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=78ef5b895f933cc8a82486aec27d6e7ac7a5acae", "patch": "@@ -233,6 +233,8 @@ static int dependency_tracking = 0;\n #define LANG_HOOKS_MARK_ADDRESSABLE java_mark_addressable\n #undef LANG_HOOKS_EXPAND_EXPR\n #define LANG_HOOKS_EXPAND_EXPR java_expand_expr\n+#undef LANG_HOOKS_TRUTHVALUE_CONVERSION\n+#define LANG_HOOKS_TRUTHVALUE_CONVERSION java_truthvalue_conversion\n #undef LANG_HOOKS_DUP_LANG_SPECIFIC_DECL\n #define LANG_HOOKS_DUP_LANG_SPECIFIC_DECL java_dup_lang_specific_decl\n #undef LANG_HOOKS_DECL_PRINTABLE_NAME"}, {"sha": "3ad37f8f2f56aba96c3e67288e8d4b911d5003d0", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=78ef5b895f933cc8a82486aec27d6e7ac7a5acae", "patch": "@@ -204,6 +204,7 @@ int lhd_tree_dump_type_quals\t\t\tPARAMS ((tree));\n   LANG_HOOKS_GET_ALIAS_SET, \\\n   LANG_HOOKS_EXPAND_CONSTANT, \\\n   LANG_HOOKS_EXPAND_EXPR, \\\n+  LANG_HOOKS_TRUTHVALUE_CONVERSION, \\\n   LANG_HOOKS_INSERT_DEFAULT_ATTRIBUTES, \\\n   LANG_HOOKS_SAFE_FROM_P, \\\n   LANG_HOOKS_FINISH_INCOMPLETE_DECL, \\"}, {"sha": "2a50aa78fa70f3daf107b744ed8e0585f3707220", "filename": "gcc/langhooks.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=78ef5b895f933cc8a82486aec27d6e7ac7a5acae", "patch": "@@ -200,6 +200,19 @@ struct lang_hooks\n      Fourth argument is actually an enum expand_modifier.  */\n   rtx (*expand_expr) PARAMS ((tree, rtx, enum machine_mode, int));\n \n+  /* Prepare expr to be an argument of a TRUTH_NOT_EXPR or other logical\n+     operation.\n+\n+     This preparation consists of taking the ordinary representation\n+     of an expression expr and producing a valid tree boolean\n+     expression describing whether expr is nonzero.  We could simply\n+     always do build_binary_op (NE_EXPR, expr, integer_zero_node, 1),\n+     but we optimize comparisons, &&, ||, and !.\n+\n+     The result should be an expression of boolean type (if not an\n+     error_mark_node).  */\n+  tree (*truthvalue_conversion) PARAMS ((tree));\n+\n   /* Possibly apply default attributes to a function (represented by\n      a FUNCTION_DECL).  */\n   void (*insert_default_attributes) PARAMS ((tree));"}, {"sha": "6649d723e973b44947d5cee3addb8f2969b61ab0", "filename": "gcc/objc/objc-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fobjc%2Fobjc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fobjc%2Fobjc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-lang.c?ref=78ef5b895f933cc8a82486aec27d6e7ac7a5acae", "patch": "@@ -52,6 +52,8 @@ static void objc_post_options                   PARAMS ((void));\n #define LANG_HOOKS_EXPAND_EXPR c_expand_expr\n #undef LANG_HOOKS_MARK_ADDRESSABLE\n #define LANG_HOOKS_MARK_ADDRESSABLE c_mark_addressable\n+#undef LANG_HOOKS_TRUTHVALUE_CONVERSION\n+#define LANG_HOOKS_TRUTHVALUE_CONVERSION c_common_truthvalue_conversion\n #undef LANG_HOOKS_INSERT_DEFAULT_ATTRIBUTES\n #define LANG_HOOKS_INSERT_DEFAULT_ATTRIBUTES c_insert_default_attributes\n #undef LANG_HOOKS_FINISH_INCOMPLETE_DECL"}, {"sha": "4f0cb179547687ca2bb4971246dc712d8d7b9ae8", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=78ef5b895f933cc8a82486aec27d6e7ac7a5acae", "patch": "@@ -4119,7 +4119,7 @@ expand_decl_cleanup (decl, cleanup)\n \n \t  /* Conditionalize the cleanup.  */\n \t  cleanup = build (COND_EXPR, void_type_node,\n-\t\t\t   truthvalue_conversion (cond),\n+\t\t\t   (*lang_hooks.truthvalue_conversion) (cond),\n \t\t\t   cleanup, integer_zero_node);\n \t  cleanup = fold (cleanup);\n "}, {"sha": "d0646b8042ab2f470bba78328666dbe53129ab50", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ef5b895f933cc8a82486aec27d6e7ac7a5acae/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=78ef5b895f933cc8a82486aec27d6e7ac7a5acae", "patch": "@@ -2946,7 +2946,6 @@ extern int lang_attribute_common;\n /* In front end.  */\n \n extern void incomplete_type_error\tPARAMS ((tree, tree));\n-extern tree truthvalue_conversion\tPARAMS ((tree));\n \n /* In integrate.c */\n extern void save_for_inline\t\tPARAMS ((tree));"}]}