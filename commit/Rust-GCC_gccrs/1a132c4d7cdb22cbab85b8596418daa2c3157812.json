{"sha": "1a132c4d7cdb22cbab85b8596418daa2c3157812", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWExMzJjNGQ3Y2RiMjJjYmFiODViODU5NjQxOGRhYTJjMzE1NzgxMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-19T12:05:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-19T12:05:47Z"}, "message": "arm: Fix ICE with -fstack-protector -mpure-code [PR98998]\n\nThe vla15.C testcase ICEs with\n-mcpu=cortex-m1 -mpure-code -fstack-protector -mthumb\nas what force_const_mem returns (a SYMBOL_REF) is not a valid\nmemory address.\nPreviously the code was moving the address of the force_const_mem\ninto a register rather than the content of that MEM, so that instruction\nmust have been supported and loading from a MEM with a single REG base ought\nto be valid too.\n\n2021-02-19  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/98998\n\t* config/arm/arm.md (*stack_protect_combined_set_insn,\n\t*stack_protect_combined_test_insn): If force_const_mem result\n\tis not valid general operand, force its address into the destination\n\tregister first.\n\n\t* gcc.target/arm/pure-code/pr98998.c: New test.", "tree": {"sha": "8cb548532a88091b386d0663eb9e9c5a50e860bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cb548532a88091b386d0663eb9e9c5a50e860bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a132c4d7cdb22cbab85b8596418daa2c3157812", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a132c4d7cdb22cbab85b8596418daa2c3157812", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a132c4d7cdb22cbab85b8596418daa2c3157812", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a132c4d7cdb22cbab85b8596418daa2c3157812/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37bde2f87267908a93c07856317a28827f8284f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37bde2f87267908a93c07856317a28827f8284f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37bde2f87267908a93c07856317a28827f8284f7"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "45a471a887a314aaac5d46c9189ebf2174c33f7d", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a132c4d7cdb22cbab85b8596418daa2c3157812/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a132c4d7cdb22cbab85b8596418daa2c3157812/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=1a132c4d7cdb22cbab85b8596418daa2c3157812", "patch": "@@ -9216,6 +9216,11 @@\n       else\n \t{\n \t  rtx mem = force_const_mem (SImode, operands[1]);\n+\t  if (!general_operand (mem, SImode))\n+\t    {\n+\t      emit_move_insn (operands[2], XEXP (mem, 0));\n+\t      mem = replace_equiv_address (mem, operands[2], false);\n+\t    }\n \t  emit_move_insn (operands[2], mem);\n \t}\n     }\n@@ -9299,6 +9304,11 @@\n       else\n \t{\n \t  rtx mem = force_const_mem (SImode, operands[1]);\n+\t  if (!general_operand (mem, SImode))\n+\t    {\n+\t      emit_move_insn (operands[3], XEXP (mem, 0));\n+\t      mem = replace_equiv_address (mem, operands[3], false);\n+\t    }\n \t  emit_move_insn (operands[3], mem);\n \t}\n     }"}, {"sha": "9d7b0b24f0ea9ee32068f7800ff1448c85e8cd9b", "filename": "gcc/testsuite/gcc.target/arm/pure-code/pr98998.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a132c4d7cdb22cbab85b8596418daa2c3157812/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fpr98998.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a132c4d7cdb22cbab85b8596418daa2c3157812/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fpr98998.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fpr98998.c?ref=1a132c4d7cdb22cbab85b8596418daa2c3157812", "patch": "@@ -0,0 +1,20 @@\n+/* PR target/98998 */\n+/* { dg-do compile { target fstack_protector } } */\n+/* { dg-options \"-mpure-code -fstack-protector\" } */\n+\n+void *volatile p;\n+\n+int\n+main ()\n+{\n+  int n = 0;\n+ lab:;\n+  int x[n % 1000 + 1];\n+  x[0] = 1;\n+  x[n % 1000] = 2;\n+  p = x;\n+  n++;\n+  if (n < 1000000)\n+    goto lab;\n+  return 0;\n+}"}]}