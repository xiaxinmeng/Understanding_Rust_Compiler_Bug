{"sha": "99bd87dd981acf6e5cc654a9b39e5863ad5ee850", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTliZDg3ZGQ5ODFhY2Y2ZTVjYzY1NGE5YjM5ZTU4NjNhZDVlZTg1MA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2014-10-17T08:52:30Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-10-17T08:52:30Z"}, "message": "aspects.ads: Documentation fix, aspect Lock_Free does have a corresponding pragma.\n\n2014-10-17  Robert Dewar  <dewar@adacore.com>\n\n\t* aspects.ads: Documentation fix, aspect Lock_Free does have a\n\tcorresponding pragma.\n\t* gnat_rm.texi: Document implementation defined boolean aspects\n\tas boolean.\n\nFrom-SVN: r216378", "tree": {"sha": "76b688b924a361d0edec52dd4f3a30948ce9e538", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76b688b924a361d0edec52dd4f3a30948ce9e538"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99bd87dd981acf6e5cc654a9b39e5863ad5ee850", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99bd87dd981acf6e5cc654a9b39e5863ad5ee850", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99bd87dd981acf6e5cc654a9b39e5863ad5ee850", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99bd87dd981acf6e5cc654a9b39e5863ad5ee850/comments", "author": null, "committer": null, "parents": [{"sha": "dc06dd83660010f2ed70c6205a0876f91553a30e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc06dd83660010f2ed70c6205a0876f91553a30e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc06dd83660010f2ed70c6205a0876f91553a30e"}], "stats": {"total": 53, "additions": 29, "deletions": 24}, "files": [{"sha": "a151364dc72a0ccbf44af81f3c5f9327c31ff0ae", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99bd87dd981acf6e5cc654a9b39e5863ad5ee850/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99bd87dd981acf6e5cc654a9b39e5863ad5ee850/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=99bd87dd981acf6e5cc654a9b39e5863ad5ee850", "patch": "@@ -1,3 +1,10 @@\n+2014-10-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* aspects.ads: Documentation fix, aspect Lock_Free does have a\n+\tcorresponding pragma.\n+\t* gnat_rm.texi: Document implementation defined boolean aspects\n+\tas boolean.\n+\n 2014-10-17  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch13.adb (Add_Invariants): For a class-wide type invariant,"}, {"sha": "3410b00d2203a65e8ab1daf3b982e53c0f1bdcc8", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99bd87dd981acf6e5cc654a9b39e5863ad5ee850/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99bd87dd981acf6e5cc654a9b39e5863ad5ee850/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=99bd87dd981acf6e5cc654a9b39e5863ad5ee850", "patch": "@@ -178,6 +178,7 @@ package Aspects is\n       Aspect_Inline,\n       Aspect_Inline_Always,                 -- GNAT\n       Aspect_Interrupt_Handler,\n+      Aspect_Lock_Free,                     -- GNAT\n       Aspect_No_Return,\n       Aspect_Pack,\n       Aspect_Persistent_BSS,                -- GNAT\n@@ -194,12 +195,7 @@ package Aspects is\n       Aspect_Unreferenced,                  -- GNAT\n       Aspect_Unreferenced_Objects,          -- GNAT\n       Aspect_Volatile,\n-      Aspect_Volatile_Components,\n-\n-      --  Aspects that have a static boolean value but don't correspond to\n-      --  pragmas with a single argument that it is the entity in question.\n-\n-      Aspect_Lock_Free);                    -- GNAT\n+      Aspect_Volatile_Components);\n \n    subtype Aspect_Id_Exclude_No_Aspect is\n      Aspect_Id range Aspect_Id'Succ (No_Aspect) .. Aspect_Id'Last;"}, {"sha": "c4ae3ee8a746b8f126c283c19b9669694a24bcbc", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99bd87dd981acf6e5cc654a9b39e5863ad5ee850/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99bd87dd981acf6e5cc654a9b39e5863ad5ee850/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=99bd87dd981acf6e5cc654a9b39e5863ad5ee850", "patch": "@@ -8077,8 +8077,8 @@ pragma Shared (R);\n \n @noindent\n In the documentation below, such cases are simply marked\n-as being equivalent to the corresponding pragma or attribute definition\n-clause.\n+as being boolean aspects equivalent to the corresponding pragma\n+or attribute definition clause.\n \n @menu\n * Aspect Abstract_State::\n@@ -8158,13 +8158,13 @@ Equivalent to @code{pragma Annotate (ID, ID @{, ARG@}, Entity => Name);}\n @unnumberedsec Aspect Async_Readers\n @findex Async_Readers\n @noindent\n-This aspect is equivalent to pragma @code{Async_Readers}.\n+This boolean aspect is equivalent to pragma @code{Async_Readers}.\n \n @node Aspect Async_Writers\n @unnumberedsec Aspect Async_Writers\n @findex Async_Writers\n @noindent\n-This aspect is equivalent to pragma @code{Async_Writers}.\n+This boolean aspect is equivalent to pragma @code{Async_Writers}.\n \n @node Aspect Contract_Cases\n @unnumberedsec Aspect Contract_Cases\n@@ -8289,7 +8289,7 @@ This aspect is equivalent to pragma @code{Effective_Writes}.\n @unnumberedsec Aspect Favor_Top_Level\n @findex Favor_Top_Level\n @noindent\n-This aspect is equivalent to pragma @code{Favor_Top_Level}.\n+This boolean aspect is equivalent to pragma @code{Favor_Top_Level}.\n \n @node Aspect Global\n @unnumberedsec Aspect Global\n@@ -8313,7 +8313,7 @@ This aspect is equivalent to pragma @code{Initializes}.\n @unnumberedsec Aspect Inline_Always\n @findex Inline_Always\n @noindent\n-This aspect is equivalent to pragma @code{Inline_Always}.\n+This boolean aspect is equivalent to pragma @code{Inline_Always}.\n \n @node Aspect Invariant\n @unnumberedsec Aspect Invariant\n@@ -8370,7 +8370,7 @@ This aspect is equivalent to an @code{Linker_Section} pragma.\n @unnumberedsec Aspect Lock_Free\n @findex Lock_Free\n @noindent\n-This aspect is equivalent to pragma @code{Lock_Free}.\n+This boolean aspect is equivalent to pragma @code{Lock_Free}.\n \n @node Aspect No_Elaboration_Code_All\n @unnumberedsec Aspect No_Elaboration_Code_All\n@@ -8404,7 +8404,7 @@ This aspect is equivalent to pragma @code{Part_Of}.\n @unnumberedsec Aspect Persistent_BSS\n @findex Persistent_BSS\n @noindent\n-This aspect is equivalent to pragma @code{Persistent_BSS}.\n+This boolean aspect is equivalent to pragma @code{Persistent_BSS}.\n \n @node Aspect Predicate\n @unnumberedsec Aspect Predicate\n@@ -8421,7 +8421,7 @@ expression. It is also separately controllable using pragma\n @unnumberedsec Aspect Pure_Function\n @findex Pure_Function\n @noindent\n-This aspect is equivalent to pragma @code{Pure_Function}.\n+This boolean aspect is equivalent to pragma @code{Pure_Function}.\n \n @node Aspect Refined_Depends\n @unnumberedsec Aspect Refined_Depends\n@@ -8464,8 +8464,8 @@ attribute definition clause.\n @unnumberedsec Aspect Shared\n @findex Shared\n @noindent\n-This aspect is equivalent to pragma @code{Shared}, and is thus a synonym\n-for aspect @code{Atomic}.\n+This booleanaspect is equivalent to pragma @code{Shared},\n+and is thus a synonym for aspect @code{Atomic}.\n \n @node Aspect Simple_Storage_Pool\n @unnumberedsec Aspect Simple_Storage_Pool\n@@ -8478,7 +8478,7 @@ attribute definition clause.\n @unnumberedsec Aspect Simple_Storage_Pool_Type\n @findex Simple_Storage_Pool_Type\n @noindent\n-This aspect is equivalent to pragma @code{Simple_Storage_Pool_Type}.\n+This boolean aspect is equivalent to pragma @code{Simple_Storage_Pool_Type}.\n \n @node Aspect SPARK_Mode\n @unnumberedsec Aspect SPARK_Mode\n@@ -8492,7 +8492,7 @@ of a subprogram or package.\n @unnumberedsec Aspect Suppress_Debug_Info\n @findex Suppress_Debug_Info\n @noindent\n-This aspect is equivalent to pragma @code{Suppress_Debug_Info}.\n+This boolean aspect is equivalent to pragma @code{Suppress_Debug_Info}.\n \n @node Aspect Test_Case\n @unnumberedsec Aspect Test_Case\n@@ -8504,13 +8504,13 @@ This aspect is equivalent to pragma @code{Test_Case}.\n @unnumberedsec Aspect Thread_Local_Storage\n @findex Thread_Local_Storage\n @noindent\n-This aspect is equivalent to pragma @code{Thread_Local_Storage}.\n+This boolean aspect is equivalent to pragma @code{Thread_Local_Storage}.\n \n @node Aspect Universal_Aliasing\n @unnumberedsec Aspect Universal_Aliasing\n @findex Universal_Aliasing\n @noindent\n-This aspect is equivalent to pragma @code{Universal_Aliasing}.\n+This boolean aspect is equivalent to pragma @code{Universal_Aliasing}.\n \n @node Aspect Universal_Data\n @unnumberedsec Aspect Universal_Data\n@@ -8522,19 +8522,21 @@ This aspect is equivalent to pragma @code{Universal_Data}.\n @unnumberedsec Aspect Unmodified\n @findex Unmodified\n @noindent\n-This aspect is equivalent to pragma @code{Unmodified}.\n+This boolean aspect is equivalent to pragma @code{Unmodified}.\n \n @node Aspect Unreferenced\n @unnumberedsec Aspect Unreferenced\n @findex Unreferenced\n @noindent\n-This aspect is equivalent to pragma @code{Unreferenced}.\n+This boolean aspect is equivalent to pragma @code{Unreferenced}. Note that\n+in the case of formal parameters, it is not permitted to have aspects for\n+a formal parameter, so in this case the pragma form must be used.\n \n @node Aspect Unreferenced_Objects\n @unnumberedsec Aspect Unreferenced_Objects\n @findex Unreferenced_Objects\n @noindent\n-This aspect is equivalent to pragma @code{Unreferenced_Objects}.\n+This boolean aspect is equivalent to pragma @code{Unreferenced_Objects}.\n \n @node Aspect Value_Size\n @unnumberedsec Aspect Value_Size"}]}