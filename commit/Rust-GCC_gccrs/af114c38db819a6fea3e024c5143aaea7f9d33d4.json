{"sha": "af114c38db819a6fea3e024c5143aaea7f9d33d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYxMTRjMzhkYjgxOWE2ZmVhM2UwMjRjNTE0M2FhZWE3ZjlkMzNkNA==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2020-05-19T22:55:00Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2020-05-22T21:22:30Z"}, "message": "Suggest including <stdint.h> or <cstdint> for [u]int[8|16|32|64]_t\n\nPlus [u]intptr_t and associated constants.\n\nRefactor the bool, true, false, <stdbool.h> code so it fits into the\nnew table based design.\n\ngcc/c-family/ChangeLog:\n\n\t* known-headers.cc (get_stdlib_header_for_name): Add a new\n\tstdlib_hint array for stdbool and stdint.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/spellcheck-stdint.c: New test.\n\t* g++.dg/spellcheck-stdint.C: Likewise.", "tree": {"sha": "8e3a2c9a3cdc3758bb4c6e29702d42c62dbdffb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e3a2c9a3cdc3758bb4c6e29702d42c62dbdffb0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af114c38db819a6fea3e024c5143aaea7f9d33d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af114c38db819a6fea3e024c5143aaea7f9d33d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af114c38db819a6fea3e024c5143aaea7f9d33d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af114c38db819a6fea3e024c5143aaea7f9d33d4/comments", "author": null, "committer": null, "parents": [{"sha": "45c50b6a63a120d3eb6957883c4c7b968c84d010", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45c50b6a63a120d3eb6957883c4c7b968c84d010", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45c50b6a63a120d3eb6957883c4c7b968c84d010"}], "stats": {"total": 182, "additions": 176, "deletions": 6}, "files": [{"sha": "0ec2b9662a8ef9868f39d73335c8f415818c823c", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af114c38db819a6fea3e024c5143aaea7f9d33d4/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af114c38db819a6fea3e024c5143aaea7f9d33d4/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=af114c38db819a6fea3e024c5143aaea7f9d33d4", "patch": "@@ -1,3 +1,8 @@\n+2020-05-22  Mark Wielaard  <mark@klomp.org>\n+\n+\t* known-headers.cc (get_stdlib_header_for_name): Add a new\n+\tstdlib_hint array for stdbool and stdint.\n+\n 2020-05-22  Mark Wielaard  <mark@klomp.org>\n \n \t* known-headers.cc (get_stdlib_header_for_name): Return"}, {"sha": "1e2bf49c439a449fcb3e2fc092030c8c61af955d", "filename": "gcc/c-family/known-headers.cc", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af114c38db819a6fea3e024c5143aaea7f9d33d4/gcc%2Fc-family%2Fknown-headers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af114c38db819a6fea3e024c5143aaea7f9d33d4/gcc%2Fc-family%2Fknown-headers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fknown-headers.cc?ref=af114c38db819a6fea3e024c5143aaea7f9d33d4", "patch": "@@ -159,12 +159,42 @@ get_stdlib_header_for_name (const char *name, enum stdlib lib)\n     if (strcmp (name, hints[i].name) == 0)\n       return hints[i].header[lib];\n \n-  /* Only for C99 and higher.  */\n-  if (lib == STDLIB_C && flag_isoc99)\n-    if (strcmp (name, \"bool\") == 0\n-\t|| strcmp (name, \"true\") == 0\n-\t|| strcmp (name, \"false\") == 0)\n-      return \"<stdbool.h>\";\n+  static const stdlib_hint c99_cxx11_hints[] = {\n+    /* <stdbool.h>.  Defined natively in C++.  */\n+    {\"bool\", {\"<stdbool.h>\", NULL} },\n+    {\"true\", {\"<stdbool.h>\", NULL} },\n+    {\"false\", {\"<stdbool.h>\", NULL} },\n+\n+    /* <stdint.h> and <cstdint>.  */\n+    {\"int8_t\", {\"<stdint.h>\", \"<cstdint>\"} },\n+    {\"uint8_t\", {\"<stdint.h>\", \"<cstdint>\"} },\n+    {\"int16_t\", {\"<stdint.h>\", \"<cstdint>\"} },\n+    {\"uint16_t\", {\"<stdint.h>\", \"<cstdint>\"} },\n+    {\"int32_t\", {\"<stdint.h>\", \"<cstdint>\"} },\n+    {\"uint32_t\", {\"<stdint.h>\", \"<cstdint>\"} },\n+    {\"int64_t\", {\"<stdint.h>\", \"<cstdint>\"} },\n+    {\"uint64_t\", {\"<stdint.h>\", \"<cstdint>\"} },\n+    {\"intptr_t\", {\"<stdint.h>\", \"<cstdint>\"} },\n+    {\"uintptr_t\", {\"<stdint.h>\", \"<cstdint>\"} },\n+    {\"INT8_MAX\", {\"<stdint.h>\", \"<cstdint>\"} },\n+    {\"INT16_MAX\", {\"<stdint.h>\", \"<cstdint>\"} },\n+    {\"INT32_MAX\", {\"<stdint.h>\", \"<cstdint>\"} },\n+    {\"INT64_MAX\", {\"<stdint.h>\", \"<cstdint>\"} },\n+    {\"UINT8_MAX\", {\"<stdint.h>\", \"<cstdint>\"} },\n+    {\"UINT16_MAX\", {\"<stdint.h>\", \"<cstdint>\"} },\n+    {\"UINT32_MAX\", {\"<stdint.h>\", \"<cstdint>\"} },\n+    {\"UINT64_MAX\", {\"<stdint.h>\", \"<cstdint>\"} },\n+    {\"INTPTR_MAX\", {\"<stdint.h>\", \"<cstdint>\"} },\n+    {\"UINTPTR_MAX\", {\"<stdint.h>\", \"<cstdint>\"} }\n+  };\n+\n+  const size_t num_c99_cxx11_hints = sizeof (c99_cxx11_hints)\n+\t\t\t\t\t     / sizeof (c99_cxx11_hints[0]);\n+  if ((lib == STDLIB_C && flag_isoc99)\n+      || (lib == STDLIB_CPLUSPLUS && cxx_dialect >= cxx11 ))\n+    for (size_t i = 0; i < num_c99_cxx11_hints; i++)\n+      if (strcmp (name, c99_cxx11_hints[i].name) == 0)\n+\treturn c99_cxx11_hints[i].header[lib];\n \n   return NULL;\n }"}, {"sha": "9711a27e29c09d0fb52fb873b10546b739a6fc2b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af114c38db819a6fea3e024c5143aaea7f9d33d4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af114c38db819a6fea3e024c5143aaea7f9d33d4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=af114c38db819a6fea3e024c5143aaea7f9d33d4", "patch": "@@ -1,3 +1,8 @@\n+2020-05-22  Mark Wielaard  <mark@klomp.org>\n+\n+\t* gcc.dg/spellcheck-stdint.c: New test.\n+\t* g++.dg/spellcheck-stdint.C: Likewise.\n+\n 2020-05-22  Mark Wielaard  <mark@klomp.org>\n \n \t* gcc.dg/spellcheck-stdbool.c: New test."}, {"sha": "b9ce3b7aed8148c6b0c222eeba6eb943b917260a", "filename": "gcc/testsuite/g++.dg/spellcheck-stdint.C", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af114c38db819a6fea3e024c5143aaea7f9d33d4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-stdint.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af114c38db819a6fea3e024c5143aaea7f9d33d4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-stdint.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-stdint.C?ref=af114c38db819a6fea3e024c5143aaea7f9d33d4", "patch": "@@ -0,0 +1,68 @@\n+/* { dg-options \"-std=c++11\" } */\n+/* Missing <cstdint>.  */\n+\n+char c = INT8_MAX; // { dg-error \"'INT8_MAX' was not declared\" }\n+// { dg-message \"'INT8_MAX' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'?\" \"\" { target *-*-* } .-1 }\n+\n+short s = INT16_MAX; // { dg-error \"'INT16_MAX' was not declared\" }\n+// { dg-message \"'INT16_MAX' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'?\" \"\" { target *-*-* } .-1 }\n+\n+int i = INT32_MAX; // { dg-error \"'INT32_MAX' was not declared\" }\n+// { dg-message \"'INT32_MAX' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'?\" \"\" { target *-*-* } .-1 }\n+\n+long l = INT64_MAX; // { dg-error \"'INT64_MAX' was not declared\" }\n+// { dg-message \"'INT64_MAX' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'?\" \"\" { target *-*-* } .-1 }\n+\n+intptr_t test_intptr (void) // { dg-error \"'intptr_t' does not name a type\" }\n+// { dg-message \"'intptr_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'?\" \"\" { target *-*-* } .-1 }\n+{\n+  return 0;\n+}\n+\n+int test_intptr_max (void)\n+{\n+  return (int) INTPTR_MAX; // { dg-error \"'INTPTR_MAX' was not declared\" }\n+// { dg-message \"'INTPTR_MAX' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'?\" \"\" { target *-*-* } .-1 }\n+}\n+\n+uintptr_t test_uintptr (void) // { dg-error \"'uintptr_t' does not name a type\" }\n+// { dg-message \"'uintptr_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'?\" \"\" { target *-*-* } .-1 }\n+{\n+  return 0;\n+}\n+\n+unsigned int test_uintptr_max (void)\n+{\n+  return (unsigned int) UINTPTR_MAX; // { dg-error \"'UINTPTR_MAX' was not declared\" }\n+// { dg-message \"'UINTPTR_MAX' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'?\" \"\" { target *-*-* } .-1 }\n+}\n+\n+int8_t i8; // { dg-error \"'int8_t' does not name a type\" }\n+// { dg-message \"'int8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'?\" \"\" { target *-*-* } .-1 }\n+int16_t i16; // { dg-error \"'int16_t' does not name a type\" }\n+// { dg-message \"'int16_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'?\" \"\" { target *-*-* } .-1 }\n+int32_t i32; // { dg-error \"'int32_t' does not name a type\" }\n+// { dg-message \"'int32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'?\" \"\" { target *-*-* } .-1 }\n+int64_t i64; // { dg-error \"'int64_t' does not name a type\" }\n+// { dg-message \"'int64_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'?\" \"\" { target *-*-* } .-1 }\n+\n+void test_uint_t (void)\n+{\n+  char bu8[(unsigned int)UINT8_MAX]; // { dg-error \"'UINT8_MAX' was not declared\" }\n+  // { dg-message \"'UINT8_MAX' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'?\" \"\" { target *-*-* } .-1 }\n+  char bu16[(unsigned int)UINT16_MAX]; // { dg-error \"'UINT16_MAX' was not declared\" }\n+  // { dg-message \"'UINT16_MAX' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'?\" \"\" { target *-*-* } .-1 }\n+  char bu32[(unsigned int)UINT32_MAX]; // { dg-error \"'UINT32_MAX' was not declared\" }\n+  // { dg-message \"'UINT32_MAX' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'?\" \"\" { target *-*-* } .-1 }\n+  char bu64[(unsigned int)UINT64_MAX]; // { dg-error \"'UINT64_MAX' was not declared\" }\n+  // { dg-message \"'UINT64_MAX' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'?\" \"\" { target *-*-* } .-1 }\n+\n+  auto ui8 = (uint8_t) 8; // { dg-error \"'uint8_t' was not declared\" }\n+  // { dg-message \"'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'?\" \"\" { target *-*-* } .-1 }\n+  auto ui16 = (uint16_t) 16; // { dg-error \"'uint16_t' was not declared\" }\n+  // { dg-message \"'uint16_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'?\" \"\" { target *-*-* } .-1 }\n+  auto ui32 = (uint32_t) 32; // { dg-error \"'uint32_t' was not declared\" }\n+  // { dg-message \"'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'?\" \"\" { target *-*-* } .-1 }\n+  auto ui64 = (uint64_t) 64; // { dg-error \"'uint64_t' was not declared\" }\n+  // { dg-message \"'uint64_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'?\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "852c86954b6acaa3c76781e2bbb994906da40498", "filename": "gcc/testsuite/gcc.dg/spellcheck-stdint.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af114c38db819a6fea3e024c5143aaea7f9d33d4/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-stdint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af114c38db819a6fea3e024c5143aaea7f9d33d4/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-stdint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-stdint.c?ref=af114c38db819a6fea3e024c5143aaea7f9d33d4", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-options \"-std=gnu99\" } */\n+/* Missing <stdint.h>.  */\n+\n+char c = INT8_MAX; // { dg-error \"'INT8_MAX' undeclared\" }\n+// { dg-message \"'INT8_MAX' is defined in header '<stdint.h>'; did you forget to '#include <stdint.h>'?\" \"\" { target *-*-* } .-1 }\n+\n+short s = INT16_MAX; // { dg-error \"'INT16_MAX' undeclared\" }\n+// { dg-message \"'INT16_MAX' is defined in header '<stdint.h>'; did you forget to '#include <stdint.h>'?\" \"\" { target *-*-* } .-1 }\n+\n+int i = INT32_MAX; // { dg-error \"'INT32_MAX' undeclared\" }\n+// { dg-message \"'INT32_MAX' is defined in header '<stdint.h>'; did you forget to '#include <stdint.h>'?\" \"\" { target *-*-* } .-1 }\n+\n+long l = INT64_MAX; // { dg-error \"'INT64_MAX' undeclared\" }\n+// { dg-message \"'INT64_MAX' is defined in header '<stdint.h>'; did you forget to '#include <stdint.h>'?\" \"\" { target *-*-* } .-1 }\n+\n+intptr_t test_intptr (void) // { dg-error \"unknown type name 'intptr_t'\" }\n+// { dg-message \"'intptr_t' is defined in header '<stdint.h>'; did you forget to '#include <stdint.h>'?\" \"\" { target *-*-* } .-1 }\n+{\n+  return INTPTR_MAX; // { dg-error \"'INTPTR_MAX' undeclared\" }\n+// { dg-message \"'INTPTR_MAX' is defined in header '<stdint.h>'; did you forget to '#include <stdint.h>'?\" \"\" { target *-*-* } .-1 }\n+}\n+\n+uintptr_t test_uintptr (void) // { dg-error \"unknown type name 'uintptr_t'\" }\n+// { dg-message \"'uintptr_t' is defined in header '<stdint.h>'; did you forget to '#include <stdint.h>'?\" \"\" { target *-*-* } .-1 }\n+{\n+  return UINTPTR_MAX; // { dg-error \"'UINTPTR_MAX' undeclared\" }\n+// { dg-message \"'UINTPTR_MAX' is defined in header '<stdint.h>'; did you forget to '#include <stdint.h>'?\" \"\" { target *-*-* } .-1 }\n+}\n+\n+int8_t i8; // { dg-error \"unknown type name 'int8_t'\" }\n+// { dg-message \"'int8_t' is defined in header '<stdint.h>'; did you forget to '#include <stdint.h>'?\" \"\" { target *-*-* } .-1 }\n+int16_t i16; // { dg-error \"unknown type name 'int16_t'\" }\n+// { dg-message \"'int16_t' is defined in header '<stdint.h>'; did you forget to '#include <stdint.h>'?\" \"\" { target *-*-* } .-1 }\n+int32_t i32; // { dg-error \"unknown type name 'int32_t'\" }\n+// { dg-message \"'int32_t' is defined in header '<stdint.h>'; did you forget to '#include <stdint.h>'?\" \"\" { target *-*-* } .-1 }\n+int64_t i64; // { dg-error \"unknown type name 'int64_t'\" }\n+// { dg-message \"'int64_t' is defined in header '<stdint.h>'; did you forget to '#include <stdint.h>'?\" \"\" { target *-*-* } .-1 }\n+\n+void test_uint_t (void)\n+{\n+  char bu8[(unsigned int)UINT8_MAX]; // { dg-error \"'UINT8_MAX' undeclared\" }\n+  // { dg-message \"'UINT8_MAX' is defined in header '<stdint.h>'; did you forget to '#include <stdint.h>'?\" \"\" { target *-*-* } .-1 }\n+  char bu16[(unsigned int)UINT16_MAX]; // { dg-error \"'UINT16_MAX' undeclared\" }\n+  // { dg-message \"'UINT16_MAX' is defined in header '<stdint.h>'; did you forget to '#include <stdint.h>'?\" \"\" { target *-*-* } .-1 }\n+  char bu32[(unsigned int)UINT32_MAX]; // { dg-error \"'UINT32_MAX' undeclared\" }\n+  // { dg-message \"'UINT32_MAX' is defined in header '<stdint.h>'; did you forget to '#include <stdint.h>'?\" \"\" { target *-*-* } .-1 }\n+  char bu64[(unsigned int)UINT64_MAX]; // { dg-error \"'UINT64_MAX' undeclared\" }\n+  // { dg-message \"'UINT64_MAX' is defined in header '<stdint.h>'; did you forget to '#include <stdint.h>'?\" \"\" { target *-*-* } .-1 }\n+\n+  char ui8 = (uint8_t) 8; // { dg-error \"'uint8_t' undeclared\" }\n+  // { dg-error \"expected\" \"\" { target *-*-* } .-1 }\n+  // { dg-message \"'uint8_t' is defined in header '<stdint.h>'; did you forget to '#include <stdint.h>'?\" \"\" { target *-*-* } .-2 }\n+  short ui16 = (uint16_t) 16; // { dg-error \"'uint16_t' undeclared\" }\n+  // { dg-error \"expected\" \"\" { target *-*-* } .-1 }\n+  // { dg-message \"'uint16_t' is defined in header '<stdint.h>'; did you forget to '#include <stdint.h>'?\" \"\" { target *-*-* } .-2 }\n+  int ui32 = (uint32_t) 32; // { dg-error \"'uint32_t' undeclared\" }\n+  // { dg-error \"expected\" \"\" { target *-*-* } .-1 }\n+  // { dg-message \"'uint32_t' is defined in header '<stdint.h>'; did you forget to '#include <stdint.h>'?\" \"\" { target *-*-* } .-2 }\n+  long ui64 = (uint64_t) 64; // { dg-error \"'uint64_t' undeclared\" }\n+  // { dg-error \"expected\" \"\" { target *-*-* } .-1 }\n+  // { dg-message \"'uint64_t' is defined in header '<stdint.h>'; did you forget to '#include <stdint.h>'?\" \"\" { target *-*-* } .-2 }\n+}"}]}