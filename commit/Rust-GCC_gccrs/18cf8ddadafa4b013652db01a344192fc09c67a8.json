{"sha": "18cf8ddadafa4b013652db01a344192fc09c67a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThjZjhkZGFkYWZhNGIwMTM2NTJkYjAxYTM0NDE5MmZjMDljNjdhOA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2002-01-08T23:11:53Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-01-08T23:11:53Z"}, "message": "h8300.c (get_shift_alg): Fix 15-bit LSHIFTRT on H8/300H and H8/S.\n\n\t* config/h8300/h8300.c (get_shift_alg): Fix 15-bit LSHIFTRT on\n\tH8/300H and H8/S.\n\nFrom-SVN: r48666", "tree": {"sha": "a53aa43181239823f1ce9efc48865e98031935e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a53aa43181239823f1ce9efc48865e98031935e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18cf8ddadafa4b013652db01a344192fc09c67a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18cf8ddadafa4b013652db01a344192fc09c67a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18cf8ddadafa4b013652db01a344192fc09c67a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18cf8ddadafa4b013652db01a344192fc09c67a8/comments", "author": null, "committer": null, "parents": [{"sha": "16c484c7d50937a4a50b98244817ae6d96a9f55a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16c484c7d50937a4a50b98244817ae6d96a9f55a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16c484c7d50937a4a50b98244817ae6d96a9f55a"}], "stats": {"total": 195, "additions": 194, "deletions": 1}, "files": [{"sha": "4809963c95c4bb886f19d209575e1eb7cbf24e65", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18cf8ddadafa4b013652db01a344192fc09c67a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18cf8ddadafa4b013652db01a344192fc09c67a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=18cf8ddadafa4b013652db01a344192fc09c67a8", "patch": "@@ -1,3 +1,8 @@\n+2002-01-08  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* config/h8300/h8300.c (get_shift_alg): Fix 15-bit LSHIFTRT on\n+\tH8/300H and H8/S.\n+\n 2002-01-08  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* doc/tm.texi (EASY_DIV_EXPR, IMPLICIT_FIX_EXPR,"}, {"sha": "e7808111c10542bea9d4d5f7525da3dcfbcdbc3a", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18cf8ddadafa4b013652db01a344192fc09c67a8/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18cf8ddadafa4b013652db01a344192fc09c67a8/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=18cf8ddadafa4b013652db01a344192fc09c67a8", "patch": "@@ -2517,7 +2517,7 @@ get_shift_alg (shift_type, shift_mode, count, info)\n \t      info->special = \"shlr.w\\t%e0\\n\\tmov.w\\t%f0,%e0\\n\\txor.w\\t%f0,%f0\\n\\trotxr.l\\t%S0\";\n \t      goto end;\n \t    case SHIFT_LSHIFTRT:\n-\t      info->special = \"shll.w\\t%e0\\n\\tmov.w\\t%e0,%f0\\n\\txor.w\\t%e0,%e0\\n\\trotxl.l\\t%S0\";\n+\t      info->special = \"shll.w\\t%f0\\n\\tmov.w\\t%e0,%f0\\n\\txor.w\\t%e0,%e0\\n\\trotxl.l\\t%S0\";\n \t      goto end;\n \t    case SHIFT_ASHIFTRT:\n \t      abort ();"}, {"sha": "443bfa0f7caedd6891d94176f85126feae314a61", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18cf8ddadafa4b013652db01a344192fc09c67a8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18cf8ddadafa4b013652db01a344192fc09c67a8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=18cf8ddadafa4b013652db01a344192fc09c67a8", "patch": "@@ -1,3 +1,7 @@\n+2002-01-08  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* gcc.c-torture/execute/20020108-1.c: New test.\n+\n 2002-01-08  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/20020108-1.c: New test."}, {"sha": "a6bdffc2ef7fcf12077517ac676c5a1beb68e2e6", "filename": "gcc/testsuite/gcc.c-torture/execute/20020108-1.c", "status": "added", "additions": 184, "deletions": 0, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18cf8ddadafa4b013652db01a344192fc09c67a8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020108-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18cf8ddadafa4b013652db01a344192fc09c67a8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020108-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020108-1.c?ref=18cf8ddadafa4b013652db01a344192fc09c67a8", "patch": "@@ -0,0 +1,184 @@\n+/* This file tests shifts in QImode, HImode, and SImode.  */\n+\n+#define CAT(A, B) A ## B\n+\n+/* Define 8-bit shifts.  */\n+\n+#define REPEAT_8\t\t\t\t\\\n+REPEAT_FN ( 0)\t\t\t\t\t\\\n+REPEAT_FN ( 1)\t\t\t\t\t\\\n+REPEAT_FN ( 2)\t\t\t\t\t\\\n+REPEAT_FN ( 3)\t\t\t\t\t\\\n+REPEAT_FN ( 4)\t\t\t\t\t\\\n+REPEAT_FN ( 5)\t\t\t\t\t\\\n+REPEAT_FN ( 6)\t\t\t\t\t\\\n+REPEAT_FN ( 7)\n+\n+typedef unsigned char uchar;\n+typedef signed char schar;\n+\n+#define REPEAT_FN(COUNT)\t\t\t\t\t\\\n+uchar CAT (ashift_qi_, COUNT) (uchar n) { return n << COUNT; }\n+REPEAT_8\n+#undef REPEAT_FN\n+\n+#define REPEAT_FN(COUNT)\t\t\t\t\t\t\\\n+uchar CAT (lshiftrt_qi_, COUNT) (uchar n) { return n >> COUNT; }\n+REPEAT_8\n+#undef REPEAT_FN\n+\n+#define REPEAT_FN(COUNT)\t\t\t\t\t\t\\\n+schar CAT (ashiftrt_qi_, COUNT) (schar n) { return n >> COUNT; }\n+REPEAT_8\n+#undef REPEAT_FN\n+\n+/* Define 16-bit shifts.  */\n+\n+#define REPEAT_16\t\t\t\t\\\n+REPEAT_8\t\t\t\t\t\\\n+REPEAT_FN ( 8)\t\t\t\t\t\\\n+REPEAT_FN ( 9)\t\t\t\t\t\\\n+REPEAT_FN (10)\t\t\t\t\t\\\n+REPEAT_FN (11)\t\t\t\t\t\\\n+REPEAT_FN (12)\t\t\t\t\t\\\n+REPEAT_FN (13)\t\t\t\t\t\\\n+REPEAT_FN (14)\t\t\t\t\t\\\n+REPEAT_FN (15)\n+\n+typedef unsigned short ushort;\n+typedef signed short sshort;\n+\n+#define REPEAT_FN(COUNT)\t\t\t\t\t\t\\\n+ushort CAT (ashift_hi_, COUNT) (ushort n) { return n << COUNT; }\n+REPEAT_16\n+#undef REPEAT_FN\n+\n+#define REPEAT_FN(COUNT)\t\t\t\t\t\t\\\n+ushort CAT (lshiftrt_hi_, COUNT) (ushort n) { return n >> COUNT; }\n+REPEAT_16\n+#undef REPEAT_FN\n+\n+#define REPEAT_FN(COUNT)\t\t\t\t\t\t\\\n+sshort CAT (ashiftrt_hi_, COUNT) (sshort n) { return n >> COUNT; }\n+REPEAT_16\n+#undef REPEAT_FN\n+\n+/* Define 32-bit shifts.  */\n+\n+#define REPEAT_32\t\t\t\t\\\n+REPEAT_16\t\t\t\t\t\\\n+REPEAT_FN (16)\t\t\t\t\t\\\n+REPEAT_FN (17)\t\t\t\t\t\\\n+REPEAT_FN (18)\t\t\t\t\t\\\n+REPEAT_FN (19)\t\t\t\t\t\\\n+REPEAT_FN (20)\t\t\t\t\t\\\n+REPEAT_FN (21)\t\t\t\t\t\\\n+REPEAT_FN (22)\t\t\t\t\t\\\n+REPEAT_FN (23)\t\t\t\t\t\\\n+REPEAT_FN (24)\t\t\t\t\t\\\n+REPEAT_FN (25)\t\t\t\t\t\\\n+REPEAT_FN (26)\t\t\t\t\t\\\n+REPEAT_FN (27)\t\t\t\t\t\\\n+REPEAT_FN (28)\t\t\t\t\t\\\n+REPEAT_FN (29)\t\t\t\t\t\\\n+REPEAT_FN (30)\t\t\t\t\t\\\n+REPEAT_FN (31)\n+\n+typedef unsigned long ulong;\n+typedef signed long slong;\n+\n+#define REPEAT_FN(COUNT)\t\t\t\t\t\\\n+ulong CAT (ashift_si_, COUNT) (ulong n) { return n << COUNT; }\n+REPEAT_32\n+#undef REPEAT_FN\n+\n+#define REPEAT_FN(COUNT)\t\t\t\t\t\t\\\n+ulong CAT (lshiftrt_si_, COUNT) (ulong n) { return n >> COUNT; }\n+REPEAT_32\n+#undef REPEAT_FN\n+\n+#define REPEAT_FN(COUNT)\t\t\t\t\t\t\\\n+slong CAT (ashiftrt_si_, COUNT) (slong n) { return n >> COUNT; }\n+REPEAT_32\n+#undef REPEAT_FN\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+main ()\n+{\n+  /* Test 8-bit shifts.  */\n+\n+#define REPEAT_FN(COUNT)\t\t\t\\\n+  if (CAT (ashift_qi_, COUNT) (0xff)\t\t\\\n+      != (uchar) (0xff << COUNT)) abort ();\n+  REPEAT_8;\n+#undef REPEAT_FN\n+\n+#define REPEAT_FN(COUNT)\t\t\t\\\n+  if (CAT (lshiftrt_qi_, COUNT) (0xff)\t\\\n+      != (uchar) (0xff >> COUNT)) abort ();\n+  REPEAT_8;\n+#undef REPEAT_FN\n+\n+#define REPEAT_FN(COUNT)\t\t\t\t\\\n+  if (CAT (ashiftrt_qi_, COUNT) (-1) != -1) abort ();\n+  REPEAT_8;\n+#undef REPEAT_FN\n+\n+#define REPEAT_FN(COUNT)\t\t\t\t\\\n+  if (CAT (ashiftrt_qi_, COUNT) (0) != 0) abort ();\n+  REPEAT_8;\n+#undef REPEAT_FN\n+\n+  /* Test 16-bit shifts.  */\n+\n+#define REPEAT_FN(COUNT)\t\t\t\\\n+  if (CAT (ashift_hi_, COUNT) (0xffff)\t\t\\\n+      != (ushort) (0xffff << COUNT)) abort ();\n+  REPEAT_16;\n+#undef REPEAT_FN\n+\n+#define REPEAT_FN(COUNT)\t\t\t\\\n+  if (CAT (lshiftrt_hi_, COUNT) (0xffff)\t\\\n+      != (ushort) (0xffff >> COUNT)) abort ();\n+  REPEAT_16;\n+#undef REPEAT_FN\n+\n+#define REPEAT_FN(COUNT)\t\t\t\t\\\n+  if (CAT (ashiftrt_hi_, COUNT) (-1) != -1) abort ();\n+  REPEAT_16;\n+#undef REPEAT_FN\n+\n+#define REPEAT_FN(COUNT)\t\t\t\t\\\n+  if (CAT (ashiftrt_hi_, COUNT) (0) != 0) abort ();\n+  REPEAT_16;\n+#undef REPEAT_FN\n+\n+  /* Test 32-bit shifts.  */\n+\n+#define REPEAT_FN(COUNT)\t\t\t\t\\\n+  if (CAT (ashift_si_, COUNT) (0xffffffff)\t\t\\\n+      != (ulong) (0xffffffff << COUNT)) abort ();\n+  REPEAT_32;\n+#undef REPEAT_FN\n+\n+#define REPEAT_FN(COUNT)\t\t\t\t\\\n+  if (CAT (lshiftrt_si_, COUNT) (0xffffffff)\t\t\\\n+      != (ulong) (0xffffffff >> COUNT)) abort ();\n+  REPEAT_32;\n+#undef REPEAT_FN\n+\n+#define REPEAT_FN(COUNT)\t\t\t\t\\\n+  if (CAT (ashiftrt_si_, COUNT) (-1) != -1) abort ();\n+  REPEAT_32;\n+#undef REPEAT_FN\n+\n+#define REPEAT_FN(COUNT)\t\t\t\t\\\n+  if (CAT (ashiftrt_si_, COUNT) (0) != 0) abort ();\n+  REPEAT_32;\n+#undef REPEAT_FN\n+\n+  exit (0);\n+}"}]}