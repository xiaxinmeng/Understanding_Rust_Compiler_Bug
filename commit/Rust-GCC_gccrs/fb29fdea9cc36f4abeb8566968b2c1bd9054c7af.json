{"sha": "fb29fdea9cc36f4abeb8566968b2c1bd9054c7af", "node_id": "C_kwDOANBUbNoAKGZiMjlmZGVhOWNjMzZmNGFiZWI4NTY2OTY4YjJjMWJkOTA1NGM3YWY", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-06-29T00:17:00Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-06-29T00:17:00Z"}, "message": "Daily bump.", "tree": {"sha": "3761b8efbc2b4fba9dc380537c6669a5ab222f83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3761b8efbc2b4fba9dc380537c6669a5ab222f83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb29fdea9cc36f4abeb8566968b2c1bd9054c7af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb29fdea9cc36f4abeb8566968b2c1bd9054c7af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb29fdea9cc36f4abeb8566968b2c1bd9054c7af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb29fdea9cc36f4abeb8566968b2c1bd9054c7af/comments", "author": null, "committer": null, "parents": [{"sha": "4fda776a2f93fbded6336b06fd02ae0e2b67864e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fda776a2f93fbded6336b06fd02ae0e2b67864e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fda776a2f93fbded6336b06fd02ae0e2b67864e"}], "stats": {"total": 251, "additions": 250, "deletions": 1}, "files": [{"sha": "83b95411a90ad1cc6080927ba47dd3821e684eec", "filename": "ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb29fdea9cc36f4abeb8566968b2c1bd9054c7af/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb29fdea9cc36f4abeb8566968b2c1bd9054c7af/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=fb29fdea9cc36f4abeb8566968b2c1bd9054c7af", "patch": "@@ -1,3 +1,13 @@\n+2022-06-28  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* Makefile.tpl (HOST_EXPORTS): Add TFLAGS to GCC_FOR_TARGET.\n+\t(EXTRA_GCC_FLAGS): Likewise.\n+\t* Makefile.in: Rebuilt.\n+\n+2022-06-28  konglin1  <lingling.kong@intel.com>\n+\n+\t* MAINTAINERS (Write After Approval): Add myself.\n+\n 2022-06-27  Tom de Vries  <tdevries@suse.de>\n \n \t* configure.ac: Build libiberty pic variant for gdbserver."}, {"sha": "4c3e4671da67c3371ec2bcd5e59840e4ee7467bc", "filename": "contrib/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb29fdea9cc36f4abeb8566968b2c1bd9054c7af/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb29fdea9cc36f4abeb8566968b2c1bd9054c7af/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=fb29fdea9cc36f4abeb8566968b2c1bd9054c7af", "patch": "@@ -1,3 +1,10 @@\n+2022-06-28  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\t* unicode/README: Added instructions for updating ucnid.h.\n+\t* unicode/DerivedCoreProperties.txt: New file added to source\n+\tcontrol from Unicode 14.0 release.\n+\t* unicode/DerivedNormalizationProps.txt: Likewise.\n+\n 2022-06-26  Lewis Hyatt  <lhyatt@gmail.com>\n \n \t* unicode/EastAsianWidth.txt: Update to Unicode 14.0.0."}, {"sha": "36789dace4b7dc5b61656aac9245a741c6b69b1d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb29fdea9cc36f4abeb8566968b2c1bd9054c7af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb29fdea9cc36f4abeb8566968b2c1bd9054c7af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb29fdea9cc36f4abeb8566968b2c1bd9054c7af", "patch": "@@ -1,3 +1,62 @@\n+2022-06-28  Dimitar Dimitrov  <dimitar@dinux.eu>\n+\n+\t* doc/sourcebuild.texi: Document new no_alignment_constraints\n+\teffective target check.\n+\n+2022-06-28  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* Makefile.in: Remove gimple-ssa-evrp.o and gimple-ssa-evrp-analyze.o.\n+\t* flag-types.h (enum evrp_mode): Remove.\n+\t* params.opt: Remove --param=evrp-mode.\n+\t* tree-vrp.cc (make_pass_early_vrp): New.\n+\t(pass_vrp::execute): Call early VRP instance.\n+\t* gimple-ssa-evrp-analyze.cc: Removed.\n+\t* gimple-ssa-evrp-analyze.h: Removed.\n+\t* gimple-ssa-evrp.cc: Removed.\n+\n+2022-06-28  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* Makefile.in (TFLAGS): New.\n+\t(GCC_FOR_TARGET): Add TFLAGS.\n+\t(FLAGS_TO_PASS): Pass TFLAGS down.\n+\n+2022-06-28  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-loop-split.cc (fix_loop_bb_probability): Do not\n+\tcall update_ssa.\n+\n+2022-06-28  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-into-ssa.cc (insert_updated_phi_nodes_for): Use\n+\tmark_block_for_update.\n+\t(update_ssa): Adjust.\n+\n+2022-06-28  Xi Ruoyao  <xry111@xry111.site>\n+\n+\tPR target/106096\n+\t* config/loongarch/loongarch.h (REG_CLASS_CONTENTS): Exclude\n+\t$r13 from SIBCALL_REGS.\n+\t* config/loongarch/loongarch.cc (loongarch_regno_to_class):\n+\tChange $r13 to JIRL_REGS.\n+\n+2022-06-28  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-loop-ch.cc (entry_loop_condition_is_static): Remove\n+\tirange::supports_p.\n+\n+2022-06-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/106053\n+\t* match.pd ((T)a == (T)b): Avoid folding away sign\n+\tchanges in a comparison if we'd truncate to a boolean.\n+\n+2022-06-28  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.md (*rotl<mode>3_insert_4): Replace mode\n+\titerator GPR with SImode, adjust the condition and output template,\n+\trename to ...\n+\t(*rotlsi3_insert_4): ... this.\n+\n 2022-06-27  David Malcolm  <dmalcolm@redhat.com>\n \n \t* genmatch.cc: Add \"final\" and \"override\" to various vfunc"}, {"sha": "f15a0aa76a8cb9ce1b9e407d91cc2c27ad42bab0", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb29fdea9cc36f4abeb8566968b2c1bd9054c7af/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb29fdea9cc36f4abeb8566968b2c1bd9054c7af/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=fb29fdea9cc36f4abeb8566968b2c1bd9054c7af", "patch": "@@ -1 +1 @@\n-20220628\n+20220629"}, {"sha": "796d71aa88b699ff7fd3820a0a6001e57ec9c253", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb29fdea9cc36f4abeb8566968b2c1bd9054c7af/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb29fdea9cc36f4abeb8566968b2c1bd9054c7af/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=fb29fdea9cc36f4abeb8566968b2c1bd9054c7af", "patch": "@@ -1,3 +1,19 @@\n+2022-06-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-codegen.cc: Include gimple-expr.h.\n+\t(force_target_expr): Use create_tmp_var_raw.\n+\t* decl.cc: Inlucde gimple-expr.h.\n+\t(build_local_temp): Use create_tmp_var_raw.\n+\t* intrinsics.cc (expand_intrinsic_rotate): Use get_callee_fndecl.\n+\t(maybe_expand_intrinsic): Likewise.\n+\n+2022-06-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-attribs.cc (handle_omp_declare_simd_attribute): New function.\n+\t(d_handle_simd_attribute): New function.\n+\t(d_langhook_common_attribute_table): Add 'omp declare simd' attribute.\n+\t(d_langhook_attribute_table): Add simd attribute.\n+\n 2022-06-24  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* d-attribs.cc (d_handle_section_attribute): Update error message."}, {"sha": "79b3754d271a4de4fb3698e7fb69ed4cee2a2905", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb29fdea9cc36f4abeb8566968b2c1bd9054c7af/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb29fdea9cc36f4abeb8566968b2c1bd9054c7af/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=fb29fdea9cc36f4abeb8566968b2c1bd9054c7af", "patch": "@@ -1,3 +1,17 @@\n+2022-06-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gfortran.h (gfc_real_info): Add use_iec_60559 bitfield.\n+\t* trans-types.h (gfc_real16_use_iec_60559): Declare.\n+\t* trans-types.cc (gfc_real16_use_iec_60559): Define.\n+\t(gfc_init_kinds): When building powerpc64le-linux libgfortran\n+\ton glibc 2.26 to 2.31, set gfc_real16_use_iec_60559 and\n+\tuse_iec_60559.\n+\t(gfc_build_real_type): Set gfc_real16_use_iec_60559 and use_iec_60559\n+\ton glibc 2.26 or later.\n+\t* trans-intrinsic.cc (gfc_build_intrinsic_lib_fndecls): Adjust\n+\tcomment.  Handle gfc_real16_use_iec_60559.\n+\t(gfc_get_intrinsic_lib_fndecl): Handle use_iec_60559.\n+\n 2022-06-26  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/105691"}, {"sha": "e6d5741a24fb83e4da80f79677ae2247b655d54a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb29fdea9cc36f4abeb8566968b2c1bd9054c7af/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb29fdea9cc36f4abeb8566968b2c1bd9054c7af/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fb29fdea9cc36f4abeb8566968b2c1bd9054c7af", "patch": "@@ -1,3 +1,36 @@\n+2022-06-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* gdc.dg/attr_simd1.d: New test.\n+\t* gdc.dg/attr_simd2.d: New test.\n+\n+2022-06-28  Dimitar Dimitrov  <dimitar@dinux.eu>\n+\n+\t* c-c++-common/Wcast-align.c: Silence warnings for targets with\n+\tno_alignment_constraints.\n+\t* gcc.dg/c11-align-4.c: Skip for no_alignment_constraints.\n+\t* gcc.dg/strlenopt-10.c: Replace checks for avr with checks for\n+\tany target with no_alignment_constraints.\n+\t* gcc.dg/strlenopt-11.c: Ditto.\n+\t* gcc.dg/strlenopt-13.c: Ditto.\n+\t* lib/target-supports.exp\n+\t(check_effective_target_no_alignment_constraints): New.\n+\n+2022-06-28  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* g++.dg/pr100774.C: Remove --param=evrp-mode.\n+\t* gcc.dg/pr100781.c: Same.\n+\n+2022-06-28  Xi Ruoyao  <xry111@xry111.site>\n+\n+\tPR target/106096\n+\t* g++.target/loongarch/loongarch.exp: New test support file.\n+\t* g++.target/loongarch/pr106096.C: New test.\n+\n+2022-06-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/106053\n+\t* gcc.target/i386/pr106053.c: New testcase.\n+\n 2022-06-27  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/89197"}, {"sha": "1d03cd31c4b44080639e0d9dd00e4361f5b596b1", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb29fdea9cc36f4abeb8566968b2c1bd9054c7af/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb29fdea9cc36f4abeb8566968b2c1bd9054c7af/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=fb29fdea9cc36f4abeb8566968b2c1bd9054c7af", "patch": "@@ -1,3 +1,7 @@\n+2022-06-28  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\t* ucnid.h: Regenerated for Unicode 14.0.\n+\n 2022-06-26  Lewis Hyatt  <lhyatt@gmail.com>\n \n \t* generated_cpp_wcwidth.h: Generated from updated Unicode data files."}, {"sha": "b3bb07fa577034d9fc52277bcd256b3641001752", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb29fdea9cc36f4abeb8566968b2c1bd9054c7af/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb29fdea9cc36f4abeb8566968b2c1bd9054c7af/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=fb29fdea9cc36f4abeb8566968b2c1bd9054c7af", "patch": "@@ -1,3 +1,71 @@\n+2022-06-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure.ac: Check for strtof128 and strfromf128.\n+\tCheck for math and complex *f128 functions.  Set\n+\thave_iec_60559_libc_support to yes if *f128 support is around, for\n+\t--enable-libquadmath-support default to \"default\" rather than yes if\n+\thave_iec_60559_libc_support is yes.\n+\t* acinclude.m4 (LIBGFOR_CHECK_FLOAT128): Test\n+\t_Float128/_Complex _Float128 rather than __float128 and\n+\t_Complex float __attribute__((mode(TC))).  If libquadmath support\n+\tis defaulted and have_iec_60559_libc_support is yes, define and subst\n+\tUSE_IEC_60559.  Remove unused LIBGFOR_BUILD_QUAD conditional.\n+\t* Makefile.am (kinds.h): Pass @USE_IEC_60559@ as an extra\n+\tmk-kinds-h.sh argument.\n+\t* mk-kinds-h.sh: Accept 4th use_iec_60559 argument.  Use\n+\t_Float128/_Complex _Float128 types instead of __float128 and\n+\t_Complex float __attribute__((mode(TC))), and if use_iec_60559 is yes,\n+\tuse f128 suffix instead of q and define GFC_REAL_16_USE_IEC_60559.\n+\t* kinds-override.h: Use _Float128/_Complex _Float128 types instead of\n+\t__float128 and _Complex float __attribute__((mode(TC))), if\n+\tUSE_IEC_60559 is defined, use f128 suffixes instead of q and\n+\tdefine GFC_REAL_17_USE_IEC_60559.\n+\t* libgfortran.h: Don't include quadmath_weak.h if USE_IEC_60559 is\n+\tdefined.\n+\t(GFC_REAL_16_INFINITY, GFC_REAL_16_QUIET_NAN): Define\n+\tfor GFC_REAL_16_USE_IEC_60559 differently.\n+\t* caf/single.c (convert_type): Use _Float128/_Complex _Float128\n+\tinstead of __float128 and _Complex float __attribute__((mode(TC))).\n+\tFor HAVE_GFC_REAL_10 when HAVE_GFC_REAL_16 isn't defined use\n+\t_Complex long double instead of long double.\n+\t* ieee/issignaling_fallback.h (ieee854_float128_shape_type): Use\n+\t_Float128 instead of __float128.\n+\t(__issignalingf128): Change argument type to _Float128.\n+\t(issignaling): Use _Float128 instead of __float128 in _Generic.\n+\t* intrinsics/cshift0.c (cshift0): Use _Float128 instead of __float128\n+\tin a comment.  Fix a comment typo, logn double -> long double.\n+\t* intrinsics/erfc_scaled.c (_THRESH, _M_2_SQRTPI, _INF, _ERFC, _EXP):\n+\tUse different definitions if GFC_REAL_16_USE_IEC_60559.\n+\t(_THRESH, _M_2_SQRTPI): Use GFC_REAL_17_LITERAL macro.\n+\t(_ERFC, _EXP): Use different definitions if GFC_REAL_17_USE_IEC_60559.\n+\t* intrinsics/spread_generic.c (spread, spread_scalar): Use _Float128\n+\tinstead of __float128 in a comment.  Fix a comment typo,\n+\tlogn double -> long double.\n+\t* intrinsics/trigd.c (ENABLE_SIND, ENABLE_COSD, ENABLE_TAND): Handle\n+\tGFC_REAL_16_USE_IEC_60559.\n+\t* intrinsics/pack_generic.c (pack): Use _Float128 instead of\n+\t__float128 in a comment.  Fix a comment typo, logn double ->\n+\tlong double.\n+\t* intrinsics/unpack_generic.c (unpack1, unpack0): Likewise.\n+\t* runtime/in_pack_generic.c (internal_pack): Likewise.\n+\t* runtime/in_unpack_generic.c (internal_unpack): Likewise.\n+\t* io/read.c (convert_real, convert_infnan): Handle\n+\tGFC_REAL_16_USE_IEC_60559 and GFC_REAL_17_USE_IEC_60559.\n+\t* io/transfer128.c (tmp1, tmp2): Don't define if libquadmath\n+\tisn't needed.\n+\t* io/write_float.def (gfor_strfromf128): New function.\n+\t(DTOA2Q, FDTOA2Q): Define differently if\n+\tGFC_REAL_16_USE_IEC_60559 or GFC_REAL_17_USE_IEC_60559.\n+\t* m4/mtype.m4: Use different suffix if GFC_REAL_16_USE_IEC_60559\n+\tor GFC_REAL_17_USE_IEC_60559.\n+\t* config.h.in: Regenerated.\n+\t* configure: Regenerated.\n+\t* Makefile.in: Regenerated.\n+\t* generated/bessel_r16.c: Regenerated.\n+\t* generated/bessel_r17.c: Regenerated.\n+\t* generated/norm2_r16.c: Regenerated.\n+\t* generated/norm2_r17.c: Regenerated.\n+\n 2022-01-26  Francois-Xavier Coudert  <fxcoudert@gmail.com>\n \n \tPR libfortran/104233"}, {"sha": "91736e6238ce2fc2a04993ea25e3789d25ffffbe", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb29fdea9cc36f4abeb8566968b2c1bd9054c7af/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb29fdea9cc36f4abeb8566968b2c1bd9054c7af/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=fb29fdea9cc36f4abeb8566968b2c1bd9054c7af", "patch": "@@ -1,3 +1,9 @@\n+2022-06-28  Martin Liska  <mliska@suse.cz>\n+\n+\t* acinclude.m4: Fix typo in mold linker detection.\n+\t* Makefile.in: Regenerate.\n+\t* configure: Regenerate.\n+\n 2022-06-21  Jakub Jelinek  <jakub@redhat.com>\n \t    Paul Iannetta  <piannetta@kalrayinc.com>\n "}, {"sha": "8bfe21a8f714e5fa5b11f82b98685653409685a5", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb29fdea9cc36f4abeb8566968b2c1bd9054c7af/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb29fdea9cc36f4abeb8566968b2c1bd9054c7af/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=fb29fdea9cc36f4abeb8566968b2c1bd9054c7af", "patch": "@@ -1,3 +1,7 @@\n+2022-06-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* libdruntime/gcc/attributes.d (simd): Define.\n+\n 2022-06-24  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/105413"}, {"sha": "83ac2306d7e0df714bcd75b5083fb1d5fb603807", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb29fdea9cc36f4abeb8566968b2c1bd9054c7af/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb29fdea9cc36f4abeb8566968b2c1bd9054c7af/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fb29fdea9cc36f4abeb8566968b2c1bd9054c7af", "patch": "@@ -1,3 +1,31 @@\n+2022-06-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/filesystem/dir-common.h (_Dir_base::_At_path):\n+\tUse char_type consistently for paths.\n+\n+2022-06-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++17/fs_dir.cc (_Dir::dir_and_pathname):: Replace with\n+\tcurrent() returning _At_path.\n+\t(_Dir::_Dir, _Dir::open_subdir, _Dir::do_unlink): Adjust.\n+\t* src/filesystem/dir-common.h (_Dir_base::_At_path): New class.\n+\t(_Dir_base::_Dir_Base, _Dir_base::openat): Use _At_path.\n+\t* src/filesystem/dir.cc (_Dir::dir_and_pathname): Replace with\n+\tcurrent() returning _At_path.\n+\t(_Dir::_Dir, _Dir::open_subdir): Adjust.\n+\n+2022-06-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++17/fs_dir.cc (_Dir::_Dir) [!_GLIBCXX_HAVE_OPENAT]:\n+\tAlways store pathname if we don't have openat or unlinkat,\n+\tbecause the full path is needed to open sub-directories and\n+\tremove entries.\n+\n+2022-06-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/20_util/from_chars/4.cc: Only use log2 if C99 math\n+\tfunctions are available.\n+\n 2022-06-27  Alexandre Oliva  <oliva@adacore.com>\n \n \t* testsuite/20_util/to_chars/long_double.cc: Use cmath"}]}