{"sha": "66bdcfd6554c30a23dd4a05e29e74f43226bbf17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZiZGNmZDY1NTRjMzBhMjNkZDRhMDVlMjllNzRmNDMyMjZiYmYxNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-11-30T16:31:31Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-11-30T16:31:31Z"}, "message": "[multiple changes]\n\n2009-11-30  Vasiliy Fofanov  <fofanov@adacore.com>\n\n\t* vms_data.ads: Add new VMS qualifiers,\n\tREVERSE_BIT_ORDER/NOREVERSE_BIT_ORDER, to support warnings on bit order\n\teffects.\n\n2009-11-30  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_ch9.adb, exp_ch9.ads, sem_util.ads: Minor reformatting.\n\n2009-11-30  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_prag.adb: Fix spelling error.\n\nFrom-SVN: r154829", "tree": {"sha": "da87f79493339ae1f57ad2fd9de0561c0b773423", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da87f79493339ae1f57ad2fd9de0561c0b773423"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66bdcfd6554c30a23dd4a05e29e74f43226bbf17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66bdcfd6554c30a23dd4a05e29e74f43226bbf17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66bdcfd6554c30a23dd4a05e29e74f43226bbf17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66bdcfd6554c30a23dd4a05e29e74f43226bbf17/comments", "author": null, "committer": null, "parents": [{"sha": "47bfea3ae84a710416227a4dc8b849decc60e791", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47bfea3ae84a710416227a4dc8b849decc60e791", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47bfea3ae84a710416227a4dc8b849decc60e791"}], "stats": {"total": 156, "additions": 86, "deletions": 70}, "files": [{"sha": "1e006051a7a52f6eaca36f0e7fdec36fd04c1d92", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66bdcfd6554c30a23dd4a05e29e74f43226bbf17/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66bdcfd6554c30a23dd4a05e29e74f43226bbf17/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=66bdcfd6554c30a23dd4a05e29e74f43226bbf17", "patch": "@@ -1,3 +1,17 @@\n+2009-11-30  Vasiliy Fofanov  <fofanov@adacore.com>\n+\n+\t* vms_data.ads: Add new VMS qualifiers,\n+\tREVERSE_BIT_ORDER/NOREVERSE_BIT_ORDER, to support warnings on bit order\n+\teffects.\n+\n+2009-11-30  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_ch9.adb, exp_ch9.ads, sem_util.ads: Minor reformatting.\n+\n+2009-11-30  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_prag.adb: Fix spelling error.\n+\n 2009-11-30  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_ch9.ads (Build_Private_Protected_Declaration): For a protected"}, {"sha": "d84448f4b6d3100837dd5bd6a2e126b009ef5839", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 26, "deletions": 28, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66bdcfd6554c30a23dd4a05e29e74f43226bbf17/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66bdcfd6554c30a23dd4a05e29e74f43226bbf17/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=66bdcfd6554c30a23dd4a05e29e74f43226bbf17", "patch": "@@ -2555,8 +2555,8 @@ package body Exp_Ch9 is\n    -- Build_Private_Protected_Declaration --\n    -----------------------------------------\n \n-   function Build_Private_Protected_Declaration (N : Node_Id)\n-     return Entity_Id\n+   function Build_Private_Protected_Declaration\n+     (N : Node_Id) return Entity_Id\n    is\n       Loc      : constant Source_Ptr := Sloc (N);\n       Body_Id  : constant Entity_Id := Defining_Entity (N);\n@@ -2569,13 +2569,11 @@ package body Exp_Ch9 is\n    begin\n       Formal := First_Formal (Body_Id);\n \n-      --  The protected operation always has at least one formal, namely\n-      --  the object itself, but it is only placed in the parameter list\n-      --  if expansion is enabled.\n+      --  The protected operation always has at least one formal, namely the\n+      --  object itself, but it is only placed in the parameter list if\n+      --  expansion is enabled.\n \n-      if Present (Formal)\n-        or else Expander_Active\n-      then\n+      if Present (Formal) or else Expander_Active then\n          Plist := Copy_Parameter_List (Body_Id);\n       else\n          Plist := No_List;\n@@ -2584,31 +2582,31 @@ package body Exp_Ch9 is\n       if Nkind (Specification (N)) = N_Procedure_Specification then\n          New_Spec :=\n            Make_Procedure_Specification (Loc,\n-              Defining_Unit_Name =>\n+              Defining_Unit_Name       =>\n                 Make_Defining_Identifier (Sloc (Body_Id),\n                   Chars => Chars (Body_Id)),\n-              Parameter_Specifications => Plist);\n+              Parameter_Specifications =>\n+                Plist);\n       else\n          New_Spec :=\n            Make_Function_Specification (Loc,\n-              Defining_Unit_Name =>\n+              Defining_Unit_Name       =>\n                 Make_Defining_Identifier (Sloc (Body_Id),\n                   Chars => Chars (Body_Id)),\n-              Parameter_Specifications => Plist,\n-              Result_Definition =>\n+              Parameter_Specifications =>\n+                Plist,\n+              Result_Definition        =>\n                 New_Occurrence_Of (Etype (Body_Id), Loc));\n       end if;\n \n-      Decl :=\n-        Make_Subprogram_Declaration (Loc,\n-          Specification => New_Spec);\n+      Decl := Make_Subprogram_Declaration (Loc, Specification => New_Spec);\n       Insert_Before (N, Decl);\n       Spec_Id := Defining_Unit_Name (New_Spec);\n \n-      --  Indicate that the entity comes from source, to ensure that\n-      --  cross-reference information is properly generated. The body\n-      --  itself is rewritten during expansion, and the body entity will\n-      --  not appear in calls to the operation.\n+      --  Indicate that the entity comes from source, to ensure that cross-\n+      --  reference information is properly generated. The body itself is\n+      --  rewritten during expansion, and the body entity will not appear in\n+      --  calls to the operation.\n \n       Set_Comes_From_Source (Spec_Id, True);\n       Analyze (Decl);\n@@ -7424,16 +7422,16 @@ package body Exp_Ch9 is\n                      Current_Node := New_Op_Body;\n \n                      --  Generate an overriding primitive operation body for\n-                     --  this subprogram if the protected type implements\n-                     --  an interface.\n+                     --  this subprogram if the protected type implements an\n+                     --  interface.\n \n                      if Ada_Version >= Ada_05\n-                       and then Present (Interfaces (\n-                                  Corresponding_Record_Type (Pid)))\n+                          and then\n+                        Present (Interfaces (Corresponding_Record_Type (Pid)))\n                      then\n                         Disp_Op_Body :=\n-                          Build_Dispatching_Subprogram_Body (\n-                            Op_Body, Pid, New_Op_Body);\n+                          Build_Dispatching_Subprogram_Body\n+                            (Op_Body, Pid, New_Op_Body);\n \n                         Insert_After (Current_Node, Disp_Op_Body);\n                         Analyze (Disp_Op_Body);\n@@ -7494,8 +7492,8 @@ package body Exp_Ch9 is\n       end loop;\n \n       --  Finally, create the body of the function that maps an entry index\n-      --  into the corresponding body index, except when there is no entry,\n-      --  or in a ravenscar-like profile.\n+      --  into the corresponding body index, except when there is no entry, or\n+      --  in a Ravenscar-like profile.\n \n       if Corresponding_Runtime_Package (Pid) =\n            System_Tasking_Protected_Objects_Entries"}, {"sha": "22a27d6422e0b40263d7306c6a2d960d7707463b", "filename": "gcc/ada/exp_ch9.ads", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66bdcfd6554c30a23dd4a05e29e74f43226bbf17/gcc%2Fada%2Fexp_ch9.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66bdcfd6554c30a23dd4a05e29e74f43226bbf17/gcc%2Fada%2Fexp_ch9.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.ads?ref=66bdcfd6554c30a23dd4a05e29e74f43226bbf17", "patch": "@@ -86,7 +86,7 @@ package Exp_Ch9 is\n    --  body must be expanded separately to create a subprogram declaration\n    --  for it, in order to resolve internal calls to it from other protected\n    --  operations. It would seem that no locking version of the operation is\n-   --  needed, but in fact, in Ada2005 the subprogram may be used in a call-\n+   --  needed, but in fact, in Ada 2005 the subprogram may be used in a call-\n    --  back, and therefore a protected version of the operation must be\n    --  generated as well.\n \n@@ -105,28 +105,28 @@ package Exp_Ch9 is\n       Name     : Node_Id;\n       Rec      : Node_Id;\n       External : Boolean := True);\n-   --  The node N is a subprogram or entry call to a protected subprogram.\n-   --  This procedure rewrites this call with the appropriate expansion.\n-   --  Name is the subprogram, and Rec is the record corresponding to the\n-   --  protected object. External is False if the call is to another\n-   --  protected subprogram within the same object.\n+   --  The node N is a subprogram or entry call to a protected subprogram. This\n+   --  procedure rewrites this call with the appropriate expansion. Name is the\n+   --  subprogram, and Rec is the record corresponding to the protected object.\n+   --  External is False if the call is to another protected subprogram within\n+   --  the same object.\n \n    procedure Build_Task_Activation_Call (N : Node_Id);\n-   --  This procedure is called for constructs that can be task activators\n-   --  i.e. task bodies, subprogram bodies, package bodies and blocks. If\n-   --  the construct is a task activator (as indicated by the non-empty\n-   --  setting of Activation_Chain_Entity, either in the construct, or, in\n-   --  the case of a package body, in its associated package spec), then\n-   --  a call to Activate_Tasks with this entity as the single parameter\n-   --  is inserted at the start of the statements of the activator.\n+   --  This procedure is called for constructs that can be task activators,\n+   --  i.e. task bodies, subprogram bodies, package bodies and blocks. If the\n+   --  construct is a task activator (as indicated by the non-empty setting of\n+   --  Activation_Chain_Entity, either in the construct, or, in the case of a\n+   --  package body, in its associated package spec), then a call to\n+   --  Activate_Tasks with this entity as the single parameter is inserted at\n+   --  the start of the statements of the activator.\n \n    procedure Build_Task_Allocate_Block\n      (Actions : List_Id;\n       N       : Node_Id;\n       Args    : List_Id);\n-   --  This routine is used in the case of allocators where the designated\n-   --  type is a task or contains tasks. In this case, the normal initialize\n-   --  call is replaced by:\n+   --  This routine is used in the case of allocators where the designated type\n+   --  is a task or contains tasks. In this case, the normal initialize call\n+   --  is replaced by:\n    --\n    --    blockname : label;\n    --    blockname : declare\n@@ -146,10 +146,10 @@ package Exp_Ch9 is\n    --\n    --  to get the task or tasks created and initialized. The expunge call\n    --  ensures that any tasks that get created but not activated due to an\n-   --  exception are properly expunged (it has no effect in the normal case)\n-   --  The argument N is the allocator, and Args is the list of arguments\n-   --  for the initialization call, constructed by the caller, which uses\n-   --  the Master_Id of the access type as the _Master parameter, and _Chain\n+   --  exception are properly expunged (it has no effect in the normal case).\n+   --  The argument N is the allocator, and Args is the list of arguments for\n+   --  the initialization call, constructed by the caller, which uses the\n+   --  Master_Id of the access type as the _Master parameter, and _Chain\n    --  (defined above) as the _Chain parameter.\n \n    procedure Build_Task_Allocate_Block_With_Init_Stmts\n@@ -199,28 +199,28 @@ package Exp_Ch9 is\n       Index : Node_Id;\n       Ttyp  : Entity_Id)\n       return  Node_Id;\n-   --  Returns an expression to compute a task entry index given the name\n-   --  of the entry or entry family. For the case of a task entry family,\n-   --  the Index parameter contains the expression for the subscript.\n-   --  Ttyp is the task type.\n+   --  Returns an expression to compute a task entry index given the name of\n+   --  the entry or entry family. For the case of a task entry family, the\n+   --  Index parameter contains the expression for the subscript. Ttyp is the\n+   --  task type.\n \n    procedure Establish_Task_Master (N : Node_Id);\n    --  Given a subprogram body, or a block statement, or a task body, this\n-   --  procedure makes the necessary transformations required of a task\n-   --  master (add Enter_Master call at start, and establish a cleanup\n-   --  routine to make sure Complete_Master is called on exit).\n+   --  procedure makes the necessary transformations required of a task master\n+   --  (add Enter_Master call at start, and establish a cleanup routine to make\n+   --  sure Complete_Master is called on exit).\n \n    procedure Expand_Access_Protected_Subprogram_Type (N : Node_Id);\n    --  Build Equivalent_Type for an Access_To_Protected_Subprogram.\n-   --  Equivalent_Type is a record type with two components: a pointer\n-   --  to the protected object, and a pointer to the operation itself.\n+   --  Equivalent_Type is a record type with two components: a pointer to the\n+   --  protected object, and a pointer to the operation itself.\n \n    procedure Expand_Accept_Declarations (N : Node_Id; Ent : Entity_Id);\n-   --  Expand declarations required for accept statement. See bodies of\n-   --  both Expand_Accept_Declarations and Expand_N_Accept_Statement for\n-   --  full details of the nature and use of these declarations, which\n-   --  are inserted immediately before the accept node N. The second\n-   --  argument is the entity for the corresponding entry.\n+   --  Expand declarations required for accept statement. See bodies of both\n+   --  Expand_Accept_Declarations and Expand_N_Accept_Statement for full\n+   --  details of the nature and use of these declarations, which are inserted\n+   --  immediately before the accept node N. The second argument is the entity\n+   --  for the corresponding entry.\n \n    procedure Expand_Entry_Barrier (N : Node_Id; Ent : Entity_Id);\n    --  Expand the entry barrier into a function. This is called directly"}, {"sha": "daa08b4e95f487aa4247caf9e02c31bce8443373", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66bdcfd6554c30a23dd4a05e29e74f43226bbf17/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66bdcfd6554c30a23dd4a05e29e74f43226bbf17/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=66bdcfd6554c30a23dd4a05e29e74f43226bbf17", "patch": "@@ -1155,7 +1155,7 @@ package body Sem_Prag is\n \n       begin\n          --  We allow duplicated export names in CIL, as they are always\n-         --  enclosed in a namespace that differenciates them, and overloaded\n+         --  enclosed in a namespace that differentiates them, and overloaded\n          --  entities are supported by the VM.\n \n          if VM_Target = CLI_Target then"}, {"sha": "ed36cf8f3d7a8f8cb400effd61260b9ae210a2b8", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66bdcfd6554c30a23dd4a05e29e74f43226bbf17/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66bdcfd6554c30a23dd4a05e29e74f43226bbf17/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=66bdcfd6554c30a23dd4a05e29e74f43226bbf17", "patch": "@@ -210,10 +210,10 @@ package Sem_Util is\n    --  of Old is set and Old has no yet been Frozen (i.e. Is_Frozen is false);\n \n    function Copy_Parameter_List (Subp_Id : Entity_Id) return List_Id;\n-   --  Utility to create a parameter profile for a new subprogram spec,\n-   --  when the subprogram has a body that acts as spec. This is done for\n-   --  some cases of inlining, and for private protected ops. Also used\n-   --  to create bodies for stubbed subprograms.\n+   --  Utility to create a parameter profile for a new subprogram spec, when\n+   --  the subprogram has a body that acts as spec. This is done for some cases\n+   --  of inlining, and for private protected ops. Also used to create bodies\n+   --  for stubbed subprograms.\n \n    function Current_Entity (N : Node_Id) return Entity_Id;\n    --  Find the currently visible definition for a given identifier, that is to\n@@ -230,9 +230,9 @@ package Sem_Util is\n \n    function Current_Subprogram return Entity_Id;\n    --  Returns current enclosing subprogram. If Current_Scope is a subprogram,\n-   --  then that is what is returned, otherwise the Enclosing_Subprogram of\n-   --  the Current_Scope is returned. The returned value is Empty if this\n-   --  is called from a library package which is not within any subprogram.\n+   --  then that is what is returned, otherwise the Enclosing_Subprogram of the\n+   --  Current_Scope is returned. The returned value is Empty if this is called\n+   --  from a library package which is not within any subprogram.\n \n    function Defining_Entity (N : Node_Id) return Entity_Id;\n    --  Given a declaration N, returns the associated defining entity. If"}, {"sha": "6f4ae0f65f021152b80e9071785d08b37958e5ad", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66bdcfd6554c30a23dd4a05e29e74f43226bbf17/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66bdcfd6554c30a23dd4a05e29e74f43226bbf17/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=66bdcfd6554c30a23dd4a05e29e74f43226bbf17", "patch": "@@ -2983,6 +2983,10 @@ package VMS_Data is\n                                                \"-gnatwv \"                  &\n                                             \"NOVARIABLES_UNINITIALIZED \"   &\n                                                \"-gnatwV \"                  &\n+                                            \"REVERSE_BIT_ORDER \"           &\n+                                               \"-gnatw.v \"                 &\n+                                            \"NOREVERSE_BIT_ORDER \"         &\n+                                               \"-gnatw.V \"                 &\n                                             \"LOWBOUND_ASSUMED \"            &\n                                                \"-gnatww \"                  &\n                                             \"NOLOWBOUND_ASSUMED \"          &"}]}