{"sha": "e9f32eb5034600b035f2d40e1723432cff8b74ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTlmMzJlYjUwMzQ2MDBiMDM1ZjJkNDBlMTcyMzQzMmNmZjhiNzRiYQ==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1997-02-12T20:23:55Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1997-02-12T20:23:55Z"}, "message": "90th Cygnus<->FSF quick merge\n\nFrom-SVN: r13629", "tree": {"sha": "22a6a8d586cb5b6ee70a96b7a73782ebfa909e9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22a6a8d586cb5b6ee70a96b7a73782ebfa909e9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9f32eb5034600b035f2d40e1723432cff8b74ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9f32eb5034600b035f2d40e1723432cff8b74ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9f32eb5034600b035f2d40e1723432cff8b74ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9f32eb5034600b035f2d40e1723432cff8b74ba/comments", "author": null, "committer": null, "parents": [{"sha": "01be8af60bc85cf8671c5582559174abfaf333ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01be8af60bc85cf8671c5582559174abfaf333ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01be8af60bc85cf8671c5582559174abfaf333ab"}], "stats": {"total": 145, "additions": 68, "deletions": 77}, "files": [{"sha": "8f1f7152e6cd34a460ffb940d5aca30e8c4b4c2c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9f32eb5034600b035f2d40e1723432cff8b74ba/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9f32eb5034600b035f2d40e1723432cff8b74ba/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e9f32eb5034600b035f2d40e1723432cff8b74ba", "patch": "@@ -1,3 +1,28 @@\n+Tue Feb 11 13:50:48 1997  Mike Stump  <mrs@cygnus.com>\n+\n+\t* new1.cc: Include a declaration for malloc, to avoid warning, and\n+ \tavoid lossing on systems that require one (ones that define malloc\n+ \tin xm.h).\n+\n+Mon Feb 10 22:51:13 1997  Bruno Haible\t<bruno@linuix.mathematik.uni-karlsruhe.de>\n+\n+\t* decl2.c (max_tinst_depth): New variable.\n+\t(lang_decode_option): Parse \"-ftemplate-depth-NN\" command line\n+\toption.\n+\t* pt.c (max_tinst_depth): Variable moved.\n+\t* lang-options.h: Declare \"-ftemplate-depth-NN\" command line option\n+\tas legal.\n+\n+Fri Feb  7 15:43:34 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl.c (xref_basetypes): Allow a base class that depends on\n+ \ttemplate parms to be incomplete.\n+\n+\t* decl2.c (build_expr_from_tree): Support typeid(type).\n+\t* rtti.c (get_typeid): Support templates.\n+\t(expand_si_desc, expand_class_desc): Fix string length.\n+\t(expand_ptr_desc, expand_attr_desc, expand_generic_desc): Likewise.\n+\n Tue Feb  4 11:28:24 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* pt.c (unify, case TEMPLATE_CONST_PARM): Use cp_tree_equal."}, {"sha": "26601104b9a6ba87d992c879d1bf264051fba08c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9f32eb5034600b035f2d40e1723432cff8b74ba/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9f32eb5034600b035f2d40e1723432cff8b74ba/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=e9f32eb5034600b035f2d40e1723432cff8b74ba", "patch": "@@ -10492,9 +10492,8 @@ xref_basetypes (code_type_node, name, ref, binfo)\n \t}\n #if 1\n       /* This code replaces similar code in layout_basetypes.  */\n-      else if (TREE_CODE (basetype) != TEMPLATE_TYPE_PARM\n-\t       && TREE_CODE (basetype) != TYPENAME_TYPE\n-\t       && TYPE_SIZE (complete_type (basetype)) == NULL_TREE)\n+      else if (TYPE_SIZE (complete_type (basetype)) == NULL_TREE\n+\t       && ! (current_template_parms && uses_template_parms (basetype)))\n \t{\n \t  cp_error (\"base class `%T' has incomplete type\", basetype);\n \t  continue;"}, {"sha": "fe4228d5ee64062c8fd12a9be14c3b60c44a7a32", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9f32eb5034600b035f2d40e1723432cff8b74ba/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9f32eb5034600b035f2d40e1723432cff8b74ba/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=e9f32eb5034600b035f2d40e1723432cff8b74ba", "patch": "@@ -376,6 +376,11 @@ int flag_new_for_scope = 1;\n \n int flag_weak = 1;\n \n+/* Maximum template instantiation depth. Must be at least 17 for ANSI\n+   compliance. */\n+\n+int max_tinst_depth = 17;\n+\n /* Table of language-dependent -f options.\n    STRING is the option name.  VARIABLE is the address of the variable.\n    ON_VALUE is the value to store in VARIABLE\n@@ -492,6 +497,22 @@ lang_decode_option (p)\n \t  flag_implicit_templates = 0;\n \t  found = 1;\n \t}\n+      else if (!strncmp (p, \"template-depth-\", 15))\n+\t{\n+\t  char *endp = p + 15;\n+\t  while (*endp)\n+\t    {\n+\t      if (*endp >= '0' && *endp <= '9')\n+\t\tendp++;\n+\t      else\n+\t\t{\n+\t\t  error (\"Invalid option `%s'\", p - 2);\n+\t\t  goto template_depth_lose;\n+\t\t}\n+\t    }\n+\t  max_tinst_depth = atoi (p + 15);\n+\ttemplate_depth_lose: ;\n+\t}\n       else for (j = 0;\n \t\t!found && j < sizeof (lang_f_options) / sizeof (lang_f_options[0]);\n \t\tj++)\n@@ -3442,6 +3463,8 @@ build_expr_from_tree (t)\n       }\n \n     case TYPEID_EXPR:\n+      if (TREE_CODE_CLASS (TREE_CODE (TREE_OPERAND (t, 0))) == 't')\n+\treturn get_typeid (TREE_OPERAND (t, 0));\n       return build_x_typeid (build_expr_from_tree (TREE_OPERAND (t, 0)));\n \n     case VAR_DECL:"}, {"sha": "2c91fbfc98dc793508aa9ece7cb4f11274aac77b", "filename": "gcc/cp/gxxint.texi", "status": "modified", "additions": 5, "deletions": 68, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9f32eb5034600b035f2d40e1723432cff8b74ba/gcc%2Fcp%2Fgxxint.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9f32eb5034600b035f2d40e1723432cff8b74ba/gcc%2Fcp%2Fgxxint.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fgxxint.texi?ref=e9f32eb5034600b035f2d40e1723432cff8b74ba", "patch": "@@ -53,38 +53,6 @@ Access checking is unimplemented for nested types.\n @item\n @code{volatile} is not implemented in general.\n \n-@cindex pointers to members\n-@item\n-Pointers to members are only minimally supported, and there are places\n-where the grammar doesn't even properly accept them yet.\n-\n-@cindex multiple inheritance\n-@item\n-@code{this} will be wrong in virtual members functions defined in a\n-virtual base class, when they are overridden in a derived class, when\n-called via a non-left most object.\n-\n-An example would be:\n-\n-@example\n-extern \"C\" int printf(const char*, ...);\n-struct A @{ virtual void f() @{ @} @};\n-struct B : virtual A @{ int b; B() : b(0) @{@} void f() @{ b++; @} @};\n-struct C : B @{@};\n-struct D : B @{@};\n-struct E : C, D @{@};\n-int main()\n-@{\n-  E e;\n-  C& c = e; D& d = e;\n-  c.f(); d.f();\n-  printf (\"C::b = %d, D::b = %d\\n\", e.C::b, e.D::b);\n-  return 0;\n-@}\n-@end example\n-\n-This will print out 2, 0, instead of 1,1.\n-\n @end itemize\n \n @node Routines, Implementation Specifics, Limitations of g++, Top\n@@ -1507,21 +1475,6 @@ between a cleanup-rethrower, and a real handler, if would also have to\n have a way to know if a handler `matches' a thrown exception, and this\n is frontend specific.\n \n-The UNSAVE_EXPR tree code has to be migrated to the backend.  Exprs such\n-as TARGET_EXPRs, WITH_CLEANUP_EXPRs, CALL_EXPRs and RTL_EXPRs have to be\n-changed to support unsaving.  This is meant to be a complete list.\n-SAVE_EXPRs can be unsaved already.  expand_decl_cleanup should be\n-changed to unsave it's argument, if needed.  See\n-cp/tree.c:cp_expand_decl_cleanup, unsave_expr_now, unsave_expr, and\n-cp/expr.c:cplus_expand_expr(case UNSAVE_EXPR:) for the UNSAVE_EXPR code.\n-Now, as to why...  because kenner already tripped over the exact same\n-problem in Ada, we talked about it, he didn't like any of the solution,\n-but yet, didn't like no solution either.  He was willing to live with\n-the drawbacks of this solution.  The drawback is unsave_expr_now.  It\n-should have a callback into the frontend, to allow the unsaveing of\n-frontend special codes.  The callback goes in, inplace of the call to\n-my_friendly_abort.\n-\n The stack unwinder is one of the hardest parts to do.  It is highly\n machine dependent.  The form that kenner seems to like was a couple of\n macros, that would do the machine dependent grunt work.  One preexisting\n@@ -1530,31 +1483,15 @@ macro he seemed to want was __builtin_return_address, and the other\n would do the hard work of fixing up the registers, adjusting the stack\n pointer, frame pointer, arg pointer and so on.\n \n-The eh archive (~mrs/eh) might be good reading for understanding the Ada\n-perspective, and some of kenners mindset, and a detailed explanation\n-(Message-Id: <9308301130.AA10543@@vlsi1.ultra.nyu.edu>) of the concepts\n-involved.\n-\n-Here is a guide to existing backend type code.  It is all in\n-cp/except.c.  Check out do_unwind, and expand_builtin_throw for current\n-code on how to figure out what handler matches an exception,\n-emit_exception_table for code on emitting the PC range table that is\n-built during compilation, expand_exception_blocks for code that emits\n-all the handlers at the end of a functions, end_protect to mark the end\n-of an exception region, start_protect to mark the start of an exception\n-region, lang_interim_eh is the master hook used by the backend into the\n-EH backend that now exists in the frontend, and expand_internal_throw to\n-raise an exception.\n-\n \n @node Free Store, Concept Index, Exception Handling, Top\n @section Free Store\n \n-operator new [] adds a magic cookie to the beginning of arrays for which\n-the number of elements will be needed by operator delete [].  These are\n-arrays of objects with destructors and arrays of objects that define\n-operator delete [] with the optional size_t argument.  This cookie can\n-be examined from a program as follows:\n+@code{operator new []} adds a magic cookie to the beginning of arrays\n+for which the number of elements will be needed by @code{operator delete\n+[]}.  These are arrays of objects with destructors and arrays of objects\n+that define @code{operator delete []} with the optional size_t argument.\n+This cookie can be examined from a program as follows:\n \n @example\n typedef unsigned long size_t;"}, {"sha": "ed76bcf349f5005dfbedea33031dee335f0d734e", "filename": "gcc/cp/lang-options.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9f32eb5034600b035f2d40e1723432cff8b74ba/gcc%2Fcp%2Flang-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9f32eb5034600b035f2d40e1723432cff8b74ba/gcc%2Fcp%2Flang-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-options.h?ref=e9f32eb5034600b035f2d40e1723432cff8b74ba", "patch": "@@ -76,6 +76,7 @@ Boston, MA 02111-1307, USA.  */\n   \"-fno-stats\",\n   \"-fstrict-prototype\",\n   \"-fno-strict-prototype\",\n+  \"-ftemplate-depth-\",\n   \"-fthis-is-variable\",\n   \"-fno-this-is-variable\",\n   \"-fvtable-thunks\","}, {"sha": "0ee111d293953f397a6071f964a209bd9923cfb8", "filename": "gcc/cp/new1.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9f32eb5034600b035f2d40e1723432cff8b74ba/gcc%2Fcp%2Fnew1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9f32eb5034600b035f2d40e1723432cff8b74ba/gcc%2Fcp%2Fnew1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fnew1.cc?ref=e9f32eb5034600b035f2d40e1723432cff8b74ba", "patch": "@@ -27,6 +27,8 @@\n \n #include \"new\"\n \n+extern \"C\" void *malloc (size_t);\n+\n typedef void (*vfp)(void);\n extern vfp __new_handler;\n extern void __default_new_handler (void);"}, {"sha": "89002d47aac1ee3ba5c161a2d0a3dd56990dd6a7", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9f32eb5034600b035f2d40e1723432cff8b74ba/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9f32eb5034600b035f2d40e1723432cff8b74ba/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e9f32eb5034600b035f2d40e1723432cff8b74ba", "patch": "@@ -963,7 +963,7 @@ uses_template_parms (t)\n static struct tinst_level *current_tinst_level = 0;\n static struct tinst_level *free_tinst_level = 0;\n static int tinst_depth = 0;\n-int max_tinst_depth = 17;\n+extern int max_tinst_depth;\n #ifdef GATHER_STATISTICS\n int depth_reached = 0;\n #endif\n@@ -982,6 +982,7 @@ push_tinst_level (d)\n \n       error (\"template instantiation depth exceeds maximum of %d\",\n \t     max_tinst_depth);\n+      error (\" (use -ftemplate-depth-NN to increase the maximum)\");\n       cp_error (\"  instantiating `%D'\", d);\n \n       for (; p; p = p->next)"}, {"sha": "0fbfc01eff947086d141eb8c6ddb9d5720ae1d61", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9f32eb5034600b035f2d40e1723432cff8b74ba/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9f32eb5034600b035f2d40e1723432cff8b74ba/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=e9f32eb5034600b035f2d40e1723432cff8b74ba", "patch": "@@ -373,6 +373,9 @@ get_typeid (type)\n   if (type == error_mark_node)\n     return error_mark_node;\n   \n+  if (processing_template_decl)\n+    return build_min_nt (TYPEID_EXPR, type);\n+\n   /* If the type of the type-id is a reference type, the result of the\n      typeid expression refers to a type_info object representing the\n      referenced type.  */\n@@ -652,7 +655,7 @@ expand_si_desc (tdecl, type)\n {\n   tree t, elems, fn;\n   char *name = build_overload_name (type, 1, 1);\n-  tree name_string = combine_strings (build_string (strlen (name), name));\n+  tree name_string = combine_strings (build_string (strlen (name)+1, name));\n \n   type = BINFO_TYPE (TREE_VEC_ELT (TYPE_BINFO_BASETYPES (type), 0));\n   expand_expr_stmt (get_typeid_1 (type));\n@@ -825,7 +828,7 @@ expand_class_desc (tdecl, type)\n #endif\n \n   name = build_overload_name (type, 1, 1);\n-  name_string = combine_strings (build_string (strlen (name), name));\n+  name_string = combine_strings (build_string (strlen (name)+1, name));\n \n   {\n     tree arrtype = build_array_type (base_info_type_node, NULL_TREE);\n@@ -877,7 +880,7 @@ expand_ptr_desc (tdecl, type)\n {\n   tree t, elems, fn;\n   char *name = build_overload_name (type, 1, 1);\n-  tree name_string = combine_strings (build_string (strlen (name), name));\n+  tree name_string = combine_strings (build_string (strlen (name)+1, name));\n \n   type = TREE_TYPE (type);\n   expand_expr_stmt (get_typeid_1 (type));\n@@ -924,7 +927,7 @@ expand_attr_desc (tdecl, type)\n {\n   tree elems, t, fn;\n   char *name = build_overload_name (type, 1, 1);\n-  tree name_string = combine_strings (build_string (strlen (name), name));\n+  tree name_string = combine_strings (build_string (strlen (name)+1, name));\n   tree attrval = build_int_2\n     (TYPE_READONLY (type) | TYPE_VOLATILE (type) * 2, 0);\n \n@@ -973,7 +976,7 @@ expand_generic_desc (tdecl, type, fnname)\n      char *fnname;\n {\n   char *name = build_overload_name (type, 1, 1);\n-  tree name_string = combine_strings (build_string (strlen (name), name));\n+  tree name_string = combine_strings (build_string (strlen (name)+1, name));\n   tree elems = tree_cons\n     (NULL_TREE, decay_conversion (tdecl), tree_cons\n      (NULL_TREE, decay_conversion (name_string), NULL_TREE));"}]}