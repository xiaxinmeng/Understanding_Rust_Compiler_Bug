{"sha": "95c73b23dc40a6ba5a6f130d3f981aa36a7de1e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVjNzNiMjNkYzQwYTZiYTVhNmYxMzBkM2Y5ODFhYTM2YTdkZTFlNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@act-europe.fr", "date": "2004-06-01T19:08:01Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-06-01T19:08:01Z"}, "message": "function.c (walk_fixup_memory_subreg): New parameter 'var'.\n\n\t* function.c (walk_fixup_memory_subreg): New parameter 'var'.\n\tCall fixup_memory_subreg only if the MEM is equal to 'var'.\n\tAdjust recursive calls to self.\n\t(fixup_var_refs_insn): Pass 'var' to walk_fixup_memory_subreg.\n\nFrom-SVN: r82555", "tree": {"sha": "95f4ccfed08bc2c997acea68171ca1e546a8d4cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95f4ccfed08bc2c997acea68171ca1e546a8d4cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95c73b23dc40a6ba5a6f130d3f981aa36a7de1e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95c73b23dc40a6ba5a6f130d3f981aa36a7de1e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95c73b23dc40a6ba5a6f130d3f981aa36a7de1e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95c73b23dc40a6ba5a6f130d3f981aa36a7de1e5/comments", "author": null, "committer": null, "parents": [{"sha": "c1d34f9050f4a44b52ae4b95a10a1a8d3b42061a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1d34f9050f4a44b52ae4b95a10a1a8d3b42061a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1d34f9050f4a44b52ae4b95a10a1a8d3b42061a"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "372c12d9ed008d84f497d260341cb636d40171ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95c73b23dc40a6ba5a6f130d3f981aa36a7de1e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95c73b23dc40a6ba5a6f130d3f981aa36a7de1e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=95c73b23dc40a6ba5a6f130d3f981aa36a7de1e5", "patch": "@@ -1,3 +1,10 @@\n+2004-06-01  Eric Botcazou  <ebotcazou@act-europe.fr>\n+\n+\t* function.c (walk_fixup_memory_subreg): New parameter 'var'.\n+\tCall fixup_memory_subreg only if the MEM is equal to 'var'.\n+\tAdjust recursive calls to self.\n+\t(fixup_var_refs_insn): Pass 'var' to walk_fixup_memory_subreg.\n+\n 2004-06-01  Richard Henderson  <rth@redhat.com>\n \t    Andrew Pinski  <pinskia@physics.uc.edu>\n "}, {"sha": "3744bf53ba2e46f2ff490874b0bd5692070dab1c", "filename": "gcc/function.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95c73b23dc40a6ba5a6f130d3f981aa36a7de1e5/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95c73b23dc40a6ba5a6f130d3f981aa36a7de1e5/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=95c73b23dc40a6ba5a6f130d3f981aa36a7de1e5", "patch": "@@ -241,7 +241,7 @@ static void fixup_var_refs_insn (rtx, rtx, enum machine_mode, int, int, rtx);\n static void fixup_var_refs_1 (rtx, enum machine_mode, rtx *, rtx,\n \t\t\t      struct fixup_replacement **, rtx);\n static rtx fixup_memory_subreg (rtx, rtx, enum machine_mode, int);\n-static rtx walk_fixup_memory_subreg (rtx, rtx, enum machine_mode, int);\n+static rtx walk_fixup_memory_subreg (rtx, rtx, rtx, enum machine_mode, int);\n static rtx fixup_stack_1 (rtx, rtx);\n static void optimize_bit_field (rtx, rtx, rtx *);\n static void instantiate_decls (tree, int);\n@@ -1914,7 +1914,7 @@ fixup_var_refs_insn (rtx insn, rtx var, enum machine_mode promoted_mode,\n     {\n       if (GET_CODE (note) != INSN_LIST)\n \tXEXP (note, 0)\n-\t  = walk_fixup_memory_subreg (XEXP (note, 0), insn,\n+\t  = walk_fixup_memory_subreg (XEXP (note, 0), insn, var,\n \t\t\t\t      promoted_mode, 1);\n       note = XEXP (note, 1);\n     }\n@@ -2601,17 +2601,17 @@ fixup_memory_subreg (rtx x, rtx insn, enum machine_mode promoted_mode, int uncri\n   return result;\n }\n \n-/* Do fixup_memory_subreg on all (SUBREG (MEM ...) ...) contained in X.\n+/* Do fixup_memory_subreg on all (SUBREG (VAR) ...) contained in X.\n+   VAR is a MEM that used to be a pseudo register with mode PROMOTED_MODE.\n    Replace subexpressions of X in place.\n-   If X itself is a (SUBREG (MEM ...) ...), return the replacement expression.\n+   If X itself is a (SUBREG (VAR) ...), return the replacement expression.\n    Otherwise return X, with its contents possibly altered.\n \n-   INSN, PROMOTED_MODE and UNCRITICAL are as for\n-   fixup_memory_subreg.  */\n+   INSN and UNCRITICAL are as for fixup_memory_subreg.  */\n \n static rtx\n-walk_fixup_memory_subreg (rtx x, rtx insn, enum machine_mode promoted_mode,\n-\t\t\t  int uncritical)\n+walk_fixup_memory_subreg (rtx x, rtx insn, rtx var,\n+\t\t\t  enum machine_mode promoted_mode, int uncritical)\n {\n   enum rtx_code code;\n   const char *fmt;\n@@ -2622,7 +2622,7 @@ walk_fixup_memory_subreg (rtx x, rtx insn, enum machine_mode promoted_mode,\n \n   code = GET_CODE (x);\n \n-  if (code == SUBREG && GET_CODE (SUBREG_REG (x)) == MEM)\n+  if (code == SUBREG && SUBREG_REG (x) == var)\n     return fixup_memory_subreg (x, insn, promoted_mode, uncritical);\n \n   /* Nothing special about this RTX; fix its operands.  */\n@@ -2631,14 +2631,14 @@ walk_fixup_memory_subreg (rtx x, rtx insn, enum machine_mode promoted_mode,\n   for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n     {\n       if (fmt[i] == 'e')\n-\tXEXP (x, i) = walk_fixup_memory_subreg (XEXP (x, i), insn,\n+\tXEXP (x, i) = walk_fixup_memory_subreg (XEXP (x, i), insn, var,\n \t\t\t\t\t\tpromoted_mode, uncritical);\n       else if (fmt[i] == 'E')\n \t{\n \t  int j;\n \t  for (j = 0; j < XVECLEN (x, i); j++)\n \t    XVECEXP (x, i, j)\n-\t      = walk_fixup_memory_subreg (XVECEXP (x, i, j), insn,\n+\t      = walk_fixup_memory_subreg (XVECEXP (x, i, j), insn, var,\n \t\t\t\t\t  promoted_mode, uncritical);\n \t}\n     }"}]}