{"sha": "704bc4bb36a0b091c42955608c47aee4d43faf8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA0YmM0YmIzNmEwYjA5MWM0Mjk1NTYwOGM0N2FlZTRkNDNmYWY4ZA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-09-26T07:40:09Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-09-26T07:40:09Z"}, "message": "Add TODO_update_ssa for SLP BB vectorization (PR tree-optimization/91885).\n\n2019-09-26  Martin Liska  <mliska@suse.cz>\n\n\tPR tree-optimization/91885\n\t* tree-vectorizer.c (try_vectorize_loop_1):\n\tAdd TODO_update_ssa_only_virtuals similarly to what slp\n\tpass does.\n2019-09-26  Martin Liska  <mliska@suse.cz>\n\n\tPR tree-optimization/91885\n\t* gcc.dg/pr91885.c: New test.\n\nFrom-SVN: r276141", "tree": {"sha": "d7f610c10ad1dc89da8a96170fdf799c484c5444", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7f610c10ad1dc89da8a96170fdf799c484c5444"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/704bc4bb36a0b091c42955608c47aee4d43faf8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/704bc4bb36a0b091c42955608c47aee4d43faf8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/704bc4bb36a0b091c42955608c47aee4d43faf8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/704bc4bb36a0b091c42955608c47aee4d43faf8d/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "835d50c66aa5bde2f354a6e63a2afa7d2f76a05a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/835d50c66aa5bde2f354a6e63a2afa7d2f76a05a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/835d50c66aa5bde2f354a6e63a2afa7d2f76a05a"}], "stats": {"total": 61, "additions": 60, "deletions": 1}, "files": [{"sha": "f876c5b9ce0208ed4add97936d5251bbc45467f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/704bc4bb36a0b091c42955608c47aee4d43faf8d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/704bc4bb36a0b091c42955608c47aee4d43faf8d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=704bc4bb36a0b091c42955608c47aee4d43faf8d", "patch": "@@ -1,3 +1,10 @@\n+2019-09-26  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/91885\n+\t* tree-vectorizer.c (try_vectorize_loop_1):\n+\tAdd TODO_update_ssa_only_virtuals similarly to what slp\n+\tpass does.\n+\n 2019-09-26  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_rtx_costs): Use"}, {"sha": "1f99dbd1c8e0df1605d0c4f4a340544f4dc44477", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/704bc4bb36a0b091c42955608c47aee4d43faf8d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/704bc4bb36a0b091c42955608c47aee4d43faf8d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=704bc4bb36a0b091c42955608c47aee4d43faf8d", "patch": "@@ -1,3 +1,8 @@\n+2019-09-26  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/91885\n+\t* gcc.dg/pr91885.c: New test.\n+\n 2019-09-25  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/91877 - ICE with converting member of packed struct."}, {"sha": "934e8d3e6c3451e1f1c2404ce632d581b347a824", "filename": "gcc/testsuite/gcc.dg/pr91885.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/704bc4bb36a0b091c42955608c47aee4d43faf8d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr91885.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/704bc4bb36a0b091c42955608c47aee4d43faf8d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr91885.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr91885.c?ref=704bc4bb36a0b091c42955608c47aee4d43faf8d", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fprofile-generate\" } */\n+/* { dg-require-profiling \"-fprofile-generate\" } */\n+\n+typedef signed long int __int64_t;\n+typedef unsigned long int __uint64_t;\n+typedef __int64_t int64_t;\n+typedef __uint64_t uint64_t;\n+inline void\n+BLI_endian_switch_int64 (int64_t *val)\n+{\n+  uint64_t tval = *val;\n+  *val = ((tval >> 56)) | ((tval << 40) & 0x00ff000000000000ll)\n+\t | ((tval << 24) & 0x0000ff0000000000ll)\n+\t | ((tval << 8) & 0x000000ff00000000ll)\n+\t | ((tval >> 8) & 0x00000000ff000000ll)\n+\t | ((tval >> 24) & 0x0000000000ff0000ll)\n+\t | ((tval >> 40) & 0x000000000000ff00ll) | ((tval << 56));\n+}\n+typedef struct anim_index_entry\n+{\n+  unsigned long long seek_pos_dts;\n+  unsigned long long pts;\n+} anim_index_entry;\n+extern struct anim_index_entry *\n+MEM_callocN (int);\n+struct anim_index\n+{\n+  int num_entries;\n+  struct anim_index_entry *entries;\n+};\n+struct anim_index *\n+IMB_indexer_open (const char *name)\n+{\n+  char header[13];\n+  struct anim_index *idx;\n+  int i;\n+  idx->entries = MEM_callocN (8);\n+  if (((1 == 0) != (header[8] == 'V')))\n+    {\n+      for (i = 0; i < idx->num_entries; i++)\n+\t{\n+\t  BLI_endian_switch_int64 ((int64_t *) &idx->entries[i].seek_pos_dts);\n+\t  BLI_endian_switch_int64 ((int64_t *) &idx->entries[i].pts);\n+\t}\n+    }\n+}"}, {"sha": "8fb70b751daf97b94206f208d999b61f137313ee", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/704bc4bb36a0b091c42955608c47aee4d43faf8d/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/704bc4bb36a0b091c42955608c47aee4d43faf8d/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=704bc4bb36a0b091c42955608c47aee4d43faf8d", "patch": "@@ -943,7 +943,7 @@ try_vectorize_loop_1 (hash_table<simduid_to_vf> *&simduid_to_vf_htab,\n \t      fold_loop_internal_call (loop_vectorized_call,\n \t\t\t\t       boolean_true_node);\n \t      loop_vectorized_call = NULL;\n-\t      ret |= TODO_cleanup_cfg;\n+\t      ret |= TODO_cleanup_cfg | TODO_update_ssa_only_virtuals;\n \t    }\n \t}\n       /* If outer loop vectorization fails for LOOP_VECTORIZED guarded"}]}