{"sha": "74ee24e23e96dde8a338a140c3cadd0bb7715e61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRlZTI0ZTIzZTk2ZGRlOGEzMzhhMTQwYzNjYWRkMGJiNzcxNWU2MQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2018-12-29T18:10:57Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2018-12-29T18:10:57Z"}, "message": "re PR fortran/88342 (Possible bug with IEEE_POSITIVE_INF and -ffpe-trap=overflow)\n\n2018-12-29  Steven G. Kargl  <kargl@gcc.gnu.org>\n      \n\tPR fortran/88342\n\t* ieee/ieee_arithmetic.F90: Prevent exceptions in IEEE_VALUE if\n\t-ffpe-trap=invalid or -ffpe-trap=overflow is used.\n\n2018-12-29  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/88342\n\t* gfortran.dg/ieee/ieee_10.f90:  New test.\n\nFrom-SVN: r267465", "tree": {"sha": "c4db89870b3f2233336a7b41c8e8316631d340f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4db89870b3f2233336a7b41c8e8316631d340f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74ee24e23e96dde8a338a140c3cadd0bb7715e61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74ee24e23e96dde8a338a140c3cadd0bb7715e61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74ee24e23e96dde8a338a140c3cadd0bb7715e61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74ee24e23e96dde8a338a140c3cadd0bb7715e61/comments", "author": null, "committer": null, "parents": [{"sha": "0b774babfb8e8cee784cba061d245868e2e2d3aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b774babfb8e8cee784cba061d245868e2e2d3aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b774babfb8e8cee784cba061d245868e2e2d3aa"}], "stats": {"total": 161, "additions": 160, "deletions": 1}, "files": [{"sha": "109441d80b2d03308692b844827069c7b6649ae5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ee24e23e96dde8a338a140c3cadd0bb7715e61/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ee24e23e96dde8a338a140c3cadd0bb7715e61/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=74ee24e23e96dde8a338a140c3cadd0bb7715e61", "patch": "@@ -1,3 +1,8 @@\n+2018-12-29  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/88342\n+\t* gfortran.dg/ieee/ieee_10.f90:  New test.\n+\n 2018-12-29  Dominique d'Humieres  <dominiq@gcc.gnu.org>\n \n \tPR tree-optimization/68356"}, {"sha": "9eb4620f0f951e2f3912c8e55e4d6305c81c277b", "filename": "gcc/testsuite/gfortran.dg/ieee/ieee_10.f90", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ee24e23e96dde8a338a140c3cadd0bb7715e61/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Fieee_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ee24e23e96dde8a338a140c3cadd0bb7715e61/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Fieee_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Fieee_10.f90?ref=74ee24e23e96dde8a338a140c3cadd0bb7715e61", "patch": "@@ -0,0 +1,32 @@\n+! { dg-do run }\n+! { dg-options \"-ffpe-trap=overflow,invalid\" }\n+program foo\n+\n+   use ieee_arithmetic\n+\n+   implicit none\n+\n+   real x\n+   real(8) y\n+\n+   x = ieee_value(x, ieee_signaling_nan)\n+   if (.not. ieee_is_nan(x)) stop 1\n+   x = ieee_value(x, ieee_quiet_nan)\n+   if (.not. ieee_is_nan(x)) stop 2\n+\n+   x = ieee_value(x, ieee_positive_inf)\n+   if (ieee_is_finite(x)) stop 3\n+   x = ieee_value(x, ieee_negative_inf)\n+   if (ieee_is_finite(x)) stop 4\n+\n+   y = ieee_value(y, ieee_signaling_nan)\n+   if (.not. ieee_is_nan(y)) stop 5\n+   y = ieee_value(y, ieee_quiet_nan)\n+   if (.not. ieee_is_nan(y)) stop 6\n+\n+   y = ieee_value(y, ieee_positive_inf)\n+   if (ieee_is_finite(y)) stop 7\n+   y = ieee_value(y, ieee_negative_inf)\n+   if (ieee_is_finite(y)) stop 8\n+\n+end program foo"}, {"sha": "6eace44944022e106289e5a61980c32293076074", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ee24e23e96dde8a338a140c3cadd0bb7715e61/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ee24e23e96dde8a338a140c3cadd0bb7715e61/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=74ee24e23e96dde8a338a140c3cadd0bb7715e61", "patch": "@@ -1,3 +1,9 @@\n+2018-12-29  Steven G. Kargl  <kargl@gcc.gnu.org>\n+      \n+\tPR fortran/88342\n+\t* ieee/ieee_arithmetic.F90: Prevent exceptions in IEEE_VALUE if\n+\t-ffpe-trap=invalid or -ffpe-trap=overflow is used.\n+\n 2018-12-28  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/81984"}, {"sha": "1cda1c7458be9b900db02f62d58dced1b3208be7", "filename": "libgfortran/ieee/ieee_arithmetic.F90", "status": "modified", "additions": 117, "deletions": 1, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ee24e23e96dde8a338a140c3cadd0bb7715e61/libgfortran%2Fieee%2Fieee_arithmetic.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ee24e23e96dde8a338a140c3cadd0bb7715e61/libgfortran%2Fieee%2Fieee_arithmetic.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fieee%2Fieee_arithmetic.F90?ref=74ee24e23e96dde8a338a140c3cadd0bb7715e61", "patch": "@@ -914,17 +914,39 @@ elemental real(kind=4) function IEEE_VALUE_4(X, CLASS) result(res)\n \n     real(kind=4), intent(in) :: X\n     type(IEEE_CLASS_TYPE), intent(in) :: CLASS\n+    logical flag\n \n     select case (CLASS%hidden)\n       case (1)     ! IEEE_SIGNALING_NAN\n+        if (ieee_support_halting(ieee_invalid)) then\n+           call ieee_get_halting_mode(ieee_invalid, flag)\n+           call ieee_set_halting_mode(ieee_invalid, .false.)\n+        end if\n         res = -1\n         res = sqrt(res)\n+        if (ieee_support_halting(ieee_invalid)) then\n+           call ieee_set_halting_mode(ieee_invalid, flag)\n+        end if\n       case (2)     ! IEEE_QUIET_NAN\n+        if (ieee_support_halting(ieee_invalid)) then\n+           call ieee_get_halting_mode(ieee_invalid, flag)\n+           call ieee_set_halting_mode(ieee_invalid, .false.)\n+        end if\n         res = -1\n         res = sqrt(res)\n+        if (ieee_support_halting(ieee_invalid)) then\n+           call ieee_set_halting_mode(ieee_invalid, flag)\n+        end if\n       case (3)     ! IEEE_NEGATIVE_INF\n+        if (ieee_support_halting(ieee_overflow)) then\n+           call ieee_get_halting_mode(ieee_overflow, flag)\n+           call ieee_set_halting_mode(ieee_overflow, .false.)\n+        end if\n         res = huge(res)\n         res = (-res) * res\n+        if (ieee_support_halting(ieee_overflow)) then\n+           call ieee_set_halting_mode(ieee_overflow, flag)\n+        end if\n       case (4)     ! IEEE_NEGATIVE_NORMAL\n         res = -42\n       case (5)     ! IEEE_NEGATIVE_DENORMAL\n@@ -941,8 +963,15 @@ elemental real(kind=4) function IEEE_VALUE_4(X, CLASS) result(res)\n       case (9)     ! IEEE_POSITIVE_NORMAL\n         res = 42\n       case (10)    ! IEEE_POSITIVE_INF\n+        if (ieee_support_halting(ieee_overflow)) then\n+           call ieee_get_halting_mode(ieee_overflow, flag)\n+           call ieee_set_halting_mode(ieee_overflow, .false.)\n+        end if\n         res = huge(res)\n         res = res * res\n+        if (ieee_support_halting(ieee_overflow)) then\n+           call ieee_set_halting_mode(ieee_overflow, flag)\n+        end if\n       case default ! IEEE_OTHER_VALUE, should not happen\n         res = 0\n      end select\n@@ -952,17 +981,39 @@ elemental real(kind=8) function IEEE_VALUE_8(X, CLASS) result(res)\n \n     real(kind=8), intent(in) :: X\n     type(IEEE_CLASS_TYPE), intent(in) :: CLASS\n+    logical flag\n \n     select case (CLASS%hidden)\n       case (1)     ! IEEE_SIGNALING_NAN\n+        if (ieee_support_halting(ieee_invalid)) then\n+           call ieee_get_halting_mode(ieee_invalid, flag)\n+           call ieee_set_halting_mode(ieee_invalid, .false.)\n+        end if\n         res = -1\n         res = sqrt(res)\n+        if (ieee_support_halting(ieee_invalid)) then\n+           call ieee_set_halting_mode(ieee_invalid, flag)\n+        end if\n       case (2)     ! IEEE_QUIET_NAN\n+        if (ieee_support_halting(ieee_invalid)) then\n+           call ieee_get_halting_mode(ieee_invalid, flag)\n+           call ieee_set_halting_mode(ieee_invalid, .false.)\n+        end if\n         res = -1\n         res = sqrt(res)\n+        if (ieee_support_halting(ieee_invalid)) then\n+           call ieee_set_halting_mode(ieee_invalid, flag)\n+        end if\n       case (3)     ! IEEE_NEGATIVE_INF\n+        if (ieee_support_halting(ieee_overflow)) then\n+           call ieee_get_halting_mode(ieee_overflow, flag)\n+           call ieee_set_halting_mode(ieee_overflow, .false.)\n+        end if\n         res = huge(res)\n         res = (-res) * res\n+        if (ieee_support_halting(ieee_overflow)) then\n+           call ieee_set_halting_mode(ieee_overflow, flag)\n+        end if\n       case (4)     ! IEEE_NEGATIVE_NORMAL\n         res = -42\n       case (5)     ! IEEE_NEGATIVE_DENORMAL\n@@ -979,8 +1030,15 @@ elemental real(kind=8) function IEEE_VALUE_8(X, CLASS) result(res)\n       case (9)     ! IEEE_POSITIVE_NORMAL\n         res = 42\n       case (10)    ! IEEE_POSITIVE_INF\n+        if (ieee_support_halting(ieee_overflow)) then\n+           call ieee_get_halting_mode(ieee_overflow, flag)\n+           call ieee_set_halting_mode(ieee_overflow, .false.)\n+        end if\n         res = huge(res)\n         res = res * res\n+        if (ieee_support_halting(ieee_overflow)) then\n+           call ieee_set_halting_mode(ieee_overflow, flag)\n+        end if\n       case default ! IEEE_OTHER_VALUE, should not happen\n         res = 0\n      end select\n@@ -991,17 +1049,39 @@ elemental real(kind=10) function IEEE_VALUE_10(X, CLASS) result(res)\n \n     real(kind=10), intent(in) :: X\n     type(IEEE_CLASS_TYPE), intent(in) :: CLASS\n+    logical flag\n \n     select case (CLASS%hidden)\n       case (1)     ! IEEE_SIGNALING_NAN\n+        if (ieee_support_halting(ieee_invalid)) then\n+           call ieee_get_halting_mode(ieee_invalid, flag)\n+           call ieee_set_halting_mode(ieee_invalid, .false.)\n+        end if\n         res = -1\n         res = sqrt(res)\n+        if (ieee_support_halting(ieee_invalid)) then\n+           call ieee_set_halting_mode(ieee_invalid, flag)\n+        end if\n       case (2)     ! IEEE_QUIET_NAN\n+        if (ieee_support_halting(ieee_invalid)) then\n+           call ieee_get_halting_mode(ieee_invalid, flag)\n+           call ieee_set_halting_mode(ieee_invalid, .false.)\n+        end if\n         res = -1\n         res = sqrt(res)\n-      case (3)     ! IEEE_NEGATIVE_INF\n+        if (ieee_support_halting(ieee_invalid)) then\n+           call ieee_set_halting_mode(ieee_invalid, flag)\n+        end if\n+     case (3)     ! IEEE_NEGATIVE_INF\n+        if (ieee_support_halting(ieee_overflow)) then\n+           call ieee_get_halting_mode(ieee_overflow, flag)\n+           call ieee_set_halting_mode(ieee_overflow, .false.)\n+        end if\n         res = huge(res)\n         res = (-res) * res\n+        if (ieee_support_halting(ieee_overflow)) then\n+           call ieee_set_halting_mode(ieee_overflow, flag)\n+        end if\n       case (4)     ! IEEE_NEGATIVE_NORMAL\n         res = -42\n       case (5)     ! IEEE_NEGATIVE_DENORMAL\n@@ -1018,8 +1098,15 @@ elemental real(kind=10) function IEEE_VALUE_10(X, CLASS) result(res)\n       case (9)     ! IEEE_POSITIVE_NORMAL\n         res = 42\n       case (10)    ! IEEE_POSITIVE_INF\n+        if (ieee_support_halting(ieee_overflow)) then\n+           call ieee_get_halting_mode(ieee_overflow, flag)\n+           call ieee_set_halting_mode(ieee_overflow, .false.)\n+        end if\n         res = huge(res)\n         res = res * res\n+        if (ieee_support_halting(ieee_overflow)) then\n+           call ieee_set_halting_mode(ieee_overflow, flag)\n+        end if\n       case default ! IEEE_OTHER_VALUE, should not happen\n         res = 0\n      end select\n@@ -1032,17 +1119,39 @@ elemental real(kind=16) function IEEE_VALUE_16(X, CLASS) result(res)\n \n     real(kind=16), intent(in) :: X\n     type(IEEE_CLASS_TYPE), intent(in) :: CLASS\n+    logical flag\n \n     select case (CLASS%hidden)\n       case (1)     ! IEEE_SIGNALING_NAN\n+        if (ieee_support_halting(ieee_invalid)) then\n+           call ieee_get_halting_mode(ieee_invalid, flag)\n+           call ieee_set_halting_mode(ieee_invalid, .false.)\n+        end if\n         res = -1\n         res = sqrt(res)\n+        if (ieee_support_halting(ieee_invalid)) then\n+           call ieee_set_halting_mode(ieee_invalid, flag)\n+        end if\n       case (2)     ! IEEE_QUIET_NAN\n+        if (ieee_support_halting(ieee_invalid)) then\n+           call ieee_get_halting_mode(ieee_invalid, flag)\n+           call ieee_set_halting_mode(ieee_invalid, .false.)\n+        end if\n         res = -1\n         res = sqrt(res)\n+        if (ieee_support_halting(ieee_invalid)) then\n+           call ieee_set_halting_mode(ieee_invalid, flag)\n+        end if\n       case (3)     ! IEEE_NEGATIVE_INF\n+        if (ieee_support_halting(ieee_overflow)) then\n+           call ieee_get_halting_mode(ieee_overflow, flag)\n+           call ieee_set_halting_mode(ieee_overflow, .false.)\n+        end if\n         res = huge(res)\n         res = (-res) * res\n+        if (ieee_support_halting(ieee_overflow)) then\n+           call ieee_set_halting_mode(ieee_overflow, flag)\n+        end if\n       case (4)     ! IEEE_NEGATIVE_NORMAL\n         res = -42\n       case (5)     ! IEEE_NEGATIVE_DENORMAL\n@@ -1059,8 +1168,15 @@ elemental real(kind=16) function IEEE_VALUE_16(X, CLASS) result(res)\n       case (9)     ! IEEE_POSITIVE_NORMAL\n         res = 42\n       case (10)    ! IEEE_POSITIVE_INF\n+        if (ieee_support_halting(ieee_overflow)) then\n+           call ieee_get_halting_mode(ieee_overflow, flag)\n+           call ieee_set_halting_mode(ieee_overflow, .false.)\n+        end if\n         res = huge(res)\n         res = res * res\n+        if (ieee_support_halting(ieee_overflow)) then\n+           call ieee_set_halting_mode(ieee_overflow, flag)\n+        end if\n       case default ! IEEE_OTHER_VALUE, should not happen\n         res = 0\n      end select"}]}