{"sha": "7994803c00a3aba210f76d3b61c53300c549969d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk5NDgwM2MwMGEzYWJhMjEwZjc2ZDNiNjFjNTMzMDBjNTQ5OTY5ZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2019-09-11T11:28:00Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2019-09-11T11:28:00Z"}, "message": "[PATCH] some tree struct marking\n\nhttps://gcc.gnu.org/ml/gcc-patches/2019-09/msg00697.html\n\tgcc/\n\t* tree.h (MARK_TS_TYPE_NON_COMMON): New.\n\t* tree.c (tree_node_structure_for_code): Reformat and alphabetize.\n\n\tgcc/cp/\n\t* c-objcp-common.c (cp-objcp-common.c): Alphababetize and\n\tcorrectly mark all C++ nodes.\n\nFrom-SVN: r275641", "tree": {"sha": "53238e6ab4a6b07c7a62af42261477fb24818efb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53238e6ab4a6b07c7a62af42261477fb24818efb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7994803c00a3aba210f76d3b61c53300c549969d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7994803c00a3aba210f76d3b61c53300c549969d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7994803c00a3aba210f76d3b61c53300c549969d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7994803c00a3aba210f76d3b61c53300c549969d/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5a307ee54bca63865b6e5e8ad690720adf0b9d78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a307ee54bca63865b6e5e8ad690720adf0b9d78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a307ee54bca63865b6e5e8ad690720adf0b9d78"}], "stats": {"total": 266, "additions": 140, "deletions": 126}, "files": [{"sha": "608f3b92600cc9d0ab17864efc53987ee3e62d96", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7994803c00a3aba210f76d3b61c53300c549969d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7994803c00a3aba210f76d3b61c53300c549969d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7994803c00a3aba210f76d3b61c53300c549969d", "patch": "@@ -1,3 +1,8 @@\n+2019-09-11  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* tree.h (MARK_TS_TYPE_NON_COMMON): New.\n+\t* tree.c (tree_node_structure_for_code): Reformat and alphabetize.\n+\n 2019-09-11  Richard Biener  <rguenther@suse.de>\n \n \t* lto-opts.c (lto_write_options): Stream -g when debug is enabled."}, {"sha": "8f266a222d5e1de86c01292385198d72952d63e8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7994803c00a3aba210f76d3b61c53300c549969d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7994803c00a3aba210f76d3b61c53300c549969d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7994803c00a3aba210f76d3b61c53300c549969d", "patch": "@@ -1,3 +1,9 @@\n+2019-09-11  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* c-objcp-common.c (cp-objcp-common.c): Alphababetize and\n+\tcorrectly mark all C++ nodes.\n+\t* decl.c (cp_tree_node_structure): Alphabetize.\n+\n 2019-09-10  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/91673 - ICE with noexcept in alias-declaration."}, {"sha": "4369a5b55707aaeea8ca51db75d7fab1f7786371", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 81, "deletions": 72, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7994803c00a3aba210f76d3b61c53300c549969d/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7994803c00a3aba210f76d3b61c53300c549969d/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=7994803c00a3aba210f76d3b61c53300c549969d", "patch": "@@ -365,104 +365,113 @@ cp_register_dumps (gcc::dump_manager *dumps)\n void\n cp_common_init_ts (void)\n {\n-  MARK_TS_DECL_NON_COMMON (USING_DECL);\n-  MARK_TS_DECL_COMMON (TEMPLATE_DECL);\n-  MARK_TS_DECL_COMMON (WILDCARD_DECL);\n+  /* With type.  */\n+  MARK_TS_TYPED (PTRMEM_CST);\n+  MARK_TS_TYPED (LAMBDA_EXPR);\n+  MARK_TS_TYPED (TYPE_ARGUMENT_PACK);\n \n-  MARK_TS_COMMON (TEMPLATE_TEMPLATE_PARM);\n-  MARK_TS_COMMON (TEMPLATE_TYPE_PARM);\n-  MARK_TS_COMMON (TEMPLATE_PARM_INDEX);\n+  /* Random new trees.  */\n+  MARK_TS_COMMON (BASELINK);\n+  MARK_TS_COMMON (DECLTYPE_TYPE);\n   MARK_TS_COMMON (OVERLOAD);\n+  MARK_TS_COMMON (TEMPLATE_PARM_INDEX);\n   MARK_TS_COMMON (TYPENAME_TYPE);\n   MARK_TS_COMMON (TYPEOF_TYPE);\n-  MARK_TS_COMMON (UNDERLYING_TYPE);\n-  MARK_TS_COMMON (BASELINK);\n-  MARK_TS_COMMON (TYPE_PACK_EXPANSION);\n-  MARK_TS_COMMON (TYPE_ARGUMENT_PACK);\n-  MARK_TS_COMMON (DECLTYPE_TYPE);\n-  MARK_TS_COMMON (BOUND_TEMPLATE_TEMPLATE_PARM);\n   MARK_TS_COMMON (UNBOUND_CLASS_TEMPLATE);\n+  MARK_TS_COMMON (UNDERLYING_TYPE);\n \n-  MARK_TS_TYPED (SWITCH_STMT);\n-  MARK_TS_TYPED (IF_STMT);\n-  MARK_TS_TYPED (FOR_STMT);\n-  MARK_TS_TYPED (RANGE_FOR_STMT);\n-  MARK_TS_TYPED (EH_SPEC_BLOCK);\n-  MARK_TS_TYPED (CLEANUP_STMT);\n-  MARK_TS_TYPED (SCOPE_REF);\n-  MARK_TS_TYPED (TRY_BLOCK);\n-  MARK_TS_TYPED (HANDLER);\n-  MARK_TS_TYPED (TYPE_ARGUMENT_PACK);\n-  MARK_TS_TYPED (NOEXCEPT_EXPR);\n-  MARK_TS_TYPED (WHILE_STMT);\n-  MARK_TS_TYPED (BREAK_STMT);\n-  MARK_TS_TYPED (DO_STMT);\n-  MARK_TS_TYPED (CONTINUE_STMT);\n-  MARK_TS_TYPED (PTRMEM_CST);\n-  MARK_TS_TYPED (USING_STMT);\n-  MARK_TS_TYPED (OMP_DEPOBJ);\n+  /* New decls.  */\n+  MARK_TS_DECL_COMMON (TEMPLATE_DECL);\n+  MARK_TS_DECL_COMMON (WILDCARD_DECL);\n+\n+  MARK_TS_DECL_NON_COMMON (USING_DECL);\n \n+  /* New Types.  */\n+  MARK_TS_TYPE_NON_COMMON (BOUND_TEMPLATE_TEMPLATE_PARM);\n+  MARK_TS_TYPE_NON_COMMON (TEMPLATE_TEMPLATE_PARM);\n+  MARK_TS_TYPE_NON_COMMON (TEMPLATE_TYPE_PARM);\n+  MARK_TS_TYPE_NON_COMMON (TYPE_ARGUMENT_PACK);\n+  MARK_TS_TYPE_NON_COMMON (TYPE_PACK_EXPANSION);\n+\n+  /* Statements.  */\n+  MARK_TS_EXP (BREAK_STMT);\n+  MARK_TS_EXP (CLEANUP_STMT);\n+  MARK_TS_EXP (CONTINUE_STMT);\n+  MARK_TS_EXP (DO_STMT);\n+  MARK_TS_EXP (EH_SPEC_BLOCK);\n+  MARK_TS_EXP (FOR_STMT);\n+  MARK_TS_EXP (HANDLER);\n+  MARK_TS_EXP (IF_STMT);\n+  MARK_TS_EXP (OMP_DEPOBJ);\n+  MARK_TS_EXP (RANGE_FOR_STMT);\n+  MARK_TS_EXP (SWITCH_STMT);\n+  MARK_TS_EXP (TRY_BLOCK);\n+  MARK_TS_EXP (USING_STMT);\n+  MARK_TS_EXP (WHILE_STMT);\n+\n+  /* Random expressions.  */\n+  MARK_TS_EXP (ADDRESSOF_EXPR);\n   MARK_TS_EXP (AGGR_INIT_EXPR);\n+  MARK_TS_EXP (ALIGNOF_EXPR);\n+  MARK_TS_EXP (ARROW_EXPR);\n+  MARK_TS_EXP (AT_ENCODE_EXPR);\n+  MARK_TS_EXP (CAST_EXPR);\n+  MARK_TS_EXP (CONST_CAST_EXPR);\n   MARK_TS_EXP (CTOR_INITIALIZER);\n-  MARK_TS_EXP (EXPR_STMT);\n-  MARK_TS_EXP (TAG_DEFN);\n+  MARK_TS_EXP (DELETE_EXPR);\n+  MARK_TS_EXP (DOTSTAR_EXPR);\n+  MARK_TS_EXP (DYNAMIC_CAST_EXPR);\n   MARK_TS_EXP (EMPTY_CLASS_EXPR);\n+  MARK_TS_EXP (EXPR_STMT);\n+  MARK_TS_EXP (IMPLICIT_CONV_EXPR);\n+  MARK_TS_EXP (MEMBER_REF);\n   MARK_TS_EXP (MODOP_EXPR);\n-  MARK_TS_EXP (THROW_EXPR);\n-  MARK_TS_EXP (CAST_EXPR);\n-  MARK_TS_EXP (TYPE_EXPR);\n+  MARK_TS_EXP (MUST_NOT_THROW_EXPR);\n+  MARK_TS_EXP (NEW_EXPR);\n+  MARK_TS_EXP (NOEXCEPT_EXPR);\n+  MARK_TS_EXP (NON_DEPENDENT_EXPR);\n+  MARK_TS_EXP (OFFSETOF_EXPR);\n+  MARK_TS_EXP (OFFSET_REF);\n+  MARK_TS_EXP (PSEUDO_DTOR_EXPR);\n   MARK_TS_EXP (REINTERPRET_CAST_EXPR);\n-  MARK_TS_EXP (CONST_CAST_EXPR);\n+  MARK_TS_EXP (SCOPE_REF);\n   MARK_TS_EXP (STATIC_CAST_EXPR);\n-  MARK_TS_EXP (DYNAMIC_CAST_EXPR);\n-  MARK_TS_EXP (IMPLICIT_CONV_EXPR);\n+  MARK_TS_EXP (STMT_EXPR);\n+  MARK_TS_EXP (TAG_DEFN);\n   MARK_TS_EXP (TEMPLATE_ID_EXPR);\n-  MARK_TS_EXP (ARROW_EXPR);\n-  MARK_TS_EXP (UNARY_PLUS_EXPR);\n+  MARK_TS_EXP (THROW_EXPR);\n   MARK_TS_EXP (TRAIT_EXPR);\n-\n-  MARK_TS_EXP (NON_DEPENDENT_EXPR);\n-  MARK_TS_EXP (NEW_EXPR);\n-  MARK_TS_EXP (VEC_NEW_EXPR);\n-  MARK_TS_EXP (MEMBER_REF);\n-  MARK_TS_EXP (DOTSTAR_EXPR);\n-  MARK_TS_EXP (DELETE_EXPR);\n-  MARK_TS_EXP (VEC_DELETE_EXPR);\n-  MARK_TS_EXP (PSEUDO_DTOR_EXPR);\n   MARK_TS_EXP (TYPEID_EXPR);\n-  MARK_TS_EXP (MUST_NOT_THROW_EXPR);\n-  MARK_TS_EXP (STMT_EXPR);\n-  MARK_TS_EXP (OFFSET_REF);\n-  MARK_TS_EXP (OFFSETOF_EXPR);\n-  MARK_TS_EXP (ADDRESSOF_EXPR);\n+  MARK_TS_EXP (TYPE_EXPR);\n+  MARK_TS_EXP (UNARY_PLUS_EXPR);\n+  MARK_TS_EXP (VEC_DELETE_EXPR);\n   MARK_TS_EXP (VEC_INIT_EXPR);\n-  MARK_TS_EXP (LAMBDA_EXPR);\n-\n-  MARK_TS_EXP (ALIGNOF_EXPR);\n-  MARK_TS_EXP (AT_ENCODE_EXPR);\n+  MARK_TS_EXP (VEC_NEW_EXPR);\n \n-  MARK_TS_EXP (NONTYPE_ARGUMENT_PACK);\n+  /* Fold expressions.  */\n+  MARK_TS_EXP (BINARY_LEFT_FOLD_EXPR);\n+  MARK_TS_EXP (BINARY_RIGHT_FOLD_EXPR);\n   MARK_TS_EXP (EXPR_PACK_EXPANSION);\n+  MARK_TS_EXP (NONTYPE_ARGUMENT_PACK);\n   MARK_TS_EXP (UNARY_LEFT_FOLD_EXPR);\n   MARK_TS_EXP (UNARY_RIGHT_FOLD_EXPR);\n-  MARK_TS_EXP (BINARY_LEFT_FOLD_EXPR);\n-  MARK_TS_EXP (BINARY_RIGHT_FOLD_EXPR);\n \n-  MARK_TS_EXP (REQUIRES_EXPR);\n-  MARK_TS_EXP (SIMPLE_REQ);\n-  MARK_TS_EXP (TYPE_REQ);\n-  MARK_TS_EXP (COMPOUND_REQ);\n-  MARK_TS_EXP (NESTED_REQ);\n-  MARK_TS_EXP (PRED_CONSTR);\n+  /* Constraints.  */\n   MARK_TS_EXP (CHECK_CONSTR);\n-  MARK_TS_EXP (EXPR_CONSTR);\n-  MARK_TS_EXP (TYPE_CONSTR);\n-  MARK_TS_EXP (ICONV_CONSTR);\n+  MARK_TS_EXP (COMPOUND_REQ);\n+  MARK_TS_EXP (CONJ_CONSTR);\n   MARK_TS_EXP (DEDUCT_CONSTR);\n+  MARK_TS_EXP (DISJ_CONSTR);\n   MARK_TS_EXP (EXCEPT_CONSTR);\n+  MARK_TS_EXP (EXPR_CONSTR);\n+  MARK_TS_EXP (ICONV_CONSTR);\n+  MARK_TS_EXP (NESTED_REQ);\n   MARK_TS_EXP (PARM_CONSTR);\n-  MARK_TS_EXP (CONJ_CONSTR);\n-  MARK_TS_EXP (DISJ_CONSTR);\n+  MARK_TS_EXP (PRED_CONSTR);\n+  MARK_TS_EXP (REQUIRES_EXPR);\n+  MARK_TS_EXP (SIMPLE_REQ);\n+  MARK_TS_EXP (TYPE_CONSTR);\n+  MARK_TS_EXP (TYPE_REQ);\n \n   c_common_init_ts ();\n }"}, {"sha": "9218eefa0b4d60e2fd2d39d4ed17c34601447fc7", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7994803c00a3aba210f76d3b61c53300c549969d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7994803c00a3aba210f76d3b61c53300c549969d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=7994803c00a3aba210f76d3b61c53300c549969d", "patch": "@@ -16827,20 +16827,20 @@ cp_tree_node_structure (union lang_tree_node * t)\n {\n   switch (TREE_CODE (&t->generic))\n     {\n-    case DEFERRED_PARSE:\treturn TS_CP_DEFERRED_PARSE;\n+    case ARGUMENT_PACK_SELECT:  return TS_CP_ARGUMENT_PACK_SELECT;\n+    case BASELINK:\t\treturn TS_CP_BASELINK;\n+    case CONSTRAINT_INFO:       return TS_CP_CONSTRAINT_INFO;\n     case DEFERRED_NOEXCEPT:\treturn TS_CP_DEFERRED_NOEXCEPT;\n+    case DEFERRED_PARSE:\treturn TS_CP_DEFERRED_PARSE;\n     case IDENTIFIER_NODE:\treturn TS_CP_IDENTIFIER;\n+    case LAMBDA_EXPR:\t\treturn TS_CP_LAMBDA_EXPR;\n     case OVERLOAD:\t\treturn TS_CP_OVERLOAD;\n-    case TEMPLATE_PARM_INDEX:\treturn TS_CP_TPI;\n     case PTRMEM_CST:\t\treturn TS_CP_PTRMEM;\n-    case BASELINK:\t\treturn TS_CP_BASELINK;\n-    case TEMPLATE_DECL:\t\treturn TS_CP_TEMPLATE_DECL;\n     case STATIC_ASSERT:\t\treturn TS_CP_STATIC_ASSERT;\n-    case ARGUMENT_PACK_SELECT:  return TS_CP_ARGUMENT_PACK_SELECT;\n-    case TRAIT_EXPR:\t\treturn TS_CP_TRAIT_EXPR;\n-    case LAMBDA_EXPR:\t\treturn TS_CP_LAMBDA_EXPR;\n+    case TEMPLATE_DECL:\t\treturn TS_CP_TEMPLATE_DECL;\n     case TEMPLATE_INFO:\t\treturn TS_CP_TEMPLATE_INFO;\n-    case CONSTRAINT_INFO:       return TS_CP_CONSTRAINT_INFO;\n+    case TEMPLATE_PARM_INDEX:\treturn TS_CP_TPI;\n+    case TRAIT_EXPR:\t\treturn TS_CP_TRAIT_EXPR;\n     case USERDEF_LITERAL:\treturn TS_CP_USERDEF_LITERAL;\n     default:\t\t\treturn TS_CP_GENERIC;\n     }"}, {"sha": "6be756c19ee17f77a4f434c08646ce4da419115c", "filename": "gcc/tree.c", "status": "modified", "additions": 36, "deletions": 46, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7994803c00a3aba210f76d3b61c53300c549969d/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7994803c00a3aba210f76d3b61c53300c549969d/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=7994803c00a3aba210f76d3b61c53300c549969d", "patch": "@@ -455,71 +455,61 @@ tree_node_structure_for_code (enum tree_code code)\n   switch (TREE_CODE_CLASS (code))\n     {\n     case tcc_declaration:\n-      {\n-\tswitch (code)\n-\t  {\n-\t  case FIELD_DECL:\n-\t    return TS_FIELD_DECL;\n-\t  case PARM_DECL:\n-\t    return TS_PARM_DECL;\n-\t  case VAR_DECL:\n-\t    return TS_VAR_DECL;\n-\t  case LABEL_DECL:\n-\t    return TS_LABEL_DECL;\n-\t  case RESULT_DECL:\n-\t    return TS_RESULT_DECL;\n-\t  case DEBUG_EXPR_DECL:\n-\t    return TS_DECL_WRTL;\n-\t  case CONST_DECL:\n-\t    return TS_CONST_DECL;\n-\t  case TYPE_DECL:\n-\t    return TS_TYPE_DECL;\n-\t  case FUNCTION_DECL:\n-\t    return TS_FUNCTION_DECL;\n-\t  case TRANSLATION_UNIT_DECL:\n-\t    return TS_TRANSLATION_UNIT_DECL;\n-\t  default:\n-\t    return TS_DECL_NON_COMMON;\n-\t  }\n-      }\n-    case tcc_type:\n-      return TS_TYPE_NON_COMMON;\n-    case tcc_reference:\n-    case tcc_comparison:\n-    case tcc_unary:\n+      switch (code)\n+\t{\n+\tcase CONST_DECL:\treturn TS_CONST_DECL;\n+\tcase DEBUG_EXPR_DECL:\treturn TS_DECL_WRTL;\n+\tcase FIELD_DECL:\treturn TS_FIELD_DECL;\n+\tcase FUNCTION_DECL:\treturn TS_FUNCTION_DECL;\n+\tcase LABEL_DECL:\treturn TS_LABEL_DECL;\n+\tcase PARM_DECL:\t\treturn TS_PARM_DECL;\n+\tcase RESULT_DECL:\treturn TS_RESULT_DECL;\n+\tcase TRANSLATION_UNIT_DECL: return TS_TRANSLATION_UNIT_DECL;\n+\tcase TYPE_DECL:\t\treturn TS_TYPE_DECL;\n+\tcase VAR_DECL:\t\treturn TS_VAR_DECL;\n+\tdefault: \t\treturn TS_DECL_NON_COMMON;\n+\t}\n+\n+    case tcc_type:\t\treturn TS_TYPE_NON_COMMON;\n+\n     case tcc_binary:\n+    case tcc_comparison:\n     case tcc_expression:\n+    case tcc_reference:\n     case tcc_statement:\n-    case tcc_vl_exp:\n-      return TS_EXP;\n+    case tcc_unary:\n+    case tcc_vl_exp:\t\treturn TS_EXP;\n+\n     default:  /* tcc_constant and tcc_exceptional */\n       break;\n     }\n+\n   switch (code)\n     {\n       /* tcc_constant cases.  */\n-    case VOID_CST:\t\treturn TS_TYPED;\n+    case COMPLEX_CST:\t\treturn TS_COMPLEX;\n+    case FIXED_CST:\t\treturn TS_FIXED_CST;\n     case INTEGER_CST:\t\treturn TS_INT_CST;\n     case POLY_INT_CST:\t\treturn TS_POLY_INT_CST;\n     case REAL_CST:\t\treturn TS_REAL_CST;\n-    case FIXED_CST:\t\treturn TS_FIXED_CST;\n-    case COMPLEX_CST:\t\treturn TS_COMPLEX;\n-    case VECTOR_CST:\t\treturn TS_VECTOR;\n     case STRING_CST:\t\treturn TS_STRING;\n+    case VECTOR_CST:\t\treturn TS_VECTOR;\n+    case VOID_CST:\t\treturn TS_TYPED;\n+\n       /* tcc_exceptional cases.  */\n-    case ERROR_MARK:\t\treturn TS_COMMON;\n-    case IDENTIFIER_NODE:\treturn TS_IDENTIFIER;\n-    case TREE_LIST:\t\treturn TS_LIST;\n-    case TREE_VEC:\t\treturn TS_VEC;\n-    case SSA_NAME:\t\treturn TS_SSA_NAME;\n-    case PLACEHOLDER_EXPR:\treturn TS_COMMON;\n-    case STATEMENT_LIST:\treturn TS_STATEMENT_LIST;\n     case BLOCK:\t\t\treturn TS_BLOCK;\n     case CONSTRUCTOR:\t\treturn TS_CONSTRUCTOR;\n-    case TREE_BINFO:\t\treturn TS_BINFO;\n+    case ERROR_MARK:\t\treturn TS_COMMON;\n+    case IDENTIFIER_NODE:\treturn TS_IDENTIFIER;\n     case OMP_CLAUSE:\t\treturn TS_OMP_CLAUSE;\n     case OPTIMIZATION_NODE:\treturn TS_OPTIMIZATION;\n+    case PLACEHOLDER_EXPR:\treturn TS_COMMON;\n+    case SSA_NAME:\t\treturn TS_SSA_NAME;\n+    case STATEMENT_LIST:\treturn TS_STATEMENT_LIST;\n     case TARGET_OPTION_NODE:\treturn TS_TARGET_OPTION;\n+    case TREE_BINFO:\t\treturn TS_BINFO;\n+    case TREE_LIST:\t\treturn TS_LIST;\n+    case TREE_VEC:\t\treturn TS_VEC;\n \n     default:\n       gcc_unreachable ();"}, {"sha": "3fc36a4d0874cd5fdfb62f606f8eae27eae99ec8", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7994803c00a3aba210f76d3b61c53300c549969d/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7994803c00a3aba210f76d3b61c53300c549969d/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=7994803c00a3aba210f76d3b61c53300c549969d", "patch": "@@ -94,6 +94,10 @@ as_internal_fn (combined_fn code)\n   (MARK_TS_TYPE_COMMON (C),\t\t\t\t\\\n    tree_contains_struct[C][TS_TYPE_WITH_LANG_SPECIFIC] = true)\n \n+#define MARK_TS_TYPE_NON_COMMON(C)\t\t\t\\\n+  (MARK_TS_TYPE_WITH_LANG_SPECIFIC (C),\t\t\t\\\n+   tree_contains_struct[C][TS_TYPE_NON_COMMON] = true)\t\\\n+\n #define MARK_TS_DECL_MINIMAL(C)\t\t\t\t\\\n   (MARK_TS_COMMON (C),\t\t\t\t\t\\\n    tree_contains_struct[C][TS_DECL_MINIMAL] = true)"}]}