{"sha": "f94ae9875d386e651defd8f8c802cb41e77a6ba0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk0YWU5ODc1ZDM4NmU2NTFkZWZkOGY4YzgwMmNiNDFlNzdhNmJhMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-06-22T04:36:43Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-06-22T04:36:43Z"}, "message": "semantics.c (check_trait_type): Check COMPLETE_TYPE_P for array element type.\n\n\t* semantics.c (check_trait_type): Check COMPLETE_TYPE_P for array\n\telement type.\n\nFrom-SVN: r161129", "tree": {"sha": "c7ac26bb0bdecb85d7a7f0d50535abe861557a48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7ac26bb0bdecb85d7a7f0d50535abe861557a48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f94ae9875d386e651defd8f8c802cb41e77a6ba0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f94ae9875d386e651defd8f8c802cb41e77a6ba0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f94ae9875d386e651defd8f8c802cb41e77a6ba0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f94ae9875d386e651defd8f8c802cb41e77a6ba0/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "143f3a1610e52883d858244031564f816e7de8be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/143f3a1610e52883d858244031564f816e7de8be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/143f3a1610e52883d858244031564f816e7de8be"}], "stats": {"total": 36, "additions": 23, "deletions": 13}, "files": [{"sha": "131030e6a0dd549d9a0a38e880e4b8ec30303cdc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f94ae9875d386e651defd8f8c802cb41e77a6ba0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f94ae9875d386e651defd8f8c802cb41e77a6ba0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f94ae9875d386e651defd8f8c802cb41e77a6ba0", "patch": "@@ -1,3 +1,8 @@\n+2010-06-21  Jason Merrill  <jason@redhat.com>\n+\n+\t* semantics.c (check_trait_type): Check COMPLETE_TYPE_P for array\n+\telement type.\n+\n 2010-06-17  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* name-lookup.c (struct arg_lookup): Convert namespaces and"}, {"sha": "4869cfc47e9ed1be3f7d58c7ac28a820baefd8af", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f94ae9875d386e651defd8f8c802cb41e77a6ba0/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f94ae9875d386e651defd8f8c802cb41e77a6ba0/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=f94ae9875d386e651defd8f8c802cb41e77a6ba0", "patch": "@@ -5152,7 +5152,8 @@ check_trait_type (tree type)\n   if (COMPLETE_TYPE_P (type))\n     return true;\n \n-  if (TREE_CODE (type) == ARRAY_TYPE && !TYPE_DOMAIN (type))\n+  if (TREE_CODE (type) == ARRAY_TYPE && !TYPE_DOMAIN (type)\n+      && COMPLETE_TYPE_P (TREE_TYPE (type)))\n     return true;\n \n   if (VOID_TYPE_P (type))"}, {"sha": "8443f23a7f793fc4f1b649d4aa165abd35963fc9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f94ae9875d386e651defd8f8c802cb41e77a6ba0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f94ae9875d386e651defd8f8c802cb41e77a6ba0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f94ae9875d386e651defd8f8c802cb41e77a6ba0", "patch": "@@ -1,3 +1,7 @@\n+2010-06-21  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/ext/unary_trait_incomplete.C: Adjust.\n+\n 2010-06-21  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/44615"}, {"sha": "51cc80cd2ac508e3466de39a0bca2dcb0c962039", "filename": "gcc/testsuite/g++.dg/ext/unary_trait_incomplete.C", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f94ae9875d386e651defd8f8c802cb41e77a6ba0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funary_trait_incomplete.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f94ae9875d386e651defd8f8c802cb41e77a6ba0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funary_trait_incomplete.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funary_trait_incomplete.C?ref=f94ae9875d386e651defd8f8c802cb41e77a6ba0", "patch": "@@ -5,72 +5,72 @@ struct C { };\n \n bool nas1 = __has_nothrow_assign(I); // { dg-error \"incomplete type\" }\n bool nas2 = __has_nothrow_assign(C[]);\n-bool nas3 = __has_nothrow_assign(I[]);\n+bool nas3 = __has_nothrow_assign(I[]); // { dg-error \"incomplete type\" }\n bool nas4 = __has_nothrow_assign(void);\n bool nas5 = __has_nothrow_assign(const void);\n \n bool tas1 = __has_trivial_assign(I); // { dg-error \"incomplete type\" }\n bool tas2 = __has_trivial_assign(C[]);\n-bool tas3 = __has_trivial_assign(I[]);\n+bool tas3 = __has_trivial_assign(I[]); // { dg-error \"incomplete type\" }\n bool tas4 = __has_trivial_assign(void);\n bool tas5 = __has_trivial_assign(const void);\n \n bool nco1 = __has_nothrow_constructor(I); // { dg-error \"incomplete type\" }\n bool nco2 = __has_nothrow_constructor(C[]);\n-bool nco3 = __has_nothrow_constructor(I[]);\n+bool nco3 = __has_nothrow_constructor(I[]); // { dg-error \"incomplete type\" }\n bool nco4 = __has_nothrow_constructor(void);\n bool nco5 = __has_nothrow_constructor(const void);\n \n bool tco1 = __has_trivial_constructor(I); // { dg-error \"incomplete type\" }\n bool tco2 = __has_trivial_constructor(C[]);\n-bool tco3 = __has_trivial_constructor(I[]);\n+bool tco3 = __has_trivial_constructor(I[]); // { dg-error \"incomplete type\" }\n bool tco4 = __has_trivial_constructor(void);\n bool tco5 = __has_trivial_constructor(const void);\n \n bool ncp1 = __has_nothrow_copy(I); // { dg-error \"incomplete type\" }\n bool ncp2 = __has_nothrow_copy(C[]);\n-bool ncp3 = __has_nothrow_copy(I[]);\n+bool ncp3 = __has_nothrow_copy(I[]); // { dg-error \"incomplete type\" }\n bool ncp4 = __has_nothrow_copy(void);\n bool ncp5 = __has_nothrow_copy(const void);\n \n bool tcp1 = __has_trivial_copy(I); // { dg-error \"incomplete type\" }\n bool tcp2 = __has_trivial_copy(C[]);\n-bool tcp3 = __has_trivial_copy(I[]);\n+bool tcp3 = __has_trivial_copy(I[]); // { dg-error \"incomplete type\" }\n bool tcp4 = __has_trivial_copy(void);\n bool tcp5 = __has_trivial_copy(const void);\n \n bool vde1 = __has_virtual_destructor(I); // { dg-error \"incomplete type\" }\n bool vde2 = __has_virtual_destructor(C[]);\n-bool vde3 = __has_virtual_destructor(I[]);\n+bool vde3 = __has_virtual_destructor(I[]); // { dg-error \"incomplete type\" }\n bool vde4 = __has_virtual_destructor(void);\n bool vde5 = __has_virtual_destructor(const void);\n \n bool tde1 = __has_trivial_destructor(I); // { dg-error \"incomplete type\" }\n bool tde2 = __has_trivial_destructor(C[]);\n-bool tde3 = __has_trivial_destructor(I[]);\n+bool tde3 = __has_trivial_destructor(I[]); // { dg-error \"incomplete type\" }\n bool tde4 = __has_trivial_destructor(void);\n bool tde5 = __has_trivial_destructor(const void);\n \n bool abs1 = __is_abstract(I); // { dg-error \"incomplete type\" }\n bool abs2 = __is_abstract(C[]);\n-bool abs3 = __is_abstract(I[]);\n+bool abs3 = __is_abstract(I[]); // { dg-error \"incomplete type\" }\n bool abs4 = __is_abstract(void);\n bool abs5 = __is_abstract(const void);\n \n bool pod1 = __is_pod(I); // { dg-error \"incomplete type\" }\n bool pod2 = __is_pod(C[]);\n-bool pod3 = __is_pod(I[]);\n+bool pod3 = __is_pod(I[]); // { dg-error \"incomplete type\" }\n bool pod4 = __is_pod(void);\n bool pod5 = __is_pod(const void);\n \n bool emp1 = __is_empty(I); // { dg-error \"incomplete type\" }\n bool emp2 = __is_empty(C[]);\n-bool emp3 = __is_empty(I[]);\n+bool emp3 = __is_empty(I[]); // { dg-error \"incomplete type\" }\n bool emp4 = __is_empty(void);\n bool emp5 = __is_empty(const void);\n \n bool pol1 = __is_polymorphic(I); // { dg-error \"incomplete type\" }\n bool pol2 = __is_polymorphic(C[]);\n-bool pol3 = __is_polymorphic(I[]);\n+bool pol3 = __is_polymorphic(I[]); // { dg-error \"incomplete type\" }\n bool pol4 = __is_polymorphic(void);\n bool pol5 = __is_polymorphic(const void);"}]}