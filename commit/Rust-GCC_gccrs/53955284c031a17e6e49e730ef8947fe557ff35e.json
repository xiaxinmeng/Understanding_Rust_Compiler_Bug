{"sha": "53955284c031a17e6e49e730ef8947fe557ff35e", "node_id": "C_kwDOANBUbNoAKDUzOTU1Mjg0YzAzMWExN2U2ZTQ5ZTczMGVmODk0N2ZlNTU3ZmYzNWU", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-10-11T18:37:42Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-10-11T21:04:32Z"}, "message": "Fortran: check types of source expressions before conversion [PR107215]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/107215\n\t* arith.cc (gfc_int2int): Check validity of type of source expr.\n\t(gfc_int2real): Likewise.\n\t(gfc_int2complex): Likewise.\n\t(gfc_real2int): Likewise.\n\t(gfc_real2real): Likewise.\n\t(gfc_complex2int): Likewise.\n\t(gfc_complex2real): Likewise.\n\t(gfc_complex2complex): Likewise.\n\t(gfc_log2log): Likewise.\n\t(gfc_log2int): Likewise.\n\t(gfc_int2log): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/107215\n\t* gfortran.dg/pr107215.f90: New test.", "tree": {"sha": "8b820f12b12da064fb8900ac90a100d8b236bb03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b820f12b12da064fb8900ac90a100d8b236bb03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53955284c031a17e6e49e730ef8947fe557ff35e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53955284c031a17e6e49e730ef8947fe557ff35e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53955284c031a17e6e49e730ef8947fe557ff35e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53955284c031a17e6e49e730ef8947fe557ff35e/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23c3cbaed36f6d2f3a7a64f6ebda69329723514b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23c3cbaed36f6d2f3a7a64f6ebda69329723514b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23c3cbaed36f6d2f3a7a64f6ebda69329723514b"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "9e079e42995b561fe872aed5925e5a805b9ab3ff", "filename": "gcc/fortran/arith.cc", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53955284c031a17e6e49e730ef8947fe557ff35e/gcc%2Ffortran%2Farith.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53955284c031a17e6e49e730ef8947fe557ff35e/gcc%2Ffortran%2Farith.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.cc?ref=53955284c031a17e6e49e730ef8947fe557ff35e", "patch": "@@ -2040,6 +2040,9 @@ gfc_int2int (gfc_expr *src, int kind)\n   gfc_expr *result;\n   arith rc;\n \n+  if (src->ts.type != BT_INTEGER)\n+    return NULL;\n+\n   result = gfc_get_constant_expr (BT_INTEGER, kind, &src->where);\n \n   mpz_set (result->value.integer, src->value.integer);\n@@ -2085,6 +2088,9 @@ gfc_int2real (gfc_expr *src, int kind)\n   gfc_expr *result;\n   arith rc;\n \n+  if (src->ts.type != BT_INTEGER)\n+    return NULL;\n+\n   result = gfc_get_constant_expr (BT_REAL, kind, &src->where);\n \n   mpfr_set_z (result->value.real, src->value.integer, GFC_RND_MODE);\n@@ -2116,6 +2122,9 @@ gfc_int2complex (gfc_expr *src, int kind)\n   gfc_expr *result;\n   arith rc;\n \n+  if (src->ts.type != BT_INTEGER)\n+    return NULL;\n+\n   result = gfc_get_constant_expr (BT_COMPLEX, kind, &src->where);\n \n   mpc_set_z (result->value.complex, src->value.integer, GFC_MPC_RND_MODE);\n@@ -2150,6 +2159,9 @@ gfc_real2int (gfc_expr *src, int kind)\n   arith rc;\n   bool did_warn = false;\n \n+  if (src->ts.type != BT_REAL)\n+    return NULL;\n+\n   result = gfc_get_constant_expr (BT_INTEGER, kind, &src->where);\n \n   gfc_mpfr_to_mpz (result->value.integer, src->value.real, &src->where);\n@@ -2196,6 +2208,9 @@ gfc_real2real (gfc_expr *src, int kind)\n   arith rc;\n   bool did_warn = false;\n \n+  if (src->ts.type != BT_REAL)\n+    return NULL;\n+\n   result = gfc_get_constant_expr (BT_REAL, kind, &src->where);\n \n   mpfr_set (result->value.real, src->value.real, GFC_RND_MODE);\n@@ -2310,6 +2325,9 @@ gfc_complex2int (gfc_expr *src, int kind)\n   arith rc;\n   bool did_warn = false;\n \n+  if (src->ts.type != BT_COMPLEX)\n+    return NULL;\n+\n   result = gfc_get_constant_expr (BT_INTEGER, kind, &src->where);\n \n   gfc_mpfr_to_mpz (result->value.integer, mpc_realref (src->value.complex),\n@@ -2372,6 +2390,9 @@ gfc_complex2real (gfc_expr *src, int kind)\n   arith rc;\n   bool did_warn = false;\n \n+  if (src->ts.type != BT_COMPLEX)\n+    return NULL;\n+\n   result = gfc_get_constant_expr (BT_REAL, kind, &src->where);\n \n   mpc_real (result->value.real, src->value.complex, GFC_RND_MODE);\n@@ -2439,6 +2460,9 @@ gfc_complex2complex (gfc_expr *src, int kind)\n   arith rc;\n   bool did_warn = false;\n \n+  if (src->ts.type != BT_COMPLEX)\n+    return NULL;\n+\n   result = gfc_get_constant_expr (BT_COMPLEX, kind, &src->where);\n \n   mpc_set (result->value.complex, src->value.complex, GFC_MPC_RND_MODE);\n@@ -2504,6 +2528,9 @@ gfc_log2log (gfc_expr *src, int kind)\n {\n   gfc_expr *result;\n \n+  if (src->ts.type != BT_LOGICAL)\n+    return NULL;\n+\n   result = gfc_get_constant_expr (BT_LOGICAL, kind, &src->where);\n   result->value.logical = src->value.logical;\n \n@@ -2518,6 +2545,9 @@ gfc_log2int (gfc_expr *src, int kind)\n {\n   gfc_expr *result;\n \n+  if (src->ts.type != BT_LOGICAL)\n+    return NULL;\n+\n   result = gfc_get_constant_expr (BT_INTEGER, kind, &src->where);\n   mpz_set_si (result->value.integer, src->value.logical);\n \n@@ -2532,6 +2562,9 @@ gfc_int2log (gfc_expr *src, int kind)\n {\n   gfc_expr *result;\n \n+  if (src->ts.type != BT_INTEGER)\n+    return NULL;\n+\n   result = gfc_get_constant_expr (BT_LOGICAL, kind, &src->where);\n   result->value.logical = (mpz_cmp_si (src->value.integer, 0) != 0);\n "}, {"sha": "2c2a0ca750200167837b8a6be7d8205c4b218886", "filename": "gcc/testsuite/gfortran.dg/pr107215.f90", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53955284c031a17e6e49e730ef8947fe557ff35e/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr107215.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53955284c031a17e6e49e730ef8947fe557ff35e/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr107215.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr107215.f90?ref=53955284c031a17e6e49e730ef8947fe557ff35e", "patch": "@@ -0,0 +1,17 @@\n+! { dg-do compile }\n+! PR fortran/107215 - ICE in gfc_real2real and gfc_complex2complex\n+! Contributed by G.Steinmetz\n+\n+program p\n+  double precision, parameter :: z = 1.0d0\n+  complex :: x(1)\n+  real    :: y(1)\n+  x = [real :: -'1'] * z      ! { dg-error \"Operand of unary numeric operator\" }\n+  y = z * [real :: -'1']      ! { dg-error \"Operand of unary numeric operator\" }\n+  x = [real :: -(.true.)] * z ! { dg-error \"Operand of unary numeric operator\" }\n+  y = z * [real :: -(.true.)] ! { dg-error \"Operand of unary numeric operator\" }\n+  x = [complex :: -'1'] * z   ! { dg-error \"Operand of unary numeric operator\" }\n+  y = z * [complex :: -'1']   ! { dg-error \"Operand of unary numeric operator\" }\n+  x = [complex :: -(.true.)] * z ! { dg-error \"Operand of unary numeric operator\" }\n+  y = z * [complex :: -(.true.)] ! { dg-error \"Operand of unary numeric operator\" }\n+end"}]}