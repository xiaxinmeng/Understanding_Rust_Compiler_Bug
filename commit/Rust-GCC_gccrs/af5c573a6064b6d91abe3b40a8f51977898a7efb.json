{"sha": "af5c573a6064b6d91abe3b40a8f51977898a7efb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY1YzU3M2E2MDY0YjZkOTFhYmUzYjQwYThmNTE5Nzc4OThhN2VmYg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "2001-07-10T16:27:54Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2001-07-10T16:27:54Z"}, "message": "ssa-ccp.c (first_phi_node): Remove.\n\n        * ssa-ccp.c (first_phi_node): Remove.  Replace uses with calls to\n        first_insn_after_basic_block_note instead.\n\n        * df.c (df_bb_refs_unlink): #if 0 out for now.\n\n        * ssa.h: Add prototype for ssa_const_prop\n        * ssa-ccp.c: Add prototype for ssa_fast_dce and mark_references\n        (ssa_ccp_substitute_constants): Fix signed vs unsigned comparison\n        (ssa_fast_dce): Remove unused variable\n\nFrom-SVN: r43906", "tree": {"sha": "293c0299d13f461414925ccfc4ceaef8e4353007", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/293c0299d13f461414925ccfc4ceaef8e4353007"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af5c573a6064b6d91abe3b40a8f51977898a7efb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af5c573a6064b6d91abe3b40a8f51977898a7efb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af5c573a6064b6d91abe3b40a8f51977898a7efb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af5c573a6064b6d91abe3b40a8f51977898a7efb/comments", "author": null, "committer": null, "parents": [{"sha": "64dfaa76b383d88cb3ee825148d533f83fe51843", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64dfaa76b383d88cb3ee825148d533f83fe51843", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64dfaa76b383d88cb3ee825148d533f83fe51843"}], "stats": {"total": 58, "additions": 25, "deletions": 33}, "files": [{"sha": "e6ff663dd34b8df9117355fc820bec930679a3b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af5c573a6064b6d91abe3b40a8f51977898a7efb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af5c573a6064b6d91abe3b40a8f51977898a7efb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af5c573a6064b6d91abe3b40a8f51977898a7efb", "patch": "@@ -1,3 +1,17 @@\n+Tue Jul 10 09:04:45 2001  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* ssa-ccp.c (first_phi_node): Remove.  Replace uses with calls to\n+\tfirst_insn_after_basic_block_note instead.\n+\n+\t* df.c (df_bb_refs_unlink): #if 0 out for now.\n+\n+2001-07-10  David Billinghurst <David.Billinghurst@riotinto.com\n+\n+\t* ssa.h: Add prototype for ssa_const_prop\n+\t* ssa-ccp.c: Add prototype for ssa_fast_dce and mark_references\n+\t(ssa_ccp_substitute_constants): Fix signed vs unsigned comparison\n+\t(ssa_fast_dce): Remove unused variable\n+\n 2001-07-10  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n \n \t* diagnostic.c (finish_diagnostic): Rename to"}, {"sha": "36ae66f783fe39c9151e9ee635397e2bae74d412", "filename": "gcc/df.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af5c573a6064b6d91abe3b40a8f51977898a7efb/gcc%2Fdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af5c573a6064b6d91abe3b40a8f51977898a7efb/gcc%2Fdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.c?ref=af5c573a6064b6d91abe3b40a8f51977898a7efb", "patch": "@@ -218,8 +218,8 @@ static struct df_link *df_ref_unlink PARAMS((struct df_link **, struct ref *));\n static void df_def_unlink PARAMS((struct df *, struct ref *));\n static void df_use_unlink PARAMS((struct df *, struct ref *));\n static void df_insn_refs_unlink PARAMS ((struct df *, basic_block, rtx));\n-static void df_bb_refs_unlink PARAMS ((struct df *, basic_block));\n #if 0\n+static void df_bb_refs_unlink PARAMS ((struct df *, basic_block));\n static void df_refs_unlink PARAMS ((struct df *, bitmap));\n #endif\n \n@@ -2513,6 +2513,7 @@ df_insn_refs_unlink (df, bb, insn)\n }\n \n \n+#if 0\n /* Unlink all the insns within BB from their reference information.  */\n static void\n df_bb_refs_unlink (df, bb)\n@@ -2535,7 +2536,6 @@ df_bb_refs_unlink (df, bb)\n }\n \n \n-#if 0\n /* Unlink all the refs in the basic blocks specified by BLOCKS.\n    Not currently used.  */\n static void"}, {"sha": "2b5e592cb0996041b4b3ff97ddef97ba18b3d00b", "filename": "gcc/ssa-ccp.c", "status": "modified", "additions": 5, "deletions": 31, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af5c573a6064b6d91abe3b40a8f51977898a7efb/gcc%2Fssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af5c573a6064b6d91abe3b40a8f51977898a7efb/gcc%2Fssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssa-ccp.c?ref=af5c573a6064b6d91abe3b40a8f51977898a7efb", "patch": "@@ -123,41 +123,17 @@ static sbitmap ssa_edges;\n #define PHI_PARMS(x) XVEC (SET_SRC (x), 0)\n #define EIE(x,y) EDGE_INDEX (edges, x, y)\n \n-rtx first_phi_node              PARAMS ((basic_block));\n static void visit_phi_node             PARAMS ((rtx, basic_block));\n static void visit_expression           PARAMS ((rtx, basic_block));\n static void defs_to_undefined          PARAMS ((rtx));\n static void defs_to_varying            PARAMS ((rtx));\n static void examine_flow_edges         PARAMS ((void));\n+static int mark_references             PARAMS ((rtx *, void *));\n static void follow_def_use_chains      PARAMS ((void));\n static void optimize_unexecutable_edges PARAMS ((struct edge_list *, sbitmap));\n static void ssa_ccp_substitute_constants PARAMS ((void));\n static void ssa_ccp_df_delete_unreachable_insns PARAMS ((void));\n-\n-/* Return the first PHI node in a basic block.  This routine knows\n-   what INSNs can start a basic block and what can validly follow\n-   them up to the first PHI node.\n-\n-   If the INSN chain or block structures are incorrect, then the behavior\n-   of this routine is undefined.  verify_flow_info will normally catch\n-   these problems in a more graceful manner.  */\n-rtx\n-first_phi_node (block)\n-     basic_block block;\n-{\n-  rtx insn = block->head;\n-\n-  /* Eat the optional CODE_LABEL at the start of the block.  */\n-  if (GET_CODE (insn) == CODE_LABEL)\n-    insn = NEXT_INSN (insn);\n-\n-  /* Eat the mandatory NOTE_INSN_BASIC_BLOCK.  */\n-  if (!NOTE_INSN_BASIC_BLOCK_P (insn) || NOTE_BASIC_BLOCK (insn) != block)\n-    abort ();\n-\n-  /* If there is a PHI node in this block, then it will be the next insn.  */\n-  return NEXT_INSN (insn);\n-}\n+static void ssa_fast_dce PARAMS ((struct df *));\n \n /* Loop through the PHI_NODE's parameters for BLOCK and compare their\n    lattice values to determine PHI_NODE's lattice value.  */\n@@ -638,7 +614,7 @@ examine_flow_edges (void)\n \n       /* Always simulate PHI nodes, even if we have simulated this block\n \t before.  Note that all PHI nodes are consecutive within a block.  */\n-      for (curr_phi_node = first_phi_node (succ_block);\n+      for (curr_phi_node = first_insn_after_basic_block_note (succ_block);\n \t   PHI_NODE_P (curr_phi_node);\n \t   curr_phi_node = NEXT_INSN (curr_phi_node))\n \tvisit_phi_node (curr_phi_node, succ_block);\n@@ -751,7 +727,7 @@ optimize_unexecutable_edges (edges, executable_edges)\n \t     the PHI nodes in the target block.  */\n \t  if (edge->dest != EXIT_BLOCK_PTR)\n \t    {\n-\t      rtx insn = first_phi_node (edge->dest);\n+\t      rtx insn = first_insn_after_basic_block_note (edge->dest);\n \n \t      while (PHI_NODE_P (insn))\n \t\t{\n@@ -840,7 +816,7 @@ optimize_unexecutable_edges (edges, executable_edges)\n static void\n ssa_ccp_substitute_constants ()\n {\n-  int i;\n+  unsigned int i;\n \n   for (i = FIRST_PSEUDO_REGISTER; i < VARRAY_SIZE (ssa_definition); i++)\n     {\n@@ -1159,8 +1135,6 @@ ssa_fast_dce (df)\n       found_use = 0;\n       for (curruse = df->regs[reg].uses; curruse; curruse = curruse->next)\n \t{\n-\t  rtx useinsn;\n-\n \t  if (curruse->ref\n \t      && DF_REF_INSN (curruse->ref)\n \t      && ! INSN_DELETED_P (DF_REF_INSN (curruse->ref))"}, {"sha": "bf9a04106fc1e77d9657ff1cb4c6eae8fb3492f3", "filename": "gcc/ssa.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af5c573a6064b6d91abe3b40a8f51977898a7efb/gcc%2Fssa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af5c573a6064b6d91abe3b40a8f51977898a7efb/gcc%2Fssa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssa.h?ref=af5c573a6064b6d91abe3b40a8f51977898a7efb", "patch": "@@ -35,6 +35,10 @@ extern int remove_phi_alternative\tPARAMS ((rtx, basic_block));\n /* In ssa-dce.c */\n extern void ssa_eliminate_dead_code\tPARAMS ((void));\n \n+/* In ssa-ccp.c */\n+extern void ssa_const_prop\t\tPARAMS ((void));\n+\n+\n /* SSA definitions and uses.  */\n /* This flag is set when the CFG is in SSA form.  */\n extern int in_ssa_form;"}]}