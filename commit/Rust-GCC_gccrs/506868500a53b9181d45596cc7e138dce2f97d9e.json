{"sha": "506868500a53b9181d45596cc7e138dce2f97d9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA2ODY4NTAwYTUzYjkxODFkNDU1OTZjYzdlMTM4ZGNlMmY5N2Q5ZQ==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde@tbsaunde.org", "date": "2015-08-19T02:48:16Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-08-19T02:48:16Z"}, "message": "remove useless typedefs\n\ngcc/ChangeLog:\n\n2015-08-11  trevor Saunders  <tbsaunde@tbsaunde.org>\n\n\t* bt-load.c, cgraph.h, dwarf2out.c, dwarf2out.h, final.c,\n\tfunction.c, graphite-scop-detection.c, haifa-sched.c,\n\tipa-devirt.c, ipa-split.c, recog.c, ree.c, stmt.c,\n\ttree-data-ref.c, tree-ssa-dom.c, tree-ssa-loop-ivopts.c,\n\tvarasm.c: Remove typedefs of structs.\n\nFrom-SVN: r227000", "tree": {"sha": "635f05175292691ee1ddfb5191b1bbd36cff2ce7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/635f05175292691ee1ddfb5191b1bbd36cff2ce7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/506868500a53b9181d45596cc7e138dce2f97d9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/506868500a53b9181d45596cc7e138dce2f97d9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/506868500a53b9181d45596cc7e138dce2f97d9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/506868500a53b9181d45596cc7e138dce2f97d9e/comments", "author": {"login": "tbsaunde", "id": 349840, "node_id": "MDQ6VXNlcjM0OTg0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/349840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbsaunde", "html_url": "https://github.com/tbsaunde", "followers_url": "https://api.github.com/users/tbsaunde/followers", "following_url": "https://api.github.com/users/tbsaunde/following{/other_user}", "gists_url": "https://api.github.com/users/tbsaunde/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbsaunde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbsaunde/subscriptions", "organizations_url": "https://api.github.com/users/tbsaunde/orgs", "repos_url": "https://api.github.com/users/tbsaunde/repos", "events_url": "https://api.github.com/users/tbsaunde/events{/privacy}", "received_events_url": "https://api.github.com/users/tbsaunde/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9e110892a30acb3a7b405e9b19c1074e7ad59846", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e110892a30acb3a7b405e9b19c1074e7ad59846", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e110892a30acb3a7b405e9b19c1074e7ad59846"}], "stats": {"total": 96, "additions": 50, "deletions": 46}, "files": [{"sha": "db23a0f07d4b15cf8b05249e690d48c256776fcf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=506868500a53b9181d45596cc7e138dce2f97d9e", "patch": "@@ -1,3 +1,11 @@\n+2015-08-18  trevor Saunders  <tbsaunde@tbsaunde.org>\n+\n+\t* bt-load.c, cgraph.h, dwarf2out.c, dwarf2out.h, final.c,\n+\tfunction.c, graphite-scop-detection.c, haifa-sched.c,\n+\tipa-devirt.c, ipa-split.c, recog.c, ree.c, stmt.c,\n+\ttree-data-ref.c, tree-ssa-dom.c, tree-ssa-loop-ivopts.c,\n+\tvarasm.c: Remove typedefs of structs.\n+\n 2015-08-18  Bill Schmidt  <wschmidt@vnet.linux.ibm.com>\n \n \t* config/rs6000/altivec.h (vec_adde): New define."}, {"sha": "5d8b752bd2c3131f40abd5348c7ab0312f64ce07", "filename": "gcc/bt-load.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2Fbt-load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2Fbt-load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbt-load.c?ref=506868500a53b9181d45596cc7e138dce2f97d9e", "patch": "@@ -404,13 +404,13 @@ note_other_use_this_block (unsigned int regno, btr_user users_this_bb)\n       user->other_use_this_block = 1;\n }\n \n-typedef struct {\n+struct defs_uses_info {\n   btr_user users_this_bb;\n   HARD_REG_SET btrs_written_in_block;\n   HARD_REG_SET btrs_live_in_block;\n   sbitmap bb_gen;\n   sbitmap *btr_defset;\n-} defs_uses_info;\n+};\n \n /* Called via note_stores or directly to register stores into /\n    clobbers of a branch target register DEST that are not recognized as"}, {"sha": "6607b1127c27411cfc793f759e15ba774a91ec87", "filename": "gcc/cgraph.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=506868500a53b9181d45596cc7e138dce2f97d9e", "patch": "@@ -39,16 +39,14 @@ enum symtab_type\n /* Section names are stored as reference counted strings in GGC safe hashtable\n    (to make them survive through PCH).  */\n \n-struct GTY((for_user)) section_hash_entry_d\n+struct GTY((for_user)) section_hash_entry\n {\n   int ref_count;\n   char *name;  /* As long as this datastructure stays in GGC, we can not put\n \t\t  string at the tail of structure of GGC dies in horrible\n \t\t  way  */\n };\n \n-typedef struct section_hash_entry_d section_hash_entry;\n-\n struct section_name_hasher : ggc_ptr_hash<section_hash_entry>\n {\n   typedef const char *compare_type;"}, {"sha": "d9d3063be1dda620f3e1e800d3d53cc5f6616d8c", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=506868500a53b9181d45596cc7e138dce2f97d9e", "patch": "@@ -1258,7 +1258,7 @@ enum ate_kind {\n   ate_kind_label\n };\n \n-typedef struct GTY((for_user)) addr_table_entry_struct {\n+struct GTY((for_user)) addr_table_entry {\n   enum ate_kind kind;\n   unsigned int refcount;\n   unsigned int index;\n@@ -1268,8 +1268,7 @@ typedef struct GTY((for_user)) addr_table_entry_struct {\n       char * GTY ((tag (\"1\"))) label;\n     }\n   GTY ((desc (\"%1.kind\"))) addr;\n-}\n-addr_table_entry;\n+};\n \n /* Location lists are ranges + location descriptions for that range,\n    so you can track variables that are in different places over"}, {"sha": "4fe3527326a9786c66ae5f22694d99094684ae0c", "filename": "gcc/dwarf2out.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2Fdwarf2out.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2Fdwarf2out.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.h?ref=506868500a53b9181d45596cc7e138dce2f97d9e", "patch": "@@ -161,14 +161,14 @@ struct GTY(()) dw_vec_const {\n   unsigned elt_size;\n };\n \n-struct addr_table_entry_struct;\n+struct addr_table_entry;\n \n /* The dw_val_node describes an attribute's value, as it is\n    represented internally.  */\n \n struct GTY(()) dw_val_node {\n   enum dw_val_class val_class;\n-  struct addr_table_entry_struct * GTY(()) val_entry;\n+  struct addr_table_entry * GTY(()) val_entry;\n   union dw_val_struct_union\n     {\n       rtx GTY ((tag (\"dw_val_class_addr\"))) val_addr;"}, {"sha": "f01f4fcb11a327271ae7c8cc15ff05d7039113f2", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=506868500a53b9181d45596cc7e138dce2f97d9e", "patch": "@@ -1518,14 +1518,14 @@ asm_str_count (const char *templ)\n /* Structure recording the mapping from source file and directory\n    names at compile time to those to be embedded in debug\n    information.  */\n-typedef struct debug_prefix_map\n+struct debug_prefix_map\n {\n   const char *old_prefix;\n   const char *new_prefix;\n   size_t old_len;\n   size_t new_len;\n   struct debug_prefix_map *next;\n-} debug_prefix_map;\n+};\n \n /* Linked list of such structures.  */\n static debug_prefix_map *debug_prefix_maps;"}, {"sha": "5a3c7bcbb3803ed953421e99d3a6916780f491e2", "filename": "gcc/function.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=506868500a53b9181d45596cc7e138dce2f97d9e", "patch": "@@ -1230,18 +1230,18 @@ init_temp_slots (void)\n \n /* Private type used by get_hard_reg_initial_reg, get_hard_reg_initial_val,\n    and has_hard_reg_initial_val..  */\n-typedef struct GTY(()) initial_value_pair {\n+struct GTY(()) initial_value_pair {\n   rtx hard_reg;\n   rtx pseudo;\n-} initial_value_pair;\n+};\n /* ???  This could be a VEC but there is currently no way to define an\n    opaque VEC type.  This could be worked around by defining struct\n    initial_value_pair in function.h.  */\n-typedef struct GTY(()) initial_value_struct {\n+struct GTY(()) initial_value_struct {\n   int num_entries;\n   int max_entries;\n   initial_value_pair * GTY ((length (\"%h.num_entries\"))) entries;\n-} initial_value_struct;\n+};\n \n /* If a pseudo represents an initial hard reg (or expression), return\n    it, else return NULL_RTX.  */"}, {"sha": "b2a4aafdaa00fa615ff1482d522739cb9bd769f8", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=506868500a53b9181d45596cc7e138dce2f97d9e", "patch": "@@ -58,15 +58,15 @@ static void make_close_phi_nodes_unique (basic_block);\n \n /* The type of the analyzed basic block.  */\n \n-typedef enum gbb_type {\n+enum gbb_type {\n   GBB_UNKNOWN,\n   GBB_LOOP_SING_EXIT_HEADER,\n   GBB_LOOP_MULT_EXIT_HEADER,\n   GBB_LOOP_EXIT,\n   GBB_COND_HEADER,\n   GBB_SIMPLE,\n   GBB_LAST\n-} gbb_type;\n+};\n \n /* Detect the type of BB.  Loop headers are only marked, if they are\n    new.  This means their loop_father is different to LAST_LOOP.\n@@ -128,7 +128,7 @@ get_bb_type (basic_block bb, struct loop *last_loop)\n      9\t<- exit  */\n \n \n-typedef struct sd_region_p\n+struct sd_region\n {\n   /* The entry bb dominates all bbs in the sd_region.  It is part of\n      the region.  */\n@@ -137,7 +137,7 @@ typedef struct sd_region_p\n   /* The exit bb postdominates all bbs in the sd_region, but is not\n      part of the region.  */\n   basic_block exit;\n-} sd_region;\n+};\n \n \n "}, {"sha": "c35d777321763650c9b044b2d87493c84f5a6f3f", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=506868500a53b9181d45596cc7e138dce2f97d9e", "patch": "@@ -2569,7 +2569,7 @@ static const char *rfs_str[RFS_N] = {\n   \"RFS_DEP_COUNT\", \"RFS_TIE\", \"RFS_FUSION\" };\n \n /* Statistical breakdown of rank_for_schedule decisions.  */\n-typedef struct { unsigned stats[RFS_N]; } rank_for_schedule_stats_t;\n+struct rank_for_schedule_stats_t { unsigned stats[RFS_N]; };\n static rank_for_schedule_stats_t rank_for_schedule_stats;\n \n /* Return the result of comparing insns TMP and TMP2 and update"}, {"sha": "3eb24560c8281ad84d53fcd540a43ed1949ede45", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=506868500a53b9181d45596cc7e138dce2f97d9e", "patch": "@@ -145,11 +145,11 @@ along with GCC; see the file COPYING3.  If not see\n #include \"lto-streamer.h\"\n \n /* Hash based set of pairs of types.  */\n-typedef struct\n+struct type_pair\n {\n   tree first;\n   tree second;\n-} type_pair;\n+};\n \n template <>\n struct default_hash_traits <type_pair> : typed_noop_remove <type_pair>"}, {"sha": "8bb3e6089cdfe6e548173e8343a7149e2979a938", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=506868500a53b9181d45596cc7e138dce2f97d9e", "patch": "@@ -122,11 +122,11 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Per basic block info.  */\n \n-typedef struct\n+struct split_bb_info\n {\n   unsigned int size;\n   unsigned int time;\n-} split_bb_info;\n+};\n \n static vec<split_bb_info> bb_info_vec;\n \n@@ -1008,7 +1008,7 @@ visit_bb (basic_block bb, basic_block return_bb,\n \n /* Stack entry for recursive DFS walk in find_split_point.  */\n \n-typedef struct\n+struct stack_entry\n {\n   /* Basic block we are examining.  */\n   basic_block bb;\n@@ -1034,7 +1034,7 @@ typedef struct\n \n   /* When false we can not split on this BB.  */\n   bool can_split;\n-} stack_entry;\n+};\n \n \n /* Find all articulations and call consider_split on them."}, {"sha": "c595bbdea5cd2f29eb900217099d0c4fe9b012de", "filename": "gcc/recog.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=506868500a53b9181d45596cc7e138dce2f97d9e", "patch": "@@ -188,14 +188,14 @@ check_asm_operands (rtx x)\n \f\n /* Static data for the next two routines.  */\n \n-typedef struct change_t\n+struct change_t\n {\n   rtx object;\n   int old_code;\n   rtx *loc;\n   rtx old;\n   bool unshare;\n-} change_t;\n+};\n \n static change_t *changes;\n static int changes_allocated;"}, {"sha": "6156eec97ac0abb80b1797ed7e1279070777e10f", "filename": "gcc/ree.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2Free.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2Free.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Free.c?ref=506868500a53b9181d45596cc7e138dce2f97d9e", "patch": "@@ -249,7 +249,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* This structure represents a candidate for elimination.  */\n \n-typedef struct ext_cand\n+struct ext_cand\n {\n   /* The expression.  */\n   const_rtx expr;\n@@ -262,7 +262,7 @@ typedef struct ext_cand\n \n   /* The instruction where it lives.  */\n   rtx_insn *insn;\n-} ext_cand;\n+};\n \n \n static int max_insn_uid;\n@@ -565,7 +565,7 @@ struct ATTRIBUTE_PACKED ext_modified\n };\n \n /* Vectors used by combine_reaching_defs and its helpers.  */\n-typedef struct ext_state\n+struct ext_state\n {\n   /* In order to avoid constant alloc/free, we keep these\n      4 vectors live through the entire find_and_remove_re and just\n@@ -579,7 +579,7 @@ typedef struct ext_state\n      the original mode from which the insn is extending and\n      kind of extension.  */\n   struct ext_modified *modified;\n-} ext_state;\n+};\n \n /* Reaching Definitions of the extended register could be conditional copies\n    or regular definitions.  This function separates the two types into two"}, {"sha": "9d33cbe03e4b0ece148ef6dee9d6eefdd0aeebf5", "filename": "gcc/stmt.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=506868500a53b9181d45596cc7e138dce2f97d9e", "patch": "@@ -106,7 +106,6 @@ struct case_node\n   int                   subtree_prob;\n };\n \n-typedef struct case_node case_node;\n typedef struct case_node *case_node_ptr;\n \n extern basic_block label_to_block_fn (struct function *, tree);"}, {"sha": "ebf9dd23f778062e3382a4cb60b7cf0f9c9a3d85", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=506868500a53b9181d45596cc7e138dce2f97d9e", "patch": "@@ -3798,14 +3798,14 @@ compute_all_dependences (vec<data_reference_p> datarefs,\n \n /* Describes a location of a memory reference.  */\n \n-typedef struct data_ref_loc_d\n+struct data_ref_loc\n {\n   /* The memory reference.  */\n   tree ref;\n \n   /* True if the memory reference is read.  */\n   bool is_read;\n-} data_ref_loc;\n+};\n \n \n /* Stores the locations of memory references in STMT to REFERENCES.  Returns"}, {"sha": "248b0371ebda48f758f0ed8693a32eadd6c91c1f", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=506868500a53b9181d45596cc7e138dce2f97d9e", "patch": "@@ -85,11 +85,11 @@ struct hashable_expr\n /* Structure for recording known values of a conditional expression\n    at the exits from its block.  */\n \n-typedef struct cond_equivalence_s\n+struct cond_equivalence\n {\n   struct hashable_expr cond;\n   tree value;\n-} cond_equivalence;\n+};\n \n \n /* Structure for recording edge equivalences as well as any pending"}, {"sha": "723a9f7f5bc55af509d70fabb3059eaf7b2954ae", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=506868500a53b9181d45596cc7e138dce2f97d9e", "patch": "@@ -169,14 +169,14 @@ enum use_type\n };\n \n /* Cost of a computation.  */\n-typedef struct\n+struct comp_cost\n {\n   int cost;\t\t/* The runtime cost.  */\n   unsigned complexity;\t/* The estimate of the complexity of the code for\n \t\t\t   the computation (in no concrete units --\n \t\t\t   complexity field should be larger for more\n \t\t\t   complex expressions and addressing modes).  */\n-} comp_cost;\n+};\n \n static const comp_cost no_cost = {0, 0};\n static const comp_cost infinite_cost = {INFTY, INFTY};"}, {"sha": "2ebac89f99e6598263a5c82772f074518e553c6f", "filename": "gcc/varasm.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506868500a53b9181d45596cc7e138dce2f97d9e/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=506868500a53b9181d45596cc7e138dce2f97d9e", "patch": "@@ -4640,10 +4640,10 @@ initializer_constant_valid_for_bitfield_p (tree value)\n /* output_constructor outer state of relevance in recursive calls, typically\n    for nested aggregate bitfields.  */\n \n-typedef struct {\n+struct oc_outer_state {\n   unsigned int bit_offset;  /* current position in ...  */\n   int byte;                 /* ... the outer byte buffer.  */\n-} oc_outer_state;\n+};\n \n static unsigned HOST_WIDE_INT\n   output_constructor (tree, unsigned HOST_WIDE_INT, unsigned int,\n@@ -4883,7 +4883,7 @@ array_size_for_constructor (tree val)\n \n /* output_constructor local state to support interaction with helpers.  */\n \n-typedef struct {\n+struct oc_local_state {\n \n   /* Received arguments.  */\n   tree exp;                     /* Constructor expression.  */\n@@ -4904,7 +4904,7 @@ typedef struct {\n   tree val;        /* Current element value.  */\n   tree index;      /* Current element index.  */\n \n-} oc_local_state;\n+};\n \n /* Helper for output_constructor.  From the current LOCAL state, output a\n    RANGE_EXPR element.  */\n@@ -5829,12 +5829,12 @@ get_tm_clone_pair (tree o)\n   return NULL_TREE;\n }\n \n-typedef struct tm_alias_pair\n+struct tm_alias_pair\n {\n   unsigned int uid;\n   tree from;\n   tree to;\n-} tm_alias_pair;\n+};\n \n \n /* Dump the actual pairs to the .tm_clone_table section.  */"}]}