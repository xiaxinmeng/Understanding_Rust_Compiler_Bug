{"sha": "3420348330cbc3b086b38563216e82fc0ce6e2e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQyMDM0ODMzMGNiYzNiMDg2YjM4NTYzMjE2ZTgyZmMwY2U2ZTJlOQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-05-13T10:16:43Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-05-13T10:16:43Z"}, "message": "i386.md (*movxf_internal): Use !can_create_pseudo ().\n\n\t* config/i386/i386.md (*movxf_internal): Use !can_create_pseudo ().\n\t(*movxf_internal_nointeger): Ditto.\n\t(*movdf_internal_rex64): Ditto.\n\t(*movdf_internal): Ditto.\n\t(*movdf_internal_nointeger): Ditto.\n\t(*movsf_internal): Ditto.\n\t(sincos splitters): Use can_create_pseudo ().\n\nFrom-SVN: r173729", "tree": {"sha": "7b8a1e5b47d97f4890f07ca149b3364bfa63b0e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b8a1e5b47d97f4890f07ca149b3364bfa63b0e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3420348330cbc3b086b38563216e82fc0ce6e2e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3420348330cbc3b086b38563216e82fc0ce6e2e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3420348330cbc3b086b38563216e82fc0ce6e2e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3420348330cbc3b086b38563216e82fc0ce6e2e9/comments", "author": null, "committer": null, "parents": [{"sha": "7eb68c06bc212068030903b2a9fe6e93660ee0cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eb68c06bc212068030903b2a9fe6e93660ee0cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7eb68c06bc212068030903b2a9fe6e93660ee0cc"}], "stats": {"total": 57, "additions": 29, "deletions": 28}, "files": [{"sha": "b1a1b3b6687781ff98b5bedac65a38aa0eda9705", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3420348330cbc3b086b38563216e82fc0ce6e2e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3420348330cbc3b086b38563216e82fc0ce6e2e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3420348330cbc3b086b38563216e82fc0ce6e2e9", "patch": "@@ -1,3 +1,13 @@\n+2011-05-13  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*movxf_internal): Use !can_create_pseudo ().\n+\t(*movxf_internal_nointeger): Ditto.\n+\t(*movdf_internal_rex64): Ditto.\n+\t(*movdf_internal): Ditto.\n+\t(*movdf_internal_nointeger): Ditto.\n+\t(*movsf_internal): Ditto.\n+\t(sincos splitters): Use can_create_pseudo ().\n+\n 2011-05-13  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/i386/i386-opts.h: New.\n@@ -10,11 +20,9 @@\n \t(ix86_option_override_internal): Don't decode strings for options\n \tother than -march=, -mtune= and -mfpmath=.  Don't allow for\n \t__attribute__ uses in remaining diagnostics for options with\n-\tstring arguments.  Don't check for integer arguments being\n-\tnegative.\n+\tstring arguments.  Don't check for integer arguments being negative.\n \t* gcc/config/i386/i386.h (enum stringop_alg, enum calling_abi,\n-\tenum tls_dialect, enum cmodel, enum asm_dialect): Move to\n-\ti386-opts.h.\n+\tenum tls_dialect, enum cmodel, enum asm_dialect): Move to i386-opts.h.\n \t(ix86_abi, ix86_tls_dialect, ix86_cmodel, ix86_asm_dialect,\n \tix86_branch_cost, ix86_section_threshold): Remove.\n \t* gcc/config/i386/i386.opt (config/i386/i386-opts.h): New\n@@ -41,10 +49,8 @@\n \n 2011-05-13  Nick Clifton  <nickc@redhat.com>\n \n-\t* config/rx/rx.md (mov expander): Fix use of\n-\trx_legitimate_constant_p.\n-\t* config/rx/rx-protos.h (rx_legitimate_constant_p): Rename\n-\tprototype.\n+\t* config/rx/rx.md (mov expander): Fix use of rx_legitimate_constant_p.\n+\t* config/rx/rx-protos.h (rx_legitimate_constant_p): Rename prototype.\n \n 2011-05-13  Kai Tietz  <ktietz@redhat.com>\n \n@@ -68,8 +74,7 @@\n \n 2011-05-12  H.J. Lu  <hongjiu.lu@intel.com>\n \n-\t* config/i386/i386.c (ix86_save_reg): Change maybe_eh_return\n-\tto bool.\n+\t* config/i386/i386.c (ix86_save_reg): Change maybe_eh_return to bool.\n \t(ix86_emit_restore_regs_using_mov): Likewise.\n \t(ix86_emit_restore_sse_regs_using_mov): Likewise.\n \n@@ -140,8 +145,7 @@\n \t(ADD_RX_BUILTIN1, ADD_RX_BUILTIN2, ADD_RX_BUILTIN3): Install\n \tcreated builtin into rx_builtins array.\n \t(rx_builtin_decl): New function.\n-\t(TARGET_BUITLIN_DECL): Define.\n-\tInclude gt-rx.h.\n+\t(TARGET_BUITLIN_DECL): Define.  Include gt-rx.h.\n \n 2011-05-12  DJ Delorie  <dj@redhat.com>\n \t    Nick Clifton  <nickc@redhat.com>\n@@ -152,8 +156,7 @@\n \taddressing in HImode and QImode.  Fix test for out of range\n \tREG+INT addressing.\n \t(rx_legitimate_constant_p): Rename to rx_is_legitimate_constant.\n-\t(rx_align_for_label): Test label before extracting its usage\n-\tcount.\n+\t(rx_align_for_label): Test label before extracting its usage count.\n \t(rx_adjust_insn_lengths): Fix selection of insn codes.\n \t(TARGET_LEGITIMATE_CONSTANT_P): Use renamed function.\n \n@@ -169,8 +172,7 @@\n 2011-05-11  Satoru Takabayashi  <satorux@google.com>\n \t    Paul Pluzhnikov  <ppluzhnikov@google.com>\n \n-\t* doc/install.texi (Configuration): Document\n-\t--with-linker-hash-style.\n+\t* doc/install.texi (Configuration): Document --with-linker-hash-style.\n \t* gcc.c (init_spec): Handle LINKER_HASH_STYLE.\n \t* config.in: Add LINKER_HASH_STYLE.\n \t* configure.ac: Add --with-linker-hash-style."}, {"sha": "b0c4c83f825dec467a459e51622e1c0f2f8a4faa", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3420348330cbc3b086b38563216e82fc0ce6e2e9/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3420348330cbc3b086b38563216e82fc0ce6e2e9/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=3420348330cbc3b086b38563216e82fc0ce6e2e9", "patch": "@@ -2866,7 +2866,7 @@\n \t(match_operand:XF 1 \"general_operand\" \"fm,f,G,roF,Fr\"))]\n   \"optimize_function_for_speed_p (cfun)\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n-   && (reload_in_progress || reload_completed\n+   && (!can_create_pseudo_p ()\n        || GET_CODE (operands[1]) != CONST_DOUBLE\n        || memory_operand (operands[0], XFmode))\"\n {\n@@ -2895,7 +2895,7 @@\n \t(match_operand:XF 1 \"general_operand\" \"fm,f,G,*roF,F*r\"))]\n   \"optimize_function_for_size_p (cfun)\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n-   && (reload_in_progress || reload_completed\n+   && (!can_create_pseudo_p ()\n        || standard_80387_constant_p (operands[1])\n        || GET_CODE (operands[1]) != CONST_DOUBLE\n        || memory_operand (operands[0], XFmode))\"\n@@ -2938,7 +2938,7 @@\n \t(match_operand:DF 1 \"general_operand\"\n \t\t\"fm,f,G,rm,r,F ,F ,C   ,Y2*x,m   ,Y2*x,r ,Yi\"))]\n   \"TARGET_64BIT && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n-   && (reload_in_progress || reload_completed\n+   && (!can_create_pseudo_p ()\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n        || (!(TARGET_SSE2 && TARGET_SSE_MATH)\n            && optimize_function_for_size_p (cfun)\n@@ -3102,7 +3102,7 @@\n   \"!TARGET_64BIT && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && optimize_function_for_speed_p (cfun)\n    && TARGET_INTEGER_DFMODE_MOVES\n-   && (reload_in_progress || reload_completed\n+   && (!can_create_pseudo_p ()\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n        || (!(TARGET_SSE2 && TARGET_SSE_MATH)\n            && optimize_function_for_size_p (cfun)\n@@ -3255,16 +3255,15 @@\n   \"!TARGET_64BIT && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (optimize_function_for_size_p (cfun)\n        || !TARGET_INTEGER_DFMODE_MOVES)\n-   && (reload_in_progress || reload_completed\n+   && (!can_create_pseudo_p ()\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n        || (!(TARGET_SSE2 && TARGET_SSE_MATH)\n            && optimize_function_for_size_p (cfun)\n            && !memory_operand (operands[0], DFmode)\n \t   && standard_80387_constant_p (operands[1]))\n        || GET_CODE (operands[1]) != CONST_DOUBLE\n        || ((optimize_function_for_size_p (cfun)\n-            || !TARGET_MEMORY_MISMATCH_STALL\n-\t    || reload_in_progress || reload_completed)\n+            || !TARGET_MEMORY_MISMATCH_STALL)\n  \t   && memory_operand (operands[0], DFmode)))\"\n {\n   switch (which_alternative)\n@@ -3420,7 +3419,7 @@\n \t(match_operand:SF 1 \"general_operand\"\n \t  \"fm,f,G,rmF,Fr,C,x,xm,x,m  ,*y,*y ,r  ,Yi,r   ,*Ym\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n-   && (reload_in_progress || reload_completed\n+   && (!can_create_pseudo_p ()\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n        || (!TARGET_SSE_MATH && optimize_function_for_size_p (cfun)\n \t   && standard_80387_constant_p (operands[1]))\n@@ -13525,7 +13524,7 @@\n    (set (match_operand:XF 1 \"register_operand\" \"\")\n \t(unspec:XF [(match_dup 2)] UNSPEC_SINCOS_SIN))]\n   \"find_regno_note (insn, REG_UNUSED, REGNO (operands[0]))\n-   && !(reload_completed || reload_in_progress)\"\n+   && can_create_pseudo_p ()\"\n   [(set (match_dup 1) (unspec:XF [(match_dup 2)] UNSPEC_SIN))])\n \n (define_split\n@@ -13535,7 +13534,7 @@\n    (set (match_operand:XF 1 \"register_operand\" \"\")\n \t(unspec:XF [(match_dup 2)] UNSPEC_SINCOS_SIN))]\n   \"find_regno_note (insn, REG_UNUSED, REGNO (operands[1]))\n-   && !(reload_completed || reload_in_progress)\"\n+   && can_create_pseudo_p ()\"\n   [(set (match_dup 0) (unspec:XF [(match_dup 2)] UNSPEC_COS))])\n \n (define_insn \"sincos_extend<mode>xf3_i387\"\n@@ -13561,7 +13560,7 @@\n    (set (match_operand:XF 1 \"register_operand\" \"\")\n \t(unspec:XF [(float_extend:XF (match_dup 2))] UNSPEC_SINCOS_SIN))]\n   \"find_regno_note (insn, REG_UNUSED, REGNO (operands[0]))\n-   && !(reload_completed || reload_in_progress)\"\n+   && can_create_pseudo_p ()\"\n   [(set (match_dup 1)\n \t(unspec:XF [(float_extend:XF (match_dup 2))] UNSPEC_SIN))])\n \n@@ -13573,7 +13572,7 @@\n    (set (match_operand:XF 1 \"register_operand\" \"\")\n \t(unspec:XF [(float_extend:XF (match_dup 2))] UNSPEC_SINCOS_SIN))]\n   \"find_regno_note (insn, REG_UNUSED, REGNO (operands[1]))\n-   && !(reload_completed || reload_in_progress)\"\n+   && can_create_pseudo_p ()\"\n   [(set (match_dup 0)\n \t(unspec:XF [(float_extend:XF (match_dup 2))] UNSPEC_COS))])\n "}]}