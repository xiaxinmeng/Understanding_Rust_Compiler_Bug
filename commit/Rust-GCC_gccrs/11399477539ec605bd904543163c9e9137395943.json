{"sha": "11399477539ec605bd904543163c9e9137395943", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTEzOTk0Nzc1MzllYzYwNWJkOTA0NTQzMTYzYzllOTEzNzM5NTk0Mw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-08-29T19:51:23Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-08-29T19:51:23Z"}, "message": "Various small fixes.\n\n\t* lambda.c (build_lambda_object): Check for error_mark_node.\n\t* pt.c (make_pack_expansion): Set PACK_EXPANSION_LOCAL_P on the type\n\tpack as well.\n\t(tsubst_decl) [FUNCTION_DECL]: Set DECL_CONTEXT on the parameters.\n\t(tsubst) [TEMPLATE_PARM_INDEX]: Check for error_mark_node.\n\nFrom-SVN: r251428", "tree": {"sha": "c85f3a633a40b0563809d56852c3087090ec1bf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c85f3a633a40b0563809d56852c3087090ec1bf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11399477539ec605bd904543163c9e9137395943", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11399477539ec605bd904543163c9e9137395943", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11399477539ec605bd904543163c9e9137395943", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11399477539ec605bd904543163c9e9137395943/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1a9de5b6b56a726313069f4447fbbbee469e99dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a9de5b6b56a726313069f4447fbbbee469e99dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a9de5b6b56a726313069f4447fbbbee469e99dc"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "08a8ac8c1b79ab684e5e69e40a19f6209d8a4be2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11399477539ec605bd904543163c9e9137395943/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11399477539ec605bd904543163c9e9137395943/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=11399477539ec605bd904543163c9e9137395943", "patch": "@@ -1,3 +1,11 @@\n+2017-08-23  Jason Merrill  <jason@redhat.com>\n+\n+\t* lambda.c (build_lambda_object): Check for error_mark_node.\n+\t* pt.c (make_pack_expansion): Set PACK_EXPANSION_LOCAL_P on the type\n+\tpack as well.\n+\t(tsubst_decl) [FUNCTION_DECL]: Set DECL_CONTEXT on the parameters.\n+\t(tsubst) [TEMPLATE_PARM_INDEX]: Check for error_mark_node.\n+\n 2017-08-29  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/80767 - unnecessary instantiation of generic lambda"}, {"sha": "daeec9dedbcdc9970da9f4ca42ba82fb7c9df0c6", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11399477539ec605bd904543163c9e9137395943/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11399477539ec605bd904543163c9e9137395943/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=11399477539ec605bd904543163c9e9137395943", "patch": "@@ -1458,7 +1458,8 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n     {\n       if (!ctx->quiet)\n \t{\n-\t  error_at (loc, \"call to non-constexpr function %qD\", fun);\n+\t  if (!lambda_static_thunk_p (fun))\n+\t    error_at (loc, \"call to non-constexpr function %qD\", fun);\n \t  explain_invalid_constexpr_fn (fun);\n \t}\n       *non_constant_p = true;"}, {"sha": "337b9ee3c6218f50e1595877bc742ed2e5ba5219", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11399477539ec605bd904543163c9e9137395943/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11399477539ec605bd904543163c9e9137395943/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=11399477539ec605bd904543163c9e9137395943", "patch": "@@ -59,7 +59,7 @@ build_lambda_object (tree lambda_expr)\n   tree node, expr, type;\n   location_t saved_loc;\n \n-  if (processing_template_decl)\n+  if (processing_template_decl || lambda_expr == error_mark_node)\n     return lambda_expr;\n \n   /* Make sure any error messages refer to the lambda-introducer.  */"}, {"sha": "aaae06d96c7250d3216e80183d9bdca841c0aa7a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11399477539ec605bd904543163c9e9137395943/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11399477539ec605bd904543163c9e9137395943/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=11399477539ec605bd904543163c9e9137395943", "patch": "@@ -3773,6 +3773,7 @@ make_pack_expansion (tree arg)\n       purpose = cxx_make_type (TYPE_PACK_EXPANSION);\n       SET_PACK_EXPANSION_PATTERN (purpose, TREE_PURPOSE (arg));\n       PACK_EXPANSION_PARAMETER_PACKS (purpose) = parameter_packs;\n+      PACK_EXPANSION_LOCAL_P (purpose) = at_function_scope_p ();\n \n       /* Just use structural equality for these TYPE_PACK_EXPANSIONS;\n \t they will rarely be compared to anything.  */\n@@ -9535,6 +9536,7 @@ static inline bool\n neglectable_inst_p (tree d)\n {\n   return (DECL_P (d)\n+\t  && !undeduced_auto_decl (d)\n \t  && !(TREE_CODE (d) == FUNCTION_DECL ? DECL_DECLARED_CONSTEXPR_P (d)\n \t       : decl_maybe_constant_var_p (d)));\n }\n@@ -12413,6 +12415,8 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \n \tDECL_ARGUMENTS (r) = tsubst (DECL_ARGUMENTS (t), args,\n \t\t\t\t     complain, t);\n+\tfor (tree parm = DECL_ARGUMENTS (r); parm; parm = DECL_CHAIN (parm))\n+\t  DECL_CONTEXT (parm) = r;\n \tDECL_RESULT (r) = NULL_TREE;\n \n \tTREE_STATIC (r) = 0;\n@@ -13786,6 +13790,8 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t       couldn't do it earlier because it might be an auto parameter,\n \t       and we wouldn't need to if we had an argument.  */\n \t    type = tsubst (type, args, complain, in_decl);\n+\t    if (type == error_mark_node)\n+\t      return error_mark_node;\n \t    r = reduce_template_parm_level (t, type, levels, args, complain);\n \t    break;\n "}]}