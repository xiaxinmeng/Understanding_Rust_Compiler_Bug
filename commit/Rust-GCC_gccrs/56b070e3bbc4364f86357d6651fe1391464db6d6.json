{"sha": "56b070e3bbc4364f86357d6651fe1391464db6d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZiMDcwZTNiYmM0MzY0Zjg2MzU3ZDY2NTFmZTEzOTE0NjRkYjZkNg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2019-09-29T10:12:42Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2019-09-29T10:12:42Z"}, "message": "re PR fortran/91726 (ICE in gfc_conv_array_ref, at fortran/trans-array.c:3612)\n\n2019-09-29  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/91726\n\t* resolve.c (gfc_expr_to_initialize): Bail out with a copy of\n\tthe original expression if the array ref is a scalar and the\n\tarray_spec has corank.\n\t* trans-array.c (gfc_conv_array_ref): Such expressions are OK\n\teven if the array ref codimen is zero.\n\t* trans-expr.c (gfc_get_class_from_expr): New function taken\n\tfrom gfc_get_vptr_from_expr.\n\t(gfc_get_vptr_from_expr): Call new function.\n\t* trans-stmt.c (trans_associate_var): If one of these is a\n\ttarget expression, extract the class expression from the target\n\tand copy its fields to a new target variable.\n\t* trans.h : Add prototype for gfc_get_class_from_expr.\n\n2019-09-29  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/91726\n\t* gfortran.dg/coarray_poly_9.f90 : New test.\n\nFrom-SVN: r276269", "tree": {"sha": "5f12959555e00cf9a1cbc41639212e59d4d5a50d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f12959555e00cf9a1cbc41639212e59d4d5a50d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56b070e3bbc4364f86357d6651fe1391464db6d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56b070e3bbc4364f86357d6651fe1391464db6d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56b070e3bbc4364f86357d6651fe1391464db6d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56b070e3bbc4364f86357d6651fe1391464db6d6/comments", "author": null, "committer": null, "parents": [{"sha": "ae517a31c9508d9b0424e7a057d05840cf2caaf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae517a31c9508d9b0424e7a057d05840cf2caaf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae517a31c9508d9b0424e7a057d05840cf2caaf5"}], "stats": {"total": 128, "additions": 123, "deletions": 5}, "files": [{"sha": "8fc562531c91515391ccd4d9826f2540645dc3f1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b070e3bbc4364f86357d6651fe1391464db6d6/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b070e3bbc4364f86357d6651fe1391464db6d6/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=56b070e3bbc4364f86357d6651fe1391464db6d6", "patch": "@@ -1,3 +1,19 @@\n+2019-09-29  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/91726\n+\t* resolve.c (gfc_expr_to_initialize): Bail out with a copy of\n+\tthe original expression if the array ref is a scalar and the\n+\tarray_spec has corank.\n+\t* trans-array.c (gfc_conv_array_ref): Such expressions are OK\n+\teven if the array ref codimen is zero.\n+\t* trans-expr.c (gfc_get_class_from_expr): New function taken\n+\tfrom gfc_get_vptr_from_expr.\n+\t(gfc_get_vptr_from_expr): Call new function.\n+\t* trans-stmt.c (trans_associate_var): If one of these is a\n+\ttarget expression, extract the class expression from the target\n+\tand copy its fields to a new target variable.\n+\t* trans.h : Add prototype for gfc_get_class_from_expr.\n+\n 2019-09-28  Jerry DeLisle  <jvdelisle@gcc.ngu.org>\n \n \tPR fortran/91802\n@@ -14,7 +30,7 @@\n \tPR fortran/91864\n \t* gcc/fortran/io.c (match_io_element): An inquiry parameter cannot be\n \tread into.\n-\t* gcc/fortran/match.c (gfc_match_allocate): An inquiry parameter \n+\t* gcc/fortran/match.c (gfc_match_allocate): An inquiry parameter\n \tcan be neither an allocate-object nor stat variable.\n \t(gfc_match_deallocate): An inquiry parameter cannot be deallocated.\n "}, {"sha": "e8d056625140a6c75c2721cb21ca959286984a39", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b070e3bbc4364f86357d6651fe1391464db6d6/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b070e3bbc4364f86357d6651fe1391464db6d6/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=56b070e3bbc4364f86357d6651fe1391464db6d6", "patch": "@@ -7433,6 +7433,10 @@ gfc_expr_to_initialize (gfc_expr *e)\n   for (ref = result->ref; ref; ref = ref->next)\n     if (ref->type == REF_ARRAY && ref->next == NULL)\n       {\n+\tif (ref->u.ar.dimen == 0\n+\t    && ref->u.ar.as && ref->u.ar.as->corank)\n+\t  return result;\n+\n \tref->u.ar.type = AR_FULL;\n \n \tfor (i = 0; i < ref->u.ar.dimen; i++)"}, {"sha": "437892a6abf21eb6f46146a71b4c34b48a7df352", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b070e3bbc4364f86357d6651fe1391464db6d6/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b070e3bbc4364f86357d6651fe1391464db6d6/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=56b070e3bbc4364f86357d6651fe1391464db6d6", "patch": "@@ -3609,7 +3609,8 @@ gfc_conv_array_ref (gfc_se * se, gfc_array_ref * ar, gfc_expr *expr,\n \n   if (ar->dimen == 0)\n     {\n-      gcc_assert (ar->codimen || sym->attr.select_rank_temporary);\n+      gcc_assert (ar->codimen || sym->attr.select_rank_temporary\n+\t\t  || (ar->as && ar->as->corank));\n \n       if (GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (se->expr)))\n \tse->expr = build_fold_indirect_ref (gfc_conv_array_data (se->expr));"}, {"sha": "61db4e39210c88f34d16ba2a08e3e19dfc5c70ec", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b070e3bbc4364f86357d6651fe1391464db6d6/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b070e3bbc4364f86357d6651fe1391464db6d6/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=56b070e3bbc4364f86357d6651fe1391464db6d6", "patch": "@@ -472,11 +472,11 @@ gfc_reset_len (stmtblock_t *block, gfc_expr *expr)\n }\n \n \n-/* Obtain the vptr of the last class reference in an expression.\n+/* Obtain the last class reference in an expression.\n    Return NULL_TREE if no class reference is found.  */\n \n tree\n-gfc_get_vptr_from_expr (tree expr)\n+gfc_get_class_from_expr (tree expr)\n {\n   tree tmp;\n   tree type;\n@@ -487,7 +487,7 @@ gfc_get_vptr_from_expr (tree expr)\n       while (type)\n \t{\n \t  if (GFC_CLASS_TYPE_P (type))\n-\t    return gfc_class_vptr_get (tmp);\n+\t    return tmp;\n \t  if (type != TYPE_CANONICAL (type))\n \t    type = TYPE_CANONICAL (type);\n \t  else\n@@ -501,6 +501,23 @@ gfc_get_vptr_from_expr (tree expr)\n     tmp = build_fold_indirect_ref_loc (input_location, tmp);\n \n   if (GFC_CLASS_TYPE_P (TREE_TYPE (tmp)))\n+    return tmp;\n+\n+  return NULL_TREE;\n+}\n+\n+\n+/* Obtain the vptr of the last class reference in an expression.\n+   Return NULL_TREE if no class reference is found.  */\n+\n+tree\n+gfc_get_vptr_from_expr (tree expr)\n+{\n+  tree tmp;\n+\n+  tmp = gfc_get_class_from_expr (expr);\n+\n+  if (tmp != NULL_TREE)\n     return gfc_class_vptr_get (tmp);\n \n   return NULL_TREE;"}, {"sha": "e3ea38a9aa159d8fe37123551037236e195fb1a8", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b070e3bbc4364f86357d6651fe1391464db6d6/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b070e3bbc4364f86357d6651fe1391464db6d6/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=56b070e3bbc4364f86357d6651fe1391464db6d6", "patch": "@@ -2099,7 +2099,43 @@ trans_associate_var (gfc_symbol *sym, gfc_wrapped_block *block)\n \t}\n       else\n \t{\n+\t  tree ctree = gfc_get_class_from_expr (se.expr);\n \t  tmp = TREE_TYPE (sym->backend_decl);\n+\n+\t  /* Coarray scalar component expressions can emerge from\n+\t     the front end as array elements of the _data field.  */\n+\t  if (sym->ts.type == BT_CLASS\n+\t      && e->ts.type == BT_CLASS && e->rank == 0\n+\t      && !GFC_CLASS_TYPE_P (TREE_TYPE (se.expr)) && ctree)\n+\t    {\n+\t      tree stmp;\n+\t      tree dtmp;\n+\n+\t      se.expr = ctree;\n+\t      dtmp = TREE_TYPE (TREE_TYPE (sym->backend_decl));\n+\t      ctree = gfc_create_var (dtmp, \"class\");\n+\n+\t      stmp = gfc_class_data_get (se.expr);\n+\t      gcc_assert (GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (stmp)));\n+\n+\t      /* Set the fields of the target class variable.  */\n+\t      stmp = gfc_conv_descriptor_data_get (stmp);\n+\t      dtmp = gfc_class_data_get (ctree);\n+\t      stmp = fold_convert (TREE_TYPE (dtmp), stmp);\n+\t      gfc_add_modify (&se.pre, dtmp, stmp);\n+\t      stmp = gfc_class_vptr_get (se.expr);\n+\t      dtmp = gfc_class_vptr_get (ctree);\n+\t      stmp = fold_convert (TREE_TYPE (dtmp), stmp);\n+\t      gfc_add_modify (&se.pre, dtmp, stmp);\n+\t      if (UNLIMITED_POLY (sym))\n+\t\t{\n+\t\t  stmp = gfc_class_len_get (se.expr);\n+\t\t  dtmp = gfc_class_len_get (ctree);\n+\t\t  stmp = fold_convert (TREE_TYPE (dtmp), stmp);\n+\t\t  gfc_add_modify (&se.pre, dtmp, stmp);\n+\t\t}\n+\t      se.expr = ctree;\n+\t    }\n \t  tmp = gfc_build_addr_expr (tmp, se.expr);\n \t}\n "}, {"sha": "6ebb71de15252d088ba84f1f3ca9d69b277f4c2e", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b070e3bbc4364f86357d6651fe1391464db6d6/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b070e3bbc4364f86357d6651fe1391464db6d6/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=56b070e3bbc4364f86357d6651fe1391464db6d6", "patch": "@@ -442,6 +442,7 @@ tree gfc_vptr_final_get (tree);\n tree gfc_vptr_deallocate_get (tree);\n void gfc_reset_vptr (stmtblock_t *, gfc_expr *);\n void gfc_reset_len (stmtblock_t *, gfc_expr *);\n+tree gfc_get_class_from_expr (tree);\n tree gfc_get_vptr_from_expr (tree);\n tree gfc_get_class_array_ref (tree, tree, tree, bool);\n tree gfc_copy_class_to_class (tree, tree, tree, bool);"}, {"sha": "a23c7286a6d000a76dc666fbfe37c4d85bbbf54a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b070e3bbc4364f86357d6651fe1391464db6d6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b070e3bbc4364f86357d6651fe1391464db6d6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=56b070e3bbc4364f86357d6651fe1391464db6d6", "patch": "@@ -1,3 +1,8 @@\n+2019-09-29  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/91726\n+\t* gfortran.dg/coarray_poly_9.f90 : New test.\n+\n 2019-09-29  Kewen Lin  <linkw@gcc.gnu.org>\n \n \t* gcc.target/powerpc/conv-vectorize-1.c: New test."}, {"sha": "ea2a9422cebb040a91f7191dc09cc99fea66e2c6", "filename": "gcc/testsuite/gfortran.dg/coarray_poly_9.f90", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b070e3bbc4364f86357d6651fe1391464db6d6/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_poly_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b070e3bbc4364f86357d6651fe1391464db6d6/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_poly_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_poly_9.f90?ref=56b070e3bbc4364f86357d6651fe1391464db6d6", "patch": "@@ -0,0 +1,38 @@\n+! { dg-do run }\n+! { dg-options \"-fcoarray=single\" }\n+!\n+! Test the fix for PR91726.\n+!\n+! Contributed by Gerhardt Steinmetz  <gscfq@t-online.de>\n+!\n+module m\n+   type s\n+      class(*), allocatable :: a[:]    ! This ICEd\n+   end type\n+   type t\n+      class(*), allocatable :: a(:)[:] ! This was OK\n+   end type\n+end\n+\n+  use m\n+  call foo\n+  call bar\n+contains\n+  subroutine foo\n+    type (s) :: a\n+    integer(4) :: i = 42_4\n+    allocate (a%a[*], source = i)     ! This caused runtime segfaults\n+    select type (z => a%a)            ! ditto\n+      type is (integer(4))\n+      if (z .ne. 42_4) stop 1\n+    end select\n+  end subroutine\n+  subroutine bar                      ! Arrays always worked\n+    type (t) :: a\n+    allocate (a%a(3)[*], source = [1_4, 2_4, 3_4])\n+    select type (z => a%a)\n+      type is (integer(4))\n+      if (any (z .ne. [1_4, 2_4, 3_4])) stop 2\n+    end select\n+  end subroutine\n+end"}]}