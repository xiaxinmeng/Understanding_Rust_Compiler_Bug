{"sha": "b3f44388f3bb9b42553ea516984db4c4d4baa5bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNmNDQzODhmM2JiOWI0MjU1M2VhNTE2OTg0ZGI0YzRkNGJhYTViYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-11-29T09:08:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-11-29T09:08:46Z"}, "message": "re PR c++/60228 (ICE using lambda in #pragma omp declare reduction)\n\n\tPR c++/60228\n\t* parser.c (cp_parser_omp_declare_reduction_exprs): If\n\tprocessing_template_decl, wrap the combiner or initializer\n\tinto EXPR_STMT.\n\t* decl.c (start_preparsed_function): Don't start a lambda scope\n\tfor DECL_OMP_DECLARE_REDUCTION_P functions.\n\t(finish_function): Don't finish a lambda scope for\n\tDECL_OMP_DECLARE_REDUCTION_P functions, nor cp_fold_function\n\tthem nor cp_genericize them.\n\t* mangle.c (decl_mangling_context): Look through\n\tDECL_OMP_DECLARE_REDUCTION_P functions.\n\t* semantics.c (expand_or_defer_fn_1): For DECL_OMP_DECLARE_REDUCTION_P\n\tfunctions, use tentative linkage, don't keep their bodies with\n\t-fkeep-inline-functions and return false at the end.\n\n\t* g++.dg/gomp/openmp-simd-2.C: Don't expect bodies for\n\tDECL_OMP_DECLARE_REDUCTION_P functions.\n\n\t* testsuite/libgomp.c++/udr-20.C: New test.\n\t* testsuite/libgomp.c++/udr-21.C: New test.\n\nFrom-SVN: r278831", "tree": {"sha": "dee1724a138a934e00ff1750d1c62706cdd1971a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dee1724a138a934e00ff1750d1c62706cdd1971a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3f44388f3bb9b42553ea516984db4c4d4baa5bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3f44388f3bb9b42553ea516984db4c4d4baa5bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3f44388f3bb9b42553ea516984db4c4d4baa5bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3f44388f3bb9b42553ea516984db4c4d4baa5bc/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "efeeda757691b13e716c6681e7f6af5f85927e92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efeeda757691b13e716c6681e7f6af5f85927e92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efeeda757691b13e716c6681e7f6af5f85927e92"}], "stats": {"total": 284, "additions": 276, "deletions": 8}, "files": [{"sha": "3a6bf059a2df992d700409ba686d68d459e372d0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f44388f3bb9b42553ea516984db4c4d4baa5bc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f44388f3bb9b42553ea516984db4c4d4baa5bc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b3f44388f3bb9b42553ea516984db4c4d4baa5bc", "patch": "@@ -1,3 +1,20 @@\n+2019-11-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/60228\n+\t* parser.c (cp_parser_omp_declare_reduction_exprs): If\n+\tprocessing_template_decl, wrap the combiner or initializer\n+\tinto EXPR_STMT.\n+\t* decl.c (start_preparsed_function): Don't start a lambda scope\n+\tfor DECL_OMP_DECLARE_REDUCTION_P functions.\n+\t(finish_function): Don't finish a lambda scope for\n+\tDECL_OMP_DECLARE_REDUCTION_P functions, nor cp_fold_function\n+\tthem nor cp_genericize them.\n+\t* mangle.c (decl_mangling_context): Look through\n+\tDECL_OMP_DECLARE_REDUCTION_P functions.\n+\t* semantics.c (expand_or_defer_fn_1): For DECL_OMP_DECLARE_REDUCTION_P\n+\tfunctions, use tentative linkage, don't keep their bodies with\n+\t-fkeep-inline-functions and return false at the end.\n+\n 2019-11-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/92695"}, {"sha": "81d73433547e3edb6d74838fc046dc9267a6515e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f44388f3bb9b42553ea516984db4c4d4baa5bc/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f44388f3bb9b42553ea516984db4c4d4baa5bc/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b3f44388f3bb9b42553ea516984db4c4d4baa5bc", "patch": "@@ -16318,7 +16318,8 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n       && !implicit_default_ctor_p (decl1))\n     cp_ubsan_maybe_initialize_vtbl_ptrs (current_class_ptr);\n \n-  start_lambda_scope (decl1);\n+  if (!DECL_OMP_DECLARE_REDUCTION_P (decl1))\n+    start_lambda_scope (decl1);\n \n   return true;\n }\n@@ -16703,7 +16704,8 @@ finish_function (bool inline_p)\n   if (fndecl == NULL_TREE)\n     return error_mark_node;\n \n-  finish_lambda_scope ();\n+  if (!DECL_OMP_DECLARE_REDUCTION_P (fndecl))\n+    finish_lambda_scope ();\n \n   if (c_dialect_objc ())\n     objc_finish_function ();\n@@ -16845,7 +16847,9 @@ finish_function (bool inline_p)\n     invoke_plugin_callbacks (PLUGIN_PRE_GENERICIZE, fndecl);\n \n   /* Perform delayed folding before NRV transformation.  */\n-  if (!processing_template_decl && !DECL_IMMEDIATE_FUNCTION_P (fndecl))\n+  if (!processing_template_decl\n+      && !DECL_IMMEDIATE_FUNCTION_P (fndecl)\n+      && !DECL_OMP_DECLARE_REDUCTION_P (fndecl))\n     cp_fold_function (fndecl);\n \n   /* Set up the named return value optimization, if we can.  Candidate\n@@ -16958,7 +16962,9 @@ finish_function (bool inline_p)\n     do_warn_unused_parameter (fndecl);\n \n   /* Genericize before inlining.  */\n-  if (!processing_template_decl && !DECL_IMMEDIATE_FUNCTION_P (fndecl))\n+  if (!processing_template_decl\n+      && !DECL_IMMEDIATE_FUNCTION_P (fndecl)\n+      && !DECL_OMP_DECLARE_REDUCTION_P (fndecl))\n     cp_genericize (fndecl);\n \n  cleanup:"}, {"sha": "88c5fa2c622e419b91fe086b88215fed171840e1", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f44388f3bb9b42553ea516984db4c4d4baa5bc/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f44388f3bb9b42553ea516984db4c4d4baa5bc/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=b3f44388f3bb9b42553ea516984db4c4d4baa5bc", "patch": "@@ -873,7 +873,16 @@ decl_mangling_context (tree decl)\n   else if (template_type_parameter_p (decl))\n      /* template type parms have no mangling context.  */\n       return NULL_TREE;\n-  return CP_DECL_CONTEXT (decl);\n+\n+  tcontext = CP_DECL_CONTEXT (decl);\n+\n+  /* Ignore the artificial declare reduction functions.  */\n+  if (tcontext\n+      && TREE_CODE (tcontext) == FUNCTION_DECL\n+      && DECL_OMP_DECLARE_REDUCTION_P (tcontext))\n+    return decl_mangling_context (tcontext);\n+\n+  return tcontext;\n }\n \n /* <name> ::= <unscoped-name>"}, {"sha": "fb03002262754caaa5ccd750ce231006a8a6f037", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f44388f3bb9b42553ea516984db4c4d4baa5bc/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f44388f3bb9b42553ea516984db4c4d4baa5bc/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=b3f44388f3bb9b42553ea516984db4c4d4baa5bc", "patch": "@@ -41244,6 +41244,8 @@ cp_parser_omp_declare_reduction_exprs (tree fndecl, cp_parser *parser)\n   combiner = cp_parser_expression (parser);\n   finish_expr_stmt (combiner);\n   block = finish_omp_structured_block (block);\n+  if (processing_template_decl)\n+    block = build_stmt (input_location, EXPR_STMT, block);\n   add_stmt (block);\n \n   if (!cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN))\n@@ -41348,6 +41350,8 @@ cp_parser_omp_declare_reduction_exprs (tree fndecl, cp_parser *parser)\n \n       block = finish_omp_structured_block (block);\n       cp_walk_tree (&block, cp_remove_omp_priv_cleanup_stmt, omp_priv, NULL);\n+      if (processing_template_decl)\n+\tblock = build_stmt (input_location, EXPR_STMT, block);\n       add_stmt (block);\n \n       if (ctor)"}, {"sha": "17de39eea5489af212e46fb30dfe047e19dd0498", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f44388f3bb9b42553ea516984db4c4d4baa5bc/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f44388f3bb9b42553ea516984db4c4d4baa5bc/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=b3f44388f3bb9b42553ea516984db4c4d4baa5bc", "patch": "@@ -4417,7 +4417,9 @@ expand_or_defer_fn_1 (tree fn)\n       if (DECL_INTERFACE_KNOWN (fn))\n \t/* We've already made a decision as to how this function will\n \t   be handled.  */;\n-      else if (!at_eof || DECL_IMMEDIATE_FUNCTION_P (fn))\n+      else if (!at_eof\n+\t       || DECL_IMMEDIATE_FUNCTION_P (fn)\n+\t       || DECL_OMP_DECLARE_REDUCTION_P (fn))\n \ttentative_decl_linkage (fn);\n       else\n \timport_export_decl (fn);\n@@ -4429,6 +4431,7 @@ expand_or_defer_fn_1 (tree fn)\n       if (DECL_DECLARED_INLINE_P (fn)\n \t  && !DECL_REALLY_EXTERN (fn)\n \t  && !DECL_IMMEDIATE_FUNCTION_P (fn)\n+\t  && !DECL_OMP_DECLARE_REDUCTION_P (fn)\n \t  && (flag_keep_inline_functions\n \t      || (flag_keep_inline_dllexport\n \t\t  && lookup_attribute (\"dllexport\", DECL_ATTRIBUTES (fn)))))\n@@ -4461,6 +4464,9 @@ expand_or_defer_fn_1 (tree fn)\n       return false;\n     }\n \n+  if (DECL_OMP_DECLARE_REDUCTION_P (fn))\n+    return false;\n+\n   return true;\n }\n "}, {"sha": "45c9de34b61120a01100501da99873a5b86b5af9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f44388f3bb9b42553ea516984db4c4d4baa5bc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f44388f3bb9b42553ea516984db4c4d4baa5bc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b3f44388f3bb9b42553ea516984db4c4d4baa5bc", "patch": "@@ -1,3 +1,9 @@\n+2019-11-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/60228\n+\t* g++.dg/gomp/openmp-simd-2.C: Don't expect bodies for\n+\tDECL_OMP_DECLARE_REDUCTION_P functions.\n+\n 2019-11-29  Martin Liska  <mliska@suse.cz>\n \n \tPR lto/91574"}, {"sha": "e66806845b7d245e4fdb995cba355aa5725575fc", "filename": "gcc/testsuite/g++.dg/gomp/openmp-simd-2.C", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f44388f3bb9b42553ea516984db4c4d4baa5bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fopenmp-simd-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f44388f3bb9b42553ea516984db4c4d4baa5bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fopenmp-simd-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fopenmp-simd-2.C?ref=b3f44388f3bb9b42553ea516984db4c4d4baa5bc", "patch": "@@ -36,8 +36,6 @@ void bar(int n, float *a, float *b)\n     a[i] = b[i];\n }\n \n-/* { dg-final { scan-tree-dump-times \"Function void omp declare reduction operator\\\\+\" 1 \"original\" } } */\n-/* { dg-final { scan-tree-dump-times \"Function void omp declare reduction foo\" 2 \"original\" } } */\n /* { dg-final { scan-tree-dump-times \"pragma omp simd reduction\\\\(u\\\\) reduction\\\\(t\\\\) reduction\\\\(\\\\+:s\\\\) aligned\\\\(a:32\\\\)\" 1 \"original\" } } */\n /* { dg-final { scan-tree-dump-times \"pragma omp simd safelen\\\\(64\\\\)\" 1 \"original\" } } */\n /* { dg-final { scan-tree-dump-not \"omp parallel\" \"original\" } } */"}, {"sha": "abbd47eb517f597533074787ebe0f3e4d9a2f8b2", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f44388f3bb9b42553ea516984db4c4d4baa5bc/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f44388f3bb9b42553ea516984db4c4d4baa5bc/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=b3f44388f3bb9b42553ea516984db4c4d4baa5bc", "patch": "@@ -1,3 +1,9 @@\n+2019-11-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/60228\n+\t* testsuite/libgomp.c++/udr-20.C: New test.\n+\t* testsuite/libgomp.c++/udr-21.C: New test.\n+\n 2019-11-27  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* testsuite/lib/libgomp.exp"}, {"sha": "48d4feab7e532fc57c2cdb61d1e342050373dc45", "filename": "libgomp/testsuite/libgomp.c++/udr-20.C", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f44388f3bb9b42553ea516984db4c4d4baa5bc/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fudr-20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f44388f3bb9b42553ea516984db4c4d4baa5bc/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fudr-20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fudr-20.C?ref=b3f44388f3bb9b42553ea516984db4c4d4baa5bc", "patch": "@@ -0,0 +1,108 @@\n+// PR c++/60228\n+// { dg-additional-options \"-std=c++11\" }\n+\n+extern \"C\" void abort ();\n+\n+struct A\n+{\n+  typedef int T;\n+  #pragma omp declare reduction (x : T : omp_out += omp_in + [](){ return 0; }()) initializer (omp_priv = [](){ return 0; }())\n+  static void foo ();\n+};\n+\n+template <typename T>\n+struct B\n+{\n+  #pragma omp declare reduction (x : T : omp_out += omp_in + [](){ return T (0); }()) initializer (omp_priv = [](){ return T (0); }())\n+  static void foo ();\n+};\n+\n+void\n+A::foo ()\n+{\n+  int r = 0, s = 0;\n+  #pragma omp parallel for reduction (x : r, s)\n+  for (int i = 0; i < 64; i++)\n+    {\n+      r++;\n+      s += i;\n+    }\n+  if (r != 64 || s != (64 * 63) / 2)\n+    abort ();\n+}\n+\n+template <typename T>\n+void\n+B<T>::foo ()\n+{\n+  T r = 0, s = 0;\n+  #pragma omp parallel for reduction (x : r, s)\n+  for (int i = 0; i < 64; i++)\n+    {\n+      r++;\n+      s += i;\n+    }\n+  if (r != 64 || s != (64 * 63) / 2)\n+    abort ();\n+}\n+\n+int\n+main ()\n+{\n+  A::foo ();\n+  B<long>::foo ();\n+}\n+// PR c++/60228\n+// { dg-additional-options \"-std=c++11\" }\n+\n+extern \"C\" void abort ();\n+\n+struct A\n+{\n+  typedef int T;\n+  #pragma omp declare reduction (x : T : omp_out += omp_in + [](){ return 0; }()) initializer (omp_priv = [](){ return 0; }())\n+  static void foo ();\n+};\n+\n+template <typename T>\n+struct B\n+{\n+  #pragma omp declare reduction (x : T : omp_out += omp_in + [](){ return T (0); }()) initializer (omp_priv = [](){ return T (0); }())\n+  static void foo ();\n+};\n+\n+void\n+A::foo ()\n+{\n+  int r = 0, s = 0;\n+  #pragma omp parallel for reduction (x : r, s)\n+  for (int i = 0; i < 64; i++)\n+    {\n+      r++;\n+      s += i;\n+    }\n+  if (r != 64 || s != (64 * 63) / 2)\n+    abort ();\n+}\n+\n+template <typename T>\n+void\n+B<T>::foo ()\n+{\n+  T r = 0, s = 0;\n+  #pragma omp parallel for reduction (x : r, s)\n+  for (int i = 0; i < 64; i++)\n+    {\n+      r++;\n+      s += i;\n+    }\n+  if (r != 64 || s != (64 * 63) / 2)\n+    abort ();\n+}\n+\n+int\n+main ()\n+{\n+  A::foo ();\n+  B<long>::foo ();\n+}"}, {"sha": "1ecaf473d1d62c12987bef44f75c5cb4ade6822c", "filename": "libgomp/testsuite/libgomp.c++/udr-21.C", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f44388f3bb9b42553ea516984db4c4d4baa5bc/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fudr-21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f44388f3bb9b42553ea516984db4c4d4baa5bc/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fudr-21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fudr-21.C?ref=b3f44388f3bb9b42553ea516984db4c4d4baa5bc", "patch": "@@ -0,0 +1,108 @@\n+// PR c++/60228\n+// { dg-additional-options \"-std=c++11\" }\n+\n+extern \"C\" void abort ();\n+\n+struct A\n+{\n+  typedef int T;\n+  #pragma omp declare reduction (y : T : [&omp_out, &omp_in]() { omp_out += omp_in; return 0; }()) initializer (omp_priv = [omp_orig]() { return omp_orig; }())\n+  static void foo ();\n+};\n+\n+template <typename T>\n+struct B\n+{\n+  #pragma omp declare reduction (y : T : [&omp_out, &omp_in]() { omp_out += omp_in; return 0; }()) initializer (omp_priv = [omp_orig]() { return omp_orig; }())\n+  static void foo ();\n+};\n+\n+void\n+A::foo ()\n+{\n+  int r = 0, s = 0;\n+  #pragma omp parallel for reduction (y : r, s)\n+  for (int i = 0; i < 64; i++)\n+    {\n+      r++;\n+      s += i;\n+    }\n+  if (r != 64 || s != (64 * 63) / 2)\n+    abort ();\n+}\n+\n+template <typename T>\n+void\n+B<T>::foo ()\n+{\n+  T r = 0, s = 0;\n+  #pragma omp parallel for reduction (y : r, s)\n+  for (int i = 0; i < 64; i++)\n+    {\n+      r++;\n+      s += i;\n+    }\n+  if (r != 64 || s != (64 * 63) / 2)\n+    abort ();\n+}\n+\n+int\n+main ()\n+{\n+  A::foo ();\n+  B<short>::foo ();\n+}\n+// PR c++/60228\n+// { dg-additional-options \"-std=c++11\" }\n+\n+extern \"C\" void abort ();\n+\n+struct A\n+{\n+  typedef int T;\n+  #pragma omp declare reduction (y : T : [&omp_out, &omp_in]() { omp_out += omp_in; return 0; }()) initializer (omp_priv = [omp_orig]() { return omp_orig; }())\n+  static void foo ();\n+};\n+\n+template <typename T>\n+struct B\n+{\n+  #pragma omp declare reduction (y : T : [&omp_out, &omp_in]() { omp_out += omp_in; return 0; }()) initializer (omp_priv = [omp_orig]() { return omp_orig; }())\n+  static void foo ();\n+};\n+\n+void\n+A::foo ()\n+{\n+  int r = 0, s = 0;\n+  #pragma omp parallel for reduction (y : r, s)\n+  for (int i = 0; i < 64; i++)\n+    {\n+      r++;\n+      s += i;\n+    }\n+  if (r != 64 || s != (64 * 63) / 2)\n+    abort ();\n+}\n+\n+template <typename T>\n+void\n+B<T>::foo ()\n+{\n+  T r = 0, s = 0;\n+  #pragma omp parallel for reduction (y : r, s)\n+  for (int i = 0; i < 64; i++)\n+    {\n+      r++;\n+      s += i;\n+    }\n+  if (r != 64 || s != (64 * 63) / 2)\n+    abort ();\n+}\n+\n+int\n+main ()\n+{\n+  A::foo ();\n+  B<short>::foo ();\n+}"}]}