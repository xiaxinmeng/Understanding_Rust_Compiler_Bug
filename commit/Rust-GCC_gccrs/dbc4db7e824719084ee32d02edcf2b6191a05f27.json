{"sha": "dbc4db7e824719084ee32d02edcf2b6191a05f27", "node_id": "C_kwDOANBUbNoAKGRiYzRkYjdlODI0NzE5MDg0ZWUzMmQwMmVkY2YyYjYxOTFhMDVmMjc", "commit": {"author": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2023-02-01T16:41:22Z"}, "committer": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2023-02-01T16:44:23Z"}, "message": "testsuite: Run __bos tests to completion\n\nInstead of failing on first error, run all __builtin_object_size and\n__builtin_dynamic_object_size tests to completion and then provide a\nsummary of which tests failed.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/builtin-dynamic-object-size-0.c: Move FAIL and nfail\n\tinto...\n\t* gcc.dg/builtin-object-size-common.h: ... new file.\n\t* g++.dg/ext/builtin-object-size1.C: Include\n\tbuiltin-object-size-common.h.  Replace all abort with FAIL.\n\t(main): Call DONE.\n\t* g++.dg/ext/builtin-object-size2.C: Likewise.\n\t* gcc.dg/builtin-object-size-1.c: Likewise.\n\t* gcc.dg/builtin-object-size-12.c: Likewise.\n\t* gcc.dg/builtin-object-size-13.c: Likewise.\n\t* gcc.dg/builtin-object-size-15.c: Likewise.\n\t* gcc.dg/builtin-object-size-2.c: Likewise.\n\t* gcc.dg/builtin-object-size-3.c: Likewise.\n\t* gcc.dg/builtin-object-size-4.c: Likewise.\n\t* gcc.dg/builtin-object-size-6.c: Likewise.\n\t* gcc.dg/builtin-object-size-7.c: Likewise.\n\t* gcc.dg/builtin-object-size-8.c: Likewise.\n\t* gcc.dg/pr101836.c: Likewise.\n\t* gcc.dg/strict-flex-array-3.c: Likewise.\n\nSigned-off-by: Siddhesh Poyarekar <siddhesh@gotplt.org>", "tree": {"sha": "25c72ce5be30046662fcff96622fad1cdd96a459", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25c72ce5be30046662fcff96622fad1cdd96a459"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbc4db7e824719084ee32d02edcf2b6191a05f27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbc4db7e824719084ee32d02edcf2b6191a05f27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbc4db7e824719084ee32d02edcf2b6191a05f27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbc4db7e824719084ee32d02edcf2b6191a05f27/comments", "author": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a7196977f6e91ad12c209cb2e3dbfe9f0fd3c3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a7196977f6e91ad12c209cb2e3dbfe9f0fd3c3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a7196977f6e91ad12c209cb2e3dbfe9f0fd3c3b"}], "stats": {"total": 2115, "additions": 1039, "deletions": 1076}, "files": [{"sha": "ebbeced19428b13d9689c4d6854b00b9bfcd93bf", "filename": "gcc/testsuite/g++.dg/ext/builtin-object-size1.C", "status": "modified", "additions": 128, "deletions": 132, "changes": 260, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc4db7e824719084ee32d02edcf2b6191a05f27/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-object-size1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc4db7e824719084ee32d02edcf2b6191a05f27/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-object-size1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-object-size1.C?ref=dbc4db7e824719084ee32d02edcf2b6191a05f27", "patch": "@@ -1,11 +1,7 @@\n // { dg-do run }\n // { dg-options \"-O2\" }\n \n-typedef __SIZE_TYPE__ size_t;\n-extern \"C\" void abort ();\n-extern \"C\" void exit (int);\n-extern \"C\" void *malloc (size_t);\n-extern \"C\" void free (void *);\n+#include \"../../gcc.dg/builtin-object-size-common.h\"\n \n struct A\n {\n@@ -20,105 +16,105 @@ test1 (A *p)\n {\n   char *c;\n   if (__builtin_object_size (&p->a, 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   c = p->a;\n   if (__builtin_object_size (c, 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   c = &p->a[0];\n   if (__builtin_object_size (c, 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   c = &p->a[3];\n   if (__builtin_object_size (c, 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->b;\n   if (__builtin_object_size (c, 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->c;\n   if (__builtin_object_size (c, 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a, 1) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 1) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 1) != sizeof (p->a) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 1) != sizeof (p->b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 1) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   c = p->a;\n   if (__builtin_object_size (c, 1) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   c = &p->a[0];\n   if (__builtin_object_size (c, 1) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   c = &p->a[3];\n   if (__builtin_object_size (c, 1) != sizeof (p->a) - 3)\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->b;\n   if (__builtin_object_size (c, 1) != sizeof (p->b))\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->c;\n   if (__builtin_object_size (c, 1) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a, 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 2) != 0)\n-    abort ();\n+    FAIL ();\n   c = p->a;\n   if (__builtin_object_size (c, 2) != 0)\n-    abort ();\n+    FAIL ();\n   c = &p->a[0];\n   if (__builtin_object_size (c, 2) != 0)\n-    abort ();\n+    FAIL ();\n   c = &p->a[3];\n   if (__builtin_object_size (c, 2) != 0)\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->b;\n   if (__builtin_object_size (c, 2) != 0)\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->c;\n   if (__builtin_object_size (c, 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a, 3) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 3) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 3) != sizeof (p->a) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 3) != sizeof (p->b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 3) != 0)\n-    abort ();\n+    FAIL ();\n   c = p->a;\n   if (__builtin_object_size (c, 3) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   c = &p->a[0];\n   if (__builtin_object_size (c, 3) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   c = &p->a[3];\n   if (__builtin_object_size (c, 3) != sizeof (p->a) - 3)\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->b;\n   if (__builtin_object_size (c, 3) != sizeof (p->b))\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->c;\n   if (__builtin_object_size (c, 3) != 0)\n-    abort ();\n+    FAIL ();\n }\n \n void\n@@ -129,105 +125,105 @@ test2 (void)\n   size_t s = 2 * sizeof (A);\n   A *p = (A *) malloc (2 * sizeof (A));\n   if (__builtin_object_size (&p->a, 0) != s)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 0) != s)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 0) != s - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 0) != s - __builtin_offsetof (A, b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 0) != s - __builtin_offsetof (A, c))\n-    abort ();\n+    FAIL ();\n   c = p->a;\n   if (__builtin_object_size (c, 0) != s)\n-    abort ();\n+    FAIL ();\n   c = &p->a[0];\n   if (__builtin_object_size (c, 0) != s)\n-    abort ();\n+    FAIL ();\n   c = &p->a[3];\n   if (__builtin_object_size (c, 0) != s - 3)\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->b;\n   if (__builtin_object_size (c, 0) != s - __builtin_offsetof (A, b))\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->c;\n   if (__builtin_object_size (c, 0) != s - __builtin_offsetof (A, c))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a, 1) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 1) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 1) != sizeof (p->a) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 1) != sizeof (p->b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 1) != s - __builtin_offsetof (A, c))\n-    abort ();\n+    FAIL ();\n   c = p->a;\n   if (__builtin_object_size (c, 1) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   c = &p->a[0];\n   if (__builtin_object_size (c, 1) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   c = &p->a[3];\n   if (__builtin_object_size (c, 1) != sizeof (p->a) - 3)\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->b;\n   if (__builtin_object_size (c, 1) != sizeof (p->b))\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->c;\n   if (__builtin_object_size (c, 1) != s - __builtin_offsetof (A, c))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a, 2) != s)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 2) != s)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 2) != s - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 2) != s - __builtin_offsetof (A, b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 2) != s - __builtin_offsetof (A, c))\n-    abort ();\n+    FAIL ();\n   c = p->a;\n   if (__builtin_object_size (c, 2) != s)\n-    abort ();\n+    FAIL ();\n   c = &p->a[0];\n   if (__builtin_object_size (c, 2) != s)\n-    abort ();\n+    FAIL ();\n   c = &p->a[3];\n   if (__builtin_object_size (c, 2) != s - 3)\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->b;\n   if (__builtin_object_size (c, 2) != s - __builtin_offsetof (A, b))\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->c;\n   if (__builtin_object_size (c, 2) != s - __builtin_offsetof (A, c))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a, 3) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 3) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 3) != sizeof (p->a) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 3) != sizeof (p->b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 3) != s - __builtin_offsetof (A, c))\n-    abort ();\n+    FAIL ();\n   c = p->a;\n   if (__builtin_object_size (c, 3) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   c = &p->a[0];\n   if (__builtin_object_size (c, 3) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   c = &p->a[3];\n   if (__builtin_object_size (c, 3) != sizeof (p->a) - 3)\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->b;\n   if (__builtin_object_size (c, 3) != sizeof (p->b))\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->c;\n   if (__builtin_object_size (c, 3) != s - __builtin_offsetof (A, c))\n-    abort ();\n+    FAIL ();\n   free (p);\n }\n \n@@ -239,48 +235,48 @@ test3 (void)\n   size_t s;\n   A *p = (A *) malloc (4);\n   if (__builtin_object_size (&p->a, 0) != 4)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 0) != 4)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 0) != 1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 0) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 0) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a, 1) != 4)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 1) != 4)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 1) != 1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 1) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 1) != 0)\n-    abort ();\n+    FAIL ();\n   free (p);\n   s = __builtin_offsetof (A, c) + 4;\n   p = (A *) malloc (s);\n   if (__builtin_object_size (&p->a, 0) != s)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 0) != s)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 0) != s - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 0) != s - __builtin_offsetof (A, b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 0) != 4)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a, 1) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 1) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 1) != sizeof (p->a) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 1) != sizeof (p->b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 1) != 4)\n-    abort ();\n+    FAIL ();\n   free (p);\n }\n \n@@ -294,17 +290,17 @@ __attribute__ ((noinline))\n test4 (struct B *q, int i)\n {\n   if (__builtin_object_size (&q->a[2].a[2], 1) != sizeof (q->a[0].a) - 2)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&q->a[2].c[2], 1) != sizeof (q->a[0].c) - 2)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&q->a[3].a[2], 1) != sizeof (q->a[0].a) - 2)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&q->a[3].c[2], 1) != sizeof (q->a[0].c) - 2)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&q->a[i].a[2], 1) != sizeof (q->a[0].a) - 2)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&q->a[i].c[2], 1) != sizeof (q->a[0].c) - 2)\n-    abort ();\n+    FAIL ();\n }\n \n struct C\n@@ -318,13 +314,13 @@ __attribute__ ((noinline))\n test5 (struct C *c)\n {\n   if (__builtin_object_size (&c->b, 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&c->b, 1) != 1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&c->b, 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&c->b, 3) != 1)\n-    abort ();\n+    FAIL ();\n }\n \n struct D\n@@ -342,13 +338,13 @@ __attribute__ ((noinline))\n test6 (struct D *d)\n {\n   if (__builtin_object_size (&d->j.a[3], 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&d->j.a[3], 1) != sizeof (d->j.a) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&d->j.a[3], 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&d->j.a[3], 3) != sizeof (d->j.a) - 3)\n-    abort ();\n+    FAIL ();\n }\n \n struct E\n@@ -366,21 +362,21 @@ __attribute__ ((noinline))\n test7 (struct E *e)\n {\n   if (__builtin_object_size (&e->j[0].a[3], 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&e->j[0].a[3], 1) != sizeof (e->j[0].a) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&e->j[0].a[3], 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&e->j[0].a[3], 3) != sizeof (e->j[0].a) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size ((char *) &e->j[0], 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size ((char *) &e->j[0], 1) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size ((char *) &e->j[0], 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size ((char *) &e->j[0], 3) != 0)\n-    abort ();\n+    FAIL ();\n }\n \n union F\n@@ -398,13 +394,13 @@ __attribute__ ((noinline))\n test8 (union F *f)\n {\n   if (__builtin_object_size (&f->d.c[3], 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&f->d.c[3], 1) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&f->d.c[3], 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&f->d.c[3], 3) != 0)\n-    abort ();\n+    FAIL ();\n }\n \n int\n@@ -431,5 +427,5 @@ main (void)\n   union F f, *fp = &f;\n   __asm (\"\" : \"+r\" (fp));\n   test8 (fp);\n-  exit (0);\n+  DONE ();\n }"}, {"sha": "7a8f4e6273320b433399dd9013f73b231be64cf1", "filename": "gcc/testsuite/g++.dg/ext/builtin-object-size2.C", "status": "modified", "additions": 128, "deletions": 132, "changes": 260, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc4db7e824719084ee32d02edcf2b6191a05f27/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-object-size2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc4db7e824719084ee32d02edcf2b6191a05f27/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-object-size2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-object-size2.C?ref=dbc4db7e824719084ee32d02edcf2b6191a05f27", "patch": "@@ -1,11 +1,7 @@\n // { dg-do run }\n // { dg-options \"-O2\" }\n \n-typedef __SIZE_TYPE__ size_t;\n-extern \"C\" void abort ();\n-extern \"C\" void exit (int);\n-extern \"C\" void *malloc (size_t);\n-extern \"C\" void free (void *);\n+#include \"../../gcc.dg/builtin-object-size-common.h\"\n \n typedef struct A\n {\n@@ -23,105 +19,105 @@ test1 (A *p)\n {\n   char *c;\n   if (__builtin_object_size (&p->a, 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   c = p->a;\n   if (__builtin_object_size (c, 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   c = &p->a[0];\n   if (__builtin_object_size (c, 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   c = &p->a[3];\n   if (__builtin_object_size (c, 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->b;\n   if (__builtin_object_size (c, 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->c;\n   if (__builtin_object_size (c, 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a, 1) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 1) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 1) != sizeof (p->a) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 1) != sizeof (p->b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 1) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   c = p->a;\n   if (__builtin_object_size (c, 1) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   c = &p->a[0];\n   if (__builtin_object_size (c, 1) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   c = &p->a[3];\n   if (__builtin_object_size (c, 1) != sizeof (p->a) - 3)\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->b;\n   if (__builtin_object_size (c, 1) != sizeof (p->b))\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->c;\n   if (__builtin_object_size (c, 1) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a, 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 2) != 0)\n-    abort ();\n+    FAIL ();\n   c = p->a;\n   if (__builtin_object_size (c, 2) != 0)\n-    abort ();\n+    FAIL ();\n   c = &p->a[0];\n   if (__builtin_object_size (c, 2) != 0)\n-    abort ();\n+    FAIL ();\n   c = &p->a[3];\n   if (__builtin_object_size (c, 2) != 0)\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->b;\n   if (__builtin_object_size (c, 2) != 0)\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->c;\n   if (__builtin_object_size (c, 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a, 3) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 3) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 3) != sizeof (p->a) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 3) != sizeof (p->b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 3) != 0)\n-    abort ();\n+    FAIL ();\n   c = p->a;\n   if (__builtin_object_size (c, 3) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   c = &p->a[0];\n   if (__builtin_object_size (c, 3) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   c = &p->a[3];\n   if (__builtin_object_size (c, 3) != sizeof (p->a) - 3)\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->b;\n   if (__builtin_object_size (c, 3) != sizeof (p->b))\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->c;\n   if (__builtin_object_size (c, 3) != 0)\n-    abort ();\n+    FAIL ();\n }\n \n void\n@@ -132,105 +128,105 @@ test2 (void)\n   size_t s = 2 * sizeof (A);\n   A *p = (A *) malloc (2 * sizeof (A));\n   if (__builtin_object_size (&p->a, 0) != s)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 0) != s)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 0) != s - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 0) != s - __builtin_offsetof (A, b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 0) != s - __builtin_offsetof (A, c))\n-    abort ();\n+    FAIL ();\n   c = p->a;\n   if (__builtin_object_size (c, 0) != s)\n-    abort ();\n+    FAIL ();\n   c = &p->a[0];\n   if (__builtin_object_size (c, 0) != s)\n-    abort ();\n+    FAIL ();\n   c = &p->a[3];\n   if (__builtin_object_size (c, 0) != s - 3)\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->b;\n   if (__builtin_object_size (c, 0) != s - __builtin_offsetof (A, b))\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->c;\n   if (__builtin_object_size (c, 0) != s - __builtin_offsetof (A, c))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a, 1) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 1) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 1) != sizeof (p->a) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 1) != sizeof (p->b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 1) != s - __builtin_offsetof (A, c))\n-    abort ();\n+    FAIL ();\n   c = p->a;\n   if (__builtin_object_size (c, 1) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   c = &p->a[0];\n   if (__builtin_object_size (c, 1) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   c = &p->a[3];\n   if (__builtin_object_size (c, 1) != sizeof (p->a) - 3)\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->b;\n   if (__builtin_object_size (c, 1) != sizeof (p->b))\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->c;\n   if (__builtin_object_size (c, 1) != s - __builtin_offsetof (A, c))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a, 2) != s)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 2) != s)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 2) != s - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 2) != s - __builtin_offsetof (A, b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 2) != s - __builtin_offsetof (A, c))\n-    abort ();\n+    FAIL ();\n   c = p->a;\n   if (__builtin_object_size (c, 2) != s)\n-    abort ();\n+    FAIL ();\n   c = &p->a[0];\n   if (__builtin_object_size (c, 2) != s)\n-    abort ();\n+    FAIL ();\n   c = &p->a[3];\n   if (__builtin_object_size (c, 2) != s - 3)\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->b;\n   if (__builtin_object_size (c, 2) != s - __builtin_offsetof (A, b))\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->c;\n   if (__builtin_object_size (c, 2) != s - __builtin_offsetof (A, c))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a, 3) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 3) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 3) != sizeof (p->a) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 3) != sizeof (p->b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 3) != s - __builtin_offsetof (A, c))\n-    abort ();\n+    FAIL ();\n   c = p->a;\n   if (__builtin_object_size (c, 3) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   c = &p->a[0];\n   if (__builtin_object_size (c, 3) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   c = &p->a[3];\n   if (__builtin_object_size (c, 3) != sizeof (p->a) - 3)\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->b;\n   if (__builtin_object_size (c, 3) != sizeof (p->b))\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->c;\n   if (__builtin_object_size (c, 3) != s - __builtin_offsetof (A, c))\n-    abort ();\n+    FAIL ();\n   free (p);\n }\n \n@@ -242,48 +238,48 @@ test3 (void)\n   size_t s;\n   A *p = (A *) malloc (4);\n   if (__builtin_object_size (&p->a, 0) != 4)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 0) != 4)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 0) != 1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 0) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 0) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a, 1) != 4)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 1) != 4)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 1) != 1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 1) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 1) != 0)\n-    abort ();\n+    FAIL ();\n   free (p);\n   s = __builtin_offsetof (A, c) + 4;\n   p = (A *) malloc (s);\n   if (__builtin_object_size (&p->a, 0) != s)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 0) != s)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 0) != s - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 0) != s - __builtin_offsetof (A, b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 0) != 4)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a, 1) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 1) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 1) != sizeof (p->a) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 1) != sizeof (p->b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 1) != 4)\n-    abort ();\n+    FAIL ();\n   free (p);\n }\n \n@@ -297,17 +293,17 @@ __attribute__ ((noinline))\n test4 (struct B *q, int i)\n {\n   if (__builtin_object_size (&q->a[2].a[2], 1) != sizeof (q->a[0].a) - 2)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&q->a[2].c[2], 1) != sizeof (q->a[0].c) - 2)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&q->a[3].a[2], 1) != sizeof (q->a[0].a) - 2)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&q->a[3].c[2], 1) != sizeof (q->a[0].c) - 2)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&q->a[i].a[2], 1) != sizeof (q->a[0].a) - 2)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&q->a[i].c[2], 1) != sizeof (q->a[0].c) - 2)\n-    abort ();\n+    FAIL ();\n }\n \n struct C\n@@ -321,13 +317,13 @@ __attribute__ ((noinline))\n test5 (struct C *c)\n {\n   if (__builtin_object_size (&c->b, 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&c->b, 1) != 1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&c->b, 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&c->b, 3) != 1)\n-    abort ();\n+    FAIL ();\n }\n \n struct D\n@@ -345,13 +341,13 @@ __attribute__ ((noinline))\n test6 (struct D *d)\n {\n   if (__builtin_object_size (&d->j.a[3], 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&d->j.a[3], 1) != sizeof (d->j.a) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&d->j.a[3], 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&d->j.a[3], 3) != sizeof (d->j.a) - 3)\n-    abort ();\n+    FAIL ();\n }\n \n struct E\n@@ -369,21 +365,21 @@ __attribute__ ((noinline))\n test7 (struct E *e)\n {\n   if (__builtin_object_size (&e->j[0].a[3], 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&e->j[0].a[3], 1) != sizeof (e->j[0].a) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&e->j[0].a[3], 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&e->j[0].a[3], 3) != sizeof (e->j[0].a) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size ((char *) &e->j[0], 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size ((char *) &e->j[0], 1) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size ((char *) &e->j[0], 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size ((char *) &e->j[0], 3) != 0)\n-    abort ();\n+    FAIL ();\n }\n \n union F\n@@ -401,13 +397,13 @@ __attribute__ ((noinline))\n test8 (union F *f)\n {\n   if (__builtin_object_size (&f->d.c[3], 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&f->d.c[3], 1) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&f->d.c[3], 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&f->d.c[3], 3) != 0)\n-    abort ();\n+    FAIL ();\n }\n \n int\n@@ -434,5 +430,5 @@ main (void)\n   union F f, *fp = &f;\n   __asm (\"\" : \"+r\" (fp));\n   test8 (fp);\n-  exit (0);\n+  DONE ();\n }"}, {"sha": "6da04202ffed4d07100ce051c82305ed2b4fc6f7", "filename": "gcc/testsuite/gcc.dg/builtin-dynamic-object-size-0.c", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc4db7e824719084ee32d02edcf2b6191a05f27/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc4db7e824719084ee32d02edcf2b6191a05f27/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-0.c?ref=dbc4db7e824719084ee32d02edcf2b6191a05f27", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do run } */\n /* { dg-options \"-O2\" } */\n \n+#include \"builtin-object-size-common.h\"\n+\n typedef __SIZE_TYPE__ size_t;\n #define abort __builtin_abort\n \n@@ -604,13 +606,6 @@ test_pr105736 (struct TV4 *a)\n   return &a->v[0];\n }\n \n-unsigned nfails = 0;\n-\n-#define FAIL() ({ \\\n-  __builtin_printf (\"Failure at line: %d\\n\", __LINE__);\t\t\t      \\\n-  nfails++;\t\t\t\t\t\t\t\t      \\\n-})\n-\n int\n main (int argc, char **argv)\n {\n@@ -790,8 +785,5 @@ main (int argc, char **argv)\n   if (test_strndup_min (str, 4) != 1)\n     FAIL ();\n \n-  if (nfails > 0)\n-    __builtin_abort ();\n-\n-  return 0;\n+  DONE ();\n }"}, {"sha": "db325801f93663e641fcacbae6f492e45d48f3df", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-1.c", "status": "modified", "additions": 143, "deletions": 154, "changes": 297, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc4db7e824719084ee32d02edcf2b6191a05f27/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc4db7e824719084ee32d02edcf2b6191a05f27/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-1.c?ref=dbc4db7e824719084ee32d02edcf2b6191a05f27", "patch": "@@ -2,18 +2,7 @@\n /* { dg-options \"-O2 -Wno-stringop-overread\" } */\n /* { dg-require-effective-target alloca } */\n \n-typedef __SIZE_TYPE__ size_t;\n-extern void abort (void);\n-extern void exit (int);\n-extern void *malloc (size_t);\n-extern void *calloc (size_t, size_t);\n-extern void free (void *);\n-extern void *alloca (size_t);\n-extern void *memcpy (void *, const void *, size_t);\n-extern void *memset (void *, int, size_t);\n-extern char *strcpy (char *, const char *);\n-extern char *strdup (const char *);\n-extern char *strndup (const char *, size_t);\n+#include \"builtin-object-size-common.h\"\n \n struct A\n {\n@@ -39,175 +28,175 @@ test1 (void *q, int x)\n     r = &a.c[1];\n   if (__builtin_object_size (p, 0)\n       != sizeof (a) - __builtin_offsetof (struct A, a) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&a.c[9], 0)\n       != sizeof (a) - __builtin_offsetof (struct A, c) - 9)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (q, 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n #ifdef __builtin_object_size\n   if (__builtin_object_size (r, 0)\n       != (x < 0\n \t  ? sizeof (a) - __builtin_offsetof (struct A, a) - 9\n \t  : sizeof (a) - __builtin_offsetof (struct A, c) - 1))\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (r, 0)\n       != sizeof (a) - __builtin_offsetof (struct A, a) - 9)\n-    abort ();\n+    FAIL ();\n #endif\n   if (x < 6)\n     r = &w[2].a[1];\n   else\n     r = &a.a[6];\n   if (__builtin_object_size (&y, 0)\n       != sizeof (y))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (w, 0)\n       != sizeof (w))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&y.b, 0)\n       != sizeof (a) - __builtin_offsetof (struct A, b))\n-    abort ();\n+    FAIL ();\n #ifdef __builtin_object_size\n   if (__builtin_object_size (r, 0)\n       != (x < 6\n \t  ? 2 * sizeof (w[0]) - __builtin_offsetof (struct A, a) - 1\n \t  : sizeof (a) - __builtin_offsetof (struct A, a) - 6))\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (r, 0)\n       != 2 * sizeof (w[0]) - __builtin_offsetof (struct A, a) - 1)\n-    abort ();\n+    FAIL ();\n #endif\n   if (x < 20)\n     r = malloc (30);\n   else\n     r = calloc (2, 16);\n #ifdef __builtin_object_size\n   if (__builtin_object_size (r, 0) != (x < 20 ? 30 : 2 * 16))\n-    abort ();\n+    FAIL ();\n #else\n   /* We may duplicate this test onto the two exit paths.  On one path\n      the size will be 32, the other it will be 30.  If we don't duplicate\n      this test, then the size will be 32.  */\n   if (__builtin_object_size (r, 0) != 2 * 16\n       && __builtin_object_size (r, 0) != 30)\n-    abort ();\n+    FAIL ();\n #endif\n   if (x < 20)\n     r = malloc (30);\n   else\n     r = calloc (2, 14);\n #ifdef __builtin_object_size\n   if (__builtin_object_size (r, 0) != (x < 20 ? 30 : 2 * 14))\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (r, 0) != 30)\n-    abort ();\n+    FAIL ();\n #endif\n   if (x < 30)\n     r = malloc (sizeof (a));\n   else\n     r = &a.a[3];\n #ifdef __builtin_object_size\n   if (__builtin_object_size (r, 0) != (x < 30 ? sizeof (a) : sizeof (a) - 3))\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (r, 0) != sizeof (a))\n-    abort ();\n+    FAIL ();\n #endif\n   r = memcpy (r, \"a\", 2);\n #ifdef __builtin_object_size\n   if (__builtin_object_size (r, 0) != (x < 30 ? sizeof (a) : sizeof (a) - 3))\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (r, 0) != sizeof (a))\n-    abort ();\n+    FAIL ();\n #endif\n   r = memcpy (r + 2, \"b\", 2) + 2;\n #ifdef __builtin_object_size\n   if (__builtin_object_size (r, 0)\n       != (x < 30 ? sizeof (a) - 4 : sizeof (a) - 7))\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (r, 0) != sizeof (a) - 4)\n-    abort ();\n+    FAIL ();\n #endif\n   r = &a.a[4];\n   r = memset (r, 'a', 2);\n   if (__builtin_object_size (r, 0)\n       != sizeof (a) - __builtin_offsetof (struct A, a) - 4)\n-    abort ();\n+    FAIL ();\n   r = memset (r + 2, 'b', 2) + 2;\n   if (__builtin_object_size (r, 0)\n       != sizeof (a) - __builtin_offsetof (struct A, a) - 8)\n-    abort ();\n+    FAIL ();\n   r = &a.a[1];\n   r = strcpy (r, \"ab\");\n   if (__builtin_object_size (r, 0)\n       != sizeof (a) - __builtin_offsetof (struct A, a) - 1)\n-    abort ();\n+    FAIL ();\n   r = strcpy (r + 2, \"cd\") + 2;\n   if (__builtin_object_size (r, 0)\n       != sizeof (a) - __builtin_offsetof (struct A, a) - 5)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (exta, 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (exta + 10, 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&exta[5], 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (extb, 0) != sizeof (extb))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (extb + 10, 0) != sizeof (extb) - 10)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&extb[5], 0) != sizeof (extb) - 5)\n-    abort ();\n+    FAIL ();\n #ifdef __builtin_object_size\n   if (__builtin_object_size (var, 0) != x + 10)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (var + 10, 0) != x)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&var[5], 0) != x + 5)\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (var, 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (var + 10, 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&var[5], 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n #endif\n   if (__builtin_object_size (zerol, 0) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&zerol, 0) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&zerol[0], 0) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (zerol[0].a, 0) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&zerol[0].a[0], 0) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&zerol[0].b, 0) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (\"abcdefg\", 0) != sizeof (\"abcdefg\"))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (\"abcd\\0efg\", 0) != sizeof (\"abcd\\0efg\"))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&\"abcd\\0efg\", 0) != sizeof (\"abcd\\0efg\"))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&\"abcd\\0efg\"[0], 0) != sizeof (\"abcd\\0efg\"))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&\"abcd\\0efg\"[4], 0) != sizeof (\"abcd\\0efg\") - 4)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (\"abcd\\0efg\" + 5, 0) != sizeof (\"abcd\\0efg\") - 5)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (L\"abcdefg\", 0) != sizeof (L\"abcdefg\"))\n-    abort ();\n+    FAIL ();\n   r = (char *) L\"abcd\\0efg\";\n   if (__builtin_object_size (r + 2, 0) != sizeof (L\"abcd\\0efg\") - 2)\n-    abort ();\n+    FAIL ();\n }\n \n size_t l1 = 1;\n@@ -242,19 +231,19 @@ test2 (void)\n   for (i = 0; i < 4; ++i)\n     {\n       if (i == l1 - 1)\n-        res = sizeof (a) - __builtin_offsetof (struct B, buf1) - 1;\n+\tres = sizeof (a) - __builtin_offsetof (struct B, buf1) - 1;\n       else if (i == l1)\n-        res = sizeof (a) - __builtin_offsetof (struct B, buf2) - 7;\n+\tres = sizeof (a) - __builtin_offsetof (struct B, buf2) - 7;\n       else if (i == l1 + 1)\n-        res = sizeof (buf3) - 5;\n+\tres = sizeof (buf3) - 5;\n       else if (i == l1 + 2)\n-        res = sizeof (a) - __builtin_offsetof (struct B, buf1) - 9;\n+\tres = sizeof (a) - __builtin_offsetof (struct B, buf1) - 9;\n     }\n #else\n   res = 20;\n #endif\n   if (__builtin_object_size (r, 0) != res)\n-    abort ();\n+    FAIL ();\n   r = &buf3[20];\n   for (i = 0; i < 4; ++i)\n     {\n@@ -273,38 +262,38 @@ test2 (void)\n   for (i = 0; i < 4; ++i)\n     {\n       if (i == l1 - 1)\n-        res = sizeof (a) - __builtin_offsetof (struct B, buf1) - 7;\n+\tres = sizeof (a) - __builtin_offsetof (struct B, buf1) - 7;\n       else if (i == l1)\n-        res = sizeof (a) - __builtin_offsetof (struct B, buf2) - 7;\n+\tres = sizeof (a) - __builtin_offsetof (struct B, buf2) - 7;\n       else if (i == l1 + 1)\n-        res = sizeof (buf3) - 5;\n+\tres = sizeof (buf3) - 5;\n       else if (i == l1 + 2)\n-        res = sizeof (a) - __builtin_offsetof (struct B, buf1) - 9;\n+\tres = sizeof (a) - __builtin_offsetof (struct B, buf1) - 9;\n     }\n   if (__builtin_object_size (r, 0) != res)\n-    abort ();\n+    FAIL ();\n #else\n   res = 15;\n #endif\n   if (__builtin_object_size (r, 0) != res)\n-    abort ();\n+    FAIL ();\n   r += 8;\n #ifdef __builtin_object_size\n   res -= 8;\n   if (__builtin_object_size (r, 0) != res)\n-    abort ();\n+    FAIL ();\n   if (res >= 6)\n     {\n       if (__builtin_object_size (r + 6, 0) != res - 6)\n-        abort ();\n+\tFAIL ();\n     }\n   else if (__builtin_object_size (r + 6, 0) != 0)\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (r, 0) != 7)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (r + 6, 0) != 1)\n-    abort ();\n+    FAIL ();\n #endif\n   r = &buf3[18];\n   for (i = 0; i < 4; ++i)\n@@ -324,24 +313,24 @@ test2 (void)\n   for (i = 0; i < 4; ++i)\n     {\n       if (i == l1 - 1)\n-          res = sizeof (a) - __builtin_offsetof (struct B, buf1) - 9;\n+\t  res = sizeof (a) - __builtin_offsetof (struct B, buf1) - 9;\n       else if (i == l1)\n-        res = sizeof (a) - __builtin_offsetof (struct B, buf2) - 9;\n+\tres = sizeof (a) - __builtin_offsetof (struct B, buf2) - 9;\n       else if (i == l1 + 1)\n-        res = sizeof (buf3) - 5;\n+\tres = sizeof (buf3) - 5;\n       else if (i == l1 + 2)\n-        res = sizeof (a) - __builtin_offsetof (struct B, buf1) - 4;\n+\tres = sizeof (a) - __builtin_offsetof (struct B, buf1) - 4;\n     }\n   if (res >= 12)\n     {\n       if (__builtin_object_size (r + 12, 0) != res - 12)\n-        abort ();\n+\tFAIL ();\n     }\n   else if (__builtin_object_size (r + 12, 0) != 0)\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (r + 12, 0) != 4)\n-    abort ();\n+    FAIL ();\n #endif\n }\n \n@@ -357,103 +346,103 @@ test3 (void)\n   double *dp;\n \n   if (__builtin_object_size (buf4, 0) != sizeof (buf4))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&buf4, 0) != sizeof (buf4))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&buf4[0], 0) != sizeof (buf4))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&buf4[1], 0) != sizeof (buf4) - 1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x, 0) != sizeof (x))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a, 0) != sizeof (x))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a[0], 0) != sizeof (x))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a[0].a, 0) != sizeof (x))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a[0].a[0], 0) != sizeof (x))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a[0].a[3], 0) != sizeof (x) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a[0].b, 0)\n       != sizeof (x) - __builtin_offsetof (struct A, b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a[1].c, 0)\n       != sizeof (x) - sizeof (struct A) - __builtin_offsetof (struct A, c))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a[1].c[0], 0)\n       != sizeof (x) - sizeof (struct A) - __builtin_offsetof (struct A, c))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a[1].c[3], 0)\n       != sizeof (x) - sizeof (struct A) - __builtin_offsetof (struct A, c) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.b, 0)\n       != sizeof (x) - __builtin_offsetof (struct B, b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.b.a, 0)\n       != sizeof (x) - __builtin_offsetof (struct B, b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.b.a[0], 0)\n       != sizeof (x) - __builtin_offsetof (struct B, b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.b.a[3], 0)\n       != sizeof (x) - __builtin_offsetof (struct B, b) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.b.b, 0)\n       != sizeof (x) - __builtin_offsetof (struct B, b)\n \t - __builtin_offsetof (struct A, b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.b.c, 0)\n       != sizeof (x) - __builtin_offsetof (struct B, b)\n \t - __builtin_offsetof (struct A, c))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.b.c[0], 0)\n       != sizeof (x) - __builtin_offsetof (struct B, b)\n \t - __builtin_offsetof (struct A, c))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.b.c[3], 0)\n       != sizeof (x) - __builtin_offsetof (struct B, b)\n \t - __builtin_offsetof (struct A, c) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.c, 0)\n       != sizeof (x) - __builtin_offsetof (struct B, c))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.c[0], 0)\n       != sizeof (x) - __builtin_offsetof (struct B, c))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.c[1], 0)\n       != sizeof (x) - __builtin_offsetof (struct B, c) - 1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.d, 0)\n       != sizeof (x) - __builtin_offsetof (struct B, d))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.e, 0)\n       != sizeof (x) - __builtin_offsetof (struct B, e))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.f, 0)\n       != sizeof (x) - __builtin_offsetof (struct B, f))\n-    abort ();\n+    FAIL ();\n   dp = &__real__ x.f;\n   if (__builtin_object_size (dp, 0)\n       != sizeof (x) - __builtin_offsetof (struct B, f))\n-    abort ();\n+    FAIL ();\n   dp = &__imag__ x.f;\n   if (__builtin_object_size (dp, 0)\n       != sizeof (x) - __builtin_offsetof (struct B, f)\n \t - sizeof (x.f) / 2)\n-    abort ();\n+    FAIL ();\n   dp = &y;\n   if (__builtin_object_size (dp, 0) != sizeof (y))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&z, 0) != sizeof (z))\n-    abort ();\n+    FAIL ();\n   dp = &__real__ z;\n   if (__builtin_object_size (dp, 0) != sizeof (z))\n-    abort ();\n+    FAIL ();\n   dp = &__imag__ z;\n   if (__builtin_object_size (dp, 0) != sizeof (z) / 2)\n-    abort ();\n+    FAIL ();\n }\n \n struct S { unsigned int a; };\n@@ -470,7 +459,7 @@ test4 (char *x, int y)\n       p = (struct A *) x;\n       x = (char *) &p[1];\n       if (__builtin_object_size (p, 0) != (size_t) -1)\n-\tabort ();\n+\tFAIL ();\n     }\n   return x;\n }\n@@ -487,7 +476,7 @@ test5 (size_t x)\n     p = p + 4;\n #ifdef __builtin_object_size\n   if (__builtin_object_size (p, 0) != sizeof (buf) - 8 - 4 * x)\n-    abort ();\n+    FAIL ();\n #else\n   /* My understanding of ISO C99 6.5.6 is that a conforming\n      program will not end up with p equal to &buf[0]\n@@ -497,7 +486,7 @@ test5 (size_t x)\n      bytes from p until end of the object is 56, otherwise\n      it would be 64 (or conservative (size_t) -1 == unknown).  */\n   if (__builtin_object_size (p, 0) != sizeof (buf) - 8)\n-    abort ();\n+    FAIL ();\n #endif\n   memset (p, ' ', sizeof (buf) - 8 - 4 * 4);\n }\n@@ -514,10 +503,10 @@ test6 (size_t x)\n     p = p + 4;\n #ifdef __builtin_object_size\n   if (__builtin_object_size (p, 0) != sizeof (t) - 8 - 4 * x)\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (p, 0) != sizeof (t) - 8)\n-    abort ();\n+    FAIL ();\n #endif\n   memset (p, ' ', sizeof (t) - 8 - 4 * 4);\n }\n@@ -531,13 +520,13 @@ test7 (void)\n   char *p = &buf[64], *q = &t.buf[64];\n \n   if (__builtin_object_size (p + 64, 0) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (q + 63, 0) != sizeof (t) - 64 - 63)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (q + 64, 0) != sizeof (t) - 64 - 64)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (q + 256, 0) != 0)\n-    abort ();\n+    FAIL ();\n }\n \n void\n@@ -548,17 +537,17 @@ test8 (void)\n   char *p = &t.buf2[-4];\n   char *q = &t.buf2[0];\n   if (__builtin_object_size (p, 0) != sizeof (t) - 10 + 4)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (q, 0) != sizeof (t) - 10)\n-    abort ();\n+    FAIL ();\n   /* GCC only handles additions, not subtractions.  */\n   q = q - 8;\n   if (__builtin_object_size (q, 0) != (size_t) -1\n       && __builtin_object_size (q, 0) != sizeof (t) - 10 + 8)\n-    abort ();\n+    FAIL ();\n   p = &t.buf[-4];\n   if (__builtin_object_size (p, 0) != 0)\n-    abort ();\n+    FAIL ();\n }\n \n void\n@@ -575,21 +564,21 @@ test9 (unsigned cond)\n \n #ifdef __builtin_object_size\n   if (__builtin_object_size (&p[-4], 0) != (cond ? 6 : 10))\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (&p[-4], 0) != 10)\n-    abort ();\n+    FAIL ();\n #endif\n \n   for (unsigned i = cond; i > 0; i--)\n     p--;\n \n #ifdef __builtin_object_size\n   if (__builtin_object_size (p, 0) != ((cond ? 2 : 6) + cond))\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (p, 0) != 10)\n-    abort ();\n+    FAIL ();\n #endif\n \n   p = &y.c[8];\n@@ -599,10 +588,10 @@ test9 (unsigned cond)\n #ifdef __builtin_object_size\n   if (__builtin_object_size (p, 0)\n       != sizeof (y) - __builtin_offsetof (struct A, c) - 8 + cond)\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (p, 0) != sizeof (y))\n-    abort ();\n+    FAIL ();\n #endif\n }\n \n@@ -620,10 +609,10 @@ test10 (void)\n \t{\n #ifdef __builtin_object_size\n \t  if (__builtin_object_size (p - 3, 0) != sizeof (buf) - i + 3)\n-\t    abort ();\n+\t    FAIL ();\n #else\n \t  if (__builtin_object_size (p - 3, 0) != sizeof (buf))\n-\t    abort ();\n+\t    FAIL ();\n #endif\n \t  break;\n \t}\n@@ -641,19 +630,19 @@ test11 (void)\n   const char *ptr = \"abcdefghijklmnopqrstuvwxyz\";\n   char *res = strndup (ptr, 21);\n   if (__builtin_object_size (res, 0) != 22)\n-    abort ();\n+    FAIL ();\n \n   free (res);\n \n   res = strndup (ptr, 32);\n   if (__builtin_object_size (res, 0) != 27)\n-    abort ();\n+    FAIL ();\n \n   free (res);\n \n   res = strdup (ptr);\n   if (__builtin_object_size (res, 0) != 27)\n-    abort ();\n+    FAIL ();\n \n   free (res);\n \n@@ -662,19 +651,19 @@ test11 (void)\n \n   res = strndup (ptr2, 21);\n   if (__builtin_object_size (res, 0) != 22)\n-    abort ();\n+    FAIL ();\n \n   free (res);\n \n   res = strndup (ptr2, 32);\n   if (__builtin_object_size (res, 0) != 33)\n-    abort ();\n+    FAIL ();\n \n   free (res);\n \n   res = strndup (ptr2, 128);\n   if (__builtin_object_size (res, 0) != 64)\n-    abort ();\n+    FAIL ();\n \n   free (res);\n \n@@ -684,39 +673,39 @@ test11 (void)\n #else\n   if (__builtin_object_size (res, 0) != (size_t) -1)\n #endif\n-    abort ();\n+    FAIL ();\n   free (res);\n   free (ptr2);\n \n   ptr = \"abcd\\0efghijklmnopqrstuvwxyz\";\n   res = strdup (ptr);\n   if (__builtin_object_size (res, 0) != 5)\n-    abort ();\n+    FAIL ();\n   free (res);\n \n   res = strndup (ptr, 24);\n   if (__builtin_object_size (res, 0) != 5)\n-    abort ();\n+    FAIL ();\n   free (res);\n \n   res = strndup (ptr, 2);\n   if (__builtin_object_size (res, 0) != 3)\n-    abort ();\n+    FAIL ();\n   free (res);\n \n   res = strdup (&ptr[4]);\n   if (__builtin_object_size (res, 0) != 1)\n-    abort ();\n+    FAIL ();\n   free (res);\n \n   res = strndup (&ptr[4], 4);\n   if (__builtin_object_size (res, 0) != 1)\n-    abort ();\n+    FAIL ();\n   free (res);\n \n   res = strndup (&ptr[4], 1);\n   if (__builtin_object_size (res, 0) != 1)\n-    abort ();\n+    FAIL ();\n   free (res);\n }\n \n@@ -736,5 +725,5 @@ main (void)\n   test9 (1);\n   test10 ();\n   test11 ();\n-  exit (0);\n+  DONE ();\n }"}, {"sha": "e29dd17d61128de7a499b6402e7bff125f3824c9", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-12.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc4db7e824719084ee32d02edcf2b6191a05f27/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc4db7e824719084ee32d02edcf2b6191a05f27/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-12.c?ref=dbc4db7e824719084ee32d02edcf2b6191a05f27", "patch": "@@ -1,7 +1,8 @@\n /* { dg-do run } */\n /* { dg-options \"-O2\" } */\n \n-extern void abort (void);\n+#include \"builtin-object-size-common.h\"\n+\n struct S {\n     int len;\n     char s[0];\n@@ -10,10 +11,11 @@ int main()\n {\n   char buf[sizeof (struct S) + 32];\n   if (__builtin_object_size (((struct S *)&buf[0])->s, 1) != 32)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (((struct S *)&buf[1])->s, 1) != 31)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (((struct S *)&buf[64])->s, 0) != 0)\n-    abort ();\n-  return 0;\n+    FAIL ();\n+\n+  DONE ();\n }"}, {"sha": "7b6264d74861ccd2efc5c7b0e18906c2154ddf81", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-13.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc4db7e824719084ee32d02edcf2b6191a05f27/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc4db7e824719084ee32d02edcf2b6191a05f27/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-13.c?ref=dbc4db7e824719084ee32d02edcf2b6191a05f27", "patch": "@@ -1,10 +1,7 @@\n /* { dg-do run } */\n /* { dg-options \"-O2\" } */\n \n-typedef __SIZE_TYPE__ size_t;\n-extern void *malloc (size_t);\n-extern void free (void *);\n-extern void abort (void);\n+#include \"builtin-object-size-common.h\"\n \n union A\n {\n@@ -56,13 +53,13 @@ struct H\n \n #define T(X, S0, S1) \\\n   if (__builtin_object_size (X, 0) != (S0))\t\\\n-    abort ();\t\t\t\t\t\\\n+    FAIL ();\t\t\t\t\t\\\n   if (__builtin_object_size (X, 1) != (S1))\t\\\n-    abort ();\t\t\t\t\t\\\n+    FAIL ();\t\t\t\t\t\\\n   if (__builtin_object_size (X, 2) != (S0))\t\\\n-    abort ();\t\t\t\t\t\\\n+    FAIL ();\t\t\t\t\t\\\n   if (__builtin_object_size (X, 3) != (S1))\t\\\n-    abort ()\n+    FAIL ()\n #define TS(X, S0) T(&X, S0, sizeof (X))\n #define TA(X, S0, S1) \\\n   T(X, S0, S1); T(&X[0], S0, S1); T(&X[1], (S0) - 1, (S1) - 1)\n@@ -347,5 +344,5 @@ main (void)\n   free (h2);\n   free (h1);\n \n-  return 0;\n+  DONE ();\n }"}, {"sha": "7ee8ac095e70c86122ac6b000a5480b43709f40f", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-15.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc4db7e824719084ee32d02edcf2b6191a05f27/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc4db7e824719084ee32d02edcf2b6191a05f27/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-15.c?ref=dbc4db7e824719084ee32d02edcf2b6191a05f27", "patch": "@@ -1,27 +1,28 @@\n /* { dg-do run } */\n /* { dg-options \"-O2\" } */\n \n-extern void abort (void);\n+#include \"builtin-object-size-common.h\"\n \n int\n main ()\n {\n   struct A { char buf1[9]; char buf2[1]; } a;\n \n   if (__builtin_object_size (a.buf1 + (0 + 4), 1) != 5)\n-    abort ();\n+    FAIL ();\n   char *p = a.buf1;\n   p += 1;\n   p += 3;\n   if (__builtin_object_size (p, 1) != 5)\n-    abort ();\n+    FAIL ();\n   p = (char *) &a;\n   char *q = p + 1;\n   char *r = q + 3;\n   char *t = r;\n   if (r != (char *) &a + 4)\n     t = (char *) &a + 1;\n   if (__builtin_object_size (t, 1) != 6)\n-    abort ();\n-  return 0;\n+    FAIL ();\n+\n+  DONE ();\n }"}, {"sha": "4c71b1f6a37f1a990158090423db48accab08fcb", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-2.c", "status": "modified", "additions": 147, "deletions": 158, "changes": 305, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc4db7e824719084ee32d02edcf2b6191a05f27/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc4db7e824719084ee32d02edcf2b6191a05f27/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-2.c?ref=dbc4db7e824719084ee32d02edcf2b6191a05f27", "patch": "@@ -2,18 +2,7 @@\n /* { dg-options \"-O2 -Wno-stringop-overread\" } */\n /* { dg-require-effective-target alloca } */\n \n-typedef __SIZE_TYPE__ size_t;\n-extern void abort (void);\n-extern void exit (int);\n-extern void *malloc (size_t);\n-extern void *calloc (size_t, size_t);\n-extern void free (void *);\n-extern void *alloca (size_t);\n-extern void *memcpy (void *, const void *, size_t);\n-extern void *memset (void *, int, size_t);\n-extern char *strcpy (char *, const char *);\n-extern char *strdup (const char *);\n-extern char *strndup (const char *, size_t);\n+#include \"builtin-object-size-common.h\"\n \n struct A\n {\n@@ -40,198 +29,198 @@ test1 (void *q, int x)\n   else\n     r = &a.c[1];\n   if (__builtin_object_size (p, 1) != sizeof (a.a) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&a.c[9], 1)\n       != sizeof (a.c) - 9)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (q, 1) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n #ifdef __builtin_object_size\n   if (x < 0\n       ? __builtin_object_size (r, 1) != sizeof (a.a) - 9\n       : __builtin_object_size (r, 1) != sizeof (a.c) - 1)\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (r, 1) != sizeof (a.c) - 1)\n-    abort ();\n+    FAIL ();\n #endif\n   if (x < 6)\n     r = &w[2].a[1];\n   else\n     r = &a.a[6];\n   if (__builtin_object_size (&y, 1) != sizeof (y))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (w, 1) != sizeof (w))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&y.b, 1) != sizeof (a.b))\n-    abort ();\n+    FAIL ();\n #ifdef __builtin_object_size\n   if (x < 6\n       ? __builtin_object_size (r, 1) != sizeof (a.a) - 1\n       : __builtin_object_size (r, 1) != sizeof (a.a) - 6)\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (r, 1) != sizeof (a.a) - 1)\n-    abort ();\n+    FAIL ();\n #endif\n   if (x < 20)\n     r = malloc (30);\n   else\n     r = calloc (2, 16);\n #ifdef __builtin_object_size\n   if (__builtin_object_size (r, 1) != (x < 20 ? 30 : 2 * 16))\n-    abort ();\n+    FAIL ();\n #else\n   /* We may duplicate this test onto the two exit paths.  On one path\n      the size will be 32, the other it will be 30.  If we don't duplicate\n      this test, then the size will be 32.  */\n   if (__builtin_object_size (r, 1) != 2 * 16\n       && __builtin_object_size (r, 1) != 30)\n-    abort ();\n+    FAIL ();\n #endif\n   if (x < 20)\n     r = malloc (30);\n   else\n     r = calloc (2, 14);\n #ifdef __builtin_object_size\n   if (__builtin_object_size (r, 1) != (x < 20 ? 30 : 2 * 14))\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (r, 1) != 30)\n-    abort ();\n+    FAIL ();\n #endif\n   if (x < 30)\n     r = malloc (sizeof (a));\n   else\n     r = &a.a[3];\n #ifdef __builtin_object_size\n   if (__builtin_object_size (r, 1) != (x < 30 ? sizeof (a) : sizeof (a) - 3))\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (r, 1) != sizeof (a))\n-    abort ();\n+    FAIL ();\n #endif\n   r = memcpy (r, \"a\", 2);\n #ifdef __builtin_object_size\n   if (__builtin_object_size (r, 1) != (x < 30 ? sizeof (a) : sizeof (a) - 3))\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (r, 1) != sizeof (a))\n-    abort ();\n+    FAIL ();\n #endif\n   r = memcpy (r + 2, \"b\", 2) + 2;\n #ifdef __builtin_object_size\n   if (__builtin_object_size (r, 0)\n       != (x < 30 ? sizeof (a) - 4 : sizeof (a) - 7))\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (r, 1) != sizeof (a) - 4)\n-    abort ();\n+    FAIL ();\n #endif\n   r = &a.a[4];\n   r = memset (r, 'a', 2);\n   if (__builtin_object_size (r, 1) != sizeof (a.a) - 4)\n-    abort ();\n+    FAIL ();\n   r = memset (r + 2, 'b', 2) + 2;\n   if (__builtin_object_size (r, 1) != sizeof (a.a) - 8)\n-    abort ();\n+    FAIL ();\n   r = &a.a[1];\n   r = strcpy (r, \"ab\");\n   if (__builtin_object_size (r, 1) != sizeof (a.a) - 1)\n-    abort ();\n+    FAIL ();\n   r = strcpy (r + 2, \"cd\") + 2;\n   if (__builtin_object_size (r, 1) != sizeof (a.a) - 5)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (exta, 1) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (exta + 10, 1) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&exta[5], 1) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (extb, 1) != sizeof (extb))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (extb + 10, 1) != sizeof (extb) - 10)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&extb[5], 1) != sizeof (extb) - 5)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (extc, 1) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (extc + 10, 1) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&extc[5], 1) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&extc->a, 1) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&(extc + 10)->b, 1) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&extc[5].c[3], 1) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n #ifdef __builtin_object_size\n   if (__builtin_object_size (var, 1) != x + 10)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (var + 10, 1) != x)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&var[5], 1) != x + 5)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (vara, 1) != (x + 10) * sizeof (struct A))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (vara + 10, 1) != x * sizeof (struct A))\n-    abort ();    \n+    FAIL ();    \n   if (__builtin_object_size (&vara[5], 1) != (x + 5) * sizeof (struct A))\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (var, 1) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (var + 10, 1) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&var[5], 1) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (vara, 1) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (vara + 10, 1) != (size_t) -1)\n-    abort ();    \n+    FAIL ();    \n   if (__builtin_object_size (&vara[5], 1) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n #endif\n   if (__builtin_object_size (&vara[0].a, 1) != sizeof (vara[0].a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&vara[10].a[0], 1) != sizeof (vara[0].a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&vara[5].a[4], 1) != sizeof (vara[0].a) - 4)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&vara[5].b, 1) != sizeof (vara[0].b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&vara[7].c[7], 1) != sizeof (vara[0].c) - 7)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (zerol, 1) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&zerol, 1) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&zerol[0], 1) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (zerol[0].a, 1) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&zerol[0].a[0], 1) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&zerol[0].b, 1) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (\"abcdefg\", 1) != sizeof (\"abcdefg\"))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (\"abcd\\0efg\", 1) != sizeof (\"abcd\\0efg\"))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&\"abcd\\0efg\", 1) != sizeof (\"abcd\\0efg\"))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&\"abcd\\0efg\"[0], 1) != sizeof (\"abcd\\0efg\"))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&\"abcd\\0efg\"[4], 1) != sizeof (\"abcd\\0efg\") - 4)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (\"abcd\\0efg\" + 5, 1) != sizeof (\"abcd\\0efg\") - 5)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (L\"abcdefg\", 1) != sizeof (L\"abcdefg\"))\n-    abort ();\n+    FAIL ();\n   r = (char *) L\"abcd\\0efg\";\n   if (__builtin_object_size (r + 2, 1) != sizeof (L\"abcd\\0efg\") - 2)\n-    abort ();\n+    FAIL ();\n }\n \n size_t l1 = 1;\n@@ -277,10 +266,10 @@ test2 (void)\n \tdyn_res = sizeof (a.buf1) - 9;\n     }\n   if (__builtin_object_size (r, 1) != dyn_res)\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (r, 1) != sizeof (buf3))\n-    abort ();\n+    FAIL ();\n #endif\n   r = &buf3[20];\n   for (i = 0; i < 4; ++i)\n@@ -300,43 +289,43 @@ test2 (void)\n   for (i = 0; i < 4; ++i)\n     {\n       if (i == l1 - 1)\n-        dyn_res = sizeof (a.buf1) - 7;\n+\tdyn_res = sizeof (a.buf1) - 7;\n       else if (i == l1)\n-        dyn_res = sizeof (a.buf2) - 7;\n+\tdyn_res = sizeof (a.buf2) - 7;\n       else if (i == l1 + 1)\n-        dyn_res = sizeof (buf3) - 5;\n+\tdyn_res = sizeof (buf3) - 5;\n       else if (i == l1 + 2)\n-        dyn_res = sizeof (a.buf1) - 9;\n+\tdyn_res = sizeof (a.buf1) - 9;\n     }\n   if (__builtin_object_size (r, 1) != dyn_res)\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (r, 1) != sizeof (buf3) - 5)\n-    abort ();\n+    FAIL ();\n #endif\n   r += 8;\n #ifdef __builtin_object_size\n   if (dyn_res >= 8)\n     {\n       dyn_res -= 8;\n       if (__builtin_object_size (r, 1) != dyn_res)\n-\tabort ();\n+\tFAIL ();\n \n       if (dyn_res >= 6)\n \t{\n \t  if (__builtin_object_size (r + 6, 1) != dyn_res - 6)\n-\t    abort ();\n+\t    FAIL ();\n \t}\n       else if (__builtin_object_size (r + 6, 1) != 0)\n-\tabort ();\n+\tFAIL ();\n     }\n   else if (__builtin_object_size (r, 1) != 0)\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (r, 1) != sizeof (buf3) - 13)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (r + 6, 1) != sizeof (buf3) - 19)\n-    abort ();\n+    FAIL ();\n #endif\n }\n \n@@ -352,78 +341,78 @@ test3 (void)\n   double *dp;\n \n   if (__builtin_object_size (buf4, 1) != sizeof (buf4))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&buf4, 1) != sizeof (buf4))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&buf4[0], 1) != sizeof (buf4))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&buf4[1], 1) != sizeof (buf4) - 1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x, 1) != sizeof (x))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a, 1) != sizeof (x.a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a[0], 1) != sizeof (x.a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a[0].a, 1) != sizeof (x.a[0].a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a[0].a[0], 1) != sizeof (x.a[0].a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a[0].a[3], 1) != sizeof (x.a[0].a) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a[0].b, 1) != sizeof (x.a[0].b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a[1].c, 1) != sizeof (x.a[1].c))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a[1].c[0], 1) != sizeof (x.a[1].c))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a[1].c[3], 1) != sizeof (x.a[1].c) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.b, 1) != sizeof (x.b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.b.a, 1) != sizeof (x.b.a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.b.a[0], 1) != sizeof (x.b.a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.b.a[3], 1) != sizeof (x.b.a) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.b.b, 1) != sizeof (x.b.b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.b.c, 1) != sizeof (x.b.c))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.b.c[0], 1) != sizeof (x.b.c))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.b.c[3], 1) != sizeof (x.b.c) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.c, 1) != sizeof (x.c))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.c[0], 1) != sizeof (x.c))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.c[1], 1) != sizeof (x.c) - 1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.d, 1) != sizeof (x.d))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.e, 1) != sizeof (x.e))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.f, 1) != sizeof (x.f))\n-    abort ();\n+    FAIL ();\n   dp = &__real__ x.f;\n   if (__builtin_object_size (dp, 1) != sizeof (x.f) / 2)\n-    abort ();\n+    FAIL ();\n   dp = &__imag__ x.f;\n   if (__builtin_object_size (dp, 1) != sizeof (x.f) / 2)\n-    abort ();\n+    FAIL ();\n   dp = &y;\n   if (__builtin_object_size (dp, 1) != sizeof (y))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&z, 1) != sizeof (z))\n-      abort ();\n+      FAIL ();\n   dp = &__real__ z;\n   if (__builtin_object_size (dp, 1) != sizeof (z) / 2)\n-    abort ();\n+    FAIL ();\n   dp = &__imag__ z;\n   if (__builtin_object_size (dp, 1) != sizeof (z) / 2)\n-    abort ();\n+    FAIL ();\n }\n \n struct S { unsigned int a; };\n@@ -440,7 +429,7 @@ test4 (char *x, int y)\n       p = (struct A *) x;\n       x = (char *) &p[1];\n       if (__builtin_object_size (p, 1) != (size_t) -1)\n-\tabort ();\n+\tFAIL ();\n     }\n   return x;\n }\n@@ -457,10 +446,10 @@ test5 (size_t x)\n     p = p + 4;\n #ifdef __builtin_object_size\n   if (__builtin_object_size (p, 1) != sizeof (t.buf) - 8 - 4 * x)\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (p, 1) != sizeof (t.buf) - 8)\n-    abort ();\n+    FAIL ();\n #endif\n   memset (p, ' ', sizeof (t.buf) - 8 - 4 * 4);\n }\n@@ -474,11 +463,11 @@ test6 (void)\n   char *p = &buf[64], *q = &t.buf[64];\n \n   if (__builtin_object_size (p + 64, 1) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (q + 0, 1) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (q + 64, 1) != 0)\n-    abort ();\n+    FAIL ();\n }\n \n void\n@@ -489,18 +478,18 @@ test7 (void)\n   char *p = &t.buf2[-4];\n   char *q = &t.buf2[0];\n   if (__builtin_object_size (p, 1) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (q, 1) != sizeof (t.buf2))\n-    abort ();\n+    FAIL ();\n   q = &t.buf[10];\n   if (__builtin_object_size (q, 1) != 0)\n-    abort ();\n+    FAIL ();\n   q = &t.buf[11];\n   if (__builtin_object_size (q, 1) != 0)\n-    abort ();\n+    FAIL ();\n   p = &t.buf[-4];\n   if (__builtin_object_size (p, 1) != 0)\n-    abort ();\n+    FAIL ();\n }\n \n void\n@@ -517,21 +506,21 @@ test8 (unsigned cond)\n \n #ifdef __builtin_object_size\n   if (__builtin_object_size (&p[-4], 1) != (cond ? 6 : 10))\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (&p[-4], 1) != 10)\n-    abort ();\n+    FAIL ();\n #endif\n \n   for (unsigned i = cond; i > 0; i--)\n     p--;\n \n #ifdef __builtin_object_size\n   if (__builtin_object_size (p, 1) != ((cond ? 2 : 6) + cond))\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (p, 1) != 10)\n-    abort ();\n+    FAIL ();\n #endif\n \n   p = &y.c[8];\n@@ -540,10 +529,10 @@ test8 (unsigned cond)\n \n #ifdef __builtin_object_size\n   if (__builtin_object_size (p, 1) != sizeof (y.c) - 8 + cond)\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (p, 1) != sizeof (y.c))\n-    abort ();\n+    FAIL ();\n #endif\n }\n \n@@ -555,19 +544,19 @@ test9 (void)\n   const char *ptr = \"abcdefghijklmnopqrstuvwxyz\";\n   char *res = strndup (ptr, 21);\n   if (__builtin_object_size (res, 1) != 22)\n-    abort ();\n+    FAIL ();\n \n   free (res);\n \n   res = strndup (ptr, 32);\n   if (__builtin_object_size (res, 1) != 27)\n-    abort ();\n+    FAIL ();\n \n   free (res);\n \n   res = strdup (ptr);\n   if (__builtin_object_size (res, 1) != 27)\n-    abort ();\n+    FAIL ();\n \n   free (res);\n \n@@ -576,19 +565,19 @@ test9 (void)\n \n   res = strndup (ptr2, 21);\n   if (__builtin_object_size (res, 1) != 22)\n-    abort ();\n+    FAIL ();\n \n   free (res);\n \n   res = strndup (ptr2, 32);\n   if (__builtin_object_size (res, 1) != 33)\n-    abort ();\n+    FAIL ();\n \n   free (res);\n \n   res = strndup (ptr2, 128);\n   if (__builtin_object_size (res, 1) != 64)\n-    abort ();\n+    FAIL ();\n \n   free (res);\n \n@@ -598,40 +587,40 @@ test9 (void)\n #else\n   if (__builtin_object_size (res, 1) != (size_t) -1)\n #endif\n-    abort ();\n+    FAIL ();\n \n   free (res);\n   free (ptr2);\n \n   ptr = \"abcd\\0efghijklmnopqrstuvwxyz\";\n   res = strdup (ptr);\n   if (__builtin_object_size (res, 1) != 5)\n-    abort ();\n+    FAIL ();\n   free (res);\n \n   res = strndup (ptr, 24);\n   if (__builtin_object_size (res, 1) != 5)\n-    abort ();\n+    FAIL ();\n   free (res);\n \n   res = strndup (ptr, 2);\n   if (__builtin_object_size (res, 1) != 3)\n-    abort ();\n+    FAIL ();\n   free (res);\n \n   res = strdup (&ptr[4]);\n   if (__builtin_object_size (res, 1) != 1)\n-    abort ();\n+    FAIL ();\n   free (res);\n \n   res = strndup (&ptr[4], 4);\n   if (__builtin_object_size (res, 1) != 1)\n-    abort ();\n+    FAIL ();\n   free (res);\n \n   res = strndup (&ptr[4], 1);\n   if (__builtin_object_size (res, 1) != 1)\n-    abort ();\n+    FAIL ();\n   free (res);\n }\n \n@@ -649,5 +638,5 @@ main (void)\n   test7 ();\n   test8 (1);\n   test9 ();\n-  exit (0);\n+  DONE ();\n }"}, {"sha": "3d907ef4814a416a3be9a8027693db3ebddb6016", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-3.c", "status": "modified", "additions": 132, "deletions": 143, "changes": 275, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc4db7e824719084ee32d02edcf2b6191a05f27/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc4db7e824719084ee32d02edcf2b6191a05f27/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-3.c?ref=dbc4db7e824719084ee32d02edcf2b6191a05f27", "patch": "@@ -2,18 +2,7 @@\n /* { dg-options \"-O2 -Wno-stringop-overread\" } */\n /* { dg-require-effective-target alloca } */\n \n-typedef __SIZE_TYPE__ size_t;\n-extern void abort (void);\n-extern void exit (int);\n-extern void *malloc (size_t);\n-extern void *calloc (size_t, size_t);\n-extern void free (void *);\n-extern void *alloca (size_t);\n-extern void *memcpy (void *, const void *, size_t);\n-extern void *memset (void *, int, size_t);\n-extern char *strcpy (char *, const char *);\n-extern char *strdup (const char *);\n-extern char *strndup (const char *, size_t);\n+#include \"builtin-object-size-common.h\"\n \n struct A\n {\n@@ -39,175 +28,175 @@ test1 (void *q, int x)\n     r = &a.c[1];\n   if (__builtin_object_size (p, 2)\n       != sizeof (a) - __builtin_offsetof (struct A, a) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&a.c[9], 2)\n       != sizeof (a) - __builtin_offsetof (struct A, c) - 9)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (q, 2) != 0)\n-    abort ();\n+    FAIL ();\n #ifdef __builtin_object_size\n   if (__builtin_object_size (r, 2)\n       != (x < 0\n \t  ? sizeof (a) - __builtin_offsetof (struct A, a) - 9\n \t  : sizeof (a) - __builtin_offsetof (struct A, c) - 1))\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (r, 2)\n       != sizeof (a) - __builtin_offsetof (struct A, c) - 1)\n-    abort ();\n+    FAIL ();\n #endif\n   if (x < 6)\n     r = &w[2].a[1];\n   else\n     r = &a.a[6];\n   if (__builtin_object_size (&y, 2)\n       != sizeof (y))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (w, 2)\n       != sizeof (w))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&y.b, 2)\n       != sizeof (a) - __builtin_offsetof (struct A, b))\n-    abort ();\n+    FAIL ();\n #ifdef __builtin_object_size\n   if (__builtin_object_size (r, 2)\n       != (x < 6\n \t  ? 2 * sizeof (w[0]) - __builtin_offsetof (struct A, a) - 1\n \t  : sizeof (a) - __builtin_offsetof (struct A, a) - 6))\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (r, 2)\n       != sizeof (a) - __builtin_offsetof (struct A, a) - 6)\n-    abort ();\n+    FAIL ();\n #endif\n   if (x < 20)\n     r = malloc (30);\n   else\n     r = calloc (2, 16);\n #ifdef __builtin_object_size\n   if (__builtin_object_size (r, 2) != (x < 20 ? 30 : 2 * 16))\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (r, 2) != 30)\n-    abort ();\n+    FAIL ();\n #endif\n   if (x < 20)\n     r = malloc (30);\n   else\n     r = calloc (2, 14);\n #ifdef __builtin_object_size\n   if (__builtin_object_size (r, 2) != (x < 20 ? 30 : 2 * 14))\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (r, 2) != 2 * 14)\n-    abort ();\n+    FAIL ();\n #endif\n   if (x < 30)\n     r = malloc (sizeof (a));\n   else\n     r = &a.a[3];\n #ifdef __builtin_object_size\n   size_t objsz = (x < 30 ? sizeof (a)\n-                  : sizeof (a) - __builtin_offsetof (struct A, a) - 3);\n+\t\t  : sizeof (a) - __builtin_offsetof (struct A, a) - 3);\n   if (__builtin_object_size (r, 2) != objsz)\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (r, 2)\n       != sizeof (a) - __builtin_offsetof (struct A, a) - 3)\n-    abort ();\n+    FAIL ();\n #endif\n   r = memcpy (r, \"a\", 2);\n #ifdef __builtin_object_size\n   if (__builtin_object_size (r, 2) != objsz)\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (r, 2)\n       != sizeof (a) - __builtin_offsetof (struct A, a) - 3)\n-    abort ();\n+    FAIL ();\n #endif\n   r = memcpy (r + 2, \"b\", 2) + 2;\n #ifdef __builtin_object_size\n   if (__builtin_object_size (r, 2) != objsz - 4)\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (r, 2)\n       != sizeof (a) - __builtin_offsetof (struct A, a) - 3 - 4)\n-    abort ();\n+    FAIL ();\n #endif\n   r = &a.a[4];\n   r = memset (r, 'a', 2);\n   if (__builtin_object_size (r, 2)\n       != sizeof (a) - __builtin_offsetof (struct A, a) - 4)\n-    abort ();\n+    FAIL ();\n   r = memset (r + 2, 'b', 2) + 2;\n   if (__builtin_object_size (r, 2)\n       != sizeof (a) - __builtin_offsetof (struct A, a) - 8)\n-    abort ();\n+    FAIL ();\n   r = &a.a[1];\n   r = strcpy (r, \"ab\");\n   if (__builtin_object_size (r, 2)\n       != sizeof (a) - __builtin_offsetof (struct A, a) - 1)\n-    abort ();\n+    FAIL ();\n   r = strcpy (r + 2, \"cd\") + 2;\n   if (__builtin_object_size (r, 2)\n       != sizeof (a) - __builtin_offsetof (struct A, a) - 5)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (exta, 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (exta + 10, 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&exta[5], 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (extb, 2) != sizeof (extb))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (extb + 10, 2) != sizeof (extb) - 10)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&extb[5], 2) != sizeof (extb) - 5)\n-    abort ();\n+    FAIL ();\n #ifdef __builtin_object_size\n   if (__builtin_object_size (var, 2) != x + 10)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (var + 10, 2) != x)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&var[5], 2) != x + 5)\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (var, 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (var + 10, 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&var[5], 2) != 0)\n-    abort ();\n+    FAIL ();\n #endif\n   if (__builtin_object_size (zerol, 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&zerol, 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&zerol[0], 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (zerol[0].a, 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&zerol[0].a[0], 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&zerol[0].b, 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (\"abcdefg\", 2) != sizeof (\"abcdefg\"))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (\"abcd\\0efg\", 2) != sizeof (\"abcd\\0efg\"))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&\"abcd\\0efg\", 2) != sizeof (\"abcd\\0efg\"))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&\"abcd\\0efg\"[0], 2) != sizeof (\"abcd\\0efg\"))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&\"abcd\\0efg\"[4], 2) != sizeof (\"abcd\\0efg\") - 4)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (\"abcd\\0efg\" + 5, 2) != sizeof (\"abcd\\0efg\") - 5)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (L\"abcdefg\", 2) != sizeof (L\"abcdefg\"))\n-    abort ();\n+    FAIL ();\n   r = (char *) L\"abcd\\0efg\";\n   if (__builtin_object_size (r + 2, 2) != sizeof (L\"abcd\\0efg\") - 2)\n-    abort ();\n+    FAIL ();\n }\n \n size_t l1 = 1;\n@@ -253,10 +242,10 @@ test2 (void)\n \tdyn_res = sizeof (a) - __builtin_offsetof (struct B, buf1) - 9;\n     }\n   if (__builtin_object_size (r, 2) != dyn_res)\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (r, 2) != 3)\n-    abort ();\n+    FAIL ();\n #endif\n   r = &buf3[20];\n   for (i = 0; i < 4; ++i)\n@@ -271,7 +260,7 @@ test2 (void)\n \tr = &a.buf1[9];\n     }\n   if (__builtin_object_size (r, 2) != 0)\n-    abort ();\n+    FAIL ();\n   r = &buf3[2];\n   for (i = 0; i < 4; ++i)\n     {\n@@ -299,28 +288,28 @@ test2 (void)\n \tdyn_res = sizeof (a) - __builtin_offsetof (struct B, buf1) - 4;\n     }\n   if (__builtin_object_size (r, 2) != dyn_res)\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (r, 2) != 15)\n-    abort ();\n+    FAIL ();\n #endif\n   r += 8;\n #ifdef __builtin_object_size\n   dyn_res -= 8;\n   if (__builtin_object_size (r, 2) != dyn_res)\n-    abort ();\n+    FAIL ();\n   if (dyn_res >= 6)\n     {\n       if (__builtin_object_size (r + 6, 2) != dyn_res - 6)\n-\tabort ();\n+\tFAIL ();\n     }\n   else if (__builtin_object_size (r + 6, 2) != 0)\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (r, 2) != 7)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (r + 6, 2) != 1)\n-    abort ();\n+    FAIL ();\n #endif\n   r = &buf3[18];\n   for (i = 0; i < 4; ++i)\n@@ -351,13 +340,13 @@ test2 (void)\n   if (dyn_res >= 12)\n     {\n       if (__builtin_object_size (r + 12, 2) != dyn_res - 12)\n-\tabort ();\n+\tFAIL ();\n     }\n   else if (__builtin_object_size (r + 12, 2) != 0)\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (r + 12, 2) != 0)\n-    abort ();\n+    FAIL ();\n #endif\n }\n \n@@ -373,103 +362,103 @@ test3 (void)\n   double *dp;\n \n   if (__builtin_object_size (buf4, 2) != sizeof (buf4))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&buf4, 2) != sizeof (buf4))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&buf4[0], 2) != sizeof (buf4))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&buf4[1], 2) != sizeof (buf4) - 1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x, 2) != sizeof (x))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a, 2) != sizeof (x))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a[0], 2) != sizeof (x))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a[0].a, 2) != sizeof (x))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a[0].a[0], 2) != sizeof (x))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a[0].a[3], 2) != sizeof (x) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a[0].b, 2)\n       != sizeof (x) - __builtin_offsetof (struct A, b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a[1].c, 2)\n       != sizeof (x) - sizeof (struct A) - __builtin_offsetof (struct A, c))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a[1].c[0], 2)\n       != sizeof (x) - sizeof (struct A) - __builtin_offsetof (struct A, c))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a[1].c[3], 2)\n       != sizeof (x) - sizeof (struct A) - __builtin_offsetof (struct A, c) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.b, 2)\n       != sizeof (x) - __builtin_offsetof (struct B, b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.b.a, 2)\n       != sizeof (x) - __builtin_offsetof (struct B, b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.b.a[0], 2)\n       != sizeof (x) - __builtin_offsetof (struct B, b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.b.a[3], 2)\n       != sizeof (x) - __builtin_offsetof (struct B, b) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.b.b, 2)\n       != sizeof (x) - __builtin_offsetof (struct B, b)\n \t - __builtin_offsetof (struct A, b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.b.c, 2)\n       != sizeof (x) - __builtin_offsetof (struct B, b)\n \t - __builtin_offsetof (struct A, c))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.b.c[0], 2)\n       != sizeof (x) - __builtin_offsetof (struct B, b)\n \t - __builtin_offsetof (struct A, c))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.b.c[3], 2)\n       != sizeof (x) - __builtin_offsetof (struct B, b)\n \t - __builtin_offsetof (struct A, c) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.c, 2)\n       != sizeof (x) - __builtin_offsetof (struct B, c))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.c[0], 2)\n       != sizeof (x) - __builtin_offsetof (struct B, c))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.c[1], 2)\n       != sizeof (x) - __builtin_offsetof (struct B, c) - 1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.d, 2)\n       != sizeof (x) - __builtin_offsetof (struct B, d))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.e, 2)\n       != sizeof (x) - __builtin_offsetof (struct B, e))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.f, 2)\n       != sizeof (x) - __builtin_offsetof (struct B, f))\n-    abort ();\n+    FAIL ();\n   dp = &__real__ x.f;\n   if (__builtin_object_size (dp, 2)\n       != sizeof (x) - __builtin_offsetof (struct B, f))\n-    abort ();\n+    FAIL ();\n   dp = &__imag__ x.f;\n   if (__builtin_object_size (dp, 2)\n       != sizeof (x) - __builtin_offsetof (struct B, f)\n \t - sizeof (x.f) / 2)\n-    abort ();\n+    FAIL ();\n   dp = &y;\n   if (__builtin_object_size (dp, 2) != sizeof (y))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&z, 2) != sizeof (z))\n-    abort ();\n+    FAIL ();\n   dp = &__real__ z;\n   if (__builtin_object_size (dp, 2) != sizeof (z))\n-    abort ();\n+    FAIL ();\n   dp = &__imag__ z;\n   if (__builtin_object_size (dp, 2) != sizeof (z) / 2)\n-    abort ();\n+    FAIL ();\n }\n \n struct S { unsigned int a; };\n@@ -486,7 +475,7 @@ test4 (char *x, int y)\n       p = (struct A *) x;\n       x = (char *) &p[1];\n       if (__builtin_object_size (p, 2) != 0)\n-\tabort ();\n+\tFAIL ();\n     }\n   return x;\n }\n@@ -506,7 +495,7 @@ test5 (size_t x)\n #else\n   if (__builtin_object_size (p, 2) != 0)\n #endif\n-    abort ();\n+    FAIL ();\n   memset (p, ' ', sizeof (buf) - 8 - 4 * 4);\n }\n \n@@ -525,7 +514,7 @@ test6 (size_t x)\n #else\n   if (__builtin_object_size (p, 2) != 0)\n #endif\n-    abort ();\n+    FAIL ();\n   memset (p, ' ', sizeof (t) - 8 - 4 * 4);\n }\n \n@@ -538,13 +527,13 @@ test7 (void)\n   char *p = &buf[64], *q = &t.buf[64];\n \n   if (__builtin_object_size (p + 64, 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (q + 63, 2) != sizeof (t) - 64 - 63)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (q + 64, 2) != sizeof (t) - 64 - 64)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (q + 256, 2) != 0)\n-    abort ();\n+    FAIL ();\n }\n \n void\n@@ -555,17 +544,17 @@ test8 (void)\n   char *p = &t.buf2[-4];\n   char *q = &t.buf2[0];\n   if (__builtin_object_size (p, 2) != sizeof (t) - 10 + 4)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (q, 2) != sizeof (t) - 10)\n-    abort ();\n+    FAIL ();\n   /* GCC only handles additions, not subtractions.  */\n   q = q - 8;\n   if (__builtin_object_size (q, 2) != 0\n       && __builtin_object_size (q, 2) != sizeof (t) - 10 + 8)\n-    abort ();\n+    FAIL ();\n   p = &t.buf[-4];\n   if (__builtin_object_size (p, 2) != 0)\n-    abort ();\n+    FAIL ();\n }\n \n void\n@@ -582,21 +571,21 @@ test9 (unsigned cond)\n \n #ifdef __builtin_object_size\n   if (__builtin_object_size (&p[-4], 2) != (cond ? 6 : 10))\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (&p[-4], 2) != 0)\n-    abort ();\n+    FAIL ();\n #endif\n \n   for (unsigned i = cond; i > 0; i--)\n     p--;\n \n #ifdef __builtin_object_size\n   if (__builtin_object_size (p, 2) != ((cond ? 2 : 6) + cond))\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (p, 2) != 0)\n-    abort ();\n+    FAIL ();\n #endif\n \n   p = &y.c[8];\n@@ -606,10 +595,10 @@ test9 (unsigned cond)\n #ifdef __builtin_object_size\n   if (__builtin_object_size (p, 2)\n       != sizeof (y) - __builtin_offsetof (struct A, c) - 8 + cond)\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (p, 2) != 0)\n-    abort ();\n+    FAIL ();\n #endif\n }\n \n@@ -627,10 +616,10 @@ test10 (void)\n \t{\n #ifdef __builtin_object_size\n \t  if (__builtin_object_size (p - 3, 2) != sizeof (buf) - i + 3)\n-\t    abort ();\n+\t    FAIL ();\n #else\n \t  if (__builtin_object_size (p - 3, 2) != 0)\n-\t    abort ();\n+\t    FAIL ();\n #endif\n \t  break;\n \t}\n@@ -647,19 +636,19 @@ test11 (void)\n   const char *ptr = \"abcdefghijklmnopqrstuvwxyz\";\n   char *res = strndup (ptr, 21);\n   if (__builtin_object_size (res, 2) != 22)\n-    abort ();\n+    FAIL ();\n \n   free (res);\n \n   res = strndup (ptr, 32);\n   if (__builtin_object_size (res, 2) != 27)\n-    abort ();\n+    FAIL ();\n \n   free (res);\n \n   res = strdup (ptr);\n   if (__builtin_object_size (res, 2) != 27)\n-    abort ();\n+    FAIL ();\n \n   free (res);\n \n@@ -668,19 +657,19 @@ test11 (void)\n \n   res = strndup (ptr2, 21);\n   if (__builtin_object_size (res, 2) != 1)\n-    abort ();\n+    FAIL ();\n \n   free (res);\n \n   res = strndup (ptr2, 32);\n   if (__builtin_object_size (res, 2) != 1)\n-    abort ();\n+    FAIL ();\n \n   free (res);\n \n   res = strndup (ptr2, 128);\n   if (__builtin_object_size (res, 2) != 1)\n-    abort ();\n+    FAIL ();\n \n   free (res);\n \n@@ -691,40 +680,40 @@ test11 (void)\n #else\n   if (__builtin_object_size (res, 2) != 1)\n #endif\n-    abort ();\n+    FAIL ();\n \n   free (res);\n   free (ptr2);\n \n   ptr = \"abcd\\0efghijklmnopqrstuvwxyz\";\n   res = strdup (ptr);\n   if (__builtin_object_size (res, 2) != 5)\n-    abort ();\n+    FAIL ();\n   free (res);\n \n   res = strndup (ptr, 24);\n   if (__builtin_object_size (res, 2) != 5)\n-    abort ();\n+    FAIL ();\n   free (res);\n \n   res = strndup (ptr, 2);\n   if (__builtin_object_size (res, 2) != 3)\n-    abort ();\n+    FAIL ();\n   free (res);\n \n   res = strdup (&ptr[4]);\n   if (__builtin_object_size (res, 2) != 1)\n-    abort ();\n+    FAIL ();\n   free (res);\n \n   res = strndup (&ptr[4], 4);\n   if (__builtin_object_size (res, 2) != 1)\n-    abort ();\n+    FAIL ();\n   free (res);\n \n   res = strndup (&ptr[4], 1);\n   if (__builtin_object_size (res, 2) != 1)\n-    abort ();\n+    FAIL ();\n   free (res);\n }\n \n@@ -744,5 +733,5 @@ main (void)\n   test9 (1);\n   test10 ();\n   test11 ();\n-  exit (0);\n+  DONE ();\n }"}, {"sha": "c9af07499a45c92228317836bc30f1e29e9ec608", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-4.c", "status": "modified", "additions": 137, "deletions": 148, "changes": 285, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc4db7e824719084ee32d02edcf2b6191a05f27/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc4db7e824719084ee32d02edcf2b6191a05f27/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-4.c?ref=dbc4db7e824719084ee32d02edcf2b6191a05f27", "patch": "@@ -2,18 +2,7 @@\n /* { dg-options \"-O2 -Wno-stringop-overread\" } */\n /* { dg-require-effective-target alloca } */\n \n-typedef __SIZE_TYPE__ size_t;\n-extern void abort (void);\n-extern void exit (int);\n-extern void *malloc (size_t);\n-extern void *calloc (size_t, size_t);\n-extern void free (void *);\n-extern void *alloca (size_t);\n-extern void *memcpy (void *, const void *, size_t);\n-extern void *memset (void *, int, size_t);\n-extern char *strcpy (char *, const char *);\n-extern char *strdup (const char *);\n-extern char *strndup (const char *, size_t);\n+#include \"builtin-object-size-common.h\"\n \n struct A\n {\n@@ -40,36 +29,36 @@ test1 (void *q, int x)\n   else\n     r = &a.c[1];\n   if (__builtin_object_size (p, 3) != sizeof (a.a) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&a.c[9], 3)\n       != sizeof (a.c) - 9)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (q, 3) != 0)\n-    abort ();\n+    FAIL ();\n #ifdef __builtin_object_size\n   if (__builtin_object_size (r, 3)\n       != (x < 0 ? sizeof (a.a) - 9 : sizeof (a.c) - 1))\n #else\n   if (__builtin_object_size (r, 3) != sizeof (a.a) - 9)\n #endif\n-    abort ();\n+    FAIL ();\n   if (x < 6)\n     r = &w[2].a[1];\n   else\n     r = &a.a[6];\n   if (__builtin_object_size (&y, 3) != sizeof (y))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (w, 3) != sizeof (w))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&y.b, 3) != sizeof (a.b))\n-    abort ();\n+    FAIL ();\n #ifdef __builtin_object_size\n   if (__builtin_object_size (r, 3)\n       != (x < 6 ? sizeof (w[2].a) - 1 : sizeof (a.a) - 6))\n #else\n   if (__builtin_object_size (r, 3) != sizeof (a.a) - 6)\n #endif\n-    abort ();\n+    FAIL ();\n   if (x < 20)\n     r = malloc (30);\n   else\n@@ -79,7 +68,7 @@ test1 (void *q, int x)\n #else\n   if (__builtin_object_size (r, 3) != 30)\n #endif\n-    abort ();\n+    FAIL ();\n   if (x < 20)\n     r = malloc (30);\n   else\n@@ -89,7 +78,7 @@ test1 (void *q, int x)\n #else\n   if (__builtin_object_size (r, 3) != 2 * 14)\n #endif\n-    abort ();\n+    FAIL ();\n   if (x < 30)\n     r = malloc (sizeof (a));\n   else\n@@ -100,125 +89,125 @@ test1 (void *q, int x)\n #else\n   if (__builtin_object_size (r, 3) != sizeof (a.a) - 3)\n #endif\n-    abort ();\n+    FAIL ();\n   r = memcpy (r, \"a\", 2);\n #ifdef __builtin_object_size\n   if (__builtin_object_size (r, 3) != objsz)\n #else\n   if (__builtin_object_size (r, 3) != sizeof (a.a) - 3)\n #endif\n-    abort ();\n+    FAIL ();\n   r = memcpy (r + 2, \"b\", 2) + 2;\n #ifdef __builtin_object_size\n   if (__builtin_object_size (r, 3) != objsz - 4)\n #else\n   if (__builtin_object_size (r, 3) != sizeof (a.a) - 3 - 4)\n #endif\n-    abort ();\n+    FAIL ();\n   r = &a.a[4];\n   r = memset (r, 'a', 2);\n   if (__builtin_object_size (r, 3) != sizeof (a.a) - 4)\n-    abort ();\n+    FAIL ();\n   r = memset (r + 2, 'b', 2) + 2;\n   if (__builtin_object_size (r, 3) != sizeof (a.a) - 8)\n-    abort ();\n+    FAIL ();\n   r = &a.a[1];\n   r = strcpy (r, \"ab\");\n   if (__builtin_object_size (r, 3) != sizeof (a.a) - 1)\n-    abort ();\n+    FAIL ();\n   r = strcpy (r + 2, \"cd\") + 2;\n   if (__builtin_object_size (r, 3) != sizeof (a.a) - 5)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (exta, 3) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (exta + 10, 3) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&exta[5], 3) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (extb, 3) != sizeof (extb))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (extb + 10, 3) != sizeof (extb) - 10)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&extb[5], 3) != sizeof (extb) - 5)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (extc, 3) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (extc + 10, 3) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&extc[5], 3) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&extc->a, 3) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&(extc + 10)->b, 3) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&extc[5].c[3], 3) != 0)\n-    abort ();\n+    FAIL ();\n #ifdef __builtin_object_size\n   if (__builtin_object_size (var, 3) != x + 10)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (var + 10, 3) != x)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&var[5], 3) != x + 5)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (vara, 3) != (x + 10) * sizeof (struct A))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (vara + 10, 3) != x * sizeof (struct A))\n-    abort ();    \n+    FAIL ();    \n   if (__builtin_object_size (&vara[5], 3) != (x + 5) * sizeof (struct A))\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (var, 3) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (var + 10, 3) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&var[5], 3) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (vara, 3) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (vara + 10, 3) != 0)\n-    abort ();    \n+    FAIL ();    \n   if (__builtin_object_size (&vara[5], 3) != 0)\n-    abort ();\n+    FAIL ();\n #endif\n   if (__builtin_object_size (&vara[0].a, 3) != sizeof (vara[0].a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&vara[10].a[0], 3) != sizeof (vara[0].a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&vara[5].a[4], 3) != sizeof (vara[0].a) - 4)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&vara[5].b, 3) != sizeof (vara[0].b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&vara[7].c[7], 3) != sizeof (vara[0].c) - 7)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (zerol, 3) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&zerol, 3) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&zerol[0], 3) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (zerol[0].a, 3) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&zerol[0].a[0], 3) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&zerol[0].b, 3) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (\"abcdefg\", 3) != sizeof (\"abcdefg\"))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (\"abcd\\0efg\", 3) != sizeof (\"abcd\\0efg\"))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&\"abcd\\0efg\", 3) != sizeof (\"abcd\\0efg\"))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&\"abcd\\0efg\"[0], 3) != sizeof (\"abcd\\0efg\"))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&\"abcd\\0efg\"[4], 3) != sizeof (\"abcd\\0efg\") - 4)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (\"abcd\\0efg\" + 5, 3) != sizeof (\"abcd\\0efg\") - 5)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (L\"abcdefg\", 3) != sizeof (L\"abcdefg\"))\n-    abort ();\n+    FAIL ();\n   r = (char *) L\"abcd\\0efg\";\n   if (__builtin_object_size (r + 2, 3) != sizeof (L\"abcd\\0efg\") - 2)\n-    abort ();\n+    FAIL ();\n   /* Prevent DSE from removing calls that prevent bad combining of\n      addresses and offsets.  */\n   asm volatile (\"\" : : \"g\" (&a));\n@@ -253,7 +242,7 @@ test2 (void)\n \tr = &a.buf1[9];\n     }\n   if (__builtin_object_size (r, 3) != sizeof (a.buf1) - 9)\n-    abort ();\n+    FAIL ();\n   r = &buf3[20];\n   for (i = 0; i < 4; ++i)\n     {\n@@ -267,7 +256,7 @@ test2 (void)\n \tr = &a.buf1[9];\n     }\n   if (__builtin_object_size (r, 3) != 0)\n-    abort ();\n+    FAIL ();\n   r = &buf3[1];\n   for (i = 0; i < 4; ++i)\n     {\n@@ -286,31 +275,31 @@ test2 (void)\n   for (i = 0; i < 4; ++i)\n     {\n       if (i == l1 - 1)\n-        dyn_res = sizeof (a.buf1) - 6;\n+\tdyn_res = sizeof (a.buf1) - 6;\n       else if (i == l1)\n-        dyn_res = sizeof (a.buf2) - 4;\n+\tdyn_res = sizeof (a.buf2) - 4;\n       else if (i == l1 + 1)\n-        dyn_res = sizeof (buf3) - 5;\n+\tdyn_res = sizeof (buf3) - 5;\n       else if (i == l1 + 2)\n-        dyn_res = sizeof (a.buf1) - 2;\n+\tdyn_res = sizeof (a.buf1) - 2;\n     }\n   if (__builtin_object_size (r, 3) != dyn_res)\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (r, 3) != sizeof (a.buf1) - 6)\n-    abort ();\n+    FAIL ();\n #endif\n   r += 2;\n #ifdef __builtin_object_size\n   if (__builtin_object_size (r, 3) != dyn_res - 2)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (r + 1, 3) != dyn_res - 3)\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (r, 3) != sizeof (a.buf1) - 6 - 2)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (r + 1, 3) != sizeof (a.buf1) - 6 - 3)\n-    abort ();\n+    FAIL ();\n #endif\n }\n \n@@ -326,78 +315,78 @@ test3 (void)\n   double *dp;\n \n   if (__builtin_object_size (buf4, 3) != sizeof (buf4))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&buf4, 3) != sizeof (buf4))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&buf4[0], 3) != sizeof (buf4))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&buf4[1], 3) != sizeof (buf4) - 1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x, 3) != sizeof (x))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a, 3) != sizeof (x.a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a[0], 3) != sizeof (x.a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a[0].a, 3) != sizeof (x.a[0].a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a[0].a[0], 3) != sizeof (x.a[0].a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a[0].a[3], 3) != sizeof (x.a[0].a) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a[0].b, 3) != sizeof (x.a[0].b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a[1].c, 3) != sizeof (x.a[1].c))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a[1].c[0], 3) != sizeof (x.a[1].c))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.a[1].c[3], 3) != sizeof (x.a[1].c) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.b, 3) != sizeof (x.b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.b.a, 3) != sizeof (x.b.a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.b.a[0], 3) != sizeof (x.b.a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.b.a[3], 3) != sizeof (x.b.a) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.b.b, 3) != sizeof (x.b.b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.b.c, 3) != sizeof (x.b.c))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.b.c[0], 3) != sizeof (x.b.c))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.b.c[3], 3) != sizeof (x.b.c) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.c, 3) != sizeof (x.c))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.c[0], 3) != sizeof (x.c))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.c[1], 3) != sizeof (x.c) - 1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.d, 3) != sizeof (x.d))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.e, 3) != sizeof (x.e))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&x.f, 3) != sizeof (x.f))\n-    abort ();\n+    FAIL ();\n   dp = &__real__ x.f;\n   if (__builtin_object_size (dp, 3) != sizeof (x.f) / 2)\n-    abort ();\n+    FAIL ();\n   dp = &__imag__ x.f;\n   if (__builtin_object_size (dp, 3) != sizeof (x.f) / 2)\n-    abort ();\n+    FAIL ();\n   dp = &y;\n   if (__builtin_object_size (dp, 3) != sizeof (y))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&z, 3) != sizeof (z))\n-      abort ();\n+      FAIL ();\n   dp = &__real__ z;\n   if (__builtin_object_size (dp, 3) != sizeof (z) / 2)\n-    abort ();\n+    FAIL ();\n   dp = &__imag__ z;\n   if (__builtin_object_size (dp, 3) != sizeof (z) / 2)\n-    abort ();\n+    FAIL ();\n }\n \n struct S { unsigned int a; };\n@@ -414,7 +403,7 @@ test4 (char *x, int y)\n       p = (struct A *) x;\n       x = (char *) &p[1];\n       if (__builtin_object_size (p, 3) != 0)\n-\tabort ();\n+\tFAIL ();\n     }\n   return x;\n }\n@@ -434,7 +423,7 @@ test5 (size_t x)\n #else\n   if (__builtin_object_size (p, 3) != 0)\n #endif\n-    abort ();\n+    FAIL ();\n   memset (p, ' ', sizeof (t.buf) - 8 - 4 * 4);\n }\n \n@@ -447,11 +436,11 @@ test6 (void)\n   char *p = &buf[64], *q = &t.buf[64];\n \n   if (__builtin_object_size (p + 64, 3) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (q + 0, 3) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (q + 64, 3) != 0)\n-    abort ();\n+    FAIL ();\n }\n \n void\n@@ -462,18 +451,18 @@ test7 (void)\n   char *p = &t.buf2[-4];\n   char *q = &t.buf2[0];\n   if (__builtin_object_size (p, 3) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (q, 3) != sizeof (t.buf2))\n-    abort ();\n+    FAIL ();\n   q = &t.buf[10];\n   if (__builtin_object_size (q, 3) != 0)\n-    abort ();\n+    FAIL ();\n   q = &t.buf[11];\n   if (__builtin_object_size (q, 3) != 0)\n-    abort ();\n+    FAIL ();\n   p = &t.buf[-4];\n   if (__builtin_object_size (p, 3) != 0)\n-    abort ();\n+    FAIL ();\n }\n \n void\n@@ -490,21 +479,21 @@ test8 (unsigned cond)\n \n #ifdef __builtin_object_size\n   if (__builtin_object_size (&p[-4], 3) != (cond ? 6 : 10))\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (&p[-4], 3) != 0)\n-    abort ();\n+    FAIL ();\n #endif\n \n   for (unsigned i = cond; i > 0; i--)\n     p--;\n \n #ifdef __builtin_object_size\n   if (__builtin_object_size (p, 3) != ((cond ? 2 : 6) + cond))\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (p, 3) != 0)\n-    abort ();\n+    FAIL ();\n #endif\n \n   p = &y.c[8];\n@@ -513,10 +502,10 @@ test8 (unsigned cond)\n \n #ifdef __builtin_object_size\n   if (__builtin_object_size (p, 3) != sizeof (y.c) - 8 + cond)\n-    abort ();\n+    FAIL ();\n #else\n   if (__builtin_object_size (p, 3) != 0)\n-    abort ();\n+    FAIL ();\n #endif\n }\n \n@@ -528,19 +517,19 @@ test9 (void)\n   const char *ptr = \"abcdefghijklmnopqrstuvwxyz\";\n   char *res = strndup (ptr, 21);\n   if (__builtin_object_size (res, 3) != 22)\n-    abort ();\n+    FAIL ();\n \n   free (res);\n \n   res = strndup (ptr, 32);\n   if (__builtin_object_size (res, 3) != 27)\n-    abort ();\n+    FAIL ();\n \n   free (res);\n \n   res = strdup (ptr);\n   if (__builtin_object_size (res, 3) != 27)\n-    abort ();\n+    FAIL ();\n \n   free (res);\n \n@@ -549,19 +538,19 @@ test9 (void)\n \n   res = strndup (ptr2, 21);\n   if (__builtin_object_size (res, 3) != 1)\n-    abort ();\n+    FAIL ();\n \n   free (res);\n \n   res = strndup (ptr2, 32);\n   if (__builtin_object_size (res, 3) != 1)\n-    abort ();\n+    FAIL ();\n \n   free (res);\n \n   res = strndup (ptr2, 128);\n   if (__builtin_object_size (res, 3) != 1)\n-    abort ();\n+    FAIL ();\n \n   free (res);\n \n@@ -571,40 +560,40 @@ test9 (void)\n #else\n   if (__builtin_object_size (res, 3) != 1)\n #endif\n-    abort ();\n+    FAIL ();\n \n   free (res);\n   free (ptr2);\n \n   ptr = \"abcd\\0efghijklmnopqrstuvwxyz\";\n   res = strdup (ptr);\n   if (__builtin_object_size (res, 3) != 5)\n-    abort ();\n+    FAIL ();\n   free (res);\n \n   res = strndup (ptr, 24);\n   if (__builtin_object_size (res, 3) != 5)\n-    abort ();\n+    FAIL ();\n   free (res);\n \n   res = strndup (ptr, 2);\n   if (__builtin_object_size (res, 3) != 3)\n-    abort ();\n+    FAIL ();\n   free (res);\n \n   res = strdup (&ptr[4]);\n   if (__builtin_object_size (res, 3) != 1)\n-    abort ();\n+    FAIL ();\n   free (res);\n \n   res = strndup (&ptr[4], 4);\n   if (__builtin_object_size (res, 3) != 1)\n-    abort ();\n+    FAIL ();\n   free (res);\n \n   res = strndup (&ptr[4], 1);\n   if (__builtin_object_size (res, 3) != 1)\n-    abort ();\n+    FAIL ();\n   free (res);\n }\n \n@@ -622,5 +611,5 @@ main (void)\n   test7 ();\n   test8 (1);\n   test9 ();\n-  exit (0);\n+  DONE ();\n }"}, {"sha": "b456b321db06db555c6b8338746a3b68208cc575", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-6.c", "status": "modified", "additions": 128, "deletions": 132, "changes": 260, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc4db7e824719084ee32d02edcf2b6191a05f27/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc4db7e824719084ee32d02edcf2b6191a05f27/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-6.c?ref=dbc4db7e824719084ee32d02edcf2b6191a05f27", "patch": "@@ -1,11 +1,7 @@\n /* { dg-do run } */\n /* { dg-options \"-O2\" } */\n \n-typedef __SIZE_TYPE__ size_t;\n-extern void abort (void);\n-extern void exit (int);\n-extern void *malloc (size_t);\n-extern void free (void *);\n+#include \"builtin-object-size-common.h\"\n \n struct A\n {\n@@ -20,105 +16,105 @@ test1 (struct A *p)\n {\n   char *c;\n   if (__builtin_object_size (&p->a, 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   c = p->a;\n   if (__builtin_object_size (c, 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   c = &p->a[0];\n   if (__builtin_object_size (c, 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   c = &p->a[3];\n   if (__builtin_object_size (c, 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->b;\n   if (__builtin_object_size (c, 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->c;\n   if (__builtin_object_size (c, 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a, 1) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 1) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 1) != sizeof (p->a) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 1) != sizeof (p->b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 1) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   c = p->a;\n   if (__builtin_object_size (c, 1) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   c = &p->a[0];\n   if (__builtin_object_size (c, 1) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   c = &p->a[3];\n   if (__builtin_object_size (c, 1) != sizeof (p->a) - 3)\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->b;\n   if (__builtin_object_size (c, 1) != sizeof (p->b))\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->c;\n   if (__builtin_object_size (c, 1) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a, 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 2) != 0)\n-    abort ();\n+    FAIL ();\n   c = p->a;\n   if (__builtin_object_size (c, 2) != 0)\n-    abort ();\n+    FAIL ();\n   c = &p->a[0];\n   if (__builtin_object_size (c, 2) != 0)\n-    abort ();\n+    FAIL ();\n   c = &p->a[3];\n   if (__builtin_object_size (c, 2) != 0)\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->b;\n   if (__builtin_object_size (c, 2) != 0)\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->c;\n   if (__builtin_object_size (c, 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a, 3) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 3) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 3) != sizeof (p->a) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 3) != sizeof (p->b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 3) != 0)\n-    abort ();\n+    FAIL ();\n   c = p->a;\n   if (__builtin_object_size (c, 3) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   c = &p->a[0];\n   if (__builtin_object_size (c, 3) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   c = &p->a[3];\n   if (__builtin_object_size (c, 3) != sizeof (p->a) - 3)\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->b;\n   if (__builtin_object_size (c, 3) != sizeof (p->b))\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->c;\n   if (__builtin_object_size (c, 3) != 0)\n-    abort ();\n+    FAIL ();\n }\n \n void\n@@ -129,105 +125,105 @@ test2 (void)\n   size_t s = 2 * sizeof (struct A);\n   struct A *p = malloc (2 * sizeof (struct A));\n   if (__builtin_object_size (&p->a, 0) != s)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 0) != s)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 0) != s - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 0) != s - __builtin_offsetof (struct A, b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 0) != s - __builtin_offsetof (struct A, c))\n-    abort ();\n+    FAIL ();\n   c = p->a;\n   if (__builtin_object_size (c, 0) != s)\n-    abort ();\n+    FAIL ();\n   c = &p->a[0];\n   if (__builtin_object_size (c, 0) != s)\n-    abort ();\n+    FAIL ();\n   c = &p->a[3];\n   if (__builtin_object_size (c, 0) != s - 3)\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->b;\n   if (__builtin_object_size (c, 0) != s - __builtin_offsetof (struct A, b))\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->c;\n   if (__builtin_object_size (c, 0) != s - __builtin_offsetof (struct A, c))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a, 1) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 1) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 1) != sizeof (p->a) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 1) != sizeof (p->b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 1) != s - __builtin_offsetof (struct A, c))\n-    abort ();\n+    FAIL ();\n   c = p->a;\n   if (__builtin_object_size (c, 1) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   c = &p->a[0];\n   if (__builtin_object_size (c, 1) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   c = &p->a[3];\n   if (__builtin_object_size (c, 1) != sizeof (p->a) - 3)\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->b;\n   if (__builtin_object_size (c, 1) != sizeof (p->b))\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->c;\n   if (__builtin_object_size (c, 1) != s - __builtin_offsetof (struct A, c))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a, 2) != s)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 2) != s)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 2) != s - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 2) != s - __builtin_offsetof (struct A, b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 2) != s - __builtin_offsetof (struct A, c))\n-    abort ();\n+    FAIL ();\n   c = p->a;\n   if (__builtin_object_size (c, 2) != s)\n-    abort ();\n+    FAIL ();\n   c = &p->a[0];\n   if (__builtin_object_size (c, 2) != s)\n-    abort ();\n+    FAIL ();\n   c = &p->a[3];\n   if (__builtin_object_size (c, 2) != s - 3)\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->b;\n   if (__builtin_object_size (c, 2) != s - __builtin_offsetof (struct A, b))\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->c;\n   if (__builtin_object_size (c, 2) != s - __builtin_offsetof (struct A, c))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a, 3) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 3) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 3) != sizeof (p->a) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 3) != sizeof (p->b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 3) != s - __builtin_offsetof (struct A, c))\n-    abort ();\n+    FAIL ();\n   c = p->a;\n   if (__builtin_object_size (c, 3) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   c = &p->a[0];\n   if (__builtin_object_size (c, 3) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   c = &p->a[3];\n   if (__builtin_object_size (c, 3) != sizeof (p->a) - 3)\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->b;\n   if (__builtin_object_size (c, 3) != sizeof (p->b))\n-    abort ();\n+    FAIL ();\n   c = (char *) &p->c;\n   if (__builtin_object_size (c, 3) != s - __builtin_offsetof (struct A, c))\n-    abort ();\n+    FAIL ();\n   free (p);\n }\n \n@@ -239,48 +235,48 @@ test3 (void)\n   size_t s;\n   struct A *p = malloc (4);\n   if (__builtin_object_size (&p->a, 0) != 4)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 0) != 4)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 0) != 1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 0) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 0) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a, 1) != 4)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 1) != 4)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 1) != 1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 1) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 1) != 0)\n-    abort ();\n+    FAIL ();\n   free (p);\n   s = __builtin_offsetof (struct A, c) + 4;\n   p = malloc (s);\n   if (__builtin_object_size (&p->a, 0) != s)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 0) != s)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 0) != s - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 0) != s - __builtin_offsetof (struct A, b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 0) != 4)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a, 1) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[0], 1) != sizeof (p->a))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->a[3], 1) != sizeof (p->a) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->b, 1) != sizeof (p->b))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&p->c, 1) != 4)\n-    abort ();\n+    FAIL ();\n   free (p);\n }\n \n@@ -294,17 +290,17 @@ __attribute__ ((noinline))\n test4 (struct B *q, int i)\n {\n   if (__builtin_object_size (&q->a[2].a[2], 1) != sizeof (q->a[0].a) - 2)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&q->a[2].c[2], 1) != sizeof (q->a[0].c) - 2)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&q->a[3].a[2], 1) != sizeof (q->a[0].a) - 2)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&q->a[3].c[2], 1) != sizeof (q->a[0].c) - 2)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&q->a[i].a[2], 1) != sizeof (q->a[0].a) - 2)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&q->a[i].c[2], 1) != sizeof (q->a[0].c) - 2)\n-    abort ();\n+    FAIL ();\n }\n \n struct C\n@@ -318,13 +314,13 @@ __attribute__ ((noinline))\n test5 (struct C *c)\n {\n   if (__builtin_object_size (&c->b, 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&c->b, 1) != 1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&c->b, 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&c->b, 3) != 1)\n-    abort ();\n+    FAIL ();\n }\n \n struct D\n@@ -342,13 +338,13 @@ __attribute__ ((noinline))\n test6 (struct D *d)\n {\n   if (__builtin_object_size (&d->j.a[3], 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&d->j.a[3], 1) != sizeof (d->j.a) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&d->j.a[3], 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&d->j.a[3], 3) != sizeof (d->j.a) - 3)\n-    abort ();\n+    FAIL ();\n }\n \n struct E\n@@ -366,21 +362,21 @@ __attribute__ ((noinline))\n test7 (struct E *e)\n {\n   if (__builtin_object_size (&e->j[0].a[3], 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&e->j[0].a[3], 1) != sizeof (e->j[0].a) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&e->j[0].a[3], 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&e->j[0].a[3], 3) != sizeof (e->j[0].a) - 3)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size ((char *) &e->j[0], 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size ((char *) &e->j[0], 1) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size ((char *) &e->j[0], 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size ((char *) &e->j[0], 3) != 0)\n-    abort ();\n+    FAIL ();\n }\n \n union F\n@@ -398,13 +394,13 @@ __attribute__ ((noinline))\n test8 (union F *f)\n {\n   if (__builtin_object_size (&f->d.c[3], 0) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&f->d.c[3], 1) != (size_t) -1)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&f->d.c[3], 2) != 0)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&f->d.c[3], 3) != 0)\n-    abort ();\n+    FAIL ();\n }\n \n int\n@@ -431,5 +427,5 @@ main (void)\n   union F f, *fp = &f;\n   __asm (\"\" : \"+r\" (fp));\n   test8 (fp);\n-  exit (0);\n+  DONE ();\n }"}, {"sha": "0d11c42987651f1aa87b6896ecd3879008aece26", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-7.c", "status": "modified", "additions": 26, "deletions": 28, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc4db7e824719084ee32d02edcf2b6191a05f27/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc4db7e824719084ee32d02edcf2b6191a05f27/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-7.c?ref=dbc4db7e824719084ee32d02edcf2b6191a05f27", "patch": "@@ -1,9 +1,7 @@\n /* { dg-do run } */\n /* { dg-options \"-O2\" } */\n \n-typedef __SIZE_TYPE__ size_t;\n-extern void *malloc (size_t);\n-extern void abort (void);\n+#include \"builtin-object-size-common.h\"\n \n struct A\n {\n@@ -20,52 +18,52 @@ main (void)\n   struct A *a = malloc (s);\n   struct A *b = malloc (o + 212);\n   if (__builtin_object_size (a->buf, 0) != s - o)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (a->buf, 1) != sizeof (a->buf))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (a->buf, 2) != s - o)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (a->buf, 3) != sizeof (a->buf))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&a->buf[0], 0) != s - o)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&a->buf[0], 1) != sizeof (a->buf))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&a->buf[0], 2) != s - o)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&a->buf[0], 3) != sizeof (a->buf))\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&a->buf[6], 0) != s - o - 6)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&a->buf[6], 1) != sizeof (a->buf) - 6)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&a->buf[6], 2) != s - o - 6)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&a->buf[6], 3) != sizeof (a->buf) - 6)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (b->buf, 0) != 212)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (b->buf, 1) != 212)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (b->buf, 2) != 212)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (b->buf, 3) != 212)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&b->buf[0], 0) != 212)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&b->buf[0], 1) != 212)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&b->buf[0], 2) != 212)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&b->buf[0], 3) != 212)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&b->buf[28], 0) != 212 - 28)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&b->buf[28], 1) != 212 - 28)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&b->buf[28], 2) != 212 - 28)\n-    abort ();\n+    FAIL ();\n   if (__builtin_object_size (&b->buf[28], 3) != 212 - 28)\n-    abort ();\n-  return 0;\n+    FAIL ();\n+  DONE ();\n }"}, {"sha": "294e5242633fe164be92b1658274eac415497505", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-8.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc4db7e824719084ee32d02edcf2b6191a05f27/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc4db7e824719084ee32d02edcf2b6191a05f27/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-8.c?ref=dbc4db7e824719084ee32d02edcf2b6191a05f27", "patch": "@@ -1,10 +1,7 @@\n /* { dg-do run } */\n /* { dg-options \"-O2\" } */\n \n-typedef __SIZE_TYPE__ size_t;\n-extern void *malloc (size_t);\n-extern void free (void *);\n-extern void abort (void);\n+#include \"builtin-object-size-common.h\"\n \n union A\n {\n@@ -56,13 +53,13 @@ struct H\n \n #define T(X, S0, S1) \\\n   if (__builtin_object_size (X, 0) != (S0))\t\\\n-    abort ();\t\t\t\t\t\\\n+    FAIL ();\t\t\t\t\t\\\n   if (__builtin_object_size (X, 1) != (S1))\t\\\n-    abort ();\t\t\t\t\t\\\n+    FAIL ();\t\t\t\t\t\\\n   if (__builtin_object_size (X, 2) != (S0))\t\\\n-    abort ();\t\t\t\t\t\\\n+    FAIL ();\t\t\t\t\t\\\n   if (__builtin_object_size (X, 3) != (S1))\t\\\n-    abort ()\n+    FAIL ()\n #define TS(X, S0) T(&X, S0, sizeof (X))\n #define TA(X, S0, S1) \\\n   T(X, S0, S1); T(&X[0], S0, S1); T(&X[1], (S0) - 1, (S1) - 1)\n@@ -196,5 +193,5 @@ main (void)\n   free (h2);\n   free (h1);\n \n-  return 0;\n+  DONE ();\n }"}, {"sha": "66ff7cdd953ab456703faadc72b0660fa12b15a3", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-common.h", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc4db7e824719084ee32d02edcf2b6191a05f27/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc4db7e824719084ee32d02edcf2b6191a05f27/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-common.h?ref=dbc4db7e824719084ee32d02edcf2b6191a05f27", "patch": "@@ -0,0 +1,32 @@\n+typedef __SIZE_TYPE__ size_t;\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+  extern void exit (int);\n+  extern void *malloc (size_t);\n+  extern void free (void *);\n+  extern void *calloc (size_t, size_t);\n+  extern void *alloca (size_t);\n+  extern void *memcpy (void *, const void *, size_t);\n+  extern void *memset (void *, int, size_t);\n+  extern char *strcpy (char *, const char *);\n+  extern char *strdup (const char *);\n+  extern char *strndup (const char *, size_t);\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+unsigned nfails = 0;\n+\n+#define FAIL() \\\n+  do { \\\n+    __builtin_printf (\"Failure at line: %d\\n\", __LINE__);\t\t      \\\n+    nfails++;\t\t\t\t\t\t\t\t      \\\n+  } while (0)\n+\n+#define DONE() \\\n+  do {\t\t\t\t\t\t\t\t\t      \\\n+    if (nfails > 0)\t\t\t\t\t\t\t      \\\n+      __builtin_abort ();\t\t\t\t\t\t      \\\n+    return 0;\t\t\t\t\t\t\t\t      \\\n+  } while (0)"}, {"sha": "096196d9b7f2aa817ab81270c02bcd1079fbcc14", "filename": "gcc/testsuite/gcc.dg/pr101836.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc4db7e824719084ee32d02edcf2b6191a05f27/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101836.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc4db7e824719084ee32d02edcf2b6191a05f27/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101836.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101836.c?ref=dbc4db7e824719084ee32d02edcf2b6191a05f27", "patch": "@@ -4,16 +4,16 @@\n /* { dg-do run } */\n /* { dg-options \"-O2 -fstrict-flex-arrays\" } */\n \n-#include <stdio.h>\n+#include \"builtin-object-size-common.h\"\n \n #define expect(p, _v) do { \\\n     size_t v = _v; \\\n     if (p == v) \\\n-        printf(\"ok:  %s == %zd\\n\", #p, p); \\\n+\t__builtin_printf(\"ok:  %s == %zd\\n\", #p, p); \\\n     else \\\n \t{  \\\n-          printf(\"WAT: %s == %zd (expected %zd)\\n\", #p, p, v); \\\n-\t  __builtin_abort (); \\\n+\t  __builtin_printf(\"WAT: %s == %zd (expected %zd)\\n\", #p, p, v); \\\n+\t  FAIL (); \\\n \t} \\\n } while (0);\n \n@@ -56,5 +56,5 @@ int main(int argc, char *argv[])\n {\n     stuff((void *)argv[0], (void *)argv[0], (void *)argv[0], (void *)argv[0]);\n \n-    return 0;\n+    DONE ();\n }"}, {"sha": "f74ed96c751c04947752298cb39ad8ed3ed48ba1", "filename": "gcc/testsuite/gcc.dg/strict-flex-array-3.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc4db7e824719084ee32d02edcf2b6191a05f27/gcc%2Ftestsuite%2Fgcc.dg%2Fstrict-flex-array-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc4db7e824719084ee32d02edcf2b6191a05f27/gcc%2Ftestsuite%2Fgcc.dg%2Fstrict-flex-array-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrict-flex-array-3.c?ref=dbc4db7e824719084ee32d02edcf2b6191a05f27", "patch": "@@ -4,16 +4,16 @@\n /* { dg-do run } */\n /* { dg-options \"-O2 -fstrict-flex-arrays=0\" } */\n \n-#include <stdio.h>\n+#include \"builtin-object-size-common.h\"\n \n #define expect(p, _v) do { \\\n     size_t v = _v; \\\n     if (p == v) \\\n-        printf(\"ok:  %s == %zd\\n\", #p, p); \\\n+\t__builtin_printf (\"ok:  %s == %zd\\n\", #p, p); \\\n     else \\\n \t{  \\\n-          printf(\"WAT: %s == %zd (expected %zd)\\n\", #p, p, v); \\\n-\t  __builtin_abort (); \\\n+\t  __builtin_printf (\"WAT: %s == %zd (expected %zd)\\n\", #p, p, v); \\\n+\t  FAIL (); \\\n \t} \\\n } while (0);\n \n@@ -56,5 +56,5 @@ int main(int argc, char *argv[])\n {\n     stuff((void *)argv[0], (void *)argv[0], (void *)argv[0], (void *)argv[0]);\n \n-    return 0;\n+    DONE ();\n }"}]}