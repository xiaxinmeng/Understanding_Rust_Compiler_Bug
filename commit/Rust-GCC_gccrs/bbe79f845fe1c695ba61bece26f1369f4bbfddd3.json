{"sha": "bbe79f845fe1c695ba61bece26f1369f4bbfddd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJlNzlmODQ1ZmUxYzY5NWJhNjFiZWNlMjZmMTM2OWY0YmJmZGRkMw==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1996-07-25T22:00:09Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1996-07-25T22:00:09Z"}, "message": "install EH code\n\nFrom-SVN: r12564", "tree": {"sha": "0d27cbf158dad94c1a0a09b1a658bcb78b107539", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d27cbf158dad94c1a0a09b1a658bcb78b107539"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbe79f845fe1c695ba61bece26f1369f4bbfddd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbe79f845fe1c695ba61bece26f1369f4bbfddd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbe79f845fe1c695ba61bece26f1369f4bbfddd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbe79f845fe1c695ba61bece26f1369f4bbfddd3/comments", "author": null, "committer": null, "parents": [{"sha": "5703bb66031e55b695395004578410c8e4e08f31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5703bb66031e55b695395004578410c8e4e08f31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5703bb66031e55b695395004578410c8e4e08f31"}], "stats": {"total": 31, "additions": 23, "deletions": 8}, "files": [{"sha": "16d20f98fbc251f9e268486b1726633f19ec73e7", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe79f845fe1c695ba61bece26f1369f4bbfddd3/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe79f845fe1c695ba61bece26f1369f4bbfddd3/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=bbe79f845fe1c695ba61bece26f1369f4bbfddd3", "patch": "@@ -2323,12 +2323,27 @@ extern void hppa_encode_label ();\n    removing the dead (but important) initialization of\n    REFERENCE.  */\n \n-#define DO_GLOBAL_DTORS_BODY \\\n-do { \\\n-  extern void __gcc_plt_call (); \\\n-  void (*reference)() = &__gcc_plt_call; \\\n-  func_ptr *p; \\\n-  __asm__ (\"\" : : \"r\" (reference)); \\\n-  for (p = __DTOR_LIST__ + 1; *p; ) \\\n-    (*p++) (); \\\n+#define DO_GLOBAL_DTORS_BODY\t\t\t\\\n+do {\t\t\t\t\t\t\\\n+  extern void __gcc_plt_call ();\t\t\\\n+  void (*reference)() = &__gcc_plt_call;\t\\\n+  func_ptr *p;\t\t\t\t\t\\\n+  __asm__ (\"\" : : \"r\" (reference));\t\t\\\n+  for (p = __DTOR_LIST__ + 1; *p; )\t\t\\\n+    (*p++) ();\t\t\t\t\t\\\n } while (0)\n+\n+/* The current return address is in [%sp-20].  */\n+#define RETURN_ADDR_RTX(COUNT, FRAME)\t\t\t\t\t\t\\\n+  ((COUNT == 0)\t\t\t\t\t\t\t\t\t\\\n+   ? gen_rtx (MEM, Pmode,\t\t\t\t\t\t\t\\\n+\t      memory_address (Pmode, plus_constant (FRAME,\t\t\t\\\n+\t\t\t\t\t\t    5 * UNITS_PER_WORD)))\t\\\n+   : (rtx) 0)\n+\n+/* Used to mask out junk bits from the return address, such as\n+   processor state, interrupt status, condition codes and the like.  */\n+#define MASK_RETURN_ADDR \\\n+  /* The priviledge level is in the two low order bits, mask em out\t\\\n+     of the return address.  */\t\t\t\t\t\t\\\n+  (GEN_INT (0xfffffffc))"}]}