{"sha": "6bc89193bcf3c616e22d0f422e42e685f1d7796a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJjODkxOTNiY2YzYzYxNmUyMmQwZjQyMmU0MmU2ODVmMWQ3Nzk2YQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2019-10-01T11:37:01Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2019-10-01T11:37:01Z"}, "message": "recompute opt flags after opt level change\n\nflag_omit_frame_pointer is set in machine-independent code depending\non the optimization level.  It is then overridden in x86\ntarget-specific code depending on a macro defined by\n--enable-frame-pointer.\n\nUses of attribute optimize go through machine-independent overriding\nof flag_omit_frame_pointer, but the x86-specific overriding code did\nNOT cover this flag, so, even if the attribute does not change the\noptimization level, flag_omit_frame_pointer may end up with a\ndifferent value, and prevent inlining because of incompatible flags,\nas detected by the gcc.dg/ipa/iinline-attr.c test on an\n--enable-frame-pointer x86 toolchain.\n\n\nfor  gcc/ChangeLog\n\n\t* config/i386/i386-options.c\n\t(ix86_recompute_optlev_based_flags): New, moved out of...\n\t(ix86_option_override_internal): ... this.  Call it.\n\t(ix86_override_options_after_change): Call it here too.\n\nFrom-SVN: r276405", "tree": {"sha": "548d9520fce6bd3e177933daf0c2a81e8d7533ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/548d9520fce6bd3e177933daf0c2a81e8d7533ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bc89193bcf3c616e22d0f422e42e685f1d7796a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc89193bcf3c616e22d0f422e42e685f1d7796a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bc89193bcf3c616e22d0f422e42e685f1d7796a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc89193bcf3c616e22d0f422e42e685f1d7796a/comments", "author": null, "committer": null, "parents": [{"sha": "676e38c2a93311bc847c1034637efc935e527f8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/676e38c2a93311bc847c1034637efc935e527f8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/676e38c2a93311bc847c1034637efc935e527f8f"}], "stats": {"total": 94, "additions": 55, "deletions": 39}, "files": [{"sha": "ce7109f9b433998b8c1cc7f978e68787e16ab99d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc89193bcf3c616e22d0f422e42e685f1d7796a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc89193bcf3c616e22d0f422e42e685f1d7796a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6bc89193bcf3c616e22d0f422e42e685f1d7796a", "patch": "@@ -1,5 +1,10 @@\n 2019-10-01  Alexandre Oliva <oliva@adacore.com>\n \n+\t* config/i386/i386-options.c\n+\t(ix86_recompute_optlev_based_flags): New, moved out of...\n+\t(ix86_option_override_internal): ... this.  Call it.\n+\t(ix86_override_options_after_change): Call it here too.\n+\n \tPR debug/91507\n \t* dwarf2out.c (override_type_for_decl_p): New.\n \t(gen_variable_die): Use it."}, {"sha": "ed286bffaaa3b5e5ae2145bbda4a34063c929700", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 50, "deletions": 39, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc89193bcf3c616e22d0f422e42e685f1d7796a/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc89193bcf3c616e22d0f422e42e685f1d7796a/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=6bc89193bcf3c616e22d0f422e42e685f1d7796a", "patch": "@@ -1527,12 +1527,61 @@ ix86_default_align (struct gcc_options *opts)\n     opts->x_str_align_functions = processor_cost_table[ix86_tune]->align_func;\n }\n \n+#ifndef USE_IX86_FRAME_POINTER\n+#define USE_IX86_FRAME_POINTER 0\n+#endif\n+\n+/* (Re)compute option overrides affected by optimization levels in\n+   target-specific ways.  */\n+\n+static void\n+ix86_recompute_optlev_based_flags (struct gcc_options *opts,\n+\t\t\t\t   struct gcc_options *opts_set)\n+{\n+  /* Set the default values for switches whose default depends on TARGET_64BIT\n+     in case they weren't overwritten by command line options.  */\n+  if (TARGET_64BIT_P (opts->x_ix86_isa_flags))\n+    {\n+      if (opts->x_optimize >= 1 && !opts_set->x_flag_omit_frame_pointer)\n+\topts->x_flag_omit_frame_pointer = !USE_IX86_FRAME_POINTER;\n+      if (opts->x_flag_asynchronous_unwind_tables\n+\t  && !opts_set->x_flag_unwind_tables\n+\t  && TARGET_64BIT_MS_ABI)\n+\topts->x_flag_unwind_tables = 1;\n+      if (opts->x_flag_asynchronous_unwind_tables == 2)\n+\topts->x_flag_unwind_tables\n+\t  = opts->x_flag_asynchronous_unwind_tables = 1;\n+      if (opts->x_flag_pcc_struct_return == 2)\n+\topts->x_flag_pcc_struct_return = 0;\n+    }\n+  else\n+    {\n+      if (opts->x_optimize >= 1 && !opts_set->x_flag_omit_frame_pointer)\n+\topts->x_flag_omit_frame_pointer\n+\t  = !(USE_IX86_FRAME_POINTER || opts->x_optimize_size);\n+      if (opts->x_flag_asynchronous_unwind_tables == 2)\n+\topts->x_flag_asynchronous_unwind_tables = !USE_IX86_FRAME_POINTER;\n+      if (opts->x_flag_pcc_struct_return == 2)\n+\t{\n+\t  /* Intel MCU psABI specifies that -freg-struct-return should\n+\t     be on.  Instead of setting DEFAULT_PCC_STRUCT_RETURN to 1,\n+\t     we check -miamcu so that -freg-struct-return is always\n+\t     turned on if -miamcu is used.  */\n+\t  if (TARGET_IAMCU_P (opts->x_target_flags))\n+\t    opts->x_flag_pcc_struct_return = 0;\n+\t  else\n+\t    opts->x_flag_pcc_struct_return = DEFAULT_PCC_STRUCT_RETURN;\n+\t}\n+    }\n+}\n+\n /* Implement TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE hook.  */\n \n void\n ix86_override_options_after_change (void)\n {\n   ix86_default_align (&global_options);\n+  ix86_recompute_optlev_based_flags (&global_options, &global_options_set);\n }\n \n /* Clear stack slot assignments remembered from previous functions.\n@@ -2220,45 +2269,7 @@ ix86_option_override_internal (bool main_args_p,\n \n   set_ix86_tune_features (ix86_tune, opts->x_ix86_dump_tunes);\n \n-#ifndef USE_IX86_FRAME_POINTER\n-#define USE_IX86_FRAME_POINTER 0\n-#endif\n-\n-  /* Set the default values for switches whose default depends on TARGET_64BIT\n-     in case they weren't overwritten by command line options.  */\n-  if (TARGET_64BIT_P (opts->x_ix86_isa_flags))\n-    {\n-      if (opts->x_optimize >= 1 && !opts_set->x_flag_omit_frame_pointer)\n-\topts->x_flag_omit_frame_pointer = !USE_IX86_FRAME_POINTER;\n-      if (opts->x_flag_asynchronous_unwind_tables\n-\t  && !opts_set->x_flag_unwind_tables\n-\t  && TARGET_64BIT_MS_ABI)\n-\topts->x_flag_unwind_tables = 1;\n-      if (opts->x_flag_asynchronous_unwind_tables == 2)\n-\topts->x_flag_unwind_tables\n-\t  = opts->x_flag_asynchronous_unwind_tables = 1;\n-      if (opts->x_flag_pcc_struct_return == 2)\n-\topts->x_flag_pcc_struct_return = 0;\n-    }\n-  else\n-    {\n-      if (opts->x_optimize >= 1 && !opts_set->x_flag_omit_frame_pointer)\n-\topts->x_flag_omit_frame_pointer\n-\t  = !(USE_IX86_FRAME_POINTER || opts->x_optimize_size);\n-      if (opts->x_flag_asynchronous_unwind_tables == 2)\n-\topts->x_flag_asynchronous_unwind_tables = !USE_IX86_FRAME_POINTER;\n-      if (opts->x_flag_pcc_struct_return == 2)\n-\t{\n-\t  /* Intel MCU psABI specifies that -freg-struct-return should\n-\t     be on.  Instead of setting DEFAULT_PCC_STRUCT_RETURN to 1,\n-\t     we check -miamcu so that -freg-struct-return is always\n-\t     turned on if -miamcu is used.  */\n-\t  if (TARGET_IAMCU_P (opts->x_target_flags))\n-\t    opts->x_flag_pcc_struct_return = 0;\n-\t  else\n-\t    opts->x_flag_pcc_struct_return = DEFAULT_PCC_STRUCT_RETURN;\n-\t}\n-    }\n+  ix86_recompute_optlev_based_flags (opts, opts_set);\n \n   ix86_tune_cost = processor_cost_table[ix86_tune];\n   /* TODO: ix86_cost should be chosen at instruction or function granuality"}]}