{"sha": "9208393247645077a2d64d0542cd43227e7ae500", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTIwODM5MzI0NzY0NTA3N2EyZDY0ZDA1NDJjZDQzMjI3ZTdhZTUwMA==", "commit": {"author": {"name": "Ben Elliston", "email": "bje@au.ibm.com", "date": "2004-12-03T02:01:35Z"}, "committer": {"name": "Ben Elliston", "email": "bje@gcc.gnu.org", "date": "2004-12-03T02:01:35Z"}, "message": "cfg.texi (Edges): Update.\n\n\t* doc/cfg.texi (Edges): Update. Document the edge_iterator data\n\ttype and its methods.\n\nFrom-SVN: r91671", "tree": {"sha": "8fed81c7de05791be906b75aaa0d9d49894d8300", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fed81c7de05791be906b75aaa0d9d49894d8300"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9208393247645077a2d64d0542cd43227e7ae500", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9208393247645077a2d64d0542cd43227e7ae500", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9208393247645077a2d64d0542cd43227e7ae500", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9208393247645077a2d64d0542cd43227e7ae500/comments", "author": null, "committer": null, "parents": [{"sha": "dda7d95b7dea9f0df16389082e5973c96a06247d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dda7d95b7dea9f0df16389082e5973c96a06247d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dda7d95b7dea9f0df16389082e5973c96a06247d"}], "stats": {"total": 74, "additions": 69, "deletions": 5}, "files": [{"sha": "ad04198dd997138472a5e582cdb3c79606fceff0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9208393247645077a2d64d0542cd43227e7ae500/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9208393247645077a2d64d0542cd43227e7ae500/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9208393247645077a2d64d0542cd43227e7ae500", "patch": "@@ -1,3 +1,8 @@\n+2004-12-03  Ben Elliston  <bje@au.ibm.com>\n+\n+\t* doc/cfg.texi (Edges): Update. Document the edge_iterator data\n+\ttype and its methods.\n+\n 2004-12-02  Richard Henderson  <rth@redhat.com>\n \n \t* expr.c (write_complex_part): Use simplify_gen_subreg when the"}, {"sha": "e25e116ef3da794617661e71d371a4c02895ac60", "filename": "gcc/doc/cfg.texi", "status": "modified", "additions": 64, "deletions": 5, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9208393247645077a2d64d0542cd43227e7ae500/gcc%2Fdoc%2Fcfg.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9208393247645077a2d64d0542cd43227e7ae500/gcc%2Fdoc%2Fcfg.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcfg.texi?ref=9208393247645077a2d64d0542cd43227e7ae500", "patch": "@@ -145,11 +145,70 @@ a predecessor of B, and B is a successor of A@.  Edges are represented\n in GCC with the @code{edge} data type.  Each @code{edge} acts as a\n link between two basic blocks: the @code{src} member of an edge\n points to the predecessor basic block of the @code{dest} basic block.\n-The members @code{pred} and @code{succ} of the @code{basic_block} data\n-type point to singly linked lists of edges to the predecessors and\n-successors of the block.  The edges are linked via the\n-@code{succ_next} and @code{pred_next} members of the @code{edge} data\n-type.\n+The members @code{preds} and @code{succs} of the @code{basic_block} data\n+type point to type-safe vectors of edges to the predecessors and\n+successors of the block.\n+\n+@cindex edge iterators\n+When walking the edges in an edge vector, @dfn{edge iterators} should\n+be used.  Edge iterators are constructed using the\n+@code{edge_iterator} data structure and several methods are available\n+to operate on them:\n+\n+@ftable @code\n+@item ei_start\n+This function initializes an @code{edge_iterator} that points to the\n+first edge in a vector of edges.\n+\n+@item ei_last\n+This function initializes an @code{edge_iterator} that points to the\n+last edge in a vector of edges.\n+\n+@item ei_end_p\n+This predicate is @code{true} if an @code{edge_iterator} represents\n+the last edge in an edge vector.\n+\n+@item ei_one_before_end_p\n+This predicate is @code{true} if an @code{edge_iterator} represents\n+the second last edge in an edge vector.\n+\n+@item ei_next\n+This function takes a pointer to an @code{edge_iterator} and makes it\n+point to the next edge in the sequence.\n+\n+@item ei_prev\n+This function takes a pointer to an @code{edge_iterator} and makes it\n+point to the previous edge in the sequence.\n+\n+@item ei_edge\n+This function returns the @code{edge} currently pointed to by an\n+@code{edge_iterator}.\n+\n+@item ei_safe_safe\n+This function returns the @code{edge} currently pointed to by an\n+@code{edge_iterator}, but returns @code{NULL} if the iterator is\n+pointing at the end of the sequence.  This function has been provided\n+for existing code makes the assumption that a @code{NULL} edge\n+indicates the end of the sequence.\n+\n+@end ftable\n+\n+The convenience macro @code{FOR_EACH_EDGE} can be used to visit all of\n+the edges in a sequence of predecessor or successor edges.  It must\n+not be used when an element might be removed during the traversal,\n+otherwise elements will be missed.  Here is an example of how to use\n+the macro:\n+\n+@smallexample\n+edge e;\n+edge_iterator ei;\n+\n+FOR_EACH_EDGE (e, ei, bb->succs)\n+  @{\n+     if (e->flags & EDGE_FALLTHRU)\n+       break;\n+  @}\n+@end smallexample\n \n @findex fall-thru\n There are various reasons why control flow may transfer from one block"}]}