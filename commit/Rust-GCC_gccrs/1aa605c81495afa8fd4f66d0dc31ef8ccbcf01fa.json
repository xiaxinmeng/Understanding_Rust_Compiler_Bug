{"sha": "1aa605c81495afa8fd4f66d0dc31ef8ccbcf01fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFhNjA1YzgxNDk1YWZhOGZkNGY2NmQwZGMzMWVmOGNjYmNmMDFmYQ==", "commit": {"author": {"name": "Warren Levy", "email": "warrenl@redhat.com", "date": "2001-01-20T00:37:09Z"}, "committer": {"name": "Warren Levy", "email": "warrenl@gcc.gnu.org", "date": "2001-01-20T00:37:09Z"}, "message": "SimpleDateFormat.java (format): Compute hour for cases HOUR_OF_DAY1_FIELD (1-24)...\n\n\t* java/text/SimpleDateFormat.java (format): Compute hour for cases\n\tHOUR_OF_DAY1_FIELD (1-24), HOUR1_FIELD (1-12), and HOUR0_FIELD (0-11)\n\tcorrectly.  Adjust properly from 0-23 clock hour.\n\nFixes failure in Mauve test java.text.SimpleDateFormat.Test (format).\n\nFrom-SVN: r39147", "tree": {"sha": "1bc8189e8d7cb91fe3547f914800a3d7919eb240", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bc8189e8d7cb91fe3547f914800a3d7919eb240"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1aa605c81495afa8fd4f66d0dc31ef8ccbcf01fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aa605c81495afa8fd4f66d0dc31ef8ccbcf01fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aa605c81495afa8fd4f66d0dc31ef8ccbcf01fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aa605c81495afa8fd4f66d0dc31ef8ccbcf01fa/comments", "author": null, "committer": null, "parents": [{"sha": "03bbd83fa42ad4c8f3c5811e923844f7dc5df9e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03bbd83fa42ad4c8f3c5811e923844f7dc5df9e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03bbd83fa42ad4c8f3c5811e923844f7dc5df9e5"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "15a1466485c883607cd1410a0f878a2cf2a058ff", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aa605c81495afa8fd4f66d0dc31ef8ccbcf01fa/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aa605c81495afa8fd4f66d0dc31ef8ccbcf01fa/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=1aa605c81495afa8fd4f66d0dc31ef8ccbcf01fa", "patch": "@@ -1,3 +1,9 @@\n+2001-01-19  Warren Levy  <warrenl@redhat.com>\n+\n+\t* java/text/SimpleDateFormat.java (format): Compute hour for cases\n+\tHOUR_OF_DAY1_FIELD (1-24), HOUR1_FIELD (1-12), and HOUR0_FIELD (0-11)\n+\tcorrectly.  Adjust properly from 0-23 clock hour.\n+\n 2001-01-17  Mark Wielaard  <mark@klomp.org>\n \n \t* java/bean/Beans.java (instantiate): enable Applet code from Classpath\n@@ -104,7 +110,6 @@\n \tnon-standard ones.\n \t(getDefaultTimeZoneId): Removed.\n \t(zoneGMT): Removed.\n-\t(getDefaultTimeZoneId): Removed.\n \t* java/util/natTimeZone.cc: Removed.\n \n 2001-01-08  Bryce McKinlay  <bryce@albatross.co.nz>"}, {"sha": "50cd99b91eaeba5fbaa439c532c29f58ea897023", "filename": "libjava/java/text/SimpleDateFormat.java", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aa605c81495afa8fd4f66d0dc31ef8ccbcf01fa/libjava%2Fjava%2Ftext%2FSimpleDateFormat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aa605c81495afa8fd4f66d0dc31ef8ccbcf01fa/libjava%2Fjava%2Ftext%2FSimpleDateFormat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FSimpleDateFormat.java?ref=1aa605c81495afa8fd4f66d0dc31ef8ccbcf01fa", "patch": "@@ -1,6 +1,6 @@\n /* SimpleDateFormat.java -- A class for parsing/formating simple \n    date constructs\n-   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -411,8 +411,8 @@ else if (p.size < 4)\n \tcase DATE_FIELD:\n \t  withLeadingZeros(theCalendar.get(Calendar.DATE),p.size,buffer);\n \t  break;\n-\tcase HOUR_OF_DAY1_FIELD:  // 1-12\n-\t  withLeadingZeros(theCalendar.get(Calendar.HOUR),p.size,buffer);\n+\tcase HOUR_OF_DAY1_FIELD: // 1-24\n+\t  withLeadingZeros(((theCalendar.get(Calendar.HOUR_OF_DAY)+23)%24)+1,p.size,buffer);\n \t  break;\n \tcase HOUR_OF_DAY0_FIELD: // 0-23\n \t  withLeadingZeros(theCalendar.get(Calendar.HOUR_OF_DAY),p.size,buffer);\n@@ -447,11 +447,11 @@ else if (p.size < 4)\n \tcase AM_PM_FIELD:\n \t  buffer.append(formatData.ampms[theCalendar.get(Calendar.AM_PM)]);\n \t  break;\n-\tcase HOUR1_FIELD: // 1-24\n-\t  withLeadingZeros(theCalendar.get(Calendar.HOUR_OF_DAY)+1,p.size,buffer);\n+\tcase HOUR1_FIELD: // 1-12\n+\t  withLeadingZeros(((theCalendar.get(Calendar.HOUR)+11)%12)+1,p.size,buffer);\n \t  break;\n \tcase HOUR0_FIELD: // 0-11\n-\t  withLeadingZeros(theCalendar.get(Calendar.HOUR)-1,p.size,buffer);\n+\t  withLeadingZeros(theCalendar.get(Calendar.HOUR),p.size,buffer);\n \t  break;\n \tcase TIMEZONE_FIELD:\n \t  TimeZone zone = theCalendar.getTimeZone();"}]}