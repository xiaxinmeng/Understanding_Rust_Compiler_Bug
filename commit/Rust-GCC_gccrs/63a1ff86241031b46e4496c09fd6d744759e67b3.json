{"sha": "63a1ff86241031b46e4496c09fd6d744759e67b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNhMWZmODYyNDEwMzFiNDZlNDQ5NmMwOWZkNmQ3NDQ3NTllNjdiMw==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2002-10-16T19:09:25Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2002-10-16T19:09:25Z"}, "message": "linux.h (ASM_DOUBLE, [...]): Remove.\n\n\t* config/s390/linux.h (ASM_DOUBLE, _ASM_OUTPUT_LONG): Remove.\n\t(LPREFIX): Likewise.\n\t(ASM_COMMENT_START, LOCAL_LABEL_PREFIX, ASM_FORMAT_PRIVATE_NAME,\n\tASM_OUTPUT_ADDR_VEC_ELT, ASM_OUTPUT_ADDR_DIFF_ELT,\n\tASM_OUTPUT_ALIGN, ASM_OUTPUT_SKIP, ASM_OUTPUT_ALIGNED_BSS,\n\tTEXT_SECTION_ASM_OP, DATA_SECTION_ASM_OP, BSS_SECTION_ASM_OP,\n\tGLOBAL_ASM_OP, ASM_OUTPUT_MI_THUNK): Move to s390.h.\n\n\t* config/s390/s390.h (ASM_COMMENT_START, LOCAL_LABEL_PREFIX,\n\tASM_FORMAT_PRIVATE_NAME, ASM_OUTPUT_ALIGN, ASM_OUTPUT_SKIP,\n\tASM_OUTPUT_ALIGNED_BSS, TEXT_SECTION_ASM_OP, DATA_SECTION_ASM_OP,\n\tBSS_SECTION_ASM_OP): Move from linux.h.\n\t(ASM_OUTPUT_ADDR_VEC_ELT, ASM_OUTPUT_ADDR_DIFF_ELT): Likewise.\n\tAlso, use ASM_GENERATE_INTERNAL_LABEL instead of LPREFIX.\n\n\t* config/s390/s390.c (s390_function_profiler): Use\n\tASM_GENERATE_INTERNAL_LABEL instead of LPREFIX.\n\nFrom-SVN: r58219", "tree": {"sha": "b0bd6bfb6510414eb40b782e7671f4ad99244b5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0bd6bfb6510414eb40b782e7671f4ad99244b5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63a1ff86241031b46e4496c09fd6d744759e67b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63a1ff86241031b46e4496c09fd6d744759e67b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63a1ff86241031b46e4496c09fd6d744759e67b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63a1ff86241031b46e4496c09fd6d744759e67b3/comments", "author": null, "committer": null, "parents": [{"sha": "451c08992e6c3ff4a053b9d20ed6d6f47923aae6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/451c08992e6c3ff4a053b9d20ed6d6f47923aae6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/451c08992e6c3ff4a053b9d20ed6d6f47923aae6"}], "stats": {"total": 331, "additions": 163, "deletions": 168}, "files": [{"sha": "ec6b25d308256878881acccc2b3c10e2d2ef60a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a1ff86241031b46e4496c09fd6d744759e67b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a1ff86241031b46e4496c09fd6d744759e67b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63a1ff86241031b46e4496c09fd6d744759e67b3", "patch": "@@ -1,3 +1,23 @@\n+2002-10-16  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/linux.h (ASM_DOUBLE, _ASM_OUTPUT_LONG): Remove.\n+\t(LPREFIX): Likewise.\n+\t(ASM_COMMENT_START, LOCAL_LABEL_PREFIX, ASM_FORMAT_PRIVATE_NAME,\n+\tASM_OUTPUT_ADDR_VEC_ELT, ASM_OUTPUT_ADDR_DIFF_ELT,\n+\tASM_OUTPUT_ALIGN, ASM_OUTPUT_SKIP, ASM_OUTPUT_ALIGNED_BSS,\n+\tTEXT_SECTION_ASM_OP, DATA_SECTION_ASM_OP, BSS_SECTION_ASM_OP,\n+\tGLOBAL_ASM_OP, ASM_OUTPUT_MI_THUNK): Move to s390.h.\n+\n+\t* config/s390/s390.h (ASM_COMMENT_START, LOCAL_LABEL_PREFIX, \n+\tASM_FORMAT_PRIVATE_NAME, ASM_OUTPUT_ALIGN, ASM_OUTPUT_SKIP, \n+\tASM_OUTPUT_ALIGNED_BSS, TEXT_SECTION_ASM_OP, DATA_SECTION_ASM_OP, \n+\tBSS_SECTION_ASM_OP): Move from linux.h.\n+\t(ASM_OUTPUT_ADDR_VEC_ELT, ASM_OUTPUT_ADDR_DIFF_ELT): Likewise.\n+\tAlso, use ASM_GENERATE_INTERNAL_LABEL instead of LPREFIX.\n+\n+\t* config/s390/s390.c (s390_function_profiler): Use \n+\tASM_GENERATE_INTERNAL_LABEL instead of LPREFIX.\n+\n 2002-10-15  Richard Henderson  <rth@redhat.com>\n \n \t* real.c (real_to_decimal): Accept BUF_SIZE and CROP_TRAILING_ZEROS"}, {"sha": "b94f0b9d8f260ae5fb8021d7d7d7a1ec1b62b5f5", "filename": "gcc/config/s390/linux.h", "status": "modified", "additions": 0, "deletions": 156, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a1ff86241031b46e4496c09fd6d744759e67b3/gcc%2Fconfig%2Fs390%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a1ff86241031b46e4496c09fd6d744759e67b3/gcc%2Fconfig%2Fs390%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Flinux.h?ref=63a1ff86241031b46e4496c09fd6d744759e67b3", "patch": "@@ -126,162 +126,6 @@ Boston, MA 02111-1307, USA.  */\n   { \"link_arch64\",\tLINK_ARCH64_SPEC },\t\\\n \n \n-/* Character to start a comment.  */\n-\n-#define ASM_COMMENT_START \"#\"\n-\n-\n-/* Assembler pseudos to introduce constants of various size.  */\n-\n-#define ASM_DOUBLE \"\\t.double\"\n-\n-/* The LOCAL_LABEL_PREFIX variable is used by dbxelf.h.  */\n-#define LOCAL_LABEL_PREFIX \".\"\n-\n-/* Prefix for internally generated assembler labels.  */\n-#define LPREFIX \".L\"\n-\n-/* Store in OUTPUT a string (made with alloca) containing\n-   an assembler-name for a local static variable named NAME.\n-   LABELNO is an integer which is different for each call.  */\n-\n-#undef ASM_FORMAT_PRIVATE_NAME\n-#define ASM_FORMAT_PRIVATE_NAME(OUTPUT, NAME, LABELNO)  \\\n-( (OUTPUT) = (char *) alloca (strlen ((NAME)) + 10),    \\\n-  sprintf ((OUTPUT), \"%s.%d\", (NAME), (LABELNO)))\n-\n-\n-     /* internal macro to output long */\n-#define _ASM_OUTPUT_LONG(FILE, VALUE)                                   \\\n-      fprintf (FILE, \"\\t.long\\t0x%lX\\n\", VALUE);\n-\n-\n-/* This is how to output an element of a case-vector that is absolute.  */\n-\n-#define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE)  \t\t\t\\\n-  fprintf (FILE, \"%s%s%d\\n\", integer_asm_op (UNITS_PER_WORD, TRUE), \\\n-\t   LPREFIX, VALUE)\n-\n-/* This is how to output an element of a case-vector that is relative.  */\n-\n-#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \t\t\\\n-  fprintf (FILE, \"%s%s%d-%s%d\\n\", integer_asm_op (UNITS_PER_WORD, TRUE), \\\n-\t   LPREFIX, VALUE, LPREFIX, REL)\n-\n-\n-\n-/* This is how to output an assembler line\n-   that says to advance the location counter\n-   to a multiple of 2**LOG bytes.  */\n-\n-#undef ASM_OUTPUT_ALIGN\n-#define ASM_OUTPUT_ALIGN(FILE, LOG)\t\\\n-    if ((LOG)!=0) fprintf ((FILE), \"\\t.align\\t%d\\n\", 1<<(LOG))\n-\n-/* This is how to output an assembler line\n-   that says to advance the location counter by SIZE bytes.  */\n-\n-#undef ASM_OUTPUT_SKIP\n-#define ASM_OUTPUT_SKIP(FILE, SIZE)  \\\n-  fprintf ((FILE), \"\\t.set\\t.,.+%u\\n\", (SIZE))\n-\n-/* This is how to output assembler code to declare an\n-   uninitialized external linkage data object.  */\n-\n-#undef ASM_OUTPUT_ALIGNED_BSS\n-#define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \\\n-  asm_output_aligned_bss (FILE, DECL, NAME, SIZE, ALIGN)\n-\n-/* Output before read-only data.  */\n-\n-#define TEXT_SECTION_ASM_OP \".text\"\n-\n-/* Output before writable (initialized) data.  */\n-\n-#define DATA_SECTION_ASM_OP \".data\"\n-\n-/* Output before writable (uninitialized) data.  */\n-\n-#define BSS_SECTION_ASM_OP \".bss\"\n-\n-/* This is how to output a command to make the user-level label named NAME\n-   defined for reference from other files.  */\n-\n-/* Globalizing directive for a label.  */\n-#define GLOBAL_ASM_OP \".globl \"\n-\f\n-/* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n-   Used for C++ multiple inheritance.  */\n-#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION)              \\\n-do {                                                                          \\\n-  if (TARGET_64BIT)                                                           \\\n-    {                                                                         \\\n-      if (flag_pic)                                                           \\\n-        {                                                                     \\\n-          fprintf (FILE, \"\\tlarl  1,0f\\n\");                                   \\\n-          fprintf (FILE, \"\\tagf   %d,0(1)\\n\",                                 \\\n-                   aggregate_value_p (TREE_TYPE                               \\\n-                                      (TREE_TYPE (FUNCTION))) ? 3 :2 );       \\\n-          fprintf (FILE, \"\\tlarl  1,\");                                       \\\n-          assemble_name (FILE, XSTR (XEXP (DECL_RTL (FUNCTION), 0), 0));      \\\n-          fprintf (FILE, \"@GOTENT\\n\");                                        \\\n-          fprintf (FILE, \"\\tlg    1,0(1)\\n\");                                 \\\n-          fprintf (FILE, \"\\tbr    1\\n\");                                      \\\n-          fprintf (FILE, \"0:\\t.long  \");\t                              \\\n-          fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, (DELTA));                   \\\n-          fprintf (FILE, \"\\n\");\t\t\t                              \\\n-        }                                                                     \\\n-      else                                                                    \\\n-        {                                                                     \\\n-          fprintf (FILE, \"\\tlarl  1,0f\\n\");                                   \\\n-          fprintf (FILE, \"\\tagf   %d,0(1)\\n\",                                 \\\n-          aggregate_value_p (TREE_TYPE                                        \\\n-                             (TREE_TYPE (FUNCTION))) ? 3 :2 );                \\\n-          fprintf (FILE, \"\\tjg  \");                                           \\\n-          assemble_name (FILE, XSTR (XEXP (DECL_RTL (FUNCTION), 0), 0));      \\\n-          fprintf (FILE, \"\\n\");                                               \\\n-          fprintf (FILE, \"0:\\t.long  \");\t\t                      \\\n-          fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, (DELTA));                   \\\n-          fprintf (FILE, \"\\n\");\t\t\t                              \\\n-        }                                                                     \\\n-    }                                                                         \\\n-  else                                                                        \\\n-    {                                                                         \\\n-      if (flag_pic)                                                           \\\n-        {                                                                     \\\n-          fprintf (FILE, \"\\tbras  1,0f\\n\");                                   \\\n-          fprintf (FILE, \"\\t.long _GLOBAL_OFFSET_TABLE_-.\\n\");                \\\n-          fprintf (FILE, \"\\t.long  \");                                        \\\n-          assemble_name (FILE, XSTR (XEXP (DECL_RTL (FUNCTION), 0), 0));      \\\n-          fprintf (FILE, \"@GOT\\n\");                                           \\\n-          fprintf (FILE, \"\\t.long  \");\t\t                              \\\n-          fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, (DELTA));                   \\\n-          fprintf (FILE, \"\\n\");\t\t\t                              \\\n-          fprintf (FILE, \"0:\\tal  %d,8(1)\\n\",                                 \\\n-                   aggregate_value_p (TREE_TYPE                               \\\n-                                      (TREE_TYPE (FUNCTION))) ? 3 : 2 );      \\\n-          fprintf (FILE, \"\\tl     0,4(1)\\n\");                                 \\\n-          fprintf (FILE, \"\\tal    1,0(1)\\n\");                                 \\\n-          fprintf (FILE, \"\\talr   1,0\\n\");                                    \\\n-          fprintf (FILE, \"\\tl     1,0(1)\\n\");                                 \\\n-          fprintf (FILE, \"\\tbr    1\\n\");                                      \\\n-        } else {                                                              \\\n-          fprintf (FILE, \"\\tbras  1,0f\\n\");                                   \\\n-          fprintf (FILE, \"\\t.long  \");                                        \\\n-          assemble_name (FILE, XSTR (XEXP (DECL_RTL (FUNCTION), 0), 0));      \\\n-          fprintf (FILE, \"-.\\n\");                                             \\\n-          fprintf (FILE, \"\\t.long  \");\t\t                              \\\n-          fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, (DELTA));                   \\\n-          fprintf (FILE, \"\\n\");\t\t\t                              \\\n-          fprintf (FILE, \"0:\\tal  %d,4(1)\\n\",                                 \\\n-                   aggregate_value_p (TREE_TYPE                               \\\n-                                      (TREE_TYPE (FUNCTION))) ? 3 : 2 );      \\\n-          fprintf (FILE, \"\\tal    1,0(1)\\n\");                                 \\\n-          fprintf (FILE, \"\\tbr    1\\n\");                                      \\\n-       }                                                                      \\\n-    }                                                                         \\\n-} while (0)\n-\n /* Do code reading to identify a signal frame, and set the frame\n    state data appropriately.  See unwind-dw2.c for the structs.  */\n "}, {"sha": "b785b0b6317b4a720c9625516f5fa476ed10a3d8", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a1ff86241031b46e4496c09fd6d744759e67b3/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a1ff86241031b46e4496c09fd6d744759e67b3/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=63a1ff86241031b46e4496c09fd6d744759e67b3", "patch": "@@ -5487,7 +5487,7 @@ s390_function_profiler (file, labelno)\n   rtx op[7];\n \n   char label[128];\n-  sprintf (label, \"%sP%d\", LPREFIX, labelno);\n+  ASM_GENERATE_INTERNAL_LABEL (label, \"LP\", labelno);\n \n   fprintf (file, \"# function profiler \\n\");\n "}, {"sha": "7bc1e0a1eac7e671aa39978242997bb8b32c7337", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 142, "deletions": 11, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a1ff86241031b46e4496c09fd6d744759e67b3/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a1ff86241031b46e4496c09fd6d744759e67b3/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=63a1ff86241031b46e4496c09fd6d744759e67b3", "patch": "@@ -854,6 +854,79 @@ CUMULATIVE_ARGS;\n \n #define EXIT_IGNORE_STACK       1\n \n+/* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n+   Used for C++ multiple inheritance.  */\n+#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION)              \\\n+do {                                                                          \\\n+  if (TARGET_64BIT)                                                           \\\n+    {                                                                         \\\n+      if (flag_pic)                                                           \\\n+        {                                                                     \\\n+          fprintf (FILE, \"\\tlarl  1,0f\\n\");                                   \\\n+          fprintf (FILE, \"\\tagf   %d,0(1)\\n\",                                 \\\n+                   aggregate_value_p (TREE_TYPE                               \\\n+                                      (TREE_TYPE (FUNCTION))) ? 3 :2 );       \\\n+          fprintf (FILE, \"\\tlarl  1,\");                                       \\\n+          assemble_name (FILE, XSTR (XEXP (DECL_RTL (FUNCTION), 0), 0));      \\\n+          fprintf (FILE, \"@GOTENT\\n\");                                        \\\n+          fprintf (FILE, \"\\tlg    1,0(1)\\n\");                                 \\\n+          fprintf (FILE, \"\\tbr    1\\n\");                                      \\\n+          fprintf (FILE, \"0:\\t.long  \");\t                              \\\n+          fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, (DELTA));                   \\\n+          fprintf (FILE, \"\\n\");\t\t\t                              \\\n+        }                                                                     \\\n+      else                                                                    \\\n+        {                                                                     \\\n+          fprintf (FILE, \"\\tlarl  1,0f\\n\");                                   \\\n+          fprintf (FILE, \"\\tagf   %d,0(1)\\n\",                                 \\\n+          aggregate_value_p (TREE_TYPE                                        \\\n+                             (TREE_TYPE (FUNCTION))) ? 3 :2 );                \\\n+          fprintf (FILE, \"\\tjg  \");                                           \\\n+          assemble_name (FILE, XSTR (XEXP (DECL_RTL (FUNCTION), 0), 0));      \\\n+          fprintf (FILE, \"\\n\");                                               \\\n+          fprintf (FILE, \"0:\\t.long  \");\t\t                      \\\n+          fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, (DELTA));                   \\\n+          fprintf (FILE, \"\\n\");\t\t\t                              \\\n+        }                                                                     \\\n+    }                                                                         \\\n+  else                                                                        \\\n+    {                                                                         \\\n+      if (flag_pic)                                                           \\\n+        {                                                                     \\\n+          fprintf (FILE, \"\\tbras  1,0f\\n\");                                   \\\n+          fprintf (FILE, \"\\t.long _GLOBAL_OFFSET_TABLE_-.\\n\");                \\\n+          fprintf (FILE, \"\\t.long  \");                                        \\\n+          assemble_name (FILE, XSTR (XEXP (DECL_RTL (FUNCTION), 0), 0));      \\\n+          fprintf (FILE, \"@GOT\\n\");                                           \\\n+          fprintf (FILE, \"\\t.long  \");\t\t                              \\\n+          fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, (DELTA));                   \\\n+          fprintf (FILE, \"\\n\");\t\t\t                              \\\n+          fprintf (FILE, \"0:\\tal  %d,8(1)\\n\",                                 \\\n+                   aggregate_value_p (TREE_TYPE                               \\\n+                                      (TREE_TYPE (FUNCTION))) ? 3 : 2 );      \\\n+          fprintf (FILE, \"\\tl     0,4(1)\\n\");                                 \\\n+          fprintf (FILE, \"\\tal    1,0(1)\\n\");                                 \\\n+          fprintf (FILE, \"\\talr   1,0\\n\");                                    \\\n+          fprintf (FILE, \"\\tl     1,0(1)\\n\");                                 \\\n+          fprintf (FILE, \"\\tbr    1\\n\");                                      \\\n+        } else {                                                              \\\n+          fprintf (FILE, \"\\tbras  1,0f\\n\");                                   \\\n+          fprintf (FILE, \"\\t.long  \");                                        \\\n+          assemble_name (FILE, XSTR (XEXP (DECL_RTL (FUNCTION), 0), 0));      \\\n+          fprintf (FILE, \"-.\\n\");                                             \\\n+          fprintf (FILE, \"\\t.long  \");\t\t                              \\\n+          fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, (DELTA));                   \\\n+          fprintf (FILE, \"\\n\");\t\t\t                              \\\n+          fprintf (FILE, \"0:\\tal  %d,4(1)\\n\",                                 \\\n+                   aggregate_value_p (TREE_TYPE                               \\\n+                                      (TREE_TYPE (FUNCTION))) ? 3 : 2 );      \\\n+          fprintf (FILE, \"\\tal    1,0(1)\\n\");                                 \\\n+          fprintf (FILE, \"\\tbr    1\\n\");                                      \\\n+       }                                                                      \\\n+    }                                                                         \\\n+} while (0)\n+\n+\n /* Addressing modes, and classification of registers for them.  */\n \n /* #define HAVE_POST_INCREMENT */\n@@ -1237,10 +1310,43 @@ CUMULATIVE_ARGS;\n  \n extern struct rtx_def *s390_compare_op0, *s390_compare_op1;\n \n+/* implicit call of memcpy, not bcopy   */\n+\n+#define TARGET_MEM_FUNCTIONS\n+\n+\n+/* Assembler file format.  */\n+\n+/* Character to start a comment.  */\n+#define ASM_COMMENT_START \"#\"\n+\n+/* Declare an uninitialized external linkage data object.  */\n+#define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \\\n+  asm_output_aligned_bss (FILE, DECL, NAME, SIZE, ALIGN)\n+\n+/* Globalizing directive for a label.  */\n+#define GLOBAL_ASM_OP \".globl \"\n+\n+/* Advance the location counter to a multiple of 2**LOG bytes.  */\n+#define ASM_OUTPUT_ALIGN(FILE, LOG) \\\n+  if ((LOG)) fprintf ((FILE), \"\\t.align\\t%d\\n\", 1 << (LOG))\n+\n+/* Advance the location counter by SIZE bytes.  */\n+#define ASM_OUTPUT_SKIP(FILE, SIZE) \\\n+  fprintf ((FILE), \"\\t.set\\t.,.+%u\\n\", (SIZE))\n+\n+/* Store in OUTPUT a string (made with alloca) containing\n+   an assembler-name for a local static variable named NAME.\n+   LABELNO is an integer which is different for each call.  */\n+#define ASM_FORMAT_PRIVATE_NAME(OUTPUT, NAME, LABELNO)\t\\\n+  ((OUTPUT) = (char *) alloca (strlen ((NAME)) + 10),\t\\\n+   sprintf ((OUTPUT), \"%s.%d\", (NAME), (LABELNO)))\n+\n+/* The LOCAL_LABEL_PREFIX variable is used by dbxelf.h.  */\n+#define LOCAL_LABEL_PREFIX \".\"\n \n /* How to refer to registers in assembler output.  This sequence is\n    indexed by compiler's hard-register-number (see above).  */\n-\n #define REGISTER_NAMES\t\t\t\t\t\t\t\\\n { \"%r0\",  \"%r1\",  \"%r2\",  \"%r3\",  \"%r4\",  \"%r5\",  \"%r6\",  \"%r7\",\t\\\n   \"%r8\",  \"%r9\", \"%r10\", \"%r11\", \"%r12\", \"%r13\", \"%r14\", \"%r15\",\t\\\n@@ -1249,23 +1355,37 @@ extern struct rtx_def *s390_compare_op0, *s390_compare_op1;\n   \"%ap\",  \"%cc\",  \"%fp\"\t\t\t\t\t\t\t\\\n }\n \n-/* implicit call of memcpy, not bcopy   */\n-\n-#define TARGET_MEM_FUNCTIONS\n-\n /* Either simplify a location expression, or return the original.  */\n-\n #define ASM_SIMPLIFY_DWARF_ADDR(X) \\\n   s390_simplify_dwarf_addr (X)\n \n-/* Print operand X (an rtx) in assembler syntax to file FILE.\n-   CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n-   For `%' followed by punctuation, CODE is the punctuation and X is null.  */\n-\n+/* Print operand X (an rtx) in assembler syntax to file FILE.  */\n #define PRINT_OPERAND(FILE, X, CODE) print_operand (FILE, X, CODE)\n-\n #define PRINT_OPERAND_ADDRESS(FILE, ADDR) print_operand_address (FILE, ADDR)\n \n+/* Output an element of a case-vector that is absolute.  */\n+#define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE)\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  char buf[32];\t\t\t\t\t\t\t\t\\\n+  fputs (integer_asm_op (UNITS_PER_WORD, TRUE), (FILE));\t\t\\\n+  ASM_GENERATE_INTERNAL_LABEL (buf, \"L\", (VALUE));\t\t\t\\\n+  assemble_name ((FILE), buf);\t\t\t\t\t\t\\\n+  fputc ('\\n', (FILE));\t\t\t\t\t\t\t\\\n+} while (0)\n+\n+/* Output an element of a case-vector that is relative.  */\n+#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL)\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  char buf[32];\t\t\t\t\t\t\t\t\\\n+  fputs (integer_asm_op (UNITS_PER_WORD, TRUE), (FILE));\t\t\\\n+  ASM_GENERATE_INTERNAL_LABEL (buf, \"L\", (VALUE));\t\t\t\\\n+  assemble_name ((FILE), buf);\t\t\t\t\t\t\\\n+  fputc ('-', (FILE));\t\t\t\t\t\t\t\\\n+  ASM_GENERATE_INTERNAL_LABEL (buf, \"L\", (REL));\t\t\t\\\n+  assemble_name ((FILE), buf);\t\t\t\t\t\t\\\n+  fputc ('\\n', (FILE));\t\t\t\t\t\t\t\\\n+} while (0)\n+\n \n /* Define the codes that are matched by predicates in aux-output.c.  */\n \n@@ -1282,6 +1402,17 @@ extern struct rtx_def *s390_compare_op0, *s390_compare_op1;\n   {\"s390_plus_operand\", { PLUS }},\n \n \n+/* Sections.  */\n+\n+/* Output before read-only data.  */\n+#define TEXT_SECTION_ASM_OP \".text\"\n+\n+/* Output before writable (initialized) data.  */\n+#define DATA_SECTION_ASM_OP \".data\"\n+\n+/* Output before writable (uninitialized) data.  */\n+#define BSS_SECTION_ASM_OP \".bss\"\n+\n /* S/390 constant pool breaks the devices in crtstuff.c to control section\n    in where code resides.  We have to write it as asm code.  */\n #ifndef __s390x__"}]}