{"sha": "0fc4f91130cb863ab9034f8fae983bbb7f7d82d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZjNGY5MTEzMGNiODYzYWI5MDM0ZjhmYWU5ODNiYmI3ZjdkODJkNw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-10-18T12:39:40Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-10-18T12:39:40Z"}, "message": "Remove previous change.\n\n(reload_{in,out}*): Replace general_operand with non_hard_reg_operand.\n\nFrom-SVN: r8301", "tree": {"sha": "db79b3b948249acb21ef49878e465d6090ac5e00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db79b3b948249acb21ef49878e465d6090ac5e00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fc4f91130cb863ab9034f8fae983bbb7f7d82d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fc4f91130cb863ab9034f8fae983bbb7f7d82d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fc4f91130cb863ab9034f8fae983bbb7f7d82d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fc4f91130cb863ab9034f8fae983bbb7f7d82d7/comments", "author": null, "committer": null, "parents": [{"sha": "8a149902a7d0f87e7eeb68dfd85119279c4a4a5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a149902a7d0f87e7eeb68dfd85119279c4a4a5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a149902a7d0f87e7eeb68dfd85119279c4a4a5f"}], "stats": {"total": 129, "additions": 129, "deletions": 0}, "files": [{"sha": "ac711bc9d016b028f45c5ffed20e16a2d7ef52a8", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc4f91130cb863ab9034f8fae983bbb7f7d82d7/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc4f91130cb863ab9034f8fae983bbb7f7d82d7/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=0fc4f91130cb863ab9034f8fae983bbb7f7d82d7", "patch": "@@ -951,6 +951,39 @@\n     DONE;\n }\")\n \n+;; Reloading an SImode or DImode value requires a scratch register if\n+;; going in to or out of float point registers.\n+\n+(define_expand \"reload_insi\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=Z\")\n+\t(match_operand:SI 1 \"non_hard_reg_operand\" \"\"))\n+   (clobber (match_operand:SI 2 \"register_operand\" \"=&r\"))]\n+  \"\"\n+  \"\n+{\n+  if (emit_move_sequence (operands, SImode, operands[2]))\n+    DONE;\n+\n+  /* We don't want the clobber emitted, so handle this ourselves.  */\n+  emit_insn (gen_rtx (SET, VOIDmode, operands[0], operands[1]));\n+  DONE;\n+}\")\n+\n+(define_expand \"reload_outsi\"\n+  [(set (match_operand:SI 0 \"non_hard_reg_operand\" \"\")\n+\t(match_operand:SI 1  \"register_operand\" \"Z\"))\n+   (clobber (match_operand:SI 2 \"register_operand\" \"=&r\"))]\n+  \"\"\n+  \"\n+{\n+  if (emit_move_sequence (operands, SImode, operands[2]))\n+    DONE;\n+\n+  /* We don't want the clobber emitted, so handle this ourselves.  */\n+  emit_insn (gen_rtx (SET, VOIDmode, operands[0], operands[1]));\n+  DONE;\n+}\")\n+\n ;;; pic symbol references\n \n (define_insn \"\"\n@@ -1447,6 +1480,39 @@\n     DONE;\n }\")\n \n+;; Reloading an SImode or DImode value requires a scratch register if\n+;; going in to or out of float point registers.\n+\n+(define_expand \"reload_indf\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=Z\")\n+\t(match_operand:DF 1 \"non_hard_reg_operand\" \"\"))\n+   (clobber (match_operand:DF 2 \"register_operand\" \"=&r\"))]\n+  \"\"\n+  \"\n+{\n+  if (emit_move_sequence (operands, DFmode, operands[2]))\n+    DONE;\n+\n+  /* We don't want the clobber emitted, so handle this ourselves.  */\n+  emit_insn (gen_rtx (SET, VOIDmode, operands[0], operands[1]));\n+  DONE;\n+}\")\n+\n+(define_expand \"reload_outdf\" \n+ [(set (match_operand:DF 0 \"non_hard_reg_operand\" \"\")\n+\t(match_operand:DF 1  \"register_operand\" \"Z\"))\n+   (clobber (match_operand:DF 2 \"register_operand\" \"=&r\"))]\n+  \"\"\n+  \"\n+{\n+  if (emit_move_sequence (operands, DFmode, operands[2]))\n+    DONE;\n+\n+  /* We don't want the clobber emitted, so handle this ourselves.  */\n+  emit_insn (gen_rtx (SET, VOIDmode, operands[0], operands[1]));\n+  DONE;\n+}\")\n+\n (define_insn \"\"\n   [(set (match_operand:DF 0 \"reg_or_nonsymb_mem_operand\"\n \t\t\t  \"=f,*r,Q,?o,?Q,f,*&r,*&r\")\n@@ -1552,6 +1618,36 @@\n     DONE;\n }\")\n \n+(define_expand \"reload_indi\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=f\")\n+\t(match_operand:DI 1 \"non_hard_reg_operand\" \"\"))\n+   (clobber (match_operand:SI 2 \"register_operand\" \"=&r\"))]\n+  \"\"\n+  \"\n+{\n+  if (emit_move_sequence (operands, DImode, operands[2]))\n+    DONE;\n+\n+  /* We don't want the clobber emitted, so handle this ourselves.  */\n+  emit_insn (gen_rtx (SET, VOIDmode, operands[0], operands[1]));\n+  DONE;\n+}\")\n+\n+(define_expand \"reload_outdi\"\n+  [(set (match_operand:DI 0 \"general_operand\" \"\")\n+\t(match_operand:DI 1 \"register_operand\" \"f\"))\n+   (clobber (match_operand:SI 2 \"register_operand\" \"=&r\"))]\n+  \"\"\n+  \"\n+{\n+  if (emit_move_sequence (operands, DImode, operands[2]))\n+    DONE;\n+\n+  /* We don't want the clobber emitted, so handle this ourselves.  */\n+  emit_insn (gen_rtx (SET, VOIDmode, operands[0], operands[1]));\n+  DONE;\n+}\")\n+\n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(high:DI (match_operand 1 \"\" \"\")))]\n@@ -1657,6 +1753,39 @@\n     DONE;\n }\")\n \n+;; Reloading an SImode or DImode value requires a scratch register if\n+;; going in to or out of float point registers.\n+\n+(define_expand \"reload_insf\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=Z\")\n+\t(match_operand:SF 1 \"non_hard_reg_operand\" \"\"))\n+   (clobber (match_operand:SF 2 \"register_operand\" \"=&r\"))]\n+  \"\"\n+  \"\n+{\n+  if (emit_move_sequence (operands, SFmode, operands[2]))\n+    DONE;\n+\n+  /* We don't want the clobber emitted, so handle this ourselves.  */\n+  emit_insn (gen_rtx (SET, VOIDmode, operands[0], operands[1]));\n+  DONE;\n+}\")\n+\n+(define_expand \"reload_outsf\"\n+  [(set (match_operand:SF 0 \"non_hard_reg_operand\" \"\")\n+\t(match_operand:SF 1  \"register_operand\" \"Z\"))\n+   (clobber (match_operand:SF 2 \"register_operand\" \"=&r\"))]\n+  \"\"\n+  \"\n+{\n+  if (emit_move_sequence (operands, SFmode, operands[2]))\n+    DONE;\n+\n+  /* We don't want the clobber emitted, so handle this ourselves.  */\n+  emit_insn (gen_rtx (SET, VOIDmode, operands[0], operands[1]));\n+  DONE;\n+}\")\n+\n (define_insn \"\"\n   [(set (match_operand:SF 0 \"reg_or_nonsymb_mem_operand\"\n \t\t\t  \"=f,r,f,r,Q,Q\")"}]}