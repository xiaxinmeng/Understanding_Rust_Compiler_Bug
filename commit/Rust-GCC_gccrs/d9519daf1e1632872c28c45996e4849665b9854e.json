{"sha": "d9519daf1e1632872c28c45996e4849665b9854e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk1MTlkYWYxZTE2MzI4NzJjMjhjNDU5OTZlNDg0OTY2NWI5ODU0ZQ==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2018-10-11T21:10:12Z"}, "committer": {"name": "Will Schmidt", "email": "willschm@gcc.gnu.org", "date": "2018-10-11T21:10:12Z"}, "message": "fold-vec-select-char.c: New.\n\n[testsuite]\n\n2018-10-11  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n\t* gcc.target/powerpc/fold-vec-select-char.c: New.\n\t* gcc.target/powerpc/fold-vec-select-double.c: New.\n\t* gcc.target/powerpc/fold-vec-select-float.c: New.\n\t* gcc.target/powerpc/fold-vec-select-int.c: New.\n\t* gcc.target/powerpc/fold-vec-select-longlong.c: New.\n\t* gcc.target/powerpc/fold-vec-select-short.c: New.\n\nFrom-SVN: r265065", "tree": {"sha": "3f9596f496aad7f04f27b2aa057f4e8e698ce236", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f9596f496aad7f04f27b2aa057f4e8e698ce236"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9519daf1e1632872c28c45996e4849665b9854e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9519daf1e1632872c28c45996e4849665b9854e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9519daf1e1632872c28c45996e4849665b9854e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9519daf1e1632872c28c45996e4849665b9854e/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "121ef08b0b964ff4e7072a6af14613e68788abc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/121ef08b0b964ff4e7072a6af14613e68788abc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/121ef08b0b964ff4e7072a6af14613e68788abc4"}], "stats": {"total": 235, "additions": 235, "deletions": 0}, "files": [{"sha": "ebc684a7575dd5164155e681a0761f62dfb59711", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9519daf1e1632872c28c45996e4849665b9854e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9519daf1e1632872c28c45996e4849665b9854e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d9519daf1e1632872c28c45996e4849665b9854e", "patch": "@@ -1,10 +1,28 @@\n+2018-10-11  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/fold-vec-select-char.c: New.\n+\t* gcc.target/powerpc/fold-vec-select-double.c: New.\n+\t* gcc.target/powerpc/fold-vec-select-float.c: New.\n+\t* gcc.target/powerpc/fold-vec-select-int.c: New.\n+\t* gcc.target/powerpc/fold-vec-select-longlong.c: New.\n+\t* gcc.target/powerpc/fold-vec-select-short.c: New.\n+\n 2018-10-09  Giuliano Belinassi  <giuliano.belinassi@usp.br>\n \n \tPR tree-optimization/86829\n \t* gcc.dg/sinatan-1.c: New test.\n \t* gcc.dg/sinatan-2.c: New test.\n \t* gcc.dg/sinatan-3.c: New test.\n \n+2018-10-11  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/fold-vec-select-char.c: New.\n+\t* gcc.target/powerpc/fold-vec-select-double.c: New.\n+\t* gcc.target/powerpc/fold-vec-select-float.c: New.\n+\t* gcc.target/powerpc/fold-vec-select-int.c: New.\n+\t* gcc.target/powerpc/fold-vec-select-longlong.c: New.\n+\t* gcc.target/powerpc/fold-vec-select-short.c: New.\n+\n 2018-10-11  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n \t* gcc.target/powerpc/fold-vec-mergeeo-floatdouble.c: New."}, {"sha": "e055c017536beedbfb716fdff20c24cc6707c247", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-select-char.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9519daf1e1632872c28c45996e4849665b9854e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-select-char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9519daf1e1632872c28c45996e4849665b9854e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-select-char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-select-char.c?ref=d9519daf1e1632872c28c45996e4849665b9854e", "patch": "@@ -0,0 +1,46 @@\n+/* Verify that overloaded built-ins for vec_sel with char\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector bool char\n+test1_0 (vector bool char x, vector bool char y, vector bool char z)\n+{\n+  return vec_sel (x, y, z);\n+}\n+\n+vector bool char\n+test1_1 (vector bool char x,vector bool char y, vector unsigned char z)\n+{\n+  return vec_sel (x, y, z);\n+}\n+\n+vector signed char\n+test3_0 (vector signed char x,vector signed char y, vector bool char  z)\n+{\n+  return vec_sel (x, y, z);\n+}\n+\n+vector signed char\n+test3_1 (vector signed char x,vector signed char  y, vector unsigned char z)\n+{\n+  return vec_sel (x, y, z);\n+}\n+\n+vector unsigned char\n+test6_0 (vector unsigned char x,vector unsigned char  y,vector bool char  z)\n+{\n+  return vec_sel (x, y, z);\n+}\n+\n+vector unsigned char\n+test6_1 (vector unsigned char x,vector unsigned char  y, vector unsigned char z)\n+{\n+  return vec_sel (x, y, z);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mxxsel\\M|\\mvsel\\M} 6 } } */"}, {"sha": "b0969774f2f96e30d4119d475cf416279defbd25", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-select-double.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9519daf1e1632872c28c45996e4849665b9854e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-select-double.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9519daf1e1632872c28c45996e4849665b9854e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-select-double.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-select-double.c?ref=d9519daf1e1632872c28c45996e4849665b9854e", "patch": "@@ -0,0 +1,23 @@\n+/* Verify that overloaded built-ins for vec_sel with \n+   double inputs for VSX produce the right code.  */\n+\n+/* { dg-do compile { target { powerpc*-*-linux* } } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-options \"-mcpu=power8 -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector double\n+test2_0 (vector double x, vector double y, vector bool long long z)\n+{\n+  return vec_sel (x, y, z);\n+}\n+\n+vector double\n+test2_1 (vector double x, vector double y, vector unsigned long long z)\n+{\n+  return vec_sel (x, y, z);\n+}\n+\n+/* { dg-final { scan-assembler-times \"xxsel\" 2 } } */"}, {"sha": "cc37eb59724a9f9652587f4c4f88eb55ee41c7b4", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-select-float.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9519daf1e1632872c28c45996e4849665b9854e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-select-float.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9519daf1e1632872c28c45996e4849665b9854e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-select-float.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-select-float.c?ref=d9519daf1e1632872c28c45996e4849665b9854e", "patch": "@@ -0,0 +1,22 @@\n+/* Verify that overloaded built-ins for vec_sel with float \n+   inputs for VSX produce the right code.  */\n+\n+/* { dg-do compile { target { powerpc*-*-linux* } } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector float\n+test1_0 (vector float x, vector float y, vector bool int z)\n+{\n+  return vec_sel (x, y, z);\n+}\n+\n+vector float\n+test1_1 (vector float x, vector float y, vector unsigned int z)\n+{\n+  return vec_sel (x, y, z);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mxxsel\\M|\\mvsel\\M} 2 } } */"}, {"sha": "510fc564370aad8c9f5d78fe552ab55e0b94f1dc", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-select-int.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9519daf1e1632872c28c45996e4849665b9854e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-select-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9519daf1e1632872c28c45996e4849665b9854e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-select-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-select-int.c?ref=d9519daf1e1632872c28c45996e4849665b9854e", "patch": "@@ -0,0 +1,46 @@\n+/* Verify that overloaded built-ins for vec_sel with int\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector bool int\n+test1_0 (vector bool int x, vector bool int y, vector bool int z)\n+{\n+  return vec_sel (x, y, z);\n+}\n+\n+vector bool int\n+test1_1 (vector bool int x, vector bool int y, vector unsigned int z)\n+{\n+  return vec_sel (x, y, z);\n+}\n+\n+vector signed int\n+test3_0 (vector signed int x, vector signed int y, vector bool int z)\n+{\n+  return vec_sel (x, y, z);\n+}\n+\n+vector signed int\n+test3_1 (vector signed int x, vector signed int y, vector unsigned int z)\n+{\n+  return vec_sel (x, y, z);\n+}\n+\n+vector unsigned int\n+test6_0 (vector unsigned int x, vector unsigned int y, vector bool int z)\n+{\n+  return vec_sel (x, y, z);\n+}\n+\n+vector unsigned int\n+test6_1 (vector unsigned int x, vector unsigned int y, vector unsigned int z)\n+{\n+  return vec_sel (x, y, z);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mxxsel\\M|\\mvsel\\M} 6 } } */"}, {"sha": "449c0f0fda85ebad7d6d8fb48e60a820324bfba1", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-select-longlong.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9519daf1e1632872c28c45996e4849665b9854e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-select-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9519daf1e1632872c28c45996e4849665b9854e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-select-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-select-longlong.c?ref=d9519daf1e1632872c28c45996e4849665b9854e", "patch": "@@ -0,0 +1,34 @@\n+/* Verify that overloaded built-ins for vec_sel with long long\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector bool long long\n+test1_0 (vector bool long long x,vector bool long long y, vector bool long long z)\n+{\n+  return vec_sel (x, y, z);\n+}\n+\n+vector bool long long\n+test1_1 (vector bool long long x, vector bool long long y, vector unsigned long long z)\n+{\n+  return vec_sel (x, y, z);\n+}\n+\n+vector signed long long\n+test3_0 (vector signed long long x, vector signed long long y, vector bool long long z)\n+{\n+  return vec_sel (x, y, z);\n+}\n+\n+vector unsigned long long\n+test3_1 (vector unsigned long long x, vector unsigned long long y, vector bool long long z)\n+{\n+  return vec_sel (x, y, z);\n+}\n+\n+/* { dg-final { scan-assembler-times \"xxsel\" 4 } } */"}, {"sha": "0d11fce81b2afcc7c4a7844db777a3f17d7e4450", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-select-short.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9519daf1e1632872c28c45996e4849665b9854e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-select-short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9519daf1e1632872c28c45996e4849665b9854e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-select-short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-select-short.c?ref=d9519daf1e1632872c28c45996e4849665b9854e", "patch": "@@ -0,0 +1,46 @@\n+/* Verify that overloaded built-ins for vec_sel with short\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector bool short\n+test1_0 (vector bool short x, vector bool short y, vector bool short z)\n+{\n+  return vec_sel (x, y, z);\n+}\n+\n+vector bool short\n+test1_1 (vector bool short x, vector bool short y, vector unsigned short z)\n+{\n+  return vec_sel (x, y, z);\n+}\n+\n+vector signed short\n+test3_0 (vector signed short x, vector signed short y, vector bool short z)\n+{\n+  return vec_sel (x, y, z);\n+}\n+\n+vector signed short\n+test3_1 (vector signed short x, vector signed short y, vector unsigned short z)\n+{\n+  return vec_sel (x, y, z);\n+}\n+\n+vector unsigned short\n+test6_0 (vector unsigned short x, vector unsigned short y, vector bool short z)\n+{\n+  return vec_sel (x, y, z);\n+}\n+\n+vector unsigned short\n+test6_1 (vector unsigned short x, vector unsigned short y, vector unsigned short z)\n+{\n+  return vec_sel (x, y, z);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mxxsel\\M|\\mvsel\\M} 6 } } */"}]}