{"sha": "1150a84134f2f78250f2628de4080219e1bf4797", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE1MGE4NDEzNGYyZjc4MjUwZjI2MjhkZTQwODAyMTllMWJmNDc5Nw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-03-28T11:23:52Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-03-28T11:23:52Z"}, "message": "sparc.c (eligible_for_epilogue_delay): False if current_function_calls_eh_return.\n\n        * config/sparc/sparc.c (eligible_for_epilogue_delay): False if\n        current_function_calls_eh_return.\n        (output_function_epilogue): Handle eh_return.\n        * config/sparc/sparc.h (DOESNT_NEED_UNWINDER): Remove.\n        (EH_RETURN_DATA_REGNO): New.\n        (EH_RETURN_STACKADJ_RTX): New.\n        (EH_RETURN_HANDLER_RTX): New.\n        * config/sparc/sparc.md (call/short branch peepholes): Check\n        can_throw_internal instead of in_same_eh_region.\n\nFrom-SVN: r40928", "tree": {"sha": "ea206c02b500a596882811352820435c87511cc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea206c02b500a596882811352820435c87511cc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1150a84134f2f78250f2628de4080219e1bf4797", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1150a84134f2f78250f2628de4080219e1bf4797", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1150a84134f2f78250f2628de4080219e1bf4797", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1150a84134f2f78250f2628de4080219e1bf4797/comments", "author": null, "committer": null, "parents": [{"sha": "83720594cedb0b10abc4c0e28b8ec71e8a5f999d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83720594cedb0b10abc4c0e28b8ec71e8a5f999d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83720594cedb0b10abc4c0e28b8ec71e8a5f999d"}], "stats": {"total": 45, "additions": 35, "deletions": 10}, "files": [{"sha": "6b66ea64c6956aee5bea251554c5642e85a1edec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1150a84134f2f78250f2628de4080219e1bf4797/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1150a84134f2f78250f2628de4080219e1bf4797/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1150a84134f2f78250f2628de4080219e1bf4797", "patch": "@@ -1,5 +1,15 @@\n 2001-03-28  Richard Henderson  <rth@redhat.com>\n \n+\t* config/sparc/sparc.c (eligible_for_epilogue_delay): False if\n+\tcurrent_function_calls_eh_return.\n+\t(output_function_epilogue): Handle eh_return.\n+\t* config/sparc/sparc.h (DOESNT_NEED_UNWINDER): Remove.\n+\t(EH_RETURN_DATA_REGNO): New.\n+\t(EH_RETURN_STACKADJ_RTX): New.\n+\t(EH_RETURN_HANDLER_RTX): New.\n+\t* config/sparc/sparc.md (call/short branch peepholes): Check\n+\tcan_throw_internal instead of in_same_eh_region.\n+\n \t* config/rs6000/rs6000.c (rs6000_stack_info): Allocate space\n \tfor eh_return data registers.\n \t(rs6000_emit_prologue): Save eh_return data registers."}, {"sha": "9cb4c5ccf09f51804c1b3c3adb9da69fe37d387b", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1150a84134f2f78250f2628de4080219e1bf4797/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1150a84134f2f78250f2628de4080219e1bf4797/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=1150a84134f2f78250f2628de4080219e1bf4797", "patch": "@@ -2377,6 +2377,11 @@ eligible_for_epilogue_delay (trial, slot)\n   if (num_gfregs)\n     return 0;\n \n+  /* If the function uses __builtin_eh_return, the eh_return machinery\n+     occupies the delay slot.  */\n+  if (current_function_calls_eh_return)\n+    return 0;\n+\n   /* In the case of a true leaf function, anything can go into the delay slot.\n      A delay slot only exists however if the frame size is zero, otherwise\n      we will put an insn to adjust the stack after the return.  */\n@@ -3594,8 +3599,17 @@ output_function_epilogue (file, size, leaf_function)\n \n       if (! leaf_function)\n \t{\n+\t  if (current_function_calls_eh_return)\n+\t    {\n+\t      if (current_function_epilogue_delay_list)\n+\t\tabort ();\n+\t      if (SKIP_CALLERS_UNIMP_P)\n+\t\tabort ();\n+\n+\t      fputs (\"\\trestore\\n\\tretl\\n\\tadd\\t%sp, %g1, %sp\\n\", file);\n+\t    }\n \t  /* If we wound up with things in our delay slot, flush them here.  */\n-\t  if (current_function_epilogue_delay_list)\n+\t  else if (current_function_epilogue_delay_list)\n \t    {\n \t      rtx delay = PATTERN (XEXP (current_function_epilogue_delay_list, 0));\n \n@@ -3635,6 +3649,8 @@ output_function_epilogue (file, size, leaf_function)\n \t  else\n \t    fprintf (file, \"\\t%s\\n\\trestore\\n\", ret);\n \t}\n+      else if (current_function_calls_eh_return)\n+\tabort ();\n       /* All of the following cases are for leaf functions.  */\n       else if (current_function_epilogue_delay_list)\n \t{"}, {"sha": "9e49eadb02daa6031c47ed24d48878c0d1f4bd2f", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1150a84134f2f78250f2628de4080219e1bf4797/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1150a84134f2f78250f2628de4080219e1bf4797/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=1150a84134f2f78250f2628de4080219e1bf4797", "patch": "@@ -2235,7 +2235,10 @@ LFLGRET\"ID\":\\n\\\n    bias if present.  */\n #define INCOMING_FRAME_SP_OFFSET SPARC_STACK_BIAS\n \n-#define DOESNT_NEED_UNWINDER (! TARGET_FLAT)\n+/* Describe how we implement __builtin_eh_return.  */\n+#define EH_RETURN_DATA_REGNO(N) ((N) < 4 ? (N) + 24 : INVALID_REGNUM)\n+#define EH_RETURN_STACKADJ_RTX\tgen_rtx_REG (Pmode, 1)\t/* %g1 */\n+#define EH_RETURN_HANDLER_RTX\tgen_rtx_REG (Pmode, 31)\t/* %i7 */\n \f\n /* Addressing modes, and classification of registers for them.  */\n "}, {"sha": "8167af887ecd0029e9cb44b4320f24c4ff4a195d", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1150a84134f2f78250f2628de4080219e1bf4797/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1150a84134f2f78250f2628de4080219e1bf4797/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=1150a84134f2f78250f2628de4080219e1bf4797", "patch": "@@ -9453,8 +9453,7 @@\n \t      (clobber (reg:SI 15))])\n    (set (pc) (label_ref (match_operand 3 \"\" \"\")))]\n   \"short_branch (INSN_UID (insn), INSN_UID (operands[3]))\n-   && in_same_eh_region (insn, operands[3])\n-   && in_same_eh_region (insn, ins1)\"\n+   && (USING_SJLJ_EXCEPTIONS || ! can_throw_internal (insn))\"\n   \"call\\\\t%a1, %2\\\\n\\\\tadd\\\\t%%o7, (%l3-.-4), %%o7\")\n \n (define_peephole\n@@ -9463,8 +9462,7 @@\n \t      (clobber (reg:SI 15))])\n    (set (pc) (label_ref (match_operand 2 \"\" \"\")))]\n   \"short_branch (INSN_UID (insn), INSN_UID (operands[2]))\n-   && in_same_eh_region (insn, operands[2])\n-   && in_same_eh_region (insn, ins1)\"\n+   && (USING_SJLJ_EXCEPTIONS || ! can_throw_internal (insn))\"\n   \"call\\\\t%a0, %1\\\\n\\\\tadd\\\\t%%o7, (%l2-.-4), %%o7\")\n \n (define_peephole\n@@ -9475,8 +9473,7 @@\n    (set (pc) (label_ref (match_operand 3 \"\" \"\")))]\n   \"TARGET_ARCH64\n    && short_branch (INSN_UID (insn), INSN_UID (operands[3]))\n-   && in_same_eh_region (insn, operands[3])\n-   && in_same_eh_region (insn, ins1)\"\n+   && (USING_SJLJ_EXCEPTIONS || ! can_throw_internal (insn))\"\n   \"call\\\\t%a1, %2\\\\n\\\\tadd\\\\t%%o7, (%l3-.-4), %%o7\")\n \n (define_peephole\n@@ -9486,8 +9483,7 @@\n    (set (pc) (label_ref (match_operand 2 \"\" \"\")))]\n   \"TARGET_ARCH64\n    && short_branch (INSN_UID (insn), INSN_UID (operands[2]))\n-   && in_same_eh_region (insn, operands[2])\n-   && in_same_eh_region (insn, ins1)\"\n+   && (USING_SJLJ_EXCEPTIONS || ! can_throw_internal (insn))\"\n   \"call\\\\t%a0, %1\\\\n\\\\tadd\\\\t%%o7, (%l2-.-4), %%o7\")\n \f\n (define_expand \"prologue\""}]}