{"sha": "f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMzMGY1OTkxZWYwMTgyZDU5YWI2YjViMWMzMWYzYmQ1Y2IxMjVlZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-05-17T10:29:46Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-05-17T10:29:46Z"}, "message": "re PR c++/44516 (improve error message when no matching operator)\n\ngcc/cp\n2012-05-17  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/44516\n\t* typeck.c (build_x_array_ref, build_x_conditional_expr,\n\tbuild_x_compound_expr, build_x_modify_expr): Add location_t parameter.\n\t(finish_class_member_access_expr, build_x_indirect_ref,\n\tbuild_x_binary_op, build_x_compound_expr_from_list,\n\tbuild_x_compound_expr_from_vec): Adjust callers.\n\t* tree.c (build_min_nt_loc): New.\n\t(build_min_nt): Remove.\n\t* typeck2.c (build_x_arrow): Adjust callers.\n\t* pt.c (tsubst_qualified_id, tsubst_omp_for_iterator,\n\ttsubst_copy_and_build): Likewise.\n\t* semantics.c (finish_mem_initializers, handle_omp_for_class_iterator,\n\t finish_omp_atomic): Likewise.\n\t* decl2.c (grok_array_decl, build_anon_union_vars): Adjust.\n\t* parser.c (cp_parser_question_colon_clause,\n\tcp_parser_assignment_expression, cp_parser_expression,\n\tcp_parser_template_id, cp_parser_omp_for_loop): Likewise.\n\t* cp-tree.h: Update.\n\ngcc/testsuite\n2012-05-17  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/44516\n\t* g++.dg/parse/error48.C: New.\n\t* g++.dg/template/crash89.C: Adjust dg-error line numbers.\n\t* g++.old-deja/g++.robertl/eb109.C: Add column info to dg-error string.\n\nlibstdc++\n2012-05-17  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/44516\n\t* testsuite/20_util/ratio/cons/cons_overflow_neg.cc: Adjust\n\tdg-error line number.\n\nFrom-SVN: r187627", "tree": {"sha": "247bd596522541b9f25d331d9ad58d61511c320d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/247bd596522541b9f25d331d9ad58d61511c320d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee/comments", "author": null, "committer": null, "parents": [{"sha": "5264f487f03c0e89c258c62ba2ebe8b46fc189ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5264f487f03c0e89c258c62ba2ebe8b46fc189ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5264f487f03c0e89c258c62ba2ebe8b46fc189ac"}], "stats": {"total": 237, "additions": 159, "deletions": 78}, "files": [{"sha": "54ae298ffd14fc56b812e3111c0527b78a5f631d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee", "patch": "@@ -1,3 +1,24 @@\n+2012-05-17  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/44516\n+\t* typeck.c (build_x_array_ref, build_x_conditional_expr,\n+\tbuild_x_compound_expr, build_x_modify_expr): Add location_t parameter.\n+\t(finish_class_member_access_expr, build_x_indirect_ref,\n+\tbuild_x_binary_op, build_x_compound_expr_from_list,\n+\tbuild_x_compound_expr_from_vec): Adjust callers.\n+\t* tree.c (build_min_nt_loc): New.\n+\t(build_min_nt): Remove.\n+\t* typeck2.c (build_x_arrow): Adjust callers.\n+\t* pt.c (tsubst_qualified_id, tsubst_omp_for_iterator,\n+\ttsubst_copy_and_build): Likewise.\n+\t* semantics.c (finish_mem_initializers, handle_omp_for_class_iterator,\n+\t finish_omp_atomic): Likewise.\n+\t* decl2.c (grok_array_decl, build_anon_union_vars): Adjust.\n+\t* parser.c (cp_parser_question_colon_clause,\n+\tcp_parser_assignment_expression, cp_parser_expression,\n+\tcp_parser_template_id, cp_parser_omp_for_loop): Likewise.\n+\t* cp-tree.h: Update.\n+\n 2012-05-16  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR preprocessor/7263"}, {"sha": "f2e98c81bb09516b2ee0a406451df360952997d6", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee", "patch": "@@ -5691,7 +5691,8 @@ extern bool lvalue_or_rvalue_with_address_p\t(const_tree);\n extern bool xvalue_p\t                        (const_tree);\n extern bool builtin_valid_in_constant_expr_p    (const_tree);\n extern tree build_min\t\t\t\t(enum tree_code, tree, ...);\n-extern tree build_min_nt\t\t\t(enum tree_code, ...);\n+extern tree build_min_nt_loc\t\t\t(location_t, enum tree_code,\n+\t\t\t\t\t\t ...);\n extern tree build_min_non_dep\t\t\t(enum tree_code, tree, ...);\n extern tree build_min_non_dep_call_vec\t\t(tree, tree, VEC(tree,gc) *);\n extern tree build_cplus_new\t\t\t(tree, tree, tsubst_flags_t);\n@@ -5820,7 +5821,8 @@ extern tree build_x_binary_op\t\t\t(location_t,\n \t\t\t\t\t\t enum tree_code, tree,\n \t\t\t\t\t\t enum tree_code, tree *,\n \t\t\t\t\t\t tsubst_flags_t);\n-extern tree build_x_array_ref\t\t\t(tree, tree, tsubst_flags_t);\n+extern tree build_x_array_ref\t\t\t(location_t, tree, tree,\n+\t\t\t\t\t\t tsubst_flags_t);\n extern tree build_x_unary_op\t\t\t(location_t,\n \t\t\t\t\t\t enum tree_code, tree,\n                                                  tsubst_flags_t);\n@@ -5829,20 +5831,22 @@ extern tree cp_build_addr_expr_strict\t\t(tree, tsubst_flags_t);\n extern tree cp_build_unary_op                   (enum tree_code, tree, int, \n                                                  tsubst_flags_t);\n extern tree unary_complex_lvalue\t\t(enum tree_code, tree);\n-extern tree build_x_conditional_expr\t\t(tree, tree, tree, \n+extern tree build_x_conditional_expr\t\t(location_t, tree, tree, tree, \n                                                  tsubst_flags_t);\n extern tree build_x_compound_expr_from_list\t(tree, expr_list_kind,\n \t\t\t\t\t\t tsubst_flags_t);\n extern tree build_x_compound_expr_from_vec\t(VEC(tree,gc) *, const char *);\n-extern tree build_x_compound_expr\t\t(tree, tree, tsubst_flags_t);\n+extern tree build_x_compound_expr\t\t(location_t, tree, tree,\n+\t\t\t\t\t\t tsubst_flags_t);\n extern tree build_compound_expr                 (location_t, tree, tree);\n extern tree cp_build_compound_expr\t\t(tree, tree, tsubst_flags_t);\n extern tree build_static_cast\t\t\t(tree, tree, tsubst_flags_t);\n extern tree build_reinterpret_cast\t\t(tree, tree, tsubst_flags_t);\n extern tree build_const_cast\t\t\t(tree, tree, tsubst_flags_t);\n extern tree build_c_cast\t\t\t(location_t, tree, tree);\n extern tree cp_build_c_cast\t\t\t(tree, tree, tsubst_flags_t);\n-extern tree build_x_modify_expr\t\t\t(tree, enum tree_code, tree,\n+extern tree build_x_modify_expr\t\t\t(location_t, tree,\n+\t\t\t\t\t\t enum tree_code, tree,\n \t\t\t\t\t\t tsubst_flags_t);\n extern tree cp_build_modify_expr\t\t(tree, enum tree_code, tree,\n \t\t\t\t\t\t tsubst_flags_t);"}, {"sha": "c40b830a1aa7459ec17fbcbb5982a19a461ecc32", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee", "patch": "@@ -350,8 +350,8 @@ grok_array_decl (location_t loc, tree array_expr, tree index_exp)\n     {\n       if (type_dependent_expression_p (array_expr)\n \t  || type_dependent_expression_p (index_exp))\n-\treturn build_min_nt (ARRAY_REF, array_expr, index_exp,\n-\t\t\t     NULL_TREE, NULL_TREE);\n+\treturn build_min_nt_loc (loc, ARRAY_REF, array_expr, index_exp,\n+\t\t\t\t NULL_TREE, NULL_TREE);\n       array_expr = build_non_dependent_expr (array_expr);\n       index_exp = build_non_dependent_expr (index_exp);\n     }\n@@ -362,9 +362,8 @@ grok_array_decl (location_t loc, tree array_expr, tree index_exp)\n \n   /* If they have an `operator[]', use that.  */\n   if (MAYBE_CLASS_TYPE_P (type) || MAYBE_CLASS_TYPE_P (TREE_TYPE (index_exp)))\n-    expr = build_new_op (loc, ARRAY_REF, LOOKUP_NORMAL,\n-\t\t\t array_expr, index_exp, NULL_TREE,\n-\t\t\t /*overload=*/NULL, tf_warning_or_error);\n+    expr = build_new_op (loc, ARRAY_REF, LOOKUP_NORMAL, array_expr, index_exp,\n+\t\t\t NULL_TREE, /*overload=*/NULL, tf_warning_or_error);\n   else\n     {\n       tree p1, p2, i1, i2;\n@@ -1370,8 +1369,8 @@ build_anon_union_vars (tree type, tree object)\n \tpermerror (input_location, \"protected member %q+#D in anonymous union\", field);\n \n       if (processing_template_decl)\n-\tref = build_min_nt (COMPONENT_REF, object,\n-\t\t\t    DECL_NAME (field), NULL_TREE);\n+\tref = build_min_nt_loc (UNKNOWN_LOCATION, COMPONENT_REF, object,\n+\t\t\t\tDECL_NAME (field), NULL_TREE);\n       else\n \tref = build_class_member_access_expr (object, field, NULL_TREE,\n \t\t\t\t\t      false, tf_warning_or_error);"}, {"sha": "d18cccac399d7e7eab9d3a3e058c7a1cb99337b5", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee", "patch": "@@ -7394,6 +7394,7 @@ cp_parser_question_colon_clause (cp_parser* parser, tree logical_or_expr)\n   tree expr;\n   tree assignment_expr;\n   struct cp_token *token;\n+  location_t loc = cp_lexer_peek_token (parser->lexer)->location;\n \n   /* Consume the `?' token.  */\n   cp_lexer_consume_token (parser->lexer);\n@@ -7428,7 +7429,7 @@ cp_parser_question_colon_clause (cp_parser* parser, tree logical_or_expr)\n   c_inhibit_evaluation_warnings -= logical_or_expr == truthvalue_true_node;\n \n   /* Build the conditional-expression.  */\n-  return build_x_conditional_expr (logical_or_expr,\n+  return build_x_conditional_expr (loc, logical_or_expr,\n \t\t\t\t   expr,\n \t\t\t\t   assignment_expr,\n                                    tf_warning_or_error);\n@@ -7468,11 +7469,11 @@ cp_parser_assignment_expression (cp_parser* parser, bool cast_p,\n \treturn cp_parser_question_colon_clause (parser, expr);\n       else\n \t{\n-\t  enum tree_code assignment_operator;\n+\t  location_t loc = cp_lexer_peek_token (parser->lexer)->location;\n \n \t  /* If it's an assignment-operator, we're using the second\n \t     production.  */\n-\t  assignment_operator\n+\t  enum tree_code assignment_operator\n \t    = cp_parser_assignment_operator_opt (parser);\n \t  if (assignment_operator != ERROR_MARK)\n \t    {\n@@ -7490,7 +7491,7 @@ cp_parser_assignment_expression (cp_parser* parser, bool cast_p,\n \t\t\t\t\t\t\t      NIC_ASSIGNMENT))\n \t\treturn error_mark_node;\n \t      /* Build the assignment expression.  */\n-\t      expr = build_x_modify_expr (expr,\n+\t      expr = build_x_modify_expr (loc, expr,\n \t\t\t\t\t  assignment_operator,\n \t\t\t\t\t  rhs,\n \t\t\t\t\t  tf_warning_or_error);\n@@ -7599,6 +7600,7 @@ static tree\n cp_parser_expression (cp_parser* parser, bool cast_p, cp_id_kind * pidk)\n {\n   tree expression = NULL_TREE;\n+  location_t loc = UNKNOWN_LOCATION;\n \n   while (true)\n     {\n@@ -7612,14 +7614,15 @@ cp_parser_expression (cp_parser* parser, bool cast_p, cp_id_kind * pidk)\n       if (!expression)\n \texpression = assignment_expression;\n       else\n-\texpression = build_x_compound_expr (expression,\n+\texpression = build_x_compound_expr (loc, expression,\n \t\t\t\t\t    assignment_expression,\n                                             tf_warning_or_error);\n       /* If the next token is not a comma, then we are done with the\n \t expression.  */\n       if (cp_lexer_next_token_is_not (parser->lexer, CPP_COMMA))\n \tbreak;\n       /* Consume the `,'.  */\n+      loc = cp_lexer_peek_token (parser->lexer)->location;\n       cp_lexer_consume_token (parser->lexer);\n       /* A comma operator cannot appear in a constant-expression.  */\n       if (cp_parser_non_integral_constant_expression (parser, NIC_COMMA))\n@@ -12457,7 +12460,9 @@ cp_parser_template_id (cp_parser *parser,\n \n   /* Build a representation of the specialization.  */\n   if (TREE_CODE (templ) == IDENTIFIER_NODE)\n-    template_id = build_min_nt (TEMPLATE_ID_EXPR, templ, arguments);\n+    template_id = build_min_nt_loc (next_token->location,\n+\t\t\t\t    TEMPLATE_ID_EXPR,\n+\t\t\t\t    templ, arguments);\n   else if (DECL_TYPE_TEMPLATE_P (templ)\n \t   || DECL_TEMPLATE_TEMPLATE_PARM_P (templ))\n     {\n@@ -26401,7 +26406,8 @@ cp_parser_omp_for_loop (cp_parser *parser, tree clauses, tree *par_clauses)\n \t\t  cp_parser_parse_definitely (parser);\n \t\t  cp_parser_require (parser, CPP_EQ, RT_EQ);\n \t\t  rhs = cp_parser_assignment_expression (parser, false, NULL);\n-\t\t  finish_expr_stmt (build_x_modify_expr (decl, NOP_EXPR,\n+\t\t  finish_expr_stmt (build_x_modify_expr (EXPR_LOCATION (rhs),\n+\t\t\t\t\t\t\t decl, NOP_EXPR,\n \t\t\t\t\t\t\t rhs,\n \t\t\t\t\t\t\t tf_warning_or_error));\n \t\t  add_private_clause = true;"}, {"sha": "826759f28fb0d82d8a3810077ab76347d63b3ccd", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee", "patch": "@@ -11932,6 +11932,7 @@ tsubst_qualified_id (tree qualified_id, tree args,\n   tree name;\n   bool is_template;\n   tree template_args;\n+  location_t loc = UNKNOWN_LOCATION;\n \n   gcc_assert (TREE_CODE (qualified_id) == SCOPE_REF);\n \n@@ -11940,6 +11941,7 @@ tsubst_qualified_id (tree qualified_id, tree args,\n   if (TREE_CODE (name) == TEMPLATE_ID_EXPR)\n     {\n       is_template = true;\n+      loc = EXPR_LOCATION (name);\n       template_args = TREE_OPERAND (name, 1);\n       if (template_args)\n \ttemplate_args = tsubst_template_args (template_args, args,\n@@ -11968,7 +11970,7 @@ tsubst_qualified_id (tree qualified_id, tree args,\n   if (dependent_scope_p (scope))\n     {\n       if (is_template)\n-\texpr = build_min_nt (TEMPLATE_ID_EXPR, expr, template_args);\n+\texpr = build_min_nt_loc (loc, TEMPLATE_ID_EXPR, expr, template_args);\n       return build_qualified_name (NULL_TREE, scope, expr,\n \t\t\t\t   QUALIFIED_NAME_IS_TEMPLATE (qualified_id));\n     }\n@@ -12672,7 +12674,8 @@ tsubst_omp_for_iterator (tree t, int i, tree declv, tree initv,\n       cond = RECUR (TREE_VEC_ELT (OMP_FOR_COND (t), i));\n       incr = TREE_VEC_ELT (OMP_FOR_INCR (t), i);\n       if (TREE_CODE (incr) == MODIFY_EXPR)\n-\tincr = build_x_modify_expr (RECUR (TREE_OPERAND (incr, 0)), NOP_EXPR,\n+\tincr = build_x_modify_expr (EXPR_LOCATION (incr),\n+\t\t\t\t    RECUR (TREE_OPERAND (incr, 0)), NOP_EXPR,\n \t\t\t\t    RECUR (TREE_OPERAND (incr, 1)),\n \t\t\t\t    complain);\n       else\n@@ -13638,7 +13641,8 @@ tsubst_copy_and_build (tree t,\n     case ARRAY_REF:\n       op1 = tsubst_non_call_postfix_expression (TREE_OPERAND (t, 0),\n \t\t\t\t\t\targs, complain, in_decl);\n-      return build_x_array_ref (op1, RECUR (TREE_OPERAND (t, 1)), complain);\n+      return build_x_array_ref (EXPR_LOCATION (t), op1,\n+\t\t\t\tRECUR (TREE_OPERAND (t, 1)), complain);\n \n     case SIZEOF_EXPR:\n       if (PACK_EXPANSION_P (TREE_OPERAND (t, 0)))\n@@ -13699,7 +13703,8 @@ tsubst_copy_and_build (tree t,\n     case MODOP_EXPR:\n       {\n \ttree r = build_x_modify_expr\n-\t  (RECUR (TREE_OPERAND (t, 0)),\n+\t  (EXPR_LOCATION (t),\n+\t   RECUR (TREE_OPERAND (t, 0)),\n \t   TREE_CODE (TREE_OPERAND (t, 1)),\n \t   RECUR (TREE_OPERAND (t, 2)),\n \t   complain);\n@@ -13783,7 +13788,8 @@ tsubst_copy_and_build (tree t,\n \tcomplain);\n \n     case COMPOUND_EXPR:\n-      return build_x_compound_expr (RECUR (TREE_OPERAND (t, 0)),\n+      return build_x_compound_expr (EXPR_LOCATION (t),\n+\t\t\t\t    RECUR (TREE_OPERAND (t, 0)),\n \t\t\t\t    RECUR (TREE_OPERAND (t, 1)),\n                                     complain);\n \n@@ -14023,7 +14029,8 @@ tsubst_copy_and_build (tree t,\n \t    exp2 = RECUR (TREE_OPERAND (t, 2));\n \t  }\n \n-\treturn build_x_conditional_expr (cond, exp1, exp2, complain);\n+\treturn build_x_conditional_expr (EXPR_LOCATION (t),\n+\t\t\t\t\t cond, exp1, exp2, complain);\n       }\n \n     case PSEUDO_DTOR_EXPR:"}, {"sha": "840784cc5df3e65c1de74522d2710aa3f8d83755", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 31, "deletions": 16, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee", "patch": "@@ -1498,7 +1498,8 @@ finish_mem_initializers (tree mem_inits)\n             TREE_VALUE (mem) = error_mark_node;\n         }\n \n-      add_stmt (build_min_nt (CTOR_INITIALIZER, mem_inits));\n+      add_stmt (build_min_nt_loc (UNKNOWN_LOCATION,\n+\t\t\t\t  CTOR_INITIALIZER, mem_inits));\n     }\n   else\n     emit_mem_initializers (mem_inits);\n@@ -4456,7 +4457,8 @@ handle_omp_for_class_iterator (int i, location_t locus, tree declv, tree initv,\n \tcond = error_mark_node;\n       else\n \t{\n-\t  tree tem = build_x_binary_op (input_location, TREE_CODE (cond),\n+\t  tree tem = build_x_binary_op (EXPR_LOCATION (cond),\n+\t\t\t\t\tTREE_CODE (cond),\n \t\t\t\t\titer, ERROR_MARK,\n \t\t\t\t\tTREE_OPERAND (cond, 1), ERROR_MARK,\n \t\t\t\t\tNULL, tf_warning_or_error);\n@@ -4473,7 +4475,7 @@ handle_omp_for_class_iterator (int i, location_t locus, tree declv, tree initv,\n       error_at (elocus, \"invalid controlling predicate\");\n       return true;\n     }\n-  diff = build_x_binary_op (input_location, MINUS_EXPR, TREE_OPERAND (cond, 1),\n+  diff = build_x_binary_op (elocus, MINUS_EXPR, TREE_OPERAND (cond, 1),\n \t\t\t    ERROR_MARK, iter, ERROR_MARK, NULL,\n \t\t\t    tf_warning_or_error);\n   if (error_operand_p (diff))\n@@ -4496,7 +4498,8 @@ handle_omp_for_class_iterator (int i, location_t locus, tree declv, tree initv,\n \t  incr = error_mark_node;\n \t  break;\n \t}\n-      iter_incr = build_x_unary_op (input_location, TREE_CODE (incr), iter,\n+      iter_incr = build_x_unary_op (EXPR_LOCATION (incr),\n+\t\t\t\t    TREE_CODE (incr), iter,\n \t\t\t\t    tf_warning_or_error);\n       if (error_operand_p (iter_incr))\n \treturn true;\n@@ -4520,7 +4523,8 @@ handle_omp_for_class_iterator (int i, location_t locus, tree declv, tree initv,\n \t\tincr = error_mark_node;\n \t      else\n \t\t{\n-\t\t  iter_incr = build_x_modify_expr (iter, TREE_CODE (rhs),\n+\t\t  iter_incr = build_x_modify_expr (EXPR_LOCATION (rhs),\n+\t\t\t\t\t\t   iter, TREE_CODE (rhs),\n \t\t\t\t\t\t   TREE_OPERAND (rhs, 1),\n \t\t\t\t\t\t   tf_warning_or_error);\n \t\t  if (error_operand_p (iter_incr))\n@@ -4546,14 +4550,16 @@ handle_omp_for_class_iterator (int i, location_t locus, tree declv, tree initv,\n \t\tincr = error_mark_node;\n \t      else\n \t\t{\n-\t\t  iter_incr = build_x_binary_op (input_location, PLUS_EXPR,\n+\t\t  iter_incr = build_x_binary_op (EXPR_LOCATION (rhs),\n+\t\t\t\t\t\t PLUS_EXPR,\n \t\t\t\t\t\t TREE_OPERAND (rhs, 0),\n \t\t\t\t\t\t ERROR_MARK, iter,\n \t\t\t\t\t\t ERROR_MARK, NULL,\n \t\t\t\t\t\t tf_warning_or_error);\n \t\t  if (error_operand_p (iter_incr))\n \t\t    return true;\n-\t\t  iter_incr = build_x_modify_expr (iter, NOP_EXPR,\n+\t\t  iter_incr = build_x_modify_expr (EXPR_LOCATION (rhs),\n+\t\t\t\t\t\t   iter, NOP_EXPR,\n \t\t\t\t\t\t   iter_incr,\n \t\t\t\t\t\t   tf_warning_or_error);\n \t\t  if (error_operand_p (iter_incr))\n@@ -4604,18 +4610,22 @@ handle_omp_for_class_iterator (int i, location_t locus, tree declv, tree initv,\n   if (orig_pre_body)\n     add_stmt (orig_pre_body);\n   if (init != NULL)\n-    finish_expr_stmt (build_x_modify_expr (iter, NOP_EXPR, init,\n+    finish_expr_stmt (build_x_modify_expr (elocus,\n+\t\t\t\t\t   iter, NOP_EXPR, init,\n \t\t\t\t\t   tf_warning_or_error));\n   init = build_int_cst (TREE_TYPE (diff), 0);\n   if (c && iter_incr == NULL)\n     {\n-      finish_expr_stmt (build_x_modify_expr (incr_var, NOP_EXPR,\n+      finish_expr_stmt (build_x_modify_expr (elocus,\n+\t\t\t\t\t     incr_var, NOP_EXPR,\n \t\t\t\t\t     incr, tf_warning_or_error));\n       incr = incr_var;\n-      iter_incr = build_x_modify_expr (iter, PLUS_EXPR, incr,\n+      iter_incr = build_x_modify_expr (elocus,\n+\t\t\t\t       iter, PLUS_EXPR, incr,\n \t\t\t\t       tf_warning_or_error);\n     }\n-  finish_expr_stmt (build_x_modify_expr (last, NOP_EXPR, init,\n+  finish_expr_stmt (build_x_modify_expr (elocus,\n+\t\t\t\t\t last, NOP_EXPR, init,\n \t\t\t\t\t tf_warning_or_error));\n   *pre_body = pop_stmt_list (*pre_body);\n \n@@ -4628,11 +4638,13 @@ handle_omp_for_class_iterator (int i, location_t locus, tree declv, tree initv,\n   orig_body = *body;\n   *body = push_stmt_list ();\n   iter_init = build2 (MINUS_EXPR, TREE_TYPE (diff), decl, last);\n-  iter_init = build_x_modify_expr (iter, PLUS_EXPR, iter_init,\n+  iter_init = build_x_modify_expr (elocus,\n+\t\t\t\t   iter, PLUS_EXPR, iter_init,\n \t\t\t\t   tf_warning_or_error);\n   iter_init = build1 (NOP_EXPR, void_type_node, iter_init);\n   finish_expr_stmt (iter_init);\n-  finish_expr_stmt (build_x_modify_expr (last, NOP_EXPR, decl,\n+  finish_expr_stmt (build_x_modify_expr (elocus,\n+\t\t\t\t\t last, NOP_EXPR, decl,\n \t\t\t\t\t tf_warning_or_error));\n   add_stmt (orig_body);\n   *body = pop_stmt_list (*body);\n@@ -4939,7 +4951,8 @@ finish_omp_atomic (enum tree_code code, enum tree_code opcode, tree lhs,\n     {\n       if (code == OMP_ATOMIC_READ)\n \t{\n-\t  stmt = build_min_nt (OMP_ATOMIC_READ, orig_lhs);\n+\t  stmt = build_min_nt_loc (EXPR_LOCATION (orig_lhs),\n+\t\t\t\t   OMP_ATOMIC_READ, orig_lhs);\n \t  stmt = build2 (MODIFY_EXPR, void_type_node, orig_v, stmt);\n \t}\n       else\n@@ -4949,10 +4962,12 @@ finish_omp_atomic (enum tree_code code, enum tree_code opcode, tree lhs,\n \t  else \n \t    stmt = build2 (opcode, void_type_node, orig_lhs, orig_rhs);\n \t  if (orig_rhs1)\n-\t    stmt = build_min_nt (COMPOUND_EXPR, orig_rhs1, stmt);\n+\t    stmt = build_min_nt_loc (EXPR_LOCATION (orig_rhs1),\n+\t\t\t\t     COMPOUND_EXPR, orig_rhs1, stmt);\n \t  if (code != OMP_ATOMIC)\n \t    {\n-\t      stmt = build_min_nt (code, orig_lhs1, stmt);\n+\t      stmt = build_min_nt_loc (EXPR_LOCATION (orig_lhs1),\n+\t\t\t\t       code, orig_lhs1, stmt);\n \t      stmt = build2 (MODIFY_EXPR, void_type_node, orig_v, stmt);\n \t    }\n \t}"}, {"sha": "7c59105b9ce09d4f21e438d3dd42ac28acc293c9", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee", "patch": "@@ -2025,7 +2025,7 @@ break_out_target_exprs (tree t)\n    expressions  */\n \n tree\n-build_min_nt (enum tree_code code, ...)\n+build_min_nt_loc (location_t loc, enum tree_code code, ...)\n {\n   tree t;\n   int length;\n@@ -2037,6 +2037,7 @@ build_min_nt (enum tree_code code, ...)\n   va_start (p, code);\n \n   t = make_node (code);\n+  SET_EXPR_LOCATION (t, loc);\n   length = TREE_CODE_LENGTH (code);\n \n   for (i = 0; i < length; i++)"}, {"sha": "92794ea77a25c5b0e11c247e34bcfab99a4b6a27", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 30, "deletions": 25, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee", "patch": "@@ -2536,7 +2536,8 @@ finish_class_member_access_expr (tree object, tree name, bool template_p,\n \t  || (TREE_CODE (name) == SCOPE_REF\n \t      && TYPE_P (TREE_OPERAND (name, 0))\n \t      && dependent_type_p (TREE_OPERAND (name, 0))))\n-\treturn build_min_nt (COMPONENT_REF, object, name, NULL_TREE);\n+\treturn build_min_nt_loc (UNKNOWN_LOCATION, COMPONENT_REF,\n+\t\t\t\t object, name, NULL_TREE);\n       object = build_non_dependent_expr (object);\n     }\n   else if (c_dialect_objc ()\n@@ -2743,7 +2744,7 @@ build_x_indirect_ref (location_t loc, tree expr, ref_operator errorstring,\n       if (TREE_TYPE (expr) && POINTER_TYPE_P (TREE_TYPE (expr)))\n \treturn build_min (INDIRECT_REF, TREE_TYPE (TREE_TYPE (expr)), expr);\n       if (type_dependent_expression_p (expr))\n-\treturn build_min_nt (INDIRECT_REF, expr);\n+\treturn build_min_nt_loc (loc, INDIRECT_REF, expr);\n       expr = build_non_dependent_expr (expr);\n     }\n \n@@ -3597,7 +3598,7 @@ build_x_binary_op (location_t loc, enum tree_code code, tree arg1,\n     {\n       if (type_dependent_expression_p (arg1)\n \t  || type_dependent_expression_p (arg2))\n-\treturn build_min_nt (code, arg1, arg2);\n+\treturn build_min_nt_loc (loc, code, arg1, arg2);\n       arg1 = build_non_dependent_expr (arg1);\n       arg2 = build_non_dependent_expr (arg2);\n     }\n@@ -3629,7 +3630,8 @@ build_x_binary_op (location_t loc, enum tree_code code, tree arg1,\n /* Build and return an ARRAY_REF expression.  */\n \n tree\n-build_x_array_ref (tree arg1, tree arg2, tsubst_flags_t complain)\n+build_x_array_ref (location_t loc, tree arg1, tree arg2,\n+\t\t   tsubst_flags_t complain)\n {\n   tree orig_arg1 = arg1;\n   tree orig_arg2 = arg2;\n@@ -3639,14 +3641,14 @@ build_x_array_ref (tree arg1, tree arg2, tsubst_flags_t complain)\n     {\n       if (type_dependent_expression_p (arg1)\n \t  || type_dependent_expression_p (arg2))\n-\treturn build_min_nt (ARRAY_REF, arg1, arg2,\n-\t\t\t     NULL_TREE, NULL_TREE);\n+\treturn build_min_nt_loc (loc, ARRAY_REF, arg1, arg2,\n+\t\t\t\t NULL_TREE, NULL_TREE);\n       arg1 = build_non_dependent_expr (arg1);\n       arg2 = build_non_dependent_expr (arg2);\n     }\n \n-  expr = build_new_op (input_location, ARRAY_REF, LOOKUP_NORMAL, arg1,\n-\t\t       arg2, NULL_TREE, /*overload=*/NULL, complain);\n+  expr = build_new_op (loc, ARRAY_REF, LOOKUP_NORMAL, arg1, arg2,\n+\t\t       NULL_TREE, /*overload=*/NULL, complain);\n \n   if (processing_template_decl && expr != error_mark_node)\n     return build_min_non_dep (ARRAY_REF, expr, orig_arg1, orig_arg2,\n@@ -4671,7 +4673,7 @@ build_x_unary_op (location_t loc, enum tree_code code, tree xarg,\n   if (processing_template_decl)\n     {\n       if (type_dependent_expression_p (xarg))\n-\treturn build_min_nt (code, xarg, NULL_TREE);\n+\treturn build_min_nt_loc (loc, code, xarg, NULL_TREE);\n \n       xarg = build_non_dependent_expr (xarg);\n     }\n@@ -5586,7 +5588,7 @@ cxx_mark_addressable (tree exp)\n /* Build and return a conditional expression IFEXP ? OP1 : OP2.  */\n \n tree\n-build_x_conditional_expr (tree ifexp, tree op1, tree op2, \n+build_x_conditional_expr (location_t loc, tree ifexp, tree op1, tree op2, \n                           tsubst_flags_t complain)\n {\n   tree orig_ifexp = ifexp;\n@@ -5603,7 +5605,7 @@ build_x_conditional_expr (tree ifexp, tree op1, tree op2,\n \t  /* As a GNU extension, the middle operand may be omitted.  */\n \t  || (op1 && type_dependent_expression_p (op1))\n \t  || type_dependent_expression_p (op2))\n-\treturn build_min_nt (COND_EXPR, ifexp, op1, op2);\n+\treturn build_min_nt_loc (loc, COND_EXPR, ifexp, op1, op2);\n       ifexp = build_non_dependent_expr (ifexp);\n       if (op1)\n \top1 = build_non_dependent_expr (op1);\n@@ -5670,8 +5672,8 @@ build_x_compound_expr_from_list (tree list, expr_list_kind exp,\n \treturn error_mark_node;\n \n       for (list = TREE_CHAIN (list); list; list = TREE_CHAIN (list))\n-\texpr = build_x_compound_expr (expr, TREE_VALUE (list), \n-                                      complain);\n+\texpr = build_x_compound_expr (EXPR_LOCATION (TREE_VALUE (list)),\n+\t\t\t\t      expr, TREE_VALUE (list), complain);\n     }\n \n   return expr;\n@@ -5699,7 +5701,8 @@ build_x_compound_expr_from_vec (VEC(tree,gc) *vec, const char *msg)\n \n       expr = VEC_index (tree, vec, 0);\n       for (ix = 1; VEC_iterate (tree, vec, ix, t); ++ix)\n-\texpr = build_x_compound_expr (expr, t, tf_warning_or_error);\n+\texpr = build_x_compound_expr (EXPR_LOCATION (t), expr,\n+\t\t\t\t      t, tf_warning_or_error);\n \n       return expr;\n     }\n@@ -5708,7 +5711,8 @@ build_x_compound_expr_from_vec (VEC(tree,gc) *vec, const char *msg)\n /* Handle overloading of the ',' operator when needed.  */\n \n tree\n-build_x_compound_expr (tree op1, tree op2, tsubst_flags_t complain)\n+build_x_compound_expr (location_t loc, tree op1, tree op2,\n+\t\t       tsubst_flags_t complain)\n {\n   tree result;\n   tree orig_op1 = op1;\n@@ -5718,13 +5722,13 @@ build_x_compound_expr (tree op1, tree op2, tsubst_flags_t complain)\n     {\n       if (type_dependent_expression_p (op1)\n \t  || type_dependent_expression_p (op2))\n-\treturn build_min_nt (COMPOUND_EXPR, op1, op2);\n+\treturn build_min_nt_loc (loc, COMPOUND_EXPR, op1, op2);\n       op1 = build_non_dependent_expr (op1);\n       op2 = build_non_dependent_expr (op2);\n     }\n \n-  result = build_new_op (input_location, COMPOUND_EXPR, LOOKUP_NORMAL,\n-\t\t\t op1, op2, NULL_TREE, /*overload=*/NULL, complain);\n+  result = build_new_op (loc, COMPOUND_EXPR, LOOKUP_NORMAL, op1, op2,\n+\t\t\t NULL_TREE, /*overload=*/NULL, complain);\n   if (!result)\n     result = cp_build_compound_expr (op1, op2, complain);\n \n@@ -7105,18 +7109,19 @@ cp_build_modify_expr (tree lhs, enum tree_code modifycode, tree rhs,\n }\n \n tree\n-build_x_modify_expr (tree lhs, enum tree_code modifycode, tree rhs,\n-\t\t     tsubst_flags_t complain)\n+build_x_modify_expr (location_t loc, tree lhs, enum tree_code modifycode,\n+\t\t     tree rhs, tsubst_flags_t complain)\n {\n   if (processing_template_decl)\n-    return build_min_nt (MODOP_EXPR, lhs,\n-\t\t\t build_min_nt (modifycode, NULL_TREE, NULL_TREE), rhs);\n+    return build_min_nt_loc (loc, MODOP_EXPR, lhs,\n+\t\t\t     build_min_nt_loc (loc, modifycode, NULL_TREE,\n+\t\t\t\t\t       NULL_TREE), rhs);\n \n   if (modifycode != NOP_EXPR)\n     {\n-      tree rval = build_new_op (input_location, MODIFY_EXPR, LOOKUP_NORMAL,\n-\t\t\t\tlhs, rhs, make_node (modifycode),\n-\t\t\t\t/*overload=*/NULL, complain);\n+      tree rval = build_new_op (loc, MODIFY_EXPR, LOOKUP_NORMAL, lhs, rhs,\n+\t\t\t\tmake_node (modifycode), /*overload=*/NULL,\n+\t\t\t\tcomplain);\n       if (rval)\n \t{\n \t  TREE_NO_WARNING (rval) = 1;"}, {"sha": "b953287398d7d308da7faf1ab7f616d4492c9415", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee", "patch": "@@ -1484,7 +1484,7 @@ build_x_arrow (location_t loc, tree expr, tsubst_flags_t complain)\n   if (processing_template_decl)\n     {\n       if (type_dependent_expression_p (expr))\n-\treturn build_min_nt (ARROW_EXPR, expr);\n+\treturn build_min_nt_loc (loc, ARROW_EXPR, expr);\n       expr = build_non_dependent_expr (expr);\n     }\n "}, {"sha": "b3072637a42c750560f780396579cd1e032479a1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee", "patch": "@@ -1,6 +1,13 @@\n-2012-05-16  Patrick Marlier  <patrick.marlier@gmail.com> \n+2012-05-17  Paolo Carlini  <paolo.carlini@oracle.com>\n \n-\t* gcc.dg/tm/indirect-2.c: New test. \n+\tPR c++/44516\n+\t* g++.dg/parse/error48.C: New.\n+\t* g++.dg/template/crash89.C: Adjust dg-error line numbers.\n+\t* g++.old-deja/g++.robertl/eb109.C: Add column info to dg-error string.\n+\n+2012-05-16  Patrick Marlier  <patrick.marlier@gmail.com>\n+\n+\t* gcc.dg/tm/indirect-2.c: New test.\n \n 2012-05-16  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n "}, {"sha": "8f26bed9c20ca83c69d4bab0ea473dc1841cc99d", "filename": "gcc/testsuite/g++.dg/parse/error48.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror48.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror48.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror48.C?ref=f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/44516\n+\n+struct WebService {  };\n+struct Server {  };\n+\n+void addHTTPService(Server const &server,\n+\t\t    WebService const *http)\n+{\n+  server += http; // { dg-error \"10:no match for 'operator\\\\+='\" }\n+}"}, {"sha": "f860018621ef6df7b2fe33fc6ea6bb15d6c07088", "filename": "gcc/testsuite/g++.dg/template/crash89.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash89.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash89.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash89.C?ref=f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee", "patch": "@@ -1,8 +1,8 @@\n // PR c++/34397\n \n-template<typename T, int = T()[0]> struct A\n+template<typename T, int = T()[0]> struct A // { dg-error \"subscripted|template\" }\n {\n   typedef A<T> B;\n };\n \n-A<int> a; // { dg-error \"subscripted|template|declaration\" }\n+A<int> a; // { dg-error \"declaration\" }"}, {"sha": "b44c33d273c951b4505dd80bc4211deb783aa24f", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb109.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb109.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb109.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb109.C?ref=f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee", "patch": "@@ -44,16 +44,16 @@ ostream& operator<<(ostream& os, Graph<VertexType,EdgeType>& G)\n     // display of vertices with successors\n   for(int i = 0; i < G.size(); ++i)  // { dg-error \"no member\" } no size function\n     {\n-      os << G[i].first << \" <\";      // { dg-error \"no match\" } no index operator\n+      os << G[i].first << \" <\";      // { dg-error \"14:no match\" } no index operator\n \n         // The compiler does not like this line!!!!!!\n         typename Graph<VertexType, EdgeType>::Successor::iterator\n-\t  startN = G[i].second.begin(), // { dg-error \"no match\" } no index operator\n-\t  endN   = G[i].second.end();  // { dg-error \"no match\" } no index operator\n+\t  startN = G[i].second.begin(), // { dg-error \"14:no match\" } no index operator\n+\t  endN   = G[i].second.end();  // { dg-error \"14:no match\" } no index operator\n \n         while(startN != endN)\n         {\n-            os << G[(*startN).first].first << ' ' // { dg-error \"no match\" } no index operator\n+            os << G[(*startN).first].first << ' ' // { dg-error \"20:no match\" } no index operator\n                << (*startN).second << ' ';\n             ++startN;\n         }"}, {"sha": "85427ecdcb3659c19b971f5df007bcb7342d090b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee", "patch": "@@ -1,3 +1,9 @@\n+2012-05-17  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/44516\n+\t* testsuite/20_util/ratio/cons/cons_overflow_neg.cc: Adjust\n+\tdg-error line number.\n+\n 2012-05-16  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* configure: Regenerated."}, {"sha": "a6881dbcf82045ede2bdb9704e4beb89ef35877e", "filename": "libstdc++-v3/testsuite/20_util/ratio/cons/cons_overflow_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow_neg.cc?ref=f330f5991ef0182d59ab6b5b1c31f3bd5cb125ee", "patch": "@@ -2,7 +2,7 @@\n // { dg-options \"-std=gnu++0x\" }\n // { dg-require-cstdint \"\" }\n \n-// Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation\n+// Copyright (C) 2008, 2009, 2010, 2011, 2012 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -51,5 +51,5 @@ test04()\n // { dg-error \"required from here\" \"\" { target *-*-* } 46 }\n // { dg-error \"denominator cannot be zero\" \"\" { target *-*-* } 265 }\n // { dg-error \"out of range\" \"\" { target *-*-* } 266 }\n-// { dg-error \"overflow in constant expression\" \"\" { target *-*-* } 61 }\n+// { dg-error \"overflow in constant expression\" \"\" { target *-*-* } 62 }\n // { dg-prune-output \"not a member\" }"}]}