{"sha": "a3ea913742c1c47f2c774b65480eaea72e8bc2de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNlYTkxMzc0MmMxYzQ3ZjJjNzc0YjY1NDgwZWFlYTcyZThiYzJkZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-08T13:00:00Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-08T13:00:00Z"}, "message": "gnat_ugn.texi: The \"Run-Time Checks\" section said \"arithmetic overflow checking for integer...\n\n2008-08-08  Bob Duff  <duff@adacore.com>\n\n\t* gnat_ugn.texi: The \"Run-Time Checks\" section said \"arithmetic overflow\n\tchecking for integer operations (including division by zero)\", which\n\tis wrong -- divide by zero is not part of overflow checking.\n\tAlso added misc clarification about what check-suppression means.\n\n\t* gnat_rm.texi: Clarify the meaning of pragma Suppress.\n\nFrom-SVN: r138879", "tree": {"sha": "f8c967e18227f6fca200a1c4420eb7e07fa418de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8c967e18227f6fca200a1c4420eb7e07fa418de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3ea913742c1c47f2c774b65480eaea72e8bc2de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3ea913742c1c47f2c774b65480eaea72e8bc2de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3ea913742c1c47f2c774b65480eaea72e8bc2de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3ea913742c1c47f2c774b65480eaea72e8bc2de/comments", "author": null, "committer": null, "parents": [{"sha": "e8c4584bd79f5b0f07d91b5f144a7b8d9721cb5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8c4584bd79f5b0f07d91b5f144a7b8d9721cb5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8c4584bd79f5b0f07d91b5f144a7b8d9721cb5e"}], "stats": {"total": 127, "additions": 103, "deletions": 24}, "files": [{"sha": "3d047f07f99972d59222c259d6036d6be1eb0e66", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ea913742c1c47f2c774b65480eaea72e8bc2de/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ea913742c1c47f2c774b65480eaea72e8bc2de/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a3ea913742c1c47f2c774b65480eaea72e8bc2de", "patch": "@@ -1,3 +1,51 @@\n+2008-08-08  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* gsocket.h:\n+\tOn Windows, include <errno.h> and redefine only selected errno values\n+\tfrom their <winsock2.h> definitions.\n+\n+\t* s-osinte-freebsd.ads: Minor reformatting\n+\n+\t* s-osinte-hpux.ads, s-osinte-irix.ads: Minor reformatting\n+\n+\t* g-soccon.ads: New file.\n+\n+\t* g-stheme.adb, g-socthi-vms.adb, g-socthi-vxworks.adb,\n+\tg-socthi-mingw.adb, g-sttsne-vxworks.adb, g-socthi.adb,\n+\tg-stsifd-sockets.adb, g-socket.adb, g-socket.ads,\n+\tg-sothco.adb, g-sothco.ads: Add back GNAT.Sockets.Constants as a child\n+\tunit, to allow building software that depends on this internal unit\n+\twith both older and newer compilers.\n+\n+2008-08-08  Robert Dewar  <dewar@adacore.com>\n+\n+\t* s-strxdr.adb: Minor reformatting\n+\n+2008-08-08  Bob Duff  <duff@adacore.com>\n+\n+\t* gnat_ugn.texi: The \"Run-Time Checks\" section said \"arithmetic overflow\n+\tchecking for integer operations (including division by zero)\", which\n+\tis wrong -- divide by zero is not part of overflow checking.\n+\tAlso added misc clarification about what check-suppression means.\n+\n+\t* gnat_rm.texi: Clarify the meaning of pragma Suppress.\n+\n+2008-08-08  Jerome Lambourg  <lambourg@adacore.com>\n+\n+\t* g-comlin.adb (Add_Switch): Handle addition of switches at the\n+\tbegining of the command line.\n+\t(Append, Add): Renaming of Append to Add as this now allows addition\n+\tat the begining of the list.\n+\t\n+\t* g-comlin.ads (Add_Switch): Handle addition of switches at the\n+\tbegining of the command line.\n+\n+2008-08-08  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* g-sercom.ads:\n+\t(Name): Document application scope (only legacy PC serial ports on\n+\tLinux and Windows).\n+\n 2008-08-08  Thomas Quinot  <quinot@adacore.com>\n \n \t* gcc-interface/Makefile.in, gcc-interface/Make-lang.in: Revert"}, {"sha": "a768528d40bb663d7f218c1c7c26c19796ed121a", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ea913742c1c47f2c774b65480eaea72e8bc2de/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ea913742c1c47f2c774b65480eaea72e8bc2de/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=a3ea913742c1c47f2c774b65480eaea72e8bc2de", "patch": "@@ -3413,7 +3413,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Obsolescent\n-  (Entity => NAME [, static_string_EXPRESSION [,Ada_05]]);\n+  [(Entity => NAME [, static_string_EXPRESSION [,Ada_05]])];\n @end smallexample\n \n @noindent\n@@ -4447,6 +4447,17 @@ on addresses used in address clauses. Such checks can also be suppressed\n by suppressing range checks, but the specific use of @code{Alignment_Check}\n allows suppression of alignment checks without suppressing other range checks.\n \n+Note that pragma Suppress gives the compiler permission to omit\n+checks, but does not require the compiler to omit checks. The compiler\n+will generate checks if they are essentially free, even when they are\n+suppressed. In particular, if the compiler can prove that a certain\n+check will necessarily fail, it will generate code to do an\n+unconditional ``raise'', even if checks are suppressed. The compiler\n+warns in this case.\n+\n+Of course, run-time checks are omitted whenever the compiler can prove\n+that they will not fail, whether or not checks are suppressed.\n+\n @node Pragma Suppress_All\n @unnumberedsec Pragma Suppress_All\n @findex Suppress_All"}, {"sha": "5918edda65b52c83ac10183fc7f2f8a1f98af868", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 43, "deletions": 23, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ea913742c1c47f2c774b65480eaea72e8bc2de/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ea913742c1c47f2c774b65480eaea72e8bc2de/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=a3ea913742c1c47f2c774b65480eaea72e8bc2de", "patch": "@@ -4022,12 +4022,12 @@ catches that cannot be dealt with in the front-end.\n @item -gnato\n @cindex @option{-gnato} (@command{gcc})\n Enable numeric overflow checking (which is not normally enabled by\n-default). Not that division by zero is a separate check that is not\n+default). Note that division by zero is a separate check that is not\n controlled by this switch (division by zero checking is on by default).\n \n @item -gnatp\n @cindex @option{-gnatp} (@command{gcc})\n-Suppress all checks.\n+Suppress all checks. See @ref{Run-Time Checks} for details.\n \n @item -gnatP\n @cindex @option{-gnatP} (@command{gcc})\n@@ -6222,14 +6222,11 @@ clears any previously set style checks.\n @cindex Checks, stack overflow checking\n \n @noindent\n-If you compile with the default options, GNAT will insert many run-time\n-checks into the compiled code, including code that performs range\n-checking against constraints, but not arithmetic overflow checking for\n-integer operations (including division by zero), checks for access\n-before elaboration on subprogram calls, or stack overflow checking. All\n-other run-time checks, as required by the Ada Reference Manual, are\n-generated by default. The following @command{gcc} switches refine this\n-default behavior:\n+By default, the following checks are suppressed: integer overflow\n+checks, stack overflow checks, and checks for access before\n+elaboration on subprogram calls. All other checks, including range\n+checks and array bounds checks, are turned on by default. The\n+following @command{gcc} switches refine this default behavior.\n \n @table @option\n @c !sort!\n@@ -6238,13 +6235,33 @@ default behavior:\n @cindex Suppressing checks\n @cindex Checks, suppressing\n @findex Suppress\n-Suppress all run-time checks as though @code{pragma Suppress (all_checks})\n+Suppress all run-time checks as though @code{pragma Suppress (All_checks)}\n had been present in the source. Validity checks are also suppressed (in\n other words @option{-gnatp} also implies @option{-gnatVn}.\n Use this switch to improve the performance\n of the code at the expense of safety in the presence of invalid data or\n program bugs.\n \n+Note that when checks are suppressed, the compiler is allowed, but not\n+required, to omit the checking code. If the run-time cost of the\n+checking code is zero or near-zero, the compiler will generate it even\n+if checks are suppressed. In particular, if the compiler can prove\n+that a certain check will necessarily fail, it will generate code to\n+do an unconditional ``raise'', even if checks are suppressed. The\n+compiler warns in this case.\n+\n+Of course, run-time checks are omitted whenever the compiler can prove\n+that they will not fail, whether or not checks are suppressed.\n+\n+Note that if you suppress a check that would have failed, program\n+execution is erroneous, which means the behavior is totally\n+unpredictable. The program might crash, or print wrong answers, or\n+do anything else. It might even do exactly what you wanted it to do\n+(and then it might start failing mysteriously next week or next\n+year). The compiler will generate code based on the assumption that\n+the condition being checked is true, which can result in disaster if\n+that assumption is wrong.\n+\n @item -gnato\n @cindex @option{-gnato} (@command{gcc})\n @cindex Overflow checks\n@@ -6271,22 +6288,23 @@ X4 := Integer (F);\n @end smallexample\n \n @noindent\n-Note that if explicit values are assigned at compile time, the compiler may\n-be able to detect overflow at compile time, in which case no run-time check\n-is required, and the setting of -gnato is irrelevant. That's why the assigned\n-values in the above fragment are in quotes, the meaning is \"assign a value\n-not known to the compiler that happens to be equal to ...\". The remaining\n-discussion assumes that the compiler cannot detect the values at compile time.\n+Note that if explicit values are assigned at compile time, the\n+compiler may be able to detect overflow at compile time, in which case\n+no actual run-time checking code is required, and Constraint_Error\n+will be raised unconditionally, with or without\n+@option{-gnato}. That's why the assigned values in the above fragment\n+are in quotes, the meaning is \"assign a value not known to the\n+compiler that happens to be equal to ...\". The remaining discussion\n+assumes that the compiler cannot detect the values at compile time.\n \n Here the first addition results in a value that is outside the base range\n of Integer, and hence requires an overflow check for detection of the\n constraint error. Thus the first assignment to @code{X1} raises a\n @code{Constraint_Error} exception only if @option{-gnato} is set.\n \n-The second increment operation results in a violation\n-of the explicit range constraint, and such range checks are always\n-performed (unless specifically suppressed with a pragma @code{suppress}\n-or the use of @option{-gnatp}).\n+The second increment operation results in a violation of the explicit\n+range constraint; such range checks are performed by default, and are\n+unaffected by @option{-gnato}.\n \n The two conversions of @code{F} both result in values that are outside\n the base range of type @code{Integer} and thus will raise\n@@ -6342,6 +6360,8 @@ explicitly use the -gnato switch either on the @command{gnatmake} or\n @cindex Check, elaboration\n Enables dynamic checks for access-before-elaboration\n on subprogram calls and generic instantiations.\n+Note that @option{-gnatE} is not necessary for safety, because in the\n+default mode, GNAT ensures statically that the checks would not fail.\n For full details of the effect and use of this switch,\n @xref{Compiling Using gcc}.\n \n@@ -9548,8 +9568,8 @@ some guidelines on debugging optimized code.\n @subsection Controlling Run-Time Checks\n \n @noindent\n-By default, GNAT generates all run-time checks, except arithmetic overflow\n-checking for integer operations and checks for access before elaboration on\n+By default, GNAT generates all run-time checks, except integer overflow\n+checks, stack overflow checks, and checks for access before elaboration on\n subprogram calls. The latter are not required in default mode, because all\n necessary checking is done at compile time.\n @cindex @option{-gnatp} (@command{gcc})"}]}