{"sha": "7e20f4b022dd4acd8ce6abc63ab9c02fe25707fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2UyMGY0YjAyMmRkNGFjZDhjZTZhYmM2M2FiOWMwMmZlMjU3MDdmYQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2013-04-05T10:03:04Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2013-04-05T10:03:04Z"}, "message": "re PR libstdc++/56841 (ld: Unsatisfied symbol \"__atomic_exchange_8\" in file /test/gnu/gcc/objdir/prev-hppa64-hp-hpux11.11/libstdc++-v3/src/.libs/libstdc++.a[eh_terminate.o])\n\n\tPR libstdc++/56841\n\t* libsupc++/eh_ptr.cc (rethrow_exception): Use get_unexpected() and\n\tget_terminate() accessors.\n\t* libsupc++/eh_throw.cc (__cxa_throw): Likewise.\n\t* libsupc++/eh_terminate.cc: Use mutex when atomic builtins not\n\tavailable.\n\t* libsupc++/new_handler.cc: Likewise.\n\nFrom-SVN: r197512", "tree": {"sha": "2b3dd0c1dfe48cc07dd8c4ecc3ce2433b45844d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b3dd0c1dfe48cc07dd8c4ecc3ce2433b45844d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e20f4b022dd4acd8ce6abc63ab9c02fe25707fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e20f4b022dd4acd8ce6abc63ab9c02fe25707fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e20f4b022dd4acd8ce6abc63ab9c02fe25707fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e20f4b022dd4acd8ce6abc63ab9c02fe25707fa/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "526c230f1ec8c68897fd429dce098171b51e745d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/526c230f1ec8c68897fd429dce098171b51e745d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/526c230f1ec8c68897fd429dce098171b51e745d"}], "stats": {"total": 69, "additions": 65, "deletions": 4}, "files": [{"sha": "bbd285c4069c2bbd4016c4614ea288f776b31a05", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e20f4b022dd4acd8ce6abc63ab9c02fe25707fa/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e20f4b022dd4acd8ce6abc63ab9c02fe25707fa/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7e20f4b022dd4acd8ce6abc63ab9c02fe25707fa", "patch": "@@ -1,3 +1,13 @@\n+2013-04-05  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/56841\n+\t* libsupc++/eh_ptr.cc (rethrow_exception): Use get_unexpected() and\n+\tget_terminate() accessors.\n+\t* libsupc++/eh_throw.cc (__cxa_throw): Likewise.\n+\t* libsupc++/eh_terminate.cc: Use mutex when atomic builtins not\n+\tavailable.\n+\t* libsupc++/new_handler.cc: Likewise.\n+\n 2013-04-04  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* testsuite/util/testsuite_abi.cc: Add GLIBCXX_3.4.19 version."}, {"sha": "6bc3311020c877dd758517965ad82b307e43acb4", "filename": "libstdc++-v3/libsupc++/eh_ptr.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e20f4b022dd4acd8ce6abc63ab9c02fe25707fa/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e20f4b022dd4acd8ce6abc63ab9c02fe25707fa/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc?ref=7e20f4b022dd4acd8ce6abc63ab9c02fe25707fa", "patch": "@@ -212,8 +212,8 @@ std::rethrow_exception(std::exception_ptr ep)\n   dep->primaryException = obj;\n   __atomic_add_fetch (&eh->referenceCount, 1,  __ATOMIC_ACQ_REL);\n \n-  dep->unexpectedHandler = __unexpected_handler;\n-  dep->terminateHandler = __terminate_handler;\n+  dep->unexpectedHandler = get_unexpected ();\n+  dep->terminateHandler = get_terminate ();\n   __GXX_INIT_DEPENDENT_EXCEPTION_CLASS(dep->unwindHeader.exception_class);\n   dep->unwindHeader.exception_cleanup = __gxx_dependent_exception_cleanup;\n "}, {"sha": "b31d2e27f05d25d542f3efb9a016c848de4a4c27", "filename": "libstdc++-v3/libsupc++/eh_terminate.cc", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e20f4b022dd4acd8ce6abc63ab9c02fe25707fa/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_terminate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e20f4b022dd4acd8ce6abc63ab9c02fe25707fa/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_terminate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_terminate.cc?ref=7e20f4b022dd4acd8ce6abc63ab9c02fe25707fa", "patch": "@@ -27,6 +27,15 @@\n #include <cstdlib>\n #include \"unwind-cxx.h\"\n #include <bits/exception_defines.h>\n+#include <bits/atomic_lockfree_defines.h>\n+\n+#if ATOMIC_POINTER_LOCK_FREE < 2\n+#include <ext/concurrence.h>\n+namespace\n+{\n+  __gnu_cxx::__mutex mx;\n+}\n+#endif\n \n using namespace __cxxabiv1;\n \n@@ -65,30 +74,52 @@ std::terminate_handler\n std::set_terminate (std::terminate_handler func) throw()\n {\n   std::terminate_handler old;\n+#if ATOMIC_POINTER_LOCK_FREE > 1\n   __atomic_exchange (&__terminate_handler, &func, &old, __ATOMIC_ACQ_REL);\n+#else\n+  __gnu_cxx::__scoped_lock l(mx);\n+  old = __terminate_handler;\n+  __terminate_handler = func;\n+#endif\n   return old;\n }\n \n std::terminate_handler\n std::get_terminate () noexcept\n {\n   std::terminate_handler func;\n+#if ATOMIC_POINTER_LOCK_FREE > 1\n   __atomic_load (&__terminate_handler, &func, __ATOMIC_ACQUIRE);\n+#else\n+  __gnu_cxx::__scoped_lock l(mx);\n+  func = __terminate_handler;\n+#endif\n   return func;\n }\n \n std::unexpected_handler\n std::set_unexpected (std::unexpected_handler func) throw()\n {\n   std::unexpected_handler old;\n+#if ATOMIC_POINTER_LOCK_FREE > 1\n   __atomic_exchange (&__unexpected_handler, &func, &old, __ATOMIC_ACQ_REL);\n+#else\n+  __gnu_cxx::__scoped_lock l(mx);\n+  old = __unexpected_handler;\n+  __unexpected_handler = func;\n+#endif\n   return old;\n }\n \n std::unexpected_handler\n std::get_unexpected () noexcept\n {\n   std::unexpected_handler func;\n+#if ATOMIC_POINTER_LOCK_FREE > 1\n   __atomic_load (&__unexpected_handler, &func, __ATOMIC_ACQUIRE);\n+#else\n+  __gnu_cxx::__scoped_lock l(mx);\n+  func = __unexpected_handler;\n+#endif\n   return func;\n }"}, {"sha": "5d376983215d120d9bd54c5280224a461500cfc1", "filename": "libstdc++-v3/libsupc++/eh_throw.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e20f4b022dd4acd8ce6abc63ab9c02fe25707fa/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e20f4b022dd4acd8ce6abc63ab9c02fe25707fa/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_throw.cc?ref=7e20f4b022dd4acd8ce6abc63ab9c02fe25707fa", "patch": "@@ -68,8 +68,8 @@ __cxxabiv1::__cxa_throw (void *obj, std::type_info *tinfo,\n   header->referenceCount = 1;\n   header->exc.exceptionType = tinfo;\n   header->exc.exceptionDestructor = dest;\n-  header->exc.unexpectedHandler = __unexpected_handler;\n-  header->exc.terminateHandler = __terminate_handler;\n+  header->exc.unexpectedHandler = std::get_unexpected ();\n+  header->exc.terminateHandler = std::get_terminate ();\n   __GXX_INIT_PRIMARY_EXCEPTION_CLASS(header->exc.unwindHeader.exception_class);\n   header->exc.unwindHeader.exception_cleanup = __gxx_exception_cleanup;\n "}, {"sha": "5253cfda7a0aeb5f750ccc5cb21e170726f114b8", "filename": "libstdc++-v3/libsupc++/new_handler.cc", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e20f4b022dd4acd8ce6abc63ab9c02fe25707fa/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_handler.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e20f4b022dd4acd8ce6abc63ab9c02fe25707fa/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_handler.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_handler.cc?ref=7e20f4b022dd4acd8ce6abc63ab9c02fe25707fa", "patch": "@@ -24,6 +24,15 @@\n // <http://www.gnu.org/licenses/>.\n \n #include \"new\"\n+#include <bits/atomic_lockfree_defines.h>\n+\n+#if ATOMIC_POINTER_LOCK_FREE < 2\n+#include <ext/concurrence.h>\n+namespace\n+{\n+  __gnu_cxx::__mutex mx;\n+}\n+#endif\n \n const std::nothrow_t std::nothrow = { };\n \n@@ -37,15 +46,26 @@ new_handler\n std::set_new_handler (new_handler handler) throw()\n {\n   new_handler prev_handler;\n+#if ATOMIC_POINTER_LOCK_FREE > 1\n   __atomic_exchange (&__new_handler, &handler, &prev_handler,\n \t\t     __ATOMIC_ACQ_REL);\n+#else\n+  __gnu_cxx::__scoped_lock l(mx);\n+  prev_handler = __new_handler;\n+  __new_handler = handler;\n+#endif\n   return prev_handler;\n }\n \n new_handler\n std::get_new_handler () noexcept\n {\n   new_handler handler;\n+#if ATOMIC_POINTER_LOCK_FREE > 1\n   __atomic_load (&__new_handler, &handler, __ATOMIC_ACQUIRE);\n+#else\n+  __gnu_cxx::__scoped_lock l(mx);\n+  handler = __new_handler;\n+#endif\n   return handler;\n }"}]}