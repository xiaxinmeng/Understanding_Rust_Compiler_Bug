{"sha": "ceeae2d125cce0f03ad7d47f62c3f82ff2af78fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VlYWUyZDEyNWNjZTBmMDNhZDdkNDdmNjJjM2Y4MmZmMmFmNzhmZA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-09-05T18:04:21Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-09-05T18:04:21Z"}, "message": "re PR c++/12163 (static_cast + explicit ctor regression)\n\n\tPR c++/12163\n\t* call.c (perform_direct_initialization): Correct logic for\n\tdirect-initialization of a class type.\n\n\tPR c++/12146\n\t* pt.c (lookup_template_function): Robustify.\n\n\tPR c++/12163\n\t* g++.dg/expr/static_cast4.C: New test.\n\n\tPR c++/12146\n\t* g++.dg/template/crash9.C: New test.\n\nFrom-SVN: r71115", "tree": {"sha": "6985ef10a548d692a06e263e44d798c0302163e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6985ef10a548d692a06e263e44d798c0302163e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ceeae2d125cce0f03ad7d47f62c3f82ff2af78fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceeae2d125cce0f03ad7d47f62c3f82ff2af78fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ceeae2d125cce0f03ad7d47f62c3f82ff2af78fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceeae2d125cce0f03ad7d47f62c3f82ff2af78fd/comments", "author": null, "committer": null, "parents": [{"sha": "3f8dc57bd287c4086eaa9a2b9d185ec22b459fb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f8dc57bd287c4086eaa9a2b9d185ec22b459fb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f8dc57bd287c4086eaa9a2b9d185ec22b459fb7"}], "stats": {"total": 59, "additions": 57, "deletions": 2}, "files": [{"sha": "7840de47bf7b73fd34aa388266b299ff1f8559c5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceeae2d125cce0f03ad7d47f62c3f82ff2af78fd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceeae2d125cce0f03ad7d47f62c3f82ff2af78fd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ceeae2d125cce0f03ad7d47f62c3f82ff2af78fd", "patch": "@@ -1,3 +1,12 @@\n+2003-09-05  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/12163\n+\t* call.c (perform_direct_initialization): Correct logic for\n+\tdirect-initialization of a class type.\n+\n+\tPR c++/12146\n+\t* pt.c (lookup_template_function): Robustify.\n+\n 2003-09-05  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/11922"}, {"sha": "cc03adc6f57014ec4fdec3964865c0b5e1ed0b0a", "filename": "gcc/cp/call.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceeae2d125cce0f03ad7d47f62c3f82ff2af78fd/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceeae2d125cce0f03ad7d47f62c3f82ff2af78fd/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=ceeae2d125cce0f03ad7d47f62c3f82ff2af78fd", "patch": "@@ -5951,7 +5951,8 @@ perform_implicit_conversion (tree type, tree expr)\n \n /* Convert EXPR to TYPE (as a direct-initialization) if that is\n    permitted.  If the conversion is valid, the converted expression is\n-   returned.  Otherwise, NULL_TREE is returned.  */\n+   returned.  Otherwise, NULL_TREE is returned, except in the case\n+   that TYPE is a class type; in that case, an error is issued.  */\n \n tree\n perform_direct_initialization_if_possible (tree type, tree expr)\n@@ -5960,6 +5961,19 @@ perform_direct_initialization_if_possible (tree type, tree expr)\n   \n   if (type == error_mark_node || error_operand_p (expr))\n     return error_mark_node;\n+  /* [dcl.init]\n+\n+     If the destination type is a (possibly cv-qualified) class type:\n+\n+     -- If the initialization is direct-initialization ...,\n+     constructors are considered. ... If no constructor applies, or\n+     the overload resolution is ambiguous, the initialization is\n+     ill-formed.  */\n+  if (CLASS_TYPE_P (type))\n+    return build_special_member_call (NULL_TREE, complete_ctor_identifier,\n+\t\t\t\t      build_tree_list (NULL_TREE, expr),\n+\t\t\t\t      TYPE_BINFO (type),\n+\t\t\t\t      LOOKUP_NORMAL);\n   conv = implicit_conversion (type, TREE_TYPE (expr), expr,\n \t\t\t      LOOKUP_NORMAL);\n   if (!conv || ICS_BAD_FLAG (conv))"}, {"sha": "8169cf33c8a4028fbefa422196497be2a295ee3d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceeae2d125cce0f03ad7d47f62c3f82ff2af78fd/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceeae2d125cce0f03ad7d47f62c3f82ff2af78fd/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ceeae2d125cce0f03ad7d47f62c3f82ff2af78fd", "patch": "@@ -3854,7 +3854,8 @@ lookup_template_function (tree fns, tree arglist)\n     return error_mark_node;\n \n   my_friendly_assert (!arglist || TREE_CODE (arglist) == TREE_VEC, 20030726);\n-  if (fns == NULL_TREE)\n+  if (fns == NULL_TREE \n+      || TREE_CODE (fns) == FUNCTION_DECL)\n     {\n       error (\"non-template used as template\");\n       return error_mark_node;"}, {"sha": "724bdef2112119d361fdbb385fd121cb4c6f1f92", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceeae2d125cce0f03ad7d47f62c3f82ff2af78fd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceeae2d125cce0f03ad7d47f62c3f82ff2af78fd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ceeae2d125cce0f03ad7d47f62c3f82ff2af78fd", "patch": "@@ -1,3 +1,11 @@\n+2003-09-05  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/12163\n+\t* g++.dg/expr/static_cast4.C: New test.\n+\n+\tPR c++/12146\n+\t* g++.dg/template/crash9.C: New test.\n+\n 2003-09-05  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* g++.old-deja/g++.ext/pretty2.C: Update for change "}, {"sha": "cea7f4873938deced3cabab7c30d1d640c3aa91e", "filename": "gcc/testsuite/g++.dg/expr/static_cast4.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceeae2d125cce0f03ad7d47f62c3f82ff2af78fd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fstatic_cast4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceeae2d125cce0f03ad7d47f62c3f82ff2af78fd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fstatic_cast4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fstatic_cast4.C?ref=ceeae2d125cce0f03ad7d47f62c3f82ff2af78fd", "patch": "@@ -0,0 +1,11 @@\n+class C { \n+public: \n+    explicit C(int) {} \n+}; \n+ \n+int main() \n+{ \n+    int i = 0; \n+    static_cast<C>(i); \n+    return 0; \n+}"}, {"sha": "7a568fe054ad1b29ca5740d9c42d4e869b3593fc", "filename": "gcc/testsuite/g++.dg/template/crash9.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceeae2d125cce0f03ad7d47f62c3f82ff2af78fd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceeae2d125cce0f03ad7d47f62c3f82ff2af78fd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash9.C?ref=ceeae2d125cce0f03ad7d47f62c3f82ff2af78fd", "patch": "@@ -0,0 +1,12 @@\n+struct A { };\n+struct B { };\n+\n+A f(const B & b) {\n+  return A();\n+}\n+\n+template<>\n+B f(const A & a) { // { dg-error \"\" }\n+  return B();\n+}\n+"}]}