{"sha": "04029ca2457cdda7ac485532588705a219b2f980", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQwMjljYTI0NTdjZGRhN2FjNDg1NTMyNTg4NzA1YTIxOWIyZjk4MA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-12-22T08:55:49Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-12-22T08:55:49Z"}, "message": "haifa-sched.c (create_reg_dead_note): Detect and handle another case where we kill more regs after sched than were...\n\n        * haifa-sched.c (create_reg_dead_note): Detect and handle another\n        case where we kill more regs after sched than were killed before\n        sched.\n        * sched.c (create_reg_dead_note): Similarly.\n\nFrom-SVN: r17183", "tree": {"sha": "1adccd06465441c3df1e33d4d90f4aa01b6071f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1adccd06465441c3df1e33d4d90f4aa01b6071f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04029ca2457cdda7ac485532588705a219b2f980", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04029ca2457cdda7ac485532588705a219b2f980", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04029ca2457cdda7ac485532588705a219b2f980", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04029ca2457cdda7ac485532588705a219b2f980/comments", "author": null, "committer": null, "parents": [{"sha": "1d88b804fba46e810605ca44dd51a709cfe90c34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d88b804fba46e810605ca44dd51a709cfe90c34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d88b804fba46e810605ca44dd51a709cfe90c34"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "02350e1941fa197adbdb326157fa7284cad7c6cd", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04029ca2457cdda7ac485532588705a219b2f980/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04029ca2457cdda7ac485532588705a219b2f980/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=04029ca2457cdda7ac485532588705a219b2f980", "patch": "@@ -4467,6 +4467,23 @@ create_reg_dead_note (reg, insn)\n       while (reg_note_regs < regs_killed)\n \t{\n \t  link = XEXP (link, 1);\n+\n+\t  /* LINK might be zero if we killed more registers after scheduling\n+\t     than before, and the last hard register we kill is actually\n+\t     multiple hard regs. \n+\n+\t     This is normal for interblock scheduling, so deal with it in\n+\t     that case, else abort.  */\n+\t  if (link == NULL_RTX && current_nr_blocks <= 1)\n+\t    abort ();\n+\t  else if (link == NULL_RTX)\n+\t    {\n+\t      link = rtx_alloc (EXPR_LIST);\n+\t      PUT_REG_NOTE_KIND (link, REG_DEAD);\n+\t      XEXP (link, 0) = gen_rtx (REG, word_mode, 0);\n+\t      XEXP (link, 1) = NULL_RTX;\n+\t    }\n+\t     \n \t  reg_note_regs += (REGNO (XEXP (link, 0)) >= FIRST_PSEUDO_REGISTER ? 1\n \t\t\t    : HARD_REGNO_NREGS (REGNO (XEXP (link, 0)),\n \t\t\t\t\t\tGET_MODE (XEXP (link, 0))));"}, {"sha": "64b785f95333ba4e4da67768da19db5fb249f663", "filename": "gcc/sched.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04029ca2457cdda7ac485532588705a219b2f980/gcc%2Fsched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04029ca2457cdda7ac485532588705a219b2f980/gcc%2Fsched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched.c?ref=04029ca2457cdda7ac485532588705a219b2f980", "patch": "@@ -2218,6 +2218,12 @@ create_reg_dead_note (reg, insn)\n \t\t\t\t\t   GET_MODE (XEXP (link, 0))));\n       while (reg_note_regs < regs_killed)\n \t{\n+\t  /* LINK might be zero if we killed more registers after scheduling\n+\t     than before, and the last hard register we kill is actually\n+\t     multiple hard regs.  */\n+\t  if (link == NULL_RTX)\n+\t    abort ();\n+  \n \t  link = XEXP (link, 1);\n \t  reg_note_regs += (REGNO (XEXP (link, 0)) >= FIRST_PSEUDO_REGISTER ? 1\n \t\t\t    : HARD_REGNO_NREGS (REGNO (XEXP (link, 0)),"}]}