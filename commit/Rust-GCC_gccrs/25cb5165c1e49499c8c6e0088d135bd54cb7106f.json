{"sha": "25cb5165c1e49499c8c6e0088d135bd54cb7106f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVjYjUxNjVjMWU0OTQ5OWM4YzZlMDA4OGQxMzViZDU0Y2I3MTA2Zg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2019-04-02T10:55:26Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2019-04-02T10:55:26Z"}, "message": "S/390: arch13: Support new popcount instruction\n variant.\n\nThe new arch13 popcount instruction counts bits in the entire 64 bit\nregister instead of just in 8 bit portions.\n\ngcc/ChangeLog:\n\n2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n\n\t* config/s390/s390.md (\"*popcountdi_arch13_cc\")\n\t(\"*popcountdi_arch13_cconly\", \"*popcountdi_arch13\"): New insn\n\tdefinition.\n\t(\"*popcount<mode>\", \"popcountdi2\", \"popcountsi2\", \"popcounthi2\"):\n\tAppend _z196 to make it ...\n\t(\"*popcount<mode>_z196\", \"popcountdi2_z196\", \"popcountsi2_z196\")\n\t(\"popcounthi2_z196\"): ... this.\n\t(\"popcountdi2_z196\"): Remove TARGET_64BIT from the insn condition.\n\t(\"popcountdi2\", \"popcountsi2\", \"popcounthi2\"): New expanders.\n\ngcc/testsuite/ChangeLog:\n\n2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n\n\t* gcc.target/s390/arch13/popcount-1.c: New test.\n\nFrom-SVN: r270079", "tree": {"sha": "e9416f449191262abe6ef419ee0110c2c281f7d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9416f449191262abe6ef419ee0110c2c281f7d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25cb5165c1e49499c8c6e0088d135bd54cb7106f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25cb5165c1e49499c8c6e0088d135bd54cb7106f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25cb5165c1e49499c8c6e0088d135bd54cb7106f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25cb5165c1e49499c8c6e0088d135bd54cb7106f/comments", "author": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4a9733f3dfbd016103a30151a9656ffb63dce6e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a9733f3dfbd016103a30151a9656ffb63dce6e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a9733f3dfbd016103a30151a9656ffb63dce6e4"}], "stats": {"total": 145, "additions": 138, "deletions": 7}, "files": [{"sha": "6601061c39abf58c60d8680f3c855cdca7d9afe3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25cb5165c1e49499c8c6e0088d135bd54cb7106f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25cb5165c1e49499c8c6e0088d135bd54cb7106f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25cb5165c1e49499c8c6e0088d135bd54cb7106f", "patch": "@@ -1,3 +1,15 @@\n+2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* config/s390/s390.md (\"*popcountdi_arch13_cc\")\n+\t(\"*popcountdi_arch13_cconly\", \"*popcountdi_arch13\"): New insn\n+\tdefinition.\n+\t(\"*popcount<mode>\", \"popcountdi2\", \"popcountsi2\", \"popcounthi2\"):\n+\tAppend _z196 to make it ...\n+\t(\"*popcount<mode>_z196\", \"popcountdi2_z196\", \"popcountsi2_z196\")\n+\t(\"popcounthi2_z196\"): ... this.\n+\t(\"popcountdi2_z196\"): Remove TARGET_64BIT from the insn condition.\n+\t(\"popcountdi2\", \"popcountsi2\", \"popcounthi2\"): New expanders.\n+\n 2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n \n \t* config/s390/s390.c (s390_canonicalize_comparison): Convert"}, {"sha": "018020cd19de1d6b993a8dcebe3c136f358097f3", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 97, "deletions": 7, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25cb5165c1e49499c8c6e0088d135bd54cb7106f/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25cb5165c1e49499c8c6e0088d135bd54cb7106f/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=25cb5165c1e49499c8c6e0088d135bd54cb7106f", "patch": "@@ -120,7 +120,7 @@\n    ; Test Data Class (TDC)\n    UNSPEC_TDC_INSN\n \n-   ; Population Count\n+   ; Byte-wise Population Count\n    UNSPEC_POPCNT\n    UNSPEC_COPYSIGN\n \n@@ -11323,17 +11323,44 @@\n ; Population count instruction\n ;\n \n-; The S/390 popcount instruction counts the bits of op1 in 8 byte\n+(define_insn \"*popcountdi_arch13_cc\"\n+  [(set (reg CC_REGNUM)\n+\t(compare (popcount:DI (match_operand:DI 1 \"register_operand\" \"d\"))\n+\t\t (const_int 0)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=d\")\n+\t(match_dup 1))]\n+  \"TARGET_ARCH13 && s390_match_ccmode (insn, CCTmode)\"\n+  \"popcnt\\t%0,%1,8\"\n+  [(set_attr \"op_type\" \"RRF\")])\n+\n+(define_insn \"*popcountdi_arch13_cconly\"\n+  [(set (reg CC_REGNUM)\n+\t(compare (popcount:DI (match_operand:DI 1 \"register_operand\" \"d\"))\n+\t\t (const_int 0)))\n+   (clobber (match_scratch:DI 0 \"=d\"))]\n+  \"TARGET_ARCH13 && s390_match_ccmode(insn, CCTmode)\"\n+  \"popcnt\\t%0,%1,8\"\n+  [(set_attr \"op_type\" \"RRF\")])\n+\n+(define_insn \"*popcountdi_arch13\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+\t(popcount:DI (match_operand:DI 1 \"register_operand\" \"d\")))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_ARCH13\"\n+  \"popcnt\\t%0,%1,8\"\n+  [(set_attr \"op_type\" \"RRF\")])\n+\n+; The pre-arch13 popcount instruction counts the bits of op1 in 8 byte\n ; portions and stores the result in the corresponding bytes in op0.\n-(define_insn \"*popcount<mode>\"\n+(define_insn \"*popcount<mode>_z196\"\n   [(set (match_operand:INT 0 \"register_operand\" \"=d\")\n \t(unspec:INT [(match_operand:INT 1 \"register_operand\" \"d\")] UNSPEC_POPCNT))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_Z196\"\n   \"popcnt\\t%0,%1\"\n   [(set_attr \"op_type\" \"RRE\")])\n \n-(define_expand \"popcountdi2\"\n+(define_expand \"popcountdi2_z196\"\n   [; popcnt op0, op1\n    (parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t\t   (unspec:DI [(match_operand:DI 1 \"register_operand\")]\n@@ -11357,10 +11384,24 @@\n \t      (clobber (reg:CC CC_REGNUM))])\n    ; srlg op0, op0, 56\n    (set (match_dup 0) (lshiftrt:DI (match_dup 0) (const_int 56)))]\n-  \"TARGET_Z196 && TARGET_64BIT\"\n+  \"TARGET_Z196\"\n   \"operands[2] = gen_reg_rtx (DImode);\")\n \n-(define_expand \"popcountsi2\"\n+(define_expand \"popcountdi2\"\n+  [(parallel\n+    [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t  (popcount:DI (match_operand:DI 1 \"register_operand\")))\n+     (clobber (reg:CC CC_REGNUM))])]\n+  \"TARGET_Z196\"\n+{\n+  if (!TARGET_ARCH13)\n+    {\n+      emit_insn (gen_popcountdi2_z196 (operands[0], operands[1]));\n+      DONE;\n+    }\n+ })\n+\n+(define_expand \"popcountsi2_z196\"\n   [; popcnt op0, op1\n    (parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t\t   (unspec:SI [(match_operand:SI 1 \"register_operand\")]\n@@ -11382,7 +11423,31 @@\n   \"TARGET_Z196\"\n   \"operands[2] = gen_reg_rtx (SImode);\")\n \n-(define_expand \"popcounthi2\"\n+; popcount always counts on the full 64 bit. With the z196 version\n+; counting bits per byte we just ignore the upper 4 bytes.  With the\n+; arch13 version we have to zero out the upper 32 bits first.\n+(define_expand \"popcountsi2\"\n+  [(set (match_dup 2)\n+\t(zero_extend:DI (match_operand:SI 1 \"register_operand\")))\n+   (parallel [(set (match_dup 3) (popcount:DI (match_dup 2)))\n+\t      (clobber (reg:CC CC_REGNUM))])\n+   (set (match_operand:SI 0 \"register_operand\")\n+\t(subreg:SI (match_dup 3) 4))]\n+  \"TARGET_Z196\"\n+{\n+  if (!TARGET_ARCH13)\n+    {\n+      emit_insn (gen_popcountsi2_z196 (operands[0], operands[1]));\n+      DONE;\n+    }\n+  else\n+    {\n+      operands[2] = gen_reg_rtx (DImode);\n+      operands[3] = gen_reg_rtx (DImode);\n+    }\n+})\n+\n+(define_expand \"popcounthi2_z196\"\n   [; popcnt op0, op1\n    (parallel [(set (match_operand:HI 0 \"register_operand\" \"\")\n \t\t   (unspec:HI [(match_operand:HI 1 \"register_operand\")]\n@@ -11399,6 +11464,31 @@\n   \"TARGET_Z196\"\n   \"operands[2] = gen_reg_rtx (SImode);\")\n \n+(define_expand \"popcounthi2\"\n+  [(set (match_dup 2)\n+\t(zero_extend:DI (match_operand:HI 1 \"register_operand\")))\n+   (parallel [(set (match_dup 3) (popcount:DI (match_dup 2)))\n+\t      (clobber (reg:CC CC_REGNUM))])\n+   (set (match_operand:HI 0 \"register_operand\")\n+\t(subreg:HI (match_dup 3) 6))]\n+  \"TARGET_Z196\"\n+{\n+  if (!TARGET_ARCH13)\n+    {\n+      emit_insn (gen_popcounthi2_z196 (operands[0], operands[1]));\n+      DONE;\n+    }\n+  else\n+    {\n+      operands[2] = gen_reg_rtx (DImode);\n+      operands[3] = gen_reg_rtx (DImode);\n+    }\n+})\n+\n+; For popcount on a single byte the old z196 style popcount\n+; instruction is ideal.  Since it anyway does a byte-wise popcount we\n+; just use it instead of zero extending the QImode input to DImode and\n+; using the arch13 popcount variant.\n (define_expand \"popcountqi2\"\n   [; popcnt op0, op1\n    (parallel [(set (match_operand:QI 0 \"register_operand\" \"\")"}, {"sha": "8bc2b862b095302c09675885285c172cc017dffc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25cb5165c1e49499c8c6e0088d135bd54cb7106f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25cb5165c1e49499c8c6e0088d135bd54cb7106f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=25cb5165c1e49499c8c6e0088d135bd54cb7106f", "patch": "@@ -1,3 +1,7 @@\n+2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* gcc.target/s390/arch13/popcount-1.c: New test.\n+\n 2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n \n \t* gcc.target/s390/arch13/bitops-1.c: New test."}, {"sha": "c98a3272a028832f6c8a53bad08ea3e785e9a0cd", "filename": "gcc/testsuite/gcc.target/s390/arch13/popcount-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25cb5165c1e49499c8c6e0088d135bd54cb7106f/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Farch13%2Fpopcount-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25cb5165c1e49499c8c6e0088d135bd54cb7106f/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Farch13%2Fpopcount-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Farch13%2Fpopcount-1.c?ref=25cb5165c1e49499c8c6e0088d135bd54cb7106f", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-compile } */\n+\n+unsigned int ui;\n+unsigned long ul;\n+unsigned long long ull;\n+\n+int\n+f1 ()\n+{\n+  return __builtin_popcount (ui);\n+}\n+\n+int\n+f2 ()\n+{\n+  return __builtin_popcountl (ul);\n+}\n+\n+int\n+f3 ()\n+{\n+  return __builtin_popcountll (ull);\n+}\n+\n+/* { dg-final { scan-assembler-times \"popcnt\\t%r2,%r2,8\" 3 } } */"}]}