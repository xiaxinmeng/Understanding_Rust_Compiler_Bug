{"sha": "8ffcdea85552836f18e4a7473fa1cea31feb3944", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZmY2RlYTg1NTUyODM2ZjE4ZTRhNzQ3M2ZhMWNlYTMxZmViMzk0NA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-06-05T09:35:05Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-06-05T09:35:05Z"}, "message": "re PR c/56724 (sub-optimal location in error)\n\n\tPR c/56724\n\t* c-typeck.c (convert_for_assignment): Use expr_loc for ic_argpass.\n\n\t* gcc.dg/pr56724-3.c: New test.\n\nFrom-SVN: r211261", "tree": {"sha": "0f8017e92c3a15175fcc55460370e9d8ce98902c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f8017e92c3a15175fcc55460370e9d8ce98902c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ffcdea85552836f18e4a7473fa1cea31feb3944", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ffcdea85552836f18e4a7473fa1cea31feb3944", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ffcdea85552836f18e4a7473fa1cea31feb3944", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ffcdea85552836f18e4a7473fa1cea31feb3944/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "55097f65006bb4b76405aba8faf7cca55d2219af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55097f65006bb4b76405aba8faf7cca55d2219af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55097f65006bb4b76405aba8faf7cca55d2219af"}], "stats": {"total": 42, "additions": 34, "deletions": 8}, "files": [{"sha": "85b00650fe9c85045cdafe70d747934c537892af", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffcdea85552836f18e4a7473fa1cea31feb3944/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffcdea85552836f18e4a7473fa1cea31feb3944/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=8ffcdea85552836f18e4a7473fa1cea31feb3944", "patch": "@@ -1,3 +1,8 @@\n+2014-06-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/56724\n+\t* c-typeck.c (convert_for_assignment): Use expr_loc for ic_argpass.\n+\n 2014-06-05  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/49706"}, {"sha": "f09f39e811452532985c89ad1b6630708f87a405", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffcdea85552836f18e4a7473fa1cea31feb3944/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffcdea85552836f18e4a7473fa1cea31feb3944/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=8ffcdea85552836f18e4a7473fa1cea31feb3944", "patch": "@@ -6025,8 +6025,9 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \n \t where NULL is typically defined in C to be '(void *) 0'.  */\n       if (VOID_TYPE_P (ttr) && rhs != null_pointer_node && !VOID_TYPE_P (ttl))\n-\twarning_at (location, OPT_Wc___compat,\n-\t    \t    \"request for implicit conversion \"\n+\twarning_at (errtype == ic_argpass ? expr_loc : location,\n+\t\t    OPT_Wc___compat,\n+\t\t    \"request for implicit conversion \"\n \t\t    \"from %qT to %qT not permitted in C++\", rhstype, type);\n \n       /* See if the pointers point to incompatible address spaces.  */\n@@ -6038,7 +6039,7 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \t  switch (errtype)\n \t    {\n \t    case ic_argpass:\n-\t      error_at (location, \"passing argument %d of %qE from pointer to \"\n+\t      error_at (expr_loc, \"passing argument %d of %qE from pointer to \"\n \t\t\t\"non-enclosed address space\", parmnum, rname);\n \t      break;\n \t    case ic_assign:\n@@ -6067,7 +6068,7 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \t  switch (errtype)\n \t  {\n \t  case ic_argpass:\n-\t    warning_at (location, OPT_Wsuggest_attribute_format,\n+\t    warning_at (expr_loc, OPT_Wsuggest_attribute_format,\n \t\t\t\"argument %d of %qE might be \"\n \t\t\t\"a candidate for a format attribute\",\n \t\t\tparmnum, rname);\n@@ -6246,9 +6247,10 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n   switch (errtype)\n     {\n     case ic_argpass:\n-      error_at (location, \"incompatible type for argument %d of %qE\", parmnum, rname);\n+      error_at (expr_loc, \"incompatible type for argument %d of %qE\", parmnum,\n+\t\trname);\n       inform ((fundecl && !DECL_IS_BUILTIN (fundecl))\n-\t      ? DECL_SOURCE_LOCATION (fundecl) : input_location,\n+\t      ? DECL_SOURCE_LOCATION (fundecl) : expr_loc,\n \t      \"expected %qT but argument is of type %qT\", type, rhstype);\n       break;\n     case ic_assign:\n@@ -6257,12 +6259,12 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n       break;\n     case ic_init:\n       error_at (location,\n-\t  \t\"incompatible types when initializing type %qT using type %qT\",\n+\t\t\"incompatible types when initializing type %qT using type %qT\",\n \t\ttype, rhstype);\n       break;\n     case ic_return:\n       error_at (location,\n-\t  \t\"incompatible types when returning type %qT but %qT was \"\n+\t\t\"incompatible types when returning type %qT but %qT was \"\n \t\t\"expected\", rhstype, type);\n       break;\n     default:"}, {"sha": "8ec6b5ebf5304bec94c5a63fb4565d6ac7e495cf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffcdea85552836f18e4a7473fa1cea31feb3944/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffcdea85552836f18e4a7473fa1cea31feb3944/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8ffcdea85552836f18e4a7473fa1cea31feb3944", "patch": "@@ -1,3 +1,8 @@\n+2014-06-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/56724\n+\t* gcc.dg/pr56724-3.c: New test.\n+\n 2014-06-05  Andreas Schwab  <schwab@suse.de>\n \n \t* g++.dg/cpp0x/initlist86.C (main): Initialize i."}, {"sha": "192d71962a10aa7c7c12dea400acc944fa24f556", "filename": "gcc/testsuite/gcc.dg/pr56724-3.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffcdea85552836f18e4a7473fa1cea31feb3944/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56724-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffcdea85552836f18e4a7473fa1cea31feb3944/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56724-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56724-3.c?ref=8ffcdea85552836f18e4a7473fa1cea31feb3944", "patch": "@@ -0,0 +1,14 @@\n+/* PR c/56724 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wc++-compat\" } */\n+\n+extern void xfer (int, int, unsigned char *);\n+struct T { int a; } t;\n+\n+void\n+call (int x, int y, void *arg)\n+{\n+  unsigned char *uc = arg; /* { dg-warning \"23:request for implicit conversion\" } */\n+  xfer (x, y, arg); /* { dg-warning \"15:request for implicit conversion\" } */\n+  xfer (x, y, t); /* { dg-error \"15:incompatible type for\" } */\n+}"}]}