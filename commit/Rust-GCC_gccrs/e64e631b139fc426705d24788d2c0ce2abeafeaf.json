{"sha": "e64e631b139fc426705d24788d2c0ce2abeafeaf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY0ZTYzMWIxMzlmYzQyNjcwNWQyNDc4OGQyYzBjZTJhYmVhZmVhZg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-25T18:49:28Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-25T18:49:28Z"}, "message": "config/rs6000: Use rtx_insn\n\ngcc/\n\t* config/rs6000/rs6000-protos.h (output_cbranch): Strengthen param\n\t4 from rtx to rtx_insn *.\n\t(rs6000_final_prescan_insn): Likewise for first param.\n\t* config/rs6000/rs6000.c (rs6000_emit_set_const): Likewise for\n\tlocal \"insn\".\n\t(rs6000_get_some_local_dynamic_name): Likewise.\n\t(output_cbranch): Likewise for param \"insn\".\n\t(spe_func_has_64bit_regs_p): Likewise for locals \"insns\", \"insn\".\n\t(rs6000_function_ok_for_sibcall): Likewise for locals \"top\", \"insn\".\n\t(rs6000_emit_allocate_stack): Likewise for local \"insn\".\n\t(load_cr_save): Likewise.\n\t(restore_saved_cr): Likewise.\n\t(restore_saved_lr): Likewise.\n\t(emit_cfa_restores): Likewise.\n\t(rs6000_output_function_epilogue): Likewise for locals \"insn\" and\n\t\"deleted_debug_label\".\n\t(rs6000_output_mi_thunk): Likewise for local \"insn\".\n\t(rs6000_final_prescan_insn): Likewise for param \"insn\".\n\nFrom-SVN: r214454", "tree": {"sha": "fb9a037fa06448b8727aad4fdda91558610922d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb9a037fa06448b8727aad4fdda91558610922d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e64e631b139fc426705d24788d2c0ce2abeafeaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e64e631b139fc426705d24788d2c0ce2abeafeaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e64e631b139fc426705d24788d2c0ce2abeafeaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e64e631b139fc426705d24788d2c0ce2abeafeaf/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bd7de269f3cdf254829e0e411402c053b9552335", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd7de269f3cdf254829e0e411402c053b9552335", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd7de269f3cdf254829e0e411402c053b9552335"}], "stats": {"total": 59, "additions": 41, "deletions": 18}, "files": [{"sha": "8955550556a423cdb6b5163826ae5d5fdaa104a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64e631b139fc426705d24788d2c0ce2abeafeaf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64e631b139fc426705d24788d2c0ce2abeafeaf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e64e631b139fc426705d24788d2c0ce2abeafeaf", "patch": "@@ -1,3 +1,24 @@\n+2014-08-25  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* config/rs6000/rs6000-protos.h (output_cbranch): Strengthen param\n+\t4 from rtx to rtx_insn *.\n+\t(rs6000_final_prescan_insn): Likewise for first param.\n+\t* config/rs6000/rs6000.c (rs6000_emit_set_const): Likewise for\n+\tlocal \"insn\".\n+\t(rs6000_get_some_local_dynamic_name): Likewise.\n+\t(output_cbranch): Likewise for param \"insn\".\n+\t(spe_func_has_64bit_regs_p): Likewise for locals \"insns\", \"insn\".\n+\t(rs6000_function_ok_for_sibcall): Likewise for locals \"top\", \"insn\".\n+\t(rs6000_emit_allocate_stack): Likewise for local \"insn\".\n+\t(load_cr_save): Likewise.\n+\t(restore_saved_cr): Likewise.\n+\t(restore_saved_lr): Likewise.\n+\t(emit_cfa_restores): Likewise.\n+\t(rs6000_output_function_epilogue): Likewise for locals \"insn\" and\n+\t\"deleted_debug_label\".\n+\t(rs6000_output_mi_thunk): Likewise for local \"insn\".\n+\t(rs6000_final_prescan_insn): Likewise for param \"insn\".\n+\n 2014-08-25  David Malcolm  <dmalcolm@redhat.com>\n \n \t* config/picochip/picochip-protos.h (picochip_final_prescan_insn):"}, {"sha": "1653b92a64d57bd3d980d041335745d06f04fa9b", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64e631b139fc426705d24788d2c0ce2abeafeaf/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64e631b139fc426705d24788d2c0ce2abeafeaf/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=e64e631b139fc426705d24788d2c0ce2abeafeaf", "patch": "@@ -111,7 +111,7 @@ extern enum rtx_code rs6000_reverse_condition (enum machine_mode,\n extern void rs6000_emit_sISEL (enum machine_mode, rtx[]);\n extern void rs6000_emit_sCOND (enum machine_mode, rtx[]);\n extern void rs6000_emit_cbranch (enum machine_mode, rtx[]);\n-extern char * output_cbranch (rtx, const char *, int, rtx);\n+extern char * output_cbranch (rtx, const char *, int, rtx_insn *);\n extern char * output_e500_flip_gt_bit (rtx, rtx);\n extern const char * output_probe_stack_range (rtx, rtx);\n extern bool rs6000_emit_set_const (rtx, rtx);\n@@ -217,7 +217,7 @@ char *output_call (rtx, rtx *, int, int);\n const char * rs6000_xcoff_strip_dollar (const char *);\n #endif\n \n-void rs6000_final_prescan_insn (rtx, rtx *operand, int num_operands);\n+void rs6000_final_prescan_insn (rtx_insn *, rtx *operand, int num_operands);\n \n extern bool rs6000_hard_regno_mode_ok_p[][FIRST_PSEUDO_REGISTER];\n extern unsigned char rs6000_class_max_nregs[][LIM_REG_CLASSES];"}, {"sha": "340cb5739bd8184961c4a3d4e5b8bc1a158d02ef", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64e631b139fc426705d24788d2c0ce2abeafeaf/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64e631b139fc426705d24788d2c0ce2abeafeaf/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=e64e631b139fc426705d24788d2c0ce2abeafeaf", "patch": "@@ -7912,7 +7912,8 @@ bool\n rs6000_emit_set_const (rtx dest, rtx source)\n {\n   enum machine_mode mode = GET_MODE (dest);\n-  rtx temp, insn, set;\n+  rtx temp, set;\n+  rtx_insn *insn;\n   HOST_WIDE_INT c;\n \n   gcc_checking_assert (CONST_INT_P (source));\n@@ -17942,7 +17943,7 @@ extract_ME (rtx op)\n static const char *\n rs6000_get_some_local_dynamic_name (void)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n \n   if (cfun->machine->some_ld_name)\n     return cfun->machine->some_ld_name;\n@@ -19266,7 +19267,7 @@ rs6000_emit_cbranch (enum machine_mode mode, rtx operands[])\n    INSN is the insn.  */\n \n char *\n-output_cbranch (rtx op, const char *label, int reversed, rtx insn)\n+output_cbranch (rtx op, const char *label, int reversed, rtx_insn *insn)\n {\n   static char string[64];\n   enum rtx_code code = GET_CODE (op);\n@@ -21574,7 +21575,7 @@ rs6000_stack_info (void)\n static bool\n spe_func_has_64bit_regs_p (void)\n {\n-  rtx insns, insn;\n+  rtx_insn *insns, *insn;\n \n   /* Functions that save and restore all the call-saved registers will\n      need to save/restore the registers in 64-bits.  */\n@@ -21843,9 +21844,9 @@ rs6000_function_ok_for_sibcall (tree decl, tree exp)\n static int\n rs6000_ra_ever_killed (void)\n {\n-  rtx top;\n+  rtx_insn *top;\n   rtx reg;\n-  rtx insn;\n+  rtx_insn *insn;\n \n   if (cfun->is_thunk)\n     return 0;\n@@ -22154,7 +22155,7 @@ rs6000_emit_stack_tie (rtx fp, bool hard_frame_needed)\n static void\n rs6000_emit_allocate_stack (HOST_WIDE_INT size, rtx copy_reg, int copy_off)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n   rtx stack_reg = gen_rtx_REG (Pmode, STACK_POINTER_REGNUM);\n   rtx tmp_reg = gen_rtx_REG (Pmode, 0);\n   rtx todec = gen_int_mode (-size, Pmode);\n@@ -24052,7 +24053,7 @@ load_cr_save (int regno, rtx frame_reg_rtx, int offset, bool exit_func)\n {\n   rtx mem = gen_frame_mem_offset (SImode, frame_reg_rtx, offset);\n   rtx reg = gen_rtx_REG (SImode, regno);\n-  rtx insn = emit_move_insn (reg, mem);\n+  rtx_insn *insn = emit_move_insn (reg, mem);\n \n   if (!exit_func && DEFAULT_ABI == ABI_V4)\n     {\n@@ -24083,7 +24084,7 @@ restore_saved_cr (rtx reg, int using_mfcr_multiple, bool exit_func)\n \n   if (using_mfcr_multiple && count > 1)\n     {\n-      rtx insn;\n+      rtx_insn *insn;\n       rtvec p;\n       int ndx;\n \n@@ -24139,7 +24140,7 @@ restore_saved_cr (rtx reg, int using_mfcr_multiple, bool exit_func)\n   if (!exit_func && DEFAULT_ABI != ABI_ELFv2\n       && (DEFAULT_ABI == ABI_V4 || flag_shrink_wrap))\n     {\n-      rtx insn = get_last_insn ();\n+      rtx_insn *insn = get_last_insn ();\n       rtx cr = gen_rtx_REG (SImode, CR2_REGNO);\n \n       add_reg_note (insn, REG_CFA_RESTORE, cr);\n@@ -24166,7 +24167,7 @@ restore_saved_lr (int regno, bool exit_func)\n {\n   rtx reg = gen_rtx_REG (Pmode, regno);\n   rtx lr = gen_rtx_REG (Pmode, LR_REGNO);\n-  rtx insn = emit_move_insn (lr, reg);\n+  rtx_insn *insn = emit_move_insn (lr, reg);\n \n   if (!exit_func && flag_shrink_wrap)\n     {\n@@ -24218,7 +24219,7 @@ offset_below_red_zone_p (HOST_WIDE_INT offset)\n static void\n emit_cfa_restores (rtx cfa_restores)\n {\n-  rtx insn = get_last_insn ();\n+  rtx_insn *insn = get_last_insn ();\n   rtx *loc = &REG_NOTES (insn);\n \n   while (*loc)\n@@ -25098,8 +25099,8 @@ rs6000_output_function_epilogue (FILE *file,\n   /* Mach-O doesn't support labels at the end of objects, so if\n      it looks like we might want one, insert a NOP.  */\n   {\n-    rtx insn = get_last_insn ();\n-    rtx deleted_debug_label = NULL_RTX;\n+    rtx_insn *insn = get_last_insn ();\n+    rtx_insn *deleted_debug_label = NULL;\n     while (insn\n \t   && NOTE_P (insn)\n \t   && NOTE_KIND (insn) != NOTE_INSN_DELETED_LABEL)\n@@ -25398,7 +25399,8 @@ rs6000_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n \t\t\tHOST_WIDE_INT delta, HOST_WIDE_INT vcall_offset,\n \t\t\ttree function)\n {\n-  rtx this_rtx, insn, funexp;\n+  rtx this_rtx, funexp;\n+  rtx_insn *insn;\n \n   reload_completed = 1;\n   epilogue_completed = 1;\n@@ -31684,7 +31686,7 @@ rs6000_stack_protect_fail (void)\n }\n \n void\n-rs6000_final_prescan_insn (rtx insn, rtx *operand ATTRIBUTE_UNUSED,\n+rs6000_final_prescan_insn (rtx_insn *insn, rtx *operand ATTRIBUTE_UNUSED,\n \t\t\t   int num_operands ATTRIBUTE_UNUSED)\n {\n   if (rs6000_warn_cell_microcode)"}]}