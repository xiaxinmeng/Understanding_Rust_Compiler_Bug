{"sha": "3c67b67326c4284c79edc1c7aa0579351d85f5f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M2N2I2NzMyNmM0Mjg0Yzc5ZWRjMWM3YWEwNTc5MzUxZDg1ZjVmNg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-01T00:50:20Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-01T00:50:20Z"}, "message": "(all movstri recognizers): Eliminate updating the pointers.\n\nFrom-SVN: r9855", "tree": {"sha": "258093833d955d877dd8cecbd6074564e822a60d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/258093833d955d877dd8cecbd6074564e822a60d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c67b67326c4284c79edc1c7aa0579351d85f5f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c67b67326c4284c79edc1c7aa0579351d85f5f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c67b67326c4284c79edc1c7aa0579351d85f5f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c67b67326c4284c79edc1c7aa0579351d85f5f6/comments", "author": null, "committer": null, "parents": [{"sha": "35f456e3977f35b0de8a39d5da5bfae59e0de63c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35f456e3977f35b0de8a39d5da5bfae59e0de63c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35f456e3977f35b0de8a39d5da5bfae59e0de63c"}], "stats": {"total": 298, "additions": 94, "deletions": 204}, "files": [{"sha": "19d53d4c7b7148873effbdfd7afdda8b16e55d05", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 94, "deletions": 204, "changes": 298, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c67b67326c4284c79edc1c7aa0579351d85f5f6/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c67b67326c4284c79edc1c7aa0579351d85f5f6/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=3c67b67326c4284c79edc1c7aa0579351d85f5f6", "patch": "@@ -4732,12 +4732,6 @@\n (define_expand \"movstrsi_8reg\"\n   [(parallel [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"\"))\n \t\t   (mem:BLK (match_operand:SI 1 \"register_operand\" \"\")))\n-\t      (set (match_dup 0)\n-\t\t   (plus:SI (match_dup 0)\n-\t\t\t    (match_operand:SI 4 \"immediate_operand\" \"\")))\n-\t      (set (match_dup 1)\n-\t\t   (plus:SI (match_dup 1)\n-\t\t\t    (match_dup 4)))\n \t      (use (match_operand:SI 2 \"immediate_operand\" \"\"))\n \t      (use (match_operand:SI 3 \"immediate_operand\" \"\"))\n \t      (clobber (reg:SI  5))\n@@ -4748,81 +4742,59 @@\n \t      (clobber (reg:SI 10))\n \t      (clobber (reg:SI 11))\n \t      (clobber (reg:SI 12))\n-\t      (clobber (match_scratch:SI 5 \"\"))])]\n+\t      (clobber (match_scratch:SI 4 \"\"))])]\n   \"TARGET_STRING\"\n   \"\")\n \n (define_insn \"\"\n-  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"+&b,&b\"))\n-\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"+&b,&b\")))\n-   (set (match_dup 0)\n-\t(plus:SI (match_dup 0)\n-\t\t (match_operand:SI 4 \"immediate_operand\" \"O,i\")))\n-   (set (match_dup 1)\n-\t(plus:SI (match_dup 1)\n-\t\t (match_dup 4)))\n-   (use (match_operand:SI 2 \"immediate_operand\" \"i,i\"))\n-   (use (match_operand:SI 3 \"immediate_operand\" \"i,i\"))\n-   (clobber (match_operand:SI 5 \"register_operand\" \"r,r\"))\n+  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"b\"))\n+\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"b\")))\n+   (use (match_operand:SI 2 \"immediate_operand\" \"i\"))\n+   (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n+   (clobber (match_operand:SI 4 \"register_operand\" \"=r\"))\n    (clobber (reg:SI  6))\n    (clobber (reg:SI  7))\n    (clobber (reg:SI  8))\n    (clobber (reg:SI  9))\n    (clobber (reg:SI 10))\n    (clobber (reg:SI 11))\n    (clobber (reg:SI 12))\n-   (clobber (match_scratch:SI 6 \"=q,q\"))]\n+   (clobber (match_scratch:SI 5 \"=q\"))]\n   \"TARGET_STRING && TARGET_POWER\n    && ((INTVAL (operands[2]) > 24 && INTVAL (operands[2]) < 32) || INTVAL (operands[2]) == 0)\n    && (REGNO (operands[0]) < 5 || REGNO (operands[0]) > 12)\n    && (REGNO (operands[1]) < 5 || REGNO (operands[1]) > 12)\n-   && REGNO (operands[5]) == 5\"\n-  \"@\n-   {lsi|lswi} %5,%1,%2\\;{stsi|stswi} %5,%0,%2\n-   {lsi|lswi} %5,%1,%2\\;{cal %0,%4(%0)|addi %0,%0,%4}\\;{stsi|stswi} %5,%0,%2\\;{cal %1,%4(%1)|addi %1,%1,%4}\"\n-  [(set_attr \"length\" \"8,16\")])\n+   && REGNO (operands[4]) == 5\"\n+  \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n+  [(set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n-  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"+&b,&b\"))\n-\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"+&b,&b\")))\n-   (set (match_dup 0)\n-\t(plus:SI (match_dup 0)\n-\t\t (match_operand:SI 4 \"immediate_operand\" \"O,i\")))\n-   (set (match_dup 1)\n-\t(plus:SI (match_dup 1)\n-\t\t (match_dup 4)))\n-   (use (match_operand:SI 2 \"immediate_operand\" \"i,i\"))\n-   (use (match_operand:SI 3 \"immediate_operand\" \"i,i\"))\n-   (clobber (match_operand:SI 5 \"register_operand\" \"r,r\"))\n+  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"b\"))\n+\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"b\")))\n+   (use (match_operand:SI 2 \"immediate_operand\" \"i\"))\n+   (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n+   (clobber (match_operand:SI 4 \"register_operand\" \"=r\"))\n    (clobber (reg:SI  6))\n    (clobber (reg:SI  7))\n    (clobber (reg:SI  8))\n    (clobber (reg:SI  9))\n    (clobber (reg:SI 10))\n    (clobber (reg:SI 11))\n    (clobber (reg:SI 12))\n-   (clobber (match_scratch:SI 6 \"X,X\"))]\n+   (clobber (match_scratch:SI 5 \"X\"))]\n   \"TARGET_STRING && !TARGET_POWER\n    && ((INTVAL (operands[2]) > 24 && INTVAL (operands[2]) < 32) || INTVAL (operands[2]) == 0)\n    && (REGNO (operands[0]) < 5 || REGNO (operands[0]) > 12)\n    && (REGNO (operands[1]) < 5 || REGNO (operands[1]) > 12)\n-   && REGNO (operands[5]) == 5\"\n-  \"@\n-   {lsi|lswi} %5,%1,%2\\;{stsi|stswi} %5,%0,%2\n-   {lsi|lswi} %5,%1,%2\\;{cal %0,%4(%0)|addi %0,%0,%4}\\;{stsi|stswi} %5,%0,%2\\;{cal %1,%4(%1)|addi %1,%1,%4}\"\n-  [(set_attr \"length\" \"8,16\")])\n+   && REGNO (operands[4]) == 5\"\n+  \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n+  [(set_attr \"length\" \"8\")])\n \n ;; Move up to 24 bytes at a time.  The fixed registers are needed because the\n ;; register allocator doesn't have a clue about allocating 6 word registers\n (define_expand \"movstrsi_6reg\"\n   [(parallel [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"\"))\n \t\t   (mem:BLK (match_operand:SI 1 \"register_operand\" \"\")))\n-\t      (set (match_dup 0)\n-\t\t   (plus:SI (match_dup 0)\n-\t\t\t    (match_operand:SI 4 \"immediate_operand\" \"\")))\n-\t      (set (match_dup 1)\n-\t\t   (plus:SI (match_dup 1)\n-\t\t\t    (match_dup 4)))\n \t      (use (match_operand:SI 2 \"immediate_operand\" \"\"))\n \t      (use (match_operand:SI 3 \"immediate_operand\" \"\"))\n \t      (clobber (reg:SI  7))\n@@ -4831,252 +4803,170 @@\n \t      (clobber (reg:SI 10))\n \t      (clobber (reg:SI 11))\n \t      (clobber (reg:SI 12))\n-\t      (clobber (match_scratch:SI 5 \"\"))])]\n+\t      (clobber (match_scratch:SI 4 \"\"))])]\n   \"TARGET_STRING\"\n   \"\")\n \n (define_insn \"\"\n-  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"+&b,&b\"))\n-\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"+&b,&b\")))\n-   (set (match_dup 0)\n-\t(plus:SI (match_dup 0)\n-\t\t (match_operand:SI 4 \"immediate_operand\" \"O,i\")))\n-   (set (match_dup 1)\n-\t(plus:SI (match_dup 1)\n-\t\t (match_dup 4)))\n-   (use (match_operand:SI 2 \"immediate_operand\" \"i,i\"))\n-   (use (match_operand:SI 3 \"immediate_operand\" \"i,i\"))\n-   (clobber (match_operand:SI 5 \"register_operand\" \"r,r\"))\n+  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"b\"))\n+\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"b\")))\n+   (use (match_operand:SI 2 \"immediate_operand\" \"i\"))\n+   (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n+   (clobber (match_operand:SI 4 \"register_operand\" \"=r\"))\n    (clobber (reg:SI  8))\n    (clobber (reg:SI  9))\n    (clobber (reg:SI 10))\n    (clobber (reg:SI 11))\n    (clobber (reg:SI 12))\n-   (clobber (match_scratch:SI 6 \"=q,q\"))]\n+   (clobber (match_scratch:SI 5 \"=q\"))]\n   \"TARGET_STRING && TARGET_POWER\n    && INTVAL (operands[2]) > 16 && INTVAL (operands[2]) <= 24\n    && (REGNO (operands[0]) < 7 || REGNO (operands[0]) > 12)\n    && (REGNO (operands[1]) < 7 || REGNO (operands[1]) > 12)\n-   && REGNO (operands[5]) == 7\"\n-  \"@\n-   {lsi|lswi} %5,%1,%2\\;{stsi|stswi} %5,%0,%2\n-   {lsi|lswi} %5,%1,%2\\;{cal %0,%4(%0)|addi %0,%0,%4}\\;{stsi|stswi} %5,%0,%2\\;{cal %1,%4(%1)|addi %1,%1,%4}\"\n-  [(set_attr \"length\" \"8,16\")])\n+   && REGNO (operands[4]) == 7\"\n+  \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n+  [(set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n-  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"+&b,&b\"))\n-\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"+&b,&b\")))\n-   (set (match_dup 0)\n-\t(plus:SI (match_dup 0)\n-\t\t (match_operand:SI 4 \"immediate_operand\" \"O,i\")))\n-   (set (match_dup 1)\n-\t(plus:SI (match_dup 1)\n-\t\t (match_dup 4)))\n-   (use (match_operand:SI 2 \"immediate_operand\" \"i,i\"))\n-   (use (match_operand:SI 3 \"immediate_operand\" \"i,i\"))\n-   (clobber (match_operand:SI 5 \"register_operand\" \"r,r\"))\n+  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"b\"))\n+\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"b\")))\n+   (use (match_operand:SI 2 \"immediate_operand\" \"i\"))\n+   (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n+   (clobber (match_operand:SI 4 \"register_operand\" \"=r\"))\n    (clobber (reg:SI  8))\n    (clobber (reg:SI  9))\n    (clobber (reg:SI 10))\n    (clobber (reg:SI 11))\n    (clobber (reg:SI 12))\n-   (clobber (match_scratch:SI 6 \"X,X\"))]\n+   (clobber (match_scratch:SI 5 \"X\"))]\n   \"TARGET_STRING && !TARGET_POWER\n    && INTVAL (operands[2]) > 16 && INTVAL (operands[2]) <= 32\n    && (REGNO (operands[0]) < 7 || REGNO (operands[0]) > 12)\n    && (REGNO (operands[1]) < 7 || REGNO (operands[1]) > 12)\n-   && REGNO (operands[5]) == 7\"\n-  \"@\n-   {lsi|lswi} %5,%1,%2\\;{stsi|stswi} %5,%0,%2\n-   {lsi|lswi} %5,%1,%2\\;{cal %0,%4(%0)|addi %0,%0,%4}\\;{stsi|stswi} %5,%0,%2\\;{cal %1,%4(%1)|addi %1,%1,%4}\"\n-  [(set_attr \"length\" \"8,16\")])\n+   && REGNO (operands[4]) == 7\"\n+  \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n+  [(set_attr \"length\" \"8\")])\n \n ;; Move up to 16 bytes at a time, using 4 fixed registers to avoid spill problems\n ;; with TImode\n (define_expand \"movstrsi_4reg\"\n   [(parallel [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"\"))\n \t\t   (mem:BLK (match_operand:SI 1 \"register_operand\" \"\")))\n-\t      (set (match_dup 0)\n-\t\t   (plus:SI (match_dup 0)\n-\t\t\t    (match_operand:SI 4 \"immediate_operand\" \"\")))\n-\t      (set (match_dup 1)\n-\t\t   (plus:SI (match_dup 1)\n-\t\t\t    (match_dup 4)))\n \t      (use (match_operand:SI 2 \"immediate_operand\" \"\"))\n \t      (use (match_operand:SI 3 \"immediate_operand\" \"\"))\n \t      (clobber (reg:SI  9))\n \t      (clobber (reg:SI 10))\n \t      (clobber (reg:SI 11))\n \t      (clobber (reg:SI 12))\n-\t      (clobber (match_scratch:SI 5 \"\"))])]\n+\t      (clobber (match_scratch:SI 4 \"\"))])]\n   \"TARGET_STRING\"\n   \"\")\n \n (define_insn \"\"\n-  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"+&b,&b\"))\n-\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"+&b,&b\")))\n-   (set (match_dup 0)\n-\t(plus:SI (match_dup 0)\n-\t\t (match_operand:SI 4 \"immediate_operand\" \"O,i\")))\n-   (set (match_dup 1)\n-\t(plus:SI (match_dup 1)\n-\t\t (match_dup 4)))\n-   (use (match_operand:SI 2 \"immediate_operand\" \"i,i\"))\n-   (use (match_operand:SI 3 \"immediate_operand\" \"i,i\"))\n-   (clobber (match_operand:SI 5 \"register_operand\" \"r,r\"))\n+  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"b\"))\n+\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"b\")))\n+   (use (match_operand:SI 2 \"immediate_operand\" \"i\"))\n+   (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n+   (clobber (match_operand:SI 4 \"register_operand\" \"=r\"))\n    (clobber (reg:SI 10))\n    (clobber (reg:SI 11))\n    (clobber (reg:SI 12))\n-   (clobber (match_scratch:SI 6 \"=q,q\"))]\n+   (clobber (match_scratch:SI 5 \"=q\"))]\n   \"TARGET_STRING && TARGET_POWER\n    && INTVAL (operands[2]) > 8 && INTVAL (operands[2]) <= 16\n    && (REGNO (operands[0]) < 9 || REGNO (operands[0]) > 12)\n    && (REGNO (operands[1]) < 9 || REGNO (operands[1]) > 12)\n-   && REGNO (operands[5]) == 9\"\n-  \"@\n-   {lsi|lswi} %5,%1,%2\\;{stsi|stswi} %5,%0,%2\n-   {lsi|lswi} %5,%1,%2\\;{cal %0,%4(%0)|addi %0,%0,%4}\\;{stsi|stswi} %5,%0,%2\\;{cal %1,%4(%1)|addi %1,%1,%4}\"\n-  [(set_attr \"length\" \"8,16\")])\n+   && REGNO (operands[4]) == 9\"\n+  \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n+  [(set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n-  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"+&b,&b\"))\n-\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"+&b,&b\")))\n-   (set (match_dup 0)\n-\t(plus:SI (match_dup 0)\n-\t\t (match_operand:SI 4 \"immediate_operand\" \"O,i\")))\n-   (set (match_dup 1)\n-\t(plus:SI (match_dup 1)\n-\t\t (match_dup 4)))\n-   (use (match_operand:SI 2 \"immediate_operand\" \"i,i\"))\n-   (use (match_operand:SI 3 \"immediate_operand\" \"i,i\"))\n-   (clobber (match_operand:SI 5 \"register_operand\" \"r,r\"))\n+  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"b\"))\n+\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"b\")))\n+   (use (match_operand:SI 2 \"immediate_operand\" \"i\"))\n+   (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n+   (clobber (match_operand:SI 4 \"register_operand\" \"=r\"))\n    (clobber (reg:SI 10))\n    (clobber (reg:SI 11))\n    (clobber (reg:SI 12))\n-   (clobber (match_scratch:SI 6 \"X,X\"))]\n+   (clobber (match_scratch:SI 5 \"X\"))]\n   \"TARGET_STRING && !TARGET_POWER\n    && INTVAL (operands[2]) > 8 && INTVAL (operands[2]) <= 16\n    && (REGNO (operands[0]) < 9 || REGNO (operands[0]) > 12)\n    && (REGNO (operands[1]) < 9 || REGNO (operands[1]) > 12)\n-   && REGNO (operands[5]) == 9\"\n-  \"@\n-   {lsi|lswi} %5,%1,%2\\;{stsi|stswi} %5,%0,%2\n-   {lsi|lswi} %5,%1,%2\\;{cal %0,%4(%0)|addi %0,%0,%4}\\;{stsi|stswi} %5,%0,%2\\;{cal %1,%4(%1)|addi %1,%1,%4}\"\n-  [(set_attr \"length\" \"8,16\")])\n+   && REGNO (operands[4]) == 9\"\n+  \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n+  [(set_attr \"length\" \"8\")])\n \n ;; Move up to 8 bytes at a time.\n (define_expand \"movstrsi_2reg\"\n   [(parallel [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"\"))\n \t\t   (mem:BLK (match_operand:SI 1 \"register_operand\" \"\")))\n-\t      (set (match_dup 0)\n-\t\t   (plus:SI (match_dup 0)\n-\t\t\t    (match_operand:SI 4 \"immediate_operand\" \"\")))\n-\t      (set (match_dup 1)\n-\t\t   (plus:SI (match_dup 1)\n-\t\t\t    (match_dup 4)))\n \t      (use (match_operand:SI 2 \"immediate_operand\" \"\"))\n \t      (use (match_operand:SI 3 \"immediate_operand\" \"\"))\n-\t      (clobber (match_scratch:DI 5 \"\"))\n-\t      (clobber (match_scratch:SI 6 \"\"))])]\n+\t      (clobber (match_scratch:DI 4 \"\"))\n+\t      (clobber (match_scratch:SI 5 \"\"))])]\n   \"TARGET_STRING && !TARGET_64BIT\"\n   \"\")\n \n (define_insn \"\"\n-  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"+&b,&b\"))\n-\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"+&b,&b\")))\n-   (set (match_dup 0)\n-\t(plus:SI (match_dup 0)\n-\t\t (match_operand:SI 4 \"immediate_operand\" \"O,i\")))\n-   (set (match_dup 1)\n-\t(plus:SI (match_dup 1)\n-\t\t (match_dup 4)))\n-   (use (match_operand:SI 2 \"immediate_operand\" \"i,i\"))\n-   (use (match_operand:SI 3 \"immediate_operand\" \"i,i\"))\n-   (clobber (match_scratch:DI 5 \"=&r,&r\"))\n-   (clobber (match_scratch:SI 6 \"=q,q\"))]\n+  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"b\"))\n+\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"b\")))\n+   (use (match_operand:SI 2 \"immediate_operand\" \"i\"))\n+   (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n+   (clobber (match_scratch:DI 4 \"=&r\"))\n+   (clobber (match_scratch:SI 5 \"=q\"))]\n   \"TARGET_STRING && TARGET_POWER && !TARGET_64BIT\n-    && INTVAL (operands[2]) > 4 && INTVAL (operands[2]) <= 8\"\n-  \"@\n-   {lsi|lswi} %5,%1,%2\\;{stsi|stswi} %5,%0,%2\n-   {lsi|lswi} %5,%1,%2\\;{cal %0,%4(%0)|addi %0,%0,%4}\\;{stsi|stswi} %5,%0,%2\\;{cal %1,%4(%1)|addi %1,%1,%4}\"\n-  [(set_attr \"length\" \"8,16\")])\n+   && INTVAL (operands[2]) > 4 && INTVAL (operands[2]) <= 8\"\n+  \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n+  [(set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n-  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"+&b,&b\"))\n-\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"+&b,&b\")))\n-   (set (match_dup 0)\n-\t(plus:SI (match_dup 0)\n-\t\t (match_operand:SI 4 \"immediate_operand\" \"O,i\")))\n-   (set (match_dup 1)\n-\t(plus:SI (match_dup 1)\n-\t\t (match_dup 4)))\n-   (use (match_operand:SI 2 \"immediate_operand\" \"i,i\"))\n-   (use (match_operand:SI 3 \"immediate_operand\" \"i,i\"))\n-   (clobber (match_scratch:DI 5 \"=&r,&r\"))\n-   (clobber (match_scratch:SI 6 \"X,X\"))]\n+  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"b\"))\n+\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"b\")))\n+   (use (match_operand:SI 2 \"immediate_operand\" \"i\"))\n+   (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n+   (clobber (match_scratch:DI 4 \"=&r\"))\n+   (clobber (match_scratch:SI 5 \"X\"))]\n   \"TARGET_STRING && !TARGET_POWER && !TARGET_64BIT\n    && INTVAL (operands[2]) > 4 && INTVAL (operands[2]) <= 8\"\n-  \"@\n-   {lsi|lswi} %5,%1,%2\\;{stsi|stswi} %5,%0,%2\n-   {lsi|lswi} %5,%1,%2\\;{cal %0,%4(%0)|addi %0,%0,%4}\\;{stsi|stswi} %5,%0,%2\\;{cal %1,%4(%1)|addi %1,%1,%4}\"\n-  [(set_attr \"length\" \"8,16\")])\n+  \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n+  [(set_attr \"length\" \"8\")])\n \n ;; Move up to 4 bytes at a time.\n (define_expand \"movstrsi_1reg\"\n   [(parallel [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"\"))\n \t\t   (mem:BLK (match_operand:SI 1 \"register_operand\" \"\")))\n-\t      (set (match_dup 0)\n-\t\t   (plus:SI (match_dup 0)\n-\t\t\t    (match_operand:SI 4 \"immediate_operand\" \"\")))\n-\t      (set (match_dup 1)\n-\t\t   (plus:SI (match_dup 1)\n-\t\t\t    (match_dup 4)))\n \t      (use (match_operand:SI 2 \"immediate_operand\" \"\"))\n \t      (use (match_operand:SI 3 \"immediate_operand\" \"\"))\n-\t      (clobber (match_scratch:SI 5 \"\"))\n-\t      (clobber (match_scratch:SI 6 \"\"))])]\n+\t      (clobber (match_scratch:SI 4 \"\"))\n+\t      (clobber (match_scratch:SI 5 \"\"))])]\n   \"TARGET_STRING\"\n   \"\")\n \n (define_insn \"\"\n-  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"+&b,&b\"))\n-\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"+&b,&b\")))\n-   (set (match_dup 0)\n-\t(plus:SI (match_dup 0)\n-\t\t (match_operand:SI 4 \"immediate_operand\" \"O,i\")))\n-   (set (match_dup 1)\n-\t(plus:SI (match_dup 1)\n-\t\t (match_dup 4)))\n-   (use (match_operand:SI 2 \"immediate_operand\" \"i,i\"))\n-   (use (match_operand:SI 3 \"immediate_operand\" \"i,i\"))\n-   (clobber (match_scratch:SI 5 \"=&r,&r\"))\n-   (clobber (match_scratch:SI 6 \"=q,q\"))]\n+  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"b\"))\n+\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"b\")))\n+   (use (match_operand:SI 2 \"immediate_operand\" \"i\"))\n+   (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n+   (clobber (match_scratch:SI 4 \"=&r\"))\n+   (clobber (match_scratch:SI 5 \"=q\"))]\n   \"TARGET_STRING && TARGET_POWER\n    && INTVAL (operands[2]) > 0 && INTVAL (operands[2]) <= 4\"\n-  \"@\n-   {lsi|lswi} %5,%1,%2\\;{stsi|stswi} %5,%0,%2\n-   {lsi|lswi} %5,%1,%2\\;{cal %0,%4(%0)|addi %0,%0,%4}\\;{stsi|stswi} %5,%0,%2\\;{cal %1,%4(%1)|addi %1,%1,%4}\"\n-  [(set_attr \"length\" \"8,16\")])\n+  \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n+  [(set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n-  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"+&b,&b\"))\n-\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"+&b,&b\")))\n-   (set (match_dup 0)\n-\t(plus:SI (match_dup 0)\n-\t\t (match_operand:SI 4 \"immediate_operand\" \"O,i\")))\n-   (set (match_dup 1)\n-\t(plus:SI (match_dup 1)\n-\t\t (match_dup 4)))\n-   (use (match_operand:SI 2 \"immediate_operand\" \"i,i\"))\n-   (use (match_operand:SI 3 \"immediate_operand\" \"i,i\"))\n-   (clobber (match_scratch:SI 5 \"=&r,&r\"))\n-   (clobber (match_scratch:SI 6 \"X,X\"))]\n+  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"b\"))\n+\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"b\")))\n+   (use (match_operand:SI 2 \"immediate_operand\" \"i\"))\n+   (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n+   (clobber (match_scratch:SI 4 \"=&r\"))\n+   (clobber (match_scratch:SI 5 \"X\"))]\n   \"TARGET_STRING && !TARGET_POWER\n    && INTVAL (operands[2]) > 0 && INTVAL (operands[2]) <= 4\"\n-  \"@\n-   {lsi|lswi} %5,%1,%2\\;{stsi|stswi} %5,%0,%2\n-   {lsi|lswi} %5,%1,%2\\;{cal %0,%4(%0)|addi %0,%0,%4}\\;{stsi|stswi} %5,%0,%2\\;{cal %1,%4(%1)|addi %1,%1,%4}\"\n-  [(set_attr \"length\" \"8,16\")])\n+  \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n+  [(set_attr \"length\" \"8\")])\n \n \f\n ;; Define insns that do load or store with update.  Some of these we can"}]}