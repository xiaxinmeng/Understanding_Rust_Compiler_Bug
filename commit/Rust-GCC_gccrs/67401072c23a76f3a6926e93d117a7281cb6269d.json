{"sha": "67401072c23a76f3a6926e93d117a7281cb6269d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc0MDEwNzJjMjNhNzZmM2E2OTI2ZTkzZDExN2E3MjgxY2I2MjY5ZA==", "commit": {"author": {"name": "Chen Liqin", "email": "liqin.gcc@gmail.com", "date": "2012-09-06T03:07:53Z"}, "committer": {"name": "Chen Liqin", "email": "liqin@gcc.gnu.org", "date": "2012-09-06T03:07:53Z"}, "message": "score.c: Remove TARGET_LEGITIMIZE_ADDRESS define and score_legitimize_address function...\n\n2012-09-06  Chen Liqin  <liqin.gcc@gmail.com>\n\n\t* config/score/score.c: Remove TARGET_LEGITIMIZE_ADDRESS define\n\tand score_legitimize_address function, use compiler default code instead.\n\nFrom-SVN: r191004", "tree": {"sha": "25bf9e894334b3724d9dcfb56afeaf1617a1546f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25bf9e894334b3724d9dcfb56afeaf1617a1546f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67401072c23a76f3a6926e93d117a7281cb6269d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67401072c23a76f3a6926e93d117a7281cb6269d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67401072c23a76f3a6926e93d117a7281cb6269d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67401072c23a76f3a6926e93d117a7281cb6269d/comments", "author": null, "committer": null, "parents": [{"sha": "eff4ae820bf033c67d97dd8d9090f0585fb646c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eff4ae820bf033c67d97dd8d9090f0585fb646c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eff4ae820bf033c67d97dd8d9090f0585fb646c4"}], "stats": {"total": 32, "additions": 5, "deletions": 27}, "files": [{"sha": "be5aeebdfd534140fbc963c9cacc4689e9756e2f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67401072c23a76f3a6926e93d117a7281cb6269d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67401072c23a76f3a6926e93d117a7281cb6269d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67401072c23a76f3a6926e93d117a7281cb6269d", "patch": "@@ -1,3 +1,8 @@\n+2012-09-06  Chen Liqin  <liqin.gcc@gmail.com>\n+\n+\t* config/score/score.c: Remove TARGET_LEGITIMIZE_ADDRESS define\n+\tand score_legitimize_address function, use compiler default code instead.\n+\n 2012-09-05  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-inline.c (want_inline_small_function_p): Use INLINE_HINT_loop_iterations"}, {"sha": "3b550861515f0692c8581506a2b8ec7e7de2b23d", "filename": "gcc/config/score/score.c", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67401072c23a76f3a6926e93d117a7281cb6269d/gcc%2Fconfig%2Fscore%2Fscore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67401072c23a76f3a6926e93d117a7281cb6269d/gcc%2Fconfig%2Fscore%2Fscore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.c?ref=67401072c23a76f3a6926e93d117a7281cb6269d", "patch": "@@ -120,9 +120,6 @@ struct extern_list *extern_head = 0;\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE          score_option_override\n \n-#undef TARGET_LEGITIMIZE_ADDRESS\n-#define TARGET_LEGITIMIZE_ADDRESS\tscore_legitimize_address\n-\n #undef  TARGET_SCHED_ISSUE_RATE\n #define TARGET_SCHED_ISSUE_RATE         score_issue_rate\n \n@@ -541,30 +538,6 @@ score_split_symbol (rtx temp, rtx addr)\n   return gen_rtx_LO_SUM (Pmode, high, addr);\n }\n \n-/* This function is used to implement LEGITIMIZE_ADDRESS.  If X can\n-   be legitimized in a way that the generic machinery might not expect,\n-   return the new address.  */\n-static rtx\n-score_legitimize_address (rtx x)\n-{\n-  enum score_symbol_type symbol_type;\n-\n-  if (score_symbolic_constant_p (x, &symbol_type)\n-      && symbol_type == SYMBOL_GENERAL)\n-    return score_split_symbol (0, x);\n-\n-  if (GET_CODE (x) == PLUS\n-      && GET_CODE (XEXP (x, 1)) == CONST_INT)\n-    {\n-      rtx reg = XEXP (x, 0);\n-      if (!score_valid_base_register_p (reg, 0))\n-        reg = copy_to_mode_reg (Pmode, reg);\n-      return score_add_offset (reg, INTVAL (XEXP (x, 1)));\n-    }\n-\n-  return x;\n-}\n-\n /* Fill INFO with information about a single argument.  CUM is the\n    cumulative state for earlier arguments.  MODE is the mode of this\n    argument and TYPE is its type (if known).  NAMED is true if this"}]}