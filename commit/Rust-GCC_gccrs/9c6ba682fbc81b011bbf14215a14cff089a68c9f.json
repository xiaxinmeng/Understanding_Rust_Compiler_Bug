{"sha": "9c6ba682fbc81b011bbf14215a14cff089a68c9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM2YmE2ODJmYmM4MWIwMTFiYmYxNDIxNWExNGNmZjA4OWE2OGM5Zg==", "commit": {"author": {"name": "Ulrich Drepper", "email": "drepper@gcc.gnu.org", "date": "1999-02-17T22:54:02Z"}, "committer": {"name": "Ulrich Drepper", "email": "drepper@gcc.gnu.org", "date": "1999-02-17T22:54:02Z"}, "message": "Fix typo.\n\nFrom-SVN: r25273", "tree": {"sha": "78bb44c4234ff301003295b461ad9ef8a955aa78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78bb44c4234ff301003295b461ad9ef8a955aa78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c6ba682fbc81b011bbf14215a14cff089a68c9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c6ba682fbc81b011bbf14215a14cff089a68c9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c6ba682fbc81b011bbf14215a14cff089a68c9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c6ba682fbc81b011bbf14215a14cff089a68c9f/comments", "author": null, "committer": null, "parents": [{"sha": "3fd71a527ef1afd65299554c36d47e509b824abe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fd71a527ef1afd65299554c36d47e509b824abe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fd71a527ef1afd65299554c36d47e509b824abe"}], "stats": {"total": 277, "additions": 238, "deletions": 39}, "files": [{"sha": "5cc9ff05dc5326ab34b7589341cac5e307088932", "filename": "gcc/f/intdoc.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6ba682fbc81b011bbf14215a14cff089a68c9f/gcc%2Ff%2Fintdoc.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6ba682fbc81b011bbf14215a14cff089a68c9f/gcc%2Ff%2Fintdoc.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fintdoc.in?ref=9c6ba682fbc81b011bbf14215a14cff089a68c9f", "patch": "@@ -2584,7 +2584,7 @@ to such programs, to wrap around\n (change from a larger value to a smaller one)\n as of the Year 10000.\n \n-@xref{Fdate Intrinsic (subroutine)} for an equivalent routine.\n+@xref{FDate Intrinsic (subroutine)} for an equivalent routine.\n \")\n \n DEFDOC (IBCLR, \"Clear a bit.\", \"\\"}, {"sha": "ad3ac77831a51c1b24f0a8ecdc0d2bff15e17d36", "filename": "gcc/f/intdoc.texi", "status": "modified", "additions": 237, "deletions": 38, "changes": 275, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6ba682fbc81b011bbf14215a14cff089a68c9f/gcc%2Ff%2Fintdoc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6ba682fbc81b011bbf14215a14cff089a68c9f/gcc%2Ff%2Fintdoc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fintdoc.texi?ref=9c6ba682fbc81b011bbf14215a14cff089a68c9f", "patch": "@@ -46,7 +46,7 @@\n @end ifset\n @ifset familyF77\n * ALog Intrinsic::      Natural logarithm (archaic).\n-* ALog10 Intrinsic::    Natural logarithm (archaic).\n+* ALog10 Intrinsic::    Common logarithm (archaic).\n * AMax0 Intrinsic::     Maximum value (archaic).\n * AMax1 Intrinsic::     Maximum value (archaic).\n * AMin0 Intrinsic::     Minimum value (archaic).\n@@ -240,7 +240,7 @@\n @ifset familyF77\n * DInt Intrinsic::      Truncate to whole number (archaic).\n * DLog Intrinsic::      Natural logarithm (archaic).\n-* DLog10 Intrinsic::    Natural logarithm (archaic).\n+* DLog10 Intrinsic::    Common logarithm (archaic).\n * DMax1 Intrinsic::     Maximum value (archaic).\n * DMin1 Intrinsic::     Minimum value (archaic).\n * DMod Intrinsic::      Remainder (archaic).\n@@ -274,10 +274,10 @@\n * DTanH Intrinsic::     Hyperbolic tangent (archaic).\n @end ifset\n @ifset familyF2U\n-* Dtime Intrinsic (subroutine):: Get elapsed time since last time.\n+* DTime Intrinsic (subroutine):: Get elapsed time since last time.\n @end ifset\n @ifset familyBADU77\n-* Dtime Intrinsic (function):: Get elapsed time since last time.\n+* DTime Intrinsic (function):: Get elapsed time since last time.\n @end ifset\n @ifset familyF90\n * EOShift Intrinsic::   (Reserved for future use.)\n@@ -297,8 +297,8 @@\n * Exponent Intrinsic::  (Reserved for future use.)\n @end ifset\n @ifset familyF2U\n-* Fdate Intrinsic (subroutine):: Get current time as Day Mon dd hh:mm:ss yyyy.\n-* Fdate Intrinsic (function):: Get current time as Day Mon dd hh:mm:ss yyyy.\n+* FDate Intrinsic (subroutine):: Get current time as Day Mon dd hh:mm:ss yyyy.\n+* FDate Intrinsic (function):: Get current time as Day Mon dd hh:mm:ss yyyy.\n * FGet Intrinsic (subroutine):: Read a character from unit 5 stream-wise.\n @end ifset\n @ifset familyBADU77\n@@ -530,7 +530,7 @@\n @end ifset\n @ifset familyF77\n * Log Intrinsic::       Natural logarithm.\n-* Log10 Intrinsic::     Natural logarithm.\n+* Log10 Intrinsic::     Common logarithm.\n @end ifset\n @ifset familyF90\n * Logical Intrinsic::   (Reserved for future use.)\n@@ -2626,6 +2626,16 @@ Returns in @var{Seconds} the current value of the system time.\n This implementation of the Fortran 95 intrinsic is just an alias for\n @code{second} @xref{Second Intrinsic (subroutine)}.\n \n+@cindex wraparound, timings\n+@cindex limits, timings\n+On some systems, the underlying timings are represented\n+using types with sufficiently small limits that overflows\n+(wraparounds) are possible, such as 32-bit types.\n+Therefore, the values returned by this intrinsic\n+might be, or become, negative,\n+or numerically less than previous values,\n+during a single run of the compiled program.\n+\n @node CShift Intrinsic\n @subsubsection CShift Intrinsic\n @cindex CShift intrinsic\n@@ -2966,7 +2976,11 @@ representing the numeric day of the month @var{dd}, a three-character\n abbreviation of the month name @var{mmm} and the last two digits of\n the year @var{yy}, e.g.@: @samp{25-Nov-96}.\n \n+@cindex Y2K compliance\n+@cindex Year 2000 compliance\n This intrinsic is not recommended, due to the year 2000 approaching.\n+Therefore, programs making use of this intrinsic\n+might not be Year 2000 (Y2K) compliant.\n @xref{CTime Intrinsic (subroutine)}, for information on obtaining more digits\n for the current (or any) date.\n \n@@ -3016,6 +3030,17 @@ minutes from UTC, hour of the day, minutes of the hour and milliseconds\n of the second in successive values of the array.\n @end table\n \n+@cindex Y10K compliance\n+@cindex Year 10000 compliance\n+@cindex wraparound, Y10K\n+@cindex limits, Y10K\n+Programs making use of this intrinsic\n+might not be Year 10000 (Y10K) compliant.\n+For example, the date might appear,\n+to such programs, to wrap around\n+(change from a larger value to a smaller one)\n+as of the Year 10000.\n+\n On systems where a millisecond timer isn't available, the millisecond\n value is returned as zero.\n \n@@ -4087,14 +4112,14 @@ to one type for @var{X}.\n \n @end ifset\n @ifset familyF2U\n-@node Dtime Intrinsic (subroutine)\n-@subsubsection Dtime Intrinsic (subroutine)\n-@cindex Dtime intrinsic\n-@cindex intrinsics, Dtime\n+@node DTime Intrinsic (subroutine)\n+@subsubsection DTime Intrinsic (subroutine)\n+@cindex DTime intrinsic\n+@cindex intrinsics, DTime\n \n @noindent\n @example\n-CALL Dtime(@var{Result}, @var{TArray})\n+CALL DTime(@var{Result}, @var{TArray})\n @end example\n \n @noindent\n@@ -4119,26 +4144,36 @@ The value of @var{Result} is equal to @samp{@var{TArray}(1) + @var{TArray}(2)}.\n Subsequent invocations of @samp{DTIME()} set values based on accumulations\n since the previous invocation.\n \n+@cindex wraparound, timings\n+@cindex limits, timings\n+On some systems, the underlying timings are represented\n+using types with sufficiently small limits that overflows\n+(wraparounds) are possible, such as 32-bit types.\n+Therefore, the values returned by this intrinsic\n+might be, or become, negative,\n+or numerically less than previous values,\n+during a single run of the compiled program.\n+\n Some non-GNU implementations of Fortran provide this intrinsic as\n only a function, not as a subroutine.\n \n For information on other intrinsics with the same name:\n-@xref{Dtime Intrinsic (function)}.\n+@xref{DTime Intrinsic (function)}.\n \n @end ifset\n @ifset familyBADU77\n-@node Dtime Intrinsic (function)\n-@subsubsection Dtime Intrinsic (function)\n-@cindex Dtime intrinsic\n-@cindex intrinsics, Dtime\n+@node DTime Intrinsic (function)\n+@subsubsection DTime Intrinsic (function)\n+@cindex DTime intrinsic\n+@cindex intrinsics, DTime\n \n @noindent\n @example\n-Dtime(@var{TArray})\n+DTime(@var{TArray})\n @end example\n \n @noindent\n-Dtime: @code{REAL(KIND=1)} function.\n+DTime: @code{REAL(KIND=1)} function.\n \n @noindent\n @var{TArray}: @code{REAL(KIND=1)}; DIMENSION(2); INTENT(OUT).\n@@ -4159,11 +4194,21 @@ The functions' value is equal to @samp{@var{TArray}(1) + @var{TArray}(2)}.\n Subsequent invocations of @samp{DTIME()} return values accumulated since the\n previous invocation.\n \n+@cindex wraparound, timings\n+@cindex limits, timings\n+On some systems, the underlying timings are represented\n+using types with sufficiently small limits that overflows\n+(wraparounds) are possible, such as 32-bit types.\n+Therefore, the values returned by this intrinsic\n+might be, or become, negative,\n+or numerically less than previous values,\n+during a single run of the compiled program.\n+\n Due to the side effects performed by this intrinsic, the function\n form is not recommended.\n \n For information on other intrinsics with the same name:\n-@xref{Dtime Intrinsic (subroutine)}.\n+@xref{DTime Intrinsic (subroutine)}.\n \n @end ifset\n @ifset familyF90\n@@ -4270,6 +4315,16 @@ and the user and system components of this in @samp{@var{TArray}(1)}\n and @samp{@var{TArray}(2)} respectively.\n The value of @var{Result} is equal to @samp{@var{TArray}(1) + @var{TArray}(2)}.\n \n+@cindex wraparound, timings\n+@cindex limits, timings\n+On some systems, the underlying timings are represented\n+using types with sufficiently small limits that overflows\n+(wraparounds) are possible, such as 32-bit types.\n+Therefore, the values returned by this intrinsic\n+might be, or become, negative,\n+or numerically less than previous values,\n+during a single run of the compiled program.\n+\n Some non-GNU implementations of Fortran provide this intrinsic as\n only a function, not as a subroutine.\n \n@@ -4305,6 +4360,16 @@ and the user and system components of this in @samp{@var{TArray}(1)}\n and @samp{@var{TArray}(2)} respectively.\n The functions' value is equal to @samp{@var{TArray}(1) + @var{TArray}(2)}.\n \n+@cindex wraparound, timings\n+@cindex limits, timings\n+On some systems, the underlying timings are represented\n+using types with sufficiently small limits that overflows\n+(wraparounds) are possible, such as 32-bit types.\n+Therefore, the values returned by this intrinsic\n+might be, or become, negative,\n+or numerically less than previous values,\n+during a single run of the compiled program.\n+\n For information on other intrinsics with the same name:\n @xref{ETime Intrinsic (subroutine)}.\n \n@@ -4375,14 +4440,14 @@ external procedure.\n \n @end ifset\n @ifset familyF2U\n-@node Fdate Intrinsic (subroutine)\n-@subsubsection Fdate Intrinsic (subroutine)\n-@cindex Fdate intrinsic\n-@cindex intrinsics, Fdate\n+@node FDate Intrinsic (subroutine)\n+@subsubsection FDate Intrinsic (subroutine)\n+@cindex FDate intrinsic\n+@cindex intrinsics, FDate\n \n @noindent\n @example\n-CALL Fdate(@var{Date})\n+CALL FDate(@var{Date})\n @end example\n \n @noindent\n@@ -4403,26 +4468,37 @@ Equivalent to:\n CALL CTIME(@var{Date}, TIME8())\n @end example\n \n+@cindex Y10K compliance\n+@cindex Year 10000 compliance\n+@cindex wraparound, Y10K\n+@cindex limits, Y10K\n+Programs making use of this intrinsic\n+might not be Year 10000 (Y10K) compliant.\n+For example, the date might appear,\n+to such programs, to wrap around\n+(change from a larger value to a smaller one)\n+as of the Year 10000.\n+\n @xref{CTime Intrinsic (subroutine)}.\n \n Some non-GNU implementations of Fortran provide this intrinsic as\n only a function, not as a subroutine.\n \n For information on other intrinsics with the same name:\n-@xref{Fdate Intrinsic (function)}.\n+@xref{FDate Intrinsic (function)}.\n \n-@node Fdate Intrinsic (function)\n-@subsubsection Fdate Intrinsic (function)\n-@cindex Fdate intrinsic\n-@cindex intrinsics, Fdate\n+@node FDate Intrinsic (function)\n+@subsubsection FDate Intrinsic (function)\n+@cindex FDate intrinsic\n+@cindex intrinsics, FDate\n \n @noindent\n @example\n-Fdate()\n+FDate()\n @end example\n \n @noindent\n-Fdate: @code{CHARACTER*(*)} function.\n+FDate: @code{CHARACTER*(*)} function.\n \n @noindent\n Intrinsic groups: @code{unix}.\n@@ -4438,10 +4514,21 @@ Equivalent to:\n CTIME(TIME8())\n @end example\n \n+@cindex Y10K compliance\n+@cindex Year 10000 compliance\n+@cindex wraparound, Y10K\n+@cindex limits, Y10K\n+Programs making use of this intrinsic\n+might not be Year 10000 (Y10K) compliant.\n+For example, the date might appear,\n+to such programs, to wrap around\n+(change from a larger value to a smaller one)\n+as of the Year 10000.\n+\n @xref{CTime Intrinsic (function)}.\n \n For information on other intrinsics with the same name:\n-@xref{Fdate Intrinsic (subroutine)}.\n+@xref{FDate Intrinsic (subroutine)}.\n \n @node FGet Intrinsic (subroutine)\n @subsubsection FGet Intrinsic (subroutine)\n@@ -5808,6 +5895,17 @@ of day, month (in the range 1--12), and year in elements 1, 2, and 3,\n respectively.\n The year has four significant digits.\n \n+@cindex Y10K compliance\n+@cindex Year 10000 compliance\n+@cindex wraparound, Y10K\n+@cindex limits, Y10K\n+Programs making use of this intrinsic\n+might not be Year 10000 (Y10K) compliant.\n+For example, the date might appear,\n+to such programs, to wrap around\n+(change from a larger value to a smaller one)\n+as of the Year 10000.\n+\n For information on other intrinsics with the same name:\n @xref{IDate Intrinsic (VXT)}.\n \n@@ -5843,7 +5941,20 @@ The month (in the range 1--12) is returned in @var{M},\n the day (in the range 1--7) in @var{D},\n and the year in @var{Y} (in the range 0--99).\n \n+@cindex Y2K compliance\n+@cindex Year 2000 compliance\n+@cindex wraparound, Y2K\n+@cindex limits, Y2K\n This intrinsic is not recommended, due to the year 2000 approaching.\n+Therefore, programs making use of this intrinsic\n+might not be Year 2000 (Y2K) compliant.\n+For example, the date might appear,\n+to such programs, to wrap around\n+(change from a larger value to a smaller one)\n+as of the Year 2000.\n+\n+@xref{IDate Intrinsic (UNIX)}, for information on obtaining more digits\n+for the current date.\n \n For information on other intrinsics with the same name:\n @xref{IDate Intrinsic (UNIX)}.\n@@ -7479,7 +7590,7 @@ be zero.\n \n @xref{Exp Intrinsic}, for the inverse of this function.\n \n-@xref{Log10 Intrinsic}, for the base-10 logarithm function.\n+@xref{Log10 Intrinsic}, for the `common' (base-10) logarithm function.\n \n @node Log10 Intrinsic\n @subsubsection Log10 Intrinsic\n@@ -7503,9 +7614,8 @@ Intrinsic groups: (standard FORTRAN 77).\n @noindent\n Description:\n \n-Returns the natural logarithm of @var{X}, which must\n-be greater than zero or, if type @code{COMPLEX}, must not\n-be zero.\n+Returns the common logarithm (base 10) of @var{X}, which must\n+be greater than zero or.\n \n The inverse of this function is @samp{10. ** LOG10(@var{X})}.\n \n@@ -7992,9 +8102,16 @@ Description:\n Returns the number of clock ticks since the start of the process.\n Supported on systems with @code{clock(3)} (q.v.).\n \n+@cindex wraparound, timings\n+@cindex limits, timings\n This intrinsic is not fully portable, such as to systems\n with 32-bit @code{INTEGER} types but supporting times\n wider than 32 bits.\n+Therefore, the values returned by this intrinsic\n+might be, or become, negative,\n+or numerically less than previous values,\n+during a single run of the compiled program.\n+\n @xref{MClock8 Intrinsic}, for information on a\n similar intrinsic that might be portable to more\n GNU Fortran implementations, though to fewer\n@@ -8025,6 +8142,19 @@ Description:\n Returns the number of clock ticks since the start of the process.\n Supported on systems with @code{clock(3)} (q.v.).\n \n+@cindex wraparound, timings\n+@cindex limits, timings\n+@emph{Warning:} this intrinsic does not increase the range\n+of the timing values over that returned by @code{clock(3)}.\n+On a system with a 32-bit @code{clock(3)},\n+@code{MCLOCK8} will return a 32-bit value,\n+even though converted to an @samp{INTEGER(KIND=2)} value.\n+That means overflows of the 32-bit value can still occur.\n+Therefore, the values returned by this intrinsic\n+might be, or become, negative,\n+or numerically less than previous values,\n+during a single run of the compiled program.\n+\n No Fortran implementations other than GNU Fortran are\n known to support this intrinsic at the time of this\n writing.\n@@ -9129,6 +9259,14 @@ Description:\n Returns the local time in seconds since midnight minus the value\n @var{T}.\n \n+@cindex wraparound, timings\n+@cindex limits, timings\n+This values returned by this intrinsic\n+become numerically less than previous values\n+(they wrap around) during a single run of the\n+compiler program, under normal circumstances\n+(such as running through the midnight hour).\n+\n @end ifset\n @ifset familyF2U\n @node Second Intrinsic (function)\n@@ -9153,6 +9291,16 @@ Description:\n Returns the process's runtime in seconds---the same value as the\n UNIX function @code{etime} returns.\n \n+@cindex wraparound, timings\n+@cindex limits, timings\n+On some systems, the underlying timings are represented\n+using types with sufficiently small limits that overflows\n+(wraparounds) are possible, such as 32-bit types.\n+Therefore, the values returned by this intrinsic\n+might be, or become, negative,\n+or numerically less than previous values,\n+during a single run of the compiled program.\n+\n For information on other intrinsics with the same name:\n @xref{Second Intrinsic (subroutine)}.\n \n@@ -9178,6 +9326,16 @@ Description:\n Returns the process's runtime in seconds in @var{Seconds}---the same value\n as the UNIX function @code{etime} returns.\n \n+@cindex wraparound, timings\n+@cindex limits, timings\n+On some systems, the underlying timings are represented\n+using types with sufficiently small limits that overflows\n+(wraparounds) are possible, such as 32-bit types.\n+Therefore, the values returned by this intrinsic\n+might be, or become, negative,\n+or numerically less than previous values,\n+during a single run of the compiled program.\n+\n This routine is known from Cray Fortran.  @xref{CPU_Time Intrinsic},\n for a standard equivalent.\n \n@@ -10072,6 +10230,16 @@ isn't in general.\n in this implementation since it's just the maximum C @code{unsigned\n int} value.\n \n+@cindex wraparound, timings\n+@cindex limits, timings\n+On some systems, the underlying timings are represented\n+using types with sufficiently small limits that overflows\n+(wraparounds) are possible, such as 32-bit types.\n+Therefore, the values returned by this intrinsic\n+might be, or become, negative,\n+or numerically less than previous values,\n+during a single run of the compiled program.\n+\n @end ifset\n @ifset familyF77\n @node Tan Intrinsic\n@@ -10165,9 +10333,16 @@ Returns the current time encoded as an integer\n This value is suitable for passing to @code{CTIME},\n @code{GMTIME}, and @code{LTIME}.\n \n+@cindex wraparound, timings\n+@cindex limits, timings\n This intrinsic is not fully portable, such as to systems\n with 32-bit @code{INTEGER} types but supporting times\n wider than 32 bits.\n+Therefore, the values returned by this intrinsic\n+might be, or become, negative,\n+or numerically less than previous values,\n+during a single run of the compiled program.\n+\n @xref{Time8 Intrinsic}, for information on a\n similar intrinsic that might be portable to more\n GNU Fortran implementations, though to fewer\n@@ -10200,7 +10375,18 @@ Description:\n Returns in @var{Time} a character representation of the current time as\n obtained from @code{ctime(3)}.\n \n-@xref{Fdate Intrinsic (subroutine)} for an equivalent routine.\n+@cindex Y10K compliance\n+@cindex Year 10000 compliance\n+@cindex wraparound, Y10K\n+@cindex limits, Y10K\n+Programs making use of this intrinsic\n+might not be Year 10000 (Y10K) compliant.\n+For example, the date might appear,\n+to such programs, to wrap around\n+(change from a larger value to a smaller one)\n+as of the Year 10000.\n+\n+@xref{FDate Intrinsic (subroutine)} for an equivalent routine.\n \n For information on other intrinsics with the same name:\n @xref{Time Intrinsic (UNIX)}.\n@@ -10231,6 +10417,19 @@ Returns the current time encoded as a long integer\n This value is suitable for passing to @code{CTIME},\n @code{GMTIME}, and @code{LTIME}.\n \n+@cindex wraparound, timings\n+@cindex limits, timings\n+@emph{Warning:} this intrinsic does not increase the range\n+of the timing values over that returned by @code{time(3)}.\n+On a system with a 32-bit @code{time(3)},\n+@code{TIME8} will return a 32-bit value,\n+even though converted to an @samp{INTEGER(KIND=2)} value.\n+That means overflows of the 32-bit value can still occur.\n+Therefore, the values returned by this intrinsic\n+might be, or become, negative,\n+or numerically less than previous values,\n+during a single run of the compiled program.\n+\n No Fortran implementations other than GNU Fortran are\n known to support this intrinsic at the time of this\n writing."}]}