{"sha": "321be1b3c9599a319eb5ec87a1aaafbadef697f0", "node_id": "C_kwDOANBUbNoAKDMyMWJlMWIzYzk1OTlhMzE5ZWI1ZWM4N2ExYWFhZmJhZGVmNjk3ZjA", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-04-19T09:08:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-19T09:08:38Z"}, "message": "Merge #1096\n\n1096: macros: add include! macro r=CohenArthur a=liushuyu\n\n- add `include!` macro\n\nCo-authored-by: liushuyu <liushuyu011@gmail.com>", "tree": {"sha": "b2d0cb6fbe29b3e38b29557b9090464bea927168", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2d0cb6fbe29b3e38b29557b9090464bea927168"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/321be1b3c9599a319eb5ec87a1aaafbadef697f0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiXnwWCRBK7hj4Ov3rIwAA7aoIAHpP8dCwTEq4PnqQW7j1Sq4i\nhME1zaTk/7lBy/G9JGewOyL4wg1iCkCwP42JmXrNMREJ6g84/9u0LzipFQdEs+Fy\nuxNIxURAm7givJbf3DyNAfd6+81OPkDTAPXl8fyy7kKKP3YoYs0eIXBZZOnUzYR/\nRMCjwpBa4TK8dmp3pBhzUsEbpDGkf3j8LNyJUA6XmaH++hv3D0XVY+vCvt6grbU1\n3lITzLNuQNB9vUU/+L7dclD2PxI/4W2jP0RcJwGdDtddeN9zO8hWtUoz/HhCoBOr\nsr1961ETovaZQHmvj7Dr8A/yCRKaNQiBdSmjFpOIti5HwQeOwl7+rn5mWrTkJ2w=\n=x69U\n-----END PGP SIGNATURE-----\n", "payload": "tree b2d0cb6fbe29b3e38b29557b9090464bea927168\nparent 27ad3813dccc50c9026a99b8e7c1d675c78f72e2\nparent f876cba554fcc2d4c71f7ccec55555894a005ab2\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1650359318 +0000\ncommitter GitHub <noreply@github.com> 1650359318 +0000\n\nMerge #1096\n\n1096: macros: add include! macro r=CohenArthur a=liushuyu\n\n- add `include!` macro\n\nCo-authored-by: liushuyu <liushuyu011@gmail.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/321be1b3c9599a319eb5ec87a1aaafbadef697f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/321be1b3c9599a319eb5ec87a1aaafbadef697f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/321be1b3c9599a319eb5ec87a1aaafbadef697f0/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27ad3813dccc50c9026a99b8e7c1d675c78f72e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27ad3813dccc50c9026a99b8e7c1d675c78f72e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27ad3813dccc50c9026a99b8e7c1d675c78f72e2"}, {"sha": "f876cba554fcc2d4c71f7ccec55555894a005ab2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f876cba554fcc2d4c71f7ccec55555894a005ab2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f876cba554fcc2d4c71f7ccec55555894a005ab2"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "fb302416fffdfc28d19d41fcceea06dbc675f709", "filename": "gcc/rust/expand/rust-macro-builtins.cc", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/321be1b3c9599a319eb5ec87a1aaafbadef697f0/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/321be1b3c9599a319eb5ec87a1aaafbadef697f0/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc?ref=321be1b3c9599a319eb5ec87a1aaafbadef697f0", "patch": "@@ -412,4 +412,60 @@ MacroBuiltin::cfg (Location invoc_locus, AST::MacroInvocData &invoc)\n   return AST::ASTFragment ({literal_exp});\n }\n \n+/* Expand builtin macro include!(), which includes a source file at the current\n+ scope compile time. */\n+\n+AST::ASTFragment\n+MacroBuiltin::include (Location invoc_locus, AST::MacroInvocData &invoc)\n+{\n+  /* Get target filename from the macro invocation, which is treated as a path\n+     relative to the include!-ing file (currently being compiled).  */\n+  auto lit_expr\n+    = parse_single_string_literal (invoc.get_delim_tok_tree (), invoc_locus);\n+  if (lit_expr == nullptr)\n+    return AST::ASTFragment::create_error ();\n+\n+  std::string filename\n+    = source_relative_path (lit_expr->as_string (), invoc_locus);\n+  auto target_filename\n+    = Rust::Session::get_instance ().include_extra_file (std::move (filename));\n+\n+  RAIIFile target_file (target_filename);\n+  Linemap *linemap = Session::get_instance ().linemap;\n+\n+  if (target_file.get_raw () == nullptr)\n+    {\n+      rust_error_at (lit_expr->get_locus (),\n+\t\t     \"cannot open included file %qs: %m\", target_filename);\n+      return AST::ASTFragment::create_error ();\n+    }\n+\n+  rust_debug (\"Attempting to parse included file %s\", target_filename);\n+\n+  Lexer lex (target_filename, std::move (target_file), linemap);\n+  Parser<Lexer> parser (std::move (lex));\n+\n+  auto parsed_items = parser.parse_items ();\n+  bool has_error = !parser.get_errors ().empty ();\n+\n+  for (const auto &error : parser.get_errors ())\n+    error.emit_error ();\n+\n+  if (has_error)\n+    {\n+      // inform the user that the errors above are from a included file\n+      rust_inform (invoc_locus, \"included from here\");\n+      return AST::ASTFragment::create_error ();\n+    }\n+\n+  std::vector<AST::SingleASTNode> nodes{};\n+  for (auto &item : parsed_items)\n+    {\n+      AST::SingleASTNode node (std::move (item));\n+      nodes.push_back (node);\n+    }\n+\n+  return AST::ASTFragment (nodes);\n+}\n+\n } // namespace Rust"}, {"sha": "f1d10df1ba2a662c2b5a9cd06693af6812569aac", "filename": "gcc/rust/expand/rust-macro-builtins.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/321be1b3c9599a319eb5ec87a1aaafbadef697f0/gcc%2Frust%2Fexpand%2Frust-macro-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/321be1b3c9599a319eb5ec87a1aaafbadef697f0/gcc%2Frust%2Fexpand%2Frust-macro-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-builtins.h?ref=321be1b3c9599a319eb5ec87a1aaafbadef697f0", "patch": "@@ -95,6 +95,9 @@ class MacroBuiltin\n \n   static AST::ASTFragment cfg (Location invoc_locus,\n \t\t\t       AST::MacroInvocData &invoc);\n+\n+  static AST::ASTFragment include (Location invoc_locus,\n+\t\t\t\t   AST::MacroInvocData &invoc);\n };\n } // namespace Rust\n "}, {"sha": "0c15711ab0ef8567392c8e54f72bcaf4e478af5c", "filename": "gcc/rust/rust-session-manager.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/321be1b3c9599a319eb5ec87a1aaafbadef697f0/gcc%2Frust%2Frust-session-manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/321be1b3c9599a319eb5ec87a1aaafbadef697f0/gcc%2Frust%2Frust-session-manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.h?ref=321be1b3c9599a319eb5ec87a1aaafbadef697f0", "patch": "@@ -235,6 +235,10 @@ struct Session\n    * every file so eh. */\n   std::string injected_crate_name;\n \n+  /* extra files get included during late stages of compilation (e.g. macro\n+   * expansion) */\n+  std::vector<std::string> extra_files;\n+\n   // backend wrapper to GCC GENERIC\n   Backend *backend;\n \n@@ -267,6 +271,15 @@ struct Session\n   void parse_files (int num_files, const char **files);\n   void init_options ();\n \n+  /* This function saves the filename data into the session manager using the\n+   * `move` semantics, and returns a C-style string referencing the input\n+   * std::string */\n+  inline const char *include_extra_file (std::string filename)\n+  {\n+    extra_files.push_back (std::move (filename));\n+    return extra_files.back ().c_str ();\n+  }\n+\n private:\n   Session () = default;\n   void parse_file (const char *filename);"}, {"sha": "b08258c269cb4625b68d7206b4d5fcc186d2c638", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/321be1b3c9599a319eb5ec87a1aaafbadef697f0/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/321be1b3c9599a319eb5ec87a1aaafbadef697f0/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=321be1b3c9599a319eb5ec87a1aaafbadef697f0", "patch": "@@ -757,6 +757,7 @@ Mappings::insert_macro_def (AST::MacroRulesDefinition *macro)\n       {\"concat\", MacroBuiltin::concat},\n       {\"env\", MacroBuiltin::env},\n       {\"cfg\", MacroBuiltin::cfg},\n+      {\"include\", MacroBuiltin::include},\n     };\n \n   auto builtin = builtin_macros.find (macro->get_rule_name ());"}]}