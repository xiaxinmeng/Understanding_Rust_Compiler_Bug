{"sha": "5d7c281902771a6de24a387f3c759e966e3be8ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ3YzI4MTkwMjc3MWE2ZGUyNGEzODdmM2M3NTllOTY2ZTNiZThhZA==", "commit": {"author": {"name": "Ian Dall", "email": "ian@sibyl.beware.dropbear.id.au", "date": "2002-07-16T17:46:33Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-07-16T17:46:33Z"}, "message": "invoke.texi (NS32K Options): Document -mieee-compare option\n\n        * doc/invoke.texi (NS32K Options): Document -mieee-compare option\n\n        * config/ns32k/ns32k.md (addsi3, *frame_addr, *stack_addr): merge\n        into addsi3 using register class \"x\" and \"y\".\n\n        * config/ns32k/ns32k.md (*madddf, *maddsf, *msubdf, *msubsf):\n        \"earlyclobber\" constraint modifier for some alternative.\n\n        * config/ns32k/ns32k.md (tstdf, tstsf, cmpdf, cmpsf, blt, ble)\n        (*ble, *blt): Flag to indicate bCOND and sCOND should check for\n        unordered.\n        config/ns32k/ns32k.h (CC_UNORD): define corresponding mask.\n\n        * config/ns32k/ns32k.h (TARGET_IEEE_COMPARE, MASK_IEEE_COMPARE)\n        (TARGET_SWITCHES): Add -mieee-compare option.\n        (OVERRIDE_OPTIONS): 32332 is a subset of\n        32532. Don't use IEEE_COMPARE -funsafe-math-optimizations.\n        (TARGET_SWITCHES): Fix description of bitfield option.\n        * config/ns32k/netbsd.h (TARGET_DEFAULT): Add\n        -mieee-compare option. Remove 32332 flag.\n\nFrom-SVN: r55489", "tree": {"sha": "f60acf9138da7523b7e4dd25eeabcaa082026b6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f60acf9138da7523b7e4dd25eeabcaa082026b6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d7c281902771a6de24a387f3c759e966e3be8ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d7c281902771a6de24a387f3c759e966e3be8ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d7c281902771a6de24a387f3c759e966e3be8ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d7c281902771a6de24a387f3c759e966e3be8ad/comments", "author": null, "committer": null, "parents": [{"sha": "5da4f54878a344fd7712ebdfd8e2b351b12992a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5da4f54878a344fd7712ebdfd8e2b351b12992a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5da4f54878a344fd7712ebdfd8e2b351b12992a1"}], "stats": {"total": 167, "additions": 123, "deletions": 44}, "files": [{"sha": "eb97ffcba5a17ae9f895aa75bab7fb3a0723d161", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d7c281902771a6de24a387f3c759e966e3be8ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d7c281902771a6de24a387f3c759e966e3be8ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d7c281902771a6de24a387f3c759e966e3be8ad", "patch": "@@ -1,15 +1,38 @@\n+2002-07-16  Ian Dall  <ian@sibyl.beware.dropbear.id.au>\n+\n+\t* doc/invoke.texi (NS32K Options): Document -mieee-compare option\n+\n+\t* config/ns32k/ns32k.md (addsi3, *frame_addr, *stack_addr): merge\n+\tinto addsi3 using register class \"x\" and \"y\".\n+\n+\t* config/ns32k/ns32k.md (*madddf, *maddsf, *msubdf, *msubsf):\n+\t\"earlyclobber\" constraint modifier for some alternative.\n+\t\n+\t* config/ns32k/ns32k.md (tstdf, tstsf, cmpdf, cmpsf, blt, ble)\n+\t(*ble, *blt): Flag to indicate bCOND and sCOND should check for\n+\tunordered.\n+\tconfig/ns32k/ns32k.h (CC_UNORD): define corresponding mask.\n+\n+\t* config/ns32k/ns32k.h (TARGET_IEEE_COMPARE, MASK_IEEE_COMPARE)\n+\t(TARGET_SWITCHES): Add -mieee-compare option.\n+\t(OVERRIDE_OPTIONS): 32332 is a subset of\n+\t32532. Don't use IEEE_COMPARE -funsafe-math-optimizations.\n+\t(TARGET_SWITCHES): Fix description of bitfield option.\n+\t* config/ns32k/netbsd.h (TARGET_DEFAULT): Add\n+\t-mieee-compare option. Remove 32332 flag.\n+\n 2002-07-16  Steve Ellcey  <sje@cup.hp.com>\n-\t* gcc/explow.c (convert_memory_address): Remove special handling\n+\n+\t* explow.c (convert_memory_address): Remove special handling\n \twhen POINTERS_EXTEND_UNSIGNED < 0.\n-\t* gcc/config/ia64.md (movsi_symbolic): New instruction for ILP32\n-\tmode.\n+\t* config/ia64.md (movsi_symbolic): New instruction for ILP32 mode.\n \t(movedi_symbolic): Fix typo.\n \t(load_fptr): Remove mode restriction so it works for SI and DI.\n \t(load_fptr_internal1): Ditto.\n \t(load_gprel): Ditto.\n \t(load_symptr_internal1): Ditto.\n \t(call_pic): Ditto.\n-\t* gcc/config/ia64.c (call_operand): Modify mode check.\n+\t* config/ia64.c (call_operand): Modify mode check.\n \t(ia64_expand_load_address): Handle DI and SI addresses and symbols.\n \t(ia64_expand_move): Ditto.\n \t(ia64_assemble_integer): Handle SImode function pointers."}, {"sha": "28bae88cb880f59af2e9a70dc19abdb19a16675b", "filename": "gcc/config/ns32k/netbsd.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d7c281902771a6de24a387f3c759e966e3be8ad/gcc%2Fconfig%2Fns32k%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d7c281902771a6de24a387f3c759e966e3be8ad/gcc%2Fconfig%2Fns32k%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fnetbsd.h?ref=5d7c281902771a6de24a387f3c759e966e3be8ad", "patch": "@@ -34,9 +34,10 @@ Boston, MA 02111-1307, USA.  */\n    FPU is 32381;\n    Use multiply-add instructions */\n \n+#undef TARGET_DEFAULT\n #define TARGET_DEFAULT \\\n-  (MASK_32532|MASK_32332 | MASK_NO_SB | MASK_NO_BITFIELD | \\\n-   MASK_32081|MASK_32381 | MASK_MULT_ADD)\n+  (MASK_32532 | MASK_NO_SB | MASK_NO_BITFIELD | \\\n+   MASK_32381 | MASK_IEEE_COMPARE | MASK_MULT_ADD)\n \n /* 32-bit alignment for efficiency */\n "}, {"sha": "21abff084308e169fff9acc6efb3145e2178ecb9", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d7c281902771a6de24a387f3c759e966e3be8ad/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d7c281902771a6de24a387f3c759e966e3be8ad/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=5d7c281902771a6de24a387f3c759e966e3be8ad", "patch": "@@ -82,6 +82,7 @@ Boston, MA 02111-1307, USA.  */\n \n extern int target_flags;\n \n+/* Masks for target_flags */\n #define MASK_32081\t\t1\n #define MASK_RTD\t\t2\n #define MASK_REGPARM\t\t4\n@@ -93,6 +94,7 @@ extern int target_flags;\n #define MASK_32381\t\t256\n #define MASK_MULT_ADD\t\t512\n #define MASK_SRC\t\t1024\n+#define MASK_IEEE_COMPARE 2048\n \n /* Macros used in the machine description to test the flags.  */\n \n@@ -121,17 +123,19 @@ extern int target_flags;\n \n /* Ok to use the static base register (and presume it's 0) */\n #define TARGET_SB    ((target_flags & MASK_NO_SB) == 0)\n+\n #define TARGET_HIMEM (target_flags & MASK_HIMEM)\n \n /* Compile using bitfield insns.  */\n #define TARGET_BITFIELD ((target_flags & MASK_NO_BITFIELD) == 0)\n \n+#define TARGET_IEEE_FP (target_flags & MASK_IEEE_COMPARE)\n+\n /* Macro to define tables used to set the flags.\n    This is a list in braces of pairs in braces,\n    each pair being { \"NAME\", VALUE }\n    where VALUE is the bits to set or minus the bits to clear.\n    An empty string NAME is used to identify the default VALUE.  */\n-\n #define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n   { { \"32081\", MASK_32081, N_(\"Use hardware fp\")},\t\t\t\\\n     { \"soft-float\", -(MASK_32081|MASK_32381),\t\t\t\t\\\n@@ -148,32 +152,40 @@ extern int target_flags;\n       N_(\"Register sb is zero. Use for absolute addressing\")},\t\t\\\n     { \"nosb\", MASK_NO_SB, N_(\"Do not use register sb\")},\t\t\\\n     { \"bitfield\", -MASK_NO_BITFIELD,\t\t\t\t\t\\\n+      N_(\"Use bit-field instructions\")},\t\t\t\t\\\n+    { \"nobitfield\", MASK_NO_BITFIELD,\t\t\t\t\t\\\n       N_(\"Do not use bit-field instructions\")},\t\t\t\t\\\n-    { \"nobitfield\", MASK_NO_BITFIELD, N_(\"Use bit-field instructions\")},\\\n     { \"himem\", MASK_HIMEM, N_(\"Generate code for high memory\")},\t\\\n     { \"nohimem\", -MASK_HIMEM, N_(\"Generate code for low memory\")},\t\\\n     { \"32381\", MASK_32381, N_(\"32381 fpu\")},\t\t\t\t\\\n     { \"mult-add\", MASK_MULT_ADD,\t\t\t\t\t\\\n       N_(\"Use multiply-accumulate fp instructions\")},\t\t\t\\\n     { \"nomult-add\", -MASK_MULT_ADD,\t\t\t\t\t\\\n-      N_(\"Do not use multiply-accumulate fp instructions\") }, \t\t\\\n+      N_(\"Do not use multiply-accumulate fp instructions\") },\t\t\\\n     { \"src\", MASK_SRC, N_(\"\\\"Small register classes\\\" kludge\")},\t\\\n     { \"nosrc\", -MASK_SRC, N_(\"No \\\"Small register classes\\\" kludge\")},\t\\\n+    { \"ieee-compare\", MASK_IEEE_COMPARE, N_(\"Use IEEE math for fp comparisons\")},\t\\\n+    { \"noieee-compare\", -MASK_IEEE_COMPARE,\t\t\t\t\t\\\n+      N_(\"Do not use IEEE math for fp comparisons\")},\t\t\t\\\n     { \"\", TARGET_DEFAULT, 0}}\n \n /* TARGET_DEFAULT is defined in encore.h, pc532.h, etc.  */\n \n /* When we are generating PIC, the sb is used as a pointer\n    to the GOT. 32381 is a superset of 32081  */\n \n-#define OVERRIDE_OPTIONS\t\t\t\t\\\n-{\t\t\t\t\t\t\t\\\n-  if (flag_pic || TARGET_HIMEM)\t\t\t\t\\\n-    target_flags |= MASK_NO_SB;\t\t\t\t\\\n-  if (TARGET_32381)\t\t\t\t\t\\\n-    target_flags |= MASK_32081;\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\\\n-    target_flags &= ~MASK_MULT_ADD;\t\t\t\\\n+#define OVERRIDE_OPTIONS\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  if (target_flags & MASK_32532)\t\t\\\n+    target_flags |= MASK_32332; \t\t\\\n+  if (flag_pic || TARGET_HIMEM)\t\t\t\\\n+    target_flags |= MASK_NO_SB;\t\t\t\\\n+  if (TARGET_32381)\t\t\t\t\\\n+    target_flags |= MASK_32081;\t\t\t\\\n+  else\t\t\t\t\t\t\\\n+    target_flags &= ~MASK_MULT_ADD;\t\t\\\n+  if (flag_unsafe_math_optimizations)\t\t\\\n+     target_flags &= ~MASK_IEEE_COMPARE;\t\t\\\n }\n \n /* Zero or more C statements that may conditionally modify two\n@@ -1180,6 +1192,10 @@ __transfer_from_trampoline ()\t\t\\\n    is complemented in the F bit.  */\n #define CC_Z_IN_NOT_F 010000\n \n+/* This bit means that the L bit indicates unordered (IEEE) comparison.\n+ */\n+#define CC_UNORD 020000\n+\n /* Store in cc_status the expressions\n    that the condition codes will describe\n    after execution of an instruction whose pattern is EXP."}, {"sha": "ba450012a4aa3389e9086f1e1f51f0544358a141", "filename": "gcc/config/ns32k/ns32k.md", "status": "modified", "additions": 57, "deletions": 27, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d7c281902771a6de24a387f3c759e966e3be8ad/gcc%2Fconfig%2Fns32k%2Fns32k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d7c281902771a6de24a387f3c759e966e3be8ad/gcc%2Fconfig%2Fns32k%2Fns32k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.md?ref=5d7c281902771a6de24a387f3c759e966e3be8ad", "patch": "@@ -94,6 +94,8 @@\n   \"TARGET_32081\"\n   \"*\n { cc_status.flags |= CC_REVERSED;\n+  if (TARGET_IEEE_COMPARE)\n+    cc_status.flags |= CC_UNORD;\n   operands[1] = CONST0_RTX (DFmode);\n   return \\\"cmpl %1,%0\\\"; }\")\n \n@@ -103,6 +105,8 @@\n   \"TARGET_32081\"\n   \"*\n { cc_status.flags |= CC_REVERSED;\n+  if (TARGET_IEEE_COMPARE)\n+    cc_status.flags |= CC_UNORD;\n   operands[1] = CONST0_RTX (SFmode);\n   return \\\"cmpf %1,%0\\\"; }\")\n \n@@ -202,14 +206,22 @@\n \t(compare (match_operand:DF 0 \"general_operand\" \"lmF\")\n \t\t (match_operand:DF 1 \"general_operand\" \"lmF\")))]\n   \"TARGET_32081\"\n-  \"cmpl %0,%1\")\n+  \"*\n+{\n+  if (TARGET_IEEE_COMPARE)\n+    cc_status.flags |= CC_UNORD;\n+  return \\\"cmpl %0,%1\\\";}\")\n \n (define_insn \"cmpsf\"\n   [(set (cc0)\n \t(compare (match_operand:SF 0 \"general_operand\" \"fmF\")\n \t\t (match_operand:SF 1 \"general_operand\" \"fmF\")))]\n   \"TARGET_32081\"\n-  \"cmpf %0,%1\")\n+  \"*\n+{\n+  if (TARGET_IEEE_COMPARE)\n+    cc_status.flags |= CC_UNORD;\n+  return \\\"cmpf %0,%1\\\";}\")\n \f\n ;; movdf and movsf copy between general and floating registers using\n ;; the stack. In principle, we could get better code not allowing\n@@ -798,7 +810,7 @@\n \f\n ;; Multiply-add instructions\n (define_insn \"*madddf\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=v,v,lm\")\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=v,v,&lm\")\n \t(plus:DF (mult:DF (match_operand:DF 1 \"general_operand\" \"%lmF,0,0\")\n \t\t          (match_operand:DF 2 \"general_operand\" \"lmF,lmF,lmF\"))\n                  (match_operand:DF 3 \"general_operand\" \"0,lmF,lmF\")))]\n@@ -809,7 +821,7 @@\n    mull %2,%0\\;addl %3,%0\")\n \n (define_insn \"*maddsf\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=u,u,fm\")\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=u,u,&fm\")\n \t(plus:SF (mult:SF (match_operand:SF 1 \"general_operand\" \"%fmF,0,0\")\n \t\t          (match_operand:SF 2 \"general_operand\" \"fmF,fmF,fmF\"))\n                  (match_operand:SF 3 \"general_operand\" \"0,fmF,fmF\")))]\n@@ -822,7 +834,7 @@\n \n ;; Multiply-sub instructions\n (define_insn \"*msubdf\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=v,lm\")\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=&v,&lm\")\n \t(minus:DF (mult:DF (match_operand:DF 1 \"general_operand\" \"%lmF,0\")\n \t\t          (match_operand:DF 2 \"general_operand\" \"lmF,lmF\"))\n                  (match_operand:DF 3 \"general_operand\" \"lmF,lmF\")))]\n@@ -832,7 +844,7 @@\n    mull %2,%0\\;subl %3,%0\")\n \n (define_insn \"*msubsf\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=u,fm\")\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=&u,&fm\")\n \t(minus:SF (mult:SF (match_operand:SF 1 \"general_operand\" \"%fmF,0\")\n \t\t          (match_operand:SF 2 \"general_operand\" \"fmF,fmF\"))\n                  (match_operand:SF 3 \"general_operand\" \"fmF,fmF\")))]\n@@ -883,20 +895,6 @@\n   return \\\"adjspd %n0\\\";\n }\")\n \n-(define_insn \"*frame_addr\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm<\")\n-\t(plus:SI (reg:SI 24)\n-\t\t (match_operand:SI 1 \"immediate_operand\" \"i\")))]\n-  \"GET_CODE (operands[1]) == CONST_INT\"\n-  \"addr %c1(fp),%0\")\n-\n-(define_insn \"*stack_addr\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm<\")\n-\t(plus:SI (reg:SI 25)\n-\t\t (match_operand:SI 1 \"immediate_operand\" \"i\")))]\n-  \"GET_CODE (operands[1]) == CONST_INT\"\n-  \"addr %c1(sp),%0\")\n-\n (define_insn \"adddi3\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=ro\")\n \t(plus:DI (match_operand:DI 1 \"general_operand\" \"%0\")\n@@ -940,9 +938,9 @@\n \n ;; See Note 1\n (define_insn \"addsi3\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,=rm&<\")\n-\t(plus:SI (match_operand:SI 1 \"general_operand\" \"%0,r\")\n-\t\t (match_operand:SI 2 \"general_operand\" \"g,i\")))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,=rm<,=rm<\")\n+\t(plus:SI (match_operand:SI 1 \"general_operand\" \"%0,r,xy\")\n+\t\t (match_operand:SI 2 \"general_operand\" \"g,i,i\")))]\n   \"\"\n   \"*\n {\n@@ -964,6 +962,14 @@\n \t    return \\\"addr %c2(%1),%0\\\";\n         }\n     }\n+  else if (which_alternative == 2)\n+    {\n+      if (GET_CODE (operands[2]) == CONST_INT &&\n+          NS32K_DISPLACEMENT_P (INTVAL (operands[2])))\n+        return \\\"addr %c2(%1),%0\\\";\n+      else\n+        return \\\"sprd %1,%0\\;addd %2,%0\\\";\n+    }\n   else if (GET_CODE (operands[2]) == CONST_INT)\n     {\n       int i = INTVAL (operands[2]);\n@@ -2313,7 +2319,13 @@\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"blt %l0\")\n+  \"*\n+{\n+    if (cc_prev_status.flags & CC_UNORD)\n+      return \\\"bhi 0f\\;blt %l0\\;0:\\\";\n+    else\n+      return \\\"blt %l0\\\";\n+}\")\n \n (define_insn \"bltu\"\n   [(set (pc)\n@@ -2349,7 +2361,13 @@\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"ble %l0\")\n+  \"*\n+{\n+    if (cc_prev_status.flags & CC_UNORD)\n+      return \\\"bhi 0f\\;ble %l0\\;0:\\\";\n+    else\n+      return \\\"ble %l0\\\";\n+}\")\n \n (define_insn \"bleu\"\n   [(set (pc)\n@@ -2399,7 +2417,13 @@\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n   \"\"\n-  \"ble %l0\")\n+  \"*\n+{\n+    if (cc_prev_status.flags & CC_UNORD)\n+      return \\\"bhi 0f\\;ble %l0\\;0:\\\";\n+    else\n+      return \\\"ble %l0\\\";\n+}\")\n \n (define_insn \"*bleu\"\n   [(set (pc)\n@@ -2435,7 +2459,13 @@\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n   \"\"\n-  \"blt %l0\")\n+  \"*\n+{\n+    if (cc_prev_status.flags & CC_UNORD)\n+      return \\\"bhi 0f\\;blt %l0\\;0:\\\";\n+    else\n+      return \\\"blt %l0\\\";\n+}\")\n \n (define_insn \"*bltu\"\n   [(set (pc)"}, {"sha": "6497fe38b388cc59a60c69c6b4ed75c4958f710e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d7c281902771a6de24a387f3c759e966e3be8ad/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d7c281902771a6de24a387f3c759e966e3be8ad/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=5d7c281902771a6de24a387f3c759e966e3be8ad", "patch": "@@ -8698,6 +8698,15 @@ Do not try and generate multiply-add floating point instructions\n Generate output containing library calls for floating point.\n @strong{Warning:} the requisite libraries may not be available.\n \n+@item -mieee-compare\n+@itemx -mno-ieee-compare\n+@opindex mieee-compare\n+@opindex mno-ieee-compare\n+Control whether or not the compiler uses IEEE floating point\n+comparisons.  These handle correctly the case where the result of a\n+comparison is unordered.\n+@strong{Warning:} the requisite kernel support may not be available.\n+\n @item -mnobitfield\n @opindex mnobitfield\n Do not use the bit-field instructions.  On some machines it is faster to"}]}