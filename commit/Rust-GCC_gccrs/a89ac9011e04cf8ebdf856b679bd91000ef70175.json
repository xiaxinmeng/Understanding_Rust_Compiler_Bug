{"sha": "a89ac9011e04cf8ebdf856b679bd91000ef70175", "node_id": "C_kwDOANBUbNoAKGE4OWFjOTAxMWUwNGNmOGViZGY4NTZiNjc5YmQ5MTAwMGVmNzAxNzU", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2022-11-14T15:53:42Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2022-11-14T17:41:33Z"}, "message": "AArch64: Add SVE2 implementation for pow2 bitmask division\n\nIn plenty of image and video processing code it's common to modify pixel values\nby a widening operation and then scale them back into range by dividing by 255.\n\nThis patch adds an named function to allow us to emit an optimized sequence\nwhen doing an unsigned division that is equivalent to:\n\n   x = y / (2 ^ (bitsize (y)/2)-1)\n\nFor SVE2 this means we generate for:\n\nvoid draw_bitmap1(uint8_t* restrict pixel, uint8_t level, int n)\n{\n  for (int i = 0; i < (n & -16); i+=1)\n    pixel[i] = (pixel[i] * level) / 0xff;\n}\n\nthe following:\n\n        mov     z3.b, #1\n.L3:\n        ld1b    z0.h, p0/z, [x0, x3]\n        mul     z0.h, p1/m, z0.h, z2.h\n        addhnb  z1.b, z0.h, z3.h\n        addhnb  z0.b, z0.h, z1.h\n        st1b    z0.h, p0, [x0, x3]\n        inch    x3\n        whilelo p0.h, w3, w2\n        b.any   .L3\n\ninstead of:\n\n.L3:\n        ld1b    z0.h, p1/z, [x0, x3]\n        mul     z0.h, p0/m, z0.h, z1.h\n        umulh   z0.h, p0/m, z0.h, z2.h\n        lsr     z0.h, z0.h, #7\n        st1b    z0.h, p1, [x0, x3]\n        inch    x3\n        whilelo p1.h, w3, w2\n        b.any   .L3\n\nWhich results in significantly faster code.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-sve2.md (@aarch64_bitmask_udiv<mode>3): New.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/sve2/div-by-bitmask_1.c: New test.", "tree": {"sha": "9584f1731112b2a6a175c0a1799329a2a6474ed0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9584f1731112b2a6a175c0a1799329a2a6474ed0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a89ac9011e04cf8ebdf856b679bd91000ef70175", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a89ac9011e04cf8ebdf856b679bd91000ef70175", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a89ac9011e04cf8ebdf856b679bd91000ef70175", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a89ac9011e04cf8ebdf856b679bd91000ef70175/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c98aabc1427a4d2a25a2176c89dc709148a04707", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c98aabc1427a4d2a25a2176c89dc709148a04707", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c98aabc1427a4d2a25a2176c89dc709148a04707"}], "stats": {"total": 94, "additions": 94, "deletions": 0}, "files": [{"sha": "dadd046b832606f50119d1bfed33c95b287ff821", "filename": "gcc/config/aarch64/aarch64-sve2.md", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a89ac9011e04cf8ebdf856b679bd91000ef70175/gcc%2Fconfig%2Faarch64%2Faarch64-sve2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a89ac9011e04cf8ebdf856b679bd91000ef70175/gcc%2Fconfig%2Faarch64%2Faarch64-sve2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve2.md?ref=a89ac9011e04cf8ebdf856b679bd91000ef70175", "patch": "@@ -71,6 +71,7 @@\n ;; ---- [INT] Reciprocal approximation\n ;; ---- [INT<-FP] Base-2 logarithm\n ;; ---- [INT] Polynomial multiplication\n+;; ---- [INT] Misc optab implementations\n ;;\n ;; == Permutation\n ;; ---- [INT,FP] General permutes\n@@ -2312,6 +2313,46 @@\n   \"<sve_int_op>\\t%0.<Vewtype>, %1.<Vetype>, %2.<Vetype>\"\n )\n \n+;; -------------------------------------------------------------------------\n+;; ---- [INT] Misc optab implementations\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - aarch64_bitmask_udiv\n+;; -------------------------------------------------------------------------\n+\n+;; div optimizations using narrowings\n+;; we can do the division e.g. shorts by 255 faster by calculating it as\n+;; (x + ((x + 257) >> 8)) >> 8 assuming the operation is done in\n+;; double the precision of x.\n+;;\n+;; See aarch64-simd.md for bigger explanation.\n+(define_expand \"@aarch64_bitmask_udiv<mode>3\"\n+  [(match_operand:SVE_FULL_HSDI 0 \"register_operand\")\n+   (match_operand:SVE_FULL_HSDI 1 \"register_operand\")\n+   (match_operand:SVE_FULL_HSDI 2 \"immediate_operand\")]\n+  \"TARGET_SVE2\"\n+{\n+  unsigned HOST_WIDE_INT size\n+    = (1ULL << GET_MODE_UNIT_BITSIZE (<VNARROW>mode)) - 1;\n+  rtx elt = unwrap_const_vec_duplicate (operands[2]);\n+  if (!CONST_INT_P (elt) || UINTVAL (elt) != size)\n+    FAIL;\n+\n+  rtx addend = gen_reg_rtx (<MODE>mode);\n+  rtx tmp1 = gen_reg_rtx (<VNARROW>mode);\n+  rtx tmp2 = gen_reg_rtx (<VNARROW>mode);\n+  rtx val = aarch64_simd_gen_const_vector_dup (<VNARROW>mode, 1);\n+  emit_move_insn (addend, lowpart_subreg (<MODE>mode, val, <VNARROW>mode));\n+  emit_insn (gen_aarch64_sve (UNSPEC_ADDHNB, <MODE>mode, tmp1, operands[1],\n+\t\t\t      addend));\n+  emit_insn (gen_aarch64_sve (UNSPEC_ADDHNB, <MODE>mode, tmp2, operands[1],\n+\t\t\t      lowpart_subreg (<MODE>mode, tmp1,\n+\t\t\t\t\t      <VNARROW>mode)));\n+  emit_move_insn (operands[0],\n+\t\t  lowpart_subreg (<MODE>mode, tmp2, <VNARROW>mode));\n+  DONE;\n+})\n+\n ;; =========================================================================\n ;; == Permutation\n ;; ========================================================================="}, {"sha": "e6f5098c30f4e2eb8ed1af153c0bb0d204cda6d9", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/div-by-bitmask_1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a89ac9011e04cf8ebdf856b679bd91000ef70175/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fdiv-by-bitmask_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a89ac9011e04cf8ebdf856b679bd91000ef70175/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fdiv-by-bitmask_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fdiv-by-bitmask_1.c?ref=a89ac9011e04cf8ebdf856b679bd91000ef70175", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O2 -std=c99\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" { target { le } } } } */\n+\n+#include <stdint.h>\n+\n+/*\n+** draw_bitmap1:\n+** ...\n+**\tmul\tz[0-9]+.h, p[0-9]+/m, z[0-9]+.h, z[0-9]+.h\n+**\taddhnb\tz[0-9]+.b, z[0-9]+.h, z[0-9]+.h\n+**\taddhnb\tz[0-9]+.b, z[0-9]+.h, z[0-9]+.h\n+** ...\n+*/\n+void draw_bitmap1(uint8_t* restrict pixel, uint8_t level, int n)\n+{\n+  for (int i = 0; i < (n & -16); i+=1)\n+    pixel[i] = (pixel[i] * level) / 0xff;\n+}\n+\n+void draw_bitmap2(uint8_t* restrict pixel, uint8_t level, int n)\n+{\n+  for (int i = 0; i < (n & -16); i+=1)\n+    pixel[i] = (pixel[i] * level) / 0xfe;\n+}\n+\n+/*\n+** draw_bitmap3:\n+** ...\n+**\tmul\tz[0-9]+.s, p[0-9]+/m, z[0-9]+.s, z[0-9]+.s\n+**\taddhnb\tz[0-9]+.h, z[0-9]+.s, z[0-9]+.s\n+**\taddhnb\tz[0-9]+.h, z[0-9]+.s, z[0-9]+.s\n+** ...\n+*/\n+void draw_bitmap3(uint16_t* restrict pixel, uint16_t level, int n)\n+{\n+  for (int i = 0; i < (n & -16); i+=1)\n+    pixel[i] = (pixel[i] * level) / 0xffffU;\n+}\n+\n+/*\n+** draw_bitmap4:\n+** ...\n+**\tmul\tz[0-9]+.d, p[0-9]+/m, z[0-9]+.d, z[0-9]+.d\n+**\taddhnb\tz[0-9]+.s, z[0-9]+.d, z[0-9]+.d\n+**\taddhnb\tz[0-9]+.s, z[0-9]+.d, z[0-9]+.d\n+** ...\n+*/\n+void draw_bitmap4(uint32_t* restrict pixel, uint32_t level, int n)\n+{\n+  for (int i = 0; i < (n & -16); i+=1)\n+    pixel[i] = (pixel[i] * (uint64_t)level) / 0xffffffffUL;\n+}"}]}