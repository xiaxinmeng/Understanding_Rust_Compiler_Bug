{"sha": "cef31f9c56a00141385da8caa2efb53886747e67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VmMzFmOWM1NmEwMDE0MTM4NWRhOGNhYTJlZmI1Mzg4Njc0N2U2Nw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-05-04T16:42:23Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-05-04T16:42:23Z"}, "message": "re PR target/53228 (target attributes in libcpp/lex.c cause illegal instructions to be used elsewhere)\n\n\tPR target/53228\n\t* config/i386/i386.h (X86_ARCH_CMOV): Rename from X86_ARCH_CMOVE.\n\t(TARGET_CMOV): Rename from TARGET_CMOVE.\n\t(TARGET_CMOVE): New define.\n\t* config/i386/i386.c (ix86_option_override_internal): Use TARGET_CMOV.\n\tDo not set TARGET_CMOVE here.\n\nFrom-SVN: r187168", "tree": {"sha": "1cae48dc06421e999679398a0a305cc6747aeda5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cae48dc06421e999679398a0a305cc6747aeda5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cef31f9c56a00141385da8caa2efb53886747e67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cef31f9c56a00141385da8caa2efb53886747e67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cef31f9c56a00141385da8caa2efb53886747e67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cef31f9c56a00141385da8caa2efb53886747e67/comments", "author": null, "committer": null, "parents": [{"sha": "33d11b9745bad90547e56cf97fa59f57849ebabd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33d11b9745bad90547e56cf97fa59f57849ebabd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33d11b9745bad90547e56cf97fa59f57849ebabd"}], "stats": {"total": 40, "additions": 22, "deletions": 18}, "files": [{"sha": "931b7f66160186bb3922d24c1565b03f4ca4559f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef31f9c56a00141385da8caa2efb53886747e67/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef31f9c56a00141385da8caa2efb53886747e67/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cef31f9c56a00141385da8caa2efb53886747e67", "patch": "@@ -1,3 +1,12 @@\n+2012-05-04  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/53228\n+\t* config/i386/i386.h (X86_ARCH_CMOV): Rename from X86_ARCH_CMOVE.\n+\t(TARGET_CMOV): Rename from TARGET_CMOVE.\n+\t(TARGET_CMOVE): New define.\n+\t* config/i386/i386.c (ix86_option_override_internal): Use TARGET_CMOV.\n+\tDo not set TARGET_CMOVE here.\n+\n 2012-05-04  Dodji Seketeli  <dodji@redhat.com>\n \n \tEnable -Wunused-local-typedefs when -Wall or -Wunused is on\n@@ -222,8 +231,7 @@\n \tpointer.\n \t(__assert_gimple_bb_smaller_rtl_bb): Asserting typedef.\n \n-\t* cfgexpand.c (expand_gimple_basic_block): Clear all il.gimple\n-\tmembers.\n+\t* cfgexpand.c (expand_gimple_basic_block): Clear all il.gimple members.\n \t* gimple-iterator.c (gimple_stmt_iterator): Don't special case\n \tNULL il.gimple, which can't happen anymore.\n \t* gimple.h (bb_seq): il.gimple can't be NULL.\n@@ -248,8 +256,7 @@\n \n \t* tree-ssa-pre.c (valid_in_sets): Remove checking of trapping\n \toperations.\n-\t(prune_clobbered_mems): Do it here.  Do not uselessly sort\n-\texpressions.\n+\t(prune_clobbered_mems): Do it here.  Do not uselessly sort expressions.\n \t(compute_avail): Do not add possibly trapping operations to\n \tEXP_GEN if they might not be executed in the block.\n \n@@ -609,8 +616,7 @@\n \t* config/i386/driver-i386.c (host_detect_local_cpu): Detect\n \tHLE support.\n \t* config/i386/i386-protos.h (ix86_generate_hle_prefix): New.\n-\t* config/i386/i386-c.c (ix86_target_macros_internal): Set\n-\tHLE defines.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Set HLE defines.\n \t(ix86_target_string)<-mhle>: New.\n \t(ix86_valid_target_attribute_inner_p) <OPT_mhle>: Ditto.\n \t* config/i386/i386.c (ix86_target_string) <OPTION_MASK_ISA_HLE>: New.\n@@ -657,8 +663,7 @@\n \t* fold-const.c (div_if_zero_remainder): sizetypes no longer\n \tsign-extend.\n \t(int_const_binop_1): New worker for int_const_binop with\n-\toverflowable parameter.  Pass it through\n-\tto force_fit_type_double.\n+\toverflowable parameter.  Pass it through to force_fit_type_double.\n \t(int_const_binop): Wrap around int_const_binop_1 with overflowable\n \tequal to one.\n \t(size_binop_loc): Call int_const_binop_1 with overflowable equal"}, {"sha": "a8be095169f13c2f91283d4f013413494181563f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef31f9c56a00141385da8caa2efb53886747e67/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef31f9c56a00141385da8caa2efb53886747e67/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=cef31f9c56a00141385da8caa2efb53886747e67", "patch": "@@ -2190,7 +2190,7 @@ unsigned char ix86_arch_features[X86_ARCH_LAST];\n /* Feature tests against the various architecture variations, used to create\n    ix86_arch_features based on the processor mask.  */\n static unsigned int initial_ix86_arch_features[X86_ARCH_LAST] = {\n-  /* X86_ARCH_CMOVE: Conditional move was added for pentiumpro.  */\n+  /* X86_ARCH_CMOV: Conditional move was added for pentiumpro.  */\n   ~(m_386 | m_486 | m_PENT | m_K6),\n \n   /* X86_ARCH_CMPXCHG: Compare and exchange was added for 80486.  */\n@@ -3504,7 +3504,7 @@ ix86_option_override_internal (bool main_args_p)\n \t   -mtune (rather than -march) points us to a processor that has them.\n \t   However, the VIA C3 gives a SIGILL, so we only do that for i686 and\n \t   higher processors.  */\n-\tif (TARGET_CMOVE\n+\tif (TARGET_CMOV\n \t    && (processor_alias_table[i].flags & (PTA_PREFETCH_SSE | PTA_SSE)))\n \t  x86_prefetch_sse = true;\n \tbreak;\n@@ -3780,12 +3780,6 @@ ix86_option_override_internal (bool main_args_p)\n       target_flags |= MASK_ACCUMULATE_OUTGOING_ARGS;\n     }\n \n-  /* For sane SSE instruction set generation we need fcomi instruction.\n-     It is safe to enable all CMOVE instructions.  Also, RDRAND intrinsic\n-     expands to a sequence that includes conditional move. */\n-  if (TARGET_SSE || TARGET_RDRND)\n-    TARGET_CMOVE = 1;\n-\n   /* Figure out what ASM_GENERATE_INTERNAL_LABEL builds as a prefix.  */\n   {\n     char *p;"}, {"sha": "bd4899b1b649ecd24e8c02cc90de5f128dfbf243", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef31f9c56a00141385da8caa2efb53886747e67/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef31f9c56a00141385da8caa2efb53886747e67/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=cef31f9c56a00141385da8caa2efb53886747e67", "patch": "@@ -430,7 +430,7 @@ extern unsigned char ix86_tune_features[X86_TUNE_LAST];\n \n /* Feature tests against the various architecture variations.  */\n enum ix86_arch_indices {\n-  X86_ARCH_CMOVE,\t\t/* || TARGET_SSE */\n+  X86_ARCH_CMOV,\n   X86_ARCH_CMPXCHG,\n   X86_ARCH_CMPXCHG8B,\n   X86_ARCH_XADD,\n@@ -441,12 +441,17 @@ enum ix86_arch_indices {\n \n extern unsigned char ix86_arch_features[X86_ARCH_LAST];\n \n-#define TARGET_CMOVE\t\tix86_arch_features[X86_ARCH_CMOVE]\n+#define TARGET_CMOV\t\tix86_arch_features[X86_ARCH_CMOV]\n #define TARGET_CMPXCHG\t\tix86_arch_features[X86_ARCH_CMPXCHG]\n #define TARGET_CMPXCHG8B\tix86_arch_features[X86_ARCH_CMPXCHG8B]\n #define TARGET_XADD\t\tix86_arch_features[X86_ARCH_XADD]\n #define TARGET_BSWAP\t\tix86_arch_features[X86_ARCH_BSWAP]\n \n+/* For sane SSE instruction set generation we need fcomi instruction.\n+   It is safe to enable all CMOVE instructions.  Also, RDRAND intrinsic\n+   expands to a sequence that includes conditional move. */\n+#define TARGET_CMOVE\t\t(TARGET_CMOV || TARGET_SSE || TARGET_RDRND)\n+\n #define TARGET_FISTTP\t\t(TARGET_SSE3 && TARGET_80387)\n \n extern int x86_prefetch_sse;"}]}