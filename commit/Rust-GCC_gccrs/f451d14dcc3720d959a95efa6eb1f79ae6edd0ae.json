{"sha": "f451d14dcc3720d959a95efa6eb1f79ae6edd0ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ1MWQxNGRjYzM3MjBkOTU5YTk1ZWZhNmViMWY3OWFlNmVkZDBhZQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-07-04T12:20:35Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-07-04T12:20:35Z"}, "message": "extend.texi (AVR Built-in Functions): Update documentation of __builtin_avr_fmul*.\n\n\t* doc/extend.texi (AVR Built-in Functions): Update documentation\n\tof __builtin_avr_fmul*.\n\t* config/avr/avr.c (avr_init_builtins): Don't depend on\n\tAVR_HAVE_MUL.\n\t* config/avr/avr-c.c (avr_cpu_cpp_builtins): Ditto.\n\t* config/avr/avr.md (fmul): Rename to fmul_insn.\n\t(fmuls): Rename to fmuls_insn.\n\t(fmulsu): Rename to fmulsu_insn.\n\t(fmul,fmuls,fmulsu): New expander.\n\t(*fmul.call,*fmuls.call,*fmulsu.call): New Insn.\n\t* config/avr/t-avr (LIB1ASMFUNCS): Add _fmul, _fmuls, _fmulsu.\n\t* config/avr/libgcc.S (__fmul): New function.\n\t(__fmuls): New function.\n\t(__fmulsu,__fmulsu_exit): New function.\n\nFrom-SVN: r175807", "tree": {"sha": "c4f2b312be9189822ce0723b118dda460e37a0bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4f2b312be9189822ce0723b118dda460e37a0bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f451d14dcc3720d959a95efa6eb1f79ae6edd0ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f451d14dcc3720d959a95efa6eb1f79ae6edd0ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f451d14dcc3720d959a95efa6eb1f79ae6edd0ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f451d14dcc3720d959a95efa6eb1f79ae6edd0ae/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30f1e6dea0609f34691ac032407347ed89df69c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30f1e6dea0609f34691ac032407347ed89df69c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30f1e6dea0609f34691ac032407347ed89df69c0"}], "stats": {"total": 236, "additions": 211, "deletions": 25}, "files": [{"sha": "bd353f4d2b159d9fff36ce1c3658a8ca93267158", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f451d14dcc3720d959a95efa6eb1f79ae6edd0ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f451d14dcc3720d959a95efa6eb1f79ae6edd0ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f451d14dcc3720d959a95efa6eb1f79ae6edd0ae", "patch": "@@ -1,3 +1,20 @@\n+2011-07-04  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* doc/extend.texi (AVR Built-in Functions): Update documentation\n+\tof __builtin_avr_fmul*.\n+\t* config/avr/avr.c (avr_init_builtins): Don't depend on\n+\tAVR_HAVE_MUL.\n+\t* config/avr/avr-c.c (avr_cpu_cpp_builtins): Ditto.\n+\t* config/avr/avr.md (fmul): Rename to fmul_insn.\n+\t(fmuls): Rename to fmuls_insn.\n+\t(fmulsu): Rename to fmulsu_insn.\n+\t(fmul,fmuls,fmulsu): New expander.\n+\t(*fmul.call,*fmuls.call,*fmulsu.call): New Insn.\n+\t* config/avr/t-avr (LIB1ASMFUNCS): Add _fmul, _fmuls, _fmulsu.\n+\t* config/avr/libgcc.S (__fmul): New function.\n+\t(__fmuls): New function.\n+\t(__fmulsu,__fmulsu_exit): New function.\n+\n 2011-07-04  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/49615"}, {"sha": "aa1a51e538b9bf4e5eafe50d3faa11b61a9752e8", "filename": "gcc/config/avr/avr-c.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f451d14dcc3720d959a95efa6eb1f79ae6edd0ae/gcc%2Fconfig%2Favr%2Favr-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f451d14dcc3720d959a95efa6eb1f79ae6edd0ae/gcc%2Fconfig%2Favr%2Favr-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-c.c?ref=f451d14dcc3720d959a95efa6eb1f79ae6edd0ae", "patch": "@@ -94,10 +94,7 @@ avr_cpu_cpp_builtins (struct cpp_reader *pfile)\n   cpp_define (pfile, \"__BUILTIN_AVR_SWAP\");\n   cpp_define (pfile, \"__BUILTIN_AVR_DELAY_CYCLES\");\n \n-  if (AVR_HAVE_MUL)\n-    {\n-      cpp_define (pfile, \"__BUILTIN_AVR_FMUL\");\n-      cpp_define (pfile, \"__BUILTIN_AVR_FMULS\");\n-      cpp_define (pfile, \"__BUILTIN_AVR_FMULSU\");\n-    }\n+  cpp_define (pfile, \"__BUILTIN_AVR_FMUL\");\n+  cpp_define (pfile, \"__BUILTIN_AVR_FMULS\");\n+  cpp_define (pfile, \"__BUILTIN_AVR_FMULSU\");\n }"}, {"sha": "fa690fb683d6703dceb8f049aa8439a8e4dcbf5e", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f451d14dcc3720d959a95efa6eb1f79ae6edd0ae/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f451d14dcc3720d959a95efa6eb1f79ae6edd0ae/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=f451d14dcc3720d959a95efa6eb1f79ae6edd0ae", "patch": "@@ -6536,19 +6536,12 @@ avr_init_builtins (void)\n   DEF_BUILTIN (\"__builtin_avr_delay_cycles\", void_ftype_ulong, \n                AVR_BUILTIN_DELAY_CYCLES);\n \n-  if (AVR_HAVE_MUL)\n-    {\n-      /* FIXME: If !AVR_HAVE_MUL, make respective functions available\n-         in libgcc. For fmul and fmuls this is straight forward with\n-         upcoming fixed point support. */\n-      \n-      DEF_BUILTIN (\"__builtin_avr_fmul\", uint_ftype_uchar_uchar, \n-                   AVR_BUILTIN_FMUL);\n-      DEF_BUILTIN (\"__builtin_avr_fmuls\", int_ftype_char_char, \n-                   AVR_BUILTIN_FMULS);\n-      DEF_BUILTIN (\"__builtin_avr_fmulsu\", int_ftype_char_uchar, \n-                   AVR_BUILTIN_FMULSU);\n-    }\n+  DEF_BUILTIN (\"__builtin_avr_fmul\", uint_ftype_uchar_uchar, \n+               AVR_BUILTIN_FMUL);\n+  DEF_BUILTIN (\"__builtin_avr_fmuls\", int_ftype_char_char, \n+               AVR_BUILTIN_FMULS);\n+  DEF_BUILTIN (\"__builtin_avr_fmulsu\", int_ftype_char_uchar, \n+               AVR_BUILTIN_FMULSU);\n }\n \n #undef DEF_BUILTIN"}, {"sha": "dc186c82bb06f7e3ee6931884eb35e17a609ef70", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 93, "deletions": 3, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f451d14dcc3720d959a95efa6eb1f79ae6edd0ae/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f451d14dcc3720d959a95efa6eb1f79ae6edd0ae/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=f451d14dcc3720d959a95efa6eb1f79ae6edd0ae", "patch": "@@ -3394,7 +3394,27 @@\n    (set_attr \"cc\" \"none\")])\n   \n ;; FMUL\n-(define_insn \"fmul\"\n+(define_expand \"fmul\"\n+  [(set (reg:QI 24)\n+        (match_operand:QI 1 \"register_operand\" \"\"))\n+   (set (reg:QI 25)\n+        (match_operand:QI 2 \"register_operand\" \"\"))\n+   (parallel [(set (reg:HI 22)\n+                   (unspec:HI [(reg:QI 24)\n+                               (reg:QI 25)] UNSPEC_FMUL))\n+              (clobber (reg:HI 24))])\n+   (set (match_operand:HI 0 \"register_operand\" \"\")\n+        (reg:HI 22))]\n+  \"\"\n+  {\n+    if (AVR_HAVE_MUL)\n+      {\n+        emit_insn (gen_fmul_insn (operand0, operand1, operand2));\n+        DONE;\n+      }\n+  })\n+\n+(define_insn \"fmul_insn\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n         (unspec:HI [(match_operand:QI 1 \"register_operand\" \"a\")\n                     (match_operand:QI 2 \"register_operand\" \"a\")]\n@@ -3406,8 +3426,38 @@\n   [(set_attr \"length\" \"3\")\n    (set_attr \"cc\" \"clobber\")])\n \n+(define_insn \"*fmul.call\"\n+  [(set (reg:HI 22)\n+        (unspec:HI [(reg:QI 24)\n+                    (reg:QI 25)] UNSPEC_FMUL))\n+   (clobber (reg:HI 24))]\n+  \"!AVR_HAVE_MUL\"\n+  \"%~call __fmul\"\n+  [(set_attr \"type\" \"xcall\")\n+   (set_attr \"cc\" \"clobber\")])\n+\n ;; FMULS\n-(define_insn \"fmuls\"\n+(define_expand \"fmuls\"\n+  [(set (reg:QI 24)\n+        (match_operand:QI 1 \"register_operand\" \"\"))\n+   (set (reg:QI 25)\n+        (match_operand:QI 2 \"register_operand\" \"\"))\n+   (parallel [(set (reg:HI 22)\n+                   (unspec:HI [(reg:QI 24)\n+                               (reg:QI 25)] UNSPEC_FMULS))\n+              (clobber (reg:HI 24))])\n+   (set (match_operand:HI 0 \"register_operand\" \"\")\n+        (reg:HI 22))]\n+  \"\"\n+  {\n+    if (AVR_HAVE_MUL)\n+      {\n+        emit_insn (gen_fmuls_insn (operand0, operand1, operand2));\n+        DONE;\n+      }\n+  })\n+\n+(define_insn \"fmuls_insn\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n         (unspec:HI [(match_operand:QI 1 \"register_operand\" \"a\")\n                     (match_operand:QI 2 \"register_operand\" \"a\")]\n@@ -3419,8 +3469,38 @@\n   [(set_attr \"length\" \"3\")\n    (set_attr \"cc\" \"clobber\")])\n \n+(define_insn \"*fmuls.call\"\n+  [(set (reg:HI 22)\n+        (unspec:HI [(reg:QI 24)\n+                    (reg:QI 25)] UNSPEC_FMULS))\n+   (clobber (reg:HI 24))]\n+  \"!AVR_HAVE_MUL\"\n+  \"%~call __fmuls\"\n+  [(set_attr \"type\" \"xcall\")\n+   (set_attr \"cc\" \"clobber\")])\n+\n ;; FMULSU\n-(define_insn \"fmulsu\"\n+(define_expand \"fmulsu\"\n+  [(set (reg:QI 24)\n+        (match_operand:QI 1 \"register_operand\" \"\"))\n+   (set (reg:QI 25)\n+        (match_operand:QI 2 \"register_operand\" \"\"))\n+   (parallel [(set (reg:HI 22)\n+                   (unspec:HI [(reg:QI 24)\n+                               (reg:QI 25)] UNSPEC_FMULSU))\n+              (clobber (reg:HI 24))])\n+   (set (match_operand:HI 0 \"register_operand\" \"\")\n+        (reg:HI 22))]\n+  \"\"\n+  {\n+    if (AVR_HAVE_MUL)\n+      {\n+        emit_insn (gen_fmulsu_insn (operand0, operand1, operand2));\n+        DONE;\n+      }\n+  })\n+\n+(define_insn \"fmulsu_insn\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n         (unspec:HI [(match_operand:QI 1 \"register_operand\" \"a\")\n                     (match_operand:QI 2 \"register_operand\" \"a\")]\n@@ -3432,6 +3512,16 @@\n   [(set_attr \"length\" \"3\")\n    (set_attr \"cc\" \"clobber\")])\n \n+(define_insn \"*fmulsu.call\"\n+  [(set (reg:HI 22)\n+        (unspec:HI [(reg:QI 24)\n+                    (reg:QI 25)] UNSPEC_FMULSU))\n+   (clobber (reg:HI 24))]\n+  \"!AVR_HAVE_MUL\"\n+  \"%~call __fmulsu\"\n+  [(set_attr \"type\" \"xcall\")\n+   (set_attr \"cc\" \"clobber\")])\n+\n \f\n ;; Some combiner patterns dealing with bits.\n ;; See PR42210"}, {"sha": "c2459d00e6b3e431d9f71106aedef630c4f9d14a", "filename": "gcc/config/avr/libgcc.S", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f451d14dcc3720d959a95efa6eb1f79ae6edd0ae/gcc%2Fconfig%2Favr%2Flibgcc.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f451d14dcc3720d959a95efa6eb1f79ae6edd0ae/gcc%2Fconfig%2Favr%2Flibgcc.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Flibgcc.S?ref=f451d14dcc3720d959a95efa6eb1f79ae6edd0ae", "patch": "@@ -1417,3 +1417,91 @@ DEFUN __ashldi3\n     ret\n ENDF __ashldi3\n #endif /* defined (L_ashldi3) */\n+\n+\n+/***********************************************************/    \n+;;; Softmul versions of FMUL, FMULS and FMULSU to implement\n+;;; __builtin_avr_fmul* if !AVR_HAVE_MUL\n+/***********************************************************/    \n+\n+#define A1 24\n+#define B1 25\n+#define C0 22\n+#define C1 23\n+#define A0 __tmp_reg__\n+\n+#ifdef L_fmuls\n+;;; r23:r22 = fmuls (r24, r25) like in FMULS instruction\n+;;; Clobbers: r24, r25, __tmp_reg__\n+DEFUN __fmuls\n+    ;; A0.7 = negate result?\n+    mov  A0, A1\n+    eor  A0, B1\n+    ;; B1 = |B1|\n+    sbrc B1, 7\n+    neg  B1\n+    XJMP __fmulsu_exit\n+ENDF __fmuls\n+#endif /* L_fmuls */\n+\n+#ifdef L_fmulsu\n+;;; r23:r22 = fmulsu (r24, r25) like in FMULSU instruction\n+;;; Clobbers: r24, r25, __tmp_reg__\n+DEFUN __fmulsu\n+    ;; A0.7 = negate result?\n+    mov  A0, A1\n+;; FALLTHRU\n+ENDF __fmulsu\n+\n+;; Helper for __fmuls and __fmulsu\n+DEFUN __fmulsu_exit\n+    ;; A1 = |A1|\n+    sbrc A1, 7\n+    neg  A1\n+#ifdef __AVR_HAVE_JMP_CALL__\n+    ;; Some cores have problem skipping 2-word instruction\n+    tst  A0\n+    brmi 1f\n+#else\n+    sbrs A0, 7\n+#endif /* __AVR_HAVE_JMP_CALL__ */\n+    XJMP  __fmul\n+1:  XCALL __fmul\n+    ;; C = -C iff A0.7 = 1\n+    com  C1\n+    neg  C0\n+    sbci C1, -1\n+    ret\n+ENDF __fmulsu_exit\n+#endif /* L_fmulsu */\n+\n+\n+#ifdef L_fmul\n+;;; r22:r23 = fmul (r24, r25) like in FMUL instruction\n+;;; Clobbers: r24, r25, __tmp_reg__\n+DEFUN __fmul\n+    ; clear result\n+    clr   C0\n+    clr   C1\n+    clr   A0\n+1:  tst   B1\n+    ;; 1.0 = 0x80, so test for bit 7 of B to see if A must to be added to C.\n+2:  brpl  3f\n+    ;; C += A\n+    add   C0, A0\n+    adc   C1, A1\n+3:  ;; A >>= 1\n+    lsr   A1\n+    ror   A0\n+    ;; B <<= 1\n+    lsl   B1\n+    brne  2b\n+    ret\n+ENDF __fmul\n+#endif /* L_fmul */\n+\n+#undef A0\n+#undef A1\n+#undef B1\n+#undef C0\n+#undef C1"}, {"sha": "a5357f0ecf6e398ba0c846399d099217e22421b3", "filename": "gcc/config/avr/t-avr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f451d14dcc3720d959a95efa6eb1f79ae6edd0ae/gcc%2Fconfig%2Favr%2Ft-avr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f451d14dcc3720d959a95efa6eb1f79ae6edd0ae/gcc%2Fconfig%2Favr%2Ft-avr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Ft-avr?ref=f451d14dcc3720d959a95efa6eb1f79ae6edd0ae", "patch": "@@ -78,7 +78,8 @@ LIB1ASMFUNCS = \\\n \t_bswapdi2 \\\n \t_ashldi3 \\\n \t_ashrdi3 \\\n-\t_lshrdi3\n+\t_lshrdi3 \\\n+\t_fmul _fmuls _fmulsu\n \n LIB2FUNCS_EXCLUDE = \\\n \t_clz"}, {"sha": "5b80616c9690959dad9a59d6286c21b1a8a3836c", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f451d14dcc3720d959a95efa6eb1f79ae6edd0ae/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f451d14dcc3720d959a95efa6eb1f79ae6edd0ae/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=f451d14dcc3720d959a95efa6eb1f79ae6edd0ae", "patch": "@@ -8226,8 +8226,8 @@ or if not a specific built-in is implemented or not. For example, if\n The following built-in functions map to the respective machine\n instruction, i.e. @code{nop}, @code{sei}, @code{cli}, @code{sleep},\n @code{wdr}, @code{swap}, @code{fmul}, @code{fmuls}\n-resp. @code{fmulsu}. The latter three are only available if the AVR\n-device actually supports multiplication.\n+resp. @code{fmulsu}. The three @code{fmul*} built-ins are implemented\n+as library call if no hardware multiplier is available.\n \n @smallexample\n void __builtin_avr_nop (void)"}]}