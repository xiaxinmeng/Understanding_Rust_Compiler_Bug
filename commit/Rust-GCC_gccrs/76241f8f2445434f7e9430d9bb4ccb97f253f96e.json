{"sha": "76241f8f2445434f7e9430d9bb4ccb97f253f96e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYyNDFmOGYyNDQ1NDM0ZjdlOTQzMGQ5YmI0Y2NiOTdmMjUzZjk2ZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-16T14:41:29Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-16T14:41:29Z"}, "message": "[multiple changes]\n\n2014-07-16  Gary Dismukes  <dismukes@adacore.com>\n\n\t* g-rewdat.adb, g-rewdat.ads: Minor reformatting.\n\n2014-07-16  Doug Rupp  <rupp@adacore.com>\n\n\t* s-interr-hwint.adb: Casing error on parameter.\n\n2014-07-16  Pascal Obry  <obry@adacore.com>\n\n\t* Makefile.rtl: Add g-rewdat.o dependencies in\n\tGNATRTL_NONTASKING_OBJS.\n\n2014-07-16  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_case.adb: Code clean up.\n\nFrom-SVN: r212660", "tree": {"sha": "ffaf0628968a447eb5a8ca927a1399f16fd18d3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffaf0628968a447eb5a8ca927a1399f16fd18d3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76241f8f2445434f7e9430d9bb4ccb97f253f96e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76241f8f2445434f7e9430d9bb4ccb97f253f96e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76241f8f2445434f7e9430d9bb4ccb97f253f96e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76241f8f2445434f7e9430d9bb4ccb97f253f96e/comments", "author": null, "committer": null, "parents": [{"sha": "36f6df662c5c857bf44d37bd609c8cb47e1d29c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36f6df662c5c857bf44d37bd609c8cb47e1d29c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36f6df662c5c857bf44d37bd609c8cb47e1d29c8"}], "stats": {"total": 74, "additions": 48, "deletions": 26}, "files": [{"sha": "57c59f4215fecc860320b773dd547aed0d3125df", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76241f8f2445434f7e9430d9bb4ccb97f253f96e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76241f8f2445434f7e9430d9bb4ccb97f253f96e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=76241f8f2445434f7e9430d9bb4ccb97f253f96e", "patch": "@@ -1,3 +1,20 @@\n+2014-07-16  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* g-rewdat.adb, g-rewdat.ads: Minor reformatting.\n+\n+2014-07-16  Doug Rupp  <rupp@adacore.com>\n+\n+\t* s-interr-hwint.adb: Casing error on parameter.\n+\n+2014-07-16  Pascal Obry  <obry@adacore.com>\n+\n+\t* Makefile.rtl: Add g-rewdat.o dependencies in\n+\tGNATRTL_NONTASKING_OBJS.\n+\n+2014-07-16  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_case.adb: Code clean up.\n+\n 2014-07-16  Vincent Celier  <celier@adacore.com>\n \n \t* make.adb: Do not read gnat.adc when gnatmake is invoked"}, {"sha": "25a30e04e2d980248c378d0d1ad980f91b0d7ac3", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76241f8f2445434f7e9430d9bb4ccb97f253f96e/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76241f8f2445434f7e9430d9bb4ccb97f253f96e/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=76241f8f2445434f7e9430d9bb4ccb97f253f96e", "patch": "@@ -428,6 +428,7 @@ GNATRTL_NONTASKING_OBJS= \\\n   g-rannum$(objext) \\\n   g-regexp$(objext) \\\n   g-regpat$(objext) \\\n+  g-rewdat$(objext) \\\n   g-sechas$(objext) \\\n   g-sehamd$(objext) \\\n   g-sehash$(objext) \\"}, {"sha": "855f78736adfe2ea7666a1a27708a76f412ca93b", "filename": "gcc/ada/g-rewdat.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76241f8f2445434f7e9430d9bb4ccb97f253f96e/gcc%2Fada%2Fg-rewdat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76241f8f2445434f7e9430d9bb4ccb97f253f96e/gcc%2Fada%2Fg-rewdat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-rewdat.adb?ref=76241f8f2445434f7e9430d9bb4ccb97f253f96e", "patch": "@@ -40,7 +40,7 @@ package body GNAT.Rewrite_Data is\n      (B      : in out Buffer;\n       Data   : Stream_Element_Array;\n       Output : not null access procedure (Data : Stream_Element_Array));\n-   --  Do the actual output, this ensures that we properly send the data\n+   --  Do the actual output. This ensures that we properly send the data\n    --  through linked rewrite buffers if any.\n \n    ------------\n@@ -62,7 +62,7 @@ package body GNAT.Rewrite_Data is\n       function To_SEAV is new Unchecked_Conversion (SV, SEAV);\n \n    begin\n-      --  Return result (can't be smaller than pattern\n+      --  Return result (can't be smaller than pattern)\n \n       return B : Buffer\n                    (SEO'Max (Size, SEO (Pattern'Length)),"}, {"sha": "b525192f28c61ac4be4dbedfff7f8edd37fc00d9", "filename": "gcc/ada/g-rewdat.ads", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76241f8f2445434f7e9430d9bb4ccb97f253f96e/gcc%2Fada%2Fg-rewdat.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76241f8f2445434f7e9430d9bb4ccb97f253f96e/gcc%2Fada%2Fg-rewdat.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-rewdat.ads?ref=76241f8f2445434f7e9430d9bb4ccb97f253f96e", "patch": "@@ -28,7 +28,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This package can be used to rewrite data on the fly. All occurences of a\n+--  This package can be used to rewrite data on the fly. All occurrences of a\n --  string (named pattern) will be replaced by another string.\n \n --  It is not necessary to load all data in memory and so this package can be\n@@ -37,7 +37,7 @@\n \n --  There is no dynamic allocation in the implementation.\n \n---  Example, to replace all occurences of \"Gnat\" with \"GNAT\":\n+--  For example, to replace all occurrences of \"Gnat\" with \"GNAT\":\n \n --    Rewriter : Buffer := Create (Pattern => \"Gnat\", Value => \"GNAT\");\n \n@@ -80,12 +80,12 @@ package GNAT.Rewrite_Data is\n    function Create\n      (Pattern, Value : String;\n       Size           : Stream_Element_Offset := 1_024) return Buffer;\n-   --  Create a rewriter buffer. Pattern is the string to be rewriten as Value.\n-   --  Size represent the size of the internal buffer used to store the data\n-   --  reeady to be output. A larger buffer may improve the performance as the\n+   --  Create a rewrite buffer. Pattern is the string to be rewritten as Value.\n+   --  Size represents the size of the internal buffer used to store the data\n+   --  ready to be output. A larger buffer may improve the performance, as the\n    --  Output routine (see Write, Rewrite below) will be called only when this\n-   --  buffer is full. Note that Size cannot be lower than Pattern'Length, if\n-   --  this is the case then Size value is set to Pattern'Length.\n+   --  buffer is full. Note that Size cannot be lower than Pattern'Length, and\n+   --  if this is the case, then Size value is set to Pattern'Length.\n \n    function Size (B : Buffer) return Natural;\n    --  Returns the current size of the buffer (count of Stream_Array_Element)\n@@ -114,12 +114,13 @@ package GNAT.Rewrite_Data is\n                           (Buffer : out Stream_Element_Array;\n                            Last   : out Stream_Element_Offset);\n       Output : not null access procedure (Data : Stream_Element_Array));\n-   --  Read data from Input, rewrite it and then call Output. When there is\n-   --  no more data to be read from Input Last must be set to 0. Before leaving\n-   --  this routine call Flush above to send all remaining data to Output.\n+   --  Read data from Input, rewrite it, and then call Output. When there is\n+   --  no more data to be read from Input, Last must be set to 0. Before\n+   --  leaving this routine, call Flush above to send all remaining data to\n+   --  Output.\n \n    procedure Link (From : in out Buffer; To : Buffer_Ref);\n-   --  Link two rewrite buffers, that is all data sent to From buffer will be\n+   --  Link two rewrite buffers. That is, all data sent to From buffer will be\n    --  rewritten and then passed to the To rewrite buffer.\n \n private"}, {"sha": "654efdc3b213c0221f14432ae245538ecc61e535", "filename": "gcc/ada/s-interr-hwint.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76241f8f2445434f7e9430d9bb4ccb97f253f96e/gcc%2Fada%2Fs-interr-hwint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76241f8f2445434f7e9430d9bb4ccb97f253f96e/gcc%2Fada%2Fs-interr-hwint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-interr-hwint.adb?ref=76241f8f2445434f7e9430d9bb4ccb97f253f96e", "patch": "@@ -711,7 +711,7 @@ package body System.Interrupts is\n \n    procedure Unimplemented (Feature : String) is\n    begin\n-      raise Program_Error with feature & \" not implemented on VxWorks\";\n+      raise Program_Error with Feature & \" not implemented on VxWorks\";\n    end Unimplemented;\n \n    -----------------------"}, {"sha": "30e79b258347768a3f239d0369e064995cb8e383", "filename": "gcc/ada/sem_case.adb", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76241f8f2445434f7e9430d9bb4ccb97f253f96e/gcc%2Fada%2Fsem_case.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76241f8f2445434f7e9430d9bb4ccb97f253f96e/gcc%2Fada%2Fsem_case.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_case.adb?ref=76241f8f2445434f7e9430d9bb4ccb97f253f96e", "patch": "@@ -23,7 +23,6 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Aspects;  use Aspects;\n with Atree;    use Atree;\n with Einfo;    use Einfo;\n with Errout;   use Errout;\n@@ -647,6 +646,9 @@ package body Sem_Case is\n       Bounds_Hi     : constant Node_Id := Type_High_Bound (Bounds_Type);\n       Bounds_Lo     : constant Node_Id := Type_Low_Bound  (Bounds_Type);\n       Num_Choices   : constant Nat     := Choice_Table'Last;\n+      Has_Predicate : constant Boolean :=\n+                        Is_Static_Subtype (Bounds_Type)\n+                          and then Present (Static_Predicate (Bounds_Type));\n \n       Choice      : Node_Id;\n       Choice_Hi   : Uint;\n@@ -679,17 +681,18 @@ package body Sem_Case is\n \n       Sorting.Sort (Positive (Choice_Table'Last));\n \n-      --  If the type covered by the list of choices is actually a static\n-      --  subtype subject to a static predicate, then the predicate defines\n-      --  subsets of legal values and we must verify that the branches of the\n-      --  case match those subsets. If there is no static_predicate there is no\n-      --  compiler check to perform. In particular we don't want any checks on\n-      --  a case expression that itself appears as the expression of a dynamic\n-      --  predicate. A case expression that defines a static predicate is\n-      --  expanded earlier into a membership test and is not subject to this\n-      --  spurious self-check either.\n-\n-      if Has_Aspect (Bounds_Type, Aspect_Static_Predicate) then\n+      --  The type covered by the list of choices is actually a static subtype\n+      --  subject to a static predicate. The predicate defines subsets of legal\n+      --  values and requires finer grained analysis.\n+\n+      --  Note that in GNAT the predicate is considered static if the predicate\n+      --  expression is static, independently of whether the aspect mentions\n+      --  Static explicitly.  It is unclear whether this is RM-conforming, but\n+      --  it's certainly useful, and GNAT source make use of this. The downside\n+      --  is that currently case expressions cannot appear in predicates that\n+      --  are not static.  ???\n+\n+      if Has_Predicate then\n          Pred    := First (Static_Predicate (Bounds_Type));\n          Prev_Lo := Uint_Minus_1;\n          Prev_Hi := Uint_Minus_1;"}]}