{"sha": "d19e783c45ab5b545af64a414e5edb4e946ba9de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE5ZTc4M2M0NWFiNWI1NDVhZjY0YTQxNGU1ZWRiNGU5NDZiYTlkZQ==", "commit": {"author": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-02-11T07:42:17Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-02-11T07:42:17Z"}, "message": "2003-02-11  Michael Koch  <konqueror@gmx.de>\n\n\t* java/nio/Buffer.java\n\t(cap, lim, pos, mark): Made private\n\t(Buffer): Added package private constructor.\n\t* java/nio/ByteBuffer.java\n\t(ByteBuffer): Implements Cloneable.\n\t(offset): New member variable.\n\t(readOnly): New member variable.\n\t(backing_buffer): New member variable.\n\t(allocateDirect): Throw exception and tell that direct buffers are\n\tnot supported yet, documentation added.\n\t(allocate): Documentation added.\n\t(wrap): Documentation added.\n\t(ByteBuffer): New constructor.\n\t(hasArray): New method.\n\t(array): New method.\n\t(arrayOffset): New method.\n\t(get): Documentation added.\n\t(put): Documentation added.\n\t* java/nio/CharBuffer.java\n\t(CharBuffer): New constructor.\n\t(compareTo): Don't access member variables of Buffer directly.\n\t* java/nio/DoubleBuffer.java\n\t(allocateDirect): Throw exception and tell that direct buffers are\n\tnot supported yet.\n\t* java/nio/FloatBuffer.java\n\t(allocateDirect): Throw exception and tell that direct buffers are\n\tnot supported yet.\n\t* java/nio/IntBuffer.java\n\t(allocateDirect): Throw exception and tell that direct buffers are\n\tnot supported yet.\n\t* java/nio/LongBuffer.java\n\t(allocateDirect): Throw exception and tell that direct buffers are\n\tnot supported yet.\n\t* java/nio/MappedByteBuffer.java\n\t(MappedByteBuffer): New method.\n\t(force): New method.\n\t(isLoaded): New method.\n\t(load): New method.\n\t* java/nio/ShortBuffer.java\n\t(allocateDirect): Throw exception and tell that direct buffers are\n\tnot supported yet.\n\nFrom-SVN: r62685", "tree": {"sha": "df6f5ea53dd4c1bc3ba3577fe38a432e6c8f2672", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df6f5ea53dd4c1bc3ba3577fe38a432e6c8f2672"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d19e783c45ab5b545af64a414e5edb4e946ba9de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d19e783c45ab5b545af64a414e5edb4e946ba9de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d19e783c45ab5b545af64a414e5edb4e946ba9de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d19e783c45ab5b545af64a414e5edb4e946ba9de/comments", "author": null, "committer": null, "parents": [{"sha": "c0da2641298d4ccc6fd491b0ed0a5117292d1c20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0da2641298d4ccc6fd491b0ed0a5117292d1c20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0da2641298d4ccc6fd491b0ed0a5117292d1c20"}], "stats": {"total": 219, "additions": 202, "deletions": 17}, "files": [{"sha": "7d291bedbc135b6379ce76c73d619e3eb8152839", "filename": "libjava/java/nio/Buffer.java", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19e783c45ab5b545af64a414e5edb4e946ba9de/libjava%2Fjava%2Fnio%2FBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19e783c45ab5b545af64a414e5edb4e946ba9de/libjava%2Fjava%2Fnio%2FBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FBuffer.java?ref=d19e783c45ab5b545af64a414e5edb4e946ba9de", "patch": "@@ -39,11 +39,33 @@\n \n public abstract class Buffer\n {\n-  int cap = 0;\n-  int limit = 0;\n-  int pos = 0;\n-  int mark = -1;\n-\n+  private int cap = 0;\n+  private int limit = 0;\n+  private int pos = 0;\n+  private int mark = -1;\n+\n+  // Creates a new Buffer.\n+  //\n+  // Should be package private.\n+  //\n+  Buffer (int capacity, int limit, int position, int mark)\n+  {\n+    if (capacity < 0)\n+      throw new IllegalArgumentException ();\n+    \n+    cap = capacity;\n+    limit (limit);\n+    position (position);\n+    \n+    if (mark > 0)\n+    {\n+      if (mark > pos)\n+        throw new IllegalArgumentException ();\n+      \n+      this.mark = mark;\n+    }\n+  }\n+  \n   /**\n    * Retrieves the capacity of the buffer.\n    */"}, {"sha": "380e6c67168ae8445eab0a1a2fd97761fe7255b7", "filename": "libjava/java/nio/ByteBuffer.java", "status": "modified", "additions": 140, "deletions": 5, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19e783c45ab5b545af64a414e5edb4e946ba9de/libjava%2Fjava%2Fnio%2FByteBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19e783c45ab5b545af64a414e5edb4e946ba9de/libjava%2Fjava%2Fnio%2FByteBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FByteBuffer.java?ref=d19e783c45ab5b545af64a414e5edb4e946ba9de", "patch": "@@ -37,43 +37,178 @@\n \n package java.nio;\n \n-public abstract class ByteBuffer extends Buffer\n+/**\n+ * @since 1.4\n+ */\n+public abstract class ByteBuffer extends Buffer implements Comparable\n {\n+  int offset;\n+  boolean readOnly;\n+  byte[] backing_buffer;\n+  \n+  /**\n+   * Allocates a new direct byte buffer.\n+   */ \n+  public static ByteBuffer allocateDirect (int capacity)\n+  {\n+    throw new Error (\"direct buffers are not implemented\");\n+  }\n+\n+  /**\n+   * Allocates a new byte buffer.\n+   */\n   public static ByteBuffer allocate (int capacity)\n   {\n     return null;\n   }\n  \n+  /**\n+   * Wraps a byte array into a buffer.\n+   * \n+   * @exception IndexOutOfBoundsException If the preconditions on the offset\n+   * and length parameters do not hold\n+   */\n   final public static ByteBuffer wrap (byte[] array, int offset, int length)\n   {\n     return null;\n   }\n \n+  /**\n+   * Wraps a byte array into a buffer.\n+   */\n   final public static ByteBuffer wrap (byte[] array)\n   {\n     return wrap (array, 0, array.length);\n   }\n-  \n-  final public ByteBuffer put (ByteBuffer src)\n+\n+  ByteBuffer (int capacity, int limit, int position, int mark)\n+  {\n+    super (capacity, limit, position, mark);\n+  }\n+\n+  /**\n+   * Writes the content of src into the buffer.\n+   *\n+   * @param src The source data.\n+   *\n+   * @exception BufferOverflowException If there is insufficient space in this\n+   * buffer for the remaining bytes in the source buffer.\n+   * @exception IllegalArgumentException If the source buffer is this buffer.\n+   * @exception ReadOnlyBufferException If this buffer is read only.\n+   */\n+  public ByteBuffer put (ByteBuffer src)\n   {\n+    if (src == this)\n+      throw new IllegalArgumentException ();\n+\n     while (src.hasRemaining ())\n       put (src.get ());\n     \n     return this;\n   }\n-  \n-  final public ByteBuffer put (byte[] src, int offset, int length)\n+\n+  /**\n+   * Writes the content of the the array src into the buffer.\n+   *\n+   * @param src The array to copy into the buffer.\n+   * @param offset The offset within the array of the first byte to be read;\n+   * must be non-negative and no larger than src.length.\n+   * @param length The number of bytes to be read from the given array;\n+   * must be non-negative and no larger than src.length - offset.\n+   *\n+   * @exception BufferOverflowException If there is insufficient space in this\n+   * buffer for the remaining bytes in the source buffer.\n+   * @exception IndexOutOfBoundsException If the preconditions on the offset\n+   * and length parameters do not hold.\n+   * @exception ReadOnlyBufferException If this buffer is read only.\n+   */\n+  public ByteBuffer put (byte[] src, int offset, int length)\n   {\n+    if ((offset < 0) ||\n+        (offset > src.length) ||\n+        (length < 0) ||\n+        (length > src.length - offset))\n+      throw new IndexOutOfBoundsException ();\n+\n     for (int i = offset; i < offset + length; i++)\n       put (src [i]);\n+    \n     return this;\n   }\n+\n+  /**\n+   * Writes the content of the the array src into the buffer.\n+   *\n+   * @param src The array to copy into the buffer.\n+   *\n+   * @exception BufferOverflowException If there is insufficient space in this\n+   * buffer for the remaining bytes in the source buffer.\n+   * @exception ReadOnlyBufferException If this buffer is read only.\n+   */\n   public final ByteBuffer put (byte[] src)\n   {\n     return put (src, 0, src.length);\n   }\n \n+  /**\n+   * Tells whether or not this buffer is backed by an accessible byte array.\n+   */\n+  public final boolean hasArray ()\n+  {\n+    return (backing_buffer != null\n+             && !readOnly);\n+  }\n+\n+  /**\n+   * Returns the byte array that backs this buffer.\n+   *\n+   * @exception ReadOnlyBufferException If this buffer is backed by an array\n+   * but is read-only.\n+   * @exception UnsupportedOperationException If this buffer is not backed\n+   * by an accessible array.\n+   */\n+  public final byte[] array ()\n+  {\n+    if (backing_buffer == null)\n+      throw new UnsupportedOperationException ();\n+\n+    if (readOnly)\n+      throw new ReadOnlyBufferException ();\n+\n+    return backing_buffer;\n+  }\n+\n+  /**\n+   * Returns the offset within this buffer's backing array of the first element\n+   * of the buffer  \n+   *\n+   * @exception ReadOnlyBufferException If this buffer is backed by an array\n+   * but is read-only.\n+   * @exception UnsupportedOperationException If this buffer is not backed\n+   * by an accessible array.\n+   */\n+  public final int arrayOffset ()\n+  {\n+    if (backing_buffer == null)\n+      throw new UnsupportedOperationException ();\n+\n+    if (readOnly)\n+      throw new ReadOnlyBufferException ();\n+\n+    return offset;\n+  }\n+  \n+  /**\n+   * Relative get method.\n+   */\n   public abstract byte get ();\n   \n+  /**\n+   * Relative put method.\n+   *\n+   * @exception BufferOverflowException If this buffer's current position is\n+   * not smaller than its limit.\n+   * @exception ReadOnlyBufferException If this buffer is read-only.\n+   */\n   public abstract ByteBuffer put (byte b);\n }"}, {"sha": "0e61302c4e9ba4de312219cbecace54f2b04bfeb", "filename": "libjava/java/nio/CharBuffer.java", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19e783c45ab5b545af64a414e5edb4e946ba9de/libjava%2Fjava%2Fnio%2FCharBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19e783c45ab5b545af64a414e5edb4e946ba9de/libjava%2Fjava%2Fnio%2FCharBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FCharBuffer.java?ref=d19e783c45ab5b545af64a414e5edb4e946ba9de", "patch": "@@ -88,6 +88,11 @@ final public static CharBuffer wrap (char[] array)\n   {\n     return wrap  (array, 0, array.length);\n   }\n+ \n+  CharBuffer (int cap, int lim, int pos, int mark)\n+  {\n+    super (cap, lim, pos, mark);\n+  }\n   \n   /**\n    * @exception BufferUnderflowException FIXME\n@@ -197,8 +202,8 @@ public int compareTo(Object obj)\n       return 1;\n     \n     int r = remaining ();\n-    int i1 = pos;\n-    int i2 = a.pos;\n+    int i1 = position ();\n+    int i2 = a.position ();\n     \n     for (int i = 0; i < r; i++)\n       {"}, {"sha": "72a6c09078de6824fe8405a4c46a0cf0e6234718", "filename": "libjava/java/nio/DoubleBuffer.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19e783c45ab5b545af64a414e5edb4e946ba9de/libjava%2Fjava%2Fnio%2FDoubleBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19e783c45ab5b545af64a414e5edb4e946ba9de/libjava%2Fjava%2Fnio%2FDoubleBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FDoubleBuffer.java?ref=d19e783c45ab5b545af64a414e5edb4e946ba9de", "patch": "@@ -46,7 +46,7 @@ public abstract class DoubleBuffer extends Buffer implements Comparable\n \n   public static DoubleBuffer allocateDirect(int capacity)\n   {\n-    return new DoubleBufferImpl(capacity, 0, capacity);\n+    throw new Error (\"direct buffers are not implemented\");\n   }\n \n   public static DoubleBuffer allocate(int capacity)"}, {"sha": "b780ff597d82ef2893bf5132efb2c45f7c19d2ff", "filename": "libjava/java/nio/FloatBuffer.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19e783c45ab5b545af64a414e5edb4e946ba9de/libjava%2Fjava%2Fnio%2FFloatBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19e783c45ab5b545af64a414e5edb4e946ba9de/libjava%2Fjava%2Fnio%2FFloatBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FFloatBuffer.java?ref=d19e783c45ab5b545af64a414e5edb4e946ba9de", "patch": "@@ -46,7 +46,7 @@ public abstract class FloatBuffer extends Buffer implements Comparable\n \n   public static FloatBuffer allocateDirect(int capacity)\n   {\n-    return new FloatBufferImpl (capacity, 0, capacity);\n+    throw new Error (\"direct buffers not implemented\");\n   }\n \n   public static FloatBuffer allocate(int capacity)"}, {"sha": "aca6e0f1902cdcab501d6b76916cf5289d20500c", "filename": "libjava/java/nio/IntBuffer.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19e783c45ab5b545af64a414e5edb4e946ba9de/libjava%2Fjava%2Fnio%2FIntBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19e783c45ab5b545af64a414e5edb4e946ba9de/libjava%2Fjava%2Fnio%2FIntBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FIntBuffer.java?ref=d19e783c45ab5b545af64a414e5edb4e946ba9de", "patch": "@@ -46,7 +46,7 @@ public abstract class IntBuffer extends Buffer implements Comparable\n \n   public static IntBuffer allocateDirect(int capacity)\n   {\n-    return new IntBufferImpl (capacity, 0, capacity);\n+    throw new Error (\"direct buffers not implemented\");\n   }\n \n   public static IntBuffer allocate(int capacity)"}, {"sha": "0ddc7938a4965335a91c8ead73f1a96d6fc07635", "filename": "libjava/java/nio/LongBuffer.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19e783c45ab5b545af64a414e5edb4e946ba9de/libjava%2Fjava%2Fnio%2FLongBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19e783c45ab5b545af64a414e5edb4e946ba9de/libjava%2Fjava%2Fnio%2FLongBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FLongBuffer.java?ref=d19e783c45ab5b545af64a414e5edb4e946ba9de", "patch": "@@ -46,7 +46,7 @@ public abstract class LongBuffer extends Buffer implements Comparable\n \n   public static LongBuffer allocateDirect(int capacity)\n   {\n-    return new LongBufferImpl(capacity, 0, capacity);\n+    throw new Error (\"direct buffers not implemented\");\n   }\n \n   public static LongBuffer allocate(int capacity)"}, {"sha": "305327b74c58a66dea8045cf7b226d00193a6b6a", "filename": "libjava/java/nio/MappedByteBuffer.java", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19e783c45ab5b545af64a414e5edb4e946ba9de/libjava%2Fjava%2Fnio%2FMappedByteBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19e783c45ab5b545af64a414e5edb4e946ba9de/libjava%2Fjava%2Fnio%2FMappedByteBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FMappedByteBuffer.java?ref=d19e783c45ab5b545af64a414e5edb4e946ba9de", "patch": "@@ -37,6 +37,29 @@\n \n package java.nio;\n \n+/**\n+ * @author Michael Koch\n+ * @since 1.4\n+ */\n public abstract class MappedByteBuffer extends ByteBuffer\n {\n+  MappedByteBuffer (int capacity, int limit, int position, int mark)\n+  {\n+    super (capacity, limit, position, mark);\n+  }\n+  \n+  public final MappedByteBuffer force ()\n+  {\n+    return this;\n+  }\n+    \n+  public final boolean isLoaded ()\n+  {\n+    return true;\n+  }\n+    \n+  public final MappedByteBuffer load ()\n+  {\n+    return this;\n+  }\n }"}, {"sha": "512c9fd8bec129afcdf8478de1aacdd3848440b4", "filename": "libjava/java/nio/ShortBuffer.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19e783c45ab5b545af64a414e5edb4e946ba9de/libjava%2Fjava%2Fnio%2FShortBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19e783c45ab5b545af64a414e5edb4e946ba9de/libjava%2Fjava%2Fnio%2FShortBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FShortBuffer.java?ref=d19e783c45ab5b545af64a414e5edb4e946ba9de", "patch": "@@ -46,7 +46,7 @@ public abstract class ShortBuffer extends Buffer implements Comparable\n \n   public static ShortBuffer allocateDirect(int capacity)\n   {\n-    return new ShortBufferImpl(capacity, 0, capacity);\n+    throw new Error (\"direct buffers not implemented\");\n   }\n \n   public static ShortBuffer allocate(int capacity)"}]}