{"sha": "47cd155763fa67da6f50821714de8b1cbebab8fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdjZDE1NTc2M2ZhNjdkYTZmNTA4MjE3MTRkZThiMWNiZWJhYjhmYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-09-23T18:14:24Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-09-23T18:14:24Z"}, "message": "Implement DR 396 [Ready].\n\n2008-09-23  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tImplement DR 396 [Ready].\n\t* include/std/bitset (bitset<>::bitset(const std::basic_string<>&,\n\tsize_t, size_t, _CharT, _CharT), bitset<>::bitset(const char*,\n\tchar, char), bitset<>::to_string(_CharT, _CharT),\n\tbitset<>::_M_copy_from_string(const std::basic_string<>&, size_t,\n\tsize_t, _CharT, _CharT), bitset<>::_M_copy_to_string\n\t(std::basic_string<>&, _CharT, _CharT), bitset<>::_M_copy_from_ptr(\n\tconst _CharT*, size_t, size_t, size_t, _CharT, _CharT)): Add.\n\t(operator>>(std::basic_istream<>&, bitset<_Nb>&), operator<<(\n\tstd::basic_ostream<>&, const bitset<_Nb>&)): Adjust.\n\t* include/debug/bitset (bitset<>::bitset(const std::basic_string<>&,\n\tsize_t, size_t, _CharT, _CharT), bitset<>::bitset(const char*,\n\tchar, char), bitset<>::to_string(_CharT, _CharT)): Add.\n\t* doc/xml/manual/intro.xml: Add an entry for DR 396.\n\t* testsuite/23_containers/bitset/cons/dr396.cc: Add.\n\t* testsuite/23_containers/bitset/to_string/dr396.cc: Likewise.\n\nFrom-SVN: r140607", "tree": {"sha": "83a429a496255d0aafa7fadcc8baf90768f93d21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83a429a496255d0aafa7fadcc8baf90768f93d21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47cd155763fa67da6f50821714de8b1cbebab8fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47cd155763fa67da6f50821714de8b1cbebab8fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47cd155763fa67da6f50821714de8b1cbebab8fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47cd155763fa67da6f50821714de8b1cbebab8fb/comments", "author": null, "committer": null, "parents": [{"sha": "37e27d01ca9a909987268f9e7ddc0a85cfc0863c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37e27d01ca9a909987268f9e7ddc0a85cfc0863c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37e27d01ca9a909987268f9e7ddc0a85cfc0863c"}], "stats": {"total": 372, "additions": 323, "deletions": 49}, "files": [{"sha": "164626275c8daebf6dc1e941cd06439ff4183e90", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47cd155763fa67da6f50821714de8b1cbebab8fb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47cd155763fa67da6f50821714de8b1cbebab8fb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=47cd155763fa67da6f50821714de8b1cbebab8fb", "patch": "@@ -1,3 +1,22 @@\n+2008-09-23  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tImplement DR 396 [Ready].\n+\t* include/std/bitset (bitset<>::bitset(const std::basic_string<>&,\n+\tsize_t, size_t, _CharT, _CharT), bitset<>::bitset(const char*,\n+\tchar, char), bitset<>::to_string(_CharT, _CharT),\n+\tbitset<>::_M_copy_from_string(const std::basic_string<>&, size_t,\n+\tsize_t, _CharT, _CharT), bitset<>::_M_copy_to_string\n+\t(std::basic_string<>&, _CharT, _CharT), bitset<>::_M_copy_from_ptr(\n+\tconst _CharT*, size_t, size_t, size_t, _CharT, _CharT)): Add.\n+\t(operator>>(std::basic_istream<>&, bitset<_Nb>&), operator<<(\n+\tstd::basic_ostream<>&, const bitset<_Nb>&)): Adjust.\n+\t* include/debug/bitset (bitset<>::bitset(const std::basic_string<>&,\n+\tsize_t, size_t, _CharT, _CharT), bitset<>::bitset(const char*,\n+\tchar, char), bitset<>::to_string(_CharT, _CharT)): Add.\n+\t* doc/xml/manual/intro.xml: Add an entry for DR 396.\n+\t* testsuite/23_containers/bitset/cons/dr396.cc: Add.\n+\t* testsuite/23_containers/bitset/to_string/dr396.cc: Likewise.\n+\n 2008-09-23  Chris Fairles <cfairles@gcc.gnu.org>\n \n \t* include/std/chrono: If _GLIBCXX_USE_MONOTONIC_CLOCK is defined, don't"}, {"sha": "eb9652f49ec738df51f603317667643a5dec7ce2", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47cd155763fa67da6f50821714de8b1cbebab8fb/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47cd155763fa67da6f50821714de8b1cbebab8fb/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=47cd155763fa67da6f50821714de8b1cbebab8fb", "patch": "@@ -522,6 +522,12 @@\n     <listitem><para>Change it to return a <code>const T&amp;</code>.\n     </para></listitem></varlistentry>\n \n+    <varlistentry><term><ulink url=\"../ext/lwg-active.html#396\">396</ulink>:\n+        <emphasis>what are characters zero and one</emphasis>\n+    </term>\n+    <listitem><para>Implement the proposed resolution.\n+    </para></listitem></varlistentry>\n+\n     <varlistentry><term><ulink url=\"../ext/lwg-defects.html#402\">402</ulink>:\n         <emphasis>Wrong new expression in [some_]allocator::construct</emphasis>\n     </term>"}, {"sha": "28e0282e992bca068a08966ae673c90190201cf8", "filename": "libstdc++-v3/include/debug/bitset", "status": "modified", "additions": 61, "deletions": 15, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47cd155763fa67da6f50821714de8b1cbebab8fb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47cd155763fa67da6f50821714de8b1cbebab8fb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset?ref=47cd155763fa67da6f50821714de8b1cbebab8fb", "patch": "@@ -1,6 +1,7 @@\n // Debugging bitset implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -125,20 +126,31 @@ namespace __debug\n \n       bitset(unsigned long __val) : _Base(__val) { }\n \n-      template<typename _CharT, typename _Traits, typename _Allocator>\n+      template<typename _CharT, typename _Traits, typename _Alloc>\n         explicit\n-        bitset(const std::basic_string<_CharT,_Traits,_Allocator>& __str,\n-\t       typename std::basic_string<_CharT,_Traits,_Allocator>::size_type\n+        bitset(const std::basic_string<_CharT, _Traits, _Alloc>& __str,\n+\t       typename std::basic_string<_CharT, _Traits, _Alloc>::size_type\n \t       __pos = 0,\n-\t       typename std::basic_string<_CharT,_Traits,_Allocator>::size_type\n-\t       __n = (std::basic_string<_CharT,_Traits,_Allocator>::npos))\n+\t       typename std::basic_string<_CharT, _Traits, _Alloc>::size_type\n+\t       __n = (std::basic_string<_CharT, _Traits, _Alloc>::npos))\n \t: _Base(__str, __pos, __n) { }\n \n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 396. what are characters zero and one.\n+      template<class _CharT, class _Traits, class _Alloc>\n+\tbitset(const std::basic_string<_CharT, _Traits, _Alloc>& __str,\n+\t       typename std::basic_string<_CharT, _Traits, _Alloc>::size_type\n+\t       __pos,\n+\t       typename std::basic_string<_CharT, _Traits, _Alloc>::size_type\n+\t       __n,\n+\t       _CharT __zero, _CharT __one = _CharT('1'))\n+\t: _Base(__str, __pos, __n, __zero, __one) { }\n+\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 778. std::bitset does not have any constructor taking a string literal\n       explicit\n-      bitset(const char* __s)\n-      : _Base(__s) { }\n+      bitset(const char* __s, char __zero = '0', char __one = '1')\n+      : _Base(__s, __zero, __one) { }\n \n       bitset(const _Base& __x) : _Base(__x), _Safe_base() { }\n \n@@ -245,10 +257,20 @@ namespace __debug\n \n       using _Base::to_ulong;\n \n-      template <typename _CharT, typename _Traits, typename _Allocator>\n-        std::basic_string<_CharT, _Traits, _Allocator>\n+      template <typename _CharT, typename _Traits, typename _Alloc>\n+        std::basic_string<_CharT, _Traits, _Alloc>\n         to_string() const\n-        { return _M_base().template to_string<_CharT, _Traits, _Allocator>(); }\n+        { return _M_base().template to_string<_CharT, _Traits, _Alloc>(); }\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 396. what are characters zero and one.\n+      template<class _CharT, class _Traits, class _Alloc>\n+\tstd::basic_string<_CharT, _Traits, _Alloc>\n+\tto_string(_CharT __zero, _CharT __one = _CharT('1')) const\n+\t{\n+\t  return _M_base().template\n+\t    to_string<_CharT, _Traits, _Alloc>(__zero, __one);\n+\t}\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 434. bitset::to_string() hard to use.\n@@ -257,6 +279,14 @@ namespace __debug\n         to_string() const\n         { return to_string<_CharT, _Traits, std::allocator<_CharT> >(); }\n \n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 396. what are characters zero and one.\n+      template<class _CharT, class _Traits>\n+\tstd::basic_string<_CharT, _Traits, std::allocator<_CharT> >\n+\tto_string(_CharT __zero, _CharT __one = _CharT('1')) const\n+\t{ return to_string<_CharT, _Traits,\n+\t                   std::allocator<_CharT> >(__zero, __one); }\n+\n       template<typename _CharT>\n         std::basic_string<_CharT, std::char_traits<_CharT>,\n                           std::allocator<_CharT> >\n@@ -266,11 +296,27 @@ namespace __debug\n                            std::allocator<_CharT> >();\n         }\n \n+      template<class _CharT>\n+\tstd::basic_string<_CharT, std::char_traits<_CharT>,\n+\t                  std::allocator<_CharT> >\n+\tto_string(_CharT __zero, _CharT __one = _CharT('1')) const\n+\t{\n+\t  return to_string<_CharT, std::char_traits<_CharT>,\n+\t                   std::allocator<_CharT> >(__zero, __one);\n+\t}\n+\n       std::basic_string<char, std::char_traits<char>, std::allocator<char> >\n-        to_string() const\n-        {\n-          return to_string<char,std::char_traits<char>,std::allocator<char> >();\n-        }\n+      to_string() const\n+      {\n+\treturn to_string<char,std::char_traits<char>,std::allocator<char> >();\n+      }\n+\n+      std::basic_string<char, std::char_traits<char>, std::allocator<char> >\n+      to_string(char __zero, char __one = '1') const\n+      {\n+\treturn to_string<char, std::char_traits<char>,\n+\t                 std::allocator<char> >(__zero, __one);\n+      }\n \n       using _Base::count;\n       using _Base::size;"}, {"sha": "9a1ba8d0ddf537ab6234e2e183f48c355f8135d8", "filename": "libstdc++-v3/include/std/bitset", "status": "modified", "additions": 108, "deletions": 34, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47cd155763fa67da6f50821714de8b1cbebab8fb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47cd155763fa67da6f50821714de8b1cbebab8fb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset?ref=47cd155763fa67da6f50821714de8b1cbebab8fb", "patch": "@@ -764,7 +764,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t    __throw_out_of_range(__N(\"bitset::bitset initial position \"\n \t\t\t\t     \"not valid\"));\n \t  _M_copy_from_string(__s, __position,\n-\t\t\t      std::basic_string<_CharT, _Traits, _Alloc>::npos);\n+\t\t\t      std::basic_string<_CharT, _Traits, _Alloc>::npos,\n+\t\t\t      _CharT('0'), _CharT('1'));\n \t}\n \n       /**\n@@ -784,15 +785,33 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t  if (__position > __s.size())\n \t    __throw_out_of_range(__N(\"bitset::bitset initial position \"\n \t\t\t\t     \"not valid\"));\n-\t  _M_copy_from_string(__s, __position, __n);\n+\t  _M_copy_from_string(__s, __position, __n, _CharT('0'), _CharT('1'));\n+\t}\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 396. what are characters zero and one.\n+      template<class _CharT, class _Traits, class _Alloc>\n+\tbitset(const std::basic_string<_CharT, _Traits, _Alloc>& __s,\n+\t       size_t __position, size_t __n,\n+\t       _CharT __zero, _CharT __one = _CharT('1'))\n+\t: _Base()\n+\t{\n+\t  if (__position > __s.size())\n+\t    __throw_out_of_range(__N(\"bitset::bitset initial position \"\n+\t\t\t\t     \"not valid\"));\n+\t  _M_copy_from_string(__s, __position, __n, __zero, __one);\n \t}\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 778. std::bitset does not have any constructor taking a string literal\n       explicit\n-      bitset(const char* __s)\n+      bitset(const char* __s, char __zero = '0', char __one = '1')\n       : _Base()\n-      { _M_copy_from_ptr(__s, char_traits<char>::length(__s), 0, size_t(-1)); }\n+      {\n+\t_M_copy_from_ptr<char, char_traits<char> >(__s,\n+\t\t\t       char_traits<char>::length(__s), 0, size_t(-1),\n+\t\t\t\t\t\t   __zero, __one);\n+      }\n \n       // 23.3.5.2 bitset operations:\n       //@{\n@@ -1028,7 +1047,18 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \tto_string() const\n \t{\n \t  std::basic_string<_CharT, _Traits, _Alloc> __result;\n-\t  _M_copy_to_string(__result);\n+\t  _M_copy_to_string(__result, _CharT('0'), _CharT('1'));\n+\t  return __result;\n+\t}\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 396. what are characters zero and one.\n+      template<class _CharT, class _Traits, class _Alloc>\n+\tstd::basic_string<_CharT, _Traits, _Alloc>\n+\tto_string(_CharT __zero, _CharT __one = _CharT('1')) const\n+\t{\n+\t  std::basic_string<_CharT, _Traits, _Alloc> __result;\n+\t  _M_copy_to_string(__result, __zero, __one);\n \t  return __result;\n \t}\n \n@@ -1039,6 +1069,14 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \tto_string() const\n \t{ return to_string<_CharT, _Traits, std::allocator<_CharT> >(); }\n \n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 396. what are characters zero and one.\n+      template<class _CharT, class _Traits>\n+\tstd::basic_string<_CharT, _Traits, std::allocator<_CharT> >\n+\tto_string(_CharT __zero, _CharT __one = _CharT('1')) const\n+\t{ return to_string<_CharT, _Traits,\n+\t                   std::allocator<_CharT> >(__zero, __one); }\n+\n       template<class _CharT>\n \tstd::basic_string<_CharT, std::char_traits<_CharT>,\n \t                  std::allocator<_CharT> >\n@@ -1048,27 +1086,59 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t                   std::allocator<_CharT> >();\n \t}\n \n+      template<class _CharT>\n+\tstd::basic_string<_CharT, std::char_traits<_CharT>,\n+\t                  std::allocator<_CharT> >\n+\tto_string(_CharT __zero, _CharT __one = _CharT('1')) const\n+\t{\n+\t  return to_string<_CharT, std::char_traits<_CharT>,\n+\t                   std::allocator<_CharT> >(__zero, __one);\n+\t}\n+\n       std::basic_string<char, std::char_traits<char>, std::allocator<char> >\n       to_string() const\n       {\n \treturn to_string<char, std::char_traits<char>,\n \t                 std::allocator<char> >();\n       }\n \n+      std::basic_string<char, std::char_traits<char>, std::allocator<char> >\n+      to_string(char __zero, char __one = '1') const\n+      {\n+\treturn to_string<char, std::char_traits<char>,\n+\t                 std::allocator<char> >(__zero, __one);\n+      }\n+\n       // Helper functions for string operations.\n-      template<class _CharT>\n+      template<class _CharT, class _Traits>\n         void\n-        _M_copy_from_ptr(const _CharT*, size_t, size_t, size_t);\n+        _M_copy_from_ptr(const _CharT*, size_t, size_t, size_t,\n+\t\t\t _CharT, _CharT);\n+\n+      template<class _CharT, class _Traits, class _Alloc>\n+\tvoid\n+\t_M_copy_from_string(const std::basic_string<_CharT,\n+\t\t\t    _Traits, _Alloc>& __s, size_t __pos, size_t __n,\n+\t\t\t    _CharT __zero, _CharT __one)\n+\t{ _M_copy_from_ptr<_CharT, _Traits>(__s.data(), __s.size(), __pos, __n,\n+\t\t\t\t\t    __zero, __one); }\n+\n+      template<class _CharT, class _Traits, class _Alloc>\n+\tvoid\n+        _M_copy_to_string(std::basic_string<_CharT, _Traits, _Alloc>&,\n+\t\t\t  _CharT, _CharT) const;\n \n+      // NB: Backward compat.\n       template<class _CharT, class _Traits, class _Alloc>\n \tvoid\n \t_M_copy_from_string(const std::basic_string<_CharT,\n \t\t\t    _Traits, _Alloc>& __s, size_t __pos, size_t __n)\n-\t{ _M_copy_from_ptr(__s.data(), __s.size(), __pos, __n); }\n+\t{ _M_copy_from_string(__s, __pos, __n, _CharT('0'), _CharT('1')); }\n \n       template<class _CharT, class _Traits, class _Alloc>\n \tvoid\n-\t_M_copy_to_string(std::basic_string<_CharT, _Traits, _Alloc>&) const;\n+        _M_copy_to_string(std::basic_string<_CharT, _Traits,_Alloc>& __s) const\n+\t{ _M_copy_to_string(__s, _CharT('0'), _CharT('1')); }\n \n       /// Returns the number of bits which are set.\n       size_t\n@@ -1166,39 +1236,37 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \n   // Definitions of non-inline member functions.\n   template<size_t _Nb>\n-    template<class _CharT>\n+    template<class _CharT, class _Traits>\n       void\n       bitset<_Nb>::\n       _M_copy_from_ptr(const _CharT* __s, size_t __len,\n-\t\t       size_t __pos, size_t __n)\n+\t\t       size_t __pos, size_t __n, _CharT __zero, _CharT __one)\n       {\n \treset();\n \tconst size_t __nbits = std::min(_Nb, std::min(__n, __len - __pos));\n \tfor (size_t __i = __nbits; __i > 0; --__i)\n \t  {\n-\t    switch(__s[__pos + __nbits - __i])\n-\t      {\n-\t      case '0':\n-\t\tbreak;\n-\t      case '1':\n-\t\t_Unchecked_set(__i - 1);\n-\t\tbreak;\n-\t      default:\n-\t\t__throw_invalid_argument(__N(\"bitset::_M_copy_from_ptr\"));\n-\t      }\n+\t    const _CharT __c = __s[__pos + __nbits - __i];\n+\t    if (_Traits::eq(__c, __zero))\n+\t      ;\n+\t    else if (_Traits::eq(__c, __one))\n+\t      _Unchecked_set(__i - 1);\n+\t    else\n+\t      __throw_invalid_argument(__N(\"bitset::_M_copy_from_ptr\"));\n \t  }\n       }\n \n   template<size_t _Nb>\n     template<class _CharT, class _Traits, class _Alloc>\n       void\n       bitset<_Nb>::\n-      _M_copy_to_string(std::basic_string<_CharT, _Traits, _Alloc>& __s) const\n+      _M_copy_to_string(std::basic_string<_CharT, _Traits, _Alloc>& __s,\n+\t\t\t_CharT __zero, _CharT __one) const\n       {\n-\t__s.assign(_Nb, '0');\n+\t__s.assign(_Nb, __zero);\n \tfor (size_t __i = _Nb; __i > 0; --__i)\n \t  if (_Unchecked_test(__i - 1))\n-\t    __s[_Nb - __i] = '1';\n+\t    _Traits::assign(__s[_Nb - __i], __one);\n       }\n \n   // 23.3.5.3 bitset operations:\n@@ -1259,16 +1327,17 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       std::basic_string<_CharT, _Traits> __tmp;\n       __tmp.reserve(_Nb);\n \n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 303. Bitset input operator underspecified\n+      const char_type __zero = __is.widen('0');\n+      const char_type __one = __is.widen('1');\n+\n       typename __ios_base::iostate __state = __ios_base::goodbit;\n       typename __istream_type::sentry __sentry(__is);\n       if (__sentry)\n \t{\n \t  try\n \t    {\n-\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-\t      // 303. Bitset input operator underspecified\n-\t      const char_type __zero = __is.widen('0');\n-\t      const char_type __one = __is.widen('1');\n \t      for (size_t __i = _Nb; __i > 0; --__i)\n \t\t{\n \t\t  static typename _Traits::int_type __eof = _Traits::eof();\n@@ -1282,10 +1351,10 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t\t  else\n \t\t    {\n \t\t      const char_type __c2 = _Traits::to_char_type(__c1);\n-\t\t      if (__c2 == __zero)\n-\t\t\t__tmp.push_back('0');\n-\t\t      else if (__c2 == __one)\n-\t\t\t__tmp.push_back('1');\n+\t\t      if (_Traits::eq(__c2, __zero))\n+\t\t\t__tmp.push_back(__zero);\n+\t\t      else if (_Traits::eq(__c2, __one))\n+\t\t\t__tmp.push_back(__one);\n \t\t      else if (_Traits::\n \t\t\t       eq_int_type(__is.rdbuf()->sputbackc(__c2),\n \t\t\t\t\t   __eof))\n@@ -1308,7 +1377,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       if (__tmp.empty() && _Nb)\n \t__state |= __ios_base::failbit;\n       else\n-\t__x._M_copy_from_string(__tmp, static_cast<size_t>(0), _Nb);\n+\t__x._M_copy_from_string(__tmp, static_cast<size_t>(0), _Nb,\n+\t\t\t\t__zero, __one);\n       if (__state)\n \t__is.setstate(__state);\n       return __is;\n@@ -1320,7 +1390,11 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t       const bitset<_Nb>& __x)\n     {\n       std::basic_string<_CharT, _Traits> __tmp;\n-      __x._M_copy_to_string(__tmp);\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 396. what are characters zero and one.\n+      const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__os.getloc());\n+      __x._M_copy_to_string(__tmp, __ct.widen('0'), __ct.widen('1'));\n       return __os << __tmp;\n     }\n   //@}"}, {"sha": "3c8a576a96f3de2f57cdb80b39c8db22b95808f7", "filename": "libstdc++-v3/testsuite/23_containers/bitset/cons/dr396.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47cd155763fa67da6f50821714de8b1cbebab8fb/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fcons%2Fdr396.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47cd155763fa67da6f50821714de8b1cbebab8fb/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fcons%2Fdr396.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fcons%2Fdr396.cc?ref=47cd155763fa67da6f50821714de8b1cbebab8fb", "patch": "@@ -0,0 +1,64 @@\n+// 2009-09-23  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <bitset>\n+#include <testsuite_hooks.h>\n+\n+// DR 396. what are characters zero and one.\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::bitset<4> z1(\"bbab\", 'a', 'b');\n+  std::bitset<4> z1_ref(std::string(\"bbab\"), 0, std::string::npos, 'a', 'b');\n+  VERIFY( z1.to_string('a', 'b') == \"bbab\" );\n+  VERIFY( z1 == z1_ref );\n+\n+  std::bitset<4> z2(\"11a1\", 'a');\n+  std::bitset<4> z2_ref(std::string(\"11a1\"), 0, std::string::npos, 'a');\n+  VERIFY( z2.to_string('a') == \"11a1\" );\n+  VERIFY( z2 == z2_ref );\n+\n+  std::bitset<8> z3(\"babb\", 'a', 'b');\n+  std::bitset<8> z3_ref(std::string(\"babb\"), 0, std::string::npos, 'a', 'b');\n+  VERIFY( z3.to_string('a', 'b') == \"aaaababb\" );\n+  VERIFY( z3 == z3_ref );\n+\n+  std::bitset<8> z4(\"1a11\", 'a');\n+  std::bitset<8> z4_ref(std::string(\"1a11\"), 0, std::string::npos, 'a');\n+  VERIFY( z4.to_string('a') == \"aaaa1a11\" );\n+  VERIFY( z4 == z4_ref );\n+\n+  std::bitset<2> z5(\"bbab\", 'a', 'b');\n+  std::bitset<2> z5_ref(std::string(\"bbab\"), 0, std::string::npos, 'a', 'b');\n+  VERIFY( z5.to_string('a', 'b') == \"bb\" );\n+  VERIFY( z5 == z5_ref );\n+\n+  std::bitset<2> z6(\"11a1\", 'a');\n+  std::bitset<2> z6_ref(std::string(\"11a1\"), 0, std::string::npos, 'a');\n+  VERIFY( z6.to_string('a') == \"11\" );\n+  VERIFY( z6 == z6_ref );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ac31df1cd53d19f6d64aee16eeb6673385a48f7e", "filename": "libstdc++-v3/testsuite/23_containers/bitset/to_string/dr396.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47cd155763fa67da6f50821714de8b1cbebab8fb/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fto_string%2Fdr396.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47cd155763fa67da6f50821714de8b1cbebab8fb/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fto_string%2Fdr396.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fto_string%2Fdr396.cc?ref=47cd155763fa67da6f50821714de8b1cbebab8fb", "patch": "@@ -0,0 +1,65 @@\n+// 2008-09-23  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 23.3.5.2 bitset members\n+\n+#include <bitset>\n+#include <testsuite_hooks.h>\n+\n+// DR 396. what are characters zero and one.\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  bitset<5> b5;\n+  string s0 = b5.to_string<char, char_traits<char>, allocator<char> >('a', 'b');\n+  VERIFY( s0 == \"aaaaa\" );\n+\n+  string s1 = b5.to_string<char, char_traits<char>, allocator<char> >('b');\n+  VERIFY( s1 == \"bbbbb\" );\n+\n+  b5.set(0);\n+  string s2 = b5.to_string<char, char_traits<char> >('c', 'd');\n+  VERIFY( s2 == \"ccccd\" );\n+\n+  string s3 = b5.to_string<char, char_traits<char> >('d');\n+  VERIFY( s3 == \"dddd1\" );\n+\n+  b5.set(2);\n+  string s4 = b5.to_string<char>('e', 'f');\n+  VERIFY( s4 == \"eefef\" );\n+\n+  string s5 = b5.to_string<char>('f');\n+  VERIFY( s5 == \"ff1f1\" );\n+\n+  b5.set(4);\n+  string s6 = b5.to_string('g', 'h');\n+  VERIFY( s6 == \"hghgh\" );\n+\n+  string s7 = b5.to_string('h');\n+  VERIFY( s7 == \"1h1h1\" );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}