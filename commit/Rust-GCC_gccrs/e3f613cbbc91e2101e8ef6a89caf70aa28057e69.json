{"sha": "e3f613cbbc91e2101e8ef6a89caf70aa28057e69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNmNjEzY2JiYzkxZTIxMDFlOGVmNmE4OWNhZjcwYWEyODA1N2U2OQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-04-29T11:37:55Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-04-29T11:37:55Z"}, "message": "dominance.c (free_dominance_info): Add overload with function parameter.\n\n2014-04-29  Richard Biener  <rguenther@suse.de>\n\n\t* dominance.c (free_dominance_info): Add overload with\n\tfunction parameter.\n\t(dom_info_state): Likewise.\n\t(dom_info_available_p): Likewise.\n\t* basic-block.h (free_dominance_info, dom_info_state,\n\tdom_info_available_p): Declare overloads.\n\t* passes.c (execute_function_todo): Verify that verifiers\n\tdon't change dominator info state.  Drop dominator info\n\tfor IPA pass invocations.\n\t* cgraph.c (release_function_body): Restore asserts that\n\tdominator information is released.\n\nFrom-SVN: r209892", "tree": {"sha": "223dccd8832873ad291ed8fecbf1eae8a75f55c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/223dccd8832873ad291ed8fecbf1eae8a75f55c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3f613cbbc91e2101e8ef6a89caf70aa28057e69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3f613cbbc91e2101e8ef6a89caf70aa28057e69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3f613cbbc91e2101e8ef6a89caf70aa28057e69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3f613cbbc91e2101e8ef6a89caf70aa28057e69/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "36f291f7656bfdb4103fa3dfb3e60fbbca5b1169", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36f291f7656bfdb4103fa3dfb3e60fbbca5b1169", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36f291f7656bfdb4103fa3dfb3e60fbbca5b1169"}], "stats": {"total": 123, "additions": 85, "deletions": 38}, "files": [{"sha": "3ff2ff2bb829d48291a03558acc814ac1c2174a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f613cbbc91e2101e8ef6a89caf70aa28057e69/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f613cbbc91e2101e8ef6a89caf70aa28057e69/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3f613cbbc91e2101e8ef6a89caf70aa28057e69", "patch": "@@ -1,3 +1,17 @@\n+2014-04-29  Richard Biener  <rguenther@suse.de>\n+\n+\t* dominance.c (free_dominance_info): Add overload with\n+\tfunction parameter.\n+\t(dom_info_state): Likewise.\n+\t(dom_info_available_p): Likewise.\n+\t* basic-block.h (free_dominance_info, dom_info_state,\n+\tdom_info_available_p): Declare overloads.\n+\t* passes.c (execute_function_todo): Verify that verifiers\n+\tdon't change dominator info state.  Drop dominator info\n+\tfor IPA pass invocations.\n+\t* cgraph.c (release_function_body): Restore asserts that\n+\tdominator information is released.\n+\n 2014-04-29  Patrick Palka  <patrick@parcs.ath.cx>\n \n \t* doc/invoke.texi: Fix typo."}, {"sha": "0bf6e8771456eaa14493a5b81ef6e982a10de624", "filename": "gcc/basic-block.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f613cbbc91e2101e8ef6a89caf70aa28057e69/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f613cbbc91e2101e8ef6a89caf70aa28057e69/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=e3f613cbbc91e2101e8ef6a89caf70aa28057e69", "patch": "@@ -826,10 +826,13 @@ enum cdi_direction\n   CDI_POST_DOMINATORS = 2\n };\n \n+extern enum dom_state dom_info_state (function *, enum cdi_direction);\n extern enum dom_state dom_info_state (enum cdi_direction);\n extern void set_dom_info_availability (enum cdi_direction, enum dom_state);\n+extern bool dom_info_available_p (function *, enum cdi_direction);\n extern bool dom_info_available_p (enum cdi_direction);\n extern void calculate_dominance_info (enum cdi_direction);\n+extern void free_dominance_info (function *, enum cdi_direction);\n extern void free_dominance_info (enum cdi_direction);\n extern basic_block nearest_common_dominator (enum cdi_direction,\n \t\t\t\t\t     basic_block, basic_block);"}, {"sha": "5b773e30036084c6c1be8e4ba5572a40050c6b6f", "filename": "gcc/cgraph.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f613cbbc91e2101e8ef6a89caf70aa28057e69/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f613cbbc91e2101e8ef6a89caf70aa28057e69/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=e3f613cbbc91e2101e8ef6a89caf70aa28057e69", "patch": "@@ -1696,8 +1696,8 @@ release_function_body (tree decl)\n \t}\n       if (cfun->cfg)\n \t{\n-\t  free_dominance_info (CDI_DOMINATORS);\n-\t  free_dominance_info (CDI_POST_DOMINATORS);\n+\t  gcc_assert (!dom_info_available_p (CDI_DOMINATORS));\n+\t  gcc_assert (!dom_info_available_p (CDI_POST_DOMINATORS));\n \t  clear_edges ();\n \t  cfun->cfg = NULL;\n \t}"}, {"sha": "7adec4f7376dda2514683fcff5da7056dd7247a5", "filename": "gcc/dominance.c", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f613cbbc91e2101e8ef6a89caf70aa28057e69/gcc%2Fdominance.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f613cbbc91e2101e8ef6a89caf70aa28057e69/gcc%2Fdominance.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdominance.c?ref=e3f613cbbc91e2101e8ef6a89caf70aa28057e69", "patch": "@@ -681,24 +681,30 @@ calculate_dominance_info (enum cdi_direction dir)\n \n /* Free dominance information for direction DIR.  */\n void\n-free_dominance_info (enum cdi_direction dir)\n+free_dominance_info (function *fn, enum cdi_direction dir)\n {\n   basic_block bb;\n   unsigned int dir_index = dom_convert_dir_to_idx (dir);\n \n-  if (!dom_info_available_p (dir))\n+  if (!dom_info_available_p (fn, dir))\n     return;\n \n-  FOR_ALL_BB_FN (bb, cfun)\n+  FOR_ALL_BB_FN (bb, fn)\n     {\n       et_free_tree_force (bb->dom[dir_index]);\n       bb->dom[dir_index] = NULL;\n     }\n   et_free_pools ();\n \n-  n_bbs_in_dom_tree[dir_index] = 0;\n+  fn->cfg->x_n_bbs_in_dom_tree[dir_index] = 0;\n+\n+  fn->cfg->x_dom_computed[dir_index] = DOM_NONE;\n+}\n \n-  dom_computed[dir_index] = DOM_NONE;\n+void\n+free_dominance_info (enum cdi_direction dir)\n+{\n+  free_dominance_info (cfun, dir);\n }\n \n /* Return the immediate dominator of basic block BB.  */\n@@ -1461,11 +1467,19 @@ next_dom_son (enum cdi_direction dir, basic_block bb)\n /* Return dominance availability for dominance info DIR.  */\n \n enum dom_state\n-dom_info_state (enum cdi_direction dir)\n+dom_info_state (function *fn, enum cdi_direction dir)\n {\n+  if (!fn->cfg)\n+    return DOM_NONE;\n+\n   unsigned int dir_index = dom_convert_dir_to_idx (dir);\n+  return fn->cfg->x_dom_computed[dir_index];\n+}\n \n-  return dom_computed[dir_index];\n+enum dom_state\n+dom_info_state (enum cdi_direction dir)\n+{\n+  return dom_info_state (cfun, dir);\n }\n \n /* Set the dominance availability for dominance info DIR to NEW_STATE.  */\n@@ -1481,11 +1495,15 @@ set_dom_info_availability (enum cdi_direction dir, enum dom_state new_state)\n /* Returns true if dominance information for direction DIR is available.  */\n \n bool\n-dom_info_available_p (enum cdi_direction dir)\n+dom_info_available_p (function *fn, enum cdi_direction dir)\n {\n-  unsigned int dir_index = dom_convert_dir_to_idx (dir);\n+  return dom_info_state (fn, dir) != DOM_NONE;\n+}\n \n-  return dom_computed[dir_index] != DOM_NONE;\n+bool\n+dom_info_available_p (enum cdi_direction dir)\n+{\n+  return dom_info_available_p (cfun, dir);\n }\n \n DEBUG_FUNCTION void"}, {"sha": "7559a3ba3a157cded1d1db1531c809fc91026e21", "filename": "gcc/passes.c", "status": "modified", "additions": 38, "deletions": 26, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f613cbbc91e2101e8ef6a89caf70aa28057e69/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f613cbbc91e2101e8ef6a89caf70aa28057e69/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=e3f613cbbc91e2101e8ef6a89caf70aa28057e69", "patch": "@@ -1761,41 +1761,53 @@ execute_function_todo (function *fn, void *data)\n     rebuild_cgraph_edges ();\n \n   /* If we've seen errors do not bother running any verifiers.  */\n-  if (seen_error ())\n+  if (!seen_error ())\n     {\n-      pop_cfun ();\n-      return;\n-    }\n-\n #if defined ENABLE_CHECKING\n-  if (flags & TODO_verify_ssa)\n-    {\n-      verify_gimple_in_cfg (cfun);\n-      verify_ssa (true);\n-    }\n-  else if (flags & TODO_verify_stmts)\n-    verify_gimple_in_cfg (cfun);\n-  if (flags & TODO_verify_flow)\n-    verify_flow_info ();\n-  if (flags & TODO_verify_il)\n-    {\n-      if (current_loops\n-\t  && loops_state_satisfies_p (LOOP_CLOSED_SSA))\n+      dom_state pre_verify_state = dom_info_state (fn, CDI_DOMINATORS);\n+      dom_state pre_verify_pstate = dom_info_state (fn, CDI_POST_DOMINATORS);\n+\n+      if (flags & TODO_verify_ssa)\n \t{\n-\t  if (!(flags & (TODO_verify_stmts|TODO_verify_ssa)))\n-\t    verify_gimple_in_cfg (cfun);\n-\t  if (!(flags & TODO_verify_ssa))\n-\t    verify_ssa (true);\n-\t  verify_loop_closed_ssa (false);\n+\t  verify_gimple_in_cfg (cfun);\n+\t  verify_ssa (true);\n \t}\n-    }\n-  if (flags & TODO_verify_rtl_sharing)\n-    verify_rtl_sharing ();\n+      else if (flags & TODO_verify_stmts)\n+\tverify_gimple_in_cfg (cfun);\n+      if (flags & TODO_verify_flow)\n+\tverify_flow_info ();\n+      if (flags & TODO_verify_il)\n+\t{\n+\t  if (current_loops\n+\t      && loops_state_satisfies_p (LOOP_CLOSED_SSA))\n+\t    {\n+\t      if (!(flags & (TODO_verify_stmts|TODO_verify_ssa)))\n+\t\tverify_gimple_in_cfg (cfun);\n+\t      if (!(flags & TODO_verify_ssa))\n+\t\tverify_ssa (true);\n+\t      verify_loop_closed_ssa (false);\n+\t    }\n+\t}\n+      if (flags & TODO_verify_rtl_sharing)\n+\tverify_rtl_sharing ();\n+\n+      /* Make sure verifiers don't change dominator state.  */\n+      gcc_assert (dom_info_state (fn, CDI_DOMINATORS) == pre_verify_state);\n+      gcc_assert (dom_info_state (fn, CDI_POST_DOMINATORS) == pre_verify_pstate);\n #endif\n+    }\n \n   fn->last_verified = flags & TODO_verify_all;\n \n   pop_cfun ();\n+\n+  /* For IPA passes make sure to release dominator info, it can be\n+     computed by non-verifying TODOs.  */\n+  if (!cfun)\n+    {\n+      free_dominance_info (fn, CDI_DOMINATORS);\n+      free_dominance_info (fn, CDI_POST_DOMINATORS);\n+    }\n }\n \n /* Perform all TODO actions.  */"}]}