{"sha": "3f446c27195400aea98ff9c37ed2651ab54f7c03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y0NDZjMjcxOTU0MDBhZWE5OGZmOWMzN2VkMjY1MWFiNTRmN2MwMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-11-13T09:00:53Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-11-13T09:00:53Z"}, "message": "Fix vectorizable_conversion costs\n\nThis patch makes two tweaks to vectorizable_conversion.  The first\nis to use \"modifier\" to distinguish between promotion, demotion,\nand neither promotion nor demotion, rather than using a code for\nsome cases and \"modifier\" for others.  The second is to take ncopies\ninto account for the promotion and demotion costs; previously we gave\nmultiple copies the same cost as a single copy.\n\nLater patches test this, but it seemed worth splitting out.\n\n2019-11-13  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vect-stmts.c (vect_model_promotion_demotion_cost): Take the\n\tnumber of ncopies as an additional argument.\n\t(vectorizable_conversion): Update call accordingly.  Use \"modifier\"\n\tto check whether a conversion is between vectors with the same\n\tnumbers of units.\n\nFrom-SVN: r278121", "tree": {"sha": "61d44263b006185a9308fc350ad54d532a645f03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61d44263b006185a9308fc350ad54d532a645f03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f446c27195400aea98ff9c37ed2651ab54f7c03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f446c27195400aea98ff9c37ed2651ab54f7c03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f446c27195400aea98ff9c37ed2651ab54f7c03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f446c27195400aea98ff9c37ed2651ab54f7c03/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "86194087ce338c8d0073d905eb60dca654d6bba3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86194087ce338c8d0073d905eb60dca654d6bba3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86194087ce338c8d0073d905eb60dca654d6bba3"}], "stats": {"total": 49, "additions": 34, "deletions": 15}, "files": [{"sha": "cb34395694785b2a24dca5456e701b85e6eb6e3b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f446c27195400aea98ff9c37ed2651ab54f7c03/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f446c27195400aea98ff9c37ed2651ab54f7c03/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f446c27195400aea98ff9c37ed2651ab54f7c03", "patch": "@@ -1,3 +1,11 @@\n+2019-11-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-stmts.c (vect_model_promotion_demotion_cost): Take the\n+\tnumber of ncopies as an additional argument.\n+\t(vectorizable_conversion): Update call accordingly.  Use \"modifier\"\n+\tto check whether a conversion is between vectors with the same\n+\tnumbers of units.\n+\n 2019-11-13  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64-sve-builtins-functions.h"}, {"sha": "53f4189d939fa276e0cd3ec0f2d3ad012be051fe", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f446c27195400aea98ff9c37ed2651ab54f7c03/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f446c27195400aea98ff9c37ed2651ab54f7c03/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=3f446c27195400aea98ff9c37ed2651ab54f7c03", "patch": "@@ -917,26 +917,27 @@ vect_model_simple_cost (stmt_vec_info stmt_info, int ncopies,\n }\n \n \n-/* Model cost for type demotion and promotion operations.  PWR is normally\n-   zero for single-step promotions and demotions.  It will be one if \n-   two-step promotion/demotion is required, and so on.  Each additional\n+/* Model cost for type demotion and promotion operations.  PWR is\n+   normally zero for single-step promotions and demotions.  It will be\n+   one if two-step promotion/demotion is required, and so on.  NCOPIES\n+   is the number of vector results (and thus number of instructions)\n+   for the narrowest end of the operation chain.  Each additional\n    step doubles the number of instructions required.  */\n \n static void\n vect_model_promotion_demotion_cost (stmt_vec_info stmt_info,\n-\t\t\t\t    enum vect_def_type *dt, int pwr,\n+\t\t\t\t    enum vect_def_type *dt,\n+\t\t\t\t    unsigned int ncopies, int pwr,\n \t\t\t\t    stmt_vector_for_cost *cost_vec)\n {\n-  int i, tmp;\n+  int i;\n   int inside_cost = 0, prologue_cost = 0;\n \n   for (i = 0; i < pwr + 1; i++)\n     {\n-      tmp = (STMT_VINFO_TYPE (stmt_info) == type_promotion_vec_info_type) ?\n-\t(i + 1) : i;\n-      inside_cost += record_stmt_cost (cost_vec, vect_pow2 (tmp),\n-\t\t\t\t       vec_promote_demote, stmt_info, 0,\n-\t\t\t\t       vect_body);\n+      inside_cost += record_stmt_cost (cost_vec, ncopies, vec_promote_demote,\n+\t\t\t\t       stmt_info, 0, vect_body);\n+      ncopies *= 2;\n     }\n \n   /* FORNOW: Assuming maximum 2 args per stmts.  */\n@@ -4961,7 +4962,7 @@ vectorizable_conversion (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n   if (!vec_stmt)\t\t/* transformation not required.  */\n     {\n       DUMP_VECT_SCOPE (\"vectorizable_conversion\");\n-      if (code == FIX_TRUNC_EXPR || code == FLOAT_EXPR)\n+      if (modifier == NONE)\n         {\n \t  STMT_VINFO_TYPE (stmt_info) = type_conversion_vec_info_type;\n \t  vect_model_simple_cost (stmt_info, ncopies, dt, ndts, slp_node,\n@@ -4970,14 +4971,24 @@ vectorizable_conversion (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n       else if (modifier == NARROW)\n \t{\n \t  STMT_VINFO_TYPE (stmt_info) = type_demotion_vec_info_type;\n-\t  vect_model_promotion_demotion_cost (stmt_info, dt, multi_step_cvt,\n-\t\t\t\t\t      cost_vec);\n+\t  /* The final packing step produces one vector result per copy.  */\n+\t  unsigned int nvectors\n+\t    = (slp_node ? SLP_TREE_NUMBER_OF_VEC_STMTS (slp_node) : ncopies);\n+\t  vect_model_promotion_demotion_cost (stmt_info, dt, nvectors,\n+\t\t\t\t\t      multi_step_cvt, cost_vec);\n \t}\n       else\n \t{\n \t  STMT_VINFO_TYPE (stmt_info) = type_promotion_vec_info_type;\n-\t  vect_model_promotion_demotion_cost (stmt_info, dt, multi_step_cvt,\n-\t\t\t\t\t      cost_vec);\n+\t  /* The initial unpacking step produces two vector results\n+\t     per copy.  MULTI_STEP_CVT is 0 for a single conversion,\n+\t     so >> MULTI_STEP_CVT divides by 2^(number of steps - 1).  */\n+\t  unsigned int nvectors\n+\t    = (slp_node\n+\t       ? SLP_TREE_NUMBER_OF_VEC_STMTS (slp_node) >> multi_step_cvt\n+\t       : ncopies * 2);\n+\t  vect_model_promotion_demotion_cost (stmt_info, dt, nvectors,\n+\t\t\t\t\t      multi_step_cvt, cost_vec);\n \t}\n       interm_types.release ();\n       return true;"}]}