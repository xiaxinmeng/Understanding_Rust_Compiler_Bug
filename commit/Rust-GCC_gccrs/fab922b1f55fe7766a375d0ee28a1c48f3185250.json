{"sha": "fab922b1f55fe7766a375d0ee28a1c48f3185250", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFiOTIyYjFmNTVmZTc3NjZhMzc1ZDBlZTI4YTFjNDhmMzE4NTI1MA==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2009-07-07T02:10:19Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2009-07-07T02:10:19Z"}, "message": "c-lex.c: Replace %H by an explicit location.\n\n2009-07-07  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\t* c-lex.c: Replace %H by an explicit location. Update all calls.\n\t* c-common.c: Likewise.\n\t* c-decl.c: Likewise.\n\t* c-typeck.c: Likewise.\n\t* fold-const.c: Likewise.\n\t* gimplify.c: Likewise.\n\t* stmt.c: Likewise.\n\t* tree-cfg.c: Likewise.\n\t* tree-ssa-loop-niter.c: Likewise.\n\t* tree-vrp.c: Likewise.\n\t* value-prof.c: Likewise.\njava/\n\t* jcf-parse.c: Replace %H by an explicit location. Update all calls.\nobjc/\n\t* objc-act.c: Replace %H by an explicit location. Update all calls.\ntestsuite/\n\t* gcc.dg/plugin/selfassign.c: Replace %H by an explicit\n\tlocation. Update all calls.\n\t* g++.dg/plugin/selfassign.c: Likewise.\n\nFrom-SVN: r149310", "tree": {"sha": "75f96edfe80b6d74b595292cb3f885c6a8ade502", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75f96edfe80b6d74b595292cb3f885c6a8ade502"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fab922b1f55fe7766a375d0ee28a1c48f3185250", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fab922b1f55fe7766a375d0ee28a1c48f3185250", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fab922b1f55fe7766a375d0ee28a1c48f3185250", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fab922b1f55fe7766a375d0ee28a1c48f3185250/comments", "author": null, "committer": null, "parents": [{"sha": "56131eb5a0492df3fd6421db599ed6f3b42545c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56131eb5a0492df3fd6421db599ed6f3b42545c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56131eb5a0492df3fd6421db599ed6f3b42545c6"}], "stats": {"total": 147, "additions": 81, "deletions": 66}, "files": [{"sha": "9acef1e1c1b5f473c514315dcbf310a63289f783", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fab922b1f55fe7766a375d0ee28a1c48f3185250", "patch": "@@ -1,3 +1,17 @@\n+2009-07-07  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* c-lex.c: Replace %H by an explicit location. Update all calls.\n+\t* c-common.c: Likewise.\n+\t* c-decl.c: Likewise.\n+\t* c-typeck.c: Likewise.\n+\t* fold-const.c: Likewise.\n+\t* gimplify.c: Likewise.\n+\t* stmt.c: Likewise.\n+\t* tree-cfg.c: Likewise.\n+\t* tree-ssa-loop-niter.c: Likewise.\n+\t* tree-vrp.c: Likewise.\n+\t* value-prof.c: Likewise.\n+\n 2009-07-06  Diego Novillo  <dnovillo@google.com>\n \n \t* tree-dfa.c (dump_variable): Write DECL_INITIAL for VAR"}, {"sha": "772d9687bf8b5792ffca45c89e70d25866ce739f", "filename": "gcc/c-common.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=fab922b1f55fe7766a375d0ee28a1c48f3185250", "patch": "@@ -5480,8 +5480,8 @@ c_do_switch_warnings (splay_tree cases, location_t switch_location,\n \n   default_node = splay_tree_lookup (cases, (splay_tree_key) NULL);\n   if (!default_node)\n-    warning (OPT_Wswitch_default, \"%Hswitch missing default case\",\n-\t     &switch_location);\n+    warning_at (switch_location, OPT_Wswitch_default,\n+\t\t\"switch missing default case\");\n \n   /* From here on, we only care about about enumerated types.  */\n   if (!type || TREE_CODE (type) != ENUMERAL_TYPE)\n@@ -8258,13 +8258,12 @@ c_warn_unused_result (gimple_seq seq)\n \t      location_t loc = gimple_location (g);\n \n \t      if (fdecl)\n-\t\twarning (0, \"%Hignoring return value of %qD, \"\n-\t\t\t \"declared with attribute warn_unused_result\",\n-\t\t\t &loc, fdecl);\n+\t\twarning_at (loc, 0, \"ignoring return value of %qD, \"\n+\t\t\t    \"declared with attribute warn_unused_result\",\n+\t\t\t    fdecl);\n \t      else\n-\t\twarning (0, \"%Hignoring return value of function \"\n-\t\t\t \"declared with attribute warn_unused_result\",\n-\t\t\t &loc);\n+\t\twarning_at (loc, 0, \"ignoring return value of function \"\n+\t\t\t    \"declared with attribute warn_unused_result\");\n \t    }\n \t  break;\n "}, {"sha": "fdceb20a831b0fe8e296c31a103ac6e0bd86ff3a", "filename": "gcc/c-decl.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=fab922b1f55fe7766a375d0ee28a1c48f3185250", "patch": "@@ -2912,17 +2912,17 @@ undeclared_variable (location_t loc, tree id)\n \n   if (current_function_decl == 0)\n     {\n-      error (\"%H%qE undeclared here (not in a function)\", &loc, id);\n+      error_at (loc, \"%qE undeclared here (not in a function)\", id);\n       scope = current_scope;\n     }\n   else\n     {\n-      error (\"%H%qE undeclared (first use in this function)\", &loc, id);\n+      error_at (loc, \"%qE undeclared (first use in this function)\", id);\n \n       if (!already)\n \t{\n-\t  error (\"%H(Each undeclared identifier is reported only once\", &loc);\n-\t  error (\"%Hfor each function it appears in.)\", &loc);\n+\t  error_at (loc, \"(Each undeclared identifier is reported only once\");\n+\t  error_at (loc, \"for each function it appears in.)\");\n \t  already = true;\n \t}\n \n@@ -3356,8 +3356,8 @@ void\n pending_xref_error (void)\n {\n   if (pending_invalid_xref != 0)\n-    error (\"%H%qE defined as wrong kind of tag\",\n-\t   &pending_invalid_xref_location, pending_invalid_xref);\n+    error_at (pending_invalid_xref_location, \"%qE defined as wrong kind of tag\",\n+\t      pending_invalid_xref);\n   pending_invalid_xref = 0;\n }\n "}, {"sha": "0b6fcc00b3184f85ee7a1eba729545ac54f90c2c", "filename": "gcc/c-lex.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=fab922b1f55fe7766a375d0ee28a1c48f3185250", "patch": "@@ -264,8 +264,8 @@ cb_def_pragma (cpp_reader *pfile, source_location loc)\n \t    name = cpp_token_as_text (pfile, s);\n \t}\n \n-      warning (OPT_Wunknown_pragmas, \"%Hignoring #pragma %s %s\",\n-\t       &fe_loc, space, name);\n+      warning_at (fe_loc, OPT_Wunknown_pragmas, \"ignoring #pragma %s %s\",\n+\t\t  space, name);\n     }\n }\n \n@@ -379,7 +379,7 @@ c_lex_with_flags (tree *value, location_t *loc, unsigned char *cpp_flags,\n \n \t    default:\n \t      /* ... or not.  */\n-\t      error (\"%Hstray %<@%> in program\", &atloc);\n+\t      error_at (atloc, \"stray %<@%> in program\");\n \t      *loc = newloc;\n \t      goto retry_after_at;\n \t    }"}, {"sha": "e86e0951a5db176d516d2985fe689ac3b8b518cc", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=fab922b1f55fe7766a375d0ee28a1c48f3185250", "patch": "@@ -8357,9 +8357,8 @@ c_finish_if_stmt (location_t if_locus, tree cond, tree then_block,\n     found:\n \n       if (COND_EXPR_ELSE (inner_if))\n-\t warning (OPT_Wparentheses,\n-\t\t  \"%Hsuggest explicit braces to avoid ambiguous %<else%>\",\n-\t\t  &if_locus);\n+\t warning_at (if_locus, OPT_Wparentheses,\n+\t\t     \"suggest explicit braces to avoid ambiguous %<else%>\");\n     }\n \n   stmt = build3 (COND_EXPR, void_type_node, cond, then_block, else_block);"}, {"sha": "670fa45e4975056d89d09832d1b9378663d9ae42", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=fab922b1f55fe7766a375d0ee28a1c48f3185250", "patch": "@@ -988,7 +988,7 @@ fold_undefer_overflow_warnings (bool issue, const_gimple stmt, int code)\n     locus = input_location;\n   else\n     locus = gimple_location (stmt);\n-  warning (OPT_Wstrict_overflow, \"%H%s\", &locus, warnmsg);\n+  warning_at (locus, OPT_Wstrict_overflow, \"%s\", warnmsg);\n }\n \n /* Stop deferring overflow warnings, ignoring any deferred"}, {"sha": "c5fb18569baa4b47ccd4847be9e65cf9b3642ab8", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=fab922b1f55fe7766a375d0ee28a1c48f3185250", "patch": "@@ -5377,7 +5377,7 @@ omp_notice_variable (struct gimplify_omp_ctx *ctx, tree decl, bool in_code)\n \tcase OMP_CLAUSE_DEFAULT_NONE:\n \t  error (\"%qE not specified in enclosing parallel\",\n \t\t DECL_NAME (decl));\n-\t  error (\"%Henclosing parallel\", &ctx->location);\n+\t  error_at (ctx->location, \"enclosing parallel\");\n \t  /* FALLTHRU */\n \tcase OMP_CLAUSE_DEFAULT_SHARED:\n \t  flags |= GOVD_SHARED;"}, {"sha": "17c6ebf8d6dcf21a287bc85776114a7c336e1960", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=fab922b1f55fe7766a375d0ee28a1c48f3185250", "patch": "@@ -1,3 +1,7 @@\n+2009-07-07  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* jcf-parse.c: Replace %H by an explicit location. Update all calls.\n+\n 2009-06-29  Andrew Haley  <aph@redhat.com>\n \n \tPR java/40590"}, {"sha": "f7b2cb20896a7efb6aa2e6a7f4c84812096eeef8", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=fab922b1f55fe7766a375d0ee28a1c48f3185250", "patch": "@@ -1509,7 +1509,7 @@ duplicate_class_warning (const char *filename)\n   location_t warn_loc;\n   linemap_add (line_table, LC_RENAME, 0, filename, 0);\n   warn_loc = linemap_line_start (line_table, 0, 1);\n-  warning (0, \"%Hduplicate class will only be compiled once\", &warn_loc);\n+  warning_at (warn_loc, 0, \"duplicate class will only be compiled once\");\n }\n \n static void"}, {"sha": "605715c157c0f4ee2aff7bea443e359878bb22aa", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=fab922b1f55fe7766a375d0ee28a1c48f3185250", "patch": "@@ -1,3 +1,8 @@\n+2009-07-07  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* objc-act.c: Replace %H by an explicit location. Update all\n+\tcalls.\n+\t\n 2009-06-22  Steven Bosscher  <steven@gcc.gnu.org>\n \n \tPR objc/28050"}, {"sha": "e951b2a9ca35cabcb0ed75eccbe4c2125676ea50", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=fab922b1f55fe7766a375d0ee28a1c48f3185250", "patch": "@@ -2582,13 +2582,13 @@ build_selector_translation_table (void)\n           }\n         if (!found)\n \t  {\n-\t    location_t *loc;\n+\t    location_t loc;\n \t    if (flag_next_runtime && TREE_PURPOSE (chain))\n-\t      loc = &DECL_SOURCE_LOCATION (TREE_PURPOSE (chain));\n+\t      loc = DECL_SOURCE_LOCATION (TREE_PURPOSE (chain));\n \t    else\n-\t      loc = &input_location;\n-\t    warning (0, \"%Hcreating selector for nonexistent method %qE\",\n-\t\t     loc, TREE_VALUE (chain));\n+\t      loc = input_location;\n+\t    warning_at (loc, 0, \"creating selector for nonexistent method %qE\",\n+\t\t\tTREE_VALUE (chain));\n \t  }\n       }\n \n@@ -3877,8 +3877,8 @@ objc_begin_catch_clause (tree decl)\n \t    {\n \t      warning (0, \"exception of type %<%T%> will be caught\",\n \t\t       TREE_TYPE (type));\n-\t      warning (0, \"%H   by earlier handler for %<%T%>\",\n-\t\t       EXPR_LOCUS (stmt), TREE_TYPE (t ? t : objc_object_type));\n+\t      warning_at  (EXPR_LOCATION (stmt), 0, \"   by earlier handler for %<%T%>\",\n+\t\t\t   TREE_TYPE (t ? t : objc_object_type));\n \t      break;\n \t    }\n \t}"}, {"sha": "d544080a3c18026d49593344f3fd6736ec40311a", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=fab922b1f55fe7766a375d0ee28a1c48f3185250", "patch": "@@ -1468,7 +1468,7 @@ warn_if_unused_value (const_tree exp, location_t locus)\n \treturn 0;\n \n     warn:\n-      warning (OPT_Wunused_value, \"%Hvalue computed is not used\", &locus);\n+      warning_at (locus, OPT_Wunused_value, \"value computed is not used\");\n       return 1;\n     }\n }"}, {"sha": "0b889ae3e11d2399afc506d235b8f5ed318c3b26", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fab922b1f55fe7766a375d0ee28a1c48f3185250", "patch": "@@ -1,3 +1,9 @@\n+2009-07-07  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* gcc.dg/plugin/selfassign.c: Replace %H by an explicit\n+\tlocation. Update all calls.\n+\t* g++.dg/plugin/selfassign.c: Likewise.\n+\t\n 2009-07-06  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/rtti/dyncast[34].C: New."}, {"sha": "2be48156d6d4e07043ec7ee1b77783ae09f7026b", "filename": "gcc/testsuite/g++.dg/plugin/selfassign.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fselfassign.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fselfassign.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fselfassign.c?ref=fab922b1f55fe7766a375d0ee28a1c48f3185250", "patch": "@@ -186,9 +186,9 @@ compare_and_warn (gimple stmt, tree lhs, tree rhs)\n          specifying LHS in the message.  */\n       lhs = get_non_ssa_expr (lhs);\n       if (lhs)\n-        warning (0, G_(\"%H%qE is assigned to itself\"), &location, lhs);\n+        warning_at (location, 0, G_(\"%qE is assigned to itself\"), lhs);\n       else\n-        warning (0, G_(\"%Hself-assignment detected\"), &location);\n+        warning_at (location, 0, G_(\"self-assignment detected\"));\n     }\n }\n "}, {"sha": "13f6be9c2c140fb97cda19ef8499758592657c3c", "filename": "gcc/testsuite/gcc.dg/plugin/selfassign.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fselfassign.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fselfassign.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fselfassign.c?ref=fab922b1f55fe7766a375d0ee28a1c48f3185250", "patch": "@@ -187,9 +187,9 @@ compare_and_warn (gimple stmt, tree lhs, tree rhs)\n          specifying LHS in the message.  */\n       lhs = get_non_ssa_expr (lhs);\n       if (lhs)\n-        warning (0, G_(\"%H%qE is assigned to itself\"), &location, lhs);\n+        warning_at (location, 0, G_(\"%qE is assigned to itself\"), lhs);\n       else\n-        warning (0, G_(\"%Hself-assignment detected\"), &location);\n+        warning_at (location, 0, G_(\"self-assignment detected\"));\n     }\n }\n "}, {"sha": "34c646191dd76af7521ad17e75fac3dc33c0535c", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=fab922b1f55fe7766a375d0ee28a1c48f3185250", "patch": "@@ -1643,7 +1643,7 @@ remove_useless_stmts_warn_notreached (gimple_seq stmts)\n           location_t loc = gimple_location (stmt);\n           if (LOCATION_LINE (loc) > 0)\n \t    {\n-              warning (OPT_Wunreachable_code, \"%Hwill never be executed\", &loc);\n+              warning_at (loc, OPT_Wunreachable_code, \"will never be executed\");\n               return true;\n             }\n         }\n@@ -2310,7 +2310,7 @@ remove_bb (basic_block bb)\n      loop above, so the last statement we process is the first statement\n      in the block.  */\n   if (loc > BUILTINS_LOCATION && LOCATION_LINE (loc) > 0)\n-    warning (OPT_Wunreachable_code, \"%Hwill never be executed\", &loc);\n+    warning_at (loc, OPT_Wunreachable_code, \"will never be executed\");\n \n   remove_phi_nodes_and_edges_for_unreachable_block (bb);\n   bb->il.gimple = NULL;\n@@ -7260,7 +7260,7 @@ execute_warn_function_return (void)\n \t}\n       if (location == UNKNOWN_LOCATION)\n \tlocation = cfun->function_end_locus;\n-      warning (0, \"%H%<noreturn%> function does return\", &location);\n+      warning_at (location, 0, \"%<noreturn%> function does return\");\n     }\n \n   /* If we see \"return;\" in some basic block, then we do reach the end"}, {"sha": "14b44aa7ecb81aef8aa7f2750d25b8275cdd5971", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=fab922b1f55fe7766a375d0ee28a1c48f3185250", "patch": "@@ -1879,10 +1879,8 @@ number_of_iterations_exit (struct loop *loop, edge exit,\n \t  ? N_(\"assuming that the loop counter does not overflow\")\n \t  : N_(\"cannot optimize loop, the loop counter may overflow\");\n \n-      if (LOCATION_LINE (loc) > 0)\n-\twarning (OPT_Wunsafe_loop_optimizations, \"%H%s\", &loc, gettext (wording));\n-      else\n-\twarning (OPT_Wunsafe_loop_optimizations, \"%s\", gettext (wording));\n+      warning_at ((LOCATION_LINE (loc) > 0) ? loc : input_location,\n+\t\t  OPT_Wunsafe_loop_optimizations, \"%s\", gettext (wording));\n     }\n \n   return flag_unsafe_loop_optimizations;"}, {"sha": "117b1992816005f5e72ef9de4de84dda546c3520", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=fab922b1f55fe7766a375d0ee28a1c48f3185250", "patch": "@@ -5717,7 +5717,7 @@ vrp_evaluate_conditional (enum tree_code code, tree op0, tree op1, gimple stmt)\n \t    location = input_location;\n \t  else\n \t    location = gimple_location (stmt);\n-\t  warning (OPT_Wstrict_overflow, \"%H%s\", &location, warnmsg);\n+\t  warning_at (location, OPT_Wstrict_overflow, \"%s\", warnmsg);\n \t}\n     }\n \n@@ -5731,7 +5731,6 @@ vrp_evaluate_conditional (enum tree_code code, tree op0, tree op1, gimple stmt)\n \t the natural range of OP0's type, then the predicate will\n \t always fold regardless of the value of OP0.  If -Wtype-limits\n \t was specified, emit a warning.  */\n-      const char *warnmsg = NULL;\n       tree type = TREE_TYPE (op0);\n       value_range_t *vr0 = get_value_range (op0);\n \n@@ -5740,16 +5739,6 @@ vrp_evaluate_conditional (enum tree_code code, tree op0, tree op1, gimple stmt)\n \t  && vrp_val_is_min (vr0->min)\n \t  && vrp_val_is_max (vr0->max)\n \t  && is_gimple_min_invariant (op1))\n-\t{\n-\t  if (integer_zerop (ret))\n-\t    warnmsg = G_(\"comparison always false due to limited range of \"\n-\t\t         \"data type\");\n-\t  else\n-\t    warnmsg = G_(\"comparison always true due to limited range of \"\n-\t\t\t \"data type\");\n-\t}\n-\n-      if (warnmsg)\n \t{\n \t  location_t location;\n \n@@ -5758,7 +5747,10 @@ vrp_evaluate_conditional (enum tree_code code, tree op0, tree op1, gimple stmt)\n \t  else\n \t    location = gimple_location (stmt);\n \n-\t  warning (OPT_Wtype_limits, \"%H%s\", &location, warnmsg);\n+\t  warning_at (location, OPT_Wtype_limits, \n+\t\t      integer_zerop (ret)\n+\t\t      ? \"comparison always false due to limited range of data type\"\n+\t\t      : \"comparison always true due to limited range of data type\");\n \t}\n     }\n \n@@ -6596,10 +6588,9 @@ simplify_div_or_mod_using_ranges (gimple stmt)\n \t    location = input_location;\n \t  else\n \t    location = gimple_location (stmt);\n-\t  warning (OPT_Wstrict_overflow,\n-\t\t   (\"%Hassuming signed overflow does not occur when \"\n-\t\t    \"simplifying / or %% to >> or &\"),\n-\t\t   &location);\n+\t  warning_at (location, OPT_Wstrict_overflow,\n+\t\t      \"assuming signed overflow does not occur when \"\n+\t\t      \"simplifying %</%> or %<%%%> to %<>>%> or %<&%>\");\n \t}\n     }\n \n@@ -6679,10 +6670,9 @@ simplify_abs_using_ranges (gimple stmt)\n \t\tlocation = input_location;\n \t      else\n \t\tlocation = gimple_location (stmt);\n-\t      warning (OPT_Wstrict_overflow,\n-\t\t       (\"%Hassuming signed overflow does not occur when \"\n-\t\t\t\"simplifying abs (X) to X or -X\"),\n-\t\t       &location);\n+\t      warning_at (location, OPT_Wstrict_overflow,\n+\t\t\t  \"assuming signed overflow does not occur when \"\n+\t\t\t  \"simplifying %<abs (X)%> to %<X%> or %<-X%>\");\n \t    }\n \n \t  gimple_assign_set_rhs1 (stmt, op);"}, {"sha": "e7a8e0f07479073c56f7e522194ac94ba84012a8", "filename": "gcc/value-prof.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab922b1f55fe7766a375d0ee28a1c48f3185250/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=fab922b1f55fe7766a375d0ee28a1c48f3185250", "patch": "@@ -474,9 +474,9 @@ check_counter (gimple stmt, const char * name,\n \t}\n       else\n \t{\n-\t  error (\"%HCorrupted value profile: %s profiler overall count (%d) \"\n-                 \"does not match BB count (%d)\", &locus, name, (int)*all,\n-                 (int)bb_count);\n+\t  error_at (locus, \"Corrupted value profile: %s \"\n+\t\t    \"profiler overall count (%d) does not match BB count (%d)\",\n+\t\t    name, (int)*all, (int)bb_count);\n \t  return true;\n \t}\n     }"}]}