{"sha": "360057959ab327eda7e5608a634b3f394a429de2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzYwMDU3OTU5YWIzMjdlZGE3ZTU2MDhhNjM0YjNmMzk0YTQyOWRlMg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-02-17T18:11:30Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-02-17T18:11:30Z"}, "message": "where_10.f90: New test case.\n\n\n\t* gfortran.fortran-torture/execute/where_10.f90: New test case.\n\t* gfortran.fortran-torture/execute/where_11.f90: Likewise.\n\t* gfortran.fortran-torture/execute/where_12.f90: Likewise.\n\t* gfortran.fortran-torture/execute/where_13.f90: Likewise.\n\t* gfortran.fortran-torture/execute/where_14.f90: Likewise.\n\t* gfortran.fortran-torture/execute/where_15.f90: Likewise.\n\t* gfortran.fortran-torture/execute/where_16.f90: Likewise.\n\nFrom-SVN: r111204", "tree": {"sha": "75304f4506c06e344b85fe11d3825093a80e82ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75304f4506c06e344b85fe11d3825093a80e82ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/360057959ab327eda7e5608a634b3f394a429de2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/360057959ab327eda7e5608a634b3f394a429de2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/360057959ab327eda7e5608a634b3f394a429de2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/360057959ab327eda7e5608a634b3f394a429de2/comments", "author": null, "committer": null, "parents": [{"sha": "a3543e3aad424c50c0d17cd5be0c1207f92b30dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3543e3aad424c50c0d17cd5be0c1207f92b30dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3543e3aad424c50c0d17cd5be0c1207f92b30dd"}], "stats": {"total": 144, "additions": 144, "deletions": 0}, "files": [{"sha": "78d593d75a23561a4887e316c5887d414d12b4fb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/360057959ab327eda7e5608a634b3f394a429de2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/360057959ab327eda7e5608a634b3f394a429de2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=360057959ab327eda7e5608a634b3f394a429de2", "patch": "@@ -1,3 +1,13 @@\n+2006-02-16  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gfortran.fortran-torture/execute/where_10.f90: New test case.\n+\t* gfortran.fortran-torture/execute/where_11.f90: Likewise.\n+\t* gfortran.fortran-torture/execute/where_12.f90: Likewise.\n+\t* gfortran.fortran-torture/execute/where_13.f90: Likewise.\n+\t* gfortran.fortran-torture/execute/where_14.f90: Likewise.\n+\t* gfortran.fortran-torture/execute/where_15.f90: Likewise.\n+\t* gfortran.fortran-torture/execute/where_16.f90: Likewise.\n+\n 2006-02-16  Jeff Law  <law@redhat.com>\n \n \t* gcc.dg/tree-ssa/vrp24.c: Update expected output."}, {"sha": "c5a85cec8b789b4c7432246e51060e1956aea2cc", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/where_10.f90", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/360057959ab327eda7e5608a634b3f394a429de2/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fwhere_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/360057959ab327eda7e5608a634b3f394a429de2/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fwhere_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fwhere_10.f90?ref=360057959ab327eda7e5608a634b3f394a429de2", "patch": "@@ -0,0 +1,23 @@\n+! Check whether conditional ELSEWHEREs work\n+! (with final unconditional ELSEWHERE)\n+program where_10\n+   integer :: a(5)\n+   integer :: b(5)\n+\n+   a = (/1, 2, 3, 4, 5/)\n+   b = (/0, 0, 0, 0, 0/)\n+   where (a .eq. 1)\n+     b = 3\n+   elsewhere (a .eq. 2)\n+     b = 1\n+   elsewhere (a .eq. 3)\n+     b = 4\n+   elsewhere (a .eq. 4)\n+     b = 1\n+   elsewhere\n+     b = 5\n+   endwhere\n+   if (any (b .ne. (/3, 1, 4, 1, 5/))) &\n+     call abort\n+end program\n+"}, {"sha": "f2eb69f2ebe43900287571af699473022a49530c", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/where_11.f90", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/360057959ab327eda7e5608a634b3f394a429de2/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fwhere_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/360057959ab327eda7e5608a634b3f394a429de2/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fwhere_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fwhere_11.f90?ref=360057959ab327eda7e5608a634b3f394a429de2", "patch": "@@ -0,0 +1,23 @@\n+! Check whether conditional ELSEWHEREs work\n+! (without unconditional ELSEWHERE)\n+program where_11\n+   integer :: a(5)\n+   integer :: b(5)\n+\n+   a = (/1, 2, 3, 4, 5/)\n+   b = (/0, 0, 0, 0, 0/)\n+   where (a .eq. 1)\n+     b = 3\n+   elsewhere (a .eq. 2)\n+     b = 1\n+   elsewhere (a .eq. 3)\n+     b = 4\n+   elsewhere (a .eq. 4)\n+     b = 1\n+   elsewhere (a .eq. 5)\n+     b = 5\n+   endwhere\n+   if (any (b .ne. (/3, 1, 4, 1, 5/))) &\n+     call abort\n+end program\n+"}, {"sha": "c95dc979f6d829c4ee8e14316e6cf9db25924d89", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/where_12.f90", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/360057959ab327eda7e5608a634b3f394a429de2/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fwhere_12.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/360057959ab327eda7e5608a634b3f394a429de2/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fwhere_12.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fwhere_12.f90?ref=360057959ab327eda7e5608a634b3f394a429de2", "patch": "@@ -0,0 +1,9 @@\n+! Check empty WHEREs work\n+program where_12\n+   integer :: a(5)\n+\n+   a = (/1, 2, 3, 4, 5/)\n+   where (a .eq. 1)\n+   endwhere\n+end program\n+"}, {"sha": "ce8d5822ef4f94cfb3d0da356e2e267775152a97", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/where_13.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/360057959ab327eda7e5608a634b3f394a429de2/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fwhere_13.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/360057959ab327eda7e5608a634b3f394a429de2/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fwhere_13.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fwhere_13.f90?ref=360057959ab327eda7e5608a634b3f394a429de2", "patch": "@@ -0,0 +1,10 @@\n+! Check empty WHERE and empty ELSEWHERE works\n+program where_13\n+   integer :: a(5)\n+\n+   a = (/1, 2, 3, 4, 5/)\n+   where (a .eq. 2)\n+   elsewhere\n+   endwhere\n+end program\n+"}, {"sha": "640bdf574a68335fa306ee2dff34b36d16de9dc6", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/where_14.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/360057959ab327eda7e5608a634b3f394a429de2/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fwhere_14.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/360057959ab327eda7e5608a634b3f394a429de2/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fwhere_14.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fwhere_14.f90?ref=360057959ab327eda7e5608a634b3f394a429de2", "patch": "@@ -0,0 +1,15 @@\n+! Check whether an empty ELSEWHERE works\n+program where_14\n+   integer :: a(5)\n+   integer :: b(5)\n+\n+   a = (/1, 2, 3, 4, 5/)\n+   b = (/0, 0, 0, 0, 0/)\n+   where (a .eq. 1)\n+     b = 3\n+   elsewhere\n+   endwhere\n+   if (any (b .ne. (/3, 0, 0, 0, 0/))) &\n+     call abort\n+end program\n+"}, {"sha": "ffbebb728aae2ab4cce19eb555f5cb3e01915ca5", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/where_15.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/360057959ab327eda7e5608a634b3f394a429de2/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fwhere_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/360057959ab327eda7e5608a634b3f394a429de2/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fwhere_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fwhere_15.f90?ref=360057959ab327eda7e5608a634b3f394a429de2", "patch": "@@ -0,0 +1,15 @@\n+! Check whether an empty WHERE works\n+program where_15\n+   integer :: a(5)\n+   integer :: b(5)\n+\n+   a = (/1, 2, 3, 4, 5/)\n+   b = (/0, 0, 0, 0, 0/)\n+   where (a .eq. 1)\n+   elsewhere\n+     b = 2\n+   endwhere\n+   if (any (b .ne. (/0, 2, 2, 2, 2/))) &\n+     call abort\n+end program\n+"}, {"sha": "19f012a11ad0bd247ca67782f33c73e0376b9565", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/where_16.f90", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/360057959ab327eda7e5608a634b3f394a429de2/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fwhere_16.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/360057959ab327eda7e5608a634b3f394a429de2/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fwhere_16.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fwhere_16.f90?ref=360057959ab327eda7e5608a634b3f394a429de2", "patch": "@@ -0,0 +1,39 @@\n+! Check whether nested WHEREs work\n+program where_16\n+   integer :: a(9)\n+   integer :: b(9)\n+   integer :: c(9)\n+\n+   a = (/0, 0, 0, 1, 1, 1, 2, 2, 2/)\n+   b = (/0, 1, 2, 0, 1, 2, 0, 1, 2/)\n+   c = (/0, 0, 0, 0, 0, 0, 0, 0, 0/)\n+\n+   where (a .eq. 0)\n+     where (b .eq. 0)\n+       c = 1\n+     else where (b .eq. 1)\n+       c = 2\n+     else where\n+       c = 3\n+     endwhere\n+   elsewhere (a .eq. 1)\n+     where (b .eq. 0)\n+       c = 4\n+     else where (b .eq. 1)\n+       c = 5\n+     else where\n+       c = 6\n+     endwhere\n+   elsewhere\n+     where (b .eq. 0)\n+       c = 7\n+     else where (b .eq. 1)\n+       c = 8\n+     else where\n+       c = 9\n+     endwhere\n+   endwhere\n+   if (any (c .ne. (/1, 2, 3, 4, 5, 6, 7, 8, 9/))) &\n+     call abort\n+end program\n+"}]}