{"sha": "3777b2c07a446104c84f39542c83d8e85490ead4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc3N2IyYzA3YTQ0NjEwNGM4NGYzOTU0MmM4M2Q4ZTg1NDkwZWFkNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-03-07T14:15:16Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-03-07T14:15:16Z"}, "message": "[multiple changes]\n\n2012-03-07  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* gnat_ugn.texi (Inline Assembler): Fix swapping of Input and\n\tOutput operands throughout.\n\n2012-03-07  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch12.adb (Earlier): When two nodes come from the same\n\tgeneric instantiation, compare their locations. Otherwise always\n\tuse the top level locations of the nodes.\n\n2012-03-07  Thomas Quinot  <quinot@adacore.com>\n\n\t* einfo.ads, sem_prag.adb: Minor reformatting.\n\nFrom-SVN: r185044", "tree": {"sha": "b5b016e7358d1436e71da0b588afa4e22f20f563", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5b016e7358d1436e71da0b588afa4e22f20f563"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3777b2c07a446104c84f39542c83d8e85490ead4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3777b2c07a446104c84f39542c83d8e85490ead4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3777b2c07a446104c84f39542c83d8e85490ead4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3777b2c07a446104c84f39542c83d8e85490ead4/comments", "author": null, "committer": null, "parents": [{"sha": "1274e3a474562bed5e6d1861b8520d9985150716", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1274e3a474562bed5e6d1861b8520d9985150716", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1274e3a474562bed5e6d1861b8520d9985150716"}], "stats": {"total": 63, "additions": 43, "deletions": 20}, "files": [{"sha": "228c44280c90aaf0b72b15b42d24a754f15996ee", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3777b2c07a446104c84f39542c83d8e85490ead4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3777b2c07a446104c84f39542c83d8e85490ead4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3777b2c07a446104c84f39542c83d8e85490ead4", "patch": "@@ -1,3 +1,18 @@\n+2012-03-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat_ugn.texi (Inline Assembler): Fix swapping of Input and\n+\tOutput operands throughout.\n+\n+2012-03-07  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch12.adb (Earlier): When two nodes come from the same\n+\tgeneric instantiation, compare their locations. Otherwise always\n+\tuse the top level locations of the nodes.\n+\n+2012-03-07  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* einfo.ads, sem_prag.adb: Minor reformatting.\n+\n 2012-03-05  Jason Merrill  <jason@redhat.com>\n \n \t* gcc-interface/Make-lang.in (doc/gnat_ugn.texi): Build xgnatugn"}, {"sha": "648bf832e4d8c3a48b3ef987fb81bf8a73a86056", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3777b2c07a446104c84f39542c83d8e85490ead4/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3777b2c07a446104c84f39542c83d8e85490ead4/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=3777b2c07a446104c84f39542c83d8e85490ead4", "patch": "@@ -2819,7 +2819,7 @@ package Einfo is\n --       interface types. At run-time thunks displace the pointer to the object\n --       (pointer named \"this\" in the C++ terminology) from a secondary\n --       dispatch table to the primary dispatch table associated with a given\n---       tagged type. Set by Expand_Interface Thunk and used by Expand_Call to\n+--       tagged type. Set by Expand_Interface_Thunk and used by Expand_Call to\n --       handle extra actuals associated with accessibility level.\n \n --    Is_Trivial_Subprogram (Flag235)"}, {"sha": "e93320cf9d93a7e76e83bcbc8250bfec8b11ffec", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3777b2c07a446104c84f39542c83d8e85490ead4/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3777b2c07a446104c84f39542c83d8e85490ead4/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=3777b2c07a446104c84f39542c83d8e85490ead4", "patch": "@@ -26107,8 +26107,8 @@ procedure Increment is\n       Result : Unsigned_32;\n    begin\n       Asm (\"incl %0\",\n-           Inputs  => Unsigned_32'Asm_Input (\"a\", Value),\n-           Outputs => Unsigned_32'Asm_Output (\"=a\", Result));\n+           Outputs => Unsigned_32'Asm_Output (\"=a\", Result),\n+           Inputs  => Unsigned_32'Asm_Input (\"a\", Value));\n       return Result;\n    end Incr;\n \n@@ -26134,10 +26134,8 @@ The @code{\"=\"} constraint, indicating an output value, is not present.\n You can have multiple input variables, in the same way that you can have more\n than one output variable.\n \n-The parameter count (%0, %1) etc, now starts at the first input\n-statement, and continues with the output statements.\n-When both parameters use the same variable, the\n-compiler will treat them as the same %n operand, which is the case here.\n+The parameter count (%0, %1) etc, still starts at the first output statement,\n+and continues with the input statements.\n \n Just as the @code{Outputs} parameter causes the register to be stored into the\n target variable after execution of the assembler statements, so does the\n@@ -26191,8 +26189,8 @@ procedure Increment_2 is\n       Result : Unsigned_32;\n    begin\n       Asm (\"incl %0\",\n-           Inputs  => Unsigned_32'Asm_Input (\"a\", Value),\n-           Outputs => Unsigned_32'Asm_Output (\"=a\", Result));\n+           Outputs => Unsigned_32'Asm_Output (\"=a\", Result),\n+           Inputs  => Unsigned_32'Asm_Input (\"a\", Value));\n       return Result;\n    end Incr;\n    pragma Inline (Increment);\n@@ -26274,8 +26272,8 @@ assembly code; for example:\n @group\n Asm (\"movl %0, %%ebx\" & LF & HT &\n      \"movl %%ebx, %1\",\n-     Inputs  => Unsigned_32'Asm_Input  (\"g\", Var_In),\n-     Outputs => Unsigned_32'Asm_Output (\"=g\", Var_Out));\n+     Outputs => Unsigned_32'Asm_Output (\"=g\", Var_Out),\n+     Inputs  => Unsigned_32'Asm_Input  (\"g\", Var_In));\n @end group\n @end smallexample\n @noindent\n@@ -26289,8 +26287,8 @@ to identify the registers that will be used by your assembly code:\n @group\n Asm (\"movl %0, %%ebx\" & LF & HT &\n      \"movl %%ebx, %1\",\n-     Inputs  => Unsigned_32'Asm_Input  (\"g\", Var_In),\n      Outputs => Unsigned_32'Asm_Output (\"=g\", Var_Out),\n+     Inputs  => Unsigned_32'Asm_Input  (\"g\", Var_In),\n      Clobber => \"ebx\");\n @end group\n @end smallexample\n@@ -26324,8 +26322,8 @@ the @code{Volatile} parameter to @code{True}; for example:\n @group\n Asm (\"movl %0, %%ebx\" & LF & HT &\n      \"movl %%ebx, %1\",\n-     Inputs   => Unsigned_32'Asm_Input  (\"g\", Var_In),\n      Outputs  => Unsigned_32'Asm_Output (\"=g\", Var_Out),\n+     Inputs   => Unsigned_32'Asm_Input  (\"g\", Var_In),\n      Clobber  => \"ebx\",\n      Volatile => True);\n @end group"}, {"sha": "d637827a9ab4b8bce4a55bac41ed6016a03150a8", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3777b2c07a446104c84f39542c83d8e85490ead4/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3777b2c07a446104c84f39542c83d8e85490ead4/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=3777b2c07a446104c84f39542c83d8e85490ead4", "patch": "@@ -7159,12 +7159,22 @@ package body Sem_Ch12 is\n       end if;\n \n       --  At this point either both nodes came from source or we approximated\n-      --  their source locations through neighbouring source statements. There\n-      --  is no need to look at the top level locations of P1 and P2 because\n-      --  both nodes are in the same list and whether the enclosing context is\n-      --  instantiated is irrelevant.\n+      --  their source locations through neighbouring source statements.\n \n-      return Sloc (P1) < Sloc (P2);\n+      --  When two nodes come from the same instance, they have identical top\n+      --  level locations. To determine proper relation within the tree, check\n+      --  their locations within the template.\n+\n+      if Top_Level_Location (Sloc (P1)) = Top_Level_Location (Sloc (P2)) then\n+         return Sloc (P1) < Sloc (P2);\n+\n+      --  The two nodes either come from unrelated instances or do not come\n+      --  from instantiated code at all.\n+\n+      else\n+         return Top_Level_Location (Sloc (P1))\n+              < Top_Level_Location (Sloc (P2));\n+      end if;\n    end Earlier;\n \n    ----------------------"}, {"sha": "39d406e8828d64c06072326f270a9c4811b604b2", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3777b2c07a446104c84f39542c83d8e85490ead4/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3777b2c07a446104c84f39542c83d8e85490ead4/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=3777b2c07a446104c84f39542c83d8e85490ead4", "patch": "@@ -11965,8 +11965,8 @@ package body Sem_Prag is\n \n                if not Is_Entity_Name (Get_Pragma_Arg (Arg1))\n                  or else not\n-                  Ekind_In (Entity (Get_Pragma_Arg (Arg1)), E_Variable,\n-                                                            E_Constant)\n+                   Ekind_In (Entity (Get_Pragma_Arg (Arg1)), E_Variable,\n+                                                             E_Constant)\n                then\n                   Error_Pragma_Arg (\"pragma% only applies to objects\", Arg1);\n                end if;"}]}