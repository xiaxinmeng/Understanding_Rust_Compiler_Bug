{"sha": "d7c23cdcce38607fed5d4124b1b7aafb455cbc4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdjMjNjZGNjZTM4NjA3ZmVkNWQ0MTI0YjFiN2FhZmI0NTVjYmM0Yg==", "commit": {"author": {"name": "Douglas B Rupp", "email": "rupp@gnat.com", "date": "2001-12-10T03:07:23Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-12-10T03:07:23Z"}, "message": "t-vms (EXTRA_PARTS): Append $(VMS_EXTRA_PARTS) Add rules for building [vp]crt0.o\n\n\t* config/alpha/t-vms (EXTRA_PARTS): Append $(VMS_EXTRA_PARTS)\n\tAdd rules for building [vp]crt0.o\n\t* config/alpha/vms.h (START_FILE_SPEC): Define.\n\t* config/alpha/x-vms (VMS_EXTRA_PARTS): Define\n\t* config/alpha/vms-crt0.c, config/alpha/vms-psxcrt0.c: New files.\n\t* doc/invoke.texi: Document special Alpha/VMS options.\n\nFrom-SVN: r47831", "tree": {"sha": "9dc053504e94731d6c6076fd9ed717d1d57a3273", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9dc053504e94731d6c6076fd9ed717d1d57a3273"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7c23cdcce38607fed5d4124b1b7aafb455cbc4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7c23cdcce38607fed5d4124b1b7aafb455cbc4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7c23cdcce38607fed5d4124b1b7aafb455cbc4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7c23cdcce38607fed5d4124b1b7aafb455cbc4b/comments", "author": null, "committer": null, "parents": [{"sha": "6d08665a307cc7290a7ba62e5abdd642e9ec8a60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d08665a307cc7290a7ba62e5abdd642e9ec8a60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d08665a307cc7290a7ba62e5abdd642e9ec8a60"}], "stats": {"total": 218, "additions": 216, "deletions": 2}, "files": [{"sha": "d832d93f2a51ee0b992c5019a30fa01bf0af578c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7c23cdcce38607fed5d4124b1b7aafb455cbc4b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7c23cdcce38607fed5d4124b1b7aafb455cbc4b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7c23cdcce38607fed5d4124b1b7aafb455cbc4b", "patch": "@@ -1,3 +1,12 @@\n+Sun Dec  9 21:57:24 2001  Douglas B. Rupp  <rupp@gnat.com>\n+\n+\t* config/alpha/t-vms (EXTRA_PARTS): Append $(VMS_EXTRA_PARTS)\n+\tAdd rules for building [vp]crt0.o\n+\t* config/alpha/vms.h (START_FILE_SPEC): Define.\n+\t* config/alpha/x-vms (VMS_EXTRA_PARTS): Define\n+\t* config/alpha/vms-crt0.c, config/alpha/vms-psxcrt0.c: New files.\n+\t* doc/invoke.texi: Document special Alpha/VMS options.\n+\n Sun Dec  9 20:25:17 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* hwint.h (HOST_BITS_PER_LONGLONG): Deal with __int64 type."}, {"sha": "359f6f4668a508c8387b5c09fb922bf2f4dc042e", "filename": "gcc/config/alpha/t-vms", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7c23cdcce38607fed5d4124b1b7aafb455cbc4b/gcc%2Fconfig%2Falpha%2Ft-vms", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7c23cdcce38607fed5d4124b1b7aafb455cbc4b/gcc%2Fconfig%2Falpha%2Ft-vms", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Ft-vms?ref=d7c23cdcce38607fed5d4124b1b7aafb455cbc4b", "patch": "@@ -1,7 +1,19 @@\n LIB2FUNCS_EXTRA = $(srcdir)/config/alpha/vms_tramp.asm\n-EXTRA_PARTS = vms-dwarf2.o\n \n-# This object must be linked in in order to make the executable debuggable.\n+# VMS_EXTRA_PARTS is defined in x-vms and represent object files that\n+# are only needed for VMS targets, but can only be compiled on a VMS host\n+# (because they need DEC C).\n+EXTRA_PARTS = vms-dwarf2.o $(VMS_EXTRA_PARTS)\n+\n+# This object must be linked with in order to make the executable debuggable.\n # vms-ld handles it automatically when passed -g.\n vms-dwarf2.o : $(srcdir)/config/alpha/vms-dwarf2.asm\n \tgcc -c -x assembler $<\n+\n+# Assemble startup files.\n+vcrt0.o: $(CRT0_S) $(GCC_PASSES)\n+\tdecc -c /names=as_is $(srcdir)/config/alpha/vms-crt0.c -o vcrt0.o\n+\n+pcrt0.o: $(CRT0_S) $(GCC_PASSES)\n+\tdecc -c /names=as_is $(srcdir)/config/alpha/vms-psxcrt0.c -o pcrt0.o\n+"}, {"sha": "e75bc02ce74c5ff33fc14ff2ad9cbc57a7ad7b75", "filename": "gcc/config/alpha/vms-crt0.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7c23cdcce38607fed5d4124b1b7aafb455cbc4b/gcc%2Fconfig%2Falpha%2Fvms-crt0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7c23cdcce38607fed5d4124b1b7aafb455cbc4b/gcc%2Fconfig%2Falpha%2Fvms-crt0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms-crt0.c?ref=d7c23cdcce38607fed5d4124b1b7aafb455cbc4b", "patch": "@@ -0,0 +1,71 @@\n+/* VMS crt0 returning VMS style condition codes .\n+   Copyright (C) 2001 Free Software Foundation, Inc.\n+   Contributed by Douglas B. Rupp (rupp@gnat.com).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#if !defined(__DECC)\n+You Lose! This file can only be compiled with DEC C.\n+#else\n+\n+/* This file can only be compiled with DEC C, due the the call to\n+   lib$establish. */\n+\n+#include <stdlib.h>\n+#include <string.h>\n+#include <ssdef.h>\n+\n+extern void decc$main ();\n+\n+extern int main ();\n+\n+static int\n+handler (sigargs, mechargs)\n+     void *sigargs;\n+     void *mechargs;\n+{\n+  return SS$_RESIGNAL;\n+}\n+\n+int\n+__main (arg1, arg2, arg3, image_file_desc, arg5, arg6)\n+     void *arg1, *arg2, *arg3;\n+     void *image_file_desc;\n+     void *arg5, *arg6;\n+{\n+  int argc;\n+  char **argv;\n+  char **envp;\n+\n+  lib$establish (handler);\n+\n+  decc$main(arg1, arg2, arg3, image_file_desc, arg5, arg6,\n+\t    &argc, &argv, &envp);\n+\n+  return main (argc, argv, envp);\n+}\n+#endif"}, {"sha": "cdf5ced843a07265bd820e41c6aedd7bd5295f85", "filename": "gcc/config/alpha/vms-psxcrt0.c", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7c23cdcce38607fed5d4124b1b7aafb455cbc4b/gcc%2Fconfig%2Falpha%2Fvms-psxcrt0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7c23cdcce38607fed5d4124b1b7aafb455cbc4b/gcc%2Fconfig%2Falpha%2Fvms-psxcrt0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms-psxcrt0.c?ref=d7c23cdcce38607fed5d4124b1b7aafb455cbc4b", "patch": "@@ -0,0 +1,99 @@\n+/* VMS crt0 returning Unix style condition codes .\n+   Copyright (C) 2001 Free Software Foundation, Inc.\n+   Contributed by Douglas B. Rupp (rupp@gnat.com).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#if !defined(__DECC)\n+You Lose! This file can only be compiled with DEC C.\n+#else\n+\n+/* This file can only be compiled with DEC C, due the the call to\n+   lib$establish. */\n+\n+#include <stdlib.h>\n+#include <string.h>\n+#include <ssdef.h>\n+#include <stsdef.h>\n+#include <errnodef.h>\n+\n+extern void decc$main ();\n+extern int main ();\n+\n+static int\n+handler (sigargs, mechargs)\n+     void *sigargs;\n+     void *mechargs;\n+{\n+  return SS$_RESIGNAL;\n+}\n+\n+int\n+__main (arg1, arg2, arg3, image_file_desc, arg5, arg6)\n+     void *arg1, *arg2, *arg3;\n+     void *image_file_desc;\n+     void *arg5, *arg6;\n+{\n+  int argc;\n+  char **argv;\n+  char **envp;\n+  int status;\n+\n+  lib$establish (handler);\n+  decc$main (arg1, arg2, arg3, image_file_desc, arg5, arg6,\n+\t     &argc, &argv, &envp);\n+\n+  status = main (argc, argv, envp);\n+\n+  /* Map into a range of 0 - 255.  */\n+  status = status & 255;\n+\n+  if (status > 0)\n+    {\n+      int save_status = status;\n+\n+      status = C$_EXIT1 + ((status - 1) << STS$V_MSG_NO);\n+\n+      /* An exit failure status requires a \"severe\" error\n+\t All status values are defined in errno with a successful\n+\t (1) severity but can be changed to an error (2) severity by adding 1.\n+\t In addition for compatibility with UNIX exit() routines we inhibit\n+\t a run-time error message from being generated on exit(1).  */\n+\n+      if (save_status == 1)\n+\t{\n+\t  status++;\n+\t  status |= STS$M_INHIB_MSG;\n+\t}\n+    }\n+\n+  if (status == 0)\n+    status = SS$_NORMAL;\n+\n+  return status;\n+}\n+#endif"}, {"sha": "df7140dce9438f43f3103752d45be0ef4366e04b", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7c23cdcce38607fed5d4124b1b7aafb455cbc4b/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7c23cdcce38607fed5d4124b1b7aafb455cbc4b/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=d7c23cdcce38607fed5d4124b1b7aafb455cbc4b", "patch": "@@ -450,6 +450,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n %{g2:-g2 vms-dwarf2.o%s} %{g3:-g3 vms-dwarf2.o%s} %{shared} %{v} %{map}\"\n \n #undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \"%{!shared:%{mvms-return-codes:vcrt0.o%s} \\\n+%{!mvms-return-codes:pcrt0.o%s}}\"\n \n /* Define the names of the division and modulus functions.  */\n #define DIVSI3_LIBCALL \"OTS$DIV_I\""}, {"sha": "79238a1fa6388a5d51369a3fa3f6d276f19cd545", "filename": "gcc/config/alpha/x-vms", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7c23cdcce38607fed5d4124b1b7aafb455cbc4b/gcc%2Fconfig%2Falpha%2Fx-vms", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7c23cdcce38607fed5d4124b1b7aafb455cbc4b/gcc%2Fconfig%2Falpha%2Fx-vms", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fx-vms?ref=d7c23cdcce38607fed5d4124b1b7aafb455cbc4b", "patch": "@@ -9,3 +9,7 @@ decc.exe : vms-cc.o\n \t$(CC) -o $@ vms-cc.o ../libiberty/libiberty.a\n \n EXTRA_PROGRAMS=ld.exe decc.exe\n+\n+# These extra parts can only be compiled on a VMS host and are only needed\n+# on a VMS target.\n+VMS_EXTRA_PARTS=vcrt0.o pcrt0.o"}, {"sha": "675a62f9b6144c6e0acc9bc218cc8b30a1fe09ef", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7c23cdcce38607fed5d4124b1b7aafb455cbc4b/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7c23cdcce38607fed5d4124b1b7aafb455cbc4b/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d7c23cdcce38607fed5d4124b1b7aafb455cbc4b", "patch": "@@ -520,6 +520,10 @@ in the following sections.\n -mbwx  -mno-bwx  -mcix  -mno-cix  -mmax  -mno-max @gol\n -mmemory-latency=@var{time}}\n \n+@emph{DEC Alpha/VMS Options}\n+@gccoptlist{\n+-mvms-return-codes}\n+\n @emph{Clipper Options}\n @gccoptlist{\n -mc300  -mc400}\n@@ -5070,6 +5074,7 @@ that macro, which enables you to change the defaults.\n * HPPA Options::\n * Intel 960 Options::\n * DEC Alpha Options::\n+* DEC Alpha/VMS Options::\n * Clipper Options::\n * H8/300 Options::\n * SH Options::\n@@ -8562,6 +8567,18 @@ Note that L3 is only valid for EV5.\n @end table\n @end table\n \n+@node DEC Alpha/VMS Options\n+@subsection DEC Alpha/VMS Options\n+\n+These @samp{-m} options are defined for the DEC Alpha/VMS implementations:\n+\n+@table @gcctabopt\n+@item -mvms-return-codes\n+@opindex mvms-return-codes\n+Return VMS condition codes from main. The default is to return POSIX\n+style condition (e.g. error) codes.\n+@end table\n+\n @node Clipper Options\n @subsection Clipper Options\n "}]}