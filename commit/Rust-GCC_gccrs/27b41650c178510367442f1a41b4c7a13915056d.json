{"sha": "27b41650c178510367442f1a41b4c7a13915056d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdiNDE2NTBjMTc4NTEwMzY3NDQyZjFhNDFiNGM3YTEzOTE1MDU2ZA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2002-03-02T03:52:17Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2002-03-02T03:52:17Z"}, "message": "Makefile.in (CRTSTUFF_CFLAGS): Add -fno-zero-initialized-in-bss.\n\n\t* Makefile.in (CRTSTUFF_CFLAGS): Add -fno-zero-initialized-in-bss.\n\t* doc/invoke.texi (-fno-zero-initialized-in-bss): Document.\n\t* flags.h (flag_zero_initialized_in_bss): Declare.\n\t* toplev.c (flag_zero_initialized_in_bss): New flag.\n\t(lang_independent_options): Add flag_zero_initialized_in_bss.\n\t* tree.c (initializer_zerop): New function.\n\t* tree.h (initializer_zerop): Declare.\n\t* varasm.c (assemble_variable): If we can emit bss, put zero\n\tinitializers in the bss section.\n\nFrom-SVN: r50218", "tree": {"sha": "75fe6685e297fa2a98efab337e910c5a2c995d5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75fe6685e297fa2a98efab337e910c5a2c995d5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27b41650c178510367442f1a41b4c7a13915056d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27b41650c178510367442f1a41b4c7a13915056d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27b41650c178510367442f1a41b4c7a13915056d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27b41650c178510367442f1a41b4c7a13915056d/comments", "author": null, "committer": null, "parents": [{"sha": "ca734b39f3a1dff4206545b43068998b2bf7821b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca734b39f3a1dff4206545b43068998b2bf7821b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca734b39f3a1dff4206545b43068998b2bf7821b"}], "stats": {"total": 91, "additions": 89, "deletions": 2}, "files": [{"sha": "bd9ce0f9dc280632297b87558ad6ac07cacd6eec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b41650c178510367442f1a41b4c7a13915056d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b41650c178510367442f1a41b4c7a13915056d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27b41650c178510367442f1a41b4c7a13915056d", "patch": "@@ -1,3 +1,15 @@\n+2002-03-01  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (CRTSTUFF_CFLAGS): Add -fno-zero-initialized-in-bss.\n+\t* doc/invoke.texi (-fno-zero-initialized-in-bss): Document.\n+\t* flags.h (flag_zero_initialized_in_bss): Declare.\n+\t* toplev.c (flag_zero_initialized_in_bss): New flag.\n+\t(lang_independent_options): Add flag_zero_initialized_in_bss.\n+\t* tree.c (initializer_zerop): New function.\n+\t* tree.h (initializer_zerop): Declare.\n+\t* varasm.c (assemble_variable): If we can emit bss, put zero\n+\tinitializers in the bss section.\n+\n 2002-03-02  Alan Modra  <amodra@bigpond.net.au>\n \n \t* config/rs6000/rs6000.h (ASM_WEAKEN_DECL): AIX assembler doesn't"}, {"sha": "5d1802f174495bec352027b95ec12513b69fba1b", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b41650c178510367442f1a41b4c7a13915056d/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b41650c178510367442f1a41b4c7a13915056d/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=27b41650c178510367442f1a41b4c7a13915056d", "patch": "@@ -372,7 +372,8 @@ TARGET_LIBGCC2_CFLAGS =\n \n # Options to use when compiling crtbegin/end.\n CRTSTUFF_CFLAGS = -O2 $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -g0 \\\n-  -finhibit-size-directive -fno-inline-functions -fno-exceptions\n+  -finhibit-size-directive -fno-inline-functions -fno-exceptions \\\n+  -fno-zero-initialized-in-bss\n \n # Additional sources to handle exceptions; overridden on ia64.\n LIB2ADDEH = $(srcdir)/unwind-dw2.c $(srcdir)/unwind-dw2-fde.c \\"}, {"sha": "10b69c846d02612e3b8a403ab724020fe3aac665", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b41650c178510367442f1a41b4c7a13915056d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b41650c178510367442f1a41b4c7a13915056d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=27b41650c178510367442f1a41b4c7a13915056d", "patch": "@@ -273,6 +273,7 @@ in the following sections.\n -fno-function-cse  -fno-guess-branch-probability @gol\n -fno-inline  -fno-math-errno  -fno-peephole  -fno-peephole2 @gol\n -funsafe-math-optimizations -fno-trapping-math @gol\n+-fno-zero-initialized-in-bss @gol\n -fomit-frame-pointer  -foptimize-register-move @gol\n -foptimize-sibling-calls  -fprefetch-loop-arrays @gol\n -freduce-all-givs -fregmove  -frename-registers @gol\n@@ -3407,6 +3408,19 @@ an exact implementation of IEEE or ISO rules/specifications for\n math functions.\n \n The default is @option{-ftrapping-math}.\n+\n+@item -fno-zero-initialized-in-bss\n+@opindex fno-zero-initialized-in-bss\n+If the target supports a BSS section, GCC by default puts variables that\n+are initialized to zero into BSS@.  This can save space in the resulting\n+code.\n+\n+This option turns off this behavior because some programs explicitly\n+rely on variables going to the data section.  E.g., so that the\n+resulting executable can find the beginning of that section and/or make\n+assumptions based on that.\n+\n+The default is @option{-fzero-initialized-in-bss}.\n @end table\n \n The following options control specific optimizations.  The @option{-O2}"}, {"sha": "6de5d9b59574e8fb46832c7b30def13fdec056cd", "filename": "gcc/flags.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b41650c178510367442f1a41b4c7a13915056d/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b41650c178510367442f1a41b4c7a13915056d/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=27b41650c178510367442f1a41b4c7a13915056d", "patch": "@@ -636,4 +636,7 @@ extern int flag_detailed_statistics;\n /* Nonzero means enable synchronous exceptions for non-call instructions.  */\n extern int flag_non_call_exceptions;\n \n+/* Nonzero means put zero initialized data in the bss section.  */\n+extern int flag_zero_initialized_in_bss;\n+\n #endif /* ! GCC_FLAGS_H */"}, {"sha": "74605824da8cea678ba10b1bdc38b5ae4e7bf5a7", "filename": "gcc/toplev.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b41650c178510367442f1a41b4c7a13915056d/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b41650c178510367442f1a41b4c7a13915056d/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=27b41650c178510367442f1a41b4c7a13915056d", "patch": "@@ -803,6 +803,9 @@ int flag_gnu_linker = 0;\n int flag_gnu_linker = 1;\n #endif\n \n+/* Nonzero means put zero initialized data in the bss section.  */\n+int flag_zero_initialized_in_bss = 1;\n+\n /* Enable SSA.  */\n int flag_ssa = 0;\n \n@@ -1135,6 +1138,8 @@ static const lang_independent_options f_options[] =\n    N_(\"Suppress output of instruction numbers and line number notes in debugging dumps\") },\n   {\"instrument-functions\", &flag_instrument_function_entry_exit, 1,\n    N_(\"Instrument function entry/exit with profiling calls\") },\n+  {\"zero-initialized-in-bss\", &flag_zero_initialized_in_bss, 1,\n+   N_(\"Put zero initialized data in the bss section\") },\n   {\"ssa\", &flag_ssa, 1,\n    N_(\"Enable SSA optimizations\") },\n   {\"ssa-ccp\", &flag_ssa_ccp, 1,"}, {"sha": "de65191e672135ca4b91cb8271d3d2426dee68da", "filename": "gcc/tree.c", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b41650c178510367442f1a41b4c7a13915056d/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b41650c178510367442f1a41b4c7a13915056d/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=27b41650c178510367442f1a41b4c7a13915056d", "patch": "@@ -4975,3 +4975,45 @@ make_vector (mode, innertype, unsignedp)\n \n   return t;\n }\n+\n+/* Given an initializer INIT, return TRUE if INIT is zero or some\n+   aggregate of zeros.  Otherwise return FALSE.  */\n+\n+bool\n+initializer_zerop (init)\n+     tree init;\n+{\n+  STRIP_NOPS (init);\n+\n+  switch (TREE_CODE (init))\n+    {\n+    case INTEGER_CST:\n+      return integer_zerop (init);\n+    case REAL_CST:\n+      return real_zerop (init)\n+\t&& ! REAL_VALUE_MINUS_ZERO (TREE_REAL_CST (init));\n+    case COMPLEX_CST:\n+      return integer_zerop (init)\n+\t|| (real_zerop (init)\n+\t    && ! REAL_VALUE_MINUS_ZERO (TREE_REAL_CST (TREE_REALPART (init)))\n+\t    && ! REAL_VALUE_MINUS_ZERO (TREE_REAL_CST (TREE_IMAGPART (init))));\n+    case CONSTRUCTOR:\n+      {\n+\tif (AGGREGATE_TYPE_P (TREE_TYPE (init)))\n+\t{\n+\t  tree aggr_init = TREE_OPERAND (init, 1);\n+\t  \n+\t  while (aggr_init)\n+\t    {\n+\t      if (! initializer_zerop (TREE_VALUE (aggr_init)))\n+\t\treturn false;\n+\t      aggr_init = TREE_CHAIN (aggr_init);\n+\t    }\n+\t  return true;\n+\t}\n+\treturn false;\n+      }\n+    default:\n+      return false;\n+    }\n+}"}, {"sha": "68b96e8258771c40467cbf32a89a357a65dfee8b", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b41650c178510367442f1a41b4c7a13915056d/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b41650c178510367442f1a41b4c7a13915056d/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=27b41650c178510367442f1a41b4c7a13915056d", "patch": "@@ -2495,6 +2495,11 @@ extern int list_length\t\t\tPARAMS ((tree));\n \n extern int fields_length\t\tPARAMS ((tree));\n \n+/* Given an initializer INIT, return TRUE if INIT is zero or some\n+   aggregate of zeros.  Otherwise return FALSE.  */\n+\n+extern bool initializer_zerop\t\tPARAMS ((tree));\n+\n /* integer_zerop (tree x) is nonzero if X is an integer constant of value 0 */\n \n extern int integer_zerop\t\tPARAMS ((tree));"}, {"sha": "e7505a8c39cd93913726cd1f4eea197048eea65b", "filename": "gcc/varasm.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b41650c178510367442f1a41b4c7a13915056d/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b41650c178510367442f1a41b4c7a13915056d/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=27b41650c178510367442f1a41b4c7a13915056d", "patch": "@@ -1608,7 +1608,12 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n \n   /* Handle uninitialized definitions.  */\n \n-  if ((DECL_INITIAL (decl) == 0 || DECL_INITIAL (decl) == error_mark_node)\n+  if ((DECL_INITIAL (decl) == 0 || DECL_INITIAL (decl) == error_mark_node\n+#if defined ASM_EMIT_BSS\n+       || (flag_zero_initialized_in_bss\n+\t   && initializer_zerop (DECL_INITIAL (decl)))\n+#endif\n+       )\n       /* If the target can't output uninitialized but not common global data\n \t in .bss, then we have to use .data.  */\n #if ! defined ASM_EMIT_BSS"}]}