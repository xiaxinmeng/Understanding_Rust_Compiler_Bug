{"sha": "7f5c0f328eced560a204bb8e3eae0d45795dd235", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y1YzBmMzI4ZWNlZDU2MGEyMDRiYjhlM2VhZTBkNDU3OTVkZDIzNQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-07-24T12:33:27Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-07-27T07:16:16Z"}, "message": "Use vec::reserve before vec_safe_grow_cleared is called\n\ngcc/ChangeLog:\n\n\tPR lto/45375\n\t* symbol-summary.h: Call vec_safe_reserve before grow is called\n\tin order to grow to a reasonable size.\n\t* vec.h (vec_safe_reserve): Add missing function for vl_ptr\n\ttype.", "tree": {"sha": "c6f100254eb806a20eb3845e469bd68c4b05bed9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6f100254eb806a20eb3845e469bd68c4b05bed9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f5c0f328eced560a204bb8e3eae0d45795dd235", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl8ef0AACgkQTcGC3A+n\nN4XpwQf/ei46WFv6z39g7/6WeYPeenXRZV1LD+VGPteRAiysqncNQFxqElFeUK9Z\nx7YTYTMMuP6xD535wVVwxkYECOyQeiHpl/LWxV1Yco54tKD78pH2Ymq+h96P2JdE\nTrQtpglCgp4NwCg8SEGDqcrsGj+Gsu0MDLb19V/fZ2JWa8MIYZ7LhzoK2hsR/CZ+\n2oZiFlmXxxcDHUGRRS3MUI4bbFy8SPzapEbLLN9JJBN2jq/AHqEdyFfvdVV2cMxe\ndW8ijQ0Pjbnh81+dvYdrPyiTQIGu96Ndlrfw2HQcqkZOloRHxgVvIyDc0zcKQ5f8\n4kRpms6AwaCAj92lnV5BICTTeG3nxQ==\n=jS3B\n-----END PGP SIGNATURE-----", "payload": "tree c6f100254eb806a20eb3845e469bd68c4b05bed9\nparent 20d0d6527c36005a9664f7ac9eb50f1071d5670c\nauthor Martin Liska <mliska@suse.cz> 1595594007 +0200\ncommitter Martin Liska <mliska@suse.cz> 1595834176 +0200\n\nUse vec::reserve before vec_safe_grow_cleared is called\n\ngcc/ChangeLog:\n\n\tPR lto/45375\n\t* symbol-summary.h: Call vec_safe_reserve before grow is called\n\tin order to grow to a reasonable size.\n\t* vec.h (vec_safe_reserve): Add missing function for vl_ptr\n\ttype.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f5c0f328eced560a204bb8e3eae0d45795dd235", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f5c0f328eced560a204bb8e3eae0d45795dd235", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f5c0f328eced560a204bb8e3eae0d45795dd235/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20d0d6527c36005a9664f7ac9eb50f1071d5670c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20d0d6527c36005a9664f7ac9eb50f1071d5670c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20d0d6527c36005a9664f7ac9eb50f1071d5670c"}], "stats": {"total": 24, "additions": 21, "deletions": 3}, "files": [{"sha": "fa1df5c8015698787c9593d263d1cae1bd53e2ba", "filename": "gcc/symbol-summary.h", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f5c0f328eced560a204bb8e3eae0d45795dd235/gcc%2Fsymbol-summary.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f5c0f328eced560a204bb8e3eae0d45795dd235/gcc%2Fsymbol-summary.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymbol-summary.h?ref=7f5c0f328eced560a204bb8e3eae0d45795dd235", "patch": "@@ -354,8 +354,11 @@ class GTY((user)) fast_function_summary <T *, V>\n       id = this->m_symtab->assign_summary_id (node);\n \n     if ((unsigned int)id >= m_vector->length ())\n-      vec_safe_grow_cleared (m_vector,\n-\t\t\t     this->m_symtab->cgraph_max_summary_id);\n+      {\n+\tint newlen = this->m_symtab->cgraph_max_summary_id;\n+\tvec_safe_reserve (m_vector, newlen - m_vector->length ());\n+\tm_vector->quick_grow_cleared (newlen);\n+      }\n \n     if ((*m_vector)[id] == NULL)\n       (*m_vector)[id] = this->allocate_new ();\n@@ -812,7 +815,11 @@ class GTY((user)) fast_call_summary <T *, V>: public call_summary_base<T>\n       id = this->m_symtab->assign_summary_id (edge);\n \n     if ((unsigned)id >= m_vector->length ())\n-      vec_safe_grow_cleared (m_vector, this->m_symtab->edges_max_summary_id);\n+      {\n+\tint newlen = this->m_symtab->edges_max_summary_id;\n+\tm_vector->reserve (newlen - m_vector->length ());\n+\tm_vector->quick_grow_cleared (newlen);\n+      }\n \n     if ((*m_vector)[id] == NULL)\n       (*m_vector)[id] = this->allocate_new ();"}, {"sha": "3ad99b8369047056509c5ad1d5ec4ee311d06b70", "filename": "gcc/vec.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f5c0f328eced560a204bb8e3eae0d45795dd235/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f5c0f328eced560a204bb8e3eae0d45795dd235/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=7f5c0f328eced560a204bb8e3eae0d45795dd235", "patch": "@@ -753,6 +753,17 @@ vec_safe_grow_cleared (vec<T, va_heap, vl_ptr> *&v,\n   v->safe_grow_cleared (len PASS_MEM_STAT);\n }\n \n+/* If V does not have space for NELEMS elements, call\n+   V->reserve(NELEMS, EXACT).  */\n+\n+template<typename T>\n+inline bool\n+vec_safe_reserve (vec<T, va_heap, vl_ptr> *&v, unsigned nelems, bool exact = false\n+\t\t  CXX_MEM_STAT_INFO)\n+{\n+  return v->reserve (nelems, exact);\n+}\n+\n \n /* If V is NULL return false, otherwise return V->iterate(IX, PTR).  */\n template<typename T, typename A>"}]}