{"sha": "d7a2e0f70bda2f8a6bc82ca8da8cd069a4dbf954", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdhMmUwZjcwYmRhMmY4YTZiYzgyY2E4ZGE4Y2QwNjlhNGRiZjk1NA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-06-01T20:06:57Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-06-01T20:06:57Z"}, "message": "[multiple changes]\n\n2000-06-01  Zack Weinberg  <zack@wolery.cumb.org>\n\n\t* cpplex.c (maybe_macroexpand): Use CPP_WTRADITIONAL.  Improve\n\terror message.\n\t* cpplib.c (parse_include): Remove support for VAX-C\n\t\"#include starlet\" misfeature.\n\n\t* gcc.dg/cpp-tradwarn2.c: Update egrep pattern.\n\n2000-05-31 Laurynas Biveinis <lauras@softhome.net>\n\n\t* cppfiles.c: conditionally define O_BINARY.\n\t(open_include_file): pass O_BINARY to open().\n\nFrom-SVN: r34344", "tree": {"sha": "f453ae8daad4bc2e728ee46239aaa1feccfd364b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f453ae8daad4bc2e728ee46239aaa1feccfd364b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7a2e0f70bda2f8a6bc82ca8da8cd069a4dbf954", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7a2e0f70bda2f8a6bc82ca8da8cd069a4dbf954", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7a2e0f70bda2f8a6bc82ca8da8cd069a4dbf954", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7a2e0f70bda2f8a6bc82ca8da8cd069a4dbf954/comments", "author": null, "committer": null, "parents": [{"sha": "0ba154aa230cbd0dc92a8500919922a378df4767", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ba154aa230cbd0dc92a8500919922a378df4767", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ba154aa230cbd0dc92a8500919922a378df4767"}], "stats": {"total": 56, "additions": 30, "deletions": 26}, "files": [{"sha": "d564e553b4c59c6bdfe8fce1d779ac8c7535d1e2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a2e0f70bda2f8a6bc82ca8da8cd069a4dbf954/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a2e0f70bda2f8a6bc82ca8da8cd069a4dbf954/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7a2e0f70bda2f8a6bc82ca8da8cd069a4dbf954", "patch": "@@ -1,3 +1,15 @@\n+2000-06-01  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* cpplex.c (maybe_macroexpand): Use CPP_WTRADITIONAL.  Improve\n+\terror message.\n+\t* cpplib.c (parse_include): Remove support for VAX-C \n+\t\"#include starlet\" misfeature.\n+\n+2000-05-31 Laurynas Biveinis <lauras@softhome.net>\n+\n+\t* cppfiles.c: conditionally define O_BINARY.\n+\t(open_include_file): pass O_BINARY to open().\n+\n 2000-06-01  Richard Henderson  <rth@cygnus.com>\n \n \t* i960.c (i960_br_predict_opcode): Remove."}, {"sha": "71bb657c685b90d71a715d0b342c02326c86501a", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a2e0f70bda2f8a6bc82ca8da8cd069a4dbf954/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a2e0f70bda2f8a6bc82ca8da8cd069a4dbf954/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=d7a2e0f70bda2f8a6bc82ca8da8cd069a4dbf954", "patch": "@@ -39,6 +39,10 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #  define MMAP_THRESHOLD 0\n #endif\n \n+#ifndef O_BINARY\n+# define O_BINARY 0\n+#endif\n+\n static IHASH *redundant_include_p PARAMS ((IHASH *, struct file_name_list *));\n static IHASH *make_IHASH\tPARAMS ((const char *, const char *,\n \t\t\t\t\t struct file_name_list *,\n@@ -216,14 +220,18 @@ make_IHASH (name, fname, path, hash, slot)\n    paranoia is a virtue).\n \n    Use the three-argument form of open even though we aren't\n-   specifying O_CREAT, to defend against broken system headers.  */\n+   specifying O_CREAT, to defend against broken system headers.\n+\n+   O_BINARY tells some runtime libraries (notably DJGPP) not to do\n+   newline translation; we can handle DOS line breaks just fine\n+   ourselves.  */\n \n static inline int\n open_include_file (pfile, filename)\n      cpp_reader *pfile ATTRIBUTE_UNUSED;\n      const char *filename;\n {\n-  return open (filename, O_RDONLY|O_NOCTTY, 0666);\n+  return open (filename, O_RDONLY|O_NOCTTY|O_BINARY, 0666);\n }\n \n /* Search for include file FNAME in the include chain starting at"}, {"sha": "1dd3e9a6a9fb8978a04674da0c869e4b234fdeb2", "filename": "gcc/cpplex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a2e0f70bda2f8a6bc82ca8da8cd069a4dbf954/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a2e0f70bda2f8a6bc82ca8da8cd069a4dbf954/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=d7a2e0f70bda2f8a6bc82ca8da8cd069a4dbf954", "patch": "@@ -1699,9 +1699,9 @@ maybe_macroexpand (pfile, written)\n \t    CPP_PUTC (pfile, ' ');\n \n \t  /* K+R treated this as a hard error.  */\n-\t  if (CPP_OPTION (pfile, warn_traditional))\n+\t  if (CPP_WTRADITIONAL (pfile))\n \t    cpp_warning (pfile,\n-\t \"traditional C rejects function macro %s in non-function context\",\n+\t \"function macro %s must be used with arguments in traditional C\",\n \t\t\t hp->name);\n \t  return 0;\n \t}"}, {"sha": "529d1bb349f9327dfd849c25b5ecb48ca4e80a07", "filename": "gcc/cpplib.c", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a2e0f70bda2f8a6bc82ca8da8cd069a4dbf954/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a2e0f70bda2f8a6bc82ca8da8cd069a4dbf954/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=d7a2e0f70bda2f8a6bc82ca8da8cd069a4dbf954", "patch": "@@ -411,27 +411,7 @@ parse_include (pfile, name)\n \n   len = CPP_WRITTEN (pfile) - old_written;\n \n-  if (token == CPP_STRING)\n-    ; /* No special treatment required.  */\n-#ifdef VMS\n-  else if (token == CPP_NAME)\n-    {\n-      /* Support '#include xyz' like VAX-C.  It is taken as\n-         '#include <xyz.h>' and generates a warning.  */\n-      cpp_warning (pfile, \"#%s filename is obsolete, use #%s <filename.h>\",\n-\t\t   name, name);\n-\n-      /* Rewrite the token to <xyz.h>.  */\n-      CPP_RESERVE (pfile, 4);\n-      len += 4;\n-      memmove (pfile->token_buffer + old_written + 1,\n-\t       pfile->token_buffer + old_written,\n-\t       CPP_WRITTEN (pfile) - old_written);\n-      pfile->token_buffer[old_written] = '<';\n-      CPP_PUTS_Q (pfile, \".h>\", 2);\n-    }\n-#endif\n-  else\n+  if (token != CPP_STRING)\n     {\n       cpp_error (pfile, \"#%s expects \\\"FILENAME\\\" or <FILENAME>\", name);\n       CPP_SET_WRITTEN (pfile, old_written);"}, {"sha": "14acbe9720a03adcb4db22ce1559b293c9bd3089", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a2e0f70bda2f8a6bc82ca8da8cd069a4dbf954/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a2e0f70bda2f8a6bc82ca8da8cd069a4dbf954/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d7a2e0f70bda2f8a6bc82ca8da8cd069a4dbf954", "patch": "@@ -1,3 +1,7 @@\n+2000-06-01  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* gcc.dg/cpp-tradwarn2.c: Update egrep pattern.\n+\n 2000-05-29  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* gcc.dg/cpp-mi.c: Add another case, cpp-mix.h, where the"}, {"sha": "303b0ff2bb149cfd9877b40d52e733c0aa0a2579", "filename": "gcc/testsuite/gcc.dg/cpp-tradwarn2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a2e0f70bda2f8a6bc82ca8da8cd069a4dbf954/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-tradwarn2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a2e0f70bda2f8a6bc82ca8da8cd069a4dbf954/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-tradwarn2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-tradwarn2.c?ref=d7a2e0f70bda2f8a6bc82ca8da8cd069a4dbf954", "patch": "@@ -10,5 +10,5 @@ enum { SIGN_EXTEND = 23 };\n \n int fun(void)\n {\n-  return SIGN_EXTEND;\t/* { dg-warning \"in non-function context\" } */\n+  return SIGN_EXTEND;\t/* { dg-warning \"must be used with arguments\" } */\n }"}]}