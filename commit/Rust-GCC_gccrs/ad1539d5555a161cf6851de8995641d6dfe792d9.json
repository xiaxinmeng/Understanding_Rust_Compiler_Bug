{"sha": "ad1539d5555a161cf6851de8995641d6dfe792d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQxNTM5ZDU1NTVhMTYxY2Y2ODUxZGU4OTk1NjQxZDZkZmU3OTJkOQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2019-10-28T22:46:28Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-10-28T22:46:28Z"}, "message": "PR c/66970 - Add __has_builtin() macro\n\ngcc/ChangeLog:\n\n\tPR c/66970\n\t* doc/cpp.texi (__has_builtin): Document.\n\t* doc/extend.texi (__builtin_frob_return_addr): Correct spelling.\n\ngcc/c/ChangeLog:\n\n\tPR c/66970\n\t* c-decl.c (names_builtin_p): Define a new function.\n\ngcc/c-family/ChangeLog:\n\n\tPR c/66970\n\t* c-common.c (c_common_nodes_and_builtins): Call c_define_builtins\n\teven when only preprocessing.\n\t* c-common.h (names_builtin_p): Declare new function.\n\t* c-lex.c (init_c_lex): Set has_builtin.\n\t(c_common_has_builtin): Define a new function.\n\t* c-ppoutput.c (init_pp_output): Set has_builtin.\n\ngcc/cp/ChangeLog:\n\n\tPR c/66970\n\t* cp-objcp-common.c (names_builtin_p): Define new function.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c/66970\n\t* c-c++-common/cpp/has-builtin-2.c: New test.\n\t* c-c++-common/cpp/has-builtin-3.c: New test.\n\t* c-c++-common/cpp/has-builtin.c: New test.\n\nFrom-SVN: r277544", "tree": {"sha": "e56e9d15ba5ff4476a38e5269c6163b5dc6a36e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e56e9d15ba5ff4476a38e5269c6163b5dc6a36e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad1539d5555a161cf6851de8995641d6dfe792d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad1539d5555a161cf6851de8995641d6dfe792d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad1539d5555a161cf6851de8995641d6dfe792d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad1539d5555a161cf6851de8995641d6dfe792d9/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "48b2123f6336ba6c06846d7c8b60bd14eaeae7ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48b2123f6336ba6c06846d7c8b60bd14eaeae7ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48b2123f6336ba6c06846d7c8b60bd14eaeae7ec"}], "stats": {"total": 624, "additions": 616, "deletions": 8}, "files": [{"sha": "9f3589022b7f97d342ba195c650794437924044b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1539d5555a161cf6851de8995641d6dfe792d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1539d5555a161cf6851de8995641d6dfe792d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad1539d5555a161cf6851de8995641d6dfe792d9", "patch": "@@ -1,3 +1,9 @@\n+2019-10-28  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/66970\n+\t* doc/cpp.texi (__has_builtin): Document.\n+\t* doc/extend.texi (__builtin_frob_return_addr): Correct spelling.\n+\n 2019-10-28  Mihailo Stojanovic  <mistojanovic@wavecomp.com>\n \n \tPR target/82981"}, {"sha": "cfefb8ebf6c678b1392a37bbaeca566c51b04d86", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1539d5555a161cf6851de8995641d6dfe792d9/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1539d5555a161cf6851de8995641d6dfe792d9/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=ad1539d5555a161cf6851de8995641d6dfe792d9", "patch": "@@ -1,3 +1,13 @@\n+2019-10-28  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/66970\n+\t* c-common.c (c_common_nodes_and_builtins): Call c_define_builtins\n+\teven when only preprocessing.\n+\t* c-common.h (names_builtin_p): Declare new function.\n+\t* c-lex.c (init_c_lex): Set has_builtin.\n+\t(c_common_has_builtin): Define a new function.\n+\t* c-ppoutput.c (init_pp_output): Set has_builtin.\n+\n 2019-10-24  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-common.h (c_omp_context_selector_matches): Remove."}, {"sha": "79c047c4730d6710e7ea638fa0ef913e18881cde", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1539d5555a161cf6851de8995641d6dfe792d9/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1539d5555a161cf6851de8995641d6dfe792d9/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=ad1539d5555a161cf6851de8995641d6dfe792d9", "patch": "@@ -4468,8 +4468,7 @@ c_common_nodes_and_builtins (void)\n       va_list_ref_type_node = build_reference_type (va_list_type_node);\n     }\n \n-  if (!flag_preprocess_only)\n-    c_define_builtins (va_list_ref_type_node, va_list_arg_type_node);\n+  c_define_builtins (va_list_ref_type_node, va_list_arg_type_node);\n \n   main_identifier_node = get_identifier (\"main\");\n "}, {"sha": "42426ef6e1d58e382e58d401dbbab4fd24910b00", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1539d5555a161cf6851de8995641d6dfe792d9/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1539d5555a161cf6851de8995641d6dfe792d9/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=ad1539d5555a161cf6851de8995641d6dfe792d9", "patch": "@@ -801,6 +801,7 @@ extern void c_register_addr_space (const char *str, addr_space_t as);\n extern bool in_late_binary_op;\n extern const char *c_addr_space_name (addr_space_t as);\n extern tree identifier_global_value (tree);\n+extern bool names_builtin_p (const char *);\n extern tree c_linkage_bindings (tree);\n extern void record_builtin_type (enum rid, const char *, tree);\n extern tree build_void_list_node (void);\n@@ -1022,6 +1023,7 @@ extern bool c_cpp_diagnostic (cpp_reader *, enum cpp_diagnostic_level,\n \t\t\t      const char *, va_list *)\n      ATTRIBUTE_GCC_DIAG(5,0);\n extern int c_common_has_attribute (cpp_reader *);\n+extern int c_common_has_builtin (cpp_reader *);\n \n extern bool parse_optimize_options (tree, bool);\n "}, {"sha": "42010a762a62e8d8d06578a0f32aeeed27db135e", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1539d5555a161cf6851de8995641d6dfe792d9/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1539d5555a161cf6851de8995641d6dfe792d9/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=ad1539d5555a161cf6851de8995641d6dfe792d9", "patch": "@@ -81,6 +81,7 @@ init_c_lex (void)\n   cb->valid_pch = c_common_valid_pch;\n   cb->read_pch = c_common_read_pch;\n   cb->has_attribute = c_common_has_attribute;\n+  cb->has_builtin = c_common_has_builtin;\n   cb->get_source_date_epoch = cb_get_source_date_epoch;\n   cb->get_suggestion = cb_get_suggestion;\n   cb->remap_filename = remap_macro_filename;\n@@ -386,6 +387,58 @@ c_common_has_attribute (cpp_reader *pfile)\n \n   return result;\n }\n+\n+/* Callback for has_builtin.  */\n+\n+int\n+c_common_has_builtin (cpp_reader *pfile)\n+{\n+  const cpp_token *token = get_token_no_padding (pfile);\n+  if (token->type != CPP_OPEN_PAREN)\n+    {\n+      cpp_error (pfile, CPP_DL_ERROR,\n+\t\t \"missing '(' after \\\"__has_builtin\\\"\");\n+      return 0;\n+    }\n+\n+  const char *name = \"\";\n+  token = get_token_no_padding (pfile);\n+  if (token->type == CPP_NAME)\n+    {\n+      name = (const char *) cpp_token_as_text (pfile, token);\n+      token = get_token_no_padding (pfile);\n+      if (token->type != CPP_CLOSE_PAREN)\n+\t{\n+\t  cpp_error (pfile, CPP_DL_ERROR,\n+\t\t     \"expected ')' after \\\"%s\\\"\", name);\n+\t  name = \"\";\n+\t}\n+    }\n+  else\n+    {\n+      cpp_error (pfile, CPP_DL_ERROR,\n+\t\t \"macro \\\"__has_builtin\\\" requires an identifier\");\n+      if (token->type == CPP_CLOSE_PAREN)\n+\treturn 0;\n+    }\n+\n+  /* Consume tokens up to the closing parenthesis, including any nested\n+     pairs of parentheses, to avoid confusing redundant errors.  */\n+  for (unsigned nparen = 1; ; token = get_token_no_padding (pfile))\n+    {\n+      if (token->type == CPP_OPEN_PAREN)\n+\t++nparen;\n+      else if (token->type == CPP_CLOSE_PAREN)\n+\t--nparen;\n+      else if (token->type == CPP_EOF)\n+\tbreak;\n+      if (!nparen)\n+\tbreak;\n+    }\n+\n+  return names_builtin_p (name);\n+}\n+\n \f\n /* Read a token and return its type.  Fill *VALUE with its value, if\n    applicable.  Fill *CPP_FLAGS with the token's flags, if it is"}, {"sha": "91fabc7c1b89e79c7db758b93dc6158dae153503", "filename": "gcc/c-family/c-ppoutput.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1539d5555a161cf6851de8995641d6dfe792d9/gcc%2Fc-family%2Fc-ppoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1539d5555a161cf6851de8995641d6dfe792d9/gcc%2Fc-family%2Fc-ppoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ppoutput.c?ref=ad1539d5555a161cf6851de8995641d6dfe792d9", "patch": "@@ -151,6 +151,7 @@ init_pp_output (FILE *out_stream)\n     }\n \n   cb->has_attribute = c_common_has_attribute;\n+  cb->has_builtin = c_common_has_builtin;\n   cb->get_source_date_epoch = cb_get_source_date_epoch;\n   cb->remap_filename = remap_macro_filename;\n "}, {"sha": "087090f1c85e649952d758ee4a20c87d25620dc0", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1539d5555a161cf6851de8995641d6dfe792d9/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1539d5555a161cf6851de8995641d6dfe792d9/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=ad1539d5555a161cf6851de8995641d6dfe792d9", "patch": "@@ -1,3 +1,8 @@\n+2019-10-28  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/66970\n+\t* c-decl.c (names_builtin_p): Define a new function.\n+\n 2019-10-28  Richard Biener  <rguenther@suse.de>\n \n \tPR c/92249"}, {"sha": "e76ed26840f7c4883b380c2a4ca03b4c64030051", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1539d5555a161cf6851de8995641d6dfe792d9/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1539d5555a161cf6851de8995641d6dfe792d9/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=ad1539d5555a161cf6851de8995641d6dfe792d9", "patch": "@@ -9990,6 +9990,34 @@ identifier_global_value\t(tree t)\n   return NULL_TREE;\n }\n \n+/* Returns true if NAME refers to a built-in function or function-like\n+   operator.  */\n+\n+bool\n+names_builtin_p (const char *name)\n+{\n+  tree id = get_identifier (name);\n+  if (tree decl = identifier_global_value (id))\n+    return TREE_CODE (decl) == FUNCTION_DECL && DECL_IS_BUILTIN (decl);\n+\n+  /* Also detect common reserved C words that aren't strictly built-in\n+     functions.  */\n+  switch (C_RID_CODE (id))\n+    {\n+    case RID_BUILTIN_CONVERTVECTOR:\n+    case RID_BUILTIN_HAS_ATTRIBUTE:\n+    case RID_BUILTIN_SHUFFLE:\n+    case RID_CHOOSE_EXPR:\n+    case RID_OFFSETOF:\n+    case RID_TYPES_COMPATIBLE_P:\n+      return true;\n+    default:\n+      break;\n+    }\n+\n+  return false;\n+}\n+\n /* In C, the only C-linkage public declaration is at file scope.  */\n \n tree"}, {"sha": "143ddbbfa8fda8eda69f0c91ce173321a31c5b86", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1539d5555a161cf6851de8995641d6dfe792d9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1539d5555a161cf6851de8995641d6dfe792d9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ad1539d5555a161cf6851de8995641d6dfe792d9", "patch": "@@ -1,3 +1,8 @@\n+2019-10-28  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/66970\n+\t* cp-objcp-common.c (names_builtin_p): Define new function.\n+\n 2019-10-28  Nathan Sidwell  <nathan@acm.org>\n \n \t* parser.h (struct cp_token): Drop {ENUM,BOOL}_BITFIELD C-ism."}, {"sha": "60dcbe441056e5fb3860a1018d30b74a5abe8951", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1539d5555a161cf6851de8995641d6dfe792d9/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1539d5555a161cf6851de8995641d6dfe792d9/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=ad1539d5555a161cf6851de8995641d6dfe792d9", "patch": "@@ -24,6 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cp-tree.h\"\n #include \"cp-objcp-common.h\"\n #include \"dwarf2.h\"\n+#include \"stringpool.h\"\n \n /* Special routine to get the alias set for C++.  */\n \n@@ -348,6 +349,77 @@ identifier_global_value (tree name)\n   return get_global_binding (name);\n }\n \n+/* Returns true if NAME refers to a built-in function or function-like\n+   operator.  */\n+\n+bool\n+names_builtin_p (const char *name)\n+{\n+  tree id = get_identifier (name);\n+  if (tree binding = get_global_binding (id))\n+    {\n+      if (TREE_CODE (binding) == FUNCTION_DECL && DECL_IS_BUILTIN (binding))\n+\treturn true;\n+\n+      /* Handle the case when an overload for a  built-in name exists.  */\n+      if (TREE_CODE (binding) != OVERLOAD)\n+\treturn false;\n+\n+      for (ovl_iterator it (binding); it; ++it)\n+\t{\n+\t  tree decl = *it;\n+\t  if (DECL_IS_BUILTIN (decl))\n+\t    return true;\n+\t}\n+    }\n+\n+  /* Also detect common reserved C++ words that aren't strictly built-in\n+     functions.  */\n+  switch (C_RID_CODE (id))\n+    {\n+    case RID_ADDRESSOF:\n+    case RID_BUILTIN_CONVERTVECTOR:\n+    case RID_BUILTIN_HAS_ATTRIBUTE:\n+    case RID_BUILTIN_SHUFFLE:\n+    case RID_BUILTIN_LAUNDER:\n+    case RID_OFFSETOF:\n+    case RID_HAS_NOTHROW_ASSIGN:\n+    case RID_HAS_NOTHROW_CONSTRUCTOR:\n+    case RID_HAS_NOTHROW_COPY:\n+    case RID_HAS_TRIVIAL_ASSIGN:\n+    case RID_HAS_TRIVIAL_CONSTRUCTOR:\n+    case RID_HAS_TRIVIAL_COPY:\n+    case RID_HAS_TRIVIAL_DESTRUCTOR:\n+    case RID_HAS_UNIQUE_OBJ_REPRESENTATIONS:\n+    case RID_HAS_VIRTUAL_DESTRUCTOR:\n+    case RID_IS_ABSTRACT:\n+    case RID_IS_AGGREGATE:\n+    case RID_IS_BASE_OF:\n+    case RID_IS_CLASS:\n+    case RID_IS_EMPTY:\n+    case RID_IS_ENUM:\n+    case RID_IS_FINAL:\n+    case RID_IS_LITERAL_TYPE:\n+    case RID_IS_POD:\n+    case RID_IS_POLYMORPHIC:\n+    case RID_IS_SAME_AS:\n+    case RID_IS_STD_LAYOUT:\n+    case RID_IS_TRIVIAL:\n+    case RID_IS_TRIVIALLY_ASSIGNABLE:\n+    case RID_IS_TRIVIALLY_CONSTRUCTIBLE:\n+    case RID_IS_TRIVIALLY_COPYABLE:\n+    case RID_IS_UNION:\n+    case RID_IS_ASSIGNABLE:\n+    case RID_IS_CONSTRUCTIBLE:\n+    case RID_UNDERLYING_TYPE:\n+      return true;\n+    default:\n+      break;\n+    }\n+\n+  return false;\n+}\n+\n /* Register c++-specific dumps.  */\n \n void"}, {"sha": "bd741ce78ee1409087d8f321742705dc1d262c74", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1539d5555a161cf6851de8995641d6dfe792d9/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1539d5555a161cf6851de8995641d6dfe792d9/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=ad1539d5555a161cf6851de8995641d6dfe792d9", "patch": "@@ -3159,6 +3159,7 @@ directive}: @samp{#if}, @samp{#ifdef} or @samp{#ifndef}.\n * Elif::\n * @code{__has_attribute}::\n * @code{__has_cpp_attribute}::\n+* @code{__has_builtin}::\n * @code{__has_include}::\n @end menu\n \n@@ -3478,6 +3479,33 @@ information including the dates of the introduction of current standard\n attributes, see @w{@uref{https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations/,\n SD-6: SG10 Feature Test Recommendations}}.\n \n+@node @code{__has_builtin}\n+@subsection @code{__has_builtin}\n+@cindex @code{__has_builtin}\n+\n+The special operator @code{__has_builtin (@var{operand})} may be used in\n+constant integer contexts and in preprocessor @samp{#if} and @samp{#elif}\n+expressions to test whether the symbol named by its @var{operand} is\n+recognized as a built-in function by GCC in the current language and\n+conformance mode.  It evaluates to a constant integer with a nonzero\n+value if the argument refers to such a function, and to zero otherwise.\n+The operator may also be used in preprocessor @samp{#if} and @samp{#elif}\n+expressions.  The @code{__has_builtin} operator by itself, without any\n+@var{operand} or parentheses, acts as a predefined macro so that support\n+for it can be tested in portable code.  Thus, the recommended use of\n+the operator is as follows:\n+\n+@smallexample\n+#if defined __has_builtin\n+#  if __has_builtin (__builtin_object_size)\n+#    define builtin_object_size(ptr) __builtin_object_size (ptr, 2)\n+#  endif\n+#endif\n+#ifndef builtin_object_size\n+#  define builtin_object_size(ptr)   ((size_t)-1)\n+#endif\n+@end smallexample\n+\n @node @code{__has_include}\n @subsection @code{__has_include}\n @cindex @code{__has_include}"}, {"sha": "9db4f9b1d2991000223e00f155e28817d76efde4", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1539d5555a161cf6851de8995641d6dfe792d9/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1539d5555a161cf6851de8995641d6dfe792d9/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=ad1539d5555a161cf6851de8995641d6dfe792d9", "patch": "@@ -10912,7 +10912,7 @@ executed.\n If no fixup is needed, this function simply passes through @var{addr}.\n @end deftypefn\n \n-@deftypefn {Built-in Function} {void *} __builtin_frob_return_address (void *@var{addr})\n+@deftypefn {Built-in Function} {void *} __builtin_frob_return_addr (void *@var{addr})\n This function does the reverse of @code{__builtin_extract_return_addr}.\n @end deftypefn\n "}, {"sha": "1efdc30e5353be778c05763464e60590ac2281cc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1539d5555a161cf6851de8995641d6dfe792d9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1539d5555a161cf6851de8995641d6dfe792d9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ad1539d5555a161cf6851de8995641d6dfe792d9", "patch": "@@ -1,3 +1,10 @@\n+2019-10-28  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/66970\n+\t* c-c++-common/cpp/has-builtin-2.c: New test.\n+\t* c-c++-common/cpp/has-builtin-3.c: New test.\n+\t* c-c++-common/cpp/has-builtin.c: New test.\n+\n 2019-10-28  Mihailo Stojanovic  <mistojanovic@wavecomp.com>\n \n \tPR target/82981"}, {"sha": "92b944f352f20b8990d8f2c2c95a980606663fcf", "filename": "gcc/testsuite/c-c++-common/cpp/has-builtin-2.c", "status": "added", "additions": 297, "deletions": 0, "changes": 297, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1539d5555a161cf6851de8995641d6dfe792d9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fhas-builtin-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1539d5555a161cf6851de8995641d6dfe792d9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fhas-builtin-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fhas-builtin-2.c?ref=ad1539d5555a161cf6851de8995641d6dfe792d9", "patch": "@@ -0,0 +1,297 @@\n+/* PR c/66970 - Add __has_builtin() macro\n+   Verify __has_builtin evaluation for common built-ins and other identifiers.\n+   { dg-do compile } */\n+\n+// Verify a few library built-ins.\n+#if !__has_builtin (__builtin_abs)\n+#  error \"__has_builtin (__builtin_abs) failed\"\n+#endif\n+\n+#if !__has_builtin (abs)\n+   // abs is also a built-in unless disabled by -fno-builtin.\n+#  error \"__has_builtin (abs) failed\"\n+#endif\n+\n+#if __cplusplus\n+// Declare an overload and verify that __has_builtin (isalpha) still\n+// evaluates to true.\n+int isalpha (const char*);\n+#endif\n+\n+#if !__has_builtin (__builtin_isalpha)\n+#  error \"__has_builtin (__builtin_isalpha) failed\"\n+#endif\n+\n+#if !__has_builtin (isalpha)\n+   // isalpha is still a built-in despite the overload above.\n+#  error \"__has_builtin (isalpha) failed\"\n+#endif\n+\n+\n+#if !__has_builtin (__builtin__Exit)\n+#  error \"__has_builtin (__builtin__Exit) failed\"\n+#endif\n+\n+\n+#if !__has_builtin (__builtin_alloca)\n+#  error \"__has_builtin (__builtin_alloca) failed\"\n+#endif\n+\n+#if !__has_builtin (__builtin_is_constant_evaluated)\n+   // __builtin_is_constant_evaluated is a C++-only built.\n+#  ifdef __cplusplus\n+#    error \"__has_builtin (__builtin_is_constant_evaluated) failed\"\n+#  endif\n+#else\n+#  ifndef __cplusplus\n+#    error \"__has_builtin (__builtin_is_constant_evaluated) failed\"\n+#  endif\n+#endif\n+\n+#if !__has_builtin (__builtin_expect)\n+#  error \"__has_builtin (__builtin_expect) failed\"\n+#endif\n+\n+#if !__has_builtin (__builtin_trap)\n+#  error \"__has_builtin (__builtin_trap) failed\"\n+#endif\n+\n+#if !__has_builtin (__builtin_unreachable)\n+#  error \"__has_builtin (__builtin_unreachable) failed\"\n+#endif\n+\n+#if !__has_builtin (__builtin_LINE)\n+#  error \"__has_builtin (__builtin_LINE) failed\"\n+#endif\n+\n+#if !__has_builtin (__builtin_object_size)\n+#  error \"__has_builtin (__builtin_object_size) failed\"\n+#endif\n+\n+#if !__has_builtin (__builtin_inf)\n+#  error \"__has_builtin (__builtin_inf) failed\"\n+#endif\n+\n+#if !__has_builtin (__builtin_nan)\n+#  error \"__has_builtin (__builtin_nan) failed\"\n+#endif\n+\n+#if !__has_builtin (__builtin_bswap16)\n+#  error \"__has_builtin (__builtin_bswap16) failed\"\n+#endif\n+\n+#if !__has_builtin (__builtin_bswap32)\n+#  error \"__has_builtin (__builtin_bswap32) failed\"\n+#endif\n+\n+\n+// Verify a few integer overflow built-ins.\n+#if !__has_builtin (__builtin_add_overflow)\n+#  error \"__has_builtin (__builtin_add_overflow) failed\"\n+#endif\n+\n+#if !__has_builtin (__builtin_sadd_overflow)\n+#  error \"__has_builtin (__builtin_sadd_overflow) failed\"\n+#endif\n+\n+#if !__has_builtin (__builtin_add_overflow_p)\n+#  error \"__has_builtin (__builtin_add_overflow_p) failed\"\n+#endif\n+\n+\n+// Verify a few atomic built-ins.\n+#if !__has_builtin (__atomic_load)\n+#  error \"__has_builtin (__atomic_load) failed\"\n+#endif\n+\n+#if !__has_builtin (__atomic_load_n)\n+#  error \"__has_builtin (__atomic_load_n) failed\"\n+#endif\n+\n+#if !__has_builtin (__atomic_store)\n+#  error \"__has_builtin (__atomic_store) failed\"\n+#endif\n+\n+#if !__has_builtin (__atomic_store_n)\n+#  error \"__has_builtin (__atomic_store_n) failed\"\n+#endif\n+\n+#if !__has_builtin (__atomic_exchange)\n+#  error \"__has_builtin (__atomic_echange) failed\"\n+#endif\n+\n+#if !__has_builtin (__atomic_exchange_n)\n+#  error \"__has_builtin (__atomic_exchange_n) failed\"\n+#endif\n+\n+\n+// Verify a few sync built-ins.\n+#if !__has_builtin (__sync_fetch_and_add)\n+#  error \"__has_builtin (__sync_fetch_and_add) failed\"\n+#endif\n+\n+#if !__has_builtin (__sync_add_and_fetch)\n+#  error \"__has_builtin (__sync_add_and_fetch) failed\"\n+#endif\n+\n+#if !__has_builtin (__sync_bool_compare_and_swap)\n+#  error \"__has_builtin (__sync_bool_compare_and_swap) failed\"\n+#endif\n+\n+#if !__has_builtin (__sync_val_compare_and_swap)\n+#  error \"__has_builtin (__sync_val_compare_and_swap) failed\"\n+#endif\n+\n+#if !__has_builtin (__sync_synchronize)\n+#  error \"__has_builtin (__sync_synchronize) failed\"\n+#endif\n+\n+// Verify nonlocal goto builtins.\n+#if !__has_builtin (__builtin_setjmp)\n+#  error \"__has_builtin (__builtin_setjmp) failed\"\n+#endif\n+\n+#if !__has_builtin (__builtin_longjmp)\n+#  error \"__has_builtin (__builtin_longjmp) failed\"\n+#endif\n+\n+\n+// Verify a few built-ins for constructing function calls.\n+\n+#if !__has_builtin (__builtin_apply)\n+#  error \"__has_builtin (__builtin_apply) failed\"\n+#endif\n+\n+#if !__has_builtin (__builtin_return)\n+#  error \"__has_builtin (__builtin_return) failed\"\n+#endif\n+\n+// Verify built-ins for function return address.\n+#if !__has_builtin (__builtin_return_address)\n+#  error \"__has_builtin (__builtin_return_address) failed\"\n+#endif\n+\n+#if !__has_builtin (__builtin_extract_return_addr)\n+#  error \"__has_builtin (__builtin_extract_return_addr) failed\"\n+#endif\n+\n+#if !__has_builtin (__builtin_frob_return_addr)\n+#  error \"__has_builtin (__builtin_frob_return_addr) failed\"\n+#endif\n+\n+#if !__has_builtin (__builtin_frame_address)\n+#  error \"__has_builtin (__builtin_frame_address) failed\"\n+#endif\n+\n+// Verify keywords that aren't declared built-in functions.\n+\n+#if !__has_builtin (__builtin_has_attribute)\n+#  error \"__has_builtin (__builtin_has_attribute) failed\"\n+#endif\n+\n+#if !__has_builtin (__builtin_offsetof)\n+#  error \"__has_builtin (__builtin_offsetof) failed\"\n+#endif\n+\n+// Verify some C-only built-ins.\n+\n+#if !__has_builtin (__builtin_types_compatible_p)\n+#  if !__cplusplus\n+#    error \"__has_builtin (__builtin_types_compatible_p) failed\"\n+#  endif\n+#else\n+#  if __cplusplus\n+#    error \"__has_builtin (__builtin_types_compatible_p) failed\"\n+#  endif\n+#endif\n+\n+// Verify a few C++ traits built-ins.\n+\n+#if !__has_builtin (__builtin_addressof)\n+#  if __cplusplus\n+#    error \"__has_builtin (__builtin_addressof) failed\"\n+#  endif\n+#else\n+#  if !__cplusplus\n+#    error \"__has_builtin (__builtin_addressof) failed\"\n+#  endif\n+#endif\n+\n+#if !__has_builtin (__builtin_launder)\n+#  if __cplusplus\n+#    error \"__has_builtin (__builtin_launder) failed\"\n+#  endif\n+#else\n+#  if !__cplusplus\n+#    error \"__has_builtin (__builtin_launder) failed\"\n+#  endif\n+#endif\n+\n+#if !__has_builtin (__has_nothrow_assign)\n+#  if __cplusplus\n+#    error \"__has_builtin (__has_nothrow_assign) failed\"\n+#  endif\n+#else\n+#  if !__cplusplus\n+#    error \"__has_builtin (__has_nothrow_assign) failed\"\n+#  endif\n+#endif\n+\n+#if !__has_builtin (__has_trivial_assign)\n+#  if __cplusplus\n+#    error \"__has_builtin (__has_trivial_assign) failed\"\n+#  endif\n+#else\n+#  if !__cplusplus\n+#    error \"__has_builtin (__has_trivial_assign) failed\"\n+#  endif\n+#endif\n+\n+#if !__has_builtin (__has_virtual_destructor)\n+#  if __cplusplus\n+#    error \"__has_builtin (__has_virtual_destructor) failed\"\n+#  endif\n+#else\n+#  if !__cplusplus\n+#    error \"__has_builtin (__has_virtual_destructor) failed\"\n+#  endif\n+#endif\n+\n+\n+// Verify an Intel built-in that's not implemented by any other target.\n+#if !__has_builtin (__builtin_ia32_pause)\n+#  if defined (__i386__) || defined (__x86_64__)\n+#    error \"__has_builtin (__builtin_ia32_pause) failed\"\n+#  endif\n+#else\n+#  if !defined (__i386__) && !defined (__x86_64__)\n+#    error \"__has_builtin (__builtin_ia32_pause) failed\"\n+#  endif\n+#endif\n+\n+\n+// Verify non-functions.\n+\n+#if __has_builtin (__alignof__)\n+#  error \"__has_builtin (__alignof__) failed\"\n+#endif\n+\n+#if __has_builtin (asm)\n+#  error \"__has_builtin (asm) failed\"\n+#endif\n+\n+#if __has_builtin (__asm__)\n+#  error \"__has_builtin (__asm__) failed\"\n+#endif\n+\n+#if __has_builtin (__attribute__)\n+#  error \"__has_builtin (__attribute__) failed\"\n+#endif\n+\n+#if __has_builtin (__inline__)\n+#  error \"__has_builtin (__inline__) failed\"\n+#endif\n+\n+#if __has_builtin (__typeof__)\n+#  error \"__has_builtin (__typeof__) failed\"\n+#endif"}, {"sha": "40018ccffa217401d5f2661d8ccc73e39cc55723", "filename": "gcc/testsuite/c-c++-common/cpp/has-builtin-3.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1539d5555a161cf6851de8995641d6dfe792d9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fhas-builtin-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1539d5555a161cf6851de8995641d6dfe792d9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fhas-builtin-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fhas-builtin-3.c?ref=ad1539d5555a161cf6851de8995641d6dfe792d9", "patch": "@@ -0,0 +1,36 @@\n+/* PR c/66970 - Add __has_builtin() macro\n+   Verify __has_builtin evaluation for disabled library built-ins.\n+   { dg-do compile }\n+   { dg-options \"-fno-builtin-abs\" }\n+   { dg-additional-options \"-std=c90\" { target c } } */\n+\n+#if !__has_builtin (__builtin_abs)\n+// __builtin_xxx is always available regardless of -fno-builtin.\n+#  error \"__has_builtin (__builtin_abs) failed\"\n+#endif\n+\n+#if __has_builtin (abs)\n+#  error \"__has_builtin (abs) failed\"\n+#endif\n+\n+#if __has_builtin (abs)\n+#  error \"__has_builtin (abs) failed\"\n+#endif\n+\n+\n+#if !__has_builtin (__builtin_vsnprintf)\n+// __builtin_vsnprintf is available in all language modes.\n+#  error \"__has_builtin (__builtin_vsnprintf) failed\"\n+#endif\n+\n+#if !__has_builtin (vsnprintf)\n+#  if __cplusplus\n+// vsnprintf is always available in C++.\n+#    error \"__has_builtin (vsnprintf) failed\"\n+#  endif\n+#else\n+#  if !__cplusplus\n+// vsnprintf is a C99 function not available in C90.\n+#    error \"__has_builtin (vsnprintf) failed\"\n+#  endif\n+#endif"}, {"sha": "93516519acee52477f45a9ad4def7f6ef5f16020", "filename": "gcc/testsuite/c-c++-common/cpp/has-builtin.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1539d5555a161cf6851de8995641d6dfe792d9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fhas-builtin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1539d5555a161cf6851de8995641d6dfe792d9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fhas-builtin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fhas-builtin.c?ref=ad1539d5555a161cf6851de8995641d6dfe792d9", "patch": "@@ -0,0 +1,49 @@\n+/* PR c/66970 - Add __has_builtin() macro\n+   Verify that errors are detected and handled gracefully.\n+   { dg-do compile } */\n+\n+#ifndef __has_builtin\n+#  error \"__has_builtin is not defined\"\n+#endif\n+\n+#if __has_builtin             // { dg-error \"missing '\\\\\\(' after \\\"__has_builtin\\\"\" }\n+#endif\n+\n+#if __has_builtin (           // { dg-error \"macro \\\"__has_builtin\\\" requires an identifier\" }\n+#endif\n+\n+#if __has_builtin ()          // { dg-error \"macro \\\"__has_builtin\\\" requires an identifier\" }\n+#endif\n+\n+#if __has_builtin (1)         // { dg-error \"macro \\\"__has_builtin\\\" requires an identifier\" }\n+#endif\n+\n+#if __has_builtin (1, 2)      // { dg-error \"macro \\\"__has_builtin\\\" requires an identifier\" }\n+#endif\n+\n+#if __has_builtin (1 + 2)     // { dg-error \"macro \\\"__has_builtin\\\" requires an identifier\" }\n+#endif\n+\n+#if __has_builtin (x, y)      // { dg-error \"expected '\\\\\\)' after \\\"x\\\"\" } */\n+#endif\n+\n+#if __has_builtin (x + 1)     // { dg-error \"expected '\\\\\\)' after \\\"x\\\"\" } */\n+#endif\n+\n+#if __has_builtin (p->i)      // { dg-error \"expected '\\\\\\)' after \\\"p\\\"\" } */\n+#endif\n+\n+#if __has_builtin ((x))       // { dg-error \"macro \\\"__has_builtin\\\" requires an identifier\" }\n+#endif\n+\n+#if __has_builtin ((y)        // { dg-error \"macro \\\"__has_builtin\\\" requires an identifier\" }\n+#endif\n+\n+#if __has_builtin ((((z)      // { dg-error \"macro \\\"__has_builtin\\\" requires an identifier\" }\n+#endif\n+\n+#if __has_builtin (x)))       // { dg-error \"missing '\\\\\\('\" }\"\n+#endif\n+\n+#if __has_builtin (f ())      // { dg-error \"expected '\\\\\\)' after \\\"f\\\"\" }\"\n+#endif"}, {"sha": "c655d3ffc903f4270edc6a613a00b3f5af7e2b47", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1539d5555a161cf6851de8995641d6dfe792d9/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1539d5555a161cf6851de8995641d6dfe792d9/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=ad1539d5555a161cf6851de8995641d6dfe792d9", "patch": "@@ -676,6 +676,9 @@ struct cpp_callbacks\n   /* Callback to identify whether an attribute exists.  */\n   int (*has_attribute) (cpp_reader *);\n \n+  /* Callback to determine whether a built-in function is recognized.  */\n+  int (*has_builtin) (cpp_reader *);\n+\n   /* Callback that can change a user lazy into normal macro.  */\n   void (*user_lazy_macro) (cpp_reader *, cpp_macro *, unsigned);\n \n@@ -855,7 +858,8 @@ enum cpp_builtin_type\n   BT_PRAGMA,\t\t\t/* `_Pragma' operator */\n   BT_TIMESTAMP,\t\t\t/* `__TIMESTAMP__' */\n   BT_COUNTER,\t\t\t/* `__COUNTER__' */\n-  BT_HAS_ATTRIBUTE\t\t/* `__has_attribute__(x)' */\n+  BT_HAS_ATTRIBUTE,\t\t/* `__has_attribute__(x)' */\n+  BT_HAS_BUILTIN\t\t/* `__has_builtin(x)' */\n };\n \n #define CPP_HASHNODE(HNODE)\t((cpp_hashnode *) (HNODE))"}, {"sha": "b0943174f02111604c97ac0a53dff4b2e9f47820", "filename": "libcpp/init.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1539d5555a161cf6851de8995641d6dfe792d9/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1539d5555a161cf6851de8995641d6dfe792d9/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=ad1539d5555a161cf6851de8995641d6dfe792d9", "patch": "@@ -403,6 +403,7 @@ static const struct builtin_macro builtin_array[] =\n   B(\"__COUNTER__\",\t BT_COUNTER,       true),\n   B(\"__has_attribute\",\t BT_HAS_ATTRIBUTE, true),\n   B(\"__has_cpp_attribute\", BT_HAS_ATTRIBUTE, true),\n+  B(\"__has_builtin\",\t BT_HAS_BUILTIN,   true),\n   /* Keep builtins not used for -traditional-cpp at the end, and\n      update init_builtins() if any more are added.  */\n   B(\"_Pragma\",\t\t BT_PRAGMA,        true),\n@@ -483,7 +484,8 @@ cpp_init_special_builtins (cpp_reader *pfile)\n \n   for (b = builtin_array; b < builtin_array + n; b++)\n     {\n-      if (b->value == BT_HAS_ATTRIBUTE\n+      if ((b->value == BT_HAS_ATTRIBUTE\n+\t   || b->value == BT_HAS_BUILTIN)\n \t  && (CPP_OPTION (pfile, lang) == CLK_ASM\n \t      || pfile->cb.has_attribute == NULL))\n \tcontinue;"}, {"sha": "eb8321f8ceeece687b0c1aaa96491db85fac1e2d", "filename": "libcpp/macro.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1539d5555a161cf6851de8995641d6dfe792d9/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1539d5555a161cf6851de8995641d6dfe792d9/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=ad1539d5555a161cf6851de8995641d6dfe792d9", "patch": "@@ -568,6 +568,10 @@ _cpp_builtin_macro_text (cpp_reader *pfile, cpp_hashnode *node,\n     case BT_HAS_ATTRIBUTE:\n       number = pfile->cb.has_attribute (pfile);\n       break;\n+\n+    case BT_HAS_BUILTIN:\n+      number = pfile->cb.has_builtin (pfile);\n+      break;\n     }\n \n   if (result == NULL)"}, {"sha": "54738e8a169e243e40a7b99cd946525aa7d5dcdc", "filename": "libcpp/traditional.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1539d5555a161cf6851de8995641d6dfe792d9/libcpp%2Ftraditional.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1539d5555a161cf6851de8995641d6dfe792d9/libcpp%2Ftraditional.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ftraditional.c?ref=ad1539d5555a161cf6851de8995641d6dfe792d9", "patch": "@@ -326,9 +326,9 @@ static inline bool\n fun_like_macro (cpp_hashnode *node)\n {\n   if (cpp_builtin_macro_p (node))\n-    return node->value.builtin == BT_HAS_ATTRIBUTE;\n-  else\n-    return node->value.macro->fun_like;\n+    return (node->value.builtin == BT_HAS_ATTRIBUTE\n+\t    || node->value.builtin == BT_HAS_BUILTIN);\n+  return node->value.macro->fun_like;\n }\n \n /* Set up state for finding the opening '(' of a function-like"}]}