{"sha": "c064374dc436b7e7150be2a01c81f4b71072ef1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA2NDM3NGRjNDM2YjdlNzE1MGJlMmEwMWM4MWY0YjcxMDcyZWYxYQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2016-12-09T22:25:26Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2016-12-09T22:25:26Z"}, "message": "re PR fortran/77903 ([F08] gfortran 6.1.0/7.0.0 accept invalid code with conflicting module/submodule interfaces)\n\n2016-12-09  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/77903\n\t* decl.c (get_proc_name): Use the symbol tlink field instead of\n\tthe typespec interface field.\n\t(gfc_match_function_decl, gfc_match_submod_proc): Ditto.\n\t* gfortran.h : Since the symbol tlink field is no longer used\n\tby the frontend for change management, change the comment to\n\treflect its current uses.\n\t* parse.c (get_modproc_result): Same as decl.c changes.\n\t* resolve.c (resolve_fl_procedure): Ditto.\n\n2016-12-09  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/77903\n\t* gfortran.dg/submodule_20.f08: New test.\n\nFrom-SVN: r243507", "tree": {"sha": "9a6e983fb6c75fc6a70618631ea1221773a5aab7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a6e983fb6c75fc6a70618631ea1221773a5aab7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c064374dc436b7e7150be2a01c81f4b71072ef1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c064374dc436b7e7150be2a01c81f4b71072ef1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c064374dc436b7e7150be2a01c81f4b71072ef1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c064374dc436b7e7150be2a01c81f4b71072ef1a/comments", "author": null, "committer": null, "parents": [{"sha": "36823125e4aee32d457568a0666e9306f5cf7fae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36823125e4aee32d457568a0666e9306f5cf7fae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36823125e4aee32d457568a0666e9306f5cf7fae"}], "stats": {"total": 101, "additions": 73, "deletions": 28}, "files": [{"sha": "795f1f2f2ee459518439211d6a6bbb5afbedd434", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c064374dc436b7e7150be2a01c81f4b71072ef1a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c064374dc436b7e7150be2a01c81f4b71072ef1a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c064374dc436b7e7150be2a01c81f4b71072ef1a", "patch": "@@ -1,3 +1,15 @@\n+2016-12-09  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/77903\n+\t* decl.c (get_proc_name): Use the symbol tlink field instead of\n+\tthe typespec interface field.\n+\t(gfc_match_function_decl, gfc_match_submod_proc): Ditto.\n+\t* gfortran.h : Since the symbol tlink field is no longer used\n+\tby the frontend for change management, change the comment to\n+\treflect its current uses.\n+\t* parse.c (get_modproc_result): Same as decl.c changes.\n+\t* resolve.c (resolve_fl_procedure): Ditto.\n+\n 2016-12-09  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/61767\n@@ -22,7 +34,7 @@\n \t* trans-expr.c (gfc_conv_procedure_call): Use the almighty deallocate_\n \twith_status.\n \t* trans-openmp.c (gfc_walk_alloc_comps): Likewise.\n-\t(gfc_omp_clause_assign_op): Likewise. \n+\t(gfc_omp_clause_assign_op): Likewise.\n \t(gfc_omp_clause_dtor): Likewise.\n \t* trans-stmt.c (gfc_trans_deallocate): Likewise.\n \t* trans.c (gfc_deallocate_with_status): Allow deallocation of scalar"}, {"sha": "c8adedb933ee88faa09109af002fd2422b026c17", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c064374dc436b7e7150be2a01c81f4b71072ef1a/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c064374dc436b7e7150be2a01c81f4b71072ef1a/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=c064374dc436b7e7150be2a01c81f4b71072ef1a", "patch": "@@ -1119,12 +1119,12 @@ get_proc_name (const char *name, gfc_symbol **result, bool module_fcn_entry)\n     {\n       /* Create a partially populated interface symbol to carry the\n \t characteristics of the procedure and the result.  */\n-      sym->ts.interface = gfc_new_symbol (name, sym->ns);\n-      gfc_add_type (sym->ts.interface, &(sym->ts),\n+      sym->tlink = gfc_new_symbol (name, sym->ns);\n+      gfc_add_type (sym->tlink, &(sym->ts),\n \t\t    &gfc_current_locus);\n-      gfc_copy_attr (&sym->ts.interface->attr, &sym->attr, NULL);\n+      gfc_copy_attr (&sym->tlink->attr, &sym->attr, NULL);\n       if (sym->attr.dimension)\n-\tsym->ts.interface->as = gfc_copy_array_spec (sym->as);\n+\tsym->tlink->as = gfc_copy_array_spec (sym->as);\n \n       /* Ideally, at this point, a copy would be made of the formal\n \t arguments and their namespace. However, this does not appear\n@@ -1133,12 +1133,12 @@ get_proc_name (const char *name, gfc_symbol **result, bool module_fcn_entry)\n \n       if (sym->result && sym->result != sym)\n \t{\n-\t  sym->ts.interface->result = sym->result;\n+\t  sym->tlink->result = sym->result;\n \t  sym->result = NULL;\n \t}\n       else if (sym->result)\n \t{\n-\t  sym->ts.interface->result = sym->ts.interface;\n+\t  sym->tlink->result = sym->tlink;\n \t}\n     }\n   else if (sym && !sym->gfc_new\n@@ -6063,7 +6063,6 @@ gfc_match_function_decl (void)\n \t  sym->result = result;\n \t}\n \n-\n       /* Warn if this procedure has the same name as an intrinsic.  */\n       do_warn_intrinsic_shadow (sym, true);\n \n@@ -8254,11 +8253,11 @@ gfc_match_submod_proc (void)\n \n   /* Make sure that the result field is appropriately filled, even though\n      the result symbol will be replaced later on.  */\n-  if (sym->ts.interface && sym->ts.interface->attr.function)\n+  if (sym->tlink && sym->tlink->attr.function)\n     {\n-      if (sym->ts.interface->result\n-\t  && sym->ts.interface->result != sym->ts.interface)\n-\tsym->result= sym->ts.interface->result;\n+      if (sym->tlink->result\n+\t  && sym->tlink->result != sym->tlink)\n+\tsym->result= sym->tlink->result;\n       else\n \tsym->result = sym;\n     }"}, {"sha": "fd64af241b154cd8cb44ec54522c3ea70120866c", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c064374dc436b7e7150be2a01c81f4b71072ef1a/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c064374dc436b7e7150be2a01c81f4b71072ef1a/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=c064374dc436b7e7150be2a01c81f4b71072ef1a", "patch": "@@ -1532,14 +1532,20 @@ typedef struct gfc_symbol\n   gfc_namelist *namelist, *namelist_tail;\n \n   /* Change management fields.  Symbols that might be modified by the\n-     current statement have the mark member nonzero and are kept in a\n-     singly linked list through the tlink field.  Of these symbols,\n+     current statement have the mark member nonzero.  Of these symbols,\n      symbols with old_symbol equal to NULL are symbols created within\n      the current statement.  Otherwise, old_symbol points to a copy of\n-     the old symbol.  */\n-\n-  struct gfc_symbol *old_symbol, *tlink;\n+     the old symbol. gfc_new is used in symbol.c to flag new symbols.  */\n+  struct gfc_symbol *old_symbol;\n   unsigned mark:1, gfc_new:1;\n+\n+  /* The tlink field is used in the front end to carry the module\n+     declaration of separate module procedures so that the characteristics\n+     can be compared with the corresponding declaration in a submodule. In\n+     translation this field carries a linked list of symbols that require\n+     deferred initialization.  */\n+  struct gfc_symbol *tlink;\n+\n   /* Nonzero if all equivalences associated with this symbol have been\n      processed.  */\n   unsigned equiv_built:1;"}, {"sha": "6addae3678e38ca2657b94da62d4fbda316451d1", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c064374dc436b7e7150be2a01c81f4b71072ef1a/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c064374dc436b7e7150be2a01c81f4b71072ef1a/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=c064374dc436b7e7150be2a01c81f4b71072ef1a", "patch": "@@ -5556,11 +5556,11 @@ get_modproc_result (void)\n       proc = gfc_current_ns->proc_name ? gfc_current_ns->proc_name : NULL;\n       if (proc != NULL\n \t  && proc->attr.function\n-\t  && proc->ts.interface\n-\t  && proc->ts.interface->result\n-\t  && proc->ts.interface->result != proc->ts.interface)\n+\t  && proc->tlink\n+\t  && proc->tlink->result\n+\t  && proc->tlink->result != proc->tlink)\n \t{\n-\t  gfc_copy_dummy_sym (&proc->result, proc->ts.interface->result, 1);\n+\t  gfc_copy_dummy_sym (&proc->result, proc->tlink->result, 1);\n \t  gfc_set_sym_referenced (proc->result);\n \t  proc->result->attr.if_source = IFSRC_DECL;\n \t  gfc_commit_symbol (proc->result);"}, {"sha": "d04b43187423aa9a81b5c4c383070dbb5cf32176", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c064374dc436b7e7150be2a01c81f4b71072ef1a/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c064374dc436b7e7150be2a01c81f4b71072ef1a/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=c064374dc436b7e7150be2a01c81f4b71072ef1a", "patch": "@@ -12282,10 +12282,8 @@ resolve_fl_procedure (gfc_symbol *sym, int mp_flag)\n       module_name = strtok (name, \".\");\n       submodule_name = strtok (NULL, \".\");\n \n-      /* Stop the dummy characteristics test from using the interface\n-\t symbol instead of 'sym'.  */\n-      iface = sym->ts.interface;\n-      sym->ts.interface = NULL;\n+      iface = sym->tlink;\n+      sym->tlink = NULL;\n \n       /* Make sure that the result uses the correct charlen for deferred\n \t length results.  */\n@@ -12333,7 +12331,7 @@ resolve_fl_procedure (gfc_symbol *sym, int mp_flag)\n \t}\n \n check_formal:\n-      /* Check the charcateristics of the formal arguments.  */\n+      /* Check the characteristics of the formal arguments.  */\n       if (sym->formal && sym->formal_ns)\n \t{\n \t  for (arg = sym->formal; arg && arg->sym; arg = arg->next)\n@@ -12342,8 +12340,6 @@ resolve_fl_procedure (gfc_symbol *sym, int mp_flag)\n \t      gfc_traverse_ns (sym->formal_ns, compare_fsyms);\n \t    }\n \t}\n-\n-      sym->ts.interface = iface;\n     }\n   return true;\n }"}, {"sha": "6c86182a8e570f5c340f9d0cb44e1800396d29a4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c064374dc436b7e7150be2a01c81f4b71072ef1a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c064374dc436b7e7150be2a01c81f4b71072ef1a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c064374dc436b7e7150be2a01c81f4b71072ef1a", "patch": "@@ -1,3 +1,8 @@\n+2016-12-09  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/77903\n+\t* gfortran.dg/submodule_20.f08: New test.\n+\n 2016-12-09  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR testsuite/78740"}, {"sha": "36a95a50f13548f77ce5b436502506fbce323ca9", "filename": "gcc/testsuite/gfortran.dg/submodule_20.f08", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c064374dc436b7e7150be2a01c81f4b71072ef1a/gcc%2Ftestsuite%2Fgfortran.dg%2Fsubmodule_20.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c064374dc436b7e7150be2a01c81f4b71072ef1a/gcc%2Ftestsuite%2Fgfortran.dg%2Fsubmodule_20.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsubmodule_20.f08?ref=c064374dc436b7e7150be2a01c81f4b71072ef1a", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do compile }\n+!\n+! Test the fix for PR77903\n+!\n+! Contributed by Damian Rouson  <damian@sourceryinstitute.org>\n+!\n+module one_module\n+  implicit none\n+  interface\n+    module function one()\n+    end function\n+    integer module function two()\n+    end function\n+  end interface\n+end module\n+\n+submodule(one_module) one_submodule\n+  implicit none\n+contains\n+  integer module function one()  ! { dg-error \"Type mismatch\" }\n+    one = 1\n+  end function\n+  integer(8) module function two()  ! { dg-error \"Type mismatch\" }\n+    two = 2\n+  end function\n+end submodule\n+"}]}