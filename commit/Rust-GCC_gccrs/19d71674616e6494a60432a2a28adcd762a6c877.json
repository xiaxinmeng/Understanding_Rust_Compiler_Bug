{"sha": "19d71674616e6494a60432a2a28adcd762a6c877", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTlkNzE2NzQ2MTZlNjQ5NGE2MDQzMmEyYTI4YWRjZDc2MmE2Yzg3Nw==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2021-04-01T08:12:23Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2021-04-01T08:12:23Z"}, "message": "sra: Fix bug in grp_write propagation (PR 97009)\n\nSRA represents parts of aggregates which are arrays accessed with\nunknown index as \"unscalarizable regions.\"  When there are two such\nregions one within another and the outer is only read whereas the\ninner is written to, SRA fails to propagate that write information\nacross assignments.  This means that a second aggregate can contain\ndata while SRA thinks it does not and the pass can wrongly eliminate\nbig chunks of assignment from that second aggregate into a third\naggregate, which is what happens in PR 97009.\n\nFixed by checking all children of unscalariable accesses for the\ngrp_write flag.\n\ngcc/ChangeLog:\n\n2021-03-31  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/97009\n\t* tree-sra.c (access_or_its_child_written): New function.\n\t(propagate_subaccesses_from_rhs): Use it instead of a simple grp_write\n\ttest.\n\ngcc/testsuite/ChangeLog:\n\n2021-03-31  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/97009\n\t* gcc.dg/tree-ssa/pr97009.c: New test.", "tree": {"sha": "6d6e09f90303c5a2b4815625429e2eb59232d494", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d6e09f90303c5a2b4815625429e2eb59232d494"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19d71674616e6494a60432a2a28adcd762a6c877", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19d71674616e6494a60432a2a28adcd762a6c877", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19d71674616e6494a60432a2a28adcd762a6c877", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19d71674616e6494a60432a2a28adcd762a6c877/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7cef070bf43bfb3f3d77bac42eadea06c4b0281", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7cef070bf43bfb3f3d77bac42eadea06c4b0281", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7cef070bf43bfb3f3d77bac42eadea06c4b0281"}], "stats": {"total": 81, "additions": 80, "deletions": 1}, "files": [{"sha": "741dbc270c38a680af20f4b399a91010050251bc", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr97009.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19d71674616e6494a60432a2a28adcd762a6c877/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr97009.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19d71674616e6494a60432a2a28adcd762a6c877/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr97009.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr97009.c?ref=19d71674616e6494a60432a2a28adcd762a6c877", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O1\" } */\n+\n+static int __attribute__((noipa))\n+get_5 (void)\n+{\n+  return 5;\n+}\n+\n+static int __attribute__((noipa))\n+verify_5 (int v)\n+{\n+  if (v != 5)\n+    __builtin_abort ();\n+}\n+\n+struct T\n+{\n+  int w;\n+  int a[4];\n+};\n+\n+struct S\n+{\n+  int v;\n+  int x;\n+  struct T t[2];\n+  char alotofstuff[128];\n+};\n+\n+volatile int vol;\n+\n+void __attribute__((noipa))\n+consume_t (struct T t)\n+{\n+  vol = t.a[0];\n+}\n+\n+int __attribute__((noipa))\n+foo (int l1, int l2)\n+{\n+  struct S s1, s2, s3;\n+  int i, j;\n+\n+  s1.v = get_5 ();\n+  for (i = 0; i < l1; i++)\n+    {\n+      for (j = 0; j < l2; j++)\n+\ts1.t[i].a[j] = get_5 ();\n+      consume_t(s1.t[i]);\n+    }\n+\n+  s2 = s1;\n+\n+  s3 = s2;\n+  for (i = 0; i < l1; i++)\n+    for (j = 0; j < l2; j++)\n+      verify_5 (s3.t[i].a[j]);\n+}\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  foo (2, 4);\n+  return 0;\n+}"}, {"sha": "8dfc923ed7e3b8558e818c13a9f48aa3e4aa8dbe", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19d71674616e6494a60432a2a28adcd762a6c877/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19d71674616e6494a60432a2a28adcd762a6c877/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=19d71674616e6494a60432a2a28adcd762a6c877", "patch": "@@ -2723,6 +2723,19 @@ budget_for_propagation_access (tree decl)\n   return true;\n }\n \n+/* Return true if ACC or any of its subaccesses has grp_child set.  */\n+\n+static bool\n+access_or_its_child_written (struct access *acc)\n+{\n+  if (acc->grp_write)\n+    return true;\n+  for (struct access *sub = acc->first_child; sub; sub = sub->next_sibling)\n+    if (access_or_its_child_written (sub))\n+      return true;\n+  return false;\n+}\n+\n /* Propagate subaccesses and grp_write flags of RACC across an assignment link\n    to LACC.  Enqueue sub-accesses as necessary so that the write flag is\n    propagated transitively.  Return true if anything changed.  Additionally, if\n@@ -2836,7 +2849,7 @@ propagate_subaccesses_from_rhs (struct access *lacc, struct access *racc)\n       if (rchild->grp_unscalarizable_region\n \t  || !budget_for_propagation_access (lacc->base))\n \t{\n-\t  if (rchild->grp_write && !lacc->grp_write)\n+\t  if (!lacc->grp_write && access_or_its_child_written (rchild))\n \t    {\n \t      ret = true;\n \t      subtree_mark_written_and_rhs_enqueue (lacc);"}]}