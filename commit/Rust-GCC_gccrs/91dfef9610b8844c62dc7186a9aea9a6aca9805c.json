{"sha": "91dfef9610b8844c62dc7186a9aea9a6aca9805c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFkZmVmOTYxMGI4ODQ0YzYyZGM3MTg2YTlhZWE5YTZhY2E5ODA1Yw==", "commit": {"author": {"name": "Jose E. Marchesi", "email": "jemarch@gcc.gnu.org", "date": "2019-09-09T10:13:23Z"}, "committer": {"name": "Jose E. Marchesi", "email": "jemarch@gcc.gnu.org", "date": "2019-09-09T10:13:23Z"}, "message": "GCC port for eBPF\n\nThis patch series introduces a port of GCC to eBPF, which is a virtual\nmachine that resides in the Linux kernel.  Initially intended for\nuser-level packet capture and filtering, eBPF is nowadays generalized\nto serve as a general-purpose infrastructure also for non-networking\npurposes.\n\nThe binutils support is already upstream.  See\nhttps://sourceware.org/ml/binutils/2019-05/msg00306.html.\n\nChangeLog:\n\n\t* MAINTAINERS: Add myself as the maintainer of the eBPF port.\n\tRemove myself from Write After Approval section.\n\t* configure.ac: Support for bpf-*-* targets.\n\t* configure: Regenerate.\n\ncontrib/ChangeLog:\n\n\t* config-list.mk (LIST): Disable go in bpf-*-* targets.\n\ngcc/ChangeLog:\n\n\t* doc/invoke.texi (Option Summary): Cover eBPF.\n\t(eBPF Options): New section.\n\t* doc/extend.texi (BPF Built-in Functions): Likewise.\n\t(BPF Kernel Helpers): Likewise.\n\t* config.gcc: Support for bpf-*-* targets.\n\t* common/config/bpf/bpf-common.c: New file.\n\t* config/bpf/t-bpf: Likewise.\n\t* config/bpf/predicates.md: Likewise.\n\t* config/bpf/constraints.md: Likewise.\n\t* config/bpf/bpf.opt: Likewise.\n\t* config/bpf/bpf.md: Likewise.\n\t* config/bpf/bpf.h: Likewise.\n\t* config/bpf/bpf.c: Likewise.\n\t* config/bpf/bpf-protos.h: Likewise.\n\t* config/bpf/bpf-opts.h: Likewise.\n\t* config/bpf/bpf-helpers.h: Likewise.\n\t* config/bpf/bpf-helpers.def: Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/builtins-config.h: eBPF doesn't support C99 standard\n\tfunctions.\n\t* gcc.c-torture/compile/20101217-1.c: Add a function prototype for\n\tprintf.\n\t* gcc.c-torture/compile/20000211-1.c: Skip if target bpf-*-*.\n\t* gcc.c-torture/compile/poor.c: Likewise.\n\t* gcc.c-torture/compile/pr25311.c: Likewise.\n\t* gcc.c-torture/compile/pr39928-1.c: Likewise.\n\t* gcc.c-torture/compile/pr70061.c: Likewise.\n\t* gcc.c-torture/compile/920501-7.c: Likewise.\n\t* gcc.c-torture/compile/20000403-1.c: Likewise.\n\t* gcc.c-torture/compile/20001226-1.c: Likewise.\n\t* gcc.c-torture/compile/20030903-1.c: Likewise.\n\t* gcc.c-torture/compile/20031125-1.c: Likewise.\n\t* gcc.c-torture/compile/20040101-1.c: Likewise.\n\t* gcc.c-torture/compile/20040317-2.c: Likewise.\n\t* gcc.c-torture/compile/20040726-1.c: Likewise.\n\t* gcc.c-torture/compile/20051216-1.c: Likewise.\n\t* gcc.c-torture/compile/900313-1.c: Likewise.\n\t* gcc.c-torture/compile/920625-1.c: Likewise.\n\t* gcc.c-torture/compile/930421-1.c: Likewise.\n\t* gcc.c-torture/compile/930623-1.c: Likewise.\n\t* gcc.c-torture/compile/961004-1.c: Likewise.\n\t* gcc.c-torture/compile/980504-1.c: Likewise.\n\t* gcc.c-torture/compile/980816-1.c: Likewise.\n\t* gcc.c-torture/compile/990625-1.c: Likewise.\n\t* gcc.c-torture/compile/DFcmp.c: Likewise.\n\t* gcc.c-torture/compile/HIcmp.c: Likewise.\n\t* gcc.c-torture/compile/HIset.c: Likewise.\n\t* gcc.c-torture/compile/QIcmp.c: Likewise.\n\t* gcc.c-torture/compile/QIset.c: Likewise.\n\t* gcc.c-torture/compile/SFset.c: Likewise.\n\t* gcc.c-torture/compile/SIcmp.c: Likewise.\n\t* gcc.c-torture/compile/SIset.c: Likewise.\n\t* gcc.c-torture/compile/UHIcmp.c: Likewise.\n\t* gcc.c-torture/compile/UQIcmp.c: Likewise.\n\t* gcc.c-torture/compile/USIcmp.c: Likewise.\n\t* gcc.c-torture/compile/consec.c: Likewise.\n\t* gcc.c-torture/compile/limits-fndefn.c: Likewise.\n\t* gcc.c-torture/compile/lll.c: Likewise.\n\t* gcc.c-torture/compile/parms.c: Likewise.\n\t* gcc.c-torture/compile/pass.c: Likewise.\n\t* gcc.c-torture/compile/pp.c: Likewise.\n\t* gcc.c-torture/compile/pr32399.c: Likewise.\n\t* gcc.c-torture/compile/pr34091.c: Likewise.\n\t* gcc.c-torture/compile/pr34688.c: Likewise.\n\t* gcc.c-torture/compile/pr37258.c: Likewise.\n\t* gcc.c-torture/compile/pr37327.c: Likewise.\n\t* gcc.c-torture/compile/pr37381.c: Likewise.\n\t* gcc.c-torture/compile/pr37669-2.c: Likewise.\n\t* gcc.c-torture/compile/pr37669.c: Likewise.\n\t* gcc.c-torture/compile/pr37742-3.c: Likewise.\n\t* gcc.c-torture/compile/pr44063.c: Likewise.\n\t* gcc.c-torture/compile/pr48596.c: Likewise.\n\t* gcc.c-torture/compile/pr51856.c: Likewise.\n\t* gcc.c-torture/compile/pr54428.c: Likewise.\n\t* gcc.c-torture/compile/pr54713-1.c: Likewise.\n\t* gcc.c-torture/compile/pr54713-2.c: Likewise.\n\t* gcc.c-torture/compile/pr54713-3.c: Likewise.\n\t* gcc.c-torture/compile/pr55921.c: Likewise.\n\t* gcc.c-torture/compile/pr70240.c: Likewise.\n\t* gcc.c-torture/compile/pr70355.c: Likewise.\n\t* gcc.c-torture/compile/pr82052.c: Likewise.\n\t* gcc.c-torture/compile/pr83487.c: Likewise.\n\t* gcc.c-torture/compile/pr86122.c: Likewise.\n\t* gcc.c-torture/compile/pret-arg.c: Likewise.\n\t* gcc.c-torture/compile/regs-arg-size.c: Likewise.\n\t* gcc.c-torture/compile/structret.c: Likewise.\n\t* gcc.c-torture/compile/uuarg.c: Likewise.\n\t* gcc.dg/20001009-1.c: Likewise.\n\t* gcc.dg/20020418-1.c: Likewise.\n\t* gcc.dg/20020426-2.c: Likewise.\n\t* gcc.dg/20020430-1.c: Likewise.\n\t* gcc.dg/20040306-1.c: Likewise.\n\t* gcc.dg/20040622-2.c: Likewise.\n\t* gcc.dg/20050603-2.c: Likewise.\n\t* gcc.dg/20050629-1.c: Likewise.\n\t* gcc.dg/20061026.c: Likewise.\n\t* gcc.dg/Warray-bounds-3.c: Likewise.\n\t* gcc.dg/Warray-bounds-30.c: Likewise.\n\t* gcc.dg/Wframe-larger-than-2.c: Likewise.\n\t* gcc.dg/Wframe-larger-than.c: Likewise.\n\t* gcc.dg/Wrestrict-11.c: Likewise.\n\t* gcc.c-torture/compile/20000804-1.c: Likewise.\n\t* lib/target-supports.exp (check_effective_target_trampolines):\n\tAdapt to eBPF.\n\t(check_effective_target_indirect_jumps): Likewise.\n\t(check_effective_target_nonlocal_goto): Likewise.\n\t(check_effective_target_global_constructor): Likewise.\n\t(check_effective_target_return_address): Likewise.\n\t* gcc.target/bpf/bpf.exp: New file.\n\t* gcc.target/bpf/builtin-load.c: Likewise.\n\t* cc.target/bpf/constant-calls.c: Likewise.\n\t* gcc.target/bpf/diag-funargs.c: Likewise.\n\t* gcc.target/bpf/diag-funargs-2.c: Likewise.\n\t* gcc.target/bpf/diag-funargs-3.c: Likewise.\n\t* gcc.target/bpf/diag-indcalls.c: Likewise.\n\t* gcc.target/bpf/helper-bind.c: Likewise.\n\t* gcc.target/bpf/helper-bpf-redirect.c: Likewise.\n\t* gcc.target/bpf/helper-clone-redirect.c: Likewise.\n\t* gcc.target/bpf/helper-csum-diff.c: Likewise.\n\t* gcc.target/bpf/helper-csum-update.c: Likewise.\n\t* gcc.target/bpf/helper-current-task-under-cgroup.c: Likewise.\n\t* gcc.target/bpf/helper-fib-lookup.c: Likewise.\n\t* gcc.target/bpf/helper-get-cgroup-classid.c: Likewise.\n\t* gcc.target/bpf/helper-get-current-cgroup-id.c: Likewise.\n\t* gcc.target/bpf/helper-get-current-comm.c: Likewise.\n\t* gcc.target/bpf/helper-get-current-pid-tgid.c: Likewise.\n\t* gcc.target/bpf/helper-get-current-task.c: Likewise.\n\t* gcc.target/bpf/helper-get-current-uid-gid.c: Likewise.\n\t* gcc.target/bpf/helper-get-hash-recalc.c: Likewise.\n\t* gcc.target/bpf/helper-get-listener-sock.c: Likewise.\n\t* gcc.target/bpf/helper-get-local-storage.c: Likewise.\n\t* gcc.target/bpf/helper-get-numa-node-id.c: Likewise.\n\t* gcc.target/bpf/helper-get-prandom-u32.c: Likewise.\n\t* gcc.target/bpf/helper-get-route-realm.c: Likewise.\n\t* gcc.target/bpf/helper-get-smp-processor-id.c: Likewise.\n\t* gcc.target/bpf/helper-get-socket-cookie.c: Likewise.\n\t* gcc.target/bpf/helper-get-socket-uid.c: Likewise.\n\t* gcc.target/bpf/helper-getsockopt.c: Likewise.\n\t* gcc.target/bpf/helper-get-stack.c: Likewise.\n\t* gcc.target/bpf/helper-get-stackid.c: Likewise.\n\t* gcc.target/bpf/helper-ktime-get-ns.c: Likewise.\n\t* gcc.target/bpf/helper-l3-csum-replace.c: Likewise.\n\t* gcc.target/bpf/helper-l4-csum-replace.c: Likewise.\n\t* gcc.target/bpf/helper-lwt-push-encap.c: Likewise.\n\t* gcc.target/bpf/helper-lwt-seg6-action.c: Likewise.\n\t* gcc.target/bpf/helper-lwt-seg6-adjust-srh.c: Likewise.\n\t* gcc.target/bpf/helper-lwt-seg6-store-bytes.c: Likewise.\n\t* gcc.target/bpf/helper-map-delete-elem.c: Likewise.\n\t* gcc.target/bpf/helper-map-lookup-elem.c: Likewise.\n\t* gcc.target/bpf/helper-map-peek-elem.c: Likewise.\n\t* gcc.target/bpf/helper-map-pop-elem.c: Likewise.\n\t* gcc.target/bpf/helper-map-push-elem.c: Likewise.\n\t* gcc.target/bpf/helper-map-update-elem.c: Likewise.\n\t* gcc.target/bpf/helper-msg-apply-bytes.c: Likewise.\n\t* gcc.target/bpf/helper-msg-cork-bytes.c: Likewise.\n\t* gcc.target/bpf/helper-msg-pop-data.c: Likewise.\n\t* gcc.target/bpf/helper-msg-pull-data.c: Likewise.\n\t* gcc.target/bpf/helper-msg-push-data.c: Likewise.\n\t* gcc.target/bpf/helper-msg-redirect-hash.c: Likewise.\n\t* gcc.target/bpf/helper-msg-redirect-map.c: Likewise.\n\t* gcc.target/bpf/helper-override-return.c: Likewise.\n\t* gcc.target/bpf/helper-perf-event-output.c: Likewise.\n\t* gcc.target/bpf/helper-perf-event-read.c: Likewise.\n\t* gcc.target/bpf/helper-perf-event-read-value.c: Likewise.\n\t* gcc.target/bpf/helper-perf-prog-read-value.c: Likewise.\n\t* gcc.target/bpf/helper-probe-read.c: Likewise.\n\t* gcc.target/bpf/helper-probe-read-str.c: Likewise.\n\t* gcc.target/bpf/helper-probe-write-user.c: Likewise.\n\t* gcc.target/bpf/helper-rc-keydown.c: Likewise.\n\t* gcc.target/bpf/helper-rc-pointer-rel.c: Likewise.\n\t* gcc.target/bpf/helper-rc-repeat.c: Likewise.\n\t* gcc.target/bpf/helper-redirect-map.c: Likewise.\n\t* gcc.target/bpf/helper-set-hash.c: Likewise.\n\t* gcc.target/bpf/helper-set-hash-invalid.c: Likewise.\n\t* gcc.target/bpf/helper-setsockopt.c: Likewise.\n\t* gcc.target/bpf/helper-skb-adjust-room.c: Likewise.\n\t* gcc.target/bpf/helper-skb-cgroup-id.c: Likewise.\n\t* gcc.target/bpf/helper-skb-change-head.c: Likewise.\n\t* gcc.target/bpf/helper-skb-change-proto.c: Likewise.\n\t* gcc.target/bpf/helper-skb-change-tail.c: Likewise.\n\t* gcc.target/bpf/helper-skb-change-type.c: Likewise.\n\t* gcc.target/bpf/helper-skb-ecn-set-ce.c: Likewise.\n\t* gcc.target/bpf/helper-skb-get-tunnel-key.c: Likewise.\n\t* gcc.target/bpf/helper-skb-get-tunnel-opt.c: Likewise.\n\t* gcc.target/bpf/helper-skb-get-xfrm-state.c: Likewise.\n\t* gcc.target/bpf/helper-skb-load-bytes.c: Likewise.\n\t* gcc.target/bpf/helper-skb-load-bytes-relative.c: Likewise.\n\t* gcc.target/bpf/helper-skb-pull-data.c: Likewise.\n\t* gcc.target/bpf/helper-skb-set-tunnel-key.c: Likewise.\n\t* gcc.target/bpf/helper-skb-set-tunnel-opt.c: Likewise.\n\t* gcc.target/bpf/helper-skb-store-bytes.c: Likewise.\n\t* gcc.target/bpf/helper-skb-under-cgroup.c: Likewise.\n\t* gcc.target/bpf/helper-skb-vlan-pop.c: Likewise.\n\t* gcc.target/bpf/helper-skb-vlan-push.c: Likewise.\n\t* gcc.target/bpf/helper-skc-lookup-tcp.c: Likewise.\n\t* gcc.target/bpf/helper-sk-fullsock.c: Likewise.\n\t* gcc.target/bpf/helper-sk-lookup-tcp.c: Likewise.\n\t* gcc.target/bpf/helper-sk-lookup-upd.c: Likewise.\n\t* gcc.target/bpf/helper-sk-redirect-hash.c: Likewise.\n\t* gcc.target/bpf/helper-sk-redirect-map.c: Likewise.\n\t* gcc.target/bpf/helper-sk-release.c: Likewise.\n\t* gcc.target/bpf/helper-sk-select-reuseport.c: Likewise.\n\t* gcc.target/bpf/helper-sk-storage-delete.c: Likewise.\n\t* gcc.target/bpf/helper-sk-storage-get.c: Likewise.\n\t* gcc.target/bpf/helper-sock-hash-update.c: Likewise.\n\t* gcc.target/bpf/helper-sock-map-update.c: Likewise.\n\t* gcc.target/bpf/helper-sock-ops-cb-flags-set.c: Likewise.\n\t* gcc.target/bpf/helper-spin-lock.c: Likewise.\n\t* gcc.target/bpf/helper-spin-unlock.c: Likewise.\n\t* gcc.target/bpf/helper-strtol.c: Likewise.\n\t* gcc.target/bpf/helper-strtoul.c: Likewise.\n\t* gcc.target/bpf/helper-sysctl-get-current-value.c: Likewise.\n\t* gcc.target/bpf/helper-sysctl-get-name.c: Likewise.\n\t* gcc.target/bpf/helper-sysctl-get-new-value.c: Likewise.\n\t* gcc.target/bpf/helper-sysctl-set-new-value.c: Likewise.\n\t* gcc.target/bpf/helper-tail-call.c: Likewise.\n\t* gcc.target/bpf/helper-tcp-check-syncookie.c: Likewise.\n\t* gcc.target/bpf/helper-tcp-sock.c: Likewise.\n\t* gcc.target/bpf/helper-trace-printk.c: Likewise.\n\t* gcc.target/bpf/helper-xdp-adjust-head.c: Likewise.\n\t* gcc.target/bpf/helper-xdp-adjust-meta.c: Likewise.\n\t* gcc.target/bpf/helper-xdp-adjust-tail.c: Likewise.\n\t* gcc.target/bpf/skb-ancestor-cgroup-id.c: Likewise.\n\t* gcc.target/bpf/sync-fetch-and-add.c: Likewise.\n\nlibgcc/ChangeLog:\n\n\t* config.host: Set cpu_type for bpf-*-* targets.\n\t* config/bpf/t-bpf: Likewise.\n\t* config/bpf/crtn.S: Likewise.\n\t* config/bpf/crti.S: New file.\n\nFrom-SVN: r275506", "tree": {"sha": "80d2a38518601f96538b807d34bcf187e9552460", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80d2a38518601f96538b807d34bcf187e9552460"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91dfef9610b8844c62dc7186a9aea9a6aca9805c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91dfef9610b8844c62dc7186a9aea9a6aca9805c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91dfef9610b8844c62dc7186a9aea9a6aca9805c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91dfef9610b8844c62dc7186a9aea9a6aca9805c/comments", "author": null, "committer": null, "parents": [{"sha": "a5362c6aea5ea6b07803d8f9f6f783154e250ce4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5362c6aea5ea6b07803d8f9f6f783154e250ce4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5362c6aea5ea6b07803d8f9f6f783154e250ce4"}], "stats": {"total": 5471, "additions": 5454, "deletions": 17}, "files": [{"sha": "3685a2472db39c5f8601707cb18a2475dcc46338", "filename": "ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,13 @@\n+2019-09-09  Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\n+\t* MAINTAINERS: Add myself as the maintainer of the eBPF port.\n+\tRemove myself from Write After Approval section.\n+\n+2019-09-09  Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\n+\t* configure.ac: Support for bpf-*-* targets.\n+\t* configure: Regenerate.\n+\n 2019-09-09  Jose E. Marchesi  <jose.marchesi@oracle.com>\n \n \t* config.sub: Import upstream version 2019-06-30."}, {"sha": "93c9bb4357d4a4e61f8051f12fd513e658c50a7c", "filename": "MAINTAINERS", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/MAINTAINERS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/MAINTAINERS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/MAINTAINERS?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -57,6 +57,7 @@ arm port\t\tRamana Radhakrishnan\t<ramana.radhakrishnan@arm.com>\n arm port\t\tKyrylo Tkachov\t\t<kyrylo.tkachov@arm.com>\n avr port\t\tDenis Chertykov\t\t<chertykov@gmail.com>\n bfin port\t\tJie Zhang\t\t<jzhang918@gmail.com>\n+bpf port\t\tJose E. Marchesi\t<jose.marchesi@oracle.com>\n c6x port\t\tBernd Schmidt\t\t<bernds_cb1@t-online.de>\n cris port\t\tHans-Peter Nilsson\t<hp@axis.com>\n c-sky port\t\tXianmiao Qu\t\t<xianmiao_qu@c-sky.com>\n@@ -494,7 +495,6 @@ Luis Machado\t\t\t\t\t<luisgpm@br.ibm.com>\n Ziga Mahkovec\t\t\t\t\t<ziga.mahkovec@klika.si>\n Matthew Malcomson\t\t\t\t<matthew.malcomson@arm.com>\n Mikhail Maltsev\t\t\t\t\t<maltsevm@gmail.com>\n-Jose E. Marchesi\t\t\t\t<jose.marchesi@oracle.com>\n Patrick Marlier\t\t\t\t\t<patrick.marlier@gmail.com>\n Simon Martin\t\t\t\t\t<simartin@users.sourceforge.net>\n Alejandro Martinez\t\t\t\t<alejandro.martinezvicente@arm.com>"}, {"sha": "aec9186b2b0123d3088b69eb1ee541567654953e", "filename": "configure", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -3357,6 +3357,9 @@ case \"${target}\" in\n     # No hosted I/O support.\n     noconfigdirs=\"$noconfigdirs target-libssp\"\n     ;;\n+  bpf-*-*)\n+    noconfigdirs=\"$noconfigdirs target-libssp\"\n+    ;;\n   powerpc-*-aix* | rs6000-*-aix*)\n     noconfigdirs=\"$noconfigdirs target-libssp\"\n     ;;\n@@ -3391,12 +3394,43 @@ if test \"${ENABLE_LIBSTDCXX}\" = \"default\" ; then\n     avr-*-*)\n       noconfigdirs=\"$noconfigdirs target-libstdc++-v3\"\n       ;;\n+    bpf-*-*)\n+      noconfigdirs=\"$noconfigdirs target-libstdc++-v3\"\n+      ;;\n     ft32-*-*)\n       noconfigdirs=\"$noconfigdirs target-libstdc++-v3\"\n       ;;\n   esac\n fi\n \n+# Disable C++ on systems where it is known to not work.\n+# For testing, you can override this with --enable-languages=c++.\n+case ,${enable_languages}, in\n+  *,c++,*)\n+    ;;\n+  *)\n+      case \"${target}\" in\n+        bpf-*-*)\n+          unsupported_languages=\"$unsupported_languages c++\"\n+          ;;\n+      esac\n+      ;;\n+esac\n+\n+# Disable Objc on systems where it is known to not work.\n+# For testing, you can override this with --enable-languages=objc.\n+case ,${enable_languages}, in\n+  *,objc,*)\n+    ;;\n+  *)\n+      case \"${target}\" in\n+        bpf-*-*)\n+          unsupported_languages=\"$unsupported_languages objc\"\n+          ;;\n+      esac\n+      ;;\n+esac\n+\n # Disable D on systems where it is known to not work.\n # For testing, you can override this with --enable-languages=d.\n case ,${enable_languages}, in\n@@ -3405,6 +3439,9 @@ case ,${enable_languages}, in\n   *)\n     case \"${target}\" in\n       *-*-darwin*)\n+\tunsupported_languages=\"$unsupported_languages d\"\n+        ;;\n+      bpf-*-*)\n \tunsupported_languages=\"$unsupported_languages d\"\n \t;;\n     esac\n@@ -3437,6 +3474,9 @@ case \"${target}\" in\n     # See <http://gcc.gnu.org/ml/gcc-patches/2004-11/msg00572.html>.\n     unsupported_languages=\"$unsupported_languages fortran\"\n     ;;\n+  bpf-*-*)\n+    unsupported_languages=\"$unsupported_languages fortran\"\n+    ;;\n esac\n \n # Disable libffi for some systems.\n@@ -3483,6 +3523,9 @@ case \"${target}\" in\n   arm*-*-symbianelf*)\n     noconfigdirs=\"$noconfigdirs target-libffi\"\n     ;;\n+  bpf-*-*)\n+    noconfigdirs=\"$noconfigdirs target-libffi\"\n+    ;;\n   cris-*-* | crisv32-*-*)\n     case \"${target}\" in\n       *-*-linux*)\n@@ -3529,7 +3572,7 @@ esac\n # Disable the go frontend on systems where it is known to not work. Please keep\n # this in sync with contrib/config-list.mk.\n case \"${target}\" in\n-*-*-darwin* | *-*-cygwin* | *-*-mingw*)\n+*-*-darwin* | *-*-cygwin* | *-*-mingw* | bpf-* )\n     unsupported_languages=\"$unsupported_languages go\"\n     ;;\n esac\n@@ -3545,6 +3588,9 @@ if test x$enable_libgo = x; then\n     *-*-cygwin* | *-*-mingw*)\n \tnoconfigdirs=\"$noconfigdirs target-libgo\"\n \t;;\n+    bpf-*-*)\n+        noconfigdirs=\"$noconfigdirs target-libgo\"\n+        ;;\n     esac\n fi\n \n@@ -3616,6 +3662,9 @@ case \"${target}\" in\n   sparc-*-sunos4*)\n     noconfigdirs=\"$noconfigdirs target-newlib target-libgloss\"\n     ;;\n+  bpf-*-*)\n+    noconfigdirs=\"$noconfigdirs target-newlib target-libgloss\"\n+    ;;\n   *-*-aix*)\n     noconfigdirs=\"$noconfigdirs target-newlib target-libgloss\"\n     ;;\n@@ -3729,6 +3778,9 @@ case \"${target}\" in\n     # newlib is not 64 bit ready\n     noconfigdirs=\"$noconfigdirs target-newlib target-libgloss\"\n     ;;\n+  bpf-*-*)\n+    noconfigdirs=\"$noconfigdirs target-libobjc target-libbacktrace\"\n+    ;;\n   sh*-*-pe|mips*-*-pe|*arm-wince-pe)\n     noconfigdirs=\"$noconfigdirs tcl tk itcl libgui sim\"\n     ;;"}, {"sha": "b8ce2ad20b9d03e42731252a9ec2a8417c13e566", "filename": "configure.ac", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -638,6 +638,9 @@ case \"${target}\" in\n     # No hosted I/O support.\n     noconfigdirs=\"$noconfigdirs target-libssp\"\n     ;;\n+  bpf-*-*)\n+    noconfigdirs=\"$noconfigdirs target-libssp\"\n+    ;;\n   powerpc-*-aix* | rs6000-*-aix*)\n     noconfigdirs=\"$noconfigdirs target-libssp\"\n     ;;\n@@ -672,12 +675,43 @@ if test \"${ENABLE_LIBSTDCXX}\" = \"default\" ; then\n     avr-*-*)\n       noconfigdirs=\"$noconfigdirs target-libstdc++-v3\"\n       ;;\n+    bpf-*-*)\n+      noconfigdirs=\"$noconfigdirs target-libstdc++-v3\"\n+      ;;\n     ft32-*-*)\n       noconfigdirs=\"$noconfigdirs target-libstdc++-v3\"\n       ;;\n   esac\n fi\n \n+# Disable C++ on systems where it is known to not work.\n+# For testing, you can override this with --enable-languages=c++.\n+case ,${enable_languages}, in\n+  *,c++,*)\n+    ;;\n+  *)\n+      case \"${target}\" in\n+        bpf-*-*)\n+          unsupported_languages=\"$unsupported_languages c++\"\n+          ;;\n+      esac\n+      ;;\n+esac\n+\n+# Disable Objc on systems where it is known to not work.\n+# For testing, you can override this with --enable-languages=objc.\n+case ,${enable_languages}, in\n+  *,objc,*)\n+    ;;\n+  *)\n+      case \"${target}\" in\n+        bpf-*-*)\n+          unsupported_languages=\"$unsupported_languages objc\"\n+          ;;\n+      esac\n+      ;;\n+esac\n+\n # Disable D on systems where it is known to not work.\n # For testing, you can override this with --enable-languages=d.\n case ,${enable_languages}, in\n@@ -686,6 +720,9 @@ case ,${enable_languages}, in\n   *)\n     case \"${target}\" in\n       *-*-darwin*)\n+\tunsupported_languages=\"$unsupported_languages d\"\n+        ;;\n+      bpf-*-*)\n \tunsupported_languages=\"$unsupported_languages d\"\n \t;;\n     esac\n@@ -715,6 +752,9 @@ case \"${target}\" in\n     # See <http://gcc.gnu.org/ml/gcc-patches/2004-11/msg00572.html>.\n     unsupported_languages=\"$unsupported_languages fortran\"\n     ;;\n+  bpf-*-*)\n+    unsupported_languages=\"$unsupported_languages fortran\"\n+    ;;\n esac\n \n # Disable libffi for some systems.\n@@ -761,6 +801,9 @@ case \"${target}\" in\n   arm*-*-symbianelf*)\n     noconfigdirs=\"$noconfigdirs target-libffi\"\n     ;;\n+  bpf-*-*)\n+    noconfigdirs=\"$noconfigdirs target-libffi\"\n+    ;;\n   cris-*-* | crisv32-*-*)\n     case \"${target}\" in\n       *-*-linux*)\n@@ -807,7 +850,7 @@ esac\n # Disable the go frontend on systems where it is known to not work. Please keep\n # this in sync with contrib/config-list.mk.\n case \"${target}\" in\n-*-*-darwin* | *-*-cygwin* | *-*-mingw*)\n+*-*-darwin* | *-*-cygwin* | *-*-mingw* | bpf-* )\n     unsupported_languages=\"$unsupported_languages go\"\n     ;;\n esac\n@@ -823,6 +866,9 @@ if test x$enable_libgo = x; then\n     *-*-cygwin* | *-*-mingw*)\n \tnoconfigdirs=\"$noconfigdirs target-libgo\"\n \t;;\n+    bpf-*-*)\n+        noconfigdirs=\"$noconfigdirs target-libgo\"\n+        ;;\n     esac\n fi\n \n@@ -894,6 +940,9 @@ case \"${target}\" in\n   sparc-*-sunos4*)\n     noconfigdirs=\"$noconfigdirs target-newlib target-libgloss\"\n     ;;\n+  bpf-*-*)\n+    noconfigdirs=\"$noconfigdirs target-newlib target-libgloss\"\n+    ;;\n   *-*-aix*)\n     noconfigdirs=\"$noconfigdirs target-newlib target-libgloss\"\n     ;;\n@@ -1007,6 +1056,9 @@ case \"${target}\" in\n     # newlib is not 64 bit ready\n     noconfigdirs=\"$noconfigdirs target-newlib target-libgloss\"\n     ;;\n+  bpf-*-*)\n+    noconfigdirs=\"$noconfigdirs target-libobjc target-libbacktrace\"\n+    ;;\n   sh*-*-pe|mips*-*-pe|*arm-wince-pe)\n     noconfigdirs=\"$noconfigdirs tcl tk itcl libgui sim\"\n     ;;"}, {"sha": "0e473d63c222e289cdbe0fc5a079f193876d3347", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,7 @@\n+2019-09-09  Jose E. Marchesi  <jemarch@gnu.org>\n+\n+\t* config-list.mk (LIST): Disable go in bpf-*-* targets.\n+\n 2019-09-04  Martin Liska  <mliska@suse.cz>\n \n \t* mklog: Do not print changed functions for"}, {"sha": "a5f5d7bbd5ad86af75b60b6137f831f4d8a4e941", "filename": "contrib/config-list.mk", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/contrib%2Fconfig-list.mk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/contrib%2Fconfig-list.mk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fconfig-list.mk?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -40,6 +40,7 @@ LIST = aarch64-elf aarch64-linux-gnu aarch64-rtems \\\n   arm-linux-androideabi arm-uclinux_eabi arm-eabi arm-rtems \\\n   arm-symbianelf avr-elf \\\n   bfin-elf bfin-uclinux bfin-linux-uclibc bfin-rtems bfin-openbsd \\\n+  bpf-unknown-none \\\n   c6x-elf c6x-uclinux cr16-elf cris-elf cris-linux crisv32-elf crisv32-linux \\\n   csky-elf csky-linux-gnu \\\n   epiphany-elf epiphany-elfOPT-with-stack-offset=16 fido-elf \\\n@@ -123,7 +124,7 @@ $(LIST): make-log-dir\n \t\tTGT=`echo $@ | awk 'BEGIN { FS = \"OPT\" }; { print $$1 }'` &&\t\t\t\\\n \t\tTGT=`$(GCC_SRC_DIR)/config.sub $$TGT` &&\t\t\t\t\t\\\n \t\tcase $$TGT in\t\t\t\t\t\t\t\t\t\\\n-\t\t\t*-*-darwin* | *-*-cygwin* | *-*-mingw* | *-*-aix*)\t\t\t\\\n+\t\t\t*-*-darwin* | *-*-cygwin* | *-*-mingw* | *-*-aix* | bpf-*-*)\t\t\t\\\n \t\t\t\tADDITIONAL_LANGUAGES=\"\";\t\t\t\t\t\\\n \t\t\t\t;;\t\t\t\t\t\t\t\t\\\n \t\t\t*)\t\t\t\t\t\t\t\t\t\\"}, {"sha": "34b2f620b8a3119e258a3e8a3843f29d89d63d9d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,26 @@\n+2019-09-09  Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\n+\t* doc/invoke.texi (Option Summary): Cover eBPF.\n+\t(eBPF Options): New section.\n+\t* doc/extend.texi (BPF Built-in Functions): Likewise.\n+\t(BPF Kernel Helpers): Likewise.\n+\n+2019-09-09  Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\n+\t* config.gcc: Support for bpf-*-* targets.\n+\t* common/config/bpf/bpf-common.c: New file.\n+\t* config/bpf/t-bpf: Likewise.\n+\t* config/bpf/predicates.md: Likewise.\n+\t* config/bpf/constraints.md: Likewise.\n+\t* config/bpf/bpf.opt: Likewise.\n+\t* config/bpf/bpf.md: Likewise.\n+\t* config/bpf/bpf.h: Likewise.\n+\t* config/bpf/bpf.c: Likewise.\n+\t* config/bpf/bpf-protos.h: Likewise.\n+\t* config/bpf/bpf-opts.h: Likewise.\n+\t* config/bpf/bpf-helpers.h: Likewise.\n+\t* config/bpf/bpf-helpers.def: Likewise.\n+\n 2019-09-09  Jose E. Marchesi  <jose.marchesi@oracle.com>\n \n \t* doc/sourcebuild.texi (Effective-Target Keywords): Document"}, {"sha": "0d04f21b8f9e52ff7be55830cf98b929984fb9c3", "filename": "gcc/common/config/bpf/bpf-common.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Fcommon%2Fconfig%2Fbpf%2Fbpf-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Fcommon%2Fconfig%2Fbpf%2Fbpf-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fbpf%2Fbpf-common.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,55 @@\n+/* Common hooks for eBPF.\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+#include \"config/bpf/bpf-protos.h\"\n+\n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS 0\n+\n+/* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n+static const struct default_options bpf_option_optimization_table[] =\n+  {\n+    /* Enable -funroll-all-loops by default.  */\n+    { OPT_LEVELS_ALL, OPT_funroll_all_loops, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n+#undef TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE bpf_option_optimization_table\n+\n+/* Implement TARGET_OPTION_DEFAULT_PARAMS.  */\n+\n+static void\n+bpf_option_default_params (void)\n+{\n+  /* XXX large-stack-frame = 512 bytes */\n+  /* XXX max-unrolled-insns */\n+  /* XXX max-unroll-times */\n+}\n+\n+#undef TARGET_OPTION_DEFAULT_PARAMS\n+#define TARGET_OPTION_DEFAULT_PARAMS bpf_option_default_params\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "0eba7ca1d4d3436ceb765c01c49d6664463fe7cc", "filename": "gcc/config.gcc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -360,6 +360,9 @@ avr-*-*)\n bfin*-*)\n \tcpu_type=bfin\n \t;;\n+bpf-*-*)\n+\tcpu_type=bpf\n+\t;;\n crisv32-*)\n \tcpu_type=cris\n \t;;\n@@ -1308,6 +1311,12 @@ bfin*-*)\n \tuse_collect2=no\n \tuse_gcc_stdint=wrap\n \t;;\n+bpf-*-*)\n+        tmake_file=\"${tmake_file} bpf/t-bpf\"\n+        use_collect2=no\n+        extra_headers=\"bpf-helpers.h\"\n+        use_gcc_stdint=provide\n+        ;;\n cr16-*-elf)\n         tm_file=\"elfos.h ${tm_file} newlib-stdint.h\"\n         tmake_file=\"${tmake_file} cr16/t-cr16 \""}, {"sha": "cd0640297d0e1d26b1d0ff1013a186779107ae89", "filename": "gcc/config/bpf/bpf-helpers.def", "status": "added", "additions": 194, "deletions": 0, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Fconfig%2Fbpf%2Fbpf-helpers.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Fconfig%2Fbpf%2Fbpf-helpers.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbpf%2Fbpf-helpers.def?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,194 @@\n+/* Kernel helpers database.\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* This file contains the definition of the kernel helpers that are\n+   available to eBPF programs.\n+\n+   The primary source for information on kernel helpers is the\n+   linux/include/uapi/linux/bpf.h file in the Linux source tree.\n+   Please keep this database in sync.\n+\n+   The first column is the first kernel version featuring the helper\n+   function.  This should be an enumerate from bpf_kernel_version,\n+   defined in bpf-opts.h.  Note that the backend assumes that helpers\n+   never get deprecated in the kernel.  If that eventually happens,\n+   then we will need to use a bitmask here instead of an enumerate.\n+\n+   The second column is the constant-name for the helper.\n+   The third column is the program-name of the helper.\n+\n+   The fourth column is a list of names describing the types of the\n+   values returned and accepted by the helper, in one of these forms:\n+\n+     TYPES (type1, type2, ..., 0)\n+     VTYPES (type1, type2, ..., 0)\n+\n+   VTYPES should be used should the helper accept a variable number of\n+   arguments, TYPES otherwise.  The valid type names are:\n+\n+     `vt' for void.\n+     `it' for signed int.\n+     `ut' for unsigned int.\n+     `pt' for void*.\n+     `cpt' for const void*.\n+     `st' for short int.\n+     `ust' for unsigned short int.\n+     `cst' for const char *.\n+     `ullt' for unsigned long long.\n+     `llt' for long long.\n+     `u32t' for uint32.\n+     `u64t' for uint64.\n+  \n+   In types descriptions, the firt entry corresponds to the value\n+   returned by the helper.  Subsequent names correspond to the helper\n+   arguments.  Finally, a 0 should close the list.\n+\n+   VERY IMPORTANT: the helper entries should be listed in the same\n+   order than in the definition of __BPF_FUNC_MAPPER in\n+   linux/include/uapi/linux/bpf.h!  */\n+\n+DEF_HELPER (LINUX_V4_0, MAP_LOOKUP_ELEM, map_lookup_elem, TYPES (pt, pt, pt, 0))\n+DEF_HELPER (LINUX_V4_0, MAP_UPDATE_ELEM, map_update_elem, TYPES (it, pt, pt, pt, ullt, 0))\n+DEF_HELPER (LINUX_V4_0, MAP_DELETE_ELEM, map_delete_elem, TYPES (it, pt, pt, 0))\n+DEF_HELPER (LINUX_V4_1, PROBE_READ, probe_read, TYPES (it, pt, ut, cpt, 0))\n+DEF_HELPER (LINUX_V4_1, KTIME_GET_NS, ktime_get_ns, TYPES (ullt, 0))\n+DEF_HELPER (LINUX_V4_1, TRACE_PRINTK, trace_printk, VTYPES (it, cst, it, 0))\n+DEF_HELPER (LINUX_V4_1, GET_PRANDOM_U32, get_prandom_u32, TYPES (ullt, 0))\n+DEF_HELPER (LINUX_V4_1, GET_SMP_PROCESSOR_ID, get_smp_processor_id, TYPES (ullt, 0))\n+DEF_HELPER (LINUX_V4_1, SKB_STORE_BYTES, skb_store_bytes, TYPES (it, pt, it, pt, it, it, 0))\n+DEF_HELPER (LINUX_V4_1, L3_CSUM_REPLACE, l3_csum_replace, TYPES (it, pt, it, it ,it ,it, 0))\n+DEF_HELPER (LINUX_V4_1, L4_CSUM_REPLACE, l4_csum_replace, TYPES (it, pt, it, it, it, it, 0))\n+DEF_HELPER (LINUX_V4_2, TAIL_CALL, tail_call, TYPES (vt, pt, pt, it, 0))\n+DEF_HELPER (LINUX_V4_2, CLONE_REDIRECT, clone_redirect, TYPES (it, pt, it, it, 0))\n+DEF_HELPER (LINUX_V4_2, GET_CURRENT_PID_TGID, get_current_pid_tgid, TYPES (ullt, 0))\n+DEF_HELPER (LINUX_V4_2, GET_CURRENT_UID_GID, get_current_uid_gid, TYPES (ullt, 0))\n+DEF_HELPER (LINUX_V4_2, GET_CURRENT_COMM, get_current_comm, TYPES (it, pt, it, 0))\n+DEF_HELPER (LINUX_V4_3, GET_CGROUP_CLASSID, get_cgroup_classid, TYPES (it, pt, 0))\n+DEF_HELPER (LINUX_V4_3, SKB_VLAN_PUSH, skb_vlan_push, TYPES (it, pt, st, ust, 0))\n+DEF_HELPER (LINUX_V4_3, SKB_VLAN_POP, skb_vlan_pop, TYPES (it, pt, 0))\n+DEF_HELPER (LINUX_V4_3, SKB_GET_TUNNEL_KEY, skb_get_tunnel_key, TYPES (it, pt, pt, it, it, 0))\n+DEF_HELPER (LINUX_V4_3, SKB_SET_TUNNEL_KEY, skb_set_tunnel_key, TYPES (it, pt, pt, it, it, 0))\n+DEF_HELPER (LINUX_V4_3, PERF_EVENT_READ, perf_event_read, TYPES (ullt, pt, ullt, 0))\n+DEF_HELPER (LINUX_V4_4, REDIRECT, redirect, TYPES (it, it, it, 0))\n+DEF_HELPER (LINUX_V4_4, GET_ROUTE_REALM, get_route_realm, TYPES (ut, pt, 0))\n+DEF_HELPER (LINUX_V4_4, PERF_EVENT_OUTPUT, perf_event_output, \\\n+\t    TYPES (it, pt, pt, ullt, pt, it, 0))\n+DEF_HELPER (LINUX_V4_5, SKB_LOAD_BYTES, skb_load_bytes, TYPES (it, pt, it, pt, it, 0))\n+DEF_HELPER (LINUX_V4_6, GET_STACKID, get_stackid, TYPES (it, pt, pt, it, 0))\n+DEF_HELPER (LINUX_V4_6, CSUM_DIFF, csum_diff, TYPES (it, pt, it, pt, it, it, 0))\n+DEF_HELPER (LINUX_V4_6, SKB_GET_TUNNEL_OPT, skb_get_tunnel_opt, TYPES (it, pt, pt, it, 0))\n+DEF_HELPER (LINUX_V4_6, SKB_SET_TUNNEL_OPT, skb_set_tunnel_opt, TYPES (it, pt, pt, it, 0))\n+DEF_HELPER (LINUX_V4_8, SKB_CHANGE_PROTO, skb_change_proto, TYPES (it, pt, st, u64t, 0))\n+DEF_HELPER (LINUX_V4_8, SKB_CHANGE_TYPE, skb_change_type, TYPES (it, pt, u32t, 0))\n+DEF_HELPER (LINUX_V4_8, SKB_UNDER_CGROUP, skb_under_cgroup, TYPES (it, pt, pt, it, 0))\n+DEF_HELPER (LINUX_V4_8, GET_HASH_RECALC, get_hash_recalc, TYPES (ut, pt, 0))\n+DEF_HELPER (LINUX_V4_8, GET_CURRENT_TASK, get_current_task, TYPES (ullt, 0))\n+DEF_HELPER (LINUX_V4_8, PROBE_WRITE_USER, probe_write_user, TYPES (it, pt, cpt, ut, 0))\n+DEF_HELPER (LINUX_V4_9, CURRENT_TASK_UNDER_CGROUP, current_task_under_cgroup, \\\n+\t    TYPES (it, pt, it, 0))\n+DEF_HELPER (LINUX_V4_9, SKB_CHANGE_TAIL, skb_change_tail, TYPES (it, pt, ut, u64t, 0))\n+DEF_HELPER (LINUX_V4_9, SKB_PULL_DATA, skb_pull_data, TYPES (it, pt, it, 0))\n+DEF_HELPER (LINUX_V4_9, CSUM_UPDATE, csum_update, TYPES (llt, pt, u32t, 0))\n+DEF_HELPER (LINUX_V4_9, SET_HASH_INVALID, set_hash_invalid, TYPES (vt, pt, 0))\n+DEF_HELPER (LINUX_V4_10, GET_NUMA_NODE_ID, get_numa_node_id, TYPES (it, 0))\n+DEF_HELPER (LINUX_V4_10, SKB_CHANGE_HEAD, skb_change_head, TYPES (it, pt, it, it, 0))\n+DEF_HELPER (LINUX_V4_10, XDP_ADJUST_HEAD, xdp_adjust_head, TYPES (it, pt, it, 0))\n+DEF_HELPER (LINUX_V4_11, PROBE_READ_STR, probe_read_str, TYPES (it, pt, u32t, cpt, 0))\n+DEF_HELPER (LINUX_V4_12, GET_SOCKET_COOKIE, get_socket_cookie, TYPES (it, pt, 0))\n+DEF_HELPER (LINUX_V4_12, GET_SOCKET_UID, get_socket_uid, TYPES (ut, pt, 0))\n+DEF_HELPER (LINUX_V4_13, SET_HASH, set_hash, TYPES (ut, pt, u32t, 0))\n+DEF_HELPER (LINUX_V4_13, SETSOCKOPT, setsockopt, TYPES (it, pt, it, it, pt, it, 0))\n+DEF_HELPER (LINUX_V4_13, SKB_ADJUST_ROOM, skb_adjust_room, TYPES (it, pt, st, u32t, ullt, 0))\n+DEF_HELPER (LINUX_V4_14, REDIRECT_MAP, redirect_map, TYPES (it, pt, it, it, 0))\n+DEF_HELPER (LINUX_V4_14, SK_REDIRECT_MAP, sk_redirect_map, TYPES (it, pt, pt, it, it, 0))\n+DEF_HELPER (LINUX_V4_14, SOCK_MAP_UPDATE, sock_map_update, TYPES (it, pt, pt, pt, ullt, 0))\n+DEF_HELPER (LINUX_V4_15, XDP_ADJUST_META, xdp_adjust_meta, TYPES (it, pt, it, 0))\n+DEF_HELPER (LINUX_V4_15, PERF_EVENT_READ_VALUE, perf_event_read_value,\n+\t    TYPES (it, pt, ullt, pt, ut, 0))\n+DEF_HELPER (LINUX_V4_15, PERF_PROG_READ_VALUE, perf_prog_read_value,\n+\t    TYPES (it, pt, pt, ut, 0))\n+DEF_HELPER (LINUX_V4_15, GETSOCKOPT, getsockopt, TYPES (it, pt, it, it, pt, it, 0))\n+\n+DEF_HELPER (LINUX_V4_16, OVERRIDE_RETURN, override_return, TYPES (it, pt, ult, 0))\n+DEF_HELPER (LINUX_V4_16, SOCK_OPS_CB_FLAGS_SET, sock_ops_cb_flags_set, TYPES (it, pt, it, 0))\n+DEF_HELPER (LINUX_V4_17, MSG_REDIRECT_MAP, msg_redirect_map, TYPES (it, pt, pt, it, it, 0))\n+DEF_HELPER (LINUX_V4_17, MSG_APPLY_BYTES, msg_apply_bytes, TYPES (it, pt, it, 0))\n+DEF_HELPER (LINUX_V4_17, MSG_CORK_BYTES, msg_cork_bytes, TYPES (it, pt, it, 0))\n+DEF_HELPER (LINUX_V4_17, MSG_PULL_DATA, msg_pull_data, TYPES (it, pt, it, it, it, 0))\n+DEF_HELPER (LINUX_V4_17, BIND, bind, TYPES (it, pt, pt, it, 0))\n+DEF_HELPER (LINUX_V4_18, XDP_ADJUST_TAIL, xdp_adjust_tail, TYPES (it, pt, it, 0))\n+DEF_HELPER (LINUX_V4_18, SKB_GET_XFRM_STATE,\n+\t    skb_get_xfrm_state, TYPES (it, pt, it, pt, it, it, 0))\n+DEF_HELPER (LINUX_V4_18, GET_STACK, get_stack, TYPES (it, pt, pt, it, it, 0))\n+DEF_HELPER (LINUX_V4_18, SKB_LOAD_BYTES_RELATIVE, skb_load_bytes_relative,\n+\t    TYPES (it, pt, it, pt, it, ut, 0))\n+DEF_HELPER (LINUX_V4_18, FIB_LOOKUP, fib_lookup, TYPES (it, pt, pt, it, ut, 0))\n+DEF_HELPER (LINUX_V4_18, SOCK_HASH_UPDATE, sock_hash_update, TYPES (it, pt, pt, pt, ullt, 0))\n+DEF_HELPER (LINUX_V4_18, MSG_REDIRECT_HASH, msg_redirect_hash, TYPES (it, pt, pt, pt, it, 0))\n+DEF_HELPER (LINUX_V4_18, SK_REDIRECT_HASH, sk_redirect_hash, TYPES (it, pt, pt, pt, it, 0))\n+DEF_HELPER (LINUX_V4_18, LWT_PUSH_ENCAP, lwt_push_encap, TYPES (it, pt, ut, pt, ut, 0))\n+DEF_HELPER (LINUX_V4_18, LWT_SEG6_STORE_BYTES, lwt_seg6_store_bytes,\n+\t    TYPES (it, pt, ut, pt, ut, 0))\n+DEF_HELPER (LINUX_V4_18, LWT_SEG6_ADJUST_SRH, lwt_seg6_adjust_srh, TYPES (it, pt, ut, ut, 0))\n+DEF_HELPER (LINUX_V4_18, LWT_SEG6_ACTION, lwt_seg6_action, TYPES (it, pt, ut, pt, ut, 0))\n+DEF_HELPER (LINUX_V4_18, RC_REPEAT, rc_repeat, TYPES (it, pt, 0))\n+DEF_HELPER (LINUX_V4_18, RC_KEYDOWN, rc_keydown, TYPES (it, pt, ut, ullt, ut, 0))\n+DEF_HELPER (LINUX_V4_18, SKB_CGROUP_ID, skb_cgroup_id, TYPES (ullt, pt, 0))\n+DEF_HELPER (LINUX_V4_18, GET_CURRENT_CGROUP_ID, get_current_cgroup_id, TYPES (ullt, 0))\n+DEF_HELPER (LINUX_V4_19, GET_LOCAL_STORAGE, get_local_storage, TYPES (pt, pt, ullt, 0))\n+DEF_HELPER (LINUX_V4_19, SK_SELECT_REUSEPORT, sk_select_reuseport,\n+\t    TYPES (it, pt, pt, pt, ut, 0))\n+DEF_HELPER (LINUX_V4_19, SKB_ANCESTOR_CGROUP_ID, skb_ancestor_cgroup_id,\n+\t    TYPES (ullt, pt, it, 0))\n+DEF_HELPER (LINUX_V4_20, SK_LOOKUP_TCP, sk_lookup_tcp, TYPES (pt, pt, pt, it, ullt, ullt, 0))\n+DEF_HELPER (LINUX_V4_20, SK_LOOKUP_UDP, sk_lookup_udp, TYPES (pt, pt, pt, it, ullt, ullt, 0))\n+DEF_HELPER (LINUX_V4_20, SK_RELEASE, sk_release, TYPES (it, pt, 0))\n+DEF_HELPER (LINUX_V4_20, MAP_PUSH_ELEM, map_push_elem, TYPES (it, pt, pt, ullt, 0))\n+DEF_HELPER (LINUX_V4_20, MAP_POP_ELEM, map_pop_elem, TYPES (it, pt, pt, 0))\n+DEF_HELPER (LINUX_V4_20, MAP_PEEK_ELEM, map_peek_elem, TYPES (it, pt, pt, 0))\n+DEF_HELPER (LINUX_V4_20, MSG_PUSH_DATA, msg_push_data, TYPES (it, pt, it, it, it, 0))\n+DEF_HELPER (LINUX_V5_0, MSG_POP_DATA, msg_pop_data, TYPES (it, pt, it, it, it, 0))\n+DEF_HELPER (LINUX_V5_0, RC_POINTER_REL, rc_pointer_rel, TYPES (it, pt, it, it, 0))\n+DEF_HELPER (LINUX_V5_1, SPIN_LOCK, spin_lock, TYPES (vt, pt, 0))\n+DEF_HELPER (LINUX_V5_1, SPIN_UNLOCK, spin_unlock, TYPES (vt, pt, 0))\n+DEF_HELPER (LINUX_V5_1, SK_FULLSOCK, sk_fullsock, TYPES (pt, pt, 0))\n+DEF_HELPER (LINUX_V5_1, TCP_SOCK, tcp_sock, TYPES (pt, pt, 0))\n+DEF_HELPER (LINUX_V5_1, SKB_ECN_SET_CE, skb_ecn_set_ce, TYPES (it, pt, 0))\n+DEF_HELPER (LINUX_V5_1, GET_LISTENER_SOCK, get_listener_sock, TYPES (pt, pt, 0))\n+DEF_HELPER (LINUX_V5_2, SKC_LOOKUP_TCP, skc_lookup_tcp,\n+\t    TYPES (pt, pt, pt, u32t, u64t, u64t, 0))\n+DEF_HELPER (LINUX_V5_2, TCP_CHECK_SYNCOOKIE, tcp_check_syncookie,\n+\t    TYPES (it, pt, pt, u32t, pt, u32t, 0))\n+DEF_HELPER (LINUX_V5_2, SYSCTL_GET_NAME, sysctl_get_name, TYPES (it, pt, pt, ullt, u64t, 0))\n+DEF_HELPER (LINUX_V5_2, SYSCTL_GET_CURRENT_VALUE, sysctl_get_current_value,\n+\t    TYPES (it, pt, pt, ullt, 0))\n+DEF_HELPER (LINUX_V5_2, SYSCTL_GET_NEW_VALUE, sysctl_get_new_value,\n+\t    TYPES (it, pt, pt, ullt, 0))\n+DEF_HELPER (LINUX_V5_2, SYSCTL_SET_NEW_VALUE, sysctl_set_new_value,\n+\t    TYPES (it, pt, pt, ullt, 0))\n+DEF_HELPER (LINUX_V5_2, STRTOL, strtol, TYPES (it, cst, ullt, u64t, pt, 0))\n+DEF_HELPER (LINUX_V5_2, STRTOUL, strtoul, TYPES (it, pt, ullt, u64t, pt, 0))\n+DEF_HELPER (LINUX_V5_2, SK_STORAGE_GET, sk_storage_get, TYPES (pt, pt, pt, pt, u64t, 0))\n+DEF_HELPER (LINUX_V5_2, SK_STORAGE_DELETE, sk_storage_delete, TYPES (it, pt, pt, 0))\n+\n+/*\n+Local variables:\n+mode:c\n+End:\n+*/"}, {"sha": "14275439446a88c3ecadfa8726a4677d813bd643", "filename": "gcc/config/bpf/bpf-helpers.h", "status": "added", "additions": 327, "deletions": 0, "changes": 327, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Fconfig%2Fbpf%2Fbpf-helpers.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Fconfig%2Fbpf%2Fbpf-helpers.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbpf%2Fbpf-helpers.h?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,327 @@\n+/* Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* The purpose of this file is to provide a compatiblity layer with\n+   the Linux kernel bpf_helpers.h header that is located in\n+   linux/tools/testing/selftests/bpf/bpf_helpers.h.  That file is\n+   currently llvm-specific.  */\n+\n+#ifndef __BPF_HELPERS_H\n+#define __BPF_HELPERS_H\n+\n+#define SEC(NAME) __attribute__((section(NAME), used))\n+\n+/* Flags used in some kernel helpers.  */\n+\n+#define BPF_ANY     0\n+#define BPF_NOEXIST 1\n+#define BPF_EXIST   2\n+\n+#define BPF_F_LOCK 4\n+#define BPF_F_NO_COMMON_LRU (1U << 1)\n+#define BPF_F_NUMA_NODE (1U << 2)\n+\n+/* Functions to call kernel helpers.  We provide the \"standard\" bpf_*\n+   names as synonyms of the corresponding GCC builtins.  In some\n+   cases, where non-void pointers are passed to the helper, inline\n+   functions are used to achieve proper type checking.  */\n+\n+#ifndef KERNEL_VERSION\n+# define KERNEL_VERSION(a,b,c) (((a) << 16) + ((b) << 8) + (c))\n+#endif\n+\n+#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,0,0)\n+\n+#define bpf_map_lookup_elem\t__builtin_bpf_helper_map_lookup_elem\n+#define bpf_map_update_elem\t__builtin_bpf_helper_map_update_elem\n+#define bpf_map_delete_elem\t__builtin_bpf_helper_map_delete_elem\n+\n+#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,1,0)\n+\n+#define bpf_probe_read\t\t__builtin_bpf_helper_probe_read\n+#define bpf_ktime_get_ns\t__builtin_bpf_helper_ktime_get_ns\n+#define bpf_trace_printk\t__builtin_bpf_helper_trace_printk\n+#define bpf_get_prandom_u32\t__builtin_bpf_helper_get_prandom_u32\n+#define bpf_get_smp_processor_id __builtin_bpf_helper_get_smp_processor_id\n+#define bpf_skb_store_bytes\t__builtin_bpf_helper_skb_store_bytes\n+#define bpf_l3_csum_replace\t__builtin_bpf_helper_l3_csum_replace\n+#define bpf_l4_csum_replace\t__builtin_bpf_helper_l4_csum_replace\n+\n+#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,2,0)\n+\n+#define bpf_tail_call\t\t__builtin_bpf_helper_tail_call\n+#define bpf_clone_redirect\t__builtin_bpf_helper_clone_redirect\n+#define bpf_get_current_pid_tgid __builtin_bpf_helper_get_current_pid_tgid\n+#define bpf_get_current_uid_gid  __builtin_bpf_helper_get_current_uid_gid\n+#define bpf_get_current_comm\t__builtin_bpf_helper_get_current_comm\n+\n+#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,3,0)\n+\n+#define bpf_get_cgroup_classid\t__builtin_bpf_helper_get_cgroup_classid\n+#define bpf_skb_vlan_push\t__builtin_bpf_helper_skb_vlan_push\n+#define bpf_skb_vlan_pop\t__builtin_bpf_helper_skb_vlan_pop\n+#define bpf_skb_get_tunnel_key\t__builtin_bpf_helper_skb_get_tunnel_key\n+#define bpf_skb_set_tunnel_key\t__builtin_bpf_helper_skb_set_tunnel_key\n+#define bpf_perf_event_read\t__builtin_bpf_helper_perf_event_read\n+\n+#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,4,0)\n+\n+#define bpf_redirect\t\t__builtin_bpf_helper_redirect\n+#define bpf_get_route_realm\t__builtin_bpf_helper_get_route_realm\n+#define bpf_perf_event_output\t__builtin_bpf_helper_perf_event_output\n+\n+#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,5,0)\n+\n+#define bpf_skb_load_bytes\t__builtin_bpf_helper_skb_load_bytes\n+\n+#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,6,0)\n+\n+#define bpf_get_stackid\t\t__builtin_bpf_helper_get_stackid\n+#define bpf_csum_diff\t\t__builtin_bpf_helper_csum_diff\n+#define bpf_skb_get_tunnel_opt\t__builtin_bpf_helper_skb_get_tunnel_opt\n+#define bpf_skb_set_tunnel_opt\t__builtin_bpf_helper_skb_set_tunnel_opt\n+\n+#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,8,0)\n+\n+#define bpf_skb_change_proto\t__builtin_bpf_helper_skb_change_proto\n+#define bpf_skb_change_type\t__builtin_bpf_helper_skb_change_type\n+#define bpf_skb_under_cgroup\t__builtin_bpf_helper_skb_under_cgroup\n+#define bpf_get_hash_recalc\t__builtin_bpf_helper_get_hash_recalc\n+#define bpf_get_current_task\t__builtin_bpf_helper_get_current_task\n+#define bpf_probe_write_user\t__builtin_bpf_helper_probe_write_user\n+\n+#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,9,0)\n+\n+#define bpf_current_task_under_cgroup __builtin_bpf_helper_current_task_under_cgroup\n+#define bpf_skb_change_tail\t__builtin_bpf_helper_skb_change_tail\n+#define bpf_skb_pull_data\t__builtin_bpf_helper_skb_pull_data\n+#define bpf_csum_update\t\t__builtin_bpf_helper_csum_update\n+#define bpf_set_hash_invalid\t__builtin_bpf_helper_set_hash_invalid\n+\n+#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,10,0)\n+\n+#define bpf_get_numa_node_id\t__builtin_bpf_helper_get_numa_node_id\n+#define bpf_skb_change_head\t__builtin_bpf_helper_skb_change_head\n+#define bpf_xdp_adjust_head\t__builtin_bpf_helper_xdp_adjust_head\n+\n+#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,11,0)\n+\n+#define bpf_probe_read_str\t__builtin_bpf_helper_probe_read_str\n+\n+#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,12,0)\n+\n+#define bpf_get_socket_cookie\t__builtin_bpf_helper_get_socket_cookie\n+#define bpf_get_socket_uid\t__builtin_bpf_helper_get_socket_uid\n+\n+#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,13,0)\n+\n+#define bpf_set_hash\t\t__builtin_bpf_helper_set_hash\n+#define bpf_setsockopt\t\t__builtin_bpf_helper_setsockopt\n+#define bpf_skb_adjust_room\t__builtin_bpf_helper_skb_adjust_room\n+\n+#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,14,0)\n+\n+#define bpf_redirect_map\t__builtin_bpf_helper_redirect_map\n+#define bpf_sk_redirect_map\t__builtin_bpf_helper_sk_redirect_map\n+#define bpf_sock_map_update\t__builtin_bpf_helper_sock_map_update\n+\n+#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,15,0)\n+\n+#define bpf_perf_event_read_value __builtin_bpf_helper_perf_event_read_value\n+#define bpf_perf_prog_read_value  __builtin_bpf_helper_perf_prog_read_value\n+#define bpf_getsockopt\t\t  __builtin_bpf_helper_getsockopt\n+#define bpf_xdp_adjust_meta\t__builtin_bpf_helper_xdp_adjust_meta\n+\n+#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,16,0)\n+\n+#define bpf_override_return\t__builtin_bpf_helper_override_return\n+#define bpf_sock_ops_cb_flags_set __builtin_bpf_helper_sock_ops_cb_flags_set\n+\n+#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,17,0)\n+\n+#define bpf_msg_redirect_map\t__builtin_bpf_helper_msg_redirect_map\n+#define bpf_msg_apply_bytes\t__builtin_bpf_helper_msg_apply_bytes\n+#define bpf_msg_cork_bytes\t__builtin_bpf_helper_msg_cork_bytes\n+#define bpf_pull_data\t\t__builtin_bpf_helper_pull_data\n+#define bpf_bind\t\t__builtin_bpf_helper_bpf_bind\n+\n+#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,18,0)\n+\n+#define bpf_xdp_adjust_tail\t__builtin_bpf_helper_xdp_adjust_tail\n+#define bpf_skb_get_xfrm_state\t__builtin_bpf_helper_skb_get_xfrm_state\n+#define bpf_get_stack\t\t__builtin_bpf_helper_get_stack\n+#define bpf_skb_load_bytes_relative __builtin_bpf_helper_skb_load_bytes_relative\n+#define bpf_sock_hash_update\t__builtin_bpf_helper_sock_hash_update\n+#define bpf_msg_redirect_hash\t__builtin_bpf_helper_msg_redirect_hash\n+#define bpf_sk_redirect_hash\t__builtin_bpf_helper_sk_redirect_hash\n+#define bpf_lwt_push_encap\t\t__builtin_bpf_helper_lwt_push_encap\n+#define bpf_lwt_seg6_store_bytes\t__builtin_bpf_helper_lwt_seg6_store_bytes\n+#define bpf_lwt_seg6_adjust_srh\t\t__builtin_bpf_helper_lwt_seg6_adjust_srh\n+#define bpf_lwt_seg6_action\t\t__builtin_bpf_helper_lwt_seg6_action\n+#define bpf_rc_repeat\t\t\t__builtin_bpf_helper_rc_repeat\n+#define bpf_rc_keydown\t\t\t__builtin_bpf_helper_rc_keydown\n+#define bpf_skb_cgroup_id\t\t__builtin_bpf_helper_skb_cgroup_id\n+#define bpf_get_current_cgroup_id\t__builtin_bpf_helper_get_current_cgroup_id\n+\n+static inline int\n+bpf_fib_lookup (void *ctx, struct bpf_fib_lookup *param, int plen,\n+\t\tunsigned int flags)\n+{\n+  return __builtin_bpf_helper_fib_lookup (ctx, (void *) param, plen, flags);\n+}\n+\n+\n+#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,19,0)\n+\n+#define bpf_get_local_storage\t__builtin_bpf_helper_get_local_storage\n+#define bpf_sk_select_reuseport\t__builtin_bpf_helper_sk_select_reuseport\n+#define bpf_skb_ancestor_cgroup_id\t__builtin_bpf_helper_skb_ancestor_cgroup_id\n+\n+#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (4,20,0)\n+\n+#define bpf_sk_release\t\t__builtin_bpf_helper_sk_release\n+#define bpf_map_push_elem\t__builtin_bpf_helper_map_push_elem\n+#define bpf_map_pop_elem\t__builtin_bpf_helper_map_pop_elem\n+#define bpf_map_peek_elem\t__builtin_bpf_helper_map_peek_elem\n+#define bpf_msg_push_data\t__builtin_bpf_helper_msg_push_data\n+\n+static inline struct bpf_sock *\n+bpf_sk_lookup_tcp (void *ctx, struct bpf_sock_tuple *tuple,\n+\t\t   int size, unsigned long long netns_id,\n+\t\t   unsigned long long flags)\n+{\n+  return\n+    (struct bpf_sock *) __builtin_bpf_helper_sk_lookup_tcp (ctx,\n+\t\t\t\t\t\t\t    (void *) tuple,\n+\t\t\t\t\t\t\t    size,\n+\t\t\t\t\t\t\t    netns_id, flags);\n+}\n+\n+static inline struct bpf_sock *\n+bpf_sk_lookup_udp (void *ctx, struct bpf_sock_tuple *tuple,\n+\t\t   int size, unsigned long long netns_id,\n+\t\t   unsigned long long flags)\n+{\n+  return\n+    (struct bpf_sock *) __builtin_bpf_helper_sk_lookup_udp (ctx,\n+\t\t\t\t\t\t\t    (void *) tuple,\n+\t\t\t\t\t\t\t    size,\n+\t\t\t\t\t\t\t    netns_id, flags);\n+}\n+\n+#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (5,0,0)\n+\n+#define bpf_msg_pop_data\t__builtin_bpf_helper_pop_data\n+#define bpf_rc_pointer_rel\t__builtin_bpf_helper_rc_pointer_rel\n+\n+#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (5,1,0)\n+\n+#define bpf_spin_lock\t\t__builtin_bpf_helper_spin_lock\n+#define bpf_spin_unlock\t\t__builtin_bpf_helper_spin_unlock\n+#define bpf_skb_ecn_set_ce\t__builtin_bpf_helper_skb_ecn_set_ce\n+\n+static inline struct bpf_sock *\n+bpf_sk_fullsock (struct bpf_sock *sk)\n+{\n+  return\n+    (struct bpf_sock *) __builtin_bpf_helper_sk_fullsock ((void *) sk);\n+}\n+\n+static inline struct bpf_sock *\n+bpf_tcp_sock (struct bpf_sock *sk)\n+{\n+  return\n+    (struct bpf_sock *) __builtin_bpf_helper_tcp_sock ((void *) sk);\n+}\n+\n+static inline struct bpf_sock *\n+bpf_get_listener_sock (struct bpf_sock *sk)\n+{\n+  return\n+    (struct bpf_sock *) __builtin_bpf_helper_get_listener_sock ((void *) sk);\n+}\n+\n+#if __BPF_KERNEL_VERSION_CODE__ >= KERNEL_VERSION (5,2,0)\n+\n+\n+#endif /* 5.2 */\n+#endif /* 5.1 */\n+#endif /* 5.0 */\n+#endif /* 4.20 */\n+#endif /* 4.19 */\n+#endif /* 4.18 */\n+#endif /* 4.17 */\n+#endif /* 4.16 */\n+#endif /* 4.15 */\n+#endif /* 4.14 */\n+#endif /* 4.13 */\n+#endif /* 4.12 */\n+#endif /* 4.11 */\n+#endif /* 4.10 */\n+#endif /* 4.9 */\n+#endif /* 4.8 */\n+#endif /* 4.6 */\n+#endif /* 4.5 */\n+#endif /* 4.4 */\n+#endif /* 4.3 */\n+#endif /* 4.2 */\n+#endif /* 4.1 */\n+#endif /* 4.0 */\n+\n+/* Functions to emit BPF_LD_ABS and BPF_LD_IND instructions.  We\n+   provide the \"standard\" names as synonyms of the corresponding GCC\n+   builtins.  Note how the SKB argument is ignored.  */\n+\n+static inline long long\n+load_byte (void *skb __attribute__ ((unused)),\n+\t   unsigned long long off)\n+{\n+  return __builtin_bpf_load_byte (off);\n+}\n+\n+static inline long long\n+load_half (void *skb __attribute__ ((unused)),\n+\t   unsigned long long off)\n+{\n+  return __builtin_bpf_load_half (off);\n+}\n+\n+static inline long long\n+load_word (void *skb __attribute__ ((unused)),\n+\t   unsigned long long off)\n+{\n+  return __builtin_bpf_load_word (off);\n+}\n+\n+struct bpf_map_def\n+{\n+  unsigned int type;\n+  unsigned int key_size;\n+  unsigned int value_size;\n+  unsigned int max_entries;\n+  unsigned int map_flags;\n+  unsigned int inner_map_idx;\n+  unsigned int numa_node;\n+};\n+\n+#endif /* ! __BPF_HELPERS_H */"}, {"sha": "9f210a19c4a1e5b412ca6e3b8336d45b8f51d7fa", "filename": "gcc/config/bpf/bpf-opts.h", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Fconfig%2Fbpf%2Fbpf-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Fconfig%2Fbpf%2Fbpf-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbpf%2Fbpf-opts.h?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,56 @@\n+/* Definitions for option handling for eBPF.\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef BPF_OPTS_H\n+#define BPF_OPTS_H\n+\n+/* Supported versions of the Linux kernel.  */\n+enum bpf_kernel_version\n+{\n+  /* Linux 4.x */\n+  LINUX_V4_0,\n+  LINUX_V4_1,\n+  LINUX_V4_2,\n+  LINUX_V4_3,\n+  LINUX_V4_4,\n+  LINUX_V4_5,\n+  LINUX_V4_6,\n+  LINUX_V4_7,\n+  LINUX_V4_8,\n+  LINUX_V4_9,\n+  LINUX_V4_10,\n+  LINUX_V4_11,\n+  LINUX_V4_12,\n+  LINUX_V4_13,\n+  LINUX_V4_14,\n+  LINUX_V4_15,\n+  LINUX_V4_16,\n+  LINUX_V4_17,\n+  LINUX_V4_18,\n+  LINUX_V4_19,\n+  LINUX_V4_20,\n+  /* Linux 5.x  */\n+  LINUX_V5_0,\n+  LINUX_V5_1,\n+  LINUX_V5_2,\n+  LINUX_LATEST = LINUX_V5_2,\n+  LINUX_NATIVE,\n+};\n+\n+#endif /* ! BPF_OPTS_H */"}, {"sha": "3a835f4f12e2fa17f22fbf5cfce66877379fe007", "filename": "gcc/config/bpf/bpf-protos.h", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Fconfig%2Fbpf%2Fbpf-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Fconfig%2Fbpf%2Fbpf-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbpf%2Fbpf-protos.h?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,33 @@\n+/* Definition of eBPF target for GNU compiler.\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_BPF_PROTOS_H\n+#define GCC_BPF_PROTOS_H\n+\n+/* Routines implemented in bpf.c.  */\n+\n+extern HOST_WIDE_INT bpf_initial_elimination_offset (int, int);\n+extern const char *bpf_output_call (rtx);\n+extern void bpf_target_macros (cpp_reader *);\n+extern void bpf_print_operand (FILE *, rtx, int);\n+extern void bpf_print_operand_address (FILE *, rtx);\n+extern void bpf_expand_prologue (void);\n+extern void bpf_expand_epilogue (void);\n+\n+#endif /* ! GCC_BPF_PROTOS_H */"}, {"sha": "8b2a59273fe0cde08e10b2eefcc068ec73d17e74", "filename": "gcc/config/bpf/bpf.c", "status": "added", "additions": 948, "deletions": 0, "changes": 948, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Fconfig%2Fbpf%2Fbpf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Fconfig%2Fbpf%2Fbpf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbpf%2Fbpf.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,948 @@\n+/* Subroutines used for code generation for eBPF.\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#define IN_TARGET_CODE 1\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"rtl.h\"\n+#include \"regs.h\"\n+#include \"insn-config.h\"\n+#include \"insn-attr.h\"\n+#include \"recog.h\"\n+#include \"output.h\"\n+#include \"alias.h\"\n+#include \"tree.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n+#include \"varasm.h\"\n+#include \"stor-layout.h\"\n+#include \"calls.h\"\n+#include \"function.h\"\n+#include \"explow.h\"\n+#include \"memmodel.h\"\n+#include \"emit-rtl.h\"\n+#include \"reload.h\"\n+#include \"tm_p.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n+#include \"basic-block.h\"\n+#include \"expr.h\"\n+#include \"optabs.h\"\n+#include \"bitmap.h\"\n+#include \"df.h\"\n+#include \"c-family/c-common.h\"\n+#include \"diagnostic.h\"\n+#include \"builtins.h\"\n+#include \"predict.h\"\n+#include \"langhooks.h\"\n+\n+/* Per-function machine data.  */\n+struct GTY(()) machine_function\n+{\n+  /* Number of bytes saved on the stack for local variables.  */\n+  int local_vars_size;\n+\n+  /* Number of bytes saved on the stack for callee-saved\n+     registers.  */\n+  int callee_saved_reg_size;\n+};\n+\n+/* Data structures for the eBPF specific built-ins.  */\n+\n+/* Maximum number of arguments taken by a builtin function, plus\n+   one.  */\n+#define BPF_BUILTIN_MAX_ARGS 5\n+\n+enum bpf_builtins\n+{\n+  BPF_BUILTIN_UNUSED = 0,\n+  /* Built-ins for kernel helpers.  */\n+#define DEF_HELPER(V,D,N,T) BPF_BUILTIN_HELPER_##D,\n+#  include \"bpf-helpers.def\"\n+#undef DEF_HELPER\n+  BPF_BUILTIN_HELPER_MAX,\n+  /* Built-ins for non-generic loads and stores.  */\n+  BPF_BUILTIN_LOAD_BYTE = BPF_BUILTIN_HELPER_MAX,\n+  BPF_BUILTIN_LOAD_HALF,\n+  BPF_BUILTIN_LOAD_WORD,\n+  BPF_BUILTIN_MAX,\n+};\n+\n+/* This table is indexed by an enum bpf_builtin.  */\n+static const char *bpf_helper_names[] =\n+{\n+  NULL,\n+#define DEF_HELPER(V,D,N,T) #N,\n+#  include \"bpf-helpers.def\"\n+#undef DEF_HELPER\n+  NULL,\n+  NULL,\n+  NULL,\n+  NULL\n+};\n+\n+/* Return the builtin code corresponding to the kernel helper builtin\n+   __builtin_NAME, or 0 if the name doesn't correspond to a kernel\n+   helper builtin.  */\n+\n+static inline int\n+bpf_helper_code (const char *name)\n+{\n+  int i;\n+\n+  for (i = 1; i < BPF_BUILTIN_HELPER_MAX; ++i)\n+    if (strcmp (name, bpf_helper_names[i]) == 0)\n+      return i;\n+\n+  return 0;\n+}\n+\n+static GTY (()) tree bpf_builtins[(int) BPF_BUILTIN_MAX];\n+\n+/* Initialize the per-function machine status.  */\n+\n+static struct machine_function *\n+bpf_init_machine_status (void)\n+{\n+  /* Note this initializes all fields to 0, which is just OK for\n+     us.  */\n+  return ggc_cleared_alloc<machine_function> ();\n+}\n+\n+/* Override options and do some other initialization.  */\n+\n+static void\n+bpf_option_override (void)\n+{\n+  /* Set the initializer for the per-function status structure.  */\n+  init_machine_status = bpf_init_machine_status;\n+}\n+\n+#undef TARGET_OPTION_OVERRIDE\n+#define TARGET_OPTION_OVERRIDE bpf_option_override\n+\n+/* Define target-specific CPP macros.  This function in used in the\n+   definition of TARGET_CPU_CPP_BUILTINS in bpf.h */\n+\n+#define builtin_define(TXT) cpp_define (pfile, TXT)\n+\n+void\n+bpf_target_macros (cpp_reader *pfile)\n+{\n+  builtin_define (\"__BPF__\");\n+  \n+  if (TARGET_BIG_ENDIAN)\n+    builtin_define (\"__BPF_BIG_ENDIAN__\");\n+  else\n+    builtin_define (\"__BPF_LITTLE_ENDIAN__\");\n+\n+  /* Define BPF_KERNEL_VERSION_CODE */\n+  {\n+    const char *version_code;\n+    char *kernel_version_code;\n+\n+    switch (bpf_kernel)\n+      {\n+      case LINUX_V4_0: version_code = \"0x40000\"; break;\n+      case LINUX_V4_1: version_code = \"0x40100\"; break;\n+      case LINUX_V4_2: version_code = \"0x40200\"; break;\n+      case LINUX_V4_3: version_code = \"0x40300\"; break;\n+      case LINUX_V4_4: version_code = \"0x40400\"; break;\n+      case LINUX_V4_5: version_code = \"0x40500\"; break;\n+      case LINUX_V4_6: version_code = \"0x40600\"; break;\n+      case LINUX_V4_7: version_code = \"0x40700\"; break;\n+      case LINUX_V4_8: version_code = \"0x40800\"; break;\n+      case LINUX_V4_9: version_code = \"0x40900\"; break;\n+      case LINUX_V4_10: version_code = \"0x40a00\"; break;\n+      case LINUX_V4_11: version_code = \"0x40b00\"; break;\n+      case LINUX_V4_12: version_code = \"0x40c00\"; break;\n+      case LINUX_V4_13: version_code = \"0x40d00\"; break;\n+      case LINUX_V4_14: version_code = \"0x40e00\"; break;\n+      case LINUX_V4_15: version_code = \"0x40f00\"; break;\n+      case LINUX_V4_16: version_code = \"0x41000\"; break;\n+      case LINUX_V4_17: version_code = \"0x42000\"; break;\n+      case LINUX_V4_18: version_code = \"0x43000\"; break;\n+      case LINUX_V4_19: version_code = \"0x44000\"; break;\n+      case LINUX_V4_20: version_code = \"0x45000\"; break;\n+      case LINUX_V5_0: version_code = \"0x50000\"; break;\n+      case LINUX_V5_1: version_code = \"0x50100\"; break;\n+      case LINUX_V5_2: version_code = \"0x50200\"; break;\n+      default:\n+\tgcc_unreachable ();      \n+      }\n+\n+    kernel_version_code = ACONCAT ((\"__BPF_KERNEL_VERSION_CODE__=\",\n+\t\t\t\t    version_code, NULL));\n+    builtin_define (kernel_version_code);\n+  }\n+}\n+\n+/* Output assembly directives to switch to section NAME.  The section\n+   should have attributes as specified by FLAGS, which is a bit mask\n+   of the 'SECTION_*' flags defined in 'output.h'.  If DECL is\n+   non-NULL, it is the 'VAR_DECL' or 'FUNCTION_DECL' with which this\n+   section is associated.  */\n+\n+static void\n+bpf_asm_named_section (const char *name,\n+\t\t       unsigned int flags ATTRIBUTE_UNUSED,\n+\t\t       tree decl ATTRIBUTE_UNUSED)\n+{\n+  fprintf (asm_out_file, \"\\t.section\\t%s\\n\", name);\n+}\n+\n+#undef TARGET_ASM_NAMED_SECTION\n+#define TARGET_ASM_NAMED_SECTION bpf_asm_named_section\n+\n+/* Return an RTX representing the place where a function returns or\n+   receives a value of data type RET_TYPE, a tree node representing a\n+   data type.  */\n+\n+static rtx\n+bpf_function_value (const_tree ret_type,\n+\t\t    const_tree fntype_or_decl,\n+\t\t    bool outgoing ATTRIBUTE_UNUSED)\n+{\n+  enum machine_mode mode;\n+  int unsignedp;\n+\n+  mode = TYPE_MODE (ret_type);\n+  if (INTEGRAL_TYPE_P (ret_type))\n+    mode = promote_function_mode (ret_type, mode, &unsignedp,\n+\t\t\t\t  fntype_or_decl, 1);\n+\n+  return gen_rtx_REG (mode, BPF_R0);\n+}\n+\n+#undef TARGET_FUNCTION_VALUE\n+#define TARGET_FUNCTION_VALUE bpf_function_value\n+\n+/* Return true if REGNO is the number of a hard register in which the\n+   values of called function may come back.  */\n+\n+static bool\n+bpf_function_value_regno_p (const unsigned int regno)\n+{\n+  return (regno == BPF_R0);\n+}\n+\n+#undef TARGET_FUNCTION_VALUE_REGNO_P\n+#define TARGET_FUNCTION_VALUE_REGNO_P bpf_function_value_regno_p\n+\n+/* Compute the size of the function's stack frame, including the local\n+   area and the register-save area.  */\n+\n+static void\n+bpf_compute_frame_layout (void)\n+{\n+  int stack_alignment = STACK_BOUNDARY / BITS_PER_UNIT;\n+  int padding_locals, regno;\n+\n+  /* Set the space used in the stack by local variables.  This is\n+     rounded up to respect the minimum stack alignment.  */\n+  cfun->machine->local_vars_size = get_frame_size ();\n+\n+  padding_locals = cfun->machine->local_vars_size % stack_alignment;\n+  if (padding_locals)\n+    padding_locals = stack_alignment - padding_locals;\n+\n+  cfun->machine->local_vars_size += padding_locals;\n+\n+  /* Set the space used in the stack by callee-saved used registers in\n+     the current function.  There is no need to round up, since the\n+     registers are all 8 bytes wide.  */\n+  for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n+    if ((!fixed_regs[regno]\n+\t && df_regs_ever_live_p (regno)\n+\t && !call_used_regs[regno])\n+\t|| (cfun->calls_alloca\n+\t    && regno == STACK_POINTER_REGNUM))\n+      cfun->machine->callee_saved_reg_size += 8;\n+\n+  /* Check that the total size of the frame doesn't exceed the limit\n+     imposed by eBPF.  */\n+  if ((cfun->machine->local_vars_size\n+       + cfun->machine->callee_saved_reg_size) > bpf_frame_limit)\n+    {\n+      static int stack_limit_exceeded = 0;\n+\n+      if (!stack_limit_exceeded)\n+\terror (\"eBPF stack limit exceeded\");\n+      stack_limit_exceeded = 1;\n+    }\n+}\n+\n+#undef TARGET_COMPUTE_FRAME_LAYOUT\n+#define TARGET_COMPUTE_FRAME_LAYOUT bpf_compute_frame_layout\n+\n+/* Expand to the instructions in a function prologue.  This function\n+   is called when expanding the 'prologue' pattern in bpf.md.  */\n+\n+void\n+bpf_expand_prologue (void)\n+{\n+  int regno, fp_offset;\n+  rtx insn;\n+  HOST_WIDE_INT size;\n+\n+  size = (cfun->machine->local_vars_size\n+\t  + cfun->machine->callee_saved_reg_size);\n+  fp_offset = -cfun->machine->local_vars_size;\n+\n+  /* Save callee-saved hard registes.  The register-save-area starts\n+     right after the local variables.  */\n+  for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n+    {\n+      if ((!fixed_regs[regno]\n+\t   && df_regs_ever_live_p (regno)\n+\t   && !call_used_regs[regno])\n+\t  || (cfun->calls_alloca\n+\t      && regno == STACK_POINTER_REGNUM))\n+\t{\n+\t  rtx mem;\n+\n+\t  if (!IN_RANGE (fp_offset, -1 - 0x7fff, 0x7fff))\n+\t    /* This has been already reported as an error in\n+\t       bpf_compute_frame_layout. */\n+\t    break;\n+\t  else\n+\t    {\n+\t      mem = gen_frame_mem (DImode,\n+\t\t\t\t   plus_constant (DImode,\n+\t\t\t\t\t\t  hard_frame_pointer_rtx,\n+\t\t\t\t\t\t  fp_offset - 8));\n+\t      insn = emit_move_insn (mem, gen_rtx_REG (DImode, regno));\n+\t      RTX_FRAME_RELATED_P (insn) = 1;\n+\t      fp_offset -= 8;\n+\t    }\n+\t}\n+    }\n+\n+  /* Set the stack pointer, if the function allocates space\n+     dynamically.  Note that the value of %sp should be directly\n+     derived from %fp, for the kernel verifier to track it as a stack\n+     accessor.  */\n+  if (cfun->calls_alloca)\n+    {\n+      insn = emit_move_insn (stack_pointer_rtx,\n+\t\t\t     hard_frame_pointer_rtx);\n+      RTX_FRAME_RELATED_P (insn) = 1;\n+      \n+      if (size > 0)\n+\t{\n+\t  insn = emit_insn (gen_rtx_SET (stack_pointer_rtx,\n+\t\t\t\t\t gen_rtx_PLUS (Pmode,\n+\t\t\t\t\t\t       stack_pointer_rtx,\n+\t\t\t\t\t\t       GEN_INT (-size))));\n+\t  RTX_FRAME_RELATED_P (insn) = 1;\n+\t}\n+    }\n+}\n+\n+/* Expand to the instructions in a function epilogue.  This function\n+   is called when expanding the 'epilogue' pattern in bpf.md.  */\n+\n+void\n+bpf_expand_epilogue (void)\n+{\n+  int regno, fp_offset;\n+  rtx insn;\n+\n+  fp_offset = -cfun->machine->local_vars_size;\n+\n+  /* Restore callee-saved hard registes from the stack.  */\n+  for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n+    {\n+      if ((!fixed_regs[regno]\n+\t   && df_regs_ever_live_p (regno)\n+\t   && !call_used_regs[regno])\n+\t  || (cfun->calls_alloca\n+\t      && regno == STACK_POINTER_REGNUM))\n+\t{\n+\t  rtx mem;\n+\n+\t  if (!IN_RANGE (fp_offset, -1 - 0x7fff, 0x7fff))\n+\t    /* This has been already reported as an error in\n+\t       bpf_compute_frame_layout. */\n+\t    break;\n+\t  else\n+\t    {\n+\t      mem = gen_frame_mem (DImode,\n+\t\t\t\t   plus_constant (DImode,\n+\t\t\t\t\t\t  hard_frame_pointer_rtx,\n+\t\t\t\t\t\t  fp_offset - 8));\n+\t      insn = emit_move_insn (gen_rtx_REG (DImode, regno), mem);\n+\t      RTX_FRAME_RELATED_P (insn) = 1;\n+\t      fp_offset -= 8;\n+\t    }\n+\t}\n+    }\n+\n+  emit_jump_insn (gen_exit ());\n+}\n+\n+/* Return the initial difference between the specified pair of\n+   registers.  The registers that can figure in FROM, and TO, are\n+   specified by ELIMINABLE_REGS in bpf.h.\n+\n+   This function is used in the definition of\n+   INITIAL_ELIMINATION_OFFSET in bpf.h  */\n+\n+HOST_WIDE_INT\n+bpf_initial_elimination_offset (int from, int to)\n+{\n+  HOST_WIDE_INT ret;\n+\n+  if (from == ARG_POINTER_REGNUM && to == STACK_POINTER_REGNUM)\n+    ret = (cfun->machine->local_vars_size\n+\t   + cfun->machine->callee_saved_reg_size);\n+  else if (from == ARG_POINTER_REGNUM && to == FRAME_POINTER_REGNUM)\n+    ret = 0;\n+  else\n+    gcc_unreachable ();\n+\n+  return ret;\n+}\n+\n+/* Return the number of consecutive hard registers, starting at\n+   register number REGNO, required to hold a value of mode MODE.  */\n+\n+static unsigned int\n+bpf_hard_regno_nregs (unsigned int regno ATTRIBUTE_UNUSED,\n+\t\t      enum machine_mode mode)\n+{\n+  return CEIL (GET_MODE_SIZE (mode), UNITS_PER_WORD);\n+}\n+\n+#undef TARGET_HARD_REGNO_NREGS\n+#define TARGET_HARD_REGNO_NREGS bpf_hard_regno_nregs\n+\n+/* Return true if it is permissible to store a value of mode MODE in\n+   hard register number REGNO, or in several registers starting with\n+   that one.  */\n+\n+static bool\n+bpf_hard_regno_mode_ok (unsigned int regno ATTRIBUTE_UNUSED,\n+\t\t\tenum machine_mode mode)\n+{\n+  switch (mode)\n+    {\n+    case E_SImode:\n+    case E_DImode:\n+    case E_HImode:\n+    case E_QImode:\n+    case E_TImode:\n+    case E_SFmode:\n+    case E_DFmode:\n+      return true;\n+    default:\n+      return false;\n+    }\n+}\n+\n+#undef TARGET_HARD_REGNO_MODE_OK\n+#define TARGET_HARD_REGNO_MODE_OK bpf_hard_regno_mode_ok\n+\n+/* Return true if a function must have and use a frame pointer.  */\n+\n+static bool\n+bpf_frame_pointer_required (void)\n+{\n+  /* We do not have a stack pointer, so we absolutely depend on the\n+     frame-pointer in order to access the stack... and fishes walk and\n+     pigs fly glglgl */\n+  return true;\n+}\n+\n+#undef TARGET_FRAME_POINTER_REQUIRED\n+#define TARGET_FRAME_POINTER_REQUIRED bpf_frame_pointer_required\n+\n+/* Return `true' if the given RTX X is a valid base for an indirect\n+   memory access.  STRICT has the same meaning than in\n+   bpf_legitimate_address_p.  */\n+\n+static inline bool\n+bpf_address_base_p (rtx x, bool strict)\n+{\n+  return (GET_CODE (x) == REG\n+\t  && (REGNO (x) < 11\n+\t      || (!strict && REGNO (x) >= FIRST_PSEUDO_REGISTER)));\n+}\n+\n+/* Return true if X (a RTX) is a legitimate memory address on the\n+   target machine for a memory operand of mode MODE.  */\n+\n+static bool\n+bpf_legitimate_address_p (machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\t  rtx x,\n+\t\t\t  bool strict)\n+{\n+  switch (GET_CODE (x))\n+    {\n+    case REG:\n+      return bpf_address_base_p (x, strict);\n+\n+    case PLUS:\n+      {\n+\t/* Accept (PLUS ADDR_BASE CONST_INT), provided CONST_INT fits\n+\t   in a signed 16-bit.\n+\n+\t   Note that LABEL_REF and SYMBOL_REF are not allowed in\n+\t   REG+IMM addresses, because it is almost certain they will\n+\t   overload the offset field.  */\n+\n+\trtx x0 = XEXP (x, 0);\n+\trtx x1 = XEXP (x, 1);\n+\t\n+\tif (bpf_address_base_p (x0, strict) && GET_CODE (x1) == CONST_INT)\n+\t  return IN_RANGE (INTVAL (x1), -1 - 0x7fff, 0x7fff);\n+\n+\tbreak;\n+      }\n+    default:\n+      break;\n+    }\n+\n+  return false;\n+}\n+\n+#undef TARGET_LEGITIMATE_ADDRESS_P\n+#define TARGET_LEGITIMATE_ADDRESS_P bpf_legitimate_address_p\n+\n+/* Describe the relative costs of RTL expressions.  Return true when\n+   all subexpressions of X have been processed, and false when\n+   `rtx_cost' should recurse.  */\n+\n+static bool\n+bpf_rtx_costs (rtx x ATTRIBUTE_UNUSED,\n+\t       enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t       int outer_code ATTRIBUTE_UNUSED,\n+\t       int opno ATTRIBUTE_UNUSED,\n+               int *total ATTRIBUTE_UNUSED,\n+\t       bool speed ATTRIBUTE_UNUSED)\n+{\n+  /* To be written.  */\n+  return false;\n+}\n+\n+#undef TARGET_RTX_COSTS\n+#define TARGET_RTX_COSTS bpf_rtx_costs\n+\n+/* Return true if an argument at the position indicated by CUM should\n+   be passed by reference.  If the hook returns true, a copy of that\n+   argument is made in memory and a pointer to the argument is passed\n+   instead of the argument itself.  */\n+\n+static bool\n+bpf_pass_by_reference (cumulative_args_t cum ATTRIBUTE_UNUSED,\n+\t\t       const function_arg_info &arg)\n+{\n+  unsigned num_bytes = arg.type_size_in_bytes ();\n+\n+  /* Pass aggregates and values bigger than 5 words by reference.\n+     Everything else is passed by copy.  */\n+  return (arg.aggregate_type_p () || (num_bytes > 8*5));\n+}\n+\n+#undef TARGET_PASS_BY_REFERENCE\n+#define TARGET_PASS_BY_REFERENCE bpf_pass_by_reference\n+\n+/* Return a RTX indicating whether a function argument is passed in a\n+   register and if so, which register.  */\n+\n+static rtx\n+bpf_function_arg (cumulative_args_t ca, const function_arg_info &arg)\n+{\n+  CUMULATIVE_ARGS *cum = get_cumulative_args (ca);\n+\n+  if (*cum < 5)\n+    return gen_rtx_REG (arg.mode, *cum + 1);\n+  else\n+    /* An error will be emitted for this in\n+       bpf_function_arg_advance.  */\n+    return NULL_RTX;\n+}\n+\n+#undef TARGET_FUNCTION_ARG\n+#define TARGET_FUNCTION_ARG bpf_function_arg\n+\n+/* Update the summarizer variable pointed by CA to advance past an\n+   argument in the argument list.  */\n+\n+static void\n+bpf_function_arg_advance (cumulative_args_t ca,\n+\t\t\t  const function_arg_info &arg)\n+{\n+  CUMULATIVE_ARGS *cum = get_cumulative_args (ca);\n+  unsigned num_bytes = arg.type_size_in_bytes ();\n+  unsigned num_words = CEIL (num_bytes, UNITS_PER_WORD);\n+\n+  if (*cum <= 5 && *cum + num_words > 5)\n+    error (\"too many function arguments for eBPF\");\n+\n+  *cum += num_words;\n+}\n+\n+#undef TARGET_FUNCTION_ARG_ADVANCE\n+#define TARGET_FUNCTION_ARG_ADVANCE bpf_function_arg_advance\n+\n+/* Output the assembly code for a constructor.  Since eBPF doesn't\n+   support indirect calls, constructors are not supported.  */\n+\n+static void\n+bpf_output_constructor (rtx symbol, int priority ATTRIBUTE_UNUSED)\n+{\n+  tree decl = SYMBOL_REF_DECL (symbol);\n+\n+  if (decl)\n+    sorry_at (DECL_SOURCE_LOCATION (decl),\n+\t      \"no constructors\");\n+  else\n+    sorry (\"no constructors\");\n+}\n+\n+#undef TARGET_ASM_CONSTRUCTOR\n+#define TARGET_ASM_CONSTRUCTOR bpf_output_constructor\n+\n+/* Output the assembly code for a destructor.  Since eBPF doesn't\n+   support indirect calls, destructors are not supported.  */\n+\n+static void\n+bpf_output_destructor (rtx symbol, int priority ATTRIBUTE_UNUSED)\n+{\n+  tree decl = SYMBOL_REF_DECL (symbol);\n+\n+  if (decl)\n+    sorry_at (DECL_SOURCE_LOCATION (decl),\n+\t      \"no destructors\");\n+  else\n+    sorry (\"no destructors\");\n+}\n+\n+#undef TARGET_ASM_DESTRUCTOR\n+#define TARGET_ASM_DESTRUCTOR bpf_output_destructor\n+\n+/* Return the appropriate instruction to CALL to a function.  TARGET\n+   is an RTX denoting the address of the called function.\n+\n+   The main purposes of this function are:\n+   - To reject indirect CALL instructions, which are not supported by\n+     eBPF.\n+   - To recognize calls to kernel helper functions and emit the\n+     corresponding CALL N instruction.\n+\n+   This function is called from the expansion of the 'call' pattern in\n+   bpf.md.  */\n+\n+const char *\n+bpf_output_call (rtx target)\n+{\n+  rtx xops[1];\n+\n+  switch (GET_CODE (target))\n+    {\n+    case CONST_INT:\n+      output_asm_insn (\"call\\t%0\", &target);\n+      break;\n+    case SYMBOL_REF:\n+      {\n+\tconst char *function_name = XSTR (target, 0);\n+\tint code;\n+      \n+\tif (strncmp (function_name, \"__builtin_bpf_helper_\", 21) == 0\n+\t    && ((code = bpf_helper_code (function_name + 21)) != 0))\n+\t  {\n+\t    xops[0] = GEN_INT (code);\n+\t    output_asm_insn (\"call\\t%0\", xops);\n+\t  }\n+\telse\n+\t  output_asm_insn (\"call\\t%0\", &target);\n+\n+\tbreak;\n+      }\n+    default:\n+      error (\"indirect call in function, which are not supported by eBPF\");\n+      output_asm_insn (\"call 0\", NULL);\n+      break;\n+    }\n+\n+  return \"\";\n+}\n+\n+/* Print an instruction operand.  This function is called in the macro\n+   PRINT_OPERAND defined in bpf.h */\n+\n+void\n+bpf_print_operand (FILE *file, rtx op, int code ATTRIBUTE_UNUSED)\n+{\n+  switch (GET_CODE (op))\n+    {\n+    case REG:\n+      fprintf (file, \"%s\", reg_names[REGNO (op)]);\n+      break;\n+    case MEM:\n+      output_address (GET_MODE (op), XEXP (op, 0));\n+      break;\n+    case CONST_DOUBLE:\n+      if (CONST_DOUBLE_HIGH (op))\n+\tfprintf (file, HOST_WIDE_INT_PRINT_DOUBLE_HEX,\n+\t\t CONST_DOUBLE_HIGH (op), CONST_DOUBLE_LOW (op));\n+      else if (CONST_DOUBLE_LOW (op) < 0)\n+\tfprintf (file, HOST_WIDE_INT_PRINT_HEX, CONST_DOUBLE_LOW (op));\n+      else\n+\tfprintf (file, HOST_WIDE_INT_PRINT_DEC, CONST_DOUBLE_LOW (op));\n+      break;\n+    default:\n+      output_addr_const (file, op);\n+    }\n+}\n+\n+/* Print an operand which is an address.  This function should handle\n+   any legit address, as accepted by bpf_legitimate_address_p, and\n+   also addresses that are valid in CALL instructions.\n+\n+   This function is called in the PRINT_OPERAND_ADDRESS macro defined\n+   in bpf.h */\n+\n+void\n+bpf_print_operand_address (FILE *file, rtx addr)\n+{\n+  switch (GET_CODE (addr))\n+    {\n+    case REG:\n+      fprintf (file, \"[%s+0]\", reg_names[REGNO (addr)]);\n+      break;\n+    case PLUS:\n+      {\n+\trtx op0 = XEXP (addr, 0);\n+\trtx op1 = XEXP (addr, 1);\n+\n+\tif (GET_CODE (op0) == REG && GET_CODE (op1) == CONST_INT)\n+\t  {\n+\t    fprintf (file, \"[%s+\", reg_names[REGNO (op0)]);\n+\t    output_addr_const (file, op1);\n+\t    fputs (\"]\", file);\n+\t  }\n+\telse\n+\t  fatal_insn (\"invalid address in operand\", addr);\n+\tbreak;\n+      }\n+    case MEM:\n+      /* Fallthrough.  */\n+    case LABEL_REF:\n+      /* Fallthrough.  */\n+      fatal_insn (\"unsupported operand\", addr);\n+      break;\n+    default:\n+      output_addr_const (file, addr);\n+      break;\n+    }\n+}\n+\n+/* Add a BPF builtin function with NAME, CODE and TYPE.  Return\n+   the function decl or NULL_TREE if the builtin was not added.  */\n+\n+static tree\n+def_builtin (const char *name, enum bpf_builtins code, tree type)\n+{\n+  tree t\n+    = add_builtin_function (name, type, code, BUILT_IN_MD, NULL, NULL_TREE);\n+\n+  bpf_builtins[code] = t;\n+  return t;\n+}\n+\n+/* Define machine-specific built-in functions.  */\n+\n+static void\n+bpf_init_builtins (void)\n+{\n+  /* Built-ins for calling kernel helpers.  */\n+\n+  tree pt = build_pointer_type (void_type_node);\n+  tree const_void_type\n+    = build_qualified_type (void_type_node, TYPE_QUAL_CONST);\n+  tree cpt = build_pointer_type (const_void_type);\n+  tree st = short_integer_type_node;\n+  tree ust = uint16_type_node;\n+  tree it = integer_type_node;\n+  tree ut = unsigned_type_node;\n+  tree const_char_type\n+    = build_qualified_type (char_type_node, TYPE_QUAL_CONST);\n+  tree cst = build_pointer_type (const_char_type);\n+  tree vt = void_type_node;\n+  tree ult = long_unsigned_type_node;\n+  tree u32t = uint32_type_node;\n+  tree u64t = uint64_type_node;\n+  tree llt = long_long_integer_type_node;\n+  tree ullt = long_long_unsigned_type_node;\n+  \n+#define TYPES build_function_type_list\n+#define VTYPES build_varargs_function_type_list\n+#define DEF_HELPER(V,D,N,T)\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      if (bpf_kernel >= (V))\t\t\t\t\\\n+\tdef_builtin (\"__builtin_bpf_helper_\" #N,\t\\\n+\t\t     BPF_BUILTIN_HELPER_##D,\t\t\\\n+\t\t     T);\t\t\t\t\\\n+    } while (0);\n+#  include \"bpf-helpers.def\"\n+#undef TYPES\n+#undef VTYPES\n+#undef DEF_HELPER\n+\n+  /* Built-ins for BPF_LD_ABS and BPF_LD_IND instructions.  */\n+\n+  def_builtin (\"__builtin_bpf_load_byte\", BPF_BUILTIN_LOAD_BYTE,\n+\t       build_function_type_list (ullt, ullt, 0));\n+  def_builtin (\"__builtin_bpf_load_half\", BPF_BUILTIN_LOAD_HALF,\n+\t       build_function_type_list (ullt, ullt, 0));\n+  def_builtin (\"__builtin_bpf_load_word\", BPF_BUILTIN_LOAD_WORD,\n+\t       build_function_type_list (ullt, ullt, 0));\n+}\n+\n+#undef TARGET_INIT_BUILTINS\n+#define TARGET_INIT_BUILTINS bpf_init_builtins\n+\n+/* Expand a call to a BPF-specific built-in function that was set up\n+   with bpf_init_builtins.  */\n+\n+static rtx\n+bpf_expand_builtin (tree exp, rtx target,\n+\t\t    rtx subtarget ATTRIBUTE_UNUSED,\n+\t\t    machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t    int ignore)\n+{\n+  tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n+  int code = DECL_MD_FUNCTION_CODE (fndecl);\n+\n+  if (code >= 1 && code < BPF_BUILTIN_HELPER_MAX)\n+    {\n+      /* This is a builtin to call a kernel helper function.\n+\n+\t For these builtins, we just expand the function call normally\n+\t with expand_call like we would do for a libcall. The function\n+\t bpf_output_call below will then do The Right Thing (TM),\n+\t recognizing the name of the called __builtin_helper_* symbol\n+\t and emitting the corresponding CALL N instruction whenever\n+\t necessary.  */\n+\n+      return expand_call (exp, target, ignore);\n+    }\n+  else if (code == BPF_BUILTIN_LOAD_BYTE\n+\t   || code == BPF_BUILTIN_LOAD_HALF\n+\t   || code == BPF_BUILTIN_LOAD_WORD)\n+    {\n+      /* Expand an indirect load from the sk_buff in the context.\n+\t There is just one argument to the builtin, which is the\n+\t offset.\n+\n+\t We try first to expand a ldabs* instruction.  In case this\n+\t fails, we try a ldind* instruction.  */\n+\n+      enum insn_code abs_icode\n+\t= (code == BPF_BUILTIN_LOAD_BYTE ? CODE_FOR_ldabsb\n+\t   : code == BPF_BUILTIN_LOAD_HALF ? CODE_FOR_ldabsh\n+\t   : CODE_FOR_ldabsw);\n+\n+      enum insn_code ind_icode\n+\t= (code == BPF_BUILTIN_LOAD_BYTE ? CODE_FOR_ldindb\n+\t   : code == BPF_BUILTIN_LOAD_HALF ? CODE_FOR_ldindh\n+\t   : CODE_FOR_ldindw);\n+\n+      tree offset_arg = CALL_EXPR_ARG (exp, 0);\n+      struct expand_operand ops[2];\n+\n+      create_input_operand (&ops[0], expand_normal (offset_arg),\n+\t\t\t    TYPE_MODE (TREE_TYPE (offset_arg)));\n+      create_input_operand (&ops[1], const0_rtx, SImode);\n+\n+      if (!maybe_expand_insn (abs_icode, 2, ops)\n+\t  && !maybe_expand_insn (ind_icode, 2, ops))\n+\t{\n+\t  error (\"invalid argument to built-in function\");\n+\t  return gen_rtx_REG (ops[0].mode, BPF_R0);\n+\t}\n+\n+      /* The result of the load is in R0.  */\n+      return gen_rtx_REG (ops[0].mode, BPF_R0);\n+    }\n+\n+  gcc_unreachable ();\n+}\n+\n+#undef TARGET_EXPAND_BUILTIN\n+#define TARGET_EXPAND_BUILTIN bpf_expand_builtin\n+\n+/* Initialize target-specific function library calls.  This is mainly\n+   used to call library-provided soft-fp operations, since eBPF\n+   doesn't support floating-point in \"hardware\".  */\n+\n+static void\n+bpf_init_libfuncs (void)\n+{\n+  set_conv_libfunc (sext_optab, DFmode, SFmode,\n+\t\t    \"__bpf_extendsfdf2\");\n+  set_conv_libfunc (trunc_optab, SFmode, DFmode,\n+\t\t    \"__bpf_truncdfsf2\");\n+  set_conv_libfunc (sfix_optab, SImode, DFmode,\n+\t\t    \"__bpf_fix_truncdfsi\");\n+  set_conv_libfunc (sfloat_optab, DFmode, SImode,\n+\t\t    \"__bpf_floatsidf\");\n+  set_conv_libfunc (ufloat_optab, DFmode, SImode,\n+\t\t    \"__bpf_floatunsidf\");\n+}\n+\n+#undef TARGET_INIT_LIBFUNCS\n+#define TARGET_INIT_LIBFUNCS bpf_init_libfuncs\n+\n+/* Define the mechanism that will be used for describing frame unwind\n+   information to the debugger.  In eBPF it is not possible to unwind\n+   frames.  */\n+\n+static enum unwind_info_type\n+bpf_debug_unwind_info ()\n+{\n+  return UI_NONE;\n+}\n+\n+#undef TARGET_DEBUG_UNWIND_INFO\n+#define TARGET_DEBUG_UNWIND_INFO bpf_debug_unwind_info\n+\n+/* Output assembly directives to assemble data of various sized and\n+   alignments.  */\n+\n+#undef TARGET_ASM_BYTE_OP\n+#define TARGET_ASM_BYTE_OP \"\\t.byte\\t\"\n+#undef TARGET_ASM_ALIGNED_HI_OP\n+#define TARGET_ASM_ALIGNED_HI_OP \"\\t.half\\t\"\n+#undef TARGET_ASM_ALIGNED_SI_OP\n+#define TARGET_ASM_ALIGNED_SI_OP \"\\t.word\\t\"\n+#undef TARGET_ASM_ALIGNED_DI_OP\n+#define TARGET_ASM_ALIGNED_DI_OP \"\\t.dword\\t\"\n+\n+/* Finally, build the GCC target.  */\n+\n+struct gcc_target targetm = TARGET_INITIALIZER;\n+\n+#include \"gt-bpf.h\""}, {"sha": "70ad818ccf8bcdc251ee842f4cec3c11dc1811a1", "filename": "gcc/config/bpf/bpf.h", "status": "added", "additions": 539, "deletions": 0, "changes": 539, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Fconfig%2Fbpf%2Fbpf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Fconfig%2Fbpf%2Fbpf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbpf%2Fbpf.h?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,539 @@\n+/* Definition of the eBPF target for GCC.\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_BPF_H\n+#define GCC_BPF_H\n+\n+/**** Controlling the Compilation Driver.  */\n+\n+#define ASM_SPEC \"%{mbig-endian:-EB} %{!mbig-endian:-EL}\"\n+#define LINK_SPEC \"%{mbig-endian:-EB} %{!mbig-endian:-EL}\"\n+#define LIB_SPEC \"\"\n+#define STARTFILE_SPEC \"\"\n+\n+/**** Run-time Target Specification.  */\n+\n+#define TARGET_CPU_CPP_BUILTINS() bpf_target_macros (pfile)\n+\n+/**** Storage Layout.  */\n+\n+/* Endianness and word size.  */\n+#define BITS_BIG_ENDIAN 0\n+#define BYTES_BIG_ENDIAN (TARGET_BIG_ENDIAN)\n+#define WORDS_BIG_ENDIAN (TARGET_BIG_ENDIAN)\n+#define BITS_PER_WORD 64\n+#define UNITS_PER_WORD 8\n+\n+/* When storing an integer whose size is less than 64-bit in a\n+   register, promote it to a DImode.  */\n+#define PROMOTE_MODE(M, UNSIGNEDP, TYPE)\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      if (GET_MODE_CLASS (M) == MODE_INT\t\\\n+\t  && GET_MODE_SIZE (M) < 8)\t\t\\\n+\tM = DImode;\t\t\t\t\\\n+    } while (0)\n+\n+/* Biggest alignment supported by the object file format of this\n+   machine.  In this case this is ELF.  Use the same definition than\n+   in elfos.h */\n+#define MAX_OFILE_ALIGNMENT (((unsigned int) 1 << 28) * 8)\n+\n+/* Align argument parameters on the stack to 64-bit, at a minimum.  */\n+#define PARM_BOUNDARY 64\n+\n+/* The hardware enforces that the stack pointer should be aligned to\n+   64-bit at any time.  */\n+#define STACK_BOUNDARY 64\n+\n+/* Function entry points are aligned to 128 bits.  */\n+#define FUNCTION_BOUNDARY 128\n+\n+/* Maximum alignment required by data of any type.  */\n+#define BIGGEST_ALIGNMENT 64\n+\n+/* The best alignment to use in cases where we have a choice.  */\n+#define FASTEST_ALIGNMENT 64\n+\n+/* Use a fast alignment when storing arrays of chars in a local.  */\n+#define LOCAL_ALIGNMENT(TYPE, ALIGN)\t\t\t\t\t\\\n+  (TREE_CODE (TYPE) == ARRAY_TYPE\t\t\t\t\t\\\n+   && TYPE_MODE (TREE_TYPE (TYPE)) == QImode\t\t\t\t\\\n+   && (ALIGN) < FASTEST_ALIGNMENT ? FASTEST_ALIGNMENT : (ALIGN))\n+\n+/* The load and store instructions won't work if the data is not in\n+   it's expected alignment.  */\n+#define STRICT_ALIGNMENT 1\n+\n+/* We use Pmode as the mode of the size increment operand in an\n+   `allocate_stack' pattern.  */\n+#define STACK_SIZE_MODE Pmode\n+\n+/**** Layout of Source Language Data Types.  */\n+\n+#define INT_TYPE_SIZE         32\n+#define SHORT_TYPE_SIZE       16\n+#define LONG_TYPE_SIZE        64\n+#define LONG_LONG_TYPE_SIZE   64\n+#define CHAR_TYPE_SIZE         8\n+#define FLOAT_TYPE_SIZE       32\n+#define DOUBLE_TYPE_SIZE      64\n+#define LONG_DOUBLE_TYPE_SIZE 64\n+\n+#define INTPTR_TYPE\t\"long int\"\n+#define UINTPTR_TYPE\t\"long unsigned int\"\n+#define SIZE_TYPE\t\"long unsigned int\"\n+#define PTRDIFF_TYPE \"long int\"\n+\n+#define SIG_ATOMIC_TYPE \"char\"\n+\n+#define INT8_TYPE \"char\"\n+#define INT16_TYPE \"short int\"\n+#define INT32_TYPE \"int\"\n+#define INT64_TYPE \"long int\"\n+#define UINT8_TYPE \"unsigned char\"\n+#define UINT16_TYPE \"short unsigned int\"\n+#define UINT32_TYPE \"unsigned int\"\n+#define UINT64_TYPE \"long unsigned int\"\n+\n+#define INT_LEAST8_TYPE INT8_TYPE\n+#define INT_LEAST16_TYPE INT16_TYPE\n+#define INT_LEAST32_TYPE INT32_TYPE\n+#define INT_LEAST64_TYPE INT64_TYPE\n+#define UINT_LEAST8_TYPE UINT8_TYPE\n+#define UINT_LEAST16_TYPE UINT16_TYPE\n+#define UINT_LEAST32_TYPE UINT32_TYPE\n+#define UINT_LEAST64_TYPE UINT64_TYPE\n+\n+#define INT_FAST8_TYPE INT8_TYPE\n+#define INT_FAST16_TYPE INT16_TYPE\n+#define INT_FAST32_TYPE INT32_TYPE\n+#define INT_FAST64_TYPE INT64_TYPE\n+#define UINT_FAST8_TYPE UINT8_TYPE\n+#define UINT_FAST16_TYPE UINT16_TYPE\n+#define UINT_FAST32_TYPE UINT32_TYPE\n+#define UINT_FAST64_TYPE UINT64_TYPE\n+\n+/* `char' is signed by default, like in x86.  */\n+#define DEFAULT_SIGNED_CHAR 1\n+\n+/* `wchar_t' is a signed 32-bit type.  The second constant is used by\n+   cpp, which can't use WCHAR_TYPE.  */\n+#define WCHAR_TYPE \"int\"\n+#define WCHAR_TYPE_SIZE 32\n+\n+/* `wint_t' is a signed 32-bit type.  */\n+#define WINT_TYPE \"int\"\n+#define WINT_TYPE_SIZE 32\n+\n+/**** Register Usage.  */\n+\n+/*** Basic Characteristics of Registers.  */\n+\n+#define BPF_R0\t0\n+#define BPF_R1\t1\n+#define BPF_R2\t2\n+#define BPF_R3\t3\n+#define BPF_R4\t4\n+#define BPF_R5\t5\n+#define BPF_R6\t6\n+#define BPF_CTX BPF_R6\n+#define BPF_R7\t7\n+#define BPF_R8\t8\n+#define BPF_R9\t9\n+#define BPF_SP BPF_R9\n+#define BPF_R10\t10\n+#define BPF_FP  BPF_R10\n+/* 11 is not a real eBPF hard register and is eliminated or not used\n+   in the final assembler.  See below.  */\n+\n+#define FIRST_PSEUDO_REGISTER 12\n+\n+/* The registers %r0..%r8 are available for general allocation.\n+   %r9 is the pseudo-stack pointer.\n+   %r10 is the stack frame, which is read-only.\n+   %r11 (__arg__) is a fake register that always gets eliminated.  */\n+#define FIXED_REGISTERS\t\t\t\t\\\n+  {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1}\n+\n+/* %r0..%r5 are clobbered by function calls.  */\n+#define CALL_USED_REGISTERS\t\t\t\t\\\n+  {1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1}\n+\n+/**** Register Classes.  */\n+\n+enum reg_class\n+{\n+  NO_REGS,\t\t/* no registers in set.  */\n+  ALL_REGS,\t\t/* all registers.  */\n+  LIM_REG_CLASSES\t/* max value + 1.  */\n+};\n+\n+#define N_REG_CLASSES (int) LIM_REG_CLASSES\n+#define GENERAL_REGS ALL_REGS\n+\n+/* An initializer containing the names of the register classes as C\n+   string constants.  These names are used in writing some of the\n+   debugging dumps.  */\n+#define REG_CLASS_NAMES\t\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  \"NO_REGS\",\t\t\t\t\t\\\n+  \"ALL_REGS\"\t\t\t\t\t\\\n+}\n+\n+/* An initializer containing the contents of the register classes, as\n+   integers which are bit masks.  The Nth integer specifies the\n+   contents of class N.  The way the integer MASK is interpreted is\n+   that register R is in the class if `MASK & (1 << R)' is 1.\n+\n+   In eBPF all the hard registers are considered general-purpose\n+   integer registers.  */\n+#define REG_CLASS_CONTENTS\t\t\t\\\n+{\t\t\t\t\t\t\\\n+   0x00000000, /* NO_REGS */\t\t\t\\\n+   0x00000fff, /* ALL_REGS */\t\t        \\\n+}\n+\n+/* A C expression whose value is a register class containing hard\n+   register REGNO.  In general there is more that one such class;\n+   choose a class which is \"minimal\", meaning that no smaller class\n+   also contains the register.  */\n+#define REGNO_REG_CLASS(REGNO) GENERAL_REGS\n+\n+/* A macro whose definition is the name of the class to which a\n+   valid base register must belong.  A base register is one used in\n+   an address which is the register value plus a displacement.  */\n+#define BASE_REG_CLASS GENERAL_REGS\n+\n+/* A macro whose definition is the name of the class to which a\n+   valid index register must belong.  An index register is one used\n+   in an address where its value is either multiplied by a scale\n+   factor or added to another register (as well as added to a\n+   displacement).  */\n+#define INDEX_REG_CLASS NO_REGS\n+\n+/* C expression which is nonzero if register number REGNO is suitable\n+   for use as a base register in operand addresses.  In eBPF every\n+   hard register can be used for this purpose.  */\n+#define REGNO_OK_FOR_BASE_P(REGNO) \t\t\t\\\n+  ((REGNO) < FIRST_PSEUDO_REGISTER)\n+\n+/* C expression which is nonzero if register number REGNO is suitable\n+   for use as an index register in operand addresses.  */\n+#define REGNO_OK_FOR_INDEX_P(REGNO) false\n+\n+/**** Debugging Info ****/\n+\n+/* We cannot support DWARF2 because of the limitations of eBPF.  */\n+#define DBX_DEBUGGING_INFO\n+\n+/**** Stack Layout and Calling Conventions.  */\n+\n+/*** Basic Stack Layout.  */\n+\n+#define STACK_GROWS_DOWNWARD 1\n+#define FRAME_GROWS_DOWNWARD 1\n+\n+/* The argument pointer always points to the first argument.  */\n+#define FIRST_PARM_OFFSET(FNDECL) 0\n+\n+/* Unsupported.  */\n+#define RETURN_ADDR_RTX(count, frame) const0_rtx\n+\n+/*** Registers That Address the Stack Frame.  */\n+\n+#define FRAME_POINTER_REGNUM 10\n+#define STACK_POINTER_REGNUM 9\n+#define ARG_POINTER_REGNUM 11\n+#define STATIC_CHAIN_REGNUM 8\n+\n+/*** Registers elimination.  */\n+\n+#define ELIMINABLE_REGS\t\t\t\t\t\\\n+  {{ ARG_POINTER_REGNUM, FRAME_POINTER_REGNUM },\t\\\n+   { ARG_POINTER_REGNUM, STACK_POINTER_REGNUM }}\n+\n+/* Define the offset between two registers, one to be eliminated, and\n+   the other its replacement, at the start of a routine.  */\n+#define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET)\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      (OFFSET) = bpf_initial_elimination_offset ((FROM), (TO));\t\\\n+    } while (0)\n+\n+/*** Passing Function Arguments on the Stack.  */\n+\n+/* The eBPF ABI doesn't support passing arguments on the stack.  Only\n+   in the first five registers.  Code in bpf.c assures the stack is\n+   never used when passing arguments.  However, we still have to\n+   define the constants below.  */\n+\n+/* If nonzero, push insns will be used to pass outgoing arguments.  */\n+#define PUSH_ARGS 0\n+\n+/* If nonzero, function arguments will be evaluated from last to\n+   first, rather than from first to last.  */\n+#define PUSH_ARGS_REVERSED 1\n+\n+/* Allocate stack space for arguments at the beginning of each\n+   function.  */\n+#define ACCUMULATE_OUTGOING_ARGS 1\n+\n+/*** Passing Arguments in Registers.  */\n+\n+/* Use an integer in order to keep track of the number of arguments\n+   passed to a function in integer registers, up to\n+   MAX_ARGS_IN_REGISTERS.  */\n+#define CUMULATIVE_ARGS int\n+\n+/* INIT_CUMULATIVE_ARGS initializes a variable CUM of type\n+   CUMULATIVE_ARGS for a call to a function whose data type is FNTYPE.\n+   For a library call, FNTYPE is 0.  */\n+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,FNDECL,N_NAMED_ARGS) \\\n+  memset (&(CUM), 0, sizeof (CUM))\n+\n+/* Nonzero if N is the number of a hard register in which function\n+   arguments are sometimes passed.  */\n+#define FUNCTION_ARG_REGNO_P(N) ((N) >= 1 && (N) <= 5)\n+\n+/*** How Scalar Function Values are Returned.  */\n+\n+/* Define how to find the value returned by a library function\n+   assuming the value has mode MODE.  This is always %r0 for eBPF.  */\n+#define LIBCALL_VALUE(MODE)  \\\n+  gen_rtx_REG ((MODE), 0)\n+\n+/*** Generating Code for Profiling.  */\n+\n+/* We do not support profiling yet, so do not call `mcount'.  */\n+#define FUNCTION_PROFILER(FILE, LABELNO) do { } while (0)\n+\n+/*** Function Entry and Exit.  */\n+\n+/* We do not require an accurate stack pointer at function return.\n+   This is because the stack pointer's original value is initialized\n+   from the frame pointer, rather than decreased, to satisfy the\n+   kernel's verifier.  Thus, we have to save the stack pointer in\n+   function prologue and restore it in function epilogue.  If\n+   EXIT_IGNORE_STACK is not set, then superfluous instructions are\n+   generated to save and restore the stack pointer after and before\n+   the function epilogue, respectively.  */\n+#define EXIT_IGNORE_STACK 1\n+\n+/**** Support for Nested Functions.  */\n+\n+/* We have to define TRAMPOLINE_SIZE even if we don't ever generate\n+   them.  Set to 64 arbitrarily.  */\n+#define TRAMPOLINE_SIZE 64\n+\n+/**** Addressing Modes.  */\n+\n+/* Maximum number of registers that can appear in a valid memory\n+   address.  */\n+#define MAX_REGS_PER_ADDRESS 1\n+\n+/* 1 if X is an rtx for a constant that is a valid address.  */\n+\n+#define CONSTANT_ADDRESS_P(X) 0\n+\n+/**** Describing Relative Costs of Operations.  */\n+\n+/* Cost of a branch instruction.  A value of 1 is the default.  */\n+#define BRANCH_COST(SPEED_P,PREDICTABLE_P) 1\n+\n+/* The SPARC port says: Nonzero if access to memory by bytes is slow\n+   and undesirable.  For RISC chips, it means that access to memory by\n+   bytes is no better than access by words when possible, so grab a\n+   whole word and maybe make use of that.  */\n+#define SLOW_BYTE_ACCESS 1\n+\n+/* Threshold of number of scalar memory-to-memory move instructions,\n+   _below_ which a sequence of insns should be generated instead of a\n+   string move insn or a library call.  */\n+#define MOVE_RATIO(speed) 128\n+\n+/* Threshold of number of scalar move instructions, _below_ which a\n+   sequence of insns should be generated to clear memory instead of a\n+   string clear insn or a library call.  */\n+#define CLEAR_RATIO(speed) 128\n+\n+/* Threshold of number of scalar move instructions, _below_ which a\n+   sequence of insns should be generated to set memory to a constant\n+   value, instead of a block set insn or a library call.  */\n+#define SET_RATIO(speed) 128\n+\n+/* True if it is as good or better to call a constant function address\n+   than to call an address kept in a register.  */\n+#define NO_FUNCTION_CSE 1\n+\n+/**** Dividing the Output into Sections.  */\n+\n+#define TEXT_SECTION_ASM_OP \"\\t.text\"\n+#define DATA_SECTION_ASM_OP \"\\t.data\"\n+#define BSS_SECTION_ASM_OP \"\\t.bss\"\n+#define COMMON_ASM_OP \"\\t.common\\t\"\n+\n+/**** Defining the Output Assembler Language.  */\n+\n+/*** The Overall Framework of an Assembler File.  */\n+\n+#define ASM_COMMENT_START \";\"\n+\n+/* Output to assembler file text saying following lines\n+   may contain character constants, extra white space, comments, etc.  */\n+\n+#ifndef ASM_APP_ON\n+#define ASM_APP_ON \" #APP\\n\"\n+#endif\n+\n+/* Output to assembler file text saying following lines\n+   no longer contain unusual constructs.  */\n+\n+#ifndef ASM_APP_OFF\n+#define ASM_APP_OFF \" #NO_APP\\n\"\n+#endif\n+\n+/*** Output of Data.  */\n+\n+/*** Output of Uninitialized Variables.  */\n+\n+/* How to output an assembler line to define a local common\n+   symbol.  */\n+\n+#define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGN)\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf ((FILE), \"%s\", COMMON_ASM_OP);\t\t\t\t\\\n+      assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n+      fprintf ((FILE), \",%u,%u\\n\", (int)(SIZE), (ALIGN) / (BITS_PER_UNIT)); \\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* A C statement (sans semicolon) to output to the stdio stream\n+   FILE the assembler definition of uninitialized global DECL named\n+   NAME whose size is SIZE bytes and alignment is ALIGN bytes.\n+   Try to use asm_output_aligned_bss to implement this macro.  */\n+\n+#define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN)\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+    ASM_OUTPUT_ALIGNED_LOCAL (FILE, NAME, SIZE, ALIGN);\t\t\\\n+  } while (0)\n+\n+/* This says how to output an assembler line to define a local common\n+   symbol.  */\n+\n+#define ASM_OUTPUT_ALIGNED_LOCAL(FILE,NAME,SIZE,ALIGN)\t\t\t\\\n+  ( fputs (\"\\t.lcomm \", (FILE)),\t\t\t\t\t\\\n+    assemble_name ((FILE), (NAME)),\t\t\t\t\t\\\n+    fprintf ((FILE), \",\" HOST_WIDE_INT_PRINT_UNSIGNED \"\\n\",\t\t\\\n+\t     (SIZE), ((ALIGN) / BITS_PER_UNIT)))\n+\n+/*** Output and Generation of Labels.  */\n+\n+/* Globalizing directive for a label.  */\n+#define GLOBAL_ASM_OP \"\\t.global\\t\"\n+\n+/* This is how to store into the string LABEL\n+   the symbol_ref name of an internal numbered label where\n+   PREFIX is the class of label and NUM is the number within the class.\n+   This is suitable for output with `assemble_name'.  */\n+\n+#undef ASM_GENERATE_INTERNAL_LABEL\n+#define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\t\t\\\n+  sprintf ((LABEL), \"*%s%s%ld\", (LOCAL_LABEL_PREFIX), (PREFIX), (long)(NUM))\n+\n+/*** Macros Controlling Initialization Routines.  */\n+\n+#define INIT_SECTION_ASM_OP \"\\t.init\"\n+#define FINI_SECTION_ASM_OP \"\\t.fini\"\n+\n+/*** Output of Assembler Instructions.  */\n+\n+#define REGISTER_NAMES\t\t\t\t\t\t\\\n+  { \"%r0\", \"%r1\", \"%r2\", \"%r3\", \"%r4\", \"%r5\", \"%r6\", \"%r7\",\t\\\n+    \"%r8\", \"%r9\", \"%fp\", \"__arg__\" }\n+\n+#define ADDITIONAL_REGISTER_NAMES\t\t\\\n+  { { \"%a\", 0 }, { \"%ctx\", 6 }, { \"%r10\" , 10 } }\n+\n+#define LOCAL_LABEL_PREFIX \".\"\n+#define USER_LABEL_PREFIX  \"\"\n+\n+#define PRINT_OPERAND(STREAM,X,CODE)\t\t\\\n+  bpf_print_operand ((STREAM),(X),(CODE))\n+\n+#define PRINT_OPERAND_ADDRESS(STREAM,X)\t\t\\\n+  bpf_print_operand_address ((STREAM), (X))\n+\n+/*** Assembler Commands for Alignment.  */\n+\n+/* This is how to output an assembler line that says to advance the\n+   location counter to a multiple of 2**LOG bytes.  */\n+#define ASM_OUTPUT_ALIGN(STREAM,LOG)\t\t\\\n+  fprintf (STREAM, \"\\t.align\\t%d\\n\", (LOG))\n+\n+/* This is how to output an assembler line\n+   that says to advance the location counter by SIZE bytes.  */\n+#define ASM_OUTPUT_SKIP(FILE,SIZE)\t\t\\\n+  fprintf (FILE, \"\\t.skip\\t\" HOST_WIDE_INT_PRINT_UNSIGNED \"\\n\", (SIZE))\n+\n+/**** Miscellaneous Parameters.  */\n+\n+/* Specify the machine mode that this machine uses for the index in\n+   the tablejump instruction.  */\n+#define CASE_VECTOR_MODE DImode\n+\n+/* Define if operations between registers with integral mode smaller\n+   than a word are always performed on the entire register.  */\n+#define WORD_REGISTER_OPERATIONS 1\n+\n+/* C expression indicating when insns that read memory in MEM_MODE, an\n+   integral mode narrower than a word, set the bits outsize of\n+   MEM_MODE to be either the sign-extension or the zero-extension of\n+   the data read.  */\n+#define LOAD_EXTEND_OP(MODE) ZERO_EXTEND\n+\n+/* The maximum number of bytes that a single instruction can move\n+   quickly between memory and registers or between two memory\n+   locations.  */\n+#define MOVE_MAX 8\n+\n+/* An alias for the machine mode for pointers.  */\n+#define Pmode DImode\n+\n+/* An alias for the machine mode used for memory references to\n+   functions being called, in 'call' RTL expressions.  */\n+#define FUNCTION_MODE Pmode\n+\n+/* No libm on eBPF (for now.)  */\n+#define MATH_LIBRARY \"\"\n+\n+/**** libgcc settings.  */\n+\n+/* Iterating over the global constructors and destructors and\n+   executing them requires the ability of doing indirect calls.\n+\n+   eBPF doesn't support indirect calls, so no chance of supporting\n+   constructors and destructors.  */\n+#define DO_GLOBAL_CTORS_BODY\t\t\t\\\n+  do { } while (0)\n+#define DO_GLOBAL_DTORS_BODY\t\t\t\\\n+  do { } while (0)\n+\n+#endif /* ! GCC_BPF_H */"}, {"sha": "4c79522babf9fafb29da9ee1bbe67a762138327d", "filename": "gcc/config/bpf/bpf.md", "status": "added", "additions": 497, "deletions": 0, "changes": 497, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Fconfig%2Fbpf%2Fbpf.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Fconfig%2Fbpf%2Fbpf.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbpf%2Fbpf.md?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,497 @@\n+;; Machine description for eBPF.\n+;; Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(include \"predicates.md\")\n+(include \"constraints.md\")\n+\n+;;;; Unspecs\n+\n+(define_c_enum \"unspec\" [\n+  UNSPEC_LDINDABS\n+  UNSPEC_XADD\n+])\n+\n+;;;; Constants\n+\n+(define_constants\n+  [(R0_REGNUM\t\t0)\n+   (R1_REGNUM\t\t1)\n+   (R2_REGNUM\t\t2)\n+   (R3_REGNUM\t\t3)\n+   (R4_REGNUM\t\t4)\n+   (R5_REGNUM\t\t5)\n+   (R6_REGNUM\t\t6)\n+   (R7_REGNUM\t\t7)\n+   (R8_REGNUM\t\t8)\n+   (R9_REGNUM\t\t9)\n+   (R10_REGNUM\t\t10)\n+   (R11_REGNUM\t\t11)\n+])\n+\n+;;;; Attributes\n+\n+;; Instruction classes.\n+;; alu\t\t64-bit arithmetic.\n+;; alu32\t32-bit arithmetic.\n+;; end\t\tendianness conversion instructions.\n+;; ld\t\tload instructions.\n+;; lddx\t\tload 64-bit immediate instruction.\n+;; ldx\t\tgeneric load instructions.\n+;; st\t\tgeneric store instructions for immediates.\n+;; stx\t\tgeneric store instructions.\n+;; jmp\t\tjump instructions.\n+;; xadd\t\tatomic exchange-and-add instructions.\n+;; multi\tmultiword sequence (or user asm statements).\n+\n+(define_attr \"type\"\n+  \"unknown,alu,alu32,end,ld,lddw,ldx,st,stx,jmp,xadd,multi\"\n+  (const_string \"unknown\"))\n+\n+;; Length of instruction in bytes.\n+(define_attr \"length\" \"\"\n+  (cond [\n+         (eq_attr \"type\" \"lddw\") (const_int 16)\n+         ] (const_int 8)))\n+\n+;; Describe a user's asm statement.\n+(define_asm_attributes\n+  [(set_attr \"type\" \"multi\")])\n+\n+;;;; Mode attributes and iterators\n+\n+(define_mode_attr mop [(QI \"b\") (HI \"h\") (SI \"w\") (DI \"dw\")\n+                       (SF \"w\") (DF \"dw\")])\n+(define_mode_attr mtype [(SI \"alu32\") (DI \"alu\")])\n+(define_mode_attr msuffix [(SI \"32\") (DI \"\")])\n+\n+;;;; NOPs\n+\n+(define_insn \"nop\"\n+  [(const_int 0)]\n+  \"\"\n+  \"mov\\t%%r0,%%r0\"\n+  [(set_attr \"type\" \"alu\")])\n+\n+;;;; Arithmetic/Logical\n+\n+;; The arithmetic and logic operations below are defined for SI and DI\n+;; modes.  The mode iterator AM is used in order to expand to two\n+;; insns, with the proper modes.\n+;;\n+;; 32-bit arithmetic (for SI modes) is implemented using the alu32\n+;; instructions.\n+\n+(define_mode_iterator AM [SI DI])\n+\n+;;; Addition\n+(define_insn \"add<AM:mode>3\"\n+  [(set (match_operand:AM          0 \"register_operand\"   \"=r,r\")\n+        (plus:AM (match_operand:AM 1 \"register_operand\"   \" 0,0\")\n+                 (match_operand:AM 2 \"reg_or_imm_operand\" \" r,I\")))]\n+  \"1\"\n+  \"add<msuffix>\\t%0,%2\"\n+  [(set_attr \"type\" \"<mtype>\")])\n+\n+;;; Subtraction\n+\n+;; Note that subtractions of constants become additions, so there is\n+;; no need to handle immediate operands in the subMODE3 insns.\n+\n+(define_insn \"sub<AM:mode>3\"\n+  [(set (match_operand:AM          0 \"register_operand\" \"=r\")\n+        (minus:AM (match_operand:AM 1 \"register_operand\" \" 0\")\n+                  (match_operand:AM 2 \"register_operand\" \" r\")))]\n+  \"\"\n+  \"sub<msuffix>\\t%0,%2\"\n+  [(set_attr \"type\" \"<mtype>\")])\n+\n+;;; Negation\n+(define_insn \"neg<AM:mode>2\"\n+  [(set (match_operand:AM 0 \"register_operand\" \"=r\")\n+        (neg:AM (match_operand:AM 1 \"register_operand\" \" 0\")))]\n+  \"\"\n+  \"neg<msuffix>\\t%0\"\n+  [(set_attr \"type\" \"<mtype>\")])\n+\n+;;; Multiplication\n+(define_insn \"mul<AM:mode>3\"\n+  [(set (match_operand:AM          0 \"register_operand\"   \"=r,r\")\n+        (mult:AM (match_operand:AM 1 \"register_operand\"   \" 0,0\")\n+                 (match_operand:AM 2 \"reg_or_imm_operand\" \" r,I\")))]\n+  \"\"\n+  \"mul<msuffix>\\t%0,%2\"\n+  [(set_attr \"type\" \"<mtype>\")])\n+\n+(define_insn \"*mulsidi3_zeroextend\"\n+  [(set (match_operand:DI\t   0 \"register_operand\" \"=r,r\")\n+        (zero_extend:DI\n+         (mult:SI (match_operand:SI 1 \"register_operand\" \"0,0\")\n+                  (match_operand:SI 2 \"reg_or_imm_operand\" \"r,I\"))))]\n+  \"\"\n+  \"mul32\\t%0,%2\"\n+  [(set_attr \"type\" \"alu32\")])\n+\n+;;; Division\n+\n+;; Note that eBPF doesn't provide instructions for signed integer\n+;; division.\n+\n+(define_insn \"udiv<AM:mode>3\"\n+  [(set (match_operand:AM 0 \"register_operand\" \"=r,r\")\n+        (udiv:AM (match_operand:AM 1 \"register_operand\" \" 0,0\")\n+                 (match_operand:AM 2 \"reg_or_imm_operand\" \"r,I\")))]\n+  \"\"\n+  \"div<msuffix>\\t%0,%2\"\n+  [(set_attr \"type\" \"<mtype>\")])\n+\n+;;; Modulus\n+\n+;; Note that eBPF doesn't provide instructions for signed integer\n+;; remainder.\n+\n+(define_insn \"umod<AM:mode>3\"\n+  [(set (match_operand:AM 0 \"register_operand\" \"=r,r\")\n+        (umod:AM (match_operand:AM 1 \"register_operand\" \" 0,0\")\n+                 (match_operand:AM 2 \"reg_or_imm_operand\" \"r,I\")))]\n+  \"\"\n+  \"mod<msuffix>\\t%0,%2\"\n+  [(set_attr \"type\" \"<mtype>\")])\n+\n+;;; Logical AND\n+(define_insn \"and<AM:mode>3\"\n+  [(set (match_operand:AM 0 \"register_operand\" \"=r,r\")\n+        (and:AM (match_operand:AM 1 \"register_operand\" \" 0,0\")\n+                (match_operand:AM 2 \"reg_or_imm_operand\" \"r,I\")))]\n+  \"\"\n+  \"and<msuffix>\\t%0,%2\"\n+  [(set_attr \"type\" \"<mtype>\")])\n+\n+;;; Logical inclusive-OR\n+(define_insn \"ior<AM:mode>3\"\n+  [(set (match_operand:AM 0 \"register_operand\" \"=r,r\")\n+        (ior:AM (match_operand:AM 1 \"register_operand\" \" 0,0\")\n+                (match_operand:AM 2 \"reg_or_imm_operand\" \"r,I\")))]\n+  \"\"\n+  \"or<msuffix>\\t%0,%2\"\n+  [(set_attr \"type\" \"<mtype>\")])\n+\n+;;; Logical exclusive-OR\n+(define_insn \"xor<AM:mode>3\"\n+  [(set (match_operand:AM 0 \"register_operand\" \"=r,r\")\n+        (xor:AM (match_operand:AM 1 \"register_operand\" \" 0,0\")\n+                (match_operand:AM 2 \"reg_or_imm_operand\" \"r,I\")))]\n+  \"\"\n+  \"xor<msuffix>\\t%0,%2\"\n+  [(set_attr \"type\" \"<mtype>\")])\n+\n+;;;; Conversions\n+\n+;;; Zero-extensions\n+\n+;; For register operands smaller than 32-bit zero-extending is\n+;; achieved ANDing the value in the source register to a suitable\n+;; mask.\n+;;\n+;; For register operands bigger or equal than 32-bit, we generate a\n+;; mov32 instruction to zero the high 32-bits of the destination\n+;; register.\n+;;\n+;; For memory operands, of any width, zero-extending is achieved using\n+;; the ldx{bhwdw} instructions to load the values in registers.\n+\n+(define_insn \"zero_extendhidi2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+\t(zero_extend:DI (match_operand:HI 1 \"nonimmediate_operand\" \"r,m\")))]\n+  \"\"\n+  \"@\n+   and\\t%0,0xffff\n+   ldxh\\t%0,%1\"\n+  [(set_attr \"type\" \"alu,ldx\")])\n+\n+(define_insn \"zero_extendqidi2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+\t(zero_extend:DI (match_operand:QI 1 \"nonimmediate_operand\" \"r,m\")))]\n+  \"\"\n+  \"@\n+   and\\t%0,0xff\n+   ldxb\\t%0,%1\"\n+  [(set_attr \"type\" \"alu,ldx\")])\n+\n+(define_insn \"zero_extendsidi2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+\t(zero_extend:DI\n+\t  (match_operand:SI 1 \"nonimmediate_operand\" \"r,m\")))]\n+  \"\"\n+  \"@\n+   mov32\\t%0,%1\n+   ldxw\\t%0,%1\"\n+  [(set_attr \"type\" \"alu,ldx\")])\n+\n+;;; Sign-extension\n+\n+;; Sign-extending a 32-bit value into a 64-bit value is achieved using\n+;; shifting, with instructions generated by the expand below.\n+\n+(define_expand \"extendsidi2\"\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(sign_extend:DI (match_operand:SI 1 \"register_operand\")))]\n+  \"\"\n+{\n+  operands[1] = gen_lowpart (DImode, operands[1]);\n+  emit_insn (gen_ashldi3 (operands[0], operands[1], GEN_INT (32)));\n+  emit_insn (gen_ashrdi3 (operands[0], operands[0], GEN_INT (32)));\n+  DONE;\n+})\n+\n+;;;; Data movement\n+\n+(define_mode_iterator MM [QI HI SI DI SF DF])\n+\n+(define_expand \"mov<MM:mode>\"\n+  [(set (match_operand:MM 0 \"general_operand\")\n+        (match_operand:MM 1 \"general_operand\"))]\n+        \"\"\n+        \"\n+{\n+  if (!register_operand(operands[0], <MM:MODE>mode)\n+      && !register_operand(operands[1], <MM:MODE>mode))\n+    operands[1] = force_reg (<MM:MODE>mode, operands[1]); \n+}\")\n+\n+(define_insn \"*mov<MM:mode>\"\n+  [(set (match_operand:MM 0 \"nonimmediate_operand\" \"=r, r,r,m,m\")\n+        (match_operand:MM 1 \"mov_src_operand\"      \" m,rI,B,r,I\"))]\n+  \"\"\n+  \"@\n+   ldx<mop>\\t%0,%1\n+   mov\\t%0,%1\n+   lddw\\t%0,%1\n+   stx<mop>\\t%0,%1\n+   st<mop>\\t%0,%1\"\n+[(set_attr \"type\" \"ldx,alu,alu,stx,st\")])\n+\n+;;;; Shifts\n+\n+(define_mode_iterator SIM [SI DI])\n+\n+(define_insn \"ashr<SIM:mode>3\"\n+  [(set (match_operand:SIM 0 \"register_operand\"                 \"=r,r\")\n+        (ashiftrt:SIM (match_operand:SIM 1 \"register_operand\"   \" 0,0\")\n+                      (match_operand:SIM 2 \"reg_or_imm_operand\" \" r,I\")))]\n+  \"\"\n+  \"arsh<msuffix>\\t%0,%2\"\n+  [(set_attr \"type\" \"<mtype>\")])\n+\n+(define_insn \"ashl<SIM:mode>3\"\n+  [(set (match_operand:SIM 0 \"register_operand\"               \"=r,r\")\n+        (ashift:SIM (match_operand:SIM 1 \"register_operand\"   \" 0,0\")\n+                    (match_operand:SIM 2 \"reg_or_imm_operand\" \" r,I\")))]\n+  \"\"\n+  \"lsh<msuffix>\\t%0,%2\"\n+  [(set_attr \"type\" \"<mtype>\")])\n+\n+(define_insn \"lshr<SIM:mode>3\"\n+  [(set (match_operand:SIM 0 \"register_operand\"                 \"=r,r\")\n+        (lshiftrt:SIM (match_operand:SIM 1 \"register_operand\"   \" 0,0\")\n+                      (match_operand:SIM 2 \"reg_or_imm_operand\" \" r,I\")))]\n+  \"\"\n+  \"rsh<msuffix>\\t%0,%2\"\n+  [(set_attr \"type\" \"<mtype>\")])\n+\n+;;;; Conditional branches\n+\n+;; The eBPF jump instructions use 64-bit arithmetic when evaluating\n+;; the jump conditions.  Therefore we use DI modes below.\n+\n+(define_expand \"cbranchdi4\"\n+  [(set (pc)\n+\t(if_then_else (match_operator 0 \"comparison_operator\"\n+\t\t\t[(match_operand:DI 1 \"register_operand\")\n+\t\t\t (match_operand:DI 2 \"reg_or_imm_operand\")])\n+\t\t      (label_ref (match_operand 3 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"\"\n+{\n+  if (!ordered_comparison_operator (operands[0], VOIDmode))\n+    FAIL;\n+})\n+\n+(define_insn \"*branch_on_di\"\n+  [(set (pc)\n+\t(if_then_else (match_operator 3 \"ordered_comparison_operator\"\n+\t\t\t [(match_operand:DI 0 \"register_operand\" \"r\")\n+\t\t\t  (match_operand:DI 1 \"reg_or_imm_operand\" \"rI\")])\n+\t\t      (label_ref (match_operand 2 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"\"\n+{\n+  int code = GET_CODE (operands[3]);\n+\n+  switch (code)\n+  {\n+  case EQ: return \"jeq\\t%0,%1,%2\"; break;\n+  case NE: return \"jne\\t%0,%1,%2\"; break;\n+  case LT: return \"jslt\\t%0,%1,%2\"; break;\n+  case LE: return \"jsle\\t%0,%1,%2\"; break;\n+  case GT: return \"jsgt\\t%0,%1,%2\"; break;\n+  case GE: return \"jsge\\t%0,%1,%2\"; break;\n+  case LTU: return \"jlt\\t%0,%1,%2\"; break;\n+  case LEU: return \"jle\\t%0,%1,%2\"; break;\n+  case GTU: return \"jgt\\t%0,%1,%2\"; break;\n+  case GEU: return \"jge\\t%0,%1,%2\"; break;\n+  default:\n+    gcc_unreachable ();\n+    return \"\";\n+  }\n+}\n+  [(set_attr \"type\" \"jmp\")])\n+\n+;;;; Unconditional branches\n+\n+(define_insn \"jump\"\n+  [(set (pc)\n+        (label_ref (match_operand 0 \"\" \"\")))]\n+  \"\"\n+  \"ja\\t%0\"\n+[(set_attr \"type\" \"jmp\")])\n+\n+;;;; Function prologue/epilogue\n+\n+(define_insn \"exit\"\n+  [(simple_return)]\n+  \"\"\n+  \"exit\"\n+  [(set_attr \"type\" \"jmp\")])\n+\n+(define_expand \"prologue\"\n+  [(const_int 0)]\n+  \"\"\n+{\n+  bpf_expand_prologue ();\n+  DONE;\n+})\n+\n+(define_expand \"epilogue\"\n+  [(const_int 0)]\n+  \"\"\n+{\n+  bpf_expand_epilogue ();\n+  DONE;\n+})\n+\n+;;;; Function calls\n+\n+(define_expand \"call\"\n+  [(parallel [(call (match_operand 0 \"\")\n+\t\t    (match_operand 1 \"\"))\n+\t      (use (match_operand 2 \"\"))\t;; next_arg_reg\n+\t      (use (match_operand 3 \"\"))])]\t;; struct_value_size_rtx\n+  \"\"\n+{\n+  rtx target = XEXP (operands[0], 0);\n+  emit_call_insn (gen_call_internal (target, operands[1]));\n+  DONE;\n+})\n+\n+(define_insn \"call_internal\"\n+  [(call (mem:DI (match_operand:DI 0 \"call_operand\" \"Sr\"))\n+         (match_operand:SI 1 \"general_operand\" \"\"))]\n+  ;; operands[2] is next_arg_register\n+  ;; operands[3] is struct_value_size_rtx.\n+  \"\"\n+  { return bpf_output_call (operands[0]); }\n+  [(set_attr \"type\" \"jmp\")])\n+\n+(define_expand \"call_value\"\n+  [(parallel [(set (match_operand 0 \"\")\n+\t\t   (call (match_operand 1 \"\")\n+\t\t\t (match_operand 2 \"\")))\n+\t      (use (match_operand 3 \"\"))])]\t\t;; next_arg_reg\n+  \"\"\n+{\n+  rtx target = XEXP (operands[1], 0);\n+  emit_call_insn (gen_call_value_internal (operands[0], target,\n+                                           operands[2]));\n+  DONE;\n+})\n+\n+(define_insn \"call_value_internal\"\n+  [(set (match_operand 0 \"register_operand\" \"\")\n+\t(call (mem:DI (match_operand:DI 1 \"call_operand\" \"Sr\"))\n+\t      (match_operand:SI 2 \"general_operand\" \"\")))]\n+  ;; operands[3] is next_arg_register\n+  ;; operands[4] is struct_value_size_rtx.\n+  \"\"\n+  { return bpf_output_call (operands[1]); }\n+  [(set_attr \"type\" \"jmp\")])\n+\n+(define_insn \"sibcall\"\n+  [(call (label_ref (match_operand 0 \"\" \"\"))\n+\t (match_operand:SI 1 \"general_operand\" \"\"))]\n+  ;; operands[2] is next_arg_register\n+  ;; operands[3] is struct_value_size_rtx.\n+  \"\"\n+  \"ja\\t%0\"\n+  [(set_attr \"type\" \"jmp\")])\n+\n+;;;; Non-generic load instructions\n+\n+(define_mode_iterator LDM [QI HI SI DI])\n+(define_mode_attr ldop [(QI \"b\") (HI \"h\") (SI \"w\") (DI \"dw\")])\n+\n+(define_insn \"ldind<ldop>\"\n+  [(set (reg:LDM R0_REGNUM)\n+        (unspec:LDM [(match_operand:DI 0 \"register_operand\" \"r\")\n+                    (match_operand:SI 1 \"imm32_operand\" \"I\")]\n+                    UNSPEC_LDINDABS))\n+   (clobber (reg:DI R1_REGNUM))\n+   (clobber (reg:DI R2_REGNUM))\n+   (clobber (reg:DI R3_REGNUM))\n+   (clobber (reg:DI R4_REGNUM))]\n+  \"\"\n+  \"ldind<ldop>\\t%0,%1\"\n+  [(set_attr \"type\" \"ld\")])\n+\n+(define_insn \"ldabs<ldop>\"\n+  [(set (reg:LDM R0_REGNUM)\n+        (unspec:LDM [(match_operand:SI 0 \"imm32_operand\" \"I\")\n+                    (match_operand:SI 1 \"imm32_operand\" \"I\")]\n+                    UNSPEC_LDINDABS))\n+   (clobber (reg:DI R1_REGNUM))\n+   (clobber (reg:DI R2_REGNUM))\n+   (clobber (reg:DI R3_REGNUM))\n+   (clobber (reg:DI R4_REGNUM))]\n+  \"\"\n+  \"ldabs<ldop>\\t%0\"\n+  [(set_attr \"type\" \"ld\")])\n+\n+;;;; Atomic increments\n+\n+(define_mode_iterator AMO [SI DI])\n+\n+(define_insn \"atomic_add<AMO:mode>\"\n+  [(set (match_operand:AMO 0 \"memory_operand\" \"+m\")\n+        (unspec_volatile:AMO\n+         [(plus:AMO (match_dup 0)\n+                    (match_operand:AMO 1 \"register_operand\" \"r\"))\n+          (match_operand:SI 2 \"const_int_operand\")] ;; Memory model.\n+         UNSPEC_XADD))]\n+  \"\"\n+  \"xadd<mop>\\t%0,%1\"\n+  [(set_attr \"type\" \"xadd\")])"}, {"sha": "e61cf953c15ba6f7f94b82a1422fa05e27550e72", "filename": "gcc/config/bpf/bpf.opt", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Fconfig%2Fbpf%2Fbpf.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Fconfig%2Fbpf%2Fbpf.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbpf%2Fbpf.opt?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,123 @@\n+; Options for the eBPF compiler port.\n+\n+; Copyright (C) 2019 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 3, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+\n+HeaderInclude\n+config/bpf/bpf-opts.h\n+\n+; Selecting the kind of kernel the eBPF will be running on.\n+\n+mkernel=\n+Target RejectNegative Joined Var(bpf_kernel) Enum(bpf_kernel) Init(LINUX_LATEST)\n+Generate eBPF for the given Linux kernel version.\n+\n+Enum\n+Name(bpf_kernel) Type(enum bpf_kernel_version)\n+\n+EnumValue\n+Enum(bpf_kernel) String(native) Value(LINUX_NATIVE) DriverOnly\n+\n+EnumValue\n+Enum(bpf_kernel) String(latest) Value(LINUX_LATEST) DriverOnly\n+\n+EnumValue\n+Enum(bpf_kernel) String(4.0) Value(LINUX_V4_0)\n+\n+EnumValue\n+Enum(bpf_kernel) String(4.1) Value(LINUX_V4_1)\n+\n+EnumValue\n+Enum(bpf_kernel) String(4.2) Value(LINUX_V4_2)\n+\n+EnumValue\n+Enum(bpf_kernel) String(4.3) Value(LINUX_V4_3)\n+\n+EnumValue\n+Enum(bpf_kernel) String(4.4) Value(LINUX_V4_4)\n+\n+EnumValue\n+Enum(bpf_kernel) String(4.5) Value(LINUX_V4_5)\n+\n+EnumValue\n+Enum(bpf_kernel) String(4.6) Value(LINUX_V4_6)\n+\n+EnumValue\n+Enum(bpf_kernel) String(4.7) Value(LINUX_V4_7)\n+\n+EnumValue\n+Enum(bpf_kernel) String(4.8) Value(LINUX_V4_8)\n+\n+EnumValue\n+Enum(bpf_kernel) String(4.9) Value(LINUX_V4_9)\n+\n+EnumValue\n+Enum(bpf_kernel) String(4.10) Value(LINUX_V4_10)\n+\n+EnumValue\n+Enum(bpf_kernel) String(4.11) Value(LINUX_V4_11)\n+\n+EnumValue\n+Enum(bpf_kernel) String(4.12) Value(LINUX_V4_12)\n+\n+EnumValue\n+Enum(bpf_kernel) String(4.13) Value(LINUX_V4_13)\n+\n+EnumValue\n+Enum(bpf_kernel) String(4.14) Value(LINUX_V4_14)\n+\n+EnumValue\n+Enum(bpf_kernel) String(4.15) Value(LINUX_V4_15)\n+\n+EnumValue\n+Enum(bpf_kernel) String(4.16) Value(LINUX_V4_16)\n+\n+EnumValue\n+Enum(bpf_kernel) String(4.17) Value(LINUX_V4_17)\n+\n+EnumValue\n+Enum(bpf_kernel) String(4.18) Value(LINUX_V4_18)\n+\n+EnumValue\n+Enum(bpf_kernel) String(4.19) Value(LINUX_V4_19)\n+\n+EnumValue\n+Enum(bpf_kernel) String(4.20) Value(LINUX_V4_20)\n+\n+EnumValue\n+Enum(bpf_kernel) String(5.0) Value(LINUX_V5_0)\n+\n+EnumValue\n+Enum(bpf_kernel) String(5.1) Value(LINUX_V5_1)\n+\n+EnumValue\n+Enum(bpf_kernel) String(5.2) Value(LINUX_V5_2)\n+\n+; Selecting big endian or little endian targets.\n+\n+mbig-endian\n+Target RejectNegative Report Mask(BIG_ENDIAN)\n+Generate big-endian eBPF.\n+\n+mlittle-endian\n+Target RejectNegative Report InverseMask(BIG_ENDIAN)\n+Generate little-endian eBPF.\n+\n+mframe-limit=\n+Target Joined RejectNegative UInteger IntegerRange(0, 32767) Var(bpf_frame_limit) Init(512)\n+Set a hard limit for the size of each stack frame, in bytes."}, {"sha": "f27b785d9ce89828b72d2ac94663516da0fc8016", "filename": "gcc/config/bpf/constraints.md", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Fconfig%2Fbpf%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Fconfig%2Fbpf%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbpf%2Fconstraints.md?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,32 @@\n+;; Constraint definitions for eBPF.\n+;; Copyright (C) 2019 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_constraint \"I\"\n+  \"A 32-bit signed immediate.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, -1 - 0x7fffffff, 0x7fffffff)\")))\n+\n+(define_constraint \"B\"\n+  \"A constant argument for LDDW.\"\n+  (match_code \"const,symbol_ref,label_ref,const_double,const_int\"))\n+\n+(define_constraint \"S\"\n+  \"A constant call address.\"\n+  (match_code \"const,symbol_ref,label_ref,const_int\"))\n+"}, {"sha": "9ba0e785082f5d18e2555bae57537c8cc64429bc", "filename": "gcc/config/bpf/predicates.md", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Fconfig%2Fbpf%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Fconfig%2Fbpf%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbpf%2Fpredicates.md?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,64 @@\n+;; Predicate definitions for eBPF.\n+;; Copyright (C) 2019 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_predicate \"reg_or_imm_operand\"\n+  (ior (and (match_code \"const_int\")\n+            (match_test \"IN_RANGE (INTVAL (op), -1 - 0x7fffffff, 0x7fffffff)\"))\n+       (match_operand 0 \"register_operand\")))\n+\n+(define_predicate \"imm32_operand\"\n+  (ior (and (match_code \"const_int\")\n+            (match_test \"IN_RANGE (INTVAL (op), 0, 0xffffffff)\"))\n+       (match_code \"symbol_ref,label_ref,const\")))\n+\n+(define_predicate \"lddw_operand\"\n+  (match_code \"symbol_ref,label_ref,const,const_double,const_int\"))\n+\n+(define_predicate \"call_operand\"\n+  (match_code \"reg,symbol_ref,const_int,const\")\n+{\n+  if (GET_CODE (op) == CONST)\n+    {\n+      op = XEXP (op, 0);\n+\n+      switch (GET_CODE (op))\n+\t{\n+\tcase SYMBOL_REF:\n+\tcase LABEL_REF:\n+\tcase CONST_INT:\n+\t  return true;\n+\t  break;\n+\tdefault:\n+\t  break;\n+\t}\n+\n+      return false;\n+    }\n+\n+  return true;\n+})\n+\n+(define_predicate \"mov_src_operand\"\n+  (ior (match_operand 0 \"memory_operand\")\n+       (match_operand 0 \"reg_or_imm_operand\")\n+       (match_operand 0 \"lddw_operand\")))\n+\n+(define_predicate \"register_compare_operator\"\n+  (match_code \"eq,ne,geu,gtu,ge,gt\"))\n+"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "gcc/config/bpf/t-bpf", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Fconfig%2Fbpf%2Ft-bpf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Fconfig%2Fbpf%2Ft-bpf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbpf%2Ft-bpf?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c"}, {"sha": "64fccfe9b87a1389ad4db2585e72b10e5195cc76", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -13549,6 +13549,8 @@ instructions, but allow the compiler to schedule those calls.\n * ARM ARMv8-M Security Extensions::\n * AVR Built-in Functions::\n * Blackfin Built-in Functions::\n+* BPF Built-in Functions::\n+* BPF Kernel Helpers::\n * FR-V Built-in Functions::\n * MIPS DSP Built-in Functions::\n * MIPS Paired-Single Support::\n@@ -14545,6 +14547,175 @@ void __builtin_bfin_csync (void)\n void __builtin_bfin_ssync (void)\n @end smallexample\n \n+@node BPF Built-in Functions\n+@subsection BPF Built-in Functions\n+\n+The following built-in functions are available for eBPF targets.\n+\n+@deftypefn {Built-in Function} unsigned long long __builtin_bpf_load_byte (unsigned long long @var{offset})\n+Load a byte from the @code{struct sk_buff} packet data pointed by the register @code{%r6} and return it.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} unsigned long long __builtin_bpf_load_half (unsigned long long @var{offset})\n+Load 16-bits from the @code{struct sk_buff} packet data pointed by the register @code{%r6} and return it.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} unsigned long long __builtin_bpf_load_word (unsigned long long @var{offset})\n+Load 32-bits from the @code{struct sk_buff} packet data pointed by the register @code{%r6} and return it.\n+@end deftypefn\n+\n+@node BPF Kernel Helpers\n+@subsection BPF Kernel Helpers\n+\n+These built-in functions are available for calling kernel helpers, and\n+they are available depending on the kernel version selected as the\n+CPU.\n+\n+Rather than using the built-ins directly, it is preferred for programs\n+to include @file{bpf-helpers.h} and use the wrappers defined there.\n+\n+For a full description of what the helpers do, the arguments they\n+take, and the returned value, see the\n+@file{linux/include/uapi/linux/bpf.h} in a Linux source tree.\n+\n+@smallexample\n+void *__builtin_bpf_helper_map_lookup_elem (void *map, void *key)\n+int   __builtin_bpf_helper_map_update_elem (void *map, void *key,\n+                                            void *value,\n+                                            unsigned long long flags)\n+int   __builtin_bpf_helper_map_delete_elem (void *map, const void *key)\n+int   __builtin_bpf_helper_map_push_elem (void *map, const void *value,\n+                                          unsigned long long flags)\n+int   __builtin_bpf_helper_map_pop_elem (void *map, void *value)\n+int   __builtin_bpf_helper_map_peek_elem (void *map, void *value)\n+int __builtin_bpf_helper_clone_redirect (void *skb,\n+                                         unsigned int ifindex,\n+                                         unsigned long long flags)\n+int __builtin_bpf_helper_skb_get_tunnel_key (void *ctx, void *key, int size, int flags)\n+int __builtin_bpf_helper_skb_set_tunnel_key (void *ctx, void *key, int size, int flags)\n+int __builtin_bpf_helper_skb_get_tunnel_opt (void *ctx, void *md, int size)\n+int __builtin_bpf_helper_skb_set_tunnel_opt (void *ctx, void *md, int size)\n+int __builtin_bpf_helper_skb_get_xfrm_state (void *ctx, int index, void *state,\n+\t\t\t\t     int size, int flags)\n+static unsigned long long __builtin_bpf_helper_skb_cgroup_id (void *ctx)\n+static unsigned long long __builtin_bpf_helper_skb_ancestor_cgroup_id\n+                                         (void *ctx, int level)\n+int __builtin_bpf_helper_skb_vlan_push (void *ctx, __be16 vlan_proto, __u16 vlan_tci)\n+int __builtin_bpf_helper_skb_vlan_pop (void *ctx)\n+int __builtin_bpf_helper_skb_ecn_set_ce (void *ctx)\n+\n+int __builtin_bpf_helper_skb_load_bytes (void *ctx, int off, void *to, int len)\n+int __builtin_bpf_helper_skb_load_bytes_relative (void *ctx, int off, void *to, int len, __u32 start_header)\n+int __builtin_bpf_helper_skb_store_bytes (void *ctx, int off, void *from, int len, int flags)\n+int __builtin_bpf_helper_skb_under_cgroup (void *ctx, void *map, int index)\n+int __builtin_bpf_helper_skb_change_head (void *, int len, int flags)\n+int __builtin_bpf_helper_skb_pull_data (void *, int len)\n+int __builtin_bpf_helper_skb_change_proto (void *ctx, __be16 proto, __u64 flags)\n+int __builtin_bpf_helper_skb_change_type (void *ctx, __u32 type)\n+int __builtin_bpf_helper_skb_change_tail (void *ctx, __u32 len, __u64 flags)\n+int __builtin_bpf_helper_skb_adjust_room (void *ctx, __s32 len_diff, __u32 mode,\n+    \t\t\t\t  unsigned long long flags)\n+@end smallexample\n+\n+Other helpers:\n+\n+@smallexample\n+int __builtin_bpf_helper_probe_read (void *dst, unsigned int size, void *src)\n+unsigned long long __builtin_bpf_helper_ktime_get_ns (void)\n+int __builtin_bpf_helper_trace_printk (const char *fmt, unsigned int fmt_size, ...)\n+void __builtin_bpf_helper_tail_call (void *ctx, void *prog_array_map, unsigned int index)\n+unsigned int __builtin_bpf_helper_get_smp_processor_id (void)\n+unsigned long long __builtin_bpf_helper_get_current_pid_tgid (void)\n+unsigned long long __builtin_bpf_helper_get_current_uid_gid (void)\n+int __builtin_bpf_helper_get_current_comm (void *buf, unsigned int size_of_buf)\n+unsigned long long __builtin_bpf_helper_perf_event_read (void *map, unsigned long long flags)\n+\n+int __builtin_bpf_helper_redirect (unsigned int ifindex, unsigned long long flags)\n+int __builtin_bpf_helper_redirect_map (void *map, unsigned int key, unsigned long long flags)\n+int __builtin_bpf_helper_perf_event_output (void *ctx,void *map, unsigned long long flags, void *data, unsigned long long size)\n+int __builtin_bpf_helper_get_stackid (void *ctx, void *map, unsigned long long flags)\n+int __builtin_bpf_helper_probe_write_user (void *dst, const void *src, unsigned int len)\n+int __builtin_bpf_helper_current_task_under_cgroup (void *map, unsigned int index)\n+\n+static unsigned long long __builtin_bpf_helper_get_prandom_u32 (void)\n+int __builtin_bpf_helper_xdp_adjust_head (void *ctx, int offset)\n+int __builtin_bpf_helper_xdp_adjust_meta (void *ctx, int offset)\n+int __builtin_bpf_helper_get_socket_cookie (void *ctx)\n+int __builtin_bpf_helper_setsockopt (void *ctx, int level, int optname, void *optval,\n+\t\t\t     int optlen)\n+int __builtin_bpf_helper_getsockopt (void *ctx, int level, int optname, void *optval,\n+\t\t\t     int optlen)\n+int __builtin_bpf_helper_sock_ops_cb_flags_set (void *ctx, int flags)\n+int __builtin_bpf_helper_sk_redirect_map (void *ctx, void *map, int key, int flags)\n+int __builtin_bpf_helper_sk_redirect_hash (void *ctx, void *map, void *key, int flags)\n+int __builtin_bpf_helper_sock_map_update (void *map, void *key, void *value,\n+\t\t\t\t  unsigned long long flags)\n+int __builtin_bpf_helper_sock_hash_update (void *map, void *key, void *value,\n+\t\t\t\t   unsigned long long flags)\n+int __builtin_bpf_helper_perf_event_read_value (void *map, unsigned long long flags,\n+\t\t\t\t\tvoid *buf, unsigned int buf_size)\n+int __builtin_bpf_helper_perf_prog_read_value (void *ctx, void *buf,\n+\t\t\t\t       unsigned int buf_size)\n+\n+int __builtin_bpf_helper_override_return (void *ctx, unsigned long rc)\n+int __builtin_bpf_helper_msg_redirect_map (void *ctx, void *map, int key, int flags)\n+int __builtin_bpf_helper_msg_redirect_hash (void *ctx,\n+\t\t\t\t    void *map, void *key, int flags)\n+int __builtin_bpf_helper_msg_apply_bytes (void *ctx, int len)\n+int __builtin_bpf_helper_msg_cork_bytes (void *ctx, int len)\n+int __builtin_bpf_helper_msg_pull_data (void *ctx, int start, int end, int flags)\n+int __builtin_bpf_helper_msg_push_data (void *ctx, int start, int end, int flags)\n+int __builtin_bpf_helper_msg_pop_data (void *ctx, int start, int cut, int flags)\n+int __builtin_bpf_helper_bind (void *ctx, void *addr, int addr_len)\n+int __builtin_bpf_helper_xdp_adjust_tail (void *ctx, int offset)\n+int __builtin_bpf_helper_sk_select_reuseport (void *ctx, void *map, void *key, __u32 flags)\n+int __builtin_bpf_helper_get_stack (void *ctx, void *buf, int size, int flags)\n+int __builtin_bpf_helper_fib_lookup (void *ctx, struct bpf_fib_lookup *params,\n+\t\t\t     int plen, __u32 flags)\n+\n+int __builtin_bpf_helper_lwt_push_encap (void *ctx, unsigned int type, void *hdr,\n+\t\t\t\t unsigned int len)\n+int __builtin_bpf_helper_lwt_seg6_store_bytes (void *ctx, unsigned int offset,\n+\t\t\t\t       void *from, unsigned int len)\n+int __builtin_bpf_helper_lwt_seg6_action (void *ctx, unsigned int action, void *param,\n+\t\t\t\t  unsigned int param_len)\n+int __builtin_bpf_helper_lwt_seg6_adjust_srh (void *ctx, unsigned int offset,\n+\t\t\t\t      unsigned int len)\n+int __builtin_bpf_helper_rc_repeat (void *ctx)\n+int __builtin_bpf_helper_rc_keydown (void *ctx, unsigned int protocol,\n+\t\t\t     unsigned long long scancode, unsigned int toggle)\n+static unsigned long long __builtin_bpf_helper_get_current_cgroup_id (void)\n+static void *__builtin_bpf_helper_get_local_storage (void *map, unsigned long long flags)\n+static struct bpf_sock *__builtin_bpf_helper_sk_lookup_tcp (void *ctx, void *tuple, int size, unsigned long long netns_id, unsigned long long flags)\n+static struct bpf_sock *__builtin_bpf_helper_sk_lookup_udp (void *ctx, void *tuple, int size, unsigned long long netns_id, unsigned long long flags)\n+int __builtin_bpf_helper_sk_release (struct bpf_sock *sk)\n+int __builtin_bpf_helper_rc_pointer_rel (void *ctx, int rel_x, int rel_y)\n+static void __builtin_bpf_helper_spin_lock (struct bpf_spin_lock *lock)\n+static void __builtin_bpf_helper_spin_unlock (struct bpf_spin_lock *lock)\n+\n+static struct bpf_sock *__builtin_bpf_helper_sk_fullsock (struct bpf_sock *sk)\n+static struct bpf_tcp_sock *__builtin_bpf_helper_tcp_sock (struct bpf_sock *sk)\n+static struct bpf_sock *__builtin_bpf_helper_get_listener_sock (struct bpf_sock *sk)\n+\n+int __builtin_bpf_helper_l3_csum_replace (void *ctx, int off, int from, int to, int flags)\n+int __builtin_bpf_helper_l4_csum_replace (void *ctx, int off, int from, int to, int flags)\n+int __builtin_bpf_helper_csum_diff (void *from, int from_size, void *to, int to_size, int seed)\n+\n+static unsigned int __builtin_bpf_helper_get_cgroup_classid (void *ctx)\n+static unsigned int __builtin_bpf_helper_get_route_realm (void *ctx)\n+static unsigned int __builtin_bpf_helper_get_hash_recalc (void *ctx)\n+static unsigned long long __builtin_bpf_helper_get_current_task (void *ctx)\n+\n+static long long __builtin_bpf_helper_csum_update (void *ctx, __u32 csum)\n+static void __builtin_bpf_helper_set_hash_invalid (void *ctx)\n+int __builtin_bpf_helper_get_numa_node_id (void)\n+int __builtin_bpf_helper_probe_read_str (void *ctx, __u32 size,\n+\t\t\t\t const void *unsafe_ptr)\n+static unsigned int __builtin_bpf_helper_get_socket_uid (void *ctx)\n+static unsigned int __builtin_bpf_helper_set_hash (void *ctx, __u32 hash)\n+@end smallexample\n+\n+\n @node FR-V Built-in Functions\n @subsection FR-V Built-in Functions\n "}, {"sha": "7bcdfcbca15715a7844ad2f85e7e29cde4d10faf", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -802,6 +802,10 @@ Objective-C and Objective-C++ Dialects}.\n -msmall-text  -mlarge-text @gol\n -mmemory-latency=@var{time}}\n \n+@emph{eBPF Options}\n+@gccoptlist{-mbig-endian -mlittle-endian -mkernel=@var{version}\n+-mframe-limit=@var{bytes}}\n+\n @emph{FR30 Options}\n @gccoptlist{-msmall-model  -mno-lsim}\n \n@@ -15650,6 +15654,7 @@ platform.\n * C-SKY Options::\n * Darwin Options::\n * DEC Alpha Options::\n+* eBPF Options::\n * FR30 Options::\n * FT32 Options::\n * FRV Options::\n@@ -19771,6 +19776,38 @@ Note that L3 is only valid for EV5.\n @end table\n @end table\n \n+@node eBPF Options\n+@subsection eBPF Options\n+@cindex eBPF Options\n+\n+@table @gcctabopt\n+@item -mframe-limit=@var{bytes}\n+This specifies the hard limit for frame sizes, in bytes.  Currently,\n+the value that can be specified should be less than or equal to\n+@samp{32767}.  Defaults to whatever limit is imposed by the version of\n+the Linux kernel targeted.\n+\n+@item -mkernel=@var{version}\n+@opindex mkernel\n+This specifies the minimum version of the kernel that will run the\n+compiled program.  GCC uses this version to determine which\n+instructions to use, what kernel helpers to allow, etc.  Currently,\n+@var{version} can be one of @samp{4.0}, @samp{4.1}, @samp{4.2},\n+@samp{4.3}, @samp{4.4}, @samp{4.5}, @samp{4.6}, @samp{4.7},\n+@samp{4.8}, @samp{4.9}, @samp{4.10}, @samp{4.11}, @samp{4.12},\n+@samp{4.13}, @samp{4.14}, @samp{4.15}, @samp{4.16}, @samp{4.17},\n+@samp{4.18}, @samp{4.19}, @samp{4.20}, @samp{5.0}, @samp{5.1},\n+@samp{5.2}, @samp{latest} and @samp{native}.\n+\n+@item -mbig-endian\n+@opindex mbig-endian\n+Generate code for a big-endian target.\n+\n+@item -mlittle-endian\n+@opindex mlittle-endian\n+Generate code for a little-endian target.  This is the default.\n+@end table\n+\n @node FR30 Options\n @subsection FR30 Options\n @cindex FR30 Options"}, {"sha": "faa487f51cd3263668099cc497e42dbf1052ee12", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 215, "deletions": 0, "changes": 215, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,218 @@\n+2019-09-09  Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\n+\t* gcc.dg/builtins-config.h: eBPF doesn't support C99 standard\n+\tfunctions.\n+\t* gcc.c-torture/compile/20101217-1.c: Add a function prototype for\n+\tprintf.\n+\t* gcc.c-torture/compile/20000211-1.c: Skip if target bpf-*-*.\n+\t* gcc.c-torture/compile/poor.c: Likewise.\n+\t* gcc.c-torture/compile/pr25311.c: Likewise.\n+\t* gcc.c-torture/compile/pr39928-1.c: Likewise.\n+\t* gcc.c-torture/compile/pr70061.c: Likewise.\n+\t* gcc.c-torture/compile/920501-7.c: Likewise.\n+\t* gcc.c-torture/compile/20000403-1.c: Likewise.\n+\t* gcc.c-torture/compile/20001226-1.c: Likewise.\n+\t* gcc.c-torture/compile/20030903-1.c: Likewise.\n+\t* gcc.c-torture/compile/20031125-1.c: Likewise.\n+\t* gcc.c-torture/compile/20040101-1.c: Likewise.\n+\t* gcc.c-torture/compile/20040317-2.c: Likewise.\n+\t* gcc.c-torture/compile/20040726-1.c: Likewise.\n+\t* gcc.c-torture/compile/20051216-1.c: Likewise.\n+\t* gcc.c-torture/compile/900313-1.c: Likewise.\n+\t* gcc.c-torture/compile/920625-1.c: Likewise.\n+\t* gcc.c-torture/compile/930421-1.c: Likewise.\n+\t* gcc.c-torture/compile/930623-1.c: Likewise.\n+\t* gcc.c-torture/compile/961004-1.c: Likewise.\n+\t* gcc.c-torture/compile/980504-1.c: Likewise.\n+\t* gcc.c-torture/compile/980816-1.c: Likewise.\n+\t* gcc.c-torture/compile/990625-1.c: Likewise.\n+\t* gcc.c-torture/compile/DFcmp.c: Likewise.\n+\t* gcc.c-torture/compile/HIcmp.c: Likewise.\n+\t* gcc.c-torture/compile/HIset.c: Likewise.\n+\t* gcc.c-torture/compile/QIcmp.c: Likewise.\n+\t* gcc.c-torture/compile/QIset.c: Likewise.\n+\t* gcc.c-torture/compile/SFset.c: Likewise.\n+\t* gcc.c-torture/compile/SIcmp.c: Likewise.\n+\t* gcc.c-torture/compile/SIset.c: Likewise.\n+\t* gcc.c-torture/compile/UHIcmp.c: Likewise.\n+\t* gcc.c-torture/compile/UQIcmp.c: Likewise.\n+\t* gcc.c-torture/compile/USIcmp.c: Likewise.\n+\t* gcc.c-torture/compile/consec.c: Likewise.\n+\t* gcc.c-torture/compile/limits-fndefn.c: Likewise.\n+\t* gcc.c-torture/compile/lll.c: Likewise.\n+\t* gcc.c-torture/compile/parms.c: Likewise.\n+\t* gcc.c-torture/compile/pass.c: Likewise.\n+\t* gcc.c-torture/compile/pp.c: Likewise.\n+\t* gcc.c-torture/compile/pr32399.c: Likewise.\n+\t* gcc.c-torture/compile/pr34091.c: Likewise.\n+\t* gcc.c-torture/compile/pr34688.c: Likewise.\n+\t* gcc.c-torture/compile/pr37258.c: Likewise.\n+\t* gcc.c-torture/compile/pr37327.c: Likewise.\n+\t* gcc.c-torture/compile/pr37381.c: Likewise.\n+\t* gcc.c-torture/compile/pr37669-2.c: Likewise.\n+\t* gcc.c-torture/compile/pr37669.c: Likewise.\n+\t* gcc.c-torture/compile/pr37742-3.c: Likewise.\n+\t* gcc.c-torture/compile/pr44063.c: Likewise.\n+\t* gcc.c-torture/compile/pr48596.c: Likewise.\n+\t* gcc.c-torture/compile/pr51856.c: Likewise.\n+\t* gcc.c-torture/compile/pr54428.c: Likewise.\n+\t* gcc.c-torture/compile/pr54713-1.c: Likewise.\n+\t* gcc.c-torture/compile/pr54713-2.c: Likewise.\n+\t* gcc.c-torture/compile/pr54713-3.c: Likewise.\n+\t* gcc.c-torture/compile/pr55921.c: Likewise.\n+\t* gcc.c-torture/compile/pr70240.c: Likewise.\n+\t* gcc.c-torture/compile/pr70355.c: Likewise.\n+\t* gcc.c-torture/compile/pr82052.c: Likewise.\n+\t* gcc.c-torture/compile/pr83487.c: Likewise.\n+\t* gcc.c-torture/compile/pr86122.c: Likewise.\n+\t* gcc.c-torture/compile/pret-arg.c: Likewise.\n+\t* gcc.c-torture/compile/regs-arg-size.c: Likewise.\n+\t* gcc.c-torture/compile/structret.c: Likewise.\n+\t* gcc.c-torture/compile/uuarg.c: Likewise.\n+\t* gcc.dg/20001009-1.c: Likewise.\n+\t* gcc.dg/20020418-1.c: Likewise.\n+\t* gcc.dg/20020426-2.c: Likewise.\n+\t* gcc.dg/20020430-1.c: Likewise.\n+\t* gcc.dg/20040306-1.c: Likewise.\n+\t* gcc.dg/20040622-2.c: Likewise.\n+\t* gcc.dg/20050603-2.c: Likewise.\n+\t* gcc.dg/20050629-1.c: Likewise.\n+\t* gcc.dg/20061026.c: Likewise.\n+\t* gcc.dg/Warray-bounds-3.c: Likewise.\n+\t* gcc.dg/Warray-bounds-30.c: Likewise.\n+\t* gcc.dg/Wframe-larger-than-2.c: Likewise.\n+\t* gcc.dg/Wframe-larger-than.c: Likewise.\n+\t* gcc.dg/Wrestrict-11.c: Likewise.\n+\t* gcc.c-torture/compile/20000804-1.c: Likewise.\n+\n+2019-09-09  Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_trampolines):\n+\tAdapt to eBPF.\n+\t(check_effective_target_indirect_jumps): Likewise.\n+\t(check_effective_target_nonlocal_goto): Likewise.\n+\t(check_effective_target_global_constructor): Likewise.\n+\t(check_effective_target_return_address): Likewise.\n+\n+2019-09-09  Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\n+\t* gcc.target/bpf/bpf.exp: New file.\n+\t* gcc.target/bpf/builtin-load.c: Likewise.\n+\t* cc.target/bpf/constant-calls.c: Likewise.\n+\t* gcc.target/bpf/diag-funargs.c: Likewise.\n+\t* gcc.target/bpf/diag-funargs-2.c: Likewise.\n+\t* gcc.target/bpf/diag-funargs-3.c: Likewise.\n+\t* gcc.target/bpf/diag-indcalls.c: Likewise.\n+\t* gcc.target/bpf/helper-bind.c: Likewise.\n+\t* cc.target/bpf/helper-bpf-redirect.c: Likewise.\n+\t* gcc.target/bpf/helper-clone-redirect.c: Likewise.\n+\t* gcc.target/bpf/helper-csum-diff.c: Likewise.\n+\t* gcc.target/bpf/helper-csum-update.c: Likewise.\n+\t* gcc.target/bpf/helper-current-task-under-cgroup.c: Likewise.\n+\t* gcc.target/bpf/helper-fib-lookup.c: Likewise.\n+\t* gcc.target/bpf/helper-get-cgroup-classid.c: Likewise.\n+\t* gcc.target/bpf/helper-get-current-cgroup-id.c: Likewise.\n+\t* gcc.target/bpf/helper-get-current-comm.c: Likewise.\n+\t* gcc.target/bpf/helper-get-current-pid-tgid.c: Likewise.\n+\t* gcc.target/bpf/helper-get-current-task.c: Likewise.\n+\t* gcc.target/bpf/helper-get-current-uid-gid.c: Likewise.\n+\t* gcc.target/bpf/helper-get-hash-recalc.c: Likewise.\n+\t* gcc.target/bpf/helper-get-listener-sock.c: Likewise.\n+\t* gcc.target/bpf/helper-get-local-storage.c: Likewise.\n+\t* gcc.target/bpf/helper-get-numa-node-id.c: Likewise.\n+\t* gcc.target/bpf/helper-get-prandom-u32.c: Likewise.\n+\t* gcc.target/bpf/helper-get-route-realm.c: Likewise.\n+\t* gcc.target/bpf/helper-get-smp-processor-id.c: Likewise.\n+\t* gcc.target/bpf/helper-get-socket-cookie.c: Likewise.\n+\t* gcc.target/bpf/helper-get-socket-uid.c: Likewise.\n+\t* gcc.target/bpf/helper-getsockopt.c: Likewise.\n+\t* gcc.target/bpf/helper-get-stack.c: Likewise.\n+\t* gcc.target/bpf/helper-get-stackid.c: Likewise.\n+\t* gcc.target/bpf/helper-ktime-get-ns.c: Likewise.\n+\t* gcc.target/bpf/helper-l3-csum-replace.c: Likewise.\n+\t* gcc.target/bpf/helper-l4-csum-replace.c: Likewise.\n+\t* gcc.target/bpf/helper-lwt-push-encap.c: Likewise.\n+\t* gcc.target/bpf/helper-lwt-seg6-action.c: Likewise.\n+\t* gcc.target/bpf/helper-lwt-seg6-adjust-srh.c: Likewise.\n+\t* gcc.target/bpf/helper-lwt-seg6-store-bytes.c: Likewise.\n+\t* gcc.target/bpf/helper-map-delete-elem.c: Likewise.\n+\t* gcc.target/bpf/helper-map-lookup-elem.c: Likewise.\n+\t* gcc.target/bpf/helper-map-peek-elem.c: Likewise.\n+\t* gcc.target/bpf/helper-map-pop-elem.c: Likewise.\n+\t* gcc.target/bpf/helper-map-push-elem.c: Likewise.\n+\t* gcc.target/bpf/helper-map-update-elem.c: Likewise.\n+\t* gcc.target/bpf/helper-msg-apply-bytes.c: Likewise.\n+\t* gcc.target/bpf/helper-msg-cork-bytes.c: Likewise.\n+\t* gcc.target/bpf/helper-msg-pop-data.c: Likewise.\n+\t* gcc.target/bpf/helper-msg-pull-data.c: Likewise.\n+\t* gcc.target/bpf/helper-msg-push-data.c: Likewise.\n+\t* gcc.target/bpf/helper-msg-redirect-hash.c: Likewise.\n+\t* gcc.target/bpf/helper-msg-redirect-map.c: Likewise.\n+\t* gcc.target/bpf/helper-override-return.c: Likewise.\n+\t* gcc.target/bpf/helper-perf-event-output.c: Likewise.\n+\t* gcc.target/bpf/helper-perf-event-read.c: Likewise.\n+\t* gcc.target/bpf/helper-perf-event-read-value.c: Likewise.\n+\t* gcc.target/bpf/helper-perf-prog-read-value.c: Likewise.\n+\t* gcc.target/bpf/helper-probe-read.c: Likewise.\n+\t* gcc.target/bpf/helper-probe-read-str.c: Likewise.\n+\t* gcc.target/bpf/helper-probe-write-user.c: Likewise.\n+\t* gcc.target/bpf/helper-rc-keydown.c: Likewise.\n+\t* gcc.target/bpf/helper-rc-pointer-rel.c: Likewise.\n+\t* gcc.target/bpf/helper-rc-repeat.c: Likewise.\n+\t* gcc.target/bpf/helper-redirect-map.c: Likewise.\n+\t* gcc.target/bpf/helper-set-hash.c: Likewise.\n+\t* gcc.target/bpf/helper-set-hash-invalid.c: Likewise.\n+\t* gcc.target/bpf/helper-setsockopt.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-adjust-room.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-cgroup-id.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-change-head.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-change-proto.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-change-tail.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-change-type.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-ecn-set-ce.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-get-tunnel-key.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-get-tunnel-opt.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-get-xfrm-state.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-load-bytes.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-load-bytes-relative.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-pull-data.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-set-tunnel-key.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-set-tunnel-opt.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-store-bytes.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-under-cgroup.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-vlan-pop.c: Likewise.\n+\t* gcc.target/bpf/helper-skb-vlan-push.c: Likewise.\n+\t* gcc.target/bpf/helper-skc-lookup-tcp.c: Likewise.\n+\t* gcc.target/bpf/helper-sk-fullsock.c: Likewise.\n+\t* gcc.target/bpf/helper-sk-lookup-tcp.c: Likewise.\n+\t* gcc.target/bpf/helper-sk-lookup-upd.c: Likewise.\n+\t* gcc.target/bpf/helper-sk-redirect-hash.c: Likewise.\n+\t* gcc.target/bpf/helper-sk-redirect-map.c: Likewise.\n+\t* gcc.target/bpf/helper-sk-release.c: Likewise.\n+\t* gcc.target/bpf/helper-sk-select-reuseport.c: Likewise.\n+\t* gcc.target/bpf/helper-sk-storage-delete.c: Likewise.\n+\t* gcc.target/bpf/helper-sk-storage-get.c: Likewise.\n+\t* gcc.target/bpf/helper-sock-hash-update.c: Likewise.\n+\t* gcc.target/bpf/helper-sock-map-update.c: Likewise.\n+\t* gcc.target/bpf/helper-sock-ops-cb-flags-set.c: Likewise.\n+\t* gcc.target/bpf/helper-spin-lock.c: Likewise.\n+\t* gcc.target/bpf/helper-spin-unlock.c: Likewise.\n+\t* gcc.target/bpf/helper-strtol.c: Likewise.\n+\t* gcc.target/bpf/helper-strtoul.c: Likewise.\n+\t* gcc.target/bpf/helper-sysctl-get-current-value.c: Likewise.\n+\t* gcc.target/bpf/helper-sysctl-get-name.c: Likewise.\n+\t* gcc.target/bpf/helper-sysctl-get-new-value.c: Likewise.\n+\t* gcc.target/bpf/helper-sysctl-set-new-value.c: Likewise.\n+\t* gcc.target/bpf/helper-tail-call.c: Likewise.\n+\t* gcc.target/bpf/helper-tcp-check-syncookie.c: Likewise.\n+\t* gcc.target/bpf/helper-tcp-sock.c: Likewise.\n+\t* gcc.target/bpf/helper-trace-printk.c: Likewise.\n+\t* gcc.target/bpf/helper-xdp-adjust-head.c: Likewise.\n+\t* gcc.target/bpf/helper-xdp-adjust-meta.c: Likewise.\n+\t* gcc.target/bpf/helper-xdp-adjust-tail.c: Likewise.\n+\t* gcc.target/bpf/skb-ancestor-cgroup-id.c: Likewise.\n+\t* gcc.target/bpf/sync-fetch-and-add.c: Likewise.\n+\n 2019-09-09  Jose E. Marchesi  <jose.marchesi@oracle.com>\n \n \t* lib/target-supports.exp (check_effective_target_indirect_calls):"}, {"sha": "b83d6a4052003cf7caf866bf63c86ab18b2317f7", "filename": "gcc/testsuite/gcc.c-torture/compile/20000211-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000211-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000211-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000211-1.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n typedef __SIZE_TYPE__ size_t;\n typedef unsigned char Bufbyte;\n typedef int Bytecount;"}, {"sha": "cb56028fb8b7dd4521dbd634f27f68f220172bbd", "filename": "gcc/testsuite/gcc.c-torture/compile/20000403-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000403-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000403-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000403-1.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n struct utsname {\n \tchar\tsysname[32 ];\t \n \tchar\tversion[32 ];\t "}, {"sha": "95bb0fafd7044f90a12dec16573e3b99d04a2616", "filename": "gcc/testsuite/gcc.c-torture/compile/20000804-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000804-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000804-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000804-1.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -5,6 +5,7 @@\n /* { dg-skip-if \"No 64-bit registers\" { m32c-*-* } } */\n /* { dg-skip-if \"Not enough 64-bit registers\" { pdp11-*-* } { \"-O0\" } { \"\" } } */\n /* { dg-xfail-if \"Inconsistent constraint on asm\" { csky-*-* } { \"-O0\" } { \"\" } } */\n+/* { dg-xfail-if \"Inconsistent constraint on asm\" { bpf-*-* } { \"-O0\" } { \"\" } } */\n /* { dg-xfail-if \"\" { h8300-*-* } } */\n /* { dg-require-stack-size \"99*4+16\" } */\n "}, {"sha": "234cdbf1b14f6dff6acc2b3572182402ac4a77d2", "filename": "gcc/testsuite/gcc.c-torture/compile/20001226-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001226-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001226-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001226-1.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -2,6 +2,7 @@\n /* { dg-skip-if \"too much code for avr\" { \"avr-*-*\" } } */\n /* { dg-skip-if \"too much code for pdp11\" { \"pdp11-*-*\" } } */\n /* { dg-skip-if \"\" { m32c-*-* } } */\n+/* { dg-skip-if \"jumps too far for eBPF\" { bpf-*-* } } */\n /* { dg-timeout-factor 4.0 } */\n \n /* This testcase exposed two branch shortening bugs on powerpc.  */"}, {"sha": "116b0923721e182fbfef1aa0be579a70404acd24", "filename": "gcc/testsuite/gcc.c-torture/compile/20030903-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20030903-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20030903-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20030903-1.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,6 +1,8 @@\n /* Derived from PR optimization/11700.  */\n /* The compiler used to ICE during reload for m68k targets.  */\n \n+/* { dg-skip-if \"exceeds eBPF stack limit\" { bpf-*-* } } */\n+\n void check_complex (__complex__ double, __complex__ double,\n                     __complex__ double, __complex__ int);\n void check_float (double, double, double, int);"}, {"sha": "bec6c9372a8af2f89e838f3df5125631e8056c04", "filename": "gcc/testsuite/gcc.c-torture/compile/20031125-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20031125-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20031125-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20031125-1.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n short *_offsetTable;\n /* This tests to make sure PRE splits the entry block ->block 0 edge\n    when there are multiple block 0 predecessors."}, {"sha": "6027cb53fb4cb219b69cef201c34e0f64da5cece", "filename": "gcc/testsuite/gcc.c-torture/compile/20040101-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040101-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040101-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040101-1.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,4 +1,5 @@\n /* { dg-skip-if \"not enough registers\" { pdp11-*-* } } */\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n \n typedef unsigned short uint16_t;\n typedef unsigned int uint32_t;"}, {"sha": "3a1fbde2969df9c17b0ff9b8a697fe6a4eae6bcf", "filename": "gcc/testsuite/gcc.c-torture/compile/20040317-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040317-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040317-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040317-2.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n typedef struct _ScaleRec *ScaleWidget;\n typedef struct\n {"}, {"sha": "aea43a56f34de4bb06921a4978eac65ed48a14f6", "filename": "gcc/testsuite/gcc.c-torture/compile/20040726-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040726-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040726-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040726-1.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,4 +1,6 @@\n /* PR rtl-optimization/16643 */\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n void foo (int a, int b, int c, int d, int e, int *f)\n {\n   if (a == 0)"}, {"sha": "55751ec8ab29a053aed48994c1f0d9458c0fb492", "filename": "gcc/testsuite/gcc.c-torture/compile/20051216-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20051216-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20051216-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20051216-1.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,4 +1,5 @@\n /* PR rtl-optimization/25432 */\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n \n void *malloc (__SIZE_TYPE__);\n void *realloc (void *, __SIZE_TYPE__);"}, {"sha": "46bdcf5e347e09d5aa1b961369d0c9d27de6a8d8", "filename": "gcc/testsuite/gcc.c-torture/compile/20101217-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20101217-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20101217-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20101217-1.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,5 +1,7 @@\n /* Testcase provided by HUAWEI.  */\n-#include <stdio.h>\n+\n+extern int printf (const char * __format, ...);\n+\n int main()\n {\n         int cur_k;"}, {"sha": "12252b4b22903a67f51782607cd2d9764afeca82", "filename": "gcc/testsuite/gcc.c-torture/compile/900313-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F900313-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F900313-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F900313-1.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,4 +1,6 @@\n /* { dg-require-effective-target alloca } */\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n main ()\n {\n   char *a;"}, {"sha": "0fac5f3495f59fca5821fa24f5349dd0e243fefe", "filename": "gcc/testsuite/gcc.c-torture/compile/920501-7.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920501-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920501-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920501-7.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,4 @@\n /* { dg-require-effective-target label_values } */\n+/* { dg-skip-if \"no support for indirect jumps\" { bpf-*-* } } */\n \n x(){if(&&e-&&b<0)x();b:goto*&&b;e:;}"}, {"sha": "759a356b5b75cfc573b0daaa4c0e5839e168c64e", "filename": "gcc/testsuite/gcc.c-torture/compile/920625-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920625-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920625-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920625-1.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n typedef unsigned long int unsigned_word;\n typedef signed long int signed_word;\n typedef unsigned_word word;"}, {"sha": "9e16fe17dd957e27a5de55628f40bf05ef490634", "filename": "gcc/testsuite/gcc.c-torture/compile/930421-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F930421-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F930421-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F930421-1.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n double q(double);\n \n f (int **x, int *r, int *s, int a, int b, int c, int d)"}, {"sha": "dd45bbccc38d17f8676defca94356f87098fc4da", "filename": "gcc/testsuite/gcc.c-torture/compile/930623-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F930623-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F930623-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F930623-1.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-effective-target untyped_assembly } */\n+/* { dg-skip-if \"no __builtin_apply in eBPF\" { bpf-*-* } } */\n \n g (a, b) {}\n "}, {"sha": "cf47f60d5eaf44bd6099ec808d32151e087a4732", "filename": "gcc/testsuite/gcc.c-torture/compile/961004-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F961004-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F961004-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F961004-1.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n void\n f1 (o1, o2, o3, i, j, k)\n      long long *o1, *o2, *o3;"}, {"sha": "6e043a7af193a4e54dd8bd065dedc52038d5d018", "filename": "gcc/testsuite/gcc.c-torture/compile/980504-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F980504-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F980504-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F980504-1.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n typedef struct _geom_elem {\n   double        coeffs[6];\n } pGeomDefRec, *pGeomDefPtr;"}, {"sha": "5bd83b17063b7e2e6fda939e623881b171c3d6ea", "filename": "gcc/testsuite/gcc.c-torture/compile/980816-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F980816-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F980816-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F980816-1.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n typedef __SIZE_TYPE__ size_t;\n typedef void *XtPointer;\n "}, {"sha": "befff06579e4d71a9c0f5b3b62789487374a9395", "filename": "gcc/testsuite/gcc.c-torture/compile/990625-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F990625-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F990625-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F990625-1.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-skip-if \"no string.h in eBPF\" { bpf-*-* } } */\n+\n #define __USE_STRING_INLINES\n #include <string.h>\n "}, {"sha": "808874de1a88dc38c5e48f2d2293910a6a1fcfc4", "filename": "gcc/testsuite/gcc.c-torture/compile/DFcmp.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2FDFcmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2FDFcmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2FDFcmp.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,4 +1,6 @@\n /* { dg-require-effective-target int32plus } */\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n #define type double\n \n type glob0, glob1;"}, {"sha": "6e68271a00946067860503ff0b58725ee4deb289", "filename": "gcc/testsuite/gcc.c-torture/compile/HIcmp.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2FHIcmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2FHIcmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2FHIcmp.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n #define type short\n \n type glob0, glob1;"}, {"sha": "a0d426c2c077eba3e910aa457ae890953f659897", "filename": "gcc/testsuite/gcc.c-torture/compile/HIset.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2FHIset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2FHIset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2FHIset.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n #define E0 ((type *)10000000)\n #define reg0 r0\n #define indreg0 (*p0)"}, {"sha": "a4dba2487e42c57b5151089e566742d95d4aa09f", "filename": "gcc/testsuite/gcc.c-torture/compile/QIcmp.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2FQIcmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2FQIcmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2FQIcmp.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n #define type signed char\n \n type glob0, glob1;"}, {"sha": "e2fde2bda7e1a91be93742ac6f53252412e7dd68", "filename": "gcc/testsuite/gcc.c-torture/compile/QIset.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2FQIset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2FQIset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2FQIset.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n #define E0 ((type *)10000000)\n #define reg0 r0\n #define indreg0 (*p0)"}, {"sha": "a7efecf9717803b847c433b5d97c989a04c7eabb", "filename": "gcc/testsuite/gcc.c-torture/compile/SFset.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2FSFset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2FSFset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2FSFset.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-effective-target int32plus } */\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n \n #define E0 ((type *)10000000)\n #define reg0 r0"}, {"sha": "ce1281b60938a5e402b20b91cd8a9c3ef9bbea33", "filename": "gcc/testsuite/gcc.c-torture/compile/SIcmp.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2FSIcmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2FSIcmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2FSIcmp.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n #define type int\n \n type glob0, glob1;"}, {"sha": "b200a264b95490d04fe7d2498fb275f44f845670", "filename": "gcc/testsuite/gcc.c-torture/compile/SIset.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2FSIset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2FSIset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2FSIset.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n #define E0 ((type *)10000000)\n #define reg0 r0\n #define indreg0 (*p0)"}, {"sha": "b0029d23ea4f4120dbe38e43f23ebb2159e75de4", "filename": "gcc/testsuite/gcc.c-torture/compile/UHIcmp.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2FUHIcmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2FUHIcmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2FUHIcmp.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n #define type unsigned short\n \n type glob0, glob1;"}, {"sha": "e28d13b03abc7d3cb595cf3a06fcd261bf137de8", "filename": "gcc/testsuite/gcc.c-torture/compile/UQIcmp.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2FUQIcmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2FUQIcmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2FUQIcmp.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n #define type unsigned char\n \n type glob0, glob1;"}, {"sha": "27e5503bd4d4afe4f378ffc991d9a74c290bc34c", "filename": "gcc/testsuite/gcc.c-torture/compile/USIcmp.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2FUSIcmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2FUSIcmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2FUSIcmp.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n #define type unsigned int\n \n type glob0, glob1;"}, {"sha": "b8c376d707696a9c3cd3a842f144fc134acb359f", "filename": "gcc/testsuite/gcc.c-torture/compile/consec.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fconsec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fconsec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fconsec.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,4 +1,6 @@\n /* { dg-require-effective-target untyped_assembly } */\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n int glob;\n \n conseq (a, b, c, d)"}, {"sha": "53204735493860c3f66cc6d6d81a7bff933c53f2", "filename": "gcc/testsuite/gcc.c-torture/compile/limits-fndefn.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flimits-fndefn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flimits-fndefn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flimits-fndefn.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,5 +1,6 @@\n /* { dg-skip-if \"too complex for avr\" { avr-*-* } } */\n /* { dg-skip-if \"ptxas times out\" { nvptx-*-* } } */\n+/* { dg-skip-if \"no chance for bpf\" { bpf-*-* } } */\n /* { dg-timeout-factor 4.0 } */\n #define LIM1(x) x##0, x##1, x##2, x##3, x##4, x##5, x##6, x##7, x##8, x##9,\n #define LIM2(x) LIM1(x##0) LIM1(x##1) LIM1(x##2) LIM1(x##3) LIM1(x##4) \\"}, {"sha": "ea09c871c6b2e990ed1734d4efee4d1e9a4896f4", "filename": "gcc/testsuite/gcc.c-torture/compile/lll.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flll.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,4 @@\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n \n byte_match_count2 (buf, n, xm, m1, m2, m3, m4)\n      unsigned *buf;"}, {"sha": "1bfc93d2abb960f5d880c0e4ab49927fb2d65761", "filename": "gcc/testsuite/gcc.c-torture/compile/parms.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fparms.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fparms.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fparms.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-effective-target alloca } */\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n #define alloca __builtin_alloca\n \n x (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, x, y)"}, {"sha": "529a01dac85cd4309ed08604b36064fcd6311950", "filename": "gcc/testsuite/gcc.c-torture/compile/pass.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpass.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,4 +1,6 @@\n /* { dg-require-effective-target untyped_assembly } */\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n int\n foo (a, b, c)\n {"}, {"sha": "20287ef23548626b01c490e7a54f41b6da2295ec", "filename": "gcc/testsuite/gcc.c-torture/compile/poor.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpoor.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpoor.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpoor.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-skip-if \"exceeds eBPF stack limit\" { bpf-*-* } } */\n+\n typedef struct\n {\n \tchar\tc[510];"}, {"sha": "c1e09eab4077bee0ba6d43589b0620e1674a8c5e", "filename": "gcc/testsuite/gcc.c-torture/compile/pp.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpp.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n foo (a, b, c, d, e, i0, f, i1)\n      double a, b, c, d, e, f;\n      int i0, i1;"}, {"sha": "43ef3fd9523a1e766f5dccb39f23366d750a0dd4", "filename": "gcc/testsuite/gcc.c-torture/compile/pr25311.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr25311.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr25311.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr25311.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,4 @@\n+/* { dg-skip-if \"exceeds eBPF stack limit\" { bpf-*-* } } */\n \n struct w\n {"}, {"sha": "b29dbd7986a3ae7f7341ac120711bdbda3be7530", "filename": "gcc/testsuite/gcc.c-torture/compile/pr32399.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr32399.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr32399.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr32399.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n void f(unsigned char *src, unsigned char *dst, int num, unsigned char *pos, unsigned char *diffuse, int hasdiffuse, unsigned char *specular, int hasspecular) {\n     int i;\n "}, {"sha": "a623a383fd0720c942a57cf3536c242431c17453", "filename": "gcc/testsuite/gcc.c-torture/compile/pr34091.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr34091.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr34091.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr34091.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n typedef unsigned int GLenum;\n typedef unsigned char GLboolean;\n typedef int GLint;"}, {"sha": "ec890cb8f15bf595c1a46a0491cf01ce69df884a", "filename": "gcc/testsuite/gcc.c-torture/compile/pr34688.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr34688.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr34688.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr34688.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n typedef __SIZE_TYPE__ size_t;\n          typedef struct {\n         }"}, {"sha": "41801781e3acdacd1a6358299797acff799803c4", "filename": "gcc/testsuite/gcc.c-torture/compile/pr37258.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37258.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37258.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37258.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,4 +1,6 @@\n /* { dg-require-effective-target untyped_assembly } */\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n typedef signed char int8_t;\n typedef short int int16_t;\n typedef int int32_t;"}, {"sha": "5ca9d1d45b61c3791b835406e52042a9a641435a", "filename": "gcc/testsuite/gcc.c-torture/compile/pr37327.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37327.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37327.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37327.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,4 +1,6 @@\n /* { dg-require-effective-target untyped_assembly } */\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n typedef signed char int8_t;\n typedef short int int16_t;\n typedef int int32_t;"}, {"sha": "d8cd47d329d06d5632ff182c4630b1274f47fdf8", "filename": "gcc/testsuite/gcc.c-torture/compile/pr37381.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37381.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37381.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37381.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n extern unsigned int __invalid_size_argument_for_IOC;\n typedef unsigned int __u32;\n struct video_window"}, {"sha": "2170dda67f0eec620f047ac504c64a3b1826ffd7", "filename": "gcc/testsuite/gcc.c-torture/compile/pr37669-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37669-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37669-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37669-2.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,4 +1,5 @@\n /* PR middle-end/37669 */\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n \n #define FMT10 \"%d%d%d%d%d%d%d%d%d%d\"\n #define FMT100 FMT10 FMT10 FMT10 FMT10 FMT10 FMT10 FMT10 FMT10 FMT10 FMT10"}, {"sha": "36e4c39d8ed75b507059cefe55ab5474e559634b", "filename": "gcc/testsuite/gcc.c-torture/compile/pr37669.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37669.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37669.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37669.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,6 +1,7 @@\n /* This testcase used to fail because a miscompiled execute_fold_all_builtins. */\n /* { dg-options \"-fgnu89-inline\" } */\n /* { dg-require-effective-target int32plus } */\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n \n typedef __SIZE_TYPE__ size_t;\n extern __inline __attribute__ ((__always_inline__)) int __attribute__"}, {"sha": "9e7b10fb7a33f99a2e97c7988f0ddf96ec519476", "filename": "gcc/testsuite/gcc.c-torture/compile/pr37742-3.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37742-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37742-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37742-3.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n void matmul_i4 (int * __restrict dest_y,\n \t\tconst int * __restrict abase,\n \t\tconst int * __restrict bbase_y,"}, {"sha": "ae6a63b24b8c358b28eee7a37d0ffaeab89de576", "filename": "gcc/testsuite/gcc.c-torture/compile/pr39928-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39928-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39928-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39928-1.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,4 +1,6 @@\n /* { dg-options \"-msse\" { target { i?86-*-* x86_64-*-* } } } */\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n typedef float __m128 __attribute__ ((__vector_size__ (16), __may_alias__));\n extern __m128 _mm_sub_ps (__m128 __A, __m128 __B);\n extern __m128 _mm_mul_ps (__m128 __A, __m128 __B);"}, {"sha": "32208f610f9bc34308a7debb735847ba3bd246a0", "filename": "gcc/testsuite/gcc.c-torture/compile/pr44063.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr44063.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr44063.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr44063.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-skip-if \"exceeds eBPF stack limit\" { bpf-*-* } } */\n+\n typedef signed char int8_t;\n typedef short int16_t;\n typedef unsigned char uint8_t;"}, {"sha": "743bd82e868905d7b4af4a3f6bb4c0d26af4383e", "filename": "gcc/testsuite/gcc.c-torture/compile/pr48596.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr48596.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr48596.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr48596.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,4 +1,6 @@\n /* PR target/48596  */\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n enum { nrrdCenterUnknown, nrrdCenterNode, nrrdCenterCell, nrrdCenterLast };\n typedef struct { int size; int center; }  NrrdAxis;\n typedef struct { int dim; NrrdAxis axis[10]; } Nrrd;"}, {"sha": "823a0bed073c86d6cb07f66f897ea02728c61fb3", "filename": "gcc/testsuite/gcc.c-torture/compile/pr51856.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr51856.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr51856.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr51856.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n struct B { int b1; long long b2, b3; int b4; };\n struct C { char c1[40], c2, c3[96]; long long c4[5], c5; char c6[596]; };\n void fn1 (long long), fn2 (char *, int), fn4 (void);"}, {"sha": "d783337cfdb99af460ac0010573237a6fb68d30e", "filename": "gcc/testsuite/gcc.c-torture/compile/pr54428.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54428.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54428.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54428.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,4 +1,5 @@\n /* PR c/54428 */\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n \n typedef double _Complex C;\n "}, {"sha": "0d4172a576b6c043c9a1d88df16ce25239aa28e8", "filename": "gcc/testsuite/gcc.c-torture/compile/pr54713-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54713-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54713-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54713-1.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,4 +1,5 @@\n /* PR tree-optimization/54713 */\n+/* { dg-skip-if \"exceeds eBPF stack limit\" { bpf-*-* } } */\n \n #ifndef N\n #define N 8"}, {"sha": "f7d2364e1973db7139adf8e8b9a588e066f5c63b", "filename": "gcc/testsuite/gcc.c-torture/compile/pr54713-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54713-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54713-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54713-2.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,4 +1,5 @@\n /* PR tree-optimization/54713 */\n+/* { dg-skip-if \"exceeds eBPF stack limit\" { bpf-*-* } } */\n \n #define N 16\n #define ONE 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"}, {"sha": "76a35b067c51a46a4af8aea7dabd9ee25a83e18a", "filename": "gcc/testsuite/gcc.c-torture/compile/pr54713-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54713-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54713-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54713-3.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,4 +1,5 @@\n /* PR tree-optimization/54713 */\n+/* { dg-skip-if \"exceeds eBPF stack limit\" { bpf-*-* } } */\n \n #define N 32\n #define ONE 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \\"}, {"sha": "cf9084e33f0c38db89bcede770e3c538c9bf1e75", "filename": "gcc/testsuite/gcc.c-torture/compile/pr55921.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr55921.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr55921.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr55921.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,5 +1,6 @@\n /* PR tree-optimization/55921 */\n /* { dg-skip-if \"Not enough registers\" { \"pdp11-*-*\" } } */\n+/* { dg-skip-if \"exceeds eBPF stack limit\" { bpf-*-* } } */\n \n typedef union\n {"}, {"sha": "aabfddad43f3653daf31a5e2e92d2a5144d0cc63", "filename": "gcc/testsuite/gcc.c-torture/compile/pr70061.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr70061.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr70061.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr70061.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n typedef int v8si __attribute__ ((vector_size (32)));\n \n int"}, {"sha": "466d3a7c961309d5a8cf46a412910c2a69e3b7a0", "filename": "gcc/testsuite/gcc.c-torture/compile/pr70240.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr70240.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr70240.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr70240.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n typedef short v16hi __attribute__ ((vector_size (32)));\n typedef int v8si __attribute__ ((vector_size (32)));\n typedef long long v4di __attribute__ ((vector_size (32)));"}, {"sha": "f7114208005bae11bb3321802c6e1eec443bb03e", "filename": "gcc/testsuite/gcc.c-torture/compile/pr70355.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr70355.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr70355.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr70355.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,5 +1,7 @@\n /* { dg-require-effective-target int128 } */\n /* { dg-additional-options \"-g\" } */\n+/* { dg-skip-if \"exceeds eBPF stack limit\" { bpf-*-* } } */\n+\n \n typedef unsigned __int128 v2ti __attribute__ ((vector_size (32)));\n "}, {"sha": "09fac5edb1e59d4eaaa532d99cb0eb4ddc43b04a", "filename": "gcc/testsuite/gcc.c-torture/compile/pr82052.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr82052.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr82052.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr82052.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-skip-if \"exceeds eBPF stack limit\" { bpf-*-* } } */\n+\n typedef unsigned char uint8_t;\n typedef unsigned short uint16_t;\n typedef unsigned uint32_t;"}, {"sha": "9de0e17939f8bf14f98100b7ed9b35d91821189d", "filename": "gcc/testsuite/gcc.c-torture/compile/pr83487.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr83487.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr83487.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr83487.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,4 +1,5 @@\n /* PR middle-end/83487 */\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n \n struct __attribute__ ((aligned)) A {};\n struct A a;"}, {"sha": "1bd467331830fdad95f2bd1692010f743453aa29", "filename": "gcc/testsuite/gcc.c-torture/compile/pr86122.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr86122.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr86122.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr86122.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,4 +1,5 @@\n /* PR middle-end/86122 */\n+/* { dg-skip-if \"exceeds eBPF stack limit\" { bpf-*-* } } */\n \n _Complex int\n foo (_Complex int x)"}, {"sha": "d86d135dc4b3151c371c7e010a86f09fdec66549", "filename": "gcc/testsuite/gcc.c-torture/compile/pret-arg.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpret-arg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpret-arg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpret-arg.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n foo (a, b, c, d, e, f, g, h, i, j, xx)\n      double xx;\n {"}, {"sha": "77518866d3f623bf7162a3e5ccc440adfc30ef3e", "filename": "gcc/testsuite/gcc.c-torture/compile/regs-arg-size.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fregs-arg-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fregs-arg-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fregs-arg-size.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-skip-if \"exceeds eBPF stack limit\" { bpf-*-* } } */\n+\n int foo;\n typedef long unsigned int size_t;\n typedef short unsigned int wchar_t;"}, {"sha": "d99eaa630bbc29b93a7610e58235424fb1cda5cd", "filename": "gcc/testsuite/gcc.c-torture/compile/structret.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fstructret.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fstructret.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fstructret.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n struct foo\n {\n   int a, b, c, d;"}, {"sha": "875c7c3b50f2c81b98c92652cc11dd158ce8bcad", "filename": "gcc/testsuite/gcc.c-torture/compile/uuarg.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fuuarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fuuarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fuuarg.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,4 +1,6 @@\n /* { dg-require-effective-target untyped_assembly } */\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n+\n foo (a, b, c, d, e, f, g, h, i)\n {\n   return foo () + i;"}, {"sha": "580e4b4d307d4e7fdbb910223f11a9d6aa6fc1b6", "filename": "gcc/testsuite/gcc.dg/20001009-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.dg%2F20001009-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.dg%2F20001009-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20001009-1.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile { target fpic } } */\n /* { dg-options \"-O2 -fpic\" } */\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n \n extern void foo (void *a, double x, double y);\n void"}, {"sha": "456967fdd363209198117db4aa6c9f692733f330", "filename": "gcc/testsuite/gcc.dg/20020418-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.dg%2F20020418-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.dg%2F20020418-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020418-1.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -2,6 +2,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2\" } */\n /* { dg-options \"-O2 -msse -ffast-math\" { target i?86-*-* x86_64-*-* } } */\n+/* { dg-skip-if \"exceeds eBPF stack limit\" { bpf-*-* } } */\n \n void bar (float *a, float *b);\n "}, {"sha": "96517f7b840552af24fc13527ae79c5dc1407168", "filename": "gcc/testsuite/gcc.dg/20020426-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.dg%2F20020426-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.dg%2F20020426-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020426-2.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -3,6 +3,7 @@\n /* { dg-do run } */\n /* { dg-options \"-O2\" } */\n /* { dg-options \"-O2 -frename-registers -fomit-frame-pointer -fPIC -mtune=i686\" { target { { i?86-*-* x86_64-*-* } && { ia32 && fpic } } } } */\n+/* { dg-skip-if \"exceeds eBPF stack limit\" { bpf-*-* } } */\n \n extern void exit (int);\n "}, {"sha": "f48bb672aaf64e2fdf5ea4e45cb9b51159bdb3c3", "filename": "gcc/testsuite/gcc.dg/20020430-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.dg%2F20020430-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.dg%2F20020430-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020430-1.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -6,6 +6,7 @@\n \n /* { dg-do compile { target fpic } } */\n /* { dg-options \"-O2 -frename-registers -fpic\" } */\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n \n typedef unsigned long XID;\n typedef XID Window;"}, {"sha": "8cac8697d99068610cbc1b435eb2012e9306fe2b", "filename": "gcc/testsuite/gcc.dg/20040306-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.dg%2F20040306-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.dg%2F20040306-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20040306-1.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -2,7 +2,7 @@\n \n /* { dg-do compile } */\n /* { dg-options \"-O2\" } */\n-\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n \n typedef struct test\n {"}, {"sha": "e62ec36d43a49f53f06b973439c475812f00633f", "filename": "gcc/testsuite/gcc.dg/20040622-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.dg%2F20040622-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.dg%2F20040622-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20040622-2.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do link } */\n /* { dg-require-effective-target ptr32plus } */\n+/* { dg-skip-if \"exceeds eBPF stack limit\" { bpf-*-* } } */\n /* This validates codegen for [r1+32760] on Darwin. */\n void f(char x[32688], double *y, double *z) __attribute__((noinline));\n void f(char x[32688], double *y, double *z) {}"}, {"sha": "a135e3ea1a09f54c9b1e8b06440c1723ff4fd8ff", "filename": "gcc/testsuite/gcc.dg/20050603-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.dg%2F20050603-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.dg%2F20050603-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20050603-2.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do run } */\n /* { dg-options \"-O2\" } */\n+/* { dg-skip-if \"no stdlib.h in eBPF\" { bpf-*-* } } */\n #include <stdlib.h>\n struct s {\n   unsigned short f: 16;"}, {"sha": "99d9ce823b0a6d4cd0796f5782248924e7129537", "filename": "gcc/testsuite/gcc.dg/20050629-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.dg%2F20050629-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.dg%2F20050629-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20050629-1.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -w\" } */\n+/* { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n \n /* This file was automatically reduced from tree-ssa-operands.c.  It\n    contains many warnings, but it exposes a copy propagation bug that"}, {"sha": "fa8069ce4cfa23f5448c003314e9b4efafcd4f91", "filename": "gcc/testsuite/gcc.dg/20061026.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.dg%2F20061026.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.dg%2F20061026.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20061026.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O1\" } */\n+/* { dg-skip-if \"exceeds eBPF stack limit\" { bpf-*-* } } */\n \n /* This testcase failed on s390.  The frame size for function f will be\n    exactly 32768 bytes.  The back end has to recognize that this is to"}, {"sha": "f119502f0250eda4cf32f5173c8c0c8054f103d6", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-3.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -Warray-bounds\" } */\n+/* { dg-skip-if \"exceeds eBPF stack limit\" { bpf-*-* } } */\n /* based on PR 31227 */\n \n typedef __SIZE_TYPE__ size_t;"}, {"sha": "b99656821017626fe1d03fcaec8f7689f715c82e", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-30.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-30.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,7 +1,8 @@\n /* PR tree-optimization/84047 - missing -Warray-bounds on an out-of-bounds\n    index into an array\n    { dg-do compile }\n-   { dg-options \"-O2 -Warray-bounds=2 -ftrack-macro-expansion=0\" } */\n+   { dg-options \"-O2 -Warray-bounds=2 -ftrack-macro-expansion=0\" }\n+   { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n \n #include \"range.h\"\n "}, {"sha": "d7068d04aef618b600837f8fb8f7da30b889bf8d", "filename": "gcc/testsuite/gcc.dg/Wframe-larger-than-2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.dg%2FWframe-larger-than-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.dg%2FWframe-larger-than-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWframe-larger-than-2.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,6 +1,7 @@\n /* Exercise -Wframe-larger-than= with a byte-size suffix.\n    { dg-do compile }\n-   { dg-options \"-O -Wframe-larger-than=1KB\" } */\n+   { dg-options \"-O -Wframe-larger-than=1KB\" }\n+   { dg-skip-if \"exceeds eBPF stack limit\" { bpf-*-* } } */\n \n extern void f (void*, ...);\n "}, {"sha": "8a40cf36df86a302c156f12f29c2b744b7835ce6", "filename": "gcc/testsuite/gcc.dg/Wframe-larger-than.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.dg%2FWframe-larger-than.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.dg%2FWframe-larger-than.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWframe-larger-than.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -4,6 +4,7 @@\n \n /* { dg-do compile } */\n /* { dg-options \"-Wframe-larger-than=2048\" } */\n+/* { dg-skip-if \"exceeds eBPF stack limit\" { bpf-*-* } } */\n \n extern void func(char *);\n "}, {"sha": "07b9cddad4bf52cc3bd593661407799cb05ddae6", "filename": "gcc/testsuite/gcc.dg/Wrestrict-11.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.dg%2FWrestrict-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.dg%2FWrestrict-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWrestrict-11.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -3,7 +3,8 @@\n    that calls to strncpy involving multidimensional arrays of structs don't\n    trigger false positive -Wrestrict warnings.\n    { dg-do compile }\n-   { dg-options \"-O2 -Wrestrict -ftrack-macro-expansion=0\" } */\n+   { dg-options \"-O2 -Wrestrict -ftrack-macro-expansion=0\" }\n+   { dg-skip-if \"too many arguments in function call\" { bpf-*-* } } */\n \n typedef __SIZE_TYPE__ size_t;\n "}, {"sha": "5e27c1deb33eda53c8e2dd1f44f09ef2e99adf8d", "filename": "gcc/testsuite/gcc.dg/builtins-config.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-config.h?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2003, 2004, 2005, 2006, 2009, 2011, 2012\n+/* Copyright (C) 2003, 2004, 2005, 2006, 2009, 2011, 2012, 2019\n    Free Software Foundation.\n \n    Define macros useful in tests for bulitin functions.  */\n@@ -20,6 +20,8 @@\n /* FreeBSD up to version 8 lacks support for cexp and friends.  */\n #elif defined(__vxworks)\n /* VxWorks doesn't have a full C99 time.  (cabs is missing, for example.)  */\n+#elif defined (__BPF__)\n+/* No chance for eBPF to support C99 functions.  */\n #elif defined(_WIN32) && !defined(__CYGWIN__)\n /* Windows doesn't have the entire C99 runtime.  */\n #elif (defined(__APPLE__) && defined(__ppc__) \\"}, {"sha": "e5c8cfcf6b025efed56eb25863d2f54a7a4680c3", "filename": "gcc/testsuite/gcc.target/bpf/bpf.exp", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fbpf.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fbpf.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fbpf.exp?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,41 @@\n+# Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't an eBPF target.\n+if ![istarget bpf-*-*] then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cS\\]]] \\\n+\t\"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "0f93d91fb6fe25874d5136be577d8a56ff02d934", "filename": "gcc/testsuite/gcc.target/bpf/builtin-load.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fbuiltin-load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fbuiltin-load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fbuiltin-load.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -std=gnu99\" } */\n+\n+void foo ()\n+{\n+  long long ll, off;\n+\n+  /* Indirect.  */\n+  ll = __builtin_bpf_load_byte (off);\n+  ll = __builtin_bpf_load_half (off);\n+  ll = __builtin_bpf_load_word (off);\n+\n+  /* Absolute.  */\n+  ll = __builtin_bpf_load_byte (0);\n+  ll = __builtin_bpf_load_half (4);\n+  ll = __builtin_bpf_load_word (8);\n+}\n+\n+/* { dg-final { scan-assembler \"ldindb\\t%r.,0.*ldindh\\t%r.,0.*ldindw\\t%r.,0\" } } */\n+/* { dg-final { scan-assembler \"ldabsb\\t0.*ldabsh\\t4.*ldabsw\\t8\" } } */"}, {"sha": "84612a92ae90362d255d884c92c384577234c61b", "filename": "gcc/testsuite/gcc.target/bpf/constant-calls.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fconstant-calls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fconstant-calls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fconstant-calls.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-xfail-if \"\" { bpf-*-* } } */\n+\n+typedef void  *(*T)(void);\n+f1 ()\n+{\n+  ((T) 0)();\n+}\n+f2 ()\n+{\n+  ((T) 1000)();\n+}\n+f3 ()\n+{\n+  ((T) 1000000)();\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t0\" } } */\n+/* { dg-final { scan-assembler \"call\\t1000\" } } */\n+/* { dg-final { scan-assembler \"call\\t10000\" } } */"}, {"sha": "7c991af336b67ac2adbb4bbb5cadbfefb31fe6b4", "filename": "gcc/testsuite/gcc.target/bpf/diag-funargs-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fdiag-funargs-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fdiag-funargs-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fdiag-funargs-2.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,26 @@\n+/* Verify proper errors are generated for functions taking too many\n+   arguments, with aggregates and 128-bit arguments.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0\" } */\n+\n+#include <stdint.h>\n+\n+struct ja\n+{\n+  long i1;\n+  long i2;\n+  long i3;\n+  long i4;\n+  long i5;\n+  long i6;\n+};\n+\n+void jorl (struct ja, unsigned __int128, unsigned __int128, int i3);\n+\n+int foo ()\n+{\n+  struct ja je;\n+  jorl (je, 1, 2, 3); /* { dg-error \"too many function arguments\" } */\n+  return 2L /1;\n+}\n+"}, {"sha": "d9d42c1825886623fc2ed47e37481b251bab3ee7", "filename": "gcc/testsuite/gcc.target/bpf/diag-funargs-3.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fdiag-funargs-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fdiag-funargs-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fdiag-funargs-3.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,26 @@\n+/* Verify proper errors are generated for functions taking too many\n+   arguments, with aggregates and 128-bit arguments.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0\" } */\n+\n+#include <stdint.h>\n+\n+struct ja\n+{\n+  long i1;\n+  long i2;\n+  long i3;\n+  long i4;\n+  long i5;\n+  long i6;\n+};\n+\n+void jorl (struct ja, int, int, int, unsigned __int128);\n+\n+int foo ()\n+{\n+  struct ja je;\n+  jorl (je, 1, 2, 3, 4); /* { dg-error \"too many function arguments\" } */\n+  return 2L /1;\n+}\n+"}, {"sha": "d4e9c0683f26691f555aad5beaf556943c1bf46b", "filename": "gcc/testsuite/gcc.target/bpf/diag-funargs.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fdiag-funargs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fdiag-funargs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fdiag-funargs.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,15 @@\n+/* Verify proper errors are generated for functions taking too many\n+   arguments.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0\" } */\n+\n+int\n+foo (int a1,  /* { dg-error \"too many function arguments\" } */\n+     int a2,\n+     int a3,\n+     int a4,\n+     int a5,\n+     int a6)\n+{\n+  return a6;\n+}"}, {"sha": "9263fcf7e1a32f528831e2ba931c757cfa61dd2f", "filename": "gcc/testsuite/gcc.target/bpf/diag-indcalls.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fdiag-indcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fdiag-indcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fdiag-indcalls.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,11 @@\n+/* Verify proper errors are generated for indirect function calls.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0\" } */\n+\n+void (*fnp) (void);\n+\n+void\n+foo ()\n+{\n+  (*fnp) ();\n+} /* { dg-error \"indirect call in function\" } */"}, {"sha": "2d1fedc4ce8808749d6a12a543a3cf2c006a7975", "filename": "gcc/testsuite/gcc.target/bpf/helper-bind.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-bind.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-bind.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-bind.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *ctx, *addr;\n+  int addr_len;\n+\n+  ret = __builtin_bpf_helper_bind (ctx, addr, addr_len);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t64\" } } */"}, {"sha": "844c88d3e34927b945cec8e6db14b724c67e79ea", "filename": "gcc/testsuite/gcc.target/bpf/helper-bpf-redirect.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-bpf-redirect.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-bpf-redirect.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-bpf-redirect.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  uint32_t ifindex;\n+  uint64_t flags;\n+\n+  ret = __builtin_bpf_helper_redirect (ifindex, flags);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t23\" } } */"}, {"sha": "a4fb8139234ab165e0e8de020fc558a7de5c4bb4", "filename": "gcc/testsuite/gcc.target/bpf/helper-clone-redirect.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-clone-redirect.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-clone-redirect.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-clone-redirect.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *skb;\n+  uint32_t ifindex;\n+  uint64_t flags;\n+\n+  ret = __builtin_bpf_helper_clone_redirect (skb, ifindex, flags);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t13\" } } */"}, {"sha": "ef38192efd38a117474a2e18efb5c30dc0fb4bff", "filename": "gcc/testsuite/gcc.target/bpf/helper-csum-diff.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-csum-diff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-csum-diff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-csum-diff.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int64_t ret;\n+  int32_t *to, *from;\n+  uint64_t to_size, from_size;\n+  int seed;\n+\n+  ret = __builtin_bpf_helper_csum_diff (from, from_size, to, to_size, seed);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t28\" } } */"}, {"sha": "3cde8678cb5dfc60a01433b903ae7fb25d8ec438", "filename": "gcc/testsuite/gcc.target/bpf/helper-csum-update.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-csum-update.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-csum-update.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-csum-update.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int64_t ret;\n+  void *skb;\n+  int csum;\n+\n+  ret = __builtin_bpf_helper_csum_update (skb, csum);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t40\" } } */"}, {"sha": "a7eb6e617e86ba309cd1f0806aa6084ec95472b1", "filename": "gcc/testsuite/gcc.target/bpf/helper-current-task-under-cgroup.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-current-task-under-cgroup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-current-task-under-cgroup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-current-task-under-cgroup.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *map;\n+  uint32_t index;\n+\n+  ret = __builtin_bpf_helper_current_task_under_cgroup (map, index);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t37\" } } */"}, {"sha": "9a9f79d402cf12c8079a0fecfd886814b243359f", "filename": "gcc/testsuite/gcc.target/bpf/helper-fib-lookup.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-fib-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-fib-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-fib-lookup.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *ctx, *params;\n+  int plen;\n+  uint32_t flags;\n+\n+  ret = __builtin_bpf_helper_fib_lookup (ctx, params, plen, flags);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t69\" } } */"}, {"sha": "6cfd14d0ad14849bc135017d0a13dfd1085a3c2f", "filename": "gcc/testsuite/gcc.target/bpf/helper-get-cgroup-classid.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-cgroup-classid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-cgroup-classid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-cgroup-classid.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  uint32_t ret;\n+  void *skb;\n+\n+  ret = __builtin_bpf_helper_get_cgroup_classid (skb);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t17\" } } */"}, {"sha": "916dc4d3bb1002776ccaaa5662c8c324ce7d9f47", "filename": "gcc/testsuite/gcc.target/bpf/helper-get-current-cgroup-id.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-current-cgroup-id.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-current-cgroup-id.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-current-cgroup-id.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  uint64_t ret;\n+  \n+  ret = __builtin_bpf_helper_get_current_cgroup_id ();\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t80\" } } */"}, {"sha": "efc330c3c9870c87d258f5564f795fa44509043e", "filename": "gcc/testsuite/gcc.target/bpf/helper-get-current-comm.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-current-comm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-current-comm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-current-comm.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *buf;\n+  uint32_t size_of_buf;\n+\n+  ret = __builtin_bpf_helper_get_current_comm (buf, size_of_buf);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t16\" } } */"}, {"sha": "32d3e9c91d1676ed03b7a717f05011e5c9059c9e", "filename": "gcc/testsuite/gcc.target/bpf/helper-get-current-pid-tgid.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-current-pid-tgid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-current-pid-tgid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-current-pid-tgid.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  uint64_t ret;\n+\n+  ret = __builtin_bpf_helper_get_current_pid_tgid ();\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t14\" } } */"}, {"sha": "016c134b1328a599ad01de14b8615bc146a31d38", "filename": "gcc/testsuite/gcc.target/bpf/helper-get-current-task.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-current-task.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-current-task.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-current-task.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  uint64_t ret;\n+\n+  ret = __builtin_bpf_helper_get_current_task ();\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t35\" } } */"}, {"sha": "1dc2f9f41e5ccea8c17393e72a9071e30ab4d9c2", "filename": "gcc/testsuite/gcc.target/bpf/helper-get-current-uid-gid.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-current-uid-gid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-current-uid-gid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-current-uid-gid.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  uint64_t ret;\n+\n+  ret = __builtin_bpf_helper_get_current_uid_gid ();\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t15\" } } */"}, {"sha": "1db5d871c267751dd74a587ea38fbb71be27a9a0", "filename": "gcc/testsuite/gcc.target/bpf/helper-get-hash-recalc.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-hash-recalc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-hash-recalc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-hash-recalc.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  uint32_t ret;\n+  void *skb;\n+\n+  ret = __builtin_bpf_helper_get_hash_recalc (skb);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t34\" } } */"}, {"sha": "298da1c949b60c4e65a5af2bfc8594b0e0f22278", "filename": "gcc/testsuite/gcc.target/bpf/helper-get-listener-sock.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-listener-sock.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-listener-sock.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-listener-sock.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  void *ret, *sk;\n+\n+  ret = __builtin_bpf_helper_get_listener_sock (sk);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t98\" } } */"}, {"sha": "88da67e99ae7d8cea5ab3627fb59035431161f67", "filename": "gcc/testsuite/gcc.target/bpf/helper-get-local-storage.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-local-storage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-local-storage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-local-storage.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  void *ret, *map;\n+  uint64_t flags;\n+  \n+  ret = __builtin_bpf_helper_get_local_storage (map, flags);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t81\" } } */"}, {"sha": "628e1012152ec15a4fc1f0b037410c7550842ab4", "filename": "gcc/testsuite/gcc.target/bpf/helper-get-numa-node-id.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-numa-node-id.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-numa-node-id.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-numa-node-id.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+\n+  ret = __builtin_bpf_helper_get_numa_node_id ();\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t42\" } } */"}, {"sha": "6d3e5bc7a22942602e73085e8d16ca09eed7c39f", "filename": "gcc/testsuite/gcc.target/bpf/helper-get-prandom-u32.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-prandom-u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-prandom-u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-prandom-u32.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  uint32_t ret;\n+\n+  ret = __builtin_bpf_helper_get_prandom_u32 ();\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t7\" } } */"}, {"sha": "5056c4adb1f6bc2a102ef3b27b4b0d891375bdd0", "filename": "gcc/testsuite/gcc.target/bpf/helper-get-route-realm.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-route-realm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-route-realm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-route-realm.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  uint32_t ret;\n+  void *skb;\n+\n+  ret = __builtin_bpf_helper_get_route_realm (skb);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t24\" } } */"}, {"sha": "655b87341df404374f05a0c5345fa6ffc7eeb6e2", "filename": "gcc/testsuite/gcc.target/bpf/helper-get-smp-processor-id.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-smp-processor-id.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-smp-processor-id.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-smp-processor-id.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  uint32_t ret;\n+\n+  ret = __builtin_bpf_helper_get_smp_processor_id ();\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t8\" } } */"}, {"sha": "afd17ddcd50aa7821172147f40f042e5547bc910", "filename": "gcc/testsuite/gcc.target/bpf/helper-get-socket-cookie.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-socket-cookie.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-socket-cookie.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-socket-cookie.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  uint64_t ret;\n+  void *skb;\n+  \n+  ret = __builtin_bpf_helper_get_socket_cookie (skb);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t46\" } } */"}, {"sha": "3a274c965f7d12e63feaf3075e3382a26898204c", "filename": "gcc/testsuite/gcc.target/bpf/helper-get-socket-uid.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-socket-uid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-socket-uid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-socket-uid.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  uint32_t ret;\n+  void *skb;\n+  \n+  ret = __builtin_bpf_helper_get_socket_uid (skb);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t47\" } } */"}, {"sha": "bbcdeb58775b7817604ad785c6d233436d323f39", "filename": "gcc/testsuite/gcc.target/bpf/helper-get-stack.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-stack.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *regs, *buf;\n+  uint32_t size;\n+  uint64_t flags;\n+\n+  ret = __builtin_bpf_helper_get_stack (regs, buf, size, flags);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t67\" } } */"}, {"sha": "319d15cd2fa46f0fb81960dac774234dd2c665e6", "filename": "gcc/testsuite/gcc.target/bpf/helper-get-stackid.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-stackid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-stackid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-get-stackid.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *ctx, *map;\n+  uint64_t flags;\n+\n+  ret = __builtin_bpf_helper_get_stackid (ctx, map, flags);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t27\" } } */"}, {"sha": "fb16f15e6eae93a0a1b51bece0eac79b6985d471", "filename": "gcc/testsuite/gcc.target/bpf/helper-getsockopt.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-getsockopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-getsockopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-getsockopt.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *bpf_socket;\n+  int level, optname, optlen;\n+  char *optval;\n+  \n+  ret = __builtin_bpf_helper_getsockopt (bpf_socket, level,\n+\t\t\t\t\t optname, optval, optlen);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t57\" } } */"}, {"sha": "405df057e307790b622aec17f8c91430accb0ade", "filename": "gcc/testsuite/gcc.target/bpf/helper-ktime-get-ns.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-ktime-get-ns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-ktime-get-ns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-ktime-get-ns.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  uint64_t ret;\n+  ret = __builtin_bpf_helper_ktime_get_ns ();\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t5\" } } */"}, {"sha": "ac17662c5d6ca984c2a701ed7bd191966d787487", "filename": "gcc/testsuite/gcc.target/bpf/helper-l3-csum-replace.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-l3-csum-replace.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-l3-csum-replace.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-l3-csum-replace.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *skb;\n+  uint32_t offset;\n+  uint64_t from, to, size;\n+\n+  ret = __builtin_bpf_helper_l3_csum_replace (skb, offset, from, to, size);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t10\" } } */"}, {"sha": "52b5514b6cbe0ef945b764462daf167fc9d78e20", "filename": "gcc/testsuite/gcc.target/bpf/helper-l4-csum-replace.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-l4-csum-replace.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-l4-csum-replace.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-l4-csum-replace.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *skb;\n+  uint32_t offset;\n+  uint64_t from, to, size;\n+\n+  ret = __builtin_bpf_helper_l4_csum_replace (skb, offset, from, to, size);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t11\" } } */"}, {"sha": "1baed27fac7b6990c60ef77ee5e927051eb7f339", "filename": "gcc/testsuite/gcc.target/bpf/helper-lwt-push-encap.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-lwt-push-encap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-lwt-push-encap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-lwt-push-encap.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *skb, *hdr;\n+  uint32_t type, len;\n+  \n+  ret = __builtin_bpf_helper_lwt_push_encap (skb, type, hdr, len);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t73\" } } */"}, {"sha": "ccc94c1af9deba60180d47094d5e2f0ac5a4ac4b", "filename": "gcc/testsuite/gcc.target/bpf/helper-lwt-seg6-action.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-lwt-seg6-action.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-lwt-seg6-action.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-lwt-seg6-action.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *skb, *param;\n+  uint32_t action, param_len;\n+  \n+  ret = __builtin_bpf_helper_lwt_seg6_action (skb, action,\n+\t\t\t\t\t      param, param_len);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t76\" } } */"}, {"sha": "5e95124ad0f48b8bde477e7409c72dd8d21bc4d0", "filename": "gcc/testsuite/gcc.target/bpf/helper-lwt-seg6-adjust-srh.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-lwt-seg6-adjust-srh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-lwt-seg6-adjust-srh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-lwt-seg6-adjust-srh.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *skb;\n+  uint32_t offset, delta;\n+  \n+  ret = __builtin_bpf_helper_lwt_seg6_adjust_srh (skb, offset,\n+\t\t\t\t\t\t  delta);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t75\" } } */"}, {"sha": "098f97680f2818b92b916c84c3006b429957f5c9", "filename": "gcc/testsuite/gcc.target/bpf/helper-lwt-seg6-store-bytes.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-lwt-seg6-store-bytes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-lwt-seg6-store-bytes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-lwt-seg6-store-bytes.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *skb, *from;\n+  uint32_t offset, len;\n+  \n+  ret = __builtin_bpf_helper_lwt_seg6_store_bytes (skb, offset,\n+\t\t\t\t\t\t   from, len);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t74\" } } */"}, {"sha": "b8a6cdec4ee2c18fc31a4801259dc0e6ec3ed9bb", "filename": "gcc/testsuite/gcc.target/bpf/helper-map-delete-elem.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-delete-elem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-delete-elem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-delete-elem.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+\n+char *map () { return 0; }\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  char *key = 0;\n+\n+  ret = __builtin_bpf_helper_map_delete_elem (map (), key);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t3\" } } */"}, {"sha": "839cfc423a73d8c01dbe1f62308cb56b53fbfbcf", "filename": "gcc/testsuite/gcc.target/bpf/helper-map-lookup-elem.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-lookup-elem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-lookup-elem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-lookup-elem.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+\n+char *map () { return 0; }\n+\n+void\n+foo ()\n+{\n+  char *key = 0, *value = 0;\n+  value = __builtin_bpf_helper_map_lookup_elem (map (), key);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t1\" } } */"}, {"sha": "6d0acb1dcb781e0c91eea2ad715969ffcdade5ee", "filename": "gcc/testsuite/gcc.target/bpf/helper-map-peek-elem.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-peek-elem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-peek-elem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-peek-elem.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+\n+char *map () { return 0; }\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  char *value = 0;\n+\n+  ret = __builtin_bpf_helper_map_peek_elem (map (), value);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t89\" } } */"}, {"sha": "71a7851ca9c9e4196a219dc5a11d2ca735368eec", "filename": "gcc/testsuite/gcc.target/bpf/helper-map-pop-elem.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-pop-elem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-pop-elem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-pop-elem.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+\n+char *map () { return 0; }\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  char *value = 0;\n+\n+  ret = __builtin_bpf_helper_map_pop_elem (map (), value);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t88\" } } */"}, {"sha": "53bc0ac5dd7dda801199b80b360e36a1bbd0003e", "filename": "gcc/testsuite/gcc.target/bpf/helper-map-push-elem.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-push-elem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-push-elem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-push-elem.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+char *map () { return 0; }\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  char *value = 0;\n+  long long flags = 0;\n+\n+  ret = __builtin_bpf_helper_map_push_elem (map (), value, flags);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t87\" } } */"}, {"sha": "6281442ba3d4867ef5e578a7f07c30ba4502752e", "filename": "gcc/testsuite/gcc.target/bpf/helper-map-update-elem.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-update-elem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-update-elem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-map-update-elem.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+char *map () { return 0; }\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  long long flags = 0;\n+  char *key = 0, *value = 0;\n+\n+  ret = __builtin_bpf_helper_map_update_elem (map (), key, value, flags);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t2\" } } */"}, {"sha": "3b831acad643b6e6d9e777e2fc92c6f9e1fcd6f2", "filename": "gcc/testsuite/gcc.target/bpf/helper-msg-apply-bytes.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-apply-bytes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-apply-bytes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-apply-bytes.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *msg;\n+  uint32_t bytes;\n+  \n+  ret = __builtin_bpf_helper_msg_apply_bytes (msg, bytes);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t61\" } } */"}, {"sha": "2c4ee218832eb768529902afb4c25d6c16e74e2a", "filename": "gcc/testsuite/gcc.target/bpf/helper-msg-cork-bytes.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-cork-bytes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-cork-bytes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-cork-bytes.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *msg;\n+  uint32_t bytes;\n+  \n+  ret = __builtin_bpf_helper_msg_cork_bytes (msg, bytes);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t62\" } } */"}, {"sha": "377c036603e31ae96ef28af83d967d5ef9482e41", "filename": "gcc/testsuite/gcc.target/bpf/helper-msg-pop-data.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-pop-data.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-pop-data.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-pop-data.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *skb;\n+  uint32_t start, pop;\n+  uint64_t flags;\n+\n+  ret = __builtin_bpf_helper_msg_pop_data (skb, start, pop, flags);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t91\" } } */"}, {"sha": "ef27493122ba00bb1a8d187c24e5f12438156396", "filename": "gcc/testsuite/gcc.target/bpf/helper-msg-pull-data.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-pull-data.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-pull-data.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-pull-data.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *msg;\n+  uint32_t start, end;\n+  uint64_t flags;\n+  \n+  ret = __builtin_bpf_helper_msg_pull_data (msg, start, end, flags);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t63\" } } */"}, {"sha": "9e256bc5ca79841516fd687eb43a7fd03dbf8ff4", "filename": "gcc/testsuite/gcc.target/bpf/helper-msg-push-data.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-push-data.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-push-data.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-push-data.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *skb;\n+  uint32_t start, len;\n+  uint64_t flags;\n+\n+  ret = __builtin_bpf_helper_msg_push_data (skb, start, len, flags);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t90\" } } */"}, {"sha": "2e9d4137d66159c4b14153b7735592da81c9210d", "filename": "gcc/testsuite/gcc.target/bpf/helper-msg-redirect-hash.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-redirect-hash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-redirect-hash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-redirect-hash.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *msg, *map, *key;\n+  uint64_t flags;\n+\n+  ret = __builtin_bpf_helper_msg_redirect_hash (msg, map, key,\n+\t\t\t\t\t\tflags);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t71\" } } */"}, {"sha": "f5f8405e324146e32ebc9c8aed6ee72aafc3ae00", "filename": "gcc/testsuite/gcc.target/bpf/helper-msg-redirect-map.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-redirect-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-redirect-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-msg-redirect-map.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *msg, *map;\n+  uint64_t key;\n+  uint64_t flags;\n+  \n+  ret = __builtin_bpf_helper_msg_redirect_map (msg, map, key,\n+\t\t\t\t\t       flags);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t60\" } } */"}, {"sha": "3bd5424353f0a814db020ab68de75d8698abf146", "filename": "gcc/testsuite/gcc.target/bpf/helper-override-return.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-override-return.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-override-return.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-override-return.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *regs;\n+  uint64_t rc;\n+  \n+  ret = __builtin_bpf_helper_override_return (regs, rc);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t58\" } } */"}, {"sha": "afb32010bdd91734acfcdb6049175be9eb4e49b1", "filename": "gcc/testsuite/gcc.target/bpf/helper-perf-event-output.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-perf-event-output.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-perf-event-output.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-perf-event-output.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *ctx, *map;\n+  uint64_t flags;\n+  void *data;\n+  uint64_t size;\n+\n+  ret = __builtin_bpf_helper_perf_event_output (ctx, map, flags, data, size);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t25\" } } */"}, {"sha": "1d512c9ec655cdfb219faa1d3b94a59fb46c12a6", "filename": "gcc/testsuite/gcc.target/bpf/helper-perf-event-read-value.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-perf-event-read-value.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-perf-event-read-value.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-perf-event-read-value.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *map, *buf;\n+  uint64_t flags;\n+  uint64_t buf_size;\n+  \n+  ret = __builtin_bpf_helper_perf_event_read_value (map, flags, buf, buf_size);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t55\" } } */"}, {"sha": "f099a09d66f681f12455ba260daf2806037eaa08", "filename": "gcc/testsuite/gcc.target/bpf/helper-perf-event-read.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-perf-event-read.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-perf-event-read.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-perf-event-read.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  uint64_t ret;\n+  void *map;\n+  uint64_t flags;\n+\n+  ret = __builtin_bpf_helper_perf_event_read (map, flags);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t22\" } } */"}, {"sha": "00c4a3a78b58ce0745f6cb0fef99d6e62490c383", "filename": "gcc/testsuite/gcc.target/bpf/helper-perf-prog-read-value.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-perf-prog-read-value.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-perf-prog-read-value.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-perf-prog-read-value.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *ctx, *buf;\n+  uint64_t buf_size;\n+  \n+  ret = __builtin_bpf_helper_perf_prog_read_value (ctx, buf, buf_size);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t56\" } } */"}, {"sha": "fd04760221d785183214201ca46ee4b2d74540a6", "filename": "gcc/testsuite/gcc.target/bpf/helper-probe-read-str.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-probe-read-str.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-probe-read-str.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-probe-read-str.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  int size;\n+  void *dst;\n+  const void *unsafe_ptr;\n+  \n+  ret = __builtin_bpf_helper_probe_read_str (dst, size, unsafe_ptr);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t45\" } } */"}, {"sha": "a77a907767b876255bb810149af27755fdac5c4d", "filename": "gcc/testsuite/gcc.target/bpf/helper-probe-read.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-probe-read.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-probe-read.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-probe-read.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *src, *dst;\n+  uint32_t size;\n+\n+  ret = __builtin_bpf_helper_probe_read (dst, size, src);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t4\" } } */"}, {"sha": "bf226206769cd9899e73028847b0bb5824bff4f3", "filename": "gcc/testsuite/gcc.target/bpf/helper-probe-write-user.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-probe-write-user.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-probe-write-user.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-probe-write-user.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *dst, *src;\n+  uint32_t len;\n+\n+  ret = __builtin_bpf_helper_probe_write_user (dst, src, len);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t36\" } } */"}, {"sha": "58e9395dbeb5ab5edfa7576cfae71a35907caa02", "filename": "gcc/testsuite/gcc.target/bpf/helper-rc-keydown.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-rc-keydown.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-rc-keydown.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-rc-keydown.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *ctx;\n+  uint32_t protocol, toggle;\n+  uint64_t scancode;\n+  \n+  ret = __builtin_bpf_helper_rc_keydown (ctx, protocol,\n+\t\t\t\t\t scancode, toggle);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t78\" } } */"}, {"sha": "e776bc759634abccc82940f4738af021e6034ec0", "filename": "gcc/testsuite/gcc.target/bpf/helper-rc-pointer-rel.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-rc-pointer-rel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-rc-pointer-rel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-rc-pointer-rel.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *ctx;\n+  int32_t rel_x, rel_y;\n+\n+  ret = __builtin_bpf_helper_rc_pointer_rel (ctx, rel_x, rel_y);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t92\" } } */"}, {"sha": "0ebc7de5bdf70b7342c0fb711e7fe5255377faab", "filename": "gcc/testsuite/gcc.target/bpf/helper-rc-repeat.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-rc-repeat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-rc-repeat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-rc-repeat.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *ctx;\n+  \n+  ret = __builtin_bpf_helper_rc_repeat (ctx);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t77\" } } */"}, {"sha": "daeecc2a01edb73eb43b765beaeb698752f3cf5e", "filename": "gcc/testsuite/gcc.target/bpf/helper-redirect-map.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-redirect-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-redirect-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-redirect-map.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *map;\n+  uint32_t key;\n+  uint64_t flags;\n+  \n+  ret = __builtin_bpf_helper_redirect_map (map, key, flags);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t51\" } } */"}, {"sha": "4bc63ffa063c725ae7a30cc5bc0905f98e15f982", "filename": "gcc/testsuite/gcc.target/bpf/helper-set-hash-invalid.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-set-hash-invalid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-set-hash-invalid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-set-hash-invalid.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  void *skb;\n+\n+  __builtin_bpf_helper_set_hash_invalid (skb);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t41\" } } */"}, {"sha": "d01ae6eb2680aab482a8a6c80c3edfe2aa1e1ea0", "filename": "gcc/testsuite/gcc.target/bpf/helper-set-hash.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-set-hash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-set-hash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-set-hash.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  uint32_t ret;\n+  void *skb;\n+  uint32_t hash;\n+  \n+  ret = __builtin_bpf_helper_set_hash (skb, hash);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t48\" } } */"}, {"sha": "6f3b450639e326ac4f0f62049b6e82d4b2e60eb2", "filename": "gcc/testsuite/gcc.target/bpf/helper-setsockopt.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-setsockopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-setsockopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-setsockopt.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *bpf_socket;\n+  int level;\n+  int optname;\n+  void *optval;\n+  int optlen;\n+  \n+  ret = __builtin_bpf_helper_setsockopt (bpf_socket, level, optname,\n+\t\t\t\t\t optval, optlen);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t49\" } } */"}, {"sha": "abe813d94f6466832853be7c97d9170d74ac1658", "filename": "gcc/testsuite/gcc.target/bpf/helper-sk-fullsock.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-fullsock.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-fullsock.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-fullsock.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  void *ret, *sk;\n+\n+  ret = __builtin_bpf_helper_sk_fullsock (sk);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t95\" } } */"}, {"sha": "4408640a6b2a3d510e0d1836bbfcff298d174f02", "filename": "gcc/testsuite/gcc.target/bpf/helper-sk-lookup-tcp.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-lookup-tcp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-lookup-tcp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-lookup-tcp.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  void *ret;\n+  void *ctx, *tuple;\n+  uint32_t tuple_size;\n+  uint64_t netns, flags;\n+  \n+  ret = __builtin_bpf_helper_sk_lookup_tcp (ctx,\n+\t\t\t\t\t    tuple,\n+\t\t\t\t\t    tuple_size,\n+\t\t\t\t\t    netns, flags);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t84\" } } */"}, {"sha": "4c50f9c6327e39067388cceacaf854855e9dc10d", "filename": "gcc/testsuite/gcc.target/bpf/helper-sk-lookup-upd.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-lookup-upd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-lookup-upd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-lookup-upd.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  void *ret;\n+  void *ctx, *tuple;\n+  uint32_t tuple_size;\n+  uint64_t netns, flags;\n+  \n+  ret = __builtin_bpf_helper_sk_lookup_udp (ctx,\n+\t\t\t\t\t    tuple,\n+\t\t\t\t\t    tuple_size,\n+\t\t\t\t\t    netns, flags);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t85\" } } */"}, {"sha": "7047c9f1290f258124e564efefa9e2e3e9d4ee8b", "filename": "gcc/testsuite/gcc.target/bpf/helper-sk-redirect-hash.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-redirect-hash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-redirect-hash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-redirect-hash.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *skb, *map, *key;\n+  uint64_t flags;\n+\n+  ret = __builtin_bpf_helper_sk_redirect_hash (skb, map, key,\n+\t\t\t\t\t       flags);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t72\" } } */"}, {"sha": "5afb0ac4100eb5201ca995a1194ef8d835f8d9b2", "filename": "gcc/testsuite/gcc.target/bpf/helper-sk-redirect-map.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-redirect-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-redirect-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-redirect-map.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *ctx, *map;\n+  uint32_t key;\n+  uint64_t flags;\n+  \n+  ret = __builtin_bpf_helper_sk_redirect_map (ctx, map, key, flags);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t52\" } } */"}, {"sha": "f054c90652c34df3a3bea4547cabae42c463bebd", "filename": "gcc/testsuite/gcc.target/bpf/helper-sk-release.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-release.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-release.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-release.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *sock;\n+  \n+  ret = __builtin_bpf_helper_sk_release (sock);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t86\" } } */"}, {"sha": "399ad2c023135498d5af1cb86e2aafcf322acd3b", "filename": "gcc/testsuite/gcc.target/bpf/helper-sk-select-reuseport.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-select-reuseport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-select-reuseport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-select-reuseport.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *reuse, *map, *key;\n+  uint64_t flags;\n+  \n+  ret = __builtin_bpf_helper_sk_select_reuseport (reuse, map,\n+\t\t\t\t\t\t  key, flags);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t82\" } } */"}, {"sha": "07c5875d930ee1cabc64572c95d18647f761bd77", "filename": "gcc/testsuite/gcc.target/bpf/helper-sk-storage-delete.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-storage-delete.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-storage-delete.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-storage-delete.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *map, *sk;\n+  \n+  ret = __builtin_bpf_helper_sk_storage_delete (map, sk);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t108\" } } */"}, {"sha": "a199ef0ae64f830be44ef8589602bb8795c07602", "filename": "gcc/testsuite/gcc.target/bpf/helper-sk-storage-get.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-storage-get.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-storage-get.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sk-storage-get.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  void *ret;\n+  void *map, *sk, *value;\n+  uint64_t flags;\n+  \n+  ret = __builtin_bpf_helper_sk_storage_get (map, sk, value,\n+\t\t\t\t\t     flags);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t107\" } } */"}, {"sha": "88196f5e070e8e9b0ae6663b9d180d5ba899edf9", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-adjust-room.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-adjust-room.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-adjust-room.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-adjust-room.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *skb;\n+  int32_t len_diff;\n+  uint32_t mode;\n+  uint64_t flags;\n+  \n+  ret = __builtin_bpf_helper_skb_adjust_room (skb, len_diff, mode, flags);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t50\" } } */"}, {"sha": "7c9021e1763ab51b979a028b6c3fc9d42363b523", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-cgroup-id.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-cgroup-id.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-cgroup-id.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-cgroup-id.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  uint64_t ret;\n+  void *skb;\n+  \n+  ret = __builtin_bpf_helper_skb_cgroup_id (skb);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t79\" } } */"}, {"sha": "de6281539fdeb9a9e1029195a44dd86c95bbfaff", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-change-head.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-change-head.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-change-head.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-change-head.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *skb;\n+  uint32_t len;\n+  uint64_t flags;\n+  \n+  ret = __builtin_bpf_helper_skb_change_head (skb, len, flags);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t43\" } } */"}, {"sha": "5738f3cc59b06ef4c5375c6fd2a07ce76f41bb29", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-change-proto.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-change-proto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-change-proto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-change-proto.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *skb;\n+  int16_t proto;\n+  uint64_t flags;\n+\n+  ret = __builtin_bpf_helper_skb_change_proto (skb, proto, flags);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t31\" } } */"}, {"sha": "1fb6b45cd1b6d8bda8afad0abf22c9128c4fd0cf", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-change-tail.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-change-tail.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-change-tail.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-change-tail.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *skb;\n+  uint32_t len;\n+  uint64_t flags;\n+\n+  ret = __builtin_bpf_helper_skb_change_tail (skb, len, flags);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t38\" } } */"}, {"sha": "bcf22cebc28d0f96052fea02beeb68d7f233fb6c", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-change-type.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-change-type.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-change-type.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-change-type.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *skb;\n+  uint32_t type;\n+\n+  ret = __builtin_bpf_helper_skb_change_type (skb, type);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t32\" } } */"}, {"sha": "f769993f1208fe43d24eae4d68dca73e1c895e7c", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-ecn-set-ce.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-ecn-set-ce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-ecn-set-ce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-ecn-set-ce.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *skb;\n+\n+  ret = __builtin_bpf_helper_skb_ecn_set_ce (skb);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t97\" } } */"}, {"sha": "0d4db236865e9c85da3ed55953b95846b599a7ba", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-get-tunnel-key.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-get-tunnel-key.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-get-tunnel-key.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-get-tunnel-key.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *skb, *key;\n+  uint32_t size;\n+  uint64_t flags;\n+\n+  ret = __builtin_bpf_helper_skb_get_tunnel_key (skb, key, size, flags);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t20\" } } */"}, {"sha": "9428657b932bf3779534cb82caa7208dca459552", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-get-tunnel-opt.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-get-tunnel-opt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-get-tunnel-opt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-get-tunnel-opt.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *skb;\n+  uint8_t *opt;\n+  uint32_t size;\n+\n+  ret = __builtin_bpf_helper_skb_get_tunnel_opt (skb, opt, size);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t29\" } } */"}, {"sha": "8217b4a17df66f84c61979cfa59c99cb7c805fce", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-get-xfrm-state.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-get-xfrm-state.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-get-xfrm-state.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-get-xfrm-state.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *skb, *xfrm_state;\n+  uint32_t index, size;\n+  uint64_t flags;\n+\n+  ret = __builtin_bpf_helper_skb_get_xfrm_state (skb, index,\n+\t\t\t\t\t\t xfrm_state, size, flags);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t66\" } } */"}, {"sha": "bcaa43be9def7c3b998c658af7cb560220a151be", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-load-bytes-relative.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-load-bytes-relative.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-load-bytes-relative.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-load-bytes-relative.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *skb, *to;\n+  uint32_t offset, len, start_header;\n+\n+  ret = __builtin_bpf_helper_skb_load_bytes_relative (skb, offset,\n+\t\t\t\t\t\t      to, len,\n+\t\t\t\t\t\t      start_header);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t68\" } } */"}, {"sha": "9da545400c7ab86eff981b03c7e40295340ac1bf", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-load-bytes.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-load-bytes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-load-bytes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-load-bytes.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *skb, *to;\n+  uint32_t offset, len;\n+\n+  ret = __builtin_bpf_helper_skb_load_bytes (skb, offset, to, len);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t26\" } } */"}, {"sha": "9bb8b8d6e786669bfde1a84b5a02fe196e261760", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-pull-data.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-pull-data.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-pull-data.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-pull-data.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *skb;\n+  uint32_t len;\n+\n+  ret = __builtin_bpf_helper_skb_pull_data (skb, len);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t39\" } } */"}, {"sha": "21b835f5cef55198b59cfc861382a2e004baae36", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-set-tunnel-key.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-set-tunnel-key.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-set-tunnel-key.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-set-tunnel-key.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *skb, *key;\n+  uint32_t size;\n+  uint64_t flags;\n+\n+  ret = __builtin_bpf_helper_skb_set_tunnel_key (skb, key, size, flags);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t21\" } } */"}, {"sha": "5a0528ec0a38dfc8222d478ca12f41d7178fc7eb", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-set-tunnel-opt.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-set-tunnel-opt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-set-tunnel-opt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-set-tunnel-opt.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *skb;\n+  uint8_t *opt;\n+  uint32_t size;\n+\n+  ret = __builtin_bpf_helper_skb_set_tunnel_opt (skb, opt, size);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t30\" } } */"}, {"sha": "a41967cb90419a9507c2055bf9d0397bbb68b703", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-store-bytes.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-store-bytes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-store-bytes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-store-bytes.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *skb;\n+  uint32_t offset;\n+  void *from;\n+  uint32_t len;\n+  uint64_t flags;\n+\n+  ret = __builtin_bpf_helper_skb_store_bytes (skb, offset, from, len, flags);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t9\" } } */"}, {"sha": "0ccee8bed5cd4812f00a688f361b18ec31d6f1e3", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-under-cgroup.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-under-cgroup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-under-cgroup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-under-cgroup.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *skb, *map;\n+  uint32_t index;\n+\n+  ret = __builtin_bpf_helper_skb_under_cgroup (skb, map, index);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t33\" } } */"}, {"sha": "e99a0ac78020e028bd931d337b1eeb12f4ea7a4e", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-vlan-pop.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-vlan-pop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-vlan-pop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-vlan-pop.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *skb;\n+\n+  ret = __builtin_bpf_helper_skb_vlan_pop (skb);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t19\" } } */"}, {"sha": "dbe52aee1b87d6cd1c27c00c240f1e23eecfdda7", "filename": "gcc/testsuite/gcc.target/bpf/helper-skb-vlan-push.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-vlan-push.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-vlan-push.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skb-vlan-push.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *skb;\n+  int16_t vlan_proto;\n+  uint16_t vlan_tci;\n+\n+  ret = __builtin_bpf_helper_skb_vlan_push (skb, vlan_proto, vlan_tci);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t18\" } } */"}, {"sha": "bbc4b99a80864ab80abac097e56d6adab741250c", "filename": "gcc/testsuite/gcc.target/bpf/helper-skc-lookup-tcp.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skc-lookup-tcp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skc-lookup-tcp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-skc-lookup-tcp.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  void *ret;\n+  void *ctx, *tuple;\n+  uint32_t tuple_size;\n+  uint64_t netns, flags;\n+\n+  ret = __builtin_bpf_helper_skc_lookup_tcp (ctx, tuple,\n+\t\t\t\t\t     tuple_size, netns, flags);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t99\" } } */"}, {"sha": "bbb77ef9ad5b5ac7bb5e8683b588402de79059fc", "filename": "gcc/testsuite/gcc.target/bpf/helper-sock-hash-update.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sock-hash-update.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sock-hash-update.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sock-hash-update.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *skops, *map, *key;\n+  uint64_t flags;\n+\n+  ret = __builtin_bpf_helper_sock_hash_update (skops, map, key,\n+\t\t\t\t\t       flags);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t70\" } } */"}, {"sha": "301e59e975bf116cf44d4d0eab4c39e6613da6d7", "filename": "gcc/testsuite/gcc.target/bpf/helper-sock-map-update.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sock-map-update.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sock-map-update.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sock-map-update.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *skops, *map, *key;\n+  uint64_t flags;\n+  \n+  ret = __builtin_bpf_helper_sock_map_update (skops, map, key,\n+\t\t\t\t\t      flags);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t53\" } } */"}, {"sha": "2056312bcf34b06acada59fb64b96eda4a9a0847", "filename": "gcc/testsuite/gcc.target/bpf/helper-sock-ops-cb-flags-set.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sock-ops-cb-flags-set.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sock-ops-cb-flags-set.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sock-ops-cb-flags-set.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *bpf_sock;\n+  int argval;\n+  \n+  ret = __builtin_bpf_helper_sock_ops_cb_flags_set (bpf_sock,\n+\t\t\t\t\t\t    argval);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t59\" } } */"}, {"sha": "4178914ae133067e03a89c77ca0ba7a5340f4373", "filename": "gcc/testsuite/gcc.target/bpf/helper-spin-lock.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-spin-lock.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-spin-lock.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-spin-lock.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  void *lock;\n+\n+  __builtin_bpf_helper_spin_lock (lock);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t93\" } } */"}, {"sha": "c2416b6699412d267aa38c8b375d97dfecfba99e", "filename": "gcc/testsuite/gcc.target/bpf/helper-spin-unlock.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-spin-unlock.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-spin-unlock.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-spin-unlock.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  void *lock;\n+\n+  __builtin_bpf_helper_spin_unlock (lock);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t94\" } } */"}, {"sha": "e15b6d6b968f54d008d9221354a0e04131aa25ef", "filename": "gcc/testsuite/gcc.target/bpf/helper-strtol.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-strtol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-strtol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-strtol.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+#include <stddef.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *buf;\n+  long res;\n+  uint64_t flags;\n+  size_t buf_len;\n+  \n+  ret = __builtin_bpf_helper_strtol (buf, buf_len, flags, &res);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t105\" } } */"}, {"sha": "bc0d77656d216b2d3c5e15e503bf73d7912e995f", "filename": "gcc/testsuite/gcc.target/bpf/helper-strtoul.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-strtoul.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-strtoul.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-strtoul.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+#include <stddef.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *buf;\n+  unsigned long res;\n+  uint64_t flags;\n+  size_t buf_len;\n+  \n+  ret = __builtin_bpf_helper_strtoul (buf, buf_len, flags, &res);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t106\" } } */"}, {"sha": "803584171dd46a9833924989d878eaad28935543", "filename": "gcc/testsuite/gcc.target/bpf/helper-sysctl-get-current-value.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sysctl-get-current-value.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sysctl-get-current-value.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sysctl-get-current-value.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+#include <stddef.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *ctx, *buf;\n+  size_t buf_len;\n+  \n+  ret = __builtin_bpf_helper_sysctl_get_current_value (ctx, buf,\n+\t\t\t\t\t\t       buf_len);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t102\" } } */"}, {"sha": "a748b4bf91136f841dc530daa1f1e1553c19748f", "filename": "gcc/testsuite/gcc.target/bpf/helper-sysctl-get-name.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sysctl-get-name.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sysctl-get-name.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sysctl-get-name.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+#include <stddef.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *ctx, *buf;\n+  size_t buf_len;\n+  uint64_t flags;\n+  \n+  ret = __builtin_bpf_helper_sysctl_get_name (ctx, buf,\n+\t\t\t\t\t      buf_len, flags);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t101\" } } */"}, {"sha": "2c4835100c9ea8285314b26e789a85fcf7200fdf", "filename": "gcc/testsuite/gcc.target/bpf/helper-sysctl-get-new-value.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sysctl-get-new-value.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sysctl-get-new-value.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sysctl-get-new-value.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+#include <stddef.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *ctx, *buf;\n+  size_t buf_len;\n+  \n+  ret = __builtin_bpf_helper_sysctl_get_new_value (ctx, buf,\n+\t\t\t\t\t\t   buf_len);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t103\" } } */"}, {"sha": "fc3780da7e2ce19259f25301ee6707d3dd725703", "filename": "gcc/testsuite/gcc.target/bpf/helper-sysctl-set-new-value.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sysctl-set-new-value.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sysctl-set-new-value.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-sysctl-set-new-value.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+#include <stddef.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *ctx, *buf;\n+  size_t buf_len;\n+  \n+  ret = __builtin_bpf_helper_sysctl_set_new_value (ctx, buf,\n+\t\t\t\t\t\t   buf_len);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t104\" } } */"}, {"sha": "618064f4aeacf4f6160ccd9eca68923b2360238c", "filename": "gcc/testsuite/gcc.target/bpf/helper-tail-call.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-tail-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-tail-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-tail-call.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  void *ctx, *prog_array_map;\n+  uint32_t index;\n+\n+  __builtin_bpf_helper_tail_call (ctx, prog_array_map, index);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t12\" } } */"}, {"sha": "95846c6f2d7b3982610dcabe7cfb914d4079c2c2", "filename": "gcc/testsuite/gcc.target/bpf/helper-tcp-check-syncookie.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-tcp-check-syncookie.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-tcp-check-syncookie.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-tcp-check-syncookie.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *sk, *iph, *th;\n+  uint32_t iph_len, th_len;\n+  \n+  ret = __builtin_bpf_helper_tcp_check_syncookie (sk, iph,\n+\t\t\t\t\t\t  iph_len,\n+\t\t\t\t\t\t  th, th_len);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t100\" } } */"}, {"sha": "ab8f2de05d81f2690657900a8a6d93af58bec51d", "filename": "gcc/testsuite/gcc.target/bpf/helper-tcp-sock.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-tcp-sock.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-tcp-sock.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-tcp-sock.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  void *ret, *sk;\n+\n+  ret = __builtin_bpf_helper_tcp_sock (sk);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t96\" } } */"}, {"sha": "fcf9d5c9e505a1ccd8888ae496879fbdb433bf1c", "filename": "gcc/testsuite/gcc.target/bpf/helper-trace-printk.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-trace-printk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-trace-printk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-trace-printk.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+\n+char *map () { return 0; }\n+\n+void\n+foo ()\n+{\n+  int ret;\n+\n+  ret = __builtin_bpf_helper_trace_printk (\"foo %d %d\", sizeof (\"foo %d %d\"), 10, 20);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t6\" } } */"}, {"sha": "3dce54345358f3fd5ba3352b852140269bf0e845", "filename": "gcc/testsuite/gcc.target/bpf/helper-xdp-adjust-head.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-xdp-adjust-head.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-xdp-adjust-head.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-xdp-adjust-head.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *xdp_md;\n+  int delta;\n+  \n+  ret = __builtin_bpf_helper_xdp_adjust_head (xdp_md, delta);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t44\" } } */"}, {"sha": "38a137487373b316582d40e6291b360d1ae9d9fa", "filename": "gcc/testsuite/gcc.target/bpf/helper-xdp-adjust-meta.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-xdp-adjust-meta.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-xdp-adjust-meta.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-xdp-adjust-meta.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *xdp_md;\n+  int delta;\n+  \n+  ret = __builtin_bpf_helper_xdp_adjust_meta (xdp_md, delta);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t54\" } } */"}, {"sha": "319b65a233d83d4759da920d0cb5e6ef90c74150", "filename": "gcc/testsuite/gcc.target/bpf/helper-xdp-adjust-tail.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-xdp-adjust-tail.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-xdp-adjust-tail.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fhelper-xdp-adjust-tail.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *xdp_md;\n+  int delta;\n+\n+  ret = __builtin_bpf_helper_xdp_adjust_tail (xdp_md, delta);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t65\" } } */"}, {"sha": "ce193ec14bffb2ce2b9e67a873f6e48c61127333", "filename": "gcc/testsuite/gcc.target/bpf/skb-ancestor-cgroup-id.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fskb-ancestor-cgroup-id.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fskb-ancestor-cgroup-id.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fskb-ancestor-cgroup-id.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+#include <stdint.h>\n+\n+void\n+foo ()\n+{\n+  int ret;\n+  void *skb;\n+  int ancestor_level;\n+  \n+  ret = __builtin_bpf_helper_skb_ancestor_cgroup_id (skb,\n+\t\t\t\t\t\t     ancestor_level);\n+}\n+\n+/* { dg-final { scan-assembler \"call\\t83\" } } */"}, {"sha": "69949f14d0ca780d894cb64338fd45f413260a3e", "filename": "gcc/testsuite/gcc.target/bpf/sync-fetch-and-add.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fsync-fetch-and-add.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fsync-fetch-and-add.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fsync-fetch-and-add.c?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+\n+long delta;\n+long *val;\n+\n+void\n+foo ()\n+{\n+  __sync_fetch_and_add(val, delta);\n+  __sync_fetch_and_add((int *)val, (int)delta);\n+}\n+\n+/* { dg-final { scan-assembler \"xadddw\\t.*\" } } */\n+/* { dg-final { scan-assembler \"xaddw\\t.*\" } } */"}, {"sha": "3db1902b25c2c045620b3ff006057673d5171bb0", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -526,7 +526,8 @@ proc check_effective_target_trampolines { } {\n \t || [istarget nvptx-*-*]\n \t || [istarget hppa2.0w-hp-hpux11.23]\n \t || [istarget hppa64-hp-hpux11.23]\n-\t || [istarget pru-*-*] } {\n+\t || [istarget pru-*-*]\n+\t || [istarget bpf-*-*] } {\n \treturn 0;\n     }\n     return 1\n@@ -781,7 +782,7 @@ proc add_options_for_tls { flags } {\n # Return 1 if indirect jumps are supported, 0 otherwise.\n \n proc check_effective_target_indirect_jumps {} {\n-    if { [istarget nvptx-*-*] } {\n+    if { [istarget nvptx-*-*] || [istarget bpf-*-*] } {\n \treturn 0\n     }\n     return 1\n@@ -790,7 +791,7 @@ proc check_effective_target_indirect_jumps {} {\n # Return 1 if nonlocal goto is supported, 0 otherwise.\n \n proc check_effective_target_nonlocal_goto {} {\n-    if { [istarget nvptx-*-*] } {\n+    if { [istarget nvptx-*-*] || [istarget bpf-*-*] } {\n \treturn 0\n     }\n     return 1\n@@ -799,10 +800,9 @@ proc check_effective_target_nonlocal_goto {} {\n # Return 1 if global constructors are supported, 0 otherwise.\n \n proc check_effective_target_global_constructor {} {\n-    if { [istarget nvptx-*-*] } {\n-\treturn 0\n-    }\n-    if { [istarget amdgcn-*-*] } {\n+    if { [istarget nvptx-*-*]\n+\t || [istarget amdgcn-*-*]\n+\t || [istarget bpf-*-*] } {\n \treturn 0\n     }\n     return 1\n@@ -825,6 +825,10 @@ proc check_effective_target_return_address {} {\n     if { [istarget nvptx-*-*] } {\n \treturn 0\n     }\n+    # No notion of return address in eBPF.\n+    if { [istarget bpf-*-*] } {\n+\treturn 0\n+    }\n     # It could be supported on amdgcn, but isn't yet.\n     if { [istarget amdgcn*-*-*] } {\n \treturn 0"}, {"sha": "fdbc009925eb415385e1975a6a74050b58f016b0", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -1,3 +1,10 @@\n+2019-09-09  Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\n+\t* config.host: Set cpu_type for bpf-*-* targets.\n+\t* config/bpf/t-bpf: Likewise.\n+\t* config/bpf/crtn.S: Likewise.\n+\t* config/bpf/crti.S: New file.\n+\n 2019-09-06  Jim Wilson  <jimw@sifive.com>\n \n \t* config.host (riscv*-*-linux*): Add t-slibgcc-libgcc to tmake_file."}, {"sha": "b5826feec46f98f02b965346bf59032e2d861d56", "filename": "libgcc/config.host", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -107,6 +107,9 @@ avr-*-*)\n bfin*-*)\n \tcpu_type=bfin\n \t;;\n+bpf-*-*)\n+        cpu_type=bpf\n+        ;;\n cr16-*-*)\n \t;;\n crisv32-*-*)\n@@ -523,6 +526,10 @@ bfin*-*)\n \ttmake_file=\"$tmake_file bfin/t-bfin t-fdpbit\"\n \textra_parts=\"crtbegin.o crtend.o crti.o crtn.o\"\n         ;;\n+bpf-*-*)\n+        tmake_file=\"$tmake_file ${cpu_type}/t-${cpu_type}\"\n+        extra_parts=\"crti.o crtn.o\"\n+\t;;\n cr16-*-elf)\n \ttmake_file=\"${tmake_file} cr16/t-cr16 cr16/t-crtlibid t-fdpbit\"\n \textra_parts=\"$extra_parts crti.o crtn.o crtlibid.o\""}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "libgcc/config/bpf/crti.S", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/libgcc%2Fconfig%2Fbpf%2Fcrti.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/libgcc%2Fconfig%2Fbpf%2Fcrti.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fbpf%2Fcrti.S?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "libgcc/config/bpf/crtn.S", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/libgcc%2Fconfig%2Fbpf%2Fcrtn.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/libgcc%2Fconfig%2Fbpf%2Fcrtn.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fbpf%2Fcrtn.S?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c"}, {"sha": "88129a78f61ee639bb8c52f11f24d46f82a5f803", "filename": "libgcc/config/bpf/t-bpf", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dfef9610b8844c62dc7186a9aea9a6aca9805c/libgcc%2Fconfig%2Fbpf%2Ft-bpf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dfef9610b8844c62dc7186a9aea9a6aca9805c/libgcc%2Fconfig%2Fbpf%2Ft-bpf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fbpf%2Ft-bpf?ref=91dfef9610b8844c62dc7186a9aea9a6aca9805c", "patch": "@@ -0,0 +1,23 @@\n+LIB2ADDEH = \n+\n+crti.o: $(srcdir)/config/bpf/crti.S\n+\t$(crt_compile) $(CRTSTUFF_T_CFLAGS) -c $<\n+\n+crtn.o: $(srcdir)/config/bpf/crtn.S\n+\t$(crt_compile) $(CRTSTUFF_T_CFLAGS) -c $<\n+\n+# Some of the functions defined in libgcc2 exceed the eBPF stack\n+# limit, or other restrictions imposed by this peculiar target.\n+# Therefore we have to exclude them here.\n+#\n+# Patterns in bpf.md must guarantee that no calls to the excluded\n+# functions are ever generated, and compiler tests should make sure\n+# this holds.\n+#\n+# Note that the modes in the function names below are misleading: di\n+# means TImode.\n+LIB2FUNCS_EXCLUDE = _mulvdi3 _divdi3 _moddi3 _divmoddi4 _udivdi3 _umoddi3 \\\n+                    _udivmoddi4\n+\n+# Prevent building \"advanced\" stuff (for example, gcov support).\n+INHIBIT_LIBC_CFLAGS = -Dinhibit_libc"}]}