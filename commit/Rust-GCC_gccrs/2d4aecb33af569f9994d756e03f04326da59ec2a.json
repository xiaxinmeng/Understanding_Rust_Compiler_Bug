{"sha": "2d4aecb33af569f9994d756e03f04326da59ec2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ0YWVjYjMzYWY1NjlmOTk5NGQ3NTZlMDNmMDQzMjZkYTU5ZWMyYQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@cygnus.com", "date": "2000-05-26T01:49:38Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2000-05-26T01:49:38Z"}, "message": "emit-rtl.c (reset_used_decls): New function.\n\n* emit-rtl.c (reset_used_decls): New function.\n(unshare_all_rtl_again): Call it.\n\nFrom-SVN: r34184", "tree": {"sha": "b60fc94b7dc8688d66ee58706f53651915ae1741", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b60fc94b7dc8688d66ee58706f53651915ae1741"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d4aecb33af569f9994d756e03f04326da59ec2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d4aecb33af569f9994d756e03f04326da59ec2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d4aecb33af569f9994d756e03f04326da59ec2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d4aecb33af569f9994d756e03f04326da59ec2a/comments", "author": null, "committer": null, "parents": [{"sha": "476f28692a80a42632b33b7fb1f0725f81bdbce0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/476f28692a80a42632b33b7fb1f0725f81bdbce0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/476f28692a80a42632b33b7fb1f0725f81bdbce0"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "b3866d9bb815892dab4b855204134e77d4149e2f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d4aecb33af569f9994d756e03f04326da59ec2a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d4aecb33af569f9994d756e03f04326da59ec2a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d4aecb33af569f9994d756e03f04326da59ec2a", "patch": "@@ -1,3 +1,8 @@\n+2000-05-25  Alexandre Oliva  <aoliva@cygnus.com>\n+\n+\t* emit-rtl.c (reset_used_decls): New function.\n+\t(unshare_all_rtl_again): Call it.\n+\n 2000-05-25  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* cpplex.c (maybe_macroexpand): Warn about function-like"}, {"sha": "d9a6c65c9cf304239727f7de31d5edda574242a2", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d4aecb33af569f9994d756e03f04326da59ec2a/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d4aecb33af569f9994d756e03f04326da59ec2a/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=2d4aecb33af569f9994d756e03f04326da59ec2a", "patch": "@@ -179,6 +179,7 @@ static rtx find_line_note\t\tPARAMS ((rtx));\n static void mark_sequence_stack         PARAMS ((struct sequence_stack *));\n static void unshare_all_rtl_1\t\tPARAMS ((rtx));\n static void unshare_all_decls\t\tPARAMS ((tree));\n+static void reset_used_decls\t\tPARAMS ((tree));\n static hashval_t const_int_htab_hash    PARAMS ((const void *));\n static int const_int_htab_eq            PARAMS ((const void *,\n \t\t\t\t\t\t const void *));\n@@ -1733,6 +1734,9 @@ unshare_all_rtl_again (insn)\n \treset_used_flags (LOG_LINKS (p));\n       }\n \n+  /* Make sure that virtual stack slots are not shared.  */\n+  reset_used_decls (DECL_INITIAL (cfun->decl));\n+\n   /* Make sure that virtual parameters are not shared.  */\n   for (decl = DECL_ARGUMENTS (cfun->decl); decl; decl = TREE_CHAIN (decl))\n     reset_used_flags (DECL_RTL (decl));\n@@ -1768,13 +1772,30 @@ unshare_all_decls (blk)\n \n   /* Copy shared decls.  */\n   for (t = BLOCK_VARS (blk); t; t = TREE_CHAIN (t))\n-    DECL_RTL (t)  = copy_rtx_if_shared (DECL_RTL (t));\n+    DECL_RTL (t) = copy_rtx_if_shared (DECL_RTL (t));\n \n   /* Now process sub-blocks.  */\n   for (t = BLOCK_SUBBLOCKS (blk); t; t = TREE_CHAIN (t))\n     unshare_all_decls (t);\n }\n \n+/* Go through all virtual stack slots of a function and mark them as\n+   not shared. */\n+static void\n+reset_used_decls (blk)\n+     tree blk;\n+{\n+  tree t;\n+\n+  /* Mark decls.  */\n+  for (t = BLOCK_VARS (blk); t; t = TREE_CHAIN (t))\n+    reset_used_flags (DECL_RTL (t));\n+\n+  /* Now process sub-blocks.  */\n+  for (t = BLOCK_SUBBLOCKS (blk); t; t = TREE_CHAIN (t))\n+    reset_used_decls (t);\n+}\n+\n /* Mark ORIG as in use, and return a copy of it if it was already in use.\n    Recursively does the same for subexpressions.  */\n "}]}