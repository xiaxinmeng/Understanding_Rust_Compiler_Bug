{"sha": "01c59ef2e5a59b44d2b662361196abb6be872a20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFjNTllZjJlNWE1OWI0NGQyYjY2MjM2MTE5NmFiYjZiZTg3MmEyMA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-05-27T00:16:53Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-05-27T00:16:53Z"}, "message": "Daily bump.", "tree": {"sha": "d03f010a019a5b25d708b6caef62114a77301653", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d03f010a019a5b25d708b6caef62114a77301653"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01c59ef2e5a59b44d2b662361196abb6be872a20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01c59ef2e5a59b44d2b662361196abb6be872a20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01c59ef2e5a59b44d2b662361196abb6be872a20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01c59ef2e5a59b44d2b662361196abb6be872a20/comments", "author": null, "committer": null, "parents": [{"sha": "58523f23fefcef0850841e7055d75d4309f0453e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58523f23fefcef0850841e7055d75d4309f0453e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58523f23fefcef0850841e7055d75d4309f0453e"}], "stats": {"total": 358, "additions": 357, "deletions": 1}, "files": [{"sha": "c639576878dbfa68882b0cd530701a764908767b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 214, "deletions": 0, "changes": 214, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01c59ef2e5a59b44d2b662361196abb6be872a20/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01c59ef2e5a59b44d2b662361196abb6be872a20/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=01c59ef2e5a59b44d2b662361196abb6be872a20", "patch": "@@ -1,3 +1,217 @@\n+2021-05-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR c/100653\n+\t* doc/extend.texi (scalar_storage_order): Rephrase slightly.\n+\n+2021-05-26  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssanames.c (get_range_info): Merge both copies of\n+\tget_range_info into one that works with irange.\n+\t* tree-ssanames.h (get_range_info): Remove version that works on\n+\twide_ints.\n+\n+2021-05-26  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* builtins.c (check_nul_terminated_array): Convert to get_range_query.\n+\t(expand_builtin_strnlen): Same.\n+\t(determine_block_size): Same.\n+\t* fold-const.c (expr_not_equal_to): Same.\n+\t* gimple-fold.c (size_must_be_zero_p): Same.\n+\t* gimple-match-head.c: Include gimple-range.h.\n+\t* gimple-pretty-print.c (dump_ssaname_info): Convert to get_range_query.\n+\t* gimple-ssa-warn-restrict.c\n+\t(builtin_memref::extend_offset_range): Same.\n+\t* graphite-sese-to-poly.c (add_param_constraints): Same.\n+\t* internal-fn.c (get_min_precision): Same.\n+\t* ipa-fnsummary.c (set_switch_stmt_execution_predicate): Same.\n+\t* ipa-prop.c (ipa_compute_jump_functions_for_edge): Same.\n+\t* match.pd: Same.\n+\t* tree-data-ref.c (split_constant_offset): Same.\n+\t(dr_step_indicator): Same.\n+\t* tree-dfa.c (get_ref_base_and_extent): Same.\n+\t* tree-scalar-evolution.c (iv_can_overflow_p): Same.\n+\t* tree-ssa-loop-niter.c (refine_value_range_using_guard): Same.\n+\t(determine_value_range): Same.\n+\t(record_nonwrapping_iv): Same.\n+\t(infer_loop_bounds_from_signedness): Same.\n+\t(scev_var_range_cant_overflow): Same.\n+\t* tree-ssa-phiopt.c (two_value_replacement): Same.\n+\t* tree-ssa-pre.c (insert_into_preds_of_block): Same.\n+\t* tree-ssa-reassoc.c (optimize_range_tests_to_bit_test): Same.\n+\t* tree-ssa-strlen.c (handle_builtin_stxncpy_strncat): Same.\n+\t(get_range): Same.\n+\t(dump_strlen_info): Same.\n+\t(set_strlen_range): Same.\n+\t(maybe_diag_stxncpy_trunc): Same.\n+\t(get_len_or_size): Same.\n+\t(handle_integral_assign): Same.\n+\t* tree-ssa-structalias.c (find_what_p_points_to): Same.\n+\t* tree-ssa-uninit.c (find_var_cmp_const): Same.\n+\t* tree-switch-conversion.c (bit_test_cluster::emit): Same.\n+\t* tree-vect-patterns.c (vect_get_range_info): Same.\n+\t(vect_recog_divmod_pattern): Same.\n+\t* tree-vrp.c (intersect_range_with_nonzero_bits): Same.\n+\t(register_edge_assert_for_2): Same.\n+\t(determine_value_range_1): Same.\n+\t* tree.c (get_range_pos_neg): Same.\n+\t* vr-values.c (vr_values::get_lattice_entry): Same.\n+\t(vr_values::update_value_range): Same.\n+\t(simplify_conversion_using_ranges): Same.\n+\n+2021-05-26  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-ssa-warn-alloca.c (alloca_call_type): Use\n+\t  get_range_query instead of query argument.\n+\t(pass_walloca::execute): Enable and disable global ranger.\n+\n+2021-05-26  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-ssa-evrp.c (rvrp_folder::rvrp_folder): Call\n+\tenable_ranger.\n+\t(rvrp_folder::~rvrp_folder): Call disable_ranger.\n+\t(hybrid_folder::hybrid_folder): Call enable_ranger.\n+\t(hybrid_folder::~hybrid_folder): Call disable_ranger.\n+\n+2021-05-26  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* function.c (allocate_struct_function): Set cfun->x_range_query.\n+\t* function.h (struct function): Declare x_range_query.\n+\t(get_range_query): New.\n+\t(get_global_range_query): New.\n+\t* gimple-range-cache.cc (ssa_global_cache::ssa_global_cache):\n+\tRemove call to safe_grow_cleared.\n+\t* gimple-range.cc (get_range_global): New.\n+\t(gimple_range_global): Move from gimple-range.h.\n+\t(get_global_range_query): New.\n+\t(global_range_query::range_of_expr): New.\n+\t(enable_ranger): New.\n+\t(disable_ranger): New.\n+\t* gimple-range.h (gimple_range_global): Move to gimple-range.cc.\n+\t(class global_range_query): New.\n+\t(enable_ranger): New.\n+\t(disable_ranger): New.\n+\t* gimple-ssa-evrp.c (evrp_folder::~evrp_folder): Rename\n+\tdump_all_value_ranges to dump.\n+\t* tree-vrp.c (vrp_prop::finalize): Same.\n+\t* value-query.cc (range_query::dump): New.\n+\t* value-query.h (range_query::dump): New.\n+\t* vr-values.c (vr_values::dump_all_value_ranges): Rename to...\n+\t(vr_values::dump): ...this.\n+\t* vr-values.h (class vr_values): Rename dump_all_value_ranges to\n+\tdump and make virtual.\n+\n+2021-05-26  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_autovectorize_vector_modes):\n+\tAdd V4QImode and V16QImode for TARGET_SSE2.\n+\t* doc/sourcebuild.texi (Vector-specific attributes):\n+\tAdd vect64 and vect32 description.\n+\n+2021-05-26  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* gimple-range-gori.cc (range_def_chain::register_dependency):\n+\tResize m_def_chain when needed.\n+\n+2021-05-26  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* config/arm/mve.md (mve_vaddvq_<supf><mode>): Prefix with '@'.\n+\t* config/arm/neon.md (reduc_plus_scal_<mode>): Move to ..\n+\t* config/arm/vec-common.md: .. here. Add support for MVE.\n+\n+2021-05-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/epiphany/epiphany.c (epiphany_print_operand_address): Remove\n+\tregister keywords.\n+\t* config/microblaze/microblaze.c (microblaze_legitimize_address,\n+\tcall_internal1,\n+\tmicroblaze_option_override, print_operand): Likewise.\n+\t* config/microblaze/microblaze.md (call_internal_plt,\n+\tcall_value_intern_plt, call_value_intern): Likewise.\n+\t* config/arm/aout.h (ASM_OUTPUT_ALIGN): Likewise.\n+\t* config/iq2000/iq2000.md (call_internal1, call_value_internal1,\n+\tcall_value_multiple_internal1): Likewise.\n+\t* config/bfin/bfin.c (symbolic_reference_mentioned_p): Likewise.\n+\n+2021-05-26  Jan-Benedict Glaw  <jbglaw@lug-owl.de>\n+\n+\t* config/arc/arc.c (arc_address_cost, arc_print_operand_address,\n+\tarc_ccfsm_advance, symbolic_reference_mentioned_p,\n+\tarc_raw_symbolic_reference_mentioned_p): Remove register\n+\tkeyword.\n+\n+2021-05-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libgomp/100573\n+\t* omp-low.c: Include omp-offload.h.\n+\t(create_omp_child_function): If current_function_decl has\n+\t\"omp declare target\" attribute and is_gimple_omp_offloaded,\n+\tremove that attribute from the copy of attribute list and\n+\tadd \"omp target entrypoint\" attribute instead.\n+\t(lower_omp_target): Mark .omp_data_sizes.* and .omp_data_kinds.*\n+\tvariables for offloading if in omp_maybe_offloaded_ctx.\n+\t* omp-offload.c (pass_omp_target_link::execute): Nullify second\n+\targument to GOMP_target_data_ext in offloaded code.\n+\n+2021-05-26  Geng Qi  <gengqi@linux.alibaba.com>\n+\n+\t* config/csky/csky.c (csky_can_change_mode_class): Delete.\n+\tFor csky, HF/SF mode use the low bits of VREGS.\n+\n+2021-05-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gimplify.c (gimplify_decl_expr): Do not clear TREE_READONLY on a\n+\tDECL which is a reference for OMP.\n+\n+2021-05-26  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/100751\n+\t* doc/gcov.texi: Document that __gcov_dump can be called just\n+\tonce and that __gcov_reset resets run-time counters.\n+\n+2021-05-26  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/install.texi: Port relevant part from install-old.texi\n+\tand re-generate list of CPUs and systems.\n+\n+2021-05-26  Martin Liska  <mliska@suse.cz>\n+\n+\t* Makefile.in: Remove it.\n+\t* doc/include/fdl.texi: Update next/previous chapters.\n+\t* doc/install.texi: Likewise.\n+\t* doc/install-old.texi: Removed.\n+\n+2021-05-26  Geng Qi  <gengqi@linux.alibaba.com>\n+\n+\t* config/csky/csky.c (ck810_legitimate_index_p): Support\n+\t\"base + index\" with DF mode.\n+\t* config/csky/constraints.md (\"Y\"): New constraint for memory operands\n+\twithout index register.\n+\t* config/csky/csky_insn_fpuv2.md (fpuv3_movdf): Use \"Y\" instead of \"m\"\n+\twhen mov between memory and general registers, and lower their priority.\n+\t* config/csky/csky_insn_fpuv3.md (fpuv2_movdf): Likewise.\n+\n+2021-05-26  Geng Qi  <gengqi@linux.alibaba.com>\n+\n+\t* config/csky/csky.c (TARGET_PROMOTE_PROTOTYPES): Delete.\n+\n+2021-05-26  Geng Qi  <gengqi@linux.alibaba.com>\n+\n+\t* config/csky/csky.md (untyped_call): Emit clobber for return\n+\tregisters to mark them used.\n+\n+2021-05-26  Geng Qi  <gengqi@linux.alibaba.com>\n+\n+\t* config/csky/csky.md (cskyv2_sextend_ldbs): New.\n+\n+2021-05-26  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* match.pd (x < 0 ? ~y : y): New patterns.\n+\n+2021-05-26  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* match.pd (A?CST1:CST2): Add simplifcations for A?0:+-1, A?+-1:0,\n+\tA?POW2:0 and A?0:POW2.\n+\n 2021-05-25  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* gimple-range-gori.cc (class logical_stmt_cache): Delete"}, {"sha": "328fa3e7e5d9ffb8dbda2a50fc9db93f1a2737eb", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01c59ef2e5a59b44d2b662361196abb6be872a20/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01c59ef2e5a59b44d2b662361196abb6be872a20/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=01c59ef2e5a59b44d2b662361196abb6be872a20", "patch": "@@ -1 +1 @@\n-20210526\n+20210527"}, {"sha": "0641e609e4731c9208fc73e5e295c78a36c13c08", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01c59ef2e5a59b44d2b662361196abb6be872a20/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01c59ef2e5a59b44d2b662361196abb6be872a20/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=01c59ef2e5a59b44d2b662361196abb6be872a20", "patch": "@@ -1,3 +1,7 @@\n+2021-05-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* init.c (__gnat_error_handler): Remove register keyword.\n+\n 2021-05-25  Martin Liska  <mliska@suse.cz>\n \n \t* doc/share/conf.py: Fix Sphinx 4.0.x error."}, {"sha": "669a8184bf71e3594e1e6078828ffcad5daa021c", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01c59ef2e5a59b44d2b662361196abb6be872a20/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01c59ef2e5a59b44d2b662361196abb6be872a20/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=01c59ef2e5a59b44d2b662361196abb6be872a20", "patch": "@@ -1,3 +1,9 @@\n+2021-05-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR c/100653\n+\t* c-decl.c (finish_struct): Warn for a union containing an aggregate\n+\tfield with a differing scalar storage order.\n+\n 2021-05-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/99928"}, {"sha": "7c13a6e037918e72c1813bede6a7929fb6c59cc9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01c59ef2e5a59b44d2b662361196abb6be872a20/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01c59ef2e5a59b44d2b662361196abb6be872a20/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=01c59ef2e5a59b44d2b662361196abb6be872a20", "patch": "@@ -1,3 +1,27 @@\n+2021-05-26  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/100502\n+\t* typeck.c (finish_class_member_access_expr): Disable ahead\n+\tof time access checking during the member lookup.\n+\n+2021-05-26  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/100368\n+\t* tree.c (build_target_expr_with_type): Don't call force_rvalue\n+\ton CALL_EXPR initializer.  Simplify now that bot_manip is no\n+\tlonger a caller.\n+\t(bot_manip): Use force_target_expr instead of\n+\tbuild_target_expr_with_type.\n+\n+2021-05-26  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/97420\n+\t* cvt.c (noexcept_conv_p): Remove redundant checks and simplify.\n+\t(fnptr_conv_p): Don't call non_reference.  Use INDIRECT_TYPE_P\n+\tinstead of TYPE_PTR_P.\n+\t* pt.c (convert_nontype_argument_function): Look through\n+\timplicit INDIRECT_REFs before calling strip_fnptr_conv.\n+\n 2021-05-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/100666"}, {"sha": "b62a557c82c71f1d21adcde7dd7b9d77bdf30f8d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01c59ef2e5a59b44d2b662361196abb6be872a20/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01c59ef2e5a59b44d2b662361196abb6be872a20/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=01c59ef2e5a59b44d2b662361196abb6be872a20", "patch": "@@ -1,3 +1,58 @@\n+2021-05-26  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/100502\n+\t* g++.dg/template/access37.C: New test.\n+\t* g++.dg/template/access37a.C: New test.\n+\n+2021-05-26  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/Wstringop-overflow-55.c: Adapt for range query changes.\n+\t* gcc.dg/pr80776-1.c: Same.\n+\n+2021-05-26  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_vect32): New.\n+\t(available_vector_sizes): Append 32 for x86 targets.\n+\t* gcc.dg/vect/pr71264.c (dg-final): Xfail scan dump for vect32 targets.\n+\t* gcc.dg/vect/slp-28.c (dg-final): Adjust dumps for vect32 targets.\n+\t* gcc.dg/vect/slp-3.c (dg-final): Ditto.\n+\t* gcc.target/i386/pr100637-3b.c: New test.\n+\t* gcc.target/i386/pr100637-3w.c: Ditto.\n+\t* gcc.target/i386/pr100637-4b.c: Ditto.\n+\t* gcc.target/i386/pr100637-4w.c: Ditto.\n+\n+2021-05-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.dg/sso-13.c: New test.\n+\n+2021-05-26  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/arm/simd/mve-vaddv-1.c: New test.\n+\n+2021-05-26  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/100368\n+\t* g++.dg/cpp1z/elide6.C: New test.\n+\n+2021-05-26  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/97420\n+\t* g++.dg/cpp0x/noexcept68.C: New test.\n+\n+2021-05-26  Geng Qi  <gengqi@linux.alibaba.com>\n+\n+\t* gcc.target/csky/fldrd_fstrd.c: New.\n+\t* gcc.target/csky/fpuv3/fldr64_fstr64.c: New.\n+\n+2021-05-26  Geng Qi  <gengqi@linux.alibaba.com>\n+\n+\t* gcc.target/csky/ldbs.c: New.\n+\n+2021-05-26  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* gcc.dg/tree-ssa/pr96928.c: Update test for slightly different IR.\n+\t* gcc.dg/tree-ssa/pr96928-1.c: New testcase.\n+\n 2021-05-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/100666"}, {"sha": "67bf1f0e99989eae700c12e0ba4d1a0502c81310", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01c59ef2e5a59b44d2b662361196abb6be872a20/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01c59ef2e5a59b44d2b662361196abb6be872a20/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=01c59ef2e5a59b44d2b662361196abb6be872a20", "patch": "@@ -1,3 +1,18 @@\n+2021-05-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libgomp/100573\n+\t* config/nvptx/target.c (GOMP_target_ext, GOMP_target_data_ext,\n+\tGOMP_target_end_data, GOMP_target_update_ext,\n+\tGOMP_target_enter_exit_data): New dummy entrypoints.\n+\t* config/gcn/target.c (GOMP_target_ext, GOMP_target_data_ext,\n+\tGOMP_target_end_data, GOMP_target_update_ext,\n+\tGOMP_target_enter_exit_data): Likewise.\n+\t* testsuite/libgomp.c-c++-common/for-3.c (DO_PRAGMA, OMPTEAMS,\n+\tOMPFROM, OMPTO): Define.\n+\t(main): Remove #pragma omp target teams around all the tests.\n+\t* testsuite/libgomp.c-c++-common/target-41.c: New test.\n+\t* testsuite/libgomp.c-c++-common/target-42.c: New test.\n+\n 2021-05-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/99928"}, {"sha": "879b2ecea8ca40734028b727836ec72bf5e3a5ad", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01c59ef2e5a59b44d2b662361196abb6be872a20/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01c59ef2e5a59b44d2b662361196abb6be872a20/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=01c59ef2e5a59b44d2b662361196abb6be872a20", "patch": "@@ -1,3 +1,41 @@\n+2021-05-26  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/debug/formatter.h\n+\t(_Error_formatter::_Parameter::_Named): New.\n+\t(_Error_formatter::_Parameter::_Type): Inherit latter.\n+\t(_Error_formatter::_Parameter::_M_integer): Likewise.\n+\t(_Error_formatter::_Parameter::_M_string): Likewise.\n+\t* src/c++11/debug.cc: Include <cstring>.\n+\t(_Print_func_t): New.\n+\t(print_raw(PrintContext&, const char*, ptrdiff_t)): New.\n+\t(print_word): Use '%.*s' format in fprintf to render only expected number of chars.\n+\t(pretty_print(PrintContext&, const char*, _Print_func_t)): New.\n+\t(print_type): Rename in...\n+\t(print_type_info): ...this. Use pretty_print.\n+\t(print_address, print_integer): New.\n+\t(print_named_name, print_iterator_constness, print_iterator_state): New.\n+\t(print_iterator_seq_type): New.\n+\t(print_named_field, print_type_field, print_instance_field, print_iterator_field): New.\n+\t(print_field): Use latters.\n+\t(print_quoted_named_name, print_type_type, print_type, print_instance): New.\n+\t(print_string(PrintContext&, const char*, const _Parameter*, size_t)):\n+\tChange signature to...\n+\t(print_string(PrintContext&, const char*, ptrdiff_t, const _Parameter*, size_t)):\n+\t...this and adapt. Remove intermediate buffer to render input string.\n+\t(print_string(PrintContext&, const char*, ptrdiff_t)): New.\n+\n+2021-05-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/100768\n+\t* include/bits/ranges_base.h (advance, distance, next, prev):\n+\tReplace function templates with function objects.\n+\t* testsuite/24_iterators/headers/iterator/synopsis_c++20.cc:\n+\tAdjust for changes to function objects.\n+\t* testsuite/std/ranges/adaptors/elements.cc: Add using\n+\tdeclarations for names from namespace ranges.\n+\t* testsuite/std/ranges/adaptors/transform.cc: Likewise.\n+\t* testsuite/24_iterators/range_operations/100768.cc: New test.\n+\n 2021-05-24  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \tPR libstdc++/96088"}]}