{"sha": "9b3fad96a672acd1d1b7a4b194065fa8fbb2a547", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWIzZmFkOTZhNjcyYWNkMWQxYjdhNGIxOTQwNjVmYThmYmIyYTU0Nw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-10-06T04:06:46Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-10-06T04:06:46Z"}, "message": "(uns_small_int, uns_arith_operand): New functions.\n\nFrom-SVN: r5626", "tree": {"sha": "4db44bebaf1f2b306ab4a3057a61d0e4ae1b4353", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4db44bebaf1f2b306ab4a3057a61d0e4ae1b4353"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b3fad96a672acd1d1b7a4b194065fa8fbb2a547", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b3fad96a672acd1d1b7a4b194065fa8fbb2a547", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b3fad96a672acd1d1b7a4b194065fa8fbb2a547", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b3fad96a672acd1d1b7a4b194065fa8fbb2a547/comments", "author": null, "committer": null, "parents": [{"sha": "a56e71332738952aecb6a119d4a8a8e54e907985", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a56e71332738952aecb6a119d4a8a8e54e907985", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a56e71332738952aecb6a119d4a8a8e54e907985"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "549fb7e21575f8a944ffc378c6c13179f5fa526e", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3fad96a672acd1d1b7a4b194065fa8fbb2a547/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3fad96a672acd1d1b7a4b194065fa8fbb2a547/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=9b3fad96a672acd1d1b7a4b194065fa8fbb2a547", "patch": "@@ -434,6 +434,36 @@ small_int (op, mode)\n   return (GET_CODE (op) == CONST_INT && SMALL_INT (op));\n }\n \n+/* Recognize operand values for the umul instruction.  That instruction sign\n+   extends immediate values just like all other sparc instructions, but\n+   interprets the extended result as an unsigned number.  */\n+\n+int\n+uns_small_int (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+#if HOST_BITS_PER_WIDE_INT > 32\n+  /* All allowed constants will fit a CONST_INT.  */\n+  return (GET_CODE (op) == CONST_INT\n+\t  && ((INTVAL (op) >= 0 && INTVAL (op) < 0x1000)\n+\t      || (INTVAL (op) >= 0xFFFFF000 && INTVAL (op) < 0x100000000L)));\n+#else\n+  return ((GET_CODE (op) == CONST_INT && (unsigned) INTVAL (op) < 0x1000)\n+\t  || (GET_CODE (op) == CONST_DOUBLE\n+\t      && CONST_DOUBLE_HIGH (op) == 0\n+\t      && (unsigned) CONST_DOUBLE_LOW (op) - 0xFFFFF000 < 0x1000));\n+#endif\n+}\n+\n+int\n+uns_arith_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  return register_operand (op, mode) || uns_small_int (op, mode);\n+}\n+\n /* Return truth value of statement that OP is a call-clobbered register.  */\n int\n clobbered_register (op, mode)"}]}