{"sha": "db8b22ef4925f80ce5cabb585852896548f78c7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI4YjIyZWY0OTI1ZjgwY2U1Y2FiYjU4NTg1Mjg5NjU0OGY3OGM3ZQ==", "commit": {"author": {"name": "Tristan Gingold", "email": "gingold@adacore.com", "date": "2011-06-27T12:51:09Z"}, "committer": {"name": "Tristan Gingold", "email": "gingold@gcc.gnu.org", "date": "2011-06-27T12:51:09Z"}, "message": "re PR target/44241 (vms-crtl.h, vms-crtl-64.h need many more symbols)\n\n2011-06-27  Tristan Gingold  <gingold@adacore.com>\n\n\tPR target/44241\n\t* config/vms/vms-protos.h: New file.\n\t* config/vms/vms-crtlmap.map: New file.\n\t* config/vms/vms.c: New file.\n\t* config/vms/make-crtlmap.awk: New file.\n\t* config/vms/vms-crtl.h: File removed.\n\t* config/vms/vms-crtl-64.h: File removed.\n\t* config/vms/t-vms (vms-crtlmap.h, vms.o): New targets.\n\t* config/alpha/vms64.h: Do not include vms-crtl-64.h\n\t* config/alpha/alpha.c (alpha_init_builtins): Remove code to\n\tclear some builtins on VMS.  Calls vms_patch_builtins.\n\t(avms_asm_output_external): Remove.\n\t* config/alpha/vms.h (ASM_OUTPUT_EXTERNAL): Remove.\n\t(struct crtl_name_spec): Remove\n\t(DO_CTRL_NAMES): Remove.\n\t* config/ia64/vms.h (struct crtl_name_spec): Remove\n\t(DO_CTRL_NAMES): Remove.\n\t* config/ia64/ia64.c (alpha_init_builtins): Remove code to\n\tclear some builtins on VMS.  Calls vms_patch_builtins.\n\t(ia64_asm_output_external): Remove DO_CRTL_NAME.\n\t* config/ia64/vms64.h: Do not include vms-crtl-64.h\n\t* config.gcc (*-*-*vms*): Define extra_objs, target_gtfiles,\n\ttm_p_file.\n\nFrom-SVN: r175523", "tree": {"sha": "13f91471f1f0706179d3d23de8d17a9151cb080c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13f91471f1f0706179d3d23de8d17a9151cb080c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db8b22ef4925f80ce5cabb585852896548f78c7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db8b22ef4925f80ce5cabb585852896548f78c7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db8b22ef4925f80ce5cabb585852896548f78c7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db8b22ef4925f80ce5cabb585852896548f78c7e/comments", "author": {"login": "gingold-adacore", "id": 16334725, "node_id": "MDQ6VXNlcjE2MzM0NzI1", "avatar_url": "https://avatars.githubusercontent.com/u/16334725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gingold-adacore", "html_url": "https://github.com/gingold-adacore", "followers_url": "https://api.github.com/users/gingold-adacore/followers", "following_url": "https://api.github.com/users/gingold-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/gingold-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/gingold-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gingold-adacore/subscriptions", "organizations_url": "https://api.github.com/users/gingold-adacore/orgs", "repos_url": "https://api.github.com/users/gingold-adacore/repos", "events_url": "https://api.github.com/users/gingold-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/gingold-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b213221d256fa5e5732756d4814e48c9ef09df93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b213221d256fa5e5732756d4814e48c9ef09df93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b213221d256fa5e5732756d4814e48c9ef09df93"}], "stats": {"total": 993, "additions": 487, "deletions": 506}, "files": [{"sha": "2e1bc76b09318ce7fe1c991609cf655c3edcd00b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db8b22ef4925f80ce5cabb585852896548f78c7e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db8b22ef4925f80ce5cabb585852896548f78c7e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db8b22ef4925f80ce5cabb585852896548f78c7e", "patch": "@@ -1,3 +1,29 @@\n+2011-06-27  Tristan Gingold  <gingold@adacore.com>\n+\n+\tPR target/44241\n+\t* config/vms/vms-protos.h: New file.\n+\t* config/vms/vms-crtlmap.map: New file.\n+\t* config/vms/vms.c: New file.\n+\t* config/vms/make-crtlmap.awk: New file.\n+\t* config/vms/vms-crtl.h: File removed.\n+\t* config/vms/vms-crtl-64.h: File removed.\n+\t* config/vms/t-vms (vms-crtlmap.h, vms.o): New targets.\n+\t* config/alpha/vms64.h: Do not include vms-crtl-64.h\n+\t* config/alpha/alpha.c (alpha_init_builtins): Remove code to\n+\tclear some builtins on VMS.  Calls vms_patch_builtins.\n+\t(avms_asm_output_external): Remove.\n+\t* config/alpha/vms.h (ASM_OUTPUT_EXTERNAL): Remove.\n+\t(struct crtl_name_spec): Remove\n+\t(DO_CTRL_NAMES): Remove.\n+\t* config/ia64/vms.h (struct crtl_name_spec): Remove\n+\t(DO_CTRL_NAMES): Remove.\n+\t* config/ia64/ia64.c (alpha_init_builtins): Remove code to\n+\tclear some builtins on VMS.  Calls vms_patch_builtins.\n+\t(ia64_asm_output_external): Remove DO_CRTL_NAME.\n+\t* config/ia64/vms64.h: Do not include vms-crtl-64.h\n+\t* config.gcc (*-*-*vms*): Define extra_objs, target_gtfiles,\n+\ttm_p_file.\n+\n 2011-06-27  Tristan Gingold  <gingold@adacore.com>\n \n \t* config/alpha/alpha.c (alpha_end_function): Always generate .end"}, {"sha": "14c7a81f45ba8923c8dba72d00a38b97443968f1", "filename": "gcc/config.gcc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db8b22ef4925f80ce5cabb585852896548f78c7e/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db8b22ef4925f80ce5cabb585852896548f78c7e/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=db8b22ef4925f80ce5cabb585852896548f78c7e", "patch": "@@ -721,6 +721,9 @@ case ${target} in\n   extra_options=\"${extra_options} vms/vms.opt\"\n   xmake_file=vms/x-vms\n   tmake_file=\"vms/t-vms\"\n+  extra_objs=\"vms.o\"\n+  target_gtfiles=\"$target_gtfiles \\$(srcdir)/config/vms/vms.c\"\n+  tm_p_file=\"${tm_p_file} vms/vms-protos.h\"\n   if test x$gnu_ld != xyes; then\n     # Build wrappers for native case.\n     extra_programs=\"ld\\$(exeext) ar\\$(exeext)\""}, {"sha": "5d656f1296330ab82d11599be9c327f67587837a", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db8b22ef4925f80ce5cabb585852896548f78c7e/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db8b22ef4925f80ce5cabb585852896548f78c7e/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=db8b22ef4925f80ce5cabb585852896548f78c7e", "patch": "@@ -6367,12 +6367,6 @@ alpha_init_builtins (void)\n \n   dimode_integer_type_node = lang_hooks.types.type_for_mode (DImode, 0);\n \n-  /* Fwrite on VMS is non-standard.  */\n-#if TARGET_ABI_OPEN_VMS\n-  implicit_built_in_decls[(int) BUILT_IN_FWRITE] = NULL_TREE;\n-  implicit_built_in_decls[(int) BUILT_IN_FWRITE_UNLOCKED] = NULL_TREE;\n-#endif\n-\n   ftype = build_function_type_list (dimode_integer_type_node, NULL_TREE);\n   alpha_add_builtins (zero_arg_builtins, ARRAY_SIZE (zero_arg_builtins),\n \t\t      ftype);\n@@ -6409,6 +6403,8 @@ alpha_init_builtins (void)\n \t\t\t\t\tNULL_TREE);\n       alpha_builtin_function (\"__builtin_revert_vms_condition_handler\", ftype,\n \t\t\t      ALPHA_BUILTIN_REVERT_VMS_CONDITION_HANDLER, 0);\n+\n+      vms_patch_builtins ();\n     }\n \n   alpha_v8qi_u = build_vector_type (unsigned_intQI_type_node, 8);\n@@ -8169,15 +8165,6 @@ alpha_end_function (FILE *file, const char *fnname, tree decl ATTRIBUTE_UNUSED)\n   inside_function = FALSE;\n }\n \n-#if TARGET_ABI_OPEN_VMS\n-void avms_asm_output_external (FILE *file, tree decl ATTRIBUTE_UNUSED, const char *name)\n-{\n-#ifdef DO_CRTL_NAMES\n-  DO_CRTL_NAMES;\n-#endif\n-}\n-#endif\n-\n #if TARGET_ABI_OSF\n /* Emit a tail call to FUNCTION after adjusting THIS by DELTA.\n "}, {"sha": "fc74c236a375d52c46235a64368b35efcde52bdb", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db8b22ef4925f80ce5cabb585852896548f78c7e/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db8b22ef4925f80ce5cabb585852896548f78c7e/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=db8b22ef4925f80ce5cabb585852896548f78c7e", "patch": "@@ -225,55 +225,6 @@ typedef struct {int num_args; enum avms_arg_type atypes[6];} avms_arg_info;\n #define LINK_EH_SPEC \"vms-dwarf2eh.o%s \"\n #define LINK_GCC_C_SEQUENCE_SPEC \"%G\"\n \n-#define ASM_OUTPUT_EXTERNAL(FILE, DECL, NAME) \\\n-  avms_asm_output_external (FILE, DECL, NAME)\n-\n-typedef struct crtl_name_spec\n-{\n-  const char *const name;\n-  const char *deccname;\n-  int referenced;\n-} crtl_name_spec;\n-\n-#include \"config/vms/vms-crtl.h\"\n-\n-/* Alias CRTL names to 32/64bit DECCRTL functions. \n-   Fixme: This should do a binary search.  */\n-#define DO_CRTL_NAMES                                                      \\\n-  do                                                                       \\\n-    {                                                                      \\\n-      int i;                                                               \\\n-      static crtl_name_spec vms_crtl_names[] = CRTL_NAMES;                 \\\n-      static int malloc64_init = 0;                                        \\\n-                                                                           \\\n-      if ((malloc64_init == 0) && TARGET_MALLOC64)          \t\t   \\\n-\t{                                                                  \\\n-          for (i=0; vms_crtl_names [i].name; i++)                          \\\n-            {                                                              \\\n-\t      if (strcmp (\"calloc\", vms_crtl_names [i].name) == 0)         \\\n-                vms_crtl_names [i].deccname = \"decc$_calloc64\";            \\\n-              else                                                         \\\n-\t      if (strcmp (\"malloc\", vms_crtl_names [i].name) == 0)         \\\n-                vms_crtl_names [i].deccname = \"decc$_malloc64\";            \\\n-              else                                                         \\\n-\t      if (strcmp (\"realloc\", vms_crtl_names [i].name) == 0)        \\\n-                vms_crtl_names [i].deccname = \"decc$_realloc64\";           \\\n-              else                                                         \\\n-\t      if (strcmp (\"strdup\", vms_crtl_names [i].name) == 0)         \\\n-                vms_crtl_names [i].deccname = \"decc$_strdup64\";            \\\n-\t    }                                                              \\\n-            malloc64_init = 1;                                             \\\n-        }                                                                  \\\n-      for (i=0; vms_crtl_names [i].name; i++)                              \\\n-\tif (!vms_crtl_names [i].referenced &&                              \\\n-\t    (strcmp (name, vms_crtl_names [i].name) == 0))                 \\\n-\t  {                                                                \\\n-\t    fprintf (file, \"\\t%s=%s\\n\",                        \\\n-\t\t     name, vms_crtl_names [i].deccname);                   \\\n-\t    vms_crtl_names [i].referenced = 1;                             \\\n-\t  }                                                                \\\n-    } while (0)\n-\n /* This is how to output an assembler line\n    that says to advance the location counter\n    to a multiple of 2**LOG bytes.  */"}, {"sha": "495d3c6167dd5f2cfb888f06d1969c1e5b4f2f41", "filename": "gcc/config/alpha/vms64.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db8b22ef4925f80ce5cabb585852896548f78c7e/gcc%2Fconfig%2Falpha%2Fvms64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db8b22ef4925f80ce5cabb585852896548f78c7e/gcc%2Fconfig%2Falpha%2Fvms64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms64.h?ref=db8b22ef4925f80ce5cabb585852896548f78c7e", "patch": "@@ -49,5 +49,3 @@ along with GCC; see the file COPYING3.  If not see\n /* Defaults to \"long int\" */\n #undef SIZE_TYPE\n #undef PTRDIFF_TYPE\n-\n-# include \"config/vms/vms-crtl-64.h\""}, {"sha": "b0d9dc8a74691f2ddc5f6b6a25183d672d4d3ff8", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db8b22ef4925f80ce5cabb585852896548f78c7e/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db8b22ef4925f80ce5cabb585852896548f78c7e/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=db8b22ef4925f80ce5cabb585852896548f78c7e", "patch": "@@ -10133,8 +10133,7 @@ ia64_init_builtins (void)\n   /* Fwrite on VMS is non-standard.  */\n   if (TARGET_ABI_OPEN_VMS)\n     {\n-      implicit_built_in_decls[(int) BUILT_IN_FWRITE] = NULL_TREE;\n-      implicit_built_in_decls[(int) BUILT_IN_FWRITE_UNLOCKED] = NULL_TREE;\n+      vms_patch_builtins ();\n     }\n \n #define def_builtin(name, type, code)\t\t\t\t\t\\\n@@ -10263,10 +10262,6 @@ ia64_asm_output_external (FILE *file, tree decl, const char *name)\n       int need_visibility = ((*targetm.binds_local_p) (decl)\n \t\t\t     && maybe_assemble_visibility (decl));\n \n-#ifdef DO_CRTL_NAMES\n-      DO_CRTL_NAMES;\n-#endif\n-\n       /* GNU as does not need anything here, but the HP linker does\n \t need something for external functions.  */\n       if ((TARGET_HPUX_LD || !TARGET_GNU_AS)"}, {"sha": "847d79afa1d5adcb9b2364078223073fe2ea220b", "filename": "gcc/config/ia64/vms.h", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db8b22ef4925f80ce5cabb585852896548f78c7e/gcc%2Fconfig%2Fia64%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db8b22ef4925f80ce5cabb585852896548f78c7e/gcc%2Fconfig%2Fia64%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fvms.h?ref=db8b22ef4925f80ce5cabb585852896548f78c7e", "patch": "@@ -132,52 +132,6 @@ STATIC func_ptr __CTOR_LIST__[1]                                             \\\n /* Maybe same as HPUX?  Needs to be checked.  */\n #define JMP_BUF_SIZE  (8 * 76)\n \n-typedef struct crtl_name_spec\n-{\n-  const char *const name;\n-  const char *deccname;\n-  int referenced;\n-} crtl_name_spec;\n-\n-#include \"config/vms/vms-crtl.h\"\n-\n-/* Alias CRTL names to 32/64bit DECCRTL functions.\n-   Fixme: This should do a binary search.  */\n-#define DO_CRTL_NAMES                                                      \\\n-  do                                                                       \\\n-    {                                                                      \\\n-      int i;                                                               \\\n-      static crtl_name_spec vms_crtl_names[] = CRTL_NAMES;                 \\\n-      static int malloc64_init = 0;                                        \\\n-                                                                           \\\n-      if ((malloc64_init == 0) && TARGET_MALLOC64)                         \\\n-\t{                                                                  \\\n-          for (i=0; vms_crtl_names [i].name; i++)                          \\\n-            {                                                              \\\n-\t      if (strcmp (\"calloc\", vms_crtl_names [i].name) == 0)         \\\n-                vms_crtl_names [i].deccname = \"decc$_calloc64\";            \\\n-              else                                                         \\\n-\t      if (strcmp (\"malloc\", vms_crtl_names [i].name) == 0)         \\\n-                vms_crtl_names [i].deccname = \"decc$_malloc64\";            \\\n-              else                                                         \\\n-\t      if (strcmp (\"realloc\", vms_crtl_names [i].name) == 0)        \\\n-                vms_crtl_names [i].deccname = \"decc$_realloc64\";           \\\n-              else                                                         \\\n-\t      if (strcmp (\"strdup\", vms_crtl_names [i].name) == 0)         \\\n-                vms_crtl_names [i].deccname = \"decc$_strdup64\";            \\\n-\t    }                                                              \\\n-            malloc64_init = 1;                                             \\\n-        }                                                                  \\\n-      for (i=0; vms_crtl_names [i].name; i++)                              \\\n-\tif (!vms_crtl_names [i].referenced &&                              \\\n-\t    (strcmp (name, vms_crtl_names [i].name) == 0))                 \\\n-\t  {                                                                \\\n-\t    fprintf (file, \"\\t.alias %s, \\\"%s\\\"\\n\",                        \\\n-\t\t     name, vms_crtl_names [i].deccname);                   \\\n-\t    vms_crtl_names [i].referenced = 1;                             \\\n-\t  }                                                                \\\n-    } while (0)\n-\n #undef SUBTARGET_OPTIMIZATION_OPTIONS\n #define SUBTARGET_OPTIMIZATION_OPTIONS\t\t\t\\\n   { OPT_LEVELS_ALL, OPT_fmerge_constants, NULL, 0 }"}, {"sha": "a92014337c591d1bda9ac35ce07062146fc68218", "filename": "gcc/config/ia64/vms64.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db8b22ef4925f80ce5cabb585852896548f78c7e/gcc%2Fconfig%2Fia64%2Fvms64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db8b22ef4925f80ce5cabb585852896548f78c7e/gcc%2Fconfig%2Fia64%2Fvms64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fvms64.h?ref=db8b22ef4925f80ce5cabb585852896548f78c7e", "patch": "@@ -37,5 +37,3 @@ along with GCC; see the file COPYING3.  If not see\n \n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT (MASK_DWARF2_ASM | MASK_GNU_AS | MASK_MALLOC64)\n-\n-#include \"config/vms/vms-crtl-64.h\""}, {"sha": "6f82dee7aa856c1613dd92cf7c2e950b57d9d482", "filename": "gcc/config/vms/make-crtlmap.awk", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db8b22ef4925f80ce5cabb585852896548f78c7e/gcc%2Fconfig%2Fvms%2Fmake-crtlmap.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db8b22ef4925f80ce5cabb585852896548f78c7e/gcc%2Fconfig%2Fvms%2Fmake-crtlmap.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fmake-crtlmap.awk?ref=db8b22ef4925f80ce5cabb585852896548f78c7e", "patch": "@@ -0,0 +1,55 @@\n+# Generate the VMS crtl map\n+#\tCopyright (C) 2011  Free Software Foundation, Inc.\n+\n+BEGIN {\n+    is_first = 1;\n+    maxlen=1;\n+    maxlen_name=\"??\"\n+    prev=\"\"\n+    ORS=\"\"\n+}\n+\n+# Remove comment and blank lines.\n+/^ *#/ || /^ *$/ {\n+  next;\n+}\n+\n+{\n+    # Handle comma\n+    if (!is_first)\n+        print \",\\n\"\n+    else\n+        is_first = 0;\n+\n+    # Check the map is sorted\n+    if ($0 <= prev)\n+    {\n+        print \"Map not sorted!! (with name \" $0 \")\\n\"\n+        exit 1\n+    }\n+    prev = $0\n+\n+    # Compute the max of the identifier len.\n+    l=length($1)\n+    if (l > maxlen)\n+    {\n+        maxlen = l\n+        maxlen_name = $1\n+    }\n+\n+    print \"{ \\\"\" $1 \"\\\", \"\n+    if (NF == 1)\n+        print \"0 }\"\n+    else if (NF == 2)\n+        printf \"VMS_CRTL_\" $2 \" }\"\n+    else if (NF == 3)\n+        printf \"VMS_CRTL_\" $2 \" | VMS_CRTL_\" $3 \" }\"\n+    else\n+        # To be fixed.\n+        exit 1\n+}\n+\n+END {\n+    print \"\\n\\n\"\n+    print \"#define VMS_CRTL_MAXLEN \" maxlen \"  /*\" maxlen_name \" */\\n\"\n+}"}, {"sha": "516435df1f9c1f19c5c0abd25fdc670c919b102b", "filename": "gcc/config/vms/t-vms", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db8b22ef4925f80ce5cabb585852896548f78c7e/gcc%2Fconfig%2Fvms%2Ft-vms", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db8b22ef4925f80ce5cabb585852896548f78c7e/gcc%2Fconfig%2Fvms%2Ft-vms", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Ft-vms?ref=db8b22ef4925f80ce5cabb585852896548f78c7e", "patch": "@@ -35,3 +35,11 @@ $(T)pcrt0.o: $(srcdir)/config/vms/vms-ucrt0.c $(GCC_PASSES)\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n \t-c -o $(T)pcrt0.o -DCRT0_POSIX_EXIT $(srcdir)/config/vms/vms-ucrt0.c\n \n+vms-crtlmap.h: $(srcdir)/config/vms/vms-crtlmap.map  \\\n+  $(srcdir)/config/vms/make-crtlmap.awk\n+\t$(AWK) -f $(srcdir)/config/vms/make-crtlmap.awk \\\n+\t  $(srcdir)/config/vms/vms-crtlmap.map > $@\n+\n+vms.o: $(srcdir)/config/vms/vms.c $(TREE_H) $(CONFIG_H) $(SYSTEM_H) \\\n+  coretypes.h $(TM_P_H) vms-crtlmap.h\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}, {"sha": "84b653d79e2dd50b20651aa52df242591ff9284a", "filename": "gcc/config/vms/vms-crtl-64.h", "status": "removed", "additions": 0, "deletions": 195, "changes": 195, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b213221d256fa5e5732756d4814e48c9ef09df93/gcc%2Fconfig%2Fvms%2Fvms-crtl-64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b213221d256fa5e5732756d4814e48c9ef09df93/gcc%2Fconfig%2Fvms%2Fvms-crtl-64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms-crtl-64.h?ref=b213221d256fa5e5732756d4814e48c9ef09df93", "patch": "@@ -1,195 +0,0 @@\n-/* Definitions of target machine GNU compiler. 64bit VMS version.\n-   Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n-   Contributed by Douglas B Rupp (rupp@gnat.com).\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-/* \n-   Correlation array of 64bit standard CRTL names with DECCRTL\n-   function names. Currently contains only a partial list,\n-   e.g. those functions use in GNAT and GCC. Memory allocation\n-   routines are 32bit but this can be overridden by -mmalloc\n-   subtarget switch.\n-\n-   Note: Please keep in alphabetical order.\n-*/\n-\n-#undef CRTL_NAMES\n-#define CRTL_NAMES                          \\\n-{                                           \\\n-{\"_calloc32\",    \"decc$calloc\",       0},   \\\n-{\"_malloc32\",    \"decc$malloc\",       0},   \\\n-{\"_realloc32\",   \"decc$realloc\",      0},   \\\n-{\"_strdup32\",    \"decc$strdup\",       0},   \\\n-{\"abs\",          \"decc$abs\",          0},   \\\n-{\"abort\",        \"decc$abort\",        0},   \\\n-{\"access\",       \"decc$access\",       0},   \\\n-{\"accept\",       \"decc$accept\",       0},   \\\n-{\"acos\",         \"decc$tacos\",        0},   \\\n-{\"alarm\",        \"decc$alarm\",        0},   \\\n-{\"asin\",         \"decc$tasin\",        0},   \\\n-{\"atan\",         \"decc$tatan\",        0},   \\\n-{\"atan2\",        \"decc$tatan2\",       0},   \\\n-{\"atexit\",       \"decc$atexit\",       0},   \\\n-{\"atoi\",         \"decc$atoi\",         0},   \\\n-{\"atoll\",        \"decc$atoll\",        0},   \\\n-{\"atoq\",         \"decc$atoq\",         0},   \\\n-{\"basename\",     \"decc$_basename64\",  0},   \\\n-{\"bcmp\",         \"decc$bcmp\",         0},   \\\n-{\"bcopy\",        \"decc$bcopy\",        0},   \\\n-{\"bsearch\",      \"decc$_bsearch64\",   0},   \\\n-{\"bzero\",        \"decc$bzero\",        0},   \\\n-{\"calloc\",       \"decc$calloc\",       0},   \\\n-{\"ceil\",         \"decc$tceil\",        0},   \\\n-{\"chdir\",        \"decc$chdir\",        0},   \\\n-{\"chown\",        \"decc$chown\",        0},   \\\n-{\"clearerr\",     \"decc$clearerr\",     0},   \\\n-{\"clock\",        \"decc$clock\",        0},   \\\n-{\"close\",        \"decc$close\",        0},   \\\n-{\"cos\",          \"decc$tcos\",         0},   \\\n-{\"connect\",      \"decc$connect\",      0},   \\\n-{\"ctime\",        \"decc$ctime\",        0},   \\\n-{\"dup\",          \"decc$dup\",          0},   \\\n-{\"dup2\",         \"decc$dup2\",         0},   \\\n-{\"exit\",         \"decc$exit\",         0},   \\\n-{\"exp\",          \"decc$texp\",         0},   \\\n-{\"fabs\",         \"decc$tfabs\",        0},   \\\n-{\"fclose\",       \"decc$fclose\",       0},   \\\n-{\"fdopen\",       \"decc$fdopen\",       0},   \\\n-{\"fgetc\",        \"decc$fgetc\",        0},   \\\n-{\"fgets\",        \"decc$_fgets64\",     0},   \\\n-{\"fflush\",       \"decc$fflush\",       0},   \\\n-{\"ffs\",          \"decc$ffs\",          0},   \\\n-{\"floor\",        \"decc$tfloor\",       0},   \\\n-{\"fopen\",        \"decc$fopen\",        0},   \\\n-{\"fputc\",        \"decc$fputc\",        0},   \\\n-{\"fputs\",        \"decc$fputs\",        0},   \\\n-{\"free\",         \"decc$free\",         0},   \\\n-{\"fread\",        \"decc$fread\",        0},   \\\n-{\"freopen\",      \"decc$freopen\",      0},   \\\n-{\"fseek\",        \"decc$fseek\",        0},   \\\n-{\"ftell\",        \"decc$ftell\",        0},   \\\n-{\"fwrite\",       \"decc$fwrite\",       0},   \\\n-{\"getcwd\",       \"decc$_getcwd64\",    0},   \\\n-{\"getegid\",      \"decc$getegid\",      0},   \\\n-{\"getenv\",       \"decc$getenv\",       0},   \\\n-{\"geteuid\",      \"decc$geteuid\",      0},   \\\n-{\"getgid\",       \"decc$getgid\",       0},   \\\n-{\"gethostbyaddr\",\"decc$gethostbyaddr\",0},   \\\n-{\"gethostbyname\",\"decc$gethostbyname\",0},   \\\n-{\"getpagesize\",  \"decc$getpagesize\",  0},   \\\n-{\"getpid\",       \"decc$getpid\",       0},   \\\n-{\"getservbyname\",\"decc$getservbyname\",0},   \\\n-{\"getservbyport\",\"decc$getservbyport\",0},   \\\n-{\"gettimeofday\", \"decc$gettimeofday\", 0},   \\\n-{\"getuid\",       \"decc$getuid\",       0},   \\\n-{\"htons\",        \"decc$htons\",        0},   \\\n-{\"iconv\",        \"decc$iconv\",        0},   \\\n-{\"index\",        \"decc$_index64\",     0},   \\\n-{\"isatty\",       \"decc$isatty\",       0},   \\\n-{\"isdigit\",      \"decc$isdigit\",      0},   \\\n-{\"kill\",         \"decc$kill\",         0},   \\\n-{\"log\",          \"decc$tlog\",         0},   \\\n-{\"log10\",        \"decc$tlog10\",       0},   \\\n-{\"lseek\",        \"decc$lseek\",        0},   \\\n-{\"ioctl\",        \"decc$ioctl\",        0},   \\\n-{\"malloc\",       \"decc$malloc\",       0},   \\\n-{\"mbstowcs\",     \"decc$_mbstowcs64\",  0},   \\\n-{\"memchr\",       \"decc$_memchr64\",    0},   \\\n-{\"memcmp\",       \"decc$memcmp\",       0},   \\\n-{\"memcpy\",       \"decc$_memcpy64\",    0},   \\\n-{\"memmove\",      \"decc$_memmove64\",   0},   \\\n-{\"memset\",       \"decc$_memset64\",    0},   \\\n-{\"mkstemp\",      \"decc$mkstemp\",      0},   \\\n-{\"mktemp\",       \"decc$_mktemp64\",    0},   \\\n-{\"mmap\",         \"decc$_mmap64\",      0},   \\\n-{\"munmap\",       \"decc$munmap\",       0},   \\\n-{\"nl_langinfo\",  \"decc$nl_langinfo\",  0},   \\\n-{\"open\",         \"decc$open\",         0},   \\\n-{\"pclose\",       \"decc$pclose\",       0},   \\\n-{\"popen\",        \"decc$popen\",        0},   \\\n-{\"pow\",          \"decc$tpow\",         0},   \\\n-{\"printf\",       \"decc$txprintf\",     0},   \\\n-{\"putenv\",       \"decc$putenv\",       0},   \\\n-{\"puts\",         \"decc$puts\",         0},   \\\n-{\"random\",       \"decc$random\",       0},   \\\n-{\"read\",         \"decc$read\",         0},   \\\n-{\"realloc\",      \"decc$realloc\",      0},   \\\n-{\"recv\",         \"decc$recv\",         0},   \\\n-{\"recvfrom\",     \"decc$recvfrom\",     0},   \\\n-{\"recvmsg\",      \"decc$__bsd44___recvmsg64\", 0}, \\\n-{\"rename\",       \"decc$rename\",       0},   \\\n-{\"rewind\",       \"decc$rewind\",       0},   \\\n-{\"rindex\",       \"decc$_rindex64\",    0},   \\\n-{\"rmdir\",        \"decc$rmdir\",        0},   \\\n-{\"send\",         \"decc$send\",         0},   \\\n-{\"sendmsg\",      \"decc$__bsd44___sendmsg64\", 0}, \\\n-{\"sendto\",       \"decc$sendto\",       0},   \\\n-{\"setenv\",       \"decc$setenv\",       0},   \\\n-{\"setlocale\",    \"decc$setlocale\",    0},   \\\n-{\"setvbuf\",      \"decc$setvbuf\",      0},   \\\n-{\"signal\",       \"decc$signal\",       0},   \\\n-{\"sigsetmask\",   \"decc$sigsetmask\",   0},   \\\n-{\"sin\",          \"decc$tsin\",         0},   \\\n-{\"snprintf\",     \"decc$txsnprintf\",   0},   \\\n-{\"socket\",       \"decc$socket\",       0},   \\\n-{\"sqrt\",         \"decc$tsqrt\",        0},   \\\n-{\"strcasecmp\",   \"decc$strcasecmp\",   0},   \\\n-{\"strchr\",       \"decc$_strchr64\",    0},   \\\n-{\"strcpy\",       \"decc$_strcpy64\",    0},   \\\n-{\"strdup\",       \"decc$strdup\",       0},   \\\n-{\"strerror\",     \"decc$strerror\",     0},   \\\n-{\"strlen\",       \"decc$strlen\",       0},   \\\n-{\"strncasecmp\",  \"decc$strncasecmp\",  0},   \\\n-{\"strncmp\",      \"decc$strncmp\",      0},   \\\n-{\"strncpy\",      \"decc$_strncpy64\",   0},   \\\n-{\"strrchr\",      \"decc$_strrchr64\",   0},   \\\n-{\"strstr\",       \"decc$_strstr64\",    0},   \\\n-{\"strtod\",       \"decc$t_strtod64\",   0},   \\\n-{\"strtol\",       \"decc$_strtoll64\",   0},   \\\n-{\"strtoul\",      \"decc$_strtoull64\",  0},   \\\n-{\"sysconf\",      \"decc$sysconf\",      0},   \\\n-{\"system\",       \"decc$system\",       0},   \\\n-{\"tan\",          \"decc$ttan\",         0},   \\\n-{\"time\",         \"decc$time\",         0},   \\\n-{\"times\",        \"decc$times\",        0},   \\\n-{\"tmpfile\",      \"decc$tmpfile\",      0},   \\\n-{\"tmpnam\",       \"decc$_tmpnam64\",    0},   \\\n-{\"ungetc\",       \"decc$ungetc\",       0},   \\\n-{\"unlink\",       \"decc$unlink\",       0},   \\\n-{\"umask\",        \"decc$umask\",        0},   \\\n-{\"utime\",        \"decc$utime\",        0},   \\\n-{\"wait\",         \"decc$wait\",         0},   \\\n-{\"waitpid\",      \"decc$waitpid\",      0},   \\\n-{\"wcswidth\",     \"decc$wcswidth\",     0},   \\\n-{\"write\",        \"decc$write\",        0},   \\\n-{\"vfprintf\",     \"decc$txvfprintf\",   0},   \\\n-{\"vprintf\",      \"decc$txvprintf\",    0},   \\\n-{\"vsprintf\",     \"decc$txvsprintf\",   0},   \\\n-{\"vsnprintf\",    \"decc$txvsnprintf\",  0},   \\\n-{NULL, NULL, 0}                             \\\n-}\n-\n-/* Initialize of libfuncs that are 32/64 bit memory specific.  */\n-\n-#undef MEM_LIBFUNCS_INIT\n-#define MEM_LIBFUNCS_INIT                                 \\\n-do {                                                      \\\n-  memcpy_libfunc = init_one_libfunc (\"decc$_memcpy64\");   \\\n-  memmove_libfunc = init_one_libfunc (\"decc$_memmove64\"); \\\n-  memset_libfunc = init_one_libfunc (\"decc$_memset64\");   \\\n-} while (0)"}, {"sha": "8f09176dcc5aa2350d278418445b6da9f5284754", "filename": "gcc/config/vms/vms-crtl.h", "status": "removed", "additions": 0, "deletions": 191, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b213221d256fa5e5732756d4814e48c9ef09df93/gcc%2Fconfig%2Fvms%2Fvms-crtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b213221d256fa5e5732756d4814e48c9ef09df93/gcc%2Fconfig%2Fvms%2Fvms-crtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms-crtl.h?ref=b213221d256fa5e5732756d4814e48c9ef09df93", "patch": "@@ -1,191 +0,0 @@\n-/* Definitions of target machine GNU compiler. 32bit VMS version.\n-   Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n-   Contributed by Douglas B Rupp (rupp@gnat.com).\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-/* \n-   Correlation array of standard CRTL names with DECCRTL\n-   function names. Currently contains only a partial list,\n-   e.g. those functions use in GNAT and GCC\n-\n-   Note: Please keep in alphabetical order.\n-*/\n-\n-#define CRTL_NAMES                          \\\n-{                                           \\\n-{\"_calloc32\",    \"decc$calloc\",       0},   \\\n-{\"_malloc32\",    \"decc$malloc\",       0},   \\\n-{\"_realloc32\",   \"decc$realloc\",      0},   \\\n-{\"_strdup32\",    \"decc$strdup\",       0},   \\\n-{\"abs\",          \"decc$abs\",          0},   \\\n-{\"abort\",        \"decc$abort\",        0},   \\\n-{\"access\",       \"decc$access\",       0},   \\\n-{\"accept\",       \"decc$accept\",       0},   \\\n-{\"acos\",         \"decc$tacos\",        0},   \\\n-{\"alarm\",        \"decc$alarm\",        0},   \\\n-{\"asin\",         \"decc$tasin\",        0},   \\\n-{\"atan\",         \"decc$tatan\",        0},   \\\n-{\"atan2\",        \"decc$tatan2\",       0},   \\\n-{\"atexit\",       \"decc$atexit\",       0},   \\\n-{\"atoi\",         \"decc$atoi\",         0},   \\\n-{\"atoll\",        \"decc$atoll\",        0},   \\\n-{\"atoq\",         \"decc$atoq\",         0},   \\\n-{\"basename\",     \"decc$basename\",     0},   \\\n-{\"bcmp\",         \"decc$bcmp\",         0},   \\\n-{\"bcopy\",        \"decc$bcopy\",        0},   \\\n-{\"bsearch\",      \"decc$bsearch\",      0},   \\\n-{\"bzero\",        \"decc$bzero\",        0},   \\\n-{\"calloc\",       \"decc$calloc\",       0},   \\\n-{\"ceil\",         \"decc$tceil\",        0},   \\\n-{\"chdir\",        \"decc$chdir\",        0},   \\\n-{\"chown\",        \"decc$chown\",        0},   \\\n-{\"clearerr\",     \"decc$clearerr\",     0},   \\\n-{\"clock\",        \"decc$clock\",        0},   \\\n-{\"close\",        \"decc$close\",        0},   \\\n-{\"cos\",          \"decc$tcos\",         0},   \\\n-{\"connect\",      \"decc$connect\",      0},   \\\n-{\"ctime\",        \"decc$ctime\",        0},   \\\n-{\"dup\",          \"decc$dup\",          0},   \\\n-{\"dup2\",         \"decc$dup2\",         0},   \\\n-{\"exit\",         \"decc$exit\",         0},   \\\n-{\"exp\",          \"decc$texp\",         0},   \\\n-{\"fabs\",         \"decc$tfabs\",        0},   \\\n-{\"fclose\",       \"decc$fclose\",       0},   \\\n-{\"fdopen\",       \"decc$fdopen\",       0},   \\\n-{\"fgetc\",        \"decc$fgetc\",        0},   \\\n-{\"fgets\",        \"decc$fgets\",        0},   \\\n-{\"fflush\",       \"decc$fflush\",       0},   \\\n-{\"ffs\",          \"decc$ffs\",          0},   \\\n-{\"floor\",        \"decc$tfloor\",       0},   \\\n-{\"fopen\",        \"decc$fopen\",        0},   \\\n-{\"fputc\",        \"decc$fputc\",        0},   \\\n-{\"fputs\",        \"decc$fputs\",        0},   \\\n-{\"free\",         \"decc$free\",         0},   \\\n-{\"fread\",        \"decc$fread\",        0},   \\\n-{\"freopen\",      \"decc$freopen\",      0},   \\\n-{\"fseek\",        \"decc$fseek\",        0},   \\\n-{\"ftell\",        \"decc$ftell\",        0},   \\\n-{\"fwrite\",       \"decc$fwrite\",       0},   \\\n-{\"getcwd\",       \"decc$getcwd\",       0},   \\\n-{\"getegid\",      \"decc$getegid\",      0},   \\\n-{\"getenv\",       \"decc$getenv\",       0},   \\\n-{\"geteuid\",      \"decc$geteuid\",      0},   \\\n-{\"getgid\",       \"decc$getgid\",       0},   \\\n-{\"gethostbyaddr\",\"decc$gethostbyaddr\",0},   \\\n-{\"gethostbyname\",\"decc$gethostbyname\",0},   \\\n-{\"getpagesize\",  \"decc$getpagesize\",  0},   \\\n-{\"getpid\",       \"decc$getpid\",       0},   \\\n-{\"getservbyname\",\"decc$getservbyname\",0},   \\\n-{\"getservbyport\",\"decc$getservbyport\",0},   \\\n-{\"gettimeofday\", \"decc$gettimeofday\", 0},   \\\n-{\"getuid\",       \"decc$getuid\",       0},   \\\n-{\"htons\",        \"decc$htons\",        0},   \\\n-{\"iconv\",        \"decc$iconv\",        0},   \\\n-{\"index\",        \"decc$index\",        0},   \\\n-{\"isatty\",       \"decc$isatty\",       0},   \\\n-{\"isdigit\",      \"decc$isdigit\",      0},   \\\n-{\"kill\",         \"decc$kill\",         0},   \\\n-{\"log\",          \"decc$tlog\",         0},   \\\n-{\"log10\",        \"decc$tlog10\",       0},   \\\n-{\"lseek\",        \"decc$lseek\",        0},   \\\n-{\"ioctl\",        \"decc$ioctl\",        0},   \\\n-{\"malloc\",       \"decc$malloc\",       0},   \\\n-{\"mbstowcs\",     \"decc$mbstowcs\",     0},   \\\n-{\"memchr\",       \"decc$memchr\",       0},   \\\n-{\"memcmp\",       \"decc$memcmp\",       0},   \\\n-{\"memcpy\",       \"decc$memcpy\",       0},   \\\n-{\"memmove\",      \"decc$memmove\",      0},   \\\n-{\"memset\",       \"decc$memset\",       0},   \\\n-{\"mkstemp\",      \"decc$mkstemp\",      0},   \\\n-{\"mktemp\",       \"decc$mktemp\",       0},   \\\n-{\"mmap\",         \"decc$mmap\",         0},   \\\n-{\"munmap\",       \"decc$munmap\",       0},   \\\n-{\"nl_langinfo\",  \"decc$nl_langinfo\",  0},   \\\n-{\"open\",         \"decc$open\",         0},   \\\n-{\"pclose\",       \"decc$pclose\",       0},   \\\n-{\"popen\",        \"decc$popen\",        0},   \\\n-{\"pow\",          \"decc$tpow\",         0},   \\\n-{\"printf\",       \"decc$txprintf\",     0},   \\\n-{\"putenv\",       \"decc$putenv\",       0},   \\\n-{\"puts\",         \"decc$puts\",         0},   \\\n-{\"random\",       \"decc$random\",       0},   \\\n-{\"read\",         \"decc$read\",         0},   \\\n-{\"realloc\",      \"decc$realloc\",      0},   \\\n-{\"recv\",         \"decc$recv\",         0},   \\\n-{\"recvfrom\",     \"decc$recvfrom\",     0},   \\\n-{\"recvmsg\",      \"decc$__bsd44___recvmsg32\", 0}, \\\n-{\"rename\",       \"decc$rename\",       0},   \\\n-{\"rewind\",       \"decc$rewind\",       0},   \\\n-{\"rindex\",       \"decc$rindex\",       0},   \\\n-{\"rmdir\",        \"decc$rmdir\",        0},   \\\n-{\"send\",         \"decc$send\",         0},   \\\n-{\"sendmsg\",      \"decc$__bsd44___sendmsg32\", 0}, \\\n-{\"sendto\",       \"decc$sendto\",       0},   \\\n-{\"setenv\",       \"decc$setenv\",       0},   \\\n-{\"setlocale\",    \"decc$setlocale\",    0},   \\\n-{\"setvbuf\",      \"decc$setvbuf\",      0},   \\\n-{\"signal\",       \"decc$signal\",       0},   \\\n-{\"sigsetmask\",   \"decc$sigsetmask\",   0},   \\\n-{\"sin\",          \"decc$tsin\",         0},   \\\n-{\"snprintf\",     \"decc$txsnprintf\",   0},   \\\n-{\"socket\",       \"decc$socket\",       0},   \\\n-{\"sqrt\",         \"decc$tsqrt\",        0},   \\\n-{\"strcasecmp\",   \"decc$strcasecmp\",   0},   \\\n-{\"strchr\",       \"decc$strchr\",       0},   \\\n-{\"strcpy\",       \"decc$strcpy\",       0},   \\\n-{\"strdup\",       \"decc$strdup\",       0},   \\\n-{\"strerror\",     \"decc$strerror\",     0},   \\\n-{\"strlen\",       \"decc$strlen\",       0},   \\\n-{\"strncasecmp\",  \"decc$strncasecmp\",  0},   \\\n-{\"strncmp\",      \"decc$strncmp\",      0},   \\\n-{\"strncpy\",      \"decc$strncpy\",      0},   \\\n-{\"strrchr\",      \"decc$strrchr\",      0},   \\\n-{\"strstr\",       \"decc$strstr\",       0},   \\\n-{\"strtod\",       \"decc$tstrtod\",      0},   \\\n-{\"strtol\",       \"decc$strtoll\",      0},   \\\n-{\"strtoul\",      \"decc$strtoull\",     0},   \\\n-{\"sysconf\",      \"decc$sysconf\",      0},   \\\n-{\"system\",       \"decc$system\",       0},   \\\n-{\"tan\",          \"decc$ttan\",         0},   \\\n-{\"time\",         \"decc$time\",         0},   \\\n-{\"times\",        \"decc$times\",        0},   \\\n-{\"tmpfile\",      \"decc$tmpfile\",      0},   \\\n-{\"tmpnam\",       \"decc$tmpnam\",       0},   \\\n-{\"ungetc\",       \"decc$ungetc\",       0},   \\\n-{\"unlink\",       \"decc$unlink\",       0},   \\\n-{\"umask\",        \"decc$umask\",        0},   \\\n-{\"utime\",        \"decc$utime\",        0},   \\\n-{\"wait\",         \"decc$wait\",         0},   \\\n-{\"waitpid\",      \"decc$waitpid\",      0},   \\\n-{\"wcswidth\",     \"decc$wcswidth\",     0},   \\\n-{\"write\",        \"decc$write\",        0},   \\\n-{\"vfprintf\",     \"decc$txvfprintf\",   0},   \\\n-{\"vprintf\",      \"decc$txvprintf\",    0},   \\\n-{\"vsprintf\",     \"decc$txvsprintf\",   0},   \\\n-{\"vsnprintf\",    \"decc$txvsnprintf\",  0},   \\\n-{NULL, NULL, 0}                             \\\n-}\n-\n-/* Initialize of libfuncs that are 32/64 bit memory specific.  */\n-\n-#define MEM_LIBFUNCS_INIT                              \\\n-do {                                                   \\\n-  memcpy_libfunc = init_one_libfunc (\"decc$memcpy\");   \\\n-  memmove_libfunc = init_one_libfunc (\"decc$memmove\"); \\\n-  memset_libfunc = init_one_libfunc (\"decc$memset\");   \\\n-} while (0)"}, {"sha": "4f2755e2c82dbeb3cb9537728853a84c3bba4f58", "filename": "gcc/config/vms/vms-crtlmap.map", "status": "added", "additions": 200, "deletions": 0, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db8b22ef4925f80ce5cabb585852896548f78c7e/gcc%2Fconfig%2Fvms%2Fvms-crtlmap.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db8b22ef4925f80ce5cabb585852896548f78c7e/gcc%2Fconfig%2Fvms%2Fvms-crtlmap.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms-crtlmap.map?ref=db8b22ef4925f80ce5cabb585852896548f78c7e", "patch": "@@ -0,0 +1,200 @@\n+# Standard C names to DEC-C names map table.\n+# All names in the DEC-C shared image (shared library) are prefixed\n+# with decc$ (this is the standard vms convention for names in public\n+# shared libraries).  This conversion is done by the compiler for all\n+# languages.\n+#\n+# Currently contains only a partial list, e.g. those functions use\n+# in GNAT and GCC.\n+#\n+# File format:\n+# - Empty lines are ignored.\n+# - Comment lines start with '#' in the first column.\n+# - map lines consist in an identifier optionnaly followed by at most 2\n+#   space-separated flags.\n+# Flags are:\n+#  FLOAT: will be prefixed by 'x'\n+#  64: There is a 64-bit variant\n+#  BSD44: name will be prefixed by __bsd44__\n+#  PRNTF: a 't' prefix will be added.\n+#  MALLOC: malloc related function.\n+#\n+# Keep entries alpha-sorted - this is enforced by the awk script.\n+#\n+__32_signal\n+__32_ssignal\n+__64_signal\n+__64_ssignal\n+__utc_localtime\n+__utc_localtime_t\n+__utc_stat\n+__utc_time\n+__utctz_gmtime\n+__utctz_localtime\n+__utctz_localtime_t\n+abort\n+abs\n+accept\n+access\n+acos          FLOAT\n+alarm\n+asin          FLOAT\n+atan          FLOAT\n+atan2         FLOAT\n+atexit\n+atoi\n+atoll\n+atoq\n+basename      64\n+bcmp\n+bcopy\n+bsearch       64\n+bzero\n+calloc        64 MALLOC\n+ceil          FLOAT\n+chdir\n+chown\n+clearerr\n+clock\n+close\n+connect\n+cos           FLOAT\n+ctermid       64\n+ctime\n+dup\n+dup2\n+exit\n+exp           FLOAT\n+fabs          FLOAT\n+fclose\n+fdopen\n+fflush\n+ffs\n+fgetc\n+fgets         64\n+floor         FLOAT\n+fopen\n+fprintf       FLOAT PRNTF\n+fputc\n+fputs\n+fread\n+free\n+freopen\n+fseek\n+ftell\n+fwrite\n+getc\n+getcwd        64\n+getegid\n+getenv\n+geteuid\n+getgid\n+gethostbyaddr\n+gethostbyname\n+getpagesize\n+getpid\n+getservbyname\n+getservbyport\n+gettimeofday\n+getuid\n+gmtime\n+htons\n+iconv\n+index         64\n+ioctl\n+isatty\n+isdigit\n+islower\n+isprint\n+isspace\n+isupper\n+kill\n+localtime\n+log           FLOAT\n+log1          FLOAT\n+lseek\n+malloc        64 MALLOC\n+mbstowcs      64\n+memchr        64\n+memcmp\n+memcpy        64\n+memmove       64\n+memset        64\n+mkdir\n+mkstemp\n+mktemp        64\n+mmap          64\n+munmap\n+nl_langinfo\n+open\n+pclose\n+perror\n+popen\n+pow           FLOAT\n+printf        FLOAT PRNTF\n+putc\n+putchar\n+putenv\n+puts\n+qsort         64\n+random\n+read\n+realloc       64 MALLOC\n+recv\n+recvfrom\n+recvmsg       BSD44 64\n+rename\n+rewind\n+rindex        64\n+rmdir\n+send\n+sendmsg       BSD44 64\n+sendto\n+setenv\n+setlocale\n+setvbuf\n+signal\n+sigsetmask\n+sin           FLOAT\n+snprintf      FLOAT PRNTF\n+socket\n+sprintf\t      FLOAT PRNTF\n+sqrt          FLOAT\n+stat\n+strcasecmp\n+strcat        64\n+strchr        64\n+strcmp\n+strcpy        64\n+strdup        64 MALLOC\n+strerror\n+strlen\n+strncasecmp\n+strncmp\n+strncpy       64\n+strrchr       64\n+strstr        64\n+strtod        64 FLOAT\n+strtol        64\n+strtoul       64\n+sysconf\n+system\n+tan           FLOAT\n+time\n+times\n+tmpfile\n+tmpnam        64\n+tolower\n+toupper\n+umask\n+ungetc\n+unlink\n+utime\n+vfprintf      FLOAT PRNTF\n+vprintf       FLOAT PRNTF\n+vsnprintf     FLOAT PRNTF\n+vsprintf      FLOAT PRNTF\n+wait\n+waitpid\n+wcswidth\n+write"}, {"sha": "04dcd60699937ef7220006f31bce0f3a8d9a9737", "filename": "gcc/config/vms/vms-protos.h", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db8b22ef4925f80ce5cabb585852896548f78c7e/gcc%2Fconfig%2Fvms%2Fvms-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db8b22ef4925f80ce5cabb585852896548f78c7e/gcc%2Fconfig%2Fvms%2Fvms-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms-protos.h?ref=db8b22ef4925f80ce5cabb585852896548f78c7e", "patch": "@@ -0,0 +1,21 @@\n+/* Definitions of target machine for GCC for VMS.\n+   Copyright (C) 2011 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* vms.c  */\n+void vms_patch_builtins (void);"}, {"sha": "62a16619856456f476d5449ddff25e3d0bbc9529", "filename": "gcc/config/vms/vms.c", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db8b22ef4925f80ce5cabb585852896548f78c7e/gcc%2Fconfig%2Fvms%2Fvms.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db8b22ef4925f80ce5cabb585852896548f78c7e/gcc%2Fconfig%2Fvms%2Fvms.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms.c?ref=db8b22ef4925f80ce5cabb585852896548f78c7e", "patch": "@@ -0,0 +1,171 @@\n+/* Definitions of target machine GNU compiler. 32bit VMS version.\n+   Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n+   Contributed by Douglas B Rupp (rupp@gnat.com).\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tree.h\"\n+#include \"vms-protos.h\"\n+#include \"tm.h\"\n+#include \"ggc.h\"\n+\n+/* Correlation of standard CRTL names with DECCRTL function names.  */\n+\n+/* Name is for a function that allocate memory.  Use the 64bit version\n+   if -mmalloc64.  */\n+#define VMS_CRTL_MALLOC\t(1 << 0)\n+\n+/* If long pointer are enabled, use _NAME64 instead.  */\n+#define VMS_CRTL_64\t(1 << 1)\n+\n+/* Use tNAME instead.  To be applied after the previous rule.  */\n+#define VMS_CRTL_FLOAT  (1 << 2)\n+\n+/* Prepend __bsd44__ before the name.  To be applied after the P64\n+   rule.  */\n+#define VMS_CRTL_BSD44\t(1 << 3)\n+\n+/* Prepend x before the name for printf like functions.  */\n+#define VMS_CRTL_PRNTF\t(1 << 4)\n+\n+struct vms_crtl_name\n+{\n+  /* The standard C name.  */\n+  const char *const name;\n+\n+  /* Flags to drive the translation.  */\n+  unsigned int flags;\n+};\n+\n+/* Map for the translation.  */\n+\n+static const struct vms_crtl_name vms_crtl_names[] =\n+  {\n+#include \"vms-crtlmap.h\"\n+  };\n+\n+/* Number of entires in the above array.  */\n+\n+#define NBR_CRTL_NAMES (sizeof (vms_crtl_names) / sizeof (*vms_crtl_names))\n+\n+/* List of aliased identifiers.  They must be persistant accross gc.  */\n+\n+static GTY(()) VEC(tree,gc) *aliases_id;\n+\n+/* Add a CRTL translation.  This simply use the transparent alias\n+   mechanism, which is platform independant and works with the\n+   #pragma extern_prefix (which set the assembler name).  */\n+\n+static void\n+vms_add_crtl_xlat (const char *name, size_t nlen,\n+                   const char *id_str, size_t id_len)\n+{\n+  tree targ;\n+\n+  targ = get_identifier_with_length (name, nlen);\n+  gcc_assert (!IDENTIFIER_TRANSPARENT_ALIAS (targ));\n+  IDENTIFIER_TRANSPARENT_ALIAS (targ) = 1;\n+  TREE_CHAIN (targ) = get_identifier_with_length (id_str, id_len);\n+\n+  VEC_safe_push (tree, gc, aliases_id, targ);\n+\n+  /* printf (\"vms: %s (%p) -> %.*s\\n\", name, targ, id_len, id_str); */\n+}\n+\n+/* Do VMS specific stuff on builtins: disable the ones that are not\n+   standard, mangle names.  */\n+\n+void\n+vms_patch_builtins (void)\n+{\n+  /* enum built_in_function bi; */\n+  unsigned int i;\n+\n+  /* Fwrite on VMS is non-standard.  */\n+  implicit_built_in_decls[(int) BUILT_IN_FWRITE] = NULL_TREE;\n+  implicit_built_in_decls[(int) BUILT_IN_FWRITE_UNLOCKED] = NULL_TREE;\n+\n+  /* Define aliases for names.  */\n+  for (i = 0; i < NBR_CRTL_NAMES; i++)\n+    {\n+      const struct vms_crtl_name *n = &vms_crtl_names[i];\n+      char res[VMS_CRTL_MAXLEN + 3 + 9 + 1 + 1];\n+      int rlen;\n+      int nlen;\n+\n+      /* Add the dec-c prefix.  */\n+      memcpy (res, \"decc$\", 5);\n+      rlen = 5;\n+\n+      if (n->flags & VMS_CRTL_BSD44)\n+        {\n+          memcpy (res + rlen, \"__bsd44__\", 9);\n+          rlen += 9;\n+        }\n+\n+      if (n->flags & VMS_CRTL_FLOAT)\n+        res[rlen++] = 't';\n+\n+      if (n->flags & VMS_CRTL_PRNTF)\n+        res[rlen++] = 'x';\n+\n+      nlen = strlen (n->name);\n+      memcpy (res + rlen, n->name, nlen);\n+\n+      if ((n->flags & VMS_CRTL_64) == 0)\n+        vms_add_crtl_xlat (n->name, nlen, res, rlen + nlen);\n+      else\n+        {\n+          char alt[VMS_CRTL_MAXLEN + 3];\n+          bool use_64;\n+\n+          /* Add three translations:\n+             _X32 -> X\n+             _X64 -> _X64\n+             X -> X if short, _X64 if long.  */\n+          alt[0] = '_';\n+          memcpy (alt + 1, n->name, nlen);\n+          alt[1 + nlen + 0] = '3';\n+          alt[1 + nlen + 1] = '2';\n+          alt[1 + nlen + 2] = 0;\n+          vms_add_crtl_xlat (alt, nlen + 3, res, rlen + nlen);\n+\n+          use_64 = (((n->flags & VMS_CRTL_64) && POINTER_SIZE == 64)\n+                    || ((n->flags & VMS_CRTL_MALLOC)\n+                        && TARGET_MALLOC64));\n+          if (!use_64)\n+            vms_add_crtl_xlat (n->name, nlen, res, rlen + nlen);\n+\n+          res[rlen++] = '_';\n+          memcpy (res + rlen, n->name, nlen);\n+          res[rlen + nlen + 0] = '6';\n+          res[rlen + nlen + 1] = '4';\n+\n+          if (use_64)\n+            vms_add_crtl_xlat (n->name, nlen, res, rlen + nlen + 2);\n+\n+          alt[1 + nlen + 0] = '6';\n+          alt[1 + nlen + 1] = '4';\n+          vms_add_crtl_xlat (alt, nlen + 3, res, rlen + nlen + 2);\n+        }\n+    }\n+}\n+\n+#include \"gt-vms.h\""}]}