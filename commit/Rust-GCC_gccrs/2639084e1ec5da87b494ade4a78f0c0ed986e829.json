{"sha": "2639084e1ec5da87b494ade4a78f0c0ed986e829", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYzOTA4NGUxZWM1ZGE4N2I0OTRhZGU0YTc4ZjBjMGVkOTg2ZTgyOQ==", "commit": {"author": {"name": "Catherine Moore", "email": "clm@codesourcery.com", "date": "2010-06-26T19:27:04Z"}, "committer": {"name": "Catherine Moore", "email": "clm@gcc.gnu.org", "date": "2010-06-26T19:27:04Z"}, "message": "mips.md (alu_type): New attribute.\n\n2010-06-26  Catherine Moore  <clm@codesourcery.com>\n\n        * config/mips/mips.md (alu_type): New attribute.\n        (type): Infer type from alu_type.\n        (*add<mode>3, *add<mode>3_mips16, *addsi3_extended,\n        *baddu_si_eb, *baddu_si_el, *baddu_di, sub<mode>3,\n        *subsi3_extended, negsi2, negdi2, *low<mode>,\n        *low<mode>_mips16, *ior<mode>3, *ior<mode>3_mips16,\n        xor<mode>3, *nor<mode>3,\n        *zero_extend<GPR:mode>_trunc<SHORT:mode>,\n        *zero_extendhi_truncqi):  Set alu_type instead of type.\n\nFrom-SVN: r161440", "tree": {"sha": "1b80ee4a5de6aa7641d6bec195ade0cf97c1e6b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b80ee4a5de6aa7641d6bec195ade0cf97c1e6b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2639084e1ec5da87b494ade4a78f0c0ed986e829", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2639084e1ec5da87b494ade4a78f0c0ed986e829", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2639084e1ec5da87b494ade4a78f0c0ed986e829", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2639084e1ec5da87b494ade4a78f0c0ed986e829/comments", "author": {"login": "CatherineMoore", "id": 15636327, "node_id": "MDQ6VXNlcjE1NjM2MzI3", "avatar_url": "https://avatars.githubusercontent.com/u/15636327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CatherineMoore", "html_url": "https://github.com/CatherineMoore", "followers_url": "https://api.github.com/users/CatherineMoore/followers", "following_url": "https://api.github.com/users/CatherineMoore/following{/other_user}", "gists_url": "https://api.github.com/users/CatherineMoore/gists{/gist_id}", "starred_url": "https://api.github.com/users/CatherineMoore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CatherineMoore/subscriptions", "organizations_url": "https://api.github.com/users/CatherineMoore/orgs", "repos_url": "https://api.github.com/users/CatherineMoore/repos", "events_url": "https://api.github.com/users/CatherineMoore/events{/privacy}", "received_events_url": "https://api.github.com/users/CatherineMoore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a02864adc25b3d8d57964427bfb08fc32306d73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a02864adc25b3d8d57964427bfb08fc32306d73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a02864adc25b3d8d57964427bfb08fc32306d73"}], "stats": {"total": 61, "additions": 40, "deletions": 21}, "files": [{"sha": "f439afe19fdd7dfcf3f665191820e6c51ba784e2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2639084e1ec5da87b494ade4a78f0c0ed986e829/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2639084e1ec5da87b494ade4a78f0c0ed986e829/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2639084e1ec5da87b494ade4a78f0c0ed986e829", "patch": "@@ -1,3 +1,15 @@\n+2010-06-26  Catherine Moore  <clm@codesourcery.com>\n+\n+\t* config/mips/mips.md (alu_type): New attribute.\n+\t(type): Infer type from alu_type.\n+\t(*add<mode>3, *add<mode>3_mips16, *addsi3_extended,\n+\t*baddu_si_eb, *baddu_si_el, *baddu_di, sub<mode>3,\n+\t*subsi3_extended, negsi2, negdi2, *low<mode>,\n+\t*low<mode>_mips16, *ior<mode>3, *ior<mode>3_mips16,\n+\txor<mode>3, *nor<mode>3,\n+\t*zero_extend<GPR:mode>_trunc<SHORT:mode>,\n+\t*zero_extendhi_truncqi):  Set alu_type instead of type.\n+\n 2010-06-26  Douglas B Rupp  <rupp@gnat.com>\n \n \t* config/alpha/alpha.c (alpha_need_linkage): Adjust"}, {"sha": "9b09344d9c97631f25a958e29bac8f5668b4c060", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 28, "deletions": 21, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2639084e1ec5da87b494ade4a78f0c0ed986e829/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2639084e1ec5da87b494ade4a78f0c0ed986e829/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=2639084e1ec5da87b494ade4a78f0c0ed986e829", "patch": "@@ -199,6 +199,9 @@\n    shift_shift,lui_movf\"\n   (const_string \"unknown\"))\n \n+(define_attr \"alu_type\" \"unknown,add,sub,not,nor,and,or,xor\"\n+  (const_string \"unknown\"))\n+\n ;; Main data type used by the insn\n (define_attr \"mode\" \"unknown,none,QI,HI,SI,DI,TI,SF,DF,TF,FPSW\"\n   (const_string \"unknown\"))\n@@ -275,6 +278,10 @@\n   (cond [(eq_attr \"jal\" \"!unset\") (const_string \"call\")\n \t (eq_attr \"got\" \"load\") (const_string \"load\")\n \n+\t (eq_attr \"alu_type\" \"add,sub\") (const_string \"arith\")\n+\n+\t (eq_attr \"alu_type\" \"not,nor,and,or,xor\") (const_string \"logical\")\n+\n \t ;; If a doubleword move uses these expensive instructions,\n \t ;; it is usually better to schedule them in the same way\n \t ;; as the singleword form, rather than as \"multi\".\n@@ -978,7 +985,7 @@\n   \"@\n     <d>addu\\t%0,%1,%2\n     <d>addiu\\t%0,%1,%2\"\n-  [(set_attr \"type\" \"arith\")\n+  [(set_attr \"alu_type\" \"add\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*add<mode>3_mips16\"\n@@ -992,7 +999,7 @@\n     <d>addiu\\t%0,%2\n     <d>addiu\\t%0,%1,%2\n     <d>addu\\t%0,%1,%2\"\n-  [(set_attr \"type\" \"arith\")\n+  [(set_attr \"alu_type\" \"add\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr_alternative \"length\"\n \t\t[(if_then_else (match_operand 2 \"m16_simm8_8\")\n@@ -1130,7 +1137,7 @@\n   \"@\n     addu\\t%0,%1,%2\n     addiu\\t%0,%1,%2\"\n-  [(set_attr \"type\" \"arith\")\n+  [(set_attr \"alu_type\" \"add\")\n    (set_attr \"mode\" \"SI\")])\n \n ;; Split this insn so that the addiu splitters can have a crack at it.\n@@ -1145,7 +1152,7 @@\n   \"&& reload_completed\"\n   [(set (match_dup 3) (plus:SI (match_dup 1) (match_dup 2)))]\n   { operands[3] = gen_lowpart (SImode, operands[0]); }\n-  [(set_attr \"type\" \"arith\")\n+  [(set_attr \"alu_type\" \"add\")\n    (set_attr \"mode\" \"SI\")\n    (set_attr \"extended_mips16\" \"yes\")])\n \n@@ -1159,7 +1166,7 @@\n \t\t   (match_operand:SI 2 \"register_operand\" \"d\")) 3)))]\n   \"ISA_HAS_BADDU && BYTES_BIG_ENDIAN\"\n   \"baddu\\\\t%0,%1,%2\"\n-  [(set_attr \"type\" \"arith\")])\n+  [(set_attr \"alu_type\" \"add\")])\n \n (define_insn \"*baddu_si_el\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n@@ -1169,7 +1176,7 @@\n \t\t   (match_operand:SI 2 \"register_operand\" \"d\")) 0)))]\n   \"ISA_HAS_BADDU && !BYTES_BIG_ENDIAN\"\n   \"baddu\\\\t%0,%1,%2\"\n-  [(set_attr \"type\" \"arith\")])\n+  [(set_attr \"alu_type\" \"add\")])\n \n (define_insn \"*baddu_di<mode>\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n@@ -1179,7 +1186,7 @@\n \t\t   (match_operand:DI 2 \"register_operand\" \"d\")))))]\n   \"ISA_HAS_BADDU && TARGET_64BIT\"\n   \"baddu\\\\t%0,%1,%2\"\n-  [(set_attr \"type\" \"arith\")])\n+  [(set_attr \"alu_type\" \"add\")])\n \f\n ;;\n ;;  ....................\n@@ -1204,7 +1211,7 @@\n \t\t   (match_operand:GPR 2 \"register_operand\" \"d\")))]\n   \"\"\n   \"<d>subu\\t%0,%1,%2\"\n-  [(set_attr \"type\" \"arith\")\n+  [(set_attr \"alu_type\" \"sub\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*subsi3_extended\"\n@@ -1214,7 +1221,7 @@\n \t\t      (match_operand:SI 2 \"register_operand\" \"d\"))))]\n   \"TARGET_64BIT\"\n   \"subu\\t%0,%1,%2\"\n-  [(set_attr \"type\" \"arith\")\n+  [(set_attr \"alu_type\" \"sub\")\n    (set_attr \"mode\" \"DI\")])\n \f\n ;;\n@@ -2483,15 +2490,15 @@\n   else\n     return \"subu\\t%0,%.,%1\";\n }\n-  [(set_attr \"type\"\t\"arith\")\n+  [(set_attr \"alu_type\"\t\"sub\")\n    (set_attr \"mode\"\t\"SI\")])\n \n (define_insn \"negdi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n \t(neg:DI (match_operand:DI 1 \"register_operand\" \"d\")))]\n   \"TARGET_64BIT && !TARGET_MIPS16\"\n   \"dsubu\\t%0,%.,%1\"\n-  [(set_attr \"type\"\t\"arith\")\n+  [(set_attr \"alu_type\"\t\"sub\")\n    (set_attr \"mode\"\t\"DI\")])\n \n ;; neg.fmt is an arithmetic instruction and treats all NaN inputs as\n@@ -2516,7 +2523,7 @@\n   else\n     return \"nor\\t%0,%.,%1\";\n }\n-  [(set_attr \"type\" \"logical\")\n+  [(set_attr \"alu_type\" \"not\")\n    (set_attr \"mode\" \"<MODE>\")])\n \f\n ;;\n@@ -2638,7 +2645,7 @@\n   \"@\n    or\\t%0,%1,%2\n    ori\\t%0,%1,%x2\"\n-  [(set_attr \"type\" \"logical\")\n+  [(set_attr \"alu_type\" \"or\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*ior<mode>3_mips16\"\n@@ -2647,7 +2654,7 @@\n \t\t (match_operand:GPR 2 \"register_operand\" \"d\")))]\n   \"TARGET_MIPS16\"\n   \"or\\t%0,%2\"\n-  [(set_attr \"type\" \"logical\")\n+  [(set_attr \"alu_type\" \"or\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_expand \"xor<mode>3\"\n@@ -2665,7 +2672,7 @@\n   \"@\n    xor\\t%0,%1,%2\n    xori\\t%0,%1,%x2\"\n-  [(set_attr \"type\" \"logical\")\n+  [(set_attr \"alu_type\" \"xor\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"\"\n@@ -2677,7 +2684,7 @@\n    xor\\t%0,%2\n    cmpi\\t%1,%2\n    cmp\\t%1,%2\"\n-  [(set_attr \"type\" \"logical,arith,arith\")\n+  [(set_attr \"alu_type\" \"xor\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr_alternative \"length\"\n \t\t[(const_int 4)\n@@ -2692,7 +2699,7 @@\n \t\t (not:GPR (match_operand:GPR 2 \"register_operand\" \"d\"))))]\n   \"!TARGET_MIPS16\"\n   \"nor\\t%0,%1,%2\"\n-  [(set_attr \"type\" \"logical\")\n+  [(set_attr \"alu_type\" \"nor\")\n    (set_attr \"mode\" \"<MODE>\")])\n \f\n ;;\n@@ -2910,7 +2917,7 @@\n   operands[2] = GEN_INT (GET_MODE_MASK (<SHORT:MODE>mode));\n   return \"andi\\t%0,%1,%x2\";\n }\n-  [(set_attr \"type\" \"logical\")\n+  [(set_attr \"alu_type\" \"and\")\n    (set_attr \"mode\" \"<GPR:MODE>\")])\n \n (define_insn \"*zero_extendhi_truncqi\"\n@@ -2919,7 +2926,7 @@\n \t    (truncate:QI (match_operand:DI 1 \"register_operand\" \"d\"))))]\n   \"TARGET_64BIT && !TARGET_MIPS16\"\n   \"andi\\t%0,%1,0xff\"\n-  [(set_attr \"type\" \"logical\")\n+  [(set_attr \"alu_type\" \"and\")\n    (set_attr \"mode\" \"HI\")])\n \f\n ;;\n@@ -3851,7 +3858,7 @@\n \t\t  (match_operand:P 2 \"immediate_operand\" \"\")))]\n   \"!TARGET_MIPS16\"\n   \"<d>addiu\\t%0,%1,%R2\"\n-  [(set_attr \"type\" \"arith\")\n+  [(set_attr \"alu_type\" \"add\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*low<mode>_mips16\"\n@@ -3860,7 +3867,7 @@\n \t\t  (match_operand:P 2 \"immediate_operand\" \"\")))]\n   \"TARGET_MIPS16\"\n   \"<d>addiu\\t%0,%R2\"\n-  [(set_attr \"type\" \"arith\")\n+  [(set_attr \"alu_type\" \"add\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"extended_mips16\" \"yes\")])\n "}]}