{"sha": "53d01fd9e9568250e4304b5e0a5227e90f07cc40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNkMDFmZDllOTU2ODI1MGU0MzA0YjVlMGE1MjI3ZTkwZjA3Y2M0MA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-06-09T13:20:37Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-06-09T13:20:37Z"}, "message": "Support move-only deleters in std::shared_ptr (LWG 2802)\n\n\t* doc/xml/manual/intro.xml: Document LWG 2802, 2873 and 2942 changes.\n\t* include/bits/shared_ptr.h (shared_ptr): Use rvalues for deleters\n\t(LWG 2802).\n\t* include/bits/shared_ptr_base.h (_Sp_ebo_helper, _Sp_counted_deleter\n\t(_Sp_counted_deleter::_Impl, __shared_count, __shared_ptr): Likewise.\n\t* testsuite/20_util/shared_ptr/cons/lwg2802.cc: New.\n\nFrom-SVN: r249061", "tree": {"sha": "d590c6cb8eef7975fa4bc33e941166d33bfe828a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d590c6cb8eef7975fa4bc33e941166d33bfe828a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53d01fd9e9568250e4304b5e0a5227e90f07cc40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53d01fd9e9568250e4304b5e0a5227e90f07cc40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53d01fd9e9568250e4304b5e0a5227e90f07cc40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53d01fd9e9568250e4304b5e0a5227e90f07cc40/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37f30285a934bf6eaf08e102658e3070030556ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37f30285a934bf6eaf08e102658e3070030556ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37f30285a934bf6eaf08e102658e3070030556ab"}], "stats": {"total": 109, "additions": 96, "deletions": 13}, "files": [{"sha": "0408210c0c585b6bed4eaa9c236c6483fe352592", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d01fd9e9568250e4304b5e0a5227e90f07cc40/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d01fd9e9568250e4304b5e0a5227e90f07cc40/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=53d01fd9e9568250e4304b5e0a5227e90f07cc40", "patch": "@@ -1,5 +1,12 @@\n 2017-06-09  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* doc/xml/manual/intro.xml: Document LWG 2802, 2873 and 2942 changes.\n+\t* include/bits/shared_ptr.h (shared_ptr): Use rvalues for deleters\n+\t(LWG 2802).\n+\t* include/bits/shared_ptr_base.h (_Sp_ebo_helper, _Sp_counted_deleter\n+\t(_Sp_counted_deleter::_Impl, __shared_count, __shared_ptr): Likewise.\n+\t* testsuite/20_util/shared_ptr/cons/lwg2802.cc: New.\n+\n \t* include/bits/forward_list.h (forward_list): Add deduction guide.\n \t* include/bits/stl_deque.h (deque): Likewise.\n \t* include/bits/stl_list.h (list): Likewise."}, {"sha": "4ec74949bfb9afdc3872268314c7c8f2bf718f04", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d01fd9e9568250e4304b5e0a5227e90f07cc40/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d01fd9e9568250e4304b5e0a5227e90f07cc40/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=53d01fd9e9568250e4304b5e0a5227e90f07cc40", "patch": "@@ -1119,6 +1119,29 @@ requirements of the license of GCC.\n       arguments and store them directly as the target object.\n     </para></listitem></varlistentry>\n \n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2802\">2802</link>:\n+       <emphasis>Add noexcept to several <code>shared_ptr</code> related\n+         functions\n+       </emphasis>\n+    </term>\n+    <listitem><para>Add noexcept.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2873\">2873</link>:\n+       <emphasis><code>shared_ptr</code> constructor requirements for a deleter\n+       </emphasis>\n+    </term>\n+    <listitem><para>Use rvalues for deleters.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2942\">2942</link>:\n+       <emphasis>LWG 2873's resolution missed\n+         <code>weak_ptr::owner_before</code>\n+       </emphasis>\n+    </term>\n+    <listitem><para>Add noexcept.\n+    </para></listitem></varlistentry>\n+\n   </variablelist>\n \n  </section>"}, {"sha": "264e35ce2d058bb407daad3d9da5065e191e80fc", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d01fd9e9568250e4304b5e0a5227e90f07cc40/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d01fd9e9568250e4304b5e0a5227e90f07cc40/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=53d01fd9e9568250e4304b5e0a5227e90f07cc40", "patch": "@@ -144,7 +144,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Yp, typename _Deleter,\n \t       typename = _Constructible<_Yp*, _Deleter>>\n \tshared_ptr(_Yp* __p, _Deleter __d)\n-        : __shared_ptr<_Tp>(__p, __d) { }\n+        : __shared_ptr<_Tp>(__p, std::move(__d)) { }\n \n       /**\n        *  @brief  Construct a %shared_ptr that owns a null pointer\n@@ -161,7 +161,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        */\n       template<typename _Deleter>\n \tshared_ptr(nullptr_t __p, _Deleter __d)\n-        : __shared_ptr<_Tp>(__p, __d) { }\n+        : __shared_ptr<_Tp>(__p, std::move(__d)) { }\n \n       /**\n        *  @brief  Construct a %shared_ptr that owns the pointer @a __p\n@@ -181,7 +181,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Yp, typename _Deleter, typename _Alloc,\n \t       typename = _Constructible<_Yp*, _Deleter, _Alloc>>\n \tshared_ptr(_Yp* __p, _Deleter __d, _Alloc __a)\n-\t: __shared_ptr<_Tp>(__p, __d, std::move(__a)) { }\n+\t: __shared_ptr<_Tp>(__p, std::move(__d), std::move(__a)) { }\n \n       /**\n        *  @brief  Construct a %shared_ptr that owns a null pointer\n@@ -200,7 +200,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        */\n       template<typename _Deleter, typename _Alloc>\n \tshared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a)\n-\t: __shared_ptr<_Tp>(__p, __d, std::move(__a)) { }\n+\t: __shared_ptr<_Tp>(__p, std::move(__d), std::move(__a)) { }\n \n       // Aliasing constructor\n "}, {"sha": "a07058c59c464e54ae06ac0fa5f9d80ae8be5f83", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d01fd9e9568250e4304b5e0a5227e90f07cc40/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d01fd9e9568250e4304b5e0a5227e90f07cc40/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=53d01fd9e9568250e4304b5e0a5227e90f07cc40", "patch": "@@ -418,6 +418,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp\n     {\n       explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }\n+      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }\n \n       static _Tp&\n       _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }\n@@ -428,6 +429,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct _Sp_ebo_helper<_Nm, _Tp, false>\n     {\n       explicit _Sp_ebo_helper(const _Tp& __tp) : _M_tp(__tp) { }\n+      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }\n \n       static _Tp&\n       _S_get(_Sp_ebo_helper& __eboh)\n@@ -448,7 +450,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       public:\n \t_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept\n-\t: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)\n+\t: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)\n \t{ }\n \n \t_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }\n@@ -462,11 +464,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // __d(__p) must not throw.\n       _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept\n-      : _M_impl(__p, __d, _Alloc()) { }\n+      : _M_impl(__p, std::move(__d), _Alloc()) { }\n \n       // __d(__p) must not throw.\n       _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept\n-      : _M_impl(__p, __d, __a) { }\n+      : _M_impl(__p, std::move(__d), __a) { }\n \n       ~_Sp_counted_deleter() noexcept { }\n \n@@ -1111,7 +1113,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       template<typename _Yp, typename _Deleter, typename = _SafeConv<_Yp>>\n \t__shared_ptr(_Yp* __p, _Deleter __d)\n-\t: _M_ptr(__p), _M_refcount(__p, __d)\n+\t: _M_ptr(__p), _M_refcount(__p, std::move(__d))\n \t{\n \t  static_assert(__is_invocable<_Deleter&, _Yp*&>::value,\n \t      \"deleter expression d(p) is well-formed\");\n@@ -1121,7 +1123,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Yp, typename _Deleter, typename _Alloc,\n \t       typename = _SafeConv<_Yp>>\n \t__shared_ptr(_Yp* __p, _Deleter __d, _Alloc __a)\n-\t: _M_ptr(__p), _M_refcount(__p, __d, std::move(__a))\n+\t: _M_ptr(__p), _M_refcount(__p, std::move(__d), std::move(__a))\n \t{\n \t  static_assert(__is_invocable<_Deleter&, _Yp*&>::value,\n \t      \"deleter expression d(p) is well-formed\");\n@@ -1130,12 +1132,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       template<typename _Deleter>\n \t__shared_ptr(nullptr_t __p, _Deleter __d)\n-\t: _M_ptr(0), _M_refcount(__p, __d)\n+\t: _M_ptr(0), _M_refcount(__p, std::move(__d))\n \t{ }\n \n       template<typename _Deleter, typename _Alloc>\n         __shared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a)\n-\t: _M_ptr(0), _M_refcount(__p, __d, std::move(__a))\n+\t: _M_ptr(0), _M_refcount(__p, std::move(__d), std::move(__a))\n \t{ }\n \n       template<typename _Yp>\n@@ -1278,12 +1280,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Yp, typename _Deleter>\n \t_SafeConv<_Yp>\n \treset(_Yp* __p, _Deleter __d)\n-\t{ __shared_ptr(__p, __d).swap(*this); }\n+\t{ __shared_ptr(__p, std::move(__d)).swap(*this); }\n \n       template<typename _Yp, typename _Deleter, typename _Alloc>\n \t_SafeConv<_Yp>\n \treset(_Yp* __p, _Deleter __d, _Alloc __a)\n-        { __shared_ptr(__p, __d, std::move(__a)).swap(*this); }\n+        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }\n \n       element_type*\n       get() const noexcept"}, {"sha": "c69b3787699e64f961d08f3c1a9c8f67ca46aa07", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/lwg2802.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d01fd9e9568250e4304b5e0a5227e90f07cc40/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Flwg2802.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d01fd9e9568250e4304b5e0a5227e90f07cc40/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Flwg2802.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Flwg2802.cc?ref=53d01fd9e9568250e4304b5e0a5227e90f07cc40", "patch": "@@ -0,0 +1,51 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <memory>\n+\n+// LWG 2802. shared_ptr constructor requirements for a deleter\n+\n+struct D\n+{\n+  D() { }\n+  D(D&&) { }\n+  void operator()(int* p) const { delete p; }\n+};\n+\n+std::allocator<int> a;\n+\n+std::shared_ptr<int> s1((int*)nullptr, D());\n+std::shared_ptr<int> s2((int*)nullptr, D(), a);\n+std::shared_ptr<int> s3(nullptr, D());\n+std::shared_ptr<int> s4(nullptr, D(), a);\n+\n+void test01()\n+{\n+  s1.reset((int*)nullptr, D());\n+  s1.reset((int*)nullptr, D(), a);\n+}\n+\n+struct D2 final\n+{\n+  D2() { }\n+  D2(D2&&) { }\n+  void operator()(int* p) const { delete p; }\n+};\n+\n+std::shared_ptr<int> s5(nullptr, D2());"}]}