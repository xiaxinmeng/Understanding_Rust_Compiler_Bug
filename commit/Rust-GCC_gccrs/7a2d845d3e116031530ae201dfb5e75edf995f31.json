{"sha": "7a2d845d3e116031530ae201dfb5e75edf995f31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2EyZDg0NWQzZTExNjAzMTUzMGFlMjAxZGZiNWU3NWVkZjk5NWYzMQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-16T01:26:35Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-16T01:26:35Z"}, "message": "Don't crash on invalid tuple assignment.\n\nFrom-SVN: r167892", "tree": {"sha": "ca5c495ffeeafb07a66c20b5f108e55f599a2b02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca5c495ffeeafb07a66c20b5f108e55f599a2b02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a2d845d3e116031530ae201dfb5e75edf995f31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a2d845d3e116031530ae201dfb5e75edf995f31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a2d845d3e116031530ae201dfb5e75edf995f31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a2d845d3e116031530ae201dfb5e75edf995f31/comments", "author": null, "committer": null, "parents": [{"sha": "faff9b0430d73d651ac9b0987091721de2cac8dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faff9b0430d73d651ac9b0987091721de2cac8dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faff9b0430d73d651ac9b0987091721de2cac8dd"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "8187e6da415fc083937a669fdf18a12f79e76326", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2d845d3e116031530ae201dfb5e75edf995f31/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2d845d3e116031530ae201dfb5e75edf995f31/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=7a2d845d3e116031530ae201dfb5e75edf995f31", "patch": "@@ -8655,6 +8655,9 @@ Call_result_expression::do_traverse(Traverse* traverse)\n Type*\n Call_result_expression::do_type()\n {\n+  if (this->classification() == EXPRESSION_ERROR)\n+    return Type::make_error_type();\n+\n   // THIS->CALL_ can be replaced with a temporary reference due to\n   // Call_expression::do_must_eval_in_order when there is an error.\n   Call_expression* ce = this->call_->call_expression();\n@@ -8668,34 +8671,25 @@ Call_result_expression::do_type()\n   for (unsigned int i = 0; i < this->index_; ++i)\n     {\n       if (pr == results->end())\n-\treturn Type::make_error_type();\n+\tbreak;\n       ++pr;\n     }\n   if (pr == results->end())\n-    return Type::make_error_type();\n+    {\n+      this->report_error(_(\"number of results does not match \"\n+\t\t\t   \"number of values\"));\n+      return Type::make_error_type();\n+    }\n   return pr->type();\n }\n \n-// Check the type.  This is where we give an error if we're trying to\n-// extract too many values from a call.\n+// Check the type.  Just make sure that we trigger the warning in\n+// do_type.\n \n void\n Call_result_expression::do_check_types(Gogo*)\n {\n-  bool ok = true;\n-  Call_expression* ce = this->call_->call_expression();\n-  if (ce != NULL)\n-    ok = this->index_ < ce->result_count();\n-  else\n-    {\n-      // This can happen when the call returns a single value but we\n-      // are asking for the second result.\n-      if (this->call_->is_error_expression())\n-\treturn;\n-      ok = false;\n-    }\n-  if (!ok)\n-    this->report_error(_(\"number of results does not match number of values\"));\n+  this->type();\n }\n \n // Determine the type.  We have nothing to do here, but the 0 result"}, {"sha": "2c0dba0a11bec899ca0298de72b9168f1f23ea16", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2d845d3e116031530ae201dfb5e75edf995f31/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2d845d3e116031530ae201dfb5e75edf995f31/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=7a2d845d3e116031530ae201dfb5e75edf995f31", "patch": "@@ -782,6 +782,12 @@ Tuple_assignment_statement::do_lower(Gogo*, Block* enclosing)\n     {\n       gcc_assert(prhs != this->rhs_->end());\n \n+      if ((*plhs)->is_error_expression()\n+\t  || (*plhs)->type()->is_error_type()\n+\t  || (*prhs)->is_error_expression()\n+\t  || (*prhs)->type()->is_error_type())\n+\tcontinue;\n+\n       if ((*plhs)->is_sink_expression())\n \t{\n \t  b->add_statement(Statement::make_statement(*prhs));\n@@ -802,6 +808,12 @@ Tuple_assignment_statement::do_lower(Gogo*, Block* enclosing)\n        plhs != this->lhs_->end();\n        ++plhs, ++prhs)\n     {\n+      if ((*plhs)->is_error_expression()\n+\t  || (*plhs)->type()->is_error_type()\n+\t  || (*prhs)->is_error_expression()\n+\t  || (*prhs)->type()->is_error_type())\n+\tcontinue;\n+\n       if ((*plhs)->is_sink_expression())\n \tcontinue;\n "}]}