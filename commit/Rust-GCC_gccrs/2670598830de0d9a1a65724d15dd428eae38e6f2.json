{"sha": "2670598830de0d9a1a65724d15dd428eae38e6f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY3MDU5ODgzMGRlMGQ5YTFhNjU3MjRkMTVkZDQyOGVhZTM4ZTZmMg==", "commit": {"author": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-10-22T10:28:57Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-10-22T10:28:57Z"}, "message": "CFStrings for Darwin.\n\ngcc:\n\n\tBased on the CFString implementation in FSF apple/trunk branch.\n\t\n\t* target.def (objc_construct_string): New Hook.\n\t* doc/tm.texi (objc_construct_string): Document.\n\t* doc/tm.texi.in (TARGET_OBJC_CONSTRUCT_STRING): New.\n\t* config/t-darwin: Amend build rules for darwin.o.\n\t* config/darwin.opt: Add cfstrings flags.\n\t* config/darwin-c.c: Define __CONSTANT_CFSTRINGS__.\n\t(darwin_objc_construct_string): New.\n\t* config/i386/darwin.h (SUBTARGET_INIT_BUILTINS): Define.\n\t* config/i386/i386.c (ix86_init_builtins): Add SUBTARGET_INIT_BUILTINS.\n\t* config/darwin-protos.h (darwin_init_cfstring_builtins): New prototype.\n\t(darwin_fold_builtin): Likewise.\n\t(darwin_build_constant_cfstring): Likewise.\n\t(darwin_objc_construct_string): Likewise.\n\t(darwin_cfstring_p): Likewise.\n\t(darwin_enter_string_into_cfstring_table): Likewise.\n\t* config/rs6000/darwin.h (SUBTARGET_INIT_BUILTINS) Update for CFString.\n\t* config/darwin.c (darwin_running_cxx): New var. \n\t(machopic_select_section): Return cfstring_constant_object_section.\n\t(darwin_override_options): Set darwin_running_cxx.\n\t(add_builtin_field_decl): New.\n\t(darwin_init_cfstring_builtins): New.\n\t(darwin_build_constant_cfstring): New.\n\t(darwin_fold_builtin): New.\n\t(cfstring_hash): New.\n\t(cfstring_eq): New.\n\t(darwin_enter_string_into_cfstring_table): New.\n\t* config/darwin-sections.def (cfstring_constant_object_section): New.\n\t* config/darwin.h (TARGET_FOLD_BUILTIN): Define.\n\t(TARGET_OBJC_CONSTRUCT_STRING): Define.\n\ngcc/objc:\n\n\tBased on the CFString implementation in FSF apple/trunk branch.\n\t\n\t* objc/objc-act.c (objc_build_string_object): Handle CFStrings.\n\nFrom-SVN: r165820", "tree": {"sha": "930cb5a100d0242c1b4f82c25d186b96318cd1a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/930cb5a100d0242c1b4f82c25d186b96318cd1a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2670598830de0d9a1a65724d15dd428eae38e6f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2670598830de0d9a1a65724d15dd428eae38e6f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2670598830de0d9a1a65724d15dd428eae38e6f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2670598830de0d9a1a65724d15dd428eae38e6f2/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e5db3b4b48ede7d0d1815ec2126b669affeda96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e5db3b4b48ede7d0d1815ec2126b669affeda96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e5db3b4b48ede7d0d1815ec2126b669affeda96"}], "stats": {"total": 448, "additions": 443, "deletions": 5}, "files": [{"sha": "1fa0b1b77d3df0a86747dbc624fd58e31bd81dcc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2670598830de0d9a1a65724d15dd428eae38e6f2", "patch": "@@ -1,3 +1,37 @@\n+2010-10-21  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\tBased on the CFString implementation in FSF apple/trunk branch.\n+\t\n+\t* target.def (objc_construct_string): New Hook.\n+\t* doc/tm.texi (objc_construct_string): Document.\n+\t* doc/tm.texi.in (TARGET_OBJC_CONSTRUCT_STRING): New.\n+\t* config/t-darwin: Amend build rules for darwin.o.\n+\t* config/darwin.opt: Add cfstrings flags.\n+\t* config/darwin-c.c: Define __CONSTANT_CFSTRINGS__.\n+\t(darwin_objc_construct_string): New.\n+\t* config/i386/darwin.h (SUBTARGET_INIT_BUILTINS): Define.\n+\t* config/i386/i386.c (ix86_init_builtins): Add SUBTARGET_INIT_BUILTINS.\n+\t* config/darwin-protos.h (darwin_init_cfstring_builtins): New prototype.\n+\t(darwin_fold_builtin): Likewise.\n+\t(darwin_build_constant_cfstring): Likewise.\n+\t(darwin_objc_construct_string): Likewise.\n+\t(darwin_cfstring_p): Likewise.\n+\t(darwin_enter_string_into_cfstring_table): Likewise.\n+\t* config/rs6000/darwin.h (SUBTARGET_INIT_BUILTINS) Update for CFString.\n+\t* config/darwin.c (darwin_running_cxx): New var. \n+\t(machopic_select_section): Return cfstring_constant_object_section.\n+\t(darwin_override_options): Set darwin_running_cxx.\n+\t(add_builtin_field_decl): New.\n+\t(darwin_init_cfstring_builtins): New.\n+\t(darwin_build_constant_cfstring): New.\n+\t(darwin_fold_builtin): New.\n+\t(cfstring_hash): New.\n+\t(cfstring_eq): New.\n+\t(darwin_enter_string_into_cfstring_table): New.\n+\t* config/darwin-sections.def (cfstring_constant_object_section): New.\n+\t* config/darwin.h (TARGET_FOLD_BUILTIN): Define.\n+\t(TARGET_OBJC_CONSTRUCT_STRING): Define.\n+\n 2010-10-21  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/alpha/alpha.c (alpha_build_builtin_va_list): Use"}, {"sha": "ef3cfbc56b50e091acc0ce7650beb755a8828c50", "filename": "gcc/config/darwin-c.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Fconfig%2Fdarwin-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Fconfig%2Fdarwin-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-c.c?ref=2670598830de0d9a1a65724d15dd428eae38e6f2", "patch": "@@ -608,6 +608,9 @@ darwin_cpp_builtins (cpp_reader *pfile)\n      to be defined and won't work if it isn't.  */\n   builtin_define_with_value (\"__APPLE_CC__\", \"1\", false);\n \n+  if (darwin_constant_cfstrings)\n+    builtin_define (\"__CONSTANT_CFSTRINGS__\");\n+\n   builtin_define_with_value (\"__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__\",\n \t\t\t     version_as_macro(), false);\n \n@@ -658,3 +661,20 @@ handle_c_option (size_t code,\n #define TARGET_HANDLE_C_OPTION handle_c_option\n \n struct gcc_targetcm targetcm = TARGETCM_INITIALIZER;\n+\n+/* Allow ObjC* access to CFStrings.  */\n+tree\n+darwin_objc_construct_string (tree str)\n+{\n+  if (!darwin_constant_cfstrings)\n+    {\n+    /* Even though we are not using CFStrings, place our literal\n+       into the cfstring_htab hash table, so that the\n+       darwin_constant_cfstring_p() function will see it.  */\n+      darwin_enter_string_into_cfstring_table (str);\n+      /* Fall back to NSConstantString.  */\n+      return NULL_TREE;\n+    }\n+\n+  return darwin_build_constant_cfstring (str);\n+}"}, {"sha": "75cf249990060cf69c380f42eac3da677d04ddcf", "filename": "gcc/config/darwin-protos.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Fconfig%2Fdarwin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Fconfig%2Fdarwin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-protos.h?ref=2670598830de0d9a1a65724d15dd428eae38e6f2", "patch": "@@ -91,6 +91,14 @@ extern void darwin_asm_declare_constant_name (FILE *, const char *,\n \t\t\t\t\t      const_tree, HOST_WIDE_INT);\n extern bool darwin_binds_local_p (const_tree);\n extern void darwin_cpp_builtins (struct cpp_reader *);\n+\n+extern void darwin_init_cfstring_builtins (unsigned);\n+extern tree darwin_fold_builtin (tree, int, tree *, bool);\n+extern tree darwin_objc_construct_string (tree);\n+extern bool darwin_cfstring_p (tree);\n+extern tree darwin_build_constant_cfstring (tree str);\n+extern void darwin_enter_string_into_cfstring_table (tree);\n+\n extern void darwin_asm_output_anchor (rtx symbol);\n extern bool darwin_kextabi_p (void);\n extern void darwin_override_options (void);"}, {"sha": "a7fa968279a722aacbfc344d1b953301de38c748", "filename": "gcc/config/darwin-sections.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Fconfig%2Fdarwin-sections.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Fconfig%2Fdarwin-sections.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-sections.def?ref=2670598830de0d9a1a65724d15dd428eae38e6f2", "patch": "@@ -33,6 +33,9 @@ DEF_SECTION (cstring_section, SECTION_MERGE | SECTION_STRINGS, \".cstring\", 0)\n DEF_SECTION (literal4_section, SECTION_MERGE, \".literal4\", 0)\n DEF_SECTION (literal8_section, SECTION_MERGE, \".literal8\", 0)\n DEF_SECTION (literal16_section, SECTION_MERGE, \".literal16\", 0)\n+/* Unlike constant NSStrings, constant CFStrings do not live  in the __OBJC segment\n+  since they may also occur in pure C  or C++ programs.  */\n+DEF_SECTION (cfstring_constant_object_section, 0, \".section __DATA, __cfstring\", 0)\n DEF_SECTION (constructor_section, 0, \".constructor\", 0)\n DEF_SECTION (mod_init_section, 0, \".mod_init_func\", 0)\n DEF_SECTION (mod_term_section, 0, \".mod_term_func\", 0)"}, {"sha": "37be79fbe5c4383b8a0ce06fdea8de5e9accfd67", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 314, "deletions": 0, "changes": 314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=2670598830de0d9a1a65724d15dd428eae38e6f2", "patch": "@@ -41,6 +41,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"target.h\"\n #include \"tm_p.h\"\n+#include \"c-tree.h\"\n+#include \"c-lang.h\"\n #include \"diagnostic-core.h\"\n #include \"toplev.h\"\n #include \"hashtab.h\"\n@@ -85,6 +87,11 @@ along with GCC; see the file COPYING3.  If not see\n    kernel) the stubs might still be required, and this will be set true.  */\n int darwin_emit_branch_islands = false;\n \n+/* A flag to determine whether we are running c++ or obj-c++.  This has to be\n+   settable from non-c-family contexts too (i.e. we can't use the c_dialect_\n+   functions).  */\n+int darwin_running_cxx;\n+\n /* Section names.  */\n section * darwin_sections[NUM_DARWIN_SECTIONS];\n \n@@ -1256,6 +1263,8 @@ machopic_select_section (tree decl,\n           else\n             return darwin_sections[objc_string_object_section];\n         }\n+      else if (!strcmp (IDENTIFIER_POINTER (name), \"__builtin_CFString\"))\n+\treturn darwin_sections[cfstring_constant_object_section];\n       else\n         return base_section;\n     }\n@@ -1910,6 +1919,9 @@ darwin_override_options (void)\n   if (darwin_macosx_version_min\n       && strverscmp (darwin_macosx_version_min, \"10.5\") < 0)\n     darwin_emit_branch_islands = true;\n+\n+  /* The c_dialect...() macros are not available to us here.  */\n+  darwin_running_cxx = (strstr (lang_hooks.name, \"C++\") != 0);\n }\n \n /* Add $LDBL128 suffix to long double builtins.  */\n@@ -1954,5 +1966,307 @@ darwin_patch_builtins (void)\n #undef PATCH_BUILTIN_VARIADIC\n }\n \n+/*  CFStrings implementation.  */\n+static GTY(()) tree cfstring_class_reference = NULL_TREE;\n+static GTY(()) tree cfstring_type_node = NULL_TREE;\n+static GTY(()) tree ccfstring_type_node = NULL_TREE;\n+static GTY(()) tree pccfstring_type_node = NULL_TREE;\n+static GTY(()) tree pcint_type_node = NULL_TREE;\n+static GTY(()) tree pcchar_type_node = NULL_TREE;\n+\n+static enum built_in_function DARWIN_BUILTIN_CFSTRINGMAKECONSTANTSTRING;\n+\n+/* Store all constructed constant CFStrings in a hash table so that\n+   they get uniqued properly.  */\n+\n+typedef struct GTY (()) cfstring_descriptor {\n+  /* The string literal.  */\n+  tree literal;\n+  /* The resulting constant CFString.  */\n+  tree constructor;\n+} cfstring_descriptor;\n+\n+static GTY ((param_is (struct cfstring_descriptor))) htab_t cfstring_htab;\n+\n+static hashval_t cfstring_hash (const void *);\n+static int cfstring_eq (const void *, const void *);\n+\n+static tree\n+add_builtin_field_decl (tree type, const char *name, tree **chain)\n+{\n+  tree field = build_decl (BUILTINS_LOCATION, FIELD_DECL, \n+\t\t\t    get_identifier (name), type);\n+\n+  if (*chain != NULL)\n+    **chain = field;\n+  *chain = &DECL_CHAIN (field);\n+\n+  return field;\n+}\n+\n+void\n+darwin_init_cfstring_builtins (unsigned first_avail)\n+{\n+  tree cfsfun, fields, pccfstring_ftype_pcchar;\n+  tree *chain = NULL;\n+\n+  DARWIN_BUILTIN_CFSTRINGMAKECONSTANTSTRING = \n+\t\t\t(enum built_in_function) first_avail;\n+  \n+  /* struct __builtin_CFString {\n+       const int *isa;\t\t(will point at\n+       int flags;\t\t __CFConstantStringClassReference)\n+       const char *str;\n+       long length;\n+     };  */\n+\n+  pcint_type_node = build_pointer_type \n+\t\t   (build_qualified_type (integer_type_node, TYPE_QUAL_CONST));\n+\n+  pcchar_type_node = build_pointer_type \n+\t\t   (build_qualified_type (char_type_node, TYPE_QUAL_CONST));\n+\n+  cfstring_type_node = (*lang_hooks.types.make_type) (RECORD_TYPE);\n+\n+  /* Have to build backwards for finish struct.  */\n+  fields = add_builtin_field_decl (long_integer_type_node, \"length\", &chain);\n+  add_builtin_field_decl (pcchar_type_node, \"str\", &chain);\n+  add_builtin_field_decl (integer_type_node, \"flags\", &chain);\n+  add_builtin_field_decl (pcint_type_node, \"isa\", &chain);\n+  finish_builtin_struct (cfstring_type_node, \"__builtin_CFString\",\n+\t\t\t fields, NULL_TREE);\n+\n+  /* const struct __builtin_CFstring *\n+     __builtin___CFStringMakeConstantString (const char *); */\n+\n+  ccfstring_type_node = build_qualified_type \n+\t\t\t(cfstring_type_node, TYPE_QUAL_CONST);\n+  pccfstring_type_node = build_pointer_type (ccfstring_type_node);\n+  pccfstring_ftype_pcchar = build_function_type_list \n+\t\t\t(pccfstring_type_node, pcchar_type_node, NULL_TREE);\n+\n+  cfsfun  = build_decl (BUILTINS_LOCATION, FUNCTION_DECL, \n+\t\t\tget_identifier (\"__builtin___CFStringMakeConstantString\"),\n+\t\t\tpccfstring_ftype_pcchar);\n+\n+  TREE_PUBLIC (cfsfun) = 1;\n+  DECL_EXTERNAL (cfsfun) = 1;\n+  DECL_ARTIFICIAL (cfsfun) = 1;\n+  /* Make a lang-specific section - dup_lang_specific_decl makes a new node\n+     in place of the existing, which may be NULL.  */\n+  DECL_LANG_SPECIFIC (cfsfun) = NULL;\n+  (*lang_hooks.dup_lang_specific_decl) (cfsfun);\n+  DECL_BUILT_IN_CLASS (cfsfun) = BUILT_IN_MD;\n+  DECL_FUNCTION_CODE (cfsfun) = DARWIN_BUILTIN_CFSTRINGMAKECONSTANTSTRING;\n+  lang_hooks.builtin_function (cfsfun);\n+\n+  /* extern int __CFConstantStringClassReference[];  */\n+  cfstring_class_reference = build_decl (BUILTINS_LOCATION, VAR_DECL,\n+\t\t get_identifier (\"__CFConstantStringClassReference\"),\n+\t\t build_array_type (integer_type_node, NULL_TREE));\n+\n+  TREE_PUBLIC (cfstring_class_reference) = 1;\n+  DECL_ARTIFICIAL (cfstring_class_reference) = 1;\n+  (*lang_hooks.decls.pushdecl) (cfstring_class_reference);\n+  DECL_EXTERNAL (cfstring_class_reference) = 1;\n+  rest_of_decl_compilation (cfstring_class_reference, 0, 0);\n+  \n+  /* Initialize the hash table used to hold the constant CFString objects.  */\n+  cfstring_htab = htab_create_ggc (31, cfstring_hash, cfstring_eq, NULL);\n+}\n+\n+tree\n+darwin_fold_builtin (tree fndecl, int n_args, tree *argp, \n+\t\t     bool ARG_UNUSED (ignore))\n+{\n+  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n+  \n+  if (fcode == DARWIN_BUILTIN_CFSTRINGMAKECONSTANTSTRING)\n+    {\n+      if (!darwin_constant_cfstrings)\n+\t{\n+\t  error (\"built-in function %qD requires the\" \n+\t\t \" %<-mconstant-cfstrings%> flag\", fndecl);\n+\t  return error_mark_node;\n+\t}\n+\n+      if (n_args != 1)\n+\t{\n+\t  error (\"built-in function %qD takes one argument only\", fndecl);\n+\t  return error_mark_node;\n+\t}\n+\n+      return darwin_build_constant_cfstring (*argp);\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n+static hashval_t\n+cfstring_hash (const void *ptr)\n+{\n+  tree str = ((const struct cfstring_descriptor *)ptr)->literal;\n+  const unsigned char *p = (const unsigned char *) TREE_STRING_POINTER (str);\n+  int i, len = TREE_STRING_LENGTH (str);\n+  hashval_t h = len;\n+\n+  for (i = 0; i < len; i++)\n+    h = ((h * 613) + p[i]);\n+\n+  return h;\n+}\n+\n+static int\n+cfstring_eq (const void *ptr1, const void *ptr2)\n+{\n+  tree str1 = ((const struct cfstring_descriptor *)ptr1)->literal;\n+  tree str2 = ((const struct cfstring_descriptor *)ptr2)->literal;\n+  int len1 = TREE_STRING_LENGTH (str1);\n+\n+  return (len1 == TREE_STRING_LENGTH (str2)\n+\t  && !memcmp (TREE_STRING_POINTER (str1), TREE_STRING_POINTER (str2),\n+\t\t      len1));\n+}\n+\n+tree\n+darwin_build_constant_cfstring (tree str)\n+{\n+  struct cfstring_descriptor *desc, key;\n+  void **loc;\n+  tree addr;\n+\n+  if (!str)\n+    {\n+      error (\"CFString literal is missing\");\n+      return error_mark_node;\n+    }\n+\n+  STRIP_NOPS (str);\n+\n+  if (TREE_CODE (str) == ADDR_EXPR)\n+    str = TREE_OPERAND (str, 0);\n+\n+  if (TREE_CODE (str) != STRING_CST)\n+    {\n+      error (\"CFString literal expression is not a string constant\");\n+      return error_mark_node;\n+    }\n+\n+  /* Perhaps we already constructed a constant CFString just like this one? */\n+  key.literal = str;\n+  loc = htab_find_slot (cfstring_htab, &key, INSERT);\n+  desc = (struct cfstring_descriptor *) *loc;\n+\n+  if (!desc)\n+    {\n+      tree var, constructor, field;\n+      VEC(constructor_elt,gc) *v = NULL;\n+      int length = TREE_STRING_LENGTH (str) - 1;\n+\n+      if (darwin_warn_nonportable_cfstrings)\n+\t{\n+\t  const char *s = TREE_STRING_POINTER (str);\n+\t  int l = 0;\n+\n+\t  for (l = 0; l < length; l++)\n+\t    if (!s[l] || !isascii (s[l]))\n+\t      {\n+\t\twarning (darwin_warn_nonportable_cfstrings, \"%s in CFString literal\",\n+\t\t\t s[l] ? \"non-ASCII character\" : \"embedded NUL\");\n+\t\tbreak;\n+\t      }\n+\t}\n+\n+      *loc = desc = ggc_alloc_cleared_cfstring_descriptor ();\n+      desc->literal = str;\n+\n+      /* isa *. */\n+      field = TYPE_FIELDS (ccfstring_type_node);\n+      CONSTRUCTOR_APPEND_ELT(v, NULL_TREE, \n+\t\t\t     build1 (ADDR_EXPR,  TREE_TYPE (field),  \n+\t\t\t\t     cfstring_class_reference));\n+      /* flags */\n+      field = DECL_CHAIN (field);\n+      CONSTRUCTOR_APPEND_ELT(v, NULL_TREE, \n+\t\t\t     build_int_cst (TREE_TYPE (field), 0x000007c8));\n+      /* string *. */\n+      field = DECL_CHAIN (field);\n+      CONSTRUCTOR_APPEND_ELT(v, NULL_TREE,\n+\t\t\t     build1 (ADDR_EXPR, TREE_TYPE (field), str));\n+      /* length */\n+      field = DECL_CHAIN (field);\n+      CONSTRUCTOR_APPEND_ELT(v, NULL_TREE,\n+\t\t\t     build_int_cst (TREE_TYPE (field), length));\n+\n+      constructor = build_constructor (ccfstring_type_node, v);\n+      TREE_READONLY (constructor) = 1;\n+      TREE_CONSTANT (constructor) = 1;\n+      TREE_STATIC (constructor) = 1;\n+\n+      /* Fromage: The C++ flavor of 'build_unary_op' expects constructor nodes\n+\t to have the TREE_HAS_CONSTRUCTOR (...) bit set.  However, this file is\n+\t being built without any knowledge of C++ tree accessors; hence, we shall\n+\t use the generic accessor that TREE_HAS_CONSTRUCTOR actually maps to!  */\n+      if (darwin_running_cxx)\n+\tTREE_LANG_FLAG_4 (constructor) = 1;  /* TREE_HAS_CONSTRUCTOR  */\n+\n+      /* Create an anonymous global variable for this CFString.  */\n+      var = build_decl (input_location, CONST_DECL, \n+\t\t\tNULL, TREE_TYPE (constructor));\n+      DECL_ARTIFICIAL (var) = 1;\n+      TREE_STATIC (var) = 1;\n+      DECL_INITIAL (var) = constructor;\n+      /* FIXME: This should use a translation_unit_decl to indicate file scope.  */\n+      DECL_CONTEXT (var) = NULL_TREE;\n+      desc->constructor = var;\n+    }\n+\n+  addr = build1 (ADDR_EXPR, pccfstring_type_node, desc->constructor);\n+  TREE_CONSTANT (addr) = 1;\n+\n+  return addr;\n+}\n+\n+bool\n+darwin_cfstring_p (tree str)\n+{\n+  struct cfstring_descriptor key;\n+  void **loc;\n+\n+  if (!str)\n+    return false;\n+\n+  STRIP_NOPS (str);\n+\n+  if (TREE_CODE (str) == ADDR_EXPR)\n+    str = TREE_OPERAND (str, 0);\n+\n+  if (TREE_CODE (str) != STRING_CST)\n+    return false;\n+\n+  key.literal = str;\n+  loc = htab_find_slot (cfstring_htab, &key, NO_INSERT);\n+  \n+  if (loc)\n+    return true;\n+\n+  return false;\n+}\n+\n+void\n+darwin_enter_string_into_cfstring_table (tree str)\n+{\n+  struct cfstring_descriptor key;\n+  void **loc;\n+\n+  key.literal = str;\n+  loc = htab_find_slot (cfstring_htab, &key, INSERT);\n+\n+  if (!*loc)\n+    {\n+      *loc = ggc_alloc_cleared_cfstring_descriptor ();\n+      ((struct cfstring_descriptor *)*loc)->literal = str;\n+    }\n+}\n \n #include \"gt-darwin.h\""}, {"sha": "f6b88f97c98d8c62d2c4292a1c8290fb3c77f761", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=2670598830de0d9a1a65724d15dd428eae38e6f2", "patch": "@@ -1054,6 +1054,12 @@ __enable_execute_stack (void *addr)                                     \\\n #define TARGET_CXX_CDTOR_RETURNS_THIS (darwin_kextabi_p)\n #define TARGET_KEXTABI flag_apple_kext\n \n+/* We have target-specific builtins.  */\n+#define TARGET_FOLD_BUILTIN darwin_fold_builtin\n+\n+#define TARGET_OBJC_CONSTRUCT_STRING \\\n+  darwin_objc_construct_string\n+\n #define TARGET_HAS_TARGETCM 1\n \n #ifndef CROSS_DIRECTORY_STRUCTURE"}, {"sha": "afb122849f439eefd91739c15e789aaf17edbe12", "filename": "gcc/config/darwin.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Fconfig%2Fdarwin.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Fconfig%2Fdarwin.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.opt?ref=2670598830de0d9a1a65724d15dd428eae38e6f2", "patch": "@@ -18,6 +18,14 @@\n ; along with GCC; see the file COPYING3.  If not see\n ; <http://www.gnu.org/licenses/>.\n \n+mconstant-cfstrings\n+Target Report Var(darwin_constant_cfstrings) Init(1)\n+Generate compile-time CFString objects\n+\n+Wnonportable-cfstrings\n+Target Report Var(darwin_warn_nonportable_cfstrings) Init(1) Warning\n+Warn if constant CFString objects contain non-portable characters\n+\n mfix-and-continue\n Target Report Var(darwin_fix_and_continue)\n Generate code suitable for fast turn around debugging"}, {"sha": "6f0b23ec81501776373e9bc22c94f0efa47f914c", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=2670598830de0d9a1a65724d15dd428eae38e6f2", "patch": "@@ -314,3 +314,10 @@ extern int darwin_emit_branch_islands;\n #define MACHO_SYMBOL_FLAG_VARIABLE ((SYMBOL_FLAG_MACH_DEP) << 3)\n \n #define SUBTARGET32_DEFAULT_CPU \"i686\"\n+\n+#undef  SUBTARGET_INIT_BUILTINS\n+#define SUBTARGET_INIT_BUILTINS\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\\\n+  darwin_init_cfstring_builtins ((unsigned) (IX86_BUILTIN_MAX));\\\n+} while(0)\n+"}, {"sha": "e07283eb39abde6da3ee5f0361e1f6cc04c975b0", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2670598830de0d9a1a65724d15dd428eae38e6f2", "patch": "@@ -24410,6 +24410,10 @@ ix86_init_builtins (void)\n \n   if (TARGET_64BIT)\n     ix86_init_builtins_va_builtins_abi ();\n+\n+#ifdef SUBTARGET_INIT_BUILTINS\n+  SUBTARGET_INIT_BUILTINS;\n+#endif\n }\n \n /* Return the ix86 builtin for CODE.  */"}, {"sha": "2e0db78c7b55f8ab20cc281dd0878fcdfb91ab16", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=2670598830de0d9a1a65724d15dd428eae38e6f2", "patch": "@@ -436,5 +436,10 @@ extern int darwin_emit_branch_islands;\n    default, as kernel code doesn't save/restore those registers.  */\n #define OS_MISSING_ALTIVEC (flag_mkernel || flag_apple_kext)\n \n-/* Darwin has to rename some of the long double builtins.  */\n-#define SUBTARGET_INIT_BUILTINS darwin_patch_builtins ()\n+/* PPC Darwin has to rename some of the long double builtins.  */\n+#undef  SUBTARGET_INIT_BUILTINS\n+#define SUBTARGET_INIT_BUILTINS\t\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  darwin_patch_builtins ();\t\t\t\t\t\t\\\n+  darwin_init_cfstring_builtins ((unsigned) (RS6000_BUILTIN_COUNT));\t\\\n+} while(0)"}, {"sha": "51d6b614a2a736cbb80bbd4f61a84ed877470aa6", "filename": "gcc/config/t-darwin", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Fconfig%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Fconfig%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-darwin?ref=2670598830de0d9a1a65724d15dd428eae38e6f2", "patch": "@@ -21,7 +21,7 @@ darwin.o: $(srcdir)/config/darwin.c $(CONFIG_H) $(SYSTEM_H) coretypes.h     \\\n   $(TM_H) $(RTL_H) $(REGS_H) hard-reg-set.h $(REAL_H) insn-config.h         \\\n   conditions.h insn-flags.h output.h insn-attr.h flags.h $(TREE_H) expr.h   \\\n   reload.h function.h $(GGC_H) langhooks.h $(TARGET_H) $(TM_P_H) gt-darwin.h \\\n-  config/darwin-sections.def\n+  c-tree.h c-lang.h config/darwin-sections.def\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$(srcdir)/config/darwin.c\n "}, {"sha": "b28da918e70066fac7c12d255a9d01559086517c", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=2670598830de0d9a1a65724d15dd428eae38e6f2", "patch": "@@ -757,6 +757,10 @@ only available in the C (and related language) front ends, then you\n should use @code{TARGET_HANDLE_C_OPTION} instead.\n @end deftypefn\n \n+@deftypefn {Target Hook} tree TARGET_OBJC_CONSTRUCT_STRING (tree @var{string})\n+Construct a constant string representation for @var{string}\n+@end deftypefn\n+\n @defmac TARGET_VERSION\n This macro is a C statement to print on @code{stderr} a string\n describing the particular machine description choice.  Every machine"}, {"sha": "0081e66c587f6482a2ef2c30a9793618aab8eeb7", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=2670598830de0d9a1a65724d15dd428eae38e6f2", "patch": "@@ -757,6 +757,8 @@ only available in the C (and related language) front ends, then you\n should use @code{TARGET_HANDLE_C_OPTION} instead.\n @end deftypefn\n \n+@hook TARGET_OBJC_CONSTRUCT_STRING\n+\n @defmac TARGET_VERSION\n This macro is a C statement to print on @code{stderr} a string\n describing the particular machine description choice.  Every machine"}, {"sha": "de64a3174c360e9913f3eb4dc2bfab574e0552fb", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=2670598830de0d9a1a65724d15dd428eae38e6f2", "patch": "@@ -1,3 +1,9 @@\n+2010-10-21  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\tBased on the CFString implementation in FSF apple/trunk branch.\n+\t\n+\t* objc/objc-act.c (objc_build_string_object): Handle CFStrings.\n+\n 2010-10-21  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc-act.c (get_objc_string_decl): Use a switch instead of a"}, {"sha": "bc0791030e6ae1fd84beea7c5718510311926a51", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=2670598830de0d9a1a65724d15dd428eae38e6f2", "patch": "@@ -2576,7 +2576,7 @@ string_eq (const void *ptr1, const void *ptr2)\n tree\n objc_build_string_object (tree string)\n {\n-  tree constructor = NULL_TREE, constant_string_class;\n+  tree constant_string_class;\n   int length;\n   tree fields, addr;\n   struct string_descriptor *desc, key;\n@@ -2587,6 +2587,17 @@ objc_build_string_object (tree string)\n   TREE_SET_CODE (string, STRING_CST);\n   length = TREE_STRING_LENGTH (string) - 1;\n \n+  /* The target may have different ideas on how to construct an ObjC string \n+     literal.  On Darwin (Mac OS X), for example, we may wish to obtain a \n+     constant CFString reference instead.\n+     At present, this is only supported for the NeXT runtime.  */\n+  if (flag_next_runtime && targetcm.objc_construct_string)\n+    {\n+      tree constructor = (*targetcm.objc_construct_string) (string);\n+      if (constructor)\n+\treturn build1 (NOP_EXPR, objc_object_type, constructor);\n+    }\n+\n   /* Check whether the string class being used actually exists and has the\n      correct ivar layout.  */\n   if (!string_layout_checked)\n@@ -2626,7 +2637,7 @@ objc_build_string_object (tree string)\n \n   if (!desc)\n     {\n-      tree var;\n+      tree var, constructor;\n       VEC(constructor_elt,gc) *v = NULL;\n       *loc = desc = ggc_alloc_string_descriptor ();\n       desc->literal = string;"}, {"sha": "3567c81510c687e3d529626bc7194026e8de72cd", "filename": "gcc/target.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2670598830de0d9a1a65724d15dd428eae38e6f2/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=2670598830de0d9a1a65724d15dd428eae38e6f2", "patch": "@@ -2542,4 +2542,10 @@ DEFHOOK\n  bool, (size_t code, const char *arg, int value),\n  default_handle_c_option)\n \n+DEFHOOK\n+(objc_construct_string,\n+ \"Construct a constant string representation for @var{string}\",\n+ tree, (tree string),\n+ NULL)\n+\n HOOK_VECTOR_END (C90_EMPTY_HACK)"}]}