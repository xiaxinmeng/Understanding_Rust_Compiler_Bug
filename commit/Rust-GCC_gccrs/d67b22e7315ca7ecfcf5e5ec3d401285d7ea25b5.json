{"sha": "d67b22e7315ca7ecfcf5e5ec3d401285d7ea25b5", "node_id": "C_kwDOANBUbNoAKGQ2N2IyMmU3MzE1Y2E3ZWNmY2Y1ZTVlYzNkNDAxMjg1ZDdlYTI1YjU", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-03-28T19:50:09Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-10-14T12:19:46Z"}, "message": "Darwin: Update quotes in driver warning messages.\n\nThis adds some missing quotes around options and option argument\nterms in warning messages.  Avoid contractions in warning\nmessages.\n\nSigned-off-by: Iain Sandoe <iain@sandoe.co.uk>\n\ngcc/ChangeLog:\n\n\t* config/darwin-driver.c (darwin_find_version_from_kernel):\n\tQuote internal identifiers and avoid contractions in\n\twarnings.\n\t(darwin_default_min_version): Likewise.\n\t(darwin_driver_init): Likewise.", "tree": {"sha": "d7357d30e0484bc99a39057288b5604a88282178", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7357d30e0484bc99a39057288b5604a88282178"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d67b22e7315ca7ecfcf5e5ec3d401285d7ea25b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d67b22e7315ca7ecfcf5e5ec3d401285d7ea25b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d67b22e7315ca7ecfcf5e5ec3d401285d7ea25b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d67b22e7315ca7ecfcf5e5ec3d401285d7ea25b5/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff2b92de13f9b0a541ed44b8d36f2f79fb9306f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff2b92de13f9b0a541ed44b8d36f2f79fb9306f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff2b92de13f9b0a541ed44b8d36f2f79fb9306f4"}], "stats": {"total": 52, "additions": 30, "deletions": 22}, "files": [{"sha": "573abae4782d91e4a5840a05ba110cb11cb86032", "filename": "gcc/config/darwin-driver.c", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67b22e7315ca7ecfcf5e5ec3d401285d7ea25b5/gcc%2Fconfig%2Fdarwin-driver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67b22e7315ca7ecfcf5e5ec3d401285d7ea25b5/gcc%2Fconfig%2Fdarwin-driver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-driver.c?ref=d67b22e7315ca7ecfcf5e5ec3d401285d7ea25b5", "patch": "@@ -143,7 +143,7 @@ darwin_find_version_from_kernel (void)\n   if (sysctl (osversion_name, ARRAY_SIZE (osversion_name), osversion,\n \t      &osversion_len, NULL, 0) == -1)\n     {\n-      warning (0, \"sysctl for kern.osversion failed: %m\");\n+      warning (0, \"%<sysctl%> for %<kern.osversion%> failed: %m\");\n       return NULL;\n     }\n \n@@ -189,7 +189,7 @@ darwin_find_version_from_kernel (void)\n   return new_flag;\n \n  parse_failed:\n-  warning (0, \"couldn%'t understand kern.osversion %q.*s\",\n+  warning (0, \"could not understand %<kern.osversion%> %q.*s\",\n \t   (int) osversion_len, osversion);\n   return NULL;\n }\n@@ -229,7 +229,7 @@ darwin_default_min_version (void)\n       const char *checked = validate_macosx_version_min (new_flag);\n       if (checked == NULL)\n \t{\n-\t  warning (0, \"could not understand version %s\", new_flag);\n+\t  warning (0, \"could not understand version %qs\", new_flag);\n \t  return NULL;\n \t}\n       new_flag = xstrndup (checked, strlen (checked));\n@@ -305,7 +305,7 @@ darwin_driver_init (unsigned int *decoded_options_count,\n \t  else if (!strcmp ((*decoded_options)[i].arg, \"ppc64\"))\n \t    seenPPC64 = true;\n \t  else\n-\t    error (\"this compiler does not support %s\",\n+\t    error (\"this compiler does not support %qs\",\n \t\t   (*decoded_options)[i].arg);\n \t  /* Now we've examined it, drop the -arch arg.  */\n \t  if (*decoded_options_count > i) {\n@@ -377,45 +377,53 @@ darwin_driver_init (unsigned int *decoded_options_count,\n   /* Turn -arch xxxx into the appropriate -m32/-m64 flag.\n      If the User tried to specify multiple arch flags (which is possible with\n      some Darwin compilers) warn that this mode is not supported by this\n-     compiler (and ignore the arch flags, which means that the default multi-\n-     lib will be generated).  */\n+     compiler.  We take arch specifiers that agree with the default multilib\n+     as the first choice and reject others.  */\n   /* TODO: determine if these warnings would better be errors.  */\n #if DARWIN_X86\n   if (seenPPC || seenPPC64)\n-    warning (0, \"this compiler does not support PowerPC (arch flags ignored)\");\n+    warning (0, \"this compiler does not support PowerPC\"\n+\t\t\" (%<-arch%> option ignored)\");\n   if (seenX86)\n     {\n       if (seenX86_64 || seenM64)\n-\twarning (0, \"%s conflicts with i386 (arch flags ignored)\",\n-\t        (seenX86_64? \"x86_64\": \"m64\"));\n-      else if (! seenM32) /* Add -m32 if the User didn't. */\n+\t{\n+\t  const char *op = (seenX86_64? \"-arch x86_64\": \"-m64\");\n+\t  warning (0, \"%qs conflicts with %<-arch i386%> (%qs ignored)\",\n+\t\t   op, op);\n+\t}\n+      if (! seenM32) /* Add -m32 if the User didn't. */\n \tappendM32 = true;\n     }\n   else if (seenX86_64)\n     {\n-      if (seenX86 || seenM32)\n-\twarning (0, \"%s conflicts with x86_64 (arch flags ignored)\",\n-\t\t (seenX86? \"i386\": \"m32\"));\n-      else if (! seenM64) /* Add -m64 if the User didn't. */\n+      if (seenM32)\n+\twarning (0, \"%<-m32%> conflicts with %<-arch x86_64%>\"\n+\t\t    \" (%<-m32%> ignored)\");\n+      if (! seenM64) /* Add -m64 if the User didn't. */\n \tappendM64 = true;\n     }  \n #elif DARWIN_PPC\n   if (seenX86 || seenX86_64)\n-    warning (0, \"this compiler does not support X86 (arch flags ignored)\");\n+    warning (0, \"this compiler does not support x86\"\n+\t\t\" (%<-arch%> option ignored)\");\n   if (seenPPC)\n     {\n       if (seenPPC64 || seenM64)\n-\twarning (0, \"%s conflicts with ppc (arch flags ignored)\",\n-\t\t (seenPPC64? \"ppc64\": \"m64\"));\n-      else if (! seenM32) /* Add -m32 if the User didn't. */\n+\t{\n+\t  const char *op = (seenPPC64? \"-arch ppc64\": \"-m64\");\n+\t  warning (0, \"%qs conflicts with %<-arch ppc%> (%qs ignored)\",\n+\t\t   op, op);\n+\t}\n+      if (! seenM32) /* Add -m32 if the User didn't. */\n \tappendM32 = true;\n     }\n   else if (seenPPC64)\n     {\n-      if (seenPPC || seenM32)\n-\twarning (0, \"%s conflicts with ppc64 (arch flags ignored)\",\n-\t\t (seenPPC? \"ppc\": \"m32\"));\n-      else if (! seenM64) /* Add -m64 if the User didn't. */\n+      if (seenM32)\n+\twarning (0, \"%<-m32%> conflicts with %<-arch ppc64%>\"\n+\t\t    \" (%<-m32%> ignored)\");\n+      if (! seenM64) /* Add -m64 if the User didn't. */\n \tappendM64 = true;\n     }\n #endif"}]}