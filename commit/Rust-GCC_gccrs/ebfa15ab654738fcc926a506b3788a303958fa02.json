{"sha": "ebfa15ab654738fcc926a506b3788a303958fa02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJmYTE1YWI2NTQ3MzhmY2M5MjZhNTA2YjM3ODhhMzAzOTU4ZmEwMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-08-26T12:33:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-08-26T12:33:43Z"}, "message": "re PR tree-optimization/69047 (memcpy is not as optimized as union is)\n\n2016-08-26  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/69047\n\t* tree-ssa.c (maybe_rewrite_mem_ref_base): Handle general bitfield\n\textracts similar to what FRE does.\n\t(non_rewritable_mem_ref_base): Likewise.\n\n\t* gcc.dg/pr69047.c: New testcase.\n\nFrom-SVN: r239778", "tree": {"sha": "36a9fb525064b262301c1f5214a7264dd4b939f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36a9fb525064b262301c1f5214a7264dd4b939f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebfa15ab654738fcc926a506b3788a303958fa02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebfa15ab654738fcc926a506b3788a303958fa02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebfa15ab654738fcc926a506b3788a303958fa02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebfa15ab654738fcc926a506b3788a303958fa02/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "52066eae5d3dd6b7c0a1b843469582dbdbb941eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52066eae5d3dd6b7c0a1b843469582dbdbb941eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52066eae5d3dd6b7c0a1b843469582dbdbb941eb"}], "stats": {"total": 88, "additions": 80, "deletions": 8}, "files": [{"sha": "408b7150064680bc74f43828e5dce76f6c8e0bcb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfa15ab654738fcc926a506b3788a303958fa02/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfa15ab654738fcc926a506b3788a303958fa02/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ebfa15ab654738fcc926a506b3788a303958fa02", "patch": "@@ -1,3 +1,10 @@\n+2016-08-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/69047\n+\t* tree-ssa.c (maybe_rewrite_mem_ref_base): Handle general bitfield\n+\textracts similar to what FRE does.\n+\t(non_rewritable_mem_ref_base): Likewise.\n+\n 2016-08-26  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/i386/i386.c (ix86_libgcc_floating_mode_supported_p)"}, {"sha": "86ef6a08197141944c410dfa3d728f0009fff3eb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfa15ab654738fcc926a506b3788a303958fa02/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfa15ab654738fcc926a506b3788a303958fa02/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ebfa15ab654738fcc926a506b3788a303958fa02", "patch": "@@ -1,3 +1,8 @@\n+2016-08-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/69047\n+\t* gcc.dg/pr69047.c: New testcase.\n+\n 2016-08-26  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \t    Martin Jambhor  <mjambor@suse.cz>\n \t"}, {"sha": "0227df231d87024e81e0809131f233d2fafff687", "filename": "gcc/testsuite/gcc.dg/pr69047.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfa15ab654738fcc926a506b3788a303958fa02/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69047.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfa15ab654738fcc926a506b3788a303958fa02/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69047.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69047.c?ref=ebfa15ab654738fcc926a506b3788a303958fa02", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-cddce1\" } */\n+\n+__UINT8_TYPE__\n+f(__UINT16_TYPE__ b)\n+{\n+  __UINT8_TYPE__ a;\n+#if __BYTE_ORDER == __LITTLE_ENDIAN\n+  __builtin_memcpy(&a, &b, sizeof a);\n+#elif __BYTE_ORDER == __BIG_ENDIAN\n+  __builtin_memcpy(&a, (char *)&b + sizeof a, sizeof a);\n+#else\n+  a = b;\n+#endif\n+  return a;\n+}\n+\n+/* { dg-final { scan-tree-dump \"_\\[0-9\\]+ = \\\\(\\[^)\\]+\\\\) b\" \"cddce1\" } } */"}, {"sha": "aae383d51083e484145bdd9492c3b182214a8eb1", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 50, "deletions": 8, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfa15ab654738fcc926a506b3788a303958fa02/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfa15ab654738fcc926a506b3788a303958fa02/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=ebfa15ab654738fcc926a506b3788a303958fa02", "patch": "@@ -1292,7 +1292,9 @@ maybe_rewrite_mem_ref_base (tree *tp, bitmap suitable_for_renaming)\n       && (sym = TREE_OPERAND (TREE_OPERAND (*tp, 0), 0))\n       && DECL_P (sym)\n       && !TREE_ADDRESSABLE (sym)\n-      && bitmap_bit_p (suitable_for_renaming, DECL_UID (sym)))\n+      && bitmap_bit_p (suitable_for_renaming, DECL_UID (sym))\n+      && is_gimple_reg_type (TREE_TYPE (*tp))\n+      && ! VOID_TYPE_P (TREE_TYPE (*tp)))\n     {\n       if (TREE_CODE (TREE_TYPE (sym)) == VECTOR_TYPE\n \t  && useless_type_conversion_p (TREE_TYPE (*tp),\n@@ -1314,7 +1316,8 @@ maybe_rewrite_mem_ref_base (tree *tp, bitmap suitable_for_renaming)\n \t\t\t? REALPART_EXPR : IMAGPART_EXPR,\n \t\t\tTREE_TYPE (*tp), sym);\n \t}\n-      else if (integer_zerop (TREE_OPERAND (*tp, 1)))\n+      else if (integer_zerop (TREE_OPERAND (*tp, 1))\n+\t       && DECL_SIZE (sym) == TYPE_SIZE (TREE_TYPE (*tp)))\n \t{\n \t  if (!useless_type_conversion_p (TREE_TYPE (*tp),\n \t\t\t\t\t  TREE_TYPE (sym)))\n@@ -1323,6 +1326,24 @@ maybe_rewrite_mem_ref_base (tree *tp, bitmap suitable_for_renaming)\n \t  else\n \t    *tp = sym;\n \t}\n+      else if (DECL_SIZE (sym)\n+\t       && TREE_CODE (DECL_SIZE (sym)) == INTEGER_CST\n+\t       && mem_ref_offset (*tp) >= 0\n+\t       && wi::leu_p (mem_ref_offset (*tp)\n+\t\t\t     + wi::to_offset (TYPE_SIZE_UNIT (TREE_TYPE (*tp))),\n+\t\t\t     wi::to_offset (DECL_SIZE_UNIT (sym)))\n+\t       && (! INTEGRAL_TYPE_P (TREE_TYPE (*tp)) \n+\t\t   || (wi::to_offset (TYPE_SIZE (TREE_TYPE (*tp)))\n+\t\t       == TYPE_PRECISION (TREE_TYPE (*tp))))\n+\t       && wi::umod_trunc (wi::to_offset (TYPE_SIZE (TREE_TYPE (*tp))),\n+\t\t\t\t  BITS_PER_UNIT) == 0)\n+\t{\n+\t  *tp = build3 (BIT_FIELD_REF, TREE_TYPE (*tp), sym,\n+\t\t\tTYPE_SIZE (TREE_TYPE (*tp)),\n+\t\t\twide_int_to_tree (bitsizetype,\n+\t\t\t\t\t  mem_ref_offset (*tp)\n+\t\t\t\t\t  << LOG2_BITS_PER_UNIT));\n+\t}\n     }\n }\n \n@@ -1352,6 +1373,11 @@ non_rewritable_mem_ref_base (tree ref)\n       && TREE_CODE (TREE_OPERAND (base, 0)) == ADDR_EXPR)\n     {\n       tree decl = TREE_OPERAND (TREE_OPERAND (base, 0), 0);\n+      if (! DECL_P (decl))\n+\treturn NULL_TREE;\n+      if (! is_gimple_reg_type (TREE_TYPE (base))\n+\t  || VOID_TYPE_P (TREE_TYPE (base)))\n+\treturn decl;\n       if ((TREE_CODE (TREE_TYPE (decl)) == VECTOR_TYPE\n \t   || TREE_CODE (TREE_TYPE (decl)) == COMPLEX_TYPE)\n \t  && useless_type_conversion_p (TREE_TYPE (base),\n@@ -1362,12 +1388,28 @@ non_rewritable_mem_ref_base (tree ref)\n \t  && multiple_of_p (sizetype, TREE_OPERAND (base, 1),\n \t\t\t    TYPE_SIZE_UNIT (TREE_TYPE (base))))\n \treturn NULL_TREE;\n-      if (DECL_P (decl)\n-\t  && (!integer_zerop (TREE_OPERAND (base, 1))\n-\t      || (DECL_SIZE (decl)\n-\t\t  != TYPE_SIZE (TREE_TYPE (base)))\n-\t      || TREE_THIS_VOLATILE (decl) != TREE_THIS_VOLATILE (base)))\n-\treturn decl;\n+      /* For same sizes and zero offset we can use a VIEW_CONVERT_EXPR.  */\n+      if (integer_zerop (TREE_OPERAND (base, 1))\n+\t  && DECL_SIZE (decl) == TYPE_SIZE (TREE_TYPE (base)))\n+\treturn NULL_TREE;\n+      /* For integral typed extracts we can use a BIT_FIELD_REF.  */\n+      if (DECL_SIZE (decl)\n+\t  && TREE_CODE (DECL_SIZE (decl)) == INTEGER_CST\n+\t  && mem_ref_offset (base) >= 0\n+\t  && wi::leu_p (mem_ref_offset (base)\n+\t\t\t+ wi::to_offset (TYPE_SIZE_UNIT (TREE_TYPE (base))),\n+\t\t\twi::to_offset (DECL_SIZE_UNIT (decl)))\n+\t  /* ???  We can't handle bitfield precision extracts without\n+\t     either using an alternate type for the BIT_FIELD_REF and\n+\t     then doing a conversion or possibly adjusting the offset\n+\t     according to endianess.  */\n+\t  && (! INTEGRAL_TYPE_P (TREE_TYPE (base))\n+\t      || (wi::to_offset (TYPE_SIZE (TREE_TYPE (base)))\n+\t\t  == TYPE_PRECISION (TREE_TYPE (base))))\n+\t  && wi::umod_trunc (wi::to_offset (TYPE_SIZE (TREE_TYPE (base))),\n+\t\t\t     BITS_PER_UNIT) == 0)\n+\treturn NULL_TREE;\n+      return decl;\n     }\n \n   return NULL_TREE;"}]}