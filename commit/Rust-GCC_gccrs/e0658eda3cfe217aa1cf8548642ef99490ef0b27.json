{"sha": "e0658eda3cfe217aa1cf8548642ef99490ef0b27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA2NThlZGEzY2ZlMjE3YWExY2Y4NTQ4NjQyZWY5OTQ5MGVmMGIyNw==", "commit": {"author": {"name": "Tero Koskinen", "email": "tero.koskinen@iki.fi", "date": "2008-01-03T09:35:04Z"}, "committer": {"name": "Samuel Tardieu", "email": "sam@gcc.gnu.org", "date": "2008-01-03T09:35:04Z"}, "message": "re PR ada/34647 (Ada runtime includes unsafe calls to mktemp and tmpname on OpenBSD)\n\n2008-01-03  Tero Koskinen <tero.koskinen@iki.fi>\n\n    gcc/ada/\n\tPR ada/34647\n\t* adaint.c (__gnat_open_new_temp, __gnat_tmp_name): Use mkstemp()\n\ton OpenBSD as is done on other BSD systems.\n\n\tPR ada/34645\n\t* sysdep.c (__gnat_ttyname, getc_immediate_nowait,\n\tgetc_immediate_common): Treat OpenBSD as FreeBSD regarding immediate\n\tI/O.\n\n\tPR ada/34644\n\t* env.c (__gnat_clearenv): Treat OpenBSD as other BSD systems missing\n\tclearenv().\n\n\tPR ada/34646\n\t* init.c (__gnat_error_handler, __gnat_install_handler,\n\t__gnat_init_float): Define for OpenBSD.\n\n\t* initialize.c (__gnat_initialize): Define for OpenBSD.\n\nFrom-SVN: r131301", "tree": {"sha": "ea49403f80c5d0fc80e878e9940c64c8c3c9d476", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea49403f80c5d0fc80e878e9940c64c8c3c9d476"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0658eda3cfe217aa1cf8548642ef99490ef0b27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0658eda3cfe217aa1cf8548642ef99490ef0b27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0658eda3cfe217aa1cf8548642ef99490ef0b27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0658eda3cfe217aa1cf8548642ef99490ef0b27/comments", "author": {"login": "tkoskine", "id": 35273, "node_id": "MDQ6VXNlcjM1Mjcz", "avatar_url": "https://avatars.githubusercontent.com/u/35273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tkoskine", "html_url": "https://github.com/tkoskine", "followers_url": "https://api.github.com/users/tkoskine/followers", "following_url": "https://api.github.com/users/tkoskine/following{/other_user}", "gists_url": "https://api.github.com/users/tkoskine/gists{/gist_id}", "starred_url": "https://api.github.com/users/tkoskine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tkoskine/subscriptions", "organizations_url": "https://api.github.com/users/tkoskine/orgs", "repos_url": "https://api.github.com/users/tkoskine/repos", "events_url": "https://api.github.com/users/tkoskine/events{/privacy}", "received_events_url": "https://api.github.com/users/tkoskine/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2092ee7d08be8897d85309fbffc395602e67a3fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2092ee7d08be8897d85309fbffc395602e67a3fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2092ee7d08be8897d85309fbffc395602e67a3fd"}], "stats": {"total": 105, "additions": 96, "deletions": 9}, "files": [{"sha": "6537c951fb14e675e5fae3ff566a420966a2c6aa", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0658eda3cfe217aa1cf8548642ef99490ef0b27/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0658eda3cfe217aa1cf8548642ef99490ef0b27/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e0658eda3cfe217aa1cf8548642ef99490ef0b27", "patch": "@@ -1,3 +1,24 @@\n+2008-01-03  Tero Koskinen <tero.koskinen@iki.fi>\n+\n+\tPR ada/34647\n+\t* adaint.c (__gnat_open_new_temp, __gnat_tmp_name): Use mkstemp()\n+\ton OpenBSD as is done on other BSD systems.\n+\n+\tPR ada/34645\n+\t* sysdep.c (__gnat_ttyname, getc_immediate_nowait,\n+\tgetc_immediate_common): Treat OpenBSD as FreeBSD regarding immediate\n+\tI/O.\n+\n+\tPR ada/34644\n+\t* env.c (__gnat_clearenv): Treat OpenBSD as other BSD systems missing\n+\tclearenv().\n+\n+\tPR ada/34646\n+\t* init.c (__gnat_error_handler, __gnat_install_handler,\n+\t__gnat_init_float): Define for OpenBSD.\n+\n+\t* initialize.c (__gnat_initialize): Define for OpenBSD.\n+\n 2007-12-27  Samuel Tardieu  <sam@rfc1149.net>\n \n \tPR ada/34553"}, {"sha": "3bc20eb672efd7fd4537827a100d370c253760fa", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0658eda3cfe217aa1cf8548642ef99490ef0b27/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0658eda3cfe217aa1cf8548642ef99490ef0b27/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=e0658eda3cfe217aa1cf8548642ef99490ef0b27", "patch": "@@ -887,8 +887,8 @@ __gnat_open_new_temp (char *path, int fmode)\n \n   strcpy (path, \"GNAT-XXXXXX\");\n \n-#if (defined (__FreeBSD__) || defined (__NetBSD__) || defined (linux)) && \\\n-  !defined (__vxworks)\n+#if (defined (__FreeBSD__) || defined (__NetBSD__) || defined (__OpenBSD__) \\\n+  || defined (linux)) && !defined (__vxworks)\n   return mkstemp (path);\n #elif defined (__Lynx__)\n   mktemp (path);\n@@ -980,7 +980,8 @@ __gnat_tmp_name (char *tmp_filename)\n     free (pname);\n   }\n \n-#elif defined (linux) || defined (__FreeBSD__) || defined (__NetBSD__)\n+#elif defined (linux) || defined (__FreeBSD__) || defined (__NetBSD__) \\\n+  || defined (__OpenBSD__)\n #define MAX_SAFE_PATH 1000\n   char *tmpdir = getenv (\"TMPDIR\");\n "}, {"sha": "46bfe1b0c4e83f330dcd53e2a6229a7bcca54cfb", "filename": "gcc/ada/env.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0658eda3cfe217aa1cf8548642ef99490ef0b27/gcc%2Fada%2Fenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0658eda3cfe217aa1cf8548642ef99490ef0b27/gcc%2Fada%2Fenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fenv.c?ref=e0658eda3cfe217aa1cf8548642ef99490ef0b27", "patch": "@@ -290,7 +290,7 @@ void __gnat_clearenv (void) {\n   }\n #elif defined (__MINGW32__) || defined (__FreeBSD__) || defined (__APPLE__) \\\n    || (defined (__vxworks) && defined (__RTP__)) || defined (__CYGWIN__) \\\n-   || defined (__NetBSD__)\n+   || defined (__NetBSD__) || defined (__OpenBSD__)\n   /* On Windows, FreeBSD and MacOS there is no function to clean all the\n      environment but there is a \"clean\" way to unset a variable. So go\n      through the environ table and call __gnat_unsetenv on all entries */"}, {"sha": "caf3adc98d7aeeea15a5ca7b3a1a0a05c58af070", "filename": "gcc/ada/init.c", "status": "modified", "additions": 65, "deletions": 1, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0658eda3cfe217aa1cf8548642ef99490ef0b27/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0658eda3cfe217aa1cf8548642ef99490ef0b27/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=e0658eda3cfe217aa1cf8548642ef99490ef0b27", "patch": "@@ -1902,6 +1902,69 @@ __gnat_install_handler(void)\n   __gnat_handler_installed = 1;\n }\n \n+/*******************/\n+/* OpenBSD Section */\n+/*******************/\n+\n+#elif defined(__OpenBSD__)\n+\n+#include <signal.h>\n+#include <unistd.h>\n+\n+static void\n+__gnat_error_handler (int sig)\n+{\n+  struct Exception_Data *exception;\n+  const char *msg;\n+\n+  switch(sig)\n+  {\n+    case SIGFPE:\n+      exception = &constraint_error;\n+      msg = \"SIGFPE\";\n+      break;\n+    case SIGILL:\n+      exception = &constraint_error;\n+      msg = \"SIGILL\";\n+      break;\n+    case SIGSEGV:\n+      exception = &storage_error;\n+      msg = \"stack overflow or erroneous memory access\";\n+      break;\n+    case SIGBUS:\n+      exception = &constraint_error;\n+      msg = \"SIGBUS\";\n+      break;\n+    default:\n+      exception = &program_error;\n+      msg = \"unhandled signal\";\n+    }\n+\n+    Raise_From_Signal_Handler(exception, msg);\n+}\n+\n+void\n+__gnat_install_handler(void)\n+{\n+  struct sigaction act;\n+\n+  act.sa_handler = __gnat_error_handler;\n+  act.sa_flags = SA_NODEFER | SA_RESTART;\n+  sigemptyset (&act.sa_mask);\n+\n+  /* Do not install handlers if interrupt state is \"System\" */\n+  if (__gnat_get_interrupt_state (SIGFPE) != 's')\n+    sigaction (SIGFPE,  &act, NULL);\n+  if (__gnat_get_interrupt_state (SIGILL) != 's')\n+    sigaction (SIGILL,  &act, NULL);\n+  if (__gnat_get_interrupt_state (SIGSEGV) != 's')\n+    sigaction (SIGSEGV, &act, NULL);\n+  if (__gnat_get_interrupt_state (SIGBUS) != 's')\n+    sigaction (SIGBUS,  &act, NULL);\n+\n+  __gnat_handler_installed = 1;\n+}\n+\n #else\n \n /* For all other versions of GNAT, the handler does nothing */\n@@ -1927,7 +1990,8 @@ __gnat_install_handler (void)\n    WIN32 and could be used under OS/2 */\n \n #if defined (_WIN32) || defined (__INTERIX) || defined (__EMX__) \\\n-  || defined (__Lynx__) || defined(__NetBSD__) || defined(__FreeBSD__)\n+  || defined (__Lynx__) || defined(__NetBSD__) || defined(__FreeBSD__) \\\n+  || defined (__OpenBSD__)\n \n #define HAVE_GNAT_INIT_FLOAT\n "}, {"sha": "a84f7535dc134dad8d09dac51017cae0258e52e5", "filename": "gcc/ada/initialize.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0658eda3cfe217aa1cf8548642ef99490ef0b27/gcc%2Fada%2Finitialize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0658eda3cfe217aa1cf8548642ef99490ef0b27/gcc%2Fada%2Finitialize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finitialize.c?ref=e0658eda3cfe217aa1cf8548642ef99490ef0b27", "patch": "@@ -98,7 +98,8 @@ __gnat_initialize (void *eh)\n /* __gnat_initialize (init_float version) */\n /******************************************/\n \n-#elif defined (__Lynx__) || defined (__FreeBSD__) || defined(__NetBSD__)\n+#elif defined (__Lynx__) || defined (__FreeBSD__) || defined(__NetBSD__) \\\n+  || defined (__OpenBSD__)\n \n extern void __gnat_init_float (void);\n "}, {"sha": "cf51ebea76abac752c9b8cee849617e60df2ea14", "filename": "gcc/ada/sysdep.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0658eda3cfe217aa1cf8548642ef99490ef0b27/gcc%2Fada%2Fsysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0658eda3cfe217aa1cf8548642ef99490ef0b27/gcc%2Fada%2Fsysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsysdep.c?ref=e0658eda3cfe217aa1cf8548642ef99490ef0b27", "patch": "@@ -342,7 +342,7 @@ __gnat_ttyname (int filedes)\n   || (defined (__osf__) && ! defined (__alpha_vxworks)) || defined (WINNT) \\\n   || defined (__MACHTEN__) || defined (__hpux__) || defined (_AIX) \\\n   || (defined (__svr4__) && defined (i386)) || defined (__Lynx__) \\\n-  || defined (__CYGWIN__) || defined (__FreeBSD__)\n+  || defined (__CYGWIN__) || defined (__FreeBSD__) || defined (__OpenBSD__)\n \n #ifdef __MINGW32__\n #if OLD_MINGW\n@@ -399,7 +399,7 @@ getc_immediate_common (FILE *stream,\n     || (defined (__osf__) && ! defined (__alpha_vxworks)) \\\n     || defined (__CYGWIN32__) || defined (__MACHTEN__) || defined (__hpux__) \\\n     || defined (_AIX) || (defined (__svr4__) && defined (i386)) \\\n-    || defined (__Lynx__) || defined (__FreeBSD__)\n+    || defined (__Lynx__) || defined (__FreeBSD__) || defined (__OpenBSD__)\n   char c;\n   int nread;\n   int good_one = 0;\n@@ -418,7 +418,7 @@ getc_immediate_common (FILE *stream,\n #if defined(linux) || defined (sun) || defined (sgi) || defined (__EMX__) \\\n     || defined (__osf__) || defined (__MACHTEN__) || defined (__hpux__) \\\n     || defined (_AIX) || (defined (__svr4__) && defined (i386)) \\\n-    || defined (__Lynx__) || defined (__FreeBSD__)\n+    || defined (__Lynx__) || defined (__FreeBSD__) || defined (__OpenBSD__)\n       eof_ch = termios_rec.c_cc[VEOF];\n \n       /* If waiting (i.e. Get_Immediate (Char)), set MIN = 1 and wait for"}]}