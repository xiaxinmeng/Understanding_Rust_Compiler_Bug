{"sha": "03f0fa9538a68a9e192a7e157b333b54eb72d5c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNmMGZhOTUzOGE2OGE5ZTE5MmE3ZTE1N2IzMzNiNTRlYjcyZDVjOA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-12-28T21:10:33Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-12-28T21:10:33Z"}, "message": "compiler: remove escapes_ field from Variable and Result_variable\n    \n    The fields were set to true initially and never set to false.\n    These were left over from an earlier attempt at escape analysis.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/155750\n\nFrom-SVN: r267455", "tree": {"sha": "6446f7d0eab8fb74381d97f3fb560a759e75fa9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6446f7d0eab8fb74381d97f3fb560a759e75fa9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03f0fa9538a68a9e192a7e157b333b54eb72d5c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03f0fa9538a68a9e192a7e157b333b54eb72d5c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03f0fa9538a68a9e192a7e157b333b54eb72d5c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03f0fa9538a68a9e192a7e157b333b54eb72d5c8/comments", "author": null, "committer": null, "parents": [{"sha": "3a03bffd4873ae4efa21c360cc6d147fee7365a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a03bffd4873ae4efa21c360cc6d147fee7365a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a03bffd4873ae4efa21c360cc6d147fee7365a7"}], "stats": {"total": 66, "additions": 10, "deletions": 56}, "files": [{"sha": "2552025d9de3292de41e90f3b33c8b60f8163627", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f0fa9538a68a9e192a7e157b333b54eb72d5c8/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f0fa9538a68a9e192a7e157b333b54eb72d5c8/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=03f0fa9538a68a9e192a7e157b333b54eb72d5c8", "patch": "@@ -1,4 +1,4 @@\n-416baf55e4890acab244470f6457372987a17a68\n+d9a30434440469c640a120fe7132057f5644d38c\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "ef8a917c290c757ed3c9a2b97f8d8fd653021642", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f0fa9538a68a9e192a7e157b333b54eb72d5c8/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f0fa9538a68a9e192a7e157b333b54eb72d5c8/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=03f0fa9538a68a9e192a7e157b333b54eb72d5c8", "patch": "@@ -3936,24 +3936,12 @@ Unary_expression::check_operand_address_taken(Gogo*)\n   // If this->escapes_ is false at this point, then it was set to\n   // false by an explicit call to set_does_not_escape, and the value\n   // does not escape.  If this->escapes_ is true, we may be able to\n-  // set it to false if taking the address of a variable that does not\n-  // escape.\n-  Node* n = Node::make_node(this);\n-  if ((n->encoding() & ESCAPE_MASK) == int(Node::ESCAPE_NONE))\n-    this->escapes_ = false;\n-\n-  Named_object* var = NULL;\n-  if (this->expr_->var_expression() != NULL)\n-    var = this->expr_->var_expression()->named_object();\n-  else if (this->expr_->enclosed_var_expression() != NULL)\n-    var = this->expr_->enclosed_var_expression()->variable();\n-\n-  if (this->escapes_ && var != NULL)\n+  // set it to false based on the escape analysis pass.\n+  if (this->escapes_)\n     {\n-      if (var->is_variable())\n-\tthis->escapes_ = var->var_value()->escapes();\n-      if (var->is_result_variable())\n-\tthis->escapes_ = var->result_var_value()->escapes();\n+      Node* n = Node::make_node(this);\n+      if ((n->encoding() & ESCAPE_MASK) == int(Node::ESCAPE_NONE))\n+\tthis->escapes_ = false;\n     }\n \n   this->expr_->address_taken(this->escapes_);"}, {"sha": "d0d6f3b3b54bc94fe925ac891d4b12549fb9ba54", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f0fa9538a68a9e192a7e157b333b54eb72d5c8/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f0fa9538a68a9e192a7e157b333b54eb72d5c8/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=03f0fa9538a68a9e192a7e157b333b54eb72d5c8", "patch": "@@ -6939,8 +6939,7 @@ Variable::Variable(Type* type, Expression* init, bool is_global,\n     type_from_init_tuple_(false), type_from_range_index_(false),\n     type_from_range_value_(false), type_from_chan_element_(false),\n     is_type_switch_var_(false), determined_type_(false),\n-    in_unique_section_(false), escapes_(true),\n-    toplevel_decl_(NULL)\n+    in_unique_section_(false), toplevel_decl_(NULL)\n {\n   go_assert(type != NULL || init != NULL);\n   go_assert(!is_parameter || init == NULL);"}, {"sha": "be6048f98a46a6247b37fd326a3a6451eab34d84", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 3, "deletions": 36, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f0fa9538a68a9e192a7e157b333b54eb72d5c8/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f0fa9538a68a9e192a7e157b333b54eb72d5c8/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=03f0fa9538a68a9e192a7e157b333b54eb72d5c8", "patch": "@@ -1863,11 +1863,7 @@ class Variable\n   // Whether this variable should live in the heap.\n   bool\n   is_in_heap() const\n-  {\n-    return this->is_address_taken_\n-      && this->escapes_\n-      && !this->is_global_;\n-  }\n+  { return this->is_address_taken_ && !this->is_global_; }\n \n   // Note that something takes the address of this variable.\n   void\n@@ -1885,16 +1881,6 @@ class Variable\n   set_non_escaping_address_taken()\n   { this->is_non_escaping_address_taken_ = true; }\n \n-  // Return whether this variable escapes the function it is declared in.\n-  bool\n-  escapes()\n-  { return this->escapes_; }\n-\n-  // Note that this variable does not escape the function it is declared in.\n-  void\n-  set_does_not_escape()\n-  { this->escapes_ = false; }\n-\n   // Get the source location of the variable's declaration.\n   Location\n   location() const\n@@ -2117,9 +2103,6 @@ class Variable\n   // True if this variable should be put in a unique section.  This is\n   // used for field tracking.\n   bool in_unique_section_ : 1;\n-  // Whether this variable escapes the function it is created in.  This is\n-  // true until shown otherwise.\n-  bool escapes_ : 1;\n   // The top-level declaration for this variable. Only used for local\n   // variables. Must be a Temporary_statement if not NULL.\n   Statement* toplevel_decl_;\n@@ -2135,7 +2118,7 @@ class Result_variable\n \t\t  Location location)\n     : type_(type), function_(function), index_(index), location_(location),\n       backend_(NULL), is_address_taken_(false),\n-      is_non_escaping_address_taken_(false), escapes_(true)\n+      is_non_escaping_address_taken_(false)\n   { }\n \n   // Get the type of the result variable.\n@@ -2179,23 +2162,10 @@ class Result_variable\n   set_non_escaping_address_taken()\n   { this->is_non_escaping_address_taken_ = true; }\n \n-  // Return whether this variable escapes the function it is declared in.\n-  bool\n-  escapes()\n-  { return this->escapes_; }\n-\n-  // Note that this variable does not escape the function it is declared in.\n-  void\n-  set_does_not_escape()\n-  { this->escapes_ = false; }\n-\n   // Whether this variable should live in the heap.\n   bool\n   is_in_heap() const\n-  {\n-    return this->is_address_taken_\n-      && this->escapes_;\n-  }\n+  { return this->is_address_taken_; }\n \n   // Set the function.  This is used when cloning functions which call\n   // recover.\n@@ -2223,9 +2193,6 @@ class Result_variable\n   // Whether something takes the address of this variable such that\n   // the address does not escape the function.\n   bool is_non_escaping_address_taken_;\n-  // Whether this variable escapes the function it is created in.  This is\n-  // true until shown otherwise.\n-  bool escapes_;\n };\n \n // The value we keep for a named constant.  This lets us hold a type"}]}