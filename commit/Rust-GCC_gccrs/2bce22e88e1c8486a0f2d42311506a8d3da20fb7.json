{"sha": "2bce22e88e1c8486a0f2d42311506a8d3da20fb7", "node_id": "C_kwDOANBUbNoAKDJiY2UyMmU4OGUxYzg0ODZhMGYyZDQyMzExNTA2YThkM2RhMjBmYjc", "commit": {"author": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2022-12-07T19:44:28Z"}, "committer": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2022-12-14T18:20:52Z"}, "message": "btf: add 'extern' linkage for variables [PR106773]\n\nAdd support for the 'extern' linkage value for BTF_KIND_VAR records,\nwhich is used for variables declared as extern in the source file.\n\nThis also fixes a bug with BTF generation for extern variables which\nhave both a non-defining declaration and a defining declaration in the\nsame CU.\n\n\tPR target/106773\n\ngcc/\n\n\t* btfout.cc (btf_collect_datasec): Mark extern variables as such.\n\t(btf_dvd_emit_preprocess_cb): Skip non-defining extern variable decl\n\tif there is a defining decl for the same variable.\n\t(btf_asm_varent): Accomodate 'extern' linkage.\n\ngcc/testsuite/\n\n\t* gcc.dg/debug/btf/btf-variables-4.c: New test.\n\t* gcc.dg/debug/btf/btf-variables-5.c: New test.\n\ninclude/\n\n\t* btf.h (enum btf_var_linkage): New.\n\t(struct btf_var): Update comment to note 'extern' linkage.", "tree": {"sha": "911e7df680b0a6f1ea5ccd4ecfe80cf1ea5a3efa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/911e7df680b0a6f1ea5ccd4ecfe80cf1ea5a3efa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bce22e88e1c8486a0f2d42311506a8d3da20fb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bce22e88e1c8486a0f2d42311506a8d3da20fb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bce22e88e1c8486a0f2d42311506a8d3da20fb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bce22e88e1c8486a0f2d42311506a8d3da20fb7/comments", "author": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e9495303db062cf118869b7526132b5821833e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e9495303db062cf118869b7526132b5821833e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e9495303db062cf118869b7526132b5821833e9"}], "stats": {"total": 65, "additions": 63, "deletions": 2}, "files": [{"sha": "677e8324424c37fd05e1e69b1fa7428008408905", "filename": "gcc/btfout.cc", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bce22e88e1c8486a0f2d42311506a8d3da20fb7/gcc%2Fbtfout.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bce22e88e1c8486a0f2d42311506a8d3da20fb7/gcc%2Fbtfout.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbtfout.cc?ref=2bce22e88e1c8486a0f2d42311506a8d3da20fb7", "patch": "@@ -314,6 +314,9 @@ btf_collect_datasec (ctf_container_ref ctfc)\n \tcontinue;\n \n       const char *section_name = node->get_section ();\n+      /* Mark extern variables.  */\n+      if (DECL_EXTERNAL (node->decl))\n+\tdvd->dvd_visibility = BTF_VAR_GLOBAL_EXTERN;\n \n       if (section_name == NULL)\n \t{\n@@ -431,6 +434,12 @@ btf_dvd_emit_preprocess_cb (ctf_dvdef_ref *slot, ctf_container_ref arg_ctfc)\n {\n   ctf_dvdef_ref var = (ctf_dvdef_ref) * slot;\n \n+  /* If this is an extern variable declaration with a defining declaration\n+     later, skip it so that only the defining declaration is emitted.\n+     This is the same case, fix and reasoning as in CTF; see PR105089.  */\n+  if (ctf_dvd_ignore_lookup (arg_ctfc, var->dvd_key))\n+    return 1;\n+\n   /* Do not add variables which refer to unsupported types.  */\n   if (btf_removed_type_p (var->dvd_type))\n     return 1;\n@@ -676,7 +685,7 @@ btf_asm_varent (ctf_dvdef_ref var)\n   dw2_asm_output_data (4, var->dvd_name_offset, \"btv_name\");\n   dw2_asm_output_data (4, BTF_TYPE_INFO (BTF_KIND_VAR, 0, 0), \"btv_info\");\n   dw2_asm_output_data (4, get_btf_id (var->dvd_type), \"btv_type\");\n-  dw2_asm_output_data (4, (var->dvd_visibility ? 1 : 0), \"btv_linkage\");\n+  dw2_asm_output_data (4, var->dvd_visibility, \"btv_linkage\");\n }\n \n /* Asm'out a member description following a BTF_KIND_STRUCT or"}, {"sha": "d77600bae1ccba320d002cbaec9734d21dec839c", "filename": "gcc/testsuite/gcc.dg/debug/btf/btf-variables-4.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bce22e88e1c8486a0f2d42311506a8d3da20fb7/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fbtf%2Fbtf-variables-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bce22e88e1c8486a0f2d42311506a8d3da20fb7/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fbtf%2Fbtf-variables-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fbtf%2Fbtf-variables-4.c?ref=2bce22e88e1c8486a0f2d42311506a8d3da20fb7", "patch": "@@ -0,0 +1,24 @@\n+/* Test BTF generation for extern variables.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -gbtf -dA\" } */\n+\n+/* Expect 4 variables.  */\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]0xe000000\\[\\t \\]+\\[^\\n\\]*btv_info\" 4 } } */\n+\n+/* 2 extern, 1 global, 1 static.  */\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]0\\[\\t \\]+\\[^\\n\\]*btv_linkage\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]0x1\\[\\t \\]+\\[^\\n\\]*btv_linkage\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]0x2\\[\\t \\]+\\[^\\n\\]*btv_linkage\" 2 } } */\n+\n+extern int a;\n+extern const int b;\n+int c;\n+static const int d = 5;\n+\n+int foo (int x)\n+{\n+  c = a + b + x;\n+\n+  return c + d;\n+}"}, {"sha": "8aae76cacabd7728475d21d17def66df8ba027c7", "filename": "gcc/testsuite/gcc.dg/debug/btf/btf-variables-5.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bce22e88e1c8486a0f2d42311506a8d3da20fb7/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fbtf%2Fbtf-variables-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bce22e88e1c8486a0f2d42311506a8d3da20fb7/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fbtf%2Fbtf-variables-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fbtf%2Fbtf-variables-5.c?ref=2bce22e88e1c8486a0f2d42311506a8d3da20fb7", "patch": "@@ -0,0 +1,19 @@\n+/* Test BTF generation for extern variable with both non-defining and\n+   defining declarations.\n+\n+   In this case, only a single variable record should be emitted,\n+   with 'global' linkage. However two array types will be generated.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -gbtf -dA\" } */\n+\n+/* Expect 1 variable with global (1) linkage.  */\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]0xe000000\\[\\t \\]+\\[^\\n\\]*btv_info\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]0x1\\[\\t \\]+\\[^\\n\\]*btv_linkage\" 1 } } */\n+\n+/* Expect 2 array types, one of which is unsized.  */\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]0x4\\[\\t \\]+\\[^\\n\\]*bta_nelems\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]0\\[\\t \\]+\\[^\\n\\]*bta_nelems\" 1 } } */\n+\n+extern const char FOO[];\n+const char FOO[] = \"foo\";"}, {"sha": "da621353aa1f81e8976068cc65f9c92011028e60", "filename": "include/btf.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bce22e88e1c8486a0f2d42311506a8d3da20fb7/include%2Fbtf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bce22e88e1c8486a0f2d42311506a8d3da20fb7/include%2Fbtf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fbtf.h?ref=2bce22e88e1c8486a0f2d42311506a8d3da20fb7", "patch": "@@ -178,11 +178,20 @@ struct btf_param\n   uint32_t type;\t/* Type of parameter.  */\n };\n \n+/* BTF_KIND_VAR records encode linkage information in a single\n+   trailing struct btf_var.  These are the supported values.  */\n+enum btf_var_linkage\n+{\n+  BTF_VAR_STATIC = 0,\n+  BTF_VAR_GLOBAL_ALLOCATED = 1,\n+  BTF_VAR_GLOBAL_EXTERN = 2,\n+};\n+\n /* BTF_KIND_VAR is followed by a single struct btf_var, which describes\n    information about the variable.  */\n struct btf_var\n {\n-  uint32_t linkage;\t/* Currently only 0=static or 1=global.  */\n+  uint32_t linkage;\t/* 0=static, 1=global, 2=extern.  */\n };\n \n /* BTF_KIND_DATASEC is followed by VLEN struct btf_var_secinfo entries,"}]}