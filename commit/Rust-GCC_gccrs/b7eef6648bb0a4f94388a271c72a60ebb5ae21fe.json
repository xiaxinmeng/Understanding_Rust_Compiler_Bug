{"sha": "b7eef6648bb0a4f94388a271c72a60ebb5ae21fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdlZWY2NjQ4YmIwYTRmOTQzODhhMjcxYzcyYTYwZWJiNWFlMjFmZQ==", "commit": {"author": {"name": "Philip Herron", "email": "phil@nebuloninc.com", "date": "2020-05-13T22:36:59Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T19:11:10Z"}, "message": "This will now compile a void function declaration to gimple\n\n-fdump-tree-gimple should provide output of the skeleton function\n\nAddresses #19", "tree": {"sha": "7a80e03ab6a5721a6b36ba7fad4c902476052e69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a80e03ab6a5721a6b36ba7fad4c902476052e69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7eef6648bb0a4f94388a271c72a60ebb5ae21fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7eef6648bb0a4f94388a271c72a60ebb5ae21fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7eef6648bb0a4f94388a271c72a60ebb5ae21fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7eef6648bb0a4f94388a271c72a60ebb5ae21fe/comments", "author": null, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f37e20a3775d71be2a2c557474c2133b8d27f16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f37e20a3775d71be2a2c557474c2133b8d27f16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f37e20a3775d71be2a2c557474c2133b8d27f16"}], "stats": {"total": 54, "additions": 25, "deletions": 29}, "files": [{"sha": "38217f0a500de2705e4f8650f577ced15ba61440", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 25, "deletions": 29, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7eef6648bb0a4f94388a271c72a60ebb5ae21fe/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7eef6648bb0a4f94388a271c72a60ebb5ae21fe/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=b7eef6648bb0a4f94388a271c72a60ebb5ae21fe", "patch": "@@ -341,17 +341,11 @@ Compilation::visit (AST::Function &function)\n   scope.Push ();\n   printf (\"INSIDE FUNCTION: %s\\n\", function.function_name.c_str ());\n \n-  if (!function.has_function_return_type ())\n-    {\n-      // TODO\n-      // auto fntype = backend->function_type ();\n+  Backend::Btyped_identifier receiver;\n+  std::vector<Backend::Btyped_identifier> parameters;\n+  std::vector<Backend::Btyped_identifier> results;\n \n-      auto mangled_asm_name = \"\"; // TODO\n-      currentFndecl\n-\t= backend->function (backend->void_type (), function.function_name,\n-\t\t\t     mangled_asm_name, 0, function.locus);\n-    }\n-  else\n+  if (function.has_function_return_type ())\n     {\n       translatedType = NULL;\n       function.return_type->accept_vis (*this);\n@@ -360,40 +354,42 @@ Compilation::visit (AST::Function &function)\n \t  rust_error_at (function.locus, \"Unable to compile type\");\n \t  return;\n \t}\n-\n-      auto mangled_asm_name = \"\"; // TODO\n-      currentFndecl = backend->function (translatedType, function.function_name,\n-\t\t\t\t\t mangled_asm_name, 0, function.locus);\n     }\n \n-  std::vector< ::Bvariable *> params;\n   for (auto &param : function.function_params)\n     {\n       printf (\"FUNC PARAM: %s\\n\", param.as_string ().c_str ());\n       // TODO\n     }\n \n-  if (params.size () == 0 && function.function_params.size () > 0)\n+  if (parameters.size () != function.function_params.size ())\n     {\n-      rust_error_at (function.locus, \"Unable to compile parameters\");\n+      rust_error_at (function.locus,\n+\t\t     \"Unable to compile all function parameters\");\n       return;\n     }\n-  else if (params.size () > 0)\n+\n+  auto fntype = backend->function_type (receiver, parameters, results, NULL,\n+\t\t\t\t\tfunction.locus);\n+\n+  auto mangled_asm_name = \"\"; // TODO\n+  auto fndecl = backend->function (fntype, function.function_name,\n+\t\t\t\t   mangled_asm_name, 0, function.locus);\n+\n+  // walk the expression body\n+  std::vector<Bvariable *> vars;\n+  auto code_block\n+    = backend->block (fndecl, NULL, vars, function.locus, Location ());\n+  for (auto &stmt : function.function_body->statements)\n     {\n-      backend->function_set_parameters (currentFndecl, params);\n+      stmt->accept_vis (*this);\n     }\n \n-  /*\n-    // walk the expression body\n-    Bstatement *body;\n-    for (auto &stmt : function.function_body->statements)\n-      {\n-\tstmt->accept_vis (*this);\n-      }\n-\n-      backend->function_set_body (fndecl, body);*/\n+  auto body = backend->block_statement (code_block);\n+  if (!backend->function_set_body (fndecl, body))\n+    rust_error_at (function.locus, \"failed to set body to function\");\n \n-  func_decls.push_back (currentFndecl);\n+  func_decls.push_back (fndecl);\n   currentFndecl = NULL;\n \n   scope.Pop ();"}]}