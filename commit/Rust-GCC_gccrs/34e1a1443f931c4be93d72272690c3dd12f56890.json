{"sha": "34e1a1443f931c4be93d72272690c3dd12f56890", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRlMWExNDQzZjkzMWM0YmU5M2Q3MjI3MjY5MGMzZGQxMmY1Njg5MA==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2010-11-03T15:41:49Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2010-11-03T15:41:49Z"}, "message": "Remove unused tf_no_class_instantiations enum member\n\ngcc/cp/ChangeLog:\n\t* cp-tree.h (enum tsubst_flags)<tf_no_class_instantiations>:\n\tRemove.\n\t* pt.c (tsubst): Remove the use of tf_no_class_instantiations.\n\nFrom-SVN: r166255", "tree": {"sha": "2b63a391664cd8b6e7b63a2589c22b52396cea6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b63a391664cd8b6e7b63a2589c22b52396cea6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34e1a1443f931c4be93d72272690c3dd12f56890", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34e1a1443f931c4be93d72272690c3dd12f56890", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34e1a1443f931c4be93d72272690c3dd12f56890", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34e1a1443f931c4be93d72272690c3dd12f56890/comments", "author": null, "committer": null, "parents": [{"sha": "a76c13bf23a6ccccbcf3abd18f07ab31444a5add", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a76c13bf23a6ccccbcf3abd18f07ab31444a5add", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a76c13bf23a6ccccbcf3abd18f07ab31444a5add"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "cac8a1a9534f5044cdc085f4ae6cafe06592b541", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34e1a1443f931c4be93d72272690c3dd12f56890/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34e1a1443f931c4be93d72272690c3dd12f56890/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=34e1a1443f931c4be93d72272690c3dd12f56890", "patch": "@@ -1,3 +1,9 @@\n+2010-11-02  Dodji Seketeli  <dodji@redhat.com>\n+\n+\t* cp-tree.h (enum tsubst_flags)<tf_no_class_instantiations>:\n+\tRemove.\n+\t* pt.c (tsubst): Remove the use of tf_no_class_instantiations.\n+\n 2010-11-03  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/46277"}, {"sha": "fc4772d7403043c62f12dc5f64b0ad8431b16092", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34e1a1443f931c4be93d72272690c3dd12f56890/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34e1a1443f931c4be93d72272690c3dd12f56890/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=34e1a1443f931c4be93d72272690c3dd12f56890", "patch": "@@ -3960,8 +3960,6 @@ enum tsubst_flags {\n \t\t\t\t    conversion.  */\n   tf_no_access_control = 1 << 7, /* Do not perform access checks, even\n \t\t\t\t    when issuing other errors.   */\n-  /* Do not instantiate classes (used by count_non_default_template_args). */\n-  tf_no_class_instantiations = 1 << 8,\n   /* Convenient substitution flags combinations.  */\n   tf_warning_or_error = tf_warning | tf_error\n };"}, {"sha": "ca2baebee430acdf18eb77f56dedc6f27ad17c53", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34e1a1443f931c4be93d72272690c3dd12f56890/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34e1a1443f931c4be93d72272690c3dd12f56890/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=34e1a1443f931c4be93d72272690c3dd12f56890", "patch": "@@ -10878,8 +10878,7 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t       But, such constructs have already been resolved by this\n \t       point, so here CTX really should have complete type, unless\n \t       it's a partial instantiation.  */\n-\t    if (!(complain & tf_no_class_instantiations))\n-\t      ctx = complete_type (ctx);\n+\t    ctx = complete_type (ctx);\n \t    if (!COMPLETE_TYPE_P (ctx))\n \t      {\n \t\tif (complain & tf_error)"}]}