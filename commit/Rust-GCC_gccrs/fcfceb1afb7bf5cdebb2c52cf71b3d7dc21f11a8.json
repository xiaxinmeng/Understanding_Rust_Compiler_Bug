{"sha": "fcfceb1afb7bf5cdebb2c52cf71b3d7dc21f11a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNmY2ViMWFmYjdiZjVjZGViYjJjNTJjZjcxYjNkN2RjMjFmMTFhOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-10-28T17:47:57Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-10-28T17:47:57Z"}, "message": "Fix filesystem::path for iterators with const value_type\n\n\t* include/experimental/bits/fs_path.h\n\t(path::_S_convert<_Iter>(_Iter, _Iter)): Remove cv-qualifiers from\n\titerator's value_type.\n\t(path::_S_convert<_Iter>(_Iter __first, __null_terminated)): Likewise.\n\tDo not use operation not supported by input iterators.\n\t(path::__is_path_iter_src): Add partial specialization for const\n\tencoded character types.\n\t* testsuite/experimental/filesystem/path/construct/range.cc: Test\n\tconstruction from input iterators with const value types.\n\nFrom-SVN: r241654", "tree": {"sha": "bf189b03e79aee28cb2dda0d3e4961483ad9930d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf189b03e79aee28cb2dda0d3e4961483ad9930d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcfceb1afb7bf5cdebb2c52cf71b3d7dc21f11a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcfceb1afb7bf5cdebb2c52cf71b3d7dc21f11a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcfceb1afb7bf5cdebb2c52cf71b3d7dc21f11a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcfceb1afb7bf5cdebb2c52cf71b3d7dc21f11a8/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52e1b91e7156bff9cfdb553eabb4acfb64ecaec6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52e1b91e7156bff9cfdb553eabb4acfb64ecaec6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52e1b91e7156bff9cfdb553eabb4acfb64ecaec6"}], "stats": {"total": 70, "additions": 65, "deletions": 5}, "files": [{"sha": "37f745547fb14d90dbd073e1f4daaa8f0f42e7bf", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcfceb1afb7bf5cdebb2c52cf71b3d7dc21f11a8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcfceb1afb7bf5cdebb2c52cf71b3d7dc21f11a8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fcfceb1afb7bf5cdebb2c52cf71b3d7dc21f11a8", "patch": "@@ -1,5 +1,15 @@\n 2016-10-28  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/experimental/bits/fs_path.h\n+\t(path::_S_convert<_Iter>(_Iter, _Iter)): Remove cv-qualifiers from\n+\titerator's value_type.\n+\t(path::_S_convert<_Iter>(_Iter __first, __null_terminated)): Likewise.\n+\tDo not use operation not supported by input iterators.\n+\t(path::__is_path_iter_src): Add partial specialization for const\n+\tencoded character types.\n+\t* testsuite/experimental/filesystem/path/construct/range.cc: Test\n+\tconstruction from input iterators with const value types.\n+\n \t* doc/xml/manual/status_cxx2017.xml: Update status.\n \t* doc/html/*: Regenerate.\n \t* include/std/type_traits (has_unique_object_representations): Guard"}, {"sha": "f6a290d5f472ecd1c9cf8cc6c06aa8c0c05a88c9", "filename": "libstdc++-v3/include/experimental/bits/fs_path.h", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcfceb1afb7bf5cdebb2c52cf71b3d7dc21f11a8/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcfceb1afb7bf5cdebb2c52cf71b3d7dc21f11a8/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h?ref=fcfceb1afb7bf5cdebb2c52cf71b3d7dc21f11a8", "patch": "@@ -385,18 +385,18 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       _S_convert(_Iter __first, _Iter __last)\n       {\n \tusing __value_type = typename std::iterator_traits<_Iter>::value_type;\n-\treturn _Cvt<__value_type>::_S_convert(__first, __last);\n+\treturn _Cvt<remove_cv_t<__value_type>>::_S_convert(__first, __last);\n       }\n \n     template<typename _InputIterator>\n       static string_type\n       _S_convert(_InputIterator __src, __null_terminated)\n       {\n \tusing _Tp = typename std::iterator_traits<_InputIterator>::value_type;\n-\tstd::basic_string<_Tp> __tmp;\n-\twhile (*__src != _Tp{})\n-\t  __tmp.push_back(*__src++);\n-\treturn _S_convert(__tmp.data(), __tmp.data() + __tmp.size());\n+\tstd::basic_string<remove_cv_t<_Tp>> __tmp;\n+\tfor (; *__src != _Tp{}; ++__src)\n+\t  __tmp.push_back(*__src);\n+\treturn _S_convert(__tmp.c_str(), __tmp.c_str() + __tmp.size());\n       }\n \n     static string_type\n@@ -571,6 +571,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     struct path::__is_encoded_char<char32_t> : std::true_type\n     { using value_type = char32_t; };\n \n+  template<typename _Tp>\n+    struct path::__is_encoded_char<const _Tp> : __is_encoded_char<_Tp> { };\n+\n   struct path::_Cmpt : path\n   {\n     _Cmpt(string_type __s, _Type __t, size_t __pos)"}, {"sha": "3dfec2fac5c89c1b15f929d0977e62d13c2e943a", "filename": "libstdc++-v3/testsuite/experimental/filesystem/path/construct/range.cc", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcfceb1afb7bf5cdebb2c52cf71b3d7dc21f11a8/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fconstruct%2Frange.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcfceb1afb7bf5cdebb2c52cf71b3d7dc21f11a8/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fconstruct%2Frange.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fconstruct%2Frange.cc?ref=fcfceb1afb7bf5cdebb2c52cf71b3d7dc21f11a8", "patch": "@@ -24,6 +24,7 @@\n #include <experimental/filesystem>\n #include <string>\n #include <testsuite_fs.h>\n+#include <testsuite_iterators.h>\n \n using std::experimental::filesystem::path;\n using __gnu_test::compare_paths;\n@@ -54,6 +55,52 @@ test01()\n     compare_paths(p1, p7);\n     compare_paths(p1, p8);\n #endif\n+\n+    using __gnu_test::test_container;\n+    using __gnu_test::input_iterator_wrapper;\n+    // Test with input iterators and const value_types\n+    test_container<char, input_iterator_wrapper>\n+      r1(&s.front(), &s.front() + s.size());\n+    path p9(r1.begin(), r1.end());\n+    compare_paths(p1, p9);\n+\n+    test_container<char, input_iterator_wrapper>\n+      r2(&s.front(), &s.front() + s.size() + 1); // includes null-terminator\n+    path p10(r2.begin());\n+    compare_paths(p1, p10);\n+\n+    test_container<const char, input_iterator_wrapper>\n+      r3(s.c_str(), s.c_str() + s.size());\n+    path p11(r3.begin(), r3.end());\n+    compare_paths(p1, p11);\n+\n+    test_container<const char, input_iterator_wrapper>\n+      r4(s.c_str(), s.c_str() + s.size() + 1); // includes null-terminator\n+    path p12(r4.begin());\n+    compare_paths(p1, p12);\n+\n+#if _GLIBCXX_USE_WCHAR_T\n+    // Test with input iterators and const value_types\n+    test_container<wchar_t, input_iterator_wrapper>\n+      r5(&ws.front(), &ws.front() + ws.size());\n+    path p13(r5.begin(), r5.end());\n+    compare_paths(p1, p13);\n+\n+    test_container<wchar_t, input_iterator_wrapper>\n+      r6(&ws.front(), &ws.front() + ws.size() + 1); // includes null-terminator\n+    path p14(r6.begin());\n+    compare_paths(p1, p14);\n+\n+    test_container<const wchar_t, input_iterator_wrapper>\n+      r7(ws.c_str(), ws.c_str() + ws.size());\n+    path p15(r7.begin(), r7.end());\n+    compare_paths(p1, p15);\n+\n+    test_container<const wchar_t, input_iterator_wrapper>\n+      r8(ws.c_str(), ws.c_str() + ws.size() + 1); // includes null-terminator\n+    path p16(r8.begin());\n+    compare_paths(p1, p16);\n+#endif\n   }\n }\n "}]}