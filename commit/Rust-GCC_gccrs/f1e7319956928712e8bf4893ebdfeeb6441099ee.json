{"sha": "f1e7319956928712e8bf4893ebdfeeb6441099ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFlNzMxOTk1NjkyODcxMmU4YmY0ODkzZWJkZmVlYjY0NDEwOTllZQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-08-31T17:31:10Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-08-31T17:31:10Z"}, "message": "c++: check arity before deduction w/ explicit targs [PR12672]\n\nDuring overload resolution, when the arity of a function template\nclearly disagrees with the arity of the call, no specialization of the\nfunction template could yield a viable candidate.  The deduction routine\ntype_unification_real already notices this situation, but not before\nit substitutes explicit template arguments into the template, a step\nwhich could induce a hard error.  Although it's necessary to perform\nthis substitution first in order to check arity perfectly (since the\nsubstitution can e.g. expand a non-trailing parameter pack), in most\ncases we can determine ahead of time whether there's an arity\ndisagreement without needing to perform deduction at all.\n\nTo that end, this patch implements an (approximate) arity check in\nadd_template_candidate_real that guards actual deduction.  It's enabled\nonly when there are explicit template arguments since that's when\ndeduction can force otherwise avoidable template instantiations.  (I\nexperimented with enabling it unconditionally as an optimization, and\nobserved some improvements to compile time of about 5% but also some\nslowdowns of about the same magnitude, so kept it conditional.)\n\nIn passing, this adds a least_p parameter to arity_rejection for sake\nof consistent diagnostics with unify_arity.\n\nA couple of testcases needed to be adjusted so that deduction continues\nto occur as intended after this change.  Except in unify6.C, where we\nwere expecting foo<void ()> to be ill-formed due to substitution\nforming a function type with an added 'const', but ISTM this is\npermitted by [dcl.fct]/7, so I changed the test accordingly.\n\n\tPR c++/12672\n\ngcc/cp/ChangeLog:\n\n\t* call.c (rejection_reason::call_varargs_p): Rename this\n\tpreviously unused member to ...\n\t(rejection_reason::least_p): ... this.\n\t(arity_rejection): Add least_p parameter.\n\t(add_template_candidate_real): When there are explicit\n\ttemplate arguments, check that the arity of the call agrees with\n\tthe arity of the function before attempting deduction.\n\t(print_arity_information): Add least_p parameter.\n\t(print_z_candidate): Adjust call to print_arity_information.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/decltype29.C: Adjust.\n\t* g++.dg/template/error56.C: Adjust.\n\t* g++.old-deja/g++.pt/unify6.C: Adjust.\n\t* g++.dg/template/explicit-args7.C: New test.", "tree": {"sha": "76e9b8a6158909aad2a40756c067f0ab3d2abf7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76e9b8a6158909aad2a40756c067f0ab3d2abf7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1e7319956928712e8bf4893ebdfeeb6441099ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1e7319956928712e8bf4893ebdfeeb6441099ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1e7319956928712e8bf4893ebdfeeb6441099ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1e7319956928712e8bf4893ebdfeeb6441099ee/comments", "author": null, "committer": null, "parents": [{"sha": "92dc5d844a2088db79bc4521be3ecb4e2f284444", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92dc5d844a2088db79bc4521be3ecb4e2f284444", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92dc5d844a2088db79bc4521be3ecb4e2f284444"}], "stats": {"total": 112, "additions": 96, "deletions": 16}, "files": [{"sha": "80e6121ce440d27a6ae0d48dd2289b4edd2a6cff", "filename": "gcc/cp/call.c", "status": "modified", "additions": 57, "deletions": 10, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e7319956928712e8bf4893ebdfeeb6441099ee/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e7319956928712e8bf4893ebdfeeb6441099ee/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=f1e7319956928712e8bf4893ebdfeeb6441099ee", "patch": "@@ -455,8 +455,8 @@ struct rejection_reason {\n       int expected;\n       /* The actual number of arguments in the call.  */\n       int actual;\n-      /* Whether the call was a varargs call.  */\n-      bool call_varargs_p;\n+      /* Whether EXPECTED should be treated as a lower bound.  */\n+      bool least_p;\n     } arity;\n     /* Information about an argument conversion mismatch.  */\n     struct conversion_info conversion;\n@@ -628,12 +628,13 @@ alloc_rejection (enum rejection_reason_code code)\n }\n \n static struct rejection_reason *\n-arity_rejection (tree first_arg, int expected, int actual)\n+arity_rejection (tree first_arg, int expected, int actual, bool least_p = false)\n {\n   struct rejection_reason *r = alloc_rejection (rr_arity);\n   int adjust = first_arg != NULL_TREE;\n   r->u.arity.expected = expected - adjust;\n   r->u.arity.actual = actual - adjust;\n+  r->u.arity.least_p = least_p;\n   return r;\n }\n \n@@ -3452,6 +3453,44 @@ add_template_candidate_real (struct z_candidate **candidates, tree tmpl,\n     }\n   gcc_assert (ia == nargs_without_in_chrg);\n \n+  if (!obj && explicit_targs)\n+    {\n+      /* Check that there's no obvious arity mismatch before proceeding with\n+\t deduction.  This avoids substituting explicit template arguments\n+\t into the template (which could result in an error outside the\n+\t immediate context) when the resulting candidate would be unviable\n+\t anyway.  */\n+      int min_arity = 0, max_arity = 0;\n+      tree parms = TYPE_ARG_TYPES (TREE_TYPE (tmpl));\n+      parms = skip_artificial_parms_for (tmpl, parms);\n+      for (; parms != void_list_node; parms = TREE_CHAIN (parms))\n+\t{\n+\t  if (!parms || PACK_EXPANSION_P (TREE_VALUE (parms)))\n+\t    {\n+\t      max_arity = -1;\n+\t      break;\n+\t    }\n+\t  if (TREE_PURPOSE (parms))\n+\t    /* A parameter with a default argument.  */\n+\t    ++max_arity;\n+\t  else\n+\t    ++min_arity, ++max_arity;\n+\t}\n+      if (ia < (unsigned)min_arity)\n+\t{\n+\t  /* Too few arguments.  */\n+\t  reason = arity_rejection (NULL_TREE, min_arity, ia,\n+\t\t\t\t    /*least_p=*/(max_arity == -1));\n+\t  goto fail;\n+\t}\n+      else if (max_arity != -1 && ia > (unsigned)max_arity)\n+\t{\n+\t  /* Too many arguments.  */\n+\t  reason = arity_rejection (NULL_TREE, max_arity, ia);\n+\t  goto fail;\n+\t}\n+    }\n+\n   errs = errorcount+sorrycount;\n   if (!obj)\n     convs = alloc_conversions (nargs);\n@@ -3725,12 +3764,19 @@ print_conversion_rejection (location_t loc, struct conversion_info *info,\n    HAVE.  */\n \n static void\n-print_arity_information (location_t loc, unsigned int have, unsigned int want)\n-{\n-  inform_n (loc, want,\n-\t    \"  candidate expects %d argument, %d provided\",\n-\t    \"  candidate expects %d arguments, %d provided\",\n-\t    want, have);\n+print_arity_information (location_t loc, unsigned int have, unsigned int want,\n+\t\t\t bool least_p)\n+{\n+  if (least_p)\n+    inform_n (loc, want,\n+\t      \"  candidate expects at least %d argument, %d provided\",\n+\t      \"  candidate expects at least %d arguments, %d provided\",\n+\t      want, have);\n+  else\n+    inform_n (loc, want,\n+\t      \"  candidate expects %d argument, %d provided\",\n+\t      \"  candidate expects %d arguments, %d provided\",\n+\t      want, have);\n }\n \n /* Print information about one overload candidate CANDIDATE.  MSGSTR\n@@ -3794,7 +3840,8 @@ print_z_candidate (location_t loc, const char *msgstr,\n \t{\n \tcase rr_arity:\n \t  print_arity_information (cloc, r->u.arity.actual,\n-\t\t\t\t   r->u.arity.expected);\n+\t\t\t\t   r->u.arity.expected,\n+\t\t\t\t   r->u.arity.least_p);\n \t  break;\n \tcase rr_arg_conversion:\n \t  print_conversion_rejection (cloc, &r->u.conversion, fn);"}, {"sha": "ea97b033569c03d6028983c9b8c1d3a71603253f", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype29.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e7319956928712e8bf4893ebdfeeb6441099ee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype29.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e7319956928712e8bf4893ebdfeeb6441099ee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype29.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype29.C?ref=f1e7319956928712e8bf4893ebdfeeb6441099ee", "patch": "@@ -10,10 +10,10 @@ ft() {}\n \n template<class F, int N>\n decltype (ft<F> (F()))\t\t// { dg-error \"depth\" }\n-ft() {}\n+ft(F) {}\n \n int main() {\n-    ft<struct a*, 0>();\t\t// { dg-message \"from here\" }\n+    ft<struct a*, 0>(0);\t\t// { dg-message \"from here\" }\n }\n \n // { dg-prune-output \"compilation terminated\" }"}, {"sha": "71206a1ae5cb7d998d7abaf521983be45e6b033a", "filename": "gcc/testsuite/g++.dg/template/error56.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e7319956928712e8bf4893ebdfeeb6441099ee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror56.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e7319956928712e8bf4893ebdfeeb6441099ee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror56.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror56.C?ref=f1e7319956928712e8bf4893ebdfeeb6441099ee", "patch": "@@ -3,12 +3,12 @@\n struct A\n {\n   template <class T> void f(T);\n-  void f();\n+  void f(int);\n };\n \n int main()\n {\n-  A().f<1>();\t\t\t// { dg-error \"f<1>\" }\n+  A().f<1>(0);\t\t\t// { dg-error \"f<1>\" }\n   // { dg-error \"type/value mismatch at argument 1\" \"\" { target *-*-* } .-1 }\n   // { dg-message \"expected a type, got .1.\" \"\" { target *-*-* } .-2 }\n }"}, {"sha": "fb5e89e4cf6074eee7388b5a6d6c49acb6baff22", "filename": "gcc/testsuite/g++.dg/template/explicit-args7.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e7319956928712e8bf4893ebdfeeb6441099ee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fexplicit-args7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e7319956928712e8bf4893ebdfeeb6441099ee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fexplicit-args7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fexplicit-args7.C?ref=f1e7319956928712e8bf4893ebdfeeb6441099ee", "patch": "@@ -0,0 +1,33 @@\n+// PR c++/12672\n+// Verify we don't substitute explicit template arguments into\n+// candidate function templates when the arity of the function\n+// template disagrees with the arity of the call.\n+\n+template<class T>\n+struct A { typedef typename T::type type; };\n+\n+template<class T> void f(T); // arity 1\n+template<class T> void f(T, T, T); // arity 3\n+\n+template<class T> typename A<T>::type f(T, T); // arity 2\n+template<class T, class U> typename A<T>::type f(U, U); // arity 2\n+\n+struct B {\n+  template<class T> void f(T); // arity 1\n+  template<class T> void f(T, T, T); // arity 3\n+\n+  template<class T> typename A<T>::type f(T, T); // arity 2\n+  template<class T, class U> typename A<T>::type f(U, U); // arity 2\n+};\n+\n+int main() {\n+  // If overload resolution attempts deduction for any of the arity-2 function\n+  // templates, the substitution of explicit arguments into the template would\n+  // cause a hard error.\n+  f<int>(1);\n+  f<int>(1, 1, 1);\n+\n+  B b;\n+  b.f<int>(1);\n+  b.f<int>(1, 1, 1);\n+}"}, {"sha": "ee14ceadd915d888f98dabc1181d4f3e38889f18", "filename": "gcc/testsuite/g++.old-deja/g++.pt/unify6.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e7319956928712e8bf4893ebdfeeb6441099ee/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Funify6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e7319956928712e8bf4893ebdfeeb6441099ee/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Funify6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Funify6.C?ref=f1e7319956928712e8bf4893ebdfeeb6441099ee", "patch": "@@ -23,8 +23,8 @@ template<class T> void foo(T const *){} // { dg-error \"pointer to reference\" }\n \n void f()\n {\n-  foo<int &>(); // { dg-error \"\" } attempt to build int & const *\n-  foo<void ()>(); // { dg-error \"\" } attempt to build void (const *)()\n+  foo<int &>(0); // { dg-error \"\" } attempt to build int & const *\n+  foo<void ()>(0); // OK by [dcl.fct]/7, the const is silently dropped\n }\n \n typedef void (*Fptr)();"}]}