{"sha": "aeb302bbec86aff44fadaad0c9c9bf5e59cbe3f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWViMzAyYmJlYzg2YWZmNDRmYWRhYWQwYzljOWJmNWU1OWNiZTNmNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-06-08T10:52:37Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-06-08T10:52:37Z"}, "message": "function.c: Define current_function_cannot_inline.\n\n\t* function.c: Define current_function_cannot_inline.\n\t(push_function_context_to): Save it.\n\t(pop_function_context_from): Restore it.\n\t* function.h (struct function): Provide it a home.\n\t* output.h: Declare it.\n\t* integrate.c (function_cannot_inline_p): Check it.\n\t* decl.c (cp_finish_decl): Disable inlining of extern inlines\n\twith static variables.\n\nFrom-SVN: r20332", "tree": {"sha": "2c388127a95218487e93567ec1198ce237ce1ede", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c388127a95218487e93567ec1198ce237ce1ede"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aeb302bbec86aff44fadaad0c9c9bf5e59cbe3f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeb302bbec86aff44fadaad0c9c9bf5e59cbe3f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aeb302bbec86aff44fadaad0c9c9bf5e59cbe3f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeb302bbec86aff44fadaad0c9c9bf5e59cbe3f5/comments", "author": null, "committer": null, "parents": [{"sha": "8b015896c2a46c08cd90f2686a8fb533709e984c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b015896c2a46c08cd90f2686a8fb533709e984c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b015896c2a46c08cd90f2686a8fb533709e984c"}], "stats": {"total": 56, "additions": 34, "deletions": 22}, "files": [{"sha": "07b0a2bf7d4753440e756264debab22d023deef0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb302bbec86aff44fadaad0c9c9bf5e59cbe3f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb302bbec86aff44fadaad0c9c9bf5e59cbe3f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aeb302bbec86aff44fadaad0c9c9bf5e59cbe3f5", "patch": "@@ -1,3 +1,12 @@\n+Mon Jun  8 01:21:13 1998  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* function.c: Define current_function_cannot_inline.\n+\t(push_function_context_to): Save it.\n+\t(pop_function_context_from): Restore it.\n+\t* function.h (struct function): Provide it a home.\n+\t* output.h: Declare it.\n+\t* integrate.c (function_cannot_inline_p): Check it.\n+\n Mon Jun  8 10:43:15 1998  Richard Henderson  <rth@cygnus.com>\n \n \t* expr.c (force_operand): Detect PIC address loads before "}, {"sha": "912b332332ced8cf67134906c27d7469e13a74d0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb302bbec86aff44fadaad0c9c9bf5e59cbe3f5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb302bbec86aff44fadaad0c9c9bf5e59cbe3f5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=aeb302bbec86aff44fadaad0c9c9bf5e59cbe3f5", "patch": "@@ -1,3 +1,8 @@\n+1998-06-08  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl.c (cp_finish_decl): Disable inlining of extern inlines\n+\twith static variables.\n+\n 1998-06-08  Mark Mitchell  <mark@markmitchell.com>\n \n \t* init.c (build_offset_ref): Correct previous change to use build,"}, {"sha": "0505cc618a0245de5420e6ef13e51690eb93095f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb302bbec86aff44fadaad0c9c9bf5e59cbe3f5/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb302bbec86aff44fadaad0c9c9bf5e59cbe3f5/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=aeb302bbec86aff44fadaad0c9c9bf5e59cbe3f5", "patch": "@@ -6992,35 +6992,20 @@ cp_finish_decl (decl, init, asmspec_tree, need_pop, flags)\n       if (was_temp)\n \tend_temporary_allocation ();\n \n-      /* Extern inline function static data has external linkage.  */\n+      /* Extern inline function static data has external linkage.\n+         Instead of trying to deal with that, we disable inlining of\n+         such functions.  The ASM_WRITTEN check is to avoid hitting this\n+         for __FUNCTION__.  */\n       if (TREE_CODE (decl) == VAR_DECL\n \t  && TREE_STATIC (decl)\n+\t  && ! TREE_ASM_WRITTEN (decl)\n \t  && current_function_decl\n \t  && DECL_CONTEXT (decl) == current_function_decl\n \t  && DECL_THIS_INLINE (current_function_decl)\n \t  && TREE_PUBLIC (current_function_decl))\n \t{\n-\t  if (DECL_INTERFACE_KNOWN (current_function_decl))\n-\t    {\n-\t      TREE_PUBLIC (decl) = 1;\n-\t      DECL_EXTERNAL (decl) = DECL_EXTERNAL (current_function_decl);\n-\t    }\n-\t  /* We can only do this if we can use common or weak, and we\n-\t     can't if it has been initialized and we don't support weak.  */\n-\t  else if (DECL_INITIAL (decl) == NULL_TREE\n-\t\t   || DECL_INITIAL (decl) == error_mark_node)\n-\t    {\n-\t      TREE_PUBLIC (decl) = 1;\n-\t      DECL_COMMON (decl) = 1;\n-\t    }\n-\t  else if (flag_weak)\n-\t    make_decl_one_only (decl);\n-\n-\t  if (TREE_PUBLIC (decl))\n-\t    DECL_ASSEMBLER_NAME (decl)\n-\t      = build_static_name (current_function_decl, DECL_NAME (decl));\n-\t  else if (! DECL_ARTIFICIAL (decl))\n-\t    cp_warning_at (\"sorry: semantics of inline function static data `%#D' are wrong (you'll wind up with multiple copies)\", decl);\n+\t  current_function_cannot_inline\n+\t    = \"function with static variable cannot be inline\";\n \t}\n \n       else if (TREE_CODE (decl) == VAR_DECL"}, {"sha": "f8e3cd40667537bcd3b8301210ae4ebf2ef455cc", "filename": "gcc/function.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb302bbec86aff44fadaad0c9c9bf5e59cbe3f5/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb302bbec86aff44fadaad0c9c9bf5e59cbe3f5/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=aeb302bbec86aff44fadaad0c9c9bf5e59cbe3f5", "patch": "@@ -214,6 +214,9 @@ int current_function_uses_pic_offset_table;\n /* The arg pointer hard register, or the pseudo into which it was copied.  */\n rtx current_function_internal_arg_pointer;\n \n+/* Language-specific reason why the current function cannot be made inline.  */\n+char *current_function_cannot_inline;\n+\n /* The FUNCTION_DECL for an inline function currently being expanded.  */\n tree inline_function_decl;\n \n@@ -507,6 +510,7 @@ push_function_context_to (context)\n   p->uses_const_pool = current_function_uses_const_pool;\n   p->uses_pic_offset_table = current_function_uses_pic_offset_table;\n   p->internal_arg_pointer = current_function_internal_arg_pointer;\n+  p->cannot_inline = current_function_cannot_inline;\n   p->max_parm_reg = max_parm_reg;\n   p->parm_reg_stack_loc = parm_reg_stack_loc;\n   p->outgoing_args_size = current_function_outgoing_args_size;\n@@ -588,6 +592,7 @@ pop_function_context_from (context)\n   current_function_uses_const_pool = p->uses_const_pool;\n   current_function_uses_pic_offset_table = p->uses_pic_offset_table;\n   current_function_internal_arg_pointer = p->internal_arg_pointer;\n+  current_function_cannot_inline = p->cannot_inline;\n   max_parm_reg = p->max_parm_reg;\n   parm_reg_stack_loc = p->parm_reg_stack_loc;\n   current_function_outgoing_args_size = p->outgoing_args_size;\n@@ -5319,6 +5324,7 @@ init_function_start (subr, filename, line)\n   current_function_epilogue_delay_list = 0;\n   current_function_uses_const_pool = 0;\n   current_function_uses_pic_offset_table = 0;\n+  current_function_cannot_inline = 0;\n \n   /* We have not yet needed to make a label to jump to for tail-recursion.  */\n   tail_recursion_label = 0;"}, {"sha": "e06366c9478dfb12ce800b97bbcc36c9b0919ddd", "filename": "gcc/function.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb302bbec86aff44fadaad0c9c9bf5e59cbe3f5/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb302bbec86aff44fadaad0c9c9bf5e59cbe3f5/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=aeb302bbec86aff44fadaad0c9c9bf5e59cbe3f5", "patch": "@@ -102,6 +102,7 @@ struct function\n   rtx tail_recursion_label;\n   rtx tail_recursion_reentry;\n   rtx internal_arg_pointer;\n+  char *cannot_inline;\n   rtx arg_pointer_save_area;\n   tree rtl_expr_chain;\n   rtx last_parm_insn;"}, {"sha": "518f1c0c12f98b802a550c03eb8940a480494750", "filename": "gcc/integrate.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb302bbec86aff44fadaad0c9c9bf5e59cbe3f5/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb302bbec86aff44fadaad0c9c9bf5e59cbe3f5/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=aeb302bbec86aff44fadaad0c9c9bf5e59cbe3f5", "patch": "@@ -132,6 +132,9 @@ function_cannot_inline_p (fndecl)\n   if (current_function_contains_functions)\n     return \"function with nested functions cannot be inline\";\n \n+  if (current_function_cannot_inline)\n+    return current_function_cannot_inline;\n+\n   /* If its not even close, don't even look.  */\n   if (!DECL_INLINE (fndecl) && get_max_uid () > 3 * max_insns)\n     return \"function too large to be inline\";"}, {"sha": "dd9ad82a6bcf63ef247bac1039d8ebf5da86d348", "filename": "gcc/output.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb302bbec86aff44fadaad0c9c9bf5e59cbe3f5/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb302bbec86aff44fadaad0c9c9bf5e59cbe3f5/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=aeb302bbec86aff44fadaad0c9c9bf5e59cbe3f5", "patch": "@@ -437,6 +437,9 @@ extern int current_function_uses_pic_offset_table;\n /* This is nonzero if the current function uses the constant pool.  */\n extern int current_function_uses_const_pool;\n \n+/* Language-specific reason why the current function cannot be made inline.  */\n+extern char *current_function_cannot_inline;\n+\n /* The line number of the beginning of the current function.\n    sdbout.c needs this so that it can output relative linenumbers.  */\n "}]}