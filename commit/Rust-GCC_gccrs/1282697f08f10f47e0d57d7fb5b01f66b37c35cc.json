{"sha": "1282697f08f10f47e0d57d7fb5b01f66b37c35cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI4MjY5N2YwOGYxMGY0N2UwZDU3ZDdmYjViMDFmNjZiMzdjMzVjYw==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2008-10-06T22:40:02Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2008-10-06T22:40:02Z"}, "message": "+ * gimplify.c (gimplify_arg): Add location argument.\n\n+       * gimplify.c (gimplify_arg): Add location argument.  Use it.\n+       (gimplify_call_expr): Pass location to gimplify_arg.\n+       (gimplify_modify_expr_to_memcpy): Same.\n+       (gimplify_modify_expr_to_memset): Same.\n\nFrom-SVN: r140917", "tree": {"sha": "c9fd3853270b053ac1e6eeb3f6053b9618b9b065", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9fd3853270b053ac1e6eeb3f6053b9618b9b065"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1282697f08f10f47e0d57d7fb5b01f66b37c35cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1282697f08f10f47e0d57d7fb5b01f66b37c35cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1282697f08f10f47e0d57d7fb5b01f66b37c35cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1282697f08f10f47e0d57d7fb5b01f66b37c35cc/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "38179091cc37de50c92d821b3670e94943d41bfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38179091cc37de50c92d821b3670e94943d41bfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38179091cc37de50c92d821b3670e94943d41bfc"}], "stats": {"total": 25, "additions": 19, "deletions": 6}, "files": [{"sha": "e7b2b50238001f210d6df2aecdcc8e4ada953eec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1282697f08f10f47e0d57d7fb5b01f66b37c35cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1282697f08f10f47e0d57d7fb5b01f66b37c35cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1282697f08f10f47e0d57d7fb5b01f66b37c35cc", "patch": "@@ -1,3 +1,10 @@\n+2008-10-06  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimplify.c (gimplify_arg): Add location argument.  Use it.\n+\t(gimplify_call_expr): Pass location to gimplify_arg.\n+\t(gimplify_modify_expr_to_memcpy): Same.\n+\t(gimplify_modify_expr_to_memset): Same.\n+\n 2008-10-06  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin):"}, {"sha": "c6a79fbe8b7c5c78b06b6f7138b8d92f211f34f3", "filename": "gcc/gimplify.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1282697f08f10f47e0d57d7fb5b01f66b37c35cc/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1282697f08f10f47e0d57d7fb5b01f66b37c35cc/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=1282697f08f10f47e0d57d7fb5b01f66b37c35cc", "patch": "@@ -2238,10 +2238,11 @@ maybe_with_size_expr (tree *expr_p)\n \n \n /* Helper for gimplify_call_expr.  Gimplify a single argument *ARG_P\n-   Store any side-effects in PRE_P.  */\n+   Store any side-effects in PRE_P.  CALL_LOCATION is the location of\n+   the CALL_EXPR.  */\n \n static enum gimplify_status\n-gimplify_arg (tree *arg_p, gimple_seq *pre_p)\n+gimplify_arg (tree *arg_p, gimple_seq *pre_p, location_t call_location)\n {\n   bool (*test) (tree);\n   fallback_t fb;\n@@ -2259,6 +2260,10 @@ gimplify_arg (tree *arg_p, gimple_seq *pre_p)\n   /* If this is a variable sized type, we must remember the size.  */\n   maybe_with_size_expr (arg_p);\n \n+  /* Make sure arguments have the same location as the function call\n+     itself.  */\n+  protected_set_expr_location (*arg_p, call_location);\n+\n   /* There is a sequence point before a function call.  Side effects in\n      the argument list must occur before the actual call. So, when\n      gimplifying arguments, force gimplify_expr to use an internal\n@@ -2448,7 +2453,8 @@ gimplify_call_expr (tree *expr_p, gimple_seq *pre_p, bool want_value)\n              be the plain PARM_DECL.  */\n           if ((i != 1) || !builtin_va_start_p)\n             {\n-              t = gimplify_arg (&CALL_EXPR_ARG (*expr_p, i), pre_p);\n+              t = gimplify_arg (&CALL_EXPR_ARG (*expr_p, i), pre_p,\n+\t\t\t\tEXPR_LOCATION (*expr_p));\n \n               if (t == GS_ERROR)\n                 ret = GS_ERROR;\n@@ -3095,10 +3101,10 @@ gimplify_modify_expr_to_memcpy (tree *expr_p, tree size, bool want_value,\n   from = TREE_OPERAND (*expr_p, 1);\n \n   from_ptr = build_fold_addr_expr (from);\n-  gimplify_arg (&from_ptr, seq_p);\n+  gimplify_arg (&from_ptr, seq_p, EXPR_LOCATION (*expr_p));\n \n   to_ptr = build_fold_addr_expr (to);\n-  gimplify_arg (&to_ptr, seq_p);\n+  gimplify_arg (&to_ptr, seq_p, EXPR_LOCATION (*expr_p));\n \n   t = implicit_built_in_decls[BUILT_IN_MEMCPY];\n \n@@ -3145,7 +3151,7 @@ gimplify_modify_expr_to_memset (tree *expr_p, tree size, bool want_value,\n   to = TREE_OPERAND (*expr_p, 0);\n \n   to_ptr = build_fold_addr_expr (to);\n-  gimplify_arg (&to_ptr, seq_p);\n+  gimplify_arg (&to_ptr, seq_p, EXPR_LOCATION (*expr_p));\n   t = implicit_built_in_decls[BUILT_IN_MEMSET];\n \n   gs = gimple_build_call (t, 3, to_ptr, integer_zero_node, size);"}]}