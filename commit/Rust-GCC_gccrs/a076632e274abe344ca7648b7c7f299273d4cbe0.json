{"sha": "a076632e274abe344ca7648b7c7f299273d4cbe0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA3NjYzMmUyNzRhYmUzNDRjYTc2NDhiN2M3ZjI5OTI3M2Q0Y2JlMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-05-07T07:51:18Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-05-10T09:40:39Z"}, "message": "middle-end/100464 - avoid spurious TREE_ADDRESSABLE in folding debug stmts\n\ncanonicalize_constructor_val was setting TREE_ADDRESSABLE on bases\nof ADDR_EXPRs but that's futile when we're dealing with CTOR values\nin debug stmts.  This rips out the code which was added for Java\nand should have been an assertion when we didn't have debug stmts.\nTo not regress g++.dg/tree-ssa/array-temp1.C we have to adjust the\ntestcase to not look for a no longer applied invalid optimization.\n\n2021-05-10  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/100464\n\tPR c++/100468\ngcc/\n\t* gimple-fold.c (canonicalize_constructor_val): Do not set\n\tTREE_ADDRESSABLE.\n\ngcc/cp/\n\t* call.c (set_up_extended_ref_temp): Mark the temporary\n\taddressable if the TARGET_EXPR was.\n\ngcc/testsuite/\n\t* gcc.dg/pr100464.c: New testcase.\n\t* g++.dg/tree-ssa/array-temp1.C: Adjust.", "tree": {"sha": "9f9db39952ed28f660d4af6758c416ebe3afe413", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f9db39952ed28f660d4af6758c416ebe3afe413"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a076632e274abe344ca7648b7c7f299273d4cbe0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a076632e274abe344ca7648b7c7f299273d4cbe0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a076632e274abe344ca7648b7c7f299273d4cbe0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a076632e274abe344ca7648b7c7f299273d4cbe0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a564da506f52be66ade298b562417641e87b549f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a564da506f52be66ade298b562417641e87b549f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a564da506f52be66ade298b562417641e87b549f"}], "stats": {"total": 28, "additions": 21, "deletions": 7}, "files": [{"sha": "f07e09a36d142a1adf5e6ac83b0b1e71ee113278", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a076632e274abe344ca7648b7c7f299273d4cbe0/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a076632e274abe344ca7648b7c7f299273d4cbe0/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=a076632e274abe344ca7648b7c7f299273d4cbe0", "patch": "@@ -12478,6 +12478,8 @@ set_up_extended_ref_temp (tree decl, tree expr, vec<tree, va_gc> **cleanups,\n      VAR.  */\n   if (TREE_CODE (expr) != TARGET_EXPR)\n     expr = get_target_expr (expr);\n+  else if (TREE_ADDRESSABLE (expr))\n+    TREE_ADDRESSABLE (var) = 1;\n \n   if (TREE_CODE (decl) == FIELD_DECL\n       && extra_warnings && !TREE_NO_WARNING (decl))"}, {"sha": "768ef89d87626b4e7300acdda7b500e98715e1ec", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a076632e274abe344ca7648b7c7f299273d4cbe0/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a076632e274abe344ca7648b7c7f299273d4cbe0/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=a076632e274abe344ca7648b7c7f299273d4cbe0", "patch": "@@ -245,7 +245,9 @@ canonicalize_constructor_val (tree cval, tree from_decl)\n       if (TREE_TYPE (base) == error_mark_node)\n \treturn NULL_TREE;\n       if (VAR_P (base))\n-\tTREE_ADDRESSABLE (base) = 1;\n+\t/* ???  We should be able to assert that TREE_ADDRESSABLE is set,\n+\t   but since the use can be in a debug stmt we can't.  */\n+\t;\n       else if (TREE_CODE (base) == FUNCTION_DECL)\n \t{\n \t  /* Make sure we create a cgraph node for functions we'll reference."}, {"sha": "3df7aadd30ab552160b8ee4b08dc378bd6ef6236", "filename": "gcc/testsuite/g++.dg/tree-ssa/array-temp1.C", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a076632e274abe344ca7648b7c7f299273d4cbe0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Farray-temp1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a076632e274abe344ca7648b7c7f299273d4cbe0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Farray-temp1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Farray-temp1.C?ref=a076632e274abe344ca7648b7c7f299273d4cbe0", "patch": "@@ -13,9 +13,3 @@ int f()\n   using AR = const int[];\n   return AR{ 1,42,3,4,5,6,7,8,9,0 }[5];\n }\n-\n-int g()\n-{\n-  std::initializer_list<int> a = {1,42,3};\n-  return a.begin()[0];\n-}"}, {"sha": "46cc37dff5461467143a8219e1c829845f84db57", "filename": "gcc/testsuite/gcc.dg/pr100464.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a076632e274abe344ca7648b7c7f299273d4cbe0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr100464.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a076632e274abe344ca7648b7c7f299273d4cbe0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr100464.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr100464.c?ref=a076632e274abe344ca7648b7c7f299273d4cbe0", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fcompare-debug\" } */\n+\n+int *a;\n+static int b, c, d, e, g, h;\n+int f;\n+void i() {\n+  int *j[] = {&e, &b, &b, &d, &b, &b, &g, &e, &g, &b, &b,\n+              &b, &b, &g, &e, &e, &b, &b, &d, &b, &b, &e,\n+              &e, &g, &b, &b, &b, &b, &g, &e, &g, &c, &e};\n+  int **k = &j[5];\n+  for (; f;)\n+    b |= *a;\n+  *k = &h;\n+}\n+int main() {}"}]}