{"sha": "76f3944041f68df765cef48819936be04227d696", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZmMzk0NDA0MWY2OGRmNzY1Y2VmNDg4MTk5MzZiZTA0MjI3ZDY5Ng==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-04-19T19:30:22Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-04-19T19:30:22Z"}, "message": "PR c++/66543 - -Wunused-but-set* false positives\n\n\t* expr.c (mark_exp_read): Handle NON_DEPENDENT_EXPR.\n\t* pt.c (make_pack_expansion): Call mark_exp_read.\n\t* semantics.c (finish_id_expression): Call mark_type_use in\n\tunevaluated context.\n\nFrom-SVN: r235221", "tree": {"sha": "a53f0050a6888ff46d0f97f7d2e01c98f6863e4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a53f0050a6888ff46d0f97f7d2e01c98f6863e4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76f3944041f68df765cef48819936be04227d696", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76f3944041f68df765cef48819936be04227d696", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76f3944041f68df765cef48819936be04227d696", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76f3944041f68df765cef48819936be04227d696/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "90eeab20f7aec033494f554a7536954b3be63809", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90eeab20f7aec033494f554a7536954b3be63809", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90eeab20f7aec033494f554a7536954b3be63809"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "73b1cfa21a0e2ed4955d2d4bf34708ced2f98019", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f3944041f68df765cef48819936be04227d696/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f3944041f68df765cef48819936be04227d696/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=76f3944041f68df765cef48819936be04227d696", "patch": "@@ -1,5 +1,11 @@\n 2016-04-19  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/66543\n+\t* expr.c (mark_exp_read): Handle NON_DEPENDENT_EXPR.\n+\t* pt.c (make_pack_expansion): Call mark_exp_read.\n+\t* semantics.c (finish_id_expression): Call mark_type_use in\n+\tunevaluated context.\n+\n \tDR 2137\n \t* call.c (implicit_conversion): If we choose a copy constructor\n \tfor list-initialization from the same type, the conversion is an"}, {"sha": "61b395300e60e49cbf578b8b6dc9a839dfa4dd59", "filename": "gcc/cp/expr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f3944041f68df765cef48819936be04227d696/gcc%2Fcp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f3944041f68df765cef48819936be04227d696/gcc%2Fcp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexpr.c?ref=76f3944041f68df765cef48819936be04227d696", "patch": "@@ -145,6 +145,7 @@ mark_exp_read (tree exp)\n     case ADDR_EXPR:\n     case INDIRECT_REF:\n     case FLOAT_EXPR:\n+    case NON_DEPENDENT_EXPR:\n       mark_exp_read (TREE_OPERAND (exp, 0));\n       break;\n     case COMPOUND_EXPR:"}, {"sha": "e18422f37ecc889eaaa05a8ddafddd1f0d4f60fd", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f3944041f68df765cef48819936be04227d696/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f3944041f68df765cef48819936be04227d696/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=76f3944041f68df765cef48819936be04227d696", "patch": "@@ -3696,6 +3696,8 @@ make_pack_expansion (tree arg)\n       /* Propagate type and const-expression information.  */\n       TREE_TYPE (result) = TREE_TYPE (arg);\n       TREE_CONSTANT (result) = TREE_CONSTANT (arg);\n+      /* Mark this read now, since the expansion might be length 0.  */\n+      mark_exp_read (arg);\n     }\n   else\n     /* Just use structural equality for these TYPE_PACK_EXPANSIONS;"}, {"sha": "85ef9934e96f53908085ca2143377ae9fd20fcb2", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f3944041f68df765cef48819936be04227d696/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f3944041f68df765cef48819936be04227d696/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=76f3944041f68df765cef48819936be04227d696", "patch": "@@ -3487,6 +3487,12 @@ finish_id_expression (tree id_expression,\n       if (!scope && decl != error_mark_node && identifier_p (id_expression))\n \tmaybe_note_name_used_in_class (id_expression, decl);\n \n+      /* A use in unevaluated operand might not be instantiated appropriately\n+\t if tsubst_copy builds a dummy parm, or if we never instantiate a\n+\t generic lambda, so mark it now.  */\n+      if (processing_template_decl && cp_unevaluated_operand)\n+\tmark_type_use (decl);\n+\n       /* Disallow uses of local variables from containing functions, except\n \t within lambda-expressions.  */\n       if (outer_automatic_var_p (decl))"}, {"sha": "ff1dda537d621cac9d92a3211dc3ae8d9202498e", "filename": "gcc/testsuite/g++.dg/warn/Wunused-parm-7.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f3944041f68df765cef48819936be04227d696/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-parm-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f3944041f68df765cef48819936be04227d696/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-parm-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-parm-7.C?ref=76f3944041f68df765cef48819936be04227d696", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wunused-but-set-parameter\" }\n+\n+template <typename... Ts> void sink(Ts...);\n+\n+struct A { int i; };\n+\n+template <int... I>\n+void f(A a)\n+{\n+  return sink((a.i + I)...);\n+}\n+\n+int main()\n+{\n+  f<>(A());\n+}"}, {"sha": "867ad6a2904cd5c95ee7effb91d70614c73781e0", "filename": "gcc/testsuite/g++.dg/warn/Wunused-parm-8.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f3944041f68df765cef48819936be04227d696/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-parm-8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f3944041f68df765cef48819936be04227d696/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-parm-8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-parm-8.C?ref=76f3944041f68df765cef48819936be04227d696", "patch": "@@ -0,0 +1,9 @@\n+// { dg-do compile { target c++14 } }\n+// { dg-options \"-Wunused-but-set-parameter\" }\n+\n+auto l = [](auto t) -> decltype(true ? t : 0) { return {}; };\n+\n+int main()\n+{\n+  l(42);\n+}"}, {"sha": "924b2dbc68e561291d78b3c9d5915b2cdb455815", "filename": "gcc/testsuite/g++.dg/warn/Wunused-var-24.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f3944041f68df765cef48819936be04227d696/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f3944041f68df765cef48819936be04227d696/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-24.C?ref=76f3944041f68df765cef48819936be04227d696", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/66543\n+// { dg-do compile { target c++14 } }\n+// { dg-options \"-Wunused-but-set-variable\" }\n+\n+int main() {\n+  auto f = []() { };\n+  [=](auto) {\n+    using Foo = decltype(f());\n+  };\n+}"}, {"sha": "959e79cc4164863002a36dba2266ce37566ece9a", "filename": "gcc/testsuite/g++.dg/warn/Wunused-var-25.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f3944041f68df765cef48819936be04227d696/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f3944041f68df765cef48819936be04227d696/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-25.C?ref=76f3944041f68df765cef48819936be04227d696", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile { target c++14 } }\n+// { dg-options \"-Wunused-but-set-variable\" }\n+\n+template <int... I> struct A { };\n+template <int... I>\n+auto f()\n+{\n+  constexpr int ar[sizeof...(I)+1] = {I...};\n+  return A<ar[I]...>();\n+}\n+\n+int main()\n+{\n+  f<>();\n+}"}]}