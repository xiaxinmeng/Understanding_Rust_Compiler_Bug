{"sha": "603be0224edf653c1e38229e1d32ed449ffd23bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAzYmUwMjI0ZWRmNjUzYzFlMzgyMjllMWQzMmVkNDQ5ZmZkMjNiZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-09-29T17:53:50Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-09-29T17:53:50Z"}, "message": "P0683R1 - default member initializers for bit-fields\n\n\tP0683R1 - default member initializers for bit-fields\ncp/\n\t* cp-tree.h (grokbitfield): Add INIT parameter.\n\t* parser.c (cp_parser_constant_expression): Add STRICT_P argument,\n\tif true, parse a conditional-expression rather than\n\tassignment-expression.\n\t(cp_parser_member_declaration): For C++11 and later pass true\n\tas STRICT_P to cp_parser_constant_expression.  Parse C++2A bitfield\n\tNSDMIs.  Adjust grokbitfield caller.  Handle DECL_INITIAL also for\n\tDECL_C_BIT_FIELDs.\n\t(cp_parser_objc_class_ivars): Adjust grokbitfield caller.\n\t* class.c (check_field_decl): Recurse even for DECL_C_BIT_FIELDs.\n\t(check_field_decls): Call check_field_decl even for DECL_C_BIT_FIELDs.\n\t* decl2.c (grokbitfield): Add INIT parameter, pass it to\n\tcp_finish_decl.\n\t* pt.c (tsubst_decl): Handle DECL_INITIAL for all FIELD_DECLs, not\n\tjust non-bitfields.\ntestsuite/\n\t* g++.dg/ext/bitfield6.C: New test.\n\t* g++.dg/cpp2a/bitfield1.C: New test.\n\t* g++.dg/cpp2a/bitfield2.C: New test.\n\t* g++.dg/cpp2a/bitfield3.C: New test.\n\nFrom-SVN: r253302", "tree": {"sha": "fcd62b99968f8938843ab7d38f586f9001aece90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fcd62b99968f8938843ab7d38f586f9001aece90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/603be0224edf653c1e38229e1d32ed449ffd23bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/603be0224edf653c1e38229e1d32ed449ffd23bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/603be0224edf653c1e38229e1d32ed449ffd23bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/603be0224edf653c1e38229e1d32ed449ffd23bd/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7d386d45085cbe472089a8df4a2f033d9d5999a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d386d45085cbe472089a8df4a2f033d9d5999a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d386d45085cbe472089a8df4a2f033d9d5999a5"}], "stats": {"total": 322, "additions": 284, "deletions": 38}, "files": [{"sha": "a9ee9a5eacf383c3933cd8e679549e7cd5e2f16e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603be0224edf653c1e38229e1d32ed449ffd23bd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603be0224edf653c1e38229e1d32ed449ffd23bd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=603be0224edf653c1e38229e1d32ed449ffd23bd", "patch": "@@ -1,5 +1,22 @@\n 2017-09-29  Jakub Jelinek  <jakub@redhat.com>\n \n+\tP0683R1 - default member initializers for bit-fields\n+\t* cp-tree.h (grokbitfield): Add INIT parameter.\n+\t* parser.c (cp_parser_constant_expression): Add STRICT_P argument,\n+\tif true, parse a conditional-expression rather than\n+\tassignment-expression.\n+\t(cp_parser_member_declaration): For C++11 and later pass true\n+\tas STRICT_P to cp_parser_constant_expression.  Parse C++2A bitfield\n+\tNSDMIs.  Adjust grokbitfield caller.  Handle DECL_INITIAL also for\n+\tDECL_C_BIT_FIELDs.\n+\t(cp_parser_objc_class_ivars): Adjust grokbitfield caller.\n+\t* class.c (check_field_decl): Recurse even for DECL_C_BIT_FIELDs.\n+\t(check_field_decls): Call check_field_decl even for DECL_C_BIT_FIELDs.\n+\t* decl2.c (grokbitfield): Add INIT parameter, pass it to\n+\tcp_finish_decl.\n+\t* pt.c (tsubst_decl): Handle DECL_INITIAL for all FIELD_DECLs, not\n+\tjust non-bitfields.\n+\n \t* class.c (check_bitfield_decl): Retrieve and clear width from\n \tDECL_BIT_FIELD_REPRESENTATIVE rather than DECL_INITIAL.\n \t(check_field_decls): Test DECL_BIT_FIELD_REPRESENTATIVE rather than"}, {"sha": "0c4a7b3db0419cc393613a74269706acf03355c2", "filename": "gcc/cp/class.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603be0224edf653c1e38229e1d32ed449ffd23bd/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603be0224edf653c1e38229e1d32ed449ffd23bd/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=603be0224edf653c1e38229e1d32ed449ffd23bd", "patch": "@@ -3324,7 +3324,7 @@ check_field_decl (tree field,\n     {\n       for (tree fields = TYPE_FIELDS (type); fields;\n \t   fields = DECL_CHAIN (fields))\n-\tif (TREE_CODE (fields) == FIELD_DECL && !DECL_C_BIT_FIELD (field))\n+\tif (TREE_CODE (fields) == FIELD_DECL)\n \t  any_default_members |= check_field_decl (fields, t,\n \t\t\t\t\t\t   cant_have_const_ctor,\n \t\t\t\t\t\t   no_const_asn_ref);\n@@ -3636,10 +3636,10 @@ check_field_decls (tree t, tree *access_decls,\n \n       /* We set DECL_C_BIT_FIELD in grokbitfield.\n \t If the type and width are valid, we'll also set DECL_BIT_FIELD.  */\n-      if ((! DECL_C_BIT_FIELD (x) || ! check_bitfield_decl (x))\n-\t  && check_field_decl (x, t,\n-\t\t\t       cant_have_const_ctor_p,\n-\t\t\t       no_const_asn_ref_p))\n+      if (DECL_C_BIT_FIELD (x))\n+\tcheck_bitfield_decl (x);\n+\n+      if (check_field_decl (x, t, cant_have_const_ctor_p, no_const_asn_ref_p))\n \t{\n \t  if (any_default_members\n \t      && TREE_CODE (t) == UNION_TYPE)"}, {"sha": "a21c948539342a784075b94e6a1d66da2b691cf9", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603be0224edf653c1e38229e1d32ed449ffd23bd/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603be0224edf653c1e38229e1d32ed449ffd23bd/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=603be0224edf653c1e38229e1d32ed449ffd23bd", "patch": "@@ -6159,7 +6159,7 @@ extern void check_member_template\t\t(tree);\n extern tree grokfield (const cp_declarator *, cp_decl_specifier_seq *,\n \t\t       tree, bool, tree, tree);\n extern tree grokbitfield (const cp_declarator *, cp_decl_specifier_seq *,\n-\t\t\t  tree, tree);\n+\t\t\t  tree, tree, tree);\n extern bool any_dependent_type_attributes_p\t(tree);\n extern tree cp_reconstruct_complex_type\t\t(tree, tree);\n extern bool attributes_naming_typedef_ok\t(tree);"}, {"sha": "eb9c6a59e047a1a2281e93203b7b9089b6fbe39b", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603be0224edf653c1e38229e1d32ed449ffd23bd/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603be0224edf653c1e38229e1d32ed449ffd23bd/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=603be0224edf653c1e38229e1d32ed449ffd23bd", "patch": "@@ -974,14 +974,16 @@ grokfield (const cp_declarator *declarator,\n }\n \n /* Like `grokfield', but for bitfields.\n-   WIDTH is non-NULL for bit fields only, and is an INTEGER_CST node.  */\n+   WIDTH is the width of the bitfield, a constant expression.\n+   The other parameters are as for grokfield.  */\n \n tree\n grokbitfield (const cp_declarator *declarator,\n-\t      cp_decl_specifier_seq *declspecs, tree width,\n+\t      cp_decl_specifier_seq *declspecs, tree width, tree init,\n \t      tree attrlist)\n {\n-  tree value = grokdeclarator (declarator, declspecs, BITFIELD, 0, &attrlist);\n+  tree value = grokdeclarator (declarator, declspecs, BITFIELD,\n+\t\t\t       init != NULL_TREE, &attrlist);\n \n   if (value == error_mark_node)\n     return NULL_TREE; /* friends went bad.  */\n@@ -1036,7 +1038,11 @@ grokbitfield (const cp_declarator *declarator,\n       error (\"static member %qD cannot be a bit-field\", value);\n       return NULL_TREE;\n     }\n-  cp_finish_decl (value, NULL_TREE, false, NULL_TREE, 0);\n+\n+  int flags = LOOKUP_IMPLICIT;\n+  if (init && DIRECT_LIST_INIT_P (init))\n+    flags = LOOKUP_NORMAL;\n+  cp_finish_decl (value, init, false, NULL_TREE, flags);\n \n   if (width != error_mark_node)\n     {"}, {"sha": "6e817cb9fd5b2a3e1602cd8d8a9e997ad7058d19", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 69, "deletions": 27, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603be0224edf653c1e38229e1d32ed449ffd23bd/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603be0224edf653c1e38229e1d32ed449ffd23bd/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=603be0224edf653c1e38229e1d32ed449ffd23bd", "patch": "@@ -2089,7 +2089,7 @@ static enum tree_code cp_parser_assignment_operator_opt\n static cp_expr cp_parser_expression\n   (cp_parser *, cp_id_kind * = NULL, bool = false, bool = false);\n static cp_expr cp_parser_constant_expression\n-  (cp_parser *, bool = false, bool * = NULL);\n+  (cp_parser *, bool = false, bool * = NULL, bool = false);\n static cp_expr cp_parser_builtin_offsetof\n   (cp_parser *);\n static cp_expr cp_parser_lambda_expression\n@@ -9626,12 +9626,15 @@ cp_parser_expression (cp_parser* parser, cp_id_kind * pidk,\n   If ALLOW_NON_CONSTANT_P a non-constant expression is silently\n   accepted.  If ALLOW_NON_CONSTANT_P is true and the expression is not\n   constant, *NON_CONSTANT_P is set to TRUE.  If ALLOW_NON_CONSTANT_P\n-  is false, NON_CONSTANT_P should be NULL.  */\n+  is false, NON_CONSTANT_P should be NULL.  If STRICT_P is true,\n+  only parse a conditional-expression, otherwise parse an\n+  assignment-expression.  See below for rationale.  */\n \n static cp_expr\n cp_parser_constant_expression (cp_parser* parser,\n \t\t\t       bool allow_non_constant_p,\n-\t\t\t       bool *non_constant_p)\n+\t\t\t       bool *non_constant_p,\n+\t\t\t       bool strict_p)\n {\n   bool saved_integral_constant_expression_p;\n   bool saved_allow_non_integral_constant_expression_p;\n@@ -9665,16 +9668,27 @@ cp_parser_constant_expression (cp_parser* parser,\n   parser->allow_non_integral_constant_expression_p\n     = (allow_non_constant_p || cxx_dialect >= cxx11);\n   parser->non_integral_constant_expression_p = false;\n-  /* Although the grammar says \"conditional-expression\", we parse an\n-     \"assignment-expression\", which also permits \"throw-expression\"\n-     and the use of assignment operators.  In the case that\n-     ALLOW_NON_CONSTANT_P is false, we get better errors than we would\n+  /* Although the grammar says \"conditional-expression\", when not STRICT_P,\n+     we parse an \"assignment-expression\", which also permits\n+     \"throw-expression\" and the use of assignment operators.  In the case\n+     that ALLOW_NON_CONSTANT_P is false, we get better errors than we would\n      otherwise.  In the case that ALLOW_NON_CONSTANT_P is true, it is\n      actually essential that we look for an assignment-expression.\n      For example, cp_parser_initializer_clauses uses this function to\n      determine whether a particular assignment-expression is in fact\n      constant.  */\n-  expression = cp_parser_assignment_expression (parser);\n+  if (strict_p)\n+    {\n+      /* Parse the binary expressions (logical-or-expression).  */\n+      expression = cp_parser_binary_expression (parser, false, false, false,\n+\t\t\t\t\t\tPREC_NOT_OPERATOR, NULL);\n+      /* If the next token is a `?' then we're actually looking at\n+\t a conditional-expression; otherwise we're done.  */\n+      if (cp_lexer_next_token_is (parser->lexer, CPP_QUERY))\n+\texpression = cp_parser_question_colon_clause (parser, expression);\n+    }\n+  else\n+    expression = cp_parser_assignment_expression (parser);\n   /* Restore the old settings.  */\n   parser->integral_constant_expression_p\n     = saved_integral_constant_expression_p;\n@@ -23445,6 +23459,7 @@ cp_parser_member_declaration (cp_parser* parser)\n \t{\n \t  tree attributes = NULL_TREE;\n \t  tree first_attribute;\n+\t  tree initializer;\n \t  bool is_bitfld = false;\n \t  bool named_bitfld = false;\n \n@@ -23492,18 +23507,48 @@ cp_parser_member_declaration (cp_parser* parser)\n \t      cp_lexer_consume_token (parser->lexer);\n \n \t      /* Get the width of the bitfield.  */\n-\t      width = cp_parser_constant_expression (parser);\n-\n-\t      /* Look for attributes that apply to the bitfield after\n-\t\t the `:' token and width.  This is where GCC used to\n-\t\t parse attributes in the past, pedwarn if there is\n-\t\t a std attribute.  */\n-\t      if (cp_next_tokens_can_be_std_attribute_p (parser))\n-\t\tpedwarn (input_location, OPT_Wpedantic,\n-\t\t\t \"ISO C++ allows bit-field attributes only before \"\n-\t\t\t \"the %<:%> token\");\n-\n-\t      late_attributes = cp_parser_attributes_opt (parser);\n+\t      width = cp_parser_constant_expression (parser, false, NULL,\n+\t\t\t\t\t\t     cxx_dialect >= cxx11);\n+\n+\t      /* In C++2A and as extension for C++11 and above we allow\n+\t\t default member initializers for bit-fields.  */\n+\t      initializer = NULL_TREE;\n+\t      if (cxx_dialect >= cxx11\n+\t\t  && (cp_lexer_next_token_is (parser->lexer, CPP_EQ)\n+\t\t      || cp_lexer_next_token_is (parser->lexer,\n+\t\t\t\t\t\t CPP_OPEN_BRACE)))\n+\t\t{\n+\t\t  location_t loc\n+\t\t    = cp_lexer_peek_token (parser->lexer)->location;\n+\t\t  if (cxx_dialect < cxx2a\n+\t\t      && !in_system_header_at (loc)\n+\t\t      && identifier != NULL_TREE)\n+\t\t    pedwarn (loc, 0,\n+\t\t\t     \"default member initializers for bit-fields \"\n+\t\t\t     \"only available with -std=c++2a or \"\n+\t\t\t     \"-std=gnu++2a\");\n+\n+\t\t  initializer = cp_parser_save_nsdmi (parser);\n+\t\t  if (identifier == NULL_TREE)\n+\t\t    {\n+\t\t      error_at (loc, \"default member initializer for \"\n+\t\t\t\t     \"unnamed bit-field\");\n+\t\t      initializer = NULL_TREE;\n+\t\t    }\n+\t\t}\n+\t      else\n+\t\t{ \n+\t\t  /* Look for attributes that apply to the bitfield after\n+\t\t     the `:' token and width.  This is where GCC used to\n+\t\t     parse attributes in the past, pedwarn if there is\n+\t\t     a std attribute.  */\n+\t\t  if (cp_next_tokens_can_be_std_attribute_p (parser))\n+\t\t    pedwarn (input_location, OPT_Wpedantic,\n+\t\t\t     \"ISO C++ allows bit-field attributes only \"\n+\t\t\t     \"before the %<:%> token\");\n+\n+\t\t  late_attributes = cp_parser_attributes_opt (parser);\n+\t\t}\n \n \t      attributes = chainon (attributes, late_attributes);\n \n@@ -23520,13 +23565,12 @@ cp_parser_member_declaration (cp_parser* parser)\n \t\t\t\t\t\t\t sfk_none)\n \t\t\t\t   : NULL,\n \t\t\t\t   &decl_specifiers,\n-\t\t\t\t   width,\n+\t\t\t\t   width, initializer,\n \t\t\t\t   attributes);\n \t    }\n \t  else\n \t    {\n \t      cp_declarator *declarator;\n-\t      tree initializer;\n \t      tree asm_specification;\n \t      int ctor_dtor_or_conv_p;\n \n@@ -23745,7 +23789,6 @@ cp_parser_member_declaration (cp_parser* parser)\n \t      if (TREE_CODE (decl) == FUNCTION_DECL)\n \t\tcp_parser_save_default_args (parser, decl);\n \t      else if (TREE_CODE (decl) == FIELD_DECL\n-\t\t       && !DECL_C_BIT_FIELD (decl)\n \t\t       && DECL_INITIAL (decl))\n \t\t/* Add DECL to the queue of NSDMI to be parsed later.  */\n \t\tvec_safe_push (unparsed_nsdmis, decl);\n@@ -30086,10 +30129,9 @@ cp_parser_objc_class_ivars (cp_parser* parser)\n \t  attributes = chainon (prefix_attributes, attributes);\n \n \t  if (width)\n-\t      /* Create the bitfield declaration.  */\n-\t      decl = grokbitfield (declarator, &declspecs,\n-\t\t\t\t   width,\n-\t\t\t\t   attributes);\n+\t    /* Create the bitfield declaration.  */\n+\t    decl = grokbitfield (declarator, &declspecs,\n+\t\t\t\t width, NULL_TREE, attributes);\n \t  else\n \t    decl = grokfield (declarator, &declspecs,\n \t\t\t      NULL_TREE, /*init_const_expr_p=*/false,"}, {"sha": "c29c779a14783b565bc357c3a8de46fa809215c0", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603be0224edf653c1e38229e1d32ed449ffd23bd/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603be0224edf653c1e38229e1d32ed449ffd23bd/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=603be0224edf653c1e38229e1d32ed449ffd23bd", "patch": "@@ -12841,7 +12841,7 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \t\t= tsubst_expr (DECL_BIT_FIELD_REPRESENTATIVE (t), args,\n \t\t\t       complain, in_decl,\n \t\t\t       /*integral_constant_expression_p=*/true);\n-\t    else if (DECL_INITIAL (t))\n+\t    if (DECL_INITIAL (t))\n \t      {\n \t\t/* Set up DECL_TEMPLATE_INFO so that we can get at the\n \t\t   NSDMI in perform_member_init.  Still set DECL_INITIAL"}, {"sha": "94cedb737173257bd9e76ef7e1bc1adc6400f980", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603be0224edf653c1e38229e1d32ed449ffd23bd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603be0224edf653c1e38229e1d32ed449ffd23bd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=603be0224edf653c1e38229e1d32ed449ffd23bd", "patch": "@@ -1,3 +1,11 @@\n+2017-09-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tP0683R1 - default member initializers for bit-fields\n+\t* g++.dg/ext/bitfield6.C: New test.\n+\t* g++.dg/cpp2a/bitfield1.C: New test.\n+\t* g++.dg/cpp2a/bitfield2.C: New test.\n+\t* g++.dg/cpp2a/bitfield3.C: New test.\n+\n 2017-09-29  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR target/81481"}, {"sha": "497b529854bcb1260635f219555deb122a813488", "filename": "gcc/testsuite/g++.dg/cpp2a/bitfield1.C", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603be0224edf653c1e38229e1d32ed449ffd23bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbitfield1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603be0224edf653c1e38229e1d32ed449ffd23bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbitfield1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbitfield1.C?ref=603be0224edf653c1e38229e1d32ed449ffd23bd", "patch": "@@ -0,0 +1,77 @@\n+// P0683R1\n+// { dg-do run { target c++11 } }\n+// { dg-options \"\" }\n+\n+extern \"C\" void abort ();\n+int a;\n+const int b = 0;\n+struct S {\n+  int c : 5 = 1;\t\t// { dg-warning \"default member initializers for bit-fields only available with\" \"\" { target c++17_down } }\n+  int d : 6 { 2 };\t\t// { dg-warning \"default member initializers for bit-fields only available with\" \"\" { target c++17_down } }\n+  int e : true ? 7 : a = 3;\n+  int f : (true ? 8 : b) = 4;\t// { dg-warning \"default member initializers for bit-fields only available with\" \"\" { target c++17_down } }\n+  int g : (true ? 9 : b) { 5 };\t// { dg-warning \"default member initializers for bit-fields only available with\" \"\" { target c++17_down } }\n+  int h : 1 || new int { 0 };\n+};\n+#if __cplusplus >= 201402L\n+static_assert (S{}.c == 1);\n+static_assert (S{}.d == 2);\n+static_assert (S{}.e == 0);\n+static_assert (S{}.f == 4);\n+static_assert (S{}.g == 5);\n+static_assert (S{}.h == 0);\n+#endif\n+template <bool V, int W>\n+struct U {\n+  int j : W = 7;\t\t// { dg-warning \"default member initializers for bit-fields only available with\" \"\" { target c++17_down } }\n+  int k : W { 8 };\t\t// { dg-warning \"default member initializers for bit-fields only available with\" \"\" { target c++17_down } }\n+  int l : V ? 7 : a = 3;\n+  int m : (V ? W : b) = 9;\t// { dg-warning \"default member initializers for bit-fields only available with\" \"\" { target c++17_down } }\n+  int n : (V ? W : b) { 10 };\t// { dg-warning \"default member initializers for bit-fields only available with\" \"\" { target c++17_down } }\n+  int o : 1 || new int { 0 };\n+};\n+#if __cplusplus >= 201402L\n+static_assert (U<true, 12>{}.j == 7);\n+static_assert (U<true, 13>{}.k == 8);\n+static_assert (U<true, 10>{}.l == 0);\n+static_assert (U<true, 11>{}.m == 9);\n+static_assert (U<true, 8>{}.n == 10);\n+static_assert (U<true, 7>{}.o == 0);\n+#endif\n+S s;\n+U<true, 10> u;\n+\n+int\n+main ()\n+{\n+  if (s.c != 1 || s.d != 2 || s.e != 0 || s.f != 4 || s.g != 5 || s.h != 0)\n+    abort ();\n+  s.c = 47;\t\t// { dg-warning \"overflow in conversion from\" }\n+  s.d = 47 * 2;\t\t// { dg-warning \"overflow in conversion from\" }\n+  s.e = 47 * 4;\t\t// { dg-warning \"overflow in conversion from\" }\n+  s.f = 47 * 8;\t\t// { dg-warning \"overflow in conversion from\" }\n+  s.g = 47 * 16;\t// { dg-warning \"overflow in conversion from\" }\n+  s.h = 2;\t\t// { dg-warning \"overflow in conversion from\" }\n+  if (s.c != 15 || s.d != 15 * 2 || s.e != 15 * 4 || s.f != 15 * 8 || s.g != 15 * 16 || s.h != 0)\n+    abort ();\n+  if (u.j != 7 || u.k != 8 || u.l != 0 || u.m != 9 || u.n != 10 || u.o != 0)\n+    abort ();\n+  u.j = 47 * 32;\t// { dg-warning \"overflow in conversion from\" }\n+  u.k = 47 * 32;\t// { dg-warning \"overflow in conversion from\" }\n+  u.l = 47 * 4;\t\t// { dg-warning \"overflow in conversion from\" }\n+  u.m = 47 * 32;\t// { dg-warning \"overflow in conversion from\" }\n+  u.n = 47 * 32;\t// { dg-warning \"overflow in conversion from\" }\n+  u.o = 2;\t\t// { dg-warning \"overflow in conversion from\" }\n+  if (u.j != 15 * 32 || u.k != 15 * 32 || u.l != 15 * 4 || u.m != 15 * 32 || u.n != 15 * 32 || u.o != 0)\n+    abort ();\n+  s.c = 15;\n+  s.d = 15 * 2;\n+  s.e = 15 * 4;\n+  s.f = 16 * 8;\n+  s.g = 15 * 16;\n+  u.j = 15 * 32;\n+  u.k = 15 * 32;\n+  u.l = 15 * 4;\n+  u.m = 15 * 32;\n+  u.n = 15 * 32;\n+}"}, {"sha": "dcb424fc8f6624c1bac83e900774ef138a1a5f40", "filename": "gcc/testsuite/g++.dg/cpp2a/bitfield2.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603be0224edf653c1e38229e1d32ed449ffd23bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbitfield2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603be0224edf653c1e38229e1d32ed449ffd23bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbitfield2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbitfield2.C?ref=603be0224edf653c1e38229e1d32ed449ffd23bd", "patch": "@@ -0,0 +1,26 @@\n+// P0683R1\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"\" }\n+\n+int a;\n+const int b = 0;\n+struct T {\n+  int i : true ? 10 : b = 6;\t// { dg-error \"assignment of read-only variable\" }\n+  int : 4 = 10;\t\t\t// { dg-error \"default member initializer for unnamed bit-field\" }\n+  int : 5 = a + b;\t\t// { dg-error \"default member initializer for unnamed bit-field\" }\n+};\n+template <bool V, int W>\n+struct U {\n+  int j : W = 7;\t\t// { dg-warning \"default member initializers for bit-fields only available with\" \"\" { target c++17_down } }\n+  int k : W { 8 };\t\t// { dg-warning \"default member initializers for bit-fields only available with\" \"\" { target c++17_down } }\n+  int l : V ? 7 : a = 3;\t// { dg-error \"modification of .a. is not a constant expression\" }\n+\t\t\t\t// { dg-error \"width not an integer constant\" \"\" { target *-*-* } .-1 }\n+  int m : (V ? W : b) = 9;\t// { dg-warning \"default member initializers for bit-fields only available with\" \"\" { target c++17_down } }\n+\t\t\t\t// { dg-error \"zero width for bit-field\" \"\" { target *-*-* } .-1 }\n+  int n : (V ? W : b) { 10 };\t// { dg-warning \"default member initializers for bit-fields only available with\" \"\" { target c++17_down } }\n+\t\t\t\t// { dg-error \"zero width for bit-field\" \"\" { target *-*-* } .-1 }\n+  int o : 1 || new int { 0 };\n+  int : 4 = 10;\t\t\t// { dg-error \"default member initializer for unnamed bit-field\" }\n+  int : 5 = a + b;\t\t// { dg-error \"default member initializer for unnamed bit-field\" }\n+};\n+U<false, 10> u;"}, {"sha": "511c8894703fc4f4b7925b18dde280a47520c7b8", "filename": "gcc/testsuite/g++.dg/cpp2a/bitfield3.C", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603be0224edf653c1e38229e1d32ed449ffd23bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbitfield3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603be0224edf653c1e38229e1d32ed449ffd23bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbitfield3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbitfield3.C?ref=603be0224edf653c1e38229e1d32ed449ffd23bd", "patch": "@@ -0,0 +1,55 @@\n+// P0683R1\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"\" }\n+\n+extern \"C\" void abort ();\n+\n+int\n+foo ()\n+{\n+  return 2;\n+}\n+\n+int a = foo ();\n+const int b = 0;\n+struct S {\n+  int c : 5 = 2 * a;\t\t\t// { dg-warning \"default member initializers for bit-fields only available with\" \"\" { target c++17_down } }\n+  int d : 6 { c + a };\t\t\t// { dg-warning \"default member initializers for bit-fields only available with\" \"\" { target c++17_down } }\n+\t\t\t\t\t// { dg-warning \"narrowing conversion of\" \"\" { target *-*-* } .-1 }\n+  int e : true ? 7 : a = 3;\n+  int f : (true ? 8 : b) = d + a;\t// { dg-warning \"default member initializers for bit-fields only available with\" \"\" { target c++17_down } }\n+  int g : (true ? 9 : b) { f + a };\t// { dg-warning \"default member initializers for bit-fields only available with\" \"\" { target c++17_down } }\n+\t\t\t\t\t// { dg-warning \"narrowing conversion of\" \"\" { target *-*-* } .-1 }\n+  int h : 1 || new int { 0 };\n+  int i = g + a;\n+};\n+S c;\n+template <bool V, int W>\n+struct U {\n+  int j : W = 3 * a;\t\t\t// { dg-warning \"default member initializers for bit-fields only available with\" \"\" { target c++17_down } }\n+  int k : W { j + a };\t\t\t// { dg-warning \"default member initializers for bit-fields only available with\" \"\" { target c++17_down } }\n+\t\t\t\t\t// { dg-warning \"narrowing conversion of\" \"\" { target *-*-* } .-1 }\n+  int l : V ? 7 : a = 3;\n+  int m : (V ? W : b) = k + a;\t\t// { dg-warning \"default member initializers for bit-fields only available with\" \"\" { target c++17_down } }\n+  int n : (V ? W : b) { m + a };\t// { dg-warning \"default member initializers for bit-fields only available with\" \"\" { target c++17_down } }\n+\t\t\t\t\t// { dg-warning \"narrowing conversion of\" \"\" { target *-*-* } .-1 }\n+  int o : 1 || new int { 0 };\n+  int p = n + a;\n+};\n+U<true, 10> d;\n+\n+int\n+main ()\n+{\n+  a = 1;\n+  if (c.c != 4 || c.d != 6 || c.e != 0 || c.f != 8 || c.g != 10 || c.h != 0 || c.i != 12)\n+    abort ();\n+  if (d.j != 6 || d.k != 8 || d.l != 0 || d.m != 10 || d.n != 12 || d.o != 0 || d.p != 14)\n+    abort ();\n+  S s;\n+  U<true, 10> u;\n+  if (s.c != 2 || s.d != 3 || s.f != 4 || s.g != 5 || s.i != 6)\n+    abort ();\n+  if (u.j != 3 || u.k != 4 || u.m != 5 || u.n != 6 || u.p != 7)\n+    abort ();\n+}"}, {"sha": "4b0bb77509c643d4bfa8485df47fb41c32b62c26", "filename": "gcc/testsuite/g++.dg/ext/bitfield6.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603be0224edf653c1e38229e1d32ed449ffd23bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbitfield6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603be0224edf653c1e38229e1d32ed449ffd23bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbitfield6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbitfield6.C?ref=603be0224edf653c1e38229e1d32ed449ffd23bd", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"\" }\n+\n+struct S {\n+  char a [[gnu::packed]] = 1;\t\t// { dg-warning \"attribute ignored for field of type\" }\n+  char b [[gnu::packed]] : 8;\n+  char c [[gnu::packed]] : 8 = 2;\t// { dg-warning \"default member initializers for bit-fields only available with\" \"\" { target c++17_down } }\n+};\n+template <typename U>\n+struct T {\n+  U d [[gnu::packed]] = 1;\t\t// { dg-warning \"attribute ignored for field of type\" }\n+  U e [[gnu::packed]] : 8;\n+  U f [[gnu::packed]] : 8 = 2;\t\t// { dg-warning \"default member initializers for bit-fields only available with\" \"\" { target c++17_down } }\n+};\n+T<char> t;"}]}