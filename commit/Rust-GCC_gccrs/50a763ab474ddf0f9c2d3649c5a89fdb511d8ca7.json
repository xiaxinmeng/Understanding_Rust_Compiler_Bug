{"sha": "50a763ab474ddf0f9c2d3649c5a89fdb511d8ca7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBhNzYzYWI0NzRkZGYwZjljMmQzNjQ5YzVhODlmZGI1MTFkOGNhNw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-03-16T09:54:36Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-03-16T09:54:36Z"}, "message": "tree-vect-loop.c (get_initial_def_for_induction): Use build_constructor directly.\n\n2012-03-16  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-vect-loop.c (get_initial_def_for_induction): Use\n\tbuild_constructor directly.\n\t* tree-vect-stmts.c (vect_get_vec_def_for_operand): Use\n\tbuild_vector_from_val.\n\t* tree.c (build_vector_from_val): Avoid creating a constructor\n\tfirst when we want a constant vector.\n\nFrom-SVN: r185461", "tree": {"sha": "222248ef75fc9b6a3c7c0bfe3657c6acaef2e6b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/222248ef75fc9b6a3c7c0bfe3657c6acaef2e6b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50a763ab474ddf0f9c2d3649c5a89fdb511d8ca7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50a763ab474ddf0f9c2d3649c5a89fdb511d8ca7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50a763ab474ddf0f9c2d3649c5a89fdb511d8ca7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50a763ab474ddf0f9c2d3649c5a89fdb511d8ca7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a26a74d8e650ac559c6fc60d061a59b5f8a93bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a26a74d8e650ac559c6fc60d061a59b5f8a93bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a26a74d8e650ac559c6fc60d061a59b5f8a93bb"}], "stats": {"total": 51, "additions": 29, "deletions": 22}, "files": [{"sha": "4fef9b17739babd1dc1dd676e6f8d0306cfbdd40", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a763ab474ddf0f9c2d3649c5a89fdb511d8ca7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a763ab474ddf0f9c2d3649c5a89fdb511d8ca7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=50a763ab474ddf0f9c2d3649c5a89fdb511d8ca7", "patch": "@@ -1,3 +1,12 @@\n+2012-03-16  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-vect-loop.c (get_initial_def_for_induction): Use\n+\tbuild_constructor directly.\n+\t* tree-vect-stmts.c (vect_get_vec_def_for_operand): Use\n+\tbuild_vector_from_val.\n+\t* tree.c (build_vector_from_val): Avoid creating a constructor\n+\tfirst when we want a constant vector.\n+\n 2012-03-16  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* doc/install.texi (Specific, *-*-solaris2*): Improve wording."}, {"sha": "abf131e3c26e89be8f0fed46e588736d90f2c02d", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a763ab474ddf0f9c2d3649c5a89fdb511d8ca7/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a763ab474ddf0f9c2d3649c5a89fdb511d8ca7/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=50a763ab474ddf0f9c2d3649c5a89fdb511d8ca7", "patch": "@@ -3041,6 +3041,8 @@ get_initial_def_for_induction (gimple iv_phi)\n     }\n   else\n     {\n+      VEC(constructor_elt,gc) *v;\n+\n       /* iv_loop is the loop to be vectorized. Create:\n \t vec_init = [X, X+S, X+2*S, X+3*S] (S = step_expr, X = init_expr)  */\n       new_var = vect_get_new_vect_var (scalar_type, vect_scalar_var, \"var_\");\n@@ -3053,8 +3055,8 @@ get_initial_def_for_induction (gimple iv_phi)\n \t  gcc_assert (!new_bb);\n \t}\n \n-      t = NULL_TREE;\n-      t = tree_cons (NULL_TREE, new_name, t);\n+      v = VEC_alloc (constructor_elt, gc, nunits);\n+      CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, new_name);\n       for (i = 1; i < nunits; i++)\n \t{\n \t  /* Create: new_name_i = new_name + step_expr  */\n@@ -3073,10 +3075,10 @@ get_initial_def_for_induction (gimple iv_phi)\n \t      fprintf (vect_dump, \"created new init_stmt: \");\n \t      print_gimple_stmt (vect_dump, init_stmt, 0, TDF_SLIM);\n \t    }\n-\t  t = tree_cons (NULL_TREE, new_name, t);\n+\t  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, new_name);\n \t}\n       /* Create a vector from [new_name_0, new_name_1, ..., new_name_nunits-1]  */\n-      vec = build_constructor_from_list (vectype, nreverse (t));\n+      vec = build_constructor (vectype, v);\n       vec_init = vect_init_vector (iv_phi, vec, vectype, NULL);\n     }\n "}, {"sha": "8a1c6788e5057f2fc908745879a258cbf9b27271", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a763ab474ddf0f9c2d3649c5a89fdb511d8ca7/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a763ab474ddf0f9c2d3649c5a89fdb511d8ca7/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=50a763ab474ddf0f9c2d3649c5a89fdb511d8ca7", "patch": "@@ -1227,9 +1227,7 @@ vect_get_vec_def_for_operand (tree op, gimple stmt, tree *scalar_def)\n   loop_vec_info loop_vinfo = STMT_VINFO_LOOP_VINFO (stmt_vinfo);\n   tree vec_inv;\n   tree vec_cst;\n-  tree t = NULL_TREE;\n   tree def;\n-  int i;\n   enum vect_def_type dt;\n   bool is_simple_use;\n   tree vector_type;\n@@ -1284,7 +1282,6 @@ vect_get_vec_def_for_operand (tree op, gimple stmt, tree *scalar_def)\n       {\n \tvector_type = get_vectype_for_scalar_type (TREE_TYPE (def));\n \tgcc_assert (vector_type);\n-\tnunits = TYPE_VECTOR_SUBPARTS (vector_type);\n \n \tif (scalar_def)\n \t  *scalar_def = def;\n@@ -1293,13 +1290,7 @@ vect_get_vec_def_for_operand (tree op, gimple stmt, tree *scalar_def)\n         if (vect_print_dump_info (REPORT_DETAILS))\n           fprintf (vect_dump, \"Create vector_inv.\");\n \n-        for (i = nunits - 1; i >= 0; --i)\n-          {\n-            t = tree_cons (NULL_TREE, def, t);\n-          }\n-\n-\t/* FIXME: use build_constructor directly.  */\n-        vec_inv = build_constructor_from_list (vector_type, t);\n+\tvec_inv = build_vector_from_val (vector_type, def);\n         return vect_init_vector (stmt, vec_inv, vector_type, NULL);\n       }\n "}, {"sha": "cfea9f7b88db805f4c51ad1574c91b3bae36ff64", "filename": "gcc/tree.c", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a763ab474ddf0f9c2d3649c5a89fdb511d8ca7/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a763ab474ddf0f9c2d3649c5a89fdb511d8ca7/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=50a763ab474ddf0f9c2d3649c5a89fdb511d8ca7", "patch": "@@ -1372,7 +1372,6 @@ tree\n build_vector_from_val (tree vectype, tree sc) \n {\n   int i, nunits = TYPE_VECTOR_SUBPARTS (vectype);\n-  VEC(constructor_elt, gc) *v = NULL;\n \n   if (sc == error_mark_node)\n     return sc;\n@@ -1386,14 +1385,20 @@ build_vector_from_val (tree vectype, tree sc)\n   gcc_checking_assert (types_compatible_p (TYPE_MAIN_VARIANT (TREE_TYPE (sc)),\n \t\t\t\t\t   TREE_TYPE (vectype)));\n \n-  v = VEC_alloc (constructor_elt, gc, nunits);\n-  for (i = 0; i < nunits; ++i)\n-    CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, sc);\n-\n   if (CONSTANT_CLASS_P (sc))\n-    return build_vector_from_ctor (vectype, v);\n-  else \n-    return build_constructor (vectype, v);\n+    {\n+      tree *v = XALLOCAVEC (tree, nunits);\n+      for (i = 0; i < nunits; ++i)\n+\tv[i] = sc;\n+      return build_vector (vectype, v);\n+    }\n+  else\n+    {\n+      VEC(constructor_elt, gc) *v = VEC_alloc (constructor_elt, gc, nunits);\n+      for (i = 0; i < nunits; ++i)\n+\tCONSTRUCTOR_APPEND_ELT (v, NULL_TREE, sc);\n+      return build_constructor (vectype, v);\n+    }\n }\n \n /* Return a new CONSTRUCTOR node whose type is TYPE and whose values"}]}