{"sha": "c3d1e92298e878460ba4211463b2a2d13c8303d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNkMWU5MjI5OGU4Nzg0NjBiYTQyMTE0NjNiMmEyZDEzYzgzMDNkOA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2009-06-15T10:29:47Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2009-06-15T10:29:47Z"}, "message": "optimize-bswap-1.c: Split into these two:\n\n2009-06-14  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* gcc.dg/optimize-bswap-1.c: Split into these two:\n\t* gcc.dg/optimize-bswapsi-1.c: New testcase.\n\t* gcc.dg/optimize-bswapdi-1.c: New testcase.\n\nFrom-SVN: r148487", "tree": {"sha": "4521b8a54a0704d3ba04ace3a5375df407cb50c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4521b8a54a0704d3ba04ace3a5375df407cb50c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3d1e92298e878460ba4211463b2a2d13c8303d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3d1e92298e878460ba4211463b2a2d13c8303d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3d1e92298e878460ba4211463b2a2d13c8303d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3d1e92298e878460ba4211463b2a2d13c8303d8/comments", "author": null, "committer": null, "parents": [{"sha": "0eb927358f30bb2544ed3ca4a2d69f2079aad80f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eb927358f30bb2544ed3ca4a2d69f2079aad80f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0eb927358f30bb2544ed3ca4a2d69f2079aad80f"}], "stats": {"total": 71, "additions": 44, "deletions": 27}, "files": [{"sha": "b03a70f2023185899e7d409fadf3334fc68a49af", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3d1e92298e878460ba4211463b2a2d13c8303d8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3d1e92298e878460ba4211463b2a2d13c8303d8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c3d1e92298e878460ba4211463b2a2d13c8303d8", "patch": "@@ -1,3 +1,9 @@\n+2009-06-14  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* gcc.dg/optimize-bswap-1.c: Split into these two:\n+\t* gcc.dg/optimize-bswapsi-1.c: New testcase.\n+\t* gcc.dg/optimize-bswapdi-1.c: New testcase.\n+\n 2009-06-14  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* gcc.dg/optimize-bswap-1.c: New testcase."}, {"sha": "45fb2af2b306a5cbb5d3e3b293c49866609b1569", "filename": "gcc/testsuite/gcc.dg/optimize-bswapdi-1.c", "status": "renamed", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3d1e92298e878460ba4211463b2a2d13c8303d8/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapdi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3d1e92298e878460ba4211463b2a2d13c8303d8/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapdi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapdi-1.c?ref=c3d1e92298e878460ba4211463b2a2d13c8303d8", "patch": "@@ -1,15 +1,9 @@\n-/* { dg-do compile } */\n+/* { dg-do compile { target alpha*-*-* ia64*-*-* x86_64-*-* s390x-*-* } } */\n /* { dg-require-effective-target stdint_types } */\n+/* { dg-require-effective-target lp64 } */\n /* { dg-options \"-O2 -fdump-tree-bswap\" } */\n \n #include <stdint.h>\n-\n-#define __const_swab32(x) ((uint32_t)(\t\t\t\t      \\\n-        (((uint32_t)(x) & (uint32_t)0x000000ffUL) << 24) |            \\\n-        (((uint32_t)(x) & (uint32_t)0x0000ff00UL) <<  8) |            \\\n-        (((uint32_t)(x) & (uint32_t)0x00ff0000UL) >>  8) |            \\\n-        (((uint32_t)(x) & (uint32_t)0xff000000UL) >> 24)))\n-\n #define __const_swab64(x) ((uint64_t)(\t\t\t                        \\\n \t(((uint64_t)(x) & (uint64_t)0x00000000000000ffULL) << 56) |             \\\n \t(((uint64_t)(x) & (uint64_t)0x000000000000ff00ULL) << 40) |\t\t\\\n@@ -20,33 +14,15 @@\n \t(((uint64_t)(x) & (uint64_t)0x00ff000000000000ULL) >> 40) |\t\t\\\n \t(((uint64_t)(x) & (uint64_t)0xff00000000000000ULL) >> 56)))\n \n+\n /* This byte swap implementation is used by the Linux kernel and the\n    GNU C library.  */\n \n-uint32_t\n-swap32_a (uint32_t in)\n-{\n-  return __const_swab32 (in);\n-}\n-\n uint64_t\n swap64 (uint64_t in)\n {\n   return __const_swab64 (in);\n }\n \n-/* The OpenSSH byte swap implementation.  */\n-uint32_t\n-swap32_b (uint32_t in)\n-{\n-  uint32_t a;\n-\n-  a = (in << 16) | (in >> 16);\n-  a = ((a & 0x00ff00ff) << 8) | ((a & 0xff00ff00) >> 8);\n-\n-  return a;\n-}\n-\n-/* { dg-final { scan-tree-dump-times \"32 bit bswap implementation found at\" 2 \"bswap\" } } */\n /* { dg-final { scan-tree-dump-times \"64 bit bswap implementation found at\" 1 \"bswap\" } } */\n /* { dg-final { cleanup-tree-dump \"bswap\" } } */", "previous_filename": "gcc/testsuite/gcc.dg/optimize-bswap-1.c"}, {"sha": "fc77296d522f54e31afbb43008c22e1f86a99858", "filename": "gcc/testsuite/gcc.dg/optimize-bswapsi-1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3d1e92298e878460ba4211463b2a2d13c8303d8/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapsi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3d1e92298e878460ba4211463b2a2d13c8303d8/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapsi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapsi-1.c?ref=c3d1e92298e878460ba4211463b2a2d13c8303d8", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile { target alpha*-*-* i?86-*-* powerpc*-*-* rs6000-*-* x86_64-*-* s390*-*-* } } */\n+/* { dg-require-effective-target stdint_types } */\n+/* { dg-options \"-O2 -fdump-tree-bswap\" } */\n+\n+#include <stdint.h>\n+\n+#define __const_swab32(x) ((uint32_t)(\t\t\t\t      \\\n+        (((uint32_t)(x) & (uint32_t)0x000000ffUL) << 24) |            \\\n+        (((uint32_t)(x) & (uint32_t)0x0000ff00UL) <<  8) |            \\\n+        (((uint32_t)(x) & (uint32_t)0x00ff0000UL) >>  8) |            \\\n+        (((uint32_t)(x) & (uint32_t)0xff000000UL) >> 24)))\n+\n+/* This byte swap implementation is used by the Linux kernel and the\n+   GNU C library.  */\n+\n+uint32_t\n+swap32_a (uint32_t in)\n+{\n+  return __const_swab32 (in);\n+}\n+\n+/* The OpenSSH byte swap implementation.  */\n+uint32_t\n+swap32_b (uint32_t in)\n+{\n+  uint32_t a;\n+\n+  a = (in << 16) | (in >> 16);\n+  a = ((a & 0x00ff00ff) << 8) | ((a & 0xff00ff00) >> 8);\n+\n+  return a;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"32 bit bswap implementation found at\" 2 \"bswap\" } } */\n+/* { dg-final { cleanup-tree-dump \"bswap\" } } */"}]}