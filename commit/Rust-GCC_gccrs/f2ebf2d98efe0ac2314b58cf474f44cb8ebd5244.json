{"sha": "f2ebf2d98efe0ac2314b58cf474f44cb8ebd5244", "node_id": "C_kwDOANBUbNoAKGYyZWJmMmQ5OGVmZTBhYzIzMTRiNThjZjQ3NGY0NGNiOGViZDUyNDQ", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-04-13T16:53:54Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-04-13T16:53:54Z"}, "message": "aarch64: Make sure the UF divides the VF [PR105254]\n\nIn this PR, we were trying to set the unroll factor to a value higher\nthan the minimum VF (or more specifically, to a value that doesn't\ndivide the VF).  I guess there are two approaches to this: let the\ntarget pick any value it likes and make target-independent code pare\nit back to something that makes sense, or require targets to supply\nsensible values from the outset.  This patch goes for the latter\napproach.\n\ngcc/\n\tPR tree-optimization/105254\n\t* config/aarch64/aarch64.cc\n\t(aarch64_vector_costs::determine_suggested_unroll_factor): Take a\n\tloop_vec_info as argument.  Restrict the unroll factor to values\n\tthat divide the VF.\n\t(aarch64_vector_costs::finish_cost): Update call accordingly.\n\ngcc/testsuite/\n\tPR tree-optimization/105254\n\t* g++.dg/vect/pr105254.cc: New test.", "tree": {"sha": "37e0335a1ea363dc56bc8704c96f502ec5ba4889", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37e0335a1ea363dc56bc8704c96f502ec5ba4889"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2ebf2d98efe0ac2314b58cf474f44cb8ebd5244", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2ebf2d98efe0ac2314b58cf474f44cb8ebd5244", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2ebf2d98efe0ac2314b58cf474f44cb8ebd5244", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2ebf2d98efe0ac2314b58cf474f44cb8ebd5244/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "469fad0161afeb9369010ad498198297993ca592", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/469fad0161afeb9369010ad498198297993ca592", "html_url": "https://github.com/Rust-GCC/gccrs/commit/469fad0161afeb9369010ad498198297993ca592"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "f650abbc4ce49cf0947049931f86bad1130c3428", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ebf2d98efe0ac2314b58cf474f44cb8ebd5244/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ebf2d98efe0ac2314b58cf474f44cb8ebd5244/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=f2ebf2d98efe0ac2314b58cf474f44cb8ebd5244", "patch": "@@ -15637,7 +15637,7 @@ class aarch64_vector_costs : public vector_costs\n   unsigned int adjust_body_cost (loop_vec_info, const aarch64_vector_costs *,\n \t\t\t\t unsigned int);\n   bool prefer_unrolled_loop () const;\n-  unsigned int determine_suggested_unroll_factor ();\n+  unsigned int determine_suggested_unroll_factor (loop_vec_info);\n \n   /* True if we have performed one-time initialization based on the\n      vec_info.  */\n@@ -16746,7 +16746,8 @@ adjust_body_cost_sve (const aarch64_vec_op_count *ops,\n }\n \n unsigned int\n-aarch64_vector_costs::determine_suggested_unroll_factor ()\n+aarch64_vector_costs::\n+determine_suggested_unroll_factor (loop_vec_info loop_vinfo)\n {\n   bool sve = m_vec_flags & VEC_ANY_SVE;\n   /* If we are trying to unroll an Advanced SIMD main loop that contains\n@@ -16760,6 +16761,7 @@ aarch64_vector_costs::determine_suggested_unroll_factor ()\n     return 1;\n \n   unsigned int max_unroll_factor = 1;\n+  auto vf = LOOP_VINFO_VECT_FACTOR (loop_vinfo);\n   for (auto vec_ops : m_ops)\n     {\n       aarch64_simd_vec_issue_info const *vec_issue\n@@ -16768,7 +16770,8 @@ aarch64_vector_costs::determine_suggested_unroll_factor ()\n \treturn 1;\n       /* Limit unroll factor to a value adjustable by the user, the default\n \t value is 4. */\n-      unsigned int unroll_factor = aarch64_vect_unroll_limit;\n+      unsigned int unroll_factor = MIN (aarch64_vect_unroll_limit,\n+\t\t\t\t\t(int) known_alignment (vf));\n       unsigned int factor\n        = vec_ops.reduction_latency > 1 ? vec_ops.reduction_latency : 1;\n       unsigned int temp;\n@@ -16946,7 +16949,8 @@ aarch64_vector_costs::finish_cost (const vector_costs *uncast_scalar_costs)\n     {\n       m_costs[vect_body] = adjust_body_cost (loop_vinfo, scalar_costs,\n \t\t\t\t\t     m_costs[vect_body]);\n-      m_suggested_unroll_factor = determine_suggested_unroll_factor ();\n+      m_suggested_unroll_factor\n+\t= determine_suggested_unroll_factor (loop_vinfo);\n     }\n \n   /* Apply the heuristic described above m_stp_sequence_cost.  Prefer"}, {"sha": "34814671a548c8a26324833d8db3c385e2771543", "filename": "gcc/testsuite/g++.dg/vect/pr105254.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ebf2d98efe0ac2314b58cf474f44cb8ebd5244/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr105254.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ebf2d98efe0ac2314b58cf474f44cb8ebd5244/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr105254.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr105254.cc?ref=f2ebf2d98efe0ac2314b58cf474f44cb8ebd5244", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-fvect-cost-model=dynamic -mcpu=zeus\" { target aarch64*-*-* } } */\n+\n+template <typename>\n+struct complex;\n+\n+template <>\n+struct complex<double> {\n+  void operator+= (complex r) { v_ += r.v_; }\n+  _Complex v_;\n+};\n+\n+template <typename T>\n+void\n+bar (T);\n+\n+void\n+foo (complex<double> *x)\n+{\n+  complex<double> s = {0.0};\n+\n+  for (int i = 0; i < 16; ++i)\n+    s += x[i];\n+\n+  bar<complex<double> > (s);\n+}"}]}