{"sha": "ea4d630fef8a13e6fa4a1db99b1d1057a0bd7a72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE0ZDYzMGZlZjhhMTNlNmZhNGExZGI5OWIxZDEwNTdhMGJkN2E3Mg==", "commit": {"author": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2011-04-08T11:53:25Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2011-04-08T11:53:25Z"}, "message": "re PR rtl-optimization/48302 (ICE: SIGSEGV in reposition_prologue_and_epilogue_notes (function.c:5662) with -fcrossjumping -fselective-scheduling2)\n\n\tPR rtl-optimization/48302\n\t* sel-sched-ir.h (sel_add_loop_preheaders): Update prototype.\n\t* sel-sched-ir.c (sel_add_loop_preheaders): Add 'bbs' argument.  Use\n\tit to record added preheader blocks.\n\t* sel-sched.c (setup_current_loop_nest): Add 'bbs' argument.  Pass it\n\ton to sel_add_loop_preheaders.\n\t(sel_region_init): Move call to setup_current_loop_nest after\n\tsel_init_bbs.\n\ntestsuite:\n\t* g++.dg/opt/pr48302.C: New.\n\nFrom-SVN: r172176", "tree": {"sha": "586c2008cb2ba82b8fde6b577fb903af06659acd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/586c2008cb2ba82b8fde6b577fb903af06659acd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea4d630fef8a13e6fa4a1db99b1d1057a0bd7a72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea4d630fef8a13e6fa4a1db99b1d1057a0bd7a72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea4d630fef8a13e6fa4a1db99b1d1057a0bd7a72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea4d630fef8a13e6fa4a1db99b1d1057a0bd7a72/comments", "author": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "07643d76c74845e250bdedca6b7148ebccff780b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07643d76c74845e250bdedca6b7148ebccff780b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07643d76c74845e250bdedca6b7148ebccff780b"}], "stats": {"total": 56, "additions": 47, "deletions": 9}, "files": [{"sha": "b5248e07fe1d1e466fdda23094599a1083f09744", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea4d630fef8a13e6fa4a1db99b1d1057a0bd7a72/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea4d630fef8a13e6fa4a1db99b1d1057a0bd7a72/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea4d630fef8a13e6fa4a1db99b1d1057a0bd7a72", "patch": "@@ -1,3 +1,14 @@\n+2011-04-08  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\tPR rtl-optimization/48302\n+\t* sel-sched-ir.h (sel_add_loop_preheaders): Update prototype.\n+\t* sel-sched-ir.c (sel_add_loop_preheaders): Add 'bbs' argument.  Use\n+\tit to record added preheader blocks.\n+\t* sel-sched.c (setup_current_loop_nest): Add 'bbs' argument.  Pass it\n+\ton to sel_add_loop_preheaders.\n+\t(sel_region_init): Move call to setup_current_loop_nest after\n+\tsel_init_bbs.\n+\n 2011-04-08  Alexander Monakov  <amonakov@ispras.ru>\n \n \tPR target/48273"}, {"sha": "a6daa5886dc30086f60ec1d382eed3bc05680e10", "filename": "gcc/sel-sched-ir.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea4d630fef8a13e6fa4a1db99b1d1057a0bd7a72/gcc%2Fsel-sched-ir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea4d630fef8a13e6fa4a1db99b1d1057a0bd7a72/gcc%2Fsel-sched-ir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.c?ref=ea4d630fef8a13e6fa4a1db99b1d1057a0bd7a72", "patch": "@@ -6094,11 +6094,11 @@ sel_find_rgns (void)\n   bbs_in_loop_rgns = NULL;\n }\n \n-/* Adds the preheader blocks from previous loop to current region taking\n-   it from LOOP_PREHEADER_BLOCKS (current_loop_nest).\n+/* Add the preheader blocks from previous loop to current region taking\n+   it from LOOP_PREHEADER_BLOCKS (current_loop_nest) and record them in *BBS.\n    This function is only used with -fsel-sched-pipelining-outer-loops.  */\n void\n-sel_add_loop_preheaders (void)\n+sel_add_loop_preheaders (bb_vec_t *bbs)\n {\n   int i;\n   basic_block bb;\n@@ -6109,6 +6109,7 @@ sel_add_loop_preheaders (void)\n        VEC_iterate (basic_block, preheader_blocks, i, bb);\n        i++)\n     {\n+      VEC_safe_push (basic_block, heap, *bbs, bb);\n       VEC_safe_push (basic_block, heap, last_added_blocks, bb);\n       sel_add_bb (bb);\n     }"}, {"sha": "b0c52eb8c10e3a3e8bddbd807892e7714f8d99ce", "filename": "gcc/sel-sched-ir.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea4d630fef8a13e6fa4a1db99b1d1057a0bd7a72/gcc%2Fsel-sched-ir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea4d630fef8a13e6fa4a1db99b1d1057a0bd7a72/gcc%2Fsel-sched-ir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.h?ref=ea4d630fef8a13e6fa4a1db99b1d1057a0bd7a72", "patch": "@@ -1628,7 +1628,7 @@ extern void sel_sched_region (int);\n extern loop_p get_loop_nest_for_rgn (unsigned int);\n extern bool considered_for_pipelining_p (struct loop *);\n extern void make_region_from_loop_preheader (VEC(basic_block, heap) **);\n-extern void sel_add_loop_preheaders (void);\n+extern void sel_add_loop_preheaders (bb_vec_t *);\n extern bool sel_is_loop_preheader_p (basic_block);\n extern void clear_outdated_rtx_info (basic_block);\n extern void free_data_sets (basic_block);"}, {"sha": "48fb2e0134d3d3b33c9e96abe46863806aa3a01a", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea4d630fef8a13e6fa4a1db99b1d1057a0bd7a72/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea4d630fef8a13e6fa4a1db99b1d1057a0bd7a72/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=ea4d630fef8a13e6fa4a1db99b1d1057a0bd7a72", "patch": "@@ -6801,7 +6801,7 @@ current_region_empty_p (void)\n \n /* Prepare and verify loop nest for pipelining.  */\n static void\n-setup_current_loop_nest (int rgn)\n+setup_current_loop_nest (int rgn, bb_vec_t *bbs)\n {\n   current_loop_nest = get_loop_nest_for_rgn (rgn);\n \n@@ -6810,7 +6810,7 @@ setup_current_loop_nest (int rgn)\n \n   /* If this loop has any saved loop preheaders from nested loops,\n      add these basic blocks to the current region.  */\n-  sel_add_loop_preheaders ();\n+  sel_add_loop_preheaders (bbs);\n \n   /* Check that we're starting with a valid information.  */\n   gcc_assert (loop_latch_edge (current_loop_nest));\n@@ -6849,9 +6849,6 @@ sel_region_init (int rgn)\n   if (current_region_empty_p ())\n     return true;\n \n-  if (flag_sel_sched_pipelining)\n-    setup_current_loop_nest (rgn);\n-\n   sel_setup_region_sched_flags ();\n \n   bbs = VEC_alloc (basic_block, heap, current_nr_blocks);\n@@ -6861,6 +6858,9 @@ sel_region_init (int rgn)\n \n   sel_init_bbs (bbs, NULL);\n \n+  if (flag_sel_sched_pipelining)\n+    setup_current_loop_nest (rgn, &bbs);\n+\n   /* Initialize luids and dependence analysis which both sel-sched and haifa\n      need.  */\n   sched_init_luids (bbs, NULL, NULL, NULL);"}, {"sha": "762558c34f860e797ef9cc6debb5c97a93f511e0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea4d630fef8a13e6fa4a1db99b1d1057a0bd7a72/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea4d630fef8a13e6fa4a1db99b1d1057a0bd7a72/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ea4d630fef8a13e6fa4a1db99b1d1057a0bd7a72", "patch": "@@ -1,3 +1,8 @@\n+2011-04-08  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\tPR rtl-optimization/48302\n+\t* g++.dg/opt/pr48302.C: New.\n+\n 2011-04-08  Alexander Monakov  <amonakov@ispras.ru>\n \n \tPR target/48273"}, {"sha": "fd51ba412e18a78d05bb222247e9907c421764d7", "filename": "gcc/testsuite/g++.dg/opt/pr48302.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea4d630fef8a13e6fa4a1db99b1d1057a0bd7a72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr48302.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea4d630fef8a13e6fa4a1db99b1d1057a0bd7a72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr48302.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr48302.C?ref=ea4d630fef8a13e6fa4a1db99b1d1057a0bd7a72", "patch": "@@ -0,0 +1,21 @@\n+// { dg-do compile { target powerpc*-*-* ia64-*-* x86_64-*-* } }\n+// { dg-options \"-O -fcrossjumping -fgcse -fschedule-insns2 -fsel-sched-pipelining -fsel-sched-pipelining-outer-loops -fselective-scheduling2 --param lim-expensive=320 --param min-crossjump-insns=1\" }\n+\n+struct S\n+{\n+  int i, j;\n+  S *s;\n+  ~S();\n+};\n+\n+S *gs;\n+\n+void foo ()\n+{\n+restart:\n+  for (S *s = gs; s; s = s->s)\n+    if (s->j && s->j != (s->i & 1)) {\n+\t    delete s;\n+\t    goto restart;\n+      }\n+}"}]}