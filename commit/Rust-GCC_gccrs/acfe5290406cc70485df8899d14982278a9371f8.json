{"sha": "acfe5290406cc70485df8899d14982278a9371f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNmZTUyOTA0MDZjYzcwNDg1ZGY4ODk5ZDE0OTgyMjc4YTkzNzFmOA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-04-27T07:41:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-04-27T08:30:06Z"}, "message": "tree-optimization/100278 - handle mismatched code in TBAA adjust of PRE\n\nPRE has code to adjust TBAA behavior for refs that expects the base\noperation code to match.  The testcase shows a case where we have\na VAR_DECL vs. a MEM_REF so add code to give up in such cases.\n\n2021-04-27  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/100278\n\t* tree-ssa-pre.c (compute_avail): Give up when we cannot\n\tadjust TBAA beacuse of mismatching bases.\n\n\t* gcc.dg/tree-ssa/pr100278.c: New testcase.", "tree": {"sha": "f52f3166eb0719caad9159e11b06eb35b6f394a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f52f3166eb0719caad9159e11b06eb35b6f394a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acfe5290406cc70485df8899d14982278a9371f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acfe5290406cc70485df8899d14982278a9371f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acfe5290406cc70485df8899d14982278a9371f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acfe5290406cc70485df8899d14982278a9371f8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71c8aaf29bb122ebe5e67c84903fd23ff05f04ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71c8aaf29bb122ebe5e67c84903fd23ff05f04ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71c8aaf29bb122ebe5e67c84903fd23ff05f04ec"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "8d702284c3ae9f3a9d71da2c94f2bca6fffadf91", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr100278.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acfe5290406cc70485df8899d14982278a9371f8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr100278.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acfe5290406cc70485df8899d14982278a9371f8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr100278.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr100278.c?ref=acfe5290406cc70485df8899d14982278a9371f8", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+void a()\n+{\n+#if defined __s390__\n+  register int b asm(\"r5\");\n+#elif defined __x86_64__\n+  register int b asm(\"eax\");\n+#else\n+  volatile int b;\n+#endif\n+  if (b)\n+    b = 1;\n+  for (; b;)\n+    ;\n+}"}, {"sha": "2d22535af879c5312b5648636381c12b360a8e35", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acfe5290406cc70485df8899d14982278a9371f8/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acfe5290406cc70485df8899d14982278a9371f8/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=acfe5290406cc70485df8899d14982278a9371f8", "patch": "@@ -4151,6 +4151,16 @@ compute_avail (void)\n \t\t      if (ref->set == set\n \t\t\t  || alias_set_subset_of (set, ref->set))\n \t\t\t;\n+\t\t      else if (ref1->opcode != ref2->opcode\n+\t\t\t       || (ref1->opcode != MEM_REF\n+\t\t\t\t   && ref1->opcode != TARGET_MEM_REF))\n+\t\t\t{\n+\t\t\t  /* With mismatching base opcodes or bases\n+\t\t\t     other than MEM_REF or TARGET_MEM_REF we\n+\t\t\t     can't do any easy TBAA adjustment.  */\n+\t\t\t  operands.release ();\n+\t\t\t  continue;\n+\t\t\t}\n \t\t      else if (alias_set_subset_of (ref->set, set))\n \t\t\t{\n \t\t\t  ref->set = set;"}]}