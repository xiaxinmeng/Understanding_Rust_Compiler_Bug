{"sha": "863e8d53eb2940e2c8850e632afe427e164f53cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYzZThkNTNlYjI5NDBlMmM4ODUwZTYzMmFmZTQyN2UxNjRmNTNjZg==", "commit": {"author": {"name": "Pat Haugen", "email": "pthaugen@linux.ibm.com", "date": "2020-09-14T14:37:34Z"}, "committer": {"name": "Pat Haugen", "email": "pthaugen@linux.ibm.com", "date": "2020-09-14T14:37:34Z"}, "message": "Rename mffgpr/mftgpr insn types and remove Power6 references.\n\nThe following is mostly a mechanical change to rename the mffgpr/mftgpr\ninsn types to mtvsr/mfvsr to be more clear. It also removes Power6\nreferences to those insn types since we no longer generate those\ninstructions.\n\n2020-09-14  Pat Haugen  <pthaugen@linux.ibm.com>\n\ngcc/\n\t* config/rs6000/power10.md (power10-mffgpr, power10-mftgpr): Rename to\n\tpower10-mtvsr/power10-mfvsr.\n\t* config/rs6000/power6.md (X2F_power6, power6-mftgpr, power6-mffgpr):\n\tRemove.\n\t* config/rs6000/power8.md (power8-mffgpr, power8-mftgpr): Rename to\n\tpower8-mtvsr/power8-mfvsr.\n\t* config/rs6000/power9.md (power9-mffgpr, power9-mftgpr): Rename to\n\tpower9-mtvsr/power9-mfvsr.\n\t* config/rs6000/rs6000.c (rs6000_adjust_cost): Remove Power6\n\tTYPE_MFFGPR cases.\n\t* config/rs6000/rs6000.md (mffgpr, mftgpr, zero_extendsi<mode>2,\n\textendsi<mode>2, @signbit<mode>2_dm, lfiwax, lfiwzx, *movsi_internal1,\n\tmovsi_from_sf, *movdi_from_sf_zero_ext, *mov<mode>_internal,\n\tmovsd_hardfloat, movsf_from_si, *mov<mode>_hardfloat64, p8_mtvsrwz,\n\tp8_mtvsrd_df, p8_mtvsrd_sf, p8_mfvsrd_3_<mode>, *movdi_internal64,\n\tunpack<mode>_dm): Rename mffgpr/mftgpr to mtvsr/mfvsr.\n\t* config/rs6000/vsx.md (vsx_mov<mode>_64bit, vsx_extract_<mode>,\n\tvsx_extract_si, *vsx_extract_<mode>_p8): Likewise.", "tree": {"sha": "a39cb10270ff7e238084c44937f139ba94ee534b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a39cb10270ff7e238084c44937f139ba94ee534b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/863e8d53eb2940e2c8850e632afe427e164f53cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/863e8d53eb2940e2c8850e632afe427e164f53cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/863e8d53eb2940e2c8850e632afe427e164f53cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/863e8d53eb2940e2c8850e632afe427e164f53cf/comments", "author": null, "committer": null, "parents": [{"sha": "d106029c2aaf18f25bacf0d6faf9934d858ec8e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d106029c2aaf18f25bacf0d6faf9934d858ec8e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d106029c2aaf18f25bacf0d6faf9934d858ec8e6"}], "stats": {"total": 108, "additions": 37, "deletions": 71}, "files": [{"sha": "2b4d882e8dff7942acfd3672155c5ae3e61fc775", "filename": "gcc/config/rs6000/power10.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/863e8d53eb2940e2c8850e632afe427e164f53cf/gcc%2Fconfig%2Frs6000%2Fpower10.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/863e8d53eb2940e2c8850e632afe427e164f53cf/gcc%2Fconfig%2Frs6000%2Fpower10.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower10.md?ref=863e8d53eb2940e2c8850e632afe427e164f53cf", "patch": "@@ -468,13 +468,13 @@\n        (eq_attr \"cpu\" \"power10\"))\n   \"DU_super_power10,dfu_power10*8\")\n \n-(define_insn_reservation \"power10-mffgpr\" 2\n-  (and (eq_attr \"type\" \"mffgpr\")\n+(define_insn_reservation \"power10-mtvsr\" 2\n+  (and (eq_attr \"type\" \"mtvsr\")\n        (eq_attr \"cpu\" \"power10\"))\n   \"DU_slice_3_power10,VSU_power10\")\n \n-(define_insn_reservation \"power10-mftgpr\" 2\n-  (and (eq_attr \"type\" \"mftgpr\")\n+(define_insn_reservation \"power10-mfvsr\" 2\n+  (and (eq_attr \"type\" \"mfvsr\")\n        (eq_attr \"cpu\" \"power10\"))\n   \"DU_slice_3_power10,VSU_power10\")\n "}, {"sha": "e2e7582e67c6bb016b43b91de1ededd1fca49669", "filename": "gcc/config/rs6000/power6.md", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/863e8d53eb2940e2c8850e632afe427e164f53cf/gcc%2Fconfig%2Frs6000%2Fpower6.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/863e8d53eb2940e2c8850e632afe427e164f53cf/gcc%2Fconfig%2Frs6000%2Fpower6.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower6.md?ref=863e8d53eb2940e2c8850e632afe427e164f53cf", "patch": "@@ -56,10 +56,6 @@\n (define_reservation \"FX2_power6\"\n                     \"iu1_power6+iu2_power6\")\n \n-(define_reservation \"X2F_power6\"\n-                    \"(iu1_power6+iu2_power6+fpu1_power6)\\\n-                    |(iu1_power6+iu2_power6+fpu2_power6)\")\n-\n (define_reservation \"BX2_power6\"\n                     \"iu1_power6+iu2_power6+bpu_power6\")\n \n@@ -605,20 +601,3 @@\n \n (define_bypass 5 \"power6-vecperm\" \"power6-vecstore\" )\n \n-(define_insn_reservation \"power6-mftgpr\" 8\n-  (and (eq_attr \"type\" \"mftgpr\")\n-       (eq_attr \"cpu\" \"power6\"))\n-  \"X2F_power6\")\n-\n-(define_insn_reservation \"power6-mffgpr\" 14\n-  (and (eq_attr \"type\" \"mffgpr\")\n-       (eq_attr \"cpu\" \"power6\"))\n-  \"LX2_power6\")\n-\n-(define_bypass 4 \"power6-mftgpr\" \"power6-imul,\\\n-                                  power6-lmul,\\\n-                                  power6-imul-cmp,\\\n-                                  power6-lmul-cmp,\\\n-                                  power6-imul3,\\\n-                                  power6-idiv,\\\n-                                  power6-ldiv\" )"}, {"sha": "a3f46c62be2de265ffbbc6151318146ba44072e7", "filename": "gcc/config/rs6000/power8.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/863e8d53eb2940e2c8850e632afe427e164f53cf/gcc%2Fconfig%2Frs6000%2Fpower8.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/863e8d53eb2940e2c8850e632afe427e164f53cf/gcc%2Fconfig%2Frs6000%2Fpower8.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower8.md?ref=863e8d53eb2940e2c8850e632afe427e164f53cf", "patch": "@@ -379,13 +379,13 @@\n        (eq_attr \"cpu\" \"power8\"))\n   \"DU_any_power8,VSU_power8\")\n \n-(define_insn_reservation \"power8-mffgpr\" 5\n-  (and (eq_attr \"type\" \"mffgpr\")\n+(define_insn_reservation \"power8-mtvsr\" 5\n+  (and (eq_attr \"type\" \"mtvsr\")\n        (eq_attr \"cpu\" \"power8\"))\n   \"DU_any_power8,VSU_power8\")\n \n-(define_insn_reservation \"power8-mftgpr\" 6\n-  (and (eq_attr \"type\" \"mftgpr\")\n+(define_insn_reservation \"power8-mfvsr\" 6\n+  (and (eq_attr \"type\" \"mfvsr\")\n        (eq_attr \"cpu\" \"power8\"))\n   \"DU_any_power8,VSU_power8\")\n "}, {"sha": "c86d643a7d3a2f6a9f67a3e8cc4c4d4002eb978e", "filename": "gcc/config/rs6000/power9.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/863e8d53eb2940e2c8850e632afe427e164f53cf/gcc%2Fconfig%2Frs6000%2Fpower9.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/863e8d53eb2940e2c8850e632afe427e164f53cf/gcc%2Fconfig%2Frs6000%2Fpower9.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower9.md?ref=863e8d53eb2940e2c8850e632afe427e164f53cf", "patch": "@@ -466,13 +466,13 @@\n        (eq_attr \"cpu\" \"power9\"))\n   \"DU_super_power9,dfu_power9*8\")\n \n-(define_insn_reservation \"power9-mffgpr\" 2\n-  (and (eq_attr \"type\" \"mffgpr\")\n+(define_insn_reservation \"power9-mtvsr\" 2\n+  (and (eq_attr \"type\" \"mtvsr\")\n        (eq_attr \"cpu\" \"power9\"))\n   \"DU_slice_3_power9,VSU_power9\")\n \n-(define_insn_reservation \"power9-mftgpr\" 2\n-  (and (eq_attr \"type\" \"mftgpr\")\n+(define_insn_reservation \"power9-mfvsr\" 2\n+  (and (eq_attr \"type\" \"mfvsr\")\n        (eq_attr \"cpu\" \"power9\"))\n   \"DU_slice_3_power9,VSU_power9\")\n "}, {"sha": "6d0c5509b0eb214210349be30fb66741eabf7cc9", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/863e8d53eb2940e2c8850e632afe427e164f53cf/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/863e8d53eb2940e2c8850e632afe427e164f53cf/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=863e8d53eb2940e2c8850e632afe427e164f53cf", "patch": "@@ -17498,14 +17498,6 @@ rs6000_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn, int cost,\n               }\n             break;\n \n-          case TYPE_FPLOAD:\n-            if ((rs6000_tune == PROCESSOR_POWER6)\n-                && get_attr_update (insn) == UPDATE_NO\n-                && recog_memoized (dep_insn)\n-                && (INSN_CODE (dep_insn) >= 0)\n-                && (get_attr_type (dep_insn) == TYPE_MFFGPR))\n-              return 2;\n-\n           default:\n             break;\n           }\n@@ -17531,11 +17523,6 @@ rs6000_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn, int cost,\n \t\t  || get_attr_type (dep_insn) == TYPE_FPSIMPLE)\n                 return 1;\n               break;\n-            case TYPE_FPLOAD:\n-              if (get_attr_update (insn) == UPDATE_NO\n-                  && get_attr_type (dep_insn) == TYPE_MFFGPR)\n-                return 2;\n-              break;\n             default:\n               break;\n             }"}, {"sha": "9c5a22823c03609596a62de98a7b2ac07a01c610", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/863e8d53eb2940e2c8850e632afe427e164f53cf/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/863e8d53eb2940e2c8850e632afe427e164f53cf/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=863e8d53eb2940e2c8850e632afe427e164f53cf", "patch": "@@ -202,7 +202,7 @@\n    cr_logical,mfcr,mfcrf,mtcr,\n    fpcompare,fp,fpsimple,dmul,qmul,sdiv,ddiv,ssqrt,dsqrt,\n    vecsimple,veccomplex,vecdiv,veccmp,veccmpsimple,vecperm,\n-   vecfloat,vecfdiv,vecdouble,mffgpr,mftgpr,crypto,\n+   vecfloat,vecfdiv,vecdouble,mtvsr,mfvsr,crypto,\n    veclogical,veccmpfx,vecexts,vecmove,\n    htm,htmsimple,dfp,mma\"\n   (const_string \"integer\"))\n@@ -921,7 +921,7 @@\n    mtvsrwz %x0,%1\n    mfvsrwz %0,%x1\n    xxextractuw %x0,%x1,4\"\n-  [(set_attr \"type\" \"load,shift,fpload,fpload,mffgpr,mftgpr,vecexts\")\n+  [(set_attr \"type\" \"load,shift,fpload,fpload,mtvsr,mfvsr,vecexts\")\n    (set_attr \"isa\" \"*,*,p7,p8v,p8v,p8v,p9v\")])\n \n (define_insn_and_split \"*zero_extendsi<mode>2_dot\"\n@@ -1108,7 +1108,7 @@\n    vextsw2d %0,%1\n    #\n    #\"\n-  [(set_attr \"type\" \"load,exts,fpload,fpload,mffgpr,vecexts,vecperm,mftgpr\")\n+  [(set_attr \"type\" \"load,exts,fpload,fpload,mtvsr,vecexts,vecperm,mfvsr\")\n    (set_attr \"sign_extend\" \"yes\")\n    (set_attr \"length\" \"*,*,*,*,*,*,8,8\")\n    (set_attr \"isa\" \"*,*,p6,p8v,p8v,p9v,p8v,p8v\")])\n@@ -5048,7 +5048,7 @@\n {\n   operands[2] = gen_highpart (DImode, operands[1]);\n }\n- [(set_attr \"type\" \"mftgpr,*\")])\n+ [(set_attr \"type\" \"mfvsr,*\")])\n \n ;; Optimize IEEE 128-bit signbit on to avoid loading the value into a vector\n ;; register and then doing a direct move if the value comes from memory.  On\n@@ -5402,7 +5402,7 @@\n    lxsiwax %x0,%y1\n    mtvsrwa %x0,%1\n    vextsw2d %0,%1\"\n-  [(set_attr \"type\" \"fpload,fpload,mffgpr,vecexts\")\n+  [(set_attr \"type\" \"fpload,fpload,mtvsr,vecexts\")\n    (set_attr \"isa\" \"*,p8v,p8v,p9v\")])\n \n ; This split must be run before register allocation because it allocates the\n@@ -5483,7 +5483,7 @@\n    lxsiwzx %x0,%y1\n    mtvsrwz %x0,%1\n    xxextractuw %x0,%x1,4\"\n-  [(set_attr \"type\" \"fpload,fpload,mffgpr,vecexts\")\n+  [(set_attr \"type\" \"fpload,fpload,mtvsr,vecexts\")\n    (set_attr \"isa\" \"*,p8v,p8v,p9v\")])\n \n (define_insn_and_split \"floatunssi<mode>2_lfiwzx\"\n@@ -7087,7 +7087,7 @@\n \t   *,          *,          *,          *,\n \t   veclogical, vecsimple,  vecsimple,  vecsimple,\n \t   veclogical, veclogical, vecsimple,\n-\t   mffgpr,     mftgpr,\n+\t   mtvsr,      mfvsr,\n \t   *,          *,          *\")\n    (set_attr \"length\"\n \t  \"*,          *,\n@@ -7173,8 +7173,8 @@\n }\n   [(set_attr \"type\"\n \t\t\"*,          load,        fpload,      fpload,   store,\n-\t\t fpstore,    fpstore,     fpstore,     mftgpr,   fp,\n-\t\t mffgpr\")\n+\t\t fpstore,    fpstore,     fpstore,     mfvsr,    fp,\n+\t\t mtvsr\")\n    (set_attr \"length\"\n \t\t\"*,          *,           *,           *,        *,\n \t\t *,          *,           *,           8,        *,\n@@ -7228,7 +7228,7 @@\n }\n   [(set_attr \"type\"\n \t\t\"*,          load,        fpload,      fpload,   two,\n-\t\t two,        mffgpr\")\n+\t\t two,        mtvsr\")\n    (set_attr \"length\"\n \t\t\"*,          *,           *,           *,        8,\n \t\t 8,          *\")\n@@ -7355,8 +7355,8 @@\n    nop\"\n   [(set_attr \"type\"\n \t\t\"*,         load,      fpload,    store,     fpstore,   *,\n-\t\t vecsimple, vecperm,   vecperm,   vecperm,   vecperm,   mftgpr,\n-\t\t mffgpr,    mfjmpr,    mtjmpr,    *\")\n+\t\t vecsimple, vecperm,   vecperm,   vecperm,   vecperm,   mfvsr,\n+\t\t mtvsr,     mfjmpr,    mtjmpr,    *\")\n    (set_attr \"length\"\n \t\t\"*,         *,         *,         *,         *,         *,\n \t\t *,         *,         *,         *,         8,         *,\n@@ -7531,7 +7531,7 @@\n    mf%1 %0\n    nop\"\n   [(set_attr \"type\"\n-\t\"load,       fpload,    store,     fpstore,   mffgpr,    mftgpr,\n+\t\"load,       fpload,    store,     fpstore,   mtvsr,     mfvsr,\n \t fpsimple,   *,         mtjmpr,    mfjmpr,    *\")\n    (set_attr \"isa\"\n \t\"*,          p7,        *,         *,         p8v,       p8v,\n@@ -7634,7 +7634,7 @@\n \t     *,          12,        *,         *\")\n    (set_attr \"type\"\n \t    \"load,       fpload,    fpload,    fpload,    store,     fpstore,\n-\t     fpstore,    vecfloat,  mftgpr,    *\")\n+\t     fpstore,    vecfloat,  mfvsr,     *\")\n    (set_attr \"isa\"\n \t    \"*,          *,         p9v,       p8v,       *,         *,\n \t     p8v,        p8v,       p8v,       *\")])\n@@ -7871,7 +7871,7 @@\n             \"fpstore,     fpload,     fpsimple,   fpload,     fpstore,\n              fpload,      fpstore,    veclogical, veclogical, integer,\n              store,       load,       *,          mtjmpr,     mfjmpr,\n-             *,           mftgpr,     mffgpr\")\n+             *,           mfvsr,      mtvsr\")\n    (set_attr \"size\" \"64\")\n    (set_attr \"isa\"\n             \"*,           *,          *,          p9v,        p9v,\n@@ -8711,7 +8711,7 @@\n \t\t   UNSPEC_P8V_MTVSRWZ))]\n   \"!TARGET_POWERPC64 && TARGET_DIRECT_MOVE\"\n   \"mtvsrwz %x0,%1\"\n-  [(set_attr \"type\" \"mffgpr\")])\n+  [(set_attr \"type\" \"mtvsr\")])\n \n (define_insn_and_split \"reload_fpr_from_gpr<mode>\"\n   [(set (match_operand:FMOVE64X 0 \"register_operand\" \"=d\")\n@@ -8745,7 +8745,7 @@\n \t\t   UNSPEC_P8V_MTVSRD))]\n   \"TARGET_POWERPC64 && TARGET_DIRECT_MOVE\"\n   \"mtvsrd %x0,%1\"\n-  [(set_attr \"type\" \"mftgpr\")])\n+  [(set_attr \"type\" \"mfvsr\")])\n \n (define_insn \"p8_xxpermdi_<mode>\"\n   [(set (match_operand:FMOVE128_GPR 0 \"register_operand\" \"=wa\")\n@@ -8810,7 +8810,7 @@\n \t\t   UNSPEC_P8V_MTVSRD))]\n   \"TARGET_POWERPC64 && TARGET_DIRECT_MOVE\"\n   \"mtvsrd %x0,%1\"\n-  [(set_attr \"type\" \"mffgpr\")])\n+  [(set_attr \"type\" \"mtvsr\")])\n \n (define_insn_and_split \"reload_vsx_from_gprsf\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=wa\")\n@@ -8845,7 +8845,7 @@\n \t\t   UNSPEC_P8V_RELOAD_FROM_VSX))]\n   \"TARGET_POWERPC64 && TARGET_DIRECT_MOVE\"\n   \"mfvsrd %0,%x1\"\n-  [(set_attr \"type\" \"mftgpr\")])\n+  [(set_attr \"type\" \"mfvsr\")])\n \n (define_insn_and_split \"reload_gpr_from_vsx<mode>\"\n   [(set (match_operand:FMOVE128_GPR 0 \"register_operand\" \"=r\")\n@@ -9060,7 +9060,7 @@\n \t   vecsimple,  vecsimple,  vecsimple,  veclogical, veclogical,\n \t   vecsimple,  vecsimple,\n \t   mfjmpr,     mtjmpr,     *,\n-\t   mftgpr,     mffgpr\")\n+\t   mfvsr,      mtvsr\")\n    (set_attr \"size\" \"64\")\n    (set_attr \"length\"\n \t  \"*,          *,          *,\n@@ -14017,7 +14017,7 @@\n \n   operands[3] = gen_rtx_REG (<FP128_64>mode, fp_regno);\n }\n-  [(set_attr \"type\" \"fp,fpstore,mffgpr,mftgpr,store\")])\n+  [(set_attr \"type\" \"fp,fpstore,mtvsr,mfvsr,store\")])\n \n (define_insn_and_split \"unpack<mode>_nodm\"\n   [(set (match_operand:<FP128_64> 0 \"nonimmediate_operand\" \"=d,m\")"}, {"sha": "4ff52455fd3a337abd20a9d84177bd20adc73938", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/863e8d53eb2940e2c8850e632afe427e164f53cf/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/863e8d53eb2940e2c8850e632afe427e164f53cf/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=863e8d53eb2940e2c8850e632afe427e164f53cf", "patch": "@@ -1173,7 +1173,7 @@\n   return rs6000_output_move_128bit (operands);\n }\n   [(set_attr \"type\"\n-               \"vecstore,  vecload,   vecsimple, mffgpr,    mftgpr,    load,\n+               \"vecstore,  vecload,   vecsimple, mtvsr,     mfvsr,     load,\n                 store,     load,      store,     *,         vecsimple, vecsimple,\n                 vecsimple, *,         *,         vecstore,  vecload\")\n    (set_attr \"num_insns\"\n@@ -3314,7 +3314,7 @@\n   else\n     gcc_unreachable ();\n }\n-  [(set_attr \"type\" \"veclogical,mftgpr,mftgpr,vecperm\")\n+  [(set_attr \"type\" \"veclogical,mfvsr,mfvsr,vecperm\")\n    (set_attr \"isa\" \"*,*,p8v,p9v\")])\n \n ;; Optimize extracting a single scalar element from memory.\n@@ -3757,7 +3757,7 @@\n \n   DONE;\n }\n-  [(set_attr \"type\" \"mftgpr,vecperm,fpstore\")\n+  [(set_attr \"type\" \"mfvsr,vecperm,fpstore\")\n    (set_attr \"length\" \"8\")\n    (set_attr \"isa\" \"*,p8v,*\")])\n \n@@ -3806,7 +3806,7 @@\n \t\t  gen_rtx_REG (DImode, REGNO (vec_tmp)));\n   DONE;\n }\n-  [(set_attr \"type\" \"mftgpr\")])\n+  [(set_attr \"type\" \"mfvsr\")])\n \n ;; Optimize extracting a single scalar element from memory.\n (define_insn_and_split \"*vsx_extract_<mode>_load\""}]}