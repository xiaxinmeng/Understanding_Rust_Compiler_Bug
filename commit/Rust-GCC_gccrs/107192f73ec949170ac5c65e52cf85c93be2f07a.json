{"sha": "107192f73ec949170ac5c65e52cf85c93be2f07a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA3MTkyZjczZWM5NDkxNzBhYzVjNjVlNTJjZjg1YzkzYmUyZjA3YQ==", "commit": {"author": {"name": "Allan Sandfeld Jensen", "email": "allan.jensen@qt.io", "date": "2018-08-15T04:33:12Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-08-15T04:33:12Z"}, "message": "i386.c (expand_vec_perm_movs): New method matching movs patterns.\n\n\t* config/i386/i386.c (expand_vec_perm_movs): New method matching movs\n\tpatterns.\n\t(expand_vec_perm_1): Try the new method.\n\n\t* gcc.target/i386/sse2-movs.c: New test.\n\nFrom-SVN: r263549", "tree": {"sha": "17cac50fca89e09c3eea4ee81a1e28759f5389e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17cac50fca89e09c3eea4ee81a1e28759f5389e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/107192f73ec949170ac5c65e52cf85c93be2f07a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/107192f73ec949170ac5c65e52cf85c93be2f07a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/107192f73ec949170ac5c65e52cf85c93be2f07a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/107192f73ec949170ac5c65e52cf85c93be2f07a/comments", "author": null, "committer": null, "parents": [{"sha": "4720f4afbae879f6cc73a420f7c2943a5cba70ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4720f4afbae879f6cc73a420f7c2943a5cba70ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4720f4afbae879f6cc73a420f7c2943a5cba70ec"}], "stats": {"total": 79, "additions": 77, "deletions": 2}, "files": [{"sha": "9dc9acd84c0307d5794a952245975feee201a46f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/107192f73ec949170ac5c65e52cf85c93be2f07a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/107192f73ec949170ac5c65e52cf85c93be2f07a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=107192f73ec949170ac5c65e52cf85c93be2f07a", "patch": "@@ -1,3 +1,9 @@\n+2018-08-14 Allan Sandfeld Jensen <allan.jensen@qt.io>\n+\n+\t* config/i386/i386.c (expand_vec_perm_movs): New method matching movs\n+\tpatterns.\n+\t(expand_vec_perm_1): Try the new method.\n+\n 2018-08-14  Ilya Leoshkevich  <iii@linux.ibm.com>\n \n         PR target/86547"}, {"sha": "6501638f619a3af030a4e5733367325d9bef681b", "filename": "gcc/config/i386/emmintrin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/107192f73ec949170ac5c65e52cf85c93be2f07a/gcc%2Fconfig%2Fi386%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/107192f73ec949170ac5c65e52cf85c93be2f07a/gcc%2Fconfig%2Fi386%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Femmintrin.h?ref=107192f73ec949170ac5c65e52cf85c93be2f07a", "patch": "@@ -113,7 +113,7 @@ _mm_setzero_pd (void)\n extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_move_sd (__m128d __A, __m128d __B)\n {\n-  return (__m128d) __builtin_ia32_movsd ((__v2df)__A, (__v2df)__B);\n+  return __extension__ (__m128d) __builtin_shuffle((__v2df)__A, (__v2df)__B, (__v2di){2, 1});\n }\n \n /* Load two DPFP values from P.  The address must be 16-byte aligned.  */"}, {"sha": "15a3caa94c354aa92616edf1e3a647b0c73f454b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/107192f73ec949170ac5c65e52cf85c93be2f07a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/107192f73ec949170ac5c65e52cf85c93be2f07a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=107192f73ec949170ac5c65e52cf85c93be2f07a", "patch": "@@ -46145,6 +46145,43 @@ expand_vselect_vconcat (rtx target, rtx op0, rtx op1,\n   return ok;\n }\n \n+/* A subroutine of ix86_expand_vec_perm_builtin_1.  Try to implement D\n+   using movss or movsd.  */\n+static bool\n+expand_vec_perm_movs (struct expand_vec_perm_d *d)\n+{\n+  machine_mode vmode = d->vmode;\n+  unsigned i, nelt = d->nelt;\n+  rtx x;\n+\n+  if (d->one_operand_p)\n+    return false;\n+\n+  if (TARGET_SSE2 && (vmode == V2DFmode || vmode == V4SFmode))\n+    ;\n+  else\n+    return false;\n+\n+  /* Only the first element is changed.  */\n+  if (d->perm[0] != nelt && d->perm[0] != 0)\n+    return false;\n+  for (i = 1; i < nelt; ++i)\n+    if (d->perm[i] != i + nelt - d->perm[0])\n+      return false;\n+\n+  if (d->testing_p)\n+    return true;\n+\n+  if (d->perm[0] == nelt)\n+    x = gen_rtx_VEC_MERGE (vmode, d->op1, d->op0, GEN_INT (1));\n+  else\n+    x = gen_rtx_VEC_MERGE (vmode, d->op0, d->op1, GEN_INT (1));\n+\n+  emit_insn (gen_rtx_SET (d->target, x));\n+\n+  return true;\n+}\n+\n /* A subroutine of ix86_expand_vec_perm_builtin_1.  Try to implement D\n    in terms of blendp[sd] / pblendw / pblendvb / vpblendd.  */\n \n@@ -46887,6 +46924,10 @@ expand_vec_perm_1 (struct expand_vec_perm_d *d)\n \t}\n     }\n \n+  /* Try movss/movsd instructions.  */\n+  if (expand_vec_perm_movs (d))\n+    return true;\n+\n   /* Finally, try the fully general two operand permute.  */\n   if (expand_vselect_vconcat (d->target, d->op0, d->op1, d->perm, nelt,\n \t\t\t      d->testing_p))"}, {"sha": "f770570295c1bd4306dc14b775dc70f76d10700d", "filename": "gcc/config/i386/xmmintrin.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/107192f73ec949170ac5c65e52cf85c93be2f07a/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/107192f73ec949170ac5c65e52cf85c93be2f07a/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxmmintrin.h?ref=107192f73ec949170ac5c65e52cf85c93be2f07a", "patch": "@@ -1011,7 +1011,10 @@ _mm_storer_ps (float *__P, __m128 __A)\n extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_move_ss (__m128 __A, __m128 __B)\n {\n-  return (__m128) __builtin_ia32_movss ((__v4sf)__A, (__v4sf)__B);\n+  return (__m128) __builtin_shuffle ((__v4sf)__A, (__v4sf)__B,\n+                                     __extension__\n+                                     (__attribute__((__vector_size__ (16))) int)\n+                                     {4,1,2,3});\n }\n \n /* Extracts one of the four words of A.  The selector N must be immediate.  */"}, {"sha": "b8d76d0dde64d563573b26e35d1474becda71a27", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/107192f73ec949170ac5c65e52cf85c93be2f07a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/107192f73ec949170ac5c65e52cf85c93be2f07a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=107192f73ec949170ac5c65e52cf85c93be2f07a", "patch": "@@ -1,3 +1,7 @@\n+2018-08-14 Allan Sandfeld Jensen <allan.jensen@qt.io>\n+\n+\t* gcc.target/i386/sse2-movs.c: New test.\n+\n 2018-08-14  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/86650"}, {"sha": "79f486cfa82f86d5df48f9876873beb52cf2e8eb", "filename": "gcc/testsuite/gcc.target/i386/sse2-movs.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/107192f73ec949170ac5c65e52cf85c93be2f07a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-movs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/107192f73ec949170ac5c65e52cf85c93be2f07a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-movs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-movs.c?ref=107192f73ec949170ac5c65e52cf85c93be2f07a", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2\" } */\n+/* { dg-require-effective-target sse2 } */\n+/* { dg-final { scan-assembler \"movss\" } } */\n+/* { dg-final { scan-assembler \"movsd\" } } */\n+/* { dg-final { scan-assembler-not \"unpcklps\" } } */\n+/* { dg-final { scan-assembler-not \"shufps\" } } */\n+/* { dg-final { scan-assembler-not \"shufpd\" } } */\n+\n+typedef float v4sf __attribute__ ((vector_size (16)));\n+typedef double v2df __attribute__ ((vector_size (16)));\n+\n+v4sf movss(v4sf a, v4sf b)\n+{\n+     return (v4sf){b[0],a[1],a[2],a[3]};\n+}\n+\n+v2df movsd(v2df a, v2df b)\n+{\n+     return (v2df){b[0],a[1]};\n+}"}]}