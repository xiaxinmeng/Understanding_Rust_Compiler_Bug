{"sha": "53e62089fbe61bbf59dd1b14d006a619de7b5f87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNlNjIwODlmYmU2MWJiZjU5ZGQxYjE0ZDAwNmE2MTlkZTdiNWY4Nw==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2017-05-03T07:33:01Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2017-05-03T07:33:01Z"}, "message": "Replace absolute line numbers in c-c++-common\n\n2017-05-03  Tom de Vries  <tom@codesourcery.com>\n\n\tPR testsuite/80557\n\t* c-c++-common/Wshift-negative-value-1.c: Replace absolute line numbers.\n\t* c-c++-common/Wshift-negative-value-2.c: Same.\n\t* c-c++-common/Wshift-negative-value-3.c: Same.\n\t* c-c++-common/Wshift-negative-value-4.c: Same.\n\t* c-c++-common/cilk-plus/AN/pr57541.c: Same.\n\t* c-c++-common/cpp/pr60400.c: Same.\n\t* c-c++-common/fmax-errors.c: Same.\n\t* c-c++-common/goacc/data-2.c: Same.\n\t* c-c++-common/goacc/host_data-2.c: Same.\n\t* c-c++-common/gomp/simd4.c: Same.\n\t* c-c++-common/pr28656.c: Same.\n\t* c-c++-common/pr43395.c: Same.\n\t* c-c++-common/torture/pr57945.c: Same.\n\nFrom-SVN: r247537", "tree": {"sha": "a8ffba3e5938ae46e2a52e53eb7d55d5b3850e04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8ffba3e5938ae46e2a52e53eb7d55d5b3850e04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53e62089fbe61bbf59dd1b14d006a619de7b5f87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53e62089fbe61bbf59dd1b14d006a619de7b5f87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53e62089fbe61bbf59dd1b14d006a619de7b5f87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53e62089fbe61bbf59dd1b14d006a619de7b5f87/comments", "author": null, "committer": null, "parents": [{"sha": "962913a561fe994e50f980fa11ff34c4c97401fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/962913a561fe994e50f980fa11ff34c4c97401fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/962913a561fe994e50f980fa11ff34c4c97401fe"}], "stats": {"total": 90, "additions": 51, "deletions": 39}, "files": [{"sha": "e84e04540c2e33dd3b52667c8d87bfda4b67be28", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53e62089fbe61bbf59dd1b14d006a619de7b5f87/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53e62089fbe61bbf59dd1b14d006a619de7b5f87/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=53e62089fbe61bbf59dd1b14d006a619de7b5f87", "patch": "@@ -1,3 +1,20 @@\n+2017-05-03  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR testsuite/80557\n+\t* c-c++-common/Wshift-negative-value-1.c: Replace absolute line numbers.\n+\t* c-c++-common/Wshift-negative-value-2.c: Same.\n+\t* c-c++-common/Wshift-negative-value-3.c: Same.\n+\t* c-c++-common/Wshift-negative-value-4.c: Same.\n+\t* c-c++-common/cilk-plus/AN/pr57541.c: Same.\n+\t* c-c++-common/cpp/pr60400.c: Same.\n+\t* c-c++-common/fmax-errors.c: Same.\n+\t* c-c++-common/goacc/data-2.c: Same.\n+\t* c-c++-common/goacc/host_data-2.c: Same.\n+\t* c-c++-common/gomp/simd4.c: Same.\n+\t* c-c++-common/pr28656.c: Same.\n+\t* c-c++-common/pr43395.c: Same.\n+\t* c-c++-common/torture/pr57945.c: Same.\n+\n 2017-05-03  Tom de Vries  <tom@codesourcery.com>\n \n \t* c-c++-common/goacc/data-default-1.c: Add quotes to numerical comment"}, {"sha": "7df1804615d65fe8b109bf476a89588cea44025d", "filename": "gcc/testsuite/c-c++-common/Wshift-negative-value-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53e62089fbe61bbf59dd1b14d006a619de7b5f87/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53e62089fbe61bbf59dd1b14d006a619de7b5f87/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-1.c?ref=53e62089fbe61bbf59dd1b14d006a619de7b5f87", "patch": "@@ -7,6 +7,7 @@ enum E {\n   A = 0 << 1,\n   B = 1 << 1,\n   C = -1 << 1, /* { dg-warning \"left shift of negative value|not an integer constant\" } */\n+  /* { dg-error \"left operand of shift expression\" \"shift\" { target c++ } .-1 } */\n   D = 0 >> 1,\n   E = 1 >> 1,\n   F = -1 >> 1\n@@ -47,5 +48,3 @@ right (int x)\n   r += -1U >> x;\n   return r;\n }\n-\n-/* { dg-error \"left operand of shift expression\" \"shift\" { target c++ } 9 } */"}, {"sha": "3a60ed7e1b8bbfb1cf2fc9df13a8a8f88cb432fb", "filename": "gcc/testsuite/c-c++-common/Wshift-negative-value-2.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53e62089fbe61bbf59dd1b14d006a619de7b5f87/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53e62089fbe61bbf59dd1b14d006a619de7b5f87/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-2.c?ref=53e62089fbe61bbf59dd1b14d006a619de7b5f87", "patch": "@@ -7,6 +7,8 @@ enum E {\n   A = 0 << 1,\n   B = 1 << 1,\n   C = -1 << 1, /* { dg-warning \"left shift of negative value\" } */\n+  /* { dg-error \"not an integer constant\" \"no constant\" { target c++ } .-1 } */\n+  /* { dg-error \"left operand of shift expression\" \"shift\" { target c++ } .-2 } */\n   D = 0 >> 1,\n   E = 1 >> 1,\n   F = -1 >> 1\n@@ -47,6 +49,3 @@ right (int x)\n   r += -1U >> x;\n   return r;\n }\n-\n-/* { dg-error \"not an integer constant\" \"no constant\" { target c++ } 9 } */\n-/* { dg-error \"left operand of shift expression\" \"shift\" { target c++ } 9 } */"}, {"sha": "503ca61eb6139eb6160f084987c7903496c78c4c", "filename": "gcc/testsuite/c-c++-common/Wshift-negative-value-3.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53e62089fbe61bbf59dd1b14d006a619de7b5f87/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53e62089fbe61bbf59dd1b14d006a619de7b5f87/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-3.c?ref=53e62089fbe61bbf59dd1b14d006a619de7b5f87", "patch": "@@ -7,6 +7,8 @@ enum E {\n   A = 0 << 1,\n   B = 1 << 1,\n   C = -1 << 1,\n+  /* { dg-error \"not an integer constant\" \"no constant\" { target c++ } .-1 } */\n+  /* { dg-error \"left operand of shift expression\" \"shift\" { target c++ } .-2 } */\n   D = 0 >> 1,\n   E = 1 >> 1,\n   F = -1 >> 1\n@@ -47,6 +49,3 @@ right (int x)\n   r += -1U >> x;\n   return r;\n }\n-\n-/* { dg-error \"not an integer constant\" \"no constant\" { target c++ } 9 } */\n-/* { dg-error \"left operand of shift expression\" \"shift\" { target c++ } 9 } */"}, {"sha": "fa7cb4e7f513af595e60ea67aba343f95644bb60", "filename": "gcc/testsuite/c-c++-common/Wshift-negative-value-4.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53e62089fbe61bbf59dd1b14d006a619de7b5f87/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53e62089fbe61bbf59dd1b14d006a619de7b5f87/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-4.c?ref=53e62089fbe61bbf59dd1b14d006a619de7b5f87", "patch": "@@ -7,6 +7,8 @@ enum E {\n   A = 0 << 1,\n   B = 1 << 1,\n   C = -1 << 1,\n+  /* { dg-error \"not an integer constant\" \"no constant\" { target c++ } .-1 } */\n+  /* { dg-error \"left operand of shift expression\" \"shift\" { target c++ } .-2 } */\n   D = 0 >> 1,\n   E = 1 >> 1,\n   F = -1 >> 1\n@@ -47,6 +49,3 @@ right (int x)\n   r += -1U >> x;\n   return r;\n }\n-\n-/* { dg-error \"not an integer constant\" \"no constant\" { target c++ } 9 } */\n-/* { dg-error \"left operand of shift expression\" \"shift\" { target c++ } 9 } */"}, {"sha": "a956d0e18ab63d1ea4020dafc7c31e7bd9806712", "filename": "gcc/testsuite/c-c++-common/cilk-plus/AN/pr57541.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53e62089fbe61bbf59dd1b14d006a619de7b5f87/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr57541.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53e62089fbe61bbf59dd1b14d006a619de7b5f87/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr57541.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr57541.c?ref=53e62089fbe61bbf59dd1b14d006a619de7b5f87", "patch": "@@ -9,6 +9,7 @@ int foo () {\n   /* C compiler uses the term \"undeclared\" whereas C++ compiler uses\n     \"not declared\".  Thus, grepping for declared seem to be the easiest.  */\n   char c = (char)N; /* { dg-error \"declared\" } */\n+  /* { dg-message \"note: each\" \"defined\" { target c } .-1 } */\n   short s = (short)N;\n   long l = (long)N;\n   A[l:s:c];\n@@ -22,5 +23,4 @@ int foo1 (int N) {\n }\n \n \n-/* { dg-message \"note: each\" \"defined\" { target c }  11 } */\n "}, {"sha": "59e8aec36efec2f09c06badadae453b7c6b0b8a0", "filename": "gcc/testsuite/c-c++-common/cpp/pr60400.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53e62089fbe61bbf59dd1b14d006a619de7b5f87/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr60400.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53e62089fbe61bbf59dd1b14d006a619de7b5f87/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr60400.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr60400.c?ref=53e62089fbe61bbf59dd1b14d006a619de7b5f87", "patch": "@@ -2,12 +2,12 @@\n /* { dg-do compile } */\n /* { dg-options \"-trigraphs -Wtrigraphs\" } */\n \n-??=include \"pr60400-1.h\"\n-??=include \"pr60400-2.h\"\n+??=include \"pr60400-1.h\" /* { dg-warning \"trigraph\" } */\n+??=include \"pr60400-2.h\" /* { dg-warning \"trigraph\" } */\n \n+/* These are line numbers in pr60400-{1,2}.h  Keep them absolute.  */\n /* { dg-warning \"trigraph\" \"\" { target *-*-* } 1 } */\n /* { dg-warning \"trigraph\" \"\" { target *-*-* } 2 } */\n /* { dg-warning \"trigraph\" \"\" { target *-*-* } 3 } */\n /* { dg-warning \"trigraph\" \"\" { target *-*-* } 4 } */\n-/* { dg-warning \"trigraph\" \"\" { target *-*-* } 5 } */\n-/* { dg-warning \"trigraph\" \"\" { target *-*-* } 6 } */\n+"}, {"sha": "947d60048a179af148426320883c3377bb3f7bce", "filename": "gcc/testsuite/c-c++-common/fmax-errors.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53e62089fbe61bbf59dd1b14d006a619de7b5f87/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffmax-errors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53e62089fbe61bbf59dd1b14d006a619de7b5f87/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffmax-errors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffmax-errors.c?ref=53e62089fbe61bbf59dd1b14d006a619de7b5f87", "patch": "@@ -11,7 +11,7 @@ void foo (unsigned int i, unsigned int j)\n \n   (k) ();\t\t\t/* { dg-error \"\" } */\n   /* Make sure we see the notes related to the final error we emit.  */\n-  /* { dg-message \"identifier\" \"\" { target c } 12 } */\n+  /* { dg-message \"identifier\" \"\" { target c } .-2 } */\n \n   /* Warnings after the final error should not appear.  */\n   i + j; /* no warning.  */"}, {"sha": "a8723b04c8f3ab9525cd9002232e0e3f3ef33069", "filename": "gcc/testsuite/c-c++-common/goacc/data-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53e62089fbe61bbf59dd1b14d006a619de7b5f87/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdata-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53e62089fbe61bbf59dd1b14d006a619de7b5f87/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdata-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdata-2.c?ref=53e62089fbe61bbf59dd1b14d006a619de7b5f87", "patch": "@@ -6,6 +6,7 @@ foo (void)\n #pragma acc enter data copyin (a, b) async wait\n #pragma acc enter data create (b[20:30]) async wait\n #pragma acc enter data (a) /* { dg-error \"expected '#pragma acc' clause before '\\\\\\(' token\" } */\n+/* { dg-error \"has no data movement clause\" \"\" { target *-*-* } .-1 } */\n #pragma acc enter data create (b(1:10)) /* { dg-error \"expected '\\\\\\)' before '\\\\\\(' token\" } */\n #pragma acc exit data delete (a) if (0)\n #pragma acc exit data copyout (b) if (a)\n@@ -20,4 +21,3 @@ foo (void)\n #pragma acc enter data2 /* { dg-error \"expected 'data' after\" } */\n }\n \n-/* { dg-error \"has no data movement clause\" \"\" { target *-*-* } 8 } */"}, {"sha": "b3093e575ff40fbc580443bd8b70aaaa855243ab", "filename": "gcc/testsuite/c-c++-common/goacc/host_data-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53e62089fbe61bbf59dd1b14d006a619de7b5f87/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fhost_data-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53e62089fbe61bbf59dd1b14d006a619de7b5f87/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fhost_data-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fhost_data-2.c?ref=53e62089fbe61bbf59dd1b14d006a619de7b5f87", "patch": "@@ -12,14 +12,14 @@ f (void)\n   ;\n \n #pragma acc host_data use_device(v2)\n+  /* { dg-error \".use_device_ptr. variable is neither a pointer nor an array\" \"\" { target c } .-1 } */\n+  /* { dg-error \".use_device_ptr. variable is neither a pointer, nor an array nor reference to pointer or array\" \"\" { target c++ } .-2 } */\n   ;\n-  /* { dg-error \".use_device_ptr. variable is neither a pointer nor an array\" \"\" { target c } 14 } */\n-  /* { dg-error \".use_device_ptr. variable is neither a pointer, nor an array nor reference to pointer or array\" \"\" { target c++ } 14 } */\n   \n #pragma acc host_data use_device(v0)\n+  /* { dg-error \".use_device_ptr. variable is neither a pointer nor an array\" \"\" { target c } .-1 } */\n+  /* { dg-error \".use_device_ptr. variable is neither a pointer, nor an array nor reference to pointer or array\" \"\" { target c++ } .-2 } */\n   ;\n-  /* { dg-error \".use_device_ptr. variable is neither a pointer nor an array\" \"\" { target c } 19 } */\n-  /* { dg-error \".use_device_ptr. variable is neither a pointer, nor an array nor reference to pointer or array\" \"\" { target c++ } 19 } */\n }\n \n "}, {"sha": "8c4a031935a9d34c071dbcf3255210734a2b0adb", "filename": "gcc/testsuite/c-c++-common/gomp/simd4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53e62089fbe61bbf59dd1b14d006a619de7b5f87/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fsimd4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53e62089fbe61bbf59dd1b14d006a619de7b5f87/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fsimd4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fsimd4.c?ref=53e62089fbe61bbf59dd1b14d006a619de7b5f87", "patch": "@@ -10,12 +10,12 @@ void\n foo (void)\n {\n #pragma omp simd linear(p) linear(f : 1)\n+  /* { dg-error \"linear clause applied to\" \"\" { target *-*-* } .-1 } */\n+  /* { dg-error \"(incomplete|undefined) type\" \"\" { target *-*-* } .-2 } */\n   for (int i = 0; i < 10; i++)\n     ;\n #pragma omp simd linear(j : 7.0)\t/* { dg-error \"step expression must be integral\" } */\n   for (int i = 0; i < 10; i++)\n     ;\n }\n \n-/* { dg-error \"linear clause applied to\" \"\" { target *-*-* } 12 } */\n-/* { dg-error \"(incomplete|undefined) type\" \"\" { target *-*-* } 12 } */"}, {"sha": "903d7e51f1dd966342700385e9253227dac58f62", "filename": "gcc/testsuite/c-c++-common/pr28656.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53e62089fbe61bbf59dd1b14d006a619de7b5f87/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr28656.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53e62089fbe61bbf59dd1b14d006a619de7b5f87/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr28656.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr28656.c?ref=53e62089fbe61bbf59dd1b14d006a619de7b5f87", "patch": "@@ -18,12 +18,12 @@ void\n foo (void)\n {\n   memcpy (0, 0, 0);\n+  /* { dg-warning \"null argument where non-null required\\[^\\n\\r\\]*argument 1\" \"\" { target *-*-* } .-1 } */\n+  /* { dg-warning \"null argument where non-null required\\[^\\n\\r\\]*argument 2\" \"\" { target *-*-* } .-2 } */\n+\n   bar (0, 0, 0, 0, 0);\n+  /* { dg-warning \"null argument where non-null required\\[^\\n\\r\\]*argument 1\" \"\" { target *-*-* } .-1 } */\n+  /* { dg-warning \"null argument where non-null required\\[^\\n\\r\\]*argument 3\" \"\" { target *-*-* } .-2 } */\n+  /* { dg-warning \"null argument where non-null required\\[^\\n\\r\\]*argument 4\" \"\" { target *-*-* } .-3 } */\n+  /* { dg-warning \"null argument where non-null required\\[^\\n\\r\\]*argument 5\" \"\" { target *-*-* } .-4 } */\n }\n-\n-/* { dg-warning \"null argument where non-null required\\[^\\n\\r\\]*argument 1\" \"\" { target *-*-* } 20 } */\n-/* { dg-warning \"null argument where non-null required\\[^\\n\\r\\]*argument 2\" \"\" { target *-*-* } 20 } */\n-/* { dg-warning \"null argument where non-null required\\[^\\n\\r\\]*argument 1\" \"\" { target *-*-* } 21 } */\n-/* { dg-warning \"null argument where non-null required\\[^\\n\\r\\]*argument 3\" \"\" { target *-*-* } 21 } */\n-/* { dg-warning \"null argument where non-null required\\[^\\n\\r\\]*argument 4\" \"\" { target *-*-* } 21 } */\n-/* { dg-warning \"null argument where non-null required\\[^\\n\\r\\]*argument 5\" \"\" { target *-*-* } 21 } */"}, {"sha": "f672c8c1994d681d6ad148552b930c8eb24f30a0", "filename": "gcc/testsuite/c-c++-common/pr43395.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53e62089fbe61bbf59dd1b14d006a619de7b5f87/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr43395.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53e62089fbe61bbf59dd1b14d006a619de7b5f87/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr43395.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr43395.c?ref=53e62089fbe61bbf59dd1b14d006a619de7b5f87", "patch": "@@ -4,27 +4,27 @@\n void *\n foo (void)\n {\n-lab:\n+ lab: /* { dg-line foo_lab } */\n   return &&lab;\n /* { dg-warning \"function returns address of label\" \"\" { target c } .-1 } */\n-/* { dg-warning \"address of label\" \"\" { target c++ } 7 } */\n+/* { dg-warning \"address of label\" \"\" { target c++ } foo_lab } */\n }\n \n void *\n bar (void)\n {\n   __label__ lab;\n-lab:\n+ lab: /* { dg-line bar_lab } */\n   return &&lab;\n /* { dg-warning \"function returns address of label\" \"\" { target c } .-1 } */\n-/* { dg-warning \"address of label\" \"\" { target c++ } 17 } */\n+/* { dg-warning \"address of label\" \"\" { target c++ } bar_lab } */\n }\n \n void *\n baz (void)\n {\n-  int i;\n+  int i; /* { dg-line baz_i } */\n   return &i;\n /* { dg-warning \"function returns address of local variable\" \"\" { target c } .-1 } */\n-/* { dg-warning \"address of local variable\" \"\" { target c++ } 26 } */\n+/* { dg-warning \"address of local variable\" \"\" { target c++ } baz_i } */\n }"}, {"sha": "2678779d1dc8d7c0cbf58576b175238b552a6edd", "filename": "gcc/testsuite/c-c++-common/torture/pr57945.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53e62089fbe61bbf59dd1b14d006a619de7b5f87/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fpr57945.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53e62089fbe61bbf59dd1b14d006a619de7b5f87/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fpr57945.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fpr57945.c?ref=53e62089fbe61bbf59dd1b14d006a619de7b5f87", "patch": "@@ -3,11 +3,10 @@\n \n extern int j;\n static int i __attribute__((weakref(\"j\")));\n+/* { dg-error \"PTX does not support weak declarations\" \"\" { target nvptx-*-* } .-1 } */\n \n int\n foo (void)\n {\n   return &i ? i : 0;\n }\n-\n-/* { dg-error \"PTX does not support weak declarations\" \"\" { target nvptx-*-* } 5 } */"}]}