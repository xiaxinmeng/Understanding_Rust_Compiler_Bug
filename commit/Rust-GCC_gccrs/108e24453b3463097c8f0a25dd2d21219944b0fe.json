{"sha": "108e24453b3463097c8f0a25dd2d21219944b0fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA4ZTI0NDUzYjM0NjMwOTdjOGYwYTI1ZGQyZDIxMjE5OTQ0YjBmZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-11-24T20:55:24Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-11-24T20:55:24Z"}, "message": "re PR c++/42137 (error: expected constructor, destructor, or type conversion before \u2018{\u2019 token)\n\n\tPR c++/42137\n\t* parser.c (cp_parser_mem_initializer_id): Pass typename_type to\n\tcp_parser_class_name.\n\t(cp_parser_unqualified_id): Same, rather than class_type.\n\n\tPR c++/11764\n\t* parser.c (cp_parser_expression_statement): Give helpful error\n\tfor constructor name used as type.\n\nFrom-SVN: r154519", "tree": {"sha": "c0ee5b73c59f1d6bab85c25d33794a7d87248d78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0ee5b73c59f1d6bab85c25d33794a7d87248d78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/108e24453b3463097c8f0a25dd2d21219944b0fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/108e24453b3463097c8f0a25dd2d21219944b0fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/108e24453b3463097c8f0a25dd2d21219944b0fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/108e24453b3463097c8f0a25dd2d21219944b0fe/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3474a3b72bf01781f123dc2423bff037ae398fcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3474a3b72bf01781f123dc2423bff037ae398fcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3474a3b72bf01781f123dc2423bff037ae398fcd"}], "stats": {"total": 94, "additions": 72, "deletions": 22}, "files": [{"sha": "72d7832f9c62fe33a4f7ed04b0146b28e63f9d2a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108e24453b3463097c8f0a25dd2d21219944b0fe/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108e24453b3463097c8f0a25dd2d21219944b0fe/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=108e24453b3463097c8f0a25dd2d21219944b0fe", "patch": "@@ -1,5 +1,14 @@\n 2009-11-24  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/42137\n+\t* parser.c (cp_parser_mem_initializer_id): Pass typename_type to\n+\tcp_parser_class_name.\n+\t(cp_parser_unqualified_id): Same, rather than class_type.\n+\n+\tPR c++/11764\n+\t* parser.c (cp_parser_expression_statement): Give helpful error\n+\tfor constructor name used as type.\n+\n \t* pt.c (determine_specialization): Give helpful error about missing\n \t\"template<>\".\n "}, {"sha": "0b6fa01cbb34371077dc97ed182b090bd1e39b6d", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 34, "deletions": 19, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108e24453b3463097c8f0a25dd2d21219944b0fe/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108e24453b3463097c8f0a25dd2d21219944b0fe/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=108e24453b3463097c8f0a25dd2d21219944b0fe", "patch": "@@ -2401,11 +2401,15 @@ cp_parser_diagnose_invalid_type_name (cp_parser *parser,\n \terror_at (location, \"%qE in namespace %qE does not name a type\",\n \t\t  id, parser->scope);\n       else if (CLASS_TYPE_P (parser->scope)\n-\t       && constructor_name_p (id, parser->scope)\n-\t       && cp_lexer_next_token_is (parser->lexer, CPP_LESS))\n-\t/* A<T>::A<T>() */\n-\terror_at (location, \"invalid use of constructor %<%T::%E%> as \"\n-\t\t  \"template\", parser->scope, id);\n+\t       && constructor_name_p (id, parser->scope))\n+\t{\n+\t  /* A<T>::A<T>() */\n+\t  error_at (location, \"%<%T::%E%> names the constructor, not\"\n+\t\t    \" the type\", parser->scope, id);\n+\t  if (cp_lexer_next_token_is (parser->lexer, CPP_LESS))\n+\t    error_at (location, \"and %qT has no template constructors\",\n+\t\t      parser->scope);\n+\t}\n       else if (TYPE_P (parser->scope)\n \t       && dependent_scope_p (parser->scope))\n \terror_at (location, \"need %<typename%> before %<%T::%E%> because \"\n@@ -3906,9 +3910,9 @@ cp_parser_unqualified_id (cp_parser* parser,\n \t/* If there was an explicit qualification (S::~T), first look\n \t   in the scope given by the qualification (i.e., S).\n \n-\t   Note: in the calls to cp_parser_class_name below we pretend that\n-\t   the lookup had an explicit 'class' tag so that lookup finds the\n-\t   injected-class-name rather than the constructor.  */\n+\t   Note: in the calls to cp_parser_class_name below we pass\n+\t   typename_type so that lookup finds the injected-class-name\n+\t   rather than the constructor.  */\n \tdone = false;\n \ttype_decl = NULL_TREE;\n \tif (scope)\n@@ -3917,7 +3921,7 @@ cp_parser_unqualified_id (cp_parser* parser,\n \t    type_decl = cp_parser_class_name (parser,\n \t\t\t\t\t      /*typename_keyword_p=*/false,\n \t\t\t\t\t      /*template_keyword_p=*/false,\n-\t\t\t\t\t      class_type,\n+\t\t\t\t\t      typename_type,\n \t\t\t\t\t      /*check_dependency=*/false,\n \t\t\t\t\t      /*class_head_p=*/false,\n \t\t\t\t\t      declarator_p);\n@@ -3935,7 +3939,7 @@ cp_parser_unqualified_id (cp_parser* parser,\n \t      = cp_parser_class_name (parser,\n \t\t\t\t      /*typename_keyword_p=*/false,\n \t\t\t\t      /*template_keyword_p=*/false,\n-\t\t\t\t      class_type,\n+\t\t\t\t      typename_type,\n \t\t\t\t      /*check_dependency=*/false,\n \t\t\t\t      /*class_head_p=*/false,\n \t\t\t\t      declarator_p);\n@@ -3953,7 +3957,7 @@ cp_parser_unqualified_id (cp_parser* parser,\n \t      = cp_parser_class_name (parser,\n \t\t\t\t      /*typename_keyword_p=*/false,\n \t\t\t\t      /*template_keyword_p=*/false,\n-\t\t\t\t      class_type,\n+\t\t\t\t      typename_type,\n \t\t\t\t      /*check_dependency=*/false,\n \t\t\t\t      /*class_head_p=*/false,\n \t\t\t\t      declarator_p);\n@@ -3972,7 +3976,7 @@ cp_parser_unqualified_id (cp_parser* parser,\n \t      = cp_parser_class_name (parser,\n \t\t\t\t      /*typename_keyword_p=*/false,\n \t\t\t\t      /*template_keyword_p=*/false,\n-\t\t\t\t      class_type,\n+\t\t\t\t      typename_type,\n \t\t\t\t      /*check_dependency=*/false,\n \t\t\t\t      /*class_head_p=*/false,\n \t\t\t\t      declarator_p);\n@@ -7800,13 +7804,24 @@ cp_parser_expression_statement (cp_parser* parser, tree in_statement_expr)\n   if (cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON))\n     statement = cp_parser_expression (parser, /*cast_p=*/false, NULL);\n \n-  /* Give a helpful message for \"A<T>::type t;\"  */\n+  /* Give a helpful message for \"A<T>::type t;\" and the like.  */\n   if (cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON)\n-      && !cp_parser_uncommitted_to_tentative_parse_p (parser)\n-      && TREE_CODE (statement) == SCOPE_REF)\n-    error_at (token->location, \"need %<typename%> before %qE because \"\n-\t      \"%qT is a dependent scope\",\n-\t      statement, TREE_OPERAND (statement, 0));\n+      && !cp_parser_uncommitted_to_tentative_parse_p (parser))\n+    {\n+      if (TREE_CODE (statement) == SCOPE_REF)\n+\terror_at (token->location, \"need %<typename%> before %qE because \"\n+\t\t  \"%qT is a dependent scope\",\n+\t\t  statement, TREE_OPERAND (statement, 0));\n+      else if (is_overloaded_fn (statement)\n+\t       && DECL_CONSTRUCTOR_P (get_first_fn (statement)))\n+\t{\n+\t  /* A::A a; */\n+\t  tree fn = get_first_fn (statement);\n+\t  error_at (token->location,\n+\t\t    \"%<%T::%D%> names the constructor, not the type\",\n+\t\t    DECL_CONTEXT (fn), DECL_NAME (fn));\n+\t}\n+    }\n \n   /* Consume the final `;'.  */\n   cp_parser_consume_semicolon_at_end_of_statement (parser);\n@@ -10020,7 +10035,7 @@ cp_parser_mem_initializer_id (cp_parser* parser)\n     return cp_parser_class_name (parser,\n \t\t\t\t /*typename_keyword_p=*/true,\n \t\t\t\t /*template_keyword_p=*/template_p,\n-\t\t\t\t none_type,\n+\t\t\t\t typename_type,\n \t\t\t\t /*check_dependency_p=*/true,\n \t\t\t\t /*class_head_p=*/false,\n \t\t\t\t /*is_declaration=*/true);"}, {"sha": "cc5e804c4bbd02501f57d2281917c46008c6559f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108e24453b3463097c8f0a25dd2d21219944b0fe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108e24453b3463097c8f0a25dd2d21219944b0fe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=108e24453b3463097c8f0a25dd2d21219944b0fe", "patch": "@@ -1,3 +1,9 @@\n+2009-11-23  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/tc1/dr147.C: Check for helpful messages. Add DR 318 tests.\n+\t* g++.old-deja/g++.pt/ctor2.C: Adjust.\n+\t* g++.dg/lookup/name-clash4.C: Adjust.\n+\n 2009-11-23  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/template/spec15.C: Check for helpful message."}, {"sha": "490f7500ec6f125be373d472d99ac99b259e4376", "filename": "gcc/testsuite/g++.dg/lookup/name-clash4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108e24453b3463097c8f0a25dd2d21219944b0fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fname-clash4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108e24453b3463097c8f0a25dd2d21219944b0fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fname-clash4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fname-clash4.C?ref=108e24453b3463097c8f0a25dd2d21219944b0fe", "patch": "@@ -9,4 +9,4 @@ struct A\n     template<int> struct A {};\t// { dg-error \"same name\" }\n };\n \n-A::A<0> a;\t// { dg-error \"not a template|invalid use of constructor\" }\n+A::A<0> a;\t// { dg-error \"not a template|constructor\" }"}, {"sha": "9006be9e1802beaf4c524d4df42a8608ae191525", "filename": "gcc/testsuite/g++.dg/tc1/dr147.C", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108e24453b3463097c8f0a25dd2d21219944b0fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr147.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108e24453b3463097c8f0a25dd2d21219944b0fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr147.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr147.C?ref=108e24453b3463097c8f0a25dd2d21219944b0fe", "patch": "@@ -11,8 +11,12 @@ A::A() { }\n B::B() { }\n \n B::A ba;\n-A::A a; // { dg-error \"\" \"the injected-class-name can never be found through qualified lookup\" }\n+A::A a; // { dg-error \"constructor\" \"the injected-class-name can never be found through qualified lookup\" }\n \n+void f()\n+{\n+  A::A a; // { dg-error \"constructor\" }\n+} // { dg-error \"\" \"\" { target *-*-* } 18 } error cascade\n }\n \n namespace N2 {\n@@ -26,6 +30,22 @@ template <class T> struct A {\n   template <class T2> A(T2);\n   static A x;\n };\n+template<> template <> A<char>::A<char>(char);\n template<> A<int>::A<int>(A<int>::x);  // { dg-error \"\" \"this is an invalid declaration of the constructor\" }\n \n }\n+\n+// But DR 318 says that in situations where a type is syntactically\n+// required, lookup finds it.\n+\n+struct C\n+{\n+  C();\n+  typedef int T;\n+};\n+struct C::C c;\n+C::C::T t;\n+struct D: C::C\n+{\n+  D(): C::C() { }\n+};"}, {"sha": "eb8f312642f7abe7f2cc043a2588e9b1f2234881", "filename": "gcc/testsuite/g++.old-deja/g++.pt/ctor2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108e24453b3463097c8f0a25dd2d21219944b0fe/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fctor2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108e24453b3463097c8f0a25dd2d21219944b0fe/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fctor2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fctor2.C?ref=108e24453b3463097c8f0a25dd2d21219944b0fe", "patch": "@@ -8,6 +8,6 @@ struct A {\n };\n \n template <class T>\n-A<T>::A<T>()   // { dg-error \"invalid use of constructor|qualified name\" }\n+A<T>::A<T>()   // { dg-error \"constructor|qualified name\" }\n {\n } // { dg-error \"end of input\" }"}]}