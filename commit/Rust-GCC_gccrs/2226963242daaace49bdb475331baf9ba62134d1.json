{"sha": "2226963242daaace49bdb475331baf9ba62134d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIyNjk2MzI0MmRhYWFjZTQ5YmRiNDc1MzMxYmFmOWJhNjIxMzRkMQ==", "commit": {"author": {"name": "Felix Yen", "email": "fwy@alumni.brown.edu", "date": "2004-02-04T06:21:21Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-02-04T06:21:21Z"}, "message": "allocator.cc: Add map, deque, set tests.\n\n\n2004-02-03  Felix Yen  <fwy@alumni.brown.edu>\n\t    Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/performance/20_util/allocator.cc: Add map,\n\tdeque, set tests.\n\t* testsuite/performance/20_util/allocator_thread.cc: Same.\n\nCo-Authored-By: Benjamin Kosnik <bkoz@redhat.com>\n\nFrom-SVN: r77225", "tree": {"sha": "11c753a7a89c6a8dacfb90eeb069c65d9d681a73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11c753a7a89c6a8dacfb90eeb069c65d9d681a73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2226963242daaace49bdb475331baf9ba62134d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2226963242daaace49bdb475331baf9ba62134d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2226963242daaace49bdb475331baf9ba62134d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2226963242daaace49bdb475331baf9ba62134d1/comments", "author": null, "committer": null, "parents": [{"sha": "a2a8cc44e94f866649f05b8c68b82d36a71f1a5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2a8cc44e94f866649f05b8c68b82d36a71f1a5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2a8cc44e94f866649f05b8c68b82d36a71f1a5a"}], "stats": {"total": 145, "additions": 115, "deletions": 30}, "files": [{"sha": "6921ac10477a5bf26fc1a7041e6b2b65a7257e21", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2226963242daaace49bdb475331baf9ba62134d1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2226963242daaace49bdb475331baf9ba62134d1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2226963242daaace49bdb475331baf9ba62134d1", "patch": "@@ -1,3 +1,10 @@\n+2004-02-03  Felix Yen  <fwy@alumni.brown.edu>\n+\t    Benjamin Kosnik  <bkoz@redhat.com>\n+\t\n+\t* testsuite/performance/20_util/allocator.cc: Add map,\n+\tdeque, set tests.\n+\t* testsuite/performance/20_util/allocator_thread.cc: Same.\n+\t\n 2004-02-03  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/basic_string.h (insert(iterator)): Remove,"}, {"sha": "7a27c2fd3425a8b75da63916cdc04edb8ac7e79a", "filename": "libstdc++-v3/testsuite/performance/20_util/allocator.cc", "status": "modified", "additions": 54, "deletions": 16, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2226963242daaace49bdb475331baf9ba62134d1/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2226963242daaace49bdb475331baf9ba62134d1/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator.cc?ref=2226963242daaace49bdb475331baf9ba62134d1", "patch": "@@ -35,6 +35,9 @@\n \n #include <vector>\n #include <list>\n+#include <map>\n+#include <deque>\n+#include <set>\n #include <typeinfo>\n #include <sstream>\n #include <ext/mt_allocator.h>\n@@ -44,9 +47,6 @@\n #include <testsuite_performance.h>\n \n using namespace std;\n-using __gnu_cxx::__mt_alloc;\n-using __gnu_cxx::new_allocator;\n-using __gnu_cxx::malloc_allocator;\n \n typedef int test_type;\n \n@@ -61,18 +61,27 @@ int iterations = 100000;\n // should probably be investigated in more detail.\n int insert_values = 128;\n \n+template<typename TestType>\n+  struct value_type : public pair<TestType, TestType>\n+  {\n+    value_type() : pair<TestType, TestType>(0, 0) { }\n+\n+    inline value_type operator++() { return ++this->first, *this; }\n+    inline operator TestType() const { return this->first; }\n+  };\n+\n template<typename Container>\n   int\n-  do_loop()\n+  do_loop(Container& obj)\n   {\n     int test_iterations = 0;\n     try\n       {\n-\tContainer obj;\n+\tvalue_type<test_type> test_value;\n \twhile (test_iterations < iterations)\n \t  {\n \t    for (int j = 0; j < insert_values; ++j)\n-\t      obj.push_back(test_iterations);\n+\t      obj.insert(obj.end(), ++test_value);\n \t    ++test_iterations;\n \t  }\n       }\n@@ -94,7 +103,7 @@ template<typename Container>\n     resource_counter resource;\n     clear_counters(time, resource);\n     start_counters(time, resource);\n-    int test_iterations = do_loop<Container>();\n+    int test_iterations = do_loop(obj);\n     stop_counters(time, resource);\n  \n     std::ostringstream comment;\n@@ -109,30 +118,59 @@ template<typename Container>\n // http://gcc.gnu.org/ml/libstdc++/2003-05/msg00231.html\n int main(void)\n {\n+  typedef __gnu_cxx::malloc_allocator<test_type> m_alloc_type;\n+  typedef __gnu_cxx::new_allocator<test_type> n_alloc_type;\n+  typedef __gnu_cxx::__mt_alloc<test_type> so_alloc_type;\n+\n+#ifdef TEST_B0\n+  test_container(vector<test_type, m_alloc_type>());\n+#endif\n #ifdef TEST_B1\n-  test_container(vector<test_type>());\n+  test_container(vector<test_type, n_alloc_type>());\n #endif\n #ifdef TEST_B2\n-  test_container(vector<test_type, malloc_allocator<test_type> >());\n+  test_container(vector<test_type, so_alloc_type>());\n #endif\n+\n #ifdef TEST_B3\n-  test_container(vector<test_type, new_allocator<test_type> >());\n+  test_container(list<test_type, m_alloc_type>());\n #endif\n #ifdef TEST_B4\n-  test_container(vector<test_type, __mt_alloc<test_type> >());\n+  test_container(list<test_type, n_alloc_type>());\n #endif\n-\n #ifdef TEST_B5\n-  test_container(list<test_type>());\n+  test_container(list<test_type, so_alloc_type>());\n #endif\n+\n #ifdef TEST_B6\n-  test_container(list<test_type, malloc_allocator<test_type> >());\n+  test_container(deque<test_type, m_alloc_type>());\n #endif\n #ifdef TEST_B7\n-  test_container(list<test_type, new_allocator<test_type> >());\n+  test_container(deque<test_type, n_alloc_type>());\n #endif\n #ifdef TEST_B8\n-  test_container(list<test_type, __mt_alloc<test_type> >());\n+  test_container(deque<test_type, so_alloc_type>());\n+#endif\n+\n+  typedef less<test_type> compare_type;\n+#ifdef TEST_B9\n+  test_container(map<test_type, test_type, compare_type, m_alloc_type>());\n+#endif\n+#ifdef TEST_B10\n+  test_container(map<test_type, test_type, compare_type, n_alloc_type>());\n+#endif\n+#ifdef TEST_B11\n+  test_container(map<test_type, test_type, compare_type, so_alloc_type>());\n+#endif\n+\n+#ifdef TEST_B12\n+  test_container(set<test_type, compare_type, m_alloc_type>());\n+#endif\n+#ifdef TEST_B13\n+  test_container(set<test_type, compare_type, n_alloc_type>());\n+#endif\n+#ifdef TEST_B14\n+  test_container(set<test_type, compare_type, so_alloc_type>());\n #endif\n \n   return 0;"}, {"sha": "b46ee4d2adf01bc3c43950d3358218d74705e70f", "filename": "libstdc++-v3/testsuite/performance/20_util/allocator_thread.cc", "status": "modified", "additions": 54, "deletions": 14, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2226963242daaace49bdb475331baf9ba62134d1/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator_thread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2226963242daaace49bdb475331baf9ba62134d1/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator_thread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator_thread.cc?ref=2226963242daaace49bdb475331baf9ba62134d1", "patch": "@@ -35,6 +35,9 @@\n \n #include <vector>\n #include <list>\n+#include <map>\n+#include <deque>\n+#include <set>\n #include <typeinfo>\n #include <sstream>\n #include <pthread.h>\n@@ -45,9 +48,6 @@\n #include <testsuite_performance.h>\n \n using namespace std;\n-using __gnu_cxx::__mt_alloc;\n-using __gnu_cxx::new_allocator;\n-using __gnu_cxx::malloc_allocator;\n \n typedef int test_type;\n \n@@ -62,6 +62,15 @@ int iterations = 25000;\n // should probably be investigated in more detail.\n int insert_values = 128;\n \n+template<typename TestType>\n+  struct value_type : public pair<TestType, TestType>\n+  {\n+    value_type() : pair<TestType, TestType>(0, 0) { }\n+\n+    inline value_type operator++() { return ++this->first, *this; }\n+    inline operator TestType() const { return this->first; }\n+  };\n+\n template<typename Container>\n   void*\n   do_loop(void* p = NULL)\n@@ -70,19 +79,21 @@ template<typename Container>\n     try\n       {\n \tint test_iterations = 0;\n+\tvalue_type<test_type> test_value;\n \twhile (test_iterations < iterations)\n \t  {\n \t    for (int j = 0; j < insert_values; ++j)\n-\t      obj.insert(obj.begin(), test_iterations);\n+\t      obj.insert(obj.end(), ++test_value);\n \t    ++test_iterations;\n \t  }\n \t// NB: Don't use clear() here, instead force deallocation.\n         obj = Container();\n \ttest_iterations = 0;\n+\ttest_value = value_type<test_type>();\n \twhile (test_iterations < iterations)\n \t  {\n \t    for (int j = 0; j < insert_values; ++j)\n-\t      obj.insert(obj.begin(), test_iterations);\n+\t      obj.insert(obj.end(), ++test_value);\n \t    ++test_iterations;\n \t  }\n       }\n@@ -130,30 +141,59 @@ template<typename Container>\n // http://gcc.gnu.org/ml/libstdc++/2003-05/msg00231.html\n int main(void)\n {\n+  typedef __gnu_cxx::malloc_allocator<test_type> m_alloc_type;\n+  typedef __gnu_cxx::new_allocator<test_type> n_alloc_type;\n+  typedef __gnu_cxx::__mt_alloc<test_type> so_alloc_type;\n+\n+#ifdef TEST_T0\n+  test_container(vector<test_type, m_alloc_type>());\n+#endif\n #ifdef TEST_T1\n-  test_container(vector<test_type>());\n+  test_container(vector<test_type, n_alloc_type>());\n #endif\n #ifdef TEST_T2\n-  test_container(vector<test_type, malloc_allocator<test_type> >());\n+  test_container(vector<test_type, so_alloc_type>());\n #endif\n+\n #ifdef TEST_T3\n-  test_container(vector<test_type, new_allocator<test_type> >());\n+  test_container(list<test_type, m_alloc_type>());\n #endif\n #ifdef TEST_T4\n-  test_container(vector<test_type, __mt_alloc<test_type> >());\n+  test_container(list<test_type, n_alloc_type>());\n #endif\n-\n #ifdef TEST_T5\n-  test_container(list<test_type>());\n+  test_container(list<test_type, so_alloc_type>());\n #endif\n+\n #ifdef TEST_T6\n-  test_container(list<test_type, malloc_allocator<test_type> >());\n+  test_container(deque<test_type, m_alloc_type>());\n #endif\n #ifdef TEST_T7\n-  test_container(list<test_type, new_allocator<test_type> >());\n+  test_container(deque<test_type, n_alloc_type>());\n #endif\n #ifdef TEST_T8\n-  test_container(list<test_type, __mt_alloc<test_type> >());\n+  test_container(deque<test_type, so_alloc_type>());\n+#endif\n+\n+  typedef less<test_type> compare_type;\n+#ifdef TEST_T9\n+  test_container(map<test_type, test_type, compare_type, m_alloc_type>());\n+#endif\n+#ifdef TEST_T10\n+  test_container(map<test_type, test_type, compare_type, n_alloc_type>());\n+#endif\n+#ifdef TEST_T11\n+  test_container(map<test_type, test_type, compare_type, so_alloc_type>());\n+#endif\n+\n+#ifdef TEST_T12\n+  test_container(set<test_type, compare_type, m_alloc_type>());\n+#endif\n+#ifdef TEST_T13\n+  test_container(set<test_type, compare_type, n_alloc_type>());\n+#endif\n+#ifdef TEST_T14\n+  test_container(set<test_type, compare_type, so_alloc_type>());\n #endif\n \n   return 0;"}]}