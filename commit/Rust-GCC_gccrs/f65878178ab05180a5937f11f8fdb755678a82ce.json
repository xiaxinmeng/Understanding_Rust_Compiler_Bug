{"sha": "f65878178ab05180a5937f11f8fdb755678a82ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY1ODc4MTc4YWIwNTE4MGE1OTM3ZjExZjhmZGI3NTU2NzhhODJjZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-07-06T17:27:34Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-07-06T17:28:35Z"}, "message": "i386: Add variable vec_set for 32bit vectors [PR97194]\n\nTo generate sane code a SSE4.1 variable PBLENDV instruction is needed.\n\nAlso enable variable vec_set through vec_setm_operand predicate\nfor TARGET_SSE4_1 instead of TARGET_AVX2.  ix86_expand_vector_init_duplicate\nis able to emulate vpbroadcast{b,w} with pxor/pshufb.\n\n2021-07-06  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\tPR target/97194\n\t* config/i386/predicates.md (vec_setm_operand): Enable\n\tregister_operand for TARGET_SSE4_1.\n\t* config/i386/mmx.md (vec_setv2hi): Use vec_setm_operand\n\tas operand 2 predicate.  Call ix86_expand_vector_set_var\n\tfor non-constant index operand.\n\t(vec_setv4qi): Use vec_setm_mmx_operand as operand 2 predicate.\n\tCall ix86_expand_vector_set_var for non-constant index operand.\n\ngcc/testsuite/\n\n\tPR target/97194\n\t* gcc.target/i386/sse4_1-vec-set-1a.c: New test.\n\t* gcc.target/i386/sse4_1-vec-set-2a.c: Ditto.", "tree": {"sha": "7ac7267296f21e9246f3ac19a4b5b81687cf633e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ac7267296f21e9246f3ac19a4b5b81687cf633e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f65878178ab05180a5937f11f8fdb755678a82ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f65878178ab05180a5937f11f8fdb755678a82ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f65878178ab05180a5937f11f8fdb755678a82ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f65878178ab05180a5937f11f8fdb755678a82ce/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b096c17314a46f285fa26670048f287a399573f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b096c17314a46f285fa26670048f287a399573f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b096c17314a46f285fa26670048f287a399573f"}], "stats": {"total": 84, "additions": 77, "deletions": 7}, "files": [{"sha": "7e83b64ab599cdb519a556567b3c2337d1c0fcaf", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f65878178ab05180a5937f11f8fdb755678a82ce/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f65878178ab05180a5937f11f8fdb755678a82ce/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=f65878178ab05180a5937f11f8fdb755678a82ce", "patch": "@@ -3534,11 +3534,14 @@\n (define_expand \"vec_setv2hi\"\n   [(match_operand:V2HI 0 \"register_operand\")\n    (match_operand:HI 1 \"register_operand\")\n-   (match_operand 2 \"const_int_operand\")]\n+   (match_operand 2 \"vec_setm_operand\")]\n   \"TARGET_SSE2\"\n {\n-  ix86_expand_vector_set (false, operands[0], operands[1],\n-\t\t\t  INTVAL (operands[2]));\n+  if (CONST_INT_P (operands[2]))\n+    ix86_expand_vector_set (false, operands[0], operands[1],\n+\t\t\t    INTVAL (operands[2]));\n+  else\n+    ix86_expand_vector_set_var (operands[0], operands[1], operands[2]);\n   DONE;\n })\n \n@@ -3556,11 +3559,14 @@\n (define_expand \"vec_setv4qi\"\n   [(match_operand:V4QI 0 \"register_operand\")\n    (match_operand:QI 1 \"register_operand\")\n-   (match_operand 2 \"const_int_operand\")]\n+   (match_operand 2 \"vec_setm_mmx_operand\")]\n   \"TARGET_SSE4_1\"\n {\n-  ix86_expand_vector_set (false, operands[0], operands[1],\n-\t\t\t  INTVAL (operands[2]));\n+  if (CONST_INT_P (operands[2]))\n+    ix86_expand_vector_set (false, operands[0], operands[1],\n+\t\t\t    INTVAL (operands[2]));\n+  else\n+    ix86_expand_vector_set_var (operands[0], operands[1], operands[2]);\n   DONE;\n })\n "}, {"sha": "9488632ce24a3ce234870e43814e47cc5afb4c7a", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f65878178ab05180a5937f11f8fdb755678a82ce/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f65878178ab05180a5937f11f8fdb755678a82ce/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=f65878178ab05180a5937f11f8fdb755678a82ce", "patch": "@@ -1023,7 +1023,7 @@\n ;; True for registers, or const_int_operand, used to vec_setm expander.\n (define_predicate \"vec_setm_operand\"\n   (ior (and (match_operand 0 \"register_operand\")\n-\t    (match_test \"TARGET_AVX2\"))\n+\t    (match_test \"TARGET_SSE4_1\"))\n        (match_code \"const_int\")))\n \n (define_predicate \"vec_setm_mmx_operand\""}, {"sha": "e2a67a66764498a107e362f7596cfed44c8542c1", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-vec-set-1a.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f65878178ab05180a5937f11f8fdb755678a82ce/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-vec-set-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f65878178ab05180a5937f11f8fdb755678a82ce/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-vec-set-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-vec-set-1a.c?ref=f65878178ab05180a5937f11f8fdb755678a82ce", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-msse4.1 -O2\" } */\n+/* { dg-final { scan-assembler-times {(?n)v?pcmpeq[bwd]} 2 } } */\n+/* { dg-final { scan-assembler-times {(?n)v?p?blendv} 2 } } */\n+\n+typedef char v4qi __attribute__ ((vector_size (4)));\n+typedef short v2hi __attribute__ ((vector_size (4)));\n+\n+#define FOO(VTYPE, TYPE)\t\t\t\\\n+  VTYPE\t\t\t\t\t\t\\\n+  __attribute__ ((noipa))\t\t\t\\\n+  foo_##VTYPE (VTYPE a, TYPE b, unsigned int c)\t\\\n+  {\t\t\t\t\t\t\\\n+    a[c] = b;\t\t\t\t\t\\\n+    return a;\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\\\n+\n+FOO (v4qi, char);\n+\n+FOO (v2hi, short);"}, {"sha": "5a945be5abc28ea69e4ac32e14058a08e71e3ce9", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-vec-set-2a.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f65878178ab05180a5937f11f8fdb755678a82ce/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-vec-set-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f65878178ab05180a5937f11f8fdb755678a82ce/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-vec-set-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-vec-set-2a.c?ref=f65878178ab05180a5937f11f8fdb755678a82ce", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run { target { ! ia32 } } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+\n+#ifndef CHECK\n+#define CHECK \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK\n+\n+#include \"sse4_1-vec-set-1a.c\"\n+\n+#define CALC_TEST(vtype, type, N, idx)\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    int i,val = idx * idx - idx * 3 + 16;\t\t\t\\\n+    type res[N],exp[N];\t\t\t\t\t\t\\\n+    vtype resv;\t\t\t\t\t\t\t\\\n+    for (i = 0; i < N; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tres[i] = i * i - i * 3 + 15;\t\t\t\t\\\n+\texp[i] = res[i];\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    exp[idx] = val;\t\t\t\t\t\t\\\n+    resv = foo_##vtype (*(vtype *)&res[0], val, idx);\t\t\\\n+    for (i = 0; i < N; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tif (resv[i] != exp[i])\t\t\t\t\t\\\n+\t  abort ();\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+static void\n+TEST (void)\n+{\n+  CALC_TEST (v4qi, char, 4, 2);\n+  CALC_TEST (v2hi, short, 2, 1);\n+}"}]}