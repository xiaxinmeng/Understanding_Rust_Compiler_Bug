{"sha": "8d3b0953482c3e696d4173a8de504c84e0304953", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQzYjA5NTM0ODJjM2U2OTZkNDE3M2E4ZGU1MDRjODRlMDMwNDk1Mw==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2003-04-03T16:21:48Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2003-04-03T16:21:48Z"}, "message": "* Avoid clash of temp register for restoring target registers\n\twith EH_RETURN_STACKADJ_RTX; use multiple registers in round-robin\n\tfashion.\n\nFrom-SVN: r65202", "tree": {"sha": "03ac5b90c87f8eae24b9e5827e9023f5b347e17b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03ac5b90c87f8eae24b9e5827e9023f5b347e17b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d3b0953482c3e696d4173a8de504c84e0304953", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d3b0953482c3e696d4173a8de504c84e0304953", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d3b0953482c3e696d4173a8de504c84e0304953", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d3b0953482c3e696d4173a8de504c84e0304953/comments", "author": null, "committer": null, "parents": [{"sha": "de94b46c5c8e451b304c51453d006cf08a343338", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de94b46c5c8e451b304c51453d006cf08a343338", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de94b46c5c8e451b304c51453d006cf08a343338"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "286ac09ab25a1b6243590d03e37e8eb40c46a162", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d3b0953482c3e696d4173a8de504c84e0304953/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d3b0953482c3e696d4173a8de504c84e0304953/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d3b0953482c3e696d4173a8de504c84e0304953", "patch": "@@ -1,3 +1,9 @@\n+Thu Apr  3 17:08:09 2003  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* Avoid clash of temp register for restoring target registers\n+\twith EH_RETURN_STACKADJ_RTX; use multiple registers in round-robin\n+\tfashion.\n+\n 2003-04-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gengtype-lex.l (IWORD): Add CHAR_BITFIELD."}, {"sha": "d81a82acc5fe71858605847a2fa0406e785465b7", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d3b0953482c3e696d4173a8de504c84e0304953/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d3b0953482c3e696d4173a8de504c84e0304953/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=8d3b0953482c3e696d4173a8de504c84e0304953", "patch": "@@ -5198,6 +5198,7 @@ sh_expand_epilogue ()\n       int sp_in_r0 = 0;\n       int align;\n       rtx r0 = gen_rtx_REG (Pmode, R0_REG);\n+      int tmp_regno = R20_REG;\n       \n       /* We loop twice: first, we save 8-byte aligned registers in the\n \t higher addresses, that are known to be aligned.  Then, we\n@@ -5312,10 +5313,15 @@ sh_expand_epilogue ()\n \t\t}\n \t      else if (TARGET_REGISTER_P (i))\n \t\t{\n-\t\t  rtx r1 = gen_rtx_REG (mode, R1_REG);\n-\n-\t\t  insn = emit_move_insn (r1, mem_rtx);\n-\t\t  mem_rtx = r1;\n+\t\t  rtx tmp_reg = gen_rtx_REG (mode, tmp_regno);\n+\n+\t\t  /* Give the scheduler a bit of freedom by using R20..R23\n+\t\t     in a round-robin fashion.  Don't use R1 here because\n+\t\t     we want to use it for EH_RETURN_STACKADJ_RTX.  */\n+\t\t  insn = emit_move_insn (tmp_reg, mem_rtx);\n+\t\t  mem_rtx = tmp_reg;\n+\t\t  if (++tmp_regno > R23_REG)\n+\t\t    tmp_regno = R20_REG;\n \t\t}\n \n \t      insn = emit_move_insn (reg_rtx, mem_rtx);"}]}