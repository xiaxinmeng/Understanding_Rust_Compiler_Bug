{"sha": "dcd88195e7c18ad57165f24b7f15e2fa6d239876", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNkODgxOTVlN2MxOGFkNTcxNjVmMjRiN2YxNWUyZmE2ZDIzOTg3Ng==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-04-12T11:17:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-04-12T11:17:23Z"}, "message": "re PR target/85328 (accessing ymm16 with non-avx512 instruction form)\n\n\tPR target/85328\n\t* config/i386/sse.md\n\t(<mask_codefor>avx512dq_vextract<shuffletype>64x2_1<mask_name> split,\n\t<mask_codefor>avx512f_vextract<shuffletype>32x4_1<mask_name> split,\n\tvec_extract_lo_<mode><mask_name> split, vec_extract_lo_v32hi,\n\tvec_extract_lo_v64qi): For non-AVX512VL if input is xmm16+ reg\n\tand output is a reg, avoid creating invalid lowpart subreg, but\n\tinstead split into a 512-bit move.  Don't split if not AVX512VL,\n\tinput is xmm16+ reg and output is a mem.\n\t(vec_extract_lo_<mode><mask_name>, vec_extract_lo_v32hi,\n\tvec_extract_lo_v64qi): Don't require split if not AVX512VL, input is\n\txmm16+ reg and output is a mem.\n\n\t* gcc.target/i386/pr85328.c: New test.\n\nFrom-SVN: r259344", "tree": {"sha": "ef6d60a25efd9ae462b61bb5fcabcbd03584c6c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef6d60a25efd9ae462b61bb5fcabcbd03584c6c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcd88195e7c18ad57165f24b7f15e2fa6d239876", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcd88195e7c18ad57165f24b7f15e2fa6d239876", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcd88195e7c18ad57165f24b7f15e2fa6d239876", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcd88195e7c18ad57165f24b7f15e2fa6d239876/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b9dd1a79284dd9883c1eec0412145108135e3d75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9dd1a79284dd9883c1eec0412145108135e3d75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9dd1a79284dd9883c1eec0412145108135e3d75"}], "stats": {"total": 136, "additions": 123, "deletions": 13}, "files": [{"sha": "487d40170204ed08395b164a7a75d0d0fa1e60b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcd88195e7c18ad57165f24b7f15e2fa6d239876/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcd88195e7c18ad57165f24b7f15e2fa6d239876/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dcd88195e7c18ad57165f24b7f15e2fa6d239876", "patch": "@@ -1,3 +1,18 @@\n+2018-04-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/85328\n+\t* config/i386/sse.md\n+\t(<mask_codefor>avx512dq_vextract<shuffletype>64x2_1<mask_name> split,\n+\t<mask_codefor>avx512f_vextract<shuffletype>32x4_1<mask_name> split,\n+\tvec_extract_lo_<mode><mask_name> split, vec_extract_lo_v32hi,\n+\tvec_extract_lo_v64qi): For non-AVX512VL if input is xmm16+ reg\n+\tand output is a reg, avoid creating invalid lowpart subreg, but\n+\tinstead split into a 512-bit move.  Don't split if not AVX512VL,\n+\tinput is xmm16+ reg and output is a mem.\n+\t(vec_extract_lo_<mode><mask_name>, vec_extract_lo_v32hi,\n+\tvec_extract_lo_v64qi): Don't require split if not AVX512VL, input is\n+\txmm16+ reg and output is a mem.\n+\n 2018-04-12  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/s390.c (s390_output_indirect_thunk_function): Check"}, {"sha": "c3345d0cfdd624de7055e6ed828bc8f7e1bfd9f6", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 85, "deletions": 13, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcd88195e7c18ad57165f24b7f15e2fa6d239876/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcd88195e7c18ad57165f24b7f15e2fa6d239876/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=dcd88195e7c18ad57165f24b7f15e2fa6d239876", "patch": "@@ -7361,9 +7361,21 @@\n \t(vec_select:<ssequartermode>\n \t  (match_operand:V8FI 1 \"register_operand\")\n \t  (parallel [(const_int 0) (const_int 1)])))]\n-  \"TARGET_AVX512DQ && reload_completed\"\n+  \"TARGET_AVX512DQ\n+   && reload_completed\n+   && (TARGET_AVX512VL\n+       || REG_P (operands[0])\n+       || !EXT_REX_SSE_REG_P (operands[1]))\"\n   [(set (match_dup 0) (match_dup 1))]\n-  \"operands[1] = gen_lowpart (<ssequartermode>mode, operands[1]);\")\n+{\n+  if (!TARGET_AVX512VL\n+      && REG_P (operands[0])\n+      && EXT_REX_SSE_REG_P (operands[1]))\n+    operands[0]\n+      = lowpart_subreg (<MODE>mode, operands[0], <ssequartermode>mode);\n+  else\n+    operands[1] = gen_lowpart (<ssequartermode>mode, operands[1]);\n+})\n \n (define_insn \"<mask_codefor>avx512f_vextract<shuffletype>32x4_1<mask_name>\"\n   [(set (match_operand:<ssequartermode> 0 \"<store_mask_predicate>\" \"=<store_mask_constraint>\")\n@@ -7394,9 +7406,21 @@\n \t  (match_operand:V16FI 1 \"register_operand\")\n \t  (parallel [(const_int 0) (const_int 1)\n \t\t     (const_int 2) (const_int 3)])))]\n-  \"TARGET_AVX512F && reload_completed\"\n+  \"TARGET_AVX512F\n+   && reload_completed\n+   && (TARGET_AVX512VL\n+       || REG_P (operands[0])\n+       || !EXT_REX_SSE_REG_P (operands[1]))\"\n   [(set (match_dup 0) (match_dup 1))]\n-  \"operands[1] = gen_lowpart (<ssequartermode>mode, operands[1]);\")\n+{\n+  if (!TARGET_AVX512VL\n+      && REG_P (operands[0])\n+      && EXT_REX_SSE_REG_P (operands[1]))\n+    operands[0]\n+      = lowpart_subreg (<MODE>mode, operands[0], <ssequartermode>mode);\n+  else\n+    operands[1] = gen_lowpart (<ssequartermode>mode, operands[1]);\n+})\n \n (define_mode_attr extract_type_2\n   [(V16SF \"avx512dq\") (V16SI \"avx512dq\") (V8DF \"avx512f\") (V8DI \"avx512f\")])\n@@ -7639,7 +7663,10 @@\n    && <mask_mode512bit_condition>\n    && (<mask_applied> || !(MEM_P (operands[0]) && MEM_P (operands[1])))\"\n {\n-  if (<mask_applied>)\n+  if (<mask_applied>\n+      || (!TARGET_AVX512VL\n+\t  && !REG_P (operands[0])\n+\t  && EXT_REX_SSE_REG_P (operands[1])))\n     return \"vextract<shuffletype>32x8\\t{$0x0, %1, %0<mask_operand2>|%0<mask_operand2>, %1, 0x0}\";\n   else\n     return \"#\";\n@@ -7654,9 +7681,20 @@\n \t    (const_int 4) (const_int 5)\n \t    (const_int 6) (const_int 7)])))]\n   \"TARGET_AVX512F && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n-   && reload_completed\"\n+   && reload_completed\n+   && (TARGET_AVX512VL\n+       || REG_P (operands[0])\n+       || !EXT_REX_SSE_REG_P (operands[1]))\"\n   [(set (match_dup 0) (match_dup 1))]\n-  \"operands[1] = gen_lowpart (<ssehalfvecmode>mode, operands[1]);\")\n+{\n+  if (!TARGET_AVX512VL\n+      && REG_P (operands[0])\n+      && EXT_REX_SSE_REG_P (operands[1]))\n+    operands[0]\n+      = lowpart_subreg (<MODE>mode, operands[0], <ssehalfvecmode>mode);\n+  else\n+    operands[1] = gen_lowpart (<ssehalfvecmode>mode, operands[1]);\n+})\n \n (define_insn \"vec_extract_lo_<mode><mask_name>\"\n   [(set (match_operand:<ssehalfvecmode> 0 \"<store_mask_predicate>\" \"=v,m\")\n@@ -7828,10 +7866,27 @@\n \t\t     (const_int 12) (const_int 13)\n \t\t     (const_int 14) (const_int 15)])))]\n   \"TARGET_AVX512F && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n-  \"#\"\n-  \"&& reload_completed\"\n+{\n+  if (TARGET_AVX512VL\n+      || REG_P (operands[0])\n+      || !EXT_REX_SSE_REG_P (operands[1]))\n+    return \"#\";\n+  else\n+    return \"vextracti64x4\\t{$0x0, %1, %0|%0, %1, 0x0}\";\n+}\n+  \"&& reload_completed\n+   && (TARGET_AVX512VL\n+       || REG_P (operands[0])\n+       || !EXT_REX_SSE_REG_P (operands[1]))\"\n   [(set (match_dup 0) (match_dup 1))]\n-  \"operands[1] = gen_lowpart (V16HImode, operands[1]);\")\n+{\n+  if (!TARGET_AVX512VL\n+      && REG_P (operands[0])\n+      && EXT_REX_SSE_REG_P (operands[1]))\n+    operands[0] = lowpart_subreg (V32HImode, operands[0], V16HImode);\n+  else\n+    operands[1] = gen_lowpart (V16HImode, operands[1]);\n+})\n \n (define_insn \"vec_extract_hi_v32hi\"\n   [(set (match_operand:V16HI 0 \"nonimmediate_operand\" \"=v,m\")\n@@ -7913,10 +7968,27 @@\n \t\t     (const_int 28) (const_int 29)\n \t\t     (const_int 30) (const_int 31)])))]\n   \"TARGET_AVX512F && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n-  \"#\"\n-  \"&& reload_completed\"\n+{\n+  if (TARGET_AVX512VL\n+      || REG_P (operands[0])\n+      || !EXT_REX_SSE_REG_P (operands[1]))\n+    return \"#\";\n+  else\n+    return \"vextracti64x4\\t{$0x0, %1, %0|%0, %1, 0x0}\";\n+}\n+  \"&& reload_completed\n+   && (TARGET_AVX512VL\n+       || REG_P (operands[0])\n+       || !EXT_REX_SSE_REG_P (operands[1]))\"\n   [(set (match_dup 0) (match_dup 1))]\n-  \"operands[1] = gen_lowpart (V32QImode, operands[1]);\")\n+{\n+  if (!TARGET_AVX512VL\n+      && REG_P (operands[0])\n+      && EXT_REX_SSE_REG_P (operands[1]))\n+    operands[0] = lowpart_subreg (V64QImode, operands[0], V32QImode);\n+  else\n+    operands[1] = gen_lowpart (V32QImode, operands[1]);\n+})\n \n (define_insn \"vec_extract_hi_v64qi\"\n   [(set (match_operand:V32QI 0 \"nonimmediate_operand\" \"=v,m\")"}, {"sha": "03099159db0d1c923ac2d85555b96bcf1abfa911", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcd88195e7c18ad57165f24b7f15e2fa6d239876/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcd88195e7c18ad57165f24b7f15e2fa6d239876/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dcd88195e7c18ad57165f24b7f15e2fa6d239876", "patch": "@@ -1,3 +1,8 @@\n+2018-04-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/85328\n+\t* gcc.target/i386/pr85328.c: New test.\n+\n 2018-04-12  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* gcc.target/s390/nobp-no-dwarf2-cfi.c: New test."}, {"sha": "987ea82fdebb6ffa09bfbbb8ce37c661dd72c983", "filename": "gcc/testsuite/gcc.target/i386/pr85328.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcd88195e7c18ad57165f24b7f15e2fa6d239876/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85328.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcd88195e7c18ad57165f24b7f15e2fa6d239876/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85328.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85328.c?ref=dcd88195e7c18ad57165f24b7f15e2fa6d239876", "patch": "@@ -0,0 +1,18 @@\n+/* PR target/85328 */\n+/* { dg-do assemble { target avx512f } } */\n+/* { dg-options \"-O3 -fno-caller-saves -mavx512f\" } */\n+\n+typedef char U __attribute__((vector_size (64)));\n+typedef int V __attribute__((vector_size (64)));\n+U a, b;\n+\n+extern void bar (void);\n+\n+V\n+foo (V f)\n+{\n+  b <<= (U){(V){}[63]} & 7;\n+  bar ();\n+  a = (U)f & 7;\n+  return (V)b;\n+}"}]}