{"sha": "c89c53eb67992a85c4196ec7977cbe1c44525dbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg5YzUzZWI2Nzk5MmE4NWM0MTk2ZWM3OTc3Y2JlMWM0NDUyNWRiZg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-02-02T21:55:39Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-02-02T21:55:39Z"}, "message": "jv-scan.c: Include version.c, <getopt.h>.\n\n\t* jv-scan.c: Include version.c, <getopt.h>.\n\t(LONG_OPT, OPT_HELP, OPT_VERSION): New macros.\n\t(options): New array.\n\t(usage): New function.\n\t(version): New function.\n\t(main): Use getopt_long to parse command line.\n\t* jcf-dump.c: Include version.c, <getopt.h>.\n\t(LONG_OPT, OPT_classpath, OPT_CLASSPATH, OPT_HELP, OPT_VERSION,\n\tOPT_JAVAP): New macros.\n\t(options): New array.\n\t(usage): Return `void'.  Changed message.\n\t(help): New function.\n\t(version): New function.\n\t(main): Use getopt_long_only to parse command line.\n\t* gjavah.c: Include <getopt.h>.\n\t(LONG_OPT, OPT_classpath, OPT_CLASSPATH, OPT_HELP, OPT_TEMP,\n\tOPT_VERSION, OPT_PREPEND, OPT_FRIEND, OPT_ADD, OPT_APPEND, OPT_M,\n\tOPT_MM, OPT_MG, OPT_MD, OPT_MMD): New macros.\n\t(options): New array.\n\t(java_no_argument): Removed.\n\t(help): Updated with missing options.\n\t(main): Use getopt_long_only to parse command line.\n\t(usage): Changed message.\n\nFrom-SVN: r31765", "tree": {"sha": "486e69598819b74c2405ad57eb070f8a933f8e19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/486e69598819b74c2405ad57eb070f8a933f8e19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c89c53eb67992a85c4196ec7977cbe1c44525dbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c89c53eb67992a85c4196ec7977cbe1c44525dbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c89c53eb67992a85c4196ec7977cbe1c44525dbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c89c53eb67992a85c4196ec7977cbe1c44525dbf/comments", "author": null, "committer": null, "parents": [{"sha": "2e695cbbc1753da422d067e7df2dfbd92b333d88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e695cbbc1753da422d067e7df2dfbd92b333d88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e695cbbc1753da422d067e7df2dfbd92b333d88"}], "stats": {"total": 622, "additions": 405, "deletions": 217}, "files": [{"sha": "40ac69c6f4553134b262f93fc705fa3262e66780", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c89c53eb67992a85c4196ec7977cbe1c44525dbf/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c89c53eb67992a85c4196ec7977cbe1c44525dbf/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=c89c53eb67992a85c4196ec7977cbe1c44525dbf", "patch": "@@ -1,3 +1,29 @@\n+2000-02-02  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* jv-scan.c: Include version.c, <getopt.h>.\n+\t(LONG_OPT, OPT_HELP, OPT_VERSION): New macros.\n+\t(options): New array.\n+\t(usage): New function.\n+\t(version): New function.\n+\t(main): Use getopt_long to parse command line.\n+\t* jcf-dump.c: Include version.c, <getopt.h>.\n+\t(LONG_OPT, OPT_classpath, OPT_CLASSPATH, OPT_HELP, OPT_VERSION,\n+\tOPT_JAVAP): New macros.\n+\t(options): New array.\n+\t(usage): Return `void'.  Changed message.\n+\t(help): New function.\n+\t(version): New function.\n+\t(main): Use getopt_long_only to parse command line.\n+\t* gjavah.c: Include <getopt.h>.\n+\t(LONG_OPT, OPT_classpath, OPT_CLASSPATH, OPT_HELP, OPT_TEMP,\n+\tOPT_VERSION, OPT_PREPEND, OPT_FRIEND, OPT_ADD, OPT_APPEND, OPT_M,\n+\tOPT_MM, OPT_MG, OPT_MD, OPT_MMD): New macros.\n+\t(options): New array.\n+\t(java_no_argument): Removed.\n+\t(help): Updated with missing options.\n+\t(main): Use getopt_long_only to parse command line.\n+\t(usage): Changed message.\n+\n 2000-01-30  Anthony Green  <green@redhat.com>\n \n \t* jcf-write.c (generate_bytecode_insns): Use TYPE_IS_WIDE to"}, {"sha": "8233c924df2c21a77dfed0a16188aa1ae7d43824", "filename": "gcc/java/gjavah.c", "status": "modified", "additions": 163, "deletions": 145, "changes": 308, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c89c53eb67992a85c4196ec7977cbe1c44525dbf/gcc%2Fjava%2Fgjavah.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c89c53eb67992a85c4196ec7977cbe1c44525dbf/gcc%2Fjava%2Fgjavah.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgjavah.c?ref=c89c53eb67992a85c4196ec7977cbe1c44525dbf", "patch": "@@ -35,6 +35,10 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n \n #include \"version.c\"\n \n+#include <getopt.h>\n+\n+\f\n+\n /* The output file.  */\n FILE *out = NULL;\n \n@@ -134,7 +138,6 @@ static const unsigned char *decode_signature_piece\n static void print_class_decls PARAMS ((FILE *, JCF *, int));\n static void usage PARAMS ((void)) ATTRIBUTE_NORETURN;\n static void help PARAMS ((void)) ATTRIBUTE_NORETURN;\n-static void java_no_argument PARAMS ((const char *)) ATTRIBUTE_NORETURN;\n static void version PARAMS ((void)) ATTRIBUTE_NORETURN;\n \n JCF_u2 current_field_name;\n@@ -161,7 +164,7 @@ static int method_pass;\n       if (out && ! stubs)\t\t\t\t\t\t      \\\n \tprint_field_info (out, jcf, current_field_name,\t\t\t      \\\n \t\t\t  current_field_signature,\t\t\t      \\\n-\t\t\t  current_field_flags);\t\t\t\t      \\\n+ \t\t\t  current_field_flags);\t\t\t\t      \\\n     }\t\t\t\t\t\t\t\t\t      \\\n   else\t\t\t\t\t\t\t\t\t      \\\n     if (! stubs) add_class_decl (out, jcf, current_field_signature);\n@@ -901,7 +904,7 @@ DEFUN(print_full_cxx_name, (stream, jcf, name_index, signature_index, is_init, n\n       fputs (\")\", stream);\n     }\n }\n-      \n+\n static void\n DEFUN(print_stub, (stream, jcf, name_index, signature_index, is_init,\n \t\t     name_override),\n@@ -1490,10 +1493,51 @@ DEFUN(process_file, (jcf, out),\n     }\n }\n \n+\f\n+\n+/* This is used to mark options with no short value.  */\n+#define LONG_OPT(Num)  ((Num) + 128)\n+\n+#define OPT_classpath LONG_OPT (0)\n+#define OPT_CLASSPATH LONG_OPT (1)\n+#define OPT_HELP      LONG_OPT (2)\n+#define OPT_TEMP      LONG_OPT (3)\n+#define OPT_VERSION   LONG_OPT (4)\n+#define OPT_PREPEND   LONG_OPT (5)\n+#define OPT_FRIEND    LONG_OPT (6)\n+#define OPT_ADD       LONG_OPT (7)\n+#define OPT_APPEND    LONG_OPT (8)\n+#define OPT_M         LONG_OPT (9)\n+#define OPT_MM        LONG_OPT (10)\n+#define OPT_MG        LONG_OPT (11)\n+#define OPT_MD        LONG_OPT (12)\n+#define OPT_MMD       LONG_OPT (13)\n+\n+static struct option options[] =\n+{\n+  { \"classpath\", required_argument, NULL, OPT_classpath },\n+  { \"CLASSPATH\", required_argument, NULL, OPT_CLASSPATH },\n+  { \"help\",      no_argument,       NULL, OPT_HELP },\n+  { \"stubs\",     no_argument,       &stubs, 1 },\n+  { \"td\",        required_argument, NULL, OPT_TEMP },\n+  { \"verbose\",   no_argument,       NULL, 'v' },\n+  { \"version\",   no_argument,       NULL, OPT_VERSION },\n+  { \"prepend\",   required_argument, NULL, OPT_PREPEND },\n+  { \"friend\",    required_argument, NULL, OPT_FRIEND },\n+  { \"add\",       required_argument, NULL, OPT_ADD },\n+  { \"append\",    required_argument, NULL, OPT_APPEND },\n+  { \"M\",         no_argument,       NULL, OPT_M   },\n+  { \"MM\",        no_argument,       NULL, OPT_MM  },\n+  { \"MG\",        no_argument,       NULL, OPT_MG  },\n+  { \"MD\",        no_argument,       NULL, OPT_MD  },\n+  { \"MMD\",       no_argument,       NULL, OPT_MMD },\n+  { NULL,        no_argument,       NULL, 0 }\n+};\n+\n static void\n usage ()\n {\n-  fprintf (stderr, \"gcjh: no classes specified\\n\");\n+  fprintf (stderr, \"Try `gcjh --help' for more information.\\n\");\n   exit (1);\n }\n \n@@ -1502,32 +1546,40 @@ help ()\n {\n   printf (\"Usage: gcjh [OPTION]... CLASS...\\n\\n\");\n   printf (\"Generate C++ header files from .class files\\n\\n\");\n+  printf (\"  -stubs                  Generate an implementation stub file\\n\");\n+  printf (\"\\n\");\n+  printf (\"  -add TEXT               Insert TEXT into class body\\n\");\n+  printf (\"  -append TEXT            Insert TEXT after class declaration\\n\");\n+  printf (\"  -friend TEXT            Insert TEXT as `friend' declaration\\n\");\n+  printf (\"  -prepend TEXT           Insert TEXT before start of class\\n\");\n+  printf (\"\\n\");\n   printf (\"  --classpath PATH        Set path to find .class files\\n\");\n   printf (\"  --CLASSPATH PATH        Set path to find .class files\\n\");\n   printf (\"  -IDIR                   Append directory to class path\\n\");\n   printf (\"  -d DIRECTORY            Set output directory name\\n\");\n-  printf (\"  --help                  Print this help, then exit\\n\");\n   printf (\"  -o FILE                 Set output file name\\n\");\n-  printf (\"  -stubs                  Generate a C++ implementation stub file\\n\");\n   printf (\"  -td DIRECTORY           Set temporary directory name\\n\");\n-  printf (\"  -v, --verbose           Print extra information while running\\n\");\n+  printf (\"\\n\");\n+  printf (\"  --help                  Print this help, then exit\\n\");\n   printf (\"  --version               Print version number, then exit\\n\");\n-  /* FIXME: print bug-report information.  */\n+  printf (\"  -v, --verbose           Print extra information while running\\n\");\n+  printf (\"\\n\");\n+  printf (\"  -M                      Print all dependencies to stdout;\\n\");\n+  printf (\"                             suppress ordinary output\\n\");\n+  printf (\"  -MM                     Print non-system dependencies to stdout;\\n\");\n+  printf (\"                             suppress ordinary output\\n\");\n+  printf (\"  -MD                     Print all dependencies to stdout\\n\");\n+  printf (\"  -MMD                    Print non-system dependencies to stdout\\n\");\n+  /* We omit -MG until it is implemented.  */\n+  printf (\"\\n\");\n+  printf (\"For bug reporting instructions, please see:\\n\");\n+  printf (\"<URL:http://www.gnu.org/software/gcc/faq.html#bugreport>.\\n\");\n   exit (0);\n }\n \n-static void\n-java_no_argument (opt)\n-     const char *opt;\n-{\n-  fprintf (stderr, \"gcjh: no argument given for option `%s'\\n\", opt);\n-  exit (1);\n-}\n-\n static void\n version ()\n {\n-  /* FIXME: use version.c?  */\n   printf (\"gcjh (%s)\\n\\n\", version_string);\n   printf (\"Copyright (C) 1998, 1999 Free Software Foundation, Inc.\\n\");\n   printf (\"This is free software; see the source for copying conditions.  There is NO\\n\");\n@@ -1543,148 +1595,123 @@ DEFUN(main, (argc, argv),\n   int argi;\n   char *output_file = NULL;\n   int emit_dependencies = 0, suppress_output = 0;\n+  int opt;\n \n   if (argc <= 1)\n-    usage ();\n+    {\n+      fprintf (stderr, \"gcjh: no classes specified\\n\");\n+      usage ();\n+    }\n \n   jcf_path_init ();\n \n-  for (argi = 1; argi < argc; argi++)\n+  /* We use getopt_long_only to allow single `-' long options.  For\n+     some of our options this is more natural.  */\n+  while ((opt = getopt_long_only (argc, argv, \"I:d:o:v\", options, NULL)) != -1)\n     {\n-      char *arg = argv[argi];\n+      switch (opt)\n+\t{\n+\tcase 0:\n+\t  /* Already handled.  */\n+\t  break;\n \n-      if (arg[0] != '-' || ! strcmp (arg, \"--\"))\n-\tbreak;\n+\tcase 'o':\n+\t  output_file = optarg;\n+\t  break;\n \n-      /* Just let all arguments be given in either \"-\" or \"--\" form.  */\n-      if (arg[1] == '-')\n-\t++arg;\n+\tcase 'd':\n+\t  output_directory = optarg;\n+\t  break;\n \n-      if (strcmp (arg, \"-o\") == 0)\n-\t{\n-\t  if (argi + 1 < argc)\n-\t    output_file = argv[++argi];\n-\t  else\n-\t    java_no_argument (argv[argi]);\n-\t}\n-      else if (strcmp (arg, \"-d\") == 0)\n-\t{\n-\t  if (argi + 1 < argc)\n-\t    output_directory = argv[++argi];\n-\t  else\n-\t    java_no_argument (argv[argi]);\n-\t}\n-      else if (strcmp (arg, \"-td\") == 0)\n-\t{\n-\t  if (argi + 1 < argc)\n-\t    temp_directory = argv[++argi];\n-\t  else\n-\t    java_no_argument (argv[argi]);\n-\t}\n-      else if (strcmp (arg, \"-prepend\") == 0)\n-\t{\n-\t  if (argi + 1 < argc)\n-\t    {\n-\t      if (prepend_count == 0)\n-\t\tprepend_specs = (char**) ALLOC ((argc-argi) * sizeof (char*));\n-\t      prepend_specs[prepend_count++] = argv[++argi];\n-\t    }\n-\t  else\n-\t    java_no_argument (argv[argi]);\n-\t}\n-      else if (strcmp (arg, \"-friend\") == 0)\n-\t{\n-\t  if (argi + 1 < argc)\n-\t    {\n-\t      if (friend_count == 0)\n-\t\tfriend_specs = (char**) ALLOC ((argc-argi) * sizeof (char*));\n-\t      friend_specs[friend_count++] = argv[++argi];\n-\t    }\n-\t  else\n-\t    java_no_argument (argv[argi]);\n-\t}\n-      else if (strcmp (arg, \"-add\") == 0)\n-\t{\n-\t  if (argi + 1 < argc)\n-\t    {\n-\t      if (add_count == 0)\n-\t\tadd_specs = (char**) ALLOC ((argc-argi) * sizeof (char*));\n-\t      add_specs[add_count++] = argv[++argi];\n-\t    }\n-\t  else\n-\t    java_no_argument (argv[argi]);\n-\t}\n-      else if (strcmp (arg, \"-append\") == 0)\n-\t{\n-\t  if (argi + 1 < argc)\n-\t    {\n-\t      if (append_count == 0)\n-\t\tappend_specs = (char**) ALLOC ((argc-argi) * sizeof (char*));\n-\t      append_specs[append_count++] = argv[++argi];\n-\t    }\n-\t  else\n-\t    java_no_argument (argv[argi]);\n-\t}\n-      else if (strcmp (arg, \"-classpath\") == 0)\n-\t{\n-\t  if (argi + 1 < argc)\n-\t    jcf_path_classpath_arg (argv[++argi]);\n-\t  else\n-\t    java_no_argument (argv[argi]);\n-\t}\n-      else if (strcmp (arg, \"-CLASSPATH\") == 0)\n-\t{\n-\t  if (argi + 1 < argc)\n-\t    jcf_path_CLASSPATH_arg (argv[++argi]);\n-\t  else\n-\t    java_no_argument (argv[argi]);\n-\t}\n-      else if (strncmp (arg, \"-I\", 2) == 0)\n-\tjcf_path_include_arg (arg + 2);\n-      else if (strcmp (arg, \"-verbose\") == 0 || strcmp (arg, \"-v\") == 0)\n-\tverbose++;\n-      else if (strcmp (arg, \"-stubs\") == 0)\n-\tstubs++;\n-      else if (strcmp (arg, \"-help\") == 0)\n-\thelp ();\n-      else if (strcmp (arg, \"-version\") == 0)\n-\tversion ();\n-      else if (strcmp (arg, \"-M\") == 0)\n-\t{\n+\tcase 'I':\n+\t  jcf_path_include_arg (optarg);\n+\t  break;\n+\n+\tcase 'v':\n+\t  verbose++;\n+\t  break;\n+\n+\tcase OPT_classpath:\n+\t  jcf_path_classpath_arg (optarg);\n+\t  break;\n+\n+\tcase OPT_CLASSPATH:\n+\t  jcf_path_CLASSPATH_arg (optarg);\n+\t  break;\n+\n+\tcase OPT_HELP:\n+\t  help ();\n+\t  break;\n+\n+\tcase OPT_TEMP:\n+\t  temp_directory = optarg;\n+\t  break;\n+\n+\tcase OPT_VERSION:\n+\t  version ();\n+\t  break;\n+\n+\tcase OPT_PREPEND:\n+\t  if (prepend_count == 0)\n+\t    prepend_specs = (char**) ALLOC (argc * sizeof (char*));\n+\t  prepend_specs[prepend_count++] = optarg;\n+\t  break;\n+\n+\tcase OPT_FRIEND:\n+\t  if (friend_count == 0)\n+\t    friend_specs = (char**) ALLOC (argc * sizeof (char*));\n+\t  friend_specs[friend_count++] = optarg;\n+\t  break;\n+\n+\tcase OPT_ADD:\n+\t  if (add_count == 0)\n+\t    add_specs = (char**) ALLOC (argc * sizeof (char*));\n+\t  add_specs[add_count++] = optarg;\n+\t  break;\n+\n+\tcase OPT_APPEND:\n+\t  if (append_count == 0)\n+\t    append_specs = (char**) ALLOC (argc * sizeof (char*));\n+\t  append_specs[append_count++] = optarg;\n+\t  break;\n+\n+\tcase OPT_M:\n \t  emit_dependencies = 1;\n \t  suppress_output = 1;\n \t  jcf_dependency_init (1);\n-\t}\n-      else if (strcmp (arg, \"-MM\") == 0)\n-\t{\n+\t  break;\n+\n+\tcase OPT_MM:\n \t  emit_dependencies = 1;\n \t  suppress_output = 1;\n \t  jcf_dependency_init (0);\n-\t}\n-      else if (strcmp (arg, \"-MG\") == 0)\n-\t{\n+\t  break;\n+\n+\tcase OPT_MG:\n \t  fprintf (stderr, \"gcjh: `%s' option is unimplemented\\n\", argv[argi]);\n \t  exit (1);\n-\t}\n-      else if (strcmp (arg, \"-MD\") == 0)\n-\t{\n+\n+\tcase OPT_MD:\n \t  emit_dependencies = 1;\n \t  jcf_dependency_init (1);\n-\t}\n-      else if (strcmp (arg, \"-MMD\") == 0)\n-\t{\n+\t  break;\n+\n+\tcase OPT_MMD:\n \t  emit_dependencies = 1;\n \t  jcf_dependency_init (0);\n-\t}\n-      else\n-\t{\n-\t  fprintf (stderr, \"%s: illegal argument\\n\", argv[argi]);\n-\t  exit (1);\n+\t  break;\n+\n+\tdefault:\n+\t  usage ();\n+\t  break;\n \t}\n     }\n \n-  if (argi == argc)\n-    usage ();\n+  if (optind == argc)\n+    {\n+      fprintf (stderr, \"gcjh: no classes specified\\n\");\n+      usage ();\n+    }\n \n   jcf_path_seal ();\n \n@@ -1694,7 +1721,7 @@ DEFUN(main, (argc, argv),\n       exit (1);\n     }\n \n-  for (; argi < argc; argi++)\n+  for (argi = optind; argi < argc; argi++)\n     {\n       char *classname = argv[argi];\n       char *current_output_file;\n@@ -1782,12 +1809,3 @@ DEFUN(main, (argc, argv),\n \n   return found_error;\n }\n-\n-/* TODO:\n-\n- * Emit \"structure forward declarations\" when needed.\n-\n- * Generate C headers, like javah\n-\n- */\n-"}, {"sha": "28092d2d5198eaf4cd3232e343b5336b2ef856b1", "filename": "gcc/java/jcf-dump.c", "status": "modified", "additions": 128, "deletions": 43, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c89c53eb67992a85c4196ec7977cbe1c44525dbf/gcc%2Fjava%2Fjcf-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c89c53eb67992a85c4196ec7977cbe1c44525dbf/gcc%2Fjava%2Fjcf-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-dump.c?ref=c89c53eb67992a85c4196ec7977cbe1c44525dbf", "patch": "@@ -53,6 +53,10 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"tree.h\"\n #include \"java-tree.h\"\n \n+#include \"version.c\"\n+\n+#include <getopt.h>\n+\n /* Outout file. */\n FILE *out;\n /* Name of output file, if NULL if stdout. */\n@@ -86,7 +90,9 @@ static void disassemble_method PARAMS ((JCF*, const unsigned char *, int));\n static void print_name PARAMS ((FILE*, JCF*, int));\n static void print_signature PARAMS ((FILE*, JCF*, int, int));\n static int utf8_equal_string PARAMS ((struct JCF*, int, const char *));\n-static int usage PARAMS ((void)) ATTRIBUTE_NORETURN;\n+static void usage PARAMS ((void)) ATTRIBUTE_NORETURN;\n+static void help PARAMS ((void)) ATTRIBUTE_NORETURN;\n+static void version PARAMS ((void)) ATTRIBUTE_NORETURN;\n static void process_class PARAMS ((struct JCF *));\n static void print_constant_pool PARAMS ((struct JCF *));\n static void print_exception_table PARAMS ((struct JCF *,\n@@ -679,13 +685,6 @@ DEFUN(print_exception_table, (jcf, entries, count),\n \n #include \"jcf-reader.c\"\n \n-static int\n-DEFUN (usage, (), )\n-{\n-  fprintf (stderr, \"Usage: jcf-dump [-o outputfile] [-c] classname\\n\");\n-  exit(1);\n-}\n-\n static void\n DEFUN(process_class, (jcf),\n       JCF *jcf)\n@@ -732,56 +731,140 @@ DEFUN(process_class, (jcf),\n   jcf->filename = NULL;\n }\n \n+\f\n+\n+/* This is used to mark options with no short value.  */\n+#define LONG_OPT(Num)  ((Num) + 128)\n+\n+#define OPT_classpath LONG_OPT (0)\n+#define OPT_CLASSPATH LONG_OPT (1)\n+#define OPT_HELP      LONG_OPT (2)\n+#define OPT_VERSION   LONG_OPT (3)\n+#define OPT_JAVAP     LONG_OPT (4)\n+\n+static struct option options[] =\n+{\n+  { \"classpath\", required_argument, NULL, OPT_classpath },\n+  { \"CLASSPATH\", required_argument, NULL, OPT_CLASSPATH },\n+  { \"help\",      no_argument,       NULL, OPT_HELP },\n+  { \"verbose\",   no_argument,       NULL, 'v' },\n+  { \"version\",   no_argument,       NULL, OPT_VERSION },\n+  { \"javap\",     no_argument,       NULL, OPT_JAVAP },\n+  { \"print-main\", no_argument,      &flag_print_main, 1 },\n+  { NULL,        no_argument,       NULL, 0 }\n+};\n+\n+static void\n+usage ()\n+{\n+  fprintf (stderr, \"Try `jcf-dump --help' for more information.\\n\");\n+  exit (1);\n+}\n+\n+static void\n+help ()\n+{\n+  printf (\"Usage: jcf-dump [OPTION]... CLASS...\\n\\n\");\n+  printf (\"Display contents of a class file in readable form.\\n\\n\");\n+  printf (\"  -c                      Disassemble method bodies\\n\");\n+  printf (\"  --javap                 Generate output in `javap' format\\n\");\n+  printf (\"\\n\");\n+  printf (\"  --classpath PATH        Set path to find .class files\\n\");\n+  printf (\"  --CLASSPATH PATH        Set path to find .class files\\n\");\n+  printf (\"  -IDIR                   Append directory to class path\\n\");\n+  printf (\"  -o FILE                 Set output file name\\n\");\n+  printf (\"\\n\");\n+  printf (\"  --help                  Print this help, then exit\\n\");\n+  printf (\"  --version               Print version number, then exit\\n\");\n+  printf (\"  -v, --verbose           Print extra information while running\\n\");\n+  printf (\"\\n\");\n+  printf (\"For bug reporting instructions, please see:\\n\");\n+  printf (\"<URL:http://www.gnu.org/software/gcc/faq.html#bugreport>.\\n\");\n+  exit (0);\n+}\n+\n+static void\n+version ()\n+{\n+  printf (\"jcf-dump (%s)\\n\\n\", version_string);\n+  printf (\"Copyright (C) 1998, 1999 Free Software Foundation, Inc.\\n\");\n+  printf (\"This is free software; see the source for copying conditions.  There is NO\\n\");\n+  printf (\"warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\");\n+  exit (0);\n+}\n+\n int\n DEFUN(main, (argc, argv),\n       int argc AND char** argv)\n {\n   JCF jcf[1];\n-  int argi;\n+  int argi, opt;\n+\n   if (argc <= 1)\n-    usage ();\n+    {\n+      fprintf (stderr, \"jcf-dump: no classes specified\\n\");\n+      usage ();\n+    }\n \n   jcf_path_init ();\n \n-  for (argi = 1; argi < argc; argi++)\n+  /* We use getopt_long_only to allow single `-' long options.  For\n+     some of our options this is more natural.  */\n+  while ((opt = getopt_long_only (argc, argv, \"o:I:vc\", options, NULL)) != -1)\n     {\n-      const char *arg = argv[argi];\n+      switch (opt)\n+\t{\n+\tcase 0:\n+\t  /* Already handled.  */\n+\t  break;\n \n-      if (arg[0] != '-' || ! strcmp (arg, \"--\"))\n-\tbreak;\n+        case 'o':\n+\t  output_file = optarg;\n+\t  break;\n \n-      /* Just let all arguments be given in either \"-\" or \"--\" form.  */\n-      if (arg[1] == '-')\n-\t++arg;\n-\n-      if (strcmp (arg, \"-o\") == 0 && argi + 1 < argc)\n-\toutput_file = argv[++argi];\n-      else if (strcmp (arg, \"-classpath\") == 0 && argi + 1 < argc)\n-\tjcf_path_classpath_arg (argv[++argi]);\n-      else if (strcmp (arg, \"-CLASSPATH\") == 0 && argi + 1 < argc)\n-\tjcf_path_CLASSPATH_arg (argv[++argi]);\n-      else if (strncmp (arg, \"-I\", 2) == 0)\n-\tjcf_path_include_arg (arg + 2);\n-      else if (strcmp (arg, \"-verbose\") == 0)\n-\tverbose++;\n-      else if (strcmp (arg, \"-print-main\") == 0)\n-\tflag_print_main++;\n-      else if (strcmp (arg, \"-c\") == 0)\n-\tflag_disassemble_methods++;\n-      else if (strcmp (arg, \"-javap\") == 0)\n-\t{\n+\tcase 'I':\n+\t  jcf_path_include_arg (optarg);\n+\t  break;\n+\n+\tcase 'v':\n+\t  verbose++;\n+\t  break;\n+\n+\tcase 'c':\n+\t  flag_disassemble_methods = 1;\n+\t  break;\n+\n+\tcase OPT_classpath:\n+\t  jcf_path_classpath_arg (optarg);\n+\t  break;\n+\n+\tcase OPT_CLASSPATH:\n+\t  jcf_path_CLASSPATH_arg (optarg);\n+\t  break;\n+\n+\tcase OPT_HELP:\n+\t  help ();\n+\t  break;\n+\n+\tcase OPT_VERSION:\n+\t  version ();\n+\t  break;\n+\n+\tcase OPT_JAVAP:\n \t  flag_javap_compatible++;\n \t  flag_print_constant_pool = 0;\n-\t}\n-      else\n-\t{\n-\t  fprintf (stderr, \"%s: illegal argument\\n\", argv[argi]);\n-\t  return FATAL_EXIT_CODE;\n+\t  break;\n+\n+\tdefault:\n+\t  usage ();\n \t}\n     }\n \n-  if (argi == argc)\n-    usage ();\n+  if (optind == argc)\n+    {\n+      fprintf (stderr, \"jcf-dump: no classes specified\\n\");\n+      usage ();\n+    }\n \n   jcf_path_seal ();\n \n@@ -806,7 +889,7 @@ DEFUN(main, (argc, argv),\n   else\n     out = stdout;\n \n-  if (argi >= argc)\n+  if (optind >= argc)\n     {\n       fprintf (out, \"Reading .class from <standard input>.\\n\");\n #if JCF_USE_STDIO\n@@ -818,7 +901,7 @@ DEFUN(main, (argc, argv),\n     }\n   else\n     {\n-      for (; argi < argc; argi++)\n+      for (argi = optind; argi < argc; argi++)\n \t{\n \t  char *arg = argv[argi];\n \t  const char *class_filename = find_class (arg, strlen (arg), jcf, 0);\n@@ -927,6 +1010,8 @@ DEFUN(main, (argc, argv),\n   return SUCCESS_EXIT_CODE;\n }\n \n+\f\n+\n static void\n DEFUN(disassemble_method, (jcf, byte_ops, len),\n       JCF* jcf AND const unsigned char *byte_ops AND int len)"}, {"sha": "d7c5a0ccab50628733fa61daaf7c823ab82ec5a4", "filename": "gcc/java/jv-scan.c", "status": "modified", "additions": 88, "deletions": 29, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c89c53eb67992a85c4196ec7977cbe1c44525dbf/gcc%2Fjava%2Fjv-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c89c53eb67992a85c4196ec7977cbe1c44525dbf/gcc%2Fjava%2Fjv-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjv-scan.c?ref=c89c53eb67992a85c4196ec7977cbe1c44525dbf", "patch": "@@ -24,10 +24,18 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"obstack.h\"\t\t/* We use obstacks in lex.c */\n \n+#include \"version.c\"\n+\n+#include <getopt.h>\n+\n void fatal PARAMS ((const char *s, ...)) ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n void warning PARAMS ((const char *s, ...)) ATTRIBUTE_PRINTF_1;\n void gcc_obstack_init PARAMS ((struct obstack *obstack));\n \n+static void usage PARAMS ((void)) ATTRIBUTE_NORETURN;\n+static void help PARAMS ((void)) ATTRIBUTE_NORETURN;\n+static void version PARAMS ((void)) ATTRIBUTE_NORETURN;\n+\n #define JC1_LITE\n #include \"jcf.h\"\n #include \"parse.h\"\n@@ -46,6 +54,59 @@ int flag_find_main = 0;\n int flag_dump_class = 0;\n int flag_list_filename = 0;\n \n+\f\n+\n+/* This is used to mark options with no short value.  */\n+#define LONG_OPT(Num)  ((Num) + 128)\n+\n+#define OPT_HELP      LONG_OPT (0)\n+#define OPT_VERSION   LONG_OPT (1)\n+\n+static struct option options[] =\n+{\n+  { \"help\",      no_argument,       NULL, OPT_HELP },\n+  { \"version\",   no_argument,       NULL, OPT_VERSION },\n+  { \"print-main\", no_argument,      &flag_find_main, 1 },\n+  { \"list-filename\", no_argument,   &flag_list_filename, 1 },\n+  { \"list-class\", no_argument,      &flag_dump_class, 1 },\n+  { NULL,        no_argument,       NULL, 0 }\n+};\n+\n+static void\n+usage ()\n+{\n+  fprintf (stderr, \"Try `jv-scan --help' for more information.\\n\");\n+  exit (1);\n+}\n+\n+static void\n+help ()\n+{\n+  printf (\"Usage: jv-scan [OPTION]... FILE...\\n\\n\");\n+  printf (\"Print useful information read from Java source files.\\n\\n\");\n+  printf (\"  --print-main            Print name of class containing `main'\\n\");\n+  printf (\"  --list-class            List all classes defined in file\\n\");\n+  printf (\"  --list-filename         Print input filename when listing class names\\n\");\n+  printf (\"  -o FILE                 Set output file name\\n\");\n+  printf (\"\\n\");\n+  printf (\"  --help                  Print this help, then exit\\n\");\n+  printf (\"  --version               Print version number, then exit\\n\");\n+  printf (\"\\n\");\n+  printf (\"For bug reporting instructions, please see:\\n\");\n+  printf (\"<URL:http://www.gnu.org/software/gcc/faq.html#bugreport>.\\n\");\n+  exit (0);\n+}\n+\n+static void\n+version ()\n+{\n+  printf (\"jv-scan (%s)\\n\\n\", version_string);\n+  printf (\"Copyright (C) 1998, 1999 Free Software Foundation, Inc.\\n\");\n+  printf (\"This is free software; see the source for copying conditions.  There is NO\\n\");\n+  printf (\"warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\");\n+  exit (0);\n+}\n+\n /* jc1-lite main entry point */\n int\n DEFUN (main, (argc, argv),\n@@ -54,43 +115,39 @@ DEFUN (main, (argc, argv),\n   int i = 1;\n   const char *output_file = NULL;\n   long ft;\n+  int opt;\n \n   exec_name = argv[0];\n \n   /* Default for output */\n   out = stdout;\n \n-  /* Process options first */\n-  while (argv [i])\n+  /* Process options first.  We use getopt_long and not\n+     getopt_long_only because we only support `--' long options here.  */\n+  while ((opt = getopt_long (argc, argv, \"o:\", options, NULL)) != -1)\n     {\n-      if (argv [i][0] == '-')\n+      switch (opt)\n \t{\n-\t  /* Dump result into a file */\n-\t  if (!strcmp (argv [i], \"-o\") && i+1 < argc)\n-\t    {\n-\t      argv [i] = NULL;\n-\t      output_file = argv [++i];\n-\t      argv [i] = NULL;\n-\t    }\n-\n-\t  /* Print the name of the class that contains main */\n-\t  else if (!strcmp (argv [i], \"--print-main\"))\n-\t    flag_find_main = 1;\n-\n-\t  else if (!strcmp (argv [i], \"--list-filename\"))\n-\t    flag_list_filename = 1;\n-\n-\t  /* List all the classes found in a source file */\n-\t  else if (!strcmp (argv [i], \"--list-class\"))\n-\t    flag_dump_class = 1;\n-\n-\t  else\n-\t    warning (\"Unrecognized argument `%s'\", argv[i]);\n-\n-\t  /* non recognized argument ignored silently */ \n-\t  argv [i] = NULL;\t/* Nullify so it's not considered a file */\n+\tcase 0:\n+\t  /* Already handled.  */\n+\t  break;\n+\n+\tcase 'o':\n+\t  output_file = optarg;\n+\t  break;\n+\n+\tcase OPT_HELP:\n+\t  help ();\n+\t  break;\n+\n+\tcase OPT_VERSION:\n+\t  version ();\n+\t  break;\n+\n+\tdefault:\n+\t  usage ();\n+\t  break;\n \t}\n-      i++;\n     }\n \n   /* No flags? Do nothing */\n@@ -109,7 +166,7 @@ DEFUN (main, (argc, argv),\n   gcc_obstack_init (&temporary_obstack);\n   java_push_parser_context ();\n \n-  for ( i = 1; i < argc; i++ )\n+  for ( i = optind; i < argc; i++ )\n     if (argv [i])\n       {\n \tinput_filename = argv [i];\n@@ -136,6 +193,8 @@ DEFUN (main, (argc, argv),\n   return 0;\n }\n \n+\f\n+\n /* Error report, memory, obstack initialization and other utility\n    functions */\n "}]}