{"sha": "89c5711036511bfa8d87512d3d6a42385fc416b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODljNTcxMTAzNjUxMWJmYThkODc1MTJkM2Q2YTQyMzg1ZmM0MTZiMg==", "commit": {"author": {"name": "Mohan Embar", "email": "gnustuff@thisiscool.com", "date": "2003-12-16T22:57:06Z"}, "committer": {"name": "Mohan Embar", "email": "membar@gcc.gnu.org", "date": "2003-12-16T22:57:06Z"}, "message": "natPlainDatagramSocketImplWin32.cc: Removed unused InterruptedIOException.h include.\n\n\t* gnu/java/net/natPlainDatagramSocketImplWin32.cc:\n\tRemoved unused InterruptedIOException.h include.\n\t* gnu/java/net/natPlainSocketImplWin32.cc\n\t(connect): Reset and ignore our thread's interrupted\n\tflag instead of testing and throwing an InterruptedIOException\n\tif set.\n\t(accept): Likewise + changed case of SocketTimeoutException\n\ttext.\n\t(write): Likewise (for both overloads).\n\t(doRead): Likewise.\n\nFrom-SVN: r74716", "tree": {"sha": "c8fe61edf57cecc90858c5eaadbb30979f5acecb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8fe61edf57cecc90858c5eaadbb30979f5acecb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89c5711036511bfa8d87512d3d6a42385fc416b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89c5711036511bfa8d87512d3d6a42385fc416b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89c5711036511bfa8d87512d3d6a42385fc416b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89c5711036511bfa8d87512d3d6a42385fc416b2/comments", "author": null, "committer": null, "parents": [{"sha": "5cd4d463f974cced4d9819ace4583641ec0ad188", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cd4d463f974cced4d9819ace4583641ec0ad188", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cd4d463f974cced4d9819ace4583641ec0ad188"}], "stats": {"total": 67, "additions": 37, "deletions": 30}, "files": [{"sha": "739ef0a9331006766725871b289d341f44c0cefc", "filename": "libjava/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89c5711036511bfa8d87512d3d6a42385fc416b2/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89c5711036511bfa8d87512d3d6a42385fc416b2/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=89c5711036511bfa8d87512d3d6a42385fc416b2", "patch": "@@ -1,3 +1,16 @@\n+2003-12-16  Mohan Embar  <gnustuff@thisiscool.com>\n+\n+\t* gnu/java/net/natPlainDatagramSocketImplWin32.cc:\n+\tRemoved unused InterruptedIOException.h include.\n+\t* gnu/java/net/natPlainSocketImplWin32.cc\n+\t(connect): Reset and ignore our thread's interrupted\n+\tflag instead of testing and throwing an InterruptedIOException\n+\tif set.\n+\t(accept): Likewise + changed case of SocketTimeoutException\n+\ttext.\n+\t(write): Likewise (for both overloads).\n+\t(doRead): Likewise.\n+\n 2003-12-16  Mohan Embar  <gnustuff@thisiscool.com>\n \n \t* win32.cc (WSAEventWrapper): Implemented default"}, {"sha": "d3534791801b8037db95141a910b49cb98220150", "filename": "libjava/gnu/java/net/natPlainDatagramSocketImplWin32.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89c5711036511bfa8d87512d3d6a42385fc416b2/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplWin32.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89c5711036511bfa8d87512d3d6a42385fc416b2/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplWin32.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplWin32.cc?ref=89c5711036511bfa8d87512d3d6a42385fc416b2", "patch": "@@ -17,7 +17,6 @@ details.  */\n \n #include <gnu/java/net/PlainDatagramSocketImpl.h>\n #include <java/io/IOException.h>\n-#include <java/io/InterruptedIOException.h>\n #include <java/net/BindException.h>\n #include <java/net/SocketException.h>\n #include <java/net/InetAddress.h>"}, {"sha": "c4a54a90c3a1673c7872b475516260b2cd7b568f", "filename": "libjava/gnu/java/net/natPlainSocketImplWin32.cc", "status": "modified", "additions": 24, "deletions": 29, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89c5711036511bfa8d87512d3d6a42385fc416b2/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainSocketImplWin32.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89c5711036511bfa8d87512d3d6a42385fc416b2/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainSocketImplWin32.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainSocketImplWin32.cc?ref=89c5711036511bfa8d87512d3d6a42385fc416b2", "patch": "@@ -17,7 +17,6 @@ details.  */\n #include <gnu/java/net/PlainSocketImpl$SocketInputStream.h>\n #include <gnu/java/net/PlainSocketImpl$SocketOutputStream.h>\n #include <java/io/IOException.h>\n-#include <java/io/InterruptedIOException.h>\n #include <java/net/BindException.h>\n #include <java/net/ConnectException.h>\n #include <java/net/InetAddress.h>\n@@ -176,9 +175,13 @@ gnu::java::net::PlainSocketImpl::connect (::java::net::SocketAddress *addr,\n             // use true, false instead of TRUE, FALSE because the\n             // MS constants got undefined\n \n+        // Reset and ignore our thread's interrupted flag.\n+        // It's not possible to interrupt these sort of\n+        // operations on Win32 anyway.\n+        ::java::lang::Thread::interrupted();\n+\n         if (dwRet == WSA_WAIT_FAILED)\n           throwConnectException ();\n-        \n         else if (dwRet == WSA_WAIT_TIMEOUT)\n           throw new ::java::net::SocketTimeoutException\n             (JvNewStringUTF (\"connect timed out\"));\n@@ -275,11 +278,14 @@ gnu::java::net::PlainSocketImpl::accept (gnu::java::net::PlainSocketImpl *s)\n             // use true, false instead of TRUE, FALSE because the\n             // MS constants got undefined\n \n+        // Reset and ignore our thread's interrupted flag.\n+        ::java::lang::Thread::interrupted();\n+\n         if (dwRet == WSA_WAIT_FAILED)\n           goto error;\n         else if (dwRet == WSA_WAIT_TIMEOUT)\n           throw new ::java::net::SocketTimeoutException\n-            (JvNewStringUTF (\"accept timed out\"));\n+            (JvNewStringUTF (\"Accept timed out\"));\n       }\n     }\n   else\n@@ -361,14 +367,12 @@ gnu::java::net::PlainSocketImpl$SocketOutputStream::write(jint b)\n       if (r == -1)\n         {\n           DWORD dwErr = WSAGetLastError();\n-          if (::java::lang::Thread::interrupted())\n-            {\n-              ::java::io::InterruptedIOException *iioe\n-                = new ::java::io::InterruptedIOException\n-                (_Jv_WinStrError (dwErr));\n-              iioe->bytesTransferred = 0;\n-              throw iioe;\n-            }\n+          \n+          // Reset and ignore our thread's interrupted flag.\n+          // It's not possible to interrupt these sort of\n+          // operations on Win32 anyway.\n+          ::java::lang::Thread::interrupted();\n+\n           // Some errors should not cause exceptions.\n           if (dwErr != WSAENOTCONN && dwErr != WSAECONNRESET\n             && dwErr != WSAENOTSOCK)\n@@ -397,14 +401,10 @@ gnu::java::net::PlainSocketImpl$SocketOutputStream::write(jbyteArray b,\n       if (r == -1)\n         {\n           DWORD dwErr = WSAGetLastError();\n-          if (::java::lang::Thread::interrupted())\n-            {\n-              ::java::io::InterruptedIOException *iioe\n-                = new ::java::io::InterruptedIOException\n-                (_Jv_WinStrError (dwErr));\n-              iioe->bytesTransferred = written;\n-              throw iioe;\n-            }\n+\n+          // Reset and ignore our thread's interrupted flag.\n+          ::java::lang::Thread::interrupted();\n+\n           // Some errors should not cause exceptions.\n           if (dwErr != WSAENOTCONN && dwErr != WSAECONNRESET\n             && dwErr != WSAENOTSOCK)\n@@ -456,15 +456,10 @@ doRead(int native_fd, void* buf, int count, int timeout)\n   dwErrorCode = WSAGetLastError ();\n     // save WSAGetLastError() before calling Thread.interrupted()\n   \n-  if (::java::lang::Thread::interrupted())\n-    {\n-      ::java::io::InterruptedIOException *iioe =\n-        new ::java::io::InterruptedIOException\n-        (JvNewStringUTF(\"read interrupted\"));\n-      iioe->bytesTransferred = r == -1 ? 0 : r;\n-      throw iioe;\n-    }\n-  else if (r == -1)\n+  // Reset and ignore our thread's interrupted flag.\n+  ::java::lang::Thread::interrupted();\n+  \n+  if (r == -1)\n     {\n error:\n       // Some errors cause us to return end of stream...\n@@ -474,7 +469,7 @@ doRead(int native_fd, void* buf, int count, int timeout)\n       // Other errors need to be signalled.\n       if (dwErrorCode == WSAETIMEDOUT)\n         throw new ::java::net::SocketTimeoutException\n-          (JvNewStringUTF (\"read timed out\") );\n+          (JvNewStringUTF (\"Read timed out\") );\n       else\n         _Jv_ThrowIOException (dwErrorCode);\n     }"}]}