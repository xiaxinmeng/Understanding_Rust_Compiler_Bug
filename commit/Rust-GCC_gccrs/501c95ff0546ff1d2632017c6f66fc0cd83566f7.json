{"sha": "501c95ff0546ff1d2632017c6f66fc0cd83566f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTAxYzk1ZmYwNTQ2ZmYxZDI2MzIwMTdjNmY2NmZjMGNkODM1NjZmNw==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-12-07T13:46:29Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-12-07T13:46:29Z"}, "message": "re PR c++/45330 (Suggest likely nested-name-specifiers for undeclared identifiers.)\n\ngcc/\n\tPR c++/45330\n\t* params.def (CXX_MAX_NAMESPACES_FOR_DIAGNOSTIC_HELP): New parameter.\n\t* doc/invoke.texi (cxx-max-namespaces-for-diagnostic-help): Document.\n\ngcc/cp/\n\tPR c++/45330\n\t* cp-tree.h (suggest_alternatives_for, location_of): Declare.\n\t* error.c (dump_expr): Handle TYPE_DECL.\n\t(location_of): Unstaticize.\n\t* name-lookup.c (suggest_alternatives_for): New function.\n\t* lex.c (unqualified_name_lookup_error): Call it.\n\ngcc/testsuite/\n\tPR c++/45330\n\t* g++.dg/pr45330.C: New test.\n\t* g++.dg/ext/builtin3.C: Adjust.\n\t* g++.dg/lookup/error1.C: Adjust.\n\t* g++.dg/lookup/koenig5.C: Adjust.\n\t* g++.dg/overload/koenig1.C: Adjust.\n\t* g++.dg/parse/decl-specifier-1.C: Adjust.\n\t* g++.dg/template/static10.C: Adjust.\n\t* g++.old-deja/g++.mike/ns5.C: Adjust.\n\t* g++.old-deja/g++.mike/ns7.C: Adjust.\n\t* g++.old-deja/g++.ns/koenig5.C: Adjust.\n\t* g++.old-deja/g++.ns/koenig9.C: Adjust.\n\t* g++.old-deja/g++.other/lineno5.C: Adjust.\n\nFrom-SVN: r167536", "tree": {"sha": "fe63f288d7fac2d1492b5370bcf38c201cc58251", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe63f288d7fac2d1492b5370bcf38c201cc58251"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/501c95ff0546ff1d2632017c6f66fc0cd83566f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/501c95ff0546ff1d2632017c6f66fc0cd83566f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/501c95ff0546ff1d2632017c6f66fc0cd83566f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/501c95ff0546ff1d2632017c6f66fc0cd83566f7/comments", "author": null, "committer": null, "parents": [{"sha": "85a47bed9340d25f861b9e2a186a4d443660cc26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85a47bed9340d25f861b9e2a186a4d443660cc26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85a47bed9340d25f861b9e2a186a4d443660cc26"}], "stats": {"total": 210, "additions": 189, "deletions": 21}, "files": [{"sha": "215652907c42312a7aa422aeced0c4790f1ff734", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=501c95ff0546ff1d2632017c6f66fc0cd83566f7", "patch": "@@ -1,3 +1,9 @@\n+2010-12-07  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\tPR c++/45330\n+\t* params.def (CXX_MAX_NAMESPACES_FOR_DIAGNOSTIC_HELP): New parameter.\n+\t* doc/invoke.texi (cxx-max-namespaces-for-diagnostic-help): Document.\n+\n 2010-12-07  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/46832"}, {"sha": "2bbd7e47425ef6202b763aa099a97379590ede38", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=501c95ff0546ff1d2632017c6f66fc0cd83566f7", "patch": "@@ -1,3 +1,12 @@\n+2010-12-07  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\tPR c++/45330\n+\t* cp-tree.h (suggest_alternatives_for, location_of): Declare.\n+\t* error.c (dump_expr): Handle TYPE_DECL.\n+\t(location_of): Unstaticize.\n+\t* name-lookup.c (suggest_alternatives_for): New function.\n+\t* lex.c (unqualified_name_lookup_error): Call it.\n+\n 2010-12-06  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* call.c: Include c-family/c-objc.h."}, {"sha": "aba8dfddba96c546fcf446da4be684fce269631b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=501c95ff0546ff1d2632017c6f66fc0cd83566f7", "patch": "@@ -4907,6 +4907,7 @@ extern void print_instantiation_context\t\t(void);\n extern void maybe_warn_variadic_templates       (void);\n extern void maybe_warn_cpp0x\t\t\t(cpp0x_warn_str str);\n extern bool pedwarn_cxx98                       (location_t, int, const char *, ...) ATTRIBUTE_GCC_DIAG(3,4);\n+extern location_t location_of                   (tree);\n \n /* in except.c */\n extern void init_exception_processing\t\t(void);\n@@ -5639,6 +5640,9 @@ extern tree cxx_omp_clause_dtor\t\t\t(tree, tree);\n extern void cxx_omp_finish_clause\t\t(tree);\n extern bool cxx_omp_privatize_by_reference\t(const_tree);\n \n+/* in name-lookup.c */\n+extern void suggest_alternatives_for (tree);\n+\n /* -- end of C++ */\n \n #endif /* ! GCC_CP_TREE_H */"}, {"sha": "4fb47dc3b176d74b1cda6bc0412043b6f4e75f83", "filename": "gcc/cp/error.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=501c95ff0546ff1d2632017c6f66fc0cd83566f7", "patch": "@@ -98,7 +98,6 @@ static void cp_print_error_function (diagnostic_context *, diagnostic_info *);\n \n static bool cp_printer (pretty_printer *, text_info *, const char *,\n \t\t\tint, bool, bool, bool);\n-static location_t location_of (tree);\n \n void\n init_error (void)\n@@ -1700,6 +1699,7 @@ dump_expr (tree t, int flags)\n     case NAMESPACE_DECL:\n     case LABEL_DECL:\n     case OVERLOAD:\n+    case TYPE_DECL:\n     case IDENTIFIER_NODE:\n       dump_decl (t, (flags & ~TFF_DECL_SPECIFIERS) | TFF_NO_FUNCTION_ARGUMENTS);\n       break;\n@@ -2487,7 +2487,7 @@ lang_decl_name (tree decl, int v, bool translate)\n \n /* Return the location of a tree passed to %+ formats.  */\n \n-static location_t\n+location_t\n location_of (tree t)\n {\n   if (TREE_CODE (t) == PARM_DECL && DECL_CONTEXT (t))"}, {"sha": "5a2ae41ff18ae030196e6ab033b00bd5f4ab51a5", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=501c95ff0546ff1d2632017c6f66fc0cd83566f7", "patch": "@@ -450,7 +450,10 @@ unqualified_name_lookup_error (tree name)\n   else\n     {\n       if (!objc_diagnose_private_ivar (name))\n-        error (\"%qD was not declared in this scope\", name);\n+\t{\n+\t  error (\"%qD was not declared in this scope\", name);\n+\t  suggest_alternatives_for (name);\n+\t}\n       /* Prevent repeated error messages by creating a VAR_DECL with\n \t this NAME in the innermost block scope.  */\n       if (current_function_decl)"}, {"sha": "4cf13809031dc27931f27876735fb9fc5e286288", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=501c95ff0546ff1d2632017c6f66fc0cd83566f7", "patch": "@@ -29,8 +29,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"name-lookup.h\"\n #include \"timevar.h\"\n #include \"diagnostic-core.h\"\n+#include \"intl.h\"\n #include \"debug.h\"\n #include \"c-family/c-pragma.h\"\n+#include \"params.h\"\n \n /* The bindings for a particular name in a particular scope.  */\n \n@@ -3916,6 +3918,71 @@ remove_hidden_names (tree fns)\n   return fns;\n }\n \n+/* Suggest alternatives for NAME, an IDENTIFIER_NODE for which name\n+   lookup failed.  Search through all available namespaces and print out\n+   possible candidates.  */\n+\n+void\n+suggest_alternatives_for (tree name)\n+{\n+  VEC(tree,heap) *candidates = NULL;\n+  VEC(tree,heap) *namespaces_to_search = NULL;\n+  int max_to_search = PARAM_VALUE (CXX_MAX_NAMESPACES_FOR_DIAGNOSTIC_HELP);\n+  int n_searched = 0;\n+  tree t;\n+  unsigned ix;\n+  location_t name_location;\n+\n+  VEC_safe_push (tree, heap, namespaces_to_search, global_namespace);\n+\n+  while (!VEC_empty (tree, namespaces_to_search)\n+\t && n_searched < max_to_search)\n+    {\n+      tree scope = VEC_pop (tree, namespaces_to_search);\n+      struct scope_binding binding = EMPTY_SCOPE_BINDING;\n+      struct cp_binding_level *level = NAMESPACE_LEVEL (scope);\n+\n+      /* Look in this namespace.  */\n+      qualified_lookup_using_namespace (name, scope, &binding, 0);\n+\n+      n_searched++;\n+\n+      if (binding.value)\n+\tVEC_safe_push (tree, heap, candidates, binding.value);\n+\n+      /* Add child namespaces.  */\n+      for (t = level->namespaces; t; t = DECL_CHAIN (t))\n+\tVEC_safe_push (tree, heap, namespaces_to_search, t);\n+    }\n+\n+  name_location = location_of (name);\n+\n+  /* If we stopped before we could examine all namespaces, inform the\n+     user.  Do this even if we don't have any candidates, since there\n+     might be more candidates further down that we weren't able to\n+     find.  */\n+  if (n_searched >= max_to_search\n+      && !VEC_empty (tree, namespaces_to_search))\n+    inform (name_location,\n+\t    \"maximum limit of %d namespaces searched for %qE\",\n+\t    max_to_search, name);\n+\n+  VEC_free (tree, heap, namespaces_to_search);\n+\n+  /* Nothing useful to report.  */\n+  if (VEC_empty (tree, candidates))\n+    return;\n+\n+  inform_n (name_location, VEC_length (tree, candidates),\n+\t    \"suggested alternative:\",\n+\t    \"suggested alternatives:\");\n+\n+  FOR_EACH_VEC_ELT (tree, candidates, ix, t)\n+    inform (location_of (t), \"  %qE\", t);\n+\n+  VEC_free (tree, heap, candidates);\n+}\n+\n /* Unscoped lookup of a global: iterate over current namespaces,\n    considering using-directives.  */\n "}, {"sha": "4e3d0028ab6a90d177ff111f3a8ff084c3637183", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=501c95ff0546ff1d2632017c6f66fc0cd83566f7", "patch": "@@ -8821,6 +8821,10 @@ Size of minimal paritition for WHOPR (in estimated instructions).\n This prevents expenses of splitting very small programs into too many\n partitions.\n \n+@item cxx-max-namespaces-for-diagnostic-help\n+The maximum number of namespaces to consult for suggestions when C++\n+name lookup fails for an identifier.  The default is 1000.\n+\n @end table\n @end table\n "}, {"sha": "2ea00137b2b36d72a9d1a08e0f820b6bf373f95c", "filename": "gcc/params.def", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=501c95ff0546ff1d2632017c6f66fc0cd83566f7", "patch": "@@ -855,6 +855,15 @@ DEFPARAM (MIN_PARTITION_SIZE,\n \t  \"lto-min-partition\",\n \t  \"Size of minimal paritition for WHOPR (in estimated instructions)\",\n \t  1000, 0, 0)\n+\n+/* Diagnostic parameters.  */\n+\n+DEFPARAM (CXX_MAX_NAMESPACES_FOR_DIAGNOSTIC_HELP,\n+\t  \"cxx-max-namespaces-for-diagnostic-help\",\n+\t  \"Maximum number of namespaces to search for alternatives when \"\n+\t  \"name lookup fails\",\n+\t  1000, 0, 0)\n+\n /*\n Local variables:\n mode:c"}, {"sha": "318477e245a05ce55a4193aaafa4cc4ef65b298f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=501c95ff0546ff1d2632017c6f66fc0cd83566f7", "patch": "@@ -1,3 +1,19 @@\n+2010-12-07  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\tPR c++/45330\n+\t* g++.dg/pr45330.C: New test.\n+\t* g++.dg/ext/builtin3.C: Adjust.\n+\t* g++.dg/lookup/error1.C: Adjust.\n+\t* g++.dg/lookup/koenig5.C: Adjust.\n+\t* g++.dg/overload/koenig1.C: Adjust.\n+\t* g++.dg/parse/decl-specifier-1.C: Adjust.\n+\t* g++.dg/template/static10.C: Adjust.\n+\t* g++.old-deja/g++.mike/ns5.C: Adjust.\n+\t* g++.old-deja/g++.mike/ns7.C: Adjust.\n+\t* g++.old-deja/g++.ns/koenig5.C: Adjust.\n+\t* g++.old-deja/g++.ns/koenig9.C: Adjust.\n+\t* g++.old-deja/g++.other/lineno5.C: Adjust.\n+\n 2010-12-07  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/46832"}, {"sha": "001d5f784d27d7f028094f756a524daffde704bd", "filename": "gcc/testsuite/g++.dg/ext/builtin3.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin3.C?ref=501c95ff0546ff1d2632017c6f66fc0cd83566f7", "patch": "@@ -5,9 +5,10 @@\n // { dg-options \"\" }\n \n namespace std {\n-extern \"C\" int printf(char*, ...);\n+extern \"C\" int printf(char*, ...); // { dg-message \"std::printf\" }\n }\n \n void foo() {\n   printf(\"abc\"); \t\t// { dg-error \"not declared\" }\n+  // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } 12 }\n }"}, {"sha": "3eb4b97213277ddec30366df916575b6996d487c", "filename": "gcc/testsuite/g++.dg/lookup/error1.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ferror1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ferror1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ferror1.C?ref=501c95ff0546ff1d2632017c6f66fc0cd83566f7", "patch": "@@ -2,8 +2,9 @@\n // Origin: <papadopo@shfj.cea.fr>\n // { dg-do compile }\n \n-namespace N { int i; }\n+namespace N { int i; }\t\t// { dg-message \"N::i\" }\n void foo() { i; }   // { dg-error \"not declared\" }\n+  // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } 6 }\n \n using namespace N;\n void bar() { i; }"}, {"sha": "c44543bd52fe3a2ef8986d89e9276495f8a4f56f", "filename": "gcc/testsuite/g++.dg/lookup/koenig5.C", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fkoenig5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fkoenig5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fkoenig5.C?ref=501c95ff0546ff1d2632017c6f66fc0cd83566f7", "patch": "@@ -8,39 +8,42 @@\n namespace N\n {\n   struct A {};\n-  void One (...);\n-  void (*Two) (...);\n-  namespace Three {}\n+  void One (...);\t\t// { dg-message \"N::One\" }\n+  void (*Two) (...);\t\t// { dg-message \"N::Two\" }\n+  namespace Three {}\t\t// { dg-message \"N::Three\" }\n }\n \n namespace M\n {\n   struct B {};\n-  struct One {};\n-  void (*Two) (...);\n-  void Three (...);\n+  struct One {};\t\t// { dg-message \"M::One\" }\n+  void (*Two) (...);\t\t// { dg-message \"M::Two\" }\n+  void Three (...);\t\t// { dg-message \"M::Three\" }\n }\n \n namespace O \n {\n   struct C {};\n-  void Two (...);\n+  void Two (...);\t\t// { dg-message \"O::Two\" }\n }\n   \n void g (N::A *a, M::B *b, O::C *c)\n {\n   One (a); // ok\n   One (a, b); // ok\n   One (b); // { dg-error \"not declared\" }\n+  // { dg-message \"suggested alternatives\" \"suggested alternative for One\" { target *-*-* } 34 }\n \n   Two (c); // ok\n   Two (a, c); // ok\n   Two (a); // { dg-error \"not declared\" }\n+  // { dg-message \"suggested alternatives\" \"suggested alternative for Two\" { target *-*-* } 39 }\n   Two (a, a); // error masked by earlier error\n   Two (b); // error masked by earlier error\n   Two (a, b); // error masked by earlier error\n   \n   Three (b); // ok\n   Three (a, b); // ok\n   Three (a); // { dg-error \"not declared\" }\n+  // { dg-message \"suggested alternatives\" \"suggested alternative for Three\" { target *-*-* } 47 }\n }"}, {"sha": "a4612591967416a437c8fb727a2979c7115f1104", "filename": "gcc/testsuite/g++.dg/overload/koenig1.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fkoenig1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fkoenig1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fkoenig1.C?ref=501c95ff0546ff1d2632017c6f66fc0cd83566f7", "patch": "@@ -3,7 +3,7 @@\n // valid call.\n \n namespace N {\n-  template <class T> void f (T);\n+  template <class T> void f (T); // { dg-message \"N::f\" }\n   struct A;\n }\n \n@@ -14,5 +14,6 @@ void g ()\n   B *bp;\n   N::A *ap;\n   f (bp);\t\t\t// { dg-error \"not declared\" }\n+  // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } 16 }\n   f (ap);\n }"}, {"sha": "baf0fe77816e40a2f098a6d00410f3ec01c6c999", "filename": "gcc/testsuite/g++.dg/parse/decl-specifier-1.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdecl-specifier-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdecl-specifier-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdecl-specifier-1.C?ref=501c95ff0546ff1d2632017c6f66fc0cd83566f7", "patch": "@@ -5,12 +5,13 @@\n namespace N\n {\n     template<typename> \n-    struct X { };\n+    struct X { };\t\t// { dg-message \"N::X\" }\n }\n \n N::X X;                           // { dg-error \"\" \"\" }\n \n int main()\n {\n     return sizeof(X);             // { dg-error \"\" \"\" }\n+    // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } 15 }\n }"}, {"sha": "02d9b3f63bb33bf45beb396f7ec81bfa32402f38", "filename": "gcc/testsuite/g++.dg/pr45330.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr45330.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr45330.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr45330.C?ref=501c95ff0546ff1d2632017c6f66fc0cd83566f7", "patch": "@@ -0,0 +1,37 @@\n+// { dg-do compile }\n+// Search std, __cxxabiv1, and global namespaces, plus one more.\n+// { dg-options \"--param cxx-max-namespaces-for-diagnostic-help=4\" }\n+\n+#define NSPACE(NAME) namespace NAME { int foo; }\n+\n+namespace A\n+{\n+  int foo;\t\t\t// { dg-message \"A::foo\" \"suggested alternative\" }\n+}\n+\n+namespace B\n+{\n+  int foo;\n+}\n+\n+namespace C\n+{\n+  int foo;\n+}\n+\n+namespace D\n+{\n+  int foo;\n+}\n+\n+namespace E\n+{\n+  int foo;\n+}\n+\n+int bar()\n+{\n+  return foo;\t\t\t// { dg-error \"was not declared\" }\n+  // { dg-message \"maximum limit of 4 namespaces\" \"maximum limit\" { target *-*-* } 34 }\n+  // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } 34 }\n+}"}, {"sha": "881db081c4f4f8d7d13e81725e429f6edd634ee9", "filename": "gcc/testsuite/g++.dg/template/static10.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic10.C?ref=501c95ff0546ff1d2632017c6f66fc0cd83566f7", "patch": "@@ -4,7 +4,7 @@ namespace __gnu_debug_def { }\n namespace std\n {\n   using namespace __gnu_debug_def;\n-  template<typename _Tp> class allocator {};\n+  template<typename _Tp> class allocator {}; // { dg-message \"std::allocator\" }\n }\n namespace __gnu_debug_def\n {\n@@ -20,4 +20,5 @@ namespace std\n {\n   template<> void\n   vector<int, allocator<int> >::swap(vector<int, allocator<int> >&) { } // { dg-error \"\" }\n+  // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } 22 }\n }"}, {"sha": "fd1fbffce9e757479656ce7596f7c574feeb513d", "filename": "gcc/testsuite/g++.old-deja/g++.mike/ns5.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fns5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fns5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fns5.C?ref=501c95ff0546ff1d2632017c6f66fc0cd83566f7", "patch": "@@ -1,6 +1,7 @@\n // { dg-do assemble  }\n namespace A {\n-  int i = 1;\n+  int i = 1;\t\t\t// { dg-message \"A::i\" }\n }\n \n int j = i;\t\t// { dg-error \"\" } \n+  // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } 6 }"}, {"sha": "67d9e7741f18020b0ca91f0cba74205f5765e296", "filename": "gcc/testsuite/g++.old-deja/g++.mike/ns7.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fns7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fns7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fns7.C?ref=501c95ff0546ff1d2632017c6f66fc0cd83566f7", "patch": "@@ -1,9 +1,10 @@\n // { dg-do assemble  }\n \n namespace A {\n-  int i = 1;\n+  int i = 1;\t\t\t// { dg-message \"A::i\" }\n }\n \n namespace B {\n   int j = i;\t// { dg-error \"\" } \n+  // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } 8 }\n }"}, {"sha": "7c56d5cbc5e1f9df26cd5ed14d2494313f364ab3", "filename": "gcc/testsuite/g++.old-deja/g++.ns/koenig5.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Fkoenig5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Fkoenig5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Fkoenig5.C?ref=501c95ff0546ff1d2632017c6f66fc0cd83566f7", "patch": "@@ -3,7 +3,7 @@\n namespace A{\n   void foo();             \n   struct X{};\n-  void (*bar)(X*)=0;\n+  void (*bar)(X*)=0;\t\t// { dg-message \"A::bar\" }\n }\n using A::X;\n \n@@ -15,4 +15,5 @@ void g()\n \t\t\t // foo variable first, and therefore do not\n \t\t\t // perform argument-dependent lookup.\n   bar(new X);            // { dg-error \"not declared\" }\n+  // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } 17 }\n }"}, {"sha": "46efcb72d1e2597f2978f9a542992a8a8287d889", "filename": "gcc/testsuite/g++.old-deja/g++.ns/koenig9.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Fkoenig9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Fkoenig9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Fkoenig9.C?ref=501c95ff0546ff1d2632017c6f66fc0cd83566f7", "patch": "@@ -3,11 +3,12 @@\n // Copyright (C) 2000 Free Software Foundation, Inc.\n // Contributed by Theodore.Papadopoulo 23 Jun 2000 <Theodore.Papadopoulo@sophia.inria.fr>\n \n-#include <algorithm>\n+int count (int);\n+void *count (char *, char);\n \n void foo(const char*,...);\n \n inline void\n bar() {\n-  foo(\"\",count);    //  { dg-error \"\" } multiple overloaded count functions\n+  foo(\"\",count);    //  { dg-error \"overloaded function\" \"multiple overloaded functions\" }\n }"}, {"sha": "d22733953f0f1a12e50abf7bf95816e0a2ebd7d9", "filename": "gcc/testsuite/g++.old-deja/g++.other/lineno5.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flineno5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501c95ff0546ff1d2632017c6f66fc0cd83566f7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flineno5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flineno5.C?ref=501c95ff0546ff1d2632017c6f66fc0cd83566f7", "patch": "@@ -10,10 +10,11 @@\n \n namespace tmp {\n   typedef int B;\n-  B b;\n+  B b;\t\t\t\t// { dg-message \"tmp::b\" }\n }\n \n class A {\n   public:\n   int kaka(tmp::B = b);\t\t// { dg-error \"\" } no b in scope\n+  // { dg-message \"suggested alternative\" \"suggested alternative\" { target *-*-* } 18 }\n };"}]}