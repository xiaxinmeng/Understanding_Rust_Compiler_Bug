{"sha": "61f03abaa5aabfabc4aaf73df1a19960f1239a89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFmMDNhYmFhNWFhYmZhYmM0YWFmNzNkZjFhMTk5NjBmMTIzOWE4OQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-10-13T23:31:23Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-10-13T23:31:23Z"}, "message": "re PR c/17384 (ICE with mode attribute on structures)\n\n        PR c/17384\n        * c-common.c (handle_mode_attribute): Disallow mode changes that\n        alter the CODE of the top-level type.\n\n        * crtstuff.c (__FRAME_END__): Remove mode attribute.  Find 32-bit\n        integer from internal limits macros.\n        * config/i386/mm3dnow.h (__v2sf): Fix base type.\n\nFrom-SVN: r89009", "tree": {"sha": "7c3835d567e4f5a0701ce4cfb8a1f2b8d696022d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c3835d567e4f5a0701ce4cfb8a1f2b8d696022d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61f03abaa5aabfabc4aaf73df1a19960f1239a89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61f03abaa5aabfabc4aaf73df1a19960f1239a89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61f03abaa5aabfabc4aaf73df1a19960f1239a89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61f03abaa5aabfabc4aaf73df1a19960f1239a89/comments", "author": null, "committer": null, "parents": [{"sha": "32e66afd7f82ae62f3232146743d3ab7eec86557", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32e66afd7f82ae62f3232146743d3ab7eec86557", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32e66afd7f82ae62f3232146743d3ab7eec86557"}], "stats": {"total": 56, "additions": 48, "deletions": 8}, "files": [{"sha": "647941c6ecdc54ea8114f9d6d1b88d6760754d05", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f03abaa5aabfabc4aaf73df1a19960f1239a89/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f03abaa5aabfabc4aaf73df1a19960f1239a89/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61f03abaa5aabfabc4aaf73df1a19960f1239a89", "patch": "@@ -1,3 +1,13 @@\n+2004-10-13  Richard Henderson  <rth@redhat.com>\n+\n+        PR c/17384\n+        * c-common.c (handle_mode_attribute): Disallow mode changes that\n+        alter the CODE of the top-level type.\n+ \n+        * crtstuff.c (__FRAME_END__): Remove mode attribute.  Find 32-bit\n+        integer from internal limits macros.\n+        * config/i386/mm3dnow.h (__v2sf): Fix base type.\n+\n 2004-10-13  Richard Henderson  <rth@redhat.com>\n  \n         PR debug/13841"}, {"sha": "2e634fae9ba350a3c69c9fab9cfe6483510dce61", "filename": "gcc/c-common.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f03abaa5aabfabc4aaf73df1a19960f1239a89/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f03abaa5aabfabc4aaf73df1a19960f1239a89/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=61f03abaa5aabfabc4aaf73df1a19960f1239a89", "patch": "@@ -4303,7 +4303,10 @@ handle_mode_attribute (tree *node, tree name, tree args,\n       else\n \tfor (j = 0; j < NUM_MACHINE_MODES; j++)\n \t  if (!strcmp (p, GET_MODE_NAME (j)))\n-\t    mode = (enum machine_mode) j;\n+\t    {\n+\t      mode = (enum machine_mode) j;\n+\t      break;\n+\t    }\n \n       if (mode == VOIDmode)\n \t{\n@@ -4363,7 +4366,7 @@ handle_mode_attribute (tree *node, tree name, tree args,\n \n       if (typefm == NULL_TREE)\n \t{\n-\t  error (\"no data type for mode %<%s%>\", p);\n+\t  error (\"no data type for mode %qs\", p);\n \t  return NULL_TREE;\n \t}\n       else if (TREE_CODE (type) == ENUMERAL_TYPE)\n@@ -4373,8 +4376,7 @@ handle_mode_attribute (tree *node, tree name, tree args,\n \t     this mode for this type.  */\n \t  if (TREE_CODE (typefm) != INTEGER_TYPE)\n \t    {\n-\t      error (\"cannot use mode %qs for enumeral types\",\n-\t\t     GET_MODE_NAME (mode));\n+\t      error (\"cannot use mode %qs for enumeral types\", p);\n \t      return NULL_TREE;\n \t    }\n \n@@ -4383,6 +4385,12 @@ handle_mode_attribute (tree *node, tree name, tree args,\n \t  TYPE_PRECISION (type) = TYPE_PRECISION (typefm);\n \t  typefm = type;\n \t}\n+      else if (TREE_CODE (type) != TREE_CODE (typefm))\n+\t{\n+\t  error (\"mode %qs applied to inappropriate type\", p);\n+\t  return NULL_TREE;\n+\t}\n+\n       *node = typefm;\n \n       /* No need to layout the type here.  The caller should do this.  */"}, {"sha": "158825450965d1b89ba070400b3ac110470602cb", "filename": "gcc/config/i386/mm3dnow.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f03abaa5aabfabc4aaf73df1a19960f1239a89/gcc%2Fconfig%2Fi386%2Fmm3dnow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f03abaa5aabfabc4aaf73df1a19960f1239a89/gcc%2Fconfig%2Fi386%2Fmm3dnow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmm3dnow.h?ref=61f03abaa5aabfabc4aaf73df1a19960f1239a89", "patch": "@@ -35,7 +35,7 @@\n #include <mmintrin.h>\n \n /* Internal data types for implementing the intrinsics.  */\n-typedef int __v2sf __attribute__ ((__mode__ (__SF__), __vector_size__ (8)));\n+typedef float __v2sf __attribute__ ((__vector_size__ (8)));\n \n static __inline void\n _m_femms (void)"}, {"sha": "22f221b90b2b64cb8f67931cc3da1d8e96891730", "filename": "gcc/crtstuff.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f03abaa5aabfabc4aaf73df1a19960f1239a89/gcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f03abaa5aabfabc4aaf73df1a19960f1239a89/gcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcrtstuff.c?ref=61f03abaa5aabfabc4aaf73df1a19960f1239a89", "patch": "@@ -455,9 +455,18 @@ STATIC func_ptr __DTOR_END__[1]\n #ifdef EH_FRAME_SECTION_NAME\n /* Terminate the frame unwind info section with a 4byte 0 as a sentinel;\n    this would be the 'length' field in a real FDE.  */\n-STATIC EH_FRAME_SECTION_CONST int __FRAME_END__[]\n-     __attribute__ ((unused, mode(SI), section(EH_FRAME_SECTION_NAME),\n-\t\t     aligned(4)))\n+# if __INT_MAX__ == 2147483647\n+typedef int int32;\n+# elif __LONG_MAX__ == 2147483647\n+typedef long int32;\n+# elif __SHRT_MAX__ == 2147483647\n+typedef short int32;\n+# else\n+#  error \"Missing a 4 byte integer\"\n+# endif\n+STATIC EH_FRAME_SECTION_CONST int32 __FRAME_END__[]\n+     __attribute__ ((unused, section(EH_FRAME_SECTION_NAME),\n+\t\t     aligned(sizeof(int32))))\n      = { 0 };\n #endif /* EH_FRAME_SECTION_NAME */\n "}, {"sha": "e60d01b3382aa337dab30b58989c86116ababe8d", "filename": "gcc/testsuite/gcc.dg/attr-mode-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f03abaa5aabfabc4aaf73df1a19960f1239a89/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-mode-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f03abaa5aabfabc4aaf73df1a19960f1239a89/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-mode-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-mode-1.c?ref=61f03abaa5aabfabc4aaf73df1a19960f1239a89", "patch": "@@ -0,0 +1,13 @@\n+/* PR c/17384 */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+typedef struct __attribute__((mode(SI))) { \n+    unsigned    INT0    :1, \n+                RES0    :1, \n+                        :6, \n+                INT1    :1, \n+                RES1    :1, \n+                        :6, \n+                        :16; \n+} MCR;  /* { dg-error \"inappropriate type\" } */"}]}