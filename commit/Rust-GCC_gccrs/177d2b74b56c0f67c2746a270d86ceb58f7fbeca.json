{"sha": "177d2b74b56c0f67c2746a270d86ceb58f7fbeca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc3ZDJiNzRiNTZjMGY2N2MyNzQ2YTI3MGQ4NmNlYjU4ZjdmYmVjYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-04-22T10:07:31Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-04-22T10:07:31Z"}, "message": "re PR libstdc++/57010 ([c++0x] priority_queue<>::pop() calls self-move-assignment operator)\n\n2013-04-22  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/57010\n\t* include/bits/stl_heap.h (pop_heap): Avoid self move-assignment.\n\t* testsuite/25_algorithms/pop_heap/57010.cc: New.\n\nFrom-SVN: r198125", "tree": {"sha": "56c621d19a5b1683f900e07cd86a5afff6d379f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56c621d19a5b1683f900e07cd86a5afff6d379f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/177d2b74b56c0f67c2746a270d86ceb58f7fbeca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/177d2b74b56c0f67c2746a270d86ceb58f7fbeca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/177d2b74b56c0f67c2746a270d86ceb58f7fbeca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/177d2b74b56c0f67c2746a270d86ceb58f7fbeca/comments", "author": null, "committer": null, "parents": [{"sha": "0fad3dbc216bcd61397a8e73c52fbc8861dc8b43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fad3dbc216bcd61397a8e73c52fbc8861dc8b43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fad3dbc216bcd61397a8e73c52fbc8861dc8b43"}], "stats": {"total": 75, "additions": 71, "deletions": 4}, "files": [{"sha": "fdf739f7ff7239a1cfa9cf2941105ce2afccedae", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177d2b74b56c0f67c2746a270d86ceb58f7fbeca/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177d2b74b56c0f67c2746a270d86ceb58f7fbeca/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=177d2b74b56c0f67c2746a270d86ceb58f7fbeca", "patch": "@@ -1,3 +1,9 @@\n+2013-04-22  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/57010\n+\t* include/bits/stl_heap.h (pop_heap): Avoid self move-assignment.\n+\t* testsuite/25_algorithms/pop_heap/57010.cc: New.\n+\n 2013-04-21  Evgeniy Stepanov  <eugenis@google.com>\n \n \t* src/c++11/system_error.cc (generic_category_instance): Add"}, {"sha": "807a8cf0525bfe0012df4b81e12dfe51e59f58d0", "filename": "libstdc++-v3/include/bits/stl_heap.h", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177d2b74b56c0f67c2746a270d86ceb58f7fbeca/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177d2b74b56c0f67c2746a270d86ceb58f7fbeca/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h?ref=177d2b74b56c0f67c2746a270d86ceb58f7fbeca", "patch": "@@ -291,8 +291,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_requires_valid_range(__first, __last);\n       __glibcxx_requires_heap(__first, __last);\n \n-      --__last;\n-      std::__pop_heap(__first, __last, __last);\n+      if (__last - __first > 1)\n+\t{\n+\t  --__last;\n+\t  std::__pop_heap(__first, __last, __last);\n+\t}\n     }\n \n   template<typename _RandomAccessIterator, typename _Distance,\n@@ -363,8 +366,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_requires_non_empty_range(__first, __last);\n       __glibcxx_requires_heap_pred(__first, __last, __comp);\n \n-      --__last;\n-      std::__pop_heap(__first, __last, __last, __comp);\n+      if (__last - __first > 1)\n+\t{\n+\t  --__last;\n+\t  std::__pop_heap(__first, __last, __last, __comp);\n+\t}\n     }\n \n   /**"}, {"sha": "87eae481dccd31c3bb28acc6c73f3fe23aa8c421", "filename": "libstdc++-v3/testsuite/25_algorithms/pop_heap/57010.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177d2b74b56c0f67c2746a270d86ceb58f7fbeca/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpop_heap%2F57010.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177d2b74b56c0f67c2746a270d86ceb58f7fbeca/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpop_heap%2F57010.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpop_heap%2F57010.cc?ref=177d2b74b56c0f67c2746a270d86ceb58f7fbeca", "patch": "@@ -0,0 +1,55 @@\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+#include <testsuite_rvalref.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::random_access_iterator_wrapper;\n+using __gnu_test::rvalstruct;\n+\n+typedef test_container<rvalstruct, random_access_iterator_wrapper> container;\n+\n+void test01()\n+{\n+  {\n+    rvalstruct makeheap[1];\n+    container makecon(makeheap, makeheap + 1);\n+\n+    std::push_heap(makecon.begin(), makecon.end());\n+    std::pop_heap(makecon.begin(), makecon.end());\n+  }\n+\n+  {\n+    rvalstruct makeheap[1];\n+    container makecon(makeheap, makeheap + 1);\n+\n+    std::push_heap(makecon.begin(), makecon.end(), std::less<rvalstruct>());\n+    std::pop_heap(makecon.begin(), makecon.end(), std::less<rvalstruct>());\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}