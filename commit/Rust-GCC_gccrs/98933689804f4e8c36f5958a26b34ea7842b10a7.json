{"sha": "98933689804f4e8c36f5958a26b34ea7842b10a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg5MzM2ODk4MDRmNGU4YzM2ZjU5NThhMjZiMzRlYTc4NDJiMTBhNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-05-25T07:00:01Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-05-25T07:00:01Z"}, "message": "re PR c++/49136 ([C++0x][constexpr] Incorrect constexpr c'tor evaluation with bitfields)\n\n\tPR c++/49136\n\t* semantics.c (cxx_eval_bit_field_ref): Handle the\n\tcase when BIT_FIELD_REF doesn't cover only a single field.\n\n\t* g++.dg/cpp0x/constexpr-bitfield2.C: New test.\n\t* g++.dg/cpp0x/constexpr-bitfield3.C: New test.\n\nFrom-SVN: r174168", "tree": {"sha": "e983cd89f9335030a3aef83f37438b9d6cb1e8bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e983cd89f9335030a3aef83f37438b9d6cb1e8bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98933689804f4e8c36f5958a26b34ea7842b10a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98933689804f4e8c36f5958a26b34ea7842b10a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98933689804f4e8c36f5958a26b34ea7842b10a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98933689804f4e8c36f5958a26b34ea7842b10a7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "349ea8e8550b73e69673f629df24d79902b4d371", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/349ea8e8550b73e69673f629df24d79902b4d371", "html_url": "https://github.com/Rust-GCC/gccrs/commit/349ea8e8550b73e69673f629df24d79902b4d371"}], "stats": {"total": 106, "additions": 104, "deletions": 2}, "files": [{"sha": "2f2348ff3b62c318192ba9adf5ed1b8a25e8e503", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98933689804f4e8c36f5958a26b34ea7842b10a7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98933689804f4e8c36f5958a26b34ea7842b10a7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=98933689804f4e8c36f5958a26b34ea7842b10a7", "patch": "@@ -1,3 +1,9 @@\n+2011-05-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/49136\n+\t* semantics.c (cxx_eval_bit_field_ref): Handle the\n+\tcase when BIT_FIELD_REF doesn't cover only a single field.\n+\n 2011-05-24  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/49042"}, {"sha": "50f25f0f72d39c3a7ac98905f98897d83de1c732", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98933689804f4e8c36f5958a26b34ea7842b10a7/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98933689804f4e8c36f5958a26b34ea7842b10a7/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=98933689804f4e8c36f5958a26b34ea7842b10a7", "patch": "@@ -6449,6 +6449,9 @@ cxx_eval_bit_field_ref (const constexpr_call *call, tree t,\n \t\t\tbool *non_constant_p)\n {\n   tree orig_whole = TREE_OPERAND (t, 0);\n+  tree retval, fldval, utype, mask;\n+  bool fld_seen = false;\n+  HOST_WIDE_INT istart, isize;\n   tree whole = cxx_eval_constant_expression (call, orig_whole,\n \t\t\t\t\t     allow_non_constant, addr,\n \t\t\t\t\t     non_constant_p);\n@@ -6469,12 +6472,47 @@ cxx_eval_bit_field_ref (const constexpr_call *call, tree t,\n     return t;\n \n   start = TREE_OPERAND (t, 2);\n+  istart = tree_low_cst (start, 0);\n+  isize = tree_low_cst (TREE_OPERAND (t, 1), 0);\n+  utype = TREE_TYPE (t);\n+  if (!TYPE_UNSIGNED (utype))\n+    utype = build_nonstandard_integer_type (TYPE_PRECISION (utype), 1);\n+  retval = build_int_cst (utype, 0);\n   FOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (whole), i, field, value)\n     {\n-      if (bit_position (field) == start)\n+      tree bitpos = bit_position (field);\n+      if (bitpos == start && DECL_SIZE (field) == TREE_OPERAND (t, 1))\n \treturn value;\n+      if (TREE_CODE (TREE_TYPE (field)) == INTEGER_TYPE\n+\t  && TREE_CODE (value) == INTEGER_CST\n+\t  && host_integerp (bitpos, 0)\n+\t  && host_integerp (DECL_SIZE (field), 0))\n+\t{\n+\t  HOST_WIDE_INT bit = tree_low_cst (bitpos, 0);\n+\t  HOST_WIDE_INT sz = tree_low_cst (DECL_SIZE (field), 0);\n+\t  HOST_WIDE_INT shift;\n+\t  if (bit >= istart && bit + sz <= istart + isize)\n+\t    {\n+\t      fldval = fold_convert (utype, value);\n+\t      mask = build_int_cst_type (utype, -1);\n+\t      mask = fold_build2 (LSHIFT_EXPR, utype, mask,\n+\t\t\t\t  size_int (TYPE_PRECISION (utype) - sz));\n+\t      mask = fold_build2 (RSHIFT_EXPR, utype, mask,\n+\t\t\t\t  size_int (TYPE_PRECISION (utype) - sz));\n+\t      fldval = fold_build2 (BIT_AND_EXPR, utype, fldval, mask);\n+\t      shift = bit - istart;\n+\t      if (BYTES_BIG_ENDIAN)\n+\t\tshift = TYPE_PRECISION (utype) - shift - sz;\n+\t      fldval = fold_build2 (LSHIFT_EXPR, utype, fldval,\n+\t\t\t\t    size_int (shift));\n+\t      retval = fold_build2 (BIT_IOR_EXPR, utype, retval, fldval);\n+\t      fld_seen = true;\n+\t    }\n+\t}\n     }\n-  gcc_unreachable();\n+  if (fld_seen)\n+    return fold_convert (TREE_TYPE (t), retval);\n+  gcc_unreachable ();\n   return error_mark_node;\n }\n "}, {"sha": "af20a3ec650e09152da41ab2d894aa21d9b755f8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98933689804f4e8c36f5958a26b34ea7842b10a7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98933689804f4e8c36f5958a26b34ea7842b10a7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=98933689804f4e8c36f5958a26b34ea7842b10a7", "patch": "@@ -1,3 +1,9 @@\n+2011-05-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/49136\n+\t* g++.dg/cpp0x/constexpr-bitfield2.C: New test.\n+\t* g++.dg/cpp0x/constexpr-bitfield3.C: New test.\n+\n 2011-05-24  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/48757"}, {"sha": "531bf31fc01c950f0b4427f5456e981262e1e5c4", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-bitfield2.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98933689804f4e8c36f5958a26b34ea7842b10a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-bitfield2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98933689804f4e8c36f5958a26b34ea7842b10a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-bitfield2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-bitfield2.C?ref=98933689804f4e8c36f5958a26b34ea7842b10a7", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/49136\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+struct day\n+{\n+  unsigned d : 5;\n+  unsigned n : 3;\n+  constexpr explicit day (int dd) : d(dd), n(7) {}\n+};\n+\n+struct date {\n+  int d;\n+  constexpr date (day dd) : d(dd.n != 7 ? 7 : dd.d) {}\n+};\n+\n+constexpr day d(0);\n+constexpr date dt(d);\n+static_assert (dt.d == 0, \"Error\");"}, {"sha": "b0ecbfb9abb72416c2942371f6e1ac4a9fe51f5d", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-bitfield3.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98933689804f4e8c36f5958a26b34ea7842b10a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-bitfield3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98933689804f4e8c36f5958a26b34ea7842b10a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-bitfield3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-bitfield3.C?ref=98933689804f4e8c36f5958a26b34ea7842b10a7", "patch": "@@ -0,0 +1,33 @@\n+// PR c++/49136\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+struct S\n+{\n+  unsigned : 1; unsigned s : 27; unsigned : 4;\n+  constexpr S (unsigned int x) : s(x) {}\n+};\n+\n+template <typename S>\n+struct T\n+{\n+  unsigned int t;\n+  constexpr T (S s) : t(s.s != 7 ? 0 : s.s) {}\n+  constexpr T (S s, S s2) : t(s.s != s2.s ? 0 : s.s) {}\n+};\n+\n+constexpr S s (7), s2 (7);\n+constexpr T<S> t (s), t2 (s, s2);\n+static_assert (t.t == 7, \"Error\");\n+static_assert (t2.t == 7, \"Error\");\n+\n+struct U\n+{\n+  int a : 1; int s : 1;\n+  constexpr U (int x, int y) : a (x), s (y) {}\n+};\n+\n+constexpr U u (0, -1), u2 (-1, -1);\n+constexpr T<U> t3 (u), t4 (u, u2);\n+static_assert (t3.t == 0, \"Error\");\n+static_assert (t4.t == -1, \"Error\");"}]}