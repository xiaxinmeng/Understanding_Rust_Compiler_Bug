{"sha": "ceeb2cbc4f3717ad6eb58e8e931dc6bff3f96fa0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VlYjJjYmM0ZjM3MTdhZDZlYjU4ZThlOTMxZGM2YmZmM2Y5NmZhMA==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@cavium.com", "date": "2014-10-15T00:38:03Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2014-10-15T00:38:03Z"}, "message": "revert: re PR middle-end/49721 (convert_memory_address_addr_space may generate invalid new insns)\n\n2014-10-14  Andrew Pinski  <apinski@cavium.com>\n\n\tRevert:\n\t2011-08-19  H.J. Lu  <hongjiu.lu@intel.com>\n\n        PR middle-end/49721\n        * explow.c (convert_memory_address_addr_space): Also permute the\n        conversion and addition of constant for zero-extend.\n\nFrom-SVN: r216229", "tree": {"sha": "c19b58b565b5abde050d7f66f273c32d8cc9bdd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c19b58b565b5abde050d7f66f273c32d8cc9bdd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ceeb2cbc4f3717ad6eb58e8e931dc6bff3f96fa0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceeb2cbc4f3717ad6eb58e8e931dc6bff3f96fa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ceeb2cbc4f3717ad6eb58e8e931dc6bff3f96fa0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceeb2cbc4f3717ad6eb58e8e931dc6bff3f96fa0/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e24ad4ec6055aaa7424e7ba7e97c850c26821531", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e24ad4ec6055aaa7424e7ba7e97c850c26821531", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e24ad4ec6055aaa7424e7ba7e97c850c26821531"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "34fbb3558187b7163f65c597c1774cb327b24c54", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceeb2cbc4f3717ad6eb58e8e931dc6bff3f96fa0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceeb2cbc4f3717ad6eb58e8e931dc6bff3f96fa0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ceeb2cbc4f3717ad6eb58e8e931dc6bff3f96fa0", "patch": "@@ -1,3 +1,12 @@\n+2014-10-14  Andrew Pinski  <apinski@cavium.com>\n+\n+\tRevert:\n+\t2011-08-19  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+        PR middle-end/49721\n+        * explow.c (convert_memory_address_addr_space): Also permute the\n+        conversion and addition of constant for zero-extend.\n+\n 2014-10-14  DJ Delorie  <dj@redhat.com>\n \n \t* config/msp430/msp430-modes.def (PSI): Add."}, {"sha": "3ba766d2f1cd06fb80427877a716b8786e0490f4", "filename": "gcc/explow.c", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceeb2cbc4f3717ad6eb58e8e931dc6bff3f96fa0/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceeb2cbc4f3717ad6eb58e8e931dc6bff3f96fa0/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=ceeb2cbc4f3717ad6eb58e8e931dc6bff3f96fa0", "patch": "@@ -376,23 +376,18 @@ convert_memory_address_addr_space (enum machine_mode to_mode ATTRIBUTE_UNUSED,\n \n     case PLUS:\n     case MULT:\n-      /* FIXME: For addition, we used to permute the conversion and\n-\t addition operation only if one operand is a constant and\n-\t converting the constant does not change it or if one operand\n-\t is a constant and we are using a ptr_extend instruction\n-\t (POINTERS_EXTEND_UNSIGNED < 0) even if the resulting address\n-\t may overflow/underflow.  We relax the condition to include\n-\t zero-extend (POINTERS_EXTEND_UNSIGNED > 0) since the other\n-\t parts of the compiler depend on it.  See PR 49721.\n-\n+      /* For addition we can safely permute the conversion and addition\n+\t operation if one operand is a constant and converting the constant\n+\t does not change it or if one operand is a constant and we are\n+\t using a ptr_extend instruction  (POINTERS_EXTEND_UNSIGNED < 0).\n \t We can always safely permute them if we are making the address\n \t narrower.  */\n       if (GET_MODE_SIZE (to_mode) < GET_MODE_SIZE (from_mode)\n \t  || (GET_CODE (x) == PLUS\n \t      && CONST_INT_P (XEXP (x, 1))\n-\t      && (POINTERS_EXTEND_UNSIGNED != 0\n-\t\t  || XEXP (x, 1) == convert_memory_address_addr_space\n-\t\t  \t\t\t(to_mode, XEXP (x, 1), as))))\n+\t      && (XEXP (x, 1) == convert_memory_address_addr_space\n+\t\t\t\t   (to_mode, XEXP (x, 1), as)\n+                 || POINTERS_EXTEND_UNSIGNED < 0)))\n \treturn gen_rtx_fmt_ee (GET_CODE (x), to_mode,\n \t\t\t       convert_memory_address_addr_space\n \t\t\t\t (to_mode, XEXP (x, 0), as),"}]}