{"sha": "236fc6a041778bf19cff62c6bc65706c4fa4b5a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM2ZmM2YTA0MTc3OGJmMTljZmY2MmM2YmM2NTcwNmM0ZmE0YjVhOA==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2002-04-07T07:40:49Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2002-04-07T07:40:49Z"}, "message": "ArrayList.java (addAll(int,Collection)): System.arraycopy all of the remaining elements.\n\n        * java/util/ArrayList.java (addAll(int,Collection)): System.arraycopy\n        all of the remaining elements.\n        * java/util/Vector.java (addAll(int,Collection)): Likewise.\n        (removeRange): If toIndex == fromIndex do\n        nothing, if toIndex < fromIndex throw IndexOutIfBoundsException.\n        (removeAll): Always throw NullPointerException when collection is\n        null.\n        (retrainAll): Likewise.\n\nFrom-SVN: r51979", "tree": {"sha": "efc2dd6dee0958f9f023d37fda7c28d454cb8596", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efc2dd6dee0958f9f023d37fda7c28d454cb8596"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/236fc6a041778bf19cff62c6bc65706c4fa4b5a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/236fc6a041778bf19cff62c6bc65706c4fa4b5a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/236fc6a041778bf19cff62c6bc65706c4fa4b5a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/236fc6a041778bf19cff62c6bc65706c4fa4b5a8/comments", "author": null, "committer": null, "parents": [{"sha": "0154eaa8122a7a848fd40a79d30d3835508e2ab6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0154eaa8122a7a848fd40a79d30d3835508e2ab6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0154eaa8122a7a848fd40a79d30d3835508e2ab6"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "5ef858c631f784389429ffde5e9412f90c8dc380", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236fc6a041778bf19cff62c6bc65706c4fa4b5a8/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236fc6a041778bf19cff62c6bc65706c4fa4b5a8/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=236fc6a041778bf19cff62c6bc65706c4fa4b5a8", "patch": "@@ -1,3 +1,14 @@\n+2002-04-06  Mark Wielaard <mark@klomp.org>\n+\n+\t* java/util/ArrayList.java (addAll(int,Collection)): System.arraycopy\n+\tall of the remaining elements.\n+\t* java/util/Vector.java (addAll(int,Collection)): Likewise.\n+\t(removeRange): If toIndex == fromIndex do\n+\tnothing, if toIndex < fromIndex throw IndexOutIfBoundsException.\n+\t(removeAll): Always throw NullPointerException when collection is\n+\tnull.\n+\t(retrainAll): Likewise.\n+\n 2002-04-05  Mark Wielaard <mark@klomp.org>\n \n \t* java/util/ArrayList.jva (removeRange): If toIndex == fromIndex do"}, {"sha": "99745d0f6480124b3cfa562d2eb2e208d221a72e", "filename": "libjava/java/util/ArrayList.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236fc6a041778bf19cff62c6bc65706c4fa4b5a8/libjava%2Fjava%2Futil%2FArrayList.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236fc6a041778bf19cff62c6bc65706c4fa4b5a8/libjava%2Fjava%2Futil%2FArrayList.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FArrayList.java?ref=236fc6a041778bf19cff62c6bc65706c4fa4b5a8", "patch": "@@ -427,8 +427,8 @@ public boolean addAll(int index, Collection c)\n     if (csize + size > data.length)\n       ensureCapacity(size + csize);\n     int end = index + csize;\n-    if (index != size)\n-      System.arraycopy(data, index, data, end, csize);\n+    if (size > 0 && index != size)\n+      System.arraycopy(data, index, data, end, size - index);\n     size += csize;\n     for ( ; index < end; index++)\n       data[index] = itr.next();"}, {"sha": "9cf8639fc3b9ca47b292f49b169b7655417b3c84", "filename": "libjava/java/util/Vector.java", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236fc6a041778bf19cff62c6bc65706c4fa4b5a8/libjava%2Fjava%2Futil%2FVector.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236fc6a041778bf19cff62c6bc65706c4fa4b5a8/libjava%2Fjava%2Futil%2FVector.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FVector.java?ref=236fc6a041778bf19cff62c6bc65706c4fa4b5a8", "patch": "@@ -716,6 +716,9 @@ public synchronized boolean addAll(Collection c)\n    */\n   public synchronized boolean removeAll(Collection c)\n   {\n+    if (c == null)\n+      throw new NullPointerException();\n+\n     int i;\n     int j;\n     for (i = 0; i < elementCount; i++)\n@@ -742,6 +745,9 @@ public synchronized boolean removeAll(Collection c)\n    */\n   public synchronized boolean retainAll(Collection c)\n   {\n+    if (c == null)\n+      throw new NullPointerException();\n+\n     int i;\n     int j;\n     for (i = 0; i < elementCount; i++)\n@@ -779,7 +785,8 @@ public synchronized boolean addAll(int index, Collection c)\n     ensureCapacity(elementCount + csize);\n     int end = index + csize;\n     if (elementCount > 0 && index != elementCount)\n-      System.arraycopy(elementData, index, elementData, end, csize);\n+      System.arraycopy(elementData, index,\n+\t\t       elementData, end, elementCount - index);\n     elementCount += csize;\n     for ( ; index < end; index++)\n       elementData[index] = itr.next();\n@@ -852,23 +859,28 @@ public synchronized List subList(int fromIndex, int toIndex)\n \n   /**\n    * Removes a range of elements from this list.\n+   * Does nothing when toIndex is equal to fromIndex.\n    *\n    * @param fromIndex the index to start deleting from (inclusive)\n    * @param toIndex the index to delete up to (exclusive)\n+   * @throws IndexOutOfBoundsException if fromIndex &gt; toIndex\n    */\n   // This does not need to be synchronized, because it is only called through\n   // clear() of a sublist, and clear() had already synchronized.\n   protected void removeRange(int fromIndex, int toIndex)\n   {\n-    if (fromIndex != toIndex)\n+    int change = toIndex - fromIndex;\n+    if (change > 0)\n       {\n         modCount++;\n         System.arraycopy(elementData, toIndex, elementData, fromIndex,\n                          elementCount - toIndex);\n         int save = elementCount;\n-        elementCount -= toIndex - fromIndex;\n+        elementCount -= change;\n         Arrays.fill(elementData, elementCount, save, null);\n       }\n+    else if (change < 0)\n+      throw new IndexOutOfBoundsException();\n   }\n \n   /**"}]}