{"sha": "70f4f91ca9db1b77afee82c9f91ee726160fee1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBmNGY5MWNhOWRiMWI3N2FmZWU4MmM5ZjkxZWU3MjYxNjBmZWUxZA==", "commit": {"author": {"name": "William Cohen", "email": "wcohen@redhat.com", "date": "2002-01-03T17:40:07Z"}, "committer": {"name": "William Cohen", "email": "wcohen@gcc.gnu.org", "date": "2002-01-03T17:40:07Z"}, "message": "function.h (struct function): Add profile.\n\n\t* function.h (struct function): Add profile.\n\t(current_function_profile): New.\n\tdoc/extend.texi: Update documentation.\n\t* final.c (final_start_function): Use current_function_profile\n\tinstead of profile_flag.\n\t(profile_after_prologue): Likewise.\n\t* function.c (expand_function_start): Likewise.\n\t(expand_function_start): Likewise.\n\t* config/alpha/alpha.c (direct_call_operand):\n\t(alpha_does_function_need_gp): Likewise.\n\t(alpha_expand_prologue): Likewise.\n\t* config/arm/arm.c (arm_expand_prologue): Likewise.\n\tthumb_expand_prologue: Likewise.\n\t* config/d30v/d30v.c (d30v_stack_info): Likewise.\n\t* config/fr30/fr30.c (MUST_SAVE_RETURN_POINTER): Likewise.\n\t(fr30_expand_prologue): Likewise.\n\t* config/i386/cygwin.h (SUBTARGET_PROLOGUE): Likewise.\n\t* config/i386/i386.c (ix86_osf_output_function_prologue): Likewise.\n\t* config/i386/i386.h (FINALIZE_PIC): Likewise.\n\t* config/i386/win32.h (SUBTARGET_PROLOGUE): Likewise.\n\t* config/i960/i960.c (i960_output_function_prologue): Likewise.\n\t* config/ia64/ia64.c (ia64_compute_frame_size): Likewise.\n\t* config/m32r/m32r.c (MUST_SAVE_RETURN_ADDR): Likewise.\n\t(m32r_expand_prologue): Likewise.\n\t* config/m88k/m88k.c (m88k_layout_frame): Likewise.\n\t(m88k_expand_prologue): Likewise.\n\t* config/m88k/m88k.h (ADJUST_INSN_LENGTH): Likewise.\n\t* config/mips/mips.c (compute_frame_size): Likewise.\n\t(mips_expand_prologue): Likewise.\n\t(mips_can_use_return_insn): Likewise.\n\t* config/pa/elf.h (ASM_FILE_START): Likewise.\n\t* config/pa/pa-linux.h (ASM_FILE_START): Likewise.\n\t* config/pa/pa64-hpux.h (ASM_FILE_START): Likewise.\n\t* config/pa/som.h (ASM_FILE_START): Likewise.\n\t* config/romp/romp.c (romp_using_r14): Likewise.\n\t* config/rs6000/rs6000.c (first_reg_to_save): Likewise.\n\t(rs6000_stack_info): Likewise.\n\t* config/rs6000/sysv4.h (ASM_DECLARE_FUNCTION_NAME): Likewise.\n\t* config/rs6000/xcoff.h (toc_section): Likewise.\n\t* config/v850/v850.c (compute_register_save_size): Likewise.\n\nFrom-SVN: r48515", "tree": {"sha": "037dbfa797702a60300fe2a9d76f987daacf4080", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/037dbfa797702a60300fe2a9d76f987daacf4080"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70f4f91ca9db1b77afee82c9f91ee726160fee1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70f4f91ca9db1b77afee82c9f91ee726160fee1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70f4f91ca9db1b77afee82c9f91ee726160fee1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70f4f91ca9db1b77afee82c9f91ee726160fee1d/comments", "author": {"login": "wcohen", "id": 1050609, "node_id": "MDQ6VXNlcjEwNTA2MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1050609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wcohen", "html_url": "https://github.com/wcohen", "followers_url": "https://api.github.com/users/wcohen/followers", "following_url": "https://api.github.com/users/wcohen/following{/other_user}", "gists_url": "https://api.github.com/users/wcohen/gists{/gist_id}", "starred_url": "https://api.github.com/users/wcohen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wcohen/subscriptions", "organizations_url": "https://api.github.com/users/wcohen/orgs", "repos_url": "https://api.github.com/users/wcohen/repos", "events_url": "https://api.github.com/users/wcohen/events{/privacy}", "received_events_url": "https://api.github.com/users/wcohen/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cb1ac742b7b90852e06830b79ba1e6daa47cecb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb1ac742b7b90852e06830b79ba1e6daa47cecb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb1ac742b7b90852e06830b79ba1e6daa47cecb5"}], "stats": {"total": 132, "additions": 92, "deletions": 40}, "files": [{"sha": "b1f202de947156d4ffd9117670e87f3bb5e35dc5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70f4f91ca9db1b77afee82c9f91ee726160fee1d", "patch": "@@ -1,3 +1,46 @@\n+2002-01-03  William Cohen  <wcohen@redhat.com>\n+\n+\t* function.h (struct function): Add profile.\n+\t(current_function_profile): New.\n+\tdoc/extend.texi: Update documentation.\n+\t* final.c (final_start_function): Use current_function_profile\n+\tinstead of profile_flag.\n+\t(profile_after_prologue): Likewise.\n+\t* function.c (expand_function_start): Likewise.\n+\t(expand_function_start): Likewise.\n+\t* config/alpha/alpha.c (direct_call_operand): \n+\t(alpha_does_function_need_gp): Likewise.\n+\t(alpha_expand_prologue): Likewise.\n+\t* config/arm/arm.c (arm_expand_prologue): Likewise.\n+\tthumb_expand_prologue: Likewise.\n+\t* config/d30v/d30v.c (d30v_stack_info): Likewise.\n+\t* config/fr30/fr30.c (MUST_SAVE_RETURN_POINTER): Likewise.\n+\t(fr30_expand_prologue): Likewise.\n+\t* config/i386/cygwin.h (SUBTARGET_PROLOGUE): Likewise.\n+\t* config/i386/i386.c (ix86_osf_output_function_prologue): Likewise.\n+\t* config/i386/i386.h (FINALIZE_PIC): Likewise.\n+\t* config/i386/win32.h (SUBTARGET_PROLOGUE): Likewise.\n+\t* config/i960/i960.c (i960_output_function_prologue): Likewise.\n+\t* config/ia64/ia64.c (ia64_compute_frame_size): Likewise.\n+\t* config/m32r/m32r.c (MUST_SAVE_RETURN_ADDR): Likewise.\n+\t(m32r_expand_prologue): Likewise.\n+\t* config/m88k/m88k.c (m88k_layout_frame): Likewise.\n+\t(m88k_expand_prologue): Likewise.\n+\t* config/m88k/m88k.h (ADJUST_INSN_LENGTH): Likewise.\n+\t* config/mips/mips.c (compute_frame_size): Likewise.\n+\t(mips_expand_prologue): Likewise.\n+\t(mips_can_use_return_insn): Likewise.\n+\t* config/pa/elf.h (ASM_FILE_START): Likewise.\n+\t* config/pa/pa-linux.h (ASM_FILE_START): Likewise.\n+\t* config/pa/pa64-hpux.h (ASM_FILE_START): Likewise.\n+\t* config/pa/som.h (ASM_FILE_START): Likewise.\n+\t* config/romp/romp.c (romp_using_r14): Likewise.\n+\t* config/rs6000/rs6000.c (first_reg_to_save): Likewise.\n+\t(rs6000_stack_info): Likewise.\n+\t* config/rs6000/sysv4.h (ASM_DECLARE_FUNCTION_NAME): Likewise.\n+\t* config/rs6000/xcoff.h (toc_section): Likewise.\n+\t* config/v850/v850.c (compute_register_save_size): Likewise.\n+\n 2002-01-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* simplify-rtx.c (simplify_binary_operation) [DIV]: If"}, {"sha": "dee844bb6d841983a6db4f9e628bf5267ad89b4a", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=70f4f91ca9db1b77afee82c9f91ee726160fee1d", "patch": "@@ -891,7 +891,7 @@ direct_call_operand (op, mode)\n      but is approximately correct for the OSF ABIs.  Don't know\n      what to do for VMS, NT, or UMK.  */\n   if (! TARGET_PROFILING_NEEDS_GP\n-      && ! profile_flag)\n+      && ! current_function_profile)\n     return 0;\n \n   return 1;\n@@ -5850,7 +5850,7 @@ alpha_does_function_need_gp ()\n   if (! TARGET_ABI_OSF)\n     return 0;\n \n-  if (TARGET_PROFILING_NEEDS_GP && profile_flag)\n+  if (TARGET_PROFILING_NEEDS_GP && current_function_profile)\n     return 1;\n \n #ifdef ASM_OUTPUT_MI_THUNK\n@@ -5995,7 +5995,7 @@ alpha_expand_prologue ()\n      the call to mcount ourselves, rather than having the linker do it\n      magically in response to -pg.  Since _mcount has special linkage,\n      don't represent the call as a call.  */\n-  if (TARGET_PROFILING_NEEDS_GP && profile_flag)\n+  if (TARGET_PROFILING_NEEDS_GP && current_function_profile)\n     emit_insn (gen_prologue_mcount ());\n \n   if (TARGET_ABI_UNICOSMK)"}, {"sha": "275eaa0575e2caf272c22eb93ac5d2c3343ee466", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=70f4f91ca9db1b77afee82c9f91ee726160fee1d", "patch": "@@ -8329,7 +8329,7 @@ arm_expand_prologue ()\n   /* If we are profiling, make sure no instructions are scheduled before\n      the call to mcount.  Similarly if the user has requested no\n      scheduling in the prolog.  */\n-  if (profile_flag || TARGET_NO_SCHED_PRO)\n+  if (current_function_profile || TARGET_NO_SCHED_PRO)\n     emit_insn (gen_blockage ());\n \n   /* If the link register is being kept alive, with the return address in it,\n@@ -10122,7 +10122,7 @@ thumb_expand_prologue ()\n \t}\n     }\n   \n-  if (profile_flag || TARGET_NO_SCHED_PRO)\n+  if (current_function_profile || TARGET_NO_SCHED_PRO)\n     emit_insn (gen_blockage ());\n }\n \n@@ -10159,7 +10159,7 @@ thumb_expand_epilogue ()\n      the stack adjustment will not be deleted.  */\n   emit_insn (gen_rtx_USE (VOIDmode, stack_pointer_rtx));\n \n-  if (profile_flag || TARGET_NO_SCHED_PRO)\n+  if (current_function_profile || TARGET_NO_SCHED_PRO)\n     emit_insn (gen_blockage ());\n }\n "}, {"sha": "4bfd4bb9976bb88ae0883d31b7d7f1abdb2af5a1", "filename": "gcc/config/d30v/d30v.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Fd30v%2Fd30v.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Fd30v%2Fd30v.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.c?ref=70f4f91ca9db1b77afee82c9f91ee726160fee1d", "patch": "@@ -1714,7 +1714,7 @@ d30v_stack_info ()\n   /* Zero all fields */\n   info = zero_info;\n \n-  if (profile_flag)\n+  if (current_function_profile)\n     regs_ever_live[GPR_LINK] = 1;\n \n   /* Determine if this is a stdarg function */"}, {"sha": "e804cd9dab21a2a92515bfe234574d5ce0ceed61", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=70f4f91ca9db1b77afee82c9f91ee726160fee1d", "patch": "@@ -134,7 +134,7 @@ static rtx fr30_pass_by_value PARAMS ((tree, tree));\n    && ! call_used_regs [regno]         )\n \n #define MUST_SAVE_FRAME_POINTER\t (regs_ever_live [FRAME_POINTER_REGNUM]  || frame_pointer_needed)\n-#define MUST_SAVE_RETURN_POINTER (regs_ever_live [RETURN_POINTER_REGNUM] || profile_flag)\n+#define MUST_SAVE_RETURN_POINTER (regs_ever_live [RETURN_POINTER_REGNUM] || current_function_profile)\n \n #if UNITS_PER_WORD == 4\n #define WORD_ALIGN(SIZE) (((SIZE) + 3) & ~3)\n@@ -334,7 +334,7 @@ fr30_expand_prologue ()\n       RTX_FRAME_RELATED_P (insn) = 1;\n     }\n \n-  if (profile_flag)\n+  if (current_function_profile)\n     emit_insn (gen_blockage ());\n }\n "}, {"sha": "c3197f60307a4fe8113629cb561d3d32a7a5a609", "filename": "gcc/config/i386/cygwin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Fi386%2Fcygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Fi386%2Fcygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.h?ref=70f4f91ca9db1b77afee82c9f91ee726160fee1d", "patch": "@@ -427,7 +427,7 @@ extern void i386_pe_unique_section PARAMS ((TREE, int));\n #define NO_IMPLICIT_EXTERN_C\n \n #define SUBTARGET_PROLOGUE\t\t\t\t\t\t\\\n-  if (profile_flag \t\t\t\t\t\t\t\\\n+  if (current_function_profile\t\t\t\t\t\t\\\n       && MAIN_NAME_P (DECL_NAME (current_function_decl)))\t\t\\\n      {\t\t\t\t\t\t\t\t\t\\\n       emit_call_insn (gen_rtx (CALL, VOIDmode, \t\t\t\t\\"}, {"sha": "ff47fa37e2c4a7f12f9089689dd55eccc0ea3fb6", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=70f4f91ca9db1b77afee82c9f91ee726160fee1d", "patch": "@@ -1329,7 +1329,7 @@ ix86_osf_output_function_prologue (file, size)\n   if (TARGET_UNDERSCORES)\n     prefix = \"_\";\n \n-  if (profile_flag && OSF_PROFILE_BEFORE_PROLOGUE)\n+  if (current_function_profile && OSF_PROFILE_BEFORE_PROLOGUE)\n     {\n       if (!flag_pic && !HALF_PIC_P ())\n \t{\n@@ -1369,7 +1369,7 @@ ix86_osf_output_function_prologue (file, size)\n \n #else  /* !OSF_OS */\n \n-  if (profile_flag && OSF_PROFILE_BEFORE_PROLOGUE)\n+  if (current_function_profile && OSF_PROFILE_BEFORE_PROLOGUE)\n     {\n       if (!flag_pic)\n \t{\n@@ -4156,7 +4156,7 @@ ix86_expand_prologue ()\n   /* If we are profiling, make sure no instructions are scheduled before\n      the call to mcount.  However, if -fpic, the above call will have\n      done that.  */\n-  if (profile_flag && ! pic_reg_used)\n+  if (current_function_profile && ! pic_reg_used)\n     emit_insn (gen_blockage ());\n }\n "}, {"sha": "b157e9d68c2a4762aa36f63c6028a7d69a3c6026", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=70f4f91ca9db1b77afee82c9f91ee726160fee1d", "patch": "@@ -2283,7 +2283,7 @@ while (0)\n #define FINALIZE_PIC\t\t\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-    current_function_uses_pic_offset_table |= profile_flag; \\\n+    current_function_uses_pic_offset_table |= current_function_profile; \\\n   }\t\t\t\t\t\t\t\t\t\\\n while (0)\n "}, {"sha": "0aa7a5794c4a8cd8dd720908b1116cbb504c3f1d", "filename": "gcc/config/i386/win32.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Fi386%2Fwin32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Fi386%2Fwin32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwin32.h?ref=70f4f91ca9db1b77afee82c9f91ee726160fee1d", "patch": "@@ -205,7 +205,7 @@ extern void i386_pe_unique_section ();\n #define NO_IMPLICIT_EXTERN_C\n \n #define SUBTARGET_PROLOGUE\t\t\t\t\t\t\\\n-  if (profile_flag \t\t\t\t\t\t\t\\\n+  if (current_function_profile\t\t\t\t\t\t\\\n       && MAIN_NAME_P (DECL_NAME (current_function_decl))\t\t\\\n      {\t\t\t\t\t\t\t\t\t\\\n       rtx xops[1];\t\t\t\t\t\t\t\\"}, {"sha": "6f29fdceea0d6d63e95fa2cf146e9b66ef2bd491", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=70f4f91ca9db1b77afee82c9f91ee726160fee1d", "patch": "@@ -1311,7 +1311,7 @@ i960_output_function_prologue (file, size)\n \n   epilogue_string[0] = '\\0';\n \n-  if (profile_flag)\n+  if (current_function_profile)\n     {\n       /* When profiling, we may use registers 20 to 27 to save arguments, so\n \t they can't be used here for saving globals.  J is the number of"}, {"sha": "f3bbb8f670a5e754c470be9a1906240e65cf7804", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=70f4f91ca9db1b77afee82c9f91ee726160fee1d", "patch": "@@ -1455,7 +1455,7 @@ ia64_compute_frame_size (size)\n      Likwise for -a profiling for the bb_init_func argument.  For -ax\n      profiling, we need two output registers for the two bb_init_trace_func\n      arguments.  */\n-  if (profile_flag)\n+  if (current_function_profile)\n     i = MAX (i, 1);\n   current_frame_info.n_output_regs = i;\n "}, {"sha": "a3692c9af5c134852de4a2a8f179165106f3a559", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=70f4f91ca9db1b77afee82c9f91ee726160fee1d", "patch": "@@ -1864,7 +1864,7 @@ static struct m32r_frame_info zero_frame_info;\n  && (regs_ever_live[regno] && (!call_used_regs[regno] || interrupt_p)))\n \n #define MUST_SAVE_FRAME_POINTER (regs_ever_live[FRAME_POINTER_REGNUM])\n-#define MUST_SAVE_RETURN_ADDR (regs_ever_live[RETURN_ADDR_REGNUM] || profile_flag)\n+#define MUST_SAVE_RETURN_ADDR (regs_ever_live[RETURN_ADDR_REGNUM] || current_function_profile)\n \n #define SHORT_INSN_SIZE 2\t/* size of small instructions */\n #define LONG_INSN_SIZE 4\t/* size of long instructions */\n@@ -2018,7 +2018,7 @@ m32r_expand_prologue ()\n   if (frame_pointer_needed)\n     emit_insn (gen_movsi (frame_pointer_rtx, stack_pointer_rtx));\n \n-  if (profile_flag)\n+  if (current_function_profile)\n     emit_insn (gen_blockage ());\n }\n "}, {"sha": "5115c0c6e7b989256a1c1ce38b0505c1422316c8", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=70f4f91ca9db1b77afee82c9f91ee726160fee1d", "patch": "@@ -1828,7 +1828,7 @@ m88k_layout_frame ()\n   frame_size = get_frame_size ();\n \n   /* Since profiling requires a call, make sure r1 is saved.  */\n-  if (profile_flag)\n+  if (current_function_profile)\n     save_regs[1] = 1;\n \n   /* If we are producing debug information, store r1 and r30 where the\n@@ -2039,7 +2039,7 @@ m88k_expand_prologue ()\n       if (! save_regs[1])\n \temit_move_insn (return_reg, temp_reg);\n     }\n-  if (profile_flag)\n+  if (current_function_profile)\n     emit_insn (gen_blockage ());\n }\n \f"}, {"sha": "34e089c2c190ec9a383aa517b93d77ab0c19cad5", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=70f4f91ca9db1b77afee82c9f91ee726160fee1d", "patch": "@@ -1555,7 +1555,7 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n   else if (GET_CODE (RTX) == NOTE\t\t\t\t\t\\\n \t   && NOTE_LINE_NUMBER (RTX) == NOTE_INSN_PROLOGUE_END)\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      if (profile_flag)\t\t\t\t\t\t\t\\\n+      if (current_function_profile)\t\t\t\t\t\\\n \tLENGTH += (FUNCTION_PROFILER_LENGTH + REG_PUSH_LENGTH\t\t\\\n \t\t   + REG_POP_LENGTH);\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\"}, {"sha": "83df73878f5c71882da1e0735e149f61fc13132d", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=70f4f91ca9db1b77afee82c9f91ee726160fee1d", "patch": "@@ -6465,7 +6465,7 @@ compute_frame_size (size)\n      call to mcount.  */\n   if (total_size == extra_size\n       && (mips_abi == ABI_32 || mips_abi == ABI_O64 || mips_abi == ABI_EABI)\n-      && ! profile_flag)\n+      && ! current_function_profile)\n     total_size = extra_size = 0;\n   else if (TARGET_ABICALLS)\n     {\n@@ -7505,7 +7505,7 @@ mips_expand_prologue ()\n   /* If we are profiling, make sure no instructions are scheduled before\n      the call to mcount.  */\n \n-  if (profile_flag)\n+  if (current_function_profile)\n     emit_insn (gen_blockage ());\n }\n \f\n@@ -7739,7 +7739,7 @@ mips_can_use_return_insn ()\n   if (! reload_completed)\n     return 0;\n \n-  if (regs_ever_live[31] || profile_flag)\n+  if (regs_ever_live[31] || current_function_profile)\n     return 0;\n \n   /* In mips16 mode, a function which returns a floating point value"}, {"sha": "89ca5e69f9bdd3648ea8348adeefe710ab6d71e1", "filename": "gcc/config/pa/elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Fpa%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Fpa%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Felf.h?ref=70f4f91ca9db1b77afee82c9f91ee726160fee1d", "patch": "@@ -41,7 +41,7 @@ do {  \\\n        fputs(\"\\t.LEVEL 1.1\\n\", FILE); \\\n      else \\\n        fputs(\"\\t.LEVEL 1.0\\n\", FILE); \\\n-     if (profile_flag)\\\n+     if (current_function_profile)\\\n        fprintf (FILE, \"\\t.IMPORT _mcount, ENTRY\\n\");\\\n      if (write_symbols != NO_DEBUG) \\\n        output_file_directive ((FILE), main_input_filename); \\"}, {"sha": "5367fdab6aee9b16e859f66ee0a1f82b7ddcc146", "filename": "gcc/config/pa/pa-linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Fpa%2Fpa-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Fpa%2Fpa-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-linux.h?ref=70f4f91ca9db1b77afee82c9f91ee726160fee1d", "patch": "@@ -99,7 +99,7 @@ Boston, MA 02111-1307, USA.  */\n \tfputs(\"\\t.LEVEL 1.1\\n\", FILE);\t\t\t\t\\\n       else\t\t\t\t\t\t\t\\\n \tfputs(\"\\t.LEVEL 1.0\\n\", FILE);\t\t\t\t\\\n-      if (profile_flag)\t\t\t\t\t\t\\\n+      if (current_function_profile)\t\t\t\t\\\n \tfputs (\"\\t.IMPORT _mcount, CODE\\n\", FILE);\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n    while (0)"}, {"sha": "ec52b43d083a6517067481874ec5b4e8a6988ead", "filename": "gcc/config/pa/pa64-hpux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h?ref=70f4f91ca9db1b77afee82c9f91ee726160fee1d", "patch": "@@ -68,7 +68,7 @@ do {  \\\n        fputs(\"\\t.LEVEL 1.1\\n\", FILE); \\\n      else \\\n        fputs(\"\\t.LEVEL 1.0\\n\", FILE); \\\n-     if (profile_flag)\\\n+     if (current_function_profile)\\\n        fprintf (FILE, \"\\t.IMPORT _mcount, CODE\\n\");\\\n      if (write_symbols != NO_DEBUG) \\\n        output_file_directive ((FILE), main_input_filename); \\"}, {"sha": "53c59e1710400772d58da34ab3f1b5a558035351", "filename": "gcc/config/pa/som.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Fpa%2Fsom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Fpa%2Fsom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fsom.h?ref=70f4f91ca9db1b77afee82c9f91ee726160fee1d", "patch": "@@ -233,7 +233,7 @@ do {  \\\n \\t.SUBSPA $CODE$,QUAD=0,ALIGN=8,ACCESS=44,CODE_ONLY\\n\\\n \\t.IMPORT $global$,DATA\\n\\\n \\t.IMPORT $$dyncall,MILLICODE\\n\", FILE);\\\n-     if (profile_flag)\\\n+     if (current_function_profile)\\\n        fprintf (FILE, \"\\t.IMPORT _mcount, CODE\\n\");\\\n      if (write_symbols != NO_DEBUG) \\\n        output_file_directive ((FILE), main_input_filename); \\"}, {"sha": "7f984e876d87d8fda8d59e5bd8095c72200898d3", "filename": "gcc/config/romp/romp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Fromp%2Fromp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Fromp%2Fromp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.c?ref=70f4f91ca9db1b77afee82c9f91ee726160fee1d", "patch": "@@ -1059,8 +1059,8 @@ romp_using_r14 ()\n {\n   /* If we are debugging, profiling, have a non-empty constant pool, or\n      call a function, we need r14.  */\n-  return (write_symbols != NO_DEBUG || profile_flag || get_pool_size () != 0\n-\t  || romp_makes_calls ());\n+  return (write_symbols != NO_DEBUG || current_function_profile\n+\t  || get_pool_size () != 0 || romp_makes_calls ());\n }\n \n /* Return non-zero if this function needs to push space on the stack.  */"}, {"sha": "618d3d24676b2361af67f2c9411f7a47b9137f08", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=70f4f91ca9db1b77afee82c9f91ee726160fee1d", "patch": "@@ -6763,7 +6763,7 @@ first_reg_to_save ()\n \t\t    || (DEFAULT_ABI == ABI_DARWIN && flag_pic)))))\n       break;\n \n-  if (profile_flag)\n+  if (current_function_profile)\n     {\n       /* AIX must save/restore every register that contains a parameter\n \t before/after the .__mcount call plus an additional register\n@@ -7048,7 +7048,7 @@ rs6000_stack_info ()\n \n   /* Determine if we need to save the link register.  */\n   if (rs6000_ra_ever_killed ()\n-      || (DEFAULT_ABI == ABI_AIX && profile_flag)\n+      || (DEFAULT_ABI == ABI_AIX && current_function_profile)\n #ifdef TARGET_RELOCATABLE\n       || (TARGET_RELOCATABLE && (get_pool_size () != 0))\n #endif"}, {"sha": "c20eaa0101f229f70a310734b4f9a4274de98f0a", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=70f4f91ca9db1b77afee82c9f91ee726160fee1d", "patch": "@@ -625,7 +625,8 @@ extern int rs6000_pic_labelno;\n   do {\t\t\t\t\t\t\t\t\t\\\n     const char *const init_ptr = (TARGET_64BIT) ? \".quad\" : \".long\";\t\\\n \t\t\t\t\t\t\t\t\t\\\n-    if (TARGET_RELOCATABLE && (get_pool_size () != 0 || profile_flag)\t\\\n+    if (TARGET_RELOCATABLE \t\t\t\t\t\t\\\n+\t&& (get_pool_size () != 0 || current_function_profile)\t\t\\\n \t&& uses_TOC())\t\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n \tchar buf[256];\t\t\t\t\t\t\t\\"}, {"sha": "2b3f5b9aeb27ebbb45e7946019c39fc99957c157", "filename": "gcc/config/rs6000/xcoff.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxcoff.h?ref=70f4f91ca9db1b77afee82c9f91ee726160fee1d", "patch": "@@ -307,7 +307,7 @@ toc_section ()\t\t\t\t\t\t\\\n   if (write_symbols != NO_DEBUG)\t\t\t\t\\\n     private_data_section ();\t\t\t\t\t\\\n   text_section ();\t\t\t\t\t\t\\\n-  if (profile_flag)\t\t\t\t\t\t\\\n+  if (current_function_profile)\t\t\t\t\t\\\n     fprintf (FILE, \"\\t.extern %s\\n\", RS6000_MCOUNT);\t\t\\\n   rs6000_file_start (FILE, TARGET_CPU_DEFAULT);\t\t\t\\\n }"}, {"sha": "76872edd1b0f778bacb778a5c6eae00d8b79d896", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=70f4f91ca9db1b77afee82c9f91ee726160fee1d", "patch": "@@ -1392,7 +1392,7 @@ compute_register_save_size (p_reg_saved)\n   long reg_saved = 0;\n \n   /* Count the return pointer if we need to save it.  */\n-  if (profile_flag && !call_p)\n+  if (current_function_profile && !call_p)\n     regs_ever_live [LINK_POINTER_REGNUM] = call_p = 1;\n  \n   /* Count space for the register saves.  */"}, {"sha": "ec3b1c76dd45b02ab4bc35e47c513a1a8ece3940", "filename": "gcc/final.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=70f4f91ca9db1b77afee82c9f91ee726160fee1d", "patch": "@@ -1527,7 +1527,7 @@ final_start_function (first, file, optimize)\n   /* The Sun386i and perhaps other machines don't work right\n      if the profiling code comes after the prologue.  */\n #ifdef PROFILE_BEFORE_PROLOGUE\n-  if (profile_flag)\n+  if (current_function_profile)\n     profile_function (file);\n #endif /* PROFILE_BEFORE_PROLOGUE */\n \n@@ -1573,7 +1573,7 @@ profile_after_prologue (file)\n      FILE *file ATTRIBUTE_UNUSED;\n {\n #ifndef PROFILE_BEFORE_PROLOGUE\n-  if (profile_flag)\n+  if (current_function_profile)\n     profile_function (file);\n #endif /* not PROFILE_BEFORE_PROLOGUE */\n }\n@@ -3820,7 +3820,7 @@ leaf_function_p ()\n   rtx insn;\n   rtx link;\n \n-  if (profile_flag || profile_arc_flag)\n+  if (current_function_profile || profile_arc_flag)\n     return 0;\n \n   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))"}, {"sha": "86d7797f6b60a2890072e1f5fec8864350188d54", "filename": "gcc/function.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=70f4f91ca9db1b77afee82c9f91ee726160fee1d", "patch": "@@ -6386,6 +6386,10 @@ expand_function_start (subr, parms_have_cleanups)\n     = (flag_instrument_function_entry_exit\n        && ! DECL_NO_INSTRUMENT_FUNCTION_ENTRY_EXIT (subr));\n \n+  current_function_profile\n+    = (profile_flag\n+       && ! DECL_NO_INSTRUMENT_FUNCTION_ENTRY_EXIT (subr));\n+\n   current_function_limit_stack\n     = (stack_limit_rtx != NULL_RTX && ! DECL_NO_LIMIT_STACK (subr));\n \n@@ -6564,7 +6568,7 @@ expand_function_start (subr, parms_have_cleanups)\n     }\n \n #ifdef PROFILE_HOOK\n-  if (profile_flag)\n+  if (current_function_profile)\n     PROFILE_HOOK (profile_label_no);\n #endif\n "}, {"sha": "5cc0948f20636dc299b238f361108154a739a060", "filename": "gcc/function.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f4f91ca9db1b77afee82c9f91ee726160fee1d/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=70f4f91ca9db1b77afee82c9f91ee726160fee1d", "patch": "@@ -434,6 +434,9 @@ struct function\n      generated.  */\n   unsigned int instrument_entry_exit : 1;\n \n+  /* Nonzero if profiling code should be generated.  */\n+  unsigned int profile : 1;\n+\n   /* Nonzero if stack limit checking should be enabled in the current\n      function.  */\n   unsigned int limit_stack : 1;\n@@ -504,6 +507,7 @@ extern int virtuals_instantiated;\n #define current_function_internal_arg_pointer (cfun->internal_arg_pointer)\n #define current_function_return_rtx (cfun->return_rtx)\n #define current_function_instrument_entry_exit (cfun->instrument_entry_exit)\n+#define current_function_profile (cfun->profile)\n #define current_function_limit_stack (cfun->limit_stack)\n #define current_function_uses_pic_offset_table (cfun->uses_pic_offset_table)\n #define current_function_uses_const_pool (cfun->uses_const_pool)"}]}