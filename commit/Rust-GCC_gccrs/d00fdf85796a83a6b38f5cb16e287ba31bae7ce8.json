{"sha": "d00fdf85796a83a6b38f5cb16e287ba31bae7ce8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDAwZmRmODU3OTZhODNhNmIzOGY1Y2IxNmUyODdiYTMxYmFlN2NlOA==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@vnet.ibm.com", "date": "2017-08-17T15:56:48Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@gcc.gnu.org", "date": "2017-08-17T15:56:48Z"}, "message": "re PR target/72804 (Poor code gen with -mvsx-timode)\n\ngcc/\n\tPR target/72804\n\t* config/rs6000/vsx.md (*vsx_le_permute_<mode>): Add support for\n\toperands residing in integer registers.\n\t(*vsx_le_perm_load_<mode>): Likewise.\n\t(*vsx_le_perm_store_<mode>): Likewise.\n\t(define_peephole2): Add peepholes to optimize the above.\n\ngcc/testsuite/\n\tPR target/72804\n\t* gcc.target/powerpc/pr72804.c: New test.\n\nFrom-SVN: r251153", "tree": {"sha": "f019b66b3d5f8798d9836de79ea870a28f20f711", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f019b66b3d5f8798d9836de79ea870a28f20f711"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d00fdf85796a83a6b38f5cb16e287ba31bae7ce8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d00fdf85796a83a6b38f5cb16e287ba31bae7ce8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d00fdf85796a83a6b38f5cb16e287ba31bae7ce8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d00fdf85796a83a6b38f5cb16e287ba31bae7ce8/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e67bbd5da485d131c174d9a65669d3cb78057a8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e67bbd5da485d131c174d9a65669d3cb78057a8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e67bbd5da485d131c174d9a65669d3cb78057a8d"}], "stats": {"total": 101, "additions": 86, "deletions": 15}, "files": [{"sha": "5ccbeddd7a37d3f21c2eb5d047e0e04825b77919", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d00fdf85796a83a6b38f5cb16e287ba31bae7ce8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d00fdf85796a83a6b38f5cb16e287ba31bae7ce8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d00fdf85796a83a6b38f5cb16e287ba31bae7ce8", "patch": "@@ -1,3 +1,12 @@\n+2017-08-17  Peter Bergner  <bergner@vnet.ibm.com>\n+\n+\tPR target/72804\n+\t* config/rs6000/vsx.md (*vsx_le_permute_<mode>): Add support for\n+\toperands residing in integer registers.\n+\t(*vsx_le_perm_load_<mode>): Likewise.\n+\t(*vsx_le_perm_store_<mode>): Likewise.\n+\t(define_peephole2): Add peepholes to optimize the above.\n+\n 2017-08-17  Marek Polacek  <polacek@redhat.com>\n \n \tPR middle-end/81814"}, {"sha": "743d63f1f3c906a39a0175c46f1306be1749e3c8", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 47, "deletions": 15, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d00fdf85796a83a6b38f5cb16e287ba31bae7ce8/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d00fdf85796a83a6b38f5cb16e287ba31bae7ce8/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=d00fdf85796a83a6b38f5cb16e287ba31bae7ce8", "patch": "@@ -759,17 +759,20 @@\n ;; special V1TI container class, which it is not appropriate to use vec_select\n ;; for the type.\n (define_insn \"*vsx_le_permute_<mode>\"\n-  [(set (match_operand:VSX_TI 0 \"nonimmediate_operand\" \"=<VSa>,<VSa>,Z\")\n+  [(set (match_operand:VSX_TI 0 \"nonimmediate_operand\" \"=<VSa>,<VSa>,Z,&r,&r,Q\")\n \t(rotate:VSX_TI\n-\t (match_operand:VSX_TI 1 \"input_operand\" \"<VSa>,Z,<VSa>\")\n+\t (match_operand:VSX_TI 1 \"input_operand\" \"<VSa>,Z,<VSa>,r,Q,r\")\n \t (const_int 64)))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n   \"@\n    xxpermdi %x0,%x1,%x1,2\n    lxvd2x %x0,%y1\n-   stxvd2x %x1,%y0\"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"type\" \"vecperm,vecload,vecstore\")])\n+   stxvd2x %x1,%y0\n+   mr %0,%L1\\;mr %L0,%1\n+   ld%U1%X1 %0,%L1\\;ld%U1%X1 %L0,%1\n+   std%U0%X0 %L1,%0\\;std%U0%X0 %1,%L0\"\n+  [(set_attr \"length\" \"4,4,4,8,8,8\")\n+   (set_attr \"type\" \"vecperm,vecload,vecstore,*,load,store\")])\n \n (define_insn_and_split \"*vsx_le_undo_permute_<mode>\"\n   [(set (match_operand:VSX_TI 0 \"vsx_register_operand\" \"=<VSa>,<VSa>\")\n@@ -795,10 +798,12 @@\n    (set_attr \"type\" \"veclogical\")])\n \n (define_insn_and_split \"*vsx_le_perm_load_<mode>\"\n-  [(set (match_operand:VSX_LE_128 0 \"vsx_register_operand\" \"=<VSa>\")\n-        (match_operand:VSX_LE_128 1 \"memory_operand\" \"Z\"))]\n+  [(set (match_operand:VSX_LE_128 0 \"vsx_register_operand\" \"=<VSa>,r\")\n+        (match_operand:VSX_LE_128 1 \"memory_operand\" \"Z,Q\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n-  \"#\"\n+  \"@\n+   #\n+   #\"\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n   [(const_int 0)]\n   \"\n@@ -811,16 +816,18 @@\n   DONE;\n }\n   \"\n-  [(set_attr \"type\" \"vecload\")\n-   (set_attr \"length\" \"8\")])\n+  [(set_attr \"type\" \"vecload,load\")\n+   (set_attr \"length\" \"8,8\")])\n \n (define_insn \"*vsx_le_perm_store_<mode>\"\n-  [(set (match_operand:VSX_LE_128 0 \"memory_operand\" \"=Z\")\n-        (match_operand:VSX_LE_128 1 \"vsx_register_operand\" \"+<VSa>\"))]\n+  [(set (match_operand:VSX_LE_128 0 \"memory_operand\" \"=Z,Q\")\n+        (match_operand:VSX_LE_128 1 \"vsx_register_operand\" \"+<VSa>,r\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n-  \"#\"\n-  [(set_attr \"type\" \"vecstore\")\n-   (set_attr \"length\" \"12\")])\n+  \"@\n+   #\n+   #\"\n+  [(set_attr \"type\" \"vecstore,store\")\n+   (set_attr \"length\" \"12,8\")])\n \n (define_split\n   [(set (match_operand:VSX_LE_128 0 \"memory_operand\" \"\")\n@@ -836,6 +843,31 @@\n   DONE;\n })\n \n+;; Peepholes to catch loads and stores for TImode if TImode landed in\n+;; GPR registers on a little endian system.\n+(define_peephole2\n+  [(set (match_operand:VSX_TI 0 \"int_reg_operand\")\n+\t(rotate:VSX_TI (match_operand:VSX_TI 1 \"memory_operand\")\n+\t\t       (const_int 64)))\n+   (set (match_operand:VSX_TI 2 \"int_reg_operand\")\n+\t(rotate:VSX_TI (match_dup 0)\n+\t\t       (const_int 64)))]\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && TARGET_VSX_TIMODE && !TARGET_P9_VECTOR\n+   && (rtx_equal_p (operands[0], operands[2])\n+       || peep2_reg_dead_p (2, operands[0]))\"\n+   [(set (match_dup 2) (match_dup 1))])\n+\n+(define_peephole2\n+  [(set (match_operand:VSX_TI 0 \"int_reg_operand\")\n+\t(rotate:VSX_TI (match_operand:VSX_TI 1 \"int_reg_operand\")\n+\t\t       (const_int 64)))\n+   (set (match_operand:VSX_TI 2 \"memory_operand\")\n+\t(rotate:VSX_TI (match_dup 0)\n+\t\t       (const_int 64)))]\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && TARGET_VSX_TIMODE && !TARGET_P9_VECTOR\n+   && peep2_reg_dead_p (2, operands[0])\"\n+   [(set (match_dup 2) (match_dup 1))])\n+\n ;; Peephole to catch memory to memory transfers for TImode if TImode landed in\n ;; VSX registers on a little endian system.  The vector types and IEEE 128-bit\n ;; floating point are handled by the more generic swap elimination pass."}, {"sha": "b1502cb757ed4ec4040760d54f8d288328ca239f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d00fdf85796a83a6b38f5cb16e287ba31bae7ce8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d00fdf85796a83a6b38f5cb16e287ba31bae7ce8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d00fdf85796a83a6b38f5cb16e287ba31bae7ce8", "patch": "@@ -1,3 +1,8 @@\n+2017-08-17  Peter Bergner  <bergner@vnet.ibm.com>\n+\n+\tPR target/72804\n+\t* gcc.target/powerpc/pr72804.c: New test.\n+\n 2017-08-17  Marek Polacek  <polacek@redhat.com>\n \n \tPR middle-end/81814"}, {"sha": "b83b6350d759c0a68c09cf22bf82950799492d19", "filename": "gcc/testsuite/gcc.target/powerpc/pr72804.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d00fdf85796a83a6b38f5cb16e287ba31bae7ce8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr72804.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d00fdf85796a83a6b38f5cb16e287ba31bae7ce8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr72804.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr72804.c?ref=d00fdf85796a83a6b38f5cb16e287ba31bae7ce8", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile { target { lp64 } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+__int128_t\n+foo (__int128_t *src)\n+{\n+  return ~*src;\n+}\n+\n+void\n+bar (__int128_t *dst, __int128_t src)\n+{\n+  *dst =  ~src;\n+}\n+\n+/* { dg-final { scan-assembler-times \"not \" 4 } } */\n+/* { dg-final { scan-assembler-times \"std \" 2 } } */\n+/* { dg-final { scan-assembler-times \"ld \" 2 } } */\n+/* { dg-final { scan-assembler-not \"lxvd2x\" } } */\n+/* { dg-final { scan-assembler-not \"stxvd2x\" } } */\n+/* { dg-final { scan-assembler-not \"xxpermdi\" } } */\n+/* { dg-final { scan-assembler-not \"mfvsrd\" } } */\n+/* { dg-final { scan-assembler-not \"mfvsrd\" } } */"}]}