{"sha": "7d6c5039bb1030e01a66a8cf4525abff4b825276", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q2YzUwMzliYjEwMzBlMDFhNjZhOGNmNDUyNWFiZmY0YjgyNTI3Ng==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-11-08T05:46:22Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-11-08T05:46:22Z"}, "message": "compiler: Correct types when type conversion makes backend call.\n\nFrom-SVN: r204559", "tree": {"sha": "4524118a1bb0b493bac3457deaf2adf930f25093", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4524118a1bb0b493bac3457deaf2adf930f25093"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d6c5039bb1030e01a66a8cf4525abff4b825276", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d6c5039bb1030e01a66a8cf4525abff4b825276", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d6c5039bb1030e01a66a8cf4525abff4b825276", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d6c5039bb1030e01a66a8cf4525abff4b825276/comments", "author": null, "committer": null, "parents": [{"sha": "26e3d0ae64120aa70079e404b8bc0f61b306833b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26e3d0ae64120aa70079e404b8bc0f61b306833b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26e3d0ae64120aa70079e404b8bc0f61b306833b"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "7269f5849f58af601d4301c56f6ca8c74b05ae88", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6c5039bb1030e01a66a8cf4525abff4b825276/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6c5039bb1030e01a66a8cf4525abff4b825276/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=7d6c5039bb1030e01a66a8cf4525abff4b825276", "patch": "@@ -3351,9 +3351,10 @@ Type_conversion_expression::do_get_tree(Translate_context* context)\n \t  return se->get_tree(context);\n \t}\n \n-      Call_expression* i2s_expr =\n+      Expression* i2s_expr =\n           Runtime::make_call(Runtime::INT_TO_STRING, this->location(), 1,\n                              this->expr_);\n+      i2s_expr = Expression::make_cast(type, i2s_expr, this->location());\n       ret = i2s_expr->get_tree(context);\n     }\n   else if (type->is_string_type() && expr_type->is_slice_type())\n@@ -3405,7 +3406,7 @@ Type_conversion_expression::do_get_tree(Translate_context* context)\n       Type* e = type->array_type()->element_type()->forwarded();\n       go_assert(e->integer_type() != NULL);\n \n-      Call_expression* s2a_expr;\n+      Expression* s2a_expr;\n       if (e->integer_type()->is_byte())\n         s2a_expr = Runtime::make_call(Runtime::STRING_TO_BYTE_ARRAY,\n                                       this->location(), 1, this->expr_);\n@@ -3415,6 +3416,8 @@ Type_conversion_expression::do_get_tree(Translate_context* context)\n           s2a_expr = Runtime::make_call(Runtime::STRING_TO_INT_ARRAY,\n                                         this->location(), 1, this->expr_);\n \t}\n+      s2a_expr = Expression::make_unsafe_cast(type, s2a_expr,\n+\t\t\t\t\t      this->location());\n       ret = s2a_expr->get_tree(context);\n     }\n   else if ((type->is_unsafe_pointer_type()"}]}