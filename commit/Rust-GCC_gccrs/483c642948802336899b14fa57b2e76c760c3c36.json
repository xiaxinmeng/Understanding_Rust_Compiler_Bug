{"sha": "483c642948802336899b14fa57b2e76c760c3c36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDgzYzY0Mjk0ODgwMjMzNjg5OWIxNGZhNTdiMmU3NmM3NjBjM2MzNg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2016-05-20T09:17:16Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-05-20T09:17:16Z"}, "message": "re PR target/29756 (SSE intrinsics hard to use without redundant temporaries appearing)\n\n2016-05-20  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/29756\n\t* tree.def (BIT_INSERT_EXPR): New tcc_expression tree code.\n\t* expr.c (expand_expr_real_2): Handle BIT_INSERT_EXPR.\n\t* fold-const.c (operand_equal_p): Likewise.\n\t(fold_ternary_loc): Add constant folding of BIT_INSERT_EXPR.\n\t* gimplify.c (gimplify_expr): Handle BIT_INSERT_EXPR.\n\t* tree-inline.c (estimate_operator_cost): Likewise.\n\t* tree-pretty-print.c (dump_generic_node): Likewise.\n\t* tree-ssa-operands.c (get_expr_operands): Likewise.\n\t* cfgexpand.c (expand_debug_expr): Likewise.\n\t* gimple-pretty-print.c (dump_ternary_rhs): Likewise.\n\t* gimple.c (get_gimple_rhs_num_ops): Handle BIT_INSERT_EXPR.\n\t* tree-cfg.c (verify_gimple_assign_ternary): Verify BIT_INSERT_EXPR.\n\n\t* tree-ssa.c (non_rewritable_lvalue_p): We can rewrite\n\tvector inserts using BIT_FIELD_REF or MEM_REF on the lhs.\n\t(execute_update_addresses_taken): Do it.\n\n\t* gcc.dg/tree-ssa/vector-6.c: New testcase.\n\nFrom-SVN: r236501", "tree": {"sha": "e061dbe5dac8633c8babd3bf14639f9e128c156e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e061dbe5dac8633c8babd3bf14639f9e128c156e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/483c642948802336899b14fa57b2e76c760c3c36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/483c642948802336899b14fa57b2e76c760c3c36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/483c642948802336899b14fa57b2e76c760c3c36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/483c642948802336899b14fa57b2e76c760c3c36/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eb066284cb8cdf7f46f455c3e975cf1b349a0487", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb066284cb8cdf7f46f455c3e975cf1b349a0487", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb066284cb8cdf7f46f455c3e975cf1b349a0487"}], "stats": {"total": 318, "additions": 312, "deletions": 6}, "files": [{"sha": "d40ec66656794246de928dd0a4ead91b3049cbf9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483c642948802336899b14fa57b2e76c760c3c36/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483c642948802336899b14fa57b2e76c760c3c36/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=483c642948802336899b14fa57b2e76c760c3c36", "patch": "@@ -1,3 +1,22 @@\n+2016-05-20  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/29756\n+\t* tree.def (BIT_INSERT_EXPR): New tcc_expression tree code.\n+\t* expr.c (expand_expr_real_2): Handle BIT_INSERT_EXPR.\n+\t* fold-const.c (operand_equal_p): Likewise.\n+\t(fold_ternary_loc): Add constant folding of BIT_INSERT_EXPR.\n+\t* gimplify.c (gimplify_expr): Handle BIT_INSERT_EXPR.\n+\t* tree-inline.c (estimate_operator_cost): Likewise.\n+\t* tree-pretty-print.c (dump_generic_node): Likewise.\n+\t* tree-ssa-operands.c (get_expr_operands): Likewise.\n+\t* cfgexpand.c (expand_debug_expr): Likewise.\n+\t* gimple-pretty-print.c (dump_ternary_rhs): Likewise.\n+\t* gimple.c (get_gimple_rhs_num_ops): Handle BIT_INSERT_EXPR.\n+\t* tree-cfg.c (verify_gimple_assign_ternary): Verify BIT_INSERT_EXPR.\n+\t* tree-ssa.c (non_rewritable_lvalue_p): We can rewrite\n+\tvector inserts using BIT_FIELD_REF or MEM_REF on the lhs.\n+\t(execute_update_addresses_taken): Do it.\n+\n 2016-05-20  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/71185"}, {"sha": "1461ad8b90b7f961c23d99f153728c0167220b50", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483c642948802336899b14fa57b2e76c760c3c36/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483c642948802336899b14fa57b2e76c760c3c36/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=483c642948802336899b14fa57b2e76c760c3c36", "patch": "@@ -5025,6 +5025,7 @@ expand_debug_expr (tree exp)\n     case FIXED_CONVERT_EXPR:\n     case OBJ_TYPE_REF:\n     case WITH_SIZE_EXPR:\n+    case BIT_INSERT_EXPR:\n       return NULL;\n \n     case DOT_PROD_EXPR:"}, {"sha": "3c7e71f71306cd10d5cffe2db4c37fd51001b611", "filename": "gcc/expr.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483c642948802336899b14fa57b2e76c760c3c36/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483c642948802336899b14fa57b2e76c760c3c36/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=483c642948802336899b14fa57b2e76c760c3c36", "patch": "@@ -9225,6 +9225,23 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n       target = expand_vec_cond_expr (type, treeop0, treeop1, treeop2, target);\n       return target;\n \n+    case BIT_INSERT_EXPR:\n+      {\n+\tunsigned bitpos = tree_to_uhwi (treeop2);\n+\tunsigned bitsize;\n+\tif (INTEGRAL_TYPE_P (TREE_TYPE (treeop1)))\n+\t  bitsize = TYPE_PRECISION (TREE_TYPE (treeop1));\n+\telse\n+\t  bitsize = tree_to_uhwi (TYPE_SIZE (TREE_TYPE (treeop1)));\n+\trtx op0 = expand_normal (treeop0);\n+\trtx op1 = expand_normal (treeop1);\n+\trtx dst = gen_reg_rtx (mode);\n+\temit_move_insn (dst, op0);\n+\tstore_bit_field (dst, bitsize, bitpos, 0, 0,\n+\t\t\t TYPE_MODE (TREE_TYPE (treeop1)), op1, false);\n+\treturn dst;\n+      }\n+\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "556fc73a33ddf2688a4ef88a75c37b98a48bd415", "filename": "gcc/fold-const.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483c642948802336899b14fa57b2e76c760c3c36/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483c642948802336899b14fa57b2e76c760c3c36/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=483c642948802336899b14fa57b2e76c760c3c36", "patch": "@@ -3163,6 +3163,7 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n \n \tcase VEC_COND_EXPR:\n \tcase DOT_PROD_EXPR:\n+\tcase BIT_INSERT_EXPR:\n \t  return OP_SAME (0) && OP_SAME (1) && OP_SAME (2);\n \n \tdefault:\n@@ -11860,6 +11861,46 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n \t}\n       return NULL_TREE;\n \n+    case BIT_INSERT_EXPR:\n+      /* Perform (partial) constant folding of BIT_INSERT_EXPR.  */\n+      if (TREE_CODE (arg0) == INTEGER_CST\n+\t  && TREE_CODE (arg1) == INTEGER_CST)\n+\t{\n+\t  unsigned HOST_WIDE_INT bitpos = tree_to_uhwi (op2);\n+\t  unsigned bitsize = TYPE_PRECISION (TREE_TYPE (arg1));\n+\t  wide_int tem = wi::bit_and (arg0,\n+\t\t\t\t      wi::shifted_mask (bitpos, bitsize, true,\n+\t\t\t\t\t\t\tTYPE_PRECISION (type)));\n+\t  wide_int tem2\n+\t    = wi::lshift (wi::zext (wi::to_wide (arg1, TYPE_PRECISION (type)),\n+\t\t\t\t    bitsize), bitpos);\n+\t  return wide_int_to_tree (type, wi::bit_or (tem, tem2));\n+\t}\n+      else if (TREE_CODE (arg0) == VECTOR_CST\n+\t       && CONSTANT_CLASS_P (arg1)\n+\t       && types_compatible_p (TREE_TYPE (TREE_TYPE (arg0)),\n+\t\t\t\t      TREE_TYPE (arg1)))\n+\t{\n+\t  unsigned HOST_WIDE_INT bitpos = tree_to_uhwi (op2);\n+\t  unsigned HOST_WIDE_INT elsize\n+\t    = tree_to_uhwi (TYPE_SIZE (TREE_TYPE (arg1)));\n+\t  if (bitpos % elsize == 0)\n+\t    {\n+\t      unsigned k = bitpos / elsize;\n+\t      if (operand_equal_p (VECTOR_CST_ELT (arg0, k), arg1, 0))\n+\t\treturn arg0;\n+\t      else\n+\t\t{\n+\t\t  tree *elts = XALLOCAVEC (tree, TYPE_VECTOR_SUBPARTS (type));\n+\t\t  memcpy (elts, VECTOR_CST_ELTS (arg0),\n+\t\t\t  sizeof (tree) * TYPE_VECTOR_SUBPARTS (type));\n+\t\t  elts[k] = arg1;\n+\t\t  return build_vector (type, elts);\n+\t\t}\n+\t    }\n+\t}\n+      return NULL_TREE;\n+\n     default:\n       return NULL_TREE;\n     } /* switch (code) */"}, {"sha": "f8642684ad91147911e6c609609107270722af86", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483c642948802336899b14fa57b2e76c760c3c36/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483c642948802336899b14fa57b2e76c760c3c36/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=483c642948802336899b14fa57b2e76c760c3c36", "patch": "@@ -478,6 +478,24 @@ dump_ternary_rhs (pretty_printer *buffer, gassign *gs, int spc, int flags)\n       pp_greater (buffer);\n       break;\n \n+    case BIT_INSERT_EXPR:\n+      pp_string (buffer, \"BIT_INSERT_EXPR <\");\n+      dump_generic_node (buffer, gimple_assign_rhs1 (gs), spc, flags, false);\n+      pp_string (buffer, \", \");\n+      dump_generic_node (buffer, gimple_assign_rhs2 (gs), spc, flags, false);\n+      pp_string (buffer, \", \");\n+      dump_generic_node (buffer, gimple_assign_rhs3 (gs), spc, flags, false);\n+      pp_string (buffer, \" (\");\n+      if (INTEGRAL_TYPE_P (TREE_TYPE (gimple_assign_rhs2 (gs))))\n+\tpp_decimal_int (buffer,\n+\t\t\tTYPE_PRECISION (TREE_TYPE (gimple_assign_rhs2 (gs))));\n+      else\n+\tdump_generic_node (buffer,\n+\t\t\t   TYPE_SIZE (TREE_TYPE (gimple_assign_rhs2 (gs))),\n+\t\t\t   spc, flags, false);\n+      pp_string (buffer, \" bits)>\");\n+      break;\n+\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "742c907d8bbff4b141bf0b0e7a097f1eedf0b00b", "filename": "gcc/gimple.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483c642948802336899b14fa57b2e76c760c3c36/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483c642948802336899b14fa57b2e76c760c3c36/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=483c642948802336899b14fa57b2e76c760c3c36", "patch": "@@ -2043,6 +2043,7 @@ get_gimple_rhs_num_ops (enum tree_code code)\n       || (SYM) == REALIGN_LOAD_EXPR\t\t\t\t\t    \\\n       || (SYM) == VEC_COND_EXPR\t\t\t\t\t\t    \\\n       || (SYM) == VEC_PERM_EXPR                                             \\\n+      || (SYM) == BIT_INSERT_EXPR\t\t\t\t\t    \\\n       || (SYM) == FMA_EXPR) ? GIMPLE_TERNARY_RHS\t\t\t    \\\n    : ((SYM) == CONSTRUCTOR\t\t\t\t\t\t    \\\n       || (SYM) == OBJ_TYPE_REF\t\t\t\t\t\t    \\"}, {"sha": "4a544e3c8ee554c7e6d039b89ce81785e8880484", "filename": "gcc/gimplify.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483c642948802336899b14fa57b2e76c760c3c36/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483c642948802336899b14fa57b2e76c760c3c36/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=483c642948802336899b14fa57b2e76c760c3c36", "patch": "@@ -10931,6 +10931,10 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t  /* Classified as tcc_expression.  */\n \t  goto expr_3;\n \n+\tcase BIT_INSERT_EXPR:\n+\t  /* Argument 3 is a constant.  */\n+\t  goto expr_2;\n+\n \tcase POINTER_PLUS_EXPR:\n \t  {\n \t    enum gimplify_status r0, r1;"}, {"sha": "2d061d08819871b14823d75398ad881fd473fb59", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483c642948802336899b14fa57b2e76c760c3c36/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483c642948802336899b14fa57b2e76c760c3c36/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=483c642948802336899b14fa57b2e76c760c3c36", "patch": "@@ -1,3 +1,8 @@\n+2016-05-20  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/29756\n+\t* gcc.dg/tree-ssa/vector-6.c: New testcase.\n+\n 2016-05-20  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/71185"}, {"sha": "059ef4ec98c74fb89105c30b08c1efb469f5b959", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vector-6.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483c642948802336899b14fa57b2e76c760c3c36/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvector-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483c642948802336899b14fa57b2e76c760c3c36/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvector-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvector-6.c?ref=483c642948802336899b14fa57b2e76c760c3c36", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-ccp1\" } */\n+\n+typedef int v4si __attribute__((vector_size (4 * sizeof (int))));\n+\n+v4si test1 (v4si v, int i)\n+{\n+  ((int *)&v)[0] = i;\n+  return v;\n+}\n+\n+v4si test2 (v4si v, int i)\n+{\n+  int *p = (int *)&v;\n+  *p = i;\n+  return v;\n+}\n+\n+v4si test3 (v4si v, int i)\n+{\n+  ((int *)&v)[3] = i;\n+  return v;\n+}\n+\n+v4si test4 (v4si v, int i)\n+{\n+  int *p = (int *)&v;\n+  p += 3;\n+  *p = i;\n+  return v;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Now a gimple register: v\" 4 \"ccp1\" } } */"}, {"sha": "7c2ee78bdfbdebb85e4ed8eec12d8bcafc77d352", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483c642948802336899b14fa57b2e76c760c3c36/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483c642948802336899b14fa57b2e76c760c3c36/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=483c642948802336899b14fa57b2e76c760c3c36", "patch": "@@ -4134,6 +4134,53 @@ verify_gimple_assign_ternary (gassign *stmt)\n \n       return false;\n \n+    case BIT_INSERT_EXPR:\n+      if (! useless_type_conversion_p (lhs_type, rhs1_type))\n+\t{\n+\t  error (\"type mismatch in BIT_INSERT_EXPR\");\n+\t  debug_generic_expr (lhs_type);\n+\t  debug_generic_expr (rhs1_type);\n+\t  return true;\n+\t}\n+      if (! ((INTEGRAL_TYPE_P (rhs1_type)\n+\t      && INTEGRAL_TYPE_P (rhs2_type))\n+\t     || (VECTOR_TYPE_P (rhs1_type)\n+\t\t && types_compatible_p (TREE_TYPE (rhs1_type), rhs2_type))))\n+\t{\n+\t  error (\"not allowed type combination in BIT_INSERT_EXPR\");\n+\t  debug_generic_expr (rhs1_type);\n+\t  debug_generic_expr (rhs2_type);\n+\t  return true;\n+\t}\n+      if (! tree_fits_uhwi_p (rhs3)\n+\t  || ! tree_fits_uhwi_p (TYPE_SIZE (rhs2_type)))\n+\t{\n+\t  error (\"invalid position or size in BIT_INSERT_EXPR\");\n+\t  return true;\n+\t}\n+      if (INTEGRAL_TYPE_P (rhs1_type))\n+\t{\n+\t  unsigned HOST_WIDE_INT bitpos = tree_to_uhwi (rhs3);\n+\t  if (bitpos >= TYPE_PRECISION (rhs1_type)\n+\t      || (bitpos + TYPE_PRECISION (rhs2_type)\n+\t\t  > TYPE_PRECISION (rhs1_type)))\n+\t    {\n+\t      error (\"insertion out of range in BIT_INSERT_EXPR\");\n+\t      return true;\n+\t    }\n+\t}\n+      else if (VECTOR_TYPE_P (rhs1_type))\n+\t{\n+\t  unsigned HOST_WIDE_INT bitpos = tree_to_uhwi (rhs3);\n+\t  unsigned HOST_WIDE_INT bitsize = tree_to_uhwi (TYPE_SIZE (rhs2_type));\n+\t  if (bitpos % bitsize != 0)\n+\t    {\n+\t      error (\"vector insertion not at element boundary\");\n+\t      return true;\n+\t    }\n+\t}\n+      return false;\n+\n     case DOT_PROD_EXPR:\n     case REALIGN_LOAD_EXPR:\n       /* FIXME.  */"}, {"sha": "07f6a83ff7c61ffc5bd4a44df15bcc888381e011", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483c642948802336899b14fa57b2e76c760c3c36/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483c642948802336899b14fa57b2e76c760c3c36/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=483c642948802336899b14fa57b2e76c760c3c36", "patch": "@@ -3941,6 +3941,10 @@ estimate_operator_cost (enum tree_code code, eni_weights *weights,\n         return weights->div_mod_cost;\n       return 1;\n \n+    /* Bit-field insertion needs several shift and mask operations.  */\n+    case BIT_INSERT_EXPR:\n+      return 3;\n+\n     default:\n       /* We expect a copy assignment with no operator.  */\n       gcc_assert (get_gimple_rhs_class (code) == GIMPLE_SINGLE_RHS);"}, {"sha": "0e7fdd1fec4e3769f3a1c4ae7d7f3353c9daaa5a", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483c642948802336899b14fa57b2e76c760c3c36/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483c642948802336899b14fa57b2e76c760c3c36/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=483c642948802336899b14fa57b2e76c760c3c36", "patch": "@@ -1876,6 +1876,23 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, int flags,\n       pp_greater (pp);\n       break;\n \n+    case BIT_INSERT_EXPR:\n+      pp_string (pp, \"BIT_INSERT_EXPR <\");\n+      dump_generic_node (pp, TREE_OPERAND (node, 0), spc, flags, false);\n+      pp_string (pp, \", \");\n+      dump_generic_node (pp, TREE_OPERAND (node, 1), spc, flags, false);\n+      pp_string (pp, \", \");\n+      dump_generic_node (pp, TREE_OPERAND (node, 2), spc, flags, false);\n+      pp_string (pp, \" (\");\n+      if (INTEGRAL_TYPE_P (TREE_TYPE (TREE_OPERAND (node, 1))))\n+\tpp_decimal_int (pp,\n+\t\t\tTYPE_PRECISION (TREE_TYPE (TREE_OPERAND (node, 1))));\n+      else\n+\tdump_generic_node (pp, TYPE_SIZE (TREE_TYPE (TREE_OPERAND (node, 1))),\n+\t\t\t   spc, flags, false);\n+      pp_string (pp, \" bits)>\");\n+      break;\n+\n     case ARRAY_REF:\n     case ARRAY_RANGE_REF:\n       op0 = TREE_OPERAND (node, 0);"}, {"sha": "eccea2f62b9d84d6709e2cc634127cd6ea896606", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483c642948802336899b14fa57b2e76c760c3c36/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483c642948802336899b14fa57b2e76c760c3c36/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=483c642948802336899b14fa57b2e76c760c3c36", "patch": "@@ -833,6 +833,7 @@ get_expr_operands (struct function *fn, gimple *stmt, tree *expr_p, int flags)\n       get_expr_operands (fn, stmt, &TREE_OPERAND (expr, 0), flags);\n       return;\n \n+    case BIT_INSERT_EXPR:\n     case COMPOUND_EXPR:\n     case OBJ_TYPE_REF:\n     case ASSERT_EXPR:"}, {"sha": "cf6e76405b3f8bd1563ee97c8a4afbb8c44d95a7", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 89, "deletions": 6, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483c642948802336899b14fa57b2e76c760c3c36/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483c642948802336899b14fa57b2e76c760c3c36/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=483c642948802336899b14fa57b2e76c760c3c36", "patch": "@@ -1275,21 +1275,48 @@ non_rewritable_lvalue_p (tree lhs)\n       && DECL_P (TREE_OPERAND (lhs, 0)))\n     return false;\n \n-  /* A decl that is wrapped inside a MEM-REF that covers\n-     it full is also rewritable.\n-     ???  The following could be relaxed allowing component\n+  /* ???  The following could be relaxed allowing component\n      references that do not change the access size.  */\n   if (TREE_CODE (lhs) == MEM_REF\n-      && TREE_CODE (TREE_OPERAND (lhs, 0)) == ADDR_EXPR\n-      && integer_zerop (TREE_OPERAND (lhs, 1)))\n+      && TREE_CODE (TREE_OPERAND (lhs, 0)) == ADDR_EXPR)\n     {\n       tree decl = TREE_OPERAND (TREE_OPERAND (lhs, 0), 0);\n-      if (DECL_P (decl)\n+\n+      /* A decl that is wrapped inside a MEM-REF that covers\n+\t it full is also rewritable.  */\n+      if (integer_zerop (TREE_OPERAND (lhs, 1))\n+\t  && DECL_P (decl)\n \t  && DECL_SIZE (decl) == TYPE_SIZE (TREE_TYPE (lhs))\n \t  && (TREE_THIS_VOLATILE (decl) == TREE_THIS_VOLATILE (lhs)))\n \treturn false;\n+\n+      /* A vector-insert using a MEM_REF or ARRAY_REF is rewritable\n+\t using a BIT_INSERT_EXPR.  */\n+      if (DECL_P (decl)\n+\t  && VECTOR_TYPE_P (TREE_TYPE (decl))\n+\t  && TYPE_MODE (TREE_TYPE (decl)) != BLKmode\n+\t  && types_compatible_p (TREE_TYPE (lhs),\n+\t\t\t\t TREE_TYPE (TREE_TYPE (decl)))\n+\t  && tree_fits_uhwi_p (TREE_OPERAND (lhs, 1))\n+\t  && tree_int_cst_lt (TREE_OPERAND (lhs, 1),\n+\t\t\t      TYPE_SIZE_UNIT (TREE_TYPE (decl)))\n+\t  && (tree_to_uhwi (TREE_OPERAND (lhs, 1))\n+\t      % tree_to_uhwi (TYPE_SIZE_UNIT (TREE_TYPE (lhs)))) == 0)\n+\treturn false;\n     }\n \n+  /* A vector-insert using a BIT_FIELD_REF is rewritable using\n+     BIT_INSERT_EXPR.  */\n+  if (TREE_CODE (lhs) == BIT_FIELD_REF\n+      && DECL_P (TREE_OPERAND (lhs, 0))\n+      && VECTOR_TYPE_P (TREE_TYPE (TREE_OPERAND (lhs, 0)))\n+      && TYPE_MODE (TREE_TYPE (TREE_OPERAND (lhs, 0))) != BLKmode\n+      && types_compatible_p (TREE_TYPE (lhs),\n+\t\t\t     TREE_TYPE (TREE_TYPE (TREE_OPERAND (lhs, 0))))\n+      && (tree_to_uhwi (TREE_OPERAND (lhs, 2))\n+\t  % tree_to_uhwi (TYPE_SIZE (TREE_TYPE (lhs)))) == 0)\n+    return false;\n+\n   return true;\n }\n \n@@ -1511,6 +1538,62 @@ execute_update_addresses_taken (void)\n \t\t    continue;\n \t\t  }\n \n+\t\t/* Rewrite a vector insert via a BIT_FIELD_REF on the LHS\n+\t\t   into a BIT_INSERT_EXPR.  */\n+\t\tif (TREE_CODE (lhs) == BIT_FIELD_REF\n+\t\t    && DECL_P (TREE_OPERAND (lhs, 0))\n+\t\t    && bitmap_bit_p (suitable_for_renaming,\n+\t\t\t\t     DECL_UID (TREE_OPERAND (lhs, 0)))\n+\t\t    && VECTOR_TYPE_P (TREE_TYPE (TREE_OPERAND (lhs, 0)))\n+\t\t    && TYPE_MODE (TREE_TYPE (TREE_OPERAND (lhs, 0))) != BLKmode\n+\t\t    && types_compatible_p (TREE_TYPE (lhs),\n+\t\t\t\t\t   TREE_TYPE (TREE_TYPE\n+\t\t\t\t\t\t       (TREE_OPERAND (lhs, 0))))\n+\t\t    && (tree_to_uhwi (TREE_OPERAND (lhs, 2))\n+\t\t\t% tree_to_uhwi (TYPE_SIZE (TREE_TYPE (lhs))) == 0))\n+\t\t  {\n+\t\t    tree var = TREE_OPERAND (lhs, 0);\n+\t\t    tree val = gimple_assign_rhs1 (stmt);\n+\t\t    tree bitpos = TREE_OPERAND (lhs, 2);\n+\t\t    gimple_assign_set_lhs (stmt, var);\n+\t\t    gimple_assign_set_rhs_with_ops\n+\t\t      (&gsi, BIT_INSERT_EXPR, var, val, bitpos);\n+\t\t    stmt = gsi_stmt (gsi);\n+\t\t    unlink_stmt_vdef (stmt);\n+\t\t    update_stmt (stmt);\n+\t\t    continue;\n+\t\t  }\n+\n+\t\t/* Rewrite a vector insert using a MEM_REF on the LHS\n+\t\t   into a BIT_INSERT_EXPR.  */\n+\t\tif (TREE_CODE (lhs) == MEM_REF\n+\t\t    && TREE_CODE (TREE_OPERAND (lhs, 0)) == ADDR_EXPR\n+\t\t    && (sym = TREE_OPERAND (TREE_OPERAND (lhs, 0), 0))\n+\t\t    && DECL_P (sym)\n+\t\t    && bitmap_bit_p (suitable_for_renaming, DECL_UID (sym))\n+\t\t    && VECTOR_TYPE_P (TREE_TYPE (sym))\n+\t\t    && TYPE_MODE (TREE_TYPE (sym)) != BLKmode\n+\t\t    && types_compatible_p (TREE_TYPE (lhs),\n+\t\t\t\t\t   TREE_TYPE (TREE_TYPE (sym)))\n+\t\t    && tree_fits_uhwi_p (TREE_OPERAND (lhs, 1))\n+\t\t    && tree_int_cst_lt (TREE_OPERAND (lhs, 1),\n+\t\t\t\t\tTYPE_SIZE_UNIT (TREE_TYPE (sym)))\n+\t\t    && (tree_to_uhwi (TREE_OPERAND (lhs, 1))\n+\t\t\t% tree_to_uhwi (TYPE_SIZE_UNIT (TREE_TYPE (lhs)))) == 0)\n+\t\t  {\n+\t\t    tree val = gimple_assign_rhs1 (stmt);\n+\t\t    tree bitpos\n+\t\t      = wide_int_to_tree (bitsizetype,\n+\t\t\t\t\t  mem_ref_offset (lhs) * BITS_PER_UNIT);\n+\t\t    gimple_assign_set_lhs (stmt, sym);\n+\t\t    gimple_assign_set_rhs_with_ops\n+\t\t      (&gsi, BIT_INSERT_EXPR, sym, val, bitpos);\n+\t\t    stmt = gsi_stmt (gsi);\n+\t\t    unlink_stmt_vdef (stmt);\n+\t\t    update_stmt (stmt);\n+\t\t    continue;\n+\t\t  }\n+\n \t\t/* We shouldn't have any fancy wrapping of\n \t\t   component-refs on the LHS, but look through\n \t\t   VIEW_CONVERT_EXPRs as that is easy.  */"}, {"sha": "d16575aee6280d44730fef97872b4719464d8dd6", "filename": "gcc/tree.def", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483c642948802336899b14fa57b2e76c760c3c36/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483c642948802336899b14fa57b2e76c760c3c36/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=483c642948802336899b14fa57b2e76c760c3c36", "patch": "@@ -852,6 +852,21 @@ DEFTREECODE (ADDR_EXPR, \"addr_expr\", tcc_expression, 1)\n    descriptor of type ptr_mode.  */\n DEFTREECODE (FDESC_EXPR, \"fdesc_expr\", tcc_expression, 2)\n \n+/* Given a container value, a replacement value and a bit position within\n+   the container, produce the value that results from replacing the part of\n+   the container starting at the bit position with the replacement value.\n+   Operand 0 is a tree for the container value of integral or vector type;\n+   Operand 1 is a tree for the replacement value of another integral or\n+   the vector element type;\n+   Operand 2 is a tree giving the constant bit position;\n+   The number of bits replaced is given by the precision of the type of the\n+   replacement value if it is integral or by its size if it is non-integral.\n+   ???  The reason to make the size of the replacement implicit is to avoid\n+   introducing a quaternary operation.\n+   The replaced bits shall be fully inside the container.  If the container\n+   is of vector type, then these bits shall be aligned with its elements.  */\n+DEFTREECODE (BIT_INSERT_EXPR, \"bit_field_insert\", tcc_expression, 3)\n+\n /* Given two real or integer operands of the same type,\n    returns a complex value of the corresponding complex type.  */\n DEFTREECODE (COMPLEX_EXPR, \"complex_expr\", tcc_binary, 2)"}]}