{"sha": "b6b979d46bc38cacdad505b33fc1482fb18516b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZiOTc5ZDQ2YmMzOGNhY2RhZDUwNWIzM2ZjMTQ4MmZiMTg1MTZiMw==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@cup.hp.com", "date": "2004-02-27T17:17:01Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2004-02-27T17:17:01Z"}, "message": "ia64.h (no-inline-float-divide): New option.\n\n\t* config/ia64/ia64.h (no-inline-float-divide): New option.\n\t* config/ia64/ia64.h (no-inline-int-divide): New option.\n\t* config/ia64/ia64.h (no-inline-sqrt): New option.\n\t(TARGET_DEFAULT): Add MASK_INLINE_FLOAT_DIV_THR to define.\n\t* config/ia64/hpux.h (TARGET_DEFAULT): Ditto.\n\t* config/ia64/ia64.c (ia64_override_options): Modify error\n\tchecking for inlined division/sqrt.\n\nFrom-SVN: r78569", "tree": {"sha": "423116168cc7e79f9cab15cec8b7508b0e7b5421", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/423116168cc7e79f9cab15cec8b7508b0e7b5421"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6b979d46bc38cacdad505b33fc1482fb18516b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6b979d46bc38cacdad505b33fc1482fb18516b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6b979d46bc38cacdad505b33fc1482fb18516b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6b979d46bc38cacdad505b33fc1482fb18516b3/comments", "author": null, "committer": null, "parents": [{"sha": "88462c42d2d07ead08289c202e400ebca0868898", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88462c42d2d07ead08289c202e400ebca0868898", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88462c42d2d07ead08289c202e400ebca0868898"}], "stats": {"total": 67, "additions": 59, "deletions": 8}, "files": [{"sha": "4f88a8bd9f4e5b94503eac32bb04151ae8777c7c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b979d46bc38cacdad505b33fc1482fb18516b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b979d46bc38cacdad505b33fc1482fb18516b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6b979d46bc38cacdad505b33fc1482fb18516b3", "patch": "@@ -1,3 +1,13 @@\n+2004-02-27  Steve Ellcey  <sje@cup.hp.com>\n+\n+\t* config/ia64/ia64.h (no-inline-float-divide): New option.\n+\t* config/ia64/ia64.h (no-inline-int-divide): New option.\n+\t* config/ia64/ia64.h (no-inline-sqrt): New option.\n+\t(TARGET_DEFAULT): Add MASK_INLINE_FLOAT_DIV_THR to define.\n+\t* config/ia64/hpux.h (TARGET_DEFAULT): Ditto.\n+\t* config/ia64/ia64.c (ia64_override_options): Modify error\n+\tchecking for inlined division/sqrt.\n+\n 2004-02-27  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* bb-reorder.c, cfgbuild.c, diagnostic.c, explow.c, profile.c,"}, {"sha": "c6a7d152d2b0d9d615d25cab1a432ad0a3d13cab", "filename": "gcc/config/ia64/hpux.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b979d46bc38cacdad505b33fc1482fb18516b3/gcc%2Fconfig%2Fia64%2Fhpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b979d46bc38cacdad505b33fc1482fb18516b3/gcc%2Fconfig%2Fia64%2Fhpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fhpux.h?ref=b6b979d46bc38cacdad505b33fc1482fb18516b3", "patch": "@@ -105,7 +105,8 @@ do {\t\t\t\t\t\t\t\\\n #define JMP_BUF_SIZE  (8 * 76)\n \n #undef TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_DWARF2_ASM | MASK_BIG_ENDIAN | MASK_ILP32)\n+#define TARGET_DEFAULT \\\n+  (MASK_DWARF2_ASM | MASK_BIG_ENDIAN | MASK_ILP32 | MASK_INLINE_FLOAT_DIV_THR)\n \n /* This needs to be set to force structure arguments with a single\n    field to be treated as structures and not as the type of their"}, {"sha": "0e6190238f0fa12c0416f8e343313f96751630c3", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 39, "deletions": 6, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b979d46bc38cacdad505b33fc1482fb18516b3/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b979d46bc38cacdad505b33fc1482fb18516b3/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=b6b979d46bc38cacdad505b33fc1482fb18516b3", "patch": "@@ -4751,20 +4751,53 @@ ia64_override_options (void)\n \n   if (TARGET_INLINE_FLOAT_DIV_LAT && TARGET_INLINE_FLOAT_DIV_THR)\n     {\n-      warning (\"cannot optimize floating point division for both latency and throughput\");\n-      target_flags &= ~MASK_INLINE_FLOAT_DIV_THR;\n+      if ((target_flags_explicit & MASK_INLINE_FLOAT_DIV_LAT)\n+\t   && (target_flags_explicit & MASK_INLINE_FLOAT_DIV_THR))\n+\t{\n+\t  warning (\"cannot optimize floating point division for both latency and throughput\");\n+\t  target_flags &= ~MASK_INLINE_FLOAT_DIV_THR;\n+\t}\n+      else \n+\t{\n+\t  if (target_flags_explicit & MASK_INLINE_FLOAT_DIV_THR)\n+\t    target_flags &= ~MASK_INLINE_FLOAT_DIV_LAT;\n+\t  else\n+\t    target_flags &= ~MASK_INLINE_FLOAT_DIV_THR;\n+\t}\n     }\n \n   if (TARGET_INLINE_INT_DIV_LAT && TARGET_INLINE_INT_DIV_THR)\n     {\n-      warning (\"cannot optimize integer division for both latency and throughput\");\n-      target_flags &= ~MASK_INLINE_INT_DIV_THR;\n+      if ((target_flags_explicit & MASK_INLINE_INT_DIV_LAT)\n+\t   && (target_flags_explicit & MASK_INLINE_INT_DIV_THR))\n+\t{\n+\t  warning (\"cannot optimize integer division for both latency and throughput\");\n+\t  target_flags &= ~MASK_INLINE_INT_DIV_THR;\n+\t}\n+      else \n+\t{\n+\t  if (target_flags_explicit & MASK_INLINE_INT_DIV_THR)\n+\t    target_flags &= ~MASK_INLINE_INT_DIV_LAT;\n+\t  else\n+\t    target_flags &= ~MASK_INLINE_INT_DIV_THR;\n+\t}\n     }\n \n   if (TARGET_INLINE_SQRT_LAT && TARGET_INLINE_SQRT_THR)\n     {\n-      warning (\"cannot optimize square root for both latency and throughput\");\n-      target_flags &= ~MASK_INLINE_SQRT_THR;\n+      if ((target_flags_explicit & MASK_INLINE_SQRT_LAT)\n+\t   && (target_flags_explicit & MASK_INLINE_SQRT_THR))\n+\t{\n+\t  warning (\"cannot optimize square root for both latency and throughput\");\n+\t  target_flags &= ~MASK_INLINE_SQRT_THR;\n+\t}\n+      else \n+\t{\n+\t  if (target_flags_explicit & MASK_INLINE_SQRT_THR)\n+\t    target_flags &= ~MASK_INLINE_SQRT_LAT;\n+\t  else\n+\t    target_flags &= ~MASK_INLINE_SQRT_THR;\n+\t}\n     }\n \n   if (TARGET_INLINE_SQRT_LAT)"}, {"sha": "24e1477924745508cb0c8bdc8f0b07691a0fdf31", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b979d46bc38cacdad505b33fc1482fb18516b3/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b979d46bc38cacdad505b33fc1482fb18516b3/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=b6b979d46bc38cacdad505b33fc1482fb18516b3", "patch": "@@ -203,14 +203,21 @@ extern int ia64_tls_size;\n       N_(\"Generate inline floating point division, optimize for latency\") },\\\n   { \"inline-float-divide-max-throughput\", MASK_INLINE_FLOAT_DIV_THR,\t\\\n       N_(\"Generate inline floating point division, optimize for throughput\") },\\\n+  { \"no-inline-float-divide\", \t\t\t\t\t\t\\\n+      -(MASK_INLINE_FLOAT_DIV_LAT|MASK_INLINE_FLOAT_DIV_THR),\t\t\\\n+      N_(\"Do not inline floating point division\") },\t\t\t\\\n   { \"inline-int-divide-min-latency\", MASK_INLINE_INT_DIV_LAT,\t\t\\\n       N_(\"Generate inline integer division, optimize for latency\") },\t\\\n   { \"inline-int-divide-max-throughput\", MASK_INLINE_INT_DIV_THR,\t\\\n       N_(\"Generate inline integer division, optimize for throughput\") },\\\n+  { \"no-inline-int-divide\", -(MASK_INLINE_INT_DIV_LAT|MASK_INLINE_INT_DIV_THR),\t\\\n+      N_(\"Do not inline integer division\") },\t\t\t\t\\\n   { \"inline-sqrt-min-latency\", MASK_INLINE_SQRT_LAT,\t\t\t\\\n       N_(\"Generate inline square root, optimize for latency\") },\t\\\n   { \"inline-sqrt-max-throughput\", MASK_INLINE_SQRT_THR,\t\t\t\\\n       N_(\"Generate inline square root, optimize for throughput\") },     \\\n+  { \"no-inline-sqrt\", -(MASK_INLINE_SQRT_LAT|MASK_INLINE_SQRT_THR),\t\\\n+      N_(\"Do not inline square root\") },\t\t\t\t\\\n   { \"dwarf2-asm\", \tMASK_DWARF2_ASM,\t\t\t\t\\\n       N_(\"Enable Dwarf 2 line debug info via GNU as\")},\t\t\t\\\n   { \"no-dwarf2-asm\", \t-MASK_DWARF2_ASM,\t\t\t\t\\\n@@ -227,7 +234,7 @@ extern int ia64_tls_size;\n /* Default target_flags if no switches are specified  */\n \n #ifndef TARGET_DEFAULT\n-#define TARGET_DEFAULT MASK_DWARF2_ASM\n+#define TARGET_DEFAULT (MASK_DWARF2_ASM | MASK_INLINE_FLOAT_DIV_THR)\n #endif\n \n #ifndef TARGET_CPU_DEFAULT"}]}