{"sha": "193bee751a607fac9d85e0ce8e6462fb5de1b515", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkzYmVlNzUxYTYwN2ZhYzlkODVlMGNlOGU2NDYyZmI1ZGUxYjUxNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-07-06T08:25:26Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-07-06T08:25:26Z"}, "message": "[arm] Fix ambiguous .md attribute uses\n\nThis patch is part of a series that fixes ambiguous attribute\nuses in .md files, i.e. cases in which attributes didn't use\n<ITER:ATTR> to specify an iterator, and in which <ATTR> could\nhave different values depending on the iterator chosen.\n\nI think this is a genuine bugfix for Thumb-1, since previously the\nLDREX width was taken from the SImode success result rather than the\nmemory mode:\n\n-#define HAVE_atomic_compare_and_swapt1qi_1 ((TARGET_HAVE_LDREX && TARGET_HAVE_MEMORY_BARRIER) && (TARGET_THUMB1))\n-#define HAVE_atomic_compare_and_swapt1hi_1 ((TARGET_HAVE_LDREX && TARGET_HAVE_MEMORY_BARRIER) && (TARGET_THUMB1))\n-#define HAVE_atomic_compare_and_swapt1di_1 ((TARGET_HAVE_LDREX && TARGET_HAVE_MEMORY_BARRIER) && (TARGET_THUMB1))\n+#define HAVE_atomic_compare_and_swapt1qi_1 ((TARGET_HAVE_LDREXBH && TARGET_HAVE_MEMORY_BARRIER) && (TARGET_THUMB1))\n+#define HAVE_atomic_compare_and_swapt1hi_1 ((TARGET_HAVE_LDREXBH && TARGET_HAVE_MEMORY_BARRIER) && (TARGET_THUMB1))\n+#define HAVE_atomic_compare_and_swapt1di_1 ((TARGET_HAVE_LDREXD && ARM_DOUBLEWORD_ALIGN \\\n+       && TARGET_HAVE_MEMORY_BARRIER) && (TARGET_THUMB1))\n\nThe same goes for the predicate and constraints in\n@atomic_compare_and_swapt1di_1, which previously used the\nSI values from the success result.\n\n2019-07-06  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/arm/sync.md\n\t(@atomic_compare_and_swap<CCSI:arch><NARROW:mode>_1): Use\n\t<NARROW:sync_predtab> instead of (implicitly) <CCSI:sync_predtab>.\n\t(@atomic_compare_and_swap<CCSI:arch><SIDI:mode>_1): Likewise\n\t<SIDI:sync_predtab>.  Use <SIDI:cas_cmp_operand> and\n\t<SIDI:cas_cmp_str>.\n\nFrom-SVN: r273158", "tree": {"sha": "29d451e2a37afdb7995871adbe927a69b01a7a49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29d451e2a37afdb7995871adbe927a69b01a7a49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/193bee751a607fac9d85e0ce8e6462fb5de1b515", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/193bee751a607fac9d85e0ce8e6462fb5de1b515", "html_url": "https://github.com/Rust-GCC/gccrs/commit/193bee751a607fac9d85e0ce8e6462fb5de1b515", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/193bee751a607fac9d85e0ce8e6462fb5de1b515/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1f52d1a8b52ace2922eb9b97e2c49d2ee7d27410", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f52d1a8b52ace2922eb9b97e2c49d2ee7d27410", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f52d1a8b52ace2922eb9b97e2c49d2ee7d27410"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "1ae6b1c6a46b6df29edad3a4bde40cb11123a815", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/193bee751a607fac9d85e0ce8e6462fb5de1b515/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/193bee751a607fac9d85e0ce8e6462fb5de1b515/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=193bee751a607fac9d85e0ce8e6462fb5de1b515", "patch": "@@ -1,3 +1,12 @@\n+2019-07-06  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/arm/sync.md\n+\t(@atomic_compare_and_swap<CCSI:arch><NARROW:mode>_1): Use\n+\t<NARROW:sync_predtab> instead of (implicitly) <CCSI:sync_predtab>.\n+\t(@atomic_compare_and_swap<CCSI:arch><SIDI:mode>_1): Likewise\n+\t<SIDI:sync_predtab>.  Use <SIDI:cas_cmp_operand> and\n+\t<SIDI:cas_cmp_str>.\n+\n 2019-07-06  Jakub Jelinek  <jakub@redhat.com>\n \n \t* omp-low.c (struct omp_context): Add for_simd_scan_phase member."}, {"sha": "ed857d608658b30bfef453de7f638d67b619e4b5", "filename": "gcc/config/arm/sync.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/193bee751a607fac9d85e0ce8e6462fb5de1b515/gcc%2Fconfig%2Farm%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/193bee751a607fac9d85e0ce8e6462fb5de1b515/gcc%2Fconfig%2Farm%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fsync.md?ref=193bee751a607fac9d85e0ce8e6462fb5de1b515", "patch": "@@ -201,7 +201,7 @@\n \t   (match_operand:SI 7 \"const_int_operand\")]\t\t;; mod_f\n \t  VUNSPEC_ATOMIC_CAS))\n    (clobber (match_scratch:SI 8 \"=&r,X,X,X\"))]\n-  \"<sync_predtab>\"\n+  \"<NARROW:sync_predtab>\"\n   \"#\"\n   \"&& reload_completed\"\n   [(const_int 0)]\n@@ -225,14 +225,14 @@\n \t(match_operand:SIDI 2 \"mem_noofs_operand\" \"+Ua,Ua,Ua,Ua\"))\t;; memory\n    (set (match_dup 2)\n \t(unspec_volatile:SIDI\n-\t  [(match_operand:SIDI 3 \"<cas_cmp_operand>\" \"<cas_cmp_str>,lIL*h,J,*r\") ;; expect\n+\t  [(match_operand:SIDI 3 \"<SIDI:cas_cmp_operand>\" \"<SIDI:cas_cmp_str>,lIL*h,J,*r\") ;; expect\n \t   (match_operand:SIDI 4 \"s_register_operand\" \"r,r,r,r\")\t;; desired\n \t   (match_operand:SI 5 \"const_int_operand\")\t\t;; is_weak\n \t   (match_operand:SI 6 \"const_int_operand\")\t\t;; mod_s\n \t   (match_operand:SI 7 \"const_int_operand\")]\t\t;; mod_f\n \t  VUNSPEC_ATOMIC_CAS))\n    (clobber (match_scratch:SI 8 \"=&r,X,X,X\"))]\n-  \"<sync_predtab>\"\n+  \"<SIDI:sync_predtab>\"\n   \"#\"\n   \"&& reload_completed\"\n   [(const_int 0)]"}]}