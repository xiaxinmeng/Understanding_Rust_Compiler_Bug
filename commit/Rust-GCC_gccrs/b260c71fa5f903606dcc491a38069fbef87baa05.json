{"sha": "b260c71fa5f903606dcc491a38069fbef87baa05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI2MGM3MWZhNWY5MDM2MDZkY2M0OTFhMzgwNjlmYmVmODdiYWEwNQ==", "commit": {"author": {"name": "Samuel Thibault", "email": "samuel.thibault@gnu.org", "date": "2012-11-04T22:56:02Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2012-11-04T22:56:02Z"}, "message": "configure.ac: Add stanza for *-*-gnu* threads configuration.\n\nboehm-gc/\n\t* configure.ac: Add stanza for *-*-gnu* threads configuration.\n\t* configure: Regenerate.\n\t* include/gc_config.h.in: Likewise.\n\t* dyn_load.c (_GNU_SOURCE): Define for __GNU__.\n\t* include/gc_config_macros.h (_REENTRANT, GC_PTHREADS): Define for\n\tGC_GNU_THREADS.\n\t* include/private/gcconfig.h (DATASTART): Don't define for I386 &&\n\tHURD.\n\t(SIG_SUSPEND, SIG_THR_RESTART, SEARCH_FOR_DATA_START): Define for\n\tI386 && HURD.\n\t(UNIX_LIKE, REGISTER_LIBRARIES_EARLY): Define for HURD.\n\t* os_dep.c (GC_init_linux_data_start): Handle for HURD.\n\t* pthread_support.c (GC_thr_init): Add case for GC_GNU_THREADS.\n\t* specific.c: Use for GC_GNU_THREADS.\n\t* threadlibs.c: Add case for GC_GNU_THREADS.\n\nFrom-SVN: r193142", "tree": {"sha": "f1e97c1b518d09ef7ac7436e0186e1b8c5cc7fa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1e97c1b518d09ef7ac7436e0186e1b8c5cc7fa8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b260c71fa5f903606dcc491a38069fbef87baa05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b260c71fa5f903606dcc491a38069fbef87baa05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b260c71fa5f903606dcc491a38069fbef87baa05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b260c71fa5f903606dcc491a38069fbef87baa05/comments", "author": {"login": "sthibaul", "id": 5405051, "node_id": "MDQ6VXNlcjU0MDUwNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/5405051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sthibaul", "html_url": "https://github.com/sthibaul", "followers_url": "https://api.github.com/users/sthibaul/followers", "following_url": "https://api.github.com/users/sthibaul/following{/other_user}", "gists_url": "https://api.github.com/users/sthibaul/gists{/gist_id}", "starred_url": "https://api.github.com/users/sthibaul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sthibaul/subscriptions", "organizations_url": "https://api.github.com/users/sthibaul/orgs", "repos_url": "https://api.github.com/users/sthibaul/repos", "events_url": "https://api.github.com/users/sthibaul/events{/privacy}", "received_events_url": "https://api.github.com/users/sthibaul/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6c46750c837935a8d0abc8eeabe77c3418b3dfe8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c46750c837935a8d0abc8eeabe77c3418b3dfe8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c46750c837935a8d0abc8eeabe77c3418b3dfe8"}], "stats": {"total": 66, "additions": 55, "deletions": 11}, "files": [{"sha": "7759258ab33238c65fabaf006671d30a108ed44f", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b260c71fa5f903606dcc491a38069fbef87baa05/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b260c71fa5f903606dcc491a38069fbef87baa05/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=b260c71fa5f903606dcc491a38069fbef87baa05", "patch": "@@ -1,3 +1,21 @@\n+2012-11-04  Samuel Thibault  <samuel.thibault@gnu.org>\n+\n+\t* configure.ac: Add stanza for *-*-gnu* threads configuration.\n+\t* configure: Regenerate.\n+\t* include/gc_config.h.in: Likewise.\n+\t* dyn_load.c (_GNU_SOURCE): Define for __GNU__.\n+\t* include/gc_config_macros.h (_REENTRANT, GC_PTHREADS): Define for\n+\tGC_GNU_THREADS.\n+\t* include/private/gcconfig.h (DATASTART): Don't define for I386 &&\n+\tHURD.\n+\t(SIG_SUSPEND, SIG_THR_RESTART, SEARCH_FOR_DATA_START): Define for\n+\tI386 && HURD.\n+\t(UNIX_LIKE, REGISTER_LIBRARIES_EARLY): Define for HURD.\n+\t* os_dep.c (GC_init_linux_data_start): Handle for HURD.\n+\t* pthread_support.c (GC_thr_init): Add case for GC_GNU_THREADS.\n+\t* specific.c: Use for GC_GNU_THREADS.\n+\t* threadlibs.c: Add case for GC_GNU_THREADS.\n+\n 2012-09-14  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* configure: Regenerated."}, {"sha": "6020e9884eb98c662dc349cb57066039d6e72352", "filename": "boehm-gc/configure", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b260c71fa5f903606dcc491a38069fbef87baa05/boehm-gc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b260c71fa5f903606dcc491a38069fbef87baa05/boehm-gc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fconfigure?ref=b260c71fa5f903606dcc491a38069fbef87baa05", "patch": "@@ -14796,6 +14796,15 @@ $as_echo \"$as_me: WARNING: \\\"Only HP-UX 11 POSIX threads are supported.\\\"\" >&2;}\n $as_echo \"#define USE_COMPILER_TLS 1\" >>confdefs.h\n \n        ;;\n+     *-*-gnu*)\n+\n+$as_echo \"#define GC_GNU_THREADS 1\" >>confdefs.h\n+\n+\t$as_echo \"#define _REENTRANT 1\" >>confdefs.h\n+\n+\t$as_echo \"#define THREAD_LOCAL_ALLOC 1\" >>confdefs.h\n+\n+\t;;\n      *-*-freebsd*)\n \t{ $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: \\\"FreeBSD does not yet fully support threads with Boehm GC.\\\"\" >&5\n $as_echo \"$as_me: WARNING: \\\"FreeBSD does not yet fully support threads with Boehm GC.\\\"\" >&2;}"}, {"sha": "1ccfe37e9d8622388d725a87bade72900b3b3b42", "filename": "boehm-gc/configure.ac", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b260c71fa5f903606dcc491a38069fbef87baa05/boehm-gc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b260c71fa5f903606dcc491a38069fbef87baa05/boehm-gc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fconfigure.ac?ref=b260c71fa5f903606dcc491a38069fbef87baa05", "patch": "@@ -175,6 +175,11 @@ case \"$THREADS\" in\n        AC_DEFINE(THREAD_LOCAL_ALLOC)\n        AC_DEFINE(USE_COMPILER_TLS, 1,[use tls for boehm])\n        ;;\n+     *-*-gnu*)\n+\tAC_DEFINE(GC_GNU_THREADS,1,[support GNU threads])\n+\tAC_DEFINE(_REENTRANT)\n+\tAC_DEFINE(THREAD_LOCAL_ALLOC)\n+\t;;\n      *-*-freebsd*)\n \tAC_MSG_WARN(\"FreeBSD does not yet fully support threads with Boehm GC.\")\n \tAC_DEFINE(GC_FREEBSD_THREADS,1,[support FreeBSD threads])"}, {"sha": "eac2e71673fbd07d033de23e8cd0dea96cc57bf2", "filename": "boehm-gc/dyn_load.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b260c71fa5f903606dcc491a38069fbef87baa05/boehm-gc%2Fdyn_load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b260c71fa5f903606dcc491a38069fbef87baa05/boehm-gc%2Fdyn_load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fdyn_load.c?ref=b260c71fa5f903606dcc491a38069fbef87baa05", "patch": "@@ -26,7 +26,8 @@\n  * None of this is safe with dlclose and incremental collection.\n  * But then not much of anything is safe in the presence of dlclose.\n  */\n-#if (defined(__linux__) || defined(__GLIBC__)) && !defined(_GNU_SOURCE)\n+#if (defined(__linux__) || defined(__GLIBC__) || defined(__GNU__)) \\\n+    && !defined(_GNU_SOURCE)\n     /* Can't test LINUX, since this must be define before other includes */\n #   define _GNU_SOURCE\n #endif"}, {"sha": "d1ae47d88f44197e688c57d097422c707b739c0d", "filename": "boehm-gc/include/gc_config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b260c71fa5f903606dcc491a38069fbef87baa05/boehm-gc%2Finclude%2Fgc_config.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b260c71fa5f903606dcc491a38069fbef87baa05/boehm-gc%2Finclude%2Fgc_config.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Finclude%2Fgc_config.h.in?ref=b260c71fa5f903606dcc491a38069fbef87baa05", "patch": "@@ -33,6 +33,9 @@\n /* include support for gcj */\n #undef GC_GCJ_SUPPORT\n \n+/* support GNU threads */\n+#undef GC_GNU_THREADS\n+\n /* enables support for HP/UX 11 pthreads */\n #undef GC_HPUX_THREADS\n "}, {"sha": "fd3006c178904d007d89c135476a18541dd298ec", "filename": "boehm-gc/include/gc_config_macros.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b260c71fa5f903606dcc491a38069fbef87baa05/boehm-gc%2Finclude%2Fgc_config_macros.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b260c71fa5f903606dcc491a38069fbef87baa05/boehm-gc%2Finclude%2Fgc_config_macros.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Finclude%2Fgc_config_macros.h?ref=b260c71fa5f903606dcc491a38069fbef87baa05", "patch": "@@ -6,7 +6,8 @@\n \t\t             || defined(GC_SOLARIS_PTHREADS) \\\n \t\t\t     || defined(GC_HPUX_THREADS) \\\n \t\t\t     || defined(GC_AIX_THREADS) \\\n-\t\t\t     || defined(GC_LINUX_THREADS))\n+\t\t\t     || defined(GC_LINUX_THREADS) \\\n+\t\t\t     || defined(GC_GNU_THREADS))\n # define _REENTRANT\n \t/* Better late than never.  This fails if system headers that\t*/\n \t/* depend on this were previously included.\t\t\t*/\n@@ -18,6 +19,7 @@\n \n # if defined(GC_SOLARIS_PTHREADS) || defined(GC_FREEBSD_THREADS) || \\\n \tdefined(GC_IRIX_THREADS) || defined(GC_LINUX_THREADS) || \\\n+\tdefined(GC_GNU_THREADS) || \\\n \tdefined(GC_HPUX_THREADS) || defined(GC_OSF1_THREADS) || \\\n \tdefined(GC_DGUX386_THREADS) || defined(GC_DARWIN_THREADS) || \\\n \tdefined(GC_AIX_THREADS) || \\"}, {"sha": "594ce431e029f4256a8c2f3cdd370c90759bf4b8", "filename": "boehm-gc/include/private/gcconfig.h", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b260c71fa5f903606dcc491a38069fbef87baa05/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b260c71fa5f903606dcc491a38069fbef87baa05/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h?ref=b260c71fa5f903606dcc491a38069fbef87baa05", "patch": "@@ -1316,8 +1316,9 @@\n #     define OS_TYPE \"HURD\"\n #     define STACK_GROWS_DOWN\n #     define HEURISTIC2\n-      extern int  __data_start[];\n-#     define DATASTART ( (ptr_t) (__data_start))\n+#     define SIG_SUSPEND SIGUSR1\n+#     define SIG_THR_RESTART SIGUSR2\n+#     define SEARCH_FOR_DATA_START\n       extern int   _end[];\n #     define DATAEND ( (ptr_t) (_end))\n /* #     define MPROTECT_VDB  Not quite working yet? */\n@@ -2169,7 +2170,8 @@\n # if defined(SVR4) || defined(LINUX) || defined(IRIX5) || defined(HPUX) \\\n \t    || defined(OPENBSD) || defined(NETBSD) || defined(FREEBSD) \\\n \t    || defined(DGUX) || defined(BSD) || defined(SUNOS4) \\\n-\t    || defined(_AIX) || defined(DARWIN) || defined(OSF1)\n+\t    || defined(_AIX) || defined(DARWIN) || defined(OSF1) \\\n+\t    || defined(HURD)\n #   define UNIX_LIKE   /* Basic Unix-like system calls work.\t*/\n # endif\n \n@@ -2225,7 +2227,7 @@\n #   define CACHE_LINE_SIZE 32\t/* Wild guess\t*/\n # endif\n \n-# if defined(LINUX) || defined(__GLIBC__)\n+# if defined(LINUX) || defined(HURD) || defined(__GLIBC__)\n #   define REGISTER_LIBRARIES_EARLY\n     /* We sometimes use dl_iterate_phdr, which may acquire an internal\t*/\n     /* lock.  This isn't safe after the world has stopped.  So we must\t*/\n@@ -2260,6 +2262,9 @@\n # if defined(GC_AIX_THREADS) && !defined(_AIX)\n \t--> inconsistent configuration\n # endif\n+# if defined(GC_GNU_THREADS) && !defined(HURD)\n+\t--> inconsistent configuration\n+# endif\n # if defined(GC_WIN32_THREADS) && !defined(MSWIN32) && !defined(CYGWIN32)\n \t--> inconsistent configuration\n # endif"}, {"sha": "a2dd3046dad171883cf693a1ed374ea5cfbfe2fd", "filename": "boehm-gc/os_dep.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b260c71fa5f903606dcc491a38069fbef87baa05/boehm-gc%2Fos_dep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b260c71fa5f903606dcc491a38069fbef87baa05/boehm-gc%2Fos_dep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fos_dep.c?ref=b260c71fa5f903606dcc491a38069fbef87baa05", "patch": "@@ -312,7 +312,7 @@ char *GC_parse_map_entry(char *buf_ptr, word *start, word *end,\n   /* for recent Linux versions.  This seems to be the easiest way to\t*/\n   /* cover all versions.\t\t\t\t\t\t*/\n \n-# ifdef LINUX\n+# if defined(LINUX) || defined(HURD)\n     /* Some Linux distributions arrange to define __data_start.  Some\t*/\n     /* define data_start as a weak symbol.  The latter is technically\t*/\n     /* broken, since the user program may define data_start, in which\t*/\n@@ -331,7 +331,7 @@ char *GC_parse_map_entry(char *buf_ptr, word *start, word *end,\n   {\n     extern ptr_t GC_find_limit();\n \n-#   ifdef LINUX\n+#   if defined(LINUX) || defined(HURD)\n       /* Try the easy approaches first:\t*/\n       if ((ptr_t)__data_start != 0) {\n \t  GC_data_start = (ptr_t)(__data_start);"}, {"sha": "6d8f020e076c13af730e219dd18f93bbf67d8628", "filename": "boehm-gc/pthread_support.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b260c71fa5f903606dcc491a38069fbef87baa05/boehm-gc%2Fpthread_support.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b260c71fa5f903606dcc491a38069fbef87baa05/boehm-gc%2Fpthread_support.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fpthread_support.c?ref=b260c71fa5f903606dcc491a38069fbef87baa05", "patch": "@@ -884,7 +884,7 @@ void GC_thr_init()\n \t  GC_nprocs = pthread_num_processors_np();\n #       endif\n #\tif defined(GC_OSF1_THREADS) || defined(GC_AIX_THREADS) \\\n-\t   || defined(GC_SOLARIS_PTHREADS)\n+\t   || defined(GC_SOLARIS_PTHREADS) || defined(GC_GNU_THREADS)\n \t  GC_nprocs = sysconf(_SC_NPROCESSORS_ONLN);\n \t  if (GC_nprocs <= 0) GC_nprocs = 1;\n #\tendif"}, {"sha": "e78cf7ac912ac3b707898d11d315d175f4fcade3", "filename": "boehm-gc/specific.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b260c71fa5f903606dcc491a38069fbef87baa05/boehm-gc%2Fspecific.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b260c71fa5f903606dcc491a38069fbef87baa05/boehm-gc%2Fspecific.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fspecific.c?ref=b260c71fa5f903606dcc491a38069fbef87baa05", "patch": "@@ -13,7 +13,7 @@\n \n #include \"private/gc_priv.h\" /* For GC_compare_and_exchange, GC_memory_barrier */\n \n-#if defined(GC_LINUX_THREADS)\n+#if defined(GC_LINUX_THREADS) || defined(GC_GNU_THREADS)\n \n #include \"private/specific.h\"\n "}, {"sha": "69fcc5e90ab588eed22913b99f6b5891337d20a9", "filename": "boehm-gc/threadlibs.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b260c71fa5f903606dcc491a38069fbef87baa05/boehm-gc%2Fthreadlibs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b260c71fa5f903606dcc491a38069fbef87baa05/boehm-gc%2Fthreadlibs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fthreadlibs.c?ref=b260c71fa5f903606dcc491a38069fbef87baa05", "patch": "@@ -12,7 +12,8 @@ int main()\n #   endif\n #   if defined(GC_LINUX_THREADS) || defined(GC_IRIX_THREADS) \\\n \t|| defined(GC_SOLARIS_PTHREADS) \\\n-\t|| defined(GC_DARWIN_THREADS) || defined(GC_AIX_THREADS)\n+\t|| defined(GC_DARWIN_THREADS) || defined(GC_AIX_THREADS) \\\n+\t|| defined(GC_GNU_THREADS)\n         printf(\"-lpthread\\n\");\n #   endif\n #   if defined(GC_FREEBSD_THREADS)"}]}