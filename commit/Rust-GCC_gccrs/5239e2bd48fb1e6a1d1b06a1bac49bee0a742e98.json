{"sha": "5239e2bd48fb1e6a1d1b06a1bac49bee0a742e98", "node_id": "C_kwDOANBUbNoAKDUyMzllMmJkNDhmYjFlNmExZDFiMDZhMWJhYzQ5YmVlMGE3NDJlOTg", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2022-08-16T05:18:51Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2022-08-16T05:19:38Z"}, "message": "vect: Don't allow vect_emulated_vector_p type in vectorizable_call [PR106322]\n\nAs PR106322 shows, in some cases for some vector type whose\nTYPE_MODE is a scalar integral mode instead of a vector mode,\nit's possible to obtain wrong target support information when\nquerying with the scalar integral mode.  For example, for the\ntest case in PR106322, on ppc64 32bit vectorizer gets vector\ntype \"vector(2) short unsigned int\" for scalar type \"short\nunsigned int\", its mode is SImode instead of V2HImode.  The\ntarget support querying checks umul_highpart optab with SImode\nand considers it's supported, then vectorizer further generates\n.MULH IFN call for that vector type.  Unfortunately it's wrong\nto use SImode support for that vector type multiply highpart\nhere.\n\nThis patch is to teach vectorizable_call analysis not to allow\nvect_emulated_vector_p type for both vectype_in and vectype_out\nas Richi suggested.\n\n\tPR tree-optimization/106322\n\ngcc/ChangeLog:\n\n\t* tree-vect-stmts.cc (vectorizable_call): Don't allow\n\tvect_emulated_vector_p type for both vectype_in and vectype_out.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr106322.c: New test.\n\t* gcc.target/powerpc/pr106322.c: New test.", "tree": {"sha": "16683c59b23c4afdd6ccc3b93f421b69779e830a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16683c59b23c4afdd6ccc3b93f421b69779e830a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5239e2bd48fb1e6a1d1b06a1bac49bee0a742e98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5239e2bd48fb1e6a1d1b06a1bac49bee0a742e98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5239e2bd48fb1e6a1d1b06a1bac49bee0a742e98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5239e2bd48fb1e6a1d1b06a1bac49bee0a742e98/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2ff389099c325bc1244b1d72744a18c5fa6fda3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2ff389099c325bc1244b1d72744a18c5fa6fda3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2ff389099c325bc1244b1d72744a18c5fa6fda3"}], "stats": {"total": 109, "additions": 109, "deletions": 0}, "files": [{"sha": "31333c5fdccbe02ce7cf5055ce852edc0da1af67", "filename": "gcc/testsuite/gcc.target/i386/pr106322.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5239e2bd48fb1e6a1d1b06a1bac49bee0a742e98/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106322.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5239e2bd48fb1e6a1d1b06a1bac49bee0a742e98/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106322.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106322.c?ref=5239e2bd48fb1e6a1d1b06a1bac49bee0a742e98", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target ia32 } */\n+/* { dg-options \"-O2 -mtune=generic -march=i686\" } */\n+\n+/* As PR106322, verify this can execute well (not abort).  */\n+\n+#define N 64\n+typedef unsigned short int uh;\n+typedef unsigned short int uw;\n+uh a[N];\n+uh b[N];\n+uh c[N];\n+uh e[N];\n+\n+__attribute__ ((noipa)) void\n+foo ()\n+{\n+  for (int i = 0; i < N; i++)\n+    c[i] = ((uw) b[i] * (uw) a[i]) >> 16;\n+}\n+\n+__attribute__ ((optimize (\"-O0\"))) void\n+init ()\n+{\n+  for (int i = 0; i < N; i++)\n+    {\n+      a[i] = (uh) (0x7ABC - 0x5 * i);\n+      b[i] = (uh) (0xEAB + 0xF * i);\n+      e[i] = ((uw) b[i] * (uw) a[i]) >> 16;\n+    }\n+}\n+\n+__attribute__ ((optimize (\"-O0\"))) void\n+check ()\n+{\n+  for (int i = 0; i < N; i++)\n+    {\n+      if (c[i] != e[i])\n+\t__builtin_abort ();\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  init ();\n+  foo ();\n+  check ();\n+\n+  return 0;\n+}"}, {"sha": "c05072d34162b9290822b2f748cb7b66c6179dd4", "filename": "gcc/testsuite/gcc.target/powerpc/pr106322.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5239e2bd48fb1e6a1d1b06a1bac49bee0a742e98/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106322.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5239e2bd48fb1e6a1d1b06a1bac49bee0a742e98/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106322.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106322.c?ref=5239e2bd48fb1e6a1d1b06a1bac49bee0a742e98", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power4\" } */\n+\n+/* As PR106322, verify this can execute well (not abort).  */\n+\n+#define N 64\n+typedef unsigned short int uh;\n+typedef unsigned short int uw;\n+uh a[N];\n+uh b[N];\n+uh c[N];\n+uh e[N];\n+\n+__attribute__ ((noipa)) void\n+foo ()\n+{\n+  for (int i = 0; i < N; i++)\n+    c[i] = ((uw) b[i] * (uw) a[i]) >> 16;\n+}\n+\n+__attribute__ ((optimize (\"-O0\"))) void\n+init ()\n+{\n+  for (int i = 0; i < N; i++)\n+    {\n+      a[i] = (uh) (0x7ABC - 0x5 * i);\n+      b[i] = (uh) (0xEAB + 0xF * i);\n+      e[i] = ((uw) b[i] * (uw) a[i]) >> 16;\n+    }\n+}\n+\n+__attribute__ ((optimize (\"-O0\"))) void\n+check ()\n+{\n+  for (int i = 0; i < N; i++)\n+    {\n+      if (c[i] != e[i])\n+\t__builtin_abort ();\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  init ();\n+  foo ();\n+  check ();\n+\n+  return 0;\n+}"}, {"sha": "c9dab217f059f17e91e9a7582523e627d7a45b66", "filename": "gcc/tree-vect-stmts.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5239e2bd48fb1e6a1d1b06a1bac49bee0a742e98/gcc%2Ftree-vect-stmts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5239e2bd48fb1e6a1d1b06a1bac49bee0a742e98/gcc%2Ftree-vect-stmts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.cc?ref=5239e2bd48fb1e6a1d1b06a1bac49bee0a742e98", "patch": "@@ -3423,6 +3423,14 @@ vectorizable_call (vec_info *vinfo,\n       return false;\n     }\n \n+  if (vect_emulated_vector_p (vectype_in) || vect_emulated_vector_p (vectype_out))\n+  {\n+      if (dump_enabled_p ())\n+\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t \"use emulated vector type for call\\n\");\n+      return false;\n+  }\n+\n   /* FORNOW */\n   nunits_in = TYPE_VECTOR_SUBPARTS (vectype_in);\n   nunits_out = TYPE_VECTOR_SUBPARTS (vectype_out);"}]}