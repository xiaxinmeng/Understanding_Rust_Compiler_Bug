{"sha": "e7cbef19ae6a2507e33056ba9fbbc6e8a7683e72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdjYmVmMTlhZTZhMjUwN2UzMzA1NmJhOWZiYmM2ZThhNzY4M2U3Mg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2004-03-06T17:55:13Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2004-03-06T17:55:13Z"}, "message": "builtin-explog-1.c: Add comments for each test.\n\n\t* gcc.dg/torture/builtin-explog-1.c: Add comments for each test.\n\tRename LOGPOW -> LOG_POW.\n\t(SQRT_EXP, POW_EXP): New.\n\nFrom-SVN: r79024", "tree": {"sha": "418c57fe783f0526bedafdaeb7e8edfe4c816138", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/418c57fe783f0526bedafdaeb7e8edfe4c816138"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7cbef19ae6a2507e33056ba9fbbc6e8a7683e72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7cbef19ae6a2507e33056ba9fbbc6e8a7683e72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7cbef19ae6a2507e33056ba9fbbc6e8a7683e72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7cbef19ae6a2507e33056ba9fbbc6e8a7683e72/comments", "author": null, "committer": null, "parents": [{"sha": "82b4201fd50bcfed39fe109308b5639ca97eb45f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82b4201fd50bcfed39fe109308b5639ca97eb45f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82b4201fd50bcfed39fe109308b5639ca97eb45f"}], "stats": {"total": 50, "additions": 46, "deletions": 4}, "files": [{"sha": "c8346098d719ac694f143f6918e5a2ce7fff08cc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7cbef19ae6a2507e33056ba9fbbc6e8a7683e72/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7cbef19ae6a2507e33056ba9fbbc6e8a7683e72/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e7cbef19ae6a2507e33056ba9fbbc6e8a7683e72", "patch": "@@ -1,3 +1,9 @@\n+2004-03-06  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/torture/builtin-explog-1.c: Add comments for each test.\n+\tRename LOGPOW -> LOG_POW.\n+\t(SQRT_EXP, POW_EXP): New.\n+\n 2004-03-06  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* gcc.dg/i386-sse-8.c: New test."}, {"sha": "59ba1d095c8c5af61d919999d05fe5366a654be3", "filename": "gcc/testsuite/gcc.dg/torture/builtin-explog-1.c", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7cbef19ae6a2507e33056ba9fbbc6e8a7683e72/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-explog-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7cbef19ae6a2507e33056ba9fbbc6e8a7683e72/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-explog-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-explog-1.c?ref=e7cbef19ae6a2507e33056ba9fbbc6e8a7683e72", "patch": "@@ -37,6 +37,7 @@ PROTOTYPE2(pow)\n void test(double d1, double d2, float f1, float f2,\n \t  long double ld1, long double ld2)\n {\n+  /* Test logN(1) -> 0.  */\n #define LOG_1(LOG) \\\n  extern void link_failure_##LOG##_1(void); \\\n  if (LOG(1.0) != 0.0 || LOG##f(1.0F) != 0.0F || LOG##l(1.0L) != 0.0L) \\\n@@ -46,6 +47,7 @@ void test(double d1, double d2, float f1, float f2,\n   LOG_1(log2);\n   LOG_1(log10);\n   \n+  /* Test logN(N) -> 1.  */\n #define LOG_N(LOG, BASE) \\\n  extern void link_failure_##LOG##_N(void); \\\n  if (LOG(BASE) != 1.0 || LOG##f(BASE##F) != 1.0F || LOG##l(BASE##L) != 1.0L) \\\n@@ -55,6 +57,7 @@ void test(double d1, double d2, float f1, float f2,\n   LOG_N(log2, 2.0);\n   LOG_N(log10, 10.0);\n \n+  /* Test logN(expN(x)) -> x.  */\n #define LOGEXP_SAME(LOG, EXP) \\\n  extern void link_failure_##LOG##_##EXP##_same(void); \\\n  if (LOG(EXP(d1)) != d1 || LOG##f(EXP##f(f1)) != f1 \\\n@@ -65,6 +68,7 @@ void test(double d1, double d2, float f1, float f2,\n   LOGEXP_SAME(log10,exp10);\n   LOGEXP_SAME(log10,pow10);\n \n+  /* Test logN(expM(x)) -> x*logN(M).  */\n #define LOGEXP(LOG, EXP, BASE) \\\n  extern void link_failure_##LOG##_##EXP(void); \\\n  if (LOG(EXP(d1)) != d1*LOG(BASE) || LOG##f(EXP##f(f1)) != f1*LOG##f(BASE##F) \\\n@@ -83,6 +87,7 @@ void test(double d1, double d2, float f1, float f2,\n   LOGEXP(log10,exp10,10.0);\n   LOGEXP(log10,pow10,10.0);\n   \n+  /* Test logN(sqrt(x)) -> 0.5*logN(x).  */\n #define LOG_SQRT(LOG) \\\n  extern void link_failure_##LOG##_sqrt(void); \\\n  if (LOG(sqrt(d1)) != 0.5*LOG(d1) || LOG##f(sqrtf(f1)) != 0.5F*LOG##f(f1) \\\n@@ -92,6 +97,18 @@ void test(double d1, double d2, float f1, float f2,\n   LOG_SQRT(log2);\n   LOG_SQRT(log10);\n   \n+  /* Test sqrt(expN(x)) -> expN(x*0.5).  */\n+#define SQRT_EXP(EXP) \\\n+ extern void link_failure_sqrt_##EXP(void); \\\n+ if (sqrt(EXP(d1)) != EXP(d1*0.5) || sqrtf(EXP##f(f1)) != EXP##f(f1*0.5F) \\\n+  || sqrtl(EXP##l(ld1)) != EXP##l(ld1*0.5L)) link_failure_sqrt_##EXP()\n+    \n+  SQRT_EXP(exp);\n+  SQRT_EXP(exp2);\n+  SQRT_EXP(exp10);\n+  SQRT_EXP(pow10);\n+  \n+  /* Test logN(cbrt(x)) -> (1/3)*logN(x).  */\n #define LOG_CBRT(LOG) \\\n  extern void link_failure_##LOG##_cbrt(void); \\\n  if (LOG(cbrt(d1)) != (1.0/3)*LOG(d1) \\\n@@ -102,15 +119,28 @@ void test(double d1, double d2, float f1, float f2,\n   LOG_CBRT(log2);\n   LOG_CBRT(log10);\n   \n-#define LOGPOW(LOG, POW) \\\n+  /* Test logN(pow(x,y)) -> y*logN(x).  */\n+#define LOG_POW(LOG, POW) \\\n  extern void link_failure_##LOG##_##POW(void); \\\n  if (LOG(POW(d1,d2)) != d2*LOG(d1) || LOG##f(POW##f(f1,f2)) != f2*LOG##f(f1) \\\n   || LOG##l(POW##l(ld1,ld2)) != ld2*LOG##l(ld1)) link_failure_##LOG##_##POW()\n   \n-  LOGPOW(log,pow);\n-  LOGPOW(log2,pow);\n-  LOGPOW(log10,pow);\n+  LOG_POW(log,pow);\n+  LOG_POW(log2,pow);\n+  LOG_POW(log10,pow);\n+\n+  /* Test pow(expN(x),y)) -> expN(x*y).  */\n+#define POW_EXP(POW, EXP) \\\n+ extern void link_failure_##POW##_##EXP(void); \\\n+ if (POW(EXP(d1),d2) != EXP(d1*d2) || POW##f(EXP##f(f1),f2) != EXP##f(f1*f2) \\\n+  || POW##l(EXP##l(ld1),ld2) != EXP##l(ld1*ld2)) link_failure_##POW##_##EXP()\n+  \n+  POW_EXP(pow, exp);\n+  POW_EXP(pow, exp2);\n+  POW_EXP(pow, exp10);\n+  POW_EXP(pow, pow10);\n \n+  /* Test expN(0) -> 1.  */\n #define EXP_0(EXP) \\\n  extern void link_failure_##EXP##_0(void); \\\n  if (EXP(0.0) != 1.0 || EXP##f(0.0F) != 1.0F || EXP##l(0.0L) != 1.0L) \\\n@@ -121,6 +151,7 @@ void test(double d1, double d2, float f1, float f2,\n   EXP_0(exp10);\n   EXP_0(pow10);\n   \n+  /* Test expN(1) -> N.  */\n #define EXP_N(EXP, BASE) \\\n  extern void link_failure_##EXP##_N(void); \\\n  if (EXP(1.0) != BASE || EXP##f(1.0F) != BASE##F || EXP##l(1.0L) != BASE##L) \\\n@@ -131,6 +162,7 @@ void test(double d1, double d2, float f1, float f2,\n   EXP_N(exp10, 10.0);\n   EXP_N(pow10, 10.0);\n \n+  /* Test expN(integer) -> N*N*N*...  */\n #define EXP_INT(EXP, BASE) \\\n  extern void link_failure_##EXP##_INT(void); \\\n  if (EXP(5.0) < (BASE)*(BASE)*(BASE)*(BASE)*(BASE) - PREC \\\n@@ -146,6 +178,7 @@ void test(double d1, double d2, float f1, float f2,\n   EXP_INT(exp10, 10.0);\n   EXP_INT(pow10, 10.0);\n \n+  /* Test expN(logN(x)) -> x.  */\n #define EXPLOG_SAME(EXP, LOG) \\\n  extern void link_failure_##EXP##_##LOG##_same(void); \\\n  if (EXP(LOG(d1)) != d1 || EXP##f(LOG##f(f1)) != f1 \\\n@@ -156,6 +189,7 @@ void test(double d1, double d2, float f1, float f2,\n   EXPLOG_SAME(exp10, log10);\n   EXPLOG_SAME(pow10, log10);\n \n+  /* Test expN(x)*expN(y)) -> expN(x+y).  */\n #define EXPXEXP(EXP) \\\n  extern void link_failure_##EXP##X##EXP(void); \\\n  if (EXP(d1)*EXP(d2) != EXP(d1+d2) || EXP##f(f1)*EXP##f(f2) != EXP##f(f1+f2) \\\n@@ -166,6 +200,8 @@ void test(double d1, double d2, float f1, float f2,\n   EXPXEXP(exp10);\n   EXPXEXP(pow10);\n \n+  /* Test x/expN(y) -> x*expN(-y).  */\n+  /* Test expN(x)/expN(y) -> expN(x-y).  */\n #define DIVEXP(EXP) \\\n  extern void link_failure_div1_##EXP(void); \\\n  if (d1/EXP(d2) != d1*EXP(-d2) || f1/EXP##f(f2) != f1*EXP##f(-f2) \\"}]}