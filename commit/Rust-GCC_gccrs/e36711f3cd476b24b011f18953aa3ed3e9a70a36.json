{"sha": "e36711f3cd476b24b011f18953aa3ed3e9a70a36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM2NzExZjNjZDQ3NmIyNGIwMTFmMTg5NTNhYTNlZDNlOWE3MGEzNg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-06-23T18:17:57Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-06-23T18:17:57Z"}, "message": "re PR tree-optimization/16876 (ICE on testcase with -O3 in fold-const)\n\n2007-06-23  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/16876\n\tPR middle-end/29478\n\t* tree.h (CALL_CANNOT_INLINE_P): New macro to access static_flag\n\tfor CALL_EXPRs.\n\t* tree-inline.c (initialize_inlined_parameters): Do not call\n\tlang_hooks.tree_inlining.convert_parm_for_inlining.\n\t* cgraphbuild.c (initialize_inline_failed): Set inline failed\n\treason for mismatched types.\n\t* gimplify.c (gimplify_call_expr): Verify the call expression\n\targuments match the called function type signature.  Otherwise\n\tmark the call expression to be not considered for inlining\n\tusing CALL_CANNOT_INLINE_P flag.\n\t* ipa-inline.c (cgraph_mark_inline): Honor CALL_CANNOT_INLINE_P on the\n\tedges call expression.\n\t(cgraph_decide_inlining_of_small_function): Likewise.\n\t(cgraph_decide_inlining): Likewise.\n\t* c-objc-common.h (LANG_HOOKS_TREE_INLINING_CONVERT_PARM_FOR_INLINING):\n\tRemove define.\n\t* c-tree.h (c_convert_parm_for_inlining): Remove declaration.\n\t* c-typeck.c (c_convert_parm_for_inlining): Remove.\n\t* langhooks-def.h (lhd_tree_inlining_convert_parm_for_inlining):\n\tRemove declaration.\n\t(LANG_HOOKS_TREE_INLINING_CONVERT_PARM_FOR_INLINING): Remove define.\n\t* langhooks.c (lhd_tree_inlining_convert_parm_for_inlining):\n\tRemove.\n\t* langhooks.h (struct lang_hooks_for_tree_inlining): Remove\n\tconvert_parm_for_inlining member.\n\n\t* gcc.dg/pr29254.c: The warning is bogus.\n\t* gcc.dg/warn-1.c: Likewise.\n\t* gcc.dg/assign-warn-3.c: Likewise.\n\t* gcc.dg/noncompile/pr16876.c: The testcase is bogus, remove.\n\nFrom-SVN: r125974", "tree": {"sha": "46f2dd58d57c762a067b534222a23a553e776f4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46f2dd58d57c762a067b534222a23a553e776f4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e36711f3cd476b24b011f18953aa3ed3e9a70a36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e36711f3cd476b24b011f18953aa3ed3e9a70a36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e36711f3cd476b24b011f18953aa3ed3e9a70a36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e36711f3cd476b24b011f18953aa3ed3e9a70a36/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "630ef467a860ff6db6bba710fd46700f4f363496", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/630ef467a860ff6db6bba710fd46700f4f363496", "html_url": "https://github.com/Rust-GCC/gccrs/commit/630ef467a860ff6db6bba710fd46700f4f363496"}], "stats": {"total": 193, "additions": 101, "deletions": 92}, "files": [{"sha": "6756a73fc78230a64974092f66d27571c9828e46", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e36711f3cd476b24b011f18953aa3ed3e9a70a36/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e36711f3cd476b24b011f18953aa3ed3e9a70a36/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e36711f3cd476b24b011f18953aa3ed3e9a70a36", "patch": "@@ -1,3 +1,33 @@\n+2007-06-23  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/16876\n+\tPR middle-end/29478\n+\t* tree.h (CALL_CANNOT_INLINE_P): New macro to access static_flag\n+\tfor CALL_EXPRs.\n+\t* tree-inline.c (initialize_inlined_parameters): Do not call\n+\tlang_hooks.tree_inlining.convert_parm_for_inlining.\n+\t* cgraphbuild.c (initialize_inline_failed): Set inline failed\n+\treason for mismatched types.\n+\t* gimplify.c (gimplify_call_expr): Verify the call expression\n+\targuments match the called function type signature.  Otherwise\n+\tmark the call expression to be not considered for inlining\n+\tusing CALL_CANNOT_INLINE_P flag.\n+\t* ipa-inline.c (cgraph_mark_inline): Honor CALL_CANNOT_INLINE_P on the\n+\tedges call expression.\n+\t(cgraph_decide_inlining_of_small_function): Likewise.\n+\t(cgraph_decide_inlining): Likewise.\n+\t* c-objc-common.h (LANG_HOOKS_TREE_INLINING_CONVERT_PARM_FOR_INLINING):\n+\tRemove define.\n+\t* c-tree.h (c_convert_parm_for_inlining): Remove declaration.\n+\t* c-typeck.c (c_convert_parm_for_inlining): Remove.\n+\t* langhooks-def.h (lhd_tree_inlining_convert_parm_for_inlining):\n+\tRemove declaration.\n+\t(LANG_HOOKS_TREE_INLINING_CONVERT_PARM_FOR_INLINING): Remove define.\n+\t* langhooks.c (lhd_tree_inlining_convert_parm_for_inlining):\n+\tRemove.\n+\t* langhooks.h (struct lang_hooks_for_tree_inlining): Remove\n+\tconvert_parm_for_inlining member.\n+\n 2007-06-23  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR target/31152"}, {"sha": "171e702e59d3064ef5e2910a545b5063b137d082", "filename": "gcc/c-objc-common.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e36711f3cd476b24b011f18953aa3ed3e9a70a36/gcc%2Fc-objc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e36711f3cd476b24b011f18953aa3ed3e9a70a36/gcc%2Fc-objc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.h?ref=e36711f3cd476b24b011f18953aa3ed3e9a70a36", "patch": "@@ -89,9 +89,6 @@ extern void c_initialize_diagnostics (diagnostic_context *);\n #undef LANG_HOOKS_TREE_INLINING_DISREGARD_INLINE_LIMITS\n #define LANG_HOOKS_TREE_INLINING_DISREGARD_INLINE_LIMITS \\\n   c_disregard_inline_limits\n-#undef LANG_HOOKS_TREE_INLINING_CONVERT_PARM_FOR_INLINING\n-#define LANG_HOOKS_TREE_INLINING_CONVERT_PARM_FOR_INLINING \\\n-  c_convert_parm_for_inlining\n #undef LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN\n #define LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN c_dump_tree\n "}, {"sha": "3bc98507eaf4927e479b257352ae506043bbb9e6", "filename": "gcc/c-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e36711f3cd476b24b011f18953aa3ed3e9a70a36/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e36711f3cd476b24b011f18953aa3ed3e9a70a36/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=e36711f3cd476b24b011f18953aa3ed3e9a70a36", "patch": "@@ -577,7 +577,6 @@ extern tree c_start_case (tree);\n extern void c_finish_case (tree);\n extern tree build_asm_expr (tree, tree, tree, tree, bool);\n extern tree build_asm_stmt (tree, tree);\n-extern tree c_convert_parm_for_inlining (tree, tree, tree, int);\n extern int c_types_compatible_p (tree, tree);\n extern tree c_begin_compound_stmt (bool);\n extern tree c_end_compound_stmt (tree, bool);"}, {"sha": "2a19f0875fb571b11048217b0b3bd344796fc924", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e36711f3cd476b24b011f18953aa3ed3e9a70a36/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e36711f3cd476b24b011f18953aa3ed3e9a70a36/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=e36711f3cd476b24b011f18953aa3ed3e9a70a36", "patch": "@@ -4247,37 +4247,6 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n \n   return error_mark_node;\n }\n-\n-/* Convert VALUE for assignment into inlined parameter PARM.  ARGNUM\n-   is used for error and warning reporting and indicates which argument\n-   is being processed.  */\n-\n-tree\n-c_convert_parm_for_inlining (tree parm, tree value, tree fn, int argnum)\n-{\n-  tree ret, type;\n-\n-  /* If FN was prototyped at the call site, the value has been converted\n-     already in convert_arguments.\n-     However, we might see a prototype now that was not in place when\n-     the function call was seen, so check that the VALUE actually matches\n-     PARM before taking an early exit.  */\n-  if (!value\n-      || (TYPE_ARG_TYPES (TREE_TYPE (fn))\n-\t  && (TYPE_MAIN_VARIANT (TREE_TYPE (parm))\n-\t      == TYPE_MAIN_VARIANT (TREE_TYPE (value)))))\n-    return value;\n-\n-  type = TREE_TYPE (parm);\n-  ret = convert_for_assignment (type, value,\n-\t\t\t\tic_argpass_nonproto, fn,\n-\t\t\t\tfn, argnum);\n-  if (targetm.calls.promote_prototypes (TREE_TYPE (fn))\n-      && INTEGRAL_TYPE_P (type)\n-      && (TYPE_PRECISION (type) < TYPE_PRECISION (integer_type_node)))\n-    ret = default_conversion (ret);\n-  return ret;\n-}\n \f\n /* If VALUE is a compound expr all of whose expressions are constant, then\n    return its value.  Otherwise, return error_mark_node."}, {"sha": "dbd8b48978beae3831ce2c063a37d7c003dbf708", "filename": "gcc/cgraphbuild.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e36711f3cd476b24b011f18953aa3ed3e9a70a36/gcc%2Fcgraphbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e36711f3cd476b24b011f18953aa3ed3e9a70a36/gcc%2Fcgraphbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphbuild.c?ref=e36711f3cd476b24b011f18953aa3ed3e9a70a36", "patch": "@@ -99,6 +99,8 @@ initialize_inline_failed (struct cgraph_node *node)\n \t\t\t   \"considered for inlining\");\n       else if (!node->local.inlinable)\n \te->inline_failed = N_(\"function not inlinable\");\n+      else if (CALL_CANNOT_INLINE_P (e->call_stmt))\n+\te->inline_failed = N_(\"mismatched arguments\");\n       else\n \te->inline_failed = N_(\"function not considered for inlining\");\n     }"}, {"sha": "7f5615e344d898e144dfc44df6c48a2d093cf433", "filename": "gcc/gimplify.c", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e36711f3cd476b24b011f18953aa3ed3e9a70a36/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e36711f3cd476b24b011f18953aa3ed3e9a70a36/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=e36711f3cd476b24b011f18953aa3ed3e9a70a36", "patch": "@@ -2058,7 +2058,7 @@ gimplify_arg (tree *expr_p, tree *pre_p)\n static enum gimplify_status\n gimplify_call_expr (tree *expr_p, tree *pre_p, bool want_value)\n {\n-  tree decl;\n+  tree decl, parms, p;\n   enum gimplify_status ret;\n   int i, nargs;\n \n@@ -2124,6 +2124,48 @@ gimplify_call_expr (tree *expr_p, tree *pre_p, bool want_value)\n \n   nargs = call_expr_nargs (*expr_p);\n \n+  /* Get argument types for verification.  */\n+  decl = get_callee_fndecl (*expr_p);\n+  parms = NULL_TREE;\n+  if (decl)\n+    parms = TYPE_ARG_TYPES (TREE_TYPE (decl));\n+  else if (POINTER_TYPE_P (TREE_TYPE (CALL_EXPR_FN (*expr_p))))\n+    parms = TYPE_ARG_TYPES (TREE_TYPE (TREE_TYPE (CALL_EXPR_FN (*expr_p))));\n+\n+  /* Verify if the type of the argument matches that of the function\n+     declaration.  If we cannot verify this or there is a mismatch,\n+     mark the call expression so it doesn't get inlined later.  */\n+  if (parms)\n+    {\n+      for (i = 0, p = parms; i < nargs; i++, p = TREE_CHAIN (p))\n+\tif (!p\n+\t    || TREE_VALUE (p) == error_mark_node\n+\t    || CALL_EXPR_ARG (*expr_p, i) == error_mark_node\n+\t    || !lang_hooks.types_compatible_p\n+\t\t (TREE_TYPE (CALL_EXPR_ARG (*expr_p, i)), TREE_VALUE (p)))\n+\t  {\n+\t    CALL_CANNOT_INLINE_P (*expr_p) = 1;\n+\t    break;\n+\t  }\n+    }\n+  else if (decl && DECL_ARGUMENTS (decl))\n+    {\n+      for (i = 0, p = DECL_ARGUMENTS (decl); i < nargs;\n+\t   i++, p = TREE_CHAIN (p))\n+\tif (!p\n+\t    || p == error_mark_node\n+\t    || CALL_EXPR_ARG (*expr_p, i) == error_mark_node\n+\t    || !lang_hooks.types_compatible_p\n+\t\t (TREE_TYPE (CALL_EXPR_ARG (*expr_p, i)), TREE_TYPE (p)))\n+\t  {\n+\t    CALL_CANNOT_INLINE_P (*expr_p) = 1;\n+\t    break;\n+\t  }\n+    }\n+  else if (nargs != 0)\n+    CALL_CANNOT_INLINE_P (*expr_p) = 1;\n+\n+  /* Finally, gimplify the function arguments.  */\n   for (i = (PUSH_ARGS_REVERSED ? nargs - 1 : 0);\n        PUSH_ARGS_REVERSED ? i >= 0 : i < nargs;\n        PUSH_ARGS_REVERSED ? i-- : i++)"}, {"sha": "c682f86866f39ce274a05c7985c0e66ec41eebc4", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e36711f3cd476b24b011f18953aa3ed3e9a70a36/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e36711f3cd476b24b011f18953aa3ed3e9a70a36/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=e36711f3cd476b24b011f18953aa3ed3e9a70a36", "patch": "@@ -288,22 +288,21 @@ cgraph_mark_inline (struct cgraph_edge *edge)\n   struct cgraph_node *to = edge->caller;\n   struct cgraph_node *what = edge->callee;\n   struct cgraph_edge *e, *next;\n-  int times = 0;\n \n   /* Look for all calls, mark them inline and clone recursively\n      all inlined functions.  */\n   for (e = what->callers; e; e = next)\n     {\n       next = e->next_caller;\n-      if (e->caller == to && e->inline_failed)\n+      if (e->caller == to && e->inline_failed\n+\t  && !CALL_CANNOT_INLINE_P (e->call_stmt))\n \t{\n           cgraph_mark_inline_edge (e, true);\n \t  if (e == edge)\n \t    edge = next;\n-\t  times++;\n \t}\n     }\n-  gcc_assert (times);\n+\n   return edge;\n }\n \n@@ -885,7 +884,7 @@ cgraph_decide_inlining_of_small_functions (void)\n \t}\n       gcc_assert (edge->aux);\n       edge->aux = NULL;\n-      if (!edge->inline_failed)\n+      if (!edge->inline_failed || CALL_CANNOT_INLINE_P (edge->call_stmt))\n \tcontinue;\n \n       /* When not having profile info ready we don't weight by any way the\n@@ -1076,7 +1075,7 @@ cgraph_decide_inlining (void)\n       for (e = node->callers; e; e = next)\n \t{\n \t  next = e->next_caller;\n-\t  if (!e->inline_failed)\n+\t  if (!e->inline_failed || CALL_CANNOT_INLINE_P (e->call_stmt))\n \t    continue;\n \t  if (cgraph_recursive_inlining_p (e->caller, e->callee,\n \t\t\t\t  \t   &e->inline_failed))"}, {"sha": "6ca6e2f40de023d25e220a705c16f7de56fdbc65", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e36711f3cd476b24b011f18953aa3ed3e9a70a36/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e36711f3cd476b24b011f18953aa3ed3e9a70a36/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=e36711f3cd476b24b011f18953aa3ed3e9a70a36", "patch": "@@ -73,7 +73,6 @@ extern tree lhd_tree_inlining_walk_subtrees (tree *, int *, walk_tree_fn,\n extern int lhd_tree_inlining_cannot_inline_tree_fn (tree *);\n extern int lhd_tree_inlining_disregard_inline_limits (tree);\n extern int lhd_tree_inlining_auto_var_in_fn_p (tree, tree);\n-extern tree lhd_tree_inlining_convert_parm_for_inlining (tree, tree, tree, int);\n extern void lhd_initialize_diagnostics (struct diagnostic_context *);\n extern tree lhd_callgraph_analyze_expr (tree *, int *, tree);\n \n@@ -145,16 +144,13 @@ extern void lhd_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *,\n   lhd_tree_inlining_auto_var_in_fn_p\n #define LANG_HOOKS_TREE_INLINING_VAR_MOD_TYPE_P \\\n   hook_bool_tree_tree_false\n-#define LANG_HOOKS_TREE_INLINING_CONVERT_PARM_FOR_INLINING \\\n-  lhd_tree_inlining_convert_parm_for_inlining\n \n #define LANG_HOOKS_TREE_INLINING_INITIALIZER { \\\n   LANG_HOOKS_TREE_INLINING_WALK_SUBTREES, \\\n   LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN, \\\n   LANG_HOOKS_TREE_INLINING_DISREGARD_INLINE_LIMITS, \\\n   LANG_HOOKS_TREE_INLINING_AUTO_VAR_IN_FN_P, \\\n   LANG_HOOKS_TREE_INLINING_VAR_MOD_TYPE_P, \\\n-  LANG_HOOKS_TREE_INLINING_CONVERT_PARM_FOR_INLINING \\\n }\n \n #define LANG_HOOKS_CALLGRAPH_ANALYZE_EXPR lhd_callgraph_analyze_expr"}, {"sha": "85ce93524bf85acaa5dfb930acac956ea038fefc", "filename": "gcc/langhooks.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e36711f3cd476b24b011f18953aa3ed3e9a70a36/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e36711f3cd476b24b011f18953aa3ed3e9a70a36/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=e36711f3cd476b24b011f18953aa3ed3e9a70a36", "patch": "@@ -330,18 +330,6 @@ lhd_tree_inlining_auto_var_in_fn_p (tree var, tree fn)\n \t      || TREE_CODE (var) == RESULT_DECL));\n }\n \n-/* lang_hooks.tree_inlining.convert_parm_for_inlining performs any\n-   language-specific conversion before assigning VALUE to PARM.  */\n-\n-tree\n-lhd_tree_inlining_convert_parm_for_inlining (tree parm ATTRIBUTE_UNUSED,\n-\t\t\t\t\t     tree value,\n-\t\t\t\t\t     tree fndecl ATTRIBUTE_UNUSED,\n-\t\t\t\t\t     int argnum ATTRIBUTE_UNUSED)\n-{\n-  return value;\n-}\n-\n /* lang_hooks.tree_dump.dump_tree:  Dump language-specific parts of tree\n    nodes.  Returns nonzero if it does not want the usual dumping of the\n    second argument.  */"}, {"sha": "1af85b348ea8a8089a1f2ab2d9a1626f653cc491", "filename": "gcc/langhooks.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e36711f3cd476b24b011f18953aa3ed3e9a70a36/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e36711f3cd476b24b011f18953aa3ed3e9a70a36/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=e36711f3cd476b24b011f18953aa3ed3e9a70a36", "patch": "@@ -42,7 +42,6 @@ struct lang_hooks_for_tree_inlining\n   int (*disregard_inline_limits) (tree);\n   int (*auto_var_in_fn_p) (tree, tree);\n   bool (*var_mod_type_p) (tree, tree);\n-  tree (*convert_parm_for_inlining) (tree, tree, tree, int);\n };\n \n struct lang_hooks_for_callgraph"}, {"sha": "abdb62fa6344d9870df301f6f90545d1a794d7d5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e36711f3cd476b24b011f18953aa3ed3e9a70a36/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e36711f3cd476b24b011f18953aa3ed3e9a70a36/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e36711f3cd476b24b011f18953aa3ed3e9a70a36", "patch": "@@ -1,3 +1,12 @@\n+2007-06-23  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/16876\n+\tPR middle-end/29478\n+\t* gcc.dg/pr29254.c: The warning is bogus.\n+\t* gcc.dg/warn-1.c: Likewise.\n+\t* gcc.dg/assign-warn-3.c: Likewise.\n+\t* gcc.dg/noncompile/pr16876.c: The testcase is bogus, remove.\n+\n 2007-06-23  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* gcc.c-torture/execute/20070623-1.c: New."}, {"sha": "86d1b3028f23118105eb63027346b6bce3a8e074", "filename": "gcc/testsuite/gcc.dg/assign-warn-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e36711f3cd476b24b011f18953aa3ed3e9a70a36/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e36711f3cd476b24b011f18953aa3ed3e9a70a36/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-3.c?ref=e36711f3cd476b24b011f18953aa3ed3e9a70a36", "patch": "@@ -6,8 +6,8 @@\n \n /* This is valid to execute, so maybe shouldn't warn at all.  */\n void f0(x) signed char *x; { }\n-void g0(unsigned char *x) { f0(x); } /* { dg-warning \"warning: pointer targets in passing argument 1 of 'f0' differ in signedness\" } */\n+void g0(unsigned char *x) { f0(x); } /* { dg-bogus \"warning: pointer targets in passing argument 1 of 'f0' differ in signedness\" } */\n \n /* This is undefined on execution but still must compile.  */\n void f1(x) int *x; { }\n-void g1(unsigned int *x) { f1(x); } /* { dg-warning \"warning: pointer targets in passing argument 1 of 'f1' differ in signedness\" } */\n+void g1(unsigned int *x) { f1(x); } /* { dg-bogus \"warning: pointer targets in passing argument 1 of 'f1' differ in signedness\" } */"}, {"sha": "9587849b2fcbf8001cdbf6ffb514e112ca006037", "filename": "gcc/testsuite/gcc.dg/noncompile/pr16876.c", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630ef467a860ff6db6bba710fd46700f4f363496/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fpr16876.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630ef467a860ff6db6bba710fd46700f4f363496/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fpr16876.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fpr16876.c?ref=630ef467a860ff6db6bba710fd46700f4f363496", "patch": "@@ -1,15 +0,0 @@\n-/* { dg-options \"-O -finline-functions\" } */\n-\n-static void g();\n-struct bigstack {\n-   char space[4096];\n-};\n-\n-\n-void f() {\n-    g(0); /* { dg-error \"incompatible type for argument 1 of 'g'\" } */\n-}\n-\n-static void g(struct bigstack bstack) {\n-     g(bstack);\n-}"}, {"sha": "598b6bf7b115aebc7f7f23c20162cb8938ed729c", "filename": "gcc/testsuite/gcc.dg/pr29254.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e36711f3cd476b24b011f18953aa3ed3e9a70a36/gcc%2Ftestsuite%2Fgcc.dg%2Fpr29254.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e36711f3cd476b24b011f18953aa3ed3e9a70a36/gcc%2Ftestsuite%2Fgcc.dg%2Fpr29254.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr29254.c?ref=e36711f3cd476b24b011f18953aa3ed3e9a70a36", "patch": "@@ -1,6 +1,5 @@\n /* { dg-do compile } */\n /* { dg-options \"-O3 -Werror\" } */\n-/* { dg-message \"warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n \n list_compare (int * list1)\n {\n@@ -18,5 +17,5 @@ value_compare (int * a)\n \n func2 (const int * fb)\n {\n-  func1 ((int *) fb); /* { dg-error \"discards qualifiers\" } */\n+  func1 ((int *) fb); /* { dg-bogus \"discards qualifiers\" } */\n }"}, {"sha": "6db4ae5cd6ce5312011cada2c623b5244a77188c", "filename": "gcc/testsuite/gcc.dg/warn-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e36711f3cd476b24b011f18953aa3ed3e9a70a36/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e36711f3cd476b24b011f18953aa3ed3e9a70a36/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-1.c?ref=e36711f3cd476b24b011f18953aa3ed3e9a70a36", "patch": "@@ -12,5 +12,5 @@ void bar (void)\n {\n   void *vp;\n \n-  foo (vp);\t/* { dg-warning \"passing argument 1 of\" } */\n+  foo (vp);\t/* { dg-bogus \"passing argument 1 of\" } */\n }"}, {"sha": "054ca8cc7d53569a94218a22fda4c1f9e4a2acde", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e36711f3cd476b24b011f18953aa3ed3e9a70a36/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e36711f3cd476b24b011f18953aa3ed3e9a70a36/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=e36711f3cd476b24b011f18953aa3ed3e9a70a36", "patch": "@@ -1451,7 +1451,6 @@ initialize_inlined_parameters (copy_body_data *id, tree exp,\n   tree a;\n   tree p;\n   tree vars = NULL_TREE;\n-  int argnum = 0;\n   call_expr_arg_iterator iter;\n   tree static_chain = CALL_EXPR_STATIC_CHAIN (exp);\n \n@@ -1462,17 +1461,7 @@ initialize_inlined_parameters (copy_body_data *id, tree exp,\n      equivalent VAR_DECL, appropriately initialized.  */\n   for (p = parms, a = first_call_expr_arg (exp, &iter); p;\n        a = next_call_expr_arg (&iter), p = TREE_CHAIN (p))\n-    {\n-      tree value;\n-\n-      ++argnum;\n-\n-      /* Find the initializer.  */\n-      value = lang_hooks.tree_inlining.convert_parm_for_inlining\n-\t      (p, a, fn, argnum);\n-\n-      setup_one_parameter (id, p, value, fn, bb, &vars);\n-    }\n+    setup_one_parameter (id, p, a, fn, bb, &vars);\n \n   /* Initialize the static chain.  */\n   p = DECL_STRUCT_FUNCTION (fn)->static_chain_decl;"}, {"sha": "28169d7a543940c1353f72d9e24991e97f83fbac", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e36711f3cd476b24b011f18953aa3ed3e9a70a36/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e36711f3cd476b24b011f18953aa3ed3e9a70a36/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=e36711f3cd476b24b011f18953aa3ed3e9a70a36", "patch": "@@ -449,7 +449,10 @@ struct gimple_stmt GTY(())\n            POINTER_TYPE, REFERENCE_TYPE\n        MOVE_NONTEMPORAL in\n \t   GIMPLE_MODIFY_STMT\n-       CASE_HIGH_SEEN in CASE_LABEL_EXPR\n+       CASE_HIGH_SEEN in\n+\t   CASE_LABEL_EXPR\n+       CALL_CANNOT_INLINE_P in\n+\t   CALL_EXPR\n \n    public_flag:\n \n@@ -1144,6 +1147,9 @@ extern void omp_clause_range_check_failed (const tree, const char *, int,\n #define CASE_HIGH_SEEN(NODE) \\\n   (CASE_LABEL_EXPR_CHECK (NODE)->base.static_flag)\n \n+/* Used to mark a CALL_EXPR as not suitable for inlining.  */\n+#define CALL_CANNOT_INLINE_P(NODE) ((NODE)->base.static_flag)\n+\n /* In an expr node (usually a conversion) this means the node was made\n    implicitly and should not lead to any sort of warning.  In a decl node,\n    warnings concerning the decl should be suppressed.  This is used at"}]}