{"sha": "c97d1c9dc4bf70364920ca123c2ab3aed082e00c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk3ZDFjOWRjNGJmNzAzNjQ5MjBjYTEyM2MyYWIzYWVkMDgyZTAwYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-11-17T18:45:41Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-11-17T18:45:41Z"}, "message": "Use combined_fn in tree-ssa-math-opts.c\n\nAnother patch to extend uses of built_in_function to combined_fn, this time\nin tree-ssa-math-opts.c.\n\nTested on x86_64-linux-gnu, aarch64-linux-gnu and arm-linux-gnueabi.\n\ngcc/\n\t* tree-ssa-math-opts.c: Include case-cfn-macros.h.\n\t(execute_cse_sincos_1): Use combined_fn instead of built-in codes.\n\t(pass_cse_sincos::execute): Likewise.\n\nFrom-SVN: r230481", "tree": {"sha": "64ab34dd066152080a10bc369d782ce8ea10f222", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64ab34dd066152080a10bc369d782ce8ea10f222"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c97d1c9dc4bf70364920ca123c2ab3aed082e00c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c97d1c9dc4bf70364920ca123c2ab3aed082e00c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c97d1c9dc4bf70364920ca123c2ab3aed082e00c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c97d1c9dc4bf70364920ca123c2ab3aed082e00c/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "314709cdbe54cd0f68eaf093b111c89816284502", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/314709cdbe54cd0f68eaf093b111c89816284502", "html_url": "https://github.com/Rust-GCC/gccrs/commit/314709cdbe54cd0f68eaf093b111c89816284502"}], "stats": {"total": 46, "additions": 24, "deletions": 22}, "files": [{"sha": "051b29eaec190149b4ce42c9fcc7aae8071bce47", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c97d1c9dc4bf70364920ca123c2ab3aed082e00c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c97d1c9dc4bf70364920ca123c2ab3aed082e00c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c97d1c9dc4bf70364920ca123c2ab3aed082e00c", "patch": "@@ -1,3 +1,9 @@\n+2015-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-ssa-math-opts.c: Include case-cfn-macros.h.\n+\t(execute_cse_sincos_1): Use combined_fn instead of built-in codes.\n+\t(pass_cse_sincos::execute): Likewise.\n+\n 2015-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-ssa-reassoc.c: Include case-cfn-macros.h."}, {"sha": "1e7cf7ed283c90e9fc76cf1a0eaa868885fd0a5d", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c97d1c9dc4bf70364920ca123c2ab3aed082e00c/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c97d1c9dc4bf70364920ca123c2ab3aed082e00c/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=c97d1c9dc4bf70364920ca123c2ab3aed082e00c", "patch": "@@ -110,6 +110,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa.h\"\n #include \"builtins.h\"\n #include \"params.h\"\n+#include \"case-cfn-macros.h\"\n \n /* This structure represents one basic block that either computes a\n    division, or is a common dominator for basic block that compute a\n@@ -725,22 +726,20 @@ execute_cse_sincos_1 (tree name)\n   FOR_EACH_IMM_USE_STMT (use_stmt, use_iter, name)\n     {\n       if (gimple_code (use_stmt) != GIMPLE_CALL\n-\t  || !gimple_call_lhs (use_stmt)\n-\t  || !(fndecl = gimple_call_fndecl (use_stmt))\n-\t  || DECL_BUILT_IN_CLASS (fndecl) != BUILT_IN_NORMAL)\n+\t  || !gimple_call_lhs (use_stmt))\n \tcontinue;\n \n-      switch (DECL_FUNCTION_CODE (fndecl))\n+      switch (gimple_call_combined_fn (use_stmt))\n \t{\n-\tCASE_FLT_FN (BUILT_IN_COS):\n+\tCASE_CFN_COS:\n \t  seen_cos |= maybe_record_sincos (&stmts, &top_bb, use_stmt) ? 1 : 0;\n \t  break;\n \n-\tCASE_FLT_FN (BUILT_IN_SIN):\n+\tCASE_CFN_SIN:\n \t  seen_sin |= maybe_record_sincos (&stmts, &top_bb, use_stmt) ? 1 : 0;\n \t  break;\n \n-\tCASE_FLT_FN (BUILT_IN_CEXPI):\n+\tCASE_CFN_CEXPI:\n \t  seen_cexpi |= maybe_record_sincos (&stmts, &top_bb, use_stmt) ? 1 : 0;\n \t  break;\n \n@@ -779,19 +778,18 @@ execute_cse_sincos_1 (tree name)\n   for (i = 0; stmts.iterate (i, &use_stmt); ++i)\n     {\n       tree rhs = NULL;\n-      fndecl = gimple_call_fndecl (use_stmt);\n \n-      switch (DECL_FUNCTION_CODE (fndecl))\n+      switch (gimple_call_combined_fn (use_stmt))\n \t{\n-\tCASE_FLT_FN (BUILT_IN_COS):\n+\tCASE_CFN_COS:\n \t  rhs = fold_build1 (REALPART_EXPR, type, res);\n \t  break;\n \n-\tCASE_FLT_FN (BUILT_IN_SIN):\n+\tCASE_CFN_SIN:\n \t  rhs = fold_build1 (IMAGPART_EXPR, type, res);\n \t  break;\n \n-\tCASE_FLT_FN (BUILT_IN_CEXPI):\n+\tCASE_CFN_CEXPI:\n \t  rhs = res;\n \t  break;\n \n@@ -1727,26 +1725,24 @@ pass_cse_sincos::execute (function *fun)\n       for (gsi = gsi_after_labels (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n         {\n \t  gimple *stmt = gsi_stmt (gsi);\n-\t  tree fndecl;\n \n \t  /* Only the last stmt in a bb could throw, no need to call\n \t     gimple_purge_dead_eh_edges if we change something in the middle\n \t     of a basic block.  */\n \t  cleanup_eh = false;\n \n-\t  if (gimple_call_builtin_p (stmt, BUILT_IN_NORMAL)\n+\t  if (is_gimple_call (stmt)\n \t      && gimple_call_lhs (stmt))\n \t    {\n \t      tree arg, arg0, arg1, result;\n \t      HOST_WIDE_INT n;\n \t      location_t loc;\n \n-\t      fndecl = gimple_call_fndecl (stmt);\n-\t      switch (DECL_FUNCTION_CODE (fndecl))\n+\t      switch (gimple_call_combined_fn (stmt))\n \t\t{\n-\t\tCASE_FLT_FN (BUILT_IN_COS):\n-\t\tCASE_FLT_FN (BUILT_IN_SIN):\n-\t\tCASE_FLT_FN (BUILT_IN_CEXPI):\n+\t\tCASE_CFN_COS:\n+\t\tCASE_CFN_SIN:\n+\t\tCASE_CFN_CEXPI:\n \t\t  /* Make sure we have either sincos or cexp.  */\n \t\t  if (!targetm.libc_has_function (function_c99_math_complex)\n \t\t      && !targetm.libc_has_function (function_sincos))\n@@ -1757,7 +1753,7 @@ pass_cse_sincos::execute (function *fun)\n \t\t    cfg_changed |= execute_cse_sincos_1 (arg);\n \t\t  break;\n \n-\t\tCASE_FLT_FN (BUILT_IN_POW):\n+\t\tCASE_CFN_POW:\n \t\t  arg0 = gimple_call_arg (stmt, 0);\n \t\t  arg1 = gimple_call_arg (stmt, 1);\n \n@@ -1777,7 +1773,7 @@ pass_cse_sincos::execute (function *fun)\n \t\t    }\n \t\t  break;\n \n-\t\tCASE_FLT_FN (BUILT_IN_POWI):\n+\t\tCASE_CFN_POWI:\n \t\t  arg0 = gimple_call_arg (stmt, 0);\n \t\t  arg1 = gimple_call_arg (stmt, 1);\n \t\t  loc = gimple_location (stmt);\n@@ -1826,7 +1822,7 @@ pass_cse_sincos::execute (function *fun)\n \t\t    }\n \t\t  break;\n \n-\t\tCASE_FLT_FN (BUILT_IN_CABS):\n+\t\tCASE_CFN_CABS:\n \t\t  arg0 = gimple_call_arg (stmt, 0);\n \t\t  loc = gimple_location (stmt);\n \t\t  result = gimple_expand_builtin_cabs (&gsi, loc, arg0);"}]}