{"sha": "863d938c6a762da34248523b4424d9052e28555d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYzZDkzOGM2YTc2MmRhMzQyNDg1MjNiNDQyNGQ5MDUyZTI4NTU1ZA==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@suse.de", "date": "2003-09-15T04:53:00Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2003-09-15T04:53:00Z"}, "message": "altivec.h: Convert () prototypes to ISO C90.\n\n\t* config/rs6000/altivec.h: Convert () prototypes to ISO C90.\n\t* config/rs6000/rs6000.c: Likewise.\n\nFrom-SVN: r71399", "tree": {"sha": "adf5f3495fec2dd21d9c79eefca4795f156ea2a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adf5f3495fec2dd21d9c79eefca4795f156ea2a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/863d938c6a762da34248523b4424d9052e28555d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/863d938c6a762da34248523b4424d9052e28555d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/863d938c6a762da34248523b4424d9052e28555d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/863d938c6a762da34248523b4424d9052e28555d/comments", "author": {"login": "ajaeger", "id": 16867, "node_id": "MDQ6VXNlcjE2ODY3", "avatar_url": "https://avatars.githubusercontent.com/u/16867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajaeger", "html_url": "https://github.com/ajaeger", "followers_url": "https://api.github.com/users/ajaeger/followers", "following_url": "https://api.github.com/users/ajaeger/following{/other_user}", "gists_url": "https://api.github.com/users/ajaeger/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajaeger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajaeger/subscriptions", "organizations_url": "https://api.github.com/users/ajaeger/orgs", "repos_url": "https://api.github.com/users/ajaeger/repos", "events_url": "https://api.github.com/users/ajaeger/events{/privacy}", "received_events_url": "https://api.github.com/users/ajaeger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ec6ec6aaabd93cd9018f73d5a9880466eb55b55c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec6ec6aaabd93cd9018f73d5a9880466eb55b55c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec6ec6aaabd93cd9018f73d5a9880466eb55b55c"}], "stats": {"total": 75, "additions": 40, "deletions": 35}, "files": [{"sha": "2532a0afd4f48f315c953da5bb0ed86ab19d5194", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/863d938c6a762da34248523b4424d9052e28555d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/863d938c6a762da34248523b4424d9052e28555d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=863d938c6a762da34248523b4424d9052e28555d", "patch": "@@ -1,3 +1,8 @@\n+2003-09-15  Andreas Jaeger  <aj@suse.de>\n+\n+\t* config/rs6000/altivec.h: Convert () prototypes to ISO C90.\n+\t* config/rs6000/rs6000.c: Likewise.\n+\n 2003-09-12  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n \tPR optimization/10914"}, {"sha": "d7718fee98b8658d16e3064c87c21def64895c27", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/863d938c6a762da34248523b4424d9052e28555d/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/863d938c6a762da34248523b4424d9052e28555d/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=863d938c6a762da34248523b4424d9052e28555d", "patch": "@@ -1198,7 +1198,7 @@ vec_dss (const char a1)\n /* vec_dssall */\n \n inline void\n-vec_dssall ()\n+vec_dssall (void)\n {\n   __builtin_altivec_dssall ();\n }\n@@ -2419,7 +2419,7 @@ vec_vmrglb (vector unsigned char a1, vector unsigned char a2)\n /* vec_mfvscr */\n \n inline vector unsigned short\n-vec_mfvscr ()\n+vec_mfvscr (void)\n {\n   return (vector unsigned short) __builtin_altivec_mfvscr ();\n }"}, {"sha": "0532f4ff10308fd45168f5836c8b541c0821f48c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/863d938c6a762da34248523b4424d9052e28555d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/863d938c6a762da34248523b4424d9052e28555d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=863d938c6a762da34248523b4424d9052e28555d", "patch": "@@ -884,7 +884,7 @@ rs6000_parse_yes_no_option (const char *name, const char *value, int *flag)\n \n /* Handle -mabi= options.  */\n static void\n-rs6000_parse_abi_options ()\n+rs6000_parse_abi_options (void)\n {\n   if (rs6000_abi_string == 0)\n     return;\n@@ -907,7 +907,7 @@ rs6000_parse_abi_options ()\n \n /* Handle -malign-XXXXXX options.  */\n static void\n-rs6000_parse_alignment_option ()\n+rs6000_parse_alignment_option (void)\n {\n   if (rs6000_alignment_string == 0\n       || ! strcmp (rs6000_alignment_string, \"power\"))\n@@ -922,7 +922,7 @@ rs6000_parse_alignment_option ()\n /* Validate and record the size specified with the -mtls-size option.  */\n \n static void\n-rs6000_parse_tls_size_option ()\n+rs6000_parse_tls_size_option (void)\n {\n   if (rs6000_tls_size_string == 0)\n     return;\n@@ -944,7 +944,7 @@ optimization_options (int level ATTRIBUTE_UNUSED, int size ATTRIBUTE_UNUSED)\n /* Do anything needed at the start of the asm file.  */\n \n static void\n-rs6000_file_start ()\n+rs6000_file_start (void)\n {\n   size_t i;\n   char buffer[80];\n@@ -1000,7 +1000,7 @@ rs6000_file_start ()\n /* Return nonzero if this function is known to have a null epilogue.  */\n \n int\n-direct_return ()\n+direct_return (void)\n {\n   if (reload_completed)\n     {\n@@ -2545,7 +2545,7 @@ rs6000_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n \n static GTY(()) rtx rs6000_tls_symbol;\n static rtx\n-rs6000_tls_get_addr ()\n+rs6000_tls_get_addr (void)\n {\n   if (!rs6000_tls_symbol)\n     rs6000_tls_symbol = init_one_libfunc (\"__tls_get_addr\");\n@@ -2557,7 +2557,7 @@ rs6000_tls_get_addr ()\n \n static GTY(()) rtx rs6000_got_symbol;\n static rtx\n-rs6000_got_sym ()\n+rs6000_got_sym (void)\n {\n   if (!rs6000_got_symbol)\n     {\n@@ -4095,7 +4095,7 @@ setup_incoming_varargs (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n /* Create the va_list data type.  */\n \n tree\n-rs6000_build_va_list ()\n+rs6000_build_va_list (void)\n {\n   tree f_gpr, f_fpr, f_res, f_ovf, f_sav, record, type_decl;\n \n@@ -5860,7 +5860,7 @@ rs6000_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n }\n \n static void\n-rs6000_init_builtins ()\n+rs6000_init_builtins (void)\n {\n   opaque_V2SI_type_node = copy_node (V2SI_type_node);\n   opaque_V2SF_type_node = copy_node (V2SF_type_node);\n@@ -5903,7 +5903,7 @@ enable_mask_for_builtins (struct builtin_description *desc, int size,\n }\n \n static void\n-spe_init_builtins ()\n+spe_init_builtins (void)\n {\n   tree endlink = void_list_node;\n   tree puint_type_node = build_pointer_type (unsigned_type_node);\n@@ -6122,7 +6122,7 @@ spe_init_builtins ()\n }\n \n static void\n-altivec_init_builtins ()\n+altivec_init_builtins (void)\n {\n   struct builtin_description *d;\n   struct builtin_description_predicates *dp;\n@@ -6321,7 +6321,7 @@ altivec_init_builtins ()\n }\n \n static void\n-rs6000_common_init_builtins ()\n+rs6000_common_init_builtins (void)\n {\n   struct builtin_description *d;\n   size_t i;\n@@ -7924,7 +7924,7 @@ rs6000_got_register (rtx value ATTRIBUTE_UNUSED)\n    from push_function_context.  */\n \n static struct machine_function *\n-rs6000_init_machine_status ()\n+rs6000_init_machine_status (void)\n {\n   return ggc_alloc_cleared (sizeof (machine_function));\n }\n@@ -8008,7 +8008,7 @@ extract_ME (rtx op)\n    so that we can print its name in some tls_ld pattern.  */\n \n static const char *\n-rs6000_get_some_local_dynamic_name ()\n+rs6000_get_some_local_dynamic_name (void)\n {\n   rtx insn;\n \n@@ -9552,7 +9552,7 @@ rs6000_split_altivec_in_gprs (rtx *operands)\n    saved. 32 if none.  */\n \n int\n-first_reg_to_save ()\n+first_reg_to_save (void)\n {\n   int first_reg;\n \n@@ -9578,7 +9578,7 @@ first_reg_to_save ()\n /* Similar, for FP regs.  */\n \n int\n-first_fp_reg_to_save ()\n+first_fp_reg_to_save (void)\n {\n   int first_reg;\n \n@@ -9593,7 +9593,7 @@ first_fp_reg_to_save ()\n /* Similar, for AltiVec regs.  */\n \n static int\n-first_altivec_reg_to_save ()\n+first_altivec_reg_to_save (void)\n {\n   int i;\n \n@@ -9614,7 +9614,7 @@ first_altivec_reg_to_save ()\n    the 32-bit word is 0.  */\n \n static unsigned int\n-compute_vrsave_mask ()\n+compute_vrsave_mask (void)\n {\n   unsigned int i, mask = 0;\n \n@@ -9752,7 +9752,7 @@ is_altivec_return_reg (rtx reg, void *xyes)\n #endif\n \n rs6000_stack_t *\n-rs6000_stack_info ()\n+rs6000_stack_info (void)\n {\n   static rs6000_stack_t info, zero_info;\n   rs6000_stack_t *info_ptr = &info;\n@@ -10061,7 +10061,7 @@ rs6000_stack_info ()\n    mode.  */\n \n static bool\n-spe_func_has_64bit_regs_p ()\n+spe_func_has_64bit_regs_p (void)\n {\n   rtx insns, insn;\n \n@@ -10295,7 +10295,7 @@ rs6000_function_ok_for_sibcall (tree decl, tree exp ATTRIBUTE_UNUSED)\n }\n \n static int\n-rs6000_ra_ever_killed ()\n+rs6000_ra_ever_killed (void)\n {\n   rtx top;\n   rtx reg;\n@@ -10459,7 +10459,7 @@ rs6000_emit_load_toc_table (int fromprolog)\n }\n \n int   \n-get_TOC_alias_set ()\n+get_TOC_alias_set (void)\n {\n     static int set = -1;\n     if (set == -1)\n@@ -10514,7 +10514,7 @@ create_TOC_reference (rtx symbol)\n    entry.  Save it there in that case.  */\n \n void\n-rs6000_aix_emit_builtin_unwind_init ()\n+rs6000_aix_emit_builtin_unwind_init (void)\n {\n   rtx mem;\n   rtx stack_top = gen_reg_rtx (Pmode);\n@@ -10549,7 +10549,7 @@ rs6000_aix_emit_builtin_unwind_init ()\n    rs6000_sr_alias_set) and the change to the stack pointer.  */\n \n static void\n-rs6000_emit_stack_tie ()\n+rs6000_emit_stack_tie (void)\n {\n   rtx mem = gen_rtx_MEM (BLKmode, gen_rtx_REG (Pmode, STACK_POINTER_REGNUM));\n \n@@ -10918,7 +10918,7 @@ gen_frame_mem_offset (enum machine_mode mode, rtx reg, int offset)\n /* Emit function prologue as insns.  */\n \n void\n-rs6000_emit_prologue ()\n+rs6000_emit_prologue (void)\n {\n   rs6000_stack_t *info = rs6000_stack_info ();\n   enum machine_mode reg_mode = TARGET_POWERPC64 ? DImode : SImode;\n@@ -12893,7 +12893,7 @@ output_function_profiler (FILE *file, int labelno)\n \n \f\n static int\n-rs6000_use_dfa_pipeline_interface ()\n+rs6000_use_dfa_pipeline_interface (void)\n {\n   return 1;\n }\n@@ -13037,7 +13037,7 @@ rs6000_adjust_priority (rtx insn ATTRIBUTE_UNUSED, int priority)\n /* Return how many instructions the machine can issue per cycle.  */\n \n static int\n-rs6000_issue_rate ()\n+rs6000_issue_rate (void)\n {\n   /* Use issue rate of 1 for first scheduling pass to decrease degradation.  */\n   if (!reload_completed)\n@@ -13071,7 +13071,7 @@ rs6000_issue_rate ()\n    scheduling.  */\n \n static int\n-rs6000_use_sched_lookahead ()\n+rs6000_use_sched_lookahead (void)\n {\n   if (rs6000_cpu_attr == CPU_PPC8540)\n     return 4;\n@@ -13082,7 +13082,7 @@ rs6000_use_sched_lookahead ()\n /* Length in units of the trampoline for entering a nested function.  */\n \n int\n-rs6000_trampoline_size ()\n+rs6000_trampoline_size (void)\n {\n   int ret = 0;\n \n@@ -13428,7 +13428,7 @@ add_compiler_stub (tree label_name, tree function_name, int line_number)\n    linked list.  */\n \n void\n-output_compiler_stub ()\n+output_compiler_stub (void)\n {\n   char tmp_buf[256];\n   char label_buf[256];\n@@ -13661,7 +13661,7 @@ rs6000_machopic_legitimize_pic_address (rtx orig, enum machine_mode mode,\n    real definition.  */\n \n void\n-toc_section ()\n+toc_section (void)\n {\n }\n \n@@ -13947,7 +13947,7 @@ rs6000_xcoff_section_type_flags (tree decl, const char *name, int reloc)\n    Finally, declare mcount when profiling to make the assembler happy.  */\n \n static void\n-rs6000_xcoff_file_start ()\n+rs6000_xcoff_file_start (void)\n {\n   rs6000_gen_section_name (&xcoff_bss_section_name,\n \t\t\t   main_input_filename, \".bss_\");\n@@ -13972,7 +13972,7 @@ rs6000_xcoff_file_start ()\n    On the RS/6000, referencing data should automatically pull in text.  */\n \n static void\n-rs6000_xcoff_file_end ()\n+rs6000_xcoff_file_end (void)\n {\n   text_section ();\n   fputs (\"_section_.text:\\n\", asm_out_file);"}]}