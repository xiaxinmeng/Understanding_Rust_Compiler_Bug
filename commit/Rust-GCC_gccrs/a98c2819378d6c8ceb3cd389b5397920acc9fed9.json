{"sha": "a98c2819378d6c8ceb3cd389b5397920acc9fed9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk4YzI4MTkzNzhkNmM4Y2ViM2NkMzg5YjUzOTc5MjBhY2M5ZmVkOQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2010-02-22T22:30:45Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2010-02-22T22:30:45Z"}, "message": "re PR c++/43126 (\"at this point in file\" warnings are upside down)\n\n2010-02-22  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c++/43126\n\t* c-typeck.c (convert_arguments): Print declaration location.\n\t* c-common.c (validate_nargs): Rename as\n\tbuiltin_function_validate_nargs.\n\t(check_builtin_function_arguments): Update.\ncp/\n\t* typeck.c (convert_arguments): Update error message.\n\t\ntestsuite/\n\t* gcc.dg/cleanup-1.c: Update.\n\t* gcc.dg/func-args-1.c: Update.\n\t* gcc.dg/format/sentinel-1.c: Update.\n\t* g++.old-deja/g++.jason/scoping10.C: Update.\n\t* g++.old-deja/g++.ns/lookup5.C: Update.\n\t* g++.dg/ext/cleanup-1.C: Update.\n\t* g++.dg/parse/varmod1.C: Update.\n\t* g++.dg/parse/error33.C: Update.\n\t* g++.dg/expr/call3.C: Update.\n\t* g++.dg/func-args-1.C: New.\n\nFrom-SVN: r156979", "tree": {"sha": "83af312d2bb69101bf71d922763360c32afd84cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83af312d2bb69101bf71d922763360c32afd84cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a98c2819378d6c8ceb3cd389b5397920acc9fed9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a98c2819378d6c8ceb3cd389b5397920acc9fed9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a98c2819378d6c8ceb3cd389b5397920acc9fed9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a98c2819378d6c8ceb3cd389b5397920acc9fed9/comments", "author": null, "committer": null, "parents": [{"sha": "3a7ba0405dcd31e3d952290d865557d1b4a223b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a7ba0405dcd31e3d952290d865557d1b4a223b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a7ba0405dcd31e3d952290d865557d1b4a223b8"}], "stats": {"total": 170, "additions": 131, "deletions": 39}, "files": [{"sha": "195d69c571d6b93da3ac1ab312bb272faef05372", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98c2819378d6c8ceb3cd389b5397920acc9fed9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98c2819378d6c8ceb3cd389b5397920acc9fed9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a98c2819378d6c8ceb3cd389b5397920acc9fed9", "patch": "@@ -1,3 +1,11 @@\n+2010-02-22  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c++/43126\n+\t* c-typeck.c (convert_arguments): Print declaration location.\n+\t* c-common.c (validate_nargs): Rename as\n+\tbuiltin_function_validate_nargs.\n+\t(check_builtin_function_arguments): Update.\n+\n 2010-02-22  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/43045"}, {"sha": "0bee9376b042ad36fa498dbc57014d0b2f050048", "filename": "gcc/c-common.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98c2819378d6c8ceb3cd389b5397920acc9fed9/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98c2819378d6c8ceb3cd389b5397920acc9fed9/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=a98c2819378d6c8ceb3cd389b5397920acc9fed9", "patch": "@@ -7980,21 +7980,24 @@ check_function_arguments_recurse (void (*callback)\n   (*callback) (ctx, param, param_num);\n }\n \n-/* Checks the number of arguments NARGS against the required number\n-   REQUIRED and issues an error if there is a mismatch.  Returns true\n-   if the number of arguments is correct, otherwise false.  */\n+/* Checks for a builtin function FNDECL that the number of arguments\n+   NARGS against the required number REQUIRED and issues an error if\n+   there is a mismatch.  Returns true if the number of arguments is\n+   correct, otherwise false.  */\n \n static bool\n-validate_nargs (tree fndecl, int nargs, int required)\n+builtin_function_validate_nargs (tree fndecl, int nargs, int required)\n {\n   if (nargs < required)\n     {\n-      error (\"not enough arguments to function %qE\", fndecl);\n+      error_at (input_location,\n+\t\t\"not enough arguments to function %qE\", fndecl);\n       return false;\n     }\n   else if (nargs > required)\n     {\n-      error (\"too many arguments to function %qE\", fndecl);\n+      error_at (input_location,\n+\t\t\"too many arguments to function %qE\", fndecl);\n       return false;\n     }\n   return true;\n@@ -8013,14 +8016,14 @@ check_builtin_function_arguments (tree fndecl, int nargs, tree *args)\n   switch (DECL_FUNCTION_CODE (fndecl))\n     {\n     case BUILT_IN_CONSTANT_P:\n-      return validate_nargs (fndecl, nargs, 1);\n+      return builtin_function_validate_nargs (fndecl, nargs, 1);\n \n     case BUILT_IN_ISFINITE:\n     case BUILT_IN_ISINF:\n     case BUILT_IN_ISINF_SIGN:\n     case BUILT_IN_ISNAN:\n     case BUILT_IN_ISNORMAL:\n-      if (validate_nargs (fndecl, nargs, 1))\n+      if (builtin_function_validate_nargs (fndecl, nargs, 1))\n \t{\n \t  if (TREE_CODE (TREE_TYPE (args[0])) != REAL_TYPE)\n \t    {\n@@ -8038,7 +8041,7 @@ check_builtin_function_arguments (tree fndecl, int nargs, tree *args)\n     case BUILT_IN_ISLESSEQUAL:\n     case BUILT_IN_ISLESSGREATER:\n     case BUILT_IN_ISUNORDERED:\n-      if (validate_nargs (fndecl, nargs, 2))\n+      if (builtin_function_validate_nargs (fndecl, nargs, 2))\n \t{\n \t  enum tree_code code0, code1;\n \t  code0 = TREE_CODE (TREE_TYPE (args[0]));\n@@ -8056,7 +8059,7 @@ check_builtin_function_arguments (tree fndecl, int nargs, tree *args)\n       return false;\n \n     case BUILT_IN_FPCLASSIFY:\n-      if (validate_nargs (fndecl, nargs, 6))\n+      if (builtin_function_validate_nargs (fndecl, nargs, 6))\n \t{\n \t  unsigned i;\n "}, {"sha": "a7a5f8632bdaafc2de6cf87242a93fb6100d86c4", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98c2819378d6c8ceb3cd389b5397920acc9fed9/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98c2819378d6c8ceb3cd389b5397920acc9fed9/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=a98c2819378d6c8ceb3cd389b5397920acc9fed9", "patch": "@@ -2814,7 +2814,10 @@ convert_arguments (tree typelist, VEC(tree,gc) *values,\n \n       if (type == void_type_node)\n \t{\n-\t  error (\"too many arguments to function %qE\", function);\n+\t  error_at (input_location,\n+\t\t    \"too many arguments to function %qE\", function);\n+\t  if (fundecl && !DECL_BUILT_IN (fundecl))\n+\t    inform (DECL_SOURCE_LOCATION (fundecl), \"declared here\");\n \t  return parmnum;\n \t}\n \n@@ -3038,7 +3041,10 @@ convert_arguments (tree typelist, VEC(tree,gc) *values,\n \n   if (typetail != 0 && TREE_VALUE (typetail) != void_type_node)\n     {\n-      error (\"too few arguments to function %qE\", function);\n+      error_at (input_location, \n+\t\t\"too few arguments to function %qE\", function);\n+      if (fundecl && !DECL_BUILT_IN (fundecl))\n+\tinform (DECL_SOURCE_LOCATION (fundecl), \"declared here\");\n       return -1;\n     }\n "}, {"sha": "a4a5cc2498d633452a1facad2380b7d22a6afabe", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98c2819378d6c8ceb3cd389b5397920acc9fed9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98c2819378d6c8ceb3cd389b5397920acc9fed9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a98c2819378d6c8ceb3cd389b5397920acc9fed9", "patch": "@@ -1,3 +1,9 @@\n+2010-02-22  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c++/43126\n+\t* typeck.c (convert_arguments): Update error message.\n+\t\n+\n 2010-02-22  Mike Stump  <mikestump@comcast.net>\n \n \tPR c++/43125"}, {"sha": "b9ef78f2b49e8472fbdd3d69b0102a9b8e31db10", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98c2819378d6c8ceb3cd389b5397920acc9fed9/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98c2819378d6c8ceb3cd389b5397920acc9fed9/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=a98c2819378d6c8ceb3cd389b5397920acc9fed9", "patch": "@@ -3304,9 +3304,10 @@ convert_arguments (tree typelist, VEC(tree,gc) **values, tree fndecl,\n             {\n               if (fndecl)\n                 {\n-                  error (\"too many arguments to %s %q+#D\", \n-                         called_thing, fndecl);\n-                  error (\"at this point in file\");\n+                  error_at (input_location, \"too many arguments to %s %q#D\", \n+\t\t\t    called_thing, fndecl);\n+\t\t  inform (DECL_SOURCE_LOCATION (fndecl),\n+\t\t\t  \"declared here\");\n                 }\n               else\n                 error (\"too many arguments to function\");\n@@ -3417,9 +3418,10 @@ convert_arguments (tree typelist, VEC(tree,gc) **values, tree fndecl,\n             {\n               if (fndecl)\n                 {\n-                  error (\"too few arguments to %s %q+#D\", \n-                         called_thing, fndecl);\n-                  error (\"at this point in file\");\n+                  error_at (input_location, \"too few arguments to %s %q#D\", \n+\t\t\t    called_thing, fndecl);\n+\t\t  inform (DECL_SOURCE_LOCATION (fndecl),\n+\t\t\t  \"declared here\");\n                 }\n               else\n                 error (\"too few arguments to function\");"}, {"sha": "7ca5442277e5d3755e710a2eba811d95f66307f2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98c2819378d6c8ceb3cd389b5397920acc9fed9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98c2819378d6c8ceb3cd389b5397920acc9fed9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a98c2819378d6c8ceb3cd389b5397920acc9fed9", "patch": "@@ -1,3 +1,17 @@\n+2010-02-22  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c++/43126\n+\t* gcc.dg/cleanup-1.c: Update.\n+\t* gcc.dg/func-args-1.c: Update.\n+\t* gcc.dg/format/sentinel-1.c: Update.\n+\t* g++.old-deja/g++.jason/scoping10.C: Update.\n+\t* g++.old-deja/g++.ns/lookup5.C: Update.\n+\t* g++.dg/ext/cleanup-1.C: Update.\n+\t* g++.dg/parse/varmod1.C: Update.\n+\t* g++.dg/parse/error33.C: Update.\n+\t* g++.dg/expr/call3.C: Update.\n+\t* g++.dg/func-args-1.C: New.\n+\n 2010-02-22  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR c/43125"}, {"sha": "13bca7170d6a8b18288ad4ee99939df5f2459f48", "filename": "gcc/testsuite/g++.dg/expr/call3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98c2819378d6c8ceb3cd389b5397920acc9fed9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcall3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98c2819378d6c8ceb3cd389b5397920acc9fed9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcall3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcall3.C?ref=a98c2819378d6c8ceb3cd389b5397920acc9fed9", "patch": "@@ -7,6 +7,6 @@ struct A\n   int i;\n };\n \n-A foo(int);       // { dg-error \"too few arguments\" }\n+A foo(int);       /* { dg-message \"note: declared here\" } */\n \n-int j = foo().i;  // { dg-error \"at this point\" }\n+int j = foo().i;  // { dg-error \"too few arguments\" }"}, {"sha": "8e8353754955a08e1fabec72d368355260931f10", "filename": "gcc/testsuite/g++.dg/ext/cleanup-1.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98c2819378d6c8ceb3cd389b5397920acc9fed9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcleanup-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98c2819378d6c8ceb3cd389b5397920acc9fed9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcleanup-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcleanup-1.C?ref=a98c2819378d6c8ceb3cd389b5397920acc9fed9", "patch": "@@ -6,25 +6,25 @@\n #define C(x)\t__attribute__((cleanup(x)))\n \n static int f1(void *x U) { return 0; }\n-static void f2() { } /* { dg-error \"too many arguments\" } */\n-static void f3(void) { } /* { dg-error \"too many arguments\" } */\n+static void f2() { } /* { dg-message \"note: declared here\" } */\n+static void f3(void) { } /* { dg-message \"note: declared here\" } */\n static void f4(void *x U) { }\n static void f5(int *x U) { }\n static void f6(double *x U) { }\n static void f7(const int *x U) { }\n-static void f8(const int *x U, int y U) { } /* { dg-error \"too few arguments\" } */\n+static void f8(const int *x U, int y U) { } /* { dg-message \"note: declared here\" } */\n static void f9(int x U) { }\n \n void test(void)\n {\n   int o1 C(f1);\n-  int o2 C(f2);         /* { dg-error \"at this point\" } */\n-  int o3 C(f3);\t\t/* { dg-error \"at this point\" } */\n+  int o2 C(f2);         /* { dg-error \"too many arguments\" } */\n+  int o3 C(f3);\t\t/* { dg-error \"too many arguments\" } */\n   int o4 C(f4);\n   int o5 C(f5);\n   int o6 C(f6);\t\t/* { dg-error \"cannot convert\" } */\n   int o7 C(f7);\n-  int o8 C(f8);\t\t/* { dg-error \"at this point\" } */\n+  int o8 C(f8);\t\t/* { dg-error \"too few arguments\" } */\n   int o9 C(f9);\t\t/* { dg-error \"conversion\" } */\n   int o10 U C(undef);\t/* { dg-error \"not a function\" } */\n   int o11 U C(o1);\t/* { dg-error \"not a function\" } */"}, {"sha": "4b2efd83d613572ae6b8978833bf733f3a94e548", "filename": "gcc/testsuite/g++.dg/func-args-1.C", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98c2819378d6c8ceb3cd389b5397920acc9fed9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ffunc-args-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98c2819378d6c8ceb3cd389b5397920acc9fed9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ffunc-args-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ffunc-args-1.C?ref=a98c2819378d6c8ceb3cd389b5397920acc9fed9", "patch": "@@ -0,0 +1,53 @@\n+/* Test messages for wrong number of arguments to function.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+void f0(void); /* { dg-message \"note: declared here\" } */\n+void f1(int); /* { dg-message \"note: declared here\" } */\n+void f1v(int, ...); /* { dg-message \"note: declared here\" } */\n+void f2(int, int); /* { dg-message \"note: declared here\" } */\n+void f2v(int, int, ...); /* { dg-message \"note: declared here\" } */\n+\n+struct s {\n+  void (*f0)(void);\n+  void (*f1)(int);\n+  void (*f1v)(int, ...);\n+  void (*f2)(int, int);\n+  void (*f2v)(int, int, ...);\n+} x;\n+\n+void\n+g (int a)\n+{\n+  f0();\n+  x.f0();\n+  f0(a); /* { dg-error \"too many arguments to function\" } */\n+  x.f0(a); /* { dg-error \"too many arguments to function\" } */\n+  f0(a, a); /* { dg-error \"too many arguments to function\" } */\n+  x.f0(a, a); /* { dg-error \"too many arguments to function\" } */\n+  f1(); /* { dg-error \"too few arguments to function\" } */\n+  x.f1(); /* { dg-error \"too few arguments to function\" } */\n+  f1(a);\n+  x.f1(a);\n+  f1(a, a); /* { dg-error \"too many arguments to function\" } */\n+  x.f1(a, a); /* { dg-error \"too many arguments to function\" } */\n+  f1v(); /* { dg-error \"too few arguments to function\" } */\n+  x.f1v(); /* { dg-error \"too few arguments to function\" } */\n+  f1v(a);\n+  x.f1v(a);\n+  f1v(a, a);\n+  x.f1v(a, a);\n+  f2(a); /* { dg-error \"too few arguments to function\" } */\n+  x.f2(a); /* { dg-error \"too few arguments to function\" } */\n+  f2(a, a);\n+  x.f2(a, a);\n+  f2(a, a, a); /* { dg-error \"too many arguments to function\" } */\n+  x.f2(a, a, a); /* { dg-error \"too many arguments to function\" } */\n+  f2v(a); /* { dg-error \"too few arguments to function\" } */\n+  x.f2v(a); /* { dg-error \"too few arguments to function\" } */\n+  f2v(a, a);\n+  x.f2v(a, a);\n+  f2v(a, a, a);\n+  x.f2v(a, a, a);\n+}"}, {"sha": "ac18c20981289d7ad53a94920798585cdda6513a", "filename": "gcc/testsuite/g++.dg/parse/error33.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98c2819378d6c8ceb3cd389b5397920acc9fed9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror33.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98c2819378d6c8ceb3cd389b5397920acc9fed9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror33.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror33.C?ref=a98c2819378d6c8ceb3cd389b5397920acc9fed9", "patch": "@@ -8,9 +8,9 @@ struct A\n \n typedef void (A::T)(); /* { dg-error \"typedef name may not be a nested\" } */\n \n-void bar(T); /* { dg-error \"too many arguments\" } */\n+void bar(T); /* { dg-message \"note: declared here\" } */\n \n void baz()\n {\n-  bar(&A::foo); /* { dg-error \"at this point\" } */\n+  bar(&A::foo); /* { dg-error \"too many arguments\" } */\n }"}, {"sha": "8f7b4eb14196594d9f6b4a06c2c660f2d5672a3d", "filename": "gcc/testsuite/g++.dg/parse/varmod1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98c2819378d6c8ceb3cd389b5397920acc9fed9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fvarmod1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98c2819378d6c8ceb3cd389b5397920acc9fed9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fvarmod1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fvarmod1.C?ref=a98c2819378d6c8ceb3cd389b5397920acc9fed9", "patch": "@@ -1,6 +1,6 @@\n int main(int argc, char** argv) {\n   int nx = 2;\n-  void theerror(double a[][nx+1]); // { dg-error \"\" }\n+  void theerror(double a[][nx+1]); // { dg-message \"\" }\n   double** a;\n   theerror(a); // { dg-error \"\" }\n   return 0;"}, {"sha": "bc14974accacf362854944aac6ebdfcaf34700d2", "filename": "gcc/testsuite/g++.old-deja/g++.jason/scoping10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98c2819378d6c8ceb3cd389b5397920acc9fed9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fscoping10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98c2819378d6c8ceb3cd389b5397920acc9fed9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fscoping10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fscoping10.C?ref=a98c2819378d6c8ceb3cd389b5397920acc9fed9", "patch": "@@ -8,7 +8,7 @@ struct A {\n struct B : public A {\n   void g (char *);\n   void h () {\n-    extern void g ();\t\t// { dg-error \"\" } \n+    extern void g ();\t\t// { dg-message \"\" } \n     f(\"foo\");\t\t\t// { dg-error \"\" } hidden\n     g(\"foo\");\t\t\t// { dg-error \"\" } hidden\n   }"}, {"sha": "95af00ffd7afa4aedaf1d666b05384e4da549dd3", "filename": "gcc/testsuite/g++.old-deja/g++.ns/lookup5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98c2819378d6c8ceb3cd389b5397920acc9fed9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Flookup5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98c2819378d6c8ceb3cd389b5397920acc9fed9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Flookup5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Flookup5.C?ref=a98c2819378d6c8ceb3cd389b5397920acc9fed9", "patch": "@@ -5,7 +5,7 @@ namespace A{\n \n namespace B{\n   using namespace A;\n-  void f(int);\t\t\t// { dg-error \"\" } referenced below\n+  void f(int);\t\t/* { dg-message \"note: declared here\" } */\n }\n \n using namespace B;"}, {"sha": "48b82646e4887de1d8dbf37c9c76613ce297c13d", "filename": "gcc/testsuite/gcc.dg/cleanup-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98c2819378d6c8ceb3cd389b5397920acc9fed9/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98c2819378d6c8ceb3cd389b5397920acc9fed9/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-1.c?ref=a98c2819378d6c8ceb3cd389b5397920acc9fed9", "patch": "@@ -7,12 +7,12 @@\n \n static int f1(void *x U) { return 0; }\n static void f2() { }\n-static void f3(void) { }\n+static void f3(void) { } /* { dg-message \"note: declared here\" } */\n static void f4(void *x U) { }\n static void f5(int *x U) { }\n static void f6(double *x U) { } /* { dg-message \"note: expected '\\[^\\n'\\]*' but argument is of type '\\[^\\n'\\]*'\" \"note: expected\" } */\n static void f7(const int *x U) { }\n-static void f8(const int *x U, int y U) { }\n+static void f8(const int *x U, int y U) { } /* { dg-message \"note: declared here\" } */\n static void f9(int x U) { } /* { dg-message \"note: expected '\\[^\\n'\\]*' but argument is of type '\\[^\\n'\\]*'\" \"note: expected\" } */\n \n void test(void)"}, {"sha": "0c8a2ac7737eebcccee8c2d2c400370225a1b2f0", "filename": "gcc/testsuite/gcc.dg/format/sentinel-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98c2819378d6c8ceb3cd389b5397920acc9fed9/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fsentinel-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98c2819378d6c8ceb3cd389b5397920acc9fed9/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fsentinel-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fsentinel-1.c?ref=a98c2819378d6c8ceb3cd389b5397920acc9fed9", "patch": "@@ -14,7 +14,7 @@ extern char *envp[];\n \n extern int a ATTR; /* { dg-warning \"applies to function types\" \"sentinel\" } */\n \n-extern void foo1 (const char *, ...) ATTR;\n+extern void foo1 (const char *, ...) ATTR; /* { dg-message \"note: declared here\" } */\n extern void foo2 (...) ATTR; /* { dg-error \"ISO C requires|named arguments\" \"sentinel\" } */\n extern void foo3 () ATTR; /* { dg-warning \"named arguments\" \"sentinel\" } */\n extern void foo4 (const char *, int) ATTR; /* { dg-warning \"variadic functions\" \"sentinel\" } */"}, {"sha": "5f7b24535516e56ab24f628f53b605775276d208", "filename": "gcc/testsuite/gcc.dg/func-args-1.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98c2819378d6c8ceb3cd389b5397920acc9fed9/gcc%2Ftestsuite%2Fgcc.dg%2Ffunc-args-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98c2819378d6c8ceb3cd389b5397920acc9fed9/gcc%2Ftestsuite%2Fgcc.dg%2Ffunc-args-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffunc-args-1.c?ref=a98c2819378d6c8ceb3cd389b5397920acc9fed9", "patch": "@@ -3,11 +3,11 @@\n /* { dg-do compile } */\n /* { dg-options \"\" } */\n \n-void f0(void);\n-void f1(int);\n-void f1v(int, ...);\n-void f2(int, int);\n-void f2v(int, int, ...);\n+void f0(void); /* { dg-message \"note: declared here\" } */\n+void f1(int); /* { dg-message \"note: declared here\" } */\n+void f1v(int, ...); /* { dg-message \"note: declared here\" } */\n+void f2(int, int); /* { dg-message \"note: declared here\" } */\n+void f2v(int, int, ...); /* { dg-message \"note: declared here\" } */\n \n struct s {\n   void (*f0)(void);"}]}