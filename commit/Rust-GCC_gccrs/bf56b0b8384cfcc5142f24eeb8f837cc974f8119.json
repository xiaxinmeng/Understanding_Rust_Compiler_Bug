{"sha": "bf56b0b8384cfcc5142f24eeb8f837cc974f8119", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY1NmIwYjgzODRjZmNjNTE0MmYyNGVlYjhmODM3Y2M5NzRmODExOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-11-15T14:33:20Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-11-15T14:33:20Z"}, "message": "Add std::string constructor for substring of string_view (LWG 2742)\n\n\t* doc/xml/manual/intro.xml: Document LWG 2742 status.\n\t* doc/html/*: Regenerate.\n\t* include/bits/basic_string.h\n\t(basic_string(const T&, size_type, size_type, const Allocator&)): Add\n\tconstructor for substring of basic_string_view, as per LWG 2742 but\n\twith additional constraint to fix ambiguity.\n\t* testsuite/21_strings/basic_string/cons/char/9.cc: New test.\n\t* testsuite/21_strings/basic_string/cons/wchar_t/9.cc: New test.\n\nFrom-SVN: r242416", "tree": {"sha": "8cf08077d9c514a5fdd813dcdd432eccc7773295", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cf08077d9c514a5fdd813dcdd432eccc7773295"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf56b0b8384cfcc5142f24eeb8f837cc974f8119", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf56b0b8384cfcc5142f24eeb8f837cc974f8119", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf56b0b8384cfcc5142f24eeb8f837cc974f8119", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf56b0b8384cfcc5142f24eeb8f837cc974f8119/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b99f005cbf2fdc6968d75a13cd2c166795418b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b99f005cbf2fdc6968d75a13cd2c166795418b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b99f005cbf2fdc6968d75a13cd2c166795418b7"}], "stats": {"total": 140, "additions": 137, "deletions": 3}, "files": [{"sha": "ce4a9575a514ed7ffe1f862c3a56b01cd0b782f7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf56b0b8384cfcc5142f24eeb8f837cc974f8119/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf56b0b8384cfcc5142f24eeb8f837cc974f8119/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bf56b0b8384cfcc5142f24eeb8f837cc974f8119", "patch": "@@ -1,5 +1,14 @@\n 2016-11-15  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* doc/xml/manual/intro.xml: Document LWG 2742 status.\n+\t* doc/html/*: Regenerate.\n+\t* include/bits/basic_string.h\n+\t(basic_string(const T&, size_type, size_type, const Allocator&)): Add\n+\tconstructor for substring of basic_string_view, as per LWG 2742 but\n+\twith additional constraint to fix ambiguity.\n+\t* testsuite/21_strings/basic_string/cons/char/9.cc: New test.\n+\t* testsuite/21_strings/basic_string/cons/wchar_t/9.cc: New test.\n+\n \t* doc/xml/manual/intro.xml: Document LWG 2748 status.\n \t* include/std/optional (optional<T>::swap): Use is_nothrow_swappable_v\n \tfor exception specification."}, {"sha": "d4a39d82e896196a770349a120e6c161e99ddac2", "filename": "libstdc++-v3/doc/html/manual/bugs.html", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf56b0b8384cfcc5142f24eeb8f837cc974f8119/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf56b0b8384cfcc5142f24eeb8f837cc974f8119/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html?ref=bf56b0b8384cfcc5142f24eeb8f837cc974f8119", "patch": "@@ -496,11 +496,21 @@\n     </span></dt><dd><p>Avoid using <code class=\"code\">dynamic_cast</code> when it would be\n     ill-formed.\n     </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2583\" target=\"_top\">2583</a>:\n-       <span class=\"emphasis\"><em>There is no way to supply an allocator for <code class=\"code\"> basic_string(str, pos)</code>\n+       <span class=\"emphasis\"><em>There is no way to supply an allocator for <code class=\"code\">basic_string(str, pos)</code>\n        </em></span>\n     </span></dt><dd><p>Add new constructor\n     </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2684\" target=\"_top\">2684</a>:\n        <span class=\"emphasis\"><em><code class=\"code\">priority_queue</code> lacking comparator typedef\n        </em></span>\n     </span></dt><dd><p>Define the <code class=\"code\">value_compare</code> typedef.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2742\" target=\"_top\">2742</a>:\n+       <span class=\"emphasis\"><em>Inconsistent <code class=\"code\">string</code> interface taking <code class=\"code\">string_view</code>\n+       </em></span>\n+    </span></dt><dd><p>Add the new constructor and additionally constrain it\n+      to avoid ambiguities with non-const <code class=\"code\">charT*</code>.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2748\" target=\"_top\">2748</a>:\n+       <span class=\"emphasis\"><em>swappable traits for optionals\n+       </em></span>\n+    </span></dt><dd><p>Disable the non-member <code class=\"code\">swap</code> overload when\n+      the contained object is not swappable.\n     </p></dd></dl></div></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"license.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"status.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"setup.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">License\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../index.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a02.\u00a0Setup</td></tr></table></div></body></html>\n\\ No newline at end of file"}, {"sha": "7f2586d816045881ca99cdba0a2c9823f36950eb", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf56b0b8384cfcc5142f24eeb8f837cc974f8119/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf56b0b8384cfcc5142f24eeb8f837cc974f8119/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=bf56b0b8384cfcc5142f24eeb8f837cc974f8119", "patch": "@@ -1107,6 +1107,14 @@ requirements of the license of GCC.\n     <listitem><para>Define the <code>value_compare</code> typedef.\n     </para></listitem></varlistentry>\n \n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2742\">2742</link>:\n+       <emphasis>Inconsistent <code>string</code> interface taking <code>string_view</code>\n+       </emphasis>\n+    </term>\n+    <listitem><para>Add the new constructor and additionally constrain it\n+      to avoid ambiguities with non-const <code>charT*</code>.\n+    </para></listitem></varlistentry>\n+\n     <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2748\">2748</link>:\n        <emphasis>swappable traits for optionals\n        </emphasis>"}, {"sha": "943e88d87228a699c4e4798e3817763790e5c1af", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf56b0b8384cfcc5142f24eeb8f837cc974f8119/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf56b0b8384cfcc5142f24eeb8f837cc974f8119/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=bf56b0b8384cfcc5142f24eeb8f837cc974f8119", "patch": "@@ -585,13 +585,28 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t{ _M_construct(__beg, __end); }\n \n #if __cplusplus > 201402L\n+      /**\n+       *  @brief  Construct string from a substring of a string_view.\n+       *  @param  __t   Source string view.\n+       *  @param  __pos The index of the first character to copy from __t.\n+       *  @param  __n   The number of characters to copy from __t.\n+       *  @param  __a   Allocator to use.\n+       */\n+      template<typename _Tp, typename =\n+\t       _Require<is_convertible<_Tp, __sv_type>,\n+\t\t\t__not_<is_convertible<const _Tp&, const _CharT*>>>>\n+\tbasic_string(const _Tp& __t, size_type __pos, size_type __n,\n+\t\t     const _Alloc& __a = _Alloc())\n+\t: basic_string(__sv_type(__t).substr(__pos, __n), __a) { }\n+\n       /**\n        *  @brief  Construct string from a string_view.\n        *  @param  __sv  Source string view.\n        *  @param  __a  Allocator to use (default is default allocator).\n        */\n-      explicit basic_string(__sv_type __sv, const _Alloc& __a = _Alloc())\n-\t: basic_string(__sv.data(), __sv.size(), __a) {}\n+      explicit\n+      basic_string(__sv_type __sv, const _Alloc& __a = _Alloc())\n+      : basic_string(__sv.data(), __sv.size(), __a) { }\n #endif // C++17\n \n       /**"}, {"sha": "0024ffc889441482741fc3979d067217f2b1c4b1", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/char/9.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf56b0b8384cfcc5142f24eeb8f837cc974f8119/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F9.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf56b0b8384cfcc5142f24eeb8f837cc974f8119/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F9.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F9.cc?ref=bf56b0b8384cfcc5142f24eeb8f837cc974f8119", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run { target c++1z } }\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using C = char;\n+  using string_type = std::basic_string<C>;\n+  using view_type = std::basic_string_view<C>;\n+\n+  std::allocator<C> alloc;\n+  VERIFY( string_type(view_type(\"string\")) == \"string\" );\n+  VERIFY( string_type(view_type(\"string\"), alloc) == \"string\" );\n+\n+  // LWG 2742\n+  VERIFY( string_type(\"substring\", 3, 6) == \"string\" );\n+  VERIFY( string_type(\"substring\", 3, 6, alloc) == \"string\" );\n+  VERIFY( string_type(view_type(\"substring\"), 3, 6) == \"string\" );\n+  VERIFY( string_type(view_type(\"substring\"), 3, 6, alloc) == \"string\" );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "bf4b4403ad15f7bb77e3a7a1e7b93594b46605e9", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/wchar_t/9.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf56b0b8384cfcc5142f24eeb8f837cc974f8119/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F9.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf56b0b8384cfcc5142f24eeb8f837cc974f8119/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F9.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F9.cc?ref=bf56b0b8384cfcc5142f24eeb8f837cc974f8119", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run { target c++1z } }\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using C = wchar_t;\n+  using string_type = std::basic_string<C>;\n+  using view_type = std::basic_string_view<C>;\n+\n+  std::allocator<C> alloc;\n+  VERIFY( string_type(view_type(L\"string\")) == L\"string\" );\n+  VERIFY( string_type(view_type(L\"string\"), alloc) == L\"string\" );\n+\n+  // LWG 2742\n+  VERIFY( string_type(L\"substring\", 3, 6) == L\"string\" );\n+  VERIFY( string_type(L\"substring\", 3, 6, alloc) == L\"string\" );\n+  VERIFY( string_type(view_type(L\"substring\"), 3, 6) == L\"string\" );\n+  VERIFY( string_type(view_type(L\"substring\"), 3, 6, alloc) == L\"string\" );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}