{"sha": "f2d3cb2501aa64980e32b1ab6ef7179bf64a4dd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJkM2NiMjUwMWFhNjQ5ODBlMzJiMWFiNmVmNzE3OWJmNjRhNGRkNQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-01-20T08:22:56Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-01-20T08:22:56Z"}, "message": "re PR fortran/34784 (implicit character(s) hides type of selected_int_kind intrinsic)\n\n2008-01-20  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/34784\n\t* array.c (gfc_check_constructor_type): Clear the expression ts\n\tso that the checking starts from the deepest level of array\n\tconstructor.\n\t* primary.c (match_varspec): If an unknown type is changed to\n\tdefault character and the attempt to match a substring fails,\n\tchange it back to unknown.\n\n\tPR fortran/34785\n\t* trans-array.c (gfc_add_loop_ss_code) : If ss->string_length is\n\tNULL for an array constructor, use the cl.length expression to\n\tbuild it.\n\t(gfc_conv_array_parameter): Change call to gfc_evaluate_now to\n\ta tree assignment.\n\n\n2008-01-20  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/34784\n\t* gfortran.dg/array_constructor_20.f90: New test.\n\t* gfortran.dg/mapping_2.f90: Correct ubound expression for h4.\n\n\tPR fortran/34785\n\t* gfortran.dg/array_constructor_21.f90: New test.\n\nFrom-SVN: r131675", "tree": {"sha": "9d64879d44fe6ed386e45de8c13efc7841555948", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d64879d44fe6ed386e45de8c13efc7841555948"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2d3cb2501aa64980e32b1ab6ef7179bf64a4dd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d3cb2501aa64980e32b1ab6ef7179bf64a4dd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2d3cb2501aa64980e32b1ab6ef7179bf64a4dd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d3cb2501aa64980e32b1ab6ef7179bf64a4dd5/comments", "author": null, "committer": null, "parents": [{"sha": "2045a99abbd89083bbec5826e71c01bacd153dd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2045a99abbd89083bbec5826e71c01bacd153dd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2045a99abbd89083bbec5826e71c01bacd153dd3"}], "stats": {"total": 104, "additions": 103, "deletions": 1}, "files": [{"sha": "41fc1adb575501cb16bfcd32533d92c992bd1a50", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d3cb2501aa64980e32b1ab6ef7179bf64a4dd5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d3cb2501aa64980e32b1ab6ef7179bf64a4dd5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f2d3cb2501aa64980e32b1ab6ef7179bf64a4dd5", "patch": "@@ -1,3 +1,20 @@\n+2008-01-20  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/34784\n+\t* array.c (gfc_check_constructor_type): Clear the expression ts\n+\tso that the checking starts from the deepest level of array\n+\tconstructor.\n+\t* primary.c (match_varspec): If an unknown type is changed to\n+\tdefault character and the attempt to match a substring fails,\n+\tchange it back to unknown.\n+\n+\tPR fortran/34785\n+\t* trans-array.c (gfc_add_loop_ss_code) : If ss->string_length is\n+\tNULL for an array constructor, use the cl.length expression to\n+\tbuild it.\n+\t(gfc_conv_array_parameter): Change call to gfc_evaluate_now to\n+\ta tree assignment.\n+\n 2008-01-19  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/34817"}, {"sha": "116937b4ceeebc350a0c759d7f554ad8c4fbf129", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d3cb2501aa64980e32b1ab6ef7179bf64a4dd5/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d3cb2501aa64980e32b1ab6ef7179bf64a4dd5/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=f2d3cb2501aa64980e32b1ab6ef7179bf64a4dd5", "patch": "@@ -1025,6 +1025,7 @@ gfc_check_constructor_type (gfc_expr *e)\n \n   cons_state = CONS_START;\n   gfc_clear_ts (&constructor_ts);\n+  gfc_clear_ts (&e->ts);\n \n   t = check_constructor_type (e->value.constructor);\n   if (t == SUCCESS && e->ts.type == BT_UNKNOWN)"}, {"sha": "1895ca07f56aa4dc1da4853ea7f39aa1bed0f36d", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d3cb2501aa64980e32b1ab6ef7179bf64a4dd5/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d3cb2501aa64980e32b1ab6ef7179bf64a4dd5/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=f2d3cb2501aa64980e32b1ab6ef7179bf64a4dd5", "patch": "@@ -1676,6 +1676,7 @@ match_varspec (gfc_expr *primary, int equiv_flag)\n   gfc_component *component;\n   gfc_symbol *sym = primary->symtree->n.sym;\n   match m;\n+  bool unknown;\n \n   tail = NULL;\n \n@@ -1753,12 +1754,14 @@ match_varspec (gfc_expr *primary, int equiv_flag)\n     }\n \n check_substring:\n+  unknown = false;\n   if (primary->ts.type == BT_UNKNOWN)\n     {\n       if (gfc_get_default_type (sym, sym->ns)->type == BT_CHARACTER)\n        {\n \t gfc_set_default_type (sym, 0, sym->ns);\n \t primary->ts = sym->ts;\n+\t unknown = true;\n        }\n     }\n \n@@ -1781,6 +1784,8 @@ match_varspec (gfc_expr *primary, int equiv_flag)\n \t  break;\n \n \tcase MATCH_NO:\n+\t  if (unknown)\n+\t    gfc_clear_ts (&primary->ts);\n \t  break;\n \n \tcase MATCH_ERROR:"}, {"sha": "08c2a80d85ca43710c4b70adf5764177cdf48322", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d3cb2501aa64980e32b1ab6ef7179bf64a4dd5/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d3cb2501aa64980e32b1ab6ef7179bf64a4dd5/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=f2d3cb2501aa64980e32b1ab6ef7179bf64a4dd5", "patch": "@@ -1906,6 +1906,18 @@ gfc_add_loop_ss_code (gfc_loopinfo * loop, gfc_ss * ss, bool subscript)\n \t  break;\n \n \tcase GFC_SS_CONSTRUCTOR:\n+\t  if (ss->expr->ts.type == BT_CHARACTER\n+\t\t&& ss->string_length== NULL\n+\t\t&& ss->expr->ts.cl\n+\t\t&& ss->expr->ts.cl->length)\n+\t    {\n+\t      gfc_init_se (&se, NULL);\n+\t      gfc_conv_expr_type (&se, ss->expr->ts.cl->length,\n+\t\t\t\t  gfc_charlen_type_node);\n+\t      ss->string_length = se.expr;\n+\t      gfc_add_block_to_block (&loop->pre, &se.pre);\n+\t      gfc_add_block_to_block (&loop->post, &se.post);\n+\t    }\n \t  gfc_trans_array_constructor (loop, ss);\n \t  break;\n \n@@ -5042,7 +5054,7 @@ gfc_conv_array_parameter (gfc_se * se, gfc_expr * expr, gfc_ss * ss, int g77)\n     {\n       get_array_ctor_strlen (&se->pre, expr->value.constructor, &tmp);\n       expr->ts.cl->backend_decl = tmp;\n-      se->string_length = gfc_evaluate_now (tmp, &se->pre);\n+      se->string_length = tmp;\n     }\n \n   /* Is this the result of the enclosing procedure?  */"}, {"sha": "c64655febb23eb3fb4a794a5b09a129bf02fa1a5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d3cb2501aa64980e32b1ab6ef7179bf64a4dd5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d3cb2501aa64980e32b1ab6ef7179bf64a4dd5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f2d3cb2501aa64980e32b1ab6ef7179bf64a4dd5", "patch": "@@ -1,3 +1,12 @@\n+2008-01-20  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/34784\n+\t* gfortran.dg/array_constructor_20.f90: New test.\n+\t* gfortran.dg/mapping_2.f90: Correct ubound expression for h4.\n+\n+\tPR fortran/34785\n+\t* gfortran.dg/array_constructor_21.f90: New test.\n+\n 2008-01-20  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/34795"}, {"sha": "de7246d205e8da6a7b748f79cabb411fe2b15872", "filename": "gcc/testsuite/gfortran.dg/array_constructor_20.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d3cb2501aa64980e32b1ab6ef7179bf64a4dd5/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_20.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d3cb2501aa64980e32b1ab6ef7179bf64a4dd5/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_20.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_20.f90?ref=f2d3cb2501aa64980e32b1ab6ef7179bf64a4dd5", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do compile }\n+!\n+! PR fortran/34784, in which the intrinsic expression would be\n+! given the implicit type.\n+!\n+! Contributed by Dick Hendrickson <dick.hendrickson@gmail.com>\n+!\n+MODULE m\n+  implicit character(s)\n+  INTEGER :: I(1) = (/ (SELECTED_INT_KIND(J),J=1,1) /)\n+END MODULE m\n+\n+MODULE s_TESTS\n+  IMPLICIT CHARACTER (P)\n+CONTAINS\n+  subroutine simple (u,j1)\n+    optional ::  j1\n+    if (present (j1)) stop\n+  end subroutine\n+END MODULE s_TESTS\n+\n+! { dg-final { cleanup-modules \"m s_TESTS\" } }"}, {"sha": "f9e612ceff3519c2f42eed8398ef46f157fbab4f", "filename": "gcc/testsuite/gfortran.dg/array_constructor_21.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d3cb2501aa64980e32b1ab6ef7179bf64a4dd5/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_21.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d3cb2501aa64980e32b1ab6ef7179bf64a4dd5/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_21.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_21.f90?ref=f2d3cb2501aa64980e32b1ab6ef7179bf64a4dd5", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do compile }\n+!\n+! PR fortran/34785, in which the character length of BA_T was not\n+! passed on to the array constructor argument of SEQ.\n+!\n+! Contributed by Dick Hendrickson <dick.hendrickson@gmail.com>\n+!\n+      MODULE o_TYPE_DEFS\n+        implicit none\n+        TYPE SEQ\n+          SEQUENCE\n+          CHARACTER(len = 9) ::  BA(2)\n+        END TYPE SEQ\n+        CHARACTER(len = 9)   ::  BA_T(2)\n+        CHARACTER(LEN = 9)   ::  CA_T(1,2)\n+      END MODULE o_TYPE_DEFS\n+\n+      MODULE TESTS\n+        use o_type_defs\n+        implicit none\n+      CONTAINS\n+        SUBROUTINE OG0015(UDS0L)\n+          TYPE(SEQ)          UDS0L\n+          integer :: j1\n+          UDS0L = SEQ((/ (BA_T(J1),J1=1,2) /))\n+        END SUBROUTINE\n+      END MODULE TESTS\n+\n+      use o_type_defs\n+      CONTAINS\n+        SUBROUTINE OG0015(UDS0L)\n+          TYPE(SEQ)          UDS0L\n+          UDS0L = SEQ(RESHAPE ( (/ ((CA_T(J1,J2), J1 = 1, 1), J2 = 1, 2)/),(/2/)))\n+        END SUBROUTINE\n+      END\n+! { dg-final { cleanup-modules \"o_TYPE_DEFS TESTS\" } }"}]}