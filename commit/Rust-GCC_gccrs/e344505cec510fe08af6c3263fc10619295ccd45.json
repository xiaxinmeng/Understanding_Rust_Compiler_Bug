{"sha": "e344505cec510fe08af6c3263fc10619295ccd45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM0NDUwNWNlYzUxMGZlMDhhZjZjMzI2M2ZjMTA2MTkyOTVjY2Q0NQ==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2015-01-23T01:59:23Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2015-01-23T01:59:23Z"}, "message": "re PR fortran/61933 (Inquire on internal units)\n\n2015-01-22  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR fortran/61933\n\t* libgfortran.h:\n\t* trans-io.c (set_parameter_value): Delete use of has_iostat.\n\tRedefine to not generate any runtime error check calls.\n\t(set_parameter_value_chk): Rename of the former\n\tset_parameter_value with the runtime error checks and fix\n\twhitespace. (set_parameter_value_inquire): New function that\n\tbuilds a runtime conditional block to set the INQUIRE\n\tcommon parameter block unit number to -2 when unit numbers\n\texceed positive KIND=4 limits. (gfc_trans_open): Whitespace.\n\tFor unit, use the renamed set_parameter_value_chk.\n\t(gfc_trans_close): Likewise use renamed function.\n\t(build_filepos): Whitespace and use renamed function.\n\t(gfc_trans_inquire): Whitespace and for unit use\n\tset_parameter_value and set_parameter_value_inquire.\n\t(gfc_trans_wait): Remove p->iostat from call to\n\tset_parameter_value. Use new set_parameter_value_chk for unit.\n\t(build_dt): Use the new set_parameter_value without p->iostat\n\tand fix whitespace. Use set_parameter_value_chk for unit.\n\nFrom-SVN: r220023", "tree": {"sha": "390459fc3cf8fd7ea5710e1ad2927e7000f97a36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/390459fc3cf8fd7ea5710e1ad2927e7000f97a36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e344505cec510fe08af6c3263fc10619295ccd45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e344505cec510fe08af6c3263fc10619295ccd45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e344505cec510fe08af6c3263fc10619295ccd45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e344505cec510fe08af6c3263fc10619295ccd45/comments", "author": null, "committer": null, "parents": [{"sha": "c92e723dc86c92732a565a6879b6608b1180ec49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c92e723dc86c92732a565a6879b6608b1180ec49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c92e723dc86c92732a565a6879b6608b1180ec49"}], "stats": {"total": 164, "additions": 142, "deletions": 22}, "files": [{"sha": "d2742c88f94b4b4afdf2d291101be6b60242096e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e344505cec510fe08af6c3263fc10619295ccd45/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e344505cec510fe08af6c3263fc10619295ccd45/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e344505cec510fe08af6c3263fc10619295ccd45", "patch": "@@ -1,3 +1,25 @@\n+2015-01-22  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR fortran/61933\n+\t* libgfortran.h:\n+\t* trans-io.c (set_parameter_value): Delete use of has_iostat.\n+\tRedefine to not generate any runtime error check calls.\n+\t(set_parameter_value_chk): Rename of the former\n+\tset_parameter_value with the runtime error checks and fix\n+\twhitespace. (set_parameter_value_inquire): New function that\n+\tbuilds a runtime conditional block to set the INQUIRE\n+\tcommon parameter block unit number to -2 when unit numbers\n+\texceed positive KIND=4 limits. (gfc_trans_open): Whitespace.\n+\tFor unit, use the renamed set_parameter_value_chk.\n+\t(gfc_trans_close): Likewise use renamed function.\n+\t(build_filepos): Whitespace and use renamed function.\n+\t(gfc_trans_inquire): Whitespace and for unit use\n+\tset_parameter_value and set_parameter_value_inquire.\n+\t(gfc_trans_wait): Remove p->iostat from call to\n+\tset_parameter_value. Use new set_parameter_value_chk for unit.\n+\t(build_dt): Use the new set_parameter_value without p->iostat\n+\tand fix whitespace. Use set_parameter_value_chk for unit.\n+\n 2015-01-21  Thomas Koenig  <tkoenig@netcologne.de>\n \n \tPR fortran/57023\n@@ -95,6 +117,7 @@\n \t* decl.c (match_pointer_init): Error out if resolution of init expr\n \tfailed.\n \n+>>>>>>> .r219925\n 2015-01-15  Tobias Burnus  <burnus@net-b.de>\n \n \t* openmp.c (check_symbol_not_pointer, resolve_oacc_data_clauses,"}, {"sha": "df111624462f415c350f5c8b16fb007b3817df61", "filename": "gcc/fortran/libgfortran.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e344505cec510fe08af6c3263fc10619295ccd45/gcc%2Ffortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e344505cec510fe08af6c3263fc10619295ccd45/gcc%2Ffortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flibgfortran.h?ref=e344505cec510fe08af6c3263fc10619295ccd45", "patch": "@@ -68,6 +68,10 @@ along with GCC; see the file COPYING3.  If not see\n \t\t\t\t| GFC_RTCHECK_RECURSION | GFC_RTCHECK_DO \\\n \t\t\t\t| GFC_RTCHECK_POINTER | GFC_RTCHECK_MEM)\n \n+/* Special unit numbers used to convey certain conditions.  Numbers -3\n+   thru -9 available.  NEWUNIT values start at -10.  */\n+#define GFC_INTERNAL_UNIT -1\n+#define GFC_INVALID_UNIT  -2\n \n /* Possible values for the CONVERT I/O specifier.  */\n /* Keep in sync with GFC_FLAG_CONVERT_* in gcc/flags.h.  */"}, {"sha": "aa147066fd1b4dd6fe9be3593e1cb9401d2d7ff7", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 115, "deletions": 22, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e344505cec510fe08af6c3263fc10619295ccd45/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e344505cec510fe08af6c3263fc10619295ccd45/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=e344505cec510fe08af6c3263fc10619295ccd45", "patch": "@@ -512,7 +512,37 @@ set_parameter_const (stmtblock_t *block, tree var, enum iofield type,\n    st_parameter_XXX structure.  This is a pass by value.  */\n \n static unsigned int\n-set_parameter_value (stmtblock_t *block, bool has_iostat, tree var,\n+set_parameter_value (stmtblock_t *block, tree var, enum iofield type,\n+\t\t     gfc_expr *e)\n+{\n+  gfc_se se;\n+  tree tmp;\n+  gfc_st_parameter_field *p = &st_parameter_field[type];\n+  tree dest_type = TREE_TYPE (p->field);\n+\n+  gfc_init_se (&se, NULL);\n+  gfc_conv_expr_val (&se, e);\n+\n+  se.expr = convert (dest_type, se.expr);\n+  gfc_add_block_to_block (block, &se.pre);\n+\n+  if (p->param_type == IOPARM_ptype_common)\n+    var = fold_build3_loc (input_location, COMPONENT_REF,\n+\t\t\t   st_parameter[IOPARM_ptype_common].type,\n+\t\t\t   var, TYPE_FIELDS (TREE_TYPE (var)), NULL_TREE);\n+\n+  tmp = fold_build3_loc (input_location, COMPONENT_REF, dest_type, var,\n+\t\t\t p->field, NULL_TREE);\n+  gfc_add_modify (block, tmp, se.expr);\n+  return p->mask;\n+}\n+\n+\n+/* Similar to set_parameter_value except generate runtime\n+   error checks.  */\n+\n+static unsigned int\n+set_parameter_value_chk (stmtblock_t *block, bool has_iostat, tree var,\n \t\t     enum iofield type, gfc_expr *e)\n {\n   gfc_se se;\n@@ -550,7 +580,6 @@ set_parameter_value (stmtblock_t *block, bool has_iostat, tree var,\n       gfc_trans_io_runtime_check (has_iostat, cond, var, LIBERROR_BAD_UNIT,\n \t\t\t\t  \"Unit number in I/O statement too large\",\n \t\t\t\t  &se.pre);\n-\n     }\n \n   se.expr = convert (dest_type, se.expr);\n@@ -568,6 +597,70 @@ set_parameter_value (stmtblock_t *block, bool has_iostat, tree var,\n }\n \n \n+/* Build code to check the unit range if KIND=8 is used.  Similar to\n+   set_parameter_value_chk but we do not generate error calls for\n+   inquire statements.  */\n+\n+static unsigned int\n+set_parameter_value_inquire (stmtblock_t *block, tree var,\n+\t\t\t     enum iofield type, gfc_expr *e)\n+{\n+  gfc_se se;\n+  gfc_st_parameter_field *p = &st_parameter_field[type];\n+  tree dest_type = TREE_TYPE (p->field);\n+\n+  gfc_init_se (&se, NULL);\n+  gfc_conv_expr_val (&se, e);\n+\n+  /* If we're inquiring on a UNIT number, we need to check to make\n+     sure it exists for larger than kind = 4.  */\n+  if (type == IOPARM_common_unit && e->ts.kind > 4)\n+    {\n+      stmtblock_t newblock;\n+      tree cond1, cond2, cond3, val, body;\n+      int i;\n+\n+      /* Don't evaluate the UNIT number multiple times.  */\n+      se.expr = gfc_evaluate_now (se.expr, &se.pre);\n+\n+      /* UNIT numbers should be greater than zero.  */\n+      i = gfc_validate_kind (BT_INTEGER, 4, false);\n+      cond1 = build2_loc (input_location, LT_EXPR, boolean_type_node,\n+\t\t\t  se.expr,\n+\t\t\t  fold_convert (TREE_TYPE (se.expr),\n+\t\t\t  integer_zero_node));\n+      /* UNIT numbers should be less than the max.  */\n+      val = gfc_conv_mpz_to_tree (gfc_integer_kinds[i].huge, 4);\n+      cond2 = build2_loc (input_location, GT_EXPR, boolean_type_node,\n+\t\t\t  se.expr,\n+\t\t\t  fold_convert (TREE_TYPE (se.expr), val));\n+      cond3 = build2_loc (input_location, TRUTH_OR_EXPR,\n+\t\t\t  boolean_type_node, cond1, cond2);\n+\n+      gfc_start_block (&newblock);\n+\n+      /* The unit number GFC_INVALID_UNIT is reserved.  No units can\n+\t ever have this value.  It is used here to signal to the\n+\t runtime library that the inquire unit number is outside the\n+\t allowable range and so cannot exist.  It is needed when\n+\t -fdefault-integer-8 is used.  */\n+      set_parameter_const (&newblock, var, IOPARM_common_unit,\n+\t\t\t   GFC_INVALID_UNIT);\n+\n+      body = gfc_finish_block (&newblock);\n+\n+      cond3 = gfc_unlikely (cond3, PRED_FORTRAN_FAIL_IO);    \n+      var = build3_v (COND_EXPR, cond3, body, build_empty_stmt (input_location));\n+      gfc_add_expr_to_block (&se.pre, var);\n+    }\n+\n+  se.expr = convert (dest_type, se.expr);\n+  gfc_add_block_to_block (block, &se.pre);\n+\n+  return p->mask;\n+}\n+\n+\n /* Generate code to store a non-string I/O parameter into the\n    st_parameter_XXX structure.  This is pass by reference.  */\n \n@@ -978,7 +1071,7 @@ gfc_trans_open (gfc_code * code)\n     mask |= set_string (&block, &post_block, var, IOPARM_open_form, p->form);\n \n   if (p->recl)\n-    mask |= set_parameter_value (&block, p->iostat, var, IOPARM_open_recl_in,\n+    mask |= set_parameter_value (&block, var, IOPARM_open_recl_in,\n \t\t\t\t p->recl);\n \n   if (p->blank)\n@@ -1029,7 +1122,7 @@ gfc_trans_open (gfc_code * code)\n   set_parameter_const (&block, var, IOPARM_common_flags, mask);\n \n   if (p->unit)\n-    set_parameter_value (&block, p->iostat, var, IOPARM_common_unit, p->unit);\n+    set_parameter_value_chk (&block, p->iostat, var, IOPARM_common_unit, p->unit);\n   else\n     set_parameter_const (&block, var, IOPARM_common_unit, 0);\n \n@@ -1082,7 +1175,7 @@ gfc_trans_close (gfc_code * code)\n   set_parameter_const (&block, var, IOPARM_common_flags, mask);\n \n   if (p->unit)\n-    set_parameter_value (&block, p->iostat, var, IOPARM_common_unit, p->unit);\n+    set_parameter_value_chk (&block, p->iostat, var, IOPARM_common_unit, p->unit);\n   else\n     set_parameter_const (&block, var, IOPARM_common_unit, 0);\n \n@@ -1124,16 +1217,17 @@ build_filepos (tree function, gfc_code * code)\n \t\t\tp->iomsg);\n \n   if (p->iostat)\n-    mask |= set_parameter_ref (&block, &post_block, var, IOPARM_common_iostat,\n-\t\t\t       p->iostat);\n+    mask |= set_parameter_ref (&block, &post_block, var,\n+\t\t\t       IOPARM_common_iostat, p->iostat);\n \n   if (p->err)\n     mask |= IOPARM_common_err;\n \n   set_parameter_const (&block, var, IOPARM_common_flags, mask);\n \n   if (p->unit)\n-    set_parameter_value (&block, p->iostat, var, IOPARM_common_unit, p->unit);\n+    set_parameter_value_chk (&block, p->iostat, var, IOPARM_common_unit,\n+\t\t\t     p->unit);\n   else\n     set_parameter_const (&block, var, IOPARM_common_unit, 0);\n \n@@ -1225,10 +1319,8 @@ gfc_trans_inquire (gfc_code * code)\n \t\t\tp->file);\n \n   if (p->exist)\n-    {\n-      mask |= set_parameter_ref (&block, &post_block, var, IOPARM_inquire_exist,\n+    mask |= set_parameter_ref (&block, &post_block, var, IOPARM_inquire_exist,\n \t\t\t\t p->exist);\n-    }\n \n   if (p->opened)\n     mask |= set_parameter_ref (&block, &post_block, var, IOPARM_inquire_opened,\n@@ -1360,7 +1452,10 @@ gfc_trans_inquire (gfc_code * code)\n   set_parameter_const (&block, var, IOPARM_common_flags, mask);\n \n   if (p->unit)\n-    set_parameter_value (&block, p->iostat, var, IOPARM_common_unit, p->unit);\n+    {\n+      set_parameter_value (&block, var, IOPARM_common_unit, p->unit);\n+      set_parameter_value_inquire (&block, var, IOPARM_common_unit, p->unit);\n+    }\n   else\n     set_parameter_const (&block, var, IOPARM_common_unit, 0);\n \n@@ -1407,12 +1502,12 @@ gfc_trans_wait (gfc_code * code)\n     mask |= IOPARM_common_err;\n \n   if (p->id)\n-    mask |= set_parameter_value (&block, p->iostat, var, IOPARM_wait_id, p->id);\n+    mask |= set_parameter_value (&block, var, IOPARM_wait_id, p->id);\n \n   set_parameter_const (&block, var, IOPARM_common_flags, mask);\n \n   if (p->unit)\n-    set_parameter_value (&block, p->iostat, var, IOPARM_common_unit, p->unit);\n+    set_parameter_value_chk (&block, p->iostat, var, IOPARM_common_unit, p->unit);\n \n   tmp = gfc_build_addr_expr (NULL_TREE, var);\n   tmp = build_call_expr_loc (input_location,\n@@ -1706,12 +1801,11 @@ build_dt (tree function, gfc_code * code)\n \t\t\t\t   IOPARM_dt_id, dt->id);\n \n       if (dt->pos)\n-\tmask |= set_parameter_value (&block, dt->iostat, var, IOPARM_dt_pos,\n-\t\t\t\t     dt->pos);\n+\tmask |= set_parameter_value (&block, var, IOPARM_dt_pos, dt->pos);\n \n       if (dt->asynchronous)\n-\tmask |= set_string (&block, &post_block, var, IOPARM_dt_asynchronous,\n-\t\t\t    dt->asynchronous);\n+\tmask |= set_string (&block, &post_block, var,\n+\t\t\t    IOPARM_dt_asynchronous, dt->asynchronous);\n \n       if (dt->blank)\n \tmask |= set_string (&block, &post_block, var, IOPARM_dt_blank,\n@@ -1738,8 +1832,7 @@ build_dt (tree function, gfc_code * code)\n \t\t\t    dt->sign);\n \n       if (dt->rec)\n-\tmask |= set_parameter_value (&block, dt->iostat, var, IOPARM_dt_rec,\n-\t\t\t\t     dt->rec);\n+\tmask |= set_parameter_value (&block, var, IOPARM_dt_rec, dt->rec);\n \n       if (dt->advance)\n \tmask |= set_string (&block, &post_block, var, IOPARM_dt_advance,\n@@ -1791,8 +1884,8 @@ build_dt (tree function, gfc_code * code)\n \tset_parameter_const (&block, var, IOPARM_common_flags, mask);\n \n       if (dt->io_unit && dt->io_unit->ts.type == BT_INTEGER)\n-\tset_parameter_value (&block, dt->iostat, var, IOPARM_common_unit,\n-\t\t\t     dt->io_unit);\n+\tset_parameter_value_chk (&block, dt->iostat, var,\n+\t\t\t\t IOPARM_common_unit, dt->io_unit);\n     }\n   else\n     set_parameter_const (&block, var, IOPARM_common_flags, mask);"}]}