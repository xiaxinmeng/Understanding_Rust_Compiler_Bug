{"sha": "45a8cd256934be3770f7e000db7b13f10eabee9a", "node_id": "C_kwDOANBUbNoAKDQ1YThjZDI1NjkzNGJlMzc3MGY3ZTAwMGRiN2IxM2YxMGVhYmVlOWE", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-09-24T14:35:20Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-09-28T19:22:50Z"}, "message": "libstdc++: Fix _OutputIteratorConcept checks in algorithms\n\nThe _OutputIteratorConcept should be checked using the correct value\ncategory. The std::move_backward and std::copy_backward algorithms\nshould use _OutputIteratorConcept instead of _ConvertibleConcept.\n\nIn order to use the correct value category, the concept should use a\nfunction that returns _ValueT instead of using an lvalue data member.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/boost_concept_check.h (_OutputIteratorConcept):\n\tUse a function to preserve value category of the type.\n\t* include/bits/stl_algobase.h (copy, move, fill_n): Use a\n\treference as the second argument for _OutputIteratorConcept.\n\t(copy_backward, move_backward): Use _OutputIteratorConcept\n\tinstead of _ConvertibleConcept.", "tree": {"sha": "0a8d9d8b97964427159ba57c027d4821497039b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a8d9d8b97964427159ba57c027d4821497039b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45a8cd256934be3770f7e000db7b13f10eabee9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45a8cd256934be3770f7e000db7b13f10eabee9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45a8cd256934be3770f7e000db7b13f10eabee9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45a8cd256934be3770f7e000db7b13f10eabee9a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82626be2d633a9802a8b08727ef51c627e37fee5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82626be2d633a9802a8b08727ef51c627e37fee5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82626be2d633a9802a8b08727ef51c627e37fee5"}], "stats": {"total": 20, "additions": 9, "deletions": 11}, "files": [{"sha": "ba36c24abec8bceecaa3d0619ecf7093b5207bee", "filename": "libstdc++-v3/include/bits/boost_concept_check.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45a8cd256934be3770f7e000db7b13f10eabee9a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45a8cd256934be3770f7e000db7b13f10eabee9a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h?ref=45a8cd256934be3770f7e000db7b13f10eabee9a", "patch": "@@ -464,10 +464,10 @@ struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };\n       __function_requires< _AssignableConcept<_Tp> >();\n       ++__i;                            // require preincrement operator\n       __i++;                            // require postincrement operator\n-      *__i++ = __t;                     // require postincrement and assignment\n+      *__i++ = __val();                 // require postincrement and assignment\n     }\n     _Tp __i;\n-    _ValueT __t;\n+    _ValueT __val() const;\n   };\n \n   template <class _Tp>"}, {"sha": "e1443b8a92a6e3250ddbfc0ba222ce5411ade561", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45a8cd256934be3770f7e000db7b13f10eabee9a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45a8cd256934be3770f7e000db7b13f10eabee9a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=45a8cd256934be3770f7e000db7b13f10eabee9a", "patch": "@@ -613,7 +613,7 @@ _GLIBCXX_END_NAMESPACE_CONTAINER\n       // concept requirements\n       __glibcxx_function_requires(_InputIteratorConcept<_II>)\n       __glibcxx_function_requires(_OutputIteratorConcept<_OI,\n-\t    typename iterator_traits<_II>::value_type>)\n+\t    typename iterator_traits<_II>::reference>)\n       __glibcxx_requires_can_increment_range(__first, __last, __result);\n \n       return std::__copy_move_a<__is_move_iterator<_II>::__value>\n@@ -646,7 +646,7 @@ _GLIBCXX_END_NAMESPACE_CONTAINER\n       // concept requirements\n       __glibcxx_function_requires(_InputIteratorConcept<_II>)\n       __glibcxx_function_requires(_OutputIteratorConcept<_OI,\n-\t    typename iterator_traits<_II>::value_type>)\n+\t    typename iterator_traits<_II>::value_type&&>)\n       __glibcxx_requires_can_increment_range(__first, __last, __result);\n \n       return std::__copy_move_a<true>(std::__miter_base(__first),\n@@ -850,9 +850,8 @@ _GLIBCXX_END_NAMESPACE_CONTAINER\n       // concept requirements\n       __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)\n       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)\n-      __glibcxx_function_requires(_ConvertibleConcept<\n-\t    typename iterator_traits<_BI1>::value_type,\n-\t    typename iterator_traits<_BI2>::value_type>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_BI2,\n+\t    typename iterator_traits<_BI1>::reference>)\n       __glibcxx_requires_can_decrement_range(__first, __last, __result);\n \n       return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>\n@@ -886,9 +885,8 @@ _GLIBCXX_END_NAMESPACE_CONTAINER\n       // concept requirements\n       __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)\n       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)\n-      __glibcxx_function_requires(_ConvertibleConcept<\n-\t    typename iterator_traits<_BI1>::value_type,\n-\t    typename iterator_traits<_BI2>::value_type>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_BI2,\n+\t    typename iterator_traits<_BI1>::value_type&&>)\n       __glibcxx_requires_can_decrement_range(__first, __last, __result);\n \n       return std::__copy_move_backward_a<true>(std::__miter_base(__first),\n@@ -1144,7 +1142,7 @@ _GLIBCXX_END_NAMESPACE_CONTAINER\n     fill_n(_OI __first, _Size __n, const _Tp& __value)\n     {\n       // concept requirements\n-      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OI, const _Tp&>)\n \n       return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,\n \t\t\t       std::__iterator_category(__first));"}]}