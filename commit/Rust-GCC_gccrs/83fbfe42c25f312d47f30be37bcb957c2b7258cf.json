{"sha": "83fbfe42c25f312d47f30be37bcb957c2b7258cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNmYmZlNDJjMjVmMzEyZDQ3ZjMwYmUzN2JjYjk1N2MyYjcyNThjZg==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2005-06-21T00:24:59Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2005-06-21T00:24:59Z"}, "message": "Index: include/ChangeLog\n2005-06-20  Geoffrey Keating  <geoffk@apple.com>\n\n\t* libiberty.h (strverscmp): Prototype.\n\nIndex: libiberty/ChangeLog\n2005-06-20  Geoffrey Keating  <geoffk@apple.com>\n\n\t* strverscmp.c: New.\n\t* Makefile.in (CFILES): Add strverscmp.c.\n\t(CONFIGURED_OFILES): Add strverscmp.o.\n\t(strverscmp.o): New rule.\n\t(stamp-functions): Add $(srcdir) to files in source directory.\n\t* configure.ac (funcs): Add strverscmp.\n\t(AC_CHECK_FUNCS): Add strverscmp.\n\t* configure: Regenerate.\n\t* functions.texi: Regenerate.\n\nFrom-SVN: r101226", "tree": {"sha": "5aa8cd16ebc0ee846618de6cc23fdf119b58e704", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5aa8cd16ebc0ee846618de6cc23fdf119b58e704"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83fbfe42c25f312d47f30be37bcb957c2b7258cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83fbfe42c25f312d47f30be37bcb957c2b7258cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83fbfe42c25f312d47f30be37bcb957c2b7258cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83fbfe42c25f312d47f30be37bcb957c2b7258cf/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "76243d1022e8ee3f85500acfe283e8257b2e3484", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76243d1022e8ee3f85500acfe283e8257b2e3484", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76243d1022e8ee3f85500acfe283e8257b2e3484"}], "stats": {"total": 332, "additions": 320, "deletions": 12}, "files": [{"sha": "44428f60c1663e92efe980faf999d4a203fe8af6", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83fbfe42c25f312d47f30be37bcb957c2b7258cf/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83fbfe42c25f312d47f30be37bcb957c2b7258cf/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=83fbfe42c25f312d47f30be37bcb957c2b7258cf", "patch": "@@ -1,3 +1,7 @@\n+2005-06-20  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* libiberty.h (strverscmp): Prototype. \n+\n 2005-06-06  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* libiberty.h (XOBFINISH): New."}, {"sha": "6fb5e19ccd511fb5adefe1f1bd6b853311a92446", "filename": "include/libiberty.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83fbfe42c25f312d47f30be37bcb957c2b7258cf/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83fbfe42c25f312d47f30be37bcb957c2b7258cf/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=83fbfe42c25f312d47f30be37bcb957c2b7258cf", "patch": "@@ -540,6 +540,11 @@ extern int snprintf (char *, size_t, const char *, ...) ATTRIBUTE_PRINTF_3;\n extern int vsnprintf (char *, size_t, const char *, va_list) ATTRIBUTE_PRINTF(3,0);\n #endif\n \n+#if defined(HAVE_DECL_STRVERSCMP) && !HAVE_DECL_STRVERSCMP\n+/* Compare version strings.  */\n+extern int strverscmp (const char *, const char *);\n+#endif\n+\n #define ARRAY_SIZE(a) (sizeof (a) / sizeof ((a)[0]))\n \n /* Drastically simplified alloca configurator.  If we're using GCC,"}, {"sha": "04ab848a675d9ec0845653d41d392c7b3498c620", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83fbfe42c25f312d47f30be37bcb957c2b7258cf/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83fbfe42c25f312d47f30be37bcb957c2b7258cf/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=83fbfe42c25f312d47f30be37bcb957c2b7258cf", "patch": "@@ -1,3 +1,15 @@\n+2005-06-20  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* strverscmp.c: New.\n+\t* Makefile.in (CFILES): Add strverscmp.c.\n+\t(CONFIGURED_OFILES): Add strverscmp.o.\n+\t(strverscmp.o): New rule.\n+\t(stamp-functions): Add $(srcdir) to files in source directory.\n+\t* configure.ac (funcs): Add strverscmp.\n+\t(AC_CHECK_FUNCS): Add strverscmp.\n+\t* configure: Regenerate.\n+\t* functions.texi: Regenerate.\n+\n 2005-05-28  Eli Zaretskii  <eliz@gnu.org>\n \n \t* configure.ac: Add snprintf and vsnprintf to AC_CHEK_DECLS."}, {"sha": "67d61972f4a529810c754549f1bdb51910001b59", "filename": "libiberty/Makefile.in", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83fbfe42c25f312d47f30be37bcb957c2b7258cf/libiberty%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83fbfe42c25f312d47f30be37bcb957c2b7258cf/libiberty%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FMakefile.in?ref=83fbfe42c25f312d47f30be37bcb957c2b7258cf", "patch": "@@ -1,6 +1,6 @@\n #\n # Makefile\n-#   Copyright (C) 1990, 91-99, 2000, 2001, 2002, 2003, 2004\n+#   Copyright (C) 1990, 91-99, 2000, 2001, 2002, 2003, 2004, 2005\n #   Free Software Foundation\n #\n # This file is part of the libiberty library.\n@@ -151,7 +151,7 @@ CFILES = alloca.c argv.c asprintf.c atexit.c\t\t\t\t\\\n \tsafe-ctype.c setenv.c sigsetmask.c snprintf.c sort.c spaces.c\t\\\n \t splay-tree.c stpcpy.c stpncpy.c strcasecmp.c strchr.c strdup.c\t\\\n \t strerror.c strncasecmp.c strncmp.c strrchr.c strsignal.c\t\\\n-\t strstr.c strtod.c strtol.c strtoul.c strndup.c\t\t\t\\\n+\t strstr.c strtod.c strtol.c strtoul.c strndup.c\tstrverscmp.c\t\\\n \tternary.c tmpnam.c\t\t\t\t\t\t\\\n \tunlink-if-ordinary.c\t\t\t\t\t\t\\\n \tvasprintf.c vfork.c vfprintf.c vprintf.c vsnprintf.c vsprintf.c\t\\\n@@ -200,7 +200,7 @@ CONFIGURED_OFILES = ./asprintf.o ./atexit.o\t\t\t\t\\\n \t./setenv.o ./sigsetmask.o ./snprintf.o ./stpcpy.o ./stpncpy.o\t\\\n \t ./strcasecmp.o ./strchr.o ./strdup.o ./strncasecmp.o\t\t\\\n \t ./strncmp.o ./strndup.o ./strrchr.o ./strstr.o\t\t\t\\\n-\t ./strtod.o ./strtol.o ./strtoul.o\t\t\t\t\\\n+\t ./strtod.o ./strtol.o ./strtoul.o ./strverscmp.o\t\t\\\n \t./tmpnam.o\t\t\t\t\t\t\t\\\n \t./vasprintf.o ./vfork.o ./vfprintf.o ./vprintf.o ./vsnprintf.o\t\\\n \t ./vsprintf.o\t\t\t\t\t\t\t\\\n@@ -270,7 +270,7 @@ libiberty.html : $(srcdir)/libiberty.texi $(TEXISRC)\n @MAINT@$(srcdir)/functions.texi : stamp-functions\n @MAINT@\t@true\n \n-@MAINT@stamp-functions : $(CFILES) $(TEXIFILES) $(srcdir)/gather-docs Makefile\n+@MAINT@stamp-functions : $(CFILES:%=$(srcdir)/%) $(TEXIFILES:%=$(srcdir)/%) $(srcdir)/gather-docs Makefile\n @MAINT@@HAVE_PERL@\t$(PERL) $(srcdir)/gather-docs $(srcdir) $(srcdir)/functions.texi $(CFILES) $(TEXIFILES)\n @MAINT@\techo stamp > stamp-functions\n \n@@ -996,6 +996,13 @@ $(CONFIGURED_OFILES): stamp-picdir\n \telse true; fi\n \t$(COMPILE.c) $(srcdir)/strtoul.c $(OUTPUT_OPTION)\n \n+./strverscmp.o: $(srcdir)/strverscmp.c $(INCDIR)/safe-ctype.h \\\n+\t$(INCDIR)/libiberty.h\n+\tif [ x\"$(PICFLAG)\" != x ]; then \\\n+\t  $(COMPILE.c) $(PICFLAG) $(srcdir)/strverscmp.c -o pic/$@; \\\n+\telse true; fi\n+\t$(COMPILE.c) $(srcdir)/strverscmp.c $(OUTPUT_OPTION)\n+\n ./ternary.o: $(srcdir)/ternary.c config.h $(INCDIR)/ansidecl.h \\\n \t$(INCDIR)/libiberty.h $(INCDIR)/ternary.h\n \tif [ x\"$(PICFLAG)\" != x ]; then \\"}, {"sha": "9ccdacdea3f5123492b2cf58d53067400619822f", "filename": "libiberty/configure", "status": "modified", "additions": 76, "deletions": 2, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83fbfe42c25f312d47f30be37bcb957c2b7258cf/libiberty%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83fbfe42c25f312d47f30be37bcb957c2b7258cf/libiberty%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure?ref=83fbfe42c25f312d47f30be37bcb957c2b7258cf", "patch": "@@ -4825,6 +4825,7 @@ funcs=\"$funcs strstr\"\n funcs=\"$funcs strtod\"\n funcs=\"$funcs strtol\"\n funcs=\"$funcs strtoul\"\n+funcs=\"$funcs strverscmp\"\n funcs=\"$funcs tmpnam\"\n funcs=\"$funcs vasprintf\"\n funcs=\"$funcs vfprintf\"\n@@ -4910,13 +4911,14 @@ if test \"x\" = \"y\"; then\n \n \n \n+\n \n \n for ac_func in asprintf atexit basename bcmp bcopy bsearch bzero calloc clock \\\n   getcwd getpagesize gettimeofday index insque mkstemps memchr memcmp memcpy \\\n   memmove mempcpy memset putenv random rename rindex sigsetmask \\\n   strcasecmp setenv stpcpy stpncpy strchr strdup strncasecmp strndup strrchr strstr \\\n-  strtod strtol strtoul tmpnam vasprintf vfprintf vprintf \\\n+  strtod strtol strtoul strverscmp tmpnam vasprintf vfprintf vprintf \\\n   vsprintf waitpid getrusage on_exit psignal strerror strsignal \\\n   sysconf times sbrk gettimeofday ffs snprintf vsnprintf \\\n   pstat_getstatic pstat_getdynamic sysmp getsysinfo table sysctl wait3 wait4 \\\n@@ -7846,6 +7848,78 @@ else\n _ACEOF\n \n \n+fi\n+\n+\n+  echo \"$as_me:$LINENO: checking whether strverscmp is declared\" >&5\n+echo $ECHO_N \"checking whether strverscmp is declared... $ECHO_C\" >&6\n+if test \"${ac_cv_have_decl_strverscmp+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+$ac_includes_default\n+int\n+main ()\n+{\n+#ifndef strverscmp\n+  char *p = (char *) strverscmp;\n+#endif\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_have_decl_strverscmp=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_have_decl_strverscmp=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_have_decl_strverscmp\" >&5\n+echo \"${ECHO_T}$ac_cv_have_decl_strverscmp\" >&6\n+if test $ac_cv_have_decl_strverscmp = yes; then\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_DECL_STRVERSCMP 1\n+_ACEOF\n+\n+\n+else\n+  cat >>confdefs.h <<_ACEOF\n+#define HAVE_DECL_STRVERSCMP 0\n+_ACEOF\n+\n+\n fi\n \n \n@@ -7942,7 +8016,7 @@ if test x$gcc_no_link = xyes; then\n     ac_cv_func_mmap_fixed_mapped=no\n   fi\n fi\n-if test \"x${ac_cv_func_mmap_fixed_mapped+set}\" != xset; then\n+if test \"x${ac_cv_func_mmap_fixed_mapped}\" != xno; then\n \n \n for ac_header in stdlib.h unistd.h"}, {"sha": "c88a91418762843f2b945ee6a8efbe68e38ebe4f", "filename": "libiberty/configure.ac", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83fbfe42c25f312d47f30be37bcb957c2b7258cf/libiberty%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83fbfe42c25f312d47f30be37bcb957c2b7258cf/libiberty%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure.ac?ref=83fbfe42c25f312d47f30be37bcb957c2b7258cf", "patch": "@@ -254,6 +254,7 @@ funcs=\"$funcs strstr\"\n funcs=\"$funcs strtod\"\n funcs=\"$funcs strtol\"\n funcs=\"$funcs strtoul\"\n+funcs=\"$funcs strverscmp\"\n funcs=\"$funcs tmpnam\"\n funcs=\"$funcs vasprintf\"\n funcs=\"$funcs vfprintf\"\n@@ -277,7 +278,7 @@ if test \"x\" = \"y\"; then\n   getcwd getpagesize gettimeofday index insque mkstemps memchr memcmp memcpy \\\n   memmove mempcpy memset putenv random rename rindex sigsetmask \\\n   strcasecmp setenv stpcpy stpncpy strchr strdup strncasecmp strndup strrchr strstr \\\n-  strtod strtol strtoul tmpnam vasprintf vfprintf vprintf \\\n+  strtod strtol strtoul strverscmp tmpnam vasprintf vfprintf vprintf \\\n   vsprintf waitpid getrusage on_exit psignal strerror strsignal \\\n   sysconf times sbrk gettimeofday ffs snprintf vsnprintf \\\n   pstat_getstatic pstat_getdynamic sysmp getsysinfo table sysctl wait3 wait4 \\\n@@ -520,6 +521,7 @@ if test -z \"${setobjs}\"; then\n   AC_CHECK_FUNCS($checkfuncs)\n   AC_CHECK_DECLS([basename, ffs, asprintf, vasprintf, snprintf, vsnprintf])\n   AC_CHECK_DECLS([calloc, getenv, malloc, realloc, sbrk])\n+  AC_CHECK_DECLS([strverscmp])\n   libiberty_NEED_DECLARATION(canonicalize_file_name)\n fi\n "}, {"sha": "8b4a50ef45e1a880e5d80f2f80797b7454b39c5b", "filename": "libiberty/functions.texi", "status": "modified", "additions": 52, "deletions": 5, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83fbfe42c25f312d47f30be37bcb957c2b7258cf/libiberty%2Ffunctions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83fbfe42c25f312d47f30be37bcb957c2b7258cf/libiberty%2Ffunctions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffunctions.texi?ref=83fbfe42c25f312d47f30be37bcb957c2b7258cf", "patch": "@@ -631,17 +631,17 @@ Sets the first @var{count} bytes of @var{s} to the constant byte\n @end deftypefn\n \n @c mkstemps.c:54\n-@deftypefn Replacement int mkstemps (char *@var{template}, int @var{suffix_len})\n+@deftypefn Replacement int mkstemps (char *@var{pattern}, int @var{suffix_len})\n \n-Generate a unique temporary file name from @var{template}.\n-@var{template} has the form:\n+Generate a unique temporary file name from @var{pattern}.\n+@var{pattern} has the form:\n \n @example\n    @var{path}/ccXXXXXX@var{suffix}\n @end example\n \n @var{suffix_len} tells us how long @var{suffix} is (it can be zero\n-length).  The last six characters of @var{template} before @var{suffix}\n+length).  The last six characters of @var{pattern} before @var{suffix}\n must be @samp{XXXXXX}; they are replaced with a string that makes the\n filename unique.  Returns a file descriptor open on the file for\n reading and writing.\n@@ -891,7 +891,7 @@ control over the state of the random number generator.\n \n @end deftypefn\n \n-@c concat.c:167\n+@c concat.c:173\n @deftypefn Extension char* reconcat (char *@var{optr}, const char *@var{s1}, @dots{}, @code{NULL})\n \n Same as @code{concat}, except that if @var{optr} is not @code{NULL} it\n@@ -1194,6 +1194,53 @@ translation is found, returns 0.\n \n @end deftypefn\n \n+@c strverscmp.c:24\n+@deftypefun int strverscmp (const char *@var{s1}, const char *@var{s2})\n+The @code{strverscmp} function compares the string @var{s1} against\n+@var{s2}, considering them as holding indices/version numbers.  Return\n+value follows the same conventions as found in the @code{strverscmp}\n+function.  In fact, if @var{s1} and @var{s2} contain no digits,\n+@code{strverscmp} behaves like @code{strcmp}.\n+\n+Basically, we compare strings normally (character by character), until\n+we find a digit in each string - then we enter a special comparison\n+mode, where each sequence of digits is taken as a whole.  If we reach the\n+end of these two parts without noticing a difference, we return to the\n+standard comparison mode.  There are two types of numeric parts:\n+\"integral\" and \"fractional\" (those  begin with a '0'). The types\n+of the numeric parts affect the way we sort them:\n+\n+@itemize @bullet\n+@item\n+integral/integral: we compare values as you would expect.\n+\n+@item\n+fractional/integral: the fractional part is less than the integral one.\n+Again, no surprise.\n+\n+@item\n+fractional/fractional: the things become a bit more complex.\n+If the common prefix contains only leading zeroes, the longest part is less\n+than the other one; else the comparison behaves normally.\n+@end itemize\n+\n+@smallexample\n+strverscmp (\"no digit\", \"no digit\")\n+    @result{} 0    // @r{same behavior as strcmp.}\n+strverscmp (\"item#99\", \"item#100\")\n+    @result{} <0   // @r{same prefix, but 99 < 100.}\n+strverscmp (\"alpha1\", \"alpha001\")\n+    @result{} >0   // @r{fractional part inferior to integral one.}\n+strverscmp (\"part1_f012\", \"part1_f01\")\n+    @result{} >0   // @r{two fractional parts.}\n+strverscmp (\"foo.009\", \"foo.0\")\n+    @result{} <0   // @r{idem, but with leading zeroes only.}\n+@end smallexample\n+\n+This function is especially useful when dealing with filename sorting,\n+because filenames frequently hold indices/version numbers.\n+@end deftypefun\n+\n @c tmpnam.c:3\n @deftypefn Supplemental char* tmpnam (char *@var{s})\n "}, {"sha": "2c6fe8a591054d408f1d5595912e2d421ea1289a", "filename": "libiberty/strverscmp.c", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83fbfe42c25f312d47f30be37bcb957c2b7258cf/libiberty%2Fstrverscmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83fbfe42c25f312d47f30be37bcb957c2b7258cf/libiberty%2Fstrverscmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrverscmp.c?ref=83fbfe42c25f312d47f30be37bcb957c2b7258cf", "patch": "@@ -0,0 +1,157 @@\n+/* Compare strings while treating digits characters numerically.\n+   Copyright (C) 1997, 2002, 2005 Free Software Foundation, Inc.\n+   This file is part of the libiberty library.\n+   Contributed by Jean-Fran\ufffdois Bignolles <bignolle@ecoledoc.ibp.fr>, 1997.\n+\n+   Libiberty is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   Libiberty is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, write to the Free\n+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+   02111-1307 USA.  */\n+\n+#include \"libiberty.h\"\n+#include \"safe-ctype.h\"\n+\n+/* \n+@deftypefun int strverscmp (const char *@var{s1}, const char *@var{s2})\n+The @code{strverscmp} function compares the string @var{s1} against\n+@var{s2}, considering them as holding indices/version numbers.  Return\n+value follows the same conventions as found in the @code{strverscmp}\n+function.  In fact, if @var{s1} and @var{s2} contain no digits,\n+@code{strverscmp} behaves like @code{strcmp}.\n+\n+Basically, we compare strings normally (character by character), until\n+we find a digit in each string - then we enter a special comparison\n+mode, where each sequence of digits is taken as a whole.  If we reach the\n+end of these two parts without noticing a difference, we return to the\n+standard comparison mode.  There are two types of numeric parts:\n+\"integral\" and \"fractional\" (those  begin with a '0'). The types\n+of the numeric parts affect the way we sort them:\n+\n+@itemize @bullet\n+@item\n+integral/integral: we compare values as you would expect.\n+\n+@item\n+fractional/integral: the fractional part is less than the integral one.\n+Again, no surprise.\n+\n+@item\n+fractional/fractional: the things become a bit more complex.\n+If the common prefix contains only leading zeroes, the longest part is less\n+than the other one; else the comparison behaves normally.\n+@end itemize\n+\n+@smallexample\n+strverscmp (\"no digit\", \"no digit\")\n+    @result{} 0    // @r{same behavior as strcmp.}\n+strverscmp (\"item#99\", \"item#100\")\n+    @result{} <0   // @r{same prefix, but 99 < 100.}\n+strverscmp (\"alpha1\", \"alpha001\")\n+    @result{} >0   // @r{fractional part inferior to integral one.}\n+strverscmp (\"part1_f012\", \"part1_f01\")\n+    @result{} >0   // @r{two fractional parts.}\n+strverscmp (\"foo.009\", \"foo.0\")\n+    @result{} <0   // @r{idem, but with leading zeroes only.}\n+@end smallexample\n+\n+This function is especially useful when dealing with filename sorting,\n+because filenames frequently hold indices/version numbers.\n+@end deftypefun\n+\n+*/\n+\n+/* states: S_N: normal, S_I: comparing integral part, S_F: comparing\n+           fractional parts, S_Z: idem but with leading Zeroes only */\n+#define  S_N    0x0\n+#define  S_I    0x4\n+#define  S_F    0x8\n+#define  S_Z    0xC\n+\n+/* result_type: CMP: return diff; LEN: compare using len_diff/diff */\n+#define  CMP    2\n+#define  LEN    3\n+\n+\n+/* Compare S1 and S2 as strings holding indices/version numbers,\n+   returning less than, equal to or greater than zero if S1 is less than,\n+   equal to or greater than S2 (for more info, see the Glibc texinfo doc).  */\n+\n+int\n+strverscmp (const char *s1, const char *s2)\n+{\n+  const unsigned char *p1 = (const unsigned char *) s1;\n+  const unsigned char *p2 = (const unsigned char *) s2;\n+  unsigned char c1, c2;\n+  int state;\n+  int diff;\n+\n+  /* Symbol(s)    0       [1-9]   others  (padding)\n+     Transition   (10) 0  (01) d  (00) x  (11) -   */\n+  static const unsigned int next_state[] =\n+    {\n+      /* state    x    d    0    - */\n+      /* S_N */  S_N, S_I, S_Z, S_N,\n+      /* S_I */  S_N, S_I, S_I, S_I,\n+      /* S_F */  S_N, S_F, S_F, S_F,\n+      /* S_Z */  S_N, S_F, S_Z, S_Z\n+    };\n+\n+  static const int result_type[] =\n+    {\n+      /* state   x/x  x/d  x/0  x/-  d/x  d/d  d/0  d/-\n+                 0/x  0/d  0/0  0/-  -/x  -/d  -/0  -/- */\n+\n+      /* S_N */  CMP, CMP, CMP, CMP, CMP, LEN, CMP, CMP,\n+                 CMP, CMP, CMP, CMP, CMP, CMP, CMP, CMP,\n+      /* S_I */  CMP, -1,  -1,  CMP, +1,  LEN, LEN, CMP,\n+                 +1,  LEN, LEN, CMP, CMP, CMP, CMP, CMP,\n+      /* S_F */  CMP, CMP, CMP, CMP, CMP, LEN, CMP, CMP,\n+                 CMP, CMP, CMP, CMP, CMP, CMP, CMP, CMP,\n+      /* S_Z */  CMP, +1,  +1,  CMP, -1,  CMP, CMP, CMP,\n+                 -1,  CMP, CMP, CMP\n+    };\n+\n+  if (p1 == p2)\n+    return 0;\n+\n+  c1 = *p1++;\n+  c2 = *p2++;\n+  /* Hint: '0' is a digit too.  */\n+  state = S_N | ((c1 == '0') + (ISDIGIT (c1) != 0));\n+\n+  while ((diff = c1 - c2) == 0 && c1 != '\\0')\n+    {\n+      state = next_state[state];\n+      c1 = *p1++;\n+      c2 = *p2++;\n+      state |= (c1 == '0') + (ISDIGIT (c1) != 0);\n+    }\n+\n+  state = result_type[state << 2 | (((c2 == '0') + (ISDIGIT (c2) != 0)))];\n+\n+  switch (state)\n+    {\n+    case CMP:\n+      return diff;\n+      \n+    case LEN:\n+      while (ISDIGIT (*p1++))\n+\tif (!ISDIGIT (*p2++))\n+\t  return 1;\n+      \n+      return ISDIGIT (*p2) ? -1 : diff;\n+      \n+    default:\n+      return state;\n+    }\n+}"}]}