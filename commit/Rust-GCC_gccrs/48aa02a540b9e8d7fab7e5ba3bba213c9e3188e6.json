{"sha": "48aa02a540b9e8d7fab7e5ba3bba213c9e3188e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhhYTAyYTU0MGI5ZThkN2ZhYjdlNWJhM2JiYTIxM2M5ZTMxODhlNg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-12-19T02:07:48Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-12-19T02:07:48Z"}, "message": "(emit_cmp_insn): Likewise for memcmp and bcmp.\n\nFrom-SVN: r10809", "tree": {"sha": "5c3e6e43eaa1e2645b9831068afc310a7ecab6d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c3e6e43eaa1e2645b9831068afc310a7ecab6d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48aa02a540b9e8d7fab7e5ba3bba213c9e3188e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48aa02a540b9e8d7fab7e5ba3bba213c9e3188e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48aa02a540b9e8d7fab7e5ba3bba213c9e3188e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48aa02a540b9e8d7fab7e5ba3bba213c9e3188e6/comments", "author": null, "committer": null, "parents": [{"sha": "3b6f75e2d1d08126335ec33aff3df85b8667d7cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b6f75e2d1d08126335ec33aff3df85b8667d7cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b6f75e2d1d08126335ec33aff3df85b8667d7cc"}], "stats": {"total": 9, "additions": 7, "deletions": 2}, "files": [{"sha": "c63c29d5d0efddeec013d407e63e4f47972c258f", "filename": "gcc/optabs.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48aa02a540b9e8d7fab7e5ba3bba213c9e3188e6/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48aa02a540b9e8d7fab7e5ba3bba213c9e3188e6/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=48aa02a540b9e8d7fab7e5ba3bba213c9e3188e6", "patch": "@@ -2745,12 +2745,17 @@ emit_cmp_insn (x, y, comparison, size, mode, unsignedp, align)\n \t  emit_library_call (memcmp_libfunc, 0,\n \t\t\t     TYPE_MODE (integer_type_node), 3,\n \t\t\t     XEXP (x, 0), Pmode, XEXP (y, 0), Pmode,\n-\t\t\t     size, Pmode);\n+\t\t\t     convert_to_mode (TYPE_MODE (sizetype), size,\n+\t\t\t\t\t      TREE_UNSIGNED (sizetype)),\n+\t\t\t     TYPE_MODE (sizetype));\n #else\n \t  emit_library_call (bcmp_libfunc, 0,\n \t\t\t     TYPE_MODE (integer_type_node), 3,\n \t\t\t     XEXP (x, 0), Pmode, XEXP (y, 0), Pmode,\n-\t\t\t     size, Pmode);\n+\t\t\t     convert_to_mode (TYPE_MODE (integer_type_node),\n+\t\t\t\t\t      size,\n+\t\t\t\t\t      TREE_UNSIGNED (integer_type_node)),\n+\t\t\t     TYPE_MODE (integer_type_node));\n #endif\n \t  emit_cmp_insn (hard_libcall_value (TYPE_MODE (integer_type_node)),\n \t\t\t const0_rtx, comparison, NULL_RTX,"}]}