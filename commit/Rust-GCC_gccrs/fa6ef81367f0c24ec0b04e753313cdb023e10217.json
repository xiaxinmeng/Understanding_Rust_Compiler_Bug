{"sha": "fa6ef81367f0c24ec0b04e753313cdb023e10217", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE2ZWY4MTM2N2YwYzI0ZWMwYjA0ZTc1MzMxM2NkYjAyM2UxMDIxNw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2003-05-13T18:06:52Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-05-13T18:06:52Z"}, "message": "diagnostic.c (output_format): Add support for %m.\n\n\t* diagnostic.c (output_format): Add support for %m.\n\t(output_printf, output_verbatim, diagnostic_set_info,\n\tverbatim): Set err_no field of the text_info structure being\n\tinitialized.\n\t(fatal_io_error): Delete function.\n\t* diagnostic.h (text_info): Add err_no field.\n\t* toplev.h (fatal_io_error): Delete prototype.\n\n\t* c-opts.c, c-pch.c, dwarfout.c, ggc-common.c, ggc-page.c, graph.c\n\t* toplev.c, config/mips/mips.c, config/rs6000/host-darwin.c\n\t* f/com.c, java/jcf-parse.c, java/jcf-write.c, java/lex.c\n\t* objc/objc-act.c: Replace all calls to fatal_io_error with\n\tcalls to fatal_error; add \": %m\" to the end of all the affected\n\terror messages.\n\nFrom-SVN: r66769", "tree": {"sha": "fd24969394b3b9dffb1cc037cebd35f54276e5b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd24969394b3b9dffb1cc037cebd35f54276e5b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa6ef81367f0c24ec0b04e753313cdb023e10217", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa6ef81367f0c24ec0b04e753313cdb023e10217", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa6ef81367f0c24ec0b04e753313cdb023e10217", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa6ef81367f0c24ec0b04e753313cdb023e10217/comments", "author": null, "committer": null, "parents": [{"sha": "3bec3c0c9cadc98f39f7072cb77a1c1b90ada59b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bec3c0c9cadc98f39f7072cb77a1c1b90ada59b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bec3c0c9cadc98f39f7072cb77a1c1b90ada59b"}], "stats": {"total": 186, "additions": 99, "deletions": 87}, "files": [{"sha": "c57fab37ae57b5e96d9d1698b375c93c4b31ba80", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa6ef81367f0c24ec0b04e753313cdb023e10217", "patch": "@@ -1,3 +1,19 @@\n+2003-05-13  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* diagnostic.c (output_format): Add support for %m.\n+\t(output_printf, output_verbatim, diagnostic_set_info,\n+\tverbatim): Set err_no field of the text_info structure being\n+\tinitialized.\n+\t(fatal_io_error): Delete function.\n+\t* diagnostic.h (text_info): Add err_no field.\n+\t* toplev.h (fatal_io_error): Delete prototype.\n+\n+\t* c-opts.c, c-pch.c, dwarfout.c, ggc-common.c, ggc-page.c, graph.c\n+\t* toplev.c, config/mips/mips.c, config/rs6000/host-darwin.c\n+\t* objc/objc-act.c: Replace all calls to fatal_io_error with\n+\tcalls to fatal_error; add \": %m\" to the end of all the affected\n+\terror messages.\n+\n 2003-05-13  Zack Weinberg  <zack@codesourcery.com>\n \n \t* varasm.c (notice_rtl_inlining_of_deferred_constant): New function."}, {"sha": "ea2cef42899cf6eb32425475216eb25ec2856184", "filename": "gcc/c-opts.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=fa6ef81367f0c24ec0b04e753313cdb023e10217", "patch": "@@ -1556,7 +1556,7 @@ c_common_post_options (pfilename)\n \n       if (out_stream == NULL)\n \t{\n-\t  fatal_io_error (\"opening output file %s\", out_fname);\n+\t  fatal_error (\"opening output file %s: %m\", out_fname);\n \t  return false;\n \t}\n \n@@ -1650,7 +1650,7 @@ c_common_finish ()\n \t{\n \t  deps_stream = fopen (deps_file, deps_append ? \"a\": \"w\");\n \t  if (!deps_stream)\n-\t    fatal_io_error (\"opening dependency file %s\", deps_file);\n+\t    fatal_error (\"opening dependency file %s: %m\", deps_file);\n \t}\n     }\n \n@@ -1660,10 +1660,10 @@ c_common_finish ()\n \n   if (deps_stream && deps_stream != out_stream\n       && (ferror (deps_stream) || fclose (deps_stream)))\n-    fatal_io_error (\"closing dependency file %s\", deps_file);\n+    fatal_error (\"closing dependency file %s: %m\", deps_file);\n \n   if (out_stream && (ferror (out_stream) || fclose (out_stream)))\n-    fatal_io_error (\"when writing output to %s\", out_fname);\n+    fatal_error (\"when writing output to %s: %m\", out_fname);\n }\n \n /* Either of two environment variables can specify output of"}, {"sha": "354fcc7849b9c23247c1f738eca5b7e6dee68f10", "filename": "gcc/c-pch.c", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Fc-pch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Fc-pch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pch.c?ref=fa6ef81367f0c24ec0b04e753313cdb023e10217", "patch": "@@ -86,13 +86,13 @@ pch_init ()\n   \n   f = fopen (pch_file, \"w+b\");\n   if (f == NULL)\n-    fatal_io_error (\"can't open %s\", pch_file);\n+    fatal_error (\"can't open %s: %m\", pch_file);\n   pch_outfile = f;\n   \n   v.debug_info_type = write_symbols;\n   if (fwrite (get_ident(), IDENT_LENGTH, 1, f) != 1\n       || fwrite (&v, sizeof (v), 1, f) != 1)\n-    fatal_io_error (\"can't write to %s\", pch_file);\n+    fatal_error (\"can't write to %s: %m\", pch_file);\n \n   /* We need to be able to re-read the output.  */\n   /* The driver always provides a valid -o option.  */\n@@ -127,23 +127,23 @@ c_common_write_pch ()\n   h.asm_size = asm_file_end - asm_file_startpos;\n   \n   if (fwrite (&h, sizeof (h), 1, pch_outfile) != 1)\n-    fatal_io_error (\"can't write %s\", pch_file);\n+    fatal_error (\"can't write %s: %m\", pch_file);\n   \n   buf = xmalloc (16384);\n   fflush (asm_out_file);\n \n   if (fseek (asm_out_file, asm_file_startpos, SEEK_SET) != 0)\n-    fatal_io_error (\"can't seek in %s\", asm_file_name);\n+    fatal_error (\"can't seek in %s: %m\", asm_file_name);\n \n   for (written = asm_file_startpos; written < asm_file_end; )\n     {\n       long size = asm_file_end - written;\n       if (size > 16384)\n \tsize = 16384;\n       if (fread (buf, size, 1, asm_out_file) != 1)\n-\tfatal_io_error (\"can't read %s\", asm_file_name);\n+\tfatal_error (\"can't read %s: %m\", asm_file_name);\n       if (fwrite (buf, size, 1, pch_outfile) != 1)\n-\tfatal_io_error (\"can't write %s\", pch_file);\n+\tfatal_error (\"can't write %s: %m\", pch_file);\n       written += size;\n     }\n   free (buf);\n@@ -177,10 +177,7 @@ c_common_valid_pch (pfile, name, fd)\n \n   sizeread = read (fd, ident, IDENT_LENGTH);\n   if (sizeread == -1)\n-    {\n-      fatal_io_error (\"can't read %s\", name);\n-      return 2;\n-    }\n+    fatal_error (\"can't read %s: %m\", name);\n   else if (sizeread != IDENT_LENGTH)\n     return 2;\n   \n@@ -206,10 +203,7 @@ c_common_valid_pch (pfile, name, fd)\n     }\n \n   if (read (fd, &v, sizeof (v)) != sizeof (v))\n-    {\n-      fatal_io_error (\"can't read %s\", name);\n-      return 2;\n-    }\n+    fatal_error (\"can't read %s: %m\", name);\n \n   /* The allowable debug info combinations are that either the PCH file\n      was built with the same as is being used now, or the PCH file was"}, {"sha": "ecd6b734384ed9258800cc5147bc7b67d76600ea", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=fa6ef81367f0c24ec0b04e753313cdb023e10217", "patch": "@@ -6871,17 +6871,17 @@ copy_file_data (to, from)\n   size_t len;\n   rewind (from);\n   if (ferror (from))\n-    fatal_io_error (\"can't rewind temp file\");\n+    fatal_error (\"can't rewind temp file: %m\");\n \n   while ((len = fread (buffer, 1, sizeof (buffer), from)) > 0)\n     if (fwrite (buffer, 1, len, to) != len)\n-      fatal_io_error (\"can't write to output file\");\n+      fatal_error (\"can't write to output file: %m\");\n \n   if (ferror (from))\n-    fatal_io_error (\"can't read from temp file\");\n+    fatal_error (\"can't read from temp file: %m\");\n \n   if (fclose (from))\n-    fatal_io_error (\"can't close temp file\");\n+    fatal_error (\"can't close temp file: %m\");\n }\n \n /* Emit either a label, .comm, or .lcomm directive, and mark that the symbol"}, {"sha": "294a6544910ea825e49de957529271cb48d18424", "filename": "gcc/config/rs6000/host-darwin.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Fconfig%2Frs6000%2Fhost-darwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Fconfig%2Frs6000%2Fhost-darwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fhost-darwin.c?ref=fa6ef81367f0c24ec0b04e753313cdb023e10217", "patch": "@@ -128,13 +128,13 @@ darwin_rs6000_extra_signals ()\n   sigstk.ss_size = SIGSTKSZ;\n   sigstk.ss_flags = 0;\n   if (sigaltstack (&sigstk, NULL) < 0)\n-    fatal_io_error (\"While setting up signal stack\");\n+    fatal_error (\"While setting up signal stack: %m\");\n \n   sigemptyset(&sact.sa_mask);\n   sact.sa_flags = SA_ONSTACK | SA_SIGINFO;\n   sact.sa_sigaction = segv_handler;\n   if (sigaction (SIGSEGV, &sact, 0) < 0) \n-    fatal_io_error (\"While setting up signal handler\");\n+    fatal_error (\"While setting up signal handler: %m\");\n }\n \n const struct host_hooks host_hooks = HOST_HOOKS_INITIALIZER;"}, {"sha": "53399fcf4a8db67eb48ccb6d836d5a0bdfcc75a7", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 13, "deletions": 22, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=fa6ef81367f0c24ec0b04e753313cdb023e10217", "patch": "@@ -502,6 +502,7 @@ output_buffer_to_stream (buffer)\n    %c: character.\n    %s: string.\n    %p: pointer.\n+   %m: strerror(text->err_no) - does not consume a value from args_ptr.\n    %%: `%'.\n    %*.s: a substring the length of which is specified by an integer.\n    %H: location_t.  */\n@@ -534,7 +535,7 @@ output_format (buffer, text)\n \t  ++text->format_spec;\n \t}\n \n-      /* Handle %c, %d, %i, %ld, %li, %lo, %lu, %lx, %o, %s, %u,\n+      /* Handle %c, %d, %i, %ld, %li, %lo, %lu, %lx, %m, %o, %s, %u,\n          %x, %p, %.*s; %%.  And nothing else.  Front-ends should install\n          printers to grok language specific format specifiers.  */\n       switch (*text->format_spec)\n@@ -585,6 +586,10 @@ output_format (buffer, text)\n               (buffer, va_arg (*text->args_ptr, unsigned int));\n \t  break;\n \n+\tcase 'm':\n+\t  output_add_string (buffer, xstrerror (text->err_no));\n+\t  break;\n+\n \tcase '%':\n \t  output_add_character (buffer, '%');\n \t  break;\n@@ -662,6 +667,7 @@ output_printf VPARAMS ((struct output_buffer *buffer, const char *msgid, ...))\n   VA_FIXEDARG (ap, output_buffer *, buffer);\n   VA_FIXEDARG (ap, const char *, msgid);\n \n+  text.err_no = errno;\n   text.args_ptr = &ap;\n   text.format_spec = _(msgid);\n   output_format (buffer, &text);\n@@ -757,8 +763,9 @@ output_verbatim VPARAMS ((output_buffer *buffer, const char *msgid, ...))\n   VA_FIXEDARG (ap, output_buffer *, buffer);\n   VA_FIXEDARG (ap, const char *, msgid);\n \n-  text.format_spec = msgid;\n+  text.err_no = errno;\n   text.args_ptr = &ap;\n+  text.format_spec = _(msgid);\n   output_do_verbatim (buffer, &text);\n   VA_CLOSE (ap);\n }\n@@ -816,8 +823,9 @@ diagnostic_set_info (diagnostic, msgid, args, file, line, kind)\n      int line;\n      diagnostic_t kind;\n {\n-  diagnostic->message.format_spec = _(msgid);\n+  diagnostic->message.err_no = errno;\n   diagnostic->message.args_ptr = args;\n+  diagnostic->message.format_spec = _(msgid);\n   /* If the diagnostic message doesn't specify a location,\n      use FILE and LINE.  */\n   if (!text_specifies_location (&diagnostic->message, &diagnostic->location))\n@@ -1182,8 +1190,9 @@ verbatim VPARAMS ((const char *msgid, ...))\n   VA_OPEN (ap, msgid);\n   VA_FIXEDARG (ap, const char *, msgid);\n \n-  text.format_spec = _(msgid);\n+  text.err_no = errno;\n   text.args_ptr = &ap;\n+  text.format_spec = _(msgid);\n   output_do_verbatim (&global_dc->buffer, &text);\n   output_buffer_to_stream (&global_dc->buffer);\n   VA_CLOSE (ap);\n@@ -1430,24 +1439,6 @@ warn_deprecated_use (node)\n     }\n }\n \n-/* Print a fatal I/O error message.  Argument are like printf.\n-   Also include a system error message based on `errno'.  */\n-void\n-fatal_io_error VPARAMS ((const char *msgid, ...))\n-{\n-  text_info text;\n-  VA_OPEN (ap, msgid);\n-  VA_FIXEDARG (ap, const char *, msgid);\n-\n-  text.format_spec = _(msgid);\n-  text.args_ptr = &ap;\n-  output_printf (&global_dc->buffer, \"%s: %s: \", progname, xstrerror (errno));\n-  output_format (&global_dc->buffer, &text);\n-  output_flush (&global_dc->buffer);\n-  VA_CLOSE (ap);\n-  exit (FATAL_EXIT_CODE);\n-}\n-\n /* Inform the user that an error occurred while trying to report some\n    other error.  This indicates catastrophic internal inconsistencies,\n    so give up now.  But do try to flush out the previous error."}, {"sha": "24fe2fe6a2e165d7b9102fa7b9fe3664df63800f", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=fa6ef81367f0c24ec0b04e753313cdb023e10217", "patch": "@@ -31,6 +31,7 @@ typedef struct\n {\n   const char *format_spec;\n   va_list *args_ptr;\n+  int err_no;  /* for %m */\n } text_info;\n \n /* Contants used to discriminate diagnostics.  */"}, {"sha": "8555443803eee7b2e198983a34327d3edba1de1a", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=fa6ef81367f0c24ec0b04e753313cdb023e10217", "patch": "@@ -6285,7 +6285,7 @@ dwarfout_init (main_input_filename)\n \t    char *dirname;\n \n \t    if (!pwd)\n-\t      fatal_io_error (\"can't get current directory\");\n+\t      fatal_error (\"can't get current directory: %m\");\n \n \t    dirname = concat (pwd, \"/\", NULL);\n \t    ASM_OUTPUT_DWARF_STRING_NEWLINE (asm_out_file, dirname);"}, {"sha": "c016f31901ec581d8668ca855ce7d5441ba8755c", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=fa6ef81367f0c24ec0b04e753313cdb023e10217", "patch": "@@ -1,3 +1,9 @@\n+2003-05-13  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* com.c: Replace all calls to fatal_io_error with calls to\n+\tfatal_error; add \": %m\" to the end of all the affected error\n+\tmessages.\n+\n 2003-05-12  Zack Weinberg  <zack@codesourcery.com>\n \n \t* bad.c: Don't call diagnostic_count_diagnostic."}, {"sha": "951ef448d4bd84f4c4b9721413c3adf8d6733ac4", "filename": "gcc/f/com.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=fa6ef81367f0c24ec0b04e753313cdb023e10217", "patch": "@@ -14269,7 +14269,7 @@ ffe_post_options (pfilename)\n     finput = fopen (filename, \"r\");\n \n   if (finput == 0)\n-    fatal_io_error (\"can't open %s\", filename);\n+    fatal_error (\"can't open %s: %m\", filename);\n \n   return false;\n }"}, {"sha": "adf2fd0decb410222bdeb545c86b7702ade5c120", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=fa6ef81367f0c24ec0b04e753313cdb023e10217", "patch": "@@ -411,15 +411,15 @@ write_pch_globals (tab, state)\n \t    {\n \t      if (fwrite (&ptr, sizeof (void *), 1, state->f) \n \t\t  != 1)\n-\t\tfatal_io_error (\"can't write PCH file\");\n+\t\tfatal_error (\"can't write PCH file: %m\");\n \t    }\n \t  else\n \t    {\n \t      new_ptr = htab_find_with_hash (saving_htab, ptr, \n \t\t\t\t\t     POINTER_HASH (ptr));\n \t      if (fwrite (&new_ptr->new_addr, sizeof (void *), 1, state->f) \n \t\t  != 1)\n-\t\tfatal_io_error (\"can't write PCH file\");\n+\t\tfatal_error (\"can't write PCH file: %m\");\n \t    }\n \t}\n }\n@@ -496,7 +496,7 @@ gt_pch_save (f)\n   for (rt = gt_pch_scalar_rtab; *rt; rt++)\n     for (rti = *rt; rti->base != NULL; rti++)\n       if (fwrite (rti->base, rti->stride, 1, f) != 1)\n-\tfatal_io_error (\"can't write PCH file\");\n+\tfatal_error (\"can't write PCH file: %m\");\n \n   /* Write out all the global pointers, after translation.  */\n   write_pch_globals (gt_ggc_rtab, &state);\n@@ -509,17 +509,17 @@ gt_pch_save (f)\n     long o;\n     o = ftell (state.f) + sizeof (mmi);\n     if (o == -1)\n-      fatal_io_error (\"can't get position in PCH file\");\n+      fatal_error (\"can't get position in PCH file: %m\");\n     mmi.offset = page_size - o % page_size;\n     if (mmi.offset == page_size)\n       mmi.offset = 0;\n     mmi.offset += o;\n   }\n   if (fwrite (&mmi, sizeof (mmi), 1, state.f) != 1)\n-    fatal_io_error (\"can't write PCH file\");\n+    fatal_error (\"can't write PCH file: %m\");\n   if (mmi.offset != 0\n       && fseek (state.f, mmi.offset, SEEK_SET) != 0)\n-    fatal_io_error (\"can't write padding to PCH file\");\n+    fatal_error (\"can't write padding to PCH file: %m\");\n \n   /* Actually write out the objects.  */\n   for (i = 0; i < state.count; i++)\n@@ -572,25 +572,25 @@ gt_pch_restore (f)\n   for (rt = gt_pch_scalar_rtab; *rt; rt++)\n     for (rti = *rt; rti->base != NULL; rti++)\n       if (fread (rti->base, rti->stride, 1, f) != 1)\n-\tfatal_io_error (\"can't read PCH file\");\n+\tfatal_error (\"can't read PCH file: %m\");\n \n   /* Read in all the global pointers, in 6 easy loops.  */\n   for (rt = gt_ggc_rtab; *rt; rt++)\n     for (rti = *rt; rti->base != NULL; rti++)\n       for (i = 0; i < rti->nelt; i++)\n \tif (fread ((char *)rti->base + rti->stride * i,\n \t\t   sizeof (void *), 1, f) != 1)\n-\t  fatal_io_error (\"can't read PCH file\");\n+\t  fatal_error (\"can't read PCH file: %m\");\n \n   for (rt = gt_pch_cache_rtab; *rt; rt++)\n     for (rti = *rt; rti->base != NULL; rti++)\n       for (i = 0; i < rti->nelt; i++)\n \tif (fread ((char *)rti->base + rti->stride * i,\n \t\t   sizeof (void *), 1, f) != 1)\n-\t  fatal_io_error (\"can't read PCH file\");\n+\t  fatal_error (\"can't read PCH file: %m\");\n \n   if (fread (&mmi, sizeof (mmi), 1, f) != 1)\n-    fatal_io_error (\"can't read PCH file\");\n+    fatal_error (\"can't read PCH file: %m\");\n   \n #if HAVE_MMAP_FILE\n   addr = mmap (mmi.preferred_base, mmi.size, \n@@ -604,10 +604,10 @@ gt_pch_restore (f)\n       addr = xmalloc (mmi.size);\n       if (fseek (f, mmi.offset, SEEK_SET) != 0\n \t  || fread (&mmi, mmi.size, 1, f) != 1)\n-\tfatal_io_error (\"can't read PCH file\");\n+\tfatal_error (\"can't read PCH file: %m\");\n     }\n   else if (fseek (f, mmi.offset + mmi.size, SEEK_SET) != 0)\n-    fatal_io_error (\"can't read PCH file\");\n+    fatal_error (\"can't read PCH file: %m\");\n \n   ggc_pch_read (f, addr);\n "}, {"sha": "51ea7f0d437d799453157fc5457328790363e20f", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=fa6ef81367f0c24ec0b04e753313cdb023e10217", "patch": "@@ -1954,20 +1954,20 @@ ggc_pch_write_object (d, f, x, newx, size)\n     }\n   \n   if (fwrite (x, size, 1, f) != 1)\n-    fatal_io_error (\"can't write PCH file\");\n+    fatal_error (\"can't write PCH file: %m\");\n \n   /* In the current implementation, SIZE is always equal to\n      OBJECT_SIZE (order) and so the fseek is never executed.  */\n   if (size != OBJECT_SIZE (order)\n       && fseek (f, OBJECT_SIZE (order) - size, SEEK_CUR) != 0)\n-    fatal_io_error (\"can't write PCH file\");\n+    fatal_error (\"can't write PCH file: %m\");\n \n   d->written[order]++;\n   if (d->written[order] == d->d.totals[order]\n       && fseek (f, ROUND_UP_VALUE (d->d.totals[order] * OBJECT_SIZE (order),\n \t\t\t\t   G.pagesize),\n \t\tSEEK_CUR) != 0)\n-    fatal_io_error (\"can't write PCH file\");\n+    fatal_error (\"can't write PCH file: %m\");\n }\n \n void\n@@ -1976,7 +1976,7 @@ ggc_pch_finish (d, f)\n      FILE *f;\n {\n   if (fwrite (&d->d, sizeof (d->d), 1, f) != 1)\n-    fatal_io_error (\"can't write PCH file\");\n+    fatal_error (\"can't write PCH file: %m\");\n   free (d);\n }\n \n@@ -2068,7 +2068,7 @@ ggc_pch_read (f, addr)\n   /* Allocate the appropriate page-table entries for the pages read from\n      the PCH file.  */\n   if (fread (&d, sizeof (d), 1, f) != 1)\n-    fatal_io_error (\"can't read PCH file\");\n+    fatal_error (\"can't read PCH file: %m\");\n   \n   for (i = 0; i < NUM_ORDERS; i++)\n     {"}, {"sha": "5b660be00df2e667bf55d3ff9bce8cce5cfcdd7d", "filename": "gcc/graph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Fgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Fgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraph.c?ref=fa6ef81367f0c24ec0b04e753313cdb023e10217", "patch": "@@ -419,7 +419,7 @@ clean_graph_dump_file (base, suffix)\n   fp = fopen (buf, \"w\");\n \n   if (fp == NULL)\n-    fatal_io_error (\"can't open %s\", buf);\n+    fatal_error (\"can't open %s: %m\", buf);\n \n   switch (graph_dump_format)\n     {"}, {"sha": "679636f7bb1f83c63f2702bc0f00f4a21427e965", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=fa6ef81367f0c24ec0b04e753313cdb023e10217", "patch": "@@ -1,3 +1,9 @@\n+2003-05-13  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* jcf-parse.c, jcf-write.c, lex.c: Replace all calls to\n+\tfatal_io_error with calls to fatal_error; add \": %m\" to the end of\n+\tall the affected error messages.\n+\n 2003-05-13  Richard Henderson  <rth@redhat.com>\n \n \t* class.c (layout_class_method): Set DECL_EXTERNAL."}, {"sha": "2b20537a1376350af387d1b05dd96f230fafa612", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=fa6ef81367f0c24ec0b04e753313cdb023e10217", "patch": "@@ -513,12 +513,12 @@ read_class (tree name)\n       if (!HAS_BEEN_ALREADY_PARSED_P (file))\n \t{\n \t  if (!(finput = fopen (input_filename, \"r\")))\n-\t    fatal_io_error (\"can't reopen %s\", input_filename);\n+\t    fatal_error (\"can't reopen %s: %m\", input_filename);\n \t  parse_source_file_1 (file, finput);\n \t  parse_source_file_2 ();\n \t  parse_source_file_3 ();\n \t  if (fclose (finput))\n-\t    fatal_io_error (\"can't close %s\", input_filename);\n+\t    fatal_error (\"can't close %s: %m\", input_filename);\n \t}\n       JCF_FINISH (current_jcf);\n       java_pop_parser_context (generate);\n@@ -888,7 +888,7 @@ java_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n       int avail = 2000;\n       finput = fopen (input_filename, \"r\");\n       if (finput == NULL)\n-\tfatal_io_error (\"can't open %s\", input_filename);\n+\tfatal_error (\"can't open %s: %m\", input_filename);\n       list = xmalloc(avail);\n       next = list;\n       for (;;)\n@@ -907,7 +907,7 @@ java_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n \t  if (count == 0)\n \t    {\n \t      if (! feof (finput))\n-\t\tfatal_io_error (\"error closing %s\", input_filename);\n+\t\tfatal_error (\"error closing %s: %m\", input_filename);\n \t      *next = '\\0';\n \t      break;\n \t    }\n@@ -1030,11 +1030,11 @@ java_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n       \n       /* Close previous descriptor, if any */\n       if (finput && fclose (finput))\n-\tfatal_io_error (\"can't close input file %s\", main_input_filename);\n+\tfatal_error (\"can't close input file %s: %m\", main_input_filename);\n       \n       finput = fopen (IDENTIFIER_POINTER (name), \"rb\");\n       if (finput == NULL)\n-\tfatal_io_error (\"can't open %s\", IDENTIFIER_POINTER (name));\n+\tfatal_error (\"can't open %s: %m\", IDENTIFIER_POINTER (name));\n \n #ifdef IO_BUFFER_SIZE\n       setvbuf (finput, xmalloc (IO_BUFFER_SIZE),"}, {"sha": "0d8f73ee13e2d637df20dc1c3d4035eabff3965a", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=fa6ef81367f0c24ec0b04e753313cdb023e10217", "patch": "@@ -3341,7 +3341,7 @@ make_class_file_name (tree clas)\n       if (stat (r, &sb) == -1\n \t  /* Try to make it.  */\n \t  && mkdir (r, 0755) == -1)\n-\tfatal_io_error (\"can't create directory %s\", r);\n+\tfatal_error (\"can't create directory %s: %m\", r);\n \n       *s = sep;\n       /* Skip consecutive separators.  */\n@@ -3374,14 +3374,14 @@ write_classfile (tree clas)\n       temporary_file_name = concat (class_file_name, \".tmp\", NULL);\n       stream = fopen (temporary_file_name, \"wb\");\n       if (stream == NULL)\n-\tfatal_io_error (\"can't open %s for writing\", temporary_file_name);\n+\tfatal_error (\"can't open %s for writing: %m\", temporary_file_name);\n \n       jcf_dependency_add_target (class_file_name);\n       init_jcf_state (state, work);\n       chunks = generate_classfile (clas, state);\n       write_chunks (stream, chunks);\n       if (fclose (stream))\n-\tfatal_io_error (\"error closing %s\", temporary_file_name);\n+\tfatal_error (\"error closing %s: %m\", temporary_file_name);\n \n       /* If a file named by the string pointed to by `new' exists\n          prior to the call to the `rename' function, the bahaviour\n@@ -3394,7 +3394,7 @@ write_classfile (tree clas)\n       if (rename (temporary_file_name, class_file_name) == -1)\n \t{\n \t  remove (temporary_file_name);\n-\t  fatal_io_error (\"can't create %s\", class_file_name);\n+\t  fatal_error (\"can't create %s: %m\", class_file_name);\n \t}\n       free (temporary_file_name);\n       free (class_file_name);"}, {"sha": "b2655facec15f436e926f39e2aabd6c82b6647a4", "filename": "gcc/java/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Fjava%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Fjava%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flex.c?ref=fa6ef81367f0c24ec0b04e753313cdb023e10217", "patch": "@@ -1825,7 +1825,7 @@ java_get_line_col (const char *filename ATTRIBUTE_UNUSED,\n   char *base;\n \n   if (!(fp = fopen (filename, \"r\")))\n-    fatal_io_error (\"can't open %s\", filename);\n+    fatal_error (\"can't open %s: %m\", filename);\n \n   while (cline != line)\n     {"}, {"sha": "06259580ab4f519b584d974b2fdd8bbd2f485f5d", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=fa6ef81367f0c24ec0b04e753313cdb023e10217", "patch": "@@ -449,7 +449,7 @@ objc_init ()\n       register char * const dumpname = concat (dump_base_name, \".decl\", NULL);\n       gen_declaration_file = fopen (dumpname, \"w\");\n       if (gen_declaration_file == 0)\n-\tfatal_io_error (\"can't open %s\", dumpname);\n+\tfatal_error (\"can't open %s: %m\", dumpname);\n       free (dumpname);\n     }\n "}, {"sha": "800b72a9e3990d0830ee29a5505f749f02674fc9", "filename": "gcc/toplev.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=fa6ef81367f0c24ec0b04e753313cdb023e10217", "patch": "@@ -1764,10 +1764,10 @@ setup_core_dumping ()\n   {\n     struct rlimit rlim;\n     if (getrlimit (RLIMIT_CORE, &rlim) != 0)\n-      fatal_io_error (\"getting core file size maximum limit\");\n+      fatal_error (\"getting core file size maximum limit: %m\");\n     rlim.rlim_cur = rlim.rlim_max;\n     if (setrlimit (RLIMIT_CORE, &rlim) != 0)\n-      fatal_io_error (\"setting core file size limit to maximum\");\n+      fatal_error (\"setting core file size limit to maximum: %m\");\n   }\n #endif\n   diagnostic_abort_on_error (global_dc);\n@@ -1913,7 +1913,7 @@ open_dump_file (index, decl)\n \n   rtl_dump_file = fopen (dump_name, open_arg);\n   if (rtl_dump_file == NULL)\n-    fatal_io_error (\"can't open %s\", dump_name);\n+    fatal_error (\"can't open %s: %m\", dump_name);\n \n   free (dump_name);\n \n@@ -4878,7 +4878,7 @@ init_asm_output (name)\n       else\n \tasm_out_file = fopen (asm_file_name, \"w+\");\n       if (asm_out_file == 0)\n-\tfatal_io_error (\"can't open %s for writing\", asm_file_name);\n+\tfatal_error (\"can't open %s for writing: %m\", asm_file_name);\n     }\n \n #ifdef IO_BUFFER_SIZE\n@@ -5367,7 +5367,7 @@ process_options ()\n     {\n       aux_info_file = fopen (aux_info_file_name, \"w\");\n       if (aux_info_file == 0)\n-\tfatal_io_error (\"can't open %s\", aux_info_file_name);\n+\tfatal_error (\"can't open %s: %m\", aux_info_file_name);\n     }\n \n   if (! targetm.have_named_sections)\n@@ -5519,9 +5519,9 @@ finalize ()\n   if (asm_out_file)\n     {\n       if (ferror (asm_out_file) != 0)\n-\tfatal_io_error (\"error writing to %s\", asm_file_name);\n+\tfatal_error (\"error writing to %s: %m\", asm_file_name);\n       if (fclose (asm_out_file) != 0)\n-\tfatal_io_error (\"error closing %s\", asm_file_name);\n+\tfatal_error (\"error closing %s: %m\", asm_file_name);\n     }\n \n   /* Do whatever is necessary to finish printing the graphs.  */"}, {"sha": "9271b6d77eae368c940d75562cdc2667eaa65902", "filename": "gcc/toplev.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa6ef81367f0c24ec0b04e753313cdb023e10217/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=fa6ef81367f0c24ec0b04e753313cdb023e10217", "patch": "@@ -34,8 +34,6 @@ extern void print_time\t\t\tPARAMS ((const char *, long));\n extern const char *trim_filename\tPARAMS ((const char *));\n extern void internal_error\t\tPARAMS ((const char *, ...))\n \t\t\t\t\t       ATTRIBUTE_NORETURN;\n-extern void fatal_io_error\t\tPARAMS ((const char *, ...))\n-\t\t\t\t\t       ATTRIBUTE_NORETURN;\n extern void _fatal_insn_not_found\tPARAMS ((struct rtx_def *,\n \t\t\t\t\t\tconst char *, int,\n \t\t\t\t\t\tconst char *))"}]}