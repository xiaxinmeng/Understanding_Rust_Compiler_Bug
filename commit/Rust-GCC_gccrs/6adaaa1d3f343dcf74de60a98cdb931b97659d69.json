{"sha": "6adaaa1d3f343dcf74de60a98cdb931b97659d69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFkYWFhMWQzZjM0M2RjZjc0ZGU2MGE5OGNkYjkzMWI5NzY1OWQ2OQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2014-07-31T16:22:58Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@gcc.gnu.org", "date": "2014-07-31T16:22:58Z"}, "message": "ibm-ldouble.c (typedef union longDblUnion): Delete.\n\n\t* config/rs6000/ibm-ldouble.c (typedef union longDblUnion): Delete.\n\t(pack_ldouble): New function.\n\t(__gcc_qadd): Use it.\n\t(__gcc_qmul): Likewise.\n\t(__gcc_qdiv): Likewise.\n\t(__gcc_qneg): Likewise.\n\t(__gcc_stoq): Likewise.\n\t(__gcc_dtoq): Likewise.\n\nCo-Authored-By: Peter Bergner <bergner@vnet.ibm.com>\n\nFrom-SVN: r213380", "tree": {"sha": "b7b54f23d9a56a71c09c17d36cada72217b59cd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7b54f23d9a56a71c09c17d36cada72217b59cd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6adaaa1d3f343dcf74de60a98cdb931b97659d69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6adaaa1d3f343dcf74de60a98cdb931b97659d69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6adaaa1d3f343dcf74de60a98cdb931b97659d69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6adaaa1d3f343dcf74de60a98cdb931b97659d69/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "22756ccf24db934dd8913ff5965ddcdca2eb61ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22756ccf24db934dd8913ff5965ddcdca2eb61ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22756ccf24db934dd8913ff5965ddcdca2eb61ed"}], "stats": {"total": 85, "additions": 46, "deletions": 39}, "files": [{"sha": "999e1f8879c2fd4c525065ae7b0656f972af8b11", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6adaaa1d3f343dcf74de60a98cdb931b97659d69/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6adaaa1d3f343dcf74de60a98cdb931b97659d69/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=6adaaa1d3f343dcf74de60a98cdb931b97659d69", "patch": "@@ -1,3 +1,15 @@\n+2014-07-31  Alan Modra  <amodra@gmail.com>\n+\t    Peter Bergner  <bergner@vnet.ibm.com>\n+\n+\t* config/rs6000/ibm-ldouble.c (typedef union longDblUnion): Delete.\n+\t(pack_ldouble): New function.\n+\t(__gcc_qadd): Use it.\n+\t(__gcc_qmul): Likewise.\n+\t(__gcc_qdiv): Likewise.\n+\t(__gcc_qneg): Likewise.\n+\t(__gcc_stoq): Likewise.\n+\t(__gcc_dtoq): Likewise.\n+\n 2014-07-30  J. D. Johnston  <jjohnst@us.ibm.com>\n \n \t* config/s390/tpf-unwind.h: Include <stdbool.h>."}, {"sha": "51d58cdae9d33cd5e9d7a8e5c2f5b4dd412b39cc", "filename": "libgcc/config/rs6000/ibm-ldouble.c", "status": "modified", "additions": 34, "deletions": 39, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6adaaa1d3f343dcf74de60a98cdb931b97659d69/libgcc%2Fconfig%2Frs6000%2Fibm-ldouble.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6adaaa1d3f343dcf74de60a98cdb931b97659d69/libgcc%2Fconfig%2Frs6000%2Fibm-ldouble.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Fibm-ldouble.c?ref=6adaaa1d3f343dcf74de60a98cdb931b97659d69", "patch": "@@ -87,18 +87,30 @@ __asm__ (\".symver __gcc_qadd,_xlqadd@GCC_3.4\\n\\t\"\n \t \".symver .__gcc_qdiv,._xlqdiv@GCC_3.4\");\n #endif\n \n-typedef union\n+/* Combine two 'double' values into one 'long double' and return the result.  */\n+static inline long double\n+pack_ldouble (double dh, double dl)\n {\n-  long double ldval;\n-  double dval[2];\n-} longDblUnion;\n+#if defined (__LONG_DOUBLE_128__) \\\n+    && !(defined (_SOFT_FLOAT) || defined (__NO_FPRS__))\n+  return __builtin_pack_longdouble (dh, dl);\n+#else\n+  union\n+  {\n+    long double ldval;\n+    double dval[2];\n+  } x;\n+  x.dval[0] = dh;\n+  x.dval[1] = dl;\n+  return x.ldval;\n+#endif\n+}\n \n /* Add two 'long double' values and return the result.\t*/\n long double\n __gcc_qadd (double a, double aa, double c, double cc)\n {\n-  longDblUnion x;\n-  double z, q, zz, xh;\n+  double xh, xl, z, q, zz;\n \n   z = a + c;\n \n@@ -109,12 +121,12 @@ __gcc_qadd (double a, double aa, double c, double cc)\n       z = cc + aa + c + a;\n       if (nonfinite (z))\n \treturn z;\n-      x.dval[0] = z;  /* Will always be DBL_MAX.  */\n+      xh = z;  /* Will always be DBL_MAX.  */\n       zz = aa + cc;\n       if (fabs(a) > fabs(c))\n-\tx.dval[1] = a - z + c + zz;\n+\txl = a - z + c + zz;\n       else\n-\tx.dval[1] = c - z + a + zz;\n+\txl = c - z + a + zz;\n     }\n   else\n     {\n@@ -129,10 +141,9 @@ __gcc_qadd (double a, double aa, double c, double cc)\n       if (nonfinite (xh))\n \treturn xh;\n \n-      x.dval[0] = xh;\n-      x.dval[1] = z - xh + zz;\n+      xl = z - xh + zz;\n     }\n-  return x.ldval;\n+  return pack_ldouble (xh, xl);\n }\n \n long double\n@@ -148,8 +159,7 @@ static double fmsub (double, double, double);\n long double\n __gcc_qmul (double a, double b, double c, double d)\n {\n-  longDblUnion z;\n-  double t, tau, u, v, w;\n+  double xh, xl, t, tau, u, v, w;\n   \n   t = a * c;\t\t\t/* Highest order double term.  */\n \n@@ -173,16 +183,15 @@ __gcc_qmul (double a, double b, double c, double d)\n   /* Construct long double result.  */\n   if (nonfinite (u))\n     return u;\n-  z.dval[0] = u;\n-  z.dval[1] = (t - u) + tau;\n-  return z.ldval;\n+  xh = u;\n+  xl = (t - u) + tau;\n+  return pack_ldouble (xh, xl);\n }\n \n long double\n __gcc_qdiv (double a, double b, double c, double d)\n {\n-  longDblUnion z;\n-  double s, sigma, t, tau, u, v, w;\n+  double xh, xl, s, sigma, t, tau, u, v, w;\n   \n   t = a / c;                    /* highest order double term */\n   \n@@ -219,9 +228,9 @@ __gcc_qdiv (double a, double b, double c, double d)\n   /* Construct long double result.  */\n   if (nonfinite (u))\n     return u;\n-  z.dval[0] = u;\n-  z.dval[1] = (t - u) + tau;\n-  return z.ldval;\n+  xh = u;\n+  xl = (t - u) + tau;\n+  return pack_ldouble (xh, xl);\n }\n \n #if defined (_SOFT_DOUBLE) && defined (__LONG_DOUBLE_128__)\n@@ -248,11 +257,7 @@ extern int __gedf2 (double, double);\n long double\n __gcc_qneg (double a, double aa)\n {\n-  longDblUnion x;\n-\n-  x.dval[0] = -a;\n-  x.dval[1] = -aa;\n-  return x.ldval;\n+  return pack_ldouble (-a, -aa);\n }\n \n /* Compare two 'long double' values for equality.  */\n@@ -292,24 +297,14 @@ strong_alias (__gcc_qge, __gcc_qgt);\n long double\n __gcc_stoq (float a)\n {\n-  longDblUnion x;\n-\n-  x.dval[0] = (double) a;\n-  x.dval[1] = 0.0;\n-\n-  return x.ldval;\n+  return pack_ldouble ((double) a, 0.0);\n }\n \n /* Convert double to long double.  */\n long double\n __gcc_dtoq (double a)\n {\n-  longDblUnion x;\n-\n-  x.dval[0] = a;\n-  x.dval[1] = 0.0;\n-\n-  return x.ldval;\n+  return pack_ldouble (a, 0.0);\n }\n \n /* Convert long double to single.  */"}]}