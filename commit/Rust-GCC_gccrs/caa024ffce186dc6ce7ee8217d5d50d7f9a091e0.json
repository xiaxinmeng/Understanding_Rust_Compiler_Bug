{"sha": "caa024ffce186dc6ce7ee8217d5d50d7f9a091e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FhMDI0ZmZjZTE4NmRjNmNlN2VlODIxN2Q1ZDUwZDdmOWEwOTFlMA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2016-11-07T16:59:11Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2016-11-07T16:59:11Z"}, "message": "re PR tree-optimization/77309 (wrong code at -Os and above on x86_64-linux-gnu (in the 64-bit mode))\n\n\tPR rtl-optimization/77309\n\t* combine.c (make_compound_operation): Allow EQ for IN_CODE, and\n\tdon't assume an equality comparison for plain COMPARE.\n\t(simplify_comparison): Pass a more accurate code to\n\tmake_compound_operation.\n\ntestsuite/\n\tPR rtl-optimization/77309\n\t* gcc.dg/torture/pr77309.c: New test.\n\nFrom-SVN: r241912", "tree": {"sha": "72ba9cd88f9d252504f2834bfe31a6b5057882f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72ba9cd88f9d252504f2834bfe31a6b5057882f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/caa024ffce186dc6ce7ee8217d5d50d7f9a091e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caa024ffce186dc6ce7ee8217d5d50d7f9a091e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caa024ffce186dc6ce7ee8217d5d50d7f9a091e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caa024ffce186dc6ce7ee8217d5d50d7f9a091e0/comments", "author": null, "committer": null, "parents": [{"sha": "b4ff394c548414d6594170573c1cea89b91968e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4ff394c548414d6594170573c1cea89b91968e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4ff394c548414d6594170573c1cea89b91968e1"}], "stats": {"total": 51, "additions": 45, "deletions": 6}, "files": [{"sha": "1d1cbb719f97302ec538d0b280590621522ec345", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa024ffce186dc6ce7ee8217d5d50d7f9a091e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa024ffce186dc6ce7ee8217d5d50d7f9a091e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=caa024ffce186dc6ce7ee8217d5d50d7f9a091e0", "patch": "@@ -1,3 +1,11 @@\n+2016-11-07  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\tPR rtl-optimization/77309\n+\t* combine.c (make_compound_operation): Allow EQ for IN_CODE, and\n+\tdon't assume an equality comparison for plain COMPARE.\n+\t(simplify_comparison): Pass a more accurate code to\n+\tmake_compound_operation.\n+\n 2016-11-07  Pat Haugen  <pthaugen@us.ibm.com>\n \n \t* target.def (compute_pressure_classes): New target hook."}, {"sha": "69020561c3147fec1c2a085086fbc68505dc83ad", "filename": "gcc/combine.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa024ffce186dc6ce7ee8217d5d50d7f9a091e0/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa024ffce186dc6ce7ee8217d5d50d7f9a091e0/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=caa024ffce186dc6ce7ee8217d5d50d7f9a091e0", "patch": "@@ -7753,7 +7753,8 @@ extract_left_shift (rtx x, int count)\n \n    IN_CODE says what kind of expression we are processing.  Normally, it is\n    SET.  In a memory address it is MEM.  When processing the arguments of\n-   a comparison or a COMPARE against zero, it is COMPARE.  */\n+   a comparison or a COMPARE against zero, it is COMPARE, or EQ if more\n+   precisely it is an equality comparison against zero.  */\n \n rtx\n make_compound_operation (rtx x, enum rtx_code in_code)\n@@ -7767,6 +7768,7 @@ make_compound_operation (rtx x, enum rtx_code in_code)\n   rtx new_rtx = 0;\n   rtx tem;\n   const char *fmt;\n+  bool equality_comparison = false;\n \n   /* PR rtl-optimization/70944.  */\n   if (VECTOR_MODE_P (mode))\n@@ -7776,6 +7778,11 @@ make_compound_operation (rtx x, enum rtx_code in_code)\n      address, we stay there.  If we have a comparison, set to COMPARE,\n      but once inside, go back to our default of SET.  */\n \n+  if (in_code == EQ)\n+    {\n+      equality_comparison = true;\n+      in_code = COMPARE;\n+    }\n   next_code = (code == MEM ? MEM\n \t       : ((code == COMPARE || COMPARISON_P (x))\n \t\t  && XEXP (x, 1) == const0_rtx) ? COMPARE\n@@ -7984,11 +7991,12 @@ make_compound_operation (rtx x, enum rtx_code in_code)\n       /* If we are in a comparison and this is an AND with a power of two,\n \t convert this into the appropriate bit extract.  */\n       else if (in_code == COMPARE\n-\t       && (i = exact_log2 (UINTVAL (XEXP (x, 1)))) >= 0)\n+\t       && (i = exact_log2 (UINTVAL (XEXP (x, 1)))) >= 0\n+\t       && (equality_comparison || i < GET_MODE_PRECISION (mode) - 1))\n \tnew_rtx = make_extraction (mode,\n-\t\t\t       make_compound_operation (XEXP (x, 0),\n-\t\t\t\t\t\t\tnext_code),\n-\t\t\t       i, NULL_RTX, 1, 1, 0, 1);\n+\t\t\t\t   make_compound_operation (XEXP (x, 0),\n+\t\t\t\t\t\t\t    next_code),\n+\t\t\t\t   i, NULL_RTX, 1, 1, 0, 1);\n \n       /* If the one operand is a paradoxical subreg of a register or memory and\n \t the constant (limited to the smaller mode) has only zero bits where\n@@ -12473,7 +12481,11 @@ simplify_comparison (enum rtx_code code, rtx *pop0, rtx *pop1)\n      We can never remove a SUBREG for a non-equality comparison because\n      the sign bit is in a different place in the underlying object.  */\n \n-  op0 = make_compound_operation (op0, op1 == const0_rtx ? COMPARE : SET);\n+  rtx_code op0_mco_code = SET;\n+  if (op1 == const0_rtx)\n+    op0_mco_code = code == NE || code == EQ ? EQ : COMPARE;\n+\n+  op0 = make_compound_operation (op0, op0_mco_code);\n   op1 = make_compound_operation (op1, SET);\n \n   if (GET_CODE (op0) == SUBREG && subreg_lowpart_p (op0)"}, {"sha": "6e12b1ab86e5fcae1e9ae4171d007e284d149e6e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa024ffce186dc6ce7ee8217d5d50d7f9a091e0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa024ffce186dc6ce7ee8217d5d50d7f9a091e0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=caa024ffce186dc6ce7ee8217d5d50d7f9a091e0", "patch": "@@ -1,3 +1,8 @@\n+2016-11-07  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\tPR rtl-optimization/77309\n+\t* gcc.dg/torture/pr77309.c: New test.\n+\n 2016-11-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/71529"}, {"sha": "5bdbc0a0b83abd929f4498012c57da973090d4e3", "filename": "gcc/testsuite/gcc.dg/torture/pr77309.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa024ffce186dc6ce7ee8217d5d50d7f9a091e0/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr77309.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa024ffce186dc6ce7ee8217d5d50d7f9a091e0/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr77309.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr77309.c?ref=caa024ffce186dc6ce7ee8217d5d50d7f9a091e0", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+\n+int a, b;\n+\n+int main ()\n+{\n+  long c = 1 % (2 ^ b);\n+  c = -c & ~(~(b ^ ~b) || a);\n+\n+  if (c >= 0)\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}]}