{"sha": "64f6e1e1589654b04fb9c0ac2fd20d010ccfdedb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRmNmUxZTE1ODk2NTRiMDRmYjljMGFjMmZkMjBkMDEwY2NmZGVkYg==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2016-10-28T14:39:28Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2016-10-28T14:39:28Z"}, "message": "sched: Do not mix prologue and epilogue insns\n\nThis patch makes scheduling not reorder prologue insns relative to\nepilogue insns and vice versa.  This fixes PR78029.\n\nThe problem in that PR:\nWe have two insns, in this order:\n\n(insn/f 300 299 267 8 (set (reg:DI 65 lr)\n        (reg:DI 0 0)) 579 {*movdi_internal64}\n     (expr_list:REG_DEAD (reg:DI 0 0)\n        (expr_list:REG_CFA_RESTORE (reg:DI 65 lr)\n            (nil))))\n...\n(insn/f 310 268 134 8 (set (mem/c:DI (plus:DI (reg/f:DI 1 1)\n                (const_int 144 [0x90])) [6  S8 A8])\n        (reg:DI 0 0)) 579 {*movdi_internal64}\n     (expr_list:REG_DEAD (reg:DI 0 0)\n        (expr_list:REG_CFA_OFFSET (set (mem/c:DI (plus:DI (reg/f:DI 1 1)\n                        (const_int 144 [0x90])) [6  S8 A8])\n                (reg:DI 65 lr))\n            (nil))))\n\nand sched swaps them (when compiling for power6, it tries to put memory\nstores together, so insn 310 is moved up past 300 to go together with\nsome other store).  But the REG_CFA_RESTORE and REG_CFA_OFFSET cannot be\nswapped (they both say where the orig value of LR now lives).\n\n\n\tPR rtl-optimization/78029\n\t* function.c (prologue_contains, epilogue_contains): New functions.\n\t(record_prologue_seq, record_epilogue_seq): New functions.\n\t* function.h (prologue_contains, epilogue_contains,\n\trecord_prologue_seq, record_epilogue_seq): New declarations.\n\t* sched-deps.c (sched_analyze_insn): Make dependencies to prevent\n\tmixing prologue and epilogue insns.\n\t(init_deps): Initialize the new fields in struct deps_desc.\n\t* sched-int.h (struct deps_desc): New fields last_prologue,\n\tlast_epilogue, and last_logue_was_epilogue.\n\t* shrink-wrap.c (emit_common_heads_for_components): Record all\n\temitted prologue and epilogue insns.\n\t(emit_common_tails_for_components): Ditto.\n\t(insert_prologue_epilogue_for_components): Ditto.\n\nFrom-SVN: r241650", "tree": {"sha": "32410170d71a2ec4dfcafe368b6e6f93cbd4ae0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32410170d71a2ec4dfcafe368b6e6f93cbd4ae0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64f6e1e1589654b04fb9c0ac2fd20d010ccfdedb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64f6e1e1589654b04fb9c0ac2fd20d010ccfdedb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64f6e1e1589654b04fb9c0ac2fd20d010ccfdedb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64f6e1e1589654b04fb9c0ac2fd20d010ccfdedb/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f663d9ad6eaa6ff32676981461e865f96cb7c151", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f663d9ad6eaa6ff32676981461e865f96cb7c151", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f663d9ad6eaa6ff32676981461e865f96cb7c151"}], "stats": {"total": 89, "additions": 89, "deletions": 0}, "files": [{"sha": "cfd0929a1fee984da957e1703b2fa1b216d5319c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f6e1e1589654b04fb9c0ac2fd20d010ccfdedb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f6e1e1589654b04fb9c0ac2fd20d010ccfdedb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=64f6e1e1589654b04fb9c0ac2fd20d010ccfdedb", "patch": "@@ -1,3 +1,20 @@\n+2016-10-28  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR rtl-optimization/78029\n+\t* function.c (prologue_contains, epilogue_contains): New functions.\n+\t(record_prologue_seq, record_epilogue_seq): New functions.\n+\t* function.h (prologue_contains, epilogue_contains,\n+\trecord_prologue_seq, record_epilogue_seq): New declarations.\n+\t* sched-deps.c (sched_analyze_insn): Make dependencies to prevent\n+\tmixing prologue and epilogue insns.\n+\t(init_deps): Initialize the new fields in struct deps_desc.\n+\t* sched-int.h (struct deps_desc): New fields last_prologue,\n+\tlast_epilogue, and last_logue_was_epilogue.\n+\t* shrink-wrap.c (emit_common_heads_for_components): Record all\n+\temitted prologue and epilogue insns.\n+\t(emit_common_tails_for_components): Ditto.\n+\t(insert_prologue_epilogue_for_components): Ditto.\n+\n 2016-10-28  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR middle-end/22141"}, {"sha": "0b1d16805ac4d2ae93f90ab79f0c4b21b975b8e6", "filename": "gcc/function.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f6e1e1589654b04fb9c0ac2fd20d010ccfdedb/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f6e1e1589654b04fb9c0ac2fd20d010ccfdedb/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=64f6e1e1589654b04fb9c0ac2fd20d010ccfdedb", "patch": "@@ -5751,6 +5751,18 @@ contains (const_rtx insn, hash_table<insn_cache_hasher> *hash)\n   return hash->find (const_cast<rtx> (insn)) != NULL;\n }\n \n+int\n+prologue_contains (const_rtx insn)\n+{\n+  return contains (insn, prologue_insn_hash);\n+}\n+\n+int\n+epilogue_contains (const_rtx insn)\n+{\n+  return contains (insn, epilogue_insn_hash);\n+}\n+\n int\n prologue_epilogue_contains (const_rtx insn)\n {\n@@ -5761,6 +5773,17 @@ prologue_epilogue_contains (const_rtx insn)\n   return 0;\n }\n \n+void\n+record_prologue_seq (rtx_insn *seq)\n+{\n+  record_insns (seq, NULL, &prologue_insn_hash);\n+}\n+\n+void\n+record_epilogue_seq (rtx_insn *seq)\n+{\n+  record_insns (seq, NULL, &epilogue_insn_hash);\n+}\n \n /* Set JUMP_LABEL for a return insn.  */\n "}, {"sha": "e854c7f1c99f070b3641af1be31e5e5b64657844", "filename": "gcc/function.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f6e1e1589654b04fb9c0ac2fd20d010ccfdedb/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f6e1e1589654b04fb9c0ac2fd20d010ccfdedb/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=64f6e1e1589654b04fb9c0ac2fd20d010ccfdedb", "patch": "@@ -628,7 +628,11 @@ extern void clobber_return_register (void);\n extern void expand_function_end (void);\n extern rtx get_arg_pointer_save_area (void);\n extern void maybe_copy_prologue_epilogue_insn (rtx, rtx);\n+extern int prologue_contains (const_rtx);\n+extern int epilogue_contains (const_rtx);\n extern int prologue_epilogue_contains (const_rtx);\n+extern void record_prologue_seq (rtx_insn *);\n+extern void record_epilogue_seq (rtx_insn *);\n extern void emit_return_into_block (bool simple_p, basic_block bb);\n extern void set_return_jump_label (rtx_insn *);\n extern bool active_insn_between (rtx_insn *head, rtx_insn *tail);"}, {"sha": "1ebd7766901305a67b4a965c84abbad36740aba7", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f6e1e1589654b04fb9c0ac2fd20d010ccfdedb/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f6e1e1589654b04fb9c0ac2fd20d010ccfdedb/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=64f6e1e1589654b04fb9c0ac2fd20d010ccfdedb", "patch": "@@ -3502,6 +3502,31 @@ sched_analyze_insn (struct deps_desc *deps, rtx x, rtx_insn *insn)\n       if (!deps->readonly)\n \tdeps->last_args_size = insn;\n     }\n+\n+  /* We must not mix prologue and epilogue insns.  See PR78029.  */\n+  if (prologue_contains (insn))\n+    {\n+      add_dependence_list (insn, deps->last_epilogue, true, REG_DEP_ANTI, true);\n+      if (!deps->readonly)\n+\t{\n+\t  if (deps->last_logue_was_epilogue)\n+\t    free_INSN_LIST_list (&deps->last_prologue);\n+\t  deps->last_prologue = alloc_INSN_LIST (insn, deps->last_prologue);\n+\t  deps->last_logue_was_epilogue = false;\n+\t}\n+    }\n+\n+  if (epilogue_contains (insn))\n+    {\n+      add_dependence_list (insn, deps->last_prologue, true, REG_DEP_ANTI, true);\n+      if (!deps->readonly)\n+\t{\n+\t  if (!deps->last_logue_was_epilogue)\n+\t    free_INSN_LIST_list (&deps->last_epilogue);\n+\t  deps->last_epilogue = alloc_INSN_LIST (insn, deps->last_epilogue);\n+\t  deps->last_logue_was_epilogue = true;\n+\t}\n+    }\n }\n \n /* Return TRUE if INSN might not always return normally (e.g. call exit,\n@@ -3907,6 +3932,9 @@ init_deps (struct deps_desc *deps, bool lazy_reg_last)\n   deps->in_post_call_group_p = not_post_call;\n   deps->last_debug_insn = 0;\n   deps->last_args_size = 0;\n+  deps->last_prologue = 0;\n+  deps->last_epilogue = 0;\n+  deps->last_logue_was_epilogue = false;\n   deps->last_reg_pending_barrier = NOT_A_BARRIER;\n   deps->readonly = 0;\n }"}, {"sha": "d067b43c36ecb0a80f233f398fdf3f73fb5d3f37", "filename": "gcc/sched-int.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f6e1e1589654b04fb9c0ac2fd20d010ccfdedb/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f6e1e1589654b04fb9c0ac2fd20d010ccfdedb/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=64f6e1e1589654b04fb9c0ac2fd20d010ccfdedb", "patch": "@@ -537,6 +537,17 @@ struct deps_desc\n   /* The last insn bearing REG_ARGS_SIZE that we've seen.  */\n   rtx_insn *last_args_size;\n \n+  /* A list of all prologue insns we have seen without intervening epilogue\n+     insns, and one of all epilogue insns we have seen without intervening\n+     prologue insns.  This is used to prevent mixing prologue and epilogue\n+     insns.  See PR78029.  */\n+  rtx_insn_list *last_prologue;\n+  rtx_insn_list *last_epilogue;\n+\n+  /* Whether the last *logue insn was an epilogue insn or a prologue insn\n+     instead.  */\n+  bool last_logue_was_epilogue;\n+\n   /* The maximum register number for the following arrays.  Before reload\n      this is max_reg_num; after reload it is FIRST_PSEUDO_REGISTER.  */\n   int max_reg;"}, {"sha": "4395d8a1cf75e98030fe15d8674aced27807c5e6", "filename": "gcc/shrink-wrap.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f6e1e1589654b04fb9c0ac2fd20d010ccfdedb/gcc%2Fshrink-wrap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f6e1e1589654b04fb9c0ac2fd20d010ccfdedb/gcc%2Fshrink-wrap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fshrink-wrap.c?ref=64f6e1e1589654b04fb9c0ac2fd20d010ccfdedb", "patch": "@@ -1434,6 +1434,7 @@ emit_common_heads_for_components (sbitmap components)\n \t  targetm.shrink_wrap.emit_prologue_components (pro);\n \t  rtx_insn *seq = get_insns ();\n \t  end_sequence ();\n+\t  record_prologue_seq (seq);\n \n \t  emit_insn_after (seq, bb_note (bb));\n \n@@ -1446,6 +1447,7 @@ emit_common_heads_for_components (sbitmap components)\n \t  targetm.shrink_wrap.emit_epilogue_components (epi);\n \t  rtx_insn *seq = get_insns ();\n \t  end_sequence ();\n+\t  record_epilogue_seq (seq);\n \n \t  emit_insn_after (seq, bb_note (bb));\n \n@@ -1533,6 +1535,7 @@ emit_common_tails_for_components (sbitmap components)\n \t  targetm.shrink_wrap.emit_epilogue_components (epi);\n \t  rtx_insn *seq = get_insns ();\n \t  end_sequence ();\n+\t  record_epilogue_seq (seq);\n \n \t  if (control_flow_insn_p (last_insn))\n \t    emit_insn_before (seq, last_insn);\n@@ -1548,6 +1551,7 @@ emit_common_tails_for_components (sbitmap components)\n \t  targetm.shrink_wrap.emit_prologue_components (pro);\n \t  rtx_insn *seq = get_insns ();\n \t  end_sequence ();\n+\t  record_prologue_seq (seq);\n \n \t  if (control_flow_insn_p (last_insn))\n \t    emit_insn_before (seq, last_insn);\n@@ -1612,6 +1616,7 @@ insert_prologue_epilogue_for_components (sbitmap components)\n \t      targetm.shrink_wrap.emit_epilogue_components (epi);\n \t      rtx_insn *seq = get_insns ();\n \t      end_sequence ();\n+\t      record_epilogue_seq (seq);\n \n \t      if (e->flags & EDGE_SIBCALL)\n \t\t{\n@@ -1635,6 +1640,7 @@ insert_prologue_epilogue_for_components (sbitmap components)\n \t      targetm.shrink_wrap.emit_prologue_components (pro);\n \t      seq = get_insns ();\n \t      end_sequence ();\n+\t      record_prologue_seq (seq);\n \n \t      insert_insn_on_edge (seq, e);\n \t    }"}]}