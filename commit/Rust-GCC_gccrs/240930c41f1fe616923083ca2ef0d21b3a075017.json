{"sha": "240930c41f1fe616923083ca2ef0d21b3a075017", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQwOTMwYzQxZjFmZTYxNjkyMzA4M2NhMmVmMGQyMWIzYTA3NTAxNw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2016-11-15T18:30:31Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2016-11-15T18:30:31Z"}, "message": "Fix instances of gen_rtx_REG (VOIDmode, ...)\n\nSeveral definitions of INCOMING_RETURN_ADDR_RTX used\ngen_rtx_REG (VOIDmode, ...), which with later patches\nwould trip an assert.  This patch converts them to use\nPmode instead.\n\ngcc/\n2016-11-15  Richard Sandiford  <richard.sandiford@arm.com>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\n\t* config/i386/i386.h (INCOMING_RETURN_ADDR_RTX): Use Pmode instead\n\tof VOIDmode.\n\t* config/ia64/ia64.h (INCOMING_RETURN_ADDR_RTX): Likewise.\n\t* config/iq2000/iq2000.h (INCOMING_RETURN_ADDR_RTX): Likewise.\n\t* config/m68k/m68k.h (INCOMING_RETURN_ADDR_RTX): Likewise.\n\t* config/microblaze/microblaze.h (INCOMING_RETURN_ADDR_RTX): Likewise.\n\t* config/mips/mips.h (INCOMING_RETURN_ADDR_RTX): Likewise.\n\t* config/mn10300/mn10300.h (INCOMING_RETURN_ADDR_RTX): Likewise.\n\t* config/nios2/nios2.h (INCOMING_RETURN_ADDR_RTX): Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r242447", "tree": {"sha": "b6d293077f01bc673a40b24c6fcd6df1d944ca37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6d293077f01bc673a40b24c6fcd6df1d944ca37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/240930c41f1fe616923083ca2ef0d21b3a075017", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/240930c41f1fe616923083ca2ef0d21b3a075017", "html_url": "https://github.com/Rust-GCC/gccrs/commit/240930c41f1fe616923083ca2ef0d21b3a075017", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/240930c41f1fe616923083ca2ef0d21b3a075017/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7eb874201e7dccfe9e9afe9a51011a84b4527f29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eb874201e7dccfe9e9afe9a51011a84b4527f29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7eb874201e7dccfe9e9afe9a51011a84b4527f29"}], "stats": {"total": 30, "additions": 22, "deletions": 8}, "files": [{"sha": "fa71c3b135e452e880a764d72ca495b9c2c5f57a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240930c41f1fe616923083ca2ef0d21b3a075017/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240930c41f1fe616923083ca2ef0d21b3a075017/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=240930c41f1fe616923083ca2ef0d21b3a075017", "patch": "@@ -1,3 +1,17 @@\n+2016-11-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* config/i386/i386.h (INCOMING_RETURN_ADDR_RTX): Use Pmode instead\n+\tof VOIDmode.\n+\t* config/ia64/ia64.h (INCOMING_RETURN_ADDR_RTX): Likewise.\n+\t* config/iq2000/iq2000.h (INCOMING_RETURN_ADDR_RTX): Likewise.\n+\t* config/m68k/m68k.h (INCOMING_RETURN_ADDR_RTX): Likewise.\n+\t* config/microblaze/microblaze.h (INCOMING_RETURN_ADDR_RTX): Likewise.\n+\t* config/mips/mips.h (INCOMING_RETURN_ADDR_RTX): Likewise.\n+\t* config/mn10300/mn10300.h (INCOMING_RETURN_ADDR_RTX): Likewise.\n+\t* config/nios2/nios2.h (INCOMING_RETURN_ADDR_RTX): Likewise.\n+\n 2016-11-15  Richard Sandiford  <richard.sandiford@arm.com>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "fdaf423513dda5a4455d989263b8db6085039f03", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240930c41f1fe616923083ca2ef0d21b3a075017/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240930c41f1fe616923083ca2ef0d21b3a075017/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=240930c41f1fe616923083ca2ef0d21b3a075017", "patch": "@@ -2176,7 +2176,7 @@ extern int const x86_64_ms_sysv_extra_clobbered_registers[12];\n \n /* Before the prologue, RA is at 0(%esp).  */\n #define INCOMING_RETURN_ADDR_RTX \\\n-  gen_rtx_MEM (VOIDmode, gen_rtx_REG (VOIDmode, STACK_POINTER_REGNUM))\n+  gen_rtx_MEM (Pmode, gen_rtx_REG (Pmode, STACK_POINTER_REGNUM))\n \n /* After the prologue, RA is at -4(AP) in the current frame.  */\n #define RETURN_ADDR_RTX(COUNT, FRAME)\t\t\t\t\t\\"}, {"sha": "c79e20b866082c07ed7d96347d042948ebf004d1", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240930c41f1fe616923083ca2ef0d21b3a075017/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240930c41f1fe616923083ca2ef0d21b3a075017/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=240930c41f1fe616923083ca2ef0d21b3a075017", "patch": "@@ -896,7 +896,7 @@ enum reg_class\n    RTL is either a `REG', indicating that the return value is saved in `REG',\n    or a `MEM' representing a location in the stack.  This enables DWARF2\n    unwind info for C++ EH.  */\n-#define INCOMING_RETURN_ADDR_RTX gen_rtx_REG (VOIDmode, BR_REG (0))\n+#define INCOMING_RETURN_ADDR_RTX gen_rtx_REG (Pmode, BR_REG (0))\n \n /* A C expression whose value is an integer giving the offset, in bytes, from\n    the value of the stack pointer register to the top of the stack frame at the"}, {"sha": "e79c9a744f2c2ff3e187361ed946385e96f2a08d", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240930c41f1fe616923083ca2ef0d21b3a075017/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240930c41f1fe616923083ca2ef0d21b3a075017/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=240930c41f1fe616923083ca2ef0d21b3a075017", "patch": "@@ -258,7 +258,7 @@ enum reg_class\n     : (rtx) 0)\n \n /* Before the prologue, RA lives in r31.  */\n-#define INCOMING_RETURN_ADDR_RTX  gen_rtx_REG (VOIDmode, GP_REG_FIRST + 31)\n+#define INCOMING_RETURN_ADDR_RTX  gen_rtx_REG (Pmode, GP_REG_FIRST + 31)\n \n \f\n /* Register That Address the Stack Frame.  */"}, {"sha": "7b63bd2e77365bd3d620dc2f65364c319f6c842f", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240930c41f1fe616923083ca2ef0d21b3a075017/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240930c41f1fe616923083ca2ef0d21b3a075017/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=240930c41f1fe616923083ca2ef0d21b3a075017", "patch": "@@ -768,7 +768,7 @@ do { if (cc_prev_status.flags & CC_IN_68881)\t\t\t\\\n \n /* Before the prologue, RA is at 0(%sp).  */\n #define INCOMING_RETURN_ADDR_RTX \\\n-  gen_rtx_MEM (VOIDmode, gen_rtx_REG (VOIDmode, STACK_POINTER_REGNUM))\n+  gen_rtx_MEM (Pmode, gen_rtx_REG (Pmode, STACK_POINTER_REGNUM))\n \n /* After the prologue, RA is at 4(AP) in the current frame.  */\n #define RETURN_ADDR_RTX(COUNT, FRAME)\t\t\t\t\t   \\"}, {"sha": "849fab9353f90b2a41571053ef85bf82a858ef9f", "filename": "gcc/config/microblaze/microblaze.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240930c41f1fe616923083ca2ef0d21b3a075017/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240930c41f1fe616923083ca2ef0d21b3a075017/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h?ref=240930c41f1fe616923083ca2ef0d21b3a075017", "patch": "@@ -182,7 +182,7 @@ extern enum pipeline_type microblaze_pipe;\n    NOTE:  GDB has a workaround and expects this incorrect value.\n    If this is fixed, a corresponding fix to GDB is needed.  */\n #define INCOMING_RETURN_ADDR_RTX  \t\t\t\\\n-  gen_rtx_REG (VOIDmode, GP_REG_FIRST + MB_ABI_SUB_RETURN_ADDR_REGNUM)\n+  gen_rtx_REG (Pmode, GP_REG_FIRST + MB_ABI_SUB_RETURN_ADDR_REGNUM)\n \n /* Use DWARF 2 debugging information by default.  */\n #define DWARF2_DEBUGGING_INFO"}, {"sha": "12662a7ea396b63b87dcca309650529b9961451d", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240930c41f1fe616923083ca2ef0d21b3a075017/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240930c41f1fe616923083ca2ef0d21b3a075017/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=240930c41f1fe616923083ca2ef0d21b3a075017", "patch": "@@ -1469,7 +1469,7 @@ FP_ASM_SPEC \"\\\n #define DWARF_FRAME_RETURN_COLUMN RETURN_ADDR_REGNUM\n \n /* Before the prologue, RA lives in r31.  */\n-#define INCOMING_RETURN_ADDR_RTX gen_rtx_REG (VOIDmode, RETURN_ADDR_REGNUM)\n+#define INCOMING_RETURN_ADDR_RTX gen_rtx_REG (Pmode, RETURN_ADDR_REGNUM)\n \n /* Describe how we implement __builtin_eh_return.  */\n #define EH_RETURN_DATA_REGNO(N) \\"}, {"sha": "9fd3d4be38b4912fca8c907c7444db85000b2a5d", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240930c41f1fe616923083ca2ef0d21b3a075017/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240930c41f1fe616923083ca2ef0d21b3a075017/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=240930c41f1fe616923083ca2ef0d21b3a075017", "patch": "@@ -516,7 +516,7 @@ struct cum_arg\n /* The return address is saved both in the stack and in MDR.  Using\n    the stack location is handiest for what unwinding needs.  */\n #define INCOMING_RETURN_ADDR_RTX \\\n-  gen_rtx_MEM (VOIDmode, gen_rtx_REG (VOIDmode, STACK_POINTER_REGNUM))\n+  gen_rtx_MEM (Pmode, gen_rtx_REG (Pmode, STACK_POINTER_REGNUM))\n \f\n /* Maximum number of registers that can appear in a valid memory address.  */\n "}, {"sha": "e539c8f49bc5127fe2374720c65481bb38e2b472", "filename": "gcc/config/nios2/nios2.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240930c41f1fe616923083ca2ef0d21b3a075017/gcc%2Fconfig%2Fnios2%2Fnios2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240930c41f1fe616923083ca2ef0d21b3a075017/gcc%2Fconfig%2Fnios2%2Fnios2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.h?ref=240930c41f1fe616923083ca2ef0d21b3a075017", "patch": "@@ -265,7 +265,7 @@ enum reg_class\n #define FIRST_PARM_OFFSET(FUNDECL) 0\n \n /* Before the prologue, RA lives in r31.  */\n-#define INCOMING_RETURN_ADDR_RTX  gen_rtx_REG (VOIDmode, RA_REGNO)\n+#define INCOMING_RETURN_ADDR_RTX  gen_rtx_REG (Pmode, RA_REGNO)\n #define RETURN_ADDR_RTX(C,F) nios2_get_return_address (C)\n \n #define DWARF_FRAME_RETURN_COLUMN RA_REGNO"}]}