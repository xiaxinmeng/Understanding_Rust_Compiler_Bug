{"sha": "b86f6cd9ab108f1fda89c4fb00b0b16931182041", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg2ZjZjZDlhYjEwOGYxZmRhODljNGZiMDBiMGIxNjkzMTE4MjA0MQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-07-02T20:15:46Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-07-02T20:15:46Z"}, "message": "c-common.h (c_common_init_options): New prototype.\n\n\t* c-common.h (c_common_init_options): New prototype.\n\t* c-opts.c (deferred_size): Remove.\n\t(defer_opt): Array is now pre-allocated.\n\t(c_common_init_options): Pre-allocate deferred_opts.  Make\n\tlang_flags unsigned.\n\t(push_command_line_options): Free deferred_opts.\n\t* hooks.c (hook_uint_uint_constcharptrptr_0): New.\n\t* hooks.h (hook_uint_uint_constcharptrptr_0): New.\n\t* langhooks-def.h (LANG_HOOKS_INIT_OPTIONS): Update.\n\t* langhooks.h (struct lang_hooks): New prototype for init_options.\n\t* main.c (main): Cast argv.\n\t* opts.c (handle_option, handle_options): Update prototypes.\n\t(decode_options): save_argc, save_argv are not global.  Constify.\n\t* opts.h (decode_options): New prototype.\n\t* toplev.c (general_init): New protoype.\n\t(save_argv): Make static.\n\t(save_argc): Remove.\n\t(print_switch_values, general_init): Constify.\n\t(toplev_main): Save argv.\n\t* toplev.h (toplev_main): Update prototype.\n\t(save_argc, save_argv): Remove.\nada:\n\t* misc.c (save_argc, save_argv): Make static.\n\t(gnat_init_options): New prototype.\n\t(gnat_init_options): Update.\nf:\n\t* top.c (ffe_init_options): Update prototype.\n\t* top.h (ffe_init_options): Update prototype.\njava:\n\t* lang.c (java_init_options): Update prototype.\ntreelang:\n\t* tree1.c (treelang_init_options): Update prototype.\n\t* treelang.h (treelang_init_options): Update prototype.\n\nFrom-SVN: r68850", "tree": {"sha": "9c89fbb7a4fe5df7e431edc8e3aadca6bfb3b1de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c89fbb7a4fe5df7e431edc8e3aadca6bfb3b1de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b86f6cd9ab108f1fda89c4fb00b0b16931182041", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b86f6cd9ab108f1fda89c4fb00b0b16931182041", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b86f6cd9ab108f1fda89c4fb00b0b16931182041", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b86f6cd9ab108f1fda89c4fb00b0b16931182041/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "41ba4c4632751678d7c32b169da1ff40c39bfb9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41ba4c4632751678d7c32b169da1ff40c39bfb9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41ba4c4632751678d7c32b169da1ff40c39bfb9e"}], "stats": {"total": 179, "additions": 112, "deletions": 67}, "files": [{"sha": "d18086a825b2bdeb06958bc35022e1ec23c4b1c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b86f6cd9ab108f1fda89c4fb00b0b16931182041", "patch": "@@ -1,3 +1,27 @@\n+2003-07-02  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* c-common.h (c_common_init_options): New prototype.\n+\t* c-opts.c (deferred_size): Remove.\n+\t(defer_opt): Array is now pre-allocated.\n+\t(c_common_init_options): Pre-allocate deferred_opts.  Make\n+\tlang_flags unsigned.\n+\t(push_command_line_options): Free deferred_opts.\n+\t* hooks.c (hook_uint_uint_constcharptrptr_0): New.\n+\t* hooks.h (hook_uint_uint_constcharptrptr_0): New.\n+\t* langhooks-def.h (LANG_HOOKS_INIT_OPTIONS): Update.\n+\t* langhooks.h (struct lang_hooks): New prototype for init_options.\n+\t* main.c (main): Cast argv.\n+\t* opts.c (handle_option, handle_options): Update prototypes.\n+\t(decode_options): save_argc, save_argv are not global.  Constify.\n+\t* opts.h (decode_options): New prototype.\n+\t* toplev.c (general_init): New protoype.\n+\t(save_argv): Make static.\n+\t(save_argc): Remove.\n+\t(print_switch_values, general_init): Constify.\n+\t(toplev_main): Save argv.\n+\t* toplev.h (toplev_main): Update prototype.\n+\t(save_argc, save_argv): Remove.\n+\n 2003-07-02  David Edelsohn  <edelsohn@gnu.org>\n \n \t* dbxout.c (pending_bincls): Guard with DBX_USE_BINCLS."}, {"sha": "67417f0bcd420399b4ae35503305807cf2f5e30e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b86f6cd9ab108f1fda89c4fb00b0b16931182041", "patch": "@@ -1,3 +1,9 @@\n+2003-07-02  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* misc.c (save_argc, save_argv): Make static.\n+\t(gnat_init_options): New prototype.\n+\t(gnat_init_options): Update.\n+\n 2003-07-01  Matt Kraai  <kraai@alumni.cmu.edu>\n \n \t* gnat_ug.texi: Remove unlikely characters from @vars."}, {"sha": "ab618e5399be265b8a2bfea3f2db8056db4dddca", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=b86f6cd9ab108f1fda89c4fb00b0b16931182041", "patch": "@@ -78,12 +78,10 @@\n #include \"options.h\"\n \n extern FILE *asm_out_file;\n-extern int save_argc;\n-extern char **save_argv;\n \n static size_t gnat_tree_size\t\tPARAMS ((enum tree_code));\n static bool gnat_init\t\t\tPARAMS ((void));\n-static int gnat_init_options\t\tPARAMS ((void));\n+static unsigned int gnat_init_options\t(unsigned int, const char **);\n static int gnat_handle_option (size_t scode, const char *arg, int value);\n static HOST_WIDE_INT gnat_get_alias_set\tPARAMS ((tree));\n static void gnat_print_decl\t\tPARAMS ((FILE *, tree, int));\n@@ -181,6 +179,10 @@ const char *const tree_code_name[] = {\n };\n #undef DEFTREECODE\n \n+/* Command-line argc and argv.  */\n+static unsigned int save_argc;\n+static const char **save_argv;\n+\n /* gnat standard argc argv */\n \n extern int gnat_argc;\n@@ -222,7 +224,7 @@ gnat_handle_option (size_t scode, const char *arg, int value ATTRIBUTE_UNUSED)\n {\n   enum opt_code code = (enum opt_code) scode;\n   char *q;\n-  int i;\n+  unsigned int i;\n \n   /* Ignore file names.  */\n   if (code == N_OPTS)\n@@ -279,14 +281,17 @@ gnat_handle_option (size_t scode, const char *arg, int value ATTRIBUTE_UNUSED)\n \n /* Initialize for option processing.  */\n \n-static int\n-gnat_init_options ()\n+static unsigned int\n+gnat_init_options (unsigned int argc, const char **argv)\n {\n-  /* Initialize gnat_argv with save_argv size */\n-  gnat_argv = (char **) xmalloc ((save_argc + 1) * sizeof (gnat_argv[0])); \n-  gnat_argv[0] = save_argv[0];     /* name of the command */ \n+  /* Initialize gnat_argv with save_argv size.  */\n+  gnat_argv = (char **) xmalloc ((argc + 1) * sizeof (argv[0])); \n+  gnat_argv[0] = argv[0];     /* name of the command */ \n   gnat_argc = 1;\n \n+  save_argc = argc;\n+  save_argv = argv;\n+\n   return CL_Ada;\n }\n "}, {"sha": "f4dc8f7c4c117c69d24b00af6f7d6f0dbfa5c4b4", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=b86f6cd9ab108f1fda89c4fb00b0b16931182041", "patch": "@@ -953,7 +953,7 @@ extern void disable_builtin_function (const char *);\n \n extern tree build_va_arg (tree, tree);\n \n-extern int c_common_init_options (void);\n+extern unsigned int c_common_init_options (unsigned int, const char **);\n extern bool c_common_post_options (const char **);\n extern bool c_common_init (void);\n extern void c_common_finish (void);"}, {"sha": "5ee53b47eee58995f5009608727b9fb559d05f19", "filename": "gcc/c-opts.c", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=b86f6cd9ab108f1fda89c4fb00b0b16931182041", "patch": "@@ -92,8 +92,8 @@ static bool quote_chain_split;\n /* If -Wunused-macros.  */\n static bool warn_unused_macros;\n \n-/* Number of deferred options, deferred options array size.  */\n-static size_t deferred_count, deferred_size;\n+/* Number of deferred options.  */\n+static size_t deferred_count;\n \n /* Number of deferred options scanned for -include.  */\n static size_t include_cursor;\n@@ -191,29 +191,16 @@ missing_arg (enum opt_code code)\n static void\n defer_opt (enum opt_code code, const char *arg)\n {\n-  /* FIXME: this should be in c_common_init_options, which should take\n-     argc and argv.  */\n-  if (!deferred_opts)\n-    {\n-      extern int save_argc;\n-      deferred_size = save_argc;\n-      deferred_opts = (struct deferred_opt *)\n-\txmalloc (deferred_size * sizeof (struct deferred_opt));\n-    }\n-\n-  if (deferred_count == deferred_size)\n-    abort ();\n-\n   deferred_opts[deferred_count].code = code;\n   deferred_opts[deferred_count].arg = arg;\n   deferred_count++;\n }\n \n /* Common initialization before parsing options.  */\n-int\n-c_common_init_options (void)\n+unsigned int\n+c_common_init_options (unsigned int argc, const char **argv ATTRIBUTE_UNUSED)\n {\n-  static const int lang_flags[] = {CL_C, CL_ObjC, CL_CXX, CL_ObjCXX};\n+  static const unsigned int lang_flags[] = {CL_C, CL_ObjC, CL_CXX, CL_ObjCXX};\n \n   /* This is conditionalized only because that is the way the front\n      ends used to do it.  Maybe this should be unconditional?  */\n@@ -242,6 +229,9 @@ c_common_init_options (void)\n   flag_exceptions = c_dialect_cxx ();\n   warn_pointer_arith = c_dialect_cxx ();\n \n+  deferred_opts = (struct deferred_opt *)\n+    xmalloc (argc * sizeof (struct deferred_opt));\n+\n   return lang_flags[c_language];\n }\n \n@@ -1406,6 +1396,7 @@ push_command_line_include (void)\n \n   if (include_cursor == deferred_count)\n     {\n+      free (deferred_opts);\n       /* Restore the line map from <command line>.  */\n       cpp_change_file (parse_in, LC_RENAME, main_input_filename);\n       /* -Wunused-macros should only warn about macros defined hereafter.  */"}, {"sha": "895db166a7741d6b87eee47f3bf232007d613f82", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=b86f6cd9ab108f1fda89c4fb00b0b16931182041", "patch": "@@ -1,3 +1,8 @@\n+Wed Jul  2 21:16:02 2003  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* top.c (ffe_init_options): Update prototype.\n+\t* top.h (ffe_init_options): Update prototype.\n+\n 2003-06-27  Zack Weinberg  <zack@codesourcery.com>\n \n \t* com.c (input_file_stack_tick): Delete redundant declaration."}, {"sha": "30b6eb21f8c2961def7429c45e9b9d955f24477b", "filename": "gcc/f/top.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Ff%2Ftop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Ff%2Ftop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Ftop.c?ref=b86f6cd9ab108f1fda89c4fb00b0b16931182041", "patch": "@@ -156,8 +156,9 @@ ffe_is_digit_string_ (const char *s)\n }\n \n /* Get ready for options handling.  */\n-int\n-ffe_init_options ()\n+unsigned int\n+ffe_init_options (unsigned int argc ATTRIBUTE_UNUSED,\n+\t\t  const char **argv ATTRIBUTE_UNUSED)\n {\n   /* Set default options for Fortran.  */\n   flag_move_all_movables = 1;"}, {"sha": "5538ab8db13457f3d9b8619dd79601788997531f", "filename": "gcc/f/top.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Ff%2Ftop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Ff%2Ftop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Ftop.h?ref=b86f6cd9ab108f1fda89c4fb00b0b16931182041", "patch": "@@ -141,7 +141,7 @@ extern bool ffe_in_4;\n \n /* Declare functions with prototypes. */\n \n-int ffe_init_options (void);\n+unsigned int ffe_init_options (unsigned int, const char **);\n int ffe_handle_option (size_t code, const char *arg, int on);\n void ffe_file (ffewhereFile wf, FILE *f);\n void ffe_init_0 (void);"}, {"sha": "77979413899f3892da5cabea74abd1d4e2e4fe78", "filename": "gcc/hooks.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=b86f6cd9ab108f1fda89c4fb00b0b16931182041", "patch": "@@ -133,6 +133,13 @@ hook_int_size_t_constcharptr_int_0 (size_t a ATTRIBUTE_UNUSED,\n   return 0;\n }\n \n+unsigned int\n+hook_uint_uint_constcharptrptr_0 (unsigned int a ATTRIBUTE_UNUSED,\n+\t\t\t\t  const char **b ATTRIBUTE_UNUSED)\n+{\n+  return 0;\n+}\n+\n void\n hook_void_tree (a)\n      tree a ATTRIBUTE_UNUSED;"}, {"sha": "1fdea94d1c4fe800b1175d2ef75bcfa91ab9a91f", "filename": "gcc/hooks.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=b86f6cd9ab108f1fda89c4fb00b0b16931182041", "patch": "@@ -44,6 +44,8 @@ int hook_int_void_0 (void);\n int hook_int_size_t_constcharptr_int_0 (size_t, const char *, int);\n int hook_int_void_no_regs (void);\n \n+unsigned hook_uint_uint_constcharptrptr_0 (unsigned, const char **);\n+\n bool default_can_output_mi_thunk_no_vcall\n   PARAMS ((tree, HOST_WIDE_INT, HOST_WIDE_INT, tree));\n "}, {"sha": "3cdbf8c4fe66e256a6d7045e6a24fbe785e8afc1", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=b86f6cd9ab108f1fda89c4fb00b0b16931182041", "patch": "@@ -1,3 +1,7 @@\n+2003-07-02  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* lang.c (java_init_options): Update prototype.\n+\n 2003-07-01  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* decl.c (poplevel): Adjust define_label call."}, {"sha": "7137bcffd5817eedda924212d87c209c7584be33", "filename": "gcc/java/lang.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=b86f6cd9ab108f1fda89c4fb00b0b16931182041", "patch": "@@ -50,7 +50,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n \n static bool java_init (void);\n static void java_finish (void);\n-static int java_init_options (void);\n+static unsigned int java_init_options (unsigned int, const char **);\n static bool java_post_options (const char **);\n \n static int java_handle_option (size_t scode, const char *arg, int value);\n@@ -664,8 +664,9 @@ void lang_init_source (int level)\n   inhibit_error_function_printing = (level == 1);\n }\n \n-static int\n-java_init_options (void)\n+static unsigned int\n+java_init_options (unsigned int argc ATTRIBUTE_UNUSED,\n+\t\t   const char **argv ATTRIBUTE_UNUSED)\n {\n   flag_bounds_check = 1;\n   flag_exceptions = 1;"}, {"sha": "35597e7f970287763880c663074a13b5c54c1d9d", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=b86f6cd9ab108f1fda89c4fb00b0b16931182041", "patch": "@@ -90,8 +90,8 @@ void write_global_declarations PARAMS ((void));\n #define LANG_HOOKS_FINISH\t\tlhd_do_nothing\n #define LANG_HOOKS_PARSE_FILE\t\tlhd_do_nothing_i\n #define LANG_HOOKS_CLEAR_BINDING_STACK\tlhd_clear_binding_stack\n-#define LANG_HOOKS_INIT_OPTIONS\t\thook_int_void_0\n-#define LANG_HOOKS_HANDLE_OPTION\thook_int_size_t_constharptr_int_0\n+#define LANG_HOOKS_INIT_OPTIONS\t\thook_uint_uint_constcharptrptr_0\n+#define LANG_HOOKS_HANDLE_OPTION\thook_int_size_t_constcharptr_int_0\n #define LANG_HOOKS_POST_OPTIONS\t\tlhd_post_options\n #define LANG_HOOKS_GET_ALIAS_SET\tlhd_get_alias_set\n #define LANG_HOOKS_EXPAND_CONSTANT\tlhd_return_tree"}, {"sha": "eadff1244f1026c45b1623445cab7e3366119d28", "filename": "gcc/langhooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=b86f6cd9ab108f1fda89c4fb00b0b16931182041", "patch": "@@ -207,7 +207,7 @@ struct lang_hooks\n   /* The first callback made to the front end, for simple\n      initialization needed before any calls to handle_option.  Return\n      the language mask to filter the switch array with.  */\n-  int (*init_options) PARAMS ((void));\n+  unsigned int (*init_options) (unsigned int argc, const char **argv);\n \n   /* Handle the switch CODE, which has real type enum opt_code from\n      options.h.  If the switch takes an argument, it is passed in ARG"}, {"sha": "62ec5dd3a0269fc94f9fdeaee54fe9a76bd50a5b", "filename": "gcc/main.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Fmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Fmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmain.c?ref=b86f6cd9ab108f1fda89c4fb00b0b16931182041", "patch": "@@ -34,5 +34,5 @@ main (argc, argv)\n   int argc;\n   char **argv;\n {\n-  return toplev_main (argc, argv);\n+  return toplev_main (argc, (const char **) argv);\n }"}, {"sha": "3f3cc13ae037a27812c88a1de4727bd921f53585", "filename": "gcc/opts.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=b86f6cd9ab108f1fda89c4fb00b0b16931182041", "patch": "@@ -131,11 +131,11 @@ static size_t find_opt (const char *, int);\n static int common_handle_option (size_t scode, const char *arg, int value);\n static void handle_param (const char *);\n static void set_Wextra (int);\n-static unsigned int handle_option (char **argv, unsigned int lang_mask);\n+static unsigned int handle_option (const char **argv, unsigned int lang_mask);\n static char *write_langs (unsigned int lang_mask);\n static void complain_wrong_lang (const char *, const struct cl_option *,\n \t\t\t\t unsigned int lang_mask);\n-static void handle_options (unsigned int, char **, unsigned int lang_mask);\n+static void handle_options (unsigned int, const char **, unsigned int);\n \n /* Perform a binary search to find which option the command-line INPUT\n    matches.  Returns its index in the option array, and N_OPTS\n@@ -286,7 +286,7 @@ complain_wrong_lang (const char *text, const struct cl_option *option,\n /* Handle the switch beginning at ARGV for the language indicated by\n    LANG_MASK.  Returns the number of switches consumed.  */\n static unsigned int\n-handle_option (char **argv, unsigned int lang_mask)\n+handle_option (const char **argv, unsigned int lang_mask)\n {\n   size_t opt_index;\n   const char *opt, *arg = 0;\n@@ -408,7 +408,7 @@ handle_option (char **argv, unsigned int lang_mask)\n    contains has a single bit set representing the current\n    language.  */\n static void\n-handle_options (unsigned int argc, char **argv, unsigned int lang_mask)\n+handle_options (unsigned int argc, const char **argv, unsigned int lang_mask)\n {\n   unsigned int n, i;\n \n@@ -427,16 +427,12 @@ handle_options (unsigned int argc, char **argv, unsigned int lang_mask)\n /* Parse command line options and set default flag values.  Do minimal\n    options processing.  */\n void\n-decode_options (int argc, char **argv)\n+decode_options (unsigned int argc, const char **argv)\n {\n-  int i, lang_mask;\n-\n-  /* Save in case md file wants to emit args as a comment.  */\n-  save_argc = argc;\n-  save_argv = argv;\n+  unsigned int i, lang_mask;\n \n   /* Perform language-specific options initialization.  */\n-  lang_mask = (*lang_hooks.init_options) ();\n+  lang_mask = (*lang_hooks.init_options) (argc, argv);\n \n   /* Scan to see what optimization level has been specified.  That will\n      determine the default value of many flags.  */\n@@ -450,7 +446,7 @@ decode_options (int argc, char **argv)\n       else if (argv[i][0] == '-' && argv[i][1] == 'O')\n \t{\n \t  /* Handle -Os, -O2, -O3, -O69, ...  */\n-\t  char *p = &argv[i][2];\n+\t  const char *p = &argv[i][2];\n \n \t  if ((p[0] == 's') && (p[1] == 0))\n \t    {"}, {"sha": "52ab44b334a54a919d4041b29f5ddfca47805811", "filename": "gcc/opts.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=b86f6cd9ab108f1fda89c4fb00b0b16931182041", "patch": "@@ -21,7 +21,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #ifndef GCC_OPTS_H\n #define GCC_OPTS_H\n \n-extern void decode_options (int argc, char **argv);\n+extern void decode_options (unsigned int argc, const char **argv);\n \n struct cl_option\n {"}, {"sha": "2f83d681e4672f7102c7f3a66b28c39ee4ec7077", "filename": "gcc/toplev.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=b86f6cd9ab108f1fda89c4fb00b0b16931182041", "patch": "@@ -104,7 +104,7 @@ extern tree last_assemble_variable_decl;\n \n extern void reg_alloc (void);\n \n-static void general_init (char *);\n+static void general_init (const char *);\n static void do_compile (void);\n static void process_options (void);\n static void backend_init (void);\n@@ -172,9 +172,8 @@ static bool no_backend;\n \n const char *progname;\n \n-/* Copy of arguments to toplev_main.  */\n-int save_argc;\n-char **save_argv;\n+/* Copy of argument vector to toplev_main.  */\n+static const char **save_argv;\n \n /* Name of top-level original source file (what was input to cpp).\n    This comes from the #-command at the beginning of the actual input.\n@@ -4408,7 +4407,7 @@ print_switch_values (FILE *file, int pos, int max,\n \t\t     const char *indent, const char *sep, const char *term)\n {\n   size_t j;\n-  char **p;\n+  const char **p;\n \n   /* Fill in the -frandom-seed option, if the user didn't pass it, so\n      that it can be printed below.  This helps reproducibility.  Of\n@@ -4537,9 +4536,9 @@ init_asm_output (const char *name)\n    options are parsed.  Signal handlers, internationalization etc.\n    ARGV0 is main's argv[0].  */\n static void\n-general_init (char *argv0)\n+general_init (const char *argv0)\n {\n-  char *p;\n+  const char *p;\n \n   p = argv0 + strlen (argv0);\n   while (p != argv0 && !IS_DIR_SEPARATOR (p[-1]))\n@@ -4975,8 +4974,10 @@ do_compile (void)\n    It is not safe to call this function more than once.  */\n \n int\n-toplev_main (int argc, char **argv)\n+toplev_main (unsigned int argc, const char **argv)\n {\n+  save_argv = argv;\n+\n   /* Initialization of GCC's environment, and diagnostics.  */\n   general_init (argv[0]);\n "}, {"sha": "9cb3746db9647cc2e798e9267767d6cad4526b47", "filename": "gcc/toplev.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=b86f6cd9ab108f1fda89c4fb00b0b16931182041", "patch": "@@ -26,7 +26,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define skip_leading_substring(whole,  part) \\\n    (strncmp (whole, part, strlen (part)) ? NULL : whole + strlen (part))\n \n-extern int toplev_main\t\t\t(int, char **);\n+extern int toplev_main\t\t\t(unsigned int, const char **);\n extern int read_integral_parameter\t(const char *, const char *,\n \t\t\t\t\t const int);\n extern void strip_off_ending\t\t(char *, int);\n@@ -102,10 +102,6 @@ extern const char *asm_file_name;\n extern bool exit_after_options;\n extern bool version_flag;\n \n-/* Copy of arguments to toplev_main.  */\n-extern int save_argc;\n-extern char **save_argv;\n-\n extern int target_flags_explicit;\n \n /* See toplev.c.  */"}, {"sha": "5b0e35222c0b61b5d5dd48d5d4c79ccd05fd9c23", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=b86f6cd9ab108f1fda89c4fb00b0b16931182041", "patch": "@@ -1,3 +1,8 @@\n+2003-07-02  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* tree1.c (treelang_init_options): Update prototype.\n+\t* treelang.h (treelang_init_options): Update prototype.\n+\n 2003-07-01  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* Make-lang.in: Update."}, {"sha": "54c41eeb6d90ebe2838fc00a00512460ff05bb9c", "filename": "gcc/treelang/tree1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Ftreelang%2Ftree1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Ftreelang%2Ftree1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftree1.c?ref=b86f6cd9ab108f1fda89c4fb00b0b16931182041", "patch": "@@ -92,8 +92,9 @@ static int version_done = 0;\n static unsigned int work_nesting_level = 0;\n \n /* Prepare to handle switches.  */\n-int\n-treelang_init_options (void)\n+unsigned int\n+treelang_init_options (unsigned int argc ATTRIBUTE_UNUSED,\n+\t\t       const char **argv ATTRIBUTE_UNUSED)\n {\n   return CL_Treelang;\n }"}, {"sha": "72004809b45785ab2271ee3cd496fe9226afd347", "filename": "gcc/treelang/treetree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Ftreelang%2Ftreetree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b86f6cd9ab108f1fda89c4fb00b0b16931182041/gcc%2Ftreelang%2Ftreetree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.h?ref=b86f6cd9ab108f1fda89c4fb00b0b16931182041", "patch": "@@ -63,7 +63,7 @@ tree tree_code_get_type (int type_num);\n void treelang_init_decl_processing (void);\n void treelang_finish (void);\n bool treelang_init (void);\n-int treelang_init_options (void);\n+unsigned int treelang_init_options (unsigned int, const char **);\n int treelang_handle_option (size_t scode, const char *arg, int value);\n void treelang_parse_file (int debug_flag);\n void push_var_level (void);"}]}