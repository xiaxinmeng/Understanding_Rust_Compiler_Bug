{"sha": "946dc1c8ad29de80d6971701ed879dd5ab36dd86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ2ZGMxYzhhZDI5ZGU4MGQ2OTcxNzAxZWQ4NzlkZDVhYjM2ZGQ4Ng==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-10-08T05:04:57Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-10-08T05:04:57Z"}, "message": "typeck.c (unsigned_type): Only return TItype nodes when HOST_BITS_PER_WIDE_INT is >= 64 bits.\n\n        * typeck.c (unsigned_type): Only return TItype nodes when\n        HOST_BITS_PER_WIDE_INT is >= 64 bits.\n        (signed_type): Similarly.\n        * decl.c (intTI_type_node, unsigned_intTI_type_node): Only declare\n        when HOST_BITS_PER_WIDE_INT is >= 64 bits.\n        (init_decl_processing): Only create TItype nodes when\n        HOST_BITS_PER_WIDE_INT is >= 64 bits.\n        * cp-tree.h (intTI_type_node, unsigned_intTI_type_node): Only declare\n        when HOST_BITS_PER_WIDE_INT is >= 64 bits.\n\nFrom-SVN: r22915", "tree": {"sha": "73c781f68f5ff392cabd8e5a61b988c6e1bc62e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73c781f68f5ff392cabd8e5a61b988c6e1bc62e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/946dc1c8ad29de80d6971701ed879dd5ab36dd86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/946dc1c8ad29de80d6971701ed879dd5ab36dd86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/946dc1c8ad29de80d6971701ed879dd5ab36dd86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/946dc1c8ad29de80d6971701ed879dd5ab36dd86/comments", "author": null, "committer": null, "parents": [{"sha": "e39b138b413a06ee880c3faffe15c592486ec943", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e39b138b413a06ee880c3faffe15c592486ec943", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e39b138b413a06ee880c3faffe15c592486ec943"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "7f78050ba2759bbb440dddb1824df3d8c4035bf1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/946dc1c8ad29de80d6971701ed879dd5ab36dd86/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/946dc1c8ad29de80d6971701ed879dd5ab36dd86/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=946dc1c8ad29de80d6971701ed879dd5ab36dd86", "patch": "@@ -1,3 +1,15 @@\n+Thu Oct  8 06:00:19 1998  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* typeck.c (unsigned_type): Only return TItype nodes when\n+\tHOST_BITS_PER_WIDE_INT is >= 64 bits.\n+\t(signed_type): Similarly.\n+\t* decl.c (intTI_type_node, unsigned_intTI_type_node): Only declare\n+\twhen HOST_BITS_PER_WIDE_INT is >= 64 bits.\n+\t(init_decl_processing): Only create TItype nodes when\n+\tHOST_BITS_PER_WIDE_INT is >= 64 bits.\n+\t* cp-tree.h (intTI_type_node, unsigned_intTI_type_node): Only declare\n+\twhen HOST_BITS_PER_WIDE_INT is >= 64 bits.\n+\n Wed Oct  7 12:32:44 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* Makefile.in (hash.h): Add -L KR-C -F ', 0, 0' flags to gperf."}, {"sha": "d274572f160d32fb9ee1b6dfc7ef9189a6c7eead", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/946dc1c8ad29de80d6971701ed879dd5ab36dd86/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/946dc1c8ad29de80d6971701ed879dd5ab36dd86/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=946dc1c8ad29de80d6971701ed879dd5ab36dd86", "patch": "@@ -283,7 +283,9 @@ extern tree intQI_type_node, unsigned_intQI_type_node;\n extern tree intHI_type_node, unsigned_intHI_type_node;\n extern tree intSI_type_node, unsigned_intSI_type_node;\n extern tree intDI_type_node, unsigned_intDI_type_node;\n+#if HOST_BITS_PER_WIDE_INT >= 64\n extern tree intTI_type_node, unsigned_intTI_type_node;\n+#endif\n \n extern tree java_byte_type_node;\n extern tree java_short_type_node;"}, {"sha": "0cc2b7be409694a620634c7caed7d836c21bb634", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/946dc1c8ad29de80d6971701ed879dd5ab36dd86/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/946dc1c8ad29de80d6971701ed879dd5ab36dd86/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=946dc1c8ad29de80d6971701ed879dd5ab36dd86", "patch": "@@ -229,13 +229,17 @@ tree intQI_type_node;\n tree intHI_type_node;\n tree intSI_type_node;\n tree intDI_type_node;\n+#if HOST_BITS_PER_WIDE_INT >= 64\n tree intTI_type_node;\n+#endif\n \n tree unsigned_intQI_type_node;\n tree unsigned_intHI_type_node;\n tree unsigned_intSI_type_node;\n tree unsigned_intDI_type_node;\n+#if HOST_BITS_PER_WIDE_INT >= 64\n tree unsigned_intTI_type_node;\n+#endif\n \n tree java_byte_type_node;\n tree java_short_type_node;\n@@ -5674,8 +5678,10 @@ init_decl_processing ()\n   pushdecl (build_decl (TYPE_DECL, NULL_TREE, intSI_type_node));\n   intDI_type_node = make_signed_type (GET_MODE_BITSIZE (DImode));\n   pushdecl (build_decl (TYPE_DECL, NULL_TREE, intDI_type_node));\n+#if HOST_BITS_PER_WIDE_INT >= 64\n   intTI_type_node = make_signed_type (GET_MODE_BITSIZE (TImode));\n   pushdecl (build_decl (TYPE_DECL, NULL_TREE, intTI_type_node));\n+#endif\n   unsigned_intQI_type_node = make_unsigned_type (GET_MODE_BITSIZE (QImode));\n   pushdecl (build_decl (TYPE_DECL, NULL_TREE, unsigned_intQI_type_node));\n   unsigned_intHI_type_node = make_unsigned_type (GET_MODE_BITSIZE (HImode));\n@@ -5684,8 +5690,10 @@ init_decl_processing ()\n   pushdecl (build_decl (TYPE_DECL, NULL_TREE, unsigned_intSI_type_node));\n   unsigned_intDI_type_node = make_unsigned_type (GET_MODE_BITSIZE (DImode));\n   pushdecl (build_decl (TYPE_DECL, NULL_TREE, unsigned_intDI_type_node));\n+#if HOST_BITS_PER_WIDE_INT >= 64\n   unsigned_intTI_type_node = make_unsigned_type (GET_MODE_BITSIZE (TImode));\n   pushdecl (build_decl (TYPE_DECL, NULL_TREE, unsigned_intTI_type_node));\n+#endif\n \n   float_type_node = make_node (REAL_TYPE);\n   TYPE_PRECISION (float_type_node) = FLOAT_TYPE_SIZE;"}, {"sha": "357917655edd5ecbd170db14ea4b4604c0c27023", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/946dc1c8ad29de80d6971701ed879dd5ab36dd86/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/946dc1c8ad29de80d6971701ed879dd5ab36dd86/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=946dc1c8ad29de80d6971701ed879dd5ab36dd86", "patch": "@@ -1383,8 +1383,10 @@ unsigned_type (type)\n     return long_unsigned_type_node;\n   if (type1 == long_long_integer_type_node)\n     return long_long_unsigned_type_node;\n+#if HOST_BITS_PER_WIDE_INT >= 64\n   if (type1 == intTI_type_node)\n     return unsigned_intTI_type_node;\n+#endif\n   if (type1 == intDI_type_node)\n     return unsigned_intDI_type_node;\n   if (type1 == intSI_type_node)\n@@ -1414,8 +1416,10 @@ signed_type (type)\n     return long_integer_type_node;\n   if (type1 == long_long_unsigned_type_node)\n     return long_long_integer_type_node;\n+#if HOST_BITS_PER_WIDE_INT >= 64\n   if (type1 == unsigned_intTI_type_node)\n     return intTI_type_node;\n+#endif\n   if (type1 == unsigned_intDI_type_node)\n     return intDI_type_node;\n   if (type1 == unsigned_intSI_type_node)"}]}