{"sha": "bc84b61b00792ef38e1c2cd6b7280087e4fd2b57", "node_id": "C_kwDOANBUbNoAKGJjODRiNjFiMDA3OTJlZjM4ZTFjMmNkNmI3MjgwMDg3ZTRmZDJiNTc", "commit": {"author": {"name": "Marc Nieper-Wi\u00dfkirchen", "email": "marc@nieper-wisskirchen.de", "date": "2022-03-19T17:42:26Z"}, "committer": {"name": "Jeff Law", "email": "jeffreyalaw@gmail.com", "date": "2022-03-19T17:43:02Z"}, "message": "[PATCH] gcc: pass-manager: Fix memory leak. [PR jit/63854]\n\nBefore the patch, compiling the hello world example of libgccjit with\nthe external driver under Valgrind shows a loss of 12,611 (48 direct)\nbytes.  After the patch, no memory leaks are reported anymore.\n(Memory leaks occurring when using the internal driver are mostly in\nthe driver code in gcc/gcc.c and have to be fixed separately.)\n\nThe patch has been tested by fully bootstrapping the compiler with the\nfrontends C, C++, Fortran, LTO, ObjC, JIT and running the test suite\nunder a x86_64-pc-linux-gnu host.\n\ngcc/ChangeLog:\n\n\tPR jit/63854\n\t* hash-traits.h (struct typed_const_free_remove): New.\n\t(struct free_string_hash): New.\n\t* pass_manager.h: Use free_string_hash.\n\t* passes.cc (pass_manager::register_pass_name): Use free_string_hash.\n\t(pass_manager::~pass_manager): Delete allocated m_name_to_pass_map.", "tree": {"sha": "b90925ec84ef643d3251f28079c8ce0df9739e46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b90925ec84ef643d3251f28079c8ce0df9739e46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc84b61b00792ef38e1c2cd6b7280087e4fd2b57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc84b61b00792ef38e1c2cd6b7280087e4fd2b57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc84b61b00792ef38e1c2cd6b7280087e4fd2b57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc84b61b00792ef38e1c2cd6b7280087e4fd2b57/comments", "author": null, "committer": {"login": "JeffreyALaw", "id": 14062506, "node_id": "MDQ6VXNlcjE0MDYyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/14062506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffreyALaw", "html_url": "https://github.com/JeffreyALaw", "followers_url": "https://api.github.com/users/JeffreyALaw/followers", "following_url": "https://api.github.com/users/JeffreyALaw/following{/other_user}", "gists_url": "https://api.github.com/users/JeffreyALaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffreyALaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffreyALaw/subscriptions", "organizations_url": "https://api.github.com/users/JeffreyALaw/orgs", "repos_url": "https://api.github.com/users/JeffreyALaw/repos", "events_url": "https://api.github.com/users/JeffreyALaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffreyALaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2dff6b2d9d6179e810724e91b539c79c7a7ac33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2dff6b2d9d6179e810724e91b539c79c7a7ac33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2dff6b2d9d6179e810724e91b539c79c7a7ac33"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "bef0bd42d04e30381cf93192badc188721a1a58e", "filename": "gcc/hash-traits.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc84b61b00792ef38e1c2cd6b7280087e4fd2b57/gcc%2Fhash-traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc84b61b00792ef38e1c2cd6b7280087e4fd2b57/gcc%2Fhash-traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-traits.h?ref=bc84b61b00792ef38e1c2cd6b7280087e4fd2b57", "patch": "@@ -28,6 +28,11 @@ struct typed_free_remove\n   static inline void remove (Type *p);\n };\n \n+template <typename Type>\n+struct typed_const_free_remove\n+{\n+  static inline void remove (const Type *p);\n+};\n \n /* Remove with free.  */\n \n@@ -38,6 +43,13 @@ typed_free_remove <Type>::remove (Type *p)\n   free (p);\n }\n \n+template <typename Type>\n+inline void\n+typed_const_free_remove <Type>::remove (const Type *p)\n+{\n+  free (const_cast <Type *> (p));\n+}\n+\n /* Helpful type for removing with delete.  */\n \n template <typename Type>\n@@ -305,6 +317,11 @@ struct ggc_ptr_hash : pointer_hash <T>, ggc_remove <T *> {};\n template <typename T>\n struct ggc_cache_ptr_hash : pointer_hash <T>, ggc_cache_remove <T *> {};\n \n+/* Traits for string elements that should be freed when an element is\n+   deleted.  */\n+\n+struct free_string_hash : string_hash, typed_const_free_remove <char> {};\n+\n /* Traits for string elements that should not be freed when an element\n    is deleted.  */\n "}, {"sha": "43484da2700128b7d374af491f9cfb34e902e45f", "filename": "gcc/pass_manager.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc84b61b00792ef38e1c2cd6b7280087e4fd2b57/gcc%2Fpass_manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc84b61b00792ef38e1c2cd6b7280087e4fd2b57/gcc%2Fpass_manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpass_manager.h?ref=bc84b61b00792ef38e1c2cd6b7280087e4fd2b57", "patch": "@@ -106,7 +106,7 @@ class pass_manager\n \n private:\n   context *m_ctxt;\n-  hash_map<nofree_string_hash, opt_pass *> *m_name_to_pass_map;\n+  hash_map<free_string_hash, opt_pass *> *m_name_to_pass_map;\n \n   /* References to all of the individual passes.\n      These fields are generated via macro expansion.\n@@ -146,4 +146,3 @@ class pass_manager\n } // namespace gcc\n \n #endif /* ! GCC_PASS_MANAGER_H */\n-"}, {"sha": "36e5b4ac45fd8a17aa064b01d46ef8618d3fae20", "filename": "gcc/passes.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc84b61b00792ef38e1c2cd6b7280087e4fd2b57/gcc%2Fpasses.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc84b61b00792ef38e1c2cd6b7280087e4fd2b57/gcc%2Fpasses.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.cc?ref=bc84b61b00792ef38e1c2cd6b7280087e4fd2b57", "patch": "@@ -903,7 +903,7 @@ void\n pass_manager::register_pass_name (opt_pass *pass, const char *name)\n {\n   if (!m_name_to_pass_map)\n-    m_name_to_pass_map = new hash_map<nofree_string_hash, opt_pass *> (256);\n+    m_name_to_pass_map = new hash_map<free_string_hash, opt_pass *> (256);\n \n   if (m_name_to_pass_map->get (name))\n     return; /* Ignore plugin passes.  */\n@@ -1674,6 +1674,7 @@ pass_manager::~pass_manager ()\n   GCC_PASS_LISTS\n #undef DEF_PASS_LIST\n \n+  delete m_name_to_pass_map;\n }\n \n /* If we are in IPA mode (i.e., current_function_decl is NULL), call\n@@ -1943,7 +1944,7 @@ pass_manager::dump_profile_report () const\n \t   \"                                 |in count     |out prob     \"\n \t   \"|in count                  |out prob                  \"\n \t   \"|size               |time                      |\\n\");\n-\t   \n+\n   for (int i = 1; i < passes_by_id_size; i++)\n     if (profile_record[i].run)\n       {"}]}