{"sha": "00fcb892ccf023d378e45b71b93b62c8e5399b60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBmY2I4OTJjY2YwMjNkMzc4ZTQ1YjcxYjkzYjYyYzhlNTM5OWI2MA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2013-04-29T11:00:10Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-04-29T11:00:10Z"}, "message": "re PR target/54349 (_mm_cvtsi128_si64 unnecessary stores value at stack)\n\n\tPR target/54349\n\t* config/i386/i386.h (enum ix86_tune_indices)\n\t<X86_TUNE_INTER_UNIT_MOVES_TO_VEC, X86_TUNE_INTER_UNIT_MOVES_FROM_VEC>:\n\tNew, split from X86_TUNE_INTER_UNIT_MOVES.\n\t<X86_TUNE_INTER_UNIT_MOVES>: Remove.\n\t(TARGET_INTER_UNIT_MOVES_TO_VEC): New define.\n\t(TARGET_INTER_UNIT_MOVES_FROM_VEC): Ditto.\n\t(TARGET_INTER_UNIT_MOVES): Remove.\n\t* config/i386/i386.c (initial_ix86_tune_features): Update.\n\tDisable X86_TUNE_INTER_UNIT_MOVES_FROM_VEC for m_ATHLON_K8 only.\n\t(ix86_expand_convert_uns_didf_sse): Use\n\tTARGET_INTER_UNIT_MOVES_TO_VEC instead of TARGET_INTER_UNIT_MOVES.\n\t(ix86_expand_vector_init_one_nonzero): Ditto.\n\t(ix86_expand_vector_init_interleave): Ditto.\n\t(inline_secondary_memory_needed): Return true for moves from SSE class\n\tregisters for !TARGET_INTER_UNIT_MOVES_FROM_VEC targets and for moves\n\tto SSE class registers for !TARGET_INTER_UNIT_MOVES_TO_VEC targets.\n\t* config/i386/constraints.md (Yi, Ym): Depend on\n\tTARGET_INTER_UNIT_MOVES_TO_VEC.\n\t(Yj, Yn): New constraints.\n\t* config/i386/i386.md (*movdi_internal): Change constraints of\n\toperand 1 from Yi to Yj and from Ym to Yn.\n\t(*movsi_internal): Ditto.\n\t(*movdf_internal): Ditto.\n\t(*movsf_internal): Ditto.\n\t(*float<SWI48x:mode><X87MODEF:mode>2_1): Use\n\tTARGET_INTER_UNIT_MOVES_TO_VEC instead of TARGET_INTER_UNIT_MOVES.\n\t(*float<SWI48x:mode><X87MODEF:mode>2_1 splitters): Ditto.\n\t(floatdi<X87MODEF:mode>2_i387_with_xmm): Ditto.\n\t(floatdi<X87MODEF:mode>2_i387_with_xmm splitters): Ditto.\n\t* config/i386/sse.md (movdi_to_sse): Ditto.\n\t(sse2_stored): Change constraint of operand 1 from Yi to Yj.\n\tUse TARGET_INTER_UNIT_MOVES_FROM_VEC instead of\n\tTARGET_INTER_UNIT_MOVES.\n\t(sse_storeq_rex64): Change constraint of operand 1 from Yi to Yj.\n\t(sse_storeq_rex64 splitter): Use TARGET_INTER_UNIT_MOVES_FROM_VEC\n\tinstead of TARGET_INTER_UNIT_MOVES.\n\t* config/i386/mmx.md (*mov<mode>_internal): Change constraint of\n\toperand 1 from Yi to Yj and from Ym to Yn.\n\nFrom-SVN: r198401", "tree": {"sha": "407c73afcdc82311d991d6607bfd163f9968aa4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/407c73afcdc82311d991d6607bfd163f9968aa4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00fcb892ccf023d378e45b71b93b62c8e5399b60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00fcb892ccf023d378e45b71b93b62c8e5399b60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00fcb892ccf023d378e45b71b93b62c8e5399b60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00fcb892ccf023d378e45b71b93b62c8e5399b60/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4c871069f963dbed380aaa1d452118181b195e7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c871069f963dbed380aaa1d452118181b195e7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c871069f963dbed380aaa1d452118181b195e7b"}], "stats": {"total": 125, "additions": 92, "deletions": 33}, "files": [{"sha": "2ee4a0ce1686562648c1bdac4eb3167eff8191e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00fcb892ccf023d378e45b71b93b62c8e5399b60/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00fcb892ccf023d378e45b71b93b62c8e5399b60/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00fcb892ccf023d378e45b71b93b62c8e5399b60", "patch": "@@ -1,3 +1,45 @@\n+2013-04-29  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/54349\n+\t* config/i386/i386.h (enum ix86_tune_indices)\n+\t<X86_TUNE_INTER_UNIT_MOVES_TO_VEC, X86_TUNE_INTER_UNIT_MOVES_FROM_VEC>:\n+\tNew, split from X86_TUNE_INTER_UNIT_MOVES.\n+\t<X86_TUNE_INTER_UNIT_MOVES>: Remove.\n+\t(TARGET_INTER_UNIT_MOVES_TO_VEC): New define.\n+\t(TARGET_INTER_UNIT_MOVES_FROM_VEC): Ditto.\n+\t(TARGET_INTER_UNIT_MOVES): Remove.\n+\t* config/i386/i386.c (initial_ix86_tune_features): Update.\n+\tDisable X86_TUNE_INTER_UNIT_MOVES_FROM_VEC for m_ATHLON_K8 only.\n+\t(ix86_expand_convert_uns_didf_sse): Use\n+\tTARGET_INTER_UNIT_MOVES_TO_VEC instead of TARGET_INTER_UNIT_MOVES.\n+\t(ix86_expand_vector_init_one_nonzero): Ditto.\n+\t(ix86_expand_vector_init_interleave): Ditto.\n+\t(inline_secondary_memory_needed): Return true for moves from SSE class\n+\tregisters for !TARGET_INTER_UNIT_MOVES_FROM_VEC targets and for moves\n+\tto SSE class registers for !TARGET_INTER_UNIT_MOVES_TO_VEC targets.\n+\t* config/i386/constraints.md (Yi, Ym): Depend on\n+\tTARGET_INTER_UNIT_MOVES_TO_VEC.\n+\t(Yj, Yn): New constraints.\n+\t* config/i386/i386.md (*movdi_internal): Change constraints of\n+\toperand 1 from Yi to Yj and from Ym to Yn.\n+\t(*movsi_internal): Ditto.\n+\t(*movdf_internal): Ditto.\n+\t(*movsf_internal): Ditto.\n+\t(*float<SWI48x:mode><X87MODEF:mode>2_1): Use\n+\tTARGET_INTER_UNIT_MOVES_TO_VEC instead of TARGET_INTER_UNIT_MOVES.\n+\t(*float<SWI48x:mode><X87MODEF:mode>2_1 splitters): Ditto.\n+\t(floatdi<X87MODEF:mode>2_i387_with_xmm): Ditto.\n+\t(floatdi<X87MODEF:mode>2_i387_with_xmm splitters): Ditto.\n+\t* config/i386/sse.md (movdi_to_sse): Ditto.\n+\t(sse2_stored): Change constraint of operand 1 from Yi to Yj.\n+\tUse TARGET_INTER_UNIT_MOVES_FROM_VEC instead of\n+\tTARGET_INTER_UNIT_MOVES.\n+\t(sse_storeq_rex64): Change constraint of operand 1 from Yi to Yj.\n+\t(sse_storeq_rex64 splitter): Use TARGET_INTER_UNIT_MOVES_FROM_VEC\n+\tinstead of TARGET_INTER_UNIT_MOVES.\n+\t* config/i386/mmx.md (*mov<mode>_internal): Change constraint of\n+\toperand 1 from Yi to Yj and from Ym to Yn.\n+\n 2013-04-29  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/aarch64-simd-builtins.def (vec_unpacks_hi_): New."}, {"sha": "6cb53b8aafbc447066ecd6dea37f1ed8b1657b1f", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00fcb892ccf023d378e45b71b93b62c8e5399b60/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00fcb892ccf023d378e45b71b93b62c8e5399b60/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=00fcb892ccf023d378e45b71b93b62c8e5399b60", "patch": "@@ -87,8 +87,10 @@\n \n ;; We use the Y prefix to denote any number of conditional register sets:\n ;;  z\tFirst SSE register.\n-;;  i\tSSE2 inter-unit moves enabled\n-;;  m\tMMX inter-unit moves enabled\n+;;  i\tSSE2 inter-unit moves to SSE register enabled\n+;;  j\tSSE2 inter-unit moves from SSE register enabled\n+;;  m\tMMX inter-unit moves to MMX register enabled\n+;;  n\tMMX inter-unit moves from MMX register enabled\n ;;  a\tInteger register when zero extensions with AND are disabled\n ;;  p\tInteger register when TARGET_PARTIAL_REG_STALL is disabled\n ;;  d\tInteger register when integer DFmode moves are enabled\n@@ -99,12 +101,20 @@\n  \"First SSE register (@code{%xmm0}).\")\n \n (define_register_constraint \"Yi\"\n- \"TARGET_SSE2 && TARGET_INTER_UNIT_MOVES ? SSE_REGS : NO_REGS\"\n- \"@internal Any SSE register, when SSE2 and inter-unit moves are enabled.\")\n+ \"TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_TO_VEC ? SSE_REGS : NO_REGS\"\n+ \"@internal Any SSE register, when SSE2 and inter-unit moves to vector registers are enabled.\")\n+\n+(define_register_constraint \"Yj\"\n+ \"TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_FROM_VEC ? SSE_REGS : NO_REGS\"\n+ \"@internal Any SSE register, when SSE2 and inter-unit moves from vector registers are enabled.\")\n \n (define_register_constraint \"Ym\"\n- \"TARGET_MMX && TARGET_INTER_UNIT_MOVES ? MMX_REGS : NO_REGS\"\n- \"@internal Any MMX register, when inter-unit moves are enabled.\")\n+ \"TARGET_MMX && TARGET_INTER_UNIT_MOVES_TO_VEC ? MMX_REGS : NO_REGS\"\n+ \"@internal Any MMX register, when inter-unit moves to vector registers are enabled.\")\n+\n+(define_register_constraint \"Yn\"\n+ \"TARGET_MMX && TARGET_INTER_UNIT_MOVES_FROM_VEC ? MMX_REGS : NO_REGS\"\n+ \"@internal Any MMX register, when inter-unit moves from vector registers are enabled.\")\n \n (define_register_constraint \"Yp\"\n  \"TARGET_PARTIAL_REG_STALL ? NO_REGS : GENERAL_REGS\""}, {"sha": "7a58a76f08b08b55cc01b7c9444e517a85546eee", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00fcb892ccf023d378e45b71b93b62c8e5399b60/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00fcb892ccf023d378e45b71b93b62c8e5399b60/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=00fcb892ccf023d378e45b71b93b62c8e5399b60", "patch": "@@ -1931,9 +1931,12 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n   /* X86_TUNE_USE_FFREEP */\n   m_AMD_MULTIPLE,\n \n-  /* X86_TUNE_INTER_UNIT_MOVES */\n+  /* X86_TUNE_INTER_UNIT_MOVES_TO_VEC */\n   ~(m_AMD_MULTIPLE | m_GENERIC),\n \n+  /* X86_TUNE_INTER_UNIT_MOVES_FROM_VEC */\n+  ~m_ATHLON_K8,\n+\n   /* X86_TUNE_INTER_UNIT_CONVERSIONS */\n   ~(m_AMDFAM10 | m_BDVER ),\n \n@@ -17867,7 +17870,7 @@ ix86_expand_convert_uns_didf_sse (rtx target, rtx input)\n   rtx x;\n \n   int_xmm = gen_reg_rtx (V4SImode);\n-  if (TARGET_INTER_UNIT_MOVES)\n+  if (TARGET_INTER_UNIT_MOVES_TO_VEC)\n     emit_insn (gen_movdi_to_sse (int_xmm, input));\n   else if (TARGET_SSE_SPLIT_REGS)\n     {\n@@ -33668,7 +33671,8 @@ inline_secondary_memory_needed (enum reg_class class1, enum reg_class class2,\n \n       /* If the target says that inter-unit moves are more expensive\n \t than moving through memory, then don't generate them.  */\n-      if (!TARGET_INTER_UNIT_MOVES)\n+      if ((SSE_CLASS_P (class1) && !TARGET_INTER_UNIT_MOVES_FROM_VEC)\n+\t  || (SSE_CLASS_P (class2) && !TARGET_INTER_UNIT_MOVES_TO_VEC))\n \treturn true;\n \n       /* Between SSE and general, we have moves no larger than word size.  */\n@@ -35891,9 +35895,8 @@ ix86_expand_vector_init_one_nonzero (bool mmx_ok, enum machine_mode mode,\n       /* For SSE4.1, we normally use vector set.  But if the second\n \t element is zero and inter-unit moves are OK, we use movq\n \t instead.  */\n-      use_vector_set = (TARGET_64BIT\n-\t\t\t&& TARGET_SSE4_1\n-\t\t\t&& !(TARGET_INTER_UNIT_MOVES\n+      use_vector_set = (TARGET_64BIT && TARGET_SSE4_1\n+\t\t\t&& !(TARGET_INTER_UNIT_MOVES_TO_VEC\n \t\t\t     && one_var == 0));\n       break;\n     case V16QImode:\n@@ -36428,7 +36431,7 @@ ix86_expand_vector_init_general (bool mmx_ok, enum machine_mode mode,\n \n       /* Don't use ix86_expand_vector_init_interleave if we can't\n \t move from GPR to SSE register directly.  */\n-      if (!TARGET_INTER_UNIT_MOVES)\n+      if (!TARGET_INTER_UNIT_MOVES_TO_VEC)\n \tbreak;\n \n       n = GET_MODE_NUNITS (mode);"}, {"sha": "6601567676d800fa0d61266fda63e7eaff564d0c", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00fcb892ccf023d378e45b71b93b62c8e5399b60/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00fcb892ccf023d378e45b71b93b62c8e5399b60/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=00fcb892ccf023d378e45b71b93b62c8e5399b60", "patch": "@@ -304,7 +304,8 @@ enum ix86_tune_indices {\n   X86_TUNE_EPILOGUE_USING_MOVE,\n   X86_TUNE_SHIFT1,\n   X86_TUNE_USE_FFREEP,\n-  X86_TUNE_INTER_UNIT_MOVES,\n+  X86_TUNE_INTER_UNIT_MOVES_TO_VEC,\n+  X86_TUNE_INTER_UNIT_MOVES_FROM_VEC,\n   X86_TUNE_INTER_UNIT_CONVERSIONS,\n   X86_TUNE_FOUR_JUMP_LIMIT,\n   X86_TUNE_SCHEDULE,\n@@ -395,8 +396,11 @@ extern unsigned char ix86_tune_features[X86_TUNE_LAST];\n \tix86_tune_features[X86_TUNE_EPILOGUE_USING_MOVE]\n #define TARGET_SHIFT1\t\tix86_tune_features[X86_TUNE_SHIFT1]\n #define TARGET_USE_FFREEP\tix86_tune_features[X86_TUNE_USE_FFREEP]\n-#define TARGET_INTER_UNIT_MOVES\tix86_tune_features[X86_TUNE_INTER_UNIT_MOVES]\n-#define TARGET_INTER_UNIT_CONVERSIONS\\\n+#define TARGET_INTER_UNIT_MOVES_TO_VEC \\\n+\tix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC]\n+#define TARGET_INTER_UNIT_MOVES_FROM_VEC \\\n+\tix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_FROM_VEC]\n+#define TARGET_INTER_UNIT_CONVERSIONS \\\n \tix86_tune_features[X86_TUNE_INTER_UNIT_CONVERSIONS]\n #define TARGET_FOUR_JUMP_LIMIT\tix86_tune_features[X86_TUNE_FOUR_JUMP_LIMIT]\n #define TARGET_SCHEDULE\t\tix86_tune_features[X86_TUNE_SCHEDULE]"}, {"sha": "f6ffc019ce28de09566f84fa496ebcc5f131670e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00fcb892ccf023d378e45b71b93b62c8e5399b60/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00fcb892ccf023d378e45b71b93b62c8e5399b60/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=00fcb892ccf023d378e45b71b93b62c8e5399b60", "patch": "@@ -1846,7 +1846,7 @@\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n     \"=r  ,o  ,r,r  ,r,m ,*y,*y,?*y,?m,?r ,?*Ym,*x,*x,*x,m ,?r ,?*Yi,?*Ym,?*Yi\")\n \t(match_operand:DI 1 \"general_operand\"\n-    \"riFo,riF,Z,rem,i,re,C ,*y,m  ,*y,*Ym,r   ,C ,*x,m ,*x,*Yi,r   ,*Yi ,*Ym\"))]\n+    \"riFo,riF,Z,rem,i,re,C ,*y,m  ,*y,*Yn,r   ,C ,*x,m ,*x,*Yj,r   ,*Yj ,*Yn\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   switch (get_attr_type (insn))\n@@ -1994,7 +1994,7 @@\n   [(set (match_operand:SI 0 \"nonimmediate_operand\"\n \t\t\t\"=r,m ,*y,*y,?rm,?*y,*x,*x,*x,m ,?r ,?*Yi\")\n \t(match_operand:SI 1 \"general_operand\"\n-\t\t\t\"g ,re,C ,*y,*y ,rm ,C ,*x,m ,*x,*Yi,r\"))]\n+\t\t\t\"g ,re,C ,*y,*y ,rm ,C ,*x,m ,*x,*Yj,r\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   switch (get_attr_type (insn))\n@@ -2662,7 +2662,7 @@\n   [(set (match_operand:DF 0 \"nonimmediate_operand\"\n     \"=Yf*f,m   ,Yf*f,?Yd*r ,!o   ,?r,?m,?r,?r,x,x,x,m,*x,*x,*x,m ,r ,Yi\")\n \t(match_operand:DF 1 \"general_operand\"\n-    \"Yf*fm,Yf*f,G   ,Yd*roF,Yd*rF,rm,rC,C ,F ,C,x,m,x,C ,*x,m ,*x,Yi,r\"))]\n+    \"Yf*fm,Yf*f,G   ,Yd*roF,Yd*rF,rm,rC,C ,F ,C,x,m,x,C ,*x,m ,*x,Yj,r\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (!can_create_pseudo_p ()\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n@@ -2831,7 +2831,7 @@\n   [(set (match_operand:SF 0 \"nonimmediate_operand\"\n \t  \"=Yf*f,m   ,Yf*f,?r ,?m,x,x,x,m,?r,?Yi,!*y,!*y,!m,!r ,!*Ym\")\n \t(match_operand:SF 1 \"general_operand\"\n-\t  \"Yf*fm,Yf*f,G   ,rmF,rF,C,x,m,x,Yi,r  ,*y ,m  ,*y,*Ym,r\"))]\n+\t  \"Yf*fm,Yf*f,G   ,rmF,rF,C,x,m,x,Yj,r  ,*y ,m  ,*y,*Yn,r\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (!can_create_pseudo_p ()\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n@@ -4424,7 +4424,7 @@\n   /* Avoid store forwarding (partial memory) stall penalty\n      by passing DImode value through XMM registers.  */\n   if (<SWI48x:MODE>mode == DImode && !TARGET_64BIT\n-      && TARGET_80387 && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES\n+      && TARGET_80387 && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_TO_VEC\n       && optimize_function_for_speed_p (cfun))\n     {\n       emit_insn (gen_floatdi<X87MODEF:mode>2_i387_with_xmm (operands[0],\n@@ -4601,7 +4601,7 @@\n   if (GET_CODE (op1) == SUBREG)\n     op1 = SUBREG_REG (op1);\n \n-  if (GENERAL_REG_P (op1) && TARGET_INTER_UNIT_MOVES)\n+  if (GENERAL_REG_P (op1) && TARGET_INTER_UNIT_MOVES_TO_VEC)\n     {\n       operands[4] = simplify_gen_subreg (V4SImode, operands[0], <MODE>mode, 0);\n       emit_insn (gen_sse2_loadld (operands[4],\n@@ -4671,7 +4671,7 @@\n   if (GENERAL_REG_P (op1))\n     {\n       operands[4] = simplify_gen_subreg (V4SImode, operands[0], <MODE>mode, 0);\n-      if (TARGET_INTER_UNIT_MOVES)\n+      if (TARGET_INTER_UNIT_MOVES_TO_VEC)\n \temit_insn (gen_sse2_loadld (operands[4],\n \t\t\t\t    CONST0_RTX (V4SImode), operands[1]));\n       else\n@@ -4870,7 +4870,7 @@\n    (clobber (match_scratch:V4SI 4 \"=X,x\"))\n    (clobber (match_operand:DI 2 \"memory_operand\" \"=X,m\"))]\n   \"TARGET_80387 && X87_ENABLE_FLOAT (<X87MODEF:MODE>mode, DImode)\n-   && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES\n+   && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_TO_VEC\n    && !TARGET_64BIT && optimize_function_for_speed_p (cfun)\"\n   \"#\"\n   [(set_attr \"type\" \"multi\")\n@@ -4885,7 +4885,7 @@\n    (clobber (match_scratch:V4SI 4))\n    (clobber (match_operand:DI 2 \"memory_operand\"))]\n   \"TARGET_80387 && X87_ENABLE_FLOAT (<X87MODEF:MODE>mode, DImode)\n-   && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES\n+   && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_TO_VEC\n    && !TARGET_64BIT && optimize_function_for_speed_p (cfun)\n    && reload_completed\"\n   [(set (match_dup 2) (match_dup 3))\n@@ -4910,14 +4910,14 @@\n    (clobber (match_scratch:V4SI 4))\n    (clobber (match_operand:DI 2 \"memory_operand\"))]\n   \"TARGET_80387 && X87_ENABLE_FLOAT (<X87MODEF:MODE>mode, DImode)\n-   && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES\n+   && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_TO_VEC\n    && !TARGET_64BIT && optimize_function_for_speed_p (cfun)\n    && reload_completed\"\n   [(set (match_dup 0) (float:X87MODEF (match_dup 1)))])\n \n ;; Avoid store forwarding (partial memory) stall penalty by extending\n ;; SImode value to DImode through XMM register instead of pushing two\n-;; SImode values to stack. Note that even !TARGET_INTER_UNIT_MOVES\n+;; SImode values to stack. Note that even !TARGET_INTER_UNIT_MOVES_TO_VEC\n ;; targets benefit from this optimization. Also note that fild\n ;; loads from memory only.\n "}, {"sha": "4911cb296e2f45674b8f6d9cbd2df3b7d4198544", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00fcb892ccf023d378e45b71b93b62c8e5399b60/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00fcb892ccf023d378e45b71b93b62c8e5399b60/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=00fcb892ccf023d378e45b71b93b62c8e5399b60", "patch": "@@ -80,7 +80,7 @@\n   [(set (match_operand:MMXMODE 0 \"nonimmediate_operand\"\n     \"=r ,o ,r,r ,m ,?!y,!y,?!y,m  ,r   ,?!Ym,x,x,x,m,*x,*x,*x,m ,r ,Yi,!Ym,*Yi\")\n \t(match_operand:MMXMODE 1 \"vector_move_operand\"\n-    \"rCo,rC,C,rm,rC,C  ,!y,m  ,?!y,?!Ym,r   ,C,x,m,x,C ,*x,m ,*x,Yi,r ,*Yi,!Ym\"))]\n+    \"rCo,rC,C,rm,rC,C  ,!y,m  ,?!y,?!Yn,r   ,C,x,m,x,C ,*x,m ,*x,Yj,r ,*Yj,!Yn\"))]\n   \"TARGET_MMX\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {"}, {"sha": "354d4c909a70638dc1e8c976d00cf6220a5be5db", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00fcb892ccf023d378e45b71b93b62c8e5399b60/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00fcb892ccf023d378e45b71b93b62c8e5399b60/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=00fcb892ccf023d378e45b71b93b62c8e5399b60", "patch": "@@ -523,7 +523,7 @@\n     [(set (match_operand:V4SI 0 \"register_operand\" \"=?x,x\")\n \t  (subreg:V4SI (match_operand:DI 1 \"nonimmediate_operand\" \"r,m\") 0))\n      (clobber (match_scratch:V4SI 2 \"=&x,X\"))])]\n-  \"!TARGET_64BIT && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES\"\n+  \"!TARGET_64BIT && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_TO_VEC\"\n   \"#\"\n   \"&& reload_completed\"\n   [(const_int 0)]\n@@ -7360,12 +7360,12 @@\n (define_insn_and_split \"sse2_stored\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=xm,r\")\n \t(vec_select:SI\n-\t  (match_operand:V4SI 1 \"register_operand\" \"x,Yi\")\n+\t  (match_operand:V4SI 1 \"register_operand\" \"x,Yj\")\n \t  (parallel [(const_int 0)])))]\n   \"TARGET_SSE\"\n   \"#\"\n   \"&& reload_completed\n-   && (TARGET_INTER_UNIT_MOVES\n+   && (TARGET_INTER_UNIT_MOVES_FROM_VEC\n        || MEM_P (operands [0])\n        || !GENERAL_REGNO_P (true_regnum (operands [0])))\"\n   [(set (match_dup 0) (match_dup 1))]\n@@ -7397,7 +7397,7 @@\n (define_insn \"*sse2_storeq_rex64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=xm,*r,r\")\n \t(vec_select:DI\n-\t  (match_operand:V2DI 1 \"nonimmediate_operand\" \"x,Yi,o\")\n+\t  (match_operand:V2DI 1 \"nonimmediate_operand\" \"x,Yj,o\")\n \t  (parallel [(const_int 0)])))]\n   \"TARGET_64BIT && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n@@ -7422,7 +7422,7 @@\n \t  (parallel [(const_int 0)])))]\n   \"TARGET_SSE\n    && reload_completed\n-   && (TARGET_INTER_UNIT_MOVES\n+   && (TARGET_INTER_UNIT_MOVES_FROM_VEC\n        || MEM_P (operands [0])\n        || !GENERAL_REGNO_P (true_regnum (operands [0])))\"\n   [(set (match_dup 0) (match_dup 1))]"}]}