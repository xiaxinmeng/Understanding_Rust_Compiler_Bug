{"sha": "5f2cbd0debd8670fdf8689891ea0d2e711a2fecd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYyY2JkMGRlYmQ4NjcwZmRmODY4OTg5MWVhMGQyZTcxMWEyZmVjZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2012-11-18T17:32:29Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2012-11-18T17:32:29Z"}, "message": "expr.h (adjust_address_1): Add a size parameter.\n\ngcc/\n\t* expr.h (adjust_address_1): Add a size parameter.\n\t(adjust_address, adjust_address_nv, adjust_bitfield_address)\n\t(adjust_bitfield_address_nv): Adjust accordingly.\n\t(adjust_bitfield_address_size): Define.\n\t* emit-rtl.c (adjust_address_1): Add a size parameter.\n\tUse it to set the size if MODE has no size.  Check whether\n\tthe size matches before returning the original memref.\n\tRequire the size to be known for adjust_object.\n\t(adjust_automodify_address_1, widen_memory_access): Update calls\n\tto adjust_address_1.\n\nFrom-SVN: r193601", "tree": {"sha": "160d8166ab7ba961724d0c73cd6432ac83f5c97a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/160d8166ab7ba961724d0c73cd6432ac83f5c97a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f2cbd0debd8670fdf8689891ea0d2e711a2fecd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f2cbd0debd8670fdf8689891ea0d2e711a2fecd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f2cbd0debd8670fdf8689891ea0d2e711a2fecd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f2cbd0debd8670fdf8689891ea0d2e711a2fecd/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6cf9964974d79779456b9cde3c3949d056745540", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cf9964974d79779456b9cde3c3949d056745540", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cf9964974d79779456b9cde3c3949d056745540"}], "stats": {"total": 58, "additions": 42, "deletions": 16}, "files": [{"sha": "8c7a6a1d6fbb12270a216dbad262999418b07173", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f2cbd0debd8670fdf8689891ea0d2e711a2fecd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f2cbd0debd8670fdf8689891ea0d2e711a2fecd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f2cbd0debd8670fdf8689891ea0d2e711a2fecd", "patch": "@@ -1,3 +1,16 @@\n+2012-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* expr.h (adjust_address_1): Add a size parameter.\n+\t(adjust_address, adjust_address_nv, adjust_bitfield_address)\n+\t(adjust_bitfield_address_nv): Adjust accordingly.\n+\t(adjust_bitfield_address_size): Define.\n+\t* emit-rtl.c (adjust_address_1): Add a size parameter.\n+\tUse it to set the size if MODE has no size.  Check whether\n+\tthe size matches before returning the original memref.\n+\tRequire the size to be known for adjust_object.\n+\t(adjust_automodify_address_1, widen_memory_access): Update calls\n+\tto adjust_address_1.\n+\n 2012-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* combine.c (make_extraction): Handle TRUNCATEd INNERs."}, {"sha": "27464dab09e0a4dafaaace5d6c6fc3c170b3e5c6", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f2cbd0debd8670fdf8689891ea0d2e711a2fecd/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f2cbd0debd8670fdf8689891ea0d2e711a2fecd/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=5f2cbd0debd8670fdf8689891ea0d2e711a2fecd", "patch": "@@ -2052,11 +2052,14 @@ change_address (rtx memref, enum machine_mode mode, rtx addr)\n    If ADJUST_OBJECT is zero, the underlying object associated with the\n    memory reference is left unchanged and the caller is responsible for\n    dealing with it.  Otherwise, if the new memory reference is outside\n-   the underlying object, even partially, then the object is dropped.  */\n+   the underlying object, even partially, then the object is dropped.\n+   SIZE, if nonzero, is the size of an access in cases where MODE\n+   has no inherent size.  */\n \n rtx\n adjust_address_1 (rtx memref, enum machine_mode mode, HOST_WIDE_INT offset,\n-\t\t  int validate, int adjust_address, int adjust_object)\n+\t\t  int validate, int adjust_address, int adjust_object,\n+\t\t  HOST_WIDE_INT size)\n {\n   rtx addr = XEXP (memref, 0);\n   rtx new_rtx;\n@@ -2069,8 +2072,14 @@ adjust_address_1 (rtx memref, enum machine_mode mode, HOST_WIDE_INT offset,\n     = targetm.addr_space.pointer_mode (attrs.addrspace);\n #endif\n \n+  /* Take the size of non-BLKmode accesses from the mode.  */\n+  defattrs = mode_mem_attrs[(int) mode];\n+  if (defattrs->size_known_p)\n+    size = defattrs->size;\n+\n   /* If there are no changes, just return the original memory reference.  */\n   if (mode == GET_MODE (memref) && !offset\n+      && (size == 0 || (attrs.size_known_p && attrs.size == size))\n       && (!validate || memory_address_addr_space_p (mode, addr,\n \t\t\t\t\t\t    attrs.addrspace)))\n     return memref;\n@@ -2155,24 +2164,23 @@ adjust_address_1 (rtx memref, enum machine_mode mode, HOST_WIDE_INT offset,\n       attrs.align = MIN (attrs.align, max_align);\n     }\n \n-  /* We can compute the size in a number of ways.  */\n-  defattrs = mode_mem_attrs[(int) GET_MODE (new_rtx)];\n-  if (defattrs->size_known_p)\n+  if (size)\n     {\n       /* Drop the object if the new right end is not within its bounds.  */\n-      if (adjust_object && (offset + defattrs->size) > attrs.size)\n+      if (adjust_object && (offset + size) > attrs.size)\n \t{\n \t  attrs.expr = NULL_TREE;\n \t  attrs.alias = 0;\n \t}\n       attrs.size_known_p = true;\n-      attrs.size = defattrs->size;\n+      attrs.size = size;\n     }\n   else if (attrs.size_known_p)\n     {\n+      gcc_assert (!adjust_object);\n       attrs.size -= offset;\n-      /* ??? The store_by_pieces machinery generates negative sizes.  */\n-      gcc_assert (!(adjust_object && attrs.size < 0));\n+      /* ??? The store_by_pieces machinery generates negative sizes,\n+\t so don't assert for that here.  */\n     }\n \n   set_mem_attrs (new_rtx, &attrs);\n@@ -2190,7 +2198,7 @@ adjust_automodify_address_1 (rtx memref, enum machine_mode mode, rtx addr,\n \t\t\t     HOST_WIDE_INT offset, int validate)\n {\n   memref = change_address_1 (memref, VOIDmode, addr, validate);\n-  return adjust_address_1 (memref, mode, offset, validate, 0, 0);\n+  return adjust_address_1 (memref, mode, offset, validate, 0, 0, 0);\n }\n \n /* Return a memory reference like MEMREF, but whose address is changed by\n@@ -2272,7 +2280,7 @@ replace_equiv_address_nv (rtx memref, rtx addr)\n rtx\n widen_memory_access (rtx memref, enum machine_mode mode, HOST_WIDE_INT offset)\n {\n-  rtx new_rtx = adjust_address_1 (memref, mode, offset, 1, 1, 0);\n+  rtx new_rtx = adjust_address_1 (memref, mode, offset, 1, 1, 0, 0);\n   struct mem_attrs attrs;\n   unsigned int size = GET_MODE_SIZE (mode);\n "}, {"sha": "f94f1db2224f87cb8e5d7f72089f7d77a9f8dd03", "filename": "gcc/expr.h", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f2cbd0debd8670fdf8689891ea0d2e711a2fecd/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f2cbd0debd8670fdf8689891ea0d2e711a2fecd/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=5f2cbd0debd8670fdf8689891ea0d2e711a2fecd", "patch": "@@ -557,22 +557,27 @@ extern rtx change_address (rtx, enum machine_mode, rtx);\n /* Return a memory reference like MEMREF, but with its mode changed\n    to MODE and its address offset by OFFSET bytes.  */\n #define adjust_address(MEMREF, MODE, OFFSET) \\\n-  adjust_address_1 (MEMREF, MODE, OFFSET, 1, 1, 0)\n+  adjust_address_1 (MEMREF, MODE, OFFSET, 1, 1, 0, 0)\n \n /* Likewise, but the reference is not required to be valid.  */\n #define adjust_address_nv(MEMREF, MODE, OFFSET) \\\n-  adjust_address_1 (MEMREF, MODE, OFFSET, 0, 1, 0)\n+  adjust_address_1 (MEMREF, MODE, OFFSET, 0, 1, 0, 0)\n \n /* Return a memory reference like MEMREF, but with its mode changed\n    to MODE and its address offset by OFFSET bytes.  Assume that it's\n    for a bitfield and conservatively drop the underlying object if we\n    cannot be sure to stay within its bounds.  */\n #define adjust_bitfield_address(MEMREF, MODE, OFFSET) \\\n-  adjust_address_1 (MEMREF, MODE, OFFSET, 1, 1, 1)\n+  adjust_address_1 (MEMREF, MODE, OFFSET, 1, 1, 1, 0)\n+\n+/* As for adjust_bitfield_address, but specify that the width of\n+   BLKmode accesses is SIZE bytes.  */\n+#define adjust_bitfield_address_size(MEMREF, MODE, OFFSET, SIZE) \\\n+  adjust_address_1 (MEMREF, MODE, OFFSET, 1, 1, 1, SIZE)\n \n /* Likewise, but the reference is not required to be valid.  */\n #define adjust_bitfield_address_nv(MEMREF, MODE, OFFSET) \\\n-  adjust_address_1 (MEMREF, MODE, OFFSET, 0, 1, 1)\n+  adjust_address_1 (MEMREF, MODE, OFFSET, 0, 1, 1, 0)\n \n /* Return a memory reference like MEMREF, but with its mode changed\n    to MODE and its address changed to ADDR, which is assumed to be\n@@ -585,7 +590,7 @@ extern rtx change_address (rtx, enum machine_mode, rtx);\n   adjust_automodify_address_1 (MEMREF, MODE, ADDR, OFFSET, 0)\n \n extern rtx adjust_address_1 (rtx, enum machine_mode, HOST_WIDE_INT, int, int,\n-\t\t\t     int);\n+\t\t\t     int, HOST_WIDE_INT);\n extern rtx adjust_automodify_address_1 (rtx, enum machine_mode, rtx,\n \t\t\t\t\tHOST_WIDE_INT, int);\n "}]}