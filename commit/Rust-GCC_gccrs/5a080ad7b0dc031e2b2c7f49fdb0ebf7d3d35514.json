{"sha": "5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWEwODBhZDdiMGRjMDMxZTJiMmM3ZjQ5ZmRiMGViZjdkM2QzNTUxNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-11-16T23:29:25Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-11-16T23:29:25Z"}, "message": "PR c++/13950, DR 176\n\n\tPR c++/13950, DR 176\n\t* search.c (lookup_field_r): Allow lookup to find the\n\tinjected-class-name from a template base.\n\t(template_self_reference_p): Remove.\n\t* decl.c (make_typename_type): Diagnose ambiguity.  Use\n\tmaybe_get_template_decl_from_type_decl.\n\t* parser.c (cp_parser_template_name): Pass true to is_template\n\trather than use maybe_get_template_decl_from_type_decl.\n\t(cp_parser_lookup_name): Use maybe_get_template_decl_from_type_decl.\n\t* pt.c (maybe_get_template_decl_from_type_decl): Handle ambiguity.\n\tUse DECL_SELF_REFERENCE_P.\n\n\t* parser.c (cp_parser_parse_and_diagnose_invalid_type_name):\n\tAvoid duplicate ambiguity error.\n\t* error.c (dump_decl): Don't say \"typedef\" for injected-class-name.\n\t* pt.c (convert_template_argument): Tweak logic.\n\nFrom-SVN: r154223", "tree": {"sha": "d01fd61cab03b29407d10ef9f75bd71d4bae928a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d01fd61cab03b29407d10ef9f75bd71d4bae928a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "87213cd4965fb065bf1e57f6acd34df1695fedc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87213cd4965fb065bf1e57f6acd34df1695fedc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87213cd4965fb065bf1e57f6acd34df1695fedc0"}], "stats": {"total": 179, "additions": 134, "deletions": 45}, "files": [{"sha": "960cedc2af51c4d5646673c49e938ffadcc03b74", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514", "patch": "@@ -1,3 +1,22 @@\n+2009-11-16  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/13950, DR 176\n+\t* search.c (lookup_field_r): Allow lookup to find the\n+\tinjected-class-name from a template base.\n+\t(template_self_reference_p): Remove.\n+\t* decl.c (make_typename_type): Diagnose ambiguity.  Use\n+\tmaybe_get_template_decl_from_type_decl.\n+\t* parser.c (cp_parser_template_name): Pass true to is_template\n+\trather than use maybe_get_template_decl_from_type_decl.\n+\t(cp_parser_lookup_name): Use maybe_get_template_decl_from_type_decl.\n+\t* pt.c (maybe_get_template_decl_from_type_decl): Handle ambiguity.\n+\tUse DECL_SELF_REFERENCE_P.\n+\n+\t* parser.c (cp_parser_parse_and_diagnose_invalid_type_name):\n+\tAvoid duplicate ambiguity error.\n+\t* error.c (dump_decl): Don't say \"typedef\" for injected-class-name.\n+\t* pt.c (convert_template_argument): Tweak logic.\n+\n 2009-11-16  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/42055"}, {"sha": "851edeb52519d3be9fa37d07c3317035c50ede3d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514", "patch": "@@ -3040,11 +3040,11 @@ make_typename_type (tree context, tree name, enum tag_types tag_type,\n   if (!dependent_scope_p (context))\n     /* We should only set WANT_TYPE when we're a nested typename type.\n        Then we can give better diagnostics if we find a non-type.  */\n-    t = lookup_field (context, name, 0, /*want_type=*/true);\n+    t = lookup_field (context, name, 2, /*want_type=*/true);\n   else\n     t = NULL_TREE;\n \n-  if (!t && dependent_type_p (context)) \n+  if ((!t || TREE_CODE (t) == TREE_LIST) && dependent_type_p (context))\n     return build_typename_type (context, name, fullname, tag_type);\n \n   want_template = TREE_CODE (fullname) == TEMPLATE_ID_EXPR;\n@@ -3057,6 +3057,20 @@ make_typename_type (tree context, tree name, enum tag_types tag_type,\n       return error_mark_node;\n     }\n   \n+  /* Pull out the template from an injected-class-name (or multiple).  */\n+  if (want_template)\n+    t = maybe_get_template_decl_from_type_decl (t);\n+\n+  if (TREE_CODE (t) == TREE_LIST)\n+    {\n+      if (complain & tf_error)\n+\t{\n+\t  error (\"lookup of %qT in %qT is ambiguous\", name, context);\n+\t  print_candidates (t);\n+\t}\n+      return error_mark_node;\n+    }\n+\n   if (want_template && !DECL_CLASS_TEMPLATE_P (t))\n     {\n       if (complain & tf_error)"}, {"sha": "7266d8872d50c58236e53106a29c2cff6edfc5b0", "filename": "gcc/cp/error.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514", "patch": "@@ -908,7 +908,8 @@ dump_decl (tree t, int flags)\n \t  dump_type (TREE_TYPE (t), flags);\n \t  break;\n \t}\n-      if (flags & TFF_DECL_SPECIFIERS)\n+      if ((flags & TFF_DECL_SPECIFIERS)\n+\t  && !DECL_SELF_REFERENCE_P (t))\n \tpp_cxx_ws_string (cxx_pp, \"typedef\");\n       dump_simple_decl (t, DECL_ORIGINAL_TYPE (t)\n \t\t\t? DECL_ORIGINAL_TYPE (t) : TREE_TYPE (t),"}, {"sha": "576842641fe8f850a9f2df95a0fea5ee3c05a8ee", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514", "patch": "@@ -2430,6 +2430,14 @@ cp_parser_parse_and_diagnose_invalid_type_name (cp_parser *parser)\n   tree id;\n   cp_token *token = cp_lexer_peek_token (parser->lexer);\n \n+  /* Avoid duplicate error about ambiguous lookup.  */\n+  if (token->type == CPP_NESTED_NAME_SPECIFIER)\n+    {\n+      cp_token *next = cp_lexer_peek_nth_token (parser->lexer, 2);\n+      if (next->type == CPP_NAME && next->ambiguous_p)\n+\tgoto out;\n+    }\n+\n   cp_parser_parse_tentatively (parser);\n   id = cp_parser_id_expression (parser,\n \t\t\t\t/*template_keyword_p=*/false,\n@@ -2451,6 +2459,7 @@ cp_parser_parse_and_diagnose_invalid_type_name (cp_parser *parser)\n   /* Emit a diagnostic for the invalid type.  */\n   cp_parser_diagnose_invalid_type_name (parser, parser->scope,\n \t\t\t\t\tid, token->location);\n+ out:\n   /* If we aren't in the middle of a declarator (i.e. in a\n      parameter-declaration-clause), skip to the end of the declaration;\n      there's no point in trying to process it.  */\n@@ -11086,12 +11095,11 @@ cp_parser_template_name (cp_parser* parser,\n   /* Look up the name.  */\n   decl = cp_parser_lookup_name (parser, identifier,\n \t\t\t\tnone_type,\n-\t\t\t\t/*is_template=*/false,\n+\t\t\t\t/*is_template=*/true,\n \t\t\t\t/*is_namespace=*/false,\n \t\t\t\tcheck_dependency_p,\n \t\t\t\t/*ambiguous_decls=*/NULL,\n \t\t\t\ttoken->location);\n-  decl = maybe_get_template_decl_from_type_decl (decl);\n \n   /* If DECL is a template, then the name was a template-name.  */\n   if (TREE_CODE (decl) == TEMPLATE_DECL)\n@@ -18045,6 +18053,10 @@ cp_parser_lookup_name (cp_parser *parser, tree name,\n   if (!decl || decl == error_mark_node)\n     return error_mark_node;\n \n+  /* Pull out the template from an injected-class-name (or multiple).  */\n+  if (is_template)\n+    decl = maybe_get_template_decl_from_type_decl (decl);\n+\n   /* If it's a TREE_LIST, the result of the lookup was ambiguous.  */\n   if (TREE_CODE (decl) == TREE_LIST)\n     {"}, {"sha": "9c82e3c19a5885d658680a88e9198388e5129f6d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 35, "deletions": 11, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514", "patch": "@@ -5451,20 +5451,16 @@ convert_template_argument (tree parm,\n \t\t\t\t\t\t  complain, in_decl,\n \t\t\t\t\t\t  args))\n \t\t{\n-\t\t  val = orig_arg;\n+\t\t  val = arg;\n \n \t\t  /* TEMPLATE_TEMPLATE_PARM node is preferred over\n \t\t     TEMPLATE_DECL.  */\n \t\t  if (val != error_mark_node)\n                     {\n                       if (DECL_TEMPLATE_TEMPLATE_PARM_P (val))\n                         val = TREE_TYPE (val);\n-                      else if (TREE_CODE (val) == TYPE_PACK_EXPANSION\n-                               && DECL_TEMPLATE_TEMPLATE_PARM_P (arg))\n-                        {\n-                          val = TREE_TYPE (arg);\n-                          val = make_pack_expansion (val);\n-                        }\n+\t\t      if (TREE_CODE (orig_arg) == TYPE_PACK_EXPANSION)\n+\t\t\tval = make_pack_expansion (val);\n                     }\n \t\t}\n \t      else\n@@ -5990,15 +5986,43 @@ lookup_template_function (tree fns, tree arglist)\n    TEMPLATE_DECL.  If DECL is a TYPE_DECL for current_class_type,\n    or one of its enclosing classes, and that type is a template,\n    return the associated TEMPLATE_DECL.  Otherwise, the original\n-   DECL is returned.  */\n+   DECL is returned.\n+\n+   Also handle the case when DECL is a TREE_LIST of ambiguous\n+   injected-class-names from different bases.  */\n \n tree\n maybe_get_template_decl_from_type_decl (tree decl)\n {\n+  if (decl == NULL_TREE)\n+    return decl;\n+\n+  /* DR 176: A lookup that finds an injected-class-name (10.2\n+     [class.member.lookup]) can result in an ambiguity in certain cases\n+     (for example, if it is found in more than one base class). If all of\n+     the injected-class-names that are found refer to specializations of\n+     the same class template, and if the name is followed by a\n+     template-argument-list, the reference refers to the class template\n+     itself and not a specialization thereof, and is not ambiguous.  */\n+  if (TREE_CODE (decl) == TREE_LIST)\n+    {\n+      tree t, tmpl = NULL_TREE;\n+      for (t = decl; t; t = TREE_CHAIN (t))\n+\t{\n+\t  tree elt = maybe_get_template_decl_from_type_decl (TREE_VALUE (t));\n+\t  if (!tmpl)\n+\t    tmpl = elt;\n+\t  else if (tmpl != elt)\n+\t    break;\n+\t}\n+      if (tmpl && t == NULL_TREE)\n+\treturn tmpl;\n+      else\n+\treturn decl;\n+    }\n+\n   return (decl != NULL_TREE\n-\t  && TREE_CODE (decl) == TYPE_DECL\n-\t  && DECL_ARTIFICIAL (decl)\n-\t  && CLASS_TYPE_P (TREE_TYPE (decl))\n+\t  && DECL_SELF_REFERENCE_P (decl)\n \t  && CLASSTYPE_TEMPLATE_INFO (TREE_TYPE (decl)))\n     ? CLASSTYPE_TI_TEMPLATE (TREE_TYPE (decl)) : decl;\n }"}, {"sha": "3e9bec011fff8c9799e775d7041f6f8fa130e4a9", "filename": "gcc/cp/search.c", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514", "patch": "@@ -63,7 +63,6 @@ static tree dfs_access_in_type (tree, void *);\n static access_kind access_in_type (tree, tree);\n static int protected_accessible_p (tree, tree, tree);\n static int friend_accessible_p (tree, tree, tree);\n-static int template_self_reference_p (tree, tree);\n static tree dfs_get_pure_virtuals (tree, void *);\n \n \f\n@@ -955,24 +954,6 @@ struct lookup_field_info {\n   const char *errstr;\n };\n \n-/* Within the scope of a template class, you can refer to the to the\n-   current specialization with the name of the template itself.  For\n-   example:\n-\n-     template <typename T> struct S { S* sp; }\n-\n-   Returns nonzero if DECL is such a declaration in a class TYPE.  */\n-\n-static int\n-template_self_reference_p (tree type, tree decl)\n-{\n-  return  (CLASSTYPE_USE_TEMPLATE (type)\n-\t   && PRIMARY_TEMPLATE_P (CLASSTYPE_TI_TEMPLATE (type))\n-\t   && TREE_CODE (decl) == TYPE_DECL\n-\t   && DECL_ARTIFICIAL (decl)\n-\t   && DECL_NAME (decl) == constructor_name (type));\n-}\n-\n /* Nonzero for a class member means that it is shared between all objects\n    of that class.\n \n@@ -1092,11 +1073,6 @@ lookup_field_r (tree binfo, void *data)\n \t}\n     }\n \n-  /* You must name a template base class with a template-id.  */\n-  if (!same_type_p (type, lfi->type)\n-      && template_self_reference_p (type, nval))\n-    goto done;\n-\n   /* If the lookup already found a match, and the new value doesn't\n      hide the old one, we might have an ambiguity.  */\n   if (lfi->rval_binfo"}, {"sha": "6b3e48cbdac05160712074e86be56c68869825f1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514", "patch": "@@ -1,3 +1,13 @@\n+2009-11-16  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/13950\n+\t* g++.dg/template/injected1.C: New.\n+\t* g++.dg/template/inherit.C: Adjust.\n+\t* g++.old-deja/g++.brendan/crash56.C: Adjust.\n+\t* g++.old-deja/g++.pt/lookup8.C: Adjust.\n+\t* g++.old-deja/g++.pt/ttp22.C: Adjust.\n+\t* g++.old-deja/g++.pt/ttp23.C: Adjust.\n+\n 2009-11-16  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/42055"}, {"sha": "43af3cfc5ac622a8ee3a22ddd6b8342edb11a74a", "filename": "gcc/testsuite/g++.dg/template/inherit.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finherit.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finherit.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finherit.C?ref=5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514", "patch": "@@ -9,5 +9,5 @@ struct Z : X<int> { };\n int main()\n {\n   Z z;\n-  z.X::f();                     // { dg-error \"template parameters\" \"\" }\n+  z.X::f();\n }"}, {"sha": "81873b498f9c1ac084dca2f17ebdb67ad9482e5b", "filename": "gcc/testsuite/g++.dg/template/injected1.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finjected1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finjected1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finjected1.C?ref=5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514", "patch": "@@ -0,0 +1,33 @@\n+// PR c++/13950, DR 176\n+\n+template <class T> struct Base { }; // { dg-error \"\" } candidate\n+\n+struct D1: Base<void>\n+{\n+  D1::Base* p1;\n+  D1::Base<double>* p2;\n+  Base *p3;\n+  Base<double>* p4;\n+};\n+\n+struct D2: Base<void>, Base<void*>\n+{\n+  D2::Base* p1;\t\t\t// { dg-error \"\" }\n+  D2::Base<double>* p2;\n+  Base *p3;\t\t\t// { dg-error \"\" }\n+  Base<double>* p4;\n+};\n+\n+template <class T>\n+struct D3: Base<T> {\n+  typename D3::Base* p1;\n+  typename D3::template Base<double>* p2;\n+};\n+template struct D3<void>;\n+\n+template <class T>\n+struct D4: Base<T>, Base<T*> {\n+  typename D4::Base* p1;\t// { dg-error \"\" }\n+  typename D4::template Base<double>* p2;\n+};\n+template struct D4<void>;\t// { dg-message \"instantiated\" }"}, {"sha": "0932ca4665992c0bc36200d34029b1d936c7b27c", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash56.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash56.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash56.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash56.C?ref=5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514", "patch": "@@ -342,7 +342,7 @@ operator>=(const SetLD<T>& a, const SetLD<T>& b)\n { return ! (a < b); }\n class String { };\n class IcaseString: public String { };\n-template <> class SetLD< IcaseString >: public SetLD<    String  > {\tpublic:\t SetLD (): SetLD<    String  >() { };\t SetLD (const ListD<   IcaseString  >& other): SetLD<    String  >()\t{ ListD<   IcaseString  >::Vix x;\tfor (other.first(x); 0 != x; other.next(x))\tadd(other(x)); };\t SetLD (const  SetLD & other): SetLD<    String  >(other) { };\tconst    IcaseString  & operator()(const Vix& x) const\t{ return (   IcaseString  &) SetLD<    String  >::operator()(x); }\t}; \ttypedef SetLD<  String > SetLD_String_IcaseString_old_tmp99;\ttypedef SetLD< IcaseString > SetLD_String_IcaseString_new_tmp99;\t\n+template <> class SetLD< IcaseString >: public SetLD<    String  > {\tpublic:\t SetLD (): SetLD<    String  >() { };\t SetLD (const ::ListD<   IcaseString  >& other): SetLD<    String  >()\t{ ::ListD<   IcaseString  >::Vix x;\tfor (other.first(x); 0 != x; other.next(x))\tadd(other(x)); };\t SetLD (const  SetLD & other): SetLD<    String  >(other) { };\tconst    IcaseString  & operator()(const Vix& x) const\t{ return (   IcaseString  &) SetLD<    String  >::operator()(x); }\t}; \ttypedef SetLD<  String > SetLD_String_IcaseString_old_tmp99;\ttypedef SetLD< IcaseString > SetLD_String_IcaseString_new_tmp99;\t\n inline int\t operator== (const SetLD_String_IcaseString_new_tmp99& a,\tconst SetLD_String_IcaseString_new_tmp99& b) // { dg-message \"operator==\" }\n {\n const SetLD_String_IcaseString_old_tmp99& oa = a;"}, {"sha": "1662f68c7b654d18c2f6da3c38438f68bdbf6b33", "filename": "gcc/testsuite/g++.old-deja/g++.pt/lookup8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Flookup8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Flookup8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Flookup8.C?ref=5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514", "patch": "@@ -11,5 +11,5 @@ class Y : public X<int>\n \n void Y::f()\n {\n-  X x; // { dg-error \"\" } X is not a type.\n+  X x;\n }"}, {"sha": "de3334e79e6555ed5a9215e86228003ca1e41ebb", "filename": "gcc/testsuite/g++.old-deja/g++.pt/ttp22.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp22.C?ref=5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514", "patch": "@@ -24,7 +24,7 @@ template<template<class> class DD,class EE> int C<DD,EE>::f()\n class E : C<D,int>\n {\n \tpublic:\n-\t\tint f() { return C<D,int>::f(); }\n+\t\tint f() { return C< ::D,int>::f(); }\n };\n \n int main()"}, {"sha": "051a3f33036223ed045e0dae5f2cdea5cc04f385", "filename": "gcc/testsuite/g++.old-deja/g++.pt/ttp23.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp23.C?ref=5a080ad7b0dc031e2b2c7f49fdb0ebf7d3d35514", "patch": "@@ -24,7 +24,7 @@ template<template<class> class E,class D> int C<E,D>::f()\n class E : C<D,int>\n {\n \tpublic:\n-\t\tint f() { return C<D,int>::f(); }\n+\t\tint f() { return C< ::D,int>::f(); }\n };\n \n int main()"}]}