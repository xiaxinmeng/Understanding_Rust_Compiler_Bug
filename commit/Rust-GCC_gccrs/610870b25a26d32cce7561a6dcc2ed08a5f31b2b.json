{"sha": "610870b25a26d32cce7561a6dcc2ed08a5f31b2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjEwODcwYjI1YTI2ZDMyY2NlNzU2MWE2ZGNjMmVkMDhhNWYzMWIyYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-08-24T00:25:22Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-08-24T00:25:22Z"}, "message": "acinclude.m4 ([GLIBCXX_CHECK_GETTIMEOFDAY]): Change to use GCC_TRY_COMPILE_OR_LINK.\n\n2008-08-23  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* acinclude.m4 ([GLIBCXX_CHECK_GETTIMEOFDAY]): Change to use\n\tGCC_TRY_COMPILE_OR_LINK.\n\t([GLIBCXX_CHECK_CLOCK_GETTIME]): Rename to\n\t[GLIBCXX_ENABLE_CLOCK_GETTIME], a versatile configure-time option,\n\t[no] by default, since it includes TRY_LINK checks.  librt is also\n\tsearched, if requested.\n\t* doc/xml/manual/configure.xml: Document the latter.\n\t* configure.ac: Move the above checks outside native-only.\n\t* configure: Regenerate.\n\nFrom-SVN: r139530", "tree": {"sha": "3752a59f9e43befb22a32feb9991af37a05a27a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3752a59f9e43befb22a32feb9991af37a05a27a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/610870b25a26d32cce7561a6dcc2ed08a5f31b2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/610870b25a26d32cce7561a6dcc2ed08a5f31b2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/610870b25a26d32cce7561a6dcc2ed08a5f31b2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/610870b25a26d32cce7561a6dcc2ed08a5f31b2b/comments", "author": null, "committer": null, "parents": [{"sha": "033f28dc650a5c421f9612eacc8f2d5b83ec9298", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/033f28dc650a5c421f9612eacc8f2d5b83ec9298", "html_url": "https://github.com/Rust-GCC/gccrs/commit/033f28dc650a5c421f9612eacc8f2d5b83ec9298"}], "stats": {"total": 7944, "additions": 4110, "deletions": 3834}, "files": [{"sha": "45a74f01ae9a1b458bbf6efefb2b45abdf338986", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/610870b25a26d32cce7561a6dcc2ed08a5f31b2b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/610870b25a26d32cce7561a6dcc2ed08a5f31b2b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=610870b25a26d32cce7561a6dcc2ed08a5f31b2b", "patch": "@@ -1,3 +1,15 @@\n+2008-08-23  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* acinclude.m4 ([GLIBCXX_CHECK_GETTIMEOFDAY]): Change to use\n+\tGCC_TRY_COMPILE_OR_LINK.\n+\t([GLIBCXX_CHECK_CLOCK_GETTIME]): Rename to\n+\t[GLIBCXX_ENABLE_CLOCK_GETTIME], a versatile configure-time option,\n+\t[no] by default, since it includes TRY_LINK checks.  librt is also\n+\tsearched, if requested.\n+\t* doc/xml/manual/configure.xml: Document the latter.\n+\t* configure.ac: Move the above checks outside native-only.\n+\t* configure: Regenerate.\n+\n 2008-08-23  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/lib/libstdc++.exp (check_v3_target_atomic_builtins): Add."}, {"sha": "d3adaf13113eff32a7a495745c4d89238262fd2d", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 72, "deletions": 43, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/610870b25a26d32cce7561a6dcc2ed08a5f31b2b/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/610870b25a26d32cce7561a6dcc2ed08a5f31b2b/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=610870b25a26d32cce7561a6dcc2ed08a5f31b2b", "patch": "@@ -1074,56 +1074,83 @@ AC_DEFUN([GLIBCXX_ENABLE_C99], [\n \n \n dnl\n-dnl Check for IEEE Std 1003.1-2001 clock_gettime required for \n-dnl 20.8.5 [time.clock] in the current C++0X working draft.\n-dnl\n-AC_DEFUN([GLIBCXX_CHECK_CLOCK_GETTIME], [\n+dnl Check for clock_gettime clocks, used in the implementation of 20.8.5\n+dnl [time.clock] in the current C++0x working draft.\n+dnl\n+dnl --enable-clock-gettime\n+dnl --enable-clock-gettime=yes\n+dnl        checks for the availability of monotonic or realtime clocks\n+dnl        in libc and libposix4\n+dnl --enable-clock-gettime=rt\n+dnl        searches librt too, and in case of success enables its linking\n+dnl        to libstdc++ as part of the build process.   Note that this is\n+dnl        not always desirable because, in glibc, for example, in turn it\n+dnl        triggers automatically the linking of libpthread too, which\n+dnl        activates locking, a large overhead for single-thread programs.\n+dnl --enable-clock-gettime=no\n+dnl --disable-clock-gettime\n+dnl        disables the checks completely\n+dnl\n+AC_DEFUN([GLIBCXX_ENABLE_CLOCK_GETTIME], [\n+\n+  AC_MSG_CHECKING([for clock_gettime clocks])\t\t\t\t\t \n+  GLIBCXX_ENABLE(clock-gettime,$1,,\n+    [use KIND for check type],\n+    [permit yes|no|rt])\n \n   AC_LANG_SAVE\n   AC_LANG_CPLUSPLUS\n   ac_save_CXXFLAGS=\"$CXXFLAGS\"\n   CXXFLAGS=\"$CXXFLAGS -fno-exceptions\"\n   ac_save_LIBS=\"$LIBS\"\n \n-  AC_SEARCH_LIBS(clock_gettime, [posix4])\n+  ac_has_clock_monotonic=no;  \n+  ac_has_clock_realtime=no;\n \n-  # Link to -lposix4.\n-  case \"$ac_cv_search_clock_gettime\" in\n-    -lposix4*) GLIBCXX_LIBS=$ac_cv_search_clock_gettime\n-  esac\n+  if test x\"$enable_clock_gettime\" != x\"no\"; then\n \n-  AC_CHECK_HEADERS(unistd.h, ac_has_unistd_h=yes, ac_has_unistd_h=no)\n-  \n-  ac_has_clock_monotonic=no;  \n-  ac_has_clock_realtime=no;  \n-  if test x\"$ac_has_unistd_h\" = x\"yes\"; then    \n-    AC_MSG_CHECKING([for monotonic clock])\n-    AC_TRY_LINK(\n-      [#include <unistd.h>\n-       #include <time.h>\n-      ],\n-      [#if _POSIX_TIMERS > 0 && defined(_POSIX_MONOTONIC_CLOCK)\n-        timespec tp;     \n-       #endif\n-        clock_gettime(CLOCK_MONOTONIC, &tp);\n-      ], [ac_has_clock_monotonic=yes], [ac_has_clock_monotonic=no])\n-    \n-    AC_MSG_RESULT($ac_has_clock_monotonic)   \n-    \n-    AC_MSG_CHECKING([for realtime clock])\n-    AC_TRY_LINK(\n-      [#include <unistd.h>\n-       #include <time.h>\n-      ],\n-      [#if _POSIX_TIMERS > 0\n-        timespec tp;      \n-       #endif\n-        clock_gettime(CLOCK_REALTIME, &tp);\n-      ], [ac_has_clock_realtime=yes], [ac_has_clock_realtime=no])\n+    if test x\"$enable_clock_gettime\" = x\"rt\"; then\n+      AC_SEARCH_LIBS(clock_gettime, [rt posix4])\n+    else\n+      AC_SEARCH_LIBS(clock_gettime, [posix4])\n+    fi\n+\n+    case \"$ac_cv_search_clock_gettime\" in\n+      -l*) GLIBCXX_LIBS=$ac_cv_search_clock_gettime\n+    esac\n+\n+    AC_CHECK_HEADERS(unistd.h, ac_has_unistd_h=yes, ac_has_unistd_h=no)\n+\n+    if test x\"$ac_has_unistd_h\" = x\"yes\"; then\n+      AC_MSG_CHECKING([for monotonic clock])\n+      AC_TRY_LINK(\n+        [#include <unistd.h>\n+         #include <time.h>\n+        ],\n+        [#if _POSIX_TIMERS > 0 && defined(_POSIX_MONOTONIC_CLOCK)\n+          timespec tp;     \n+         #endif\n+          clock_gettime(CLOCK_MONOTONIC, &tp);\n+        ], [ac_has_clock_monotonic=yes], [ac_has_clock_monotonic=no])\n+\n+      AC_MSG_RESULT($ac_has_clock_monotonic)   \n     \n-    AC_MSG_RESULT($ac_has_clock_realtime)\n-  fi \n-  \n+      AC_MSG_CHECKING([for realtime clock])\n+      AC_TRY_LINK(\n+        [#include <unistd.h>\n+         #include <time.h>\n+        ],\n+        [#if _POSIX_TIMERS > 0\n+          timespec tp;      \n+         #endif\n+          clock_gettime(CLOCK_REALTIME, &tp);\n+        ], [ac_has_clock_realtime=yes], [ac_has_clock_realtime=no])\n+\n+      AC_MSG_RESULT($ac_has_clock_realtime)\n+    fi\n+\n+  fi\n+\n   if test x\"$ac_has_clock_monotonic\" = x\"yes\"; then\n     AC_DEFINE(_GLIBCXX_USE_CLOCK_MONOTONIC, 1,\n       [ Defined if clock_gettime has monotonic clock support. ])\n@@ -1142,11 +1169,13 @@ AC_DEFUN([GLIBCXX_CHECK_CLOCK_GETTIME], [\n ])\n \n dnl\n-dnl Check for IEEE Std 1003.1-2001 gettimeofday required for \n-dnl 20.8.5 [time.clock] in the current C++0X working draft.\n+dnl Check for gettimeofday, used in the implementation of 20.8.5\n+dnl [time.clock] in the current C++0x working draft.\n dnl\n AC_DEFUN([GLIBCXX_CHECK_GETTIMEOFDAY], [\n   \n+  AC_MSG_CHECKING([for gettimeofday])\n+\n   AC_LANG_SAVE\n   AC_LANG_CPLUSPLUS\n   ac_save_CXXFLAGS=\"$CXXFLAGS\"\n@@ -1156,7 +1185,7 @@ AC_DEFUN([GLIBCXX_CHECK_GETTIMEOFDAY], [\n   AC_CHECK_HEADERS(sys/time.h, ac_has_sys_time_h=yes, ac_has_sys_time_h=no)\n   if test x\"$ac_has_sys_time_h\" = x\"yes\"; then\n     AC_MSG_CHECKING([for gettimeofday])\n-    AC_TRY_LINK([#include <sys/time.h>],\n+    GCC_TRY_COMPILE_OR_LINK([#include <sys/time.h>],\n       [timeval tv; gettimeofday(&tv, 0);],\n       [ac_has_gettimeofday=yes], [ac_has_gettimeofday=no])\n     "}, {"sha": "be2786ed30d07a82d816b9f00fc1ee67aa27233b", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 3998, "deletions": 3784, "changes": 7782, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/610870b25a26d32cce7561a6dcc2ed08a5f31b2b/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/610870b25a26d32cce7561a6dcc2ed08a5f31b2b/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=610870b25a26d32cce7561a6dcc2ed08a5f31b2b"}, {"sha": "e99f8dc9f7303c8f7a3881ef4ae8a34e1d1953b7", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/610870b25a26d32cce7561a6dcc2ed08a5f31b2b/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/610870b25a26d32cce7561a6dcc2ed08a5f31b2b/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=610870b25a26d32cce7561a6dcc2ed08a5f31b2b", "patch": "@@ -143,6 +143,13 @@ GLIBCXX_CHECK_C99_TR1\n # For common values of EOF, SEEK_CUR, SEEK_END.\n GLIBCXX_CHECK_STDIO_MACROS\n \n+# For gettimeofday support.\n+GLIBCXX_CHECK_GETTIMEOFDAY\n+\n+# For clock_gettime support.\n+# NB: The default is [no], because otherwise it requires linking.\n+GLIBCXX_ENABLE_CLOCK_GETTIME([no])\n+\n AC_LC_MESSAGES\n \n # Check for available headers.\n@@ -167,12 +174,6 @@ if $GLIBCXX_IS_NATIVE; then\n   # For dev/random and dev/urandom for TR1.\n   GLIBCXX_CHECK_RANDOM_TR1\n \n-  # For clock_gettime support.\n-  GLIBCXX_CHECK_CLOCK_GETTIME\n-\n-  # For gettimeofday support.\n-  GLIBCXX_CHECK_GETTIMEOFDAY\n-\n   # For TLS support.\n   GCC_CHECK_TLS\n "}, {"sha": "6ea9d1ae82780b9284e145743e89712abecb85b3", "filename": "libstdc++-v3/doc/xml/manual/configure.xml", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/610870b25a26d32cce7561a6dcc2ed08a5f31b2b/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/610870b25a26d32cce7561a6dcc2ed08a5f31b2b/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml?ref=610870b25a26d32cce7561a6dcc2ed08a5f31b2b", "patch": "@@ -312,7 +312,27 @@\n      environment.\n      </para>\n  </listitem></varlistentry>\n-</variablelist>\n \n+ <varlistentry><term><code>--enable-clock-gettime</code></term>\n+ <listitem><para>This is an abbreviated form of\n+        <code>'--enable-clock-gettime=yes'</code>(described next).\n+     </para>\n+ </listitem></varlistentry>\n+\n+ <varlistentry><term><code>--enable-clock-gettime=OPTION</code></term>\n+ <listitem><para>Enables checks (link-type too) for the clock_gettime clocks,\n+        used in the implementation [time.clock] in the current C++0x draft.\n+        The choice OPTION=yes checks for the availability of the monotonic and\n+        realtime clocks in libc and libposix4.  OPTION=rt searches librt too,\n+        and in case of success enables its linking to libstdc++ as part of the\n+        build process.   Note that this is not always desirable because, in\n+        glibc, for example, in turn it triggers automatically the linking of\n+        libpthread too, which activates locking, a large overhead for\n+        single-thread programs.  OPTION=no skips the tests completely.  The\n+        default is OPTION=no.\n+    </para>\n+ </listitem></varlistentry>\n+\n+</variablelist>\n \n </sect1>\n\\ No newline at end of file"}]}