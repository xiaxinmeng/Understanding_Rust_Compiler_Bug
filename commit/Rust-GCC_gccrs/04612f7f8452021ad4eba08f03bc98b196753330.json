{"sha": "04612f7f8452021ad4eba08f03bc98b196753330", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ2MTJmN2Y4NDUyMDIxYWQ0ZWJhMDhmMDNiYzk4YjE5Njc1MzMzMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-10-18T08:30:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-10-18T08:30:45Z"}, "message": "graphite-isl-ast-to-gimple.c (gcc_expression_from_isl_ast_expr_id): Simplify with removal of the parameter rename map.\n\n2017-10-18  Richard Biener  <rguenther@suse.de>\n\n\t* graphite-isl-ast-to-gimple.c (gcc_expression_from_isl_ast_expr_id):\n\tSimplify with removal of the parameter rename map.\n\t(set_rename): Likewise.\n\t(should_copy_to_new_region): Likewise.\n\t(graphite_copy_stmts_from_block): Likewise.\n\t(copy_bb_and_scalar_dependences): Remove initialization of\n\tunused copied_bb_map.\n\t(copy_def): Remove.\n\t(copy_internal_parameters): Likewise.\n\t(graphite_regenerate_ast_isl): Do not call copy_internal_parameters.\n\t* graphite-scop-detection.c (scop_detection::stmt_simple_for_scop_p):\n\tUse INTEGRAL_TYPE_P.\n\t(parameter_index_in_region_1): Rename to ...\n\t(assign_parameter_index_in_region): ... this.  Assert we have\n\ta parameter we handle.\n\t(scan_tree_for_params): Adjust.\n\t* sese.h (parameter_rename_map_t): Remove.\n\t(struct sese_info_t): Remove unused parameter_rename_map and\n\tcopied_bb_map members.\n\t* sese.c (new_sese_info): Adjust.\n\t(free_sese_info): Likewise.\n\nFrom-SVN: r253847", "tree": {"sha": "62314482e178f8db8eec6b7301b05cdc5185a578", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62314482e178f8db8eec6b7301b05cdc5185a578"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04612f7f8452021ad4eba08f03bc98b196753330", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04612f7f8452021ad4eba08f03bc98b196753330", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04612f7f8452021ad4eba08f03bc98b196753330", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04612f7f8452021ad4eba08f03bc98b196753330/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "de57059efaaa117561a631e26a47b67eae1943bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de57059efaaa117561a631e26a47b67eae1943bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de57059efaaa117561a631e26a47b67eae1943bb"}], "stats": {"total": 219, "additions": 46, "deletions": 173}, "files": [{"sha": "5d0dd0b2cef93e408d6ae83c09b44345ae7934f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04612f7f8452021ad4eba08f03bc98b196753330/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04612f7f8452021ad4eba08f03bc98b196753330/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04612f7f8452021ad4eba08f03bc98b196753330", "patch": "@@ -1,3 +1,27 @@\n+2017-10-18  Richard Biener  <rguenther@suse.de>\n+\n+\t* graphite-isl-ast-to-gimple.c (gcc_expression_from_isl_ast_expr_id):\n+\tSimplify with removal of the parameter rename map.\n+\t(set_rename): Likewise.\n+\t(should_copy_to_new_region): Likewise.\n+\t(graphite_copy_stmts_from_block): Likewise.\n+\t(copy_bb_and_scalar_dependences): Remove initialization of\n+\tunused copied_bb_map.\n+\t(copy_def): Remove.\n+\t(copy_internal_parameters): Likewise.\n+\t(graphite_regenerate_ast_isl): Do not call copy_internal_parameters.\n+\t* graphite-scop-detection.c (scop_detection::stmt_simple_for_scop_p):\n+\tUse INTEGRAL_TYPE_P.\n+\t(parameter_index_in_region_1): Rename to ...\n+\t(assign_parameter_index_in_region): ... this.  Assert we have\n+\ta parameter we handle.\n+\t(scan_tree_for_params): Adjust.\n+\t* sese.h (parameter_rename_map_t): Remove.\n+\t(struct sese_info_t): Remove unused parameter_rename_map and\n+\tcopied_bb_map members.\n+\t* sese.c (new_sese_info): Adjust.\n+\t(free_sese_info): Likewise.\n+\n 2017-10-18  Martin Liska  <mliska@suse.cz>\n \n \tPR sanitizer/82545"}, {"sha": "0661f9f4bc156b18ec34d47daaeb1b1f3b3c5a26", "filename": "gcc/graphite-isl-ast-to-gimple.c", "status": "modified", "additions": 12, "deletions": 118, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04612f7f8452021ad4eba08f03bc98b196753330/gcc%2Fgraphite-isl-ast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04612f7f8452021ad4eba08f03bc98b196753330/gcc%2Fgraphite-isl-ast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-isl-ast-to-gimple.c?ref=04612f7f8452021ad4eba08f03bc98b196753330", "patch": "@@ -264,11 +264,9 @@ gcc_expression_from_isl_ast_expr_id (tree type,\n \t      \"Could not map isl_id to tree expression\");\n   isl_ast_expr_free (expr_id);\n   tree t = res->second;\n-  tree *val = region->parameter_rename_map->get(t);\n-\n-  if (!val)\n-   val = &t;\n-  return fold_convert (type, *val);\n+  if (useless_type_conversion_p (type, TREE_TYPE (t)))\n+    return t;\n+  return fold_convert (type, t);\n }\n \n /* Converts an isl_ast_expr_int expression E to a widest_int.\n@@ -953,13 +951,6 @@ set_rename (tree old_name, tree expr)\n       r.safe_push (expr);\n       region->rename_map->put (old_name, r);\n     }\n-\n-  tree t;\n-  int i;\n-  /* For a parameter of a scop we don't want to rename it.  */\n-  FOR_EACH_VEC_ELT (region->params, i, t)\n-    if (old_name == t)\n-      region->parameter_rename_map->put(old_name, expr);\n }\n \n /* Return an iterator to the instructions comes last in the execution order.\n@@ -1138,14 +1129,6 @@ should_copy_to_new_region (gimple *stmt, sese_info_p region)\n       && scev_analyzable_p (lhs, region->region))\n     return false;\n \n-  /* Do not copy parameters that have been generated in the header of the\n-     scop.  */\n-  if (is_gimple_assign (stmt)\n-      && (lhs = gimple_assign_lhs (stmt))\n-      && TREE_CODE (lhs) == SSA_NAME\n-      && region->parameter_rename_map->get(lhs))\n-    return false;\n-\n   return true;\n }\n \n@@ -1214,7 +1197,7 @@ graphite_copy_stmts_from_block (basic_block bb, basic_block new_bb,\n       if (codegen_error_p ())\n \treturn false;\n \n-      /* For each SSA_NAME in the parameter_rename_map rename their usage.  */\n+      /* For each SCEV analyzable SSA_NAME, rename their usage.  */\n       ssa_op_iter iter;\n       use_operand_p use_p;\n       if (!is_gimple_debug (copy))\n@@ -1223,26 +1206,16 @@ graphite_copy_stmts_from_block (basic_block bb, basic_block new_bb,\n \t    tree old_name = USE_FROM_PTR (use_p);\n \n \t    if (TREE_CODE (old_name) != SSA_NAME\n-\t\t|| SSA_NAME_IS_DEFAULT_DEF (old_name))\n-\t      continue;\n-\n-\t    tree *new_expr = region->parameter_rename_map->get (old_name);\n-\t    tree new_name;\n-\t    if (!new_expr\n-\t\t&& scev_analyzable_p (old_name, region->region))\n-\t      {\n-\t\tgimple_seq stmts = NULL;\n-\t\tnew_name = get_rename_from_scev (old_name, &stmts,\n-\t\t\t\t\t\t bb->loop_father, iv_map);\n-\t\tif (! codegen_error_p ())\n-\t\t  gsi_insert_earliest (stmts);\n-\t\tnew_expr = &new_name;\n-\t      }\n-\n-\t    if (!new_expr)\n+\t\t|| SSA_NAME_IS_DEFAULT_DEF (old_name)\n+\t\t|| ! scev_analyzable_p (old_name, region->region))\n \t      continue;\n \n-\t    replace_exp (use_p, *new_expr);\n+\t    gimple_seq stmts = NULL;\n+\t    tree new_name = get_rename_from_scev (old_name, &stmts,\n+\t\t\t\t\t\t  bb->loop_father, iv_map);\n+\t    if (! codegen_error_p ())\n+\t      gsi_insert_earliest (stmts);\n+\t    replace_exp (use_p, new_name);\n \t  }\n \n       update_stmt (copy);\n@@ -1288,17 +1261,6 @@ copy_bb_and_scalar_dependences (basic_block bb, edge next_e, vec<tree> iv_map)\n       gsi_insert_after (&gsi_tgt, ass, GSI_NEW_STMT);\n     }\n \n-  vec <basic_block> *copied_bbs = region->copied_bb_map->get (bb);\n-  if (copied_bbs)\n-    copied_bbs->safe_push (new_bb);\n-  else\n-    {\n-      vec<basic_block> bbs;\n-      bbs.create (2);\n-      bbs.safe_push (new_bb);\n-      region->copied_bb_map->put (bb, bbs);\n-    }\n-\n   if (!graphite_copy_stmts_from_block (bb, new_bb, iv_map))\n     {\n       set_codegen_error ();\n@@ -1437,70 +1399,6 @@ scop_to_isl_ast (scop_p scop)\n   return ast_isl;\n }\n \n-/* Copy def from sese REGION to the newly created TO_REGION. TR is defined by\n-   DEF_STMT. GSI points to entry basic block of the TO_REGION.  */\n-\n-static void\n-copy_def (tree tr, gimple *def_stmt, sese_info_p region, sese_info_p to_region,\n-\t  gimple_stmt_iterator *gsi)\n-{\n-  if (!defined_in_sese_p (tr, region->region))\n-    return;\n-\n-  ssa_op_iter iter;\n-  use_operand_p use_p;\n-  FOR_EACH_SSA_USE_OPERAND (use_p, def_stmt, iter, SSA_OP_USE)\n-    {\n-      tree use_tr = USE_FROM_PTR (use_p);\n-\n-      /* Do not copy parameters that have been generated in the header of the\n-\t scop.  */\n-      if (region->parameter_rename_map->get(use_tr))\n-\tcontinue;\n-\n-      gimple *def_of_use = SSA_NAME_DEF_STMT (use_tr);\n-      if (!def_of_use)\n-\tcontinue;\n-\n-      copy_def (use_tr, def_of_use, region, to_region, gsi);\n-    }\n-\n-  gimple *copy = gimple_copy (def_stmt);\n-  gsi_insert_after (gsi, copy, GSI_NEW_STMT);\n-\n-  /* Create new names for all the definitions created by COPY and\n-     add replacement mappings for each new name.  */\n-  def_operand_p def_p;\n-  ssa_op_iter op_iter;\n-  FOR_EACH_SSA_DEF_OPERAND (def_p, copy, op_iter, SSA_OP_ALL_DEFS)\n-    {\n-      tree old_name = DEF_FROM_PTR (def_p);\n-      tree new_name = create_new_def_for (old_name, copy, def_p);\n-      region->parameter_rename_map->put(old_name, new_name);\n-    }\n-\n-  update_stmt (copy);\n-}\n-\n-static void\n-copy_internal_parameters (sese_info_p region, sese_info_p to_region)\n-{\n-  /* For all the parameters which definitino is in the if_region->false_region,\n-     insert code on true_region (if_region->true_region->entry). */\n-\n-  int i;\n-  tree tr;\n-  gimple_stmt_iterator gsi = gsi_start_bb(to_region->region.entry->dest);\n-\n-  FOR_EACH_VEC_ELT (region->params, i, tr)\n-    {\n-      // If def is not in region.\n-      gimple *def_stmt = SSA_NAME_DEF_STMT (tr);\n-      if (def_stmt)\n-\tcopy_def (tr, def_stmt, region, to_region, &gsi);\n-    }\n-}\n-\n /* Generate out-of-SSA copies for the entry edge FALSE_ENTRY/TRUE_ENTRY\n    in REGION.  */\n \n@@ -1564,10 +1462,6 @@ graphite_regenerate_ast_isl (scop_p scop)\n   region->if_region = if_region;\n \n   loop_p context_loop = region->region.entry->src->loop_father;\n-\n-  /* Copy all the parameters which are defined in the region.  */\n-  copy_internal_parameters(if_region->false_region, if_region->true_region);\n-\n   edge e = single_succ_edge (if_region->true_region->region.entry->dest);\n   basic_block bb = split_edge (e);\n "}, {"sha": "c236556522ad15afbdc25f4a1dd3ca1cdff3315b", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 10, "deletions": 36, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04612f7f8452021ad4eba08f03bc98b196753330/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04612f7f8452021ad4eba08f03bc98b196753330/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=04612f7f8452021ad4eba08f03bc98b196753330", "patch": "@@ -1103,7 +1103,7 @@ scop_detection::stmt_simple_for_scop_p (sese_l scop, gimple *stmt,\n \t    tree op = gimple_op (stmt, i);\n \t    if (!graphite_can_represent_expr (scop, loop, op)\n \t\t/* We can only constrain on integer type.  */\n-\t\t|| (TREE_CODE (TREE_TYPE (op)) != INTEGER_TYPE))\n+\t\t|| ! INTEGRAL_TYPE_P (TREE_TYPE (op)))\n \t      {\n \t\tDEBUG_PRINT (dp << \"[scop-detection-fail] \"\n \t\t\t\t<< \"Graphite cannot represent stmt:\\n\";\n@@ -1146,49 +1146,23 @@ scop_detection::nb_pbbs_in_loops (scop_p scop)\n   return res;\n }\n \n-/* When parameter NAME is in REGION, returns its index in SESE_PARAMS.\n-   Otherwise returns -1.  */\n+/* Assigns the parameter NAME an index in REGION.  */\n \n-static inline int\n-parameter_index_in_region_1 (tree name, sese_info_p region)\n+static void\n+assign_parameter_index_in_region (tree name, sese_info_p region)\n {\n+  gcc_assert (TREE_CODE (name) == SSA_NAME\n+\t      && INTEGRAL_TYPE_P (TREE_TYPE (name))\n+\t      && ! defined_in_sese_p (name, region->region));\n+\n   int i;\n   tree p;\n-\n-  gcc_assert (TREE_CODE (name) == SSA_NAME);\n-\n   FOR_EACH_VEC_ELT (region->params, i, p)\n     if (p == name)\n-      return i;\n-\n-  return -1;\n-}\n-\n-/* When the parameter NAME is in REGION, returns its index in\n-   SESE_PARAMS.  Otherwise this function inserts NAME in SESE_PARAMS\n-   and returns the index of NAME.  */\n-\n-static int\n-parameter_index_in_region (tree name, sese_info_p region)\n-{\n-  int i;\n-\n-  gcc_assert (TREE_CODE (name) == SSA_NAME);\n-\n-  /* Cannot constrain on anything else than INTEGER_TYPE parameters.  */\n-  if (TREE_CODE (TREE_TYPE (name)) != INTEGER_TYPE)\n-    return -1;\n-\n-  if (!invariant_in_sese_p_rec (name, region->region, NULL))\n-    return -1;\n-\n-  i = parameter_index_in_region_1 (name, region);\n-  if (i != -1)\n-    return i;\n+      return;\n \n   i = region->params.length ();\n   region->params.safe_push (name);\n-  return i;\n }\n \n /* In the context of sese S, scan the expression E and translate it to\n@@ -1230,7 +1204,7 @@ scan_tree_for_params (sese_info_p s, tree e)\n       break;\n \n     case SSA_NAME:\n-      parameter_index_in_region (e, s);\n+      assign_parameter_index_in_region (e, s);\n       break;\n \n     case INTEGER_CST:"}, {"sha": "f93289299b38181f903da8cacac7a9067388873b", "filename": "gcc/sese.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04612f7f8452021ad4eba08f03bc98b196753330/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04612f7f8452021ad4eba08f03bc98b196753330/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=04612f7f8452021ad4eba08f03bc98b196753330", "patch": "@@ -157,8 +157,6 @@ new_sese_info (edge entry, edge exit)\n   region->debug_liveout = NULL;\n   region->params.create (3);\n   region->rename_map = new rename_map_t;\n-  region->parameter_rename_map = new parameter_rename_map_t;\n-  region->copied_bb_map = new bb_map_t;\n   region->bbs.create (3);\n   region->incomplete_phis.create (3);\n \n@@ -179,18 +177,8 @@ free_sese_info (sese_info_p region)\n        it != region->rename_map->end (); ++it)\n     (*it).second.release ();\n \n-  for (bb_map_t::iterator it = region->copied_bb_map->begin ();\n-       it != region->copied_bb_map->end (); ++it)\n-    (*it).second.release ();\n-\n   delete region->rename_map;\n-  delete region->parameter_rename_map;\n-  delete region->copied_bb_map;\n-\n   region->rename_map = NULL;\n-  region->parameter_rename_map = NULL;\n-  region->copied_bb_map = NULL;\n-\n   region->bbs.release ();\n   region->incomplete_phis.release ();\n "}, {"sha": "c6e8861ce13e7b222503e8d77c2ef8022fc0dc99", "filename": "gcc/sese.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04612f7f8452021ad4eba08f03bc98b196753330/gcc%2Fsese.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04612f7f8452021ad4eba08f03bc98b196753330/gcc%2Fsese.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.h?ref=04612f7f8452021ad4eba08f03bc98b196753330", "patch": "@@ -22,7 +22,6 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_SESE_H\n #define GCC_SESE_H\n \n-typedef hash_map<tree, tree> parameter_rename_map_t;\n typedef hash_map<basic_block, vec<basic_block> > bb_map_t;\n typedef hash_map<tree, vec<tree> > rename_map_t;\n typedef struct ifsese_s *ifsese;\n@@ -97,15 +96,9 @@ typedef struct sese_info_t\n      dominator.  */\n   rename_map_t *rename_map;\n \n-  /* Parameters to be renamed.  */\n-  parameter_rename_map_t *parameter_rename_map;\n-\n   /* Basic blocks contained in this SESE.  */\n   vec<basic_block> bbs;\n \n-  /* Copied basic blocks indexed by the original bb.  */\n-  bb_map_t *copied_bb_map;\n-\n   /* A vector of phi nodes to be updated when all arguments are available.  The\n      pair contains first the old_phi and second the new_phi.  */\n   vec<phi_rename> incomplete_phis;"}]}