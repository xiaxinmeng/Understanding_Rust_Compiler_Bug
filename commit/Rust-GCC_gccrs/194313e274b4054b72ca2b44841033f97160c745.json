{"sha": "194313e274b4054b72ca2b44841033f97160c745", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk0MzEzZTI3NGI0MDU0YjcyY2EyYjQ0ODQxMDMzZjk3MTYwYzc0NQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-01-25T16:38:26Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-01-25T16:38:26Z"}, "message": "re PR tree-optimization/47426 (wrong code with -O2 -fipa-pta)\n\n2011-01-25  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/47426\n\t* tree-ssa-structalias.c (ipa_pta_execute): Make externally\n\tvisible functions results escape.\n\n\t* gcc.dg/torture/pr47426-1.c: New testcase.\n\t* gcc.dg/torture/pr47426-2.c: Likewise.\n\nFrom-SVN: r169241", "tree": {"sha": "c5579d7a1f5560c1a63423337a418a4054fce3bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5579d7a1f5560c1a63423337a418a4054fce3bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/194313e274b4054b72ca2b44841033f97160c745", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/194313e274b4054b72ca2b44841033f97160c745", "html_url": "https://github.com/Rust-GCC/gccrs/commit/194313e274b4054b72ca2b44841033f97160c745", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/194313e274b4054b72ca2b44841033f97160c745/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "147a0bcfc784a28e4ef09e32b23703e0ecc8bd55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/147a0bcfc784a28e4ef09e32b23703e0ecc8bd55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/147a0bcfc784a28e4ef09e32b23703e0ecc8bd55"}], "stats": {"total": 91, "additions": 84, "deletions": 7}, "files": [{"sha": "228aea7c54600b9ccf71fa5da6cdd10edcb5ca8c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/194313e274b4054b72ca2b44841033f97160c745/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/194313e274b4054b72ca2b44841033f97160c745/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=194313e274b4054b72ca2b44841033f97160c745", "patch": "@@ -1,3 +1,9 @@\n+2011-01-25  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/47426\n+\t* tree-ssa-structalias.c (ipa_pta_execute): Make externally\n+\tvisible functions results escape.\n+\n 2011-01-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/45701"}, {"sha": "47dcff91302543067bc0939ed0875a5570fad5dc", "filename": "gcc/testsuite/gcc.dg/torture/pr47426-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/194313e274b4054b72ca2b44841033f97160c745/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47426-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/194313e274b4054b72ca2b44841033f97160c745/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47426-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47426-1.c?ref=194313e274b4054b72ca2b44841033f97160c745", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fipa-pta\" } */\n+/* { dg-additional-sources \"pr47426-2.c\" } */\n+\n+void bar (int *i);\n+\n+static void\n+foo (int *i)\n+{\n+  if (*i)\n+    bar (i);\n+  if (*i)\n+    __builtin_abort();\n+}\n+\n+typedef void tfoo (int *);\n+\n+tfoo *\n+getfoo (void)\n+{\n+  return &foo;\n+}\n+"}, {"sha": "a22e902bce450d1b876771b797c549bc36ebe298", "filename": "gcc/testsuite/gcc.dg/torture/pr47426-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/194313e274b4054b72ca2b44841033f97160c745/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47426-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/194313e274b4054b72ca2b44841033f97160c745/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47426-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47426-2.c?ref=194313e274b4054b72ca2b44841033f97160c745", "patch": "@@ -0,0 +1,19 @@\n+typedef void tfoo (int *);\n+tfoo *getfoo (void);\n+\n+void\n+bar (int *i)\n+{\n+  (*i)--;\n+}\n+\n+int\n+main ()\n+{\n+  int i = 1;\n+  getfoo ()(&i);\n+  if (i)\n+    __builtin_abort ();\n+  return 0;\n+}\n+"}, {"sha": "cf1e817f3770cf503d03b4157efb3d1ec5c69287", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/194313e274b4054b72ca2b44841033f97160c745/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/194313e274b4054b72ca2b44841033f97160c745/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=194313e274b4054b72ca2b44841033f97160c745", "patch": "@@ -4435,24 +4435,30 @@ find_func_aliases (gimple origt)\n \tdo_structure_copy (lhsop, rhsop);\n       else\n \t{\n+\t  enum tree_code code = gimple_assign_rhs_code (t);\n+\n \t  get_constraint_for (lhsop, &lhsc);\n \n-\t  if (gimple_assign_rhs_code (t) == POINTER_PLUS_EXPR)\n+\t  if (code == POINTER_PLUS_EXPR)\n \t    get_constraint_for_ptr_offset (gimple_assign_rhs1 (t),\n \t\t\t\t\t   gimple_assign_rhs2 (t), &rhsc);\n-\t  else if (gimple_assign_rhs_code (t) == BIT_AND_EXPR\n+\t  else if (code == BIT_AND_EXPR\n \t\t   && TREE_CODE (gimple_assign_rhs2 (t)) == INTEGER_CST)\n \t    {\n \t      /* Aligning a pointer via a BIT_AND_EXPR is offsetting\n \t\t the pointer.  Handle it by offsetting it by UNKNOWN.  */\n \t      get_constraint_for_ptr_offset (gimple_assign_rhs1 (t),\n \t\t\t\t\t     NULL_TREE, &rhsc);\n \t    }\n-\t  else if ((CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (t))\n+\t  else if ((CONVERT_EXPR_CODE_P (code)\n \t\t    && !(POINTER_TYPE_P (gimple_expr_type (t))\n \t\t\t && !POINTER_TYPE_P (TREE_TYPE (rhsop))))\n \t\t   || gimple_assign_single_p (t))\n \t    get_constraint_for_rhs (rhsop, &rhsc);\n+\t  else if (truth_value_p (code))\n+\t    /* Truth value results are not pointer (parts).  Or at least\n+\t       very very unreasonable obfuscation of a part.  */\n+\t    ;\n \t  else\n \t    {\n \t      /* All other operations are merges.  */\n@@ -6827,11 +6833,34 @@ ipa_pta_execute (void)\n       push_cfun (func);\n       current_function_decl = node->decl;\n \n-      /* For externally visible functions use local constraints for\n-\t their arguments.  For local functions we see all callers\n-\t and thus do not need initial constraints for parameters.  */\n       if (node->local.externally_visible)\n-\tintra_create_variable_infos ();\n+\t{\n+\t  /* For externally visible functions use local constraints for\n+\t     their arguments.  For local functions we see all callers\n+\t     and thus do not need initial constraints for parameters.  */\n+\t  intra_create_variable_infos ();\n+\n+\t  /* We also need to make function return values escape.  Nothing\n+\t     escapes by returning from main though.  */\n+\t  if (!MAIN_NAME_P (DECL_NAME (node->decl)))\n+\t    {\n+\t      varinfo_t fi, rvi;\n+\t      fi = lookup_vi_for_tree (node->decl);\n+\t      rvi = first_vi_for_offset (fi, fi_result);\n+\t      if (rvi && rvi->offset == fi_result)\n+\t\t{\n+\t\t  struct constraint_expr includes;\n+\t\t  struct constraint_expr var;\n+\t\t  includes.var = escaped_id;\n+\t\t  includes.offset = 0;\n+\t\t  includes.type = SCALAR;\n+\t\t  var.var = rvi->id;\n+\t\t  var.offset = 0;\n+\t\t  var.type = SCALAR;\n+\t\t  process_constraint (new_constraint (includes, var));\n+\t\t}\n+\t    }\n+\t}\n \n       /* Build constriants for the function body.  */\n       FOR_EACH_BB_FN (bb, func)"}]}