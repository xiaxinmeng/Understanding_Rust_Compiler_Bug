{"sha": "991bb832494d3e422ef703e317cd0dc21ab74ac3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkxYmI4MzI0OTRkM2U0MjJlZjcwM2UzMTdjZDBkYzIxYWI3NGFjMw==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2005-11-27T14:01:36Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2005-11-27T14:01:36Z"}, "message": "re PR fortran/23912 (MOD function requires same kind arguments)\n\n\tPR fortran/23912\n\n\t* iresolve.c (gfc_resolve_dim, gfc_resolve_mod,\n\tgfc_resolve_modulo): When arguments have different kinds, fold\n\tthe lower one to the largest kind.\n\t* check.c (gfc_check_a_p): Arguments of different kinds is not\n\ta hard error, but an extension.\n\t* simplify.c (gfc_simplify_dim, gfc_simplify_mod,\n\tgfc_simplify_modulo): When arguments have different kinds, fold\n        the lower one to the largest kind.\n\n\t* gfortran.dg/modulo_1.f90: New test.\n\nFrom-SVN: r107566", "tree": {"sha": "c6f3cbda99666c39f12216bd3f642f6df5fcb01c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6f3cbda99666c39f12216bd3f642f6df5fcb01c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/991bb832494d3e422ef703e317cd0dc21ab74ac3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/991bb832494d3e422ef703e317cd0dc21ab74ac3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/991bb832494d3e422ef703e317cd0dc21ab74ac3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/991bb832494d3e422ef703e317cd0dc21ab74ac3/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b604fe9b84e41f387222758a300dce02a39a6b1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b604fe9b84e41f387222758a300dce02a39a6b1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b604fe9b84e41f387222758a300dce02a39a6b1b"}], "stats": {"total": 121, "additions": 101, "deletions": 20}, "files": [{"sha": "75fb58ae6c464d2bfadd31c733858f6e6b2c1e2d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991bb832494d3e422ef703e317cd0dc21ab74ac3/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991bb832494d3e422ef703e317cd0dc21ab74ac3/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=991bb832494d3e422ef703e317cd0dc21ab74ac3", "patch": "@@ -1,3 +1,15 @@\n+2005-11-27  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR fortran/23912\n+\t* iresolve.c (gfc_resolve_dim, gfc_resolve_mod,\n+\tgfc_resolve_modulo): When arguments have different kinds, fold\n+\tthe lower one to the largest kind.\n+\t* check.c (gfc_check_a_p): Arguments of different kinds is not\n+\ta hard error, but an extension.\n+\t* simplify.c (gfc_simplify_dim, gfc_simplify_mod,\n+\tgfc_simplify_modulo): When arguments have different kinds, fold\n+\tthe lower one to the largest kind.\n+\n 2005-11-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/14943"}, {"sha": "7b718960397c9053cac606474c25aca9189374aa", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991bb832494d3e422ef703e317cd0dc21ab74ac3/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991bb832494d3e422ef703e317cd0dc21ab74ac3/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=991bb832494d3e422ef703e317cd0dc21ab74ac3", "patch": "@@ -450,8 +450,21 @@ gfc_check_a_p (gfc_expr * a, gfc_expr * p)\n   if (int_or_real_check (a, 0) == FAILURE)\n     return FAILURE;\n \n-  if (same_type_check (a, 0, p, 1) == FAILURE)\n-    return FAILURE;\n+  if (a->ts.type != p->ts.type)\n+    {\n+      gfc_error (\"'%s' and '%s' arguments of '%s' intrinsic at %L must \"\n+                \"have the same type\", gfc_current_intrinsic_arg[0],\n+                gfc_current_intrinsic_arg[1], gfc_current_intrinsic,\n+                &p->where);\n+      return FAILURE;\n+    }\n+\n+  if (a->ts.kind != p->ts.kind)\n+    {\n+      if (gfc_notify_std (GFC_STD_GNU, \"Extension: Different type kinds at %L\",\n+                          &p->where) == FAILURE)\n+       return FAILURE;\n+    }\n \n   return SUCCESS;\n }"}, {"sha": "e154a34f6355e245b6e1df2f5e7bfc6129d88f0b", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 49, "deletions": 13, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991bb832494d3e422ef703e317cd0dc21ab74ac3/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991bb832494d3e422ef703e317cd0dc21ab74ac3/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=991bb832494d3e422ef703e317cd0dc21ab74ac3", "patch": "@@ -523,12 +523,24 @@ gfc_resolve_dble (gfc_expr * f, gfc_expr * a)\n \n \n void\n-gfc_resolve_dim (gfc_expr * f, gfc_expr * x,\n-\t\t gfc_expr * y ATTRIBUTE_UNUSED)\n+gfc_resolve_dim (gfc_expr * f, gfc_expr * a, gfc_expr * p)\n {\n-  f->ts = x->ts;\n+  f->ts.type = a->ts.type;\n+  if (p != NULL)\n+    f->ts.kind = gfc_kind_max (a,p);\n+  else\n+    f->ts.kind = a->ts.kind;\n+\n+  if (p != NULL && a->ts.kind != p->ts.kind)\n+    {\n+      if (a->ts.kind == gfc_kind_max (a,p))\n+\tgfc_convert_type(p, &a->ts, 2);\n+      else\n+\tgfc_convert_type(a, &p->ts, 2);\n+    }\n+\n   f->value.function.name =\n-    gfc_get_string (\"__dim_%c%d\", gfc_type_letter (x->ts.type), x->ts.kind);\n+    gfc_get_string (\"__dim_%c%d\", gfc_type_letter (f->ts.type), f->ts.kind);\n }\n \n \n@@ -1179,23 +1191,47 @@ gfc_resolve_minval (gfc_expr * f, gfc_expr * array, gfc_expr * dim,\n \n \n void\n-gfc_resolve_mod (gfc_expr * f, gfc_expr * a,\n-\t\t gfc_expr * p ATTRIBUTE_UNUSED)\n+gfc_resolve_mod (gfc_expr * f, gfc_expr * a, gfc_expr * p)\n {\n-  f->ts = a->ts;\n+  f->ts.type = a->ts.type;\n+  if (p != NULL)\n+    f->ts.kind = gfc_kind_max (a,p);\n+  else\n+    f->ts.kind = a->ts.kind;\n+\n+  if (p != NULL && a->ts.kind != p->ts.kind)\n+    {\n+      if (a->ts.kind == gfc_kind_max (a,p))\n+\tgfc_convert_type(p, &a->ts, 2);\n+      else\n+\tgfc_convert_type(a, &p->ts, 2);\n+    }\n+\n   f->value.function.name =\n-    gfc_get_string (\"__mod_%c%d\", gfc_type_letter (a->ts.type), a->ts.kind);\n+    gfc_get_string (\"__mod_%c%d\", gfc_type_letter (f->ts.type), f->ts.kind);\n }\n \n \n void\n-gfc_resolve_modulo (gfc_expr * f, gfc_expr * a,\n-\t\t    gfc_expr * p ATTRIBUTE_UNUSED)\n+gfc_resolve_modulo (gfc_expr * f, gfc_expr * a, gfc_expr * p)\n {\n-  f->ts = a->ts;\n+  f->ts.type = a->ts.type;\n+  if (p != NULL)\n+    f->ts.kind = gfc_kind_max (a,p);\n+  else\n+    f->ts.kind = a->ts.kind;\n+\n+  if (p != NULL && a->ts.kind != p->ts.kind)\n+    {\n+      if (a->ts.kind == gfc_kind_max (a,p))\n+\tgfc_convert_type(p, &a->ts, 2);\n+      else\n+\tgfc_convert_type(a, &p->ts, 2);\n+    }\n+\n   f->value.function.name =\n-    gfc_get_string (\"__modulo_%c%d\", gfc_type_letter (a->ts.type),\n-\t\t    a->ts.kind);\n+    gfc_get_string (\"__modulo_%c%d\", gfc_type_letter (f->ts.type),\n+\t\t    f->ts.kind);\n }\n \n void"}, {"sha": "e6fbefcfe5ba8aa19d800ba63def2e19bafd53d0", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991bb832494d3e422ef703e317cd0dc21ab74ac3/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991bb832494d3e422ef703e317cd0dc21ab74ac3/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=991bb832494d3e422ef703e317cd0dc21ab74ac3", "patch": "@@ -920,11 +920,13 @@ gfc_expr *\n gfc_simplify_dim (gfc_expr * x, gfc_expr * y)\n {\n   gfc_expr *result;\n+  int kind;\n \n   if (x->expr_type != EXPR_CONSTANT || y->expr_type != EXPR_CONSTANT)\n     return NULL;\n \n-  result = gfc_constant_result (x->ts.type, x->ts.kind, &x->where);\n+  kind = x->ts.kind > y->ts.kind ? x->ts.kind : y->ts.kind;\n+  result = gfc_constant_result (x->ts.type, kind, &x->where);\n \n   switch (x->ts.type)\n     {\n@@ -2250,11 +2252,13 @@ gfc_simplify_mod (gfc_expr * a, gfc_expr * p)\n {\n   gfc_expr *result;\n   mpfr_t quot, iquot, term;\n+  int kind;\n \n   if (a->expr_type != EXPR_CONSTANT || p->expr_type != EXPR_CONSTANT)\n     return NULL;\n \n-  result = gfc_constant_result (a->ts.type, a->ts.kind, &a->where);\n+  kind = a->ts.kind > p->ts.kind ? a->ts.kind : p->ts.kind;\n+  result = gfc_constant_result (a->ts.type, kind, &a->where);\n \n   switch (a->ts.type)\n     {\n@@ -2278,7 +2282,7 @@ gfc_simplify_mod (gfc_expr * a, gfc_expr * p)\n \t  return &gfc_bad_expr;\n \t}\n \n-      gfc_set_model_kind (a->ts.kind);\n+      gfc_set_model_kind (kind);\n       mpfr_init (quot);\n       mpfr_init (iquot);\n       mpfr_init (term);\n@@ -2306,11 +2310,13 @@ gfc_simplify_modulo (gfc_expr * a, gfc_expr * p)\n {\n   gfc_expr *result;\n   mpfr_t quot, iquot, term;\n+  int kind;\n \n   if (a->expr_type != EXPR_CONSTANT || p->expr_type != EXPR_CONSTANT)\n     return NULL;\n \n-  result = gfc_constant_result (a->ts.type, a->ts.kind, &a->where);\n+  kind = a->ts.kind > p->ts.kind ? a->ts.kind : p->ts.kind;\n+  result = gfc_constant_result (a->ts.type, kind, &a->where);\n \n   switch (a->ts.type)\n     {\n@@ -2336,7 +2342,7 @@ gfc_simplify_modulo (gfc_expr * a, gfc_expr * p)\n \t  return &gfc_bad_expr;\n \t}\n \n-      gfc_set_model_kind (a->ts.kind);\n+      gfc_set_model_kind (kind);\n       mpfr_init (quot);\n       mpfr_init (iquot);\n       mpfr_init (term);"}, {"sha": "24dc9dc1c3dfc5d5755989c932d14e6ba149742e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991bb832494d3e422ef703e317cd0dc21ab74ac3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991bb832494d3e422ef703e317cd0dc21ab74ac3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=991bb832494d3e422ef703e317cd0dc21ab74ac3", "patch": "@@ -1,3 +1,8 @@\n+2005-11-27  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR fortran/23912\n+\t* gfortran.dg/modulo_1.f90: New test.\n+\n 2005-11-27  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR libfortran/24919"}, {"sha": "4fb255e6246244b0751fe0783148944c5c5a09e3", "filename": "gcc/testsuite/gfortran.dg/modulo_1.f90", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991bb832494d3e422ef703e317cd0dc21ab74ac3/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodulo_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991bb832494d3e422ef703e317cd0dc21ab74ac3/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodulo_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodulo_1.f90?ref=991bb832494d3e422ef703e317cd0dc21ab74ac3", "patch": "@@ -0,0 +1,9 @@\n+! { dg-do compile }\n+! PR fortran/23912\n+  integer*4 i4\n+  integer*8 i8\n+\n+  i4 = modulo(i4,i8) ! { dg-warning \"Extension\" }\n+  i4 = modulo(i8,i4) ! { dg-warning \"Extension\" }\n+\n+  end"}]}