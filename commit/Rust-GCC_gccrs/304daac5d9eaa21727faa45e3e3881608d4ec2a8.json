{"sha": "304daac5d9eaa21727faa45e3e3881608d4ec2a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA0ZGFhYzVkOWVhYTIxNzI3ZmFhNDVlM2UzODgxNjA4ZDRlYzJhOA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-09-30T10:01:04Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2000-09-30T10:01:04Z"}, "message": "posix-threads.cc (_Jv_CondWait): Check to see if we are interrupted before modifying the cv's wait set.\n\n2000-09-30  Tom Tromey  <tromey@cygnus.com>\n\n        * posix-threads.cc (_Jv_CondWait): Check to see if we are\n        interrupted before modifying the cv's wait set.\n\nFrom-SVN: r36680", "tree": {"sha": "a4e2c3a6e8a2856a0ce7f78966263082bf760310", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4e2c3a6e8a2856a0ce7f78966263082bf760310"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/304daac5d9eaa21727faa45e3e3881608d4ec2a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/304daac5d9eaa21727faa45e3e3881608d4ec2a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/304daac5d9eaa21727faa45e3e3881608d4ec2a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/304daac5d9eaa21727faa45e3e3881608d4ec2a8/comments", "author": null, "committer": null, "parents": [{"sha": "bf3b8e42e291aeaeae178f6be1a49deebcd4e527", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf3b8e42e291aeaeae178f6be1a49deebcd4e527", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf3b8e42e291aeaeae178f6be1a49deebcd4e527"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "6a7e6bf457183496afbe71e7f1f368e23b749267", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/304daac5d9eaa21727faa45e3e3881608d4ec2a8/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/304daac5d9eaa21727faa45e3e3881608d4ec2a8/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=304daac5d9eaa21727faa45e3e3881608d4ec2a8", "patch": "@@ -1,3 +1,8 @@\n+2000-09-30  Tom Tromey  <tromey@cygnus.com>\n+\n+        * posix-threads.cc (_Jv_CondWait): Check to see if we are\n+        interrupted before modifying the cv's wait set.\n+\t\n 2000-09-30  Hans Boehm  <boehm@acm.org>\n \t    Bryce McKinlay  <bryce@albatross.co.nz>\n \t    "}, {"sha": "2c7babb97a084ffcf2181a27277b5194a4dcb6c3", "filename": "libjava/posix-threads.cc", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/304daac5d9eaa21727faa45e3e3881608d4ec2a8/libjava%2Fposix-threads.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/304daac5d9eaa21727faa45e3e3881608d4ec2a8/libjava%2Fposix-threads.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fposix-threads.cc?ref=304daac5d9eaa21727faa45e3e3881608d4ec2a8", "patch": "@@ -1,6 +1,6 @@\n // posix-threads.cc - interface between libjava and POSIX threads.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -104,6 +104,16 @@ _Jv_CondWait (_Jv_ConditionVariable_t *cv, _Jv_Mutex_t *mu,\n   _Jv_Thread_t *current = _Jv_ThreadCurrentData ();\n   java::lang::Thread *current_obj = _Jv_ThreadCurrent ();\n \n+  pthread_mutex_lock (&current->wait_mutex);\n+\n+  // Now that we hold the wait mutex, check if this thread has been \n+  // interrupted already.\n+  if (current_obj->interrupt_flag)\n+    {\n+      pthread_mutex_unlock (&current->wait_mutex);\n+      return _JV_INTERRUPTED;\n+    }\n+\n   // Add this thread to the cv's wait set.\n   current->next = NULL;\n \n@@ -119,16 +129,6 @@ _Jv_CondWait (_Jv_ConditionVariable_t *cv, _Jv_Mutex_t *mu,\n           }\n       }\n \n-  pthread_mutex_lock (&current->wait_mutex);\n-  \n-  // Now that we hold the wait mutex, check if this thread has been \n-  // interrupted already.\n-  if (current_obj->interrupt_flag)\n-    {\n-      pthread_mutex_unlock (&current->wait_mutex);\n-      return _JV_INTERRUPTED;\n-    }\n-\n   // Record the current lock depth, so it can be restored when we re-aquire it.\n   int count = mu->count;\n \n@@ -154,7 +154,7 @@ _Jv_CondWait (_Jv_ConditionVariable_t *cv, _Jv_Mutex_t *mu,\n         done_sleeping = true;\n     }\n   \n-  // Check for an interrupt *before* unlocking the wait mutex.\n+  // Check for an interrupt *before* releasing the wait mutex.\n   jboolean interrupted = current_obj->interrupt_flag;\n   \n   pthread_mutex_unlock (&current->wait_mutex);"}]}