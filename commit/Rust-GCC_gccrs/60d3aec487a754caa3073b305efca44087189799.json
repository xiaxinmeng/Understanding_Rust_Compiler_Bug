{"sha": "60d3aec487a754caa3073b305efca44087189799", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBkM2FlYzQ4N2E3NTRjYWEzMDczYjMwNWVmY2E0NDA4NzE4OTc5OQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-04-07T20:27:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-04-07T20:27:37Z"}, "message": "tree-ssa-pre.c (my_rev_post_order_compute): Remove set but not used count variable.\n\n\t* tree-ssa-pre.c (my_rev_post_order_compute): Remove set but not\n\tused count variable.\n\t* genemit.c (gen_expand, gen_split): Avoid set but not used warnings\n\twhen operandN variables aren't used in the body of the expander\n\tor splitter.\n\t* tree-outof-ssa.c (FOR_EACH_ELIM_GRAPH_SUCC,\n\tFOR_EACH_ELIM_GRAPH_PRED): Avoid set but not used warnings.\n\t* tree-ssa-operands.h (FOR_EACH_SSA_TREE_OPERAND): Likewise.\n\t* tree-flow.h (FOR_EACH_IMM_USE_FAST, FOR_EACH_IMM_USE_STMT,\n\tFOR_EACH_IMM_USE_ON_STMT): Likewise.\n\t* tree.h (FOR_EACH_CONSTRUCTOR_ELT): Likewise.\n\t* tree.c (PROCESS_ARG): Likewise.\nfortran/\n\t* parse.c (parse_derived, parse_enum): Avoid set but not used\n\twarning.\njava/\n\t* expr.c (process_jvm_instruction): Avoid set but not used warning.\n\t* builtins.c (compareAndSwapInt_builtin, compareAndSwapLong_builtin,\n\tgetVolatile_builtin): Likewise.\nlibjava/\n\t* exception.cc (_Jv_Throw): Avoid set but not used warning.\n\t* include/java-assert.h (JvAssertMessage, JvAssert): Use argument in\n\tsizeof to avoid set but not used warnings.\nlibjava/classpath/\n\t* native/jni/midi-alsa/gnu_javax_sound_midi_alsa_AlsaPortDevice.c\n\t(Java_gnu_javax_sound_midi_alsa_AlsaPortDevice_run_1receiver_1thread_1):\n\tAvoid set but not used warning.\nlibiberty/\n\t* regex.c (byte_re_match_2_internal): Avoid set but not used\n\twarning.\ngcc/testsuite/\n\t* gcc.dg/builtin-choose-expr.c: Avoid set but not used warnings.\n\t* gcc.dg/trunc-1.c: Likewise.\n\t* gcc.dg/vla-9.c: Likewise.\n\t* gcc.dg/dfp/composite-type.c: Likewise.\nlibffi/\n\t* testsuite/libffi.call/err_bad_abi.c: Remove unused args variable.\n\nFrom-SVN: r158084", "tree": {"sha": "6753832a3718adf7bc216f0e33a4f7458672d44f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6753832a3718adf7bc216f0e33a4f7458672d44f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60d3aec487a754caa3073b305efca44087189799", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60d3aec487a754caa3073b305efca44087189799", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60d3aec487a754caa3073b305efca44087189799", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60d3aec487a754caa3073b305efca44087189799/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b51e84c954e63bc52a8d5d4fa1cda7cf4f8ecfb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b51e84c954e63bc52a8d5d4fa1cda7cf4f8ecfb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b51e84c954e63bc52a8d5d4fa1cda7cf4f8ecfb4"}], "stats": {"total": 201, "additions": 118, "deletions": 83}, "files": [{"sha": "1f32f76d46f4675f3f391a05f4c1809b845562d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d3aec487a754caa3073b305efca44087189799/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d3aec487a754caa3073b305efca44087189799/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=60d3aec487a754caa3073b305efca44087189799", "patch": "@@ -1,3 +1,18 @@\n+2010-04-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree-ssa-pre.c (my_rev_post_order_compute): Remove set but not\n+\tused count variable.\n+\t* genemit.c (gen_expand, gen_split): Avoid set but not used warnings\n+\twhen operandN variables aren't used in the body of the expander\n+\tor splitter.\n+\t* tree-outof-ssa.c (FOR_EACH_ELIM_GRAPH_SUCC,\n+\tFOR_EACH_ELIM_GRAPH_PRED): Avoid set but not used warnings.\n+\t* tree-ssa-operands.h (FOR_EACH_SSA_TREE_OPERAND): Likewise.\n+\t* tree-flow.h (FOR_EACH_IMM_USE_FAST, FOR_EACH_IMM_USE_STMT,\n+\tFOR_EACH_IMM_USE_ON_STMT): Likewise.\n+\t* tree.h (FOR_EACH_CONSTRUCTOR_ELT): Likewise.\n+\t* tree.c (PROCESS_ARG): Likewise.\n+\n 2010-04-07  Simon Baldwin  <simonb@google.com>\n \n \t* diagnostic.h (diagnostic_override_option_index): New macro to"}, {"sha": "795eeb5329628dd7f384d9db6d988c67adb2d2a2", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d3aec487a754caa3073b305efca44087189799/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d3aec487a754caa3073b305efca44087189799/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=60d3aec487a754caa3073b305efca44087189799", "patch": "@@ -1,3 +1,8 @@\n+2010-04-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parse.c (parse_derived, parse_enum): Avoid set but not used\n+\twarning.\n+\n 2010-04-07  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \tPR fortran/40539"}, {"sha": "ef8931d2a2ce94f3cf5111eeff7e4c9a058c9f0c", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 10, "deletions": 30, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d3aec487a754caa3073b305efca44087189799/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d3aec487a754caa3073b305efca44087189799/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=60d3aec487a754caa3073b305efca44087189799", "patch": "@@ -1968,14 +1968,12 @@ parse_derived_contains (void)\n static void\n parse_derived (void)\n {\n-  int compiling_type, seen_private, seen_sequence, seen_component, error_flag;\n+  int compiling_type, seen_private, seen_sequence, seen_component;\n   gfc_statement st;\n   gfc_state_data s;\n   gfc_symbol *sym;\n   gfc_component *c;\n \n-  error_flag = 0;\n-\n   accept_statement (ST_DERIVED_DECL);\n   push_state (&s, COMP_DERIVED, gfc_new_block);\n \n@@ -2002,18 +2000,15 @@ parse_derived (void)\n \n \tcase ST_FINAL:\n \t  gfc_error (\"FINAL declaration at %C must be inside CONTAINS\");\n-\t  error_flag = 1;\n \t  break;\n \n \tcase ST_END_TYPE:\n endType:\n \t  compiling_type = 0;\n \n-\t  if (!seen_component\n-\t      && (gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: Derived type \"\n-\t\t\t\t \"definition at %C without components\")\n-\t\t  == FAILURE))\n-\t    error_flag = 1;\n+\t  if (!seen_component)\n+\t    gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: Derived type \"\n+\t\t\t    \"definition at %C without components\");\n \n \t  accept_statement (ST_END_TYPE);\n \t  break;\n@@ -2023,23 +2018,18 @@ parse_derived (void)\n \t    {\n \t      gfc_error (\"PRIVATE statement in TYPE at %C must be inside \"\n \t\t\t \"a MODULE\");\n-\t      error_flag = 1;\n \t      break;\n \t    }\n \n \t  if (seen_component)\n \t    {\n \t      gfc_error (\"PRIVATE statement at %C must precede \"\n \t\t\t \"structure components\");\n-\t      error_flag = 1;\n \t      break;\n \t    }\n \n \t  if (seen_private)\n-\t    {\n-\t      gfc_error (\"Duplicate PRIVATE statement at %C\");\n-\t      error_flag = 1;\n-\t    }\n+\t    gfc_error (\"Duplicate PRIVATE statement at %C\");\n \n \t  s.sym->component_access = ACCESS_PRIVATE;\n \n@@ -2052,7 +2042,6 @@ parse_derived (void)\n \t    {\n \t      gfc_error (\"SEQUENCE statement at %C must precede \"\n \t\t\t \"structure components\");\n-\t      error_flag = 1;\n \t      break;\n \t    }\n \n@@ -2063,7 +2052,6 @@ parse_derived (void)\n \t  if (seen_sequence)\n \t    {\n \t      gfc_error (\"Duplicate SEQUENCE statement at %C\");\n-\t      error_flag = 1;\n \t    }\n \n \t  seen_sequence = 1;\n@@ -2072,14 +2060,12 @@ parse_derived (void)\n \t  break;\n \n \tcase ST_CONTAINS:\n-\t  if (gfc_notify_std (GFC_STD_F2003,\n-\t\t\t      \"Fortran 2003:  CONTAINS block in derived type\"\n-\t\t\t      \" definition at %C\") == FAILURE)\n-\t    error_flag = 1;\n+\t  gfc_notify_std (GFC_STD_F2003,\n+\t\t\t  \"Fortran 2003:  CONTAINS block in derived type\"\n+\t\t\t  \" definition at %C\");\n \n \t  accept_statement (ST_CONTAINS);\n-\t  if (parse_derived_contains ())\n-\t    error_flag = 1;\n+\t  parse_derived_contains ();\n \t  goto endType;\n \n \tdefault:\n@@ -2138,14 +2124,11 @@ parse_derived (void)\n static void\n parse_enum (void)\n {\n-  int error_flag;\n   gfc_statement st;\n   int compiling_enum;\n   gfc_state_data s;\n   int seen_enumerator = 0;\n \n-  error_flag = 0;\n-\n   push_state (&s, COMP_ENUM, gfc_new_block);\n \n   compiling_enum = 1;\n@@ -2167,10 +2150,7 @@ parse_enum (void)\n \tcase ST_END_ENUM:\n \t  compiling_enum = 0;\n \t  if (!seen_enumerator)\n-\t    {\n-\t      gfc_error (\"ENUM declaration at %C has no ENUMERATORS\");\n-\t      error_flag = 1;\n-\t    }\n+\t    gfc_error (\"ENUM declaration at %C has no ENUMERATORS\");\n \t  accept_statement (st);\n \t  break;\n "}, {"sha": "1a6502585db3c717f0ab79aca46be627f3bbadd9", "filename": "gcc/genemit.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d3aec487a754caa3073b305efca44087189799/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d3aec487a754caa3073b305efca44087189799/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=60d3aec487a754caa3073b305efca44087189799", "patch": "@@ -1,6 +1,6 @@\n /* Generate code from machine description to emit insns as rtl.\n    Copyright (C) 1987, 1988, 1991, 1994, 1995, 1997, 1998, 1999, 2000, 2001,\n-   2003, 2004, 2005, 2007, 2008, 2009 Free Software Foundation, Inc.\n+   2003, 2004, 2005, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -520,12 +520,13 @@ gen_expand (rtx expand)\n \t (unless we aren't going to use them at all).  */\n       if (XVEC (expand, 1) != 0)\n \t{\n-\t  for (i = 0; i < operands; i++)\n-\t    printf (\"    operand%d = operands[%d];\\n\", i, i);\n-\t  for (; i <= max_dup_opno; i++)\n-\t    printf (\"    operand%d = operands[%d];\\n\", i, i);\n-\t  for (; i <= max_scratch_opno; i++)\n-\t    printf (\"    operand%d = operands[%d];\\n\", i, i);\n+\t  for (i = 0;\n+\t       i < MAX (operands, MAX (max_scratch_opno, max_dup_opno) + 1);\n+\t       i++)\n+\t    {\n+\t      printf (\"    operand%d = operands[%d];\\n\", i, i);\n+\t      printf (\"    (void) operand%d;\\n\", i);\n+\t    }\n \t}\n       printf (\"  }\\n\");\n     }\n@@ -647,7 +648,10 @@ gen_split (rtx split)\n \n   /* Output code to copy the arguments back out of `operands'  */\n   for (i = 0; i < operands; i++)\n-    printf (\"  operand%d = operands[%d];\\n\", i, i);\n+    {\n+      printf (\"  operand%d = operands[%d];\\n\", i, i);\n+      printf (\"  (void) operand%d;\\n\", i);\n+    }\n \n   /* Output code to construct the rtl for the instruction bodies.\n      Use emit_insn to add them to the sequence being accumulated."}, {"sha": "f1a60807436cef817053b21576846194ee4004c3", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d3aec487a754caa3073b305efca44087189799/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d3aec487a754caa3073b305efca44087189799/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=60d3aec487a754caa3073b305efca44087189799", "patch": "@@ -1,3 +1,9 @@\n+2010-04-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* exception.cc (_Jv_Throw): Avoid set but not used warning.\n+\t* include/java-assert.h (JvAssertMessage, JvAssert): Use argument in\n+\tsizeof to avoid set but not used warnings.\n+\n 2010-01-20  Joern Rennecke  <amylaar@spamcop.net>\n \n \t* lang.c (java_post_options): Constify variable \"dot\"."}, {"sha": "a4f59f9fa7f0da242960c8006e47dd528329627c", "filename": "gcc/java/builtins.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d3aec487a754caa3073b305efca44087189799/gcc%2Fjava%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d3aec487a754caa3073b305efca44087189799/gcc%2Fjava%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fbuiltins.c?ref=60d3aec487a754caa3073b305efca44087189799", "patch": "@@ -1,5 +1,5 @@\n /* Built-in and inline functions for gcj\n-   Copyright (C) 2001, 2003, 2004, 2005, 2006, 2007, 2009\n+   Copyright (C) 2001, 2003, 2004, 2005, 2006, 2007, 2009, 2010\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -323,6 +323,7 @@ compareAndSwapInt_builtin (tree method_return_type ATTRIBUTE_UNUSED,\n     {\n       tree addr, stmt;\n       UNMARSHAL5 (orig_call);\n+      (void) value_type; /* Avoid set but not used warning.  */\n \n       addr = build_addr_sum (int_type_node, obj_arg, offset_arg);\n       stmt = build_call_expr (built_in_decls[BUILT_IN_BOOL_COMPARE_AND_SWAP_4],\n@@ -347,6 +348,7 @@ compareAndSwapLong_builtin (tree method_return_type ATTRIBUTE_UNUSED,\n     {\n       tree addr, stmt;\n       UNMARSHAL5 (orig_call);\n+      (void) value_type; /* Avoid set but not used warning.  */\n \n       addr = build_addr_sum (long_type_node, obj_arg, offset_arg);\n       stmt = build_call_expr (built_in_decls[BUILT_IN_BOOL_COMPARE_AND_SWAP_8],\n@@ -410,7 +412,8 @@ getVolatile_builtin (tree method_return_type ATTRIBUTE_UNUSED,\n {\n   tree addr, stmt, modify_stmt, tmp;\n   UNMARSHAL3 (orig_call);\n-  \n+  (void) this_arg; /* Avoid set but not used warning.  */\n+\n   addr = build_addr_sum (method_return_type, obj_arg, offset_arg);\n   addr \n     = fold_convert (build_pointer_type (build_type_variant "}, {"sha": "a6a3f391a573beac4c8b7b1af24e73c0e64d1d9d", "filename": "gcc/java/expr.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d3aec487a754caa3073b305efca44087189799/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d3aec487a754caa3073b305efca44087189799/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=60d3aec487a754caa3073b305efca44087189799", "patch": "@@ -1,6 +1,6 @@\n /* Process expressions for the GNU compiler for the Java(TM) language.\n    Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n-   2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n+   2005, 2006, 2007, 2008, 2010 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -3329,6 +3329,7 @@ process_jvm_instruction (int PC, const unsigned char* byte_ops,\n   {\t\t\t\t\t\t\t\t\t\\\n     int saw_index = 0;\t\t\t\t\t\t\t\\\n     int index     = OPERAND_VALUE;\t\t\t\t\t\\\n+    (void) saw_index; /* Avoid set but not used warning.  */\t\t\\\n     build_java_ret\t\t\t\t\t\t\t\\\n       (find_local_variable (index, return_address_type_node, oldpc));\t\\\n   }"}, {"sha": "b7fb0c5b2ec17a3b3f7069da06727bef94debfe1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d3aec487a754caa3073b305efca44087189799/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d3aec487a754caa3073b305efca44087189799/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=60d3aec487a754caa3073b305efca44087189799", "patch": "@@ -1,3 +1,10 @@\n+2010-04-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/builtin-choose-expr.c: Avoid set but not used warnings.\n+\t* gcc.dg/trunc-1.c: Likewise.\n+\t* gcc.dg/vla-9.c: Likewise.\n+\t* gcc.dg/dfp/composite-type.c: Likewise.\n+\n 2010-04-07  Iain Sandoe <iains@gcc.gnu.org>\n \n \tPR objc/35996"}, {"sha": "ceac6051f786570aa869be3ae920f0b6f293b382", "filename": "gcc/testsuite/gcc.dg/builtin-choose-expr.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d3aec487a754caa3073b305efca44087189799/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-choose-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d3aec487a754caa3073b305efca44087189799/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-choose-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-choose-expr.c?ref=60d3aec487a754caa3073b305efca44087189799", "patch": "@@ -29,6 +29,8 @@\n           t1 = t1b;\t\t\t\t\t\t\\\n           t2 = t2a;\t\t\t\t\t\t\\\n           t2 = t2b;\t\t\t\t\t\t\\\n+          (void) t1;\t\t\t\t\t\t\\\n+          (void) t2;\t\t\t\t\t\t\\\n         } while (0)\n \n "}, {"sha": "69ecb1421c14ca8ef867f2722e1d28ef1599b382", "filename": "gcc/testsuite/gcc.dg/dfp/composite-type.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d3aec487a754caa3073b305efca44087189799/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcomposite-type.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d3aec487a754caa3073b305efca44087189799/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcomposite-type.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcomposite-type.c?ref=60d3aec487a754caa3073b305efca44087189799", "patch": "@@ -30,18 +30,19 @@ do \\\n  d##TYPE = f2_##TYPE(h1_##TYPE); \\\n  d##TYPE = f2_##TYPE(h2_##TYPE); \\\n  d##TYPE = f2_##TYPE(h3_##TYPE); \\\n+ (void) d##TYPE; \\\n } while(0)\n  \n DECIMAL_COMPOSITE_DECL(32);  /* { dg-error \"incompatible types when assigning to type '\\[^\\n\\]*' from type '\\[^\\n\\]*'\" } */\n-/* { dg-message \"note: expected '\\[^'\\n\\]*' but argument is of type '\\[^'\\n\\]*'\" \"note: expected\" { target *-*-* } 35 } */\n+/* { dg-message \"note: expected '\\[^'\\n\\]*' but argument is of type '\\[^'\\n\\]*'\" \"note: expected\" { target *-*-* } 36 } */\n \n \n DECIMAL_COMPOSITE_DECL(64);  /* { dg-error \"incompatible types when assigning to type '\\[^\\n\\]*' from type '\\[^\\n\\]*'\" } */\n-/* { dg-message \"note: expected '\\[^'\\n\\]*' but argument is of type '\\[^'\\n\\]*'\" \"note: expected\" { target *-*-* } 39 } */\n+/* { dg-message \"note: expected '\\[^'\\n\\]*' but argument is of type '\\[^'\\n\\]*'\" \"note: expected\" { target *-*-* } 40 } */\n \n \n DECIMAL_COMPOSITE_DECL(128); /* { dg-error \"incompatible types when assigning to type '\\[^\\n\\]*' from type '\\[^\\n\\]*'\" } */\n-/* { dg-message \"note: expected '\\[^'\\n\\]*' but argument is of type '\\[^'\\n\\]*'\" \"note: expected\" { target *-*-* } 43 } */\n+/* { dg-message \"note: expected '\\[^'\\n\\]*' but argument is of type '\\[^'\\n\\]*'\" \"note: expected\" { target *-*-* } 44 } */\n \n \n int main()"}, {"sha": "a78cceb598a0895a0c827e2ed6d41f2f9dc0aaee", "filename": "gcc/testsuite/gcc.dg/trunc-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d3aec487a754caa3073b305efca44087189799/gcc%2Ftestsuite%2Fgcc.dg%2Ftrunc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d3aec487a754caa3073b305efca44087189799/gcc%2Ftestsuite%2Fgcc.dg%2Ftrunc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftrunc-1.c?ref=60d3aec487a754caa3073b305efca44087189799", "patch": "@@ -11,5 +11,5 @@ main (void)\n \n   len = ~(sizeof (size_t) - 1); /* { dg-bogus \"truncated\" \"bogus truncation warning\" } */\n \n-  return 0;\n+  return len - len;\n }"}, {"sha": "506a1a2eb14ca2ec8604f5f1a04296023260f575", "filename": "gcc/testsuite/gcc.dg/vla-9.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d3aec487a754caa3073b305efca44087189799/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d3aec487a754caa3073b305efca44087189799/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-9.c?ref=60d3aec487a754caa3073b305efca44087189799", "patch": "@@ -6,4 +6,5 @@ void f(__SIZE_TYPE__ d)\n {\n   typedef int t[d];\n   t *g = (__typeof (g)) d;\n+  (void) g;\n }"}, {"sha": "7bb5088e9e21534ce7e58cf10d7407d0cf9a4e06", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d3aec487a754caa3073b305efca44087189799/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d3aec487a754caa3073b305efca44087189799/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=60d3aec487a754caa3073b305efca44087189799", "patch": "@@ -252,17 +252,17 @@ typedef struct immediate_use_iterator_d\n /* Use this iterator when simply looking at stmts.  Adding, deleting or\n    modifying stmts will cause this iterator to malfunction.  */\n \n-#define FOR_EACH_IMM_USE_FAST(DEST, ITER, SSAVAR)\t\t\t\\\n+#define FOR_EACH_IMM_USE_FAST(DEST, ITER, SSAVAR)\t\t\\\n   for ((DEST) = first_readonly_imm_use (&(ITER), (SSAVAR));\t\\\n        !end_readonly_imm_use_p (&(ITER));\t\t\t\\\n-       (DEST) = next_readonly_imm_use (&(ITER)))\n+       (void) ((DEST) = next_readonly_imm_use (&(ITER))))\n \n /* Use this iterator to visit each stmt which has a use of SSAVAR.  */\n \n #define FOR_EACH_IMM_USE_STMT(STMT, ITER, SSAVAR)\t\t\\\n   for ((STMT) = first_imm_use_stmt (&(ITER), (SSAVAR));\t\t\\\n        !end_imm_use_stmt_p (&(ITER));\t\t\t\t\\\n-       (STMT) = next_imm_use_stmt (&(ITER)))\n+       (void) ((STMT) = next_imm_use_stmt (&(ITER))))\n \n /* Use this to terminate the FOR_EACH_IMM_USE_STMT loop early.  Failure to\n    do so will result in leaving a iterator marker node in the immediate\n@@ -290,7 +290,7 @@ typedef struct immediate_use_iterator_d\n #define FOR_EACH_IMM_USE_ON_STMT(DEST, ITER)\t\t\t\\\n   for ((DEST) = first_imm_use_on_stmt (&(ITER));\t\t\\\n        !end_imm_use_on_stmt_p (&(ITER));\t\t\t\\\n-       (DEST) = next_imm_use_on_stmt (&(ITER)))\n+       (void) ((DEST) = next_imm_use_on_stmt (&(ITER))))\n \n \n "}, {"sha": "227b06fad85a55b2fc1f1615ca0250c8fcc20860", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d3aec487a754caa3073b305efca44087189799/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d3aec487a754caa3073b305efca44087189799/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=60d3aec487a754caa3073b305efca44087189799", "patch": "@@ -452,8 +452,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n       y_ = VEC_index (int, (GRAPH)->edge_list, x_);\t\t\t\\\n       if (y_ != (NODE))\t\t\t\t\t\t\t\\\n         continue;\t\t\t\t\t\t\t\\\n-      (VAR) = VEC_index (int, (GRAPH)->edge_list, x_ + 1);\t\t\\\n-      (LOCUS) = VEC_index (source_location, (GRAPH)->edge_locus, x_ / 2); \\\n+      (void) ((VAR) = VEC_index (int, (GRAPH)->edge_list, x_ + 1));\t\\\n+      (void) ((LOCUS) = VEC_index (source_location,\t\t\t\\\n+\t\t\t\t   (GRAPH)->edge_locus, x_ / 2));\t\\\n       CODE;\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n } while (0)\n@@ -472,8 +473,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n       y_ = VEC_index (int, (GRAPH)->edge_list, x_ + 1);\t\t\t\\\n       if (y_ != (NODE))\t\t\t\t\t\t\t\\\n         continue;\t\t\t\t\t\t\t\\\n-      (VAR) = VEC_index (int, (GRAPH)->edge_list, x_);\t\t\t\\\n-      (LOCUS) = VEC_index (source_location, (GRAPH)->edge_locus, x_ / 2); \\\n+      (void) ((VAR) = VEC_index (int, (GRAPH)->edge_list, x_));\t\t\\\n+      (void) ((LOCUS) = VEC_index (source_location,\t\t\t\\\n+\t\t\t\t   (GRAPH)->edge_locus, x_ / 2));\t\\\n       CODE;\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n } while (0)"}, {"sha": "13d29c3ab013e94177794486234d8e5b4f54770c", "filename": "gcc/tree-ssa-operands.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d3aec487a754caa3073b305efca44087189799/gcc%2Ftree-ssa-operands.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d3aec487a754caa3073b305efca44087189799/gcc%2Ftree-ssa-operands.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.h?ref=60d3aec487a754caa3073b305efca44087189799", "patch": "@@ -1,5 +1,6 @@\n /* SSA operand management for trees.\n-   Copyright (C) 2003, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2005, 2006, 2007, 2008, 2010\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -160,7 +161,7 @@ typedef struct ssa_operand_iterator_d\n #define FOR_EACH_SSA_TREE_OPERAND(TREEVAR, STMT, ITER, FLAGS)\t\\\n   for (TREEVAR = op_iter_init_tree (&(ITER), STMT, FLAGS);\t\\\n        !op_iter_done (&(ITER));\t\t\t\t\t\\\n-       TREEVAR = op_iter_next_tree (&(ITER)))\n+       (void) (TREEVAR = op_iter_next_tree (&(ITER))))\n \n /* This macro executes a loop over the operands of STMT specified in FLAG,\n    returning each operand as a 'use_operand_p' in the variable USEVAR."}, {"sha": "35ce4ccd0e654b9f8234adc5c131fe629dc69579", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d3aec487a754caa3073b305efca44087189799/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d3aec487a754caa3073b305efca44087189799/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=60d3aec487a754caa3073b305efca44087189799", "patch": "@@ -4498,7 +4498,6 @@ my_rev_post_order_compute (int *post_order, bool include_entry_exit)\n   int sp;\n   int post_order_num = 0;\n   sbitmap visited;\n-  int count;\n \n   if (include_entry_exit)\n     post_order[post_order_num++] = EXIT_BLOCK;\n@@ -4553,12 +4552,7 @@ my_rev_post_order_compute (int *post_order, bool include_entry_exit)\n     }\n \n   if (include_entry_exit)\n-    {\n-      post_order[post_order_num++] = ENTRY_BLOCK;\n-      count = post_order_num;\n-    }\n-  else\n-    count = post_order_num + 2;\n+    post_order[post_order_num++] = ENTRY_BLOCK;\n \n   free (stack);\n   sbitmap_free (visited);"}, {"sha": "5da82069131e5ab3872008bfd4f4129fdfe84baf", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d3aec487a754caa3073b305efca44087189799/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d3aec487a754caa3073b305efca44087189799/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=60d3aec487a754caa3073b305efca44087189799", "patch": "@@ -3652,9 +3652,9 @@ build1_stat (enum tree_code code, tree type, tree node MEM_STAT_DECL)\n \t  side_effects = 1;\t\t\t\\\n         if (!TREE_READONLY (arg##N)\t\t\\\n \t    && !CONSTANT_CLASS_P (arg##N))\t\\\n-\t  read_only = 0;\t\t\t\\\n+\t  (void) (read_only = 0);\t\t\\\n         if (!TREE_CONSTANT (arg##N))\t\t\\\n-\t  constant = 0;\t\t\t\t\\\n+\t  (void) (constant = 0);\t\t\\\n       }\t\t\t\t\t\t\\\n   } while (0)\n "}, {"sha": "4a0fb5e6405ae3e8f913cb93f2755342875a0625", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d3aec487a754caa3073b305efca44087189799/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d3aec487a754caa3073b305efca44087189799/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=60d3aec487a754caa3073b305efca44087189799", "patch": "@@ -1507,9 +1507,9 @@ struct GTY(()) tree_vec {\n #define FOR_EACH_CONSTRUCTOR_ELT(V, IX, INDEX, VAL) \\\n   for (IX = 0; (IX >= VEC_length (constructor_elt, V)) \\\n \t       ? false \\\n-\t       : ((VAL = VEC_index (constructor_elt, V, IX)->value), \\\n+\t       : (((void) (VAL = VEC_index (constructor_elt, V, IX)->value)), \\\n \t\t  (INDEX = VEC_index (constructor_elt, V, IX)->index), \\\n-\t       true); \\\n+\t\t  true); \\\n        (IX)++)\n \n /* Append a new constructor element to V, with the specified INDEX and VAL.  */"}, {"sha": "6abe696187f559c92b6c9ab60cc3b32d0de9424d", "filename": "libffi/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d3aec487a754caa3073b305efca44087189799/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d3aec487a754caa3073b305efca44087189799/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=60d3aec487a754caa3073b305efca44087189799", "patch": "@@ -1,3 +1,8 @@\n+2010-04-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* regex.c (byte_re_match_2_internal): Avoid set but not used\n+\twarning.\n+\n 2010-04-02  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* Makefile.in: Regenerate."}, {"sha": "ce0f3bb278240b2004eb6df78561e43f427db0e1", "filename": "libffi/testsuite/libffi.call/err_bad_abi.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d3aec487a754caa3073b305efca44087189799/libffi%2Ftestsuite%2Flibffi.call%2Ferr_bad_abi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d3aec487a754caa3073b305efca44087189799/libffi%2Ftestsuite%2Flibffi.call%2Ferr_bad_abi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Ferr_bad_abi.c?ref=60d3aec487a754caa3073b305efca44087189799", "patch": "@@ -17,11 +17,9 @@ int main (void)\n \tffi_cif cif;\n         void *code;\n \tffi_closure *pcl = ffi_closure_alloc(sizeof(ffi_closure), &code);\n-\tvoid* args[1];\n \tffi_type* arg_types[1];\n \n \targ_types[0] = NULL;\n-\targs[0] = NULL;\n \n \tCHECK(ffi_prep_cif(&cif, 255, 0, &ffi_type_void,\n \t\targ_types) == FFI_BAD_ABI);"}, {"sha": "420c7f4a47da26537ce0439a4716859c969fbd01", "filename": "libiberty/regex.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d3aec487a754caa3073b305efca44087189799/libiberty%2Fregex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d3aec487a754caa3073b305efca44087189799/libiberty%2Fregex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fregex.c?ref=60d3aec487a754caa3073b305efca44087189799", "patch": "@@ -4,7 +4,7 @@\n    internationalization features.)\n \n    Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,\n-   2002, 2005 Free Software Foundation, Inc.\n+   2002, 2005, 2010 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n \n    The GNU C Library is free software; you can redistribute it and/or\n@@ -7140,8 +7140,8 @@ byte_re_match_2_internal (struct re_pattern_buffer *bufp,\n                register from the stack, since lowest will == highest in\n                `pop_failure_point'.  */\n             active_reg_t dummy_low_reg, dummy_high_reg;\n-            UCHAR_T *pdummy = NULL;\n-            const CHAR_T *sdummy = NULL;\n+            UCHAR_T *pdummy ATTRIBUTE_UNUSED = NULL;\n+            const CHAR_T *sdummy ATTRIBUTE_UNUSED = NULL;\n \n             DEBUG_PRINT1 (\"EXECUTING pop_failure_jump.\\n\");\n             POP_FAILURE_POINT (sdummy, pdummy,"}, {"sha": "dd502d13c092973666c7ef3e772b32ec7965a102", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d3aec487a754caa3073b305efca44087189799/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d3aec487a754caa3073b305efca44087189799/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=60d3aec487a754caa3073b305efca44087189799", "patch": "@@ -1,3 +1,9 @@\n+2010-04-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* exception.cc (_Jv_Throw): Avoid set but not used warning.\n+\t* include/java-assert.h (JvAssertMessage, JvAssert): Use argument in\n+\tsizeof to avoid set but not used warnings.\n+\n 2010-04-07  Jason Merrill  <jason@redhat.com>\n \n \t* gnu/gcj/runtime/natSharedLibLoader.cc (findCore): Move"}, {"sha": "43efda4dc3cfa4ec24158ccbf515f38563f0c44d", "filename": "libjava/classpath/ChangeLog.gcj", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d3aec487a754caa3073b305efca44087189799/libjava%2Fclasspath%2FChangeLog.gcj", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d3aec487a754caa3073b305efca44087189799/libjava%2Fclasspath%2FChangeLog.gcj", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2FChangeLog.gcj?ref=60d3aec487a754caa3073b305efca44087189799", "patch": "@@ -1,3 +1,9 @@\n+2010-04-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* native/jni/midi-alsa/gnu_javax_sound_midi_alsa_AlsaPortDevice.c\n+\t(Java_gnu_javax_sound_midi_alsa_AlsaPortDevice_run_1receiver_1thread_1):\n+\tAvoid set but not used warning.\n+\n 2010-01-09  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gnu/java/rmi/registry/RegistryImpl.java (version): Update"}, {"sha": "d3e4f2b45a0e70b83b78a2ecbab6032dc37b6fc6", "filename": "libjava/classpath/native/jni/midi-alsa/gnu_javax_sound_midi_alsa_AlsaPortDevice.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d3aec487a754caa3073b305efca44087189799/libjava%2Fclasspath%2Fnative%2Fjni%2Fmidi-alsa%2Fgnu_javax_sound_midi_alsa_AlsaPortDevice.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d3aec487a754caa3073b305efca44087189799/libjava%2Fclasspath%2Fnative%2Fjni%2Fmidi-alsa%2Fgnu_javax_sound_midi_alsa_AlsaPortDevice.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fnative%2Fjni%2Fmidi-alsa%2Fgnu_javax_sound_midi_alsa_AlsaPortDevice.c?ref=60d3aec487a754caa3073b305efca44087189799", "patch": "@@ -1,5 +1,5 @@\n /* gnu_javax_sound_midi_alsa_AlsaPortDevice.c - Native support\n-   Copyright (C) 2005 \n+   Copyright (C) 2005, 2010\n    Free Software Foundation, Inc.\n    \n This file is part of GNU Classpath.\n@@ -48,7 +48,6 @@ Java_gnu_javax_sound_midi_alsa_AlsaPortDevice_run_1receiver_1thread_1\n   (JNIEnv *env, jobject this __attribute__((unused)), \n    jlong client, jlong port, jobject receiver)\n {\n-  int rc;\n   snd_seq_port_info_t *pinfo, *sinfo;\n   snd_seq_port_subscribe_t *subs;\n   snd_seq_addr_t sender, dest;\n@@ -58,12 +57,12 @@ Java_gnu_javax_sound_midi_alsa_AlsaPortDevice_run_1receiver_1thread_1\n   snd_seq_port_info_alloca (&sinfo);\n   snd_seq_port_subscribe_alloca (&subs);\n \n-  rc = snd_seq_open (&seq, \"default\", SND_SEQ_OPEN_DUPLEX, SND_SEQ_NONBLOCK);\n+  snd_seq_open (&seq, \"default\", SND_SEQ_OPEN_DUPLEX, SND_SEQ_NONBLOCK);\n \n   snd_seq_port_info_set_capability (pinfo, SND_SEQ_PORT_CAP_WRITE);\n   snd_seq_port_info_set_type (pinfo, SND_SEQ_PORT_TYPE_MIDI_GENERIC);\n \n-  rc = snd_seq_create_port (seq, pinfo);\n+  snd_seq_create_port (seq, pinfo);\n \n   sender.client = (int) client;\n   sender.port = (int) port;\n@@ -72,7 +71,7 @@ Java_gnu_javax_sound_midi_alsa_AlsaPortDevice_run_1receiver_1thread_1\n \n   snd_seq_port_subscribe_set_sender (subs, &sender);\n   snd_seq_port_subscribe_set_dest (subs, &dest);\n-  rc = snd_seq_subscribe_port(seq, subs);\n+  snd_seq_subscribe_port(seq, subs);\n \n   {\n     int npfd;"}, {"sha": "76f145112ff542d18106a233ec80ca389d7835fd", "filename": "libjava/exception.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d3aec487a754caa3073b305efca44087189799/libjava%2Fexception.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d3aec487a754caa3073b305efca44087189799/libjava%2Fexception.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fexception.cc?ref=60d3aec487a754caa3073b305efca44087189799", "patch": "@@ -1,6 +1,6 @@\n // Functions for Exception Support for Java.\n \n-/* Copyright (C) 1998, 1999, 2001, 2002, 2006  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2001, 2002, 2006, 2010  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -111,11 +111,10 @@ _Jv_Throw (jthrowable value)\n \n   /* We're happy with setjmp/longjmp exceptions or region-based\n      exception handlers: entry points are provided here for both.  */\n-  _Unwind_Reason_Code code;\n #ifdef SJLJ_EXCEPTIONS\n-  code = _Unwind_SjLj_RaiseException (&xh->unwindHeader);\n+  _Unwind_SjLj_RaiseException (&xh->unwindHeader);\n #else\n-  code = _Unwind_RaiseException (&xh->unwindHeader);\n+  _Unwind_RaiseException (&xh->unwindHeader);\n #endif\n \n   /* If code == _URC_END_OF_STACK, then we reached top of stack without"}, {"sha": "1d3a49bfa384545f88a53f895cbdc0028050362c", "filename": "libjava/include/java-assert.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d3aec487a754caa3073b305efca44087189799/libjava%2Finclude%2Fjava-assert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d3aec487a754caa3073b305efca44087189799/libjava%2Finclude%2Fjava-assert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjava-assert.h?ref=60d3aec487a754caa3073b305efca44087189799", "patch": "@@ -1,6 +1,6 @@\n // java-assert.h - Header file holding assertion definitions.  -*- c++ -*-\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2010  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -29,8 +29,8 @@ void _Jv_Abort (const char *, const char *, int, const char *)\n #else /* __GCJ_DEBUG */\n \n #define _Jv_AssertDoCall(Message)\n-#define JvAssertMessage(Expr, Message)\n-#define JvAssert(Expr)\n+#define JvAssertMessage(Expr, Message) (void) sizeof (Expr)\n+#define JvAssert(Expr) (void) sizeof (Expr)\n #define JvFail(Message) _Jv_Abort (0, 0, 0, Message)\n \n #endif /* not __GCJ_DEBUG */"}]}