{"sha": "5e77eb534bb84d6afdf489f007079ce90fcf8b9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU3N2ViNTM0YmI4NGQ2YWZkZjQ4OWYwMDcwNzljZTkwZmNmOGI5ZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2005-04-04T15:29:10Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2005-04-04T15:29:10Z"}, "message": "re PR target/20446 (invalid assembly with -gstabs+)\n\n\tPR target/20446\n\t* config/sparc/sparc.h (NEED_INDICATE_EXEC_STACK): Define to 0.\n\t* config/sparc/linux.h (TARGET_ASM_FILE_END): Delete.\n\t(NEED_INDICATE_EXEC_STACK): Define to 1.\n\t* config/sparc/linux64.h (TARGET_ASM_FILE_END): Delete.\n\t(NEED_INDICATE_EXEC_STACK): Define to 1.\n\t* config/sparc/sparc.c (TARGET_ASM_FILE_END): Set to sparc_file_end.\n\t(add_pc_to_pic_symbol): Rename into pic_helper_symbol.\n\t(add_pc_to_pic_symbol_name): Rename into pic_helper_symbol_name.\n\t(pic_helper_emitted_p): New global.\n\t(emit_pic_helper): New function extracted from...\n\t(load_pic_register): ...here.  Add 'delay_pic_helper' parameter.\n\tDo not call emit_pic_helper if delay_pic_helper is true.\n\t(sparc_expand_prologue): Pass 'false' to load_pic_register.\n\t(sparc_output_mi_thunk): Pass 'true' to load_pic_register.\n\t(sparc_file_end): New function.\n\nFrom-SVN: r97550", "tree": {"sha": "2028a54917e7ccf0a6ba2491359034b9451f932b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2028a54917e7ccf0a6ba2491359034b9451f932b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e77eb534bb84d6afdf489f007079ce90fcf8b9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e77eb534bb84d6afdf489f007079ce90fcf8b9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e77eb534bb84d6afdf489f007079ce90fcf8b9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e77eb534bb84d6afdf489f007079ce90fcf8b9d/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "105d7df6509c7048da280cf59ca3cc6a176c4f6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/105d7df6509c7048da280cf59ca3cc6a176c4f6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/105d7df6509c7048da280cf59ca3cc6a176c4f6e"}], "stats": {"total": 127, "additions": 89, "deletions": 38}, "files": [{"sha": "1dc4e5785a002e3a9748a4e713aae2bf1c6ec77a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e77eb534bb84d6afdf489f007079ce90fcf8b9d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e77eb534bb84d6afdf489f007079ce90fcf8b9d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e77eb534bb84d6afdf489f007079ce90fcf8b9d", "patch": "@@ -1,3 +1,22 @@\n+2005-04-04  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR target/20446\n+\t* config/sparc/sparc.h (NEED_INDICATE_EXEC_STACK): Define to 0.\n+\t* config/sparc/linux.h (TARGET_ASM_FILE_END): Delete.\n+\t(NEED_INDICATE_EXEC_STACK): Define to 1.\n+\t* config/sparc/linux64.h (TARGET_ASM_FILE_END): Delete.\n+\t(NEED_INDICATE_EXEC_STACK): Define to 1.\n+\t* config/sparc/sparc.c (TARGET_ASM_FILE_END): Set to sparc_file_end.\n+\t(add_pc_to_pic_symbol): Rename into pic_helper_symbol.\n+\t(add_pc_to_pic_symbol_name): Rename into pic_helper_symbol_name.\n+\t(pic_helper_emitted_p): New global.\n+\t(emit_pic_helper): New function extracted from...\n+\t(load_pic_register): ...here.  Add 'delay_pic_helper' parameter.\n+\tDo not call emit_pic_helper if delay_pic_helper is true.\n+\t(sparc_expand_prologue): Pass 'false' to load_pic_register.\n+\t(sparc_output_mi_thunk): Pass 'true' to load_pic_register.\n+\t(sparc_file_end): New function.\n+\n 2005-04-04  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/mcore/mcore-protos.h: Remove the prototypes for"}, {"sha": "feec79c06b7c2ae880774a9e88da191b9e7446d3", "filename": "gcc/config/sparc/linux.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e77eb534bb84d6afdf489f007079ce90fcf8b9d/gcc%2Fconfig%2Fsparc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e77eb534bb84d6afdf489f007079ce90fcf8b9d/gcc%2Fconfig%2Fsparc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux.h?ref=5e77eb534bb84d6afdf489f007079ce90fcf8b9d", "patch": "@@ -209,8 +209,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef CTORS_SECTION_ASM_OP\n #undef DTORS_SECTION_ASM_OP\n \n-#define TARGET_ASM_FILE_END file_end_indicate_exec_stack\n-\n /* Determine whether the the entire c99 runtime is present in the\n    runtime library.  */\n #define TARGET_C99_FUNCTIONS 1\n@@ -233,3 +231,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n    change their minds.  */\n #undef SPARC_RELAXED_ORDERING\n #define SPARC_RELAXED_ORDERING true\n+\n+#undef NEED_INDICATE_EXEC_STACK\n+#define NEED_INDICATE_EXEC_STACK 1"}, {"sha": "ac3a21ac877dd912bc64a66b807e936c41a29962", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e77eb534bb84d6afdf489f007079ce90fcf8b9d/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e77eb534bb84d6afdf489f007079ce90fcf8b9d/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=5e77eb534bb84d6afdf489f007079ce90fcf8b9d", "patch": "@@ -343,8 +343,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef CTORS_SECTION_ASM_OP\n #undef DTORS_SECTION_ASM_OP\n \n-#define TARGET_ASM_FILE_END file_end_indicate_exec_stack\n-\n /* Determine whether the the entire c99 runtime is present in the\n    runtime library.  */\n #define TARGET_C99_FUNCTIONS 1\n@@ -367,3 +365,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n    change their minds.  */\n #undef SPARC_RELAXED_ORDERING\n #define SPARC_RELAXED_ORDERING true\n+\n+#undef NEED_INDICATE_EXEC_STACK\n+#define NEED_INDICATE_EXEC_STACK 1"}, {"sha": "7919254f7e6f5bf58a866cc3355bb39d22e86132", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 61, "deletions": 34, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e77eb534bb84d6afdf489f007079ce90fcf8b9d/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e77eb534bb84d6afdf489f007079ce90fcf8b9d/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=5e77eb534bb84d6afdf489f007079ce90fcf8b9d", "patch": "@@ -314,7 +314,8 @@ static rtx sparc_builtin_saveregs (void);\n static int epilogue_renumber (rtx *, int);\n static bool sparc_assemble_integer (rtx, unsigned int, int);\n static int set_extends (rtx);\n-static void load_pic_register (void);\n+static void emit_pic_helper (void);\n+static void load_pic_register (bool);\n static int save_or_restore_regs (int, int, rtx, int, int);\n static void emit_save_regs (void);\n static void emit_restore_regs (void);\n@@ -362,6 +363,7 @@ static bool sparc_pass_by_reference (CUMULATIVE_ARGS *,\n static int sparc_arg_partial_bytes (CUMULATIVE_ARGS *,\n \t\t\t\t    enum machine_mode, tree, bool);\n static void sparc_dwarf_handle_frame_unspec (const char *, rtx, int);\n+static void sparc_file_end (void);\n #ifdef SUBTARGET_ATTRIBUTE_TABLE\n const struct attribute_spec sparc_attribute_table[];\n #endif\n@@ -504,6 +506,8 @@ enum processor_type sparc_cpu;\n #undef TARGET_RELAXED_ORDERING\n #define TARGET_RELAXED_ORDERING SPARC_RELAXED_ORDERING\n \n+#define TARGET_ASM_FILE_END sparc_file_end\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Validate and override various options, and do some machine dependent\n@@ -3355,13 +3359,12 @@ sparc_cannot_force_const_mem (rtx x)\n     }\n }\n \f\n-/* The table we use to reference PIC data.  */\n+/* PIC support.  */\n+static GTY(()) char pic_helper_symbol_name[256];\n+static GTY(()) rtx pic_helper_symbol;\n+static GTY(()) bool pic_helper_emitted_p = false;\n static GTY(()) rtx global_offset_table;\n \n-/* The function we use to get at it.  */\n-static GTY(()) rtx add_pc_to_pic_symbol;\n-static GTY(()) char add_pc_to_pic_symbol_name[256];\n-\n /* Ensure that we are not using patterns that are not OK with PIC.  */\n \n int\n@@ -3951,46 +3954,57 @@ legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED, enum machine_mode mode)\n   return x;\n }\n \n-/* Emit the special PIC prologue.  */\n+/* Emit the special PIC helper function.  */\n \n static void\n-load_pic_register (void)\n+emit_pic_helper (void)\n {\n-  int orig_flag_pic = flag_pic;\n+  const char *pic_name = reg_names[REGNO (pic_offset_table_rtx)];\n+  int align;\n \n-  /* If we haven't emitted the special helper function, do so now.  */\n-  if (add_pc_to_pic_symbol_name[0] == 0)\n-    {\n-      const char *pic_name = reg_names[REGNO (pic_offset_table_rtx)];\n-      int align;\n+  text_section ();\n \n-      ASM_GENERATE_INTERNAL_LABEL (add_pc_to_pic_symbol_name, \"LADDPC\", 0);\n-      text_section ();\n+  align = floor_log2 (FUNCTION_BOUNDARY / BITS_PER_UNIT);\n+  if (align > 0)\n+    ASM_OUTPUT_ALIGN (asm_out_file, align);\n+  ASM_OUTPUT_LABEL (asm_out_file, pic_helper_symbol_name);\n+  if (flag_delayed_branch)\n+    fprintf (asm_out_file, \"\\tjmp\\t%%o7+8\\n\\t add\\t%%o7, %s, %s\\n\",\n+\t    pic_name, pic_name);\n+  else\n+    fprintf (asm_out_file, \"\\tadd\\t%%o7, %s, %s\\n\\tjmp\\t%%o7+8\\n\\t nop\\n\",\n+\t    pic_name, pic_name);\n \n-      align = floor_log2 (FUNCTION_BOUNDARY / BITS_PER_UNIT);\n-      if (align > 0)\n-\tASM_OUTPUT_ALIGN (asm_out_file, align);\n-      ASM_OUTPUT_LABEL (asm_out_file, add_pc_to_pic_symbol_name);\n-      if (flag_delayed_branch)\n-\tfprintf (asm_out_file, \"\\tjmp %%o7+8\\n\\t add\\t%%o7, %s, %s\\n\",\n-\t\t pic_name, pic_name);\n-      else\n-\tfprintf (asm_out_file, \"\\tadd\\t%%o7, %s, %s\\n\\tjmp %%o7+8\\n\\t nop\\n\",\n-\t\t pic_name, pic_name);\n+  pic_helper_emitted_p = true;\n+}\n+\n+/* Emit code to load the PIC register.  */\n+\n+static void\n+load_pic_register (bool delay_pic_helper)\n+{\n+  int orig_flag_pic = flag_pic;\n+\n+  /* If we haven't initialized the special PIC symbols, do so now.  */\n+  if (!pic_helper_symbol_name[0])\n+    {\n+      ASM_GENERATE_INTERNAL_LABEL (pic_helper_symbol_name, \"LADDPC\", 0);\n+      pic_helper_symbol = gen_rtx_SYMBOL_REF (Pmode, pic_helper_symbol_name);\n+      global_offset_table = gen_rtx_SYMBOL_REF (Pmode, \"_GLOBAL_OFFSET_TABLE_\");\n     }\n \n-  /* Initialize every time through, since we can't easily\n-     know this to be permanent.  */\n-  global_offset_table = gen_rtx_SYMBOL_REF (Pmode, \"_GLOBAL_OFFSET_TABLE_\");\n-  add_pc_to_pic_symbol = gen_rtx_SYMBOL_REF (Pmode, add_pc_to_pic_symbol_name);\n+  /* If we haven't emitted the special PIC helper function, do so now unless\n+     we are requested to delay it.  */\n+  if (!delay_pic_helper && !pic_helper_emitted_p)\n+    emit_pic_helper ();\n \n   flag_pic = 0;\n   if (TARGET_ARCH64)\n     emit_insn (gen_load_pcrel_symdi (pic_offset_table_rtx, global_offset_table,\n-\t\t\t\t     add_pc_to_pic_symbol));\n+\t\t\t\t     pic_helper_symbol));\n   else\n     emit_insn (gen_load_pcrel_symsi (pic_offset_table_rtx, global_offset_table,\n-\t\t\t\t     add_pc_to_pic_symbol));\n+\t\t\t\t     pic_helper_symbol));\n   flag_pic = orig_flag_pic;\n \n   /* Need to emit this whether or not we obey regdecls,\n@@ -4639,7 +4653,7 @@ sparc_expand_prologue (void)\n \n   /* Load the PIC register if needed.  */\n   if (flag_pic && current_function_uses_pic_offset_table)\n-    load_pic_register ();\n+    load_pic_register (false);\n }\n  \n /* This function generates the assembly code for function entry, which boils\n@@ -9060,7 +9074,9 @@ sparc_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n         {\n \t  spill_reg = gen_rtx_REG (word_mode, 15);  /* %o7 */\n \t  start_sequence ();\n-\t  load_pic_register ();  /* clobbers %o7 */\n+\t  /* Delay emitting the PIC helper function because it needs to\n+\t     change the section and we are emitting assembly code.  */\n+\t  load_pic_register (true);  /* clobbers %o7 */\n \t  scratch = legitimize_pic_address (funexp, Pmode, scratch);\n \t  seq = get_insns ();\n \t  end_sequence ();\n@@ -9211,4 +9227,15 @@ sparc_output_dwarf_dtprel (FILE *file, int size, rtx x)\n   fputs (\")\", file);\n }\n \n+static\n+void sparc_file_end (void)\n+{\n+  /* If we haven't emitted the special PIC helper function, do so now.  */\n+  if (pic_helper_symbol_name[0] && !pic_helper_emitted_p)\n+    emit_pic_helper ();\n+\n+  if (NEED_INDICATE_EXEC_STACK)\n+    file_end_indicate_exec_stack ();\n+}\n+\n #include \"gt-sparc.h\""}, {"sha": "0a091a6ac98dde439011dfa6ff8eb413f007b965", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e77eb534bb84d6afdf489f007079ce90fcf8b9d/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e77eb534bb84d6afdf489f007079ce90fcf8b9d/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=5e77eb534bb84d6afdf489f007079ce90fcf8b9d", "patch": "@@ -214,6 +214,9 @@ extern enum cmodel sparc_cmodel;\n    total memory ordering (TMO).  */\n #define SPARC_RELAXED_ORDERING false\n \n+/* Do not use the .note.GNU-stack convention by default.  */\n+#define NEED_INDICATE_EXEC_STACK 0\n+\n /* This is call-clobbered in the normal ABI, but is reserved in the\n    home grown (aka upward compatible) embedded ABI.  */\n #define EMBMEDANY_BASE_REG \"%g4\""}]}