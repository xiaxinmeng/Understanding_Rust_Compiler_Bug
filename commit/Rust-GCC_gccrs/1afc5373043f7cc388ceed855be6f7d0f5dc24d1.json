{"sha": "1afc5373043f7cc388ceed855be6f7d0f5dc24d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFmYzUzNzMwNDNmN2NjMzg4Y2VlZDg1NWJlNmY3ZDBmNWRjMjRkMQ==", "commit": {"author": {"name": "Chao-ying Fu", "email": "fu@mips.com", "date": "2009-04-10T18:20:22Z"}, "committer": {"name": "Chao-ying Fu", "email": "chaoyingfu@gcc.gnu.org", "date": "2009-04-10T18:20:22Z"}, "message": "tm.texi (Instruction Output): Document TARGET_ASM_FINAL_POSTSCAN_INSN.\n\n2009-04-10  Chao-ying Fu  <fu@mips.com>\n\n\t* doc/tm.texi (Instruction Output): Document\n\tTARGET_ASM_FINAL_POSTSCAN_INSN.\n\t* target.h (final_postscan_insn): New field in asm_out.\n\t* target-def.h (TARGET_ASM_FINAL_POSTSCAN_INSN): New define.\n\t(TARGET_ASM_OUT): Add TARGET_ASM_FINAL_POSTSCAN_INSN.\n\t* final.c (final_scan_insn): Call\n\ttargetm.asm_out.final_postscan_insn after outputting\n\tan asm macro and a normal instruction.\n\n\t* config/mips/mips.h (FINAL_PRESCAN_INSN): New define.\n\t* config/mips/mips-protos.h (mips_final_prescan_insn): Declare.\n\t* config/mips/mips.c (mips_at_reg_p): New for_each_rtx callback.\n\t(mips_final_prescan_insn, mips_final_postscan_insn): New functions.\n\t(TARGET_ASM_FINAL_POSTSCAN_INSN): New define.\n\nFrom-SVN: r145934", "tree": {"sha": "6e37fe7e1f86ddb16c584d6ceb5493f7b05e1620", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e37fe7e1f86ddb16c584d6ceb5493f7b05e1620"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1afc5373043f7cc388ceed855be6f7d0f5dc24d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1afc5373043f7cc388ceed855be6f7d0f5dc24d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1afc5373043f7cc388ceed855be6f7d0f5dc24d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1afc5373043f7cc388ceed855be6f7d0f5dc24d1/comments", "author": null, "committer": null, "parents": [{"sha": "aa070a60c3bdc70201b0fdc44da357cab854a50f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa070a60c3bdc70201b0fdc44da357cab854a50f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa070a60c3bdc70201b0fdc44da357cab854a50f"}], "stats": {"total": 96, "additions": 95, "deletions": 1}, "files": [{"sha": "9965730d1347c4e278ac6b6a4cd4593255a4c005", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1afc5373043f7cc388ceed855be6f7d0f5dc24d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1afc5373043f7cc388ceed855be6f7d0f5dc24d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1afc5373043f7cc388ceed855be6f7d0f5dc24d1", "patch": "@@ -1,3 +1,20 @@\n+2009-04-10  Chao-ying Fu  <fu@mips.com>\n+\n+\t* doc/tm.texi (Instruction Output): Document\n+\tTARGET_ASM_FINAL_POSTSCAN_INSN.\n+\t* target.h (final_postscan_insn): New field in asm_out.\n+\t* target-def.h (TARGET_ASM_FINAL_POSTSCAN_INSN): New define.\n+\t(TARGET_ASM_OUT): Add TARGET_ASM_FINAL_POSTSCAN_INSN.\n+\t* final.c (final_scan_insn): Call\n+\ttargetm.asm_out.final_postscan_insn after outputting\n+\tan asm macro and a normal instruction.\n+\n+\t* config/mips/mips.h (FINAL_PRESCAN_INSN): New define.\n+\t* config/mips/mips-protos.h (mips_final_prescan_insn): Declare.\n+\t* config/mips/mips.c (mips_at_reg_p): New for_each_rtx callback.\n+\t(mips_final_prescan_insn, mips_final_postscan_insn): New functions.\n+\t(TARGET_ASM_FINAL_POSTSCAN_INSN): New define.\n+\n 2009-04-10  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR middle-end/39701"}, {"sha": "1f8054ede9c94b8ac63a023c40d898ee79edfcb7", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1afc5373043f7cc388ceed855be6f7d0f5dc24d1/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1afc5373043f7cc388ceed855be6f7d0f5dc24d1/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=1afc5373043f7cc388ceed855be6f7d0f5dc24d1", "patch": "@@ -333,5 +333,6 @@ extern void mips_expand_atomic_qihi (union mips_gen_fn_ptrs,\n extern void mips_expand_vector_init (rtx, rtx);\n \n extern bool mips_epilogue_uses (unsigned int);\n+extern void mips_final_prescan_insn (rtx, rtx *, int);\n \n #endif /* ! GCC_MIPS_PROTOS_H */"}, {"sha": "0b51c78f576707b95b65f8c04fd1e099f7abf294", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1afc5373043f7cc388ceed855be6f7d0f5dc24d1/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1afc5373043f7cc388ceed855be6f7d0f5dc24d1/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=1afc5373043f7cc388ceed855be6f7d0f5dc24d1", "patch": "@@ -14697,6 +14697,46 @@ mips_epilogue_uses (unsigned int regno)\n \n   return false;\n }\n+\n+/* A for_each_rtx callback.  Stop the search if *X is an AT register.  */\n+\n+static int\n+mips_at_reg_p (rtx *x, void *data ATTRIBUTE_UNUSED)\n+{\n+  return GET_CODE (*x) == REG && REGNO (*x) == AT_REGNUM;\n+}\n+\n+\n+/* Implement FINAL_PRESCAN_INSN.  */\n+\n+void\n+mips_final_prescan_insn (rtx insn, rtx *opvec, int noperands)\n+{\n+  int i;\n+\n+  /* We need to emit \".set noat\" before an instruction that accesses\n+     $1 (AT).  */\n+  if (recog_memoized (insn) >= 0)\n+    for (i = 0; i < noperands; i++)\n+      if (for_each_rtx (&opvec[i], mips_at_reg_p, NULL))\n+\tif (set_noat++ == 0)\n+\t  fprintf (asm_out_file, \"\\t.set\\tnoat\\n\");\n+}\n+\n+/* Implement TARGET_ASM_FINAL_POSTSCAN_INSN.  */\n+\n+void\n+mips_final_postscan_insn (FILE *file, rtx insn, rtx *opvec, int noperands)\n+{\n+  int i;\n+\n+  /* Close any \".set noat\" block opened by mips_final_prescan_insn.  */\n+  if (recog_memoized (insn) >= 0)\n+    for (i = 0; i < noperands; i++)\n+      if (for_each_rtx (&opvec[i], mips_at_reg_p, NULL))\n+\tif (--set_noat == 0)\n+\t  fprintf (file, \"\\t.set\\tat\\n\");\n+}\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n@@ -14865,6 +14905,9 @@ mips_epilogue_uses (unsigned int regno)\n #undef TARGET_IRA_COVER_CLASSES\n #define TARGET_IRA_COVER_CLASSES mips_ira_cover_classes\n \n+#undef TARGET_ASM_FINAL_POSTSCAN_INSN\n+#define TARGET_ASM_FINAL_POSTSCAN_INSN mips_final_postscan_insn\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n #include \"gt-mips.h\""}, {"sha": "45971acf08a4e5b86f13d542655a2e78ce71f7d4", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1afc5373043f7cc388ceed855be6f7d0f5dc24d1/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1afc5373043f7cc388ceed855be6f7d0f5dc24d1/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=1afc5373043f7cc388ceed855be6f7d0f5dc24d1", "patch": "@@ -3459,3 +3459,6 @@ extern enum mips_code_readable_setting mips_code_readable;\n \n /* Enable querying of DFA units.  */\n #define CPU_UNITS_QUERY 1\n+\n+#define FINAL_PRESCAN_INSN(INSN, OPVEC, NOPERANDS)\t\\\n+  mips_final_prescan_insn (INSN, OPVEC, NOPERANDS)"}, {"sha": "0396a706cf73250bee406e01081110c60a41df27", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1afc5373043f7cc388ceed855be6f7d0f5dc24d1/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1afc5373043f7cc388ceed855be6f7d0f5dc24d1/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=1afc5373043f7cc388ceed855be6f7d0f5dc24d1", "patch": "@@ -8193,6 +8193,19 @@ writing conditional output routines in those patterns.\n If this macro is not defined, it is equivalent to a null statement.\n @end defmac\n \n+@deftypefn {Target Hook} void TARGET_ASM_FINAL_POSTSCAN_INSN (FILE *@var{FILE}, rtx @var{insn}, rtx *@var{opvec}, int @var{noperands})\n+If defined, this target hook is a function which is executed just after the\n+output of assembler code for @var{insn}, to change the mode of the assembler\n+if necessary.\n+\n+Here the argument @var{opvec} is the vector containing the operands\n+extracted from @var{insn}, and @var{noperands} is the number of\n+elements of the vector which contain meaningful data for this insn.\n+The contents of this vector are what was used to convert the insn\n+template into assembler code, so you can change the assembler mode\n+by checking the contents of the vector.\n+@end deftypefn\n+\n @defmac PRINT_OPERAND (@var{stream}, @var{x}, @var{code})\n A C compound statement to output to stdio stream @var{stream} the\n assembler syntax for an instruction operand @var{x}.  @var{x} is an"}, {"sha": "32d6b74e8f11f36ac3c4f13ea2980a0016d8e1f6", "filename": "gcc/final.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1afc5373043f7cc388ceed855be6f7d0f5dc24d1/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1afc5373043f7cc388ceed855be6f7d0f5dc24d1/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=1afc5373043f7cc388ceed855be6f7d0f5dc24d1", "patch": "@@ -2235,6 +2235,10 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n #endif\n \t      }\n \n+\t    if (targetm.asm_out.final_postscan_insn)\n+\t      targetm.asm_out.final_postscan_insn (file, insn, ops,\n+\t\t\t\t\t\t   insn_noperands);\n+\n \t    this_is_asm_operands = 0;\n \t    break;\n \t  }\n@@ -2637,6 +2641,12 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t/* Output assembler code from the template.  */\n \toutput_asm_insn (templ, recog_data.operand);\n \n+\t/* Some target machines need to postscan each insn after\n+\t   it is output.  */\n+\tif (targetm.asm_out.final_postscan_insn)\n+\t  targetm.asm_out.final_postscan_insn (file, insn, recog_data.operand,\n+\t\t\t\t\t       recog_data.n_operands);\n+\n \t/* If necessary, report the effect that the instruction has on\n \t   the unwind info.   We've already done this for delay slots\n \t   and call instructions.  */"}, {"sha": "9e6693bbb88506a58f891fce50925ffcd0adf82d", "filename": "gcc/target-def.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1afc5373043f7cc388ceed855be6f7d0f5dc24d1/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1afc5373043f7cc388ceed855be6f7d0f5dc24d1/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=1afc5373043f7cc388ceed855be6f7d0f5dc24d1", "patch": "@@ -236,6 +236,10 @@\n #define TARGET_ASM_OUTPUT_DWARF_DTPREL NULL\n #endif\n \n+#ifndef TARGET_ASM_FINAL_POSTSCAN_INSN\n+#define TARGET_ASM_FINAL_POSTSCAN_INSN NULL\n+#endif\n+\n #ifndef TARGET_ASM_RECORD_GCC_SWITCHES\n #define TARGET_ASM_RECORD_GCC_SWITCHES NULL\n #endif\n@@ -291,7 +295,8 @@\n \t\t\tTARGET_ASM_RECORD_GCC_SWITCHES,\t\t\\\n \t\t\tTARGET_ASM_RECORD_GCC_SWITCHES_SECTION,\t\\\n \t\t\tTARGET_ASM_OUTPUT_ANCHOR,\t\t\\\n-\t\t\tTARGET_ASM_OUTPUT_DWARF_DTPREL}\n+\t\t\tTARGET_ASM_OUTPUT_DWARF_DTPREL,\t\t\\\n+\t\t\tTARGET_ASM_FINAL_POSTSCAN_INSN}\n \n /* Scheduler hooks.  All of these default to null pointers, which\n    haifa-sched.c looks for and handles.  */"}, {"sha": "a520e1c5765265399bbe9a202053e3eaaa1cbd75", "filename": "gcc/target.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1afc5373043f7cc388ceed855be6f7d0f5dc24d1/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1afc5373043f7cc388ceed855be6f7d0f5dc24d1/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=1afc5373043f7cc388ceed855be6f7d0f5dc24d1", "patch": "@@ -245,6 +245,8 @@ struct gcc_target\n     /* Output a DTP-relative reference to a TLS symbol.  */\n     void (*output_dwarf_dtprel) (FILE *file, int size, rtx x);\n \n+    /* Some target machines need to postscan each insn after it is output.  */\n+    void (*final_postscan_insn) (FILE *, rtx, rtx *, int);\n   } asm_out;\n \n   /* Functions relating to instruction scheduling.  */"}]}