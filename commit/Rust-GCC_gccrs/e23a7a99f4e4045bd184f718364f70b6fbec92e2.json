{"sha": "e23a7a99f4e4045bd184f718364f70b6fbec92e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIzYTdhOTlmNGU0MDQ1YmQxODRmNzE4MzY0ZjcwYjZmYmVjOTJlMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-08-12T08:53:07Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-08-12T08:53:07Z"}, "message": "re PR sanitizer/71042 (libtsan requires __pointer_chk_guard@GLIBC_PRIVATE (6))\n\n\tPR sanitizer/71042\n\t* tsan/tsan_platform_linux.cc: Cherry-pick upstream r278292.\n\t* tsan/tsan_rtl_aarch64.S: Likewise.\n\nFrom-SVN: r239407", "tree": {"sha": "eb663ab2fde7309058263f4a56e87a97f66cebd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb663ab2fde7309058263f4a56e87a97f66cebd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e23a7a99f4e4045bd184f718364f70b6fbec92e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e23a7a99f4e4045bd184f718364f70b6fbec92e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e23a7a99f4e4045bd184f718364f70b6fbec92e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e23a7a99f4e4045bd184f718364f70b6fbec92e2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8df06bd0eb37240c40140bf2d2528ad6a665474a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8df06bd0eb37240c40140bf2d2528ad6a665474a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8df06bd0eb37240c40140bf2d2528ad6a665474a"}], "stats": {"total": 92, "additions": 80, "deletions": 12}, "files": [{"sha": "d9eb7fa3bd2f6900a92cf6fc3cf9766e98ba5880", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23a7a99f4e4045bd184f718364f70b6fbec92e2/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23a7a99f4e4045bd184f718364f70b6fbec92e2/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=e23a7a99f4e4045bd184f718364f70b6fbec92e2", "patch": "@@ -1,3 +1,9 @@\n+2016-08-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/71042\n+\t* tsan/tsan_platform_linux.cc: Cherry-pick upstream r278292.\n+\t* tsan/tsan_rtl_aarch64.S: Likewise.\n+\n 2016-07-23  Alan Modra  <amodra@gmail.com>\n \n \tRevert 2015-11-09  Alan Modra  <amodra@gmail.com>"}, {"sha": "09cec5fdffda2d3f4dd0f331f8bf1ccf4551a250", "filename": "libsanitizer/tsan/tsan_platform_linux.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23a7a99f4e4045bd184f718364f70b6fbec92e2/libsanitizer%2Ftsan%2Ftsan_platform_linux.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23a7a99f4e4045bd184f718364f70b6fbec92e2/libsanitizer%2Ftsan%2Ftsan_platform_linux.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Ftsan%2Ftsan_platform_linux.cc?ref=e23a7a99f4e4045bd184f718364f70b6fbec92e2", "patch": "@@ -60,6 +60,10 @@ extern \"C\" void *__libc_stack_end;\n void *__libc_stack_end = 0;\n #endif\n \n+#if SANITIZER_LINUX && defined(__aarch64__)\n+void InitializeGuardPtr() __attribute__((visibility(\"hidden\")));\n+#endif\n+\n namespace __tsan {\n \n static uptr g_data_start;\n@@ -261,6 +265,10 @@ void InitializePlatform() {\n       SetAddressSpaceUnlimited();\n       reexec = true;\n     }\n+#if SANITIZER_LINUX && defined(__aarch64__)\n+    // Initialize the guard pointer used in {sig}{set,long}jump.\n+    InitializeGuardPtr();\n+#endif\n     if (reexec)\n       ReExec();\n   }"}, {"sha": "ef06f0444ae4ac2339963a252361d4bf2113330a", "filename": "libsanitizer/tsan/tsan_rtl_aarch64.S", "status": "modified", "additions": 66, "deletions": 12, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23a7a99f4e4045bd184f718364f70b6fbec92e2/libsanitizer%2Ftsan%2Ftsan_rtl_aarch64.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23a7a99f4e4045bd184f718364f70b6fbec92e2/libsanitizer%2Ftsan%2Ftsan_rtl_aarch64.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Ftsan%2Ftsan_rtl_aarch64.S?ref=e23a7a99f4e4045bd184f718364f70b6fbec92e2", "patch": "@@ -1,4 +1,62 @@\n #include \"sanitizer_common/sanitizer_asm.h\"\n+\n+.section .bss\n+.type\t__tsan_pointer_chk_guard, %object\n+.size\t__tsan_pointer_chk_guard, 8\n+__tsan_pointer_chk_guard:\n+.zero\t8\n+\n+.section .text\n+\n+// GLIBC mangles the function pointers in jmp_buf (used in {set,long}*jmp\n+// functions) by XORing them with a random guard pointer.  For AArch64 it is a\n+// global variable rather than a TCB one (as for x86_64/powerpc) and althought\n+// its value is exported by the loader, it lies within a private GLIBC\n+// namespace (meaning it should be only used by GLIBC itself and the ABI is\n+// not stable). So InitializeGuardPtr obtains the pointer guard value by\n+// issuing a setjmp and checking the resulting pointers values against the\n+// original ones.\n+.hidden _Z18InitializeGuardPtrv\n+.global _Z18InitializeGuardPtrv\n+.type _Z18InitializeGuardPtrv, @function\n+_Z18InitializeGuardPtrv:\n+  CFI_STARTPROC\n+  // Allocates a jmp_buf for the setjmp call.\n+  stp\tx29, x30, [sp, -336]!\n+  CFI_DEF_CFA_OFFSET (336)\n+  CFI_OFFSET (29, -336)\n+  CFI_OFFSET (30, -328)\n+  add\tx29, sp, 0\n+  CFI_DEF_CFA_REGISTER (29)\n+  add\tx0, x29, 24\n+\n+  // Call libc setjmp that mangle the stack pointer value\n+  adrp  x1, :got:_ZN14__interception12real__setjmpE\n+  ldr   x1, [x1, #:got_lo12:_ZN14__interception12real__setjmpE]\n+  ldr   x1, [x1]\n+  blr   x1\n+\n+  // glibc setjmp mangles both the frame pointer (FP, pc+4 on blr) and the\n+  // stack pointer (SP). FP will be placed on ((uintptr*)jmp_buf)[11] and\n+  // SP at ((uintptr*)jmp_buf)[13].\n+  // The mangle operation is just 'value' xor 'pointer guard value' and\n+  // if we know the original value (SP) and the expected one, we can derive\n+  // the guard pointer value.\n+  mov\tx0, sp\n+\n+  // Loads the mangled SP pointer.\n+  ldr\tx1, [x29, 128]\n+  eor\tx0, x0, x1\n+  adrp\tx2, __tsan_pointer_chk_guard\n+  str\tx0, [x2, #:lo12:__tsan_pointer_chk_guard]\n+  ldp\tx29, x30, [sp], 336\n+  CFI_RESTORE (30)\n+  CFI_RESTORE (19)\n+  CFI_DEF_CFA (31, 0)\n+  ret\n+  CFI_ENDPROC\n+.size _Z18InitializeGuardPtrv, .-_Z18InitializeGuardPtrv\n+\n .hidden __tsan_setjmp\n .comm _ZN14__interception11real_setjmpE,8,8\n .type setjmp, @function\n@@ -21,10 +79,9 @@ setjmp:\n   mov     x19, x0\n \n   // SP pointer mangling (see glibc setjmp)\n-  adrp    x2, :got:__pointer_chk_guard\n-  ldr     x2, [x2, #:got_lo12:__pointer_chk_guard]\n+  adrp    x2, __tsan_pointer_chk_guard\n+  ldr     x2, [x2, #:lo12:__tsan_pointer_chk_guard]\n   add     x0, x29, 32\n-  ldr     x2, [x2]\n   eor     x1, x2, x0\n \n   // call tsan interceptor\n@@ -69,10 +126,9 @@ _setjmp:\n   mov     x19, x0\n \n   // SP pointer mangling (see glibc setjmp)\n-  adrp    x2, :got:__pointer_chk_guard\n-  ldr     x2, [x2, #:got_lo12:__pointer_chk_guard]\n+  adrp    x2, __tsan_pointer_chk_guard\n+  ldr     x2, [x2, #:lo12:__tsan_pointer_chk_guard]\n   add     x0, x29, 32\n-  ldr     x2, [x2]\n   eor     x1, x2, x0\n \n   // call tsan interceptor\n@@ -119,10 +175,9 @@ sigsetjmp:\n   mov     x19, x0\n \n   // SP pointer mangling (see glibc setjmp)\n-  adrp    x2, :got:__pointer_chk_guard\n-  ldr     x2, [x2, #:got_lo12:__pointer_chk_guard]\n+  adrp    x2, __tsan_pointer_chk_guard\n+  ldr     x2, [x2, #:lo12:__tsan_pointer_chk_guard]\n   add     x0, x29, 32\n-  ldr     x2, [x2]\n   eor     x1, x2, x0\n \n   // call tsan interceptor\n@@ -171,10 +226,9 @@ __sigsetjmp:\n   mov     x19, x0\n \n   // SP pointer mangling (see glibc setjmp)\n-  adrp    x2, :got:__pointer_chk_guard\n-  ldr     x2, [x2, #:got_lo12:__pointer_chk_guard]\n+  adrp    x2, __tsan_pointer_chk_guard\n+  ldr     x2, [x2, #:lo12:__tsan_pointer_chk_guard]\n   add     x0, x29, 32\n-  ldr     x2, [x2]\n   eor     x1, x2, x0\n \n   // call tsan interceptor"}]}