{"sha": "fc544c8180f2ce4f98dbce18fcf1702b9a686ca6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM1NDRjODE4MGYyY2U0Zjk4ZGJjZTE4ZmNmMTcwMmI5YTY4NmNhNg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2005-02-19T05:17:14Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2005-02-19T05:17:14Z"}, "message": "link.cc (make_vtable): Remove abstract method check.\n\n\t* link.cc (make_vtable): Remove abstract method check.\n\t(append_partial_itable): Likewise.\n\nFrom-SVN: r95268", "tree": {"sha": "ed086e80e752f7828fc57f7d95d7b29c077ac57a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed086e80e752f7828fc57f7d95d7b29c077ac57a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc544c8180f2ce4f98dbce18fcf1702b9a686ca6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc544c8180f2ce4f98dbce18fcf1702b9a686ca6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc544c8180f2ce4f98dbce18fcf1702b9a686ca6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc544c8180f2ce4f98dbce18fcf1702b9a686ca6/comments", "author": null, "committer": null, "parents": [{"sha": "e022a6cb913fe7e2be222ab6954b6574a037ed4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e022a6cb913fe7e2be222ab6954b6574a037ed4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e022a6cb913fe7e2be222ab6954b6574a037ed4f"}], "stats": {"total": 54, "additions": 19, "deletions": 35}, "files": [{"sha": "82f40f6ad253d7e0b533e0089252ca7aa5450053", "filename": "libjava/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc544c8180f2ce4f98dbce18fcf1702b9a686ca6/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc544c8180f2ce4f98dbce18fcf1702b9a686ca6/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=fc544c8180f2ce4f98dbce18fcf1702b9a686ca6", "patch": "@@ -1,5 +1,8 @@\n 2005-02-18  Tom Tromey  <tromey@redhat.com>\n \n+\t* link.cc (make_vtable): Remove abstract method check.\n+\t(append_partial_itable): Likewise.\n+\n \tPR java/20056:\n \t* verify.cc (type::equals): Fixed test.\n \t* testsuite/libjava.lang/PR20056.out: New file."}, {"sha": "a1fa9188930c1497e53273b6fe3f7b163c6f32a7", "filename": "libjava/link.cc", "status": "modified", "additions": 16, "deletions": 35, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc544c8180f2ce4f98dbce18fcf1702b9a686ca6/libjava%2Flink.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc544c8180f2ce4f98dbce18fcf1702b9a686ca6/libjava%2Flink.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Flink.cc?ref=fc544c8180f2ce4f98dbce18fcf1702b9a686ca6", "patch": "@@ -700,6 +700,13 @@ _Jv_ThrowNoSuchMethodError ()\n   throw new java::lang::NoSuchMethodError;\n }\n \n+// This is put in empty vtable slots.\n+static void\n+_Jv_abstractMethodError (void)\n+{\n+  throw new java::lang::AbstractMethodError();\n+}\n+\n // Each superinterface of a class (i.e. each interface that the class\n // directly or indirectly implements) has a corresponding \"Partial\n // Interface Dispatch Table\" whose size is (number of methods + 1) words.\n@@ -742,14 +749,14 @@ _Jv_Linker::append_partial_itable (jclass klass, jclass iface,\n \t  if ((meth->accflags & Modifier::STATIC) != 0)\n \t    throw new java::lang::IncompatibleClassChangeError\n \t      (_Jv_GetMethodString (klass, meth));\n-\t  if ((meth->accflags & Modifier::ABSTRACT) != 0)\n-\t    throw new java::lang::AbstractMethodError\n-\t      (_Jv_GetMethodString (klass, meth));\n \t  if ((meth->accflags & Modifier::PUBLIC) == 0)\n \t    throw new java::lang::IllegalAccessError\n \t      (_Jv_GetMethodString (klass, meth));\n \n-\t  itable[pos] = meth->ncode;\n+ \t  if ((meth->accflags & Modifier::ABSTRACT) != 0)\n+\t    itable[pos] = (void *) &_Jv_abstractMethodError;\n+\t  else\n+\t    itable[pos] = meth->ncode;\n \t}\n       else\n         {\n@@ -1113,13 +1120,6 @@ _Jv_Linker::link_exception_table (jclass self)\n   self->catch_classes->classname = (_Jv_Utf8Const *)-1;\n }\n   \n-// This is put in empty vtable slots.\n-static void\n-_Jv_abstractMethodError (void)\n-{\n-  throw new java::lang::AbstractMethodError();\n-}\n-\n // Set itable method indexes for members of interface IFACE.\n void\n _Jv_Linker::layout_interface_methods (jclass iface)\n@@ -1211,6 +1211,8 @@ _Jv_Linker::set_vtable_entries (jclass klass, _Jv_VTable *vtable)\n       if (meth->index == (_Jv_ushort) -1)\n \tcontinue;\n       if ((meth->accflags & Modifier::ABSTRACT))\n+\t// FIXME: it might be nice to have a libffi trampoline here,\n+\t// so we could pass in the method name and other information.\n \tvtable->set_method(meth->index, (void *) &_Jv_abstractMethodError);\n       else\n \tvtable->set_method(meth->index, meth->ncode);\n@@ -1259,30 +1261,9 @@ _Jv_Linker::make_vtable (jclass klass)\n   // override an old one.\n   set_vtable_entries (klass, vtable);\n \n-  // It is an error to have an abstract method in a concrete class.\n-  if (! (klass->accflags & Modifier::ABSTRACT))\n-    {\n-      for (int i = 0; i < klass->vtable_method_count; ++i)\n-\tif (vtable->get_method(i) == (void *) &_Jv_abstractMethodError)\n-\t  {\n-\t    using namespace java::lang;\n-\t    jclass orig = klass;\n-\t    while (klass != NULL)\n-\t      {\n-\t\tfor (int j = 0; j < klass->method_count; ++j)\n-\t\t  {\n-\t\t    if (klass->methods[j].index == i)\n-\t\t      throw new AbstractMethodError(_Jv_GetMethodString(klass,\n-\t\t\t\t\t\t\t\t\t&klass->methods[j],\n-\t\t\t\t\t\t\t\t\torig));\n-\t\t  }\n-\t\tklass = klass->getSuperclass ();\n-\t      }\n-\t    // Couldn't find the name, which is weird.\n-\t    // But we still must throw the error.\n-\t    throw new AbstractMethodError ();\n-\t  }\n-    }\n+  // Note that we don't check for abstract methods here.  We used to,\n+  // but there is a JVMS clarification that indicates that a check\n+  // here would be too eager.  And, a simple test case confirms this.\n }\n \n // Lay out the class, allocating space for static fields and computing"}]}