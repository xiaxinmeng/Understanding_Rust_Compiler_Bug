{"sha": "c224550fb5c90f7fb2b578507e837c77b7758d7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzIyNDU1MGZiNWM5MGY3ZmIyYjU3ODUwN2U4MzdjNzdiNzc1OGQ3ZA==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargls@comcast.net", "date": "2005-01-14T11:55:12Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2005-01-14T11:55:12Z"}, "message": "resolve.c (compare_case): Cleanup.\n\n2005-01-14  Steven G. Kargl  <kargls@comcast.net>\n\n\t* resolve.c (compare_case): Cleanup.\ntestsuite/\n\t* gfortran.dg/select_1.f90: New test.\n\t* gfortran.dg/select_2.f90: New test.\n\t* gfortran.dg/select_3.f90: New test.\n\t* gfortran.dg/select_4.f90: New test.\n\nFrom-SVN: r93640", "tree": {"sha": "1ccd12753451720e7d87ec68252c1992f4ad60e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ccd12753451720e7d87ec68252c1992f4ad60e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c224550fb5c90f7fb2b578507e837c77b7758d7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c224550fb5c90f7fb2b578507e837c77b7758d7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c224550fb5c90f7fb2b578507e837c77b7758d7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c224550fb5c90f7fb2b578507e837c77b7758d7d/comments", "author": null, "committer": null, "parents": [{"sha": "08a0c536dffd810a5565d149bfd216df684c788e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08a0c536dffd810a5565d149bfd216df684c788e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08a0c536dffd810a5565d149bfd216df684c788e"}], "stats": {"total": 194, "additions": 96, "deletions": 98}, "files": [{"sha": "ba5ae017361ee4df4c96a4420313bd2f19ace4e1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c224550fb5c90f7fb2b578507e837c77b7758d7d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c224550fb5c90f7fb2b578507e837c77b7758d7d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c224550fb5c90f7fb2b578507e837c77b7758d7d", "patch": "@@ -1,3 +1,7 @@\n+2005-01-14  Steven G. Kargl  <kargls@comcast.net>\n+\n+\t* resolve.c (compare_case): Cleanup.\n+\n 2005-01-14  Steven G. Kargl  <kargls@comcast.net>\n \n \t* resolve.c (compare_case): Give arguments correct type."}, {"sha": "4615df77e154a560a306beb636a4df47d73bc1d6", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 32, "deletions": 65, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c224550fb5c90f7fb2b578507e837c77b7758d7d/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c224550fb5c90f7fb2b578507e837c77b7758d7d/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=c224550fb5c90f7fb2b578507e837c77b7758d7d", "patch": "@@ -2493,85 +2493,52 @@ resolve_allocate_expr (gfc_expr * e)\n \n /* Callback function for our mergesort variant.  Determines interval\n    overlaps for CASEs. Return <0 if op1 < op2, 0 for overlap, >0 for\n-   op1 > op2.  Assumes we're not dealing with the default case.  */\n+   op1 > op2.  Assumes we're not dealing with the default case.  \n+   We have op1 = (:L), (K:L) or (K:) and op2 = (:N), (M:N) or (M:).\n+   There are nine situations to check.  */\n \n static int\n compare_cases (const gfc_case * op1, const gfc_case * op2)\n {\n+  int retval;\n \n-  if (op1->low == NULL) /* op1 = (:N) */\n+  if (op1->low == NULL) /* op1 = (:L)  */\n     {\n-      if (op2->low == NULL) /* op2 = (:M), so overlap.  */\n-        return 0;\n-\n-      else if (op2->high == NULL) /* op2 = (M:) */\n-        {\n-\t  if (gfc_compare_expr (op1->high, op2->low) < 0)\n-\t    return -1;  /* N < M */\n-\t  else\n-\t    return 0;\n-\t}\n-\n-      else /* op2 = (L:M) */\n-        {\n-\t  if (gfc_compare_expr (op1->high, op2->low) < 0)\n-\t    return -1; /* N < L */\n-\t  else\n-\t    return 0;\n-\t}\n+      /* op2 = (:N), so overlap.  */\n+      retval = 0;\n+      /* op2 = (M:) or (M:N),  L < M  */\n+      if (op2->low != NULL\n+\t  && gfc_compare_expr (op1->high, op2->low) < 0)\n+\tretval = -1;\n     }\n-\n-  else if (op1->high == NULL) /* op1 = (N:) */\n+  else if (op1->high == NULL) /* op1 = (K:)  */\n     {\n-      if (op2->low == NULL) /* op2 = (:M)  */\n-        {\n-\t  if (gfc_compare_expr (op1->low, op2->high) > 0)\n-\t    return 1; /* N > M */\n-\t  else\n-\t    return 0;\n-\t}\n-\n-      else if (op2->high == NULL) /* op2 = (M:), so overlap.  */\n-        return 0;\n-\n-      else /* op2 = (L:M) */\n-        {\n-\t  if (gfc_compare_expr (op1->low, op2->high) > 0)\n-\t    return 1; /* N > M */\n-\t  else\n-\t    return 0;\n-\t}\n+      /* op2 = (M:), so overlap.  */\n+      retval = 0;\n+      /* op2 = (:N) or (M:N), K > N  */\n+      if (op2->high != NULL\n+\t  && gfc_compare_expr (op1->low, op2->high) > 0)\n+\tretval = 1;\n     }\n-\n-  else /* op1 = (N:P) */\n+  else /* op1 = (K:L)  */\n     {\n-      if (op2->low == NULL) /* op2 = (:M)  */\n-        {\n-\t  if (gfc_compare_expr (op1->low, op2->high) > 0)\n-\t    return 1; /* N > M */\n-\t  else\n-\t    return 0;\n-\t}\n-\n-      else if (op2->high == NULL) /* op2 = (M:)  */\n+      if (op2->low == NULL)       /* op2 = (:N), K > N  */\n+\tretval = (gfc_compare_expr (op1->low, op2->high) > 0) ? 1 : 0;\n+      else if (op2->high == NULL) /* op2 = (M:), L < M  */\n+\tretval = (gfc_compare_expr (op1->high, op2->low) < 0) ? -1 : 0;\n+      else                        /* op2 = (M:N)  */\n         {\n+\t  retval =  0;\n+          /* L < M  */\n \t  if (gfc_compare_expr (op1->high, op2->low) < 0)\n-\t    return -1; /* P < M */\n-\t  else\n-\t    return 0;\n-\t}\n-\n-      else /* op2 = (L:M) */\n-        {\n-\t  if (gfc_compare_expr (op1->high, op2->low) < 0)\n-\t    return -1; /* P < L */\n-\n-\t  if (gfc_compare_expr (op1->low, op2->high) > 0)\n-\t    return 1; /* N > M */\n-\n-\t  return 0;\n+\t    retval =  -1;\n+          /* K > N  */\n+\t  else if (gfc_compare_expr (op1->low, op2->high) > 0)\n+\t    retval =  1;\n \t}\n     }\n+\n+  return retval;\n }\n \n "}, {"sha": "f233054980fe113d5e74c1938607a4178ddbf5e1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c224550fb5c90f7fb2b578507e837c77b7758d7d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c224550fb5c90f7fb2b578507e837c77b7758d7d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c224550fb5c90f7fb2b578507e837c77b7758d7d", "patch": "@@ -1,3 +1,10 @@\n+2005-01-14  Steven G. Kargl  <kargls@comcast.net>\n+\n+\t* gfortran.dg/select_1.f90: New test.\n+\t* gfortran.dg/select_2.f90: New test.\n+\t* gfortran.dg/select_3.f90: New test.\n+\t* gfortran.dg/select_4.f90: New test.\n+\n 2005-01-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/19084"}, {"sha": "4d9d597f7948001fe280eab6f3e8f5db8978c094", "filename": "gcc/testsuite/gfortran.dg/select_1.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c224550fb5c90f7fb2b578507e837c77b7758d7d/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c224550fb5c90f7fb2b578507e837c77b7758d7d/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_1.f90?ref=c224550fb5c90f7fb2b578507e837c77b7758d7d", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do run }\n+!  Simple test for SELECT CASE\n+!\n+program select_2\n+  integer i\n+  do i = 1, 5\n+     select case(i)\n+     case (1)\n+       if (i /= 1) call abort\n+     case (2:3)\n+       if (i /= 2 .and. i /= 3) call abort\n+     case (4)\n+       if (i /= 4) call abort\n+     case default\n+       if (i /= 5) call abort\n+     end select\n+  end do\n+end program select_2"}, {"sha": "6ece65840f03a06a64a87013890ea1e6ae587437", "filename": "gcc/testsuite/gfortran.dg/select_2.f90", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c224550fb5c90f7fb2b578507e837c77b7758d7d/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c224550fb5c90f7fb2b578507e837c77b7758d7d/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_2.f90?ref=c224550fb5c90f7fb2b578507e837c77b7758d7d", "patch": "@@ -1,18 +1,19 @@\n ! { dg-do run }\n-!  Simple test for SELECT CASE\n+!  Simple test program to see if gfortran eliminates the 'case (3:2)'\n+!  statement.  This is an unreachable CASE because the range is empty.\n !\n-program select_2\n+program select_3\n   integer i\n   do i = 1, 4\n      select case(i)\n      case (1)\n        if (i /= 1) call abort\n-     case (2:3)\n-       if (i /= 2 .and. i /= 3) call abort\n+     case (3:2)\n+       call abort\n      case (4)\n        if (i /= 4) call abort\n      case default\n-       call abort\n+       if (i /= 2 .and. i /= 3) call abort\n      end select\n   end do\n-end program select_2\n+end program select_3"}, {"sha": "d1f2d6904993de270d65ef75c61e4a9909a85ea7", "filename": "gcc/testsuite/gfortran.dg/select_3.f90", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c224550fb5c90f7fb2b578507e837c77b7758d7d/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c224550fb5c90f7fb2b578507e837c77b7758d7d/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_3.f90?ref=c224550fb5c90f7fb2b578507e837c77b7758d7d", "patch": "@@ -1,19 +1,18 @@\n-! [dg-do run }\n-!  Simple test program to see if gfortran eliminates the 'case (3:2)'\n-!  statement.  This is an unreachable CASE because the range is empty.\n+! { dg-do run }\n+!  Short test program with a CASE statement that uses a range.\n !\n-program select_3\n+program select_4\n   integer i\n-  do i = 1, 4\n+  do i = 1, 34, 4\n      select case(i)\n-     case (1)\n-       if (i /= 1) call abort\n-     case (3:2)\n-       call abort\n-     case (4)\n-       if (i /= 4) call abort\n+     case (:5)\n+       if (i /= 1 .and. i /= 5) call abort\n+     case (13:21)\n+       if (i /= 13 .and. i /= 17 .and. i /= 21) call abort\n+     case (29:)\n+       if (i /= 29 .and. i /= 33) call abort\n      case default\n-       if (i /= 2 .and. i /= 3) call abort\n+       if (i /= 9 .and. i /= 25) call abort\n      end select\n   end do\n-end program select_3\n+end program select_4"}, {"sha": "8fb661f7c22c1680800bcffa6b99abf0b54919ff", "filename": "gcc/testsuite/gfortran.dg/select_4.f90", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c224550fb5c90f7fb2b578507e837c77b7758d7d/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c224550fb5c90f7fb2b578507e837c77b7758d7d/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_4.f90?ref=c224550fb5c90f7fb2b578507e837c77b7758d7d", "patch": "@@ -1,16 +1,18 @@\n-! { dg-do run }\n-!  Short test program with a CASE statement that uses a range.\n+! { dg-do compile }\n+! Check for overlapping case range diagnostics.\n !\n-program select_4\n+program select_5\n   integer i\n-  do i = 1, 40, 4\n-     select case(i)\n-     case (:5)\n-       if (i /= 1 .and. i /= 5) call abort\n-     case (20:30)\n-       if (i /= 21 .and. i /= 25 .and. i /= 29) call abort\n-     case (34:)\n-       if (i /= 37) call abort\n-     end select\n-  end do\n-end program select_4\n+  select case(i)\n+  case (20:30)\n+  case (25:) ! { dg-error \"overlaps with CASE\" \"\" }\n+  end select\n+  select case(i)\n+  case (30)\n+  case (25:) ! { dg-error \"overlaps with CASE\" \"\" }\n+  end select\n+  select case(i)\n+  case (20:30)\n+  case (25) ! { dg-error \"overlaps with CASE\" \"\" }\n+  end select\n+end program select_5"}]}