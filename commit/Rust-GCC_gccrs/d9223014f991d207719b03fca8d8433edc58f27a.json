{"sha": "d9223014f991d207719b03fca8d8433edc58f27a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDkyMjMwMTRmOTkxZDIwNzcxOWIwM2ZjYThkODQzM2VkYzU4ZjI3YQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2009-03-27T22:33:16Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-03-27T22:33:16Z"}, "message": "re PR target/39323 (MAX_OFILE_ALIGNMENT in elfos.h is too big)\n\ngcc/\n\n2009-03-27  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR c/39323\n\t* c-common.c (handle_aligned_attribute): Properly check alignment\n\toverflow.  Use (1U << i) instead of (1 << i).\n\n\t* emit-rtl.c (get_mem_align_offset): Use \"unsigned int\" for\n\talign.\n\n\t* expr.h (get_mem_align_offset): Updated.\n\n\t* tree.h (tree_decl_common): Change align to \"unsigned int\" and\n\tmove it before pointer_alias_set.\n\ngcc/ada/\n\n2009-03-27  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR c/39323\n\t* gcc-interface/utils.c (create_field_decl): Use \"unsigned int\"\n\ton bit_align.\n\ngcc/testsuite/\n\n2009-03-27  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR c/39323\n\t* gcc.dg/pr39323-1.c: New.\n\t* gcc.dg/pr39323-2.c: Likewise.\n\t* gcc.dg/pr39323-3.c: Likewise.\n\nFrom-SVN: r145136", "tree": {"sha": "730765d79cb3b96fe1aa99617f3d96390ff336d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/730765d79cb3b96fe1aa99617f3d96390ff336d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9223014f991d207719b03fca8d8433edc58f27a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9223014f991d207719b03fca8d8433edc58f27a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9223014f991d207719b03fca8d8433edc58f27a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9223014f991d207719b03fca8d8433edc58f27a/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "689b689c17aa25f3ba3e1390a5bf513bd586c46a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/689b689c17aa25f3ba3e1390a5bf513bd586c46a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/689b689c17aa25f3ba3e1390a5bf513bd586c46a"}], "stats": {"total": 65, "additions": 56, "deletions": 9}, "files": [{"sha": "9ea8830ad5f978a5f362aaf0d9a26b0d7ab4dcf4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9223014f991d207719b03fca8d8433edc58f27a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9223014f991d207719b03fca8d8433edc58f27a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9223014f991d207719b03fca8d8433edc58f27a", "patch": "@@ -1,3 +1,17 @@\n+2009-03-27  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR c/39323\n+\t* c-common.c (handle_aligned_attribute): Properly check alignment\n+\toverflow.  Use (1U << i) instead of (1 << i).\n+\n+\t* emit-rtl.c (get_mem_align_offset): Use \"unsigned int\" for\n+\talign.\n+\n+\t* expr.h (get_mem_align_offset): Updated.\n+\n+\t* tree.h (tree_decl_common): Change align to \"unsigned int\" and\n+\tmove it before pointer_alias_set.\n+\n 2009-03-27  H.J. Lu  <hongjiu.lu@intel.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "97bd2609e2a40a6b6235216b10fcb8833c1acfdc", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9223014f991d207719b03fca8d8433edc58f27a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9223014f991d207719b03fca8d8433edc58f27a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d9223014f991d207719b03fca8d8433edc58f27a", "patch": "@@ -1,3 +1,9 @@\n+2009-03-27  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR c/39323\n+\t* gcc-interface/utils.c (create_field_decl): Use \"unsigned int\"\n+\ton bit_align.\n+\n 2009-03-11  Olivier Hainque  <hainque@adacore.com>\n \n \t* gcc-interface/trans.c (gnat_to_gnu) <case N_Slice>: In range"}, {"sha": "8c5dc5836253d0fce96c31837501263ad251fb39", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9223014f991d207719b03fca8d8433edc58f27a/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9223014f991d207719b03fca8d8433edc58f27a/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=d9223014f991d207719b03fca8d8433edc58f27a", "patch": "@@ -1707,7 +1707,7 @@ create_field_decl (tree field_name, tree field_type, tree record_type,\n      we get the alignment from the type, indicate if this is from an explicit\n      user request, which prevents stor-layout from lowering it later on.  */\n   {\n-    int bit_align\n+    unsigned int bit_align\n       = (DECL_BIT_FIELD (field_decl) ? 1\n \t : packed && TYPE_MODE (field_type) != BLKmode ? BITS_PER_UNIT : 0);\n "}, {"sha": "9b066f413c6f76cdafee0ad91b9b7bd92ee1312e", "filename": "gcc/c-common.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9223014f991d207719b03fca8d8433edc58f27a/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9223014f991d207719b03fca8d8433edc58f27a/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=d9223014f991d207719b03fca8d8433edc58f27a", "patch": "@@ -5976,7 +5976,7 @@ handle_aligned_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n       error (\"requested alignment is not a power of 2\");\n       *no_add_attrs = true;\n     }\n-  else if (i > HOST_BITS_PER_INT - 2)\n+  else if (i >= HOST_BITS_PER_INT - BITS_PER_UNIT_LOG)\n     {\n       error (\"requested alignment is too large\");\n       *no_add_attrs = true;\n@@ -5998,7 +5998,7 @@ handle_aligned_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n       else if (!(flags & (int) ATTR_FLAG_TYPE_IN_PLACE))\n \t*type = build_variant_type_copy (*type);\n \n-      TYPE_ALIGN (*type) = (1 << i) * BITS_PER_UNIT;\n+      TYPE_ALIGN (*type) = (1U << i) * BITS_PER_UNIT;\n       TYPE_USER_ALIGN (*type) = 1;\n     }\n   else if (! VAR_OR_FUNCTION_DECL_P (decl)\n@@ -6008,7 +6008,7 @@ handle_aligned_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n       *no_add_attrs = true;\n     }\n   else if (TREE_CODE (decl) == FUNCTION_DECL\n-\t   && DECL_ALIGN (decl) > (1 << i) * BITS_PER_UNIT)\n+\t   && DECL_ALIGN (decl) > (1U << i) * BITS_PER_UNIT)\n     {\n       if (DECL_USER_ALIGN (decl))\n \terror (\"alignment for %q+D was previously specified as %d \"\n@@ -6021,7 +6021,7 @@ handle_aligned_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n     }\n   else\n     {\n-      DECL_ALIGN (decl) = (1 << i) * BITS_PER_UNIT;\n+      DECL_ALIGN (decl) = (1U << i) * BITS_PER_UNIT;\n       DECL_USER_ALIGN (decl) = 1;\n     }\n "}, {"sha": "1f51e125f355b3a013425f5d7683c3dba56937b2", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9223014f991d207719b03fca8d8433edc58f27a/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9223014f991d207719b03fca8d8433edc58f27a/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=d9223014f991d207719b03fca8d8433edc58f27a", "patch": "@@ -1495,7 +1495,7 @@ mem_expr_equal_p (const_tree expr1, const_tree expr2)\n    -1 if not known.  */\n \n int\n-get_mem_align_offset (rtx mem, int align)\n+get_mem_align_offset (rtx mem, unsigned int align)\n {\n   tree expr;\n   unsigned HOST_WIDE_INT offset;"}, {"sha": "7e7e08843c8a7abb61ed9289834481821ae93d39", "filename": "gcc/expr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9223014f991d207719b03fca8d8433edc58f27a/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9223014f991d207719b03fca8d8433edc58f27a/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=d9223014f991d207719b03fca8d8433edc58f27a", "patch": "@@ -699,7 +699,7 @@ extern void set_mem_attributes_minus_bitpos (rtx, tree, int, HOST_WIDE_INT);\n /* Return OFFSET if XEXP (MEM, 0) - OFFSET is known to be ALIGN\n    bits aligned for 0 <= OFFSET < ALIGN / BITS_PER_UNIT, or\n    -1 if not known.  */\n-extern int get_mem_align_offset (rtx, int);\n+extern int get_mem_align_offset (rtx, unsigned int);\n \n /* Assemble the static constant template for function entry trampolines.  */\n extern rtx assemble_trampoline_template (void);"}, {"sha": "269c540bdb4d0772b2bf1cb84f3b0bac836b1820", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9223014f991d207719b03fca8d8433edc58f27a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9223014f991d207719b03fca8d8433edc58f27a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d9223014f991d207719b03fca8d8433edc58f27a", "patch": "@@ -1,3 +1,10 @@\n+2009-03-27  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR c/39323\n+\t* gcc.dg/pr39323-1.c: New.\n+\t* gcc.dg/pr39323-2.c: Likewise.\n+\t* gcc.dg/pr39323-3.c: Likewise.\n+\n 2009-03-27  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/38034"}, {"sha": "2876bf39abafab8607c6725abbdbfd18a70ba79e", "filename": "gcc/testsuite/gcc.dg/pr39323-1.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9223014f991d207719b03fca8d8433edc58f27a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr39323-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9223014f991d207719b03fca8d8433edc58f27a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr39323-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr39323-1.c?ref=d9223014f991d207719b03fca8d8433edc58f27a", "patch": "@@ -0,0 +1,5 @@\n+/* PR c/39323 */\n+/* { dg-do compile { target *-*-linux* } } */\n+\n+int foo __attribute__ ((aligned(1 << 29))) =  20; /* { dg-error \"requested alignment is too large\" } */\n+typedef int __attribute__ ((aligned(1 << 29))) int29; /* { dg-error \"requested alignment is too large\" } */"}, {"sha": "2eaa6e96e73f46d1c2c78f6f6338472b408d0513", "filename": "gcc/testsuite/gcc.dg/pr39323-2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9223014f991d207719b03fca8d8433edc58f27a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr39323-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9223014f991d207719b03fca8d8433edc58f27a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr39323-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr39323-2.c?ref=d9223014f991d207719b03fca8d8433edc58f27a", "patch": "@@ -0,0 +1,6 @@\n+/* PR c/39323 */\n+/* { dg-do compile { target *-*-linux* } } */\n+\n+int bar __attribute__ ((aligned(1 << 28))) =  20;\n+\n+/* { dg-final { scan-assembler \"\\.align\\[\\\\t \\]*268435456\" } } */"}, {"sha": "cbfed9dbceff9c91bb18d26e5ce4a5876c93962b", "filename": "gcc/testsuite/gcc.dg/pr39323-3.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9223014f991d207719b03fca8d8433edc58f27a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr39323-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9223014f991d207719b03fca8d8433edc58f27a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr39323-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr39323-3.c?ref=d9223014f991d207719b03fca8d8433edc58f27a", "patch": "@@ -0,0 +1,7 @@\n+/* PR c/39323 */\n+/* { dg-do compile { target *-*-linux* } } */\n+\n+typedef int __attribute__ ((aligned(1 << 28))) int28;\n+int28 foo = 20;\n+\n+/* { dg-final { scan-assembler \"\\.align\\[\\\\t \\]*268435456\" } } */"}, {"sha": "51fd7ec0c71b6fcd9432199177c60c284b2971db", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9223014f991d207719b03fca8d8433edc58f27a/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9223014f991d207719b03fca8d8433edc58f27a/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=d9223014f991d207719b03fca8d8433edc58f27a", "patch": "@@ -2726,10 +2726,9 @@ struct tree_decl_common GTY(())\n   unsigned gimple_reg_flag : 1;\n   /* In a DECL with pointer type, set if no TBAA should be done.  */\n   unsigned no_tbaa_flag : 1;\n-  /* Padding so that 'align' can be on a 32-bit boundary.  */\n+  /* Padding so that 'off_align' can be on a 32-bit boundary.  */\n   unsigned decl_common_unused : 2;\n \n-  unsigned int align : 24;\n   /* DECL_OFFSET_ALIGN, used only for FIELD_DECLs.  */\n   unsigned int off_align : 8;\n \n@@ -2738,6 +2737,9 @@ struct tree_decl_common GTY(())\n   tree attributes;\n   tree abstract_origin;\n \n+  /* DECL_ALIGN.  It should have the same size as TYPE_ALIGN.  */\n+  unsigned int align;\n+\n   alias_set_type pointer_alias_set;\n   /* Points to a structure whose details depend on the language in use.  */\n   struct lang_decl *lang_specific;"}]}