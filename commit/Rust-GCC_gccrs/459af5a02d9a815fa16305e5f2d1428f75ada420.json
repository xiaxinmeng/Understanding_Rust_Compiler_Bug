{"sha": "459af5a02d9a815fa16305e5f2d1428f75ada420", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU5YWY1YTAyZDlhODE1ZmExNjMwNWU1ZjJkMTQyOGY3NWFkYTQyMA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2008-02-16T23:21:20Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2008-02-16T23:21:20Z"}, "message": "random_number.h: Use TR1's mersenne_twister.\n\n2008-02-16  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/parallel/random_number.h: Use TR1's mersenne_twister.\n\t(random_number::genrand_bits()): Remove.\n\t(random_number::set_seed): Remove.\n\nFrom-SVN: r132371", "tree": {"sha": "9d65754b70e07e6813f04a3ff7da15979aa035b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d65754b70e07e6813f04a3ff7da15979aa035b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/459af5a02d9a815fa16305e5f2d1428f75ada420", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/459af5a02d9a815fa16305e5f2d1428f75ada420", "html_url": "https://github.com/Rust-GCC/gccrs/commit/459af5a02d9a815fa16305e5f2d1428f75ada420", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/459af5a02d9a815fa16305e5f2d1428f75ada420/comments", "author": null, "committer": null, "parents": [{"sha": "9e2d69391e518083676019a179edb39cf9cfe643", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e2d69391e518083676019a179edb39cf9cfe643", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e2d69391e518083676019a179edb39cf9cfe643"}], "stats": {"total": 361, "additions": 26, "deletions": 335}, "files": [{"sha": "2c1323ce69a0b826e163148cd5354b26a3dbec42", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/459af5a02d9a815fa16305e5f2d1428f75ada420/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/459af5a02d9a815fa16305e5f2d1428f75ada420/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=459af5a02d9a815fa16305e5f2d1428f75ada420", "patch": "@@ -1,3 +1,9 @@\n+2008-02-16  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/parallel/random_number.h: Use TR1's mersenne_twister.\n+\t(random_number::genrand_bits()): Remove.\n+\t(random_number::set_seed): Remove.\n+\t\n 2008-02-15  Benjamin Kosnik  <bkoz@redhat.com>\n \t\n \t* include/parallel/types.h: Remove enum parallelism."}, {"sha": "c87b906e7d8b381d825c5d0ab2a3b76760f5c3a2", "filename": "libstdc++-v3/include/parallel/random_number.h", "status": "modified", "additions": 20, "deletions": 335, "changes": 355, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/459af5a02d9a815fa16305e5f2d1428f75ada420/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_number.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/459af5a02d9a815fa16305e5f2d1428f75ada420/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_number.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_number.h?ref=459af5a02d9a815fa16305e5f2d1428f75ada420", "patch": "@@ -39,315 +39,26 @@\n #define _GLIBCXX_PARALLEL_RANDOM_NUMBER_H 1\n \n #include <parallel/types.h>\n+#include <tr1/random>\n \n namespace __gnu_parallel\n {\n-  // XXX use tr1 random number.\n-  // http://www.math.keio.ac.jp/matumoto/emt.html\n-  template<typename UIntType, int w, int n, int m, int r, UIntType a, int u,\n-\t   int s, UIntType b, int t, UIntType c, int l, UIntType val>\n-    class mersenne_twister\n-    {\n-    public:\n-      typedef UIntType result_type;\n-      static const int word_size = w;\n-      static const int state_size = n;\n-      static const int shift_size = m;\n-      static const int mask_bits = r;\n-      static const UIntType parameter_a = a;\n-      static const int output_u = u;\n-      static const int output_s = s;\n-      static const UIntType output_b = b;\n-      static const int output_t = t;\n-      static const UIntType output_c = c;\n-      static const int output_l = l;\n-\n-      static const bool has_fixed_range = false;\n-\n-      mersenne_twister() { seed(); }\n-\n-#if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x520)\n-      // Work around overload resolution problem (Gennadiy E. Rozental)\n-      explicit\n-      mersenne_twister(const UIntType& value)\n-#else\n-      explicit\n-      mersenne_twister(UIntType value)\n-#endif\n-      { seed(value); }\n-\n-      template<typename It>\n-        mersenne_twister(It& first, It last)\n-\t{ seed(first,last); }\n-\n-      template<typename Generator>\n-        explicit\n-        mersenne_twister(Generator & gen)\n-\t{ seed(gen); }\n-\n-      // compiler-generated copy ctor and assignment operator are fine\n-\n-      void\n-      seed()\n-      { seed(UIntType(5489)); }\n-\n-#if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x520)\n-      // Work around overload resolution problem (Gennadiy E. Rozental)\n-      void\n-      seed(const UIntType& value)\n-#else\n-      void\n-      seed(UIntType value)\n-#endif\n-      {\n-\t// New seeding algorithm from\n-      // http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html\n-\t// In the previous versions, MSBs of the seed affected only MSBs of the\n-\t// state x[].\n-\tconst UIntType mask = ~0u;\n-\tx[0] = value & mask;\n-\tfor (i = 1; i < n; ++i)\n-\t  {\n-\t    // See Knuth \"The Art of Computer Programming\" Vol. 2,\n-\t    // 3rd ed., page 106\n-\t    x[i] = (1812433253UL * (x[i-1] ^ (x[i-1] >> (w-2))) + i) & mask;\n-\t  }\n-      }\n-\n-      // For GCC, moving this function out-of-line prevents inlining, which may\n-      // reduce overall object code size.  However, MSVC does not grok\n-      // out-of-line definitions of member function templates.\n-      template<typename Generator>\n-        void\n-        seed(Generator & gen)\n-\t{\n-\t  // I could have used std::generate_n, but it takes \"gen\" by value\n-\t  for (int j = 0; j < n; ++j)\n-\t    x[j] = gen();\n-\t  i = n;\n-\t}\n-\n-      template<typename It>\n-        void\n-        seed(It& first, It last)\n-\t{\n-\t  int j;\n-\t  for (j = 0; j < n && first != last; ++j, ++first)\n-\t    x[j] = *first;\n-\t  i = n;\n-\t  /*    if (first == last && j < n)\n-\t\tthrow std::invalid_argument(\"mersenne_twister::seed\");*/\n-\t}\n-\n-      result_type\n-      min() const\n-      { return 0; }\n-      \n-      result_type\n-      max() const\n-      {\n-\t// avoid \"left shift count >= with of type\" warning\n-\tresult_type res = 0;\n-\tfor (int i = 0; i < w; ++i)\n-\t  res |= (1u << i);\n-\treturn res;\n-      }\n-\n-      result_type\n-      operator()();\n-      \n-      static bool\n-      validation(result_type v)\n-      { return val == v; }\n-\n-#ifndef BOOST_NO_OPERATORS_IN_NAMESPACE\n-\n-      friend bool\n-      operator==(const mersenne_twister& x, const mersenne_twister& y)\n-      {\n-\tfor (int j = 0; j < state_size; ++j)\n-\t  if (x.compute(j) != y.compute(j))\n-\t    return false;\n-\treturn true;\n-      }\n-\n-      friend bool\n-      operator!=(const mersenne_twister& x, const mersenne_twister& y)\n-      { return !(x == y); }\n-#else\n-      // Use a member function; Streamable concept not supported.\n-      bool\n-      operator==(const mersenne_twister& rhs) const\n-      {\n-\tfor (int j = 0; j < state_size; ++j)\n-\t  if (compute(j) != rhs.compute(j))\n-\t    return false;\n-\treturn true;\n-      }\n-\n-      bool\n-      operator!=(const mersenne_twister& rhs) const\n-      { return !(*this == rhs); }\n-#endif\n-\n-    private:\n-      // returns x(i-n+index), where index is in 0..n-1\n-      UIntType\n-      compute(unsigned int index) const\n-      {\n-\t// equivalent to (i-n+index) % 2n, but doesn't produce negative numbers\n-\treturn x[ (i + n + index) % (2*n) ];\n-      }\n-\n-      void\n-      twist(int block);\n-\n-      // state representation: next output is o(x(i))\n-      //  x[0]  ... x[k] x[k+1] ... x[n-1]     x[n]     ... x[2*n-1] represents\n-      //  x(i-k) ... x(i) x(i+1) ... x(i-k+n-1) x(i-k-n) ... x[i(i-k-1)]\n-      // The goal is to always have x(i-n) ... x(i-1) available for\n-      // operator== and save/restore.\n-\n-      UIntType x[2*n];\n-      int i;\n-  };\n-\n-#ifndef BOOST_NO_INCLASS_MEMBER_INITIALIZATION\n-  //  A definition is required even for integral static constants\n-  template<typename UIntType, int w, int n, int m, int r, UIntType a, int u,\n-\t   int s, UIntType b, int t, UIntType c, int l, UIntType val>\n-    const bool\n-    mersenne_twister<UIntType,w,n,m,r,a,u,s,b,t,c,l,val>::has_fixed_range;\n-\n-  template<typename UIntType, int w, int n, int m, int r, UIntType a, int u,\n-\t   int s, UIntType b, int t, UIntType c, int l, UIntType val>\n-    const int\n-    mersenne_twister<UIntType,w,n,m,r,a,u,s,b,t,c,l,val>::state_size;\n-\n-  template<typename UIntType, int w, int n, int m, int r, UIntType a, int u,\n-\t   int s, UIntType b, int t, UIntType c, int l, UIntType val>\n-    const int\n-    mersenne_twister<UIntType,w,n,m,r,a,u,s,b,t,c,l,val>::shift_size;\n-  \n-  template<typename UIntType, int w, int n, int m, int r, UIntType a, int u,\n-\t   int s, UIntType b, int t, UIntType c, int l, UIntType val>\n-    const int\n-    mersenne_twister<UIntType,w,n,m,r,a,u,s,b,t,c,l,val>::mask_bits;\n-  \n-  template<typename UIntType, int w, int n, int m, int r, UIntType a, int u,\n-\t   int s, UIntType b, int t, UIntType c, int l, UIntType val>\n-    const UIntType\n-    mersenne_twister<UIntType,w,n,m,r,a,u,s,b,t,c,l,val>::parameter_a;\n-  \n-  template<typename UIntType, int w, int n, int m, int r, UIntType a, int u,\n-\t   int s, UIntType b, int t, UIntType c, int l, UIntType val>\n-    const int\n-    mersenne_twister<UIntType,w,n,m,r,a,u,s,b,t,c,l,val>::output_u;\n-  \n-  template<typename UIntType, int w, int n, int m, int r, UIntType a, int u,\n-\t   int s, UIntType b, int t, UIntType c, int l, UIntType val>\n-    const int\n-    mersenne_twister<UIntType,w,n,m,r,a,u,s,b,t,c,l,val>::output_s;\n-  \n-  template<typename UIntType, int w, int n, int m, int r, UIntType a, int u,\n-\t   int s, UIntType b, int t, UIntType c, int l, UIntType val>\n-    const UIntType\n-    mersenne_twister<UIntType,w,n,m,r,a,u,s,b,t,c,l,val>::output_b;\n-  \n-  template<typename UIntType, int w, int n, int m, int r, UIntType a, int u,\n-\t   int s, UIntType b, int t, UIntType c, int l, UIntType val>\n-    const int\n-    mersenne_twister<UIntType,w,n,m,r,a,u,s,b,t,c,l,val>::output_t;\n-  \n-  template<typename UIntType, int w, int n, int m, int r, UIntType a, int u,\n-\t   int s, UIntType b, int t, UIntType c, int l, UIntType val>\n-    const UIntType\n-    mersenne_twister<UIntType,w,n,m,r,a,u,s,b,t,c,l,val>::output_c;\n-  \n-  template<typename UIntType, int w, int n, int m, int r, UIntType a, int u,\n-\t   int s, UIntType b, int t, UIntType c, int l, UIntType val>\n-    const int\n-    mersenne_twister<UIntType,w,n,m,r,a,u,s,b,t,c,l,val>::output_l;\n-#endif\n-\n-  template<typename UIntType, int w, int n, int m, int r, UIntType a, int u,\n-\t   int s, UIntType b, int t, UIntType c, int l, UIntType val>\n-  void\n-  mersenne_twister<UIntType,w,n,m,r,a,u,s,b,t,c,l,val>::twist(int block)\n-  {\n-    const UIntType upper_mask = (~0u) << r;\n-    const UIntType lower_mask = ~upper_mask;\n-\n-    if (block == 0)\n-      {\n-\tfor (int j = n; j < 2*n; ++j)\n-\t  {\n-\t    UIntType y = (x[j-n] & upper_mask) | (x[j-(n-1)] & lower_mask);\n-\t    x[j] = x[j-(n-m)] ^ (y >> 1) ^ (y&1 ? a : 0);\n-\t  }\n-      }\n-    else if (block == 1)\n-      {\n-\t// split loop to avoid costly modulo operations\n-\t{  // extra scope for MSVC brokenness w.r.t. for scope\n-\t  for (int j = 0; j < n-m; ++j)\n-\t    {\n-\t      UIntType y = (x[j+n] & upper_mask) | (x[j+n+1] & lower_mask);\n-\t      x[j] = x[j+n+m] ^ (y >> 1) ^ (y&1 ? a : 0);\n-\t    }\n-\t}\n-\t\n-\tfor (int j = n-m; j < n-1; ++j)\n-\t  {\n-\t    UIntType y = (x[j+n] & upper_mask) | (x[j+n+1] & lower_mask);\n-\t    x[j] = x[j-(n-m)] ^ (y >> 1) ^ (y&1 ? a : 0);\n-\t  }\n-\t// last iteration\n-\tUIntType y = (x[2*n-1] & upper_mask) | (x[0] & lower_mask);\n-\tx[n-1] = x[m-1] ^ (y >> 1) ^ (y&1 ? a : 0);\n-\ti = 0;\n-      }\n-  }\n-\n-  template<typename UIntType, int w, int n, int m, int r, UIntType a, int u,\n-\t   int s, UIntType b, int t, UIntType c, int l, UIntType val>\n-    inline\n-    typename mersenne_twister<UIntType,w,n,m,r,a,u,s,b,t,c,l,val>::result_type\n-    mersenne_twister<UIntType,w,n,m,r,a,u,s,b,t,c,l,val>::operator()()\n-    {\n-      if (i == n)\n-\ttwist(0);\n-      else if (i >= 2*n)\n-\ttwist(1);\n-      // Step 4\n-      UIntType z = x[i];\n-      ++i;\n-      z ^= (z >> u);\n-      z ^= ((z << s) & b);\n-      z ^= ((z << t) & c);\n-      z ^= (z >> l);\n-      return z;\n-    }\n-\n-\n-  typedef mersenne_twister<uint32_t,32,351,175,19,0xccab8ee7,11,\n-\t\t\t   7,0x31b6ab00,15,0xffe50000,17, 0xa37d3c92> mt11213b;\n-\n-  // validation by experiment from mt19937.c\n-  typedef mersenne_twister<uint32_t,32,624,397,31,0x9908b0df,11,\n-\t\t\t   7,0x9d2c5680,15,0xefc60000,18, 3346425566U> mt19937;\n-\n   /** @brief Random number generator, based on the Mersenne twister. */\n   class random_number\n   {\n   private:\n-    mt19937 mt;\n-    uint64_t supremum, RAND_SUP;\n-    double supremum_reciprocal, RAND_SUP_REC;\n-\n-    uint64_t cache;  /* assumed to be twice as long as the usual random number */\n-    int bits_left; /* bit results */\n-\n+    std::tr1::mt19937 \tmt;\n+    uint64_t \t\tsupremum;\n+    uint64_t \t\tRAND_SUP;\n+    double \t\tsupremum_reciprocal;\n+    double \t\tRAND_SUP_REC;\n+\n+    // Assumed to be twice as long as the usual random number.\n+    uint64_t \t\tcache;  \n+\n+    // Bit results.\n+    int bits_left;\n+    \n     static uint32_t\n     scale_down(uint64_t x,\n #if _GLIBCXX_SCALE_DOWN_FPU\n@@ -357,7 +68,7 @@ namespace __gnu_parallel\n #endif\n \t{\n #if _GLIBCXX_SCALE_DOWN_FPU\n-\t  return (uint32_t)(x * supremum_reciprocal);\n+\t  return uint32_t(x * supremum_reciprocal);\n #else\n \t  return static_cast<uint32_t>(x % supremum);\n #endif\n@@ -368,8 +79,8 @@ namespace __gnu_parallel\n     random_number()\n     : mt(0), supremum(0x100000000ULL),\n       RAND_SUP(1ULL << (sizeof(uint32_t) * 8)),\n-      supremum_reciprocal((double)supremum / (double)RAND_SUP),\n-      RAND_SUP_REC(1.0 / (double)RAND_SUP),\n+      supremum_reciprocal(double(supremum) / double(RAND_SUP)),\n+      RAND_SUP_REC(1.0 / double(RAND_SUP)),\n       cache(0), bits_left(0) { }\n \n     /** @brief Constructor.\n@@ -379,8 +90,8 @@ namespace __gnu_parallel\n     random_number(uint32_t seed, uint64_t supremum = 0x100000000ULL)\n     : mt(seed), supremum(supremum),\n       RAND_SUP(1ULL << (sizeof(uint32_t) * 8)),\n-      supremum_reciprocal((double)supremum / (double)RAND_SUP),\n-      RAND_SUP_REC(1.0 / (double)RAND_SUP),\n+      supremum_reciprocal(double(supremum) / double(RAND_SUP)),\n+      RAND_SUP_REC(1.0 / double(RAND_SUP)),\n       cache(0), bits_left(0) { }\n \n     /** @brief Generate unsigned random 32-bit integer. */\n@@ -394,35 +105,9 @@ namespace __gnu_parallel\n     operator()(uint64_t local_supremum)\n     {\n       return scale_down(mt(), local_supremum,\n-\t\t\t(double)local_supremum * RAND_SUP_REC);\n-    }\n-\n-    /** @brief Set the random seed.\n-     *  @param seed to set. */\n-    void\n-    set_seed(uint32_t seed)\n-    {\n-      mt.seed(seed);\n-      cache = mt();\n-      bits_left = 32;\n+\t\t\tdouble(local_supremum * RAND_SUP_REC));\n     }\n \n-    /** @brief Generate a number of random bits, compile-time parameter. */\n-    template<int bits>\n-      unsigned long\n-      genrand_bits()\n-      {\n-\tunsigned long res = cache & ((1 << bits) - 1);\n-\tcache = cache >> bits;\n-\tbits_left -= bits;\n-\tif (bits_left < 32)\n-\t  {\n-\t    cache |= (((uint64_t)mt()) << bits_left);\n-\t    bits_left += 32;\n-\t  }\n-\treturn res;\n-      }\n-\n     /** @brief Generate a number of random bits, run-time parameter.\n      *  @param bits Number of bits to generate. */\n     unsigned long\n@@ -433,7 +118,7 @@ namespace __gnu_parallel\n       bits_left -= bits;\n       if (bits_left < 32)\n \t{\n-\t  cache |= (((uint64_t)mt()) << bits_left);\n+\t  cache |= ((uint64_t(mt())) << bits_left);\n \t  bits_left += 32;\n \t}\n       return res;"}]}