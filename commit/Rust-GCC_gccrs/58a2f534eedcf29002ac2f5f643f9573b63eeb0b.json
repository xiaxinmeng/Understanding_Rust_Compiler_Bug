{"sha": "58a2f534eedcf29002ac2f5f643f9573b63eeb0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThhMmY1MzRlZWRjZjI5MDAyYWMyZjVmNjQzZjk1NzNiNjNlZWIwYg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-01-13T20:13:27Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-01-13T20:13:27Z"}, "message": "integrate.c (expand_inline_function): Recognize (mem (addressof)) and substitute.\n\n        * integrate.c (expand_inline_function): Recognize (mem (addressof))\n        and substitute.  Copy the return value from there into a new pseudo.\n\nFrom-SVN: r24658", "tree": {"sha": "7fc8e0c5ce79eaa4fc2b0feae70e3c15b0eab80b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fc8e0c5ce79eaa4fc2b0feae70e3c15b0eab80b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58a2f534eedcf29002ac2f5f643f9573b63eeb0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58a2f534eedcf29002ac2f5f643f9573b63eeb0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58a2f534eedcf29002ac2f5f643f9573b63eeb0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58a2f534eedcf29002ac2f5f643f9573b63eeb0b/comments", "author": null, "committer": null, "parents": [{"sha": "9b4f2bb71477ba233b1a3be9372f849ee4945029", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b4f2bb71477ba233b1a3be9372f849ee4945029", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b4f2bb71477ba233b1a3be9372f849ee4945029"}], "stats": {"total": 80, "additions": 50, "deletions": 30}, "files": [{"sha": "30fc441fb07e176e145e8d4e79cff18070e09fc8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a2f534eedcf29002ac2f5f643f9573b63eeb0b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a2f534eedcf29002ac2f5f643f9573b63eeb0b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58a2f534eedcf29002ac2f5f643f9573b63eeb0b", "patch": "@@ -1,3 +1,8 @@\n+Wed Jan 13 20:12:37 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* integrate.c (expand_inline_function): Recognize (mem (addressof))\n+\tand substitute.  Copy the return value from there into a new pseudo.\n+\n Thu Jan 14 13:52:42 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n \t* config/c4x/c4x.md (in_annul_slot_3): Correctly allow unarycc "}, {"sha": "e5c716eb67893019e2ca2b8f67bc0298ab6aa252", "filename": "gcc/integrate.c", "status": "modified", "additions": 45, "deletions": 30, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a2f534eedcf29002ac2f5f643f9573b63eeb0b/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a2f534eedcf29002ac2f5f643f9573b63eeb0b/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=58a2f534eedcf29002ac2f5f643f9573b63eeb0b", "patch": "@@ -1709,46 +1709,61 @@ expand_inline_function (fndecl, parms, target, ignore, type,\n \n   map->inline_target = 0;\n   loc = DECL_RTL (DECL_RESULT (fndecl));\n+\n   if (TYPE_MODE (type) == VOIDmode)\n     /* There is no return value to worry about.  */\n     ;\n   else if (GET_CODE (loc) == MEM)\n     {\n-      if (! structure_value_addr || ! aggregate_value_p (DECL_RESULT (fndecl)))\n-\tabort ();\n+      if (GET_CODE (XEXP (loc, 0)) == ADDRESSOF)\n+\t{\n+\t  temp = copy_rtx_and_substitute (loc, map);\n+\t  subst_constants (&temp, NULL_RTX, map);\n+\t  apply_change_group ();\n+\t  target = temp;\n+\t}\n+      else\n+\t{\n+\t  if (! structure_value_addr\n+\t      || ! aggregate_value_p (DECL_RESULT (fndecl)))\n+\t    abort ();\n   \n-      /* Pass the function the address in which to return a structure value.\n-\t Note that a constructor can cause someone to call us with\n-\t STRUCTURE_VALUE_ADDR, but the initialization takes place\n-\t via the first parameter, rather than the struct return address.\n+\t  /* Pass the function the address in which to return a structure\n+\t     value.  Note that a constructor can cause someone to call us\n+\t     with STRUCTURE_VALUE_ADDR, but the initialization takes place\n+\t     via the first parameter, rather than the struct return address.\n \n-\t We have two cases:  If the address is a simple register indirect,\n-\t use the mapping mechanism to point that register to our structure\n-\t return address.  Otherwise, store the structure return value into\n-\t the place that it will be referenced from.  */\n+\t     We have two cases: If the address is a simple register\n+\t     indirect, use the mapping mechanism to point that register to\n+\t     our structure return address.  Otherwise, store the structure\n+\t     return value into the place that it will be referenced from.  */\n \n-      if (GET_CODE (XEXP (loc, 0)) == REG)\n-\t{\n-\t  temp = force_reg (Pmode,\n-\t\t\t    force_operand (structure_value_addr, NULL_RTX));\n-\t  map->reg_map[REGNO (XEXP (loc, 0))] = temp;\n-\t  if ((CONSTANT_P (structure_value_addr)\n-\t       || GET_CODE (structure_value_addr) == ADDRESSOF\n-\t       || (GET_CODE (structure_value_addr) == PLUS\n-\t\t   && XEXP (structure_value_addr, 0) == virtual_stack_vars_rtx\n-\t\t   && GET_CODE (XEXP (structure_value_addr, 1)) == CONST_INT))\n-\t      && REGNO (temp) < map->const_equiv_map_size)\n+\t  if (GET_CODE (XEXP (loc, 0)) == REG)\n \t    {\n-\t      map->const_equiv_map[REGNO (temp)] = structure_value_addr;\n-\t      map->const_age_map[REGNO (temp)] = CONST_AGE_PARM;\n+\t      temp = force_operand (structure_value_addr, NULL_RTX);\n+\t      temp = force_reg (Pmode, temp);\n+\t      map->reg_map[REGNO (XEXP (loc, 0))] = temp;\n+\n+\t      if ((CONSTANT_P (structure_value_addr)\n+\t\t   || GET_CODE (structure_value_addr) == ADDRESSOF\n+\t\t   || (GET_CODE (structure_value_addr) == PLUS\n+\t\t       && (XEXP (structure_value_addr, 0)\n+\t\t\t   == virtual_stack_vars_rtx)\n+\t\t       && (GET_CODE (XEXP (structure_value_addr, 1))\n+\t\t\t   == CONST_INT)))\n+\t\t  && REGNO (temp) < map->const_equiv_map_size)\n+\t\t{\n+\t\t  map->const_equiv_map[REGNO (temp)] = structure_value_addr;\n+\t\t  map->const_age_map[REGNO (temp)] = CONST_AGE_PARM;\n+\t\t}\n+\t    }\n+\t  else\n+\t    {\n+\t      temp = copy_rtx_and_substitute (loc, map);\n+\t      subst_constants (&temp, NULL_RTX, map);\n+\t      apply_change_group ();\n+\t      emit_move_insn (temp, structure_value_addr);\n \t    }\n-\t}\n-      else\n-\t{\n-\t  temp = copy_rtx_and_substitute (loc, map);\n-\t  subst_constants (&temp, NULL_RTX, map);\n-\t  apply_change_group ();\n-\t  emit_move_insn (temp, structure_value_addr);\n \t}\n     }\n   else if (ignore)"}]}