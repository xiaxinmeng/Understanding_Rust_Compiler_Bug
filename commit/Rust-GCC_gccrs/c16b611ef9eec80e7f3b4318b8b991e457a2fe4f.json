{"sha": "c16b611ef9eec80e7f3b4318b8b991e457a2fe4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE2YjYxMWVmOWVlYzgwZTdmM2I0MzE4YjhiOTkxZTQ1N2EyZmU0Zg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-10-27T09:45:42Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-10-27T09:45:42Z"}, "message": "(pushdecl): Don't test TREE_PUBLIC when deciding whether to register a\nduplicate decl in the current block.\n\nFrom-SVN: r10528", "tree": {"sha": "7d7c19c7cf148d7d076132201a50102090c549e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d7c19c7cf148d7d076132201a50102090c549e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c16b611ef9eec80e7f3b4318b8b991e457a2fe4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c16b611ef9eec80e7f3b4318b8b991e457a2fe4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c16b611ef9eec80e7f3b4318b8b991e457a2fe4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c16b611ef9eec80e7f3b4318b8b991e457a2fe4f/comments", "author": null, "committer": null, "parents": [{"sha": "926b1b9906b3671ccc2f31576c0c48c5bf011d23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/926b1b9906b3671ccc2f31576c0c48c5bf011d23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/926b1b9906b3671ccc2f31576c0c48c5bf011d23"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "ca33a4c99f3a60f753e7926eaa11998555ece894", "filename": "gcc/c-decl.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c16b611ef9eec80e7f3b4318b8b991e457a2fe4f/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c16b611ef9eec80e7f3b4318b8b991e457a2fe4f/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=c16b611ef9eec80e7f3b4318b8b991e457a2fe4f", "patch": "@@ -1900,6 +1900,7 @@ pushdecl (x)\n     {\n       char *file;\n       int line;\n+      int declared_global;\n \n       /* Don't type check externs here when -traditional.  This is so that\n \t code with conflicting declarations inside blocks will get warnings\n@@ -1921,6 +1922,9 @@ pushdecl (x)\n \t  line = DECL_SOURCE_LINE (t);\n \t}\n \n+      /* duplicate_decls might write to TREE_PUBLIC (x) and DECL_EXTERNAL (x)\n+\t to make it identical to the initial declaration.  */\n+      declared_global = TREE_PUBLIC (x) || DECL_EXTERNAL (x);\n       if (t != 0 && duplicate_decls (x, t))\n \t{\n \t  if (TREE_CODE (t) == PARM_DECL)\n@@ -1934,7 +1938,10 @@ pushdecl (x)\n \t     warn.  But don't complain if -traditional,\n \t     since traditional compilers don't complain.  */\n \t  if (!flag_traditional && TREE_PUBLIC (name)\n+\n+\t      /* should this be '&& ! declared_global' ?  */\n \t      && ! TREE_PUBLIC (x) && ! DECL_EXTERNAL (x)\n+\n \t      /* We used to warn also for explicit extern followed by static,\n \t\t but sometimes you need to do it that way.  */\n \t      && IDENTIFIER_IMPLICIT_DECL (name) != 0)\n@@ -1949,7 +1956,9 @@ pushdecl (x)\n \t  /* If this is a global decl, and there exists a conflicting local\n \t     decl in a parent block, then we can't return as yet, because we\n \t     need to register this decl in the current binding block.  */\n-\t  if (! TREE_PUBLIC (x) || lookup_name (name) == t)\n+\t  /* A test for TREE_PUBLIC (x) will fail for variables that have\n+\t     been declared static first, and extern now.  */\n+\t  if (! declared_global || lookup_name (name) == t)\n \t    return t;\n \t}\n "}]}