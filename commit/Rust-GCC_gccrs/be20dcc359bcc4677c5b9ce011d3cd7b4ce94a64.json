{"sha": "be20dcc359bcc4677c5b9ce011d3cd7b4ce94a64", "node_id": "C_kwDOANBUbNoAKGJlMjBkY2MzNTliY2M0Njc3YzViOWNlMDExZDNjZDdiNGNlOTRhNjQ", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-03-10T15:14:20Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-03-15T18:23:06Z"}, "message": "c++: ICE with constexpr lambda [PR107280]\n\nWe crash here since r10-3661, the store_init_value hunk in particular.\nBefore, we called cp_fully_fold_init, so e.g.\n\n  {.str=VIEW_CONVERT_EXPR<char[8]>(\"\")}\n\nwas folded into\n\n  {.str=\"\"}\n\nbut now we don't fold and keep the VCE around, and it causes trouble in\ncxx_eval_store_expression: in the !refs->is_empty () loop we descend on\n.str's initializer but since it's wrapped in a VCE, we skip the STRING_CST\ncheck and then crash on the CONSTRUCTOR_NO_CLEARING.\n\n\tPR c++/107280\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.cc (cxx_eval_store_expression): Strip location wrappers.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1z/constexpr-lambda28.C: New test.", "tree": {"sha": "1a4fe7754ee9007fad482b065613da8ce7f9cd1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a4fe7754ee9007fad482b065613da8ce7f9cd1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be20dcc359bcc4677c5b9ce011d3cd7b4ce94a64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be20dcc359bcc4677c5b9ce011d3cd7b4ce94a64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be20dcc359bcc4677c5b9ce011d3cd7b4ce94a64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be20dcc359bcc4677c5b9ce011d3cd7b4ce94a64/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd394c542b73cab89228f4aad7afe757e58ef126", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd394c542b73cab89228f4aad7afe757e58ef126", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd394c542b73cab89228f4aad7afe757e58ef126"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "abf6ee560c524664ed8d25cd1ae5dffdd46b1cfb", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be20dcc359bcc4677c5b9ce011d3cd7b4ce94a64/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be20dcc359bcc4677c5b9ce011d3cd7b4ce94a64/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=be20dcc359bcc4677c5b9ce011d3cd7b4ce94a64", "patch": "@@ -6033,7 +6033,8 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n \t  *valp = build_constructor (type, NULL);\n \t  CONSTRUCTOR_NO_CLEARING (*valp) = no_zero_init;\n \t}\n-      else if (TREE_CODE (*valp) == STRING_CST)\n+      else if (STRIP_ANY_LOCATION_WRAPPER (*valp),\n+\t       TREE_CODE (*valp) == STRING_CST)\n \t{\n \t  /* An array was initialized with a string constant, and now\n \t     we're writing into one of its elements.  Explode the"}, {"sha": "aafbfddd8b9a99a4ddc8ec82c38e76f55928cdd9", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-lambda28.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be20dcc359bcc4677c5b9ce011d3cd7b4ce94a64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be20dcc359bcc4677c5b9ce011d3cd7b4ce94a64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda28.C?ref=be20dcc359bcc4677c5b9ce011d3cd7b4ce94a64", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/107280\n+// { dg-do compile { target c++17 } }\n+\n+struct string {\n+  char str[8] = \"\";\n+};\n+template <int, int> constexpr void\n+test ()\n+{\n+  string str{};\n+  auto append = [&](const char *s) { *str.str = *s; };\n+  append(\"\");\n+}\n+\n+static_assert ((test<true, true>(), true), \"\");"}]}