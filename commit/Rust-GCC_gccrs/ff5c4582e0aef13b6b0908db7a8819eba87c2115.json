{"sha": "ff5c4582e0aef13b6b0908db7a8819eba87c2115", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY1YzQ1ODJlMGFlZjEzYjZiMDkwOGRiN2E4ODE5ZWJhODdjMjExNQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2005-06-03T13:41:39Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-06-03T13:41:39Z"}, "message": "cgraph.c, [...]: Fix comment typos.\n\n\t* cgraph.c, cgraphunit.c, config/mips/mips.c: Fix comment\n\ttypos.\n\nFrom-SVN: r100538", "tree": {"sha": "30a7335ac20350263b282aa5d18ee12a1d28d045", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30a7335ac20350263b282aa5d18ee12a1d28d045"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff5c4582e0aef13b6b0908db7a8819eba87c2115", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff5c4582e0aef13b6b0908db7a8819eba87c2115", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff5c4582e0aef13b6b0908db7a8819eba87c2115", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff5c4582e0aef13b6b0908db7a8819eba87c2115/comments", "author": null, "committer": null, "parents": [{"sha": "88fbbf4b49abc52b9d3d3d5a7c48bed380492140", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88fbbf4b49abc52b9d3d3d5a7c48bed380492140", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88fbbf4b49abc52b9d3d3d5a7c48bed380492140"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "465f49af0c1f5968b1bc605d5b761b9b6d21c99a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff5c4582e0aef13b6b0908db7a8819eba87c2115/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff5c4582e0aef13b6b0908db7a8819eba87c2115/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff5c4582e0aef13b6b0908db7a8819eba87c2115", "patch": "@@ -1,3 +1,8 @@\n+2005-06-03  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* cgraph.c, cgraphunit.c, config/mips/mips.c: Fix comment\n+\ttypos.\n+\n 2005-06-03  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* collect2.c (maybe_unlink): Use unlink_if_ordinary."}, {"sha": "b9b1b14f646e683555a8521f77a5330c4e18d8af", "filename": "gcc/cgraph.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff5c4582e0aef13b6b0908db7a8819eba87c2115/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff5c4582e0aef13b6b0908db7a8819eba87c2115/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=ff5c4582e0aef13b6b0908db7a8819eba87c2115", "patch": "@@ -860,7 +860,7 @@ cgraph_varpool_finalize_decl (tree decl)\n \n   if (decide_is_variable_needed (node, decl))\n     cgraph_varpool_mark_needed_node (node);\n-  /* Since we reclaim unrechable nodes at the end of every language\n+  /* Since we reclaim unreachable nodes at the end of every language\n      level unit, we need to be conservative about possible entry points\n      there.  */\n   if (TREE_PUBLIC (decl) && !DECL_COMDAT (decl) && !DECL_EXTERNAL (decl))\n@@ -987,12 +987,12 @@ cgraph_function_body_availability (struct cgraph_node *node)\n      care at least of two notable extensions - the COMDAT functions\n      used to share template instantiations in C++ (this is symmetric\n      to code cp_cannot_inline_tree_fn and probably shall be shared and\n-     the inlinability hooks completelly elliminated).\n+     the inlinability hooks completely eliminated).\n \n      ??? Does the C++ one definition rule allow us to always return\n      AVAIL_AVAILABLE here?  That would be good reason to preserve this\n      hook Similarly deal with extern inline functions - this is again\n-     neccesary to get C++ shared functions having keyed templates\n+     necessary to get C++ shared functions having keyed templates\n      right and in the C extension documentation we probably should\n      document the requirement of both versions of function (extern\n      inline and offline) having same side effect characteristics as\n@@ -1016,7 +1016,7 @@ cgraph_variable_initializer_availability (struct cgraph_varpool_node *node)\n     return AVAIL_NOT_AVAILABLE;\n   if (!TREE_PUBLIC (node->decl))\n     return AVAIL_AVAILABLE;\n-  /* If the variable can be overwritted, return OVERWRITABLE.  Takes\n+  /* If the variable can be overwritten, return OVERWRITABLE.  Takes\n      care of at least two notable extensions - the COMDAT variables\n      used to share template instantiations in C++.  */\n   if (!(*targetm.binds_local_p) (node->decl) && !DECL_COMDAT (node->decl))"}, {"sha": "9deacf4c4002f325af541cad7bbf890c590b257e", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff5c4582e0aef13b6b0908db7a8819eba87c2115/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff5c4582e0aef13b6b0908db7a8819eba87c2115/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=ff5c4582e0aef13b6b0908db7a8819eba87c2115", "patch": "@@ -421,7 +421,7 @@ cgraph_finalize_function (tree decl, bool nested)\n   if (decide_is_function_needed (node, decl))\n     cgraph_mark_needed_node (node);\n \n-  /* Since we reclaim unrechable nodes at the end of every language\n+  /* Since we reclaim unreachable nodes at the end of every language\n      level unit, we need to be conservative about possible entry points\n      there.  */\n   if (TREE_PUBLIC (decl) && !DECL_COMDAT (decl) && !DECL_EXTERNAL (decl))"}, {"sha": "155682aa624e96169c704ddbd98f7c7428442624", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff5c4582e0aef13b6b0908db7a8819eba87c2115/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff5c4582e0aef13b6b0908db7a8819eba87c2115/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=ff5c4582e0aef13b6b0908db7a8819eba87c2115", "patch": "@@ -713,7 +713,7 @@ const struct mips_cpu_info mips_cpu_info_table[] = {\n };\n \n /* Default costs. If these are used for a processor we should look\n-   up the acutal costs.  */\n+   up the actual costs.  */\n #define DEFAULT_COSTS COSTS_N_INSNS (6),  /* fp_add */       \\\n                       COSTS_N_INSNS (7),  /* fp_mult_sf */   \\\n                       COSTS_N_INSNS (8),  /* fp_mult_df */   \\\n@@ -2361,7 +2361,8 @@ mips_rtx_costs (rtx x, int code, int outer_code, int *total)\n \n \t     Given the choice between \"li R1,0...255\" and \"move R1,R2\"\n \t     (where R2 is a known constant), it is usually better to use \"li\",\n-\t     since we do not want to unnessarily extend the lifetime of R2.  */\n+\t     since we do not want to unnecessarily extend the lifetime\n+\t     of R2.  */\n \t  if (outer_code == SET\n \t      && INTVAL (x) >= 0\n \t      && INTVAL (x) < 256)"}]}