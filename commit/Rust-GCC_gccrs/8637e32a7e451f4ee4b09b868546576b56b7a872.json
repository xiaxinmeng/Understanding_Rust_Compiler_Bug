{"sha": "8637e32a7e451f4ee4b09b868546576b56b7a872", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYzN2UzMmE3ZTQ1MWY0ZWU0YjA5Yjg2ODU0NjU3NmI1NmI3YTg3Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-05-17T07:37:59Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-05-17T07:37:59Z"}, "message": "re PR target/48986 (Missed optimization in atomic decrement on x86/x64)\n\n\tPR target/48986\n\t* config/i386/sync.md (sync_old_add<mode>): Relax operand 2\n\tpredicate to allow CONST_INT.\n\t(*sync_old_add_cmp<mode>): New insn and peephole2 for it.\n\nFrom-SVN: r173816", "tree": {"sha": "eff22f2c453b9e9e8a47143bbd82009f1d7b9224", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eff22f2c453b9e9e8a47143bbd82009f1d7b9224"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8637e32a7e451f4ee4b09b868546576b56b7a872", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8637e32a7e451f4ee4b09b868546576b56b7a872", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8637e32a7e451f4ee4b09b868546576b56b7a872", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8637e32a7e451f4ee4b09b868546576b56b7a872/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "067e2f069d5b5ad051c46766935a42ba59a20d61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/067e2f069d5b5ad051c46766935a42ba59a20d61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/067e2f069d5b5ad051c46766935a42ba59a20d61"}], "stats": {"total": 68, "additions": 66, "deletions": 2}, "files": [{"sha": "50b035615f8bc931348fc8490efc806f9ebd5b21", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8637e32a7e451f4ee4b09b868546576b56b7a872/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8637e32a7e451f4ee4b09b868546576b56b7a872/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8637e32a7e451f4ee4b09b868546576b56b7a872", "patch": "@@ -1,3 +1,10 @@\n+2011-05-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/48986\n+\t* config/i386/sync.md (sync_old_add<mode>): Relax operand 2\n+\tpredicate to allow CONST_INT.\n+\t(*sync_old_add_cmp<mode>): New insn and peephole2 for it.\n+\n 2011-05-16  Joseph Myers  <joseph@codesourcery.com>\n \n \t* opts-common.c (opt_enum_arg_to_value): New."}, {"sha": "20378d090bf63e4b1f8c6329b05305e0e3ef909a", "filename": "gcc/config/i386/sync.md", "status": "modified", "additions": 59, "deletions": 2, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8637e32a7e451f4ee4b09b868546576b56b7a872/gcc%2Fconfig%2Fi386%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8637e32a7e451f4ee4b09b868546576b56b7a872/gcc%2Fconfig%2Fi386%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsync.md?ref=8637e32a7e451f4ee4b09b868546576b56b7a872", "patch": "@@ -1,5 +1,5 @@\n ;; GCC machine description for i386 synchronization instructions.\n-;; Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010\n+;; Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011\n ;; Free Software Foundation, Inc.\n ;;\n ;; This file is part of GCC.\n@@ -164,17 +164,74 @@\n   \"!TARGET_64BIT && TARGET_CMPXCHG8B && flag_pic\"\n   \"xchg{l}\\t%%ebx, %3\\;lock{%;} cmpxchg8b\\t%1\\;xchg{l}\\t%%ebx, %3\")\n \n+;; For operand 2 nonmemory_operand predicate is used instead of\n+;; register_operand to allow combiner to better optimize atomic\n+;; additions of constants.\n (define_insn \"sync_old_add<mode>\"\n   [(set (match_operand:SWI 0 \"register_operand\" \"=<r>\")\n \t(unspec_volatile:SWI\n \t  [(match_operand:SWI 1 \"memory_operand\" \"+m\")] UNSPECV_XCHG))\n    (set (match_dup 1)\n \t(plus:SWI (match_dup 1)\n-\t\t  (match_operand:SWI 2 \"register_operand\" \"0\")))\n+\t\t  (match_operand:SWI 2 \"nonmemory_operand\" \"0\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_XADD\"\n   \"lock{%;} xadd{<imodesuffix>}\\t{%0, %1|%1, %0}\")\n \n+;; This peephole2 and following insn optimize\n+;; __sync_fetch_and_add (x, -N) == N into just lock {add,sub,inc,dec}\n+;; followed by testing of flags instead of lock xadd and comparisons.\n+(define_peephole2\n+  [(set (match_operand:SWI 0 \"register_operand\" \"\")\n+\t(match_operand:SWI 2 \"const_int_operand\" \"\"))\n+   (parallel [(set (match_dup 0)\n+\t\t   (unspec_volatile:SWI\n+\t\t     [(match_operand:SWI 1 \"memory_operand\" \"\")] UNSPECV_XCHG))\n+\t      (set (match_dup 1)\n+\t\t   (plus:SWI (match_dup 1)\n+\t\t\t     (match_dup 0)))\n+\t      (clobber (reg:CC FLAGS_REG))])\n+   (set (reg:CCZ FLAGS_REG)\n+\t(compare:CCZ (match_dup 0)\n+\t\t     (match_operand:SWI 3 \"const_int_operand\" \"\")))]\n+  \"peep2_reg_dead_p (3, operands[0])\n+   && (unsigned HOST_WIDE_INT) INTVAL (operands[2])\n+      == -(unsigned HOST_WIDE_INT) INTVAL (operands[3])\n+   && !reg_overlap_mentioned_p (operands[0], operands[1])\"\n+  [(parallel [(set (reg:CCZ FLAGS_REG)\n+\t\t   (compare:CCZ (unspec_volatile:SWI [(match_dup 1)]\n+\t\t\t\t\t\t     UNSPECV_XCHG)\n+\t\t\t\t(match_dup 3)))\n+\t      (set (match_dup 1)\n+\t\t   (plus:SWI (match_dup 1)\n+\t\t\t     (match_dup 2)))])])\n+\n+(define_insn \"*sync_old_add_cmp<mode>\"\n+  [(set (reg:CCZ FLAGS_REG)\n+\t(compare:CCZ (unspec_volatile:SWI\n+\t\t       [(match_operand:SWI 0 \"memory_operand\" \"+m\")]\n+\t\t       UNSPECV_XCHG)\n+\t\t     (match_operand:SWI 2 \"const_int_operand\" \"i\")))\n+   (set (match_dup 0)\n+\t(plus:SWI (match_dup 0)\n+\t\t  (match_operand:SWI 1 \"const_int_operand\" \"i\")))]\n+  \"(unsigned HOST_WIDE_INT) INTVAL (operands[1])\n+   == -(unsigned HOST_WIDE_INT) INTVAL (operands[2])\"\n+{\n+  if (TARGET_USE_INCDEC)\n+    {\n+      if (operands[1] == const1_rtx)\n+\treturn \"lock{%;} inc{<imodesuffix>}\\t%0\";\n+      if (operands[1] == constm1_rtx)\n+\treturn \"lock{%;} dec{<imodesuffix>}\\t%0\";\n+    }\n+\n+  if (x86_maybe_negate_const_int (&operands[1], <MODE>mode))\n+    return \"lock{%;} sub{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n+\n+  return \"lock{%;} add{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n+})\n+\n ;; Recall that xchg implicitly sets LOCK#, so adding it again wastes space.\n (define_insn \"sync_lock_test_and_set<mode>\"\n   [(set (match_operand:SWI 0 \"register_operand\" \"=<r>\")"}]}