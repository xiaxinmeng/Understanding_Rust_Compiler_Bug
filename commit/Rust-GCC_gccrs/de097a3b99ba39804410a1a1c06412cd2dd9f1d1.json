{"sha": "de097a3b99ba39804410a1a1c06412cd2dd9f1d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGUwOTdhM2I5OWJhMzk4MDQ0MTBhMWExYzA2NDEyY2QyZGQ5ZjFkMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2006-09-10T21:27:36Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2006-09-10T21:27:36Z"}, "message": "re PR rtl-optimization/28636 (Miscompiled loop)\n\n\tPR rtl-optimization/28636\n\t* combine.c (force_to_mode): Test for side-effects before\n\tsubstituting by zero.\n\t(simplify_shift_const): Likewise for zero or other constants.\n\nFrom-SVN: r116827", "tree": {"sha": "d3c5020c21152292317e1a64bd9a4574e3d04193", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3c5020c21152292317e1a64bd9a4574e3d04193"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de097a3b99ba39804410a1a1c06412cd2dd9f1d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de097a3b99ba39804410a1a1c06412cd2dd9f1d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de097a3b99ba39804410a1a1c06412cd2dd9f1d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de097a3b99ba39804410a1a1c06412cd2dd9f1d1/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4fe337f67a76d1b8288a3c63dec86dbaed77da4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fe337f67a76d1b8288a3c63dec86dbaed77da4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fe337f67a76d1b8288a3c63dec86dbaed77da4c"}], "stats": {"total": 75, "additions": 63, "deletions": 12}, "files": [{"sha": "bbf36261fb9463a14354946122a839509710375f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de097a3b99ba39804410a1a1c06412cd2dd9f1d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de097a3b99ba39804410a1a1c06412cd2dd9f1d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=de097a3b99ba39804410a1a1c06412cd2dd9f1d1", "patch": "@@ -1,3 +1,10 @@\n+2006-09-10  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR rtl-optimization/28636\n+\t* combine.c (force_to_mode): Test for side-effects before\n+\tsubstituting by zero.\n+\t(simplify_shift_const): Likewise for zero or other constants.\n+\n 2006-09-10  Steven Bosscher  <steven@gcc.gnu.org>\n \n \tPR middle-end/26983"}, {"sha": "0f4ea02970f15c62893bfc49e6b0f5a04238f669", "filename": "gcc/combine.c", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de097a3b99ba39804410a1a1c06412cd2dd9f1d1/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de097a3b99ba39804410a1a1c06412cd2dd9f1d1/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=de097a3b99ba39804410a1a1c06412cd2dd9f1d1", "patch": "@@ -6860,7 +6860,7 @@ force_to_mode (rtx x, enum machine_mode mode, unsigned HOST_WIDE_INT mask,\n   nonzero = nonzero_bits (x, mode);\n \n   /* If none of the bits in X are needed, return a zero.  */\n-  if (! just_select && (nonzero & mask) == 0)\n+  if (!just_select && (nonzero & mask) == 0 && !side_effects_p (x))\n     x = const0_rtx;\n \n   /* If X is a CONST_INT, return a new one.  Do this here since the\n@@ -8637,14 +8637,14 @@ simplify_shift_const_1 (enum rtx_code code, enum machine_mode result_mode,\n \t      == 0))\n \tcode = LSHIFTRT;\n \n-      if (code == LSHIFTRT\n-\t  && GET_MODE_BITSIZE (shift_mode) <= HOST_BITS_PER_WIDE_INT\n-\t  && !(nonzero_bits (varop, shift_mode) >> count))\n-\tvarop = const0_rtx;\n-      if (code == ASHIFT\n-\t  && GET_MODE_BITSIZE (shift_mode) <= HOST_BITS_PER_WIDE_INT\n-\t  && !((nonzero_bits (varop, shift_mode) << count)\n-\t       & GET_MODE_MASK (shift_mode)))\n+      if (((code == LSHIFTRT\n+\t    && GET_MODE_BITSIZE (shift_mode) <= HOST_BITS_PER_WIDE_INT\n+\t    && !(nonzero_bits (varop, shift_mode) >> count))\n+\t   || (code == ASHIFT\n+\t       && GET_MODE_BITSIZE (shift_mode) <= HOST_BITS_PER_WIDE_INT\n+\t       && !((nonzero_bits (varop, shift_mode) << count)\n+\t\t    & GET_MODE_MASK (shift_mode))))\n+\t  && !side_effects_p (varop))\n \tvarop = const0_rtx;\n \n       switch (GET_CODE (varop))\n@@ -9229,9 +9229,12 @@ simplify_shift_const_1 (enum rtx_code code, enum machine_mode result_mode,\n       if (outer_op == AND)\n \tx = simplify_and_const_int (NULL_RTX, result_mode, x, outer_const);\n       else if (outer_op == SET)\n-\t/* This means that we have determined that the result is\n-\t   equivalent to a constant.  This should be rare.  */\n-\tx = GEN_INT (outer_const);\n+\t{\n+\t  /* This means that we have determined that the result is\n+\t     equivalent to a constant.  This should be rare.  */\n+\t  if (!side_effects_p (x))\n+\t    x = GEN_INT (outer_const);\n+\t}\n       else if (GET_RTX_CLASS (outer_op) == RTX_UNARY)\n \tx = simplify_gen_unary (outer_op, result_mode, x, result_mode);\n       else"}, {"sha": "45bd6ed94b21635e9c519194aa2ba92746068300", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de097a3b99ba39804410a1a1c06412cd2dd9f1d1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de097a3b99ba39804410a1a1c06412cd2dd9f1d1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=de097a3b99ba39804410a1a1c06412cd2dd9f1d1", "patch": "@@ -1,3 +1,7 @@\n+2006-09-10  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* gcc.c-torture/execute/20060910-1.c: New test.\n+\n 2006-09-10  Steven Bosscher  <steven@gcc.gnu.org>\n \n \tPR middle-end/26983"}, {"sha": "78bf301397f6b5a065c87b5b1e10051f1b1bba99", "filename": "gcc/testsuite/gcc.c-torture/execute/20060910-1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de097a3b99ba39804410a1a1c06412cd2dd9f1d1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20060910-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de097a3b99ba39804410a1a1c06412cd2dd9f1d1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20060910-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20060910-1.c?ref=de097a3b99ba39804410a1a1c06412cd2dd9f1d1", "patch": "@@ -0,0 +1,37 @@\n+/* PR rtl-optimization/28636 */\n+/* Origin: Andreas Schwab <schwab@suse.de> */\n+\n+extern void abort(void);\n+\n+struct input_ty\n+{\n+  unsigned char *buffer_position;\n+  unsigned char *buffer_end;\n+};\n+\n+int input_getc_complicated (struct input_ty *x) { return 0; }\n+\n+int check_header (struct input_ty *deeper)\n+{\n+  unsigned len;\n+  for (len = 0; len < 6; len++)\n+    if (((deeper)->buffer_position < (deeper)->buffer_end\n+         ? *((deeper)->buffer_position)++\n+         : input_getc_complicated((deeper))) < 0)\n+      return 0;\n+  return 1;\n+}\n+\n+struct input_ty s;\n+unsigned char b[6];\n+\n+int main (void)\n+{\n+  s.buffer_position = b;\n+  s.buffer_end = b + sizeof b;\n+  if (!check_header(&s))\n+    abort();\n+  if (s.buffer_position != s.buffer_end)\n+    abort();\n+  return 0;\n+}"}]}