{"sha": "fbd603c43d7315bf2b29880548cb80ef4d8f62cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJkNjAzYzQzZDczMTViZjJiMjk4ODA1NDhjYjgwZWY0ZDhmNjJjZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-03-16T21:16:33Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-03-16T21:16:33Z"}, "message": "re PR c++/79797 (ICE with NSDMI, this pointer  and constexpr)\n\n\tPR c++/79797\n\t* constexpr.c (lookup_placeholder): Tweak.\n\nFrom-SVN: r246210", "tree": {"sha": "ed1b3919e2bdb89acc5d15fb8dcd211c60dd70e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed1b3919e2bdb89acc5d15fb8dcd211c60dd70e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbd603c43d7315bf2b29880548cb80ef4d8f62cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbd603c43d7315bf2b29880548cb80ef4d8f62cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbd603c43d7315bf2b29880548cb80ef4d8f62cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbd603c43d7315bf2b29880548cb80ef4d8f62cd/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "207f34233c1d3fff9e07ecf2bd7dc30d86822e66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/207f34233c1d3fff9e07ecf2bd7dc30d86822e66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/207f34233c1d3fff9e07ecf2bd7dc30d86822e66"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "99836fbaeea83511c77de6a15f8db7050562f4cc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd603c43d7315bf2b29880548cb80ef4d8f62cd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd603c43d7315bf2b29880548cb80ef4d8f62cd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fbd603c43d7315bf2b29880548cb80ef4d8f62cd", "patch": "@@ -1,3 +1,8 @@\n+2017-03-16  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/79797\n+\t* constexpr.c (lookup_placeholder): Tweak.\n+\n 2017-03-15  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/80043 - ICE with -fpermissive"}, {"sha": "4136b349282f99481e83a8261e616c18d0d88589", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd603c43d7315bf2b29880548cb80ef4d8f62cd/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd603c43d7315bf2b29880548cb80ef4d8f62cd/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=fbd603c43d7315bf2b29880548cb80ef4d8f62cd", "patch": "@@ -3832,14 +3832,17 @@ cxx_eval_switch_expr (const constexpr_ctx *ctx, tree t,\n static tree\n lookup_placeholder (const constexpr_ctx *ctx, bool lval, tree type)\n {\n-  if (!ctx || !ctx->ctor || (lval && !ctx->object))\n+  if (!ctx)\n     return NULL_TREE;\n \n   /* We could use ctx->object unconditionally, but using ctx->ctor when we\n      can is a minor optimization.  */\n-  if (!lval && same_type_p (TREE_TYPE (ctx->ctor), type))\n+  if (!lval && ctx->ctor && same_type_p (TREE_TYPE (ctx->ctor), type))\n     return ctx->ctor;\n \n+  if (!ctx->object)\n+    return NULL_TREE;\n+\n   /* Since an object cannot have a field of its own type, we can search outward\n      from ctx->object to find the unique containing object of TYPE.  */\n   tree ob = ctx->object;"}]}