{"sha": "5b55e6e333c97aaefc1db6c9d8411de578d05614", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI1NWU2ZTMzM2M5N2FhZWZjMWRiNmM5ZDg0MTFkZTU3OGQwNTYxNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-01-26T10:30:36Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-01-26T10:30:36Z"}, "message": "re PR tree-optimization/81082 (Failure to vectorise after reassociating index computation)\n\n2018-01-26  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/81082\n\t* fold-const.c (fold_plusminus_mult_expr): Do not perform the\n\tassociation if it requires casting to unsigned.\n\t* match.pd ((A * C) +- (B * C) -> (A+-B)): New patterns derived\n\tfrom fold_plusminus_mult_expr to catch important cases late when\n\trange info is available.\n\n\t* gcc.dg/vect/pr81082.c: New testcase.\n\t* gcc.dg/tree-ssa/loop-15.c: XFAIL the (int)((unsigned)n + -1U) * n + n\n\tsimplification to n * n.\n\nFrom-SVN: r257077", "tree": {"sha": "21db3fe6e8247b8085351073439c65bef3bda73c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21db3fe6e8247b8085351073439c65bef3bda73c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b55e6e333c97aaefc1db6c9d8411de578d05614", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b55e6e333c97aaefc1db6c9d8411de578d05614", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b55e6e333c97aaefc1db6c9d8411de578d05614", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b55e6e333c97aaefc1db6c9d8411de578d05614/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "af2e3244f56152d94a18c1339a18a4c0b0e33060", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af2e3244f56152d94a18c1339a18a4c0b0e33060", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af2e3244f56152d94a18c1339a18a4c0b0e33060"}], "stats": {"total": 72, "additions": 67, "deletions": 5}, "files": [{"sha": "79538c49837a34caf577830a59572b93f2ddb324", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b55e6e333c97aaefc1db6c9d8411de578d05614/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b55e6e333c97aaefc1db6c9d8411de578d05614/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5b55e6e333c97aaefc1db6c9d8411de578d05614", "patch": "@@ -1,3 +1,12 @@\n+2018-01-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/81082\n+\t* fold-const.c (fold_plusminus_mult_expr): Do not perform the\n+\tassociation if it requires casting to unsigned.\n+\t* match.pd ((A * C) +- (B * C) -> (A+-B)): New patterns derived\n+\tfrom fold_plusminus_mult_expr to catch important cases late when\n+\trange info is available.\n+\n 2018-01-26  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config/i386/sol2.h (USE_HIDDEN_LINKONCE): Remove."}, {"sha": "c86c3f9b44d5f58c181acdd3c04976e8301c2a05", "filename": "gcc/fold-const.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b55e6e333c97aaefc1db6c9d8411de578d05614/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b55e6e333c97aaefc1db6c9d8411de578d05614/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=5b55e6e333c97aaefc1db6c9d8411de578d05614", "patch": "@@ -7097,7 +7097,7 @@ fold_plusminus_mult_expr (location_t loc, enum tree_code code, tree type,\n \n   /* Same may be zero and thus the operation 'code' may overflow.  Likewise\n      same may be minus one and thus the multiplication may overflow.  Perform\n-     the operations in an unsigned type.  */\n+     the sum operation in an unsigned type.  */\n   tree utype = unsigned_type_for (type);\n   tree tem = fold_build2_loc (loc, code, utype,\n \t\t\t      fold_convert_loc (loc, utype, alt0),\n@@ -7110,9 +7110,9 @@ fold_plusminus_mult_expr (location_t loc, enum tree_code code, tree type,\n     return fold_build2_loc (loc, MULT_EXPR, type,\n \t\t\t    fold_convert (type, tem), same);\n \n-  return fold_convert_loc (loc, type,\n-\t\t\t   fold_build2_loc (loc, MULT_EXPR, utype, tem,\n-\t\t\t\t\t    fold_convert_loc (loc, utype, same)));\n+  /* Do not resort to unsigned multiplication because\n+     we lose the no-overflow property of the expression.  */\n+  return NULL_TREE;\n }\n \n /* Subroutine of native_encode_expr.  Encode the INTEGER_CST"}, {"sha": "8631153696dbe6d6ef240dd4280130124cb255dc", "filename": "gcc/match.pd", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b55e6e333c97aaefc1db6c9d8411de578d05614/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b55e6e333c97aaefc1db6c9d8411de578d05614/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=5b55e6e333c97aaefc1db6c9d8411de578d05614", "patch": "@@ -1939,6 +1939,37 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n      (minus (convert (view_convert:stype @1))\n \t    (convert (view_convert:stype @2)))))))\n \n+/* (A * C) +- (B * C) -> (A+-B) * C and (A * C) +- A -> A * (C+-1).\n+    Modeled after fold_plusminus_mult_expr.  */\n+(if (!TYPE_SATURATING (type)\n+     && (!FLOAT_TYPE_P (type) || flag_associative_math))\n+ (for plusminus (plus minus)\n+  (simplify\n+   (plusminus (mult:cs @0 @1) (mult:cs @0 @2))\n+   (if (!ANY_INTEGRAL_TYPE_P (type)\n+        || TYPE_OVERFLOW_WRAPS (type)\n+        || (INTEGRAL_TYPE_P (type)\n+\t    && tree_expr_nonzero_p (@0)\n+\t    && expr_not_equal_to (@0, wi::minus_one (TYPE_PRECISION (type)))))\n+    (mult (plusminus @1 @2) @0)))\n+  /* We cannot generate constant 1 for fract.  */\n+  (if (!ALL_FRACT_MODE_P (TYPE_MODE (type)))\n+   (simplify\n+    (plusminus @0 (mult:cs @0 @2))\n+    (if (!ANY_INTEGRAL_TYPE_P (type)\n+\t || TYPE_OVERFLOW_WRAPS (type)\n+\t || (INTEGRAL_TYPE_P (type)\n+\t     && tree_expr_nonzero_p (@0)\n+\t     && expr_not_equal_to (@0, wi::minus_one (TYPE_PRECISION (type)))))\n+     (mult (plusminus { build_one_cst (type); } @2) @0)))\n+   (simplify\n+    (plusminus (mult:cs @0 @2) @0)\n+    (if (!ANY_INTEGRAL_TYPE_P (type)\n+\t || TYPE_OVERFLOW_WRAPS (type)\n+\t || (INTEGRAL_TYPE_P (type)\n+\t     && tree_expr_nonzero_p (@0)\n+\t     && expr_not_equal_to (@0, wi::minus_one (TYPE_PRECISION (type)))))\n+     (mult (plusminus @2 { build_one_cst (type); }) @0))))))\n \n /* Simplifications of MIN_EXPR, MAX_EXPR, fmin() and fmax().  */\n "}, {"sha": "5df5351a9322fa303c3c9bed80723fe1e1e59d29", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b55e6e333c97aaefc1db6c9d8411de578d05614/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b55e6e333c97aaefc1db6c9d8411de578d05614/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5b55e6e333c97aaefc1db6c9d8411de578d05614", "patch": "@@ -1,3 +1,10 @@\n+2018-01-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/81082\n+\t* gcc.dg/vect/pr81082.c: New testcase.\n+\t* gcc.dg/tree-ssa/loop-15.c: XFAIL the (int)((unsigned)n + -1U) * n + n\n+\tsimplification to n * n.\n+\n 2018-01-26  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* gcc.target/i386/mcount_pic.c: Only xfail get_pc_thunk scan on"}, {"sha": "b437518487d73bac9e4999107e5e64315b74c128", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-15.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b55e6e333c97aaefc1db6c9d8411de578d05614/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b55e6e333c97aaefc1db6c9d8411de578d05614/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-15.c?ref=5b55e6e333c97aaefc1db6c9d8411de578d05614", "patch": "@@ -19,7 +19,7 @@ int bla(void)\n }\n \n /* Since the loop is removed, there should be no addition.  */\n-/* { dg-final { scan-tree-dump-times \" \\\\+ \" 0 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \" \\\\+ \" 0 \"optimized\" { xfail *-*-* } } } */\n /* { dg-final { scan-tree-dump-times \" \\\\* \" 1 \"optimized\" } } */\n \n /* The if from the loop header copying remains in the code.  */"}, {"sha": "1195fc711390bb42d745169219ca29a0db8fa938", "filename": "gcc/testsuite/gcc.dg/vect/pr81082.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b55e6e333c97aaefc1db6c9d8411de578d05614/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr81082.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b55e6e333c97aaefc1db6c9d8411de578d05614/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr81082.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr81082.c?ref=5b55e6e333c97aaefc1db6c9d8411de578d05614", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_int } */\n+\n+int\n+f (int *x, int b1, int b2, int b3)\n+{\n+  int foo = 0;\n+  for (int i1 = 0; i1 < b1; ++i1)\n+    for (int i2 = 0; i2 < b2; ++i2)\n+      for (int i3 = 0; i3 < b3; ++i3)\n+\tfoo += x[i1 * b2 * b3 + i2 * b3 + (i3 - 1)];\n+  return foo;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops in function\" \"vect\" } } */"}]}