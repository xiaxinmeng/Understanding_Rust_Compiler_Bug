{"sha": "fae00a0ac0e5687343a60ae02bf60352002ab9aa", "node_id": "C_kwDOANBUbNoAKGZhZTAwYTBhYzBlNTY4NzM0M2E2MGFlMDJiZjYwMzUyMDAyYWI5YWE", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-10-23T09:45:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-11-04T15:35:54Z"}, "message": "c++: use range-for more\n\ngcc/cp/ChangeLog:\n\n\t* call.c (build_array_conv): Use range-for.\n\t(build_complex_conv): Likewise.\n\t* constexpr.c (clear_no_implicit_zero)\n\t(reduced_constant_expression_p): Likewise.\n\t* decl.c (cp_complete_array_type): Likewise.\n\t* decl2.c (mark_vtable_entries): Likewise.\n\t* pt.c (iterative_hash_template_arg):\n\t(invalid_tparm_referent_p, unify)\n\t(type_dependent_expression_p): Likewise.\n\t* typeck.c (build_ptrmemfunc_access_expr): Likewise.", "tree": {"sha": "b929b52de9cd73a11c5fcf2848b8ea23a84e009d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b929b52de9cd73a11c5fcf2848b8ea23a84e009d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fae00a0ac0e5687343a60ae02bf60352002ab9aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fae00a0ac0e5687343a60ae02bf60352002ab9aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fae00a0ac0e5687343a60ae02bf60352002ab9aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fae00a0ac0e5687343a60ae02bf60352002ab9aa/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb04ccf4bfd6586cf0d22d439de28a4e6c649182", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb04ccf4bfd6586cf0d22d439de28a4e6c649182", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb04ccf4bfd6586cf0d22d439de28a4e6c649182"}], "stats": {"total": 100, "additions": 36, "deletions": 64}, "files": [{"sha": "01ac114a62c83c2252b82bbe1d6f774d3f47d0e2", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fae00a0ac0e5687343a60ae02bf60352002ab9aa/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fae00a0ac0e5687343a60ae02bf60352002ab9aa/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=fae00a0ac0e5687343a60ae02bf60352002ab9aa", "patch": "@@ -1070,8 +1070,6 @@ build_array_conv (tree type, tree ctor, int flags, tsubst_flags_t complain)\n   conversion *c;\n   unsigned HOST_WIDE_INT len = CONSTRUCTOR_NELTS (ctor);\n   tree elttype = TREE_TYPE (type);\n-  unsigned i;\n-  tree val;\n   bool bad = false;\n   bool user = false;\n   enum conversion_rank rank = cr_exact;\n@@ -1089,10 +1087,10 @@ build_array_conv (tree type, tree ctor, int flags, tsubst_flags_t complain)\n \n   flags = LOOKUP_IMPLICIT|LOOKUP_NO_NARROWING;\n \n-  FOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (ctor), i, val)\n+  for (auto &e: CONSTRUCTOR_ELTS (ctor))\n     {\n       conversion *sub\n-\t= implicit_conversion (elttype, TREE_TYPE (val), val,\n+\t= implicit_conversion (elttype, TREE_TYPE (e.value), e.value,\n \t\t\t       false, flags, complain);\n       if (sub == NULL)\n \treturn NULL;\n@@ -1124,8 +1122,6 @@ build_complex_conv (tree type, tree ctor, int flags,\n   conversion *c;\n   unsigned HOST_WIDE_INT len = CONSTRUCTOR_NELTS (ctor);\n   tree elttype = TREE_TYPE (type);\n-  unsigned i;\n-  tree val;\n   bool bad = false;\n   bool user = false;\n   enum conversion_rank rank = cr_exact;\n@@ -1135,10 +1131,10 @@ build_complex_conv (tree type, tree ctor, int flags,\n \n   flags = LOOKUP_IMPLICIT|LOOKUP_NO_NARROWING;\n \n-  FOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (ctor), i, val)\n+  for (auto &e: CONSTRUCTOR_ELTS (ctor))\n     {\n       conversion *sub\n-\t= implicit_conversion (elttype, TREE_TYPE (val), val,\n+\t= implicit_conversion (elttype, TREE_TYPE (e.value), e.value,\n \t\t\t       false, flags, complain);\n       if (sub == NULL)\n \treturn NULL;"}, {"sha": "453007c686bf0400cec2f3abe396c5d56b33ecea", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fae00a0ac0e5687343a60ae02bf60352002ab9aa/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fae00a0ac0e5687343a60ae02bf60352002ab9aa/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=fae00a0ac0e5687343a60ae02bf60352002ab9aa", "patch": "@@ -1831,10 +1831,9 @@ clear_no_implicit_zero (tree ctor)\n   if (CONSTRUCTOR_NO_CLEARING (ctor))\n     {\n       CONSTRUCTOR_NO_CLEARING (ctor) = false;\n-      tree elt; unsigned HOST_WIDE_INT idx;\n-      FOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (ctor), idx, elt)\n-\tif (TREE_CODE (elt) == CONSTRUCTOR)\n-\t  clear_no_implicit_zero (elt);\n+      for (auto &e: CONSTRUCTOR_ELTS (ctor))\n+\tif (TREE_CODE (e.value) == CONSTRUCTOR)\n+\t  clear_no_implicit_zero (e.value);\n     }\n }\n \n@@ -2950,7 +2949,7 @@ reduced_constant_expression_p (tree t)\n \n     case CONSTRUCTOR:\n       /* And we need to handle PTRMEM_CST wrapped in a CONSTRUCTOR.  */\n-      tree idx, val, field; unsigned HOST_WIDE_INT i;\n+      tree field;\n       if (CONSTRUCTOR_NO_CLEARING (t))\n \t{\n \t  if (TREE_CODE (TREE_TYPE (t)) == VECTOR_TYPE)\n@@ -2964,14 +2963,14 @@ reduced_constant_expression_p (tree t)\n \t      tree min = TYPE_MIN_VALUE (TYPE_DOMAIN (TREE_TYPE (t)));\n \t      tree max = TYPE_MAX_VALUE (TYPE_DOMAIN (TREE_TYPE (t)));\n \t      tree cursor = min;\n-\t      FOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (t), i, idx, val)\n+\t      for (auto &e: CONSTRUCTOR_ELTS (t))\n \t\t{\n-\t\t  if (!reduced_constant_expression_p (val))\n+\t\t  if (!reduced_constant_expression_p (e.value))\n \t\t    return false;\n-\t\t  if (array_index_cmp (cursor, idx) != 0)\n+\t\t  if (array_index_cmp (cursor, e.index) != 0)\n \t\t    return false;\n-\t\t  if (TREE_CODE (idx) == RANGE_EXPR)\n-\t\t    cursor = TREE_OPERAND (idx, 1);\n+\t\t  if (TREE_CODE (e.index) == RANGE_EXPR)\n+\t\t    cursor = TREE_OPERAND (e.index, 1);\n \t\t  cursor = int_const_binop (PLUS_EXPR, cursor, size_one_node);\n \t\t}\n \t      if (find_array_ctor_elt (t, max) == -1)\n@@ -2992,14 +2991,14 @@ reduced_constant_expression_p (tree t)\n \t}\n       else\n \tfield = NULL_TREE;\n-      FOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (t), i, idx, val)\n+      for (auto &e: CONSTRUCTOR_ELTS (t))\n \t{\n \t  /* If VAL is null, we're in the middle of initializing this\n \t     element.  */\n-\t  if (!reduced_constant_expression_p (val))\n+\t  if (!reduced_constant_expression_p (e.value))\n \t    return false;\n \t  /* Empty class field may or may not have an initializer.  */\n-\t  for (; field && idx != field;\n+\t  for (; field && e.index != field;\n \t       field = next_initializable_field (DECL_CHAIN (field)))\n \t    if (!is_really_empty_class (TREE_TYPE (field),\n \t\t\t\t\t/*ignore_vptr*/false))"}, {"sha": "947bbfc66377c51d81a1aba658dcf562aa818e5c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fae00a0ac0e5687343a60ae02bf60352002ab9aa/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fae00a0ac0e5687343a60ae02bf60352002ab9aa/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=fae00a0ac0e5687343a60ae02bf60352002ab9aa", "patch": "@@ -9538,9 +9538,6 @@ cp_complete_array_type (tree *ptype, tree initial_value, bool do_default)\n \n   if (initial_value)\n     {\n-      unsigned HOST_WIDE_INT i;\n-      tree value;\n-\n       /* An array of character type can be initialized from a\n \t brace-enclosed string constant.\n \n@@ -9562,14 +9559,9 @@ cp_complete_array_type (tree *ptype, tree initial_value, bool do_default)\n       /* If any of the elements are parameter packs, we can't actually\n \t complete this type now because the array size is dependent.  */\n       if (TREE_CODE (initial_value) == CONSTRUCTOR)\n-\t{\n-\t  FOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (initial_value), \n-\t\t\t\t      i, value)\n-\t    {\n-\t      if (PACK_EXPANSION_P (value))\n-\t\treturn 0;\n-\t    }\n-\t}\n+\tfor (auto &e: CONSTRUCTOR_ELTS (initial_value))\n+\t  if (PACK_EXPANSION_P (e.value))\n+\t    return 0;\n     }\n \n   failure = complete_array_type (ptype, initial_value, do_default);"}, {"sha": "32d3fe3636d095019710d064092deaaf3b9ce4f2", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fae00a0ac0e5687343a60ae02bf60352002ab9aa/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fae00a0ac0e5687343a60ae02bf60352002ab9aa/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=fae00a0ac0e5687343a60ae02bf60352002ab9aa", "patch": "@@ -1913,18 +1913,14 @@ coerce_delete_type (tree decl, location_t loc)\n static void\n mark_vtable_entries (tree decl, vec<tree> &consteval_vtables)\n {\n-  tree fnaddr;\n-  unsigned HOST_WIDE_INT idx;\n-\n   /* It's OK for the vtable to refer to deprecated virtual functions.  */\n   warning_sentinel w(warn_deprecated_decl);\n \n   bool consteval_seen = false;\n \n-  FOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (DECL_INITIAL (decl)),\n-\t\t\t      idx, fnaddr)\n+  for (auto &e: CONSTRUCTOR_ELTS (DECL_INITIAL (decl)))\n     {\n-      tree fn;\n+      tree fnaddr = e.value;\n \n       STRIP_NOPS (fnaddr);\n \n@@ -1934,7 +1930,7 @@ mark_vtable_entries (tree decl, vec<tree> &consteval_vtables)\n \t   virtual call offset, an RTTI offset, etc.  */\n \tcontinue;\n \n-      fn = TREE_OPERAND (fnaddr, 0);\n+      tree fn = TREE_OPERAND (fnaddr, 0);\n       if (TREE_CODE (fn) == FUNCTION_DECL && DECL_IMMEDIATE_FUNCTION_P (fn))\n \t{\n \t  if (!consteval_seen)"}, {"sha": "2638d3ce3d4bb44e3147182352fe9626f496b16c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fae00a0ac0e5687343a60ae02bf60352002ab9aa/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fae00a0ac0e5687343a60ae02bf60352002ab9aa/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=fae00a0ac0e5687343a60ae02bf60352002ab9aa", "patch": "@@ -1831,13 +1831,11 @@ iterative_hash_template_arg (tree arg, hashval_t val)\n \n     case CONSTRUCTOR:\n       {\n-\ttree field, value;\n-\tunsigned i;\n \titerative_hash_template_arg (TREE_TYPE (arg), val);\n-\tFOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (arg), i, field, value)\n+\tfor (auto &e: CONSTRUCTOR_ELTS (arg))\n \t  {\n-\t    val = iterative_hash_template_arg (field, val);\n-\t    val = iterative_hash_template_arg (value, val);\n+\t    val = iterative_hash_template_arg (e.index, val);\n+\t    val = iterative_hash_template_arg (e.value, val);\n \t  }\n \treturn val;\n       }\n@@ -7004,9 +7002,8 @@ invalid_tparm_referent_p (tree type, tree expr, tsubst_flags_t complain)\n \n     case CONSTRUCTOR:\n       {\n-\tunsigned i; tree elt;\n-\tFOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (expr), i, elt)\n-\t  if (invalid_tparm_referent_p (TREE_TYPE (elt), elt, complain))\n+\tfor (auto &e: CONSTRUCTOR_ELTS (expr))\n+\t  if (invalid_tparm_referent_p (TREE_TYPE (e.value), e.value, complain))\n \t    return true;\n       }\n       break;\n@@ -23605,8 +23602,7 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n      we're dealing with a type. */\n   if (BRACE_ENCLOSED_INITIALIZER_P (arg))\n     {\n-      tree elt, elttype;\n-      unsigned i;\n+      tree elttype;\n       tree orig_parm = parm;\n \n       if (!is_std_init_list (parm)\n@@ -23633,8 +23629,9 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n \t/* If ELTTYPE has no deducible template parms, skip deduction from\n \t   the list elements.  */;\n       else\n-\tFOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (arg), i, elt)\n+\tfor (auto &e: CONSTRUCTOR_ELTS (arg))\n \t  {\n+\t    tree elt = e.value;\n \t    int elt_strict = strict;\n \n \t    if (elt == error_mark_node)\n@@ -27420,14 +27417,9 @@ type_dependent_expression_p (tree expression)\n \n   if (BRACE_ENCLOSED_INITIALIZER_P (expression))\n     {\n-      tree elt;\n-      unsigned i;\n-\n-      FOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (expression), i, elt)\n-\t{\n-\t  if (type_dependent_expression_p (elt))\n-\t    return true;\n-\t}\n+      for (auto &elt : CONSTRUCTOR_ELTS (expression))\n+\tif (type_dependent_expression_p (elt.value))\n+\t  return true;\n       return false;\n     }\n "}, {"sha": "cb20329ceb57ca188ffaac95df7baddba8ae5ef5", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fae00a0ac0e5687343a60ae02bf60352002ab9aa/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fae00a0ac0e5687343a60ae02bf60352002ab9aa/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=fae00a0ac0e5687343a60ae02bf60352002ab9aa", "patch": "@@ -3460,12 +3460,9 @@ build_ptrmemfunc_access_expr (tree ptrmem, tree member_name)\n \n   if (TREE_CODE (ptrmem) == CONSTRUCTOR)\n     {\n-      unsigned int ix;\n-      tree index, value;\n-      FOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (ptrmem),\n-\t\t\t\tix, index, value)\n-\tif (index && DECL_P (index) && DECL_NAME (index) == member_name)\n-\t  return value;\n+      for (auto &e: CONSTRUCTOR_ELTS (ptrmem))\n+\tif (e.index && DECL_P (e.index) && DECL_NAME (e.index) == member_name)\n+\t  return e.value;\n       gcc_unreachable ();\n     }\n "}]}