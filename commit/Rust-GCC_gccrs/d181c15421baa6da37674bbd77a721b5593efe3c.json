{"sha": "d181c15421baa6da37674bbd77a721b5593efe3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE4MWMxNTQyMWJhYTZkYTM3Njc0YmJkNzdhNzIxYjU1OTNlZmUzYw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-09-15T13:39:18Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-09-15T13:39:18Z"}, "message": "(aggregate_value_p): Allow type node as argument.\n\nFrom-SVN: r5328", "tree": {"sha": "d738c543d9d0a1a4e932fef50ff0cb2699e6d8bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d738c543d9d0a1a4e932fef50ff0cb2699e6d8bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d181c15421baa6da37674bbd77a721b5593efe3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d181c15421baa6da37674bbd77a721b5593efe3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d181c15421baa6da37674bbd77a721b5593efe3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d181c15421baa6da37674bbd77a721b5593efe3c/comments", "author": null, "committer": null, "parents": [{"sha": "9a7f678c7d874029fda58205abae428417a519e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a7f678c7d874029fda58205abae428417a519e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a7f678c7d874029fda58205abae428417a519e8"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "e4b631ee337b5d485ce46686d60944c74e22ad7e", "filename": "gcc/function.c", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d181c15421baa6da37674bbd77a721b5593efe3c/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d181c15421baa6da37674bbd77a721b5593efe3c/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=d181c15421baa6da37674bbd77a721b5593efe3c", "patch": "@@ -2768,28 +2768,36 @@ get_first_block_beg ()\n   return NULL_RTX;\n }\n \n-/* Return 1 if EXP returns an aggregate value, for which an address\n-   must be passed to the function or returned by the function.  */\n+/* Return 1 if EXP is an aggregate type (or a value with aggregate type).\n+   This means a type for which function calls must pass an address to the\n+   function or get an address back from the function.\n+   EXP may be a type node or an expression (whose type is tested).  */\n \n int\n aggregate_value_p (exp)\n      tree exp;\n {\n   int i, regno, nregs;\n   rtx reg;\n-  if (RETURN_IN_MEMORY (TREE_TYPE (exp)))\n+  tree type;\n+  if (TREE_CODE_CLASS (TREE_CODE (exp)) == 't')\n+    type = exp;\n+  else\n+    type = TREE_TYPE (exp);\n+\n+  if (RETURN_IN_MEMORY (type))\n     return 1;\n   if (flag_pcc_struct_return\n-      && (TREE_CODE (TREE_TYPE (exp)) == RECORD_TYPE\n-\t  || TREE_CODE (TREE_TYPE (exp)) == UNION_TYPE\n-\t  || TREE_CODE (TREE_TYPE (exp)) == QUAL_UNION_TYPE\n-\t  || TREE_CODE (TREE_TYPE (exp)) == ARRAY_TYPE))\n+      && (TREE_CODE (type) == RECORD_TYPE\n+\t  || TREE_CODE (type) == UNION_TYPE\n+\t  || TREE_CODE (type) == QUAL_UNION_TYPE\n+\t  || TREE_CODE (type) == ARRAY_TYPE))\n     return 1;\n   /* Make sure we have suitable call-clobbered regs to return\n      the value in; if not, we must return it in memory.  */\n-  reg = hard_function_value (TREE_TYPE (exp), 0);\n+  reg = hard_function_value (type, 0);\n   regno = REGNO (reg);\n-  nregs = HARD_REGNO_NREGS (regno, TYPE_MODE (TREE_TYPE (exp)));\n+  nregs = HARD_REGNO_NREGS (regno, TYPE_MODE (type));\n   for (i = 0; i < nregs; i++)\n     if (! call_used_regs[regno + i])\n       return 1;"}]}