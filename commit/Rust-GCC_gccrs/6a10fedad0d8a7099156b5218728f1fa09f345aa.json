{"sha": "6a10fedad0d8a7099156b5218728f1fa09f345aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmExMGZlZGFkMGQ4YTcwOTkxNTZiNTIxODcyOGYxZmEwOWYzNDVhYQ==", "commit": {"author": {"name": "Xuepeng Guo", "email": "xuepeng.guo@intel.com", "date": "2019-05-28T02:45:34Z"}, "committer": {"name": "Hongtao Liu", "email": "liuhongt@gcc.gnu.org", "date": "2019-05-28T02:45:34Z"}, "message": "Add GCC support to ENQCMD.\n\ngcc/ChangeLog\n\n2019-01-23  Xuepeng Guo  <xuepeng.guo@intel.com>\n\n\t* common/config/i386/i386-common.c\n\t(OPTION_MASK_ISA_ENQCMD_SET,\n\tOPTION_MASK_ISA_ENQCMD_UNSET): New macros.\n\t(ix86_handle_option): Handle -menqcmd.\n\t* config.gcc (enqcmdintrin.h): New header file.\n\t* config/i386/cpuid.h (bit_ENQCMD): New bit.\n\t* config/i386/driver-i386.c (host_detect_local_cpu): Handle\n\t-menqcmd.\n\t* config/i386/i386-builtin-types.def ((INT, PVOID, PCVOID)): New\n\tfunction type.\n\t* config/i386/i386-builtin.def (__builtin_ia32_enqcmd,\n\t__builtin_ia32_enqcmds): New builtins.\n\t* config/i386/i386-c.c (__ENQCMD__): New macro.\n\t* config/i386/i386-option.c (ix86_target_string): Add\n\t-menqcmd.\n\t(ix86_valid_target_attribute_inner_p): Likewise.\n\t* config/i386/i386-expand.c\n\t(ix86_expand_builtin): Expand IX86_BUILTIN_ENQCMD and\n\tIX86_BUILTIN_ENQCMDS.\n\t* config/i386/i386.h (TARGET_ENQCMD): New.\n\t* config/i386/i386.md (UNSPECV_ENQCMD, UNSPECV_ENQCMDS): New.\n\t(@enqcmd<enqcmd_sfx>_<mode>): New insn pattern.\n\t(movdir64b_<mode>): Parameterize to enable share expansion code\n\twith ENQCMD in function ix86_expand_builtin.\n\t* config/i386/i386.opt: Add -menqcmd.\n\t* config/i386/immintrin.h: Include enqcmdintrin.h.\n\t* config/i386/enqcmdintrin.h: New intrinsic file.\n\t* doc/invoke.texi: Add -menqcmd.\n\ngcc/testsuite/ChangeLog\n\n2019-01-23  Xuepeng Guo  <xuepeng.guo@intel.com>\n\n\t* gcc.target/i386/enqcmd.c: New test.\n\t* gcc.target/i386/enqcmds.c: Likewise.\n\t* g++.dg/other/i386-2.C: Add -menqcmd.\n\t* g++.dg/other/i386-3.C: Likewise.\n\t* gcc.target/i386/sse-12.c: Likewise.\n\t* gcc.target/i386/sse-13.c: Likewise.\n\t* gcc.target/i386/sse-14.c: Likewise.\n\t* gcc.target/i386/sse-23.c: Likewise.\n\nFrom-SVN: r271678", "tree": {"sha": "958a8e6c0ec9cc34a576d1a896f10b5993a6cb4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/958a8e6c0ec9cc34a576d1a896f10b5993a6cb4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a10fedad0d8a7099156b5218728f1fa09f345aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a10fedad0d8a7099156b5218728f1fa09f345aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a10fedad0d8a7099156b5218728f1fa09f345aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a10fedad0d8a7099156b5218728f1fa09f345aa/comments", "author": null, "committer": null, "parents": [{"sha": "cd8eca2caf39f288e4fd92b28edfce03deafe0a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd8eca2caf39f288e4fd92b28edfce03deafe0a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd8eca2caf39f288e4fd92b28edfce03deafe0a8"}], "stats": {"total": 249, "additions": 230, "deletions": 19}, "files": [{"sha": "1fb8fddbea25bd8a595bf1d292637bdbb71e4089", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a10fedad0d8a7099156b5218728f1fa09f345aa", "patch": "@@ -7540,6 +7540,37 @@ Fix test-suite.\n \t* tree-ssa-dom.c (test_for_singularity): Fix a comment typo.\n \t* vr-values.c (find_case_label_ranges): Fix a comment typo.\n \n+2019-01-23  Xuepeng Guo  <xuepeng.guo@intel.com>\n+\n+\t* common/config/i386/i386-common.c\n+\t(OPTION_MASK_ISA_ENQCMD_SET,\n+\tOPTION_MASK_ISA_ENQCMD_UNSET): New macros.\n+\t(ix86_handle_option): Handle -menqcmd.\n+\t* config.gcc (enqcmdintrin.h): New header file.\n+\t* config/i386/cpuid.h (bit_ENQCMD): New bit.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Handle\n+\t-menqcmd.\n+\t* config/i386/i386-builtin-types.def ((INT, PVOID, PCVOID)): New\n+\tfunction type.\n+\t* config/i386/i386-builtin.def (__builtin_ia32_enqcmd,\n+\t__builtin_ia32_enqcmds): New builtins.\n+\t* config/i386/i386-c.c (__ENQCMD__): New macro.\n+\t* config/i386/i386-option.c (ix86_target_string): Add\n+\t-menqcmd.\n+\t(ix86_valid_target_attribute_inner_p): Likewise.\n+\t* config/i386/i386-expand.c\n+\t(ix86_expand_builtin): Expand IX86_BUILTIN_ENQCMD and\n+\tIX86_BUILTIN_ENQCMDS.\n+\t* config/i386/i386.h (TARGET_ENQCMD): New.\n+\t* config/i386/i386.md (UNSPECV_ENQCMD, UNSPECV_ENQCMDS): New.\n+\t(@enqcmd<enqcmd_sfx>_<mode>): New insn pattern.\n+\t(movdir64b_<mode>): Parameterize to enable share expansion code\n+\twith ENQCMD in function ix86_expand_builtin.\n+\t* config/i386/i386.opt: Add -menqcmd.\n+\t* config/i386/immintrin.h: Include enqcmdintrin.h.\n+\t* config/i386/enqcmdintrin.h: New intrinsic file.\n+\t* doc/invoke.texi: Add -menqcmd.\n+\n 2019-01-23  Bin Cheng  <bin.cheng@arm.com>\n \t    Steve Ellcey <sellcey@marvell.com>\n "}, {"sha": "096aa3d47637e5a08ca176dafe4f9c150ac7d5fe", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=6a10fedad0d8a7099156b5218728f1fa09f345aa", "patch": "@@ -156,6 +156,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_MOVDIR64B_SET OPTION_MASK_ISA_MOVDIR64B\n #define OPTION_MASK_ISA_WAITPKG_SET OPTION_MASK_ISA_WAITPKG\n #define OPTION_MASK_ISA_CLDEMOTE_SET OPTION_MASK_ISA_CLDEMOTE\n+#define OPTION_MASK_ISA_ENQCMD_SET OPTION_MASK_ISA_ENQCMD\n \n /* Define a set of ISAs which aren't available when a given ISA is\n    disabled.  MMX and SSE ISAs are handled separately.  */\n@@ -238,6 +239,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_MOVDIR64B_UNSET OPTION_MASK_ISA_MOVDIR64B\n #define OPTION_MASK_ISA_WAITPKG_UNSET OPTION_MASK_ISA_WAITPKG\n #define OPTION_MASK_ISA_CLDEMOTE_UNSET OPTION_MASK_ISA_CLDEMOTE\n+#define OPTION_MASK_ISA_ENQCMD_UNSET OPTION_MASK_ISA_ENQCMD\n \n /* SSE4 includes both SSE4.1 and SSE4.2.  -mno-sse4 should the same\n    as -mno-sse4.1. */\n@@ -659,6 +661,19 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_menqcmd:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_ENQCMD_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_ENQCMD_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA_ENQCMD_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_ENQCMD_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mavx5124fmaps:\n       if (value)\n \t{"}, {"sha": "f47bb460b70b92a19b3072658327eceb99af542c", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=6a10fedad0d8a7099156b5218728f1fa09f345aa", "patch": "@@ -407,7 +407,8 @@ i[34567]86-*-*)\n \t\t       avx512vnnivlintrin.h vaesintrin.h vpclmulqdqintrin.h\n \t\t       avx512vpopcntdqvlintrin.h avx512bitalgintrin.h\n \t\t       pconfigintrin.h wbnoinvdintrin.h movdirintrin.h\n-\t\t       waitpkgintrin.h cldemoteintrin.h avx512bf16vlintrin.h avx512bf16intrin.h\"\n+\t\t       waitpkgintrin.h cldemoteintrin.h avx512bf16vlintrin.h avx512bf16intrin.h\n+\t\t       enqcmdintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -439,7 +440,8 @@ x86_64-*-*)\n \t\t       avx512vnnivlintrin.h vaesintrin.h vpclmulqdqintrin.h\n \t\t       avx512vpopcntdqvlintrin.h avx512bitalgintrin.h\n \t\t       pconfigintrin.h wbnoinvdintrin.h movdirintrin.h\n-\t\t       waitpkgintrin.h cldemoteintrin.h avx512bf16vlintrin.h avx512bf16intrin.h\"\n+\t\t       waitpkgintrin.h cldemoteintrin.h avx512bf16vlintrin.h avx512bf16intrin.h\n+\t\t       enqcmdintrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "2fda7e736974c800b22161437efde3e59f705114", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=6a10fedad0d8a7099156b5218728f1fa09f345aa", "patch": "@@ -113,6 +113,7 @@\n #define bit_RDPID\t(1 << 22)\n #define bit_MOVDIRI\t(1 << 27)\n #define bit_MOVDIR64B\t(1 << 28)\n+#define bit_ENQCMD\t(1 << 29)\n #define bit_CLDEMOTE\t(1 << 25)\n \n /* %edx */"}, {"sha": "d5c62c07d563b0e15f99162bdbce4b5629121ebf", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=6a10fedad0d8a7099156b5218728f1fa09f345aa", "patch": "@@ -424,6 +424,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   unsigned int has_avx512vnni = 0, has_vaes = 0;\n   unsigned int has_vpclmulqdq = 0;\n   unsigned int has_movdiri = 0, has_movdir64b = 0;\n+  unsigned int has_enqcmd = 0;\n   unsigned int has_waitpkg = 0;\n   unsigned int has_cldemote = 0;\n   unsigned int has_avx512bf16 = 0;\n@@ -526,6 +527,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       has_avx512bitalg = ecx & bit_AVX512BITALG;\n       has_movdiri = ecx & bit_MOVDIRI;\n       has_movdir64b = ecx & bit_MOVDIR64B;\n+      has_enqcmd = ecx & bit_ENQCMD;\n       has_cldemote = ecx & bit_CLDEMOTE;\n \n       has_avx5124vnniw = edx & bit_AVX5124VNNIW;\n@@ -1144,6 +1146,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       const char *avx512bitalg = has_avx512bitalg ? \" -mavx512bitalg\" : \" -mno-avx512bitalg\";\n       const char *movdiri = has_movdiri ? \" -mmovdiri\" : \" -mno-movdiri\";\n       const char *movdir64b = has_movdir64b ? \" -mmovdir64b\" : \" -mno-movdir64b\";\n+      const char *enqcmd = has_enqcmd ? \" -menqcmd\" : \" -mno-enqcmd\";\n       const char *waitpkg = has_waitpkg ? \" -mwaitpkg\" : \" -mno-waitpkg\";\n       const char *cldemote = has_cldemote ? \" -mcldemote\" : \" -mno-cldemote\";\n       const char *ptwrite = has_ptwrite ? \" -mptwrite\" : \" -mno-ptwrite\";\n@@ -1162,7 +1165,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \t\t\tclwb, mwaitx, clzero, pku, rdpid, gfni, shstk,\n \t\t\tavx512vbmi2, avx512vnni, vaes, vpclmulqdq,\n \t\t\tavx512bitalg, movdiri, movdir64b, waitpkg, cldemote,\n-\t\t\tptwrite, avx512bf16,\n+\t\t\tptwrite, avx512bf16, enqcmd,\n \t\t\tNULL);\n     }\n "}, {"sha": "0fb5ece7d6ca6ccf912d8a605255bd507323ae25", "filename": "gcc/config/i386/enqcmdintrin.h", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Fconfig%2Fi386%2Fenqcmdintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Fconfig%2Fi386%2Fenqcmdintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fenqcmdintrin.h?ref=6a10fedad0d8a7099156b5218728f1fa09f345aa", "patch": "@@ -0,0 +1,55 @@\n+/* Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#if !defined _IMMINTRIN_H_INCLUDED\n+# error \"Never use <enqcmdntrin.h> directly; include <x86intrin.h> instead.\"\n+#endif\n+\n+#ifndef _ENQCMDNTRIN_H_INCLUDED\n+#define _ENQCMDNTRIN_H_INCLUDED\n+\n+#ifndef __ENQCMD__\n+#pragma GCC push_options\n+#pragma GCC target (\"enqcmd\")\n+#define __DISABLE_ENQCMD__\n+#endif /* __ENQCMD__ */\n+\n+extern __inline int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_enqcmd (void * __P, const void * __Q)\n+{\n+  return __builtin_ia32_enqcmd (__P, __Q);\n+}\n+\n+extern __inline int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_enqcmds (void * __P, const void * __Q)\n+{\n+  return __builtin_ia32_enqcmds (__P, __Q);\n+}\n+\n+#ifdef __DISABLE_ENQCMD__\n+#undef __DISABLE_ENQCMD__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_ENQCMD__ */\n+#endif /* _ENQCMDNTRIN_H_INCLUDED.  */"}, {"sha": "72469e36ae2ae177c5a04a9cabaaacfac74ea570", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=6a10fedad0d8a7099156b5218728f1fa09f345aa", "patch": "@@ -533,6 +533,7 @@ DEF_FUNCTION_TYPE (VOID, PFLOAT, V16SF)\n DEF_FUNCTION_TYPE (VOID, PINT, INT)\n DEF_FUNCTION_TYPE (VOID, PUNSIGNED, UNSIGNED)\n DEF_FUNCTION_TYPE (VOID, PVOID, PCVOID)\n+DEF_FUNCTION_TYPE (INT, PVOID, PCVOID)\n DEF_FUNCTION_TYPE (VOID, PLONGLONG, LONGLONG)\n DEF_FUNCTION_TYPE (VOID, PULONGLONG, ULONGLONG)\n DEF_FUNCTION_TYPE (VOID, PV2SI, V2SI)"}, {"sha": "b734f63a1c61bc912aa28e7c14b35ab2402a2fc9", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=6a10fedad0d8a7099156b5218728f1fa09f345aa", "patch": "@@ -434,6 +434,10 @@ BDESC (0, OPTION_MASK_ISA_MOVDIR64B, CODE_FOR_nothing, \"__builtin_ia32_movdir64b\n BDESC (0, OPTION_MASK_ISA_PTWRITE, CODE_FOR_ptwritesi, \"__builtin_ia32_ptwrite32\", IX86_BUILTIN_PTWRITE32, UNKNOWN, (int) VOID_FTYPE_UNSIGNED)\n BDESC (OPTION_MASK_ISA_64BIT, OPTION_MASK_ISA_PTWRITE, CODE_FOR_ptwritedi, \"__builtin_ia32_ptwrite64\", IX86_BUILTIN_PTWRITE64, UNKNOWN, (int) VOID_FTYPE_UINT64)\n \n+/* ENQCMD */\n+BDESC (0, OPTION_MASK_ISA_ENQCMD, CODE_FOR_nothing, \"__builtin_ia32_enqcmd\", IX86_BUILTIN_ENQCMD, UNKNOWN, (int) INT_FTYPE_PVOID_PCVOID)\n+BDESC (0, OPTION_MASK_ISA_ENQCMD, CODE_FOR_nothing, \"__builtin_ia32_enqcmds\", IX86_BUILTIN_ENQCMDS, UNKNOWN, (int) INT_FTYPE_PVOID_PCVOID)\n+\n BDESC_END (SPECIAL_ARGS, ARGS)\n \n /* Builtins with variable number of arguments.  */"}, {"sha": "0438a4266d43b42afc93e7fadfd07059723ee565", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=6a10fedad0d8a7099156b5218728f1fa09f345aa", "patch": "@@ -552,6 +552,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__AVX512BF16__\");\n   if (TARGET_MMX_WITH_SSE)\n     def_or_undef (parse_in, \"__MMX_WITH_SSE__\");\n+  if (isa_flag2 & OPTION_MASK_ISA_ENQCMD)\n+    def_or_undef (parse_in, \"__ENQCMD__\");\n   if (TARGET_IAMCU)\n     {\n       def_or_undef (parse_in, \"__iamcu\");"}, {"sha": "766e2a8ec6ce7f691e939ae732497aa14bea5e29", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=6a10fedad0d8a7099156b5218728f1fa09f345aa", "patch": "@@ -11313,6 +11313,8 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       emit_move_insn (target, op0);\n       return target;\n \n+    case IX86_BUILTIN_ENQCMD:\n+    case IX86_BUILTIN_ENQCMDS:\n     case IX86_BUILTIN_MOVDIR64B:\n \n       arg0 = CALL_EXPR_ARG (exp, 0);\n@@ -11328,11 +11330,33 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       }\n       op1 = gen_rtx_MEM (XImode, op1);\n \n-      insn = (TARGET_64BIT\n-\t\t? gen_movdir64b_di (op0, op1)\n-\t\t: gen_movdir64b_si (op0, op1));\n-      emit_insn (insn);\n-      return 0;\n+      if (fcode == IX86_BUILTIN_MOVDIR64B)\n+\t{\n+\t  emit_insn (gen_movdir64b (Pmode, op0, op1));\n+\t  return 0;\n+\t}\n+      else\n+\t{\n+\t  rtx pat;\n+\n+\t  target = gen_reg_rtx (SImode);\n+\t  emit_move_insn (target, const0_rtx);\n+\t  target = gen_rtx_SUBREG (QImode, target, 0);\n+\n+\t  if (fcode == IX86_BUILTIN_ENQCMD)\n+\t    pat = gen_enqcmd (UNSPECV_ENQCMD, Pmode, op0, op1);\n+\t  else\n+\t    pat = gen_enqcmd (UNSPECV_ENQCMDS, Pmode, op0, op1);\n+\n+\t  emit_insn (pat);\n+\n+\t  emit_insn (gen_rtx_SET (gen_rtx_STRICT_LOW_PART (VOIDmode, target),\n+\t\t\t\t  gen_rtx_fmt_ee (EQ, QImode,\n+\t\t\t\t\t\t  SET_DEST (pat),\n+\t\t\t\t\t\t  const0_rtx)));\n+\n+\t  return SUBREG_REG (target);\n+\t}\n \n     case IX86_BUILTIN_FXSAVE:\n     case IX86_BUILTIN_FXRSTOR:"}, {"sha": "a44b0d2038466fd905683555faf6a783b5d3f788", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=6a10fedad0d8a7099156b5218728f1fa09f345aa", "patch": "@@ -210,7 +210,8 @@ ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2,\n     { \"-mwaitpkg\",\tOPTION_MASK_ISA_WAITPKG },\n     { \"-mcldemote\",\tOPTION_MASK_ISA_CLDEMOTE },\n     { \"-mptwrite\",\tOPTION_MASK_ISA_PTWRITE },\n-    { \"-mavx512bf16\",\tOPTION_MASK_ISA_AVX512BF16 }\n+    { \"-mavx512bf16\",\tOPTION_MASK_ISA_AVX512BF16 },\n+    { \"-menqcmd\",       OPTION_MASK_ISA_ENQCMD }\n   };\n   static struct ix86_target_opts isa_opts[] =\n   {\n@@ -921,6 +922,7 @@ ix86_valid_target_attribute_inner_p (tree fndecl, tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"cldemote\", OPT_mcldemote),\n     IX86_ATTR_ISA (\"ptwrite\",   OPT_mptwrite),\n     IX86_ATTR_ISA (\"avx512bf16\",   OPT_mavx512bf16),\n+    IX86_ATTR_ISA (\"enqcmd\", OPT_menqcmd),\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),"}, {"sha": "01213ccb82c48d2ce31ced43424ef58af197e52f", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=6a10fedad0d8a7099156b5218728f1fa09f345aa", "patch": "@@ -195,6 +195,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_PTWRITE_P(x)\tTARGET_ISA_PTWRITE_P(x)\n #define TARGET_AVX512BF16\tTARGET_ISA_AVX512BF16\n #define TARGET_AVX512BF16_P(x)\tTARGET_ISA_AVX512BF16_P(x)\n+#define TARGET_ENQCMD\tTARGET_ISA_ENQCMD\n+#define TARGET_ENQCMD_P(x) TARGET_ISA_ENQCMD_P(x)\n \n #define TARGET_LP64\tTARGET_ABI_64\n #define TARGET_LP64_P(x)\tTARGET_ABI_64_P(x)"}, {"sha": "977fbc6e632b37493919a5a6d7497b611ec324c7", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=6a10fedad0d8a7099156b5218728f1fa09f345aa", "patch": "@@ -295,6 +295,10 @@\n   UNSPECV_SPECULATION_BARRIER\n \n   UNSPECV_PTWRITE\n+\n+  ;; For ENQCMD and ENQCMDS support\n+  UNSPECV_ENQCMD\n+  UNSPECV_ENQCMDS\n ])\n \n ;; Constants to represent rounding modes in the ROUND instruction\n@@ -20318,14 +20322,28 @@\n   \"movdiri\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"other\")])\n \n-(define_insn \"movdir64b_<mode>\"\n+(define_insn \"@movdir64b_<mode>\"\n   [(unspec_volatile:XI [(match_operand:P 0 \"register_operand\" \"r\")\n \t\t\t(match_operand:XI 1 \"memory_operand\")]\n \t\t       UNSPECV_MOVDIR64B)]\n   \"TARGET_MOVDIR64B\"\n   \"movdir64b\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"other\")])\n \n+;; ENQCMD and ENQCMDS\n+\n+(define_int_iterator ENQCMD [UNSPECV_ENQCMD UNSPECV_ENQCMDS])\n+(define_int_attr enqcmd_sfx [(UNSPECV_ENQCMD \"\") (UNSPECV_ENQCMDS \"s\")])\n+\n+(define_insn \"@enqcmd<enqcmd_sfx>_<mode>\"\n+  [(set (reg:CCZ FLAGS_REG)\n+\t(unspec_volatile:CCZ [(match_operand:P 0 \"register_operand\" \"r\")\n+\t\t\t      (match_operand:XI 1 \"memory_operand\" \"m\")]\n+\t\t\t     ENQCMD))]\n+  \"TARGET_ENQCMD\"\n+  \"enqcmd<enqcmd_sfx>\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"other\")])\n+\n ;; WAITPKG\n \n (define_insn \"umwait\""}, {"sha": "b6e751f87932229d657dcb7d253dc7db3155235a", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=6a10fedad0d8a7099156b5218728f1fa09f345aa", "patch": "@@ -1106,3 +1106,7 @@ mavx512bf16\n Target Report Mask(ISA_AVX512BF16) Var(ix86_isa_flags2) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F and\n AVX512BF16 built-in functions and code generation.\n+\n+menqcmd\n+Target Report Mask(ISA_ENQCMD) Var(ix86_isa_flags2) Save\n+Support ENQCMD built-in functions and code generation.\n\\ No newline at end of file"}, {"sha": "db98820a34902453883f3d1dc7f25b217a32e81a", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=6a10fedad0d8a7099156b5218728f1fa09f345aa", "patch": "@@ -134,6 +134,8 @@\n \n #include <avx512bf16intrin.h>\n \n+#include <enqcmdintrin.h>\n+\n #include <rdseedintrin.h>\n \n #include <prfchwintrin.h>"}, {"sha": "b722559d31a1009a10d379c19c280af0bd1f63bd", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=6a10fedad0d8a7099156b5218728f1fa09f345aa", "patch": "@@ -1274,7 +1274,7 @@ See RS/6000 and PowerPC Options.\n -msse4a  -m3dnow  -m3dnowa  -mpopcnt  -mabm  -mbmi  -mtbm  -mfma4  -mxop @gol\n -madx  -mlzcnt  -mbmi2  -mfxsr  -mxsave  -mxsaveopt  -mrtm  -mhle  -mlwp @gol\n -mmwaitx  -mclzero  -mpku  -mthreads  -mgfni  -mvaes  -mwaitpkg @gol\n--mshstk -mmanual-endbr -mforce-indirect-call -mavx512vbmi2 -mavx512bf16 @gol\n+-mshstk -mmanual-endbr -mforce-indirect-call  -mavx512vbmi2 -mavx512bf16 -menqcmd @gol\n -mvpclmulqdq  -mavx512bitalg  -mmovdiri  -mmovdir64b  -mavx512vpopcntdq @gol\n -mavx5124fmaps  -mavx512vnni  -mavx5124vnniw  -mprfchw  -mrdpid @gol\n -mrdseed  -msgx @gol\n@@ -28095,6 +28095,9 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @itemx -mmovdir64b\n @opindex mmovdir64b\n @need 200\n+@itemx -menqcmd\n+@opindex menqcmd\n+@need 200\n @itemx -mavx512vpopcntdq\n @opindex mavx512vpopcntdq\n @need 200\n@@ -28116,8 +28119,8 @@ AES, PCLMUL, CLFLUSHOPT, CLWB, FSGSBASE, PTWRITE, RDRND, F16C, FMA, PCONFIG,\n WBNOINVD, FMA4, PREFETCHW, RDPID, PREFETCHWT1, RDSEED, SGX, XOP, LWP,\n 3DNow!@:, enhanced 3DNow!@:, POPCNT, ABM, ADX, BMI, BMI2, LZCNT, FXSR, XSAVE,\n XSAVEOPT, XSAVEC, XSAVES, RTM, HLE, TBM, MWAITX, CLZERO, PKU, AVX512VBMI2,\n-GFNI, VAES, WAITPKG, VPCLMULQDQ, AVX512BITALG, MOVDIRI, MOVDIR64B, AVX512BF16\n-AVX512VPOPCNTDQ, AVX5124FMAPS, AVX512VNNI, AVX5124VNNIW, or CLDEMOTE\n+GFNI, VAES, WAITPKG, VPCLMULQDQ, AVX512BITALG, MOVDIRI, MOVDIR64B, AVX512BF16,\n+ENQCMD, AVX512VPOPCNTDQ, AVX5124FMAPS, AVX512VNNI, AVX5124VNNIW, or CLDEMOTE\n extended instruction sets.  Each has a corresponding @option{-mno-} option to\n disable use of these instructions.\n "}, {"sha": "eb2530580e5937258232d086978b538b0137351c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6a10fedad0d8a7099156b5218728f1fa09f345aa", "patch": "@@ -4560,6 +4560,17 @@\n \tPR target/89290\n \t* gcc.target/i386/pr89290.c: New test.\n \n+2019-01-23  Xuepeng Guo  <xuepeng.guo@intel.com>\n+\n+\t* gcc.target/i386/enqcmd.c: New test.\n+\t* gcc.target/i386/enqcmds.c: Likewise.\n+\t* g++.dg/other/i386-2.C: Add -menqcmd.\n+\t* g++.dg/other/i386-3.C: Likewise.\n+\t* gcc.target/i386/sse-12.c: Likewise.\n+\t* gcc.target/i386/sse-13.c: Likewise.\n+\t* gcc.target/i386/sse-14.c: Likewise.\n+\t* gcc.target/i386/sse-23.c: Likewise.\n+\n 2019-01-23  Xiong Hu Luo  <luoxhu@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/crypto-builtin-1.c"}, {"sha": "841a12cc97275970c85bd9e6d7adaca6c2050e91", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=6a10fedad0d8a7099156b5218728f1fa09f345aa", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "a70f00fc5ac708eb95a9b0632ec48bab0d4d42a0", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=6a10fedad0d8a7099156b5218728f1fa09f345aa", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "2927f201f4b13e496b13f702f2b0b2fe87623f45", "filename": "gcc/testsuite/gcc.target/i386/enqcmd.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fenqcmd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fenqcmd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fenqcmd.c?ref=6a10fedad0d8a7099156b5218728f1fa09f345aa", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-menqcmd -O2\" } */\n+/* { dg-final { scan-assembler-times \"\\tenqcmd\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tsete\" 1 } } */\n+\n+#include <x86intrin.h>\n+\n+unsigned int w;\n+unsigned int array[16];\n+\n+int\n+test_enqcmd (void)\n+{\n+  return _enqcmd(&w, array);\n+}\n+"}, {"sha": "095aaf7eee9d27c0afccfe138437d5f6aeeb4d35", "filename": "gcc/testsuite/gcc.target/i386/enqcmds.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fenqcmds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fenqcmds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fenqcmds.c?ref=6a10fedad0d8a7099156b5218728f1fa09f345aa", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-menqcmd -O2\" } */\n+/* { dg-final { scan-assembler-times \"\\tenqcmds\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tsete\" 1 } } */\n+\n+#include <x86intrin.h>\n+\n+unsigned int w;\n+unsigned int array[16];\n+int\n+test_enqcmds (void)\n+{\n+  return _enqcmds(&w, array);\n+}\n+"}, {"sha": "28d994ccd20a7a9f3602b70b98ec0769f54af152", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=6a10fedad0d8a7099156b5218728f1fa09f345aa", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h gfniintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "a16f9202ae32d301d805eebd982e764eaac624f3", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=6a10fedad0d8a7099156b5218728f1fa09f345aa", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "40ec3f90bf8cd5c6b65aedbe5b7dec10b930125f", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=6a10fedad0d8a7099156b5218728f1fa09f345aa", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mpconfig -mwbnoinvd -mavx512vl -mavx512bf16\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mpconfig -mwbnoinvd -mavx512vl -mavx512bf16 -menqcmd\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "7ac331ea84d4249fd56c6fa924cd05de75081b58", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a10fedad0d8a7099156b5218728f1fa09f345aa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=6a10fedad0d8a7099156b5218728f1fa09f345aa", "patch": "@@ -696,6 +696,6 @@\n #define __builtin_ia32_vpclmulqdq_v2di(A, B, C)  __builtin_ia32_vpclmulqdq_v2di(A, B, 1) \n #define __builtin_ia32_vpclmulqdq_v8di(A, B, C)  __builtin_ia32_vpclmulqdq_v8di(A, B, 1) \n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd,avx512bf16\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd,avx512bf16,enqcmd\")\n \n #include <x86intrin.h>"}]}