{"sha": "5a79befbf444ecd99ed39bc4b9643c5ca5e0a447", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE3OWJlZmJmNDQ0ZWNkOTllZDM5YmM0Yjk2NDNjNWNhNWUwYTQ0Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-10-04T07:49:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-10-04T07:49:44Z"}, "message": "defaults.h (JCR_SECTION_NAME, [...]): Remove.\n\ngcc/\n\t* defaults.h (JCR_SECTION_NAME, TARGET_USE_JCR_SECTION): Remove.\n\t* system.h (JCR_SECTION_NAME, TARGET_USE_JCR_SECTION): Poison.\n\t* doc/tm.texi.in (TARGET_USE_JCR_SECTION): Remove.\n\t* doc/tm.texi: Regenerated.\n\t* config/i386/mingw32.h (TARGET_USE_JCR_SECTION): Remove.\n\t* config/i386/cygming.h (TARGET_USE_JCR_SECTION): Remove.\n\t* config/darwin.h (JCR_SECTION_NAME): Remove.\n\t* config/pa/pa64-hpux.h (JCR_SECTION_NAME): Remove.\n\t* config/rs6000/aix71.h (TARGET_USE_JCR_SECTION): Remove.\n\t* config/rs6000/aix51.h (TARGET_USE_JCR_SECTION): Remove.\n\t* config/rs6000/aix52.h (TARGET_USE_JCR_SECTION): Remove.\n\t* config/rs6000/aix53.h (TARGET_USE_JCR_SECTION): Remove.\n\t* config/rs6000/aix61.h (TARGET_USE_JCR_SECTION): Remove.\ngcc/c-family/\n\t* c-cppbuiltin.c (c_cpp_builtins): Don't define\n\t__LIBGCC_JCR_SECTION_NAME__.\nlibgcc/\n\t* config/i386/cygming-crtbegin.c (_Jv_RegisterClasses): Remove.\n\t(__JCR_LIST__): Remove.\n\t(__gcc_register_frame): Don't attempt to _Jv_RegisterClasses.\n\t* config/i386/cygming-crtend.c (__JCR_END__): Remove.\n\t* config/ia64/crtbegin.S (__JCR_LIST__): Remove.\n\t* config/ia64/crtend.S (__JCR_END__): Remove.\n\t* crtstuff.c: Remove __LIBGCC_JCR_SECTION_NAME__ from preprocessor\n\tconditionals.\n\t(__JCR_LIST__, __JCR_END__): Remove.\n\t(frame_dummy): Don't attempt to _Jv_RegisterClasses.\n\t(__do_global_ctors_1): Likewise.\n\nFrom-SVN: r240739", "tree": {"sha": "a97869bd6f5622fc271ae96d3f55571b49be01ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a97869bd6f5622fc271ae96d3f55571b49be01ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4b3a7e03e50c2b30009311ddf89c3edeec969d47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b3a7e03e50c2b30009311ddf89c3edeec969d47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b3a7e03e50c2b30009311ddf89c3edeec969d47"}], "stats": {"total": 201, "additions": 41, "deletions": 160}, "files": [{"sha": "efed569f6057f3824d97de3b6079cdce5ac7bc79", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a79befbf444ecd99ed39bc4b9643c5ca5e0a447", "patch": "@@ -1,3 +1,19 @@\n+2016-10-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* defaults.h (JCR_SECTION_NAME, TARGET_USE_JCR_SECTION): Remove.\n+\t* system.h (JCR_SECTION_NAME, TARGET_USE_JCR_SECTION): Poison.\n+\t* doc/tm.texi.in (TARGET_USE_JCR_SECTION): Remove.\n+\t* doc/tm.texi: Regenerated.\n+\t* config/i386/mingw32.h (TARGET_USE_JCR_SECTION): Remove.\n+\t* config/i386/cygming.h (TARGET_USE_JCR_SECTION): Remove.\n+\t* config/darwin.h (JCR_SECTION_NAME): Remove.\n+\t* config/pa/pa64-hpux.h (JCR_SECTION_NAME): Remove.\n+\t* config/rs6000/aix71.h (TARGET_USE_JCR_SECTION): Remove.\n+\t* config/rs6000/aix51.h (TARGET_USE_JCR_SECTION): Remove.\n+\t* config/rs6000/aix52.h (TARGET_USE_JCR_SECTION): Remove.\n+\t* config/rs6000/aix53.h (TARGET_USE_JCR_SECTION): Remove.\n+\t* config/rs6000/aix61.h (TARGET_USE_JCR_SECTION): Remove.\n+\n 2016-10-03  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \t* ipa-cp.c (propagate_bits_accross_jump_function): Introduce space"}, {"sha": "d39e036c1a970866b6cc7d7fd4af7784ee7c3789", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=5a79befbf444ecd99ed39bc4b9643c5ca5e0a447", "patch": "@@ -1,3 +1,8 @@\n+2016-10-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-cppbuiltin.c (c_cpp_builtins): Don't define\n+\t__LIBGCC_JCR_SECTION_NAME__.\n+\n 2016-10-03  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* c-common.c (c_common_truthvalue_conversion): Warn for suspicious"}, {"sha": "97eda67e93b1173bb2cb9ed60253bf0c16ff1523", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=5a79befbf444ecd99ed39bc4b9643c5ca5e0a447", "patch": "@@ -1213,10 +1213,6 @@ c_cpp_builtins (cpp_reader *pfile)\n       builtin_define_with_value (\"__LIBGCC_EH_FRAME_SECTION_NAME__\",\n \t\t\t\t EH_FRAME_SECTION_NAME, 1);\n #endif\n-#ifdef JCR_SECTION_NAME\n-      builtin_define_with_value (\"__LIBGCC_JCR_SECTION_NAME__\",\n-\t\t\t\t JCR_SECTION_NAME, 1);\n-#endif\n #ifdef CTORS_SECTION_ASM_OP\n       builtin_define_with_value (\"__LIBGCC_CTORS_SECTION_ASM_OP__\",\n \t\t\t\t CTORS_SECTION_ASM_OP, 1);"}, {"sha": "b16fec89cdf8fbed3404479ac35ce4a5b79866bf", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=5a79befbf444ecd99ed39bc4b9643c5ca5e0a447", "patch": "@@ -825,9 +825,6 @@ enum machopic_addr_class {\n #define EH_FRAME_SECTION_NAME   \"__TEXT\"\n #define EH_FRAME_SECTION_ATTR \",coalesced,no_toc+strip_static_syms+live_support\"\n \n-/* Java runtime class list.  */\n-#define JCR_SECTION_NAME \"__DATA,jcr,regular,no_dead_strip\"\n-\n #undef ASM_PREFERRED_EH_DATA_FORMAT\n #define ASM_PREFERRED_EH_DATA_FORMAT(CODE,GLOBAL)  \\\n   (((CODE) == 2 && (GLOBAL) == 1) \\"}, {"sha": "10d68361eb1d056f1af6a0ccced9305c0ab53190", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=5a79befbf444ecd99ed39bc4b9643c5ca5e0a447", "patch": "@@ -443,11 +443,6 @@ do {\t\t\t\t\t\t\\\n \n #endif /* HAVE_GAS_WEAK */\n \n-/* FIXME: SUPPORTS_WEAK && TARGET_HAVE_NAMED_SECTIONS is true,\n-   but for .jcr section to work we also need crtbegin and crtend\n-   objects.  */\n-#define TARGET_USE_JCR_SECTION 1\n-\n /* Decide whether it is safe to use a local alias for a virtual function\n    when constructing thunks.  */\n #undef TARGET_USE_LOCAL_THUNK_ALIAS_P"}, {"sha": "ac4aa0d728b067dc7ff131100256714ca46d135c", "filename": "gcc/config/i386/mingw32.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/gcc%2Fconfig%2Fi386%2Fmingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/gcc%2Fconfig%2Fi386%2Fmingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmingw32.h?ref=5a79befbf444ecd99ed39bc4b9643c5ca5e0a447", "patch": "@@ -239,9 +239,6 @@ do {\t\t\t\t\t\t         \\\n #undef TARGET_N_FORMAT_TYPES\n #define TARGET_N_FORMAT_TYPES 3\n \n-/* Let defaults.h definition of TARGET_USE_JCR_SECTION apply. */\n-#undef TARGET_USE_JCR_SECTION\n-\n #define HAVE_ENABLE_EXECUTE_STACK\n #undef  CHECK_EXECUTE_STACK_ENABLED\n #define CHECK_EXECUTE_STACK_ENABLED flag_setstackexecutable"}, {"sha": "88ec4909ee98706c63b9a3b50dd6a4993e7d271e", "filename": "gcc/config/pa/pa64-hpux.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h?ref=5a79befbf444ecd99ed39bc4b9643c5ca5e0a447", "patch": "@@ -170,8 +170,6 @@ along with GCC; see the file COPYING3.  If not see\n #define DATA_SECTION_ASM_OP\t\"\\t.data\"\n #define BSS_SECTION_ASM_OP\t\"\\t.section\\t.bss\"\n \n-#define JCR_SECTION_NAME\t\".jcr\"\n-\n #define HP_INIT_ARRAY_SECTION_ASM_OP\t\"\\t.section\\t.init\"\n #define GNU_INIT_ARRAY_SECTION_ASM_OP\t\"\\t.section\\t.init_array\"\n #define HP_FINI_ARRAY_SECTION_ASM_OP\t\"\\t.section\\t.fini\"\n@@ -382,8 +380,8 @@ do {\t\t\t\t\t\t\t\t\\\n    initializers specified here.  */\n \n /* We need to add frame_dummy to the initializer list if EH_FRAME_SECTION_NAME\n-   or JCR_SECTION_NAME is defined.  */\n-#if defined(EH_FRAME_SECTION_NAME) || defined(JCR_SECTION_NAME)\n+   is defined.  */\n+#if defined(EH_FRAME_SECTION_NAME)\n #define PA_INIT_FRAME_DUMMY_ASM_OP \".dword P%frame_dummy\"\n #else\n #define PA_INIT_FRAME_DUMMY_ASM_OP \"\""}, {"sha": "3218712cd54ab9c24023553a12837b7014bfbb1d", "filename": "gcc/config/rs6000/aix51.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/gcc%2Fconfig%2Frs6000%2Faix51.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/gcc%2Fconfig%2Frs6000%2Faix51.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix51.h?ref=5a79befbf444ecd99ed39bc4b9643c5ca5e0a447", "patch": "@@ -163,8 +163,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* This target defines SUPPORTS_WEAK and TARGET_ASM_NAMED_SECTION,\n    but does not have crtbegin/end.  */\n \n-#define TARGET_USE_JCR_SECTION 0\n-\n #define TARGET_AIX_VERSION 51\n \n #undef TARGET_LIBC_HAS_FUNCTION"}, {"sha": "0e25ff26b4fdba51eb521a88e5c19bb52eedc8c6", "filename": "gcc/config/rs6000/aix52.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/gcc%2Fconfig%2Frs6000%2Faix52.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/gcc%2Fconfig%2Frs6000%2Faix52.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix52.h?ref=5a79befbf444ecd99ed39bc4b9643c5ca5e0a447", "patch": "@@ -176,6 +176,4 @@ extern long long int    atoll(const char *);\n /* This target defines SUPPORTS_WEAK and TARGET_ASM_NAMED_SECTION,\n    but does not have crtbegin/end.  */\n \n-#define TARGET_USE_JCR_SECTION 0\n-\n #define TARGET_AIX_VERSION 52"}, {"sha": "8ca58823c4c8ca8f05b6baa8c579b2cdf7b28345", "filename": "gcc/config/rs6000/aix53.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/gcc%2Fconfig%2Frs6000%2Faix53.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/gcc%2Fconfig%2Frs6000%2Faix53.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix53.h?ref=5a79befbf444ecd99ed39bc4b9643c5ca5e0a447", "patch": "@@ -177,6 +177,4 @@ extern long long int    atoll(const char *);\n /* This target defines SUPPORTS_WEAK and TARGET_ASM_NAMED_SECTION,\n    but does not have crtbegin/end.  */\n \n-#define TARGET_USE_JCR_SECTION 0\n-\n #define TARGET_AIX_VERSION 53"}, {"sha": "cddb5b791473230f451c5a4678a24211dceb220d", "filename": "gcc/config/rs6000/aix61.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/gcc%2Fconfig%2Frs6000%2Faix61.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/gcc%2Fconfig%2Frs6000%2Faix61.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix61.h?ref=5a79befbf444ecd99ed39bc4b9643c5ca5e0a447", "patch": "@@ -210,6 +210,4 @@ extern long long int    atoll(const char *);\n /* This target defines SUPPORTS_WEAK and TARGET_ASM_NAMED_SECTION,\n    but does not have crtbegin/end.  */\n \n-#define TARGET_USE_JCR_SECTION 0\n-\n #define TARGET_AIX_VERSION 61"}, {"sha": "4d097fb824bc401051bb80fee3c9feab974fe2ec", "filename": "gcc/config/rs6000/aix71.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/gcc%2Fconfig%2Frs6000%2Faix71.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/gcc%2Fconfig%2Frs6000%2Faix71.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix71.h?ref=5a79befbf444ecd99ed39bc4b9643c5ca5e0a447", "patch": "@@ -210,8 +210,6 @@ extern long long int    atoll(const char *);\n /* This target defines SUPPORTS_WEAK and TARGET_ASM_NAMED_SECTION,\n    but does not have crtbegin/end.  */\n \n-#define TARGET_USE_JCR_SECTION 0\n-\n #define TARGET_AIX_VERSION 71\n \n /* AIX 7.1 supports DWARF3 debugging, but XCOFF remains the default.  */"}, {"sha": "1bbcf0eb5b867752f19cab980e8671d49806767e", "filename": "gcc/defaults.h", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=5a79befbf444ecd99ed39bc4b9643c5ca5e0a447", "patch": "@@ -392,27 +392,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define MASK_RETURN_ADDR NULL_RTX\n #endif\n \n-/* If we have named section and we support weak symbols, then use the\n-   .jcr section for recording java classes which need to be registered\n-   at program start-up time.  */\n-#if defined (TARGET_ASM_NAMED_SECTION) && SUPPORTS_WEAK\n-#ifndef JCR_SECTION_NAME\n-#define JCR_SECTION_NAME \".jcr\"\n-#endif\n-#endif\n-\n-/* This decision to use a .jcr section can be overridden by defining\n-   USE_JCR_SECTION to 0 in target file.  This is necessary if target\n-   can define JCR_SECTION_NAME but does not have crtstuff or\n-   linker support for .jcr section.  */\n-#ifndef TARGET_USE_JCR_SECTION\n-#ifdef JCR_SECTION_NAME\n-#define TARGET_USE_JCR_SECTION 1\n-#else\n-#define TARGET_USE_JCR_SECTION 0\n-#endif\n-#endif\n-\n /* Number of hardware registers that go into the DWARF-2 unwind info.\n    If not defined, equals FIRST_PSEUDO_REGISTER  */\n "}, {"sha": "634f701d6e30acc02c4fb6706e80db14326af817", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=5a79befbf444ecd99ed39bc4b9643c5ca5e0a447", "patch": "@@ -11598,12 +11598,6 @@ conversion rules.\n This is currently used only by the C and C++ front ends.\n @end deftypefn\n \n-@defmac TARGET_USE_JCR_SECTION\n-This macro determines whether to use the JCR section to register Java\n-classes. By default, TARGET_USE_JCR_SECTION is defined to 1 if both\n-SUPPORTS_WEAK and TARGET_HAVE_NAMED_SECTIONS are true, else 0.\n-@end defmac\n-\n @defmac OBJC_JBLEN\n This macro determines the size of the objective C jump buffer for the\n NeXT runtime. By default, OBJC_JBLEN is defined to an innocuous value."}, {"sha": "7b6fa873c5be3285bc7faea0595b04591460dca7", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=5a79befbf444ecd99ed39bc4b9643c5ca5e0a447", "patch": "@@ -8186,12 +8186,6 @@ and scanf formatter settings.\n \n @hook TARGET_CONVERT_TO_TYPE\n \n-@defmac TARGET_USE_JCR_SECTION\n-This macro determines whether to use the JCR section to register Java\n-classes. By default, TARGET_USE_JCR_SECTION is defined to 1 if both\n-SUPPORTS_WEAK and TARGET_HAVE_NAMED_SECTIONS are true, else 0.\n-@end defmac\n-\n @defmac OBJC_JBLEN\n This macro determines the size of the objective C jump buffer for the\n NeXT runtime. By default, OBJC_JBLEN is defined to an innocuous value."}, {"sha": "8c6127c97a9306297e0063be7477233ab4a21e8e", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=5a79befbf444ecd99ed39bc4b9643c5ca5e0a447", "patch": "@@ -987,7 +987,8 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tCALLER_SAVE_PROFITABLE LARGEST_EXPONENT_IS_NORMAL\t\t   \\\n \tROUND_TOWARDS_ZERO SF_SIZE DF_SIZE XF_SIZE TF_SIZE LIBGCC2_TF_CEXT \\\n \tLIBGCC2_LONG_DOUBLE_TYPE_SIZE STRUCT_VALUE\t\t\t   \\\n-\tEH_FRAME_IN_DATA_SECTION TARGET_FLT_EVAL_METHOD_NON_DEFAULT\n+\tEH_FRAME_IN_DATA_SECTION TARGET_FLT_EVAL_METHOD_NON_DEFAULT\t   \\\n+\tJCR_SECTION_NAME TARGET_USE_JCR_SECTION\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}, {"sha": "2baca35456ac848ddfbbbebcdbd34c5dca7b33b1", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=5a79befbf444ecd99ed39bc4b9643c5ca5e0a447", "patch": "@@ -1,3 +1,17 @@\n+2016-10-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/cygming-crtbegin.c (_Jv_RegisterClasses): Remove.\n+\t(__JCR_LIST__): Remove.\n+\t(__gcc_register_frame): Don't attempt to _Jv_RegisterClasses.\n+\t* config/i386/cygming-crtend.c (__JCR_END__): Remove.\n+\t* config/ia64/crtbegin.S (__JCR_LIST__): Remove.\n+\t* config/ia64/crtend.S (__JCR_END__): Remove.\n+\t* crtstuff.c: Remove __LIBGCC_JCR_SECTION_NAME__ from preprocessor\n+\tconditionals.\n+\t(__JCR_LIST__, __JCR_END__): Remove.\n+\t(frame_dummy): Don't attempt to _Jv_RegisterClasses.\n+\t(__do_global_ctors_1): Likewise.\n+\n 2015-09-28  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/cpuinfo.c (__get_cpuid_output): Remove."}, {"sha": "be8344d6f9b2bfcf8f8e4f835ad229c041f8c083", "filename": "libgcc/config/i386/cygming-crtbegin.c", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/libgcc%2Fconfig%2Fi386%2Fcygming-crtbegin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/libgcc%2Fconfig%2Fi386%2Fcygming-crtbegin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fcygming-crtbegin.c?ref=5a79befbf444ecd99ed39bc4b9643c5ca5e0a447", "patch": "@@ -73,18 +73,6 @@ __deregister_frame_info (__attribute__((unused)) const void *p)\n #endif\n #endif /* DWARF2_UNWIND_INFO */\n \n-#if TARGET_USE_JCR_SECTION\n-extern void _Jv_RegisterClasses (__attribute__((unused)) const void *)\n-  TARGET_ATTRIBUTE_WEAK;\n-\n-#ifdef __x86_64__\n-TARGET_ATTRIBUTE_WEAK void\n-_Jv_RegisterClasses (__attribute__((unused)) const void *p)\n-{\n-}\n-#endif\n-#endif /* TARGET_USE_JCR_SECTION */\n-\n #if defined(HAVE_LD_RO_RW_SECTION_MIXING)\n # define EH_FRAME_SECTION_CONST const\n #else\n@@ -105,12 +93,6 @@ HANDLE hmod_libgcc;\n static void *  (*deregister_frame_fn) (const void *) = NULL;\n #endif\n \n-#if TARGET_USE_JCR_SECTION\n-static void *__JCR_LIST__[]\n-  __attribute__ ((used, section(__LIBGCC_JCR_SECTION_NAME__), aligned(4)))\n-  = { };\n-#endif\n-\n #ifdef __CYGWIN__\n /* Declare the __dso_handle variable.  It should have a unique value\n    in every shared-object; in a main program its value is zero.  The\n@@ -163,22 +145,6 @@ __gcc_register_frame (void)\n      register_frame_fn (__EH_FRAME_BEGIN__, &obj);\n #endif\n \n-#if TARGET_USE_JCR_SECTION \n-  if (__JCR_LIST__[0])\n-    {\n-      void (*register_class_fn) (const void *);\n-      HANDLE h = GetModuleHandle (LIBGCJ_SONAME);\n-      if (h)\n-\tregister_class_fn = (void (*) (const void *))\n-\t\t\t     GetProcAddress (h, \"_Jv_RegisterClasses\");\n-      else\n-\tregister_class_fn = _Jv_RegisterClasses;\n-\n-      if (register_class_fn)\n-\tregister_class_fn (__JCR_LIST__);\n-    }\n-#endif\n-\n #if DEFAULT_USE_CXA_ATEXIT\n   /* If we use the __cxa_atexit method to register C++ dtors\n      at object construction,  also use atexit to register eh frame"}, {"sha": "9bd0e10a1c744c9d59a426f27f9722c5740e0073", "filename": "libgcc/config/i386/cygming-crtend.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/libgcc%2Fconfig%2Fi386%2Fcygming-crtend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/libgcc%2Fconfig%2Fi386%2Fcygming-crtend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fcygming-crtend.c?ref=5a79befbf444ecd99ed39bc4b9643c5ca5e0a447", "patch": "@@ -53,14 +53,6 @@ static EH_FRAME_SECTION_CONST int __FRAME_END__[]\n   = { 0 };\n #endif\n \n-#if TARGET_USE_JCR_SECTION\n-/* Null terminate the .jcr section array.  */\n-static void *__JCR_END__[1] \n-   __attribute__ ((used, section(__LIBGCC_JCR_SECTION_NAME__),\n-\t\t   aligned(sizeof(void *))))\n-   = { 0 };\n-#endif\n-\n extern void __gcc_register_frame (void); \n extern void __gcc_deregister_frame (void);\n "}, {"sha": "3bf0e71a3ac7b1dc9f275a6c2826aec3e5a80366", "filename": "libgcc/config/ia64/crtbegin.S", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/libgcc%2Fconfig%2Fia64%2Fcrtbegin.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/libgcc%2Fconfig%2Fia64%2Fcrtbegin.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fia64%2Fcrtbegin.S?ref=5a79befbf444ecd99ed39bc4b9643c5ca5e0a447", "patch": "@@ -34,10 +34,6 @@ __CTOR_LIST__:\n __DTOR_LIST__:\n \tdata8\t-1\n \n-.section .jcr,\"aw\",\"progbits\"\n-\t.align\t8\n-__JCR_LIST__:\n-\n .section .sdata\n \t.type dtor_ptr,@object\n \t.size dtor_ptr,8"}, {"sha": "69cc5d77881b0b15c1a273c0fa5b98311b4b48fb", "filename": "libgcc/config/ia64/crtend.S", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/libgcc%2Fconfig%2Fia64%2Fcrtend.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/libgcc%2Fconfig%2Fia64%2Fcrtend.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fia64%2Fcrtend.S?ref=5a79befbf444ecd99ed39bc4b9643c5ca5e0a447", "patch": "@@ -34,11 +34,6 @@ __CTOR_END__:\n __DTOR_END__:\n \tdata8\t0\n \n-.section .jcr,\"aw\",\"progbits\"\n-\t.align 8\n-__JCR_END__:\n-\tdata8\t0\n-\n #if HAVE_INITFINI_ARRAY_SUPPORT\n \t.global __do_global_ctors_aux\n \t.hidden\t__do_global_ctors_aux"}, {"sha": "5449c4dbdb638ac68d94c3a0202f2d3b2e6b0a49", "filename": "libgcc/crtstuff.c", "status": "modified", "additions": 2, "deletions": 46, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/libgcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a79befbf444ecd99ed39bc4b9643c5ca5e0a447/libgcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fcrtstuff.c?ref=5a79befbf444ecd99ed39bc4b9643c5ca5e0a447", "patch": "@@ -266,15 +266,6 @@ STATIC EH_FRAME_SECTION_CONST char __EH_FRAME_BEGIN__[]\n      = { };\n #endif /* USE_EH_FRAME_REGISTRY */\n \n-#ifdef __LIBGCC_JCR_SECTION_NAME__\n-/* Stick a label at the beginning of the java class registration info\n-   so we can register them properly.  */\n-STATIC void *__JCR_LIST__[]\n-  __attribute__ ((used, section(__LIBGCC_JCR_SECTION_NAME__),\n-\t\t  aligned(sizeof(void*))))\n-  = { };\n-#endif /* __LIBGCC_JCR_SECTION_NAME__ */\n-\n #if USE_TM_CLONE_REGISTRY\n STATIC func_ptr __TMC_LIST__[]\n   __attribute__((used, section(\".tm_clone_table\"), aligned(sizeof(void*))))\n@@ -449,7 +440,6 @@ CRT_CALL_STATIC_FUNCTION (__LIBGCC_INIT_SECTION_ASM_OP__,\n #endif\n \n #if defined(USE_EH_FRAME_REGISTRY) \\\n-    || defined(__LIBGCC_JCR_SECTION_NAME__) \\\n     || defined(USE_TM_CLONE_REGISTRY)\n /* Stick a call to __register_frame_info into the .init section.  For some\n    reason calls with no arguments work more reliably in .init, so stick the\n@@ -472,18 +462,6 @@ frame_dummy (void)\n #endif /* CRT_GET_RFIB_DATA */\n #endif /* USE_EH_FRAME_REGISTRY */\n \n-#ifdef __LIBGCC_JCR_SECTION_NAME__\n-  void **jcr_list;\n-  __asm (\"\" : \"=g\" (jcr_list) : \"0\" (__JCR_LIST__));\n-  if (__builtin_expect (*jcr_list != NULL, 0))\n-    {\n-      void (*register_classes) (void *) = _Jv_RegisterClasses;\n-      __asm (\"\" : \"+r\" (register_classes));\n-      if (register_classes)\n-\tregister_classes (jcr_list);\n-    }\n-#endif /* __LIBGCC_JCR_SECTION_NAME__ */\n-\n #if USE_TM_CLONE_REGISTRY\n   register_tm_clones ();\n #endif /* USE_TM_CLONE_REGISTRY */\n@@ -496,7 +474,7 @@ static func_ptr __frame_dummy_init_array_entry[]\n   __attribute__ ((__used__, section(\".init_array\"), aligned(sizeof(func_ptr))))\n   = { frame_dummy };\n #endif /* !defined(__LIBGCC_INIT_SECTION_ASM_OP__) */\n-#endif /* USE_EH_FRAME_REGISTRY || __LIBGCC_JCR_SECTION_NAME__ || USE_TM_CLONE_REGISTRY */\n+#endif /* USE_EH_FRAME_REGISTRY || USE_TM_CLONE_REGISTRY */\n \n #else  /* OBJECT_FORMAT_ELF */\n \n@@ -564,7 +542,6 @@ __do_global_dtors (void)\n }\n \n #if defined(USE_EH_FRAME_REGISTRY) \\\n-    || defined(__LIBGCC_JCR_SECTION_NAME__) \\\n     || defined(USE_TM_CLONE_REGISTRY)\n /* A helper function for __do_global_ctors, which is in crtend.o.  Here\n    in crtbegin.o, we can reference a couple of symbols not visible there.\n@@ -579,23 +556,11 @@ __do_global_ctors_1(void)\n     __register_frame_info (__EH_FRAME_BEGIN__, &object);\n #endif\n \n-#ifdef __LIBGCC_JCR_SECTION_NAME__\n-  void **jcr_list;\n-  __asm (\"\" : \"=g\" (jcr_list) : \"0\" (__JCR_LIST__));\n-  if (__builtin_expect (*jcr_list != NULL, 0))\n-    {\n-      void (*register_classes) (void *) = _Jv_RegisterClasses;\n-      __asm (\"\" : \"+r\" (register_classes));\n-      if (register_classes)\n-\tregister_classes (jcr_list);\n-    }\n-#endif\n-\n #if USE_TM_CLONE_REGISTRY\n   register_tm_clones ();\n #endif /* USE_TM_CLONE_REGISTRY */\n }\n-#endif /* USE_EH_FRAME_REGISTRY || __LIBGCC_JCR_SECTION_NAME__ || USE_TM_CLONE_REGISTRY */\n+#endif /* USE_EH_FRAME_REGISTRY || USE_TM_CLONE_REGISTRY */\n \n #else /* ! __LIBGCC_INIT_SECTION_ASM_OP__ && ! HAS_INIT_SECTION */\n #error \"What are you doing with crtstuff.c, then?\"\n@@ -671,14 +636,6 @@ STATIC EH_FRAME_SECTION_CONST int32 __FRAME_END__[]\n      = { 0 };\n #endif /* __LIBGCC_EH_FRAME_SECTION_NAME__ */\n \n-#ifdef __LIBGCC_JCR_SECTION_NAME__\n-/* Null terminate the .jcr section array.  */\n-STATIC void *__JCR_END__[1]\n-   __attribute__ ((used, section(__LIBGCC_JCR_SECTION_NAME__),\n-\t\t   aligned(sizeof(void *))))\n-   = { 0 };\n-#endif /* __LIBGCC_JCR_SECTION_NAME__ */\n-\n #if USE_TM_CLONE_REGISTRY\n # ifndef HAVE_GAS_HIDDEN\n static\n@@ -757,7 +714,6 @@ __do_global_ctors (void)\n {\n   func_ptr *p;\n #if defined(USE_EH_FRAME_REGISTRY) \\\n-    || defined(__LIBGCC_JCR_SECTION_NAME__) \\\n     || defined(USE_TM_CLONE_REGISTRY)\n   __do_global_ctors_1();\n #endif"}]}