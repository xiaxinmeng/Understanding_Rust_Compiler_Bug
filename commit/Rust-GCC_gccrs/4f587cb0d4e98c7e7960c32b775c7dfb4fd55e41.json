{"sha": "4f587cb0d4e98c7e7960c32b775c7dfb4fd55e41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY1ODdjYjBkNGU5OGM3ZTc5NjBjMzJiNzc1YzdkZmI0ZmQ1NWU0MQ==", "commit": {"author": {"name": "Adam Nemet", "email": "anemet@lnxw.com", "date": "2004-08-05T04:55:37Z"}, "committer": {"name": "Adam Nemet", "email": "nemet@gcc.gnu.org", "date": "2004-08-05T04:55:37Z"}, "message": "config.gcc (case i[34567]86-*-lynxos*): Update to LynxOS 4.0.\n\n\t* config.gcc (case i[34567]86-*-lynxos*): Update to LynxOS 4.0.\n\t(case rs6000-*-lynxos*): Rename it to powerpc-*-lynxos*.  Update\n\tto LynxOS 4.0.\n\t* gthr-lynx.h: New file.\n\t* config/lynx-ng.h: Remove file.\n\t* config/lynx.h: Update to LynxOS 4.0.\n\t* config/t-lynx: New file.\n\t* config/i386/lynx-ng.h: Remove file.\n\t* config/i386/lynx.h: Update to LynxOS 4.0.\n\t* config/rs6000/lynxbase.h: Remove file.\n\t* config/rs6000/lynx.h: Update to LynxOS 4.0.\n\t* config/rs6000/t-lynx: New file.\n\t* doc/install.texi (Options specification): Remove reference to\n\tLynxOS from systems where --with-gnu-as makes a difference.\n\nFrom-SVN: r85591", "tree": {"sha": "23899f0239bbb781c6aec626b7661ea04b1cc069", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23899f0239bbb781c6aec626b7661ea04b1cc069"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f587cb0d4e98c7e7960c32b775c7dfb4fd55e41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f587cb0d4e98c7e7960c32b775c7dfb4fd55e41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f587cb0d4e98c7e7960c32b775c7dfb4fd55e41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f587cb0d4e98c7e7960c32b775c7dfb4fd55e41/comments", "author": null, "committer": null, "parents": [{"sha": "852910694f6d4480afd733a62fd6b93de62b51e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/852910694f6d4480afd733a62fd6b93de62b51e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/852910694f6d4480afd733a62fd6b93de62b51e6"}], "stats": {"total": 928, "additions": 469, "deletions": 459}, "files": [{"sha": "ccbdd46288d703e9ebaad7492a08fa1d07c9cfd8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f587cb0d4e98c7e7960c32b775c7dfb4fd55e41/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f587cb0d4e98c7e7960c32b775c7dfb4fd55e41/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f587cb0d4e98c7e7960c32b775c7dfb4fd55e41", "patch": "@@ -1,3 +1,20 @@\n+2004-08-05  Adam Nemet  <anemet@lnxw.com>\n+\n+\t* config.gcc (case i[34567]86-*-lynxos*): Update to LynxOS 4.0.\n+\t(case rs6000-*-lynxos*): Rename it to powerpc-*-lynxos*.  Update\n+\tto LynxOS 4.0.\n+\t* gthr-lynx.h: New file.\n+\t* config/lynx-ng.h: Remove file.\n+\t* config/lynx.h: Update to LynxOS 4.0.\n+\t* config/t-lynx: New file.\n+\t* config/i386/lynx-ng.h: Remove file.\n+\t* config/i386/lynx.h: Update to LynxOS 4.0.\n+\t* config/rs6000/lynxbase.h: Remove file.\n+\t* config/rs6000/lynx.h: Update to LynxOS 4.0.\n+\t* config/rs6000/t-lynx: New file.\n+\t* doc/install.texi (Options specification): Remove reference to\n+\tLynxOS from systems where --with-gnu-as makes a difference.\n+\n 2004-08-05  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* c-common.c (c_stddef_cpp_builtins): Define __INTMAX_TYPE__ and"}, {"sha": "68d80826f2dc674dbd8ab51344aa9342af5674b8", "filename": "gcc/config.gcc", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f587cb0d4e98c7e7960c32b775c7dfb4fd55e41/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f587cb0d4e98c7e7960c32b775c7dfb4fd55e41/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=4f587cb0d4e98c7e7960c32b775c7dfb4fd55e41", "patch": "@@ -944,13 +944,13 @@ i[34567]86-pc-msdosdjgpp*)\n \tgas=yes\n \t;;\n i[34567]86-*-lynxos*)\n-\tif test x$gas = xyes\n-\tthen\n-\t\ttm_file=\"${tm_file} i386/unix.h i386/bsd.h i386/gas.h i386/gstabs.h svr3.h lynx.h i386/lynx.h\"\n-\telse\n-\t\ttm_file=\"${tm_file} i386/unix.h i386/bsd.h i386/gas.h i386/gstabs.h lynx-ng.h i386/lynx-ng.h\"\n-\tfi\n-\tuse_fixproto=yes\n+\txm_defines=POSIX\n+\ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h i386/lynx.h lynx.h\"\n+\ttmake_file=\"i386/t-crtstuff t-lynx\"\n+\textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n+\tthread_file=lynx\n+\tgnu_ld=yes\n+\tgas=yes\n \t;;\n i[34567]86-*-nto-qnx*)\n \ttm_file=\"${tm_file} i386/att.h dbxelf.h tm-dwarf2.h elfos.h svr4.h i386/unix.h i386/nto.h\"\n@@ -1597,6 +1597,15 @@ powerpc-wrs-windiss*)\t# Instruction-level simulator for VxWorks.\n         thread_file=\"\"\n \tuse_fixproto=yes\n         ;;\n+powerpc-*-lynxos*)\n+\txm_defines=POSIX\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h rs6000/sysv4.h rs6000/lynx.h lynx.h\"\n+\ttmake_file=\"t-lynx rs6000/t-lynx\"\n+\textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n+\tthread_file=lynx\n+\tgnu_ld=yes\n+\tgas=yes\n+\t;;\n powerpcle-*-sysv*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h freebsd-spec.h rs6000/sysv4.h rs6000/sysv4le.h\"\n \ttmake_file=\"rs6000/t-fprules rs6000/t-ppcos rs6000/t-ppccomm\"\n@@ -1651,12 +1660,6 @@ rs6000-ibm-aix[56789].* | powerpc-ibm-aix[56789].*)\n \tthread_file='aix'\n \textra_headers=\n \t;;\n-rs6000-*-lynxos*)\n-\ttm_file=\"svr3.h lynx.h rs6000/lynxbase.h rs6000/rs6000.h rs6000/lynx.h\"\n-\ttmake_file=rs6000/t-fprules\n-\tuse_collect2=yes\n-\tuse_fixproto=yes\n-\t;;\n s390-*-linux*)\n \ttm_file=\"s390/s390.h dbxelf.h elfos.h svr4.h linux.h s390/linux.h\"\n \ttmake_file=\"${tmake_file} s390/t-crtstuff\""}, {"sha": "536aa7af20351c34668cd5bff61e2858474d3fcf", "filename": "gcc/config/i386/lynx-ng.h", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852910694f6d4480afd733a62fd6b93de62b51e6/gcc%2Fconfig%2Fi386%2Flynx-ng.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852910694f6d4480afd733a62fd6b93de62b51e6/gcc%2Fconfig%2Fi386%2Flynx-ng.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flynx-ng.h?ref=852910694f6d4480afd733a62fd6b93de62b51e6", "patch": "@@ -1,70 +0,0 @@\n-/* Definitions for Intel 386 running LynxOS, using Lynx's old as and ld.\n-   Copyright (C) 1993, 1995, 2002 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING.  If not, write to\n-the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA.  */\n-\n-#define TARGET_VERSION fprintf (stderr, \" (80386, LYNX BSD syntax)\"); \n-\n-#define TARGET_OS_CPP_BUILTINS()\t\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-\tbuiltin_define_std (\"unix\");\t\t\\\n-\tbuiltin_define_std (\"I386\");\t\t\\\n-\tbuiltin_define_std (\"Lynx\");\t\t\\\n-\tbuiltin_define_std (\"IBITS32\");\t\t\\\n-\tbuiltin_assert (\"system=unix\");\t\t\\\n-\tbuiltin_assert (\"system=lynx\");\t\t\\\n-    }\t\t\t\t\t\t\\\n-  while (0)\n-\n-/* Provide required defaults for linker switches.  */\n-\n-#undef LINK_SPEC\n-#define LINK_SPEC \"-P1000 %{msystem-v:-V} %{mcoff:-k}\"\n-\n-/* Apparently LynxOS clobbers ebx when you call into the OS.  */\n-\n-#undef CALL_USED_REGISTERS\n-#define CALL_USED_REGISTERS \\\n-/*ax,dx,cx,bx,si,di,bp,sp,st,st1,st2,st3,st4,st5,st6,st7,arg*/ \\\n-{  1, 1, 1, 1, 0, 0, 0, 1, 1,  1,  1,  1,  1,  1,  1,  1,  1 }\n-\n-/* Prefix for internally generated assembler labels.  If we aren't using\n-   underscores, we are using prefix `.'s to identify labels that should\n-   be ignored, as in `i386/gas.h' --karl@cs.umb.edu  */\n-\n-#undef  LPREFIX\n-#define LPREFIX \".L\"\n-\n-/* The prefix to add to user-visible assembler symbols.  */\n-\n-#undef  USER_LABEL_PREFIX\n-#define USER_LABEL_PREFIX \"\"\n-\n-/* If user-symbols don't have underscores,\n-   then it must take more than `L' to identify\n-   a label that should be ignored.  */\n-\n-/* This is how to store into the string BUF\n-   the symbol_ref name of an internal numbered label where\n-   PREFIX is the class of label and NUM is the number within the class.\n-   This is suitable for output with `assemble_name'.  */\n-\n-#undef  ASM_GENERATE_INTERNAL_LABEL\n-#define ASM_GENERATE_INTERNAL_LABEL(BUF,PREFIX,NUMBER)\t\\\n-  sprintf ((BUF), \".%s%ld\", (PREFIX), (long)(NUMBER))"}, {"sha": "1aad4d6b1210eba9b5bcedc65cb798b53362269a", "filename": "gcc/config/i386/lynx.h", "status": "modified", "additions": 61, "deletions": 35, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f587cb0d4e98c7e7960c32b775c7dfb4fd55e41/gcc%2Fconfig%2Fi386%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f587cb0d4e98c7e7960c32b775c7dfb4fd55e41/gcc%2Fconfig%2Fi386%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flynx.h?ref=4f587cb0d4e98c7e7960c32b775c7dfb4fd55e41", "patch": "@@ -1,5 +1,6 @@\n-/* Definitions for Intel 386 running LynxOS.\n-   Copyright (C) 1993, 1995, 1996, 2002 Free Software Foundation, Inc.\n+/* Definitions for LynxOS on i386.\n+   Copyright (C) 1993, 1995, 1996, 2002, 2004\n+   Free Software Foundation, Inc. \n \n This file is part of GCC.\n \n@@ -18,54 +19,79 @@ along with GCC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-#define TARGET_VERSION fprintf (stderr, \" (80386, LYNX BSD syntax)\"); \n+#define TARGET_VERSION fputs (\" (i386/LynxOS)\", stderr);\n \n #define TARGET_OS_CPP_BUILTINS()\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-\tbuiltin_define_std (\"I386\");\t\t\\\n-\tbuiltin_define_std (\"Lynx\");\t\t\\\n-\tbuiltin_define_std (\"IBITS32\");\t\t\\\n-\tbuiltin_assert (\"system=unix\");\t\t\\\n-\tbuiltin_assert (\"system=lynx\");\t\t\\\n+      builtin_define (\"__LITTLE_ENDIAN__\");\t\\\n+      builtin_define (\"__x86__\");\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-/* The prefix to add to user-visible assembler symbols.  */\n+/* The svr4 ABI for the i386 says that records and unions are returned\n+   in memory.  */\n \n-/* Override the svr3 convention of adding a leading underscore.  */\n+#define DEFAULT_PCC_STRUCT_RETURN 1\n \n-#undef USER_LABEL_PREFIX\n-#define USER_LABEL_PREFIX \"\"\n+/* BSS_SECTION_ASM_OP gets defined i386/unix.h.  */\n \n-/* Apparently LynxOS clobbers ebx when you call into the OS.  */\n+#define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \\\n+  asm_output_aligned_bss (FILE, DECL, NAME, SIZE, ALIGN)\n \n-#undef CALL_USED_REGISTERS\n-#define CALL_USED_REGISTERS \\\n-/*ax,dx,cx,bx,si,di,bp,sp,st,st1,st2,st3,st4,st5,st6,st7,arg*/ \\\n-{  1, 1, 1, 1, 0, 0, 0, 1, 1,  1,  1,  1,  1,  1,  1,  1,  1 }\n+/* LynxOS's GDB counts the floating point registers from 16.  */\n \n-/* Prefix for internally generated assembler labels.  If we aren't using\n-   underscores, we are using prefix `.'s to identify labels that should\n-   be ignored, as in `i386/gas.h' --karl@cs.umb.edu  */\n+#undef DBX_REGISTER_NUMBER\n+#define DBX_REGISTER_NUMBER(n)\t\t\t\t\t\t\\\n+  (TARGET_64BIT ? dbx64_register_map[n]\t\t\t\t\t\\\n+   : (n) == 0 ? 0\t\t\t\t\t\t\t\\\n+   : (n) == 1 ? 2\t\t\t\t\t\t\t\\\n+   : (n) == 2 ? 1\t\t\t\t\t\t\t\\\n+   : (n) == 3 ? 3\t\t\t\t\t\t\t\\\n+   : (n) == 4 ? 6\t\t\t\t\t\t\t\\\n+   : (n) == 5 ? 7\t\t\t\t\t\t\t\\\n+   : (n) == 6 ? 5\t\t\t\t\t\t\t\\\n+   : (n) == 7 ? 4\t\t\t\t\t\t\t\\\n+   : ((n) >= FIRST_STACK_REG && (n) <= LAST_STACK_REG) ? (n) + 8\t\\\n+   : (-1))\n+  \n+/* A C statement to output to the stdio stream FILE an assembler\n+   command to advance the location counter to a multiple of 1<<LOG\n+   bytes if it is within MAX_SKIP bytes.\n \n-#undef  LPREFIX\n-#define LPREFIX \".L\"\n+   This is used to align code labels according to Intel recommendations.  */\n \n-/* The prefix to add to user-visible assembler symbols.  */\n+#ifdef HAVE_GAS_MAX_SKIP_P2ALIGN\n+#define ASM_OUTPUT_MAX_SKIP_ALIGN(FILE,LOG,MAX_SKIP)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    if ((LOG) != 0) {\t\t\t\t\t\t\t\\\n+      if ((MAX_SKIP) == 0) fprintf ((FILE), \"\\t.p2align %d\\n\", (LOG));\t\\\n+      else fprintf ((FILE), \"\\t.p2align %d,,%d\\n\", (LOG), (MAX_SKIP));\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  } while (0)\n+#endif\n \n-#undef  USER_LABEL_PREFIX\n-#define USER_LABEL_PREFIX \"\"\n+/* Since i386.h defines an empty SUBTARGET_SWITCHES the definition in\n+   config/lynx.h is omitted.  */\n \n-/* If user-symbols don't have underscores,\n-   then it must take more than `L' to identify\n-   a label that should be ignored.  */\n+#undef SUBTARGET_SWITCHES\n+#define SUBTARGET_SWITCHES SUBTARGET_OS_LYNX_SWITCHES\n \n-/* This is how to store into the string BUF\n-   the symbol_ref name of an internal numbered label where\n-   PREFIX is the class of label and NUM is the number within the class.\n-   This is suitable for output with `assemble_name'.  */\n+/* Undefine SUBTARGET_EXTRA_SPECS it is empty anyway.  We define it in\n+   config/lynx.h.  */\n \n-#undef  ASM_GENERATE_INTERNAL_LABEL\n-#define ASM_GENERATE_INTERNAL_LABEL(BUF,PREFIX,NUMBER)\t\\\n-  sprintf ((BUF), \".%s%ld\", (PREFIX), (long)(NUMBER))\n+#undef SUBTARGET_EXTRA_SPECS\n+\n+/* Undefine the definition from att.h to enable our default.  */\n+\n+#undef ASM_OUTPUT_ALIGN\n+\n+/* Undefine the definition from elfos.h to enable our default.  */\n+\n+#undef PREFERRED_DEBUGGING_TYPE\n+\n+/* The file i386.c defines TARGET_HAVE_TLS unconditionally if\n+   HAVE_AS_TLS is defined.  HAVE_AS_TLS is defined as gas support for\n+   TLS is detected by configure.  We undefine it here.  */\n+\n+#undef HAVE_AS_TLS"}, {"sha": "a1fe786b463f57d0c3a76bc131f3a4cf1f7563e5", "filename": "gcc/config/lynx-ng.h", "status": "removed", "additions": 0, "deletions": 110, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852910694f6d4480afd733a62fd6b93de62b51e6/gcc%2Fconfig%2Flynx-ng.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852910694f6d4480afd733a62fd6b93de62b51e6/gcc%2Fconfig%2Flynx-ng.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flynx-ng.h?ref=852910694f6d4480afd733a62fd6b93de62b51e6", "patch": "@@ -1,110 +0,0 @@\n-/* Target independent definitions for LynxOS, using Lynx's old as and ld.\n-   Copyright (C) 1993, 1999 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING.  If not, write to\n-the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA.  */\n-\n-/* This is for backwards compatibility with older Lynx tools, which use\n-   a version of a.out format.  */\n-\n-#undef ASM_SPEC\n-#define ASM_SPEC \"%{mcoff:-C}\"\n-\n-#undef CPP_SPEC\n-#define CPP_SPEC \"%{mthreads:-D_MULTITHREADED}  \\\n-  %{mposix:-D_POSIX_SOURCE}  \\\n-  %{msystem-v:-I/usr/include_v}\"\n-\n-/* Provide required defaults for linker switches.  */\n-\n-#undef LINK_SPEC\n-#define LINK_SPEC \"%{msystem-v:-V} %{mcoff:-k}\"\n-\n-#undef LIB_SPEC\n-#define LIB_SPEC \"%{mthreads:-L/lib/thread/}%{msystem-v:-lc_v}%{!msystem-v:%{mposix:-lc_p} -lc}\"\n-\n-#undef STARTFILE_SPEC\n-#define STARTFILE_SPEC \"%{p:%{mcoff:pinit1.o%s}%{!mcoff:pinit.o%s}}%{!p:%{msystem-v:%{mcoff:vinit1.o%s}%{!mcoff:vinit.o%s}}%{!msystem-v:%{mcoff:init1.o%s}%{!mcoff:init.o%s}}}\"\n-\n-#undef ENDFILE_SPEC\n-#define ENDFILE_SPEC \"%{mcoff:initn.o%s} %{p:_etext.o%s}\"\n-\n-#undef SIZE_TYPE\n-#define SIZE_TYPE \"unsigned int\"\n-\n-#undef WCHAR_TYPE\n-#define WCHAR_TYPE \"int\"\n-\n-#undef PTRDIFF_TYPE\n-#define PTRDIFF_TYPE \"long int\"\n-\n-/* We want to output DBX debugging information.  */\n-\n-#define DBX_DEBUGGING_INFO 1\n-#undef PREFERRED_DEBUGGING_TYPE\n-#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n-\n-/* We optionally want to be able to produce SDB debugging output so that\n-   we can create debuggable SDB/coff files.  This won't be needed when\n-   stabs-in-coff works.  */\n-\n-#define SDB_DEBUGGING_INFO 1\n-\n-/* Handle #pragma pack and sometimes #pragma weak.  */\n-\n-#define HANDLE_SYSV_PRAGMA 1\n-\n-#define TARGET_THREADS\t(target_flags & MASK_THREADS)\n-#define MASK_THREADS\t0x40000000\n-\n-#define TARGET_POSIX\t(target_flags & MASK_POSIX)\n-#define MASK_POSIX\t0x20000000\n-\n-#define TARGET_SYSTEM_V\t(target_flags & MASK_SYSTEM_V)\n-#define MASK_SYSTEM_V\t0x10000000\n-\n-#define TARGET_COFF\t(target_flags & MASK_COFF)\n-#define MASK_COFF\t0x08000000\n-\n-#undef SUBTARGET_SWITCHES\n-#define SUBTARGET_SWITCHES \\\n-    {\"threads\",\t\tMASK_THREADS},\t\t\\\n-    {\"posix\",\t\tMASK_POSIX},\t\t\\\n-    {\"system-v\",\tMASK_SYSTEM_V},\t\t\\\n-    {\"coff\",\t\tMASK_COFF},\n-\n-#undef SUBTARGET_OVERRIDE_OPTIONS\n-#define SUBTARGET_OVERRIDE_OPTIONS \\\n-{ if (TARGET_SYSTEM_V && profile_flag)\t\t\t\\\n-    warning (\"-msystem-v and -p are incompatible\");\t\t\\\n-  if (TARGET_SYSTEM_V && TARGET_THREADS)\t\t\t\\\n-    warning (\"-msystem-v and -mthreads are incompatible\"); }\n-\n-/* This is defined only so that we can find the assembler.  Everything else\n-   is in /bin.  */\n-\n-#define MD_EXEC_PREFIX \"/usr/local/lib/gcc-\"\n-\n-/* This is needed because /bin/ld does not handle -L options correctly.  */\n-\n-#define LINK_LIBGCC_SPECIAL_1\n-\n-/* The Lynx linker considers __main to be a possible entry point, so we\n-   must use a different name.  */\n-\n-#define NAME__MAIN \"____main\"\n-#define SYMBOL__MAIN ____main"}, {"sha": "94780c6c7470735217d3cfc82851290ba51ac2b6", "filename": "gcc/config/lynx.h", "status": "modified", "additions": 173, "deletions": 124, "changes": 297, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f587cb0d4e98c7e7960c32b775c7dfb4fd55e41/gcc%2Fconfig%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f587cb0d4e98c7e7960c32b775c7dfb4fd55e41/gcc%2Fconfig%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flynx.h?ref=4f587cb0d4e98c7e7960c32b775c7dfb4fd55e41", "patch": "@@ -1,5 +1,5 @@\n-/* Target independent definitions for LynxOS using gas and gnu ld.\n-   Copyright (C) 1993, 1994, 1995, 1996, 1999, 2000, 2002, 2003\n+/* Target independent definitions for LynxOS.\n+   Copyright (C) 1993, 1994, 1995, 1996, 1999, 2000, 2002, 2003, 2004\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -19,125 +19,174 @@ along with GCC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* LynxOS is a multi-platform Unix, similar to SVR3, but not identical.  */\n-\n-/* Define various macros, depending on the combination of flags.  */\n-\n-#undef CPP_SPEC\n-#define CPP_SPEC \"%{mthreads:-D_MULTITHREADED}  \\\n-  %{mposix:-D_POSIX_SOURCE}  \\\n-  %{msystem-v:-I/usr/include_v}\"\n-\n-/* No asm spec needed, since using GNU assembler always.  */\n-\n-/* No linker spec needed, since using GNU linker always.  */\n-\n-#undef LIB_SPEC\n-#define LIB_SPEC \"%{mthreads:-L/lib/thread/}  \\\n-  %{msystem-v:-lc_v}  \\\n-  %{!msystem-v:%{mposix:-lc_p} -lc -lm}\"\n-\n-/* Set the appropriate names for the Lynx startfiles.  */\n-\n-#undef STARTFILE_SPEC\n-#define STARTFILE_SPEC \"%{p:%{mthreads:thread/pinit1.o%s}%{!mthreads:pinit1.o%s}}%{!p:%{msystem-v:vinit1.o%s -e_start}%{!msystem-v:%{mthreads:thread/init1.o%s}%{!mthreads:init1.o%s}}}\"\n-\n-#undef ENDFILE_SPEC\n-#define ENDFILE_SPEC \"%{p:_etext.o%s}%{!p:initn.o%s}\"\n-\n-/* Override the svr3 versions.  */\n-\n-#undef WCHAR_TYPE\n-#define WCHAR_TYPE \"int\"\n-\n-#undef PTRDIFF_TYPE\n-#define PTRDIFF_TYPE \"long int\"\n-\n-/* We want to output DBX (stabs) debugging information normally.  */\n-\n-#define DBX_DEBUGGING_INFO 1\n-#undef PREFERRED_DEBUGGING_TYPE\n-#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n-\n-/* It is convenient to be able to generate standard coff debugging\n-   if requested via -gcoff.  */\n-\n-#define SDB_DEBUGGING_INFO 1\n-\n-/* Be function-relative for block and source line stab directives.  */\n-\n-#define DBX_BLOCKS_FUNCTION_RELATIVE 1\n-\n-/* but, to make this work, functions must appear prior to line info */\n-\n-#define DBX_FUNCTION_FIRST\n-\n-/* Generate a blank trailing N_SO to mark the end of the .o file, since\n-   we can't depend upon the linker to mark .o file boundaries with\n-   embedded stabs.  */\n-\n-#define DBX_OUTPUT_MAIN_SOURCE_FILE_END(FILE, FILENAME)\t\t\t\\\n-  fprintf (FILE,\t\t\t\t\t\t\t\\\n-\t   \"\\t.text\\n\\t.stabs \\\"\\\",%d,0,0,Letext\\nLetext:\\n\", N_SO)\n-\n-#undef  ASM_OUTPUT_SOURCE_LINE\n-#define ASM_OUTPUT_SOURCE_LINE(file, line, counter)\t\\\n-  { fprintf (file, \".stabn 68,0,%d,.LM%d-\",\t\t\\\n-\t     line, counter);\t\t\t\t\\\n-    assemble_name (file,\t\t\t\t\\\n-\t\t   XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0)); \\\n-    fprintf (file, \"\\n.LM%d:\\n\", counter); }\n-\n-/* Handle #pragma pack and sometimes #pragma weak.  */\n-\n-#define HANDLE_SYSV_PRAGMA 1\n-\n-/* Some additional command-line options.  */\n-\n-#define TARGET_THREADS\t(target_flags & MASK_THREADS)\n-#define MASK_THREADS\t0x40000000\n-\n-#define TARGET_POSIX\t(target_flags & MASK_POSIX)\n-#define MASK_POSIX\t0x20000000\n-\n-#define TARGET_SYSTEM_V\t(target_flags & MASK_SYSTEM_V)\n-#define MASK_SYSTEM_V\t0x10000000\n-\n-#undef SUBTARGET_SWITCHES\n-#define SUBTARGET_SWITCHES \\\n-    {\"threads\",\t\tMASK_THREADS},\t\t\\\n-    {\"posix\",\t\tMASK_POSIX},\t\t\\\n-    {\"system-v\",\tMASK_SYSTEM_V},\n-\n-#undef SUBTARGET_OVERRIDE_OPTIONS\n-#define SUBTARGET_OVERRIDE_OPTIONS \\\n-do {\t\t\t\t\t\t\t\t\\\n-  if (TARGET_SYSTEM_V && profile_flag)\t\t\t\t\\\n-    warning (\"-msystem-v and -p are incompatible\");\t\t\\\n-  if (TARGET_SYSTEM_V && TARGET_THREADS)\t\t\t\\\n-    warning (\"-msystem-v and -mthreads are incompatible\");\t\\\n-} while (0)\n-\n-/* Since init.o et al put all sorts of stuff into the init section,\n-   we can't use the standard init section support in crtbegin.o.  */\n-\n-#undef INIT_SECTION_ASM_OP\n-\n-#undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_fini\n-\n-#undef EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\\\n-  FINI_SECTION_FUNCTION\n-\n-#undef CTORS_SECTION_ASM_OP\n-#define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors\"\n-#undef DTORS_SECTION_ASM_OP\n-#define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors\"\n-\n-#undef DO_GLOBAL_CTORS_BODY\n-#undef DO_GLOBAL_DTORS_BODY\n-\n-/* LynxOS doesn't have mcount.  */\n-#undef FUNCTION_PROFILER\n-#define FUNCTION_PROFILER(file, profile_label_no)\n+/* In this file we set up defaults that can be chosen by\n+   <target>/lynx.h files.  A target-specific lynx.h file can decide\n+   either to define and override these definitions or to use them by\n+   ensuring they are undefined at this point.  If we were to #undef\n+   them here we might accidentally disable some target-specific\n+   defines.  */\n+\n+#ifndef EXTRA_OS_LYNX_TARGET_SPECS\n+# define EXTRA_OS_LYNX_TARGET_SPECS\n+#endif\n+\n+#ifndef EXTRA_OS_LYNX_SPECS\n+# define EXTRA_OS_LYNX_SPECS \\\n+  { \"cpp_os_lynx\", CPP_OS_LYNX_SPEC }, \\\n+  { \"lib_os_lynx\", LIB_OS_LYNX_SPEC }, \\\n+  { \"link_os_lynx\", LINK_OS_LYNX_SPEC }, \\\n+  { \"startfile_os_lynx\", STARTFILE_OS_LYNX_SPEC }, \\\n+  { \"endfile_os_lynx\", ENDFILE_OS_LYNX_SPEC }, \\\n+  EXTRA_OS_LYNX_TARGET_SPECS\n+#endif\n+\n+#ifndef SUBTARGET_EXTRA_SPECS\n+# define SUBTARGET_EXTRA_SPECS EXTRA_OS_LYNX_SPECS\n+#endif\n+\n+#ifndef CPP_SPEC\n+# define CPP_SPEC \"%(cpp_cpu) %(cpp_os_lynx)\"\n+#endif\n+\n+#ifndef LIB_SPEC\n+# define LIB_SPEC \"%(lib_os_lynx)\"\n+#endif\n+\n+#ifndef LINK_SPEC\n+# define LINK_SPEC \"%(link_os_lynx)\"\n+#endif\n+\n+#ifndef STARTFILE_SPEC\n+# define STARTFILE_SPEC \"%(startfile_os_lynx)\"\n+#endif\n+\n+#ifndef ENDFILE_SPEC\n+# define ENDFILE_SPEC \"%(endfile_os_lynx)\"\n+#endif\n+\n+#ifndef CPP_OS_LYNX_SPEC\n+# define CPP_OS_LYNX_SPEC \\\n+\"%{mthreads: \\\n+   %{mlegacy-threads: \\\n+     %eCannot use mthreads and mlegacy-threads together.}} \\\n+ %{mthreads: -D_MULTITHREADED} \\\n+ %{mlegacy-threads: -D_THREADS_POSIX4ad4} \\\n+ -Asystem=lynx -Asystem=unix -D__Lynx__ -D__unix__\"\n+#endif\n+\n+#ifndef LIB_OS_LYNX_SPEC\n+# define LIB_OS_LYNX_SPEC \\\n+\"%{mlegacy-threads:-lposix-pre1c} -lm -lc\"\n+#endif\n+\n+/* We link static executables for LynxOS by default unless -mshared is\n+   used when linking an executable.  Along the same line, we link to\n+   shared libraries when linking a shared object by default unless\n+   -static is used.\n+\n+   We have to pass in our -L options here otherwise the translated\n+   startfile directories (%D) will take priority over this.\n+   Furthermore since we have to pass in -L options here we have to\n+   make sure that -L options provided by the user take priority over\n+   everything we specify.  */\n+\n+#ifndef LINK_OS_LYNX_SPEC\n+# define LINK_OS_LYNX_SPEC \\\n+\"%{shared} %{static} \\\n+ %{mshared: %{static: %eCannot use mshared and static together.}} \\\n+ %{!mshared: %{!shared: %{!static: -static}}} \\\n+ %{L*} \\\n+ %{mthreads: \\\n+   %{mshared: -L/lib/thread/shlib -rpath /lib/thread/shlib} \\\n+   %{shared: \\\n+     %{!static: -L/lib/thread/shlib -rpath /lib/thread/shlib} \\\n+   %{!mshared: -L/lib/thread}} \\\n+   %{shared: %{static: -L/lib/thread}}} \\\n+ %{!mthreads: \\\n+   %{mshared: -L/lib/shlib -rpath /lib/shlib} \\\n+   %{shared: -L/lib/shlib -rpath /lib/shlib}} \\\n+ %{mlegacy-threads:-lposix-pre1c} -lm -lc\"\n+#endif\n+\n+#ifndef STARTFILE_OS_LYNX_SPEC\n+# define STARTFILE_OS_LYNX_SPEC \\\n+\"%{!shared: \\\n+   %{!mthreads: \\\n+     %{p:gcrt1.o%s} %{pg:gcrt1.o%s} \\\n+     %{!p:%{!pg:crt1.o%s}}} \\\n+   %{mthreads: \\\n+     %{p:thread/gcrt1.o%s} %{pg:thread/gcrt1.o%s} \\\n+     %{!p:%{!pg:thread/crt1.o%s }}}}\\\n+ %{mthreads: thread/crti.o%s} %{!mthreads: crti.o%s} \\\n+ %{!shared: crtbegin.o%s} \\\n+ %{shared: crtbeginS.o%s}\"\n+#endif\n+\n+#ifndef ENDFILE_OS_LYNX_SPEC\n+# define ENDFILE_OS_LYNX_SPEC \\\n+\"%{!shared: crtend.o%s} \\\n+ %{shared: crtendS.o%s} \\\n+ %{mthreads: thread/crtn.o%s} %{!mthreads: crtn.o%s}\"\n+#endif\n+\n+/* Because of the %{m*} in cc1_options these options get substituted\n+   for cc1.  We ignore them here.  */\n+\n+#ifndef SUBTARGET_OS_LYNX_SWITCHES\n+# define SUBTARGET_OS_LYNX_SWITCHES\t\t\t\t\\\n+  { \"shared\",\t\t0, N_(\"Use shared libraries\") },\t\\\n+  { \"threads\", \t\t0, N_(\"Support multi-threading\") },\t\\\n+  { \"legacy-threads\",\t0, N_(\"Support legacy multi-threading\") },\n+#endif\n+\n+#ifndef SUBTARGET_SWITCHES\n+# define SUBTARGET_SWITCHES SUBTARGET_OS_LYNX_SWITCHES\n+#endif\n+\n+/* Define the actual types of some ANSI-mandated types.  */\n+\n+#ifndef SIZE_TYPE\n+# define SIZE_TYPE \"unsigned int\"\n+#endif\n+\n+#ifndef  PTRDIFF_TYPE\n+# define PTRDIFF_TYPE \"int\"\n+#endif\n+\n+#ifndef  WCHAR_TYPE\n+# define WCHAR_TYPE \"long int\"\n+#endif\n+\n+#ifndef  WCHAR_TYPE_SIZE\n+# define WCHAR_TYPE_SIZE BITS_PER_WORD\n+#endif\n+\n+/* Define ASM_OUTPUT_ALIGN to use the .balign directive rather that\n+   the .align directive with GAS.  */\n+\n+#ifndef ASM_OUTPUT_ALIGN\n+# define ASM_OUTPUT_ALIGN(FILE, LOG) \t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      if ((LOG) != 0)\t\t\t\t\t\\\n+\tfprintf ((FILE), \"\\t.balign %d\\n\", 1 << (LOG));\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+#endif\n+\n+/* Keep the *_DEBUGGING_INFO defines from elfos.h except that stabs is\n+   the default on LynxOS.  */\n+\n+#ifndef PREFERRED_DEBUGGING_TYPE\n+# define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n+#endif\n+\n+/* We have C++ support in our system headers.  */\n+\n+#ifndef NO_IMPLICIT_EXTERN_C\n+# define NO_IMPLICIT_EXTERN_C\n+#endif\n+\n+#ifndef TARGET_HAS_F_SETLKW\n+# define TARGET_HAS_F_SETLKW\n+#endif"}, {"sha": "fb02f517d6f5095580229b3f0ea460926b56e588", "filename": "gcc/config/rs6000/lynx.h", "status": "modified", "additions": 85, "deletions": 61, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f587cb0d4e98c7e7960c32b775c7dfb4fd55e41/gcc%2Fconfig%2Frs6000%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f587cb0d4e98c7e7960c32b775c7dfb4fd55e41/gcc%2Fconfig%2Frs6000%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flynx.h?ref=4f587cb0d4e98c7e7960c32b775c7dfb4fd55e41", "patch": "@@ -1,6 +1,8 @@\n /* Definitions for Rs6000 running LynxOS.\n-   Copyright (C) 1995, 1996, 2000, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1995, 1996, 2000, 2002, 2003, 2004\n+   Free Software Foundation, Inc.\n    Contributed by David Henkel-Wallace, Cygnus Support (gumby@cygnus.com)\n+   Rewritten by Adam Nemet, LynuxWorks Inc.\n \n    This file is part of GCC.\n \n@@ -19,69 +21,91 @@\n    Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n    MA 02111-1307, USA.  */\n \n-/* Print subsidiary information on the compiler version in use.  */\n-#define TARGET_VERSION fprintf (stderr, \" (LynxOS-RS/6000)\");\n-\n-/* LynxOS has signed chars, regardless of what most R/S 6000 systems do */\n-#undef  DEFAULT_SIGNED_CHAR\n-#define DEFAULT_SIGNED_CHAR 1\n-\n-#undef  TARGET_OS_CPP_BUILTINS\n-#define TARGET_OS_CPP_BUILTINS()         \\\n-  do                                     \\\n-    {                                    \\\n-      builtin_assert (\"cpu=rs6000\");     \\\n-      builtin_assert (\"machine=rs6000\"); \\\n-      builtin_assert (\"system=lynx\");    \\\n-      builtin_assert (\"system=unix\");    \\\n-      builtin_define_std (\"Lynx\");       \\\n-      builtin_define (\"_IBMR2\");         \\\n-      builtin_define_std (\"unix\");       \\\n-      builtin_define_std (\"rs6000\");     \\\n-      builtin_define_std (\"lynx\");       \\\n-      builtin_define_std (\"LYNX\");       \\\n-    }                                    \\\n-  while (0)\n+/* Override the definition in sysv4.h.  */\n+\n+#undef TARGET_VERSION\n+#define TARGET_VERSION fputs (\" (PowerPC/LynxOS)\", stderr);\n+\n+/* Undefine the definition to enable the LynxOS default from the\n+   top-level lynx.h.  */\n+\n+#undef SUBTARGET_EXTRA_SPECS\n+\n+/* Get rid off the spec definitions from rs6000/sysv4.h.  */\n \n-#undef  LINK_SPEC\n-#define LINK_SPEC \"-T0x10001000 -H0x1000 -D0x20000000 -btextro -bhalt:4 -bnodelcsect -bnso -bro -bnoglink %{v} %{b*}\"\n+#undef CPP_SPEC\n+#define CPP_SPEC \\\n+\"%{msoft-float: -D_SOFT_FLOAT} \\\n+ %(cpp_cpu) \\\n+ %(cpp_os_lynx)\"\n \n-#undef  LIB_SPEC\n-#define LIB_SPEC \"%{mthreads:-L/lib/thread/}  \\\n-  %{msystem-v:-lc_v -lm.v}  \\\n-  %{!msystem-v:%{mposix:-lc_p} -lc -lm}\"\n+/* LynxOS only supports big-endian on PPC so we override the\n+   definition from sysv4.h.  Since the LynxOS 4.0 compiler was set to\n+   return every structure in memory regardless of their size we have\n+   to emulate the same behavior here with disabling the SVR4 structure\n+   returning.  */\n \n-#undef  STARTFILE_SPEC\n-#define STARTFILE_SPEC \"%{p:%{mthreads:thread/pinit.o%s}%{!mthreads:pinit.o%s}}%{!p:%{msystem-v:vinit.o%s -e_start}%{!msystem-v:%{mthreads:thread/init.o%s}%{!mthreads:init.o%s}}}\"\n+#undef CC1_SPEC\n+#define CC1_SPEC \\\n+\"%{G*} %{mno-sdata:-msdata=none} \\\n+ %{maltivec:-mabi=altivec} \\\n+ -mno-svr4-struct-return\"\n \n+#undef ASM_SPEC\n+#define ASM_SPEC \\\n+\"%(asm_cpu) \\\n+ %{.s: %{mregnames} %{mno-regnames}} \\\n+ %{.S: %{mregnames} %{mno-regnames}}\"\n+\n+#undef STARTFILE_SPEC\n #undef ENDFILE_SPEC\n+#undef LIB_SPEC\n+#undef LINK_SPEC\n+#define LINK_SPEC \\\n+\"%{!msdata=none:%{G*}} %{msdata=none:-G0} \\\n+ %(link_os_lynx)\"\n+\n+/* Override the definition from sysv4.h.  */\n+\n+#undef TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      builtin_define (\"__BIG_ENDIAN__\");\t\\\n+      builtin_define (\"__powerpc__\");\t\t\\\n+      builtin_assert (\"cpu=powerpc\");\t\t\\\n+      builtin_assert (\"machine=powerpc\");\t\\\n+      builtin_define (\"__PPC__\");\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* Override the rs6000.h definition.  */\n+\n+#undef ASM_APP_ON\n+#define ASM_APP_ON \"#APP\\n\"\n+\n+/* Override the rs6000.h definition.  */\n+\n+#undef ASM_APP_OFF\n+#define ASM_APP_OFF \"#NO_APP\\n\"\n+\n+#undef EXTRA_SUBTARGET_SWITCHES\n+#define EXTRA_SUBTARGET_SWITCHES SUBTARGET_OS_LYNX_SWITCHES\n+\n+/* LynxOS does not do anything with .fixup plus let's not create\n+   writable section for linkonce.r and linkonce.t.  */\n+\n+#undef RELOCATABLE_NEEDS_FIXUP\n+\n+/* Override these from rs6000.h with the generic definition.  */\n+\n+#undef SIZE_TYPE\n+#undef ASM_OUTPUT_ALIGN\n+#undef PREFERRED_DEBUGGING_TYPE\n+\n+/* The file rs6000.c defines TARGET_HAVE_TLS unconditionally to the\n+   value of HAVE_AS_TLS.  HAVE_AS_TLS is true as gas support for TLS\n+   is detected by configure.  Override the definition to false.  */\n \n-/* This can become more refined as we have more powerpc options.  */\n-#undef  ASM_SPEC\n-#define ASM_SPEC \"-u %(asm_cpu)\"\n-\n-#undef  SUBTARGET_SWITCHES\n-#define SUBTARGET_SWITCHES \\\n-    {\"threads\",\t\tMASK_THREADS},\t\t\\\n-    {\"posix\",\t\tMASK_POSIX},\t\t\\\n-    {\"system-v\",\tMASK_SYSTEM_V},\n-\n-#undef  SUBTARGET_OVERRIDE_OPTIONS\n-#define SUBTARGET_OVERRIDE_OPTIONS \\\n-do {\t\t\t\t\t\t\t\t\\\n-  if (TARGET_SYSTEM_V && profile_flag)\t\t\t\t\\\n-    warning (\"-msystem-v and -p are incompatible\");\t\t\\\n-  if (TARGET_SYSTEM_V && TARGET_THREADS)\t\t\t\\\n-    warning (\"-msystem-v and -mthreads are incompatible\");\t\\\n-} while (0)\n-\n-/* For collect2 */\n-#define OBJECT_FORMAT_NONE\n-#undef OBJECT_FORMAT_COFF\n-#undef MD_EXEC_PREFIX\n-#undef REAL_LD_FILE_NAME\n-#undef REAL_STRIP_FILE_NAME\n-\n-/* LynxOS doesn't have mcount.  */\n-#undef  FUNCTION_PROFILER\n-#define FUNCTION_PROFILER(file, profile_label_no)\n+#undef HAVE_AS_TLS\n+#define HAVE_AS_TLS 0"}, {"sha": "02a255254a51e0da84bab0fe4af0cea858670b12", "filename": "gcc/config/rs6000/lynxbase.h", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852910694f6d4480afd733a62fd6b93de62b51e6/gcc%2Fconfig%2Frs6000%2Flynxbase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852910694f6d4480afd733a62fd6b93de62b51e6/gcc%2Fconfig%2Frs6000%2Flynxbase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flynxbase.h?ref=852910694f6d4480afd733a62fd6b93de62b51e6", "patch": "@@ -1,45 +0,0 @@\n-/* Definitions for Rs6000 running LynxOS.\n-   Copyright (C) 2003 Free Software Foundation, Inc.\n-   Contributed by David Henkel-Wallace, Cygnus Support (gumby@cygnus.com)\n-\n-   This file is part of GCC.\n-\n-   GCC is free software; you can redistribute it and/or modify it\n-   under the terms of the GNU General Public License as published\n-   by the Free Software Foundation; either version 2, or (at your\n-   option) any later version.\n-\n-   GCC is distributed in the hope that it will be useful, but WITHOUT\n-   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n-   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n-   License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with GCC; see the file COPYING.  If not, write to the\n-   Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n-   MA 02111-1307, USA.  */\n-\n-/* Definitions we want to override with those from rs6000.h:  */\n-#undef LIB_SPEC\n-#undef PTRDIFF_TYPE\n-#undef SIZE_TYPE\n-#undef WCHAR_TYPE\n-#undef WCHAR_TYPE_SIZE\n-#undef EXTRA_SECTIONS\n-#undef READONLY_DATA_SECTION\n-#undef READONLY_DATA_SECTION_ASM_OP\n-#undef EXTRA_SECTION_FUNCTIONS\n-#undef TARGET_ASM_SELECT_RTX_SECTION\n-#undef TARGET_ASM_SELECT_SECTION\n-#undef USER_LABEL_PREFIX\n-#undef ASM_OUTPUT_LABELREF\n-#undef ASM_GENERATE_INTERNAL_LABEL\n-#undef ASM_OUTPUT_COMMON\n-#undef ASM_OUTPUT_LOCAL\n-\n-#undef SDB_DEBUGGING_INFO\n-#undef DBX_DEBUGGING_INFO\n-#undef PREFERRED_DEBUGGING_TYPE\n-\n-#undef FUNCTION_PROFILER\n-#undef SUBTARGET_SWITCHES"}, {"sha": "429f641ece299d57625becf098c8a817bcb95f82", "filename": "gcc/config/rs6000/t-lynx", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f587cb0d4e98c7e7960c32b775c7dfb4fd55e41/gcc%2Fconfig%2Frs6000%2Ft-lynx", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f587cb0d4e98c7e7960c32b775c7dfb4fd55e41/gcc%2Fconfig%2Frs6000%2Ft-lynx", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-lynx?ref=4f587cb0d4e98c7e7960c32b775c7dfb4fd55e41", "patch": "@@ -0,0 +1,38 @@\n+LIB2FUNCS_EXTRA = tramp.S\n+\n+tramp.S: $(srcdir)/config/rs6000/tramp.asm\n+\tcat $(srcdir)/config/rs6000/tramp.asm > tramp.S\n+\n+FPBIT = fp-bit.c\n+DPBIT = dp-bit.c\n+\n+dp-bit.c: $(srcdir)/config/fp-bit.c\n+\tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n+\n+fp-bit.c: $(srcdir)/config/fp-bit.c\n+\techo '#define FLOAT' > fp-bit.c\n+\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n+\n+LIBGCC = stmp-multilib\n+INSTALL_LIBGCC = install-multilib\n+\n+MULTILIB_OPTIONS    += msoft-float\n+MULTILIB_DIRNAMES   += soft-float\n+\n+MULTILIB_OPTIONS    += maltivec\n+MULTILIB_DIRNAMES   += altivec\n+\n+MULTILIB_EXCEPTIONS = *msoft-float/*maltivec*\n+\n+EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o \n+\n+# If .sdata is enabled __CTOR_{LIST,END}__ go into .sdata instead of\n+# .ctors.\n+CRTSTUFF_T_CFLAGS = -mno-sdata \n+ \n+# Compile crtbeginS.o and crtendS.o with pic. \n+CRTSTUFF_T_CFLAGS_S = -fPIC -mno-sdata \n+\n+Local Variables:\n+mode: makefile\n+End:"}, {"sha": "a14a53c614eb3d7ad30461246e274449e428e462", "filename": "gcc/config/t-lynx", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f587cb0d4e98c7e7960c32b775c7dfb4fd55e41/gcc%2Fconfig%2Ft-lynx", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f587cb0d4e98c7e7960c32b775c7dfb4fd55e41/gcc%2Fconfig%2Ft-lynx", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-lynx?ref=4f587cb0d4e98c7e7960c32b775c7dfb4fd55e41", "patch": "@@ -0,0 +1,15 @@\n+# Compile crtbeginS.o and crtendS.o with pic.\n+CRTSTUFF_T_CFLAGS_S = -fPIC\n+\n+# Compile libgcc2.a with pic.\n+TARGET_LIBGCC2_CFLAGS = -fPIC\n+\n+MULTILIB_OPTIONS = mthreads\n+MULTILIB_DIRNAMES = thread\n+\n+LIBGCC = stmp-multilib\n+INSTALL_LIBGCC = install-multilib\n+\n+Local Variables:\n+mode: makefile\n+End:"}, {"sha": "64c120531b129ce8a0e9b0e9622b7bdb9e9b803d", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f587cb0d4e98c7e7960c32b775c7dfb4fd55e41/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f587cb0d4e98c7e7960c32b775c7dfb4fd55e41/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=4f587cb0d4e98c7e7960c32b775c7dfb4fd55e41", "patch": "@@ -790,7 +790,6 @@ whether you use the GNU assembler.  On any other system,\n @item @samp{m68k-hp-hpux}\n @item @samp{m68000-hp-hpux}\n @item @samp{m68000-att-sysv}\n-@item @samp{@var{any}-lynx-lynxos}\n @item @samp{mips-@var{any}}\n @item @samp{sparc-sun-solaris2.@var{any}}\n @item @samp{sparc64-@var{any}-solaris2.@var{any}}"}, {"sha": "651d7198f11dfa31b728b26c2a20dfb3c27ec92f", "filename": "gcc/gthr-lynx.h", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f587cb0d4e98c7e7960c32b775c7dfb4fd55e41/gcc%2Fgthr-lynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f587cb0d4e98c7e7960c32b775c7dfb4fd55e41/gcc%2Fgthr-lynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-lynx.h?ref=4f587cb0d4e98c7e7960c32b775c7dfb4fd55e41", "patch": "@@ -0,0 +1,64 @@\n+/* Threads compatibility routines for libgcc2 and libobjc for\n+   LynxOS.  */\n+/* Compile this one with gcc.  */\n+/* Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n+\n+/* As a special exception, if you link this library with other files,\n+   some of which are compiled with GCC, to produce an executable,\n+   this library does not by itself cause the resulting executable\n+   to be covered by the GNU General Public License.\n+   This exception does not however invalidate any other reasons why\n+   the executable file might be covered by the GNU General Public License.  */\n+\n+#ifndef GCC_GTHR_LYNX_H\n+#define GCC_GTHR_LYNX_H\n+\n+#ifdef _MULTITHREADED\n+\n+/* Using the macro version of pthread_setspecific leads to a\n+   compilation error.  Instead we have two choices either kill all\n+   macros in pthread.h with defining _POSIX_THREADS_CALLS or undefine\n+   individual macros where we should fall back on the function\n+   implementation.  We choose the second approach.  */\n+\n+#include <pthread.h>\n+#undef pthread_setspecific\n+\n+/* When using static libc on LynxOS, we cannot define pthread_create\n+   weak.  If the multi-threaded application includes iostream.h,\n+   gthr-posix.h is included and pthread_create will be defined weak.\n+   If pthead_create is weak its defining module in libc is not\n+   necessarly included in the link and the symbol is resolved to zero.\n+   Therefore the first call to it will crash.\n+\n+   Since -mthreads is a multilib switch on LynxOS we know that at this\n+   point we are compiling for multi-threaded.  Omitting the weak\n+   definitions at this point should have no effect.  */\n+\n+#undef  GTHREAD_USE_WEAK\n+#define GTHREAD_USE_WEAK 0\n+\n+#include \"gthr-posix.h\"\n+\n+#else\n+#include \"gthr-single.h\"\n+#endif\n+\n+#endif /* GCC_GTHR_LYNX_H */"}]}