{"sha": "9f2966203fa776ec02ce2963ca1c6aeb1473234b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYyOTY2MjAzZmE3NzZlYzAyY2UyOTYzY2ExYzZhZWIxNDczMjM0Yg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2007-03-21T05:21:31Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2007-03-21T05:21:31Z"}, "message": "elf.h (TARGET_ASM_DESTRUCTOR): Define.\n\n\t* config/arm/elf.h (TARGET_ASM_DESTRUCTOR): Define.\n\t* config/arm/arm.c (arm_elf_asm_cdtor): New function.\n\t(arm_elf_asm_constructor): Use it.\n\t(arm_elf_asm_destructor): New function.\n\nFrom-SVN: r123103", "tree": {"sha": "6cfa6c062bc3b71e9372d7e6b1838f9a254fee6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cfa6c062bc3b71e9372d7e6b1838f9a254fee6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f2966203fa776ec02ce2963ca1c6aeb1473234b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f2966203fa776ec02ce2963ca1c6aeb1473234b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f2966203fa776ec02ce2963ca1c6aeb1473234b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f2966203fa776ec02ce2963ca1c6aeb1473234b/comments", "author": null, "committer": null, "parents": [{"sha": "22d33984e2a3df1ee5821564d8c4f47ff106c198", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22d33984e2a3df1ee5821564d8c4f47ff106c198", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22d33984e2a3df1ee5821564d8c4f47ff106c198"}], "stats": {"total": 44, "additions": 37, "deletions": 7}, "files": [{"sha": "a3db8dbcb86976636a53bcfa00950a1bb06c92a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f2966203fa776ec02ce2963ca1c6aeb1473234b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f2966203fa776ec02ce2963ca1c6aeb1473234b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f2966203fa776ec02ce2963ca1c6aeb1473234b", "patch": "@@ -1,3 +1,10 @@\n+2007-03-20  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* config/arm/elf.h (TARGET_ASM_DESTRUCTOR): Define.\n+\t* config/arm/arm.c (arm_elf_asm_cdtor): New function.\n+\t(arm_elf_asm_constructor): Use it.\n+\t(arm_elf_asm_destructor): New function.\n+\n 2007-03-20  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \t* jump.c (mark_jump_label): Treat SEQUENCE specially."}, {"sha": "c6b06daf2be6d0e0c48d59c2855ea58e8f40dab5", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f2966203fa776ec02ce2963ca1c6aeb1473234b/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f2966203fa776ec02ce2963ca1c6aeb1473234b/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=9f2966203fa776ec02ce2963ca1c6aeb1473234b", "patch": "@@ -150,6 +150,7 @@ static int arm_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \n #ifdef OBJECT_FORMAT_ELF\n static void arm_elf_asm_constructor (rtx, int);\n+static void arm_elf_asm_destructor (rtx, int);\n #endif\n #ifndef ARM_PE\n static void arm_encode_section_info (tree, rtx, int);\n@@ -12048,36 +12049,55 @@ arm_assemble_integer (rtx x, unsigned int size, int aligned_p)\n   return default_assemble_integer (x, size, aligned_p);\n }\n \n-\n-/* Add a function to the list of static constructors.  */\n-\n static void\n-arm_elf_asm_constructor (rtx symbol, int priority)\n+arm_elf_asm_cdtor (rtx symbol, int priority, bool is_ctor)\n {\n   section *s;\n \n   if (!TARGET_AAPCS_BASED)\n     {\n-      default_named_section_asm_out_constructor (symbol, priority);\n+      (is_ctor ? \n+       default_named_section_asm_out_constructor \n+       : default_named_section_asm_out_destructor) (symbol, priority);\n       return;\n     }\n \n   /* Put these in the .init_array section, using a special relocation.  */\n   if (priority != DEFAULT_INIT_PRIORITY)\n     {\n       char buf[18];\n-      sprintf (buf, \".init_array.%.5u\", priority);\n+      sprintf (buf, \"%s.%.5u\", \n+\t       is_ctor ? \".init_array\" : \".fini_array\",\n+\t       priority);\n       s = get_section (buf, SECTION_WRITE, NULL_TREE);\n     }\n-  else\n+  else if (is_ctor)\n     s = ctors_section;\n+  else\n+    s = dtors_section;\n \n   switch_to_section (s);\n   assemble_align (POINTER_SIZE);\n   fputs (\"\\t.word\\t\", asm_out_file);\n   output_addr_const (asm_out_file, symbol);\n   fputs (\"(target1)\\n\", asm_out_file);\n }\n+\n+/* Add a function to the list of static constructors.  */\n+\n+static void\n+arm_elf_asm_constructor (rtx symbol, int priority)\n+{\n+  arm_elf_asm_cdtor (symbol, priority, /*is_ctor=*/true);\n+}\n+\n+/* Add a function to the list of static destructors.  */\n+\n+static void\n+arm_elf_asm_destructor (rtx symbol, int priority)\n+{\n+  arm_elf_asm_cdtor (symbol, priority, /*is_ctor=*/false);\n+}\n #endif\n \f\n /* A finite state machine takes care of noticing whether or not instructions"}, {"sha": "89584ce7da8717c3b9c2b6bda4c6b057ef0e524f", "filename": "gcc/config/arm/elf.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f2966203fa776ec02ce2963ca1c6aeb1473234b/gcc%2Fconfig%2Farm%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f2966203fa776ec02ce2963ca1c6aeb1473234b/gcc%2Fconfig%2Farm%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Felf.h?ref=9f2966203fa776ec02ce2963ca1c6aeb1473234b", "patch": "@@ -127,6 +127,9 @@\n #undef TARGET_ASM_CONSTRUCTOR\n #define TARGET_ASM_CONSTRUCTOR arm_elf_asm_constructor\n \n+#undef TARGET_ASM_DESTRUCTOR\n+#define TARGET_ASM_DESTRUCTOR arm_elf_asm_destructor\n+\n /* For PIC code we need to explicitly specify (PLT) and (GOT) relocs.  */\n #define NEED_PLT_RELOC\tflag_pic\n #define NEED_GOT_RELOC\tflag_pic"}]}