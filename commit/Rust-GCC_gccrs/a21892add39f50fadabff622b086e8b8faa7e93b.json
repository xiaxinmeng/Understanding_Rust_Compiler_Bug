{"sha": "a21892add39f50fadabff622b086e8b8faa7e93b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIxODkyYWRkMzlmNTBmYWRhYmZmNjIyYjA4NmU4YjhmYWE3ZTkzYg==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2012-06-13T12:27:57Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2012-06-13T12:27:57Z"}, "message": "targhooks.c (default_builtin_vectorized_conversion): Handle vec_construct, using vectype to base cost on subparts.\n\n2012-06-13  Bill Schmidt  <wschmidt@linux.ibm.com>\n\n\t* targhooks.c (default_builtin_vectorized_conversion): Handle\n\tvec_construct, using vectype to base cost on subparts.\n\t* target.h (enum vect_cost_for_stmt): Add vec_construct.\n\t* tree-vect-stmts.c (vect_model_load_cost): Use vec_construct\n\tinstead of scalar_to-vec.\n\t* config/spu/spu.c (spu_builtin_vectorization_cost): Handle\n\tvec_construct in same way as default for now.\n\t* config/i386/i386.c (ix86_builtin_vectorization_cost): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_builtin_vectorization_cost):\n\tHandle vec_construct, including special case for 32-bit loads.\n\nFrom-SVN: r188508", "tree": {"sha": "a90486546faa1a3cb017da25e97444b6cabc379f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a90486546faa1a3cb017da25e97444b6cabc379f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a21892add39f50fadabff622b086e8b8faa7e93b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a21892add39f50fadabff622b086e8b8faa7e93b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a21892add39f50fadabff622b086e8b8faa7e93b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a21892add39f50fadabff622b086e8b8faa7e93b/comments", "author": null, "committer": null, "parents": [{"sha": "2be13164c11f39884bc26e941e5c573eacfbe0ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2be13164c11f39884bc26e941e5c573eacfbe0ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2be13164c11f39884bc26e941e5c573eacfbe0ac"}], "stats": {"total": 63, "additions": 55, "deletions": 8}, "files": [{"sha": "f2959dd7e87013ff304ee2216a9eb685bf9cc137", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21892add39f50fadabff622b086e8b8faa7e93b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21892add39f50fadabff622b086e8b8faa7e93b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a21892add39f50fadabff622b086e8b8faa7e93b", "patch": "@@ -1,3 +1,16 @@\n+2012-06-13  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* targhooks.c (default_builtin_vectorized_conversion): Handle\n+\tvec_construct, using vectype to base cost on subparts.\n+\t* target.h (enum vect_cost_for_stmt): Add vec_construct.\n+\t* tree-vect-stmts.c (vect_model_load_cost): Use vec_construct\n+\tinstead of scalar_to-vec.\n+\t* config/spu/spu.c (spu_builtin_vectorization_cost): Handle\n+\tvec_construct in same way as default for now.\n+\t* config/i386/i386.c (ix86_builtin_vectorization_cost): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_builtin_vectorization_cost):\n+\tHandle vec_construct, including special case for 32-bit loads.\n+\n 2012-06-13  Xinyu Qi <xyqi@marvell.com>\n \n \t* config/arm/arm.c (FL_IWMMXT2): New define."}, {"sha": "d10bf160fe5f62cfcf1c93879450b68525a3e1c9", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21892add39f50fadabff622b086e8b8faa7e93b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21892add39f50fadabff622b086e8b8faa7e93b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a21892add39f50fadabff622b086e8b8faa7e93b", "patch": "@@ -36072,9 +36072,11 @@ static const struct attribute_spec ix86_attribute_table[] =\n /* Implement targetm.vectorize.builtin_vectorization_cost.  */\n static int\n ix86_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n-                                 tree vectype ATTRIBUTE_UNUSED,\n+                                 tree vectype,\n                                  int misalign ATTRIBUTE_UNUSED)\n {\n+  unsigned elements;\n+\n   switch (type_of_cost)\n     {\n       case scalar_stmt:\n@@ -36115,6 +36117,10 @@ ix86_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n       case vec_promote_demote:\n         return ix86_cost->vec_stmt_cost;\n \n+      case vec_construct:\n+\telements = TYPE_VECTOR_SUBPARTS (vectype);\n+\treturn elements / 2 + 1;\n+\n       default:\n         gcc_unreachable ();\n     }"}, {"sha": "ad9d4389d9ba72c524155f504400fdfa3b9050dc", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21892add39f50fadabff622b086e8b8faa7e93b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21892add39f50fadabff622b086e8b8faa7e93b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a21892add39f50fadabff622b086e8b8faa7e93b", "patch": "@@ -3405,6 +3405,7 @@ rs6000_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n                                    tree vectype, int misalign)\n {\n   unsigned elements;\n+  tree elem_type;\n \n   switch (type_of_cost)\n     {\n@@ -3504,6 +3505,18 @@ rs6000_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n \n         return 2;\n \n+      case vec_construct:\n+\telements = TYPE_VECTOR_SUBPARTS (vectype);\n+\telem_type = TREE_TYPE (vectype);\n+\t/* 32-bit vectors loaded into registers are stored as double\n+\t   precision, so we need n/2 converts in addition to the usual\n+\t   n/2 merges to construct a vector of short floats from them.  */\n+\tif (SCALAR_FLOAT_TYPE_P (elem_type)\n+\t    && TYPE_PRECISION (elem_type) == 32)\n+\t  return elements + 1;\n+\telse\n+\t  return elements / 2 + 1;\n+\n       default:\n         gcc_unreachable ();\n     }"}, {"sha": "5310ba7f2f0f65752175eccd530bad966ebd0c15", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21892add39f50fadabff622b086e8b8faa7e93b/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21892add39f50fadabff622b086e8b8faa7e93b/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=a21892add39f50fadabff622b086e8b8faa7e93b", "patch": "@@ -6908,9 +6908,11 @@ spu_builtin_mask_for_load (void)\n /* Implement targetm.vectorize.builtin_vectorization_cost.  */\n static int \n spu_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n-                                tree vectype ATTRIBUTE_UNUSED,\n+                                tree vectype,\n                                 int misalign ATTRIBUTE_UNUSED)\n {\n+  unsigned elements;\n+\n   switch (type_of_cost)\n     {\n       case scalar_stmt:\n@@ -6937,6 +6939,10 @@ spu_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n       case cond_branch_taken:\n         return 6;\n \n+      case vec_construct:\n+\telements = TYPE_VECTOR_SUBPARTS (vectype);\n+\treturn elements / 2 + 1;\n+\n       default:\n         gcc_unreachable ();\n     }"}, {"sha": "252793f2a0f9838152e7ad7e0ad8fc5708909009", "filename": "gcc/target.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21892add39f50fadabff622b086e8b8faa7e93b/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21892add39f50fadabff622b086e8b8faa7e93b/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=a21892add39f50fadabff622b086e8b8faa7e93b", "patch": "@@ -146,7 +146,8 @@ enum vect_cost_for_stmt\n   cond_branch_not_taken,\n   cond_branch_taken,\n   vec_perm,\n-  vec_promote_demote\n+  vec_promote_demote,\n+  vec_construct\n };\n \n /* The target structure.  This holds all the backend hooks.  */"}, {"sha": "5bbec5a110a205d77524380c8d6c95f59b2720f1", "filename": "gcc/targhooks.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21892add39f50fadabff622b086e8b8faa7e93b/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21892add39f50fadabff622b086e8b8faa7e93b/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=a21892add39f50fadabff622b086e8b8faa7e93b", "patch": "@@ -499,9 +499,11 @@ default_builtin_vectorized_conversion (unsigned int code ATTRIBUTE_UNUSED,\n \n int\n default_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n-                                    tree vectype ATTRIBUTE_UNUSED,\n+                                    tree vectype,\n                                     int misalign ATTRIBUTE_UNUSED)\n {\n+  unsigned elements;\n+\n   switch (type_of_cost)\n     {\n       case scalar_stmt:\n@@ -524,6 +526,10 @@ default_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n       case cond_branch_taken:\n         return 3;\n \n+      case vec_construct:\n+\telements = TYPE_VECTOR_SUBPARTS (vectype);\n+\treturn elements / 2 + 1;\n+\n       default:\n         gcc_unreachable ();\n     }"}, {"sha": "46edf1019babf16442f6adff3e2d78f9929deb92", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21892add39f50fadabff622b086e8b8faa7e93b/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21892add39f50fadabff622b086e8b8faa7e93b/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=a21892add39f50fadabff622b086e8b8faa7e93b", "patch": "@@ -1031,11 +1031,13 @@ vect_model_load_cost (stmt_vec_info stmt_info, int ncopies, bool load_lanes_p,\n   /* The loads themselves.  */\n   if (STMT_VINFO_STRIDE_LOAD_P (stmt_info))\n     {\n-      /* N scalar loads plus gathering them into a vector.\n-         ???  scalar_to_vec isn't the cost for that.  */\n+      /* N scalar loads plus gathering them into a vector.  */\n+      tree vectype = STMT_VINFO_VECTYPE (stmt_info);\n       inside_cost += (vect_get_stmt_cost (scalar_load) * ncopies\n-\t\t      * TYPE_VECTOR_SUBPARTS (STMT_VINFO_VECTYPE (stmt_info)));\n-      inside_cost += ncopies * vect_get_stmt_cost (scalar_to_vec);\n+\t\t      * TYPE_VECTOR_SUBPARTS (vectype));\n+      inside_cost += ncopies\n+\t* targetm.vectorize.builtin_vectorization_cost (vec_construct,\n+\t\t\t\t\t\t\tvectype, 0);\n     }\n   else\n     vect_get_load_cost (first_dr, ncopies,"}]}