{"sha": "241a2c498005207d52a3d64884e41953fc00275c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQxYTJjNDk4MDA1MjA3ZDUyYTNkNjQ4ODRlNDE5NTNmYzAwMjc1Yw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-12-04T09:04:56Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-12-04T09:07:42Z"}, "message": "Fix checking failure in IPA-SRA\n\nThis is a regression present on the mainline and 10 branch: on the one\nhand, IPA-SRA does *not* disqualify accesses with zero size but, on the\nother hand, it checks that accesses present in the tree have a (strictly)\npositive size, thus trivially yielding an ICE in some cases.\n\ngcc/ChangeLog:\n\t* ipa-sra.c (verify_access_tree_1): Relax assertion on the size.\n\ngcc/testsuite/ChangeLog:\n\t* gnat.dg/opt91.ads, gnat.dg/opt91.adb: New test.\n\t* gnat.dg/opt91_pkg.ads, gnat.dg/opt91_pkg.adb: New helper.", "tree": {"sha": "06c62e18f86f6236c9ccabcbbc9313fd97de2c2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06c62e18f86f6236c9ccabcbbc9313fd97de2c2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/241a2c498005207d52a3d64884e41953fc00275c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/241a2c498005207d52a3d64884e41953fc00275c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/241a2c498005207d52a3d64884e41953fc00275c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/241a2c498005207d52a3d64884e41953fc00275c/comments", "author": null, "committer": null, "parents": [{"sha": "9199da4b59c34cbcf2cea912b39400d7e90525d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9199da4b59c34cbcf2cea912b39400d7e90525d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9199da4b59c34cbcf2cea912b39400d7e90525d6"}], "stats": {"total": 54, "additions": 53, "deletions": 1}, "files": [{"sha": "7adc4b688f3292c79c43ec778225d29ac5f0935e", "filename": "gcc/ipa-sra.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/241a2c498005207d52a3d64884e41953fc00275c/gcc%2Fipa-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/241a2c498005207d52a3d64884e41953fc00275c/gcc%2Fipa-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-sra.c?ref=241a2c498005207d52a3d64884e41953fc00275c", "patch": "@@ -1480,7 +1480,7 @@ verify_access_tree_1 (gensum_param_access *access, HOST_WIDE_INT parent_offset,\n {\n   while (access)\n     {\n-      gcc_assert (access->offset >= 0 && access->size > 0);\n+      gcc_assert (access->offset >= 0 && access->size >= 0);\n \n       if (parent_size != 0)\n \t{"}, {"sha": "b0132f82d09d9bfd7e37d4e7186bcbd995da0af7", "filename": "gcc/testsuite/gnat.dg/opt91.adb", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/241a2c498005207d52a3d64884e41953fc00275c/gcc%2Ftestsuite%2Fgnat.dg%2Fopt91.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/241a2c498005207d52a3d64884e41953fc00275c/gcc%2Ftestsuite%2Fgnat.dg%2Fopt91.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt91.adb?ref=241a2c498005207d52a3d64884e41953fc00275c", "patch": "@@ -0,0 +1,11 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O2 -fchecking=1\" }\n+\n+package body Opt91 is\n+\n+   function Custom_Image (Self : True_Relation_Rec) return String is\n+   begin\n+      return \"<True>\";\n+   end;\n+\n+end Opt91;"}, {"sha": "b31aa8de350ef88de4dbafd7fbc27dfd7e5de1be", "filename": "gcc/testsuite/gnat.dg/opt91.ads", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/241a2c498005207d52a3d64884e41953fc00275c/gcc%2Ftestsuite%2Fgnat.dg%2Fopt91.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/241a2c498005207d52a3d64884e41953fc00275c/gcc%2Ftestsuite%2Fgnat.dg%2Fopt91.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt91.ads?ref=241a2c498005207d52a3d64884e41953fc00275c", "patch": "@@ -0,0 +1,10 @@\n+with Opt91_Pkg; use Opt91_Pkg;\n+\n+package Opt91 is\n+\n+   type True_Relation_Rec is null record;\n+   function Custom_Image (Self : True_Relation_Rec) return String;\n+\n+   package True_Relation is new Pure_Relation (Ty => True_Relation_Rec);\n+\n+end Opt91;"}, {"sha": "5b95fb2e16536877c819e67653c69cc262095109", "filename": "gcc/testsuite/gnat.dg/opt91_pkg.adb", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/241a2c498005207d52a3d64884e41953fc00275c/gcc%2Ftestsuite%2Fgnat.dg%2Fopt91_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/241a2c498005207d52a3d64884e41953fc00275c/gcc%2Ftestsuite%2Fgnat.dg%2Fopt91_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt91_pkg.adb?ref=241a2c498005207d52a3d64884e41953fc00275c", "patch": "@@ -0,0 +1,12 @@\n+package body Opt91_Pkg is\n+\n+   package body Pure_Relation is\n+\n+      overriding function Custom_Image (Self : Rel) return String is\n+      begin\n+         return Custom_Image (Self.Rel);\n+      end Custom_Image;\n+\n+   end Pure_Relation;\n+\n+end Opt91_Pkg;"}, {"sha": "9bfd0f05b3dac6b363924286f202657a897d4f0b", "filename": "gcc/testsuite/gnat.dg/opt91_pkg.ads", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/241a2c498005207d52a3d64884e41953fc00275c/gcc%2Ftestsuite%2Fgnat.dg%2Fopt91_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/241a2c498005207d52a3d64884e41953fc00275c/gcc%2Ftestsuite%2Fgnat.dg%2Fopt91_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt91_pkg.ads?ref=241a2c498005207d52a3d64884e41953fc00275c", "patch": "@@ -0,0 +1,19 @@\n+package Opt91_Pkg is\n+\n+   type Base_Relation is abstract tagged null record;\n+\n+   function Custom_Image (Self : Base_Relation) return String is abstract;\n+\n+   generic\n+      type Ty is private;\n+      with function Custom_Image (Self : Ty) return String is <>;\n+   package Pure_Relation is\n+\n+      type Rel is new Base_Relation with record\n+         Rel : Ty;\n+      end record;\n+\n+      overriding function Custom_Image (Self : Rel) return String;\n+   end Pure_Relation;\n+\n+end Opt91_Pkg;"}]}