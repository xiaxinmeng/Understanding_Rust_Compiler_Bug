{"sha": "ff1fe457370d6f33071747b0dfd1b76dff7e247a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYxZmU0NTczNzBkNmYzMzA3MTc0N2IwZGZkMWI3NmRmZjdlMjQ3YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-12-03T12:27:48Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-12-03T12:27:48Z"}, "message": "re PR tree-optimization/37716 (ice for legal C++ code with -O2 on 20080926)\n\n\tPR tree-optimization/37716\n\t* tree-sra.c (sra_build_assignment): For scalar bitfield SRC construct\n\tall the needed operations as trees and gimplify_assign it to dst.\n\n\t* g++.dg/torture/pr37716.C: New test.\n\nFrom-SVN: r142392", "tree": {"sha": "5ba418443623690434ede1e71ba81639b49d733b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ba418443623690434ede1e71ba81639b49d733b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff1fe457370d6f33071747b0dfd1b76dff7e247a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff1fe457370d6f33071747b0dfd1b76dff7e247a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff1fe457370d6f33071747b0dfd1b76dff7e247a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff1fe457370d6f33071747b0dfd1b76dff7e247a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d5fdc62c3fe523b1104bcccaa3f66f7fa5298d9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5fdc62c3fe523b1104bcccaa3f66f7fa5298d9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5fdc62c3fe523b1104bcccaa3f66f7fa5298d9f"}], "stats": {"total": 151, "additions": 90, "deletions": 61}, "files": [{"sha": "26e34ef99ef5cbb30ab149f78276f734815d1ad0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff1fe457370d6f33071747b0dfd1b76dff7e247a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff1fe457370d6f33071747b0dfd1b76dff7e247a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff1fe457370d6f33071747b0dfd1b76dff7e247a", "patch": "@@ -1,5 +1,9 @@\n 2008-12-03  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/37716\n+\t* tree-sra.c (sra_build_assignment): For scalar bitfield SRC construct\n+\tall the needed operations as trees and gimplify_assign it to dst.\n+\n \tPR target/37610\n \t* configure.ac (gcc_cv_readelf): Look for readelf.\n \t(gcc_cv_as_cfi_advance_working): Check for working"}, {"sha": "f12dbdb41a345d11601fa220da543e2d145ae3ea", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff1fe457370d6f33071747b0dfd1b76dff7e247a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff1fe457370d6f33071747b0dfd1b76dff7e247a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ff1fe457370d6f33071747b0dfd1b76dff7e247a", "patch": "@@ -1,3 +1,8 @@\n+2008-12-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/37716\n+\t* g++.dg/torture/pr37716.C: New test.\n+\n 2008-12-03  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.dg/torture/pr37868.c: Skip on the SPARC."}, {"sha": "13b98d68a4044a83baaec40091d7f000c579299d", "filename": "gcc/testsuite/g++.dg/torture/pr37716.C", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff1fe457370d6f33071747b0dfd1b76dff7e247a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr37716.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff1fe457370d6f33071747b0dfd1b76dff7e247a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr37716.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr37716.C?ref=ff1fe457370d6f33071747b0dfd1b76dff7e247a", "patch": "@@ -0,0 +1,56 @@\n+// PR tree-optimization/37716\n+// { dg-do compile }\n+\n+struct A\n+{\n+  struct B\n+  {\n+    int a, b, c, d;\n+    void *e[1];\n+  };\n+  B *d;\n+  inline void **f1 (int i) const\n+  {\n+    return d->e + d->c + i;\n+  }\n+};\n+\n+template <typename T>\n+struct C\n+{\n+  struct D\n+  {\n+    void *v;\n+    inline T & f3 ()\n+    {\n+      return *reinterpret_cast <T *> (this);\n+    }\n+  };\n+  union\n+  {\n+    A p;\n+    A::B *d;\n+  };\n+  T & operator[](int i)\n+  {\n+    if (d->a != 1)\n+      f2 ();\n+    return reinterpret_cast <D *> (p.f1 (i))->f3 ();\n+  }\n+  void f2 ();\n+  void f3 (int i, const T & t);\n+};\n+\n+class E\n+{\n+  int e, f;\n+};\n+\n+C <E> c;\n+\n+void\n+foo (int x)\n+{\n+  E e = c[x];\n+  c.f3 (x, e);\n+}"}, {"sha": "3225d103854865fb5eac6c488d8d0b08bfabdac9", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 25, "deletions": 61, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff1fe457370d6f33071747b0dfd1b76dff7e247a/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff1fe457370d6f33071747b0dfd1b76dff7e247a/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=ff1fe457370d6f33071747b0dfd1b76dff7e247a", "patch": "@@ -2158,9 +2158,10 @@ sra_build_assignment (tree dst, tree src)\n   if (scalar_bitfield_p (src))\n     {\n       tree var, shift, width;\n-      tree utype, stype, stmp, utmp, dtmp;\n+      tree utype, stype;\n       bool unsignedp = (INTEGRAL_TYPE_P (TREE_TYPE (src))\n \t\t        ? TYPE_UNSIGNED (TREE_TYPE (src)) : true);\n+      struct gimplify_ctx gctx;\n \n       var = TREE_OPERAND (src, 0);\n       width = TREE_OPERAND (src, 1);\n@@ -2191,28 +2192,15 @@ sra_build_assignment (tree dst, tree src)\n       else if (!TYPE_UNSIGNED (utype))\n \tutype = unsigned_type_for (utype);\n \n-      stmp = make_rename_temp (stype, \"SR\");\n-\n       /* Convert the base var of the BIT_FIELD_REF to the scalar type\n \t we use for computation if we cannot use it directly.  */\n-      if (!useless_type_conversion_p (stype, TREE_TYPE (var)))\n-\t{\n-\t  if (INTEGRAL_TYPE_P (TREE_TYPE (var)))\n-\t    stmt = gimple_build_assign (stmp, fold_convert (stype, var));\n-\t  else\n-\t    stmt = gimple_build_assign (stmp, fold_build1 (VIEW_CONVERT_EXPR,\n-\t\t\t\t\t\t\t   stype, var));\n-\t  gimple_seq_add_stmt (&seq, stmt);\n-\t  var = stmp;\n-\t}\n+      if (INTEGRAL_TYPE_P (TREE_TYPE (var)))\n+\tvar = fold_convert (stype, var);\n+      else\n+\tvar = fold_build1 (VIEW_CONVERT_EXPR, stype, var);\n \n       if (!integer_zerop (shift))\n-\t{\n-\t  stmt = gimple_build_assign (stmp, fold_build2 (RSHIFT_EXPR, stype,\n-\t\t\t\t\t\t\t var, shift));\n-\t  gimple_seq_add_stmt (&seq, stmt);\n-\t  var = stmp;\n-\t}\n+\tvar = fold_build2 (RSHIFT_EXPR, stype, var, shift);\n \n       /* If we need a masking operation, produce one.  */\n       if (TREE_INT_CST_LOW (width) == TYPE_PRECISION (stype))\n@@ -2222,24 +2210,11 @@ sra_build_assignment (tree dst, tree src)\n \t  tree one = build_int_cst_wide (stype, 1, 0);\n \t  tree mask = int_const_binop (LSHIFT_EXPR, one, width, 0);\n \t  mask = int_const_binop (MINUS_EXPR, mask, one, 0);\n-\n-\t  stmt = gimple_build_assign (stmp, fold_build2 (BIT_AND_EXPR, stype,\n-\t\t\t\t\t\t\t var, mask));\n-\t  gimple_seq_add_stmt (&seq, stmt);\n-\t  var = stmp;\n+\t  var = fold_build2 (BIT_AND_EXPR, stype, var, mask);\n \t}\n \n       /* After shifting and masking, convert to the target type.  */\n-      utmp = stmp;\n-      if (!useless_type_conversion_p (utype, stype))\n-\t{\n-\t  utmp = make_rename_temp (utype, \"SR\");\n-\n-\t  stmt = gimple_build_assign (utmp, fold_convert (utype, var));\n-\t  gimple_seq_add_stmt (&seq, stmt);\n-\n-\t  var = utmp;\n-\t}\n+      var = fold_convert (utype, var);\n \n       /* Perform sign extension, if required.\n \t ???  This should never be necessary.  */\n@@ -2250,40 +2225,29 @@ sra_build_assignment (tree dst, tree src)\n \t\t\t\t\t  size_binop (MINUS_EXPR, width,\n \t\t\t\t\t\t      bitsize_int (1)), 0);\n \n-\t  stmt = gimple_build_assign (utmp, fold_build2 (BIT_XOR_EXPR, utype,\n-\t\t\t\t\t\t\t var, signbit));\n-\t  gimple_seq_add_stmt (&seq, stmt);\n-\n-\t  stmt = gimple_build_assign (utmp, fold_build2 (MINUS_EXPR, utype,\n-\t\t\t\t\t\t\t utmp, signbit));\n-\t  gimple_seq_add_stmt (&seq, stmt);\n-\n-\t  var = utmp;\n+\t  var = fold_build2 (BIT_XOR_EXPR, utype, var, signbit);\n+\t  var = fold_build2 (MINUS_EXPR, utype, var, signbit);\n \t}\n \n       /* fold_build3 (BIT_FIELD_REF, ...) sometimes returns a cast.  */\n       STRIP_NOPS (dst);\n \n       /* Finally, move and convert to the destination.  */\n-      if (!useless_type_conversion_p (TREE_TYPE (dst), TREE_TYPE (var)))\n-\t{\n-\t  if (INTEGRAL_TYPE_P (TREE_TYPE (dst)))\n-\t    var = fold_convert (TREE_TYPE (dst), var);\n-\t  else\n-\t    var = fold_build1 (VIEW_CONVERT_EXPR, TREE_TYPE (dst), var);\n+      if (INTEGRAL_TYPE_P (TREE_TYPE (dst)))\n+\tvar = fold_convert (TREE_TYPE (dst), var);\n+      else\n+\tvar = fold_build1 (VIEW_CONVERT_EXPR, TREE_TYPE (dst), var);\n \n-\t  /* If the destination is not a register the conversion needs\n-\t     to be a separate statement.  */\n-\t  if (!is_gimple_reg (dst))\n-\t    {\n-\t      dtmp = make_rename_temp (TREE_TYPE (dst), \"SR\");\n-\t      stmt = gimple_build_assign (dtmp, var);\n-\t      gimple_seq_add_stmt (&seq, stmt);\n-\t      var = dtmp;\n-\t    }\n-\t}\n-      stmt = gimple_build_assign (dst, var);\n-      gimple_seq_add_stmt (&seq, stmt);\n+      push_gimplify_context (&gctx);\n+      gctx.into_ssa = true;\n+      gctx.allow_rhs_cond_expr = true;\n+\n+      gimplify_assign (dst, var, &seq);\n+\n+      if (gimple_referenced_vars (cfun))\n+\tfor (var = gctx.temps; var; var = TREE_CHAIN (var))\n+\t  add_referenced_var (var);\n+      pop_gimplify_context (NULL);\n \n       return seq;\n     }"}]}