{"sha": "03a9bd059b4eb64c88f0c44379b2e315a4a2fd25", "node_id": "C_kwDOANBUbNoAKDAzYTliZDA1OWI0ZWI2NGM4OGYwYzQ0Mzc5YjJlMzE1YTRhMmZkMjU", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-12-04T00:16:46Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-12-04T00:16:46Z"}, "message": "Daily bump.", "tree": {"sha": "5d888bc6eb6359643925750f162ddddd8facca79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d888bc6eb6359643925750f162ddddd8facca79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03a9bd059b4eb64c88f0c44379b2e315a4a2fd25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03a9bd059b4eb64c88f0c44379b2e315a4a2fd25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03a9bd059b4eb64c88f0c44379b2e315a4a2fd25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03a9bd059b4eb64c88f0c44379b2e315a4a2fd25/comments", "author": null, "committer": null, "parents": [{"sha": "bf548ce3e67276aa429b462cf41e68891fdf40c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf548ce3e67276aa429b462cf41e68891fdf40c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf548ce3e67276aa429b462cf41e68891fdf40c2"}], "stats": {"total": 343, "additions": 342, "deletions": 1}, "files": [{"sha": "1ec70dff205869cc8528277fe43e0720cc27d490", "filename": "gcc/ChangeLog", "status": "modified", "additions": 197, "deletions": 0, "changes": 197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a9bd059b4eb64c88f0c44379b2e315a4a2fd25/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a9bd059b4eb64c88f0c44379b2e315a4a2fd25/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03a9bd059b4eb64c88f0c44379b2e315a4a2fd25", "patch": "@@ -1,3 +1,200 @@\n+2021-12-03  Martin Liska  <mliska@suse.cz>\n+\t    Peter Bergner  <bergner@linux.ibm.com>\n+\n+\tPR target/101324\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Move the\n+\tdisabling of shrink-wrapping when using -mrop-protect from here...\n+\t(rs6000_override_options_after_change): ...to here.\n+\n+2021-12-03  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/103269\n+\t* config/i386/i386-expand.c (ix86_expand_builtin): Pass PVW_NONE\n+\tand PVW_NONE to ix86_target_string.\n+\t* config/i386/i386-options.c (ix86_target_string): Add arguments\n+\tfor move_max and store_max.\n+\t(ix86_target_string::add_vector_width): New lambda.\n+\t(ix86_debug_options): Pass ix86_move_max and ix86_store_max to\n+\tix86_target_string.\n+\t(ix86_function_specific_print): Pass ptr->x_ix86_move_max and\n+\tptr->x_ix86_store_max to ix86_target_string.\n+\t(ix86_valid_target_attribute_tree): Handle x_ix86_move_max and\n+\tx_ix86_store_max.\n+\t(ix86_option_override_internal): Set the default x_ix86_move_max\n+\tand x_ix86_store_max.\n+\t* config/i386/i386-options.h (ix86_target_string): Add\n+\tprefer_vector_width and prefer_vector_width.\n+\t* config/i386/i386.h (TARGET_AVX256_MOVE_BY_PIECES): Removed.\n+\t(TARGET_AVX256_STORE_BY_PIECES): Likewise.\n+\t(MOVE_MAX): Use 64 if ix86_move_max or ix86_store_max ==\n+\tPVW_AVX512.  Use 32 if ix86_move_max or ix86_store_max >=\n+\tPVW_AVX256.\n+\t(STORE_MAX_PIECES): Use 64 if ix86_store_max == PVW_AVX512.\n+\tUse 32 if ix86_store_max >= PVW_AVX256.\n+\t* config/i386/i386.opt: Add -mmove-max=bits and -mstore-max=bits.\n+\t* config/i386/x86-tune.def (X86_TUNE_AVX512_MOVE_BY_PIECES): New.\n+\t(X86_TUNE_AVX512_STORE_BY_PIECES): Likewise.\n+\t* doc/invoke.texi: Document -mmove-max=bits and -mstore-max=bits.\n+\n+2021-12-03  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_builtin_reciprocal): Fix builtin\n+\tidentifiers.\n+\n+2021-12-03  SiYu Wu  <siyu@isrc.iscas.ac.cn>\n+\n+\t* common/config/riscv/riscv-common.c (riscv_implied_info):\n+\tAdd K-ext related entry.\n+\t(riscv_supported_std_ext): Add 'k'.\n+\t* config/riscv/arch-canonicalize (CANONICAL_ORDER): Add 'k'.\n+\t(IMPLIED_EXT): Add K-ext related entry.\n+\n+2021-12-03  SiYu Wu  <siyu@isrc.iscas.ac.cn>\n+\n+\t* common/config/riscv/riscv-common.c (riscv_ext_version_table):\n+\tAdd zbk* and zk*.\n+\t* config/riscv/riscv-opts.h (MASK_ZBKB): New.\n+\t(MASK_ZBKC): Ditto.\n+\t(MASK_ZBKX): Ditto.\n+\t(MASK_ZKNE): Ditto.\n+\t(MASK_ZKND): Ditto.\n+\t(MASK_ZKNH): Ditto.\n+\t(MASK_ZKR): Ditto.\n+\t(MASK_ZKSED): Ditto.\n+\t(MASK_ZKSH): Ditto.\n+\t(MASK_ZKT): Ditto.\n+\t(TARGET_ZBKB): Ditto.\n+\t(TARGET_ZBKC): Ditto.\n+\t(TARGET_ZBKX): Ditto.\n+\t(TARGET_ZKNE): Ditto.\n+\t(TARGET_ZKND): Ditto.\n+\t(TARGET_ZKNH): Ditto.\n+\t(TARGET_ZKR): Ditto.\n+\t(TARGET_ZKSED): Ditto.\n+\t(TARGET_ZKSH): Ditto.\n+\t(TARGET_ZKT): Ditto.\n+\t* config/riscv/riscv.opt (riscv_zk_subext): New.\n+\n+2021-12-03  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* tree-vect-stmts.c (prepare_load_store_mask): Rename to...\n+\t(prepare_vec_mask): ...This and record operations that have already been\n+\tmasked.\n+\t(vectorizable_call): Use it.\n+\t(vectorizable_operation): Likewise.\n+\t(vectorizable_store): Likewise.\n+\t(vectorizable_load): Likewise.\n+\t* tree-vectorizer.h (class _loop_vec_info): Add vec_cond_masked_set.\n+\t(vec_cond_masked_set_type, tree_cond_mask_hash): New.\n+\n+2021-12-03  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/51469\n+\tPR target/83782\n+\t* target.def (ifunc_ref_local_ok): Add a target hook.\n+\t* varasm.c (default_binds_local_p_3): Force indirect function\n+\tresolver non-local only if targetm.ifunc_ref_local_ok returns\n+\tfalse.\n+\t* config/i386/i386-expand.c (ix86_expand_call): Call\n+\tix86_call_use_plt_p to check if PLT should be used.\n+\t* config/i386/i386-protos.h (ix86_call_use_plt_p): New.\n+\t* config/i386/i386.c (output_pic_addr_const): Call\n+\tix86_call_use_plt_p to check if \"@PLT\" is needed.\n+\t(ix86_call_use_plt_p): New.\n+\t(TARGET_IFUNC_REF_LOCAL_OK): New.\n+\t* doc/tm.texi.in: Add TARGET_IFUNC_REF_LOCAL_OK.\n+\t* doc/tm.texi: Regenerated.\n+\n+2021-12-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* attribs.h (simple_cst_list_equal): Declare.\n+\t* attribs.c (simple_cst_list_equal): No longer static.\n+\t* config/i386/i386-options.c (target_attribute_cache): New variable.\n+\t(ix86_valid_target_attribute_p): Cache DECL_FUNCTION_SPECIFIC_TARGET\n+\tand DECL_FUNCTION_SPECIFIC_OPTIMIZATION based on args.\n+\n+2021-12-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR pch/71934\n+\t* ggc.h (gt_pch_note_callback): Declare.\n+\t* gengtype.h (enum typekind): Add TYPE_CALLBACK.\n+\t(callback_type): Declare.\n+\t* gengtype.c (dbgprint_count_type_at): Handle TYPE_CALLBACK.\n+\t(callback_type): New variable.\n+\t(process_gc_options): Add CALLBACK argument, handle callback\n+\toption.\n+\t(set_gc_used_type): Adjust process_gc_options caller, if callback,\n+\tset type to &callback_type.\n+\t(output_mangled_typename): Handle TYPE_CALLBACK.\n+\t(walk_type): Likewise.  Handle callback option.\n+\t(write_types_process_field): Handle TYPE_CALLBACK.\n+\t(write_types_local_user_process_field): Likewise.\n+\t(write_types_local_process_field): Likewise.\n+\t(write_root): Likewise.\n+\t(dump_typekind): Likewise.\n+\t(dump_type): Likewise.\n+\t* gengtype-state.c (type_lineloc): Handle TYPE_CALLBACK.\n+\t(state_writer::write_state_callback_type): New method.\n+\t(state_writer::write_state_type): Handle TYPE_CALLBACK.\n+\t(read_state_callback_type): New function.\n+\t(read_state_type): Handle TYPE_CALLBACK.\n+\t* ggc-common.c (callback_vec): New variable.\n+\t(gt_pch_note_callback): New function.\n+\t(gt_pch_save): Stream out gt_pch_save function address and relocation\n+\ttable.\n+\t(gt_pch_restore): Stream in saved gt_pch_save function address and\n+\trelocation table and apply relocations if needed.\n+\t* doc/gty.texi (callback): Document new GTY option.\n+\t* varasm.c (get_unnamed_section): Change callback argument's type and\n+\tlast argument's type from const void * to const char *.\n+\t(output_section_asm_op): Change argument's type from const void *\n+\tto const char *, remove unnecessary cast.\n+\t* tree-core.h (struct tree_translation_unit_decl): Drop GTY((skip))\n+\tfrom language member.\n+\t* output.h (unnamed_section_callback): Change argument type from\n+\tconst void * to const char *.\n+\t(struct unnamed_section): Use GTY((callback)) instead of GTY((skip))\n+\tfor callback member.  Change data member type from const void *\n+\tto const char *.\n+\t(struct noswitch_section): Use GTY((callback)) instead of GTY((skip))\n+\tfor callback member.\n+\t(get_unnamed_section): Change callback argument's type and\n+\tlast argument's type from const void * to const char *.\n+\t(output_section_asm_op): Change argument's type from const void *\n+\tto const char *.\n+\t* config/avr/avr.c (avr_output_progmem_section_asm_op): Likewise.\n+\tRemove unneeded cast.\n+\t* config/darwin.c (output_objc_section_asm_op): Change argument's type\n+\tfrom const void * to const char *.\n+\t* config/pa/pa.c (som_output_text_section_asm_op): Likewise.\n+\t(som_output_comdat_data_section_asm_op): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_elf_output_toc_section_asm_op):\n+\tLikewise.\n+\t(rs6000_xcoff_output_readonly_section_asm_op): Likewise.  Instead\n+\tof dereferencing directive hardcode variable names and decide based on\n+\twhether directive is NULL or not.\n+\t(rs6000_xcoff_output_readwrite_section_asm_op): Change argument's type\n+\tfrom const void * to const char *.\n+\t(rs6000_xcoff_output_tls_section_asm_op): Likewise.  Instead\n+\tof dereferencing directive hardcode variable names and decide based on\n+\twhether directive is NULL or not.\n+\t(rs6000_xcoff_output_toc_section_asm_op): Change argument's type\n+\tfrom const void * to const char *.\n+\t(rs6000_xcoff_asm_init_sections): Adjust get_unnamed_section callers.\n+\n+2021-12-03  Richard Purdie  <richard.purdie@linuxfoundation.org>\n+\n+\t* Makefile.in: Fix \"argument list too long\" from install-plugins.\n+\n+2021-12-03  Matt Jacobson  <mhjacobson@me.com>\n+\n+\t* config.gcc: For the AVR target, populate TM_MULTILIB_CONFIG.\n+\t* config/avr/genmultilib.awk: Add ability to filter generated multilib\n+\tlist.\n+\t* config/avr/t-avr: Pass TM_MULTILIB_CONFIG to genmultilib.awk.\n+\t* configure.ac: Update help string for --with-multilib-list.\n+\t* configure: Regenerate.\n+\n 2021-12-02  Ilya Lipnitskiy  <ilya.lipnitskiy@gmail.com>\n \n \t* configure: Regenerate."}, {"sha": "bd5f263600a857a31a49b84988a35e49aeb12728", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a9bd059b4eb64c88f0c44379b2e315a4a2fd25/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a9bd059b4eb64c88f0c44379b2e315a4a2fd25/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=03a9bd059b4eb64c88f0c44379b2e315a4a2fd25", "patch": "@@ -1 +1 @@\n-20211203\n+20211204"}, {"sha": "f652f59861e6730bae814062a8902948292da547", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a9bd059b4eb64c88f0c44379b2e315a4a2fd25/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a9bd059b4eb64c88f0c44379b2e315a4a2fd25/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=03a9bd059b4eb64c88f0c44379b2e315a4a2fd25", "patch": "@@ -1,3 +1,10 @@\n+2021-12-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR pch/71934\n+\t* c-pch.c (struct c_pch_validity): Remove pch_init member.\n+\t(pch_init): Don't initialize v.pch_init.\n+\t(c_common_valid_pch): Don't warn and punt if .text addresses change.\n+\n 2021-12-01  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/103310"}, {"sha": "b36ba4a2886260c0243cf92612110ba1b1b67382", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a9bd059b4eb64c88f0c44379b2e315a4a2fd25/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a9bd059b4eb64c88f0c44379b2e315a4a2fd25/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=03a9bd059b4eb64c88f0c44379b2e315a4a2fd25", "patch": "@@ -1,3 +1,21 @@\n+2021-12-03  Jason Merrill  <jason@redhat.com>\n+\n+\t* error.c (current_dump_scope): New variable.\n+\t(dump_scope): Check it.\n+\t(dump_function_decl): Set it.\n+\n+2021-12-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/103403\n+\t* cp-gimplify.c (cp_fold): Don't recurse if maybe_undo_parenthesized_ref\n+\tdoesn't change its argument.\n+\t* pt.c (do_auto_deduction): Don't strip REFERENCE_REF_P trees if they\n+\tare REF_PARENTHESIZED_P.  Use stripped_init when checking for\n+\tid-expression.\n+\t* semantics.c (force_paren_expr): Set REF_PARENTHESIZED_P on\n+\tREFERENCE_REF_P trees too.\n+\t(maybe_undo_parenthesized_ref): Remove dead code.\n+\n 2021-12-02  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/94490"}, {"sha": "3962bbaf3800bb84b2dcbffa7c6bce5206caf78a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a9bd059b4eb64c88f0c44379b2e315a4a2fd25/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a9bd059b4eb64c88f0c44379b2e315a4a2fd25/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=03a9bd059b4eb64c88f0c44379b2e315a4a2fd25", "patch": "@@ -1,3 +1,19 @@\n+2021-12-03  Harald Anlauf  <anlauf@gmx.de>\n+\t    Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/103505\n+\t* array.c (match_array_element_spec): Try to simplify array\n+\telement specifications to improve early checking.\n+\t* expr.c (gfc_try_simplify_expr): New.  Try simplification of an\n+\texpression via gfc_simplify_expr.  When an error occurs, roll\n+\tback.\n+\t* gfortran.h (gfc_try_simplify_expr): Declare it.\n+\n+2021-12-03  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* trans-stmt.c (gfc_trans_allocate): Set e3_has_nodescriptor to true\n+\tonly for non-named arrays.\n+\n 2021-12-02  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \tPR fortran/90030"}, {"sha": "5d29c353d5f2f1a8a0475e735317fb529252a59c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a9bd059b4eb64c88f0c44379b2e315a4a2fd25/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a9bd059b4eb64c88f0c44379b2e315a4a2fd25/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=03a9bd059b4eb64c88f0c44379b2e315a4a2fd25", "patch": "@@ -1,3 +1,87 @@\n+2021-12-03  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/diagnostic/scope1.C: New test.\n+\n+2021-12-03  Martin Liska  <mliska@suse.cz>\n+\n+\tPR target/101324\n+\t* gcc.target/powerpc/pr101324.c: New test.\n+\n+2021-12-03  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_rop_ok): New function.\n+\t* gcc.target/powerpc/rop-1.c: Use it.\n+\t* gcc.target/powerpc/rop-2.c: Likewise.\n+\t* gcc.target/powerpc/rop-3.c: Likewise.\n+\t* gcc.target/powerpc/rop-4.c: Likewise.\n+\t* gcc.target/powerpc/rop-5.c: Likewise.\n+\n+2021-12-03  Harald Anlauf  <anlauf@gmx.de>\n+\t    Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/103505\n+\t* gfortran.dg/pr103505.f90: New test.\n+\n+2021-12-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/103403\n+\t* g++.dg/cpp1y/decltype-auto2.C: New test.\n+\t* g++.dg/cpp1y/decltype-auto3.C: New test.\n+\t* g++.dg/cpp1y/decltype-auto4.C: New test.\n+\t* g++.dg/cpp1z/decomp-decltype1.C: New test.\n+\n+2021-12-03  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/103269\n+\t* gcc.target/i386/pieces-memcpy-17.c: New test.\n+\t* gcc.target/i386/pieces-memcpy-18.c: Likewise.\n+\t* gcc.target/i386/pieces-memcpy-19.c: Likewise.\n+\t* gcc.target/i386/pieces-memcpy-20.c: Likewise.\n+\t* gcc.target/i386/pieces-memcpy-21.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-45.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-46.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-47.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-48.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-49.c: Likewise.\n+\n+2021-12-03  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/83782\n+\t* gcc.target/i386/pr83782-1.c: Also scan leal x32.\n+\t* gcc.target/i386/pr83782-2.c: Likewise.\n+\n+2021-12-03  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.target/aarch64/sve/pred-combine-and.c: New test.\n+\n+2021-12-03  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/51469\n+\tPR target/83782\n+\t* gcc.target/i386/pr83782-1.c: New test.\n+\t* gcc.target/i386/pr83782-2.c: Likewise.\n+\n+2021-12-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/103456\n+\t* gcc.dg/ubsan/pr103456.c: Add -ffat-lto-objects to dg-options.\n+\n+2021-12-03  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/allocate_with_source_26.f90: Adjust testcase.\n+\t* gfortran.dg/allocate_with_mold_4.f90: New testcase.\n+\n+2021-12-03  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR testsuite/102735\n+\t* lib/gcc-dg.exp (process-message): Make sure that we get unique\n+\ttest names.\n+\n+2021-12-03  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR c++/71792\n+\t* g++.dg/torture/pr71792.C: New test.\n+\n 2021-12-02  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/103526"}, {"sha": "accee55188b9e2c287154f677c62bdf42eacd5e1", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a9bd059b4eb64c88f0c44379b2e315a4a2fd25/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a9bd059b4eb64c88f0c44379b2e315a4a2fd25/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=03a9bd059b4eb64c88f0c44379b2e315a4a2fd25", "patch": "@@ -1,3 +1,9 @@\n+2021-12-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR pch/71934\n+\t* include/line-map.h (class line_maps): Add GTY((callback)) to\n+\treallocator and round_alloc_size members.\n+\n 2021-12-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/100977"}, {"sha": "80db8906d959b219cdae6b30b942cea60997c61c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a9bd059b4eb64c88f0c44379b2e315a4a2fd25/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a9bd059b4eb64c88f0c44379b2e315a4a2fd25/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=03a9bd059b4eb64c88f0c44379b2e315a4a2fd25", "patch": "@@ -1,3 +1,16 @@\n+2021-12-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_tree.h (_Rb_tree::_Auto_node): Define new\n+\tRAII helper for creating and inserting new nodes.\n+\t(_Rb_tree::_M_insert_node): Use trailing-return-type to simplify\n+\tout-of-line definition.\n+\t(_Rb_tree::_M_insert_lower_node): Likewise.\n+\t(_Rb_tree::_M_insert_equal_lower_node): Likewise.\n+\t(_Rb_tree::_M_emplace_unique): Likewise. Use _Auto_node.\n+\t(_Rb_tree::_M_emplace_equal): Likewise.\n+\t(_Rb_tree::_M_emplace_hint_unique): Likewise.\n+\t(_Rb_tree::_M_emplace_hint_equal): Likewise.\n+\n 2021-12-02  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* src/c++11/cow-stdexcept.cc [_GLIBCXX_FULLY_DYNAMIC_STRING]"}]}