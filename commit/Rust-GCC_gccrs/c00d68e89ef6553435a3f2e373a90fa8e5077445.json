{"sha": "c00d68e89ef6553435a3f2e373a90fa8e5077445", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAwZDY4ZTg5ZWY2NTUzNDM1YTNmMmUzNzNhOTBmYThlNTA3NzQ0NQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-04-11T20:14:27Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-04-11T20:14:27Z"}, "message": "re PR translation/89939 (messages for translation must not contain embedded macro parameters)\n\n2019-04-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR translation/89939\n\t* frontend-passes.c (B_ERROR): Delete macro.\n\t(C_ERROR): Delete macro.\n\t(B_ERROR_1): New macro.\n\t(C_ERROR_1): New macro.\n\t(C_ERROR_2): New macro.\n\t(inline_matmul_assign): Use new macros.\n\t(call_external_blas): Likewise.\n\nFrom-SVN: r270292", "tree": {"sha": "54a9cca3a5422e42ff46b735fb6d1b20b4edd5ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54a9cca3a5422e42ff46b735fb6d1b20b4edd5ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c00d68e89ef6553435a3f2e373a90fa8e5077445", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c00d68e89ef6553435a3f2e373a90fa8e5077445", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c00d68e89ef6553435a3f2e373a90fa8e5077445", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c00d68e89ef6553435a3f2e373a90fa8e5077445/comments", "author": null, "committer": null, "parents": [{"sha": "2c390a483bcbd114325bb27e47dcdebb49798fdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c390a483bcbd114325bb27e47dcdebb49798fdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c390a483bcbd114325bb27e47dcdebb49798fdf"}], "stats": {"total": 72, "additions": 43, "deletions": 29}, "files": [{"sha": "69e9009d250989eb523a9246cc5b1f4f2a74823b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c00d68e89ef6553435a3f2e373a90fa8e5077445/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c00d68e89ef6553435a3f2e373a90fa8e5077445/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c00d68e89ef6553435a3f2e373a90fa8e5077445", "patch": "@@ -1,3 +1,14 @@\n+2019-04-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR translation/89939\n+\t* frontend-passes.c (B_ERROR): Delete macro.\n+\t(C_ERROR): Delete macro.\n+\t(B_ERROR_1): New macro.\n+\t(C_ERROR_1): New macro.\n+\t(C_ERROR_2): New macro.\n+\t(inline_matmul_assign): Use new macros.\n+\t(call_external_blas): Likewise.\n+\n 2019-04-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/87352"}, {"sha": "d4264dafa6fa4f3ceccc047d9dc145d213128931", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 32, "deletions": 29, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c00d68e89ef6553435a3f2e373a90fa8e5077445/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c00d68e89ef6553435a3f2e373a90fa8e5077445/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=c00d68e89ef6553435a3f2e373a90fa8e5077445", "patch": "@@ -3743,11 +3743,14 @@ check_conjg_transpose_variable (gfc_expr *e, bool *conjg, bool *transpose)\n \n /* Macros for unified error messages.  */\n \n-#define B_ERROR(n) _(\"Incorrect extent in argument B in MATMUL intrinsic in \" \\\n-\t\t     \"dimension \" #n \": is %ld, should be %ld\")\n+#define B_ERROR_1 _(\"Incorrect extent in argument B in MATMUL intrinsic in \" \\\n+\t\t     \"dimension 1: is %ld, should be %ld\")\n \n-#define C_ERROR(n) _(\"Array bound mismatch for dimension \" #n \" of array \" \\\n-\t\t     \"(%ld/%ld)\")\n+#define C_ERROR_1 _(\"Array bound mismatch for dimension 1 of array \" \\\n+\t\t    \"(%ld/%ld)\")\n+\n+#define C_ERROR_2 _(\"Array bound mismatch for dimension 2 of array \" \\\n+\t\t    \"(%ld/%ld)\")\n \n \n /* Inline assignments of the form c = matmul(a,b).\n@@ -3976,15 +3979,15 @@ inline_matmul_assign (gfc_code **c, int *walk_subtrees,\n \n \t  b1 = get_array_inq_function (GFC_ISYM_SIZE, matrix_b, 1);\n \t  a2 = get_array_inq_function (GFC_ISYM_SIZE, matrix_a, 2);\n-\t  test = runtime_error_ne (b1, a2, B_ERROR(1));\n+\t  test = runtime_error_ne (b1, a2, B_ERROR_1);\n \t  *next_code_point = test;\n \t  next_code_point = &test->next;\n \n \t  if (!realloc_c)\n \t    {\n \t      c1 = get_array_inq_function (GFC_ISYM_SIZE, expr1, 1);\n \t      a1 = get_array_inq_function (GFC_ISYM_SIZE, matrix_a, 1);\n-\t      test = runtime_error_ne (c1, a1, C_ERROR(1));\n+\t      test = runtime_error_ne (c1, a1, C_ERROR_1);\n \t      *next_code_point = test;\n \t      next_code_point = &test->next;\n \t    }\n@@ -3994,15 +3997,15 @@ inline_matmul_assign (gfc_code **c, int *walk_subtrees,\n \n \t  b1 = get_array_inq_function (GFC_ISYM_SIZE, matrix_b, 1);\n \t  a1 = get_array_inq_function (GFC_ISYM_SIZE, matrix_a, 1);\n-\t  test = runtime_error_ne (b1, a1, B_ERROR(1));\n+\t  test = runtime_error_ne (b1, a1, B_ERROR_1);\n \t  *next_code_point = test;\n \t  next_code_point = &test->next;\n \n \t  if (!realloc_c)\n \t    {\n \t      c1 = get_array_inq_function (GFC_ISYM_SIZE, expr1, 1);\n \t      b2 = get_array_inq_function (GFC_ISYM_SIZE, matrix_b, 2);\n-\t      test = runtime_error_ne (c1, b2, C_ERROR(1));\n+\t      test = runtime_error_ne (c1, b2, C_ERROR_1);\n \t      *next_code_point = test;\n \t      next_code_point = &test->next;\n \t    }\n@@ -4012,21 +4015,21 @@ inline_matmul_assign (gfc_code **c, int *walk_subtrees,\n \n \t  b1 = get_array_inq_function (GFC_ISYM_SIZE, matrix_b, 1);\n \t  a2 = get_array_inq_function (GFC_ISYM_SIZE, matrix_a, 2);\n-\t  test = runtime_error_ne (b1, a2, B_ERROR(1));\n+\t  test = runtime_error_ne (b1, a2, B_ERROR_1);\n \t  *next_code_point = test;\n \t  next_code_point = &test->next;\n \n \t  if (!realloc_c)\n \t    {\n \t      c1 = get_array_inq_function (GFC_ISYM_SIZE, expr1, 1);\n \t      a1 = get_array_inq_function (GFC_ISYM_SIZE, matrix_a, 1);\n-\t      test = runtime_error_ne (c1, a1, C_ERROR(1));\n+\t      test = runtime_error_ne (c1, a1, C_ERROR_1);\n \t      *next_code_point = test;\n \t      next_code_point = &test->next;\n \n \t      c2 = get_array_inq_function (GFC_ISYM_SIZE, expr1, 2);\n \t      b2 = get_array_inq_function (GFC_ISYM_SIZE, matrix_b, 2);\n-\t      test = runtime_error_ne (c2, b2, C_ERROR(2));\n+\t      test = runtime_error_ne (c2, b2, C_ERROR_2);\n \t      *next_code_point = test;\n \t      next_code_point = &test->next;\n \t    }\n@@ -4037,21 +4040,21 @@ inline_matmul_assign (gfc_code **c, int *walk_subtrees,\n \t  b2 = get_array_inq_function (GFC_ISYM_SIZE, matrix_b, 2);\n \t  a2 = get_array_inq_function (GFC_ISYM_SIZE, matrix_a, 2);\n \t  /* matrix_b is transposed, hence dimension 1 for the error message.  */\n-\t  test = runtime_error_ne (b2, a2, B_ERROR(1));\n+\t  test = runtime_error_ne (b2, a2, B_ERROR_1);\n \t  *next_code_point = test;\n \t  next_code_point = &test->next;\n \n \t  if (!realloc_c)\n \t    {\n \t      c1 = get_array_inq_function (GFC_ISYM_SIZE, expr1, 1);\n \t      a1 = get_array_inq_function (GFC_ISYM_SIZE, matrix_a, 1);\n-\t      test = runtime_error_ne (c1, a1, C_ERROR(1));\n+\t      test = runtime_error_ne (c1, a1, C_ERROR_1);\n \t      *next_code_point = test;\n \t      next_code_point = &test->next;\n \n \t      c2 = get_array_inq_function (GFC_ISYM_SIZE, expr1, 2);\n \t      b1 = get_array_inq_function (GFC_ISYM_SIZE, matrix_b, 1);\n-\t      test = runtime_error_ne (c2, b1, C_ERROR(2));\n+\t      test = runtime_error_ne (c2, b1, C_ERROR_2);\n \t      *next_code_point = test;\n \t      next_code_point = &test->next;\n \t    }\n@@ -4061,21 +4064,21 @@ inline_matmul_assign (gfc_code **c, int *walk_subtrees,\n \n \t  b1 = get_array_inq_function (GFC_ISYM_SIZE, matrix_b, 1);\n \t  a1 = get_array_inq_function (GFC_ISYM_SIZE, matrix_a, 1);\n-\t  test = runtime_error_ne (b1, a1, B_ERROR(1));\n+\t  test = runtime_error_ne (b1, a1, B_ERROR_1);\n \t  *next_code_point = test;\n \t  next_code_point = &test->next;\n \n \t  if (!realloc_c)\n \t    {\n \t      c1 = get_array_inq_function (GFC_ISYM_SIZE, expr1, 1);\n \t      a2 = get_array_inq_function (GFC_ISYM_SIZE, matrix_a, 2);\n-\t      test = runtime_error_ne (c1, a2, C_ERROR(1));\n+\t      test = runtime_error_ne (c1, a2, C_ERROR_1);\n \t      *next_code_point = test;\n \t      next_code_point = &test->next;\n \n \t      c2 = get_array_inq_function (GFC_ISYM_SIZE, expr1, 2);\n \t      b2 = get_array_inq_function (GFC_ISYM_SIZE, matrix_b, 2);\n-\t      test = runtime_error_ne (c2, b2, C_ERROR(2));\n+\t      test = runtime_error_ne (c2, b2, C_ERROR_2);\n \t      *next_code_point = test;\n \t      next_code_point = &test->next;\n \t    }\n@@ -4478,21 +4481,21 @@ call_external_blas (gfc_code **c, int *walk_subtrees ATTRIBUTE_UNUSED,\n \tcase A2B2:\n \t  b1 = get_array_inq_function (GFC_ISYM_SIZE, matrix_b, 1);\n \t  a2 = get_array_inq_function (GFC_ISYM_SIZE, matrix_a, 2);\n-\t  test = runtime_error_ne (b1, a2, B_ERROR(1));\n+\t  test = runtime_error_ne (b1, a2, B_ERROR_1);\n \t  *next_code_point = test;\n \t  next_code_point = &test->next;\n \n \t  if (!realloc_c)\n \t    {\n \t      c1 = get_array_inq_function (GFC_ISYM_SIZE, expr1, 1);\n \t      a1 = get_array_inq_function (GFC_ISYM_SIZE, matrix_a, 1);\n-\t      test = runtime_error_ne (c1, a1, C_ERROR(1));\n+\t      test = runtime_error_ne (c1, a1, C_ERROR_1);\n \t      *next_code_point = test;\n \t      next_code_point = &test->next;\n \n \t      c2 = get_array_inq_function (GFC_ISYM_SIZE, expr1, 2);\n \t      b2 = get_array_inq_function (GFC_ISYM_SIZE, matrix_b, 2);\n-\t      test = runtime_error_ne (c2, b2, C_ERROR(2));\n+\t      test = runtime_error_ne (c2, b2, C_ERROR_2);\n \t      *next_code_point = test;\n \t      next_code_point = &test->next;\n \t    }\n@@ -4503,21 +4506,21 @@ call_external_blas (gfc_code **c, int *walk_subtrees ATTRIBUTE_UNUSED,\n \t  b2 = get_array_inq_function (GFC_ISYM_SIZE, matrix_b, 2);\n \t  a2 = get_array_inq_function (GFC_ISYM_SIZE, matrix_a, 2);\n \t  /* matrix_b is transposed, hence dimension 1 for the error message.  */\n-\t  test = runtime_error_ne (b2, a2, B_ERROR(1));\n+\t  test = runtime_error_ne (b2, a2, B_ERROR_1);\n \t  *next_code_point = test;\n \t  next_code_point = &test->next;\n \n \t  if (!realloc_c)\n \t    {\n \t      c1 = get_array_inq_function (GFC_ISYM_SIZE, expr1, 1);\n \t      a1 = get_array_inq_function (GFC_ISYM_SIZE, matrix_a, 1);\n-\t      test = runtime_error_ne (c1, a1, C_ERROR(1));\n+\t      test = runtime_error_ne (c1, a1, C_ERROR_1);\n \t      *next_code_point = test;\n \t      next_code_point = &test->next;\n \n \t      c2 = get_array_inq_function (GFC_ISYM_SIZE, expr1, 2);\n \t      b1 = get_array_inq_function (GFC_ISYM_SIZE, matrix_b, 1);\n-\t      test = runtime_error_ne (c2, b1, C_ERROR(2));\n+\t      test = runtime_error_ne (c2, b1, C_ERROR_2);\n \t      *next_code_point = test;\n \t      next_code_point = &test->next;\n \t    }\n@@ -4527,21 +4530,21 @@ call_external_blas (gfc_code **c, int *walk_subtrees ATTRIBUTE_UNUSED,\n \n \t  b1 = get_array_inq_function (GFC_ISYM_SIZE, matrix_b, 1);\n \t  a1 = get_array_inq_function (GFC_ISYM_SIZE, matrix_a, 1);\n-\t  test = runtime_error_ne (b1, a1, B_ERROR(1));\n+\t  test = runtime_error_ne (b1, a1, B_ERROR_1);\n \t  *next_code_point = test;\n \t  next_code_point = &test->next;\n \n \t  if (!realloc_c)\n \t    {\n \t      c1 = get_array_inq_function (GFC_ISYM_SIZE, expr1, 1);\n \t      a2 = get_array_inq_function (GFC_ISYM_SIZE, matrix_a, 2);\n-\t      test = runtime_error_ne (c1, a2, C_ERROR(1));\n+\t      test = runtime_error_ne (c1, a2, C_ERROR_1);\n \t      *next_code_point = test;\n \t      next_code_point = &test->next;\n \n \t      c2 = get_array_inq_function (GFC_ISYM_SIZE, expr1, 2);\n \t      b2 = get_array_inq_function (GFC_ISYM_SIZE, matrix_b, 2);\n-\t      test = runtime_error_ne (c2, b2, C_ERROR(2));\n+\t      test = runtime_error_ne (c2, b2, C_ERROR_2);\n \t      *next_code_point = test;\n \t      next_code_point = &test->next;\n \t    }\n@@ -4550,21 +4553,21 @@ call_external_blas (gfc_code **c, int *walk_subtrees ATTRIBUTE_UNUSED,\n \tcase A2TB2T:\n \t  b2 = get_array_inq_function (GFC_ISYM_SIZE, matrix_b, 2);\n \t  a1 = get_array_inq_function (GFC_ISYM_SIZE, matrix_a, 1);\n-\t  test = runtime_error_ne (b2, a1, B_ERROR(1));\n+\t  test = runtime_error_ne (b2, a1, B_ERROR_1);\n \t  *next_code_point = test;\n \t  next_code_point = &test->next;\n \n \t  if (!realloc_c)\n \t    {\n \t      c1 = get_array_inq_function (GFC_ISYM_SIZE, expr1, 1);\n \t      a2 = get_array_inq_function (GFC_ISYM_SIZE, matrix_a, 2);\n-\t      test = runtime_error_ne (c1, a2, C_ERROR(1));\n+\t      test = runtime_error_ne (c1, a2, C_ERROR_1);\n \t      *next_code_point = test;\n \t      next_code_point = &test->next;\n \n \t      c2 = get_array_inq_function (GFC_ISYM_SIZE, expr1, 2);\n \t      b1 = get_array_inq_function (GFC_ISYM_SIZE, matrix_b, 1);\n-\t      test = runtime_error_ne (c2, b1, C_ERROR(2));\n+\t      test = runtime_error_ne (c2, b1, C_ERROR_2);\n \t      *next_code_point = test;\n \t      next_code_point = &test->next;\n \t    }"}]}