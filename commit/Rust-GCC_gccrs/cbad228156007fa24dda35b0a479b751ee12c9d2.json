{"sha": "cbad228156007fa24dda35b0a479b751ee12c9d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JhZDIyODE1NjAwN2ZhMjRkZGEzNWIwYTQ3OWI3NTFlZTEyYzlkMg==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2006-11-22T22:09:14Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2006-11-22T22:09:14Z"}, "message": "re PR fortran/29441 ([4.1/4.2 only] non-constant parameter (constant) accepted)\n\nfortran/\n        PR fortran/29441\n        * intrinsic.c (gfc_intrinsic_func_interface): Always check if\n        intrinsic is allowed in initialization expression.\ntestsuite/\n        PR fortran/29441\n        * gfortran.dg/initialization_4.f90: New test.\n\nFrom-SVN: r119101", "tree": {"sha": "dc9058a698d40c299a8776709b3bbceac29579fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc9058a698d40c299a8776709b3bbceac29579fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbad228156007fa24dda35b0a479b751ee12c9d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbad228156007fa24dda35b0a479b751ee12c9d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbad228156007fa24dda35b0a479b751ee12c9d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbad228156007fa24dda35b0a479b751ee12c9d2/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3a0e200647c46fb88064dc335cb9cbaf30eb398", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3a0e200647c46fb88064dc335cb9cbaf30eb398", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3a0e200647c46fb88064dc335cb9cbaf30eb398"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "8391c965965ad50c30e352c8e53483e32d995295", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbad228156007fa24dda35b0a479b751ee12c9d2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbad228156007fa24dda35b0a479b751ee12c9d2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=cbad228156007fa24dda35b0a479b751ee12c9d2", "patch": "@@ -1,17 +1,23 @@\n-2006-11-22 Paul Thomas  <pault@gcc.gnu.org>\n+2006-11-22  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\tPR fortran/29441\n+\t* intrinsic.c (gfc_intrinsic_func_interface): Always check if\n+\tintrinsic is allowed in initialization expression.\n+\n+2006-11-22  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/25087\n \t* resolve.c (resolve_fl_procedure): Add an error if an external\n \tautomatic character length function does not have an explicit\n \tinterface.\n \n-2006-11-22 Paul Thomas  <pault@gcc.gnu.org>\n+2006-11-22  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/29652\n \t* interface.c (check_interface1): Use a local value, instead of\n \tthe dummy, as the inner iterator over interface symbols.\n \n-2006-11-21 Paul Thomas  <pault@gcc.gnu.org>\n+2006-11-21  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/29820\n \t* trans-array.c (gfc_get_derived_type): Once done, spread the"}, {"sha": "d284f3cd8bc5e49ce12efad03f15c479de36bf6f", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbad228156007fa24dda35b0a479b751ee12c9d2/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbad228156007fa24dda35b0a479b751ee12c9d2/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=cbad228156007fa24dda35b0a479b751ee12c9d2", "patch": "@@ -3397,8 +3397,7 @@ gfc_intrinsic_func_interface (gfc_expr * expr, int error_flag)\n   /* TODO: We should probably only allow elemental functions here.  */\n   flag |= (expr->ts.type != BT_INTEGER && expr->ts.type != BT_CHARACTER);\n \n-  if (pedantic && gfc_init_expr\n-      && flag && gfc_init_expr_extensions (specific))\n+  if (gfc_init_expr && flag && gfc_init_expr_extensions (specific))\n     {\n       if (gfc_notify_std (GFC_STD_GNU, \"Extension: Evaluation of \"\n \t    \"nonstandard initialization expression at %L\", &expr->where)"}, {"sha": "ff2a80dad5b1eb3ee29d67390c7916ffbda5c7e8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbad228156007fa24dda35b0a479b751ee12c9d2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbad228156007fa24dda35b0a479b751ee12c9d2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cbad228156007fa24dda35b0a479b751ee12c9d2", "patch": "@@ -1,3 +1,8 @@\n+2006-11-22  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\tPR fortran/29441\n+\t* gfortran.dg/initialization_4.f90: New test.\n+\n 2006-11-22  Ira Rosen  <irar@il.ibm.com>\n \n \t* gcc.dg/vect/vect-1.c: Additional loop is now vectorizable on "}, {"sha": "b0f24311bdb4815209d1f20a34fcc85e9427cafc", "filename": "gcc/testsuite/gfortran.dg/initialization_4.f90", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbad228156007fa24dda35b0a479b751ee12c9d2/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbad228156007fa24dda35b0a479b751ee12c9d2/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_4.f90?ref=cbad228156007fa24dda35b0a479b751ee12c9d2", "patch": "@@ -0,0 +1,6 @@\n+! PR 29441 : No error was given for disallowed function in\n+! initialization expression, even if -std=f95 was used\n+! { dg-do compile }\n+! { dg-options \"-std=f95\" }\n+real, parameter :: pi = 4.0*Atan(1.0) ! { dg-error \"Evaluation of nonstandard initialization expression\" }\n+end"}]}