{"sha": "362261e71f1b1ffdfeb2ceccfd426ccc6317b241", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzYyMjYxZTcxZjFiMWZmZGZlYjJjZWNjZmQ0MjZjY2M2MzE3YjI0MQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2012-11-01T01:30:34Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2012-11-01T01:30:34Z"}, "message": "forward_list.h (forward_list::assign): Dispatch to new functions based on assignability of elements.\n\n\t* include/bits/forward_list.h (forward_list::assign): Dispatch to new\n\tfunctions based on assignability of elements.\n\t(forward_list::_M_assign): Add overloaded functions for assigning\n\tvia assignment or via clearing and insertion.\n\t(forward_list::_M_assign_val): Likewise.\n\t(forward_list::_M_move_assign(forward_list&&, false_type)): Do not\n\terase elements that are not moved.\n\t* include/bits/forward_list.tcc (forward_list::operator=): Call\n\tassign() to copy elements.\n\t* testsuite/23_containers/forward_list/cons/10.cc: New.\n\t* testsuite/23_containers/forward_list/cons/11.cc: New.\n\t* testsuite/23_containers/forward_list/cons/12.cc: New.\n\nFrom-SVN: r193057", "tree": {"sha": "3b118d46a9a52efbbf49620f2e9e7899ec8d45d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b118d46a9a52efbbf49620f2e9e7899ec8d45d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/362261e71f1b1ffdfeb2ceccfd426ccc6317b241", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/362261e71f1b1ffdfeb2ceccfd426ccc6317b241", "html_url": "https://github.com/Rust-GCC/gccrs/commit/362261e71f1b1ffdfeb2ceccfd426ccc6317b241", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/362261e71f1b1ffdfeb2ceccfd426ccc6317b241/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d81aa38840ca33b38881f52f8d2fb1a8660fdecb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d81aa38840ca33b38881f52f8d2fb1a8660fdecb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d81aa38840ca33b38881f52f8d2fb1a8660fdecb"}], "stats": {"total": 290, "additions": 255, "deletions": 35}, "files": [{"sha": "611570dadf9ab8577cb7b5dd00d67991690ef150", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362261e71f1b1ffdfeb2ceccfd426ccc6317b241/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362261e71f1b1ffdfeb2ceccfd426ccc6317b241/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=362261e71f1b1ffdfeb2ceccfd426ccc6317b241", "patch": "@@ -1,3 +1,18 @@\n+2012-11-01  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/bits/forward_list.h (forward_list::assign): Dispatch to new\n+\tfunctions based on assignability of elements.\n+\t(forward_list::_M_assign): Add overloaded functions for assigning\n+\tvia assignment or via clearing and insertion.\n+\t(forward_list::_M_assign_val): Likewise.\n+\t(forward_list::_M_move_assign(forward_list&&, false_type)): Do not\n+\terase elements that are not moved.\n+\t* include/bits/forward_list.tcc (forward_list::operator=): Call\n+\tassign() to copy elements.\n+\t* testsuite/23_containers/forward_list/cons/10.cc: New.\n+\t* testsuite/23_containers/forward_list/cons/11.cc: New.\n+\t* testsuite/23_containers/forward_list/cons/12.cc: New.\n+\n 2012-10-31  Jonathan Yong  <jon_y@users.sourceforge.net>\n \n \t* config/os/mingw32-w64/os_defines.h: Do not define anymore"}, {"sha": "b40fe9b4a9fdf621ab293c0c93c4339eb2074e70", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 70, "deletions": 19, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362261e71f1b1ffdfeb2ceccfd426ccc6317b241/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362261e71f1b1ffdfeb2ceccfd426ccc6317b241/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=362261e71f1b1ffdfeb2ceccfd426ccc6317b241", "patch": "@@ -589,17 +589,17 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  in the range [@a __first,@a __last).\n        *\n        *  Note that the assignment completely changes the %forward_list and\n-       *  that the number of elements of the resulting %forward_list's is the\n+       *  that the number of elements of the resulting %forward_list is the\n        *  same as the number of elements assigned.  Old data is lost.\n        */\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n \tvoid\n         assign(_InputIterator __first, _InputIterator __last)\n         {\n-          clear();\n-          insert_after(cbefore_begin(), __first, __last);\n-        }\n+\t  typedef is_assignable<_Tp, decltype(*__first)> __assignable;\n+\t  _M_assign(__first, __last, __assignable());\n+\t}\n \n       /**\n        *  @brief  Assigns a given value to a %forward_list.\n@@ -613,10 +613,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       void\n       assign(size_type __n, const _Tp& __val)\n-      {\n-        clear();\n-        insert_after(cbefore_begin(), __n, __val);\n-      }\n+      { _M_assign_n(__n, __val, is_copy_assignable<_Tp>()); }\n \n       /**\n        *  @brief  Assigns an initializer_list to a %forward_list.\n@@ -628,10 +625,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       void\n       assign(std::initializer_list<_Tp> __il)\n-      {\n-        clear();\n-        insert_after(cbefore_begin(), __il);\n-      }\n+      { assign(__il.begin(), __il.end()); }\n \n       /// Get a copy of the memory allocation object.\n       allocator_type\n@@ -1255,13 +1249,70 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n         if (__list._M_get_Node_allocator() == this->_M_get_Node_allocator())\n           _M_move_assign(std::move(__list), std::true_type());\n         else\n-          {\n-            // The rvalue's allocator cannot be moved, or is not equal,\n-            // so we need to individually move each element.\n-            this->assign(std::__make_move_if_noexcept_iterator(__list.begin()),\n-                         std::__make_move_if_noexcept_iterator(__list.end()));\n-            __list.clear();\n-          }\n+\t  // The rvalue's allocator cannot be moved, or is not equal,\n+\t  // so we need to individually move each element.\n+\t  this->assign(std::__make_move_if_noexcept_iterator(__list.begin()),\n+\t\t       std::__make_move_if_noexcept_iterator(__list.end()));\n+      }\n+\n+      // Called by assign(_InputIterator, _InputIterator) if _Tp is\n+      // CopyAssignable.\n+      template<typename _InputIterator>\n+\tvoid\n+        _M_assign(_InputIterator __first, _InputIterator __last, true_type)\n+\t{\n+\t  auto __prev = before_begin();\n+\t  auto __curr = begin();\n+\t  auto __end = end();\n+\t  while (__curr != __end && __first != __last)\n+\t    {\n+\t      *__curr = *__first;\n+\t      ++__prev;\n+\t      ++__curr;\n+\t      ++__first;\n+\t    }\n+\t  if (__first != __last)\n+\t    insert_after(__prev, __first, __last);\n+\t  else if (__curr != __end)\n+\t    erase_after(__prev, __end);\n+        }\n+\n+      // Called by assign(_InputIterator, _InputIterator) if _Tp is not\n+      // CopyAssignable.\n+      template<typename _InputIterator>\n+\tvoid\n+        _M_assign(_InputIterator __first, _InputIterator __last, false_type)\n+\t{\n+\t  clear();\n+\t  insert_after(cbefore_begin(), __first, __last);\n+\t}\n+\n+      // Called by assign(size_type, const _Tp&) if Tp is CopyAssignable\n+      void\n+      _M_assign_n(size_type __n, const _Tp& __val, true_type)\n+      {\n+\tauto __prev = before_begin();\n+\tauto __curr = begin();\n+\tauto __end = end();\n+\twhile (__curr != __end && __n > 0)\n+\t  {\n+\t    *__curr = __val;\n+\t    ++__prev;\n+\t    ++__curr;\n+\t    --__n;\n+\t  }\n+\tif (__n > 0)\n+\t  insert_after(__prev, __n, __val);\n+\telse if (__curr != __end)\n+\t  erase_after(__prev, __end);\n+      }\n+\n+      // Called by assign(size_type, const _Tp&) if Tp is non-CopyAssignable\n+      void\n+      _M_assign_n(size_type __n, const _Tp& __val, false_type)\n+      {\n+\tclear();\n+\tinsert_after(cbefore_begin(), __n, __val);\n       }\n     };\n "}, {"sha": "7395b2029adc7f386ae8375e888017e5a3a13295", "filename": "libstdc++-v3/include/bits/forward_list.tcc", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362261e71f1b1ffdfeb2ceccfd426ccc6317b241/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362261e71f1b1ffdfeb2ceccfd426ccc6317b241/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc?ref=362261e71f1b1ffdfeb2ceccfd426ccc6317b241", "patch": "@@ -165,22 +165,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t}\n \t      std::__alloc_on_copy(__this_alloc, __that_alloc);\n             }\n-          iterator __prev1 = before_begin();\n-          iterator __curr1 = begin();\n-          iterator __last1 = end();\n-          const_iterator __first2 = __list.cbegin();\n-          const_iterator __last2 = __list.cend();\n-          while (__curr1 != __last1 && __first2 != __last2)\n-            {\n-              *__curr1 = *__first2;\n-              ++__prev1;\n-              ++__curr1;\n-              ++__first2;\n-            }\n-          if (__first2 == __last2)\n-            erase_after(__prev1, __last1);\n-          else\n-            insert_after(__prev1, __first2, __last2);\n+\t  assign(__list.cbegin(), __list.cend());\n         }\n       return *this;\n     }"}, {"sha": "8c64ed4ec32df57d2688f893b6b89d68727409c8", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/cons/10.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362261e71f1b1ffdfeb2ceccfd426ccc6317b241/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2F10.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362261e71f1b1ffdfeb2ceccfd426ccc6317b241/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2F10.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2F10.cc?ref=362261e71f1b1ffdfeb2ceccfd426ccc6317b241", "patch": "@@ -0,0 +1,58 @@\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 23.3.4.2 forward_list construction [forwardlist.cons]\n+\n+#include <forward_list>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+struct Counter\n+{\n+  Counter() { ++create; }\n+  Counter(const Counter&) { ++create; }\n+  ~Counter() { ++destroy; }\n+\n+  static int create;\n+  static int destroy;\n+};\n+\n+int Counter::create = 0;\n+int Counter::destroy = 0;\n+\n+void test01()\n+{\n+  typedef __gnu_test::uneq_allocator<Counter> alloc;\n+  typedef std::forward_list<Counter, alloc> list;\n+\n+  {\n+    Counter c;\n+\n+    list l( list(10, c, alloc(1)), alloc(2) );\n+\n+    VERIFY( Counter::create == 21 );\n+    VERIFY( Counter::destroy == 10 );\n+  }\n+  VERIFY( Counter::destroy == 21 );\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "4c99305ffd786052645d220842e2f51ac579897c", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/cons/11.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362261e71f1b1ffdfeb2ceccfd426ccc6317b241/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2F11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362261e71f1b1ffdfeb2ceccfd426ccc6317b241/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2F11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2F11.cc?ref=362261e71f1b1ffdfeb2ceccfd426ccc6317b241", "patch": "@@ -0,0 +1,50 @@\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 23.3.4.2 forward_list construction [forwardlist.cons]\n+\n+#include <forward_list>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+bool fail = false;\n+\n+struct A\n+{\n+  A() = default;\n+  A(const A&) { if (fail) throw fail; }\n+};\n+\n+void test01()\n+{\n+  typedef std::forward_list<A> list;\n+\n+  list l(2);\n+  A from[2];\n+  fail = true;\n+  // Check existing elements are assigned to, instead of creating new ones.\n+  // This is QoI, not required by the standard.\n+  l.assign(from, from+2);\n+  l.assign(2, from[0]);\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "a1fc3c307f43cc70b1e6fdfd6c9dd5cae469e576", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/cons/12.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362261e71f1b1ffdfeb2ceccfd426ccc6317b241/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2F12.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362261e71f1b1ffdfeb2ceccfd426ccc6317b241/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2F12.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2F12.cc?ref=362261e71f1b1ffdfeb2ceccfd426ccc6317b241", "patch": "@@ -0,0 +1,61 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 23.3.4.2 forward_list construction [forwardlist.cons]\n+\n+#include <forward_list>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+bool fail = false;\n+\n+struct NonCopyAssignable\n+{\n+  NonCopyAssignable() = default;\n+  NonCopyAssignable(const NonCopyAssignable&) = default;\n+  NonCopyAssignable(int) { }\n+\n+  NonCopyAssignable& operator=(const NonCopyAssignable&) = delete;\n+  NonCopyAssignable& operator=(int) = delete;\n+};\n+\n+void test01()\n+{\n+  typedef std::forward_list<NonCopyAssignable> list;\n+\n+  list l(2);\n+  NonCopyAssignable from[2];\n+  int from2[2];\n+\n+  // Assigning non-Assignable elements is QoI, not required by the standard.\n+\n+  l = l;\n+\n+  l.assign(from, from+2);\n+  l.assign(2, from[0]);\n+\n+  l.assign(from2, from2+2);\n+  l.assign(2, from2[0]);\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}]}