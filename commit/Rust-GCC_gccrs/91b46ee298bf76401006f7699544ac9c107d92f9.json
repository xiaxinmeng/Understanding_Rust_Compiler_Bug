{"sha": "91b46ee298bf76401006f7699544ac9c107d92f9", "node_id": "C_kwDOANBUbNoAKDkxYjQ2ZWUyOThiZjc2NDAxMDA2Zjc2OTk1NDRhYzljMTA3ZDkyZjk", "commit": {"author": {"name": "K\u00e9vin Le Gouguec", "email": "legouguec@adacore.com", "date": "2022-04-07T08:51:51Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-18T08:41:07Z"}, "message": "[Ada] Fix DWARF parsing for 32-bit targets on 64-bit hosts\n\nCurrently, a 64-bit gnatsymbolize fails to output line numbers and\naccurate symbol names when run on 32-bit executables (and vice-versa).\nThis is because a couple of spots in System.Dwarf_Lines expect the\nAddress_Size found in the DWARF data to match the host Address'Size.\n\nThis patch corrects that assumption.\n\ngcc/ada/\n\n\t* libgnat/s-dwalin.adb (Aranges_Lookup, Enable_Cache): Adapt to\n\tchanges in the signature of Read_Aranges_*.\n\t(Debug_Info_Lookup): Do not control address size read from\n\tDWARF.\n\t(Read_Aranges_Header): Do not control address size read from\n\tDWARF; return this size.\n\t(Read_Aranges_Entry): Use the size returned by\n\tRead_Aranges_Header.", "tree": {"sha": "05ad0652aea527788d391b3ecbb72eba117bebc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05ad0652aea527788d391b3ecbb72eba117bebc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91b46ee298bf76401006f7699544ac9c107d92f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91b46ee298bf76401006f7699544ac9c107d92f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91b46ee298bf76401006f7699544ac9c107d92f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91b46ee298bf76401006f7699544ac9c107d92f9/comments", "author": {"login": "peniblec", "id": 1415037, "node_id": "MDQ6VXNlcjE0MTUwMzc=", "avatar_url": "https://avatars.githubusercontent.com/u/1415037?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peniblec", "html_url": "https://github.com/peniblec", "followers_url": "https://api.github.com/users/peniblec/followers", "following_url": "https://api.github.com/users/peniblec/following{/other_user}", "gists_url": "https://api.github.com/users/peniblec/gists{/gist_id}", "starred_url": "https://api.github.com/users/peniblec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peniblec/subscriptions", "organizations_url": "https://api.github.com/users/peniblec/orgs", "repos_url": "https://api.github.com/users/peniblec/repos", "events_url": "https://api.github.com/users/peniblec/events{/privacy}", "received_events_url": "https://api.github.com/users/peniblec/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72de114c23027f1d1f0df4c78e69c4302e39e058", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72de114c23027f1d1f0df4c78e69c4302e39e058", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72de114c23027f1d1f0df4c78e69c4302e39e058"}], "stats": {"total": 45, "additions": 20, "deletions": 25}, "files": [{"sha": "50662ddceff3ff1f392d5bd3989040bf57db6953", "filename": "gcc/ada/libgnat/s-dwalin.adb", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b46ee298bf76401006f7699544ac9c107d92f9/gcc%2Fada%2Flibgnat%2Fs-dwalin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b46ee298bf76401006f7699544ac9c107d92f9/gcc%2Fada%2Flibgnat%2Fs-dwalin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-dwalin.adb?ref=91b46ee298bf76401006f7699544ac9c107d92f9", "patch": "@@ -44,8 +44,6 @@ with System.Storage_Elements;  use System.Storage_Elements;\n \n package body System.Dwarf_Lines is\n \n-   SSU : constant := System.Storage_Unit;\n-\n    function Get_Load_Displacement (C : Dwarf_Context) return Storage_Offset;\n    --  Return the displacement between the load address present in the binary\n    --  and the run-time address at which it is loaded (i.e. non-zero for PIE).\n@@ -76,14 +74,16 @@ package body System.Dwarf_Lines is\n    --  Read an entry format array, as specified by 6.2.4.1\n \n    procedure Read_Aranges_Entry\n-     (C     : in out Dwarf_Context;\n-      Start :    out Address;\n-      Len   :    out Storage_Count);\n+     (C         : in out Dwarf_Context;\n+      Addr_Size :        Natural;\n+      Start     :    out Address;\n+      Len       :    out Storage_Count);\n    --  Read a single .debug_aranges pair\n \n    procedure Read_Aranges_Header\n      (C           : in out Dwarf_Context;\n       Info_Offset :    out Offset;\n+      Addr_Size   :    out Natural;\n       Success     :    out Boolean);\n    --  Read .debug_aranges header\n \n@@ -1069,20 +1069,21 @@ package body System.Dwarf_Lines is\n       Info_Offset :    out Offset;\n       Success     :    out Boolean)\n    is\n+      Addr_Size : Natural;\n    begin\n       Info_Offset := 0;\n       Seek (C.Aranges, 0);\n \n       while Tell (C.Aranges) < Length (C.Aranges) loop\n-         Read_Aranges_Header (C, Info_Offset, Success);\n+         Read_Aranges_Header (C, Info_Offset, Addr_Size, Success);\n          exit when not Success;\n \n          loop\n             declare\n                Start : Address;\n                Len   : Storage_Count;\n             begin\n-               Read_Aranges_Entry (C, Start, Len);\n+               Read_Aranges_Entry (C, Addr_Size, Start, Len);\n                exit when Start = 0 and Len = 0;\n                if Addr >= Start\n                  and then Addr < Start + Len\n@@ -1280,19 +1281,13 @@ package body System.Dwarf_Lines is\n          Unit_Type := Read (C.Info);\n \n          Addr_Sz := Read (C.Info);\n-         if Addr_Sz /= (Address'Size / SSU) then\n-            return;\n-         end if;\n \n          Read_Section_Offset (C.Info, Abbrev_Offset, Is64);\n \n       elsif Version >= 2 then\n          Read_Section_Offset (C.Info, Abbrev_Offset, Is64);\n \n          Addr_Sz := Read (C.Info);\n-         if Addr_Sz /= (Address'Size / SSU) then\n-            return;\n-         end if;\n \n       else\n          return;\n@@ -1354,6 +1349,7 @@ package body System.Dwarf_Lines is\n    procedure Read_Aranges_Header\n      (C           : in out Dwarf_Context;\n       Info_Offset :    out Offset;\n+      Addr_Size   :    out Natural;\n       Success     :    out Boolean)\n    is\n       Unit_Length : Offset;\n@@ -1376,10 +1372,7 @@ package body System.Dwarf_Lines is\n \n       --  Read address_size (ubyte)\n \n-      Sz := Read (C.Aranges);\n-      if Sz /= (Address'Size / SSU) then\n-         return;\n-      end if;\n+      Addr_Size := Natural (uint8'(Read (C.Aranges)));\n \n       --  Read segment_size (ubyte)\n \n@@ -1392,7 +1385,7 @@ package body System.Dwarf_Lines is\n \n       declare\n          Cur_Off : constant Offset := Tell (C.Aranges);\n-         Align   : constant Offset := 2 * Address'Size / SSU;\n+         Align   : constant Offset := 2 * Offset (Addr_Size);\n          Space   : constant Offset := Cur_Off mod Align;\n       begin\n          if Space /= 0 then\n@@ -1408,14 +1401,15 @@ package body System.Dwarf_Lines is\n    ------------------------\n \n    procedure Read_Aranges_Entry\n-     (C     : in out Dwarf_Context;\n-      Start :    out Address;\n-      Len   :    out Storage_Count)\n+     (C         : in out Dwarf_Context;\n+      Addr_Size :        Natural;\n+      Start     :    out Address;\n+      Len       :    out Storage_Count)\n    is\n    begin\n       --  Read table\n \n-      if Address'Size = 32 then\n+      if Addr_Size = 4 then\n          declare\n             S, L : uint32;\n          begin\n@@ -1425,7 +1419,7 @@ package body System.Dwarf_Lines is\n             Len   := Storage_Count (L);\n          end;\n \n-      elsif Address'Size = 64 then\n+      elsif Addr_Size = 8 then\n          declare\n             S, L : uint64;\n          begin\n@@ -1520,6 +1514,7 @@ package body System.Dwarf_Lines is\n       declare\n          Info_Offset : Offset;\n          Line_Offset : Offset;\n+         Addr_Size   : Natural;\n          Success     : Boolean;\n          Ar_Start    : Address;\n          Ar_Len      : Storage_Count;\n@@ -1531,7 +1526,7 @@ package body System.Dwarf_Lines is\n          Seek (C.Aranges, 0);\n \n          while Tell (C.Aranges) < Length (C.Aranges) loop\n-            Read_Aranges_Header (C, Info_Offset, Success);\n+            Read_Aranges_Header (C, Info_Offset, Addr_Size, Success);\n             exit when not Success;\n \n             Debug_Info_Lookup (C, Info_Offset, Line_Offset, Success);\n@@ -1540,7 +1535,7 @@ package body System.Dwarf_Lines is\n             --  Read table\n \n             loop\n-               Read_Aranges_Entry (C, Ar_Start, Ar_Len);\n+               Read_Aranges_Entry (C, Addr_Size, Ar_Start, Ar_Len);\n                exit when Ar_Start = Null_Address and Ar_Len = 0;\n \n                Len   := uint32 (Ar_Len);"}]}