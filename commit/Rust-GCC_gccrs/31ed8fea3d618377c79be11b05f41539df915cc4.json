{"sha": "31ed8fea3d618377c79be11b05f41539df915cc4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFlZDhmZWEzZDYxODM3N2M3OWJlMTFiMDVmNDE1MzlkZjkxNWNjNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-10-08T16:37:06Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-10-08T16:37:06Z"}, "message": "c-common.h (struct c_lang_decl): Add declared_inline.\n\n        * c-common.h (struct c_lang_decl): Add declared_inline.\n        * c-tree.h (DECL_DECLARED_INLINE_P): New.\n        * c-lang.c (c_disregard_inline_limits): Use it.\n        * c-decl.c (duplicate_decls): Likewise.\n        (pushdecl, redeclaration_error_message): Likewise.\n        (pushdecl): Allocate DECL_LANG_SPECIFIC if needed.\n        (grokdeclarator): Likewise.  Set DECL_DECLARED_INLINE_P.\n        Set DECL_INLINE if -finline-functions.\n        (store_parm_decls): Don't allocate DECL_LANG_SPECIFIC here.\n\n        * cp-tree.h (struct lang_decl_flags): Remove declared_inline.\n        (DECL_DECLARED_INLINE_P): Use the bit in struct c_lang_decl.\n\nFrom-SVN: r46079", "tree": {"sha": "29cbaa01253970fbc753eff9f70ce21ac5d8b696", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29cbaa01253970fbc753eff9f70ce21ac5d8b696"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31ed8fea3d618377c79be11b05f41539df915cc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31ed8fea3d618377c79be11b05f41539df915cc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31ed8fea3d618377c79be11b05f41539df915cc4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31ed8fea3d618377c79be11b05f41539df915cc4/comments", "author": null, "committer": null, "parents": [{"sha": "bbd300a97b35c0a754ee7bed771a5f1e74eb43cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbd300a97b35c0a754ee7bed771a5f1e74eb43cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbd300a97b35c0a754ee7bed771a5f1e74eb43cf"}], "stats": {"total": 91, "additions": 68, "deletions": 23}, "files": [{"sha": "353151bb3a5b06d34d1ad081f4fa7f215a66e2be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ed8fea3d618377c79be11b05f41539df915cc4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ed8fea3d618377c79be11b05f41539df915cc4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=31ed8fea3d618377c79be11b05f41539df915cc4", "patch": "@@ -1,3 +1,15 @@\n+2001-10-08  Richard Henderson  <rth@redhat.com>\n+\n+\t* c-common.h (struct c_lang_decl): Add declared_inline.\n+\t* c-tree.h (DECL_DECLARED_INLINE_P): New.\n+\t* c-lang.c (c_disregard_inline_limits): Use it.\n+\t* c-decl.c (duplicate_decls): Likewise.\n+\t(pushdecl, redeclaration_error_message): Likewise.\n+\t(pushdecl): Allocate DECL_LANG_SPECIFIC if needed.\n+\t(grokdeclarator): Likewise.  Set DECL_DECLARED_INLINE_P.\n+\tSet DECL_INLINE if -finline-functions.\n+\t(store_parm_decls): Don't allocate DECL_LANG_SPECIFIC here.\n+\n 2001-10-08  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* cppmacro.c (funlike_invocation_p): Move some logic to caller"}, {"sha": "2d99513d724ab9330740c5831a6b43aad9ce000e", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ed8fea3d618377c79be11b05f41539df915cc4/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ed8fea3d618377c79be11b05f41539df915cc4/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=31ed8fea3d618377c79be11b05f41539df915cc4", "patch": "@@ -338,7 +338,7 @@ extern void mark_stmt_tree                      PARAMS ((void *));\n    DECL_LANG_SPECIFIC field.  */\n \n struct c_lang_decl {\n-  char dummy;\n+  unsigned declared_inline : 1;\n };\n \n /* In a FUNCTION_DECL for which DECL_BUILT_IN does not hold, this is"}, {"sha": "4ec34eace4d264ca56e5ff88e9ab0b04491adaaf", "filename": "gcc/c-decl.c", "status": "modified", "additions": 40, "deletions": 16, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ed8fea3d618377c79be11b05f41539df915cc4/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ed8fea3d618377c79be11b05f41539df915cc4/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=31ed8fea3d618377c79be11b05f41539df915cc4", "patch": "@@ -1727,12 +1727,14 @@ duplicate_decls (newdecl, olddecl, different_binding_level)\n \t  /* Warn if function is now inline\n \t     but was previously declared not inline and has been called.  */\n \t  if (TREE_CODE (olddecl) == FUNCTION_DECL\n-\t      && ! DECL_INLINE (olddecl) && DECL_INLINE (newdecl)\n+\t      && ! DECL_DECLARED_INLINE_P (olddecl)\n+\t      && DECL_DECLARED_INLINE_P (newdecl)\n \t      && TREE_USED (olddecl))\n \t    warning_with_decl (newdecl,\n \t\t\t       \"`%s' declared inline after being called\");\n \t  if (TREE_CODE (olddecl) == FUNCTION_DECL\n-\t      && ! DECL_INLINE (olddecl) && DECL_INLINE (newdecl)\n+\t      && ! DECL_DECLARED_INLINE_P (olddecl)\n+\t      && DECL_DECLARED_INLINE_P (newdecl)\n \t      && DECL_INITIAL (olddecl) != 0)\n \t    warning_with_decl (newdecl,\n \t\t\t       \"`%s' declared inline after its definition\");\n@@ -1976,10 +1978,11 @@ duplicate_decls (newdecl, olddecl, different_binding_level)\n \t{\n \t  /* If either decl says `inline', this fn is inline,\n \t     unless its definition was passed already.  */\n-\t  if (DECL_INLINE (newdecl) && DECL_INITIAL (olddecl) == 0)\n-\t    DECL_INLINE (olddecl) = 1;\n+\t  if (DECL_DECLARED_INLINE_P (newdecl)\n+\t      && DECL_DECLARED_INLINE_P (olddecl) == 0)\n+\t    DECL_DECLARED_INLINE_P (olddecl) = 1;\n \n-\t  DECL_INLINE (newdecl) = DECL_INLINE (olddecl);\n+\t  DECL_DECLARED_INLINE_P (newdecl) = DECL_DECLARED_INLINE_P (olddecl);\n \t}\n \n       if (DECL_BUILT_IN (olddecl))\n@@ -2056,6 +2059,11 @@ pushdecl (x)\n   register tree name = DECL_NAME (x);\n   register struct binding_level *b = current_binding_level;\n \n+  /* Functions need the lang_decl data.  */\n+  if (TREE_CODE (x) == FUNCTION_DECL && ! DECL_LANG_SPECIFIC (x))\n+    DECL_LANG_SPECIFIC (x) = (struct lang_decl *)\n+      ggc_alloc_cleared (sizeof (struct lang_decl));\n+\n   DECL_CONTEXT (x) = current_function_decl;\n   /* A local extern declaration for a function doesn't constitute nesting.\n      A local auto declaration does, since it's a forward decl\n@@ -2351,7 +2359,8 @@ pushdecl (x)\n \t      && oldglobal != 0\n \t      && TREE_CODE (x) == FUNCTION_DECL\n \t      && TREE_CODE (oldglobal) == FUNCTION_DECL\n-\t      && DECL_EXTERNAL (x) && ! DECL_INLINE (x))\n+\t      && DECL_EXTERNAL (x)\n+\t      && ! DECL_DECLARED_INLINE_P (x))\n \t    {\n \t      /* We have one.  Their types must agree.  */\n \t      if (! comptypes (TREE_TYPE (x),\n@@ -2361,8 +2370,10 @@ pushdecl (x)\n \t\t{\n \t\t  /* Inner extern decl is inline if global one is.\n \t\t     Copy enough to really inline it.  */\n-\t\t  if (DECL_INLINE (oldglobal))\n+\t\t  if (DECL_DECLARED_INLINE_P (oldglobal))\n \t\t    {\n+\t\t      DECL_DECLARED_INLINE_P (x)\n+\t\t        = DECL_DECLARED_INLINE_P (oldglobal);\n \t\t      DECL_INLINE (x) = DECL_INLINE (oldglobal);\n \t\t      DECL_INITIAL (x) = (current_function_decl == oldglobal\n \t\t\t\t\t  ? 0 : DECL_INITIAL (oldglobal));\n@@ -2613,8 +2624,9 @@ redeclaration_error_message (newdecl, olddecl)\n       if (DECL_INITIAL (olddecl) != 0 && DECL_INITIAL (newdecl) != 0\n \t  /* However, defining once as extern inline and a second\n \t     time in another way is ok.  */\n-\t  && ! (DECL_INLINE (olddecl) && DECL_EXTERNAL (olddecl)\n-\t       && ! (DECL_INLINE (newdecl) && DECL_EXTERNAL (newdecl))))\n+\t  && ! (DECL_DECLARED_INLINE_P (olddecl) && DECL_EXTERNAL (olddecl)\n+\t       && ! (DECL_DECLARED_INLINE_P (newdecl)\n+\t\t     && DECL_EXTERNAL (newdecl))))\n \treturn 1;\n       return 0;\n     }\n@@ -4913,6 +4925,9 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \tdecl = build_decl (FUNCTION_DECL, declarator, type);\n \tdecl = build_decl_attribute_variant (decl, decl_attr);\n \n+\tDECL_LANG_SPECIFIC (decl) = (struct lang_decl *)\n+\t  ggc_alloc_cleared (sizeof (struct lang_decl));\n+\n \tif (pedantic && type_quals && ! DECL_IN_SYSTEM_HEADER (decl))\n \t  pedwarn (\"ISO C forbids qualified function types\");\n \n@@ -4929,17 +4944,28 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t  = !(specbits & ((1 << (int) RID_STATIC) | (1 << (int) RID_AUTO)));\n \n \t/* Record presence of `inline', if it is reasonable.  */\n-\tif (inlinep)\n+\tif (MAIN_NAME_P (declarator))\n \t  {\n-\t    if (MAIN_NAME_P (declarator))\n+\t    if (inlinep)\n \t      warning (\"cannot inline function `main'\");\n-\t    else\n-\t      /* Assume that otherwise the function can be inlined.  */\n-\t      DECL_INLINE (decl) = 1;\n+\t  }\n+\telse if (inlinep)\n+\t  {\n+\t    /* Assume that otherwise the function can be inlined.  */\n+\t    DECL_INLINE (decl) = 1;\n+\t    DECL_DECLARED_INLINE_P (decl) = 1;\n \n \t    if (specbits & (1 << (int) RID_EXTERN))\n \t      current_extern_inline = 1;\n \t  }\n+\t/* If -finline-functions, assume it can be inlined.  This does\n+\t   two things: let the function be deferred until it is actually\n+\t   needed, and let dwarf2 know that the function is inlinable.  */\n+\telse if (flag_inline_trees == 2)\n+\t  {\n+\t    DECL_INLINE (decl) = 1;\n+\t    DECL_DECLARED_INLINE_P (decl) = 0;\n+\t  }\n       }\n     else\n       {\n@@ -6593,8 +6619,6 @@ store_parm_decls ()\n   init_function_start (fndecl, input_filename, lineno);\n \n   /* Begin the statement tree for this function.  */\n-  DECL_LANG_SPECIFIC (current_function_decl)\n-    =((struct lang_decl *) ggc_alloc_cleared (sizeof (struct lang_decl)));\n   begin_stmt_tree (&DECL_SAVED_TREE (current_function_decl));\n \n   /* If this is a nested function, save away the sizes of any"}, {"sha": "6ff8b9c72be4a3266f4de566fda8b0f2bd71263b", "filename": "gcc/c-lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ed8fea3d618377c79be11b05f41539df915cc4/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ed8fea3d618377c79be11b05f41539df915cc4/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=31ed8fea3d618377c79be11b05f41539df915cc4", "patch": "@@ -340,7 +340,7 @@ static int\n c_disregard_inline_limits (fn)\n      tree fn;\n {\n-  return DECL_INLINE (fn) && DECL_EXTERNAL (fn);\n+  return DECL_DECLARED_INLINE_P (fn) && DECL_EXTERNAL (fn);\n }\n \n static tree inline_forbidden_p PARAMS ((tree *, int *, void *));"}, {"sha": "6d0553902d437d9456cdbe28b349e7be46cb3f6a", "filename": "gcc/c-tree.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ed8fea3d618377c79be11b05f41539df915cc4/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ed8fea3d618377c79be11b05f41539df915cc4/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=31ed8fea3d618377c79be11b05f41539df915cc4", "patch": "@@ -98,9 +98,14 @@ struct lang_decl\n /* In an IDENTIFIER_NODE, nonzero if this identifier is actually a\n    keyword.  C_RID_CODE (node) is then the RID_* value of the keyword,\n    and C_RID_YYCODE is the token number wanted by Yacc.  */\n-\n #define C_IS_RESERVED_WORD(id) TREE_LANG_FLAG_0 (id)\n \n+/* This function was declared inline.  This flag controls the linkage\n+   semantics of 'inline'; whether or not the function is inlined is\n+   controlled by DECL_INLINE.  */\n+#define DECL_DECLARED_INLINE_P(NODE) \\\n+  (DECL_LANG_SPECIFIC (NODE)->base.declared_inline)\n+\n /* In a RECORD_TYPE, a sorted array of the fields of the type.  */\n struct lang_type\n {"}, {"sha": "60e8151a0c605794f5104f9199c4815c162bb4d9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ed8fea3d618377c79be11b05f41539df915cc4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ed8fea3d618377c79be11b05f41539df915cc4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=31ed8fea3d618377c79be11b05f41539df915cc4", "patch": "@@ -1,3 +1,8 @@\n+2001-10-08  Richard Henderson  <rth@redhat.com>\n+\n+\t* cp-tree.h (struct lang_decl_flags): Remove declared_inline.\n+\t(DECL_DECLARED_INLINE_P): Use the bit in struct c_lang_decl.\n+\n 2001-10-07  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* class.c (build_vtable_entry_ref): Const-ify."}, {"sha": "03769942716256d68def83e46ac8521b230e77e8", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ed8fea3d618377c79be11b05f41539df915cc4/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ed8fea3d618377c79be11b05f41539df915cc4/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=31ed8fea3d618377c79be11b05f41539df915cc4", "patch": "@@ -1705,17 +1705,16 @@ struct lang_decl_flags\n   unsigned deferred : 1;\n   unsigned use_template : 2;\n   unsigned nonconverting : 1;\n-  unsigned declared_inline : 1;\n   unsigned not_really_extern : 1;\n   unsigned needs_final_overrider : 1;\n   unsigned initialized_in_class : 1;\n-\n   unsigned pending_inline_p : 1;\n+\n   unsigned global_ctor_p : 1;\n   unsigned global_dtor_p : 1;\n   unsigned assignment_operator_p : 1;\n   unsigned anticipated_p : 1;\n-  /* Three unused bits.  */\n+  /* Four unused bits.  */\n \n   union {\n     /* In a FUNCTION_DECL, VAR_DECL, TYPE_DECL, or TEMPLATE_DECL, this\n@@ -2838,7 +2837,7 @@ enum ptrmemfunc_vbit_where_t\n    semantics of 'inline'; whether or not the function is inlined is\n    controlled by DECL_INLINE.  */\n #define DECL_DECLARED_INLINE_P(NODE) \\\n-  (DECL_LANG_SPECIFIC (NODE)->decl_flags.declared_inline)\n+  (DECL_LANG_SPECIFIC (NODE)->decl_flags.base.declared_inline)\n \n /* DECL_EXTERNAL must be set on a decl until the decl is actually emitted,\n    so that assemble_external will work properly.  So we have this flag to"}]}