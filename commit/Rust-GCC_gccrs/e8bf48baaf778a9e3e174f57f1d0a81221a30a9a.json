{"sha": "e8bf48baaf778a9e3e174f57f1d0a81221a30a9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThiZjQ4YmFhZjc3OGE5ZTNlMTc0ZjU3ZjFkMGE4MTIyMWEzMGE5YQ==", "commit": {"author": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-07-14T14:11:06Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:19Z"}, "message": "Added extremely provisional S/390 and zSeries target hook", "tree": {"sha": "70d011e500c2afcee158c6cb6a0bde49040c68de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70d011e500c2afcee158c6cb6a0bde49040c68de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8bf48baaf778a9e3e174f57f1d0a81221a30a9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8bf48baaf778a9e3e174f57f1d0a81221a30a9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8bf48baaf778a9e3e174f57f1d0a81221a30a9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8bf48baaf778a9e3e174f57f1d0a81221a30a9a/comments", "author": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fed3fd6054a2ae4d83a4db52c58ba34e4bb99902", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fed3fd6054a2ae4d83a4db52c58ba34e4bb99902", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fed3fd6054a2ae4d83a4db52c58ba34e4bb99902"}], "stats": {"total": 70, "additions": 69, "deletions": 1}, "files": [{"sha": "2a2d3c208b80c7f83605db3d8642dfe158961fcd", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8bf48baaf778a9e3e174f57f1d0a81221a30a9a/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8bf48baaf778a9e3e174f57f1d0a81221a30a9a/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=e8bf48baaf778a9e3e174f57f1d0a81221a30a9a", "patch": "@@ -575,6 +575,7 @@ sparc*-*-*)\n s390*-*-*)\n \tcpu_type=s390\n \td_target_objs=\"s390-d.o\"\n+\trust_target_objs=\"s390-rust.o\"\n \textra_options=\"${extra_options} fused-madd.opt\"\n \textra_headers=\"s390intrin.h htmintrin.h htmxlintrin.h vecintrin.h\"\n \t;;"}, {"sha": "1701deaff23d650892665e3d519cdcce7007cbb1", "filename": "gcc/config/rx/rx-rust.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8bf48baaf778a9e3e174f57f1d0a81221a30a9a/gcc%2Fconfig%2Frx%2Frx-rust.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8bf48baaf778a9e3e174f57f1d0a81221a30a9a/gcc%2Fconfig%2Frx%2Frx-rust.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx-rust.c?ref=e8bf48baaf778a9e3e174f57f1d0a81221a30a9a", "patch": "@@ -31,7 +31,7 @@ void rx_rust_target_cpu_info(void) {\n     // llvm appears to have no (current or historical) support, so names made up by me\n     if (TARGET_64BIT_DOUBLES) \n         rust_add_target_info(\"target_feature\", \"64bit-doubles\");\n-    if (NO_USE_FPU)\n+    if (TARGET_NO_USE_FPU)\n         rust_add_target_info(\"target_feature\", \"nofpu\");\n     // TODO: ensure below switch and variable works\n     switch (rx_cpu_type) {"}, {"sha": "dafd5ae05e777316f65a89c1aec09c2584c66968", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8bf48baaf778a9e3e174f57f1d0a81221a30a9a/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8bf48baaf778a9e3e174f57f1d0a81221a30a9a/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=e8bf48baaf778a9e3e174f57f1d0a81221a30a9a", "patch": "@@ -173,6 +173,9 @@ extern bool s390_const_operand_ok (tree, int, int, tree);\n /* s390-d.c routines */\n extern void s390_d_target_versions (void);\n \n+/* Routines implemented in s390-rust.c  */\n+extern void s390_rust_target_cpu_info (void);\n+\n /* Pass management.  */\n namespace gcc { class context; }\n class rtl_opt_pass;"}, {"sha": "98d9ea0a9a25d4f4fc6bdb49c199929cd3000248", "filename": "gcc/config/s390/s390-rust.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8bf48baaf778a9e3e174f57f1d0a81221a30a9a/gcc%2Fconfig%2Fs390%2Fs390-rust.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8bf48baaf778a9e3e174f57f1d0a81221a30a9a/gcc%2Fconfig%2Fs390%2Fs390-rust.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-rust.c?ref=e8bf48baaf778a9e3e174f57f1d0a81221a30a9a", "patch": "@@ -0,0 +1,57 @@\n+/* Subroutines for the Rust front end for the IBM S/390 and zSeries architectures.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tm_p.h\"\n+#include \"rust/rust-target.h\"\n+#include \"rust/rust-target-def.h\"\n+\n+/* Implement TARGET_RUST_CPU_INFO for S/390 and zSeries targets.  */\n+\n+void s390_rust_target_cpu_info(void) {\n+    // TODO: ensure that this is right for llvm/rustc arch \n+    if (TARGET_64BIT)\n+        rust_add_target_info(\"target_arch\", \"s390x\");\n+    else\n+        rust_add_target_info(\"target_arch\", \"s390\");\n+\n+    // names derived from llvm and rustc\n+    if (TARGET_SOFT_FLOAT) \n+        rust_add_target_info(\"target_feature\", \"soft-float\");\n+    else\n+        rust_add_target_info(\"target_feature\", \"fp-extension\");\n+    // TODO: ensure that having hardware float is actually what fp-extension refers to\n+    /* TODO: find gcc equivalent of distinct-ops (distinct-operands facility), fast-serialization, \n+     * high-word, interlocked-access1, load-store-on-cond, population-count, \n+     * message-security-assist-extension3, message-security-assist-extension4, \n+     * reset-reference-bits-multiple, execution-hint, load-and-trap, miscellaneous-extensions, \n+     * processor-assist, dfp-zoned-conversion, enhanced-dat-2, load-and-zero-rightmost-byte, \n+     * load-store-on-cond-2, message-security-assist-extension5, dfp-packed-conversion, \n+     * miscellaneous-extensions-2, message-security-assist-extension7, message-security-assist-extension8, \n+     * vector-enhancements-1, vector-packed-decimal, insert-reference-bits-multiple, \n+     * miscellaneous-extensions-3, message-security-assist-extension9, vector-enhancements-2, \n+     * vector-packed-decimal-enhancement, enhanced-sort, deflate-conversion if they exist */    \n+    if (TARGET_OPT_HTM)\n+        rust_add_target_info(\"target_feature\", \"transactional-execution\");\n+    // TODO: ensure that \"vector\" only refers to code generation and not language exts and builtins\n+    if (TARGET_OPT_VX)\n+        rust_add_target_info(\"target_feature\", \"vector\");\n+    // TODO: is guarded-storage the same thing as stack-guard? if so, add that option mapping\n+}"}, {"sha": "d748f9c74df23594758a7fc4e586bdfc878b2e58", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8bf48baaf778a9e3e174f57f1d0a81221a30a9a/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8bf48baaf778a9e3e174f57f1d0a81221a30a9a/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=e8bf48baaf778a9e3e174f57f1d0a81221a30a9a", "patch": "@@ -232,6 +232,9 @@ enum processor_flags\n /* Target CPU versions for D.  */\n #define TARGET_D_CPU_VERSIONS s390_d_target_versions\n \n+/* Target CPU info for Rust.  */\n+#define TARGET_RUST_CPU_INFO s390_rust_target_cpu_info\n+\n #ifdef DEFAULT_TARGET_64BIT\n #define TARGET_DEFAULT     (MASK_64BIT | MASK_ZARCH | MASK_HARD_DFP\t\\\n \t\t\t    | MASK_OPT_HTM | MASK_OPT_VX)"}, {"sha": "68e78eb9e780c8d380b46bd26cb99710e8cbaade", "filename": "gcc/config/s390/t-s390", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8bf48baaf778a9e3e174f57f1d0a81221a30a9a/gcc%2Fconfig%2Fs390%2Ft-s390", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8bf48baaf778a9e3e174f57f1d0a81221a30a9a/gcc%2Fconfig%2Fs390%2Ft-s390", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Ft-s390?ref=e8bf48baaf778a9e3e174f57f1d0a81221a30a9a", "patch": "@@ -30,3 +30,7 @@ s390-c.o: $(srcdir)/config/s390/s390-c.c \\\n s390-d.o: $(srcdir)/config/s390/s390-d.c\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n+\n+s390-rust.o: $(srcdir)/config/s390/s390-rust.c \\\n+  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}]}