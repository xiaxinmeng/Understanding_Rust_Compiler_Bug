{"sha": "53e6927367683761193f3bb6a7009f8ba04572ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNlNjkyNzM2NzY4Mzc2MTE5M2YzYmI2YTcwMDlmOGJhMDQ1NzJmZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-04-26T15:02:02Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-04-26T15:02:02Z"}, "message": "Fix tests that fail with _GLIBCXX_USE_CXX11_ABI=0\n\nThe pmr::string typedef isn't available for the old COW string, so some\ntests that use it were failing.\n\n\t* testsuite/20_util/variant/run.cc: Use a new Hashable type to test\n\thashing, because pmr::string depends on _GLIBCXX_USE_CXX11_ABI==1.\n\t* testsuite/21_strings/basic_string/hash/hash.cc\n\t[!_GLIBCXX_USE_CXX11_ABI]: Don't test pmr strings.\n\t* testsuite/21_strings/basic_string/hash/hash_char8_t.cc\n\t[!_GLIBCXX_USE_CXX11_ABI]: Likewise.\n\nFrom-SVN: r270604", "tree": {"sha": "3483cca098f25a370342467c9ec9ff4a2b6b5d0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3483cca098f25a370342467c9ec9ff4a2b6b5d0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53e6927367683761193f3bb6a7009f8ba04572ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53e6927367683761193f3bb6a7009f8ba04572ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53e6927367683761193f3bb6a7009f8ba04572ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53e6927367683761193f3bb6a7009f8ba04572ff/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69dad6faf9f00b0b22a822f0a0bcc57e7256959e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69dad6faf9f00b0b22a822f0a0bcc57e7256959e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69dad6faf9f00b0b22a822f0a0bcc57e7256959e"}], "stats": {"total": 55, "additions": 47, "deletions": 8}, "files": [{"sha": "78626838d4ff877ca9475582be8356abbfa09caf", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53e6927367683761193f3bb6a7009f8ba04572ff/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53e6927367683761193f3bb6a7009f8ba04572ff/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=53e6927367683761193f3bb6a7009f8ba04572ff", "patch": "@@ -1,5 +1,12 @@\n 2019-04-26  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* testsuite/20_util/variant/run.cc: Use a new Hashable type to test\n+\thashing, because pmr::string depends on _GLIBCXX_USE_CXX11_ABI==1.\n+\t* testsuite/21_strings/basic_string/hash/hash.cc\n+\t[!_GLIBCXX_USE_CXX11_ABI]: Don't test pmr strings.\n+\t* testsuite/21_strings/basic_string/hash/hash_char8_t.cc\n+\t[!_GLIBCXX_USE_CXX11_ABI]: Likewise.\n+\n \t* config/abi/pre/gnu.ver (GLIBCXX_3.4): Replace wildcard that matches\n \twstring::_M_replace_dispatch with more specific patterns.\n \t* include/bits/fs_path.h (path::_S_convert_loc<_InputIterator>):"}, {"sha": "0416fbac12ad80d72e3b5eec139b1ff3ae419efb", "filename": "libstdc++-v3/testsuite/20_util/variant/run.cc", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53e6927367683761193f3bb6a7009f8ba04572ff/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Frun.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53e6927367683761193f3bb6a7009f8ba04572ff/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Frun.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Frun.cc?ref=53e6927367683761193f3bb6a7009f8ba04572ff", "patch": "@@ -22,7 +22,6 @@\n #include <string>\n #include <vector>\n #include <unordered_set>\n-#include <memory_resource>\n #include <ext/throw_allocator.h>\n #include <testsuite_hooks.h>\n \n@@ -433,9 +432,30 @@ void test_visit()\n   }\n }\n \n+struct Hashable\n+{\n+  Hashable(const char* s) : s(s) { }\n+  // Non-trivial special member functions:\n+  Hashable(const Hashable&) { }\n+  Hashable(Hashable&&) noexcept { }\n+  ~Hashable() { }\n+\n+  string s;\n+\n+  bool operator==(const Hashable& rhs) const noexcept\n+  { return s == rhs.s; }\n+};\n+\n+namespace std {\n+  template<> struct hash<Hashable> {\n+    size_t operator()(const Hashable& h) const noexcept\n+    { return hash<std::string>()(h.s); }\n+  };\n+}\n+\n void test_hash()\n {\n-  unordered_set<variant<int, pmr::string>> s;\n+  unordered_set<variant<int, Hashable>> s;\n   VERIFY(s.emplace(3).second);\n   VERIFY(s.emplace(\"asdf\").second);\n   VERIFY(s.emplace().second);\n@@ -447,12 +467,12 @@ void test_hash()\n   {\n     struct A\n     {\n-      operator pmr::string()\n+      operator Hashable()\n       {\n         throw nullptr;\n       }\n     };\n-    variant<int, pmr::string> v;\n+    variant<int, Hashable> v;\n     try\n       {\n         v.emplace<1>(A{});"}, {"sha": "413c22bd16b9fc6e1b2dcb7543a4b8d03389e15c", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/hash/hash.cc", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53e6927367683761193f3bb6a7009f8ba04572ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fhash%2Fhash.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53e6927367683761193f3bb6a7009f8ba04572ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fhash%2Fhash.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fhash%2Fhash.cc?ref=53e6927367683761193f3bb6a7009f8ba04572ff", "patch": "@@ -39,19 +39,29 @@ void\n test01()\n {\n   VERIFY( test(std::string(\"a narrow string\")) );\n-  VERIFY( test(std::pmr::string(\"a narrow string, but with PMR!\")) );\n   VERIFY( test(std::u16string(u\"a utf-16 string\")) );\n-  VERIFY( test(std::pmr::u16string(u\"a utf-16 string, but with PMR!\")) );\n   VERIFY( test(std::u32string(U\"a utf-32 string\")) );\n-  VERIFY( test(std::pmr::u32string(U\"a utf-32 string, but with PMR!\")) );\n #if _GLIBCXX_USE_WCHAR_T\n   VERIFY( test(std::wstring(L\"a wide string\")) );\n+#endif\n+}\n+\n+void\n+test02()\n+{\n+#if _GLIBCXX_USE_CXX11_ABI\n+  VERIFY( test(std::pmr::string(\"a narrow string, but with PMR!\")) );\n+  VERIFY( test(std::pmr::u16string(u\"a utf-16 string, but with PMR!\")) );\n+  VERIFY( test(std::pmr::u32string(U\"a utf-32 string, but with PMR!\")) );\n+#if _GLIBCXX_USE_WCHAR_T\n   VERIFY( test(std::pmr::wstring(L\"a wide string, but with PMR!\")) );\n #endif\n+#endif\n }\n \n int\n main()\n {\n   test01();\n+  test02();\n }"}, {"sha": "ad02fcc98ec675612c6a5f890a5eeccb5122c095", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/hash/hash_char8_t.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53e6927367683761193f3bb6a7009f8ba04572ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fhash%2Fhash_char8_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53e6927367683761193f3bb6a7009f8ba04572ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fhash%2Fhash_char8_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fhash%2Fhash_char8_t.cc?ref=53e6927367683761193f3bb6a7009f8ba04572ff", "patch": "@@ -39,9 +39,11 @@ void\n test01()\n {\n   VERIFY( test(std::string(\"a narrow string\")) );\n-  VERIFY( test(std::pmr::string(\"a narrow string, but with PMR!\")) );\n   VERIFY( test(std::u8string(u8\"a utf-8 string\")) );\n+#if _GLIBCXX_USE_CXX11_ABI\n+  VERIFY( test(std::pmr::string(\"a narrow string, but with PMR!\")) );\n   VERIFY( test(std::pmr::u8string(u8\"a utf-8 string, but with PMR!\")) );\n+#endif\n }\n \n void"}]}