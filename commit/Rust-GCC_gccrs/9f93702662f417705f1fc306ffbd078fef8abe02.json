{"sha": "9f93702662f417705f1fc306ffbd078fef8abe02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY5MzcwMjY2MmY0MTc3MDVmMWZjMzA2ZmZiZDA3OGZlZjhhYmUwMg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-03-05T20:43:44Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-03-05T20:43:44Z"}, "message": "tree.def (RTL_EXPR): Update documentation.\n\n\t* tree.def (RTL_EXPR): Update documentation.\n\t* tree.h (RTL_EXPR_HAS_NO_SCOPE): New macro.\n\t* expr.c (expand_expr): Handle RTL_EXPR_HAS_NO_SCOPE.\n\t* function.c (preserve_rtl_expr_temp): New function.\n\t(preserve_rtl_expr_temps): Likewise.\n\t(preserve_rtl_expr_result): Use it.\n\nFrom-SVN: r32344", "tree": {"sha": "7b9b1d01cf0d4c4508ab5b483e757d3c608c3305", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b9b1d01cf0d4c4508ab5b483e757d3c608c3305"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f93702662f417705f1fc306ffbd078fef8abe02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f93702662f417705f1fc306ffbd078fef8abe02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f93702662f417705f1fc306ffbd078fef8abe02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f93702662f417705f1fc306ffbd078fef8abe02/comments", "author": null, "committer": null, "parents": [{"sha": "591ccf92b35994b10f846ef630cd1a58d53a8f12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/591ccf92b35994b10f846ef630cd1a58d53a8f12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/591ccf92b35994b10f846ef630cd1a58d53a8f12"}], "stats": {"total": 70, "additions": 59, "deletions": 11}, "files": [{"sha": "59c4a1409871dcebc05242290bd11c820ae11a17", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f93702662f417705f1fc306ffbd078fef8abe02/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f93702662f417705f1fc306ffbd078fef8abe02/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f93702662f417705f1fc306ffbd078fef8abe02", "patch": "@@ -1,5 +1,12 @@\n 2000-03-05  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* tree.def (RTL_EXPR): Update documentation.\n+\t* tree.h (RTL_EXPR_HAS_NO_SCOPE): New macro.\n+\t* expr.c (expand_expr): Handle RTL_EXPR_HAS_NO_SCOPE.\n+\t* function.c (preserve_rtl_expr_temp): New function.\n+\t(preserve_rtl_expr_temps): Likewise.\n+\t(preserve_rtl_expr_result): Use it.\n+\n \tRevert this patch:\n \t2000-03-04  Mark Mitchell  <mark@codesourcery.com>\n "}, {"sha": "28b3b442ba0994d294fecb8d13f102df94c8bc2a", "filename": "gcc/expr.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f93702662f417705f1fc306ffbd078fef8abe02/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f93702662f417705f1fc306ffbd078fef8abe02/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=9f93702662f417705f1fc306ffbd078fef8abe02", "patch": "@@ -6306,8 +6306,13 @@ expand_expr (exp, target, tmode, modifier)\n \t  emit_insns (RTL_EXPR_SEQUENCE (exp));\n \t  RTL_EXPR_SEQUENCE (exp) = const0_rtx;\n \t}\n-      preserve_rtl_expr_result (RTL_EXPR_RTL (exp));\n-      free_temps_for_rtl_expr (exp);\n+      if (RTL_EXPR_HAS_NO_SCOPE (exp))\n+\tpreserve_rtl_expr_temps (exp);\n+      else\n+\t{\n+\t  preserve_rtl_expr_result (RTL_EXPR_RTL (exp));\n+\t  free_temps_for_rtl_expr (exp);\n+\t}\n       return RTL_EXPR_RTL (exp);\n \n     case CONSTRUCTOR:"}, {"sha": "fe7f61b7f8a3d23b31a66ed48e00f8ab76b629a6", "filename": "gcc/function.c", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f93702662f417705f1fc306ffbd078fef8abe02/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f93702662f417705f1fc306ffbd078fef8abe02/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=9f93702662f417705f1fc306ffbd078fef8abe02", "patch": "@@ -293,6 +293,7 @@ static void mark_function_chain PARAMS ((void *));\n static void prepare_function_start PARAMS ((void));\n static void do_clobber_return_reg PARAMS ((rtx, void *));\n static void do_use_return_reg PARAMS ((rtx, void *));\n+static void preserve_rtl_expr_temp PARAMS ((struct temp_slot *));\n \f\n /* Pointer to chain of `struct function' for containing functions.  */\n struct function *outer_function_chain;\n@@ -1129,6 +1130,36 @@ preserve_temp_slots (x)\n       p->level--;\n }\n \n+/* Preserve the temporary slot given by P (originally created during\n+   the building of an RTL_EXPR) at least as long as things in our\n+   current scope.  */\n+\n+static void\n+preserve_rtl_expr_temp (p)\n+     struct temp_slot *p;\n+{\n+  /* Set the slot level to that of the currently prevailing scope.  */\n+  p->level = MIN (p->level, temp_slot_level);\n+  /* This slot is no longer associated with the RTL_EXPR from which it\n+     originated.  */\n+  p->rtl_expr = NULL_TREE;\n+}\n+\n+/* Preserve the temporary slots created during the building of the\n+   RTL_EXPR given by T at least as long as things in our current\n+   scope.  */\n+\n+void\n+preserve_rtl_expr_temps (t)\n+     tree t;\n+{\n+  struct temp_slot *p;\n+\n+  for (p = temp_slots; p; p = p->next)\n+    if (p->in_use && p->rtl_expr == t)\n+      preserve_rtl_expr_temp (p);\n+}\n+\n /* X is the result of an RTL_EXPR.  If it is a temporary slot associated\n    with that RTL_EXPR, promote it into a temporary slot at the present\n    level so it will not be freed when we free slots made in the\n@@ -1148,11 +1179,8 @@ preserve_rtl_expr_result (x)\n   /* If we can find a match, move it to our level unless it is already at\n      an upper level.  */\n   p = find_temp_slot_from_address (XEXP (x, 0));\n-  if (p != 0)\n-    {\n-      p->level = MIN (p->level, temp_slot_level);\n-      p->rtl_expr = 0;\n-    }\n+  if (p)\n+    preserve_rtl_expr_temp (p);\n \n   return;\n }"}, {"sha": "d691150fafb7658a6d3f4468ab1de2798e5ed52a", "filename": "gcc/tree.def", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f93702662f417705f1fc306ffbd078fef8abe02/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f93702662f417705f1fc306ffbd078fef8abe02/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=9f93702662f417705f1fc306ffbd078fef8abe02", "patch": "@@ -686,10 +686,14 @@ DEFTREECODE (SAVE_EXPR, \"save_expr\", 'e', 3)\n    but where we must re-expand.  */\n DEFTREECODE (UNSAVE_EXPR, \"unsave_expr\", 'e', 1)\n \n-/* Represents something whose RTL has already been expanded\n-   as a sequence which should be emitted when this expression is expanded.\n-   The first operand is the RTL to emit.  It is the first of a chain of insns.\n-   The second is the RTL expression for the result.  */\n+/* Represents something whose RTL has already been expanded as a\n+   sequence which should be emitted when this expression is expanded.\n+   The first operand is the RTL to emit.  It is the first of a chain\n+   of insns.  The second is the RTL expression for the result.  If\n+   RTL_EXPR_HAS_NO_SCOPE does not hold for this expression, then all\n+   temporaries created within this RTL_EXPR (except for the\n+   RTL_EXPR_RTL) are out-of-scope after the RTL_EXPR is expanded.  (In\n+   other words, their stack slots may be reused.)  */\n DEFTREECODE (RTL_EXPR, \"rtl_expr\", 'e', 2)\n \n /* & in C.  Value is the address at which the operand's value resides."}, {"sha": "722b219393f309edc0dfc761bc2b17ca803c36d4", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f93702662f417705f1fc306ffbd078fef8abe02/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f93702662f417705f1fc306ffbd078fef8abe02/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=9f93702662f417705f1fc306ffbd078fef8abe02", "patch": "@@ -749,6 +749,10 @@ struct tree_vec\n /* In a RTL_EXPR node.  */\n #define RTL_EXPR_SEQUENCE(NODE) (*(struct rtx_def **) &EXPR_CHECK (NODE)->exp.operands[0])\n #define RTL_EXPR_RTL(NODE) (*(struct rtx_def **) &EXPR_CHECK (NODE)->exp.operands[1])\n+/* Nonzero if the RTL_EXPR does not define a scope, i.e., if\n+   temporaries defined during its scope should persist even after the\n+   RTL_EXPR has been expanded.  */\n+#define RTL_EXPR_HAS_NO_SCOPE(NODE) TREE_ASM_WRITTEN (NODE)\n \n /* In a CALL_EXPR node.  */\n #define CALL_EXPR_RTL(NODE) (*(struct rtx_def **) &EXPR_CHECK (NODE)->exp.operands[2])"}]}