{"sha": "393ae126e488d3b8d7f6f650752e7f26a2feb2ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkzYWUxMjZlNDg4ZDNiOGQ3ZjZmNjUwNzUyZTdmMjZhMmZlYjJjZQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-08-04T09:47:49Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-08-04T09:47:49Z"}, "message": "[AArch64][2/14] Refactor arches handling, add arch enum identifier\n\n\t* config/aarch64/aarch64.h (TARGET_CPU_CPP_BUILTINS): Define\n\t__ARM_ARCH_8A directly rather than with cpp_define_formatted.\n\t* config/aarch64/aarch64.c (struct processor): Add arch field.\n\t(all_architectures): Handle above, move above all_cores.\n\t(all_cores): Handle above.\n\t(aarch64_parse_arch): Handle above changes.\n\t* config/aarch64/aarch64-arches.def (armv8-a): Extend according to\n\tabove.  Update comments.\n\t(armv8.1-a): Likewise.\n\t* config/aarch64/aarch64-cores.def: Update according to above.\n\t* config/aarch64/aarch64-opts.h (aarch64_arch): New enum.\n\t* config/aarch64/driver-aarch64.c (struct aarch64_arch): Rename to\n\taarch64_arch_driver_info.\n\nFrom-SVN: r226553", "tree": {"sha": "91c8eb7e123893766abfd95a43b8ef2f8445f196", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91c8eb7e123893766abfd95a43b8ef2f8445f196"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/393ae126e488d3b8d7f6f650752e7f26a2feb2ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/393ae126e488d3b8d7f6f650752e7f26a2feb2ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/393ae126e488d3b8d7f6f650752e7f26a2feb2ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/393ae126e488d3b8d7f6f650752e7f26a2feb2ce/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "46806c44a44ad2b4d24eba1248d41c775c9bbd31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46806c44a44ad2b4d24eba1248d41c775c9bbd31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46806c44a44ad2b4d24eba1248d41c775c9bbd31"}], "stats": {"total": 109, "additions": 72, "deletions": 37}, "files": [{"sha": "c890ddd25d0b54a6472b43b062d89409bb34567a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393ae126e488d3b8d7f6f650752e7f26a2feb2ce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393ae126e488d3b8d7f6f650752e7f26a2feb2ce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=393ae126e488d3b8d7f6f650752e7f26a2feb2ce", "patch": "@@ -1,3 +1,19 @@\n+2015-08-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.h (TARGET_CPU_CPP_BUILTINS): Define\n+\t__ARM_ARCH_8A directly rather than with cpp_define_formatted.\n+\t* config/aarch64/aarch64.c (struct processor): Add arch field.\n+\t(all_architectures): Handle above, move above all_cores.\n+\t(all_cores): Handle above.\n+\t(aarch64_parse_arch): Handle above changes.\n+\t* config/aarch64/aarch64-arches.def (armv8-a): Extend according to\n+\tabove.  Update comments.\n+\t(armv8.1-a): Likewise.\n+\t* config/aarch64/aarch64-cores.def: Update according to above.\n+\t* config/aarch64/aarch64-opts.h (aarch64_arch): New enum.\n+\t* config/aarch64/driver-aarch64.c (struct aarch64_arch): Rename to\n+\taarch64_arch_driver_info.\n+\n 2015-08-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.c (struct processor): Add ident field."}, {"sha": "3b4fb73316c251d121effe552af1cd3f226cb033", "filename": "gcc/config/aarch64/aarch64-arches.def", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393ae126e488d3b8d7f6f650752e7f26a2feb2ce/gcc%2Fconfig%2Faarch64%2Faarch64-arches.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393ae126e488d3b8d7f6f650752e7f26a2feb2ce/gcc%2Fconfig%2Faarch64%2Faarch64-arches.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-arches.def?ref=393ae126e488d3b8d7f6f650752e7f26a2feb2ce", "patch": "@@ -19,12 +19,17 @@\n \n /* Before using #include to read this file, define a macro:\n \n-      AARCH64_ARCH(NAME, CORE, ARCH, FLAGS)\n+      AARCH64_ARCH(NAME, CORE, ARCH_IDENT, ARCH_REV, FLAGS)\n \n    The NAME is the name of the architecture, represented as a string\n    constant.  The CORE is the identifier for a core representative of\n-   this architecture.  ARCH is the architecture revision.  FLAGS are\n-   the flags implied by the architecture.  */\n+   this architecture.  ARCH_IDENT is the architecture identifier.  It must be\n+   unique and be syntactically valid to appear as part of an enum identifier.\n+   ARCH_REV is an integer specifying the architecture major revision.\n+   FLAGS are the flags implied by the architecture.\n+   Due to the assumptions about the positions of these fields in config.gcc,\n+   the NAME should be kept as the first argument and FLAGS as the last.  */\n+\n+AARCH64_ARCH(\"armv8-a\",\t      generic,\t     8A,\t8,  AARCH64_FL_FOR_ARCH8)\n+AARCH64_ARCH(\"armv8.1-a\",     generic,\t     8_1A,\t8,  AARCH64_FL_FOR_ARCH8_1)\n \n-AARCH64_ARCH(\"armv8-a\",\t      generic,\t     8,  AARCH64_FL_FOR_ARCH8)\n-AARCH64_ARCH(\"armv8.1-a\",     generic,\t     8,  AARCH64_FL_FOR_ARCH8_1)"}, {"sha": "0ab1ca839e2ee9cacd7ad4f996176307318f4de2", "filename": "gcc/config/aarch64/aarch64-cores.def", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393ae126e488d3b8d7f6f650752e7f26a2feb2ce/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393ae126e488d3b8d7f6f650752e7f26a2feb2ce/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def?ref=393ae126e488d3b8d7f6f650752e7f26a2feb2ce", "patch": "@@ -21,13 +21,14 @@\n \n    Before using #include to read this file, define a macro:\n \n-      AARCH64_CORE(CORE_NAME, CORE_IDENT, SCHEDULER_IDENT, ARCH, FLAGS, COSTS, IMP, PART)\n+      AARCH64_CORE(CORE_NAME, CORE_IDENT, SCHEDULER_IDENT, ARCH_IDENT, FLAGS, COSTS, IMP, PART)\n \n    The CORE_NAME is the name of the core, represented as a string constant.\n    The CORE_IDENT is the name of the core, represented as an identifier.\n    The SCHEDULER_IDENT is the name of the core for which scheduling decisions\n    will be made, represented as an identifier.\n-   ARCH is the architecture revision implemented by the chip.\n+   ARCH_IDENT is the architecture implemented by the chip as specified in\n+   aarch64-arches.def.\n    FLAGS are the bitwise-or of the traits that apply to that core.\n    This need not include flags implied by the architecture.\n    COSTS is the name of the rtx_costs routine to use.\n@@ -39,14 +40,15 @@\n \n /* V8 Architecture Processors.  */\n \n-AARCH64_CORE(\"cortex-a53\",  cortexa53, cortexa53, 8,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa53, \"0x41\", \"0xd03\")\n-AARCH64_CORE(\"cortex-a57\",  cortexa57, cortexa57, 8,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa57, \"0x41\", \"0xd07\")\n-AARCH64_CORE(\"cortex-a72\",  cortexa72, cortexa57, 8,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa72, \"0x41\", \"0xd08\")\n-AARCH64_CORE(\"exynos-m1\",   exynosm1,  cortexa57, 8,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, cortexa72, \"0x53\", \"0x001\")\n-AARCH64_CORE(\"thunderx\",    thunderx,  thunderx,  8,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, thunderx,  \"0x43\", \"0x0a1\")\n-AARCH64_CORE(\"xgene1\",      xgene1,    xgene1,    8,  AARCH64_FL_FOR_ARCH8, xgene1, \"0x50\", \"0x000\")\n+AARCH64_CORE(\"cortex-a53\",  cortexa53, cortexa53, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa53, \"0x41\", \"0xd03\")\n+AARCH64_CORE(\"cortex-a57\",  cortexa57, cortexa57, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa57, \"0x41\", \"0xd07\")\n+AARCH64_CORE(\"cortex-a72\",  cortexa72, cortexa57, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa72, \"0x41\", \"0xd08\")\n+AARCH64_CORE(\"exynos-m1\",   exynosm1,  cortexa57, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, cortexa72, \"0x53\", \"0x001\")\n+AARCH64_CORE(\"thunderx\",    thunderx,  thunderx,  8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, thunderx,  \"0x43\", \"0x0a1\")\n+AARCH64_CORE(\"xgene1\",      xgene1,    xgene1,    8A,  AARCH64_FL_FOR_ARCH8, xgene1, \"0x50\", \"0x000\")\n \n /* V8 big.LITTLE implementations.  */\n \n-AARCH64_CORE(\"cortex-a57.cortex-a53\",  cortexa57cortexa53, cortexa53, 8,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa57, \"0x41\", \"0xd07.0xd03\")\n-AARCH64_CORE(\"cortex-a72.cortex-a53\",  cortexa72cortexa53, cortexa53, 8,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa72, \"0x41\", \"0xd08.0xd03\")\n+AARCH64_CORE(\"cortex-a57.cortex-a53\",  cortexa57cortexa53, cortexa53, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa57, \"0x41\", \"0xd07.0xd03\")\n+AARCH64_CORE(\"cortex-a72.cortex-a53\",  cortexa72cortexa53, cortexa53, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa72, \"0x41\", \"0xd08.0xd03\")\n+"}, {"sha": "bf6bb7b8f4edbcc92122228d87e443d67f270342", "filename": "gcc/config/aarch64/aarch64-opts.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393ae126e488d3b8d7f6f650752e7f26a2feb2ce/gcc%2Fconfig%2Faarch64%2Faarch64-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393ae126e488d3b8d7f6f650752e7f26a2feb2ce/gcc%2Fconfig%2Faarch64%2Faarch64-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-opts.h?ref=393ae126e488d3b8d7f6f650752e7f26a2feb2ce", "patch": "@@ -35,6 +35,15 @@ enum aarch64_processor\n   aarch64_none\n };\n \n+enum aarch64_arch\n+{\n+#define AARCH64_ARCH(NAME, CORE, ARCH_IDENT, ARCH_REV, FLAGS) \\\n+  AARCH64_ARCH_##ARCH_IDENT,\n+#include \"aarch64-arches.def\"\n+#undef AARCH64_ARCH\n+  aarch64_no_arch\n+};\n+\n /* TLS types.  */\n enum aarch64_tls_type {\n   TLS_TRADITIONAL,"}, {"sha": "f36aee4043db4e90f8cdc643303b9885a992bf17", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393ae126e488d3b8d7f6f650752e7f26a2feb2ce/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393ae126e488d3b8d7f6f650752e7f26a2feb2ce/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=393ae126e488d3b8d7f6f650752e7f26a2feb2ce", "patch": "@@ -500,33 +500,36 @@ struct processor\n   const char *const name;\n   enum aarch64_processor ident;\n   enum aarch64_processor sched_core;\n-  const char *arch;\n+  enum aarch64_arch arch;\n   unsigned architecture_version;\n   const unsigned long flags;\n   const struct tune_params *const tune;\n };\n \n+/* Architectures implementing AArch64.  */\n+static const struct processor all_architectures[] =\n+{\n+#define AARCH64_ARCH(NAME, CORE, ARCH_IDENT, ARCH_REV, FLAGS) \\\n+  {NAME, CORE, CORE, AARCH64_ARCH_##ARCH_IDENT, ARCH_REV, FLAGS, NULL},\n+#include \"aarch64-arches.def\"\n+#undef AARCH64_ARCH\n+  {NULL, aarch64_none, aarch64_none, aarch64_no_arch, 0, 0, NULL}\n+};\n+\n /* Processor cores implementing AArch64.  */\n static const struct processor all_cores[] =\n {\n #define AARCH64_CORE(NAME, IDENT, SCHED, ARCH, FLAGS, COSTS, IMP, PART) \\\n-  {NAME, IDENT, SCHED, #ARCH, ARCH, FLAGS, &COSTS##_tunings},\n+  {NAME, IDENT, SCHED, AARCH64_ARCH_##ARCH,\t\t\t\t\\\n+  all_architectures[AARCH64_ARCH_##ARCH].architecture_version,\t\\\n+  FLAGS, &COSTS##_tunings},\n #include \"aarch64-cores.def\"\n #undef AARCH64_CORE\n-  {\"generic\", generic, cortexa53, \"8\", 8,\n-   AARCH64_FL_FOR_ARCH8, &generic_tunings},\n-  {NULL, aarch64_none, aarch64_none, NULL, 0, 0, NULL}\n+  {\"generic\", generic, cortexa53, AARCH64_ARCH_8A, 8,\n+    AARCH64_FL_FOR_ARCH8, &generic_tunings},\n+  {NULL, aarch64_none, aarch64_none, aarch64_no_arch, 0, 0, NULL}\n };\n \n-/* Architectures implementing AArch64.  */\n-static const struct processor all_architectures[] =\n-{\n-#define AARCH64_ARCH(NAME, CORE, ARCH, FLAGS) \\\n-  {NAME, CORE, CORE, #ARCH, ARCH, FLAGS, NULL},\n-#include \"aarch64-arches.def\"\n-#undef AARCH64_ARCH\n-  {NULL, aarch64_none, aarch64_none, NULL, 0, 0, NULL}\n-};\n \n /* Target specification.  These are populated as commandline arguments\n    are processed, or NULL if not specified.  */\n@@ -7216,10 +7219,11 @@ aarch64_parse_arch (void)\n \t      aarch64_parse_extension (ext);\n \t    }\n \n-\t  if (strcmp (selected_arch->arch, selected_cpu->arch))\n+\t  if (selected_arch->arch != selected_cpu->arch)\n \t    {\n \t      warning (0, \"switch -mcpu=%s conflicts with -march=%s switch\",\n-\t\t       selected_cpu->name, selected_arch->name);\n+\t\t       all_architectures[selected_cpu->arch].name,\n+\t\t       selected_arch->name);\n \t    }\n \n \t  return;"}, {"sha": "80a239c6cee358a6b41f548d0c2f9f78dd520639", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393ae126e488d3b8d7f6f650752e7f26a2feb2ce/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393ae126e488d3b8d7f6f650752e7f26a2feb2ce/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=393ae126e488d3b8d7f6f650752e7f26a2feb2ce", "patch": "@@ -34,8 +34,7 @@\n         (\"__ARM_ALIGN_MAX_STACK_PWR\", 16);              \\\n       builtin_define_with_int_value                     \\\n         (\"__ARM_ARCH\", aarch64_architecture_version);   \\\n-      cpp_define_formatted                                              \\\n-        (parse_in, \"__ARM_ARCH_%dA\", aarch64_architecture_version);     \\\n+      builtin_define (\"__ARM_ARCH_8A\");                   \\\n       builtin_define (\"__ARM_ARCH_ISA_A64\");            \\\n       builtin_define_with_int_value                     \\\n         (\"__ARM_ARCH_PROFILE\", 'A');                    \\"}, {"sha": "ae4d5a00ec52a516f2736e7141d96494bb1cbdf9", "filename": "gcc/config/aarch64/driver-aarch64.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393ae126e488d3b8d7f6f650752e7f26a2feb2ce/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393ae126e488d3b8d7f6f650752e7f26a2feb2ce/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.c?ref=393ae126e488d3b8d7f6f650752e7f26a2feb2ce", "patch": "@@ -54,16 +54,16 @@ static struct aarch64_core_data cpu_data [] =\n \n #undef AARCH64_CORE\n \n-struct aarch64_arch\n+struct aarch64_arch_driver_info\n {\n   const char* id;\n   const char* name;\n };\n \n-#define AARCH64_ARCH(NAME, CORE, ARCH, FLAGS) \\\n-  { #ARCH, NAME  },\n+#define AARCH64_ARCH(NAME, CORE, ARCH_IDENT, ARCH_REV, FLAGS) \\\n+  { #ARCH_IDENT, NAME  },\n \n-static struct aarch64_arch aarch64_arches [] =\n+static struct aarch64_arch_driver_info aarch64_arches [] =\n {\n #include \"aarch64-arches.def\"\n   {NULL, NULL}"}]}