{"sha": "5c578ae4348bddb97991348c2d0a05e3e7d7ad5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM1NzhhZTQzNDhiZGRiOTc5OTEzNDhjMmQwYTA1ZTNlN2Q3YWQ1YQ==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2016-08-15T15:06:09Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2016-08-15T15:06:09Z"}, "message": "Implement LWG 2744 and LWG 2754.\n\n\t* include/std/any (any(ValueType&&)): Constrain with __is_in_place_type.\n\t(any(in_place_type_t<_ValueType>, _Args&&...)): Use _Decay.\n\t(any(in_place_type_t<_ValueType>, initializer_list<_Up>, _Args&&...)):\n\tLikewise.\n\t(emplace(_Args&&...)): Likewise.\n\t(emplace(initializer_list<_Up>, _Args&&...)): Likewise.\n\t* include/std/utility: (__is_in_place_type_impl): New.\n\t(__is_in_place_type): Likewise.\n\t* testsuite/20_util/any/assign/emplace.cc: Add tests for decaying\n\templace.\n\t* testsuite/20_util/any/cons/in_place.cc: Add tests for decaying\n\tin_place constructor.\n\t* testsuite/20_util/any/misc/any_cast_neg.cc: Adjust.\n\t* testsuite/20_util/any/requirements.cc: Add a test for\n\tin_place-constructing a non-default-constructible type.\n\nFrom-SVN: r239482", "tree": {"sha": "da46540d961190d68c5cffdb9214cf0013f267ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da46540d961190d68c5cffdb9214cf0013f267ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c578ae4348bddb97991348c2d0a05e3e7d7ad5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c578ae4348bddb97991348c2d0a05e3e7d7ad5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c578ae4348bddb97991348c2d0a05e3e7d7ad5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c578ae4348bddb97991348c2d0a05e3e7d7ad5a/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e1dde14c9485b7700498fa1f37109f647d3907e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e1dde14c9485b7700498fa1f37109f647d3907e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e1dde14c9485b7700498fa1f37109f647d3907e"}], "stats": {"total": 90, "additions": 78, "deletions": 12}, "files": [{"sha": "73ddaac385d54e34c96cf9c695c2c824171f4a1d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c578ae4348bddb97991348c2d0a05e3e7d7ad5a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c578ae4348bddb97991348c2d0a05e3e7d7ad5a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5c578ae4348bddb97991348c2d0a05e3e7d7ad5a", "patch": "@@ -1,3 +1,22 @@\n+2016-08-15  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tImplement LWG 2744 and LWG 2754.\n+\t* include/std/any (any(ValueType&&)): Constrain with __is_in_place_type.\n+\t(any(in_place_type_t<_ValueType>, _Args&&...)): Use _Decay.\n+\t(any(in_place_type_t<_ValueType>, initializer_list<_Up>, _Args&&...)):\n+\tLikewise.\n+\t(emplace(_Args&&...)): Likewise.\n+\t(emplace(initializer_list<_Up>, _Args&&...)): Likewise.\n+\t* include/std/utility: (__is_in_place_type_impl): New.\n+\t(__is_in_place_type): Likewise.\n+\t* testsuite/20_util/any/assign/emplace.cc: Add tests for decaying\n+\templace.\n+\t* testsuite/20_util/any/cons/in_place.cc: Add tests for decaying\n+\tin_place constructor.\n+\t* testsuite/20_util/any/misc/any_cast_neg.cc: Adjust.\n+\t* testsuite/20_util/any/requirements.cc: Add a test for\n+\tin_place-constructing a non-default-constructible type.\n+\n 2016-08-15  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tAdd a feature macro for C++17 make_from_tuple."}, {"sha": "9160035006e0f8019b7ef178e3528e88ac33453a", "filename": "libstdc++-v3/include/std/any", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c578ae4348bddb97991348c2d0a05e3e7d7ad5a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c578ae4348bddb97991348c2d0a05e3e7d7ad5a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany?ref=5c578ae4348bddb97991348c2d0a05e3e7d7ad5a", "patch": "@@ -153,7 +153,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     /// Construct with a copy of @p __value as the contained object.\n     template <typename _ValueType, typename _Tp = _Decay<_ValueType>,\n \t      typename _Mgr = _Manager<_Tp>,\n-              __any_constructible_t<_Tp, _ValueType&&> = true>\n+              __any_constructible_t<_Tp, _ValueType&&> = true,\n+\t      enable_if_t<!__is_in_place_type<_ValueType>::value, bool> = true>\n       any(_ValueType&& __value)\n       : _M_manager(&_Mgr::_S_manage)\n       {\n@@ -164,9 +165,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template <typename _ValueType, typename _Tp = _Decay<_ValueType>,\n \t      typename _Mgr = _Manager<_Tp>,\n               enable_if_t<__and_<is_copy_constructible<_Tp>,\n-\t\t\t\t __not_<\n-\t\t\t\t   is_constructible<_Tp,\n-\t\t\t\t\t\t    _ValueType&&>>>::value,\n+\t\t\t\t __not_<is_constructible<_Tp, _ValueType&&>>,\n+\t\t\t         __not_<__is_in_place_type<_ValueType>>>::value,\n \t\t\t  bool> = false>\n       any(_ValueType&& __value)\n       : _M_manager(&_Mgr::_S_manage)\n@@ -175,22 +175,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n     /// Construct with an object created from @p __args as the contained object.\n-    template <typename _Tp, typename... _Args,\n+    template <typename _ValueType, typename... _Args,\n+\t      typename _Tp = _Decay<_ValueType>,\n \t      typename _Mgr = _Manager<_Tp>,\n               __any_constructible_t<_Tp, _Args&&...> = false>\n-      any(in_place_type_t<_Tp>, _Args&&... __args)\n+      any(in_place_type_t<_ValueType>, _Args&&... __args)\n       : _M_manager(&_Mgr::_S_manage)\n       {\n         _Mgr::_S_create(_M_storage, std::forward<_Args>(__args)...);\n       }\n \n     /// Construct with an object created from @p __il and @p __args as\n     /// the contained object.\n-    template <typename _Tp, typename _Up, typename... _Args,\n+    template <typename _ValueType, typename _Up, typename... _Args,\n+\t      typename _Tp = _Decay<_ValueType>,\n \t      typename _Mgr = _Manager<_Tp>,\n               __any_constructible_t<_Tp, initializer_list<_Up>,\n \t\t\t\t    _Args&&...> = false>\n-      any(in_place_type_t<_Tp>, initializer_list<_Up> __il, _Args&&... __args)\n+      any(in_place_type_t<_ValueType>,\n+\t  initializer_list<_Up> __il, _Args&&... __args)\n       : _M_manager(&_Mgr::_S_manage)\n       {\n         _Mgr::_S_create(_M_storage, __il, std::forward<_Args>(__args)...);\n@@ -248,7 +251,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n     /// Emplace with an object created from @p __args as the contained object.\n-    template <typename _Tp, typename... _Args,\n+    template <typename _ValueType, typename... _Args,\n+\t      typename _Tp = _Decay<_ValueType>,\n \t      typename _Mgr = _Manager<_Tp>,\n               __any_constructible_t<_Tp, _Args&&...> = false>\n       void emplace(_Args&&... __args)\n@@ -260,7 +264,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     /// Emplace with an object created from @p __il and @p __args as\n     /// the contained object.\n-    template <typename _Tp, typename _Up, typename... _Args,\n+    template <typename _ValueType, typename _Up, typename... _Args,\n+\t      typename _Tp = _Decay<_ValueType>,\n \t      typename _Mgr = _Manager<_Tp>,\n               __any_constructible_t<_Tp, initializer_list<_Up>,\n \t\t\t\t    _Args&&...> = false>"}, {"sha": "6a6659b54958d9a7b183cb157dcc4e92d1308541", "filename": "libstdc++-v3/include/std/utility", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c578ae4348bddb97991348c2d0a05e3e7d7ad5a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c578ae4348bddb97991348c2d0a05e3e7d7ad5a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility?ref=5c578ae4348bddb97991348c2d0a05e3e7d7ad5a", "patch": "@@ -356,14 +356,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template <size_t _Idx>\n     in_place_tag in_place(__in_place_index<_Idx>*) {terminate();}\n \n+  template<typename>\n+    struct __is_in_place_type_impl : false_type\n+    { };\n+\n+  template<typename _Tp>\n+    struct __is_in_place_type_impl<in_place_type_t<_Tp>> : true_type\n+    { };\n+\n+  template<typename _Tp>\n+    struct __is_in_place_type\n+      : public __is_in_place_type_impl<_Tp>\n+    { };\n+\n #define  __cpp_lib_as_const 201510\n   template<typename _Tp>\n     constexpr add_const_t<_Tp>& as_const(_Tp& __t) noexcept { return __t; }\n \n   template<typename _Tp>\n     void as_const(const _Tp&&) = delete;\n \n-#endif\n+#endif // C++17\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "799c5edf4a41c353271cb15865ab9d4d21c8c048", "filename": "libstdc++-v3/testsuite/20_util/any/assign/emplace.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c578ae4348bddb97991348c2d0a05e3e7d7ad5a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2Femplace.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c578ae4348bddb97991348c2d0a05e3e7d7ad5a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2Femplace.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2Femplace.cc?ref=5c578ae4348bddb97991348c2d0a05e3e7d7ad5a", "patch": "@@ -59,4 +59,17 @@ int main()\n   combined& c2 = std::any_cast<combined&>(o5);\n   VERIFY(c2.v[0] == 1 && c2.v[1] == 2\n \t && std::get<0>(c2.t) == 3 && std::get<1>(c2.t) == 4 );\n+  std::any o6;\n+  o6.emplace<const int&>(i);\n+  VERIFY(o6.type() == o.type());\n+  std::any o7;\n+  o7.emplace<void()>(nullptr);\n+  std::any o8;\n+  o8.emplace<void(*)()>(nullptr);\n+  VERIFY(o7.type() == o8.type());\n+  std::any o9;\n+  o9.emplace<char(&)[42]>(nullptr);\n+  std::any o10;\n+  o10.emplace<char*>(nullptr);\n+  VERIFY(o9.type() == o10.type());\n }"}, {"sha": "52f2b38d5fc1bb3f62019e7b6a2cc260af922e2c", "filename": "libstdc++-v3/testsuite/20_util/any/cons/in_place.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c578ae4348bddb97991348c2d0a05e3e7d7ad5a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2Fin_place.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c578ae4348bddb97991348c2d0a05e3e7d7ad5a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2Fin_place.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2Fin_place.cc?ref=5c578ae4348bddb97991348c2d0a05e3e7d7ad5a", "patch": "@@ -54,4 +54,12 @@ int main()\n   combined& c2 = std::any_cast<combined&>(o5);\n   VERIFY(c2.v[0] == 1 && c2.v[1] == 2\n \t && std::get<0>(c2.t) == 3 && std::get<1>(c2.t) == 4 );\n+  std::any o6(std::in_place<int&>, i);\n+  VERIFY(o6.type() == o.type());\n+  std::any o7(std::in_place<void()>, nullptr);\n+  std::any o8(std::in_place<void(*)()>, nullptr);\n+  VERIFY(o7.type() == o8.type());\n+  std::any o9(std::in_place<char(&)[42]>, nullptr);\n+  std::any o10(std::in_place<char*>, nullptr);\n+  VERIFY(o9.type() == o10.type());\n }"}, {"sha": "05fdeb7198da6b99707725f010df4e6547bc7e7d", "filename": "libstdc++-v3/testsuite/20_util/any/misc/any_cast_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c578ae4348bddb97991348c2d0a05e3e7d7ad5a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c578ae4348bddb97991348c2d0a05e3e7d7ad5a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_neg.cc?ref=5c578ae4348bddb97991348c2d0a05e3e7d7ad5a", "patch": "@@ -26,5 +26,5 @@ void test01()\n   using std::any_cast;\n \n   const any y(1);\n-  any_cast<int&>(y); // { dg-error \"qualifiers\" \"\" { target { *-*-* } } 435 }\n+  any_cast<int&>(y); // { dg-error \"qualifiers\" \"\" { target { *-*-* } } 440 }\n }"}, {"sha": "7b084bec64ac87d12222ddf0b1b9afa0342196e9", "filename": "libstdc++-v3/testsuite/20_util/any/requirements.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c578ae4348bddb97991348c2d0a05e3e7d7ad5a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Frequirements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c578ae4348bddb97991348c2d0a05e3e7d7ad5a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Frequirements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Frequirements.cc?ref=5c578ae4348bddb97991348c2d0a05e3e7d7ad5a", "patch": "@@ -34,3 +34,11 @@ static_assert(!std::is_assignable<any&, const unique_ptr<int>&>::value);\n static_assert(!std::is_constructible<any&, const unique_ptr<int>&>::value);\n static_assert(!std::is_assignable<any&, unique_ptr<int>&>::value);\n static_assert(!std::is_constructible<any&, unique_ptr<int>&>::value);\n+\n+struct NoDefaultCtor\n+{\n+  NoDefaultCtor() = delete;\n+};\n+\n+static_assert(!std::is_constructible<any,\n+\t      std::in_place_type_t<NoDefaultCtor>>::value);"}]}