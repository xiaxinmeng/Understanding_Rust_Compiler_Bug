{"sha": "e79fc3d4d72228eeec47b8a53721663371042b8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc5ZmMzZDRkNzIyMjhlZWVjNDdiOGE1MzcyMTY2MzM3MTA0MmI4ZQ==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2015-06-24T15:27:04Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2015-06-24T15:27:04Z"}, "message": "Implement N3928 - Extending static_assert\n\ncp/\n\n2015-06-24  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\tImplement N3928 - Extending static_assert\n\t* parser.c (cp_parser_static_assert): Support static_assert with\n\tno message string.  Supply an empty string in this case.\n\t* semantics.c (finish_static_assert): Don't try to print a message if\n\tthe message strnig is empty.\n\n\ntestsuite/\n\n2015-06-24  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\tImplement N3928 - Extending static_assert\n\t* g++.dg/cpp0x/static_assert8.C: Adjust.\n\t* g++.dg/cpp0x/static_assert12.C: New.\n\t* g++.dg/cpp0x/static_assert13.C: New.\n\t* g++.dg/cpp1y/static_assert1.C: New.\n\t* g++.dg/cpp1y/static_assert2.C: New.\n\t* g++.dg/cpp1z/static_assert-nomsg.C: New.\n\nFrom-SVN: r224903", "tree": {"sha": "58295d23ad987e9a1dc0d61178435cf66c08a320", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58295d23ad987e9a1dc0d61178435cf66c08a320"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e79fc3d4d72228eeec47b8a53721663371042b8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e79fc3d4d72228eeec47b8a53721663371042b8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e79fc3d4d72228eeec47b8a53721663371042b8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e79fc3d4d72228eeec47b8a53721663371042b8e/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aa97bb6f1229cf69aa17ad7660c3bc63c39ab22b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa97bb6f1229cf69aa17ad7660c3bc63c39ab22b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa97bb6f1229cf69aa17ad7660c3bc63c39ab22b"}], "stats": {"total": 218, "additions": 203, "deletions": 15}, "files": [{"sha": "197bc77736aad439abf1e2b40774739498fdbd99", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79fc3d4d72228eeec47b8a53721663371042b8e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79fc3d4d72228eeec47b8a53721663371042b8e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e79fc3d4d72228eeec47b8a53721663371042b8e", "patch": "@@ -1,3 +1,11 @@\n+2015-06-24  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tImplement N3928 - Extending static_assert\n+\t* parser.c (cp_parser_static_assert): Support static_assert with\n+\tno message string.  Supply an empty string in this case.\n+\t* semantics.c (finish_static_assert): Don't try to print a message if\n+\tthe message strnig is empty.\n+\n 2015-06-24  Adam Butcher  <adam@jessamine.co.uk>\n \n \tPR c++/65750"}, {"sha": "e0e484a4c47ca530f199f7c4c69b3d2dde091a28", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79fc3d4d72228eeec47b8a53721663371042b8e/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79fc3d4d72228eeec47b8a53721663371042b8e/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=e79fc3d4d72228eeec47b8a53721663371042b8e", "patch": "@@ -12173,6 +12173,7 @@ cp_parser_linkage_specification (cp_parser* parser)\n \n    static_assert-declaration:\n      static_assert ( constant-expression , string-literal ) ; \n+     static_assert ( constant-expression ) ; (C++1Z)\n \n    If MEMBER_P, this static_assert is a class member.  */\n \n@@ -12210,20 +12211,35 @@ cp_parser_static_assert(cp_parser *parser, bool member_p)\n                                    /*allow_non_constant_p=*/true,\n                                    /*non_constant_p=*/&dummy);\n \n-  /* Parse the separating `,'.  */\n-  cp_parser_require (parser, CPP_COMMA, RT_COMMA);\n+  if (cp_lexer_peek_token (parser->lexer)->type == CPP_CLOSE_PAREN)\n+    {\n+      if (cxx_dialect < cxx1z)\n+\tpedwarn (input_location, OPT_Wpedantic,\n+\t\t \"static_assert without a message \"\n+\t\t \"only available with -std=c++1z or -std=gnu++1z\");\n+      /* Eat the ')'  */\n+      cp_lexer_consume_token (parser->lexer);\n+      message = build_string (1, \"\");\n+      TREE_TYPE (message) = char_array_type_node;\n+      fix_string_type (message);\n+    }\n+  else\n+    {\n+      /* Parse the separating `,'.  */\n+      cp_parser_require (parser, CPP_COMMA, RT_COMMA);\n \n-  /* Parse the string-literal message.  */\n-  message = cp_parser_string_literal (parser, \n-                                      /*translate=*/false,\n-                                      /*wide_ok=*/true);\n+      /* Parse the string-literal message.  */\n+      message = cp_parser_string_literal (parser, \n+                                \t  /*translate=*/false,\n+                                \t  /*wide_ok=*/true);\n \n-  /* A `)' completes the static assertion.  */\n-  if (!cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN))\n-    cp_parser_skip_to_closing_parenthesis (parser, \n-                                           /*recovering=*/true, \n-                                           /*or_comma=*/false,\n-\t\t\t\t\t   /*consume_paren=*/true);\n+      /* A `)' completes the static assertion.  */\n+      if (!cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN))\n+\tcp_parser_skip_to_closing_parenthesis (parser, \n+                                               /*recovering=*/true, \n+                                               /*or_comma=*/false,\n+\t\t\t\t\t       /*consume_paren=*/true);\n+    }\n \n   /* A semicolon terminates the declaration.  */\n   cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);"}, {"sha": "c0abeaba1c4c0bff8b056b4dcd20191ecf07fdd9", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79fc3d4d72228eeec47b8a53721663371042b8e/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79fc3d4d72228eeec47b8a53721663371042b8e/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=e79fc3d4d72228eeec47b8a53721663371042b8e", "patch": "@@ -7174,8 +7174,17 @@ finish_static_assert (tree condition, tree message, location_t location,\n       input_location = location;\n       if (TREE_CODE (condition) == INTEGER_CST \n           && integer_zerop (condition))\n-        /* Report the error. */\n-        error (\"static assertion failed: %s\", TREE_STRING_POINTER (message));\n+\t{\n+\t  int sz = TREE_INT_CST_LOW (TYPE_SIZE_UNIT\n+\t\t\t\t     (TREE_TYPE (TREE_TYPE (message))));\n+\t  int len = TREE_STRING_LENGTH (message) / sz - 1;\n+          /* Report the error. */\n+\t  if (len == 0)\n+            error (\"static assertion failed\");\n+\t  else\n+            error (\"static assertion failed: %s\",\n+\t\t   TREE_STRING_POINTER (message));\n+\t}\n       else if (condition && condition != error_mark_node)\n \t{\n \t  error (\"non-constant condition for static assertion\");"}, {"sha": "26d39ce9afd93be53776a8977b673b6432fd9ffd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79fc3d4d72228eeec47b8a53721663371042b8e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79fc3d4d72228eeec47b8a53721663371042b8e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e79fc3d4d72228eeec47b8a53721663371042b8e", "patch": "@@ -1,3 +1,13 @@\n+2015-06-24  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tImplement N3928 - Extending static_assert\n+\t* g++.dg/cpp0x/static_assert8.C: Adjust.\n+\t* g++.dg/cpp0x/static_assert12.C: New.\n+\t* g++.dg/cpp0x/static_assert13.C: New.\n+\t* g++.dg/cpp1y/static_assert1.C: New.\n+\t* g++.dg/cpp1y/static_assert2.C: New.\n+\t* g++.dg/cpp1z/static_assert-nomsg.C: New.\n+\n 2015-06-24  Adam Butcher  <adam@jessamine.co.uk>\n \n \tPR c++/65750"}, {"sha": "ff6f40d918fc1bd1f01598b7f7a9eab46fb7db7d", "filename": "gcc/testsuite/g++.dg/cpp0x/static_assert12.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79fc3d4d72228eeec47b8a53721663371042b8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79fc3d4d72228eeec47b8a53721663371042b8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert12.C?ref=e79fc3d4d72228eeec47b8a53721663371042b8e", "patch": "@@ -0,0 +1,30 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++11 -pedantic\" }\n+\n+template<typename T>\n+  struct is_float\n+  {\n+    static constexpr bool value = false;\n+  };\n+\n+template<>\n+  struct is_float<float>\n+  {\n+    static constexpr bool value = true;\n+  };\n+\n+template<typename T>\n+  T\n+  float_thing(T __x)\n+  {\n+    static_assert(is_float<T>::value, \"\"); // { dg-error \"static assertion failed\" }\n+    static_assert(is_float<T>::value); // { dg-error \"static assertion failed\" }\n+  }\n+\n+int\n+main()\n+{\n+  float_thing(1);\n+}\n+\n+// { dg-warning \"static_assert without a message only available with \" \"\" { target *-*-* } 21 }"}, {"sha": "86b0b0360d94fde85020533726fecc965391bf7c", "filename": "gcc/testsuite/g++.dg/cpp0x/static_assert13.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79fc3d4d72228eeec47b8a53721663371042b8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79fc3d4d72228eeec47b8a53721663371042b8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert13.C?ref=e79fc3d4d72228eeec47b8a53721663371042b8e", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n+\n+template<typename T>\n+  struct is_float\n+  {\n+    static constexpr bool value = false;\n+  };\n+\n+template<>\n+  struct is_float<float>\n+  {\n+    static constexpr bool value = true;\n+  };\n+\n+template<typename T>\n+  T\n+  float_thing(T __x)\n+  {\n+    static_assert(is_float<T>::value, \"\"); // { dg-error \"static assertion failed\" }\n+    static_assert(is_float<T>::value); // { dg-error \"static assertion failed\" }\n+  }\n+\n+int\n+main()\n+{\n+  float_thing(1);\n+}"}, {"sha": "972f859d6ef9165ad1b8dec4df4864533857dd17", "filename": "gcc/testsuite/g++.dg/cpp0x/static_assert8.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79fc3d4d72228eeec47b8a53721663371042b8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79fc3d4d72228eeec47b8a53721663371042b8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert8.C?ref=e79fc3d4d72228eeec47b8a53721663371042b8e", "patch": "@@ -1,7 +1,9 @@\n // { dg-do compile { target c++11 } }\n \n-static_assert (1 == 0); // { dg-error \"expected (string-literal|',') before\" }\n+static_assert (1 == 0); // { dg-error \"static assertion failed\" }\n \n static_assert (1 == 0,); // { dg-error \"expected string-literal before '\\\\)'\" }\n \n static_assert (1 == 0, \"oops\"); // { dg-error \"static assertion failed\" }\n+\n+// { dg-error \"static_assert without a message only available with \" \"\" { target *-*-* } 3 }"}, {"sha": "513e347d7e59092719f5f49a60c9676b01382694", "filename": "gcc/testsuite/g++.dg/cpp1y/static_assert1.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79fc3d4d72228eeec47b8a53721663371042b8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fstatic_assert1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79fc3d4d72228eeec47b8a53721663371042b8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fstatic_assert1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fstatic_assert1.C?ref=e79fc3d4d72228eeec47b8a53721663371042b8e", "patch": "@@ -0,0 +1,30 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++14 -pedantic\" }\n+\n+template<typename T>\n+  struct is_float\n+  {\n+    static constexpr bool value = false;\n+  };\n+\n+template<>\n+  struct is_float<float>\n+  {\n+    static constexpr bool value = true;\n+  };\n+\n+template<typename T>\n+  T\n+  float_thing(T __x)\n+  {\n+    static_assert(is_float<T>::value, \"\"); // { dg-error \"static assertion failed\" }\n+    static_assert(is_float<T>::value); // { dg-error \"static assertion failed\" }\n+  }\n+\n+int\n+main()\n+{\n+  float_thing(1);\n+}\n+\n+// { dg-warning \"static_assert without a message only available with \" \"\" { target *-*-* } 21 }"}, {"sha": "d862282cda82bd6cdbac168e3df8fb105ea5de9b", "filename": "gcc/testsuite/g++.dg/cpp1y/static_assert2.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79fc3d4d72228eeec47b8a53721663371042b8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fstatic_assert2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79fc3d4d72228eeec47b8a53721663371042b8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fstatic_assert2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fstatic_assert2.C?ref=e79fc3d4d72228eeec47b8a53721663371042b8e", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++14\" }\n+\n+template<typename T>\n+  struct is_float\n+  {\n+    static constexpr bool value = false;\n+  };\n+\n+template<>\n+  struct is_float<float>\n+  {\n+    static constexpr bool value = true;\n+  };\n+\n+template<typename T>\n+  T\n+  float_thing(T __x)\n+  {\n+    static_assert(is_float<T>::value, \"\"); // { dg-error \"static assertion failed\" }\n+    static_assert(is_float<T>::value); // { dg-error \"static assertion failed\" }\n+  }\n+\n+int\n+main()\n+{\n+  float_thing(1);\n+}"}, {"sha": "3d12e18467594ebf567e0ce845b352ab3850eb34", "filename": "gcc/testsuite/g++.dg/cpp1z/static_assert-nomsg.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79fc3d4d72228eeec47b8a53721663371042b8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fstatic_assert-nomsg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79fc3d4d72228eeec47b8a53721663371042b8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fstatic_assert-nomsg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fstatic_assert-nomsg.C?ref=e79fc3d4d72228eeec47b8a53721663371042b8e", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile { target c++1z } }\n+\n+template<typename T>\n+  struct is_float\n+  {\n+    static constexpr bool value = false;\n+  };\n+\n+template<>\n+  struct is_float<float>\n+  {\n+    static constexpr bool value = true;\n+  };\n+\n+template<typename T>\n+  T\n+  float_thing(T __x)\n+  {\n+    static_assert(is_float<T>::value, \"\"); // { dg-error \"static assertion failed\" }\n+    static_assert(is_float<T>::value); // { dg-error \"static assertion failed\" }\n+  }\n+\n+int\n+main()\n+{\n+  float_thing(1);\n+}"}]}