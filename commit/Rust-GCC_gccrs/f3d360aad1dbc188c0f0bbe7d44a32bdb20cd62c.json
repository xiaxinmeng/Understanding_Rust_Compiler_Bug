{"sha": "f3d360aad1dbc188c0f0bbe7d44a32bdb20cd62c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNkMzYwYWFkMWRiYzE4OGMwZjBiYmU3ZDQ0YTMyYmRiMjBjZDYyYw==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-08-21T14:22:44Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-08-21T14:22:44Z"}, "message": "c-common.c (scan_char_table): Add 'w' to flags for all formats except 'n'.\n\n\t* c-common.c (scan_char_table): Add 'w' to flags for all formats\n\texcept 'n'.\n\t(check_format_info): Set 'wide' for scanf format widths.  Warn for\n\ta zero scanf width.  Make the check for writing into a constant\n\tobject at the first level of indirection; at later levels, warn if\n\tany type qualifiers are encountered.\n\ntestsuite:\n\t* gcc.dg/c90-scanf-1.c, gcc.dg/c94-scanf-1.c: New tests.\n\nFrom-SVN: r35842", "tree": {"sha": "fe040319ae1a5e5a0ae01e6b368b587c7c6fbd08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe040319ae1a5e5a0ae01e6b368b587c7c6fbd08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3d360aad1dbc188c0f0bbe7d44a32bdb20cd62c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3d360aad1dbc188c0f0bbe7d44a32bdb20cd62c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3d360aad1dbc188c0f0bbe7d44a32bdb20cd62c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3d360aad1dbc188c0f0bbe7d44a32bdb20cd62c/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6ea3b5f99cc34282a6501ca17096534e69725ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6ea3b5f99cc34282a6501ca17096534e69725ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6ea3b5f99cc34282a6501ca17096534e69725ad"}], "stats": {"total": 233, "additions": 209, "deletions": 24}, "files": [{"sha": "b95fbcdbd25360e0d67c01574a2caa5f19c7efa5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d360aad1dbc188c0f0bbe7d44a32bdb20cd62c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d360aad1dbc188c0f0bbe7d44a32bdb20cd62c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3d360aad1dbc188c0f0bbe7d44a32bdb20cd62c", "patch": "@@ -1,3 +1,12 @@\n+2000-08-21  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-common.c (scan_char_table): Add 'w' to flags for all formats\n+\texcept 'n'.\n+\t(check_format_info): Set 'wide' for scanf format widths.  Warn for\n+\ta zero scanf width.  Make the check for writing into a constant\n+\tobject at the first level of indirection; at later levels, warn if\n+\tany type qualifiers are encountered.\n+\n Mon Aug 21 07:41:12 2000  Jeffrey A Law  (law@cygnus.com)\n \n \t* reload.c (reload_inner_reg_of_subreg): New function broken out of"}, {"sha": "e9c84f915ca212ba5cd98258d2dab46b064f442e", "filename": "gcc/c-common.c", "status": "modified", "additions": 52, "deletions": 24, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d360aad1dbc188c0f0bbe7d44a32bdb20cd62c/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d360aad1dbc188c0f0bbe7d44a32bdb20cd62c/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=f3d360aad1dbc188c0f0bbe7d44a32bdb20cd62c", "patch": "@@ -1253,15 +1253,15 @@ static format_char_info print_char_table[] = {\n };\n \n static format_char_info scan_char_table[] = {\n-  { \"di\",\t1,\tT_I,\tT_SC,\tT_S,\tT_L,\tT_LL,\tT_LL,\tT_SST,\tT_PD,\tT_IM,\t\"*\"\t},\n-  { \"ouxX\",\t1,\tT_UI,\tT_UC,\tT_US,\tT_UL,\tT_ULL,\tT_ULL,\tT_ST,\tT_UPD,\tT_UIM,\t\"*\"\t},\n-  { \"efFgEGaA\",\t1,\tT_F,\tNULL,\tNULL,\tT_D,\tNULL,\tT_LD,\tNULL,\tNULL,\tNULL,\t\"*\"\t},\n-  { \"c\",\t1,\tT_C,\tNULL,\tNULL,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*c\"\t},\n-  { \"s\",\t1,\tT_C,\tNULL,\tNULL,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*ac\"\t},\n-  { \"[\",\t1,\tT_C,\tNULL,\tNULL,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*ac\"\t},\n-  { \"C\",\t1,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*\"\t},\n-  { \"S\",\t1,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*a\"\t},\n-  { \"p\",\t2,\tT_V,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*\"\t},\n+  { \"di\",\t1,\tT_I,\tT_SC,\tT_S,\tT_L,\tT_LL,\tT_LL,\tT_SST,\tT_PD,\tT_IM,\t\"*w\"\t},\n+  { \"ouxX\",\t1,\tT_UI,\tT_UC,\tT_US,\tT_UL,\tT_ULL,\tT_ULL,\tT_ST,\tT_UPD,\tT_UIM,\t\"*w\"\t},\n+  { \"efFgEGaA\",\t1,\tT_F,\tNULL,\tNULL,\tT_D,\tNULL,\tT_LD,\tNULL,\tNULL,\tNULL,\t\"*w\"\t},\n+  { \"c\",\t1,\tT_C,\tNULL,\tNULL,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*cw\"\t},\n+  { \"s\",\t1,\tT_C,\tNULL,\tNULL,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*acw\"\t},\n+  { \"[\",\t1,\tT_C,\tNULL,\tNULL,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*acw\"\t},\n+  { \"C\",\t1,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*w\"\t},\n+  { \"S\",\t1,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*aw\"\t},\n+  { \"p\",\t2,\tT_V,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*w\"\t},\n   { \"n\",\t1,\tT_I,\tT_SC,\tT_S,\tT_L,\tT_LL,\tNULL,\tT_SST,\tT_PD,\tT_IM,\t\"\"\t},\n   { NULL,\t0,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL\t}\n };\n@@ -1618,6 +1618,7 @@ check_format_info (info, params)\n     {\n       int aflag;\n       int char_type_flag = 0;\n+      int writing_in_flag = 0;\n       if (*format_chars == 0)\n \t{\n \t  if (format_chars - TREE_STRING_POINTER (format_tree) != format_length)\n@@ -1642,11 +1643,19 @@ check_format_info (info, params)\n       suppressed = wide = precise = FALSE;\n       if (info->format_type == scanf_format_type)\n \t{\n+\t  int non_zero_width_char = FALSE;\n \t  suppressed = *format_chars == '*';\n \t  if (suppressed)\n \t    ++format_chars;\n \t  while (ISDIGIT (*format_chars))\n-\t    ++format_chars;\n+\t    {\n+\t      wide = TRUE;\n+\t      if (*format_chars != '0')\n+\t\tnon_zero_width_char = TRUE;\n+\t      ++format_chars;\n+\t    }\n+\t  if (wide && !non_zero_width_char)\n+\t    warning (\"zero width in scanf format\");\n \t}\n       else if (info->format_type == strftime_format_type)\n         {\n@@ -2047,6 +2056,12 @@ check_format_info (info, params)\n \n       STRIP_NOPS (cur_param);\n \n+      if ((info->format_type == scanf_format_type\n+\t   || (info->format_type == printf_format_type\n+\t       && format_char == 'n'))\n+\t  && wanted_type != 0)\n+\twriting_in_flag = 1;\n+\n       /* Check the types of any additional pointer arguments\n \t that precede the \"real\" argument.  */\n       for (i = 0; i < fci->pointer_count + aflag; ++i)\n@@ -2060,6 +2075,33 @@ check_format_info (info, params)\n \t      else\n \t\tcur_param = 0;\n \n+\t      /* See if this is an attempt to write into a const type with\n+\t\t scanf or with printf \"%n\".  Note: the writing in happens\n+\t\t at the first indirection only, if for example\n+\t\t void * const * is passed to scanf %p; passing\n+\t\t const void ** is simply passing an incompatible type.  */\n+\t      if (writing_in_flag\n+\t\t  && i == 0\n+\t\t  && TREE_CODE (cur_type) != ERROR_MARK\n+\t\t  && (TYPE_READONLY (cur_type)\n+\t\t      || (cur_param != 0\n+\t\t\t  && (TREE_CODE_CLASS (TREE_CODE (cur_param)) == 'c'\n+\t\t\t      || (DECL_P (cur_param)\n+\t\t\t\t  && TREE_READONLY (cur_param))))))\n+\t\twarning (\"writing into constant object (arg %d)\", arg_num);\n+\n+\t      /* If there are extra type qualifiers beyond the first\n+\t\t indirection, then this makes the types technically\n+\t\t incompatible.  */\n+\t      if (i > 0\n+\t\t  && pedantic\n+\t\t  && TREE_CODE (cur_type) != ERROR_MARK\n+\t\t  && (TYPE_READONLY (cur_type)\n+\t\t      || TYPE_VOLATILE (cur_type)\n+\t\t      || TYPE_RESTRICT (cur_type)))\n+\t\twarning (\"extra type qualifiers in format argument (arg %d)\",\n+\t\t\t arg_num);\n+\n \t      continue;\n \t    }\n \t  if (TREE_CODE (cur_type) != ERROR_MARK)\n@@ -2072,20 +2114,6 @@ check_format_info (info, params)\n \t  break;\n \t}\n \n-      /* See if this is an attempt to write into a const type with\n-\t scanf or with printf \"%n\".  */\n-      if ((info->format_type == scanf_format_type\n-\t   || (info->format_type == printf_format_type\n-\t       && format_char == 'n'))\n-\t  && i == fci->pointer_count + aflag\n-\t  && wanted_type != 0\n-\t  && TREE_CODE (cur_type) != ERROR_MARK\n-\t  && (TYPE_READONLY (cur_type)\n-\t      || (cur_param != 0\n-\t\t  && (TREE_CODE_CLASS (TREE_CODE (cur_param)) == 'c'\n-\t\t      || (DECL_P (cur_param) && TREE_READONLY (cur_param))))))\n-\twarning (\"writing into constant object (arg %d)\", arg_num);\n-\n       /* Check whether the argument type is a character type.  This leniency\n \t only applies to certain formats, flagged with 'c'.\n       */"}, {"sha": "c94de4dbe9ef04e0cfe45ae20781fc1441c0597a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d360aad1dbc188c0f0bbe7d44a32bdb20cd62c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d360aad1dbc188c0f0bbe7d44a32bdb20cd62c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f3d360aad1dbc188c0f0bbe7d44a32bdb20cd62c", "patch": "@@ -1,3 +1,7 @@\n+2000-08-21  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/c90-scanf-1.c, gcc.dg/c94-scanf-1.c: New tests.\n+\n 2000-08-21  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.old-deja/g++.other/loop2.C: New test."}, {"sha": "021316cebecd5feece942d4e5270fd57810c0598", "filename": "gcc/testsuite/gcc.dg/c90-scanf-1.c", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d360aad1dbc188c0f0bbe7d44a32bdb20cd62c/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-scanf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d360aad1dbc188c0f0bbe7d44a32bdb20cd62c/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-scanf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-scanf-1.c?ref=f3d360aad1dbc188c0f0bbe7d44a32bdb20cd62c", "patch": "@@ -0,0 +1,125 @@\n+/* Test for scanf formats.  Formats using C90 features, including cases\n+   where C90 specifies some aspect of the format to be ignored or where\n+   the behaviour is undefined.\n+*/\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic -Wformat\" } */\n+\n+typedef __WCHAR_TYPE__ wchar_t;\n+\n+__extension__ typedef long long int llong;\n+__extension__ typedef unsigned long long int ullong;\n+\n+extern int scanf (const char *, ...);\n+\n+#define NULL ((void *)0)\n+\n+void\n+foo (int *ip, unsigned int *uip, short int *hp, unsigned short int *uhp,\n+     long int *lp, unsigned long int *ulp, float *fp, double *dp,\n+     long double *ldp, char *s, signed char *ss, unsigned char *us,\n+     void **pp, int *n, llong *llp, ullong *ullp, wchar_t *ls,\n+     const int *cip, const int *cn, const char *cs, const void **ppc,\n+     void *const *pcp, short int *hn, long int *ln, void *p, char **sp,\n+     volatile void *ppv)\n+{\n+  /* See ISO/IEC 9899:1990 (E) subclause 7.9.6.2 (pages 134-138).  */\n+  /* Basic sanity checks for the different components of a format.  */\n+  scanf (\"%d\", ip);\n+  scanf (\"%*d\");\n+  scanf (\"%3d\", ip);\n+  scanf (\"%hd\", hp);\n+  scanf (\"%3ld\", lp);\n+  scanf (\"%*3d\");\n+  scanf (\"%d %ld\", ip, lp);\n+  /* Valid and invalid %% constructions.  */\n+  scanf (\"%%\");\n+  scanf (\"%*%\"); /* { dg-warning \"format\" \"bogus %%\" } */\n+  scanf (\"%*%\\n\"); /* { dg-warning \"format\" \"bogus %%\" } */\n+  scanf (\"%4%\"); /* { dg-warning \"format\" \"bogus %%\" } */\n+  scanf (\"%4%\\n\"); /* { dg-warning \"format\" \"bogus %%\" } */\n+  scanf (\"%h%\"); /* { dg-warning \"format\" \"bogus %%\" } */\n+  scanf (\"%h%\\n\"); /* { dg-warning \"format\" \"bogus %%\" } */\n+  /* Valid, invalid and silly assignment-suppression constructions.  */\n+  scanf (\"%*d%*i%*o%*u%*x%*X%*e%*E%*f%*g%*G%*s%*[abc]%*c%*p\");\n+  scanf (\"%*2d%*8s%*3c\");\n+  scanf (\"%*n\"); /* { dg-warning \"suppress\" \"suppression of %n\" } */\n+  scanf (\"%*hd\"); /* { dg-warning \"together\" \"suppression with length\" } */\n+  /* Valid, invalid and silly width constructions.  */\n+  scanf (\"%2d%3i%4o%5u%6x%7X%8e%9E%10f%11g%12G%13s%14[abc]%15c%16p\",\n+\t ip, ip, uip, uip, uip, uip, fp, fp, fp, fp, fp, s, s, s, pp);\n+  scanf (\"%0d\", ip); /* { dg-warning \"width\" \"warning for zero width\" } */\n+  scanf (\"%3n\", n); /* { dg-warning \"width\" \"width with %n\" } */\n+  /* Valid and invalid %h, %l, %L constructions.  */\n+  scanf (\"%hd%hi%ho%hu%hx%hX%hn\", hp, hp, uhp, uhp, uhp, uhp, hn);\n+  scanf (\"%he\", fp); /* { dg-warning \"length character\" \"bad use of %h\" } */\n+  scanf (\"%hE\", fp); /* { dg-warning \"length character\" \"bad use of %h\" } */\n+  scanf (\"%hf\", fp); /* { dg-warning \"length character\" \"bad use of %h\" } */\n+  scanf (\"%hg\", fp); /* { dg-warning \"length character\" \"bad use of %h\" } */\n+  scanf (\"%hG\", fp); /* { dg-warning \"length character\" \"bad use of %h\" } */\n+  scanf (\"%hs\", s); /* { dg-warning \"length character\" \"bad use of %h\" } */\n+  scanf (\"%h[ac]\", s); /* { dg-warning \"length character\" \"bad use of %h\" } */\n+  scanf (\"%hc\", s); /* { dg-warning \"length character\" \"bad use of %h\" } */\n+  scanf (\"%hp\", pp); /* { dg-warning \"length character\" \"bad use of %h\" } */\n+  scanf (\"%h\"); /* { dg-warning \"conversion lacks type\" \"bare %h\" } */\n+  scanf (\"%h.\"); /* { dg-warning \"conversion\" \"bogus %h\" } */\n+  scanf (\"%ld%li%lo%lu%lx%lX%ln\", lp, lp, ulp, ulp, ulp, ulp, ln);\n+  scanf (\"%le%lE%lf%lg%lG\", dp, dp, dp, dp, dp);\n+  scanf (\"%lp\", pp); /* { dg-warning \"length character\" \"bad use of %l\" } */\n+  /* These next three formats were added in C94.  */\n+  scanf (\"%ls\", ls); /* { dg-warning \"length character|C\" \"bad use of %l\" } */\n+  scanf (\"%l[ac]\", ls); /* { dg-warning \"length character|C\" \"bad use of %l\" } */\n+  scanf (\"%lc\", ls); /* { dg-warning \"length character|C\" \"bad use of %l\" } */\n+  scanf (\"%Le%LE%Lf%Lg%LG\", ldp, ldp, ldp, ldp, ldp);\n+  scanf (\"%Ld\", llp); /* { dg-warning \"does not support\" \"bad use of %L\" } */\n+  scanf (\"%Li\", llp); /* { dg-warning \"does not support\" \"bad use of %L\" } */\n+  scanf (\"%Lo\", ullp); /* { dg-warning \"does not support\" \"bad use of %L\" } */\n+  scanf (\"%Lu\", ullp); /* { dg-warning \"does not support\" \"bad use of %L\" } */\n+  scanf (\"%Lx\", ullp); /* { dg-warning \"does not support\" \"bad use of %L\" } */\n+  scanf (\"%LX\", ullp); /* { dg-warning \"does not support\" \"bad use of %L\" } */\n+  scanf (\"%Ls\", s); /* { dg-warning \"length character\" \"bad use of %L\" } */\n+  scanf (\"%L[ac]\", s); /* { dg-warning \"length character\" \"bad use of %L\" } */\n+  scanf (\"%Lc\", s); /* { dg-warning \"length character\" \"bad use of %L\" } */\n+  scanf (\"%Lp\", pp); /* { dg-warning \"length character\" \"bad use of %L\" } */\n+  scanf (\"%Ln\", n); /* { dg-warning \"length character\" \"bad use of %L\" } */\n+  /* Valid uses of each bare conversion.  */\n+  scanf (\"%d%i%o%u%x%X%e%E%f%g%G%s%[abc]%c%p%n%%\", ip, ip, uip, uip, uip,\n+\t uip, fp, fp, fp, fp, fp, s, s, s, pp, n);\n+  /* Allow other character pointers with %s, %c, %[].  */\n+  scanf (\"%2s%3s%4c%5c%6[abc]%7[abc]\", ss, us, ss, us, ss, us);\n+  /* Further tests for %[].  */\n+  scanf (\"%[%d]%d\", s, ip);\n+  scanf (\"%[^%d]%d\", s, ip);\n+  scanf (\"%[]%d]%d\", s, ip);\n+  scanf (\"%[^]%d]%d\", s, ip);\n+  scanf (\"%[%d]%d\", s, ip);\n+  scanf (\"%[]abcd\", s); /* { dg-warning \"no closing\" \"incomplete scanset\" } */\n+  /* Various tests of bad argument types.  Some of these are only pedantic\n+     warnings.\n+  */\n+  scanf (\"%d\", lp); /* { dg-warning \"format\" \"bad argument types\" } */\n+  scanf (\"%d\", uip); /* { dg-warning \"format\" \"bad argument types\" } */\n+  scanf (\"%d\", pp); /* { dg-warning \"format\" \"bad argument types\" } */\n+  scanf (\"%p\", ppc); /* { dg-warning \"format\" \"bad argument types\" } */\n+  scanf (\"%p\", ppv); /* { dg-warning \"format\" \"bad argument types\" } */\n+  scanf (\"%s\", n); /* { dg-warning \"format\" \"bad argument types\" } */\n+  scanf (\"%s\", p); /* { dg-warning \"format\" \"bad argument types\" } */\n+  scanf (\"%p\", p); /* { dg-warning \"format\" \"bad argument types\" } */\n+  scanf (\"%p\", sp); /* { dg-warning \"format\" \"bad argument types\" } */\n+  /* Tests for writing into constant values.  */\n+  scanf (\"%d\", cip); /* { dg-warning \"constant\" \"%d writing into const\" } */\n+  scanf (\"%n\", cn); /* { dg-warning \"constant\" \"%n writing into const\" } */\n+  scanf (\"%s\", cs); /* { dg-warning \"constant\" \"%s writing into const\" } */\n+  scanf (\"%p\", pcp); /* { dg-warning \"constant\" \"%p writing into const\" } */\n+  /* Wrong number of arguments.  */\n+  scanf (\"%d%d\", ip); /* { dg-warning \"arguments\" \"wrong number of args\" } */\n+  scanf (\"%d\", ip, ip); /* { dg-warning \"arguments\" \"wrong number of args\" } */\n+  /* Miscellaneous bogus constructions.  */\n+  scanf (\"\"); /* { dg-warning \"zero-length\" \"warning for empty format\" } */\n+  scanf (\"\\0\"); /* { dg-warning \"embedded\" \"warning for embedded NUL\" } */\n+  scanf (\"%d\\0\", ip); /* { dg-warning \"embedded\" \"warning for embedded NUL\" } */\n+  scanf (\"%d\\0%d\", ip, ip); /* { dg-warning \"embedded|too many\" \"warning for embedded NUL\" } */\n+  scanf (NULL); /* { dg-warning \"null\" \"null format string warning\" } */\n+  scanf (\"%\"); /* { dg-warning \"trailing\" \"trailing % warning\" } */\n+}"}, {"sha": "884cd288a0fb0e6d2869d0a1a33a8a4eccf975ea", "filename": "gcc/testsuite/gcc.dg/c94-scanf-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d360aad1dbc188c0f0bbe7d44a32bdb20cd62c/gcc%2Ftestsuite%2Fgcc.dg%2Fc94-scanf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d360aad1dbc188c0f0bbe7d44a32bdb20cd62c/gcc%2Ftestsuite%2Fgcc.dg%2Fc94-scanf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc94-scanf-1.c?ref=f3d360aad1dbc188c0f0bbe7d44a32bdb20cd62c", "patch": "@@ -0,0 +1,19 @@\n+/* Test for scanf formats.  Changes in C94 to C90.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:199409 -pedantic -Wformat\" } */\n+\n+typedef __WCHAR_TYPE__ wchar_t;\n+\n+extern int scanf (const char *, ...);\n+\n+void\n+foo (wchar_t *ls)\n+{\n+  /* See ISO/IEC 9899:1990 (E) subclause 7.9.6.2 (pages 134-138),\n+     as amended by ISO/IEC 9899:1990/Amd.1:1995 (E) (pages 5-6).\n+     We do not repeat here all the C90 format checks, but just verify\n+     that %ls, %lc, %l[] are accepted without warning.\n+  */\n+  scanf (\"%lc%ls%l[abc]\", ls, ls, ls);\n+}"}]}