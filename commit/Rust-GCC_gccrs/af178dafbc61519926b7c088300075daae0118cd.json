{"sha": "af178dafbc61519926b7c088300075daae0118cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYxNzhkYWZiYzYxNTE5OTI2YjdjMDg4MzAwMDc1ZGFhZTAxMThjZA==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2011-06-09T22:19:20Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2011-06-09T22:19:20Z"}, "message": "re PR target/49307 (ICE in spill_failure, at reload1.c:2113)\n\n\tPR target/49307\n\t* config/sh/sh.md (UNSPEC_CHKADD): New.\n\t(chk_guard_add): New define_insn_and_split.\n\t(symGOT_load): Use chk_guard_add instead of blockage.\n\t* gcc.dg/pr49307.c: New.\n\nFrom-SVN: r174861", "tree": {"sha": "e7be741c2a5488c3f87639712e372da005bda062", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7be741c2a5488c3f87639712e372da005bda062"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af178dafbc61519926b7c088300075daae0118cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af178dafbc61519926b7c088300075daae0118cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af178dafbc61519926b7c088300075daae0118cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af178dafbc61519926b7c088300075daae0118cd/comments", "author": null, "committer": null, "parents": [{"sha": "bf806a90c9e000332733ad76e92b1554f740829f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf806a90c9e000332733ad76e92b1554f740829f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf806a90c9e000332733ad76e92b1554f740829f"}], "stats": {"total": 56, "additions": 49, "deletions": 7}, "files": [{"sha": "e261d33396435fd54688fe677046462a247b927e", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af178dafbc61519926b7c088300075daae0118cd/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af178dafbc61519926b7c088300075daae0118cd/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=af178dafbc61519926b7c088300075daae0118cd", "patch": "@@ -150,6 +150,7 @@\n   (UNSPEC_DIV_INV_TABLE\t37)\n   (UNSPEC_ASHIFTRT\t35)\n   (UNSPEC_THUNK\t\t36)\n+  (UNSPEC_CHKADD\t38)\n   (UNSPEC_SP_SET\t40)\n   (UNSPEC_SP_TEST\t41)\n   (UNSPEC_MOVUA\t\t42)\n@@ -8454,6 +8455,22 @@ label:\n   i++;\n }\")\n \n+;; op0 = op1 + r12 but hide it before reload completed.  See the comment\n+;; in symGOT_load expand.\n+\n+(define_insn_and_split \"chk_guard_add\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=&r\")\n+\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t    (reg:SI PIC_REG)]\n+\t\t   UNSPEC_CHKADD))]\n+  \"TARGET_SH1\"\n+  \"#\"\n+  \"TARGET_SH1 && reload_completed\"\n+  [(set (match_dup 0) (reg:SI PIC_REG))\n+   (set (match_dup 0) (plus:SI (match_dup 0) (match_dup 1)))]\n+  \"\"\n+  [(set_attr \"type\" \"arith\")])\n+\n (define_expand \"sym_label2reg\"\n   [(set (match_operand:SI 0 \"\" \"\")\n \t(const:SI (unspec:SI [(match_operand:SI 1 \"\" \"\")\n@@ -8496,13 +8513,9 @@ label:\n   else\n     emit_move_insn (operands[2], operands[1]);\n \n-  emit_move_insn (operands[3], gen_rtx_PLUS (Pmode,\n-\t\t\t\t\t     operands[2],\n-\t\t\t\t\t     gen_rtx_REG (Pmode, PIC_REG)));\n-\n   /* When stack protector inserts codes after the result is set to\n-     R0, @(rX, r12) will cause a spill failure for R0.  Don't schedule\n-     insns to avoid combining (set A (plus rX r12)) and (set op0 (mem A))\n+     R0, @(rX, r12) will cause a spill failure for R0.  Use a unspec\n+     insn to avoid combining (set A (plus rX r12)) and (set op0 (mem A))\n      when rX is a GOT address for the guard symbol.  Ugly but doesn't\n      matter because this is a rare situation.  */\n   if (!TARGET_SHMEDIA\n@@ -8512,7 +8525,10 @@ label:\n       && GET_CODE (XVECEXP (XEXP (operands[1], 0), 0, 0)) == SYMBOL_REF\n       && strcmp (XSTR (XVECEXP (XEXP (operands[1], 0), 0, 0), 0),\n \t\t \\\"__stack_chk_guard\\\") == 0)\n-    emit_insn (gen_blockage ());\n+    emit_insn (gen_chk_guard_add (operands[3], operands[2]));\n+  else\n+    emit_move_insn (operands[3], gen_rtx_PLUS (Pmode, operands[2],\n+\t\t\t\t\t       gen_rtx_REG (Pmode, PIC_REG)));\n \n   /* N.B. This is not constant for a GOTPLT relocation.  */\n   mem = gen_rtx_MEM (Pmode, operands[3]);"}, {"sha": "fa1fec8849f87c7630cd72dff261434c3a45874c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af178dafbc61519926b7c088300075daae0118cd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af178dafbc61519926b7c088300075daae0118cd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=af178dafbc61519926b7c088300075daae0118cd", "patch": "@@ -1,3 +1,8 @@\n+2011-06-09  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\tPR target/49307\n+\t* gcc.dg/pr49307.c: New.\n+\n 2011-06-09  Wei Guozhi  <carrot@google.com>\n \n \tPR target/46975"}, {"sha": "e05659a8e161da13f9348f0560ff686f39312f95", "filename": "gcc/testsuite/gcc.dg/pr49307.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af178dafbc61519926b7c088300075daae0118cd/gcc%2Ftestsuite%2Fgcc.dg%2Fpr49307.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af178dafbc61519926b7c088300075daae0118cd/gcc%2Ftestsuite%2Fgcc.dg%2Fpr49307.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr49307.c?ref=af178dafbc61519926b7c088300075daae0118cd", "patch": "@@ -0,0 +1,21 @@\n+/* PR target/49307 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fpic -fstack-protector\" } */\n+/* { dg-require-effective-target fpic } */\n+/* { dg-require-effective-target fstack_protector } */\n+\n+extern void bar (char **pp, void *vp);\n+extern void free (void *p);\n+\n+int\n+foo (void)\n+{\n+  char *p;\n+  char fext[128];\n+\n+  p = fext;\n+  bar (&p, (void *)0);\n+  if (p)\n+    free (p);\n+  return 0;\n+}"}]}