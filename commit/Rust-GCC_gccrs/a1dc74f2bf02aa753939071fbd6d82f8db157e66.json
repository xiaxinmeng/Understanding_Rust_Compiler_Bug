{"sha": "a1dc74f2bf02aa753939071fbd6d82f8db157e66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFkYzc0ZjJiZjAyYWE3NTM5MzkwNzFmYmQ2ZDgyZjhkYjE1N2U2Ng==", "commit": {"author": {"name": "James Lemke", "email": "jwlemke@codesourcery.com", "date": "2012-10-11T17:39:26Z"}, "committer": {"name": "James Lemke", "email": "jwlemke@gcc.gnu.org", "date": "2012-10-11T17:39:26Z"}, "message": "As suggested here:\n\nhttp://gcc.gnu.org/ml/gcc-patches/2012-10/msg00283.html\n\nThe following are committed as obvious / trivial:\n\t* config/rs6000/predicates.md (zero_fp_constant): Fix comment.\n\t* config/rs6000/rs6000.md (return_pred): Fix null return.\n\t* config/rs6000/rs6000.c (rs6000_emit_set_const): Fix indentation.\n\t(print_operand): Make FALLTHRU obvious.\n\t(output_cbranch): Correct comment.\n\nFrom-SVN: r192373", "tree": {"sha": "10266a0312c5f477c4b0be8ff975bc780ee54f8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10266a0312c5f477c4b0be8ff975bc780ee54f8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1dc74f2bf02aa753939071fbd6d82f8db157e66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1dc74f2bf02aa753939071fbd6d82f8db157e66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1dc74f2bf02aa753939071fbd6d82f8db157e66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1dc74f2bf02aa753939071fbd6d82f8db157e66/comments", "author": null, "committer": null, "parents": [{"sha": "5551b12c31a9de37316de9aa8174ad56645ac440", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5551b12c31a9de37316de9aa8174ad56645ac440", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5551b12c31a9de37316de9aa8174ad56645ac440"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "9ddad1bd4a3d65d13a9a24385883f5de9f1e0b29", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1dc74f2bf02aa753939071fbd6d82f8db157e66/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1dc74f2bf02aa753939071fbd6d82f8db157e66/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a1dc74f2bf02aa753939071fbd6d82f8db157e66", "patch": "@@ -1,3 +1,11 @@\n+2012-10-11  James Lemke  <jwlemke@codesourcery.com>\n+\n+\t* config/rs6000/predicates.md (zero_fp_constant): Fix comment.\n+\t* config/rs6000/rs6000.md (return_pred): Fix null return.\n+\t* config/rs6000/rs6000.c (rs6000_emit_set_const): Fix indentation.\n+\t(print_operand): Make FALLTHRU obvious.\n+\t(output_cbranch): Correct comment.\n+\n 2012-10-11  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/alpha/alpha.md (DWI): New mode attribute."}, {"sha": "99130ba6eef40c58aa72231b129322146715ac55", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1dc74f2bf02aa753939071fbd6d82f8db157e66/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1dc74f2bf02aa753939071fbd6d82f8db157e66/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=a1dc74f2bf02aa753939071fbd6d82f8db157e66", "patch": "@@ -490,7 +490,6 @@\n        (match_test \"op == CONST0_RTX (mode)\")))\n \n ;; Return 1 if operand is 0.0.\n-;; or non-special register register field no cr0\n (define_predicate \"zero_fp_constant\"\n   (and (match_code \"const_double\")\n        (match_test \"SCALAR_FLOAT_MODE_P (mode)"}, {"sha": "b6f3a9c9407b2c4659fdb0de3731cc0a54e1d596", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1dc74f2bf02aa753939071fbd6d82f8db157e66/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1dc74f2bf02aa753939071fbd6d82f8db157e66/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a1dc74f2bf02aa753939071fbd6d82f8db157e66", "patch": "@@ -6751,7 +6751,7 @@ rs6000_emit_set_const (rtx dest, enum machine_mode mode,\n \n   switch (mode)\n     {\n-      case  QImode:\n+    case  QImode:\n     case HImode:\n       if (dest == NULL)\n \tdest = gen_reg_rtx (mode);\n@@ -14990,11 +14990,10 @@ print_operand (FILE *file, rtx x, int code)\n       return;\n \n     case 'Q':\n-      if (TARGET_MFCRF)\n-\tfputc (',', file);\n-        /* FALLTHRU */\n-      else\n+      if (! TARGET_MFCRF)\n \treturn;\n+      fputc (',', file);\n+      /* FALLTHRU */\n \n     case 'R':\n       /* X is a CR register.  Print the mask for `mtcrf'.  */\n@@ -15939,7 +15938,7 @@ rs6000_emit_cbranch (enum machine_mode mode, rtx operands[])\n }\n \n /* Return the string to output a conditional branch to LABEL, which is\n-   the operand number of the label, or -1 if the branch is really a\n+   the operand template of the label, or NULL if the branch is really a\n    conditional return.\n \n    OP is the conditional expression.  XEXP (OP, 0) is assumed to be a"}, {"sha": "96f4f6a83211d00c31db99148118f85299d9f1c9", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1dc74f2bf02aa753939071fbd6d82f8db157e66/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1dc74f2bf02aa753939071fbd6d82f8db157e66/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=a1dc74f2bf02aa753939071fbd6d82f8db157e66", "patch": "@@ -266,7 +266,7 @@\n ; Conditional returns.\n (define_code_iterator any_return [return simple_return])\n (define_code_attr return_pred [(return \"direct_return ()\")\n-\t\t\t       (simple_return \"\")])\n+\t\t\t       (simple_return \"1\")])\n (define_code_attr return_str [(return \"\") (simple_return \"simple_\")])\n \n ; Various instructions that come in SI and DI forms."}]}